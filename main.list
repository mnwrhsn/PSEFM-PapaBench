
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 50 05 20 95 88 01 00 d9 88 01 00 d9 88 01 00     .P. ............
      10:	d9 88 01 00 d9 88 01 00 d9 88 01 00 00 00 00 00     ................
	...
      2c:	79 5b 00 00 d9 88 01 00 00 00 00 00 85 5c 00 00     y[...........\..
      3c:	c1 5c 00 00 d9 88 01 00 d9 88 01 00 d9 88 01 00     .\..............
      4c:	d9 88 01 00 d9 88 01 00 d9 88 01 00 d9 88 01 00     ................
      5c:	d9 88 01 00 d9 88 01 00 d9 88 01 00 d9 88 01 00     ................
      6c:	d9 88 01 00 d9 88 01 00 d9 88 01 00 d9 88 01 00     ................
      7c:	d9 88 01 00 d9 88 01 00 d9 88 01 00 d9 88 01 00     ................
      8c:	d9 88 01 00 d9 88 01 00 d9 88 01 00 d9 88 01 00     ................
      9c:	d9 88 01 00 d9 88 01 00 d9 88 01 00 d9 88 01 00     ................
      ac:	d9 88 01 00 d9 88 01 00 d9 88 01 00 d9 88 01 00     ................
      bc:	d9 88 01 00 d9 88 01 00 d9 88 01 00 d9 88 01 00     ................
      cc:	d9 88 01 00 d9 88 01 00 d9 88 01 00 d9 88 01 00     ................
      dc:	d9 88 01 00 d9 88 01 00 d9 88 01 00 d9 88 01 00     ................
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
     31c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     31e:	2300      	movs	r3, #0
     320:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     322:	683b      	ldr	r3, [r7, #0]
     324:	687a      	ldr	r2, [r7, #4]
     326:	e843 2300 	strex	r3, r2, [r3]
     32a:	60fb      	str	r3, [r7, #12]
   return(result);
     32c:	68fb      	ldr	r3, [r7, #12]
}
     32e:	4618      	mov	r0, r3
     330:	3714      	adds	r7, #20
     332:	46bd      	mov	sp, r7
     334:	f85d 7b04 	ldr.w	r7, [sp], #4
     338:	4770      	bx	lr
     33a:	bf00      	nop

0000033c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     344:	f2c4 0302 	movt	r3, #16386	; 0x4002
     348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     350:	6812      	ldr	r2, [r2, #0]
     352:	f042 0201 	orr.w	r2, r2, #1
     356:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     35c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     364:	f2c4 0302 	movt	r3, #16386	; 0x4002
     368:	6859      	ldr	r1, [r3, #4]
     36a:	2300      	movs	r3, #0
     36c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     370:	400b      	ands	r3, r1
     372:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     378:	f2c4 0302 	movt	r3, #16386	; 0x4002
     37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     380:	f2c4 0202 	movt	r2, #16386	; 0x4002
     384:	6812      	ldr	r2, [r2, #0]
     386:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     38a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     38e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b8:	6852      	ldr	r2, [r2, #4]
     3ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3cc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ce:	f000 f8a7 	bl	520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     3d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3de:	609a      	str	r2, [r3, #8]
#endif
}
     3e0:	bd80      	pop	{r7, pc}
     3e2:	bf00      	nop

000003e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3e4:	b480      	push	{r7}
     3e6:	b085      	sub	sp, #20
     3e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	60fb      	str	r3, [r7, #12]
     3ee:	2300      	movs	r3, #0
     3f0:	60bb      	str	r3, [r7, #8]
     3f2:	2300      	movs	r3, #0
     3f4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3fe:	685b      	ldr	r3, [r3, #4]
     400:	f003 030c 	and.w	r3, r3, #12
     404:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b04      	cmp	r3, #4
     40a:	d00d      	beq.n	428 <SystemCoreClockUpdate+0x44>
     40c:	2b08      	cmp	r3, #8
     40e:	d015      	beq.n	43c <SystemCoreClockUpdate+0x58>
     410:	2b00      	cmp	r3, #0
     412:	d15b      	bne.n	4cc <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     414:	f240 0300 	movw	r3, #0
     418:	f2c2 0300 	movt	r3, #8192	; 0x2000
     41c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     420:	f2c0 027a 	movt	r2, #122	; 0x7a
     424:	601a      	str	r2, [r3, #0]
      break;
     426:	e05b      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     428:	f240 0300 	movw	r3, #0
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     434:	f2c0 027a 	movt	r2, #122	; 0x7a
     438:	601a      	str	r2, [r3, #0]
      break;
     43a:	e051      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     440:	f2c4 0302 	movt	r3, #16386	; 0x4002
     444:	685b      	ldr	r3, [r3, #4]
     446:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     44a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     44c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     450:	f2c4 0302 	movt	r3, #16386	; 0x4002
     454:	685b      	ldr	r3, [r3, #4]
     456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     45a:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     45c:	68bb      	ldr	r3, [r7, #8]
     45e:	0c9b      	lsrs	r3, r3, #18
     460:	3302      	adds	r3, #2
     462:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     470:	f2c0 033d 	movt	r3, #61	; 0x3d
     474:	fb03 f202 	mul.w	r2, r3, r2
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	601a      	str	r2, [r3, #0]
     482:	e022      	b.n	4ca <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     488:	f2c4 0302 	movt	r3, #16386	; 0x4002
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     492:	2b00      	cmp	r3, #0
     494:	d00c      	beq.n	4b0 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     496:	68ba      	ldr	r2, [r7, #8]
     498:	f44f 6310 	mov.w	r3, #2304	; 0x900
     49c:	f2c0 033d 	movt	r3, #61	; 0x3d
     4a0:	fb03 f202 	mul.w	r2, r3, r2
     4a4:	f240 0300 	movw	r3, #0
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	601a      	str	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     4b0:	68ba      	ldr	r2, [r7, #8]
     4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
     4ba:	fb03 f202 	mul.w	r2, r3, r2
     4be:	f240 0300 	movw	r3, #0
     4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4c8:	e00a      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
     4ca:	e009      	b.n	4e0 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     4cc:	f240 0300 	movw	r3, #0
     4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     4d8:	f2c0 027a 	movt	r2, #122	; 0x7a
     4dc:	601a      	str	r2, [r3, #0]
      break;
     4de:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ee:	091a      	lsrs	r2, r3, #4
     4f0:	f240 0304 	movw	r3, #4
     4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4f8:	5c9b      	ldrb	r3, [r3, r2]
     4fa:	b2db      	uxtb	r3, r3
     4fc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     4fe:	f240 0300 	movw	r3, #0
     502:	f2c2 0300 	movt	r3, #8192	; 0x2000
     506:	681a      	ldr	r2, [r3, #0]
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	40da      	lsrs	r2, r3
     50c:	f240 0300 	movw	r3, #0
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
}
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     524:	f000 f802 	bl	52c <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     528:	bd80      	pop	{r7, pc}
     52a:	bf00      	nop

0000052c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     532:	2300      	movs	r3, #0
     534:	607b      	str	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     556:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     560:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3301      	adds	r3, #1
     566:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d103      	bne.n	576 <SetSysClockTo72+0x4a>
     56e:	687b      	ldr	r3, [r7, #4]
     570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     574:	d1ed      	bne.n	552 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     57e:	681b      	ldr	r3, [r3, #0]
     580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     584:	2b00      	cmp	r3, #0
     586:	d002      	beq.n	58e <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     588:	2301      	movs	r3, #1
     58a:	603b      	str	r3, [r7, #0]
     58c:	e001      	b.n	592 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     58e:	2300      	movs	r3, #0
     590:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     592:	683b      	ldr	r3, [r7, #0]
     594:	2b01      	cmp	r3, #1
     596:	f040 8094 	bne.w	6c2 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     59e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5aa:	6812      	ldr	r2, [r2, #0]
     5ac:	f042 0210 	orr.w	r2, r2, #16
     5b0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     5b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5be:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	f022 0203 	bic.w	r2, r2, #3
     5c8:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     5ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5da:	6812      	ldr	r2, [r2, #0]
     5dc:	f042 0202 	orr.w	r2, r2, #2
     5e0:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5f2:	6852      	ldr	r2, [r2, #4]
     5f4:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     602:	f2c4 0202 	movt	r2, #16386	; 0x4002
     606:	6852      	ldr	r2, [r2, #4]
     608:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     616:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61a:	6852      	ldr	r2, [r2, #4]
     61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     620:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     626:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     632:	6852      	ldr	r2, [r2, #4]
     634:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     638:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     63e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     646:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64a:	6852      	ldr	r2, [r2, #4]
     64c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     650:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     65e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     662:	6812      	ldr	r2, [r2, #0]
     664:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     668:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     66a:	bf00      	nop
     66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     670:	f2c4 0302 	movt	r3, #16386	; 0x4002
     674:	681b      	ldr	r3, [r3, #0]
     676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     67a:	2b00      	cmp	r3, #0
     67c:	d0f6      	beq.n	66c <SetSysClockTo72+0x140>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     682:	f2c4 0302 	movt	r3, #16386	; 0x4002
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68e:	6852      	ldr	r2, [r2, #4]
     690:	f022 0203 	bic.w	r2, r2, #3
     694:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     69a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a6:	6852      	ldr	r2, [r2, #4]
     6a8:	f042 0202 	orr.w	r2, r2, #2
     6ac:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6ae:	bf00      	nop
     6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 030c 	and.w	r3, r3, #12
     6be:	2b08      	cmp	r3, #8
     6c0:	d1f6      	bne.n	6b0 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     6c2:	370c      	adds	r7, #12
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr
     6cc:	00018a50 	.word	0x00018a50
     6d0:	20000000 	.word	0x20000000
     6d4:	20000488 	.word	0x20000488
     6d8:	20000488 	.word	0x20000488
     6dc:	2004c7a8 	.word	0x2004c7a8

000006e0 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     6e0:	b480      	push	{r7}
     6e2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f4:	6812      	ldr	r2, [r2, #0]
     6f6:	f042 0201 	orr.w	r2, r2, #1
     6fa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     6fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     700:	f2c4 0202 	movt	r2, #16386	; 0x4002
     704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     708:	f2c4 0302 	movt	r3, #16386	; 0x4002
     70c:	6859      	ldr	r1, [r3, #4]
     70e:	2300      	movs	r3, #0
     710:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     714:	400b      	ands	r3, r1
     716:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     71c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	f2c4 0202 	movt	r2, #16386	; 0x4002
     728:	6812      	ldr	r2, [r2, #0]
     72a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     72e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     732:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     74a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     758:	f2c4 0202 	movt	r2, #16386	; 0x4002
     75c:	6852      	ldr	r2, [r2, #4]
     75e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     762:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 0302 	movt	r3, #16386	; 0x4002
     76c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     770:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     77c:	b480      	push	{r7}
     77e:	b083      	sub	sp, #12
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     79a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6812      	ldr	r2, [r2, #0]
     7ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7b2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     7ba:	d003      	beq.n	7c4 <RCC_HSEConfig+0x48>
     7bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     7c0:	d00d      	beq.n	7de <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;

    default:
      break;
     7c2:	e019      	b.n	7f8 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d4:	6812      	ldr	r2, [r2, #0]
     7d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     7da:	601a      	str	r2, [r3, #0]
      break;
     7dc:	e00c      	b.n	7f8 <RCC_HSEConfig+0x7c>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ee:	6812      	ldr	r2, [r2, #0]
     7f0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     7f4:	601a      	str	r2, [r3, #0]
      break;
     7f6:	bf00      	nop

    default:
      break;
  }
}
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     800:	4770      	bx	lr
     802:	bf00      	nop

00000804 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     80a:	2300      	movs	r3, #0
     80c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     80e:	2300      	movs	r3, #0
     810:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     812:	2300      	movs	r3, #0
     814:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     816:	2031      	movs	r0, #49	; 0x31
     818:	f000 fba2 	bl	f60 <RCC_GetFlagStatus>
     81c:	4603      	mov	r3, r0
     81e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     820:	683b      	ldr	r3, [r7, #0]
     822:	3301      	adds	r3, #1
     824:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     826:	683b      	ldr	r3, [r7, #0]
     828:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     82c:	d002      	beq.n	834 <RCC_WaitForHSEStartUp+0x30>
     82e:	79bb      	ldrb	r3, [r7, #6]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     834:	2031      	movs	r0, #49	; 0x31
     836:	f000 fb93 	bl	f60 <RCC_GetFlagStatus>
     83a:	4603      	mov	r3, r0
     83c:	2b00      	cmp	r3, #0
     83e:	d002      	beq.n	846 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     840:	2301      	movs	r3, #1
     842:	71fb      	strb	r3, [r7, #7]
     844:	e001      	b.n	84a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     846:	2300      	movs	r3, #0
     848:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     84a:	79fb      	ldrb	r3, [r7, #7]
}
     84c:	4618      	mov	r0, r3
     84e:	3708      	adds	r7, #8
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}

00000854 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     854:	b480      	push	{r7}
     856:	b085      	sub	sp, #20
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     85e:	2300      	movs	r3, #0
     860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     866:	f2c4 0302 	movt	r3, #16386	; 0x4002
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     874:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     876:	79fb      	ldrb	r3, [r7, #7]
     878:	00db      	lsls	r3, r3, #3
     87a:	68fa      	ldr	r2, [r7, #12]
     87c:	4313      	orrs	r3, r2
     87e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     884:	f2c4 0302 	movt	r3, #16386	; 0x4002
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	3714      	adds	r7, #20
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	4603      	mov	r3, r0
     8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8a2:	2300      	movs	r3, #0
     8a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8a8:	79fa      	ldrb	r2, [r7, #7]
     8aa:	601a      	str	r2, [r3, #0]
}
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     8b8:	b480      	push	{r7}
     8ba:	b085      	sub	sp, #20
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     8c2:	2300      	movs	r3, #0
     8c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     8d8:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     8da:	687a      	ldr	r2, [r7, #4]
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	4313      	orrs	r3, r2
     8e0:	68fa      	ldr	r2, [r7, #12]
     8e2:	4313      	orrs	r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	605a      	str	r2, [r3, #4]
}
     8f2:	3714      	adds	r7, #20
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     906:	2360      	movs	r3, #96	; 0x60
     908:	f2c4 2342 	movt	r3, #16962	; 0x4242
     90c:	79fa      	ldrb	r2, [r7, #7]
     90e:	601a      	str	r2, [r3, #0]
}
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     930:	685b      	ldr	r3, [r3, #4]
     932:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	687b      	ldr	r3, [r7, #4]
     940:	4313      	orrs	r3, r2
     942:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     948:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94c:	68fa      	ldr	r2, [r7, #12]
     94e:	605a      	str	r2, [r3, #4]
}
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     95c:	b480      	push	{r7}
     95e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	685b      	ldr	r3, [r3, #4]
     96a:	b2db      	uxtb	r3, r3
     96c:	f003 030c 	and.w	r3, r3, #12
     970:	b2db      	uxtb	r3, r3
}
     972:	4618      	mov	r0, r3
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     97c:	b480      	push	{r7}
     97e:	b085      	sub	sp, #20
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     984:	2300      	movs	r3, #0
     986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     990:	685b      	ldr	r3, [r3, #4]
     992:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     99a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4313      	orrs	r3, r2
     9a2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ac:	68fa      	ldr	r2, [r7, #12]
     9ae:	605a      	str	r2, [r3, #4]
}
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     9da:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4313      	orrs	r3, r2
     9e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	605a      	str	r2, [r3, #4]
}
     9f0:	3714      	adds	r7, #20
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     9fc:	b480      	push	{r7}
     9fe:	b085      	sub	sp, #20
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a04:	2300      	movs	r3, #0
     a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a1a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	68fa      	ldr	r2, [r7, #12]
     a22:	4313      	orrs	r3, r2
     a24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	605a      	str	r2, [r3, #4]
}
     a32:	3714      	adds	r7, #20
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr

00000a3c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a3c:	b480      	push	{r7}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	71fa      	strb	r2, [r7, #7]
     a48:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a4a:	79bb      	ldrb	r3, [r7, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00e      	beq.n	a6e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     a50:	f241 0309 	movw	r3, #4105	; 0x1009
     a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a58:	f241 0209 	movw	r2, #4105	; 0x1009
     a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	b2d1      	uxtb	r1, r2
     a64:	79fa      	ldrb	r2, [r7, #7]
     a66:	430a      	orrs	r2, r1
     a68:	b2d2      	uxtb	r2, r2
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e00f      	b.n	a8e <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     a6e:	f241 0309 	movw	r3, #4105	; 0x1009
     a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a76:	f241 0209 	movw	r2, #4105	; 0x1009
     a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	b2d1      	uxtb	r1, r2
     a82:	79fa      	ldrb	r2, [r7, #7]
     a84:	43d2      	mvns	r2, r2
     a86:	b2d2      	uxtb	r2, r2
     a88:	400a      	ands	r2, r1
     a8a:	b2d2      	uxtb	r2, r2
     a8c:	701a      	strb	r2, [r3, #0]
  }
}
     a8e:	370c      	adds	r7, #12
     a90:	46bd      	mov	sp, r7
     a92:	f85d 7b04 	ldr.w	r7, [sp], #4
     a96:	4770      	bx	lr

00000a98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     aa0:	23d8      	movs	r3, #216	; 0xd8
     aa2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab2:	4770      	bx	lr

00000ab4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ab4:	b480      	push	{r7}
     ab6:	b085      	sub	sp, #20
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     abc:	2300      	movs	r3, #0
     abe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ad2:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     afe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b0a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b12:	2200      	movs	r2, #0
     b14:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	2b01      	cmp	r3, #1
     b1a:	d002      	beq.n	b22 <RCC_LSEConfig+0x2e>
     b1c:	2b04      	cmp	r3, #4
     b1e:	d007      	beq.n	b30 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;

    default:
      break;
     b20:	e00d      	b.n	b3e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
      break;
     b2e:	e006      	b.n	b3e <RCC_LSEConfig+0x4a>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b30:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b38:	2205      	movs	r2, #5
     b3a:	701a      	strb	r2, [r3, #0]
      break;
     b3c:	bf00      	nop

    default:
      break;
  }
}
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr

00000b48 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b48:	b480      	push	{r7}
     b4a:	b083      	sub	sp, #12
     b4c:	af00      	add	r7, sp, #0
     b4e:	4603      	mov	r3, r0
     b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     b52:	f44f 6390 	mov.w	r3, #1152	; 0x480
     b56:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b5a:	79fa      	ldrb	r2, [r7, #7]
     b5c:	601a      	str	r2, [r3, #0]
}
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	f85d 7b04 	ldr.w	r7, [sp], #4
     b66:	4770      	bx	lr

00000b68 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b80:	6a11      	ldr	r1, [r2, #32]
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	430a      	orrs	r2, r1
     b86:	621a      	str	r2, [r3, #32]
}
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     b94:	b480      	push	{r7}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	4603      	mov	r3, r0
     b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     b9e:	f240 433c 	movw	r3, #1084	; 0x43c
     ba2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ba6:	79fa      	ldrb	r2, [r7, #7]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     bb4:	b480      	push	{r7}
     bb6:	b087      	sub	sp, #28
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	617b      	str	r3, [r7, #20]
     bc0:	2300      	movs	r3, #0
     bc2:	613b      	str	r3, [r7, #16]
     bc4:	2300      	movs	r3, #0
     bc6:	60fb      	str	r3, [r7, #12]
     bc8:	2300      	movs	r3, #0
     bca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	f003 030c 	and.w	r3, r3, #12
     bda:	617b      	str	r3, [r7, #20]

  switch (tmp)
     bdc:	697b      	ldr	r3, [r7, #20]
     bde:	2b04      	cmp	r3, #4
     be0:	d00a      	beq.n	bf8 <RCC_GetClocksFreq+0x44>
     be2:	2b08      	cmp	r3, #8
     be4:	d00f      	beq.n	c06 <RCC_GetClocksFreq+0x52>
     be6:	2b00      	cmp	r3, #0
     be8:	d14c      	bne.n	c84 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     bea:	687a      	ldr	r2, [r7, #4]
     bec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bf0:	f2c0 037a 	movt	r3, #122	; 0x7a
     bf4:	6013      	str	r3, [r2, #0]
      break;
     bf6:	e04c      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     bf8:	687a      	ldr	r2, [r7, #4]
     bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bfe:	f2c0 037a 	movt	r3, #122	; 0x7a
     c02:	6013      	str	r3, [r2, #0]
      break;
     c04:	e045      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c14:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c24:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     c26:	693b      	ldr	r3, [r7, #16]
     c28:	0c9b      	lsrs	r3, r3, #18
     c2a:	3302      	adds	r3, #2
     c2c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	2b00      	cmp	r3, #0
     c32:	d109      	bne.n	c48 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c34:	693a      	ldr	r2, [r7, #16]
     c36:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c3a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c3e:	fb03 f202 	mul.w	r2, r3, r2
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	601a      	str	r2, [r3, #0]
     c46:	e01c      	b.n	c82 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     c5a:	693a      	ldr	r2, [r7, #16]
     c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c60:	f2c0 033d 	movt	r3, #61	; 0x3d
     c64:	fb03 f202 	mul.w	r2, r3, r2
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	e009      	b.n	c82 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     c6e:	693a      	ldr	r2, [r7, #16]
     c70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c74:	f2c0 037a 	movt	r3, #122	; 0x7a
     c78:	fb03 f202 	mul.w	r2, r3, r2
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     c80:	e007      	b.n	c92 <RCC_GetClocksFreq+0xde>
     c82:	e006      	b.n	c92 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c84:	687a      	ldr	r2, [r7, #4]
     c86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c8a:	f2c0 037a 	movt	r3, #122	; 0x7a
     c8e:	6013      	str	r3, [r2, #0]
      break;
     c90:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ca2:	697b      	ldr	r3, [r7, #20]
     ca4:	091b      	lsrs	r3, r3, #4
     ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ca8:	f240 0314 	movw	r3, #20
     cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb0:	697a      	ldr	r2, [r7, #20]
     cb2:	4413      	add	r3, r2
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	40da      	lsrs	r2, r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     cd4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	0a1b      	lsrs	r3, r3, #8
     cda:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cdc:	f240 0314 	movw	r3, #20
     ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ce4:	697a      	ldr	r2, [r7, #20]
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	685a      	ldr	r2, [r3, #4]
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	40da      	lsrs	r2, r3
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	0adb      	lsrs	r3, r3, #11
     d0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d10:	f240 0314 	movw	r3, #20
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	4413      	add	r3, r2
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	b2db      	uxtb	r3, r3
     d20:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	40da      	lsrs	r2, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	0b9b      	lsrs	r3, r3, #14
     d42:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d44:	f240 0324 	movw	r3, #36	; 0x24
     d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4c:	697a      	ldr	r2, [r7, #20]
     d4e:	4413      	add	r3, r2
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	68da      	ldr	r2, [r3, #12]
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	fbb2 f2f3 	udiv	r2, r2, r3
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	611a      	str	r2, [r3, #16]
}
     d64:	371c      	adds	r7, #28
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     d70:	b480      	push	{r7}
     d72:	b083      	sub	sp, #12
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	460b      	mov	r3, r1
     d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     d7c:	78fb      	ldrb	r3, [r7, #3]
     d7e:	2b00      	cmp	r3, #0
     d80:	d00c      	beq.n	d9c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d92:	6951      	ldr	r1, [r2, #20]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	430a      	orrs	r2, r1
     d98:	615a      	str	r2, [r3, #20]
     d9a:	e00c      	b.n	db6 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     da8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dac:	6951      	ldr	r1, [r2, #20]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	43d2      	mvns	r2, r2
     db2:	400a      	ands	r2, r1
     db4:	615a      	str	r2, [r3, #20]
  }
}
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
     dea:	e00c      	b.n	e06 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6991      	ldr	r1, [r2, #24]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	619a      	str	r2, [r3, #24]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	69d1      	ldr	r1, [r2, #28]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	61da      	str	r2, [r3, #28]
     e3a:	e00c      	b.n	e56 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	69d1      	ldr	r1, [r2, #28]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	61da      	str	r2, [r3, #28]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	68d1      	ldr	r1, [r2, #12]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	60da      	str	r2, [r3, #12]
     e8a:	e00c      	b.n	ea6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	68d1      	ldr	r1, [r2, #12]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	60da      	str	r2, [r3, #12]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	6911      	ldr	r1, [r2, #16]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	611a      	str	r2, [r3, #16]
     eda:	e00c      	b.n	ef6 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	6911      	ldr	r1, [r2, #16]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	611a      	str	r2, [r3, #16]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f0a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f12:	79fa      	ldrb	r2, [r7, #7]
     f14:	601a      	str	r2, [r3, #0]
}
     f16:	370c      	adds	r7, #12
     f18:	46bd      	mov	sp, r7
     f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1e:	4770      	bx	lr

00000f20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f20:	b480      	push	{r7}
     f22:	b083      	sub	sp, #12
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f2a:	234c      	movs	r3, #76	; 0x4c
     f2c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	601a      	str	r2, [r3, #0]
}
     f34:	370c      	adds	r7, #12
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f4a:	f241 0307 	movw	r3, #4103	; 0x1007
     f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f52:	79fa      	ldrb	r2, [r7, #7]
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5e:	4770      	bx	lr

00000f60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f60:	b480      	push	{r7}
     f62:	b087      	sub	sp, #28
     f64:	af00      	add	r7, sp, #0
     f66:	4603      	mov	r3, r0
     f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     f6e:	2300      	movs	r3, #0
     f70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     f72:	2300      	movs	r3, #0
     f74:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     f76:	79fb      	ldrb	r3, [r7, #7]
     f78:	095b      	lsrs	r3, r3, #5
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b01      	cmp	r3, #1
     f82:	d106      	bne.n	f92 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	617b      	str	r3, [r7, #20]
     f90:	e00f      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	2b02      	cmp	r3, #2
     f96:	d106      	bne.n	fa6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa0:	6a1b      	ldr	r3, [r3, #32]
     fa2:	617b      	str	r3, [r7, #20]
     fa4:	e005      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	f003 031f 	and.w	r3, r3, #31
     fb8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	697a      	ldr	r2, [r7, #20]
     fbe:	fa22 f303 	lsr.w	r3, r2, r3
     fc2:	f003 0301 	and.w	r3, r3, #1
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
     fca:	2301      	movs	r3, #1
     fcc:	74fb      	strb	r3, [r7, #19]
     fce:	e001      	b.n	fd4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
     fd0:	2300      	movs	r3, #0
     fd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     fd4:	7cfb      	ldrb	r3, [r7, #19]
}
     fd6:	4618      	mov	r0, r3
     fd8:	371c      	adds	r7, #28
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop

00000fe4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     ffe:	625a      	str	r2, [r3, #36]	; 0x24
}
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr

00001008 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1012:	2300      	movs	r3, #0
    1014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    101e:	689a      	ldr	r2, [r3, #8]
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4013      	ands	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	d002      	beq.n	102e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1028:	2301      	movs	r3, #1
    102a:	73fb      	strb	r3, [r7, #15]
    102c:	e001      	b.n	1032 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    102e:	2300      	movs	r3, #0
    1030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	4603      	mov	r3, r0
    1048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    104a:	f241 030a 	movw	r3, #4106	; 0x100a
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	79fa      	ldrb	r2, [r7, #7]
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	370c      	adds	r7, #12
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr

00001060 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1068:	687a      	ldr	r2, [r7, #4]
    106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    106e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1072:	429a      	cmp	r2, r3
    1074:	d108      	bne.n	1088 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1076:	2004      	movs	r0, #4
    1078:	2101      	movs	r1, #1
    107a:	f7ff fef1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    107e:	2004      	movs	r0, #4
    1080:	2100      	movs	r1, #0
    1082:	f7ff feed 	bl	e60 <RCC_APB2PeriphResetCmd>
    1086:	e060      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    108e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1092:	429a      	cmp	r2, r3
    1094:	d108      	bne.n	10a8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1096:	2008      	movs	r0, #8
    1098:	2101      	movs	r1, #1
    109a:	f7ff fee1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    109e:	2008      	movs	r0, #8
    10a0:	2100      	movs	r1, #0
    10a2:	f7ff fedd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10a6:	e050      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10a8:	687a      	ldr	r2, [r7, #4]
    10aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10b2:	429a      	cmp	r2, r3
    10b4:	d108      	bne.n	10c8 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10b6:	2010      	movs	r0, #16
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff fed1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10be:	2010      	movs	r0, #16
    10c0:	2100      	movs	r1, #0
    10c2:	f7ff fecd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10c6:	e040      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    10ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10d2:	429a      	cmp	r2, r3
    10d4:	d108      	bne.n	10e8 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10d6:	2020      	movs	r0, #32
    10d8:	2101      	movs	r1, #1
    10da:	f7ff fec1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2100      	movs	r1, #0
    10e2:	f7ff febd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10e6:	e030      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOE)
    10e8:	687a      	ldr	r2, [r7, #4]
    10ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    10ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10f2:	429a      	cmp	r2, r3
    10f4:	d108      	bne.n	1108 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f6:	2040      	movs	r0, #64	; 0x40
    10f8:	2101      	movs	r1, #1
    10fa:	f7ff feb1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    10fe:	2040      	movs	r0, #64	; 0x40
    1100:	2100      	movs	r1, #0
    1102:	f7ff fead 	bl	e60 <RCC_APB2PeriphResetCmd>
    1106:	e020      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOF)
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    110e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1112:	429a      	cmp	r2, r3
    1114:	d108      	bne.n	1128 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1116:	2080      	movs	r0, #128	; 0x80
    1118:	2101      	movs	r1, #1
    111a:	f7ff fea1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111e:	2080      	movs	r0, #128	; 0x80
    1120:	2100      	movs	r1, #0
    1122:	f7ff fe9d 	bl	e60 <RCC_APB2PeriphResetCmd>
    1126:	e010      	b.n	114a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    112e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1132:	429a      	cmp	r2, r3
    1134:	d109      	bne.n	114a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2101      	movs	r1, #1
    113c:	f7ff fe90 	bl	e60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1140:	f44f 7080 	mov.w	r0, #256	; 0x100
    1144:	2100      	movs	r1, #0
    1146:	f7ff fe8b 	bl	e60 <RCC_APB2PeriphResetCmd>
    }
  }
}
    114a:	3708      	adds	r7, #8
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}

00001150 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1154:	2001      	movs	r0, #1
    1156:	2101      	movs	r1, #1
    1158:	f7ff fe82 	bl	e60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    115c:	2001      	movs	r0, #1
    115e:	2100      	movs	r1, #0
    1160:	f7ff fe7e 	bl	e60 <RCC_APB2PeriphResetCmd>
}
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop

00001168 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1168:	b480      	push	{r7}
    116a:	b089      	sub	sp, #36	; 0x24
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
    1170:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1172:	2300      	movs	r3, #0
    1174:	61fb      	str	r3, [r7, #28]
    1176:	2300      	movs	r3, #0
    1178:	613b      	str	r3, [r7, #16]
    117a:	2300      	movs	r3, #0
    117c:	61bb      	str	r3, [r7, #24]
    117e:	2300      	movs	r3, #0
    1180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1182:	2300      	movs	r3, #0
    1184:	617b      	str	r3, [r7, #20]
    1186:	2300      	movs	r3, #0
    1188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	f003 030f 	and.w	r3, r3, #15
    1192:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	78db      	ldrb	r3, [r3, #3]
    1198:	f003 0310 	and.w	r3, r3, #16
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <GPIO_Init+0x42>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11a0:	683b      	ldr	r3, [r7, #0]
    11a2:	789b      	ldrb	r3, [r3, #2]
    11a4:	69fa      	ldr	r2, [r7, #28]
    11a6:	4313      	orrs	r3, r2
    11a8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	881b      	ldrh	r3, [r3, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d044      	beq.n	123e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ba:	2300      	movs	r3, #0
    11bc:	61bb      	str	r3, [r7, #24]
    11be:	e038      	b.n	1232 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	2201      	movs	r2, #1
    11c4:	fa02 f303 	lsl.w	r3, r2, r3
    11c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11ca:	683b      	ldr	r3, [r7, #0]
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	461a      	mov	r2, r3
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	4013      	ands	r3, r2
    11d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11d6:	693a      	ldr	r2, [r7, #16]
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	429a      	cmp	r2, r3
    11dc:	d126      	bne.n	122c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	220f      	movs	r2, #15
    11e8:	fa02 f303 	lsl.w	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	43db      	mvns	r3, r3
    11f2:	697a      	ldr	r2, [r7, #20]
    11f4:	4013      	ands	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	69fa      	ldr	r2, [r7, #28]
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	4313      	orrs	r3, r2
    1204:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b28      	cmp	r3, #40	; 0x28
    120c:	d105      	bne.n	121a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    120e:	69bb      	ldr	r3, [r7, #24]
    1210:	2201      	movs	r2, #1
    1212:	409a      	lsls	r2, r3
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	615a      	str	r2, [r3, #20]
    1218:	e008      	b.n	122c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b48      	cmp	r3, #72	; 0x48
    1220:	d104      	bne.n	122c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	3301      	adds	r3, #1
    1230:	61bb      	str	r3, [r7, #24]
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b07      	cmp	r3, #7
    1236:	d9c3      	bls.n	11c0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	697a      	ldr	r2, [r7, #20]
    123c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	2bff      	cmp	r3, #255	; 0xff
    1244:	d946      	bls.n	12d4 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    124c:	2300      	movs	r3, #0
    124e:	61bb      	str	r3, [r7, #24]
    1250:	e03a      	b.n	12c8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3308      	adds	r3, #8
    1256:	2201      	movs	r2, #1
    1258:	fa02 f303 	lsl.w	r3, r2, r3
    125c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4013      	ands	r3, r2
    1268:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    126a:	693a      	ldr	r2, [r7, #16]
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	429a      	cmp	r2, r3
    1270:	d127      	bne.n	12c2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	009b      	lsls	r3, r3, #2
    1276:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	220f      	movs	r2, #15
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	43db      	mvns	r3, r3
    1286:	697a      	ldr	r2, [r7, #20]
    1288:	4013      	ands	r3, r2
    128a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	69fa      	ldr	r2, [r7, #28]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	78db      	ldrb	r3, [r3, #3]
    129e:	2b28      	cmp	r3, #40	; 0x28
    12a0:	d105      	bne.n	12ae <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	409a      	lsls	r2, r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b48      	cmp	r3, #72	; 0x48
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	3301      	adds	r3, #1
    12c6:	61bb      	str	r3, [r7, #24]
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	2b07      	cmp	r3, #7
    12cc:	d9c1      	bls.n	1252 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	605a      	str	r2, [r3, #4]
  }
}
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop

000012e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12e0:	b480      	push	{r7}
    12e2:	b083      	sub	sp, #12
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	2202      	movs	r2, #2
    12f4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	2204      	movs	r2, #4
    12fa:	70da      	strb	r2, [r3, #3]
}
    12fc:	370c      	adds	r7, #12
    12fe:	46bd      	mov	sp, r7
    1300:	f85d 7b04 	ldr.w	r7, [sp], #4
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1308:	b480      	push	{r7}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	460b      	mov	r3, r1
    1312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1314:	2300      	movs	r3, #0
    1316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	689a      	ldr	r2, [r3, #8]
    131c:	887b      	ldrh	r3, [r7, #2]
    131e:	4013      	ands	r3, r2
    1320:	2b00      	cmp	r3, #0
    1322:	d002      	beq.n	132a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1324:	2301      	movs	r3, #1
    1326:	73fb      	strb	r3, [r7, #15]
    1328:	e001      	b.n	132e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    132a:	2300      	movs	r3, #0
    132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    132e:	7bfb      	ldrb	r3, [r7, #15]
}
    1330:	4618      	mov	r0, r3
    1332:	3714      	adds	r7, #20
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	b29b      	uxth	r3, r3
}
    134a:	4618      	mov	r0, r3
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	68da      	ldr	r2, [r3, #12]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    13b4:	887a      	ldrh	r2, [r7, #2]
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	611a      	str	r2, [r3, #16]
}
    13ba:	370c      	adds	r7, #12
    13bc:	46bd      	mov	sp, r7
    13be:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c2:	4770      	bx	lr

000013c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	460b      	mov	r3, r1
    13ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    13d0:	887a      	ldrh	r2, [r7, #2]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	615a      	str	r2, [r3, #20]
}
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13e0:	b480      	push	{r7}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	4613      	mov	r3, r2
    13ea:	460a      	mov	r2, r1
    13ec:	807a      	strh	r2, [r7, #2]
    13ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    13f0:	787b      	ldrb	r3, [r7, #1]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d003      	beq.n	13fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    13f6:	887a      	ldrh	r2, [r7, #2]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	611a      	str	r2, [r3, #16]
    13fc:	e002      	b.n	1404 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    13fe:	887a      	ldrh	r2, [r7, #2]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	615a      	str	r2, [r3, #20]
  }
}
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	460b      	mov	r3, r1
    141a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    141c:	887a      	ldrh	r2, [r7, #2]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	60da      	str	r2, [r3, #12]
}
    1422:	370c      	adds	r7, #12
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    142c:	b480      	push	{r7}
    142e:	b085      	sub	sp, #20
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	460b      	mov	r3, r1
    1436:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    143c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    143e:	887b      	ldrh	r3, [r7, #2]
    1440:	68fa      	ldr	r2, [r7, #12]
    1442:	4313      	orrs	r3, r2
    1444:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	68fa      	ldr	r2, [r7, #12]
    144a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    144c:	887a      	ldrh	r2, [r7, #2]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	699b      	ldr	r3, [r3, #24]
    145c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	699b      	ldr	r3, [r3, #24]
    1462:	60fb      	str	r3, [r7, #12]
}
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr
    146e:	bf00      	nop

00001470 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1470:	b480      	push	{r7}
    1472:	b085      	sub	sp, #20
    1474:	af00      	add	r7, sp, #0
    1476:	4602      	mov	r2, r0
    1478:	460b      	mov	r3, r1
    147a:	71fa      	strb	r2, [r7, #7]
    147c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    147e:	2300      	movs	r3, #0
    1480:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1482:	2300      	movs	r3, #0
    1484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1492:	4013      	ands	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1496:	79fb      	ldrb	r3, [r7, #7]
    1498:	011b      	lsls	r3, r3, #4
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	4313      	orrs	r3, r2
    149e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14a0:	79bb      	ldrb	r3, [r7, #6]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	4313      	orrs	r3, r2
    14a6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14a8:	2300      	movs	r3, #0
    14aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	601a      	str	r2, [r3, #0]
}
    14b2:	3714      	adds	r7, #20
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr

000014bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14bc:	b480      	push	{r7}
    14be:	b083      	sub	sp, #12
    14c0:	af00      	add	r7, sp, #0
    14c2:	4603      	mov	r3, r0
    14c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14c6:	231c      	movs	r3, #28
    14c8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    14cc:	79fa      	ldrb	r2, [r7, #7]
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
    14da:	bf00      	nop

000014dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14dc:	b480      	push	{r7}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	460b      	mov	r3, r1
    14e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14e8:	2300      	movs	r3, #0
    14ea:	613b      	str	r3, [r7, #16]
    14ec:	2300      	movs	r3, #0
    14ee:	60fb      	str	r3, [r7, #12]
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	2b00      	cmp	r3, #0
    14fc:	da05      	bge.n	150a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    14fe:	2300      	movs	r3, #0
    1500:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e004      	b.n	1514 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    150a:	2300      	movs	r3, #0
    150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1510:	685b      	ldr	r3, [r3, #4]
    1512:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    151a:	0c1b      	lsrs	r3, r3, #16
    151c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	b29b      	uxth	r3, r3
    1522:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    152e:	d10e      	bne.n	154e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1536:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1538:	2300      	movs	r3, #0
    153a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    153e:	2200      	movs	r2, #0
    1540:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da05      	bge.n	15bc <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	2300      	movs	r3, #0
    15b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	61da      	str	r2, [r3, #28]
    15ba:	e004      	b.n	15c6 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15bc:	2300      	movs	r3, #0
    15be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	605a      	str	r2, [r3, #4]
  }
}
    15c6:	371c      	adds	r7, #28
    15c8:	46bd      	mov	sp, r7
    15ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ce:	4770      	bx	lr

000015d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15d0:	b490      	push	{r4, r7}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	71fa      	strb	r2, [r7, #7]
    15dc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15de:	2300      	movs	r3, #0
    15e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15e2:	79bb      	ldrb	r3, [r7, #6]
    15e4:	f003 0303 	and.w	r3, r3, #3
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	220f      	movs	r2, #15
    15ec:	fa02 f303 	lsl.w	r3, r2, r3
    15f0:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15f2:	2300      	movs	r3, #0
    15f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15f8:	79ba      	ldrb	r2, [r7, #6]
    15fa:	0892      	lsrs	r2, r2, #2
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	2200      	movs	r2, #0
    1602:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1606:	79b9      	ldrb	r1, [r7, #6]
    1608:	0889      	lsrs	r1, r1, #2
    160a:	b2c9      	uxtb	r1, r1
    160c:	3102      	adds	r1, #2
    160e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	43d2      	mvns	r2, r2
    1616:	4011      	ands	r1, r2
    1618:	1c82      	adds	r2, r0, #2
    161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    161e:	2300      	movs	r3, #0
    1620:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1624:	79ba      	ldrb	r2, [r7, #6]
    1626:	0892      	lsrs	r2, r2, #2
    1628:	b2d2      	uxtb	r2, r2
    162a:	4610      	mov	r0, r2
    162c:	2200      	movs	r2, #0
    162e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1632:	79b9      	ldrb	r1, [r7, #6]
    1634:	0889      	lsrs	r1, r1, #2
    1636:	b2c9      	uxtb	r1, r1
    1638:	3102      	adds	r1, #2
    163a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    163e:	79fc      	ldrb	r4, [r7, #7]
    1640:	79ba      	ldrb	r2, [r7, #6]
    1642:	f002 0203 	and.w	r2, r2, #3
    1646:	0092      	lsls	r2, r2, #2
    1648:	fa04 f202 	lsl.w	r2, r4, r2
    164c:	4311      	orrs	r1, r2
    164e:	1c82      	adds	r2, r0, #2
    1650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1654:	3710      	adds	r7, #16
    1656:	46bd      	mov	sp, r7
    1658:	bc90      	pop	{r4, r7}
    165a:	4770      	bx	lr

0000165c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1664:	23dc      	movs	r3, #220	; 0xdc
    1666:	f2c4 2320 	movt	r3, #16928	; 0x4220
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
}
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	429a      	cmp	r2, r3
    168c:	d10a      	bne.n	16a4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1692:	2101      	movs	r1, #1
    1694:	f7ff fbe4 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    169c:	2100      	movs	r1, #0
    169e:	f7ff fbdf 	bl	e60 <RCC_APB2PeriphResetCmd>
    16a2:	e046      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16ae:	429a      	cmp	r2, r3
    16b0:	d10a      	bne.n	16c8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    16b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16b6:	2101      	movs	r1, #1
    16b8:	f7ff fbfa 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    16bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16c0:	2100      	movs	r1, #0
    16c2:	f7ff fbf5 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16c6:	e034      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    16ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16d2:	429a      	cmp	r2, r3
    16d4:	d10a      	bne.n	16ec <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16da:	2101      	movs	r1, #1
    16dc:	f7ff fbe8 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16e4:	2100      	movs	r1, #0
    16e6:	f7ff fbe3 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16ea:	e022      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == UART4)
    16ec:	687a      	ldr	r2, [r7, #4]
    16ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	429a      	cmp	r2, r3
    16f8:	d10a      	bne.n	1710 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16fe:	2101      	movs	r1, #1
    1700:	f7ff fbd6 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1708:	2100      	movs	r1, #0
    170a:	f7ff fbd1 	bl	eb0 <RCC_APB1PeriphResetCmd>
    170e:	e010      	b.n	1732 <USART_DeInit+0xba>
  }
  else
  {
    if (USARTx == UART5)
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1716:	f2c4 0300 	movt	r3, #16384	; 0x4000
    171a:	429a      	cmp	r2, r3
    171c:	d109      	bne.n	1732 <USART_DeInit+0xba>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    171e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1722:	2101      	movs	r1, #1
    1724:	f7ff fbc4 	bl	eb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1728:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    172c:	2100      	movs	r1, #0
    172e:	f7ff fbbf 	bl	eb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1732:	3708      	adds	r7, #8
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}

00001738 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1738:	b580      	push	{r7, lr}
    173a:	b08c      	sub	sp, #48	; 0x30
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1742:	2300      	movs	r3, #0
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
    1746:	2300      	movs	r3, #0
    1748:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    174a:	2300      	movs	r3, #0
    174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    174e:	2300      	movs	r3, #0
    1750:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1752:	2300      	movs	r3, #0
    1754:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8a1b      	ldrh	r3, [r3, #16]
    175e:	b29b      	uxth	r3, r3
    1760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1764:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1768:	4013      	ands	r3, r2
    176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    176c:	683b      	ldr	r3, [r7, #0]
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1772:	4313      	orrs	r3, r2
    1774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1778:	b29a      	uxth	r2, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	899b      	ldrh	r3, [r3, #12]
    1782:	b29b      	uxth	r3, r3
    1784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1788:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    178c:	4013      	ands	r3, r2
    178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	889a      	ldrh	r2, [r3, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	891b      	ldrh	r3, [r3, #8]
    1798:	4313      	orrs	r3, r2
    179a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17a0:	4313      	orrs	r3, r2
    17a2:	b29b      	uxth	r3, r3
    17a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a6:	4313      	orrs	r3, r2
    17a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17ac:	b29a      	uxth	r2, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	8a9b      	ldrh	r3, [r3, #20]
    17b6:	b29b      	uxth	r3, r3
    17b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    17ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17bc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17c0:	4013      	ands	r3, r2
    17c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	899b      	ldrh	r3, [r3, #12]
    17c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ca:	4313      	orrs	r3, r2
    17cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	b29a      	uxth	r2, r3
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17d6:	f107 0308 	add.w	r3, r7, #8
    17da:	4618      	mov	r0, r3
    17dc:	f7ff f9ea 	bl	bb4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17e0:	69fa      	ldr	r2, [r7, #28]
    17e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    17e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17ea:	429a      	cmp	r2, r3
    17ec:	d102      	bne.n	17f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	62bb      	str	r3, [r7, #40]	; 0x28
    17f2:	e001      	b.n	17f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17f4:	693b      	ldr	r3, [r7, #16]
    17f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b29b      	uxth	r3, r3
    1800:	b21b      	sxth	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	da0c      	bge.n	1820 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009a      	lsls	r2, r3, #2
    1810:	441a      	add	r2, r3
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	005b      	lsls	r3, r3, #1
    1818:	fbb2 f3f3 	udiv	r3, r2, r3
    181c:	627b      	str	r3, [r7, #36]	; 0x24
    181e:	e00b      	b.n	1838 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009a      	lsls	r2, r3, #2
    182a:	441a      	add	r2, r3
    182c:	683b      	ldr	r3, [r7, #0]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	009b      	lsls	r3, r3, #2
    1832:	fbb2 f3f3 	udiv	r3, r2, r3
    1836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    183a:	f248 531f 	movw	r3, #34079	; 0x851f
    183e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1842:	fba3 1302 	umull	r1, r3, r3, r2
    1846:	095b      	lsrs	r3, r3, #5
    1848:	011b      	lsls	r3, r3, #4
    184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    184e:	091b      	lsrs	r3, r3, #4
    1850:	2264      	movs	r2, #100	; 0x64
    1852:	fb02 f303 	mul.w	r3, r2, r3
    1856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1858:	1ad3      	subs	r3, r2, r3
    185a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	899b      	ldrh	r3, [r3, #12]
    1860:	b29b      	uxth	r3, r3
    1862:	b29b      	uxth	r3, r3
    1864:	b21b      	sxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	da10      	bge.n	188c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    186a:	6a3b      	ldr	r3, [r7, #32]
    186c:	00db      	lsls	r3, r3, #3
    186e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1872:	f248 531f 	movw	r3, #34079	; 0x851f
    1876:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    187a:	fba3 1302 	umull	r1, r3, r3, r2
    187e:	095b      	lsrs	r3, r3, #5
    1880:	f003 0307 	and.w	r3, r3, #7
    1884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1886:	4313      	orrs	r3, r2
    1888:	62fb      	str	r3, [r7, #44]	; 0x2c
    188a:	e00f      	b.n	18ac <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    188c:	6a3b      	ldr	r3, [r7, #32]
    188e:	011b      	lsls	r3, r3, #4
    1890:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1894:	f248 531f 	movw	r3, #34079	; 0x851f
    1898:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    189c:	fba3 1302 	umull	r1, r3, r3, r2
    18a0:	095b      	lsrs	r3, r3, #5
    18a2:	f003 030f 	and.w	r3, r3, #15
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4313      	orrs	r3, r2
    18aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18ae:	b29a      	uxth	r2, r3
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	811a      	strh	r2, [r3, #8]
}
    18b4:	3730      	adds	r7, #48	; 0x30
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop

000018bc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    18ca:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2200      	movs	r2, #0
    18d6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2200      	movs	r2, #0
    18dc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	220c      	movs	r2, #12
    18e2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	2200      	movs	r2, #0
    18e8:	819a      	strh	r2, [r3, #12]
}
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18f4:	b480      	push	{r7}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18fe:	2300      	movs	r3, #0
    1900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	8a1b      	ldrh	r3, [r3, #16]
    1906:	b29b      	uxth	r3, r3
    1908:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    190a:	68fa      	ldr	r2, [r7, #12]
    190c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1910:	4013      	ands	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	881a      	ldrh	r2, [r3, #0]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    191c:	4313      	orrs	r3, r2
    191e:	b29a      	uxth	r2, r3
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	889b      	ldrh	r3, [r3, #4]
    1924:	4313      	orrs	r3, r2
    1926:	b29a      	uxth	r2, r3
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	88db      	ldrh	r3, [r3, #6]
    192c:	4313      	orrs	r3, r2
    192e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1930:	68fa      	ldr	r2, [r7, #12]
    1932:	4313      	orrs	r3, r2
    1934:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	b29a      	uxth	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	821a      	strh	r2, [r3, #16]
}
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	2200      	movs	r2, #0
    1954:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2200      	movs	r2, #0
    195a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	2200      	movs	r2, #0
    1960:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2200      	movs	r2, #0
    1966:	80da      	strh	r2, [r3, #6]
}
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1980:	78fb      	ldrb	r3, [r7, #3]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	899b      	ldrh	r3, [r3, #12]
    198a:	b29b      	uxth	r3, r3
    198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1990:	b29a      	uxth	r2, r3
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	819a      	strh	r2, [r3, #12]
    1996:	e007      	b.n	19a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	899b      	ldrh	r3, [r3, #12]
    199c:	b29b      	uxth	r3, r3
    199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19a2:	b29a      	uxth	r2, r3
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	819a      	strh	r2, [r3, #12]
  }
}
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    19b4:	b480      	push	{r7}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	4613      	mov	r3, r2
    19be:	460a      	mov	r2, r1
    19c0:	807a      	strh	r2, [r7, #2]
    19c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    19c4:	2300      	movs	r3, #0
    19c6:	613b      	str	r3, [r7, #16]
    19c8:	2300      	movs	r3, #0
    19ca:	60fb      	str	r3, [r7, #12]
    19cc:	2300      	movs	r3, #0
    19ce:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19d0:	2300      	movs	r3, #0
    19d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	b2db      	uxtb	r3, r3
    19dc:	095b      	lsrs	r3, r3, #5
    19de:	b2db      	uxtb	r3, r3
    19e0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19e2:	887b      	ldrh	r3, [r7, #2]
    19e4:	f003 031f 	and.w	r3, r3, #31
    19e8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2201      	movs	r2, #1
    19ee:	fa02 f303 	lsl.w	r3, r2, r3
    19f2:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d103      	bne.n	1a02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	330c      	adds	r3, #12
    19fe:	617b      	str	r3, [r7, #20]
    1a00:	e009      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2b02      	cmp	r3, #2
    1a06:	d103      	bne.n	1a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	3310      	adds	r3, #16
    1a0c:	617b      	str	r3, [r7, #20]
    1a0e:	e002      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3314      	adds	r3, #20
    1a14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a16:	787b      	ldrb	r3, [r7, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d006      	beq.n	1a2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	697a      	ldr	r2, [r7, #20]
    1a20:	6811      	ldr	r1, [r2, #0]
    1a22:	68ba      	ldr	r2, [r7, #8]
    1a24:	430a      	orrs	r2, r1
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	e006      	b.n	1a38 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	697a      	ldr	r2, [r7, #20]
    1a2e:	6811      	ldr	r1, [r2, #0]
    1a30:	68ba      	ldr	r2, [r7, #8]
    1a32:	43d2      	mvns	r2, r2
    1a34:	400a      	ands	r2, r1
    1a36:	601a      	str	r2, [r3, #0]
  }
}
    1a38:	371c      	adds	r7, #28
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	4613      	mov	r3, r2
    1a4e:	460a      	mov	r2, r1
    1a50:	807a      	strh	r2, [r7, #2]
    1a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1a54:	787b      	ldrb	r3, [r7, #1]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d008      	beq.n	1a6c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	8a9b      	ldrh	r3, [r3, #20]
    1a5e:	b29a      	uxth	r2, r3
    1a60:	887b      	ldrh	r3, [r7, #2]
    1a62:	4313      	orrs	r3, r2
    1a64:	b29a      	uxth	r2, r3
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	829a      	strh	r2, [r3, #20]
    1a6a:	e009      	b.n	1a80 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a9b      	ldrh	r3, [r3, #20]
    1a70:	b29a      	uxth	r2, r3
    1a72:	887b      	ldrh	r3, [r7, #2]
    1a74:	43db      	mvns	r3, r3
    1a76:	b29b      	uxth	r3, r3
    1a78:	4013      	ands	r3, r2
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	829a      	strh	r2, [r3, #20]
  }
}
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	8a1b      	ldrh	r3, [r3, #16]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	f023 030f 	bic.w	r3, r3, #15
    1aa2:	b29a      	uxth	r2, r3
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	8a1b      	ldrh	r3, [r3, #16]
    1aac:	b29a      	uxth	r2, r3
    1aae:	78fb      	ldrb	r3, [r7, #3]
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	821a      	strh	r2, [r3, #16]
}
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	460b      	mov	r3, r1
    1ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	899b      	ldrh	r3, [r3, #12]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1ada:	b29a      	uxth	r2, r3
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	899b      	ldrh	r3, [r3, #12]
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	887b      	ldrh	r3, [r7, #2]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b29a      	uxth	r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	819a      	strh	r2, [r3, #12]
}
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b08:	78fb      	ldrb	r3, [r7, #3]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d008      	beq.n	1b20 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	899b      	ldrh	r3, [r3, #12]
    1b12:	b29b      	uxth	r3, r3
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	819a      	strh	r2, [r3, #12]
    1b1e:	e007      	b.n	1b30 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f023 0302 	bic.w	r3, r3, #2
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  }
}
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop

00001b3c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	460b      	mov	r3, r1
    1b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8a1b      	ldrh	r3, [r3, #16]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	f023 0320 	bic.w	r3, r3, #32
    1b52:	b29a      	uxth	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	8a1b      	ldrh	r3, [r3, #16]
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	887b      	ldrh	r3, [r7, #2]
    1b60:	4313      	orrs	r3, r2
    1b62:	b29a      	uxth	r2, r3
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	821a      	strh	r2, [r3, #16]
}
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	460b      	mov	r3, r1
    1b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b90:	b29a      	uxth	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	821a      	strh	r2, [r3, #16]
    1b96:	e007      	b.n	1ba8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  }
}
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1bc0:	887b      	ldrh	r3, [r7, #2]
    1bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bc6:	b29a      	uxth	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	809a      	strh	r2, [r3, #4]
}
    1bcc:	370c      	adds	r7, #12
    1bce:	46bd      	mov	sp, r7
    1bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop

00001bd8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	b29b      	uxth	r3, r3
    1be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bea:	b29b      	uxth	r3, r3
}
    1bec:	4618      	mov	r0, r3
    1bee:	370c      	adds	r7, #12
    1bf0:	46bd      	mov	sp, r7
    1bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf6:	4770      	bx	lr

00001bf8 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b083      	sub	sp, #12
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	899b      	ldrh	r3, [r3, #12]
    1c04:	b29b      	uxth	r3, r3
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	819a      	strh	r2, [r3, #12]
}
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	460b      	mov	r3, r1
    1c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8b1b      	ldrh	r3, [r3, #24]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	b29a      	uxth	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b1b      	ldrh	r3, [r3, #24]
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	b29b      	uxth	r3, r3
    1c44:	4313      	orrs	r3, r2
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	831a      	strh	r2, [r3, #24]
}
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1c58:	b480      	push	{r7}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	8b1b      	ldrh	r3, [r3, #24]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c6e:	b29a      	uxth	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	8b1b      	ldrh	r3, [r3, #24]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	78fb      	ldrb	r3, [r7, #3]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	4313      	orrs	r3, r2
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
}
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	460b      	mov	r3, r1
    1c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c9c:	78fb      	ldrb	r3, [r7, #3]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d008      	beq.n	1cb4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	8a9b      	ldrh	r3, [r3, #20]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	f043 0320 	orr.w	r3, r3, #32
    1cac:	b29a      	uxth	r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	829a      	strh	r2, [r3, #20]
    1cb2:	e007      	b.n	1cc4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8a9b      	ldrh	r3, [r3, #20]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 0320 	bic.w	r3, r3, #32
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	829a      	strh	r2, [r3, #20]
  }
}
    1cc4:	370c      	adds	r7, #12
    1cc6:	46bd      	mov	sp, r7
    1cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	460b      	mov	r3, r1
    1cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cdc:	78fb      	ldrb	r3, [r7, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d008      	beq.n	1cf4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	8a9b      	ldrh	r3, [r3, #20]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	f043 0310 	orr.w	r3, r3, #16
    1cec:	b29a      	uxth	r2, r3
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	829a      	strh	r2, [r3, #20]
    1cf2:	e007      	b.n	1d04 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	8a9b      	ldrh	r3, [r3, #20]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f023 0310 	bic.w	r3, r3, #16
    1cfe:	b29a      	uxth	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	829a      	strh	r2, [r3, #20]
  }
}
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d10:	b480      	push	{r7}
    1d12:	b083      	sub	sp, #12
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	460b      	mov	r3, r1
    1d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d1c:	78fb      	ldrb	r3, [r7, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d008      	beq.n	1d34 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	8a9b      	ldrh	r3, [r3, #20]
    1d26:	b29b      	uxth	r3, r3
    1d28:	f043 0308 	orr.w	r3, r3, #8
    1d2c:	b29a      	uxth	r2, r3
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	829a      	strh	r2, [r3, #20]
    1d32:	e007      	b.n	1d44 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	8a9b      	ldrh	r3, [r3, #20]
    1d38:	b29b      	uxth	r3, r3
    1d3a:	f023 0308 	bic.w	r3, r3, #8
    1d3e:	b29a      	uxth	r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	829a      	strh	r2, [r3, #20]
  }
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop

00001d50 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d50:	b480      	push	{r7}
    1d52:	b083      	sub	sp, #12
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	460b      	mov	r3, r1
    1d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d5c:	78fb      	ldrb	r3, [r7, #3]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00a      	beq.n	1d78 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	899b      	ldrh	r3, [r3, #12]
    1d66:	b29b      	uxth	r3, r3
    1d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d70:	b29a      	uxth	r2, r3
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	819a      	strh	r2, [r3, #12]
    1d76:	e007      	b.n	1d88 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d82:	b29a      	uxth	r2, r3
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	819a      	strh	r2, [r3, #12]
  }
}
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop

00001d94 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d94:	b480      	push	{r7}
    1d96:	b083      	sub	sp, #12
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	460b      	mov	r3, r1
    1d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1da0:	78fb      	ldrb	r3, [r7, #3]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d008      	beq.n	1db8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	8a9b      	ldrh	r3, [r3, #20]
    1daa:	b29b      	uxth	r3, r3
    1dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1db0:	b29a      	uxth	r2, r3
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	829a      	strh	r2, [r3, #20]
    1db6:	e007      	b.n	1dc8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	8a9b      	ldrh	r3, [r3, #20]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	829a      	strh	r2, [r3, #20]
  }
}
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1dd4:	b480      	push	{r7}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	8a9b      	ldrh	r3, [r3, #20]
    1de4:	b29b      	uxth	r3, r3
    1de6:	f023 0304 	bic.w	r3, r3, #4
    1dea:	b29a      	uxth	r2, r3
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	8a9b      	ldrh	r3, [r3, #20]
    1df4:	b29a      	uxth	r2, r3
    1df6:	887b      	ldrh	r3, [r7, #2]
    1df8:	4313      	orrs	r3, r2
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	829a      	strh	r2, [r3, #20]
}
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop

00001e0c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b083      	sub	sp, #12
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	460b      	mov	r3, r1
    1e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d008      	beq.n	1e30 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	8a9b      	ldrh	r3, [r3, #20]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 0302 	orr.w	r3, r3, #2
    1e28:	b29a      	uxth	r2, r3
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	829a      	strh	r2, [r3, #20]
    1e2e:	e007      	b.n	1e40 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  }
}
    1e40:	370c      	adds	r7, #12
    1e42:	46bd      	mov	sp, r7
    1e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e4c:	b480      	push	{r7}
    1e4e:	b085      	sub	sp, #20
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	460b      	mov	r3, r1
    1e56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e58:	2300      	movs	r3, #0
    1e5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	b29a      	uxth	r2, r3
    1e62:	887b      	ldrh	r3, [r7, #2]
    1e64:	4013      	ands	r3, r2
    1e66:	b29b      	uxth	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d002      	beq.n	1e72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e6c:	2301      	movs	r3, #1
    1e6e:	73fb      	strb	r3, [r7, #15]
    1e70:	e001      	b.n	1e76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e72:	2300      	movs	r3, #0
    1e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e76:	7bfb      	ldrb	r3, [r7, #15]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3714      	adds	r7, #20
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    1e90:	887b      	ldrh	r3, [r7, #2]
    1e92:	43db      	mvns	r3, r3
    1e94:	b29a      	uxth	r2, r3
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	801a      	strh	r2, [r3, #0]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr

00001ea4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ea4:	b480      	push	{r7}
    1ea6:	b087      	sub	sp, #28
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	460b      	mov	r3, r1
    1eae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
    1eb4:	2300      	movs	r3, #0
    1eb6:	617b      	str	r3, [r7, #20]
    1eb8:	2300      	movs	r3, #0
    1eba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1ebc:	2300      	movs	r3, #0
    1ebe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1ec0:	887b      	ldrh	r3, [r7, #2]
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	095b      	lsrs	r3, r3, #5
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1eca:	887b      	ldrh	r3, [r7, #2]
    1ecc:	f003 031f 	and.w	r3, r3, #31
    1ed0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2201      	movs	r2, #1
    1ed6:	fa02 f303 	lsl.w	r3, r2, r3
    1eda:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d106      	bne.n	1ef0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	899b      	ldrh	r3, [r3, #12]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	697a      	ldr	r2, [r7, #20]
    1eea:	4013      	ands	r3, r2
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00f      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d106      	bne.n	1f04 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	8a1b      	ldrh	r3, [r3, #16]
    1efa:	b29b      	uxth	r3, r3
    1efc:	697a      	ldr	r2, [r7, #20]
    1efe:	4013      	ands	r3, r2
    1f00:	617b      	str	r3, [r7, #20]
    1f02:	e005      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	8a9b      	ldrh	r3, [r3, #20]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	4013      	ands	r3, r2
    1f0e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b29b      	uxth	r3, r3
    1f16:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2201      	movs	r2, #1
    1f1c:	fa02 f303 	lsl.w	r3, r2, r3
    1f20:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	881b      	ldrh	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d005      	beq.n	1f40 <USART_GetITStatus+0x9c>
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f3a:	2301      	movs	r3, #1
    1f3c:	74fb      	strb	r3, [r7, #19]
    1f3e:	e001      	b.n	1f44 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f40:	2300      	movs	r3, #0
    1f42:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    1f44:	7cfb      	ldrb	r3, [r7, #19]
}
    1f46:	4618      	mov	r0, r3
    1f48:	371c      	adds	r7, #28
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f54:	b480      	push	{r7}
    1f56:	b085      	sub	sp, #20
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f60:	2300      	movs	r3, #0
    1f62:	81fb      	strh	r3, [r7, #14]
    1f64:	2300      	movs	r3, #0
    1f66:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    1f68:	887b      	ldrh	r3, [r7, #2]
    1f6a:	0a1b      	lsrs	r3, r3, #8
    1f6c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f6e:	89fb      	ldrh	r3, [r7, #14]
    1f70:	2201      	movs	r2, #1
    1f72:	fa02 f303 	lsl.w	r3, r2, r3
    1f76:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f78:	89bb      	ldrh	r3, [r7, #12]
    1f7a:	43db      	mvns	r3, r3
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	801a      	strh	r2, [r3, #0]
}
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f8c:	b480      	push	{r7}
    1f8e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	2200      	movs	r2, #0
    1f9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fa4:	2200      	movs	r2, #0
    1fa6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    1fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fb0:	2200      	movs	r2, #0
    1fb2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    1fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fbc:	2200      	movs	r2, #0
    1fbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fcc:	f2c0 020f 	movt	r2, #15
    1fd0:	615a      	str	r2, [r3, #20]
}
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1fdc:	b480      	push	{r7}
    1fde:	b085      	sub	sp, #20
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1fe4:	2300      	movs	r3, #0
    1fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff0:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d074      	beq.n	20e4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2006:	f2c4 0201 	movt	r2, #16385	; 0x4001
    200a:	6811      	ldr	r1, [r2, #0]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	43d2      	mvns	r2, r2
    2012:	400a      	ands	r2, r1
    2014:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2016:	f44f 6380 	mov.w	r3, #1024	; 0x400
    201a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	6812      	ldr	r2, [r2, #0]
    202c:	43d2      	mvns	r2, r2
    202e:	400a      	ands	r2, r1
    2030:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	4413      	add	r3, r2
    203a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	68fa      	ldr	r2, [r7, #12]
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	430a      	orrs	r2, r1
    2048:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	68d1      	ldr	r1, [r2, #12]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b10      	cmp	r3, #16
    2088:	d11a      	bne.n	20c0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    208e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2096:	f2c4 0201 	movt	r2, #16385	; 0x4001
    209a:	6891      	ldr	r1, [r2, #8]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	6812      	ldr	r2, [r2, #0]
    20a0:	430a      	orrs	r2, r1
    20a2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20b4:	68d1      	ldr	r1, [r2, #12]
    20b6:	687a      	ldr	r2, [r7, #4]
    20b8:	6812      	ldr	r2, [r2, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	60da      	str	r2, [r3, #12]
    20be:	e01e      	b.n	20fe <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    20c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20c8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	795b      	ldrb	r3, [r3, #5]
    20ce:	68fa      	ldr	r2, [r7, #12]
    20d0:	4413      	add	r3, r2
    20d2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68fa      	ldr	r2, [r7, #12]
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	430a      	orrs	r2, r1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	e00c      	b.n	20fe <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	791b      	ldrb	r3, [r3, #4]
    20e8:	68fa      	ldr	r2, [r7, #12]
    20ea:	4413      	add	r3, r2
    20ec:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    20ee:	68fb      	ldr	r3, [r7, #12]
    20f0:	68fa      	ldr	r2, [r7, #12]
    20f2:	6811      	ldr	r1, [r2, #0]
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	43d2      	mvns	r2, r2
    20fa:	400a      	ands	r2, r1
    20fc:	601a      	str	r2, [r3, #0]
  }
}
    20fe:	3714      	adds	r7, #20
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	220c      	movs	r2, #12
    2120:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	719a      	strb	r2, [r3, #6]
}
    2128:	370c      	adds	r7, #12
    212a:	46bd      	mov	sp, r7
    212c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2140:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2148:	f2c4 0201 	movt	r2, #16385	; 0x4001
    214c:	6911      	ldr	r1, [r2, #16]
    214e:	687a      	ldr	r2, [r7, #4]
    2150:	430a      	orrs	r2, r1
    2152:	611a      	str	r2, [r3, #16]
}
    2154:	370c      	adds	r7, #12
    2156:	46bd      	mov	sp, r7
    2158:	f85d 7b04 	ldr.w	r7, [sp], #4
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2160:	b480      	push	{r7}
    2162:	b085      	sub	sp, #20
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2168:	2300      	movs	r3, #0
    216a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2170:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2174:	695a      	ldr	r2, [r3, #20]
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4013      	ands	r3, r2
    217a:	2b00      	cmp	r3, #0
    217c:	d002      	beq.n	2184 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    217e:	2301      	movs	r3, #1
    2180:	73fb      	strb	r3, [r7, #15]
    2182:	e001      	b.n	2188 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    2184:	2300      	movs	r3, #0
    2186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2188:	7bfb      	ldrb	r3, [r7, #15]
}
    218a:	4618      	mov	r0, r3
    218c:	3714      	adds	r7, #20
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop

00002198 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2198:	b480      	push	{r7}
    219a:	b083      	sub	sp, #12
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    21a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21a8:	687a      	ldr	r2, [r7, #4]
    21aa:	615a      	str	r2, [r3, #20]
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop

000021b8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    21b8:	b480      	push	{r7}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    21c0:	2300      	movs	r3, #0
    21c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    21c4:	2300      	movs	r3, #0
    21c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    21c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	4013      	ands	r3, r2
    21d6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    21d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21e0:	695a      	ldr	r2, [r3, #20]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	4013      	ands	r3, r2
    21e6:	2b00      	cmp	r3, #0
    21e8:	d005      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    21f0:	2301      	movs	r3, #1
    21f2:	73fb      	strb	r3, [r7, #15]
    21f4:	e001      	b.n	21fa <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    21f6:	2300      	movs	r3, #0
    21f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21fa:	7bfb      	ldrb	r3, [r7, #15]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3714      	adds	r7, #20
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr

00002208 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2214:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	615a      	str	r2, [r3, #20]
}
    221c:	370c      	adds	r7, #12
    221e:	46bd      	mov	sp, r7
    2220:	f85d 7b04 	ldr.w	r7, [sp], #4
    2224:	4770      	bx	lr
    2226:	bf00      	nop

00002228 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2230:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2234:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    223e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2242:	60da      	str	r2, [r3, #12]
}
    2244:	370c      	adds	r7, #12
    2246:	46bd      	mov	sp, r7
    2248:	f85d 7b04 	ldr.w	r7, [sp], #4
    224c:	4770      	bx	lr
    224e:	bf00      	nop

00002250 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2250:	b480      	push	{r7}
    2252:	b087      	sub	sp, #28
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2258:	2300      	movs	r3, #0
    225a:	617b      	str	r3, [r7, #20]
    225c:	2300      	movs	r3, #0
    225e:	613b      	str	r3, [r7, #16]
    2260:	230f      	movs	r3, #15
    2262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	78db      	ldrb	r3, [r3, #3]
    2268:	2b00      	cmp	r3, #0
    226a:	d042      	beq.n	22f2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    226c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2270:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2274:	68db      	ldr	r3, [r3, #12]
    2276:	43db      	mvns	r3, r3
    2278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    227c:	0a1b      	lsrs	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	f1c3 0304 	rsb	r3, r3, #4
    2286:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	68fa      	ldr	r2, [r7, #12]
    228c:	fa22 f303 	lsr.w	r3, r2, r3
    2290:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	785b      	ldrb	r3, [r3, #1]
    2296:	461a      	mov	r2, r3
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	fa02 f303 	lsl.w	r3, r2, r3
    229e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	461a      	mov	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	4013      	ands	r3, r2
    22aa:	697a      	ldr	r2, [r7, #20]
    22ac:	4313      	orrs	r3, r2
    22ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	011b      	lsls	r3, r3, #4
    22b4:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    22b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7812      	ldrb	r2, [r2, #0]
    22c2:	4611      	mov	r1, r2
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	b2d2      	uxtb	r2, r2
    22c8:	440b      	add	r3, r1
    22ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	7812      	ldrb	r2, [r2, #0]
    22da:	0952      	lsrs	r2, r2, #5
    22dc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	7809      	ldrb	r1, [r1, #0]
    22e2:	f001 011f 	and.w	r1, r1, #31
    22e6:	2001      	movs	r0, #1
    22e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    22f0:	e011      	b.n	2316 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	7812      	ldrb	r2, [r2, #0]
    22fe:	0952      	lsrs	r2, r2, #5
    2300:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2302:	6879      	ldr	r1, [r7, #4]
    2304:	7809      	ldrb	r1, [r1, #0]
    2306:	f001 011f 	and.w	r1, r1, #31
    230a:	2001      	movs	r0, #1
    230c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2310:	3220      	adds	r2, #32
    2312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2316:	371c      	adds	r7, #28
    2318:	46bd      	mov	sp, r7
    231a:	f85d 7b04 	ldr.w	r7, [sp], #4
    231e:	4770      	bx	lr

00002320 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2320:	b480      	push	{r7}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    232a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2332:	683a      	ldr	r2, [r7, #0]
    2334:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2338:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233c:	6879      	ldr	r1, [r7, #4]
    233e:	430a      	orrs	r2, r1
    2340:	609a      	str	r2, [r3, #8]
}
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr

0000234c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	71fa      	strb	r2, [r7, #7]
    2358:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    235a:	79bb      	ldrb	r3, [r7, #6]
    235c:	2b00      	cmp	r3, #0
    235e:	d00c      	beq.n	237a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2360:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2364:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2368:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    236c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2370:	6911      	ldr	r1, [r2, #16]
    2372:	79fa      	ldrb	r2, [r7, #7]
    2374:	430a      	orrs	r2, r1
    2376:	611a      	str	r2, [r3, #16]
    2378:	e00c      	b.n	2394 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2386:	f2ce 0200 	movt	r2, #57344	; 0xe000
    238a:	6911      	ldr	r1, [r2, #16]
    238c:	79fa      	ldrb	r2, [r7, #7]
    238e:	43d2      	mvns	r2, r2
    2390:	400a      	ands	r2, r1
    2392:	611a      	str	r2, [r3, #16]
  }
}
    2394:	370c      	adds	r7, #12
    2396:	46bd      	mov	sp, r7
    2398:	f85d 7b04 	ldr.w	r7, [sp], #4
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2b04      	cmp	r3, #4
    23ac:	d10c      	bne.n	23c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23ae:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b6:	f24e 0210 	movw	r2, #57360	; 0xe010
    23ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23be:	6812      	ldr	r2, [r2, #0]
    23c0:	f042 0204 	orr.w	r2, r2, #4
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e00b      	b.n	23e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23c8:	f24e 0310 	movw	r3, #57360	; 0xe010
    23cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d0:	f24e 0210 	movw	r2, #57360	; 0xe010
    23d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23d8:	6812      	ldr	r2, [r2, #0]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	601a      	str	r2, [r3, #0]
  }
}
    23e0:	370c      	adds	r7, #12
    23e2:	46bd      	mov	sp, r7
    23e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af00      	add	r7, sp, #0
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	60b9      	str	r1, [r7, #8]
    23f6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23f8:	2038      	movs	r0, #56	; 0x38
    23fa:	f003 fc89 	bl	5d10 <pvPortMalloc>
    23fe:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d058      	beq.n	24b8 <xCoRoutineCreate+0xcc>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2406:	f240 43f4 	movw	r3, #1268	; 0x4f4
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	681b      	ldr	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d107      	bne.n	2424 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2414:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241c:	693a      	ldr	r2, [r7, #16]
    241e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2420:	f000 fa08 	bl	2834 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2b01      	cmp	r3, #1
    2428:	d901      	bls.n	242e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    242a:	2301      	movs	r3, #1
    242c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2200      	movs	r2, #0
    2432:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2434:	693b      	ldr	r3, [r7, #16]
    2436:	68ba      	ldr	r2, [r7, #8]
    2438:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	687a      	ldr	r2, [r7, #4]
    243e:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	68fa      	ldr	r2, [r7, #12]
    2444:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	3304      	adds	r3, #4
    244a:	4618      	mov	r0, r3
    244c:	f001 fdca 	bl	3fe4 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2450:	693b      	ldr	r3, [r7, #16]
    2452:	3318      	adds	r3, #24
    2454:	4618      	mov	r0, r3
    2456:	f001 fdc5 	bl	3fe4 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    245a:	693b      	ldr	r3, [r7, #16]
    245c:	693a      	ldr	r2, [r7, #16]
    245e:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2460:	693b      	ldr	r3, [r7, #16]
    2462:	693a      	ldr	r2, [r7, #16]
    2464:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	f1c3 0214 	rsb	r2, r3, #20
    246c:	693b      	ldr	r3, [r7, #16]
    246e:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2470:	693b      	ldr	r3, [r7, #16]
    2472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2474:	f240 43f8 	movw	r3, #1272	; 0x4f8
    2478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    247c:	681b      	ldr	r3, [r3, #0]
    247e:	429a      	cmp	r2, r3
    2480:	d906      	bls.n	2490 <xCoRoutineCreate+0xa4>
    2482:	693b      	ldr	r3, [r7, #16]
    2484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2486:	f240 43f8 	movw	r3, #1272	; 0x4f8
    248a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    248e:	601a      	str	r2, [r3, #0]
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2494:	4613      	mov	r3, r2
    2496:	009b      	lsls	r3, r3, #2
    2498:	4413      	add	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	f240 4288 	movw	r2, #1160	; 0x488
    24a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    24a4:	441a      	add	r2, r3
    24a6:	693b      	ldr	r3, [r7, #16]
    24a8:	3304      	adds	r3, #4
    24aa:	4610      	mov	r0, r2
    24ac:	4619      	mov	r1, r3
    24ae:	f001 fda5 	bl	3ffc <vListInsertEnd>

		xReturn = pdPASS;
    24b2:	2301      	movs	r3, #1
    24b4:	617b      	str	r3, [r7, #20]
    24b6:	e002      	b.n	24be <xCoRoutineCreate+0xd2>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b8:	f04f 33ff 	mov.w	r3, #4294967295
    24bc:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    24be:	697b      	ldr	r3, [r7, #20]
}
    24c0:	4618      	mov	r0, r3
    24c2:	3718      	adds	r7, #24
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}

000024c8 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    24d2:	f240 43fc 	movw	r3, #1276	; 0x4fc
    24d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24da:	681a      	ldr	r2, [r3, #0]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	4413      	add	r3, r2
    24e0:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    24e2:	f240 43f4 	movw	r3, #1268	; 0x4f4
    24e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24ea:	681b      	ldr	r3, [r3, #0]
    24ec:	3304      	adds	r3, #4
    24ee:	4618      	mov	r0, r3
    24f0:	f001 fde4 	bl	40bc <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    24f4:	f240 43f4 	movw	r3, #1268	; 0x4f4
    24f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24fc:	681b      	ldr	r3, [r3, #0]
    24fe:	68fa      	ldr	r2, [r7, #12]
    2500:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2502:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	68fa      	ldr	r2, [r7, #12]
    250e:	429a      	cmp	r2, r3
    2510:	d20f      	bcs.n	2532 <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2512:	f240 43dc 	movw	r3, #1244	; 0x4dc
    2516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    251a:	681a      	ldr	r2, [r3, #0]
    251c:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	3304      	adds	r3, #4
    2528:	4610      	mov	r0, r2
    252a:	4619      	mov	r1, r3
    252c:	f001 fd8e 	bl	404c <vListInsert>
    2530:	e00e      	b.n	2550 <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2532:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253a:	681a      	ldr	r2, [r3, #0]
    253c:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	3304      	adds	r3, #4
    2548:	4610      	mov	r0, r2
    254a:	4619      	mov	r1, r3
    254c:	f001 fd7e 	bl	404c <vListInsert>
	}

	if( pxEventList )
    2550:	683b      	ldr	r3, [r7, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d009      	beq.n	256a <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2556:	f240 43f4 	movw	r3, #1268	; 0x4f4
    255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	3318      	adds	r3, #24
    2562:	6838      	ldr	r0, [r7, #0]
    2564:	4619      	mov	r1, r3
    2566:	f001 fd71 	bl	404c <vListInsert>
	}
}
    256a:	3710      	adds	r7, #16
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}

00002570 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2576:	e039      	b.n	25ec <prvCheckPendingReadyList+0x7c>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2578:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    257c:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2580:	f240 43e0 	movw	r3, #1248	; 0x4e0
    2584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2588:	68db      	ldr	r3, [r3, #12]
    258a:	68db      	ldr	r3, [r3, #12]
    258c:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	3318      	adds	r3, #24
    2592:	4618      	mov	r0, r3
    2594:	f001 fd92 	bl	40bc <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2598:	f04f 0000 	mov.w	r0, #0
    259c:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	3304      	adds	r3, #4
    25a4:	4618      	mov	r0, r3
    25a6:	f001 fd89 	bl	40bc <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ae:	f240 43f8 	movw	r3, #1272	; 0x4f8
    25b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	429a      	cmp	r2, r3
    25ba:	d906      	bls.n	25ca <prvCheckPendingReadyList+0x5a>
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25c0:	f240 43f8 	movw	r3, #1272	; 0x4f8
    25c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25c8:	601a      	str	r2, [r3, #0]
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ce:	4613      	mov	r3, r2
    25d0:	009b      	lsls	r3, r3, #2
    25d2:	4413      	add	r3, r2
    25d4:	009b      	lsls	r3, r3, #2
    25d6:	f240 4288 	movw	r2, #1160	; 0x488
    25da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    25de:	441a      	add	r2, r3
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	3304      	adds	r3, #4
    25e4:	4610      	mov	r0, r2
    25e6:	4619      	mov	r1, r3
    25e8:	f001 fd08 	bl	3ffc <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25ec:	f240 43e0 	movw	r3, #1248	; 0x4e0
    25f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1be      	bne.n	2578 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    25fa:	3708      	adds	r7, #8
    25fc:	46bd      	mov	sp, r7
    25fe:	bd80      	pop	{r7, pc}

00002600 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2600:	b580      	push	{r7, lr}
    2602:	b082      	sub	sp, #8
    2604:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2606:	f002 fdd7 	bl	51b8 <xTaskGetTickCount>
    260a:	4602      	mov	r2, r0
    260c:	f240 5300 	movw	r3, #1280	; 0x500
    2610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	1ad2      	subs	r2, r2, r3
    2618:	f240 5304 	movw	r3, #1284	; 0x504
    261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2620:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2622:	e085      	b.n	2730 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
    2624:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	1c5a      	adds	r2, r3, #1
    2630:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2638:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    263a:	f240 5304 	movw	r3, #1284	; 0x504
    263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	1e5a      	subs	r2, r3, #1
    2646:	f240 5304 	movw	r3, #1284	; 0x504
    264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    264e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2650:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	2b00      	cmp	r3, #0
    265c:	d116      	bne.n	268c <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    265e:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    266a:	f240 43dc 	movw	r3, #1244	; 0x4dc
    266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2672:	681a      	ldr	r2, [r3, #0]
    2674:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    267e:	f240 43dc 	movw	r3, #1244	; 0x4dc
    2682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2686:	687a      	ldr	r2, [r7, #4]
    2688:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    268a:	e049      	b.n	2720 <prvCheckDelayedList+0x120>
    268c:	e048      	b.n	2720 <prvCheckDelayedList+0x120>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    268e:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	68db      	ldr	r3, [r3, #12]
    269a:	68db      	ldr	r3, [r3, #12]
    269c:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    269e:	683b      	ldr	r3, [r7, #0]
    26a0:	685a      	ldr	r2, [r3, #4]
    26a2:	f240 43fc 	movw	r3, #1276	; 0x4fc
    26a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	429a      	cmp	r2, r3
    26ae:	d900      	bls.n	26b2 <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    26b0:	e03e      	b.n	2730 <prvCheckDelayedList+0x130>
			}																						

			portDISABLE_INTERRUPTS();
    26b2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    26b6:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    26ba:	683b      	ldr	r3, [r7, #0]
    26bc:	3304      	adds	r3, #4
    26be:	4618      	mov	r0, r3
    26c0:	f001 fcfc 	bl	40bc <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26c8:	2b00      	cmp	r3, #0
    26ca:	d004      	beq.n	26d6 <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    26cc:	683b      	ldr	r3, [r7, #0]
    26ce:	3318      	adds	r3, #24
    26d0:	4618      	mov	r0, r3
    26d2:	f001 fcf3 	bl	40bc <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    26d6:	f04f 0000 	mov.w	r0, #0
    26da:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    26de:	683b      	ldr	r3, [r7, #0]
    26e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26e2:	f240 43f8 	movw	r3, #1272	; 0x4f8
    26e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	429a      	cmp	r2, r3
    26ee:	d906      	bls.n	26fe <prvCheckDelayedList+0xfe>
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26f4:	f240 43f8 	movw	r3, #1272	; 0x4f8
    26f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26fc:	601a      	str	r2, [r3, #0]
    26fe:	683b      	ldr	r3, [r7, #0]
    2700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2702:	4613      	mov	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	4413      	add	r3, r2
    2708:	009b      	lsls	r3, r3, #2
    270a:	f240 4288 	movw	r2, #1160	; 0x488
    270e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2712:	441a      	add	r2, r3
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	3304      	adds	r3, #4
    2718:	4610      	mov	r0, r2
    271a:	4619      	mov	r1, r3
    271c:	f001 fc6e 	bl	3ffc <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2720:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d1ae      	bne.n	268e <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2730:	f240 5304 	movw	r3, #1284	; 0x504
    2734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2738:	681b      	ldr	r3, [r3, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	f47f af72 	bne.w	2624 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2740:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	681a      	ldr	r2, [r3, #0]
    274a:	f240 5300 	movw	r3, #1280	; 0x500
    274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2752:	601a      	str	r2, [r3, #0]
}
    2754:	3708      	adds	r7, #8
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}
    275a:	bf00      	nop

0000275c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    275c:	b580      	push	{r7, lr}
    275e:	b082      	sub	sp, #8
    2760:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2762:	f7ff ff05 	bl	2570 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2766:	f7ff ff4b 	bl	2600 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    276a:	e012      	b.n	2792 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    276c:	f240 43f8 	movw	r3, #1272	; 0x4f8
    2770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	2b00      	cmp	r3, #0
    2778:	d100      	bne.n	277c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    277a:	e057      	b.n	282c <vCoRoutineSchedule+0xd0>
		}
		--uxTopCoRoutineReadyPriority;
    277c:	f240 43f8 	movw	r3, #1272	; 0x4f8
    2780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	1e5a      	subs	r2, r3, #1
    2788:	f240 43f8 	movw	r3, #1272	; 0x4f8
    278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2790:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2792:	f240 43f8 	movw	r3, #1272	; 0x4f8
    2796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    279a:	6819      	ldr	r1, [r3, #0]
    279c:	f240 4288 	movw	r2, #1160	; 0x488
    27a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27a4:	460b      	mov	r3, r1
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	440b      	add	r3, r1
    27aa:	009b      	lsls	r3, r3, #2
    27ac:	4413      	add	r3, r2
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d0db      	beq.n	276c <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    27b4:	f240 43f8 	movw	r3, #1272	; 0x4f8
    27b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27bc:	681a      	ldr	r2, [r3, #0]
    27be:	4613      	mov	r3, r2
    27c0:	009b      	lsls	r3, r3, #2
    27c2:	4413      	add	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	f240 4288 	movw	r2, #1160	; 0x488
    27ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27ce:	4413      	add	r3, r2
    27d0:	607b      	str	r3, [r7, #4]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	685b      	ldr	r3, [r3, #4]
    27d6:	685a      	ldr	r2, [r3, #4]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	605a      	str	r2, [r3, #4]
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	685a      	ldr	r2, [r3, #4]
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	3308      	adds	r3, #8
    27e4:	429a      	cmp	r2, r3
    27e6:	d104      	bne.n	27f2 <vCoRoutineSchedule+0x96>
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	685b      	ldr	r3, [r3, #4]
    27ec:	685a      	ldr	r2, [r3, #4]
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	605a      	str	r2, [r3, #4]
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	685b      	ldr	r3, [r3, #4]
    27f6:	68da      	ldr	r2, [r3, #12]
    27f8:	f240 43f4 	movw	r3, #1268	; 0x4f4
    27fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2800:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2802:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	681a      	ldr	r2, [r3, #0]
    280e:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2816:	6819      	ldr	r1, [r3, #0]
    2818:	f240 43f4 	movw	r3, #1268	; 0x4f4
    281c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2820:	681b      	ldr	r3, [r3, #0]
    2822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2824:	4608      	mov	r0, r1
    2826:	4619      	mov	r1, r3
    2828:	4790      	blx	r2

	return;
    282a:	bf00      	nop
}
    282c:	3708      	adds	r7, #8
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	bf00      	nop

00002834 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    283a:	2300      	movs	r3, #0
    283c:	607b      	str	r3, [r7, #4]
    283e:	e00f      	b.n	2860 <prvInitialiseCoRoutineLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2840:	687a      	ldr	r2, [r7, #4]
    2842:	4613      	mov	r3, r2
    2844:	009b      	lsls	r3, r3, #2
    2846:	4413      	add	r3, r2
    2848:	009b      	lsls	r3, r3, #2
    284a:	f240 4288 	movw	r2, #1160	; 0x488
    284e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2852:	4413      	add	r3, r2
    2854:	4618      	mov	r0, r3
    2856:	f001 fba5 	bl	3fa4 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	3301      	adds	r3, #1
    285e:	607b      	str	r3, [r7, #4]
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	2b01      	cmp	r3, #1
    2864:	d9ec      	bls.n	2840 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2866:	f240 40b0 	movw	r0, #1200	; 0x4b0
    286a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    286e:	f001 fb99 	bl	3fa4 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2872:	f240 40c4 	movw	r0, #1220	; 0x4c4
    2876:	f2c2 0000 	movt	r0, #8192	; 0x2000
    287a:	f001 fb93 	bl	3fa4 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    287e:	f240 40e0 	movw	r0, #1248	; 0x4e0
    2882:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2886:	f001 fb8d 	bl	3fa4 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    288a:	f240 43d8 	movw	r3, #1240	; 0x4d8
    288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2892:	f240 42b0 	movw	r2, #1200	; 0x4b0
    2896:	f2c2 0200 	movt	r2, #8192	; 0x2000
    289a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    289c:	f240 43dc 	movw	r3, #1244	; 0x4dc
    28a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a4:	f240 42c4 	movw	r2, #1220	; 0x4c4
    28a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28ac:	601a      	str	r2, [r3, #0]
}
    28ae:	3708      	adds	r7, #8
    28b0:	46bd      	mov	sp, r7
    28b2:	bd80      	pop	{r7, pc}

000028b4 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	68db      	ldr	r3, [r3, #12]
    28c0:	68db      	ldr	r3, [r3, #12]
    28c2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    28c4:	68bb      	ldr	r3, [r7, #8]
    28c6:	3318      	adds	r3, #24
    28c8:	4618      	mov	r0, r3
    28ca:	f001 fbf7 	bl	40bc <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	3318      	adds	r3, #24
    28d2:	f240 40e0 	movw	r0, #1248	; 0x4e0
    28d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28da:	4619      	mov	r1, r3
    28dc:	f001 fb8e 	bl	3ffc <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    28e0:	68bb      	ldr	r3, [r7, #8]
    28e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28e4:	f240 43f4 	movw	r3, #1268	; 0x4f4
    28e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28f0:	429a      	cmp	r2, r3
    28f2:	d302      	bcc.n	28fa <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    28f4:	2301      	movs	r3, #1
    28f6:	60fb      	str	r3, [r7, #12]
    28f8:	e001      	b.n	28fe <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    28fa:	2300      	movs	r3, #0
    28fc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    28fe:	68fb      	ldr	r3, [r7, #12]
}
    2900:	4618      	mov	r0, r3
    2902:	3710      	adds	r7, #16
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}

00002908 <vInitialiseEventLists>:
static void vEventSetxTimeStamp( xEventHandle pxNewEvent );

static xList * pxGetReadyList( void );

void vInitialiseEventLists( portBASE_TYPE NumOfEvents)
{
    2908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    290c:	b088      	sub	sp, #32
    290e:	af00      	add	r7, sp, #0
    2910:	6078      	str	r0, [r7, #4]
    2912:	4669      	mov	r1, sp
    2914:	4688      	mov	r8, r1
    volatile portBASE_TYPE xCPU, i;
    eveECB * pxIdleEvents[NumOfEvents];
    2916:	687e      	ldr	r6, [r7, #4]
    2918:	1e71      	subs	r1, r6, #1
    291a:	61f9      	str	r1, [r7, #28]
    291c:	4631      	mov	r1, r6
    291e:	4608      	mov	r0, r1
    2920:	f04f 0100 	mov.w	r1, #0
    2924:	014d      	lsls	r5, r1, #5
    2926:	ea45 65d0 	orr.w	r5, r5, r0, lsr #27
    292a:	0144      	lsls	r4, r0, #5
    292c:	4631      	mov	r1, r6
    292e:	4608      	mov	r0, r1
    2930:	f04f 0100 	mov.w	r1, #0
    2934:	014b      	lsls	r3, r1, #5
    2936:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    293a:	0142      	lsls	r2, r0, #5
    293c:	4633      	mov	r3, r6
    293e:	009b      	lsls	r3, r3, #2
    2940:	3303      	adds	r3, #3
    2942:	3307      	adds	r3, #7
    2944:	08db      	lsrs	r3, r3, #3
    2946:	00db      	lsls	r3, r3, #3
    2948:	ebad 0d03 	sub.w	sp, sp, r3
    294c:	466b      	mov	r3, sp
    294e:	3303      	adds	r3, #3
    2950:	089b      	lsrs	r3, r3, #2
    2952:	009b      	lsls	r3, r3, #2
    2954:	61bb      	str	r3, [r7, #24]
    eveECB * pxEndFlagEvent;

    vListInitialise( ( xList * ) &xEventIdleList);
    2956:	f240 5008 	movw	r0, #1288	; 0x508
    295a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    295e:	f001 fb21 	bl	3fa4 <vListInitialise>
    vListInitialise( ( xList * ) &xEventPool );
    2962:	f240 501c 	movw	r0, #1308	; 0x51c
    2966:	f2c2 0000 	movt	r0, #8192	; 0x2000
    296a:	f001 fb1b 	bl	3fa4 <vListInitialise>
    vListInitialise( ( xList * ) &xEventList );
    296e:	f240 5030 	movw	r0, #1328	; 0x530
    2972:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2976:	f001 fb15 	bl	3fa4 <vListInitialise>
    vListInitialise( ( xList * ) &xEventExecutableList );
    297a:	f240 5044 	movw	r0, #1348	; 0x544
    297e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2982:	f001 fb0f 	bl	3fa4 <vListInitialise>

    for( i = 0; i < NumOfEvents; ++i )
    2986:	2300      	movs	r3, #0
    2988:	60fb      	str	r3, [r7, #12]
    298a:	e023      	b.n	29d4 <vInitialiseEventLists+0xcc>
    {
        pxIdleEvents[i] = (eveECB *) pvPortMalloc(sizeof(eveECB)); 
    298c:	68fc      	ldr	r4, [r7, #12]
    298e:	203c      	movs	r0, #60	; 0x3c
    2990:	f003 f9be 	bl	5d10 <pvPortMalloc>
    2994:	4602      	mov	r2, r0
    2996:	69bb      	ldr	r3, [r7, #24]
    2998:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        vListIntialiseEventItem( pxIdleEvents[i], (xListItem *) & pxIdleEvents[i]->xEventListItem );
    299c:	68fa      	ldr	r2, [r7, #12]
    299e:	69bb      	ldr	r3, [r7, #24]
    29a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    29a4:	68f9      	ldr	r1, [r7, #12]
    29a6:	69bb      	ldr	r3, [r7, #24]
    29a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    29ac:	3318      	adds	r3, #24
    29ae:	4610      	mov	r0, r2
    29b0:	4619      	mov	r1, r3
    29b2:	f000 fa01 	bl	2db8 <vListIntialiseEventItem>
        vListInsertEnd(&xEventIdleList, &pxIdleEvents[i]->xEventListItem); 
    29b6:	68fa      	ldr	r2, [r7, #12]
    29b8:	69bb      	ldr	r3, [r7, #24]
    29ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    29be:	3318      	adds	r3, #24
    29c0:	f240 5008 	movw	r0, #1288	; 0x508
    29c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    29c8:	4619      	mov	r1, r3
    29ca:	f001 fb17 	bl	3ffc <vListInsertEnd>
    vListInitialise( ( xList * ) &xEventIdleList);
    vListInitialise( ( xList * ) &xEventPool );
    vListInitialise( ( xList * ) &xEventList );
    vListInitialise( ( xList * ) &xEventExecutableList );

    for( i = 0; i < NumOfEvents; ++i )
    29ce:	68fb      	ldr	r3, [r7, #12]
    29d0:	3301      	adds	r3, #1
    29d2:	60fb      	str	r3, [r7, #12]
    29d4:	68fa      	ldr	r2, [r7, #12]
    29d6:	687b      	ldr	r3, [r7, #4]
    29d8:	429a      	cmp	r2, r3
    29da:	dbd7      	blt.n	298c <vInitialiseEventLists+0x84>
        vListIntialiseEventItem( pxIdleEvents[i], (xListItem *) & pxIdleEvents[i]->xEventListItem );
        vListInsertEnd(&xEventIdleList, &pxIdleEvents[i]->xEventListItem); 
    }

    // init the xEventReadyList[configCPU_NUMBER].
    for ( xCPU = 0; xCPU < configCPU_NUMBER; xCPU ++ )
    29dc:	2300      	movs	r3, #0
    29de:	613b      	str	r3, [r7, #16]
    29e0:	e00f      	b.n	2a02 <vInitialiseEventLists+0xfa>
    {
        vListInitialise( (xList * ) & xEventReadyList[xCPU] );
    29e2:	693a      	ldr	r2, [r7, #16]
    29e4:	4613      	mov	r3, r2
    29e6:	009b      	lsls	r3, r3, #2
    29e8:	4413      	add	r3, r2
    29ea:	009b      	lsls	r3, r3, #2
    29ec:	f240 5258 	movw	r2, #1368	; 0x558
    29f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    29f4:	4413      	add	r3, r2
    29f6:	4618      	mov	r0, r3
    29f8:	f001 fad4 	bl	3fa4 <vListInitialise>
        vListIntialiseEventItem( pxIdleEvents[i], (xListItem *) & pxIdleEvents[i]->xEventListItem );
        vListInsertEnd(&xEventIdleList, &pxIdleEvents[i]->xEventListItem); 
    }

    // init the xEventReadyList[configCPU_NUMBER].
    for ( xCPU = 0; xCPU < configCPU_NUMBER; xCPU ++ )
    29fc:	693b      	ldr	r3, [r7, #16]
    29fe:	3301      	adds	r3, #1
    2a00:	613b      	str	r3, [r7, #16]
    2a02:	693b      	ldr	r3, [r7, #16]
    2a04:	2b00      	cmp	r3, #0
    2a06:	ddec      	ble.n	29e2 <vInitialiseEventLists+0xda>
    {
        vListInitialise( (xList * ) & xEventReadyList[xCPU] );
    }

    // Creating an End FLag Event and insert into the end of xEventList, which needs sorted events
    pxEndFlagEvent = (eveECB *) pvPortMalloc( sizeof( eveECB ) );
    2a08:	203c      	movs	r0, #60	; 0x3c
    2a0a:	f003 f981 	bl	5d10 <pvPortMalloc>
    2a0e:	6178      	str	r0, [r7, #20]
    if( pxEndFlagEvent != NULL )
    2a10:	697b      	ldr	r3, [r7, #20]
    2a12:	2b00      	cmp	r3, #0
    2a14:	d01e      	beq.n	2a54 <vInitialiseEventLists+0x14c>
    {
       // pxEndFlagEvent->pxSource = pxEndFlagEvent->pxDestination = NULL;
        // there may be some problem here because of this assignment way
        pxEndFlagEvent->xTimeStamp.xDeadline= portMAX_DELAY;
    2a16:	697b      	ldr	r3, [r7, #20]
    2a18:	f04f 32ff 	mov.w	r2, #4294967295
    2a1c:	609a      	str	r2, [r3, #8]
        pxEndFlagEvent->xTimeStamp.xTime = portMAX_DELAY;
    2a1e:	697b      	ldr	r3, [r7, #20]
    2a20:	f04f 32ff 	mov.w	r2, #4294967295
    2a24:	60da      	str	r2, [r3, #12]
        pxEndFlagEvent->xTimeStamp.xMicroStep = portMAX_DELAY;
    2a26:	697b      	ldr	r3, [r7, #20]
    2a28:	f04f 32ff 	mov.w	r2, #4294967295
    2a2c:	611a      	str	r2, [r3, #16]
        pxEndFlagEvent->xTimeStamp.xLevel = portMAX_DELAY;
    2a2e:	697b      	ldr	r3, [r7, #20]
    2a30:	f04f 32ff 	mov.w	r2, #4294967295
    2a34:	615a      	str	r2, [r3, #20]
        vListIntialiseEventItem( pxEndFlagEvent, (xListItem *) & pxEndFlagEvent->xEventListItem );
    2a36:	697b      	ldr	r3, [r7, #20]
    2a38:	3318      	adds	r3, #24
    2a3a:	6978      	ldr	r0, [r7, #20]
    2a3c:	4619      	mov	r1, r3
    2a3e:	f000 f9bb 	bl	2db8 <vListIntialiseEventItem>
        vListInsertEnd(&xEventList, &pxEndFlagEvent->xEventListItem); 
    2a42:	697b      	ldr	r3, [r7, #20]
    2a44:	3318      	adds	r3, #24
    2a46:	f240 5030 	movw	r0, #1328	; 0x530
    2a4a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2a4e:	4619      	mov	r1, r3
    2a50:	f001 fad4 	bl	3ffc <vListInsertEnd>
    }

    // Creating an End FLag Event and insert into the end of xEventExecutableList, which needs sorted events
    pxEndFlagEvent = (eveECB *) pvPortMalloc( sizeof( eveECB ) );
    2a54:	203c      	movs	r0, #60	; 0x3c
    2a56:	f003 f95b 	bl	5d10 <pvPortMalloc>
    2a5a:	6178      	str	r0, [r7, #20]
    if( pxEndFlagEvent != NULL )
    2a5c:	697b      	ldr	r3, [r7, #20]
    2a5e:	2b00      	cmp	r3, #0
    2a60:	d01e      	beq.n	2aa0 <vInitialiseEventLists+0x198>
    {
        // there may be some problem here because of this assignment way
        pxEndFlagEvent->xTimeStamp.xDeadline= portMAX_DELAY;
    2a62:	697b      	ldr	r3, [r7, #20]
    2a64:	f04f 32ff 	mov.w	r2, #4294967295
    2a68:	609a      	str	r2, [r3, #8]
        pxEndFlagEvent->xTimeStamp.xTime = portMAX_DELAY;
    2a6a:	697b      	ldr	r3, [r7, #20]
    2a6c:	f04f 32ff 	mov.w	r2, #4294967295
    2a70:	60da      	str	r2, [r3, #12]
        pxEndFlagEvent->xTimeStamp.xMicroStep = portMAX_DELAY;
    2a72:	697b      	ldr	r3, [r7, #20]
    2a74:	f04f 32ff 	mov.w	r2, #4294967295
    2a78:	611a      	str	r2, [r3, #16]
        pxEndFlagEvent->xTimeStamp.xLevel = portMAX_DELAY;
    2a7a:	697b      	ldr	r3, [r7, #20]
    2a7c:	f04f 32ff 	mov.w	r2, #4294967295
    2a80:	615a      	str	r2, [r3, #20]
        vListIntialiseEventItem( pxEndFlagEvent, (xListItem *) & pxEndFlagEvent->xEventListItem );
    2a82:	697b      	ldr	r3, [r7, #20]
    2a84:	3318      	adds	r3, #24
    2a86:	6978      	ldr	r0, [r7, #20]
    2a88:	4619      	mov	r1, r3
    2a8a:	f000 f995 	bl	2db8 <vListIntialiseEventItem>
        vListInsertEnd(&xEventExecutableList, &pxEndFlagEvent->xEventListItem); 
    2a8e:	697b      	ldr	r3, [r7, #20]
    2a90:	3318      	adds	r3, #24
    2a92:	f240 5044 	movw	r0, #1348	; 0x544
    2a96:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2a9a:	4619      	mov	r1, r3
    2a9c:	f001 faae 	bl	3ffc <vListInsertEnd>
    2aa0:	46c5      	mov	sp, r8
    }
}
    2aa2:	3720      	adds	r7, #32
    2aa4:	46bd      	mov	sp, r7
    2aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2aaa:	bf00      	nop

00002aac <xCompareFunction1>:

/* unexecutable event comparison function is used in xEventList. 
 * The event with earlist timestamp will be proceeded first*/
static portBASE_TYPE xCompareFunction1( const struct timeStamp t1, const struct timeStamp t2 )
{
    2aac:	b490      	push	{r4, r7}
    2aae:	b084      	sub	sp, #16
    2ab0:	af00      	add	r7, sp, #0
    2ab2:	463c      	mov	r4, r7
    2ab4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if( t1.xTime < t2.xTime)
    2ab8:	687a      	ldr	r2, [r7, #4]
    2aba:	69fb      	ldr	r3, [r7, #28]
    2abc:	429a      	cmp	r2, r3
    2abe:	d201      	bcs.n	2ac4 <xCompareFunction1+0x18>
    {
        return pdTRUE;
    2ac0:	2301      	movs	r3, #1
    2ac2:	e014      	b.n	2aee <xCompareFunction1+0x42>
    }
    else if( t1.xTime == t2.xTime)
    2ac4:	687a      	ldr	r2, [r7, #4]
    2ac6:	69fb      	ldr	r3, [r7, #28]
    2ac8:	429a      	cmp	r2, r3
    2aca:	d10f      	bne.n	2aec <xCompareFunction1+0x40>
    {
        if( t1.xDeadline < t2.xDeadline )
    2acc:	683a      	ldr	r2, [r7, #0]
    2ace:	69bb      	ldr	r3, [r7, #24]
    2ad0:	429a      	cmp	r2, r3
    2ad2:	d201      	bcs.n	2ad8 <xCompareFunction1+0x2c>
        {
            return pdTRUE;
    2ad4:	2301      	movs	r3, #1
    2ad6:	e00a      	b.n	2aee <xCompareFunction1+0x42>
        }
        else if( t1.xDeadline == t2.xDeadline )
    2ad8:	683a      	ldr	r2, [r7, #0]
    2ada:	69bb      	ldr	r3, [r7, #24]
    2adc:	429a      	cmp	r2, r3
    2ade:	d105      	bne.n	2aec <xCompareFunction1+0x40>
        {
            if( t1.xLevel < t2.xLevel )
    2ae0:	68fa      	ldr	r2, [r7, #12]
    2ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ae4:	429a      	cmp	r2, r3
    2ae6:	da01      	bge.n	2aec <xCompareFunction1+0x40>
            {
                return pdTRUE;
    2ae8:	2301      	movs	r3, #1
    2aea:	e000      	b.n	2aee <xCompareFunction1+0x42>
            }
        }
    }
    return pdFALSE;
    2aec:	2300      	movs	r3, #0
}
    2aee:	4618      	mov	r0, r3
    2af0:	3710      	adds	r7, #16
    2af2:	46bd      	mov	sp, r7
    2af4:	bc90      	pop	{r4, r7}
    2af6:	4770      	bx	lr

00002af8 <xCompareFunction2>:

/* executable event comparison function is used in xEventExecutableList. 
 * The event with earlist deadline will be scheduled to execute first */
static portBASE_TYPE xCompareFunction2( const struct timeStamp t1, const struct timeStamp t2 )
{
    2af8:	b490      	push	{r4, r7}
    2afa:	b084      	sub	sp, #16
    2afc:	af00      	add	r7, sp, #0
    2afe:	463c      	mov	r4, r7
    2b00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if( t1.xDeadline < t2.xDeadline)
    2b04:	683a      	ldr	r2, [r7, #0]
    2b06:	69bb      	ldr	r3, [r7, #24]
    2b08:	429a      	cmp	r2, r3
    2b0a:	d201      	bcs.n	2b10 <xCompareFunction2+0x18>
    {
        return pdTRUE;
    2b0c:	2301      	movs	r3, #1
    2b0e:	e014      	b.n	2b3a <xCompareFunction2+0x42>
    }
    else if( t1.xDeadline == t2.xDeadline)
    2b10:	683a      	ldr	r2, [r7, #0]
    2b12:	69bb      	ldr	r3, [r7, #24]
    2b14:	429a      	cmp	r2, r3
    2b16:	d10f      	bne.n	2b38 <xCompareFunction2+0x40>
    {
        if( t1.xTime < t2.xTime )
    2b18:	687a      	ldr	r2, [r7, #4]
    2b1a:	69fb      	ldr	r3, [r7, #28]
    2b1c:	429a      	cmp	r2, r3
    2b1e:	d201      	bcs.n	2b24 <xCompareFunction2+0x2c>
        {
            return pdTRUE;
    2b20:	2301      	movs	r3, #1
    2b22:	e00a      	b.n	2b3a <xCompareFunction2+0x42>
        }
        else if( t1.xTime == t2.xTime )
    2b24:	687a      	ldr	r2, [r7, #4]
    2b26:	69fb      	ldr	r3, [r7, #28]
    2b28:	429a      	cmp	r2, r3
    2b2a:	d105      	bne.n	2b38 <xCompareFunction2+0x40>
        {
            if( t1.xLevel < t2.xLevel )
    2b2c:	68fa      	ldr	r2, [r7, #12]
    2b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2b30:	429a      	cmp	r2, r3
    2b32:	da01      	bge.n	2b38 <xCompareFunction2+0x40>
            {
                return pdTRUE;
    2b34:	2301      	movs	r3, #1
    2b36:	e000      	b.n	2b3a <xCompareFunction2+0x42>
            }
        }
    }

    return pdFALSE;
    2b38:	2300      	movs	r3, #0
}
    2b3a:	4618      	mov	r0, r3
    2b3c:	3710      	adds	r7, #16
    2b3e:	46bd      	mov	sp, r7
    2b40:	bc90      	pop	{r4, r7}
    2b42:	4770      	bx	lr

00002b44 <xEventGetpxSource>:



xTaskHandle xEventGetpxSource( xEventHandle pxEvent )
{
    2b44:	b480      	push	{r7}
    2b46:	b083      	sub	sp, #12
    2b48:	af00      	add	r7, sp, #0
    2b4a:	6078      	str	r0, [r7, #4]
    return ((eveECB *)pxEvent)->pxSource;
    2b4c:	687b      	ldr	r3, [r7, #4]
    2b4e:	681b      	ldr	r3, [r3, #0]
}
    2b50:	4618      	mov	r0, r3
    2b52:	370c      	adds	r7, #12
    2b54:	46bd      	mov	sp, r7
    2b56:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b5a:	4770      	bx	lr

00002b5c <xEventGetpxDestination>:

xTaskHandle xEventGetpxDestination( xEventHandle pxEvent)
{
    2b5c:	b480      	push	{r7}
    2b5e:	b083      	sub	sp, #12
    2b60:	af00      	add	r7, sp, #0
    2b62:	6078      	str	r0, [r7, #4]
    return ((eveECB *) pxEvent)->pxDestination;
    2b64:	687b      	ldr	r3, [r7, #4]
    2b66:	685b      	ldr	r3, [r3, #4]
}
    2b68:	4618      	mov	r0, r3
    2b6a:	370c      	adds	r7, #12
    2b6c:	46bd      	mov	sp, r7
    2b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b72:	4770      	bx	lr

00002b74 <xEventGetxTimeStamp>:

struct timeStamp xEventGetxTimeStamp( xEventHandle pxEvent)
{
    2b74:	b490      	push	{r4, r7}
    2b76:	b082      	sub	sp, #8
    2b78:	af00      	add	r7, sp, #0
    2b7a:	6078      	str	r0, [r7, #4]
    2b7c:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xTimeStamp;
    2b7e:	687a      	ldr	r2, [r7, #4]
    2b80:	683b      	ldr	r3, [r7, #0]
    2b82:	4614      	mov	r4, r2
    2b84:	3308      	adds	r3, #8
    2b86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2b88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    2b8c:	6878      	ldr	r0, [r7, #4]
    2b8e:	3708      	adds	r7, #8
    2b90:	46bd      	mov	sp, r7
    2b92:	bc90      	pop	{r4, r7}
    2b94:	4770      	bx	lr
    2b96:	bf00      	nop

00002b98 <xEventGetxData>:

struct eventData xEventGetxData( xEventHandle pxEvent)
{
    2b98:	b490      	push	{r4, r7}
    2b9a:	b082      	sub	sp, #8
    2b9c:	af00      	add	r7, sp, #0
    2b9e:	6078      	str	r0, [r7, #4]
    2ba0:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xData;
    2ba2:	687a      	ldr	r2, [r7, #4]
    2ba4:	683b      	ldr	r3, [r7, #0]
    2ba6:	4614      	mov	r4, r2
    2ba8:	332c      	adds	r3, #44	; 0x2c
    2baa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2bac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    2bb0:	6878      	ldr	r0, [r7, #4]
    2bb2:	3708      	adds	r7, #8
    2bb4:	46bd      	mov	sp, r7
    2bb6:	bc90      	pop	{r4, r7}
    2bb8:	4770      	bx	lr
    2bba:	bf00      	nop

00002bbc <vEventSetxTimeStamp>:

static void vEventSetxTimeStamp( xEventHandle pxNewEvent )
{
    2bbc:	b480      	push	{r7}
    2bbe:	b085      	sub	sp, #20
    2bc0:	af00      	add	r7, sp, #0
    2bc2:	6078      	str	r0, [r7, #4]
    eveECB * pxEvent =(eveECB *) pxNewEvent;
    2bc4:	687b      	ldr	r3, [r7, #4]
    2bc6:	60fb      	str	r3, [r7, #12]
    portTickType xDeadline = pxEvent->xData.xNextPeriod;
    2bc8:	68fb      	ldr	r3, [r7, #12]
    2bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2bcc:	60bb      	str	r3, [r7, #8]

    /* EDF scheduling algorithm */
    pxEvent->xTimeStamp.xDeadline= xDeadline ;
    2bce:	68fb      	ldr	r3, [r7, #12]
    2bd0:	68ba      	ldr	r2, [r7, #8]
    2bd2:	609a      	str	r2, [r3, #8]

    /*set the time of this event to be processed */
    if( pxEvent->xData.IS_LAST_SERVANT == 1 )
    2bd4:	68fb      	ldr	r3, [r7, #12]
    2bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2bd8:	2b01      	cmp	r3, #1
    2bda:	d103      	bne.n	2be4 <vEventSetxTimeStamp+0x28>
    {
        pxEvent->xTimeStamp.xTime = xDeadline;
    2bdc:	68fb      	ldr	r3, [r7, #12]
    2bde:	68ba      	ldr	r2, [r7, #8]
    2be0:	60da      	str	r2, [r3, #12]
    2be2:	e003      	b.n	2bec <vEventSetxTimeStamp+0x30>
    }
    else
    {
        pxEvent->xTimeStamp.xTime = pxEvent->xData.xTime ;
    2be4:	68fb      	ldr	r3, [r7, #12]
    2be6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2be8:	68fb      	ldr	r3, [r7, #12]
    2bea:	60da      	str	r2, [r3, #12]
    }

    /*the microstep is not used now*/
    pxEvent->xTimeStamp.xMicroStep = 0;
    2bec:	68fb      	ldr	r3, [r7, #12]
    2bee:	2200      	movs	r2, #0
    2bf0:	611a      	str	r2, [r3, #16]

    /* set the level of timestamp according to the topology sort result*/
    pxEvent->xTimeStamp.xLevel = xEventSerialNumber;
    2bf2:	f240 536c 	movw	r3, #1388	; 0x56c
    2bf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bfa:	681b      	ldr	r3, [r3, #0]
    2bfc:	461a      	mov	r2, r3
    2bfe:	68fb      	ldr	r3, [r7, #12]
    2c00:	615a      	str	r2, [r3, #20]

    xEventSerialNumber++;
    2c02:	f240 536c 	movw	r3, #1388	; 0x56c
    2c06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c0a:	681b      	ldr	r3, [r3, #0]
    2c0c:	1c5a      	adds	r2, r3, #1
    2c0e:	f240 536c 	movw	r3, #1388	; 0x56c
    2c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c16:	601a      	str	r2, [r3, #0]
}
    2c18:	3714      	adds	r7, #20
    2c1a:	46bd      	mov	sp, r7
    2c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c20:	4770      	bx	lr
    2c22:	bf00      	nop

00002c24 <vEventSetxData>:

static void vEventSetxData( xEventHandle pxEvent, struct eventData xData)
{
    2c24:	b084      	sub	sp, #16
    2c26:	b490      	push	{r4, r7}
    2c28:	b082      	sub	sp, #8
    2c2a:	af00      	add	r7, sp, #0
    2c2c:	6078      	str	r0, [r7, #4]
    2c2e:	f107 0014 	add.w	r0, r7, #20
    2c32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ((eveECB *) pxEvent)->xData = xData;
    2c36:	687b      	ldr	r3, [r7, #4]
    2c38:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    2c3c:	f107 0314 	add.w	r3, r7, #20
    2c40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2c42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    2c46:	3708      	adds	r7, #8
    2c48:	46bd      	mov	sp, r7
    2c4a:	bc90      	pop	{r4, r7}
    2c4c:	b004      	add	sp, #16
    2c4e:	4770      	bx	lr

00002c50 <pxGetReadyList>:
* Get the event ready list according to the multicore scheduling algorithm.
*
* @return the address of the event ready list.
* */
static xList * pxGetReadyList( void )
{
    2c50:	b480      	push	{r7}
    2c52:	af00      	add	r7, sp, #0
    return &xEventReadyList[0];
    2c54:	f240 5358 	movw	r3, #1368	; 0x558
    2c58:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
    2c5c:	4618      	mov	r0, r3
    2c5e:	46bd      	mov	sp, r7
    2c60:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c64:	4770      	bx	lr
    2c66:	bf00      	nop

00002c68 <prvEventListGenericInsert1>:


/* insert event to xEventList in terms of comparison function 1 */
static void prvEventListGenericInsert1( xListItem *pxNewListItem )
{
    2c68:	b590      	push	{r4, r7, lr}
    2c6a:	b091      	sub	sp, #68	; 0x44
    2c6c:	af04      	add	r7, sp, #16
    2c6e:	6078      	str	r0, [r7, #4]
    volatile xListItem *pxIterator;
    struct timeStamp xTimeStampOfInsertion;
    xList * pxList = &xEventList;
    2c70:	f240 5330 	movw	r3, #1328	; 0x530
    2c74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c78:	62bb      	str	r3, [r7, #40]	; 0x28

    xTimeStampOfInsertion = xEventGetxTimeStamp(pxNewListItem->pvOwner);
    2c7a:	687b      	ldr	r3, [r7, #4]
    2c7c:	68db      	ldr	r3, [r3, #12]
    2c7e:	f107 0208 	add.w	r2, r7, #8
    2c82:	4610      	mov	r0, r2
    2c84:	4619      	mov	r1, r3
    2c86:	f7ff ff75 	bl	2b74 <xEventGetxTimeStamp>

    if( xTimeStampOfInsertion.xTime == portMAX_DELAY )
    2c8a:	68fb      	ldr	r3, [r7, #12]
    2c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
    2c90:	d103      	bne.n	2c9a <prvEventListGenericInsert1+0x32>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    2c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c94:	691b      	ldr	r3, [r3, #16]
    2c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    2c98:	e021      	b.n	2cde <prvEventListGenericInsert1+0x76>
    }
    else
    {
        taskENTER_CRITICAL();
    2c9a:	f002 ffc1 	bl	5c20 <vPortEnterCritical>
        // There must already be a End Flag Event with max timeStamp in xEventList.
        // The End Flag Event can be the last Event to be processed, and new events
        // are inserted before it in xEventList.
        // The End Flag Event has been inserted when xEventList is initialised.
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); xCompareFunction1( xEventGetxTimeStamp( pxIterator->pxNext->pvOwner ), xTimeStampOfInsertion ); pxIterator = pxIterator->pxNext ) 
    2c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2ca0:	3308      	adds	r3, #8
    2ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    2ca4:	e002      	b.n	2cac <prvEventListGenericInsert1+0x44>
    2ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2ca8:	685b      	ldr	r3, [r3, #4]
    2caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    2cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2cae:	685b      	ldr	r3, [r3, #4]
    2cb0:	68db      	ldr	r3, [r3, #12]
    2cb2:	f107 0218 	add.w	r2, r7, #24
    2cb6:	4610      	mov	r0, r2
    2cb8:	4619      	mov	r1, r3
    2cba:	f7ff ff5b 	bl	2b74 <xEventGetxTimeStamp>
    2cbe:	466c      	mov	r4, sp
    2cc0:	f107 0308 	add.w	r3, r7, #8
    2cc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2cc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2cca:	f107 0318 	add.w	r3, r7, #24
    2cce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2cd0:	f7ff feec 	bl	2aac <xCompareFunction1>
    2cd4:	4603      	mov	r3, r0
    2cd6:	2b00      	cmp	r3, #0
    2cd8:	d1e5      	bne.n	2ca6 <prvEventListGenericInsert1+0x3e>
        {
        }
        taskEXIT_CRITICAL();
    2cda:	f002 ffb7 	bl	5c4c <vPortExitCritical>
    }

    // insert the new event before a bigger one.
    pxNewListItem->pxNext = pxIterator->pxNext;
    2cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2ce0:	685a      	ldr	r2, [r3, #4]
    2ce2:	687b      	ldr	r3, [r7, #4]
    2ce4:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2ce6:	687b      	ldr	r3, [r7, #4]
    2ce8:	685b      	ldr	r3, [r3, #4]
    2cea:	687a      	ldr	r2, [r7, #4]
    2cec:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
    2cee:	687b      	ldr	r3, [r7, #4]
    2cf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2cf2:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2cf6:	687a      	ldr	r2, [r7, #4]
    2cf8:	605a      	str	r2, [r3, #4]

    pxNewListItem->pvContainer = ( void * ) pxList;
    2cfa:	687b      	ldr	r3, [r7, #4]
    2cfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2cfe:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
    2d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2d02:	681b      	ldr	r3, [r3, #0]
    2d04:	1c5a      	adds	r2, r3, #1
    2d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2d08:	601a      	str	r2, [r3, #0]
}
    2d0a:	3734      	adds	r7, #52	; 0x34
    2d0c:	46bd      	mov	sp, r7
    2d0e:	bd90      	pop	{r4, r7, pc}

00002d10 <prvEventListGenericInsert2>:

/* insert event to xEventExecutableList in terms of comparison function 2 */
static void prvEventListGenericInsert2( xListItem *pxNewListItem )
{
    2d10:	b590      	push	{r4, r7, lr}
    2d12:	b091      	sub	sp, #68	; 0x44
    2d14:	af04      	add	r7, sp, #16
    2d16:	6078      	str	r0, [r7, #4]
    volatile xListItem *pxIterator;
    struct timeStamp xTimeStampOfInsertion;
    xList * pxList = &xEventExecutableList;
    2d18:	f240 5344 	movw	r3, #1348	; 0x544
    2d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d20:	62bb      	str	r3, [r7, #40]	; 0x28

    xTimeStampOfInsertion = xEventGetxTimeStamp(pxNewListItem->pvOwner);
    2d22:	687b      	ldr	r3, [r7, #4]
    2d24:	68db      	ldr	r3, [r3, #12]
    2d26:	f107 0208 	add.w	r2, r7, #8
    2d2a:	4610      	mov	r0, r2
    2d2c:	4619      	mov	r1, r3
    2d2e:	f7ff ff21 	bl	2b74 <xEventGetxTimeStamp>

    if( xTimeStampOfInsertion.xTime == portMAX_DELAY )
    2d32:	68fb      	ldr	r3, [r7, #12]
    2d34:	f1b3 3fff 	cmp.w	r3, #4294967295
    2d38:	d103      	bne.n	2d42 <prvEventListGenericInsert2+0x32>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    2d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2d3c:	691b      	ldr	r3, [r3, #16]
    2d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    2d40:	e021      	b.n	2d86 <prvEventListGenericInsert2+0x76>
    }
    else
    {
        taskENTER_CRITICAL();
    2d42:	f002 ff6d 	bl	5c20 <vPortEnterCritical>
        // There must already be a End Flag Event with max timeStamp in xEventList.
        // The End Flag Event can be the last Event to be processed, and new events
        // are inserted before it in xEventList.
        // The End Flag Event has been inserted when xEventList is initialised.
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); xCompareFunction2( xEventGetxTimeStamp( pxIterator->pxNext->pvOwner ), xTimeStampOfInsertion ); pxIterator = pxIterator->pxNext ) 
    2d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2d48:	3308      	adds	r3, #8
    2d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    2d4c:	e002      	b.n	2d54 <prvEventListGenericInsert2+0x44>
    2d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2d50:	685b      	ldr	r3, [r3, #4]
    2d52:	62fb      	str	r3, [r7, #44]	; 0x2c
    2d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2d56:	685b      	ldr	r3, [r3, #4]
    2d58:	68db      	ldr	r3, [r3, #12]
    2d5a:	f107 0218 	add.w	r2, r7, #24
    2d5e:	4610      	mov	r0, r2
    2d60:	4619      	mov	r1, r3
    2d62:	f7ff ff07 	bl	2b74 <xEventGetxTimeStamp>
    2d66:	466c      	mov	r4, sp
    2d68:	f107 0308 	add.w	r3, r7, #8
    2d6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2d6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2d72:	f107 0318 	add.w	r3, r7, #24
    2d76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2d78:	f7ff febe 	bl	2af8 <xCompareFunction2>
    2d7c:	4603      	mov	r3, r0
    2d7e:	2b00      	cmp	r3, #0
    2d80:	d1e5      	bne.n	2d4e <prvEventListGenericInsert2+0x3e>
        {
        }
        taskEXIT_CRITICAL();
    2d82:	f002 ff63 	bl	5c4c <vPortExitCritical>
    }

    // insert the new event before a bigger one.
    pxNewListItem->pxNext = pxIterator->pxNext;
    2d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2d88:	685a      	ldr	r2, [r3, #4]
    2d8a:	687b      	ldr	r3, [r7, #4]
    2d8c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2d8e:	687b      	ldr	r3, [r7, #4]
    2d90:	685b      	ldr	r3, [r3, #4]
    2d92:	687a      	ldr	r2, [r7, #4]
    2d94:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
    2d96:	687b      	ldr	r3, [r7, #4]
    2d98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2d9a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2d9e:	687a      	ldr	r2, [r7, #4]
    2da0:	605a      	str	r2, [r3, #4]

    pxNewListItem->pvContainer = ( void * ) pxList;
    2da2:	687b      	ldr	r3, [r7, #4]
    2da4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2da6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
    2da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2daa:	681b      	ldr	r3, [r3, #0]
    2dac:	1c5a      	adds	r2, r3, #1
    2dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2db0:	601a      	str	r2, [r3, #0]
}
    2db2:	3734      	adds	r7, #52	; 0x34
    2db4:	46bd      	mov	sp, r7
    2db6:	bd90      	pop	{r4, r7, pc}

00002db8 <vListIntialiseEventItem>:


static void vListIntialiseEventItem( xEventHandle pvOwner, xListItem * pxNewEventItem)
{
    2db8:	b480      	push	{r7}
    2dba:	b083      	sub	sp, #12
    2dbc:	af00      	add	r7, sp, #0
    2dbe:	6078      	str	r0, [r7, #4]
    2dc0:	6039      	str	r1, [r7, #0]
    /* set the pvOwner of the EventItem as a event*/
    listSET_LIST_ITEM_OWNER( pxNewEventItem, pvOwner );
    2dc2:	683b      	ldr	r3, [r7, #0]
    2dc4:	687a      	ldr	r2, [r7, #4]
    2dc6:	60da      	str	r2, [r3, #12]
    //pxNewEventItem->pvContainer = (void *) &xEventList;
}
    2dc8:	370c      	adds	r7, #12
    2dca:	46bd      	mov	sp, r7
    2dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    2dd0:	4770      	bx	lr
    2dd2:	bf00      	nop

00002dd4 <vEventGenericCreate>:


void vEventGenericCreate( xTaskHandle pxDestination, struct eventData pdData)
{
    2dd4:	b084      	sub	sp, #16
    2dd6:	b580      	push	{r7, lr}
    2dd8:	b086      	sub	sp, #24
    2dda:	af02      	add	r7, sp, #8
    2ddc:	6078      	str	r0, [r7, #4]
    2dde:	f107 001c 	add.w	r0, r7, #28
    2de2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    eveECB * pxNewEvent = NULL;
    2de6:	2300      	movs	r3, #0
    2de8:	60fb      	str	r3, [r7, #12]

    /* using the pxCurrentTCB, current task should not be changed */
    taskENTER_CRITICAL();
    2dea:	f002 ff19 	bl	5c20 <vPortEnterCritical>

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    2dee:	f002 fdaf 	bl	5950 <xTaskGetCurrentTaskHandle>
    2df2:	60b8      	str	r0, [r7, #8]

    // get new idle event 
    if( listCURRENT_LIST_LENGTH(&xEventIdleList) == 0 )
    2df4:	f240 5308 	movw	r3, #1288	; 0x508
    2df8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2dfc:	681b      	ldr	r3, [r3, #0]
    2dfe:	2b00      	cmp	r3, #0
    2e00:	d106      	bne.n	2e10 <vEventGenericCreate+0x3c>
    {
        vPrintString(" No Idle Events available\n\r");
    2e02:	f648 00dc 	movw	r0, #35036	; 0x88dc
    2e06:	f2c0 0001 	movt	r0, #1
    2e0a:	f014 fa93 	bl	17334 <vPrintString>
        return;
    2e0e:	e039      	b.n	2e84 <vEventGenericCreate+0xb0>
    }

    pxNewEvent = (eveECB *)xEventIdleList.xListEnd.pxNext->pvOwner;
    2e10:	f240 5308 	movw	r3, #1288	; 0x508
    2e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e18:	68db      	ldr	r3, [r3, #12]
    2e1a:	68db      	ldr	r3, [r3, #12]
    2e1c:	60fb      	str	r3, [r7, #12]
    vListRemove( (xListItem *)&pxNewEvent->xEventListItem );
    2e1e:	68fb      	ldr	r3, [r7, #12]
    2e20:	3318      	adds	r3, #24
    2e22:	4618      	mov	r0, r3
    2e24:	f001 f94a 	bl	40bc <vListRemove>
    if( pxNewEvent == NULL )
    2e28:	68fb      	ldr	r3, [r7, #12]
    2e2a:	2b00      	cmp	r3, #0
    2e2c:	d105      	bne.n	2e3a <vEventGenericCreate+0x66>
    {
        vPrintString("malloc for event stack failed\n\r");
    2e2e:	f648 00f8 	movw	r0, #35064	; 0x88f8
    2e32:	f2c0 0001 	movt	r0, #1
    2e36:	f014 fa7d 	bl	17334 <vPrintString>
    }
    if ( pxNewEvent != NULL )
    2e3a:	68fb      	ldr	r3, [r7, #12]
    2e3c:	2b00      	cmp	r3, #0
    2e3e:	d01f      	beq.n	2e80 <vEventGenericCreate+0xac>
    {
        pxNewEvent->pxSource = pxCurrentTCBLocal;
    2e40:	68fb      	ldr	r3, [r7, #12]
    2e42:	68ba      	ldr	r2, [r7, #8]
    2e44:	601a      	str	r2, [r3, #0]
        pxNewEvent->pxDestination = pxDestination;
    2e46:	68fb      	ldr	r3, [r7, #12]
    2e48:	687a      	ldr	r2, [r7, #4]
    2e4a:	605a      	str	r2, [r3, #4]

        /* initialise the time stamp of an event item according to the sort algorithm.*/
        vEventSetxData( pxNewEvent, pdData );
    2e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2e4e:	9300      	str	r3, [sp, #0]
    2e50:	f107 031c 	add.w	r3, r7, #28
    2e54:	cb0e      	ldmia	r3, {r1, r2, r3}
    2e56:	68f8      	ldr	r0, [r7, #12]
    2e58:	f7ff fee4 	bl	2c24 <vEventSetxData>

        vEventSetxTimeStamp( pxNewEvent );
    2e5c:	68f8      	ldr	r0, [r7, #12]
    2e5e:	f7ff fead 	bl	2bbc <vEventSetxTimeStamp>

        vListIntialiseEventItem( pxNewEvent, (xListItem *) &pxNewEvent->xEventListItem );
    2e62:	68fb      	ldr	r3, [r7, #12]
    2e64:	3318      	adds	r3, #24
    2e66:	68f8      	ldr	r0, [r7, #12]
    2e68:	4619      	mov	r1, r3
    2e6a:	f7ff ffa5 	bl	2db8 <vListIntialiseEventItem>

        // insert the event into eventpool with O(1)
        vListInsertEnd(&xEventPool, (xListItem *)& pxNewEvent->xEventListItem);
    2e6e:	68fb      	ldr	r3, [r7, #12]
    2e70:	3318      	adds	r3, #24
    2e72:	f240 501c 	movw	r0, #1308	; 0x51c
    2e76:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2e7a:	4619      	mov	r1, r3
    2e7c:	f001 f8be 	bl	3ffc <vListInsertEnd>
    }
    taskEXIT_CRITICAL();
    2e80:	f002 fee4 	bl	5c4c <vPortExitCritical>
}
    2e84:	3710      	adds	r7, #16
    2e86:	46bd      	mov	sp, r7
    2e88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    2e8c:	b004      	add	sp, #16
    2e8e:	4770      	bx	lr

00002e90 <xEventListGenericTransit>:

/* An API to transfer all executable Event Items from xEventList to xEventExecutableList.
* Then, choose the first executable event item in xEventExecutableList to proceed, which means
* transfer the executable to specific xEventReadyList according to the condition of CPU*/
portBASE_TYPE xEventListGenericTransit( xListItem ** pxEventListItem, xList ** pxCurrentReadyList)
{
    2e90:	b580      	push	{r7, lr}
    2e92:	b088      	sub	sp, #32
    2e94:	af00      	add	r7, sp, #0
    2e96:	6078      	str	r0, [r7, #4]
    2e98:	6039      	str	r1, [r7, #0]
    xListItem * temp_pxEventListItem;
    // transmit events from event pool to xEventList according to the xCompareFunction1
    while(listCURRENT_LIST_LENGTH( &xEventPool ) != 0)
    2e9a:	e00b      	b.n	2eb4 <xEventListGenericTransit+0x24>
    {
        temp_pxEventListItem = (xListItem *) xEventPool.xListEnd.pxNext;    
    2e9c:	f240 531c 	movw	r3, #1308	; 0x51c
    2ea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ea4:	68db      	ldr	r3, [r3, #12]
    2ea6:	61fb      	str	r3, [r7, #28]
        vListRemove(temp_pxEventListItem);
    2ea8:	69f8      	ldr	r0, [r7, #28]
    2eaa:	f001 f907 	bl	40bc <vListRemove>
        /*how to call this funciton: vEventListInsert( newListItem ). This function add the new item into the xEventList as default*/
        prvEventListGenericInsert1( temp_pxEventListItem ); 
    2eae:	69f8      	ldr	r0, [r7, #28]
    2eb0:	f7ff feda 	bl	2c68 <prvEventListGenericInsert1>
* transfer the executable to specific xEventReadyList according to the condition of CPU*/
portBASE_TYPE xEventListGenericTransit( xListItem ** pxEventListItem, xList ** pxCurrentReadyList)
{
    xListItem * temp_pxEventListItem;
    // transmit events from event pool to xEventList according to the xCompareFunction1
    while(listCURRENT_LIST_LENGTH( &xEventPool ) != 0)
    2eb4:	f240 531c 	movw	r3, #1308	; 0x51c
    2eb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ebc:	681b      	ldr	r3, [r3, #0]
    2ebe:	2b00      	cmp	r3, #0
    2ec0:	d1ec      	bne.n	2e9c <xEventListGenericTransit+0xc>
        /*how to call this funciton: vEventListInsert( newListItem ). This function add the new item into the xEventList as default*/
        prvEventListGenericInsert1( temp_pxEventListItem ); 
    }

    // if there is only End Flag Event in xEventList, then return NULL.
    if( listCURRENT_LIST_LENGTH(&xEventList) == 1 )
    2ec2:	f240 5330 	movw	r3, #1328	; 0x530
    2ec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2eca:	681b      	ldr	r3, [r3, #0]
    2ecc:	2b01      	cmp	r3, #1
    2ece:	d108      	bne.n	2ee2 <xEventListGenericTransit+0x52>
    {
        *pxEventListItem  = NULL;
    2ed0:	687b      	ldr	r3, [r7, #4]
    2ed2:	2200      	movs	r2, #0
    2ed4:	601a      	str	r2, [r3, #0]
        *pxCurrentReadyList = NULL;
    2ed6:	683b      	ldr	r3, [r7, #0]
    2ed8:	2200      	movs	r2, #0
    2eda:	601a      	str	r2, [r3, #0]
        return -1;
    2edc:	f04f 33ff 	mov.w	r3, #4294967295
    2ee0:	e055      	b.n	2f8e <xEventListGenericTransit+0xfe>
    }
        
    struct timeStamp xTimeStamp;
    portTickType xCurrentTime;
    // transmit the executable event from xEventList to xEventExecutableList 
    while( listCURRENT_LIST_LENGTH( &xEventList ) > 1 )
    2ee2:	e020      	b.n	2f26 <xEventListGenericTransit+0x96>
    {
        temp_pxEventListItem = (xListItem *)xEventList.xListEnd.pxNext;
    2ee4:	f240 5330 	movw	r3, #1328	; 0x530
    2ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2eec:	68db      	ldr	r3, [r3, #12]
    2eee:	61fb      	str	r3, [r7, #28]
        xTimeStamp = xEventGetxTimeStamp( (xEventHandle) (temp_pxEventListItem)->pvOwner );
    2ef0:	69fb      	ldr	r3, [r7, #28]
    2ef2:	68db      	ldr	r3, [r3, #12]
    2ef4:	f107 0208 	add.w	r2, r7, #8
    2ef8:	4610      	mov	r0, r2
    2efa:	4619      	mov	r1, r3
    2efc:	f7ff fe3a 	bl	2b74 <xEventGetxTimeStamp>
        xCurrentTime = xTaskGetTickCount();
    2f00:	f002 f95a 	bl	51b8 <xTaskGetTickCount>
    2f04:	61b8      	str	r0, [r7, #24]

        // the event is executable
        if( xTimeStamp.xTime <= xCurrentTime )
    2f06:	68fa      	ldr	r2, [r7, #12]
    2f08:	69bb      	ldr	r3, [r7, #24]
    2f0a:	429a      	cmp	r2, r3
    2f0c:	d80a      	bhi.n	2f24 <xEventListGenericTransit+0x94>
        {
            taskENTER_CRITICAL();
    2f0e:	f002 fe87 	bl	5c20 <vPortEnterCritical>
            /* remove pxListItem from xEventList */ 
            vListRemove(temp_pxEventListItem);
    2f12:	69f8      	ldr	r0, [r7, #28]
    2f14:	f001 f8d2 	bl	40bc <vListRemove>
            /* insert the executable event into the xEventExecutableList*/
            prvEventListGenericInsert2(temp_pxEventListItem);
    2f18:	69f8      	ldr	r0, [r7, #28]
    2f1a:	f7ff fef9 	bl	2d10 <prvEventListGenericInsert2>
            taskEXIT_CRITICAL();
    2f1e:	f002 fe95 	bl	5c4c <vPortExitCritical>
    2f22:	e000      	b.n	2f26 <xEventListGenericTransit+0x96>
        }
        else
        {
          // no executable event in xEventList
           break; 
    2f24:	e006      	b.n	2f34 <xEventListGenericTransit+0xa4>
    }
        
    struct timeStamp xTimeStamp;
    portTickType xCurrentTime;
    // transmit the executable event from xEventList to xEventExecutableList 
    while( listCURRENT_LIST_LENGTH( &xEventList ) > 1 )
    2f26:	f240 5330 	movw	r3, #1328	; 0x530
    2f2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f2e:	681b      	ldr	r3, [r3, #0]
    2f30:	2b01      	cmp	r3, #1
    2f32:	d8d7      	bhi.n	2ee4 <xEventListGenericTransit+0x54>
        }

    }

    // if no executable event exists, then return NULL and information about not time yet
    if( listCURRENT_LIST_LENGTH(& xEventExecutableList) == 1 )
    2f34:	f240 5344 	movw	r3, #1348	; 0x544
    2f38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f3c:	681b      	ldr	r3, [r3, #0]
    2f3e:	2b01      	cmp	r3, #1
    2f40:	d107      	bne.n	2f52 <xEventListGenericTransit+0xc2>
    {
        *pxCurrentReadyList = NULL;
    2f42:	683b      	ldr	r3, [r7, #0]
    2f44:	2200      	movs	r2, #0
    2f46:	601a      	str	r2, [r3, #0]
        *pxEventListItem = NULL;
    2f48:	687b      	ldr	r3, [r7, #4]
    2f4a:	2200      	movs	r2, #0
    2f4c:	601a      	str	r2, [r3, #0]
        return 0;
    2f4e:	2300      	movs	r3, #0
    2f50:	e01d      	b.n	2f8e <xEventListGenericTransit+0xfe>
    }
    // transmit the first executable event from xEventExecutableList to specific xEventReadyList
    else
    {
        *pxCurrentReadyList = pxGetReadyList();
    2f52:	f7ff fe7d 	bl	2c50 <pxGetReadyList>
    2f56:	4602      	mov	r2, r0
    2f58:	683b      	ldr	r3, [r7, #0]
    2f5a:	601a      	str	r2, [r3, #0]
        *pxEventListItem = (xListItem *) xEventExecutableList.xListEnd.pxNext;
    2f5c:	f240 5344 	movw	r3, #1348	; 0x544
    2f60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f64:	68da      	ldr	r2, [r3, #12]
    2f66:	687b      	ldr	r3, [r7, #4]
    2f68:	601a      	str	r2, [r3, #0]
        
        taskENTER_CRITICAL();
    2f6a:	f002 fe59 	bl	5c20 <vPortEnterCritical>
        /* remove pxListItem from xEventList */ 
        vListRemove(*pxEventListItem);
    2f6e:	687b      	ldr	r3, [r7, #4]
    2f70:	681b      	ldr	r3, [r3, #0]
    2f72:	4618      	mov	r0, r3
    2f74:	f001 f8a2 	bl	40bc <vListRemove>
        /* insert the pxListItem into the specified pxList */
        vListInsertEnd(*pxCurrentReadyList, *pxEventListItem);
    2f78:	683b      	ldr	r3, [r7, #0]
    2f7a:	681a      	ldr	r2, [r3, #0]
    2f7c:	687b      	ldr	r3, [r7, #4]
    2f7e:	681b      	ldr	r3, [r3, #0]
    2f80:	4610      	mov	r0, r2
    2f82:	4619      	mov	r1, r3
    2f84:	f001 f83a 	bl	3ffc <vListInsertEnd>
        taskEXIT_CRITICAL();
    2f88:	f002 fe60 	bl	5c4c <vPortExitCritical>
    }

    return 1;
    2f8c:	2301      	movs	r3, #1
}
    2f8e:	4618      	mov	r0, r3
    2f90:	3720      	adds	r7, #32
    2f92:	46bd      	mov	sp, r7
    2f94:	bd80      	pop	{r7, pc}
    2f96:	bf00      	nop

00002f98 <vEventGenericReceive>:

void vEventGenericReceive( xEventHandle * pxEvent, xTaskHandle pxSource, xList * pxList )
{
    2f98:	b580      	push	{r7, lr}
    2f9a:	b088      	sub	sp, #32
    2f9c:	af00      	add	r7, sp, #0
    2f9e:	60f8      	str	r0, [r7, #12]
    2fa0:	60b9      	str	r1, [r7, #8]
    2fa2:	607a      	str	r2, [r7, #4]
    xList * const pxConstList = pxList; 
    2fa4:	687b      	ldr	r3, [r7, #4]
    2fa6:	61bb      	str	r3, [r7, #24]
    {
        //successful.
        //helloworld();
    }

    if( listLIST_IS_EMPTY( pxList ) )
    2fa8:	687b      	ldr	r3, [r7, #4]
    2faa:	681b      	ldr	r3, [r3, #0]
    2fac:	2b00      	cmp	r3, #0
    2fae:	d103      	bne.n	2fb8 <vEventGenericReceive+0x20>
    {
        *pxEvent = NULL;
    2fb0:	68fb      	ldr	r3, [r7, #12]
    2fb2:	2200      	movs	r2, #0
    2fb4:	601a      	str	r2, [r3, #0]
        return;
    2fb6:	e04d      	b.n	3054 <vEventGenericReceive+0xbc>
    }

    volatile xListItem * pxFlag = pxConstList->xListEnd.pxNext;
    2fb8:	69bb      	ldr	r3, [r7, #24]
    2fba:	68db      	ldr	r3, [r3, #12]
    2fbc:	61fb      	str	r3, [r7, #28]


    taskENTER_CRITICAL();
    2fbe:	f002 fe2f 	bl	5c20 <vPortEnterCritical>

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    2fc2:	f002 fcc5 	bl	5950 <xTaskGetCurrentTaskHandle>
    2fc6:	6178      	str	r0, [r7, #20]

    /* look up in the specified xEventReadyList. */
    for(; pxFlag != (xListItem *) ( pxConstList->xListEnd.pxPrevious); pxFlag = pxFlag->pxNext)
    2fc8:	e01e      	b.n	3008 <vEventGenericReceive+0x70>
    {
        if( xEventGetpxSource((xEventHandle) pxFlag->pvOwner) == pxSource && xEventGetpxDestination((xEventHandle) pxFlag->pvOwner) == pxCurrentTCBLocal )
    2fca:	69fb      	ldr	r3, [r7, #28]
    2fcc:	68db      	ldr	r3, [r3, #12]
    2fce:	4618      	mov	r0, r3
    2fd0:	f7ff fdb8 	bl	2b44 <xEventGetpxSource>
    2fd4:	4602      	mov	r2, r0
    2fd6:	68bb      	ldr	r3, [r7, #8]
    2fd8:	429a      	cmp	r2, r3
    2fda:	d112      	bne.n	3002 <vEventGenericReceive+0x6a>
    2fdc:	69fb      	ldr	r3, [r7, #28]
    2fde:	68db      	ldr	r3, [r3, #12]
    2fe0:	4618      	mov	r0, r3
    2fe2:	f7ff fdbb 	bl	2b5c <xEventGetpxDestination>
    2fe6:	4602      	mov	r2, r0
    2fe8:	697b      	ldr	r3, [r7, #20]
    2fea:	429a      	cmp	r2, r3
    2fec:	d109      	bne.n	3002 <vEventGenericReceive+0x6a>
        {
            *pxEvent = pxFlag->pvOwner;
    2fee:	69fb      	ldr	r3, [r7, #28]
    2ff0:	68da      	ldr	r2, [r3, #12]
    2ff2:	68fb      	ldr	r3, [r7, #12]
    2ff4:	601a      	str	r2, [r3, #0]
            vListRemove((xListItem *)pxFlag);
    2ff6:	69f8      	ldr	r0, [r7, #28]
    2ff8:	f001 f860 	bl	40bc <vListRemove>
            taskEXIT_CRITICAL();
    2ffc:	f002 fe26 	bl	5c4c <vPortExitCritical>
            return;
    3000:	e028      	b.n	3054 <vEventGenericReceive+0xbc>
    taskENTER_CRITICAL();

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();

    /* look up in the specified xEventReadyList. */
    for(; pxFlag != (xListItem *) ( pxConstList->xListEnd.pxPrevious); pxFlag = pxFlag->pxNext)
    3002:	69fb      	ldr	r3, [r7, #28]
    3004:	685b      	ldr	r3, [r3, #4]
    3006:	61fb      	str	r3, [r7, #28]
    3008:	69bb      	ldr	r3, [r7, #24]
    300a:	691a      	ldr	r2, [r3, #16]
    300c:	69fb      	ldr	r3, [r7, #28]
    300e:	429a      	cmp	r2, r3
    3010:	d1db      	bne.n	2fca <vEventGenericReceive+0x32>
            return;
        }
    }

    /* we can't forget the last one item of the list. */
    if( xEventGetpxSource((xEventHandle) pxFlag->pvOwner) == pxSource && xEventGetpxDestination((xEventHandle) pxFlag->pvOwner) == pxCurrentTCBLocal )
    3012:	69fb      	ldr	r3, [r7, #28]
    3014:	68db      	ldr	r3, [r3, #12]
    3016:	4618      	mov	r0, r3
    3018:	f7ff fd94 	bl	2b44 <xEventGetpxSource>
    301c:	4602      	mov	r2, r0
    301e:	68bb      	ldr	r3, [r7, #8]
    3020:	429a      	cmp	r2, r3
    3022:	d112      	bne.n	304a <vEventGenericReceive+0xb2>
    3024:	69fb      	ldr	r3, [r7, #28]
    3026:	68db      	ldr	r3, [r3, #12]
    3028:	4618      	mov	r0, r3
    302a:	f7ff fd97 	bl	2b5c <xEventGetpxDestination>
    302e:	4602      	mov	r2, r0
    3030:	697b      	ldr	r3, [r7, #20]
    3032:	429a      	cmp	r2, r3
    3034:	d109      	bne.n	304a <vEventGenericReceive+0xb2>
    {
        *pxEvent = pxFlag->pvOwner;
    3036:	69fb      	ldr	r3, [r7, #28]
    3038:	68da      	ldr	r2, [r3, #12]
    303a:	68fb      	ldr	r3, [r7, #12]
    303c:	601a      	str	r2, [r3, #0]
        vListRemove((xListItem *)pxFlag);
    303e:	69f8      	ldr	r0, [r7, #28]
    3040:	f001 f83c 	bl	40bc <vListRemove>
        taskEXIT_CRITICAL();
    3044:	f002 fe02 	bl	5c4c <vPortExitCritical>
        return;
    3048:	e004      	b.n	3054 <vEventGenericReceive+0xbc>
    }
    else
    {
        // cannot find the specified event.
        *pxEvent = NULL;
    304a:	68fb      	ldr	r3, [r7, #12]
    304c:	2200      	movs	r2, #0
    304e:	601a      	str	r2, [r3, #0]
    }

    taskEXIT_CRITICAL();
    3050:	f002 fdfc 	bl	5c4c <vPortExitCritical>
}
    3054:	3720      	adds	r7, #32
    3056:	46bd      	mov	sp, r7
    3058:	bd80      	pop	{r7, pc}
    305a:	bf00      	nop

0000305c <vEventGenericDelete>:

void vEventGenericDelete( xEventHandle xEvent)
{
    305c:	b580      	push	{r7, lr}
    305e:	b084      	sub	sp, #16
    3060:	af00      	add	r7, sp, #0
    3062:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
    3064:	f002 fddc 	bl	5c20 <vPortEnterCritical>

    xListItem * pxEventItem = &((eveECB *)xEvent)->xEventListItem;
    3068:	687b      	ldr	r3, [r7, #4]
    306a:	3318      	adds	r3, #24
    306c:	60fb      	str	r3, [r7, #12]
    vListRemove (pxEventItem);
    306e:	68f8      	ldr	r0, [r7, #12]
    3070:	f001 f824 	bl	40bc <vListRemove>
    vListInsertEnd( &xEventIdleList, pxEventItem );
    3074:	f240 5008 	movw	r0, #1288	; 0x508
    3078:	f2c2 0000 	movt	r0, #8192	; 0x2000
    307c:	68f9      	ldr	r1, [r7, #12]
    307e:	f000 ffbd 	bl	3ffc <vListInsertEnd>

    taskEXIT_CRITICAL();
    3082:	f002 fde3 	bl	5c4c <vPortExitCritical>
}
    3086:	3710      	adds	r7, #16
    3088:	46bd      	mov	sp, r7
    308a:	bd80      	pop	{r7, pc}

0000308c <vSemaphoreInitialise>:
// record the period of Task
extern portTickType xPeriodOfTask[NUMBEROFTASK];

/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    308c:	b580      	push	{r7, lr}
    308e:	b082      	sub	sp, #8
    3090:	af00      	add	r7, sp, #0
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    3092:	2300      	movs	r3, #0
    3094:	607b      	str	r3, [r7, #4]
    3096:	e033      	b.n	3100 <vSemaphoreInitialise+0x74>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
    3098:	2001      	movs	r0, #1
    309a:	2100      	movs	r1, #0
    309c:	2203      	movs	r2, #3
    309e:	f001 f883 	bl	41a8 <xQueueGenericCreate>
    30a2:	4601      	mov	r1, r0
    30a4:	f640 337c 	movw	r3, #2940	; 0xb7c
    30a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30ac:	687a      	ldr	r2, [r7, #4]
    30ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    30b2:	f640 337c 	movw	r3, #2940	; 0xb7c
    30b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30ba:	687a      	ldr	r2, [r7, #4]
    30bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    30c0:	2b00      	cmp	r3, #0
    30c2:	d00c      	beq.n	30de <vSemaphoreInitialise+0x52>
    30c4:	f640 337c 	movw	r3, #2940	; 0xb7c
    30c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30cc:	687a      	ldr	r2, [r7, #4]
    30ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    30d2:	4618      	mov	r0, r3
    30d4:	2100      	movs	r1, #0
    30d6:	2200      	movs	r2, #0
    30d8:	2300      	movs	r3, #0
    30da:	f001 f8f3 	bl	42c4 <xQueueGenericSend>
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    30de:	f640 337c 	movw	r3, #2940	; 0xb7c
    30e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30e6:	687a      	ldr	r2, [r7, #4]
    30e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    30ec:	4618      	mov	r0, r3
    30ee:	2100      	movs	r1, #0
    30f0:	f04f 32ff 	mov.w	r2, #4294967295
    30f4:	2300      	movs	r3, #0
    30f6:	f001 f9ab 	bl	4450 <xQueueGenericReceive>
/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    30fa:	687b      	ldr	r3, [r7, #4]
    30fc:	3301      	adds	r3, #1
    30fe:	607b      	str	r3, [r7, #4]
    3100:	687b      	ldr	r3, [r7, #4]
    3102:	2b22      	cmp	r3, #34	; 0x22
    3104:	ddc8      	ble.n	3098 <vSemaphoreInitialise+0xc>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    }
}
    3106:	3708      	adds	r7, #8
    3108:	46bd      	mov	sp, r7
    310a:	bd80      	pop	{r7, pc}

0000310c <vParameterInitialise>:
/*
 * Set all the parameters of S-Servants.
 *
 * */
void vParameterInitialise()
{
    310c:	b480      	push	{r7}
    310e:	b085      	sub	sp, #20
    3110:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    3112:	2300      	movs	r3, #0
    3114:	60fb      	str	r3, [r7, #12]
    3116:	e073      	b.n	3200 <vParameterInitialise+0xf4>
    {
        pvParameters[i].xMyFlag = i;
    3118:	f240 5378 	movw	r3, #1400	; 0x578
    311c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3120:	68fa      	ldr	r2, [r7, #12]
    3122:	212c      	movs	r1, #44	; 0x2c
    3124:	fb01 f202 	mul.w	r2, r1, r2
    3128:	4413      	add	r3, r2
    312a:	68fa      	ldr	r2, [r7, #12]
    312c:	601a      	str	r2, [r3, #0]
        pvParameters[i].xNumOfIn = 0;
    312e:	f240 5378 	movw	r3, #1400	; 0x578
    3132:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3136:	68fa      	ldr	r2, [r7, #12]
    3138:	212c      	movs	r1, #44	; 0x2c
    313a:	fb01 f202 	mul.w	r2, r1, r2
    313e:	4413      	add	r3, r2
    3140:	3304      	adds	r3, #4
    3142:	2200      	movs	r2, #0
    3144:	601a      	str	r2, [r3, #0]
        pvParameters[i].xNumOfOut = 0;
    3146:	f240 5378 	movw	r3, #1400	; 0x578
    314a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    314e:	68fa      	ldr	r2, [r7, #12]
    3150:	212c      	movs	r1, #44	; 0x2c
    3152:	fb01 f202 	mul.w	r2, r1, r2
    3156:	4413      	add	r3, r2
    3158:	3308      	adds	r3, #8
    315a:	2200      	movs	r2, #0
    315c:	601a      	str	r2, [r3, #0]
        pvParameters[i].xLet = xLetOfServant[i]/portTICK_RATE_MS;
    315e:	f240 0394 	movw	r3, #148	; 0x94
    3162:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3166:	68fa      	ldr	r2, [r7, #12]
    3168:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    316c:	f240 5378 	movw	r3, #1400	; 0x578
    3170:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3174:	68f9      	ldr	r1, [r7, #12]
    3176:	202c      	movs	r0, #44	; 0x2c
    3178:	fb00 f101 	mul.w	r1, r0, r1
    317c:	440b      	add	r3, r1
    317e:	331c      	adds	r3, #28
    3180:	601a      	str	r2, [r3, #0]
        pvParameters[i].xFp = xServantTable[i];
    3182:	f240 3354 	movw	r3, #852	; 0x354
    3186:	f2c2 0300 	movt	r3, #8192	; 0x2000
    318a:	68fa      	ldr	r2, [r7, #12]
    318c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3190:	f240 5378 	movw	r3, #1400	; 0x578
    3194:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3198:	68f9      	ldr	r1, [r7, #12]
    319a:	202c      	movs	r0, #44	; 0x2c
    319c:	fb00 f101 	mul.w	r1, r0, r1
    31a0:	440b      	add	r3, r1
    31a2:	3320      	adds	r3, #32
    31a4:	601a      	str	r2, [r3, #0]
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
    31a6:	f240 1320 	movw	r3, #288	; 0x120
    31aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31ae:	68fa      	ldr	r2, [r7, #12]
    31b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    31b4:	f240 5378 	movw	r3, #1400	; 0x578
    31b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31bc:	68f9      	ldr	r1, [r7, #12]
    31be:	202c      	movs	r0, #44	; 0x2c
    31c0:	fb00 f101 	mul.w	r1, r0, r1
    31c4:	440b      	add	r3, r1
    31c6:	3328      	adds	r3, #40	; 0x28
    31c8:	601a      	str	r2, [r3, #0]
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    31ca:	f240 1320 	movw	r3, #288	; 0x120
    31ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31d2:	68fa      	ldr	r2, [r7, #12]
    31d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    31d8:	f240 032c 	movw	r3, #44	; 0x2c
    31dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    31e4:	f240 5378 	movw	r3, #1400	; 0x578
    31e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31ec:	68f9      	ldr	r1, [r7, #12]
    31ee:	202c      	movs	r0, #44	; 0x2c
    31f0:	fb00 f101 	mul.w	r1, r0, r1
    31f4:	440b      	add	r3, r1
    31f6:	3324      	adds	r3, #36	; 0x24
    31f8:	601a      	str	r2, [r3, #0]
{
    portBASE_TYPE i;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    31fa:	68fb      	ldr	r3, [r7, #12]
    31fc:	3301      	adds	r3, #1
    31fe:	60fb      	str	r3, [r7, #12]
    3200:	68fb      	ldr	r3, [r7, #12]
    3202:	2b22      	cmp	r3, #34	; 0x22
    3204:	dd88      	ble.n	3118 <vParameterInitialise+0xc>
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3206:	2300      	movs	r3, #0
    3208:	60fb      	str	r3, [r7, #12]
    320a:	e080      	b.n	330e <vParameterInitialise+0x202>
    {
        xSource = xRelations.xRelation[i].xInFlag;
    320c:	f240 12ac 	movw	r2, #428	; 0x1ac
    3210:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3214:	68f9      	ldr	r1, [r7, #12]
    3216:	460b      	mov	r3, r1
    3218:	005b      	lsls	r3, r3, #1
    321a:	440b      	add	r3, r1
    321c:	009b      	lsls	r3, r3, #2
    321e:	4413      	add	r3, r2
    3220:	3304      	adds	r3, #4
    3222:	681b      	ldr	r3, [r3, #0]
    3224:	60bb      	str	r3, [r7, #8]
        xDest   = xRelations.xRelation[i].xOutFlag;
    3226:	f240 12ac 	movw	r2, #428	; 0x1ac
    322a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    322e:	68f9      	ldr	r1, [r7, #12]
    3230:	460b      	mov	r3, r1
    3232:	005b      	lsls	r3, r3, #1
    3234:	440b      	add	r3, r1
    3236:	009b      	lsls	r3, r3, #2
    3238:	4413      	add	r3, r2
    323a:	3308      	adds	r3, #8
    323c:	681b      	ldr	r3, [r3, #0]
    323e:	607b      	str	r3, [r7, #4]

        pvParameters[xSource].xOutFlag[pvParameters[xSource].xNumOfOut] = xDest;
    3240:	f240 5378 	movw	r3, #1400	; 0x578
    3244:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3248:	68ba      	ldr	r2, [r7, #8]
    324a:	212c      	movs	r1, #44	; 0x2c
    324c:	fb01 f202 	mul.w	r2, r1, r2
    3250:	4413      	add	r3, r2
    3252:	3308      	adds	r3, #8
    3254:	6818      	ldr	r0, [r3, #0]
    3256:	f240 5278 	movw	r2, #1400	; 0x578
    325a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    325e:	68b9      	ldr	r1, [r7, #8]
    3260:	460b      	mov	r3, r1
    3262:	009b      	lsls	r3, r3, #2
    3264:	440b      	add	r3, r1
    3266:	005b      	lsls	r3, r3, #1
    3268:	440b      	add	r3, r1
    326a:	4403      	add	r3, r0
    326c:	3304      	adds	r3, #4
    326e:	009b      	lsls	r3, r3, #2
    3270:	4413      	add	r3, r2
    3272:	687a      	ldr	r2, [r7, #4]
    3274:	605a      	str	r2, [r3, #4]
        pvParameters[xSource].xNumOfOut ++;
    3276:	f240 5378 	movw	r3, #1400	; 0x578
    327a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    327e:	68ba      	ldr	r2, [r7, #8]
    3280:	212c      	movs	r1, #44	; 0x2c
    3282:	fb01 f202 	mul.w	r2, r1, r2
    3286:	4413      	add	r3, r2
    3288:	3308      	adds	r3, #8
    328a:	681b      	ldr	r3, [r3, #0]
    328c:	1c5a      	adds	r2, r3, #1
    328e:	f240 5378 	movw	r3, #1400	; 0x578
    3292:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3296:	68b9      	ldr	r1, [r7, #8]
    3298:	202c      	movs	r0, #44	; 0x2c
    329a:	fb00 f101 	mul.w	r1, r0, r1
    329e:	440b      	add	r3, r1
    32a0:	3308      	adds	r3, #8
    32a2:	601a      	str	r2, [r3, #0]

        pvParameters[xDest].xInFlag[pvParameters[xDest].xNumOfIn] = xSource;
    32a4:	f240 5378 	movw	r3, #1400	; 0x578
    32a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32ac:	687a      	ldr	r2, [r7, #4]
    32ae:	212c      	movs	r1, #44	; 0x2c
    32b0:	fb01 f202 	mul.w	r2, r1, r2
    32b4:	4413      	add	r3, r2
    32b6:	3304      	adds	r3, #4
    32b8:	6818      	ldr	r0, [r3, #0]
    32ba:	f240 5278 	movw	r2, #1400	; 0x578
    32be:	f2c2 0200 	movt	r2, #8192	; 0x2000
    32c2:	6879      	ldr	r1, [r7, #4]
    32c4:	460b      	mov	r3, r1
    32c6:	009b      	lsls	r3, r3, #2
    32c8:	440b      	add	r3, r1
    32ca:	005b      	lsls	r3, r3, #1
    32cc:	440b      	add	r3, r1
    32ce:	4403      	add	r3, r0
    32d0:	3302      	adds	r3, #2
    32d2:	009b      	lsls	r3, r3, #2
    32d4:	4413      	add	r3, r2
    32d6:	68ba      	ldr	r2, [r7, #8]
    32d8:	605a      	str	r2, [r3, #4]
        pvParameters[xDest].xNumOfIn ++;
    32da:	f240 5378 	movw	r3, #1400	; 0x578
    32de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32e2:	687a      	ldr	r2, [r7, #4]
    32e4:	212c      	movs	r1, #44	; 0x2c
    32e6:	fb01 f202 	mul.w	r2, r1, r2
    32ea:	4413      	add	r3, r2
    32ec:	3304      	adds	r3, #4
    32ee:	681b      	ldr	r3, [r3, #0]
    32f0:	1c5a      	adds	r2, r3, #1
    32f2:	f240 5378 	movw	r3, #1400	; 0x578
    32f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32fa:	6879      	ldr	r1, [r7, #4]
    32fc:	202c      	movs	r0, #44	; 0x2c
    32fe:	fb00 f101 	mul.w	r1, r0, r1
    3302:	440b      	add	r3, r1
    3304:	3304      	adds	r3, #4
    3306:	601a      	str	r2, [r3, #0]
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3308:	68fb      	ldr	r3, [r7, #12]
    330a:	3301      	adds	r3, #1
    330c:	60fb      	str	r3, [r7, #12]
    330e:	f240 13ac 	movw	r3, #428	; 0x1ac
    3312:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3316:	681a      	ldr	r2, [r3, #0]
    3318:	68fb      	ldr	r3, [r7, #12]
    331a:	429a      	cmp	r2, r3
    331c:	f73f af76 	bgt.w	320c <vParameterInitialise+0x100>
        pvParameters[xSource].xNumOfOut ++;

        pvParameters[xDest].xInFlag[pvParameters[xDest].xNumOfIn] = xSource;
        pvParameters[xDest].xNumOfIn ++;
    }
}
    3320:	3714      	adds	r7, #20
    3322:	46bd      	mov	sp, r7
    3324:	f85d 7b04 	ldr.w	r7, [sp], #4
    3328:	4770      	bx	lr
    332a:	bf00      	nop

0000332c <vTaskDelayLET>:

void vTaskDelayLET()
{
    332c:	b580      	push	{r7, lr}
    332e:	b084      	sub	sp, #16
    3330:	af00      	add	r7, sp, #0
    xTaskHandle pxTaskCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    3332:	f002 fb0d 	bl	5950 <xTaskGetCurrentTaskHandle>
    3336:	60b8      	str	r0, [r7, #8]
    portTickType xStartTime = xTaskGetxStartTime( pxTaskCurrentTCBLocal );
    3338:	68b8      	ldr	r0, [r7, #8]
    333a:	f002 fbbf 	bl	5abc <xTaskGetxStartTime>
    333e:	6078      	str	r0, [r7, #4]
    portTickType xOutputTime = xTaskGetxLet( pxTaskCurrentTCBLocal ) + xStartTime;
    3340:	68b8      	ldr	r0, [r7, #8]
    3342:	f002 fbc7 	bl	5ad4 <xTaskGetxLet>
    3346:	4602      	mov	r2, r0
    3348:	687b      	ldr	r3, [r7, #4]
    334a:	4413      	add	r3, r2
    334c:	603b      	str	r3, [r7, #0]
    portTickType xCurrentTime = xTaskGetTickCount();
    334e:	f001 ff33 	bl	51b8 <xTaskGetTickCount>
    3352:	60f8      	str	r0, [r7, #12]

    while( xCurrentTime <  xOutputTime)
    3354:	e002      	b.n	335c <vTaskDelayLET+0x30>
    {
        xCurrentTime = xTaskGetTickCount();
    3356:	f001 ff2f 	bl	51b8 <xTaskGetTickCount>
    335a:	60f8      	str	r0, [r7, #12]
    xTaskHandle pxTaskCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    portTickType xStartTime = xTaskGetxStartTime( pxTaskCurrentTCBLocal );
    portTickType xOutputTime = xTaskGetxLet( pxTaskCurrentTCBLocal ) + xStartTime;
    portTickType xCurrentTime = xTaskGetTickCount();

    while( xCurrentTime <  xOutputTime)
    335c:	68fa      	ldr	r2, [r7, #12]
    335e:	683b      	ldr	r3, [r7, #0]
    3360:	429a      	cmp	r2, r3
    3362:	d3f8      	bcc.n	3356 <vTaskDelayLET+0x2a>
    {
        xCurrentTime = xTaskGetTickCount();
    }
}
    3364:	3710      	adds	r7, #16
    3366:	46bd      	mov	sp, r7
    3368:	bd80      	pop	{r7, pc}
    336a:	bf00      	nop

0000336c <vEventReceiveAll>:

// receive all Events from sources servant, and return them through the point
void vEventReceiveAll( void * pvParameter, xEventHandle *pxEvent )
{
    336c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3370:	b088      	sub	sp, #32
    3372:	af00      	add	r7, sp, #0
    3374:	6078      	str	r0, [r7, #4]
    3376:	6039      	str	r1, [r7, #0]
    3378:	4669      	mov	r1, sp
    337a:	4688      	mov	r8, r1
    portBASE_TYPE i ;

    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;
    337c:	6879      	ldr	r1, [r7, #4]
    337e:	6849      	ldr	r1, [r1, #4]
    3380:	61b9      	str	r1, [r7, #24]
    portBASE_TYPE xInFlag[NUM]; 
    3382:	69be      	ldr	r6, [r7, #24]
    3384:	1e71      	subs	r1, r6, #1
    3386:	6179      	str	r1, [r7, #20]
    3388:	4631      	mov	r1, r6
    338a:	4608      	mov	r0, r1
    338c:	f04f 0100 	mov.w	r1, #0
    3390:	014d      	lsls	r5, r1, #5
    3392:	ea45 65d0 	orr.w	r5, r5, r0, lsr #27
    3396:	0144      	lsls	r4, r0, #5
    3398:	4631      	mov	r1, r6
    339a:	4608      	mov	r0, r1
    339c:	f04f 0100 	mov.w	r1, #0
    33a0:	014b      	lsls	r3, r1, #5
    33a2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    33a6:	0142      	lsls	r2, r0, #5
    33a8:	4633      	mov	r3, r6
    33aa:	009b      	lsls	r3, r3, #2
    33ac:	3303      	adds	r3, #3
    33ae:	3307      	adds	r3, #7
    33b0:	08db      	lsrs	r3, r3, #3
    33b2:	00db      	lsls	r3, r3, #3
    33b4:	ebad 0d03 	sub.w	sp, sp, r3
    33b8:	466b      	mov	r3, sp
    33ba:	3303      	adds	r3, #3
    33bc:	089b      	lsrs	r3, r3, #2
    33be:	009b      	lsls	r3, r3, #2
    33c0:	613b      	str	r3, [r7, #16]
    portBASE_TYPE xMyFlag = ((struct xParam *) pvParameter)->xMyFlag;
    33c2:	687b      	ldr	r3, [r7, #4]
    33c4:	681b      	ldr	r3, [r3, #0]
    33c6:	60fb      	str	r3, [r7, #12]
    portTickType xCurrentTime;
   
    xSemaphoreTake( xBinarySemaphore[xMyFlag],portMAX_DELAY );
    33c8:	f640 337c 	movw	r3, #2940	; 0xb7c
    33cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33d0:	68fa      	ldr	r2, [r7, #12]
    33d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    33d6:	4618      	mov	r0, r3
    33d8:	2100      	movs	r1, #0
    33da:	f04f 32ff 	mov.w	r2, #4294967295
    33de:	2300      	movs	r3, #0
    33e0:	f001 f836 	bl	4450 <xQueueGenericReceive>

    xCurrentTime = xTaskGetTickCount(); 
    33e4:	f001 fee8 	bl	51b8 <xTaskGetTickCount>
    33e8:	60b8      	str	r0, [r7, #8]
    vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    33ea:	f640 4308 	movw	r3, #3080	; 0xc08
    33ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33f2:	68fa      	ldr	r2, [r7, #12]
    33f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    33f8:	4618      	mov	r0, r3
    33fa:	68b9      	ldr	r1, [r7, #8]
    33fc:	f002 fb76 	bl	5aec <vTaskSetxStartTime>

    for( i = 0; i < NUM; i ++ )
    3400:	2300      	movs	r3, #0
    3402:	61fb      	str	r3, [r7, #28]
    3404:	e024      	b.n	3450 <vEventReceiveAll+0xe4>
    {
        // get all the in flag
        xInFlag[i] = ((struct xParam *) pvParameter)->xInFlag[i];
    3406:	687a      	ldr	r2, [r7, #4]
    3408:	69fb      	ldr	r3, [r7, #28]
    340a:	3302      	adds	r3, #2
    340c:	009b      	lsls	r3, r3, #2
    340e:	4413      	add	r3, r2
    3410:	6859      	ldr	r1, [r3, #4]
    3412:	693b      	ldr	r3, [r7, #16]
    3414:	69fa      	ldr	r2, [r7, #28]
    3416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        // receive all events which are created by source servants and return 
        // them back to current Servant through the inout point
        vEventReceive( &pxEvent[i], xTaskOfHandle[xInFlag[i]], pxCurrentReadyList );
    341a:	69fb      	ldr	r3, [r7, #28]
    341c:	009b      	lsls	r3, r3, #2
    341e:	683a      	ldr	r2, [r7, #0]
    3420:	18d1      	adds	r1, r2, r3
    3422:	693b      	ldr	r3, [r7, #16]
    3424:	69fa      	ldr	r2, [r7, #28]
    3426:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    342a:	f640 4308 	movw	r3, #3080	; 0xc08
    342e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3432:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3436:	f240 5374 	movw	r3, #1396	; 0x574
    343a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    343e:	681b      	ldr	r3, [r3, #0]
    3440:	4608      	mov	r0, r1
    3442:	4611      	mov	r1, r2
    3444:	461a      	mov	r2, r3
    3446:	f7ff fda7 	bl	2f98 <vEventGenericReceive>
    xSemaphoreTake( xBinarySemaphore[xMyFlag],portMAX_DELAY );

    xCurrentTime = xTaskGetTickCount(); 
    vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );

    for( i = 0; i < NUM; i ++ )
    344a:	69fb      	ldr	r3, [r7, #28]
    344c:	3301      	adds	r3, #1
    344e:	61fb      	str	r3, [r7, #28]
    3450:	69fa      	ldr	r2, [r7, #28]
    3452:	69bb      	ldr	r3, [r7, #24]
    3454:	429a      	cmp	r2, r3
    3456:	dbd6      	blt.n	3406 <vEventReceiveAll+0x9a>
    3458:	46c5      	mov	sp, r8
        xInFlag[i] = ((struct xParam *) pvParameter)->xInFlag[i];
        // receive all events which are created by source servants and return 
        // them back to current Servant through the inout point
        vEventReceive( &pxEvent[i], xTaskOfHandle[xInFlag[i]], pxCurrentReadyList );
    }
}
    345a:	3720      	adds	r7, #32
    345c:	46bd      	mov	sp, r7
    345e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3462:	bf00      	nop

00003464 <vEventDeleteAll>:

void vEventDeleteAll( void * pvParameter, xEventHandle * pxEvent )
{
    3464:	b580      	push	{r7, lr}
    3466:	b084      	sub	sp, #16
    3468:	af00      	add	r7, sp, #0
    346a:	6078      	str	r0, [r7, #4]
    346c:	6039      	str	r1, [r7, #0]
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;
    346e:	687b      	ldr	r3, [r7, #4]
    3470:	685b      	ldr	r3, [r3, #4]
    3472:	60bb      	str	r3, [r7, #8]

    for( i = 0; i < NUM; ++i )
    3474:	2300      	movs	r3, #0
    3476:	60fb      	str	r3, [r7, #12]
    3478:	e00a      	b.n	3490 <vEventDeleteAll+0x2c>
    {
        vEventDelete( pxEvent[i] );
    347a:	68fb      	ldr	r3, [r7, #12]
    347c:	009b      	lsls	r3, r3, #2
    347e:	683a      	ldr	r2, [r7, #0]
    3480:	4413      	add	r3, r2
    3482:	681b      	ldr	r3, [r3, #0]
    3484:	4618      	mov	r0, r3
    3486:	f7ff fde9 	bl	305c <vEventGenericDelete>
void vEventDeleteAll( void * pvParameter, xEventHandle * pxEvent )
{
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;

    for( i = 0; i < NUM; ++i )
    348a:	68fb      	ldr	r3, [r7, #12]
    348c:	3301      	adds	r3, #1
    348e:	60fb      	str	r3, [r7, #12]
    3490:	68fa      	ldr	r2, [r7, #12]
    3492:	68bb      	ldr	r3, [r7, #8]
    3494:	429a      	cmp	r2, r3
    3496:	dbf0      	blt.n	347a <vEventDeleteAll+0x16>
    {
        vEventDelete( pxEvent[i] );
    }
}
    3498:	3710      	adds	r7, #16
    349a:	46bd      	mov	sp, r7
    349c:	bd80      	pop	{r7, pc}
    349e:	bf00      	nop

000034a0 <vEventCreateAll>:


void vEventCreateAll( void * pvParameter, struct eventData *xDatas )
{
    34a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    34a4:	b08a      	sub	sp, #40	; 0x28
    34a6:	af02      	add	r7, sp, #8
    34a8:	6078      	str	r0, [r7, #4]
    34aa:	6039      	str	r1, [r7, #0]
    34ac:	4669      	mov	r1, sp
    34ae:	4688      	mov	r8, r1
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfOut;
    34b0:	6879      	ldr	r1, [r7, #4]
    34b2:	6889      	ldr	r1, [r1, #8]
    34b4:	61b9      	str	r1, [r7, #24]
    portBASE_TYPE xMyFlag = ((struct xParam *)pvParameter)->xMyFlag;
    34b6:	6879      	ldr	r1, [r7, #4]
    34b8:	6809      	ldr	r1, [r1, #0]
    34ba:	6179      	str	r1, [r7, #20]
    portTickType xPeriod = ((struct xParam *) pvParameter)->xPeriod;
    34bc:	6879      	ldr	r1, [r7, #4]
    34be:	6a49      	ldr	r1, [r1, #36]	; 0x24
    34c0:	6139      	str	r1, [r7, #16]
    portBASE_TYPE xFlags[NUM];
    34c2:	69be      	ldr	r6, [r7, #24]
    34c4:	1e71      	subs	r1, r6, #1
    34c6:	60f9      	str	r1, [r7, #12]
    34c8:	4631      	mov	r1, r6
    34ca:	4608      	mov	r0, r1
    34cc:	f04f 0100 	mov.w	r1, #0
    34d0:	014d      	lsls	r5, r1, #5
    34d2:	ea45 65d0 	orr.w	r5, r5, r0, lsr #27
    34d6:	0144      	lsls	r4, r0, #5
    34d8:	4631      	mov	r1, r6
    34da:	4608      	mov	r0, r1
    34dc:	f04f 0100 	mov.w	r1, #0
    34e0:	014b      	lsls	r3, r1, #5
    34e2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    34e6:	0142      	lsls	r2, r0, #5
    34e8:	4633      	mov	r3, r6
    34ea:	009b      	lsls	r3, r3, #2
    34ec:	3303      	adds	r3, #3
    34ee:	3307      	adds	r3, #7
    34f0:	08db      	lsrs	r3, r3, #3
    34f2:	00db      	lsls	r3, r3, #3
    34f4:	ebad 0d03 	sub.w	sp, sp, r3
    34f8:	ab02      	add	r3, sp, #8
    34fa:	3303      	adds	r3, #3
    34fc:	089b      	lsrs	r3, r3, #2
    34fe:	009b      	lsls	r3, r3, #2
    3500:	60bb      	str	r3, [r7, #8]

    for( i = 0; i < NUM; i ++ )
    3502:	2300      	movs	r3, #0
    3504:	61fb      	str	r3, [r7, #28]
    3506:	e033      	b.n	3570 <vEventCreateAll+0xd0>
    {
        // get all flags of destination servants
        xFlags[i] = ((struct xParam *) pvParameter)->xOutFlag[i]; 
    3508:	687a      	ldr	r2, [r7, #4]
    350a:	69fb      	ldr	r3, [r7, #28]
    350c:	3304      	adds	r3, #4
    350e:	009b      	lsls	r3, r3, #2
    3510:	4413      	add	r3, r2
    3512:	6859      	ldr	r1, [r3, #4]
    3514:	68bb      	ldr	r3, [r7, #8]
    3516:	69fa      	ldr	r2, [r7, #28]
    3518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        // if current servant is the last one of task, then the event will be proceeded at the deadline
        if( xFlags[i] <= xMyFlag )
    351c:	68bb      	ldr	r3, [r7, #8]
    351e:	69fa      	ldr	r2, [r7, #28]
    3520:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3524:	697b      	ldr	r3, [r7, #20]
    3526:	429a      	cmp	r2, r3
    3528:	dc06      	bgt.n	3538 <vEventCreateAll+0x98>
        {
            xDatas[i].IS_LAST_SERVANT = 1;
    352a:	69fb      	ldr	r3, [r7, #28]
    352c:	011b      	lsls	r3, r3, #4
    352e:	683a      	ldr	r2, [r7, #0]
    3530:	4413      	add	r3, r2
    3532:	2201      	movs	r2, #1
    3534:	609a      	str	r2, [r3, #8]
    3536:	e005      	b.n	3544 <vEventCreateAll+0xa4>
        }
        else
        {
            xDatas[i].IS_LAST_SERVANT = 0;
    3538:	69fb      	ldr	r3, [r7, #28]
    353a:	011b      	lsls	r3, r3, #4
    353c:	683a      	ldr	r2, [r7, #0]
    353e:	4413      	add	r3, r2
    3540:	2200      	movs	r2, #0
    3542:	609a      	str	r2, [r3, #8]
        }
        // create events which would be sent to destination servants.
        vEventCreate(xTaskOfHandle[xFlags[i]], xDatas[i]) ;
    3544:	68bb      	ldr	r3, [r7, #8]
    3546:	69fa      	ldr	r2, [r7, #28]
    3548:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    354c:	f640 4308 	movw	r3, #3080	; 0xc08
    3550:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3554:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    3558:	69fb      	ldr	r3, [r7, #28]
    355a:	011b      	lsls	r3, r3, #4
    355c:	683a      	ldr	r2, [r7, #0]
    355e:	4413      	add	r3, r2
    3560:	68da      	ldr	r2, [r3, #12]
    3562:	9200      	str	r2, [sp, #0]
    3564:	cb0e      	ldmia	r3, {r1, r2, r3}
    3566:	f7ff fc35 	bl	2dd4 <vEventGenericCreate>
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfOut;
    portBASE_TYPE xMyFlag = ((struct xParam *)pvParameter)->xMyFlag;
    portTickType xPeriod = ((struct xParam *) pvParameter)->xPeriod;
    portBASE_TYPE xFlags[NUM];

    for( i = 0; i < NUM; i ++ )
    356a:	69fb      	ldr	r3, [r7, #28]
    356c:	3301      	adds	r3, #1
    356e:	61fb      	str	r3, [r7, #28]
    3570:	69fa      	ldr	r2, [r7, #28]
    3572:	69bb      	ldr	r3, [r7, #24]
    3574:	429a      	cmp	r2, r3
    3576:	dbc7      	blt.n	3508 <vEventCreateAll+0x68>
    3578:	46c5      	mov	sp, r8
            xDatas[i].IS_LAST_SERVANT = 0;
        }
        // create events which would be sent to destination servants.
        vEventCreate(xTaskOfHandle[xFlags[i]], xDatas[i]) ;
    }
}
    357a:	3720      	adds	r7, #32
    357c:	46bd      	mov	sp, r7
    357e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3582:	bf00      	nop

00003584 <vSensor>:
*
* @param pvParameter is parameter from programmer.
*
* */
void vSensor( void * pvParameter )
{
    3584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3588:	b095      	sub	sp, #84	; 0x54
    358a:	af00      	add	r7, sp, #0
    358c:	60f8      	str	r0, [r7, #12]
    358e:	466b      	mov	r3, sp
    3590:	461e      	mov	r6, r3
    portTickType xCurrentTime;

    portBASE_TYPE i;
    portBASE_TYPE IS_FIRST_TIME_TO_EXE = 1;
    3592:	2301      	movs	r3, #1
    3594:	647b      	str	r3, [r7, #68]	; 0x44

    /* store the paramter into stack of servant */
    void * pvMyParameter = pvParameter;
    3596:	68fb      	ldr	r3, [r7, #12]
    3598:	63bb      	str	r3, [r7, #56]	; 0x38

    portBASE_TYPE NUM = ((struct xParam *) pvMyParameter)->xNumOfOut;
    359a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    359c:	689b      	ldr	r3, [r3, #8]
    359e:	637b      	str	r3, [r7, #52]	; 0x34
    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    35a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    35a2:	681b      	ldr	r3, [r3, #0]
    35a4:	633b      	str	r3, [r7, #48]	; 0x30
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    35a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    35a8:	69db      	ldr	r3, [r3, #28]
    35aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    portTickType xPeriod = ((struct xParam *) pvMyParameter)->xPeriod;
    35ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    35ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    35b0:	62bb      	str	r3, [r7, #40]	; 0x28
    pvServantFunType xMyFun = ((struct xParam *) pvMyParameter)->xFp;
    35b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    35b4:	6a1b      	ldr	r3, [r3, #32]
    35b6:	627b      	str	r3, [r7, #36]	; 0x24

    portBASE_TYPE xCount = 1;
    35b8:	2301      	movs	r3, #1
    35ba:	643b      	str	r3, [r7, #64]	; 0x40
    portTickType deadline = xCount * xPeriod;
    35bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    35be:	6aba      	ldr	r2, [r7, #40]	; 0x28
    35c0:	fb02 f303 	mul.w	r3, r2, r3
    35c4:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* set the LET of Servant when it is created */
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    35c6:	f640 4308 	movw	r3, #3080	; 0xc08
    35ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    35d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    35d4:	4618      	mov	r0, r3
    35d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    35d8:	f002 fa96 	bl	5b08 <vTaskSetxLet>
    
    /* receive the events created by the last servant of this task. */
    xEventHandle pxEvent[NUM];
    35dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
    35de:	1e4b      	subs	r3, r1, #1
    35e0:	623b      	str	r3, [r7, #32]
    35e2:	460b      	mov	r3, r1
    35e4:	461a      	mov	r2, r3
    35e6:	f04f 0300 	mov.w	r3, #0
    35ea:	0158      	lsls	r0, r3, #5
    35ec:	6078      	str	r0, [r7, #4]
    35ee:	6878      	ldr	r0, [r7, #4]
    35f0:	ea40 60d2 	orr.w	r0, r0, r2, lsr #27
    35f4:	6078      	str	r0, [r7, #4]
    35f6:	0150      	lsls	r0, r2, #5
    35f8:	460b      	mov	r3, r1
    35fa:	461a      	mov	r2, r3
    35fc:	f04f 0300 	mov.w	r3, #0
    3600:	ea4f 1b43 	mov.w	fp, r3, lsl #5
    3604:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
    3608:	ea4f 1a42 	mov.w	sl, r2, lsl #5
    360c:	460b      	mov	r3, r1
    360e:	009b      	lsls	r3, r3, #2
    3610:	3303      	adds	r3, #3
    3612:	3307      	adds	r3, #7
    3614:	08db      	lsrs	r3, r3, #3
    3616:	00db      	lsls	r3, r3, #3
    3618:	ebad 0d03 	sub.w	sp, sp, r3
    361c:	466b      	mov	r3, sp
    361e:	3303      	adds	r3, #3
    3620:	089b      	lsrs	r3, r3, #2
    3622:	009b      	lsls	r3, r3, #2
    3624:	61fb      	str	r3, [r7, #28]
    
    /* create data for destination servants and initialise them */
    struct eventData xDatas[NUM];
    3626:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3628:	1e4b      	subs	r3, r1, #1
    362a:	61bb      	str	r3, [r7, #24]
    362c:	460b      	mov	r3, r1
    362e:	461a      	mov	r2, r3
    3630:	f04f 0300 	mov.w	r3, #0
    3634:	ea4f 19c3 	mov.w	r9, r3, lsl #7
    3638:	ea49 6952 	orr.w	r9, r9, r2, lsr #25
    363c:	ea4f 18c2 	mov.w	r8, r2, lsl #7
    3640:	460b      	mov	r3, r1
    3642:	461a      	mov	r2, r3
    3644:	f04f 0300 	mov.w	r3, #0
    3648:	01dd      	lsls	r5, r3, #7
    364a:	ea45 6552 	orr.w	r5, r5, r2, lsr #25
    364e:	01d4      	lsls	r4, r2, #7
    3650:	460b      	mov	r3, r1
    3652:	011b      	lsls	r3, r3, #4
    3654:	3303      	adds	r3, #3
    3656:	3307      	adds	r3, #7
    3658:	08db      	lsrs	r3, r3, #3
    365a:	00db      	lsls	r3, r3, #3
    365c:	ebad 0d03 	sub.w	sp, sp, r3
    3660:	466b      	mov	r3, sp
    3662:	3303      	adds	r3, #3
    3664:	089b      	lsrs	r3, r3, #2
    3666:	009b      	lsls	r3, r3, #2
    3668:	617b      	str	r3, [r7, #20]

    while(1)
    {

        if( IS_FIRST_TIME_TO_EXE == 1 )
    366a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    366c:	2b01      	cmp	r3, #1
    366e:	d127      	bne.n	36c0 <vSensor+0x13c>
        {
            /* Waiting for the start time of task period */
            xSemaphoreTake(xBinarySemaphore[xMyFlag], portMAX_DELAY);
    3670:	f640 337c 	movw	r3, #2940	; 0xb7c
    3674:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    367a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    367e:	4618      	mov	r0, r3
    3680:	2100      	movs	r1, #0
    3682:	f04f 32ff 	mov.w	r2, #4294967295
    3686:	2300      	movs	r3, #0
    3688:	f000 fee2 	bl	4450 <xQueueGenericReceive>
#ifdef SENSOR_PRINT
            vPrintNumber( xMyFlag );
    368c:	6b38      	ldr	r0, [r7, #48]	; 0x30
    368e:	f013 fe6b 	bl	17368 <vPrintNumber>
            vPrintNumber( deadline ); // ready time  of task 
    3692:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    3694:	f013 fe68 	bl	17368 <vPrintNumber>
#endif 
            xCurrentTime = xTaskGetTickCount();
    3698:	f001 fd8e 	bl	51b8 <xTaskGetTickCount>
    369c:	64f8      	str	r0, [r7, #76]	; 0x4c
#ifdef SENSOR_PRINT
            vPrintNumber( xCurrentTime ); // start time of task
    369e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    36a0:	f013 fe62 	bl	17368 <vPrintNumber>
#endif
            vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    36a4:	f640 4308 	movw	r3, #3080	; 0xc08
    36a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    36ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    36b2:	4618      	mov	r0, r3
    36b4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    36b6:	f002 fa19 	bl	5aec <vTaskSetxStartTime>

            IS_FIRST_TIME_TO_EXE = 0;
    36ba:	2300      	movs	r3, #0
    36bc:	647b      	str	r3, [r7, #68]	; 0x44
    36be:	e027      	b.n	3710 <vSensor+0x18c>
        {
            /* When system started, the first servant of every task is triggered to
             * execute by the init events created by tick hook. After that, the first
             * servant of every task is triggered by the last servant of corresponding task.
            * */
            vEventReceiveAll( pvMyParameter, pxEvent );
    36c0:	69fb      	ldr	r3, [r7, #28]
    36c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    36c4:	4619      	mov	r1, r3
    36c6:	f7ff fe51 	bl	336c <vEventReceiveAll>

#ifdef SENSOR_PRINT
            vPrintNumber( xMyFlag );
    36ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
    36cc:	f013 fe4c 	bl	17368 <vPrintNumber>
            vPrintNumber( deadline ); // ready time of task 
    36d0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    36d2:	f013 fe49 	bl	17368 <vPrintNumber>
#endif 
            xCurrentTime = xTaskGetTickCount();
    36d6:	f001 fd6f 	bl	51b8 <xTaskGetTickCount>
    36da:	64f8      	str	r0, [r7, #76]	; 0x4c
#ifdef SENSOR_PRINT
            vPrintNumber( xCurrentTime ); // start time of task 
    36dc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    36de:	f013 fe43 	bl	17368 <vPrintNumber>
#endif
            vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    36e2:	f640 4308 	movw	r3, #3080	; 0xc08
    36e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    36ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    36f0:	4618      	mov	r0, r3
    36f2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    36f4:	f002 f9fa 	bl	5aec <vTaskSetxStartTime>

            // do actuator and sensor
#ifdef SENSOR_FUN
            xMyFun( NULL, 0, xDatas, NUM);
    36f8:	697b      	ldr	r3, [r7, #20]
    36fa:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    36fc:	2000      	movs	r0, #0
    36fe:	2100      	movs	r1, #0
    3700:	461a      	mov	r2, r3
    3702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3704:	47a0      	blx	r4
#endif
            vEventDeleteAll(pvMyParameter, pxEvent);
    3706:	69fb      	ldr	r3, [r7, #28]
    3708:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    370a:	4619      	mov	r1, r3
    370c:	f7ff feaa 	bl	3464 <vEventDeleteAll>
        }

        // deadline is the start time of next period
        xCount ++;
    3710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3712:	3301      	adds	r3, #1
    3714:	643b      	str	r3, [r7, #64]	; 0x40
        deadline = xCount * xPeriod; 
    3716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3718:	6aba      	ldr	r2, [r7, #40]	; 0x28
    371a:	fb02 f303 	mul.w	r3, r2, r3
    371e:	63fb      	str	r3, [r7, #60]	; 0x3c

        for( i = 0; i < NUM; i ++ )
    3720:	2300      	movs	r3, #0
    3722:	64bb      	str	r3, [r7, #72]	; 0x48
    3724:	e011      	b.n	374a <vSensor+0x1c6>
        {
            xDatas[i].xNextPeriod = deadline;
    3726:	697a      	ldr	r2, [r7, #20]
    3728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    372a:	011b      	lsls	r3, r3, #4
    372c:	4413      	add	r3, r2
    372e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3730:	601a      	str	r2, [r3, #0]
            xDatas[i].xTime = xCurrentTime + xLet;
    3732:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3736:	441a      	add	r2, r3
    3738:	6979      	ldr	r1, [r7, #20]
    373a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    373c:	011b      	lsls	r3, r3, #4
    373e:	440b      	add	r3, r1
    3740:	3304      	adds	r3, #4
    3742:	601a      	str	r2, [r3, #0]

        // deadline is the start time of next period
        xCount ++;
        deadline = xCount * xPeriod; 

        for( i = 0; i < NUM; i ++ )
    3744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3746:	3301      	adds	r3, #1
    3748:	64bb      	str	r3, [r7, #72]	; 0x48
    374a:	6cba      	ldr	r2, [r7, #72]	; 0x48
    374c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    374e:	429a      	cmp	r2, r3
    3750:	dbe9      	blt.n	3726 <vSensor+0x1a2>
            xDatas[i].xNextPeriod = deadline;
            xDatas[i].xTime = xCurrentTime + xLet;
            //xDatas[i].xTime = deadline -xPeriod + xLet;
        }
        // set the future model time
        xFutureModelTime = deadline - xPeriod + xLet;
    3752:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3754:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3756:	1ad2      	subs	r2, r2, r3
    3758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    375a:	4413      	add	r3, r2
    375c:	461a      	mov	r2, r3
    375e:	f240 5370 	movw	r3, #1392	; 0x570
    3762:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3766:	601a      	str	r2, [r3, #0]

        // create events for all destination servants of this servant. 
        vEventCreateAll( pvMyParameter, xDatas );
    3768:	697b      	ldr	r3, [r7, #20]
    376a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    376c:	4619      	mov	r1, r3
    376e:	f7ff fe97 	bl	34a0 <vEventCreateAll>

#ifdef SENSOR_LET
        vTaskDelayLET();
#endif
        
        if( xCurrentTime > xDatas[0].xNextPeriod )
    3772:	697b      	ldr	r3, [r7, #20]
    3774:	681a      	ldr	r2, [r3, #0]
    3776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3778:	429a      	cmp	r2, r3
    377a:	d20a      	bcs.n	3792 <vSensor+0x20e>
        {
            vPrintNumber(xDatas[0].xNextPeriod);
    377c:	697b      	ldr	r3, [r7, #20]
    377e:	681b      	ldr	r3, [r3, #0]
    3780:	4618      	mov	r0, r3
    3782:	f013 fdf1 	bl	17368 <vPrintNumber>
            vPrintString("there are sensor missing deadline\n\r");
    3786:	f648 1018 	movw	r0, #35096	; 0x8918
    378a:	f2c0 0001 	movt	r0, #1
    378e:	f013 fdd1 	bl	17334 <vPrintString>
        }

#ifdef SENSOR_PRINT

        xCurrentTime = xTaskGetTickCount();
    3792:	f001 fd11 	bl	51b8 <xTaskGetTickCount>
    3796:	64f8      	str	r0, [r7, #76]	; 0x4c
        vPrintNumber( xCurrentTime );  // finish time of sensor
    3798:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    379a:	f013 fde5 	bl	17368 <vPrintNumber>
        vPrintNumber( deadline );   // deadline of task
    379e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    37a0:	f013 fde2 	bl	17368 <vPrintNumber>
        vPrintNumber( ( xMyFlag + 10 ) * 3 );
    37a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    37a6:	f103 020a 	add.w	r2, r3, #10
    37aa:	4613      	mov	r3, r2
    37ac:	005b      	lsls	r3, r3, #1
    37ae:	4413      	add	r3, r2
    37b0:	4618      	mov	r0, r3
    37b2:	f013 fdd9 	bl	17368 <vPrintNumber>
#endif

        xCurrentTime = xTaskGetTickCount();
    37b6:	f001 fcff 	bl	51b8 <xTaskGetTickCount>
    37ba:	64f8      	str	r0, [r7, #76]	; 0x4c
        if( xCurrentTime > 1000000 )
    37bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    37be:	f244 2340 	movw	r3, #16960	; 0x4240
    37c2:	f2c0 030f 	movt	r3, #15
    37c6:	429a      	cmp	r2, r3
    37c8:	d900      	bls.n	37cc <vSensor+0x248>
        {
            break;
    37ca:	e00c      	b.n	37e6 <vSensor+0x262>
        }
        // triggered R-Servant to execute 
        xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT-1] );
    37cc:	f640 337c 	movw	r3, #2940	; 0xb7c
    37d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    37d8:	4618      	mov	r0, r3
    37da:	2100      	movs	r1, #0
    37dc:	2200      	movs	r2, #0
    37de:	2300      	movs	r3, #0
    37e0:	f000 fd70 	bl	42c4 <xQueueGenericSend>
    }
    37e4:	e741      	b.n	366a <vSensor+0xe6>
    37e6:	46b5      	mov	sp, r6
}
    37e8:	3754      	adds	r7, #84	; 0x54
    37ea:	46bd      	mov	sp, r7
    37ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000037f0 <vServant>:
*  @param pvParameter is parameter from programmer
*
* */

void vServant( void * pvParameter )
{
    37f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    37f4:	b097      	sub	sp, #92	; 0x5c
    37f6:	af00      	add	r7, sp, #0
    37f8:	61f8      	str	r0, [r7, #28]
    37fa:	4669      	mov	r1, sp
    37fc:	6079      	str	r1, [r7, #4]
    portBASE_TYPE i;
    void * pvMyParameter = pvParameter;
    37fe:	69f9      	ldr	r1, [r7, #28]
    3800:	6539      	str	r1, [r7, #80]	; 0x50
    portTickType xCurrentTime;
    
    portBASE_TYPE xNumOfIn = ((struct xParam *) pvMyParameter)->xNumOfIn;
    3802:	6d39      	ldr	r1, [r7, #80]	; 0x50
    3804:	6849      	ldr	r1, [r1, #4]
    3806:	64f9      	str	r1, [r7, #76]	; 0x4c
    portBASE_TYPE xNumOfOut = ((struct xParam *) pvMyParameter)->xNumOfOut;
    3808:	6d39      	ldr	r1, [r7, #80]	; 0x50
    380a:	6889      	ldr	r1, [r1, #8]
    380c:	64b9      	str	r1, [r7, #72]	; 0x48
    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    380e:	6d39      	ldr	r1, [r7, #80]	; 0x50
    3810:	6809      	ldr	r1, [r1, #0]
    3812:	6479      	str	r1, [r7, #68]	; 0x44
    portTickType xPeriod = ((struct xParam *) pvMyParameter)->xPeriod;
    3814:	6d39      	ldr	r1, [r7, #80]	; 0x50
    3816:	6a49      	ldr	r1, [r1, #36]	; 0x24
    3818:	6439      	str	r1, [r7, #64]	; 0x40
    pvServantFunType xMyFun = ((struct xParam *) pvMyParameter)->xFp;
    381a:	6d39      	ldr	r1, [r7, #80]	; 0x50
    381c:	6a09      	ldr	r1, [r1, #32]
    381e:	63f9      	str	r1, [r7, #60]	; 0x3c

    xEventHandle pxEvent[xNumOfIn];
    3820:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
    3822:	1e71      	subs	r1, r6, #1
    3824:	63b9      	str	r1, [r7, #56]	; 0x38
    3826:	4631      	mov	r1, r6
    3828:	4608      	mov	r0, r1
    382a:	f04f 0100 	mov.w	r1, #0
    382e:	ea4f 1b41 	mov.w	fp, r1, lsl #5
    3832:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
    3836:	ea4f 1a40 	mov.w	sl, r0, lsl #5
    383a:	4631      	mov	r1, r6
    383c:	4608      	mov	r0, r1
    383e:	f04f 0100 	mov.w	r1, #0
    3842:	ea4f 1941 	mov.w	r9, r1, lsl #5
    3846:	ea49 69d0 	orr.w	r9, r9, r0, lsr #27
    384a:	ea4f 1840 	mov.w	r8, r0, lsl #5
    384e:	4631      	mov	r1, r6
    3850:	0089      	lsls	r1, r1, #2
    3852:	3103      	adds	r1, #3
    3854:	3107      	adds	r1, #7
    3856:	08c9      	lsrs	r1, r1, #3
    3858:	00c9      	lsls	r1, r1, #3
    385a:	ebad 0d01 	sub.w	sp, sp, r1
    385e:	4669      	mov	r1, sp
    3860:	3103      	adds	r1, #3
    3862:	0889      	lsrs	r1, r1, #2
    3864:	0089      	lsls	r1, r1, #2
    3866:	6379      	str	r1, [r7, #52]	; 0x34
    struct eventData xDatas[xNumOfOut];
    3868:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    386a:	1e71      	subs	r1, r6, #1
    386c:	6339      	str	r1, [r7, #48]	; 0x30
    386e:	4631      	mov	r1, r6
    3870:	4608      	mov	r0, r1
    3872:	f04f 0100 	mov.w	r1, #0
    3876:	01cd      	lsls	r5, r1, #7
    3878:	ea45 6550 	orr.w	r5, r5, r0, lsr #25
    387c:	01c4      	lsls	r4, r0, #7
    387e:	4631      	mov	r1, r6
    3880:	4608      	mov	r0, r1
    3882:	f04f 0100 	mov.w	r1, #0
    3886:	01cb      	lsls	r3, r1, #7
    3888:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
    388c:	01c2      	lsls	r2, r0, #7
    388e:	4633      	mov	r3, r6
    3890:	011b      	lsls	r3, r3, #4
    3892:	3303      	adds	r3, #3
    3894:	3307      	adds	r3, #7
    3896:	08db      	lsrs	r3, r3, #3
    3898:	00db      	lsls	r3, r3, #3
    389a:	ebad 0d03 	sub.w	sp, sp, r3
    389e:	466b      	mov	r3, sp
    38a0:	3303      	adds	r3, #3
    38a2:	089b      	lsrs	r3, r3, #2
    38a4:	009b      	lsls	r3, r3, #2
    38a6:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* get the LET of current servant */
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    38a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    38aa:	69db      	ldr	r3, [r3, #28]
    38ac:	62bb      	str	r3, [r7, #40]	; 0x28
    /* set the LET of current servant */
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    38ae:	f640 4308 	movw	r3, #3080	; 0xc08
    38b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    38b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    38bc:	4618      	mov	r0, r3
    38be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    38c0:	f002 f922 	bl	5b08 <vTaskSetxLet>

    while(1)
    {
        vEventReceiveAll( pvMyParameter, pxEvent );
    38c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    38c6:	6d38      	ldr	r0, [r7, #80]	; 0x50
    38c8:	4619      	mov	r1, r3
    38ca:	f7ff fd4f 	bl	336c <vEventReceiveAll>

#ifdef SERVANT_PRINT
        vPrintNumber(xMyFlag);
    38ce:	6c78      	ldr	r0, [r7, #68]	; 0x44
    38d0:	f013 fd4a 	bl	17368 <vPrintNumber>
#endif
        xCurrentTime = xTaskGetTickCountFromISR();
    38d4:	f001 fc82 	bl	51dc <xTaskGetTickCountFromISR>
    38d8:	6278      	str	r0, [r7, #36]	; 0x24
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    38da:	f640 4308 	movw	r3, #3080	; 0xc08
    38de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    38e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    38e8:	4618      	mov	r0, r3
    38ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
    38ec:	f002 f8fe 	bl	5aec <vTaskSetxStartTime>

        /* Here are coding for processing data of events */
        for( i = 0; i < xNumOfOut; i ++ )
    38f0:	2300      	movs	r3, #0
    38f2:	657b      	str	r3, [r7, #84]	; 0x54
    38f4:	e01e      	b.n	3934 <vServant+0x144>
        {
            xDatas[i] = xEventGetxData(pxEvent[i]);
    38f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    38f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    38fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    38fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3900:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3902:	0112      	lsls	r2, r2, #4
    3904:	188c      	adds	r4, r1, r2
    3906:	f107 0208 	add.w	r2, r7, #8
    390a:	4610      	mov	r0, r2
    390c:	4619      	mov	r1, r3
    390e:	f7ff f943 	bl	2b98 <xEventGetxData>
    3912:	f107 0308 	add.w	r3, r7, #8
    3916:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3918:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            xDatas[i].xTime = xCurrentTime + xLet;
    391c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    391e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3920:	441a      	add	r2, r3
    3922:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3926:	011b      	lsls	r3, r3, #4
    3928:	440b      	add	r3, r1
    392a:	3304      	adds	r3, #4
    392c:	601a      	str	r2, [r3, #0]
#endif
        xCurrentTime = xTaskGetTickCountFromISR();
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );

        /* Here are coding for processing data of events */
        for( i = 0; i < xNumOfOut; i ++ )
    392e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3930:	3301      	adds	r3, #1
    3932:	657b      	str	r3, [r7, #84]	; 0x54
    3934:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3938:	429a      	cmp	r2, r3
    393a:	dbdc      	blt.n	38f6 <vServant+0x106>
            //xDatas[i].xTime = xFutureModelTime + xLet;
            //xFutureModelTime = xDatas[i].xTime;
        }

#ifdef SERVANT_PRINT
        vPrintNumber( xDatas[0].xNextPeriod - xPeriod ); // ready time of task
    393c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    393e:	681a      	ldr	r2, [r3, #0]
    3940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3942:	1ad3      	subs	r3, r2, r3
    3944:	4618      	mov	r0, r3
    3946:	f013 fd0f 	bl	17368 <vPrintNumber>
        vPrintNumber( xCurrentTime );   // start time of current servant
    394a:	6a78      	ldr	r0, [r7, #36]	; 0x24
    394c:	f013 fd0c 	bl	17368 <vPrintNumber>
#endif

#ifdef SERVANT_FUN
        for( i = 0; i < xFunctionTimes; ++ i )
    3950:	2300      	movs	r3, #0
    3952:	657b      	str	r3, [r7, #84]	; 0x54
    3954:	e00a      	b.n	396c <vServant+0x17c>
        {
            xMyFun(pxEvent, xNumOfIn, xDatas, xNumOfOut);
    3956:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    395a:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
    395c:	4610      	mov	r0, r2
    395e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    3960:	461a      	mov	r2, r3
    3962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3964:	47a0      	blx	r4
        vPrintNumber( xDatas[0].xNextPeriod - xPeriod ); // ready time of task
        vPrintNumber( xCurrentTime );   // start time of current servant
#endif

#ifdef SERVANT_FUN
        for( i = 0; i < xFunctionTimes; ++ i )
    3966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3968:	3301      	adds	r3, #1
    396a:	657b      	str	r3, [r7, #84]	; 0x54
    396c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    396e:	2b63      	cmp	r3, #99	; 0x63
    3970:	ddf1      	ble.n	3956 <vServant+0x166>
        {
            xMyFun(pxEvent, xNumOfIn, xDatas, xNumOfOut);
        }
#endif

        vEventDeleteAll( pvMyParameter, pxEvent );        
    3972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3974:	6d38      	ldr	r0, [r7, #80]	; 0x50
    3976:	4619      	mov	r1, r3
    3978:	f7ff fd74 	bl	3464 <vEventDeleteAll>

        vEventCreateAll( pvMyParameter, xDatas );
    397c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    397e:	6d38      	ldr	r0, [r7, #80]	; 0x50
    3980:	4619      	mov	r1, r3
    3982:	f7ff fd8d 	bl	34a0 <vEventCreateAll>

        if( xCurrentTime > xDatas[0].xNextPeriod )
    3986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3988:	681a      	ldr	r2, [r3, #0]
    398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    398c:	429a      	cmp	r2, r3
    398e:	d20a      	bcs.n	39a6 <vServant+0x1b6>
        {
            vPrintNumber(xDatas[0].xNextPeriod);
    3990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3992:	681b      	ldr	r3, [r3, #0]
    3994:	4618      	mov	r0, r3
    3996:	f013 fce7 	bl	17368 <vPrintNumber>
            vPrintString("there are servants missing deadline\n\r");
    399a:	f648 103c 	movw	r0, #35132	; 0x893c
    399e:	f2c0 0001 	movt	r0, #1
    39a2:	f013 fcc7 	bl	17334 <vPrintString>
        }
#ifdef SERVANT_LET
        vTaskDelayLET();
    39a6:	f7ff fcc1 	bl	332c <vTaskDelayLET>
#endif

#ifdef SERVANT_PRINT
        xCurrentTime = xTaskGetTickCount();
    39aa:	f001 fc05 	bl	51b8 <xTaskGetTickCount>
    39ae:	6278      	str	r0, [r7, #36]	; 0x24
        vPrintNumber( xCurrentTime );   // finish time of current servant
    39b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
    39b2:	f013 fcd9 	bl	17368 <vPrintNumber>
        vPrintNumber( xDatas[0].xNextPeriod ); // deadline of task
    39b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    39b8:	681b      	ldr	r3, [r3, #0]
    39ba:	4618      	mov	r0, r3
    39bc:	f013 fcd4 	bl	17368 <vPrintNumber>
        vPrintNumber( (xMyFlag + 10) * 3 );
    39c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    39c2:	f103 020a 	add.w	r2, r3, #10
    39c6:	4613      	mov	r3, r2
    39c8:	005b      	lsls	r3, r3, #1
    39ca:	4413      	add	r3, r2
    39cc:	4618      	mov	r0, r3
    39ce:	f013 fccb 	bl	17368 <vPrintNumber>
#endif

        xCurrentTime = xTaskGetTickCount();
    39d2:	f001 fbf1 	bl	51b8 <xTaskGetTickCount>
    39d6:	6278      	str	r0, [r7, #36]	; 0x24
        if( xCurrentTime > 1000000 )
    39d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    39da:	f244 2340 	movw	r3, #16960	; 0x4240
    39de:	f2c0 030f 	movt	r3, #15
    39e2:	429a      	cmp	r2, r3
    39e4:	d900      	bls.n	39e8 <vServant+0x1f8>
        {
            break;
    39e6:	e00c      	b.n	3a02 <vServant+0x212>
        }

        // triggered R-Servant to execute 
        xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT-1] );
    39e8:	f640 337c 	movw	r3, #2940	; 0xb7c
    39ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    39f4:	4618      	mov	r0, r3
    39f6:	2100      	movs	r1, #0
    39f8:	2200      	movs	r2, #0
    39fa:	2300      	movs	r3, #0
    39fc:	f000 fc62 	bl	42c4 <xQueueGenericSend>
    }
    3a00:	e760      	b.n	38c4 <vServant+0xd4>
    3a02:	687b      	ldr	r3, [r7, #4]
    3a04:	469d      	mov	sp, r3
}
    3a06:	375c      	adds	r7, #92	; 0x5c
    3a08:	46bd      	mov	sp, r7
    3a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3a0e:	bf00      	nop

00003a10 <vR_Servant>:

void vR_Servant( void * pvParameter)
{
    3a10:	b580      	push	{r7, lr}
    3a12:	b090      	sub	sp, #64	; 0x40
    3a14:	af00      	add	r7, sp, #0
    3a16:	6078      	str	r0, [r7, #4]
    portBASE_TYPE xSource, xDest;
    portBASE_TYPE HAVE_TO_SEND_SEMAPHORE; // could the semaphore be sent? 1 means yes , 0 means no
    portBASE_TYPE xResult;

    portTickType xCurrentTime;
    void * pvMyParameter = pvParameter;
    3a18:	687b      	ldr	r3, [r7, #4]
    3a1a:	62bb      	str	r3, [r7, #40]	; 0x28

    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    3a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3a1e:	681b      	ldr	r3, [r3, #0]
    3a20:	627b      	str	r3, [r7, #36]	; 0x24
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    3a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3a24:	69db      	ldr	r3, [r3, #28]
    3a26:	623b      	str	r3, [r7, #32]
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    3a28:	f640 4308 	movw	r3, #3080	; 0xc08
    3a2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3a36:	4618      	mov	r0, r3
    3a38:	6a39      	ldr	r1, [r7, #32]
    3a3a:	f002 f865 	bl	5b08 <vTaskSetxLet>
    xTaskHandle destinationTCB, sourceTCB;

    while(1)
    {
        // waiting for events created by tick hook or S-Servant
        xSemaphoreTake( xBinarySemaphore[xMyFlag], portMAX_DELAY );
    3a3e:	f640 337c 	movw	r3, #2940	; 0xb7c
    3a42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3a4c:	4618      	mov	r0, r3
    3a4e:	2100      	movs	r1, #0
    3a50:	f04f 32ff 	mov.w	r2, #4294967295
    3a54:	2300      	movs	r3, #0
    3a56:	f000 fcfb 	bl	4450 <xQueueGenericReceive>
#ifdef RSERVANT_PRINT
        vPrintNumber( xMyFlag );
#endif
        
        xCurrentTime = xTaskGetTickCount();
    3a5a:	f001 fbad 	bl	51b8 <xTaskGetTickCount>
    3a5e:	61f8      	str	r0, [r7, #28]
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    3a60:	f640 4308 	movw	r3, #3080	; 0xc08
    3a64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3a6e:	4618      	mov	r0, r3
    3a70:	69f9      	ldr	r1, [r7, #28]
    3a72:	f002 f83b 	bl	5aec <vTaskSetxStartTime>
#ifdef RSERVANT_PRINT
        vPrintNumber( xCurrentTime );
#endif

        // init to zero
        HAVE_TO_SEND_SEMAPHORE = 0;
    3a76:	2300      	movs	r3, #0
    3a78:	637b      	str	r3, [r7, #52]	; 0x34

        // to see whether there is a servant need to be triggered.
        // This process could be preempted by Sensor servant.
        while(! HAVE_TO_SEND_SEMAPHORE)
    3a7a:	e094      	b.n	3ba6 <vR_Servant+0x196>
            /*
             * transit the event item, whose timestamp bigger or equal to current Tick Count, 
             * from xEventList to the idlest xEvestReadyList
             *
             * */
            xResult = xEventListTransit( &pxEventListItem, &pxCurrentReadyList);
    3a7c:	f107 030c 	add.w	r3, r7, #12
    3a80:	4618      	mov	r0, r3
    3a82:	f240 5174 	movw	r1, #1396	; 0x574
    3a86:	f2c2 0100 	movt	r1, #8192	; 0x2000
    3a8a:	f7ff fa01 	bl	2e90 <xEventListGenericTransit>
    3a8e:	6338      	str	r0, [r7, #48]	; 0x30
            if( xResult == -1 )
    3a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3a92:	f1b3 3fff 	cmp.w	r3, #4294967295
    3a96:	d100      	bne.n	3a9a <vR_Servant+0x8a>
            {
                // no event
                break;
    3a98:	e089      	b.n	3bae <vR_Servant+0x19e>
            }
            else if( xResult == 0 )
    3a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3a9c:	2b00      	cmp	r3, #0
    3a9e:	d100      	bne.n	3aa2 <vR_Servant+0x92>
            {
                // not time yet
                //break;
                continue;
    3aa0:	e081      	b.n	3ba6 <vR_Servant+0x196>
            else
            {
                // transmit success
            }

            destinationTCB = xEventGetpxDestination( pxEventListItem->pvOwner);
    3aa2:	68fb      	ldr	r3, [r7, #12]
    3aa4:	68db      	ldr	r3, [r3, #12]
    3aa6:	4618      	mov	r0, r3
    3aa8:	f7ff f858 	bl	2b5c <xEventGetpxDestination>
    3aac:	62f8      	str	r0, [r7, #44]	; 0x2c
            sourceTCB = xEventGetpxSource( pxEventListItem->pvOwner );
    3aae:	68fb      	ldr	r3, [r7, #12]
    3ab0:	68db      	ldr	r3, [r3, #12]
    3ab2:	4618      	mov	r0, r3
    3ab4:	f7ff f846 	bl	2b44 <xEventGetpxSource>
    3ab8:	61b8      	str	r0, [r7, #24]
            HAVE_TO_SEND_SEMAPHORE = 1;  // set default 1
    3aba:	2301      	movs	r3, #1
    3abc:	637b      	str	r3, [r7, #52]	; 0x34

            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3abe:	2300      	movs	r3, #0
    3ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
    3ac2:	e068      	b.n	3b96 <vR_Servant+0x186>
            {
                xSource = xRelations.xRelation[i].xInFlag;
    3ac4:	f240 12ac 	movw	r2, #428	; 0x1ac
    3ac8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3acc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3ace:	460b      	mov	r3, r1
    3ad0:	005b      	lsls	r3, r3, #1
    3ad2:	440b      	add	r3, r1
    3ad4:	009b      	lsls	r3, r3, #2
    3ad6:	4413      	add	r3, r2
    3ad8:	3304      	adds	r3, #4
    3ada:	681b      	ldr	r3, [r3, #0]
    3adc:	617b      	str	r3, [r7, #20]
                xDest   = xRelations.xRelation[i].xOutFlag;
    3ade:	f240 12ac 	movw	r2, #428	; 0x1ac
    3ae2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3ae6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3ae8:	460b      	mov	r3, r1
    3aea:	005b      	lsls	r3, r3, #1
    3aec:	440b      	add	r3, r1
    3aee:	009b      	lsls	r3, r3, #2
    3af0:	4413      	add	r3, r2
    3af2:	3308      	adds	r3, #8
    3af4:	681b      	ldr	r3, [r3, #0]
    3af6:	613b      	str	r3, [r7, #16]

                if( destinationTCB == xTaskOfHandle[xDest] )
    3af8:	f640 4308 	movw	r3, #3080	; 0xc08
    3afc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b00:	693a      	ldr	r2, [r7, #16]
    3b02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3b08:	429a      	cmp	r2, r3
    3b0a:	d141      	bne.n	3b90 <vR_Servant+0x180>
                {
                    // find the right relation
                    if( sourceTCB == xTaskOfHandle[xSource] )
    3b0c:	f640 4308 	movw	r3, #3080	; 0xc08
    3b10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b14:	697a      	ldr	r2, [r7, #20]
    3b16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3b1a:	69bb      	ldr	r3, [r7, #24]
    3b1c:	429a      	cmp	r2, r3
    3b1e:	d127      	bne.n	3b70 <vR_Servant+0x160>
                    {
                        if( xRelations.xRelation[i].xFlag == 2 )
    3b20:	f240 12ac 	movw	r2, #428	; 0x1ac
    3b24:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3b2a:	460b      	mov	r3, r1
    3b2c:	005b      	lsls	r3, r3, #1
    3b2e:	440b      	add	r3, r1
    3b30:	009b      	lsls	r3, r3, #2
    3b32:	4413      	add	r3, r2
    3b34:	330c      	adds	r3, #12
    3b36:	681b      	ldr	r3, [r3, #0]
    3b38:	2b02      	cmp	r3, #2
    3b3a:	d10b      	bne.n	3b54 <vR_Servant+0x144>
                        {
                            vPrintString("Error: This event has arrived!!\n\r") ;
    3b3c:	f648 1064 	movw	r0, #35172	; 0x8964
    3b40:	f2c0 0001 	movt	r0, #1
    3b44:	f013 fbf6 	bl	17334 <vPrintString>
                            vEventDelete( (xEventHandle) pxEventListItem->pvOwner );
    3b48:	68fb      	ldr	r3, [r7, #12]
    3b4a:	68db      	ldr	r3, [r3, #12]
    3b4c:	4618      	mov	r0, r3
    3b4e:	f7ff fa85 	bl	305c <vEventGenericDelete>
    3b52:	e01d      	b.n	3b90 <vR_Servant+0x180>
                        }
                        else
                        {
                            // set the relation to 2
                            xRelations.xRelation[i].xFlag = 2;
    3b54:	f240 12ac 	movw	r2, #428	; 0x1ac
    3b58:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3b5e:	460b      	mov	r3, r1
    3b60:	005b      	lsls	r3, r3, #1
    3b62:	440b      	add	r3, r1
    3b64:	009b      	lsls	r3, r3, #2
    3b66:	4413      	add	r3, r2
    3b68:	330c      	adds	r3, #12
    3b6a:	2202      	movs	r2, #2
    3b6c:	601a      	str	r2, [r3, #0]
    3b6e:	e00f      	b.n	3b90 <vR_Servant+0x180>
                    }
                    // find other relation which is relative to destinationtcb
                    else
                    {
                        // waiting for an events that is not arriving yet
                        if( xRelations.xRelation[i].xFlag == 1 )
    3b70:	f240 12ac 	movw	r2, #428	; 0x1ac
    3b74:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3b7a:	460b      	mov	r3, r1
    3b7c:	005b      	lsls	r3, r3, #1
    3b7e:	440b      	add	r3, r1
    3b80:	009b      	lsls	r3, r3, #2
    3b82:	4413      	add	r3, r2
    3b84:	330c      	adds	r3, #12
    3b86:	681b      	ldr	r3, [r3, #0]
    3b88:	2b01      	cmp	r3, #1
    3b8a:	d101      	bne.n	3b90 <vR_Servant+0x180>
                        {
                            HAVE_TO_SEND_SEMAPHORE = 0;
    3b8c:	2300      	movs	r3, #0
    3b8e:	637b      	str	r3, [r7, #52]	; 0x34

            destinationTCB = xEventGetpxDestination( pxEventListItem->pvOwner);
            sourceTCB = xEventGetpxSource( pxEventListItem->pvOwner );
            HAVE_TO_SEND_SEMAPHORE = 1;  // set default 1

            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3b92:	3301      	adds	r3, #1
    3b94:	63fb      	str	r3, [r7, #60]	; 0x3c
    3b96:	f240 13ac 	movw	r3, #428	; 0x1ac
    3b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b9e:	681a      	ldr	r2, [r3, #0]
    3ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3ba2:	429a      	cmp	r2, r3
    3ba4:	dc8e      	bgt.n	3ac4 <vR_Servant+0xb4>
        // init to zero
        HAVE_TO_SEND_SEMAPHORE = 0;

        // to see whether there is a servant need to be triggered.
        // This process could be preempted by Sensor servant.
        while(! HAVE_TO_SEND_SEMAPHORE)
    3ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3ba8:	2b00      	cmp	r3, #0
    3baa:	f43f af67 	beq.w	3a7c <vR_Servant+0x6c>
                }
            }
        } //  end inner while(1)

        // not time yet, R-Servant should be sleep until next period of any task
        if( xResult == -1 )
    3bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
    3bb4:	d100      	bne.n	3bb8 <vR_Servant+0x1a8>
#ifdef RSERVANT_PRINT
            xCurrentTime = xTaskGetTickCount();
            vPrintNumber( xCurrentTime );
            vPrintNumber( (xMyFlag + 10) * 3 );
#endif
            continue; 
    3bb6:	e045      	b.n	3c44 <vR_Servant+0x234>
        }
        else if ( xResult == 0 )
    3bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3bba:	2b00      	cmp	r3, #0
    3bbc:	d100      	bne.n	3bc0 <vR_Servant+0x1b0>
#ifdef RSERVANT_PRINT
            xCurrentTime = xTaskGetTickCount();
            vPrintNumber( xCurrentTime );
            vPrintNumber( (xMyFlag + 10) * 3 );
#endif
            continue;
    3bbe:	e041      	b.n	3c44 <vR_Servant+0x234>
        }
        else
        {
            // set all the relations whose destination S-Servant is xTaskOfHandle[i] to 1.
            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3bc0:	2300      	movs	r3, #0
    3bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
    3bc4:	e028      	b.n	3c18 <vR_Servant+0x208>
            {
                xDest = xRelations.xRelation[i].xOutFlag;
    3bc6:	f240 12ac 	movw	r2, #428	; 0x1ac
    3bca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3bce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3bd0:	460b      	mov	r3, r1
    3bd2:	005b      	lsls	r3, r3, #1
    3bd4:	440b      	add	r3, r1
    3bd6:	009b      	lsls	r3, r3, #2
    3bd8:	4413      	add	r3, r2
    3bda:	3308      	adds	r3, #8
    3bdc:	681b      	ldr	r3, [r3, #0]
    3bde:	613b      	str	r3, [r7, #16]
                if( destinationTCB == xTaskOfHandle[xDest] )
    3be0:	f640 4308 	movw	r3, #3080	; 0xc08
    3be4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3be8:	693a      	ldr	r2, [r7, #16]
    3bea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3bf0:	429a      	cmp	r2, r3
    3bf2:	d10e      	bne.n	3c12 <vR_Servant+0x202>
                {
                    xRelations.xRelation[i].xFlag = 1;
    3bf4:	f240 12ac 	movw	r2, #428	; 0x1ac
    3bf8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3bfc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3bfe:	460b      	mov	r3, r1
    3c00:	005b      	lsls	r3, r3, #1
    3c02:	440b      	add	r3, r1
    3c04:	009b      	lsls	r3, r3, #2
    3c06:	4413      	add	r3, r2
    3c08:	330c      	adds	r3, #12
    3c0a:	2201      	movs	r2, #1
    3c0c:	601a      	str	r2, [r3, #0]
                    // record the number of destinationtcb in xTaskOfHandle array.
                    j = xDest;
    3c0e:	693b      	ldr	r3, [r7, #16]
    3c10:	63bb      	str	r3, [r7, #56]	; 0x38
            continue;
        }
        else
        {
            // set all the relations whose destination S-Servant is xTaskOfHandle[i] to 1.
            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3c14:	3301      	adds	r3, #1
    3c16:	63fb      	str	r3, [r7, #60]	; 0x3c
    3c18:	f240 13ac 	movw	r3, #428	; 0x1ac
    3c1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c20:	681a      	ldr	r2, [r3, #0]
    3c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3c24:	429a      	cmp	r2, r3
    3c26:	dcce      	bgt.n	3bc6 <vR_Servant+0x1b6>
            xCurrentTime = xTaskGetTickCount();
            vPrintNumber( xCurrentTime );
            vPrintNumber( (xMyFlag + 10) * 3 );
#endif
            // send semaphore to destinationtcb
            xSemaphoreGive( xBinarySemaphore[j] );
    3c28:	f640 337c 	movw	r3, #2940	; 0xb7c
    3c2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c30:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3c36:	4618      	mov	r0, r3
    3c38:	2100      	movs	r1, #0
    3c3a:	2200      	movs	r2, #0
    3c3c:	2300      	movs	r3, #0
    3c3e:	f000 fb41 	bl	42c4 <xQueueGenericSend>
        }
    }
    3c42:	e6fc      	b.n	3a3e <vR_Servant+0x2e>
    3c44:	e6fb      	b.n	3a3e <vR_Servant+0x2e>
    3c46:	bf00      	nop

00003c48 <s_0>:
#define SUNNYBEIKE 1
#ifdef SUNNYBEIKE

/*task0, servant 0, 1, 2*/
void s_0(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c48:	b480      	push	{r7}
    3c4a:	b085      	sub	sp, #20
    3c4c:	af00      	add	r7, sp, #0
    3c4e:	60f8      	str	r0, [r7, #12]
    3c50:	60b9      	str	r1, [r7, #8]
    3c52:	607a      	str	r2, [r7, #4]
    3c54:	603b      	str	r3, [r7, #0]
    // do actuator
    // do sensor
}
    3c56:	3714      	adds	r7, #20
    3c58:	46bd      	mov	sp, r7
    3c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c5e:	4770      	bx	lr

00003c60 <s_1>:
void s_1(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c60:	b580      	push	{r7, lr}
    3c62:	b084      	sub	sp, #16
    3c64:	af00      	add	r7, sp, #0
    3c66:	60f8      	str	r0, [r7, #12]
    3c68:	60b9      	str	r1, [r7, #8]
    3c6a:	607a      	str	r2, [r7, #4]
    3c6c:	603b      	str	r3, [r7, #0]
    last_radio_from_ppm(); // ppm.h
    3c6e:	f012 f99f 	bl	15fb0 <last_radio_from_ppm>
}
    3c72:	3710      	adds	r7, #16
    3c74:	46bd      	mov	sp, r7
    3c76:	bd80      	pop	{r7, pc}

00003c78 <s_2>:
void s_2(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c78:	b480      	push	{r7}
    3c7a:	b085      	sub	sp, #20
    3c7c:	af00      	add	r7, sp, #0
    3c7e:	60f8      	str	r0, [r7, #12]
    3c80:	60b9      	str	r1, [r7, #8]
    3c82:	607a      	str	r2, [r7, #4]
    3c84:	603b      	str	r3, [r7, #0]
    //servo_set();  // servo.h, this function is used by multitask which in terms of multiuse of Servant. And this
                    // is not implemented now. So cancel.
}
    3c86:	3714      	adds	r7, #20
    3c88:	46bd      	mov	sp, r7
    3c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c8e:	4770      	bx	lr

00003c90 <s_3>:

/*task1, servant 3, 4, 5*/

void s_3(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c90:	b480      	push	{r7}
    3c92:	b085      	sub	sp, #20
    3c94:	af00      	add	r7, sp, #0
    3c96:	60f8      	str	r0, [r7, #12]
    3c98:	60b9      	str	r1, [r7, #8]
    3c9a:	607a      	str	r2, [r7, #4]
    3c9c:	603b      	str	r3, [r7, #0]
}
    3c9e:	3714      	adds	r7, #20
    3ca0:	46bd      	mov	sp, r7
    3ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ca6:	4770      	bx	lr

00003ca8 <s_4>:
void s_4(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3ca8:	b580      	push	{r7, lr}
    3caa:	b084      	sub	sp, #16
    3cac:	af00      	add	r7, sp, #0
    3cae:	60f8      	str	r0, [r7, #12]
    3cb0:	60b9      	str	r1, [r7, #8]
    3cb2:	607a      	str	r2, [r7, #4]
    3cb4:	603b      	str	r3, [r7, #0]
    to_autopilot_from_last_radio(); // main.c
    3cb6:	f012 fd35 	bl	16724 <to_autopilot_from_last_radio>
}
    3cba:	3710      	adds	r7, #16
    3cbc:	46bd      	mov	sp, r7
    3cbe:	bd80      	pop	{r7, pc}

00003cc0 <s_5>:
void s_5(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3cc0:	b580      	push	{r7, lr}
    3cc2:	b084      	sub	sp, #16
    3cc4:	af00      	add	r7, sp, #0
    3cc6:	60f8      	str	r0, [r7, #12]
    3cc8:	60b9      	str	r1, [r7, #8]
    3cca:	607a      	str	r2, [r7, #4]
    3ccc:	603b      	str	r3, [r7, #0]
    spi_reset(); // spi_fbw.h
    3cce:	f012 fc67 	bl	165a0 <spi_reset>
}
    3cd2:	3710      	adds	r7, #16
    3cd4:	46bd      	mov	sp, r7
    3cd6:	bd80      	pop	{r7, pc}

00003cd8 <s_6>:

/*task 2, servant 6, 7*/
void s_6(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3cd8:	b480      	push	{r7}
    3cda:	b085      	sub	sp, #20
    3cdc:	af00      	add	r7, sp, #0
    3cde:	60f8      	str	r0, [r7, #12]
    3ce0:	60b9      	str	r1, [r7, #8]
    3ce2:	607a      	str	r2, [r7, #4]
    3ce4:	603b      	str	r3, [r7, #0]
}
    3ce6:	3714      	adds	r7, #20
    3ce8:	46bd      	mov	sp, r7
    3cea:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cee:	4770      	bx	lr

00003cf0 <s_7>:
void s_7(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3cf0:	b580      	push	{r7, lr}
    3cf2:	b084      	sub	sp, #16
    3cf4:	af00      	add	r7, sp, #0
    3cf6:	60f8      	str	r0, [r7, #12]
    3cf8:	60b9      	str	r1, [r7, #8]
    3cfa:	607a      	str	r2, [r7, #4]
    3cfc:	603b      	str	r3, [r7, #0]
    check_mega128_values_task(); // main.c
    3cfe:	f012 fe59 	bl	169b4 <check_mega128_values_task>
}
    3d02:	3710      	adds	r7, #16
    3d04:	46bd      	mov	sp, r7
    3d06:	bd80      	pop	{r7, pc}

00003d08 <s_8>:

/*task 3, servant 8, 9*/ 
void s_8(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d08:	b480      	push	{r7}
    3d0a:	b085      	sub	sp, #20
    3d0c:	af00      	add	r7, sp, #0
    3d0e:	60f8      	str	r0, [r7, #12]
    3d10:	60b9      	str	r1, [r7, #8]
    3d12:	607a      	str	r2, [r7, #4]
    3d14:	603b      	str	r3, [r7, #0]
}
    3d16:	3714      	adds	r7, #20
    3d18:	46bd      	mov	sp, r7
    3d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d1e:	4770      	bx	lr

00003d20 <s_9>:
void s_9(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d20:	b580      	push	{r7, lr}
    3d22:	b084      	sub	sp, #16
    3d24:	af00      	add	r7, sp, #0
    3d26:	60f8      	str	r0, [r7, #12]
    3d28:	60b9      	str	r1, [r7, #8]
    3d2a:	607a      	str	r2, [r7, #4]
    3d2c:	603b      	str	r3, [r7, #0]
    servo_transmit(); //servo.h
    3d2e:	f012 ff19 	bl	16b64 <servo_transmit>
}
    3d32:	3710      	adds	r7, #16
    3d34:	46bd      	mov	sp, r7
    3d36:	bd80      	pop	{r7, pc}

00003d38 <s_10>:

/*task 4, servant 10, 11*/
void s_10(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d38:	b480      	push	{r7}
    3d3a:	b085      	sub	sp, #20
    3d3c:	af00      	add	r7, sp, #0
    3d3e:	60f8      	str	r0, [r7, #12]
    3d40:	60b9      	str	r1, [r7, #8]
    3d42:	607a      	str	r2, [r7, #4]
    3d44:	603b      	str	r3, [r7, #0]
}
    3d46:	3714      	adds	r7, #20
    3d48:	46bd      	mov	sp, r7
    3d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d4e:	4770      	bx	lr

00003d50 <s_11>:
void s_11(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d50:	b580      	push	{r7, lr}
    3d52:	b084      	sub	sp, #16
    3d54:	af00      	add	r7, sp, #0
    3d56:	60f8      	str	r0, [r7, #12]
    3d58:	60b9      	str	r1, [r7, #8]
    3d5a:	607a      	str	r2, [r7, #4]
    3d5c:	603b      	str	r3, [r7, #0]
    check_failsafe_task(); // main.c
    3d5e:	f012 fe1f 	bl	169a0 <check_failsafe_task>
}
    3d62:	3710      	adds	r7, #16
    3d64:	46bd      	mov	sp, r7
    3d66:	bd80      	pop	{r7, pc}

00003d68 <s_12>:

/*task 5, servant 12, 13, 14*/
void s_12(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d68:	b480      	push	{r7}
    3d6a:	b085      	sub	sp, #20
    3d6c:	af00      	add	r7, sp, #0
    3d6e:	60f8      	str	r0, [r7, #12]
    3d70:	60b9      	str	r1, [r7, #8]
    3d72:	607a      	str	r2, [r7, #4]
    3d74:	603b      	str	r3, [r7, #0]
}
    3d76:	3714      	adds	r7, #20
    3d78:	46bd      	mov	sp, r7
    3d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d7e:	4770      	bx	lr

00003d80 <s_13>:
void s_13(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d80:	b580      	push	{r7, lr}
    3d82:	b084      	sub	sp, #16
    3d84:	af00      	add	r7, sp, #0
    3d86:	60f8      	str	r0, [r7, #12]
    3d88:	60b9      	str	r1, [r7, #8]
    3d8a:	607a      	str	r2, [r7, #4]
    3d8c:	603b      	str	r3, [r7, #0]
     //inflight_calib(pdTRUE); // inflight_calib.h
     //inflight_calib(pdTRUE); // main_auto.c , we transfer this function into main.c because of bugs if not 
     radio_control_task();
    3d8e:	f009 f8a1 	bl	ced4 <radio_control_task>
}
    3d92:	3710      	adds	r7, #16
    3d94:	46bd      	mov	sp, r7
    3d96:	bd80      	pop	{r7, pc}

00003d98 <s_14>:
void s_14(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d98:	b580      	push	{r7, lr}
    3d9a:	b084      	sub	sp, #16
    3d9c:	af00      	add	r7, sp, #0
    3d9e:	60f8      	str	r0, [r7, #12]
    3da0:	60b9      	str	r1, [r7, #8]
    3da2:	607a      	str	r2, [r7, #4]
    3da4:	603b      	str	r3, [r7, #0]
    ir_gain_calib(); //infrared.h
    3da6:	f00d ff47 	bl	11c38 <ir_gain_calib>
}
    3daa:	3710      	adds	r7, #16
    3dac:	46bd      	mov	sp, r7
    3dae:	bd80      	pop	{r7, pc}

00003db0 <s_15>:

/*task 6, servant 15,16,17,18*/ 
void s_15(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData)
{
    3db0:	b480      	push	{r7}
    3db2:	b085      	sub	sp, #20
    3db4:	af00      	add	r7, sp, #0
    3db6:	60f8      	str	r0, [r7, #12]
    3db8:	60b9      	str	r1, [r7, #8]
    3dba:	607a      	str	r2, [r7, #4]
    3dbc:	603b      	str	r3, [r7, #0]
}
    3dbe:	3714      	adds	r7, #20
    3dc0:	46bd      	mov	sp, r7
    3dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dc6:	4770      	bx	lr

00003dc8 <s_16>:
void s_16(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData)
{
    3dc8:	b580      	push	{r7, lr}
    3dca:	b084      	sub	sp, #16
    3dcc:	af00      	add	r7, sp, #0
    3dce:	60f8      	str	r0, [r7, #12]
    3dd0:	60b9      	str	r1, [r7, #8]
    3dd2:	607a      	str	r2, [r7, #4]
    3dd4:	603b      	str	r3, [r7, #0]
    ir_update(); // infrared.h
    3dd6:	f00d fef1 	bl	11bbc <ir_update>
}
    3dda:	3710      	adds	r7, #16
    3ddc:	46bd      	mov	sp, r7
    3dde:	bd80      	pop	{r7, pc}

00003de0 <s_17>:
void s_17(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3de0:	b580      	push	{r7, lr}
    3de2:	b084      	sub	sp, #16
    3de4:	af00      	add	r7, sp, #0
    3de6:	60f8      	str	r0, [r7, #12]
    3de8:	60b9      	str	r1, [r7, #8]
    3dea:	607a      	str	r2, [r7, #4]
    3dec:	603b      	str	r3, [r7, #0]
    //servo_transmit();  // servo.h
    estimator_update_state_infrared(); //estimator.h
    3dee:	f011 f96d 	bl	150cc <estimator_update_state_infrared>
}
    3df2:	3710      	adds	r7, #16
    3df4:	46bd      	mov	sp, r7
    3df6:	bd80      	pop	{r7, pc}

00003df8 <s_18>:
void s_18(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3df8:	b580      	push	{r7, lr}
    3dfa:	b084      	sub	sp, #16
    3dfc:	af00      	add	r7, sp, #0
    3dfe:	60f8      	str	r0, [r7, #12]
    3e00:	60b9      	str	r1, [r7, #8]
    3e02:	607a      	str	r2, [r7, #4]
    3e04:	603b      	str	r3, [r7, #0]
    roll_pitch_pid_run(); // pid.h
    3e06:	f00d ff47 	bl	11c98 <roll_pitch_pid_run>
}
    3e0a:	3710      	adds	r7, #16
    3e0c:	46bd      	mov	sp, r7
    3e0e:	bd80      	pop	{r7, pc}

00003e10 <s_19>:

/*task 7, servant 19, 20*/
void s_19(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3e10:	b480      	push	{r7}
    3e12:	b085      	sub	sp, #20
    3e14:	af00      	add	r7, sp, #0
    3e16:	60f8      	str	r0, [r7, #12]
    3e18:	60b9      	str	r1, [r7, #8]
    3e1a:	607a      	str	r2, [r7, #4]
    3e1c:	603b      	str	r3, [r7, #0]
}
    3e1e:	3714      	adds	r7, #20
    3e20:	46bd      	mov	sp, r7
    3e22:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e26:	4770      	bx	lr

00003e28 <s_20>:
void s_20(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3e28:	b580      	push	{r7, lr}
    3e2a:	b084      	sub	sp, #16
    3e2c:	af00      	add	r7, sp, #0
    3e2e:	60f8      	str	r0, [r7, #12]
    3e30:	60b9      	str	r1, [r7, #8]
    3e32:	607a      	str	r2, [r7, #4]
    3e34:	603b      	str	r3, [r7, #0]
    link_fbw_send(); //link_fbw.h
    3e36:	f00d f933 	bl	110a0 <link_fbw_send>
}
    3e3a:	3710      	adds	r7, #16
    3e3c:	46bd      	mov	sp, r7
    3e3e:	bd80      	pop	{r7, pc}

00003e40 <s_21>:

/*task 8, sevrvant 21,22,23*/
void s_21(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3e40:	b480      	push	{r7}
    3e42:	b085      	sub	sp, #20
    3e44:	af00      	add	r7, sp, #0
    3e46:	60f8      	str	r0, [r7, #12]
    3e48:	60b9      	str	r1, [r7, #8]
    3e4a:	607a      	str	r2, [r7, #4]
    3e4c:	603b      	str	r3, [r7, #0]
}
    3e4e:	3714      	adds	r7, #20
    3e50:	46bd      	mov	sp, r7
    3e52:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e56:	4770      	bx	lr

00003e58 <s_22>:
void s_22(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3e58:	b580      	push	{r7, lr}
    3e5a:	b084      	sub	sp, #16
    3e5c:	af00      	add	r7, sp, #0
    3e5e:	60f8      	str	r0, [r7, #12]
    3e60:	60b9      	str	r1, [r7, #8]
    3e62:	607a      	str	r2, [r7, #4]
    3e64:	603b      	str	r3, [r7, #0]
    parse_gps_msg(); //gps.h
    3e66:	f00d fbf3 	bl	11650 <parse_gps_msg>
}
    3e6a:	3710      	adds	r7, #16
    3e6c:	46bd      	mov	sp, r7
    3e6e:	bd80      	pop	{r7, pc}

00003e70 <s_23>:
void s_23(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3e70:	b580      	push	{r7, lr}
    3e72:	b084      	sub	sp, #16
    3e74:	af00      	add	r7, sp, #0
    3e76:	60f8      	str	r0, [r7, #12]
    3e78:	60b9      	str	r1, [r7, #8]
    3e7a:	607a      	str	r2, [r7, #4]
    3e7c:	603b      	str	r3, [r7, #0]
    //use_gps_pos(); // autopilot.h  is not implemeted.
    send_gps_pos();
    3e7e:	f00a fe0f 	bl	eaa0 <send_gps_pos>
    send_radIR();
    3e82:	f00b ffd3 	bl	fe2c <send_radIR>
    send_takeOff();
    3e86:	f00c fdcb 	bl	10a20 <send_takeOff>
}
    3e8a:	3710      	adds	r7, #16
    3e8c:	46bd      	mov	sp, r7
    3e8e:	bd80      	pop	{r7, pc}

00003e90 <s_24>:

/*task 9, servant 24, 25, 26, 27*/
void s_24(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3e90:	b480      	push	{r7}
    3e92:	b085      	sub	sp, #20
    3e94:	af00      	add	r7, sp, #0
    3e96:	60f8      	str	r0, [r7, #12]
    3e98:	60b9      	str	r1, [r7, #8]
    3e9a:	607a      	str	r2, [r7, #4]
    3e9c:	603b      	str	r3, [r7, #0]
}
    3e9e:	3714      	adds	r7, #20
    3ea0:	46bd      	mov	sp, r7
    3ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ea6:	4770      	bx	lr

00003ea8 <s_25>:
void s_25(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3ea8:	b580      	push	{r7, lr}
    3eaa:	b084      	sub	sp, #16
    3eac:	af00      	add	r7, sp, #0
    3eae:	60f8      	str	r0, [r7, #12]
    3eb0:	60b9      	str	r1, [r7, #8]
    3eb2:	607a      	str	r2, [r7, #4]
    3eb4:	603b      	str	r3, [r7, #0]
    nav_home(); // nav.h
    3eb6:	f010 fe8b 	bl	14bd0 <nav_home>
}
    3eba:	3710      	adds	r7, #16
    3ebc:	46bd      	mov	sp, r7
    3ebe:	bd80      	pop	{r7, pc}

00003ec0 <s_26>:
void s_26(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3ec0:	b580      	push	{r7, lr}
    3ec2:	b084      	sub	sp, #16
    3ec4:	af00      	add	r7, sp, #0
    3ec6:	60f8      	str	r0, [r7, #12]
    3ec8:	60b9      	str	r1, [r7, #8]
    3eca:	607a      	str	r2, [r7, #4]
    3ecc:	603b      	str	r3, [r7, #0]
    nav_update(); // nav.h
    3ece:	f010 fea5 	bl	14c1c <nav_update>
}
    3ed2:	3710      	adds	r7, #16
    3ed4:	46bd      	mov	sp, r7
    3ed6:	bd80      	pop	{r7, pc}

00003ed8 <s_27>:
void s_27(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3ed8:	b580      	push	{r7, lr}
    3eda:	b084      	sub	sp, #16
    3edc:	af00      	add	r7, sp, #0
    3ede:	60f8      	str	r0, [r7, #12]
    3ee0:	60b9      	str	r1, [r7, #8]
    3ee2:	607a      	str	r2, [r7, #4]
    3ee4:	603b      	str	r3, [r7, #0]
    course_pid_run(); // pid.h
    3ee6:	f00d ffc3 	bl	11e70 <course_pid_run>
}
    3eea:	3710      	adds	r7, #16
    3eec:	46bd      	mov	sp, r7
    3eee:	bd80      	pop	{r7, pc}

00003ef0 <s_28>:

/*task 10, servant 28, 29*/
void s_28(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3ef0:	b480      	push	{r7}
    3ef2:	b085      	sub	sp, #20
    3ef4:	af00      	add	r7, sp, #0
    3ef6:	60f8      	str	r0, [r7, #12]
    3ef8:	60b9      	str	r1, [r7, #8]
    3efa:	607a      	str	r2, [r7, #4]
    3efc:	603b      	str	r3, [r7, #0]
}
    3efe:	3714      	adds	r7, #20
    3f00:	46bd      	mov	sp, r7
    3f02:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f06:	4770      	bx	lr

00003f08 <s_29>:
void s_29(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3f08:	b580      	push	{r7, lr}
    3f0a:	b084      	sub	sp, #16
    3f0c:	af00      	add	r7, sp, #0
    3f0e:	60f8      	str	r0, [r7, #12]
    3f10:	60b9      	str	r1, [r7, #8]
    3f12:	607a      	str	r2, [r7, #4]
    3f14:	603b      	str	r3, [r7, #0]
    altitude_pid_run(); // pid.h
    3f16:	f00e fa33 	bl	12380 <altitude_pid_run>
}
    3f1a:	3710      	adds	r7, #16
    3f1c:	46bd      	mov	sp, r7
    3f1e:	bd80      	pop	{r7, pc}

00003f20 <s_30>:

/*task 11, servant 30, 31*/
void s_30(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData)
{
    3f20:	b480      	push	{r7}
    3f22:	b085      	sub	sp, #20
    3f24:	af00      	add	r7, sp, #0
    3f26:	60f8      	str	r0, [r7, #12]
    3f28:	60b9      	str	r1, [r7, #8]
    3f2a:	607a      	str	r2, [r7, #4]
    3f2c:	603b      	str	r3, [r7, #0]
}
    3f2e:	3714      	adds	r7, #20
    3f30:	46bd      	mov	sp, r7
    3f32:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f36:	4770      	bx	lr

00003f38 <s_31>:
void s_31(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData)
{
    3f38:	b580      	push	{r7, lr}
    3f3a:	b084      	sub	sp, #16
    3f3c:	af00      	add	r7, sp, #0
    3f3e:	60f8      	str	r0, [r7, #12]
    3f40:	60b9      	str	r1, [r7, #8]
    3f42:	607a      	str	r2, [r7, #4]
    3f44:	603b      	str	r3, [r7, #0]
    climb_pid_run(); // pid.h
    3f46:	f00e f84b 	bl	11fe0 <climb_pid_run>
}
    3f4a:	3710      	adds	r7, #16
    3f4c:	46bd      	mov	sp, r7
    3f4e:	bd80      	pop	{r7, pc}

00003f50 <s_32>:

/*task 12, servant 32, 33*/
void s_32(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3f50:	b480      	push	{r7}
    3f52:	b085      	sub	sp, #20
    3f54:	af00      	add	r7, sp, #0
    3f56:	60f8      	str	r0, [r7, #12]
    3f58:	60b9      	str	r1, [r7, #8]
    3f5a:	607a      	str	r2, [r7, #4]
    3f5c:	603b      	str	r3, [r7, #0]
}
    3f5e:	3714      	adds	r7, #20
    3f60:	46bd      	mov	sp, r7
    3f62:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f66:	4770      	bx	lr

00003f68 <s_33>:
void s_33(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3f68:	b580      	push	{r7, lr}
    3f6a:	b084      	sub	sp, #16
    3f6c:	af00      	add	r7, sp, #0
    3f6e:	60f8      	str	r0, [r7, #12]
    3f70:	60b9      	str	r1, [r7, #8]
    3f72:	607a      	str	r2, [r7, #4]
    3f74:	603b      	str	r3, [r7, #0]
    // main.c
    send_boot();
    3f76:	f003 fa75 	bl	7464 <send_boot>
    send_attitude();
    3f7a:	f004 fa43 	bl	8404 <send_attitude>
    send_adc();
    3f7e:	f004 ff35 	bl	8dec <send_adc>
    send_settings();
    3f82:	f005 f9bb 	bl	92fc <send_settings>
    send_desired();
    3f86:	f005 fdbd 	bl	9b04 <send_desired>
    send_bat();
    3f8a:	f006 fceb 	bl	a964 <send_bat>
    send_climb();
    3f8e:	f007 f89f 	bl	b0d0 <send_climb>
    send_mode();
    3f92:	f007 fe0f 	bl	bbb4 <send_mode>
    send_debug();
    3f96:	f008 f8e1 	bl	c15c <send_debug>
    send_nav_ref();
    3f9a:	f008 fbb5 	bl	c708 <send_nav_ref>
}
    3f9e:	3710      	adds	r7, #16
    3fa0:	46bd      	mov	sp, r7
    3fa2:	bd80      	pop	{r7, pc}

00003fa4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    3fa4:	b480      	push	{r7}
    3fa6:	b083      	sub	sp, #12
    3fa8:	af00      	add	r7, sp, #0
    3faa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    3fac:	687b      	ldr	r3, [r7, #4]
    3fae:	f103 0208 	add.w	r2, r3, #8
    3fb2:	687b      	ldr	r3, [r7, #4]
    3fb4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    3fb6:	687b      	ldr	r3, [r7, #4]
    3fb8:	f04f 32ff 	mov.w	r2, #4294967295
    3fbc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    3fbe:	687b      	ldr	r3, [r7, #4]
    3fc0:	f103 0208 	add.w	r2, r3, #8
    3fc4:	687b      	ldr	r3, [r7, #4]
    3fc6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    3fc8:	687b      	ldr	r3, [r7, #4]
    3fca:	f103 0208 	add.w	r2, r3, #8
    3fce:	687b      	ldr	r3, [r7, #4]
    3fd0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    3fd2:	687b      	ldr	r3, [r7, #4]
    3fd4:	2200      	movs	r2, #0
    3fd6:	601a      	str	r2, [r3, #0]
}
    3fd8:	370c      	adds	r7, #12
    3fda:	46bd      	mov	sp, r7
    3fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fe0:	4770      	bx	lr
    3fe2:	bf00      	nop

00003fe4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    3fe4:	b480      	push	{r7}
    3fe6:	b083      	sub	sp, #12
    3fe8:	af00      	add	r7, sp, #0
    3fea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    3fec:	687b      	ldr	r3, [r7, #4]
    3fee:	2200      	movs	r2, #0
    3ff0:	611a      	str	r2, [r3, #16]
}
    3ff2:	370c      	adds	r7, #12
    3ff4:	46bd      	mov	sp, r7
    3ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ffa:	4770      	bx	lr

00003ffc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    3ffc:	b480      	push	{r7}
    3ffe:	b085      	sub	sp, #20
    4000:	af00      	add	r7, sp, #0
    4002:	6078      	str	r0, [r7, #4]
    4004:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    4006:	687b      	ldr	r3, [r7, #4]
    4008:	685b      	ldr	r3, [r3, #4]
    400a:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    400c:	68fb      	ldr	r3, [r7, #12]
    400e:	685a      	ldr	r2, [r3, #4]
    4010:	683b      	ldr	r3, [r7, #0]
    4012:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    4014:	687b      	ldr	r3, [r7, #4]
    4016:	685a      	ldr	r2, [r3, #4]
    4018:	683b      	ldr	r3, [r7, #0]
    401a:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    401c:	68fb      	ldr	r3, [r7, #12]
    401e:	685b      	ldr	r3, [r3, #4]
    4020:	683a      	ldr	r2, [r7, #0]
    4022:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    4024:	68fb      	ldr	r3, [r7, #12]
    4026:	683a      	ldr	r2, [r7, #0]
    4028:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    402a:	687b      	ldr	r3, [r7, #4]
    402c:	683a      	ldr	r2, [r7, #0]
    402e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    4030:	683b      	ldr	r3, [r7, #0]
    4032:	687a      	ldr	r2, [r7, #4]
    4034:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    4036:	687b      	ldr	r3, [r7, #4]
    4038:	681b      	ldr	r3, [r3, #0]
    403a:	1c5a      	adds	r2, r3, #1
    403c:	687b      	ldr	r3, [r7, #4]
    403e:	601a      	str	r2, [r3, #0]
}
    4040:	3714      	adds	r7, #20
    4042:	46bd      	mov	sp, r7
    4044:	f85d 7b04 	ldr.w	r7, [sp], #4
    4048:	4770      	bx	lr
    404a:	bf00      	nop

0000404c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    404c:	b480      	push	{r7}
    404e:	b085      	sub	sp, #20
    4050:	af00      	add	r7, sp, #0
    4052:	6078      	str	r0, [r7, #4]
    4054:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    4056:	683b      	ldr	r3, [r7, #0]
    4058:	681b      	ldr	r3, [r3, #0]
    405a:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    405c:	68bb      	ldr	r3, [r7, #8]
    405e:	f1b3 3fff 	cmp.w	r3, #4294967295
    4062:	d103      	bne.n	406c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    4064:	687b      	ldr	r3, [r7, #4]
    4066:	691b      	ldr	r3, [r3, #16]
    4068:	60fb      	str	r3, [r7, #12]
    406a:	e00c      	b.n	4086 <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    406c:	687b      	ldr	r3, [r7, #4]
    406e:	3308      	adds	r3, #8
    4070:	60fb      	str	r3, [r7, #12]
    4072:	e002      	b.n	407a <vListInsert+0x2e>
    4074:	68fb      	ldr	r3, [r7, #12]
    4076:	685b      	ldr	r3, [r3, #4]
    4078:	60fb      	str	r3, [r7, #12]
    407a:	68fb      	ldr	r3, [r7, #12]
    407c:	685b      	ldr	r3, [r3, #4]
    407e:	681a      	ldr	r2, [r3, #0]
    4080:	68bb      	ldr	r3, [r7, #8]
    4082:	429a      	cmp	r2, r3
    4084:	d9f6      	bls.n	4074 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    4086:	68fb      	ldr	r3, [r7, #12]
    4088:	685a      	ldr	r2, [r3, #4]
    408a:	683b      	ldr	r3, [r7, #0]
    408c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    408e:	683b      	ldr	r3, [r7, #0]
    4090:	685b      	ldr	r3, [r3, #4]
    4092:	683a      	ldr	r2, [r7, #0]
    4094:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    4096:	683b      	ldr	r3, [r7, #0]
    4098:	68fa      	ldr	r2, [r7, #12]
    409a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    409c:	68fb      	ldr	r3, [r7, #12]
    409e:	683a      	ldr	r2, [r7, #0]
    40a0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    40a2:	683b      	ldr	r3, [r7, #0]
    40a4:	687a      	ldr	r2, [r7, #4]
    40a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    40a8:	687b      	ldr	r3, [r7, #4]
    40aa:	681b      	ldr	r3, [r3, #0]
    40ac:	1c5a      	adds	r2, r3, #1
    40ae:	687b      	ldr	r3, [r7, #4]
    40b0:	601a      	str	r2, [r3, #0]
}
    40b2:	3714      	adds	r7, #20
    40b4:	46bd      	mov	sp, r7
    40b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    40ba:	4770      	bx	lr

000040bc <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    40bc:	b480      	push	{r7}
    40be:	b085      	sub	sp, #20
    40c0:	af00      	add	r7, sp, #0
    40c2:	6078      	str	r0, [r7, #4]
    xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    40c4:	687b      	ldr	r3, [r7, #4]
    40c6:	685b      	ldr	r3, [r3, #4]
    40c8:	687a      	ldr	r2, [r7, #4]
    40ca:	6892      	ldr	r2, [r2, #8]
    40cc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    40ce:	687b      	ldr	r3, [r7, #4]
    40d0:	689b      	ldr	r3, [r3, #8]
    40d2:	687a      	ldr	r2, [r7, #4]
    40d4:	6852      	ldr	r2, [r2, #4]
    40d6:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    40d8:	687b      	ldr	r3, [r7, #4]
    40da:	691b      	ldr	r3, [r3, #16]
    40dc:	60fb      	str	r3, [r7, #12]
	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    40de:	68fb      	ldr	r3, [r7, #12]
    40e0:	685a      	ldr	r2, [r3, #4]
    40e2:	687b      	ldr	r3, [r7, #4]
    40e4:	429a      	cmp	r2, r3
    40e6:	d103      	bne.n	40f0 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    40e8:	687b      	ldr	r3, [r7, #4]
    40ea:	689a      	ldr	r2, [r3, #8]
    40ec:	68fb      	ldr	r3, [r7, #12]
    40ee:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    40f0:	687b      	ldr	r3, [r7, #4]
    40f2:	2200      	movs	r2, #0
    40f4:	611a      	str	r2, [r3, #16]
	(pxList->uxNumberOfItems)--;
    40f6:	68fb      	ldr	r3, [r7, #12]
    40f8:	681b      	ldr	r3, [r3, #0]
    40fa:	1e5a      	subs	r2, r3, #1
    40fc:	68fb      	ldr	r3, [r7, #12]
    40fe:	601a      	str	r2, [r3, #0]
}
    4100:	3714      	adds	r7, #20
    4102:	46bd      	mov	sp, r7
    4104:	f85d 7b04 	ldr.w	r7, [sp], #4
    4108:	4770      	bx	lr
    410a:	bf00      	nop

0000410c <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    410c:	b580      	push	{r7, lr}
    410e:	b084      	sub	sp, #16
    4110:	af00      	add	r7, sp, #0
    4112:	6078      	str	r0, [r7, #4]
    4114:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    4116:	2301      	movs	r3, #1
    4118:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    411a:	683b      	ldr	r3, [r7, #0]
    411c:	2b01      	cmp	r3, #1
    411e:	d00b      	beq.n	4138 <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4120:	687b      	ldr	r3, [r7, #4]
    4122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4124:	2b00      	cmp	r3, #0
    4126:	d001      	beq.n	412c <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    4128:	2300      	movs	r3, #0
    412a:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    412c:	687b      	ldr	r3, [r7, #4]
    412e:	691b      	ldr	r3, [r3, #16]
    4130:	2b00      	cmp	r3, #0
    4132:	d001      	beq.n	4138 <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    4134:	2300      	movs	r3, #0
    4136:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    4138:	68fb      	ldr	r3, [r7, #12]
    413a:	2b01      	cmp	r3, #1
    413c:	d12f      	bne.n	419e <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    413e:	687b      	ldr	r3, [r7, #4]
    4140:	681a      	ldr	r2, [r3, #0]
    4142:	687b      	ldr	r3, [r7, #4]
    4144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4146:	6879      	ldr	r1, [r7, #4]
    4148:	6c09      	ldr	r1, [r1, #64]	; 0x40
    414a:	fb01 f303 	mul.w	r3, r1, r3
    414e:	441a      	add	r2, r3
    4150:	687b      	ldr	r3, [r7, #4]
    4152:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    4154:	687b      	ldr	r3, [r7, #4]
    4156:	2200      	movs	r2, #0
    4158:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    415a:	687b      	ldr	r3, [r7, #4]
    415c:	681a      	ldr	r2, [r3, #0]
    415e:	687b      	ldr	r3, [r7, #4]
    4160:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    4162:	687b      	ldr	r3, [r7, #4]
    4164:	681a      	ldr	r2, [r3, #0]
    4166:	687b      	ldr	r3, [r7, #4]
    4168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    416a:	3b01      	subs	r3, #1
    416c:	6879      	ldr	r1, [r7, #4]
    416e:	6c09      	ldr	r1, [r1, #64]	; 0x40
    4170:	fb01 f303 	mul.w	r3, r1, r3
    4174:	441a      	add	r2, r3
    4176:	687b      	ldr	r3, [r7, #4]
    4178:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    417a:	687b      	ldr	r3, [r7, #4]
    417c:	f04f 32ff 	mov.w	r2, #4294967295
    4180:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    4182:	687b      	ldr	r3, [r7, #4]
    4184:	f04f 32ff 	mov.w	r2, #4294967295
    4188:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    418a:	687b      	ldr	r3, [r7, #4]
    418c:	3310      	adds	r3, #16
    418e:	4618      	mov	r0, r3
    4190:	f7ff ff08 	bl	3fa4 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    4194:	687b      	ldr	r3, [r7, #4]
    4196:	3324      	adds	r3, #36	; 0x24
    4198:	4618      	mov	r0, r3
    419a:	f7ff ff03 	bl	3fa4 <vListInitialise>
	}

	return xReturn;
    419e:	68fb      	ldr	r3, [r7, #12]
}
    41a0:	4618      	mov	r0, r3
    41a2:	3710      	adds	r7, #16
    41a4:	46bd      	mov	sp, r7
    41a6:	bd80      	pop	{r7, pc}

000041a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    41a8:	b580      	push	{r7, lr}
    41aa:	b088      	sub	sp, #32
    41ac:	af00      	add	r7, sp, #0
    41ae:	60f8      	str	r0, [r7, #12]
    41b0:	60b9      	str	r1, [r7, #8]
    41b2:	4613      	mov	r3, r2
    41b4:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    41b6:	2300      	movs	r3, #0
    41b8:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    41ba:	68fb      	ldr	r3, [r7, #12]
    41bc:	2b00      	cmp	r3, #0
    41be:	d026      	beq.n	420e <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    41c0:	204c      	movs	r0, #76	; 0x4c
    41c2:	f001 fda5 	bl	5d10 <pvPortMalloc>
    41c6:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    41c8:	69bb      	ldr	r3, [r7, #24]
    41ca:	2b00      	cmp	r3, #0
    41cc:	d01f      	beq.n	420e <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    41ce:	68fb      	ldr	r3, [r7, #12]
    41d0:	68ba      	ldr	r2, [r7, #8]
    41d2:	fb02 f303 	mul.w	r3, r2, r3
    41d6:	3301      	adds	r3, #1
    41d8:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    41da:	6978      	ldr	r0, [r7, #20]
    41dc:	f001 fd98 	bl	5d10 <pvPortMalloc>
    41e0:	4602      	mov	r2, r0
    41e2:	69bb      	ldr	r3, [r7, #24]
    41e4:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    41e6:	69bb      	ldr	r3, [r7, #24]
    41e8:	681b      	ldr	r3, [r3, #0]
    41ea:	2b00      	cmp	r3, #0
    41ec:	d00c      	beq.n	4208 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    41ee:	69bb      	ldr	r3, [r7, #24]
    41f0:	68fa      	ldr	r2, [r7, #12]
    41f2:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    41f4:	69bb      	ldr	r3, [r7, #24]
    41f6:	68ba      	ldr	r2, [r7, #8]
    41f8:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    41fa:	69b8      	ldr	r0, [r7, #24]
    41fc:	2101      	movs	r1, #1
    41fe:	f7ff ff85 	bl	410c <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    4202:	69bb      	ldr	r3, [r7, #24]
    4204:	61fb      	str	r3, [r7, #28]
    4206:	e002      	b.n	420e <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    4208:	69b8      	ldr	r0, [r7, #24]
    420a:	f001 fe45 	bl	5e98 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    420e:	69fb      	ldr	r3, [r7, #28]
}
    4210:	4618      	mov	r0, r3
    4212:	3720      	adds	r7, #32
    4214:	46bd      	mov	sp, r7
    4216:	bd80      	pop	{r7, pc}

00004218 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    4218:	b580      	push	{r7, lr}
    421a:	b084      	sub	sp, #16
    421c:	af00      	add	r7, sp, #0
    421e:	4603      	mov	r3, r0
    4220:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    4222:	204c      	movs	r0, #76	; 0x4c
    4224:	f001 fd74 	bl	5d10 <pvPortMalloc>
    4228:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    422a:	68fb      	ldr	r3, [r7, #12]
    422c:	2b00      	cmp	r3, #0
    422e:	d02c      	beq.n	428a <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    4230:	68fb      	ldr	r3, [r7, #12]
    4232:	2200      	movs	r2, #0
    4234:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    4236:	68fb      	ldr	r3, [r7, #12]
    4238:	2200      	movs	r2, #0
    423a:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    423c:	68fb      	ldr	r3, [r7, #12]
    423e:	2200      	movs	r2, #0
    4240:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    4242:	68fb      	ldr	r3, [r7, #12]
    4244:	2200      	movs	r2, #0
    4246:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    4248:	68fb      	ldr	r3, [r7, #12]
    424a:	2200      	movs	r2, #0
    424c:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    424e:	68fb      	ldr	r3, [r7, #12]
    4250:	2201      	movs	r2, #1
    4252:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    4254:	68fb      	ldr	r3, [r7, #12]
    4256:	2200      	movs	r2, #0
    4258:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    425a:	68fb      	ldr	r3, [r7, #12]
    425c:	f04f 32ff 	mov.w	r2, #4294967295
    4260:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    4262:	68fb      	ldr	r3, [r7, #12]
    4264:	f04f 32ff 	mov.w	r2, #4294967295
    4268:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    426a:	68fb      	ldr	r3, [r7, #12]
    426c:	3310      	adds	r3, #16
    426e:	4618      	mov	r0, r3
    4270:	f7ff fe98 	bl	3fa4 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    4274:	68fb      	ldr	r3, [r7, #12]
    4276:	3324      	adds	r3, #36	; 0x24
    4278:	4618      	mov	r0, r3
    427a:	f7ff fe93 	bl	3fa4 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    427e:	68f8      	ldr	r0, [r7, #12]
    4280:	2100      	movs	r1, #0
    4282:	2200      	movs	r2, #0
    4284:	2300      	movs	r3, #0
    4286:	f000 f81d 	bl	42c4 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    428a:	68fb      	ldr	r3, [r7, #12]
	}
    428c:	4618      	mov	r0, r3
    428e:	3710      	adds	r7, #16
    4290:	46bd      	mov	sp, r7
    4292:	bd80      	pop	{r7, pc}

00004294 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    4294:	b580      	push	{r7, lr}
    4296:	b084      	sub	sp, #16
    4298:	af00      	add	r7, sp, #0
    429a:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    429c:	f001 fcc0 	bl	5c20 <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    42a0:	687b      	ldr	r3, [r7, #4]
    42a2:	681b      	ldr	r3, [r3, #0]
    42a4:	2b00      	cmp	r3, #0
    42a6:	d103      	bne.n	42b0 <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    42a8:	687b      	ldr	r3, [r7, #4]
    42aa:	685b      	ldr	r3, [r3, #4]
    42ac:	60fb      	str	r3, [r7, #12]
    42ae:	e001      	b.n	42b4 <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    42b0:	2300      	movs	r3, #0
    42b2:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    42b4:	f001 fcca 	bl	5c4c <vPortExitCritical>
		
		return pxReturn;
    42b8:	68fb      	ldr	r3, [r7, #12]
	}
    42ba:	4618      	mov	r0, r3
    42bc:	3710      	adds	r7, #16
    42be:	46bd      	mov	sp, r7
    42c0:	bd80      	pop	{r7, pc}
    42c2:	bf00      	nop

000042c4 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    42c4:	b580      	push	{r7, lr}
    42c6:	b088      	sub	sp, #32
    42c8:	af00      	add	r7, sp, #0
    42ca:	60f8      	str	r0, [r7, #12]
    42cc:	60b9      	str	r1, [r7, #8]
    42ce:	607a      	str	r2, [r7, #4]
    42d0:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    42d2:	2300      	movs	r3, #0
    42d4:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    42d6:	f001 fca3 	bl	5c20 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    42da:	68fb      	ldr	r3, [r7, #12]
    42dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    42de:	68fb      	ldr	r3, [r7, #12]
    42e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    42e2:	429a      	cmp	r2, r3
    42e4:	d216      	bcs.n	4314 <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    42e6:	68f8      	ldr	r0, [r7, #12]
    42e8:	68b9      	ldr	r1, [r7, #8]
    42ea:	683a      	ldr	r2, [r7, #0]
    42ec:	f000 f9d6 	bl	469c <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    42f0:	68fb      	ldr	r3, [r7, #12]
    42f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    42f4:	2b00      	cmp	r3, #0
    42f6:	d009      	beq.n	430c <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    42f8:	68fb      	ldr	r3, [r7, #12]
    42fa:	3324      	adds	r3, #36	; 0x24
    42fc:	4618      	mov	r0, r3
    42fe:	f001 f905 	bl	550c <xTaskRemoveFromEventList>
    4302:	4603      	mov	r3, r0
    4304:	2b01      	cmp	r3, #1
    4306:	d101      	bne.n	430c <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    4308:	f001 fc7c 	bl	5c04 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    430c:	f001 fc9e 	bl	5c4c <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    4310:	2301      	movs	r3, #1
    4312:	e059      	b.n	43c8 <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    4314:	687b      	ldr	r3, [r7, #4]
    4316:	2b00      	cmp	r3, #0
    4318:	d103      	bne.n	4322 <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    431a:	f001 fc97 	bl	5c4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    431e:	2300      	movs	r3, #0
    4320:	e052      	b.n	43c8 <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    4322:	69fb      	ldr	r3, [r7, #28]
    4324:	2b00      	cmp	r3, #0
    4326:	d106      	bne.n	4336 <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    4328:	f107 0314 	add.w	r3, r7, #20
    432c:	4618      	mov	r0, r3
    432e:	f001 f945 	bl	55bc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4332:	2301      	movs	r3, #1
    4334:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    4336:	f001 fc89 	bl	5c4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    433a:	f000 fe93 	bl	5064 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    433e:	f001 fc6f 	bl	5c20 <vPortEnterCritical>
    4342:	68fb      	ldr	r3, [r7, #12]
    4344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4346:	f1b3 3fff 	cmp.w	r3, #4294967295
    434a:	d102      	bne.n	4352 <xQueueGenericSend+0x8e>
    434c:	68fb      	ldr	r3, [r7, #12]
    434e:	2200      	movs	r2, #0
    4350:	645a      	str	r2, [r3, #68]	; 0x44
    4352:	68fb      	ldr	r3, [r7, #12]
    4354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4356:	f1b3 3fff 	cmp.w	r3, #4294967295
    435a:	d102      	bne.n	4362 <xQueueGenericSend+0x9e>
    435c:	68fb      	ldr	r3, [r7, #12]
    435e:	2200      	movs	r2, #0
    4360:	649a      	str	r2, [r3, #72]	; 0x48
    4362:	f001 fc73 	bl	5c4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4366:	f107 0214 	add.w	r2, r7, #20
    436a:	1d3b      	adds	r3, r7, #4
    436c:	4610      	mov	r0, r2
    436e:	4619      	mov	r1, r3
    4370:	f001 f93c 	bl	55ec <xTaskCheckForTimeOut>
    4374:	4603      	mov	r3, r0
    4376:	2b00      	cmp	r3, #0
    4378:	d11e      	bne.n	43b8 <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    437a:	68f8      	ldr	r0, [r7, #12]
    437c:	f000 fa86 	bl	488c <prvIsQueueFull>
    4380:	4603      	mov	r3, r0
    4382:	2b00      	cmp	r3, #0
    4384:	d012      	beq.n	43ac <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    4386:	68fb      	ldr	r3, [r7, #12]
    4388:	f103 0210 	add.w	r2, r3, #16
    438c:	687b      	ldr	r3, [r7, #4]
    438e:	4610      	mov	r0, r2
    4390:	4619      	mov	r1, r3
    4392:	f001 f883 	bl	549c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    4396:	68f8      	ldr	r0, [r7, #12]
    4398:	f000 fa02 	bl	47a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    439c:	f000 fe74 	bl	5088 <xTaskResumeAll>
    43a0:	4603      	mov	r3, r0
    43a2:	2b00      	cmp	r3, #0
    43a4:	d10f      	bne.n	43c6 <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    43a6:	f001 fc2d 	bl	5c04 <vPortYieldFromISR>
    43aa:	e00c      	b.n	43c6 <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    43ac:	68f8      	ldr	r0, [r7, #12]
    43ae:	f000 f9f7 	bl	47a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    43b2:	f000 fe69 	bl	5088 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    43b6:	e78e      	b.n	42d6 <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    43b8:	68f8      	ldr	r0, [r7, #12]
    43ba:	f000 f9f1 	bl	47a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    43be:	f000 fe63 	bl	5088 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    43c2:	2300      	movs	r3, #0
    43c4:	e000      	b.n	43c8 <xQueueGenericSend+0x104>
		}
	}
    43c6:	e786      	b.n	42d6 <xQueueGenericSend+0x12>
}
    43c8:	4618      	mov	r0, r3
    43ca:	3720      	adds	r7, #32
    43cc:	46bd      	mov	sp, r7
    43ce:	bd80      	pop	{r7, pc}

000043d0 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    43d0:	b580      	push	{r7, lr}
    43d2:	b086      	sub	sp, #24
    43d4:	af00      	add	r7, sp, #0
    43d6:	60f8      	str	r0, [r7, #12]
    43d8:	60b9      	str	r1, [r7, #8]
    43da:	607a      	str	r2, [r7, #4]
    43dc:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    43de:	2300      	movs	r3, #0
    43e0:	613b      	str	r3, [r7, #16]
    43e2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    43e6:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    43ea:	68fb      	ldr	r3, [r7, #12]
    43ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    43ee:	68fb      	ldr	r3, [r7, #12]
    43f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    43f2:	429a      	cmp	r2, r3
    43f4:	d221      	bcs.n	443a <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    43f6:	68f8      	ldr	r0, [r7, #12]
    43f8:	68b9      	ldr	r1, [r7, #8]
    43fa:	683a      	ldr	r2, [r7, #0]
    43fc:	f000 f94e 	bl	469c <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    4400:	68fb      	ldr	r3, [r7, #12]
    4402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4404:	f1b3 3fff 	cmp.w	r3, #4294967295
    4408:	d10f      	bne.n	442a <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    440a:	68fb      	ldr	r3, [r7, #12]
    440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    440e:	2b00      	cmp	r3, #0
    4410:	d010      	beq.n	4434 <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4412:	68fb      	ldr	r3, [r7, #12]
    4414:	3324      	adds	r3, #36	; 0x24
    4416:	4618      	mov	r0, r3
    4418:	f001 f878 	bl	550c <xTaskRemoveFromEventList>
    441c:	4603      	mov	r3, r0
    441e:	2b00      	cmp	r3, #0
    4420:	d008      	beq.n	4434 <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    4422:	687b      	ldr	r3, [r7, #4]
    4424:	2201      	movs	r2, #1
    4426:	601a      	str	r2, [r3, #0]
    4428:	e004      	b.n	4434 <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    442a:	68fb      	ldr	r3, [r7, #12]
    442c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    442e:	1c5a      	adds	r2, r3, #1
    4430:	68fb      	ldr	r3, [r7, #12]
    4432:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    4434:	2301      	movs	r3, #1
    4436:	617b      	str	r3, [r7, #20]
    4438:	e001      	b.n	443e <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    443a:	2300      	movs	r3, #0
    443c:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    443e:	f04f 0000 	mov.w	r0, #0
    4442:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4446:	697b      	ldr	r3, [r7, #20]
}
    4448:	4618      	mov	r0, r3
    444a:	3718      	adds	r7, #24
    444c:	46bd      	mov	sp, r7
    444e:	bd80      	pop	{r7, pc}

00004450 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    4450:	b580      	push	{r7, lr}
    4452:	b088      	sub	sp, #32
    4454:	af00      	add	r7, sp, #0
    4456:	60f8      	str	r0, [r7, #12]
    4458:	60b9      	str	r1, [r7, #8]
    445a:	607a      	str	r2, [r7, #4]
    445c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    445e:	2300      	movs	r3, #0
    4460:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    4462:	f001 fbdd 	bl	5c20 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    4466:	68fb      	ldr	r3, [r7, #12]
    4468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    446a:	2b00      	cmp	r3, #0
    446c:	d03b      	beq.n	44e6 <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    446e:	68fb      	ldr	r3, [r7, #12]
    4470:	68db      	ldr	r3, [r3, #12]
    4472:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    4474:	68f8      	ldr	r0, [r7, #12]
    4476:	68b9      	ldr	r1, [r7, #8]
    4478:	f000 f96c 	bl	4754 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    447c:	683b      	ldr	r3, [r7, #0]
    447e:	2b00      	cmp	r3, #0
    4480:	d11c      	bne.n	44bc <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    4482:	68fb      	ldr	r3, [r7, #12]
    4484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4486:	1e5a      	subs	r2, r3, #1
    4488:	68fb      	ldr	r3, [r7, #12]
    448a:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    448c:	68fb      	ldr	r3, [r7, #12]
    448e:	681b      	ldr	r3, [r3, #0]
    4490:	2b00      	cmp	r3, #0
    4492:	d104      	bne.n	449e <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    4494:	f001 fa5c 	bl	5950 <xTaskGetCurrentTaskHandle>
    4498:	4602      	mov	r2, r0
    449a:	68fb      	ldr	r3, [r7, #12]
    449c:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    449e:	68fb      	ldr	r3, [r7, #12]
    44a0:	691b      	ldr	r3, [r3, #16]
    44a2:	2b00      	cmp	r3, #0
    44a4:	d01b      	beq.n	44de <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    44a6:	68fb      	ldr	r3, [r7, #12]
    44a8:	3310      	adds	r3, #16
    44aa:	4618      	mov	r0, r3
    44ac:	f001 f82e 	bl	550c <xTaskRemoveFromEventList>
    44b0:	4603      	mov	r3, r0
    44b2:	2b01      	cmp	r3, #1
    44b4:	d113      	bne.n	44de <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    44b6:	f001 fba5 	bl	5c04 <vPortYieldFromISR>
    44ba:	e010      	b.n	44de <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    44bc:	68fb      	ldr	r3, [r7, #12]
    44be:	69ba      	ldr	r2, [r7, #24]
    44c0:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    44c2:	68fb      	ldr	r3, [r7, #12]
    44c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    44c6:	2b00      	cmp	r3, #0
    44c8:	d009      	beq.n	44de <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    44ca:	68fb      	ldr	r3, [r7, #12]
    44cc:	3324      	adds	r3, #36	; 0x24
    44ce:	4618      	mov	r0, r3
    44d0:	f001 f81c 	bl	550c <xTaskRemoveFromEventList>
    44d4:	4603      	mov	r3, r0
    44d6:	2b00      	cmp	r3, #0
    44d8:	d001      	beq.n	44de <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    44da:	f001 fb93 	bl	5c04 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    44de:	f001 fbb5 	bl	5c4c <vPortExitCritical>
				return pdPASS;
    44e2:	2301      	movs	r3, #1
    44e4:	e066      	b.n	45b4 <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    44e6:	687b      	ldr	r3, [r7, #4]
    44e8:	2b00      	cmp	r3, #0
    44ea:	d103      	bne.n	44f4 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    44ec:	f001 fbae 	bl	5c4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    44f0:	2300      	movs	r3, #0
    44f2:	e05f      	b.n	45b4 <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    44f4:	69fb      	ldr	r3, [r7, #28]
    44f6:	2b00      	cmp	r3, #0
    44f8:	d106      	bne.n	4508 <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    44fa:	f107 0310 	add.w	r3, r7, #16
    44fe:	4618      	mov	r0, r3
    4500:	f001 f85c 	bl	55bc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4504:	2301      	movs	r3, #1
    4506:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    4508:	f001 fba0 	bl	5c4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    450c:	f000 fdaa 	bl	5064 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    4510:	f001 fb86 	bl	5c20 <vPortEnterCritical>
    4514:	68fb      	ldr	r3, [r7, #12]
    4516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4518:	f1b3 3fff 	cmp.w	r3, #4294967295
    451c:	d102      	bne.n	4524 <xQueueGenericReceive+0xd4>
    451e:	68fb      	ldr	r3, [r7, #12]
    4520:	2200      	movs	r2, #0
    4522:	645a      	str	r2, [r3, #68]	; 0x44
    4524:	68fb      	ldr	r3, [r7, #12]
    4526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4528:	f1b3 3fff 	cmp.w	r3, #4294967295
    452c:	d102      	bne.n	4534 <xQueueGenericReceive+0xe4>
    452e:	68fb      	ldr	r3, [r7, #12]
    4530:	2200      	movs	r2, #0
    4532:	649a      	str	r2, [r3, #72]	; 0x48
    4534:	f001 fb8a 	bl	5c4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4538:	f107 0210 	add.w	r2, r7, #16
    453c:	1d3b      	adds	r3, r7, #4
    453e:	4610      	mov	r0, r2
    4540:	4619      	mov	r1, r3
    4542:	f001 f853 	bl	55ec <xTaskCheckForTimeOut>
    4546:	4603      	mov	r3, r0
    4548:	2b00      	cmp	r3, #0
    454a:	d12b      	bne.n	45a4 <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    454c:	68f8      	ldr	r0, [r7, #12]
    454e:	f000 f973 	bl	4838 <prvIsQueueEmpty>
    4552:	4603      	mov	r3, r0
    4554:	2b00      	cmp	r3, #0
    4556:	d01f      	beq.n	4598 <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4558:	68fb      	ldr	r3, [r7, #12]
    455a:	681b      	ldr	r3, [r3, #0]
    455c:	2b00      	cmp	r3, #0
    455e:	d108      	bne.n	4572 <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    4560:	f001 fb5e 	bl	5c20 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    4564:	68fb      	ldr	r3, [r7, #12]
    4566:	685b      	ldr	r3, [r3, #4]
    4568:	4618      	mov	r0, r3
    456a:	f001 fa01 	bl	5970 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    456e:	f001 fb6d 	bl	5c4c <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    4572:	68fb      	ldr	r3, [r7, #12]
    4574:	f103 0224 	add.w	r2, r3, #36	; 0x24
    4578:	687b      	ldr	r3, [r7, #4]
    457a:	4610      	mov	r0, r2
    457c:	4619      	mov	r1, r3
    457e:	f000 ff8d 	bl	549c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    4582:	68f8      	ldr	r0, [r7, #12]
    4584:	f000 f90c 	bl	47a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    4588:	f000 fd7e 	bl	5088 <xTaskResumeAll>
    458c:	4603      	mov	r3, r0
    458e:	2b00      	cmp	r3, #0
    4590:	d10f      	bne.n	45b2 <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    4592:	f001 fb37 	bl	5c04 <vPortYieldFromISR>
    4596:	e00c      	b.n	45b2 <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    4598:	68f8      	ldr	r0, [r7, #12]
    459a:	f000 f901 	bl	47a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    459e:	f000 fd73 	bl	5088 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    45a2:	e75e      	b.n	4462 <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    45a4:	68f8      	ldr	r0, [r7, #12]
    45a6:	f000 f8fb 	bl	47a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    45aa:	f000 fd6d 	bl	5088 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    45ae:	2300      	movs	r3, #0
    45b0:	e000      	b.n	45b4 <xQueueGenericReceive+0x164>
		}
	}
    45b2:	e756      	b.n	4462 <xQueueGenericReceive+0x12>
}
    45b4:	4618      	mov	r0, r3
    45b6:	3720      	adds	r7, #32
    45b8:	46bd      	mov	sp, r7
    45ba:	bd80      	pop	{r7, pc}

000045bc <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    45bc:	b580      	push	{r7, lr}
    45be:	b086      	sub	sp, #24
    45c0:	af00      	add	r7, sp, #0
    45c2:	60f8      	str	r0, [r7, #12]
    45c4:	60b9      	str	r1, [r7, #8]
    45c6:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    45c8:	2300      	movs	r3, #0
    45ca:	613b      	str	r3, [r7, #16]
    45cc:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    45d0:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    45d4:	68fb      	ldr	r3, [r7, #12]
    45d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    45d8:	2b00      	cmp	r3, #0
    45da:	d025      	beq.n	4628 <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    45dc:	68f8      	ldr	r0, [r7, #12]
    45de:	68b9      	ldr	r1, [r7, #8]
    45e0:	f000 f8b8 	bl	4754 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    45e4:	68fb      	ldr	r3, [r7, #12]
    45e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    45e8:	1e5a      	subs	r2, r3, #1
    45ea:	68fb      	ldr	r3, [r7, #12]
    45ec:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    45ee:	68fb      	ldr	r3, [r7, #12]
    45f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    45f2:	f1b3 3fff 	cmp.w	r3, #4294967295
    45f6:	d10f      	bne.n	4618 <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    45f8:	68fb      	ldr	r3, [r7, #12]
    45fa:	691b      	ldr	r3, [r3, #16]
    45fc:	2b00      	cmp	r3, #0
    45fe:	d010      	beq.n	4622 <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    4600:	68fb      	ldr	r3, [r7, #12]
    4602:	3310      	adds	r3, #16
    4604:	4618      	mov	r0, r3
    4606:	f000 ff81 	bl	550c <xTaskRemoveFromEventList>
    460a:	4603      	mov	r3, r0
    460c:	2b00      	cmp	r3, #0
    460e:	d008      	beq.n	4622 <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    4610:	687b      	ldr	r3, [r7, #4]
    4612:	2201      	movs	r2, #1
    4614:	601a      	str	r2, [r3, #0]
    4616:	e004      	b.n	4622 <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    4618:	68fb      	ldr	r3, [r7, #12]
    461a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    461c:	1c5a      	adds	r2, r3, #1
    461e:	68fb      	ldr	r3, [r7, #12]
    4620:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    4622:	2301      	movs	r3, #1
    4624:	617b      	str	r3, [r7, #20]
    4626:	e001      	b.n	462c <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    4628:	2300      	movs	r3, #0
    462a:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    462c:	f04f 0000 	mov.w	r0, #0
    4630:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4634:	697b      	ldr	r3, [r7, #20]
}
    4636:	4618      	mov	r0, r3
    4638:	3718      	adds	r7, #24
    463a:	46bd      	mov	sp, r7
    463c:	bd80      	pop	{r7, pc}
    463e:	bf00      	nop

00004640 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    4640:	b580      	push	{r7, lr}
    4642:	b084      	sub	sp, #16
    4644:	af00      	add	r7, sp, #0
    4646:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    4648:	f001 faea 	bl	5c20 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    464c:	687b      	ldr	r3, [r7, #4]
    464e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4650:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4652:	f001 fafb 	bl	5c4c <vPortExitCritical>

	return uxReturn;
    4656:	68fb      	ldr	r3, [r7, #12]
}
    4658:	4618      	mov	r0, r3
    465a:	3710      	adds	r7, #16
    465c:	46bd      	mov	sp, r7
    465e:	bd80      	pop	{r7, pc}

00004660 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    4660:	b480      	push	{r7}
    4662:	b085      	sub	sp, #20
    4664:	af00      	add	r7, sp, #0
    4666:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    4668:	687b      	ldr	r3, [r7, #4]
    466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    466c:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    466e:	68fb      	ldr	r3, [r7, #12]
}
    4670:	4618      	mov	r0, r3
    4672:	3714      	adds	r7, #20
    4674:	46bd      	mov	sp, r7
    4676:	f85d 7b04 	ldr.w	r7, [sp], #4
    467a:	4770      	bx	lr

0000467c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    467c:	b580      	push	{r7, lr}
    467e:	b082      	sub	sp, #8
    4680:	af00      	add	r7, sp, #0
    4682:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    4684:	687b      	ldr	r3, [r7, #4]
    4686:	681b      	ldr	r3, [r3, #0]
    4688:	4618      	mov	r0, r3
    468a:	f001 fc05 	bl	5e98 <vPortFree>
	vPortFree( pxQueue );
    468e:	6878      	ldr	r0, [r7, #4]
    4690:	f001 fc02 	bl	5e98 <vPortFree>
}
    4694:	3708      	adds	r7, #8
    4696:	46bd      	mov	sp, r7
    4698:	bd80      	pop	{r7, pc}
    469a:	bf00      	nop

0000469c <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    469c:	b580      	push	{r7, lr}
    469e:	b084      	sub	sp, #16
    46a0:	af00      	add	r7, sp, #0
    46a2:	60f8      	str	r0, [r7, #12]
    46a4:	60b9      	str	r1, [r7, #8]
    46a6:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    46a8:	68fb      	ldr	r3, [r7, #12]
    46aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    46ac:	2b00      	cmp	r3, #0
    46ae:	d10c      	bne.n	46ca <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    46b0:	68fb      	ldr	r3, [r7, #12]
    46b2:	681b      	ldr	r3, [r3, #0]
    46b4:	2b00      	cmp	r3, #0
    46b6:	d145      	bne.n	4744 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    46b8:	68fb      	ldr	r3, [r7, #12]
    46ba:	685b      	ldr	r3, [r3, #4]
    46bc:	4618      	mov	r0, r3
    46be:	f001 f9bb 	bl	5a38 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    46c2:	68fb      	ldr	r3, [r7, #12]
    46c4:	2200      	movs	r2, #0
    46c6:	605a      	str	r2, [r3, #4]
    46c8:	e03c      	b.n	4744 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    46ca:	687b      	ldr	r3, [r7, #4]
    46cc:	2b00      	cmp	r3, #0
    46ce:	d11a      	bne.n	4706 <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    46d0:	68fb      	ldr	r3, [r7, #12]
    46d2:	689a      	ldr	r2, [r3, #8]
    46d4:	68fb      	ldr	r3, [r7, #12]
    46d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    46d8:	4610      	mov	r0, r2
    46da:	68b9      	ldr	r1, [r7, #8]
    46dc:	461a      	mov	r2, r3
    46de:	f014 f801 	bl	186e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    46e2:	68fb      	ldr	r3, [r7, #12]
    46e4:	689a      	ldr	r2, [r3, #8]
    46e6:	68fb      	ldr	r3, [r7, #12]
    46e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    46ea:	441a      	add	r2, r3
    46ec:	68fb      	ldr	r3, [r7, #12]
    46ee:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    46f0:	68fb      	ldr	r3, [r7, #12]
    46f2:	689a      	ldr	r2, [r3, #8]
    46f4:	68fb      	ldr	r3, [r7, #12]
    46f6:	685b      	ldr	r3, [r3, #4]
    46f8:	429a      	cmp	r2, r3
    46fa:	d323      	bcc.n	4744 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    46fc:	68fb      	ldr	r3, [r7, #12]
    46fe:	681a      	ldr	r2, [r3, #0]
    4700:	68fb      	ldr	r3, [r7, #12]
    4702:	609a      	str	r2, [r3, #8]
    4704:	e01e      	b.n	4744 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    4706:	68fb      	ldr	r3, [r7, #12]
    4708:	68da      	ldr	r2, [r3, #12]
    470a:	68fb      	ldr	r3, [r7, #12]
    470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    470e:	4610      	mov	r0, r2
    4710:	68b9      	ldr	r1, [r7, #8]
    4712:	461a      	mov	r2, r3
    4714:	f013 ffe6 	bl	186e4 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    4718:	68fb      	ldr	r3, [r7, #12]
    471a:	68da      	ldr	r2, [r3, #12]
    471c:	68fb      	ldr	r3, [r7, #12]
    471e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4720:	425b      	negs	r3, r3
    4722:	441a      	add	r2, r3
    4724:	68fb      	ldr	r3, [r7, #12]
    4726:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    4728:	68fb      	ldr	r3, [r7, #12]
    472a:	68da      	ldr	r2, [r3, #12]
    472c:	68fb      	ldr	r3, [r7, #12]
    472e:	681b      	ldr	r3, [r3, #0]
    4730:	429a      	cmp	r2, r3
    4732:	d207      	bcs.n	4744 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    4734:	68fb      	ldr	r3, [r7, #12]
    4736:	685a      	ldr	r2, [r3, #4]
    4738:	68fb      	ldr	r3, [r7, #12]
    473a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    473c:	425b      	negs	r3, r3
    473e:	441a      	add	r2, r3
    4740:	68fb      	ldr	r3, [r7, #12]
    4742:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    4744:	68fb      	ldr	r3, [r7, #12]
    4746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4748:	1c5a      	adds	r2, r3, #1
    474a:	68fb      	ldr	r3, [r7, #12]
    474c:	639a      	str	r2, [r3, #56]	; 0x38
}
    474e:	3710      	adds	r7, #16
    4750:	46bd      	mov	sp, r7
    4752:	bd80      	pop	{r7, pc}

00004754 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    4754:	b580      	push	{r7, lr}
    4756:	b082      	sub	sp, #8
    4758:	af00      	add	r7, sp, #0
    475a:	6078      	str	r0, [r7, #4]
    475c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    475e:	687b      	ldr	r3, [r7, #4]
    4760:	681b      	ldr	r3, [r3, #0]
    4762:	2b00      	cmp	r3, #0
    4764:	d019      	beq.n	479a <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    4766:	687b      	ldr	r3, [r7, #4]
    4768:	68da      	ldr	r2, [r3, #12]
    476a:	687b      	ldr	r3, [r7, #4]
    476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    476e:	441a      	add	r2, r3
    4770:	687b      	ldr	r3, [r7, #4]
    4772:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    4774:	687b      	ldr	r3, [r7, #4]
    4776:	68da      	ldr	r2, [r3, #12]
    4778:	687b      	ldr	r3, [r7, #4]
    477a:	685b      	ldr	r3, [r3, #4]
    477c:	429a      	cmp	r2, r3
    477e:	d303      	bcc.n	4788 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    4780:	687b      	ldr	r3, [r7, #4]
    4782:	681a      	ldr	r2, [r3, #0]
    4784:	687b      	ldr	r3, [r7, #4]
    4786:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    4788:	687b      	ldr	r3, [r7, #4]
    478a:	68da      	ldr	r2, [r3, #12]
    478c:	687b      	ldr	r3, [r7, #4]
    478e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4790:	6838      	ldr	r0, [r7, #0]
    4792:	4611      	mov	r1, r2
    4794:	461a      	mov	r2, r3
    4796:	f013 ffa5 	bl	186e4 <memcpy>
	}
}
    479a:	3708      	adds	r7, #8
    479c:	46bd      	mov	sp, r7
    479e:	bd80      	pop	{r7, pc}

000047a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    47a0:	b580      	push	{r7, lr}
    47a2:	b082      	sub	sp, #8
    47a4:	af00      	add	r7, sp, #0
    47a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    47a8:	f001 fa3a 	bl	5c20 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    47ac:	e014      	b.n	47d8 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    47ae:	687b      	ldr	r3, [r7, #4]
    47b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    47b2:	2b00      	cmp	r3, #0
    47b4:	d00f      	beq.n	47d6 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    47b6:	687b      	ldr	r3, [r7, #4]
    47b8:	3324      	adds	r3, #36	; 0x24
    47ba:	4618      	mov	r0, r3
    47bc:	f000 fea6 	bl	550c <xTaskRemoveFromEventList>
    47c0:	4603      	mov	r3, r0
    47c2:	2b00      	cmp	r3, #0
    47c4:	d001      	beq.n	47ca <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    47c6:	f000 ff5d 	bl	5684 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    47ca:	687b      	ldr	r3, [r7, #4]
    47cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    47ce:	1e5a      	subs	r2, r3, #1
    47d0:	687b      	ldr	r3, [r7, #4]
    47d2:	649a      	str	r2, [r3, #72]	; 0x48
    47d4:	e000      	b.n	47d8 <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    47d6:	e003      	b.n	47e0 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    47d8:	687b      	ldr	r3, [r7, #4]
    47da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    47dc:	2b00      	cmp	r3, #0
    47de:	dce6      	bgt.n	47ae <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    47e0:	687b      	ldr	r3, [r7, #4]
    47e2:	f04f 32ff 	mov.w	r2, #4294967295
    47e6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    47e8:	f001 fa30 	bl	5c4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    47ec:	f001 fa18 	bl	5c20 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    47f0:	e014      	b.n	481c <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    47f2:	687b      	ldr	r3, [r7, #4]
    47f4:	691b      	ldr	r3, [r3, #16]
    47f6:	2b00      	cmp	r3, #0
    47f8:	d00f      	beq.n	481a <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    47fa:	687b      	ldr	r3, [r7, #4]
    47fc:	3310      	adds	r3, #16
    47fe:	4618      	mov	r0, r3
    4800:	f000 fe84 	bl	550c <xTaskRemoveFromEventList>
    4804:	4603      	mov	r3, r0
    4806:	2b00      	cmp	r3, #0
    4808:	d001      	beq.n	480e <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    480a:	f000 ff3b 	bl	5684 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    480e:	687b      	ldr	r3, [r7, #4]
    4810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4812:	1e5a      	subs	r2, r3, #1
    4814:	687b      	ldr	r3, [r7, #4]
    4816:	645a      	str	r2, [r3, #68]	; 0x44
    4818:	e000      	b.n	481c <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    481a:	e003      	b.n	4824 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    481c:	687b      	ldr	r3, [r7, #4]
    481e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4820:	2b00      	cmp	r3, #0
    4822:	dce6      	bgt.n	47f2 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    4824:	687b      	ldr	r3, [r7, #4]
    4826:	f04f 32ff 	mov.w	r2, #4294967295
    482a:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    482c:	f001 fa0e 	bl	5c4c <vPortExitCritical>
}
    4830:	3708      	adds	r7, #8
    4832:	46bd      	mov	sp, r7
    4834:	bd80      	pop	{r7, pc}
    4836:	bf00      	nop

00004838 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    4838:	b580      	push	{r7, lr}
    483a:	b084      	sub	sp, #16
    483c:	af00      	add	r7, sp, #0
    483e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    4840:	f001 f9ee 	bl	5c20 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4844:	687b      	ldr	r3, [r7, #4]
    4846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4848:	2b00      	cmp	r3, #0
    484a:	bf14      	ite	ne
    484c:	2300      	movne	r3, #0
    484e:	2301      	moveq	r3, #1
    4850:	b2db      	uxtb	r3, r3
    4852:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4854:	f001 f9fa 	bl	5c4c <vPortExitCritical>

	return xReturn;
    4858:	68fb      	ldr	r3, [r7, #12]
}
    485a:	4618      	mov	r0, r3
    485c:	3710      	adds	r7, #16
    485e:	46bd      	mov	sp, r7
    4860:	bd80      	pop	{r7, pc}
    4862:	bf00      	nop

00004864 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    4864:	b480      	push	{r7}
    4866:	b085      	sub	sp, #20
    4868:	af00      	add	r7, sp, #0
    486a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    486c:	687b      	ldr	r3, [r7, #4]
    486e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4870:	2b00      	cmp	r3, #0
    4872:	bf14      	ite	ne
    4874:	2300      	movne	r3, #0
    4876:	2301      	moveq	r3, #1
    4878:	b2db      	uxtb	r3, r3
    487a:	60fb      	str	r3, [r7, #12]

	return xReturn;
    487c:	68fb      	ldr	r3, [r7, #12]
}
    487e:	4618      	mov	r0, r3
    4880:	3714      	adds	r7, #20
    4882:	46bd      	mov	sp, r7
    4884:	f85d 7b04 	ldr.w	r7, [sp], #4
    4888:	4770      	bx	lr
    488a:	bf00      	nop

0000488c <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    488c:	b580      	push	{r7, lr}
    488e:	b084      	sub	sp, #16
    4890:	af00      	add	r7, sp, #0
    4892:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    4894:	f001 f9c4 	bl	5c20 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    4898:	687b      	ldr	r3, [r7, #4]
    489a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    489c:	687b      	ldr	r3, [r7, #4]
    489e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    48a0:	429a      	cmp	r2, r3
    48a2:	bf14      	ite	ne
    48a4:	2300      	movne	r3, #0
    48a6:	2301      	moveq	r3, #1
    48a8:	b2db      	uxtb	r3, r3
    48aa:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    48ac:	f001 f9ce 	bl	5c4c <vPortExitCritical>

	return xReturn;
    48b0:	68fb      	ldr	r3, [r7, #12]
}
    48b2:	4618      	mov	r0, r3
    48b4:	3710      	adds	r7, #16
    48b6:	46bd      	mov	sp, r7
    48b8:	bd80      	pop	{r7, pc}
    48ba:	bf00      	nop

000048bc <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    48bc:	b480      	push	{r7}
    48be:	b085      	sub	sp, #20
    48c0:	af00      	add	r7, sp, #0
    48c2:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    48c4:	687b      	ldr	r3, [r7, #4]
    48c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    48c8:	687b      	ldr	r3, [r7, #4]
    48ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    48cc:	429a      	cmp	r2, r3
    48ce:	bf14      	ite	ne
    48d0:	2300      	movne	r3, #0
    48d2:	2301      	moveq	r3, #1
    48d4:	b2db      	uxtb	r3, r3
    48d6:	60fb      	str	r3, [r7, #12]

	return xReturn;
    48d8:	68fb      	ldr	r3, [r7, #12]
}
    48da:	4618      	mov	r0, r3
    48dc:	3714      	adds	r7, #20
    48de:	46bd      	mov	sp, r7
    48e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    48e4:	4770      	bx	lr
    48e6:	bf00      	nop

000048e8 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    48e8:	b580      	push	{r7, lr}
    48ea:	b08a      	sub	sp, #40	; 0x28
    48ec:	af02      	add	r7, sp, #8
    48ee:	60f8      	str	r0, [r7, #12]
    48f0:	60b9      	str	r1, [r7, #8]
    48f2:	603b      	str	r3, [r7, #0]
    48f4:	4613      	mov	r3, r2
    48f6:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    48f8:	88fb      	ldrh	r3, [r7, #6]
    48fa:	4618      	mov	r0, r3
    48fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
    48fe:	f000 ffe5 	bl	58cc <prvAllocateTCBAndStack>
    4902:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    4904:	69bb      	ldr	r3, [r7, #24]
    4906:	2b00      	cmp	r3, #0
    4908:	f000 80a1 	beq.w	4a4e <xTaskGenericCreate+0x166>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    490c:	69bb      	ldr	r3, [r7, #24]
    490e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    4910:	88fb      	ldrh	r3, [r7, #6]
    4912:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4916:	3b01      	subs	r3, #1
    4918:	009b      	lsls	r3, r3, #2
    491a:	4413      	add	r3, r2
    491c:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    491e:	697b      	ldr	r3, [r7, #20]
    4920:	f023 0307 	bic.w	r3, r3, #7
    4924:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    4926:	88fb      	ldrh	r3, [r7, #6]
    4928:	9300      	str	r3, [sp, #0]
    492a:	69b8      	ldr	r0, [r7, #24]
    492c:	68b9      	ldr	r1, [r7, #8]
    492e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4932:	f000 febd 	bl	56b0 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    4936:	6978      	ldr	r0, [r7, #20]
    4938:	68f9      	ldr	r1, [r7, #12]
    493a:	683a      	ldr	r2, [r7, #0]
    493c:	f001 f8f2 	bl	5b24 <pxPortInitialiseStack>
    4940:	4602      	mov	r2, r0
    4942:	69bb      	ldr	r3, [r7, #24]
    4944:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    4946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4948:	2b00      	cmp	r3, #0
    494a:	d002      	beq.n	4952 <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    494c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    494e:	69ba      	ldr	r2, [r7, #24]
    4950:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    4952:	f001 f965 	bl	5c20 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    4956:	f640 6398 	movw	r3, #3736	; 0xe98
    495a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    495e:	681b      	ldr	r3, [r3, #0]
    4960:	1c5a      	adds	r2, r3, #1
    4962:	f640 6398 	movw	r3, #3736	; 0xe98
    4966:	f2c2 0300 	movt	r3, #8192	; 0x2000
    496a:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    496c:	f640 4394 	movw	r3, #3220	; 0xc94
    4970:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4974:	681b      	ldr	r3, [r3, #0]
    4976:	2b00      	cmp	r3, #0
    4978:	d10f      	bne.n	499a <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    497a:	f640 4394 	movw	r3, #3220	; 0xc94
    497e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4982:	69ba      	ldr	r2, [r7, #24]
    4984:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    4986:	f640 6398 	movw	r3, #3736	; 0xe98
    498a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    498e:	681b      	ldr	r3, [r3, #0]
    4990:	2b01      	cmp	r3, #1
    4992:	d118      	bne.n	49c6 <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    4994:	f000 fec2 	bl	571c <prvInitialiseTaskLists>
    4998:	e015      	b.n	49c6 <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    499a:	f640 63a8 	movw	r3, #3752	; 0xea8
    499e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49a2:	681b      	ldr	r3, [r3, #0]
    49a4:	2b00      	cmp	r3, #0
    49a6:	d10e      	bne.n	49c6 <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    49a8:	f640 4394 	movw	r3, #3220	; 0xc94
    49ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49b0:	681b      	ldr	r3, [r3, #0]
    49b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    49b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    49b6:	429a      	cmp	r2, r3
    49b8:	d805      	bhi.n	49c6 <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    49ba:	f640 4394 	movw	r3, #3220	; 0xc94
    49be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49c2:	69ba      	ldr	r2, [r7, #24]
    49c4:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    49c6:	69bb      	ldr	r3, [r7, #24]
    49c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    49ca:	f640 63a0 	movw	r3, #3744	; 0xea0
    49ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49d2:	681b      	ldr	r3, [r3, #0]
    49d4:	429a      	cmp	r2, r3
    49d6:	d906      	bls.n	49e6 <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    49d8:	69bb      	ldr	r3, [r7, #24]
    49da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    49dc:	f640 63a0 	movw	r3, #3744	; 0xea0
    49e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49e4:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    49e6:	f640 63bc 	movw	r3, #3772	; 0xebc
    49ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49ee:	681b      	ldr	r3, [r3, #0]
    49f0:	1c5a      	adds	r2, r3, #1
    49f2:	f640 63bc 	movw	r3, #3772	; 0xebc
    49f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49fa:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    49fc:	69bb      	ldr	r3, [r7, #24]
    49fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4a00:	f640 63a4 	movw	r3, #3748	; 0xea4
    4a04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a08:	681b      	ldr	r3, [r3, #0]
    4a0a:	429a      	cmp	r2, r3
    4a0c:	d906      	bls.n	4a1c <xTaskGenericCreate+0x134>
    4a0e:	69bb      	ldr	r3, [r7, #24]
    4a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4a12:	f640 63a4 	movw	r3, #3748	; 0xea4
    4a16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a1a:	601a      	str	r2, [r3, #0]
    4a1c:	69bb      	ldr	r3, [r7, #24]
    4a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4a20:	4613      	mov	r3, r2
    4a22:	009b      	lsls	r3, r3, #2
    4a24:	4413      	add	r3, r2
    4a26:	009b      	lsls	r3, r3, #2
    4a28:	f640 4298 	movw	r2, #3224	; 0xc98
    4a2c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4a30:	441a      	add	r2, r3
    4a32:	69bb      	ldr	r3, [r7, #24]
    4a34:	3304      	adds	r3, #4
    4a36:	4610      	mov	r0, r2
    4a38:	4619      	mov	r1, r3
    4a3a:	f7ff fadf 	bl	3ffc <vListInsertEnd>

			xReturn = pdPASS;
    4a3e:	2301      	movs	r3, #1
    4a40:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    4a42:	69b8      	ldr	r0, [r7, #24]
    4a44:	f012 fdc2 	bl	175cc <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    4a48:	f001 f900 	bl	5c4c <vPortExitCritical>
    4a4c:	e002      	b.n	4a54 <xTaskGenericCreate+0x16c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    4a4e:	f04f 33ff 	mov.w	r3, #4294967295
    4a52:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    4a54:	69fb      	ldr	r3, [r7, #28]
    4a56:	2b01      	cmp	r3, #1
    4a58:	d111      	bne.n	4a7e <xTaskGenericCreate+0x196>
	{
		if( xSchedulerRunning != pdFALSE )
    4a5a:	f640 63a8 	movw	r3, #3752	; 0xea8
    4a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a62:	681b      	ldr	r3, [r3, #0]
    4a64:	2b00      	cmp	r3, #0
    4a66:	d00a      	beq.n	4a7e <xTaskGenericCreate+0x196>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    4a68:	f640 4394 	movw	r3, #3220	; 0xc94
    4a6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a70:	681b      	ldr	r3, [r3, #0]
    4a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4a76:	429a      	cmp	r2, r3
    4a78:	d201      	bcs.n	4a7e <xTaskGenericCreate+0x196>
			{
				portYIELD_WITHIN_API();
    4a7a:	f001 f8c3 	bl	5c04 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    4a7e:	69fb      	ldr	r3, [r7, #28]
}
    4a80:	4618      	mov	r0, r3
    4a82:	3720      	adds	r7, #32
    4a84:	46bd      	mov	sp, r7
    4a86:	bd80      	pop	{r7, pc}

00004a88 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    4a88:	b580      	push	{r7, lr}
    4a8a:	b084      	sub	sp, #16
    4a8c:	af00      	add	r7, sp, #0
    4a8e:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4a90:	f001 f8c6 	bl	5c20 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    4a94:	f640 4394 	movw	r3, #3220	; 0xc94
    4a98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a9c:	681b      	ldr	r3, [r3, #0]
    4a9e:	687a      	ldr	r2, [r7, #4]
    4aa0:	429a      	cmp	r2, r3
    4aa2:	d101      	bne.n	4aa8 <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    4aa4:	2300      	movs	r3, #0
    4aa6:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    4aa8:	687b      	ldr	r3, [r7, #4]
    4aaa:	2b00      	cmp	r3, #0
    4aac:	d105      	bne.n	4aba <vTaskDelete+0x32>
    4aae:	f640 4394 	movw	r3, #3220	; 0xc94
    4ab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ab6:	681b      	ldr	r3, [r3, #0]
    4ab8:	e000      	b.n	4abc <vTaskDelete+0x34>
    4aba:	687b      	ldr	r3, [r7, #4]
    4abc:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4abe:	68fb      	ldr	r3, [r7, #12]
    4ac0:	3304      	adds	r3, #4
    4ac2:	4618      	mov	r0, r3
    4ac4:	f7ff fafa 	bl	40bc <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4ac8:	68fb      	ldr	r3, [r7, #12]
    4aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4acc:	2b00      	cmp	r3, #0
    4ace:	d004      	beq.n	4ada <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4ad0:	68fb      	ldr	r3, [r7, #12]
    4ad2:	3318      	adds	r3, #24
    4ad4:	4618      	mov	r0, r3
    4ad6:	f7ff faf1 	bl	40bc <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    4ada:	68fb      	ldr	r3, [r7, #12]
    4adc:	3304      	adds	r3, #4
    4ade:	f640 606c 	movw	r0, #3692	; 0xe6c
    4ae2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4ae6:	4619      	mov	r1, r3
    4ae8:	f7ff fa88 	bl	3ffc <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    4aec:	f640 6380 	movw	r3, #3712	; 0xe80
    4af0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4af4:	681b      	ldr	r3, [r3, #0]
    4af6:	1c5a      	adds	r2, r3, #1
    4af8:	f640 6380 	movw	r3, #3712	; 0xe80
    4afc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b00:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    4b02:	f640 63bc 	movw	r3, #3772	; 0xebc
    4b06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b0a:	681b      	ldr	r3, [r3, #0]
    4b0c:	1c5a      	adds	r2, r3, #1
    4b0e:	f640 63bc 	movw	r3, #3772	; 0xebc
    4b12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b16:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    4b18:	f001 f898 	bl	5c4c <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    4b1c:	f640 63a8 	movw	r3, #3752	; 0xea8
    4b20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b24:	681b      	ldr	r3, [r3, #0]
    4b26:	2b00      	cmp	r3, #0
    4b28:	d004      	beq.n	4b34 <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    4b2a:	687b      	ldr	r3, [r7, #4]
    4b2c:	2b00      	cmp	r3, #0
    4b2e:	d101      	bne.n	4b34 <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    4b30:	f001 f868 	bl	5c04 <vPortYieldFromISR>
			}
		}
	}
    4b34:	3710      	adds	r7, #16
    4b36:	46bd      	mov	sp, r7
    4b38:	bd80      	pop	{r7, pc}
    4b3a:	bf00      	nop

00004b3c <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    4b3c:	b580      	push	{r7, lr}
    4b3e:	b086      	sub	sp, #24
    4b40:	af00      	add	r7, sp, #0
    4b42:	6078      	str	r0, [r7, #4]
    4b44:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    4b46:	2300      	movs	r3, #0
    4b48:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    4b4a:	f000 fa8b 	bl	5064 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    4b4e:	687b      	ldr	r3, [r7, #4]
    4b50:	681a      	ldr	r2, [r3, #0]
    4b52:	683b      	ldr	r3, [r7, #0]
    4b54:	4413      	add	r3, r2
    4b56:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    4b58:	687b      	ldr	r3, [r7, #4]
    4b5a:	681a      	ldr	r2, [r3, #0]
    4b5c:	f640 639c 	movw	r3, #3740	; 0xe9c
    4b60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b64:	681b      	ldr	r3, [r3, #0]
    4b66:	429a      	cmp	r2, r3
    4b68:	d90f      	bls.n	4b8a <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    4b6a:	687b      	ldr	r3, [r7, #4]
    4b6c:	681a      	ldr	r2, [r3, #0]
    4b6e:	693b      	ldr	r3, [r7, #16]
    4b70:	429a      	cmp	r2, r3
    4b72:	d919      	bls.n	4ba8 <vTaskDelayUntil+0x6c>
    4b74:	f640 639c 	movw	r3, #3740	; 0xe9c
    4b78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b7c:	681b      	ldr	r3, [r3, #0]
    4b7e:	693a      	ldr	r2, [r7, #16]
    4b80:	429a      	cmp	r2, r3
    4b82:	d911      	bls.n	4ba8 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4b84:	2301      	movs	r3, #1
    4b86:	617b      	str	r3, [r7, #20]
    4b88:	e00e      	b.n	4ba8 <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    4b8a:	687b      	ldr	r3, [r7, #4]
    4b8c:	681a      	ldr	r2, [r3, #0]
    4b8e:	693b      	ldr	r3, [r7, #16]
    4b90:	429a      	cmp	r2, r3
    4b92:	d807      	bhi.n	4ba4 <vTaskDelayUntil+0x68>
    4b94:	f640 639c 	movw	r3, #3740	; 0xe9c
    4b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b9c:	681b      	ldr	r3, [r3, #0]
    4b9e:	693a      	ldr	r2, [r7, #16]
    4ba0:	429a      	cmp	r2, r3
    4ba2:	d901      	bls.n	4ba8 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4ba4:	2301      	movs	r3, #1
    4ba6:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    4ba8:	687b      	ldr	r3, [r7, #4]
    4baa:	693a      	ldr	r2, [r7, #16]
    4bac:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    4bae:	697b      	ldr	r3, [r7, #20]
    4bb0:	2b00      	cmp	r3, #0
    4bb2:	d00b      	beq.n	4bcc <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4bb4:	f640 4394 	movw	r3, #3220	; 0xc94
    4bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bbc:	681b      	ldr	r3, [r3, #0]
    4bbe:	3304      	adds	r3, #4
    4bc0:	4618      	mov	r0, r3
    4bc2:	f7ff fa7b 	bl	40bc <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4bc6:	6938      	ldr	r0, [r7, #16]
    4bc8:	f000 fe3c 	bl	5844 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    4bcc:	f000 fa5c 	bl	5088 <xTaskResumeAll>
    4bd0:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4bd2:	68fb      	ldr	r3, [r7, #12]
    4bd4:	2b00      	cmp	r3, #0
    4bd6:	d101      	bne.n	4bdc <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    4bd8:	f001 f814 	bl	5c04 <vPortYieldFromISR>
		}
	}
    4bdc:	3718      	adds	r7, #24
    4bde:	46bd      	mov	sp, r7
    4be0:	bd80      	pop	{r7, pc}
    4be2:	bf00      	nop

00004be4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    4be4:	b580      	push	{r7, lr}
    4be6:	b084      	sub	sp, #16
    4be8:	af00      	add	r7, sp, #0
    4bea:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4bec:	2300      	movs	r3, #0
    4bee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    4bf0:	687b      	ldr	r3, [r7, #4]
    4bf2:	2b00      	cmp	r3, #0
    4bf4:	d018      	beq.n	4c28 <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    4bf6:	f000 fa35 	bl	5064 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    4bfa:	f640 639c 	movw	r3, #3740	; 0xe9c
    4bfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c02:	681a      	ldr	r2, [r3, #0]
    4c04:	687b      	ldr	r3, [r7, #4]
    4c06:	4413      	add	r3, r2
    4c08:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4c0a:	f640 4394 	movw	r3, #3220	; 0xc94
    4c0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c12:	681b      	ldr	r3, [r3, #0]
    4c14:	3304      	adds	r3, #4
    4c16:	4618      	mov	r0, r3
    4c18:	f7ff fa50 	bl	40bc <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4c1c:	68b8      	ldr	r0, [r7, #8]
    4c1e:	f000 fe11 	bl	5844 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    4c22:	f000 fa31 	bl	5088 <xTaskResumeAll>
    4c26:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4c28:	68fb      	ldr	r3, [r7, #12]
    4c2a:	2b00      	cmp	r3, #0
    4c2c:	d101      	bne.n	4c32 <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    4c2e:	f000 ffe9 	bl	5c04 <vPortYieldFromISR>
		}
	}
    4c32:	3710      	adds	r7, #16
    4c34:	46bd      	mov	sp, r7
    4c36:	bd80      	pop	{r7, pc}

00004c38 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    4c38:	b580      	push	{r7, lr}
    4c3a:	b084      	sub	sp, #16
    4c3c:	af00      	add	r7, sp, #0
    4c3e:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    4c40:	f000 ffee 	bl	5c20 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4c44:	687b      	ldr	r3, [r7, #4]
    4c46:	2b00      	cmp	r3, #0
    4c48:	d105      	bne.n	4c56 <uxTaskPriorityGet+0x1e>
    4c4a:	f640 4394 	movw	r3, #3220	; 0xc94
    4c4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c52:	681b      	ldr	r3, [r3, #0]
    4c54:	e000      	b.n	4c58 <uxTaskPriorityGet+0x20>
    4c56:	687b      	ldr	r3, [r7, #4]
    4c58:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    4c5a:	68fb      	ldr	r3, [r7, #12]
    4c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4c5e:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    4c60:	f000 fff4 	bl	5c4c <vPortExitCritical>

		return uxReturn;
    4c64:	68bb      	ldr	r3, [r7, #8]
	}
    4c66:	4618      	mov	r0, r3
    4c68:	3710      	adds	r7, #16
    4c6a:	46bd      	mov	sp, r7
    4c6c:	bd80      	pop	{r7, pc}
    4c6e:	bf00      	nop

00004c70 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    4c70:	b580      	push	{r7, lr}
    4c72:	b086      	sub	sp, #24
    4c74:	af00      	add	r7, sp, #0
    4c76:	6078      	str	r0, [r7, #4]
    4c78:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    4c7a:	2300      	movs	r3, #0
    4c7c:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    4c7e:	683b      	ldr	r3, [r7, #0]
    4c80:	2b13      	cmp	r3, #19
    4c82:	d901      	bls.n	4c88 <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    4c84:	2313      	movs	r3, #19
    4c86:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    4c88:	f000 ffca 	bl	5c20 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    4c8c:	f640 4394 	movw	r3, #3220	; 0xc94
    4c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c94:	681b      	ldr	r3, [r3, #0]
    4c96:	687a      	ldr	r2, [r7, #4]
    4c98:	429a      	cmp	r2, r3
    4c9a:	d101      	bne.n	4ca0 <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    4c9c:	2300      	movs	r3, #0
    4c9e:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4ca0:	687b      	ldr	r3, [r7, #4]
    4ca2:	2b00      	cmp	r3, #0
    4ca4:	d105      	bne.n	4cb2 <vTaskPrioritySet+0x42>
    4ca6:	f640 4394 	movw	r3, #3220	; 0xc94
    4caa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cae:	681b      	ldr	r3, [r3, #0]
    4cb0:	e000      	b.n	4cb4 <vTaskPrioritySet+0x44>
    4cb2:	687b      	ldr	r3, [r7, #4]
    4cb4:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    4cb6:	693b      	ldr	r3, [r7, #16]
    4cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    4cba:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    4cbc:	68fa      	ldr	r2, [r7, #12]
    4cbe:	683b      	ldr	r3, [r7, #0]
    4cc0:	429a      	cmp	r2, r3
    4cc2:	d058      	beq.n	4d76 <vTaskPrioritySet+0x106>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    4cc4:	683a      	ldr	r2, [r7, #0]
    4cc6:	68fb      	ldr	r3, [r7, #12]
    4cc8:	429a      	cmp	r2, r3
    4cca:	d905      	bls.n	4cd8 <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    4ccc:	687b      	ldr	r3, [r7, #4]
    4cce:	2b00      	cmp	r3, #0
    4cd0:	d007      	beq.n	4ce2 <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    4cd2:	2301      	movs	r3, #1
    4cd4:	617b      	str	r3, [r7, #20]
    4cd6:	e004      	b.n	4ce2 <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    4cd8:	687b      	ldr	r3, [r7, #4]
    4cda:	2b00      	cmp	r3, #0
    4cdc:	d101      	bne.n	4ce2 <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    4cde:	2301      	movs	r3, #1
    4ce0:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    4ce2:	693b      	ldr	r3, [r7, #16]
    4ce4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    4ce6:	693b      	ldr	r3, [r7, #16]
    4ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4cea:	429a      	cmp	r2, r3
    4cec:	d102      	bne.n	4cf4 <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    4cee:	693b      	ldr	r3, [r7, #16]
    4cf0:	683a      	ldr	r2, [r7, #0]
    4cf2:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    4cf4:	693b      	ldr	r3, [r7, #16]
    4cf6:	683a      	ldr	r2, [r7, #0]
    4cf8:	64da      	str	r2, [r3, #76]	; 0x4c
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    4cfa:	683b      	ldr	r3, [r7, #0]
    4cfc:	f1c3 0214 	rsb	r2, r3, #20
    4d00:	693b      	ldr	r3, [r7, #16]
    4d02:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    4d04:	693b      	ldr	r3, [r7, #16]
    4d06:	6959      	ldr	r1, [r3, #20]
    4d08:	68fa      	ldr	r2, [r7, #12]
    4d0a:	4613      	mov	r3, r2
    4d0c:	009b      	lsls	r3, r3, #2
    4d0e:	4413      	add	r3, r2
    4d10:	009b      	lsls	r3, r3, #2
    4d12:	f640 4298 	movw	r2, #3224	; 0xc98
    4d16:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4d1a:	4413      	add	r3, r2
    4d1c:	4299      	cmp	r1, r3
    4d1e:	d125      	bne.n	4d6c <vTaskPrioritySet+0xfc>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    4d20:	693b      	ldr	r3, [r7, #16]
    4d22:	3304      	adds	r3, #4
    4d24:	4618      	mov	r0, r3
    4d26:	f7ff f9c9 	bl	40bc <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4d2a:	693b      	ldr	r3, [r7, #16]
    4d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4d2e:	f640 63a4 	movw	r3, #3748	; 0xea4
    4d32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d36:	681b      	ldr	r3, [r3, #0]
    4d38:	429a      	cmp	r2, r3
    4d3a:	d906      	bls.n	4d4a <vTaskPrioritySet+0xda>
    4d3c:	693b      	ldr	r3, [r7, #16]
    4d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4d40:	f640 63a4 	movw	r3, #3748	; 0xea4
    4d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d48:	601a      	str	r2, [r3, #0]
    4d4a:	693b      	ldr	r3, [r7, #16]
    4d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4d4e:	4613      	mov	r3, r2
    4d50:	009b      	lsls	r3, r3, #2
    4d52:	4413      	add	r3, r2
    4d54:	009b      	lsls	r3, r3, #2
    4d56:	f640 4298 	movw	r2, #3224	; 0xc98
    4d5a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4d5e:	441a      	add	r2, r3
    4d60:	693b      	ldr	r3, [r7, #16]
    4d62:	3304      	adds	r3, #4
    4d64:	4610      	mov	r0, r2
    4d66:	4619      	mov	r1, r3
    4d68:	f7ff f948 	bl	3ffc <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    4d6c:	697b      	ldr	r3, [r7, #20]
    4d6e:	2b01      	cmp	r3, #1
    4d70:	d101      	bne.n	4d76 <vTaskPrioritySet+0x106>
				{
					portYIELD_WITHIN_API();
    4d72:	f000 ff47 	bl	5c04 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    4d76:	f000 ff69 	bl	5c4c <vPortExitCritical>
	}
    4d7a:	3718      	adds	r7, #24
    4d7c:	46bd      	mov	sp, r7
    4d7e:	bd80      	pop	{r7, pc}

00004d80 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    4d80:	b580      	push	{r7, lr}
    4d82:	b084      	sub	sp, #16
    4d84:	af00      	add	r7, sp, #0
    4d86:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4d88:	f000 ff4a 	bl	5c20 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    4d8c:	f640 4394 	movw	r3, #3220	; 0xc94
    4d90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d94:	681b      	ldr	r3, [r3, #0]
    4d96:	687a      	ldr	r2, [r7, #4]
    4d98:	429a      	cmp	r2, r3
    4d9a:	d101      	bne.n	4da0 <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    4d9c:	2300      	movs	r3, #0
    4d9e:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    4da0:	687b      	ldr	r3, [r7, #4]
    4da2:	2b00      	cmp	r3, #0
    4da4:	d105      	bne.n	4db2 <vTaskSuspend+0x32>
    4da6:	f640 4394 	movw	r3, #3220	; 0xc94
    4daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dae:	681b      	ldr	r3, [r3, #0]
    4db0:	e000      	b.n	4db4 <vTaskSuspend+0x34>
    4db2:	687b      	ldr	r3, [r7, #4]
    4db4:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4db6:	68fb      	ldr	r3, [r7, #12]
    4db8:	3304      	adds	r3, #4
    4dba:	4618      	mov	r0, r3
    4dbc:	f7ff f97e 	bl	40bc <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4dc0:	68fb      	ldr	r3, [r7, #12]
    4dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4dc4:	2b00      	cmp	r3, #0
    4dc6:	d004      	beq.n	4dd2 <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4dc8:	68fb      	ldr	r3, [r7, #12]
    4dca:	3318      	adds	r3, #24
    4dcc:	4618      	mov	r0, r3
    4dce:	f7ff f975 	bl	40bc <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    4dd2:	68fb      	ldr	r3, [r7, #12]
    4dd4:	3304      	adds	r3, #4
    4dd6:	f640 6084 	movw	r0, #3716	; 0xe84
    4dda:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4dde:	4619      	mov	r1, r3
    4de0:	f7ff f90c 	bl	3ffc <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    4de4:	f000 ff32 	bl	5c4c <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    4de8:	687b      	ldr	r3, [r7, #4]
    4dea:	2b00      	cmp	r3, #0
    4dec:	d11e      	bne.n	4e2c <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    4dee:	f640 63a8 	movw	r3, #3752	; 0xea8
    4df2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4df6:	681b      	ldr	r3, [r3, #0]
    4df8:	2b00      	cmp	r3, #0
    4dfa:	d002      	beq.n	4e02 <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    4dfc:	f000 ff02 	bl	5c04 <vPortYieldFromISR>
    4e00:	e014      	b.n	4e2c <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    4e02:	f640 6384 	movw	r3, #3716	; 0xe84
    4e06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e0a:	681a      	ldr	r2, [r3, #0]
    4e0c:	f640 6398 	movw	r3, #3736	; 0xe98
    4e10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e14:	681b      	ldr	r3, [r3, #0]
    4e16:	429a      	cmp	r2, r3
    4e18:	d106      	bne.n	4e28 <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    4e1a:	f640 4394 	movw	r3, #3220	; 0xc94
    4e1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e22:	2200      	movs	r2, #0
    4e24:	601a      	str	r2, [r3, #0]
    4e26:	e001      	b.n	4e2c <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    4e28:	f000 fadc 	bl	53e4 <vTaskSwitchContext>
				}
			}
		}
	}
    4e2c:	3710      	adds	r7, #16
    4e2e:	46bd      	mov	sp, r7
    4e30:	bd80      	pop	{r7, pc}
    4e32:	bf00      	nop

00004e34 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    4e34:	b480      	push	{r7}
    4e36:	b085      	sub	sp, #20
    4e38:	af00      	add	r7, sp, #0
    4e3a:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    4e3c:	2300      	movs	r3, #0
    4e3e:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    4e40:	687b      	ldr	r3, [r7, #4]
    4e42:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    4e44:	68bb      	ldr	r3, [r7, #8]
    4e46:	695a      	ldr	r2, [r3, #20]
    4e48:	f640 6384 	movw	r3, #3716	; 0xe84
    4e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e50:	429a      	cmp	r2, r3
    4e52:	d10d      	bne.n	4e70 <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    4e54:	68bb      	ldr	r3, [r7, #8]
    4e56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4e58:	f640 6358 	movw	r3, #3672	; 0xe58
    4e5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e60:	429a      	cmp	r2, r3
    4e62:	d005      	beq.n	4e70 <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    4e64:	68bb      	ldr	r3, [r7, #8]
    4e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4e68:	2b00      	cmp	r3, #0
    4e6a:	d101      	bne.n	4e70 <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    4e6c:	2301      	movs	r3, #1
    4e6e:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    4e70:	68fb      	ldr	r3, [r7, #12]
	}
    4e72:	4618      	mov	r0, r3
    4e74:	3714      	adds	r7, #20
    4e76:	46bd      	mov	sp, r7
    4e78:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e7c:	4770      	bx	lr
    4e7e:	bf00      	nop

00004e80 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    4e80:	b580      	push	{r7, lr}
    4e82:	b084      	sub	sp, #16
    4e84:	af00      	add	r7, sp, #0
    4e86:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    4e88:	687b      	ldr	r3, [r7, #4]
    4e8a:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    4e8c:	68fb      	ldr	r3, [r7, #12]
    4e8e:	2b00      	cmp	r3, #0
    4e90:	d043      	beq.n	4f1a <vTaskResume+0x9a>
    4e92:	f640 4394 	movw	r3, #3220	; 0xc94
    4e96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e9a:	681b      	ldr	r3, [r3, #0]
    4e9c:	68fa      	ldr	r2, [r7, #12]
    4e9e:	429a      	cmp	r2, r3
    4ea0:	d03b      	beq.n	4f1a <vTaskResume+0x9a>
		{
			taskENTER_CRITICAL();
    4ea2:	f000 febd 	bl	5c20 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    4ea6:	68f8      	ldr	r0, [r7, #12]
    4ea8:	f7ff ffc4 	bl	4e34 <xTaskIsTaskSuspended>
    4eac:	4603      	mov	r3, r0
    4eae:	2b01      	cmp	r3, #1
    4eb0:	d131      	bne.n	4f16 <vTaskResume+0x96>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    4eb2:	68fb      	ldr	r3, [r7, #12]
    4eb4:	3304      	adds	r3, #4
    4eb6:	4618      	mov	r0, r3
    4eb8:	f7ff f900 	bl	40bc <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4ebc:	68fb      	ldr	r3, [r7, #12]
    4ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ec0:	f640 63a4 	movw	r3, #3748	; 0xea4
    4ec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ec8:	681b      	ldr	r3, [r3, #0]
    4eca:	429a      	cmp	r2, r3
    4ecc:	d906      	bls.n	4edc <vTaskResume+0x5c>
    4ece:	68fb      	ldr	r3, [r7, #12]
    4ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ed2:	f640 63a4 	movw	r3, #3748	; 0xea4
    4ed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eda:	601a      	str	r2, [r3, #0]
    4edc:	68fb      	ldr	r3, [r7, #12]
    4ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ee0:	4613      	mov	r3, r2
    4ee2:	009b      	lsls	r3, r3, #2
    4ee4:	4413      	add	r3, r2
    4ee6:	009b      	lsls	r3, r3, #2
    4ee8:	f640 4298 	movw	r2, #3224	; 0xc98
    4eec:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4ef0:	441a      	add	r2, r3
    4ef2:	68fb      	ldr	r3, [r7, #12]
    4ef4:	3304      	adds	r3, #4
    4ef6:	4610      	mov	r0, r2
    4ef8:	4619      	mov	r1, r3
    4efa:	f7ff f87f 	bl	3ffc <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4efe:	68fb      	ldr	r3, [r7, #12]
    4f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4f02:	f640 4394 	movw	r3, #3220	; 0xc94
    4f06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f0a:	681b      	ldr	r3, [r3, #0]
    4f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4f0e:	429a      	cmp	r2, r3
    4f10:	d301      	bcc.n	4f16 <vTaskResume+0x96>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    4f12:	f000 fe77 	bl	5c04 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    4f16:	f000 fe99 	bl	5c4c <vPortExitCritical>
		}
	}
    4f1a:	3710      	adds	r7, #16
    4f1c:	46bd      	mov	sp, r7
    4f1e:	bd80      	pop	{r7, pc}

00004f20 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    4f20:	b580      	push	{r7, lr}
    4f22:	b086      	sub	sp, #24
    4f24:	af00      	add	r7, sp, #0
    4f26:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    4f28:	2300      	movs	r3, #0
    4f2a:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    4f2c:	687b      	ldr	r3, [r7, #4]
    4f2e:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4f30:	2300      	movs	r3, #0
    4f32:	60fb      	str	r3, [r7, #12]
    4f34:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4f38:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    4f3c:	6938      	ldr	r0, [r7, #16]
    4f3e:	f7ff ff79 	bl	4e34 <xTaskIsTaskSuspended>
    4f42:	4603      	mov	r3, r0
    4f44:	2b01      	cmp	r3, #1
    4f46:	d144      	bne.n	4fd2 <xTaskResumeFromISR+0xb2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4f48:	f640 63ac 	movw	r3, #3756	; 0xeac
    4f4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f50:	681b      	ldr	r3, [r3, #0]
    4f52:	2b00      	cmp	r3, #0
    4f54:	d134      	bne.n	4fc0 <xTaskResumeFromISR+0xa0>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    4f56:	693b      	ldr	r3, [r7, #16]
    4f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4f5a:	f640 4394 	movw	r3, #3220	; 0xc94
    4f5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f62:	681b      	ldr	r3, [r3, #0]
    4f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4f66:	429a      	cmp	r2, r3
    4f68:	bf34      	ite	cc
    4f6a:	2300      	movcc	r3, #0
    4f6c:	2301      	movcs	r3, #1
    4f6e:	b2db      	uxtb	r3, r3
    4f70:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    4f72:	693b      	ldr	r3, [r7, #16]
    4f74:	3304      	adds	r3, #4
    4f76:	4618      	mov	r0, r3
    4f78:	f7ff f8a0 	bl	40bc <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4f7c:	693b      	ldr	r3, [r7, #16]
    4f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4f80:	f640 63a4 	movw	r3, #3748	; 0xea4
    4f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f88:	681b      	ldr	r3, [r3, #0]
    4f8a:	429a      	cmp	r2, r3
    4f8c:	d906      	bls.n	4f9c <xTaskResumeFromISR+0x7c>
    4f8e:	693b      	ldr	r3, [r7, #16]
    4f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4f92:	f640 63a4 	movw	r3, #3748	; 0xea4
    4f96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f9a:	601a      	str	r2, [r3, #0]
    4f9c:	693b      	ldr	r3, [r7, #16]
    4f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4fa0:	4613      	mov	r3, r2
    4fa2:	009b      	lsls	r3, r3, #2
    4fa4:	4413      	add	r3, r2
    4fa6:	009b      	lsls	r3, r3, #2
    4fa8:	f640 4298 	movw	r2, #3224	; 0xc98
    4fac:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4fb0:	441a      	add	r2, r3
    4fb2:	693b      	ldr	r3, [r7, #16]
    4fb4:	3304      	adds	r3, #4
    4fb6:	4610      	mov	r0, r2
    4fb8:	4619      	mov	r1, r3
    4fba:	f7ff f81f 	bl	3ffc <vListInsertEnd>
    4fbe:	e008      	b.n	4fd2 <xTaskResumeFromISR+0xb2>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    4fc0:	693b      	ldr	r3, [r7, #16]
    4fc2:	3318      	adds	r3, #24
    4fc4:	f640 6058 	movw	r0, #3672	; 0xe58
    4fc8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4fcc:	4619      	mov	r1, r3
    4fce:	f7ff f815 	bl	3ffc <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4fd2:	f04f 0000 	mov.w	r0, #0
    4fd6:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    4fda:	697b      	ldr	r3, [r7, #20]
	}
    4fdc:	4618      	mov	r0, r3
    4fde:	3718      	adds	r7, #24
    4fe0:	46bd      	mov	sp, r7
    4fe2:	bd80      	pop	{r7, pc}

00004fe4 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    4fe4:	b580      	push	{r7, lr}
    4fe6:	b086      	sub	sp, #24
    4fe8:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    4fea:	2300      	movs	r3, #0
    4fec:	9300      	str	r3, [sp, #0]
    4fee:	2300      	movs	r3, #0
    4ff0:	9301      	str	r3, [sp, #4]
    4ff2:	2300      	movs	r3, #0
    4ff4:	9302      	str	r3, [sp, #8]
    4ff6:	2300      	movs	r3, #0
    4ff8:	9303      	str	r3, [sp, #12]
    4ffa:	f245 609d 	movw	r0, #22173	; 0x569d
    4ffe:	f2c0 0000 	movt	r0, #0
    5002:	f648 1188 	movw	r1, #35208	; 0x8988
    5006:	f2c0 0101 	movt	r1, #1
    500a:	2280      	movs	r2, #128	; 0x80
    500c:	2300      	movs	r3, #0
    500e:	f7ff fc6b 	bl	48e8 <xTaskGenericCreate>
    5012:	6078      	str	r0, [r7, #4]
            
		}
	}
	#endif

	if( xReturn == pdPASS )
    5014:	687b      	ldr	r3, [r7, #4]
    5016:	2b01      	cmp	r3, #1
    5018:	d111      	bne.n	503e <vTaskStartScheduler+0x5a>
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */

		portDISABLE_INTERRUPTS();
    501a:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    501e:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    5022:	f640 63a8 	movw	r3, #3752	; 0xea8
    5026:	f2c2 0300 	movt	r3, #8192	; 0x2000
    502a:	2201      	movs	r2, #1
    502c:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    502e:	f640 639c 	movw	r3, #3740	; 0xe9c
    5032:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5036:	2200      	movs	r2, #0
    5038:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    503a:	f000 fdb5 	bl	5ba8 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    503e:	3708      	adds	r7, #8
    5040:	46bd      	mov	sp, r7
    5042:	bd80      	pop	{r7, pc}

00005044 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    5044:	b580      	push	{r7, lr}
    5046:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    5048:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    504c:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    5050:	f640 63a8 	movw	r3, #3752	; 0xea8
    5054:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5058:	2200      	movs	r2, #0
    505a:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    505c:	f000 fdcc 	bl	5bf8 <vPortEndScheduler>
}
    5060:	bd80      	pop	{r7, pc}
    5062:	bf00      	nop

00005064 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    5064:	b480      	push	{r7}
    5066:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    5068:	f640 63ac 	movw	r3, #3756	; 0xeac
    506c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5070:	681b      	ldr	r3, [r3, #0]
    5072:	1c5a      	adds	r2, r3, #1
    5074:	f640 63ac 	movw	r3, #3756	; 0xeac
    5078:	f2c2 0300 	movt	r3, #8192	; 0x2000
    507c:	601a      	str	r2, [r3, #0]
}
    507e:	46bd      	mov	sp, r7
    5080:	f85d 7b04 	ldr.w	r7, [sp], #4
    5084:	4770      	bx	lr
    5086:	bf00      	nop

00005088 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    5088:	b590      	push	{r4, r7, lr}
    508a:	b083      	sub	sp, #12
    508c:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    508e:	2300      	movs	r3, #0
    5090:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    5092:	f000 fdc5 	bl	5c20 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    5096:	f640 63ac 	movw	r3, #3756	; 0xeac
    509a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    509e:	681b      	ldr	r3, [r3, #0]
    50a0:	1e5a      	subs	r2, r3, #1
    50a2:	f640 63ac 	movw	r3, #3756	; 0xeac
    50a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50aa:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    50ac:	f640 63ac 	movw	r3, #3756	; 0xeac
    50b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50b4:	681b      	ldr	r3, [r3, #0]
    50b6:	2b00      	cmp	r3, #0
    50b8:	d177      	bne.n	51aa <xTaskResumeAll+0x122>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    50ba:	f640 6398 	movw	r3, #3736	; 0xe98
    50be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50c2:	681b      	ldr	r3, [r3, #0]
    50c4:	2b00      	cmp	r3, #0
    50c6:	d070      	beq.n	51aa <xTaskResumeAll+0x122>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    50c8:	2300      	movs	r3, #0
    50ca:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    50cc:	e036      	b.n	513c <xTaskResumeAll+0xb4>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    50ce:	f640 6358 	movw	r3, #3672	; 0xe58
    50d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50d6:	68db      	ldr	r3, [r3, #12]
    50d8:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    50da:	f104 0318 	add.w	r3, r4, #24
    50de:	4618      	mov	r0, r3
    50e0:	f7fe ffec 	bl	40bc <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    50e4:	1d23      	adds	r3, r4, #4
    50e6:	4618      	mov	r0, r3
    50e8:	f7fe ffe8 	bl	40bc <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    50ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    50ee:	f640 63a4 	movw	r3, #3748	; 0xea4
    50f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50f6:	681b      	ldr	r3, [r3, #0]
    50f8:	429a      	cmp	r2, r3
    50fa:	d905      	bls.n	5108 <xTaskResumeAll+0x80>
    50fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    50fe:	f640 63a4 	movw	r3, #3748	; 0xea4
    5102:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5106:	601a      	str	r2, [r3, #0]
    5108:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    510a:	4613      	mov	r3, r2
    510c:	009b      	lsls	r3, r3, #2
    510e:	4413      	add	r3, r2
    5110:	009b      	lsls	r3, r3, #2
    5112:	f640 4298 	movw	r2, #3224	; 0xc98
    5116:	f2c2 0200 	movt	r2, #8192	; 0x2000
    511a:	441a      	add	r2, r3
    511c:	1d23      	adds	r3, r4, #4
    511e:	4610      	mov	r0, r2
    5120:	4619      	mov	r1, r3
    5122:	f7fe ff6b 	bl	3ffc <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    5126:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5128:	f640 4394 	movw	r3, #3220	; 0xc94
    512c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5130:	681b      	ldr	r3, [r3, #0]
    5132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5134:	429a      	cmp	r2, r3
    5136:	d301      	bcc.n	513c <xTaskResumeAll+0xb4>
					{
						xYieldRequired = pdTRUE;
    5138:	2301      	movs	r3, #1
    513a:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    513c:	f640 6358 	movw	r3, #3672	; 0xe58
    5140:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5144:	681b      	ldr	r3, [r3, #0]
    5146:	2b00      	cmp	r3, #0
    5148:	d1c1      	bne.n	50ce <xTaskResumeAll+0x46>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    514a:	f640 63b0 	movw	r3, #3760	; 0xeb0
    514e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5152:	681b      	ldr	r3, [r3, #0]
    5154:	2b00      	cmp	r3, #0
    5156:	d014      	beq.n	5182 <xTaskResumeAll+0xfa>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    5158:	e00c      	b.n	5174 <xTaskResumeAll+0xec>
					{
						vTaskIncrementTick();
    515a:	f000 f865 	bl	5228 <vTaskIncrementTick>
						--uxMissedTicks;
    515e:	f640 63b0 	movw	r3, #3760	; 0xeb0
    5162:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5166:	681b      	ldr	r3, [r3, #0]
    5168:	1e5a      	subs	r2, r3, #1
    516a:	f640 63b0 	movw	r3, #3760	; 0xeb0
    516e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5172:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    5174:	f640 63b0 	movw	r3, #3760	; 0xeb0
    5178:	f2c2 0300 	movt	r3, #8192	; 0x2000
    517c:	681b      	ldr	r3, [r3, #0]
    517e:	2b00      	cmp	r3, #0
    5180:	d1eb      	bne.n	515a <xTaskResumeAll+0xd2>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    5182:	683b      	ldr	r3, [r7, #0]
    5184:	2b01      	cmp	r3, #1
    5186:	d006      	beq.n	5196 <xTaskResumeAll+0x10e>
    5188:	f640 63b4 	movw	r3, #3764	; 0xeb4
    518c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5190:	681b      	ldr	r3, [r3, #0]
    5192:	2b01      	cmp	r3, #1
    5194:	d109      	bne.n	51aa <xTaskResumeAll+0x122>
				{
					xAlreadyYielded = pdTRUE;
    5196:	2301      	movs	r3, #1
    5198:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    519a:	f640 63b4 	movw	r3, #3764	; 0xeb4
    519e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51a2:	2200      	movs	r2, #0
    51a4:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    51a6:	f000 fd2d 	bl	5c04 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    51aa:	f000 fd4f 	bl	5c4c <vPortExitCritical>

	return xAlreadyYielded;
    51ae:	687b      	ldr	r3, [r7, #4]
}
    51b0:	4618      	mov	r0, r3
    51b2:	370c      	adds	r7, #12
    51b4:	46bd      	mov	sp, r7
    51b6:	bd90      	pop	{r4, r7, pc}

000051b8 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    51b8:	b580      	push	{r7, lr}
    51ba:	b082      	sub	sp, #8
    51bc:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    51be:	f000 fd2f 	bl	5c20 <vPortEnterCritical>
	{
		xTicks = xTickCount;
    51c2:	f640 639c 	movw	r3, #3740	; 0xe9c
    51c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51ca:	681b      	ldr	r3, [r3, #0]
    51cc:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    51ce:	f000 fd3d 	bl	5c4c <vPortExitCritical>

	return xTicks;
    51d2:	687b      	ldr	r3, [r7, #4]
}
    51d4:	4618      	mov	r0, r3
    51d6:	3708      	adds	r7, #8
    51d8:	46bd      	mov	sp, r7
    51da:	bd80      	pop	{r7, pc}

000051dc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    51dc:	b480      	push	{r7}
    51de:	b083      	sub	sp, #12
    51e0:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    51e2:	2300      	movs	r3, #0
    51e4:	607b      	str	r3, [r7, #4]
    51e6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    51ea:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    51ee:	f640 639c 	movw	r3, #3740	; 0xe9c
    51f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51f6:	681b      	ldr	r3, [r3, #0]
    51f8:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    51fa:	f04f 0000 	mov.w	r0, #0
    51fe:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    5202:	683b      	ldr	r3, [r7, #0]
}
    5204:	4618      	mov	r0, r3
    5206:	370c      	adds	r7, #12
    5208:	46bd      	mov	sp, r7
    520a:	f85d 7b04 	ldr.w	r7, [sp], #4
    520e:	4770      	bx	lr

00005210 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    5210:	b480      	push	{r7}
    5212:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    5214:	f640 6398 	movw	r3, #3736	; 0xe98
    5218:	f2c2 0300 	movt	r3, #8192	; 0x2000
    521c:	681b      	ldr	r3, [r3, #0]
}
    521e:	4618      	mov	r0, r3
    5220:	46bd      	mov	sp, r7
    5222:	f85d 7b04 	ldr.w	r7, [sp], #4
    5226:	4770      	bx	lr

00005228 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    5228:	b580      	push	{r7, lr}
    522a:	b084      	sub	sp, #16
    522c:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    522e:	f640 63ac 	movw	r3, #3756	; 0xeac
    5232:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5236:	681b      	ldr	r3, [r3, #0]
    5238:	2b00      	cmp	r3, #0
    523a:	f040 80b9 	bne.w	53b0 <vTaskIncrementTick+0x188>
	{
		++xTickCount;
    523e:	f640 639c 	movw	r3, #3740	; 0xe9c
    5242:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5246:	681b      	ldr	r3, [r3, #0]
    5248:	1c5a      	adds	r2, r3, #1
    524a:	f640 639c 	movw	r3, #3740	; 0xe9c
    524e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5252:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    5254:	f640 639c 	movw	r3, #3740	; 0xe9c
    5258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    525c:	681b      	ldr	r3, [r3, #0]
    525e:	2b00      	cmp	r3, #0
    5260:	d13f      	bne.n	52e2 <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    5262:	f640 6350 	movw	r3, #3664	; 0xe50
    5266:	f2c2 0300 	movt	r3, #8192	; 0x2000
    526a:	681b      	ldr	r3, [r3, #0]
    526c:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    526e:	f640 6354 	movw	r3, #3668	; 0xe54
    5272:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5276:	681a      	ldr	r2, [r3, #0]
    5278:	f640 6350 	movw	r3, #3664	; 0xe50
    527c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5280:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    5282:	f640 6354 	movw	r3, #3668	; 0xe54
    5286:	f2c2 0300 	movt	r3, #8192	; 0x2000
    528a:	68fa      	ldr	r2, [r7, #12]
    528c:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    528e:	f640 63b8 	movw	r3, #3768	; 0xeb8
    5292:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5296:	681b      	ldr	r3, [r3, #0]
    5298:	1c5a      	adds	r2, r3, #1
    529a:	f640 63b8 	movw	r3, #3768	; 0xeb8
    529e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52a2:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    52a4:	f640 6350 	movw	r3, #3664	; 0xe50
    52a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52ac:	681b      	ldr	r3, [r3, #0]
    52ae:	681b      	ldr	r3, [r3, #0]
    52b0:	2b00      	cmp	r3, #0
    52b2:	d107      	bne.n	52c4 <vTaskIncrementTick+0x9c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    52b4:	f240 33e0 	movw	r3, #992	; 0x3e0
    52b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52bc:	f04f 32ff 	mov.w	r2, #4294967295
    52c0:	601a      	str	r2, [r3, #0]
    52c2:	e00e      	b.n	52e2 <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    52c4:	f640 6350 	movw	r3, #3664	; 0xe50
    52c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52cc:	681b      	ldr	r3, [r3, #0]
    52ce:	68db      	ldr	r3, [r3, #12]
    52d0:	68db      	ldr	r3, [r3, #12]
    52d2:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    52d4:	68bb      	ldr	r3, [r7, #8]
    52d6:	685a      	ldr	r2, [r3, #4]
    52d8:	f240 33e0 	movw	r3, #992	; 0x3e0
    52dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52e0:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    52e2:	f640 639c 	movw	r3, #3740	; 0xe9c
    52e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52ea:	681a      	ldr	r2, [r3, #0]
    52ec:	f240 33e0 	movw	r3, #992	; 0x3e0
    52f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52f4:	681b      	ldr	r3, [r3, #0]
    52f6:	429a      	cmp	r2, r3
    52f8:	d359      	bcc.n	53ae <vTaskIncrementTick+0x186>
    52fa:	f640 6350 	movw	r3, #3664	; 0xe50
    52fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5302:	681b      	ldr	r3, [r3, #0]
    5304:	681b      	ldr	r3, [r3, #0]
    5306:	2b00      	cmp	r3, #0
    5308:	d107      	bne.n	531a <vTaskIncrementTick+0xf2>
    530a:	f240 33e0 	movw	r3, #992	; 0x3e0
    530e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5312:	f04f 32ff 	mov.w	r2, #4294967295
    5316:	601a      	str	r2, [r3, #0]
    5318:	e049      	b.n	53ae <vTaskIncrementTick+0x186>
    531a:	f640 6350 	movw	r3, #3664	; 0xe50
    531e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5322:	681b      	ldr	r3, [r3, #0]
    5324:	68db      	ldr	r3, [r3, #12]
    5326:	68db      	ldr	r3, [r3, #12]
    5328:	60bb      	str	r3, [r7, #8]
    532a:	68bb      	ldr	r3, [r7, #8]
    532c:	685b      	ldr	r3, [r3, #4]
    532e:	607b      	str	r3, [r7, #4]
    5330:	f640 639c 	movw	r3, #3740	; 0xe9c
    5334:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5338:	681a      	ldr	r2, [r3, #0]
    533a:	687b      	ldr	r3, [r7, #4]
    533c:	429a      	cmp	r2, r3
    533e:	d206      	bcs.n	534e <vTaskIncrementTick+0x126>
    5340:	f240 33e0 	movw	r3, #992	; 0x3e0
    5344:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5348:	687a      	ldr	r2, [r7, #4]
    534a:	601a      	str	r2, [r3, #0]
    534c:	e02f      	b.n	53ae <vTaskIncrementTick+0x186>
    534e:	68bb      	ldr	r3, [r7, #8]
    5350:	3304      	adds	r3, #4
    5352:	4618      	mov	r0, r3
    5354:	f7fe feb2 	bl	40bc <vListRemove>
    5358:	68bb      	ldr	r3, [r7, #8]
    535a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    535c:	2b00      	cmp	r3, #0
    535e:	d004      	beq.n	536a <vTaskIncrementTick+0x142>
    5360:	68bb      	ldr	r3, [r7, #8]
    5362:	3318      	adds	r3, #24
    5364:	4618      	mov	r0, r3
    5366:	f7fe fea9 	bl	40bc <vListRemove>
    536a:	68bb      	ldr	r3, [r7, #8]
    536c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    536e:	f640 63a4 	movw	r3, #3748	; 0xea4
    5372:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5376:	681b      	ldr	r3, [r3, #0]
    5378:	429a      	cmp	r2, r3
    537a:	d906      	bls.n	538a <vTaskIncrementTick+0x162>
    537c:	68bb      	ldr	r3, [r7, #8]
    537e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5380:	f640 63a4 	movw	r3, #3748	; 0xea4
    5384:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5388:	601a      	str	r2, [r3, #0]
    538a:	68bb      	ldr	r3, [r7, #8]
    538c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    538e:	4613      	mov	r3, r2
    5390:	009b      	lsls	r3, r3, #2
    5392:	4413      	add	r3, r2
    5394:	009b      	lsls	r3, r3, #2
    5396:	f640 4298 	movw	r2, #3224	; 0xc98
    539a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    539e:	441a      	add	r2, r3
    53a0:	68bb      	ldr	r3, [r7, #8]
    53a2:	3304      	adds	r3, #4
    53a4:	4610      	mov	r0, r2
    53a6:	4619      	mov	r1, r3
    53a8:	f7fe fe28 	bl	3ffc <vListInsertEnd>
    53ac:	e7a5      	b.n	52fa <vTaskIncrementTick+0xd2>
    53ae:	e00c      	b.n	53ca <vTaskIncrementTick+0x1a2>
	}
	else
	{
		++uxMissedTicks;
    53b0:	f640 63b0 	movw	r3, #3760	; 0xeb0
    53b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53b8:	681b      	ldr	r3, [r3, #0]
    53ba:	1c5a      	adds	r2, r3, #1
    53bc:	f640 63b0 	movw	r3, #3760	; 0xeb0
    53c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53c4:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    53c6:	f012 f913 	bl	175f0 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    53ca:	f640 63b0 	movw	r3, #3760	; 0xeb0
    53ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53d2:	681b      	ldr	r3, [r3, #0]
    53d4:	2b00      	cmp	r3, #0
    53d6:	d101      	bne.n	53dc <vTaskIncrementTick+0x1b4>
		{
			vApplicationTickHook();
    53d8:	f012 f90a 	bl	175f0 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    53dc:	3710      	adds	r7, #16
    53de:	46bd      	mov	sp, r7
    53e0:	bd80      	pop	{r7, pc}
    53e2:	bf00      	nop

000053e4 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    53e4:	b580      	push	{r7, lr}
    53e6:	b082      	sub	sp, #8
    53e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    53ea:	f640 63ac 	movw	r3, #3756	; 0xeac
    53ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53f2:	681b      	ldr	r3, [r3, #0]
    53f4:	2b00      	cmp	r3, #0
    53f6:	d006      	beq.n	5406 <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    53f8:	f640 63b4 	movw	r3, #3764	; 0xeb4
    53fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5400:	2201      	movs	r2, #1
    5402:	601a      	str	r2, [r3, #0]
    5404:	e047      	b.n	5496 <vTaskSwitchContext+0xb2>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    5406:	f012 f8ed 	bl	175e4 <myTraceSwitchedOut>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    540a:	e00a      	b.n	5422 <vTaskSwitchContext+0x3e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    540c:	f640 63a4 	movw	r3, #3748	; 0xea4
    5410:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5414:	681b      	ldr	r3, [r3, #0]
    5416:	1e5a      	subs	r2, r3, #1
    5418:	f640 63a4 	movw	r3, #3748	; 0xea4
    541c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5420:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    5422:	f640 63a4 	movw	r3, #3748	; 0xea4
    5426:	f2c2 0300 	movt	r3, #8192	; 0x2000
    542a:	6819      	ldr	r1, [r3, #0]
    542c:	f640 4298 	movw	r2, #3224	; 0xc98
    5430:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5434:	460b      	mov	r3, r1
    5436:	009b      	lsls	r3, r3, #2
    5438:	440b      	add	r3, r1
    543a:	009b      	lsls	r3, r3, #2
    543c:	4413      	add	r3, r2
    543e:	681b      	ldr	r3, [r3, #0]
    5440:	2b00      	cmp	r3, #0
    5442:	d0e3      	beq.n	540c <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    5444:	f640 63a4 	movw	r3, #3748	; 0xea4
    5448:	f2c2 0300 	movt	r3, #8192	; 0x2000
    544c:	681a      	ldr	r2, [r3, #0]
    544e:	4613      	mov	r3, r2
    5450:	009b      	lsls	r3, r3, #2
    5452:	4413      	add	r3, r2
    5454:	009b      	lsls	r3, r3, #2
    5456:	f640 4298 	movw	r2, #3224	; 0xc98
    545a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    545e:	4413      	add	r3, r2
    5460:	607b      	str	r3, [r7, #4]
    5462:	687b      	ldr	r3, [r7, #4]
    5464:	685b      	ldr	r3, [r3, #4]
    5466:	685a      	ldr	r2, [r3, #4]
    5468:	687b      	ldr	r3, [r7, #4]
    546a:	605a      	str	r2, [r3, #4]
    546c:	687b      	ldr	r3, [r7, #4]
    546e:	685a      	ldr	r2, [r3, #4]
    5470:	687b      	ldr	r3, [r7, #4]
    5472:	3308      	adds	r3, #8
    5474:	429a      	cmp	r2, r3
    5476:	d104      	bne.n	5482 <vTaskSwitchContext+0x9e>
    5478:	687b      	ldr	r3, [r7, #4]
    547a:	685b      	ldr	r3, [r3, #4]
    547c:	685a      	ldr	r2, [r3, #4]
    547e:	687b      	ldr	r3, [r7, #4]
    5480:	605a      	str	r2, [r3, #4]
    5482:	687b      	ldr	r3, [r7, #4]
    5484:	685b      	ldr	r3, [r3, #4]
    5486:	68da      	ldr	r2, [r3, #12]
    5488:	f640 4394 	movw	r3, #3220	; 0xc94
    548c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5490:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
    5492:	f012 f8a1 	bl	175d8 <myTraceSwitchedIn>
	}
}
    5496:	3708      	adds	r7, #8
    5498:	46bd      	mov	sp, r7
    549a:	bd80      	pop	{r7, pc}

0000549c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    549c:	b580      	push	{r7, lr}
    549e:	b084      	sub	sp, #16
    54a0:	af00      	add	r7, sp, #0
    54a2:	6078      	str	r0, [r7, #4]
    54a4:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    54a6:	f640 4394 	movw	r3, #3220	; 0xc94
    54aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54ae:	681b      	ldr	r3, [r3, #0]
    54b0:	3318      	adds	r3, #24
    54b2:	6878      	ldr	r0, [r7, #4]
    54b4:	4619      	mov	r1, r3
    54b6:	f7fe fdc9 	bl	404c <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    54ba:	f640 4394 	movw	r3, #3220	; 0xc94
    54be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54c2:	681b      	ldr	r3, [r3, #0]
    54c4:	3304      	adds	r3, #4
    54c6:	4618      	mov	r0, r3
    54c8:	f7fe fdf8 	bl	40bc <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    54cc:	683b      	ldr	r3, [r7, #0]
    54ce:	f1b3 3fff 	cmp.w	r3, #4294967295
    54d2:	d10d      	bne.n	54f0 <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    54d4:	f640 4394 	movw	r3, #3220	; 0xc94
    54d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54dc:	681b      	ldr	r3, [r3, #0]
    54de:	3304      	adds	r3, #4
    54e0:	f640 6084 	movw	r0, #3716	; 0xe84
    54e4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    54e8:	4619      	mov	r1, r3
    54ea:	f7fe fd87 	bl	3ffc <vListInsertEnd>
    54ee:	e00a      	b.n	5506 <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    54f0:	f640 639c 	movw	r3, #3740	; 0xe9c
    54f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54f8:	681a      	ldr	r2, [r3, #0]
    54fa:	683b      	ldr	r3, [r7, #0]
    54fc:	4413      	add	r3, r2
    54fe:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    5500:	68f8      	ldr	r0, [r7, #12]
    5502:	f000 f99f 	bl	5844 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    5506:	3710      	adds	r7, #16
    5508:	46bd      	mov	sp, r7
    550a:	bd80      	pop	{r7, pc}

0000550c <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    550c:	b580      	push	{r7, lr}
    550e:	b084      	sub	sp, #16
    5510:	af00      	add	r7, sp, #0
    5512:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    5514:	687b      	ldr	r3, [r7, #4]
    5516:	68db      	ldr	r3, [r3, #12]
    5518:	68db      	ldr	r3, [r3, #12]
    551a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    551c:	68bb      	ldr	r3, [r7, #8]
    551e:	3318      	adds	r3, #24
    5520:	4618      	mov	r0, r3
    5522:	f7fe fdcb 	bl	40bc <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    5526:	f640 63ac 	movw	r3, #3756	; 0xeac
    552a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    552e:	681b      	ldr	r3, [r3, #0]
    5530:	2b00      	cmp	r3, #0
    5532:	d126      	bne.n	5582 <xTaskRemoveFromEventList+0x76>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    5534:	68bb      	ldr	r3, [r7, #8]
    5536:	3304      	adds	r3, #4
    5538:	4618      	mov	r0, r3
    553a:	f7fe fdbf 	bl	40bc <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    553e:	68bb      	ldr	r3, [r7, #8]
    5540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5542:	f640 63a4 	movw	r3, #3748	; 0xea4
    5546:	f2c2 0300 	movt	r3, #8192	; 0x2000
    554a:	681b      	ldr	r3, [r3, #0]
    554c:	429a      	cmp	r2, r3
    554e:	d906      	bls.n	555e <xTaskRemoveFromEventList+0x52>
    5550:	68bb      	ldr	r3, [r7, #8]
    5552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5554:	f640 63a4 	movw	r3, #3748	; 0xea4
    5558:	f2c2 0300 	movt	r3, #8192	; 0x2000
    555c:	601a      	str	r2, [r3, #0]
    555e:	68bb      	ldr	r3, [r7, #8]
    5560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5562:	4613      	mov	r3, r2
    5564:	009b      	lsls	r3, r3, #2
    5566:	4413      	add	r3, r2
    5568:	009b      	lsls	r3, r3, #2
    556a:	f640 4298 	movw	r2, #3224	; 0xc98
    556e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5572:	441a      	add	r2, r3
    5574:	68bb      	ldr	r3, [r7, #8]
    5576:	3304      	adds	r3, #4
    5578:	4610      	mov	r0, r2
    557a:	4619      	mov	r1, r3
    557c:	f7fe fd3e 	bl	3ffc <vListInsertEnd>
    5580:	e008      	b.n	5594 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    5582:	68bb      	ldr	r3, [r7, #8]
    5584:	3318      	adds	r3, #24
    5586:	f640 6058 	movw	r0, #3672	; 0xe58
    558a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    558e:	4619      	mov	r1, r3
    5590:	f7fe fd34 	bl	3ffc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    5594:	68bb      	ldr	r3, [r7, #8]
    5596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5598:	f640 4394 	movw	r3, #3220	; 0xc94
    559c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55a0:	681b      	ldr	r3, [r3, #0]
    55a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    55a4:	429a      	cmp	r2, r3
    55a6:	d302      	bcc.n	55ae <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    55a8:	2301      	movs	r3, #1
    55aa:	60fb      	str	r3, [r7, #12]
    55ac:	e001      	b.n	55b2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
    55ae:	2300      	movs	r3, #0
    55b0:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    55b2:	68fb      	ldr	r3, [r7, #12]
}
    55b4:	4618      	mov	r0, r3
    55b6:	3710      	adds	r7, #16
    55b8:	46bd      	mov	sp, r7
    55ba:	bd80      	pop	{r7, pc}

000055bc <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    55bc:	b480      	push	{r7}
    55be:	b083      	sub	sp, #12
    55c0:	af00      	add	r7, sp, #0
    55c2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    55c4:	f640 63b8 	movw	r3, #3768	; 0xeb8
    55c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55cc:	681a      	ldr	r2, [r3, #0]
    55ce:	687b      	ldr	r3, [r7, #4]
    55d0:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    55d2:	f640 639c 	movw	r3, #3740	; 0xe9c
    55d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55da:	681a      	ldr	r2, [r3, #0]
    55dc:	687b      	ldr	r3, [r7, #4]
    55de:	605a      	str	r2, [r3, #4]
}
    55e0:	370c      	adds	r7, #12
    55e2:	46bd      	mov	sp, r7
    55e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    55e8:	4770      	bx	lr
    55ea:	bf00      	nop

000055ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    55ec:	b580      	push	{r7, lr}
    55ee:	b084      	sub	sp, #16
    55f0:	af00      	add	r7, sp, #0
    55f2:	6078      	str	r0, [r7, #4]
    55f4:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    55f6:	f000 fb13 	bl	5c20 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    55fa:	683b      	ldr	r3, [r7, #0]
    55fc:	681b      	ldr	r3, [r3, #0]
    55fe:	f1b3 3fff 	cmp.w	r3, #4294967295
    5602:	d102      	bne.n	560a <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    5604:	2300      	movs	r3, #0
    5606:	60fb      	str	r3, [r7, #12]
    5608:	e035      	b.n	5676 <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    560a:	687b      	ldr	r3, [r7, #4]
    560c:	681a      	ldr	r2, [r3, #0]
    560e:	f640 63b8 	movw	r3, #3768	; 0xeb8
    5612:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5616:	681b      	ldr	r3, [r3, #0]
    5618:	429a      	cmp	r2, r3
    561a:	d00b      	beq.n	5634 <xTaskCheckForTimeOut+0x48>
    561c:	687b      	ldr	r3, [r7, #4]
    561e:	685a      	ldr	r2, [r3, #4]
    5620:	f640 639c 	movw	r3, #3740	; 0xe9c
    5624:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5628:	681b      	ldr	r3, [r3, #0]
    562a:	429a      	cmp	r2, r3
    562c:	d802      	bhi.n	5634 <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    562e:	2301      	movs	r3, #1
    5630:	60fb      	str	r3, [r7, #12]
    5632:	e020      	b.n	5676 <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    5634:	f640 639c 	movw	r3, #3740	; 0xe9c
    5638:	f2c2 0300 	movt	r3, #8192	; 0x2000
    563c:	681a      	ldr	r2, [r3, #0]
    563e:	687b      	ldr	r3, [r7, #4]
    5640:	685b      	ldr	r3, [r3, #4]
    5642:	1ad2      	subs	r2, r2, r3
    5644:	683b      	ldr	r3, [r7, #0]
    5646:	681b      	ldr	r3, [r3, #0]
    5648:	429a      	cmp	r2, r3
    564a:	d212      	bcs.n	5672 <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    564c:	683b      	ldr	r3, [r7, #0]
    564e:	681a      	ldr	r2, [r3, #0]
    5650:	687b      	ldr	r3, [r7, #4]
    5652:	6859      	ldr	r1, [r3, #4]
    5654:	f640 639c 	movw	r3, #3740	; 0xe9c
    5658:	f2c2 0300 	movt	r3, #8192	; 0x2000
    565c:	681b      	ldr	r3, [r3, #0]
    565e:	1acb      	subs	r3, r1, r3
    5660:	441a      	add	r2, r3
    5662:	683b      	ldr	r3, [r7, #0]
    5664:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    5666:	6878      	ldr	r0, [r7, #4]
    5668:	f7ff ffa8 	bl	55bc <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    566c:	2300      	movs	r3, #0
    566e:	60fb      	str	r3, [r7, #12]
    5670:	e001      	b.n	5676 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    5672:	2301      	movs	r3, #1
    5674:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    5676:	f000 fae9 	bl	5c4c <vPortExitCritical>

	return xReturn;
    567a:	68fb      	ldr	r3, [r7, #12]
}
    567c:	4618      	mov	r0, r3
    567e:	3710      	adds	r7, #16
    5680:	46bd      	mov	sp, r7
    5682:	bd80      	pop	{r7, pc}

00005684 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    5684:	b480      	push	{r7}
    5686:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    5688:	f640 63b4 	movw	r3, #3764	; 0xeb4
    568c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5690:	2201      	movs	r2, #1
    5692:	601a      	str	r2, [r3, #0]
}
    5694:	46bd      	mov	sp, r7
    5696:	f85d 7b04 	ldr.w	r7, [sp], #4
    569a:	4770      	bx	lr

0000569c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    569c:	b580      	push	{r7, lr}
    569e:	b082      	sub	sp, #8
    56a0:	af00      	add	r7, sp, #0
    56a2:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    56a4:	f000 f886 	bl	57b4 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    56a8:	f000 faac 	bl	5c04 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    56ac:	e7fa      	b.n	56a4 <prvIdleTask+0x8>
    56ae:	bf00      	nop

000056b0 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    56b0:	b580      	push	{r7, lr}
    56b2:	b084      	sub	sp, #16
    56b4:	af00      	add	r7, sp, #0
    56b6:	60f8      	str	r0, [r7, #12]
    56b8:	60b9      	str	r1, [r7, #8]
    56ba:	607a      	str	r2, [r7, #4]
    56bc:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    56be:	68fb      	ldr	r3, [r7, #12]
    56c0:	3334      	adds	r3, #52	; 0x34
    56c2:	4618      	mov	r0, r3
    56c4:	68b9      	ldr	r1, [r7, #8]
    56c6:	2210      	movs	r2, #16
    56c8:	f013 f8b0 	bl	1882c <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    56cc:	68fb      	ldr	r3, [r7, #12]
    56ce:	2200      	movs	r2, #0
    56d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    56d4:	687b      	ldr	r3, [r7, #4]
    56d6:	2b13      	cmp	r3, #19
    56d8:	d901      	bls.n	56de <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    56da:	2313      	movs	r3, #19
    56dc:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    56de:	68fb      	ldr	r3, [r7, #12]
    56e0:	687a      	ldr	r2, [r7, #4]
    56e2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    56e4:	68fb      	ldr	r3, [r7, #12]
    56e6:	687a      	ldr	r2, [r7, #4]
    56e8:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    56ea:	68fb      	ldr	r3, [r7, #12]
    56ec:	3304      	adds	r3, #4
    56ee:	4618      	mov	r0, r3
    56f0:	f7fe fc78 	bl	3fe4 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    56f4:	68fb      	ldr	r3, [r7, #12]
    56f6:	3318      	adds	r3, #24
    56f8:	4618      	mov	r0, r3
    56fa:	f7fe fc73 	bl	3fe4 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    56fe:	68fb      	ldr	r3, [r7, #12]
    5700:	68fa      	ldr	r2, [r7, #12]
    5702:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    5704:	687b      	ldr	r3, [r7, #4]
    5706:	f1c3 0214 	rsb	r2, r3, #20
    570a:	68fb      	ldr	r3, [r7, #12]
    570c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    570e:	68fb      	ldr	r3, [r7, #12]
    5710:	68fa      	ldr	r2, [r7, #12]
    5712:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    5714:	3710      	adds	r7, #16
    5716:	46bd      	mov	sp, r7
    5718:	bd80      	pop	{r7, pc}
    571a:	bf00      	nop

0000571c <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    571c:	b580      	push	{r7, lr}
    571e:	b082      	sub	sp, #8
    5720:	af00      	add	r7, sp, #0
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    5722:	2300      	movs	r3, #0
    5724:	607b      	str	r3, [r7, #4]
    5726:	e00f      	b.n	5748 <prvInitialiseTaskLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    5728:	687a      	ldr	r2, [r7, #4]
    572a:	4613      	mov	r3, r2
    572c:	009b      	lsls	r3, r3, #2
    572e:	4413      	add	r3, r2
    5730:	009b      	lsls	r3, r3, #2
    5732:	f640 4298 	movw	r2, #3224	; 0xc98
    5736:	f2c2 0200 	movt	r2, #8192	; 0x2000
    573a:	4413      	add	r3, r2
    573c:	4618      	mov	r0, r3
    573e:	f7fe fc31 	bl	3fa4 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    5742:	687b      	ldr	r3, [r7, #4]
    5744:	3301      	adds	r3, #1
    5746:	607b      	str	r3, [r7, #4]
    5748:	687b      	ldr	r3, [r7, #4]
    574a:	2b13      	cmp	r3, #19
    574c:	d9ec      	bls.n	5728 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    574e:	f640 6028 	movw	r0, #3624	; 0xe28
    5752:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5756:	f7fe fc25 	bl	3fa4 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    575a:	f640 603c 	movw	r0, #3644	; 0xe3c
    575e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5762:	f7fe fc1f 	bl	3fa4 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    5766:	f640 6058 	movw	r0, #3672	; 0xe58
    576a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    576e:	f7fe fc19 	bl	3fa4 <vListInitialise>


	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    5772:	f640 606c 	movw	r0, #3692	; 0xe6c
    5776:	f2c2 0000 	movt	r0, #8192	; 0x2000
    577a:	f7fe fc13 	bl	3fa4 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    577e:	f640 6084 	movw	r0, #3716	; 0xe84
    5782:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5786:	f7fe fc0d 	bl	3fa4 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    578a:	f640 6350 	movw	r3, #3664	; 0xe50
    578e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5792:	f640 6228 	movw	r2, #3624	; 0xe28
    5796:	f2c2 0200 	movt	r2, #8192	; 0x2000
    579a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    579c:	f640 6354 	movw	r3, #3668	; 0xe54
    57a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57a4:	f640 623c 	movw	r2, #3644	; 0xe3c
    57a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    57ac:	601a      	str	r2, [r3, #0]
}
    57ae:	3708      	adds	r7, #8
    57b0:	46bd      	mov	sp, r7
    57b2:	bd80      	pop	{r7, pc}

000057b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    57b4:	b580      	push	{r7, lr}
    57b6:	b082      	sub	sp, #8
    57b8:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    57ba:	f640 6380 	movw	r3, #3712	; 0xe80
    57be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57c2:	681b      	ldr	r3, [r3, #0]
    57c4:	2b00      	cmp	r3, #0
    57c6:	d03a      	beq.n	583e <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    57c8:	f7ff fc4c 	bl	5064 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    57cc:	f640 636c 	movw	r3, #3692	; 0xe6c
    57d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57d4:	681b      	ldr	r3, [r3, #0]
    57d6:	2b00      	cmp	r3, #0
    57d8:	bf14      	ite	ne
    57da:	2300      	movne	r3, #0
    57dc:	2301      	moveq	r3, #1
    57de:	b2db      	uxtb	r3, r3
    57e0:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    57e2:	f7ff fc51 	bl	5088 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    57e6:	687b      	ldr	r3, [r7, #4]
    57e8:	2b00      	cmp	r3, #0
    57ea:	d128      	bne.n	583e <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    57ec:	f000 fa18 	bl	5c20 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    57f0:	f640 636c 	movw	r3, #3692	; 0xe6c
    57f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57f8:	68db      	ldr	r3, [r3, #12]
    57fa:	68db      	ldr	r3, [r3, #12]
    57fc:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    57fe:	683b      	ldr	r3, [r7, #0]
    5800:	3304      	adds	r3, #4
    5802:	4618      	mov	r0, r3
    5804:	f7fe fc5a 	bl	40bc <vListRemove>
					--uxCurrentNumberOfTasks;
    5808:	f640 6398 	movw	r3, #3736	; 0xe98
    580c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5810:	681b      	ldr	r3, [r3, #0]
    5812:	1e5a      	subs	r2, r3, #1
    5814:	f640 6398 	movw	r3, #3736	; 0xe98
    5818:	f2c2 0300 	movt	r3, #8192	; 0x2000
    581c:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    581e:	f640 6380 	movw	r3, #3712	; 0xe80
    5822:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5826:	681b      	ldr	r3, [r3, #0]
    5828:	1e5a      	subs	r2, r3, #1
    582a:	f640 6380 	movw	r3, #3712	; 0xe80
    582e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5832:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    5834:	f000 fa0a 	bl	5c4c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    5838:	6838      	ldr	r0, [r7, #0]
    583a:	f000 f879 	bl	5930 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    583e:	3708      	adds	r7, #8
    5840:	46bd      	mov	sp, r7
    5842:	bd80      	pop	{r7, pc}

00005844 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    5844:	b580      	push	{r7, lr}
    5846:	b082      	sub	sp, #8
    5848:	af00      	add	r7, sp, #0
    584a:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    584c:	f640 4394 	movw	r3, #3220	; 0xc94
    5850:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5854:	681b      	ldr	r3, [r3, #0]
    5856:	687a      	ldr	r2, [r7, #4]
    5858:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    585a:	f640 639c 	movw	r3, #3740	; 0xe9c
    585e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5862:	681b      	ldr	r3, [r3, #0]
    5864:	687a      	ldr	r2, [r7, #4]
    5866:	429a      	cmp	r2, r3
    5868:	d20f      	bcs.n	588a <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    586a:	f640 6354 	movw	r3, #3668	; 0xe54
    586e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5872:	681a      	ldr	r2, [r3, #0]
    5874:	f640 4394 	movw	r3, #3220	; 0xc94
    5878:	f2c2 0300 	movt	r3, #8192	; 0x2000
    587c:	681b      	ldr	r3, [r3, #0]
    587e:	3304      	adds	r3, #4
    5880:	4610      	mov	r0, r2
    5882:	4619      	mov	r1, r3
    5884:	f7fe fbe2 	bl	404c <vListInsert>
    5888:	e01c      	b.n	58c4 <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    588a:	f640 6350 	movw	r3, #3664	; 0xe50
    588e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5892:	681a      	ldr	r2, [r3, #0]
    5894:	f640 4394 	movw	r3, #3220	; 0xc94
    5898:	f2c2 0300 	movt	r3, #8192	; 0x2000
    589c:	681b      	ldr	r3, [r3, #0]
    589e:	3304      	adds	r3, #4
    58a0:	4610      	mov	r0, r2
    58a2:	4619      	mov	r1, r3
    58a4:	f7fe fbd2 	bl	404c <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    58a8:	f240 33e0 	movw	r3, #992	; 0x3e0
    58ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58b0:	681b      	ldr	r3, [r3, #0]
    58b2:	687a      	ldr	r2, [r7, #4]
    58b4:	429a      	cmp	r2, r3
    58b6:	d205      	bcs.n	58c4 <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    58b8:	f240 33e0 	movw	r3, #992	; 0x3e0
    58bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58c0:	687a      	ldr	r2, [r7, #4]
    58c2:	601a      	str	r2, [r3, #0]
		}
	}
}
    58c4:	3708      	adds	r7, #8
    58c6:	46bd      	mov	sp, r7
    58c8:	bd80      	pop	{r7, pc}
    58ca:	bf00      	nop

000058cc <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    58cc:	b580      	push	{r7, lr}
    58ce:	b084      	sub	sp, #16
    58d0:	af00      	add	r7, sp, #0
    58d2:	4603      	mov	r3, r0
    58d4:	6039      	str	r1, [r7, #0]
    58d6:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    58d8:	2050      	movs	r0, #80	; 0x50
    58da:	f000 fa19 	bl	5d10 <pvPortMalloc>
    58de:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    58e0:	68fb      	ldr	r3, [r7, #12]
    58e2:	2b00      	cmp	r3, #0
    58e4:	d01f      	beq.n	5926 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    58e6:	683b      	ldr	r3, [r7, #0]
    58e8:	2b00      	cmp	r3, #0
    58ea:	d106      	bne.n	58fa <prvAllocateTCBAndStack+0x2e>
    58ec:	88fb      	ldrh	r3, [r7, #6]
    58ee:	009b      	lsls	r3, r3, #2
    58f0:	4618      	mov	r0, r3
    58f2:	f000 fa0d 	bl	5d10 <pvPortMalloc>
    58f6:	4603      	mov	r3, r0
    58f8:	e000      	b.n	58fc <prvAllocateTCBAndStack+0x30>
    58fa:	683b      	ldr	r3, [r7, #0]
    58fc:	68fa      	ldr	r2, [r7, #12]
    58fe:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    5900:	68fb      	ldr	r3, [r7, #12]
    5902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5904:	2b00      	cmp	r3, #0
    5906:	d105      	bne.n	5914 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    5908:	68f8      	ldr	r0, [r7, #12]
    590a:	f000 fac5 	bl	5e98 <vPortFree>
			pxNewTCB = NULL;
    590e:	2300      	movs	r3, #0
    5910:	60fb      	str	r3, [r7, #12]
    5912:	e008      	b.n	5926 <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    5914:	68fb      	ldr	r3, [r7, #12]
    5916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    5918:	88fb      	ldrh	r3, [r7, #6]
    591a:	009b      	lsls	r3, r3, #2
    591c:	4610      	mov	r0, r2
    591e:	21a5      	movs	r1, #165	; 0xa5
    5920:	461a      	mov	r2, r3
    5922:	f012 ff33 	bl	1878c <memset>
		}
	}

	return pxNewTCB;
    5926:	68fb      	ldr	r3, [r7, #12]
}
    5928:	4618      	mov	r0, r3
    592a:	3710      	adds	r7, #16
    592c:	46bd      	mov	sp, r7
    592e:	bd80      	pop	{r7, pc}

00005930 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    5930:	b580      	push	{r7, lr}
    5932:	b082      	sub	sp, #8
    5934:	af00      	add	r7, sp, #0
    5936:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    5938:	687b      	ldr	r3, [r7, #4]
    593a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    593c:	4618      	mov	r0, r3
    593e:	f000 faab 	bl	5e98 <vPortFree>
		vPortFree( pxTCB );
    5942:	6878      	ldr	r0, [r7, #4]
    5944:	f000 faa8 	bl	5e98 <vPortFree>
	}
    5948:	3708      	adds	r7, #8
    594a:	46bd      	mov	sp, r7
    594c:	bd80      	pop	{r7, pc}
    594e:	bf00      	nop

00005950 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    5950:	b480      	push	{r7}
    5952:	b083      	sub	sp, #12
    5954:	af00      	add	r7, sp, #0
        xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    5956:	f640 4394 	movw	r3, #3220	; 0xc94
    595a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    595e:	681b      	ldr	r3, [r3, #0]
    5960:	607b      	str	r3, [r7, #4]

		return xReturn;
    5962:	687b      	ldr	r3, [r7, #4]
	}
    5964:	4618      	mov	r0, r3
    5966:	370c      	adds	r7, #12
    5968:	46bd      	mov	sp, r7
    596a:	f85d 7b04 	ldr.w	r7, [sp], #4
    596e:	4770      	bx	lr

00005970 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    5970:	b580      	push	{r7, lr}
    5972:	b084      	sub	sp, #16
    5974:	af00      	add	r7, sp, #0
    5976:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5978:	687b      	ldr	r3, [r7, #4]
    597a:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    597c:	68fb      	ldr	r3, [r7, #12]
    597e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5980:	f640 4394 	movw	r3, #3220	; 0xc94
    5984:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5988:	681b      	ldr	r3, [r3, #0]
    598a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    598c:	429a      	cmp	r2, r3
    598e:	d24f      	bcs.n	5a30 <vTaskPriorityInherit+0xc0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    5990:	f640 4394 	movw	r3, #3220	; 0xc94
    5994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5998:	681b      	ldr	r3, [r3, #0]
    599a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    599c:	f1c3 0214 	rsb	r2, r3, #20
    59a0:	68fb      	ldr	r3, [r7, #12]
    59a2:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    59a4:	68fb      	ldr	r3, [r7, #12]
    59a6:	6959      	ldr	r1, [r3, #20]
    59a8:	68fb      	ldr	r3, [r7, #12]
    59aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    59ac:	4613      	mov	r3, r2
    59ae:	009b      	lsls	r3, r3, #2
    59b0:	4413      	add	r3, r2
    59b2:	009b      	lsls	r3, r3, #2
    59b4:	f640 4298 	movw	r2, #3224	; 0xc98
    59b8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    59bc:	4413      	add	r3, r2
    59be:	4299      	cmp	r1, r3
    59c0:	d12e      	bne.n	5a20 <vTaskPriorityInherit+0xb0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    59c2:	68fb      	ldr	r3, [r7, #12]
    59c4:	3304      	adds	r3, #4
    59c6:	4618      	mov	r0, r3
    59c8:	f7fe fb78 	bl	40bc <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    59cc:	f640 4394 	movw	r3, #3220	; 0xc94
    59d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59d4:	681b      	ldr	r3, [r3, #0]
    59d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    59d8:	68fb      	ldr	r3, [r7, #12]
    59da:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    59dc:	68fb      	ldr	r3, [r7, #12]
    59de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    59e0:	f640 63a4 	movw	r3, #3748	; 0xea4
    59e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59e8:	681b      	ldr	r3, [r3, #0]
    59ea:	429a      	cmp	r2, r3
    59ec:	d906      	bls.n	59fc <vTaskPriorityInherit+0x8c>
    59ee:	68fb      	ldr	r3, [r7, #12]
    59f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    59f2:	f640 63a4 	movw	r3, #3748	; 0xea4
    59f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59fa:	601a      	str	r2, [r3, #0]
    59fc:	68fb      	ldr	r3, [r7, #12]
    59fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a00:	4613      	mov	r3, r2
    5a02:	009b      	lsls	r3, r3, #2
    5a04:	4413      	add	r3, r2
    5a06:	009b      	lsls	r3, r3, #2
    5a08:	f640 4298 	movw	r2, #3224	; 0xc98
    5a0c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5a10:	441a      	add	r2, r3
    5a12:	68fb      	ldr	r3, [r7, #12]
    5a14:	3304      	adds	r3, #4
    5a16:	4610      	mov	r0, r2
    5a18:	4619      	mov	r1, r3
    5a1a:	f7fe faef 	bl	3ffc <vListInsertEnd>
    5a1e:	e007      	b.n	5a30 <vTaskPriorityInherit+0xc0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5a20:	f640 4394 	movw	r3, #3220	; 0xc94
    5a24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a28:	681b      	ldr	r3, [r3, #0]
    5a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a2c:	68fb      	ldr	r3, [r7, #12]
    5a2e:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    5a30:	3710      	adds	r7, #16
    5a32:	46bd      	mov	sp, r7
    5a34:	bd80      	pop	{r7, pc}
    5a36:	bf00      	nop

00005a38 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    5a38:	b580      	push	{r7, lr}
    5a3a:	b084      	sub	sp, #16
    5a3c:	af00      	add	r7, sp, #0
    5a3e:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5a40:	687b      	ldr	r3, [r7, #4]
    5a42:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    5a44:	687b      	ldr	r3, [r7, #4]
    5a46:	2b00      	cmp	r3, #0
    5a48:	d035      	beq.n	5ab6 <vTaskPriorityDisinherit+0x7e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    5a4a:	68fb      	ldr	r3, [r7, #12]
    5a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a4e:	68fb      	ldr	r3, [r7, #12]
    5a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5a52:	429a      	cmp	r2, r3
    5a54:	d02f      	beq.n	5ab6 <vTaskPriorityDisinherit+0x7e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    5a56:	68fb      	ldr	r3, [r7, #12]
    5a58:	3304      	adds	r3, #4
    5a5a:	4618      	mov	r0, r3
    5a5c:	f7fe fb2e 	bl	40bc <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    5a60:	68fb      	ldr	r3, [r7, #12]
    5a62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    5a64:	68fb      	ldr	r3, [r7, #12]
    5a66:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    5a68:	68fb      	ldr	r3, [r7, #12]
    5a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5a6c:	f1c3 0214 	rsb	r2, r3, #20
    5a70:	68fb      	ldr	r3, [r7, #12]
    5a72:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    5a74:	68fb      	ldr	r3, [r7, #12]
    5a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a78:	f640 63a4 	movw	r3, #3748	; 0xea4
    5a7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a80:	681b      	ldr	r3, [r3, #0]
    5a82:	429a      	cmp	r2, r3
    5a84:	d906      	bls.n	5a94 <vTaskPriorityDisinherit+0x5c>
    5a86:	68fb      	ldr	r3, [r7, #12]
    5a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a8a:	f640 63a4 	movw	r3, #3748	; 0xea4
    5a8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a92:	601a      	str	r2, [r3, #0]
    5a94:	68fb      	ldr	r3, [r7, #12]
    5a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a98:	4613      	mov	r3, r2
    5a9a:	009b      	lsls	r3, r3, #2
    5a9c:	4413      	add	r3, r2
    5a9e:	009b      	lsls	r3, r3, #2
    5aa0:	f640 4298 	movw	r2, #3224	; 0xc98
    5aa4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5aa8:	441a      	add	r2, r3
    5aaa:	68fb      	ldr	r3, [r7, #12]
    5aac:	3304      	adds	r3, #4
    5aae:	4610      	mov	r0, r2
    5ab0:	4619      	mov	r1, r3
    5ab2:	f7fe faa3 	bl	3ffc <vListInsertEnd>
			}
		}
	}
    5ab6:	3710      	adds	r7, #16
    5ab8:	46bd      	mov	sp, r7
    5aba:	bd80      	pop	{r7, pc}

00005abc <xTaskGetxStartTime>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_SEFM == 1)

    portTickType xTaskGetxStartTime( xTaskHandle pxTCB )
    {
    5abc:	b480      	push	{r7}
    5abe:	b083      	sub	sp, #12
    5ac0:	af00      	add	r7, sp, #0
    5ac2:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xStartTime;
    5ac4:	687b      	ldr	r3, [r7, #4]
    5ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    }
    5ac8:	4618      	mov	r0, r3
    5aca:	370c      	adds	r7, #12
    5acc:	46bd      	mov	sp, r7
    5ace:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ad2:	4770      	bx	lr

00005ad4 <xTaskGetxLet>:

    portTickType xTaskGetxLet( xTaskHandle pxTCB )
    {
    5ad4:	b480      	push	{r7}
    5ad6:	b083      	sub	sp, #12
    5ad8:	af00      	add	r7, sp, #0
    5ada:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xLet;
    5adc:	687b      	ldr	r3, [r7, #4]
    5ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
    5ae0:	4618      	mov	r0, r3
    5ae2:	370c      	adds	r7, #12
    5ae4:	46bd      	mov	sp, r7
    5ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5aea:	4770      	bx	lr

00005aec <vTaskSetxStartTime>:

    void vTaskSetxStartTime ( xTaskHandle pxTCB, portTickType xStartTime )
    {
    5aec:	b480      	push	{r7}
    5aee:	b083      	sub	sp, #12
    5af0:	af00      	add	r7, sp, #0
    5af2:	6078      	str	r0, [r7, #4]
    5af4:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xStartTime = xStartTime; 
    5af6:	687b      	ldr	r3, [r7, #4]
    5af8:	683a      	ldr	r2, [r7, #0]
    5afa:	645a      	str	r2, [r3, #68]	; 0x44
    }
    5afc:	370c      	adds	r7, #12
    5afe:	46bd      	mov	sp, r7
    5b00:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b04:	4770      	bx	lr
    5b06:	bf00      	nop

00005b08 <vTaskSetxLet>:

    void vTaskSetxLet( xTaskHandle pxTCB, portTickType xLet )
    {
    5b08:	b480      	push	{r7}
    5b0a:	b083      	sub	sp, #12
    5b0c:	af00      	add	r7, sp, #0
    5b0e:	6078      	str	r0, [r7, #4]
    5b10:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xLet = xLet;
    5b12:	687b      	ldr	r3, [r7, #4]
    5b14:	683a      	ldr	r2, [r7, #0]
    5b16:	649a      	str	r2, [r3, #72]	; 0x48
    }
    5b18:	370c      	adds	r7, #12
    5b1a:	46bd      	mov	sp, r7
    5b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b20:	4770      	bx	lr
    5b22:	bf00      	nop

00005b24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    5b24:	b480      	push	{r7}
    5b26:	b085      	sub	sp, #20
    5b28:	af00      	add	r7, sp, #0
    5b2a:	60f8      	str	r0, [r7, #12]
    5b2c:	60b9      	str	r1, [r7, #8]
    5b2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    5b30:	68fb      	ldr	r3, [r7, #12]
    5b32:	3b04      	subs	r3, #4
    5b34:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    5b36:	68fb      	ldr	r3, [r7, #12]
    5b38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5b3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5b3e:	68fb      	ldr	r3, [r7, #12]
    5b40:	3b04      	subs	r3, #4
    5b42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    5b44:	68ba      	ldr	r2, [r7, #8]
    5b46:	68fb      	ldr	r3, [r7, #12]
    5b48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5b4a:	68fb      	ldr	r3, [r7, #12]
    5b4c:	3b04      	subs	r3, #4
    5b4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    5b50:	68fb      	ldr	r3, [r7, #12]
    5b52:	2200      	movs	r2, #0
    5b54:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    5b56:	68fb      	ldr	r3, [r7, #12]
    5b58:	3b14      	subs	r3, #20
    5b5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    5b5c:	687a      	ldr	r2, [r7, #4]
    5b5e:	68fb      	ldr	r3, [r7, #12]
    5b60:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    5b62:	68fb      	ldr	r3, [r7, #12]
    5b64:	3b20      	subs	r3, #32
    5b66:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    5b68:	68fb      	ldr	r3, [r7, #12]
}
    5b6a:	4618      	mov	r0, r3
    5b6c:	3714      	adds	r7, #20
    5b6e:	46bd      	mov	sp, r7
    5b70:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b74:	4770      	bx	lr
    5b76:	bf00      	nop

00005b78 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    5b78:	4b06      	ldr	r3, [pc, #24]	; (5b94 <pxCurrentTCBConst2>)
    5b7a:	6819      	ldr	r1, [r3, #0]
    5b7c:	6808      	ldr	r0, [r1, #0]
    5b7e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5b82:	f380 8809 	msr	PSP, r0
    5b86:	f04f 0000 	mov.w	r0, #0
    5b8a:	f380 8811 	msr	BASEPRI, r0
    5b8e:	f04e 0e0d 	orr.w	lr, lr, #13
    5b92:	4770      	bx	lr

00005b94 <pxCurrentTCBConst2>:
    5b94:	20000c94 	.word	0x20000c94

00005b98 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    5b98:	485c      	ldr	r0, [pc, #368]	; (5d0c <prvSetupTimerInterrupt+0x28>)
    5b9a:	6800      	ldr	r0, [r0, #0]
    5b9c:	6800      	ldr	r0, [r0, #0]
    5b9e:	f380 8808 	msr	MSP, r0
    5ba2:	b662      	cpsie	i
    5ba4:	df00      	svc	0
    5ba6:	bf00      	nop

00005ba8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    5ba8:	b580      	push	{r7, lr}
    5baa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    5bac:	f64e 5320 	movw	r3, #60704	; 0xed20
    5bb0:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5bb4:	f64e 5220 	movw	r2, #60704	; 0xed20
    5bb8:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5bbc:	6812      	ldr	r2, [r2, #0]
    5bbe:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    5bc2:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    5bc4:	f64e 5320 	movw	r3, #60704	; 0xed20
    5bc8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5bcc:	f64e 5220 	movw	r2, #60704	; 0xed20
    5bd0:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5bd4:	6812      	ldr	r2, [r2, #0]
    5bd6:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    5bda:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    5bdc:	f000 f882 	bl	5ce4 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    5be0:	f240 33e4 	movw	r3, #996	; 0x3e4
    5be4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5be8:	2200      	movs	r2, #0
    5bea:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    5bec:	f7ff ffd4 	bl	5b98 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    5bf0:	2300      	movs	r3, #0
}
    5bf2:	4618      	mov	r0, r3
    5bf4:	bd80      	pop	{r7, pc}
    5bf6:	bf00      	nop

00005bf8 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    5bf8:	b480      	push	{r7}
    5bfa:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    5bfc:	46bd      	mov	sp, r7
    5bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c02:	4770      	bx	lr

00005c04 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    5c04:	b480      	push	{r7}
    5c06:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    5c08:	f64e 5304 	movw	r3, #60676	; 0xed04
    5c0c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5c14:	601a      	str	r2, [r3, #0]
}
    5c16:	46bd      	mov	sp, r7
    5c18:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c1c:	4770      	bx	lr
    5c1e:	bf00      	nop

00005c20 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    5c20:	b480      	push	{r7}
    5c22:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    5c24:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5c28:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    5c2c:	f240 33e4 	movw	r3, #996	; 0x3e4
    5c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c34:	681b      	ldr	r3, [r3, #0]
    5c36:	1c5a      	adds	r2, r3, #1
    5c38:	f240 33e4 	movw	r3, #996	; 0x3e4
    5c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c40:	601a      	str	r2, [r3, #0]
}
    5c42:	46bd      	mov	sp, r7
    5c44:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c48:	4770      	bx	lr
    5c4a:	bf00      	nop

00005c4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    5c4c:	b480      	push	{r7}
    5c4e:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    5c50:	f240 33e4 	movw	r3, #996	; 0x3e4
    5c54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c58:	681b      	ldr	r3, [r3, #0]
    5c5a:	1e5a      	subs	r2, r3, #1
    5c5c:	f240 33e4 	movw	r3, #996	; 0x3e4
    5c60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c64:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    5c66:	f240 33e4 	movw	r3, #996	; 0x3e4
    5c6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c6e:	681b      	ldr	r3, [r3, #0]
    5c70:	2b00      	cmp	r3, #0
    5c72:	d103      	bne.n	5c7c <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    5c74:	f04f 0000 	mov.w	r0, #0
    5c78:	f380 8811 	msr	BASEPRI, r0
	}
}
    5c7c:	46bd      	mov	sp, r7
    5c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c82:	4770      	bx	lr

00005c84 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    5c84:	f3ef 8009 	mrs	r0, PSP
    5c88:	4b0c      	ldr	r3, [pc, #48]	; (5cbc <pxCurrentTCBConst>)
    5c8a:	681a      	ldr	r2, [r3, #0]
    5c8c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5c90:	6010      	str	r0, [r2, #0]
    5c92:	e92d 4008 	stmdb	sp!, {r3, lr}
    5c96:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5c9a:	f380 8811 	msr	BASEPRI, r0
    5c9e:	f7ff fba1 	bl	53e4 <vTaskSwitchContext>
    5ca2:	f04f 0000 	mov.w	r0, #0
    5ca6:	f380 8811 	msr	BASEPRI, r0
    5caa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5cae:	6819      	ldr	r1, [r3, #0]
    5cb0:	6808      	ldr	r0, [r1, #0]
    5cb2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5cb6:	f380 8809 	msr	PSP, r0
    5cba:	4770      	bx	lr

00005cbc <pxCurrentTCBConst>:
    5cbc:	20000c94 	.word	0x20000c94

00005cc0 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    5cc0:	b580      	push	{r7, lr}
    5cc2:	b082      	sub	sp, #8
    5cc4:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    5cc6:	2300      	movs	r3, #0
    5cc8:	607b      	str	r3, [r7, #4]
    5cca:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5cce:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    5cd2:	f7ff faa9 	bl	5228 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    5cd6:	f04f 0000 	mov.w	r0, #0
    5cda:	f380 8811 	msr	BASEPRI, r0
}
    5cde:	3708      	adds	r7, #8
    5ce0:	46bd      	mov	sp, r7
    5ce2:	bd80      	pop	{r7, pc}

00005ce4 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    5ce4:	b480      	push	{r7}
    5ce6:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    5ce8:	f24e 0314 	movw	r3, #57364	; 0xe014
    5cec:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5cf0:	f245 425f 	movw	r2, #21599	; 0x545f
    5cf4:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    5cf6:	f24e 0310 	movw	r3, #57360	; 0xe010
    5cfa:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5cfe:	2207      	movs	r2, #7
    5d00:	601a      	str	r2, [r3, #0]
}
    5d02:	46bd      	mov	sp, r7
    5d04:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d08:	4770      	bx	lr
    5d0a:	0000      	.short	0x0000
    5d0c:	e000ed08 	.word	0xe000ed08

00005d10 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    5d10:	b580      	push	{r7, lr}
    5d12:	b08a      	sub	sp, #40	; 0x28
    5d14:	af00      	add	r7, sp, #0
    5d16:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    5d18:	2300      	movs	r3, #0
    5d1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    5d1c:	f7ff f9a2 	bl	5064 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    5d20:	f64b 63d0 	movw	r3, #48848	; 0xbed0
    5d24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d28:	681b      	ldr	r3, [r3, #0]
    5d2a:	2b00      	cmp	r3, #0
    5d2c:	d130      	bne.n	5d90 <pvPortMalloc+0x80>
		{
			prvHeapInit();
    5d2e:	f64b 63c0 	movw	r3, #48832	; 0xbec0
    5d32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d36:	f640 62c0 	movw	r2, #3776	; 0xec0
    5d3a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5d3e:	601a      	str	r2, [r3, #0]
    5d40:	f64b 63c0 	movw	r3, #48832	; 0xbec0
    5d44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d48:	2200      	movs	r2, #0
    5d4a:	605a      	str	r2, [r3, #4]
    5d4c:	f64b 63c8 	movw	r3, #48840	; 0xbec8
    5d50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d54:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    5d58:	605a      	str	r2, [r3, #4]
    5d5a:	f64b 63c8 	movw	r3, #48840	; 0xbec8
    5d5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d62:	2200      	movs	r2, #0
    5d64:	601a      	str	r2, [r3, #0]
    5d66:	f640 63c0 	movw	r3, #3776	; 0xec0
    5d6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d6e:	617b      	str	r3, [r7, #20]
    5d70:	697b      	ldr	r3, [r7, #20]
    5d72:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    5d76:	605a      	str	r2, [r3, #4]
    5d78:	697a      	ldr	r2, [r7, #20]
    5d7a:	f64b 63c8 	movw	r3, #48840	; 0xbec8
    5d7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d82:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    5d84:	f64b 63d0 	movw	r3, #48848	; 0xbed0
    5d88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d8c:	2201      	movs	r2, #1
    5d8e:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    5d90:	687b      	ldr	r3, [r7, #4]
    5d92:	2b00      	cmp	r3, #0
    5d94:	d00d      	beq.n	5db2 <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    5d96:	2310      	movs	r3, #16
    5d98:	687a      	ldr	r2, [r7, #4]
    5d9a:	4413      	add	r3, r2
    5d9c:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    5d9e:	687b      	ldr	r3, [r7, #4]
    5da0:	f003 0307 	and.w	r3, r3, #7
    5da4:	2b00      	cmp	r3, #0
    5da6:	d004      	beq.n	5db2 <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    5da8:	687b      	ldr	r3, [r7, #4]
    5daa:	f023 0307 	bic.w	r3, r3, #7
    5dae:	3308      	adds	r3, #8
    5db0:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    5db2:	687b      	ldr	r3, [r7, #4]
    5db4:	2b00      	cmp	r3, #0
    5db6:	d068      	beq.n	5e8a <pvPortMalloc+0x17a>
    5db8:	687b      	ldr	r3, [r7, #4]
    5dba:	f5b3 2f96 	cmp.w	r3, #307200	; 0x4b000
    5dbe:	d264      	bcs.n	5e8a <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    5dc0:	f64b 63c0 	movw	r3, #48832	; 0xbec0
    5dc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5dc8:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    5dca:	f64b 63c0 	movw	r3, #48832	; 0xbec0
    5dce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5dd2:	681b      	ldr	r3, [r3, #0]
    5dd4:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5dd6:	e004      	b.n	5de2 <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    5dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5dda:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    5ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5dde:	681b      	ldr	r3, [r3, #0]
    5de0:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5de4:	685a      	ldr	r2, [r3, #4]
    5de6:	687b      	ldr	r3, [r7, #4]
    5de8:	429a      	cmp	r2, r3
    5dea:	d203      	bcs.n	5df4 <pvPortMalloc+0xe4>
    5dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5dee:	681b      	ldr	r3, [r3, #0]
    5df0:	2b00      	cmp	r3, #0
    5df2:	d1f1      	bne.n	5dd8 <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    5df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5df6:	f64b 63c8 	movw	r3, #48840	; 0xbec8
    5dfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5dfe:	429a      	cmp	r2, r3
    5e00:	d043      	beq.n	5e8a <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    5e02:	6a3b      	ldr	r3, [r7, #32]
    5e04:	681a      	ldr	r2, [r3, #0]
    5e06:	2310      	movs	r3, #16
    5e08:	4413      	add	r3, r2
    5e0a:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    5e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e0e:	681a      	ldr	r2, [r3, #0]
    5e10:	6a3b      	ldr	r3, [r7, #32]
    5e12:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    5e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e16:	685a      	ldr	r2, [r3, #4]
    5e18:	687b      	ldr	r3, [r7, #4]
    5e1a:	1ad2      	subs	r2, r2, r3
    5e1c:	2310      	movs	r3, #16
    5e1e:	005b      	lsls	r3, r3, #1
    5e20:	429a      	cmp	r2, r3
    5e22:	d925      	bls.n	5e70 <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    5e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5e26:	687b      	ldr	r3, [r7, #4]
    5e28:	4413      	add	r3, r2
    5e2a:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    5e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e2e:	685a      	ldr	r2, [r3, #4]
    5e30:	687b      	ldr	r3, [r7, #4]
    5e32:	1ad2      	subs	r2, r2, r3
    5e34:	693b      	ldr	r3, [r7, #16]
    5e36:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    5e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e3a:	687a      	ldr	r2, [r7, #4]
    5e3c:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    5e3e:	693b      	ldr	r3, [r7, #16]
    5e40:	685b      	ldr	r3, [r3, #4]
    5e42:	60fb      	str	r3, [r7, #12]
    5e44:	f64b 63c0 	movw	r3, #48832	; 0xbec0
    5e48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e4c:	61bb      	str	r3, [r7, #24]
    5e4e:	e002      	b.n	5e56 <pvPortMalloc+0x146>
    5e50:	69bb      	ldr	r3, [r7, #24]
    5e52:	681b      	ldr	r3, [r3, #0]
    5e54:	61bb      	str	r3, [r7, #24]
    5e56:	69bb      	ldr	r3, [r7, #24]
    5e58:	681b      	ldr	r3, [r3, #0]
    5e5a:	685a      	ldr	r2, [r3, #4]
    5e5c:	68fb      	ldr	r3, [r7, #12]
    5e5e:	429a      	cmp	r2, r3
    5e60:	d3f6      	bcc.n	5e50 <pvPortMalloc+0x140>
    5e62:	69bb      	ldr	r3, [r7, #24]
    5e64:	681a      	ldr	r2, [r3, #0]
    5e66:	693b      	ldr	r3, [r7, #16]
    5e68:	601a      	str	r2, [r3, #0]
    5e6a:	69bb      	ldr	r3, [r7, #24]
    5e6c:	693a      	ldr	r2, [r7, #16]
    5e6e:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    5e70:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e78:	681a      	ldr	r2, [r3, #0]
    5e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e7c:	685b      	ldr	r3, [r3, #4]
    5e7e:	1ad2      	subs	r2, r2, r3
    5e80:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e88:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    5e8a:	f7ff f8fd 	bl	5088 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    5e8e:	69fb      	ldr	r3, [r7, #28]
}
    5e90:	4618      	mov	r0, r3
    5e92:	3728      	adds	r7, #40	; 0x28
    5e94:	46bd      	mov	sp, r7
    5e96:	bd80      	pop	{r7, pc}

00005e98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    5e98:	b580      	push	{r7, lr}
    5e9a:	b086      	sub	sp, #24
    5e9c:	af00      	add	r7, sp, #0
    5e9e:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    5ea0:	687b      	ldr	r3, [r7, #4]
    5ea2:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    5ea4:	687b      	ldr	r3, [r7, #4]
    5ea6:	2b00      	cmp	r3, #0
    5ea8:	d030      	beq.n	5f0c <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    5eaa:	2310      	movs	r3, #16
    5eac:	425b      	negs	r3, r3
    5eae:	693a      	ldr	r2, [r7, #16]
    5eb0:	4413      	add	r3, r2
    5eb2:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    5eb4:	693b      	ldr	r3, [r7, #16]
    5eb6:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    5eb8:	f7ff f8d4 	bl	5064 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    5ebc:	68fb      	ldr	r3, [r7, #12]
    5ebe:	685b      	ldr	r3, [r3, #4]
    5ec0:	60bb      	str	r3, [r7, #8]
    5ec2:	f64b 63c0 	movw	r3, #48832	; 0xbec0
    5ec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5eca:	617b      	str	r3, [r7, #20]
    5ecc:	e002      	b.n	5ed4 <vPortFree+0x3c>
    5ece:	697b      	ldr	r3, [r7, #20]
    5ed0:	681b      	ldr	r3, [r3, #0]
    5ed2:	617b      	str	r3, [r7, #20]
    5ed4:	697b      	ldr	r3, [r7, #20]
    5ed6:	681b      	ldr	r3, [r3, #0]
    5ed8:	685a      	ldr	r2, [r3, #4]
    5eda:	68bb      	ldr	r3, [r7, #8]
    5edc:	429a      	cmp	r2, r3
    5ede:	d3f6      	bcc.n	5ece <vPortFree+0x36>
    5ee0:	697b      	ldr	r3, [r7, #20]
    5ee2:	681a      	ldr	r2, [r3, #0]
    5ee4:	68fb      	ldr	r3, [r7, #12]
    5ee6:	601a      	str	r2, [r3, #0]
    5ee8:	697b      	ldr	r3, [r7, #20]
    5eea:	68fa      	ldr	r2, [r7, #12]
    5eec:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    5eee:	68fb      	ldr	r3, [r7, #12]
    5ef0:	685a      	ldr	r2, [r3, #4]
    5ef2:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5ef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5efa:	681b      	ldr	r3, [r3, #0]
    5efc:	441a      	add	r2, r3
    5efe:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5f02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f06:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    5f08:	f7ff f8be 	bl	5088 <xTaskResumeAll>
	}
}
    5f0c:	3718      	adds	r7, #24
    5f0e:	46bd      	mov	sp, r7
    5f10:	bd80      	pop	{r7, pc}
    5f12:	bf00      	nop

00005f14 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    5f14:	b480      	push	{r7}
    5f16:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    5f18:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5f1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f20:	681b      	ldr	r3, [r3, #0]
}
    5f22:	4618      	mov	r0, r3
    5f24:	46bd      	mov	sp, r7
    5f26:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f2a:	4770      	bx	lr

00005f2c <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    5f2c:	b480      	push	{r7}
    5f2e:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    5f30:	46bd      	mov	sp, r7
    5f32:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f36:	4770      	bx	lr

00005f38 <ground_calibrate>:
 * set to auto1 before MAX_DELAY_FOR_CALIBRATION secondes */
/**User must put verticaly the uav (nose bottom) and push
 * radio roll stick to get new calibration
 * If not, the default calibration is used.
 */
inline void ground_calibrate( void ) {
    5f38:	b580      	push	{r7, lr}
    5f3a:	af00      	add	r7, sp, #0
    break;
  case CALIB_DONE:
    break;
  }
#else*/
if(calib_status == NO_CALIB)
    5f3c:	f64b 63f2 	movw	r3, #48882	; 0xbef2
    5f40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f44:	781b      	ldrb	r3, [r3, #0]
    5f46:	2b00      	cmp	r3, #0
    5f48:	f040 815d 	bne.w	6206 <ground_calibrate+0x2ce>
{
    if (cputime < MAX_DELAY_FOR_CALIBRATION && pprz_mode == PPRZ_MODE_AUTO1 ) {
    5f4c:	f64b 63da 	movw	r3, #48858	; 0xbeda
    5f50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f54:	881b      	ldrh	r3, [r3, #0]
    5f56:	2b09      	cmp	r3, #9
    5f58:	f201 8145 	bhi.w	71e6 <ground_calibrate+0x12ae>
    5f5c:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    5f60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f64:	781b      	ldrb	r3, [r3, #0]
    5f66:	2b01      	cmp	r3, #1
    5f68:	f041 813d 	bne.w	71e6 <ground_calibrate+0x12ae>
      calib_status = WAITING_CALIB_CONTRAST;
    5f6c:	f64b 63f2 	movw	r3, #48882	; 0xbef2
    5f70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f74:	2201      	movs	r2, #1
    5f76:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_START();
    5f78:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    5f7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f80:	781a      	ldrb	r2, [r3, #0]
    5f82:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    5f86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f8a:	781b      	ldrb	r3, [r3, #0]
    5f8c:	b2db      	uxtb	r3, r3
    5f8e:	429a      	cmp	r2, r3
    5f90:	d313      	bcc.n	5fba <ground_calibrate+0x82>
    5f92:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    5f96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f9a:	781b      	ldrb	r3, [r3, #0]
    5f9c:	b2db      	uxtb	r3, r3
    5f9e:	461a      	mov	r2, r3
    5fa0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    5fa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fa8:	781b      	ldrb	r3, [r3, #0]
    5faa:	1ad3      	subs	r3, r2, r3
    5fac:	33ff      	adds	r3, #255	; 0xff
    5fae:	2b04      	cmp	r3, #4
    5fb0:	bfd4      	ite	le
    5fb2:	2300      	movle	r3, #0
    5fb4:	2301      	movgt	r3, #1
    5fb6:	b2db      	uxtb	r3, r3
    5fb8:	e011      	b.n	5fde <ground_calibrate+0xa6>
    5fba:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    5fbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fc2:	781b      	ldrb	r3, [r3, #0]
    5fc4:	b2db      	uxtb	r3, r3
    5fc6:	461a      	mov	r2, r3
    5fc8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    5fcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fd0:	781b      	ldrb	r3, [r3, #0]
    5fd2:	1ad3      	subs	r3, r2, r3
    5fd4:	2b04      	cmp	r3, #4
    5fd6:	bfd4      	ite	le
    5fd8:	2300      	movle	r3, #0
    5fda:	2301      	movgt	r3, #1
    5fdc:	b2db      	uxtb	r3, r3
    5fde:	2b00      	cmp	r3, #0
    5fe0:	f000 8103 	beq.w	61ea <ground_calibrate+0x2b2>
    5fe4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    5fe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fec:	781b      	ldrb	r3, [r3, #0]
    5fee:	461a      	mov	r2, r3
    5ff0:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    5ff4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ff8:	2105      	movs	r1, #5
    5ffa:	5499      	strb	r1, [r3, r2]
    5ffc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6000:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6004:	781b      	ldrb	r3, [r3, #0]
    6006:	3301      	adds	r3, #1
    6008:	b2da      	uxtb	r2, r3
    600a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    600e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6012:	701a      	strb	r2, [r3, #0]
    6014:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6018:	f2c2 0304 	movt	r3, #8196	; 0x2004
    601c:	781b      	ldrb	r3, [r3, #0]
    601e:	2bff      	cmp	r3, #255	; 0xff
    6020:	d105      	bne.n	602e <ground_calibrate+0xf6>
    6022:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6026:	f2c2 0304 	movt	r3, #8196	; 0x2004
    602a:	2200      	movs	r2, #0
    602c:	701a      	strb	r2, [r3, #0]
    602e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6032:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6036:	781b      	ldrb	r3, [r3, #0]
    6038:	461a      	mov	r2, r3
    603a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    603e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6042:	2102      	movs	r1, #2
    6044:	5499      	strb	r1, [r3, r2]
    6046:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    604a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    604e:	781b      	ldrb	r3, [r3, #0]
    6050:	3301      	adds	r3, #1
    6052:	b2da      	uxtb	r2, r3
    6054:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6058:	f2c2 0304 	movt	r3, #8196	; 0x2004
    605c:	701a      	strb	r2, [r3, #0]
    605e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6062:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6066:	781b      	ldrb	r3, [r3, #0]
    6068:	2bff      	cmp	r3, #255	; 0xff
    606a:	d105      	bne.n	6078 <ground_calibrate+0x140>
    606c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6070:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6074:	2200      	movs	r2, #0
    6076:	701a      	strb	r2, [r3, #0]
    6078:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    607c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6080:	2202      	movs	r2, #2
    6082:	701a      	strb	r2, [r3, #0]
    6084:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    608c:	2202      	movs	r2, #2
    608e:	701a      	strb	r2, [r3, #0]
    6090:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6094:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6098:	781b      	ldrb	r3, [r3, #0]
    609a:	461a      	mov	r2, r3
    609c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    60a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60a4:	7819      	ldrb	r1, [r3, #0]
    60a6:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    60aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60ae:	5499      	strb	r1, [r3, r2]
    60b0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    60b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60b8:	781b      	ldrb	r3, [r3, #0]
    60ba:	3301      	adds	r3, #1
    60bc:	b2da      	uxtb	r2, r3
    60be:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    60c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60c6:	701a      	strb	r2, [r3, #0]
    60c8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    60cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60d0:	781b      	ldrb	r3, [r3, #0]
    60d2:	2bff      	cmp	r3, #255	; 0xff
    60d4:	d105      	bne.n	60e2 <ground_calibrate+0x1aa>
    60d6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    60da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60de:	2200      	movs	r2, #0
    60e0:	701a      	strb	r2, [r3, #0]
    60e2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    60e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60ea:	781b      	ldrb	r3, [r3, #0]
    60ec:	461a      	mov	r2, r3
    60ee:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    60f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60f6:	7819      	ldrb	r1, [r3, #0]
    60f8:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    60fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6100:	5499      	strb	r1, [r3, r2]
    6102:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6106:	f2c2 0304 	movt	r3, #8196	; 0x2004
    610a:	781b      	ldrb	r3, [r3, #0]
    610c:	3301      	adds	r3, #1
    610e:	b2da      	uxtb	r2, r3
    6110:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6118:	701a      	strb	r2, [r3, #0]
    611a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    611e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6122:	781b      	ldrb	r3, [r3, #0]
    6124:	2bff      	cmp	r3, #255	; 0xff
    6126:	d105      	bne.n	6134 <ground_calibrate+0x1fc>
    6128:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    612c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6130:	2200      	movs	r2, #0
    6132:	701a      	strb	r2, [r3, #0]
    6134:	f242 0339 	movw	r3, #8249	; 0x2039
    6138:	f2c2 0300 	movt	r3, #8192	; 0x2000
    613c:	781b      	ldrb	r3, [r3, #0]
    613e:	b2db      	uxtb	r3, r3
    6140:	f003 0310 	and.w	r3, r3, #16
    6144:	2b00      	cmp	r3, #0
    6146:	f041 804e 	bne.w	71e6 <ground_calibrate+0x12ae>
    614a:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    614e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6152:	781b      	ldrb	r3, [r3, #0]
    6154:	b2db      	uxtb	r3, r3
    6156:	461a      	mov	r2, r3
    6158:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    615c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6160:	5c9a      	ldrb	r2, [r3, r2]
    6162:	f64b 73fb 	movw	r3, #49147	; 0xbffb
    6166:	f2c2 0304 	movt	r3, #8196	; 0x2004
    616a:	701a      	strb	r2, [r3, #0]
    616c:	f64b 73fc 	movw	r3, #49148	; 0xbffc
    6170:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6174:	2200      	movs	r2, #0
    6176:	701a      	strb	r2, [r3, #0]
    6178:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    617c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6180:	781b      	ldrb	r3, [r3, #0]
    6182:	b2db      	uxtb	r3, r3
    6184:	3301      	adds	r3, #1
    6186:	b2da      	uxtb	r2, r3
    6188:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    618c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6190:	701a      	strb	r2, [r3, #0]
    6192:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    6196:	f2c2 0304 	movt	r3, #8196	; 0x2004
    619a:	781b      	ldrb	r3, [r3, #0]
    619c:	b2db      	uxtb	r3, r3
    619e:	2bff      	cmp	r3, #255	; 0xff
    61a0:	d105      	bne.n	61ae <ground_calibrate+0x276>
    61a2:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    61a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61aa:	2200      	movs	r2, #0
    61ac:	701a      	strb	r2, [r3, #0]
    61ae:	f242 0338 	movw	r3, #8248	; 0x2038
    61b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61b6:	f242 0238 	movw	r2, #8248	; 0x2038
    61ba:	f2c2 0200 	movt	r2, #8192	; 0x2000
    61be:	7812      	ldrb	r2, [r2, #0]
    61c0:	b2d2      	uxtb	r2, r2
    61c2:	f042 0201 	orr.w	r2, r2, #1
    61c6:	b2d2      	uxtb	r2, r2
    61c8:	701a      	strb	r2, [r3, #0]
    61ca:	f242 0339 	movw	r3, #8249	; 0x2039
    61ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61d2:	f242 0239 	movw	r2, #8249	; 0x2039
    61d6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    61da:	7812      	ldrb	r2, [r2, #0]
    61dc:	b2d2      	uxtb	r2, r2
    61de:	f042 0210 	orr.w	r2, r2, #16
    61e2:	b2d2      	uxtb	r2, r2
    61e4:	701a      	strb	r2, [r3, #0]
    61e6:	f000 bffe 	b.w	71e6 <ground_calibrate+0x12ae>
    61ea:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    61ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61f2:	781b      	ldrb	r3, [r3, #0]
    61f4:	3301      	adds	r3, #1
    61f6:	b2da      	uxtb	r2, r3
    61f8:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    61fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6200:	701a      	strb	r2, [r3, #0]
    6202:	f000 bff0 	b.w	71e6 <ground_calibrate+0x12ae>
    }
}
else if (calib_status == WAITING_CALIB_CONTRAST)
    6206:	f64b 63f2 	movw	r3, #48882	; 0xbef2
    620a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    620e:	781b      	ldrb	r3, [r3, #0]
    6210:	2b01      	cmp	r3, #1
    6212:	f040 87e8 	bne.w	71e6 <ground_calibrate+0x12ae>
{
    if (STICK_PUSHED(from_fbw.channels[RADIO_ROLL])) {
    6216:	f24c 0300 	movw	r3, #49152	; 0xc000
    621a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    621e:	885b      	ldrh	r3, [r3, #2]
    6220:	b21b      	sxth	r3, r3
    6222:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    6226:	db09      	blt.n	623c <ground_calibrate+0x304>
    6228:	f24c 0300 	movw	r3, #49152	; 0xc000
    622c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6230:	885b      	ldrh	r3, [r3, #2]
    6232:	b21b      	sxth	r3, r3
    6234:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    6238:	f340 87d5 	ble.w	71e6 <ground_calibrate+0x12ae>
      ir_gain_calib();
    623c:	f00b fcfc 	bl	11c38 <ir_gain_calib>
      estimator_rad_of_ir = ir_rad_of_ir;
    6240:	f240 33f8 	movw	r3, #1016	; 0x3f8
    6244:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6248:	681a      	ldr	r2, [r3, #0]
    624a:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
    624e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6252:	601a      	str	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    6254:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6258:	f2c2 0304 	movt	r3, #8196	; 0x2004
    625c:	781a      	ldrb	r2, [r3, #0]
    625e:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    6262:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6266:	781b      	ldrb	r3, [r3, #0]
    6268:	b2db      	uxtb	r3, r3
    626a:	429a      	cmp	r2, r3
    626c:	d313      	bcc.n	6296 <ground_calibrate+0x35e>
    626e:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    6272:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6276:	781b      	ldrb	r3, [r3, #0]
    6278:	b2db      	uxtb	r3, r3
    627a:	461a      	mov	r2, r3
    627c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6280:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6284:	781b      	ldrb	r3, [r3, #0]
    6286:	1ad3      	subs	r3, r2, r3
    6288:	33ff      	adds	r3, #255	; 0xff
    628a:	2b14      	cmp	r3, #20
    628c:	bfd4      	ite	le
    628e:	2300      	movle	r3, #0
    6290:	2301      	movgt	r3, #1
    6292:	b2db      	uxtb	r3, r3
    6294:	e011      	b.n	62ba <ground_calibrate+0x382>
    6296:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    629a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    629e:	781b      	ldrb	r3, [r3, #0]
    62a0:	b2db      	uxtb	r3, r3
    62a2:	461a      	mov	r2, r3
    62a4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    62a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62ac:	781b      	ldrb	r3, [r3, #0]
    62ae:	1ad3      	subs	r3, r2, r3
    62b0:	2b14      	cmp	r3, #20
    62b2:	bfd4      	ite	le
    62b4:	2300      	movle	r3, #0
    62b6:	2301      	movgt	r3, #1
    62b8:	b2db      	uxtb	r3, r3
    62ba:	2b00      	cmp	r3, #0
    62bc:	f000 85a6 	beq.w	6e0c <ground_calibrate+0xed4>
    62c0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    62c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62c8:	781b      	ldrb	r3, [r3, #0]
    62ca:	461a      	mov	r2, r3
    62cc:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    62d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62d4:	2105      	movs	r1, #5
    62d6:	5499      	strb	r1, [r3, r2]
    62d8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    62dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62e0:	781b      	ldrb	r3, [r3, #0]
    62e2:	3301      	adds	r3, #1
    62e4:	b2da      	uxtb	r2, r3
    62e6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    62ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62ee:	701a      	strb	r2, [r3, #0]
    62f0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    62f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62f8:	781b      	ldrb	r3, [r3, #0]
    62fa:	2bff      	cmp	r3, #255	; 0xff
    62fc:	d105      	bne.n	630a <ground_calibrate+0x3d2>
    62fe:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6302:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6306:	2200      	movs	r2, #0
    6308:	701a      	strb	r2, [r3, #0]
    630a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    630e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6312:	781b      	ldrb	r3, [r3, #0]
    6314:	461a      	mov	r2, r3
    6316:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    631a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    631e:	2105      	movs	r1, #5
    6320:	5499      	strb	r1, [r3, r2]
    6322:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6326:	f2c2 0304 	movt	r3, #8196	; 0x2004
    632a:	781b      	ldrb	r3, [r3, #0]
    632c:	3301      	adds	r3, #1
    632e:	b2da      	uxtb	r2, r3
    6330:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6334:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6338:	701a      	strb	r2, [r3, #0]
    633a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    633e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6342:	781b      	ldrb	r3, [r3, #0]
    6344:	2bff      	cmp	r3, #255	; 0xff
    6346:	d105      	bne.n	6354 <ground_calibrate+0x41c>
    6348:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    634c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6350:	2200      	movs	r2, #0
    6352:	701a      	strb	r2, [r3, #0]
    6354:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6358:	f2c2 0304 	movt	r3, #8196	; 0x2004
    635c:	2205      	movs	r2, #5
    635e:	701a      	strb	r2, [r3, #0]
    6360:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6364:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6368:	2205      	movs	r2, #5
    636a:	701a      	strb	r2, [r3, #0]
    636c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6370:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6374:	781b      	ldrb	r3, [r3, #0]
    6376:	461a      	mov	r2, r3
    6378:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
    637c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6380:	7819      	ldrb	r1, [r3, #0]
    6382:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    6386:	f2c2 0304 	movt	r3, #8196	; 0x2004
    638a:	5499      	strb	r1, [r3, r2]
    638c:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
    6390:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6394:	781a      	ldrb	r2, [r3, #0]
    6396:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    639a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    639e:	781b      	ldrb	r3, [r3, #0]
    63a0:	4413      	add	r3, r2
    63a2:	b2da      	uxtb	r2, r3
    63a4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    63a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63ac:	701a      	strb	r2, [r3, #0]
    63ae:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    63b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63b6:	781a      	ldrb	r2, [r3, #0]
    63b8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    63bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63c0:	781b      	ldrb	r3, [r3, #0]
    63c2:	4413      	add	r3, r2
    63c4:	b2da      	uxtb	r2, r3
    63c6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    63ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63ce:	701a      	strb	r2, [r3, #0]
    63d0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    63d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63d8:	781b      	ldrb	r3, [r3, #0]
    63da:	3301      	adds	r3, #1
    63dc:	b2da      	uxtb	r2, r3
    63de:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    63e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63e6:	701a      	strb	r2, [r3, #0]
    63e8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    63ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63f0:	781b      	ldrb	r3, [r3, #0]
    63f2:	2bff      	cmp	r3, #255	; 0xff
    63f4:	d105      	bne.n	6402 <ground_calibrate+0x4ca>
    63f6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    63fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63fe:	2200      	movs	r2, #0
    6400:	701a      	strb	r2, [r3, #0]
    6402:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6406:	f2c2 0304 	movt	r3, #8196	; 0x2004
    640a:	781b      	ldrb	r3, [r3, #0]
    640c:	461a      	mov	r2, r3
    640e:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
    6412:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6416:	7859      	ldrb	r1, [r3, #1]
    6418:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    641c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6420:	5499      	strb	r1, [r3, r2]
    6422:	4bd2      	ldr	r3, [pc, #840]	; (676c <ground_calibrate+0x834>)
    6424:	781a      	ldrb	r2, [r3, #0]
    6426:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    642a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    642e:	781b      	ldrb	r3, [r3, #0]
    6430:	4413      	add	r3, r2
    6432:	b2da      	uxtb	r2, r3
    6434:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6438:	f2c2 0304 	movt	r3, #8196	; 0x2004
    643c:	701a      	strb	r2, [r3, #0]
    643e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6442:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6446:	781a      	ldrb	r2, [r3, #0]
    6448:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    644c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6450:	781b      	ldrb	r3, [r3, #0]
    6452:	4413      	add	r3, r2
    6454:	b2da      	uxtb	r2, r3
    6456:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    645a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    645e:	701a      	strb	r2, [r3, #0]
    6460:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6464:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6468:	781b      	ldrb	r3, [r3, #0]
    646a:	3301      	adds	r3, #1
    646c:	b2da      	uxtb	r2, r3
    646e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6472:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6476:	701a      	strb	r2, [r3, #0]
    6478:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    647c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6480:	781b      	ldrb	r3, [r3, #0]
    6482:	2bff      	cmp	r3, #255	; 0xff
    6484:	d105      	bne.n	6492 <ground_calibrate+0x55a>
    6486:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    648a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    648e:	2200      	movs	r2, #0
    6490:	701a      	strb	r2, [r3, #0]
    6492:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6496:	f2c2 0304 	movt	r3, #8196	; 0x2004
    649a:	781b      	ldrb	r3, [r3, #0]
    649c:	461a      	mov	r2, r3
    649e:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
    64a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64a6:	7899      	ldrb	r1, [r3, #2]
    64a8:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    64ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64b0:	5499      	strb	r1, [r3, r2]
    64b2:	4baf      	ldr	r3, [pc, #700]	; (6770 <ground_calibrate+0x838>)
    64b4:	781a      	ldrb	r2, [r3, #0]
    64b6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    64ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64be:	781b      	ldrb	r3, [r3, #0]
    64c0:	4413      	add	r3, r2
    64c2:	b2da      	uxtb	r2, r3
    64c4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    64c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64cc:	701a      	strb	r2, [r3, #0]
    64ce:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    64d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64d6:	781a      	ldrb	r2, [r3, #0]
    64d8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    64dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64e0:	781b      	ldrb	r3, [r3, #0]
    64e2:	4413      	add	r3, r2
    64e4:	b2da      	uxtb	r2, r3
    64e6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    64ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64ee:	701a      	strb	r2, [r3, #0]
    64f0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    64f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64f8:	781b      	ldrb	r3, [r3, #0]
    64fa:	3301      	adds	r3, #1
    64fc:	b2da      	uxtb	r2, r3
    64fe:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6502:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6506:	701a      	strb	r2, [r3, #0]
    6508:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    650c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6510:	781b      	ldrb	r3, [r3, #0]
    6512:	2bff      	cmp	r3, #255	; 0xff
    6514:	d105      	bne.n	6522 <ground_calibrate+0x5ea>
    6516:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    651a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    651e:	2200      	movs	r2, #0
    6520:	701a      	strb	r2, [r3, #0]
    6522:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6526:	f2c2 0304 	movt	r3, #8196	; 0x2004
    652a:	781b      	ldrb	r3, [r3, #0]
    652c:	461a      	mov	r2, r3
    652e:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
    6532:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6536:	78d9      	ldrb	r1, [r3, #3]
    6538:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    653c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6540:	5499      	strb	r1, [r3, r2]
    6542:	4b8c      	ldr	r3, [pc, #560]	; (6774 <ground_calibrate+0x83c>)
    6544:	781a      	ldrb	r2, [r3, #0]
    6546:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    654a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    654e:	781b      	ldrb	r3, [r3, #0]
    6550:	4413      	add	r3, r2
    6552:	b2da      	uxtb	r2, r3
    6554:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6558:	f2c2 0304 	movt	r3, #8196	; 0x2004
    655c:	701a      	strb	r2, [r3, #0]
    655e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6562:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6566:	781a      	ldrb	r2, [r3, #0]
    6568:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    656c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6570:	781b      	ldrb	r3, [r3, #0]
    6572:	4413      	add	r3, r2
    6574:	b2da      	uxtb	r2, r3
    6576:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    657a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    657e:	701a      	strb	r2, [r3, #0]
    6580:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6588:	781b      	ldrb	r3, [r3, #0]
    658a:	3301      	adds	r3, #1
    658c:	b2da      	uxtb	r2, r3
    658e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6596:	701a      	strb	r2, [r3, #0]
    6598:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    659c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65a0:	781b      	ldrb	r3, [r3, #0]
    65a2:	2bff      	cmp	r3, #255	; 0xff
    65a4:	d105      	bne.n	65b2 <ground_calibrate+0x67a>
    65a6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    65aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65ae:	2200      	movs	r2, #0
    65b0:	701a      	strb	r2, [r3, #0]
    65b2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    65b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65ba:	781b      	ldrb	r3, [r3, #0]
    65bc:	461a      	mov	r2, r3
    65be:	f24c 43f4 	movw	r3, #50420	; 0xc4f4
    65c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65c6:	7819      	ldrb	r1, [r3, #0]
    65c8:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    65cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65d0:	5499      	strb	r1, [r3, r2]
    65d2:	f24c 43f4 	movw	r3, #50420	; 0xc4f4
    65d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65da:	781a      	ldrb	r2, [r3, #0]
    65dc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    65e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65e4:	781b      	ldrb	r3, [r3, #0]
    65e6:	4413      	add	r3, r2
    65e8:	b2da      	uxtb	r2, r3
    65ea:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    65ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65f2:	701a      	strb	r2, [r3, #0]
    65f4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    65f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65fc:	781a      	ldrb	r2, [r3, #0]
    65fe:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6602:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6606:	781b      	ldrb	r3, [r3, #0]
    6608:	4413      	add	r3, r2
    660a:	b2da      	uxtb	r2, r3
    660c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6614:	701a      	strb	r2, [r3, #0]
    6616:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    661a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    661e:	781b      	ldrb	r3, [r3, #0]
    6620:	3301      	adds	r3, #1
    6622:	b2da      	uxtb	r2, r3
    6624:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    662c:	701a      	strb	r2, [r3, #0]
    662e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6636:	781b      	ldrb	r3, [r3, #0]
    6638:	2bff      	cmp	r3, #255	; 0xff
    663a:	d105      	bne.n	6648 <ground_calibrate+0x710>
    663c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6640:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6644:	2200      	movs	r2, #0
    6646:	701a      	strb	r2, [r3, #0]
    6648:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    664c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6650:	781b      	ldrb	r3, [r3, #0]
    6652:	461a      	mov	r2, r3
    6654:	f24c 43f4 	movw	r3, #50420	; 0xc4f4
    6658:	f2c2 0304 	movt	r3, #8196	; 0x2004
    665c:	7859      	ldrb	r1, [r3, #1]
    665e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    6662:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6666:	5499      	strb	r1, [r3, r2]
    6668:	4b43      	ldr	r3, [pc, #268]	; (6778 <ground_calibrate+0x840>)
    666a:	781a      	ldrb	r2, [r3, #0]
    666c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6670:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6674:	781b      	ldrb	r3, [r3, #0]
    6676:	4413      	add	r3, r2
    6678:	b2da      	uxtb	r2, r3
    667a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    667e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6682:	701a      	strb	r2, [r3, #0]
    6684:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6688:	f2c2 0304 	movt	r3, #8196	; 0x2004
    668c:	781a      	ldrb	r2, [r3, #0]
    668e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6696:	781b      	ldrb	r3, [r3, #0]
    6698:	4413      	add	r3, r2
    669a:	b2da      	uxtb	r2, r3
    669c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    66a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66a4:	701a      	strb	r2, [r3, #0]
    66a6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    66aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66ae:	781b      	ldrb	r3, [r3, #0]
    66b0:	3301      	adds	r3, #1
    66b2:	b2da      	uxtb	r2, r3
    66b4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    66b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66bc:	701a      	strb	r2, [r3, #0]
    66be:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    66c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66c6:	781b      	ldrb	r3, [r3, #0]
    66c8:	2bff      	cmp	r3, #255	; 0xff
    66ca:	d105      	bne.n	66d8 <ground_calibrate+0x7a0>
    66cc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    66d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66d4:	2200      	movs	r2, #0
    66d6:	701a      	strb	r2, [r3, #0]
    66d8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    66dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66e0:	781b      	ldrb	r3, [r3, #0]
    66e2:	461a      	mov	r2, r3
    66e4:	f24c 43f4 	movw	r3, #50420	; 0xc4f4
    66e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66ec:	7899      	ldrb	r1, [r3, #2]
    66ee:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    66f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66f6:	5499      	strb	r1, [r3, r2]
    66f8:	4b20      	ldr	r3, [pc, #128]	; (677c <ground_calibrate+0x844>)
    66fa:	781a      	ldrb	r2, [r3, #0]
    66fc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6704:	781b      	ldrb	r3, [r3, #0]
    6706:	4413      	add	r3, r2
    6708:	b2da      	uxtb	r2, r3
    670a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    670e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6712:	701a      	strb	r2, [r3, #0]
    6714:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6718:	f2c2 0304 	movt	r3, #8196	; 0x2004
    671c:	781a      	ldrb	r2, [r3, #0]
    671e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6722:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6726:	781b      	ldrb	r3, [r3, #0]
    6728:	4413      	add	r3, r2
    672a:	b2da      	uxtb	r2, r3
    672c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6730:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6734:	701a      	strb	r2, [r3, #0]
    6736:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    673a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    673e:	781b      	ldrb	r3, [r3, #0]
    6740:	3301      	adds	r3, #1
    6742:	b2da      	uxtb	r2, r3
    6744:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6748:	f2c2 0304 	movt	r3, #8196	; 0x2004
    674c:	701a      	strb	r2, [r3, #0]
    674e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6756:	781b      	ldrb	r3, [r3, #0]
    6758:	2bff      	cmp	r3, #255	; 0xff
    675a:	d111      	bne.n	6780 <ground_calibrate+0x848>
    675c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6760:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6764:	2200      	movs	r2, #0
    6766:	701a      	strb	r2, [r3, #0]
    6768:	e00a      	b.n	6780 <ground_calibrate+0x848>
    676a:	bf00      	nop
    676c:	2004c4f1 	.word	0x2004c4f1
    6770:	2004c4f2 	.word	0x2004c4f2
    6774:	2004c4f3 	.word	0x2004c4f3
    6778:	2004c4f5 	.word	0x2004c4f5
    677c:	2004c4f6 	.word	0x2004c4f6
    6780:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6784:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6788:	781b      	ldrb	r3, [r3, #0]
    678a:	461a      	mov	r2, r3
    678c:	f24c 43f4 	movw	r3, #50420	; 0xc4f4
    6790:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6794:	78d9      	ldrb	r1, [r3, #3]
    6796:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    679a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    679e:	5499      	strb	r1, [r3, r2]
    67a0:	4bd3      	ldr	r3, [pc, #844]	; (6af0 <ground_calibrate+0xbb8>)
    67a2:	781a      	ldrb	r2, [r3, #0]
    67a4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    67a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67ac:	781b      	ldrb	r3, [r3, #0]
    67ae:	4413      	add	r3, r2
    67b0:	b2da      	uxtb	r2, r3
    67b2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    67b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67ba:	701a      	strb	r2, [r3, #0]
    67bc:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    67c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67c4:	781a      	ldrb	r2, [r3, #0]
    67c6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    67ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67ce:	781b      	ldrb	r3, [r3, #0]
    67d0:	4413      	add	r3, r2
    67d2:	b2da      	uxtb	r2, r3
    67d4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    67d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67dc:	701a      	strb	r2, [r3, #0]
    67de:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    67e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67e6:	781b      	ldrb	r3, [r3, #0]
    67e8:	3301      	adds	r3, #1
    67ea:	b2da      	uxtb	r2, r3
    67ec:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    67f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67f4:	701a      	strb	r2, [r3, #0]
    67f6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    67fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67fe:	781b      	ldrb	r3, [r3, #0]
    6800:	2bff      	cmp	r3, #255	; 0xff
    6802:	d105      	bne.n	6810 <ground_calibrate+0x8d8>
    6804:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    680c:	2200      	movs	r2, #0
    680e:	701a      	strb	r2, [r3, #0]
    6810:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6814:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6818:	781b      	ldrb	r3, [r3, #0]
    681a:	461a      	mov	r2, r3
    681c:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
    6820:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6824:	7819      	ldrb	r1, [r3, #0]
    6826:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    682a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    682e:	5499      	strb	r1, [r3, r2]
    6830:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
    6834:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6838:	781a      	ldrb	r2, [r3, #0]
    683a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    683e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6842:	781b      	ldrb	r3, [r3, #0]
    6844:	4413      	add	r3, r2
    6846:	b2da      	uxtb	r2, r3
    6848:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    684c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6850:	701a      	strb	r2, [r3, #0]
    6852:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6856:	f2c2 0304 	movt	r3, #8196	; 0x2004
    685a:	781a      	ldrb	r2, [r3, #0]
    685c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6860:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6864:	781b      	ldrb	r3, [r3, #0]
    6866:	4413      	add	r3, r2
    6868:	b2da      	uxtb	r2, r3
    686a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    686e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6872:	701a      	strb	r2, [r3, #0]
    6874:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    687c:	781b      	ldrb	r3, [r3, #0]
    687e:	3301      	adds	r3, #1
    6880:	b2da      	uxtb	r2, r3
    6882:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6886:	f2c2 0304 	movt	r3, #8196	; 0x2004
    688a:	701a      	strb	r2, [r3, #0]
    688c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6890:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6894:	781b      	ldrb	r3, [r3, #0]
    6896:	2bff      	cmp	r3, #255	; 0xff
    6898:	d105      	bne.n	68a6 <ground_calibrate+0x96e>
    689a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    689e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68a2:	2200      	movs	r2, #0
    68a4:	701a      	strb	r2, [r3, #0]
    68a6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    68aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68ae:	781b      	ldrb	r3, [r3, #0]
    68b0:	461a      	mov	r2, r3
    68b2:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
    68b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68ba:	7859      	ldrb	r1, [r3, #1]
    68bc:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    68c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68c4:	5499      	strb	r1, [r3, r2]
    68c6:	4b8b      	ldr	r3, [pc, #556]	; (6af4 <ground_calibrate+0xbbc>)
    68c8:	781a      	ldrb	r2, [r3, #0]
    68ca:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    68ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68d2:	781b      	ldrb	r3, [r3, #0]
    68d4:	4413      	add	r3, r2
    68d6:	b2da      	uxtb	r2, r3
    68d8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    68dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68e0:	701a      	strb	r2, [r3, #0]
    68e2:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    68e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68ea:	781a      	ldrb	r2, [r3, #0]
    68ec:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    68f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68f4:	781b      	ldrb	r3, [r3, #0]
    68f6:	4413      	add	r3, r2
    68f8:	b2da      	uxtb	r2, r3
    68fa:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    68fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6902:	701a      	strb	r2, [r3, #0]
    6904:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    690c:	781b      	ldrb	r3, [r3, #0]
    690e:	3301      	adds	r3, #1
    6910:	b2da      	uxtb	r2, r3
    6912:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6916:	f2c2 0304 	movt	r3, #8196	; 0x2004
    691a:	701a      	strb	r2, [r3, #0]
    691c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6924:	781b      	ldrb	r3, [r3, #0]
    6926:	2bff      	cmp	r3, #255	; 0xff
    6928:	d105      	bne.n	6936 <ground_calibrate+0x9fe>
    692a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    692e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6932:	2200      	movs	r2, #0
    6934:	701a      	strb	r2, [r3, #0]
    6936:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    693a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    693e:	781b      	ldrb	r3, [r3, #0]
    6940:	461a      	mov	r2, r3
    6942:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
    6946:	f2c2 0304 	movt	r3, #8196	; 0x2004
    694a:	7899      	ldrb	r1, [r3, #2]
    694c:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    6950:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6954:	5499      	strb	r1, [r3, r2]
    6956:	4b68      	ldr	r3, [pc, #416]	; (6af8 <ground_calibrate+0xbc0>)
    6958:	781a      	ldrb	r2, [r3, #0]
    695a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    695e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6962:	781b      	ldrb	r3, [r3, #0]
    6964:	4413      	add	r3, r2
    6966:	b2da      	uxtb	r2, r3
    6968:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    696c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6970:	701a      	strb	r2, [r3, #0]
    6972:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6976:	f2c2 0304 	movt	r3, #8196	; 0x2004
    697a:	781a      	ldrb	r2, [r3, #0]
    697c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6980:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6984:	781b      	ldrb	r3, [r3, #0]
    6986:	4413      	add	r3, r2
    6988:	b2da      	uxtb	r2, r3
    698a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    698e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6992:	701a      	strb	r2, [r3, #0]
    6994:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6998:	f2c2 0304 	movt	r3, #8196	; 0x2004
    699c:	781b      	ldrb	r3, [r3, #0]
    699e:	3301      	adds	r3, #1
    69a0:	b2da      	uxtb	r2, r3
    69a2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    69a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69aa:	701a      	strb	r2, [r3, #0]
    69ac:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    69b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69b4:	781b      	ldrb	r3, [r3, #0]
    69b6:	2bff      	cmp	r3, #255	; 0xff
    69b8:	d105      	bne.n	69c6 <ground_calibrate+0xa8e>
    69ba:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    69be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69c2:	2200      	movs	r2, #0
    69c4:	701a      	strb	r2, [r3, #0]
    69c6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    69ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69ce:	781b      	ldrb	r3, [r3, #0]
    69d0:	461a      	mov	r2, r3
    69d2:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
    69d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69da:	78d9      	ldrb	r1, [r3, #3]
    69dc:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    69e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69e4:	5499      	strb	r1, [r3, r2]
    69e6:	4b45      	ldr	r3, [pc, #276]	; (6afc <ground_calibrate+0xbc4>)
    69e8:	781a      	ldrb	r2, [r3, #0]
    69ea:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    69ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69f2:	781b      	ldrb	r3, [r3, #0]
    69f4:	4413      	add	r3, r2
    69f6:	b2da      	uxtb	r2, r3
    69f8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    69fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a00:	701a      	strb	r2, [r3, #0]
    6a02:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6a06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a0a:	781a      	ldrb	r2, [r3, #0]
    6a0c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6a10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a14:	781b      	ldrb	r3, [r3, #0]
    6a16:	4413      	add	r3, r2
    6a18:	b2da      	uxtb	r2, r3
    6a1a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6a1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a22:	701a      	strb	r2, [r3, #0]
    6a24:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6a28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a2c:	781b      	ldrb	r3, [r3, #0]
    6a2e:	3301      	adds	r3, #1
    6a30:	b2da      	uxtb	r2, r3
    6a32:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6a36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a3a:	701a      	strb	r2, [r3, #0]
    6a3c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6a40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a44:	781b      	ldrb	r3, [r3, #0]
    6a46:	2bff      	cmp	r3, #255	; 0xff
    6a48:	d105      	bne.n	6a56 <ground_calibrate+0xb1e>
    6a4a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6a4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a52:	2200      	movs	r2, #0
    6a54:	701a      	strb	r2, [r3, #0]
    6a56:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6a5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a5e:	781b      	ldrb	r3, [r3, #0]
    6a60:	461a      	mov	r2, r3
    6a62:	f240 33f2 	movw	r3, #1010	; 0x3f2
    6a66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a6a:	7819      	ldrb	r1, [r3, #0]
    6a6c:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    6a70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a74:	5499      	strb	r1, [r3, r2]
    6a76:	f240 33f2 	movw	r3, #1010	; 0x3f2
    6a7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a7e:	781a      	ldrb	r2, [r3, #0]
    6a80:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6a84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a88:	781b      	ldrb	r3, [r3, #0]
    6a8a:	4413      	add	r3, r2
    6a8c:	b2da      	uxtb	r2, r3
    6a8e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6a92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a96:	701a      	strb	r2, [r3, #0]
    6a98:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6a9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aa0:	781a      	ldrb	r2, [r3, #0]
    6aa2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6aa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aaa:	781b      	ldrb	r3, [r3, #0]
    6aac:	4413      	add	r3, r2
    6aae:	b2da      	uxtb	r2, r3
    6ab0:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6ab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ab8:	701a      	strb	r2, [r3, #0]
    6aba:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6abe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ac2:	781b      	ldrb	r3, [r3, #0]
    6ac4:	3301      	adds	r3, #1
    6ac6:	b2da      	uxtb	r2, r3
    6ac8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6acc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ad0:	701a      	strb	r2, [r3, #0]
    6ad2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6ad6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ada:	781b      	ldrb	r3, [r3, #0]
    6adc:	2bff      	cmp	r3, #255	; 0xff
    6ade:	d10f      	bne.n	6b00 <ground_calibrate+0xbc8>
    6ae0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6ae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ae8:	2200      	movs	r2, #0
    6aea:	701a      	strb	r2, [r3, #0]
    6aec:	e008      	b.n	6b00 <ground_calibrate+0xbc8>
    6aee:	bf00      	nop
    6af0:	2004c4f7 	.word	0x2004c4f7
    6af4:	2004c4ed 	.word	0x2004c4ed
    6af8:	2004c4ee 	.word	0x2004c4ee
    6afc:	2004c4ef 	.word	0x2004c4ef
    6b00:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6b04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b08:	781b      	ldrb	r3, [r3, #0]
    6b0a:	461a      	mov	r2, r3
    6b0c:	f240 33f2 	movw	r3, #1010	; 0x3f2
    6b10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b14:	7859      	ldrb	r1, [r3, #1]
    6b16:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    6b1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b1e:	5499      	strb	r1, [r3, r2]
    6b20:	4bd4      	ldr	r3, [pc, #848]	; (6e74 <ground_calibrate+0xf3c>)
    6b22:	781a      	ldrb	r2, [r3, #0]
    6b24:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6b28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b2c:	781b      	ldrb	r3, [r3, #0]
    6b2e:	4413      	add	r3, r2
    6b30:	b2da      	uxtb	r2, r3
    6b32:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6b36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b3a:	701a      	strb	r2, [r3, #0]
    6b3c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6b40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b44:	781a      	ldrb	r2, [r3, #0]
    6b46:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6b4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b4e:	781b      	ldrb	r3, [r3, #0]
    6b50:	4413      	add	r3, r2
    6b52:	b2da      	uxtb	r2, r3
    6b54:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6b58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b5c:	701a      	strb	r2, [r3, #0]
    6b5e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6b62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b66:	781b      	ldrb	r3, [r3, #0]
    6b68:	3301      	adds	r3, #1
    6b6a:	b2da      	uxtb	r2, r3
    6b6c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b74:	701a      	strb	r2, [r3, #0]
    6b76:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6b7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b7e:	781b      	ldrb	r3, [r3, #0]
    6b80:	2bff      	cmp	r3, #255	; 0xff
    6b82:	d105      	bne.n	6b90 <ground_calibrate+0xc58>
    6b84:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6b88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b8c:	2200      	movs	r2, #0
    6b8e:	701a      	strb	r2, [r3, #0]
    6b90:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6b94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b98:	781b      	ldrb	r3, [r3, #0]
    6b9a:	461a      	mov	r2, r3
    6b9c:	f240 33f4 	movw	r3, #1012	; 0x3f4
    6ba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ba4:	7819      	ldrb	r1, [r3, #0]
    6ba6:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    6baa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bae:	5499      	strb	r1, [r3, r2]
    6bb0:	f240 33f4 	movw	r3, #1012	; 0x3f4
    6bb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bb8:	781a      	ldrb	r2, [r3, #0]
    6bba:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6bbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bc2:	781b      	ldrb	r3, [r3, #0]
    6bc4:	4413      	add	r3, r2
    6bc6:	b2da      	uxtb	r2, r3
    6bc8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6bcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bd0:	701a      	strb	r2, [r3, #0]
    6bd2:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6bd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bda:	781a      	ldrb	r2, [r3, #0]
    6bdc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6be0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6be4:	781b      	ldrb	r3, [r3, #0]
    6be6:	4413      	add	r3, r2
    6be8:	b2da      	uxtb	r2, r3
    6bea:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6bee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bf2:	701a      	strb	r2, [r3, #0]
    6bf4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6bf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bfc:	781b      	ldrb	r3, [r3, #0]
    6bfe:	3301      	adds	r3, #1
    6c00:	b2da      	uxtb	r2, r3
    6c02:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6c06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c0a:	701a      	strb	r2, [r3, #0]
    6c0c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6c10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c14:	781b      	ldrb	r3, [r3, #0]
    6c16:	2bff      	cmp	r3, #255	; 0xff
    6c18:	d105      	bne.n	6c26 <ground_calibrate+0xcee>
    6c1a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6c1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c22:	2200      	movs	r2, #0
    6c24:	701a      	strb	r2, [r3, #0]
    6c26:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6c2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c2e:	781b      	ldrb	r3, [r3, #0]
    6c30:	461a      	mov	r2, r3
    6c32:	f240 33f4 	movw	r3, #1012	; 0x3f4
    6c36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c3a:	7859      	ldrb	r1, [r3, #1]
    6c3c:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    6c40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c44:	5499      	strb	r1, [r3, r2]
    6c46:	4b8c      	ldr	r3, [pc, #560]	; (6e78 <ground_calibrate+0xf40>)
    6c48:	781a      	ldrb	r2, [r3, #0]
    6c4a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6c4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c52:	781b      	ldrb	r3, [r3, #0]
    6c54:	4413      	add	r3, r2
    6c56:	b2da      	uxtb	r2, r3
    6c58:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6c5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c60:	701a      	strb	r2, [r3, #0]
    6c62:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6c66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c6a:	781a      	ldrb	r2, [r3, #0]
    6c6c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6c70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c74:	781b      	ldrb	r3, [r3, #0]
    6c76:	4413      	add	r3, r2
    6c78:	b2da      	uxtb	r2, r3
    6c7a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6c7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c82:	701a      	strb	r2, [r3, #0]
    6c84:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6c88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c8c:	781b      	ldrb	r3, [r3, #0]
    6c8e:	3301      	adds	r3, #1
    6c90:	b2da      	uxtb	r2, r3
    6c92:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6c96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c9a:	701a      	strb	r2, [r3, #0]
    6c9c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6ca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ca4:	781b      	ldrb	r3, [r3, #0]
    6ca6:	2bff      	cmp	r3, #255	; 0xff
    6ca8:	d105      	bne.n	6cb6 <ground_calibrate+0xd7e>
    6caa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6cae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cb2:	2200      	movs	r2, #0
    6cb4:	701a      	strb	r2, [r3, #0]
    6cb6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6cba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cbe:	781b      	ldrb	r3, [r3, #0]
    6cc0:	461a      	mov	r2, r3
    6cc2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6cc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cca:	7819      	ldrb	r1, [r3, #0]
    6ccc:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    6cd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cd4:	5499      	strb	r1, [r3, r2]
    6cd6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6cda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cde:	781b      	ldrb	r3, [r3, #0]
    6ce0:	3301      	adds	r3, #1
    6ce2:	b2da      	uxtb	r2, r3
    6ce4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6ce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cec:	701a      	strb	r2, [r3, #0]
    6cee:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6cf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cf6:	781b      	ldrb	r3, [r3, #0]
    6cf8:	2bff      	cmp	r3, #255	; 0xff
    6cfa:	d105      	bne.n	6d08 <ground_calibrate+0xdd0>
    6cfc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6d00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d04:	2200      	movs	r2, #0
    6d06:	701a      	strb	r2, [r3, #0]
    6d08:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6d0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d10:	781b      	ldrb	r3, [r3, #0]
    6d12:	461a      	mov	r2, r3
    6d14:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6d18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d1c:	7819      	ldrb	r1, [r3, #0]
    6d1e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    6d22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d26:	5499      	strb	r1, [r3, r2]
    6d28:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6d2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d30:	781b      	ldrb	r3, [r3, #0]
    6d32:	3301      	adds	r3, #1
    6d34:	b2da      	uxtb	r2, r3
    6d36:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6d3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d3e:	701a      	strb	r2, [r3, #0]
    6d40:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6d44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d48:	781b      	ldrb	r3, [r3, #0]
    6d4a:	2bff      	cmp	r3, #255	; 0xff
    6d4c:	d105      	bne.n	6d5a <ground_calibrate+0xe22>
    6d4e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6d52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d56:	2200      	movs	r2, #0
    6d58:	701a      	strb	r2, [r3, #0]
    6d5a:	f242 0339 	movw	r3, #8249	; 0x2039
    6d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d62:	781b      	ldrb	r3, [r3, #0]
    6d64:	b2db      	uxtb	r3, r3
    6d66:	f003 0310 	and.w	r3, r3, #16
    6d6a:	2b00      	cmp	r3, #0
    6d6c:	d15a      	bne.n	6e24 <ground_calibrate+0xeec>
    6d6e:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    6d72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d76:	781b      	ldrb	r3, [r3, #0]
    6d78:	b2db      	uxtb	r3, r3
    6d7a:	461a      	mov	r2, r3
    6d7c:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    6d80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d84:	5c9a      	ldrb	r2, [r3, r2]
    6d86:	f64b 73fb 	movw	r3, #49147	; 0xbffb
    6d8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d8e:	701a      	strb	r2, [r3, #0]
    6d90:	f64b 73fc 	movw	r3, #49148	; 0xbffc
    6d94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d98:	2200      	movs	r2, #0
    6d9a:	701a      	strb	r2, [r3, #0]
    6d9c:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    6da0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6da4:	781b      	ldrb	r3, [r3, #0]
    6da6:	b2db      	uxtb	r3, r3
    6da8:	3301      	adds	r3, #1
    6daa:	b2da      	uxtb	r2, r3
    6dac:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    6db0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6db4:	701a      	strb	r2, [r3, #0]
    6db6:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    6dba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dbe:	781b      	ldrb	r3, [r3, #0]
    6dc0:	b2db      	uxtb	r3, r3
    6dc2:	2bff      	cmp	r3, #255	; 0xff
    6dc4:	d105      	bne.n	6dd2 <ground_calibrate+0xe9a>
    6dc6:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    6dca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dce:	2200      	movs	r2, #0
    6dd0:	701a      	strb	r2, [r3, #0]
    6dd2:	f242 0338 	movw	r3, #8248	; 0x2038
    6dd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dda:	f242 0238 	movw	r2, #8248	; 0x2038
    6dde:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6de2:	7812      	ldrb	r2, [r2, #0]
    6de4:	b2d2      	uxtb	r2, r2
    6de6:	f042 0201 	orr.w	r2, r2, #1
    6dea:	b2d2      	uxtb	r2, r2
    6dec:	701a      	strb	r2, [r3, #0]
    6dee:	f242 0339 	movw	r3, #8249	; 0x2039
    6df2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6df6:	f242 0239 	movw	r2, #8249	; 0x2039
    6dfa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6dfe:	7812      	ldrb	r2, [r2, #0]
    6e00:	b2d2      	uxtb	r2, r2
    6e02:	f042 0210 	orr.w	r2, r2, #16
    6e06:	b2d2      	uxtb	r2, r2
    6e08:	701a      	strb	r2, [r3, #0]
    6e0a:	e00b      	b.n	6e24 <ground_calibrate+0xeec>
    6e0c:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    6e10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e14:	781b      	ldrb	r3, [r3, #0]
    6e16:	3301      	adds	r3, #1
    6e18:	b2da      	uxtb	r2, r3
    6e1a:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    6e1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e22:	701a      	strb	r2, [r3, #0]
      calib_status = CALIB_DONE;
    6e24:	f64b 63f2 	movw	r3, #48882	; 0xbef2
    6e28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e2c:	2202      	movs	r2, #2
    6e2e:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_CONTRAST(&ir_contrast);
    6e30:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6e34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e38:	781a      	ldrb	r2, [r3, #0]
    6e3a:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    6e3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e42:	781b      	ldrb	r3, [r3, #0]
    6e44:	b2db      	uxtb	r3, r3
    6e46:	429a      	cmp	r2, r3
    6e48:	d318      	bcc.n	6e7c <ground_calibrate+0xf44>
    6e4a:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    6e4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e52:	781b      	ldrb	r3, [r3, #0]
    6e54:	b2db      	uxtb	r3, r3
    6e56:	461a      	mov	r2, r3
    6e58:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6e5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e60:	781b      	ldrb	r3, [r3, #0]
    6e62:	1ad3      	subs	r3, r2, r3
    6e64:	33ff      	adds	r3, #255	; 0xff
    6e66:	2b06      	cmp	r3, #6
    6e68:	bfd4      	ite	le
    6e6a:	2300      	movle	r3, #0
    6e6c:	2301      	movgt	r3, #1
    6e6e:	b2db      	uxtb	r3, r3
    6e70:	e016      	b.n	6ea0 <ground_calibrate+0xf68>
    6e72:	bf00      	nop
    6e74:	200003f3 	.word	0x200003f3
    6e78:	200003f5 	.word	0x200003f5
    6e7c:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    6e80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e84:	781b      	ldrb	r3, [r3, #0]
    6e86:	b2db      	uxtb	r3, r3
    6e88:	461a      	mov	r2, r3
    6e8a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6e8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e92:	781b      	ldrb	r3, [r3, #0]
    6e94:	1ad3      	subs	r3, r2, r3
    6e96:	2b06      	cmp	r3, #6
    6e98:	bfd4      	ite	le
    6e9a:	2300      	movle	r3, #0
    6e9c:	2301      	movgt	r3, #1
    6e9e:	b2db      	uxtb	r3, r3
    6ea0:	2b00      	cmp	r3, #0
    6ea2:	f000 8194 	beq.w	71ce <ground_calibrate+0x1296>
    6ea6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6eaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eae:	781b      	ldrb	r3, [r3, #0]
    6eb0:	461a      	mov	r2, r3
    6eb2:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    6eb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eba:	2105      	movs	r1, #5
    6ebc:	5499      	strb	r1, [r3, r2]
    6ebe:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6ec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ec6:	781b      	ldrb	r3, [r3, #0]
    6ec8:	3301      	adds	r3, #1
    6eca:	b2da      	uxtb	r2, r3
    6ecc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6ed0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ed4:	701a      	strb	r2, [r3, #0]
    6ed6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6eda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ede:	781b      	ldrb	r3, [r3, #0]
    6ee0:	2bff      	cmp	r3, #255	; 0xff
    6ee2:	d105      	bne.n	6ef0 <ground_calibrate+0xfb8>
    6ee4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6ee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eec:	2200      	movs	r2, #0
    6eee:	701a      	strb	r2, [r3, #0]
    6ef0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6ef4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ef8:	781b      	ldrb	r3, [r3, #0]
    6efa:	461a      	mov	r2, r3
    6efc:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    6f00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f04:	2103      	movs	r1, #3
    6f06:	5499      	strb	r1, [r3, r2]
    6f08:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6f0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f10:	781b      	ldrb	r3, [r3, #0]
    6f12:	3301      	adds	r3, #1
    6f14:	b2da      	uxtb	r2, r3
    6f16:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6f1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f1e:	701a      	strb	r2, [r3, #0]
    6f20:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6f24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f28:	781b      	ldrb	r3, [r3, #0]
    6f2a:	2bff      	cmp	r3, #255	; 0xff
    6f2c:	d105      	bne.n	6f3a <ground_calibrate+0x1002>
    6f2e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6f32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f36:	2200      	movs	r2, #0
    6f38:	701a      	strb	r2, [r3, #0]
    6f3a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6f3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f42:	2203      	movs	r2, #3
    6f44:	701a      	strb	r2, [r3, #0]
    6f46:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6f4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f4e:	2203      	movs	r2, #3
    6f50:	701a      	strb	r2, [r3, #0]
    6f52:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6f56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f5a:	781b      	ldrb	r3, [r3, #0]
    6f5c:	461a      	mov	r2, r3
    6f5e:	f240 33f0 	movw	r3, #1008	; 0x3f0
    6f62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f66:	7819      	ldrb	r1, [r3, #0]
    6f68:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    6f6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f70:	5499      	strb	r1, [r3, r2]
    6f72:	f240 33f0 	movw	r3, #1008	; 0x3f0
    6f76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f7a:	781a      	ldrb	r2, [r3, #0]
    6f7c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6f80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f84:	781b      	ldrb	r3, [r3, #0]
    6f86:	4413      	add	r3, r2
    6f88:	b2da      	uxtb	r2, r3
    6f8a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6f8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f92:	701a      	strb	r2, [r3, #0]
    6f94:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6f98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f9c:	781a      	ldrb	r2, [r3, #0]
    6f9e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    6fa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fa6:	781b      	ldrb	r3, [r3, #0]
    6fa8:	4413      	add	r3, r2
    6faa:	b2da      	uxtb	r2, r3
    6fac:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    6fb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fb4:	701a      	strb	r2, [r3, #0]
    6fb6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6fba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fbe:	781b      	ldrb	r3, [r3, #0]
    6fc0:	3301      	adds	r3, #1
    6fc2:	b2da      	uxtb	r2, r3
    6fc4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6fc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fcc:	701a      	strb	r2, [r3, #0]
    6fce:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6fd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fd6:	781b      	ldrb	r3, [r3, #0]
    6fd8:	2bff      	cmp	r3, #255	; 0xff
    6fda:	d105      	bne.n	6fe8 <ground_calibrate+0x10b0>
    6fdc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6fe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fe4:	2200      	movs	r2, #0
    6fe6:	701a      	strb	r2, [r3, #0]
    6fe8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    6fec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ff0:	781b      	ldrb	r3, [r3, #0]
    6ff2:	461a      	mov	r2, r3
    6ff4:	f240 33f0 	movw	r3, #1008	; 0x3f0
    6ff8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ffc:	7859      	ldrb	r1, [r3, #1]
    6ffe:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    7002:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7006:	5499      	strb	r1, [r3, r2]
    7008:	4b77      	ldr	r3, [pc, #476]	; (71e8 <ground_calibrate+0x12b0>)
    700a:	781a      	ldrb	r2, [r3, #0]
    700c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7014:	781b      	ldrb	r3, [r3, #0]
    7016:	4413      	add	r3, r2
    7018:	b2da      	uxtb	r2, r3
    701a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    701e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7022:	701a      	strb	r2, [r3, #0]
    7024:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7028:	f2c2 0304 	movt	r3, #8196	; 0x2004
    702c:	781a      	ldrb	r2, [r3, #0]
    702e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7032:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7036:	781b      	ldrb	r3, [r3, #0]
    7038:	4413      	add	r3, r2
    703a:	b2da      	uxtb	r2, r3
    703c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7040:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7044:	701a      	strb	r2, [r3, #0]
    7046:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    704a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    704e:	781b      	ldrb	r3, [r3, #0]
    7050:	3301      	adds	r3, #1
    7052:	b2da      	uxtb	r2, r3
    7054:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7058:	f2c2 0304 	movt	r3, #8196	; 0x2004
    705c:	701a      	strb	r2, [r3, #0]
    705e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7062:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7066:	781b      	ldrb	r3, [r3, #0]
    7068:	2bff      	cmp	r3, #255	; 0xff
    706a:	d105      	bne.n	7078 <ground_calibrate+0x1140>
    706c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7070:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7074:	2200      	movs	r2, #0
    7076:	701a      	strb	r2, [r3, #0]
    7078:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    707c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7080:	781b      	ldrb	r3, [r3, #0]
    7082:	461a      	mov	r2, r3
    7084:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    708c:	7819      	ldrb	r1, [r3, #0]
    708e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    7092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7096:	5499      	strb	r1, [r3, r2]
    7098:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    709c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70a0:	781b      	ldrb	r3, [r3, #0]
    70a2:	3301      	adds	r3, #1
    70a4:	b2da      	uxtb	r2, r3
    70a6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    70aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70ae:	701a      	strb	r2, [r3, #0]
    70b0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    70b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70b8:	781b      	ldrb	r3, [r3, #0]
    70ba:	2bff      	cmp	r3, #255	; 0xff
    70bc:	d105      	bne.n	70ca <ground_calibrate+0x1192>
    70be:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    70c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70c6:	2200      	movs	r2, #0
    70c8:	701a      	strb	r2, [r3, #0]
    70ca:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    70ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70d2:	781b      	ldrb	r3, [r3, #0]
    70d4:	461a      	mov	r2, r3
    70d6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    70da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70de:	7819      	ldrb	r1, [r3, #0]
    70e0:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    70e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70e8:	5499      	strb	r1, [r3, r2]
    70ea:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    70ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70f2:	781b      	ldrb	r3, [r3, #0]
    70f4:	3301      	adds	r3, #1
    70f6:	b2da      	uxtb	r2, r3
    70f8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    70fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7100:	701a      	strb	r2, [r3, #0]
    7102:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7106:	f2c2 0304 	movt	r3, #8196	; 0x2004
    710a:	781b      	ldrb	r3, [r3, #0]
    710c:	2bff      	cmp	r3, #255	; 0xff
    710e:	d105      	bne.n	711c <ground_calibrate+0x11e4>
    7110:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7118:	2200      	movs	r2, #0
    711a:	701a      	strb	r2, [r3, #0]
    711c:	f242 0339 	movw	r3, #8249	; 0x2039
    7120:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7124:	781b      	ldrb	r3, [r3, #0]
    7126:	b2db      	uxtb	r3, r3
    7128:	f003 0310 	and.w	r3, r3, #16
    712c:	2b00      	cmp	r3, #0
    712e:	d15a      	bne.n	71e6 <ground_calibrate+0x12ae>
    7130:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    7134:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7138:	781b      	ldrb	r3, [r3, #0]
    713a:	b2db      	uxtb	r3, r3
    713c:	461a      	mov	r2, r3
    713e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    7142:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7146:	5c9a      	ldrb	r2, [r3, r2]
    7148:	f64b 73fb 	movw	r3, #49147	; 0xbffb
    714c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7150:	701a      	strb	r2, [r3, #0]
    7152:	f64b 73fc 	movw	r3, #49148	; 0xbffc
    7156:	f2c2 0304 	movt	r3, #8196	; 0x2004
    715a:	2200      	movs	r2, #0
    715c:	701a      	strb	r2, [r3, #0]
    715e:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    7162:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7166:	781b      	ldrb	r3, [r3, #0]
    7168:	b2db      	uxtb	r3, r3
    716a:	3301      	adds	r3, #1
    716c:	b2da      	uxtb	r2, r3
    716e:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    7172:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7176:	701a      	strb	r2, [r3, #0]
    7178:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    717c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7180:	781b      	ldrb	r3, [r3, #0]
    7182:	b2db      	uxtb	r3, r3
    7184:	2bff      	cmp	r3, #255	; 0xff
    7186:	d105      	bne.n	7194 <ground_calibrate+0x125c>
    7188:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    718c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7190:	2200      	movs	r2, #0
    7192:	701a      	strb	r2, [r3, #0]
    7194:	f242 0338 	movw	r3, #8248	; 0x2038
    7198:	f2c2 0300 	movt	r3, #8192	; 0x2000
    719c:	f242 0238 	movw	r2, #8248	; 0x2038
    71a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    71a4:	7812      	ldrb	r2, [r2, #0]
    71a6:	b2d2      	uxtb	r2, r2
    71a8:	f042 0201 	orr.w	r2, r2, #1
    71ac:	b2d2      	uxtb	r2, r2
    71ae:	701a      	strb	r2, [r3, #0]
    71b0:	f242 0339 	movw	r3, #8249	; 0x2039
    71b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71b8:	f242 0239 	movw	r2, #8249	; 0x2039
    71bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    71c0:	7812      	ldrb	r2, [r2, #0]
    71c2:	b2d2      	uxtb	r2, r2
    71c4:	f042 0210 	orr.w	r2, r2, #16
    71c8:	b2d2      	uxtb	r2, r2
    71ca:	701a      	strb	r2, [r3, #0]
    71cc:	e00b      	b.n	71e6 <ground_calibrate+0x12ae>
    71ce:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    71d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71d6:	781b      	ldrb	r3, [r3, #0]
    71d8:	3301      	adds	r3, #1
    71da:	b2da      	uxtb	r2, r3
    71dc:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    71e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71e4:	701a      	strb	r2, [r3, #0]
    }
}
else {}

//#endif
}
    71e6:	bd80      	pop	{r7, pc}
    71e8:	200003f1 	.word	0x200003f1

000071ec <pprz_mode_update>:

/** \fn inline uint8_t pprz_mode_update( void )
 *  \brief Update paparazzi mode
 */
inline uint8_t pprz_mode_update( void ) {
    71ec:	b480      	push	{r7}
    71ee:	b083      	sub	sp, #12
    71f0:	af00      	add	r7, sp, #0
  /** We remain in home mode until explicit reset from the RC */
  if (pprz_mode != PPRZ_MODE_HOME || CheckEvent(rc_event_1)) {
    71f2:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    71f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71fa:	781b      	ldrb	r3, [r3, #0]
    71fc:	2b03      	cmp	r3, #3
    71fe:	d10c      	bne.n	721a <pprz_mode_update+0x2e>
    7200:	f64b 63e0 	movw	r3, #48864	; 0xbee0
    7204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7208:	781b      	ldrb	r3, [r3, #0]
    720a:	2b00      	cmp	r3, #0
    720c:	d032      	beq.n	7274 <pprz_mode_update+0x88>
    720e:	f64b 63e0 	movw	r3, #48864	; 0xbee0
    7212:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7216:	2200      	movs	r2, #0
    7218:	701a      	strb	r2, [r3, #0]
    ModeUpdate(pprz_mode, PPRZ_MODE_OF_PULSE(from_fbw.channels[RADIO_MODE], from_fbw.status));
    721a:	f24c 0300 	movw	r3, #49152	; 0xc000
    721e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7222:	891b      	ldrh	r3, [r3, #8]
    7224:	b21b      	sxth	r3, r3
    7226:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    722a:	dc0f      	bgt.n	724c <pprz_mode_update+0x60>
    722c:	f24c 0300 	movw	r3, #49152	; 0xc000
    7230:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7234:	891b      	ldrh	r3, [r3, #8]
    7236:	b21a      	sxth	r2, r3
    7238:	f64e 5341 	movw	r3, #60737	; 0xed41
    723c:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    7240:	429a      	cmp	r2, r3
    7242:	bfb4      	ite	lt
    7244:	2300      	movlt	r3, #0
    7246:	2301      	movge	r3, #1
    7248:	b2db      	uxtb	r3, r3
    724a:	e000      	b.n	724e <pprz_mode_update+0x62>
    724c:	2302      	movs	r3, #2
    724e:	71fb      	strb	r3, [r7, #7]
    7250:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    7254:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7258:	781b      	ldrb	r3, [r3, #0]
    725a:	79fa      	ldrb	r2, [r7, #7]
    725c:	429a      	cmp	r2, r3
    725e:	d007      	beq.n	7270 <pprz_mode_update+0x84>
    7260:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    7264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7268:	79fa      	ldrb	r2, [r7, #7]
    726a:	701a      	strb	r2, [r3, #0]
    726c:	2301      	movs	r3, #1
    726e:	e002      	b.n	7276 <pprz_mode_update+0x8a>
    7270:	2300      	movs	r3, #0
    7272:	e000      	b.n	7276 <pprz_mode_update+0x8a>
  } else
    return FALSE;
    7274:	2300      	movs	r3, #0
}
    7276:	4618      	mov	r0, r3
    7278:	370c      	adds	r7, #12
    727a:	46bd      	mov	sp, r7
    727c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7280:	4770      	bx	lr
    7282:	bf00      	nop

00007284 <ir_estim_mode_update>:

#ifdef RADIO_LLS
/** \fn inline uint8_t ir_estim_mode_update( void )
 *  \brief update ir estimation if RADIO_LLS is true \n
 */
inline uint8_t ir_estim_mode_update( void ) {
    7284:	b480      	push	{r7}
    7286:	b083      	sub	sp, #12
    7288:	af00      	add	r7, sp, #0
  ModeUpdate(ir_estim_mode, IR_ESTIM_MODE_OF_PULSE(from_fbw.channels[RADIO_LLS]));
    728a:	f24c 0300 	movw	r3, #49152	; 0xc000
    728e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7292:	89db      	ldrh	r3, [r3, #14]
    7294:	b21a      	sxth	r2, r3
    7296:	f640 437f 	movw	r3, #3199	; 0xc7f
    729a:	429a      	cmp	r2, r3
    729c:	bfd4      	ite	le
    729e:	2300      	movle	r3, #0
    72a0:	2301      	movgt	r3, #1
    72a2:	b2db      	uxtb	r3, r3
    72a4:	71fb      	strb	r3, [r7, #7]
    72a6:	f240 33ec 	movw	r3, #1004	; 0x3ec
    72aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72ae:	781b      	ldrb	r3, [r3, #0]
    72b0:	79fa      	ldrb	r2, [r7, #7]
    72b2:	429a      	cmp	r2, r3
    72b4:	d007      	beq.n	72c6 <ir_estim_mode_update+0x42>
    72b6:	f240 33ec 	movw	r3, #1004	; 0x3ec
    72ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72be:	79fa      	ldrb	r2, [r7, #7]
    72c0:	701a      	strb	r2, [r3, #0]
    72c2:	2301      	movs	r3, #1
    72c4:	e000      	b.n	72c8 <ir_estim_mode_update+0x44>
    72c6:	2300      	movs	r3, #0
}
    72c8:	4618      	mov	r0, r3
    72ca:	370c      	adds	r7, #12
    72cc:	46bd      	mov	sp, r7
    72ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    72d2:	4770      	bx	lr

000072d4 <mcu1_status_update>:


/** \fn inline uint8_t mcu1_status_update( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t mcu1_status_update( void ) {
    72d4:	b480      	push	{r7}
    72d6:	b083      	sub	sp, #12
    72d8:	af00      	add	r7, sp, #0
  uint8_t new_mode = from_fbw.status;
    72da:	f24c 0300 	movw	r3, #49152	; 0xc000
    72de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72e2:	7cdb      	ldrb	r3, [r3, #19]
    72e4:	71fb      	strb	r3, [r7, #7]
  if (mcu1_status != new_mode) {
    72e6:	f64b 63e3 	movw	r3, #48867	; 0xbee3
    72ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72ee:	781b      	ldrb	r3, [r3, #0]
    72f0:	79fa      	ldrb	r2, [r7, #7]
    72f2:	429a      	cmp	r2, r3
    72f4:	d017      	beq.n	7326 <mcu1_status_update+0x52>
    bool_t changed = ((mcu1_status&MASK_FBW_CHANGED) != (new_mode&MASK_FBW_CHANGED));
    72f6:	f64b 63e3 	movw	r3, #48867	; 0xbee3
    72fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72fe:	781b      	ldrb	r3, [r3, #0]
    7300:	461a      	mov	r2, r3
    7302:	79fb      	ldrb	r3, [r7, #7]
    7304:	4053      	eors	r3, r2
    7306:	f003 0303 	and.w	r3, r3, #3
    730a:	2b00      	cmp	r3, #0
    730c:	bf0c      	ite	eq
    730e:	2300      	moveq	r3, #0
    7310:	2301      	movne	r3, #1
    7312:	b2db      	uxtb	r3, r3
    7314:	71bb      	strb	r3, [r7, #6]
    mcu1_status = new_mode;
    7316:	f64b 63e3 	movw	r3, #48867	; 0xbee3
    731a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    731e:	79fa      	ldrb	r2, [r7, #7]
    7320:	701a      	strb	r2, [r3, #0]
    return changed;
    7322:	79bb      	ldrb	r3, [r7, #6]
    7324:	e000      	b.n	7328 <mcu1_status_update+0x54>
  }
  return FALSE;
    7326:	2300      	movs	r3, #0
}
    7328:	4618      	mov	r0, r3
    732a:	370c      	adds	r7, #12
    732c:	46bd      	mov	sp, r7
    732e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7332:	4770      	bx	lr

00007334 <events_update>:
 EventUpdate(_cpt, (inflight_calib_mode==IF_CALIB_MODE_NONE && from_fbw.channels[_channel]<(int)(-0.75*MAX_PPRZ)), _event)

/** \fn static inline void events_update( void )
 *  @@@@@ A FIXER @@@@@
 */
static inline void events_update( void ) {
    7334:	b480      	push	{r7}
    7336:	af00      	add	r7, sp, #0
  static uint16_t event1_cpt = 0;
  static uint16_t event2_cpt = 0;
  EventPos(event1_cpt, RADIO_GAIN1, rc_event_1);
    7338:	f24c 530c 	movw	r3, #50444	; 0xc50c
    733c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7340:	781b      	ldrb	r3, [r3, #0]
    7342:	2b00      	cmp	r3, #0
    7344:	d12a      	bne.n	739c <events_update+0x68>
    7346:	f24c 0300 	movw	r3, #49152	; 0xc000
    734a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    734e:	895b      	ldrh	r3, [r3, #10]
    7350:	b21b      	sxth	r3, r3
    7352:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
    7356:	dd21      	ble.n	739c <events_update+0x68>
    7358:	f64b 63f4 	movw	r3, #48884	; 0xbef4
    735c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7360:	881b      	ldrh	r3, [r3, #0]
    7362:	2b13      	cmp	r3, #19
    7364:	d819      	bhi.n	739a <events_update+0x66>
    7366:	f64b 63f4 	movw	r3, #48884	; 0xbef4
    736a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    736e:	881b      	ldrh	r3, [r3, #0]
    7370:	3301      	adds	r3, #1
    7372:	b29a      	uxth	r2, r3
    7374:	f64b 63f4 	movw	r3, #48884	; 0xbef4
    7378:	f2c2 0304 	movt	r3, #8196	; 0x2004
    737c:	801a      	strh	r2, [r3, #0]
    737e:	f64b 63f4 	movw	r3, #48884	; 0xbef4
    7382:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7386:	881b      	ldrh	r3, [r3, #0]
    7388:	2b14      	cmp	r3, #20
    738a:	d106      	bne.n	739a <events_update+0x66>
    738c:	f64b 63e0 	movw	r3, #48864	; 0xbee0
    7390:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7394:	2201      	movs	r2, #1
    7396:	701a      	strb	r2, [r3, #0]
    7398:	e00c      	b.n	73b4 <events_update+0x80>
    739a:	e00b      	b.n	73b4 <events_update+0x80>
    739c:	f64b 63f4 	movw	r3, #48884	; 0xbef4
    73a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73a4:	2200      	movs	r2, #0
    73a6:	801a      	strh	r2, [r3, #0]
    73a8:	f64b 63e0 	movw	r3, #48864	; 0xbee0
    73ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73b0:	2200      	movs	r2, #0
    73b2:	701a      	strb	r2, [r3, #0]
  EventNeg(event2_cpt, RADIO_GAIN1, rc_event_2);
    73b4:	f24c 530c 	movw	r3, #50444	; 0xc50c
    73b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73bc:	781b      	ldrb	r3, [r3, #0]
    73be:	2b00      	cmp	r3, #0
    73c0:	d12a      	bne.n	7418 <events_update+0xe4>
    73c2:	f24c 0300 	movw	r3, #49152	; 0xc000
    73c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73ca:	895b      	ldrh	r3, [r3, #10]
    73cc:	b21b      	sxth	r3, r3
    73ce:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
    73d2:	da21      	bge.n	7418 <events_update+0xe4>
    73d4:	f64b 63f6 	movw	r3, #48886	; 0xbef6
    73d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73dc:	881b      	ldrh	r3, [r3, #0]
    73de:	2b13      	cmp	r3, #19
    73e0:	d819      	bhi.n	7416 <events_update+0xe2>
    73e2:	f64b 63f6 	movw	r3, #48886	; 0xbef6
    73e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73ea:	881b      	ldrh	r3, [r3, #0]
    73ec:	3301      	adds	r3, #1
    73ee:	b29a      	uxth	r2, r3
    73f0:	f64b 63f6 	movw	r3, #48886	; 0xbef6
    73f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73f8:	801a      	strh	r2, [r3, #0]
    73fa:	f64b 63f6 	movw	r3, #48886	; 0xbef6
    73fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7402:	881b      	ldrh	r3, [r3, #0]
    7404:	2b14      	cmp	r3, #20
    7406:	d106      	bne.n	7416 <events_update+0xe2>
    7408:	f64b 63e1 	movw	r3, #48865	; 0xbee1
    740c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7410:	2201      	movs	r2, #1
    7412:	701a      	strb	r2, [r3, #0]
    7414:	e00c      	b.n	7430 <events_update+0xfc>
    7416:	e00b      	b.n	7430 <events_update+0xfc>
    7418:	f64b 63f6 	movw	r3, #48886	; 0xbef6
    741c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7420:	2200      	movs	r2, #0
    7422:	801a      	strh	r2, [r3, #0]
    7424:	f64b 63e1 	movw	r3, #48865	; 0xbee1
    7428:	f2c2 0304 	movt	r3, #8196	; 0x2004
    742c:	2200      	movs	r2, #0
    742e:	701a      	strb	r2, [r3, #0]
}  
    7430:	46bd      	mov	sp, r7
    7432:	f85d 7b04 	ldr.w	r7, [sp], #4
    7436:	4770      	bx	lr

00007438 <copy_from_to_fbw>:


/** \fn inline void copy_from_to_fbw ( void )
 *  \brief Send back uncontrolled channels (only rudder)
 */
inline void copy_from_to_fbw ( void ) {
    7438:	b480      	push	{r7}
    743a:	af00      	add	r7, sp, #0
  to_fbw.channels[RADIO_YAW] = from_fbw.channels[RADIO_YAW];
    743c:	f24c 0300 	movw	r3, #49152	; 0xc000
    7440:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7444:	88da      	ldrh	r2, [r3, #6]
    7446:	f24c 0318 	movw	r3, #49176	; 0xc018
    744a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    744e:	80da      	strh	r2, [r3, #6]
#ifdef ANTON_T7
  to_fbw.channels[RADIO_PITCH] = from_fbw.channels[RADIO_PITCH];
#endif
  to_fbw.status = 0;
    7450:	f24c 0318 	movw	r3, #49176	; 0xc018
    7454:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7458:	2200      	movs	r2, #0
    745a:	74da      	strb	r2, [r3, #19]
}
    745c:	46bd      	mov	sp, r7
    745e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7462:	4770      	bx	lr

00007464 <send_boot>:
/** \fn inline void reporting_task( void )
 *  \brief Send a serie of initialisation messages followed by a stream of periodic ones\n
 * Called at 20Hz.
 */

void send_boot(void){
    7464:	b480      	push	{r7}
    7466:	af00      	add	r7, sp, #0
  /** initialisation phase during boot */
  //vPrintString("S_13 reporting_task start!\n\r");
  //add by wanbo
  //if (boot) 
  {
      DOWNLINK_SEND_BOOT(&version);
    7468:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    746c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7470:	781a      	ldrb	r2, [r3, #0]
    7472:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    7476:	f2c2 0304 	movt	r3, #8196	; 0x2004
    747a:	781b      	ldrb	r3, [r3, #0]
    747c:	b2db      	uxtb	r3, r3
    747e:	429a      	cmp	r2, r3
    7480:	d313      	bcc.n	74aa <send_boot+0x46>
    7482:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    7486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    748a:	781b      	ldrb	r3, [r3, #0]
    748c:	b2db      	uxtb	r3, r3
    748e:	461a      	mov	r2, r3
    7490:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7494:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7498:	781b      	ldrb	r3, [r3, #0]
    749a:	1ad3      	subs	r3, r2, r3
    749c:	33ff      	adds	r3, #255	; 0xff
    749e:	2b06      	cmp	r3, #6
    74a0:	bfd4      	ite	le
    74a2:	2300      	movle	r3, #0
    74a4:	2301      	movgt	r3, #1
    74a6:	b2db      	uxtb	r3, r3
    74a8:	e011      	b.n	74ce <send_boot+0x6a>
    74aa:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    74ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74b2:	781b      	ldrb	r3, [r3, #0]
    74b4:	b2db      	uxtb	r3, r3
    74b6:	461a      	mov	r2, r3
    74b8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    74bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74c0:	781b      	ldrb	r3, [r3, #0]
    74c2:	1ad3      	subs	r3, r2, r3
    74c4:	2b06      	cmp	r3, #6
    74c6:	bfd4      	ite	le
    74c8:	2300      	movle	r3, #0
    74ca:	2301      	movgt	r3, #1
    74cc:	b2db      	uxtb	r3, r3
    74ce:	2b00      	cmp	r3, #0
    74d0:	f000 8194 	beq.w	77fc <send_boot+0x398>
    74d4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    74d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74dc:	781b      	ldrb	r3, [r3, #0]
    74de:	461a      	mov	r2, r3
    74e0:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    74e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74e8:	2105      	movs	r1, #5
    74ea:	5499      	strb	r1, [r3, r2]
    74ec:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    74f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74f4:	781b      	ldrb	r3, [r3, #0]
    74f6:	3301      	adds	r3, #1
    74f8:	b2da      	uxtb	r2, r3
    74fa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    74fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7502:	701a      	strb	r2, [r3, #0]
    7504:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7508:	f2c2 0304 	movt	r3, #8196	; 0x2004
    750c:	781b      	ldrb	r3, [r3, #0]
    750e:	2bff      	cmp	r3, #255	; 0xff
    7510:	d105      	bne.n	751e <send_boot+0xba>
    7512:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7516:	f2c2 0304 	movt	r3, #8196	; 0x2004
    751a:	2200      	movs	r2, #0
    751c:	701a      	strb	r2, [r3, #0]
    751e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7522:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7526:	781b      	ldrb	r3, [r3, #0]
    7528:	461a      	mov	r2, r3
    752a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    752e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7532:	2101      	movs	r1, #1
    7534:	5499      	strb	r1, [r3, r2]
    7536:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    753a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    753e:	781b      	ldrb	r3, [r3, #0]
    7540:	3301      	adds	r3, #1
    7542:	b2da      	uxtb	r2, r3
    7544:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    754c:	701a      	strb	r2, [r3, #0]
    754e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7552:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7556:	781b      	ldrb	r3, [r3, #0]
    7558:	2bff      	cmp	r3, #255	; 0xff
    755a:	d105      	bne.n	7568 <send_boot+0x104>
    755c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7564:	2200      	movs	r2, #0
    7566:	701a      	strb	r2, [r3, #0]
    7568:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    756c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7570:	2201      	movs	r2, #1
    7572:	701a      	strb	r2, [r3, #0]
    7574:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7578:	f2c2 0304 	movt	r3, #8196	; 0x2004
    757c:	2201      	movs	r2, #1
    757e:	701a      	strb	r2, [r3, #0]
    7580:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7588:	781b      	ldrb	r3, [r3, #0]
    758a:	461a      	mov	r2, r3
    758c:	f648 1396 	movw	r3, #35222	; 0x8996
    7590:	f2c0 0301 	movt	r3, #1
    7594:	7819      	ldrb	r1, [r3, #0]
    7596:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    759a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    759e:	5499      	strb	r1, [r3, r2]
    75a0:	f648 1396 	movw	r3, #35222	; 0x8996
    75a4:	f2c0 0301 	movt	r3, #1
    75a8:	781a      	ldrb	r2, [r3, #0]
    75aa:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    75ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75b2:	781b      	ldrb	r3, [r3, #0]
    75b4:	4413      	add	r3, r2
    75b6:	b2da      	uxtb	r2, r3
    75b8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    75bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75c0:	701a      	strb	r2, [r3, #0]
    75c2:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    75c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75ca:	781a      	ldrb	r2, [r3, #0]
    75cc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    75d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75d4:	781b      	ldrb	r3, [r3, #0]
    75d6:	4413      	add	r3, r2
    75d8:	b2da      	uxtb	r2, r3
    75da:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    75de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75e2:	701a      	strb	r2, [r3, #0]
    75e4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    75e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75ec:	781b      	ldrb	r3, [r3, #0]
    75ee:	3301      	adds	r3, #1
    75f0:	b2da      	uxtb	r2, r3
    75f2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    75f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75fa:	701a      	strb	r2, [r3, #0]
    75fc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7600:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7604:	781b      	ldrb	r3, [r3, #0]
    7606:	2bff      	cmp	r3, #255	; 0xff
    7608:	d105      	bne.n	7616 <send_boot+0x1b2>
    760a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    760e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7612:	2200      	movs	r2, #0
    7614:	701a      	strb	r2, [r3, #0]
    7616:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    761a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    761e:	781b      	ldrb	r3, [r3, #0]
    7620:	461a      	mov	r2, r3
    7622:	f648 1396 	movw	r3, #35222	; 0x8996
    7626:	f2c0 0301 	movt	r3, #1
    762a:	7859      	ldrb	r1, [r3, #1]
    762c:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    7630:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7634:	5499      	strb	r1, [r3, r2]
    7636:	4b88      	ldr	r3, [pc, #544]	; (7858 <send_boot+0x3f4>)
    7638:	781a      	ldrb	r2, [r3, #0]
    763a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    763e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7642:	781b      	ldrb	r3, [r3, #0]
    7644:	4413      	add	r3, r2
    7646:	b2da      	uxtb	r2, r3
    7648:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    764c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7650:	701a      	strb	r2, [r3, #0]
    7652:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7656:	f2c2 0304 	movt	r3, #8196	; 0x2004
    765a:	781a      	ldrb	r2, [r3, #0]
    765c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7660:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7664:	781b      	ldrb	r3, [r3, #0]
    7666:	4413      	add	r3, r2
    7668:	b2da      	uxtb	r2, r3
    766a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    766e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7672:	701a      	strb	r2, [r3, #0]
    7674:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7678:	f2c2 0304 	movt	r3, #8196	; 0x2004
    767c:	781b      	ldrb	r3, [r3, #0]
    767e:	3301      	adds	r3, #1
    7680:	b2da      	uxtb	r2, r3
    7682:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7686:	f2c2 0304 	movt	r3, #8196	; 0x2004
    768a:	701a      	strb	r2, [r3, #0]
    768c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7690:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7694:	781b      	ldrb	r3, [r3, #0]
    7696:	2bff      	cmp	r3, #255	; 0xff
    7698:	d105      	bne.n	76a6 <send_boot+0x242>
    769a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    769e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76a2:	2200      	movs	r2, #0
    76a4:	701a      	strb	r2, [r3, #0]
    76a6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    76aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76ae:	781b      	ldrb	r3, [r3, #0]
    76b0:	461a      	mov	r2, r3
    76b2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    76b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76ba:	7819      	ldrb	r1, [r3, #0]
    76bc:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    76c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76c4:	5499      	strb	r1, [r3, r2]
    76c6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    76ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76ce:	781b      	ldrb	r3, [r3, #0]
    76d0:	3301      	adds	r3, #1
    76d2:	b2da      	uxtb	r2, r3
    76d4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    76d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76dc:	701a      	strb	r2, [r3, #0]
    76de:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    76e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76e6:	781b      	ldrb	r3, [r3, #0]
    76e8:	2bff      	cmp	r3, #255	; 0xff
    76ea:	d105      	bne.n	76f8 <send_boot+0x294>
    76ec:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    76f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76f4:	2200      	movs	r2, #0
    76f6:	701a      	strb	r2, [r3, #0]
    76f8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    76fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7700:	781b      	ldrb	r3, [r3, #0]
    7702:	461a      	mov	r2, r3
    7704:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7708:	f2c2 0304 	movt	r3, #8196	; 0x2004
    770c:	7819      	ldrb	r1, [r3, #0]
    770e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    7712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7716:	5499      	strb	r1, [r3, r2]
    7718:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    771c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7720:	781b      	ldrb	r3, [r3, #0]
    7722:	3301      	adds	r3, #1
    7724:	b2da      	uxtb	r2, r3
    7726:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    772a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    772e:	701a      	strb	r2, [r3, #0]
    7730:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7734:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7738:	781b      	ldrb	r3, [r3, #0]
    773a:	2bff      	cmp	r3, #255	; 0xff
    773c:	d105      	bne.n	774a <send_boot+0x2e6>
    773e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7742:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7746:	2200      	movs	r2, #0
    7748:	701a      	strb	r2, [r3, #0]
    774a:	f242 0339 	movw	r3, #8249	; 0x2039
    774e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7752:	781b      	ldrb	r3, [r3, #0]
    7754:	b2db      	uxtb	r3, r3
    7756:	f003 0310 	and.w	r3, r3, #16
    775a:	2b00      	cmp	r3, #0
    775c:	d15a      	bne.n	7814 <send_boot+0x3b0>
    775e:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    7762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7766:	781b      	ldrb	r3, [r3, #0]
    7768:	b2db      	uxtb	r3, r3
    776a:	461a      	mov	r2, r3
    776c:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    7770:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7774:	5c9a      	ldrb	r2, [r3, r2]
    7776:	f64b 73fb 	movw	r3, #49147	; 0xbffb
    777a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    777e:	701a      	strb	r2, [r3, #0]
    7780:	f64b 73fc 	movw	r3, #49148	; 0xbffc
    7784:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7788:	2200      	movs	r2, #0
    778a:	701a      	strb	r2, [r3, #0]
    778c:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    7790:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7794:	781b      	ldrb	r3, [r3, #0]
    7796:	b2db      	uxtb	r3, r3
    7798:	3301      	adds	r3, #1
    779a:	b2da      	uxtb	r2, r3
    779c:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    77a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77a4:	701a      	strb	r2, [r3, #0]
    77a6:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    77aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77ae:	781b      	ldrb	r3, [r3, #0]
    77b0:	b2db      	uxtb	r3, r3
    77b2:	2bff      	cmp	r3, #255	; 0xff
    77b4:	d105      	bne.n	77c2 <send_boot+0x35e>
    77b6:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    77ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77be:	2200      	movs	r2, #0
    77c0:	701a      	strb	r2, [r3, #0]
    77c2:	f242 0338 	movw	r3, #8248	; 0x2038
    77c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77ca:	f242 0238 	movw	r2, #8248	; 0x2038
    77ce:	f2c2 0200 	movt	r2, #8192	; 0x2000
    77d2:	7812      	ldrb	r2, [r2, #0]
    77d4:	b2d2      	uxtb	r2, r2
    77d6:	f042 0201 	orr.w	r2, r2, #1
    77da:	b2d2      	uxtb	r2, r2
    77dc:	701a      	strb	r2, [r3, #0]
    77de:	f242 0339 	movw	r3, #8249	; 0x2039
    77e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77e6:	f242 0239 	movw	r2, #8249	; 0x2039
    77ea:	f2c2 0200 	movt	r2, #8192	; 0x2000
    77ee:	7812      	ldrb	r2, [r2, #0]
    77f0:	b2d2      	uxtb	r2, r2
    77f2:	f042 0210 	orr.w	r2, r2, #16
    77f6:	b2d2      	uxtb	r2, r2
    77f8:	701a      	strb	r2, [r3, #0]
    77fa:	e00b      	b.n	7814 <send_boot+0x3b0>
    77fc:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    7800:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7804:	781b      	ldrb	r3, [r3, #0]
    7806:	3301      	adds	r3, #1
    7808:	b2da      	uxtb	r2, r3
    780a:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    780e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7812:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    7814:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7818:	f2c2 0304 	movt	r3, #8196	; 0x2004
    781c:	781a      	ldrb	r2, [r3, #0]
    781e:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    7822:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7826:	781b      	ldrb	r3, [r3, #0]
    7828:	b2db      	uxtb	r3, r3
    782a:	429a      	cmp	r2, r3
    782c:	d316      	bcc.n	785c <send_boot+0x3f8>
    782e:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    7832:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7836:	781b      	ldrb	r3, [r3, #0]
    7838:	b2db      	uxtb	r3, r3
    783a:	461a      	mov	r2, r3
    783c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7840:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7844:	781b      	ldrb	r3, [r3, #0]
    7846:	1ad3      	subs	r3, r2, r3
    7848:	33ff      	adds	r3, #255	; 0xff
    784a:	2b14      	cmp	r3, #20
    784c:	bfd4      	ite	le
    784e:	2300      	movle	r3, #0
    7850:	2301      	movgt	r3, #1
    7852:	b2db      	uxtb	r3, r3
    7854:	e014      	b.n	7880 <send_boot+0x41c>
    7856:	bf00      	nop
    7858:	00018997 	.word	0x00018997
    785c:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    7860:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7864:	781b      	ldrb	r3, [r3, #0]
    7866:	b2db      	uxtb	r3, r3
    7868:	461a      	mov	r2, r3
    786a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    786e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7872:	781b      	ldrb	r3, [r3, #0]
    7874:	1ad3      	subs	r3, r2, r3
    7876:	2b14      	cmp	r3, #20
    7878:	bfd4      	ite	le
    787a:	2300      	movle	r3, #0
    787c:	2301      	movgt	r3, #1
    787e:	b2db      	uxtb	r3, r3
    7880:	2b00      	cmp	r3, #0
    7882:	f000 85a5 	beq.w	83d0 <send_boot+0xf6c>
    7886:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    788a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    788e:	781b      	ldrb	r3, [r3, #0]
    7890:	461a      	mov	r2, r3
    7892:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    7896:	f2c2 0304 	movt	r3, #8196	; 0x2004
    789a:	2105      	movs	r1, #5
    789c:	5499      	strb	r1, [r3, r2]
    789e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    78a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78a6:	781b      	ldrb	r3, [r3, #0]
    78a8:	3301      	adds	r3, #1
    78aa:	b2da      	uxtb	r2, r3
    78ac:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    78b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78b4:	701a      	strb	r2, [r3, #0]
    78b6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    78ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78be:	781b      	ldrb	r3, [r3, #0]
    78c0:	2bff      	cmp	r3, #255	; 0xff
    78c2:	d105      	bne.n	78d0 <send_boot+0x46c>
    78c4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    78c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78cc:	2200      	movs	r2, #0
    78ce:	701a      	strb	r2, [r3, #0]
    78d0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    78d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78d8:	781b      	ldrb	r3, [r3, #0]
    78da:	461a      	mov	r2, r3
    78dc:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    78e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78e4:	2105      	movs	r1, #5
    78e6:	5499      	strb	r1, [r3, r2]
    78e8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    78ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78f0:	781b      	ldrb	r3, [r3, #0]
    78f2:	3301      	adds	r3, #1
    78f4:	b2da      	uxtb	r2, r3
    78f6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    78fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78fe:	701a      	strb	r2, [r3, #0]
    7900:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7904:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7908:	781b      	ldrb	r3, [r3, #0]
    790a:	2bff      	cmp	r3, #255	; 0xff
    790c:	d105      	bne.n	791a <send_boot+0x4b6>
    790e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7916:	2200      	movs	r2, #0
    7918:	701a      	strb	r2, [r3, #0]
    791a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    791e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7922:	2205      	movs	r2, #5
    7924:	701a      	strb	r2, [r3, #0]
    7926:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    792a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    792e:	2205      	movs	r2, #5
    7930:	701a      	strb	r2, [r3, #0]
    7932:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7936:	f2c2 0304 	movt	r3, #8196	; 0x2004
    793a:	781b      	ldrb	r3, [r3, #0]
    793c:	461a      	mov	r2, r3
    793e:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
    7942:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7946:	7819      	ldrb	r1, [r3, #0]
    7948:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    794c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7950:	5499      	strb	r1, [r3, r2]
    7952:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
    7956:	f2c2 0304 	movt	r3, #8196	; 0x2004
    795a:	781a      	ldrb	r2, [r3, #0]
    795c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7960:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7964:	781b      	ldrb	r3, [r3, #0]
    7966:	4413      	add	r3, r2
    7968:	b2da      	uxtb	r2, r3
    796a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    796e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7972:	701a      	strb	r2, [r3, #0]
    7974:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7978:	f2c2 0304 	movt	r3, #8196	; 0x2004
    797c:	781a      	ldrb	r2, [r3, #0]
    797e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7982:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7986:	781b      	ldrb	r3, [r3, #0]
    7988:	4413      	add	r3, r2
    798a:	b2da      	uxtb	r2, r3
    798c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7990:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7994:	701a      	strb	r2, [r3, #0]
    7996:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    799a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    799e:	781b      	ldrb	r3, [r3, #0]
    79a0:	3301      	adds	r3, #1
    79a2:	b2da      	uxtb	r2, r3
    79a4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    79a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79ac:	701a      	strb	r2, [r3, #0]
    79ae:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    79b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79b6:	781b      	ldrb	r3, [r3, #0]
    79b8:	2bff      	cmp	r3, #255	; 0xff
    79ba:	d105      	bne.n	79c8 <send_boot+0x564>
    79bc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    79c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79c4:	2200      	movs	r2, #0
    79c6:	701a      	strb	r2, [r3, #0]
    79c8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    79cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79d0:	781b      	ldrb	r3, [r3, #0]
    79d2:	461a      	mov	r2, r3
    79d4:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
    79d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79dc:	7859      	ldrb	r1, [r3, #1]
    79de:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    79e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79e6:	5499      	strb	r1, [r3, r2]
    79e8:	4bd1      	ldr	r3, [pc, #836]	; (7d30 <send_boot+0x8cc>)
    79ea:	781a      	ldrb	r2, [r3, #0]
    79ec:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    79f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79f4:	781b      	ldrb	r3, [r3, #0]
    79f6:	4413      	add	r3, r2
    79f8:	b2da      	uxtb	r2, r3
    79fa:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    79fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a02:	701a      	strb	r2, [r3, #0]
    7a04:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7a08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a0c:	781a      	ldrb	r2, [r3, #0]
    7a0e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7a12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a16:	781b      	ldrb	r3, [r3, #0]
    7a18:	4413      	add	r3, r2
    7a1a:	b2da      	uxtb	r2, r3
    7a1c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7a20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a24:	701a      	strb	r2, [r3, #0]
    7a26:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7a2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a2e:	781b      	ldrb	r3, [r3, #0]
    7a30:	3301      	adds	r3, #1
    7a32:	b2da      	uxtb	r2, r3
    7a34:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7a38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a3c:	701a      	strb	r2, [r3, #0]
    7a3e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7a42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a46:	781b      	ldrb	r3, [r3, #0]
    7a48:	2bff      	cmp	r3, #255	; 0xff
    7a4a:	d105      	bne.n	7a58 <send_boot+0x5f4>
    7a4c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7a50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a54:	2200      	movs	r2, #0
    7a56:	701a      	strb	r2, [r3, #0]
    7a58:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7a5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a60:	781b      	ldrb	r3, [r3, #0]
    7a62:	461a      	mov	r2, r3
    7a64:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
    7a68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a6c:	7899      	ldrb	r1, [r3, #2]
    7a6e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    7a72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a76:	5499      	strb	r1, [r3, r2]
    7a78:	4bae      	ldr	r3, [pc, #696]	; (7d34 <send_boot+0x8d0>)
    7a7a:	781a      	ldrb	r2, [r3, #0]
    7a7c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7a80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a84:	781b      	ldrb	r3, [r3, #0]
    7a86:	4413      	add	r3, r2
    7a88:	b2da      	uxtb	r2, r3
    7a8a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7a8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a92:	701a      	strb	r2, [r3, #0]
    7a94:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7a98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a9c:	781a      	ldrb	r2, [r3, #0]
    7a9e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7aa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aa6:	781b      	ldrb	r3, [r3, #0]
    7aa8:	4413      	add	r3, r2
    7aaa:	b2da      	uxtb	r2, r3
    7aac:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7ab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ab4:	701a      	strb	r2, [r3, #0]
    7ab6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7aba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7abe:	781b      	ldrb	r3, [r3, #0]
    7ac0:	3301      	adds	r3, #1
    7ac2:	b2da      	uxtb	r2, r3
    7ac4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7ac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7acc:	701a      	strb	r2, [r3, #0]
    7ace:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7ad2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ad6:	781b      	ldrb	r3, [r3, #0]
    7ad8:	2bff      	cmp	r3, #255	; 0xff
    7ada:	d105      	bne.n	7ae8 <send_boot+0x684>
    7adc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7ae0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ae4:	2200      	movs	r2, #0
    7ae6:	701a      	strb	r2, [r3, #0]
    7ae8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7aec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7af0:	781b      	ldrb	r3, [r3, #0]
    7af2:	461a      	mov	r2, r3
    7af4:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
    7af8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7afc:	78d9      	ldrb	r1, [r3, #3]
    7afe:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    7b02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b06:	5499      	strb	r1, [r3, r2]
    7b08:	4b8b      	ldr	r3, [pc, #556]	; (7d38 <send_boot+0x8d4>)
    7b0a:	781a      	ldrb	r2, [r3, #0]
    7b0c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7b10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b14:	781b      	ldrb	r3, [r3, #0]
    7b16:	4413      	add	r3, r2
    7b18:	b2da      	uxtb	r2, r3
    7b1a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7b1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b22:	701a      	strb	r2, [r3, #0]
    7b24:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7b28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b2c:	781a      	ldrb	r2, [r3, #0]
    7b2e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7b32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b36:	781b      	ldrb	r3, [r3, #0]
    7b38:	4413      	add	r3, r2
    7b3a:	b2da      	uxtb	r2, r3
    7b3c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7b40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b44:	701a      	strb	r2, [r3, #0]
    7b46:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7b4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b4e:	781b      	ldrb	r3, [r3, #0]
    7b50:	3301      	adds	r3, #1
    7b52:	b2da      	uxtb	r2, r3
    7b54:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7b58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b5c:	701a      	strb	r2, [r3, #0]
    7b5e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7b62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b66:	781b      	ldrb	r3, [r3, #0]
    7b68:	2bff      	cmp	r3, #255	; 0xff
    7b6a:	d105      	bne.n	7b78 <send_boot+0x714>
    7b6c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b74:	2200      	movs	r2, #0
    7b76:	701a      	strb	r2, [r3, #0]
    7b78:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7b7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b80:	781b      	ldrb	r3, [r3, #0]
    7b82:	461a      	mov	r2, r3
    7b84:	f24c 43f4 	movw	r3, #50420	; 0xc4f4
    7b88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b8c:	7819      	ldrb	r1, [r3, #0]
    7b8e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    7b92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b96:	5499      	strb	r1, [r3, r2]
    7b98:	f24c 43f4 	movw	r3, #50420	; 0xc4f4
    7b9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ba0:	781a      	ldrb	r2, [r3, #0]
    7ba2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7ba6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7baa:	781b      	ldrb	r3, [r3, #0]
    7bac:	4413      	add	r3, r2
    7bae:	b2da      	uxtb	r2, r3
    7bb0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7bb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bb8:	701a      	strb	r2, [r3, #0]
    7bba:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7bbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bc2:	781a      	ldrb	r2, [r3, #0]
    7bc4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7bc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bcc:	781b      	ldrb	r3, [r3, #0]
    7bce:	4413      	add	r3, r2
    7bd0:	b2da      	uxtb	r2, r3
    7bd2:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7bd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bda:	701a      	strb	r2, [r3, #0]
    7bdc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7be0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7be4:	781b      	ldrb	r3, [r3, #0]
    7be6:	3301      	adds	r3, #1
    7be8:	b2da      	uxtb	r2, r3
    7bea:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7bee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bf2:	701a      	strb	r2, [r3, #0]
    7bf4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7bf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bfc:	781b      	ldrb	r3, [r3, #0]
    7bfe:	2bff      	cmp	r3, #255	; 0xff
    7c00:	d105      	bne.n	7c0e <send_boot+0x7aa>
    7c02:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7c06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c0a:	2200      	movs	r2, #0
    7c0c:	701a      	strb	r2, [r3, #0]
    7c0e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7c12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c16:	781b      	ldrb	r3, [r3, #0]
    7c18:	461a      	mov	r2, r3
    7c1a:	f24c 43f4 	movw	r3, #50420	; 0xc4f4
    7c1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c22:	7859      	ldrb	r1, [r3, #1]
    7c24:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    7c28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c2c:	5499      	strb	r1, [r3, r2]
    7c2e:	4b43      	ldr	r3, [pc, #268]	; (7d3c <send_boot+0x8d8>)
    7c30:	781a      	ldrb	r2, [r3, #0]
    7c32:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7c36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c3a:	781b      	ldrb	r3, [r3, #0]
    7c3c:	4413      	add	r3, r2
    7c3e:	b2da      	uxtb	r2, r3
    7c40:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7c44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c48:	701a      	strb	r2, [r3, #0]
    7c4a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7c4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c52:	781a      	ldrb	r2, [r3, #0]
    7c54:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7c58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c5c:	781b      	ldrb	r3, [r3, #0]
    7c5e:	4413      	add	r3, r2
    7c60:	b2da      	uxtb	r2, r3
    7c62:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7c66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c6a:	701a      	strb	r2, [r3, #0]
    7c6c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7c70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c74:	781b      	ldrb	r3, [r3, #0]
    7c76:	3301      	adds	r3, #1
    7c78:	b2da      	uxtb	r2, r3
    7c7a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7c7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c82:	701a      	strb	r2, [r3, #0]
    7c84:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7c88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c8c:	781b      	ldrb	r3, [r3, #0]
    7c8e:	2bff      	cmp	r3, #255	; 0xff
    7c90:	d105      	bne.n	7c9e <send_boot+0x83a>
    7c92:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7c96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c9a:	2200      	movs	r2, #0
    7c9c:	701a      	strb	r2, [r3, #0]
    7c9e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7ca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ca6:	781b      	ldrb	r3, [r3, #0]
    7ca8:	461a      	mov	r2, r3
    7caa:	f24c 43f4 	movw	r3, #50420	; 0xc4f4
    7cae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cb2:	7899      	ldrb	r1, [r3, #2]
    7cb4:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    7cb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cbc:	5499      	strb	r1, [r3, r2]
    7cbe:	4b20      	ldr	r3, [pc, #128]	; (7d40 <send_boot+0x8dc>)
    7cc0:	781a      	ldrb	r2, [r3, #0]
    7cc2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7cc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cca:	781b      	ldrb	r3, [r3, #0]
    7ccc:	4413      	add	r3, r2
    7cce:	b2da      	uxtb	r2, r3
    7cd0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7cd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cd8:	701a      	strb	r2, [r3, #0]
    7cda:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7cde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ce2:	781a      	ldrb	r2, [r3, #0]
    7ce4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7ce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cec:	781b      	ldrb	r3, [r3, #0]
    7cee:	4413      	add	r3, r2
    7cf0:	b2da      	uxtb	r2, r3
    7cf2:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7cf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cfa:	701a      	strb	r2, [r3, #0]
    7cfc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7d00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d04:	781b      	ldrb	r3, [r3, #0]
    7d06:	3301      	adds	r3, #1
    7d08:	b2da      	uxtb	r2, r3
    7d0a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7d0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d12:	701a      	strb	r2, [r3, #0]
    7d14:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7d18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d1c:	781b      	ldrb	r3, [r3, #0]
    7d1e:	2bff      	cmp	r3, #255	; 0xff
    7d20:	d110      	bne.n	7d44 <send_boot+0x8e0>
    7d22:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7d26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d2a:	2200      	movs	r2, #0
    7d2c:	701a      	strb	r2, [r3, #0]
    7d2e:	e009      	b.n	7d44 <send_boot+0x8e0>
    7d30:	2004c4f1 	.word	0x2004c4f1
    7d34:	2004c4f2 	.word	0x2004c4f2
    7d38:	2004c4f3 	.word	0x2004c4f3
    7d3c:	2004c4f5 	.word	0x2004c4f5
    7d40:	2004c4f6 	.word	0x2004c4f6
    7d44:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7d48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d4c:	781b      	ldrb	r3, [r3, #0]
    7d4e:	461a      	mov	r2, r3
    7d50:	f24c 43f4 	movw	r3, #50420	; 0xc4f4
    7d54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d58:	78d9      	ldrb	r1, [r3, #3]
    7d5a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    7d5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d62:	5499      	strb	r1, [r3, r2]
    7d64:	4bd3      	ldr	r3, [pc, #844]	; (80b4 <send_boot+0xc50>)
    7d66:	781a      	ldrb	r2, [r3, #0]
    7d68:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7d6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d70:	781b      	ldrb	r3, [r3, #0]
    7d72:	4413      	add	r3, r2
    7d74:	b2da      	uxtb	r2, r3
    7d76:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7d7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d7e:	701a      	strb	r2, [r3, #0]
    7d80:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7d84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d88:	781a      	ldrb	r2, [r3, #0]
    7d8a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7d8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d92:	781b      	ldrb	r3, [r3, #0]
    7d94:	4413      	add	r3, r2
    7d96:	b2da      	uxtb	r2, r3
    7d98:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7d9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7da0:	701a      	strb	r2, [r3, #0]
    7da2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7da6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7daa:	781b      	ldrb	r3, [r3, #0]
    7dac:	3301      	adds	r3, #1
    7dae:	b2da      	uxtb	r2, r3
    7db0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7db4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7db8:	701a      	strb	r2, [r3, #0]
    7dba:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7dbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dc2:	781b      	ldrb	r3, [r3, #0]
    7dc4:	2bff      	cmp	r3, #255	; 0xff
    7dc6:	d105      	bne.n	7dd4 <send_boot+0x970>
    7dc8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7dcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dd0:	2200      	movs	r2, #0
    7dd2:	701a      	strb	r2, [r3, #0]
    7dd4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7dd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ddc:	781b      	ldrb	r3, [r3, #0]
    7dde:	461a      	mov	r2, r3
    7de0:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
    7de4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7de8:	7819      	ldrb	r1, [r3, #0]
    7dea:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    7dee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7df2:	5499      	strb	r1, [r3, r2]
    7df4:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
    7df8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dfc:	781a      	ldrb	r2, [r3, #0]
    7dfe:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7e02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e06:	781b      	ldrb	r3, [r3, #0]
    7e08:	4413      	add	r3, r2
    7e0a:	b2da      	uxtb	r2, r3
    7e0c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7e10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e14:	701a      	strb	r2, [r3, #0]
    7e16:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7e1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e1e:	781a      	ldrb	r2, [r3, #0]
    7e20:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7e24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e28:	781b      	ldrb	r3, [r3, #0]
    7e2a:	4413      	add	r3, r2
    7e2c:	b2da      	uxtb	r2, r3
    7e2e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7e32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e36:	701a      	strb	r2, [r3, #0]
    7e38:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7e3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e40:	781b      	ldrb	r3, [r3, #0]
    7e42:	3301      	adds	r3, #1
    7e44:	b2da      	uxtb	r2, r3
    7e46:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7e4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e4e:	701a      	strb	r2, [r3, #0]
    7e50:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7e54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e58:	781b      	ldrb	r3, [r3, #0]
    7e5a:	2bff      	cmp	r3, #255	; 0xff
    7e5c:	d105      	bne.n	7e6a <send_boot+0xa06>
    7e5e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7e62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e66:	2200      	movs	r2, #0
    7e68:	701a      	strb	r2, [r3, #0]
    7e6a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7e6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e72:	781b      	ldrb	r3, [r3, #0]
    7e74:	461a      	mov	r2, r3
    7e76:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
    7e7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e7e:	7859      	ldrb	r1, [r3, #1]
    7e80:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    7e84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e88:	5499      	strb	r1, [r3, r2]
    7e8a:	4b8b      	ldr	r3, [pc, #556]	; (80b8 <send_boot+0xc54>)
    7e8c:	781a      	ldrb	r2, [r3, #0]
    7e8e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7e92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e96:	781b      	ldrb	r3, [r3, #0]
    7e98:	4413      	add	r3, r2
    7e9a:	b2da      	uxtb	r2, r3
    7e9c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7ea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ea4:	701a      	strb	r2, [r3, #0]
    7ea6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7eaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eae:	781a      	ldrb	r2, [r3, #0]
    7eb0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7eb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eb8:	781b      	ldrb	r3, [r3, #0]
    7eba:	4413      	add	r3, r2
    7ebc:	b2da      	uxtb	r2, r3
    7ebe:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7ec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ec6:	701a      	strb	r2, [r3, #0]
    7ec8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7ecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ed0:	781b      	ldrb	r3, [r3, #0]
    7ed2:	3301      	adds	r3, #1
    7ed4:	b2da      	uxtb	r2, r3
    7ed6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7eda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ede:	701a      	strb	r2, [r3, #0]
    7ee0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7ee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ee8:	781b      	ldrb	r3, [r3, #0]
    7eea:	2bff      	cmp	r3, #255	; 0xff
    7eec:	d105      	bne.n	7efa <send_boot+0xa96>
    7eee:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7ef2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ef6:	2200      	movs	r2, #0
    7ef8:	701a      	strb	r2, [r3, #0]
    7efa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7efe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f02:	781b      	ldrb	r3, [r3, #0]
    7f04:	461a      	mov	r2, r3
    7f06:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
    7f0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f0e:	7899      	ldrb	r1, [r3, #2]
    7f10:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    7f14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f18:	5499      	strb	r1, [r3, r2]
    7f1a:	4b68      	ldr	r3, [pc, #416]	; (80bc <send_boot+0xc58>)
    7f1c:	781a      	ldrb	r2, [r3, #0]
    7f1e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7f22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f26:	781b      	ldrb	r3, [r3, #0]
    7f28:	4413      	add	r3, r2
    7f2a:	b2da      	uxtb	r2, r3
    7f2c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7f30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f34:	701a      	strb	r2, [r3, #0]
    7f36:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7f3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f3e:	781a      	ldrb	r2, [r3, #0]
    7f40:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7f44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f48:	781b      	ldrb	r3, [r3, #0]
    7f4a:	4413      	add	r3, r2
    7f4c:	b2da      	uxtb	r2, r3
    7f4e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7f52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f56:	701a      	strb	r2, [r3, #0]
    7f58:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7f5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f60:	781b      	ldrb	r3, [r3, #0]
    7f62:	3301      	adds	r3, #1
    7f64:	b2da      	uxtb	r2, r3
    7f66:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7f6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f6e:	701a      	strb	r2, [r3, #0]
    7f70:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7f74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f78:	781b      	ldrb	r3, [r3, #0]
    7f7a:	2bff      	cmp	r3, #255	; 0xff
    7f7c:	d105      	bne.n	7f8a <send_boot+0xb26>
    7f7e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7f82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f86:	2200      	movs	r2, #0
    7f88:	701a      	strb	r2, [r3, #0]
    7f8a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7f8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f92:	781b      	ldrb	r3, [r3, #0]
    7f94:	461a      	mov	r2, r3
    7f96:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
    7f9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f9e:	78d9      	ldrb	r1, [r3, #3]
    7fa0:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    7fa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fa8:	5499      	strb	r1, [r3, r2]
    7faa:	4b45      	ldr	r3, [pc, #276]	; (80c0 <send_boot+0xc5c>)
    7fac:	781a      	ldrb	r2, [r3, #0]
    7fae:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7fb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fb6:	781b      	ldrb	r3, [r3, #0]
    7fb8:	4413      	add	r3, r2
    7fba:	b2da      	uxtb	r2, r3
    7fbc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7fc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fc4:	701a      	strb	r2, [r3, #0]
    7fc6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7fca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fce:	781a      	ldrb	r2, [r3, #0]
    7fd0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    7fd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fd8:	781b      	ldrb	r3, [r3, #0]
    7fda:	4413      	add	r3, r2
    7fdc:	b2da      	uxtb	r2, r3
    7fde:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    7fe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fe6:	701a      	strb	r2, [r3, #0]
    7fe8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7fec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ff0:	781b      	ldrb	r3, [r3, #0]
    7ff2:	3301      	adds	r3, #1
    7ff4:	b2da      	uxtb	r2, r3
    7ff6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    7ffa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ffe:	701a      	strb	r2, [r3, #0]
    8000:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8004:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8008:	781b      	ldrb	r3, [r3, #0]
    800a:	2bff      	cmp	r3, #255	; 0xff
    800c:	d105      	bne.n	801a <send_boot+0xbb6>
    800e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8012:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8016:	2200      	movs	r2, #0
    8018:	701a      	strb	r2, [r3, #0]
    801a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    801e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8022:	781b      	ldrb	r3, [r3, #0]
    8024:	461a      	mov	r2, r3
    8026:	f240 33f2 	movw	r3, #1010	; 0x3f2
    802a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    802e:	7819      	ldrb	r1, [r3, #0]
    8030:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    8034:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8038:	5499      	strb	r1, [r3, r2]
    803a:	f240 33f2 	movw	r3, #1010	; 0x3f2
    803e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8042:	781a      	ldrb	r2, [r3, #0]
    8044:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8048:	f2c2 0304 	movt	r3, #8196	; 0x2004
    804c:	781b      	ldrb	r3, [r3, #0]
    804e:	4413      	add	r3, r2
    8050:	b2da      	uxtb	r2, r3
    8052:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8056:	f2c2 0304 	movt	r3, #8196	; 0x2004
    805a:	701a      	strb	r2, [r3, #0]
    805c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8060:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8064:	781a      	ldrb	r2, [r3, #0]
    8066:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    806a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    806e:	781b      	ldrb	r3, [r3, #0]
    8070:	4413      	add	r3, r2
    8072:	b2da      	uxtb	r2, r3
    8074:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8078:	f2c2 0304 	movt	r3, #8196	; 0x2004
    807c:	701a      	strb	r2, [r3, #0]
    807e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8082:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8086:	781b      	ldrb	r3, [r3, #0]
    8088:	3301      	adds	r3, #1
    808a:	b2da      	uxtb	r2, r3
    808c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8090:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8094:	701a      	strb	r2, [r3, #0]
    8096:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    809a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    809e:	781b      	ldrb	r3, [r3, #0]
    80a0:	2bff      	cmp	r3, #255	; 0xff
    80a2:	d10f      	bne.n	80c4 <send_boot+0xc60>
    80a4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    80a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80ac:	2200      	movs	r2, #0
    80ae:	701a      	strb	r2, [r3, #0]
    80b0:	e008      	b.n	80c4 <send_boot+0xc60>
    80b2:	bf00      	nop
    80b4:	2004c4f7 	.word	0x2004c4f7
    80b8:	2004c4ed 	.word	0x2004c4ed
    80bc:	2004c4ee 	.word	0x2004c4ee
    80c0:	2004c4ef 	.word	0x2004c4ef
    80c4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    80c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80cc:	781b      	ldrb	r3, [r3, #0]
    80ce:	461a      	mov	r2, r3
    80d0:	f240 33f2 	movw	r3, #1010	; 0x3f2
    80d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80d8:	7859      	ldrb	r1, [r3, #1]
    80da:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    80de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80e2:	5499      	strb	r1, [r3, r2]
    80e4:	4bc5      	ldr	r3, [pc, #788]	; (83fc <send_boot+0xf98>)
    80e6:	781a      	ldrb	r2, [r3, #0]
    80e8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    80ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80f0:	781b      	ldrb	r3, [r3, #0]
    80f2:	4413      	add	r3, r2
    80f4:	b2da      	uxtb	r2, r3
    80f6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    80fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80fe:	701a      	strb	r2, [r3, #0]
    8100:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8104:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8108:	781a      	ldrb	r2, [r3, #0]
    810a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    810e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8112:	781b      	ldrb	r3, [r3, #0]
    8114:	4413      	add	r3, r2
    8116:	b2da      	uxtb	r2, r3
    8118:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    811c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8120:	701a      	strb	r2, [r3, #0]
    8122:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8126:	f2c2 0304 	movt	r3, #8196	; 0x2004
    812a:	781b      	ldrb	r3, [r3, #0]
    812c:	3301      	adds	r3, #1
    812e:	b2da      	uxtb	r2, r3
    8130:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8134:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8138:	701a      	strb	r2, [r3, #0]
    813a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    813e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8142:	781b      	ldrb	r3, [r3, #0]
    8144:	2bff      	cmp	r3, #255	; 0xff
    8146:	d105      	bne.n	8154 <send_boot+0xcf0>
    8148:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    814c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8150:	2200      	movs	r2, #0
    8152:	701a      	strb	r2, [r3, #0]
    8154:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8158:	f2c2 0304 	movt	r3, #8196	; 0x2004
    815c:	781b      	ldrb	r3, [r3, #0]
    815e:	461a      	mov	r2, r3
    8160:	f240 33f4 	movw	r3, #1012	; 0x3f4
    8164:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8168:	7819      	ldrb	r1, [r3, #0]
    816a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    816e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8172:	5499      	strb	r1, [r3, r2]
    8174:	f240 33f4 	movw	r3, #1012	; 0x3f4
    8178:	f2c2 0300 	movt	r3, #8192	; 0x2000
    817c:	781a      	ldrb	r2, [r3, #0]
    817e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8182:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8186:	781b      	ldrb	r3, [r3, #0]
    8188:	4413      	add	r3, r2
    818a:	b2da      	uxtb	r2, r3
    818c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8190:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8194:	701a      	strb	r2, [r3, #0]
    8196:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    819a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    819e:	781a      	ldrb	r2, [r3, #0]
    81a0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    81a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81a8:	781b      	ldrb	r3, [r3, #0]
    81aa:	4413      	add	r3, r2
    81ac:	b2da      	uxtb	r2, r3
    81ae:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    81b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81b6:	701a      	strb	r2, [r3, #0]
    81b8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    81bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81c0:	781b      	ldrb	r3, [r3, #0]
    81c2:	3301      	adds	r3, #1
    81c4:	b2da      	uxtb	r2, r3
    81c6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    81ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81ce:	701a      	strb	r2, [r3, #0]
    81d0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    81d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81d8:	781b      	ldrb	r3, [r3, #0]
    81da:	2bff      	cmp	r3, #255	; 0xff
    81dc:	d105      	bne.n	81ea <send_boot+0xd86>
    81de:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    81e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81e6:	2200      	movs	r2, #0
    81e8:	701a      	strb	r2, [r3, #0]
    81ea:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    81ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81f2:	781b      	ldrb	r3, [r3, #0]
    81f4:	461a      	mov	r2, r3
    81f6:	f240 33f4 	movw	r3, #1012	; 0x3f4
    81fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81fe:	7859      	ldrb	r1, [r3, #1]
    8200:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    8204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8208:	5499      	strb	r1, [r3, r2]
    820a:	4b7d      	ldr	r3, [pc, #500]	; (8400 <send_boot+0xf9c>)
    820c:	781a      	ldrb	r2, [r3, #0]
    820e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8212:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8216:	781b      	ldrb	r3, [r3, #0]
    8218:	4413      	add	r3, r2
    821a:	b2da      	uxtb	r2, r3
    821c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8220:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8224:	701a      	strb	r2, [r3, #0]
    8226:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    822a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    822e:	781a      	ldrb	r2, [r3, #0]
    8230:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8234:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8238:	781b      	ldrb	r3, [r3, #0]
    823a:	4413      	add	r3, r2
    823c:	b2da      	uxtb	r2, r3
    823e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8246:	701a      	strb	r2, [r3, #0]
    8248:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    824c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8250:	781b      	ldrb	r3, [r3, #0]
    8252:	3301      	adds	r3, #1
    8254:	b2da      	uxtb	r2, r3
    8256:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    825a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    825e:	701a      	strb	r2, [r3, #0]
    8260:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8268:	781b      	ldrb	r3, [r3, #0]
    826a:	2bff      	cmp	r3, #255	; 0xff
    826c:	d105      	bne.n	827a <send_boot+0xe16>
    826e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8272:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8276:	2200      	movs	r2, #0
    8278:	701a      	strb	r2, [r3, #0]
    827a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    827e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8282:	781b      	ldrb	r3, [r3, #0]
    8284:	461a      	mov	r2, r3
    8286:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    828a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    828e:	7819      	ldrb	r1, [r3, #0]
    8290:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    8294:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8298:	5499      	strb	r1, [r3, r2]
    829a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    829e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82a2:	781b      	ldrb	r3, [r3, #0]
    82a4:	3301      	adds	r3, #1
    82a6:	b2da      	uxtb	r2, r3
    82a8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    82ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82b0:	701a      	strb	r2, [r3, #0]
    82b2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    82b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82ba:	781b      	ldrb	r3, [r3, #0]
    82bc:	2bff      	cmp	r3, #255	; 0xff
    82be:	d105      	bne.n	82cc <send_boot+0xe68>
    82c0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    82c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82c8:	2200      	movs	r2, #0
    82ca:	701a      	strb	r2, [r3, #0]
    82cc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    82d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82d4:	781b      	ldrb	r3, [r3, #0]
    82d6:	461a      	mov	r2, r3
    82d8:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    82dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82e0:	7819      	ldrb	r1, [r3, #0]
    82e2:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    82e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82ea:	5499      	strb	r1, [r3, r2]
    82ec:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    82f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82f4:	781b      	ldrb	r3, [r3, #0]
    82f6:	3301      	adds	r3, #1
    82f8:	b2da      	uxtb	r2, r3
    82fa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    82fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8302:	701a      	strb	r2, [r3, #0]
    8304:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8308:	f2c2 0304 	movt	r3, #8196	; 0x2004
    830c:	781b      	ldrb	r3, [r3, #0]
    830e:	2bff      	cmp	r3, #255	; 0xff
    8310:	d105      	bne.n	831e <send_boot+0xeba>
    8312:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8316:	f2c2 0304 	movt	r3, #8196	; 0x2004
    831a:	2200      	movs	r2, #0
    831c:	701a      	strb	r2, [r3, #0]
    831e:	f242 0339 	movw	r3, #8249	; 0x2039
    8322:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8326:	781b      	ldrb	r3, [r3, #0]
    8328:	b2db      	uxtb	r3, r3
    832a:	f003 0310 	and.w	r3, r3, #16
    832e:	2b00      	cmp	r3, #0
    8330:	d15a      	bne.n	83e8 <send_boot+0xf84>
    8332:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    8336:	f2c2 0304 	movt	r3, #8196	; 0x2004
    833a:	781b      	ldrb	r3, [r3, #0]
    833c:	b2db      	uxtb	r3, r3
    833e:	461a      	mov	r2, r3
    8340:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    8344:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8348:	5c9a      	ldrb	r2, [r3, r2]
    834a:	f64b 73fb 	movw	r3, #49147	; 0xbffb
    834e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8352:	701a      	strb	r2, [r3, #0]
    8354:	f64b 73fc 	movw	r3, #49148	; 0xbffc
    8358:	f2c2 0304 	movt	r3, #8196	; 0x2004
    835c:	2200      	movs	r2, #0
    835e:	701a      	strb	r2, [r3, #0]
    8360:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    8364:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8368:	781b      	ldrb	r3, [r3, #0]
    836a:	b2db      	uxtb	r3, r3
    836c:	3301      	adds	r3, #1
    836e:	b2da      	uxtb	r2, r3
    8370:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    8374:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8378:	701a      	strb	r2, [r3, #0]
    837a:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    837e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8382:	781b      	ldrb	r3, [r3, #0]
    8384:	b2db      	uxtb	r3, r3
    8386:	2bff      	cmp	r3, #255	; 0xff
    8388:	d105      	bne.n	8396 <send_boot+0xf32>
    838a:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    838e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8392:	2200      	movs	r2, #0
    8394:	701a      	strb	r2, [r3, #0]
    8396:	f242 0338 	movw	r3, #8248	; 0x2038
    839a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    839e:	f242 0238 	movw	r2, #8248	; 0x2038
    83a2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    83a6:	7812      	ldrb	r2, [r2, #0]
    83a8:	b2d2      	uxtb	r2, r2
    83aa:	f042 0201 	orr.w	r2, r2, #1
    83ae:	b2d2      	uxtb	r2, r2
    83b0:	701a      	strb	r2, [r3, #0]
    83b2:	f242 0339 	movw	r3, #8249	; 0x2039
    83b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83ba:	f242 0239 	movw	r2, #8249	; 0x2039
    83be:	f2c2 0200 	movt	r2, #8192	; 0x2000
    83c2:	7812      	ldrb	r2, [r2, #0]
    83c4:	b2d2      	uxtb	r2, r2
    83c6:	f042 0210 	orr.w	r2, r2, #16
    83ca:	b2d2      	uxtb	r2, r2
    83cc:	701a      	strb	r2, [r3, #0]
    83ce:	e00b      	b.n	83e8 <send_boot+0xf84>
    83d0:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    83d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83d8:	781b      	ldrb	r3, [r3, #0]
    83da:	3301      	adds	r3, #1
    83dc:	b2da      	uxtb	r2, r3
    83de:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    83e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83e6:	701a      	strb	r2, [r3, #0]
      boot = FALSE;
    83e8:	f240 33ed 	movw	r3, #1005	; 0x3ed
    83ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83f0:	2200      	movs	r2, #0
    83f2:	701a      	strb	r2, [r3, #0]
  }
}
    83f4:	46bd      	mov	sp, r7
    83f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    83fa:	4770      	bx	lr
    83fc:	200003f3 	.word	0x200003f3
    8400:	200003f5 	.word	0x200003f5

00008404 <send_attitude>:
void send_attitude(void){ //499ms
    8404:	b480      	push	{r7}
    8406:	af00      	add	r7, sp, #0
    // add by wanbo
  //if(!boot)
  {
    count++;
    8408:	f64b 63f1 	movw	r3, #48881	; 0xbef1
    840c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8410:	781b      	ldrb	r3, [r3, #0]
    8412:	3301      	adds	r3, #1
    8414:	b2da      	uxtb	r2, r3
    8416:	f64b 63f1 	movw	r3, #48881	; 0xbef1
    841a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    841e:	701a      	strb	r2, [r3, #0]
    if (count == 250) count = 0;
    8420:	f64b 63f1 	movw	r3, #48881	; 0xbef1
    8424:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8428:	781b      	ldrb	r3, [r3, #0]
    842a:	2bfa      	cmp	r3, #250	; 0xfa
    842c:	d105      	bne.n	843a <send_attitude+0x36>
    842e:	f64b 63f1 	movw	r3, #48881	; 0xbef1
    8432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8436:	2200      	movs	r2, #0
    8438:	701a      	strb	r2, [r3, #0]
    if (count % 5 == 0) 
    843a:	f64b 63f1 	movw	r3, #48881	; 0xbef1
    843e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8442:	781a      	ldrb	r2, [r3, #0]
    8444:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8448:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    844c:	fba3 1302 	umull	r1, r3, r3, r2
    8450:	0899      	lsrs	r1, r3, #2
    8452:	460b      	mov	r3, r1
    8454:	009b      	lsls	r3, r3, #2
    8456:	440b      	add	r3, r1
    8458:	1ad3      	subs	r3, r2, r3
    845a:	b2db      	uxtb	r3, r3
    845c:	2b00      	cmp	r3, #0
    845e:	f040 84c1 	bne.w	8de4 <send_attitude+0x9e0>
       PERIODIC_SEND_ATTITUDE(); 
    8462:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8466:	f2c2 0304 	movt	r3, #8196	; 0x2004
    846a:	781a      	ldrb	r2, [r3, #0]
    846c:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    8470:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8474:	781b      	ldrb	r3, [r3, #0]
    8476:	b2db      	uxtb	r3, r3
    8478:	429a      	cmp	r2, r3
    847a:	d313      	bcc.n	84a4 <send_attitude+0xa0>
    847c:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    8480:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8484:	781b      	ldrb	r3, [r3, #0]
    8486:	b2db      	uxtb	r3, r3
    8488:	461a      	mov	r2, r3
    848a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    848e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8492:	781b      	ldrb	r3, [r3, #0]
    8494:	1ad3      	subs	r3, r2, r3
    8496:	33ff      	adds	r3, #255	; 0xff
    8498:	2b10      	cmp	r3, #16
    849a:	bfd4      	ite	le
    849c:	2300      	movle	r3, #0
    849e:	2301      	movgt	r3, #1
    84a0:	b2db      	uxtb	r3, r3
    84a2:	e011      	b.n	84c8 <send_attitude+0xc4>
    84a4:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    84a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84ac:	781b      	ldrb	r3, [r3, #0]
    84ae:	b2db      	uxtb	r3, r3
    84b0:	461a      	mov	r2, r3
    84b2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    84b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84ba:	781b      	ldrb	r3, [r3, #0]
    84bc:	1ad3      	subs	r3, r2, r3
    84be:	2b10      	cmp	r3, #16
    84c0:	bfd4      	ite	le
    84c2:	2300      	movle	r3, #0
    84c4:	2301      	movgt	r3, #1
    84c6:	b2db      	uxtb	r3, r3
    84c8:	2b00      	cmp	r3, #0
    84ca:	f000 847f 	beq.w	8dcc <send_attitude+0x9c8>
    84ce:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    84d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84d6:	781b      	ldrb	r3, [r3, #0]
    84d8:	461a      	mov	r2, r3
    84da:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    84de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84e2:	2105      	movs	r1, #5
    84e4:	5499      	strb	r1, [r3, r2]
    84e6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    84ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84ee:	781b      	ldrb	r3, [r3, #0]
    84f0:	3301      	adds	r3, #1
    84f2:	b2da      	uxtb	r2, r3
    84f4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    84f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84fc:	701a      	strb	r2, [r3, #0]
    84fe:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8502:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8506:	781b      	ldrb	r3, [r3, #0]
    8508:	2bff      	cmp	r3, #255	; 0xff
    850a:	d105      	bne.n	8518 <send_attitude+0x114>
    850c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8510:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8514:	2200      	movs	r2, #0
    8516:	701a      	strb	r2, [r3, #0]
    8518:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    851c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8520:	781b      	ldrb	r3, [r3, #0]
    8522:	461a      	mov	r2, r3
    8524:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    8528:	f2c2 0304 	movt	r3, #8196	; 0x2004
    852c:	2106      	movs	r1, #6
    852e:	5499      	strb	r1, [r3, r2]
    8530:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8538:	781b      	ldrb	r3, [r3, #0]
    853a:	3301      	adds	r3, #1
    853c:	b2da      	uxtb	r2, r3
    853e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8542:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8546:	701a      	strb	r2, [r3, #0]
    8548:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    854c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8550:	781b      	ldrb	r3, [r3, #0]
    8552:	2bff      	cmp	r3, #255	; 0xff
    8554:	d105      	bne.n	8562 <send_attitude+0x15e>
    8556:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    855a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    855e:	2200      	movs	r2, #0
    8560:	701a      	strb	r2, [r3, #0]
    8562:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8566:	f2c2 0304 	movt	r3, #8196	; 0x2004
    856a:	2206      	movs	r2, #6
    856c:	701a      	strb	r2, [r3, #0]
    856e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8572:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8576:	2206      	movs	r2, #6
    8578:	701a      	strb	r2, [r3, #0]
    857a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    857e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8582:	781b      	ldrb	r3, [r3, #0]
    8584:	461a      	mov	r2, r3
    8586:	f24c 43b8 	movw	r3, #50360	; 0xc4b8
    858a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    858e:	7819      	ldrb	r1, [r3, #0]
    8590:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    8594:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8598:	5499      	strb	r1, [r3, r2]
    859a:	f24c 43b8 	movw	r3, #50360	; 0xc4b8
    859e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85a2:	781a      	ldrb	r2, [r3, #0]
    85a4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    85a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85ac:	781b      	ldrb	r3, [r3, #0]
    85ae:	4413      	add	r3, r2
    85b0:	b2da      	uxtb	r2, r3
    85b2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    85b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85ba:	701a      	strb	r2, [r3, #0]
    85bc:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    85c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85c4:	781a      	ldrb	r2, [r3, #0]
    85c6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    85ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85ce:	781b      	ldrb	r3, [r3, #0]
    85d0:	4413      	add	r3, r2
    85d2:	b2da      	uxtb	r2, r3
    85d4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    85d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85dc:	701a      	strb	r2, [r3, #0]
    85de:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    85e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85e6:	781b      	ldrb	r3, [r3, #0]
    85e8:	3301      	adds	r3, #1
    85ea:	b2da      	uxtb	r2, r3
    85ec:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    85f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85f4:	701a      	strb	r2, [r3, #0]
    85f6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    85fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85fe:	781b      	ldrb	r3, [r3, #0]
    8600:	2bff      	cmp	r3, #255	; 0xff
    8602:	d105      	bne.n	8610 <send_attitude+0x20c>
    8604:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8608:	f2c2 0304 	movt	r3, #8196	; 0x2004
    860c:	2200      	movs	r2, #0
    860e:	701a      	strb	r2, [r3, #0]
    8610:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8618:	781b      	ldrb	r3, [r3, #0]
    861a:	461a      	mov	r2, r3
    861c:	f24c 43b8 	movw	r3, #50360	; 0xc4b8
    8620:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8624:	7859      	ldrb	r1, [r3, #1]
    8626:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    862a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    862e:	5499      	strb	r1, [r3, r2]
    8630:	4bd1      	ldr	r3, [pc, #836]	; (8978 <send_attitude+0x574>)
    8632:	781a      	ldrb	r2, [r3, #0]
    8634:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8638:	f2c2 0304 	movt	r3, #8196	; 0x2004
    863c:	781b      	ldrb	r3, [r3, #0]
    863e:	4413      	add	r3, r2
    8640:	b2da      	uxtb	r2, r3
    8642:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    864a:	701a      	strb	r2, [r3, #0]
    864c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8650:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8654:	781a      	ldrb	r2, [r3, #0]
    8656:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    865a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    865e:	781b      	ldrb	r3, [r3, #0]
    8660:	4413      	add	r3, r2
    8662:	b2da      	uxtb	r2, r3
    8664:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8668:	f2c2 0304 	movt	r3, #8196	; 0x2004
    866c:	701a      	strb	r2, [r3, #0]
    866e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8672:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8676:	781b      	ldrb	r3, [r3, #0]
    8678:	3301      	adds	r3, #1
    867a:	b2da      	uxtb	r2, r3
    867c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8680:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8684:	701a      	strb	r2, [r3, #0]
    8686:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    868a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    868e:	781b      	ldrb	r3, [r3, #0]
    8690:	2bff      	cmp	r3, #255	; 0xff
    8692:	d105      	bne.n	86a0 <send_attitude+0x29c>
    8694:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8698:	f2c2 0304 	movt	r3, #8196	; 0x2004
    869c:	2200      	movs	r2, #0
    869e:	701a      	strb	r2, [r3, #0]
    86a0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    86a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86a8:	781b      	ldrb	r3, [r3, #0]
    86aa:	461a      	mov	r2, r3
    86ac:	f24c 43b8 	movw	r3, #50360	; 0xc4b8
    86b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86b4:	7899      	ldrb	r1, [r3, #2]
    86b6:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    86ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86be:	5499      	strb	r1, [r3, r2]
    86c0:	4bae      	ldr	r3, [pc, #696]	; (897c <send_attitude+0x578>)
    86c2:	781a      	ldrb	r2, [r3, #0]
    86c4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    86c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86cc:	781b      	ldrb	r3, [r3, #0]
    86ce:	4413      	add	r3, r2
    86d0:	b2da      	uxtb	r2, r3
    86d2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    86d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86da:	701a      	strb	r2, [r3, #0]
    86dc:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    86e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86e4:	781a      	ldrb	r2, [r3, #0]
    86e6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    86ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86ee:	781b      	ldrb	r3, [r3, #0]
    86f0:	4413      	add	r3, r2
    86f2:	b2da      	uxtb	r2, r3
    86f4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    86f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86fc:	701a      	strb	r2, [r3, #0]
    86fe:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8702:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8706:	781b      	ldrb	r3, [r3, #0]
    8708:	3301      	adds	r3, #1
    870a:	b2da      	uxtb	r2, r3
    870c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8714:	701a      	strb	r2, [r3, #0]
    8716:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    871a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    871e:	781b      	ldrb	r3, [r3, #0]
    8720:	2bff      	cmp	r3, #255	; 0xff
    8722:	d105      	bne.n	8730 <send_attitude+0x32c>
    8724:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8728:	f2c2 0304 	movt	r3, #8196	; 0x2004
    872c:	2200      	movs	r2, #0
    872e:	701a      	strb	r2, [r3, #0]
    8730:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8734:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8738:	781b      	ldrb	r3, [r3, #0]
    873a:	461a      	mov	r2, r3
    873c:	f24c 43b8 	movw	r3, #50360	; 0xc4b8
    8740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8744:	78d9      	ldrb	r1, [r3, #3]
    8746:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    874a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    874e:	5499      	strb	r1, [r3, r2]
    8750:	4b8b      	ldr	r3, [pc, #556]	; (8980 <send_attitude+0x57c>)
    8752:	781a      	ldrb	r2, [r3, #0]
    8754:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    875c:	781b      	ldrb	r3, [r3, #0]
    875e:	4413      	add	r3, r2
    8760:	b2da      	uxtb	r2, r3
    8762:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8766:	f2c2 0304 	movt	r3, #8196	; 0x2004
    876a:	701a      	strb	r2, [r3, #0]
    876c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8770:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8774:	781a      	ldrb	r2, [r3, #0]
    8776:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    877a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    877e:	781b      	ldrb	r3, [r3, #0]
    8780:	4413      	add	r3, r2
    8782:	b2da      	uxtb	r2, r3
    8784:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8788:	f2c2 0304 	movt	r3, #8196	; 0x2004
    878c:	701a      	strb	r2, [r3, #0]
    878e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8792:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8796:	781b      	ldrb	r3, [r3, #0]
    8798:	3301      	adds	r3, #1
    879a:	b2da      	uxtb	r2, r3
    879c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    87a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87a4:	701a      	strb	r2, [r3, #0]
    87a6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    87aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87ae:	781b      	ldrb	r3, [r3, #0]
    87b0:	2bff      	cmp	r3, #255	; 0xff
    87b2:	d105      	bne.n	87c0 <send_attitude+0x3bc>
    87b4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    87b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87bc:	2200      	movs	r2, #0
    87be:	701a      	strb	r2, [r3, #0]
    87c0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    87c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87c8:	781b      	ldrb	r3, [r3, #0]
    87ca:	461a      	mov	r2, r3
    87cc:	f24c 43bc 	movw	r3, #50364	; 0xc4bc
    87d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87d4:	7819      	ldrb	r1, [r3, #0]
    87d6:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    87da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87de:	5499      	strb	r1, [r3, r2]
    87e0:	f24c 43bc 	movw	r3, #50364	; 0xc4bc
    87e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87e8:	781a      	ldrb	r2, [r3, #0]
    87ea:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    87ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87f2:	781b      	ldrb	r3, [r3, #0]
    87f4:	4413      	add	r3, r2
    87f6:	b2da      	uxtb	r2, r3
    87f8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    87fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8800:	701a      	strb	r2, [r3, #0]
    8802:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8806:	f2c2 0304 	movt	r3, #8196	; 0x2004
    880a:	781a      	ldrb	r2, [r3, #0]
    880c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8810:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8814:	781b      	ldrb	r3, [r3, #0]
    8816:	4413      	add	r3, r2
    8818:	b2da      	uxtb	r2, r3
    881a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    881e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8822:	701a      	strb	r2, [r3, #0]
    8824:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8828:	f2c2 0304 	movt	r3, #8196	; 0x2004
    882c:	781b      	ldrb	r3, [r3, #0]
    882e:	3301      	adds	r3, #1
    8830:	b2da      	uxtb	r2, r3
    8832:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8836:	f2c2 0304 	movt	r3, #8196	; 0x2004
    883a:	701a      	strb	r2, [r3, #0]
    883c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8840:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8844:	781b      	ldrb	r3, [r3, #0]
    8846:	2bff      	cmp	r3, #255	; 0xff
    8848:	d105      	bne.n	8856 <send_attitude+0x452>
    884a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    884e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8852:	2200      	movs	r2, #0
    8854:	701a      	strb	r2, [r3, #0]
    8856:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    885a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    885e:	781b      	ldrb	r3, [r3, #0]
    8860:	461a      	mov	r2, r3
    8862:	f24c 43bc 	movw	r3, #50364	; 0xc4bc
    8866:	f2c2 0304 	movt	r3, #8196	; 0x2004
    886a:	7859      	ldrb	r1, [r3, #1]
    886c:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    8870:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8874:	5499      	strb	r1, [r3, r2]
    8876:	4b43      	ldr	r3, [pc, #268]	; (8984 <send_attitude+0x580>)
    8878:	781a      	ldrb	r2, [r3, #0]
    887a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    887e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8882:	781b      	ldrb	r3, [r3, #0]
    8884:	4413      	add	r3, r2
    8886:	b2da      	uxtb	r2, r3
    8888:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    888c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8890:	701a      	strb	r2, [r3, #0]
    8892:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8896:	f2c2 0304 	movt	r3, #8196	; 0x2004
    889a:	781a      	ldrb	r2, [r3, #0]
    889c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    88a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88a4:	781b      	ldrb	r3, [r3, #0]
    88a6:	4413      	add	r3, r2
    88a8:	b2da      	uxtb	r2, r3
    88aa:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    88ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88b2:	701a      	strb	r2, [r3, #0]
    88b4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    88b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88bc:	781b      	ldrb	r3, [r3, #0]
    88be:	3301      	adds	r3, #1
    88c0:	b2da      	uxtb	r2, r3
    88c2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    88c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88ca:	701a      	strb	r2, [r3, #0]
    88cc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    88d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88d4:	781b      	ldrb	r3, [r3, #0]
    88d6:	2bff      	cmp	r3, #255	; 0xff
    88d8:	d105      	bne.n	88e6 <send_attitude+0x4e2>
    88da:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    88de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88e2:	2200      	movs	r2, #0
    88e4:	701a      	strb	r2, [r3, #0]
    88e6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    88ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88ee:	781b      	ldrb	r3, [r3, #0]
    88f0:	461a      	mov	r2, r3
    88f2:	f24c 43bc 	movw	r3, #50364	; 0xc4bc
    88f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88fa:	7899      	ldrb	r1, [r3, #2]
    88fc:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    8900:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8904:	5499      	strb	r1, [r3, r2]
    8906:	4b20      	ldr	r3, [pc, #128]	; (8988 <send_attitude+0x584>)
    8908:	781a      	ldrb	r2, [r3, #0]
    890a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    890e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8912:	781b      	ldrb	r3, [r3, #0]
    8914:	4413      	add	r3, r2
    8916:	b2da      	uxtb	r2, r3
    8918:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    891c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8920:	701a      	strb	r2, [r3, #0]
    8922:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8926:	f2c2 0304 	movt	r3, #8196	; 0x2004
    892a:	781a      	ldrb	r2, [r3, #0]
    892c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8930:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8934:	781b      	ldrb	r3, [r3, #0]
    8936:	4413      	add	r3, r2
    8938:	b2da      	uxtb	r2, r3
    893a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    893e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8942:	701a      	strb	r2, [r3, #0]
    8944:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8948:	f2c2 0304 	movt	r3, #8196	; 0x2004
    894c:	781b      	ldrb	r3, [r3, #0]
    894e:	3301      	adds	r3, #1
    8950:	b2da      	uxtb	r2, r3
    8952:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8956:	f2c2 0304 	movt	r3, #8196	; 0x2004
    895a:	701a      	strb	r2, [r3, #0]
    895c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8960:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8964:	781b      	ldrb	r3, [r3, #0]
    8966:	2bff      	cmp	r3, #255	; 0xff
    8968:	d110      	bne.n	898c <send_attitude+0x588>
    896a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    896e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8972:	2200      	movs	r2, #0
    8974:	701a      	strb	r2, [r3, #0]
    8976:	e009      	b.n	898c <send_attitude+0x588>
    8978:	2004c4b9 	.word	0x2004c4b9
    897c:	2004c4ba 	.word	0x2004c4ba
    8980:	2004c4bb 	.word	0x2004c4bb
    8984:	2004c4bd 	.word	0x2004c4bd
    8988:	2004c4be 	.word	0x2004c4be
    898c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8990:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8994:	781b      	ldrb	r3, [r3, #0]
    8996:	461a      	mov	r2, r3
    8998:	f24c 43bc 	movw	r3, #50364	; 0xc4bc
    899c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89a0:	78d9      	ldrb	r1, [r3, #3]
    89a2:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    89a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89aa:	5499      	strb	r1, [r3, r2]
    89ac:	4bc2      	ldr	r3, [pc, #776]	; (8cb8 <send_attitude+0x8b4>)
    89ae:	781a      	ldrb	r2, [r3, #0]
    89b0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    89b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89b8:	781b      	ldrb	r3, [r3, #0]
    89ba:	4413      	add	r3, r2
    89bc:	b2da      	uxtb	r2, r3
    89be:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    89c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89c6:	701a      	strb	r2, [r3, #0]
    89c8:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    89cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89d0:	781a      	ldrb	r2, [r3, #0]
    89d2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    89d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89da:	781b      	ldrb	r3, [r3, #0]
    89dc:	4413      	add	r3, r2
    89de:	b2da      	uxtb	r2, r3
    89e0:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    89e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89e8:	701a      	strb	r2, [r3, #0]
    89ea:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    89ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89f2:	781b      	ldrb	r3, [r3, #0]
    89f4:	3301      	adds	r3, #1
    89f6:	b2da      	uxtb	r2, r3
    89f8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    89fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a00:	701a      	strb	r2, [r3, #0]
    8a02:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8a06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a0a:	781b      	ldrb	r3, [r3, #0]
    8a0c:	2bff      	cmp	r3, #255	; 0xff
    8a0e:	d105      	bne.n	8a1c <send_attitude+0x618>
    8a10:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8a14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a18:	2200      	movs	r2, #0
    8a1a:	701a      	strb	r2, [r3, #0]
    8a1c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8a20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a24:	781b      	ldrb	r3, [r3, #0]
    8a26:	461a      	mov	r2, r3
    8a28:	f24c 43c0 	movw	r3, #50368	; 0xc4c0
    8a2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a30:	7819      	ldrb	r1, [r3, #0]
    8a32:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    8a36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a3a:	5499      	strb	r1, [r3, r2]
    8a3c:	f24c 43c0 	movw	r3, #50368	; 0xc4c0
    8a40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a44:	781a      	ldrb	r2, [r3, #0]
    8a46:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8a4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a4e:	781b      	ldrb	r3, [r3, #0]
    8a50:	4413      	add	r3, r2
    8a52:	b2da      	uxtb	r2, r3
    8a54:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8a58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a5c:	701a      	strb	r2, [r3, #0]
    8a5e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8a62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a66:	781a      	ldrb	r2, [r3, #0]
    8a68:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8a6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a70:	781b      	ldrb	r3, [r3, #0]
    8a72:	4413      	add	r3, r2
    8a74:	b2da      	uxtb	r2, r3
    8a76:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8a7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a7e:	701a      	strb	r2, [r3, #0]
    8a80:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8a84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a88:	781b      	ldrb	r3, [r3, #0]
    8a8a:	3301      	adds	r3, #1
    8a8c:	b2da      	uxtb	r2, r3
    8a8e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8a92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a96:	701a      	strb	r2, [r3, #0]
    8a98:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8a9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aa0:	781b      	ldrb	r3, [r3, #0]
    8aa2:	2bff      	cmp	r3, #255	; 0xff
    8aa4:	d105      	bne.n	8ab2 <send_attitude+0x6ae>
    8aa6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8aaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aae:	2200      	movs	r2, #0
    8ab0:	701a      	strb	r2, [r3, #0]
    8ab2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8ab6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aba:	781b      	ldrb	r3, [r3, #0]
    8abc:	461a      	mov	r2, r3
    8abe:	f24c 43c0 	movw	r3, #50368	; 0xc4c0
    8ac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ac6:	7859      	ldrb	r1, [r3, #1]
    8ac8:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    8acc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ad0:	5499      	strb	r1, [r3, r2]
    8ad2:	4b7a      	ldr	r3, [pc, #488]	; (8cbc <send_attitude+0x8b8>)
    8ad4:	781a      	ldrb	r2, [r3, #0]
    8ad6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8ada:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ade:	781b      	ldrb	r3, [r3, #0]
    8ae0:	4413      	add	r3, r2
    8ae2:	b2da      	uxtb	r2, r3
    8ae4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8ae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aec:	701a      	strb	r2, [r3, #0]
    8aee:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8af2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8af6:	781a      	ldrb	r2, [r3, #0]
    8af8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8afc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b00:	781b      	ldrb	r3, [r3, #0]
    8b02:	4413      	add	r3, r2
    8b04:	b2da      	uxtb	r2, r3
    8b06:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8b0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b0e:	701a      	strb	r2, [r3, #0]
    8b10:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8b14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b18:	781b      	ldrb	r3, [r3, #0]
    8b1a:	3301      	adds	r3, #1
    8b1c:	b2da      	uxtb	r2, r3
    8b1e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8b22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b26:	701a      	strb	r2, [r3, #0]
    8b28:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8b2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b30:	781b      	ldrb	r3, [r3, #0]
    8b32:	2bff      	cmp	r3, #255	; 0xff
    8b34:	d105      	bne.n	8b42 <send_attitude+0x73e>
    8b36:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8b3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b3e:	2200      	movs	r2, #0
    8b40:	701a      	strb	r2, [r3, #0]
    8b42:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8b46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b4a:	781b      	ldrb	r3, [r3, #0]
    8b4c:	461a      	mov	r2, r3
    8b4e:	f24c 43c0 	movw	r3, #50368	; 0xc4c0
    8b52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b56:	7899      	ldrb	r1, [r3, #2]
    8b58:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    8b5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b60:	5499      	strb	r1, [r3, r2]
    8b62:	4b57      	ldr	r3, [pc, #348]	; (8cc0 <send_attitude+0x8bc>)
    8b64:	781a      	ldrb	r2, [r3, #0]
    8b66:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8b6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b6e:	781b      	ldrb	r3, [r3, #0]
    8b70:	4413      	add	r3, r2
    8b72:	b2da      	uxtb	r2, r3
    8b74:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8b78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b7c:	701a      	strb	r2, [r3, #0]
    8b7e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8b82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b86:	781a      	ldrb	r2, [r3, #0]
    8b88:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8b8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b90:	781b      	ldrb	r3, [r3, #0]
    8b92:	4413      	add	r3, r2
    8b94:	b2da      	uxtb	r2, r3
    8b96:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8b9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b9e:	701a      	strb	r2, [r3, #0]
    8ba0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8ba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ba8:	781b      	ldrb	r3, [r3, #0]
    8baa:	3301      	adds	r3, #1
    8bac:	b2da      	uxtb	r2, r3
    8bae:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8bb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bb6:	701a      	strb	r2, [r3, #0]
    8bb8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8bbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bc0:	781b      	ldrb	r3, [r3, #0]
    8bc2:	2bff      	cmp	r3, #255	; 0xff
    8bc4:	d105      	bne.n	8bd2 <send_attitude+0x7ce>
    8bc6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8bca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bce:	2200      	movs	r2, #0
    8bd0:	701a      	strb	r2, [r3, #0]
    8bd2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8bd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bda:	781b      	ldrb	r3, [r3, #0]
    8bdc:	461a      	mov	r2, r3
    8bde:	f24c 43c0 	movw	r3, #50368	; 0xc4c0
    8be2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8be6:	78d9      	ldrb	r1, [r3, #3]
    8be8:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    8bec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bf0:	5499      	strb	r1, [r3, r2]
    8bf2:	4b34      	ldr	r3, [pc, #208]	; (8cc4 <send_attitude+0x8c0>)
    8bf4:	781a      	ldrb	r2, [r3, #0]
    8bf6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8bfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bfe:	781b      	ldrb	r3, [r3, #0]
    8c00:	4413      	add	r3, r2
    8c02:	b2da      	uxtb	r2, r3
    8c04:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8c08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c0c:	701a      	strb	r2, [r3, #0]
    8c0e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8c12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c16:	781a      	ldrb	r2, [r3, #0]
    8c18:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8c1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c20:	781b      	ldrb	r3, [r3, #0]
    8c22:	4413      	add	r3, r2
    8c24:	b2da      	uxtb	r2, r3
    8c26:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8c2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c2e:	701a      	strb	r2, [r3, #0]
    8c30:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8c34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c38:	781b      	ldrb	r3, [r3, #0]
    8c3a:	3301      	adds	r3, #1
    8c3c:	b2da      	uxtb	r2, r3
    8c3e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8c42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c46:	701a      	strb	r2, [r3, #0]
    8c48:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8c4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c50:	781b      	ldrb	r3, [r3, #0]
    8c52:	2bff      	cmp	r3, #255	; 0xff
    8c54:	d105      	bne.n	8c62 <send_attitude+0x85e>
    8c56:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8c5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c5e:	2200      	movs	r2, #0
    8c60:	701a      	strb	r2, [r3, #0]
    8c62:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8c66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c6a:	781b      	ldrb	r3, [r3, #0]
    8c6c:	461a      	mov	r2, r3
    8c6e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8c72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c76:	7819      	ldrb	r1, [r3, #0]
    8c78:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    8c7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c80:	5499      	strb	r1, [r3, r2]
    8c82:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8c86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c8a:	781b      	ldrb	r3, [r3, #0]
    8c8c:	3301      	adds	r3, #1
    8c8e:	b2da      	uxtb	r2, r3
    8c90:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8c94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c98:	701a      	strb	r2, [r3, #0]
    8c9a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8c9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ca2:	781b      	ldrb	r3, [r3, #0]
    8ca4:	2bff      	cmp	r3, #255	; 0xff
    8ca6:	d10f      	bne.n	8cc8 <send_attitude+0x8c4>
    8ca8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8cac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cb0:	2200      	movs	r2, #0
    8cb2:	701a      	strb	r2, [r3, #0]
    8cb4:	e008      	b.n	8cc8 <send_attitude+0x8c4>
    8cb6:	bf00      	nop
    8cb8:	2004c4bf 	.word	0x2004c4bf
    8cbc:	2004c4c1 	.word	0x2004c4c1
    8cc0:	2004c4c2 	.word	0x2004c4c2
    8cc4:	2004c4c3 	.word	0x2004c4c3
    8cc8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8ccc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cd0:	781b      	ldrb	r3, [r3, #0]
    8cd2:	461a      	mov	r2, r3
    8cd4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8cd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cdc:	7819      	ldrb	r1, [r3, #0]
    8cde:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    8ce2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ce6:	5499      	strb	r1, [r3, r2]
    8ce8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8cec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cf0:	781b      	ldrb	r3, [r3, #0]
    8cf2:	3301      	adds	r3, #1
    8cf4:	b2da      	uxtb	r2, r3
    8cf6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8cfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cfe:	701a      	strb	r2, [r3, #0]
    8d00:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8d04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d08:	781b      	ldrb	r3, [r3, #0]
    8d0a:	2bff      	cmp	r3, #255	; 0xff
    8d0c:	d105      	bne.n	8d1a <send_attitude+0x916>
    8d0e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8d12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d16:	2200      	movs	r2, #0
    8d18:	701a      	strb	r2, [r3, #0]
    8d1a:	f242 0339 	movw	r3, #8249	; 0x2039
    8d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d22:	781b      	ldrb	r3, [r3, #0]
    8d24:	b2db      	uxtb	r3, r3
    8d26:	f003 0310 	and.w	r3, r3, #16
    8d2a:	2b00      	cmp	r3, #0
    8d2c:	d15a      	bne.n	8de4 <send_attitude+0x9e0>
    8d2e:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    8d32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d36:	781b      	ldrb	r3, [r3, #0]
    8d38:	b2db      	uxtb	r3, r3
    8d3a:	461a      	mov	r2, r3
    8d3c:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    8d40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d44:	5c9a      	ldrb	r2, [r3, r2]
    8d46:	f64b 73fb 	movw	r3, #49147	; 0xbffb
    8d4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d4e:	701a      	strb	r2, [r3, #0]
    8d50:	f64b 73fc 	movw	r3, #49148	; 0xbffc
    8d54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d58:	2200      	movs	r2, #0
    8d5a:	701a      	strb	r2, [r3, #0]
    8d5c:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    8d60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d64:	781b      	ldrb	r3, [r3, #0]
    8d66:	b2db      	uxtb	r3, r3
    8d68:	3301      	adds	r3, #1
    8d6a:	b2da      	uxtb	r2, r3
    8d6c:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    8d70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d74:	701a      	strb	r2, [r3, #0]
    8d76:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    8d7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d7e:	781b      	ldrb	r3, [r3, #0]
    8d80:	b2db      	uxtb	r3, r3
    8d82:	2bff      	cmp	r3, #255	; 0xff
    8d84:	d105      	bne.n	8d92 <send_attitude+0x98e>
    8d86:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    8d8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d8e:	2200      	movs	r2, #0
    8d90:	701a      	strb	r2, [r3, #0]
    8d92:	f242 0338 	movw	r3, #8248	; 0x2038
    8d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d9a:	f242 0238 	movw	r2, #8248	; 0x2038
    8d9e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8da2:	7812      	ldrb	r2, [r2, #0]
    8da4:	b2d2      	uxtb	r2, r2
    8da6:	f042 0201 	orr.w	r2, r2, #1
    8daa:	b2d2      	uxtb	r2, r2
    8dac:	701a      	strb	r2, [r3, #0]
    8dae:	f242 0339 	movw	r3, #8249	; 0x2039
    8db2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8db6:	f242 0239 	movw	r2, #8249	; 0x2039
    8dba:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8dbe:	7812      	ldrb	r2, [r2, #0]
    8dc0:	b2d2      	uxtb	r2, r2
    8dc2:	f042 0210 	orr.w	r2, r2, #16
    8dc6:	b2d2      	uxtb	r2, r2
    8dc8:	701a      	strb	r2, [r3, #0]
    8dca:	e00b      	b.n	8de4 <send_attitude+0x9e0>
    8dcc:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    8dd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dd4:	781b      	ldrb	r3, [r3, #0]
    8dd6:	3301      	adds	r3, #1
    8dd8:	b2da      	uxtb	r2, r3
    8dda:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    8dde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8de2:	701a      	strb	r2, [r3, #0]
  }
}
    8de4:	46bd      	mov	sp, r7
    8de6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8dea:	4770      	bx	lr

00008dec <send_adc>:
  
void send_adc(void){  //500ms
    8dec:	b480      	push	{r7}
    8dee:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 5 == 1) PERIODIC_SEND_ADC();}
    8df0:	f64b 63f1 	movw	r3, #48881	; 0xbef1
    8df4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8df8:	781a      	ldrb	r2, [r3, #0]
    8dfa:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8dfe:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8e02:	fba3 1302 	umull	r1, r3, r3, r2
    8e06:	0899      	lsrs	r1, r3, #2
    8e08:	460b      	mov	r3, r1
    8e0a:	009b      	lsls	r3, r3, #2
    8e0c:	440b      	add	r3, r1
    8e0e:	1ad3      	subs	r3, r2, r3
    8e10:	b2db      	uxtb	r3, r3
    8e12:	2b01      	cmp	r3, #1
    8e14:	f040 8269 	bne.w	92ea <send_adc+0x4fe>
    8e18:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8e1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e20:	781a      	ldrb	r2, [r3, #0]
    8e22:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    8e26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e2a:	781b      	ldrb	r3, [r3, #0]
    8e2c:	b2db      	uxtb	r3, r3
    8e2e:	429a      	cmp	r2, r3
    8e30:	d313      	bcc.n	8e5a <send_adc+0x6e>
    8e32:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    8e36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e3a:	781b      	ldrb	r3, [r3, #0]
    8e3c:	b2db      	uxtb	r3, r3
    8e3e:	461a      	mov	r2, r3
    8e40:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8e44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e48:	781b      	ldrb	r3, [r3, #0]
    8e4a:	1ad3      	subs	r3, r2, r3
    8e4c:	33ff      	adds	r3, #255	; 0xff
    8e4e:	2b08      	cmp	r3, #8
    8e50:	bfd4      	ite	le
    8e52:	2300      	movle	r3, #0
    8e54:	2301      	movgt	r3, #1
    8e56:	b2db      	uxtb	r3, r3
    8e58:	e011      	b.n	8e7e <send_adc+0x92>
    8e5a:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    8e5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e62:	781b      	ldrb	r3, [r3, #0]
    8e64:	b2db      	uxtb	r3, r3
    8e66:	461a      	mov	r2, r3
    8e68:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8e6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e70:	781b      	ldrb	r3, [r3, #0]
    8e72:	1ad3      	subs	r3, r2, r3
    8e74:	2b08      	cmp	r3, #8
    8e76:	bfd4      	ite	le
    8e78:	2300      	movle	r3, #0
    8e7a:	2301      	movgt	r3, #1
    8e7c:	b2db      	uxtb	r3, r3
    8e7e:	2b00      	cmp	r3, #0
    8e80:	f000 8227 	beq.w	92d2 <send_adc+0x4e6>
    8e84:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8e88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e8c:	781b      	ldrb	r3, [r3, #0]
    8e8e:	461a      	mov	r2, r3
    8e90:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    8e94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e98:	2105      	movs	r1, #5
    8e9a:	5499      	strb	r1, [r3, r2]
    8e9c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8ea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ea4:	781b      	ldrb	r3, [r3, #0]
    8ea6:	3301      	adds	r3, #1
    8ea8:	b2da      	uxtb	r2, r3
    8eaa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8eae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eb2:	701a      	strb	r2, [r3, #0]
    8eb4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8eb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ebc:	781b      	ldrb	r3, [r3, #0]
    8ebe:	2bff      	cmp	r3, #255	; 0xff
    8ec0:	d105      	bne.n	8ece <send_adc+0xe2>
    8ec2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8ec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eca:	2200      	movs	r2, #0
    8ecc:	701a      	strb	r2, [r3, #0]
    8ece:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8ed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ed6:	781b      	ldrb	r3, [r3, #0]
    8ed8:	461a      	mov	r2, r3
    8eda:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    8ede:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ee2:	2107      	movs	r1, #7
    8ee4:	5499      	strb	r1, [r3, r2]
    8ee6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8eea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eee:	781b      	ldrb	r3, [r3, #0]
    8ef0:	3301      	adds	r3, #1
    8ef2:	b2da      	uxtb	r2, r3
    8ef4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8ef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8efc:	701a      	strb	r2, [r3, #0]
    8efe:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8f02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f06:	781b      	ldrb	r3, [r3, #0]
    8f08:	2bff      	cmp	r3, #255	; 0xff
    8f0a:	d105      	bne.n	8f18 <send_adc+0x12c>
    8f0c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8f10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f14:	2200      	movs	r2, #0
    8f16:	701a      	strb	r2, [r3, #0]
    8f18:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8f1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f20:	2207      	movs	r2, #7
    8f22:	701a      	strb	r2, [r3, #0]
    8f24:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8f28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f2c:	2207      	movs	r2, #7
    8f2e:	701a      	strb	r2, [r3, #0]
    8f30:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8f34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f38:	781b      	ldrb	r3, [r3, #0]
    8f3a:	461a      	mov	r2, r3
    8f3c:	f24c 1398 	movw	r3, #49560	; 0xc198
    8f40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f44:	7819      	ldrb	r1, [r3, #0]
    8f46:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    8f4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f4e:	5499      	strb	r1, [r3, r2]
    8f50:	f24c 1398 	movw	r3, #49560	; 0xc198
    8f54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f58:	781a      	ldrb	r2, [r3, #0]
    8f5a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8f5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f62:	781b      	ldrb	r3, [r3, #0]
    8f64:	4413      	add	r3, r2
    8f66:	b2da      	uxtb	r2, r3
    8f68:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8f6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f70:	701a      	strb	r2, [r3, #0]
    8f72:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8f76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f7a:	781a      	ldrb	r2, [r3, #0]
    8f7c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8f80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f84:	781b      	ldrb	r3, [r3, #0]
    8f86:	4413      	add	r3, r2
    8f88:	b2da      	uxtb	r2, r3
    8f8a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    8f8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f92:	701a      	strb	r2, [r3, #0]
    8f94:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8f98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f9c:	781b      	ldrb	r3, [r3, #0]
    8f9e:	3301      	adds	r3, #1
    8fa0:	b2da      	uxtb	r2, r3
    8fa2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8fa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8faa:	701a      	strb	r2, [r3, #0]
    8fac:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8fb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fb4:	781b      	ldrb	r3, [r3, #0]
    8fb6:	2bff      	cmp	r3, #255	; 0xff
    8fb8:	d105      	bne.n	8fc6 <send_adc+0x1da>
    8fba:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8fbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fc2:	2200      	movs	r2, #0
    8fc4:	701a      	strb	r2, [r3, #0]
    8fc6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    8fca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fce:	781b      	ldrb	r3, [r3, #0]
    8fd0:	461a      	mov	r2, r3
    8fd2:	f24c 1398 	movw	r3, #49560	; 0xc198
    8fd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fda:	7859      	ldrb	r1, [r3, #1]
    8fdc:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    8fe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fe4:	5499      	strb	r1, [r3, r2]
    8fe6:	4bc3      	ldr	r3, [pc, #780]	; (92f4 <send_adc+0x508>)
    8fe8:	781a      	ldrb	r2, [r3, #0]
    8fea:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8fee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ff2:	781b      	ldrb	r3, [r3, #0]
    8ff4:	4413      	add	r3, r2
    8ff6:	b2da      	uxtb	r2, r3
    8ff8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    8ffc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9000:	701a      	strb	r2, [r3, #0]
    9002:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9006:	f2c2 0304 	movt	r3, #8196	; 0x2004
    900a:	781a      	ldrb	r2, [r3, #0]
    900c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9014:	781b      	ldrb	r3, [r3, #0]
    9016:	4413      	add	r3, r2
    9018:	b2da      	uxtb	r2, r3
    901a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    901e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9022:	701a      	strb	r2, [r3, #0]
    9024:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9028:	f2c2 0304 	movt	r3, #8196	; 0x2004
    902c:	781b      	ldrb	r3, [r3, #0]
    902e:	3301      	adds	r3, #1
    9030:	b2da      	uxtb	r2, r3
    9032:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9036:	f2c2 0304 	movt	r3, #8196	; 0x2004
    903a:	701a      	strb	r2, [r3, #0]
    903c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9040:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9044:	781b      	ldrb	r3, [r3, #0]
    9046:	2bff      	cmp	r3, #255	; 0xff
    9048:	d105      	bne.n	9056 <send_adc+0x26a>
    904a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    904e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9052:	2200      	movs	r2, #0
    9054:	701a      	strb	r2, [r3, #0]
    9056:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    905a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    905e:	781b      	ldrb	r3, [r3, #0]
    9060:	461a      	mov	r2, r3
    9062:	f24c 139a 	movw	r3, #49562	; 0xc19a
    9066:	f2c2 0304 	movt	r3, #8196	; 0x2004
    906a:	7819      	ldrb	r1, [r3, #0]
    906c:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    9070:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9074:	5499      	strb	r1, [r3, r2]
    9076:	f24c 139a 	movw	r3, #49562	; 0xc19a
    907a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    907e:	781a      	ldrb	r2, [r3, #0]
    9080:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9084:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9088:	781b      	ldrb	r3, [r3, #0]
    908a:	4413      	add	r3, r2
    908c:	b2da      	uxtb	r2, r3
    908e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9096:	701a      	strb	r2, [r3, #0]
    9098:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    909c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90a0:	781a      	ldrb	r2, [r3, #0]
    90a2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    90a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90aa:	781b      	ldrb	r3, [r3, #0]
    90ac:	4413      	add	r3, r2
    90ae:	b2da      	uxtb	r2, r3
    90b0:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    90b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90b8:	701a      	strb	r2, [r3, #0]
    90ba:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    90be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90c2:	781b      	ldrb	r3, [r3, #0]
    90c4:	3301      	adds	r3, #1
    90c6:	b2da      	uxtb	r2, r3
    90c8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    90cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90d0:	701a      	strb	r2, [r3, #0]
    90d2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    90d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90da:	781b      	ldrb	r3, [r3, #0]
    90dc:	2bff      	cmp	r3, #255	; 0xff
    90de:	d105      	bne.n	90ec <send_adc+0x300>
    90e0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    90e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90e8:	2200      	movs	r2, #0
    90ea:	701a      	strb	r2, [r3, #0]
    90ec:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    90f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90f4:	781b      	ldrb	r3, [r3, #0]
    90f6:	461a      	mov	r2, r3
    90f8:	f24c 139a 	movw	r3, #49562	; 0xc19a
    90fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9100:	7859      	ldrb	r1, [r3, #1]
    9102:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    9106:	f2c2 0304 	movt	r3, #8196	; 0x2004
    910a:	5499      	strb	r1, [r3, r2]
    910c:	4b7a      	ldr	r3, [pc, #488]	; (92f8 <send_adc+0x50c>)
    910e:	781a      	ldrb	r2, [r3, #0]
    9110:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9118:	781b      	ldrb	r3, [r3, #0]
    911a:	4413      	add	r3, r2
    911c:	b2da      	uxtb	r2, r3
    911e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9122:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9126:	701a      	strb	r2, [r3, #0]
    9128:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    912c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9130:	781a      	ldrb	r2, [r3, #0]
    9132:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9136:	f2c2 0304 	movt	r3, #8196	; 0x2004
    913a:	781b      	ldrb	r3, [r3, #0]
    913c:	4413      	add	r3, r2
    913e:	b2da      	uxtb	r2, r3
    9140:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9144:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9148:	701a      	strb	r2, [r3, #0]
    914a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    914e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9152:	781b      	ldrb	r3, [r3, #0]
    9154:	3301      	adds	r3, #1
    9156:	b2da      	uxtb	r2, r3
    9158:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    915c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9160:	701a      	strb	r2, [r3, #0]
    9162:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9166:	f2c2 0304 	movt	r3, #8196	; 0x2004
    916a:	781b      	ldrb	r3, [r3, #0]
    916c:	2bff      	cmp	r3, #255	; 0xff
    916e:	d105      	bne.n	917c <send_adc+0x390>
    9170:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9174:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9178:	2200      	movs	r2, #0
    917a:	701a      	strb	r2, [r3, #0]
    917c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9180:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9184:	781b      	ldrb	r3, [r3, #0]
    9186:	461a      	mov	r2, r3
    9188:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    918c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9190:	7819      	ldrb	r1, [r3, #0]
    9192:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    9196:	f2c2 0304 	movt	r3, #8196	; 0x2004
    919a:	5499      	strb	r1, [r3, r2]
    919c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    91a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91a4:	781b      	ldrb	r3, [r3, #0]
    91a6:	3301      	adds	r3, #1
    91a8:	b2da      	uxtb	r2, r3
    91aa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    91ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91b2:	701a      	strb	r2, [r3, #0]
    91b4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    91b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91bc:	781b      	ldrb	r3, [r3, #0]
    91be:	2bff      	cmp	r3, #255	; 0xff
    91c0:	d105      	bne.n	91ce <send_adc+0x3e2>
    91c2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    91c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91ca:	2200      	movs	r2, #0
    91cc:	701a      	strb	r2, [r3, #0]
    91ce:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    91d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91d6:	781b      	ldrb	r3, [r3, #0]
    91d8:	461a      	mov	r2, r3
    91da:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    91de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91e2:	7819      	ldrb	r1, [r3, #0]
    91e4:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    91e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91ec:	5499      	strb	r1, [r3, r2]
    91ee:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    91f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91f6:	781b      	ldrb	r3, [r3, #0]
    91f8:	3301      	adds	r3, #1
    91fa:	b2da      	uxtb	r2, r3
    91fc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9200:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9204:	701a      	strb	r2, [r3, #0]
    9206:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    920a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    920e:	781b      	ldrb	r3, [r3, #0]
    9210:	2bff      	cmp	r3, #255	; 0xff
    9212:	d105      	bne.n	9220 <send_adc+0x434>
    9214:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9218:	f2c2 0304 	movt	r3, #8196	; 0x2004
    921c:	2200      	movs	r2, #0
    921e:	701a      	strb	r2, [r3, #0]
    9220:	f242 0339 	movw	r3, #8249	; 0x2039
    9224:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9228:	781b      	ldrb	r3, [r3, #0]
    922a:	b2db      	uxtb	r3, r3
    922c:	f003 0310 	and.w	r3, r3, #16
    9230:	2b00      	cmp	r3, #0
    9232:	d15a      	bne.n	92ea <send_adc+0x4fe>
    9234:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    9238:	f2c2 0304 	movt	r3, #8196	; 0x2004
    923c:	781b      	ldrb	r3, [r3, #0]
    923e:	b2db      	uxtb	r3, r3
    9240:	461a      	mov	r2, r3
    9242:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    9246:	f2c2 0304 	movt	r3, #8196	; 0x2004
    924a:	5c9a      	ldrb	r2, [r3, r2]
    924c:	f64b 73fb 	movw	r3, #49147	; 0xbffb
    9250:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9254:	701a      	strb	r2, [r3, #0]
    9256:	f64b 73fc 	movw	r3, #49148	; 0xbffc
    925a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    925e:	2200      	movs	r2, #0
    9260:	701a      	strb	r2, [r3, #0]
    9262:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    9266:	f2c2 0304 	movt	r3, #8196	; 0x2004
    926a:	781b      	ldrb	r3, [r3, #0]
    926c:	b2db      	uxtb	r3, r3
    926e:	3301      	adds	r3, #1
    9270:	b2da      	uxtb	r2, r3
    9272:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    9276:	f2c2 0304 	movt	r3, #8196	; 0x2004
    927a:	701a      	strb	r2, [r3, #0]
    927c:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    9280:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9284:	781b      	ldrb	r3, [r3, #0]
    9286:	b2db      	uxtb	r3, r3
    9288:	2bff      	cmp	r3, #255	; 0xff
    928a:	d105      	bne.n	9298 <send_adc+0x4ac>
    928c:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    9290:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9294:	2200      	movs	r2, #0
    9296:	701a      	strb	r2, [r3, #0]
    9298:	f242 0338 	movw	r3, #8248	; 0x2038
    929c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92a0:	f242 0238 	movw	r2, #8248	; 0x2038
    92a4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    92a8:	7812      	ldrb	r2, [r2, #0]
    92aa:	b2d2      	uxtb	r2, r2
    92ac:	f042 0201 	orr.w	r2, r2, #1
    92b0:	b2d2      	uxtb	r2, r2
    92b2:	701a      	strb	r2, [r3, #0]
    92b4:	f242 0339 	movw	r3, #8249	; 0x2039
    92b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92bc:	f242 0239 	movw	r2, #8249	; 0x2039
    92c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    92c4:	7812      	ldrb	r2, [r2, #0]
    92c6:	b2d2      	uxtb	r2, r2
    92c8:	f042 0210 	orr.w	r2, r2, #16
    92cc:	b2d2      	uxtb	r2, r2
    92ce:	701a      	strb	r2, [r3, #0]
    92d0:	e00b      	b.n	92ea <send_adc+0x4fe>
    92d2:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    92d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92da:	781b      	ldrb	r3, [r3, #0]
    92dc:	3301      	adds	r3, #1
    92de:	b2da      	uxtb	r2, r3
    92e0:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    92e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92e8:	701a      	strb	r2, [r3, #0]
}
    92ea:	46bd      	mov	sp, r7
    92ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    92f0:	4770      	bx	lr
    92f2:	bf00      	nop
    92f4:	2004c199 	.word	0x2004c199
    92f8:	2004c19b 	.word	0x2004c19b

000092fc <send_settings>:
void send_settings(void){ //500ms
    92fc:	b480      	push	{r7}
    92fe:	af00      	add	r7, sp, #0
  //if(!boot)
  {if (count % 5 == 2) PERIODIC_SEND_SETTINGS();}
    9300:	f64b 63f1 	movw	r3, #48881	; 0xbef1
    9304:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9308:	781a      	ldrb	r2, [r3, #0]
    930a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    930e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    9312:	fba3 1302 	umull	r1, r3, r3, r2
    9316:	0899      	lsrs	r1, r3, #2
    9318:	460b      	mov	r3, r1
    931a:	009b      	lsls	r3, r3, #2
    931c:	440b      	add	r3, r1
    931e:	1ad3      	subs	r3, r2, r3
    9320:	b2db      	uxtb	r3, r3
    9322:	2b02      	cmp	r3, #2
    9324:	f040 83e7 	bne.w	9af6 <send_settings+0x7fa>
    9328:	f24c 530c 	movw	r3, #50444	; 0xc50c
    932c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9330:	781b      	ldrb	r3, [r3, #0]
    9332:	2b00      	cmp	r3, #0
    9334:	f000 83df 	beq.w	9af6 <send_settings+0x7fa>
    9338:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    933c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9340:	781a      	ldrb	r2, [r3, #0]
    9342:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    9346:	f2c2 0304 	movt	r3, #8196	; 0x2004
    934a:	781b      	ldrb	r3, [r3, #0]
    934c:	b2db      	uxtb	r3, r3
    934e:	429a      	cmp	r2, r3
    9350:	d313      	bcc.n	937a <send_settings+0x7e>
    9352:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    9356:	f2c2 0304 	movt	r3, #8196	; 0x2004
    935a:	781b      	ldrb	r3, [r3, #0]
    935c:	b2db      	uxtb	r3, r3
    935e:	461a      	mov	r2, r3
    9360:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9364:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9368:	781b      	ldrb	r3, [r3, #0]
    936a:	1ad3      	subs	r3, r2, r3
    936c:	33ff      	adds	r3, #255	; 0xff
    936e:	2b0d      	cmp	r3, #13
    9370:	bfd4      	ite	le
    9372:	2300      	movle	r3, #0
    9374:	2301      	movgt	r3, #1
    9376:	b2db      	uxtb	r3, r3
    9378:	e011      	b.n	939e <send_settings+0xa2>
    937a:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    937e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9382:	781b      	ldrb	r3, [r3, #0]
    9384:	b2db      	uxtb	r3, r3
    9386:	461a      	mov	r2, r3
    9388:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    938c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9390:	781b      	ldrb	r3, [r3, #0]
    9392:	1ad3      	subs	r3, r2, r3
    9394:	2b0d      	cmp	r3, #13
    9396:	bfd4      	ite	le
    9398:	2300      	movle	r3, #0
    939a:	2301      	movgt	r3, #1
    939c:	b2db      	uxtb	r3, r3
    939e:	2b00      	cmp	r3, #0
    93a0:	f000 839d 	beq.w	9ade <send_settings+0x7e2>
    93a4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    93a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93ac:	781b      	ldrb	r3, [r3, #0]
    93ae:	461a      	mov	r2, r3
    93b0:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    93b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93b8:	2105      	movs	r1, #5
    93ba:	5499      	strb	r1, [r3, r2]
    93bc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    93c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93c4:	781b      	ldrb	r3, [r3, #0]
    93c6:	3301      	adds	r3, #1
    93c8:	b2da      	uxtb	r2, r3
    93ca:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    93ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93d2:	701a      	strb	r2, [r3, #0]
    93d4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    93d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93dc:	781b      	ldrb	r3, [r3, #0]
    93de:	2bff      	cmp	r3, #255	; 0xff
    93e0:	d105      	bne.n	93ee <send_settings+0xf2>
    93e2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    93e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93ea:	2200      	movs	r2, #0
    93ec:	701a      	strb	r2, [r3, #0]
    93ee:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    93f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93f6:	781b      	ldrb	r3, [r3, #0]
    93f8:	461a      	mov	r2, r3
    93fa:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    93fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9402:	2111      	movs	r1, #17
    9404:	5499      	strb	r1, [r3, r2]
    9406:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    940a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    940e:	781b      	ldrb	r3, [r3, #0]
    9410:	3301      	adds	r3, #1
    9412:	b2da      	uxtb	r2, r3
    9414:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9418:	f2c2 0304 	movt	r3, #8196	; 0x2004
    941c:	701a      	strb	r2, [r3, #0]
    941e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9426:	781b      	ldrb	r3, [r3, #0]
    9428:	2bff      	cmp	r3, #255	; 0xff
    942a:	d105      	bne.n	9438 <send_settings+0x13c>
    942c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9430:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9434:	2200      	movs	r2, #0
    9436:	701a      	strb	r2, [r3, #0]
    9438:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    943c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9440:	2211      	movs	r2, #17
    9442:	701a      	strb	r2, [r3, #0]
    9444:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9448:	f2c2 0304 	movt	r3, #8196	; 0x2004
    944c:	2211      	movs	r2, #17
    944e:	701a      	strb	r2, [r3, #0]
    9450:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9454:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9458:	781b      	ldrb	r3, [r3, #0]
    945a:	461a      	mov	r2, r3
    945c:	f24c 530c 	movw	r3, #50444	; 0xc50c
    9460:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9464:	7819      	ldrb	r1, [r3, #0]
    9466:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    946a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    946e:	5499      	strb	r1, [r3, r2]
    9470:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9474:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9478:	781a      	ldrb	r2, [r3, #0]
    947a:	f24c 530c 	movw	r3, #50444	; 0xc50c
    947e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9482:	781b      	ldrb	r3, [r3, #0]
    9484:	4413      	add	r3, r2
    9486:	b2da      	uxtb	r2, r3
    9488:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    948c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9490:	701a      	strb	r2, [r3, #0]
    9492:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9496:	f2c2 0304 	movt	r3, #8196	; 0x2004
    949a:	781a      	ldrb	r2, [r3, #0]
    949c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    94a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94a4:	781b      	ldrb	r3, [r3, #0]
    94a6:	4413      	add	r3, r2
    94a8:	b2da      	uxtb	r2, r3
    94aa:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    94ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94b2:	701a      	strb	r2, [r3, #0]
    94b4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    94b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94bc:	781b      	ldrb	r3, [r3, #0]
    94be:	3301      	adds	r3, #1
    94c0:	b2da      	uxtb	r2, r3
    94c2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    94c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94ca:	701a      	strb	r2, [r3, #0]
    94cc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    94d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94d4:	781b      	ldrb	r3, [r3, #0]
    94d6:	2bff      	cmp	r3, #255	; 0xff
    94d8:	d105      	bne.n	94e6 <send_settings+0x1ea>
    94da:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    94de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94e2:	2200      	movs	r2, #0
    94e4:	701a      	strb	r2, [r3, #0]
    94e6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    94ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94ee:	781b      	ldrb	r3, [r3, #0]
    94f0:	461a      	mov	r2, r3
    94f2:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    94f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94fa:	7819      	ldrb	r1, [r3, #0]
    94fc:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    9500:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9504:	5499      	strb	r1, [r3, r2]
    9506:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    950a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    950e:	781a      	ldrb	r2, [r3, #0]
    9510:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9514:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9518:	781b      	ldrb	r3, [r3, #0]
    951a:	4413      	add	r3, r2
    951c:	b2da      	uxtb	r2, r3
    951e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9522:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9526:	701a      	strb	r2, [r3, #0]
    9528:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    952c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9530:	781a      	ldrb	r2, [r3, #0]
    9532:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9536:	f2c2 0304 	movt	r3, #8196	; 0x2004
    953a:	781b      	ldrb	r3, [r3, #0]
    953c:	4413      	add	r3, r2
    953e:	b2da      	uxtb	r2, r3
    9540:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9544:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9548:	701a      	strb	r2, [r3, #0]
    954a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    954e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9552:	781b      	ldrb	r3, [r3, #0]
    9554:	3301      	adds	r3, #1
    9556:	b2da      	uxtb	r2, r3
    9558:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    955c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9560:	701a      	strb	r2, [r3, #0]
    9562:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9566:	f2c2 0304 	movt	r3, #8196	; 0x2004
    956a:	781b      	ldrb	r3, [r3, #0]
    956c:	2bff      	cmp	r3, #255	; 0xff
    956e:	d105      	bne.n	957c <send_settings+0x280>
    9570:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9574:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9578:	2200      	movs	r2, #0
    957a:	701a      	strb	r2, [r3, #0]
    957c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9580:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9584:	781b      	ldrb	r3, [r3, #0]
    9586:	461a      	mov	r2, r3
    9588:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    958c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9590:	7859      	ldrb	r1, [r3, #1]
    9592:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    9596:	f2c2 0304 	movt	r3, #8196	; 0x2004
    959a:	5499      	strb	r1, [r3, r2]
    959c:	4bd1      	ldr	r3, [pc, #836]	; (98e4 <send_settings+0x5e8>)
    959e:	781a      	ldrb	r2, [r3, #0]
    95a0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    95a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95a8:	781b      	ldrb	r3, [r3, #0]
    95aa:	4413      	add	r3, r2
    95ac:	b2da      	uxtb	r2, r3
    95ae:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    95b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95b6:	701a      	strb	r2, [r3, #0]
    95b8:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    95bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95c0:	781a      	ldrb	r2, [r3, #0]
    95c2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    95c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95ca:	781b      	ldrb	r3, [r3, #0]
    95cc:	4413      	add	r3, r2
    95ce:	b2da      	uxtb	r2, r3
    95d0:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    95d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95d8:	701a      	strb	r2, [r3, #0]
    95da:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    95de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95e2:	781b      	ldrb	r3, [r3, #0]
    95e4:	3301      	adds	r3, #1
    95e6:	b2da      	uxtb	r2, r3
    95e8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    95ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95f0:	701a      	strb	r2, [r3, #0]
    95f2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    95f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95fa:	781b      	ldrb	r3, [r3, #0]
    95fc:	2bff      	cmp	r3, #255	; 0xff
    95fe:	d105      	bne.n	960c <send_settings+0x310>
    9600:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9604:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9608:	2200      	movs	r2, #0
    960a:	701a      	strb	r2, [r3, #0]
    960c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9614:	781b      	ldrb	r3, [r3, #0]
    9616:	461a      	mov	r2, r3
    9618:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    961c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9620:	7899      	ldrb	r1, [r3, #2]
    9622:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    9626:	f2c2 0304 	movt	r3, #8196	; 0x2004
    962a:	5499      	strb	r1, [r3, r2]
    962c:	4bae      	ldr	r3, [pc, #696]	; (98e8 <send_settings+0x5ec>)
    962e:	781a      	ldrb	r2, [r3, #0]
    9630:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9634:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9638:	781b      	ldrb	r3, [r3, #0]
    963a:	4413      	add	r3, r2
    963c:	b2da      	uxtb	r2, r3
    963e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9642:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9646:	701a      	strb	r2, [r3, #0]
    9648:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    964c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9650:	781a      	ldrb	r2, [r3, #0]
    9652:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9656:	f2c2 0304 	movt	r3, #8196	; 0x2004
    965a:	781b      	ldrb	r3, [r3, #0]
    965c:	4413      	add	r3, r2
    965e:	b2da      	uxtb	r2, r3
    9660:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9668:	701a      	strb	r2, [r3, #0]
    966a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    966e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9672:	781b      	ldrb	r3, [r3, #0]
    9674:	3301      	adds	r3, #1
    9676:	b2da      	uxtb	r2, r3
    9678:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    967c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9680:	701a      	strb	r2, [r3, #0]
    9682:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9686:	f2c2 0304 	movt	r3, #8196	; 0x2004
    968a:	781b      	ldrb	r3, [r3, #0]
    968c:	2bff      	cmp	r3, #255	; 0xff
    968e:	d105      	bne.n	969c <send_settings+0x3a0>
    9690:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9694:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9698:	2200      	movs	r2, #0
    969a:	701a      	strb	r2, [r3, #0]
    969c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    96a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96a4:	781b      	ldrb	r3, [r3, #0]
    96a6:	461a      	mov	r2, r3
    96a8:	f64b 63e8 	movw	r3, #48872	; 0xbee8
    96ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96b0:	78d9      	ldrb	r1, [r3, #3]
    96b2:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    96b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96ba:	5499      	strb	r1, [r3, r2]
    96bc:	4b8b      	ldr	r3, [pc, #556]	; (98ec <send_settings+0x5f0>)
    96be:	781a      	ldrb	r2, [r3, #0]
    96c0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    96c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96c8:	781b      	ldrb	r3, [r3, #0]
    96ca:	4413      	add	r3, r2
    96cc:	b2da      	uxtb	r2, r3
    96ce:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    96d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96d6:	701a      	strb	r2, [r3, #0]
    96d8:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    96dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96e0:	781a      	ldrb	r2, [r3, #0]
    96e2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    96e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96ea:	781b      	ldrb	r3, [r3, #0]
    96ec:	4413      	add	r3, r2
    96ee:	b2da      	uxtb	r2, r3
    96f0:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    96f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96f8:	701a      	strb	r2, [r3, #0]
    96fa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    96fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9702:	781b      	ldrb	r3, [r3, #0]
    9704:	3301      	adds	r3, #1
    9706:	b2da      	uxtb	r2, r3
    9708:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    970c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9710:	701a      	strb	r2, [r3, #0]
    9712:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9716:	f2c2 0304 	movt	r3, #8196	; 0x2004
    971a:	781b      	ldrb	r3, [r3, #0]
    971c:	2bff      	cmp	r3, #255	; 0xff
    971e:	d105      	bne.n	972c <send_settings+0x430>
    9720:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9724:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9728:	2200      	movs	r2, #0
    972a:	701a      	strb	r2, [r3, #0]
    972c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9730:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9734:	781b      	ldrb	r3, [r3, #0]
    9736:	461a      	mov	r2, r3
    9738:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    973c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9740:	7819      	ldrb	r1, [r3, #0]
    9742:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    9746:	f2c2 0304 	movt	r3, #8196	; 0x2004
    974a:	5499      	strb	r1, [r3, r2]
    974c:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    9750:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9754:	781a      	ldrb	r2, [r3, #0]
    9756:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    975a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    975e:	781b      	ldrb	r3, [r3, #0]
    9760:	4413      	add	r3, r2
    9762:	b2da      	uxtb	r2, r3
    9764:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9768:	f2c2 0304 	movt	r3, #8196	; 0x2004
    976c:	701a      	strb	r2, [r3, #0]
    976e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9772:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9776:	781a      	ldrb	r2, [r3, #0]
    9778:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    977c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9780:	781b      	ldrb	r3, [r3, #0]
    9782:	4413      	add	r3, r2
    9784:	b2da      	uxtb	r2, r3
    9786:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    978a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    978e:	701a      	strb	r2, [r3, #0]
    9790:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9794:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9798:	781b      	ldrb	r3, [r3, #0]
    979a:	3301      	adds	r3, #1
    979c:	b2da      	uxtb	r2, r3
    979e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    97a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97a6:	701a      	strb	r2, [r3, #0]
    97a8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    97ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97b0:	781b      	ldrb	r3, [r3, #0]
    97b2:	2bff      	cmp	r3, #255	; 0xff
    97b4:	d105      	bne.n	97c2 <send_settings+0x4c6>
    97b6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    97ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97be:	2200      	movs	r2, #0
    97c0:	701a      	strb	r2, [r3, #0]
    97c2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    97c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97ca:	781b      	ldrb	r3, [r3, #0]
    97cc:	461a      	mov	r2, r3
    97ce:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    97d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97d6:	7859      	ldrb	r1, [r3, #1]
    97d8:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    97dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97e0:	5499      	strb	r1, [r3, r2]
    97e2:	4b43      	ldr	r3, [pc, #268]	; (98f0 <send_settings+0x5f4>)
    97e4:	781a      	ldrb	r2, [r3, #0]
    97e6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    97ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97ee:	781b      	ldrb	r3, [r3, #0]
    97f0:	4413      	add	r3, r2
    97f2:	b2da      	uxtb	r2, r3
    97f4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    97f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97fc:	701a      	strb	r2, [r3, #0]
    97fe:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9802:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9806:	781a      	ldrb	r2, [r3, #0]
    9808:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    980c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9810:	781b      	ldrb	r3, [r3, #0]
    9812:	4413      	add	r3, r2
    9814:	b2da      	uxtb	r2, r3
    9816:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    981a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    981e:	701a      	strb	r2, [r3, #0]
    9820:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9824:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9828:	781b      	ldrb	r3, [r3, #0]
    982a:	3301      	adds	r3, #1
    982c:	b2da      	uxtb	r2, r3
    982e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9832:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9836:	701a      	strb	r2, [r3, #0]
    9838:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    983c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9840:	781b      	ldrb	r3, [r3, #0]
    9842:	2bff      	cmp	r3, #255	; 0xff
    9844:	d105      	bne.n	9852 <send_settings+0x556>
    9846:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    984a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    984e:	2200      	movs	r2, #0
    9850:	701a      	strb	r2, [r3, #0]
    9852:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9856:	f2c2 0304 	movt	r3, #8196	; 0x2004
    985a:	781b      	ldrb	r3, [r3, #0]
    985c:	461a      	mov	r2, r3
    985e:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    9862:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9866:	7899      	ldrb	r1, [r3, #2]
    9868:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    986c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9870:	5499      	strb	r1, [r3, r2]
    9872:	4b20      	ldr	r3, [pc, #128]	; (98f4 <send_settings+0x5f8>)
    9874:	781a      	ldrb	r2, [r3, #0]
    9876:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    987a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    987e:	781b      	ldrb	r3, [r3, #0]
    9880:	4413      	add	r3, r2
    9882:	b2da      	uxtb	r2, r3
    9884:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9888:	f2c2 0304 	movt	r3, #8196	; 0x2004
    988c:	701a      	strb	r2, [r3, #0]
    988e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9892:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9896:	781a      	ldrb	r2, [r3, #0]
    9898:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    989c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98a0:	781b      	ldrb	r3, [r3, #0]
    98a2:	4413      	add	r3, r2
    98a4:	b2da      	uxtb	r2, r3
    98a6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    98aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98ae:	701a      	strb	r2, [r3, #0]
    98b0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    98b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98b8:	781b      	ldrb	r3, [r3, #0]
    98ba:	3301      	adds	r3, #1
    98bc:	b2da      	uxtb	r2, r3
    98be:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    98c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98c6:	701a      	strb	r2, [r3, #0]
    98c8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    98cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98d0:	781b      	ldrb	r3, [r3, #0]
    98d2:	2bff      	cmp	r3, #255	; 0xff
    98d4:	d110      	bne.n	98f8 <send_settings+0x5fc>
    98d6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    98da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98de:	2200      	movs	r2, #0
    98e0:	701a      	strb	r2, [r3, #0]
    98e2:	e009      	b.n	98f8 <send_settings+0x5fc>
    98e4:	2004bee9 	.word	0x2004bee9
    98e8:	2004beea 	.word	0x2004beea
    98ec:	2004beeb 	.word	0x2004beeb
    98f0:	2004beed 	.word	0x2004beed
    98f4:	2004beee 	.word	0x2004beee
    98f8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    98fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9900:	781b      	ldrb	r3, [r3, #0]
    9902:	461a      	mov	r2, r3
    9904:	f64b 63ec 	movw	r3, #48876	; 0xbeec
    9908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    990c:	78d9      	ldrb	r1, [r3, #3]
    990e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    9912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9916:	5499      	strb	r1, [r3, r2]
    9918:	4b79      	ldr	r3, [pc, #484]	; (9b00 <send_settings+0x804>)
    991a:	781a      	ldrb	r2, [r3, #0]
    991c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9924:	781b      	ldrb	r3, [r3, #0]
    9926:	4413      	add	r3, r2
    9928:	b2da      	uxtb	r2, r3
    992a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    992e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9932:	701a      	strb	r2, [r3, #0]
    9934:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    993c:	781a      	ldrb	r2, [r3, #0]
    993e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9942:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9946:	781b      	ldrb	r3, [r3, #0]
    9948:	4413      	add	r3, r2
    994a:	b2da      	uxtb	r2, r3
    994c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9950:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9954:	701a      	strb	r2, [r3, #0]
    9956:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    995a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    995e:	781b      	ldrb	r3, [r3, #0]
    9960:	3301      	adds	r3, #1
    9962:	b2da      	uxtb	r2, r3
    9964:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9968:	f2c2 0304 	movt	r3, #8196	; 0x2004
    996c:	701a      	strb	r2, [r3, #0]
    996e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9972:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9976:	781b      	ldrb	r3, [r3, #0]
    9978:	2bff      	cmp	r3, #255	; 0xff
    997a:	d105      	bne.n	9988 <send_settings+0x68c>
    997c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9980:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9984:	2200      	movs	r2, #0
    9986:	701a      	strb	r2, [r3, #0]
    9988:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    998c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9990:	781b      	ldrb	r3, [r3, #0]
    9992:	461a      	mov	r2, r3
    9994:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9998:	f2c2 0304 	movt	r3, #8196	; 0x2004
    999c:	7819      	ldrb	r1, [r3, #0]
    999e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    99a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99a6:	5499      	strb	r1, [r3, r2]
    99a8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    99ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99b0:	781b      	ldrb	r3, [r3, #0]
    99b2:	3301      	adds	r3, #1
    99b4:	b2da      	uxtb	r2, r3
    99b6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    99ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99be:	701a      	strb	r2, [r3, #0]
    99c0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    99c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99c8:	781b      	ldrb	r3, [r3, #0]
    99ca:	2bff      	cmp	r3, #255	; 0xff
    99cc:	d105      	bne.n	99da <send_settings+0x6de>
    99ce:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    99d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99d6:	2200      	movs	r2, #0
    99d8:	701a      	strb	r2, [r3, #0]
    99da:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    99de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99e2:	781b      	ldrb	r3, [r3, #0]
    99e4:	461a      	mov	r2, r3
    99e6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    99ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99ee:	7819      	ldrb	r1, [r3, #0]
    99f0:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    99f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99f8:	5499      	strb	r1, [r3, r2]
    99fa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    99fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a02:	781b      	ldrb	r3, [r3, #0]
    9a04:	3301      	adds	r3, #1
    9a06:	b2da      	uxtb	r2, r3
    9a08:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9a0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a10:	701a      	strb	r2, [r3, #0]
    9a12:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9a16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a1a:	781b      	ldrb	r3, [r3, #0]
    9a1c:	2bff      	cmp	r3, #255	; 0xff
    9a1e:	d105      	bne.n	9a2c <send_settings+0x730>
    9a20:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9a24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a28:	2200      	movs	r2, #0
    9a2a:	701a      	strb	r2, [r3, #0]
    9a2c:	f242 0339 	movw	r3, #8249	; 0x2039
    9a30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a34:	781b      	ldrb	r3, [r3, #0]
    9a36:	b2db      	uxtb	r3, r3
    9a38:	f003 0310 	and.w	r3, r3, #16
    9a3c:	2b00      	cmp	r3, #0
    9a3e:	d15a      	bne.n	9af6 <send_settings+0x7fa>
    9a40:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    9a44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a48:	781b      	ldrb	r3, [r3, #0]
    9a4a:	b2db      	uxtb	r3, r3
    9a4c:	461a      	mov	r2, r3
    9a4e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    9a52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a56:	5c9a      	ldrb	r2, [r3, r2]
    9a58:	f64b 73fb 	movw	r3, #49147	; 0xbffb
    9a5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a60:	701a      	strb	r2, [r3, #0]
    9a62:	f64b 73fc 	movw	r3, #49148	; 0xbffc
    9a66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a6a:	2200      	movs	r2, #0
    9a6c:	701a      	strb	r2, [r3, #0]
    9a6e:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    9a72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a76:	781b      	ldrb	r3, [r3, #0]
    9a78:	b2db      	uxtb	r3, r3
    9a7a:	3301      	adds	r3, #1
    9a7c:	b2da      	uxtb	r2, r3
    9a7e:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    9a82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a86:	701a      	strb	r2, [r3, #0]
    9a88:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    9a8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a90:	781b      	ldrb	r3, [r3, #0]
    9a92:	b2db      	uxtb	r3, r3
    9a94:	2bff      	cmp	r3, #255	; 0xff
    9a96:	d105      	bne.n	9aa4 <send_settings+0x7a8>
    9a98:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    9a9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9aa0:	2200      	movs	r2, #0
    9aa2:	701a      	strb	r2, [r3, #0]
    9aa4:	f242 0338 	movw	r3, #8248	; 0x2038
    9aa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9aac:	f242 0238 	movw	r2, #8248	; 0x2038
    9ab0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9ab4:	7812      	ldrb	r2, [r2, #0]
    9ab6:	b2d2      	uxtb	r2, r2
    9ab8:	f042 0201 	orr.w	r2, r2, #1
    9abc:	b2d2      	uxtb	r2, r2
    9abe:	701a      	strb	r2, [r3, #0]
    9ac0:	f242 0339 	movw	r3, #8249	; 0x2039
    9ac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ac8:	f242 0239 	movw	r2, #8249	; 0x2039
    9acc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9ad0:	7812      	ldrb	r2, [r2, #0]
    9ad2:	b2d2      	uxtb	r2, r2
    9ad4:	f042 0210 	orr.w	r2, r2, #16
    9ad8:	b2d2      	uxtb	r2, r2
    9ada:	701a      	strb	r2, [r3, #0]
    9adc:	e00b      	b.n	9af6 <send_settings+0x7fa>
    9ade:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    9ae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ae6:	781b      	ldrb	r3, [r3, #0]
    9ae8:	3301      	adds	r3, #1
    9aea:	b2da      	uxtb	r2, r3
    9aec:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    9af0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9af4:	701a      	strb	r2, [r3, #0]
}
    9af6:	46bd      	mov	sp, r7
    9af8:	f85d 7b04 	ldr.w	r7, [sp], #4
    9afc:	4770      	bx	lr
    9afe:	bf00      	nop
    9b00:	2004beef 	.word	0x2004beef

00009b04 <send_desired>:
void send_desired(void){  //1000ms
    9b04:	b480      	push	{r7}
    9b06:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 10 == 3) PERIODIC_SEND_DESIRED();}
    9b08:	f64b 63f1 	movw	r3, #48881	; 0xbef1
    9b0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b10:	781a      	ldrb	r2, [r3, #0]
    9b12:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    9b16:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    9b1a:	fba3 1302 	umull	r1, r3, r3, r2
    9b1e:	08d9      	lsrs	r1, r3, #3
    9b20:	460b      	mov	r3, r1
    9b22:	009b      	lsls	r3, r3, #2
    9b24:	440b      	add	r3, r1
    9b26:	005b      	lsls	r3, r3, #1
    9b28:	1ad3      	subs	r3, r2, r3
    9b2a:	b2db      	uxtb	r3, r3
    9b2c:	2b03      	cmp	r3, #3
    9b2e:	f040 8712 	bne.w	a956 <send_desired+0xe52>
    9b32:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9b36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b3a:	781a      	ldrb	r2, [r3, #0]
    9b3c:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    9b40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b44:	781b      	ldrb	r3, [r3, #0]
    9b46:	b2db      	uxtb	r3, r3
    9b48:	429a      	cmp	r2, r3
    9b4a:	d313      	bcc.n	9b74 <send_desired+0x70>
    9b4c:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    9b50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b54:	781b      	ldrb	r3, [r3, #0]
    9b56:	b2db      	uxtb	r3, r3
    9b58:	461a      	mov	r2, r3
    9b5a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9b5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b62:	781b      	ldrb	r3, [r3, #0]
    9b64:	1ad3      	subs	r3, r2, r3
    9b66:	33ff      	adds	r3, #255	; 0xff
    9b68:	2b18      	cmp	r3, #24
    9b6a:	bfd4      	ite	le
    9b6c:	2300      	movle	r3, #0
    9b6e:	2301      	movgt	r3, #1
    9b70:	b2db      	uxtb	r3, r3
    9b72:	e011      	b.n	9b98 <send_desired+0x94>
    9b74:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    9b78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b7c:	781b      	ldrb	r3, [r3, #0]
    9b7e:	b2db      	uxtb	r3, r3
    9b80:	461a      	mov	r2, r3
    9b82:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9b86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b8a:	781b      	ldrb	r3, [r3, #0]
    9b8c:	1ad3      	subs	r3, r2, r3
    9b8e:	2b18      	cmp	r3, #24
    9b90:	bfd4      	ite	le
    9b92:	2300      	movle	r3, #0
    9b94:	2301      	movgt	r3, #1
    9b96:	b2db      	uxtb	r3, r3
    9b98:	2b00      	cmp	r3, #0
    9b9a:	f000 86d0 	beq.w	a93e <send_desired+0xe3a>
    9b9e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9ba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ba6:	781b      	ldrb	r3, [r3, #0]
    9ba8:	461a      	mov	r2, r3
    9baa:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    9bae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bb2:	2105      	movs	r1, #5
    9bb4:	5499      	strb	r1, [r3, r2]
    9bb6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9bba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bbe:	781b      	ldrb	r3, [r3, #0]
    9bc0:	3301      	adds	r3, #1
    9bc2:	b2da      	uxtb	r2, r3
    9bc4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9bc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bcc:	701a      	strb	r2, [r3, #0]
    9bce:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9bd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bd6:	781b      	ldrb	r3, [r3, #0]
    9bd8:	2bff      	cmp	r3, #255	; 0xff
    9bda:	d105      	bne.n	9be8 <send_desired+0xe4>
    9bdc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9be0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9be4:	2200      	movs	r2, #0
    9be6:	701a      	strb	r2, [r3, #0]
    9be8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9bec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bf0:	781b      	ldrb	r3, [r3, #0]
    9bf2:	461a      	mov	r2, r3
    9bf4:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    9bf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bfc:	2112      	movs	r1, #18
    9bfe:	5499      	strb	r1, [r3, r2]
    9c00:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9c04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c08:	781b      	ldrb	r3, [r3, #0]
    9c0a:	3301      	adds	r3, #1
    9c0c:	b2da      	uxtb	r2, r3
    9c0e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9c12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c16:	701a      	strb	r2, [r3, #0]
    9c18:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9c1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c20:	781b      	ldrb	r3, [r3, #0]
    9c22:	2bff      	cmp	r3, #255	; 0xff
    9c24:	d105      	bne.n	9c32 <send_desired+0x12e>
    9c26:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9c2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c2e:	2200      	movs	r2, #0
    9c30:	701a      	strb	r2, [r3, #0]
    9c32:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9c36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c3a:	2212      	movs	r2, #18
    9c3c:	701a      	strb	r2, [r3, #0]
    9c3e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9c42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c46:	2212      	movs	r2, #18
    9c48:	701a      	strb	r2, [r3, #0]
    9c4a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9c4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c52:	781b      	ldrb	r3, [r3, #0]
    9c54:	461a      	mov	r2, r3
    9c56:	f24c 2324 	movw	r3, #49700	; 0xc224
    9c5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c5e:	7819      	ldrb	r1, [r3, #0]
    9c60:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    9c64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c68:	5499      	strb	r1, [r3, r2]
    9c6a:	f24c 2324 	movw	r3, #49700	; 0xc224
    9c6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c72:	781a      	ldrb	r2, [r3, #0]
    9c74:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9c78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c7c:	781b      	ldrb	r3, [r3, #0]
    9c7e:	4413      	add	r3, r2
    9c80:	b2da      	uxtb	r2, r3
    9c82:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9c86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c8a:	701a      	strb	r2, [r3, #0]
    9c8c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9c90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c94:	781a      	ldrb	r2, [r3, #0]
    9c96:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9c9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c9e:	781b      	ldrb	r3, [r3, #0]
    9ca0:	4413      	add	r3, r2
    9ca2:	b2da      	uxtb	r2, r3
    9ca4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9ca8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cac:	701a      	strb	r2, [r3, #0]
    9cae:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9cb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cb6:	781b      	ldrb	r3, [r3, #0]
    9cb8:	3301      	adds	r3, #1
    9cba:	b2da      	uxtb	r2, r3
    9cbc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9cc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cc4:	701a      	strb	r2, [r3, #0]
    9cc6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9cca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cce:	781b      	ldrb	r3, [r3, #0]
    9cd0:	2bff      	cmp	r3, #255	; 0xff
    9cd2:	d105      	bne.n	9ce0 <send_desired+0x1dc>
    9cd4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9cd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cdc:	2200      	movs	r2, #0
    9cde:	701a      	strb	r2, [r3, #0]
    9ce0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9ce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ce8:	781b      	ldrb	r3, [r3, #0]
    9cea:	461a      	mov	r2, r3
    9cec:	f24c 2324 	movw	r3, #49700	; 0xc224
    9cf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cf4:	7859      	ldrb	r1, [r3, #1]
    9cf6:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    9cfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cfe:	5499      	strb	r1, [r3, r2]
    9d00:	4bd1      	ldr	r3, [pc, #836]	; (a048 <send_desired+0x544>)
    9d02:	781a      	ldrb	r2, [r3, #0]
    9d04:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9d08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d0c:	781b      	ldrb	r3, [r3, #0]
    9d0e:	4413      	add	r3, r2
    9d10:	b2da      	uxtb	r2, r3
    9d12:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9d16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d1a:	701a      	strb	r2, [r3, #0]
    9d1c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9d20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d24:	781a      	ldrb	r2, [r3, #0]
    9d26:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9d2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d2e:	781b      	ldrb	r3, [r3, #0]
    9d30:	4413      	add	r3, r2
    9d32:	b2da      	uxtb	r2, r3
    9d34:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9d38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d3c:	701a      	strb	r2, [r3, #0]
    9d3e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9d42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d46:	781b      	ldrb	r3, [r3, #0]
    9d48:	3301      	adds	r3, #1
    9d4a:	b2da      	uxtb	r2, r3
    9d4c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9d50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d54:	701a      	strb	r2, [r3, #0]
    9d56:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9d5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d5e:	781b      	ldrb	r3, [r3, #0]
    9d60:	2bff      	cmp	r3, #255	; 0xff
    9d62:	d105      	bne.n	9d70 <send_desired+0x26c>
    9d64:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9d68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d6c:	2200      	movs	r2, #0
    9d6e:	701a      	strb	r2, [r3, #0]
    9d70:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9d74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d78:	781b      	ldrb	r3, [r3, #0]
    9d7a:	461a      	mov	r2, r3
    9d7c:	f24c 2324 	movw	r3, #49700	; 0xc224
    9d80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d84:	7899      	ldrb	r1, [r3, #2]
    9d86:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    9d8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d8e:	5499      	strb	r1, [r3, r2]
    9d90:	4bae      	ldr	r3, [pc, #696]	; (a04c <send_desired+0x548>)
    9d92:	781a      	ldrb	r2, [r3, #0]
    9d94:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9d98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d9c:	781b      	ldrb	r3, [r3, #0]
    9d9e:	4413      	add	r3, r2
    9da0:	b2da      	uxtb	r2, r3
    9da2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9da6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9daa:	701a      	strb	r2, [r3, #0]
    9dac:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9db0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9db4:	781a      	ldrb	r2, [r3, #0]
    9db6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9dba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dbe:	781b      	ldrb	r3, [r3, #0]
    9dc0:	4413      	add	r3, r2
    9dc2:	b2da      	uxtb	r2, r3
    9dc4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9dc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dcc:	701a      	strb	r2, [r3, #0]
    9dce:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9dd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dd6:	781b      	ldrb	r3, [r3, #0]
    9dd8:	3301      	adds	r3, #1
    9dda:	b2da      	uxtb	r2, r3
    9ddc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9de0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9de4:	701a      	strb	r2, [r3, #0]
    9de6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9dea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dee:	781b      	ldrb	r3, [r3, #0]
    9df0:	2bff      	cmp	r3, #255	; 0xff
    9df2:	d105      	bne.n	9e00 <send_desired+0x2fc>
    9df4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9df8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dfc:	2200      	movs	r2, #0
    9dfe:	701a      	strb	r2, [r3, #0]
    9e00:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9e04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e08:	781b      	ldrb	r3, [r3, #0]
    9e0a:	461a      	mov	r2, r3
    9e0c:	f24c 2324 	movw	r3, #49700	; 0xc224
    9e10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e14:	78d9      	ldrb	r1, [r3, #3]
    9e16:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    9e1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e1e:	5499      	strb	r1, [r3, r2]
    9e20:	4b8b      	ldr	r3, [pc, #556]	; (a050 <send_desired+0x54c>)
    9e22:	781a      	ldrb	r2, [r3, #0]
    9e24:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9e28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e2c:	781b      	ldrb	r3, [r3, #0]
    9e2e:	4413      	add	r3, r2
    9e30:	b2da      	uxtb	r2, r3
    9e32:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9e36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e3a:	701a      	strb	r2, [r3, #0]
    9e3c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9e40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e44:	781a      	ldrb	r2, [r3, #0]
    9e46:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9e4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e4e:	781b      	ldrb	r3, [r3, #0]
    9e50:	4413      	add	r3, r2
    9e52:	b2da      	uxtb	r2, r3
    9e54:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9e58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e5c:	701a      	strb	r2, [r3, #0]
    9e5e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9e62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e66:	781b      	ldrb	r3, [r3, #0]
    9e68:	3301      	adds	r3, #1
    9e6a:	b2da      	uxtb	r2, r3
    9e6c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9e70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e74:	701a      	strb	r2, [r3, #0]
    9e76:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9e7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e7e:	781b      	ldrb	r3, [r3, #0]
    9e80:	2bff      	cmp	r3, #255	; 0xff
    9e82:	d105      	bne.n	9e90 <send_desired+0x38c>
    9e84:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9e88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e8c:	2200      	movs	r2, #0
    9e8e:	701a      	strb	r2, [r3, #0]
    9e90:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9e94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e98:	781b      	ldrb	r3, [r3, #0]
    9e9a:	461a      	mov	r2, r3
    9e9c:	f24c 2328 	movw	r3, #49704	; 0xc228
    9ea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ea4:	7819      	ldrb	r1, [r3, #0]
    9ea6:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    9eaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eae:	5499      	strb	r1, [r3, r2]
    9eb0:	f24c 2328 	movw	r3, #49704	; 0xc228
    9eb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eb8:	781a      	ldrb	r2, [r3, #0]
    9eba:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9ebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ec2:	781b      	ldrb	r3, [r3, #0]
    9ec4:	4413      	add	r3, r2
    9ec6:	b2da      	uxtb	r2, r3
    9ec8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9ecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ed0:	701a      	strb	r2, [r3, #0]
    9ed2:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9ed6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eda:	781a      	ldrb	r2, [r3, #0]
    9edc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9ee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ee4:	781b      	ldrb	r3, [r3, #0]
    9ee6:	4413      	add	r3, r2
    9ee8:	b2da      	uxtb	r2, r3
    9eea:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9eee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ef2:	701a      	strb	r2, [r3, #0]
    9ef4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9ef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9efc:	781b      	ldrb	r3, [r3, #0]
    9efe:	3301      	adds	r3, #1
    9f00:	b2da      	uxtb	r2, r3
    9f02:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9f06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f0a:	701a      	strb	r2, [r3, #0]
    9f0c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9f10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f14:	781b      	ldrb	r3, [r3, #0]
    9f16:	2bff      	cmp	r3, #255	; 0xff
    9f18:	d105      	bne.n	9f26 <send_desired+0x422>
    9f1a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9f1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f22:	2200      	movs	r2, #0
    9f24:	701a      	strb	r2, [r3, #0]
    9f26:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9f2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f2e:	781b      	ldrb	r3, [r3, #0]
    9f30:	461a      	mov	r2, r3
    9f32:	f24c 2328 	movw	r3, #49704	; 0xc228
    9f36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f3a:	7859      	ldrb	r1, [r3, #1]
    9f3c:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    9f40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f44:	5499      	strb	r1, [r3, r2]
    9f46:	4b43      	ldr	r3, [pc, #268]	; (a054 <send_desired+0x550>)
    9f48:	781a      	ldrb	r2, [r3, #0]
    9f4a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9f4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f52:	781b      	ldrb	r3, [r3, #0]
    9f54:	4413      	add	r3, r2
    9f56:	b2da      	uxtb	r2, r3
    9f58:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9f5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f60:	701a      	strb	r2, [r3, #0]
    9f62:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9f66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f6a:	781a      	ldrb	r2, [r3, #0]
    9f6c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9f70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f74:	781b      	ldrb	r3, [r3, #0]
    9f76:	4413      	add	r3, r2
    9f78:	b2da      	uxtb	r2, r3
    9f7a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9f7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f82:	701a      	strb	r2, [r3, #0]
    9f84:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9f88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f8c:	781b      	ldrb	r3, [r3, #0]
    9f8e:	3301      	adds	r3, #1
    9f90:	b2da      	uxtb	r2, r3
    9f92:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9f96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f9a:	701a      	strb	r2, [r3, #0]
    9f9c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9fa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fa4:	781b      	ldrb	r3, [r3, #0]
    9fa6:	2bff      	cmp	r3, #255	; 0xff
    9fa8:	d105      	bne.n	9fb6 <send_desired+0x4b2>
    9faa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9fae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fb2:	2200      	movs	r2, #0
    9fb4:	701a      	strb	r2, [r3, #0]
    9fb6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    9fba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fbe:	781b      	ldrb	r3, [r3, #0]
    9fc0:	461a      	mov	r2, r3
    9fc2:	f24c 2328 	movw	r3, #49704	; 0xc228
    9fc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fca:	7899      	ldrb	r1, [r3, #2]
    9fcc:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    9fd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fd4:	5499      	strb	r1, [r3, r2]
    9fd6:	4b20      	ldr	r3, [pc, #128]	; (a058 <send_desired+0x554>)
    9fd8:	781a      	ldrb	r2, [r3, #0]
    9fda:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9fde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fe2:	781b      	ldrb	r3, [r3, #0]
    9fe4:	4413      	add	r3, r2
    9fe6:	b2da      	uxtb	r2, r3
    9fe8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    9fec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ff0:	701a      	strb	r2, [r3, #0]
    9ff2:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    9ff6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ffa:	781a      	ldrb	r2, [r3, #0]
    9ffc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a000:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a004:	781b      	ldrb	r3, [r3, #0]
    a006:	4413      	add	r3, r2
    a008:	b2da      	uxtb	r2, r3
    a00a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a00e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a012:	701a      	strb	r2, [r3, #0]
    a014:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a018:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a01c:	781b      	ldrb	r3, [r3, #0]
    a01e:	3301      	adds	r3, #1
    a020:	b2da      	uxtb	r2, r3
    a022:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a026:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a02a:	701a      	strb	r2, [r3, #0]
    a02c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a030:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a034:	781b      	ldrb	r3, [r3, #0]
    a036:	2bff      	cmp	r3, #255	; 0xff
    a038:	d110      	bne.n	a05c <send_desired+0x558>
    a03a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a03e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a042:	2200      	movs	r2, #0
    a044:	701a      	strb	r2, [r3, #0]
    a046:	e009      	b.n	a05c <send_desired+0x558>
    a048:	2004c225 	.word	0x2004c225
    a04c:	2004c226 	.word	0x2004c226
    a050:	2004c227 	.word	0x2004c227
    a054:	2004c229 	.word	0x2004c229
    a058:	2004c22a 	.word	0x2004c22a
    a05c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a060:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a064:	781b      	ldrb	r3, [r3, #0]
    a066:	461a      	mov	r2, r3
    a068:	f24c 2328 	movw	r3, #49704	; 0xc228
    a06c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a070:	78d9      	ldrb	r1, [r3, #3]
    a072:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    a076:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a07a:	5499      	strb	r1, [r3, r2]
    a07c:	4bd3      	ldr	r3, [pc, #844]	; (a3cc <send_desired+0x8c8>)
    a07e:	781a      	ldrb	r2, [r3, #0]
    a080:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a084:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a088:	781b      	ldrb	r3, [r3, #0]
    a08a:	4413      	add	r3, r2
    a08c:	b2da      	uxtb	r2, r3
    a08e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a096:	701a      	strb	r2, [r3, #0]
    a098:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a09c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0a0:	781a      	ldrb	r2, [r3, #0]
    a0a2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a0a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0aa:	781b      	ldrb	r3, [r3, #0]
    a0ac:	4413      	add	r3, r2
    a0ae:	b2da      	uxtb	r2, r3
    a0b0:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a0b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0b8:	701a      	strb	r2, [r3, #0]
    a0ba:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a0be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0c2:	781b      	ldrb	r3, [r3, #0]
    a0c4:	3301      	adds	r3, #1
    a0c6:	b2da      	uxtb	r2, r3
    a0c8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a0cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0d0:	701a      	strb	r2, [r3, #0]
    a0d2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a0d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0da:	781b      	ldrb	r3, [r3, #0]
    a0dc:	2bff      	cmp	r3, #255	; 0xff
    a0de:	d105      	bne.n	a0ec <send_desired+0x5e8>
    a0e0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a0e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0e8:	2200      	movs	r2, #0
    a0ea:	701a      	strb	r2, [r3, #0]
    a0ec:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a0f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0f4:	781b      	ldrb	r3, [r3, #0]
    a0f6:	461a      	mov	r2, r3
    a0f8:	f24c 2370 	movw	r3, #49776	; 0xc270
    a0fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a100:	7819      	ldrb	r1, [r3, #0]
    a102:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    a106:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a10a:	5499      	strb	r1, [r3, r2]
    a10c:	f24c 2370 	movw	r3, #49776	; 0xc270
    a110:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a114:	781a      	ldrb	r2, [r3, #0]
    a116:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a11a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a11e:	781b      	ldrb	r3, [r3, #0]
    a120:	4413      	add	r3, r2
    a122:	b2da      	uxtb	r2, r3
    a124:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a128:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a12c:	701a      	strb	r2, [r3, #0]
    a12e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a132:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a136:	781a      	ldrb	r2, [r3, #0]
    a138:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a13c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a140:	781b      	ldrb	r3, [r3, #0]
    a142:	4413      	add	r3, r2
    a144:	b2da      	uxtb	r2, r3
    a146:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a14a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a14e:	701a      	strb	r2, [r3, #0]
    a150:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a154:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a158:	781b      	ldrb	r3, [r3, #0]
    a15a:	3301      	adds	r3, #1
    a15c:	b2da      	uxtb	r2, r3
    a15e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a162:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a166:	701a      	strb	r2, [r3, #0]
    a168:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a16c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a170:	781b      	ldrb	r3, [r3, #0]
    a172:	2bff      	cmp	r3, #255	; 0xff
    a174:	d105      	bne.n	a182 <send_desired+0x67e>
    a176:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a17a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a17e:	2200      	movs	r2, #0
    a180:	701a      	strb	r2, [r3, #0]
    a182:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a18a:	781b      	ldrb	r3, [r3, #0]
    a18c:	461a      	mov	r2, r3
    a18e:	f24c 2370 	movw	r3, #49776	; 0xc270
    a192:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a196:	7859      	ldrb	r1, [r3, #1]
    a198:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    a19c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1a0:	5499      	strb	r1, [r3, r2]
    a1a2:	4b8b      	ldr	r3, [pc, #556]	; (a3d0 <send_desired+0x8cc>)
    a1a4:	781a      	ldrb	r2, [r3, #0]
    a1a6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a1aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1ae:	781b      	ldrb	r3, [r3, #0]
    a1b0:	4413      	add	r3, r2
    a1b2:	b2da      	uxtb	r2, r3
    a1b4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a1b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1bc:	701a      	strb	r2, [r3, #0]
    a1be:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a1c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1c6:	781a      	ldrb	r2, [r3, #0]
    a1c8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a1cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1d0:	781b      	ldrb	r3, [r3, #0]
    a1d2:	4413      	add	r3, r2
    a1d4:	b2da      	uxtb	r2, r3
    a1d6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a1da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1de:	701a      	strb	r2, [r3, #0]
    a1e0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a1e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1e8:	781b      	ldrb	r3, [r3, #0]
    a1ea:	3301      	adds	r3, #1
    a1ec:	b2da      	uxtb	r2, r3
    a1ee:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a1f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1f6:	701a      	strb	r2, [r3, #0]
    a1f8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a1fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a200:	781b      	ldrb	r3, [r3, #0]
    a202:	2bff      	cmp	r3, #255	; 0xff
    a204:	d105      	bne.n	a212 <send_desired+0x70e>
    a206:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a20a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a20e:	2200      	movs	r2, #0
    a210:	701a      	strb	r2, [r3, #0]
    a212:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a216:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a21a:	781b      	ldrb	r3, [r3, #0]
    a21c:	461a      	mov	r2, r3
    a21e:	f24c 2370 	movw	r3, #49776	; 0xc270
    a222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a226:	7899      	ldrb	r1, [r3, #2]
    a228:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    a22c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a230:	5499      	strb	r1, [r3, r2]
    a232:	4b68      	ldr	r3, [pc, #416]	; (a3d4 <send_desired+0x8d0>)
    a234:	781a      	ldrb	r2, [r3, #0]
    a236:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a23a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a23e:	781b      	ldrb	r3, [r3, #0]
    a240:	4413      	add	r3, r2
    a242:	b2da      	uxtb	r2, r3
    a244:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a248:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a24c:	701a      	strb	r2, [r3, #0]
    a24e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a252:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a256:	781a      	ldrb	r2, [r3, #0]
    a258:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a25c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a260:	781b      	ldrb	r3, [r3, #0]
    a262:	4413      	add	r3, r2
    a264:	b2da      	uxtb	r2, r3
    a266:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a26a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a26e:	701a      	strb	r2, [r3, #0]
    a270:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a274:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a278:	781b      	ldrb	r3, [r3, #0]
    a27a:	3301      	adds	r3, #1
    a27c:	b2da      	uxtb	r2, r3
    a27e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a282:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a286:	701a      	strb	r2, [r3, #0]
    a288:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a28c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a290:	781b      	ldrb	r3, [r3, #0]
    a292:	2bff      	cmp	r3, #255	; 0xff
    a294:	d105      	bne.n	a2a2 <send_desired+0x79e>
    a296:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a29a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a29e:	2200      	movs	r2, #0
    a2a0:	701a      	strb	r2, [r3, #0]
    a2a2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a2a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2aa:	781b      	ldrb	r3, [r3, #0]
    a2ac:	461a      	mov	r2, r3
    a2ae:	f24c 2370 	movw	r3, #49776	; 0xc270
    a2b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2b6:	78d9      	ldrb	r1, [r3, #3]
    a2b8:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    a2bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2c0:	5499      	strb	r1, [r3, r2]
    a2c2:	4b45      	ldr	r3, [pc, #276]	; (a3d8 <send_desired+0x8d4>)
    a2c4:	781a      	ldrb	r2, [r3, #0]
    a2c6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a2ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2ce:	781b      	ldrb	r3, [r3, #0]
    a2d0:	4413      	add	r3, r2
    a2d2:	b2da      	uxtb	r2, r3
    a2d4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a2d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2dc:	701a      	strb	r2, [r3, #0]
    a2de:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a2e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2e6:	781a      	ldrb	r2, [r3, #0]
    a2e8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a2ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2f0:	781b      	ldrb	r3, [r3, #0]
    a2f2:	4413      	add	r3, r2
    a2f4:	b2da      	uxtb	r2, r3
    a2f6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a2fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2fe:	701a      	strb	r2, [r3, #0]
    a300:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a304:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a308:	781b      	ldrb	r3, [r3, #0]
    a30a:	3301      	adds	r3, #1
    a30c:	b2da      	uxtb	r2, r3
    a30e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a312:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a316:	701a      	strb	r2, [r3, #0]
    a318:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a31c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a320:	781b      	ldrb	r3, [r3, #0]
    a322:	2bff      	cmp	r3, #255	; 0xff
    a324:	d105      	bne.n	a332 <send_desired+0x82e>
    a326:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a32a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a32e:	2200      	movs	r2, #0
    a330:	701a      	strb	r2, [r3, #0]
    a332:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a336:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a33a:	781b      	ldrb	r3, [r3, #0]
    a33c:	461a      	mov	r2, r3
    a33e:	f24c 2374 	movw	r3, #49780	; 0xc274
    a342:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a346:	7819      	ldrb	r1, [r3, #0]
    a348:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    a34c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a350:	5499      	strb	r1, [r3, r2]
    a352:	f24c 2374 	movw	r3, #49780	; 0xc274
    a356:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a35a:	781a      	ldrb	r2, [r3, #0]
    a35c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a360:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a364:	781b      	ldrb	r3, [r3, #0]
    a366:	4413      	add	r3, r2
    a368:	b2da      	uxtb	r2, r3
    a36a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a36e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a372:	701a      	strb	r2, [r3, #0]
    a374:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a378:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a37c:	781a      	ldrb	r2, [r3, #0]
    a37e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a382:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a386:	781b      	ldrb	r3, [r3, #0]
    a388:	4413      	add	r3, r2
    a38a:	b2da      	uxtb	r2, r3
    a38c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a390:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a394:	701a      	strb	r2, [r3, #0]
    a396:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a39a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a39e:	781b      	ldrb	r3, [r3, #0]
    a3a0:	3301      	adds	r3, #1
    a3a2:	b2da      	uxtb	r2, r3
    a3a4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a3a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3ac:	701a      	strb	r2, [r3, #0]
    a3ae:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a3b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3b6:	781b      	ldrb	r3, [r3, #0]
    a3b8:	2bff      	cmp	r3, #255	; 0xff
    a3ba:	d10f      	bne.n	a3dc <send_desired+0x8d8>
    a3bc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a3c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3c4:	2200      	movs	r2, #0
    a3c6:	701a      	strb	r2, [r3, #0]
    a3c8:	e008      	b.n	a3dc <send_desired+0x8d8>
    a3ca:	bf00      	nop
    a3cc:	2004c22b 	.word	0x2004c22b
    a3d0:	2004c271 	.word	0x2004c271
    a3d4:	2004c272 	.word	0x2004c272
    a3d8:	2004c273 	.word	0x2004c273
    a3dc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a3e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3e4:	781b      	ldrb	r3, [r3, #0]
    a3e6:	461a      	mov	r2, r3
    a3e8:	f24c 2374 	movw	r3, #49780	; 0xc274
    a3ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3f0:	7859      	ldrb	r1, [r3, #1]
    a3f2:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    a3f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3fa:	5499      	strb	r1, [r3, r2]
    a3fc:	4bd1      	ldr	r3, [pc, #836]	; (a744 <send_desired+0xc40>)
    a3fe:	781a      	ldrb	r2, [r3, #0]
    a400:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a404:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a408:	781b      	ldrb	r3, [r3, #0]
    a40a:	4413      	add	r3, r2
    a40c:	b2da      	uxtb	r2, r3
    a40e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a412:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a416:	701a      	strb	r2, [r3, #0]
    a418:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a41c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a420:	781a      	ldrb	r2, [r3, #0]
    a422:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a426:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a42a:	781b      	ldrb	r3, [r3, #0]
    a42c:	4413      	add	r3, r2
    a42e:	b2da      	uxtb	r2, r3
    a430:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a434:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a438:	701a      	strb	r2, [r3, #0]
    a43a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a43e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a442:	781b      	ldrb	r3, [r3, #0]
    a444:	3301      	adds	r3, #1
    a446:	b2da      	uxtb	r2, r3
    a448:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a44c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a450:	701a      	strb	r2, [r3, #0]
    a452:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a456:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a45a:	781b      	ldrb	r3, [r3, #0]
    a45c:	2bff      	cmp	r3, #255	; 0xff
    a45e:	d105      	bne.n	a46c <send_desired+0x968>
    a460:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a464:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a468:	2200      	movs	r2, #0
    a46a:	701a      	strb	r2, [r3, #0]
    a46c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a470:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a474:	781b      	ldrb	r3, [r3, #0]
    a476:	461a      	mov	r2, r3
    a478:	f24c 2374 	movw	r3, #49780	; 0xc274
    a47c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a480:	7899      	ldrb	r1, [r3, #2]
    a482:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    a486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a48a:	5499      	strb	r1, [r3, r2]
    a48c:	4bae      	ldr	r3, [pc, #696]	; (a748 <send_desired+0xc44>)
    a48e:	781a      	ldrb	r2, [r3, #0]
    a490:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a494:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a498:	781b      	ldrb	r3, [r3, #0]
    a49a:	4413      	add	r3, r2
    a49c:	b2da      	uxtb	r2, r3
    a49e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a4a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4a6:	701a      	strb	r2, [r3, #0]
    a4a8:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a4ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4b0:	781a      	ldrb	r2, [r3, #0]
    a4b2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a4b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4ba:	781b      	ldrb	r3, [r3, #0]
    a4bc:	4413      	add	r3, r2
    a4be:	b2da      	uxtb	r2, r3
    a4c0:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a4c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4c8:	701a      	strb	r2, [r3, #0]
    a4ca:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a4ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4d2:	781b      	ldrb	r3, [r3, #0]
    a4d4:	3301      	adds	r3, #1
    a4d6:	b2da      	uxtb	r2, r3
    a4d8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a4dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4e0:	701a      	strb	r2, [r3, #0]
    a4e2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a4e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4ea:	781b      	ldrb	r3, [r3, #0]
    a4ec:	2bff      	cmp	r3, #255	; 0xff
    a4ee:	d105      	bne.n	a4fc <send_desired+0x9f8>
    a4f0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a4f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4f8:	2200      	movs	r2, #0
    a4fa:	701a      	strb	r2, [r3, #0]
    a4fc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a500:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a504:	781b      	ldrb	r3, [r3, #0]
    a506:	461a      	mov	r2, r3
    a508:	f24c 2374 	movw	r3, #49780	; 0xc274
    a50c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a510:	78d9      	ldrb	r1, [r3, #3]
    a512:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    a516:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a51a:	5499      	strb	r1, [r3, r2]
    a51c:	4b8b      	ldr	r3, [pc, #556]	; (a74c <send_desired+0xc48>)
    a51e:	781a      	ldrb	r2, [r3, #0]
    a520:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a524:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a528:	781b      	ldrb	r3, [r3, #0]
    a52a:	4413      	add	r3, r2
    a52c:	b2da      	uxtb	r2, r3
    a52e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a532:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a536:	701a      	strb	r2, [r3, #0]
    a538:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a53c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a540:	781a      	ldrb	r2, [r3, #0]
    a542:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a546:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a54a:	781b      	ldrb	r3, [r3, #0]
    a54c:	4413      	add	r3, r2
    a54e:	b2da      	uxtb	r2, r3
    a550:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a554:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a558:	701a      	strb	r2, [r3, #0]
    a55a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a55e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a562:	781b      	ldrb	r3, [r3, #0]
    a564:	3301      	adds	r3, #1
    a566:	b2da      	uxtb	r2, r3
    a568:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a56c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a570:	701a      	strb	r2, [r3, #0]
    a572:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a576:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a57a:	781b      	ldrb	r3, [r3, #0]
    a57c:	2bff      	cmp	r3, #255	; 0xff
    a57e:	d105      	bne.n	a58c <send_desired+0xa88>
    a580:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a588:	2200      	movs	r2, #0
    a58a:	701a      	strb	r2, [r3, #0]
    a58c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a590:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a594:	781b      	ldrb	r3, [r3, #0]
    a596:	461a      	mov	r2, r3
    a598:	f240 4324 	movw	r3, #1060	; 0x424
    a59c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5a0:	7819      	ldrb	r1, [r3, #0]
    a5a2:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    a5a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5aa:	5499      	strb	r1, [r3, r2]
    a5ac:	f240 4324 	movw	r3, #1060	; 0x424
    a5b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5b4:	781a      	ldrb	r2, [r3, #0]
    a5b6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a5ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5be:	781b      	ldrb	r3, [r3, #0]
    a5c0:	4413      	add	r3, r2
    a5c2:	b2da      	uxtb	r2, r3
    a5c4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a5c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5cc:	701a      	strb	r2, [r3, #0]
    a5ce:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a5d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5d6:	781a      	ldrb	r2, [r3, #0]
    a5d8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a5dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5e0:	781b      	ldrb	r3, [r3, #0]
    a5e2:	4413      	add	r3, r2
    a5e4:	b2da      	uxtb	r2, r3
    a5e6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a5ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5ee:	701a      	strb	r2, [r3, #0]
    a5f0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a5f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5f8:	781b      	ldrb	r3, [r3, #0]
    a5fa:	3301      	adds	r3, #1
    a5fc:	b2da      	uxtb	r2, r3
    a5fe:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a602:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a606:	701a      	strb	r2, [r3, #0]
    a608:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a60c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a610:	781b      	ldrb	r3, [r3, #0]
    a612:	2bff      	cmp	r3, #255	; 0xff
    a614:	d105      	bne.n	a622 <send_desired+0xb1e>
    a616:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a61a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a61e:	2200      	movs	r2, #0
    a620:	701a      	strb	r2, [r3, #0]
    a622:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a626:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a62a:	781b      	ldrb	r3, [r3, #0]
    a62c:	461a      	mov	r2, r3
    a62e:	f240 4324 	movw	r3, #1060	; 0x424
    a632:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a636:	7859      	ldrb	r1, [r3, #1]
    a638:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    a63c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a640:	5499      	strb	r1, [r3, r2]
    a642:	4b43      	ldr	r3, [pc, #268]	; (a750 <send_desired+0xc4c>)
    a644:	781a      	ldrb	r2, [r3, #0]
    a646:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a64a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a64e:	781b      	ldrb	r3, [r3, #0]
    a650:	4413      	add	r3, r2
    a652:	b2da      	uxtb	r2, r3
    a654:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a658:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a65c:	701a      	strb	r2, [r3, #0]
    a65e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a662:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a666:	781a      	ldrb	r2, [r3, #0]
    a668:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a66c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a670:	781b      	ldrb	r3, [r3, #0]
    a672:	4413      	add	r3, r2
    a674:	b2da      	uxtb	r2, r3
    a676:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a67a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a67e:	701a      	strb	r2, [r3, #0]
    a680:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a684:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a688:	781b      	ldrb	r3, [r3, #0]
    a68a:	3301      	adds	r3, #1
    a68c:	b2da      	uxtb	r2, r3
    a68e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a696:	701a      	strb	r2, [r3, #0]
    a698:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a69c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6a0:	781b      	ldrb	r3, [r3, #0]
    a6a2:	2bff      	cmp	r3, #255	; 0xff
    a6a4:	d105      	bne.n	a6b2 <send_desired+0xbae>
    a6a6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a6aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6ae:	2200      	movs	r2, #0
    a6b0:	701a      	strb	r2, [r3, #0]
    a6b2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a6b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6ba:	781b      	ldrb	r3, [r3, #0]
    a6bc:	461a      	mov	r2, r3
    a6be:	f240 4324 	movw	r3, #1060	; 0x424
    a6c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6c6:	7899      	ldrb	r1, [r3, #2]
    a6c8:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    a6cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6d0:	5499      	strb	r1, [r3, r2]
    a6d2:	4b20      	ldr	r3, [pc, #128]	; (a754 <send_desired+0xc50>)
    a6d4:	781a      	ldrb	r2, [r3, #0]
    a6d6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a6da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6de:	781b      	ldrb	r3, [r3, #0]
    a6e0:	4413      	add	r3, r2
    a6e2:	b2da      	uxtb	r2, r3
    a6e4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a6e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6ec:	701a      	strb	r2, [r3, #0]
    a6ee:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a6f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6f6:	781a      	ldrb	r2, [r3, #0]
    a6f8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a6fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a700:	781b      	ldrb	r3, [r3, #0]
    a702:	4413      	add	r3, r2
    a704:	b2da      	uxtb	r2, r3
    a706:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a70a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a70e:	701a      	strb	r2, [r3, #0]
    a710:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a714:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a718:	781b      	ldrb	r3, [r3, #0]
    a71a:	3301      	adds	r3, #1
    a71c:	b2da      	uxtb	r2, r3
    a71e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a722:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a726:	701a      	strb	r2, [r3, #0]
    a728:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a72c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a730:	781b      	ldrb	r3, [r3, #0]
    a732:	2bff      	cmp	r3, #255	; 0xff
    a734:	d110      	bne.n	a758 <send_desired+0xc54>
    a736:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a73a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a73e:	2200      	movs	r2, #0
    a740:	701a      	strb	r2, [r3, #0]
    a742:	e009      	b.n	a758 <send_desired+0xc54>
    a744:	2004c275 	.word	0x2004c275
    a748:	2004c276 	.word	0x2004c276
    a74c:	2004c277 	.word	0x2004c277
    a750:	20000425 	.word	0x20000425
    a754:	20000426 	.word	0x20000426
    a758:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a75c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a760:	781b      	ldrb	r3, [r3, #0]
    a762:	461a      	mov	r2, r3
    a764:	f240 4324 	movw	r3, #1060	; 0x424
    a768:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a76c:	78d9      	ldrb	r1, [r3, #3]
    a76e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    a772:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a776:	5499      	strb	r1, [r3, r2]
    a778:	4b79      	ldr	r3, [pc, #484]	; (a960 <send_desired+0xe5c>)
    a77a:	781a      	ldrb	r2, [r3, #0]
    a77c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a780:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a784:	781b      	ldrb	r3, [r3, #0]
    a786:	4413      	add	r3, r2
    a788:	b2da      	uxtb	r2, r3
    a78a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a78e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a792:	701a      	strb	r2, [r3, #0]
    a794:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a798:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a79c:	781a      	ldrb	r2, [r3, #0]
    a79e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a7a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7a6:	781b      	ldrb	r3, [r3, #0]
    a7a8:	4413      	add	r3, r2
    a7aa:	b2da      	uxtb	r2, r3
    a7ac:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a7b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7b4:	701a      	strb	r2, [r3, #0]
    a7b6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a7ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7be:	781b      	ldrb	r3, [r3, #0]
    a7c0:	3301      	adds	r3, #1
    a7c2:	b2da      	uxtb	r2, r3
    a7c4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a7c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7cc:	701a      	strb	r2, [r3, #0]
    a7ce:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a7d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7d6:	781b      	ldrb	r3, [r3, #0]
    a7d8:	2bff      	cmp	r3, #255	; 0xff
    a7da:	d105      	bne.n	a7e8 <send_desired+0xce4>
    a7dc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a7e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7e4:	2200      	movs	r2, #0
    a7e6:	701a      	strb	r2, [r3, #0]
    a7e8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a7ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7f0:	781b      	ldrb	r3, [r3, #0]
    a7f2:	461a      	mov	r2, r3
    a7f4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    a7f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7fc:	7819      	ldrb	r1, [r3, #0]
    a7fe:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    a802:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a806:	5499      	strb	r1, [r3, r2]
    a808:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a80c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a810:	781b      	ldrb	r3, [r3, #0]
    a812:	3301      	adds	r3, #1
    a814:	b2da      	uxtb	r2, r3
    a816:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a81a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a81e:	701a      	strb	r2, [r3, #0]
    a820:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a824:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a828:	781b      	ldrb	r3, [r3, #0]
    a82a:	2bff      	cmp	r3, #255	; 0xff
    a82c:	d105      	bne.n	a83a <send_desired+0xd36>
    a82e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a832:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a836:	2200      	movs	r2, #0
    a838:	701a      	strb	r2, [r3, #0]
    a83a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a83e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a842:	781b      	ldrb	r3, [r3, #0]
    a844:	461a      	mov	r2, r3
    a846:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    a84a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a84e:	7819      	ldrb	r1, [r3, #0]
    a850:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    a854:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a858:	5499      	strb	r1, [r3, r2]
    a85a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a85e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a862:	781b      	ldrb	r3, [r3, #0]
    a864:	3301      	adds	r3, #1
    a866:	b2da      	uxtb	r2, r3
    a868:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a86c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a870:	701a      	strb	r2, [r3, #0]
    a872:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a876:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a87a:	781b      	ldrb	r3, [r3, #0]
    a87c:	2bff      	cmp	r3, #255	; 0xff
    a87e:	d105      	bne.n	a88c <send_desired+0xd88>
    a880:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a884:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a888:	2200      	movs	r2, #0
    a88a:	701a      	strb	r2, [r3, #0]
    a88c:	f242 0339 	movw	r3, #8249	; 0x2039
    a890:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a894:	781b      	ldrb	r3, [r3, #0]
    a896:	b2db      	uxtb	r3, r3
    a898:	f003 0310 	and.w	r3, r3, #16
    a89c:	2b00      	cmp	r3, #0
    a89e:	d15a      	bne.n	a956 <send_desired+0xe52>
    a8a0:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    a8a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8a8:	781b      	ldrb	r3, [r3, #0]
    a8aa:	b2db      	uxtb	r3, r3
    a8ac:	461a      	mov	r2, r3
    a8ae:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    a8b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8b6:	5c9a      	ldrb	r2, [r3, r2]
    a8b8:	f64b 73fb 	movw	r3, #49147	; 0xbffb
    a8bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8c0:	701a      	strb	r2, [r3, #0]
    a8c2:	f64b 73fc 	movw	r3, #49148	; 0xbffc
    a8c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8ca:	2200      	movs	r2, #0
    a8cc:	701a      	strb	r2, [r3, #0]
    a8ce:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    a8d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8d6:	781b      	ldrb	r3, [r3, #0]
    a8d8:	b2db      	uxtb	r3, r3
    a8da:	3301      	adds	r3, #1
    a8dc:	b2da      	uxtb	r2, r3
    a8de:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    a8e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8e6:	701a      	strb	r2, [r3, #0]
    a8e8:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    a8ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8f0:	781b      	ldrb	r3, [r3, #0]
    a8f2:	b2db      	uxtb	r3, r3
    a8f4:	2bff      	cmp	r3, #255	; 0xff
    a8f6:	d105      	bne.n	a904 <send_desired+0xe00>
    a8f8:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    a8fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a900:	2200      	movs	r2, #0
    a902:	701a      	strb	r2, [r3, #0]
    a904:	f242 0338 	movw	r3, #8248	; 0x2038
    a908:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a90c:	f242 0238 	movw	r2, #8248	; 0x2038
    a910:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a914:	7812      	ldrb	r2, [r2, #0]
    a916:	b2d2      	uxtb	r2, r2
    a918:	f042 0201 	orr.w	r2, r2, #1
    a91c:	b2d2      	uxtb	r2, r2
    a91e:	701a      	strb	r2, [r3, #0]
    a920:	f242 0339 	movw	r3, #8249	; 0x2039
    a924:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a928:	f242 0239 	movw	r2, #8249	; 0x2039
    a92c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a930:	7812      	ldrb	r2, [r2, #0]
    a932:	b2d2      	uxtb	r2, r2
    a934:	f042 0210 	orr.w	r2, r2, #16
    a938:	b2d2      	uxtb	r2, r2
    a93a:	701a      	strb	r2, [r3, #0]
    a93c:	e00b      	b.n	a956 <send_desired+0xe52>
    a93e:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    a942:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a946:	781b      	ldrb	r3, [r3, #0]
    a948:	3301      	adds	r3, #1
    a94a:	b2da      	uxtb	r2, r3
    a94c:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    a950:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a954:	701a      	strb	r2, [r3, #0]
}
    a956:	46bd      	mov	sp, r7
    a958:	f85d 7b04 	ldr.w	r7, [sp], #4
    a95c:	4770      	bx	lr
    a95e:	bf00      	nop
    a960:	20000427 	.word	0x20000427

0000a964 <send_bat>:
void send_bat(void){  //2000ms
    a964:	b480      	push	{r7}
    a966:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 8) PERIODIC_SEND_BAT();}
    a968:	f64b 63f1 	movw	r3, #48881	; 0xbef1
    a96c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a970:	781a      	ldrb	r2, [r3, #0]
    a972:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    a976:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    a97a:	fba3 1302 	umull	r1, r3, r3, r2
    a97e:	0919      	lsrs	r1, r3, #4
    a980:	460b      	mov	r3, r1
    a982:	009b      	lsls	r3, r3, #2
    a984:	440b      	add	r3, r1
    a986:	009b      	lsls	r3, r3, #2
    a988:	1ad3      	subs	r3, r2, r3
    a98a:	b2db      	uxtb	r3, r3
    a98c:	2b08      	cmp	r3, #8
    a98e:	f040 839a 	bne.w	b0c6 <send_bat+0x762>
    a992:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a996:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a99a:	781a      	ldrb	r2, [r3, #0]
    a99c:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    a9a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9a4:	781b      	ldrb	r3, [r3, #0]
    a9a6:	b2db      	uxtb	r3, r3
    a9a8:	429a      	cmp	r2, r3
    a9aa:	d313      	bcc.n	a9d4 <send_bat+0x70>
    a9ac:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    a9b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9b4:	781b      	ldrb	r3, [r3, #0]
    a9b6:	b2db      	uxtb	r3, r3
    a9b8:	461a      	mov	r2, r3
    a9ba:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a9be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9c2:	781b      	ldrb	r3, [r3, #0]
    a9c4:	1ad3      	subs	r3, r2, r3
    a9c6:	33ff      	adds	r3, #255	; 0xff
    a9c8:	2b0c      	cmp	r3, #12
    a9ca:	bfd4      	ite	le
    a9cc:	2300      	movle	r3, #0
    a9ce:	2301      	movgt	r3, #1
    a9d0:	b2db      	uxtb	r3, r3
    a9d2:	e011      	b.n	a9f8 <send_bat+0x94>
    a9d4:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    a9d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9dc:	781b      	ldrb	r3, [r3, #0]
    a9de:	b2db      	uxtb	r3, r3
    a9e0:	461a      	mov	r2, r3
    a9e2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    a9e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9ea:	781b      	ldrb	r3, [r3, #0]
    a9ec:	1ad3      	subs	r3, r2, r3
    a9ee:	2b0c      	cmp	r3, #12
    a9f0:	bfd4      	ite	le
    a9f2:	2300      	movle	r3, #0
    a9f4:	2301      	movgt	r3, #1
    a9f6:	b2db      	uxtb	r3, r3
    a9f8:	2b00      	cmp	r3, #0
    a9fa:	f000 8358 	beq.w	b0ae <send_bat+0x74a>
    a9fe:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    aa02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa06:	781b      	ldrb	r3, [r3, #0]
    aa08:	461a      	mov	r2, r3
    aa0a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    aa0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa12:	2105      	movs	r1, #5
    aa14:	5499      	strb	r1, [r3, r2]
    aa16:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    aa1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa1e:	781b      	ldrb	r3, [r3, #0]
    aa20:	3301      	adds	r3, #1
    aa22:	b2da      	uxtb	r2, r3
    aa24:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    aa28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa2c:	701a      	strb	r2, [r3, #0]
    aa2e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    aa32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa36:	781b      	ldrb	r3, [r3, #0]
    aa38:	2bff      	cmp	r3, #255	; 0xff
    aa3a:	d105      	bne.n	aa48 <send_bat+0xe4>
    aa3c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    aa40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa44:	2200      	movs	r2, #0
    aa46:	701a      	strb	r2, [r3, #0]
    aa48:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    aa4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa50:	781b      	ldrb	r3, [r3, #0]
    aa52:	461a      	mov	r2, r3
    aa54:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    aa58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa5c:	210c      	movs	r1, #12
    aa5e:	5499      	strb	r1, [r3, r2]
    aa60:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    aa64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa68:	781b      	ldrb	r3, [r3, #0]
    aa6a:	3301      	adds	r3, #1
    aa6c:	b2da      	uxtb	r2, r3
    aa6e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    aa72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa76:	701a      	strb	r2, [r3, #0]
    aa78:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    aa7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa80:	781b      	ldrb	r3, [r3, #0]
    aa82:	2bff      	cmp	r3, #255	; 0xff
    aa84:	d105      	bne.n	aa92 <send_bat+0x12e>
    aa86:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    aa8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa8e:	2200      	movs	r2, #0
    aa90:	701a      	strb	r2, [r3, #0]
    aa92:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    aa96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa9a:	220c      	movs	r2, #12
    aa9c:	701a      	strb	r2, [r3, #0]
    aa9e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    aaa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaa6:	220c      	movs	r2, #12
    aaa8:	701a      	strb	r2, [r3, #0]
    aaaa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    aaae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aab2:	781b      	ldrb	r3, [r3, #0]
    aab4:	461a      	mov	r2, r3
    aab6:	f64b 63e2 	movw	r3, #48866	; 0xbee2
    aaba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aabe:	7819      	ldrb	r1, [r3, #0]
    aac0:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    aac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aac8:	5499      	strb	r1, [r3, r2]
    aaca:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    aace:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aad2:	781a      	ldrb	r2, [r3, #0]
    aad4:	f64b 63e2 	movw	r3, #48866	; 0xbee2
    aad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aadc:	781b      	ldrb	r3, [r3, #0]
    aade:	4413      	add	r3, r2
    aae0:	b2da      	uxtb	r2, r3
    aae2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    aae6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaea:	701a      	strb	r2, [r3, #0]
    aaec:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    aaf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaf4:	781a      	ldrb	r2, [r3, #0]
    aaf6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    aafa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aafe:	781b      	ldrb	r3, [r3, #0]
    ab00:	4413      	add	r3, r2
    ab02:	b2da      	uxtb	r2, r3
    ab04:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ab08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab0c:	701a      	strb	r2, [r3, #0]
    ab0e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ab12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab16:	781b      	ldrb	r3, [r3, #0]
    ab18:	3301      	adds	r3, #1
    ab1a:	b2da      	uxtb	r2, r3
    ab1c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ab20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab24:	701a      	strb	r2, [r3, #0]
    ab26:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ab2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab2e:	781b      	ldrb	r3, [r3, #0]
    ab30:	2bff      	cmp	r3, #255	; 0xff
    ab32:	d105      	bne.n	ab40 <send_bat+0x1dc>
    ab34:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ab38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab3c:	2200      	movs	r2, #0
    ab3e:	701a      	strb	r2, [r3, #0]
    ab40:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ab44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab48:	781b      	ldrb	r3, [r3, #0]
    ab4a:	461a      	mov	r2, r3
    ab4c:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
    ab50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab54:	7819      	ldrb	r1, [r3, #0]
    ab56:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    ab5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab5e:	5499      	strb	r1, [r3, r2]
    ab60:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
    ab64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab68:	781a      	ldrb	r2, [r3, #0]
    ab6a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ab6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab72:	781b      	ldrb	r3, [r3, #0]
    ab74:	4413      	add	r3, r2
    ab76:	b2da      	uxtb	r2, r3
    ab78:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ab7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab80:	701a      	strb	r2, [r3, #0]
    ab82:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ab86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab8a:	781a      	ldrb	r2, [r3, #0]
    ab8c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ab90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab94:	781b      	ldrb	r3, [r3, #0]
    ab96:	4413      	add	r3, r2
    ab98:	b2da      	uxtb	r2, r3
    ab9a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ab9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aba2:	701a      	strb	r2, [r3, #0]
    aba4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    aba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abac:	781b      	ldrb	r3, [r3, #0]
    abae:	3301      	adds	r3, #1
    abb0:	b2da      	uxtb	r2, r3
    abb2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    abb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abba:	701a      	strb	r2, [r3, #0]
    abbc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    abc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abc4:	781b      	ldrb	r3, [r3, #0]
    abc6:	2bff      	cmp	r3, #255	; 0xff
    abc8:	d105      	bne.n	abd6 <send_bat+0x272>
    abca:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    abce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abd2:	2200      	movs	r2, #0
    abd4:	701a      	strb	r2, [r3, #0]
    abd6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    abda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abde:	781b      	ldrb	r3, [r3, #0]
    abe0:	461a      	mov	r2, r3
    abe2:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
    abe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abea:	7859      	ldrb	r1, [r3, #1]
    abec:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    abf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abf4:	5499      	strb	r1, [r3, r2]
    abf6:	4bd5      	ldr	r3, [pc, #852]	; (af4c <send_bat+0x5e8>)
    abf8:	781a      	ldrb	r2, [r3, #0]
    abfa:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    abfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac02:	781b      	ldrb	r3, [r3, #0]
    ac04:	4413      	add	r3, r2
    ac06:	b2da      	uxtb	r2, r3
    ac08:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ac0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac10:	701a      	strb	r2, [r3, #0]
    ac12:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ac16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac1a:	781a      	ldrb	r2, [r3, #0]
    ac1c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ac20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac24:	781b      	ldrb	r3, [r3, #0]
    ac26:	4413      	add	r3, r2
    ac28:	b2da      	uxtb	r2, r3
    ac2a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ac2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac32:	701a      	strb	r2, [r3, #0]
    ac34:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ac38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac3c:	781b      	ldrb	r3, [r3, #0]
    ac3e:	3301      	adds	r3, #1
    ac40:	b2da      	uxtb	r2, r3
    ac42:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ac46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac4a:	701a      	strb	r2, [r3, #0]
    ac4c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ac50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac54:	781b      	ldrb	r3, [r3, #0]
    ac56:	2bff      	cmp	r3, #255	; 0xff
    ac58:	d105      	bne.n	ac66 <send_bat+0x302>
    ac5a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ac5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac62:	2200      	movs	r2, #0
    ac64:	701a      	strb	r2, [r3, #0]
    ac66:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ac6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac6e:	781b      	ldrb	r3, [r3, #0]
    ac70:	461a      	mov	r2, r3
    ac72:	f64b 63e5 	movw	r3, #48869	; 0xbee5
    ac76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac7a:	7819      	ldrb	r1, [r3, #0]
    ac7c:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    ac80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac84:	5499      	strb	r1, [r3, r2]
    ac86:	f64b 63e5 	movw	r3, #48869	; 0xbee5
    ac8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac8e:	781a      	ldrb	r2, [r3, #0]
    ac90:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ac94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac98:	781b      	ldrb	r3, [r3, #0]
    ac9a:	4413      	add	r3, r2
    ac9c:	b2da      	uxtb	r2, r3
    ac9e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    aca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aca6:	701a      	strb	r2, [r3, #0]
    aca8:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    acac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acb0:	781a      	ldrb	r2, [r3, #0]
    acb2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    acb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acba:	781b      	ldrb	r3, [r3, #0]
    acbc:	4413      	add	r3, r2
    acbe:	b2da      	uxtb	r2, r3
    acc0:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    acc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acc8:	701a      	strb	r2, [r3, #0]
    acca:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    acce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acd2:	781b      	ldrb	r3, [r3, #0]
    acd4:	3301      	adds	r3, #1
    acd6:	b2da      	uxtb	r2, r3
    acd8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    acdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ace0:	701a      	strb	r2, [r3, #0]
    ace2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ace6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acea:	781b      	ldrb	r3, [r3, #0]
    acec:	2bff      	cmp	r3, #255	; 0xff
    acee:	d105      	bne.n	acfc <send_bat+0x398>
    acf0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    acf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acf8:	2200      	movs	r2, #0
    acfa:	701a      	strb	r2, [r3, #0]
    acfc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ad00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad04:	781b      	ldrb	r3, [r3, #0]
    ad06:	461a      	mov	r2, r3
    ad08:	f24c 2366 	movw	r3, #49766	; 0xc266
    ad0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad10:	7819      	ldrb	r1, [r3, #0]
    ad12:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    ad16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad1a:	5499      	strb	r1, [r3, r2]
    ad1c:	f24c 2366 	movw	r3, #49766	; 0xc266
    ad20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad24:	781a      	ldrb	r2, [r3, #0]
    ad26:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ad2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad2e:	781b      	ldrb	r3, [r3, #0]
    ad30:	4413      	add	r3, r2
    ad32:	b2da      	uxtb	r2, r3
    ad34:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ad38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad3c:	701a      	strb	r2, [r3, #0]
    ad3e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ad42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad46:	781a      	ldrb	r2, [r3, #0]
    ad48:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ad4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad50:	781b      	ldrb	r3, [r3, #0]
    ad52:	4413      	add	r3, r2
    ad54:	b2da      	uxtb	r2, r3
    ad56:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ad5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad5e:	701a      	strb	r2, [r3, #0]
    ad60:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ad64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad68:	781b      	ldrb	r3, [r3, #0]
    ad6a:	3301      	adds	r3, #1
    ad6c:	b2da      	uxtb	r2, r3
    ad6e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ad72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad76:	701a      	strb	r2, [r3, #0]
    ad78:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ad7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad80:	781b      	ldrb	r3, [r3, #0]
    ad82:	2bff      	cmp	r3, #255	; 0xff
    ad84:	d105      	bne.n	ad92 <send_bat+0x42e>
    ad86:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ad8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad8e:	2200      	movs	r2, #0
    ad90:	701a      	strb	r2, [r3, #0]
    ad92:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ad96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad9a:	781b      	ldrb	r3, [r3, #0]
    ad9c:	461a      	mov	r2, r3
    ad9e:	f24c 2366 	movw	r3, #49766	; 0xc266
    ada2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ada6:	7859      	ldrb	r1, [r3, #1]
    ada8:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    adac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adb0:	5499      	strb	r1, [r3, r2]
    adb2:	4b67      	ldr	r3, [pc, #412]	; (af50 <send_bat+0x5ec>)
    adb4:	781a      	ldrb	r2, [r3, #0]
    adb6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    adba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adbe:	781b      	ldrb	r3, [r3, #0]
    adc0:	4413      	add	r3, r2
    adc2:	b2da      	uxtb	r2, r3
    adc4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    adc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adcc:	701a      	strb	r2, [r3, #0]
    adce:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    add2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    add6:	781a      	ldrb	r2, [r3, #0]
    add8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    addc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ade0:	781b      	ldrb	r3, [r3, #0]
    ade2:	4413      	add	r3, r2
    ade4:	b2da      	uxtb	r2, r3
    ade6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    adea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adee:	701a      	strb	r2, [r3, #0]
    adf0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    adf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adf8:	781b      	ldrb	r3, [r3, #0]
    adfa:	3301      	adds	r3, #1
    adfc:	b2da      	uxtb	r2, r3
    adfe:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ae02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae06:	701a      	strb	r2, [r3, #0]
    ae08:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ae0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae10:	781b      	ldrb	r3, [r3, #0]
    ae12:	2bff      	cmp	r3, #255	; 0xff
    ae14:	d105      	bne.n	ae22 <send_bat+0x4be>
    ae16:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ae1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae1e:	2200      	movs	r2, #0
    ae20:	701a      	strb	r2, [r3, #0]
    ae22:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ae26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae2a:	781b      	ldrb	r3, [r3, #0]
    ae2c:	461a      	mov	r2, r3
    ae2e:	f24c 2364 	movw	r3, #49764	; 0xc264
    ae32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae36:	7819      	ldrb	r1, [r3, #0]
    ae38:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    ae3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae40:	5499      	strb	r1, [r3, r2]
    ae42:	f24c 2364 	movw	r3, #49764	; 0xc264
    ae46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae4a:	781a      	ldrb	r2, [r3, #0]
    ae4c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ae50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae54:	781b      	ldrb	r3, [r3, #0]
    ae56:	4413      	add	r3, r2
    ae58:	b2da      	uxtb	r2, r3
    ae5a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ae5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae62:	701a      	strb	r2, [r3, #0]
    ae64:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ae68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae6c:	781a      	ldrb	r2, [r3, #0]
    ae6e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ae72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae76:	781b      	ldrb	r3, [r3, #0]
    ae78:	4413      	add	r3, r2
    ae7a:	b2da      	uxtb	r2, r3
    ae7c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ae80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae84:	701a      	strb	r2, [r3, #0]
    ae86:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ae8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae8e:	781b      	ldrb	r3, [r3, #0]
    ae90:	3301      	adds	r3, #1
    ae92:	b2da      	uxtb	r2, r3
    ae94:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ae98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae9c:	701a      	strb	r2, [r3, #0]
    ae9e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    aea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aea6:	781b      	ldrb	r3, [r3, #0]
    aea8:	2bff      	cmp	r3, #255	; 0xff
    aeaa:	d105      	bne.n	aeb8 <send_bat+0x554>
    aeac:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    aeb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeb4:	2200      	movs	r2, #0
    aeb6:	701a      	strb	r2, [r3, #0]
    aeb8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    aebc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aec0:	781b      	ldrb	r3, [r3, #0]
    aec2:	461a      	mov	r2, r3
    aec4:	f24c 2364 	movw	r3, #49764	; 0xc264
    aec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aecc:	7859      	ldrb	r1, [r3, #1]
    aece:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    aed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aed6:	5499      	strb	r1, [r3, r2]
    aed8:	4b1e      	ldr	r3, [pc, #120]	; (af54 <send_bat+0x5f0>)
    aeda:	781a      	ldrb	r2, [r3, #0]
    aedc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    aee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aee4:	781b      	ldrb	r3, [r3, #0]
    aee6:	4413      	add	r3, r2
    aee8:	b2da      	uxtb	r2, r3
    aeea:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    aeee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aef2:	701a      	strb	r2, [r3, #0]
    aef4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    aef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aefc:	781a      	ldrb	r2, [r3, #0]
    aefe:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    af02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af06:	781b      	ldrb	r3, [r3, #0]
    af08:	4413      	add	r3, r2
    af0a:	b2da      	uxtb	r2, r3
    af0c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    af10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af14:	701a      	strb	r2, [r3, #0]
    af16:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    af1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af1e:	781b      	ldrb	r3, [r3, #0]
    af20:	3301      	adds	r3, #1
    af22:	b2da      	uxtb	r2, r3
    af24:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    af28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af2c:	701a      	strb	r2, [r3, #0]
    af2e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    af32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af36:	781b      	ldrb	r3, [r3, #0]
    af38:	2bff      	cmp	r3, #255	; 0xff
    af3a:	d10d      	bne.n	af58 <send_bat+0x5f4>
    af3c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    af40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af44:	2200      	movs	r2, #0
    af46:	701a      	strb	r2, [r3, #0]
    af48:	e006      	b.n	af58 <send_bat+0x5f4>
    af4a:	bf00      	nop
    af4c:	2004c4dd 	.word	0x2004c4dd
    af50:	2004c267 	.word	0x2004c267
    af54:	2004c265 	.word	0x2004c265
    af58:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    af5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af60:	781b      	ldrb	r3, [r3, #0]
    af62:	461a      	mov	r2, r3
    af64:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    af68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af6c:	7819      	ldrb	r1, [r3, #0]
    af6e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    af72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af76:	5499      	strb	r1, [r3, r2]
    af78:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    af7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af80:	781b      	ldrb	r3, [r3, #0]
    af82:	3301      	adds	r3, #1
    af84:	b2da      	uxtb	r2, r3
    af86:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    af8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af8e:	701a      	strb	r2, [r3, #0]
    af90:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    af94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af98:	781b      	ldrb	r3, [r3, #0]
    af9a:	2bff      	cmp	r3, #255	; 0xff
    af9c:	d105      	bne.n	afaa <send_bat+0x646>
    af9e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    afa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afa6:	2200      	movs	r2, #0
    afa8:	701a      	strb	r2, [r3, #0]
    afaa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    afae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afb2:	781b      	ldrb	r3, [r3, #0]
    afb4:	461a      	mov	r2, r3
    afb6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    afba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afbe:	7819      	ldrb	r1, [r3, #0]
    afc0:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    afc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afc8:	5499      	strb	r1, [r3, r2]
    afca:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    afce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afd2:	781b      	ldrb	r3, [r3, #0]
    afd4:	3301      	adds	r3, #1
    afd6:	b2da      	uxtb	r2, r3
    afd8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    afdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afe0:	701a      	strb	r2, [r3, #0]
    afe2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    afe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afea:	781b      	ldrb	r3, [r3, #0]
    afec:	2bff      	cmp	r3, #255	; 0xff
    afee:	d105      	bne.n	affc <send_bat+0x698>
    aff0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    aff4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aff8:	2200      	movs	r2, #0
    affa:	701a      	strb	r2, [r3, #0]
    affc:	f242 0339 	movw	r3, #8249	; 0x2039
    b000:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b004:	781b      	ldrb	r3, [r3, #0]
    b006:	b2db      	uxtb	r3, r3
    b008:	f003 0310 	and.w	r3, r3, #16
    b00c:	2b00      	cmp	r3, #0
    b00e:	d15a      	bne.n	b0c6 <send_bat+0x762>
    b010:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    b014:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b018:	781b      	ldrb	r3, [r3, #0]
    b01a:	b2db      	uxtb	r3, r3
    b01c:	461a      	mov	r2, r3
    b01e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    b022:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b026:	5c9a      	ldrb	r2, [r3, r2]
    b028:	f64b 73fb 	movw	r3, #49147	; 0xbffb
    b02c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b030:	701a      	strb	r2, [r3, #0]
    b032:	f64b 73fc 	movw	r3, #49148	; 0xbffc
    b036:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b03a:	2200      	movs	r2, #0
    b03c:	701a      	strb	r2, [r3, #0]
    b03e:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    b042:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b046:	781b      	ldrb	r3, [r3, #0]
    b048:	b2db      	uxtb	r3, r3
    b04a:	3301      	adds	r3, #1
    b04c:	b2da      	uxtb	r2, r3
    b04e:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    b052:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b056:	701a      	strb	r2, [r3, #0]
    b058:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    b05c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b060:	781b      	ldrb	r3, [r3, #0]
    b062:	b2db      	uxtb	r3, r3
    b064:	2bff      	cmp	r3, #255	; 0xff
    b066:	d105      	bne.n	b074 <send_bat+0x710>
    b068:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    b06c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b070:	2200      	movs	r2, #0
    b072:	701a      	strb	r2, [r3, #0]
    b074:	f242 0338 	movw	r3, #8248	; 0x2038
    b078:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b07c:	f242 0238 	movw	r2, #8248	; 0x2038
    b080:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b084:	7812      	ldrb	r2, [r2, #0]
    b086:	b2d2      	uxtb	r2, r2
    b088:	f042 0201 	orr.w	r2, r2, #1
    b08c:	b2d2      	uxtb	r2, r2
    b08e:	701a      	strb	r2, [r3, #0]
    b090:	f242 0339 	movw	r3, #8249	; 0x2039
    b094:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b098:	f242 0239 	movw	r2, #8249	; 0x2039
    b09c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b0a0:	7812      	ldrb	r2, [r2, #0]
    b0a2:	b2d2      	uxtb	r2, r2
    b0a4:	f042 0210 	orr.w	r2, r2, #16
    b0a8:	b2d2      	uxtb	r2, r2
    b0aa:	701a      	strb	r2, [r3, #0]
    b0ac:	e00b      	b.n	b0c6 <send_bat+0x762>
    b0ae:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    b0b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0b6:	781b      	ldrb	r3, [r3, #0]
    b0b8:	3301      	adds	r3, #1
    b0ba:	b2da      	uxtb	r2, r3
    b0bc:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    b0c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0c4:	701a      	strb	r2, [r3, #0]
}
    b0c6:	46bd      	mov	sp, r7
    b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    b0cc:	4770      	bx	lr
    b0ce:	bf00      	nop

0000b0d0 <send_climb>:
void send_climb(void){  //2000ms
    b0d0:	b480      	push	{r7}
    b0d2:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 18) PERIODIC_SEND_CLIMB_PID();}
    b0d4:	f64b 63f1 	movw	r3, #48881	; 0xbef1
    b0d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0dc:	781a      	ldrb	r2, [r3, #0]
    b0de:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    b0e2:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    b0e6:	fba3 1302 	umull	r1, r3, r3, r2
    b0ea:	0919      	lsrs	r1, r3, #4
    b0ec:	460b      	mov	r3, r1
    b0ee:	009b      	lsls	r3, r3, #2
    b0f0:	440b      	add	r3, r1
    b0f2:	009b      	lsls	r3, r3, #2
    b0f4:	1ad3      	subs	r3, r2, r3
    b0f6:	b2db      	uxtb	r3, r3
    b0f8:	2b12      	cmp	r3, #18
    b0fa:	f040 8554 	bne.w	bba6 <send_climb+0xad6>
    b0fe:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b102:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b106:	781a      	ldrb	r2, [r3, #0]
    b108:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    b10c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b110:	781b      	ldrb	r3, [r3, #0]
    b112:	b2db      	uxtb	r3, r3
    b114:	429a      	cmp	r2, r3
    b116:	d313      	bcc.n	b140 <send_climb+0x70>
    b118:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    b11c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b120:	781b      	ldrb	r3, [r3, #0]
    b122:	b2db      	uxtb	r3, r3
    b124:	461a      	mov	r2, r3
    b126:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b12a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b12e:	781b      	ldrb	r3, [r3, #0]
    b130:	1ad3      	subs	r3, r2, r3
    b132:	33ff      	adds	r3, #255	; 0xff
    b134:	2b12      	cmp	r3, #18
    b136:	bfd4      	ite	le
    b138:	2300      	movle	r3, #0
    b13a:	2301      	movgt	r3, #1
    b13c:	b2db      	uxtb	r3, r3
    b13e:	e011      	b.n	b164 <send_climb+0x94>
    b140:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    b144:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b148:	781b      	ldrb	r3, [r3, #0]
    b14a:	b2db      	uxtb	r3, r3
    b14c:	461a      	mov	r2, r3
    b14e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b152:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b156:	781b      	ldrb	r3, [r3, #0]
    b158:	1ad3      	subs	r3, r2, r3
    b15a:	2b12      	cmp	r3, #18
    b15c:	bfd4      	ite	le
    b15e:	2300      	movle	r3, #0
    b160:	2301      	movgt	r3, #1
    b162:	b2db      	uxtb	r3, r3
    b164:	2b00      	cmp	r3, #0
    b166:	f000 8512 	beq.w	bb8e <send_climb+0xabe>
    b16a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b16e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b172:	781b      	ldrb	r3, [r3, #0]
    b174:	461a      	mov	r2, r3
    b176:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    b17a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b17e:	2105      	movs	r1, #5
    b180:	5499      	strb	r1, [r3, r2]
    b182:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b18a:	781b      	ldrb	r3, [r3, #0]
    b18c:	3301      	adds	r3, #1
    b18e:	b2da      	uxtb	r2, r3
    b190:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b194:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b198:	701a      	strb	r2, [r3, #0]
    b19a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b19e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1a2:	781b      	ldrb	r3, [r3, #0]
    b1a4:	2bff      	cmp	r3, #255	; 0xff
    b1a6:	d105      	bne.n	b1b4 <send_climb+0xe4>
    b1a8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b1ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1b0:	2200      	movs	r2, #0
    b1b2:	701a      	strb	r2, [r3, #0]
    b1b4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b1b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1bc:	781b      	ldrb	r3, [r3, #0]
    b1be:	461a      	mov	r2, r3
    b1c0:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    b1c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1c8:	210e      	movs	r1, #14
    b1ca:	5499      	strb	r1, [r3, r2]
    b1cc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b1d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1d4:	781b      	ldrb	r3, [r3, #0]
    b1d6:	3301      	adds	r3, #1
    b1d8:	b2da      	uxtb	r2, r3
    b1da:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b1de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1e2:	701a      	strb	r2, [r3, #0]
    b1e4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b1e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1ec:	781b      	ldrb	r3, [r3, #0]
    b1ee:	2bff      	cmp	r3, #255	; 0xff
    b1f0:	d105      	bne.n	b1fe <send_climb+0x12e>
    b1f2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b1f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1fa:	2200      	movs	r2, #0
    b1fc:	701a      	strb	r2, [r3, #0]
    b1fe:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b202:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b206:	220e      	movs	r2, #14
    b208:	701a      	strb	r2, [r3, #0]
    b20a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b20e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b212:	220e      	movs	r2, #14
    b214:	701a      	strb	r2, [r3, #0]
    b216:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b21a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b21e:	781b      	ldrb	r3, [r3, #0]
    b220:	461a      	mov	r2, r3
    b222:	f24c 232c 	movw	r3, #49708	; 0xc22c
    b226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b22a:	7819      	ldrb	r1, [r3, #0]
    b22c:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    b230:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b234:	5499      	strb	r1, [r3, r2]
    b236:	f24c 232c 	movw	r3, #49708	; 0xc22c
    b23a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b23e:	781a      	ldrb	r2, [r3, #0]
    b240:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b244:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b248:	781b      	ldrb	r3, [r3, #0]
    b24a:	4413      	add	r3, r2
    b24c:	b2da      	uxtb	r2, r3
    b24e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b252:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b256:	701a      	strb	r2, [r3, #0]
    b258:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b25c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b260:	781a      	ldrb	r2, [r3, #0]
    b262:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b266:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b26a:	781b      	ldrb	r3, [r3, #0]
    b26c:	4413      	add	r3, r2
    b26e:	b2da      	uxtb	r2, r3
    b270:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b274:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b278:	701a      	strb	r2, [r3, #0]
    b27a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b27e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b282:	781b      	ldrb	r3, [r3, #0]
    b284:	3301      	adds	r3, #1
    b286:	b2da      	uxtb	r2, r3
    b288:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b28c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b290:	701a      	strb	r2, [r3, #0]
    b292:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b296:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b29a:	781b      	ldrb	r3, [r3, #0]
    b29c:	2bff      	cmp	r3, #255	; 0xff
    b29e:	d105      	bne.n	b2ac <send_climb+0x1dc>
    b2a0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b2a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2a8:	2200      	movs	r2, #0
    b2aa:	701a      	strb	r2, [r3, #0]
    b2ac:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b2b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2b4:	781b      	ldrb	r3, [r3, #0]
    b2b6:	461a      	mov	r2, r3
    b2b8:	f24c 232c 	movw	r3, #49708	; 0xc22c
    b2bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2c0:	7859      	ldrb	r1, [r3, #1]
    b2c2:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    b2c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2ca:	5499      	strb	r1, [r3, r2]
    b2cc:	4bd3      	ldr	r3, [pc, #844]	; (b61c <send_climb+0x54c>)
    b2ce:	781a      	ldrb	r2, [r3, #0]
    b2d0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b2d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2d8:	781b      	ldrb	r3, [r3, #0]
    b2da:	4413      	add	r3, r2
    b2dc:	b2da      	uxtb	r2, r3
    b2de:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b2e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2e6:	701a      	strb	r2, [r3, #0]
    b2e8:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b2ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2f0:	781a      	ldrb	r2, [r3, #0]
    b2f2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b2f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2fa:	781b      	ldrb	r3, [r3, #0]
    b2fc:	4413      	add	r3, r2
    b2fe:	b2da      	uxtb	r2, r3
    b300:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b304:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b308:	701a      	strb	r2, [r3, #0]
    b30a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b30e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b312:	781b      	ldrb	r3, [r3, #0]
    b314:	3301      	adds	r3, #1
    b316:	b2da      	uxtb	r2, r3
    b318:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b31c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b320:	701a      	strb	r2, [r3, #0]
    b322:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b326:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b32a:	781b      	ldrb	r3, [r3, #0]
    b32c:	2bff      	cmp	r3, #255	; 0xff
    b32e:	d105      	bne.n	b33c <send_climb+0x26c>
    b330:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b334:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b338:	2200      	movs	r2, #0
    b33a:	701a      	strb	r2, [r3, #0]
    b33c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b340:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b344:	781b      	ldrb	r3, [r3, #0]
    b346:	461a      	mov	r2, r3
    b348:	f24c 2340 	movw	r3, #49728	; 0xc240
    b34c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b350:	7819      	ldrb	r1, [r3, #0]
    b352:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    b356:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b35a:	5499      	strb	r1, [r3, r2]
    b35c:	f24c 2340 	movw	r3, #49728	; 0xc240
    b360:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b364:	781a      	ldrb	r2, [r3, #0]
    b366:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b36a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b36e:	781b      	ldrb	r3, [r3, #0]
    b370:	4413      	add	r3, r2
    b372:	b2da      	uxtb	r2, r3
    b374:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b378:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b37c:	701a      	strb	r2, [r3, #0]
    b37e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b382:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b386:	781a      	ldrb	r2, [r3, #0]
    b388:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b38c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b390:	781b      	ldrb	r3, [r3, #0]
    b392:	4413      	add	r3, r2
    b394:	b2da      	uxtb	r2, r3
    b396:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b39a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b39e:	701a      	strb	r2, [r3, #0]
    b3a0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b3a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3a8:	781b      	ldrb	r3, [r3, #0]
    b3aa:	3301      	adds	r3, #1
    b3ac:	b2da      	uxtb	r2, r3
    b3ae:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b3b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3b6:	701a      	strb	r2, [r3, #0]
    b3b8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b3bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3c0:	781b      	ldrb	r3, [r3, #0]
    b3c2:	2bff      	cmp	r3, #255	; 0xff
    b3c4:	d105      	bne.n	b3d2 <send_climb+0x302>
    b3c6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b3ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3ce:	2200      	movs	r2, #0
    b3d0:	701a      	strb	r2, [r3, #0]
    b3d2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b3d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3da:	781b      	ldrb	r3, [r3, #0]
    b3dc:	461a      	mov	r2, r3
    b3de:	f24c 2340 	movw	r3, #49728	; 0xc240
    b3e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3e6:	7859      	ldrb	r1, [r3, #1]
    b3e8:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    b3ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3f0:	5499      	strb	r1, [r3, r2]
    b3f2:	4b8b      	ldr	r3, [pc, #556]	; (b620 <send_climb+0x550>)
    b3f4:	781a      	ldrb	r2, [r3, #0]
    b3f6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b3fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3fe:	781b      	ldrb	r3, [r3, #0]
    b400:	4413      	add	r3, r2
    b402:	b2da      	uxtb	r2, r3
    b404:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b408:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b40c:	701a      	strb	r2, [r3, #0]
    b40e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b412:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b416:	781a      	ldrb	r2, [r3, #0]
    b418:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b41c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b420:	781b      	ldrb	r3, [r3, #0]
    b422:	4413      	add	r3, r2
    b424:	b2da      	uxtb	r2, r3
    b426:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b42a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b42e:	701a      	strb	r2, [r3, #0]
    b430:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b434:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b438:	781b      	ldrb	r3, [r3, #0]
    b43a:	3301      	adds	r3, #1
    b43c:	b2da      	uxtb	r2, r3
    b43e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b442:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b446:	701a      	strb	r2, [r3, #0]
    b448:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b44c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b450:	781b      	ldrb	r3, [r3, #0]
    b452:	2bff      	cmp	r3, #255	; 0xff
    b454:	d105      	bne.n	b462 <send_climb+0x392>
    b456:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b45a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b45e:	2200      	movs	r2, #0
    b460:	701a      	strb	r2, [r3, #0]
    b462:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b466:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b46a:	781b      	ldrb	r3, [r3, #0]
    b46c:	461a      	mov	r2, r3
    b46e:	f24c 2340 	movw	r3, #49728	; 0xc240
    b472:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b476:	7899      	ldrb	r1, [r3, #2]
    b478:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    b47c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b480:	5499      	strb	r1, [r3, r2]
    b482:	4b68      	ldr	r3, [pc, #416]	; (b624 <send_climb+0x554>)
    b484:	781a      	ldrb	r2, [r3, #0]
    b486:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b48a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b48e:	781b      	ldrb	r3, [r3, #0]
    b490:	4413      	add	r3, r2
    b492:	b2da      	uxtb	r2, r3
    b494:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b498:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b49c:	701a      	strb	r2, [r3, #0]
    b49e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b4a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4a6:	781a      	ldrb	r2, [r3, #0]
    b4a8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b4ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4b0:	781b      	ldrb	r3, [r3, #0]
    b4b2:	4413      	add	r3, r2
    b4b4:	b2da      	uxtb	r2, r3
    b4b6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b4ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4be:	701a      	strb	r2, [r3, #0]
    b4c0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b4c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4c8:	781b      	ldrb	r3, [r3, #0]
    b4ca:	3301      	adds	r3, #1
    b4cc:	b2da      	uxtb	r2, r3
    b4ce:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b4d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4d6:	701a      	strb	r2, [r3, #0]
    b4d8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b4dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4e0:	781b      	ldrb	r3, [r3, #0]
    b4e2:	2bff      	cmp	r3, #255	; 0xff
    b4e4:	d105      	bne.n	b4f2 <send_climb+0x422>
    b4e6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b4ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4ee:	2200      	movs	r2, #0
    b4f0:	701a      	strb	r2, [r3, #0]
    b4f2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b4f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4fa:	781b      	ldrb	r3, [r3, #0]
    b4fc:	461a      	mov	r2, r3
    b4fe:	f24c 2340 	movw	r3, #49728	; 0xc240
    b502:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b506:	78d9      	ldrb	r1, [r3, #3]
    b508:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    b50c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b510:	5499      	strb	r1, [r3, r2]
    b512:	4b45      	ldr	r3, [pc, #276]	; (b628 <send_climb+0x558>)
    b514:	781a      	ldrb	r2, [r3, #0]
    b516:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b51a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b51e:	781b      	ldrb	r3, [r3, #0]
    b520:	4413      	add	r3, r2
    b522:	b2da      	uxtb	r2, r3
    b524:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b528:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b52c:	701a      	strb	r2, [r3, #0]
    b52e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b532:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b536:	781a      	ldrb	r2, [r3, #0]
    b538:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b53c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b540:	781b      	ldrb	r3, [r3, #0]
    b542:	4413      	add	r3, r2
    b544:	b2da      	uxtb	r2, r3
    b546:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b54a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b54e:	701a      	strb	r2, [r3, #0]
    b550:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b554:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b558:	781b      	ldrb	r3, [r3, #0]
    b55a:	3301      	adds	r3, #1
    b55c:	b2da      	uxtb	r2, r3
    b55e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b562:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b566:	701a      	strb	r2, [r3, #0]
    b568:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b56c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b570:	781b      	ldrb	r3, [r3, #0]
    b572:	2bff      	cmp	r3, #255	; 0xff
    b574:	d105      	bne.n	b582 <send_climb+0x4b2>
    b576:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b57a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b57e:	2200      	movs	r2, #0
    b580:	701a      	strb	r2, [r3, #0]
    b582:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b586:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b58a:	781b      	ldrb	r3, [r3, #0]
    b58c:	461a      	mov	r2, r3
    b58e:	f24c 2348 	movw	r3, #49736	; 0xc248
    b592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b596:	7819      	ldrb	r1, [r3, #0]
    b598:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    b59c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5a0:	5499      	strb	r1, [r3, r2]
    b5a2:	f24c 2348 	movw	r3, #49736	; 0xc248
    b5a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5aa:	781a      	ldrb	r2, [r3, #0]
    b5ac:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b5b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5b4:	781b      	ldrb	r3, [r3, #0]
    b5b6:	4413      	add	r3, r2
    b5b8:	b2da      	uxtb	r2, r3
    b5ba:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b5be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5c2:	701a      	strb	r2, [r3, #0]
    b5c4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b5c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5cc:	781a      	ldrb	r2, [r3, #0]
    b5ce:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b5d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5d6:	781b      	ldrb	r3, [r3, #0]
    b5d8:	4413      	add	r3, r2
    b5da:	b2da      	uxtb	r2, r3
    b5dc:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b5e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5e4:	701a      	strb	r2, [r3, #0]
    b5e6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b5ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5ee:	781b      	ldrb	r3, [r3, #0]
    b5f0:	3301      	adds	r3, #1
    b5f2:	b2da      	uxtb	r2, r3
    b5f4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b5f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5fc:	701a      	strb	r2, [r3, #0]
    b5fe:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b602:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b606:	781b      	ldrb	r3, [r3, #0]
    b608:	2bff      	cmp	r3, #255	; 0xff
    b60a:	d10f      	bne.n	b62c <send_climb+0x55c>
    b60c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b614:	2200      	movs	r2, #0
    b616:	701a      	strb	r2, [r3, #0]
    b618:	e008      	b.n	b62c <send_climb+0x55c>
    b61a:	bf00      	nop
    b61c:	2004c22d 	.word	0x2004c22d
    b620:	2004c241 	.word	0x2004c241
    b624:	2004c242 	.word	0x2004c242
    b628:	2004c243 	.word	0x2004c243
    b62c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b630:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b634:	781b      	ldrb	r3, [r3, #0]
    b636:	461a      	mov	r2, r3
    b638:	f24c 2348 	movw	r3, #49736	; 0xc248
    b63c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b640:	7859      	ldrb	r1, [r3, #1]
    b642:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    b646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b64a:	5499      	strb	r1, [r3, r2]
    b64c:	4bd1      	ldr	r3, [pc, #836]	; (b994 <send_climb+0x8c4>)
    b64e:	781a      	ldrb	r2, [r3, #0]
    b650:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b658:	781b      	ldrb	r3, [r3, #0]
    b65a:	4413      	add	r3, r2
    b65c:	b2da      	uxtb	r2, r3
    b65e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b662:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b666:	701a      	strb	r2, [r3, #0]
    b668:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b66c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b670:	781a      	ldrb	r2, [r3, #0]
    b672:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b676:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b67a:	781b      	ldrb	r3, [r3, #0]
    b67c:	4413      	add	r3, r2
    b67e:	b2da      	uxtb	r2, r3
    b680:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b684:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b688:	701a      	strb	r2, [r3, #0]
    b68a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b68e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b692:	781b      	ldrb	r3, [r3, #0]
    b694:	3301      	adds	r3, #1
    b696:	b2da      	uxtb	r2, r3
    b698:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b69c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6a0:	701a      	strb	r2, [r3, #0]
    b6a2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b6a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6aa:	781b      	ldrb	r3, [r3, #0]
    b6ac:	2bff      	cmp	r3, #255	; 0xff
    b6ae:	d105      	bne.n	b6bc <send_climb+0x5ec>
    b6b0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b6b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6b8:	2200      	movs	r2, #0
    b6ba:	701a      	strb	r2, [r3, #0]
    b6bc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b6c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6c4:	781b      	ldrb	r3, [r3, #0]
    b6c6:	461a      	mov	r2, r3
    b6c8:	f24c 2348 	movw	r3, #49736	; 0xc248
    b6cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6d0:	7899      	ldrb	r1, [r3, #2]
    b6d2:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    b6d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6da:	5499      	strb	r1, [r3, r2]
    b6dc:	4bae      	ldr	r3, [pc, #696]	; (b998 <send_climb+0x8c8>)
    b6de:	781a      	ldrb	r2, [r3, #0]
    b6e0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b6e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6e8:	781b      	ldrb	r3, [r3, #0]
    b6ea:	4413      	add	r3, r2
    b6ec:	b2da      	uxtb	r2, r3
    b6ee:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b6f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6f6:	701a      	strb	r2, [r3, #0]
    b6f8:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b6fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b700:	781a      	ldrb	r2, [r3, #0]
    b702:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b706:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b70a:	781b      	ldrb	r3, [r3, #0]
    b70c:	4413      	add	r3, r2
    b70e:	b2da      	uxtb	r2, r3
    b710:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b714:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b718:	701a      	strb	r2, [r3, #0]
    b71a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b71e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b722:	781b      	ldrb	r3, [r3, #0]
    b724:	3301      	adds	r3, #1
    b726:	b2da      	uxtb	r2, r3
    b728:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b72c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b730:	701a      	strb	r2, [r3, #0]
    b732:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b736:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b73a:	781b      	ldrb	r3, [r3, #0]
    b73c:	2bff      	cmp	r3, #255	; 0xff
    b73e:	d105      	bne.n	b74c <send_climb+0x67c>
    b740:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b744:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b748:	2200      	movs	r2, #0
    b74a:	701a      	strb	r2, [r3, #0]
    b74c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b750:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b754:	781b      	ldrb	r3, [r3, #0]
    b756:	461a      	mov	r2, r3
    b758:	f24c 2348 	movw	r3, #49736	; 0xc248
    b75c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b760:	78d9      	ldrb	r1, [r3, #3]
    b762:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    b766:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b76a:	5499      	strb	r1, [r3, r2]
    b76c:	4b8b      	ldr	r3, [pc, #556]	; (b99c <send_climb+0x8cc>)
    b76e:	781a      	ldrb	r2, [r3, #0]
    b770:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b774:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b778:	781b      	ldrb	r3, [r3, #0]
    b77a:	4413      	add	r3, r2
    b77c:	b2da      	uxtb	r2, r3
    b77e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b786:	701a      	strb	r2, [r3, #0]
    b788:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b78c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b790:	781a      	ldrb	r2, [r3, #0]
    b792:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b796:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b79a:	781b      	ldrb	r3, [r3, #0]
    b79c:	4413      	add	r3, r2
    b79e:	b2da      	uxtb	r2, r3
    b7a0:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b7a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7a8:	701a      	strb	r2, [r3, #0]
    b7aa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b7ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7b2:	781b      	ldrb	r3, [r3, #0]
    b7b4:	3301      	adds	r3, #1
    b7b6:	b2da      	uxtb	r2, r3
    b7b8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b7bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7c0:	701a      	strb	r2, [r3, #0]
    b7c2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b7c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7ca:	781b      	ldrb	r3, [r3, #0]
    b7cc:	2bff      	cmp	r3, #255	; 0xff
    b7ce:	d105      	bne.n	b7dc <send_climb+0x70c>
    b7d0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b7d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7d8:	2200      	movs	r2, #0
    b7da:	701a      	strb	r2, [r3, #0]
    b7dc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b7e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7e4:	781b      	ldrb	r3, [r3, #0]
    b7e6:	461a      	mov	r2, r3
    b7e8:	f648 13a0 	movw	r3, #35232	; 0x89a0
    b7ec:	f2c0 0301 	movt	r3, #1
    b7f0:	7819      	ldrb	r1, [r3, #0]
    b7f2:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    b7f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7fa:	5499      	strb	r1, [r3, r2]
    b7fc:	f648 13a0 	movw	r3, #35232	; 0x89a0
    b800:	f2c0 0301 	movt	r3, #1
    b804:	781a      	ldrb	r2, [r3, #0]
    b806:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b80a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b80e:	781b      	ldrb	r3, [r3, #0]
    b810:	4413      	add	r3, r2
    b812:	b2da      	uxtb	r2, r3
    b814:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b818:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b81c:	701a      	strb	r2, [r3, #0]
    b81e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b822:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b826:	781a      	ldrb	r2, [r3, #0]
    b828:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b82c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b830:	781b      	ldrb	r3, [r3, #0]
    b832:	4413      	add	r3, r2
    b834:	b2da      	uxtb	r2, r3
    b836:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b83a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b83e:	701a      	strb	r2, [r3, #0]
    b840:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b848:	781b      	ldrb	r3, [r3, #0]
    b84a:	3301      	adds	r3, #1
    b84c:	b2da      	uxtb	r2, r3
    b84e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b852:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b856:	701a      	strb	r2, [r3, #0]
    b858:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b85c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b860:	781b      	ldrb	r3, [r3, #0]
    b862:	2bff      	cmp	r3, #255	; 0xff
    b864:	d105      	bne.n	b872 <send_climb+0x7a2>
    b866:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b86a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b86e:	2200      	movs	r2, #0
    b870:	701a      	strb	r2, [r3, #0]
    b872:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b876:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b87a:	781b      	ldrb	r3, [r3, #0]
    b87c:	461a      	mov	r2, r3
    b87e:	f648 13a0 	movw	r3, #35232	; 0x89a0
    b882:	f2c0 0301 	movt	r3, #1
    b886:	7859      	ldrb	r1, [r3, #1]
    b888:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    b88c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b890:	5499      	strb	r1, [r3, r2]
    b892:	4b43      	ldr	r3, [pc, #268]	; (b9a0 <send_climb+0x8d0>)
    b894:	781a      	ldrb	r2, [r3, #0]
    b896:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b89a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b89e:	781b      	ldrb	r3, [r3, #0]
    b8a0:	4413      	add	r3, r2
    b8a2:	b2da      	uxtb	r2, r3
    b8a4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b8a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8ac:	701a      	strb	r2, [r3, #0]
    b8ae:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b8b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8b6:	781a      	ldrb	r2, [r3, #0]
    b8b8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b8bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8c0:	781b      	ldrb	r3, [r3, #0]
    b8c2:	4413      	add	r3, r2
    b8c4:	b2da      	uxtb	r2, r3
    b8c6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b8ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8ce:	701a      	strb	r2, [r3, #0]
    b8d0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b8d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8d8:	781b      	ldrb	r3, [r3, #0]
    b8da:	3301      	adds	r3, #1
    b8dc:	b2da      	uxtb	r2, r3
    b8de:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b8e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8e6:	701a      	strb	r2, [r3, #0]
    b8e8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b8ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8f0:	781b      	ldrb	r3, [r3, #0]
    b8f2:	2bff      	cmp	r3, #255	; 0xff
    b8f4:	d105      	bne.n	b902 <send_climb+0x832>
    b8f6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b8fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8fe:	2200      	movs	r2, #0
    b900:	701a      	strb	r2, [r3, #0]
    b902:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b906:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b90a:	781b      	ldrb	r3, [r3, #0]
    b90c:	461a      	mov	r2, r3
    b90e:	f648 13a0 	movw	r3, #35232	; 0x89a0
    b912:	f2c0 0301 	movt	r3, #1
    b916:	7899      	ldrb	r1, [r3, #2]
    b918:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    b91c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b920:	5499      	strb	r1, [r3, r2]
    b922:	4b20      	ldr	r3, [pc, #128]	; (b9a4 <send_climb+0x8d4>)
    b924:	781a      	ldrb	r2, [r3, #0]
    b926:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b92a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b92e:	781b      	ldrb	r3, [r3, #0]
    b930:	4413      	add	r3, r2
    b932:	b2da      	uxtb	r2, r3
    b934:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b93c:	701a      	strb	r2, [r3, #0]
    b93e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b942:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b946:	781a      	ldrb	r2, [r3, #0]
    b948:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b94c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b950:	781b      	ldrb	r3, [r3, #0]
    b952:	4413      	add	r3, r2
    b954:	b2da      	uxtb	r2, r3
    b956:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b95a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b95e:	701a      	strb	r2, [r3, #0]
    b960:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b964:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b968:	781b      	ldrb	r3, [r3, #0]
    b96a:	3301      	adds	r3, #1
    b96c:	b2da      	uxtb	r2, r3
    b96e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b972:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b976:	701a      	strb	r2, [r3, #0]
    b978:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b97c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b980:	781b      	ldrb	r3, [r3, #0]
    b982:	2bff      	cmp	r3, #255	; 0xff
    b984:	d110      	bne.n	b9a8 <send_climb+0x8d8>
    b986:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b98a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b98e:	2200      	movs	r2, #0
    b990:	701a      	strb	r2, [r3, #0]
    b992:	e009      	b.n	b9a8 <send_climb+0x8d8>
    b994:	2004c249 	.word	0x2004c249
    b998:	2004c24a 	.word	0x2004c24a
    b99c:	2004c24b 	.word	0x2004c24b
    b9a0:	000189a1 	.word	0x000189a1
    b9a4:	000189a2 	.word	0x000189a2
    b9a8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    b9ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9b0:	781b      	ldrb	r3, [r3, #0]
    b9b2:	461a      	mov	r2, r3
    b9b4:	f648 13a0 	movw	r3, #35232	; 0x89a0
    b9b8:	f2c0 0301 	movt	r3, #1
    b9bc:	78d9      	ldrb	r1, [r3, #3]
    b9be:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    b9c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9c6:	5499      	strb	r1, [r3, r2]
    b9c8:	4b79      	ldr	r3, [pc, #484]	; (bbb0 <send_climb+0xae0>)
    b9ca:	781a      	ldrb	r2, [r3, #0]
    b9cc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b9d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9d4:	781b      	ldrb	r3, [r3, #0]
    b9d6:	4413      	add	r3, r2
    b9d8:	b2da      	uxtb	r2, r3
    b9da:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b9de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9e2:	701a      	strb	r2, [r3, #0]
    b9e4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    b9e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9ec:	781a      	ldrb	r2, [r3, #0]
    b9ee:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    b9f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9f6:	781b      	ldrb	r3, [r3, #0]
    b9f8:	4413      	add	r3, r2
    b9fa:	b2da      	uxtb	r2, r3
    b9fc:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ba00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba04:	701a      	strb	r2, [r3, #0]
    ba06:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ba0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba0e:	781b      	ldrb	r3, [r3, #0]
    ba10:	3301      	adds	r3, #1
    ba12:	b2da      	uxtb	r2, r3
    ba14:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ba18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba1c:	701a      	strb	r2, [r3, #0]
    ba1e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ba22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba26:	781b      	ldrb	r3, [r3, #0]
    ba28:	2bff      	cmp	r3, #255	; 0xff
    ba2a:	d105      	bne.n	ba38 <send_climb+0x968>
    ba2c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ba30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba34:	2200      	movs	r2, #0
    ba36:	701a      	strb	r2, [r3, #0]
    ba38:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ba3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba40:	781b      	ldrb	r3, [r3, #0]
    ba42:	461a      	mov	r2, r3
    ba44:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ba48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba4c:	7819      	ldrb	r1, [r3, #0]
    ba4e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    ba52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba56:	5499      	strb	r1, [r3, r2]
    ba58:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ba5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba60:	781b      	ldrb	r3, [r3, #0]
    ba62:	3301      	adds	r3, #1
    ba64:	b2da      	uxtb	r2, r3
    ba66:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ba6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba6e:	701a      	strb	r2, [r3, #0]
    ba70:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ba74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba78:	781b      	ldrb	r3, [r3, #0]
    ba7a:	2bff      	cmp	r3, #255	; 0xff
    ba7c:	d105      	bne.n	ba8a <send_climb+0x9ba>
    ba7e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ba82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba86:	2200      	movs	r2, #0
    ba88:	701a      	strb	r2, [r3, #0]
    ba8a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ba8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba92:	781b      	ldrb	r3, [r3, #0]
    ba94:	461a      	mov	r2, r3
    ba96:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ba9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba9e:	7819      	ldrb	r1, [r3, #0]
    baa0:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    baa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baa8:	5499      	strb	r1, [r3, r2]
    baaa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    baae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bab2:	781b      	ldrb	r3, [r3, #0]
    bab4:	3301      	adds	r3, #1
    bab6:	b2da      	uxtb	r2, r3
    bab8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    babc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bac0:	701a      	strb	r2, [r3, #0]
    bac2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bac6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baca:	781b      	ldrb	r3, [r3, #0]
    bacc:	2bff      	cmp	r3, #255	; 0xff
    bace:	d105      	bne.n	badc <send_climb+0xa0c>
    bad0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bad8:	2200      	movs	r2, #0
    bada:	701a      	strb	r2, [r3, #0]
    badc:	f242 0339 	movw	r3, #8249	; 0x2039
    bae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bae4:	781b      	ldrb	r3, [r3, #0]
    bae6:	b2db      	uxtb	r3, r3
    bae8:	f003 0310 	and.w	r3, r3, #16
    baec:	2b00      	cmp	r3, #0
    baee:	d15a      	bne.n	bba6 <send_climb+0xad6>
    baf0:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    baf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baf8:	781b      	ldrb	r3, [r3, #0]
    bafa:	b2db      	uxtb	r3, r3
    bafc:	461a      	mov	r2, r3
    bafe:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    bb02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb06:	5c9a      	ldrb	r2, [r3, r2]
    bb08:	f64b 73fb 	movw	r3, #49147	; 0xbffb
    bb0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb10:	701a      	strb	r2, [r3, #0]
    bb12:	f64b 73fc 	movw	r3, #49148	; 0xbffc
    bb16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb1a:	2200      	movs	r2, #0
    bb1c:	701a      	strb	r2, [r3, #0]
    bb1e:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    bb22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb26:	781b      	ldrb	r3, [r3, #0]
    bb28:	b2db      	uxtb	r3, r3
    bb2a:	3301      	adds	r3, #1
    bb2c:	b2da      	uxtb	r2, r3
    bb2e:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    bb32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb36:	701a      	strb	r2, [r3, #0]
    bb38:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    bb3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb40:	781b      	ldrb	r3, [r3, #0]
    bb42:	b2db      	uxtb	r3, r3
    bb44:	2bff      	cmp	r3, #255	; 0xff
    bb46:	d105      	bne.n	bb54 <send_climb+0xa84>
    bb48:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    bb4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb50:	2200      	movs	r2, #0
    bb52:	701a      	strb	r2, [r3, #0]
    bb54:	f242 0338 	movw	r3, #8248	; 0x2038
    bb58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb5c:	f242 0238 	movw	r2, #8248	; 0x2038
    bb60:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bb64:	7812      	ldrb	r2, [r2, #0]
    bb66:	b2d2      	uxtb	r2, r2
    bb68:	f042 0201 	orr.w	r2, r2, #1
    bb6c:	b2d2      	uxtb	r2, r2
    bb6e:	701a      	strb	r2, [r3, #0]
    bb70:	f242 0339 	movw	r3, #8249	; 0x2039
    bb74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb78:	f242 0239 	movw	r2, #8249	; 0x2039
    bb7c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bb80:	7812      	ldrb	r2, [r2, #0]
    bb82:	b2d2      	uxtb	r2, r2
    bb84:	f042 0210 	orr.w	r2, r2, #16
    bb88:	b2d2      	uxtb	r2, r2
    bb8a:	701a      	strb	r2, [r3, #0]
    bb8c:	e00b      	b.n	bba6 <send_climb+0xad6>
    bb8e:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    bb92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb96:	781b      	ldrb	r3, [r3, #0]
    bb98:	3301      	adds	r3, #1
    bb9a:	b2da      	uxtb	r2, r3
    bb9c:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    bba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bba4:	701a      	strb	r2, [r3, #0]
}
    bba6:	46bd      	mov	sp, r7
    bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
    bbac:	4770      	bx	lr
    bbae:	bf00      	nop
    bbb0:	000189a3 	.word	0x000189a3

0000bbb4 <send_mode>:
void send_mode(void){  //5000ms
    bbb4:	b480      	push	{r7}
    bbb6:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 9) PERIODIC_SEND_PPRZ_MODE();}
    bbb8:	f64b 63f1 	movw	r3, #48881	; 0xbef1
    bbbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbc0:	781a      	ldrb	r2, [r3, #0]
    bbc2:	f248 531f 	movw	r3, #34079	; 0x851f
    bbc6:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    bbca:	fba3 1302 	umull	r1, r3, r3, r2
    bbce:	091b      	lsrs	r3, r3, #4
    bbd0:	2132      	movs	r1, #50	; 0x32
    bbd2:	fb01 f303 	mul.w	r3, r1, r3
    bbd6:	1ad3      	subs	r3, r2, r3
    bbd8:	b2db      	uxtb	r3, r3
    bbda:	2b09      	cmp	r3, #9
    bbdc:	f040 82ba 	bne.w	c154 <send_mode+0x5a0>
    bbe0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bbe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbe8:	781a      	ldrb	r2, [r3, #0]
    bbea:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    bbee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbf2:	781b      	ldrb	r3, [r3, #0]
    bbf4:	b2db      	uxtb	r3, r3
    bbf6:	429a      	cmp	r2, r3
    bbf8:	d313      	bcc.n	bc22 <send_mode+0x6e>
    bbfa:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    bbfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc02:	781b      	ldrb	r3, [r3, #0]
    bc04:	b2db      	uxtb	r3, r3
    bc06:	461a      	mov	r2, r3
    bc08:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bc0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc10:	781b      	ldrb	r3, [r3, #0]
    bc12:	1ad3      	subs	r3, r2, r3
    bc14:	33ff      	adds	r3, #255	; 0xff
    bc16:	2b09      	cmp	r3, #9
    bc18:	bfd4      	ite	le
    bc1a:	2300      	movle	r3, #0
    bc1c:	2301      	movgt	r3, #1
    bc1e:	b2db      	uxtb	r3, r3
    bc20:	e011      	b.n	bc46 <send_mode+0x92>
    bc22:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    bc26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc2a:	781b      	ldrb	r3, [r3, #0]
    bc2c:	b2db      	uxtb	r3, r3
    bc2e:	461a      	mov	r2, r3
    bc30:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bc34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc38:	781b      	ldrb	r3, [r3, #0]
    bc3a:	1ad3      	subs	r3, r2, r3
    bc3c:	2b09      	cmp	r3, #9
    bc3e:	bfd4      	ite	le
    bc40:	2300      	movle	r3, #0
    bc42:	2301      	movgt	r3, #1
    bc44:	b2db      	uxtb	r3, r3
    bc46:	2b00      	cmp	r3, #0
    bc48:	f000 8278 	beq.w	c13c <send_mode+0x588>
    bc4c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bc50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc54:	781b      	ldrb	r3, [r3, #0]
    bc56:	461a      	mov	r2, r3
    bc58:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    bc5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc60:	2105      	movs	r1, #5
    bc62:	5499      	strb	r1, [r3, r2]
    bc64:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bc68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc6c:	781b      	ldrb	r3, [r3, #0]
    bc6e:	3301      	adds	r3, #1
    bc70:	b2da      	uxtb	r2, r3
    bc72:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bc76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc7a:	701a      	strb	r2, [r3, #0]
    bc7c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bc80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc84:	781b      	ldrb	r3, [r3, #0]
    bc86:	2bff      	cmp	r3, #255	; 0xff
    bc88:	d105      	bne.n	bc96 <send_mode+0xe2>
    bc8a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bc8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc92:	2200      	movs	r2, #0
    bc94:	701a      	strb	r2, [r3, #0]
    bc96:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bc9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc9e:	781b      	ldrb	r3, [r3, #0]
    bca0:	461a      	mov	r2, r3
    bca2:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    bca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcaa:	210b      	movs	r1, #11
    bcac:	5499      	strb	r1, [r3, r2]
    bcae:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bcb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcb6:	781b      	ldrb	r3, [r3, #0]
    bcb8:	3301      	adds	r3, #1
    bcba:	b2da      	uxtb	r2, r3
    bcbc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bcc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcc4:	701a      	strb	r2, [r3, #0]
    bcc6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bcca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcce:	781b      	ldrb	r3, [r3, #0]
    bcd0:	2bff      	cmp	r3, #255	; 0xff
    bcd2:	d105      	bne.n	bce0 <send_mode+0x12c>
    bcd4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bcd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcdc:	2200      	movs	r2, #0
    bcde:	701a      	strb	r2, [r3, #0]
    bce0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    bce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bce8:	220b      	movs	r2, #11
    bcea:	701a      	strb	r2, [r3, #0]
    bcec:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    bcf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcf4:	220b      	movs	r2, #11
    bcf6:	701a      	strb	r2, [r3, #0]
    bcf8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bcfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd00:	781b      	ldrb	r3, [r3, #0]
    bd02:	461a      	mov	r2, r3
    bd04:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    bd08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd0c:	7819      	ldrb	r1, [r3, #0]
    bd0e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    bd12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd16:	5499      	strb	r1, [r3, r2]
    bd18:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    bd1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd20:	781a      	ldrb	r2, [r3, #0]
    bd22:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    bd26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd2a:	781b      	ldrb	r3, [r3, #0]
    bd2c:	4413      	add	r3, r2
    bd2e:	b2da      	uxtb	r2, r3
    bd30:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    bd34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd38:	701a      	strb	r2, [r3, #0]
    bd3a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    bd3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd42:	781a      	ldrb	r2, [r3, #0]
    bd44:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    bd48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd4c:	781b      	ldrb	r3, [r3, #0]
    bd4e:	4413      	add	r3, r2
    bd50:	b2da      	uxtb	r2, r3
    bd52:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    bd56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd5a:	701a      	strb	r2, [r3, #0]
    bd5c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bd60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd64:	781b      	ldrb	r3, [r3, #0]
    bd66:	3301      	adds	r3, #1
    bd68:	b2da      	uxtb	r2, r3
    bd6a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bd6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd72:	701a      	strb	r2, [r3, #0]
    bd74:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bd78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd7c:	781b      	ldrb	r3, [r3, #0]
    bd7e:	2bff      	cmp	r3, #255	; 0xff
    bd80:	d105      	bne.n	bd8e <send_mode+0x1da>
    bd82:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bd86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd8a:	2200      	movs	r2, #0
    bd8c:	701a      	strb	r2, [r3, #0]
    bd8e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bd92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd96:	781b      	ldrb	r3, [r3, #0]
    bd98:	461a      	mov	r2, r3
    bd9a:	f64b 63dd 	movw	r3, #48861	; 0xbedd
    bd9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bda2:	7819      	ldrb	r1, [r3, #0]
    bda4:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    bda8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdac:	5499      	strb	r1, [r3, r2]
    bdae:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    bdb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdb6:	781a      	ldrb	r2, [r3, #0]
    bdb8:	f64b 63dd 	movw	r3, #48861	; 0xbedd
    bdbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdc0:	781b      	ldrb	r3, [r3, #0]
    bdc2:	4413      	add	r3, r2
    bdc4:	b2da      	uxtb	r2, r3
    bdc6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    bdca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdce:	701a      	strb	r2, [r3, #0]
    bdd0:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    bdd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdd8:	781a      	ldrb	r2, [r3, #0]
    bdda:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    bdde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bde2:	781b      	ldrb	r3, [r3, #0]
    bde4:	4413      	add	r3, r2
    bde6:	b2da      	uxtb	r2, r3
    bde8:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    bdec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdf0:	701a      	strb	r2, [r3, #0]
    bdf2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bdf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdfa:	781b      	ldrb	r3, [r3, #0]
    bdfc:	3301      	adds	r3, #1
    bdfe:	b2da      	uxtb	r2, r3
    be00:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    be04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be08:	701a      	strb	r2, [r3, #0]
    be0a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    be0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be12:	781b      	ldrb	r3, [r3, #0]
    be14:	2bff      	cmp	r3, #255	; 0xff
    be16:	d105      	bne.n	be24 <send_mode+0x270>
    be18:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    be1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be20:	2200      	movs	r2, #0
    be22:	701a      	strb	r2, [r3, #0]
    be24:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    be28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be2c:	781b      	ldrb	r3, [r3, #0]
    be2e:	461a      	mov	r2, r3
    be30:	f24c 530c 	movw	r3, #50444	; 0xc50c
    be34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be38:	7819      	ldrb	r1, [r3, #0]
    be3a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    be3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be42:	5499      	strb	r1, [r3, r2]
    be44:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    be48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be4c:	781a      	ldrb	r2, [r3, #0]
    be4e:	f24c 530c 	movw	r3, #50444	; 0xc50c
    be52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be56:	781b      	ldrb	r3, [r3, #0]
    be58:	4413      	add	r3, r2
    be5a:	b2da      	uxtb	r2, r3
    be5c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    be60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be64:	701a      	strb	r2, [r3, #0]
    be66:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    be6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be6e:	781a      	ldrb	r2, [r3, #0]
    be70:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    be74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be78:	781b      	ldrb	r3, [r3, #0]
    be7a:	4413      	add	r3, r2
    be7c:	b2da      	uxtb	r2, r3
    be7e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    be82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be86:	701a      	strb	r2, [r3, #0]
    be88:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    be8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be90:	781b      	ldrb	r3, [r3, #0]
    be92:	3301      	adds	r3, #1
    be94:	b2da      	uxtb	r2, r3
    be96:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    be9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be9e:	701a      	strb	r2, [r3, #0]
    bea0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bea4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bea8:	781b      	ldrb	r3, [r3, #0]
    beaa:	2bff      	cmp	r3, #255	; 0xff
    beac:	d105      	bne.n	beba <send_mode+0x306>
    beae:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    beb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beb6:	2200      	movs	r2, #0
    beb8:	701a      	strb	r2, [r3, #0]
    beba:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bec2:	781b      	ldrb	r3, [r3, #0]
    bec4:	461a      	mov	r2, r3
    bec6:	f64b 63e3 	movw	r3, #48867	; 0xbee3
    beca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bece:	7819      	ldrb	r1, [r3, #0]
    bed0:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    bed4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bed8:	5499      	strb	r1, [r3, r2]
    beda:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    bede:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bee2:	781a      	ldrb	r2, [r3, #0]
    bee4:	f64b 63e3 	movw	r3, #48867	; 0xbee3
    bee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beec:	781b      	ldrb	r3, [r3, #0]
    beee:	4413      	add	r3, r2
    bef0:	b2da      	uxtb	r2, r3
    bef2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    bef6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    befa:	701a      	strb	r2, [r3, #0]
    befc:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    bf00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf04:	781a      	ldrb	r2, [r3, #0]
    bf06:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    bf0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf0e:	781b      	ldrb	r3, [r3, #0]
    bf10:	4413      	add	r3, r2
    bf12:	b2da      	uxtb	r2, r3
    bf14:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    bf18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf1c:	701a      	strb	r2, [r3, #0]
    bf1e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bf22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf26:	781b      	ldrb	r3, [r3, #0]
    bf28:	3301      	adds	r3, #1
    bf2a:	b2da      	uxtb	r2, r3
    bf2c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bf30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf34:	701a      	strb	r2, [r3, #0]
    bf36:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bf3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf3e:	781b      	ldrb	r3, [r3, #0]
    bf40:	2bff      	cmp	r3, #255	; 0xff
    bf42:	d105      	bne.n	bf50 <send_mode+0x39c>
    bf44:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bf48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf4c:	2200      	movs	r2, #0
    bf4e:	701a      	strb	r2, [r3, #0]
    bf50:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bf54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf58:	781b      	ldrb	r3, [r3, #0]
    bf5a:	461a      	mov	r2, r3
    bf5c:	f240 33ec 	movw	r3, #1004	; 0x3ec
    bf60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf64:	7819      	ldrb	r1, [r3, #0]
    bf66:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    bf6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf6e:	5499      	strb	r1, [r3, r2]
    bf70:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    bf74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf78:	781a      	ldrb	r2, [r3, #0]
    bf7a:	f240 33ec 	movw	r3, #1004	; 0x3ec
    bf7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf82:	781b      	ldrb	r3, [r3, #0]
    bf84:	4413      	add	r3, r2
    bf86:	b2da      	uxtb	r2, r3
    bf88:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    bf8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf90:	701a      	strb	r2, [r3, #0]
    bf92:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    bf96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf9a:	781a      	ldrb	r2, [r3, #0]
    bf9c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    bfa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfa4:	781b      	ldrb	r3, [r3, #0]
    bfa6:	4413      	add	r3, r2
    bfa8:	b2da      	uxtb	r2, r3
    bfaa:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    bfae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfb2:	701a      	strb	r2, [r3, #0]
    bfb4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bfb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfbc:	781b      	ldrb	r3, [r3, #0]
    bfbe:	3301      	adds	r3, #1
    bfc0:	b2da      	uxtb	r2, r3
    bfc2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bfc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfca:	701a      	strb	r2, [r3, #0]
    bfcc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bfd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfd4:	781b      	ldrb	r3, [r3, #0]
    bfd6:	2bff      	cmp	r3, #255	; 0xff
    bfd8:	d105      	bne.n	bfe6 <send_mode+0x432>
    bfda:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bfde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfe2:	2200      	movs	r2, #0
    bfe4:	701a      	strb	r2, [r3, #0]
    bfe6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    bfea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfee:	781b      	ldrb	r3, [r3, #0]
    bff0:	461a      	mov	r2, r3
    bff2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    bff6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bffa:	7819      	ldrb	r1, [r3, #0]
    bffc:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    c000:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c004:	5499      	strb	r1, [r3, r2]
    c006:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c00a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c00e:	781b      	ldrb	r3, [r3, #0]
    c010:	3301      	adds	r3, #1
    c012:	b2da      	uxtb	r2, r3
    c014:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c018:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c01c:	701a      	strb	r2, [r3, #0]
    c01e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c022:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c026:	781b      	ldrb	r3, [r3, #0]
    c028:	2bff      	cmp	r3, #255	; 0xff
    c02a:	d105      	bne.n	c038 <send_mode+0x484>
    c02c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c030:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c034:	2200      	movs	r2, #0
    c036:	701a      	strb	r2, [r3, #0]
    c038:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c03c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c040:	781b      	ldrb	r3, [r3, #0]
    c042:	461a      	mov	r2, r3
    c044:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c048:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c04c:	7819      	ldrb	r1, [r3, #0]
    c04e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    c052:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c056:	5499      	strb	r1, [r3, r2]
    c058:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c05c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c060:	781b      	ldrb	r3, [r3, #0]
    c062:	3301      	adds	r3, #1
    c064:	b2da      	uxtb	r2, r3
    c066:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c06a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c06e:	701a      	strb	r2, [r3, #0]
    c070:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c074:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c078:	781b      	ldrb	r3, [r3, #0]
    c07a:	2bff      	cmp	r3, #255	; 0xff
    c07c:	d105      	bne.n	c08a <send_mode+0x4d6>
    c07e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c082:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c086:	2200      	movs	r2, #0
    c088:	701a      	strb	r2, [r3, #0]
    c08a:	f242 0339 	movw	r3, #8249	; 0x2039
    c08e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c092:	781b      	ldrb	r3, [r3, #0]
    c094:	b2db      	uxtb	r3, r3
    c096:	f003 0310 	and.w	r3, r3, #16
    c09a:	2b00      	cmp	r3, #0
    c09c:	d15a      	bne.n	c154 <send_mode+0x5a0>
    c09e:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    c0a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0a6:	781b      	ldrb	r3, [r3, #0]
    c0a8:	b2db      	uxtb	r3, r3
    c0aa:	461a      	mov	r2, r3
    c0ac:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    c0b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0b4:	5c9a      	ldrb	r2, [r3, r2]
    c0b6:	f64b 73fb 	movw	r3, #49147	; 0xbffb
    c0ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0be:	701a      	strb	r2, [r3, #0]
    c0c0:	f64b 73fc 	movw	r3, #49148	; 0xbffc
    c0c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0c8:	2200      	movs	r2, #0
    c0ca:	701a      	strb	r2, [r3, #0]
    c0cc:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    c0d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0d4:	781b      	ldrb	r3, [r3, #0]
    c0d6:	b2db      	uxtb	r3, r3
    c0d8:	3301      	adds	r3, #1
    c0da:	b2da      	uxtb	r2, r3
    c0dc:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    c0e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0e4:	701a      	strb	r2, [r3, #0]
    c0e6:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    c0ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0ee:	781b      	ldrb	r3, [r3, #0]
    c0f0:	b2db      	uxtb	r3, r3
    c0f2:	2bff      	cmp	r3, #255	; 0xff
    c0f4:	d105      	bne.n	c102 <send_mode+0x54e>
    c0f6:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    c0fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0fe:	2200      	movs	r2, #0
    c100:	701a      	strb	r2, [r3, #0]
    c102:	f242 0338 	movw	r3, #8248	; 0x2038
    c106:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c10a:	f242 0238 	movw	r2, #8248	; 0x2038
    c10e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c112:	7812      	ldrb	r2, [r2, #0]
    c114:	b2d2      	uxtb	r2, r2
    c116:	f042 0201 	orr.w	r2, r2, #1
    c11a:	b2d2      	uxtb	r2, r2
    c11c:	701a      	strb	r2, [r3, #0]
    c11e:	f242 0339 	movw	r3, #8249	; 0x2039
    c122:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c126:	f242 0239 	movw	r2, #8249	; 0x2039
    c12a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c12e:	7812      	ldrb	r2, [r2, #0]
    c130:	b2d2      	uxtb	r2, r2
    c132:	f042 0210 	orr.w	r2, r2, #16
    c136:	b2d2      	uxtb	r2, r2
    c138:	701a      	strb	r2, [r3, #0]
    c13a:	e00b      	b.n	c154 <send_mode+0x5a0>
    c13c:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    c140:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c144:	781b      	ldrb	r3, [r3, #0]
    c146:	3301      	adds	r3, #1
    c148:	b2da      	uxtb	r2, r3
    c14a:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    c14e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c152:	701a      	strb	r2, [r3, #0]
}
    c154:	46bd      	mov	sp, r7
    c156:	f85d 7b04 	ldr.w	r7, [sp], #4
    c15a:	4770      	bx	lr

0000c15c <send_debug>:
void send_debug(void){  //5000ms
    c15c:	b480      	push	{r7}
    c15e:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 29) PERIODIC_SEND_DEBUG();}
    c160:	f64b 63f1 	movw	r3, #48881	; 0xbef1
    c164:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c168:	781a      	ldrb	r2, [r3, #0]
    c16a:	f248 531f 	movw	r3, #34079	; 0x851f
    c16e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c172:	fba3 1302 	umull	r1, r3, r3, r2
    c176:	091b      	lsrs	r3, r3, #4
    c178:	2132      	movs	r1, #50	; 0x32
    c17a:	fb01 f303 	mul.w	r3, r1, r3
    c17e:	1ad3      	subs	r3, r2, r3
    c180:	b2db      	uxtb	r3, r3
    c182:	2b1d      	cmp	r3, #29
    c184:	f040 82bb 	bne.w	c6fe <send_debug+0x5a2>
    c188:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c18c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c190:	781a      	ldrb	r2, [r3, #0]
    c192:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    c196:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c19a:	781b      	ldrb	r3, [r3, #0]
    c19c:	b2db      	uxtb	r3, r3
    c19e:	429a      	cmp	r2, r3
    c1a0:	d313      	bcc.n	c1ca <send_debug+0x6e>
    c1a2:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    c1a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1aa:	781b      	ldrb	r3, [r3, #0]
    c1ac:	b2db      	uxtb	r3, r3
    c1ae:	461a      	mov	r2, r3
    c1b0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c1b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1b8:	781b      	ldrb	r3, [r3, #0]
    c1ba:	1ad3      	subs	r3, r2, r3
    c1bc:	33ff      	adds	r3, #255	; 0xff
    c1be:	2b09      	cmp	r3, #9
    c1c0:	bfd4      	ite	le
    c1c2:	2300      	movle	r3, #0
    c1c4:	2301      	movgt	r3, #1
    c1c6:	b2db      	uxtb	r3, r3
    c1c8:	e011      	b.n	c1ee <send_debug+0x92>
    c1ca:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    c1ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1d2:	781b      	ldrb	r3, [r3, #0]
    c1d4:	b2db      	uxtb	r3, r3
    c1d6:	461a      	mov	r2, r3
    c1d8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c1dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1e0:	781b      	ldrb	r3, [r3, #0]
    c1e2:	1ad3      	subs	r3, r2, r3
    c1e4:	2b09      	cmp	r3, #9
    c1e6:	bfd4      	ite	le
    c1e8:	2300      	movle	r3, #0
    c1ea:	2301      	movgt	r3, #1
    c1ec:	b2db      	uxtb	r3, r3
    c1ee:	2b00      	cmp	r3, #0
    c1f0:	f000 8279 	beq.w	c6e6 <send_debug+0x58a>
    c1f4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c1f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1fc:	781b      	ldrb	r3, [r3, #0]
    c1fe:	461a      	mov	r2, r3
    c200:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    c204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c208:	2105      	movs	r1, #5
    c20a:	5499      	strb	r1, [r3, r2]
    c20c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c210:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c214:	781b      	ldrb	r3, [r3, #0]
    c216:	3301      	adds	r3, #1
    c218:	b2da      	uxtb	r2, r3
    c21a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c21e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c222:	701a      	strb	r2, [r3, #0]
    c224:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c228:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c22c:	781b      	ldrb	r3, [r3, #0]
    c22e:	2bff      	cmp	r3, #255	; 0xff
    c230:	d105      	bne.n	c23e <send_debug+0xe2>
    c232:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c236:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c23a:	2200      	movs	r2, #0
    c23c:	701a      	strb	r2, [r3, #0]
    c23e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c246:	781b      	ldrb	r3, [r3, #0]
    c248:	461a      	mov	r2, r3
    c24a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    c24e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c252:	210d      	movs	r1, #13
    c254:	5499      	strb	r1, [r3, r2]
    c256:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c25a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c25e:	781b      	ldrb	r3, [r3, #0]
    c260:	3301      	adds	r3, #1
    c262:	b2da      	uxtb	r2, r3
    c264:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c268:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c26c:	701a      	strb	r2, [r3, #0]
    c26e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c272:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c276:	781b      	ldrb	r3, [r3, #0]
    c278:	2bff      	cmp	r3, #255	; 0xff
    c27a:	d105      	bne.n	c288 <send_debug+0x12c>
    c27c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c280:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c284:	2200      	movs	r2, #0
    c286:	701a      	strb	r2, [r3, #0]
    c288:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c28c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c290:	220d      	movs	r2, #13
    c292:	701a      	strb	r2, [r3, #0]
    c294:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c298:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c29c:	220d      	movs	r2, #13
    c29e:	701a      	strb	r2, [r3, #0]
    c2a0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c2a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2a8:	781b      	ldrb	r3, [r3, #0]
    c2aa:	461a      	mov	r2, r3
    c2ac:	f24c 032f 	movw	r3, #49199	; 0xc02f
    c2b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2b4:	781b      	ldrb	r3, [r3, #0]
    c2b6:	b2d9      	uxtb	r1, r3
    c2b8:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    c2bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2c0:	5499      	strb	r1, [r3, r2]
    c2c2:	f24c 032f 	movw	r3, #49199	; 0xc02f
    c2c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2ca:	781a      	ldrb	r2, [r3, #0]
    c2cc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c2d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2d4:	781b      	ldrb	r3, [r3, #0]
    c2d6:	4413      	add	r3, r2
    c2d8:	b2da      	uxtb	r2, r3
    c2da:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c2de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2e2:	701a      	strb	r2, [r3, #0]
    c2e4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c2e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2ec:	781a      	ldrb	r2, [r3, #0]
    c2ee:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c2f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2f6:	781b      	ldrb	r3, [r3, #0]
    c2f8:	4413      	add	r3, r2
    c2fa:	b2da      	uxtb	r2, r3
    c2fc:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c300:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c304:	701a      	strb	r2, [r3, #0]
    c306:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c30a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c30e:	781b      	ldrb	r3, [r3, #0]
    c310:	3301      	adds	r3, #1
    c312:	b2da      	uxtb	r2, r3
    c314:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c318:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c31c:	701a      	strb	r2, [r3, #0]
    c31e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c326:	781b      	ldrb	r3, [r3, #0]
    c328:	2bff      	cmp	r3, #255	; 0xff
    c32a:	d105      	bne.n	c338 <send_debug+0x1dc>
    c32c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c330:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c334:	2200      	movs	r2, #0
    c336:	701a      	strb	r2, [r3, #0]
    c338:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c33c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c340:	781b      	ldrb	r3, [r3, #0]
    c342:	461a      	mov	r2, r3
    c344:	f24c 0330 	movw	r3, #49200	; 0xc030
    c348:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c34c:	7819      	ldrb	r1, [r3, #0]
    c34e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    c352:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c356:	5499      	strb	r1, [r3, r2]
    c358:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c35c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c360:	781a      	ldrb	r2, [r3, #0]
    c362:	f24c 0330 	movw	r3, #49200	; 0xc030
    c366:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c36a:	781b      	ldrb	r3, [r3, #0]
    c36c:	4413      	add	r3, r2
    c36e:	b2da      	uxtb	r2, r3
    c370:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c374:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c378:	701a      	strb	r2, [r3, #0]
    c37a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c37e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c382:	781a      	ldrb	r2, [r3, #0]
    c384:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c388:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c38c:	781b      	ldrb	r3, [r3, #0]
    c38e:	4413      	add	r3, r2
    c390:	b2da      	uxtb	r2, r3
    c392:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c396:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c39a:	701a      	strb	r2, [r3, #0]
    c39c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c3a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3a4:	781b      	ldrb	r3, [r3, #0]
    c3a6:	3301      	adds	r3, #1
    c3a8:	b2da      	uxtb	r2, r3
    c3aa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c3ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3b2:	701a      	strb	r2, [r3, #0]
    c3b4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c3b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3bc:	781b      	ldrb	r3, [r3, #0]
    c3be:	2bff      	cmp	r3, #255	; 0xff
    c3c0:	d105      	bne.n	c3ce <send_debug+0x272>
    c3c2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c3c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3ca:	2200      	movs	r2, #0
    c3cc:	701a      	strb	r2, [r3, #0]
    c3ce:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c3d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3d6:	781b      	ldrb	r3, [r3, #0]
    c3d8:	461a      	mov	r2, r3
    c3da:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    c3de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3e2:	7819      	ldrb	r1, [r3, #0]
    c3e4:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    c3e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3ec:	5499      	strb	r1, [r3, r2]
    c3ee:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c3f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3f6:	781a      	ldrb	r2, [r3, #0]
    c3f8:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    c3fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c400:	781b      	ldrb	r3, [r3, #0]
    c402:	4413      	add	r3, r2
    c404:	b2da      	uxtb	r2, r3
    c406:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c40a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c40e:	701a      	strb	r2, [r3, #0]
    c410:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c414:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c418:	781a      	ldrb	r2, [r3, #0]
    c41a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c41e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c422:	781b      	ldrb	r3, [r3, #0]
    c424:	4413      	add	r3, r2
    c426:	b2da      	uxtb	r2, r3
    c428:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c42c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c430:	701a      	strb	r2, [r3, #0]
    c432:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c436:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c43a:	781b      	ldrb	r3, [r3, #0]
    c43c:	3301      	adds	r3, #1
    c43e:	b2da      	uxtb	r2, r3
    c440:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c444:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c448:	701a      	strb	r2, [r3, #0]
    c44a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c44e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c452:	781b      	ldrb	r3, [r3, #0]
    c454:	2bff      	cmp	r3, #255	; 0xff
    c456:	d105      	bne.n	c464 <send_debug+0x308>
    c458:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c45c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c460:	2200      	movs	r2, #0
    c462:	701a      	strb	r2, [r3, #0]
    c464:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c468:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c46c:	781b      	ldrb	r3, [r3, #0]
    c46e:	461a      	mov	r2, r3
    c470:	f24c 1397 	movw	r3, #49559	; 0xc197
    c474:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c478:	7819      	ldrb	r1, [r3, #0]
    c47a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    c47e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c482:	5499      	strb	r1, [r3, r2]
    c484:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c488:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c48c:	781a      	ldrb	r2, [r3, #0]
    c48e:	f24c 1397 	movw	r3, #49559	; 0xc197
    c492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c496:	781b      	ldrb	r3, [r3, #0]
    c498:	4413      	add	r3, r2
    c49a:	b2da      	uxtb	r2, r3
    c49c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c4a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4a4:	701a      	strb	r2, [r3, #0]
    c4a6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c4aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4ae:	781a      	ldrb	r2, [r3, #0]
    c4b0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c4b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4b8:	781b      	ldrb	r3, [r3, #0]
    c4ba:	4413      	add	r3, r2
    c4bc:	b2da      	uxtb	r2, r3
    c4be:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c4c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4c6:	701a      	strb	r2, [r3, #0]
    c4c8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c4cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4d0:	781b      	ldrb	r3, [r3, #0]
    c4d2:	3301      	adds	r3, #1
    c4d4:	b2da      	uxtb	r2, r3
    c4d6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c4da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4de:	701a      	strb	r2, [r3, #0]
    c4e0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c4e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4e8:	781b      	ldrb	r3, [r3, #0]
    c4ea:	2bff      	cmp	r3, #255	; 0xff
    c4ec:	d105      	bne.n	c4fa <send_debug+0x39e>
    c4ee:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c4f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4f6:	2200      	movs	r2, #0
    c4f8:	701a      	strb	r2, [r3, #0]
    c4fa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c4fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c502:	781b      	ldrb	r3, [r3, #0]
    c504:	461a      	mov	r2, r3
    c506:	f64b 63e4 	movw	r3, #48868	; 0xbee4
    c50a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c50e:	7819      	ldrb	r1, [r3, #0]
    c510:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    c514:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c518:	5499      	strb	r1, [r3, r2]
    c51a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c51e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c522:	781a      	ldrb	r2, [r3, #0]
    c524:	f64b 63e4 	movw	r3, #48868	; 0xbee4
    c528:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c52c:	781b      	ldrb	r3, [r3, #0]
    c52e:	4413      	add	r3, r2
    c530:	b2da      	uxtb	r2, r3
    c532:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c536:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c53a:	701a      	strb	r2, [r3, #0]
    c53c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c540:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c544:	781a      	ldrb	r2, [r3, #0]
    c546:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c54a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c54e:	781b      	ldrb	r3, [r3, #0]
    c550:	4413      	add	r3, r2
    c552:	b2da      	uxtb	r2, r3
    c554:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c558:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c55c:	701a      	strb	r2, [r3, #0]
    c55e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c562:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c566:	781b      	ldrb	r3, [r3, #0]
    c568:	3301      	adds	r3, #1
    c56a:	b2da      	uxtb	r2, r3
    c56c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c574:	701a      	strb	r2, [r3, #0]
    c576:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c57a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c57e:	781b      	ldrb	r3, [r3, #0]
    c580:	2bff      	cmp	r3, #255	; 0xff
    c582:	d105      	bne.n	c590 <send_debug+0x434>
    c584:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c588:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c58c:	2200      	movs	r2, #0
    c58e:	701a      	strb	r2, [r3, #0]
    c590:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c594:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c598:	781b      	ldrb	r3, [r3, #0]
    c59a:	461a      	mov	r2, r3
    c59c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c5a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5a4:	7819      	ldrb	r1, [r3, #0]
    c5a6:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    c5aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5ae:	5499      	strb	r1, [r3, r2]
    c5b0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c5b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5b8:	781b      	ldrb	r3, [r3, #0]
    c5ba:	3301      	adds	r3, #1
    c5bc:	b2da      	uxtb	r2, r3
    c5be:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c5c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5c6:	701a      	strb	r2, [r3, #0]
    c5c8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c5cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5d0:	781b      	ldrb	r3, [r3, #0]
    c5d2:	2bff      	cmp	r3, #255	; 0xff
    c5d4:	d105      	bne.n	c5e2 <send_debug+0x486>
    c5d6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c5da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5de:	2200      	movs	r2, #0
    c5e0:	701a      	strb	r2, [r3, #0]
    c5e2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c5e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5ea:	781b      	ldrb	r3, [r3, #0]
    c5ec:	461a      	mov	r2, r3
    c5ee:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c5f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5f6:	7819      	ldrb	r1, [r3, #0]
    c5f8:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    c5fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c600:	5499      	strb	r1, [r3, r2]
    c602:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c606:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c60a:	781b      	ldrb	r3, [r3, #0]
    c60c:	3301      	adds	r3, #1
    c60e:	b2da      	uxtb	r2, r3
    c610:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c618:	701a      	strb	r2, [r3, #0]
    c61a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c61e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c622:	781b      	ldrb	r3, [r3, #0]
    c624:	2bff      	cmp	r3, #255	; 0xff
    c626:	d105      	bne.n	c634 <send_debug+0x4d8>
    c628:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c62c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c630:	2200      	movs	r2, #0
    c632:	701a      	strb	r2, [r3, #0]
    c634:	f242 0339 	movw	r3, #8249	; 0x2039
    c638:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c63c:	781b      	ldrb	r3, [r3, #0]
    c63e:	b2db      	uxtb	r3, r3
    c640:	f003 0310 	and.w	r3, r3, #16
    c644:	2b00      	cmp	r3, #0
    c646:	d15a      	bne.n	c6fe <send_debug+0x5a2>
    c648:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    c64c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c650:	781b      	ldrb	r3, [r3, #0]
    c652:	b2db      	uxtb	r3, r3
    c654:	461a      	mov	r2, r3
    c656:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    c65a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c65e:	5c9a      	ldrb	r2, [r3, r2]
    c660:	f64b 73fb 	movw	r3, #49147	; 0xbffb
    c664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c668:	701a      	strb	r2, [r3, #0]
    c66a:	f64b 73fc 	movw	r3, #49148	; 0xbffc
    c66e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c672:	2200      	movs	r2, #0
    c674:	701a      	strb	r2, [r3, #0]
    c676:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    c67a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c67e:	781b      	ldrb	r3, [r3, #0]
    c680:	b2db      	uxtb	r3, r3
    c682:	3301      	adds	r3, #1
    c684:	b2da      	uxtb	r2, r3
    c686:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    c68a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c68e:	701a      	strb	r2, [r3, #0]
    c690:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    c694:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c698:	781b      	ldrb	r3, [r3, #0]
    c69a:	b2db      	uxtb	r3, r3
    c69c:	2bff      	cmp	r3, #255	; 0xff
    c69e:	d105      	bne.n	c6ac <send_debug+0x550>
    c6a0:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    c6a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6a8:	2200      	movs	r2, #0
    c6aa:	701a      	strb	r2, [r3, #0]
    c6ac:	f242 0338 	movw	r3, #8248	; 0x2038
    c6b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6b4:	f242 0238 	movw	r2, #8248	; 0x2038
    c6b8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c6bc:	7812      	ldrb	r2, [r2, #0]
    c6be:	b2d2      	uxtb	r2, r2
    c6c0:	f042 0201 	orr.w	r2, r2, #1
    c6c4:	b2d2      	uxtb	r2, r2
    c6c6:	701a      	strb	r2, [r3, #0]
    c6c8:	f242 0339 	movw	r3, #8249	; 0x2039
    c6cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6d0:	f242 0239 	movw	r2, #8249	; 0x2039
    c6d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c6d8:	7812      	ldrb	r2, [r2, #0]
    c6da:	b2d2      	uxtb	r2, r2
    c6dc:	f042 0210 	orr.w	r2, r2, #16
    c6e0:	b2d2      	uxtb	r2, r2
    c6e2:	701a      	strb	r2, [r3, #0]
    c6e4:	e00b      	b.n	c6fe <send_debug+0x5a2>
    c6e6:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    c6ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6ee:	781b      	ldrb	r3, [r3, #0]
    c6f0:	3301      	adds	r3, #1
    c6f2:	b2da      	uxtb	r2, r3
    c6f4:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    c6f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6fc:	701a      	strb	r2, [r3, #0]
}
    c6fe:	46bd      	mov	sp, r7
    c700:	f85d 7b04 	ldr.w	r7, [sp], #4
    c704:	4770      	bx	lr
    c706:	bf00      	nop

0000c708 <send_nav_ref>:
void send_nav_ref(void){  //10000ms
    c708:	b480      	push	{r7}
    c70a:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 100 == 49) PERIODIC_SEND_NAVIGATION_REF();}
    c70c:	f64b 63f1 	movw	r3, #48881	; 0xbef1
    c710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c714:	781a      	ldrb	r2, [r3, #0]
    c716:	f248 531f 	movw	r3, #34079	; 0x851f
    c71a:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c71e:	fba3 1302 	umull	r1, r3, r3, r2
    c722:	095b      	lsrs	r3, r3, #5
    c724:	2164      	movs	r1, #100	; 0x64
    c726:	fb01 f303 	mul.w	r3, r1, r3
    c72a:	1ad3      	subs	r3, r2, r3
    c72c:	b2db      	uxtb	r3, r3
    c72e:	2b31      	cmp	r3, #49	; 0x31
    c730:	f040 8395 	bne.w	ce5e <send_nav_ref+0x756>
    c734:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c738:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c73c:	781a      	ldrb	r2, [r3, #0]
    c73e:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    c742:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c746:	781b      	ldrb	r3, [r3, #0]
    c748:	b2db      	uxtb	r3, r3
    c74a:	429a      	cmp	r2, r3
    c74c:	d313      	bcc.n	c776 <send_nav_ref+0x6e>
    c74e:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    c752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c756:	781b      	ldrb	r3, [r3, #0]
    c758:	b2db      	uxtb	r3, r3
    c75a:	461a      	mov	r2, r3
    c75c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c760:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c764:	781b      	ldrb	r3, [r3, #0]
    c766:	1ad3      	subs	r3, r2, r3
    c768:	33ff      	adds	r3, #255	; 0xff
    c76a:	2b0c      	cmp	r3, #12
    c76c:	bfd4      	ite	le
    c76e:	2300      	movle	r3, #0
    c770:	2301      	movgt	r3, #1
    c772:	b2db      	uxtb	r3, r3
    c774:	e011      	b.n	c79a <send_nav_ref+0x92>
    c776:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    c77a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c77e:	781b      	ldrb	r3, [r3, #0]
    c780:	b2db      	uxtb	r3, r3
    c782:	461a      	mov	r2, r3
    c784:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c788:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c78c:	781b      	ldrb	r3, [r3, #0]
    c78e:	1ad3      	subs	r3, r2, r3
    c790:	2b0c      	cmp	r3, #12
    c792:	bfd4      	ite	le
    c794:	2300      	movle	r3, #0
    c796:	2301      	movgt	r3, #1
    c798:	b2db      	uxtb	r3, r3
    c79a:	2b00      	cmp	r3, #0
    c79c:	f000 8353 	beq.w	ce46 <send_nav_ref+0x73e>
    c7a0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c7a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7a8:	781b      	ldrb	r3, [r3, #0]
    c7aa:	461a      	mov	r2, r3
    c7ac:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    c7b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7b4:	2105      	movs	r1, #5
    c7b6:	5499      	strb	r1, [r3, r2]
    c7b8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c7bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7c0:	781b      	ldrb	r3, [r3, #0]
    c7c2:	3301      	adds	r3, #1
    c7c4:	b2da      	uxtb	r2, r3
    c7c6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c7ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7ce:	701a      	strb	r2, [r3, #0]
    c7d0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c7d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7d8:	781b      	ldrb	r3, [r3, #0]
    c7da:	2bff      	cmp	r3, #255	; 0xff
    c7dc:	d105      	bne.n	c7ea <send_nav_ref+0xe2>
    c7de:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c7e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7e6:	2200      	movs	r2, #0
    c7e8:	701a      	strb	r2, [r3, #0]
    c7ea:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c7ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7f2:	781b      	ldrb	r3, [r3, #0]
    c7f4:	461a      	mov	r2, r3
    c7f6:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    c7fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7fe:	2109      	movs	r1, #9
    c800:	5499      	strb	r1, [r3, r2]
    c802:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c806:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c80a:	781b      	ldrb	r3, [r3, #0]
    c80c:	3301      	adds	r3, #1
    c80e:	b2da      	uxtb	r2, r3
    c810:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c814:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c818:	701a      	strb	r2, [r3, #0]
    c81a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c81e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c822:	781b      	ldrb	r3, [r3, #0]
    c824:	2bff      	cmp	r3, #255	; 0xff
    c826:	d105      	bne.n	c834 <send_nav_ref+0x12c>
    c828:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c82c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c830:	2200      	movs	r2, #0
    c832:	701a      	strb	r2, [r3, #0]
    c834:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c83c:	2209      	movs	r2, #9
    c83e:	701a      	strb	r2, [r3, #0]
    c840:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c848:	2209      	movs	r2, #9
    c84a:	701a      	strb	r2, [r3, #0]
    c84c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c850:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c854:	781b      	ldrb	r3, [r3, #0]
    c856:	461a      	mov	r2, r3
    c858:	f648 1398 	movw	r3, #35224	; 0x8998
    c85c:	f2c0 0301 	movt	r3, #1
    c860:	7819      	ldrb	r1, [r3, #0]
    c862:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    c866:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c86a:	5499      	strb	r1, [r3, r2]
    c86c:	f648 1398 	movw	r3, #35224	; 0x8998
    c870:	f2c0 0301 	movt	r3, #1
    c874:	781a      	ldrb	r2, [r3, #0]
    c876:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c87a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c87e:	781b      	ldrb	r3, [r3, #0]
    c880:	4413      	add	r3, r2
    c882:	b2da      	uxtb	r2, r3
    c884:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c888:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c88c:	701a      	strb	r2, [r3, #0]
    c88e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c892:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c896:	781a      	ldrb	r2, [r3, #0]
    c898:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c89c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8a0:	781b      	ldrb	r3, [r3, #0]
    c8a2:	4413      	add	r3, r2
    c8a4:	b2da      	uxtb	r2, r3
    c8a6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c8aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8ae:	701a      	strb	r2, [r3, #0]
    c8b0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c8b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8b8:	781b      	ldrb	r3, [r3, #0]
    c8ba:	3301      	adds	r3, #1
    c8bc:	b2da      	uxtb	r2, r3
    c8be:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c8c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8c6:	701a      	strb	r2, [r3, #0]
    c8c8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c8cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8d0:	781b      	ldrb	r3, [r3, #0]
    c8d2:	2bff      	cmp	r3, #255	; 0xff
    c8d4:	d105      	bne.n	c8e2 <send_nav_ref+0x1da>
    c8d6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c8da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8de:	2200      	movs	r2, #0
    c8e0:	701a      	strb	r2, [r3, #0]
    c8e2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c8e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8ea:	781b      	ldrb	r3, [r3, #0]
    c8ec:	461a      	mov	r2, r3
    c8ee:	f648 1398 	movw	r3, #35224	; 0x8998
    c8f2:	f2c0 0301 	movt	r3, #1
    c8f6:	7859      	ldrb	r1, [r3, #1]
    c8f8:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    c8fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c900:	5499      	strb	r1, [r3, r2]
    c902:	4bd2      	ldr	r3, [pc, #840]	; (cc4c <send_nav_ref+0x544>)
    c904:	781a      	ldrb	r2, [r3, #0]
    c906:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c90a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c90e:	781b      	ldrb	r3, [r3, #0]
    c910:	4413      	add	r3, r2
    c912:	b2da      	uxtb	r2, r3
    c914:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c918:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c91c:	701a      	strb	r2, [r3, #0]
    c91e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c922:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c926:	781a      	ldrb	r2, [r3, #0]
    c928:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c92c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c930:	781b      	ldrb	r3, [r3, #0]
    c932:	4413      	add	r3, r2
    c934:	b2da      	uxtb	r2, r3
    c936:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c93a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c93e:	701a      	strb	r2, [r3, #0]
    c940:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c944:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c948:	781b      	ldrb	r3, [r3, #0]
    c94a:	3301      	adds	r3, #1
    c94c:	b2da      	uxtb	r2, r3
    c94e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c952:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c956:	701a      	strb	r2, [r3, #0]
    c958:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c95c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c960:	781b      	ldrb	r3, [r3, #0]
    c962:	2bff      	cmp	r3, #255	; 0xff
    c964:	d105      	bne.n	c972 <send_nav_ref+0x26a>
    c966:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c96a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c96e:	2200      	movs	r2, #0
    c970:	701a      	strb	r2, [r3, #0]
    c972:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c976:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c97a:	781b      	ldrb	r3, [r3, #0]
    c97c:	461a      	mov	r2, r3
    c97e:	f648 1398 	movw	r3, #35224	; 0x8998
    c982:	f2c0 0301 	movt	r3, #1
    c986:	7899      	ldrb	r1, [r3, #2]
    c988:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    c98c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c990:	5499      	strb	r1, [r3, r2]
    c992:	4baf      	ldr	r3, [pc, #700]	; (cc50 <send_nav_ref+0x548>)
    c994:	781a      	ldrb	r2, [r3, #0]
    c996:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c99a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c99e:	781b      	ldrb	r3, [r3, #0]
    c9a0:	4413      	add	r3, r2
    c9a2:	b2da      	uxtb	r2, r3
    c9a4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c9a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9ac:	701a      	strb	r2, [r3, #0]
    c9ae:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c9b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9b6:	781a      	ldrb	r2, [r3, #0]
    c9b8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    c9bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9c0:	781b      	ldrb	r3, [r3, #0]
    c9c2:	4413      	add	r3, r2
    c9c4:	b2da      	uxtb	r2, r3
    c9c6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    c9ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9ce:	701a      	strb	r2, [r3, #0]
    c9d0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c9d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9d8:	781b      	ldrb	r3, [r3, #0]
    c9da:	3301      	adds	r3, #1
    c9dc:	b2da      	uxtb	r2, r3
    c9de:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c9e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9e6:	701a      	strb	r2, [r3, #0]
    c9e8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c9ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9f0:	781b      	ldrb	r3, [r3, #0]
    c9f2:	2bff      	cmp	r3, #255	; 0xff
    c9f4:	d105      	bne.n	ca02 <send_nav_ref+0x2fa>
    c9f6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    c9fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9fe:	2200      	movs	r2, #0
    ca00:	701a      	strb	r2, [r3, #0]
    ca02:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ca06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca0a:	781b      	ldrb	r3, [r3, #0]
    ca0c:	461a      	mov	r2, r3
    ca0e:	f648 1398 	movw	r3, #35224	; 0x8998
    ca12:	f2c0 0301 	movt	r3, #1
    ca16:	78d9      	ldrb	r1, [r3, #3]
    ca18:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    ca1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca20:	5499      	strb	r1, [r3, r2]
    ca22:	4b8c      	ldr	r3, [pc, #560]	; (cc54 <send_nav_ref+0x54c>)
    ca24:	781a      	ldrb	r2, [r3, #0]
    ca26:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ca2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca2e:	781b      	ldrb	r3, [r3, #0]
    ca30:	4413      	add	r3, r2
    ca32:	b2da      	uxtb	r2, r3
    ca34:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ca38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca3c:	701a      	strb	r2, [r3, #0]
    ca3e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ca42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca46:	781a      	ldrb	r2, [r3, #0]
    ca48:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ca4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca50:	781b      	ldrb	r3, [r3, #0]
    ca52:	4413      	add	r3, r2
    ca54:	b2da      	uxtb	r2, r3
    ca56:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ca5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca5e:	701a      	strb	r2, [r3, #0]
    ca60:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ca64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca68:	781b      	ldrb	r3, [r3, #0]
    ca6a:	3301      	adds	r3, #1
    ca6c:	b2da      	uxtb	r2, r3
    ca6e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ca72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca76:	701a      	strb	r2, [r3, #0]
    ca78:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ca7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca80:	781b      	ldrb	r3, [r3, #0]
    ca82:	2bff      	cmp	r3, #255	; 0xff
    ca84:	d105      	bne.n	ca92 <send_nav_ref+0x38a>
    ca86:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ca8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca8e:	2200      	movs	r2, #0
    ca90:	701a      	strb	r2, [r3, #0]
    ca92:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ca96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca9a:	781b      	ldrb	r3, [r3, #0]
    ca9c:	461a      	mov	r2, r3
    ca9e:	f648 139c 	movw	r3, #35228	; 0x899c
    caa2:	f2c0 0301 	movt	r3, #1
    caa6:	7819      	ldrb	r1, [r3, #0]
    caa8:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    caac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cab0:	5499      	strb	r1, [r3, r2]
    cab2:	f648 139c 	movw	r3, #35228	; 0x899c
    cab6:	f2c0 0301 	movt	r3, #1
    caba:	781a      	ldrb	r2, [r3, #0]
    cabc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    cac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cac4:	781b      	ldrb	r3, [r3, #0]
    cac6:	4413      	add	r3, r2
    cac8:	b2da      	uxtb	r2, r3
    caca:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    cace:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cad2:	701a      	strb	r2, [r3, #0]
    cad4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    cad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cadc:	781a      	ldrb	r2, [r3, #0]
    cade:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    cae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cae6:	781b      	ldrb	r3, [r3, #0]
    cae8:	4413      	add	r3, r2
    caea:	b2da      	uxtb	r2, r3
    caec:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    caf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caf4:	701a      	strb	r2, [r3, #0]
    caf6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cafa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cafe:	781b      	ldrb	r3, [r3, #0]
    cb00:	3301      	adds	r3, #1
    cb02:	b2da      	uxtb	r2, r3
    cb04:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cb08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb0c:	701a      	strb	r2, [r3, #0]
    cb0e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cb12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb16:	781b      	ldrb	r3, [r3, #0]
    cb18:	2bff      	cmp	r3, #255	; 0xff
    cb1a:	d105      	bne.n	cb28 <send_nav_ref+0x420>
    cb1c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cb20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb24:	2200      	movs	r2, #0
    cb26:	701a      	strb	r2, [r3, #0]
    cb28:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cb2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb30:	781b      	ldrb	r3, [r3, #0]
    cb32:	461a      	mov	r2, r3
    cb34:	f648 139c 	movw	r3, #35228	; 0x899c
    cb38:	f2c0 0301 	movt	r3, #1
    cb3c:	7859      	ldrb	r1, [r3, #1]
    cb3e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    cb42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb46:	5499      	strb	r1, [r3, r2]
    cb48:	4b43      	ldr	r3, [pc, #268]	; (cc58 <send_nav_ref+0x550>)
    cb4a:	781a      	ldrb	r2, [r3, #0]
    cb4c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    cb50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb54:	781b      	ldrb	r3, [r3, #0]
    cb56:	4413      	add	r3, r2
    cb58:	b2da      	uxtb	r2, r3
    cb5a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    cb5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb62:	701a      	strb	r2, [r3, #0]
    cb64:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    cb68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb6c:	781a      	ldrb	r2, [r3, #0]
    cb6e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    cb72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb76:	781b      	ldrb	r3, [r3, #0]
    cb78:	4413      	add	r3, r2
    cb7a:	b2da      	uxtb	r2, r3
    cb7c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    cb80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb84:	701a      	strb	r2, [r3, #0]
    cb86:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cb8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb8e:	781b      	ldrb	r3, [r3, #0]
    cb90:	3301      	adds	r3, #1
    cb92:	b2da      	uxtb	r2, r3
    cb94:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cb98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb9c:	701a      	strb	r2, [r3, #0]
    cb9e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cba6:	781b      	ldrb	r3, [r3, #0]
    cba8:	2bff      	cmp	r3, #255	; 0xff
    cbaa:	d105      	bne.n	cbb8 <send_nav_ref+0x4b0>
    cbac:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cbb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbb4:	2200      	movs	r2, #0
    cbb6:	701a      	strb	r2, [r3, #0]
    cbb8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cbbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbc0:	781b      	ldrb	r3, [r3, #0]
    cbc2:	461a      	mov	r2, r3
    cbc4:	f648 139c 	movw	r3, #35228	; 0x899c
    cbc8:	f2c0 0301 	movt	r3, #1
    cbcc:	7899      	ldrb	r1, [r3, #2]
    cbce:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    cbd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbd6:	5499      	strb	r1, [r3, r2]
    cbd8:	4b20      	ldr	r3, [pc, #128]	; (cc5c <send_nav_ref+0x554>)
    cbda:	781a      	ldrb	r2, [r3, #0]
    cbdc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    cbe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbe4:	781b      	ldrb	r3, [r3, #0]
    cbe6:	4413      	add	r3, r2
    cbe8:	b2da      	uxtb	r2, r3
    cbea:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    cbee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbf2:	701a      	strb	r2, [r3, #0]
    cbf4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    cbf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbfc:	781a      	ldrb	r2, [r3, #0]
    cbfe:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    cc02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc06:	781b      	ldrb	r3, [r3, #0]
    cc08:	4413      	add	r3, r2
    cc0a:	b2da      	uxtb	r2, r3
    cc0c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    cc10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc14:	701a      	strb	r2, [r3, #0]
    cc16:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cc1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc1e:	781b      	ldrb	r3, [r3, #0]
    cc20:	3301      	adds	r3, #1
    cc22:	b2da      	uxtb	r2, r3
    cc24:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cc28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc2c:	701a      	strb	r2, [r3, #0]
    cc2e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cc32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc36:	781b      	ldrb	r3, [r3, #0]
    cc38:	2bff      	cmp	r3, #255	; 0xff
    cc3a:	d111      	bne.n	cc60 <send_nav_ref+0x558>
    cc3c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cc40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc44:	2200      	movs	r2, #0
    cc46:	701a      	strb	r2, [r3, #0]
    cc48:	e00a      	b.n	cc60 <send_nav_ref+0x558>
    cc4a:	bf00      	nop
    cc4c:	00018999 	.word	0x00018999
    cc50:	0001899a 	.word	0x0001899a
    cc54:	0001899b 	.word	0x0001899b
    cc58:	0001899d 	.word	0x0001899d
    cc5c:	0001899e 	.word	0x0001899e
    cc60:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cc64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc68:	781b      	ldrb	r3, [r3, #0]
    cc6a:	461a      	mov	r2, r3
    cc6c:	f648 139c 	movw	r3, #35228	; 0x899c
    cc70:	f2c0 0301 	movt	r3, #1
    cc74:	78d9      	ldrb	r1, [r3, #3]
    cc76:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    cc7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc7e:	5499      	strb	r1, [r3, r2]
    cc80:	4b79      	ldr	r3, [pc, #484]	; (ce68 <send_nav_ref+0x760>)
    cc82:	781a      	ldrb	r2, [r3, #0]
    cc84:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    cc88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc8c:	781b      	ldrb	r3, [r3, #0]
    cc8e:	4413      	add	r3, r2
    cc90:	b2da      	uxtb	r2, r3
    cc92:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    cc96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc9a:	701a      	strb	r2, [r3, #0]
    cc9c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    cca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cca4:	781a      	ldrb	r2, [r3, #0]
    cca6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ccaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccae:	781b      	ldrb	r3, [r3, #0]
    ccb0:	4413      	add	r3, r2
    ccb2:	b2da      	uxtb	r2, r3
    ccb4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ccb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccbc:	701a      	strb	r2, [r3, #0]
    ccbe:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ccc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccc6:	781b      	ldrb	r3, [r3, #0]
    ccc8:	3301      	adds	r3, #1
    ccca:	b2da      	uxtb	r2, r3
    cccc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ccd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccd4:	701a      	strb	r2, [r3, #0]
    ccd6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ccda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccde:	781b      	ldrb	r3, [r3, #0]
    cce0:	2bff      	cmp	r3, #255	; 0xff
    cce2:	d105      	bne.n	ccf0 <send_nav_ref+0x5e8>
    cce4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccec:	2200      	movs	r2, #0
    ccee:	701a      	strb	r2, [r3, #0]
    ccf0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ccf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccf8:	781b      	ldrb	r3, [r3, #0]
    ccfa:	461a      	mov	r2, r3
    ccfc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    cd00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd04:	7819      	ldrb	r1, [r3, #0]
    cd06:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    cd0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd0e:	5499      	strb	r1, [r3, r2]
    cd10:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cd14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd18:	781b      	ldrb	r3, [r3, #0]
    cd1a:	3301      	adds	r3, #1
    cd1c:	b2da      	uxtb	r2, r3
    cd1e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cd22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd26:	701a      	strb	r2, [r3, #0]
    cd28:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cd2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd30:	781b      	ldrb	r3, [r3, #0]
    cd32:	2bff      	cmp	r3, #255	; 0xff
    cd34:	d105      	bne.n	cd42 <send_nav_ref+0x63a>
    cd36:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cd3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd3e:	2200      	movs	r2, #0
    cd40:	701a      	strb	r2, [r3, #0]
    cd42:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cd46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd4a:	781b      	ldrb	r3, [r3, #0]
    cd4c:	461a      	mov	r2, r3
    cd4e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    cd52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd56:	7819      	ldrb	r1, [r3, #0]
    cd58:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    cd5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd60:	5499      	strb	r1, [r3, r2]
    cd62:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cd66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd6a:	781b      	ldrb	r3, [r3, #0]
    cd6c:	3301      	adds	r3, #1
    cd6e:	b2da      	uxtb	r2, r3
    cd70:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cd74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd78:	701a      	strb	r2, [r3, #0]
    cd7a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cd7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd82:	781b      	ldrb	r3, [r3, #0]
    cd84:	2bff      	cmp	r3, #255	; 0xff
    cd86:	d105      	bne.n	cd94 <send_nav_ref+0x68c>
    cd88:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cd8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd90:	2200      	movs	r2, #0
    cd92:	701a      	strb	r2, [r3, #0]
    cd94:	f242 0339 	movw	r3, #8249	; 0x2039
    cd98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd9c:	781b      	ldrb	r3, [r3, #0]
    cd9e:	b2db      	uxtb	r3, r3
    cda0:	f003 0310 	and.w	r3, r3, #16
    cda4:	2b00      	cmp	r3, #0
    cda6:	d15a      	bne.n	ce5e <send_nav_ref+0x756>
    cda8:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    cdac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdb0:	781b      	ldrb	r3, [r3, #0]
    cdb2:	b2db      	uxtb	r3, r3
    cdb4:	461a      	mov	r2, r3
    cdb6:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    cdba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdbe:	5c9a      	ldrb	r2, [r3, r2]
    cdc0:	f64b 73fb 	movw	r3, #49147	; 0xbffb
    cdc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdc8:	701a      	strb	r2, [r3, #0]
    cdca:	f64b 73fc 	movw	r3, #49148	; 0xbffc
    cdce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdd2:	2200      	movs	r2, #0
    cdd4:	701a      	strb	r2, [r3, #0]
    cdd6:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    cdda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdde:	781b      	ldrb	r3, [r3, #0]
    cde0:	b2db      	uxtb	r3, r3
    cde2:	3301      	adds	r3, #1
    cde4:	b2da      	uxtb	r2, r3
    cde6:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    cdea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdee:	701a      	strb	r2, [r3, #0]
    cdf0:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    cdf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdf8:	781b      	ldrb	r3, [r3, #0]
    cdfa:	b2db      	uxtb	r3, r3
    cdfc:	2bff      	cmp	r3, #255	; 0xff
    cdfe:	d105      	bne.n	ce0c <send_nav_ref+0x704>
    ce00:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    ce04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce08:	2200      	movs	r2, #0
    ce0a:	701a      	strb	r2, [r3, #0]
    ce0c:	f242 0338 	movw	r3, #8248	; 0x2038
    ce10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce14:	f242 0238 	movw	r2, #8248	; 0x2038
    ce18:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ce1c:	7812      	ldrb	r2, [r2, #0]
    ce1e:	b2d2      	uxtb	r2, r2
    ce20:	f042 0201 	orr.w	r2, r2, #1
    ce24:	b2d2      	uxtb	r2, r2
    ce26:	701a      	strb	r2, [r3, #0]
    ce28:	f242 0339 	movw	r3, #8249	; 0x2039
    ce2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce30:	f242 0239 	movw	r2, #8249	; 0x2039
    ce34:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ce38:	7812      	ldrb	r2, [r2, #0]
    ce3a:	b2d2      	uxtb	r2, r2
    ce3c:	f042 0210 	orr.w	r2, r2, #16
    ce40:	b2d2      	uxtb	r2, r2
    ce42:	701a      	strb	r2, [r3, #0]
    ce44:	e00b      	b.n	ce5e <send_nav_ref+0x756>
    ce46:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    ce4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce4e:	781b      	ldrb	r3, [r3, #0]
    ce50:	3301      	adds	r3, #1
    ce52:	b2da      	uxtb	r2, r3
    ce54:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    ce58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce5c:	701a      	strb	r2, [r3, #0]
  //vPrintString("S_13 reporting_task end!\n\r");
}
    ce5e:	46bd      	mov	sp, r7
    ce60:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce64:	4770      	bx	lr
    ce66:	bf00      	nop
    ce68:	0001899f 	.word	0x0001899f

0000ce6c <inflight_calib_mode_update>:

/** \fn inline uint8_t inflight_calib_mode_update ( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t inflight_calib_mode_update ( void ) {
    ce6c:	b480      	push	{r7}
    ce6e:	b083      	sub	sp, #12
    ce70:	af00      	add	r7, sp, #0
  ModeUpdate(inflight_calib_mode, IF_CALIB_MODE_OF_PULSE(from_fbw.channels[RADIO_CALIB]));
    ce72:	f24c 0300 	movw	r3, #49152	; 0xc000
    ce76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce7a:	8a1b      	ldrh	r3, [r3, #16]
    ce7c:	b21b      	sxth	r3, r3
    ce7e:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    ce82:	db0d      	blt.n	cea0 <inflight_calib_mode_update+0x34>
    ce84:	f24c 0300 	movw	r3, #49152	; 0xc000
    ce88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce8c:	8a1b      	ldrh	r3, [r3, #16]
    ce8e:	b21a      	sxth	r2, r3
    ce90:	f640 437f 	movw	r3, #3199	; 0xc7f
    ce94:	429a      	cmp	r2, r3
    ce96:	bfd4      	ite	le
    ce98:	2300      	movle	r3, #0
    ce9a:	2301      	movgt	r3, #1
    ce9c:	b2db      	uxtb	r3, r3
    ce9e:	e000      	b.n	cea2 <inflight_calib_mode_update+0x36>
    cea0:	2302      	movs	r3, #2
    cea2:	71fb      	strb	r3, [r7, #7]
    cea4:	f24c 530c 	movw	r3, #50444	; 0xc50c
    cea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ceac:	781b      	ldrb	r3, [r3, #0]
    ceae:	79fa      	ldrb	r2, [r7, #7]
    ceb0:	429a      	cmp	r2, r3
    ceb2:	d007      	beq.n	cec4 <inflight_calib_mode_update+0x58>
    ceb4:	f24c 530c 	movw	r3, #50444	; 0xc50c
    ceb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cebc:	79fa      	ldrb	r2, [r7, #7]
    cebe:	701a      	strb	r2, [r3, #0]
    cec0:	2301      	movs	r3, #1
    cec2:	e000      	b.n	cec6 <inflight_calib_mode_update+0x5a>
    cec4:	2300      	movs	r3, #0
}
    cec6:	4618      	mov	r0, r3
    cec8:	370c      	adds	r7, #12
    ceca:	46bd      	mov	sp, r7
    cecc:	f85d 7b04 	ldr.w	r7, [sp], #4
    ced0:	4770      	bx	lr
    ced2:	bf00      	nop

0000ced4 <radio_control_task>:


/** \fn inline void radio_control_task( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
void radio_control_task( void ) {
    ced4:	b580      	push	{r7, lr}
    ced6:	b082      	sub	sp, #8
    ced8:	af00      	add	r7, sp, #0
  bool_t calib_mode_changed;
	//vPrintString("S_3 radio_control_task start! \n\r"); //SunnyBeike
    //add by wanbo
    link_fbw_receive_valid = 1;
    ceda:	f24c 032e 	movw	r3, #49198	; 0xc02e
    cede:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cee2:	2201      	movs	r2, #1
    cee4:	701a      	strb	r2, [r3, #0]
  if (link_fbw_receive_valid) {
    cee6:	f24c 032e 	movw	r3, #49198	; 0xc02e
    ceea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ceee:	781b      	ldrb	r3, [r3, #0]
    cef0:	b2db      	uxtb	r3, r3
    cef2:	2b00      	cmp	r3, #0
    cef4:	f000 83b8 	beq.w	d668 <radio_control_task+0x794>
    uint8_t mode_changed = FALSE;
    cef8:	2300      	movs	r3, #0
    cefa:	71fb      	strb	r3, [r7, #7]
    copy_from_to_fbw();
    cefc:	f7fa fa9c 	bl	7438 <copy_from_to_fbw>
    if ((bit_is_set(from_fbw.status, RADIO_REALLY_LOST) && (pprz_mode == PPRZ_MODE_AUTO1 || pprz_mode == PPRZ_MODE_MANUAL)) || too_far_from_home) {
    cf00:	4b3a      	ldr	r3, [pc, #232]	; (cfec <radio_control_task+0x118>)
    cf02:	781b      	ldrb	r3, [r3, #0]
    cf04:	b2db      	uxtb	r3, r3
    cf06:	f003 0302 	and.w	r3, r3, #2
    cf0a:	2b00      	cmp	r3, #0
    cf0c:	d00d      	beq.n	cf2a <radio_control_task+0x56>
    cf0e:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    cf12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf16:	781b      	ldrb	r3, [r3, #0]
    cf18:	2b01      	cmp	r3, #1
    cf1a:	d00d      	beq.n	cf38 <radio_control_task+0x64>
    cf1c:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    cf20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf24:	781b      	ldrb	r3, [r3, #0]
    cf26:	2b00      	cmp	r3, #0
    cf28:	d006      	beq.n	cf38 <radio_control_task+0x64>
    cf2a:	f24c 238c 	movw	r3, #49804	; 0xc28c
    cf2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf32:	781b      	ldrb	r3, [r3, #0]
    cf34:	2b00      	cmp	r3, #0
    cf36:	d007      	beq.n	cf48 <radio_control_task+0x74>
      pprz_mode = PPRZ_MODE_HOME;
    cf38:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    cf3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf40:	2203      	movs	r2, #3
    cf42:	701a      	strb	r2, [r3, #0]
      mode_changed = TRUE;
    cf44:	2301      	movs	r3, #1
    cf46:	71fb      	strb	r3, [r7, #7]
    }
    // modified by wanbo
    //if (bit_is_set(from_fbw.status, AVERAGED_CHANNELS_SENT)) 
    {
      bool_t pprz_mode_changed = pprz_mode_update();
    cf48:	f7fa f950 	bl	71ec <pprz_mode_update>
    cf4c:	4603      	mov	r3, r0
    cf4e:	71bb      	strb	r3, [r7, #6]
      mode_changed |= pprz_mode_changed;
    cf50:	79fa      	ldrb	r2, [r7, #7]
    cf52:	79bb      	ldrb	r3, [r7, #6]
    cf54:	4313      	orrs	r3, r2
    cf56:	71fb      	strb	r3, [r7, #7]
#ifdef RADIO_LLS
      mode_changed |= ir_estim_mode_update();
    cf58:	f7fa f994 	bl	7284 <ir_estim_mode_update>
    cf5c:	4603      	mov	r3, r0
    cf5e:	461a      	mov	r2, r3
    cf60:	79fb      	ldrb	r3, [r7, #7]
    cf62:	4313      	orrs	r3, r2
    cf64:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef RADIO_CALIB
      calib_mode_changed = inflight_calib_mode_update();
    cf66:	f7ff ff81 	bl	ce6c <inflight_calib_mode_update>
    cf6a:	4603      	mov	r3, r0
    cf6c:	717b      	strb	r3, [r7, #5]
      inflight_calib(calib_mode_changed || pprz_mode_changed);
    cf6e:	797b      	ldrb	r3, [r7, #5]
    cf70:	2b00      	cmp	r3, #0
    cf72:	d102      	bne.n	cf7a <radio_control_task+0xa6>
    cf74:	79bb      	ldrb	r3, [r7, #6]
    cf76:	2b00      	cmp	r3, #0
    cf78:	d001      	beq.n	cf7e <radio_control_task+0xaa>
    cf7a:	2301      	movs	r3, #1
    cf7c:	e000      	b.n	cf80 <radio_control_task+0xac>
    cf7e:	2300      	movs	r3, #0
    cf80:	b2db      	uxtb	r3, r3
    cf82:	4618      	mov	r0, r3
    cf84:	f008 fba0 	bl	156c8 <inflight_calib>
      mode_changed |= calib_mode_changed;
    cf88:	79fa      	ldrb	r2, [r7, #7]
    cf8a:	797b      	ldrb	r3, [r7, #5]
    cf8c:	4313      	orrs	r3, r2
    cf8e:	71fb      	strb	r3, [r7, #7]
#endif
    }
    mode_changed |= mcu1_status_update();
    cf90:	f7fa f9a0 	bl	72d4 <mcu1_status_update>
    cf94:	4603      	mov	r3, r0
    cf96:	461a      	mov	r2, r3
    cf98:	79fb      	ldrb	r3, [r7, #7]
    cf9a:	4313      	orrs	r3, r2
    cf9c:	71fb      	strb	r3, [r7, #7]
    // add by wanbo
    mode_changed = 1;
    cf9e:	2301      	movs	r3, #1
    cfa0:	71fb      	strb	r3, [r7, #7]
    if ( mode_changed )
    cfa2:	79fb      	ldrb	r3, [r7, #7]
    cfa4:	2b00      	cmp	r3, #0
    cfa6:	f000 82bc 	beq.w	d522 <radio_control_task+0x64e>
      DOWNLINK_SEND_PPRZ_MODE(&pprz_mode, &vertical_mode, &inflight_calib_mode, &mcu1_status, &ir_estim_mode);
    cfaa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cfae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfb2:	781a      	ldrb	r2, [r3, #0]
    cfb4:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    cfb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfbc:	781b      	ldrb	r3, [r3, #0]
    cfbe:	b2db      	uxtb	r3, r3
    cfc0:	429a      	cmp	r2, r3
    cfc2:	d315      	bcc.n	cff0 <radio_control_task+0x11c>
    cfc4:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    cfc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfcc:	781b      	ldrb	r3, [r3, #0]
    cfce:	b2db      	uxtb	r3, r3
    cfd0:	461a      	mov	r2, r3
    cfd2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    cfd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfda:	781b      	ldrb	r3, [r3, #0]
    cfdc:	1ad3      	subs	r3, r2, r3
    cfde:	33ff      	adds	r3, #255	; 0xff
    cfe0:	2b09      	cmp	r3, #9
    cfe2:	bfd4      	ite	le
    cfe4:	2300      	movle	r3, #0
    cfe6:	2301      	movgt	r3, #1
    cfe8:	b2db      	uxtb	r3, r3
    cfea:	e013      	b.n	d014 <radio_control_task+0x140>
    cfec:	2004c013 	.word	0x2004c013
    cff0:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    cff4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cff8:	781b      	ldrb	r3, [r3, #0]
    cffa:	b2db      	uxtb	r3, r3
    cffc:	461a      	mov	r2, r3
    cffe:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d002:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d006:	781b      	ldrb	r3, [r3, #0]
    d008:	1ad3      	subs	r3, r2, r3
    d00a:	2b09      	cmp	r3, #9
    d00c:	bfd4      	ite	le
    d00e:	2300      	movle	r3, #0
    d010:	2301      	movgt	r3, #1
    d012:	b2db      	uxtb	r3, r3
    d014:	2b00      	cmp	r3, #0
    d016:	f000 8278 	beq.w	d50a <radio_control_task+0x636>
    d01a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d01e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d022:	781b      	ldrb	r3, [r3, #0]
    d024:	461a      	mov	r2, r3
    d026:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    d02a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d02e:	2105      	movs	r1, #5
    d030:	5499      	strb	r1, [r3, r2]
    d032:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d036:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d03a:	781b      	ldrb	r3, [r3, #0]
    d03c:	3301      	adds	r3, #1
    d03e:	b2da      	uxtb	r2, r3
    d040:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d044:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d048:	701a      	strb	r2, [r3, #0]
    d04a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d04e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d052:	781b      	ldrb	r3, [r3, #0]
    d054:	2bff      	cmp	r3, #255	; 0xff
    d056:	d105      	bne.n	d064 <radio_control_task+0x190>
    d058:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d05c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d060:	2200      	movs	r2, #0
    d062:	701a      	strb	r2, [r3, #0]
    d064:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d068:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d06c:	781b      	ldrb	r3, [r3, #0]
    d06e:	461a      	mov	r2, r3
    d070:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    d074:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d078:	210b      	movs	r1, #11
    d07a:	5499      	strb	r1, [r3, r2]
    d07c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d080:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d084:	781b      	ldrb	r3, [r3, #0]
    d086:	3301      	adds	r3, #1
    d088:	b2da      	uxtb	r2, r3
    d08a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d08e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d092:	701a      	strb	r2, [r3, #0]
    d094:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d098:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d09c:	781b      	ldrb	r3, [r3, #0]
    d09e:	2bff      	cmp	r3, #255	; 0xff
    d0a0:	d105      	bne.n	d0ae <radio_control_task+0x1da>
    d0a2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d0a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0aa:	2200      	movs	r2, #0
    d0ac:	701a      	strb	r2, [r3, #0]
    d0ae:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d0b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0b6:	220b      	movs	r2, #11
    d0b8:	701a      	strb	r2, [r3, #0]
    d0ba:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d0be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0c2:	220b      	movs	r2, #11
    d0c4:	701a      	strb	r2, [r3, #0]
    d0c6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d0ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0ce:	781b      	ldrb	r3, [r3, #0]
    d0d0:	461a      	mov	r2, r3
    d0d2:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    d0d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0da:	7819      	ldrb	r1, [r3, #0]
    d0dc:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    d0e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0e4:	5499      	strb	r1, [r3, r2]
    d0e6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d0ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0ee:	781a      	ldrb	r2, [r3, #0]
    d0f0:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    d0f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0f8:	781b      	ldrb	r3, [r3, #0]
    d0fa:	4413      	add	r3, r2
    d0fc:	b2da      	uxtb	r2, r3
    d0fe:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d102:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d106:	701a      	strb	r2, [r3, #0]
    d108:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d10c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d110:	781a      	ldrb	r2, [r3, #0]
    d112:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d116:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d11a:	781b      	ldrb	r3, [r3, #0]
    d11c:	4413      	add	r3, r2
    d11e:	b2da      	uxtb	r2, r3
    d120:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d124:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d128:	701a      	strb	r2, [r3, #0]
    d12a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d12e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d132:	781b      	ldrb	r3, [r3, #0]
    d134:	3301      	adds	r3, #1
    d136:	b2da      	uxtb	r2, r3
    d138:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d13c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d140:	701a      	strb	r2, [r3, #0]
    d142:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d146:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d14a:	781b      	ldrb	r3, [r3, #0]
    d14c:	2bff      	cmp	r3, #255	; 0xff
    d14e:	d105      	bne.n	d15c <radio_control_task+0x288>
    d150:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d154:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d158:	2200      	movs	r2, #0
    d15a:	701a      	strb	r2, [r3, #0]
    d15c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d164:	781b      	ldrb	r3, [r3, #0]
    d166:	461a      	mov	r2, r3
    d168:	f64b 63dd 	movw	r3, #48861	; 0xbedd
    d16c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d170:	7819      	ldrb	r1, [r3, #0]
    d172:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    d176:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d17a:	5499      	strb	r1, [r3, r2]
    d17c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d180:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d184:	781a      	ldrb	r2, [r3, #0]
    d186:	f64b 63dd 	movw	r3, #48861	; 0xbedd
    d18a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d18e:	781b      	ldrb	r3, [r3, #0]
    d190:	4413      	add	r3, r2
    d192:	b2da      	uxtb	r2, r3
    d194:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d198:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d19c:	701a      	strb	r2, [r3, #0]
    d19e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d1a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1a6:	781a      	ldrb	r2, [r3, #0]
    d1a8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d1ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1b0:	781b      	ldrb	r3, [r3, #0]
    d1b2:	4413      	add	r3, r2
    d1b4:	b2da      	uxtb	r2, r3
    d1b6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d1ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1be:	701a      	strb	r2, [r3, #0]
    d1c0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d1c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1c8:	781b      	ldrb	r3, [r3, #0]
    d1ca:	3301      	adds	r3, #1
    d1cc:	b2da      	uxtb	r2, r3
    d1ce:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d1d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1d6:	701a      	strb	r2, [r3, #0]
    d1d8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d1dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1e0:	781b      	ldrb	r3, [r3, #0]
    d1e2:	2bff      	cmp	r3, #255	; 0xff
    d1e4:	d105      	bne.n	d1f2 <radio_control_task+0x31e>
    d1e6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d1ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1ee:	2200      	movs	r2, #0
    d1f0:	701a      	strb	r2, [r3, #0]
    d1f2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d1f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1fa:	781b      	ldrb	r3, [r3, #0]
    d1fc:	461a      	mov	r2, r3
    d1fe:	f24c 530c 	movw	r3, #50444	; 0xc50c
    d202:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d206:	7819      	ldrb	r1, [r3, #0]
    d208:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    d20c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d210:	5499      	strb	r1, [r3, r2]
    d212:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d216:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d21a:	781a      	ldrb	r2, [r3, #0]
    d21c:	f24c 530c 	movw	r3, #50444	; 0xc50c
    d220:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d224:	781b      	ldrb	r3, [r3, #0]
    d226:	4413      	add	r3, r2
    d228:	b2da      	uxtb	r2, r3
    d22a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d22e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d232:	701a      	strb	r2, [r3, #0]
    d234:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d238:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d23c:	781a      	ldrb	r2, [r3, #0]
    d23e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d246:	781b      	ldrb	r3, [r3, #0]
    d248:	4413      	add	r3, r2
    d24a:	b2da      	uxtb	r2, r3
    d24c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d250:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d254:	701a      	strb	r2, [r3, #0]
    d256:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d25a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d25e:	781b      	ldrb	r3, [r3, #0]
    d260:	3301      	adds	r3, #1
    d262:	b2da      	uxtb	r2, r3
    d264:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d268:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d26c:	701a      	strb	r2, [r3, #0]
    d26e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d272:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d276:	781b      	ldrb	r3, [r3, #0]
    d278:	2bff      	cmp	r3, #255	; 0xff
    d27a:	d105      	bne.n	d288 <radio_control_task+0x3b4>
    d27c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d280:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d284:	2200      	movs	r2, #0
    d286:	701a      	strb	r2, [r3, #0]
    d288:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d28c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d290:	781b      	ldrb	r3, [r3, #0]
    d292:	461a      	mov	r2, r3
    d294:	f64b 63e3 	movw	r3, #48867	; 0xbee3
    d298:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d29c:	7819      	ldrb	r1, [r3, #0]
    d29e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    d2a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2a6:	5499      	strb	r1, [r3, r2]
    d2a8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d2ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2b0:	781a      	ldrb	r2, [r3, #0]
    d2b2:	f64b 63e3 	movw	r3, #48867	; 0xbee3
    d2b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2ba:	781b      	ldrb	r3, [r3, #0]
    d2bc:	4413      	add	r3, r2
    d2be:	b2da      	uxtb	r2, r3
    d2c0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d2c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2c8:	701a      	strb	r2, [r3, #0]
    d2ca:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d2ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2d2:	781a      	ldrb	r2, [r3, #0]
    d2d4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d2d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2dc:	781b      	ldrb	r3, [r3, #0]
    d2de:	4413      	add	r3, r2
    d2e0:	b2da      	uxtb	r2, r3
    d2e2:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d2e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2ea:	701a      	strb	r2, [r3, #0]
    d2ec:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d2f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2f4:	781b      	ldrb	r3, [r3, #0]
    d2f6:	3301      	adds	r3, #1
    d2f8:	b2da      	uxtb	r2, r3
    d2fa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d2fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d302:	701a      	strb	r2, [r3, #0]
    d304:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d308:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d30c:	781b      	ldrb	r3, [r3, #0]
    d30e:	2bff      	cmp	r3, #255	; 0xff
    d310:	d105      	bne.n	d31e <radio_control_task+0x44a>
    d312:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d316:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d31a:	2200      	movs	r2, #0
    d31c:	701a      	strb	r2, [r3, #0]
    d31e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d326:	781b      	ldrb	r3, [r3, #0]
    d328:	461a      	mov	r2, r3
    d32a:	f240 33ec 	movw	r3, #1004	; 0x3ec
    d32e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d332:	7819      	ldrb	r1, [r3, #0]
    d334:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    d338:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d33c:	5499      	strb	r1, [r3, r2]
    d33e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d342:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d346:	781a      	ldrb	r2, [r3, #0]
    d348:	f240 33ec 	movw	r3, #1004	; 0x3ec
    d34c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d350:	781b      	ldrb	r3, [r3, #0]
    d352:	4413      	add	r3, r2
    d354:	b2da      	uxtb	r2, r3
    d356:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d35a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d35e:	701a      	strb	r2, [r3, #0]
    d360:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d364:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d368:	781a      	ldrb	r2, [r3, #0]
    d36a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d36e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d372:	781b      	ldrb	r3, [r3, #0]
    d374:	4413      	add	r3, r2
    d376:	b2da      	uxtb	r2, r3
    d378:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d37c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d380:	701a      	strb	r2, [r3, #0]
    d382:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d386:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d38a:	781b      	ldrb	r3, [r3, #0]
    d38c:	3301      	adds	r3, #1
    d38e:	b2da      	uxtb	r2, r3
    d390:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d394:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d398:	701a      	strb	r2, [r3, #0]
    d39a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d39e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3a2:	781b      	ldrb	r3, [r3, #0]
    d3a4:	2bff      	cmp	r3, #255	; 0xff
    d3a6:	d105      	bne.n	d3b4 <radio_control_task+0x4e0>
    d3a8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d3ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3b0:	2200      	movs	r2, #0
    d3b2:	701a      	strb	r2, [r3, #0]
    d3b4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d3b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3bc:	781b      	ldrb	r3, [r3, #0]
    d3be:	461a      	mov	r2, r3
    d3c0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d3c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3c8:	7819      	ldrb	r1, [r3, #0]
    d3ca:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    d3ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3d2:	5499      	strb	r1, [r3, r2]
    d3d4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d3d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3dc:	781b      	ldrb	r3, [r3, #0]
    d3de:	3301      	adds	r3, #1
    d3e0:	b2da      	uxtb	r2, r3
    d3e2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d3e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3ea:	701a      	strb	r2, [r3, #0]
    d3ec:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d3f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3f4:	781b      	ldrb	r3, [r3, #0]
    d3f6:	2bff      	cmp	r3, #255	; 0xff
    d3f8:	d105      	bne.n	d406 <radio_control_task+0x532>
    d3fa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d3fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d402:	2200      	movs	r2, #0
    d404:	701a      	strb	r2, [r3, #0]
    d406:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d40a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d40e:	781b      	ldrb	r3, [r3, #0]
    d410:	461a      	mov	r2, r3
    d412:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d41a:	7819      	ldrb	r1, [r3, #0]
    d41c:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    d420:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d424:	5499      	strb	r1, [r3, r2]
    d426:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d42a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d42e:	781b      	ldrb	r3, [r3, #0]
    d430:	3301      	adds	r3, #1
    d432:	b2da      	uxtb	r2, r3
    d434:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d438:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d43c:	701a      	strb	r2, [r3, #0]
    d43e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d442:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d446:	781b      	ldrb	r3, [r3, #0]
    d448:	2bff      	cmp	r3, #255	; 0xff
    d44a:	d105      	bne.n	d458 <radio_control_task+0x584>
    d44c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d450:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d454:	2200      	movs	r2, #0
    d456:	701a      	strb	r2, [r3, #0]
    d458:	f242 0339 	movw	r3, #8249	; 0x2039
    d45c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d460:	781b      	ldrb	r3, [r3, #0]
    d462:	b2db      	uxtb	r3, r3
    d464:	f003 0310 	and.w	r3, r3, #16
    d468:	2b00      	cmp	r3, #0
    d46a:	d15a      	bne.n	d522 <radio_control_task+0x64e>
    d46c:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    d470:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d474:	781b      	ldrb	r3, [r3, #0]
    d476:	b2db      	uxtb	r3, r3
    d478:	461a      	mov	r2, r3
    d47a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    d47e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d482:	5c9a      	ldrb	r2, [r3, r2]
    d484:	f64b 73fb 	movw	r3, #49147	; 0xbffb
    d488:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d48c:	701a      	strb	r2, [r3, #0]
    d48e:	f64b 73fc 	movw	r3, #49148	; 0xbffc
    d492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d496:	2200      	movs	r2, #0
    d498:	701a      	strb	r2, [r3, #0]
    d49a:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    d49e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4a2:	781b      	ldrb	r3, [r3, #0]
    d4a4:	b2db      	uxtb	r3, r3
    d4a6:	3301      	adds	r3, #1
    d4a8:	b2da      	uxtb	r2, r3
    d4aa:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    d4ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4b2:	701a      	strb	r2, [r3, #0]
    d4b4:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    d4b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4bc:	781b      	ldrb	r3, [r3, #0]
    d4be:	b2db      	uxtb	r3, r3
    d4c0:	2bff      	cmp	r3, #255	; 0xff
    d4c2:	d105      	bne.n	d4d0 <radio_control_task+0x5fc>
    d4c4:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    d4c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4cc:	2200      	movs	r2, #0
    d4ce:	701a      	strb	r2, [r3, #0]
    d4d0:	f242 0338 	movw	r3, #8248	; 0x2038
    d4d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4d8:	f242 0238 	movw	r2, #8248	; 0x2038
    d4dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d4e0:	7812      	ldrb	r2, [r2, #0]
    d4e2:	b2d2      	uxtb	r2, r2
    d4e4:	f042 0201 	orr.w	r2, r2, #1
    d4e8:	b2d2      	uxtb	r2, r2
    d4ea:	701a      	strb	r2, [r3, #0]
    d4ec:	f242 0339 	movw	r3, #8249	; 0x2039
    d4f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4f4:	f242 0239 	movw	r2, #8249	; 0x2039
    d4f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d4fc:	7812      	ldrb	r2, [r2, #0]
    d4fe:	b2d2      	uxtb	r2, r2
    d500:	f042 0210 	orr.w	r2, r2, #16
    d504:	b2d2      	uxtb	r2, r2
    d506:	701a      	strb	r2, [r3, #0]
    d508:	e00b      	b.n	d522 <radio_control_task+0x64e>
    d50a:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    d50e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d512:	781b      	ldrb	r3, [r3, #0]
    d514:	3301      	adds	r3, #1
    d516:	b2da      	uxtb	r2, r3
    d518:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    d51c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d520:	701a      	strb	r2, [r3, #0]
      
    // add by wanbo
    //if (pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_roll = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_ROLL], 0., -0.6);
    d522:	f24c 0300 	movw	r3, #49152	; 0xc000
    d526:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d52a:	885b      	ldrh	r3, [r3, #2]
    d52c:	b21b      	sxth	r3, r3
    d52e:	4618      	mov	r0, r3
    d530:	f00a fe98 	bl	18264 <__aeabi_i2f>
    d534:	4603      	mov	r3, r0
    d536:	4618      	mov	r0, r3
    d538:	f04f 0100 	mov.w	r1, #0
    d53c:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d540:	f00a ff98 	bl	18474 <__aeabi_fdiv>
    d544:	4603      	mov	r3, r0
    d546:	4618      	mov	r0, r3
    d548:	f00a fa4c 	bl	179e4 <__aeabi_f2d>
    d54c:	4602      	mov	r2, r0
    d54e:	460b      	mov	r3, r1
    d550:	4610      	mov	r0, r2
    d552:	4619      	mov	r1, r3
    d554:	a346      	add	r3, pc, #280	; (adr r3, d670 <radio_control_task+0x79c>)
    d556:	e9d3 2300 	ldrd	r2, r3, [r3]
    d55a:	f00a fa97 	bl	17a8c <__aeabi_dmul>
    d55e:	4602      	mov	r2, r0
    d560:	460b      	mov	r3, r1
    d562:	4610      	mov	r0, r2
    d564:	4619      	mov	r1, r3
    d566:	f04f 0200 	mov.w	r2, #0
    d56a:	f04f 0300 	mov.w	r3, #0
    d56e:	f00a f8db 	bl	17728 <__adddf3>
    d572:	4602      	mov	r2, r0
    d574:	460b      	mov	r3, r1
    d576:	4610      	mov	r0, r2
    d578:	4619      	mov	r1, r3
    d57a:	f00a fd69 	bl	18050 <__aeabi_d2f>
    d57e:	4602      	mov	r2, r0
    d580:	f24c 2324 	movw	r3, #49700	; 0xc224
    d584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d588:	601a      	str	r2, [r3, #0]
      desired_pitch = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_PITCH], 0., 0.5);
    d58a:	f24c 0300 	movw	r3, #49152	; 0xc000
    d58e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d592:	889b      	ldrh	r3, [r3, #4]
    d594:	b21b      	sxth	r3, r3
    d596:	4618      	mov	r0, r3
    d598:	f00a fe64 	bl	18264 <__aeabi_i2f>
    d59c:	4603      	mov	r3, r0
    d59e:	4618      	mov	r0, r3
    d5a0:	f04f 0100 	mov.w	r1, #0
    d5a4:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d5a8:	f00a ff64 	bl	18474 <__aeabi_fdiv>
    d5ac:	4603      	mov	r3, r0
    d5ae:	4618      	mov	r0, r3
    d5b0:	f00a fa18 	bl	179e4 <__aeabi_f2d>
    d5b4:	4602      	mov	r2, r0
    d5b6:	460b      	mov	r3, r1
    d5b8:	4610      	mov	r0, r2
    d5ba:	4619      	mov	r1, r3
    d5bc:	f04f 0200 	mov.w	r2, #0
    d5c0:	f04f 0300 	mov.w	r3, #0
    d5c4:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
    d5c8:	f00a fa60 	bl	17a8c <__aeabi_dmul>
    d5cc:	4602      	mov	r2, r0
    d5ce:	460b      	mov	r3, r1
    d5d0:	4610      	mov	r0, r2
    d5d2:	4619      	mov	r1, r3
    d5d4:	f04f 0200 	mov.w	r2, #0
    d5d8:	f04f 0300 	mov.w	r3, #0
    d5dc:	f00a f8a4 	bl	17728 <__adddf3>
    d5e0:	4602      	mov	r2, r0
    d5e2:	460b      	mov	r3, r1
    d5e4:	4610      	mov	r0, r2
    d5e6:	4619      	mov	r1, r3
    d5e8:	f00a fd32 	bl	18050 <__aeabi_d2f>
    d5ec:	4602      	mov	r2, r0
    d5ee:	f24c 2328 	movw	r3, #49704	; 0xc228
    d5f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5f6:	601a      	str	r2, [r3, #0]
    } // else asynchronously set by course_pid_run()

    // add by wanbo
   // if (pprz_mode == PPRZ_MODE_MANUAL || pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_gaz = from_fbw.channels[RADIO_THROTTLE];
    d5f8:	f24c 0300 	movw	r3, #49152	; 0xc000
    d5fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d600:	881a      	ldrh	r2, [r3, #0]
    d602:	f24c 232c 	movw	r3, #49708	; 0xc22c
    d606:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d60a:	801a      	strh	r2, [r3, #0]
      pitch_pgain = PITCH_PGAIN * ( 1 - 1. / 3. * from_fbw.channels[RADIO_THROTTLE] / MAX_PPRZ);
#endif /* ANTON_MAGICAL_MISTERY_GAINS */
    }
    // else asynchronously set by climb_pid_run();

    mcu1_ppm_cpt = from_fbw.ppm_cpt;
    d60c:	f24c 0300 	movw	r3, #49152	; 0xc000
    d610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d614:	7c9a      	ldrb	r2, [r3, #18]
    d616:	f64b 63e4 	movw	r3, #48868	; 0xbee4
    d61a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d61e:	701a      	strb	r2, [r3, #0]
    vsupply = from_fbw.vsupply;
    d620:	f24c 0300 	movw	r3, #49152	; 0xc000
    d624:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d628:	7d5a      	ldrb	r2, [r3, #21]
    d62a:	f64b 63e2 	movw	r3, #48866	; 0xbee2
    d62e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d632:	701a      	strb	r2, [r3, #0]

    events_update();
    d634:	f7f9 fe7e 	bl	7334 <events_update>

    // add by wanbo
    //if (!estimator_flight_time) 
    {
      ground_calibrate();
    d638:	f7f8 fc7e 	bl	5f38 <ground_calibrate>
      if (pprz_mode == PPRZ_MODE_AUTO2 && from_fbw.channels[RADIO_THROTTLE] > GAZ_THRESHOLD_TAKEOFF) {
    d63c:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    d640:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d644:	781b      	ldrb	r3, [r3, #0]
    d646:	2b02      	cmp	r3, #2
    d648:	d10e      	bne.n	d668 <radio_control_task+0x794>
    d64a:	f24c 0300 	movw	r3, #49152	; 0xc000
    d64e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d652:	881b      	ldrh	r3, [r3, #0]
    d654:	b21b      	sxth	r3, r3
    d656:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
    d65a:	dd05      	ble.n	d668 <radio_control_task+0x794>
	launch = TRUE;
    d65c:	f64b 63f0 	movw	r3, #48880	; 0xbef0
    d660:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d664:	2201      	movs	r2, #1
    d666:	701a      	strb	r2, [r3, #0]
      }
    }
  }

	//vPrintString("S_3 radio_control_task end! \n\r"); //SunnyBeike
}
    d668:	3708      	adds	r7, #8
    d66a:	46bd      	mov	sp, r7
    d66c:	bd80      	pop	{r7, pc}
    d66e:	bf00      	nop
    d670:	33333333 	.word	0x33333333
    d674:	bfe33333 	.word	0xbfe33333

0000d678 <navigation_update>:

/** \fn void navigation_task( void )
 *  \brief Compute desired_course
 */
void navigation_update( void ) {
    d678:	b580      	push	{r7, lr}
    d67a:	af00      	add	r7, sp, #0

  /* Default to keep compatibility with previous behaviour */
  //vPrintString("S_17 Navigation task start!\n\r");
  lateral_mode = LATERAL_MODE_COURSE;
    d67c:	f64b 63de 	movw	r3, #48862	; 0xbede
    d680:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d684:	2203      	movs	r2, #3
    d686:	701a      	strb	r2, [r3, #0]
  if (pprz_mode == PPRZ_MODE_HOME)
    d688:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    d68c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d690:	781b      	ldrb	r3, [r3, #0]
    d692:	2b03      	cmp	r3, #3
    d694:	d102      	bne.n	d69c <navigation_update+0x24>
    nav_home();
    d696:	f007 fa9b 	bl	14bd0 <nav_home>
    d69a:	e001      	b.n	d6a0 <navigation_update+0x28>
  else
    nav_update();
    d69c:	f007 fabe 	bl	14c1c <nav_update>
}
    d6a0:	bd80      	pop	{r7, pc}
    d6a2:	bf00      	nop

0000d6a4 <send_nav_values>:

void send_nav_values(void){
    d6a4:	b480      	push	{r7}
    d6a6:	af00      	add	r7, sp, #0
  
  DOWNLINK_SEND_NAVIGATION(&nav_block, &nav_stage, &estimator_x, &estimator_y, &desired_course, &dist2_to_wp, &course_pgain, &dist2_to_home);
    d6a8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d6ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6b0:	781a      	ldrb	r2, [r3, #0]
    d6b2:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    d6b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6ba:	781b      	ldrb	r3, [r3, #0]
    d6bc:	b2db      	uxtb	r3, r3
    d6be:	429a      	cmp	r2, r3
    d6c0:	d313      	bcc.n	d6ea <send_nav_values+0x46>
    d6c2:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    d6c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6ca:	781b      	ldrb	r3, [r3, #0]
    d6cc:	b2db      	uxtb	r3, r3
    d6ce:	461a      	mov	r2, r3
    d6d0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d6d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6d8:	781b      	ldrb	r3, [r3, #0]
    d6da:	1ad3      	subs	r3, r2, r3
    d6dc:	33ff      	adds	r3, #255	; 0xff
    d6de:	2b1e      	cmp	r3, #30
    d6e0:	bfd4      	ite	le
    d6e2:	2300      	movle	r3, #0
    d6e4:	2301      	movgt	r3, #1
    d6e6:	b2db      	uxtb	r3, r3
    d6e8:	e011      	b.n	d70e <send_nav_values+0x6a>
    d6ea:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    d6ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6f2:	781b      	ldrb	r3, [r3, #0]
    d6f4:	b2db      	uxtb	r3, r3
    d6f6:	461a      	mov	r2, r3
    d6f8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d6fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d700:	781b      	ldrb	r3, [r3, #0]
    d702:	1ad3      	subs	r3, r2, r3
    d704:	2b1e      	cmp	r3, #30
    d706:	bfd4      	ite	le
    d708:	2300      	movle	r3, #0
    d70a:	2301      	movgt	r3, #1
    d70c:	b2db      	uxtb	r3, r3
    d70e:	2b00      	cmp	r3, #0
    d710:	f001 8094 	beq.w	e83c <send_nav_values+0x1198>
    d714:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d718:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d71c:	781b      	ldrb	r3, [r3, #0]
    d71e:	461a      	mov	r2, r3
    d720:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    d724:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d728:	2105      	movs	r1, #5
    d72a:	5499      	strb	r1, [r3, r2]
    d72c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d730:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d734:	781b      	ldrb	r3, [r3, #0]
    d736:	3301      	adds	r3, #1
    d738:	b2da      	uxtb	r2, r3
    d73a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d73e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d742:	701a      	strb	r2, [r3, #0]
    d744:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d748:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d74c:	781b      	ldrb	r3, [r3, #0]
    d74e:	2bff      	cmp	r3, #255	; 0xff
    d750:	d105      	bne.n	d75e <send_nav_values+0xba>
    d752:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d756:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d75a:	2200      	movs	r2, #0
    d75c:	701a      	strb	r2, [r3, #0]
    d75e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d766:	781b      	ldrb	r3, [r3, #0]
    d768:	461a      	mov	r2, r3
    d76a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    d76e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d772:	210a      	movs	r1, #10
    d774:	5499      	strb	r1, [r3, r2]
    d776:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d77a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d77e:	781b      	ldrb	r3, [r3, #0]
    d780:	3301      	adds	r3, #1
    d782:	b2da      	uxtb	r2, r3
    d784:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d788:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d78c:	701a      	strb	r2, [r3, #0]
    d78e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d792:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d796:	781b      	ldrb	r3, [r3, #0]
    d798:	2bff      	cmp	r3, #255	; 0xff
    d79a:	d105      	bne.n	d7a8 <send_nav_values+0x104>
    d79c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d7a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7a4:	2200      	movs	r2, #0
    d7a6:	701a      	strb	r2, [r3, #0]
    d7a8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d7ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7b0:	220a      	movs	r2, #10
    d7b2:	701a      	strb	r2, [r3, #0]
    d7b4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d7b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7bc:	220a      	movs	r2, #10
    d7be:	701a      	strb	r2, [r3, #0]
    d7c0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d7c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7c8:	781b      	ldrb	r3, [r3, #0]
    d7ca:	461a      	mov	r2, r3
    d7cc:	f24c 2351 	movw	r3, #49745	; 0xc251
    d7d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7d4:	7819      	ldrb	r1, [r3, #0]
    d7d6:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    d7da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7de:	5499      	strb	r1, [r3, r2]
    d7e0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d7e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7e8:	781a      	ldrb	r2, [r3, #0]
    d7ea:	f24c 2351 	movw	r3, #49745	; 0xc251
    d7ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7f2:	781b      	ldrb	r3, [r3, #0]
    d7f4:	4413      	add	r3, r2
    d7f6:	b2da      	uxtb	r2, r3
    d7f8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d7fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d800:	701a      	strb	r2, [r3, #0]
    d802:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d806:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d80a:	781a      	ldrb	r2, [r3, #0]
    d80c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d810:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d814:	781b      	ldrb	r3, [r3, #0]
    d816:	4413      	add	r3, r2
    d818:	b2da      	uxtb	r2, r3
    d81a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d81e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d822:	701a      	strb	r2, [r3, #0]
    d824:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d828:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d82c:	781b      	ldrb	r3, [r3, #0]
    d82e:	3301      	adds	r3, #1
    d830:	b2da      	uxtb	r2, r3
    d832:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d836:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d83a:	701a      	strb	r2, [r3, #0]
    d83c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d840:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d844:	781b      	ldrb	r3, [r3, #0]
    d846:	2bff      	cmp	r3, #255	; 0xff
    d848:	d105      	bne.n	d856 <send_nav_values+0x1b2>
    d84a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d84e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d852:	2200      	movs	r2, #0
    d854:	701a      	strb	r2, [r3, #0]
    d856:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d85a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d85e:	781b      	ldrb	r3, [r3, #0]
    d860:	461a      	mov	r2, r3
    d862:	f24c 2350 	movw	r3, #49744	; 0xc250
    d866:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d86a:	7819      	ldrb	r1, [r3, #0]
    d86c:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    d870:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d874:	5499      	strb	r1, [r3, r2]
    d876:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d87a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d87e:	781a      	ldrb	r2, [r3, #0]
    d880:	f24c 2350 	movw	r3, #49744	; 0xc250
    d884:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d888:	781b      	ldrb	r3, [r3, #0]
    d88a:	4413      	add	r3, r2
    d88c:	b2da      	uxtb	r2, r3
    d88e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d892:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d896:	701a      	strb	r2, [r3, #0]
    d898:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d89c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8a0:	781a      	ldrb	r2, [r3, #0]
    d8a2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d8a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8aa:	781b      	ldrb	r3, [r3, #0]
    d8ac:	4413      	add	r3, r2
    d8ae:	b2da      	uxtb	r2, r3
    d8b0:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d8b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8b8:	701a      	strb	r2, [r3, #0]
    d8ba:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d8be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8c2:	781b      	ldrb	r3, [r3, #0]
    d8c4:	3301      	adds	r3, #1
    d8c6:	b2da      	uxtb	r2, r3
    d8c8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d8cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8d0:	701a      	strb	r2, [r3, #0]
    d8d2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d8d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8da:	781b      	ldrb	r3, [r3, #0]
    d8dc:	2bff      	cmp	r3, #255	; 0xff
    d8de:	d105      	bne.n	d8ec <send_nav_values+0x248>
    d8e0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d8e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8e8:	2200      	movs	r2, #0
    d8ea:	701a      	strb	r2, [r3, #0]
    d8ec:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d8f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8f4:	781b      	ldrb	r3, [r3, #0]
    d8f6:	461a      	mov	r2, r3
    d8f8:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
    d8fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d900:	7819      	ldrb	r1, [r3, #0]
    d902:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    d906:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d90a:	5499      	strb	r1, [r3, r2]
    d90c:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
    d910:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d914:	781a      	ldrb	r2, [r3, #0]
    d916:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d91a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d91e:	781b      	ldrb	r3, [r3, #0]
    d920:	4413      	add	r3, r2
    d922:	b2da      	uxtb	r2, r3
    d924:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d928:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d92c:	701a      	strb	r2, [r3, #0]
    d92e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d932:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d936:	781a      	ldrb	r2, [r3, #0]
    d938:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d93c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d940:	781b      	ldrb	r3, [r3, #0]
    d942:	4413      	add	r3, r2
    d944:	b2da      	uxtb	r2, r3
    d946:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d94a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d94e:	701a      	strb	r2, [r3, #0]
    d950:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d958:	781b      	ldrb	r3, [r3, #0]
    d95a:	3301      	adds	r3, #1
    d95c:	b2da      	uxtb	r2, r3
    d95e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d962:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d966:	701a      	strb	r2, [r3, #0]
    d968:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d96c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d970:	781b      	ldrb	r3, [r3, #0]
    d972:	2bff      	cmp	r3, #255	; 0xff
    d974:	d105      	bne.n	d982 <send_nav_values+0x2de>
    d976:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d97a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d97e:	2200      	movs	r2, #0
    d980:	701a      	strb	r2, [r3, #0]
    d982:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d98a:	781b      	ldrb	r3, [r3, #0]
    d98c:	461a      	mov	r2, r3
    d98e:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
    d992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d996:	7859      	ldrb	r1, [r3, #1]
    d998:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    d99c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9a0:	5499      	strb	r1, [r3, r2]
    d9a2:	4bd2      	ldr	r3, [pc, #840]	; (dcec <send_nav_values+0x648>)
    d9a4:	781a      	ldrb	r2, [r3, #0]
    d9a6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d9aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9ae:	781b      	ldrb	r3, [r3, #0]
    d9b0:	4413      	add	r3, r2
    d9b2:	b2da      	uxtb	r2, r3
    d9b4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d9b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9bc:	701a      	strb	r2, [r3, #0]
    d9be:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d9c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9c6:	781a      	ldrb	r2, [r3, #0]
    d9c8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    d9cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9d0:	781b      	ldrb	r3, [r3, #0]
    d9d2:	4413      	add	r3, r2
    d9d4:	b2da      	uxtb	r2, r3
    d9d6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    d9da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9de:	701a      	strb	r2, [r3, #0]
    d9e0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d9e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9e8:	781b      	ldrb	r3, [r3, #0]
    d9ea:	3301      	adds	r3, #1
    d9ec:	b2da      	uxtb	r2, r3
    d9ee:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d9f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9f6:	701a      	strb	r2, [r3, #0]
    d9f8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    d9fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da00:	781b      	ldrb	r3, [r3, #0]
    da02:	2bff      	cmp	r3, #255	; 0xff
    da04:	d105      	bne.n	da12 <send_nav_values+0x36e>
    da06:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    da0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da0e:	2200      	movs	r2, #0
    da10:	701a      	strb	r2, [r3, #0]
    da12:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    da16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da1a:	781b      	ldrb	r3, [r3, #0]
    da1c:	461a      	mov	r2, r3
    da1e:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
    da22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da26:	7899      	ldrb	r1, [r3, #2]
    da28:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    da2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da30:	5499      	strb	r1, [r3, r2]
    da32:	4baf      	ldr	r3, [pc, #700]	; (dcf0 <send_nav_values+0x64c>)
    da34:	781a      	ldrb	r2, [r3, #0]
    da36:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    da3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da3e:	781b      	ldrb	r3, [r3, #0]
    da40:	4413      	add	r3, r2
    da42:	b2da      	uxtb	r2, r3
    da44:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    da48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da4c:	701a      	strb	r2, [r3, #0]
    da4e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    da52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da56:	781a      	ldrb	r2, [r3, #0]
    da58:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    da5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da60:	781b      	ldrb	r3, [r3, #0]
    da62:	4413      	add	r3, r2
    da64:	b2da      	uxtb	r2, r3
    da66:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    da6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da6e:	701a      	strb	r2, [r3, #0]
    da70:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    da74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da78:	781b      	ldrb	r3, [r3, #0]
    da7a:	3301      	adds	r3, #1
    da7c:	b2da      	uxtb	r2, r3
    da7e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    da82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da86:	701a      	strb	r2, [r3, #0]
    da88:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    da8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da90:	781b      	ldrb	r3, [r3, #0]
    da92:	2bff      	cmp	r3, #255	; 0xff
    da94:	d105      	bne.n	daa2 <send_nav_values+0x3fe>
    da96:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    da9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da9e:	2200      	movs	r2, #0
    daa0:	701a      	strb	r2, [r3, #0]
    daa2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    daa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daaa:	781b      	ldrb	r3, [r3, #0]
    daac:	461a      	mov	r2, r3
    daae:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
    dab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dab6:	78d9      	ldrb	r1, [r3, #3]
    dab8:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    dabc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dac0:	5499      	strb	r1, [r3, r2]
    dac2:	4b8c      	ldr	r3, [pc, #560]	; (dcf4 <send_nav_values+0x650>)
    dac4:	781a      	ldrb	r2, [r3, #0]
    dac6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    daca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dace:	781b      	ldrb	r3, [r3, #0]
    dad0:	4413      	add	r3, r2
    dad2:	b2da      	uxtb	r2, r3
    dad4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    dad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dadc:	701a      	strb	r2, [r3, #0]
    dade:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    dae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dae6:	781a      	ldrb	r2, [r3, #0]
    dae8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    daec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daf0:	781b      	ldrb	r3, [r3, #0]
    daf2:	4413      	add	r3, r2
    daf4:	b2da      	uxtb	r2, r3
    daf6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    dafa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dafe:	701a      	strb	r2, [r3, #0]
    db00:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    db04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db08:	781b      	ldrb	r3, [r3, #0]
    db0a:	3301      	adds	r3, #1
    db0c:	b2da      	uxtb	r2, r3
    db0e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    db12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db16:	701a      	strb	r2, [r3, #0]
    db18:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    db1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db20:	781b      	ldrb	r3, [r3, #0]
    db22:	2bff      	cmp	r3, #255	; 0xff
    db24:	d105      	bne.n	db32 <send_nav_values+0x48e>
    db26:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    db2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db2e:	2200      	movs	r2, #0
    db30:	701a      	strb	r2, [r3, #0]
    db32:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    db36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db3a:	781b      	ldrb	r3, [r3, #0]
    db3c:	461a      	mov	r2, r3
    db3e:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
    db42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db46:	7819      	ldrb	r1, [r3, #0]
    db48:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    db4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db50:	5499      	strb	r1, [r3, r2]
    db52:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
    db56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db5a:	781a      	ldrb	r2, [r3, #0]
    db5c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    db60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db64:	781b      	ldrb	r3, [r3, #0]
    db66:	4413      	add	r3, r2
    db68:	b2da      	uxtb	r2, r3
    db6a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    db6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db72:	701a      	strb	r2, [r3, #0]
    db74:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    db78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db7c:	781a      	ldrb	r2, [r3, #0]
    db7e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    db82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db86:	781b      	ldrb	r3, [r3, #0]
    db88:	4413      	add	r3, r2
    db8a:	b2da      	uxtb	r2, r3
    db8c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    db90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db94:	701a      	strb	r2, [r3, #0]
    db96:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    db9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db9e:	781b      	ldrb	r3, [r3, #0]
    dba0:	3301      	adds	r3, #1
    dba2:	b2da      	uxtb	r2, r3
    dba4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbac:	701a      	strb	r2, [r3, #0]
    dbae:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dbb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbb6:	781b      	ldrb	r3, [r3, #0]
    dbb8:	2bff      	cmp	r3, #255	; 0xff
    dbba:	d105      	bne.n	dbc8 <send_nav_values+0x524>
    dbbc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dbc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbc4:	2200      	movs	r2, #0
    dbc6:	701a      	strb	r2, [r3, #0]
    dbc8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dbcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbd0:	781b      	ldrb	r3, [r3, #0]
    dbd2:	461a      	mov	r2, r3
    dbd4:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
    dbd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbdc:	7859      	ldrb	r1, [r3, #1]
    dbde:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    dbe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbe6:	5499      	strb	r1, [r3, r2]
    dbe8:	4b43      	ldr	r3, [pc, #268]	; (dcf8 <send_nav_values+0x654>)
    dbea:	781a      	ldrb	r2, [r3, #0]
    dbec:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    dbf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbf4:	781b      	ldrb	r3, [r3, #0]
    dbf6:	4413      	add	r3, r2
    dbf8:	b2da      	uxtb	r2, r3
    dbfa:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    dbfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc02:	701a      	strb	r2, [r3, #0]
    dc04:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    dc08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc0c:	781a      	ldrb	r2, [r3, #0]
    dc0e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    dc12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc16:	781b      	ldrb	r3, [r3, #0]
    dc18:	4413      	add	r3, r2
    dc1a:	b2da      	uxtb	r2, r3
    dc1c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    dc20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc24:	701a      	strb	r2, [r3, #0]
    dc26:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dc2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc2e:	781b      	ldrb	r3, [r3, #0]
    dc30:	3301      	adds	r3, #1
    dc32:	b2da      	uxtb	r2, r3
    dc34:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dc38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc3c:	701a      	strb	r2, [r3, #0]
    dc3e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dc42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc46:	781b      	ldrb	r3, [r3, #0]
    dc48:	2bff      	cmp	r3, #255	; 0xff
    dc4a:	d105      	bne.n	dc58 <send_nav_values+0x5b4>
    dc4c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dc50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc54:	2200      	movs	r2, #0
    dc56:	701a      	strb	r2, [r3, #0]
    dc58:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dc5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc60:	781b      	ldrb	r3, [r3, #0]
    dc62:	461a      	mov	r2, r3
    dc64:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
    dc68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc6c:	7899      	ldrb	r1, [r3, #2]
    dc6e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    dc72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc76:	5499      	strb	r1, [r3, r2]
    dc78:	4b20      	ldr	r3, [pc, #128]	; (dcfc <send_nav_values+0x658>)
    dc7a:	781a      	ldrb	r2, [r3, #0]
    dc7c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    dc80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc84:	781b      	ldrb	r3, [r3, #0]
    dc86:	4413      	add	r3, r2
    dc88:	b2da      	uxtb	r2, r3
    dc8a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    dc8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc92:	701a      	strb	r2, [r3, #0]
    dc94:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    dc98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc9c:	781a      	ldrb	r2, [r3, #0]
    dc9e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    dca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dca6:	781b      	ldrb	r3, [r3, #0]
    dca8:	4413      	add	r3, r2
    dcaa:	b2da      	uxtb	r2, r3
    dcac:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    dcb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcb4:	701a      	strb	r2, [r3, #0]
    dcb6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dcba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcbe:	781b      	ldrb	r3, [r3, #0]
    dcc0:	3301      	adds	r3, #1
    dcc2:	b2da      	uxtb	r2, r3
    dcc4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dcc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dccc:	701a      	strb	r2, [r3, #0]
    dcce:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dcd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcd6:	781b      	ldrb	r3, [r3, #0]
    dcd8:	2bff      	cmp	r3, #255	; 0xff
    dcda:	d111      	bne.n	dd00 <send_nav_values+0x65c>
    dcdc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dce0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dce4:	2200      	movs	r2, #0
    dce6:	701a      	strb	r2, [r3, #0]
    dce8:	e00a      	b.n	dd00 <send_nav_values+0x65c>
    dcea:	bf00      	nop
    dcec:	2004c4ad 	.word	0x2004c4ad
    dcf0:	2004c4ae 	.word	0x2004c4ae
    dcf4:	2004c4af 	.word	0x2004c4af
    dcf8:	2004c4b1 	.word	0x2004c4b1
    dcfc:	2004c4b2 	.word	0x2004c4b2
    dd00:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dd04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd08:	781b      	ldrb	r3, [r3, #0]
    dd0a:	461a      	mov	r2, r3
    dd0c:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
    dd10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd14:	78d9      	ldrb	r1, [r3, #3]
    dd16:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    dd1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd1e:	5499      	strb	r1, [r3, r2]
    dd20:	4bd3      	ldr	r3, [pc, #844]	; (e070 <send_nav_values+0x9cc>)
    dd22:	781a      	ldrb	r2, [r3, #0]
    dd24:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    dd28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd2c:	781b      	ldrb	r3, [r3, #0]
    dd2e:	4413      	add	r3, r2
    dd30:	b2da      	uxtb	r2, r3
    dd32:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    dd36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd3a:	701a      	strb	r2, [r3, #0]
    dd3c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    dd40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd44:	781a      	ldrb	r2, [r3, #0]
    dd46:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    dd4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd4e:	781b      	ldrb	r3, [r3, #0]
    dd50:	4413      	add	r3, r2
    dd52:	b2da      	uxtb	r2, r3
    dd54:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    dd58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd5c:	701a      	strb	r2, [r3, #0]
    dd5e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dd62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd66:	781b      	ldrb	r3, [r3, #0]
    dd68:	3301      	adds	r3, #1
    dd6a:	b2da      	uxtb	r2, r3
    dd6c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dd70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd74:	701a      	strb	r2, [r3, #0]
    dd76:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dd7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd7e:	781b      	ldrb	r3, [r3, #0]
    dd80:	2bff      	cmp	r3, #255	; 0xff
    dd82:	d105      	bne.n	dd90 <send_nav_values+0x6ec>
    dd84:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dd88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd8c:	2200      	movs	r2, #0
    dd8e:	701a      	strb	r2, [r3, #0]
    dd90:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dd94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd98:	781b      	ldrb	r3, [r3, #0]
    dd9a:	461a      	mov	r2, r3
    dd9c:	f24c 233c 	movw	r3, #49724	; 0xc23c
    dda0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dda4:	7819      	ldrb	r1, [r3, #0]
    dda6:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    ddaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddae:	5499      	strb	r1, [r3, r2]
    ddb0:	f24c 233c 	movw	r3, #49724	; 0xc23c
    ddb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddb8:	781a      	ldrb	r2, [r3, #0]
    ddba:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ddbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddc2:	781b      	ldrb	r3, [r3, #0]
    ddc4:	4413      	add	r3, r2
    ddc6:	b2da      	uxtb	r2, r3
    ddc8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ddcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddd0:	701a      	strb	r2, [r3, #0]
    ddd2:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ddd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddda:	781a      	ldrb	r2, [r3, #0]
    dddc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    dde0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dde4:	781b      	ldrb	r3, [r3, #0]
    dde6:	4413      	add	r3, r2
    dde8:	b2da      	uxtb	r2, r3
    ddea:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ddee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddf2:	701a      	strb	r2, [r3, #0]
    ddf4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ddf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddfc:	781b      	ldrb	r3, [r3, #0]
    ddfe:	3301      	adds	r3, #1
    de00:	b2da      	uxtb	r2, r3
    de02:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    de06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de0a:	701a      	strb	r2, [r3, #0]
    de0c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    de10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de14:	781b      	ldrb	r3, [r3, #0]
    de16:	2bff      	cmp	r3, #255	; 0xff
    de18:	d105      	bne.n	de26 <send_nav_values+0x782>
    de1a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    de1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de22:	2200      	movs	r2, #0
    de24:	701a      	strb	r2, [r3, #0]
    de26:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    de2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de2e:	781b      	ldrb	r3, [r3, #0]
    de30:	461a      	mov	r2, r3
    de32:	f24c 233c 	movw	r3, #49724	; 0xc23c
    de36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de3a:	7859      	ldrb	r1, [r3, #1]
    de3c:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    de40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de44:	5499      	strb	r1, [r3, r2]
    de46:	4b8b      	ldr	r3, [pc, #556]	; (e074 <send_nav_values+0x9d0>)
    de48:	781a      	ldrb	r2, [r3, #0]
    de4a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    de4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de52:	781b      	ldrb	r3, [r3, #0]
    de54:	4413      	add	r3, r2
    de56:	b2da      	uxtb	r2, r3
    de58:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    de5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de60:	701a      	strb	r2, [r3, #0]
    de62:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    de66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de6a:	781a      	ldrb	r2, [r3, #0]
    de6c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    de70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de74:	781b      	ldrb	r3, [r3, #0]
    de76:	4413      	add	r3, r2
    de78:	b2da      	uxtb	r2, r3
    de7a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    de7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de82:	701a      	strb	r2, [r3, #0]
    de84:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    de88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de8c:	781b      	ldrb	r3, [r3, #0]
    de8e:	3301      	adds	r3, #1
    de90:	b2da      	uxtb	r2, r3
    de92:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    de96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de9a:	701a      	strb	r2, [r3, #0]
    de9c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dea4:	781b      	ldrb	r3, [r3, #0]
    dea6:	2bff      	cmp	r3, #255	; 0xff
    dea8:	d105      	bne.n	deb6 <send_nav_values+0x812>
    deaa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    deae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deb2:	2200      	movs	r2, #0
    deb4:	701a      	strb	r2, [r3, #0]
    deb6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    deba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    debe:	781b      	ldrb	r3, [r3, #0]
    dec0:	461a      	mov	r2, r3
    dec2:	f24c 233c 	movw	r3, #49724	; 0xc23c
    dec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deca:	7899      	ldrb	r1, [r3, #2]
    decc:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    ded0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ded4:	5499      	strb	r1, [r3, r2]
    ded6:	4b68      	ldr	r3, [pc, #416]	; (e078 <send_nav_values+0x9d4>)
    ded8:	781a      	ldrb	r2, [r3, #0]
    deda:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    dede:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dee2:	781b      	ldrb	r3, [r3, #0]
    dee4:	4413      	add	r3, r2
    dee6:	b2da      	uxtb	r2, r3
    dee8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    deec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    def0:	701a      	strb	r2, [r3, #0]
    def2:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    def6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    defa:	781a      	ldrb	r2, [r3, #0]
    defc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    df00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df04:	781b      	ldrb	r3, [r3, #0]
    df06:	4413      	add	r3, r2
    df08:	b2da      	uxtb	r2, r3
    df0a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    df0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df12:	701a      	strb	r2, [r3, #0]
    df14:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    df18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df1c:	781b      	ldrb	r3, [r3, #0]
    df1e:	3301      	adds	r3, #1
    df20:	b2da      	uxtb	r2, r3
    df22:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    df26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df2a:	701a      	strb	r2, [r3, #0]
    df2c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    df30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df34:	781b      	ldrb	r3, [r3, #0]
    df36:	2bff      	cmp	r3, #255	; 0xff
    df38:	d105      	bne.n	df46 <send_nav_values+0x8a2>
    df3a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    df3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df42:	2200      	movs	r2, #0
    df44:	701a      	strb	r2, [r3, #0]
    df46:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    df4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df4e:	781b      	ldrb	r3, [r3, #0]
    df50:	461a      	mov	r2, r3
    df52:	f24c 233c 	movw	r3, #49724	; 0xc23c
    df56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df5a:	78d9      	ldrb	r1, [r3, #3]
    df5c:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    df60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df64:	5499      	strb	r1, [r3, r2]
    df66:	4b45      	ldr	r3, [pc, #276]	; (e07c <send_nav_values+0x9d8>)
    df68:	781a      	ldrb	r2, [r3, #0]
    df6a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    df6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df72:	781b      	ldrb	r3, [r3, #0]
    df74:	4413      	add	r3, r2
    df76:	b2da      	uxtb	r2, r3
    df78:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    df7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df80:	701a      	strb	r2, [r3, #0]
    df82:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    df86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df8a:	781a      	ldrb	r2, [r3, #0]
    df8c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    df90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df94:	781b      	ldrb	r3, [r3, #0]
    df96:	4413      	add	r3, r2
    df98:	b2da      	uxtb	r2, r3
    df9a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    df9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfa2:	701a      	strb	r2, [r3, #0]
    dfa4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dfa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfac:	781b      	ldrb	r3, [r3, #0]
    dfae:	3301      	adds	r3, #1
    dfb0:	b2da      	uxtb	r2, r3
    dfb2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dfb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfba:	701a      	strb	r2, [r3, #0]
    dfbc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dfc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfc4:	781b      	ldrb	r3, [r3, #0]
    dfc6:	2bff      	cmp	r3, #255	; 0xff
    dfc8:	d105      	bne.n	dfd6 <send_nav_values+0x932>
    dfca:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dfce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfd2:	2200      	movs	r2, #0
    dfd4:	701a      	strb	r2, [r3, #0]
    dfd6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    dfda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfde:	781b      	ldrb	r3, [r3, #0]
    dfe0:	461a      	mov	r2, r3
    dfe2:	f24c 2384 	movw	r3, #49796	; 0xc284
    dfe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfea:	7819      	ldrb	r1, [r3, #0]
    dfec:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    dff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dff4:	5499      	strb	r1, [r3, r2]
    dff6:	f24c 2384 	movw	r3, #49796	; 0xc284
    dffa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dffe:	781a      	ldrb	r2, [r3, #0]
    e000:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e004:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e008:	781b      	ldrb	r3, [r3, #0]
    e00a:	4413      	add	r3, r2
    e00c:	b2da      	uxtb	r2, r3
    e00e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e012:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e016:	701a      	strb	r2, [r3, #0]
    e018:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e01c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e020:	781a      	ldrb	r2, [r3, #0]
    e022:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e026:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e02a:	781b      	ldrb	r3, [r3, #0]
    e02c:	4413      	add	r3, r2
    e02e:	b2da      	uxtb	r2, r3
    e030:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e034:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e038:	701a      	strb	r2, [r3, #0]
    e03a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e03e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e042:	781b      	ldrb	r3, [r3, #0]
    e044:	3301      	adds	r3, #1
    e046:	b2da      	uxtb	r2, r3
    e048:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e04c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e050:	701a      	strb	r2, [r3, #0]
    e052:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e056:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e05a:	781b      	ldrb	r3, [r3, #0]
    e05c:	2bff      	cmp	r3, #255	; 0xff
    e05e:	d10f      	bne.n	e080 <send_nav_values+0x9dc>
    e060:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e064:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e068:	2200      	movs	r2, #0
    e06a:	701a      	strb	r2, [r3, #0]
    e06c:	e008      	b.n	e080 <send_nav_values+0x9dc>
    e06e:	bf00      	nop
    e070:	2004c4b3 	.word	0x2004c4b3
    e074:	2004c23d 	.word	0x2004c23d
    e078:	2004c23e 	.word	0x2004c23e
    e07c:	2004c23f 	.word	0x2004c23f
    e080:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e084:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e088:	781b      	ldrb	r3, [r3, #0]
    e08a:	461a      	mov	r2, r3
    e08c:	f24c 2384 	movw	r3, #49796	; 0xc284
    e090:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e094:	7859      	ldrb	r1, [r3, #1]
    e096:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    e09a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e09e:	5499      	strb	r1, [r3, r2]
    e0a0:	4bd1      	ldr	r3, [pc, #836]	; (e3e8 <send_nav_values+0xd44>)
    e0a2:	781a      	ldrb	r2, [r3, #0]
    e0a4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e0a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0ac:	781b      	ldrb	r3, [r3, #0]
    e0ae:	4413      	add	r3, r2
    e0b0:	b2da      	uxtb	r2, r3
    e0b2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e0b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0ba:	701a      	strb	r2, [r3, #0]
    e0bc:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e0c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0c4:	781a      	ldrb	r2, [r3, #0]
    e0c6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e0ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0ce:	781b      	ldrb	r3, [r3, #0]
    e0d0:	4413      	add	r3, r2
    e0d2:	b2da      	uxtb	r2, r3
    e0d4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e0d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0dc:	701a      	strb	r2, [r3, #0]
    e0de:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e0e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0e6:	781b      	ldrb	r3, [r3, #0]
    e0e8:	3301      	adds	r3, #1
    e0ea:	b2da      	uxtb	r2, r3
    e0ec:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e0f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0f4:	701a      	strb	r2, [r3, #0]
    e0f6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e0fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0fe:	781b      	ldrb	r3, [r3, #0]
    e100:	2bff      	cmp	r3, #255	; 0xff
    e102:	d105      	bne.n	e110 <send_nav_values+0xa6c>
    e104:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e108:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e10c:	2200      	movs	r2, #0
    e10e:	701a      	strb	r2, [r3, #0]
    e110:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e118:	781b      	ldrb	r3, [r3, #0]
    e11a:	461a      	mov	r2, r3
    e11c:	f24c 2384 	movw	r3, #49796	; 0xc284
    e120:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e124:	7899      	ldrb	r1, [r3, #2]
    e126:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    e12a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e12e:	5499      	strb	r1, [r3, r2]
    e130:	4bae      	ldr	r3, [pc, #696]	; (e3ec <send_nav_values+0xd48>)
    e132:	781a      	ldrb	r2, [r3, #0]
    e134:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e138:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e13c:	781b      	ldrb	r3, [r3, #0]
    e13e:	4413      	add	r3, r2
    e140:	b2da      	uxtb	r2, r3
    e142:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e146:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e14a:	701a      	strb	r2, [r3, #0]
    e14c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e150:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e154:	781a      	ldrb	r2, [r3, #0]
    e156:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e15a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e15e:	781b      	ldrb	r3, [r3, #0]
    e160:	4413      	add	r3, r2
    e162:	b2da      	uxtb	r2, r3
    e164:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e168:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e16c:	701a      	strb	r2, [r3, #0]
    e16e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e172:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e176:	781b      	ldrb	r3, [r3, #0]
    e178:	3301      	adds	r3, #1
    e17a:	b2da      	uxtb	r2, r3
    e17c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e180:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e184:	701a      	strb	r2, [r3, #0]
    e186:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e18a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e18e:	781b      	ldrb	r3, [r3, #0]
    e190:	2bff      	cmp	r3, #255	; 0xff
    e192:	d105      	bne.n	e1a0 <send_nav_values+0xafc>
    e194:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e198:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e19c:	2200      	movs	r2, #0
    e19e:	701a      	strb	r2, [r3, #0]
    e1a0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e1a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1a8:	781b      	ldrb	r3, [r3, #0]
    e1aa:	461a      	mov	r2, r3
    e1ac:	f24c 2384 	movw	r3, #49796	; 0xc284
    e1b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1b4:	78d9      	ldrb	r1, [r3, #3]
    e1b6:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    e1ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1be:	5499      	strb	r1, [r3, r2]
    e1c0:	4b8b      	ldr	r3, [pc, #556]	; (e3f0 <send_nav_values+0xd4c>)
    e1c2:	781a      	ldrb	r2, [r3, #0]
    e1c4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e1c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1cc:	781b      	ldrb	r3, [r3, #0]
    e1ce:	4413      	add	r3, r2
    e1d0:	b2da      	uxtb	r2, r3
    e1d2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e1d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1da:	701a      	strb	r2, [r3, #0]
    e1dc:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e1e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1e4:	781a      	ldrb	r2, [r3, #0]
    e1e6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e1ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1ee:	781b      	ldrb	r3, [r3, #0]
    e1f0:	4413      	add	r3, r2
    e1f2:	b2da      	uxtb	r2, r3
    e1f4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e1f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1fc:	701a      	strb	r2, [r3, #0]
    e1fe:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e202:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e206:	781b      	ldrb	r3, [r3, #0]
    e208:	3301      	adds	r3, #1
    e20a:	b2da      	uxtb	r2, r3
    e20c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e210:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e214:	701a      	strb	r2, [r3, #0]
    e216:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e21a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e21e:	781b      	ldrb	r3, [r3, #0]
    e220:	2bff      	cmp	r3, #255	; 0xff
    e222:	d105      	bne.n	e230 <send_nav_values+0xb8c>
    e224:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e228:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e22c:	2200      	movs	r2, #0
    e22e:	701a      	strb	r2, [r3, #0]
    e230:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e234:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e238:	781b      	ldrb	r3, [r3, #0]
    e23a:	461a      	mov	r2, r3
    e23c:	f240 4308 	movw	r3, #1032	; 0x408
    e240:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e244:	7819      	ldrb	r1, [r3, #0]
    e246:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    e24a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e24e:	5499      	strb	r1, [r3, r2]
    e250:	f240 4308 	movw	r3, #1032	; 0x408
    e254:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e258:	781a      	ldrb	r2, [r3, #0]
    e25a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e25e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e262:	781b      	ldrb	r3, [r3, #0]
    e264:	4413      	add	r3, r2
    e266:	b2da      	uxtb	r2, r3
    e268:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e26c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e270:	701a      	strb	r2, [r3, #0]
    e272:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e276:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e27a:	781a      	ldrb	r2, [r3, #0]
    e27c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e280:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e284:	781b      	ldrb	r3, [r3, #0]
    e286:	4413      	add	r3, r2
    e288:	b2da      	uxtb	r2, r3
    e28a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e28e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e292:	701a      	strb	r2, [r3, #0]
    e294:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e298:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e29c:	781b      	ldrb	r3, [r3, #0]
    e29e:	3301      	adds	r3, #1
    e2a0:	b2da      	uxtb	r2, r3
    e2a2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e2a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2aa:	701a      	strb	r2, [r3, #0]
    e2ac:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e2b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2b4:	781b      	ldrb	r3, [r3, #0]
    e2b6:	2bff      	cmp	r3, #255	; 0xff
    e2b8:	d105      	bne.n	e2c6 <send_nav_values+0xc22>
    e2ba:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e2be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2c2:	2200      	movs	r2, #0
    e2c4:	701a      	strb	r2, [r3, #0]
    e2c6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e2ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2ce:	781b      	ldrb	r3, [r3, #0]
    e2d0:	461a      	mov	r2, r3
    e2d2:	f240 4308 	movw	r3, #1032	; 0x408
    e2d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2da:	7859      	ldrb	r1, [r3, #1]
    e2dc:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    e2e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2e4:	5499      	strb	r1, [r3, r2]
    e2e6:	4b43      	ldr	r3, [pc, #268]	; (e3f4 <send_nav_values+0xd50>)
    e2e8:	781a      	ldrb	r2, [r3, #0]
    e2ea:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e2ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2f2:	781b      	ldrb	r3, [r3, #0]
    e2f4:	4413      	add	r3, r2
    e2f6:	b2da      	uxtb	r2, r3
    e2f8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e2fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e300:	701a      	strb	r2, [r3, #0]
    e302:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e306:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e30a:	781a      	ldrb	r2, [r3, #0]
    e30c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e310:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e314:	781b      	ldrb	r3, [r3, #0]
    e316:	4413      	add	r3, r2
    e318:	b2da      	uxtb	r2, r3
    e31a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e31e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e322:	701a      	strb	r2, [r3, #0]
    e324:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e328:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e32c:	781b      	ldrb	r3, [r3, #0]
    e32e:	3301      	adds	r3, #1
    e330:	b2da      	uxtb	r2, r3
    e332:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e336:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e33a:	701a      	strb	r2, [r3, #0]
    e33c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e340:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e344:	781b      	ldrb	r3, [r3, #0]
    e346:	2bff      	cmp	r3, #255	; 0xff
    e348:	d105      	bne.n	e356 <send_nav_values+0xcb2>
    e34a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e34e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e352:	2200      	movs	r2, #0
    e354:	701a      	strb	r2, [r3, #0]
    e356:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e35a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e35e:	781b      	ldrb	r3, [r3, #0]
    e360:	461a      	mov	r2, r3
    e362:	f240 4308 	movw	r3, #1032	; 0x408
    e366:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e36a:	7899      	ldrb	r1, [r3, #2]
    e36c:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    e370:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e374:	5499      	strb	r1, [r3, r2]
    e376:	4b20      	ldr	r3, [pc, #128]	; (e3f8 <send_nav_values+0xd54>)
    e378:	781a      	ldrb	r2, [r3, #0]
    e37a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e37e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e382:	781b      	ldrb	r3, [r3, #0]
    e384:	4413      	add	r3, r2
    e386:	b2da      	uxtb	r2, r3
    e388:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e38c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e390:	701a      	strb	r2, [r3, #0]
    e392:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e396:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e39a:	781a      	ldrb	r2, [r3, #0]
    e39c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e3a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3a4:	781b      	ldrb	r3, [r3, #0]
    e3a6:	4413      	add	r3, r2
    e3a8:	b2da      	uxtb	r2, r3
    e3aa:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e3ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3b2:	701a      	strb	r2, [r3, #0]
    e3b4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e3b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3bc:	781b      	ldrb	r3, [r3, #0]
    e3be:	3301      	adds	r3, #1
    e3c0:	b2da      	uxtb	r2, r3
    e3c2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e3c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3ca:	701a      	strb	r2, [r3, #0]
    e3cc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e3d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3d4:	781b      	ldrb	r3, [r3, #0]
    e3d6:	2bff      	cmp	r3, #255	; 0xff
    e3d8:	d110      	bne.n	e3fc <send_nav_values+0xd58>
    e3da:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e3de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3e2:	2200      	movs	r2, #0
    e3e4:	701a      	strb	r2, [r3, #0]
    e3e6:	e009      	b.n	e3fc <send_nav_values+0xd58>
    e3e8:	2004c285 	.word	0x2004c285
    e3ec:	2004c286 	.word	0x2004c286
    e3f0:	2004c287 	.word	0x2004c287
    e3f4:	20000409 	.word	0x20000409
    e3f8:	2000040a 	.word	0x2000040a
    e3fc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e400:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e404:	781b      	ldrb	r3, [r3, #0]
    e406:	461a      	mov	r2, r3
    e408:	f240 4308 	movw	r3, #1032	; 0x408
    e40c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e410:	78d9      	ldrb	r1, [r3, #3]
    e412:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    e416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e41a:	5499      	strb	r1, [r3, r2]
    e41c:	4bc2      	ldr	r3, [pc, #776]	; (e728 <send_nav_values+0x1084>)
    e41e:	781a      	ldrb	r2, [r3, #0]
    e420:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e424:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e428:	781b      	ldrb	r3, [r3, #0]
    e42a:	4413      	add	r3, r2
    e42c:	b2da      	uxtb	r2, r3
    e42e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e436:	701a      	strb	r2, [r3, #0]
    e438:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e43c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e440:	781a      	ldrb	r2, [r3, #0]
    e442:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e446:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e44a:	781b      	ldrb	r3, [r3, #0]
    e44c:	4413      	add	r3, r2
    e44e:	b2da      	uxtb	r2, r3
    e450:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e454:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e458:	701a      	strb	r2, [r3, #0]
    e45a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e45e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e462:	781b      	ldrb	r3, [r3, #0]
    e464:	3301      	adds	r3, #1
    e466:	b2da      	uxtb	r2, r3
    e468:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e46c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e470:	701a      	strb	r2, [r3, #0]
    e472:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e476:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e47a:	781b      	ldrb	r3, [r3, #0]
    e47c:	2bff      	cmp	r3, #255	; 0xff
    e47e:	d105      	bne.n	e48c <send_nav_values+0xde8>
    e480:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e484:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e488:	2200      	movs	r2, #0
    e48a:	701a      	strb	r2, [r3, #0]
    e48c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e490:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e494:	781b      	ldrb	r3, [r3, #0]
    e496:	461a      	mov	r2, r3
    e498:	f24c 2388 	movw	r3, #49800	; 0xc288
    e49c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4a0:	7819      	ldrb	r1, [r3, #0]
    e4a2:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    e4a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4aa:	5499      	strb	r1, [r3, r2]
    e4ac:	f24c 2388 	movw	r3, #49800	; 0xc288
    e4b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4b4:	781a      	ldrb	r2, [r3, #0]
    e4b6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e4ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4be:	781b      	ldrb	r3, [r3, #0]
    e4c0:	4413      	add	r3, r2
    e4c2:	b2da      	uxtb	r2, r3
    e4c4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e4c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4cc:	701a      	strb	r2, [r3, #0]
    e4ce:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e4d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4d6:	781a      	ldrb	r2, [r3, #0]
    e4d8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e4dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4e0:	781b      	ldrb	r3, [r3, #0]
    e4e2:	4413      	add	r3, r2
    e4e4:	b2da      	uxtb	r2, r3
    e4e6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e4ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4ee:	701a      	strb	r2, [r3, #0]
    e4f0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e4f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4f8:	781b      	ldrb	r3, [r3, #0]
    e4fa:	3301      	adds	r3, #1
    e4fc:	b2da      	uxtb	r2, r3
    e4fe:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e502:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e506:	701a      	strb	r2, [r3, #0]
    e508:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e50c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e510:	781b      	ldrb	r3, [r3, #0]
    e512:	2bff      	cmp	r3, #255	; 0xff
    e514:	d105      	bne.n	e522 <send_nav_values+0xe7e>
    e516:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e51a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e51e:	2200      	movs	r2, #0
    e520:	701a      	strb	r2, [r3, #0]
    e522:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e526:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e52a:	781b      	ldrb	r3, [r3, #0]
    e52c:	461a      	mov	r2, r3
    e52e:	f24c 2388 	movw	r3, #49800	; 0xc288
    e532:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e536:	7859      	ldrb	r1, [r3, #1]
    e538:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    e53c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e540:	5499      	strb	r1, [r3, r2]
    e542:	4b7a      	ldr	r3, [pc, #488]	; (e72c <send_nav_values+0x1088>)
    e544:	781a      	ldrb	r2, [r3, #0]
    e546:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e54a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e54e:	781b      	ldrb	r3, [r3, #0]
    e550:	4413      	add	r3, r2
    e552:	b2da      	uxtb	r2, r3
    e554:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e558:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e55c:	701a      	strb	r2, [r3, #0]
    e55e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e562:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e566:	781a      	ldrb	r2, [r3, #0]
    e568:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e56c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e570:	781b      	ldrb	r3, [r3, #0]
    e572:	4413      	add	r3, r2
    e574:	b2da      	uxtb	r2, r3
    e576:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e57a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e57e:	701a      	strb	r2, [r3, #0]
    e580:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e588:	781b      	ldrb	r3, [r3, #0]
    e58a:	3301      	adds	r3, #1
    e58c:	b2da      	uxtb	r2, r3
    e58e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e596:	701a      	strb	r2, [r3, #0]
    e598:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e59c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5a0:	781b      	ldrb	r3, [r3, #0]
    e5a2:	2bff      	cmp	r3, #255	; 0xff
    e5a4:	d105      	bne.n	e5b2 <send_nav_values+0xf0e>
    e5a6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e5aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5ae:	2200      	movs	r2, #0
    e5b0:	701a      	strb	r2, [r3, #0]
    e5b2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e5b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5ba:	781b      	ldrb	r3, [r3, #0]
    e5bc:	461a      	mov	r2, r3
    e5be:	f24c 2388 	movw	r3, #49800	; 0xc288
    e5c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5c6:	7899      	ldrb	r1, [r3, #2]
    e5c8:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    e5cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5d0:	5499      	strb	r1, [r3, r2]
    e5d2:	4b57      	ldr	r3, [pc, #348]	; (e730 <send_nav_values+0x108c>)
    e5d4:	781a      	ldrb	r2, [r3, #0]
    e5d6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e5da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5de:	781b      	ldrb	r3, [r3, #0]
    e5e0:	4413      	add	r3, r2
    e5e2:	b2da      	uxtb	r2, r3
    e5e4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e5e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5ec:	701a      	strb	r2, [r3, #0]
    e5ee:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e5f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5f6:	781a      	ldrb	r2, [r3, #0]
    e5f8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e5fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e600:	781b      	ldrb	r3, [r3, #0]
    e602:	4413      	add	r3, r2
    e604:	b2da      	uxtb	r2, r3
    e606:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e60a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e60e:	701a      	strb	r2, [r3, #0]
    e610:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e618:	781b      	ldrb	r3, [r3, #0]
    e61a:	3301      	adds	r3, #1
    e61c:	b2da      	uxtb	r2, r3
    e61e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e622:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e626:	701a      	strb	r2, [r3, #0]
    e628:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e62c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e630:	781b      	ldrb	r3, [r3, #0]
    e632:	2bff      	cmp	r3, #255	; 0xff
    e634:	d105      	bne.n	e642 <send_nav_values+0xf9e>
    e636:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e63a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e63e:	2200      	movs	r2, #0
    e640:	701a      	strb	r2, [r3, #0]
    e642:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e64a:	781b      	ldrb	r3, [r3, #0]
    e64c:	461a      	mov	r2, r3
    e64e:	f24c 2388 	movw	r3, #49800	; 0xc288
    e652:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e656:	78d9      	ldrb	r1, [r3, #3]
    e658:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    e65c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e660:	5499      	strb	r1, [r3, r2]
    e662:	4b34      	ldr	r3, [pc, #208]	; (e734 <send_nav_values+0x1090>)
    e664:	781a      	ldrb	r2, [r3, #0]
    e666:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e66a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e66e:	781b      	ldrb	r3, [r3, #0]
    e670:	4413      	add	r3, r2
    e672:	b2da      	uxtb	r2, r3
    e674:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e678:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e67c:	701a      	strb	r2, [r3, #0]
    e67e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e682:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e686:	781a      	ldrb	r2, [r3, #0]
    e688:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e68c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e690:	781b      	ldrb	r3, [r3, #0]
    e692:	4413      	add	r3, r2
    e694:	b2da      	uxtb	r2, r3
    e696:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e69a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e69e:	701a      	strb	r2, [r3, #0]
    e6a0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e6a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6a8:	781b      	ldrb	r3, [r3, #0]
    e6aa:	3301      	adds	r3, #1
    e6ac:	b2da      	uxtb	r2, r3
    e6ae:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e6b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6b6:	701a      	strb	r2, [r3, #0]
    e6b8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e6bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6c0:	781b      	ldrb	r3, [r3, #0]
    e6c2:	2bff      	cmp	r3, #255	; 0xff
    e6c4:	d105      	bne.n	e6d2 <send_nav_values+0x102e>
    e6c6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e6ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6ce:	2200      	movs	r2, #0
    e6d0:	701a      	strb	r2, [r3, #0]
    e6d2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e6d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6da:	781b      	ldrb	r3, [r3, #0]
    e6dc:	461a      	mov	r2, r3
    e6de:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    e6e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6e6:	7819      	ldrb	r1, [r3, #0]
    e6e8:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    e6ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6f0:	5499      	strb	r1, [r3, r2]
    e6f2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e6f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6fa:	781b      	ldrb	r3, [r3, #0]
    e6fc:	3301      	adds	r3, #1
    e6fe:	b2da      	uxtb	r2, r3
    e700:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e708:	701a      	strb	r2, [r3, #0]
    e70a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e70e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e712:	781b      	ldrb	r3, [r3, #0]
    e714:	2bff      	cmp	r3, #255	; 0xff
    e716:	d10f      	bne.n	e738 <send_nav_values+0x1094>
    e718:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e71c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e720:	2200      	movs	r2, #0
    e722:	701a      	strb	r2, [r3, #0]
    e724:	e008      	b.n	e738 <send_nav_values+0x1094>
    e726:	bf00      	nop
    e728:	2000040b 	.word	0x2000040b
    e72c:	2004c289 	.word	0x2004c289
    e730:	2004c28a 	.word	0x2004c28a
    e734:	2004c28b 	.word	0x2004c28b
    e738:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e73c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e740:	781b      	ldrb	r3, [r3, #0]
    e742:	461a      	mov	r2, r3
    e744:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    e748:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e74c:	7819      	ldrb	r1, [r3, #0]
    e74e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    e752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e756:	5499      	strb	r1, [r3, r2]
    e758:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e75c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e760:	781b      	ldrb	r3, [r3, #0]
    e762:	3301      	adds	r3, #1
    e764:	b2da      	uxtb	r2, r3
    e766:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e76a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e76e:	701a      	strb	r2, [r3, #0]
    e770:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e774:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e778:	781b      	ldrb	r3, [r3, #0]
    e77a:	2bff      	cmp	r3, #255	; 0xff
    e77c:	d105      	bne.n	e78a <send_nav_values+0x10e6>
    e77e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    e782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e786:	2200      	movs	r2, #0
    e788:	701a      	strb	r2, [r3, #0]
    e78a:	f242 0339 	movw	r3, #8249	; 0x2039
    e78e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e792:	781b      	ldrb	r3, [r3, #0]
    e794:	b2db      	uxtb	r3, r3
    e796:	f003 0310 	and.w	r3, r3, #16
    e79a:	2b00      	cmp	r3, #0
    e79c:	d15a      	bne.n	e854 <send_nav_values+0x11b0>
    e79e:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    e7a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7a6:	781b      	ldrb	r3, [r3, #0]
    e7a8:	b2db      	uxtb	r3, r3
    e7aa:	461a      	mov	r2, r3
    e7ac:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    e7b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7b4:	5c9a      	ldrb	r2, [r3, r2]
    e7b6:	f64b 73fb 	movw	r3, #49147	; 0xbffb
    e7ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7be:	701a      	strb	r2, [r3, #0]
    e7c0:	f64b 73fc 	movw	r3, #49148	; 0xbffc
    e7c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7c8:	2200      	movs	r2, #0
    e7ca:	701a      	strb	r2, [r3, #0]
    e7cc:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    e7d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7d4:	781b      	ldrb	r3, [r3, #0]
    e7d6:	b2db      	uxtb	r3, r3
    e7d8:	3301      	adds	r3, #1
    e7da:	b2da      	uxtb	r2, r3
    e7dc:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    e7e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7e4:	701a      	strb	r2, [r3, #0]
    e7e6:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    e7ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7ee:	781b      	ldrb	r3, [r3, #0]
    e7f0:	b2db      	uxtb	r3, r3
    e7f2:	2bff      	cmp	r3, #255	; 0xff
    e7f4:	d105      	bne.n	e802 <send_nav_values+0x115e>
    e7f6:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    e7fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7fe:	2200      	movs	r2, #0
    e800:	701a      	strb	r2, [r3, #0]
    e802:	f242 0338 	movw	r3, #8248	; 0x2038
    e806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e80a:	f242 0238 	movw	r2, #8248	; 0x2038
    e80e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e812:	7812      	ldrb	r2, [r2, #0]
    e814:	b2d2      	uxtb	r2, r2
    e816:	f042 0201 	orr.w	r2, r2, #1
    e81a:	b2d2      	uxtb	r2, r2
    e81c:	701a      	strb	r2, [r3, #0]
    e81e:	f242 0339 	movw	r3, #8249	; 0x2039
    e822:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e826:	f242 0239 	movw	r2, #8249	; 0x2039
    e82a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e82e:	7812      	ldrb	r2, [r2, #0]
    e830:	b2d2      	uxtb	r2, r2
    e832:	f042 0210 	orr.w	r2, r2, #16
    e836:	b2d2      	uxtb	r2, r2
    e838:	701a      	strb	r2, [r3, #0]
    e83a:	e00b      	b.n	e854 <send_nav_values+0x11b0>
    e83c:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    e840:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e844:	781b      	ldrb	r3, [r3, #0]
    e846:	3301      	adds	r3, #1
    e848:	b2da      	uxtb	r2, r3
    e84a:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    e84e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e852:	701a      	strb	r2, [r3, #0]
}
    e854:	46bd      	mov	sp, r7
    e856:	f85d 7b04 	ldr.w	r7, [sp], #4
    e85a:	4770      	bx	lr

0000e85c <course_run>:

void course_run(void){
    e85c:	b580      	push	{r7, lr}
    e85e:	af00      	add	r7, sp, #0
  
  if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    e860:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    e864:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e868:	781b      	ldrb	r3, [r3, #0]
    e86a:	2b02      	cmp	r3, #2
    e86c:	d006      	beq.n	e87c <course_run+0x20>
    e86e:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    e872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e876:	781b      	ldrb	r3, [r3, #0]
    e878:	2b03      	cmp	r3, #3
    e87a:	d112      	bne.n	e8a2 <course_run+0x46>
  {
    if (lateral_mode >= LATERAL_MODE_COURSE)
    e87c:	f64b 63de 	movw	r3, #48862	; 0xbede
    e880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e884:	781b      	ldrb	r3, [r3, #0]
    e886:	2b02      	cmp	r3, #2
    e888:	d901      	bls.n	e88e <course_run+0x32>
      course_pid_run(); /* aka compute nav_desired_roll */
    e88a:	f003 faf1 	bl	11e70 <course_pid_run>
    desired_roll = nav_desired_roll;
    e88e:	f24c 2380 	movw	r3, #49792	; 0xc280
    e892:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e896:	681a      	ldr	r2, [r3, #0]
    e898:	f24c 2324 	movw	r3, #49700	; 0xc224
    e89c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8a0:	601a      	str	r2, [r3, #0]
  }  
  //vPrintString("S_17 Navigation task end!\n\r");
}
    e8a2:	bd80      	pop	{r7, pc}

0000e8a4 <altitude_control_task>:

void altitude_control_task(void)
{
    e8a4:	b580      	push	{r7, lr}
    e8a6:	af00      	add	r7, sp, #0
	//vPrintString("S_18 navigation_task start! \n\r"); //SunnyBeike
	if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) {
    e8a8:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    e8ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8b0:	781b      	ldrb	r3, [r3, #0]
    e8b2:	2b02      	cmp	r3, #2
    e8b4:	d006      	beq.n	e8c4 <altitude_control_task+0x20>
    e8b6:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    e8ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8be:	781b      	ldrb	r3, [r3, #0]
    e8c0:	2b03      	cmp	r3, #3
    e8c2:	d108      	bne.n	e8d6 <altitude_control_task+0x32>
		if (vertical_mode == VERTICAL_MODE_AUTO_ALT)
    e8c4:	f64b 63dd 	movw	r3, #48861	; 0xbedd
    e8c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8cc:	781b      	ldrb	r3, [r3, #0]
    e8ce:	2b03      	cmp	r3, #3
    e8d0:	d101      	bne.n	e8d6 <altitude_control_task+0x32>
      			altitude_pid_run();
    e8d2:	f003 fd55 	bl	12380 <altitude_pid_run>
	}
	//vPrintString("S_18 navigation_task end! \n\r"); //SunnyBeike
}
    e8d6:	bd80      	pop	{r7, pc}

0000e8d8 <climb_control_task>:
void climb_control_task(void)
{
    e8d8:	b580      	push	{r7, lr}
    e8da:	af00      	add	r7, sp, #0
	//vPrintString("S_19 navigation_task start! \n\r"); //SunnyBeike
   if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    e8dc:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    e8e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8e4:	781b      	ldrb	r3, [r3, #0]
    e8e6:	2b02      	cmp	r3, #2
    e8e8:	d006      	beq.n	e8f8 <climb_control_task+0x20>
    e8ea:	f64b 63dc 	movw	r3, #48860	; 0xbedc
    e8ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8f2:	781b      	ldrb	r3, [r3, #0]
    e8f4:	2b03      	cmp	r3, #3
    e8f6:	d135      	bne.n	e964 <climb_control_task+0x8c>
   {
	if (vertical_mode >= VERTICAL_MODE_AUTO_CLIMB)
    e8f8:	f64b 63dd 	movw	r3, #48861	; 0xbedd
    e8fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e900:	781b      	ldrb	r3, [r3, #0]
    e902:	2b01      	cmp	r3, #1
    e904:	d901      	bls.n	e90a <climb_control_task+0x32>
        	climb_pid_run();
    e906:	f003 fb6b 	bl	11fe0 <climb_pid_run>
   	if (vertical_mode == VERTICAL_MODE_AUTO_GAZ)
    e90a:	f64b 63dd 	movw	r3, #48861	; 0xbedd
    e90e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e912:	781b      	ldrb	r3, [r3, #0]
    e914:	2b01      	cmp	r3, #1
    e916:	d10a      	bne.n	e92e <climb_control_task+0x56>
   		 desired_gaz = nav_desired_gaz;
    e918:	f24c 2378 	movw	r3, #49784	; 0xc278
    e91c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e920:	881b      	ldrh	r3, [r3, #0]
    e922:	b29a      	uxth	r2, r3
    e924:	f24c 232c 	movw	r3, #49708	; 0xc22c
    e928:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e92c:	801a      	strh	r2, [r3, #0]
   	if (low_battery || (!estimator_flight_time && !launch))
    e92e:	f64b 63e5 	movw	r3, #48869	; 0xbee5
    e932:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e936:	781b      	ldrb	r3, [r3, #0]
    e938:	2b00      	cmp	r3, #0
    e93a:	d10d      	bne.n	e958 <climb_control_task+0x80>
    e93c:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
    e940:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e944:	881b      	ldrh	r3, [r3, #0]
    e946:	2b00      	cmp	r3, #0
    e948:	d10c      	bne.n	e964 <climb_control_task+0x8c>
    e94a:	f64b 63f0 	movw	r3, #48880	; 0xbef0
    e94e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e952:	781b      	ldrb	r3, [r3, #0]
    e954:	2b00      	cmp	r3, #0
    e956:	d105      	bne.n	e964 <climb_control_task+0x8c>
   		 desired_gaz = 0.;
    e958:	f24c 232c 	movw	r3, #49708	; 0xc22c
    e95c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e960:	2200      	movs	r2, #0
    e962:	801a      	strh	r2, [r3, #0]
  }  
	//vPrintString("S_19 navigation_task end! \n\r"); //SunnyBeike
}
    e964:	bd80      	pop	{r7, pc}
    e966:	bf00      	nop

0000e968 <stabilisation_task>:
//#endif
}
*/

void stabilisation_task(void)
{
    e968:	b580      	push	{r7, lr}
    e96a:	af00      	add	r7, sp, #0
	//vPrintString("S_6 stabilisation_task start! \n\r"); //SunnyBeike
    ir_update();
    e96c:	f003 f926 	bl	11bbc <ir_update>
    estimator_update_state_infrared();
    e970:	f006 fbac 	bl	150cc <estimator_update_state_infrared>
    roll_pitch_pid_run(); // Set  desired_aileron & desired_elevator
    e974:	f003 f990 	bl	11c98 <roll_pitch_pid_run>
    to_fbw.channels[RADIO_THROTTLE] = desired_gaz; // desired_gaz is set upon GPS message reception
    e978:	f24c 232c 	movw	r3, #49708	; 0xc22c
    e97c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e980:	881a      	ldrh	r2, [r3, #0]
    e982:	f24c 0318 	movw	r3, #49176	; 0xc018
    e986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e98a:	801a      	strh	r2, [r3, #0]
    to_fbw.channels[RADIO_ROLL] = desired_aileron;
    e98c:	f24c 232e 	movw	r3, #49710	; 0xc22e
    e990:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e994:	881a      	ldrh	r2, [r3, #0]
    e996:	f24c 0318 	movw	r3, #49176	; 0xc018
    e99a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e99e:	805a      	strh	r2, [r3, #2]
#ifndef ANTON_T7
    to_fbw.channels[RADIO_PITCH] = desired_elevator;
    e9a0:	f24c 2330 	movw	r3, #49712	; 0xc230
    e9a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9a8:	881a      	ldrh	r2, [r3, #0]
    e9aa:	f24c 0318 	movw	r3, #49176	; 0xc018
    e9ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9b2:	809a      	strh	r2, [r3, #4]
#endif
    
    // Code for camera stabilization, FIXME put that elsewhere
    to_fbw.channels[RADIO_GAIN1] = TRIM_PPRZ(MAX_PPRZ/0.75*(-estimator_phi));
    e9b4:	f24c 43b8 	movw	r3, #50360	; 0xc4b8
    e9b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9bc:	681b      	ldr	r3, [r3, #0]
    e9be:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    e9c2:	4618      	mov	r0, r3
    e9c4:	f009 f80e 	bl	179e4 <__aeabi_f2d>
    e9c8:	4602      	mov	r2, r0
    e9ca:	460b      	mov	r3, r1
    e9cc:	4610      	mov	r0, r2
    e9ce:	4619      	mov	r1, r3
    e9d0:	f04f 0200 	mov.w	r2, #0
    e9d4:	f04f 0300 	mov.w	r3, #0
    e9d8:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    e9dc:	f009 f856 	bl	17a8c <__aeabi_dmul>
    e9e0:	4602      	mov	r2, r0
    e9e2:	460b      	mov	r3, r1
    e9e4:	4610      	mov	r0, r2
    e9e6:	4619      	mov	r1, r3
    e9e8:	f04f 0200 	mov.w	r2, #0
    e9ec:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    e9f0:	f2cc 03c2 	movt	r3, #49346	; 0xc0c2
    e9f4:	f009 fabc 	bl	17f70 <__aeabi_dcmplt>
    e9f8:	4603      	mov	r3, r0
    e9fa:	2b00      	cmp	r3, #0
    e9fc:	d002      	beq.n	ea04 <stabilisation_task+0x9c>
    e9fe:	f64d 2280 	movw	r2, #55936	; 0xda80
    ea02:	e046      	b.n	ea92 <stabilisation_task+0x12a>
    ea04:	f24c 43b8 	movw	r3, #50360	; 0xc4b8
    ea08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea0c:	681b      	ldr	r3, [r3, #0]
    ea0e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    ea12:	4618      	mov	r0, r3
    ea14:	f008 ffe6 	bl	179e4 <__aeabi_f2d>
    ea18:	4602      	mov	r2, r0
    ea1a:	460b      	mov	r3, r1
    ea1c:	4610      	mov	r0, r2
    ea1e:	4619      	mov	r1, r3
    ea20:	f04f 0200 	mov.w	r2, #0
    ea24:	f04f 0300 	mov.w	r3, #0
    ea28:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    ea2c:	f009 f82e 	bl	17a8c <__aeabi_dmul>
    ea30:	4602      	mov	r2, r0
    ea32:	460b      	mov	r3, r1
    ea34:	4610      	mov	r0, r2
    ea36:	4619      	mov	r1, r3
    ea38:	f04f 0200 	mov.w	r2, #0
    ea3c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    ea40:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
    ea44:	f009 fab2 	bl	17fac <__aeabi_dcmpgt>
    ea48:	4603      	mov	r3, r0
    ea4a:	2b00      	cmp	r3, #0
    ea4c:	d002      	beq.n	ea54 <stabilisation_task+0xec>
    ea4e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    ea52:	e01d      	b.n	ea90 <stabilisation_task+0x128>
    ea54:	f24c 43b8 	movw	r3, #50360	; 0xc4b8
    ea58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea5c:	681b      	ldr	r3, [r3, #0]
    ea5e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    ea62:	4618      	mov	r0, r3
    ea64:	f008 ffbe 	bl	179e4 <__aeabi_f2d>
    ea68:	4602      	mov	r2, r0
    ea6a:	460b      	mov	r3, r1
    ea6c:	4610      	mov	r0, r2
    ea6e:	4619      	mov	r1, r3
    ea70:	f04f 0200 	mov.w	r2, #0
    ea74:	f04f 0300 	mov.w	r3, #0
    ea78:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    ea7c:	f009 f806 	bl	17a8c <__aeabi_dmul>
    ea80:	4602      	mov	r2, r0
    ea82:	460b      	mov	r3, r1
    ea84:	4610      	mov	r0, r2
    ea86:	4619      	mov	r1, r3
    ea88:	f009 fa9a 	bl	17fc0 <__aeabi_d2iz>
    ea8c:	4603      	mov	r3, r0
    ea8e:	b29b      	uxth	r3, r3
    ea90:	b29a      	uxth	r2, r3
    ea92:	f24c 0318 	movw	r3, #49176	; 0xc018
    ea96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea9a:	815a      	strh	r2, [r3, #10]
	//vPrintString("S_6 stabilisation_task end! \n\r"); //SunnyBeike
}
    ea9c:	bd80      	pop	{r7, pc}
    ea9e:	bf00      	nop

0000eaa0 <send_gps_pos>:
 * If \a estimator_flight_time is null and \a estimator_hspeed_mod is greater
 * than \a MIN_SPEED_FOR_TAKEOFF, set the \a estimator_flight_time to 1 and \a
 * launch to true (which is not set in non auto launch. Then call
 * \a DOWNLINK_SEND_TAKEOFF
 */
void send_gps_pos( void ) {
    eaa0:	b580      	push	{r7, lr}
    eaa2:	af00      	add	r7, sp, #0
  gps_msg_received = FALSE;
    eaa4:	f24c 038d 	movw	r3, #49293	; 0xc08d
    eaa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eaac:	2200      	movs	r2, #0
    eaae:	701a      	strb	r2, [r3, #0]
  if (gps_pos_available){
    eab0:	f24c 038e 	movw	r3, #49294	; 0xc08e
    eab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eab8:	781b      	ldrb	r3, [r3, #0]
    eaba:	2b00      	cmp	r3, #0
    eabc:	f001 81af 	beq.w	fe1e <send_gps_pos+0x137e>
     DOWNLINK_SEND_GPS(&gps_mode, &gps_utm_east, &gps_utm_north, &gps_fcourse, &gps_falt, &gps_fspeed,&gps_fclimb, &gps_ftow);
    eac0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    eac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eac8:	781a      	ldrb	r2, [r3, #0]
    eaca:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    eace:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ead2:	781b      	ldrb	r3, [r3, #0]
    ead4:	b2db      	uxtb	r3, r3
    ead6:	429a      	cmp	r2, r3
    ead8:	d313      	bcc.n	eb02 <send_gps_pos+0x62>
    eada:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    eade:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eae2:	781b      	ldrb	r3, [r3, #0]
    eae4:	b2db      	uxtb	r3, r3
    eae6:	461a      	mov	r2, r3
    eae8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    eaec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eaf0:	781b      	ldrb	r3, [r3, #0]
    eaf2:	1ad3      	subs	r3, r2, r3
    eaf4:	33ff      	adds	r3, #255	; 0xff
    eaf6:	2b21      	cmp	r3, #33	; 0x21
    eaf8:	bfd4      	ite	le
    eafa:	2300      	movle	r3, #0
    eafc:	2301      	movgt	r3, #1
    eafe:	b2db      	uxtb	r3, r3
    eb00:	e011      	b.n	eb26 <send_gps_pos+0x86>
    eb02:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    eb06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb0a:	781b      	ldrb	r3, [r3, #0]
    eb0c:	b2db      	uxtb	r3, r3
    eb0e:	461a      	mov	r2, r3
    eb10:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    eb14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb18:	781b      	ldrb	r3, [r3, #0]
    eb1a:	1ad3      	subs	r3, r2, r3
    eb1c:	2b21      	cmp	r3, #33	; 0x21
    eb1e:	bfd4      	ite	le
    eb20:	2300      	movle	r3, #0
    eb22:	2301      	movgt	r3, #1
    eb24:	b2db      	uxtb	r3, r3
    eb26:	2b00      	cmp	r3, #0
    eb28:	f001 816b 	beq.w	fe02 <send_gps_pos+0x1362>
    eb2c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    eb30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb34:	781b      	ldrb	r3, [r3, #0]
    eb36:	461a      	mov	r2, r3
    eb38:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    eb3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb40:	2105      	movs	r1, #5
    eb42:	5499      	strb	r1, [r3, r2]
    eb44:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    eb48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb4c:	781b      	ldrb	r3, [r3, #0]
    eb4e:	3301      	adds	r3, #1
    eb50:	b2da      	uxtb	r2, r3
    eb52:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    eb56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb5a:	701a      	strb	r2, [r3, #0]
    eb5c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    eb60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb64:	781b      	ldrb	r3, [r3, #0]
    eb66:	2bff      	cmp	r3, #255	; 0xff
    eb68:	d105      	bne.n	eb76 <send_gps_pos+0xd6>
    eb6a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    eb6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb72:	2200      	movs	r2, #0
    eb74:	701a      	strb	r2, [r3, #0]
    eb76:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    eb7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb7e:	781b      	ldrb	r3, [r3, #0]
    eb80:	461a      	mov	r2, r3
    eb82:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    eb86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb8a:	2108      	movs	r1, #8
    eb8c:	5499      	strb	r1, [r3, r2]
    eb8e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    eb92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb96:	781b      	ldrb	r3, [r3, #0]
    eb98:	3301      	adds	r3, #1
    eb9a:	b2da      	uxtb	r2, r3
    eb9c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    eba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eba4:	701a      	strb	r2, [r3, #0]
    eba6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ebaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebae:	781b      	ldrb	r3, [r3, #0]
    ebb0:	2bff      	cmp	r3, #255	; 0xff
    ebb2:	d105      	bne.n	ebc0 <send_gps_pos+0x120>
    ebb4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ebb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebbc:	2200      	movs	r2, #0
    ebbe:	701a      	strb	r2, [r3, #0]
    ebc0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ebc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebc8:	2208      	movs	r2, #8
    ebca:	701a      	strb	r2, [r3, #0]
    ebcc:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ebd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebd4:	2208      	movs	r2, #8
    ebd6:	701a      	strb	r2, [r3, #0]
    ebd8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ebdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebe0:	781b      	ldrb	r3, [r3, #0]
    ebe2:	461a      	mov	r2, r3
    ebe4:	f24c 038c 	movw	r3, #49292	; 0xc08c
    ebe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebec:	7819      	ldrb	r1, [r3, #0]
    ebee:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    ebf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebf6:	5499      	strb	r1, [r3, r2]
    ebf8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ebfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec00:	781a      	ldrb	r2, [r3, #0]
    ec02:	f24c 038c 	movw	r3, #49292	; 0xc08c
    ec06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec0a:	781b      	ldrb	r3, [r3, #0]
    ec0c:	4413      	add	r3, r2
    ec0e:	b2da      	uxtb	r2, r3
    ec10:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ec14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec18:	701a      	strb	r2, [r3, #0]
    ec1a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ec1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec22:	781a      	ldrb	r2, [r3, #0]
    ec24:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ec28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec2c:	781b      	ldrb	r3, [r3, #0]
    ec2e:	4413      	add	r3, r2
    ec30:	b2da      	uxtb	r2, r3
    ec32:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ec36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec3a:	701a      	strb	r2, [r3, #0]
    ec3c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ec40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec44:	781b      	ldrb	r3, [r3, #0]
    ec46:	3301      	adds	r3, #1
    ec48:	b2da      	uxtb	r2, r3
    ec4a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ec4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec52:	701a      	strb	r2, [r3, #0]
    ec54:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ec58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec5c:	781b      	ldrb	r3, [r3, #0]
    ec5e:	2bff      	cmp	r3, #255	; 0xff
    ec60:	d105      	bne.n	ec6e <send_gps_pos+0x1ce>
    ec62:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ec66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec6a:	2200      	movs	r2, #0
    ec6c:	701a      	strb	r2, [r3, #0]
    ec6e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ec72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec76:	781b      	ldrb	r3, [r3, #0]
    ec78:	461a      	mov	r2, r3
    ec7a:	f24c 037c 	movw	r3, #49276	; 0xc07c
    ec7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec82:	7819      	ldrb	r1, [r3, #0]
    ec84:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    ec88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec8c:	5499      	strb	r1, [r3, r2]
    ec8e:	f24c 037c 	movw	r3, #49276	; 0xc07c
    ec92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec96:	781a      	ldrb	r2, [r3, #0]
    ec98:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ec9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eca0:	781b      	ldrb	r3, [r3, #0]
    eca2:	4413      	add	r3, r2
    eca4:	b2da      	uxtb	r2, r3
    eca6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ecaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecae:	701a      	strb	r2, [r3, #0]
    ecb0:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ecb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecb8:	781a      	ldrb	r2, [r3, #0]
    ecba:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ecbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecc2:	781b      	ldrb	r3, [r3, #0]
    ecc4:	4413      	add	r3, r2
    ecc6:	b2da      	uxtb	r2, r3
    ecc8:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    eccc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecd0:	701a      	strb	r2, [r3, #0]
    ecd2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ecd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecda:	781b      	ldrb	r3, [r3, #0]
    ecdc:	3301      	adds	r3, #1
    ecde:	b2da      	uxtb	r2, r3
    ece0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ece4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ece8:	701a      	strb	r2, [r3, #0]
    ecea:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ecee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecf2:	781b      	ldrb	r3, [r3, #0]
    ecf4:	2bff      	cmp	r3, #255	; 0xff
    ecf6:	d105      	bne.n	ed04 <send_gps_pos+0x264>
    ecf8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ecfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed00:	2200      	movs	r2, #0
    ed02:	701a      	strb	r2, [r3, #0]
    ed04:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ed08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed0c:	781b      	ldrb	r3, [r3, #0]
    ed0e:	461a      	mov	r2, r3
    ed10:	f24c 037c 	movw	r3, #49276	; 0xc07c
    ed14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed18:	7859      	ldrb	r1, [r3, #1]
    ed1a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    ed1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed22:	5499      	strb	r1, [r3, r2]
    ed24:	4bd1      	ldr	r3, [pc, #836]	; (f06c <send_gps_pos+0x5cc>)
    ed26:	781a      	ldrb	r2, [r3, #0]
    ed28:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ed2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed30:	781b      	ldrb	r3, [r3, #0]
    ed32:	4413      	add	r3, r2
    ed34:	b2da      	uxtb	r2, r3
    ed36:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ed3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed3e:	701a      	strb	r2, [r3, #0]
    ed40:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ed44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed48:	781a      	ldrb	r2, [r3, #0]
    ed4a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ed4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed52:	781b      	ldrb	r3, [r3, #0]
    ed54:	4413      	add	r3, r2
    ed56:	b2da      	uxtb	r2, r3
    ed58:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ed5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed60:	701a      	strb	r2, [r3, #0]
    ed62:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ed66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed6a:	781b      	ldrb	r3, [r3, #0]
    ed6c:	3301      	adds	r3, #1
    ed6e:	b2da      	uxtb	r2, r3
    ed70:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ed74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed78:	701a      	strb	r2, [r3, #0]
    ed7a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ed7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed82:	781b      	ldrb	r3, [r3, #0]
    ed84:	2bff      	cmp	r3, #255	; 0xff
    ed86:	d105      	bne.n	ed94 <send_gps_pos+0x2f4>
    ed88:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ed8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed90:	2200      	movs	r2, #0
    ed92:	701a      	strb	r2, [r3, #0]
    ed94:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ed98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed9c:	781b      	ldrb	r3, [r3, #0]
    ed9e:	461a      	mov	r2, r3
    eda0:	f24c 037c 	movw	r3, #49276	; 0xc07c
    eda4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eda8:	7899      	ldrb	r1, [r3, #2]
    edaa:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    edae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edb2:	5499      	strb	r1, [r3, r2]
    edb4:	4bae      	ldr	r3, [pc, #696]	; (f070 <send_gps_pos+0x5d0>)
    edb6:	781a      	ldrb	r2, [r3, #0]
    edb8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    edbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edc0:	781b      	ldrb	r3, [r3, #0]
    edc2:	4413      	add	r3, r2
    edc4:	b2da      	uxtb	r2, r3
    edc6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    edca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edce:	701a      	strb	r2, [r3, #0]
    edd0:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    edd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edd8:	781a      	ldrb	r2, [r3, #0]
    edda:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    edde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ede2:	781b      	ldrb	r3, [r3, #0]
    ede4:	4413      	add	r3, r2
    ede6:	b2da      	uxtb	r2, r3
    ede8:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    edec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edf0:	701a      	strb	r2, [r3, #0]
    edf2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    edf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edfa:	781b      	ldrb	r3, [r3, #0]
    edfc:	3301      	adds	r3, #1
    edfe:	b2da      	uxtb	r2, r3
    ee00:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ee04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee08:	701a      	strb	r2, [r3, #0]
    ee0a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ee0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee12:	781b      	ldrb	r3, [r3, #0]
    ee14:	2bff      	cmp	r3, #255	; 0xff
    ee16:	d105      	bne.n	ee24 <send_gps_pos+0x384>
    ee18:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ee1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee20:	2200      	movs	r2, #0
    ee22:	701a      	strb	r2, [r3, #0]
    ee24:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ee28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee2c:	781b      	ldrb	r3, [r3, #0]
    ee2e:	461a      	mov	r2, r3
    ee30:	f24c 037c 	movw	r3, #49276	; 0xc07c
    ee34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee38:	78d9      	ldrb	r1, [r3, #3]
    ee3a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    ee3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee42:	5499      	strb	r1, [r3, r2]
    ee44:	4b8b      	ldr	r3, [pc, #556]	; (f074 <send_gps_pos+0x5d4>)
    ee46:	781a      	ldrb	r2, [r3, #0]
    ee48:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ee4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee50:	781b      	ldrb	r3, [r3, #0]
    ee52:	4413      	add	r3, r2
    ee54:	b2da      	uxtb	r2, r3
    ee56:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ee5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee5e:	701a      	strb	r2, [r3, #0]
    ee60:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ee64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee68:	781a      	ldrb	r2, [r3, #0]
    ee6a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ee6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee72:	781b      	ldrb	r3, [r3, #0]
    ee74:	4413      	add	r3, r2
    ee76:	b2da      	uxtb	r2, r3
    ee78:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ee7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee80:	701a      	strb	r2, [r3, #0]
    ee82:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ee86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee8a:	781b      	ldrb	r3, [r3, #0]
    ee8c:	3301      	adds	r3, #1
    ee8e:	b2da      	uxtb	r2, r3
    ee90:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ee94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee98:	701a      	strb	r2, [r3, #0]
    ee9a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ee9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eea2:	781b      	ldrb	r3, [r3, #0]
    eea4:	2bff      	cmp	r3, #255	; 0xff
    eea6:	d105      	bne.n	eeb4 <send_gps_pos+0x414>
    eea8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    eeac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeb0:	2200      	movs	r2, #0
    eeb2:	701a      	strb	r2, [r3, #0]
    eeb4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    eeb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eebc:	781b      	ldrb	r3, [r3, #0]
    eebe:	461a      	mov	r2, r3
    eec0:	f24c 0380 	movw	r3, #49280	; 0xc080
    eec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eec8:	7819      	ldrb	r1, [r3, #0]
    eeca:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    eece:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eed2:	5499      	strb	r1, [r3, r2]
    eed4:	f24c 0380 	movw	r3, #49280	; 0xc080
    eed8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eedc:	781a      	ldrb	r2, [r3, #0]
    eede:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    eee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eee6:	781b      	ldrb	r3, [r3, #0]
    eee8:	4413      	add	r3, r2
    eeea:	b2da      	uxtb	r2, r3
    eeec:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    eef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eef4:	701a      	strb	r2, [r3, #0]
    eef6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    eefa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eefe:	781a      	ldrb	r2, [r3, #0]
    ef00:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ef04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef08:	781b      	ldrb	r3, [r3, #0]
    ef0a:	4413      	add	r3, r2
    ef0c:	b2da      	uxtb	r2, r3
    ef0e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ef12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef16:	701a      	strb	r2, [r3, #0]
    ef18:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ef1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef20:	781b      	ldrb	r3, [r3, #0]
    ef22:	3301      	adds	r3, #1
    ef24:	b2da      	uxtb	r2, r3
    ef26:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ef2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef2e:	701a      	strb	r2, [r3, #0]
    ef30:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ef34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef38:	781b      	ldrb	r3, [r3, #0]
    ef3a:	2bff      	cmp	r3, #255	; 0xff
    ef3c:	d105      	bne.n	ef4a <send_gps_pos+0x4aa>
    ef3e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ef42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef46:	2200      	movs	r2, #0
    ef48:	701a      	strb	r2, [r3, #0]
    ef4a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ef4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef52:	781b      	ldrb	r3, [r3, #0]
    ef54:	461a      	mov	r2, r3
    ef56:	f24c 0380 	movw	r3, #49280	; 0xc080
    ef5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef5e:	7859      	ldrb	r1, [r3, #1]
    ef60:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    ef64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef68:	5499      	strb	r1, [r3, r2]
    ef6a:	4b43      	ldr	r3, [pc, #268]	; (f078 <send_gps_pos+0x5d8>)
    ef6c:	781a      	ldrb	r2, [r3, #0]
    ef6e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ef72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef76:	781b      	ldrb	r3, [r3, #0]
    ef78:	4413      	add	r3, r2
    ef7a:	b2da      	uxtb	r2, r3
    ef7c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ef80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef84:	701a      	strb	r2, [r3, #0]
    ef86:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ef8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef8e:	781a      	ldrb	r2, [r3, #0]
    ef90:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ef94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef98:	781b      	ldrb	r3, [r3, #0]
    ef9a:	4413      	add	r3, r2
    ef9c:	b2da      	uxtb	r2, r3
    ef9e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    efa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efa6:	701a      	strb	r2, [r3, #0]
    efa8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    efac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efb0:	781b      	ldrb	r3, [r3, #0]
    efb2:	3301      	adds	r3, #1
    efb4:	b2da      	uxtb	r2, r3
    efb6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    efba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efbe:	701a      	strb	r2, [r3, #0]
    efc0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    efc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efc8:	781b      	ldrb	r3, [r3, #0]
    efca:	2bff      	cmp	r3, #255	; 0xff
    efcc:	d105      	bne.n	efda <send_gps_pos+0x53a>
    efce:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    efd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efd6:	2200      	movs	r2, #0
    efd8:	701a      	strb	r2, [r3, #0]
    efda:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    efde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efe2:	781b      	ldrb	r3, [r3, #0]
    efe4:	461a      	mov	r2, r3
    efe6:	f24c 0380 	movw	r3, #49280	; 0xc080
    efea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efee:	7899      	ldrb	r1, [r3, #2]
    eff0:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    eff4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eff8:	5499      	strb	r1, [r3, r2]
    effa:	4b20      	ldr	r3, [pc, #128]	; (f07c <send_gps_pos+0x5dc>)
    effc:	781a      	ldrb	r2, [r3, #0]
    effe:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f002:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f006:	781b      	ldrb	r3, [r3, #0]
    f008:	4413      	add	r3, r2
    f00a:	b2da      	uxtb	r2, r3
    f00c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f014:	701a      	strb	r2, [r3, #0]
    f016:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f01a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f01e:	781a      	ldrb	r2, [r3, #0]
    f020:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f024:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f028:	781b      	ldrb	r3, [r3, #0]
    f02a:	4413      	add	r3, r2
    f02c:	b2da      	uxtb	r2, r3
    f02e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f032:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f036:	701a      	strb	r2, [r3, #0]
    f038:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f03c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f040:	781b      	ldrb	r3, [r3, #0]
    f042:	3301      	adds	r3, #1
    f044:	b2da      	uxtb	r2, r3
    f046:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f04a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f04e:	701a      	strb	r2, [r3, #0]
    f050:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f054:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f058:	781b      	ldrb	r3, [r3, #0]
    f05a:	2bff      	cmp	r3, #255	; 0xff
    f05c:	d110      	bne.n	f080 <send_gps_pos+0x5e0>
    f05e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f062:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f066:	2200      	movs	r2, #0
    f068:	701a      	strb	r2, [r3, #0]
    f06a:	e009      	b.n	f080 <send_gps_pos+0x5e0>
    f06c:	2004c07d 	.word	0x2004c07d
    f070:	2004c07e 	.word	0x2004c07e
    f074:	2004c07f 	.word	0x2004c07f
    f078:	2004c081 	.word	0x2004c081
    f07c:	2004c082 	.word	0x2004c082
    f080:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f084:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f088:	781b      	ldrb	r3, [r3, #0]
    f08a:	461a      	mov	r2, r3
    f08c:	f24c 0380 	movw	r3, #49280	; 0xc080
    f090:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f094:	78d9      	ldrb	r1, [r3, #3]
    f096:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    f09a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f09e:	5499      	strb	r1, [r3, r2]
    f0a0:	4bd3      	ldr	r3, [pc, #844]	; (f3f0 <send_gps_pos+0x950>)
    f0a2:	781a      	ldrb	r2, [r3, #0]
    f0a4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f0a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0ac:	781b      	ldrb	r3, [r3, #0]
    f0ae:	4413      	add	r3, r2
    f0b0:	b2da      	uxtb	r2, r3
    f0b2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f0b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0ba:	701a      	strb	r2, [r3, #0]
    f0bc:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f0c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0c4:	781a      	ldrb	r2, [r3, #0]
    f0c6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f0ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0ce:	781b      	ldrb	r3, [r3, #0]
    f0d0:	4413      	add	r3, r2
    f0d2:	b2da      	uxtb	r2, r3
    f0d4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f0d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0dc:	701a      	strb	r2, [r3, #0]
    f0de:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f0e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0e6:	781b      	ldrb	r3, [r3, #0]
    f0e8:	3301      	adds	r3, #1
    f0ea:	b2da      	uxtb	r2, r3
    f0ec:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f0f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0f4:	701a      	strb	r2, [r3, #0]
    f0f6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f0fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0fe:	781b      	ldrb	r3, [r3, #0]
    f100:	2bff      	cmp	r3, #255	; 0xff
    f102:	d105      	bne.n	f110 <send_gps_pos+0x670>
    f104:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f108:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f10c:	2200      	movs	r2, #0
    f10e:	701a      	strb	r2, [r3, #0]
    f110:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f118:	781b      	ldrb	r3, [r3, #0]
    f11a:	461a      	mov	r2, r3
    f11c:	f24c 0378 	movw	r3, #49272	; 0xc078
    f120:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f124:	7819      	ldrb	r1, [r3, #0]
    f126:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    f12a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f12e:	5499      	strb	r1, [r3, r2]
    f130:	f24c 0378 	movw	r3, #49272	; 0xc078
    f134:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f138:	781a      	ldrb	r2, [r3, #0]
    f13a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f13e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f142:	781b      	ldrb	r3, [r3, #0]
    f144:	4413      	add	r3, r2
    f146:	b2da      	uxtb	r2, r3
    f148:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f14c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f150:	701a      	strb	r2, [r3, #0]
    f152:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f156:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f15a:	781a      	ldrb	r2, [r3, #0]
    f15c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f164:	781b      	ldrb	r3, [r3, #0]
    f166:	4413      	add	r3, r2
    f168:	b2da      	uxtb	r2, r3
    f16a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f16e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f172:	701a      	strb	r2, [r3, #0]
    f174:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f17c:	781b      	ldrb	r3, [r3, #0]
    f17e:	3301      	adds	r3, #1
    f180:	b2da      	uxtb	r2, r3
    f182:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f18a:	701a      	strb	r2, [r3, #0]
    f18c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f190:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f194:	781b      	ldrb	r3, [r3, #0]
    f196:	2bff      	cmp	r3, #255	; 0xff
    f198:	d105      	bne.n	f1a6 <send_gps_pos+0x706>
    f19a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f19e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1a2:	2200      	movs	r2, #0
    f1a4:	701a      	strb	r2, [r3, #0]
    f1a6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f1aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1ae:	781b      	ldrb	r3, [r3, #0]
    f1b0:	461a      	mov	r2, r3
    f1b2:	f24c 0378 	movw	r3, #49272	; 0xc078
    f1b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1ba:	7859      	ldrb	r1, [r3, #1]
    f1bc:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    f1c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1c4:	5499      	strb	r1, [r3, r2]
    f1c6:	4b8b      	ldr	r3, [pc, #556]	; (f3f4 <send_gps_pos+0x954>)
    f1c8:	781a      	ldrb	r2, [r3, #0]
    f1ca:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f1ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1d2:	781b      	ldrb	r3, [r3, #0]
    f1d4:	4413      	add	r3, r2
    f1d6:	b2da      	uxtb	r2, r3
    f1d8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f1dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1e0:	701a      	strb	r2, [r3, #0]
    f1e2:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f1e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1ea:	781a      	ldrb	r2, [r3, #0]
    f1ec:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f1f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1f4:	781b      	ldrb	r3, [r3, #0]
    f1f6:	4413      	add	r3, r2
    f1f8:	b2da      	uxtb	r2, r3
    f1fa:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f1fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f202:	701a      	strb	r2, [r3, #0]
    f204:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f208:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f20c:	781b      	ldrb	r3, [r3, #0]
    f20e:	3301      	adds	r3, #1
    f210:	b2da      	uxtb	r2, r3
    f212:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f216:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f21a:	701a      	strb	r2, [r3, #0]
    f21c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f220:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f224:	781b      	ldrb	r3, [r3, #0]
    f226:	2bff      	cmp	r3, #255	; 0xff
    f228:	d105      	bne.n	f236 <send_gps_pos+0x796>
    f22a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f22e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f232:	2200      	movs	r2, #0
    f234:	701a      	strb	r2, [r3, #0]
    f236:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f23a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f23e:	781b      	ldrb	r3, [r3, #0]
    f240:	461a      	mov	r2, r3
    f242:	f24c 0378 	movw	r3, #49272	; 0xc078
    f246:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f24a:	7899      	ldrb	r1, [r3, #2]
    f24c:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    f250:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f254:	5499      	strb	r1, [r3, r2]
    f256:	4b68      	ldr	r3, [pc, #416]	; (f3f8 <send_gps_pos+0x958>)
    f258:	781a      	ldrb	r2, [r3, #0]
    f25a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f25e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f262:	781b      	ldrb	r3, [r3, #0]
    f264:	4413      	add	r3, r2
    f266:	b2da      	uxtb	r2, r3
    f268:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f26c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f270:	701a      	strb	r2, [r3, #0]
    f272:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f276:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f27a:	781a      	ldrb	r2, [r3, #0]
    f27c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f280:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f284:	781b      	ldrb	r3, [r3, #0]
    f286:	4413      	add	r3, r2
    f288:	b2da      	uxtb	r2, r3
    f28a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f28e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f292:	701a      	strb	r2, [r3, #0]
    f294:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f298:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f29c:	781b      	ldrb	r3, [r3, #0]
    f29e:	3301      	adds	r3, #1
    f2a0:	b2da      	uxtb	r2, r3
    f2a2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f2a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2aa:	701a      	strb	r2, [r3, #0]
    f2ac:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f2b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2b4:	781b      	ldrb	r3, [r3, #0]
    f2b6:	2bff      	cmp	r3, #255	; 0xff
    f2b8:	d105      	bne.n	f2c6 <send_gps_pos+0x826>
    f2ba:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f2be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2c2:	2200      	movs	r2, #0
    f2c4:	701a      	strb	r2, [r3, #0]
    f2c6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f2ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2ce:	781b      	ldrb	r3, [r3, #0]
    f2d0:	461a      	mov	r2, r3
    f2d2:	f24c 0378 	movw	r3, #49272	; 0xc078
    f2d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2da:	78d9      	ldrb	r1, [r3, #3]
    f2dc:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    f2e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2e4:	5499      	strb	r1, [r3, r2]
    f2e6:	4b45      	ldr	r3, [pc, #276]	; (f3fc <send_gps_pos+0x95c>)
    f2e8:	781a      	ldrb	r2, [r3, #0]
    f2ea:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f2ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2f2:	781b      	ldrb	r3, [r3, #0]
    f2f4:	4413      	add	r3, r2
    f2f6:	b2da      	uxtb	r2, r3
    f2f8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f2fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f300:	701a      	strb	r2, [r3, #0]
    f302:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f306:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f30a:	781a      	ldrb	r2, [r3, #0]
    f30c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f310:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f314:	781b      	ldrb	r3, [r3, #0]
    f316:	4413      	add	r3, r2
    f318:	b2da      	uxtb	r2, r3
    f31a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f31e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f322:	701a      	strb	r2, [r3, #0]
    f324:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f328:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f32c:	781b      	ldrb	r3, [r3, #0]
    f32e:	3301      	adds	r3, #1
    f330:	b2da      	uxtb	r2, r3
    f332:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f336:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f33a:	701a      	strb	r2, [r3, #0]
    f33c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f340:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f344:	781b      	ldrb	r3, [r3, #0]
    f346:	2bff      	cmp	r3, #255	; 0xff
    f348:	d105      	bne.n	f356 <send_gps_pos+0x8b6>
    f34a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f34e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f352:	2200      	movs	r2, #0
    f354:	701a      	strb	r2, [r3, #0]
    f356:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f35a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f35e:	781b      	ldrb	r3, [r3, #0]
    f360:	461a      	mov	r2, r3
    f362:	f24c 036c 	movw	r3, #49260	; 0xc06c
    f366:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f36a:	7819      	ldrb	r1, [r3, #0]
    f36c:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    f370:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f374:	5499      	strb	r1, [r3, r2]
    f376:	f24c 036c 	movw	r3, #49260	; 0xc06c
    f37a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f37e:	781a      	ldrb	r2, [r3, #0]
    f380:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f384:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f388:	781b      	ldrb	r3, [r3, #0]
    f38a:	4413      	add	r3, r2
    f38c:	b2da      	uxtb	r2, r3
    f38e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f392:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f396:	701a      	strb	r2, [r3, #0]
    f398:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f39c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3a0:	781a      	ldrb	r2, [r3, #0]
    f3a2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f3a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3aa:	781b      	ldrb	r3, [r3, #0]
    f3ac:	4413      	add	r3, r2
    f3ae:	b2da      	uxtb	r2, r3
    f3b0:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f3b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3b8:	701a      	strb	r2, [r3, #0]
    f3ba:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f3be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3c2:	781b      	ldrb	r3, [r3, #0]
    f3c4:	3301      	adds	r3, #1
    f3c6:	b2da      	uxtb	r2, r3
    f3c8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f3cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3d0:	701a      	strb	r2, [r3, #0]
    f3d2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f3d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3da:	781b      	ldrb	r3, [r3, #0]
    f3dc:	2bff      	cmp	r3, #255	; 0xff
    f3de:	d10f      	bne.n	f400 <send_gps_pos+0x960>
    f3e0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f3e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3e8:	2200      	movs	r2, #0
    f3ea:	701a      	strb	r2, [r3, #0]
    f3ec:	e008      	b.n	f400 <send_gps_pos+0x960>
    f3ee:	bf00      	nop
    f3f0:	2004c083 	.word	0x2004c083
    f3f4:	2004c079 	.word	0x2004c079
    f3f8:	2004c07a 	.word	0x2004c07a
    f3fc:	2004c07b 	.word	0x2004c07b
    f400:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f404:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f408:	781b      	ldrb	r3, [r3, #0]
    f40a:	461a      	mov	r2, r3
    f40c:	f24c 036c 	movw	r3, #49260	; 0xc06c
    f410:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f414:	7859      	ldrb	r1, [r3, #1]
    f416:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    f41a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f41e:	5499      	strb	r1, [r3, r2]
    f420:	4bd1      	ldr	r3, [pc, #836]	; (f768 <send_gps_pos+0xcc8>)
    f422:	781a      	ldrb	r2, [r3, #0]
    f424:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f428:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f42c:	781b      	ldrb	r3, [r3, #0]
    f42e:	4413      	add	r3, r2
    f430:	b2da      	uxtb	r2, r3
    f432:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f436:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f43a:	701a      	strb	r2, [r3, #0]
    f43c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f440:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f444:	781a      	ldrb	r2, [r3, #0]
    f446:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f44a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f44e:	781b      	ldrb	r3, [r3, #0]
    f450:	4413      	add	r3, r2
    f452:	b2da      	uxtb	r2, r3
    f454:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f458:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f45c:	701a      	strb	r2, [r3, #0]
    f45e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f462:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f466:	781b      	ldrb	r3, [r3, #0]
    f468:	3301      	adds	r3, #1
    f46a:	b2da      	uxtb	r2, r3
    f46c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f470:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f474:	701a      	strb	r2, [r3, #0]
    f476:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f47a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f47e:	781b      	ldrb	r3, [r3, #0]
    f480:	2bff      	cmp	r3, #255	; 0xff
    f482:	d105      	bne.n	f490 <send_gps_pos+0x9f0>
    f484:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f488:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f48c:	2200      	movs	r2, #0
    f48e:	701a      	strb	r2, [r3, #0]
    f490:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f494:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f498:	781b      	ldrb	r3, [r3, #0]
    f49a:	461a      	mov	r2, r3
    f49c:	f24c 036c 	movw	r3, #49260	; 0xc06c
    f4a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4a4:	7899      	ldrb	r1, [r3, #2]
    f4a6:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    f4aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4ae:	5499      	strb	r1, [r3, r2]
    f4b0:	4bae      	ldr	r3, [pc, #696]	; (f76c <send_gps_pos+0xccc>)
    f4b2:	781a      	ldrb	r2, [r3, #0]
    f4b4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f4b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4bc:	781b      	ldrb	r3, [r3, #0]
    f4be:	4413      	add	r3, r2
    f4c0:	b2da      	uxtb	r2, r3
    f4c2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f4c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4ca:	701a      	strb	r2, [r3, #0]
    f4cc:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f4d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4d4:	781a      	ldrb	r2, [r3, #0]
    f4d6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f4da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4de:	781b      	ldrb	r3, [r3, #0]
    f4e0:	4413      	add	r3, r2
    f4e2:	b2da      	uxtb	r2, r3
    f4e4:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f4e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4ec:	701a      	strb	r2, [r3, #0]
    f4ee:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f4f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4f6:	781b      	ldrb	r3, [r3, #0]
    f4f8:	3301      	adds	r3, #1
    f4fa:	b2da      	uxtb	r2, r3
    f4fc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f500:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f504:	701a      	strb	r2, [r3, #0]
    f506:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f50a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f50e:	781b      	ldrb	r3, [r3, #0]
    f510:	2bff      	cmp	r3, #255	; 0xff
    f512:	d105      	bne.n	f520 <send_gps_pos+0xa80>
    f514:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f518:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f51c:	2200      	movs	r2, #0
    f51e:	701a      	strb	r2, [r3, #0]
    f520:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f524:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f528:	781b      	ldrb	r3, [r3, #0]
    f52a:	461a      	mov	r2, r3
    f52c:	f24c 036c 	movw	r3, #49260	; 0xc06c
    f530:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f534:	78d9      	ldrb	r1, [r3, #3]
    f536:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    f53a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f53e:	5499      	strb	r1, [r3, r2]
    f540:	4b8b      	ldr	r3, [pc, #556]	; (f770 <send_gps_pos+0xcd0>)
    f542:	781a      	ldrb	r2, [r3, #0]
    f544:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f54c:	781b      	ldrb	r3, [r3, #0]
    f54e:	4413      	add	r3, r2
    f550:	b2da      	uxtb	r2, r3
    f552:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f556:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f55a:	701a      	strb	r2, [r3, #0]
    f55c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f564:	781a      	ldrb	r2, [r3, #0]
    f566:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f56a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f56e:	781b      	ldrb	r3, [r3, #0]
    f570:	4413      	add	r3, r2
    f572:	b2da      	uxtb	r2, r3
    f574:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f578:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f57c:	701a      	strb	r2, [r3, #0]
    f57e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f582:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f586:	781b      	ldrb	r3, [r3, #0]
    f588:	3301      	adds	r3, #1
    f58a:	b2da      	uxtb	r2, r3
    f58c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f590:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f594:	701a      	strb	r2, [r3, #0]
    f596:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f59a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f59e:	781b      	ldrb	r3, [r3, #0]
    f5a0:	2bff      	cmp	r3, #255	; 0xff
    f5a2:	d105      	bne.n	f5b0 <send_gps_pos+0xb10>
    f5a4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f5a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5ac:	2200      	movs	r2, #0
    f5ae:	701a      	strb	r2, [r3, #0]
    f5b0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f5b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5b8:	781b      	ldrb	r3, [r3, #0]
    f5ba:	461a      	mov	r2, r3
    f5bc:	f24c 0370 	movw	r3, #49264	; 0xc070
    f5c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5c4:	7819      	ldrb	r1, [r3, #0]
    f5c6:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    f5ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5ce:	5499      	strb	r1, [r3, r2]
    f5d0:	f24c 0370 	movw	r3, #49264	; 0xc070
    f5d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5d8:	781a      	ldrb	r2, [r3, #0]
    f5da:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f5de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5e2:	781b      	ldrb	r3, [r3, #0]
    f5e4:	4413      	add	r3, r2
    f5e6:	b2da      	uxtb	r2, r3
    f5e8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f5ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5f0:	701a      	strb	r2, [r3, #0]
    f5f2:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f5f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5fa:	781a      	ldrb	r2, [r3, #0]
    f5fc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f600:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f604:	781b      	ldrb	r3, [r3, #0]
    f606:	4413      	add	r3, r2
    f608:	b2da      	uxtb	r2, r3
    f60a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f60e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f612:	701a      	strb	r2, [r3, #0]
    f614:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f618:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f61c:	781b      	ldrb	r3, [r3, #0]
    f61e:	3301      	adds	r3, #1
    f620:	b2da      	uxtb	r2, r3
    f622:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f626:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f62a:	701a      	strb	r2, [r3, #0]
    f62c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f630:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f634:	781b      	ldrb	r3, [r3, #0]
    f636:	2bff      	cmp	r3, #255	; 0xff
    f638:	d105      	bne.n	f646 <send_gps_pos+0xba6>
    f63a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f63e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f642:	2200      	movs	r2, #0
    f644:	701a      	strb	r2, [r3, #0]
    f646:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f64a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f64e:	781b      	ldrb	r3, [r3, #0]
    f650:	461a      	mov	r2, r3
    f652:	f24c 0370 	movw	r3, #49264	; 0xc070
    f656:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f65a:	7859      	ldrb	r1, [r3, #1]
    f65c:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    f660:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f664:	5499      	strb	r1, [r3, r2]
    f666:	4b43      	ldr	r3, [pc, #268]	; (f774 <send_gps_pos+0xcd4>)
    f668:	781a      	ldrb	r2, [r3, #0]
    f66a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f66e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f672:	781b      	ldrb	r3, [r3, #0]
    f674:	4413      	add	r3, r2
    f676:	b2da      	uxtb	r2, r3
    f678:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f67c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f680:	701a      	strb	r2, [r3, #0]
    f682:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f686:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f68a:	781a      	ldrb	r2, [r3, #0]
    f68c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f690:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f694:	781b      	ldrb	r3, [r3, #0]
    f696:	4413      	add	r3, r2
    f698:	b2da      	uxtb	r2, r3
    f69a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f69e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6a2:	701a      	strb	r2, [r3, #0]
    f6a4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f6a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6ac:	781b      	ldrb	r3, [r3, #0]
    f6ae:	3301      	adds	r3, #1
    f6b0:	b2da      	uxtb	r2, r3
    f6b2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f6b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6ba:	701a      	strb	r2, [r3, #0]
    f6bc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f6c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6c4:	781b      	ldrb	r3, [r3, #0]
    f6c6:	2bff      	cmp	r3, #255	; 0xff
    f6c8:	d105      	bne.n	f6d6 <send_gps_pos+0xc36>
    f6ca:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f6ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6d2:	2200      	movs	r2, #0
    f6d4:	701a      	strb	r2, [r3, #0]
    f6d6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f6da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6de:	781b      	ldrb	r3, [r3, #0]
    f6e0:	461a      	mov	r2, r3
    f6e2:	f24c 0370 	movw	r3, #49264	; 0xc070
    f6e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6ea:	7899      	ldrb	r1, [r3, #2]
    f6ec:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    f6f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6f4:	5499      	strb	r1, [r3, r2]
    f6f6:	4b20      	ldr	r3, [pc, #128]	; (f778 <send_gps_pos+0xcd8>)
    f6f8:	781a      	ldrb	r2, [r3, #0]
    f6fa:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f6fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f702:	781b      	ldrb	r3, [r3, #0]
    f704:	4413      	add	r3, r2
    f706:	b2da      	uxtb	r2, r3
    f708:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f70c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f710:	701a      	strb	r2, [r3, #0]
    f712:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f716:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f71a:	781a      	ldrb	r2, [r3, #0]
    f71c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f720:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f724:	781b      	ldrb	r3, [r3, #0]
    f726:	4413      	add	r3, r2
    f728:	b2da      	uxtb	r2, r3
    f72a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f72e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f732:	701a      	strb	r2, [r3, #0]
    f734:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f738:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f73c:	781b      	ldrb	r3, [r3, #0]
    f73e:	3301      	adds	r3, #1
    f740:	b2da      	uxtb	r2, r3
    f742:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f746:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f74a:	701a      	strb	r2, [r3, #0]
    f74c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f750:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f754:	781b      	ldrb	r3, [r3, #0]
    f756:	2bff      	cmp	r3, #255	; 0xff
    f758:	d110      	bne.n	f77c <send_gps_pos+0xcdc>
    f75a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f75e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f762:	2200      	movs	r2, #0
    f764:	701a      	strb	r2, [r3, #0]
    f766:	e009      	b.n	f77c <send_gps_pos+0xcdc>
    f768:	2004c06d 	.word	0x2004c06d
    f76c:	2004c06e 	.word	0x2004c06e
    f770:	2004c06f 	.word	0x2004c06f
    f774:	2004c071 	.word	0x2004c071
    f778:	2004c072 	.word	0x2004c072
    f77c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f780:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f784:	781b      	ldrb	r3, [r3, #0]
    f786:	461a      	mov	r2, r3
    f788:	f24c 0370 	movw	r3, #49264	; 0xc070
    f78c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f790:	78d9      	ldrb	r1, [r3, #3]
    f792:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    f796:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f79a:	5499      	strb	r1, [r3, r2]
    f79c:	4bd3      	ldr	r3, [pc, #844]	; (faec <send_gps_pos+0x104c>)
    f79e:	781a      	ldrb	r2, [r3, #0]
    f7a0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f7a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7a8:	781b      	ldrb	r3, [r3, #0]
    f7aa:	4413      	add	r3, r2
    f7ac:	b2da      	uxtb	r2, r3
    f7ae:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f7b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7b6:	701a      	strb	r2, [r3, #0]
    f7b8:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f7bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7c0:	781a      	ldrb	r2, [r3, #0]
    f7c2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f7c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7ca:	781b      	ldrb	r3, [r3, #0]
    f7cc:	4413      	add	r3, r2
    f7ce:	b2da      	uxtb	r2, r3
    f7d0:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f7d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7d8:	701a      	strb	r2, [r3, #0]
    f7da:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f7de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7e2:	781b      	ldrb	r3, [r3, #0]
    f7e4:	3301      	adds	r3, #1
    f7e6:	b2da      	uxtb	r2, r3
    f7e8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f7ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7f0:	701a      	strb	r2, [r3, #0]
    f7f2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f7f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7fa:	781b      	ldrb	r3, [r3, #0]
    f7fc:	2bff      	cmp	r3, #255	; 0xff
    f7fe:	d105      	bne.n	f80c <send_gps_pos+0xd6c>
    f800:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f804:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f808:	2200      	movs	r2, #0
    f80a:	701a      	strb	r2, [r3, #0]
    f80c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f810:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f814:	781b      	ldrb	r3, [r3, #0]
    f816:	461a      	mov	r2, r3
    f818:	f24c 0374 	movw	r3, #49268	; 0xc074
    f81c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f820:	7819      	ldrb	r1, [r3, #0]
    f822:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    f826:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f82a:	5499      	strb	r1, [r3, r2]
    f82c:	f24c 0374 	movw	r3, #49268	; 0xc074
    f830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f834:	781a      	ldrb	r2, [r3, #0]
    f836:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f83a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f83e:	781b      	ldrb	r3, [r3, #0]
    f840:	4413      	add	r3, r2
    f842:	b2da      	uxtb	r2, r3
    f844:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f848:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f84c:	701a      	strb	r2, [r3, #0]
    f84e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f852:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f856:	781a      	ldrb	r2, [r3, #0]
    f858:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f85c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f860:	781b      	ldrb	r3, [r3, #0]
    f862:	4413      	add	r3, r2
    f864:	b2da      	uxtb	r2, r3
    f866:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f86a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f86e:	701a      	strb	r2, [r3, #0]
    f870:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f874:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f878:	781b      	ldrb	r3, [r3, #0]
    f87a:	3301      	adds	r3, #1
    f87c:	b2da      	uxtb	r2, r3
    f87e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f882:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f886:	701a      	strb	r2, [r3, #0]
    f888:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f88c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f890:	781b      	ldrb	r3, [r3, #0]
    f892:	2bff      	cmp	r3, #255	; 0xff
    f894:	d105      	bne.n	f8a2 <send_gps_pos+0xe02>
    f896:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f89a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f89e:	2200      	movs	r2, #0
    f8a0:	701a      	strb	r2, [r3, #0]
    f8a2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f8a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8aa:	781b      	ldrb	r3, [r3, #0]
    f8ac:	461a      	mov	r2, r3
    f8ae:	f24c 0374 	movw	r3, #49268	; 0xc074
    f8b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8b6:	7859      	ldrb	r1, [r3, #1]
    f8b8:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    f8bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8c0:	5499      	strb	r1, [r3, r2]
    f8c2:	4b8b      	ldr	r3, [pc, #556]	; (faf0 <send_gps_pos+0x1050>)
    f8c4:	781a      	ldrb	r2, [r3, #0]
    f8c6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f8ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8ce:	781b      	ldrb	r3, [r3, #0]
    f8d0:	4413      	add	r3, r2
    f8d2:	b2da      	uxtb	r2, r3
    f8d4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f8d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8dc:	701a      	strb	r2, [r3, #0]
    f8de:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f8e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8e6:	781a      	ldrb	r2, [r3, #0]
    f8e8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f8ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8f0:	781b      	ldrb	r3, [r3, #0]
    f8f2:	4413      	add	r3, r2
    f8f4:	b2da      	uxtb	r2, r3
    f8f6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f8fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8fe:	701a      	strb	r2, [r3, #0]
    f900:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f904:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f908:	781b      	ldrb	r3, [r3, #0]
    f90a:	3301      	adds	r3, #1
    f90c:	b2da      	uxtb	r2, r3
    f90e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f916:	701a      	strb	r2, [r3, #0]
    f918:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f91c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f920:	781b      	ldrb	r3, [r3, #0]
    f922:	2bff      	cmp	r3, #255	; 0xff
    f924:	d105      	bne.n	f932 <send_gps_pos+0xe92>
    f926:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f92a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f92e:	2200      	movs	r2, #0
    f930:	701a      	strb	r2, [r3, #0]
    f932:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f936:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f93a:	781b      	ldrb	r3, [r3, #0]
    f93c:	461a      	mov	r2, r3
    f93e:	f24c 0374 	movw	r3, #49268	; 0xc074
    f942:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f946:	7899      	ldrb	r1, [r3, #2]
    f948:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    f94c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f950:	5499      	strb	r1, [r3, r2]
    f952:	4b68      	ldr	r3, [pc, #416]	; (faf4 <send_gps_pos+0x1054>)
    f954:	781a      	ldrb	r2, [r3, #0]
    f956:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f95a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f95e:	781b      	ldrb	r3, [r3, #0]
    f960:	4413      	add	r3, r2
    f962:	b2da      	uxtb	r2, r3
    f964:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f968:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f96c:	701a      	strb	r2, [r3, #0]
    f96e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f972:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f976:	781a      	ldrb	r2, [r3, #0]
    f978:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f97c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f980:	781b      	ldrb	r3, [r3, #0]
    f982:	4413      	add	r3, r2
    f984:	b2da      	uxtb	r2, r3
    f986:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    f98a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f98e:	701a      	strb	r2, [r3, #0]
    f990:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f994:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f998:	781b      	ldrb	r3, [r3, #0]
    f99a:	3301      	adds	r3, #1
    f99c:	b2da      	uxtb	r2, r3
    f99e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f9a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9a6:	701a      	strb	r2, [r3, #0]
    f9a8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f9ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9b0:	781b      	ldrb	r3, [r3, #0]
    f9b2:	2bff      	cmp	r3, #255	; 0xff
    f9b4:	d105      	bne.n	f9c2 <send_gps_pos+0xf22>
    f9b6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f9ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9be:	2200      	movs	r2, #0
    f9c0:	701a      	strb	r2, [r3, #0]
    f9c2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    f9c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9ca:	781b      	ldrb	r3, [r3, #0]
    f9cc:	461a      	mov	r2, r3
    f9ce:	f24c 0374 	movw	r3, #49268	; 0xc074
    f9d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9d6:	78d9      	ldrb	r1, [r3, #3]
    f9d8:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    f9dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9e0:	5499      	strb	r1, [r3, r2]
    f9e2:	4b45      	ldr	r3, [pc, #276]	; (faf8 <send_gps_pos+0x1058>)
    f9e4:	781a      	ldrb	r2, [r3, #0]
    f9e6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f9ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9ee:	781b      	ldrb	r3, [r3, #0]
    f9f0:	4413      	add	r3, r2
    f9f2:	b2da      	uxtb	r2, r3
    f9f4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    f9f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9fc:	701a      	strb	r2, [r3, #0]
    f9fe:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    fa02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa06:	781a      	ldrb	r2, [r3, #0]
    fa08:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    fa0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa10:	781b      	ldrb	r3, [r3, #0]
    fa12:	4413      	add	r3, r2
    fa14:	b2da      	uxtb	r2, r3
    fa16:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    fa1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa1e:	701a      	strb	r2, [r3, #0]
    fa20:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fa24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa28:	781b      	ldrb	r3, [r3, #0]
    fa2a:	3301      	adds	r3, #1
    fa2c:	b2da      	uxtb	r2, r3
    fa2e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fa32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa36:	701a      	strb	r2, [r3, #0]
    fa38:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fa3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa40:	781b      	ldrb	r3, [r3, #0]
    fa42:	2bff      	cmp	r3, #255	; 0xff
    fa44:	d105      	bne.n	fa52 <send_gps_pos+0xfb2>
    fa46:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fa4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa4e:	2200      	movs	r2, #0
    fa50:	701a      	strb	r2, [r3, #0]
    fa52:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fa56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa5a:	781b      	ldrb	r3, [r3, #0]
    fa5c:	461a      	mov	r2, r3
    fa5e:	f24c 0368 	movw	r3, #49256	; 0xc068
    fa62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa66:	7819      	ldrb	r1, [r3, #0]
    fa68:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    fa6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa70:	5499      	strb	r1, [r3, r2]
    fa72:	f24c 0368 	movw	r3, #49256	; 0xc068
    fa76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa7a:	781a      	ldrb	r2, [r3, #0]
    fa7c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    fa80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa84:	781b      	ldrb	r3, [r3, #0]
    fa86:	4413      	add	r3, r2
    fa88:	b2da      	uxtb	r2, r3
    fa8a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    fa8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa92:	701a      	strb	r2, [r3, #0]
    fa94:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    fa98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa9c:	781a      	ldrb	r2, [r3, #0]
    fa9e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    faa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faa6:	781b      	ldrb	r3, [r3, #0]
    faa8:	4413      	add	r3, r2
    faaa:	b2da      	uxtb	r2, r3
    faac:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    fab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fab4:	701a      	strb	r2, [r3, #0]
    fab6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    faba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fabe:	781b      	ldrb	r3, [r3, #0]
    fac0:	3301      	adds	r3, #1
    fac2:	b2da      	uxtb	r2, r3
    fac4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    facc:	701a      	strb	r2, [r3, #0]
    face:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fad2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fad6:	781b      	ldrb	r3, [r3, #0]
    fad8:	2bff      	cmp	r3, #255	; 0xff
    fada:	d10f      	bne.n	fafc <send_gps_pos+0x105c>
    fadc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fae0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fae4:	2200      	movs	r2, #0
    fae6:	701a      	strb	r2, [r3, #0]
    fae8:	e008      	b.n	fafc <send_gps_pos+0x105c>
    faea:	bf00      	nop
    faec:	2004c073 	.word	0x2004c073
    faf0:	2004c075 	.word	0x2004c075
    faf4:	2004c076 	.word	0x2004c076
    faf8:	2004c077 	.word	0x2004c077
    fafc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fb00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb04:	781b      	ldrb	r3, [r3, #0]
    fb06:	461a      	mov	r2, r3
    fb08:	f24c 0368 	movw	r3, #49256	; 0xc068
    fb0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb10:	7859      	ldrb	r1, [r3, #1]
    fb12:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    fb16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb1a:	5499      	strb	r1, [r3, r2]
    fb1c:	4bc0      	ldr	r3, [pc, #768]	; (fe20 <send_gps_pos+0x1380>)
    fb1e:	781a      	ldrb	r2, [r3, #0]
    fb20:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    fb24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb28:	781b      	ldrb	r3, [r3, #0]
    fb2a:	4413      	add	r3, r2
    fb2c:	b2da      	uxtb	r2, r3
    fb2e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    fb32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb36:	701a      	strb	r2, [r3, #0]
    fb38:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    fb3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb40:	781a      	ldrb	r2, [r3, #0]
    fb42:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    fb46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb4a:	781b      	ldrb	r3, [r3, #0]
    fb4c:	4413      	add	r3, r2
    fb4e:	b2da      	uxtb	r2, r3
    fb50:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    fb54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb58:	701a      	strb	r2, [r3, #0]
    fb5a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fb5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb62:	781b      	ldrb	r3, [r3, #0]
    fb64:	3301      	adds	r3, #1
    fb66:	b2da      	uxtb	r2, r3
    fb68:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fb6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb70:	701a      	strb	r2, [r3, #0]
    fb72:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fb76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb7a:	781b      	ldrb	r3, [r3, #0]
    fb7c:	2bff      	cmp	r3, #255	; 0xff
    fb7e:	d105      	bne.n	fb8c <send_gps_pos+0x10ec>
    fb80:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fb84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb88:	2200      	movs	r2, #0
    fb8a:	701a      	strb	r2, [r3, #0]
    fb8c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fb90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb94:	781b      	ldrb	r3, [r3, #0]
    fb96:	461a      	mov	r2, r3
    fb98:	f24c 0368 	movw	r3, #49256	; 0xc068
    fb9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fba0:	7899      	ldrb	r1, [r3, #2]
    fba2:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    fba6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbaa:	5499      	strb	r1, [r3, r2]
    fbac:	4b9d      	ldr	r3, [pc, #628]	; (fe24 <send_gps_pos+0x1384>)
    fbae:	781a      	ldrb	r2, [r3, #0]
    fbb0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    fbb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbb8:	781b      	ldrb	r3, [r3, #0]
    fbba:	4413      	add	r3, r2
    fbbc:	b2da      	uxtb	r2, r3
    fbbe:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    fbc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbc6:	701a      	strb	r2, [r3, #0]
    fbc8:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    fbcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbd0:	781a      	ldrb	r2, [r3, #0]
    fbd2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    fbd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbda:	781b      	ldrb	r3, [r3, #0]
    fbdc:	4413      	add	r3, r2
    fbde:	b2da      	uxtb	r2, r3
    fbe0:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    fbe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbe8:	701a      	strb	r2, [r3, #0]
    fbea:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fbee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbf2:	781b      	ldrb	r3, [r3, #0]
    fbf4:	3301      	adds	r3, #1
    fbf6:	b2da      	uxtb	r2, r3
    fbf8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fbfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc00:	701a      	strb	r2, [r3, #0]
    fc02:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fc06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc0a:	781b      	ldrb	r3, [r3, #0]
    fc0c:	2bff      	cmp	r3, #255	; 0xff
    fc0e:	d105      	bne.n	fc1c <send_gps_pos+0x117c>
    fc10:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fc14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc18:	2200      	movs	r2, #0
    fc1a:	701a      	strb	r2, [r3, #0]
    fc1c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fc20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc24:	781b      	ldrb	r3, [r3, #0]
    fc26:	461a      	mov	r2, r3
    fc28:	f24c 0368 	movw	r3, #49256	; 0xc068
    fc2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc30:	78d9      	ldrb	r1, [r3, #3]
    fc32:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    fc36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc3a:	5499      	strb	r1, [r3, r2]
    fc3c:	4b7a      	ldr	r3, [pc, #488]	; (fe28 <send_gps_pos+0x1388>)
    fc3e:	781a      	ldrb	r2, [r3, #0]
    fc40:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    fc44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc48:	781b      	ldrb	r3, [r3, #0]
    fc4a:	4413      	add	r3, r2
    fc4c:	b2da      	uxtb	r2, r3
    fc4e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    fc52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc56:	701a      	strb	r2, [r3, #0]
    fc58:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    fc5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc60:	781a      	ldrb	r2, [r3, #0]
    fc62:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    fc66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc6a:	781b      	ldrb	r3, [r3, #0]
    fc6c:	4413      	add	r3, r2
    fc6e:	b2da      	uxtb	r2, r3
    fc70:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    fc74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc78:	701a      	strb	r2, [r3, #0]
    fc7a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fc7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc82:	781b      	ldrb	r3, [r3, #0]
    fc84:	3301      	adds	r3, #1
    fc86:	b2da      	uxtb	r2, r3
    fc88:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fc8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc90:	701a      	strb	r2, [r3, #0]
    fc92:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fc96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc9a:	781b      	ldrb	r3, [r3, #0]
    fc9c:	2bff      	cmp	r3, #255	; 0xff
    fc9e:	d105      	bne.n	fcac <send_gps_pos+0x120c>
    fca0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fca8:	2200      	movs	r2, #0
    fcaa:	701a      	strb	r2, [r3, #0]
    fcac:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fcb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcb4:	781b      	ldrb	r3, [r3, #0]
    fcb6:	461a      	mov	r2, r3
    fcb8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    fcbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcc0:	7819      	ldrb	r1, [r3, #0]
    fcc2:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    fcc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcca:	5499      	strb	r1, [r3, r2]
    fccc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fcd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcd4:	781b      	ldrb	r3, [r3, #0]
    fcd6:	3301      	adds	r3, #1
    fcd8:	b2da      	uxtb	r2, r3
    fcda:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fcde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fce2:	701a      	strb	r2, [r3, #0]
    fce4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcec:	781b      	ldrb	r3, [r3, #0]
    fcee:	2bff      	cmp	r3, #255	; 0xff
    fcf0:	d105      	bne.n	fcfe <send_gps_pos+0x125e>
    fcf2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fcf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcfa:	2200      	movs	r2, #0
    fcfc:	701a      	strb	r2, [r3, #0]
    fcfe:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fd02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd06:	781b      	ldrb	r3, [r3, #0]
    fd08:	461a      	mov	r2, r3
    fd0a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    fd0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd12:	7819      	ldrb	r1, [r3, #0]
    fd14:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    fd18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd1c:	5499      	strb	r1, [r3, r2]
    fd1e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fd22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd26:	781b      	ldrb	r3, [r3, #0]
    fd28:	3301      	adds	r3, #1
    fd2a:	b2da      	uxtb	r2, r3
    fd2c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fd30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd34:	701a      	strb	r2, [r3, #0]
    fd36:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fd3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd3e:	781b      	ldrb	r3, [r3, #0]
    fd40:	2bff      	cmp	r3, #255	; 0xff
    fd42:	d105      	bne.n	fd50 <send_gps_pos+0x12b0>
    fd44:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fd48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd4c:	2200      	movs	r2, #0
    fd4e:	701a      	strb	r2, [r3, #0]
    fd50:	f242 0339 	movw	r3, #8249	; 0x2039
    fd54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd58:	781b      	ldrb	r3, [r3, #0]
    fd5a:	b2db      	uxtb	r3, r3
    fd5c:	f003 0310 	and.w	r3, r3, #16
    fd60:	2b00      	cmp	r3, #0
    fd62:	d15a      	bne.n	fe1a <send_gps_pos+0x137a>
    fd64:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    fd68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd6c:	781b      	ldrb	r3, [r3, #0]
    fd6e:	b2db      	uxtb	r3, r3
    fd70:	461a      	mov	r2, r3
    fd72:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    fd76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd7a:	5c9a      	ldrb	r2, [r3, r2]
    fd7c:	f64b 73fb 	movw	r3, #49147	; 0xbffb
    fd80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd84:	701a      	strb	r2, [r3, #0]
    fd86:	f64b 73fc 	movw	r3, #49148	; 0xbffc
    fd8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd8e:	2200      	movs	r2, #0
    fd90:	701a      	strb	r2, [r3, #0]
    fd92:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    fd96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd9a:	781b      	ldrb	r3, [r3, #0]
    fd9c:	b2db      	uxtb	r3, r3
    fd9e:	3301      	adds	r3, #1
    fda0:	b2da      	uxtb	r2, r3
    fda2:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    fda6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdaa:	701a      	strb	r2, [r3, #0]
    fdac:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    fdb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdb4:	781b      	ldrb	r3, [r3, #0]
    fdb6:	b2db      	uxtb	r3, r3
    fdb8:	2bff      	cmp	r3, #255	; 0xff
    fdba:	d105      	bne.n	fdc8 <send_gps_pos+0x1328>
    fdbc:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    fdc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdc4:	2200      	movs	r2, #0
    fdc6:	701a      	strb	r2, [r3, #0]
    fdc8:	f242 0338 	movw	r3, #8248	; 0x2038
    fdcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdd0:	f242 0238 	movw	r2, #8248	; 0x2038
    fdd4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fdd8:	7812      	ldrb	r2, [r2, #0]
    fdda:	b2d2      	uxtb	r2, r2
    fddc:	f042 0201 	orr.w	r2, r2, #1
    fde0:	b2d2      	uxtb	r2, r2
    fde2:	701a      	strb	r2, [r3, #0]
    fde4:	f242 0339 	movw	r3, #8249	; 0x2039
    fde8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdec:	f242 0239 	movw	r2, #8249	; 0x2039
    fdf0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fdf4:	7812      	ldrb	r2, [r2, #0]
    fdf6:	b2d2      	uxtb	r2, r2
    fdf8:	f042 0210 	orr.w	r2, r2, #16
    fdfc:	b2d2      	uxtb	r2, r2
    fdfe:	701a      	strb	r2, [r3, #0]
    fe00:	e00b      	b.n	fe1a <send_gps_pos+0x137a>
    fe02:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    fe06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe0a:	781b      	ldrb	r3, [r3, #0]
    fe0c:	3301      	adds	r3, #1
    fe0e:	b2da      	uxtb	r2, r3
    fe10:	f64b 63f8 	movw	r3, #48888	; 0xbef8
    fe14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe18:	701a      	strb	r2, [r3, #0]
     estimator_update_state_gps();
    fe1a:	f005 fbfd 	bl	15618 <estimator_update_state_gps>
  }
}
    fe1e:	bd80      	pop	{r7, pc}
    fe20:	2004c069 	.word	0x2004c069
    fe24:	2004c06a 	.word	0x2004c06a
    fe28:	2004c06b 	.word	0x2004c06b

0000fe2c <send_radIR>:

void send_radIR(void){
    fe2c:	b480      	push	{r7}
    fe2e:	af00      	add	r7, sp, #0
  if (gps_pos_available)
    fe30:	f24c 038e 	movw	r3, #49294	; 0xc08e
    fe34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe38:	781b      	ldrb	r3, [r3, #0]
    fe3a:	2b00      	cmp	r3, #0
    fe3c:	f000 85e8 	beq.w	10a10 <send_radIR+0xbe4>
     DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    fe40:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fe44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe48:	781a      	ldrb	r2, [r3, #0]
    fe4a:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    fe4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe52:	781b      	ldrb	r3, [r3, #0]
    fe54:	b2db      	uxtb	r3, r3
    fe56:	429a      	cmp	r2, r3
    fe58:	d313      	bcc.n	fe82 <send_radIR+0x56>
    fe5a:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    fe5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe62:	781b      	ldrb	r3, [r3, #0]
    fe64:	b2db      	uxtb	r3, r3
    fe66:	461a      	mov	r2, r3
    fe68:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fe6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe70:	781b      	ldrb	r3, [r3, #0]
    fe72:	1ad3      	subs	r3, r2, r3
    fe74:	33ff      	adds	r3, #255	; 0xff
    fe76:	2b14      	cmp	r3, #20
    fe78:	bfd4      	ite	le
    fe7a:	2300      	movle	r3, #0
    fe7c:	2301      	movgt	r3, #1
    fe7e:	b2db      	uxtb	r3, r3
    fe80:	e011      	b.n	fea6 <send_radIR+0x7a>
    fe82:	f64b 63fa 	movw	r3, #48890	; 0xbefa
    fe86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe8a:	781b      	ldrb	r3, [r3, #0]
    fe8c:	b2db      	uxtb	r3, r3
    fe8e:	461a      	mov	r2, r3
    fe90:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fe94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe98:	781b      	ldrb	r3, [r3, #0]
    fe9a:	1ad3      	subs	r3, r2, r3
    fe9c:	2b14      	cmp	r3, #20
    fe9e:	bfd4      	ite	le
    fea0:	2300      	movle	r3, #0
    fea2:	2301      	movgt	r3, #1
    fea4:	b2db      	uxtb	r3, r3
    fea6:	2b00      	cmp	r3, #0
    fea8:	f000 85a6 	beq.w	109f8 <send_radIR+0xbcc>
    feac:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    feb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feb4:	781b      	ldrb	r3, [r3, #0]
    feb6:	461a      	mov	r2, r3
    feb8:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    febc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fec0:	2105      	movs	r1, #5
    fec2:	5499      	strb	r1, [r3, r2]
    fec4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fecc:	781b      	ldrb	r3, [r3, #0]
    fece:	3301      	adds	r3, #1
    fed0:	b2da      	uxtb	r2, r3
    fed2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fed6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feda:	701a      	strb	r2, [r3, #0]
    fedc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fee4:	781b      	ldrb	r3, [r3, #0]
    fee6:	2bff      	cmp	r3, #255	; 0xff
    fee8:	d105      	bne.n	fef6 <send_radIR+0xca>
    feea:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    feee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fef2:	2200      	movs	r2, #0
    fef4:	701a      	strb	r2, [r3, #0]
    fef6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fefa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fefe:	781b      	ldrb	r3, [r3, #0]
    ff00:	461a      	mov	r2, r3
    ff02:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    ff06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff0a:	2105      	movs	r1, #5
    ff0c:	5499      	strb	r1, [r3, r2]
    ff0e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ff12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff16:	781b      	ldrb	r3, [r3, #0]
    ff18:	3301      	adds	r3, #1
    ff1a:	b2da      	uxtb	r2, r3
    ff1c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ff20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff24:	701a      	strb	r2, [r3, #0]
    ff26:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ff2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff2e:	781b      	ldrb	r3, [r3, #0]
    ff30:	2bff      	cmp	r3, #255	; 0xff
    ff32:	d105      	bne.n	ff40 <send_radIR+0x114>
    ff34:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ff38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff3c:	2200      	movs	r2, #0
    ff3e:	701a      	strb	r2, [r3, #0]
    ff40:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ff44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff48:	2205      	movs	r2, #5
    ff4a:	701a      	strb	r2, [r3, #0]
    ff4c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ff50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff54:	2205      	movs	r2, #5
    ff56:	701a      	strb	r2, [r3, #0]
    ff58:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ff5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff60:	781b      	ldrb	r3, [r3, #0]
    ff62:	461a      	mov	r2, r3
    ff64:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
    ff68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff6c:	7819      	ldrb	r1, [r3, #0]
    ff6e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
    ff72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff76:	5499      	strb	r1, [r3, r2]
    ff78:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
    ff7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff80:	781a      	ldrb	r2, [r3, #0]
    ff82:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ff86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff8a:	781b      	ldrb	r3, [r3, #0]
    ff8c:	4413      	add	r3, r2
    ff8e:	b2da      	uxtb	r2, r3
    ff90:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ff94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff98:	701a      	strb	r2, [r3, #0]
    ff9a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ff9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffa2:	781a      	ldrb	r2, [r3, #0]
    ffa4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
    ffa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffac:	781b      	ldrb	r3, [r3, #0]
    ffae:	4413      	add	r3, r2
    ffb0:	b2da      	uxtb	r2, r3
    ffb2:	f64b 73fe 	movw	r3, #49150	; 0xbffe
    ffb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffba:	701a      	strb	r2, [r3, #0]
    ffbc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ffc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffc4:	781b      	ldrb	r3, [r3, #0]
    ffc6:	3301      	adds	r3, #1
    ffc8:	b2da      	uxtb	r2, r3
    ffca:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ffce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffd2:	701a      	strb	r2, [r3, #0]
    ffd4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ffd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffdc:	781b      	ldrb	r3, [r3, #0]
    ffde:	2bff      	cmp	r3, #255	; 0xff
    ffe0:	d105      	bne.n	ffee <send_radIR+0x1c2>
    ffe2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    ffe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffea:	2200      	movs	r2, #0
    ffec:	701a      	strb	r2, [r3, #0]
    ffee:	f64b 63f9 	movw	r3, #48889	; 0xbef9
    fff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fff6:	781b      	ldrb	r3, [r3, #0]
    fff8:	461a      	mov	r2, r3
    fffa:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
    fffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10002:	7859      	ldrb	r1, [r3, #1]
   10004:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   10008:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1000c:	5499      	strb	r1, [r3, r2]
   1000e:	4bd2      	ldr	r3, [pc, #840]	; (10358 <send_radIR+0x52c>)
   10010:	781a      	ldrb	r2, [r3, #0]
   10012:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10016:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1001a:	781b      	ldrb	r3, [r3, #0]
   1001c:	4413      	add	r3, r2
   1001e:	b2da      	uxtb	r2, r3
   10020:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10024:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10028:	701a      	strb	r2, [r3, #0]
   1002a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   1002e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10032:	781a      	ldrb	r2, [r3, #0]
   10034:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10038:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1003c:	781b      	ldrb	r3, [r3, #0]
   1003e:	4413      	add	r3, r2
   10040:	b2da      	uxtb	r2, r3
   10042:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   10046:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1004a:	701a      	strb	r2, [r3, #0]
   1004c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10050:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10054:	781b      	ldrb	r3, [r3, #0]
   10056:	3301      	adds	r3, #1
   10058:	b2da      	uxtb	r2, r3
   1005a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1005e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10062:	701a      	strb	r2, [r3, #0]
   10064:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10068:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1006c:	781b      	ldrb	r3, [r3, #0]
   1006e:	2bff      	cmp	r3, #255	; 0xff
   10070:	d105      	bne.n	1007e <send_radIR+0x252>
   10072:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10076:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1007a:	2200      	movs	r2, #0
   1007c:	701a      	strb	r2, [r3, #0]
   1007e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10082:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10086:	781b      	ldrb	r3, [r3, #0]
   10088:	461a      	mov	r2, r3
   1008a:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
   1008e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10092:	7899      	ldrb	r1, [r3, #2]
   10094:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   10098:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1009c:	5499      	strb	r1, [r3, r2]
   1009e:	4baf      	ldr	r3, [pc, #700]	; (1035c <send_radIR+0x530>)
   100a0:	781a      	ldrb	r2, [r3, #0]
   100a2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   100a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100aa:	781b      	ldrb	r3, [r3, #0]
   100ac:	4413      	add	r3, r2
   100ae:	b2da      	uxtb	r2, r3
   100b0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   100b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100b8:	701a      	strb	r2, [r3, #0]
   100ba:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   100be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100c2:	781a      	ldrb	r2, [r3, #0]
   100c4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   100c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100cc:	781b      	ldrb	r3, [r3, #0]
   100ce:	4413      	add	r3, r2
   100d0:	b2da      	uxtb	r2, r3
   100d2:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   100d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100da:	701a      	strb	r2, [r3, #0]
   100dc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   100e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100e4:	781b      	ldrb	r3, [r3, #0]
   100e6:	3301      	adds	r3, #1
   100e8:	b2da      	uxtb	r2, r3
   100ea:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   100ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100f2:	701a      	strb	r2, [r3, #0]
   100f4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   100f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100fc:	781b      	ldrb	r3, [r3, #0]
   100fe:	2bff      	cmp	r3, #255	; 0xff
   10100:	d105      	bne.n	1010e <send_radIR+0x2e2>
   10102:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10106:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1010a:	2200      	movs	r2, #0
   1010c:	701a      	strb	r2, [r3, #0]
   1010e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10112:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10116:	781b      	ldrb	r3, [r3, #0]
   10118:	461a      	mov	r2, r3
   1011a:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
   1011e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10122:	78d9      	ldrb	r1, [r3, #3]
   10124:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   10128:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1012c:	5499      	strb	r1, [r3, r2]
   1012e:	4b8c      	ldr	r3, [pc, #560]	; (10360 <send_radIR+0x534>)
   10130:	781a      	ldrb	r2, [r3, #0]
   10132:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10136:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1013a:	781b      	ldrb	r3, [r3, #0]
   1013c:	4413      	add	r3, r2
   1013e:	b2da      	uxtb	r2, r3
   10140:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10144:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10148:	701a      	strb	r2, [r3, #0]
   1014a:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   1014e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10152:	781a      	ldrb	r2, [r3, #0]
   10154:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10158:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1015c:	781b      	ldrb	r3, [r3, #0]
   1015e:	4413      	add	r3, r2
   10160:	b2da      	uxtb	r2, r3
   10162:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   10166:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1016a:	701a      	strb	r2, [r3, #0]
   1016c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10170:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10174:	781b      	ldrb	r3, [r3, #0]
   10176:	3301      	adds	r3, #1
   10178:	b2da      	uxtb	r2, r3
   1017a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1017e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10182:	701a      	strb	r2, [r3, #0]
   10184:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10188:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1018c:	781b      	ldrb	r3, [r3, #0]
   1018e:	2bff      	cmp	r3, #255	; 0xff
   10190:	d105      	bne.n	1019e <send_radIR+0x372>
   10192:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10196:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1019a:	2200      	movs	r2, #0
   1019c:	701a      	strb	r2, [r3, #0]
   1019e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   101a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101a6:	781b      	ldrb	r3, [r3, #0]
   101a8:	461a      	mov	r2, r3
   101aa:	f24c 43f4 	movw	r3, #50420	; 0xc4f4
   101ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101b2:	7819      	ldrb	r1, [r3, #0]
   101b4:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   101b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101bc:	5499      	strb	r1, [r3, r2]
   101be:	f24c 43f4 	movw	r3, #50420	; 0xc4f4
   101c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101c6:	781a      	ldrb	r2, [r3, #0]
   101c8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   101cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101d0:	781b      	ldrb	r3, [r3, #0]
   101d2:	4413      	add	r3, r2
   101d4:	b2da      	uxtb	r2, r3
   101d6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   101da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101de:	701a      	strb	r2, [r3, #0]
   101e0:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   101e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101e8:	781a      	ldrb	r2, [r3, #0]
   101ea:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   101ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101f2:	781b      	ldrb	r3, [r3, #0]
   101f4:	4413      	add	r3, r2
   101f6:	b2da      	uxtb	r2, r3
   101f8:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   101fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10200:	701a      	strb	r2, [r3, #0]
   10202:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10206:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1020a:	781b      	ldrb	r3, [r3, #0]
   1020c:	3301      	adds	r3, #1
   1020e:	b2da      	uxtb	r2, r3
   10210:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10214:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10218:	701a      	strb	r2, [r3, #0]
   1021a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1021e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10222:	781b      	ldrb	r3, [r3, #0]
   10224:	2bff      	cmp	r3, #255	; 0xff
   10226:	d105      	bne.n	10234 <send_radIR+0x408>
   10228:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1022c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10230:	2200      	movs	r2, #0
   10232:	701a      	strb	r2, [r3, #0]
   10234:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10238:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1023c:	781b      	ldrb	r3, [r3, #0]
   1023e:	461a      	mov	r2, r3
   10240:	f24c 43f4 	movw	r3, #50420	; 0xc4f4
   10244:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10248:	7859      	ldrb	r1, [r3, #1]
   1024a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   1024e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10252:	5499      	strb	r1, [r3, r2]
   10254:	4b43      	ldr	r3, [pc, #268]	; (10364 <send_radIR+0x538>)
   10256:	781a      	ldrb	r2, [r3, #0]
   10258:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   1025c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10260:	781b      	ldrb	r3, [r3, #0]
   10262:	4413      	add	r3, r2
   10264:	b2da      	uxtb	r2, r3
   10266:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   1026a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1026e:	701a      	strb	r2, [r3, #0]
   10270:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   10274:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10278:	781a      	ldrb	r2, [r3, #0]
   1027a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   1027e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10282:	781b      	ldrb	r3, [r3, #0]
   10284:	4413      	add	r3, r2
   10286:	b2da      	uxtb	r2, r3
   10288:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   1028c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10290:	701a      	strb	r2, [r3, #0]
   10292:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10296:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1029a:	781b      	ldrb	r3, [r3, #0]
   1029c:	3301      	adds	r3, #1
   1029e:	b2da      	uxtb	r2, r3
   102a0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   102a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102a8:	701a      	strb	r2, [r3, #0]
   102aa:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   102ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102b2:	781b      	ldrb	r3, [r3, #0]
   102b4:	2bff      	cmp	r3, #255	; 0xff
   102b6:	d105      	bne.n	102c4 <send_radIR+0x498>
   102b8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   102bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102c0:	2200      	movs	r2, #0
   102c2:	701a      	strb	r2, [r3, #0]
   102c4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   102c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102cc:	781b      	ldrb	r3, [r3, #0]
   102ce:	461a      	mov	r2, r3
   102d0:	f24c 43f4 	movw	r3, #50420	; 0xc4f4
   102d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102d8:	7899      	ldrb	r1, [r3, #2]
   102da:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   102de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102e2:	5499      	strb	r1, [r3, r2]
   102e4:	4b20      	ldr	r3, [pc, #128]	; (10368 <send_radIR+0x53c>)
   102e6:	781a      	ldrb	r2, [r3, #0]
   102e8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   102ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102f0:	781b      	ldrb	r3, [r3, #0]
   102f2:	4413      	add	r3, r2
   102f4:	b2da      	uxtb	r2, r3
   102f6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   102fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102fe:	701a      	strb	r2, [r3, #0]
   10300:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   10304:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10308:	781a      	ldrb	r2, [r3, #0]
   1030a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   1030e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10312:	781b      	ldrb	r3, [r3, #0]
   10314:	4413      	add	r3, r2
   10316:	b2da      	uxtb	r2, r3
   10318:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   1031c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10320:	701a      	strb	r2, [r3, #0]
   10322:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10326:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1032a:	781b      	ldrb	r3, [r3, #0]
   1032c:	3301      	adds	r3, #1
   1032e:	b2da      	uxtb	r2, r3
   10330:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10334:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10338:	701a      	strb	r2, [r3, #0]
   1033a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1033e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10342:	781b      	ldrb	r3, [r3, #0]
   10344:	2bff      	cmp	r3, #255	; 0xff
   10346:	d111      	bne.n	1036c <send_radIR+0x540>
   10348:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1034c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10350:	2200      	movs	r2, #0
   10352:	701a      	strb	r2, [r3, #0]
   10354:	e00a      	b.n	1036c <send_radIR+0x540>
   10356:	bf00      	nop
   10358:	2004c4f1 	.word	0x2004c4f1
   1035c:	2004c4f2 	.word	0x2004c4f2
   10360:	2004c4f3 	.word	0x2004c4f3
   10364:	2004c4f5 	.word	0x2004c4f5
   10368:	2004c4f6 	.word	0x2004c4f6
   1036c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10370:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10374:	781b      	ldrb	r3, [r3, #0]
   10376:	461a      	mov	r2, r3
   10378:	f24c 43f4 	movw	r3, #50420	; 0xc4f4
   1037c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10380:	78d9      	ldrb	r1, [r3, #3]
   10382:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   10386:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1038a:	5499      	strb	r1, [r3, r2]
   1038c:	4bd3      	ldr	r3, [pc, #844]	; (106dc <send_radIR+0x8b0>)
   1038e:	781a      	ldrb	r2, [r3, #0]
   10390:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10394:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10398:	781b      	ldrb	r3, [r3, #0]
   1039a:	4413      	add	r3, r2
   1039c:	b2da      	uxtb	r2, r3
   1039e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   103a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103a6:	701a      	strb	r2, [r3, #0]
   103a8:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   103ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103b0:	781a      	ldrb	r2, [r3, #0]
   103b2:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   103b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103ba:	781b      	ldrb	r3, [r3, #0]
   103bc:	4413      	add	r3, r2
   103be:	b2da      	uxtb	r2, r3
   103c0:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   103c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103c8:	701a      	strb	r2, [r3, #0]
   103ca:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   103ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103d2:	781b      	ldrb	r3, [r3, #0]
   103d4:	3301      	adds	r3, #1
   103d6:	b2da      	uxtb	r2, r3
   103d8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   103dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103e0:	701a      	strb	r2, [r3, #0]
   103e2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   103e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103ea:	781b      	ldrb	r3, [r3, #0]
   103ec:	2bff      	cmp	r3, #255	; 0xff
   103ee:	d105      	bne.n	103fc <send_radIR+0x5d0>
   103f0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   103f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103f8:	2200      	movs	r2, #0
   103fa:	701a      	strb	r2, [r3, #0]
   103fc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10400:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10404:	781b      	ldrb	r3, [r3, #0]
   10406:	461a      	mov	r2, r3
   10408:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
   1040c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10410:	7819      	ldrb	r1, [r3, #0]
   10412:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   10416:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1041a:	5499      	strb	r1, [r3, r2]
   1041c:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
   10420:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10424:	781a      	ldrb	r2, [r3, #0]
   10426:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   1042a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1042e:	781b      	ldrb	r3, [r3, #0]
   10430:	4413      	add	r3, r2
   10432:	b2da      	uxtb	r2, r3
   10434:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10438:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1043c:	701a      	strb	r2, [r3, #0]
   1043e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   10442:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10446:	781a      	ldrb	r2, [r3, #0]
   10448:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   1044c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10450:	781b      	ldrb	r3, [r3, #0]
   10452:	4413      	add	r3, r2
   10454:	b2da      	uxtb	r2, r3
   10456:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   1045a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1045e:	701a      	strb	r2, [r3, #0]
   10460:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10464:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10468:	781b      	ldrb	r3, [r3, #0]
   1046a:	3301      	adds	r3, #1
   1046c:	b2da      	uxtb	r2, r3
   1046e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10472:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10476:	701a      	strb	r2, [r3, #0]
   10478:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1047c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10480:	781b      	ldrb	r3, [r3, #0]
   10482:	2bff      	cmp	r3, #255	; 0xff
   10484:	d105      	bne.n	10492 <send_radIR+0x666>
   10486:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1048a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1048e:	2200      	movs	r2, #0
   10490:	701a      	strb	r2, [r3, #0]
   10492:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10496:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1049a:	781b      	ldrb	r3, [r3, #0]
   1049c:	461a      	mov	r2, r3
   1049e:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
   104a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104a6:	7859      	ldrb	r1, [r3, #1]
   104a8:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   104ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104b0:	5499      	strb	r1, [r3, r2]
   104b2:	4b8b      	ldr	r3, [pc, #556]	; (106e0 <send_radIR+0x8b4>)
   104b4:	781a      	ldrb	r2, [r3, #0]
   104b6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   104ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104be:	781b      	ldrb	r3, [r3, #0]
   104c0:	4413      	add	r3, r2
   104c2:	b2da      	uxtb	r2, r3
   104c4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   104c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104cc:	701a      	strb	r2, [r3, #0]
   104ce:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   104d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104d6:	781a      	ldrb	r2, [r3, #0]
   104d8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   104dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104e0:	781b      	ldrb	r3, [r3, #0]
   104e2:	4413      	add	r3, r2
   104e4:	b2da      	uxtb	r2, r3
   104e6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   104ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104ee:	701a      	strb	r2, [r3, #0]
   104f0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   104f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104f8:	781b      	ldrb	r3, [r3, #0]
   104fa:	3301      	adds	r3, #1
   104fc:	b2da      	uxtb	r2, r3
   104fe:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10502:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10506:	701a      	strb	r2, [r3, #0]
   10508:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1050c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10510:	781b      	ldrb	r3, [r3, #0]
   10512:	2bff      	cmp	r3, #255	; 0xff
   10514:	d105      	bne.n	10522 <send_radIR+0x6f6>
   10516:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1051a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1051e:	2200      	movs	r2, #0
   10520:	701a      	strb	r2, [r3, #0]
   10522:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10526:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1052a:	781b      	ldrb	r3, [r3, #0]
   1052c:	461a      	mov	r2, r3
   1052e:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
   10532:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10536:	7899      	ldrb	r1, [r3, #2]
   10538:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   1053c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10540:	5499      	strb	r1, [r3, r2]
   10542:	4b68      	ldr	r3, [pc, #416]	; (106e4 <send_radIR+0x8b8>)
   10544:	781a      	ldrb	r2, [r3, #0]
   10546:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   1054a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1054e:	781b      	ldrb	r3, [r3, #0]
   10550:	4413      	add	r3, r2
   10552:	b2da      	uxtb	r2, r3
   10554:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10558:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1055c:	701a      	strb	r2, [r3, #0]
   1055e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   10562:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10566:	781a      	ldrb	r2, [r3, #0]
   10568:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   1056c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10570:	781b      	ldrb	r3, [r3, #0]
   10572:	4413      	add	r3, r2
   10574:	b2da      	uxtb	r2, r3
   10576:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   1057a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1057e:	701a      	strb	r2, [r3, #0]
   10580:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10584:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10588:	781b      	ldrb	r3, [r3, #0]
   1058a:	3301      	adds	r3, #1
   1058c:	b2da      	uxtb	r2, r3
   1058e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10592:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10596:	701a      	strb	r2, [r3, #0]
   10598:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1059c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105a0:	781b      	ldrb	r3, [r3, #0]
   105a2:	2bff      	cmp	r3, #255	; 0xff
   105a4:	d105      	bne.n	105b2 <send_radIR+0x786>
   105a6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   105aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105ae:	2200      	movs	r2, #0
   105b0:	701a      	strb	r2, [r3, #0]
   105b2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   105b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105ba:	781b      	ldrb	r3, [r3, #0]
   105bc:	461a      	mov	r2, r3
   105be:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
   105c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105c6:	78d9      	ldrb	r1, [r3, #3]
   105c8:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   105cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105d0:	5499      	strb	r1, [r3, r2]
   105d2:	4b45      	ldr	r3, [pc, #276]	; (106e8 <send_radIR+0x8bc>)
   105d4:	781a      	ldrb	r2, [r3, #0]
   105d6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   105da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105de:	781b      	ldrb	r3, [r3, #0]
   105e0:	4413      	add	r3, r2
   105e2:	b2da      	uxtb	r2, r3
   105e4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   105e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105ec:	701a      	strb	r2, [r3, #0]
   105ee:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   105f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105f6:	781a      	ldrb	r2, [r3, #0]
   105f8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   105fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10600:	781b      	ldrb	r3, [r3, #0]
   10602:	4413      	add	r3, r2
   10604:	b2da      	uxtb	r2, r3
   10606:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   1060a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1060e:	701a      	strb	r2, [r3, #0]
   10610:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10614:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10618:	781b      	ldrb	r3, [r3, #0]
   1061a:	3301      	adds	r3, #1
   1061c:	b2da      	uxtb	r2, r3
   1061e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10622:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10626:	701a      	strb	r2, [r3, #0]
   10628:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1062c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10630:	781b      	ldrb	r3, [r3, #0]
   10632:	2bff      	cmp	r3, #255	; 0xff
   10634:	d105      	bne.n	10642 <send_radIR+0x816>
   10636:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1063a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1063e:	2200      	movs	r2, #0
   10640:	701a      	strb	r2, [r3, #0]
   10642:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10646:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1064a:	781b      	ldrb	r3, [r3, #0]
   1064c:	461a      	mov	r2, r3
   1064e:	f240 33f2 	movw	r3, #1010	; 0x3f2
   10652:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10656:	7819      	ldrb	r1, [r3, #0]
   10658:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   1065c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10660:	5499      	strb	r1, [r3, r2]
   10662:	f240 33f2 	movw	r3, #1010	; 0x3f2
   10666:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1066a:	781a      	ldrb	r2, [r3, #0]
   1066c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10670:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10674:	781b      	ldrb	r3, [r3, #0]
   10676:	4413      	add	r3, r2
   10678:	b2da      	uxtb	r2, r3
   1067a:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   1067e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10682:	701a      	strb	r2, [r3, #0]
   10684:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   10688:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1068c:	781a      	ldrb	r2, [r3, #0]
   1068e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10692:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10696:	781b      	ldrb	r3, [r3, #0]
   10698:	4413      	add	r3, r2
   1069a:	b2da      	uxtb	r2, r3
   1069c:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   106a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106a4:	701a      	strb	r2, [r3, #0]
   106a6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   106aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106ae:	781b      	ldrb	r3, [r3, #0]
   106b0:	3301      	adds	r3, #1
   106b2:	b2da      	uxtb	r2, r3
   106b4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   106b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106bc:	701a      	strb	r2, [r3, #0]
   106be:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   106c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106c6:	781b      	ldrb	r3, [r3, #0]
   106c8:	2bff      	cmp	r3, #255	; 0xff
   106ca:	d10f      	bne.n	106ec <send_radIR+0x8c0>
   106cc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   106d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106d4:	2200      	movs	r2, #0
   106d6:	701a      	strb	r2, [r3, #0]
   106d8:	e008      	b.n	106ec <send_radIR+0x8c0>
   106da:	bf00      	nop
   106dc:	2004c4f7 	.word	0x2004c4f7
   106e0:	2004c4ed 	.word	0x2004c4ed
   106e4:	2004c4ee 	.word	0x2004c4ee
   106e8:	2004c4ef 	.word	0x2004c4ef
   106ec:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   106f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106f4:	781b      	ldrb	r3, [r3, #0]
   106f6:	461a      	mov	r2, r3
   106f8:	f240 33f2 	movw	r3, #1010	; 0x3f2
   106fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10700:	7859      	ldrb	r1, [r3, #1]
   10702:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   10706:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1070a:	5499      	strb	r1, [r3, r2]
   1070c:	4bc2      	ldr	r3, [pc, #776]	; (10a18 <send_radIR+0xbec>)
   1070e:	781a      	ldrb	r2, [r3, #0]
   10710:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10714:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10718:	781b      	ldrb	r3, [r3, #0]
   1071a:	4413      	add	r3, r2
   1071c:	b2da      	uxtb	r2, r3
   1071e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10722:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10726:	701a      	strb	r2, [r3, #0]
   10728:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   1072c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10730:	781a      	ldrb	r2, [r3, #0]
   10732:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10736:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1073a:	781b      	ldrb	r3, [r3, #0]
   1073c:	4413      	add	r3, r2
   1073e:	b2da      	uxtb	r2, r3
   10740:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   10744:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10748:	701a      	strb	r2, [r3, #0]
   1074a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1074e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10752:	781b      	ldrb	r3, [r3, #0]
   10754:	3301      	adds	r3, #1
   10756:	b2da      	uxtb	r2, r3
   10758:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1075c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10760:	701a      	strb	r2, [r3, #0]
   10762:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10766:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1076a:	781b      	ldrb	r3, [r3, #0]
   1076c:	2bff      	cmp	r3, #255	; 0xff
   1076e:	d105      	bne.n	1077c <send_radIR+0x950>
   10770:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10774:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10778:	2200      	movs	r2, #0
   1077a:	701a      	strb	r2, [r3, #0]
   1077c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10780:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10784:	781b      	ldrb	r3, [r3, #0]
   10786:	461a      	mov	r2, r3
   10788:	f240 33f4 	movw	r3, #1012	; 0x3f4
   1078c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10790:	7819      	ldrb	r1, [r3, #0]
   10792:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   10796:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1079a:	5499      	strb	r1, [r3, r2]
   1079c:	f240 33f4 	movw	r3, #1012	; 0x3f4
   107a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107a4:	781a      	ldrb	r2, [r3, #0]
   107a6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   107aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107ae:	781b      	ldrb	r3, [r3, #0]
   107b0:	4413      	add	r3, r2
   107b2:	b2da      	uxtb	r2, r3
   107b4:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   107b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107bc:	701a      	strb	r2, [r3, #0]
   107be:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   107c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107c6:	781a      	ldrb	r2, [r3, #0]
   107c8:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   107cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107d0:	781b      	ldrb	r3, [r3, #0]
   107d2:	4413      	add	r3, r2
   107d4:	b2da      	uxtb	r2, r3
   107d6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   107da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107de:	701a      	strb	r2, [r3, #0]
   107e0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   107e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107e8:	781b      	ldrb	r3, [r3, #0]
   107ea:	3301      	adds	r3, #1
   107ec:	b2da      	uxtb	r2, r3
   107ee:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   107f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107f6:	701a      	strb	r2, [r3, #0]
   107f8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   107fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10800:	781b      	ldrb	r3, [r3, #0]
   10802:	2bff      	cmp	r3, #255	; 0xff
   10804:	d105      	bne.n	10812 <send_radIR+0x9e6>
   10806:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1080a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1080e:	2200      	movs	r2, #0
   10810:	701a      	strb	r2, [r3, #0]
   10812:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10816:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1081a:	781b      	ldrb	r3, [r3, #0]
   1081c:	461a      	mov	r2, r3
   1081e:	f240 33f4 	movw	r3, #1012	; 0x3f4
   10822:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10826:	7859      	ldrb	r1, [r3, #1]
   10828:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   1082c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10830:	5499      	strb	r1, [r3, r2]
   10832:	4b7a      	ldr	r3, [pc, #488]	; (10a1c <send_radIR+0xbf0>)
   10834:	781a      	ldrb	r2, [r3, #0]
   10836:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   1083a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1083e:	781b      	ldrb	r3, [r3, #0]
   10840:	4413      	add	r3, r2
   10842:	b2da      	uxtb	r2, r3
   10844:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10848:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1084c:	701a      	strb	r2, [r3, #0]
   1084e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   10852:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10856:	781a      	ldrb	r2, [r3, #0]
   10858:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   1085c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10860:	781b      	ldrb	r3, [r3, #0]
   10862:	4413      	add	r3, r2
   10864:	b2da      	uxtb	r2, r3
   10866:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   1086a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1086e:	701a      	strb	r2, [r3, #0]
   10870:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10874:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10878:	781b      	ldrb	r3, [r3, #0]
   1087a:	3301      	adds	r3, #1
   1087c:	b2da      	uxtb	r2, r3
   1087e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10882:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10886:	701a      	strb	r2, [r3, #0]
   10888:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1088c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10890:	781b      	ldrb	r3, [r3, #0]
   10892:	2bff      	cmp	r3, #255	; 0xff
   10894:	d105      	bne.n	108a2 <send_radIR+0xa76>
   10896:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1089a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1089e:	2200      	movs	r2, #0
   108a0:	701a      	strb	r2, [r3, #0]
   108a2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   108a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108aa:	781b      	ldrb	r3, [r3, #0]
   108ac:	461a      	mov	r2, r3
   108ae:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   108b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108b6:	7819      	ldrb	r1, [r3, #0]
   108b8:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   108bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108c0:	5499      	strb	r1, [r3, r2]
   108c2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   108c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108ca:	781b      	ldrb	r3, [r3, #0]
   108cc:	3301      	adds	r3, #1
   108ce:	b2da      	uxtb	r2, r3
   108d0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   108d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108d8:	701a      	strb	r2, [r3, #0]
   108da:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   108de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108e2:	781b      	ldrb	r3, [r3, #0]
   108e4:	2bff      	cmp	r3, #255	; 0xff
   108e6:	d105      	bne.n	108f4 <send_radIR+0xac8>
   108e8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   108ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108f0:	2200      	movs	r2, #0
   108f2:	701a      	strb	r2, [r3, #0]
   108f4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   108f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108fc:	781b      	ldrb	r3, [r3, #0]
   108fe:	461a      	mov	r2, r3
   10900:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   10904:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10908:	7819      	ldrb	r1, [r3, #0]
   1090a:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   1090e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10912:	5499      	strb	r1, [r3, r2]
   10914:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10918:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1091c:	781b      	ldrb	r3, [r3, #0]
   1091e:	3301      	adds	r3, #1
   10920:	b2da      	uxtb	r2, r3
   10922:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10926:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1092a:	701a      	strb	r2, [r3, #0]
   1092c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10930:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10934:	781b      	ldrb	r3, [r3, #0]
   10936:	2bff      	cmp	r3, #255	; 0xff
   10938:	d105      	bne.n	10946 <send_radIR+0xb1a>
   1093a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   1093e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10942:	2200      	movs	r2, #0
   10944:	701a      	strb	r2, [r3, #0]
   10946:	f242 0339 	movw	r3, #8249	; 0x2039
   1094a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1094e:	781b      	ldrb	r3, [r3, #0]
   10950:	b2db      	uxtb	r3, r3
   10952:	f003 0310 	and.w	r3, r3, #16
   10956:	2b00      	cmp	r3, #0
   10958:	d15a      	bne.n	10a10 <send_radIR+0xbe4>
   1095a:	f64b 63fa 	movw	r3, #48890	; 0xbefa
   1095e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10962:	781b      	ldrb	r3, [r3, #0]
   10964:	b2db      	uxtb	r3, r3
   10966:	461a      	mov	r2, r3
   10968:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   1096c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10970:	5c9a      	ldrb	r2, [r3, r2]
   10972:	f64b 73fb 	movw	r3, #49147	; 0xbffb
   10976:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1097a:	701a      	strb	r2, [r3, #0]
   1097c:	f64b 73fc 	movw	r3, #49148	; 0xbffc
   10980:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10984:	2200      	movs	r2, #0
   10986:	701a      	strb	r2, [r3, #0]
   10988:	f64b 63fa 	movw	r3, #48890	; 0xbefa
   1098c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10990:	781b      	ldrb	r3, [r3, #0]
   10992:	b2db      	uxtb	r3, r3
   10994:	3301      	adds	r3, #1
   10996:	b2da      	uxtb	r2, r3
   10998:	f64b 63fa 	movw	r3, #48890	; 0xbefa
   1099c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109a0:	701a      	strb	r2, [r3, #0]
   109a2:	f64b 63fa 	movw	r3, #48890	; 0xbefa
   109a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109aa:	781b      	ldrb	r3, [r3, #0]
   109ac:	b2db      	uxtb	r3, r3
   109ae:	2bff      	cmp	r3, #255	; 0xff
   109b0:	d105      	bne.n	109be <send_radIR+0xb92>
   109b2:	f64b 63fa 	movw	r3, #48890	; 0xbefa
   109b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109ba:	2200      	movs	r2, #0
   109bc:	701a      	strb	r2, [r3, #0]
   109be:	f242 0338 	movw	r3, #8248	; 0x2038
   109c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109c6:	f242 0238 	movw	r2, #8248	; 0x2038
   109ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
   109ce:	7812      	ldrb	r2, [r2, #0]
   109d0:	b2d2      	uxtb	r2, r2
   109d2:	f042 0201 	orr.w	r2, r2, #1
   109d6:	b2d2      	uxtb	r2, r2
   109d8:	701a      	strb	r2, [r3, #0]
   109da:	f242 0339 	movw	r3, #8249	; 0x2039
   109de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109e2:	f242 0239 	movw	r2, #8249	; 0x2039
   109e6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   109ea:	7812      	ldrb	r2, [r2, #0]
   109ec:	b2d2      	uxtb	r2, r2
   109ee:	f042 0210 	orr.w	r2, r2, #16
   109f2:	b2d2      	uxtb	r2, r2
   109f4:	701a      	strb	r2, [r3, #0]
   109f6:	e00b      	b.n	10a10 <send_radIR+0xbe4>
   109f8:	f64b 63f8 	movw	r3, #48888	; 0xbef8
   109fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a00:	781b      	ldrb	r3, [r3, #0]
   10a02:	3301      	adds	r3, #1
   10a04:	b2da      	uxtb	r2, r3
   10a06:	f64b 63f8 	movw	r3, #48888	; 0xbef8
   10a0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a0e:	701a      	strb	r2, [r3, #0]
}
   10a10:	46bd      	mov	sp, r7
   10a12:	f85d 7b04 	ldr.w	r7, [sp], #4
   10a16:	4770      	bx	lr
   10a18:	200003f3 	.word	0x200003f3
   10a1c:	200003f5 	.word	0x200003f5

00010a20 <send_takeOff>:

void send_takeOff(void){
   10a20:	b580      	push	{r7, lr}
   10a22:	af00      	add	r7, sp, #0
  if (gps_pos_available){
   10a24:	f24c 038e 	movw	r3, #49294	; 0xc08e
   10a28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a2c:	781b      	ldrb	r3, [r3, #0]
   10a2e:	2b00      	cmp	r3, #0
   10a30:	f000 8200 	beq.w	10e34 <send_takeOff+0x414>
     if (!estimator_flight_time && (estimator_hspeed_mod > MIN_SPEED_FOR_TAKEOFF)) {
   10a34:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
   10a38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a3c:	881b      	ldrh	r3, [r3, #0]
   10a3e:	2b00      	cmp	r3, #0
   10a40:	f040 81f2 	bne.w	10e28 <send_takeOff+0x408>
   10a44:	f24c 43e4 	movw	r3, #50404	; 0xc4e4
   10a48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a4c:	681b      	ldr	r3, [r3, #0]
   10a4e:	4618      	mov	r0, r3
   10a50:	f04f 0100 	mov.w	r1, #0
   10a54:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   10a58:	f007 fe14 	bl	18684 <__aeabi_fcmpgt>
   10a5c:	4603      	mov	r3, r0
   10a5e:	2b00      	cmp	r3, #0
   10a60:	f000 81e2 	beq.w	10e28 <send_takeOff+0x408>
        estimator_flight_time = 1;
   10a64:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
   10a68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a6c:	2201      	movs	r2, #1
   10a6e:	801a      	strh	r2, [r3, #0]
        launch = TRUE; /* Not set in non auto launch */
   10a70:	f64b 63f0 	movw	r3, #48880	; 0xbef0
   10a74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a78:	2201      	movs	r2, #1
   10a7a:	701a      	strb	r2, [r3, #0]
        DOWNLINK_SEND_TAKEOFF(&cputime);
   10a7c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10a80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a84:	781a      	ldrb	r2, [r3, #0]
   10a86:	f64b 63fa 	movw	r3, #48890	; 0xbefa
   10a8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a8e:	781b      	ldrb	r3, [r3, #0]
   10a90:	b2db      	uxtb	r3, r3
   10a92:	429a      	cmp	r2, r3
   10a94:	d313      	bcc.n	10abe <send_takeOff+0x9e>
   10a96:	f64b 63fa 	movw	r3, #48890	; 0xbefa
   10a9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a9e:	781b      	ldrb	r3, [r3, #0]
   10aa0:	b2db      	uxtb	r3, r3
   10aa2:	461a      	mov	r2, r3
   10aa4:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10aa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10aac:	781b      	ldrb	r3, [r3, #0]
   10aae:	1ad3      	subs	r3, r2, r3
   10ab0:	33ff      	adds	r3, #255	; 0xff
   10ab2:	2b06      	cmp	r3, #6
   10ab4:	bfd4      	ite	le
   10ab6:	2300      	movle	r3, #0
   10ab8:	2301      	movgt	r3, #1
   10aba:	b2db      	uxtb	r3, r3
   10abc:	e011      	b.n	10ae2 <send_takeOff+0xc2>
   10abe:	f64b 63fa 	movw	r3, #48890	; 0xbefa
   10ac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ac6:	781b      	ldrb	r3, [r3, #0]
   10ac8:	b2db      	uxtb	r3, r3
   10aca:	461a      	mov	r2, r3
   10acc:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10ad0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ad4:	781b      	ldrb	r3, [r3, #0]
   10ad6:	1ad3      	subs	r3, r2, r3
   10ad8:	2b06      	cmp	r3, #6
   10ada:	bfd4      	ite	le
   10adc:	2300      	movle	r3, #0
   10ade:	2301      	movgt	r3, #1
   10ae0:	b2db      	uxtb	r3, r3
   10ae2:	2b00      	cmp	r3, #0
   10ae4:	f000 8194 	beq.w	10e10 <send_takeOff+0x3f0>
   10ae8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10aec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10af0:	781b      	ldrb	r3, [r3, #0]
   10af2:	461a      	mov	r2, r3
   10af4:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   10af8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10afc:	2105      	movs	r1, #5
   10afe:	5499      	strb	r1, [r3, r2]
   10b00:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10b04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b08:	781b      	ldrb	r3, [r3, #0]
   10b0a:	3301      	adds	r3, #1
   10b0c:	b2da      	uxtb	r2, r3
   10b0e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10b12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b16:	701a      	strb	r2, [r3, #0]
   10b18:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10b1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b20:	781b      	ldrb	r3, [r3, #0]
   10b22:	2bff      	cmp	r3, #255	; 0xff
   10b24:	d105      	bne.n	10b32 <send_takeOff+0x112>
   10b26:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10b2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b2e:	2200      	movs	r2, #0
   10b30:	701a      	strb	r2, [r3, #0]
   10b32:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10b36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b3a:	781b      	ldrb	r3, [r3, #0]
   10b3c:	461a      	mov	r2, r3
   10b3e:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   10b42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b46:	2104      	movs	r1, #4
   10b48:	5499      	strb	r1, [r3, r2]
   10b4a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10b4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b52:	781b      	ldrb	r3, [r3, #0]
   10b54:	3301      	adds	r3, #1
   10b56:	b2da      	uxtb	r2, r3
   10b58:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10b5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b60:	701a      	strb	r2, [r3, #0]
   10b62:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10b66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b6a:	781b      	ldrb	r3, [r3, #0]
   10b6c:	2bff      	cmp	r3, #255	; 0xff
   10b6e:	d105      	bne.n	10b7c <send_takeOff+0x15c>
   10b70:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10b74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b78:	2200      	movs	r2, #0
   10b7a:	701a      	strb	r2, [r3, #0]
   10b7c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10b80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b84:	2204      	movs	r2, #4
   10b86:	701a      	strb	r2, [r3, #0]
   10b88:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   10b8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b90:	2204      	movs	r2, #4
   10b92:	701a      	strb	r2, [r3, #0]
   10b94:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10b98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b9c:	781b      	ldrb	r3, [r3, #0]
   10b9e:	461a      	mov	r2, r3
   10ba0:	f64b 63da 	movw	r3, #48858	; 0xbeda
   10ba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ba8:	7819      	ldrb	r1, [r3, #0]
   10baa:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   10bae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bb2:	5499      	strb	r1, [r3, r2]
   10bb4:	f64b 63da 	movw	r3, #48858	; 0xbeda
   10bb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bbc:	781a      	ldrb	r2, [r3, #0]
   10bbe:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10bc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bc6:	781b      	ldrb	r3, [r3, #0]
   10bc8:	4413      	add	r3, r2
   10bca:	b2da      	uxtb	r2, r3
   10bcc:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10bd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bd4:	701a      	strb	r2, [r3, #0]
   10bd6:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   10bda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bde:	781a      	ldrb	r2, [r3, #0]
   10be0:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10be4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10be8:	781b      	ldrb	r3, [r3, #0]
   10bea:	4413      	add	r3, r2
   10bec:	b2da      	uxtb	r2, r3
   10bee:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   10bf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bf6:	701a      	strb	r2, [r3, #0]
   10bf8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10bfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c00:	781b      	ldrb	r3, [r3, #0]
   10c02:	3301      	adds	r3, #1
   10c04:	b2da      	uxtb	r2, r3
   10c06:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10c0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c0e:	701a      	strb	r2, [r3, #0]
   10c10:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10c14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c18:	781b      	ldrb	r3, [r3, #0]
   10c1a:	2bff      	cmp	r3, #255	; 0xff
   10c1c:	d105      	bne.n	10c2a <send_takeOff+0x20a>
   10c1e:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10c22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c26:	2200      	movs	r2, #0
   10c28:	701a      	strb	r2, [r3, #0]
   10c2a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10c2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c32:	781b      	ldrb	r3, [r3, #0]
   10c34:	461a      	mov	r2, r3
   10c36:	f64b 63da 	movw	r3, #48858	; 0xbeda
   10c3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c3e:	7859      	ldrb	r1, [r3, #1]
   10c40:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   10c44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c48:	5499      	strb	r1, [r3, r2]
   10c4a:	4b7b      	ldr	r3, [pc, #492]	; (10e38 <send_takeOff+0x418>)
   10c4c:	781a      	ldrb	r2, [r3, #0]
   10c4e:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10c52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c56:	781b      	ldrb	r3, [r3, #0]
   10c58:	4413      	add	r3, r2
   10c5a:	b2da      	uxtb	r2, r3
   10c5c:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10c60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c64:	701a      	strb	r2, [r3, #0]
   10c66:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   10c6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c6e:	781a      	ldrb	r2, [r3, #0]
   10c70:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10c74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c78:	781b      	ldrb	r3, [r3, #0]
   10c7a:	4413      	add	r3, r2
   10c7c:	b2da      	uxtb	r2, r3
   10c7e:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   10c82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c86:	701a      	strb	r2, [r3, #0]
   10c88:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10c8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c90:	781b      	ldrb	r3, [r3, #0]
   10c92:	3301      	adds	r3, #1
   10c94:	b2da      	uxtb	r2, r3
   10c96:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10c9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c9e:	701a      	strb	r2, [r3, #0]
   10ca0:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10ca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ca8:	781b      	ldrb	r3, [r3, #0]
   10caa:	2bff      	cmp	r3, #255	; 0xff
   10cac:	d105      	bne.n	10cba <send_takeOff+0x29a>
   10cae:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10cb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cb6:	2200      	movs	r2, #0
   10cb8:	701a      	strb	r2, [r3, #0]
   10cba:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10cbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cc2:	781b      	ldrb	r3, [r3, #0]
   10cc4:	461a      	mov	r2, r3
   10cc6:	f64b 73fd 	movw	r3, #49149	; 0xbffd
   10cca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cce:	7819      	ldrb	r1, [r3, #0]
   10cd0:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   10cd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cd8:	5499      	strb	r1, [r3, r2]
   10cda:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10cde:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ce2:	781b      	ldrb	r3, [r3, #0]
   10ce4:	3301      	adds	r3, #1
   10ce6:	b2da      	uxtb	r2, r3
   10ce8:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10cec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cf0:	701a      	strb	r2, [r3, #0]
   10cf2:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10cf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cfa:	781b      	ldrb	r3, [r3, #0]
   10cfc:	2bff      	cmp	r3, #255	; 0xff
   10cfe:	d105      	bne.n	10d0c <send_takeOff+0x2ec>
   10d00:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10d04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d08:	2200      	movs	r2, #0
   10d0a:	701a      	strb	r2, [r3, #0]
   10d0c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10d10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d14:	781b      	ldrb	r3, [r3, #0]
   10d16:	461a      	mov	r2, r3
   10d18:	f64b 73fe 	movw	r3, #49150	; 0xbffe
   10d1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d20:	7819      	ldrb	r1, [r3, #0]
   10d22:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   10d26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d2a:	5499      	strb	r1, [r3, r2]
   10d2c:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10d30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d34:	781b      	ldrb	r3, [r3, #0]
   10d36:	3301      	adds	r3, #1
   10d38:	b2da      	uxtb	r2, r3
   10d3a:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10d3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d42:	701a      	strb	r2, [r3, #0]
   10d44:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10d48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d4c:	781b      	ldrb	r3, [r3, #0]
   10d4e:	2bff      	cmp	r3, #255	; 0xff
   10d50:	d105      	bne.n	10d5e <send_takeOff+0x33e>
   10d52:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10d56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d5a:	2200      	movs	r2, #0
   10d5c:	701a      	strb	r2, [r3, #0]
   10d5e:	f242 0339 	movw	r3, #8249	; 0x2039
   10d62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d66:	781b      	ldrb	r3, [r3, #0]
   10d68:	b2db      	uxtb	r3, r3
   10d6a:	f003 0310 	and.w	r3, r3, #16
   10d6e:	2b00      	cmp	r3, #0
   10d70:	d15a      	bne.n	10e28 <send_takeOff+0x408>
   10d72:	f64b 63fa 	movw	r3, #48890	; 0xbefa
   10d76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d7a:	781b      	ldrb	r3, [r3, #0]
   10d7c:	b2db      	uxtb	r3, r3
   10d7e:	461a      	mov	r2, r3
   10d80:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   10d84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d88:	5c9a      	ldrb	r2, [r3, r2]
   10d8a:	f64b 73fb 	movw	r3, #49147	; 0xbffb
   10d8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d92:	701a      	strb	r2, [r3, #0]
   10d94:	f64b 73fc 	movw	r3, #49148	; 0xbffc
   10d98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d9c:	2200      	movs	r2, #0
   10d9e:	701a      	strb	r2, [r3, #0]
   10da0:	f64b 63fa 	movw	r3, #48890	; 0xbefa
   10da4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10da8:	781b      	ldrb	r3, [r3, #0]
   10daa:	b2db      	uxtb	r3, r3
   10dac:	3301      	adds	r3, #1
   10dae:	b2da      	uxtb	r2, r3
   10db0:	f64b 63fa 	movw	r3, #48890	; 0xbefa
   10db4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10db8:	701a      	strb	r2, [r3, #0]
   10dba:	f64b 63fa 	movw	r3, #48890	; 0xbefa
   10dbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dc2:	781b      	ldrb	r3, [r3, #0]
   10dc4:	b2db      	uxtb	r3, r3
   10dc6:	2bff      	cmp	r3, #255	; 0xff
   10dc8:	d105      	bne.n	10dd6 <send_takeOff+0x3b6>
   10dca:	f64b 63fa 	movw	r3, #48890	; 0xbefa
   10dce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dd2:	2200      	movs	r2, #0
   10dd4:	701a      	strb	r2, [r3, #0]
   10dd6:	f242 0338 	movw	r3, #8248	; 0x2038
   10dda:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10dde:	f242 0238 	movw	r2, #8248	; 0x2038
   10de2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10de6:	7812      	ldrb	r2, [r2, #0]
   10de8:	b2d2      	uxtb	r2, r2
   10dea:	f042 0201 	orr.w	r2, r2, #1
   10dee:	b2d2      	uxtb	r2, r2
   10df0:	701a      	strb	r2, [r3, #0]
   10df2:	f242 0339 	movw	r3, #8249	; 0x2039
   10df6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10dfa:	f242 0239 	movw	r2, #8249	; 0x2039
   10dfe:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10e02:	7812      	ldrb	r2, [r2, #0]
   10e04:	b2d2      	uxtb	r2, r2
   10e06:	f042 0210 	orr.w	r2, r2, #16
   10e0a:	b2d2      	uxtb	r2, r2
   10e0c:	701a      	strb	r2, [r3, #0]
   10e0e:	e00b      	b.n	10e28 <send_takeOff+0x408>
   10e10:	f64b 63f8 	movw	r3, #48888	; 0xbef8
   10e14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e18:	781b      	ldrb	r3, [r3, #0]
   10e1a:	3301      	adds	r3, #1
   10e1c:	b2da      	uxtb	r2, r3
   10e1e:	f64b 63f8 	movw	r3, #48888	; 0xbef8
   10e22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e26:	701a      	strb	r2, [r3, #0]
     }
     gps_pos_available = FALSE; 
   10e28:	f24c 038e 	movw	r3, #49294	; 0xc08e
   10e2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e30:	2200      	movs	r2, #0
   10e32:	701a      	strb	r2, [r3, #0]
  }
  //vPrintString("S_16 receive_gps_data_task end!\n\r");
}
   10e34:	bd80      	pop	{r7, pc}
   10e36:	bf00      	nop
   10e38:	2004bedb 	.word	0x2004bedb
   10e3c:	f3af 8000 	nop.w

00010e40 <modem_init>:
uint8_t    tx_byte;
uint8_t    tx_byte_idx;

uint8_t ck_a, ck_b;

void modem_init( void ) {
   10e40:	b480      	push	{r7}
   10e42:	af00      	add	r7, sp, #0
  /* 
     on >= V1.2 boards, 4MHz modem clock is generated
     by one PWM module.
  */
#if defined CTL_BRD_V1_2 || defined CTL_BRD_V1_2_1
  MODEM_OSC_DDR |= _BV(MODEM_OSC);
   10e44:	f242 0317 	movw	r3, #8215	; 0x2017
   10e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e4c:	f242 0217 	movw	r2, #8215	; 0x2017
   10e50:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10e54:	7812      	ldrb	r2, [r2, #0]
   10e56:	b2d2      	uxtb	r2, r2
   10e58:	f042 0210 	orr.w	r2, r2, #16
   10e5c:	b2d2      	uxtb	r2, r2
   10e5e:	701a      	strb	r2, [r3, #0]
  OCR0 = 1; /* 4MhZ */
   10e60:	f242 0331 	movw	r3, #8241	; 0x2031
   10e64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e68:	2201      	movs	r2, #1
   10e6a:	701a      	strb	r2, [r3, #0]
  TCCR0 = _BV(WGM01) | _BV(COM00) | _BV(CS00);
   10e6c:	f242 0333 	movw	r3, #8243	; 0x2033
   10e70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e74:	2219      	movs	r2, #25
   10e76:	701a      	strb	r2, [r3, #0]
#endif

  /* setup TX_EN and TX_DATA pin as output */
  MODEM_TX_DDR |= _BV(MODEM_TX_EN) | _BV(MODEM_TX_DATA);
   10e78:	f242 0311 	movw	r3, #8209	; 0x2011
   10e7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e80:	f242 0211 	movw	r2, #8209	; 0x2011
   10e84:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10e88:	7812      	ldrb	r2, [r2, #0]
   10e8a:	b2d2      	uxtb	r2, r2
   10e8c:	f062 023f 	orn	r2, r2, #63	; 0x3f
   10e90:	b2d2      	uxtb	r2, r2
   10e92:	701a      	strb	r2, [r3, #0]
  /* data idles hight */
  sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10e94:	f242 0312 	movw	r3, #8210	; 0x2012
   10e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e9c:	f242 0212 	movw	r2, #8210	; 0x2012
   10ea0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ea4:	7812      	ldrb	r2, [r2, #0]
   10ea6:	b2d2      	uxtb	r2, r2
   10ea8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10eac:	b2d2      	uxtb	r2, r2
   10eae:	701a      	strb	r2, [r3, #0]
  /* enable transmitter */
  cbi(MODEM_TX_PORT, MODEM_TX_EN);
   10eb0:	f242 0312 	movw	r3, #8210	; 0x2012
   10eb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10eb8:	f242 0212 	movw	r2, #8210	; 0x2012
   10ebc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ec0:	7812      	ldrb	r2, [r2, #0]
   10ec2:	b2d2      	uxtb	r2, r2
   10ec4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   10ec8:	b2d2      	uxtb	r2, r2
   10eca:	701a      	strb	r2, [r3, #0]
  /* set interrupt on failing edge of clock */
  MODEM_CLK_INT_REG |=  MODEM_CLK_INT_CFG;
   10ecc:	f242 033a 	movw	r3, #8250	; 0x203a
   10ed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ed4:	f242 023a 	movw	r2, #8250	; 0x203a
   10ed8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10edc:	7812      	ldrb	r2, [r2, #0]
   10ede:	b2d2      	uxtb	r2, r2
   10ee0:	f042 0202 	orr.w	r2, r2, #2
   10ee4:	b2d2      	uxtb	r2, r2
   10ee6:	701a      	strb	r2, [r3, #0]
}
   10ee8:	46bd      	mov	sp, r7
   10eea:	f85d 7b04 	ldr.w	r7, [sp], #4
   10eee:	4770      	bx	lr

00010ef0 <__vector_5>:

SIGNAL( MODEM_CLK_INT_SIG ) {
   10ef0:	b480      	push	{r7}
   10ef2:	af00      	add	r7, sp, #0
  /*  start bit         */
  if (tx_byte_idx == 0)
   10ef4:	f64b 73fc 	movw	r3, #49148	; 0xbffc
   10ef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10efc:	781b      	ldrb	r3, [r3, #0]
   10efe:	2b00      	cmp	r3, #0
   10f00:	d10e      	bne.n	10f20 <__vector_5+0x30>
    cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10f02:	f242 0312 	movw	r3, #8210	; 0x2012
   10f06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f0a:	f242 0212 	movw	r2, #8210	; 0x2012
   10f0e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f12:	7812      	ldrb	r2, [r2, #0]
   10f14:	b2d2      	uxtb	r2, r2
   10f16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   10f1a:	b2d2      	uxtb	r2, r2
   10f1c:	701a      	strb	r2, [r3, #0]
   10f1e:	e047      	b.n	10fb0 <__vector_5+0xc0>
  /* 8 data bits        */ 
  else if (tx_byte_idx < 9) {
   10f20:	f64b 73fc 	movw	r3, #49148	; 0xbffc
   10f24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f28:	781b      	ldrb	r3, [r3, #0]
   10f2a:	2b08      	cmp	r3, #8
   10f2c:	d832      	bhi.n	10f94 <__vector_5+0xa4>
    if (tx_byte & 0x01)
   10f2e:	f64b 73fb 	movw	r3, #49147	; 0xbffb
   10f32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f36:	781b      	ldrb	r3, [r3, #0]
   10f38:	f003 0301 	and.w	r3, r3, #1
   10f3c:	2b00      	cmp	r3, #0
   10f3e:	d00e      	beq.n	10f5e <__vector_5+0x6e>
      sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10f40:	f242 0312 	movw	r3, #8210	; 0x2012
   10f44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f48:	f242 0212 	movw	r2, #8210	; 0x2012
   10f4c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f50:	7812      	ldrb	r2, [r2, #0]
   10f52:	b2d2      	uxtb	r2, r2
   10f54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10f58:	b2d2      	uxtb	r2, r2
   10f5a:	701a      	strb	r2, [r3, #0]
   10f5c:	e00d      	b.n	10f7a <__vector_5+0x8a>
    else
      cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10f5e:	f242 0312 	movw	r3, #8210	; 0x2012
   10f62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f66:	f242 0212 	movw	r2, #8210	; 0x2012
   10f6a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f6e:	7812      	ldrb	r2, [r2, #0]
   10f70:	b2d2      	uxtb	r2, r2
   10f72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   10f76:	b2d2      	uxtb	r2, r2
   10f78:	701a      	strb	r2, [r3, #0]
    tx_byte >>= 1;
   10f7a:	f64b 73fb 	movw	r3, #49147	; 0xbffb
   10f7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f82:	781b      	ldrb	r3, [r3, #0]
   10f84:	085b      	lsrs	r3, r3, #1
   10f86:	b2da      	uxtb	r2, r3
   10f88:	f64b 73fb 	movw	r3, #49147	; 0xbffb
   10f8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f90:	701a      	strb	r2, [r3, #0]
   10f92:	e00d      	b.n	10fb0 <__vector_5+0xc0>
  }
  /* stop_bit           */
  else {
    sbi(MODEM_TX_PORT, MODEM_TX_DATA); 
   10f94:	f242 0312 	movw	r3, #8210	; 0x2012
   10f98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f9c:	f242 0212 	movw	r2, #8210	; 0x2012
   10fa0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10fa4:	7812      	ldrb	r2, [r2, #0]
   10fa6:	b2d2      	uxtb	r2, r2
   10fa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10fac:	b2d2      	uxtb	r2, r2
   10fae:	701a      	strb	r2, [r3, #0]
  }
  tx_byte_idx++;
   10fb0:	f64b 73fc 	movw	r3, #49148	; 0xbffc
   10fb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fb8:	781b      	ldrb	r3, [r3, #0]
   10fba:	3301      	adds	r3, #1
   10fbc:	b2da      	uxtb	r2, r3
   10fbe:	f64b 73fc 	movw	r3, #49148	; 0xbffc
   10fc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fc6:	701a      	strb	r2, [r3, #0]
  /* next byte          */
  if (tx_byte_idx >= 10) {
   10fc8:	f64b 73fc 	movw	r3, #49148	; 0xbffc
   10fcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fd0:	781b      	ldrb	r3, [r3, #0]
   10fd2:	2b09      	cmp	r3, #9
   10fd4:	d94d      	bls.n	11072 <__vector_5+0x182>
    /*  if we have nothing left to transmit */
    if( tx_head == tx_tail ) {
   10fd6:	f64b 63f9 	movw	r3, #48889	; 0xbef9
   10fda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fde:	781a      	ldrb	r2, [r3, #0]
   10fe0:	f64b 63fa 	movw	r3, #48890	; 0xbefa
   10fe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fe8:	781b      	ldrb	r3, [r3, #0]
   10fea:	b2db      	uxtb	r3, r3
   10fec:	429a      	cmp	r2, r3
   10fee:	d10e      	bne.n	1100e <__vector_5+0x11e>
      /* disable clock interrupt            */
      cbi( EIMSK, MODEM_CLK_INT );
   10ff0:	f242 0339 	movw	r3, #8249	; 0x2039
   10ff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ff8:	f242 0239 	movw	r2, #8249	; 0x2039
   10ffc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11000:	7812      	ldrb	r2, [r2, #0]
   11002:	b2d2      	uxtb	r2, r2
   11004:	f022 0210 	bic.w	r2, r2, #16
   11008:	b2d2      	uxtb	r2, r2
   1100a:	701a      	strb	r2, [r3, #0]
   1100c:	e031      	b.n	11072 <__vector_5+0x182>
    } else {
      /* else load next byte                  */
      MODEM_LOAD_NEXT_BYTE();  
   1100e:	f64b 63fa 	movw	r3, #48890	; 0xbefa
   11012:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11016:	781b      	ldrb	r3, [r3, #0]
   11018:	b2db      	uxtb	r3, r3
   1101a:	461a      	mov	r2, r3
   1101c:	f64b 63fc 	movw	r3, #48892	; 0xbefc
   11020:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11024:	5c9a      	ldrb	r2, [r3, r2]
   11026:	f64b 73fb 	movw	r3, #49147	; 0xbffb
   1102a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1102e:	701a      	strb	r2, [r3, #0]
   11030:	f64b 73fc 	movw	r3, #49148	; 0xbffc
   11034:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11038:	2200      	movs	r2, #0
   1103a:	701a      	strb	r2, [r3, #0]
   1103c:	f64b 63fa 	movw	r3, #48890	; 0xbefa
   11040:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11044:	781b      	ldrb	r3, [r3, #0]
   11046:	b2db      	uxtb	r3, r3
   11048:	3301      	adds	r3, #1
   1104a:	b2da      	uxtb	r2, r3
   1104c:	f64b 63fa 	movw	r3, #48890	; 0xbefa
   11050:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11054:	701a      	strb	r2, [r3, #0]
   11056:	f64b 63fa 	movw	r3, #48890	; 0xbefa
   1105a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1105e:	781b      	ldrb	r3, [r3, #0]
   11060:	b2db      	uxtb	r3, r3
   11062:	2bff      	cmp	r3, #255	; 0xff
   11064:	d105      	bne.n	11072 <__vector_5+0x182>
   11066:	f64b 63fa 	movw	r3, #48890	; 0xbefa
   1106a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1106e:	2200      	movs	r2, #0
   11070:	701a      	strb	r2, [r3, #0]
    }
  }
}
   11072:	46bd      	mov	sp, r7
   11074:	f85d 7b04 	ldr.w	r7, [sp], #4
   11078:	4770      	bx	lr
   1107a:	bf00      	nop

0001107c <link_fbw_init>:
uint8_t link_fbw_fbw_nb_err;

static uint8_t idx_buf;
static uint8_t xor_in, xor_out;

void link_fbw_init(void) {
   1107c:	b480      	push	{r7}
   1107e:	af00      	add	r7, sp, #0
  link_fbw_nb_err;
   11080:	f24c 032f 	movw	r3, #49199	; 0xc02f
   11084:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11088:	781b      	ldrb	r3, [r3, #0]
  link_fbw_receive_complete = FALSE;  
   1108a:	f240 33ee 	movw	r3, #1006	; 0x3ee
   1108e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11092:	2200      	movs	r2, #0
   11094:	701a      	strb	r2, [r3, #0]
}
   11096:	46bd      	mov	sp, r7
   11098:	f85d 7b04 	ldr.w	r7, [sp], #4
   1109c:	4770      	bx	lr
   1109e:	bf00      	nop

000110a0 <link_fbw_send>:

void link_fbw_send(void) {
   110a0:	b480      	push	{r7}
   110a2:	b083      	sub	sp, #12
   110a4:	af00      	add	r7, sp, #0
    //vPrintString("S_7 link_fbw_send start! \n\r"); //SunnyBeike

    if (spi_cur_slave != SPI_NONE) 
   110a6:	f24c 0334 	movw	r3, #49204	; 0xc034
   110aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110ae:	781b      	ldrb	r3, [r3, #0]
   110b0:	b2db      	uxtb	r3, r3
   110b2:	2b00      	cmp	r3, #0
   110b4:	d00c      	beq.n	110d0 <link_fbw_send+0x30>
    {
        spi_nb_ovrn++;
   110b6:	f24c 0335 	movw	r3, #49205	; 0xc035
   110ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110be:	781b      	ldrb	r3, [r3, #0]
   110c0:	3301      	adds	r3, #1
   110c2:	b2da      	uxtb	r2, r3
   110c4:	f24c 0335 	movw	r3, #49205	; 0xc035
   110c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110cc:	701a      	strb	r2, [r3, #0]
        //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
        return;
   110ce:	e064      	b.n	1119a <link_fbw_send+0xfa>
    }

    /* Enable SPI, Master, set clock rate fck/16 */ 
    SPI_START(_BV(SPE) | _BV(MSTR) | _BV(SPR0)); // | _BV(SPR1);
   110d0:	f242 030d 	movw	r3, #8205	; 0x200d
   110d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110d8:	2251      	movs	r2, #81	; 0x51
   110da:	701a      	strb	r2, [r3, #0]
   110dc:	f242 030e 	movw	r3, #8206	; 0x200e
   110e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110e4:	781b      	ldrb	r3, [r3, #0]
   110e6:	b2db      	uxtb	r3, r3
   110e8:	b2db      	uxtb	r3, r3
   110ea:	b25b      	sxtb	r3, r3
   110ec:	2b00      	cmp	r3, #0
   110ee:	da05      	bge.n	110fc <link_fbw_send+0x5c>
   110f0:	f242 030f 	movw	r3, #8207	; 0x200f
   110f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110f8:	781b      	ldrb	r3, [r3, #0]
   110fa:	71fb      	strb	r3, [r7, #7]
   110fc:	f242 030d 	movw	r3, #8205	; 0x200d
   11100:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11104:	f242 020d 	movw	r2, #8205	; 0x200d
   11108:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1110c:	7812      	ldrb	r2, [r2, #0]
   1110e:	b2d2      	uxtb	r2, r2
   11110:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11114:	b2d2      	uxtb	r2, r2
   11116:	701a      	strb	r2, [r3, #0]
    SPI_SELECT_SLAVE0();
   11118:	f24c 0334 	movw	r3, #49204	; 0xc034
   1111c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11120:	2201      	movs	r2, #1
   11122:	701a      	strb	r2, [r3, #0]
   11124:	f242 0318 	movw	r3, #8216	; 0x2018
   11128:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1112c:	f242 0218 	movw	r2, #8216	; 0x2018
   11130:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11134:	7812      	ldrb	r2, [r2, #0]
   11136:	b2d2      	uxtb	r2, r2
   11138:	f022 0201 	bic.w	r2, r2, #1
   1113c:	b2d2      	uxtb	r2, r2
   1113e:	701a      	strb	r2, [r3, #0]

    idx_buf = 0;
   11140:	f24c 0331 	movw	r3, #49201	; 0xc031
   11144:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11148:	2200      	movs	r2, #0
   1114a:	701a      	strb	r2, [r3, #0]
    xor_in = 0;
   1114c:	f24c 0332 	movw	r3, #49202	; 0xc032
   11150:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11154:	2200      	movs	r2, #0
   11156:	701a      	strb	r2, [r3, #0]
    xor_out = ((uint8_t*)&to_fbw)[idx_buf];
   11158:	f24c 0331 	movw	r3, #49201	; 0xc031
   1115c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11160:	781b      	ldrb	r3, [r3, #0]
   11162:	461a      	mov	r2, r3
   11164:	f24c 0318 	movw	r3, #49176	; 0xc018
   11168:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1116c:	4413      	add	r3, r2
   1116e:	781a      	ldrb	r2, [r3, #0]
   11170:	f24c 0333 	movw	r3, #49203	; 0xc033
   11174:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11178:	701a      	strb	r2, [r3, #0]
    SPDR = xor_out;
   1117a:	f242 030f 	movw	r3, #8207	; 0x200f
   1117e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11182:	f24c 0233 	movw	r2, #49203	; 0xc033
   11186:	f2c2 0204 	movt	r2, #8196	; 0x2004
   1118a:	7812      	ldrb	r2, [r2, #0]
   1118c:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_valid = FALSE;
   1118e:	f24c 032e 	movw	r3, #49198	; 0xc02e
   11192:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11196:	2200      	movs	r2, #0
   11198:	701a      	strb	r2, [r3, #0]
    // Other bytes will follow SIG_SPI interrupts
    //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
}
   1119a:	370c      	adds	r7, #12
   1119c:	46bd      	mov	sp, r7
   1119e:	f85d 7b04 	ldr.w	r7, [sp], #4
   111a2:	4770      	bx	lr

000111a4 <link_fbw_on_spi_it>:

void link_fbw_on_spi_it( void ) {
   111a4:	b480      	push	{r7}
   111a6:	af00      	add	r7, sp, #0
  /* setup OCR1A to pop in 200 clock cycles */
  /* this leaves time for the slave (fbw)   */
  /* to process the byte we've sent and to  */
  /* prepare a new one to be sent           */
  OCR1A = TCNT1 + 200;
   111a8:	f242 032a 	movw	r3, #8234	; 0x202a
   111ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111b0:	f242 022c 	movw	r2, #8236	; 0x202c
   111b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   111b8:	8812      	ldrh	r2, [r2, #0]
   111ba:	b292      	uxth	r2, r2
   111bc:	32c8      	adds	r2, #200	; 0xc8
   111be:	b292      	uxth	r2, r2
   111c0:	801a      	strh	r2, [r3, #0]
  /* clear interrupt flag  */
  sbi(TIFR, OCF1A);
   111c2:	f242 0336 	movw	r3, #8246	; 0x2036
   111c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111ca:	f242 0236 	movw	r2, #8246	; 0x2036
   111ce:	f2c2 0200 	movt	r2, #8192	; 0x2000
   111d2:	7812      	ldrb	r2, [r2, #0]
   111d4:	b2d2      	uxtb	r2, r2
   111d6:	f042 0210 	orr.w	r2, r2, #16
   111da:	b2d2      	uxtb	r2, r2
   111dc:	701a      	strb	r2, [r3, #0]
  /* enable OC1A interrupt */
  sbi(TIMSK, OCIE1A);
   111de:	f242 0337 	movw	r3, #8247	; 0x2037
   111e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111e6:	f242 0237 	movw	r2, #8247	; 0x2037
   111ea:	f2c2 0200 	movt	r2, #8192	; 0x2000
   111ee:	7812      	ldrb	r2, [r2, #0]
   111f0:	b2d2      	uxtb	r2, r2
   111f2:	f042 0210 	orr.w	r2, r2, #16
   111f6:	b2d2      	uxtb	r2, r2
   111f8:	701a      	strb	r2, [r3, #0]
}
   111fa:	46bd      	mov	sp, r7
   111fc:	f85d 7b04 	ldr.w	r7, [sp], #4
   11200:	4770      	bx	lr
   11202:	bf00      	nop

00011204 <__vector_12>:


/* send the next byte */
SIGNAL(SIG_OUTPUT_COMPARE1A) {
   11204:	b480      	push	{r7}
   11206:	b083      	sub	sp, #12
   11208:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* disable OC1A interrupt */
  cbi(TIMSK, OCIE1A); 
   1120a:	f242 0337 	movw	r3, #8247	; 0x2037
   1120e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11212:	f242 0237 	movw	r2, #8247	; 0x2037
   11216:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1121a:	7812      	ldrb	r2, [r2, #0]
   1121c:	b2d2      	uxtb	r2, r2
   1121e:	f022 0210 	bic.w	r2, r2, #16
   11222:	b2d2      	uxtb	r2, r2
   11224:	701a      	strb	r2, [r3, #0]

  idx_buf++;
   11226:	f24c 0331 	movw	r3, #49201	; 0xc031
   1122a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1122e:	781b      	ldrb	r3, [r3, #0]
   11230:	3301      	adds	r3, #1
   11232:	b2da      	uxtb	r2, r3
   11234:	f24c 0331 	movw	r3, #49201	; 0xc031
   11238:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1123c:	701a      	strb	r2, [r3, #0]

  /* we have sent/received a complete frame */
  if (idx_buf == FRAME_LENGTH) {
   1123e:	f24c 0331 	movw	r3, #49201	; 0xc031
   11242:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11246:	781b      	ldrb	r3, [r3, #0]
   11248:	2b17      	cmp	r3, #23
   1124a:	d162      	bne.n	11312 <__vector_12+0x10e>
    /* read checksum from receive register  */
    tmp = SPDR;
   1124c:	f242 030f 	movw	r3, #8207	; 0x200f
   11250:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11254:	781b      	ldrb	r3, [r3, #0]
   11256:	71fb      	strb	r3, [r7, #7]
    /* notify valid frame                   */
    if (tmp == xor_in) {
   11258:	f24c 0332 	movw	r3, #49202	; 0xc032
   1125c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11260:	781b      	ldrb	r3, [r3, #0]
   11262:	79fa      	ldrb	r2, [r7, #7]
   11264:	429a      	cmp	r2, r3
   11266:	d110      	bne.n	1128a <__vector_12+0x86>
      link_fbw_receive_valid = TRUE;
   11268:	f24c 032e 	movw	r3, #49198	; 0xc02e
   1126c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11270:	2201      	movs	r2, #1
   11272:	701a      	strb	r2, [r3, #0]
      link_fbw_fbw_nb_err = from_fbw.nb_err;
   11274:	f24c 0300 	movw	r3, #49152	; 0xc000
   11278:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1127c:	7d1a      	ldrb	r2, [r3, #20]
   1127e:	f24c 0330 	movw	r3, #49200	; 0xc030
   11282:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11286:	701a      	strb	r2, [r3, #0]
   11288:	e00c      	b.n	112a4 <__vector_12+0xa0>
    }
    else
      link_fbw_nb_err++;
   1128a:	f24c 032f 	movw	r3, #49199	; 0xc02f
   1128e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11292:	781b      	ldrb	r3, [r3, #0]
   11294:	b2db      	uxtb	r3, r3
   11296:	3301      	adds	r3, #1
   11298:	b2da      	uxtb	r2, r3
   1129a:	f24c 032f 	movw	r3, #49199	; 0xc02f
   1129e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112a2:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_complete = TRUE;
   112a4:	f240 33ee 	movw	r3, #1006	; 0x3ee
   112a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112ac:	2201      	movs	r2, #1
   112ae:	701a      	strb	r2, [r3, #0]
    /* unselect slave0                      */
    SPI_UNSELECT_SLAVE0();
   112b0:	f24c 0334 	movw	r3, #49204	; 0xc034
   112b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112b8:	2200      	movs	r2, #0
   112ba:	701a      	strb	r2, [r3, #0]
   112bc:	f242 0318 	movw	r3, #8216	; 0x2018
   112c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112c4:	f242 0218 	movw	r2, #8216	; 0x2018
   112c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   112cc:	7812      	ldrb	r2, [r2, #0]
   112ce:	b2d2      	uxtb	r2, r2
   112d0:	f042 0201 	orr.w	r2, r2, #1
   112d4:	b2d2      	uxtb	r2, r2
   112d6:	701a      	strb	r2, [r3, #0]
    SPI_STOP();
   112d8:	f242 030d 	movw	r3, #8205	; 0x200d
   112dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112e0:	f242 020d 	movw	r2, #8205	; 0x200d
   112e4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   112e8:	7812      	ldrb	r2, [r2, #0]
   112ea:	b2d2      	uxtb	r2, r2
   112ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   112f0:	b2d2      	uxtb	r2, r2
   112f2:	701a      	strb	r2, [r3, #0]
   112f4:	f242 030d 	movw	r3, #8205	; 0x200d
   112f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112fc:	f242 020d 	movw	r2, #8205	; 0x200d
   11300:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11304:	7812      	ldrb	r2, [r2, #0]
   11306:	b2d2      	uxtb	r2, r2
   11308:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1130c:	b2d2      	uxtb	r2, r2
   1130e:	701a      	strb	r2, [r3, #0]
    return;
   11310:	e051      	b.n	113b6 <__vector_12+0x1b2>
  }

  /* we are sending/receiving payload       */
  if (idx_buf < FRAME_LENGTH - 1) {
   11312:	f24c 0331 	movw	r3, #49201	; 0xc031
   11316:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1131a:	781b      	ldrb	r3, [r3, #0]
   1131c:	2b15      	cmp	r3, #21
   1131e:	d820      	bhi.n	11362 <__vector_12+0x15e>
    /* place new payload byte in send register */
    tmp = ((uint8_t*)&to_fbw)[idx_buf];
   11320:	f24c 0331 	movw	r3, #49201	; 0xc031
   11324:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11328:	781b      	ldrb	r3, [r3, #0]
   1132a:	461a      	mov	r2, r3
   1132c:	f24c 0318 	movw	r3, #49176	; 0xc018
   11330:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11334:	4413      	add	r3, r2
   11336:	781b      	ldrb	r3, [r3, #0]
   11338:	71fb      	strb	r3, [r7, #7]
    SPI_SEND(tmp);
   1133a:	f242 030f 	movw	r3, #8207	; 0x200f
   1133e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11342:	79fa      	ldrb	r2, [r7, #7]
   11344:	701a      	strb	r2, [r3, #0]
    xor_out ^= tmp;
   11346:	f24c 0333 	movw	r3, #49203	; 0xc033
   1134a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1134e:	781a      	ldrb	r2, [r3, #0]
   11350:	79fb      	ldrb	r3, [r7, #7]
   11352:	4053      	eors	r3, r2
   11354:	b2da      	uxtb	r2, r3
   11356:	f24c 0333 	movw	r3, #49203	; 0xc033
   1135a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1135e:	701a      	strb	r2, [r3, #0]
   11360:	e009      	b.n	11376 <__vector_12+0x172>
  } 
  /* we are done sending the payload */
  else { // idx_buf == FRAME_LENGTH - 1
    /* place checksum in send register */
    SPI_SEND(xor_out);
   11362:	f242 030f 	movw	r3, #8207	; 0x200f
   11366:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1136a:	f24c 0233 	movw	r2, #49203	; 0xc033
   1136e:	f2c2 0204 	movt	r2, #8196	; 0x2004
   11372:	7812      	ldrb	r2, [r2, #0]
   11374:	701a      	strb	r2, [r3, #0]
  }
  
  /* read the byte from receive register */
  tmp = SPDR;
   11376:	f242 030f 	movw	r3, #8207	; 0x200f
   1137a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1137e:	781b      	ldrb	r3, [r3, #0]
   11380:	71fb      	strb	r3, [r7, #7]
  ((uint8_t*)&from_fbw)[idx_buf-1] = tmp;
   11382:	f24c 0331 	movw	r3, #49201	; 0xc031
   11386:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1138a:	781b      	ldrb	r3, [r3, #0]
   1138c:	1e5a      	subs	r2, r3, #1
   1138e:	f24c 0300 	movw	r3, #49152	; 0xc000
   11392:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11396:	4413      	add	r3, r2
   11398:	79fa      	ldrb	r2, [r7, #7]
   1139a:	701a      	strb	r2, [r3, #0]
  xor_in ^= tmp;
   1139c:	f24c 0332 	movw	r3, #49202	; 0xc032
   113a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113a4:	781a      	ldrb	r2, [r3, #0]
   113a6:	79fb      	ldrb	r3, [r7, #7]
   113a8:	4053      	eors	r3, r2
   113aa:	b2da      	uxtb	r2, r3
   113ac:	f24c 0332 	movw	r3, #49202	; 0xc032
   113b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113b4:	701a      	strb	r2, [r3, #0]
}
   113b6:	370c      	adds	r7, #12
   113b8:	46bd      	mov	sp, r7
   113ba:	f85d 7b04 	ldr.w	r7, [sp], #4
   113be:	4770      	bx	lr

000113c0 <spi_init>:
#include "ad7714.h"

volatile uint8_t spi_cur_slave;
uint8_t spi_nb_ovrn;

void spi_init( void) {
   113c0:	b480      	push	{r7}
   113c2:	af00      	add	r7, sp, #0
  /* Set MOSI and SCK output, all others input */ 
  SPI_DDR |= _BV(SPI_MOSI_PIN)| _BV(SPI_SCK_PIN); 
   113c4:	f242 0317 	movw	r3, #8215	; 0x2017
   113c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113cc:	f242 0217 	movw	r2, #8215	; 0x2017
   113d0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   113d4:	7812      	ldrb	r2, [r2, #0]
   113d6:	b2d2      	uxtb	r2, r2
   113d8:	f042 0206 	orr.w	r2, r2, #6
   113dc:	b2d2      	uxtb	r2, r2
   113de:	701a      	strb	r2, [r3, #0]

  /* enable pull up for miso */
  //  SPI_PORT |= _BV(SPI_MISO_PIN);

  /* Set SS0 output */
  sbi( SPI_SS0_DDR, SPI_SS0_PIN);
   113e0:	f242 0317 	movw	r3, #8215	; 0x2017
   113e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113e8:	f242 0217 	movw	r2, #8215	; 0x2017
   113ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
   113f0:	7812      	ldrb	r2, [r2, #0]
   113f2:	b2d2      	uxtb	r2, r2
   113f4:	f042 0201 	orr.w	r2, r2, #1
   113f8:	b2d2      	uxtb	r2, r2
   113fa:	701a      	strb	r2, [r3, #0]
  /* SS0 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE0();
   113fc:	f24c 0334 	movw	r3, #49204	; 0xc034
   11400:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11404:	2200      	movs	r2, #0
   11406:	701a      	strb	r2, [r3, #0]
   11408:	f242 0318 	movw	r3, #8216	; 0x2018
   1140c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11410:	f242 0218 	movw	r2, #8216	; 0x2018
   11414:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11418:	7812      	ldrb	r2, [r2, #0]
   1141a:	b2d2      	uxtb	r2, r2
   1141c:	f042 0201 	orr.w	r2, r2, #1
   11420:	b2d2      	uxtb	r2, r2
   11422:	701a      	strb	r2, [r3, #0]

  /* Set SS1 output */
  sbi( SPI_SS1_DDR, SPI_SS1_PIN);
   11424:	f242 0302 	movw	r3, #8194	; 0x2002
   11428:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1142c:	f242 0202 	movw	r2, #8194	; 0x2002
   11430:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11434:	7812      	ldrb	r2, [r2, #0]
   11436:	b2d2      	uxtb	r2, r2
   11438:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1143c:	b2d2      	uxtb	r2, r2
   1143e:	701a      	strb	r2, [r3, #0]
  /* SS1 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE1();
   11440:	f24c 0334 	movw	r3, #49204	; 0xc034
   11444:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11448:	2200      	movs	r2, #0
   1144a:	701a      	strb	r2, [r3, #0]
   1144c:	f242 0303 	movw	r3, #8195	; 0x2003
   11450:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11454:	f242 0203 	movw	r2, #8195	; 0x2003
   11458:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1145c:	7812      	ldrb	r2, [r2, #0]
   1145e:	b2d2      	uxtb	r2, r2
   11460:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11464:	b2d2      	uxtb	r2, r2
   11466:	701a      	strb	r2, [r3, #0]
  
  spi_cur_slave = SPI_NONE;
   11468:	f24c 0334 	movw	r3, #49204	; 0xc034
   1146c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11470:	2200      	movs	r2, #0
   11472:	701a      	strb	r2, [r3, #0]
}
   11474:	46bd      	mov	sp, r7
   11476:	f85d 7b04 	ldr.w	r7, [sp], #4
   1147a:	4770      	bx	lr

0001147c <__vector_17>:


SIGNAL(SIG_SPI) {
   1147c:	b580      	push	{r7, lr}
   1147e:	af00      	add	r7, sp, #0
  if (spi_cur_slave == SPI_SLAVE0)
   11480:	f24c 0334 	movw	r3, #49204	; 0xc034
   11484:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11488:	781b      	ldrb	r3, [r3, #0]
   1148a:	b2db      	uxtb	r3, r3
   1148c:	2b01      	cmp	r3, #1
   1148e:	d102      	bne.n	11496 <__vector_17+0x1a>
    link_fbw_on_spi_it();
   11490:	f7ff fe88 	bl	111a4 <link_fbw_on_spi_it>
   11494:	e00b      	b.n	114ae <__vector_17+0x32>
  else
    fatal_error_nb++;
   11496:	f64b 63d8 	movw	r3, #48856	; 0xbed8
   1149a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1149e:	781b      	ldrb	r3, [r3, #0]
   114a0:	3301      	adds	r3, #1
   114a2:	b2da      	uxtb	r2, r3
   114a4:	f64b 63d8 	movw	r3, #48856	; 0xbed8
   114a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114ac:	701a      	strb	r2, [r3, #0]
}
   114ae:	bd80      	pop	{r7, pc}

000114b0 <adc_buf_channel>:

uint16_t		adc_samples[ NB_ADC ];

static struct adc_buf* buffers[NB_ADC];

void adc_buf_channel(uint8_t adc_channel, struct adc_buf* s) {
   114b0:	b480      	push	{r7}
   114b2:	b083      	sub	sp, #12
   114b4:	af00      	add	r7, sp, #0
   114b6:	4603      	mov	r3, r0
   114b8:	6039      	str	r1, [r7, #0]
   114ba:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   114bc:	79fa      	ldrb	r2, [r7, #7]
   114be:	f24c 0348 	movw	r3, #49224	; 0xc048
   114c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114c6:	6839      	ldr	r1, [r7, #0]
   114c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   114cc:	370c      	adds	r7, #12
   114ce:	46bd      	mov	sp, r7
   114d0:	f85d 7b04 	ldr.w	r7, [sp], #4
   114d4:	4770      	bx	lr
   114d6:	bf00      	nop

000114d8 <adc_init>:

void 
adc_init( void )
{
   114d8:	b480      	push	{r7}
   114da:	b083      	sub	sp, #12
   114dc:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   114de:	f242 0362 	movw	r3, #8290	; 0x2062
   114e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114e6:	2200      	movs	r2, #0
   114e8:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   114ea:	f242 0361 	movw	r3, #8289	; 0x2061
   114ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114f2:	2200      	movs	r2, #0
   114f4:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref, which is tied to Vcc */
  ADMUX		= ANALOG_VREF;
   114f6:	f242 0307 	movw	r3, #8199	; 0x2007
   114fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114fe:	2240      	movs	r2, #64	; 0x40
   11500:	701a      	strb	r2, [r3, #0]

  /* Turn off the analog comparator */
  sbi( ACSR, ACD );
   11502:	f242 0308 	movw	r3, #8200	; 0x2008
   11506:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1150a:	f242 0208 	movw	r2, #8200	; 0x2008
   1150e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11512:	7812      	ldrb	r2, [r2, #0]
   11514:	b2d2      	uxtb	r2, r2
   11516:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1151a:	b2d2      	uxtb	r2, r2
   1151c:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSR		= 0
   1151e:	f242 0306 	movw	r3, #8198	; 0x2006
   11522:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11526:	22cf      	movs	r2, #207	; 0xcf
   11528:	701a      	strb	r2, [r3, #0]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   1152a:	2300      	movs	r3, #0
   1152c:	71fb      	strb	r3, [r7, #7]
   1152e:	e00a      	b.n	11546 <adc_init+0x6e>
    buffers[i] = (struct adc_buf*)0;
   11530:	79fa      	ldrb	r2, [r7, #7]
   11532:	f24c 0348 	movw	r3, #49224	; 0xc048
   11536:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1153a:	2100      	movs	r1, #0
   1153c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   11540:	79fb      	ldrb	r3, [r7, #7]
   11542:	3301      	adds	r3, #1
   11544:	71fb      	strb	r3, [r7, #7]
   11546:	79fb      	ldrb	r3, [r7, #7]
   11548:	2b07      	cmp	r3, #7
   1154a:	d9f1      	bls.n	11530 <adc_init+0x58>
    buffers[i] = (struct adc_buf*)0;
}
   1154c:	370c      	adds	r7, #12
   1154e:	46bd      	mov	sp, r7
   11550:	f85d 7b04 	ldr.w	r7, [sp], #4
   11554:	4770      	bx	lr
   11556:	bf00      	nop

00011558 <__vector_21>:
 *  8.913kHz on mega128@16MHz 1kHz/channel ??
*/


SIGNAL( SIG_ADC )
{
   11558:	b480      	push	{r7}
   1155a:	b085      	sub	sp, #20
   1155c:	af00      	add	r7, sp, #0
  uint8_t adc_input	= ADMUX & 0x7;
   1155e:	f242 0307 	movw	r3, #8199	; 0x2007
   11562:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11566:	781b      	ldrb	r3, [r3, #0]
   11568:	b2db      	uxtb	r3, r3
   1156a:	f003 0307 	and.w	r3, r3, #7
   1156e:	73fb      	strb	r3, [r7, #15]
  struct adc_buf* buf = buffers[adc_input];
   11570:	7bfa      	ldrb	r2, [r7, #15]
   11572:	f24c 0348 	movw	r3, #49224	; 0xc048
   11576:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1157a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1157e:	60bb      	str	r3, [r7, #8]
  uint16_t adc_value = ADCW;
   11580:	f242 0304 	movw	r3, #8196	; 0x2004
   11584:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11588:	881b      	ldrh	r3, [r3, #0]
   1158a:	80fb      	strh	r3, [r7, #6]
  /* Store result */
  adc_samples[ adc_input ] = adc_value;
   1158c:	7bfa      	ldrb	r2, [r7, #15]
   1158e:	f24c 0338 	movw	r3, #49208	; 0xc038
   11592:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11596:	88f9      	ldrh	r1, [r7, #6]
   11598:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  if (buf) {
   1159c:	68bb      	ldr	r3, [r7, #8]
   1159e:	2b00      	cmp	r3, #0
   115a0:	d025      	beq.n	115ee <__vector_21+0x96>
    uint8_t new_head = buf->head + 1;
   115a2:	68bb      	ldr	r3, [r7, #8]
   115a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   115a8:	3301      	adds	r3, #1
   115aa:	73bb      	strb	r3, [r7, #14]
    if (new_head >= AV_NB_SAMPLE) new_head = 0;
   115ac:	7bbb      	ldrb	r3, [r7, #14]
   115ae:	2b1f      	cmp	r3, #31
   115b0:	d901      	bls.n	115b6 <__vector_21+0x5e>
   115b2:	2300      	movs	r3, #0
   115b4:	73bb      	strb	r3, [r7, #14]
    buf->sum -= buf->values[new_head];
   115b6:	68bb      	ldr	r3, [r7, #8]
   115b8:	881a      	ldrh	r2, [r3, #0]
   115ba:	7bbb      	ldrb	r3, [r7, #14]
   115bc:	68b9      	ldr	r1, [r7, #8]
   115be:	005b      	lsls	r3, r3, #1
   115c0:	440b      	add	r3, r1
   115c2:	885b      	ldrh	r3, [r3, #2]
   115c4:	1ad3      	subs	r3, r2, r3
   115c6:	b29a      	uxth	r2, r3
   115c8:	68bb      	ldr	r3, [r7, #8]
   115ca:	801a      	strh	r2, [r3, #0]
    buf->values[new_head] = adc_value;
   115cc:	7bbb      	ldrb	r3, [r7, #14]
   115ce:	68ba      	ldr	r2, [r7, #8]
   115d0:	005b      	lsls	r3, r3, #1
   115d2:	4413      	add	r3, r2
   115d4:	88fa      	ldrh	r2, [r7, #6]
   115d6:	805a      	strh	r2, [r3, #2]
    buf->sum += adc_value;
   115d8:	68bb      	ldr	r3, [r7, #8]
   115da:	881a      	ldrh	r2, [r3, #0]
   115dc:	88fb      	ldrh	r3, [r7, #6]
   115de:	4413      	add	r3, r2
   115e0:	b29a      	uxth	r2, r3
   115e2:	68bb      	ldr	r3, [r7, #8]
   115e4:	801a      	strh	r2, [r3, #0]
    buf->head = new_head;   
   115e6:	68bb      	ldr	r3, [r7, #8]
   115e8:	7bba      	ldrb	r2, [r7, #14]
   115ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Find the next input */
  adc_input++;
   115ee:	7bfb      	ldrb	r3, [r7, #15]
   115f0:	3301      	adds	r3, #1
   115f2:	73fb      	strb	r3, [r7, #15]
  if( adc_input >= 8 )
   115f4:	7bfb      	ldrb	r3, [r7, #15]
   115f6:	2b07      	cmp	r3, #7
   115f8:	d901      	bls.n	115fe <__vector_21+0xa6>
    adc_input = 0;
   115fa:	2300      	movs	r3, #0
   115fc:	73fb      	strb	r3, [r7, #15]
  /* Select it */
  ADMUX = adc_input | ANALOG_VREF;
   115fe:	f242 0307 	movw	r3, #8199	; 0x2007
   11602:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11606:	7bfa      	ldrb	r2, [r7, #15]
   11608:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1160c:	b2d2      	uxtb	r2, r2
   1160e:	701a      	strb	r2, [r3, #0]
  /* Restart the conversion */
  sbi( ADCSR, ADSC );
   11610:	f242 0306 	movw	r3, #8198	; 0x2006
   11614:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11618:	f242 0206 	movw	r2, #8198	; 0x2006
   1161c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11620:	7812      	ldrb	r2, [r2, #0]
   11622:	b2d2      	uxtb	r2, r2
   11624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11628:	b2d2      	uxtb	r2, r2
   1162a:	701a      	strb	r2, [r3, #0]
  
}
   1162c:	3714      	adds	r7, #20
   1162e:	46bd      	mov	sp, r7
   11630:	f85d 7b04 	ldr.w	r7, [sp], #4
   11634:	4770      	bx	lr
   11636:	bf00      	nop

00011638 <gps_init>:
static uint8_t  ubx_status;
static uint16_t ubx_len;
static uint8_t  ubx_msg_idx;
static uint8_t ck_a, ck_b, ubx_id, ubx_class;

void gps_init( void ) {
   11638:	b580      	push	{r7, lr}
   1163a:	af00      	add	r7, sp, #0
#ifdef SIMUL
  uart0_init();
  simul_ir_roll = ir_roll_neutral;
  simul_ir_pitch = ir_pitch_neutral;
#else
  uart1_init();
   1163c:	f003 fca8 	bl	14f90 <uart1_init>
#endif
  ubx_status = UNINIT;
   11640:	f24c 138f 	movw	r3, #49551	; 0xc18f
   11644:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11648:	2200      	movs	r2, #0
   1164a:	701a      	strb	r2, [r3, #0]
}
   1164c:	bd80      	pop	{r7, pc}
   1164e:	bf00      	nop

00011650 <parse_gps_msg>:

void parse_gps_msg( void ) {
   11650:	b580      	push	{r7, lr}
   11652:	af00      	add	r7, sp, #0
    ubx_class = 1;
    ubx_id = (ubx_id + 1)%0x40;
    */
    //end

  if (ubx_class == UBX_NAV_ID) {
   11654:	f24c 1396 	movw	r3, #49558	; 0xc196
   11658:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1165c:	781b      	ldrb	r3, [r3, #0]
   1165e:	2b01      	cmp	r3, #1
   11660:	f040 80f9 	bne.w	11856 <parse_gps_msg+0x206>
    if (ubx_id == UBX_NAV_POSUTM_ID) {
   11664:	f24c 1395 	movw	r3, #49557	; 0xc195
   11668:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1166c:	781b      	ldrb	r3, [r3, #0]
   1166e:	2b08      	cmp	r3, #8
   11670:	d128      	bne.n	116c4 <parse_gps_msg+0x74>
      gps_utm_east = UBX_NAV_POSUTM_EAST(ubx_msg_buf);
   11672:	f24c 0390 	movw	r3, #49296	; 0xc090
   11676:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1167a:	685a      	ldr	r2, [r3, #4]
   1167c:	f24c 037c 	movw	r3, #49276	; 0xc07c
   11680:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11684:	601a      	str	r2, [r3, #0]
      gps_utm_north = UBX_NAV_POSUTM_NORTH(ubx_msg_buf);
   11686:	f24c 0390 	movw	r3, #49296	; 0xc090
   1168a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1168e:	689a      	ldr	r2, [r3, #8]
   11690:	f24c 0380 	movw	r3, #49280	; 0xc080
   11694:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11698:	601a      	str	r2, [r3, #0]
      gps_falt = (float)UBX_NAV_POSUTM_ALT(ubx_msg_buf) / 100.;
   1169a:	4b73      	ldr	r3, [pc, #460]	; (11868 <parse_gps_msg+0x218>)
   1169c:	681b      	ldr	r3, [r3, #0]
   1169e:	4618      	mov	r0, r3
   116a0:	f006 fde0 	bl	18264 <__aeabi_i2f>
   116a4:	4603      	mov	r3, r0
   116a6:	4618      	mov	r0, r3
   116a8:	f04f 0100 	mov.w	r1, #0
   116ac:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   116b0:	f006 fee0 	bl	18474 <__aeabi_fdiv>
   116b4:	4603      	mov	r3, r0
   116b6:	461a      	mov	r2, r3
   116b8:	f24c 036c 	movw	r3, #49260	; 0xc06c
   116bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116c0:	601a      	str	r2, [r3, #0]
   116c2:	e0c8      	b.n	11856 <parse_gps_msg+0x206>
        gps_utm_east = gps_utm_east + 0.5;
        gps_utm_north = gps_utm_north + 0.4;
        gps_falt = gps_falt + 0.6;
        */
        // end
    } else if (ubx_id == UBX_NAV_STATUS_ID) {
   116c4:	f24c 1395 	movw	r3, #49557	; 0xc195
   116c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116cc:	781b      	ldrb	r3, [r3, #0]
   116ce:	2b03      	cmp	r3, #3
   116d0:	d10a      	bne.n	116e8 <parse_gps_msg+0x98>
      gps_mode = UBX_NAV_STATUS_GPSfix(ubx_msg_buf);
   116d2:	f24c 0390 	movw	r3, #49296	; 0xc090
   116d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116da:	791a      	ldrb	r2, [r3, #4]
   116dc:	f24c 038c 	movw	r3, #49292	; 0xc08c
   116e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116e4:	701a      	strb	r2, [r3, #0]
   116e6:	e0b6      	b.n	11856 <parse_gps_msg+0x206>
    } else if (ubx_id == UBX_NAV_VELNED_ID) {
   116e8:	f24c 1395 	movw	r3, #49557	; 0xc195
   116ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116f0:	781b      	ldrb	r3, [r3, #0]
   116f2:	2b12      	cmp	r3, #18
   116f4:	f040 80af 	bne.w	11856 <parse_gps_msg+0x206>
      gps_fspeed = ((float)UBX_NAV_VELNED_GSpeed(ubx_msg_buf)) / 1e2; 
   116f8:	4b5c      	ldr	r3, [pc, #368]	; (1186c <parse_gps_msg+0x21c>)
   116fa:	681b      	ldr	r3, [r3, #0]
   116fc:	4618      	mov	r0, r3
   116fe:	f006 fdad 	bl	1825c <__aeabi_ui2f>
   11702:	4603      	mov	r3, r0
   11704:	4618      	mov	r0, r3
   11706:	f04f 0100 	mov.w	r1, #0
   1170a:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   1170e:	f006 feb1 	bl	18474 <__aeabi_fdiv>
   11712:	4603      	mov	r3, r0
   11714:	461a      	mov	r2, r3
   11716:	f24c 0370 	movw	r3, #49264	; 0xc070
   1171a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1171e:	601a      	str	r2, [r3, #0]
      gps_fclimb = ((float)UBX_NAV_VELNED_VEL_D(ubx_msg_buf)) / -1e2;
   11720:	4b51      	ldr	r3, [pc, #324]	; (11868 <parse_gps_msg+0x218>)
   11722:	681b      	ldr	r3, [r3, #0]
   11724:	4618      	mov	r0, r3
   11726:	f006 fd9d 	bl	18264 <__aeabi_i2f>
   1172a:	4603      	mov	r3, r0
   1172c:	4618      	mov	r0, r3
   1172e:	f04f 0100 	mov.w	r1, #0
   11732:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   11736:	f006 fe9d 	bl	18474 <__aeabi_fdiv>
   1173a:	4603      	mov	r3, r0
   1173c:	461a      	mov	r2, r3
   1173e:	f24c 0374 	movw	r3, #49268	; 0xc074
   11742:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11746:	601a      	str	r2, [r3, #0]
      gps_fcourse = RadianOfDeg(((float)UBX_NAV_VELNED_Heading(ubx_msg_buf)) / 1e5);
   11748:	4b49      	ldr	r3, [pc, #292]	; (11870 <parse_gps_msg+0x220>)
   1174a:	681b      	ldr	r3, [r3, #0]
   1174c:	4618      	mov	r0, r3
   1174e:	f006 fd89 	bl	18264 <__aeabi_i2f>
   11752:	4603      	mov	r3, r0
   11754:	4618      	mov	r0, r3
   11756:	f006 f945 	bl	179e4 <__aeabi_f2d>
   1175a:	4602      	mov	r2, r0
   1175c:	460b      	mov	r3, r1
   1175e:	4610      	mov	r0, r2
   11760:	4619      	mov	r1, r3
   11762:	a33d      	add	r3, pc, #244	; (adr r3, 11858 <parse_gps_msg+0x208>)
   11764:	e9d3 2300 	ldrd	r2, r3, [r3]
   11768:	f006 faba 	bl	17ce0 <__aeabi_ddiv>
   1176c:	4602      	mov	r2, r0
   1176e:	460b      	mov	r3, r1
   11770:	4610      	mov	r0, r2
   11772:	4619      	mov	r1, r3
   11774:	f04f 0200 	mov.w	r2, #0
   11778:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1177c:	f2c4 0366 	movt	r3, #16486	; 0x4066
   11780:	f006 faae 	bl	17ce0 <__aeabi_ddiv>
   11784:	4602      	mov	r2, r0
   11786:	460b      	mov	r3, r1
   11788:	4610      	mov	r0, r2
   1178a:	4619      	mov	r1, r3
   1178c:	a334      	add	r3, pc, #208	; (adr r3, 11860 <parse_gps_msg+0x210>)
   1178e:	e9d3 2300 	ldrd	r2, r3, [r3]
   11792:	f006 f97b 	bl	17a8c <__aeabi_dmul>
   11796:	4602      	mov	r2, r0
   11798:	460b      	mov	r3, r1
   1179a:	4610      	mov	r0, r2
   1179c:	4619      	mov	r1, r3
   1179e:	f006 fc57 	bl	18050 <__aeabi_d2f>
   117a2:	4602      	mov	r2, r0
   117a4:	f24c 0378 	movw	r3, #49272	; 0xc078
   117a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117ac:	601a      	str	r2, [r3, #0]
      gps_ftow = ((float)UBX_NAV_VELNED_ITOW(ubx_msg_buf)) / 1e3;
   117ae:	f24c 0390 	movw	r3, #49296	; 0xc090
   117b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117b6:	681b      	ldr	r3, [r3, #0]
   117b8:	4618      	mov	r0, r3
   117ba:	f006 fd4f 	bl	1825c <__aeabi_ui2f>
   117be:	4603      	mov	r3, r0
   117c0:	4618      	mov	r0, r3
   117c2:	f04f 0100 	mov.w	r1, #0
   117c6:	f2c4 417a 	movt	r1, #17530	; 0x447a
   117ca:	f006 fe53 	bl	18474 <__aeabi_fdiv>
   117ce:	4603      	mov	r3, r0
   117d0:	461a      	mov	r2, r3
   117d2:	f24c 0368 	movw	r3, #49256	; 0xc068
   117d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117da:	601a      	str	r2, [r3, #0]
        gps_fcourse = gps_fcourse + 0.2;
        gps_ftow = gps_ftow + 0.1;
        */
        // end
      
      gps_east = gps_utm_east / 100 - NAV_UTM_EAST0;
   117dc:	f24c 037c 	movw	r3, #49276	; 0xc07c
   117e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117e4:	681a      	ldr	r2, [r3, #0]
   117e6:	f248 531f 	movw	r3, #34079	; 0x851f
   117ea:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   117ee:	fb83 1302 	smull	r1, r3, r3, r2
   117f2:	1159      	asrs	r1, r3, #5
   117f4:	17d3      	asrs	r3, r2, #31
   117f6:	1acb      	subs	r3, r1, r3
   117f8:	f5a3 2313 	sub.w	r3, r3, #602112	; 0x93000
   117fc:	f6a3 535a 	subw	r3, r3, #3418	; 0xd5a
   11800:	4618      	mov	r0, r3
   11802:	f006 fd2f 	bl	18264 <__aeabi_i2f>
   11806:	4602      	mov	r2, r0
   11808:	f24c 0384 	movw	r3, #49284	; 0xc084
   1180c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11810:	601a      	str	r2, [r3, #0]
      gps_north = gps_utm_north / 100 - NAV_UTM_NORTH0;
   11812:	f24c 0380 	movw	r3, #49280	; 0xc080
   11816:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1181a:	681a      	ldr	r2, [r3, #0]
   1181c:	f248 531f 	movw	r3, #34079	; 0x851f
   11820:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   11824:	fb83 1302 	smull	r1, r3, r3, r2
   11828:	1159      	asrs	r1, r3, #5
   1182a:	17d3      	asrs	r3, r2, #31
   1182c:	1aca      	subs	r2, r1, r3
   1182e:	f648 231a 	movw	r3, #35354	; 0x8a1a
   11832:	f6cf 73a7 	movt	r3, #65447	; 0xffa7
   11836:	4413      	add	r3, r2
   11838:	4618      	mov	r0, r3
   1183a:	f006 fd13 	bl	18264 <__aeabi_i2f>
   1183e:	4602      	mov	r2, r0
   11840:	f24c 0388 	movw	r3, #49288	; 0xc088
   11844:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11848:	601a      	str	r2, [r3, #0]
      
      
      gps_pos_available = TRUE; /* The 3 UBX messages are sent in one rafale */
   1184a:	f24c 038e 	movw	r3, #49294	; 0xc08e
   1184e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11852:	2201      	movs	r2, #1
   11854:	701a      	strb	r2, [r3, #0]
      simul_ir_roll = UBX_USR_IRSIM_ROLL(ubx_msg_buf);
      simul_ir_pitch = UBX_USR_IRSIM_PITCH(ubx_msg_buf);
    }
  }
#endif
}
   11856:	bd80      	pop	{r7, pc}
   11858:	00000000 	.word	0x00000000
   1185c:	40f86a00 	.word	0x40f86a00
   11860:	5a7ed197 	.word	0x5a7ed197
   11864:	400921fb 	.word	0x400921fb
   11868:	2004c09c 	.word	0x2004c09c
   1186c:	2004c0a4 	.word	0x2004c0a4
   11870:	2004c0a8 	.word	0x2004c0a8

00011874 <parse_ubx>:


uint8_t gps_nb_ovrn;


static void parse_ubx( uint8_t c ) {
   11874:	b480      	push	{r7}
   11876:	b083      	sub	sp, #12
   11878:	af00      	add	r7, sp, #0
   1187a:	4603      	mov	r3, r0
   1187c:	71fb      	strb	r3, [r7, #7]
   if (ubx_status < GOT_PAYLOAD) {
   1187e:	f24c 138f 	movw	r3, #49551	; 0xc18f
   11882:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11886:	781b      	ldrb	r3, [r3, #0]
   11888:	2b06      	cmp	r3, #6
   1188a:	d81d      	bhi.n	118c8 <parse_ubx+0x54>
    ck_a += c;
   1188c:	f24c 1393 	movw	r3, #49555	; 0xc193
   11890:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11894:	781a      	ldrb	r2, [r3, #0]
   11896:	79fb      	ldrb	r3, [r7, #7]
   11898:	4413      	add	r3, r2
   1189a:	b2da      	uxtb	r2, r3
   1189c:	f24c 1393 	movw	r3, #49555	; 0xc193
   118a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118a4:	701a      	strb	r2, [r3, #0]
    ck_b += ck_a;
   118a6:	f24c 1394 	movw	r3, #49556	; 0xc194
   118aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118ae:	781a      	ldrb	r2, [r3, #0]
   118b0:	f24c 1393 	movw	r3, #49555	; 0xc193
   118b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118b8:	781b      	ldrb	r3, [r3, #0]
   118ba:	4413      	add	r3, r2
   118bc:	b2da      	uxtb	r2, r3
   118be:	f24c 1394 	movw	r3, #49556	; 0xc194
   118c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118c6:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
    break;
  }
#else */
  if (ubx_status == UNINIT)
   118c8:	f24c 138f 	movw	r3, #49551	; 0xc18f
   118cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118d0:	781b      	ldrb	r3, [r3, #0]
   118d2:	2b00      	cmp	r3, #0
   118d4:	d110      	bne.n	118f8 <parse_ubx+0x84>
  {
    if (c == UBX_SYNC1)
   118d6:	79fb      	ldrb	r3, [r7, #7]
   118d8:	2bb5      	cmp	r3, #181	; 0xb5
   118da:	f040 8135 	bne.w	11b48 <parse_ubx+0x2d4>
      ubx_status++;
   118de:	f24c 138f 	movw	r3, #49551	; 0xc18f
   118e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118e6:	781b      	ldrb	r3, [r3, #0]
   118e8:	3301      	adds	r3, #1
   118ea:	b2da      	uxtb	r2, r3
   118ec:	f24c 138f 	movw	r3, #49551	; 0xc18f
   118f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118f4:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   118f6:	e12f      	b.n	11b58 <parse_ubx+0x2e4>
  if (ubx_status == UNINIT)
  {
    if (c == UBX_SYNC1)
      ubx_status++;
  }
  else if (ubx_status == GOT_SYNC1)
   118f8:	f24c 138f 	movw	r3, #49551	; 0xc18f
   118fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11900:	781b      	ldrb	r3, [r3, #0]
   11902:	2b01      	cmp	r3, #1
   11904:	d11c      	bne.n	11940 <parse_ubx+0xcc>
  {
    if (c != UBX_SYNC2)
   11906:	79fb      	ldrb	r3, [r7, #7]
   11908:	2b62      	cmp	r3, #98	; 0x62
   1190a:	d000      	beq.n	1190e <parse_ubx+0x9a>
      goto error;
   1190c:	e11d      	b.n	11b4a <parse_ubx+0x2d6>
    ck_a = 0;
   1190e:	f24c 1393 	movw	r3, #49555	; 0xc193
   11912:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11916:	2200      	movs	r2, #0
   11918:	701a      	strb	r2, [r3, #0]
    ck_b = 0;
   1191a:	f24c 1394 	movw	r3, #49556	; 0xc194
   1191e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11922:	2200      	movs	r2, #0
   11924:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11926:	f24c 138f 	movw	r3, #49551	; 0xc18f
   1192a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1192e:	781b      	ldrb	r3, [r3, #0]
   11930:	3301      	adds	r3, #1
   11932:	b2da      	uxtb	r2, r3
   11934:	f24c 138f 	movw	r3, #49551	; 0xc18f
   11938:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1193c:	701a      	strb	r2, [r3, #0]
   1193e:	e103      	b.n	11b48 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_SYNC2)
   11940:	f24c 138f 	movw	r3, #49551	; 0xc18f
   11944:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11948:	781b      	ldrb	r3, [r3, #0]
   1194a:	2b02      	cmp	r3, #2
   1194c:	d127      	bne.n	1199e <parse_ubx+0x12a>
  {
    if (gps_msg_received) {
   1194e:	f24c 038d 	movw	r3, #49293	; 0xc08d
   11952:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11956:	781b      	ldrb	r3, [r3, #0]
   11958:	b2db      	uxtb	r3, r3
   1195a:	2b00      	cmp	r3, #0
   1195c:	d00c      	beq.n	11978 <parse_ubx+0x104>
      /* Previous message has not yet been parsed: discard this one */
      gps_nb_ovrn++;
   1195e:	f24c 1397 	movw	r3, #49559	; 0xc197
   11962:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11966:	781b      	ldrb	r3, [r3, #0]
   11968:	3301      	adds	r3, #1
   1196a:	b2da      	uxtb	r2, r3
   1196c:	f24c 1397 	movw	r3, #49559	; 0xc197
   11970:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11974:	701a      	strb	r2, [r3, #0]
      goto error;
   11976:	e0e8      	b.n	11b4a <parse_ubx+0x2d6>
    }
    ubx_class = c;
   11978:	f24c 1396 	movw	r3, #49558	; 0xc196
   1197c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11980:	79fa      	ldrb	r2, [r7, #7]
   11982:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11984:	f24c 138f 	movw	r3, #49551	; 0xc18f
   11988:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1198c:	781b      	ldrb	r3, [r3, #0]
   1198e:	3301      	adds	r3, #1
   11990:	b2da      	uxtb	r2, r3
   11992:	f24c 138f 	movw	r3, #49551	; 0xc18f
   11996:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1199a:	701a      	strb	r2, [r3, #0]
   1199c:	e0d4      	b.n	11b48 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CLASS)
   1199e:	f24c 138f 	movw	r3, #49551	; 0xc18f
   119a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119a6:	781b      	ldrb	r3, [r3, #0]
   119a8:	2b03      	cmp	r3, #3
   119aa:	d112      	bne.n	119d2 <parse_ubx+0x15e>
  {
    ubx_id = c;
   119ac:	f24c 1395 	movw	r3, #49557	; 0xc195
   119b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119b4:	79fa      	ldrb	r2, [r7, #7]
   119b6:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   119b8:	f24c 138f 	movw	r3, #49551	; 0xc18f
   119bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119c0:	781b      	ldrb	r3, [r3, #0]
   119c2:	3301      	adds	r3, #1
   119c4:	b2da      	uxtb	r2, r3
   119c6:	f24c 138f 	movw	r3, #49551	; 0xc18f
   119ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119ce:	701a      	strb	r2, [r3, #0]
   119d0:	e0ba      	b.n	11b48 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_ID)
   119d2:	f24c 138f 	movw	r3, #49551	; 0xc18f
   119d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119da:	781b      	ldrb	r3, [r3, #0]
   119dc:	2b04      	cmp	r3, #4
   119de:	d113      	bne.n	11a08 <parse_ubx+0x194>
  {
    ubx_len = c;
   119e0:	79fb      	ldrb	r3, [r7, #7]
   119e2:	b29a      	uxth	r2, r3
   119e4:	f24c 1390 	movw	r3, #49552	; 0xc190
   119e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119ec:	801a      	strh	r2, [r3, #0]
    ubx_status++;
   119ee:	f24c 138f 	movw	r3, #49551	; 0xc18f
   119f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119f6:	781b      	ldrb	r3, [r3, #0]
   119f8:	3301      	adds	r3, #1
   119fa:	b2da      	uxtb	r2, r3
   119fc:	f24c 138f 	movw	r3, #49551	; 0xc18f
   11a00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a04:	701a      	strb	r2, [r3, #0]
   11a06:	e09f      	b.n	11b48 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN1)
   11a08:	f24c 138f 	movw	r3, #49551	; 0xc18f
   11a0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a10:	781b      	ldrb	r3, [r3, #0]
   11a12:	2b05      	cmp	r3, #5
   11a14:	d12b      	bne.n	11a6e <parse_ubx+0x1fa>
  {
    ubx_len |= (c<<8);
   11a16:	79fb      	ldrb	r3, [r7, #7]
   11a18:	021b      	lsls	r3, r3, #8
   11a1a:	b29a      	uxth	r2, r3
   11a1c:	f24c 1390 	movw	r3, #49552	; 0xc190
   11a20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a24:	881b      	ldrh	r3, [r3, #0]
   11a26:	b29b      	uxth	r3, r3
   11a28:	4313      	orrs	r3, r2
   11a2a:	b29b      	uxth	r3, r3
   11a2c:	b29a      	uxth	r2, r3
   11a2e:	f24c 1390 	movw	r3, #49552	; 0xc190
   11a32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a36:	801a      	strh	r2, [r3, #0]
    if (ubx_len > UBX_MAX_PAYLOAD)
   11a38:	f24c 1390 	movw	r3, #49552	; 0xc190
   11a3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a40:	881b      	ldrh	r3, [r3, #0]
   11a42:	2bff      	cmp	r3, #255	; 0xff
   11a44:	d900      	bls.n	11a48 <parse_ubx+0x1d4>
      goto error;
   11a46:	e080      	b.n	11b4a <parse_ubx+0x2d6>
    ubx_msg_idx = 0;
   11a48:	f24c 1392 	movw	r3, #49554	; 0xc192
   11a4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a50:	2200      	movs	r2, #0
   11a52:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11a54:	f24c 138f 	movw	r3, #49551	; 0xc18f
   11a58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a5c:	781b      	ldrb	r3, [r3, #0]
   11a5e:	3301      	adds	r3, #1
   11a60:	b2da      	uxtb	r2, r3
   11a62:	f24c 138f 	movw	r3, #49551	; 0xc18f
   11a66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a6a:	701a      	strb	r2, [r3, #0]
   11a6c:	e06c      	b.n	11b48 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN2)
   11a6e:	f24c 138f 	movw	r3, #49551	; 0xc18f
   11a72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a76:	781b      	ldrb	r3, [r3, #0]
   11a78:	2b06      	cmp	r3, #6
   11a7a:	d131      	bne.n	11ae0 <parse_ubx+0x26c>
  {
    ubx_msg_buf[ubx_msg_idx] = c;
   11a7c:	f24c 1392 	movw	r3, #49554	; 0xc192
   11a80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a84:	781b      	ldrb	r3, [r3, #0]
   11a86:	461a      	mov	r2, r3
   11a88:	f24c 0390 	movw	r3, #49296	; 0xc090
   11a8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a90:	79f9      	ldrb	r1, [r7, #7]
   11a92:	5499      	strb	r1, [r3, r2]
    ubx_msg_idx++;
   11a94:	f24c 1392 	movw	r3, #49554	; 0xc192
   11a98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a9c:	781b      	ldrb	r3, [r3, #0]
   11a9e:	3301      	adds	r3, #1
   11aa0:	b2da      	uxtb	r2, r3
   11aa2:	f24c 1392 	movw	r3, #49554	; 0xc192
   11aa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11aaa:	701a      	strb	r2, [r3, #0]
    if (ubx_msg_idx >= ubx_len) {
   11aac:	f24c 1392 	movw	r3, #49554	; 0xc192
   11ab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ab4:	781b      	ldrb	r3, [r3, #0]
   11ab6:	461a      	mov	r2, r3
   11ab8:	f24c 1390 	movw	r3, #49552	; 0xc190
   11abc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ac0:	881b      	ldrh	r3, [r3, #0]
   11ac2:	429a      	cmp	r2, r3
   11ac4:	d340      	bcc.n	11b48 <parse_ubx+0x2d4>
      ubx_status++;
   11ac6:	f24c 138f 	movw	r3, #49551	; 0xc18f
   11aca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ace:	781b      	ldrb	r3, [r3, #0]
   11ad0:	3301      	adds	r3, #1
   11ad2:	b2da      	uxtb	r2, r3
   11ad4:	f24c 138f 	movw	r3, #49551	; 0xc18f
   11ad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11adc:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   11ade:	e03b      	b.n	11b58 <parse_ubx+0x2e4>
    ubx_msg_idx++;
    if (ubx_msg_idx >= ubx_len) {
      ubx_status++;
    }
  }
  else if (ubx_status == GOT_PAYLOAD)
   11ae0:	f24c 138f 	movw	r3, #49551	; 0xc18f
   11ae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ae8:	781b      	ldrb	r3, [r3, #0]
   11aea:	2b07      	cmp	r3, #7
   11aec:	d115      	bne.n	11b1a <parse_ubx+0x2a6>
  {
    if (c != ck_a)
   11aee:	f24c 1393 	movw	r3, #49555	; 0xc193
   11af2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11af6:	781b      	ldrb	r3, [r3, #0]
   11af8:	79fa      	ldrb	r2, [r7, #7]
   11afa:	429a      	cmp	r2, r3
   11afc:	d000      	beq.n	11b00 <parse_ubx+0x28c>
      goto error;
   11afe:	e024      	b.n	11b4a <parse_ubx+0x2d6>
    ubx_status++;
   11b00:	f24c 138f 	movw	r3, #49551	; 0xc18f
   11b04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b08:	781b      	ldrb	r3, [r3, #0]
   11b0a:	3301      	adds	r3, #1
   11b0c:	b2da      	uxtb	r2, r3
   11b0e:	f24c 138f 	movw	r3, #49551	; 0xc18f
   11b12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b16:	701a      	strb	r2, [r3, #0]
   11b18:	e016      	b.n	11b48 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CHECKSUM1)
   11b1a:	f24c 138f 	movw	r3, #49551	; 0xc18f
   11b1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b22:	781b      	ldrb	r3, [r3, #0]
   11b24:	2b08      	cmp	r3, #8
   11b26:	d10f      	bne.n	11b48 <parse_ubx+0x2d4>
  {
    if (c != ck_b)
   11b28:	f24c 1394 	movw	r3, #49556	; 0xc194
   11b2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b30:	781b      	ldrb	r3, [r3, #0]
   11b32:	79fa      	ldrb	r2, [r7, #7]
   11b34:	429a      	cmp	r2, r3
   11b36:	d000      	beq.n	11b3a <parse_ubx+0x2c6>
      goto error;
   11b38:	e007      	b.n	11b4a <parse_ubx+0x2d6>
    gps_msg_received = TRUE;
   11b3a:	f24c 038d 	movw	r3, #49293	; 0xc08d
   11b3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b42:	2201      	movs	r2, #1
   11b44:	701a      	strb	r2, [r3, #0]
    goto restart;
   11b46:	e000      	b.n	11b4a <parse_ubx+0x2d6>
  }
  else {}
//#endif
  return;
   11b48:	e006      	b.n	11b58 <parse_ubx+0x2e4>
 error:  
 restart:
  ubx_status = UNINIT;
   11b4a:	f24c 138f 	movw	r3, #49551	; 0xc18f
   11b4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b52:	2200      	movs	r2, #0
   11b54:	701a      	strb	r2, [r3, #0]
  return;
   11b56:	bf00      	nop
}
   11b58:	370c      	adds	r7, #12
   11b5a:	46bd      	mov	sp, r7
   11b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
   11b60:	4770      	bx	lr
   11b62:	bf00      	nop

00011b64 <__vector_30>:

#ifdef SIMUL
ReceiveUart0(parse_ubx);
#else
ReceiveUart1(parse_ubx);
   11b64:	b580      	push	{r7, lr}
   11b66:	b082      	sub	sp, #8
   11b68:	af00      	add	r7, sp, #0
   11b6a:	f242 039c 	movw	r3, #8348	; 0x209c
   11b6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b72:	781b      	ldrb	r3, [r3, #0]
   11b74:	71fb      	strb	r3, [r7, #7]
   11b76:	79fb      	ldrb	r3, [r7, #7]
   11b78:	4618      	mov	r0, r3
   11b7a:	f7ff fe7b 	bl	11874 <parse_ubx>
   11b7e:	3708      	adds	r7, #8
   11b80:	46bd      	mov	sp, r7
   11b82:	bd80      	pop	{r7, pc}
   11b84:	f3af 8000 	nop.w

00011b88 <ir_init>:
float ir_rad_of_ir = IR_RAD_OF_IR_CONTRAST / IR_DEFAULT_CONTRAST;

static struct adc_buf buf_ir1;
static struct adc_buf buf_ir2;

void ir_init(void) {
   11b88:	b580      	push	{r7, lr}
   11b8a:	af00      	add	r7, sp, #0
  RadOfIrFromConstrast(IR_DEFAULT_CONTRAST);
   11b8c:	f240 33f8 	movw	r3, #1016	; 0x3f8
   11b90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b94:	f24c 228f 	movw	r2, #49807	; 0xc28f
   11b98:	f6c3 3275 	movt	r2, #15221	; 0x3b75
   11b9c:	601a      	str	r2, [r3, #0]
  adc_buf_channel(ADC_CHANNEL_IR1, &buf_ir1);
   11b9e:	2001      	movs	r0, #1
   11ba0:	f24c 119c 	movw	r1, #49564	; 0xc19c
   11ba4:	f2c2 0104 	movt	r1, #8196	; 0x2004
   11ba8:	f7ff fc82 	bl	114b0 <adc_buf_channel>
  adc_buf_channel(ADC_CHANNEL_IR2, &buf_ir2);
   11bac:	2002      	movs	r0, #2
   11bae:	f24c 11e0 	movw	r1, #49632	; 0xc1e0
   11bb2:	f2c2 0104 	movt	r1, #8196	; 0x2004
   11bb6:	f7ff fc7b 	bl	114b0 <adc_buf_channel>
}
   11bba:	bd80      	pop	{r7, pc}

00011bbc <ir_update>:
int16_t x1 = 1;
int16_t x2 = 2;
*/
// end

void ir_update(void) {
   11bbc:	b480      	push	{r7}
   11bbe:	b083      	sub	sp, #12
   11bc0:	af00      	add	r7, sp, #0
#ifndef SIMUL
  int16_t x1_mean = buf_ir1.sum/AV_NB_SAMPLE;
   11bc2:	f24c 139c 	movw	r3, #49564	; 0xc19c
   11bc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bca:	881b      	ldrh	r3, [r3, #0]
   11bcc:	095b      	lsrs	r3, r3, #5
   11bce:	b29b      	uxth	r3, r3
   11bd0:	80fb      	strh	r3, [r7, #6]
  int16_t x2_mean = buf_ir2.sum/AV_NB_SAMPLE;
   11bd2:	f24c 13e0 	movw	r3, #49632	; 0xc1e0
   11bd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bda:	881b      	ldrh	r3, [r3, #0]
   11bdc:	095b      	lsrs	r3, r3, #5
   11bde:	b29b      	uxth	r3, r3
   11be0:	80bb      	strh	r3, [r7, #4]
    if( x1 < -900 ) x1 = x2 % x1;
    x2_mean = x2 ++;
    if( x2 > 110 ) x2 = x1 % x2;
    */
    // end
  ir_roll = IR_RollOfIrs(x1_mean, x2_mean) - ir_roll_neutral;
   11be2:	88fb      	ldrh	r3, [r7, #6]
   11be4:	425b      	negs	r3, r3
   11be6:	b29a      	uxth	r2, r3
   11be8:	88bb      	ldrh	r3, [r7, #4]
   11bea:	1ad3      	subs	r3, r2, r3
   11bec:	b29a      	uxth	r2, r3
   11bee:	f240 33f2 	movw	r3, #1010	; 0x3f2
   11bf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bf6:	881b      	ldrh	r3, [r3, #0]
   11bf8:	b29b      	uxth	r3, r3
   11bfa:	1ad3      	subs	r3, r2, r3
   11bfc:	b29b      	uxth	r3, r3
   11bfe:	b29a      	uxth	r2, r3
   11c00:	f24c 1398 	movw	r3, #49560	; 0xc198
   11c04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c08:	801a      	strh	r2, [r3, #0]
  ir_pitch = IR_PitchOfIrs(x1_mean, x2_mean) - ir_pitch_neutral;
   11c0a:	88ba      	ldrh	r2, [r7, #4]
   11c0c:	88fb      	ldrh	r3, [r7, #6]
   11c0e:	1ad3      	subs	r3, r2, r3
   11c10:	b29a      	uxth	r2, r3
   11c12:	f240 33f4 	movw	r3, #1012	; 0x3f4
   11c16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c1a:	881b      	ldrh	r3, [r3, #0]
   11c1c:	b29b      	uxth	r3, r3
   11c1e:	1ad3      	subs	r3, r2, r3
   11c20:	b29b      	uxth	r3, r3
   11c22:	b29a      	uxth	r2, r3
   11c24:	f24c 139a 	movw	r3, #49562	; 0xc19a
   11c28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c2c:	801a      	strh	r2, [r3, #0]
#else
  extern volatile int16_t simul_ir_roll, simul_ir_pitch;
  ir_roll = simul_ir_roll -  ir_roll_neutral; 
  ir_pitch = simul_ir_pitch - ir_pitch_neutral;  
#endif
}
   11c2e:	370c      	adds	r7, #12
   11c30:	46bd      	mov	sp, r7
   11c32:	f85d 7b04 	ldr.w	r7, [sp], #4
   11c36:	4770      	bx	lr

00011c38 <ir_gain_calib>:

/* 
   Contrast measurement
*/

void ir_gain_calib(void) {      // Plane nose down
   11c38:	b580      	push	{r7, lr}
   11c3a:	af00      	add	r7, sp, #0
  /* plane nose down -> negativ value */
  ir_contrast = - ir_pitch;
   11c3c:	f24c 139a 	movw	r3, #49562	; 0xc19a
   11c40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c44:	881b      	ldrh	r3, [r3, #0]
   11c46:	b29b      	uxth	r3, r3
   11c48:	425b      	negs	r3, r3
   11c4a:	b29b      	uxth	r3, r3
   11c4c:	b29a      	uxth	r2, r3
   11c4e:	f240 33f0 	movw	r3, #1008	; 0x3f0
   11c52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c56:	801a      	strh	r2, [r3, #0]
  RadOfIrFromConstrast(ir_contrast);
   11c58:	f240 33f0 	movw	r3, #1008	; 0x3f0
   11c5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c60:	881b      	ldrh	r3, [r3, #0]
   11c62:	b21b      	sxth	r3, r3
   11c64:	4618      	mov	r0, r3
   11c66:	f005 feab 	bl	179c0 <__aeabi_i2d>
   11c6a:	4602      	mov	r2, r0
   11c6c:	460b      	mov	r3, r1
   11c6e:	f04f 0000 	mov.w	r0, #0
   11c72:	f04f 0100 	mov.w	r1, #0
   11c76:	f6c3 71e8 	movt	r1, #16360	; 0x3fe8
   11c7a:	f006 f831 	bl	17ce0 <__aeabi_ddiv>
   11c7e:	4602      	mov	r2, r0
   11c80:	460b      	mov	r3, r1
   11c82:	4610      	mov	r0, r2
   11c84:	4619      	mov	r1, r3
   11c86:	f006 f9e3 	bl	18050 <__aeabi_d2f>
   11c8a:	4602      	mov	r2, r0
   11c8c:	f240 33f8 	movw	r3, #1016	; 0x3f8
   11c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c94:	601a      	str	r2, [r3, #0]
}
   11c96:	bd80      	pop	{r7, pc}

00011c98 <roll_pitch_pid_run>:
float pitch_of_vz_pgain = CLIMB_PITCH_OF_VZ_PGAIN;
float pitch_of_vz = 0.;


/** \brief Computes ::desired_aileron and ::desired_elevator from attitude estimation and expected attitude. */
void roll_pitch_pid_run( void ) {
   11c98:	b590      	push	{r4, r7, lr}
   11c9a:	b083      	sub	sp, #12
   11c9c:	af00      	add	r7, sp, #0
  float err =  estimator_phi - desired_roll;
   11c9e:	f24c 43b8 	movw	r3, #50360	; 0xc4b8
   11ca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ca6:	681a      	ldr	r2, [r3, #0]
   11ca8:	f24c 2324 	movw	r3, #49700	; 0xc224
   11cac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cb0:	681b      	ldr	r3, [r3, #0]
   11cb2:	4610      	mov	r0, r2
   11cb4:	4619      	mov	r1, r3
   11cb6:	f006 fa1f 	bl	180f8 <__aeabi_fsub>
   11cba:	4603      	mov	r3, r0
   11cbc:	607b      	str	r3, [r7, #4]
  desired_aileron = TRIM_PPRZ(roll_pgain * err);
   11cbe:	f240 33fc 	movw	r3, #1020	; 0x3fc
   11cc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cc6:	681b      	ldr	r3, [r3, #0]
   11cc8:	4618      	mov	r0, r3
   11cca:	6879      	ldr	r1, [r7, #4]
   11ccc:	f006 fb1e 	bl	1830c <__aeabi_fmul>
   11cd0:	4603      	mov	r3, r0
   11cd2:	4618      	mov	r0, r3
   11cd4:	f04f 0100 	mov.w	r1, #0
   11cd8:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11cdc:	f006 fcb4 	bl	18648 <__aeabi_fcmplt>
   11ce0:	4603      	mov	r3, r0
   11ce2:	2b00      	cmp	r3, #0
   11ce4:	d002      	beq.n	11cec <roll_pitch_pid_run+0x54>
   11ce6:	f64d 2280 	movw	r2, #55936	; 0xda80
   11cea:	e026      	b.n	11d3a <roll_pitch_pid_run+0xa2>
   11cec:	f240 33fc 	movw	r3, #1020	; 0x3fc
   11cf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cf4:	681b      	ldr	r3, [r3, #0]
   11cf6:	4618      	mov	r0, r3
   11cf8:	6879      	ldr	r1, [r7, #4]
   11cfa:	f006 fb07 	bl	1830c <__aeabi_fmul>
   11cfe:	4603      	mov	r3, r0
   11d00:	4618      	mov	r0, r3
   11d02:	f04f 0100 	mov.w	r1, #0
   11d06:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11d0a:	f006 fcbb 	bl	18684 <__aeabi_fcmpgt>
   11d0e:	4603      	mov	r3, r0
   11d10:	2b00      	cmp	r3, #0
   11d12:	d002      	beq.n	11d1a <roll_pitch_pid_run+0x82>
   11d14:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11d18:	e00e      	b.n	11d38 <roll_pitch_pid_run+0xa0>
   11d1a:	f240 33fc 	movw	r3, #1020	; 0x3fc
   11d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d22:	681b      	ldr	r3, [r3, #0]
   11d24:	4618      	mov	r0, r3
   11d26:	6879      	ldr	r1, [r7, #4]
   11d28:	f006 faf0 	bl	1830c <__aeabi_fmul>
   11d2c:	4603      	mov	r3, r0
   11d2e:	4618      	mov	r0, r3
   11d30:	f006 fcb2 	bl	18698 <__aeabi_f2iz>
   11d34:	4603      	mov	r3, r0
   11d36:	b29b      	uxth	r3, r3
   11d38:	b29a      	uxth	r2, r3
   11d3a:	f24c 232e 	movw	r3, #49710	; 0xc22e
   11d3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d42:	801a      	strh	r2, [r3, #0]
  if (pitch_of_roll <0.)
   11d44:	f24c 2334 	movw	r3, #49716	; 0xc234
   11d48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d4c:	681b      	ldr	r3, [r3, #0]
   11d4e:	4618      	mov	r0, r3
   11d50:	f04f 0100 	mov.w	r1, #0
   11d54:	f006 fc78 	bl	18648 <__aeabi_fcmplt>
   11d58:	4603      	mov	r3, r0
   11d5a:	2b00      	cmp	r3, #0
   11d5c:	d006      	beq.n	11d6c <roll_pitch_pid_run+0xd4>
    pitch_of_roll = 0.;
   11d5e:	f24c 2334 	movw	r3, #49716	; 0xc234
   11d62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d66:	f04f 0200 	mov.w	r2, #0
   11d6a:	601a      	str	r2, [r3, #0]
  err = -(estimator_theta - desired_pitch - pitch_of_roll * fabs(estimator_phi));
   11d6c:	f24c 43c0 	movw	r3, #50368	; 0xc4c0
   11d70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d74:	681a      	ldr	r2, [r3, #0]
   11d76:	f24c 2328 	movw	r3, #49704	; 0xc228
   11d7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d7e:	681b      	ldr	r3, [r3, #0]
   11d80:	4610      	mov	r0, r2
   11d82:	4619      	mov	r1, r3
   11d84:	f006 f9b8 	bl	180f8 <__aeabi_fsub>
   11d88:	4603      	mov	r3, r0
   11d8a:	461c      	mov	r4, r3
   11d8c:	f24c 43b8 	movw	r3, #50360	; 0xc4b8
   11d90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d94:	681b      	ldr	r3, [r3, #0]
   11d96:	4618      	mov	r0, r3
   11d98:	f04f 0100 	mov.w	r1, #0
   11d9c:	f006 fc54 	bl	18648 <__aeabi_fcmplt>
   11da0:	4603      	mov	r3, r0
   11da2:	2b00      	cmp	r3, #0
   11da4:	d007      	beq.n	11db6 <roll_pitch_pid_run+0x11e>
   11da6:	f24c 43b8 	movw	r3, #50360	; 0xc4b8
   11daa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11dae:	681b      	ldr	r3, [r3, #0]
   11db0:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11db4:	e004      	b.n	11dc0 <roll_pitch_pid_run+0x128>
   11db6:	f24c 43b8 	movw	r3, #50360	; 0xc4b8
   11dba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11dbe:	681a      	ldr	r2, [r3, #0]
   11dc0:	f24c 2334 	movw	r3, #49716	; 0xc234
   11dc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11dc8:	681b      	ldr	r3, [r3, #0]
   11dca:	4610      	mov	r0, r2
   11dcc:	4619      	mov	r1, r3
   11dce:	f006 fa9d 	bl	1830c <__aeabi_fmul>
   11dd2:	4603      	mov	r3, r0
   11dd4:	4620      	mov	r0, r4
   11dd6:	4619      	mov	r1, r3
   11dd8:	f006 f98e 	bl	180f8 <__aeabi_fsub>
   11ddc:	4603      	mov	r3, r0
   11dde:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   11de2:	607b      	str	r3, [r7, #4]
  desired_elevator = TRIM_PPRZ(pitch_pgain * err);
   11de4:	f240 4300 	movw	r3, #1024	; 0x400
   11de8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11dec:	681b      	ldr	r3, [r3, #0]
   11dee:	4618      	mov	r0, r3
   11df0:	6879      	ldr	r1, [r7, #4]
   11df2:	f006 fa8b 	bl	1830c <__aeabi_fmul>
   11df6:	4603      	mov	r3, r0
   11df8:	4618      	mov	r0, r3
   11dfa:	f04f 0100 	mov.w	r1, #0
   11dfe:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11e02:	f006 fc21 	bl	18648 <__aeabi_fcmplt>
   11e06:	4603      	mov	r3, r0
   11e08:	2b00      	cmp	r3, #0
   11e0a:	d002      	beq.n	11e12 <roll_pitch_pid_run+0x17a>
   11e0c:	f64d 2280 	movw	r2, #55936	; 0xda80
   11e10:	e026      	b.n	11e60 <roll_pitch_pid_run+0x1c8>
   11e12:	f240 4300 	movw	r3, #1024	; 0x400
   11e16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e1a:	681b      	ldr	r3, [r3, #0]
   11e1c:	4618      	mov	r0, r3
   11e1e:	6879      	ldr	r1, [r7, #4]
   11e20:	f006 fa74 	bl	1830c <__aeabi_fmul>
   11e24:	4603      	mov	r3, r0
   11e26:	4618      	mov	r0, r3
   11e28:	f04f 0100 	mov.w	r1, #0
   11e2c:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11e30:	f006 fc28 	bl	18684 <__aeabi_fcmpgt>
   11e34:	4603      	mov	r3, r0
   11e36:	2b00      	cmp	r3, #0
   11e38:	d002      	beq.n	11e40 <roll_pitch_pid_run+0x1a8>
   11e3a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11e3e:	e00e      	b.n	11e5e <roll_pitch_pid_run+0x1c6>
   11e40:	f240 4300 	movw	r3, #1024	; 0x400
   11e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e48:	681b      	ldr	r3, [r3, #0]
   11e4a:	4618      	mov	r0, r3
   11e4c:	6879      	ldr	r1, [r7, #4]
   11e4e:	f006 fa5d 	bl	1830c <__aeabi_fmul>
   11e52:	4603      	mov	r3, r0
   11e54:	4618      	mov	r0, r3
   11e56:	f006 fc1f 	bl	18698 <__aeabi_f2iz>
   11e5a:	4603      	mov	r3, r0
   11e5c:	b29b      	uxth	r3, r3
   11e5e:	b29a      	uxth	r2, r3
   11e60:	f24c 2330 	movw	r3, #49712	; 0xc230
   11e64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e68:	801a      	strh	r2, [r3, #0]
}
   11e6a:	370c      	adds	r7, #12
   11e6c:	46bd      	mov	sp, r7
   11e6e:	bd90      	pop	{r4, r7, pc}

00011e70 <course_pid_run>:

float course_pgain = COURSE_PGAIN;
float desired_course = 0.;
float max_roll = MAX_ROLL;

void course_pid_run( void ) {
   11e70:	b580      	push	{r7, lr}
   11e72:	b082      	sub	sp, #8
   11e74:	af00      	add	r7, sp, #0
  float err = estimator_hspeed_dir - desired_course;
   11e76:	f24c 43e8 	movw	r3, #50408	; 0xc4e8
   11e7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e7e:	681a      	ldr	r2, [r3, #0]
   11e80:	f24c 233c 	movw	r3, #49724	; 0xc23c
   11e84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e88:	681b      	ldr	r3, [r3, #0]
   11e8a:	4610      	mov	r0, r2
   11e8c:	4619      	mov	r1, r3
   11e8e:	f006 f933 	bl	180f8 <__aeabi_fsub>
   11e92:	4603      	mov	r3, r0
   11e94:	607b      	str	r3, [r7, #4]
  NORM_RAD_ANGLE(err);
   11e96:	e013      	b.n	11ec0 <course_pid_run+0x50>
   11e98:	6878      	ldr	r0, [r7, #4]
   11e9a:	f005 fda3 	bl	179e4 <__aeabi_f2d>
   11e9e:	4602      	mov	r2, r0
   11ea0:	460b      	mov	r3, r1
   11ea2:	4610      	mov	r0, r2
   11ea4:	4619      	mov	r1, r3
   11ea6:	a348      	add	r3, pc, #288	; (adr r3, 11fc8 <course_pid_run+0x158>)
   11ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
   11eac:	f005 fc3a 	bl	17724 <__aeabi_dsub>
   11eb0:	4602      	mov	r2, r0
   11eb2:	460b      	mov	r3, r1
   11eb4:	4610      	mov	r0, r2
   11eb6:	4619      	mov	r1, r3
   11eb8:	f006 f8ca 	bl	18050 <__aeabi_d2f>
   11ebc:	4603      	mov	r3, r0
   11ebe:	607b      	str	r3, [r7, #4]
   11ec0:	6878      	ldr	r0, [r7, #4]
   11ec2:	f005 fd8f 	bl	179e4 <__aeabi_f2d>
   11ec6:	4602      	mov	r2, r0
   11ec8:	460b      	mov	r3, r1
   11eca:	4610      	mov	r0, r2
   11ecc:	4619      	mov	r1, r3
   11ece:	a340      	add	r3, pc, #256	; (adr r3, 11fd0 <course_pid_run+0x160>)
   11ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
   11ed4:	f006 f86a 	bl	17fac <__aeabi_dcmpgt>
   11ed8:	4603      	mov	r3, r0
   11eda:	2b00      	cmp	r3, #0
   11edc:	d1dc      	bne.n	11e98 <course_pid_run+0x28>
   11ede:	e013      	b.n	11f08 <course_pid_run+0x98>
   11ee0:	6878      	ldr	r0, [r7, #4]
   11ee2:	f005 fd7f 	bl	179e4 <__aeabi_f2d>
   11ee6:	4602      	mov	r2, r0
   11ee8:	460b      	mov	r3, r1
   11eea:	4610      	mov	r0, r2
   11eec:	4619      	mov	r1, r3
   11eee:	a336      	add	r3, pc, #216	; (adr r3, 11fc8 <course_pid_run+0x158>)
   11ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
   11ef4:	f005 fc18 	bl	17728 <__adddf3>
   11ef8:	4602      	mov	r2, r0
   11efa:	460b      	mov	r3, r1
   11efc:	4610      	mov	r0, r2
   11efe:	4619      	mov	r1, r3
   11f00:	f006 f8a6 	bl	18050 <__aeabi_d2f>
   11f04:	4603      	mov	r3, r0
   11f06:	607b      	str	r3, [r7, #4]
   11f08:	6878      	ldr	r0, [r7, #4]
   11f0a:	f005 fd6b 	bl	179e4 <__aeabi_f2d>
   11f0e:	4602      	mov	r2, r0
   11f10:	460b      	mov	r3, r1
   11f12:	4610      	mov	r0, r2
   11f14:	4619      	mov	r1, r3
   11f16:	a330      	add	r3, pc, #192	; (adr r3, 11fd8 <course_pid_run+0x168>)
   11f18:	e9d3 2300 	ldrd	r2, r3, [r3]
   11f1c:	f006 f828 	bl	17f70 <__aeabi_dcmplt>
   11f20:	4603      	mov	r3, r0
   11f22:	2b00      	cmp	r3, #0
   11f24:	d1dc      	bne.n	11ee0 <course_pid_run+0x70>
  nav_desired_roll = course_pgain * err; //  * fspeed / AIR_SPEED;
   11f26:	f240 4308 	movw	r3, #1032	; 0x408
   11f2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f2e:	681b      	ldr	r3, [r3, #0]
   11f30:	4618      	mov	r0, r3
   11f32:	6879      	ldr	r1, [r7, #4]
   11f34:	f006 f9ea 	bl	1830c <__aeabi_fmul>
   11f38:	4603      	mov	r3, r0
   11f3a:	461a      	mov	r2, r3
   11f3c:	f24c 2380 	movw	r3, #49792	; 0xc280
   11f40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f44:	601a      	str	r2, [r3, #0]
  if (nav_desired_roll > max_roll)
   11f46:	f24c 2380 	movw	r3, #49792	; 0xc280
   11f4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f4e:	681a      	ldr	r2, [r3, #0]
   11f50:	f240 430c 	movw	r3, #1036	; 0x40c
   11f54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f58:	681b      	ldr	r3, [r3, #0]
   11f5a:	4610      	mov	r0, r2
   11f5c:	4619      	mov	r1, r3
   11f5e:	f006 fb91 	bl	18684 <__aeabi_fcmpgt>
   11f62:	4603      	mov	r3, r0
   11f64:	2b00      	cmp	r3, #0
   11f66:	d00a      	beq.n	11f7e <course_pid_run+0x10e>
    nav_desired_roll = max_roll;
   11f68:	f240 430c 	movw	r3, #1036	; 0x40c
   11f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f70:	681a      	ldr	r2, [r3, #0]
   11f72:	f24c 2380 	movw	r3, #49792	; 0xc280
   11f76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f7a:	601a      	str	r2, [r3, #0]
   11f7c:	e01e      	b.n	11fbc <course_pid_run+0x14c>
  else if (nav_desired_roll < -max_roll)
   11f7e:	f240 430c 	movw	r3, #1036	; 0x40c
   11f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f86:	681b      	ldr	r3, [r3, #0]
   11f88:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11f8c:	f24c 2380 	movw	r3, #49792	; 0xc280
   11f90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f94:	681b      	ldr	r3, [r3, #0]
   11f96:	4610      	mov	r0, r2
   11f98:	4619      	mov	r1, r3
   11f9a:	f006 fb73 	bl	18684 <__aeabi_fcmpgt>
   11f9e:	4603      	mov	r3, r0
   11fa0:	2b00      	cmp	r3, #0
   11fa2:	d00b      	beq.n	11fbc <course_pid_run+0x14c>
    nav_desired_roll = -max_roll;
   11fa4:	f240 430c 	movw	r3, #1036	; 0x40c
   11fa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fac:	681b      	ldr	r3, [r3, #0]
   11fae:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11fb2:	f24c 2380 	movw	r3, #49792	; 0xc280
   11fb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11fba:	601a      	str	r2, [r3, #0]
}
   11fbc:	3708      	adds	r7, #8
   11fbe:	46bd      	mov	sp, r7
   11fc0:	bd80      	pop	{r7, pc}
   11fc2:	bf00      	nop
   11fc4:	f3af 8000 	nop.w
   11fc8:	54442d18 	.word	0x54442d18
   11fcc:	401921fb 	.word	0x401921fb
   11fd0:	54442d18 	.word	0x54442d18
   11fd4:	400921fb 	.word	0x400921fb
   11fd8:	54442d18 	.word	0x54442d18
   11fdc:	c00921fb 	.word	0xc00921fb

00011fe0 <climb_pid_run>:

#define MAX_CLIMB_SUM_ERR 100
#define MAX_PITCH_CLIMB_SUM_ERR 100

/** \brief Computes desired_gaz and desired_pitch from desired_climb */
void climb_pid_run ( void ) {
   11fe0:	b5b0      	push	{r4, r5, r7, lr}
   11fe2:	b082      	sub	sp, #8
   11fe4:	af00      	add	r7, sp, #0
  float err  = estimator_z_dot - desired_climb;
   11fe6:	f24c 43cc 	movw	r3, #50380	; 0xc4cc
   11fea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11fee:	681a      	ldr	r2, [r3, #0]
   11ff0:	f24c 2340 	movw	r3, #49728	; 0xc240
   11ff4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ff8:	681b      	ldr	r3, [r3, #0]
   11ffa:	4610      	mov	r0, r2
   11ffc:	4619      	mov	r1, r3
   11ffe:	f006 f87b 	bl	180f8 <__aeabi_fsub>
   12002:	4603      	mov	r3, r0
   12004:	607b      	str	r3, [r7, #4]
  float fgaz;
  if (auto_pitch) { /* gaz constant */
   12006:	f64b 63df 	movw	r3, #48863	; 0xbedf
   1200a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1200e:	781b      	ldrb	r3, [r3, #0]
   12010:	2b00      	cmp	r3, #0
   12012:	f000 80a8 	beq.w	12166 <climb_pid_run+0x186>
    desired_gaz = nav_desired_gaz;
   12016:	f24c 2378 	movw	r3, #49784	; 0xc278
   1201a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1201e:	881b      	ldrh	r3, [r3, #0]
   12020:	b29a      	uxth	r2, r3
   12022:	f24c 232c 	movw	r3, #49708	; 0xc22c
   12026:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1202a:	801a      	strh	r2, [r3, #0]
    desired_pitch = climb_pitch_pgain * (err + climb_pitch_igain * climb_pitch_sum_err);
   1202c:	f240 4314 	movw	r3, #1044	; 0x414
   12030:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12034:	681a      	ldr	r2, [r3, #0]
   12036:	f24c 234c 	movw	r3, #49740	; 0xc24c
   1203a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1203e:	681b      	ldr	r3, [r3, #0]
   12040:	4610      	mov	r0, r2
   12042:	4619      	mov	r1, r3
   12044:	f006 f962 	bl	1830c <__aeabi_fmul>
   12048:	4603      	mov	r3, r0
   1204a:	4618      	mov	r0, r3
   1204c:	6879      	ldr	r1, [r7, #4]
   1204e:	f006 f855 	bl	180fc <__addsf3>
   12052:	4603      	mov	r3, r0
   12054:	461a      	mov	r2, r3
   12056:	f240 4310 	movw	r3, #1040	; 0x410
   1205a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1205e:	681b      	ldr	r3, [r3, #0]
   12060:	4610      	mov	r0, r2
   12062:	4619      	mov	r1, r3
   12064:	f006 f952 	bl	1830c <__aeabi_fmul>
   12068:	4603      	mov	r3, r0
   1206a:	461a      	mov	r2, r3
   1206c:	f24c 2328 	movw	r3, #49704	; 0xc228
   12070:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12074:	601a      	str	r2, [r3, #0]
    if (desired_pitch > max_pitch)
   12076:	f24c 2328 	movw	r3, #49704	; 0xc228
   1207a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1207e:	681a      	ldr	r2, [r3, #0]
   12080:	f240 4318 	movw	r3, #1048	; 0x418
   12084:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12088:	681b      	ldr	r3, [r3, #0]
   1208a:	4610      	mov	r0, r2
   1208c:	4619      	mov	r1, r3
   1208e:	f006 faf9 	bl	18684 <__aeabi_fcmpgt>
   12092:	4603      	mov	r3, r0
   12094:	2b00      	cmp	r3, #0
   12096:	d009      	beq.n	120ac <climb_pid_run+0xcc>
      desired_pitch = max_pitch;
   12098:	f240 4318 	movw	r3, #1048	; 0x418
   1209c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120a0:	681a      	ldr	r2, [r3, #0]
   120a2:	f24c 2328 	movw	r3, #49704	; 0xc228
   120a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120aa:	601a      	str	r2, [r3, #0]
    if (desired_pitch < min_pitch)
   120ac:	f24c 2328 	movw	r3, #49704	; 0xc228
   120b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120b4:	681a      	ldr	r2, [r3, #0]
   120b6:	f240 431c 	movw	r3, #1052	; 0x41c
   120ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120be:	681b      	ldr	r3, [r3, #0]
   120c0:	4610      	mov	r0, r2
   120c2:	4619      	mov	r1, r3
   120c4:	f006 fac0 	bl	18648 <__aeabi_fcmplt>
   120c8:	4603      	mov	r3, r0
   120ca:	2b00      	cmp	r3, #0
   120cc:	d009      	beq.n	120e2 <climb_pid_run+0x102>
      desired_pitch = min_pitch;
   120ce:	f240 431c 	movw	r3, #1052	; 0x41c
   120d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120d6:	681a      	ldr	r2, [r3, #0]
   120d8:	f24c 2328 	movw	r3, #49704	; 0xc228
   120dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120e0:	601a      	str	r2, [r3, #0]
    climb_pitch_sum_err += err;
   120e2:	f24c 234c 	movw	r3, #49740	; 0xc24c
   120e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120ea:	681b      	ldr	r3, [r3, #0]
   120ec:	4618      	mov	r0, r3
   120ee:	6879      	ldr	r1, [r7, #4]
   120f0:	f006 f804 	bl	180fc <__addsf3>
   120f4:	4603      	mov	r3, r0
   120f6:	461a      	mov	r2, r3
   120f8:	f24c 234c 	movw	r3, #49740	; 0xc24c
   120fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12100:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err > MAX_PITCH_CLIMB_SUM_ERR)
   12102:	f24c 234c 	movw	r3, #49740	; 0xc24c
   12106:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1210a:	681b      	ldr	r3, [r3, #0]
   1210c:	4618      	mov	r0, r3
   1210e:	f04f 0100 	mov.w	r1, #0
   12112:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   12116:	f006 fab5 	bl	18684 <__aeabi_fcmpgt>
   1211a:	4603      	mov	r3, r0
   1211c:	2b00      	cmp	r3, #0
   1211e:	d008      	beq.n	12132 <climb_pid_run+0x152>
      climb_pitch_sum_err = MAX_PITCH_CLIMB_SUM_ERR;
   12120:	f24c 234c 	movw	r3, #49740	; 0xc24c
   12124:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12128:	f04f 0200 	mov.w	r2, #0
   1212c:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   12130:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err < - MAX_PITCH_CLIMB_SUM_ERR)
   12132:	f24c 234c 	movw	r3, #49740	; 0xc24c
   12136:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1213a:	681b      	ldr	r3, [r3, #0]
   1213c:	4618      	mov	r0, r3
   1213e:	f04f 0100 	mov.w	r1, #0
   12142:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   12146:	f006 fa7f 	bl	18648 <__aeabi_fcmplt>
   1214a:	4603      	mov	r3, r0
   1214c:	2b00      	cmp	r3, #0
   1214e:	d100      	bne.n	12152 <climb_pid_run+0x172>
   12150:	e109      	b.n	12366 <climb_pid_run+0x386>
      climb_pitch_sum_err = - MAX_PITCH_CLIMB_SUM_ERR; 
   12152:	f24c 234c 	movw	r3, #49740	; 0xc24c
   12156:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1215a:	f04f 0200 	mov.w	r2, #0
   1215e:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   12162:	601a      	str	r2, [r3, #0]
   12164:	e0ff      	b.n	12366 <climb_pid_run+0x386>
  } else { /* pitch almost constant */
    /* pitch offset for climb */
    pitch_of_vz = (desired_climb > 0) ? desired_climb * pitch_of_vz_pgain : 0.;
   12166:	f24c 2340 	movw	r3, #49728	; 0xc240
   1216a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1216e:	681b      	ldr	r3, [r3, #0]
   12170:	4618      	mov	r0, r3
   12172:	f04f 0100 	mov.w	r1, #0
   12176:	f006 fa85 	bl	18684 <__aeabi_fcmpgt>
   1217a:	4603      	mov	r3, r0
   1217c:	2b00      	cmp	r3, #0
   1217e:	d010      	beq.n	121a2 <climb_pid_run+0x1c2>
   12180:	f24c 2340 	movw	r3, #49728	; 0xc240
   12184:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12188:	681a      	ldr	r2, [r3, #0]
   1218a:	f240 4304 	movw	r3, #1028	; 0x404
   1218e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12192:	681b      	ldr	r3, [r3, #0]
   12194:	4610      	mov	r0, r2
   12196:	4619      	mov	r1, r3
   12198:	f006 f8b8 	bl	1830c <__aeabi_fmul>
   1219c:	4603      	mov	r3, r0
   1219e:	461a      	mov	r2, r3
   121a0:	e001      	b.n	121a6 <climb_pid_run+0x1c6>
   121a2:	f04f 0200 	mov.w	r2, #0
   121a6:	f24c 2338 	movw	r3, #49720	; 0xc238
   121aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121ae:	601a      	str	r2, [r3, #0]
    fgaz = climb_pgain * (err + climb_igain * climb_sum_err) + CLIMB_LEVEL_GAZ + CLIMB_GAZ_OF_CLIMB*desired_climb;
   121b0:	f64c 42cd 	movw	r2, #52429	; 0xcccd
   121b4:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
   121b8:	f24c 2348 	movw	r3, #49736	; 0xc248
   121bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121c0:	681b      	ldr	r3, [r3, #0]
   121c2:	4610      	mov	r0, r2
   121c4:	4619      	mov	r1, r3
   121c6:	f006 f8a1 	bl	1830c <__aeabi_fmul>
   121ca:	4603      	mov	r3, r0
   121cc:	4618      	mov	r0, r3
   121ce:	6879      	ldr	r1, [r7, #4]
   121d0:	f005 ff94 	bl	180fc <__addsf3>
   121d4:	4603      	mov	r3, r0
   121d6:	461a      	mov	r2, r3
   121d8:	f24c 238f 	movw	r3, #49807	; 0xc28f
   121dc:	f6cb 43f5 	movt	r3, #48373	; 0xbcf5
   121e0:	4610      	mov	r0, r2
   121e2:	4619      	mov	r1, r3
   121e4:	f006 f892 	bl	1830c <__aeabi_fmul>
   121e8:	4603      	mov	r3, r0
   121ea:	4618      	mov	r0, r3
   121ec:	f005 fbfa 	bl	179e4 <__aeabi_f2d>
   121f0:	4602      	mov	r2, r0
   121f2:	460b      	mov	r3, r1
   121f4:	4610      	mov	r0, r2
   121f6:	4619      	mov	r1, r3
   121f8:	a35d      	add	r3, pc, #372	; (adr r3, 12370 <climb_pid_run+0x390>)
   121fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   121fe:	f005 fa93 	bl	17728 <__adddf3>
   12202:	4602      	mov	r2, r0
   12204:	460b      	mov	r3, r1
   12206:	4614      	mov	r4, r2
   12208:	461d      	mov	r5, r3
   1220a:	f24c 2340 	movw	r3, #49728	; 0xc240
   1220e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12212:	681b      	ldr	r3, [r3, #0]
   12214:	4618      	mov	r0, r3
   12216:	f005 fbe5 	bl	179e4 <__aeabi_f2d>
   1221a:	4602      	mov	r2, r0
   1221c:	460b      	mov	r3, r1
   1221e:	4610      	mov	r0, r2
   12220:	4619      	mov	r1, r3
   12222:	a355      	add	r3, pc, #340	; (adr r3, 12378 <climb_pid_run+0x398>)
   12224:	e9d3 2300 	ldrd	r2, r3, [r3]
   12228:	f005 fc30 	bl	17a8c <__aeabi_dmul>
   1222c:	4602      	mov	r2, r0
   1222e:	460b      	mov	r3, r1
   12230:	4620      	mov	r0, r4
   12232:	4629      	mov	r1, r5
   12234:	f005 fa78 	bl	17728 <__adddf3>
   12238:	4602      	mov	r2, r0
   1223a:	460b      	mov	r3, r1
   1223c:	4610      	mov	r0, r2
   1223e:	4619      	mov	r1, r3
   12240:	f005 ff06 	bl	18050 <__aeabi_d2f>
   12244:	4603      	mov	r3, r0
   12246:	603b      	str	r3, [r7, #0]
    climb_sum_err += err;
   12248:	f24c 2348 	movw	r3, #49736	; 0xc248
   1224c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12250:	681b      	ldr	r3, [r3, #0]
   12252:	4618      	mov	r0, r3
   12254:	6879      	ldr	r1, [r7, #4]
   12256:	f005 ff51 	bl	180fc <__addsf3>
   1225a:	4603      	mov	r3, r0
   1225c:	461a      	mov	r2, r3
   1225e:	f24c 2348 	movw	r3, #49736	; 0xc248
   12262:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12266:	601a      	str	r2, [r3, #0]
    if (climb_sum_err > MAX_CLIMB_SUM_ERR) climb_sum_err = MAX_CLIMB_SUM_ERR;
   12268:	f24c 2348 	movw	r3, #49736	; 0xc248
   1226c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12270:	681b      	ldr	r3, [r3, #0]
   12272:	4618      	mov	r0, r3
   12274:	f04f 0100 	mov.w	r1, #0
   12278:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   1227c:	f006 fa02 	bl	18684 <__aeabi_fcmpgt>
   12280:	4603      	mov	r3, r0
   12282:	2b00      	cmp	r3, #0
   12284:	d008      	beq.n	12298 <climb_pid_run+0x2b8>
   12286:	f24c 2348 	movw	r3, #49736	; 0xc248
   1228a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1228e:	f04f 0200 	mov.w	r2, #0
   12292:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   12296:	601a      	str	r2, [r3, #0]
    if (climb_sum_err < - MAX_CLIMB_SUM_ERR) climb_sum_err = - MAX_CLIMB_SUM_ERR;
   12298:	f24c 2348 	movw	r3, #49736	; 0xc248
   1229c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122a0:	681b      	ldr	r3, [r3, #0]
   122a2:	4618      	mov	r0, r3
   122a4:	f04f 0100 	mov.w	r1, #0
   122a8:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   122ac:	f006 f9cc 	bl	18648 <__aeabi_fcmplt>
   122b0:	4603      	mov	r3, r0
   122b2:	2b00      	cmp	r3, #0
   122b4:	d008      	beq.n	122c8 <climb_pid_run+0x2e8>
   122b6:	f24c 2348 	movw	r3, #49736	; 0xc248
   122ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122be:	f04f 0200 	mov.w	r2, #0
   122c2:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   122c6:	601a      	str	r2, [r3, #0]
    desired_gaz = TRIM_UPPRZ(fgaz * MAX_PPRZ);
   122c8:	6838      	ldr	r0, [r7, #0]
   122ca:	f04f 0100 	mov.w	r1, #0
   122ce:	f2c4 6116 	movt	r1, #17942	; 0x4616
   122d2:	f006 f81b 	bl	1830c <__aeabi_fmul>
   122d6:	4603      	mov	r3, r0
   122d8:	4618      	mov	r0, r3
   122da:	f04f 0100 	mov.w	r1, #0
   122de:	f006 f9b3 	bl	18648 <__aeabi_fcmplt>
   122e2:	4603      	mov	r3, r0
   122e4:	2b00      	cmp	r3, #0
   122e6:	d001      	beq.n	122ec <climb_pid_run+0x30c>
   122e8:	2200      	movs	r2, #0
   122ea:	e022      	b.n	12332 <climb_pid_run+0x352>
   122ec:	6838      	ldr	r0, [r7, #0]
   122ee:	f04f 0100 	mov.w	r1, #0
   122f2:	f2c4 6116 	movt	r1, #17942	; 0x4616
   122f6:	f006 f809 	bl	1830c <__aeabi_fmul>
   122fa:	4603      	mov	r3, r0
   122fc:	4618      	mov	r0, r3
   122fe:	f04f 0100 	mov.w	r1, #0
   12302:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12306:	f006 f9bd 	bl	18684 <__aeabi_fcmpgt>
   1230a:	4603      	mov	r3, r0
   1230c:	2b00      	cmp	r3, #0
   1230e:	d002      	beq.n	12316 <climb_pid_run+0x336>
   12310:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   12314:	e00c      	b.n	12330 <climb_pid_run+0x350>
   12316:	6838      	ldr	r0, [r7, #0]
   12318:	f04f 0100 	mov.w	r1, #0
   1231c:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12320:	f005 fff4 	bl	1830c <__aeabi_fmul>
   12324:	4603      	mov	r3, r0
   12326:	4618      	mov	r0, r3
   12328:	f006 f9b6 	bl	18698 <__aeabi_f2iz>
   1232c:	4603      	mov	r3, r0
   1232e:	b29b      	uxth	r3, r3
   12330:	b29a      	uxth	r2, r3
   12332:	f24c 232c 	movw	r3, #49708	; 0xc22c
   12336:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1233a:	801a      	strh	r2, [r3, #0]
    desired_pitch = nav_pitch + pitch_of_vz;
   1233c:	f24c 237c 	movw	r3, #49788	; 0xc27c
   12340:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12344:	681a      	ldr	r2, [r3, #0]
   12346:	f24c 2338 	movw	r3, #49720	; 0xc238
   1234a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1234e:	681b      	ldr	r3, [r3, #0]
   12350:	4610      	mov	r0, r2
   12352:	4619      	mov	r1, r3
   12354:	f005 fed2 	bl	180fc <__addsf3>
   12358:	4603      	mov	r3, r0
   1235a:	461a      	mov	r2, r3
   1235c:	f24c 2328 	movw	r3, #49704	; 0xc228
   12360:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12364:	601a      	str	r2, [r3, #0]
  }
}
   12366:	3708      	adds	r7, #8
   12368:	46bd      	mov	sp, r7
   1236a:	bdb0      	pop	{r4, r5, r7, pc}
   1236c:	f3af 8000 	nop.w
   12370:	3d70a3d7 	.word	0x3d70a3d7
   12374:	3fd3d70a 	.word	0x3fd3d70a
   12378:	9999999a 	.word	0x9999999a
   1237c:	3fc99999 	.word	0x3fc99999

00012380 <altitude_pid_run>:

float altitude_pgain = ALTITUDE_PGAIN;


void altitude_pid_run(void) {
   12380:	b580      	push	{r7, lr}
   12382:	b082      	sub	sp, #8
   12384:	af00      	add	r7, sp, #0
  float err = estimator_z - desired_altitude;
   12386:	f24c 43b4 	movw	r3, #50356	; 0xc4b4
   1238a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1238e:	681a      	ldr	r2, [r3, #0]
   12390:	f240 4324 	movw	r3, #1060	; 0x424
   12394:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12398:	681b      	ldr	r3, [r3, #0]
   1239a:	4610      	mov	r0, r2
   1239c:	4619      	mov	r1, r3
   1239e:	f005 feab 	bl	180f8 <__aeabi_fsub>
   123a2:	4603      	mov	r3, r0
   123a4:	607b      	str	r3, [r7, #4]
  desired_climb = pre_climb + altitude_pgain * err;
   123a6:	f240 4320 	movw	r3, #1056	; 0x420
   123aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123ae:	681b      	ldr	r3, [r3, #0]
   123b0:	4618      	mov	r0, r3
   123b2:	6879      	ldr	r1, [r7, #4]
   123b4:	f005 ffaa 	bl	1830c <__aeabi_fmul>
   123b8:	4603      	mov	r3, r0
   123ba:	461a      	mov	r2, r3
   123bc:	f24c 2344 	movw	r3, #49732	; 0xc244
   123c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123c4:	681b      	ldr	r3, [r3, #0]
   123c6:	4610      	mov	r0, r2
   123c8:	4619      	mov	r1, r3
   123ca:	f005 fe97 	bl	180fc <__addsf3>
   123ce:	4603      	mov	r3, r0
   123d0:	461a      	mov	r2, r3
   123d2:	f24c 2340 	movw	r3, #49728	; 0xc240
   123d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123da:	601a      	str	r2, [r3, #0]
  if (desired_climb < -CLIMB_MAX) desired_climb = -CLIMB_MAX;
   123dc:	f24c 2340 	movw	r3, #49728	; 0xc240
   123e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123e4:	681b      	ldr	r3, [r3, #0]
   123e6:	4618      	mov	r0, r3
   123e8:	f04f 0100 	mov.w	r1, #0
   123ec:	f6cb 7180 	movt	r1, #49024	; 0xbf80
   123f0:	f006 f92a 	bl	18648 <__aeabi_fcmplt>
   123f4:	4603      	mov	r3, r0
   123f6:	2b00      	cmp	r3, #0
   123f8:	d008      	beq.n	1240c <altitude_pid_run+0x8c>
   123fa:	f24c 2340 	movw	r3, #49728	; 0xc240
   123fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12402:	f04f 0200 	mov.w	r2, #0
   12406:	f6cb 7280 	movt	r2, #49024	; 0xbf80
   1240a:	601a      	str	r2, [r3, #0]
  if (desired_climb > CLIMB_MAX) desired_climb = CLIMB_MAX;
   1240c:	f24c 2340 	movw	r3, #49728	; 0xc240
   12410:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12414:	681b      	ldr	r3, [r3, #0]
   12416:	4618      	mov	r0, r3
   12418:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   1241c:	f006 f932 	bl	18684 <__aeabi_fcmpgt>
   12420:	4603      	mov	r3, r0
   12422:	2b00      	cmp	r3, #0
   12424:	d006      	beq.n	12434 <altitude_pid_run+0xb4>
   12426:	f24c 2340 	movw	r3, #49728	; 0xc240
   1242a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1242e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   12432:	601a      	str	r2, [r3, #0]
}
   12434:	3708      	adds	r7, #8
   12436:	46bd      	mov	sp, r7
   12438:	bd80      	pop	{r7, pc}
   1243a:	bf00      	nop
   1243c:	f3af 8000 	nop.w

00012440 <auto_nav>:
#define GROUND_ALT 125.
#define SECURITY_ALT 150.
#define MAX_DIST_FROM_HOME 500.
#ifdef NAV_C

static inline void auto_nav(void) {
   12440:	b5f0      	push	{r4, r5, r6, r7, lr}
   12442:	b08b      	sub	sp, #44	; 0x2c
   12444:	af00      	add	r7, sp, #0
        NextBlock()
    }

}
#else*/
if(nav_block == 0)
   12446:	f24c 2351 	movw	r3, #49745	; 0xc251
   1244a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1244e:	781b      	ldrb	r3, [r3, #0]
   12450:	2b00      	cmp	r3, #0
   12452:	f040 8169 	bne.w	12728 <auto_nav+0x2e8>
{ // init
    
    if (nav_stage == 0) 
   12456:	f24c 2350 	movw	r3, #49744	; 0xc250
   1245a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1245e:	781b      	ldrb	r3, [r3, #0]
   12460:	2b00      	cmp	r3, #0
   12462:	d13c      	bne.n	124de <auto_nav+0x9e>
    {
	Label(while_1)
	nav_stage=0;
   12464:	f24c 2350 	movw	r3, #49744	; 0xc250
   12468:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1246c:	2200      	movs	r2, #0
   1246e:	701a      	strb	r2, [r3, #0]
	if (! (!(estimator_flight_time))) Goto(endwhile_2) 
   12470:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
   12474:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12478:	881b      	ldrh	r3, [r3, #0]
   1247a:	2b00      	cmp	r3, #0
   1247c:	d000      	beq.n	12480 <auto_nav+0x40>
   1247e:	e03d      	b.n	124fc <auto_nav+0xbc>
	else NextStage(); 
   12480:	f24c 2350 	movw	r3, #49744	; 0xc250
   12484:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12488:	781b      	ldrb	r3, [r3, #0]
   1248a:	3301      	adds	r3, #1
   1248c:	b2da      	uxtb	r2, r3
   1248e:	f24c 2350 	movw	r3, #49744	; 0xc250
   12492:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12496:	701a      	strb	r2, [r3, #0]
   12498:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   1249c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124a0:	681a      	ldr	r2, [r3, #0]
   124a2:	f24c 2354 	movw	r3, #49748	; 0xc254
   124a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124aa:	601a      	str	r2, [r3, #0]
   124ac:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   124b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124b4:	681a      	ldr	r2, [r3, #0]
   124b6:	f24c 2358 	movw	r3, #49752	; 0xc258
   124ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124be:	601a      	str	r2, [r3, #0]
   124c0:	f24c 2364 	movw	r3, #49764	; 0xc264
   124c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124c8:	2200      	movs	r2, #0
   124ca:	801a      	strh	r2, [r3, #0]
   124cc:	f24c 2368 	movw	r3, #49768	; 0xc268
   124d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124d4:	f04f 0200 	mov.w	r2, #0
   124d8:	601a      	str	r2, [r3, #0]
   124da:	f002 b883 	b.w	145e4 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   124de:	f24c 2350 	movw	r3, #49744	; 0xc250
   124e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124e6:	781b      	ldrb	r3, [r3, #0]
   124e8:	2b01      	cmp	r3, #1
   124ea:	d100      	bne.n	124ee <auto_nav+0xae>
    {   Goto(while_1)}
   124ec:	e7ba      	b.n	12464 <auto_nav+0x24>
    else if (nav_stage == 2)
   124ee:	f24c 2350 	movw	r3, #49744	; 0xc250
   124f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124f6:	781b      	ldrb	r3, [r3, #0]
   124f8:	2b02      	cmp	r3, #2
   124fa:	d162      	bne.n	125c2 <auto_nav+0x182>
    {
	Label(endwhile_2)
	nav_stage = 2;
   124fc:	f24c 2350 	movw	r3, #49744	; 0xc250
   12500:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12504:	2202      	movs	r2, #2
   12506:	701a      	strb	r2, [r3, #0]
        if ((estimator_flight_time>8)) NextStage() else {
   12508:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
   1250c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12510:	881b      	ldrh	r3, [r3, #0]
   12512:	2b08      	cmp	r3, #8
   12514:	d92e      	bls.n	12574 <auto_nav+0x134>
   12516:	f24c 2350 	movw	r3, #49744	; 0xc250
   1251a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1251e:	781b      	ldrb	r3, [r3, #0]
   12520:	3301      	adds	r3, #1
   12522:	b2da      	uxtb	r2, r3
   12524:	f24c 2350 	movw	r3, #49744	; 0xc250
   12528:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1252c:	701a      	strb	r2, [r3, #0]
   1252e:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   12532:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12536:	681a      	ldr	r2, [r3, #0]
   12538:	f24c 2354 	movw	r3, #49748	; 0xc254
   1253c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12540:	601a      	str	r2, [r3, #0]
   12542:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   12546:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1254a:	681a      	ldr	r2, [r3, #0]
   1254c:	f24c 2358 	movw	r3, #49752	; 0xc258
   12550:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12554:	601a      	str	r2, [r3, #0]
   12556:	f24c 2364 	movw	r3, #49764	; 0xc264
   1255a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1255e:	2200      	movs	r2, #0
   12560:	801a      	strh	r2, [r3, #0]
   12562:	f24c 2368 	movw	r3, #49768	; 0xc268
   12566:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1256a:	f04f 0200 	mov.w	r2, #0
   1256e:	601a      	str	r2, [r3, #0]
   12570:	f002 b838 	b.w	145e4 <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   12574:	f24c 233c 	movw	r3, #49724	; 0xc23c
   12578:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1257c:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   12580:	f2c4 0296 	movt	r2, #16534	; 0x4096
   12584:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   12586:	f64b 63df 	movw	r3, #48863	; 0xbedf
   1258a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1258e:	2200      	movs	r2, #0
   12590:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.150000;
   12592:	f24c 237c 	movw	r3, #49788	; 0xc27c
   12596:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1259a:	f649 129a 	movw	r2, #39322	; 0x999a
   1259e:	f6c3 6219 	movt	r2, #15897	; 0x3e19
   125a2:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_GAZ;
   125a4:	f64b 63dd 	movw	r3, #48861	; 0xbedd
   125a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125ac:	2201      	movs	r2, #1
   125ae:	701a      	strb	r2, [r3, #0]
          nav_desired_gaz = TRIM_UPPRZ(0.800000*MAX_PPRZ);
   125b0:	f24c 2378 	movw	r3, #49784	; 0xc278
   125b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125b8:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
   125bc:	801a      	strh	r2, [r3, #0]
        }
        return;
   125be:	f002 b811 	b.w	145e4 <auto_nav+0x21a4>
     }
     else if (nav_stage == 3)
   125c2:	f24c 2350 	movw	r3, #49744	; 0xc250
   125c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125ca:	781b      	ldrb	r3, [r3, #0]
   125cc:	2b03      	cmp	r3, #3
   125ce:	d168      	bne.n	126a2 <auto_nav+0x262>
     {
	nav_stage = 3;	
   125d0:	f24c 2350 	movw	r3, #49744	; 0xc250
   125d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125d8:	2203      	movs	r2, #3
   125da:	701a      	strb	r2, [r3, #0]
        if ((estimator_z>SECURITY_ALT)) NextStage() else {
   125dc:	f24c 43b4 	movw	r3, #50356	; 0xc4b4
   125e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125e4:	681b      	ldr	r3, [r3, #0]
   125e6:	4618      	mov	r0, r3
   125e8:	f04f 0100 	mov.w	r1, #0
   125ec:	f2c4 3116 	movt	r1, #17174	; 0x4316
   125f0:	f006 f848 	bl	18684 <__aeabi_fcmpgt>
   125f4:	4603      	mov	r3, r0
   125f6:	2b00      	cmp	r3, #0
   125f8:	d02e      	beq.n	12658 <auto_nav+0x218>
   125fa:	f24c 2350 	movw	r3, #49744	; 0xc250
   125fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12602:	781b      	ldrb	r3, [r3, #0]
   12604:	3301      	adds	r3, #1
   12606:	b2da      	uxtb	r2, r3
   12608:	f24c 2350 	movw	r3, #49744	; 0xc250
   1260c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12610:	701a      	strb	r2, [r3, #0]
   12612:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   12616:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1261a:	681a      	ldr	r2, [r3, #0]
   1261c:	f24c 2354 	movw	r3, #49748	; 0xc254
   12620:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12624:	601a      	str	r2, [r3, #0]
   12626:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   1262a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1262e:	681a      	ldr	r2, [r3, #0]
   12630:	f24c 2358 	movw	r3, #49752	; 0xc258
   12634:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12638:	601a      	str	r2, [r3, #0]
   1263a:	f24c 2364 	movw	r3, #49764	; 0xc264
   1263e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12642:	2200      	movs	r2, #0
   12644:	801a      	strh	r2, [r3, #0]
   12646:	f24c 2368 	movw	r3, #49768	; 0xc268
   1264a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1264e:	f04f 0200 	mov.w	r2, #0
   12652:	601a      	str	r2, [r3, #0]
   12654:	f001 bfc6 	b.w	145e4 <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   12658:	f24c 233c 	movw	r3, #49724	; 0xc23c
   1265c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12660:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   12664:	f2c4 0296 	movt	r2, #16534	; 0x4096
   12668:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   1266a:	f64b 63df 	movw	r3, #48863	; 0xbedf
   1266e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12672:	2200      	movs	r2, #0
   12674:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   12676:	f24c 237c 	movw	r3, #49788	; 0xc27c
   1267a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1267e:	f04f 0200 	mov.w	r2, #0
   12682:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_CLIMB;
   12684:	f64b 63dd 	movw	r3, #48861	; 0xbedd
   12688:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1268c:	2202      	movs	r2, #2
   1268e:	701a      	strb	r2, [r3, #0]
          desired_climb = 8.000000;
   12690:	f24c 2340 	movw	r3, #49728	; 0xc240
   12694:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12698:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   1269c:	601a      	str	r2, [r3, #0]
        }
        return;
   1269e:	f001 bfa1 	b.w	145e4 <auto_nav+0x21a4>
     }
     else if (nav_stage == 4)
   126a2:	f24c 2350 	movw	r3, #49744	; 0xc250
   126a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126aa:	781b      	ldrb	r3, [r3, #0]
   126ac:	2b04      	cmp	r3, #4
   126ae:	f041 8799 	bne.w	145e4 <auto_nav+0x21a4>
        NextBlock()
   126b2:	f24c 2351 	movw	r3, #49745	; 0xc251
   126b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126ba:	781b      	ldrb	r3, [r3, #0]
   126bc:	3301      	adds	r3, #1
   126be:	b2da      	uxtb	r2, r3
   126c0:	f24c 2351 	movw	r3, #49745	; 0xc251
   126c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126c8:	701a      	strb	r2, [r3, #0]
   126ca:	f24c 2350 	movw	r3, #49744	; 0xc250
   126ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126d2:	2200      	movs	r2, #0
   126d4:	701a      	strb	r2, [r3, #0]
   126d6:	f24c 2366 	movw	r3, #49766	; 0xc266
   126da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126de:	2200      	movs	r2, #0
   126e0:	801a      	strh	r2, [r3, #0]
   126e2:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   126e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126ea:	681a      	ldr	r2, [r3, #0]
   126ec:	f24c 2354 	movw	r3, #49748	; 0xc254
   126f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126f4:	601a      	str	r2, [r3, #0]
   126f6:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   126fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126fe:	681a      	ldr	r2, [r3, #0]
   12700:	f24c 2358 	movw	r3, #49752	; 0xc258
   12704:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12708:	601a      	str	r2, [r3, #0]
   1270a:	f24c 2364 	movw	r3, #49764	; 0xc264
   1270e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12712:	2200      	movs	r2, #0
   12714:	801a      	strh	r2, [r3, #0]
   12716:	f24c 2368 	movw	r3, #49768	; 0xc268
   1271a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1271e:	f04f 0200 	mov.w	r2, #0
   12722:	601a      	str	r2, [r3, #0]
   12724:	f001 bf5e 	b.w	145e4 <auto_nav+0x21a4>
     else { }
}
else if (nav_block == 1) // two
   12728:	f24c 2351 	movw	r3, #49745	; 0xc251
   1272c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12730:	781b      	ldrb	r3, [r3, #0]
   12732:	2b01      	cmp	r3, #1
   12734:	f040 81bc 	bne.w	12ab0 <auto_nav+0x670>
{
    nav_block = 1;
   12738:	f24c 2351 	movw	r3, #49745	; 0xc251
   1273c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12740:	2201      	movs	r2, #1
   12742:	701a      	strb	r2, [r3, #0]
    if RcEvent1() 
   12744:	f64b 63e0 	movw	r3, #48864	; 0xbee0
   12748:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1274c:	781b      	ldrb	r3, [r3, #0]
   1274e:	2b00      	cmp	r3, #0
   12750:	d007      	beq.n	12762 <auto_nav+0x322>
   12752:	f64b 63e0 	movw	r3, #48864	; 0xbee0
   12756:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1275a:	2200      	movs	r2, #0
   1275c:	701a      	strb	r2, [r3, #0]
   1275e:	2301      	movs	r3, #1
   12760:	e000      	b.n	12764 <auto_nav+0x324>
   12762:	2300      	movs	r3, #0
   12764:	2b00      	cmp	r3, #0
   12766:	d034      	beq.n	127d2 <auto_nav+0x392>
	{ GotoBlock(2) }
   12768:	f24c 2351 	movw	r3, #49745	; 0xc251
   1276c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12770:	2202      	movs	r2, #2
   12772:	701a      	strb	r2, [r3, #0]
   12774:	f24c 2350 	movw	r3, #49744	; 0xc250
   12778:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1277c:	2200      	movs	r2, #0
   1277e:	701a      	strb	r2, [r3, #0]
   12780:	f24c 2366 	movw	r3, #49766	; 0xc266
   12784:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12788:	2200      	movs	r2, #0
   1278a:	801a      	strh	r2, [r3, #0]
   1278c:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   12790:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12794:	681a      	ldr	r2, [r3, #0]
   12796:	f24c 2354 	movw	r3, #49748	; 0xc254
   1279a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1279e:	601a      	str	r2, [r3, #0]
   127a0:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   127a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127a8:	681a      	ldr	r2, [r3, #0]
   127aa:	f24c 2358 	movw	r3, #49752	; 0xc258
   127ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127b2:	601a      	str	r2, [r3, #0]
   127b4:	f24c 2364 	movw	r3, #49764	; 0xc264
   127b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127bc:	2200      	movs	r2, #0
   127be:	801a      	strh	r2, [r3, #0]
   127c0:	f24c 2368 	movw	r3, #49768	; 0xc268
   127c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127c8:	f04f 0200 	mov.w	r2, #0
   127cc:	601a      	str	r2, [r3, #0]
   127ce:	f001 bf09 	b.w	145e4 <auto_nav+0x21a4>
    if(nav_stage == 0)
   127d2:	f24c 2350 	movw	r3, #49744	; 0xc250
   127d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127da:	781b      	ldrb	r3, [r3, #0]
   127dc:	2b00      	cmp	r3, #0
   127de:	d12e      	bne.n	1283e <auto_nav+0x3fe>
    {
       Label(while_3)
       if (! (TRUE)) Goto(endwhile_4) else NextStage();
   127e0:	f24c 2350 	movw	r3, #49744	; 0xc250
   127e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127e8:	781b      	ldrb	r3, [r3, #0]
   127ea:	3301      	adds	r3, #1
   127ec:	b2da      	uxtb	r2, r3
   127ee:	f24c 2350 	movw	r3, #49744	; 0xc250
   127f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127f6:	701a      	strb	r2, [r3, #0]
   127f8:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   127fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12800:	681a      	ldr	r2, [r3, #0]
   12802:	f24c 2354 	movw	r3, #49748	; 0xc254
   12806:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1280a:	601a      	str	r2, [r3, #0]
   1280c:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   12810:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12814:	681a      	ldr	r2, [r3, #0]
   12816:	f24c 2358 	movw	r3, #49752	; 0xc258
   1281a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1281e:	601a      	str	r2, [r3, #0]
   12820:	f24c 2364 	movw	r3, #49764	; 0xc264
   12824:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12828:	2200      	movs	r2, #0
   1282a:	801a      	strh	r2, [r3, #0]
   1282c:	f24c 2368 	movw	r3, #49768	; 0xc268
   12830:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12834:	f04f 0200 	mov.w	r2, #0
   12838:	601a      	str	r2, [r3, #0]
   1283a:	f001 bed3 	b.w	145e4 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   1283e:	f24c 2350 	movw	r3, #49744	; 0xc250
   12842:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12846:	781b      	ldrb	r3, [r3, #0]
   12848:	2b01      	cmp	r3, #1
   1284a:	d169      	bne.n	12920 <auto_nav+0x4e0>
    {
	  nav_stage = 1;
   1284c:	f24c 2350 	movw	r3, #49744	; 0xc250
   12850:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12854:	2201      	movs	r2, #1
   12856:	701a      	strb	r2, [r3, #0]
          if (approaching(1)) NextStageFrom(1) else {
   12858:	2001      	movs	r0, #1
   1285a:	f001 fed1 	bl	14600 <approaching>
   1285e:	4603      	mov	r3, r0
   12860:	2b00      	cmp	r3, #0
   12862:	d034      	beq.n	128ce <auto_nav+0x48e>
   12864:	f24c 235c 	movw	r3, #49756	; 0xc25c
   12868:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1286c:	2201      	movs	r2, #1
   1286e:	701a      	strb	r2, [r3, #0]
   12870:	f24c 2350 	movw	r3, #49744	; 0xc250
   12874:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12878:	781b      	ldrb	r3, [r3, #0]
   1287a:	3301      	adds	r3, #1
   1287c:	b2da      	uxtb	r2, r3
   1287e:	f24c 2350 	movw	r3, #49744	; 0xc250
   12882:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12886:	701a      	strb	r2, [r3, #0]
   12888:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   1288c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12890:	681a      	ldr	r2, [r3, #0]
   12892:	f24c 2354 	movw	r3, #49748	; 0xc254
   12896:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1289a:	601a      	str	r2, [r3, #0]
   1289c:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   128a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128a4:	681a      	ldr	r2, [r3, #0]
   128a6:	f24c 2358 	movw	r3, #49752	; 0xc258
   128aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128ae:	601a      	str	r2, [r3, #0]
   128b0:	f24c 2364 	movw	r3, #49764	; 0xc264
   128b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128b8:	2200      	movs	r2, #0
   128ba:	801a      	strh	r2, [r3, #0]
   128bc:	f24c 2368 	movw	r3, #49768	; 0xc268
   128c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128c4:	f04f 0200 	mov.w	r2, #0
   128c8:	601a      	str	r2, [r3, #0]
   128ca:	f001 be8b 	b.w	145e4 <auto_nav+0x21a4>
            fly_to(1);
   128ce:	2001      	movs	r0, #1
   128d0:	f001 ffca 	bl	14868 <fly_to>
            auto_pitch = FALSE;
   128d4:	f64b 63df 	movw	r3, #48863	; 0xbedf
   128d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128dc:	2200      	movs	r2, #0
   128de:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   128e0:	f24c 237c 	movw	r3, #49788	; 0xc27c
   128e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128e8:	f04f 0200 	mov.w	r2, #0
   128ec:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   128ee:	f64b 63dd 	movw	r3, #48861	; 0xbedd
   128f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128f6:	2203      	movs	r2, #3
   128f8:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   128fa:	f240 4328 	movw	r3, #1064	; 0x428
   128fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12902:	695a      	ldr	r2, [r3, #20]
   12904:	f240 4324 	movw	r3, #1060	; 0x424
   12908:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1290c:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1290e:	f24c 2344 	movw	r3, #49732	; 0xc244
   12912:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12916:	f04f 0200 	mov.w	r2, #0
   1291a:	601a      	str	r2, [r3, #0]
          }
          return;
   1291c:	f001 be62 	b.w	145e4 <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12920:	f24c 2350 	movw	r3, #49744	; 0xc250
   12924:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12928:	781b      	ldrb	r3, [r3, #0]
   1292a:	2b02      	cmp	r3, #2
   1292c:	d169      	bne.n	12a02 <auto_nav+0x5c2>
     {
	  nav_stage = 2;
   1292e:	f24c 2350 	movw	r3, #49744	; 0xc250
   12932:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12936:	2202      	movs	r2, #2
   12938:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   1293a:	2004      	movs	r0, #4
   1293c:	f001 fe60 	bl	14600 <approaching>
   12940:	4603      	mov	r3, r0
   12942:	2b00      	cmp	r3, #0
   12944:	d034      	beq.n	129b0 <auto_nav+0x570>
   12946:	f24c 235c 	movw	r3, #49756	; 0xc25c
   1294a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1294e:	2204      	movs	r2, #4
   12950:	701a      	strb	r2, [r3, #0]
   12952:	f24c 2350 	movw	r3, #49744	; 0xc250
   12956:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1295a:	781b      	ldrb	r3, [r3, #0]
   1295c:	3301      	adds	r3, #1
   1295e:	b2da      	uxtb	r2, r3
   12960:	f24c 2350 	movw	r3, #49744	; 0xc250
   12964:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12968:	701a      	strb	r2, [r3, #0]
   1296a:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   1296e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12972:	681a      	ldr	r2, [r3, #0]
   12974:	f24c 2354 	movw	r3, #49748	; 0xc254
   12978:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1297c:	601a      	str	r2, [r3, #0]
   1297e:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   12982:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12986:	681a      	ldr	r2, [r3, #0]
   12988:	f24c 2358 	movw	r3, #49752	; 0xc258
   1298c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12990:	601a      	str	r2, [r3, #0]
   12992:	f24c 2364 	movw	r3, #49764	; 0xc264
   12996:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1299a:	2200      	movs	r2, #0
   1299c:	801a      	strh	r2, [r3, #0]
   1299e:	f24c 2368 	movw	r3, #49768	; 0xc268
   129a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129a6:	f04f 0200 	mov.w	r2, #0
   129aa:	601a      	str	r2, [r3, #0]
   129ac:	f001 be1a 	b.w	145e4 <auto_nav+0x21a4>
            fly_to(4);
   129b0:	2004      	movs	r0, #4
   129b2:	f001 ff59 	bl	14868 <fly_to>
            auto_pitch = FALSE;
   129b6:	f64b 63df 	movw	r3, #48863	; 0xbedf
   129ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129be:	2200      	movs	r2, #0
   129c0:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   129c2:	f24c 237c 	movw	r3, #49788	; 0xc27c
   129c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129ca:	f04f 0200 	mov.w	r2, #0
   129ce:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   129d0:	f64b 63dd 	movw	r3, #48861	; 0xbedd
   129d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129d8:	2203      	movs	r2, #3
   129da:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   129dc:	f240 4328 	movw	r3, #1064	; 0x428
   129e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   129e6:	f240 4324 	movw	r3, #1060	; 0x424
   129ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129ee:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   129f0:	f24c 2344 	movw	r3, #49732	; 0xc244
   129f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129f8:	f04f 0200 	mov.w	r2, #0
   129fc:	601a      	str	r2, [r3, #0]
          }
          return;
   129fe:	f001 bdf1 	b.w	145e4 <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12a02:	f24c 2350 	movw	r3, #49744	; 0xc250
   12a06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a0a:	781b      	ldrb	r3, [r3, #0]
   12a0c:	2b03      	cmp	r3, #3
   12a0e:	d106      	bne.n	12a1e <auto_nav+0x5de>
      {
	  nav_stage = 3;
   12a10:	f24c 2350 	movw	r3, #49744	; 0xc250
   12a14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a18:	2203      	movs	r2, #3
   12a1a:	701a      	strb	r2, [r3, #0]
          Goto(while_3)
   12a1c:	e6e0      	b.n	127e0 <auto_nav+0x3a0>
      }
      else if (nav_stage == 4)
   12a1e:	f24c 2350 	movw	r3, #49744	; 0xc250
   12a22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a26:	781b      	ldrb	r3, [r3, #0]
   12a28:	2b04      	cmp	r3, #4
   12a2a:	f041 85db 	bne.w	145e4 <auto_nav+0x21a4>
      {
        Label(endwhile_4)
	nav_stage = 4;
   12a2e:	f24c 2350 	movw	r3, #49744	; 0xc250
   12a32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a36:	2204      	movs	r2, #4
   12a38:	701a      	strb	r2, [r3, #0]
        NextBlock()
   12a3a:	f24c 2351 	movw	r3, #49745	; 0xc251
   12a3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a42:	781b      	ldrb	r3, [r3, #0]
   12a44:	3301      	adds	r3, #1
   12a46:	b2da      	uxtb	r2, r3
   12a48:	f24c 2351 	movw	r3, #49745	; 0xc251
   12a4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a50:	701a      	strb	r2, [r3, #0]
   12a52:	f24c 2350 	movw	r3, #49744	; 0xc250
   12a56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a5a:	2200      	movs	r2, #0
   12a5c:	701a      	strb	r2, [r3, #0]
   12a5e:	f24c 2366 	movw	r3, #49766	; 0xc266
   12a62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a66:	2200      	movs	r2, #0
   12a68:	801a      	strh	r2, [r3, #0]
   12a6a:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   12a6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a72:	681a      	ldr	r2, [r3, #0]
   12a74:	f24c 2354 	movw	r3, #49748	; 0xc254
   12a78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a7c:	601a      	str	r2, [r3, #0]
   12a7e:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   12a82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a86:	681a      	ldr	r2, [r3, #0]
   12a88:	f24c 2358 	movw	r3, #49752	; 0xc258
   12a8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a90:	601a      	str	r2, [r3, #0]
   12a92:	f24c 2364 	movw	r3, #49764	; 0xc264
   12a96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a9a:	2200      	movs	r2, #0
   12a9c:	801a      	strh	r2, [r3, #0]
   12a9e:	f24c 2368 	movw	r3, #49768	; 0xc268
   12aa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12aa6:	f04f 0200 	mov.w	r2, #0
   12aaa:	601a      	str	r2, [r3, #0]
   12aac:	f001 bd9a 	b.w	145e4 <auto_nav+0x21a4>
      }
      else { }
}
else if (nav_block == 2) // height
   12ab0:	f24c 2351 	movw	r3, #49745	; 0xc251
   12ab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ab8:	781b      	ldrb	r3, [r3, #0]
   12aba:	2b02      	cmp	r3, #2
   12abc:	f040 8392 	bne.w	131e4 <auto_nav+0xda4>
{
	nav_block = 2;
   12ac0:	f24c 2351 	movw	r3, #49745	; 0xc251
   12ac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ac8:	2202      	movs	r2, #2
   12aca:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(3) }
   12acc:	f64b 63e0 	movw	r3, #48864	; 0xbee0
   12ad0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ad4:	781b      	ldrb	r3, [r3, #0]
   12ad6:	2b00      	cmp	r3, #0
   12ad8:	d007      	beq.n	12aea <auto_nav+0x6aa>
   12ada:	f64b 63e0 	movw	r3, #48864	; 0xbee0
   12ade:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ae2:	2200      	movs	r2, #0
   12ae4:	701a      	strb	r2, [r3, #0]
   12ae6:	2301      	movs	r3, #1
   12ae8:	e000      	b.n	12aec <auto_nav+0x6ac>
   12aea:	2300      	movs	r3, #0
   12aec:	2b00      	cmp	r3, #0
   12aee:	d034      	beq.n	12b5a <auto_nav+0x71a>
   12af0:	f24c 2351 	movw	r3, #49745	; 0xc251
   12af4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12af8:	2203      	movs	r2, #3
   12afa:	701a      	strb	r2, [r3, #0]
   12afc:	f24c 2350 	movw	r3, #49744	; 0xc250
   12b00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b04:	2200      	movs	r2, #0
   12b06:	701a      	strb	r2, [r3, #0]
   12b08:	f24c 2366 	movw	r3, #49766	; 0xc266
   12b0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b10:	2200      	movs	r2, #0
   12b12:	801a      	strh	r2, [r3, #0]
   12b14:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   12b18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b1c:	681a      	ldr	r2, [r3, #0]
   12b1e:	f24c 2354 	movw	r3, #49748	; 0xc254
   12b22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b26:	601a      	str	r2, [r3, #0]
   12b28:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   12b2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b30:	681a      	ldr	r2, [r3, #0]
   12b32:	f24c 2358 	movw	r3, #49752	; 0xc258
   12b36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b3a:	601a      	str	r2, [r3, #0]
   12b3c:	f24c 2364 	movw	r3, #49764	; 0xc264
   12b40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b44:	2200      	movs	r2, #0
   12b46:	801a      	strh	r2, [r3, #0]
   12b48:	f24c 2368 	movw	r3, #49768	; 0xc268
   12b4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b50:	f04f 0200 	mov.w	r2, #0
   12b54:	601a      	str	r2, [r3, #0]
   12b56:	f001 bd45 	b.w	145e4 <auto_nav+0x21a4>
    
    if(nav_stage == 0)
   12b5a:	f24c 2350 	movw	r3, #49744	; 0xc250
   12b5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b62:	781b      	ldrb	r3, [r3, #0]
   12b64:	2b00      	cmp	r3, #0
   12b66:	d134      	bne.n	12bd2 <auto_nav+0x792>
    {
       Label(while_5)
       nav_stage = 0;
   12b68:	f24c 2350 	movw	r3, #49744	; 0xc250
   12b6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b70:	2200      	movs	r2, #0
   12b72:	701a      	strb	r2, [r3, #0]
       if (! (TRUE)) Goto(endwhile_6) else NextStage();
   12b74:	f24c 2350 	movw	r3, #49744	; 0xc250
   12b78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b7c:	781b      	ldrb	r3, [r3, #0]
   12b7e:	3301      	adds	r3, #1
   12b80:	b2da      	uxtb	r2, r3
   12b82:	f24c 2350 	movw	r3, #49744	; 0xc250
   12b86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b8a:	701a      	strb	r2, [r3, #0]
   12b8c:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   12b90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b94:	681a      	ldr	r2, [r3, #0]
   12b96:	f24c 2354 	movw	r3, #49748	; 0xc254
   12b9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b9e:	601a      	str	r2, [r3, #0]
   12ba0:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   12ba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ba8:	681a      	ldr	r2, [r3, #0]
   12baa:	f24c 2358 	movw	r3, #49752	; 0xc258
   12bae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bb2:	601a      	str	r2, [r3, #0]
   12bb4:	f24c 2364 	movw	r3, #49764	; 0xc264
   12bb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bbc:	2200      	movs	r2, #0
   12bbe:	801a      	strh	r2, [r3, #0]
   12bc0:	f24c 2368 	movw	r3, #49768	; 0xc268
   12bc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bc8:	f04f 0200 	mov.w	r2, #0
   12bcc:	601a      	str	r2, [r3, #0]
   12bce:	f001 bd09 	b.w	145e4 <auto_nav+0x21a4>
    }
    else if(nav_stage == 1)
   12bd2:	f24c 2350 	movw	r3, #49744	; 0xc250
   12bd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bda:	781b      	ldrb	r3, [r3, #0]
   12bdc:	2b01      	cmp	r3, #1
   12bde:	d169      	bne.n	12cb4 <auto_nav+0x874>
    {
         nav_stage =1;
   12be0:	f24c 2350 	movw	r3, #49744	; 0xc250
   12be4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12be8:	2201      	movs	r2, #1
   12bea:	701a      	strb	r2, [r3, #0]
          if (approaching(6)) NextStageFrom(6) else {
   12bec:	2006      	movs	r0, #6
   12bee:	f001 fd07 	bl	14600 <approaching>
   12bf2:	4603      	mov	r3, r0
   12bf4:	2b00      	cmp	r3, #0
   12bf6:	d034      	beq.n	12c62 <auto_nav+0x822>
   12bf8:	f24c 235c 	movw	r3, #49756	; 0xc25c
   12bfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c00:	2206      	movs	r2, #6
   12c02:	701a      	strb	r2, [r3, #0]
   12c04:	f24c 2350 	movw	r3, #49744	; 0xc250
   12c08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c0c:	781b      	ldrb	r3, [r3, #0]
   12c0e:	3301      	adds	r3, #1
   12c10:	b2da      	uxtb	r2, r3
   12c12:	f24c 2350 	movw	r3, #49744	; 0xc250
   12c16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c1a:	701a      	strb	r2, [r3, #0]
   12c1c:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   12c20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c24:	681a      	ldr	r2, [r3, #0]
   12c26:	f24c 2354 	movw	r3, #49748	; 0xc254
   12c2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c2e:	601a      	str	r2, [r3, #0]
   12c30:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   12c34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c38:	681a      	ldr	r2, [r3, #0]
   12c3a:	f24c 2358 	movw	r3, #49752	; 0xc258
   12c3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c42:	601a      	str	r2, [r3, #0]
   12c44:	f24c 2364 	movw	r3, #49764	; 0xc264
   12c48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c4c:	2200      	movs	r2, #0
   12c4e:	801a      	strh	r2, [r3, #0]
   12c50:	f24c 2368 	movw	r3, #49768	; 0xc268
   12c54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c58:	f04f 0200 	mov.w	r2, #0
   12c5c:	601a      	str	r2, [r3, #0]
   12c5e:	f001 bcc1 	b.w	145e4 <auto_nav+0x21a4>
            fly_to(6);
   12c62:	2006      	movs	r0, #6
   12c64:	f001 fe00 	bl	14868 <fly_to>
            auto_pitch = FALSE;
   12c68:	f64b 63df 	movw	r3, #48863	; 0xbedf
   12c6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c70:	2200      	movs	r2, #0
   12c72:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12c74:	f24c 237c 	movw	r3, #49788	; 0xc27c
   12c78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c7c:	f04f 0200 	mov.w	r2, #0
   12c80:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12c82:	f64b 63dd 	movw	r3, #48861	; 0xbedd
   12c86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c8a:	2203      	movs	r2, #3
   12c8c:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[6].a;
   12c8e:	f240 4328 	movw	r3, #1064	; 0x428
   12c92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   12c98:	f240 4324 	movw	r3, #1060	; 0x424
   12c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ca0:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12ca2:	f24c 2344 	movw	r3, #49732	; 0xc244
   12ca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12caa:	f04f 0200 	mov.w	r2, #0
   12cae:	601a      	str	r2, [r3, #0]
          }
          return;
   12cb0:	f001 bc98 	b.w	145e4 <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12cb4:	f24c 2350 	movw	r3, #49744	; 0xc250
   12cb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cbc:	781b      	ldrb	r3, [r3, #0]
   12cbe:	2b02      	cmp	r3, #2
   12cc0:	d169      	bne.n	12d96 <auto_nav+0x956>
     {
         nav_stage =2; 
   12cc2:	f24c 2350 	movw	r3, #49744	; 0xc250
   12cc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cca:	2202      	movs	r2, #2
   12ccc:	701a      	strb	r2, [r3, #0]
         if (approaching(1)) NextStageFrom(1) else {
   12cce:	2001      	movs	r0, #1
   12cd0:	f001 fc96 	bl	14600 <approaching>
   12cd4:	4603      	mov	r3, r0
   12cd6:	2b00      	cmp	r3, #0
   12cd8:	d034      	beq.n	12d44 <auto_nav+0x904>
   12cda:	f24c 235c 	movw	r3, #49756	; 0xc25c
   12cde:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ce2:	2201      	movs	r2, #1
   12ce4:	701a      	strb	r2, [r3, #0]
   12ce6:	f24c 2350 	movw	r3, #49744	; 0xc250
   12cea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cee:	781b      	ldrb	r3, [r3, #0]
   12cf0:	3301      	adds	r3, #1
   12cf2:	b2da      	uxtb	r2, r3
   12cf4:	f24c 2350 	movw	r3, #49744	; 0xc250
   12cf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cfc:	701a      	strb	r2, [r3, #0]
   12cfe:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   12d02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d06:	681a      	ldr	r2, [r3, #0]
   12d08:	f24c 2354 	movw	r3, #49748	; 0xc254
   12d0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d10:	601a      	str	r2, [r3, #0]
   12d12:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   12d16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d1a:	681a      	ldr	r2, [r3, #0]
   12d1c:	f24c 2358 	movw	r3, #49752	; 0xc258
   12d20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d24:	601a      	str	r2, [r3, #0]
   12d26:	f24c 2364 	movw	r3, #49764	; 0xc264
   12d2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d2e:	2200      	movs	r2, #0
   12d30:	801a      	strh	r2, [r3, #0]
   12d32:	f24c 2368 	movw	r3, #49768	; 0xc268
   12d36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d3a:	f04f 0200 	mov.w	r2, #0
   12d3e:	601a      	str	r2, [r3, #0]
   12d40:	f001 bc50 	b.w	145e4 <auto_nav+0x21a4>
            fly_to(1);
   12d44:	2001      	movs	r0, #1
   12d46:	f001 fd8f 	bl	14868 <fly_to>
            auto_pitch = FALSE;
   12d4a:	f64b 63df 	movw	r3, #48863	; 0xbedf
   12d4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d52:	2200      	movs	r2, #0
   12d54:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12d56:	f24c 237c 	movw	r3, #49788	; 0xc27c
   12d5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d5e:	f04f 0200 	mov.w	r2, #0
   12d62:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12d64:	f64b 63dd 	movw	r3, #48861	; 0xbedd
   12d68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d6c:	2203      	movs	r2, #3
   12d6e:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12d70:	f240 4328 	movw	r3, #1064	; 0x428
   12d74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d78:	695a      	ldr	r2, [r3, #20]
   12d7a:	f240 4324 	movw	r3, #1060	; 0x424
   12d7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d82:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12d84:	f24c 2344 	movw	r3, #49732	; 0xc244
   12d88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d8c:	f04f 0200 	mov.w	r2, #0
   12d90:	601a      	str	r2, [r3, #0]
          }
          return;
   12d92:	f001 bc27 	b.w	145e4 <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12d96:	f24c 2350 	movw	r3, #49744	; 0xc250
   12d9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d9e:	781b      	ldrb	r3, [r3, #0]
   12da0:	2b03      	cmp	r3, #3
   12da2:	d16f      	bne.n	12e84 <auto_nav+0xa44>
      {
	   nav_stage = 3;         
   12da4:	f24c 2350 	movw	r3, #49744	; 0xc250
   12da8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dac:	2203      	movs	r2, #3
   12dae:	701a      	strb	r2, [r3, #0]
           if (approaching(2)) NextStageFrom(2) else {
   12db0:	2002      	movs	r0, #2
   12db2:	f001 fc25 	bl	14600 <approaching>
   12db6:	4603      	mov	r3, r0
   12db8:	2b00      	cmp	r3, #0
   12dba:	d034      	beq.n	12e26 <auto_nav+0x9e6>
   12dbc:	f24c 235c 	movw	r3, #49756	; 0xc25c
   12dc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dc4:	2202      	movs	r2, #2
   12dc6:	701a      	strb	r2, [r3, #0]
   12dc8:	f24c 2350 	movw	r3, #49744	; 0xc250
   12dcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dd0:	781b      	ldrb	r3, [r3, #0]
   12dd2:	3301      	adds	r3, #1
   12dd4:	b2da      	uxtb	r2, r3
   12dd6:	f24c 2350 	movw	r3, #49744	; 0xc250
   12dda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dde:	701a      	strb	r2, [r3, #0]
   12de0:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   12de4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12de8:	681a      	ldr	r2, [r3, #0]
   12dea:	f24c 2354 	movw	r3, #49748	; 0xc254
   12dee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12df2:	601a      	str	r2, [r3, #0]
   12df4:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   12df8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dfc:	681a      	ldr	r2, [r3, #0]
   12dfe:	f24c 2358 	movw	r3, #49752	; 0xc258
   12e02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e06:	601a      	str	r2, [r3, #0]
   12e08:	f24c 2364 	movw	r3, #49764	; 0xc264
   12e0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e10:	2200      	movs	r2, #0
   12e12:	801a      	strh	r2, [r3, #0]
   12e14:	f24c 2368 	movw	r3, #49768	; 0xc268
   12e18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e1c:	f04f 0200 	mov.w	r2, #0
   12e20:	601a      	str	r2, [r3, #0]
   12e22:	f001 bbdf 	b.w	145e4 <auto_nav+0x21a4>
            route_to(last_wp, 2);
   12e26:	f24c 235c 	movw	r3, #49756	; 0xc25c
   12e2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e2e:	781b      	ldrb	r3, [r3, #0]
   12e30:	4618      	mov	r0, r3
   12e32:	2102      	movs	r1, #2
   12e34:	f001 fd3a 	bl	148ac <route_to>
            auto_pitch = FALSE;
   12e38:	f64b 63df 	movw	r3, #48863	; 0xbedf
   12e3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e40:	2200      	movs	r2, #0
   12e42:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12e44:	f24c 237c 	movw	r3, #49788	; 0xc27c
   12e48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e4c:	f04f 0200 	mov.w	r2, #0
   12e50:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12e52:	f64b 63dd 	movw	r3, #48861	; 0xbedd
   12e56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e5a:	2203      	movs	r2, #3
   12e5c:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[2].a;
   12e5e:	f240 4328 	movw	r3, #1064	; 0x428
   12e62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e66:	6a1a      	ldr	r2, [r3, #32]
   12e68:	f240 4324 	movw	r3, #1060	; 0x424
   12e6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e70:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12e72:	f24c 2344 	movw	r3, #49732	; 0xc244
   12e76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e7a:	f04f 0200 	mov.w	r2, #0
   12e7e:	601a      	str	r2, [r3, #0]
          }
          return;
   12e80:	f001 bbb0 	b.w	145e4 <auto_nav+0x21a4>
       }
       else if (nav_stage == 4)
   12e84:	f24c 2350 	movw	r3, #49744	; 0xc250
   12e88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e8c:	781b      	ldrb	r3, [r3, #0]
   12e8e:	2b04      	cmp	r3, #4
   12e90:	d169      	bne.n	12f66 <auto_nav+0xb26>
       {
          nav_stage = 4;
   12e92:	f24c 2350 	movw	r3, #49744	; 0xc250
   12e96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e9a:	2204      	movs	r2, #4
   12e9c:	701a      	strb	r2, [r3, #0]
          if (approaching(3)) NextStageFrom(3) else {
   12e9e:	2003      	movs	r0, #3
   12ea0:	f001 fbae 	bl	14600 <approaching>
   12ea4:	4603      	mov	r3, r0
   12ea6:	2b00      	cmp	r3, #0
   12ea8:	d034      	beq.n	12f14 <auto_nav+0xad4>
   12eaa:	f24c 235c 	movw	r3, #49756	; 0xc25c
   12eae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12eb2:	2203      	movs	r2, #3
   12eb4:	701a      	strb	r2, [r3, #0]
   12eb6:	f24c 2350 	movw	r3, #49744	; 0xc250
   12eba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ebe:	781b      	ldrb	r3, [r3, #0]
   12ec0:	3301      	adds	r3, #1
   12ec2:	b2da      	uxtb	r2, r3
   12ec4:	f24c 2350 	movw	r3, #49744	; 0xc250
   12ec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ecc:	701a      	strb	r2, [r3, #0]
   12ece:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   12ed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ed6:	681a      	ldr	r2, [r3, #0]
   12ed8:	f24c 2354 	movw	r3, #49748	; 0xc254
   12edc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ee0:	601a      	str	r2, [r3, #0]
   12ee2:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   12ee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12eea:	681a      	ldr	r2, [r3, #0]
   12eec:	f24c 2358 	movw	r3, #49752	; 0xc258
   12ef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ef4:	601a      	str	r2, [r3, #0]
   12ef6:	f24c 2364 	movw	r3, #49764	; 0xc264
   12efa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12efe:	2200      	movs	r2, #0
   12f00:	801a      	strh	r2, [r3, #0]
   12f02:	f24c 2368 	movw	r3, #49768	; 0xc268
   12f06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f0a:	f04f 0200 	mov.w	r2, #0
   12f0e:	601a      	str	r2, [r3, #0]
   12f10:	f001 bb68 	b.w	145e4 <auto_nav+0x21a4>
            fly_to(3);
   12f14:	2003      	movs	r0, #3
   12f16:	f001 fca7 	bl	14868 <fly_to>
            auto_pitch = FALSE;
   12f1a:	f64b 63df 	movw	r3, #48863	; 0xbedf
   12f1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f22:	2200      	movs	r2, #0
   12f24:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12f26:	f24c 237c 	movw	r3, #49788	; 0xc27c
   12f2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f2e:	f04f 0200 	mov.w	r2, #0
   12f32:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12f34:	f64b 63dd 	movw	r3, #48861	; 0xbedd
   12f38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f3c:	2203      	movs	r2, #3
   12f3e:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[3].a;
   12f40:	f240 4328 	movw	r3, #1064	; 0x428
   12f44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   12f4a:	f240 4324 	movw	r3, #1060	; 0x424
   12f4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f52:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12f54:	f24c 2344 	movw	r3, #49732	; 0xc244
   12f58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f5c:	f04f 0200 	mov.w	r2, #0
   12f60:	601a      	str	r2, [r3, #0]
          }
          return;
   12f62:	f001 bb3f 	b.w	145e4 <auto_nav+0x21a4>
       }
       else if (nav_stage == 5)
   12f66:	f24c 2350 	movw	r3, #49744	; 0xc250
   12f6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f6e:	781b      	ldrb	r3, [r3, #0]
   12f70:	2b05      	cmp	r3, #5
   12f72:	d169      	bne.n	13048 <auto_nav+0xc08>
       {
          nav_stage =5;
   12f74:	f24c 2350 	movw	r3, #49744	; 0xc250
   12f78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f7c:	2205      	movs	r2, #5
   12f7e:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   12f80:	2004      	movs	r0, #4
   12f82:	f001 fb3d 	bl	14600 <approaching>
   12f86:	4603      	mov	r3, r0
   12f88:	2b00      	cmp	r3, #0
   12f8a:	d034      	beq.n	12ff6 <auto_nav+0xbb6>
   12f8c:	f24c 235c 	movw	r3, #49756	; 0xc25c
   12f90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f94:	2204      	movs	r2, #4
   12f96:	701a      	strb	r2, [r3, #0]
   12f98:	f24c 2350 	movw	r3, #49744	; 0xc250
   12f9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fa0:	781b      	ldrb	r3, [r3, #0]
   12fa2:	3301      	adds	r3, #1
   12fa4:	b2da      	uxtb	r2, r3
   12fa6:	f24c 2350 	movw	r3, #49744	; 0xc250
   12faa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fae:	701a      	strb	r2, [r3, #0]
   12fb0:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   12fb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fb8:	681a      	ldr	r2, [r3, #0]
   12fba:	f24c 2354 	movw	r3, #49748	; 0xc254
   12fbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fc2:	601a      	str	r2, [r3, #0]
   12fc4:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   12fc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fcc:	681a      	ldr	r2, [r3, #0]
   12fce:	f24c 2358 	movw	r3, #49752	; 0xc258
   12fd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fd6:	601a      	str	r2, [r3, #0]
   12fd8:	f24c 2364 	movw	r3, #49764	; 0xc264
   12fdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fe0:	2200      	movs	r2, #0
   12fe2:	801a      	strh	r2, [r3, #0]
   12fe4:	f24c 2368 	movw	r3, #49768	; 0xc268
   12fe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fec:	f04f 0200 	mov.w	r2, #0
   12ff0:	601a      	str	r2, [r3, #0]
   12ff2:	f001 baf7 	b.w	145e4 <auto_nav+0x21a4>
            fly_to(4);
   12ff6:	2004      	movs	r0, #4
   12ff8:	f001 fc36 	bl	14868 <fly_to>
            auto_pitch = FALSE;
   12ffc:	f64b 63df 	movw	r3, #48863	; 0xbedf
   13000:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13004:	2200      	movs	r2, #0
   13006:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   13008:	f24c 237c 	movw	r3, #49788	; 0xc27c
   1300c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13010:	f04f 0200 	mov.w	r2, #0
   13014:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13016:	f64b 63dd 	movw	r3, #48861	; 0xbedd
   1301a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1301e:	2203      	movs	r2, #3
   13020:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   13022:	f240 4328 	movw	r3, #1064	; 0x428
   13026:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1302a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1302c:	f240 4324 	movw	r3, #1060	; 0x424
   13030:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13034:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   13036:	f24c 2344 	movw	r3, #49732	; 0xc244
   1303a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1303e:	f04f 0200 	mov.w	r2, #0
   13042:	601a      	str	r2, [r3, #0]
          }
          return;
   13044:	f001 bace 	b.w	145e4 <auto_nav+0x21a4>
       }
       else if (nav_stage == 6)
   13048:	f24c 2350 	movw	r3, #49744	; 0xc250
   1304c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13050:	781b      	ldrb	r3, [r3, #0]
   13052:	2b06      	cmp	r3, #6
   13054:	d16f      	bne.n	13136 <auto_nav+0xcf6>
       {
          nav_stage =6;
   13056:	f24c 2350 	movw	r3, #49744	; 0xc250
   1305a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1305e:	2206      	movs	r2, #6
   13060:	701a      	strb	r2, [r3, #0]
          if (approaching(5)) NextStageFrom(5) else {
   13062:	2005      	movs	r0, #5
   13064:	f001 facc 	bl	14600 <approaching>
   13068:	4603      	mov	r3, r0
   1306a:	2b00      	cmp	r3, #0
   1306c:	d034      	beq.n	130d8 <auto_nav+0xc98>
   1306e:	f24c 235c 	movw	r3, #49756	; 0xc25c
   13072:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13076:	2205      	movs	r2, #5
   13078:	701a      	strb	r2, [r3, #0]
   1307a:	f24c 2350 	movw	r3, #49744	; 0xc250
   1307e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13082:	781b      	ldrb	r3, [r3, #0]
   13084:	3301      	adds	r3, #1
   13086:	b2da      	uxtb	r2, r3
   13088:	f24c 2350 	movw	r3, #49744	; 0xc250
   1308c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13090:	701a      	strb	r2, [r3, #0]
   13092:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   13096:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1309a:	681a      	ldr	r2, [r3, #0]
   1309c:	f24c 2354 	movw	r3, #49748	; 0xc254
   130a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130a4:	601a      	str	r2, [r3, #0]
   130a6:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   130aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130ae:	681a      	ldr	r2, [r3, #0]
   130b0:	f24c 2358 	movw	r3, #49752	; 0xc258
   130b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130b8:	601a      	str	r2, [r3, #0]
   130ba:	f24c 2364 	movw	r3, #49764	; 0xc264
   130be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130c2:	2200      	movs	r2, #0
   130c4:	801a      	strh	r2, [r3, #0]
   130c6:	f24c 2368 	movw	r3, #49768	; 0xc268
   130ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130ce:	f04f 0200 	mov.w	r2, #0
   130d2:	601a      	str	r2, [r3, #0]
   130d4:	f001 ba86 	b.w	145e4 <auto_nav+0x21a4>
            route_to(last_wp, 5);
   130d8:	f24c 235c 	movw	r3, #49756	; 0xc25c
   130dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130e0:	781b      	ldrb	r3, [r3, #0]
   130e2:	4618      	mov	r0, r3
   130e4:	2105      	movs	r1, #5
   130e6:	f001 fbe1 	bl	148ac <route_to>
            auto_pitch = FALSE;
   130ea:	f64b 63df 	movw	r3, #48863	; 0xbedf
   130ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130f2:	2200      	movs	r2, #0
   130f4:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   130f6:	f24c 237c 	movw	r3, #49788	; 0xc27c
   130fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130fe:	f04f 0200 	mov.w	r2, #0
   13102:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13104:	f64b 63dd 	movw	r3, #48861	; 0xbedd
   13108:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1310c:	2203      	movs	r2, #3
   1310e:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[5].a;
   13110:	f240 4328 	movw	r3, #1064	; 0x428
   13114:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13118:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1311a:	f240 4324 	movw	r3, #1060	; 0x424
   1311e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13122:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   13124:	f24c 2344 	movw	r3, #49732	; 0xc244
   13128:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1312c:	f04f 0200 	mov.w	r2, #0
   13130:	601a      	str	r2, [r3, #0]
          }
          return;
   13132:	f001 ba57 	b.w	145e4 <auto_nav+0x21a4>
       }
       else if (nav_stage == 7)
   13136:	f24c 2350 	movw	r3, #49744	; 0xc250
   1313a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1313e:	781b      	ldrb	r3, [r3, #0]
   13140:	2b07      	cmp	r3, #7
   13142:	d106      	bne.n	13152 <auto_nav+0xd12>
       {
	   nav_stage =7;
   13144:	f24c 2350 	movw	r3, #49744	; 0xc250
   13148:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1314c:	2207      	movs	r2, #7
   1314e:	701a      	strb	r2, [r3, #0]
	   Goto(while_5)
   13150:	e50a      	b.n	12b68 <auto_nav+0x728>
	}
       
       else if (nav_stage == 8){
   13152:	f24c 2350 	movw	r3, #49744	; 0xc250
   13156:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1315a:	781b      	ldrb	r3, [r3, #0]
   1315c:	2b08      	cmp	r3, #8
   1315e:	f041 8241 	bne.w	145e4 <auto_nav+0x21a4>
	  Label(endwhile_6)
	  nav_stage =8;
   13162:	f24c 2350 	movw	r3, #49744	; 0xc250
   13166:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1316a:	2208      	movs	r2, #8
   1316c:	701a      	strb	r2, [r3, #0]
          NextBlock();
   1316e:	f24c 2351 	movw	r3, #49745	; 0xc251
   13172:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13176:	781b      	ldrb	r3, [r3, #0]
   13178:	3301      	adds	r3, #1
   1317a:	b2da      	uxtb	r2, r3
   1317c:	f24c 2351 	movw	r3, #49745	; 0xc251
   13180:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13184:	701a      	strb	r2, [r3, #0]
   13186:	f24c 2350 	movw	r3, #49744	; 0xc250
   1318a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1318e:	2200      	movs	r2, #0
   13190:	701a      	strb	r2, [r3, #0]
   13192:	f24c 2366 	movw	r3, #49766	; 0xc266
   13196:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1319a:	2200      	movs	r2, #0
   1319c:	801a      	strh	r2, [r3, #0]
   1319e:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   131a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131a6:	681a      	ldr	r2, [r3, #0]
   131a8:	f24c 2354 	movw	r3, #49748	; 0xc254
   131ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131b0:	601a      	str	r2, [r3, #0]
   131b2:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   131b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131ba:	681a      	ldr	r2, [r3, #0]
   131bc:	f24c 2358 	movw	r3, #49752	; 0xc258
   131c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131c4:	601a      	str	r2, [r3, #0]
   131c6:	f24c 2364 	movw	r3, #49764	; 0xc264
   131ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131ce:	2200      	movs	r2, #0
   131d0:	801a      	strh	r2, [r3, #0]
   131d2:	f24c 2368 	movw	r3, #49768	; 0xc268
   131d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131da:	f04f 0200 	mov.w	r2, #0
   131de:	601a      	str	r2, [r3, #0]
   131e0:	f001 ba00 	b.w	145e4 <auto_nav+0x21a4>
       }
       else { }
}
else if (nav_block == 3) // xyz
   131e4:	f24c 2351 	movw	r3, #49745	; 0xc251
   131e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131ec:	781b      	ldrb	r3, [r3, #0]
   131ee:	2b03      	cmp	r3, #3
   131f0:	f040 8388 	bne.w	13904 <auto_nav+0x14c4>
{
    nav_block = 3;
   131f4:	f24c 2351 	movw	r3, #49745	; 0xc251
   131f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131fc:	2203      	movs	r2, #3
   131fe:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(4) }
   13200:	f64b 63e0 	movw	r3, #48864	; 0xbee0
   13204:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13208:	781b      	ldrb	r3, [r3, #0]
   1320a:	2b00      	cmp	r3, #0
   1320c:	d007      	beq.n	1321e <auto_nav+0xdde>
   1320e:	f64b 63e0 	movw	r3, #48864	; 0xbee0
   13212:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13216:	2200      	movs	r2, #0
   13218:	701a      	strb	r2, [r3, #0]
   1321a:	2301      	movs	r3, #1
   1321c:	e000      	b.n	13220 <auto_nav+0xde0>
   1321e:	2300      	movs	r3, #0
   13220:	2b00      	cmp	r3, #0
   13222:	d034      	beq.n	1328e <auto_nav+0xe4e>
   13224:	f24c 2351 	movw	r3, #49745	; 0xc251
   13228:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1322c:	2204      	movs	r2, #4
   1322e:	701a      	strb	r2, [r3, #0]
   13230:	f24c 2350 	movw	r3, #49744	; 0xc250
   13234:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13238:	2200      	movs	r2, #0
   1323a:	701a      	strb	r2, [r3, #0]
   1323c:	f24c 2366 	movw	r3, #49766	; 0xc266
   13240:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13244:	2200      	movs	r2, #0
   13246:	801a      	strh	r2, [r3, #0]
   13248:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   1324c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13250:	681a      	ldr	r2, [r3, #0]
   13252:	f24c 2354 	movw	r3, #49748	; 0xc254
   13256:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1325a:	601a      	str	r2, [r3, #0]
   1325c:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   13260:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13264:	681a      	ldr	r2, [r3, #0]
   13266:	f24c 2358 	movw	r3, #49752	; 0xc258
   1326a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1326e:	601a      	str	r2, [r3, #0]
   13270:	f24c 2364 	movw	r3, #49764	; 0xc264
   13274:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13278:	2200      	movs	r2, #0
   1327a:	801a      	strh	r2, [r3, #0]
   1327c:	f24c 2368 	movw	r3, #49768	; 0xc268
   13280:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13284:	f04f 0200 	mov.w	r2, #0
   13288:	601a      	str	r2, [r3, #0]
   1328a:	f001 b9ab 	b.w	145e4 <auto_nav+0x21a4>
    if(nav_stage == 0)
   1328e:	f24c 2350 	movw	r3, #49744	; 0xc250
   13292:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13296:	781b      	ldrb	r3, [r3, #0]
   13298:	2b00      	cmp	r3, #0
   1329a:	f040 82ea 	bne.w	13872 <auto_nav+0x1432>
    {
        nav_stage = 0;
   1329e:	f24c 2350 	movw	r3, #49744	; 0xc250
   132a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132a6:	2200      	movs	r2, #0
   132a8:	701a      	strb	r2, [r3, #0]
        Goto3D(50)
   132aa:	f64b 63dc 	movw	r3, #48860	; 0xbedc
   132ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132b2:	781b      	ldrb	r3, [r3, #0]
   132b4:	2b02      	cmp	r3, #2
   132b6:	f040 81a5 	bne.w	13604 <auto_nav+0x11c4>
   132ba:	f24c 0300 	movw	r3, #49152	; 0xc000
   132be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132c2:	88db      	ldrh	r3, [r3, #6]
   132c4:	84fb      	strh	r3, [r7, #38]	; 0x26
   132c6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   132ca:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   132ce:	dc04      	bgt.n	132da <auto_nav+0xe9a>
   132d0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   132d4:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   132d8:	da7e      	bge.n	133d8 <auto_nav+0xf98>
   132da:	f24c 239c 	movw	r3, #49820	; 0xc29c
   132de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132e2:	681b      	ldr	r3, [r3, #0]
   132e4:	4618      	mov	r0, r3
   132e6:	f004 fb7d 	bl	179e4 <__aeabi_f2d>
   132ea:	4604      	mov	r4, r0
   132ec:	460d      	mov	r5, r1
   132ee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   132f2:	4618      	mov	r0, r3
   132f4:	f004 ffb6 	bl	18264 <__aeabi_i2f>
   132f8:	4603      	mov	r3, r0
   132fa:	4618      	mov	r0, r3
   132fc:	f04f 0100 	mov.w	r1, #0
   13300:	f2c4 6116 	movt	r1, #17942	; 0x4616
   13304:	f005 f8b6 	bl	18474 <__aeabi_fdiv>
   13308:	4603      	mov	r3, r0
   1330a:	4618      	mov	r0, r3
   1330c:	f004 fb6a 	bl	179e4 <__aeabi_f2d>
   13310:	4602      	mov	r2, r0
   13312:	460b      	mov	r3, r1
   13314:	4610      	mov	r0, r2
   13316:	4619      	mov	r1, r3
   13318:	f04f 0200 	mov.w	r2, #0
   1331c:	f04f 0300 	mov.w	r3, #0
   13320:	f2cc 0334 	movt	r3, #49204	; 0xc034
   13324:	f004 fbb2 	bl	17a8c <__aeabi_dmul>
   13328:	4602      	mov	r2, r0
   1332a:	460b      	mov	r3, r1
   1332c:	4610      	mov	r0, r2
   1332e:	4619      	mov	r1, r3
   13330:	f04f 0200 	mov.w	r2, #0
   13334:	f04f 0300 	mov.w	r3, #0
   13338:	f004 f9f6 	bl	17728 <__adddf3>
   1333c:	4602      	mov	r2, r0
   1333e:	460b      	mov	r3, r1
   13340:	4620      	mov	r0, r4
   13342:	4629      	mov	r1, r5
   13344:	f004 f9f0 	bl	17728 <__adddf3>
   13348:	4602      	mov	r2, r0
   1334a:	460b      	mov	r3, r1
   1334c:	4610      	mov	r0, r2
   1334e:	4619      	mov	r1, r3
   13350:	f004 fe7e 	bl	18050 <__aeabi_d2f>
   13354:	4602      	mov	r2, r0
   13356:	f24c 239c 	movw	r3, #49820	; 0xc29c
   1335a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1335e:	601a      	str	r2, [r3, #0]
   13360:	f24c 239c 	movw	r3, #49820	; 0xc29c
   13364:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13368:	681b      	ldr	r3, [r3, #0]
   1336a:	4618      	mov	r0, r3
   1336c:	f04f 0100 	mov.w	r1, #0
   13370:	f2c4 317a 	movt	r1, #17274	; 0x437a
   13374:	f005 f972 	bl	1865c <__aeabi_fcmple>
   13378:	4603      	mov	r3, r0
   1337a:	2b00      	cmp	r3, #0
   1337c:	d005      	beq.n	1338a <auto_nav+0xf4a>
   1337e:	f24c 239c 	movw	r3, #49820	; 0xc29c
   13382:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13386:	681a      	ldr	r2, [r3, #0]
   13388:	e003      	b.n	13392 <auto_nav+0xf52>
   1338a:	f04f 0200 	mov.w	r2, #0
   1338e:	f2c4 327a 	movt	r2, #17274	; 0x437a
   13392:	f24c 239c 	movw	r3, #49820	; 0xc29c
   13396:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1339a:	601a      	str	r2, [r3, #0]
   1339c:	f24c 239c 	movw	r3, #49820	; 0xc29c
   133a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133a4:	681b      	ldr	r3, [r3, #0]
   133a6:	4618      	mov	r0, r3
   133a8:	f04f 0100 	mov.w	r1, #0
   133ac:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   133b0:	f005 f95e 	bl	18670 <__aeabi_fcmpge>
   133b4:	4603      	mov	r3, r0
   133b6:	2b00      	cmp	r3, #0
   133b8:	d005      	beq.n	133c6 <auto_nav+0xf86>
   133ba:	f24c 239c 	movw	r3, #49820	; 0xc29c
   133be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133c2:	681a      	ldr	r2, [r3, #0]
   133c4:	e003      	b.n	133ce <auto_nav+0xf8e>
   133c6:	f04f 0200 	mov.w	r2, #0
   133ca:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   133ce:	f24c 239c 	movw	r3, #49820	; 0xc29c
   133d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133d6:	601a      	str	r2, [r3, #0]
   133d8:	f24c 0300 	movw	r3, #49152	; 0xc000
   133dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133e0:	889b      	ldrh	r3, [r3, #4]
   133e2:	84bb      	strh	r3, [r7, #36]	; 0x24
   133e4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   133e8:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   133ec:	dc04      	bgt.n	133f8 <auto_nav+0xfb8>
   133ee:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   133f2:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   133f6:	da7e      	bge.n	134f6 <auto_nav+0x10b6>
   133f8:	f24c 23a0 	movw	r3, #49824	; 0xc2a0
   133fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13400:	681b      	ldr	r3, [r3, #0]
   13402:	4618      	mov	r0, r3
   13404:	f004 faee 	bl	179e4 <__aeabi_f2d>
   13408:	4604      	mov	r4, r0
   1340a:	460d      	mov	r5, r1
   1340c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   13410:	4618      	mov	r0, r3
   13412:	f004 ff27 	bl	18264 <__aeabi_i2f>
   13416:	4603      	mov	r3, r0
   13418:	4618      	mov	r0, r3
   1341a:	f04f 0100 	mov.w	r1, #0
   1341e:	f2c4 6116 	movt	r1, #17942	; 0x4616
   13422:	f005 f827 	bl	18474 <__aeabi_fdiv>
   13426:	4603      	mov	r3, r0
   13428:	4618      	mov	r0, r3
   1342a:	f004 fadb 	bl	179e4 <__aeabi_f2d>
   1342e:	4602      	mov	r2, r0
   13430:	460b      	mov	r3, r1
   13432:	4610      	mov	r0, r2
   13434:	4619      	mov	r1, r3
   13436:	f04f 0200 	mov.w	r2, #0
   1343a:	f04f 0300 	mov.w	r3, #0
   1343e:	f2cc 0334 	movt	r3, #49204	; 0xc034
   13442:	f004 fb23 	bl	17a8c <__aeabi_dmul>
   13446:	4602      	mov	r2, r0
   13448:	460b      	mov	r3, r1
   1344a:	4610      	mov	r0, r2
   1344c:	4619      	mov	r1, r3
   1344e:	f04f 0200 	mov.w	r2, #0
   13452:	f04f 0300 	mov.w	r3, #0
   13456:	f004 f967 	bl	17728 <__adddf3>
   1345a:	4602      	mov	r2, r0
   1345c:	460b      	mov	r3, r1
   1345e:	4620      	mov	r0, r4
   13460:	4629      	mov	r1, r5
   13462:	f004 f961 	bl	17728 <__adddf3>
   13466:	4602      	mov	r2, r0
   13468:	460b      	mov	r3, r1
   1346a:	4610      	mov	r0, r2
   1346c:	4619      	mov	r1, r3
   1346e:	f004 fdef 	bl	18050 <__aeabi_d2f>
   13472:	4602      	mov	r2, r0
   13474:	f24c 23a0 	movw	r3, #49824	; 0xc2a0
   13478:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1347c:	601a      	str	r2, [r3, #0]
   1347e:	f24c 23a0 	movw	r3, #49824	; 0xc2a0
   13482:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13486:	681b      	ldr	r3, [r3, #0]
   13488:	4618      	mov	r0, r3
   1348a:	f04f 0100 	mov.w	r1, #0
   1348e:	f2c4 317a 	movt	r1, #17274	; 0x437a
   13492:	f005 f8e3 	bl	1865c <__aeabi_fcmple>
   13496:	4603      	mov	r3, r0
   13498:	2b00      	cmp	r3, #0
   1349a:	d005      	beq.n	134a8 <auto_nav+0x1068>
   1349c:	f24c 23a0 	movw	r3, #49824	; 0xc2a0
   134a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134a4:	681a      	ldr	r2, [r3, #0]
   134a6:	e003      	b.n	134b0 <auto_nav+0x1070>
   134a8:	f04f 0200 	mov.w	r2, #0
   134ac:	f2c4 327a 	movt	r2, #17274	; 0x437a
   134b0:	f24c 23a0 	movw	r3, #49824	; 0xc2a0
   134b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134b8:	601a      	str	r2, [r3, #0]
   134ba:	f24c 23a0 	movw	r3, #49824	; 0xc2a0
   134be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134c2:	681b      	ldr	r3, [r3, #0]
   134c4:	4618      	mov	r0, r3
   134c6:	f04f 0100 	mov.w	r1, #0
   134ca:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   134ce:	f005 f8cf 	bl	18670 <__aeabi_fcmpge>
   134d2:	4603      	mov	r3, r0
   134d4:	2b00      	cmp	r3, #0
   134d6:	d005      	beq.n	134e4 <auto_nav+0x10a4>
   134d8:	f24c 23a0 	movw	r3, #49824	; 0xc2a0
   134dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134e0:	681a      	ldr	r2, [r3, #0]
   134e2:	e003      	b.n	134ec <auto_nav+0x10ac>
   134e4:	f04f 0200 	mov.w	r2, #0
   134e8:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   134ec:	f24c 23a0 	movw	r3, #49824	; 0xc2a0
   134f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134f4:	601a      	str	r2, [r3, #0]
   134f6:	f64b 63dd 	movw	r3, #48861	; 0xbedd
   134fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134fe:	2203      	movs	r2, #3
   13500:	701a      	strb	r2, [r3, #0]
   13502:	f24c 0300 	movw	r3, #49152	; 0xc000
   13506:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1350a:	885b      	ldrh	r3, [r3, #2]
   1350c:	847b      	strh	r3, [r7, #34]	; 0x22
   1350e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   13512:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   13516:	dc04      	bgt.n	13522 <auto_nav+0x10e2>
   13518:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   1351c:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   13520:	da70      	bge.n	13604 <auto_nav+0x11c4>
   13522:	f240 4324 	movw	r3, #1060	; 0x424
   13526:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1352a:	681b      	ldr	r3, [r3, #0]
   1352c:	4618      	mov	r0, r3
   1352e:	f004 fa59 	bl	179e4 <__aeabi_f2d>
   13532:	4604      	mov	r4, r0
   13534:	460d      	mov	r5, r1
   13536:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   1353a:	4618      	mov	r0, r3
   1353c:	f004 fe92 	bl	18264 <__aeabi_i2f>
   13540:	4603      	mov	r3, r0
   13542:	4618      	mov	r0, r3
   13544:	f04f 0100 	mov.w	r1, #0
   13548:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1354c:	f004 ff92 	bl	18474 <__aeabi_fdiv>
   13550:	4603      	mov	r3, r0
   13552:	4618      	mov	r0, r3
   13554:	f004 fa46 	bl	179e4 <__aeabi_f2d>
   13558:	4602      	mov	r2, r0
   1355a:	460b      	mov	r3, r1
   1355c:	f04f 0000 	mov.w	r0, #0
   13560:	f04f 0100 	mov.w	r1, #0
   13564:	f004 f8de 	bl	17724 <__aeabi_dsub>
   13568:	4602      	mov	r2, r0
   1356a:	460b      	mov	r3, r1
   1356c:	4620      	mov	r0, r4
   1356e:	4629      	mov	r1, r5
   13570:	f004 f8da 	bl	17728 <__adddf3>
   13574:	4602      	mov	r2, r0
   13576:	460b      	mov	r3, r1
   13578:	4610      	mov	r0, r2
   1357a:	4619      	mov	r1, r3
   1357c:	f004 fd68 	bl	18050 <__aeabi_d2f>
   13580:	4602      	mov	r2, r0
   13582:	f240 4324 	movw	r3, #1060	; 0x424
   13586:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1358a:	601a      	str	r2, [r3, #0]
   1358c:	f240 4324 	movw	r3, #1060	; 0x424
   13590:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13594:	681b      	ldr	r3, [r3, #0]
   13596:	4618      	mov	r0, r3
   13598:	f04f 0100 	mov.w	r1, #0
   1359c:	f2c4 312f 	movt	r1, #17199	; 0x432f
   135a0:	f005 f866 	bl	18670 <__aeabi_fcmpge>
   135a4:	4603      	mov	r3, r0
   135a6:	2b00      	cmp	r3, #0
   135a8:	d005      	beq.n	135b6 <auto_nav+0x1176>
   135aa:	f240 4324 	movw	r3, #1060	; 0x424
   135ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135b2:	681a      	ldr	r2, [r3, #0]
   135b4:	e003      	b.n	135be <auto_nav+0x117e>
   135b6:	f04f 0200 	mov.w	r2, #0
   135ba:	f2c4 322f 	movt	r2, #17199	; 0x432f
   135be:	f240 4324 	movw	r3, #1060	; 0x424
   135c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135c6:	601a      	str	r2, [r3, #0]
   135c8:	f240 4324 	movw	r3, #1060	; 0x424
   135cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135d0:	681b      	ldr	r3, [r3, #0]
   135d2:	4618      	mov	r0, r3
   135d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   135d8:	f2c4 3189 	movt	r1, #17289	; 0x4389
   135dc:	f005 f83e 	bl	1865c <__aeabi_fcmple>
   135e0:	4603      	mov	r3, r0
   135e2:	2b00      	cmp	r3, #0
   135e4:	d005      	beq.n	135f2 <auto_nav+0x11b2>
   135e6:	f240 4324 	movw	r3, #1060	; 0x424
   135ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135ee:	681a      	ldr	r2, [r3, #0]
   135f0:	e003      	b.n	135fa <auto_nav+0x11ba>
   135f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   135f6:	f2c4 3289 	movt	r2, #17289	; 0x4389
   135fa:	f240 4324 	movw	r3, #1060	; 0x424
   135fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13602:	601a      	str	r2, [r3, #0]
   13604:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   13608:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1360c:	681a      	ldr	r2, [r3, #0]
   1360e:	f24c 23a0 	movw	r3, #49824	; 0xc2a0
   13612:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13616:	681b      	ldr	r3, [r3, #0]
   13618:	4610      	mov	r0, r2
   1361a:	4619      	mov	r1, r3
   1361c:	f004 fd6c 	bl	180f8 <__aeabi_fsub>
   13620:	4603      	mov	r3, r0
   13622:	4618      	mov	r0, r3
   13624:	f004 f9de 	bl	179e4 <__aeabi_f2d>
   13628:	4604      	mov	r4, r0
   1362a:	460d      	mov	r5, r1
   1362c:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   13630:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13634:	681a      	ldr	r2, [r3, #0]
   13636:	f24c 239c 	movw	r3, #49820	; 0xc29c
   1363a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1363e:	681b      	ldr	r3, [r3, #0]
   13640:	4610      	mov	r0, r2
   13642:	4619      	mov	r1, r3
   13644:	f004 fd58 	bl	180f8 <__aeabi_fsub>
   13648:	4603      	mov	r3, r0
   1364a:	4618      	mov	r0, r3
   1364c:	f004 f9ca 	bl	179e4 <__aeabi_f2d>
   13650:	4602      	mov	r2, r0
   13652:	460b      	mov	r3, r1
   13654:	4620      	mov	r0, r4
   13656:	4629      	mov	r1, r5
   13658:	f002 fa12 	bl	15a80 <pp_atan2>
   1365c:	4602      	mov	r2, r0
   1365e:	460b      	mov	r3, r1
   13660:	4610      	mov	r0, r2
   13662:	4619      	mov	r1, r3
   13664:	f004 fcf4 	bl	18050 <__aeabi_d2f>
   13668:	4603      	mov	r3, r0
   1366a:	61fb      	str	r3, [r7, #28]
   1366c:	69f8      	ldr	r0, [r7, #28]
   1366e:	f004 f9b9 	bl	179e4 <__aeabi_f2d>
   13672:	4604      	mov	r4, r0
   13674:	460d      	mov	r5, r1
   13676:	f24c 43e4 	movw	r3, #50404	; 0xc4e4
   1367a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1367e:	681b      	ldr	r3, [r3, #0]
   13680:	4618      	mov	r0, r3
   13682:	f04f 0100 	mov.w	r1, #0
   13686:	f2cc 2148 	movt	r1, #49736	; 0xc248
   1368a:	f004 fe3f 	bl	1830c <__aeabi_fmul>
   1368e:	4603      	mov	r3, r0
   13690:	4618      	mov	r0, r3
   13692:	f004 f9a7 	bl	179e4 <__aeabi_f2d>
   13696:	4602      	mov	r2, r0
   13698:	460b      	mov	r3, r1
   1369a:	f04f 0000 	mov.w	r0, #0
   1369e:	f04f 0100 	mov.w	r1, #0
   136a2:	f2c4 0114 	movt	r1, #16404	; 0x4014
   136a6:	f004 fb1b 	bl	17ce0 <__aeabi_ddiv>
   136aa:	4602      	mov	r2, r0
   136ac:	460b      	mov	r3, r1
   136ae:	4620      	mov	r0, r4
   136b0:	4629      	mov	r1, r5
   136b2:	f004 f839 	bl	17728 <__adddf3>
   136b6:	4602      	mov	r2, r0
   136b8:	460b      	mov	r3, r1
   136ba:	4610      	mov	r0, r2
   136bc:	4619      	mov	r1, r3
   136be:	f004 fcc7 	bl	18050 <__aeabi_d2f>
   136c2:	4603      	mov	r3, r0
   136c4:	61bb      	str	r3, [r7, #24]
   136c6:	f24c 239c 	movw	r3, #49820	; 0xc29c
   136ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   136ce:	681b      	ldr	r3, [r3, #0]
   136d0:	4618      	mov	r0, r3
   136d2:	f004 f987 	bl	179e4 <__aeabi_f2d>
   136d6:	4604      	mov	r4, r0
   136d8:	460d      	mov	r5, r1
   136da:	69b8      	ldr	r0, [r7, #24]
   136dc:	f004 f982 	bl	179e4 <__aeabi_f2d>
   136e0:	4602      	mov	r2, r0
   136e2:	460b      	mov	r3, r1
   136e4:	4610      	mov	r0, r2
   136e6:	4619      	mov	r1, r3
   136e8:	a3b1      	add	r3, pc, #708	; (adr r3, 139b0 <auto_nav+0x1570>)
   136ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   136ee:	f004 f81b 	bl	17728 <__adddf3>
   136f2:	4602      	mov	r2, r0
   136f4:	460b      	mov	r3, r1
   136f6:	4610      	mov	r0, r2
   136f8:	4619      	mov	r1, r3
   136fa:	f002 fa81 	bl	15c00 <pp_sin>
   136fe:	4602      	mov	r2, r0
   13700:	460b      	mov	r3, r1
   13702:	4610      	mov	r0, r2
   13704:	4619      	mov	r1, r3
   13706:	f04f 0200 	mov.w	r2, #0
   1370a:	f04f 0300 	mov.w	r3, #0
   1370e:	f2c4 0349 	movt	r3, #16457	; 0x4049
   13712:	f004 f9bb 	bl	17a8c <__aeabi_dmul>
   13716:	4602      	mov	r2, r0
   13718:	460b      	mov	r3, r1
   1371a:	4620      	mov	r0, r4
   1371c:	4629      	mov	r1, r5
   1371e:	f004 f803 	bl	17728 <__adddf3>
   13722:	4602      	mov	r2, r0
   13724:	460b      	mov	r3, r1
   13726:	4610      	mov	r0, r2
   13728:	4619      	mov	r1, r3
   1372a:	f004 fc91 	bl	18050 <__aeabi_d2f>
   1372e:	4606      	mov	r6, r0
   13730:	f24c 23a0 	movw	r3, #49824	; 0xc2a0
   13734:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13738:	681b      	ldr	r3, [r3, #0]
   1373a:	4618      	mov	r0, r3
   1373c:	f004 f952 	bl	179e4 <__aeabi_f2d>
   13740:	4604      	mov	r4, r0
   13742:	460d      	mov	r5, r1
   13744:	69b8      	ldr	r0, [r7, #24]
   13746:	f004 f94d 	bl	179e4 <__aeabi_f2d>
   1374a:	4602      	mov	r2, r0
   1374c:	460b      	mov	r3, r1
   1374e:	4610      	mov	r0, r2
   13750:	4619      	mov	r1, r3
   13752:	f002 fa55 	bl	15c00 <pp_sin>
   13756:	4602      	mov	r2, r0
   13758:	460b      	mov	r3, r1
   1375a:	4610      	mov	r0, r2
   1375c:	4619      	mov	r1, r3
   1375e:	f04f 0200 	mov.w	r2, #0
   13762:	f04f 0300 	mov.w	r3, #0
   13766:	f2c4 0349 	movt	r3, #16457	; 0x4049
   1376a:	f004 f98f 	bl	17a8c <__aeabi_dmul>
   1376e:	4602      	mov	r2, r0
   13770:	460b      	mov	r3, r1
   13772:	4620      	mov	r0, r4
   13774:	4629      	mov	r1, r5
   13776:	f003 ffd7 	bl	17728 <__adddf3>
   1377a:	4602      	mov	r2, r0
   1377c:	460b      	mov	r3, r1
   1377e:	4610      	mov	r0, r2
   13780:	4619      	mov	r1, r3
   13782:	f004 fc65 	bl	18050 <__aeabi_d2f>
   13786:	4603      	mov	r3, r0
   13788:	4630      	mov	r0, r6
   1378a:	4619      	mov	r1, r3
   1378c:	f001 f81c 	bl	147c8 <fly_to_xy>
   13790:	69b8      	ldr	r0, [r7, #24]
   13792:	f004 f927 	bl	179e4 <__aeabi_f2d>
   13796:	4602      	mov	r2, r0
   13798:	460b      	mov	r3, r1
   1379a:	a185      	add	r1, pc, #532	; (adr r1, 139b0 <auto_nav+0x1570>)
   1379c:	e9d1 0100 	ldrd	r0, r1, [r1]
   137a0:	f003 ffc0 	bl	17724 <__aeabi_dsub>
   137a4:	4602      	mov	r2, r0
   137a6:	460b      	mov	r3, r1
   137a8:	4610      	mov	r0, r2
   137aa:	4619      	mov	r1, r3
   137ac:	a382      	add	r3, pc, #520	; (adr r3, 139b8 <auto_nav+0x1578>)
   137ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   137b2:	f004 fa95 	bl	17ce0 <__aeabi_ddiv>
   137b6:	4602      	mov	r2, r0
   137b8:	460b      	mov	r3, r1
   137ba:	4610      	mov	r0, r2
   137bc:	4619      	mov	r1, r3
   137be:	f04f 0200 	mov.w	r2, #0
   137c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   137c6:	f2c4 0366 	movt	r3, #16486	; 0x4066
   137ca:	f004 f95f 	bl	17a8c <__aeabi_dmul>
   137ce:	4602      	mov	r2, r0
   137d0:	460b      	mov	r3, r1
   137d2:	4610      	mov	r0, r2
   137d4:	4619      	mov	r1, r3
   137d6:	f004 fc3b 	bl	18050 <__aeabi_d2f>
   137da:	4602      	mov	r2, r0
   137dc:	f24c 236c 	movw	r3, #49772	; 0xc26c
   137e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   137e4:	601a      	str	r2, [r3, #0]
   137e6:	e012      	b.n	1380e <auto_nav+0x13ce>
   137e8:	f24c 236c 	movw	r3, #49772	; 0xc26c
   137ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   137f0:	681b      	ldr	r3, [r3, #0]
   137f2:	4618      	mov	r0, r3
   137f4:	f04f 0100 	mov.w	r1, #0
   137f8:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   137fc:	f004 fc7e 	bl	180fc <__addsf3>
   13800:	4603      	mov	r3, r0
   13802:	461a      	mov	r2, r3
   13804:	f24c 236c 	movw	r3, #49772	; 0xc26c
   13808:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1380c:	601a      	str	r2, [r3, #0]
   1380e:	f24c 236c 	movw	r3, #49772	; 0xc26c
   13812:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13816:	681b      	ldr	r3, [r3, #0]
   13818:	4618      	mov	r0, r3
   1381a:	f04f 0100 	mov.w	r1, #0
   1381e:	f004 ff13 	bl	18648 <__aeabi_fcmplt>
   13822:	4603      	mov	r3, r0
   13824:	2b00      	cmp	r3, #0
   13826:	d1df      	bne.n	137e8 <auto_nav+0x13a8>
   13828:	e012      	b.n	13850 <auto_nav+0x1410>
   1382a:	f24c 236c 	movw	r3, #49772	; 0xc26c
   1382e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13832:	681b      	ldr	r3, [r3, #0]
   13834:	4618      	mov	r0, r3
   13836:	f04f 0100 	mov.w	r1, #0
   1383a:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1383e:	f004 fc5b 	bl	180f8 <__aeabi_fsub>
   13842:	4603      	mov	r3, r0
   13844:	461a      	mov	r2, r3
   13846:	f24c 236c 	movw	r3, #49772	; 0xc26c
   1384a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1384e:	601a      	str	r2, [r3, #0]
   13850:	f24c 236c 	movw	r3, #49772	; 0xc26c
   13854:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13858:	681b      	ldr	r3, [r3, #0]
   1385a:	4618      	mov	r0, r3
   1385c:	f04f 0100 	mov.w	r1, #0
   13860:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13864:	f004 ff04 	bl	18670 <__aeabi_fcmpge>
   13868:	4603      	mov	r3, r0
   1386a:	2b00      	cmp	r3, #0
   1386c:	d1dd      	bne.n	1382a <auto_nav+0x13ea>
        return;
   1386e:	f000 beb9 	b.w	145e4 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   13872:	f24c 2350 	movw	r3, #49744	; 0xc250
   13876:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1387a:	781b      	ldrb	r3, [r3, #0]
   1387c:	2b01      	cmp	r3, #1
   1387e:	f040 86b1 	bne.w	145e4 <auto_nav+0x21a4>
    {
        nav_stage = 1;
   13882:	f24c 2350 	movw	r3, #49744	; 0xc250
   13886:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1388a:	2201      	movs	r2, #1
   1388c:	701a      	strb	r2, [r3, #0]
        NextBlock()
   1388e:	f24c 2351 	movw	r3, #49745	; 0xc251
   13892:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13896:	781b      	ldrb	r3, [r3, #0]
   13898:	3301      	adds	r3, #1
   1389a:	b2da      	uxtb	r2, r3
   1389c:	f24c 2351 	movw	r3, #49745	; 0xc251
   138a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138a4:	701a      	strb	r2, [r3, #0]
   138a6:	f24c 2350 	movw	r3, #49744	; 0xc250
   138aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138ae:	2200      	movs	r2, #0
   138b0:	701a      	strb	r2, [r3, #0]
   138b2:	f24c 2366 	movw	r3, #49766	; 0xc266
   138b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138ba:	2200      	movs	r2, #0
   138bc:	801a      	strh	r2, [r3, #0]
   138be:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   138c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138c6:	681a      	ldr	r2, [r3, #0]
   138c8:	f24c 2354 	movw	r3, #49748	; 0xc254
   138cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138d0:	601a      	str	r2, [r3, #0]
   138d2:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   138d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138da:	681a      	ldr	r2, [r3, #0]
   138dc:	f24c 2358 	movw	r3, #49752	; 0xc258
   138e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138e4:	601a      	str	r2, [r3, #0]
   138e6:	f24c 2364 	movw	r3, #49764	; 0xc264
   138ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138ee:	2200      	movs	r2, #0
   138f0:	801a      	strh	r2, [r3, #0]
   138f2:	f24c 2368 	movw	r3, #49768	; 0xc268
   138f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138fa:	f04f 0200 	mov.w	r2, #0
   138fe:	601a      	str	r2, [r3, #0]
   13900:	f000 be70 	b.w	145e4 <auto_nav+0x21a4>
    }
    else { }
}
else if (nav_block == 4)
   13904:	f24c 2351 	movw	r3, #49745	; 0xc251
   13908:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1390c:	781b      	ldrb	r3, [r3, #0]
   1390e:	2b04      	cmp	r3, #4
   13910:	f040 8202 	bne.w	13d18 <auto_nav+0x18d8>
{
    nav_block = 4;
   13914:	f24c 2351 	movw	r3, #49745	; 0xc251
   13918:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1391c:	2204      	movs	r2, #4
   1391e:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(5) }
   13920:	f64b 63e0 	movw	r3, #48864	; 0xbee0
   13924:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13928:	781b      	ldrb	r3, [r3, #0]
   1392a:	2b00      	cmp	r3, #0
   1392c:	d007      	beq.n	1393e <auto_nav+0x14fe>
   1392e:	f64b 63e0 	movw	r3, #48864	; 0xbee0
   13932:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13936:	2200      	movs	r2, #0
   13938:	701a      	strb	r2, [r3, #0]
   1393a:	2301      	movs	r3, #1
   1393c:	e000      	b.n	13940 <auto_nav+0x1500>
   1393e:	2300      	movs	r3, #0
   13940:	2b00      	cmp	r3, #0
   13942:	d03d      	beq.n	139c0 <auto_nav+0x1580>
   13944:	f24c 2351 	movw	r3, #49745	; 0xc251
   13948:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1394c:	2205      	movs	r2, #5
   1394e:	701a      	strb	r2, [r3, #0]
   13950:	f24c 2350 	movw	r3, #49744	; 0xc250
   13954:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13958:	2200      	movs	r2, #0
   1395a:	701a      	strb	r2, [r3, #0]
   1395c:	f24c 2366 	movw	r3, #49766	; 0xc266
   13960:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13964:	2200      	movs	r2, #0
   13966:	801a      	strh	r2, [r3, #0]
   13968:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   1396c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13970:	681a      	ldr	r2, [r3, #0]
   13972:	f24c 2354 	movw	r3, #49748	; 0xc254
   13976:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1397a:	601a      	str	r2, [r3, #0]
   1397c:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   13980:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13984:	681a      	ldr	r2, [r3, #0]
   13986:	f24c 2358 	movw	r3, #49752	; 0xc258
   1398a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1398e:	601a      	str	r2, [r3, #0]
   13990:	f24c 2364 	movw	r3, #49764	; 0xc264
   13994:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13998:	2200      	movs	r2, #0
   1399a:	801a      	strh	r2, [r3, #0]
   1399c:	f24c 2368 	movw	r3, #49768	; 0xc268
   139a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139a4:	f04f 0200 	mov.w	r2, #0
   139a8:	601a      	str	r2, [r3, #0]
   139aa:	f000 be1b 	b.w	145e4 <auto_nav+0x21a4>
   139ae:	bf00      	nop
   139b0:	54442d18 	.word	0x54442d18
   139b4:	3ff921fb 	.word	0x3ff921fb
   139b8:	54442d18 	.word	0x54442d18
   139bc:	400921fb 	.word	0x400921fb
    if(nav_stage == 0)
   139c0:	f24c 2350 	movw	r3, #49744	; 0xc250
   139c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139c8:	781b      	ldrb	r3, [r3, #0]
   139ca:	2b00      	cmp	r3, #0
   139cc:	f040 815b 	bne.w	13c86 <auto_nav+0x1846>
    {
        nav_stage = 0;
   139d0:	f24c 2350 	movw	r3, #49744	; 0xc250
   139d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139d8:	2200      	movs	r2, #0
   139da:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   139dc:	f64b 63df 	movw	r3, #48863	; 0xbedf
   139e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139e4:	2200      	movs	r2, #0
   139e6:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   139e8:	f24c 237c 	movw	r3, #49788	; 0xc27c
   139ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139f0:	f04f 0200 	mov.w	r2, #0
   139f4:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   139f6:	f64b 63dd 	movw	r3, #48861	; 0xbedd
   139fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139fe:	2203      	movs	r2, #3
   13a00:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[0].a;
   13a02:	f240 4328 	movw	r3, #1064	; 0x428
   13a06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a0a:	689a      	ldr	r2, [r3, #8]
   13a0c:	f240 4324 	movw	r3, #1060	; 0x424
   13a10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a14:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   13a16:	f24c 2344 	movw	r3, #49732	; 0xc244
   13a1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a1e:	f04f 0200 	mov.w	r2, #0
   13a22:	601a      	str	r2, [r3, #0]
        Circle(0, 150);
   13a24:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   13a28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a2c:	681a      	ldr	r2, [r3, #0]
   13a2e:	f240 4328 	movw	r3, #1064	; 0x428
   13a32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a36:	685b      	ldr	r3, [r3, #4]
   13a38:	4610      	mov	r0, r2
   13a3a:	4619      	mov	r1, r3
   13a3c:	f004 fb5c 	bl	180f8 <__aeabi_fsub>
   13a40:	4603      	mov	r3, r0
   13a42:	4618      	mov	r0, r3
   13a44:	f003 ffce 	bl	179e4 <__aeabi_f2d>
   13a48:	4604      	mov	r4, r0
   13a4a:	460d      	mov	r5, r1
   13a4c:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   13a50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a54:	681a      	ldr	r2, [r3, #0]
   13a56:	f240 4328 	movw	r3, #1064	; 0x428
   13a5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a5e:	681b      	ldr	r3, [r3, #0]
   13a60:	4610      	mov	r0, r2
   13a62:	4619      	mov	r1, r3
   13a64:	f004 fb48 	bl	180f8 <__aeabi_fsub>
   13a68:	4603      	mov	r3, r0
   13a6a:	4618      	mov	r0, r3
   13a6c:	f003 ffba 	bl	179e4 <__aeabi_f2d>
   13a70:	4602      	mov	r2, r0
   13a72:	460b      	mov	r3, r1
   13a74:	4620      	mov	r0, r4
   13a76:	4629      	mov	r1, r5
   13a78:	f002 f802 	bl	15a80 <pp_atan2>
   13a7c:	4602      	mov	r2, r0
   13a7e:	460b      	mov	r3, r1
   13a80:	4610      	mov	r0, r2
   13a82:	4619      	mov	r1, r3
   13a84:	f004 fae4 	bl	18050 <__aeabi_d2f>
   13a88:	4603      	mov	r3, r0
   13a8a:	617b      	str	r3, [r7, #20]
   13a8c:	6978      	ldr	r0, [r7, #20]
   13a8e:	f003 ffa9 	bl	179e4 <__aeabi_f2d>
   13a92:	4604      	mov	r4, r0
   13a94:	460d      	mov	r5, r1
   13a96:	f24c 43e4 	movw	r3, #50404	; 0xc4e4
   13a9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a9e:	681b      	ldr	r3, [r3, #0]
   13aa0:	4618      	mov	r0, r3
   13aa2:	f04f 0100 	mov.w	r1, #0
   13aa6:	f2cc 3116 	movt	r1, #49942	; 0xc316
   13aaa:	f004 fc2f 	bl	1830c <__aeabi_fmul>
   13aae:	4603      	mov	r3, r0
   13ab0:	4618      	mov	r0, r3
   13ab2:	f003 ff97 	bl	179e4 <__aeabi_f2d>
   13ab6:	4602      	mov	r2, r0
   13ab8:	460b      	mov	r3, r1
   13aba:	f04f 0000 	mov.w	r0, #0
   13abe:	f04f 0100 	mov.w	r1, #0
   13ac2:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13ac6:	f004 f90b 	bl	17ce0 <__aeabi_ddiv>
   13aca:	4602      	mov	r2, r0
   13acc:	460b      	mov	r3, r1
   13ace:	4620      	mov	r0, r4
   13ad0:	4629      	mov	r1, r5
   13ad2:	f003 fe29 	bl	17728 <__adddf3>
   13ad6:	4602      	mov	r2, r0
   13ad8:	460b      	mov	r3, r1
   13ada:	4610      	mov	r0, r2
   13adc:	4619      	mov	r1, r3
   13ade:	f004 fab7 	bl	18050 <__aeabi_d2f>
   13ae2:	4603      	mov	r3, r0
   13ae4:	613b      	str	r3, [r7, #16]
   13ae6:	f240 4328 	movw	r3, #1064	; 0x428
   13aea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13aee:	681b      	ldr	r3, [r3, #0]
   13af0:	4618      	mov	r0, r3
   13af2:	f003 ff77 	bl	179e4 <__aeabi_f2d>
   13af6:	4604      	mov	r4, r0
   13af8:	460d      	mov	r5, r1
   13afa:	6938      	ldr	r0, [r7, #16]
   13afc:	f003 ff72 	bl	179e4 <__aeabi_f2d>
   13b00:	4602      	mov	r2, r0
   13b02:	460b      	mov	r3, r1
   13b04:	4610      	mov	r0, r2
   13b06:	4619      	mov	r1, r3
   13b08:	a3af      	add	r3, pc, #700	; (adr r3, 13dc8 <auto_nav+0x1988>)
   13b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   13b0e:	f003 fe0b 	bl	17728 <__adddf3>
   13b12:	4602      	mov	r2, r0
   13b14:	460b      	mov	r3, r1
   13b16:	4610      	mov	r0, r2
   13b18:	4619      	mov	r1, r3
   13b1a:	f002 f871 	bl	15c00 <pp_sin>
   13b1e:	4602      	mov	r2, r0
   13b20:	460b      	mov	r3, r1
   13b22:	4610      	mov	r0, r2
   13b24:	4619      	mov	r1, r3
   13b26:	a3aa      	add	r3, pc, #680	; (adr r3, 13dd0 <auto_nav+0x1990>)
   13b28:	e9d3 2300 	ldrd	r2, r3, [r3]
   13b2c:	f003 ffae 	bl	17a8c <__aeabi_dmul>
   13b30:	4602      	mov	r2, r0
   13b32:	460b      	mov	r3, r1
   13b34:	4620      	mov	r0, r4
   13b36:	4629      	mov	r1, r5
   13b38:	f003 fdf6 	bl	17728 <__adddf3>
   13b3c:	4602      	mov	r2, r0
   13b3e:	460b      	mov	r3, r1
   13b40:	4610      	mov	r0, r2
   13b42:	4619      	mov	r1, r3
   13b44:	f004 fa84 	bl	18050 <__aeabi_d2f>
   13b48:	4606      	mov	r6, r0
   13b4a:	f240 4328 	movw	r3, #1064	; 0x428
   13b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b52:	685b      	ldr	r3, [r3, #4]
   13b54:	4618      	mov	r0, r3
   13b56:	f003 ff45 	bl	179e4 <__aeabi_f2d>
   13b5a:	4604      	mov	r4, r0
   13b5c:	460d      	mov	r5, r1
   13b5e:	6938      	ldr	r0, [r7, #16]
   13b60:	f003 ff40 	bl	179e4 <__aeabi_f2d>
   13b64:	4602      	mov	r2, r0
   13b66:	460b      	mov	r3, r1
   13b68:	4610      	mov	r0, r2
   13b6a:	4619      	mov	r1, r3
   13b6c:	f002 f848 	bl	15c00 <pp_sin>
   13b70:	4602      	mov	r2, r0
   13b72:	460b      	mov	r3, r1
   13b74:	4610      	mov	r0, r2
   13b76:	4619      	mov	r1, r3
   13b78:	a395      	add	r3, pc, #596	; (adr r3, 13dd0 <auto_nav+0x1990>)
   13b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   13b7e:	f003 ff85 	bl	17a8c <__aeabi_dmul>
   13b82:	4602      	mov	r2, r0
   13b84:	460b      	mov	r3, r1
   13b86:	4620      	mov	r0, r4
   13b88:	4629      	mov	r1, r5
   13b8a:	f003 fdcd 	bl	17728 <__adddf3>
   13b8e:	4602      	mov	r2, r0
   13b90:	460b      	mov	r3, r1
   13b92:	4610      	mov	r0, r2
   13b94:	4619      	mov	r1, r3
   13b96:	f004 fa5b 	bl	18050 <__aeabi_d2f>
   13b9a:	4603      	mov	r3, r0
   13b9c:	4630      	mov	r0, r6
   13b9e:	4619      	mov	r1, r3
   13ba0:	f000 fe12 	bl	147c8 <fly_to_xy>
   13ba4:	6938      	ldr	r0, [r7, #16]
   13ba6:	f003 ff1d 	bl	179e4 <__aeabi_f2d>
   13baa:	4602      	mov	r2, r0
   13bac:	460b      	mov	r3, r1
   13bae:	a186      	add	r1, pc, #536	; (adr r1, 13dc8 <auto_nav+0x1988>)
   13bb0:	e9d1 0100 	ldrd	r0, r1, [r1]
   13bb4:	f003 fdb6 	bl	17724 <__aeabi_dsub>
   13bb8:	4602      	mov	r2, r0
   13bba:	460b      	mov	r3, r1
   13bbc:	4610      	mov	r0, r2
   13bbe:	4619      	mov	r1, r3
   13bc0:	a385      	add	r3, pc, #532	; (adr r3, 13dd8 <auto_nav+0x1998>)
   13bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   13bc6:	f004 f88b 	bl	17ce0 <__aeabi_ddiv>
   13bca:	4602      	mov	r2, r0
   13bcc:	460b      	mov	r3, r1
   13bce:	4610      	mov	r0, r2
   13bd0:	4619      	mov	r1, r3
   13bd2:	f04f 0200 	mov.w	r2, #0
   13bd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13bda:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13bde:	f003 ff55 	bl	17a8c <__aeabi_dmul>
   13be2:	4602      	mov	r2, r0
   13be4:	460b      	mov	r3, r1
   13be6:	4610      	mov	r0, r2
   13be8:	4619      	mov	r1, r3
   13bea:	f004 fa31 	bl	18050 <__aeabi_d2f>
   13bee:	4602      	mov	r2, r0
   13bf0:	f24c 236c 	movw	r3, #49772	; 0xc26c
   13bf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bf8:	601a      	str	r2, [r3, #0]
   13bfa:	e012      	b.n	13c22 <auto_nav+0x17e2>
   13bfc:	f24c 236c 	movw	r3, #49772	; 0xc26c
   13c00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c04:	681b      	ldr	r3, [r3, #0]
   13c06:	4618      	mov	r0, r3
   13c08:	f04f 0100 	mov.w	r1, #0
   13c0c:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13c10:	f004 fa74 	bl	180fc <__addsf3>
   13c14:	4603      	mov	r3, r0
   13c16:	461a      	mov	r2, r3
   13c18:	f24c 236c 	movw	r3, #49772	; 0xc26c
   13c1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c20:	601a      	str	r2, [r3, #0]
   13c22:	f24c 236c 	movw	r3, #49772	; 0xc26c
   13c26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c2a:	681b      	ldr	r3, [r3, #0]
   13c2c:	4618      	mov	r0, r3
   13c2e:	f04f 0100 	mov.w	r1, #0
   13c32:	f004 fd09 	bl	18648 <__aeabi_fcmplt>
   13c36:	4603      	mov	r3, r0
   13c38:	2b00      	cmp	r3, #0
   13c3a:	d1df      	bne.n	13bfc <auto_nav+0x17bc>
   13c3c:	e012      	b.n	13c64 <auto_nav+0x1824>
   13c3e:	f24c 236c 	movw	r3, #49772	; 0xc26c
   13c42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c46:	681b      	ldr	r3, [r3, #0]
   13c48:	4618      	mov	r0, r3
   13c4a:	f04f 0100 	mov.w	r1, #0
   13c4e:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13c52:	f004 fa51 	bl	180f8 <__aeabi_fsub>
   13c56:	4603      	mov	r3, r0
   13c58:	461a      	mov	r2, r3
   13c5a:	f24c 236c 	movw	r3, #49772	; 0xc26c
   13c5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c62:	601a      	str	r2, [r3, #0]
   13c64:	f24c 236c 	movw	r3, #49772	; 0xc26c
   13c68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c6c:	681b      	ldr	r3, [r3, #0]
   13c6e:	4618      	mov	r0, r3
   13c70:	f04f 0100 	mov.w	r1, #0
   13c74:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13c78:	f004 fcfa 	bl	18670 <__aeabi_fcmpge>
   13c7c:	4603      	mov	r3, r0
   13c7e:	2b00      	cmp	r3, #0
   13c80:	d1dd      	bne.n	13c3e <auto_nav+0x17fe>
        return;
   13c82:	f000 bcaf 	b.w	145e4 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   13c86:	f24c 2350 	movw	r3, #49744	; 0xc250
   13c8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c8e:	781b      	ldrb	r3, [r3, #0]
   13c90:	2b01      	cmp	r3, #1
   13c92:	f040 84a7 	bne.w	145e4 <auto_nav+0x21a4>
    {
        nav_stage =1;
   13c96:	f24c 2350 	movw	r3, #49744	; 0xc250
   13c9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c9e:	2201      	movs	r2, #1
   13ca0:	701a      	strb	r2, [r3, #0]
        NextBlock()
   13ca2:	f24c 2351 	movw	r3, #49745	; 0xc251
   13ca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13caa:	781b      	ldrb	r3, [r3, #0]
   13cac:	3301      	adds	r3, #1
   13cae:	b2da      	uxtb	r2, r3
   13cb0:	f24c 2351 	movw	r3, #49745	; 0xc251
   13cb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13cb8:	701a      	strb	r2, [r3, #0]
   13cba:	f24c 2350 	movw	r3, #49744	; 0xc250
   13cbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13cc2:	2200      	movs	r2, #0
   13cc4:	701a      	strb	r2, [r3, #0]
   13cc6:	f24c 2366 	movw	r3, #49766	; 0xc266
   13cca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13cce:	2200      	movs	r2, #0
   13cd0:	801a      	strh	r2, [r3, #0]
   13cd2:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   13cd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13cda:	681a      	ldr	r2, [r3, #0]
   13cdc:	f24c 2354 	movw	r3, #49748	; 0xc254
   13ce0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ce4:	601a      	str	r2, [r3, #0]
   13ce6:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   13cea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13cee:	681a      	ldr	r2, [r3, #0]
   13cf0:	f24c 2358 	movw	r3, #49752	; 0xc258
   13cf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13cf8:	601a      	str	r2, [r3, #0]
   13cfa:	f24c 2364 	movw	r3, #49764	; 0xc264
   13cfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d02:	2200      	movs	r2, #0
   13d04:	801a      	strh	r2, [r3, #0]
   13d06:	f24c 2368 	movw	r3, #49768	; 0xc268
   13d0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d0e:	f04f 0200 	mov.w	r2, #0
   13d12:	601a      	str	r2, [r3, #0]
   13d14:	f000 bc66 	b.w	145e4 <auto_nav+0x21a4>
    }
    else {}
}
else if (nav_block == 5)
   13d18:	f24c 2351 	movw	r3, #49745	; 0xc251
   13d1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d20:	781b      	ldrb	r3, [r3, #0]
   13d22:	2b05      	cmp	r3, #5
   13d24:	f040 845e 	bne.w	145e4 <auto_nav+0x21a4>
{
    nav_block = 5;
   13d28:	f24c 2351 	movw	r3, #49745	; 0xc251
   13d2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d30:	2205      	movs	r2, #5
   13d32:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(1) }
   13d34:	f64b 63e0 	movw	r3, #48864	; 0xbee0
   13d38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d3c:	781b      	ldrb	r3, [r3, #0]
   13d3e:	2b00      	cmp	r3, #0
   13d40:	d007      	beq.n	13d52 <auto_nav+0x1912>
   13d42:	f64b 63e0 	movw	r3, #48864	; 0xbee0
   13d46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d4a:	2200      	movs	r2, #0
   13d4c:	701a      	strb	r2, [r3, #0]
   13d4e:	2301      	movs	r3, #1
   13d50:	e000      	b.n	13d54 <auto_nav+0x1914>
   13d52:	2300      	movs	r3, #0
   13d54:	2b00      	cmp	r3, #0
   13d56:	d043      	beq.n	13de0 <auto_nav+0x19a0>
   13d58:	f24c 2351 	movw	r3, #49745	; 0xc251
   13d5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d60:	2201      	movs	r2, #1
   13d62:	701a      	strb	r2, [r3, #0]
   13d64:	f24c 2350 	movw	r3, #49744	; 0xc250
   13d68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d6c:	2200      	movs	r2, #0
   13d6e:	701a      	strb	r2, [r3, #0]
   13d70:	f24c 2366 	movw	r3, #49766	; 0xc266
   13d74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d78:	2200      	movs	r2, #0
   13d7a:	801a      	strh	r2, [r3, #0]
   13d7c:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   13d80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d84:	681a      	ldr	r2, [r3, #0]
   13d86:	f24c 2354 	movw	r3, #49748	; 0xc254
   13d8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d8e:	601a      	str	r2, [r3, #0]
   13d90:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   13d94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d98:	681a      	ldr	r2, [r3, #0]
   13d9a:	f24c 2358 	movw	r3, #49752	; 0xc258
   13d9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13da2:	601a      	str	r2, [r3, #0]
   13da4:	f24c 2364 	movw	r3, #49764	; 0xc264
   13da8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13dac:	2200      	movs	r2, #0
   13dae:	801a      	strh	r2, [r3, #0]
   13db0:	f24c 2368 	movw	r3, #49768	; 0xc268
   13db4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13db8:	f04f 0200 	mov.w	r2, #0
   13dbc:	601a      	str	r2, [r3, #0]
   13dbe:	f000 bc11 	b.w	145e4 <auto_nav+0x21a4>
   13dc2:	bf00      	nop
   13dc4:	f3af 8000 	nop.w
   13dc8:	54442d18 	.word	0x54442d18
   13dcc:	3ff921fb 	.word	0x3ff921fb
   13dd0:	00000000 	.word	0x00000000
   13dd4:	4062c000 	.word	0x4062c000
   13dd8:	54442d18 	.word	0x54442d18
   13ddc:	400921fb 	.word	0x400921fb
    if(nav_stage == 0) {
   13de0:	f24c 2350 	movw	r3, #49744	; 0xc250
   13de4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13de8:	781b      	ldrb	r3, [r3, #0]
   13dea:	2b00      	cmp	r3, #0
   13dec:	d133      	bne.n	13e56 <auto_nav+0x1a16>
       Label(while_7) 
       nav_stage = 0;
   13dee:	f24c 2350 	movw	r3, #49744	; 0xc250
   13df2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13df6:	2200      	movs	r2, #0
   13df8:	701a      	strb	r2, [r3, #0]
      if (! (TRUE)) Goto(endwhile_8) else NextStage();}
   13dfa:	f24c 2350 	movw	r3, #49744	; 0xc250
   13dfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e02:	781b      	ldrb	r3, [r3, #0]
   13e04:	3301      	adds	r3, #1
   13e06:	b2da      	uxtb	r2, r3
   13e08:	f24c 2350 	movw	r3, #49744	; 0xc250
   13e0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e10:	701a      	strb	r2, [r3, #0]
   13e12:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   13e16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e1a:	681a      	ldr	r2, [r3, #0]
   13e1c:	f24c 2354 	movw	r3, #49748	; 0xc254
   13e20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e24:	601a      	str	r2, [r3, #0]
   13e26:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   13e2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e2e:	681a      	ldr	r2, [r3, #0]
   13e30:	f24c 2358 	movw	r3, #49752	; 0xc258
   13e34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e38:	601a      	str	r2, [r3, #0]
   13e3a:	f24c 2364 	movw	r3, #49764	; 0xc264
   13e3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e42:	2200      	movs	r2, #0
   13e44:	801a      	strh	r2, [r3, #0]
   13e46:	f24c 2368 	movw	r3, #49768	; 0xc268
   13e4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e4e:	f04f 0200 	mov.w	r2, #0
   13e52:	601a      	str	r2, [r3, #0]
   13e54:	e3c6      	b.n	145e4 <auto_nav+0x21a4>
     
    else if (nav_stage == 1)
   13e56:	f24c 2350 	movw	r3, #49744	; 0xc250
   13e5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e5e:	781b      	ldrb	r3, [r3, #0]
   13e60:	2b01      	cmp	r3, #1
   13e62:	f040 81b5 	bne.w	141d0 <auto_nav+0x1d90>
    {
        nav_stage =1;
   13e66:	f24c 2350 	movw	r3, #49744	; 0xc250
   13e6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e6e:	2201      	movs	r2, #1
   13e70:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   13e72:	f64b 63df 	movw	r3, #48863	; 0xbedf
   13e76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e7a:	2200      	movs	r2, #0
   13e7c:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13e7e:	f24c 237c 	movw	r3, #49788	; 0xc27c
   13e82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e86:	f04f 0200 	mov.w	r2, #0
   13e8a:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13e8c:	f64b 63dd 	movw	r3, #48861	; 0xbedd
   13e90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e94:	2203      	movs	r2, #3
   13e96:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[1].a;
   13e98:	f240 4328 	movw	r3, #1064	; 0x428
   13e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ea0:	695a      	ldr	r2, [r3, #20]
   13ea2:	f240 4324 	movw	r3, #1060	; 0x424
   13ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13eaa:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   13eac:	f24c 2344 	movw	r3, #49732	; 0xc244
   13eb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13eb4:	f04f 0200 	mov.w	r2, #0
   13eb8:	601a      	str	r2, [r3, #0]
        Circle(1, 100);
   13eba:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   13ebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ec2:	681a      	ldr	r2, [r3, #0]
   13ec4:	f240 4328 	movw	r3, #1064	; 0x428
   13ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ecc:	691b      	ldr	r3, [r3, #16]
   13ece:	4610      	mov	r0, r2
   13ed0:	4619      	mov	r1, r3
   13ed2:	f004 f911 	bl	180f8 <__aeabi_fsub>
   13ed6:	4603      	mov	r3, r0
   13ed8:	4618      	mov	r0, r3
   13eda:	f003 fd83 	bl	179e4 <__aeabi_f2d>
   13ede:	4604      	mov	r4, r0
   13ee0:	460d      	mov	r5, r1
   13ee2:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   13ee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13eea:	681a      	ldr	r2, [r3, #0]
   13eec:	f240 4328 	movw	r3, #1064	; 0x428
   13ef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ef4:	68db      	ldr	r3, [r3, #12]
   13ef6:	4610      	mov	r0, r2
   13ef8:	4619      	mov	r1, r3
   13efa:	f004 f8fd 	bl	180f8 <__aeabi_fsub>
   13efe:	4603      	mov	r3, r0
   13f00:	4618      	mov	r0, r3
   13f02:	f003 fd6f 	bl	179e4 <__aeabi_f2d>
   13f06:	4602      	mov	r2, r0
   13f08:	460b      	mov	r3, r1
   13f0a:	4620      	mov	r0, r4
   13f0c:	4629      	mov	r1, r5
   13f0e:	f001 fdb7 	bl	15a80 <pp_atan2>
   13f12:	4602      	mov	r2, r0
   13f14:	460b      	mov	r3, r1
   13f16:	4610      	mov	r0, r2
   13f18:	4619      	mov	r1, r3
   13f1a:	f004 f899 	bl	18050 <__aeabi_d2f>
   13f1e:	4603      	mov	r3, r0
   13f20:	60fb      	str	r3, [r7, #12]
   13f22:	68f8      	ldr	r0, [r7, #12]
   13f24:	f003 fd5e 	bl	179e4 <__aeabi_f2d>
   13f28:	4604      	mov	r4, r0
   13f2a:	460d      	mov	r5, r1
   13f2c:	f24c 43e4 	movw	r3, #50404	; 0xc4e4
   13f30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f34:	681b      	ldr	r3, [r3, #0]
   13f36:	4618      	mov	r0, r3
   13f38:	f04f 0100 	mov.w	r1, #0
   13f3c:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   13f40:	f004 f9e4 	bl	1830c <__aeabi_fmul>
   13f44:	4603      	mov	r3, r0
   13f46:	4618      	mov	r0, r3
   13f48:	f003 fd4c 	bl	179e4 <__aeabi_f2d>
   13f4c:	4602      	mov	r2, r0
   13f4e:	460b      	mov	r3, r1
   13f50:	f04f 0000 	mov.w	r0, #0
   13f54:	f04f 0100 	mov.w	r1, #0
   13f58:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13f5c:	f003 fec0 	bl	17ce0 <__aeabi_ddiv>
   13f60:	4602      	mov	r2, r0
   13f62:	460b      	mov	r3, r1
   13f64:	4620      	mov	r0, r4
   13f66:	4629      	mov	r1, r5
   13f68:	f003 fbde 	bl	17728 <__adddf3>
   13f6c:	4602      	mov	r2, r0
   13f6e:	460b      	mov	r3, r1
   13f70:	4610      	mov	r0, r2
   13f72:	4619      	mov	r1, r3
   13f74:	f004 f86c 	bl	18050 <__aeabi_d2f>
   13f78:	4603      	mov	r3, r0
   13f7a:	60bb      	str	r3, [r7, #8]
   13f7c:	f240 4328 	movw	r3, #1064	; 0x428
   13f80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f84:	68db      	ldr	r3, [r3, #12]
   13f86:	4618      	mov	r0, r3
   13f88:	f003 fd2c 	bl	179e4 <__aeabi_f2d>
   13f8c:	4604      	mov	r4, r0
   13f8e:	460d      	mov	r5, r1
   13f90:	68b8      	ldr	r0, [r7, #8]
   13f92:	f003 fd27 	bl	179e4 <__aeabi_f2d>
   13f96:	4602      	mov	r2, r0
   13f98:	460b      	mov	r3, r1
   13f9a:	4610      	mov	r0, r2
   13f9c:	4619      	mov	r1, r3
   13f9e:	a388      	add	r3, pc, #544	; (adr r3, 141c0 <auto_nav+0x1d80>)
   13fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
   13fa4:	f003 fbc0 	bl	17728 <__adddf3>
   13fa8:	4602      	mov	r2, r0
   13faa:	460b      	mov	r3, r1
   13fac:	4610      	mov	r0, r2
   13fae:	4619      	mov	r1, r3
   13fb0:	f001 fe26 	bl	15c00 <pp_sin>
   13fb4:	4602      	mov	r2, r0
   13fb6:	460b      	mov	r3, r1
   13fb8:	4610      	mov	r0, r2
   13fba:	4619      	mov	r1, r3
   13fbc:	f04f 0200 	mov.w	r2, #0
   13fc0:	f04f 0300 	mov.w	r3, #0
   13fc4:	f2c4 0359 	movt	r3, #16473	; 0x4059
   13fc8:	f003 fd60 	bl	17a8c <__aeabi_dmul>
   13fcc:	4602      	mov	r2, r0
   13fce:	460b      	mov	r3, r1
   13fd0:	4620      	mov	r0, r4
   13fd2:	4629      	mov	r1, r5
   13fd4:	f003 fba8 	bl	17728 <__adddf3>
   13fd8:	4602      	mov	r2, r0
   13fda:	460b      	mov	r3, r1
   13fdc:	4610      	mov	r0, r2
   13fde:	4619      	mov	r1, r3
   13fe0:	f004 f836 	bl	18050 <__aeabi_d2f>
   13fe4:	4606      	mov	r6, r0
   13fe6:	f240 4328 	movw	r3, #1064	; 0x428
   13fea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13fee:	691b      	ldr	r3, [r3, #16]
   13ff0:	4618      	mov	r0, r3
   13ff2:	f003 fcf7 	bl	179e4 <__aeabi_f2d>
   13ff6:	4604      	mov	r4, r0
   13ff8:	460d      	mov	r5, r1
   13ffa:	68b8      	ldr	r0, [r7, #8]
   13ffc:	f003 fcf2 	bl	179e4 <__aeabi_f2d>
   14000:	4602      	mov	r2, r0
   14002:	460b      	mov	r3, r1
   14004:	4610      	mov	r0, r2
   14006:	4619      	mov	r1, r3
   14008:	f001 fdfa 	bl	15c00 <pp_sin>
   1400c:	4602      	mov	r2, r0
   1400e:	460b      	mov	r3, r1
   14010:	4610      	mov	r0, r2
   14012:	4619      	mov	r1, r3
   14014:	f04f 0200 	mov.w	r2, #0
   14018:	f04f 0300 	mov.w	r3, #0
   1401c:	f2c4 0359 	movt	r3, #16473	; 0x4059
   14020:	f003 fd34 	bl	17a8c <__aeabi_dmul>
   14024:	4602      	mov	r2, r0
   14026:	460b      	mov	r3, r1
   14028:	4620      	mov	r0, r4
   1402a:	4629      	mov	r1, r5
   1402c:	f003 fb7c 	bl	17728 <__adddf3>
   14030:	4602      	mov	r2, r0
   14032:	460b      	mov	r3, r1
   14034:	4610      	mov	r0, r2
   14036:	4619      	mov	r1, r3
   14038:	f004 f80a 	bl	18050 <__aeabi_d2f>
   1403c:	4603      	mov	r3, r0
   1403e:	4630      	mov	r0, r6
   14040:	4619      	mov	r1, r3
   14042:	f000 fbc1 	bl	147c8 <fly_to_xy>
   14046:	68b8      	ldr	r0, [r7, #8]
   14048:	f003 fccc 	bl	179e4 <__aeabi_f2d>
   1404c:	4602      	mov	r2, r0
   1404e:	460b      	mov	r3, r1
   14050:	a15b      	add	r1, pc, #364	; (adr r1, 141c0 <auto_nav+0x1d80>)
   14052:	e9d1 0100 	ldrd	r0, r1, [r1]
   14056:	f003 fb65 	bl	17724 <__aeabi_dsub>
   1405a:	4602      	mov	r2, r0
   1405c:	460b      	mov	r3, r1
   1405e:	4610      	mov	r0, r2
   14060:	4619      	mov	r1, r3
   14062:	a359      	add	r3, pc, #356	; (adr r3, 141c8 <auto_nav+0x1d88>)
   14064:	e9d3 2300 	ldrd	r2, r3, [r3]
   14068:	f003 fe3a 	bl	17ce0 <__aeabi_ddiv>
   1406c:	4602      	mov	r2, r0
   1406e:	460b      	mov	r3, r1
   14070:	4610      	mov	r0, r2
   14072:	4619      	mov	r1, r3
   14074:	f04f 0200 	mov.w	r2, #0
   14078:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1407c:	f2c4 0366 	movt	r3, #16486	; 0x4066
   14080:	f003 fd04 	bl	17a8c <__aeabi_dmul>
   14084:	4602      	mov	r2, r0
   14086:	460b      	mov	r3, r1
   14088:	4610      	mov	r0, r2
   1408a:	4619      	mov	r1, r3
   1408c:	f003 ffe0 	bl	18050 <__aeabi_d2f>
   14090:	4602      	mov	r2, r0
   14092:	f24c 236c 	movw	r3, #49772	; 0xc26c
   14096:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1409a:	601a      	str	r2, [r3, #0]
   1409c:	e012      	b.n	140c4 <auto_nav+0x1c84>
   1409e:	f24c 236c 	movw	r3, #49772	; 0xc26c
   140a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140a6:	681b      	ldr	r3, [r3, #0]
   140a8:	4618      	mov	r0, r3
   140aa:	f04f 0100 	mov.w	r1, #0
   140ae:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   140b2:	f004 f823 	bl	180fc <__addsf3>
   140b6:	4603      	mov	r3, r0
   140b8:	461a      	mov	r2, r3
   140ba:	f24c 236c 	movw	r3, #49772	; 0xc26c
   140be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140c2:	601a      	str	r2, [r3, #0]
   140c4:	f24c 236c 	movw	r3, #49772	; 0xc26c
   140c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140cc:	681b      	ldr	r3, [r3, #0]
   140ce:	4618      	mov	r0, r3
   140d0:	f04f 0100 	mov.w	r1, #0
   140d4:	f004 fab8 	bl	18648 <__aeabi_fcmplt>
   140d8:	4603      	mov	r3, r0
   140da:	2b00      	cmp	r3, #0
   140dc:	d1df      	bne.n	1409e <auto_nav+0x1c5e>
   140de:	e012      	b.n	14106 <auto_nav+0x1cc6>
   140e0:	f24c 236c 	movw	r3, #49772	; 0xc26c
   140e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140e8:	681b      	ldr	r3, [r3, #0]
   140ea:	4618      	mov	r0, r3
   140ec:	f04f 0100 	mov.w	r1, #0
   140f0:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   140f4:	f004 f800 	bl	180f8 <__aeabi_fsub>
   140f8:	4603      	mov	r3, r0
   140fa:	461a      	mov	r2, r3
   140fc:	f24c 236c 	movw	r3, #49772	; 0xc26c
   14100:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14104:	601a      	str	r2, [r3, #0]
   14106:	f24c 236c 	movw	r3, #49772	; 0xc26c
   1410a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1410e:	681b      	ldr	r3, [r3, #0]
   14110:	4618      	mov	r0, r3
   14112:	f04f 0100 	mov.w	r1, #0
   14116:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1411a:	f004 faa9 	bl	18670 <__aeabi_fcmpge>
   1411e:	4603      	mov	r3, r0
   14120:	2b00      	cmp	r3, #0
   14122:	d1dd      	bne.n	140e0 <auto_nav+0x1ca0>
        if (Qdr(0)) NextStage();
   14124:	f24c 236c 	movw	r3, #49772	; 0xc26c
   14128:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1412c:	681b      	ldr	r3, [r3, #0]
   1412e:	4618      	mov	r0, r3
   14130:	f04f 0100 	mov.w	r1, #0
   14134:	f004 faa6 	bl	18684 <__aeabi_fcmpgt>
   14138:	4603      	mov	r3, r0
   1413a:	2b00      	cmp	r3, #0
   1413c:	d100      	bne.n	14140 <auto_nav+0x1d00>
        return;
   1413e:	e251      	b.n	145e4 <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   14140:	f24c 236c 	movw	r3, #49772	; 0xc26c
   14144:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14148:	681b      	ldr	r3, [r3, #0]
   1414a:	4618      	mov	r0, r3
   1414c:	f04f 0100 	mov.w	r1, #0
   14150:	f2c4 1120 	movt	r1, #16672	; 0x4120
   14154:	f004 fa78 	bl	18648 <__aeabi_fcmplt>
   14158:	4603      	mov	r3, r0
   1415a:	2b00      	cmp	r3, #0
   1415c:	d100      	bne.n	14160 <auto_nav+0x1d20>
        return;
   1415e:	e241      	b.n	145e4 <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   14160:	f24c 2350 	movw	r3, #49744	; 0xc250
   14164:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14168:	781b      	ldrb	r3, [r3, #0]
   1416a:	3301      	adds	r3, #1
   1416c:	b2da      	uxtb	r2, r3
   1416e:	f24c 2350 	movw	r3, #49744	; 0xc250
   14172:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14176:	701a      	strb	r2, [r3, #0]
   14178:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   1417c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14180:	681a      	ldr	r2, [r3, #0]
   14182:	f24c 2354 	movw	r3, #49748	; 0xc254
   14186:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1418a:	601a      	str	r2, [r3, #0]
   1418c:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   14190:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14194:	681a      	ldr	r2, [r3, #0]
   14196:	f24c 2358 	movw	r3, #49752	; 0xc258
   1419a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1419e:	601a      	str	r2, [r3, #0]
   141a0:	f24c 2364 	movw	r3, #49764	; 0xc264
   141a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   141a8:	2200      	movs	r2, #0
   141aa:	801a      	strh	r2, [r3, #0]
   141ac:	f24c 2368 	movw	r3, #49768	; 0xc268
   141b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   141b4:	f04f 0200 	mov.w	r2, #0
   141b8:	601a      	str	r2, [r3, #0]
   141ba:	e213      	b.n	145e4 <auto_nav+0x21a4>
   141bc:	f3af 8000 	nop.w
   141c0:	54442d18 	.word	0x54442d18
   141c4:	3ff921fb 	.word	0x3ff921fb
   141c8:	54442d18 	.word	0x54442d18
   141cc:	400921fb 	.word	0x400921fb
        return;
    }
    else if (nav_stage == 2)
   141d0:	f24c 2350 	movw	r3, #49744	; 0xc250
   141d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   141d8:	781b      	ldrb	r3, [r3, #0]
   141da:	2b02      	cmp	r3, #2
   141dc:	f040 81ad 	bne.w	1453a <auto_nav+0x20fa>
    {
         nav_stage = 2;
   141e0:	f24c 2350 	movw	r3, #49744	; 0xc250
   141e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   141e8:	2202      	movs	r2, #2
   141ea:	701a      	strb	r2, [r3, #0]
          auto_pitch = FALSE;
   141ec:	f64b 63df 	movw	r3, #48863	; 0xbedf
   141f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   141f4:	2200      	movs	r2, #0
   141f6:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   141f8:	f24c 237c 	movw	r3, #49788	; 0xc27c
   141fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14200:	f04f 0200 	mov.w	r2, #0
   14204:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
   14206:	f64b 63dd 	movw	r3, #48861	; 0xbedd
   1420a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1420e:	2203      	movs	r2, #3
   14210:	701a      	strb	r2, [r3, #0]
          desired_altitude = waypoints[4].a;
   14212:	f240 4328 	movw	r3, #1064	; 0x428
   14216:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1421a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1421c:	f240 4324 	movw	r3, #1060	; 0x424
   14220:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14224:	601a      	str	r2, [r3, #0]
          pre_climb = 0.;
   14226:	f24c 2344 	movw	r3, #49732	; 0xc244
   1422a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1422e:	f04f 0200 	mov.w	r2, #0
   14232:	601a      	str	r2, [r3, #0]
          Circle(4, 100);
   14234:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   14238:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1423c:	681a      	ldr	r2, [r3, #0]
   1423e:	f240 4328 	movw	r3, #1064	; 0x428
   14242:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   14248:	4610      	mov	r0, r2
   1424a:	4619      	mov	r1, r3
   1424c:	f003 ff54 	bl	180f8 <__aeabi_fsub>
   14250:	4603      	mov	r3, r0
   14252:	4618      	mov	r0, r3
   14254:	f003 fbc6 	bl	179e4 <__aeabi_f2d>
   14258:	4604      	mov	r4, r0
   1425a:	460d      	mov	r5, r1
   1425c:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   14260:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14264:	681a      	ldr	r2, [r3, #0]
   14266:	f240 4328 	movw	r3, #1064	; 0x428
   1426a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1426e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14270:	4610      	mov	r0, r2
   14272:	4619      	mov	r1, r3
   14274:	f003 ff40 	bl	180f8 <__aeabi_fsub>
   14278:	4603      	mov	r3, r0
   1427a:	4618      	mov	r0, r3
   1427c:	f003 fbb2 	bl	179e4 <__aeabi_f2d>
   14280:	4602      	mov	r2, r0
   14282:	460b      	mov	r3, r1
   14284:	4620      	mov	r0, r4
   14286:	4629      	mov	r1, r5
   14288:	f001 fbfa 	bl	15a80 <pp_atan2>
   1428c:	4602      	mov	r2, r0
   1428e:	460b      	mov	r3, r1
   14290:	4610      	mov	r0, r2
   14292:	4619      	mov	r1, r3
   14294:	f003 fedc 	bl	18050 <__aeabi_d2f>
   14298:	4603      	mov	r3, r0
   1429a:	607b      	str	r3, [r7, #4]
   1429c:	6878      	ldr	r0, [r7, #4]
   1429e:	f003 fba1 	bl	179e4 <__aeabi_f2d>
   142a2:	4604      	mov	r4, r0
   142a4:	460d      	mov	r5, r1
   142a6:	f24c 43e4 	movw	r3, #50404	; 0xc4e4
   142aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142ae:	681b      	ldr	r3, [r3, #0]
   142b0:	4618      	mov	r0, r3
   142b2:	f04f 0100 	mov.w	r1, #0
   142b6:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   142ba:	f004 f827 	bl	1830c <__aeabi_fmul>
   142be:	4603      	mov	r3, r0
   142c0:	4618      	mov	r0, r3
   142c2:	f003 fb8f 	bl	179e4 <__aeabi_f2d>
   142c6:	4602      	mov	r2, r0
   142c8:	460b      	mov	r3, r1
   142ca:	f04f 0000 	mov.w	r0, #0
   142ce:	f04f 0100 	mov.w	r1, #0
   142d2:	f2c4 0114 	movt	r1, #16404	; 0x4014
   142d6:	f003 fd03 	bl	17ce0 <__aeabi_ddiv>
   142da:	4602      	mov	r2, r0
   142dc:	460b      	mov	r3, r1
   142de:	4620      	mov	r0, r4
   142e0:	4629      	mov	r1, r5
   142e2:	f003 fa21 	bl	17728 <__adddf3>
   142e6:	4602      	mov	r2, r0
   142e8:	460b      	mov	r3, r1
   142ea:	4610      	mov	r0, r2
   142ec:	4619      	mov	r1, r3
   142ee:	f003 feaf 	bl	18050 <__aeabi_d2f>
   142f2:	4603      	mov	r3, r0
   142f4:	603b      	str	r3, [r7, #0]
   142f6:	f240 4328 	movw	r3, #1064	; 0x428
   142fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14300:	4618      	mov	r0, r3
   14302:	f003 fb6f 	bl	179e4 <__aeabi_f2d>
   14306:	4604      	mov	r4, r0
   14308:	460d      	mov	r5, r1
   1430a:	6838      	ldr	r0, [r7, #0]
   1430c:	f003 fb6a 	bl	179e4 <__aeabi_f2d>
   14310:	4602      	mov	r2, r0
   14312:	460b      	mov	r3, r1
   14314:	4610      	mov	r0, r2
   14316:	4619      	mov	r1, r3
   14318:	a3b5      	add	r3, pc, #724	; (adr r3, 145f0 <auto_nav+0x21b0>)
   1431a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1431e:	f003 fa03 	bl	17728 <__adddf3>
   14322:	4602      	mov	r2, r0
   14324:	460b      	mov	r3, r1
   14326:	4610      	mov	r0, r2
   14328:	4619      	mov	r1, r3
   1432a:	f001 fc69 	bl	15c00 <pp_sin>
   1432e:	4602      	mov	r2, r0
   14330:	460b      	mov	r3, r1
   14332:	4610      	mov	r0, r2
   14334:	4619      	mov	r1, r3
   14336:	f04f 0200 	mov.w	r2, #0
   1433a:	f04f 0300 	mov.w	r3, #0
   1433e:	f2c4 0359 	movt	r3, #16473	; 0x4059
   14342:	f003 fba3 	bl	17a8c <__aeabi_dmul>
   14346:	4602      	mov	r2, r0
   14348:	460b      	mov	r3, r1
   1434a:	4620      	mov	r0, r4
   1434c:	4629      	mov	r1, r5
   1434e:	f003 f9eb 	bl	17728 <__adddf3>
   14352:	4602      	mov	r2, r0
   14354:	460b      	mov	r3, r1
   14356:	4610      	mov	r0, r2
   14358:	4619      	mov	r1, r3
   1435a:	f003 fe79 	bl	18050 <__aeabi_d2f>
   1435e:	4606      	mov	r6, r0
   14360:	f240 4328 	movw	r3, #1064	; 0x428
   14364:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1436a:	4618      	mov	r0, r3
   1436c:	f003 fb3a 	bl	179e4 <__aeabi_f2d>
   14370:	4604      	mov	r4, r0
   14372:	460d      	mov	r5, r1
   14374:	6838      	ldr	r0, [r7, #0]
   14376:	f003 fb35 	bl	179e4 <__aeabi_f2d>
   1437a:	4602      	mov	r2, r0
   1437c:	460b      	mov	r3, r1
   1437e:	4610      	mov	r0, r2
   14380:	4619      	mov	r1, r3
   14382:	f001 fc3d 	bl	15c00 <pp_sin>
   14386:	4602      	mov	r2, r0
   14388:	460b      	mov	r3, r1
   1438a:	4610      	mov	r0, r2
   1438c:	4619      	mov	r1, r3
   1438e:	f04f 0200 	mov.w	r2, #0
   14392:	f04f 0300 	mov.w	r3, #0
   14396:	f2c4 0359 	movt	r3, #16473	; 0x4059
   1439a:	f003 fb77 	bl	17a8c <__aeabi_dmul>
   1439e:	4602      	mov	r2, r0
   143a0:	460b      	mov	r3, r1
   143a2:	4620      	mov	r0, r4
   143a4:	4629      	mov	r1, r5
   143a6:	f003 f9bf 	bl	17728 <__adddf3>
   143aa:	4602      	mov	r2, r0
   143ac:	460b      	mov	r3, r1
   143ae:	4610      	mov	r0, r2
   143b0:	4619      	mov	r1, r3
   143b2:	f003 fe4d 	bl	18050 <__aeabi_d2f>
   143b6:	4603      	mov	r3, r0
   143b8:	4630      	mov	r0, r6
   143ba:	4619      	mov	r1, r3
   143bc:	f000 fa04 	bl	147c8 <fly_to_xy>
   143c0:	6838      	ldr	r0, [r7, #0]
   143c2:	f003 fb0f 	bl	179e4 <__aeabi_f2d>
   143c6:	4602      	mov	r2, r0
   143c8:	460b      	mov	r3, r1
   143ca:	a189      	add	r1, pc, #548	; (adr r1, 145f0 <auto_nav+0x21b0>)
   143cc:	e9d1 0100 	ldrd	r0, r1, [r1]
   143d0:	f003 f9a8 	bl	17724 <__aeabi_dsub>
   143d4:	4602      	mov	r2, r0
   143d6:	460b      	mov	r3, r1
   143d8:	4610      	mov	r0, r2
   143da:	4619      	mov	r1, r3
   143dc:	a386      	add	r3, pc, #536	; (adr r3, 145f8 <auto_nav+0x21b8>)
   143de:	e9d3 2300 	ldrd	r2, r3, [r3]
   143e2:	f003 fc7d 	bl	17ce0 <__aeabi_ddiv>
   143e6:	4602      	mov	r2, r0
   143e8:	460b      	mov	r3, r1
   143ea:	4610      	mov	r0, r2
   143ec:	4619      	mov	r1, r3
   143ee:	f04f 0200 	mov.w	r2, #0
   143f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   143f6:	f2c4 0366 	movt	r3, #16486	; 0x4066
   143fa:	f003 fb47 	bl	17a8c <__aeabi_dmul>
   143fe:	4602      	mov	r2, r0
   14400:	460b      	mov	r3, r1
   14402:	4610      	mov	r0, r2
   14404:	4619      	mov	r1, r3
   14406:	f003 fe23 	bl	18050 <__aeabi_d2f>
   1440a:	4602      	mov	r2, r0
   1440c:	f24c 236c 	movw	r3, #49772	; 0xc26c
   14410:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14414:	601a      	str	r2, [r3, #0]
   14416:	e012      	b.n	1443e <auto_nav+0x1ffe>
   14418:	f24c 236c 	movw	r3, #49772	; 0xc26c
   1441c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14420:	681b      	ldr	r3, [r3, #0]
   14422:	4618      	mov	r0, r3
   14424:	f04f 0100 	mov.w	r1, #0
   14428:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1442c:	f003 fe66 	bl	180fc <__addsf3>
   14430:	4603      	mov	r3, r0
   14432:	461a      	mov	r2, r3
   14434:	f24c 236c 	movw	r3, #49772	; 0xc26c
   14438:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1443c:	601a      	str	r2, [r3, #0]
   1443e:	f24c 236c 	movw	r3, #49772	; 0xc26c
   14442:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14446:	681b      	ldr	r3, [r3, #0]
   14448:	4618      	mov	r0, r3
   1444a:	f04f 0100 	mov.w	r1, #0
   1444e:	f004 f8fb 	bl	18648 <__aeabi_fcmplt>
   14452:	4603      	mov	r3, r0
   14454:	2b00      	cmp	r3, #0
   14456:	d1df      	bne.n	14418 <auto_nav+0x1fd8>
   14458:	e012      	b.n	14480 <auto_nav+0x2040>
   1445a:	f24c 236c 	movw	r3, #49772	; 0xc26c
   1445e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14462:	681b      	ldr	r3, [r3, #0]
   14464:	4618      	mov	r0, r3
   14466:	f04f 0100 	mov.w	r1, #0
   1446a:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1446e:	f003 fe43 	bl	180f8 <__aeabi_fsub>
   14472:	4603      	mov	r3, r0
   14474:	461a      	mov	r2, r3
   14476:	f24c 236c 	movw	r3, #49772	; 0xc26c
   1447a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1447e:	601a      	str	r2, [r3, #0]
   14480:	f24c 236c 	movw	r3, #49772	; 0xc26c
   14484:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14488:	681b      	ldr	r3, [r3, #0]
   1448a:	4618      	mov	r0, r3
   1448c:	f04f 0100 	mov.w	r1, #0
   14490:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14494:	f004 f8ec 	bl	18670 <__aeabi_fcmpge>
   14498:	4603      	mov	r3, r0
   1449a:	2b00      	cmp	r3, #0
   1449c:	d1dd      	bne.n	1445a <auto_nav+0x201a>
          if (Qdr(180)) NextStage();
   1449e:	f24c 236c 	movw	r3, #49772	; 0xc26c
   144a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   144a6:	681b      	ldr	r3, [r3, #0]
   144a8:	4618      	mov	r0, r3
   144aa:	f04f 0100 	mov.w	r1, #0
   144ae:	f2c4 3134 	movt	r1, #17204	; 0x4334
   144b2:	f004 f8e7 	bl	18684 <__aeabi_fcmpgt>
   144b6:	4603      	mov	r3, r0
   144b8:	2b00      	cmp	r3, #0
   144ba:	d100      	bne.n	144be <auto_nav+0x207e>
          return;
   144bc:	e092      	b.n	145e4 <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   144be:	f24c 236c 	movw	r3, #49772	; 0xc26c
   144c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   144c6:	681b      	ldr	r3, [r3, #0]
   144c8:	4618      	mov	r0, r3
   144ca:	f04f 0100 	mov.w	r1, #0
   144ce:	f2c4 313e 	movt	r1, #17214	; 0x433e
   144d2:	f004 f8b9 	bl	18648 <__aeabi_fcmplt>
   144d6:	4603      	mov	r3, r0
   144d8:	2b00      	cmp	r3, #0
   144da:	d100      	bne.n	144de <auto_nav+0x209e>
          return;
   144dc:	e082      	b.n	145e4 <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   144de:	f24c 2350 	movw	r3, #49744	; 0xc250
   144e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   144e6:	781b      	ldrb	r3, [r3, #0]
   144e8:	3301      	adds	r3, #1
   144ea:	b2da      	uxtb	r2, r3
   144ec:	f24c 2350 	movw	r3, #49744	; 0xc250
   144f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   144f4:	701a      	strb	r2, [r3, #0]
   144f6:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   144fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   144fe:	681a      	ldr	r2, [r3, #0]
   14500:	f24c 2354 	movw	r3, #49748	; 0xc254
   14504:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14508:	601a      	str	r2, [r3, #0]
   1450a:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   1450e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14512:	681a      	ldr	r2, [r3, #0]
   14514:	f24c 2358 	movw	r3, #49752	; 0xc258
   14518:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1451c:	601a      	str	r2, [r3, #0]
   1451e:	f24c 2364 	movw	r3, #49764	; 0xc264
   14522:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14526:	2200      	movs	r2, #0
   14528:	801a      	strh	r2, [r3, #0]
   1452a:	f24c 2368 	movw	r3, #49768	; 0xc268
   1452e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14532:	f04f 0200 	mov.w	r2, #0
   14536:	601a      	str	r2, [r3, #0]
   14538:	e054      	b.n	145e4 <auto_nav+0x21a4>
          return;
    }
    else if (nav_stage == 3) 
   1453a:	f24c 2350 	movw	r3, #49744	; 0xc250
   1453e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14542:	781b      	ldrb	r3, [r3, #0]
   14544:	2b03      	cmp	r3, #3
   14546:	d106      	bne.n	14556 <auto_nav+0x2116>
    {
	  nav_stage = 3;
   14548:	f24c 2350 	movw	r3, #49744	; 0xc250
   1454c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14550:	2203      	movs	r2, #3
   14552:	701a      	strb	r2, [r3, #0]
          Goto(while_7)
   14554:	e44b      	b.n	13dee <auto_nav+0x19ae>
    }
    else if (nav_stage == 4)
   14556:	f24c 2350 	movw	r3, #49744	; 0xc250
   1455a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1455e:	781b      	ldrb	r3, [r3, #0]
   14560:	2b04      	cmp	r3, #4
   14562:	d13f      	bne.n	145e4 <auto_nav+0x21a4>
    {
	Label(endwhile_8)
	nav_stage = 4;
   14564:	f24c 2350 	movw	r3, #49744	; 0xc250
   14568:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1456c:	2204      	movs	r2, #4
   1456e:	701a      	strb	r2, [r3, #0]
        NextBlock()
   14570:	f24c 2351 	movw	r3, #49745	; 0xc251
   14574:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14578:	781b      	ldrb	r3, [r3, #0]
   1457a:	3301      	adds	r3, #1
   1457c:	b2da      	uxtb	r2, r3
   1457e:	f24c 2351 	movw	r3, #49745	; 0xc251
   14582:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14586:	701a      	strb	r2, [r3, #0]
   14588:	f24c 2350 	movw	r3, #49744	; 0xc250
   1458c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14590:	2200      	movs	r2, #0
   14592:	701a      	strb	r2, [r3, #0]
   14594:	f24c 2366 	movw	r3, #49766	; 0xc266
   14598:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1459c:	2200      	movs	r2, #0
   1459e:	801a      	strh	r2, [r3, #0]
   145a0:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   145a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145a8:	681a      	ldr	r2, [r3, #0]
   145aa:	f24c 2354 	movw	r3, #49748	; 0xc254
   145ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145b2:	601a      	str	r2, [r3, #0]
   145b4:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   145b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145bc:	681a      	ldr	r2, [r3, #0]
   145be:	f24c 2358 	movw	r3, #49752	; 0xc258
   145c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145c6:	601a      	str	r2, [r3, #0]
   145c8:	f24c 2364 	movw	r3, #49764	; 0xc264
   145cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145d0:	2200      	movs	r2, #0
   145d2:	801a      	strh	r2, [r3, #0]
   145d4:	f24c 2368 	movw	r3, #49768	; 0xc268
   145d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145dc:	f04f 0200 	mov.w	r2, #0
   145e0:	601a      	str	r2, [r3, #0]
   145e2:	bf00      	nop
    else { }
}
else { }

//#endif
}
   145e4:	372c      	adds	r7, #44	; 0x2c
   145e6:	46bd      	mov	sp, r7
   145e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   145ea:	bf00      	nop
   145ec:	f3af 8000 	nop.w
   145f0:	54442d18 	.word	0x54442d18
   145f4:	3ff921fb 	.word	0x3ff921fb
   145f8:	54442d18 	.word	0x54442d18
   145fc:	400921fb 	.word	0x400921fb

00014600 <approaching>:
const uint8_t nb_waypoint = NB_WAYPOINT;

struct point waypoints[NB_WAYPOINT+1] = WAYPOINTS;

static float carrot;
static bool_t approaching(uint8_t wp) {
   14600:	b590      	push	{r4, r7, lr}
   14602:	b087      	sub	sp, #28
   14604:	af00      	add	r7, sp, #0
   14606:	4603      	mov	r3, r0
   14608:	71fb      	strb	r3, [r7, #7]
  float pw_x = waypoints[wp].x - estimator_x;
   1460a:	79f9      	ldrb	r1, [r7, #7]
   1460c:	f240 4228 	movw	r2, #1064	; 0x428
   14610:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14614:	460b      	mov	r3, r1
   14616:	005b      	lsls	r3, r3, #1
   14618:	440b      	add	r3, r1
   1461a:	009b      	lsls	r3, r3, #2
   1461c:	4413      	add	r3, r2
   1461e:	681a      	ldr	r2, [r3, #0]
   14620:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   14624:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14628:	681b      	ldr	r3, [r3, #0]
   1462a:	4610      	mov	r0, r2
   1462c:	4619      	mov	r1, r3
   1462e:	f003 fd63 	bl	180f8 <__aeabi_fsub>
   14632:	4603      	mov	r3, r0
   14634:	617b      	str	r3, [r7, #20]
  float pw_y = waypoints[wp].y - estimator_y;
   14636:	79f9      	ldrb	r1, [r7, #7]
   14638:	f240 4228 	movw	r2, #1064	; 0x428
   1463c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14640:	460b      	mov	r3, r1
   14642:	005b      	lsls	r3, r3, #1
   14644:	440b      	add	r3, r1
   14646:	009b      	lsls	r3, r3, #2
   14648:	4413      	add	r3, r2
   1464a:	3304      	adds	r3, #4
   1464c:	681a      	ldr	r2, [r3, #0]
   1464e:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   14652:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14656:	681b      	ldr	r3, [r3, #0]
   14658:	4610      	mov	r0, r2
   1465a:	4619      	mov	r1, r3
   1465c:	f003 fd4c 	bl	180f8 <__aeabi_fsub>
   14660:	4603      	mov	r3, r0
   14662:	613b      	str	r3, [r7, #16]
  float scal_prod;//changes for PowerPc Fev-06

  dist2_to_wp = pw_x*pw_x + pw_y *pw_y;
   14664:	6978      	ldr	r0, [r7, #20]
   14666:	6979      	ldr	r1, [r7, #20]
   14668:	f003 fe50 	bl	1830c <__aeabi_fmul>
   1466c:	4603      	mov	r3, r0
   1466e:	461c      	mov	r4, r3
   14670:	6938      	ldr	r0, [r7, #16]
   14672:	6939      	ldr	r1, [r7, #16]
   14674:	f003 fe4a 	bl	1830c <__aeabi_fmul>
   14678:	4603      	mov	r3, r0
   1467a:	4620      	mov	r0, r4
   1467c:	4619      	mov	r1, r3
   1467e:	f003 fd3d 	bl	180fc <__addsf3>
   14682:	4603      	mov	r3, r0
   14684:	461a      	mov	r2, r3
   14686:	f24c 2384 	movw	r3, #49796	; 0xc284
   1468a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1468e:	601a      	str	r2, [r3, #0]
  carrot = CARROT * estimator_hspeed_mod;
   14690:	f24c 43e4 	movw	r3, #50404	; 0xc4e4
   14694:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14698:	681b      	ldr	r3, [r3, #0]
   1469a:	4618      	mov	r0, r3
   1469c:	f04f 0100 	mov.w	r1, #0
   146a0:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   146a4:	f003 fe32 	bl	1830c <__aeabi_fmul>
   146a8:	4603      	mov	r3, r0
   146aa:	461a      	mov	r2, r3
   146ac:	f24c 2390 	movw	r3, #49808	; 0xc290
   146b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146b4:	601a      	str	r2, [r3, #0]
  carrot = (carrot < 40 ? 40 : carrot);
   146b6:	f24c 2390 	movw	r3, #49808	; 0xc290
   146ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146be:	681b      	ldr	r3, [r3, #0]
   146c0:	4618      	mov	r0, r3
   146c2:	f04f 0100 	mov.w	r1, #0
   146c6:	f2c4 2120 	movt	r1, #16928	; 0x4220
   146ca:	f003 ffbd 	bl	18648 <__aeabi_fcmplt>
   146ce:	4603      	mov	r3, r0
   146d0:	2b00      	cmp	r3, #0
   146d2:	d004      	beq.n	146de <approaching+0xde>
   146d4:	f04f 0200 	mov.w	r2, #0
   146d8:	f2c4 2220 	movt	r2, #16928	; 0x4220
   146dc:	e004      	b.n	146e8 <approaching+0xe8>
   146de:	f24c 2390 	movw	r3, #49808	; 0xc290
   146e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146e6:	681a      	ldr	r2, [r3, #0]
   146e8:	f24c 2390 	movw	r3, #49808	; 0xc290
   146ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146f0:	601a      	str	r2, [r3, #0]
  if (dist2_to_wp < carrot*carrot)
   146f2:	f24c 2390 	movw	r3, #49808	; 0xc290
   146f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146fa:	681a      	ldr	r2, [r3, #0]
   146fc:	f24c 2390 	movw	r3, #49808	; 0xc290
   14700:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14704:	681b      	ldr	r3, [r3, #0]
   14706:	4610      	mov	r0, r2
   14708:	4619      	mov	r1, r3
   1470a:	f003 fdff 	bl	1830c <__aeabi_fmul>
   1470e:	4603      	mov	r3, r0
   14710:	461a      	mov	r2, r3
   14712:	f24c 2384 	movw	r3, #49796	; 0xc284
   14716:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1471a:	681b      	ldr	r3, [r3, #0]
   1471c:	4610      	mov	r0, r2
   1471e:	4619      	mov	r1, r3
   14720:	f003 ffb0 	bl	18684 <__aeabi_fcmpgt>
   14724:	4603      	mov	r3, r0
   14726:	2b00      	cmp	r3, #0
   14728:	d001      	beq.n	1472e <approaching+0x12e>
    return TRUE;
   1472a:	2301      	movs	r3, #1
   1472c:	e048      	b.n	147c0 <approaching+0x1c0>

  scal_prod = (waypoints[wp].x - last_x) * pw_x + (waypoints[wp].y - last_y) * pw_y;
   1472e:	79f9      	ldrb	r1, [r7, #7]
   14730:	f240 4228 	movw	r2, #1064	; 0x428
   14734:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14738:	460b      	mov	r3, r1
   1473a:	005b      	lsls	r3, r3, #1
   1473c:	440b      	add	r3, r1
   1473e:	009b      	lsls	r3, r3, #2
   14740:	4413      	add	r3, r2
   14742:	681a      	ldr	r2, [r3, #0]
   14744:	f24c 2354 	movw	r3, #49748	; 0xc254
   14748:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1474c:	681b      	ldr	r3, [r3, #0]
   1474e:	4610      	mov	r0, r2
   14750:	4619      	mov	r1, r3
   14752:	f003 fcd1 	bl	180f8 <__aeabi_fsub>
   14756:	4603      	mov	r3, r0
   14758:	4618      	mov	r0, r3
   1475a:	6979      	ldr	r1, [r7, #20]
   1475c:	f003 fdd6 	bl	1830c <__aeabi_fmul>
   14760:	4603      	mov	r3, r0
   14762:	461c      	mov	r4, r3
   14764:	79f9      	ldrb	r1, [r7, #7]
   14766:	f240 4228 	movw	r2, #1064	; 0x428
   1476a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1476e:	460b      	mov	r3, r1
   14770:	005b      	lsls	r3, r3, #1
   14772:	440b      	add	r3, r1
   14774:	009b      	lsls	r3, r3, #2
   14776:	4413      	add	r3, r2
   14778:	3304      	adds	r3, #4
   1477a:	681a      	ldr	r2, [r3, #0]
   1477c:	f24c 2358 	movw	r3, #49752	; 0xc258
   14780:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14784:	681b      	ldr	r3, [r3, #0]
   14786:	4610      	mov	r0, r2
   14788:	4619      	mov	r1, r3
   1478a:	f003 fcb5 	bl	180f8 <__aeabi_fsub>
   1478e:	4603      	mov	r3, r0
   14790:	4618      	mov	r0, r3
   14792:	6939      	ldr	r1, [r7, #16]
   14794:	f003 fdba 	bl	1830c <__aeabi_fmul>
   14798:	4603      	mov	r3, r0
   1479a:	4620      	mov	r0, r4
   1479c:	4619      	mov	r1, r3
   1479e:	f003 fcad 	bl	180fc <__addsf3>
   147a2:	4603      	mov	r3, r0
   147a4:	60fb      	str	r3, [r7, #12]
  
  return (scal_prod < 0);
   147a6:	2301      	movs	r3, #1
   147a8:	461c      	mov	r4, r3
   147aa:	68f8      	ldr	r0, [r7, #12]
   147ac:	f04f 0100 	mov.w	r1, #0
   147b0:	f003 ff4a 	bl	18648 <__aeabi_fcmplt>
   147b4:	4603      	mov	r3, r0
   147b6:	2b00      	cmp	r3, #0
   147b8:	d101      	bne.n	147be <approaching+0x1be>
   147ba:	2300      	movs	r3, #0
   147bc:	461c      	mov	r4, r3
   147be:	b2e3      	uxtb	r3, r4
}
   147c0:	4618      	mov	r0, r3
   147c2:	371c      	adds	r7, #28
   147c4:	46bd      	mov	sp, r7
   147c6:	bd90      	pop	{r4, r7, pc}

000147c8 <fly_to_xy>:

static inline void fly_to_xy(float x, float y) 
{ 
   147c8:	b5b0      	push	{r4, r5, r7, lr}
   147ca:	b082      	sub	sp, #8
   147cc:	af00      	add	r7, sp, #0
   147ce:	6078      	str	r0, [r7, #4]
   147d0:	6039      	str	r1, [r7, #0]
  desired_x = x;
   147d2:	f24c 2370 	movw	r3, #49776	; 0xc270
   147d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147da:	687a      	ldr	r2, [r7, #4]
   147dc:	601a      	str	r2, [r3, #0]
  desired_y = y;
   147de:	f24c 2374 	movw	r3, #49780	; 0xc274
   147e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147e6:	683a      	ldr	r2, [r7, #0]
   147e8:	601a      	str	r2, [r3, #0]
  desired_course = M_PI/2.-atan2(y - estimator_y, x - estimator_x);
   147ea:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   147ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147f2:	681b      	ldr	r3, [r3, #0]
   147f4:	6838      	ldr	r0, [r7, #0]
   147f6:	4619      	mov	r1, r3
   147f8:	f003 fc7e 	bl	180f8 <__aeabi_fsub>
   147fc:	4603      	mov	r3, r0
   147fe:	4618      	mov	r0, r3
   14800:	f003 f8f0 	bl	179e4 <__aeabi_f2d>
   14804:	4604      	mov	r4, r0
   14806:	460d      	mov	r5, r1
   14808:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   1480c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14810:	681b      	ldr	r3, [r3, #0]
   14812:	6878      	ldr	r0, [r7, #4]
   14814:	4619      	mov	r1, r3
   14816:	f003 fc6f 	bl	180f8 <__aeabi_fsub>
   1481a:	4603      	mov	r3, r0
   1481c:	4618      	mov	r0, r3
   1481e:	f003 f8e1 	bl	179e4 <__aeabi_f2d>
   14822:	4602      	mov	r2, r0
   14824:	460b      	mov	r3, r1
   14826:	4620      	mov	r0, r4
   14828:	4629      	mov	r1, r5
   1482a:	f001 f929 	bl	15a80 <pp_atan2>
   1482e:	4602      	mov	r2, r0
   14830:	460b      	mov	r3, r1
   14832:	a10b      	add	r1, pc, #44	; (adr r1, 14860 <fly_to_xy+0x98>)
   14834:	e9d1 0100 	ldrd	r0, r1, [r1]
   14838:	f002 ff74 	bl	17724 <__aeabi_dsub>
   1483c:	4602      	mov	r2, r0
   1483e:	460b      	mov	r3, r1
   14840:	4610      	mov	r0, r2
   14842:	4619      	mov	r1, r3
   14844:	f003 fc04 	bl	18050 <__aeabi_d2f>
   14848:	4602      	mov	r2, r0
   1484a:	f24c 233c 	movw	r3, #49724	; 0xc23c
   1484e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14852:	601a      	str	r2, [r3, #0]
}
   14854:	3708      	adds	r7, #8
   14856:	46bd      	mov	sp, r7
   14858:	bdb0      	pop	{r4, r5, r7, pc}
   1485a:	bf00      	nop
   1485c:	f3af 8000 	nop.w
   14860:	54442d18 	.word	0x54442d18
   14864:	3ff921fb 	.word	0x3ff921fb

00014868 <fly_to>:

static void fly_to(uint8_t wp) { 
   14868:	b580      	push	{r7, lr}
   1486a:	b082      	sub	sp, #8
   1486c:	af00      	add	r7, sp, #0
   1486e:	4603      	mov	r3, r0
   14870:	71fb      	strb	r3, [r7, #7]
  fly_to_xy(waypoints[wp].x, waypoints[wp].y);
   14872:	79f9      	ldrb	r1, [r7, #7]
   14874:	f240 4228 	movw	r2, #1064	; 0x428
   14878:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1487c:	460b      	mov	r3, r1
   1487e:	005b      	lsls	r3, r3, #1
   14880:	440b      	add	r3, r1
   14882:	009b      	lsls	r3, r3, #2
   14884:	4413      	add	r3, r2
   14886:	6818      	ldr	r0, [r3, #0]
   14888:	79f9      	ldrb	r1, [r7, #7]
   1488a:	f240 4228 	movw	r2, #1064	; 0x428
   1488e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14892:	460b      	mov	r3, r1
   14894:	005b      	lsls	r3, r3, #1
   14896:	440b      	add	r3, r1
   14898:	009b      	lsls	r3, r3, #2
   1489a:	4413      	add	r3, r2
   1489c:	3304      	adds	r3, #4
   1489e:	681b      	ldr	r3, [r3, #0]
   148a0:	4619      	mov	r1, r3
   148a2:	f7ff ff91 	bl	147c8 <fly_to_xy>
}
   148a6:	3708      	adds	r7, #8
   148a8:	46bd      	mov	sp, r7
   148aa:	bd80      	pop	{r7, pc}

000148ac <route_to>:

static float alpha, leg;
static void route_to(uint8_t _last_wp, uint8_t wp) 
{
   148ac:	b5b0      	push	{r4, r5, r7, lr}
   148ae:	b088      	sub	sp, #32
   148b0:	af00      	add	r7, sp, #0
   148b2:	4602      	mov	r2, r0
   148b4:	460b      	mov	r3, r1
   148b6:	71fa      	strb	r2, [r7, #7]
   148b8:	71bb      	strb	r3, [r7, #6]
  float last_wp_x = waypoints[_last_wp].x;
   148ba:	79f9      	ldrb	r1, [r7, #7]
   148bc:	f240 4228 	movw	r2, #1064	; 0x428
   148c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   148c4:	460b      	mov	r3, r1
   148c6:	005b      	lsls	r3, r3, #1
   148c8:	440b      	add	r3, r1
   148ca:	009b      	lsls	r3, r3, #2
   148cc:	4413      	add	r3, r2
   148ce:	681b      	ldr	r3, [r3, #0]
   148d0:	61fb      	str	r3, [r7, #28]
  float last_wp_y = waypoints[_last_wp].y;
   148d2:	79f9      	ldrb	r1, [r7, #7]
   148d4:	f240 4228 	movw	r2, #1064	; 0x428
   148d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   148dc:	460b      	mov	r3, r1
   148de:	005b      	lsls	r3, r3, #1
   148e0:	440b      	add	r3, r1
   148e2:	009b      	lsls	r3, r3, #2
   148e4:	4413      	add	r3, r2
   148e6:	3304      	adds	r3, #4
   148e8:	681b      	ldr	r3, [r3, #0]
   148ea:	61bb      	str	r3, [r7, #24]
  float leg_x = waypoints[wp].x - last_wp_x;
   148ec:	79b9      	ldrb	r1, [r7, #6]
   148ee:	f240 4228 	movw	r2, #1064	; 0x428
   148f2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   148f6:	460b      	mov	r3, r1
   148f8:	005b      	lsls	r3, r3, #1
   148fa:	440b      	add	r3, r1
   148fc:	009b      	lsls	r3, r3, #2
   148fe:	4413      	add	r3, r2
   14900:	681b      	ldr	r3, [r3, #0]
   14902:	4618      	mov	r0, r3
   14904:	69f9      	ldr	r1, [r7, #28]
   14906:	f003 fbf7 	bl	180f8 <__aeabi_fsub>
   1490a:	4603      	mov	r3, r0
   1490c:	617b      	str	r3, [r7, #20]
  float leg_y = waypoints[wp].y - last_wp_y;
   1490e:	79b9      	ldrb	r1, [r7, #6]
   14910:	f240 4228 	movw	r2, #1064	; 0x428
   14914:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14918:	460b      	mov	r3, r1
   1491a:	005b      	lsls	r3, r3, #1
   1491c:	440b      	add	r3, r1
   1491e:	009b      	lsls	r3, r3, #2
   14920:	4413      	add	r3, r2
   14922:	3304      	adds	r3, #4
   14924:	681b      	ldr	r3, [r3, #0]
   14926:	4618      	mov	r0, r3
   14928:	69b9      	ldr	r1, [r7, #24]
   1492a:	f003 fbe5 	bl	180f8 <__aeabi_fsub>
   1492e:	4603      	mov	r3, r0
   14930:	613b      	str	r3, [r7, #16]
  float leg2 = leg_x * leg_x + leg_y * leg_y;
   14932:	6978      	ldr	r0, [r7, #20]
   14934:	6979      	ldr	r1, [r7, #20]
   14936:	f003 fce9 	bl	1830c <__aeabi_fmul>
   1493a:	4603      	mov	r3, r0
   1493c:	461c      	mov	r4, r3
   1493e:	6938      	ldr	r0, [r7, #16]
   14940:	6939      	ldr	r1, [r7, #16]
   14942:	f003 fce3 	bl	1830c <__aeabi_fmul>
   14946:	4603      	mov	r3, r0
   14948:	4620      	mov	r0, r4
   1494a:	4619      	mov	r1, r3
   1494c:	f003 fbd6 	bl	180fc <__addsf3>
   14950:	4603      	mov	r3, r0
   14952:	60fb      	str	r3, [r7, #12]
  alpha = ((estimator_x - last_wp_x) * leg_x + (estimator_y - last_wp_y) * leg_y) / leg2;
   14954:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   14958:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1495c:	681b      	ldr	r3, [r3, #0]
   1495e:	4618      	mov	r0, r3
   14960:	69f9      	ldr	r1, [r7, #28]
   14962:	f003 fbc9 	bl	180f8 <__aeabi_fsub>
   14966:	4603      	mov	r3, r0
   14968:	4618      	mov	r0, r3
   1496a:	6979      	ldr	r1, [r7, #20]
   1496c:	f003 fcce 	bl	1830c <__aeabi_fmul>
   14970:	4603      	mov	r3, r0
   14972:	461c      	mov	r4, r3
   14974:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   14978:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1497c:	681b      	ldr	r3, [r3, #0]
   1497e:	4618      	mov	r0, r3
   14980:	69b9      	ldr	r1, [r7, #24]
   14982:	f003 fbb9 	bl	180f8 <__aeabi_fsub>
   14986:	4603      	mov	r3, r0
   14988:	4618      	mov	r0, r3
   1498a:	6939      	ldr	r1, [r7, #16]
   1498c:	f003 fcbe 	bl	1830c <__aeabi_fmul>
   14990:	4603      	mov	r3, r0
   14992:	4620      	mov	r0, r4
   14994:	4619      	mov	r1, r3
   14996:	f003 fbb1 	bl	180fc <__addsf3>
   1499a:	4603      	mov	r3, r0
   1499c:	4618      	mov	r0, r3
   1499e:	68f9      	ldr	r1, [r7, #12]
   149a0:	f003 fd68 	bl	18474 <__aeabi_fdiv>
   149a4:	4603      	mov	r3, r0
   149a6:	461a      	mov	r2, r3
   149a8:	f24c 2394 	movw	r3, #49812	; 0xc294
   149ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   149b0:	601a      	str	r2, [r3, #0]
  alpha = Max(alpha, 0.);
   149b2:	f24c 2394 	movw	r3, #49812	; 0xc294
   149b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   149ba:	681b      	ldr	r3, [r3, #0]
   149bc:	4618      	mov	r0, r3
   149be:	f04f 0100 	mov.w	r1, #0
   149c2:	f003 fe55 	bl	18670 <__aeabi_fcmpge>
   149c6:	4603      	mov	r3, r0
   149c8:	2b00      	cmp	r3, #0
   149ca:	d005      	beq.n	149d8 <route_to+0x12c>
   149cc:	f24c 2394 	movw	r3, #49812	; 0xc294
   149d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   149d4:	681a      	ldr	r2, [r3, #0]
   149d6:	e001      	b.n	149dc <route_to+0x130>
   149d8:	f04f 0200 	mov.w	r2, #0
   149dc:	f24c 2394 	movw	r3, #49812	; 0xc294
   149e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   149e4:	601a      	str	r2, [r3, #0]
  leg = sqrt(leg2);
   149e6:	68f8      	ldr	r0, [r7, #12]
   149e8:	f002 fffc 	bl	179e4 <__aeabi_f2d>
   149ec:	4602      	mov	r2, r0
   149ee:	460b      	mov	r3, r1
   149f0:	4610      	mov	r0, r2
   149f2:	4619      	mov	r1, r3
   149f4:	f001 f9f4 	bl	15de0 <pp_sqrt>
   149f8:	4602      	mov	r2, r0
   149fa:	460b      	mov	r3, r1
   149fc:	4610      	mov	r0, r2
   149fe:	4619      	mov	r1, r3
   14a00:	f003 fb26 	bl	18050 <__aeabi_d2f>
   14a04:	4602      	mov	r2, r0
   14a06:	f24c 2398 	movw	r3, #49816	; 0xc298
   14a0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a0e:	601a      	str	r2, [r3, #0]
  alpha += Max(carrot / leg, 0.); /* carrot computed in approaching() */
   14a10:	f24c 2394 	movw	r3, #49812	; 0xc294
   14a14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a18:	681b      	ldr	r3, [r3, #0]
   14a1a:	4618      	mov	r0, r3
   14a1c:	f002 ffe2 	bl	179e4 <__aeabi_f2d>
   14a20:	4604      	mov	r4, r0
   14a22:	460d      	mov	r5, r1
   14a24:	f24c 2390 	movw	r3, #49808	; 0xc290
   14a28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a2c:	681a      	ldr	r2, [r3, #0]
   14a2e:	f24c 2398 	movw	r3, #49816	; 0xc298
   14a32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a36:	681b      	ldr	r3, [r3, #0]
   14a38:	4610      	mov	r0, r2
   14a3a:	4619      	mov	r1, r3
   14a3c:	f003 fd1a 	bl	18474 <__aeabi_fdiv>
   14a40:	4603      	mov	r3, r0
   14a42:	4618      	mov	r0, r3
   14a44:	f04f 0100 	mov.w	r1, #0
   14a48:	f003 fe12 	bl	18670 <__aeabi_fcmpge>
   14a4c:	4603      	mov	r3, r0
   14a4e:	2b00      	cmp	r3, #0
   14a50:	d014      	beq.n	14a7c <route_to+0x1d0>
   14a52:	f24c 2390 	movw	r3, #49808	; 0xc290
   14a56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a5a:	681a      	ldr	r2, [r3, #0]
   14a5c:	f24c 2398 	movw	r3, #49816	; 0xc298
   14a60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a64:	681b      	ldr	r3, [r3, #0]
   14a66:	4610      	mov	r0, r2
   14a68:	4619      	mov	r1, r3
   14a6a:	f003 fd03 	bl	18474 <__aeabi_fdiv>
   14a6e:	4603      	mov	r3, r0
   14a70:	4618      	mov	r0, r3
   14a72:	f002 ffb7 	bl	179e4 <__aeabi_f2d>
   14a76:	4602      	mov	r2, r0
   14a78:	460b      	mov	r3, r1
   14a7a:	e003      	b.n	14a84 <route_to+0x1d8>
   14a7c:	f04f 0200 	mov.w	r2, #0
   14a80:	f04f 0300 	mov.w	r3, #0
   14a84:	4620      	mov	r0, r4
   14a86:	4629      	mov	r1, r5
   14a88:	f002 fe4e 	bl	17728 <__adddf3>
   14a8c:	4602      	mov	r2, r0
   14a8e:	460b      	mov	r3, r1
   14a90:	4610      	mov	r0, r2
   14a92:	4619      	mov	r1, r3
   14a94:	f003 fadc 	bl	18050 <__aeabi_d2f>
   14a98:	4602      	mov	r2, r0
   14a9a:	f24c 2394 	movw	r3, #49812	; 0xc294
   14a9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14aa2:	601a      	str	r2, [r3, #0]
  alpha = Min(1., alpha);
   14aa4:	f24c 2394 	movw	r3, #49812	; 0xc294
   14aa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14aac:	681b      	ldr	r3, [r3, #0]
   14aae:	4618      	mov	r0, r3
   14ab0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   14ab4:	f003 fddc 	bl	18670 <__aeabi_fcmpge>
   14ab8:	4603      	mov	r3, r0
   14aba:	2b00      	cmp	r3, #0
   14abc:	d002      	beq.n	14ac4 <route_to+0x218>
   14abe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   14ac2:	e004      	b.n	14ace <route_to+0x222>
   14ac4:	f24c 2394 	movw	r3, #49812	; 0xc294
   14ac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14acc:	681a      	ldr	r2, [r3, #0]
   14ace:	f24c 2394 	movw	r3, #49812	; 0xc294
   14ad2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ad6:	601a      	str	r2, [r3, #0]
  fly_to_xy(last_wp_x + alpha*leg_x, last_wp_y + alpha*leg_y);
   14ad8:	f24c 2394 	movw	r3, #49812	; 0xc294
   14adc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ae0:	681b      	ldr	r3, [r3, #0]
   14ae2:	4618      	mov	r0, r3
   14ae4:	6979      	ldr	r1, [r7, #20]
   14ae6:	f003 fc11 	bl	1830c <__aeabi_fmul>
   14aea:	4603      	mov	r3, r0
   14aec:	4618      	mov	r0, r3
   14aee:	69f9      	ldr	r1, [r7, #28]
   14af0:	f003 fb04 	bl	180fc <__addsf3>
   14af4:	4603      	mov	r3, r0
   14af6:	461c      	mov	r4, r3
   14af8:	f24c 2394 	movw	r3, #49812	; 0xc294
   14afc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b00:	681b      	ldr	r3, [r3, #0]
   14b02:	4618      	mov	r0, r3
   14b04:	6939      	ldr	r1, [r7, #16]
   14b06:	f003 fc01 	bl	1830c <__aeabi_fmul>
   14b0a:	4603      	mov	r3, r0
   14b0c:	4618      	mov	r0, r3
   14b0e:	69b9      	ldr	r1, [r7, #24]
   14b10:	f003 faf4 	bl	180fc <__addsf3>
   14b14:	4603      	mov	r3, r0
   14b16:	4620      	mov	r0, r4
   14b18:	4619      	mov	r1, r3
   14b1a:	f7ff fe55 	bl	147c8 <fly_to_xy>
}
   14b1e:	3720      	adds	r7, #32
   14b20:	46bd      	mov	sp, r7
   14b22:	bdb0      	pop	{r4, r5, r7, pc}

00014b24 <compute_dist2_to_home>:
  float last_alt = waypoints[_last_wp].a;
  desired_altitude = last_alt + alpha * (waypoints[wp].a - last_alt);
  pre_climb = NOMINAL_AIRSPEED * (waypoints[wp].a - last_alt) / leg;
}*/

static inline void compute_dist2_to_home(void) {
   14b24:	b590      	push	{r4, r7, lr}
   14b26:	b083      	sub	sp, #12
   14b28:	af00      	add	r7, sp, #0
  float ph_x = waypoints[WP_HOME].x - estimator_x;
   14b2a:	f240 4328 	movw	r3, #1064	; 0x428
   14b2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b32:	681a      	ldr	r2, [r3, #0]
   14b34:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   14b38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b3c:	681b      	ldr	r3, [r3, #0]
   14b3e:	4610      	mov	r0, r2
   14b40:	4619      	mov	r1, r3
   14b42:	f003 fad9 	bl	180f8 <__aeabi_fsub>
   14b46:	4603      	mov	r3, r0
   14b48:	607b      	str	r3, [r7, #4]
  float ph_y = waypoints[WP_HOME].y - estimator_y;
   14b4a:	f240 4328 	movw	r3, #1064	; 0x428
   14b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b52:	685a      	ldr	r2, [r3, #4]
   14b54:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   14b58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b5c:	681b      	ldr	r3, [r3, #0]
   14b5e:	4610      	mov	r0, r2
   14b60:	4619      	mov	r1, r3
   14b62:	f003 fac9 	bl	180f8 <__aeabi_fsub>
   14b66:	4603      	mov	r3, r0
   14b68:	603b      	str	r3, [r7, #0]
  dist2_to_home = ph_x*ph_x + ph_y *ph_y;
   14b6a:	6878      	ldr	r0, [r7, #4]
   14b6c:	6879      	ldr	r1, [r7, #4]
   14b6e:	f003 fbcd 	bl	1830c <__aeabi_fmul>
   14b72:	4603      	mov	r3, r0
   14b74:	461c      	mov	r4, r3
   14b76:	6838      	ldr	r0, [r7, #0]
   14b78:	6839      	ldr	r1, [r7, #0]
   14b7a:	f003 fbc7 	bl	1830c <__aeabi_fmul>
   14b7e:	4603      	mov	r3, r0
   14b80:	4620      	mov	r0, r4
   14b82:	4619      	mov	r1, r3
   14b84:	f003 faba 	bl	180fc <__addsf3>
   14b88:	4603      	mov	r3, r0
   14b8a:	461a      	mov	r2, r3
   14b8c:	f24c 2388 	movw	r3, #49800	; 0xc288
   14b90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b94:	601a      	str	r2, [r3, #0]
  too_far_from_home = dist2_to_home > (MAX_DIST_FROM_HOME*MAX_DIST_FROM_HOME);
   14b96:	f24c 2388 	movw	r3, #49800	; 0xc288
   14b9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b9e:	681b      	ldr	r3, [r3, #0]
   14ba0:	2201      	movs	r2, #1
   14ba2:	4614      	mov	r4, r2
   14ba4:	4618      	mov	r0, r3
   14ba6:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   14baa:	f6c4 0174 	movt	r1, #18548	; 0x4874
   14bae:	f003 fd69 	bl	18684 <__aeabi_fcmpgt>
   14bb2:	4603      	mov	r3, r0
   14bb4:	2b00      	cmp	r3, #0
   14bb6:	d101      	bne.n	14bbc <compute_dist2_to_home+0x98>
   14bb8:	2300      	movs	r3, #0
   14bba:	461c      	mov	r4, r3
   14bbc:	b2e3      	uxtb	r3, r4
   14bbe:	461a      	mov	r2, r3
   14bc0:	f24c 238c 	movw	r3, #49804	; 0xc28c
   14bc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bc8:	701a      	strb	r2, [r3, #0]
}
   14bca:	370c      	adds	r7, #12
   14bcc:	46bd      	mov	sp, r7
   14bce:	bd90      	pop	{r4, r7, pc}

00014bd0 <nav_home>:

void nav_home(void) {
   14bd0:	b580      	push	{r7, lr}
   14bd2:	af00      	add	r7, sp, #0
  //Circle(WP_HOME, 50); /* FIXME: radius should be defined elsewhere */
  nav_pitch = 0.; /* Nominal speed */ 
   14bd4:	f24c 237c 	movw	r3, #49788	; 0xc27c
   14bd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bdc:	f04f 0200 	mov.w	r2, #0
   14be0:	601a      	str	r2, [r3, #0]
  vertical_mode = VERTICAL_MODE_AUTO_ALT;
   14be2:	f64b 63dd 	movw	r3, #48861	; 0xbedd
   14be6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bea:	2203      	movs	r2, #3
   14bec:	701a      	strb	r2, [r3, #0]
  desired_altitude = GROUND_ALT+50;
   14bee:	f240 4324 	movw	r3, #1060	; 0x424
   14bf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bf6:	f04f 0200 	mov.w	r2, #0
   14bfa:	f2c4 322f 	movt	r2, #17199	; 0x432f
   14bfe:	601a      	str	r2, [r3, #0]
  compute_dist2_to_home();
   14c00:	f7ff ff90 	bl	14b24 <compute_dist2_to_home>
  dist2_to_wp = dist2_to_home;
   14c04:	f24c 2388 	movw	r3, #49800	; 0xc288
   14c08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c0c:	681a      	ldr	r2, [r3, #0]
   14c0e:	f24c 2384 	movw	r3, #49796	; 0xc284
   14c12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c16:	601a      	str	r2, [r3, #0]
}
   14c18:	bd80      	pop	{r7, pc}
   14c1a:	bf00      	nop

00014c1c <nav_update>:

void nav_update(void) {
   14c1c:	b580      	push	{r7, lr}
   14c1e:	af00      	add	r7, sp, #0
  compute_dist2_to_home();
   14c20:	f7ff ff80 	bl	14b24 <compute_dist2_to_home>

  auto_nav();
   14c24:	f7fd fc0c 	bl	12440 <auto_nav>
}
   14c28:	bd80      	pop	{r7, pc}
   14c2a:	bf00      	nop

00014c2c <nav_init>:


void nav_init(void) {
   14c2c:	b480      	push	{r7}
   14c2e:	af00      	add	r7, sp, #0
  nav_block = 0;
   14c30:	f24c 2351 	movw	r3, #49745	; 0xc251
   14c34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c38:	2200      	movs	r2, #0
   14c3a:	701a      	strb	r2, [r3, #0]
  nav_stage = 0;
   14c3c:	f24c 2350 	movw	r3, #49744	; 0xc250
   14c40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c44:	2200      	movs	r2, #0
   14c46:	701a      	strb	r2, [r3, #0]
}
   14c48:	46bd      	mov	sp, r7
   14c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
   14c4e:	4770      	bx	lr

00014c50 <uart0_transmit>:

static uint8_t           tx_head1; /* next free in buf */
static volatile uint8_t  tx_tail1; /* next char to send */
static uint8_t           tx_buf1[ TX_BUF_SIZE ];

void uart0_transmit( unsigned char data ) {
   14c50:	b480      	push	{r7}
   14c52:	b083      	sub	sp, #12
   14c54:	af00      	add	r7, sp, #0
   14c56:	4603      	mov	r3, r0
   14c58:	71fb      	strb	r3, [r7, #7]
  if (UCSR0B & _BV(TXCIE)) {
   14c5a:	f242 030a 	movw	r3, #8202	; 0x200a
   14c5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c62:	781b      	ldrb	r3, [r3, #0]
   14c64:	b2db      	uxtb	r3, r3
   14c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14c6a:	2b00      	cmp	r3, #0
   14c6c:	d028      	beq.n	14cc0 <uart0_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail0 == tx_head0 + 1) { /* BUF_SIZE = 256 */
   14c6e:	f24c 23a5 	movw	r3, #49829	; 0xc2a5
   14c72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c76:	781b      	ldrb	r3, [r3, #0]
   14c78:	b2db      	uxtb	r3, r3
   14c7a:	461a      	mov	r2, r3
   14c7c:	f24c 23a4 	movw	r3, #49828	; 0xc2a4
   14c80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c84:	781b      	ldrb	r3, [r3, #0]
   14c86:	3301      	adds	r3, #1
   14c88:	429a      	cmp	r2, r3
   14c8a:	d100      	bne.n	14c8e <uart0_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14c8c:	e02c      	b.n	14ce8 <uart0_transmit+0x98>
    }
    tx_buf0[tx_head0] = data;
   14c8e:	f24c 23a4 	movw	r3, #49828	; 0xc2a4
   14c92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c96:	781b      	ldrb	r3, [r3, #0]
   14c98:	461a      	mov	r2, r3
   14c9a:	f24c 23a8 	movw	r3, #49832	; 0xc2a8
   14c9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ca2:	79f9      	ldrb	r1, [r7, #7]
   14ca4:	5499      	strb	r1, [r3, r2]
    tx_head0++; /* BUF_SIZE = 256 */
   14ca6:	f24c 23a4 	movw	r3, #49828	; 0xc2a4
   14caa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cae:	781b      	ldrb	r3, [r3, #0]
   14cb0:	3301      	adds	r3, #1
   14cb2:	b2da      	uxtb	r2, r3
   14cb4:	f24c 23a4 	movw	r3, #49828	; 0xc2a4
   14cb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cbc:	701a      	strb	r2, [r3, #0]
   14cbe:	e013      	b.n	14ce8 <uart0_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR0 = data;
   14cc0:	f242 030c 	movw	r3, #8204	; 0x200c
   14cc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14cc8:	79fa      	ldrb	r2, [r7, #7]
   14cca:	701a      	strb	r2, [r3, #0]
    sbi(UCSR0B, TXCIE);
   14ccc:	f242 030a 	movw	r3, #8202	; 0x200a
   14cd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14cd4:	f242 020a 	movw	r2, #8202	; 0x200a
   14cd8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14cdc:	7812      	ldrb	r2, [r2, #0]
   14cde:	b2d2      	uxtb	r2, r2
   14ce0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14ce4:	b2d2      	uxtb	r2, r2
   14ce6:	701a      	strb	r2, [r3, #0]
  }
}
   14ce8:	370c      	adds	r7, #12
   14cea:	46bd      	mov	sp, r7
   14cec:	f85d 7b04 	ldr.w	r7, [sp], #4
   14cf0:	4770      	bx	lr
   14cf2:	bf00      	nop

00014cf4 <uart1_transmit>:

void uart1_transmit( unsigned char data ) {
   14cf4:	b480      	push	{r7}
   14cf6:	b083      	sub	sp, #12
   14cf8:	af00      	add	r7, sp, #0
   14cfa:	4603      	mov	r3, r0
   14cfc:	71fb      	strb	r3, [r7, #7]
  if (UCSR1B & _BV(TXCIE)) {
   14cfe:	f242 039a 	movw	r3, #8346	; 0x209a
   14d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d06:	781b      	ldrb	r3, [r3, #0]
   14d08:	b2db      	uxtb	r3, r3
   14d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14d0e:	2b00      	cmp	r3, #0
   14d10:	d028      	beq.n	14d64 <uart1_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail1 == tx_head1 + 1) { /* BUF_SIZE = 256 */
   14d12:	f24c 33a9 	movw	r3, #50089	; 0xc3a9
   14d16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d1a:	781b      	ldrb	r3, [r3, #0]
   14d1c:	b2db      	uxtb	r3, r3
   14d1e:	461a      	mov	r2, r3
   14d20:	f24c 33a8 	movw	r3, #50088	; 0xc3a8
   14d24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d28:	781b      	ldrb	r3, [r3, #0]
   14d2a:	3301      	adds	r3, #1
   14d2c:	429a      	cmp	r2, r3
   14d2e:	d100      	bne.n	14d32 <uart1_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14d30:	e02c      	b.n	14d8c <uart1_transmit+0x98>
    }
    tx_buf1[tx_head1] = data;
   14d32:	f24c 33a8 	movw	r3, #50088	; 0xc3a8
   14d36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d3a:	781b      	ldrb	r3, [r3, #0]
   14d3c:	461a      	mov	r2, r3
   14d3e:	f24c 33ac 	movw	r3, #50092	; 0xc3ac
   14d42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d46:	79f9      	ldrb	r1, [r7, #7]
   14d48:	5499      	strb	r1, [r3, r2]
    tx_head1++; /* BUF_SIZE = 256 */
   14d4a:	f24c 33a8 	movw	r3, #50088	; 0xc3a8
   14d4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d52:	781b      	ldrb	r3, [r3, #0]
   14d54:	3301      	adds	r3, #1
   14d56:	b2da      	uxtb	r2, r3
   14d58:	f24c 33a8 	movw	r3, #50088	; 0xc3a8
   14d5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d60:	701a      	strb	r2, [r3, #0]
   14d62:	e013      	b.n	14d8c <uart1_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR1 = data;
   14d64:	f242 039c 	movw	r3, #8348	; 0x209c
   14d68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d6c:	79fa      	ldrb	r2, [r7, #7]
   14d6e:	701a      	strb	r2, [r3, #0]
    sbi(UCSR1B, TXCIE);
   14d70:	f242 039a 	movw	r3, #8346	; 0x209a
   14d74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d78:	f242 029a 	movw	r2, #8346	; 0x209a
   14d7c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14d80:	7812      	ldrb	r2, [r2, #0]
   14d82:	b2d2      	uxtb	r2, r2
   14d84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14d88:	b2d2      	uxtb	r2, r2
   14d8a:	701a      	strb	r2, [r3, #0]
  }
}
   14d8c:	370c      	adds	r7, #12
   14d8e:	46bd      	mov	sp, r7
   14d90:	f85d 7b04 	ldr.w	r7, [sp], #4
   14d94:	4770      	bx	lr
   14d96:	bf00      	nop

00014d98 <uart0_print_string>:


void uart0_print_string(const uint8_t* s) {
   14d98:	b580      	push	{r7, lr}
   14d9a:	b084      	sub	sp, #16
   14d9c:	af00      	add	r7, sp, #0
   14d9e:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   14da0:	2300      	movs	r3, #0
   14da2:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   14da4:	e009      	b.n	14dba <uart0_print_string+0x22>
    uart0_transmit(s[i]);
   14da6:	7bfb      	ldrb	r3, [r7, #15]
   14da8:	687a      	ldr	r2, [r7, #4]
   14daa:	4413      	add	r3, r2
   14dac:	781b      	ldrb	r3, [r3, #0]
   14dae:	4618      	mov	r0, r3
   14db0:	f7ff ff4e 	bl	14c50 <uart0_transmit>
    i++;
   14db4:	7bfb      	ldrb	r3, [r7, #15]
   14db6:	3301      	adds	r3, #1
   14db8:	73fb      	strb	r3, [r7, #15]
}


void uart0_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   14dba:	7bfb      	ldrb	r3, [r7, #15]
   14dbc:	687a      	ldr	r2, [r7, #4]
   14dbe:	4413      	add	r3, r2
   14dc0:	781b      	ldrb	r3, [r3, #0]
   14dc2:	2b00      	cmp	r3, #0
   14dc4:	d1ef      	bne.n	14da6 <uart0_print_string+0xe>
    uart0_transmit(s[i]);
    i++;
  }
}
   14dc6:	3710      	adds	r7, #16
   14dc8:	46bd      	mov	sp, r7
   14dca:	bd80      	pop	{r7, pc}

00014dcc <uart0_print_hex>:

void uart0_print_hex(const uint8_t c) {
   14dcc:	b590      	push	{r4, r7, lr}
   14dce:	b089      	sub	sp, #36	; 0x24
   14dd0:	af00      	add	r7, sp, #0
   14dd2:	4603      	mov	r3, r0
   14dd4:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   14dd6:	f648 13b8 	movw	r3, #35256	; 0x89b8
   14dda:	f2c0 0301 	movt	r3, #1
   14dde:	f107 040c 	add.w	r4, r7, #12
   14de2:	6818      	ldr	r0, [r3, #0]
   14de4:	6859      	ldr	r1, [r3, #4]
   14de6:	689a      	ldr	r2, [r3, #8]
   14de8:	68db      	ldr	r3, [r3, #12]
   14dea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   14dec:	79fb      	ldrb	r3, [r7, #7]
   14dee:	091b      	lsrs	r3, r3, #4
   14df0:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   14df2:	79fb      	ldrb	r3, [r7, #7]
   14df4:	f003 030f 	and.w	r3, r3, #15
   14df8:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
    high = 15;
   14dfa:	230f      	movs	r3, #15
   14dfc:	77fb      	strb	r3, [r7, #31]
    low = 15;
   14dfe:	230f      	movs	r3, #15
   14e00:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */
    uart0_transmit(hex[high]);
   14e02:	7ffb      	ldrb	r3, [r7, #31]
   14e04:	f107 0220 	add.w	r2, r7, #32
   14e08:	4413      	add	r3, r2
   14e0a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14e0e:	4618      	mov	r0, r3
   14e10:	f7ff ff1e 	bl	14c50 <uart0_transmit>
  uart0_transmit(hex[low]);
   14e14:	7fbb      	ldrb	r3, [r7, #30]
   14e16:	f107 0220 	add.w	r2, r7, #32
   14e1a:	4413      	add	r3, r2
   14e1c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14e20:	4618      	mov	r0, r3
   14e22:	f7ff ff15 	bl	14c50 <uart0_transmit>
}
   14e26:	3724      	adds	r7, #36	; 0x24
   14e28:	46bd      	mov	sp, r7
   14e2a:	bd90      	pop	{r4, r7, pc}

00014e2c <__vector_20>:


SIGNAL(SIG_UART0_TRANS) {
   14e2c:	b480      	push	{r7}
   14e2e:	af00      	add	r7, sp, #0
  if (tx_head0 == tx_tail0) {
   14e30:	f24c 23a4 	movw	r3, #49828	; 0xc2a4
   14e34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e38:	781a      	ldrb	r2, [r3, #0]
   14e3a:	f24c 23a5 	movw	r3, #49829	; 0xc2a5
   14e3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e42:	781b      	ldrb	r3, [r3, #0]
   14e44:	b2db      	uxtb	r3, r3
   14e46:	429a      	cmp	r2, r3
   14e48:	d10e      	bne.n	14e68 <__vector_20+0x3c>
    /* Nothing more to send */
    cbi(UCSR0B, TXCIE); /* disable interrupt */
   14e4a:	f242 030a 	movw	r3, #8202	; 0x200a
   14e4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e52:	f242 020a 	movw	r2, #8202	; 0x200a
   14e56:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14e5a:	7812      	ldrb	r2, [r2, #0]
   14e5c:	b2d2      	uxtb	r2, r2
   14e5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   14e62:	b2d2      	uxtb	r2, r2
   14e64:	701a      	strb	r2, [r3, #0]
   14e66:	e01d      	b.n	14ea4 <__vector_20+0x78>
  } else {
    UDR0 = tx_buf0[tx_tail0];
   14e68:	f242 030c 	movw	r3, #8204	; 0x200c
   14e6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e70:	f24c 22a5 	movw	r2, #49829	; 0xc2a5
   14e74:	f2c2 0204 	movt	r2, #8196	; 0x2004
   14e78:	7812      	ldrb	r2, [r2, #0]
   14e7a:	b2d2      	uxtb	r2, r2
   14e7c:	4611      	mov	r1, r2
   14e7e:	f24c 22a8 	movw	r2, #49832	; 0xc2a8
   14e82:	f2c2 0204 	movt	r2, #8196	; 0x2004
   14e86:	5c52      	ldrb	r2, [r2, r1]
   14e88:	701a      	strb	r2, [r3, #0]
    tx_tail0++; /* warning tx_buf_len is 256 */
   14e8a:	f24c 23a5 	movw	r3, #49829	; 0xc2a5
   14e8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e92:	781b      	ldrb	r3, [r3, #0]
   14e94:	b2db      	uxtb	r3, r3
   14e96:	3301      	adds	r3, #1
   14e98:	b2da      	uxtb	r2, r3
   14e9a:	f24c 23a5 	movw	r3, #49829	; 0xc2a5
   14e9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ea2:	701a      	strb	r2, [r3, #0]
  }
}
   14ea4:	46bd      	mov	sp, r7
   14ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
   14eaa:	4770      	bx	lr

00014eac <__vector_32>:

SIGNAL(SIG_UART1_TRANS) {
   14eac:	b480      	push	{r7}
   14eae:	af00      	add	r7, sp, #0
  if (tx_head1 == tx_tail1) {
   14eb0:	f24c 33a8 	movw	r3, #50088	; 0xc3a8
   14eb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14eb8:	781a      	ldrb	r2, [r3, #0]
   14eba:	f24c 33a9 	movw	r3, #50089	; 0xc3a9
   14ebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ec2:	781b      	ldrb	r3, [r3, #0]
   14ec4:	b2db      	uxtb	r3, r3
   14ec6:	429a      	cmp	r2, r3
   14ec8:	d10e      	bne.n	14ee8 <__vector_32+0x3c>
    /* Nothing more to send */
    cbi(UCSR1B, TXCIE); /* disable interrupt */
   14eca:	f242 039a 	movw	r3, #8346	; 0x209a
   14ece:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ed2:	f242 029a 	movw	r2, #8346	; 0x209a
   14ed6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14eda:	7812      	ldrb	r2, [r2, #0]
   14edc:	b2d2      	uxtb	r2, r2
   14ede:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   14ee2:	b2d2      	uxtb	r2, r2
   14ee4:	701a      	strb	r2, [r3, #0]
   14ee6:	e01d      	b.n	14f24 <__vector_32+0x78>
  } else {
    UDR1 = tx_buf1[tx_tail1];
   14ee8:	f242 039c 	movw	r3, #8348	; 0x209c
   14eec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ef0:	f24c 32a9 	movw	r2, #50089	; 0xc3a9
   14ef4:	f2c2 0204 	movt	r2, #8196	; 0x2004
   14ef8:	7812      	ldrb	r2, [r2, #0]
   14efa:	b2d2      	uxtb	r2, r2
   14efc:	4611      	mov	r1, r2
   14efe:	f24c 32ac 	movw	r2, #50092	; 0xc3ac
   14f02:	f2c2 0204 	movt	r2, #8196	; 0x2004
   14f06:	5c52      	ldrb	r2, [r2, r1]
   14f08:	701a      	strb	r2, [r3, #0]
    tx_tail1++; /* warning tx_buf_len is 256 */
   14f0a:	f24c 33a9 	movw	r3, #50089	; 0xc3a9
   14f0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f12:	781b      	ldrb	r3, [r3, #0]
   14f14:	b2db      	uxtb	r3, r3
   14f16:	3301      	adds	r3, #1
   14f18:	b2da      	uxtb	r2, r3
   14f1a:	f24c 33a9 	movw	r3, #50089	; 0xc3a9
   14f1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f22:	701a      	strb	r2, [r3, #0]
  }
}
   14f24:	46bd      	mov	sp, r7
   14f26:	f85d 7b04 	ldr.w	r7, [sp], #4
   14f2a:	4770      	bx	lr

00014f2c <uart0_init>:

void uart0_init( void ) {
   14f2c:	b480      	push	{r7}
   14f2e:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR0H = 0; 
   14f30:	f242 0390 	movw	r3, #8336	; 0x2090
   14f34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f38:	2200      	movs	r2, #0
   14f3a:	701a      	strb	r2, [r3, #0]
  UBRR0L = 25; // 38.4
   14f3c:	f242 0309 	movw	r3, #8201	; 0x2009
   14f40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f44:	2219      	movs	r2, #25
   14f46:	701a      	strb	r2, [r3, #0]
  // UBRR0L = 103; //9600
  /* single speed */ 
  UCSR0A = 0; 
   14f48:	f242 030b 	movw	r3, #8203	; 0x200b
   14f4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f50:	2200      	movs	r2, #0
   14f52:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR0B = _BV(RXEN) | _BV(TXEN);
   14f54:	f242 030a 	movw	r3, #8202	; 0x200a
   14f58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f5c:	2218      	movs	r2, #24
   14f5e:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR0C = _BV(UCSZ1) | _BV(UCSZ0);
   14f60:	f242 0395 	movw	r3, #8341	; 0x2095
   14f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f68:	2206      	movs	r2, #6
   14f6a:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR0B, RXCIE ); 
   14f6c:	f242 030a 	movw	r3, #8202	; 0x200a
   14f70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f74:	f242 020a 	movw	r2, #8202	; 0x200a
   14f78:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14f7c:	7812      	ldrb	r2, [r2, #0]
   14f7e:	b2d2      	uxtb	r2, r2
   14f80:	f062 027f 	orn	r2, r2, #127	; 0x7f
   14f84:	b2d2      	uxtb	r2, r2
   14f86:	701a      	strb	r2, [r3, #0]
}
   14f88:	46bd      	mov	sp, r7
   14f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
   14f8e:	4770      	bx	lr

00014f90 <uart1_init>:

void uart1_init( void ) {
   14f90:	b480      	push	{r7}
   14f92:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR1H = 0; 
   14f94:	f242 0398 	movw	r3, #8344	; 0x2098
   14f98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f9c:	2200      	movs	r2, #0
   14f9e:	701a      	strb	r2, [r3, #0]
  UBRR1L = 25; // 38.4
   14fa0:	f242 0399 	movw	r3, #8345	; 0x2099
   14fa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fa8:	2219      	movs	r2, #25
   14faa:	701a      	strb	r2, [r3, #0]
  // UBRR1L = 103; //9600


  /* single speed */ 
  UCSR1A = 0; 
   14fac:	f242 039b 	movw	r3, #8347	; 0x209b
   14fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fb4:	2200      	movs	r2, #0
   14fb6:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR1B = _BV(RXEN) | _BV(TXEN);
   14fb8:	f242 039a 	movw	r3, #8346	; 0x209a
   14fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fc0:	2218      	movs	r2, #24
   14fc2:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR1C = _BV(UCSZ1) | _BV(UCSZ0);
   14fc4:	f242 039d 	movw	r3, #8349	; 0x209d
   14fc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fcc:	2206      	movs	r2, #6
   14fce:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR1B, RXCIE ); 
   14fd0:	f242 039a 	movw	r3, #8346	; 0x209a
   14fd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fd8:	f242 029a 	movw	r2, #8346	; 0x209a
   14fdc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14fe0:	7812      	ldrb	r2, [r2, #0]
   14fe2:	b2d2      	uxtb	r2, r2
   14fe4:	f062 027f 	orn	r2, r2, #127	; 0x7f
   14fe8:	b2d2      	uxtb	r2, r2
   14fea:	701a      	strb	r2, [r3, #0]
}
   14fec:	46bd      	mov	sp, r7
   14fee:	f85d 7b04 	ldr.w	r7, [sp], #4
   14ff2:	4770      	bx	lr
   14ff4:	0000      	movs	r0, r0
	...

00014ff8 <estimator_init>:
  estimator_theta_dot = theta_dot; \
}

inline void estimator_update_lls( void );

void estimator_init( void ) {
   14ff8:	b480      	push	{r7}
   14ffa:	af00      	add	r7, sp, #0

  EstimatorSetPos (0., 0., 0.);
   14ffc:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   15000:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15004:	f04f 0200 	mov.w	r2, #0
   15008:	601a      	str	r2, [r3, #0]
   1500a:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   1500e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15012:	f04f 0200 	mov.w	r2, #0
   15016:	601a      	str	r2, [r3, #0]
   15018:	f24c 43b4 	movw	r3, #50356	; 0xc4b4
   1501c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15020:	f04f 0200 	mov.w	r2, #0
   15024:	601a      	str	r2, [r3, #0]

  EstimatorSetAtt (0., 0., 0);
   15026:	f24c 43b8 	movw	r3, #50360	; 0xc4b8
   1502a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1502e:	f04f 0200 	mov.w	r2, #0
   15032:	601a      	str	r2, [r3, #0]
   15034:	f24c 43bc 	movw	r3, #50364	; 0xc4bc
   15038:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1503c:	f04f 0200 	mov.w	r2, #0
   15040:	601a      	str	r2, [r3, #0]
   15042:	f24c 43c0 	movw	r3, #50368	; 0xc4c0
   15046:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1504a:	f04f 0200 	mov.w	r2, #0
   1504e:	601a      	str	r2, [r3, #0]

  EstimatorSetSpeedPol ( 0., 0., 0.);
   15050:	f24c 43e4 	movw	r3, #50404	; 0xc4e4
   15054:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15058:	f04f 0200 	mov.w	r2, #0
   1505c:	601a      	str	r2, [r3, #0]
   1505e:	f24c 43e8 	movw	r3, #50408	; 0xc4e8
   15062:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15066:	f04f 0200 	mov.w	r2, #0
   1506a:	601a      	str	r2, [r3, #0]
   1506c:	f24c 43cc 	movw	r3, #50380	; 0xc4cc
   15070:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15074:	f04f 0200 	mov.w	r2, #0
   15078:	601a      	str	r2, [r3, #0]

  EstimatorSetRotSpeed (0., 0., 0.);
   1507a:	f24c 43d0 	movw	r3, #50384	; 0xc4d0
   1507e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15082:	f04f 0200 	mov.w	r2, #0
   15086:	601a      	str	r2, [r3, #0]
   15088:	f24c 43d4 	movw	r3, #50388	; 0xc4d4
   1508c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15090:	f04f 0200 	mov.w	r2, #0
   15094:	601a      	str	r2, [r3, #0]
   15096:	f24c 43d8 	movw	r3, #50392	; 0xc4d8
   1509a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1509e:	f04f 0200 	mov.w	r2, #0
   150a2:	601a      	str	r2, [r3, #0]

  estimator_flight_time = 0;
   150a4:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
   150a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   150ac:	2200      	movs	r2, #0
   150ae:	801a      	strh	r2, [r3, #0]

  estimator_rad_of_ir = ir_rad_of_ir;
   150b0:	f240 33f8 	movw	r3, #1016	; 0x3f8
   150b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150b8:	681a      	ldr	r2, [r3, #0]
   150ba:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
   150be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   150c2:	601a      	str	r2, [r3, #0]
}
   150c4:	46bd      	mov	sp, r7
   150c6:	f85d 7b04 	ldr.w	r7, [sp], #4
   150ca:	4770      	bx	lr

000150cc <estimator_update_state_infrared>:

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
   150cc:	b580      	push	{r7, lr}
   150ce:	b082      	sub	sp, #8
   150d0:	af00      	add	r7, sp, #0
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   150d2:	f240 33ec 	movw	r3, #1004	; 0x3ec
   150d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150da:	781b      	ldrb	r3, [r3, #0]
    estimator_rad_of_ir : ir_rad_of_ir;
   150dc:	2b01      	cmp	r3, #1
   150de:	d105      	bne.n	150ec <estimator_update_state_infrared+0x20>
   150e0:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
   150e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   150e8:	681b      	ldr	r3, [r3, #0]
   150ea:	e004      	b.n	150f6 <estimator_update_state_infrared+0x2a>
   150ec:	f240 33f8 	movw	r3, #1016	; 0x3f8
   150f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150f4:	681b      	ldr	r3, [r3, #0]
}

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   150f6:	607b      	str	r3, [r7, #4]
    estimator_rad_of_ir : ir_rad_of_ir;
  estimator_phi  = rad_of_ir * ir_roll;
   150f8:	f24c 1398 	movw	r3, #49560	; 0xc198
   150fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15100:	881b      	ldrh	r3, [r3, #0]
   15102:	b21b      	sxth	r3, r3
   15104:	4618      	mov	r0, r3
   15106:	f003 f8ad 	bl	18264 <__aeabi_i2f>
   1510a:	4603      	mov	r3, r0
   1510c:	4618      	mov	r0, r3
   1510e:	6879      	ldr	r1, [r7, #4]
   15110:	f003 f8fc 	bl	1830c <__aeabi_fmul>
   15114:	4603      	mov	r3, r0
   15116:	461a      	mov	r2, r3
   15118:	f24c 43b8 	movw	r3, #50360	; 0xc4b8
   1511c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15120:	601a      	str	r2, [r3, #0]

  estimator_theta = rad_of_ir * ir_pitch;
   15122:	f24c 139a 	movw	r3, #49562	; 0xc19a
   15126:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1512a:	881b      	ldrh	r3, [r3, #0]
   1512c:	b21b      	sxth	r3, r3
   1512e:	4618      	mov	r0, r3
   15130:	f003 f898 	bl	18264 <__aeabi_i2f>
   15134:	4603      	mov	r3, r0
   15136:	4618      	mov	r0, r3
   15138:	6879      	ldr	r1, [r7, #4]
   1513a:	f003 f8e7 	bl	1830c <__aeabi_fmul>
   1513e:	4603      	mov	r3, r0
   15140:	461a      	mov	r2, r3
   15142:	f24c 43c0 	movw	r3, #50368	; 0xc4c0
   15146:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1514a:	601a      	str	r2, [r3, #0]
}
   1514c:	3708      	adds	r7, #8
   1514e:	46bd      	mov	sp, r7
   15150:	bd80      	pop	{r7, pc}
   15152:	bf00      	nop

00015154 <estimator_update_ir_estim>:
#define RHO 0.999 /* The higher, the slower the estimation is changing */

#define g 9.81


void estimator_update_ir_estim( void ) {
   15154:	b5b0      	push	{r4, r5, r7, lr}
   15156:	b084      	sub	sp, #16
   15158:	af00      	add	r7, sp, #0
  static bool_t initialized = FALSE;
  static float sum_xy, sum_xx;
  float absphi;
  float init_ir2;

  if (initialized) 
   1515a:	f24c 43f8 	movw	r3, #50424	; 0xc4f8
   1515e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15162:	781b      	ldrb	r3, [r3, #0]
   15164:	2b00      	cmp	r3, #0
   15166:	f000 81e8 	beq.w	1553a <estimator_update_ir_estim+0x3e6>
  {
    float dt = gps_ftow - last_t;
   1516a:	f24c 0368 	movw	r3, #49256	; 0xc068
   1516e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15172:	681a      	ldr	r2, [r3, #0]
   15174:	f24c 43fc 	movw	r3, #50428	; 0xc4fc
   15178:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1517c:	681b      	ldr	r3, [r3, #0]
   1517e:	4610      	mov	r0, r2
   15180:	4619      	mov	r1, r3
   15182:	f002 ffb9 	bl	180f8 <__aeabi_fsub>
   15186:	4603      	mov	r3, r0
   15188:	60bb      	str	r3, [r7, #8]
    if (dt > 0.1) { // Against division by zero
   1518a:	68b8      	ldr	r0, [r7, #8]
   1518c:	f002 fc2a 	bl	179e4 <__aeabi_f2d>
   15190:	4602      	mov	r2, r0
   15192:	460b      	mov	r3, r1
   15194:	4610      	mov	r0, r2
   15196:	4619      	mov	r1, r3
   15198:	a385      	add	r3, pc, #532	; (adr r3, 153b0 <estimator_update_ir_estim+0x25c>)
   1519a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1519e:	f002 ff05 	bl	17fac <__aeabi_dcmpgt>
   151a2:	4603      	mov	r3, r0
   151a4:	2b00      	cmp	r3, #0
   151a6:	d100      	bne.n	151aa <estimator_update_ir_estim+0x56>
   151a8:	e219      	b.n	155de <estimator_update_ir_estim+0x48a>
      float phi = (estimator_hspeed_dir - last_hspeed_dir); 
   151aa:	f24c 43e8 	movw	r3, #50408	; 0xc4e8
   151ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151b2:	681a      	ldr	r2, [r3, #0]
   151b4:	f24c 5300 	movw	r3, #50432	; 0xc500
   151b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151bc:	681b      	ldr	r3, [r3, #0]
   151be:	4610      	mov	r0, r2
   151c0:	4619      	mov	r1, r3
   151c2:	f002 ff99 	bl	180f8 <__aeabi_fsub>
   151c6:	4603      	mov	r3, r0
   151c8:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   151ca:	e013      	b.n	151f4 <estimator_update_ir_estim+0xa0>
   151cc:	68f8      	ldr	r0, [r7, #12]
   151ce:	f002 fc09 	bl	179e4 <__aeabi_f2d>
   151d2:	4602      	mov	r2, r0
   151d4:	460b      	mov	r3, r1
   151d6:	4610      	mov	r0, r2
   151d8:	4619      	mov	r1, r3
   151da:	a377      	add	r3, pc, #476	; (adr r3, 153b8 <estimator_update_ir_estim+0x264>)
   151dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   151e0:	f002 faa0 	bl	17724 <__aeabi_dsub>
   151e4:	4602      	mov	r2, r0
   151e6:	460b      	mov	r3, r1
   151e8:	4610      	mov	r0, r2
   151ea:	4619      	mov	r1, r3
   151ec:	f002 ff30 	bl	18050 <__aeabi_d2f>
   151f0:	4603      	mov	r3, r0
   151f2:	60fb      	str	r3, [r7, #12]
   151f4:	68f8      	ldr	r0, [r7, #12]
   151f6:	f002 fbf5 	bl	179e4 <__aeabi_f2d>
   151fa:	4602      	mov	r2, r0
   151fc:	460b      	mov	r3, r1
   151fe:	4610      	mov	r0, r2
   15200:	4619      	mov	r1, r3
   15202:	a36f      	add	r3, pc, #444	; (adr r3, 153c0 <estimator_update_ir_estim+0x26c>)
   15204:	e9d3 2300 	ldrd	r2, r3, [r3]
   15208:	f002 fed0 	bl	17fac <__aeabi_dcmpgt>
   1520c:	4603      	mov	r3, r0
   1520e:	2b00      	cmp	r3, #0
   15210:	d1dc      	bne.n	151cc <estimator_update_ir_estim+0x78>
   15212:	e013      	b.n	1523c <estimator_update_ir_estim+0xe8>
   15214:	68f8      	ldr	r0, [r7, #12]
   15216:	f002 fbe5 	bl	179e4 <__aeabi_f2d>
   1521a:	4602      	mov	r2, r0
   1521c:	460b      	mov	r3, r1
   1521e:	4610      	mov	r0, r2
   15220:	4619      	mov	r1, r3
   15222:	a365      	add	r3, pc, #404	; (adr r3, 153b8 <estimator_update_ir_estim+0x264>)
   15224:	e9d3 2300 	ldrd	r2, r3, [r3]
   15228:	f002 fa7e 	bl	17728 <__adddf3>
   1522c:	4602      	mov	r2, r0
   1522e:	460b      	mov	r3, r1
   15230:	4610      	mov	r0, r2
   15232:	4619      	mov	r1, r3
   15234:	f002 ff0c 	bl	18050 <__aeabi_d2f>
   15238:	4603      	mov	r3, r0
   1523a:	60fb      	str	r3, [r7, #12]
   1523c:	68f8      	ldr	r0, [r7, #12]
   1523e:	f002 fbd1 	bl	179e4 <__aeabi_f2d>
   15242:	4602      	mov	r2, r0
   15244:	460b      	mov	r3, r1
   15246:	4610      	mov	r0, r2
   15248:	4619      	mov	r1, r3
   1524a:	a35f      	add	r3, pc, #380	; (adr r3, 153c8 <estimator_update_ir_estim+0x274>)
   1524c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15250:	f002 fe8e 	bl	17f70 <__aeabi_dcmplt>
   15254:	4603      	mov	r3, r0
   15256:	2b00      	cmp	r3, #0
   15258:	d1dc      	bne.n	15214 <estimator_update_ir_estim+0xc0>
      phi = phi/dt*NOMINAL_AIRSPEED/g; /* tan linearized */
   1525a:	68f8      	ldr	r0, [r7, #12]
   1525c:	68b9      	ldr	r1, [r7, #8]
   1525e:	f003 f909 	bl	18474 <__aeabi_fdiv>
   15262:	4603      	mov	r3, r0
   15264:	4618      	mov	r0, r3
   15266:	f002 fbbd 	bl	179e4 <__aeabi_f2d>
   1526a:	4602      	mov	r2, r0
   1526c:	460b      	mov	r3, r1
   1526e:	4610      	mov	r0, r2
   15270:	4619      	mov	r1, r3
   15272:	f04f 0200 	mov.w	r2, #0
   15276:	f04f 0300 	mov.w	r3, #0
   1527a:	f2c4 0324 	movt	r3, #16420	; 0x4024
   1527e:	f002 fc05 	bl	17a8c <__aeabi_dmul>
   15282:	4602      	mov	r2, r0
   15284:	460b      	mov	r3, r1
   15286:	4610      	mov	r0, r2
   15288:	4619      	mov	r1, r3
   1528a:	a351      	add	r3, pc, #324	; (adr r3, 153d0 <estimator_update_ir_estim+0x27c>)
   1528c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15290:	f002 fd26 	bl	17ce0 <__aeabi_ddiv>
   15294:	4602      	mov	r2, r0
   15296:	460b      	mov	r3, r1
   15298:	4610      	mov	r0, r2
   1529a:	4619      	mov	r1, r3
   1529c:	f002 fed8 	bl	18050 <__aeabi_d2f>
   152a0:	4603      	mov	r3, r0
   152a2:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   152a4:	e013      	b.n	152ce <estimator_update_ir_estim+0x17a>
   152a6:	68f8      	ldr	r0, [r7, #12]
   152a8:	f002 fb9c 	bl	179e4 <__aeabi_f2d>
   152ac:	4602      	mov	r2, r0
   152ae:	460b      	mov	r3, r1
   152b0:	4610      	mov	r0, r2
   152b2:	4619      	mov	r1, r3
   152b4:	a340      	add	r3, pc, #256	; (adr r3, 153b8 <estimator_update_ir_estim+0x264>)
   152b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   152ba:	f002 fa33 	bl	17724 <__aeabi_dsub>
   152be:	4602      	mov	r2, r0
   152c0:	460b      	mov	r3, r1
   152c2:	4610      	mov	r0, r2
   152c4:	4619      	mov	r1, r3
   152c6:	f002 fec3 	bl	18050 <__aeabi_d2f>
   152ca:	4603      	mov	r3, r0
   152cc:	60fb      	str	r3, [r7, #12]
   152ce:	68f8      	ldr	r0, [r7, #12]
   152d0:	f002 fb88 	bl	179e4 <__aeabi_f2d>
   152d4:	4602      	mov	r2, r0
   152d6:	460b      	mov	r3, r1
   152d8:	4610      	mov	r0, r2
   152da:	4619      	mov	r1, r3
   152dc:	a338      	add	r3, pc, #224	; (adr r3, 153c0 <estimator_update_ir_estim+0x26c>)
   152de:	e9d3 2300 	ldrd	r2, r3, [r3]
   152e2:	f002 fe63 	bl	17fac <__aeabi_dcmpgt>
   152e6:	4603      	mov	r3, r0
   152e8:	2b00      	cmp	r3, #0
   152ea:	d1dc      	bne.n	152a6 <estimator_update_ir_estim+0x152>
   152ec:	e013      	b.n	15316 <estimator_update_ir_estim+0x1c2>
   152ee:	68f8      	ldr	r0, [r7, #12]
   152f0:	f002 fb78 	bl	179e4 <__aeabi_f2d>
   152f4:	4602      	mov	r2, r0
   152f6:	460b      	mov	r3, r1
   152f8:	4610      	mov	r0, r2
   152fa:	4619      	mov	r1, r3
   152fc:	a32e      	add	r3, pc, #184	; (adr r3, 153b8 <estimator_update_ir_estim+0x264>)
   152fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   15302:	f002 fa11 	bl	17728 <__adddf3>
   15306:	4602      	mov	r2, r0
   15308:	460b      	mov	r3, r1
   1530a:	4610      	mov	r0, r2
   1530c:	4619      	mov	r1, r3
   1530e:	f002 fe9f 	bl	18050 <__aeabi_d2f>
   15312:	4603      	mov	r3, r0
   15314:	60fb      	str	r3, [r7, #12]
   15316:	68f8      	ldr	r0, [r7, #12]
   15318:	f002 fb64 	bl	179e4 <__aeabi_f2d>
   1531c:	4602      	mov	r2, r0
   1531e:	460b      	mov	r3, r1
   15320:	4610      	mov	r0, r2
   15322:	4619      	mov	r1, r3
   15324:	a328      	add	r3, pc, #160	; (adr r3, 153c8 <estimator_update_ir_estim+0x274>)
   15326:	e9d3 2300 	ldrd	r2, r3, [r3]
   1532a:	f002 fe21 	bl	17f70 <__aeabi_dcmplt>
   1532e:	4603      	mov	r3, r0
   15330:	2b00      	cmp	r3, #0
   15332:	d1dc      	bne.n	152ee <estimator_update_ir_estim+0x19a>
      estimator_ir = (float)ir_roll;
   15334:	f24c 1398 	movw	r3, #49560	; 0xc198
   15338:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1533c:	881b      	ldrh	r3, [r3, #0]
   1533e:	b21b      	sxth	r3, r3
   15340:	4618      	mov	r0, r3
   15342:	f002 ff8f 	bl	18264 <__aeabi_i2f>
   15346:	4602      	mov	r2, r0
   15348:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
   1534c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15350:	601a      	str	r2, [r3, #0]
      estimator_rad = phi;
   15352:	f24c 43f4 	movw	r3, #50420	; 0xc4f4
   15356:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1535a:	68fa      	ldr	r2, [r7, #12]
   1535c:	601a      	str	r2, [r3, #0]
      absphi = fabs(phi);
   1535e:	68f8      	ldr	r0, [r7, #12]
   15360:	f04f 0100 	mov.w	r1, #0
   15364:	f003 f970 	bl	18648 <__aeabi_fcmplt>
   15368:	4603      	mov	r3, r0
   1536a:	2b00      	cmp	r3, #0
   1536c:	d003      	beq.n	15376 <estimator_update_ir_estim+0x222>
   1536e:	68fb      	ldr	r3, [r7, #12]
   15370:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   15374:	e000      	b.n	15378 <estimator_update_ir_estim+0x224>
   15376:	68fb      	ldr	r3, [r7, #12]
   15378:	607b      	str	r3, [r7, #4]
      if (absphi < 1.0 && absphi > 0.05 && (- ir_contrast/2 < ir_roll && ir_roll < ir_contrast/2)) {
   1537a:	6878      	ldr	r0, [r7, #4]
   1537c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   15380:	f003 f962 	bl	18648 <__aeabi_fcmplt>
   15384:	4603      	mov	r3, r0
   15386:	2b00      	cmp	r3, #0
   15388:	d100      	bne.n	1538c <estimator_update_ir_estim+0x238>
   1538a:	e128      	b.n	155de <estimator_update_ir_estim+0x48a>
   1538c:	6878      	ldr	r0, [r7, #4]
   1538e:	f002 fb29 	bl	179e4 <__aeabi_f2d>
   15392:	4602      	mov	r2, r0
   15394:	460b      	mov	r3, r1
   15396:	4610      	mov	r0, r2
   15398:	4619      	mov	r1, r3
   1539a:	a30f      	add	r3, pc, #60	; (adr r3, 153d8 <estimator_update_ir_estim+0x284>)
   1539c:	e9d3 2300 	ldrd	r2, r3, [r3]
   153a0:	f002 fe04 	bl	17fac <__aeabi_dcmpgt>
   153a4:	4603      	mov	r3, r0
   153a6:	2b00      	cmp	r3, #0
   153a8:	d11a      	bne.n	153e0 <estimator_update_ir_estim+0x28c>
   153aa:	e118      	b.n	155de <estimator_update_ir_estim+0x48a>
   153ac:	f3af 8000 	nop.w
   153b0:	9999999a 	.word	0x9999999a
   153b4:	3fb99999 	.word	0x3fb99999
   153b8:	54442d18 	.word	0x54442d18
   153bc:	401921fb 	.word	0x401921fb
   153c0:	54442d18 	.word	0x54442d18
   153c4:	400921fb 	.word	0x400921fb
   153c8:	54442d18 	.word	0x54442d18
   153cc:	c00921fb 	.word	0xc00921fb
   153d0:	51eb851f 	.word	0x51eb851f
   153d4:	40239eb8 	.word	0x40239eb8
   153d8:	9999999a 	.word	0x9999999a
   153dc:	3fa99999 	.word	0x3fa99999
   153e0:	f240 33f0 	movw	r3, #1008	; 0x3f0
   153e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153e8:	881b      	ldrh	r3, [r3, #0]
   153ea:	b21b      	sxth	r3, r3
   153ec:	425b      	negs	r3, r3
   153ee:	0fda      	lsrs	r2, r3, #31
   153f0:	4413      	add	r3, r2
   153f2:	105b      	asrs	r3, r3, #1
   153f4:	461a      	mov	r2, r3
   153f6:	f24c 1398 	movw	r3, #49560	; 0xc198
   153fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   153fe:	881b      	ldrh	r3, [r3, #0]
   15400:	b21b      	sxth	r3, r3
   15402:	429a      	cmp	r2, r3
   15404:	f280 8098 	bge.w	15538 <estimator_update_ir_estim+0x3e4>
   15408:	f240 33f0 	movw	r3, #1008	; 0x3f0
   1540c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15410:	881b      	ldrh	r3, [r3, #0]
   15412:	b21b      	sxth	r3, r3
   15414:	0fda      	lsrs	r2, r3, #31
   15416:	4413      	add	r3, r2
   15418:	105b      	asrs	r3, r3, #1
   1541a:	b29a      	uxth	r2, r3
   1541c:	f24c 1398 	movw	r3, #49560	; 0xc198
   15420:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15424:	881b      	ldrh	r3, [r3, #0]
   15426:	b212      	sxth	r2, r2
   15428:	b21b      	sxth	r3, r3
   1542a:	429a      	cmp	r2, r3
   1542c:	f340 8084 	ble.w	15538 <estimator_update_ir_estim+0x3e4>
	sum_xy = estimator_rad * estimator_ir + RHO * sum_xy;
   15430:	f24c 43f4 	movw	r3, #50420	; 0xc4f4
   15434:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15438:	681a      	ldr	r2, [r3, #0]
   1543a:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
   1543e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15442:	681b      	ldr	r3, [r3, #0]
   15444:	4610      	mov	r0, r2
   15446:	4619      	mov	r1, r3
   15448:	f002 ff60 	bl	1830c <__aeabi_fmul>
   1544c:	4603      	mov	r3, r0
   1544e:	4618      	mov	r0, r3
   15450:	f002 fac8 	bl	179e4 <__aeabi_f2d>
   15454:	4604      	mov	r4, r0
   15456:	460d      	mov	r5, r1
   15458:	f24c 5304 	movw	r3, #50436	; 0xc504
   1545c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15460:	681b      	ldr	r3, [r3, #0]
   15462:	4618      	mov	r0, r3
   15464:	f002 fabe 	bl	179e4 <__aeabi_f2d>
   15468:	4602      	mov	r2, r0
   1546a:	460b      	mov	r3, r1
   1546c:	4610      	mov	r0, r2
   1546e:	4619      	mov	r1, r3
   15470:	a367      	add	r3, pc, #412	; (adr r3, 15610 <estimator_update_ir_estim+0x4bc>)
   15472:	e9d3 2300 	ldrd	r2, r3, [r3]
   15476:	f002 fb09 	bl	17a8c <__aeabi_dmul>
   1547a:	4602      	mov	r2, r0
   1547c:	460b      	mov	r3, r1
   1547e:	4620      	mov	r0, r4
   15480:	4629      	mov	r1, r5
   15482:	f002 f951 	bl	17728 <__adddf3>
   15486:	4602      	mov	r2, r0
   15488:	460b      	mov	r3, r1
   1548a:	4610      	mov	r0, r2
   1548c:	4619      	mov	r1, r3
   1548e:	f002 fddf 	bl	18050 <__aeabi_d2f>
   15492:	4602      	mov	r2, r0
   15494:	f24c 5304 	movw	r3, #50436	; 0xc504
   15498:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1549c:	601a      	str	r2, [r3, #0]
	sum_xx = estimator_ir * estimator_ir + RHO * sum_xx;
   1549e:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
   154a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   154a6:	681a      	ldr	r2, [r3, #0]
   154a8:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
   154ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   154b0:	681b      	ldr	r3, [r3, #0]
   154b2:	4610      	mov	r0, r2
   154b4:	4619      	mov	r1, r3
   154b6:	f002 ff29 	bl	1830c <__aeabi_fmul>
   154ba:	4603      	mov	r3, r0
   154bc:	4618      	mov	r0, r3
   154be:	f002 fa91 	bl	179e4 <__aeabi_f2d>
   154c2:	4604      	mov	r4, r0
   154c4:	460d      	mov	r5, r1
   154c6:	f24c 5308 	movw	r3, #50440	; 0xc508
   154ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   154ce:	681b      	ldr	r3, [r3, #0]
   154d0:	4618      	mov	r0, r3
   154d2:	f002 fa87 	bl	179e4 <__aeabi_f2d>
   154d6:	4602      	mov	r2, r0
   154d8:	460b      	mov	r3, r1
   154da:	4610      	mov	r0, r2
   154dc:	4619      	mov	r1, r3
   154de:	a34c      	add	r3, pc, #304	; (adr r3, 15610 <estimator_update_ir_estim+0x4bc>)
   154e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   154e4:	f002 fad2 	bl	17a8c <__aeabi_dmul>
   154e8:	4602      	mov	r2, r0
   154ea:	460b      	mov	r3, r1
   154ec:	4620      	mov	r0, r4
   154ee:	4629      	mov	r1, r5
   154f0:	f002 f91a 	bl	17728 <__adddf3>
   154f4:	4602      	mov	r2, r0
   154f6:	460b      	mov	r3, r1
   154f8:	4610      	mov	r0, r2
   154fa:	4619      	mov	r1, r3
   154fc:	f002 fda8 	bl	18050 <__aeabi_d2f>
   15500:	4602      	mov	r2, r0
   15502:	f24c 5308 	movw	r3, #50440	; 0xc508
   15506:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1550a:	601a      	str	r2, [r3, #0]
	else if (result > IR_RAD_OF_IR_MAX_VALUE)
	  estimator_rad_of_ir = IR_RAD_OF_IR_MAX_VALUE;
	else
	  estimator_rad_of_ir = result;
#else
	  estimator_rad_of_ir = sum_xy / sum_xx;
   1550c:	f24c 5304 	movw	r3, #50436	; 0xc504
   15510:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15514:	681a      	ldr	r2, [r3, #0]
   15516:	f24c 5308 	movw	r3, #50440	; 0xc508
   1551a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1551e:	681b      	ldr	r3, [r3, #0]
   15520:	4610      	mov	r0, r2
   15522:	4619      	mov	r1, r3
   15524:	f002 ffa6 	bl	18474 <__aeabi_fdiv>
   15528:	4603      	mov	r3, r0
   1552a:	461a      	mov	r2, r3
   1552c:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
   15530:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15534:	601a      	str	r2, [r3, #0]
   15536:	e052      	b.n	155de <estimator_update_ir_estim+0x48a>
   15538:	e051      	b.n	155de <estimator_update_ir_estim+0x48a>
#endif
      }
    } 
  } else {
    initialized = TRUE;
   1553a:	f24c 43f8 	movw	r3, #50424	; 0xc4f8
   1553e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15542:	2201      	movs	r2, #1
   15544:	701a      	strb	r2, [r3, #0]
    init_ir2 = ir_contrast;
   15546:	f240 33f0 	movw	r3, #1008	; 0x3f0
   1554a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1554e:	881b      	ldrh	r3, [r3, #0]
   15550:	b21b      	sxth	r3, r3
   15552:	4618      	mov	r0, r3
   15554:	f002 fe86 	bl	18264 <__aeabi_i2f>
   15558:	4603      	mov	r3, r0
   1555a:	603b      	str	r3, [r7, #0]
    init_ir2 = init_ir2*init_ir2;
   1555c:	6838      	ldr	r0, [r7, #0]
   1555e:	6839      	ldr	r1, [r7, #0]
   15560:	f002 fed4 	bl	1830c <__aeabi_fmul>
   15564:	4603      	mov	r3, r0
   15566:	603b      	str	r3, [r7, #0]
    sum_xy = INIT_WEIGHT * estimator_rad_of_ir * init_ir2;
   15568:	f24c 43ec 	movw	r3, #50412	; 0xc4ec
   1556c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15570:	681b      	ldr	r3, [r3, #0]
   15572:	4618      	mov	r0, r3
   15574:	f002 fa36 	bl	179e4 <__aeabi_f2d>
   15578:	4602      	mov	r2, r0
   1557a:	460b      	mov	r3, r1
   1557c:	4610      	mov	r0, r2
   1557e:	4619      	mov	r1, r3
   15580:	f04f 0200 	mov.w	r2, #0
   15584:	f04f 0300 	mov.w	r3, #0
   15588:	f2c4 0359 	movt	r3, #16473	; 0x4059
   1558c:	f002 fa7e 	bl	17a8c <__aeabi_dmul>
   15590:	4602      	mov	r2, r0
   15592:	460b      	mov	r3, r1
   15594:	4614      	mov	r4, r2
   15596:	461d      	mov	r5, r3
   15598:	6838      	ldr	r0, [r7, #0]
   1559a:	f002 fa23 	bl	179e4 <__aeabi_f2d>
   1559e:	4602      	mov	r2, r0
   155a0:	460b      	mov	r3, r1
   155a2:	4620      	mov	r0, r4
   155a4:	4629      	mov	r1, r5
   155a6:	f002 fa71 	bl	17a8c <__aeabi_dmul>
   155aa:	4602      	mov	r2, r0
   155ac:	460b      	mov	r3, r1
   155ae:	4610      	mov	r0, r2
   155b0:	4619      	mov	r1, r3
   155b2:	f002 fd4d 	bl	18050 <__aeabi_d2f>
   155b6:	4602      	mov	r2, r0
   155b8:	f24c 5304 	movw	r3, #50436	; 0xc504
   155bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155c0:	601a      	str	r2, [r3, #0]
    sum_xx = INIT_WEIGHT * init_ir2;
   155c2:	6838      	ldr	r0, [r7, #0]
   155c4:	f04f 0100 	mov.w	r1, #0
   155c8:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   155cc:	f002 fe9e 	bl	1830c <__aeabi_fmul>
   155d0:	4603      	mov	r3, r0
   155d2:	461a      	mov	r2, r3
   155d4:	f24c 5308 	movw	r3, #50440	; 0xc508
   155d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155dc:	601a      	str	r2, [r3, #0]
  }

  last_hspeed_dir = estimator_hspeed_dir;
   155de:	f24c 43e8 	movw	r3, #50408	; 0xc4e8
   155e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155e6:	681a      	ldr	r2, [r3, #0]
   155e8:	f24c 5300 	movw	r3, #50432	; 0xc500
   155ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155f0:	601a      	str	r2, [r3, #0]
  last_t = gps_ftow;
   155f2:	f24c 0368 	movw	r3, #49256	; 0xc068
   155f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155fa:	681a      	ldr	r2, [r3, #0]
   155fc:	f24c 43fc 	movw	r3, #50428	; 0xc4fc
   15600:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15604:	601a      	str	r2, [r3, #0]
}
   15606:	3710      	adds	r7, #16
   15608:	46bd      	mov	sp, r7
   1560a:	bdb0      	pop	{r4, r5, r7, pc}
   1560c:	f3af 8000 	nop.w
   15610:	d916872b 	.word	0xd916872b
   15614:	3feff7ce 	.word	0x3feff7ce

00015618 <estimator_update_state_gps>:


void estimator_update_state_gps( void ) {
   15618:	b580      	push	{r7, lr}
   1561a:	af00      	add	r7, sp, #0
  if (GPS_FIX_VALID(gps_mode)) {
   1561c:	f24c 038c 	movw	r3, #49292	; 0xc08c
   15620:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15624:	781b      	ldrb	r3, [r3, #0]
   15626:	f003 0320 	and.w	r3, r3, #32
   1562a:	2b00      	cmp	r3, #0
   1562c:	d044      	beq.n	156b8 <estimator_update_state_gps+0xa0>
    EstimatorSetPos(gps_east, gps_north, gps_falt);
   1562e:	f24c 0384 	movw	r3, #49284	; 0xc084
   15632:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15636:	681a      	ldr	r2, [r3, #0]
   15638:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   1563c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15640:	601a      	str	r2, [r3, #0]
   15642:	f24c 0388 	movw	r3, #49288	; 0xc088
   15646:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1564a:	681a      	ldr	r2, [r3, #0]
   1564c:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   15650:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15654:	601a      	str	r2, [r3, #0]
   15656:	f24c 036c 	movw	r3, #49260	; 0xc06c
   1565a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1565e:	681a      	ldr	r2, [r3, #0]
   15660:	f24c 43b4 	movw	r3, #50356	; 0xc4b4
   15664:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15668:	601a      	str	r2, [r3, #0]
    EstimatorSetSpeedPol(gps_fspeed, gps_fcourse, gps_fclimb);
   1566a:	f24c 0370 	movw	r3, #49264	; 0xc070
   1566e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15672:	681a      	ldr	r2, [r3, #0]
   15674:	f24c 43e4 	movw	r3, #50404	; 0xc4e4
   15678:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1567c:	601a      	str	r2, [r3, #0]
   1567e:	f24c 0378 	movw	r3, #49272	; 0xc078
   15682:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15686:	681a      	ldr	r2, [r3, #0]
   15688:	f24c 43e8 	movw	r3, #50408	; 0xc4e8
   1568c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15690:	601a      	str	r2, [r3, #0]
   15692:	f24c 0374 	movw	r3, #49268	; 0xc074
   15696:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1569a:	681a      	ldr	r2, [r3, #0]
   1569c:	f24c 43cc 	movw	r3, #50380	; 0xc4cc
   156a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156a4:	601a      	str	r2, [r3, #0]
    
    if (estimator_flight_time)
   156a6:	f24c 43dc 	movw	r3, #50396	; 0xc4dc
   156aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156ae:	881b      	ldrh	r3, [r3, #0]
   156b0:	2b00      	cmp	r3, #0
   156b2:	d001      	beq.n	156b8 <estimator_update_state_gps+0xa0>
      estimator_update_ir_estim();
   156b4:	f7ff fd4e 	bl	15154 <estimator_update_ir_estim>
  }
}
   156b8:	bd80      	pop	{r7, pc}
   156ba:	bf00      	nop

000156bc <estimator_propagate_state>:

void estimator_propagate_state( void ) {
   156bc:	b480      	push	{r7}
   156be:	af00      	add	r7, sp, #0
  
}
   156c0:	46bd      	mov	sp, r7
   156c2:	f85d 7b04 	ldr.w	r7, [sp], #4
   156c6:	4770      	bx	lr

000156c8 <inflight_calib>:
/* Please DO NOT EDIT */

#ifndef INFLIGHT_CALIB_H
#define INFLIGHT_CALIB_H 

void inflight_calib(bool_t mode_changed) {
   156c8:	b5b0      	push	{r4, r5, r7, lr}
   156ca:	b082      	sub	sp, #8
   156cc:	af00      	add	r7, sp, #0
   156ce:	4603      	mov	r3, r0
   156d0:	71fb      	strb	r3, [r7, #7]
  if (pprz_mode == PPRZ_MODE_AUTO1) {
   156d2:	f64b 63dc 	movw	r3, #48860	; 0xbedc
   156d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156da:	781b      	ldrb	r3, [r3, #0]
   156dc:	2b01      	cmp	r3, #1
   156de:	f040 80e0 	bne.w	158a2 <inflight_calib+0x1da>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   156e2:	f24c 530c 	movw	r3, #50444	; 0xc50c
   156e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156ea:	781b      	ldrb	r3, [r3, #0]
   156ec:	2b02      	cmp	r3, #2
   156ee:	d168      	bne.n	157c2 <inflight_calib+0xfa>
      static int16_t ir_pitch_neutral_init;
      if (mode_changed) {
   156f0:	79fb      	ldrb	r3, [r7, #7]
   156f2:	2b00      	cmp	r3, #0
   156f4:	d013      	beq.n	1571e <inflight_calib+0x56>
        ir_pitch_neutral_init = ir_pitch_neutral;
   156f6:	f240 33f4 	movw	r3, #1012	; 0x3f4
   156fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156fe:	881a      	ldrh	r2, [r3, #0]
   15700:	f24c 5312 	movw	r3, #50450	; 0xc512
   15704:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15708:	801a      	strh	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   1570a:	f24c 0300 	movw	r3, #49152	; 0xc000
   1570e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15712:	895a      	ldrh	r2, [r3, #10]
   15714:	f24c 530e 	movw	r3, #50446	; 0xc50e
   15718:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1571c:	801a      	strh	r2, [r3, #0]
      }
      ir_pitch_neutral = ParamValInt16(ir_pitch_neutral_init, 60.000000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   1571e:	f24c 0300 	movw	r3, #49152	; 0xc000
   15722:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15726:	895b      	ldrh	r3, [r3, #10]
   15728:	b21a      	sxth	r2, r3
   1572a:	f24c 530e 	movw	r3, #50446	; 0xc50e
   1572e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15732:	881b      	ldrh	r3, [r3, #0]
   15734:	b21b      	sxth	r3, r3
   15736:	1ad3      	subs	r3, r2, r3
   15738:	4618      	mov	r0, r3
   1573a:	f002 fd93 	bl	18264 <__aeabi_i2f>
   1573e:	4603      	mov	r3, r0
   15740:	4618      	mov	r0, r3
   15742:	f002 f94f 	bl	179e4 <__aeabi_f2d>
   15746:	4602      	mov	r2, r0
   15748:	460b      	mov	r3, r1
   1574a:	4610      	mov	r0, r2
   1574c:	4619      	mov	r1, r3
   1574e:	f04f 0200 	mov.w	r2, #0
   15752:	f04f 0300 	mov.w	r3, #0
   15756:	f2c4 034e 	movt	r3, #16462	; 0x404e
   1575a:	f002 f997 	bl	17a8c <__aeabi_dmul>
   1575e:	4602      	mov	r2, r0
   15760:	460b      	mov	r3, r1
   15762:	4610      	mov	r0, r2
   15764:	4619      	mov	r1, r3
   15766:	f04f 0200 	mov.w	r2, #0
   1576a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1576e:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15772:	f002 fab5 	bl	17ce0 <__aeabi_ddiv>
   15776:	4602      	mov	r2, r0
   15778:	460b      	mov	r3, r1
   1577a:	4610      	mov	r0, r2
   1577c:	4619      	mov	r1, r3
   1577e:	f002 fc1f 	bl	17fc0 <__aeabi_d2iz>
   15782:	4603      	mov	r3, r0
   15784:	b29b      	uxth	r3, r3
   15786:	b29a      	uxth	r2, r3
   15788:	f24c 5312 	movw	r3, #50450	; 0xc512
   1578c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15790:	881b      	ldrh	r3, [r3, #0]
   15792:	b29b      	uxth	r3, r3
   15794:	4413      	add	r3, r2
   15796:	b29b      	uxth	r3, r3
   15798:	b29a      	uxth	r2, r3
   1579a:	f240 33f4 	movw	r3, #1012	; 0x3f4
   1579e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157a2:	801a      	strh	r2, [r3, #0]
      slider_1_val = (float)ir_pitch_neutral;
   157a4:	f240 33f4 	movw	r3, #1012	; 0x3f4
   157a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157ac:	881b      	ldrh	r3, [r3, #0]
   157ae:	b21b      	sxth	r3, r3
   157b0:	4618      	mov	r0, r3
   157b2:	f002 fd57 	bl	18264 <__aeabi_i2f>
   157b6:	4602      	mov	r2, r0
   157b8:	f64b 63e8 	movw	r3, #48872	; 0xbee8
   157bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157c0:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   157c2:	f24c 530c 	movw	r3, #50444	; 0xc50c
   157c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157ca:	781b      	ldrb	r3, [r3, #0]
   157cc:	2b02      	cmp	r3, #2
   157ce:	d168      	bne.n	158a2 <inflight_calib+0x1da>
      static int16_t ir_roll_neutral_init;
      if (mode_changed) {
   157d0:	79fb      	ldrb	r3, [r7, #7]
   157d2:	2b00      	cmp	r3, #0
   157d4:	d013      	beq.n	157fe <inflight_calib+0x136>
        ir_roll_neutral_init = ir_roll_neutral;
   157d6:	f240 33f2 	movw	r3, #1010	; 0x3f2
   157da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157de:	881a      	ldrh	r2, [r3, #0]
   157e0:	f24c 5314 	movw	r3, #50452	; 0xc514
   157e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157e8:	801a      	strh	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   157ea:	f24c 0300 	movw	r3, #49152	; 0xc000
   157ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157f2:	899a      	ldrh	r2, [r3, #12]
   157f4:	f24c 5310 	movw	r3, #50448	; 0xc510
   157f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157fc:	801a      	strh	r2, [r3, #0]
      }
      ir_roll_neutral = ParamValInt16(ir_roll_neutral_init, -60.000000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   157fe:	f24c 0300 	movw	r3, #49152	; 0xc000
   15802:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15806:	899b      	ldrh	r3, [r3, #12]
   15808:	b21a      	sxth	r2, r3
   1580a:	f24c 5310 	movw	r3, #50448	; 0xc510
   1580e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15812:	881b      	ldrh	r3, [r3, #0]
   15814:	b21b      	sxth	r3, r3
   15816:	1ad3      	subs	r3, r2, r3
   15818:	4618      	mov	r0, r3
   1581a:	f002 fd23 	bl	18264 <__aeabi_i2f>
   1581e:	4603      	mov	r3, r0
   15820:	4618      	mov	r0, r3
   15822:	f002 f8df 	bl	179e4 <__aeabi_f2d>
   15826:	4602      	mov	r2, r0
   15828:	460b      	mov	r3, r1
   1582a:	4610      	mov	r0, r2
   1582c:	4619      	mov	r1, r3
   1582e:	f04f 0200 	mov.w	r2, #0
   15832:	f04f 0300 	mov.w	r3, #0
   15836:	f2cc 034e 	movt	r3, #49230	; 0xc04e
   1583a:	f002 f927 	bl	17a8c <__aeabi_dmul>
   1583e:	4602      	mov	r2, r0
   15840:	460b      	mov	r3, r1
   15842:	4610      	mov	r0, r2
   15844:	4619      	mov	r1, r3
   15846:	f04f 0200 	mov.w	r2, #0
   1584a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1584e:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15852:	f002 fa45 	bl	17ce0 <__aeabi_ddiv>
   15856:	4602      	mov	r2, r0
   15858:	460b      	mov	r3, r1
   1585a:	4610      	mov	r0, r2
   1585c:	4619      	mov	r1, r3
   1585e:	f002 fbaf 	bl	17fc0 <__aeabi_d2iz>
   15862:	4603      	mov	r3, r0
   15864:	b29b      	uxth	r3, r3
   15866:	b29a      	uxth	r2, r3
   15868:	f24c 5314 	movw	r3, #50452	; 0xc514
   1586c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15870:	881b      	ldrh	r3, [r3, #0]
   15872:	b29b      	uxth	r3, r3
   15874:	4413      	add	r3, r2
   15876:	b29b      	uxth	r3, r3
   15878:	b29a      	uxth	r2, r3
   1587a:	f240 33f2 	movw	r3, #1010	; 0x3f2
   1587e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15882:	801a      	strh	r2, [r3, #0]
      slider_2_val = (float)ir_roll_neutral;
   15884:	f240 33f2 	movw	r3, #1010	; 0x3f2
   15888:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1588c:	881b      	ldrh	r3, [r3, #0]
   1588e:	b21b      	sxth	r3, r3
   15890:	4618      	mov	r0, r3
   15892:	f002 fce7 	bl	18264 <__aeabi_i2f>
   15896:	4602      	mov	r2, r0
   15898:	f64b 63ec 	movw	r3, #48876	; 0xbeec
   1589c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158a0:	601a      	str	r2, [r3, #0]
    }
  }
  if (pprz_mode == PPRZ_MODE_AUTO2) {
   158a2:	f64b 63dc 	movw	r3, #48860	; 0xbedc
   158a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158aa:	781b      	ldrb	r3, [r3, #0]
   158ac:	2b02      	cmp	r3, #2
   158ae:	f040 80da 	bne.w	15a66 <inflight_calib+0x39e>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   158b2:	f24c 530c 	movw	r3, #50444	; 0xc50c
   158b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158ba:	781b      	ldrb	r3, [r3, #0]
   158bc:	2b02      	cmp	r3, #2
   158be:	d165      	bne.n	1598c <inflight_calib+0x2c4>
      static float course_pgain_init;
      if (mode_changed) {
   158c0:	79fb      	ldrb	r3, [r7, #7]
   158c2:	2b00      	cmp	r3, #0
   158c4:	d013      	beq.n	158ee <inflight_calib+0x226>
        course_pgain_init = course_pgain;
   158c6:	f240 4308 	movw	r3, #1032	; 0x408
   158ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158ce:	681a      	ldr	r2, [r3, #0]
   158d0:	f24c 5318 	movw	r3, #50456	; 0xc518
   158d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158d8:	601a      	str	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   158da:	f24c 0300 	movw	r3, #49152	; 0xc000
   158de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158e2:	895a      	ldrh	r2, [r3, #10]
   158e4:	f24c 530e 	movw	r3, #50446	; 0xc50e
   158e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158ec:	801a      	strh	r2, [r3, #0]
      }
      course_pgain = ParamValFloat(course_pgain_init, 0.100000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   158ee:	f24c 5318 	movw	r3, #50456	; 0xc518
   158f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158f6:	681b      	ldr	r3, [r3, #0]
   158f8:	4618      	mov	r0, r3
   158fa:	f002 f873 	bl	179e4 <__aeabi_f2d>
   158fe:	4604      	mov	r4, r0
   15900:	460d      	mov	r5, r1
   15902:	f24c 0300 	movw	r3, #49152	; 0xc000
   15906:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1590a:	895b      	ldrh	r3, [r3, #10]
   1590c:	b21a      	sxth	r2, r3
   1590e:	f24c 530e 	movw	r3, #50446	; 0xc50e
   15912:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15916:	881b      	ldrh	r3, [r3, #0]
   15918:	b21b      	sxth	r3, r3
   1591a:	1ad3      	subs	r3, r2, r3
   1591c:	4618      	mov	r0, r3
   1591e:	f002 fca1 	bl	18264 <__aeabi_i2f>
   15922:	4603      	mov	r3, r0
   15924:	4618      	mov	r0, r3
   15926:	f002 f85d 	bl	179e4 <__aeabi_f2d>
   1592a:	4602      	mov	r2, r0
   1592c:	460b      	mov	r3, r1
   1592e:	4610      	mov	r0, r2
   15930:	4619      	mov	r1, r3
   15932:	a34f      	add	r3, pc, #316	; (adr r3, 15a70 <inflight_calib+0x3a8>)
   15934:	e9d3 2300 	ldrd	r2, r3, [r3]
   15938:	f002 f8a8 	bl	17a8c <__aeabi_dmul>
   1593c:	4602      	mov	r2, r0
   1593e:	460b      	mov	r3, r1
   15940:	4610      	mov	r0, r2
   15942:	4619      	mov	r1, r3
   15944:	f04f 0200 	mov.w	r2, #0
   15948:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1594c:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15950:	f002 f9c6 	bl	17ce0 <__aeabi_ddiv>
   15954:	4602      	mov	r2, r0
   15956:	460b      	mov	r3, r1
   15958:	4620      	mov	r0, r4
   1595a:	4629      	mov	r1, r5
   1595c:	f001 fee4 	bl	17728 <__adddf3>
   15960:	4602      	mov	r2, r0
   15962:	460b      	mov	r3, r1
   15964:	4610      	mov	r0, r2
   15966:	4619      	mov	r1, r3
   15968:	f002 fb72 	bl	18050 <__aeabi_d2f>
   1596c:	4602      	mov	r2, r0
   1596e:	f240 4308 	movw	r3, #1032	; 0x408
   15972:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15976:	601a      	str	r2, [r3, #0]
      slider_1_val = (float)course_pgain;
   15978:	f240 4308 	movw	r3, #1032	; 0x408
   1597c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15980:	681a      	ldr	r2, [r3, #0]
   15982:	f64b 63e8 	movw	r3, #48872	; 0xbee8
   15986:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1598a:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   1598c:	f24c 530c 	movw	r3, #50444	; 0xc50c
   15990:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15994:	781b      	ldrb	r3, [r3, #0]
   15996:	2b02      	cmp	r3, #2
   15998:	d165      	bne.n	15a66 <inflight_calib+0x39e>
      static float max_roll_init;
      if (mode_changed) {
   1599a:	79fb      	ldrb	r3, [r7, #7]
   1599c:	2b00      	cmp	r3, #0
   1599e:	d013      	beq.n	159c8 <inflight_calib+0x300>
        max_roll_init = max_roll;
   159a0:	f240 430c 	movw	r3, #1036	; 0x40c
   159a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159a8:	681a      	ldr	r2, [r3, #0]
   159aa:	f24c 531c 	movw	r3, #50460	; 0xc51c
   159ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159b2:	601a      	str	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   159b4:	f24c 0300 	movw	r3, #49152	; 0xc000
   159b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159bc:	899a      	ldrh	r2, [r3, #12]
   159be:	f24c 5310 	movw	r3, #50448	; 0xc510
   159c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159c6:	801a      	strh	r2, [r3, #0]
      }
      max_roll = ParamValFloat(max_roll_init, -0.200000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   159c8:	f24c 531c 	movw	r3, #50460	; 0xc51c
   159cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159d0:	681b      	ldr	r3, [r3, #0]
   159d2:	4618      	mov	r0, r3
   159d4:	f002 f806 	bl	179e4 <__aeabi_f2d>
   159d8:	4604      	mov	r4, r0
   159da:	460d      	mov	r5, r1
   159dc:	f24c 0300 	movw	r3, #49152	; 0xc000
   159e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159e4:	899b      	ldrh	r3, [r3, #12]
   159e6:	b21a      	sxth	r2, r3
   159e8:	f24c 5310 	movw	r3, #50448	; 0xc510
   159ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159f0:	881b      	ldrh	r3, [r3, #0]
   159f2:	b21b      	sxth	r3, r3
   159f4:	1ad3      	subs	r3, r2, r3
   159f6:	4618      	mov	r0, r3
   159f8:	f002 fc34 	bl	18264 <__aeabi_i2f>
   159fc:	4603      	mov	r3, r0
   159fe:	4618      	mov	r0, r3
   15a00:	f001 fff0 	bl	179e4 <__aeabi_f2d>
   15a04:	4602      	mov	r2, r0
   15a06:	460b      	mov	r3, r1
   15a08:	4610      	mov	r0, r2
   15a0a:	4619      	mov	r1, r3
   15a0c:	a31a      	add	r3, pc, #104	; (adr r3, 15a78 <inflight_calib+0x3b0>)
   15a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15a12:	f002 f83b 	bl	17a8c <__aeabi_dmul>
   15a16:	4602      	mov	r2, r0
   15a18:	460b      	mov	r3, r1
   15a1a:	4610      	mov	r0, r2
   15a1c:	4619      	mov	r1, r3
   15a1e:	f04f 0200 	mov.w	r2, #0
   15a22:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15a26:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15a2a:	f002 f959 	bl	17ce0 <__aeabi_ddiv>
   15a2e:	4602      	mov	r2, r0
   15a30:	460b      	mov	r3, r1
   15a32:	4620      	mov	r0, r4
   15a34:	4629      	mov	r1, r5
   15a36:	f001 fe77 	bl	17728 <__adddf3>
   15a3a:	4602      	mov	r2, r0
   15a3c:	460b      	mov	r3, r1
   15a3e:	4610      	mov	r0, r2
   15a40:	4619      	mov	r1, r3
   15a42:	f002 fb05 	bl	18050 <__aeabi_d2f>
   15a46:	4602      	mov	r2, r0
   15a48:	f240 430c 	movw	r3, #1036	; 0x40c
   15a4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a50:	601a      	str	r2, [r3, #0]
      slider_2_val = (float)max_roll;
   15a52:	f240 430c 	movw	r3, #1036	; 0x40c
   15a56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a5a:	681a      	ldr	r2, [r3, #0]
   15a5c:	f64b 63ec 	movw	r3, #48876	; 0xbeec
   15a60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a64:	601a      	str	r2, [r3, #0]
    }
  }
}
   15a66:	3708      	adds	r7, #8
   15a68:	46bd      	mov	sp, r7
   15a6a:	bdb0      	pop	{r4, r5, r7, pc}
   15a6c:	f3af 8000 	nop.w
   15a70:	9999999a 	.word	0x9999999a
   15a74:	3fb99999 	.word	0x3fb99999
   15a78:	9999999a 	.word	0x9999999a
   15a7c:	bfc99999 	.word	0xbfc99999

00015a80 <pp_atan2>:
 *
 */
#include <math.h>

double pp_atan2(double x, double y)
{
   15a80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   15a84:	b08e      	sub	sp, #56	; 0x38
   15a86:	af00      	add	r7, sp, #0
   15a88:	e9c7 0102 	strd	r0, r1, [r7, #8]
   15a8c:	e9c7 2300 	strd	r2, r3, [r7]
	double coeff_1 = M_PI/4;
   15a90:	a357      	add	r3, pc, #348	; (adr r3, 15bf0 <pp_atan2+0x170>)
   15a92:	e9d3 2300 	ldrd	r2, r3, [r3]
   15a96:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double coeff_2 = 3*coeff_1;
   15a9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15a9e:	f04f 0200 	mov.w	r2, #0
   15aa2:	f04f 0300 	mov.w	r3, #0
   15aa6:	f2c4 0308 	movt	r3, #16392	; 0x4008
   15aaa:	f001 ffef 	bl	17a8c <__aeabi_dmul>
   15aae:	4602      	mov	r2, r0
   15ab0:	460b      	mov	r3, r1
   15ab2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double abs_y = fabs(y)+1e-10;
   15ab6:	e9d7 0100 	ldrd	r0, r1, [r7]
   15aba:	f04f 0200 	mov.w	r2, #0
   15abe:	f04f 0300 	mov.w	r3, #0
   15ac2:	f002 fa55 	bl	17f70 <__aeabi_dcmplt>
   15ac6:	4603      	mov	r3, r0
   15ac8:	2b00      	cmp	r3, #0
   15aca:	d009      	beq.n	15ae0 <pp_atan2+0x60>
   15acc:	a14a      	add	r1, pc, #296	; (adr r1, 15bf8 <pp_atan2+0x178>)
   15ace:	e9d1 0100 	ldrd	r0, r1, [r1]
   15ad2:	e9d7 2300 	ldrd	r2, r3, [r7]
   15ad6:	f001 fe25 	bl	17724 <__aeabi_dsub>
   15ada:	4602      	mov	r2, r0
   15adc:	460b      	mov	r3, r1
   15ade:	e008      	b.n	15af2 <pp_atan2+0x72>
   15ae0:	e9d7 0100 	ldrd	r0, r1, [r7]
   15ae4:	a344      	add	r3, pc, #272	; (adr r3, 15bf8 <pp_atan2+0x178>)
   15ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
   15aea:	f001 fe1d 	bl	17728 <__adddf3>
   15aee:	4602      	mov	r2, r0
   15af0:	460b      	mov	r3, r1
   15af2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angle, r;
	if(x>0)
   15af6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15afa:	f04f 0200 	mov.w	r2, #0
   15afe:	f04f 0300 	mov.w	r3, #0
   15b02:	f002 fa53 	bl	17fac <__aeabi_dcmpgt>
   15b06:	4603      	mov	r3, r0
   15b08:	2b00      	cmp	r3, #0
   15b0a:	d02a      	beq.n	15b62 <pp_atan2+0xe2>
	{
		r = (x - abs_y)/(x + abs_y);
   15b0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15b10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15b14:	f001 fe06 	bl	17724 <__aeabi_dsub>
   15b18:	4602      	mov	r2, r0
   15b1a:	460b      	mov	r3, r1
   15b1c:	4690      	mov	r8, r2
   15b1e:	4699      	mov	r9, r3
   15b20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15b24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15b28:	f001 fdfe 	bl	17728 <__adddf3>
   15b2c:	4602      	mov	r2, r0
   15b2e:	460b      	mov	r3, r1
   15b30:	4640      	mov	r0, r8
   15b32:	4649      	mov	r1, r9
   15b34:	f002 f8d4 	bl	17ce0 <__aeabi_ddiv>
   15b38:	4602      	mov	r2, r0
   15b3a:	460b      	mov	r3, r1
   15b3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_1 - coeff_1*r;
   15b40:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15b44:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15b48:	f001 ffa0 	bl	17a8c <__aeabi_dmul>
   15b4c:	4602      	mov	r2, r0
   15b4e:	460b      	mov	r3, r1
   15b50:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15b54:	f001 fde6 	bl	17724 <__aeabi_dsub>
   15b58:	4602      	mov	r2, r0
   15b5a:	460b      	mov	r3, r1
   15b5c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   15b60:	e029      	b.n	15bb6 <pp_atan2+0x136>
	}
	else
	{
		r = (x + abs_y)/(abs_y - x);
   15b62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15b66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15b6a:	f001 fddd 	bl	17728 <__adddf3>
   15b6e:	4602      	mov	r2, r0
   15b70:	460b      	mov	r3, r1
   15b72:	4690      	mov	r8, r2
   15b74:	4699      	mov	r9, r3
   15b76:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15b7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   15b7e:	f001 fdd1 	bl	17724 <__aeabi_dsub>
   15b82:	4602      	mov	r2, r0
   15b84:	460b      	mov	r3, r1
   15b86:	4640      	mov	r0, r8
   15b88:	4649      	mov	r1, r9
   15b8a:	f002 f8a9 	bl	17ce0 <__aeabi_ddiv>
   15b8e:	4602      	mov	r2, r0
   15b90:	460b      	mov	r3, r1
   15b92:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_2 - coeff_1*r;
   15b96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15b9a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15b9e:	f001 ff75 	bl	17a8c <__aeabi_dmul>
   15ba2:	4602      	mov	r2, r0
   15ba4:	460b      	mov	r3, r1
   15ba6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   15baa:	f001 fdbb 	bl	17724 <__aeabi_dsub>
   15bae:	4602      	mov	r2, r0
   15bb0:	460b      	mov	r3, r1
   15bb2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}
	if(y<0)
   15bb6:	e9d7 0100 	ldrd	r0, r1, [r7]
   15bba:	f04f 0200 	mov.w	r2, #0
   15bbe:	f04f 0300 	mov.w	r3, #0
   15bc2:	f002 f9d5 	bl	17f70 <__aeabi_dcmplt>
   15bc6:	4603      	mov	r3, r0
   15bc8:	2b00      	cmp	r3, #0
   15bca:	d004      	beq.n	15bd6 <pp_atan2+0x156>
		return (-angle);
   15bcc:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   15bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15bd0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15bd4:	e001      	b.n	15bda <pp_atan2+0x15a>
	else
		return angle;
   15bd6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
   15bda:	4622      	mov	r2, r4
   15bdc:	462b      	mov	r3, r5
}
   15bde:	4610      	mov	r0, r2
   15be0:	4619      	mov	r1, r3
   15be2:	3738      	adds	r7, #56	; 0x38
   15be4:	46bd      	mov	sp, r7
   15be6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   15bea:	bf00      	nop
   15bec:	f3af 8000 	nop.w
   15bf0:	54442d18 	.word	0x54442d18
   15bf4:	3fe921fb 	.word	0x3fe921fb
   15bf8:	d9d7bdbb 	.word	0xd9d7bdbb
   15bfc:	3ddb7cdf 	.word	0x3ddb7cdf

00015c00 <pp_sin>:
 * Range: -pi/2 <= x <= pi/2
 * Precision: +/- .000,000,005
 */
 
double pp_sin(double x)
{
   15c00:	b5b0      	push	{r4, r5, r7, lr}
   15c02:	b08c      	sub	sp, #48	; 0x30
   15c04:	af00      	add	r7, sp, #0
   15c06:	e9c7 0100 	strd	r0, r1, [r7]
	double xi, y, q, q2;
	int sign;

	xi = x; sign = 1;
   15c0a:	e9d7 2300 	ldrd	r2, r3, [r7]
   15c0e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15c12:	2301      	movs	r3, #1
   15c14:	627b      	str	r3, [r7, #36]	; 0x24
	while (xi < -1.57079632679489661923) xi += 6.28318530717958647692;
   15c16:	e00a      	b.n	15c2e <pp_sin+0x2e>
   15c18:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15c1c:	a35a      	add	r3, pc, #360	; (adr r3, 15d88 <pp_sin+0x188>)
   15c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c22:	f001 fd81 	bl	17728 <__adddf3>
   15c26:	4602      	mov	r2, r0
   15c28:	460b      	mov	r3, r1
   15c2a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15c2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15c32:	a357      	add	r3, pc, #348	; (adr r3, 15d90 <pp_sin+0x190>)
   15c34:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c38:	f002 f99a 	bl	17f70 <__aeabi_dcmplt>
   15c3c:	4603      	mov	r3, r0
   15c3e:	2b00      	cmp	r3, #0
   15c40:	d1ea      	bne.n	15c18 <pp_sin+0x18>
	while (xi > 4.71238898038468985769) xi -= 6.28318530717958647692;
   15c42:	e00a      	b.n	15c5a <pp_sin+0x5a>
   15c44:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15c48:	a34f      	add	r3, pc, #316	; (adr r3, 15d88 <pp_sin+0x188>)
   15c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c4e:	f001 fd69 	bl	17724 <__aeabi_dsub>
   15c52:	4602      	mov	r2, r0
   15c54:	460b      	mov	r3, r1
   15c56:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15c5a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15c5e:	a34e      	add	r3, pc, #312	; (adr r3, 15d98 <pp_sin+0x198>)
   15c60:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c64:	f002 f9a2 	bl	17fac <__aeabi_dcmpgt>
   15c68:	4603      	mov	r3, r0
   15c6a:	2b00      	cmp	r3, #0
   15c6c:	d1ea      	bne.n	15c44 <pp_sin+0x44>
	if (xi > 1.57079632679489661923) {
   15c6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15c72:	a34b      	add	r3, pc, #300	; (adr r3, 15da0 <pp_sin+0x1a0>)
   15c74:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c78:	f002 f998 	bl	17fac <__aeabi_dcmpgt>
   15c7c:	4603      	mov	r3, r0
   15c7e:	2b00      	cmp	r3, #0
   15c80:	d00d      	beq.n	15c9e <pp_sin+0x9e>
		xi -= 3.141592653589793238462643;
   15c82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15c86:	a348      	add	r3, pc, #288	; (adr r3, 15da8 <pp_sin+0x1a8>)
   15c88:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c8c:	f001 fd4a 	bl	17724 <__aeabi_dsub>
   15c90:	4602      	mov	r2, r0
   15c92:	460b      	mov	r3, r1
   15c94:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		sign = -1;
   15c98:	f04f 33ff 	mov.w	r3, #4294967295
   15c9c:	627b      	str	r3, [r7, #36]	; 0x24
	}
	q = xi / 1.57079632679; q2 = q * q;
   15c9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15ca2:	a343      	add	r3, pc, #268	; (adr r3, 15db0 <pp_sin+0x1b0>)
   15ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
   15ca8:	f002 f81a 	bl	17ce0 <__aeabi_ddiv>
   15cac:	4602      	mov	r2, r0
   15cae:	460b      	mov	r3, r1
   15cb0:	e9c7 2306 	strd	r2, r3, [r7, #24]
   15cb4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15cb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15cbc:	f001 fee6 	bl	17a8c <__aeabi_dmul>
   15cc0:	4602      	mov	r2, r0
   15cc2:	460b      	mov	r3, r1
   15cc4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	y = ((((.00015148419  * q2
   15cc8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   15ccc:	a33a      	add	r3, pc, #232	; (adr r3, 15db8 <pp_sin+0x1b8>)
   15cce:	e9d3 2300 	ldrd	r2, r3, [r3]
   15cd2:	f001 fedb 	bl	17a8c <__aeabi_dmul>
   15cd6:	4602      	mov	r2, r0
   15cd8:	460b      	mov	r3, r1
	      - .00467376557) * q2
   15cda:	4610      	mov	r0, r2
   15cdc:	4619      	mov	r1, r3
   15cde:	a338      	add	r3, pc, #224	; (adr r3, 15dc0 <pp_sin+0x1c0>)
   15ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
   15ce4:	f001 fd1e 	bl	17724 <__aeabi_dsub>
   15ce8:	4602      	mov	r2, r0
   15cea:	460b      	mov	r3, r1
   15cec:	4610      	mov	r0, r2
   15cee:	4619      	mov	r1, r3
   15cf0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15cf4:	f001 feca 	bl	17a8c <__aeabi_dmul>
   15cf8:	4602      	mov	r2, r0
   15cfa:	460b      	mov	r3, r1
	      + .07968967928) * q2
   15cfc:	4610      	mov	r0, r2
   15cfe:	4619      	mov	r1, r3
   15d00:	a331      	add	r3, pc, #196	; (adr r3, 15dc8 <pp_sin+0x1c8>)
   15d02:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d06:	f001 fd0f 	bl	17728 <__adddf3>
   15d0a:	4602      	mov	r2, r0
   15d0c:	460b      	mov	r3, r1
   15d0e:	4610      	mov	r0, r2
   15d10:	4619      	mov	r1, r3
   15d12:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15d16:	f001 feb9 	bl	17a8c <__aeabi_dmul>
   15d1a:	4602      	mov	r2, r0
   15d1c:	460b      	mov	r3, r1
	      - .64596371106) * q2
   15d1e:	4610      	mov	r0, r2
   15d20:	4619      	mov	r1, r3
   15d22:	a32b      	add	r3, pc, #172	; (adr r3, 15dd0 <pp_sin+0x1d0>)
   15d24:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d28:	f001 fcfc 	bl	17724 <__aeabi_dsub>
   15d2c:	4602      	mov	r2, r0
   15d2e:	460b      	mov	r3, r1
   15d30:	4610      	mov	r0, r2
   15d32:	4619      	mov	r1, r3
   15d34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15d38:	f001 fea8 	bl	17a8c <__aeabi_dmul>
   15d3c:	4602      	mov	r2, r0
   15d3e:	460b      	mov	r3, r1
	      +1.57079631847) * q;
   15d40:	4610      	mov	r0, r2
   15d42:	4619      	mov	r1, r3
   15d44:	a324      	add	r3, pc, #144	; (adr r3, 15dd8 <pp_sin+0x1d8>)
   15d46:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d4a:	f001 fced 	bl	17728 <__adddf3>
   15d4e:	4602      	mov	r2, r0
   15d50:	460b      	mov	r3, r1
	if (xi > 1.57079632679489661923) {
		xi -= 3.141592653589793238462643;
		sign = -1;
	}
	q = xi / 1.57079632679; q2 = q * q;
	y = ((((.00015148419  * q2
   15d52:	4610      	mov	r0, r2
   15d54:	4619      	mov	r1, r3
   15d56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15d5a:	f001 fe97 	bl	17a8c <__aeabi_dmul>
   15d5e:	4602      	mov	r2, r0
   15d60:	460b      	mov	r3, r1
   15d62:	e9c7 2302 	strd	r2, r3, [r7, #8]
	      - .00467376557) * q2
	      + .07968967928) * q2
	      - .64596371106) * q2
	      +1.57079631847) * q;
	return(sign < 0? -y : y);
   15d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15d68:	2b00      	cmp	r3, #0
   15d6a:	da04      	bge.n	15d76 <pp_sin+0x176>
   15d6c:	68bc      	ldr	r4, [r7, #8]
   15d6e:	68fb      	ldr	r3, [r7, #12]
   15d70:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15d74:	e001      	b.n	15d7a <pp_sin+0x17a>
   15d76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
   15d7a:	4622      	mov	r2, r4
   15d7c:	462b      	mov	r3, r5
}
   15d7e:	4610      	mov	r0, r2
   15d80:	4619      	mov	r1, r3
   15d82:	3730      	adds	r7, #48	; 0x30
   15d84:	46bd      	mov	sp, r7
   15d86:	bdb0      	pop	{r4, r5, r7, pc}
   15d88:	54442d18 	.word	0x54442d18
   15d8c:	401921fb 	.word	0x401921fb
   15d90:	54442d18 	.word	0x54442d18
   15d94:	bff921fb 	.word	0xbff921fb
   15d98:	7f3321d2 	.word	0x7f3321d2
   15d9c:	4012d97c 	.word	0x4012d97c
   15da0:	54442d18 	.word	0x54442d18
   15da4:	3ff921fb 	.word	0x3ff921fb
   15da8:	54442d18 	.word	0x54442d18
   15dac:	400921fb 	.word	0x400921fb
   15db0:	5443d6f4 	.word	0x5443d6f4
   15db4:	3ff921fb 	.word	0x3ff921fb
   15db8:	48a890af 	.word	0x48a890af
   15dbc:	3f23daf7 	.word	0x3f23daf7
   15dc0:	645b6d0e 	.word	0x645b6d0e
   15dc4:	3f7324cc 	.word	0x3f7324cc
   15dc8:	f65619a5 	.word	0xf65619a5
   15dcc:	3fb4668a 	.word	0x3fb4668a
   15dd0:	16acf9cd 	.word	0x16acf9cd
   15dd4:	3fe4abbc 	.word	0x3fe4abbc
   15dd8:	520817f7 	.word	0x520817f7
   15ddc:	3ff921fb 	.word	0x3ff921fb

00015de0 <pp_sqrt>:

#define SQRT_PRECISION 5
double pp_sqrt(double n)
{
   15de0:	b480      	push	{r7}
   15de2:	b083      	sub	sp, #12
   15de4:	af00      	add	r7, sp, #0
   15de6:	e9c7 0100 	strd	r0, r1, [r7]
	/* perform the computation */
	for(i = 0; i < SQRT_PRECISION; i++)
		x = (x + n / x) / 2;
	return x;
#endif
}
   15dea:	4610      	mov	r0, r2
   15dec:	4619      	mov	r1, r3
   15dee:	370c      	adds	r7, #12
   15df0:	46bd      	mov	sp, r7
   15df2:	f85d 7b04 	ldr.w	r7, [sp], #4
   15df6:	4770      	bx	lr

00015df8 <fbw_adc_buf_channel>:

uint16_t fbw_adc_samples[ FBW_NB_ADC ];

static struct fbw_adc_buf* buffers[FBW_NB_ADC];

void fbw_adc_buf_channel(uint8_t adc_channel, struct fbw_adc_buf* s) {
   15df8:	b480      	push	{r7}
   15dfa:	b083      	sub	sp, #12
   15dfc:	af00      	add	r7, sp, #0
   15dfe:	4603      	mov	r3, r0
   15e00:	6039      	str	r1, [r7, #0]
   15e02:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   15e04:	79fa      	ldrb	r2, [r7, #7]
   15e06:	f24c 5330 	movw	r3, #50480	; 0xc530
   15e0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15e0e:	6839      	ldr	r1, [r7, #0]
   15e10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   15e14:	370c      	adds	r7, #12
   15e16:	46bd      	mov	sp, r7
   15e18:	f85d 7b04 	ldr.w	r7, [sp], #4
   15e1c:	4770      	bx	lr
   15e1e:	bf00      	nop

00015e20 <fbw_adc_init>:

void 
fbw_adc_init( void )
{
   15e20:	b480      	push	{r7}
   15e22:	b083      	sub	sp, #12
   15e24:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   15e26:	f242 0315 	movw	r3, #8213	; 0x2015
   15e2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e2e:	2200      	movs	r2, #0
   15e30:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   15e32:	f242 0314 	movw	r3, #8212	; 0x2014
   15e36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e3a:	2200      	movs	r2, #0
   15e3c:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref */
  ADMUX		= ANALOG_VREF;
   15e3e:	f242 0307 	movw	r3, #8199	; 0x2007
   15e42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e46:	22c0      	movs	r2, #192	; 0xc0
   15e48:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSRA = 0
   15e4a:	f242 0306 	movw	r3, #8198	; 0x2006
   15e4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e52:	22cf      	movs	r2, #207	; 0xcf
   15e54:	701a      	strb	r2, [r3, #0]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   15e56:	2300      	movs	r3, #0
   15e58:	71fb      	strb	r3, [r7, #7]
   15e5a:	e00a      	b.n	15e72 <fbw_adc_init+0x52>
    buffers[i] = (struct fbw_adc_buf*)0;
   15e5c:	79fa      	ldrb	r2, [r7, #7]
   15e5e:	f24c 5330 	movw	r3, #50480	; 0xc530
   15e62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15e66:	2100      	movs	r1, #0
   15e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   15e6c:	79fb      	ldrb	r3, [r7, #7]
   15e6e:	3301      	adds	r3, #1
   15e70:	71fb      	strb	r3, [r7, #7]
   15e72:	79fb      	ldrb	r3, [r7, #7]
   15e74:	2b07      	cmp	r3, #7
   15e76:	d9f1      	bls.n	15e5c <fbw_adc_init+0x3c>
    buffers[i] = (struct fbw_adc_buf*)0;
}
   15e78:	370c      	adds	r7, #12
   15e7a:	46bd      	mov	sp, r7
   15e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
   15e80:	4770      	bx	lr
   15e82:	bf00      	nop

00015e84 <__vector_34>:
#ifdef PAPABENCH_SINGLE
	SIGNAL(SIG_SPM_READY)
#else
	SIGNAL( SIG_INPUT_CAPTURE1 )
#endif
{
   15e84:	b480      	push	{r7}
   15e86:	b083      	sub	sp, #12
   15e88:	af00      	add	r7, sp, #0
  uint16_t		this;
  uint16_t		width;
  static uint8_t		state;
  static uint8_t		sync_start;

  this		= ICR1;
   15e8a:	f242 0326 	movw	r3, #8230	; 0x2026
   15e8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e92:	881b      	ldrh	r3, [r3, #0]
   15e94:	80fb      	strh	r3, [r7, #6]
  width		= this - last;
   15e96:	f24c 538c 	movw	r3, #50572	; 0xc58c
   15e9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15e9e:	881b      	ldrh	r3, [r3, #0]
   15ea0:	88fa      	ldrh	r2, [r7, #6]
   15ea2:	1ad3      	subs	r3, r2, r3
   15ea4:	80bb      	strh	r3, [r7, #4]
  last		= this;
   15ea6:	f24c 538c 	movw	r3, #50572	; 0xc58c
   15eaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15eae:	88fa      	ldrh	r2, [r7, #6]
   15eb0:	801a      	strh	r2, [r3, #0]
  
  if( state == 0 ) {
   15eb2:	f24c 538e 	movw	r3, #50574	; 0xc58e
   15eb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15eba:	781b      	ldrb	r3, [r3, #0]
   15ebc:	2b00      	cmp	r3, #0
   15ebe:	d11e      	bne.n	15efe <__vector_34+0x7a>
    uint8_t	end = TCNT2;
   15ec0:	f242 0324 	movw	r3, #8228	; 0x2024
   15ec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ec8:	781b      	ldrb	r3, [r3, #0]
   15eca:	70fb      	strb	r3, [r7, #3]
    uint8_t diff = (end - sync_start);
   15ecc:	f24c 538f 	movw	r3, #50575	; 0xc58f
   15ed0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ed4:	781b      	ldrb	r3, [r3, #0]
   15ed6:	78fa      	ldrb	r2, [r7, #3]
   15ed8:	1ad3      	subs	r3, r2, r3
   15eda:	70bb      	strb	r3, [r7, #2]
    sync_start = end;
   15edc:	f24c 538f 	movw	r3, #50575	; 0xc58f
   15ee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ee4:	78fa      	ldrb	r2, [r7, #3]
   15ee6:	701a      	strb	r2, [r3, #0]

    /* The frame period of the mc3030 seems to be 25ms. 
     * One pulse lasts from 1.05ms to 2.150ms.
     * Sync pulse is at least 7ms : (7000*CLOCK)/1024 = 109
     */
    if( diff > (uint8_t)(((uint32_t)(7000ul*CLOCK))/1024ul) ) {
   15ee8:	78bb      	ldrb	r3, [r7, #2]
   15eea:	2b6d      	cmp	r3, #109	; 0x6d
   15eec:	d906      	bls.n	15efc <__vector_34+0x78>
      state = 1;
   15eee:	f24c 538e 	movw	r3, #50574	; 0xc58e
   15ef2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ef6:	2201      	movs	r2, #1
   15ef8:	701a      	strb	r2, [r3, #0]
   15efa:	e053      	b.n	15fa4 <__vector_34+0x120>
   15efc:	e052      	b.n	15fa4 <__vector_34+0x120>
    }
  } 
  else {
    /* Read a data pulses */
    if( width < 700ul*CLOCK || width > 2300ul*CLOCK)
   15efe:	88bb      	ldrh	r3, [r7, #4]
   15f00:	f5b3 5f2f 	cmp.w	r3, #11200	; 0x2bc0
   15f04:	d304      	bcc.n	15f10 <__vector_34+0x8c>
   15f06:	88ba      	ldrh	r2, [r7, #4]
   15f08:	f648 73c0 	movw	r3, #36800	; 0x8fc0
   15f0c:	429a      	cmp	r2, r3
   15f0e:	d911      	bls.n	15f34 <__vector_34+0xb0>
      RestartPpmCycle();
   15f10:	f24c 538e 	movw	r3, #50574	; 0xc58e
   15f14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f18:	2200      	movs	r2, #0
   15f1a:	701a      	strb	r2, [r3, #0]
   15f1c:	f242 0324 	movw	r3, #8228	; 0x2024
   15f20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f24:	781b      	ldrb	r3, [r3, #0]
   15f26:	b2da      	uxtb	r2, r3
   15f28:	f24c 538f 	movw	r3, #50575	; 0xc58f
   15f2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f30:	701a      	strb	r2, [r3, #0]
   15f32:	e038      	b.n	15fa6 <__vector_34+0x122>
    ppm_pulses[state - 1] = width;
   15f34:	f24c 538e 	movw	r3, #50574	; 0xc58e
   15f38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f3c:	781b      	ldrb	r3, [r3, #0]
   15f3e:	1e5a      	subs	r2, r3, #1
   15f40:	f24c 5350 	movw	r3, #50512	; 0xc550
   15f44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f48:	88b9      	ldrh	r1, [r7, #4]
   15f4a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (state >= PPM_NB_PULSES) {
   15f4e:	f24c 538e 	movw	r3, #50574	; 0xc58e
   15f52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f56:	781b      	ldrb	r3, [r3, #0]
   15f58:	2b08      	cmp	r3, #8
   15f5a:	d917      	bls.n	15f8c <__vector_34+0x108>
      ppm_valid	= 1;
   15f5c:	f24c 538b 	movw	r3, #50571	; 0xc58b
   15f60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f64:	2201      	movs	r2, #1
   15f66:	701a      	strb	r2, [r3, #0]
      RestartPpmCycle();
   15f68:	f24c 538e 	movw	r3, #50574	; 0xc58e
   15f6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f70:	2200      	movs	r2, #0
   15f72:	701a      	strb	r2, [r3, #0]
   15f74:	f242 0324 	movw	r3, #8228	; 0x2024
   15f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f7c:	781b      	ldrb	r3, [r3, #0]
   15f7e:	b2da      	uxtb	r2, r3
   15f80:	f24c 538f 	movw	r3, #50575	; 0xc58f
   15f84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f88:	701a      	strb	r2, [r3, #0]
   15f8a:	e00c      	b.n	15fa6 <__vector_34+0x122>
    } else 
      state++;
   15f8c:	f24c 538e 	movw	r3, #50574	; 0xc58e
   15f90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f94:	781b      	ldrb	r3, [r3, #0]
   15f96:	3301      	adds	r3, #1
   15f98:	b2da      	uxtb	r2, r3
   15f9a:	f24c 538e 	movw	r3, #50574	; 0xc58e
   15f9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15fa2:	701a      	strb	r2, [r3, #0]
  }
  return;
   15fa4:	bf00      	nop
}
   15fa6:	370c      	adds	r7, #12
   15fa8:	46bd      	mov	sp, r7
   15faa:	f85d 7b04 	ldr.w	r7, [sp], #4
   15fae:	4770      	bx	lr

00015fb0 <last_radio_from_ppm>:

/* Copy from the ppm receiving buffer to the buffer sent to mcu0 */
void last_radio_from_ppm() {
   15fb0:	b590      	push	{r4, r7, lr}
   15fb2:	b083      	sub	sp, #12
   15fb4:	af00      	add	r7, sp, #0
  LastRadioFromPpm()
   15fb6:	f24c 5350 	movw	r3, #50512	; 0xc550
   15fba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15fbe:	881b      	ldrh	r3, [r3, #0]
   15fc0:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   15fc4:	b29b      	uxth	r3, r3
   15fc6:	80fb      	strh	r3, [r7, #6]
   15fc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15fcc:	4618      	mov	r0, r3
   15fce:	f002 f949 	bl	18264 <__aeabi_i2f>
   15fd2:	4603      	mov	r3, r0
   15fd4:	4618      	mov	r0, r3
   15fd6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   15fda:	f002 f997 	bl	1830c <__aeabi_fmul>
   15fde:	4603      	mov	r3, r0
   15fe0:	4618      	mov	r0, r3
   15fe2:	f002 fb59 	bl	18698 <__aeabi_f2iz>
   15fe6:	4603      	mov	r3, r0
   15fe8:	b29a      	uxth	r2, r3
   15fea:	f24c 5364 	movw	r3, #50532	; 0xc564
   15fee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ff2:	801a      	strh	r2, [r3, #0]
   15ff4:	f24c 5364 	movw	r3, #50532	; 0xc564
   15ff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ffc:	881b      	ldrh	r3, [r3, #0]
   15ffe:	b21b      	sxth	r3, r3
   16000:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16004:	dd07      	ble.n	16016 <last_radio_from_ppm+0x66>
   16006:	f24c 5364 	movw	r3, #50532	; 0xc564
   1600a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1600e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16012:	801a      	strh	r2, [r3, #0]
   16014:	e00d      	b.n	16032 <last_radio_from_ppm+0x82>
   16016:	f24c 5364 	movw	r3, #50532	; 0xc564
   1601a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1601e:	881b      	ldrh	r3, [r3, #0]
   16020:	b21b      	sxth	r3, r3
   16022:	2b00      	cmp	r3, #0
   16024:	da05      	bge.n	16032 <last_radio_from_ppm+0x82>
   16026:	f24c 5364 	movw	r3, #50532	; 0xc564
   1602a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1602e:	2200      	movs	r2, #0
   16030:	801a      	strh	r2, [r3, #0]
   16032:	f24c 5350 	movw	r3, #50512	; 0xc550
   16036:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1603a:	885b      	ldrh	r3, [r3, #2]
   1603c:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16040:	b29b      	uxth	r3, r3
   16042:	80fb      	strh	r3, [r7, #6]
   16044:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16048:	4618      	mov	r0, r3
   1604a:	f002 f90b 	bl	18264 <__aeabi_i2f>
   1604e:	4603      	mov	r3, r0
   16050:	4618      	mov	r0, r3
   16052:	f002 fb21 	bl	18698 <__aeabi_f2iz>
   16056:	4603      	mov	r3, r0
   16058:	b29a      	uxth	r2, r3
   1605a:	f24c 5364 	movw	r3, #50532	; 0xc564
   1605e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16062:	805a      	strh	r2, [r3, #2]
   16064:	f24c 5364 	movw	r3, #50532	; 0xc564
   16068:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1606c:	885b      	ldrh	r3, [r3, #2]
   1606e:	b21b      	sxth	r3, r3
   16070:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16074:	dd07      	ble.n	16086 <last_radio_from_ppm+0xd6>
   16076:	f24c 5364 	movw	r3, #50532	; 0xc564
   1607a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1607e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16082:	805a      	strh	r2, [r3, #2]
   16084:	e00f      	b.n	160a6 <last_radio_from_ppm+0xf6>
   16086:	f24c 5364 	movw	r3, #50532	; 0xc564
   1608a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1608e:	885b      	ldrh	r3, [r3, #2]
   16090:	b21b      	sxth	r3, r3
   16092:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16096:	da06      	bge.n	160a6 <last_radio_from_ppm+0xf6>
   16098:	f24c 5364 	movw	r3, #50532	; 0xc564
   1609c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160a0:	f64d 2280 	movw	r2, #55936	; 0xda80
   160a4:	805a      	strh	r2, [r3, #2]
   160a6:	f24c 5350 	movw	r3, #50512	; 0xc550
   160aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160ae:	889b      	ldrh	r3, [r3, #4]
   160b0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   160b4:	b29b      	uxth	r3, r3
   160b6:	80fb      	strh	r3, [r7, #6]
   160b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   160bc:	4618      	mov	r0, r3
   160be:	f002 f8d1 	bl	18264 <__aeabi_i2f>
   160c2:	4603      	mov	r3, r0
   160c4:	4618      	mov	r0, r3
   160c6:	f002 fae7 	bl	18698 <__aeabi_f2iz>
   160ca:	4603      	mov	r3, r0
   160cc:	b29a      	uxth	r2, r3
   160ce:	f24c 5364 	movw	r3, #50532	; 0xc564
   160d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160d6:	809a      	strh	r2, [r3, #4]
   160d8:	f24c 5364 	movw	r3, #50532	; 0xc564
   160dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160e0:	889b      	ldrh	r3, [r3, #4]
   160e2:	b21b      	sxth	r3, r3
   160e4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   160e8:	dd07      	ble.n	160fa <last_radio_from_ppm+0x14a>
   160ea:	f24c 5364 	movw	r3, #50532	; 0xc564
   160ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160f2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   160f6:	809a      	strh	r2, [r3, #4]
   160f8:	e00f      	b.n	1611a <last_radio_from_ppm+0x16a>
   160fa:	f24c 5364 	movw	r3, #50532	; 0xc564
   160fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16102:	889b      	ldrh	r3, [r3, #4]
   16104:	b21b      	sxth	r3, r3
   16106:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1610a:	da06      	bge.n	1611a <last_radio_from_ppm+0x16a>
   1610c:	f24c 5364 	movw	r3, #50532	; 0xc564
   16110:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16114:	f64d 2280 	movw	r2, #55936	; 0xda80
   16118:	809a      	strh	r2, [r3, #4]
   1611a:	f24c 5350 	movw	r3, #50512	; 0xc550
   1611e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16122:	88db      	ldrh	r3, [r3, #6]
   16124:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16128:	b29b      	uxth	r3, r3
   1612a:	80fb      	strh	r3, [r7, #6]
   1612c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16130:	4618      	mov	r0, r3
   16132:	f002 f897 	bl	18264 <__aeabi_i2f>
   16136:	4603      	mov	r3, r0
   16138:	4618      	mov	r0, r3
   1613a:	f002 faad 	bl	18698 <__aeabi_f2iz>
   1613e:	4603      	mov	r3, r0
   16140:	b29a      	uxth	r2, r3
   16142:	f24c 5364 	movw	r3, #50532	; 0xc564
   16146:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1614a:	80da      	strh	r2, [r3, #6]
   1614c:	f24c 5364 	movw	r3, #50532	; 0xc564
   16150:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16154:	88db      	ldrh	r3, [r3, #6]
   16156:	b21b      	sxth	r3, r3
   16158:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1615c:	dd07      	ble.n	1616e <last_radio_from_ppm+0x1be>
   1615e:	f24c 5364 	movw	r3, #50532	; 0xc564
   16162:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16166:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1616a:	80da      	strh	r2, [r3, #6]
   1616c:	e00f      	b.n	1618e <last_radio_from_ppm+0x1de>
   1616e:	f24c 5364 	movw	r3, #50532	; 0xc564
   16172:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16176:	88db      	ldrh	r3, [r3, #6]
   16178:	b21b      	sxth	r3, r3
   1617a:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1617e:	da06      	bge.n	1618e <last_radio_from_ppm+0x1de>
   16180:	f24c 5364 	movw	r3, #50532	; 0xc564
   16184:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16188:	f64d 2280 	movw	r2, #55936	; 0xda80
   1618c:	80da      	strh	r2, [r3, #6]
   1618e:	f24c 5350 	movw	r3, #50512	; 0xc550
   16192:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16196:	891b      	ldrh	r3, [r3, #8]
   16198:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1619c:	b29b      	uxth	r3, r3
   1619e:	80fb      	strh	r3, [r7, #6]
   161a0:	f24c 5378 	movw	r3, #50552	; 0xc578
   161a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161a8:	891b      	ldrh	r3, [r3, #8]
   161aa:	b21b      	sxth	r3, r3
   161ac:	4618      	mov	r0, r3
   161ae:	f002 f859 	bl	18264 <__aeabi_i2f>
   161b2:	4604      	mov	r4, r0
   161b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   161b8:	4618      	mov	r0, r3
   161ba:	f002 f853 	bl	18264 <__aeabi_i2f>
   161be:	4603      	mov	r3, r0
   161c0:	4618      	mov	r0, r3
   161c2:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   161c6:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   161ca:	f002 f89f 	bl	1830c <__aeabi_fmul>
   161ce:	4603      	mov	r3, r0
   161d0:	4620      	mov	r0, r4
   161d2:	4619      	mov	r1, r3
   161d4:	f001 ff92 	bl	180fc <__addsf3>
   161d8:	4603      	mov	r3, r0
   161da:	4618      	mov	r0, r3
   161dc:	f002 fa5c 	bl	18698 <__aeabi_f2iz>
   161e0:	4603      	mov	r3, r0
   161e2:	b29a      	uxth	r2, r3
   161e4:	f24c 5378 	movw	r3, #50552	; 0xc578
   161e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161ec:	811a      	strh	r2, [r3, #8]
   161ee:	f24c 5350 	movw	r3, #50512	; 0xc550
   161f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161f6:	895b      	ldrh	r3, [r3, #10]
   161f8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   161fc:	b29b      	uxth	r3, r3
   161fe:	80fb      	strh	r3, [r7, #6]
   16200:	f24c 5378 	movw	r3, #50552	; 0xc578
   16204:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16208:	895b      	ldrh	r3, [r3, #10]
   1620a:	b21b      	sxth	r3, r3
   1620c:	4618      	mov	r0, r3
   1620e:	f002 f829 	bl	18264 <__aeabi_i2f>
   16212:	4604      	mov	r4, r0
   16214:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16218:	4618      	mov	r0, r3
   1621a:	f002 f823 	bl	18264 <__aeabi_i2f>
   1621e:	4603      	mov	r3, r0
   16220:	4618      	mov	r0, r3
   16222:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   16226:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   1622a:	f002 f86f 	bl	1830c <__aeabi_fmul>
   1622e:	4603      	mov	r3, r0
   16230:	4620      	mov	r0, r4
   16232:	4619      	mov	r1, r3
   16234:	f001 ff62 	bl	180fc <__addsf3>
   16238:	4603      	mov	r3, r0
   1623a:	4618      	mov	r0, r3
   1623c:	f002 fa2c 	bl	18698 <__aeabi_f2iz>
   16240:	4603      	mov	r3, r0
   16242:	b29a      	uxth	r2, r3
   16244:	f24c 5378 	movw	r3, #50552	; 0xc578
   16248:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1624c:	815a      	strh	r2, [r3, #10]
   1624e:	f24c 5350 	movw	r3, #50512	; 0xc550
   16252:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16256:	899b      	ldrh	r3, [r3, #12]
   16258:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1625c:	b29b      	uxth	r3, r3
   1625e:	80fb      	strh	r3, [r7, #6]
   16260:	f24c 5378 	movw	r3, #50552	; 0xc578
   16264:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16268:	899b      	ldrh	r3, [r3, #12]
   1626a:	b21b      	sxth	r3, r3
   1626c:	4618      	mov	r0, r3
   1626e:	f001 fff9 	bl	18264 <__aeabi_i2f>
   16272:	4604      	mov	r4, r0
   16274:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16278:	4618      	mov	r0, r3
   1627a:	f001 fff3 	bl	18264 <__aeabi_i2f>
   1627e:	4603      	mov	r3, r0
   16280:	4618      	mov	r0, r3
   16282:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   16286:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   1628a:	f002 f83f 	bl	1830c <__aeabi_fmul>
   1628e:	4603      	mov	r3, r0
   16290:	4620      	mov	r0, r4
   16292:	4619      	mov	r1, r3
   16294:	f001 ff32 	bl	180fc <__addsf3>
   16298:	4603      	mov	r3, r0
   1629a:	4618      	mov	r0, r3
   1629c:	f002 f9fc 	bl	18698 <__aeabi_f2iz>
   162a0:	4603      	mov	r3, r0
   162a2:	b29a      	uxth	r2, r3
   162a4:	f24c 5378 	movw	r3, #50552	; 0xc578
   162a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162ac:	819a      	strh	r2, [r3, #12]
   162ae:	f24c 5350 	movw	r3, #50512	; 0xc550
   162b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162b6:	89db      	ldrh	r3, [r3, #14]
   162b8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   162bc:	b29b      	uxth	r3, r3
   162be:	80fb      	strh	r3, [r7, #6]
   162c0:	f24c 5378 	movw	r3, #50552	; 0xc578
   162c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162c8:	89db      	ldrh	r3, [r3, #14]
   162ca:	b21b      	sxth	r3, r3
   162cc:	4618      	mov	r0, r3
   162ce:	f001 ffc9 	bl	18264 <__aeabi_i2f>
   162d2:	4604      	mov	r4, r0
   162d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   162d8:	4618      	mov	r0, r3
   162da:	f001 ffc3 	bl	18264 <__aeabi_i2f>
   162de:	4603      	mov	r3, r0
   162e0:	4618      	mov	r0, r3
   162e2:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   162e6:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   162ea:	f002 f80f 	bl	1830c <__aeabi_fmul>
   162ee:	4603      	mov	r3, r0
   162f0:	4620      	mov	r0, r4
   162f2:	4619      	mov	r1, r3
   162f4:	f001 ff02 	bl	180fc <__addsf3>
   162f8:	4603      	mov	r3, r0
   162fa:	4618      	mov	r0, r3
   162fc:	f002 f9cc 	bl	18698 <__aeabi_f2iz>
   16300:	4603      	mov	r3, r0
   16302:	b29a      	uxth	r2, r3
   16304:	f24c 5378 	movw	r3, #50552	; 0xc578
   16308:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1630c:	81da      	strh	r2, [r3, #14]
   1630e:	f24c 5350 	movw	r3, #50512	; 0xc550
   16312:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16316:	8a1b      	ldrh	r3, [r3, #16]
   16318:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1631c:	b29b      	uxth	r3, r3
   1631e:	80fb      	strh	r3, [r7, #6]
   16320:	f24c 5378 	movw	r3, #50552	; 0xc578
   16324:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16328:	8a1b      	ldrh	r3, [r3, #16]
   1632a:	b21b      	sxth	r3, r3
   1632c:	4618      	mov	r0, r3
   1632e:	f001 ff99 	bl	18264 <__aeabi_i2f>
   16332:	4604      	mov	r4, r0
   16334:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16338:	4618      	mov	r0, r3
   1633a:	f001 ff93 	bl	18264 <__aeabi_i2f>
   1633e:	4603      	mov	r3, r0
   16340:	4618      	mov	r0, r3
   16342:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   16346:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   1634a:	f001 ffdf 	bl	1830c <__aeabi_fmul>
   1634e:	4603      	mov	r3, r0
   16350:	4620      	mov	r0, r4
   16352:	4619      	mov	r1, r3
   16354:	f001 fed2 	bl	180fc <__addsf3>
   16358:	4603      	mov	r3, r0
   1635a:	4618      	mov	r0, r3
   1635c:	f002 f99c 	bl	18698 <__aeabi_f2iz>
   16360:	4603      	mov	r3, r0
   16362:	b29a      	uxth	r2, r3
   16364:	f24c 5378 	movw	r3, #50552	; 0xc578
   16368:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1636c:	821a      	strh	r2, [r3, #16]
   1636e:	f24c 5390 	movw	r3, #50576	; 0xc590
   16372:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16376:	781b      	ldrb	r3, [r3, #0]
   16378:	3301      	adds	r3, #1
   1637a:	b2da      	uxtb	r2, r3
   1637c:	f24c 5390 	movw	r3, #50576	; 0xc590
   16380:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16384:	701a      	strb	r2, [r3, #0]
   16386:	f24c 5390 	movw	r3, #50576	; 0xc590
   1638a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1638e:	781b      	ldrb	r3, [r3, #0]
   16390:	2b0a      	cmp	r3, #10
   16392:	f040 8101 	bne.w	16598 <last_radio_from_ppm+0x5e8>
   16396:	f24c 5390 	movw	r3, #50576	; 0xc590
   1639a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1639e:	2200      	movs	r2, #0
   163a0:	701a      	strb	r2, [r3, #0]
   163a2:	f24c 5378 	movw	r3, #50552	; 0xc578
   163a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163aa:	891a      	ldrh	r2, [r3, #8]
   163ac:	f24c 5364 	movw	r3, #50532	; 0xc564
   163b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163b4:	811a      	strh	r2, [r3, #8]
   163b6:	f24c 5378 	movw	r3, #50552	; 0xc578
   163ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163be:	2200      	movs	r2, #0
   163c0:	811a      	strh	r2, [r3, #8]
   163c2:	f24c 5364 	movw	r3, #50532	; 0xc564
   163c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163ca:	891b      	ldrh	r3, [r3, #8]
   163cc:	b21b      	sxth	r3, r3
   163ce:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   163d2:	dd07      	ble.n	163e4 <last_radio_from_ppm+0x434>
   163d4:	f24c 5364 	movw	r3, #50532	; 0xc564
   163d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   163e0:	811a      	strh	r2, [r3, #8]
   163e2:	e00f      	b.n	16404 <last_radio_from_ppm+0x454>
   163e4:	f24c 5364 	movw	r3, #50532	; 0xc564
   163e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163ec:	891b      	ldrh	r3, [r3, #8]
   163ee:	b21b      	sxth	r3, r3
   163f0:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   163f4:	da06      	bge.n	16404 <last_radio_from_ppm+0x454>
   163f6:	f24c 5364 	movw	r3, #50532	; 0xc564
   163fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163fe:	f64d 2280 	movw	r2, #55936	; 0xda80
   16402:	811a      	strh	r2, [r3, #8]
   16404:	f24c 5378 	movw	r3, #50552	; 0xc578
   16408:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1640c:	895a      	ldrh	r2, [r3, #10]
   1640e:	f24c 5364 	movw	r3, #50532	; 0xc564
   16412:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16416:	815a      	strh	r2, [r3, #10]
   16418:	f24c 5378 	movw	r3, #50552	; 0xc578
   1641c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16420:	2200      	movs	r2, #0
   16422:	815a      	strh	r2, [r3, #10]
   16424:	f24c 5364 	movw	r3, #50532	; 0xc564
   16428:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1642c:	895b      	ldrh	r3, [r3, #10]
   1642e:	b21b      	sxth	r3, r3
   16430:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16434:	dd07      	ble.n	16446 <last_radio_from_ppm+0x496>
   16436:	f24c 5364 	movw	r3, #50532	; 0xc564
   1643a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1643e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16442:	815a      	strh	r2, [r3, #10]
   16444:	e00f      	b.n	16466 <last_radio_from_ppm+0x4b6>
   16446:	f24c 5364 	movw	r3, #50532	; 0xc564
   1644a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1644e:	895b      	ldrh	r3, [r3, #10]
   16450:	b21b      	sxth	r3, r3
   16452:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16456:	da06      	bge.n	16466 <last_radio_from_ppm+0x4b6>
   16458:	f24c 5364 	movw	r3, #50532	; 0xc564
   1645c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16460:	f64d 2280 	movw	r2, #55936	; 0xda80
   16464:	815a      	strh	r2, [r3, #10]
   16466:	f24c 5378 	movw	r3, #50552	; 0xc578
   1646a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1646e:	899a      	ldrh	r2, [r3, #12]
   16470:	f24c 5364 	movw	r3, #50532	; 0xc564
   16474:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16478:	819a      	strh	r2, [r3, #12]
   1647a:	f24c 5378 	movw	r3, #50552	; 0xc578
   1647e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16482:	2200      	movs	r2, #0
   16484:	819a      	strh	r2, [r3, #12]
   16486:	f24c 5364 	movw	r3, #50532	; 0xc564
   1648a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1648e:	899b      	ldrh	r3, [r3, #12]
   16490:	b21b      	sxth	r3, r3
   16492:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16496:	dd07      	ble.n	164a8 <last_radio_from_ppm+0x4f8>
   16498:	f24c 5364 	movw	r3, #50532	; 0xc564
   1649c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   164a4:	819a      	strh	r2, [r3, #12]
   164a6:	e00f      	b.n	164c8 <last_radio_from_ppm+0x518>
   164a8:	f24c 5364 	movw	r3, #50532	; 0xc564
   164ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164b0:	899b      	ldrh	r3, [r3, #12]
   164b2:	b21b      	sxth	r3, r3
   164b4:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   164b8:	da06      	bge.n	164c8 <last_radio_from_ppm+0x518>
   164ba:	f24c 5364 	movw	r3, #50532	; 0xc564
   164be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164c2:	f64d 2280 	movw	r2, #55936	; 0xda80
   164c6:	819a      	strh	r2, [r3, #12]
   164c8:	f24c 5378 	movw	r3, #50552	; 0xc578
   164cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164d0:	89da      	ldrh	r2, [r3, #14]
   164d2:	f24c 5364 	movw	r3, #50532	; 0xc564
   164d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164da:	81da      	strh	r2, [r3, #14]
   164dc:	f24c 5378 	movw	r3, #50552	; 0xc578
   164e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164e4:	2200      	movs	r2, #0
   164e6:	81da      	strh	r2, [r3, #14]
   164e8:	f24c 5364 	movw	r3, #50532	; 0xc564
   164ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164f0:	89db      	ldrh	r3, [r3, #14]
   164f2:	b21b      	sxth	r3, r3
   164f4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   164f8:	dd07      	ble.n	1650a <last_radio_from_ppm+0x55a>
   164fa:	f24c 5364 	movw	r3, #50532	; 0xc564
   164fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16502:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16506:	81da      	strh	r2, [r3, #14]
   16508:	e00f      	b.n	1652a <last_radio_from_ppm+0x57a>
   1650a:	f24c 5364 	movw	r3, #50532	; 0xc564
   1650e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16512:	89db      	ldrh	r3, [r3, #14]
   16514:	b21b      	sxth	r3, r3
   16516:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1651a:	da06      	bge.n	1652a <last_radio_from_ppm+0x57a>
   1651c:	f24c 5364 	movw	r3, #50532	; 0xc564
   16520:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16524:	f64d 2280 	movw	r2, #55936	; 0xda80
   16528:	81da      	strh	r2, [r3, #14]
   1652a:	f24c 5378 	movw	r3, #50552	; 0xc578
   1652e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16532:	8a1a      	ldrh	r2, [r3, #16]
   16534:	f24c 5364 	movw	r3, #50532	; 0xc564
   16538:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1653c:	821a      	strh	r2, [r3, #16]
   1653e:	f24c 5378 	movw	r3, #50552	; 0xc578
   16542:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16546:	2200      	movs	r2, #0
   16548:	821a      	strh	r2, [r3, #16]
   1654a:	f24c 5364 	movw	r3, #50532	; 0xc564
   1654e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16552:	8a1b      	ldrh	r3, [r3, #16]
   16554:	b21b      	sxth	r3, r3
   16556:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1655a:	dd07      	ble.n	1656c <last_radio_from_ppm+0x5bc>
   1655c:	f24c 5364 	movw	r3, #50532	; 0xc564
   16560:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16564:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16568:	821a      	strh	r2, [r3, #16]
   1656a:	e00f      	b.n	1658c <last_radio_from_ppm+0x5dc>
   1656c:	f24c 5364 	movw	r3, #50532	; 0xc564
   16570:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16574:	8a1b      	ldrh	r3, [r3, #16]
   16576:	b21b      	sxth	r3, r3
   16578:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1657c:	da06      	bge.n	1658c <last_radio_from_ppm+0x5dc>
   1657e:	f24c 5364 	movw	r3, #50532	; 0xc564
   16582:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16586:	f64d 2280 	movw	r2, #55936	; 0xda80
   1658a:	821a      	strh	r2, [r3, #16]
   1658c:	f24c 538a 	movw	r3, #50570	; 0xc58a
   16590:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16594:	2201      	movs	r2, #1
   16596:	701a      	strb	r2, [r3, #0]
}
   16598:	370c      	adds	r7, #12
   1659a:	46bd      	mov	sp, r7
   1659c:	bd90      	pop	{r4, r7, pc}
   1659e:	bf00      	nop

000165a0 <spi_reset>:
volatile bool_t spi_was_interrupted = FALSE;

static volatile uint8_t idx_buf = 0;
static volatile uint8_t xor_in, xor_out;

void spi_reset(void) {
   165a0:	b480      	push	{r7}
   165a2:	af00      	add	r7, sp, #0
  idx_buf = 0;
   165a4:	f24c 53c4 	movw	r3, #50628	; 0xc5c4
   165a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165ac:	2200      	movs	r2, #0
   165ae:	701a      	strb	r2, [r3, #0]
  xor_in = 0;
   165b0:	f24c 53c5 	movw	r3, #50629	; 0xc5c5
   165b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165b8:	2200      	movs	r2, #0
   165ba:	701a      	strb	r2, [r3, #0]
  xor_out = ((uint8_t*)&to_mega128)[idx_buf];
   165bc:	f24c 53c4 	movw	r3, #50628	; 0xc5c4
   165c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165c4:	781b      	ldrb	r3, [r3, #0]
   165c6:	b2db      	uxtb	r3, r3
   165c8:	461a      	mov	r2, r3
   165ca:	f24c 53ac 	movw	r3, #50604	; 0xc5ac
   165ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165d2:	4413      	add	r3, r2
   165d4:	781a      	ldrb	r2, [r3, #0]
   165d6:	f24c 53c6 	movw	r3, #50630	; 0xc5c6
   165da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165de:	701a      	strb	r2, [r3, #0]
  SPDR = xor_out;
   165e0:	f242 030f 	movw	r3, #8207	; 0x200f
   165e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165e8:	f24c 52c6 	movw	r2, #50630	; 0xc5c6
   165ec:	f2c2 0204 	movt	r2, #8196	; 0x2004
   165f0:	7812      	ldrb	r2, [r2, #0]
   165f2:	b2d2      	uxtb	r2, r2
   165f4:	701a      	strb	r2, [r3, #0]
  mega128_receive_valid = FALSE;
   165f6:	f24c 53c2 	movw	r3, #50626	; 0xc5c2
   165fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165fe:	2200      	movs	r2, #0
   16600:	701a      	strb	r2, [r3, #0]
}
   16602:	46bd      	mov	sp, r7
   16604:	f85d 7b04 	ldr.w	r7, [sp], #4
   16608:	4770      	bx	lr
   1660a:	bf00      	nop

0001660c <fbw_spi_init>:

void fbw_spi_init(void) {
   1660c:	b480      	push	{r7}
   1660e:	af00      	add	r7, sp, #0
  to_mega128.status = 0;
   16610:	f24c 53ac 	movw	r3, #50604	; 0xc5ac
   16614:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16618:	2200      	movs	r2, #0
   1661a:	74da      	strb	r2, [r3, #19]
  to_mega128.nb_err = 0;
   1661c:	f24c 53ac 	movw	r3, #50604	; 0xc5ac
   16620:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16624:	2200      	movs	r2, #0
   16626:	751a      	strb	r2, [r3, #20]

  /* set it pin output */
  //  IT_DDR |= _BV(IT_PIN);

  /* set MISO pin output */
  SPI_DDR |= _BV(SPI_MISO_PIN);
   16628:	f242 0317 	movw	r3, #8215	; 0x2017
   1662c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16630:	f242 0217 	movw	r2, #8215	; 0x2017
   16634:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16638:	7812      	ldrb	r2, [r2, #0]
   1663a:	b2d2      	uxtb	r2, r2
   1663c:	f042 0210 	orr.w	r2, r2, #16
   16640:	b2d2      	uxtb	r2, r2
   16642:	701a      	strb	r2, [r3, #0]
  /* enable SPI, slave, MSB first, sck idle low */
  SPCR = _BV(SPE);
   16644:	f242 030d 	movw	r3, #8205	; 0x200d
   16648:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1664c:	2240      	movs	r2, #64	; 0x40
   1664e:	701a      	strb	r2, [r3, #0]
  /* enable interrupt */
  SPCR |= _BV(SPIE);
   16650:	f242 030d 	movw	r3, #8205	; 0x200d
   16654:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16658:	f242 020d 	movw	r2, #8205	; 0x200d
   1665c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16660:	7812      	ldrb	r2, [r2, #0]
   16662:	b2d2      	uxtb	r2, r2
   16664:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16668:	b2d2      	uxtb	r2, r2
   1666a:	701a      	strb	r2, [r3, #0]
}
   1666c:	46bd      	mov	sp, r7
   1666e:	f85d 7b04 	ldr.w	r7, [sp], #4
   16672:	4770      	bx	lr
   16674:	0000      	movs	r0, r0
	...

00016678 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
   16678:	b480      	push	{r7}
   1667a:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
   1667c:	f242 032f 	movw	r3, #8239	; 0x202f
   16680:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16684:	2200      	movs	r2, #0
   16686:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
   16688:	f242 032e 	movw	r3, #8238	; 0x202e
   1668c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16690:	2201      	movs	r2, #1
   16692:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
   16694:	f242 0325 	movw	r3, #8229	; 0x2025
   16698:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1669c:	2207      	movs	r2, #7
   1669e:	701a      	strb	r2, [r3, #0]
}
   166a0:	46bd      	mov	sp, r7
   166a2:	f85d 7b04 	ldr.w	r7, [sp], #4
   166a6:	4770      	bx	lr

000166a8 <ppm_init>:
 *
 * JR might be rising edge clocked; set that as an option
 */
static inline void
ppm_init( void )
{
   166a8:	b480      	push	{r7}
   166aa:	af00      	add	r7, sp, #0
#if   PPM_RX_TYPE == RXFUTABA
  cbi( TCCR1B, ICES1 );
   166ac:	f242 032e 	movw	r3, #8238	; 0x202e
   166b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   166b4:	f242 022e 	movw	r2, #8238	; 0x202e
   166b8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   166bc:	7812      	ldrb	r2, [r2, #0]
   166be:	b2d2      	uxtb	r2, r2
   166c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   166c4:	b2d2      	uxtb	r2, r2
   166c6:	701a      	strb	r2, [r3, #0]
#else
#	error "ppm.h: Unknown receiver type in PPM_RX_TYPE"
#endif

  /* No noise cancelation */
  sbi( TCCR1B, ICNC1 );
   166c8:	f242 032e 	movw	r3, #8238	; 0x202e
   166cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   166d0:	f242 022e 	movw	r2, #8238	; 0x202e
   166d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   166d8:	7812      	ldrb	r2, [r2, #0]
   166da:	b2d2      	uxtb	r2, r2
   166dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
   166e0:	b2d2      	uxtb	r2, r2
   166e2:	701a      	strb	r2, [r3, #0]
  
  /* Set ICP to input, no internal pull up */
  cbi( PPM_DDR, PPM_PIN);
   166e4:	f242 0317 	movw	r3, #8215	; 0x2017
   166e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   166ec:	f242 0217 	movw	r2, #8215	; 0x2017
   166f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   166f4:	7812      	ldrb	r2, [r2, #0]
   166f6:	b2d2      	uxtb	r2, r2
   166f8:	f022 0201 	bic.w	r2, r2, #1
   166fc:	b2d2      	uxtb	r2, r2
   166fe:	701a      	strb	r2, [r3, #0]
  
  /* Enable interrupt on input capture */
  sbi( TIMSK, TICIE1 );
   16700:	f242 0337 	movw	r3, #8247	; 0x2037
   16704:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16708:	f242 0237 	movw	r2, #8247	; 0x2037
   1670c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16710:	7812      	ldrb	r2, [r2, #0]
   16712:	b2d2      	uxtb	r2, r2
   16714:	f042 0220 	orr.w	r2, r2, #32
   16718:	b2d2      	uxtb	r2, r2
   1671a:	701a      	strb	r2, [r3, #0]
}
   1671c:	46bd      	mov	sp, r7
   1671e:	f85d 7b04 	ldr.w	r7, [sp], #4
   16722:	4770      	bx	lr

00016724 <to_autopilot_from_last_radio>:
/*   uart_transmit('\n'); */
/* } */


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
   16724:	b580      	push	{r7, lr}
   16726:	b082      	sub	sp, #8
   16728:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   1672a:	2300      	movs	r3, #0
   1672c:	71fb      	strb	r3, [r7, #7]
   1672e:	e010      	b.n	16752 <to_autopilot_from_last_radio+0x2e>
     to_mega128.channels[i] = last_radio[i];
   16730:	79fa      	ldrb	r2, [r7, #7]
   16732:	79f9      	ldrb	r1, [r7, #7]
   16734:	f24c 5364 	movw	r3, #50532	; 0xc564
   16738:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1673c:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   16740:	f24c 53ac 	movw	r3, #50604	; 0xc5ac
   16744:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16748:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   1674c:	79fb      	ldrb	r3, [r7, #7]
   1674e:	3301      	adds	r3, #1
   16750:	71fb      	strb	r3, [r7, #7]
   16752:	79fb      	ldrb	r3, [r7, #7]
   16754:	2b08      	cmp	r3, #8
   16756:	d9eb      	bls.n	16730 <to_autopilot_from_last_radio+0xc>
     to_mega128.channels[i] = last_radio[i];
  to_mega128.status = (radio_ok ? _BV(STATUS_RADIO_OK) : 0);
   16758:	f24c 6354 	movw	r3, #50772	; 0xc654
   1675c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16760:	781b      	ldrb	r3, [r3, #0]
   16762:	2b00      	cmp	r3, #0
   16764:	bf0c      	ite	eq
   16766:	2300      	moveq	r3, #0
   16768:	2301      	movne	r3, #1
   1676a:	b2db      	uxtb	r3, r3
   1676c:	461a      	mov	r2, r3
   1676e:	f24c 53ac 	movw	r3, #50604	; 0xc5ac
   16772:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16776:	74da      	strb	r2, [r3, #19]
  to_mega128.status |= (radio_really_lost ? _BV(RADIO_REALLY_LOST) : 0);
   16778:	f24c 53ac 	movw	r3, #50604	; 0xc5ac
   1677c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16780:	7cdb      	ldrb	r3, [r3, #19]
   16782:	b2da      	uxtb	r2, r3
   16784:	f24c 6356 	movw	r3, #50774	; 0xc656
   16788:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1678c:	781b      	ldrb	r3, [r3, #0]
   1678e:	2b00      	cmp	r3, #0
   16790:	d001      	beq.n	16796 <to_autopilot_from_last_radio+0x72>
   16792:	2302      	movs	r3, #2
   16794:	e000      	b.n	16798 <to_autopilot_from_last_radio+0x74>
   16796:	2300      	movs	r3, #0
   16798:	4313      	orrs	r3, r2
   1679a:	b2db      	uxtb	r3, r3
   1679c:	b2da      	uxtb	r2, r3
   1679e:	f24c 53ac 	movw	r3, #50604	; 0xc5ac
   167a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167a6:	74da      	strb	r2, [r3, #19]
  if (last_radio_contains_avg_channels) {
   167a8:	f24c 538a 	movw	r3, #50570	; 0xc58a
   167ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167b0:	781b      	ldrb	r3, [r3, #0]
   167b2:	2b00      	cmp	r3, #0
   167b4:	d012      	beq.n	167dc <to_autopilot_from_last_radio+0xb8>
    to_mega128.status |= _BV(AVERAGED_CHANNELS_SENT);
   167b6:	f24c 53ac 	movw	r3, #50604	; 0xc5ac
   167ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167be:	7cdb      	ldrb	r3, [r3, #19]
   167c0:	f043 0304 	orr.w	r3, r3, #4
   167c4:	b2da      	uxtb	r2, r3
   167c6:	f24c 53ac 	movw	r3, #50604	; 0xc5ac
   167ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167ce:	74da      	strb	r2, [r3, #19]
    last_radio_contains_avg_channels = FALSE;
   167d0:	f24c 538a 	movw	r3, #50570	; 0xc58a
   167d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167d8:	2200      	movs	r2, #0
   167da:	701a      	strb	r2, [r3, #0]
  }
  to_mega128.ppm_cpt = last_ppm_cpt;
   167dc:	f24c 6358 	movw	r3, #50776	; 0xc658
   167e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167e4:	781a      	ldrb	r2, [r3, #0]
   167e6:	f24c 53ac 	movw	r3, #50604	; 0xc5ac
   167ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167ee:	749a      	strb	r2, [r3, #18]
#ifndef CTL_BRD_V1_1
  to_mega128.vsupply = VoltageOfAdc(vsupply_adc_buf.sum/AV_NB_SAMPLE) * 10;
   167f0:	f24c 53c8 	movw	r3, #50632	; 0xc5c8
   167f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167f8:	881b      	ldrh	r3, [r3, #0]
   167fa:	4618      	mov	r0, r3
   167fc:	f001 f8e0 	bl	179c0 <__aeabi_i2d>
   16800:	4602      	mov	r2, r0
   16802:	460b      	mov	r3, r1
   16804:	4610      	mov	r0, r2
   16806:	4619      	mov	r1, r3
   16808:	a31b      	add	r3, pc, #108	; (adr r3, 16878 <to_autopilot_from_last_radio+0x154>)
   1680a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1680e:	f001 f93d 	bl	17a8c <__aeabi_dmul>
   16812:	4602      	mov	r2, r0
   16814:	460b      	mov	r3, r1
   16816:	4610      	mov	r0, r2
   16818:	4619      	mov	r1, r3
   1681a:	f04f 0200 	mov.w	r2, #0
   1681e:	f04f 0300 	mov.w	r3, #0
   16822:	f2c4 0340 	movt	r3, #16448	; 0x4040
   16826:	f001 fa5b 	bl	17ce0 <__aeabi_ddiv>
   1682a:	4602      	mov	r2, r0
   1682c:	460b      	mov	r3, r1
   1682e:	4610      	mov	r0, r2
   16830:	4619      	mov	r1, r3
   16832:	a313      	add	r3, pc, #76	; (adr r3, 16880 <to_autopilot_from_last_radio+0x15c>)
   16834:	e9d3 2300 	ldrd	r2, r3, [r3]
   16838:	f000 ff76 	bl	17728 <__adddf3>
   1683c:	4602      	mov	r2, r0
   1683e:	460b      	mov	r3, r1
   16840:	4610      	mov	r0, r2
   16842:	4619      	mov	r1, r3
   16844:	f04f 0200 	mov.w	r2, #0
   16848:	f04f 0300 	mov.w	r3, #0
   1684c:	f2c4 0324 	movt	r3, #16420	; 0x4024
   16850:	f001 f91c 	bl	17a8c <__aeabi_dmul>
   16854:	4602      	mov	r2, r0
   16856:	460b      	mov	r3, r1
   16858:	4610      	mov	r0, r2
   1685a:	4619      	mov	r1, r3
   1685c:	f001 fbd8 	bl	18010 <__aeabi_d2uiz>
   16860:	4603      	mov	r3, r0
   16862:	b2da      	uxtb	r2, r3
   16864:	f24c 53ac 	movw	r3, #50604	; 0xc5ac
   16868:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1686c:	755a      	strb	r2, [r3, #21]
#else
  to_mega128.vsupply = 0;
#endif
}
   1686e:	3708      	adds	r7, #8
   16870:	46bd      	mov	sp, r7
   16872:	bd80      	pop	{r7, pc}
   16874:	f3af 8000 	nop.w
   16878:	1eb851ec 	.word	0x1eb851ec
   1687c:	3f91eb85 	.word	0x3f91eb85
   16880:	020c49ba 	.word	0x020c49ba
   16884:	3fb6872b 	.word	0x3fb6872b

00016888 <send_data_to_autopilot_task>:

void send_data_to_autopilot_task(void)
{
   16888:	b580      	push	{r7, lr}
   1688a:	af00      	add	r7, sp, #0
	//vPrintString("S_2 send_data_to_autopilot_task start! \n\r"); //SunnyBeike

    // modified by wanbo
//   if ( !SpiIsSelected() && spi_was_interrupted ) 
   {
      spi_was_interrupted = FALSE;
   1688c:	f24c 53c3 	movw	r3, #50627	; 0xc5c3
   16890:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16894:	2200      	movs	r2, #0
   16896:	701a      	strb	r2, [r3, #0]
      to_autopilot_from_last_radio();
   16898:	f7ff ff44 	bl	16724 <to_autopilot_from_last_radio>
      spi_reset();
   1689c:	f7ff fe80 	bl	165a0 <spi_reset>
   }
	//vPrintString("S_2 send_data_to_autopilot_task end! \n\r"); //SunnyBeike

}
   168a0:	bd80      	pop	{r7, pc}
   168a2:	bf00      	nop

000168a4 <fbw_init>:
	static uint8_t _1Hz;
	static uint8_t _20Hz;
#endif
*/

void fbw_init(void) {
   168a4:	b580      	push	{r7, lr}
   168a6:	af00      	add	r7, sp, #0
  uart_init_tx();
   168a8:	f000 fb02 	bl	16eb0 <uart_init_tx>
  uart_print_string("FBW Booting $Id: main.c,v 1.3 2008/10/22 19:41:19 casse Exp $\n\r");
   168ac:	f648 10dc 	movw	r0, #35292	; 0x89dc
   168b0:	f2c0 0001 	movt	r0, #1
   168b4:	f000 fbda 	bl	1706c <uart_print_string>

#ifndef CTL_BRD_V1_1
  fbw_adc_init();
   168b8:	f7ff fab2 	bl	15e20 <fbw_adc_init>
  fbw_adc_buf_channel(3, &vsupply_adc_buf);
   168bc:	2003      	movs	r0, #3
   168be:	f24c 51c8 	movw	r1, #50632	; 0xc5c8
   168c2:	f2c2 0104 	movt	r1, #8196	; 0x2004
   168c6:	f7ff fa97 	bl	15df8 <fbw_adc_buf_channel>
  fbw_adc_buf_channel(6, &vservos_adc_buf);
   168ca:	2006      	movs	r0, #6
   168cc:	f24c 610c 	movw	r1, #50700	; 0xc60c
   168d0:	f2c2 0104 	movt	r1, #8196	; 0x2004
   168d4:	f7ff fa90 	bl	15df8 <fbw_adc_buf_channel>
#endif
  timer_init();
   168d8:	f7ff fece 	bl	16678 <timer_init>
  servo_init();
   168dc:	f000 f894 	bl	16a08 <servo_init>
  ppm_init();
   168e0:	f7ff fee2 	bl	166a8 <ppm_init>
  fbw_spi_init();
   168e4:	f7ff fe92 	bl	1660c <fbw_spi_init>
  //sei(); //FN
}
   168e8:	bd80      	pop	{r7, pc}
   168ea:	bf00      	nop

000168ec <test_ppm_task>:
  return 0;
}
#endif
*/
void test_ppm_task(void)
{
   168ec:	b580      	push	{r7, lr}
   168ee:	af00      	add	r7, sp, #0
	//vPrintString("S_1 test_ppm_task start! \n\r"); //SunnyBeike
    // modified by wanbo
    //if( ppm_valid ) 
    {
      ppm_valid = FALSE;
   168f0:	f24c 538b 	movw	r3, #50571	; 0xc58b
   168f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168f8:	2200      	movs	r2, #0
   168fa:	701a      	strb	r2, [r3, #0]
      ppm_cpt++;
   168fc:	f24c 6357 	movw	r3, #50775	; 0xc657
   16900:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16904:	781b      	ldrb	r3, [r3, #0]
   16906:	3301      	adds	r3, #1
   16908:	b2da      	uxtb	r2, r3
   1690a:	f24c 6357 	movw	r3, #50775	; 0xc657
   1690e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16912:	701a      	strb	r2, [r3, #0]
      radio_ok = TRUE;
   16914:	f24c 6354 	movw	r3, #50772	; 0xc654
   16918:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1691c:	2201      	movs	r2, #1
   1691e:	701a      	strb	r2, [r3, #0]
      radio_really_lost = FALSE;
   16920:	f24c 6356 	movw	r3, #50774	; 0xc656
   16924:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16928:	2200      	movs	r2, #0
   1692a:	701a      	strb	r2, [r3, #0]
      time_since_last_ppm = 0;
   1692c:	f24c 6352 	movw	r3, #50770	; 0xc652
   16930:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16934:	2200      	movs	r2, #0
   16936:	801a      	strh	r2, [r3, #0]
      last_radio_from_ppm();
   16938:	f7ff fb3a 	bl	15fb0 <last_radio_from_ppm>
      //if (last_radio_contains_avg_channels) 
      {
	mode = MODE_OF_PPRZ(last_radio[RADIO_MODE]);
   1693c:	f24c 5364 	movw	r3, #50532	; 0xc564
   16940:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16944:	891b      	ldrh	r3, [r3, #8]
   16946:	b21b      	sxth	r3, r3
   16948:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
   1694c:	bfb4      	ite	lt
   1694e:	2300      	movlt	r3, #0
   16950:	2301      	movge	r3, #1
   16952:	b2db      	uxtb	r3, r3
   16954:	461a      	mov	r2, r3
   16956:	f24c 6350 	movw	r3, #50768	; 0xc650
   1695a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1695e:	701a      	strb	r2, [r3, #0]
      }
      if (mode == MODE_MANUAL) 
   16960:	f24c 6350 	movw	r3, #50768	; 0xc650
   16964:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16968:	781b      	ldrb	r3, [r3, #0]
   1696a:	2b00      	cmp	r3, #0
   1696c:	d105      	bne.n	1697a <test_ppm_task+0x8e>
      {
	servo_set(last_radio);
   1696e:	f24c 5064 	movw	r0, #50532	; 0xc564
   16972:	f2c2 0004 	movt	r0, #8196	; 0x2004
   16976:	f000 f925 	bl	16bc4 <servo_set>
      }
    } 
    //else if (mode == MODE_MANUAL && radio_really_lost) 
    {
      mode = MODE_AUTO;
   1697a:	f24c 6350 	movw	r3, #50768	; 0xc650
   1697e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16982:	2201      	movs	r2, #1
   16984:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= STALLED_TIME) 
    {
      radio_ok = FALSE;
   16986:	f24c 6354 	movw	r3, #50772	; 0xc654
   1698a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1698e:	2200      	movs	r2, #0
   16990:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= REALLY_STALLED_TIME) 
    {
      radio_really_lost = TRUE;
   16992:	f24c 6356 	movw	r3, #50774	; 0xc656
   16996:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1699a:	2201      	movs	r2, #1
   1699c:	701a      	strb	r2, [r3, #0]
    }
	//vPrintString("S_1 test_ppm_task end! \n\r"); //SunnyBeike

}
   1699e:	bd80      	pop	{r7, pc}

000169a0 <check_failsafe_task>:
void check_failsafe_task(void)
{
   169a0:	b580      	push	{r7, lr}
   169a2:	af00      	add	r7, sp, #0
	//vPrintString("S_9 check_failsafe_task start! \n\r"); //SunnyBeike
    //modified by wanbo
    //if ((mode == MODE_MANUAL && !radio_ok) || (mode == MODE_AUTO && !mega128_ok)) 
    {
      servo_set(failsafe);
   169a4:	f648 10c8 	movw	r0, #35272	; 0x89c8
   169a8:	f2c0 0001 	movt	r0, #1
   169ac:	f000 f90a 	bl	16bc4 <servo_set>
    }
	//vPrintString("S_9 check_failsafe_task end! \n\r"); //SunnyBeike
}
   169b0:	bd80      	pop	{r7, pc}
   169b2:	bf00      	nop

000169b4 <check_mega128_values_task>:
void check_mega128_values_task(void)
{
   169b4:	b580      	push	{r7, lr}
   169b6:	af00      	add	r7, sp, #0
	//vPrintString("S_8 check_mega128_values_task start! \n\r"); //SunnyBeike
// modified by wanbo
     //if ( !SpiIsSelected() && spi_was_interrupted ) 
     {
         if (mega128_receive_valid)
   169b8:	f24c 53c2 	movw	r3, #50626	; 0xc5c2
   169bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169c0:	781b      	ldrb	r3, [r3, #0]
   169c2:	b2db      	uxtb	r3, r3
   169c4:	2b00      	cmp	r3, #0
   169c6:	d018      	beq.n	169fa <check_mega128_values_task+0x46>
         { 
             time_since_last_mega128 = 0;
   169c8:	f24c 6351 	movw	r3, #50769	; 0xc651
   169cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169d0:	2200      	movs	r2, #0
   169d2:	701a      	strb	r2, [r3, #0]
             mega128_ok = TRUE;
   169d4:	f24c 6355 	movw	r3, #50773	; 0xc655
   169d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169dc:	2201      	movs	r2, #1
   169de:	701a      	strb	r2, [r3, #0]
             if (mode == MODE_AUTO)
   169e0:	f24c 6350 	movw	r3, #50768	; 0xc650
   169e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169e8:	781b      	ldrb	r3, [r3, #0]
   169ea:	2b01      	cmp	r3, #1
   169ec:	d105      	bne.n	169fa <check_mega128_values_task+0x46>
                 servo_set(from_mega128.channels);
   169ee:	f24c 5094 	movw	r0, #50580	; 0xc594
   169f2:	f2c2 0004 	movt	r0, #8196	; 0x2004
   169f6:	f000 f8e5 	bl	16bc4 <servo_set>
         }
     }
     //if (time_since_last_mega128 == STALLED_TIME) 
     {
         mega128_ok = FALSE;
   169fa:	f24c 6355 	movw	r3, #50773	; 0xc655
   169fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a02:	2200      	movs	r2, #0
   16a04:	701a      	strb	r2, [r3, #0]
     }
	//vPrintString("S_8 check_mega128_values_task end! \n\r"); //SunnyBeike
}
   16a06:	bd80      	pop	{r7, pc}

00016a08 <servo_init>:
 *
 * Ideally, you can use two decade counters to drive 20 servos.
 */
void
servo_init( void )
{
   16a08:	b480      	push	{r7}
   16a0a:	b083      	sub	sp, #12
   16a0c:	af00      	add	r7, sp, #0
  uint8_t			i;

  /* Configure the reset and clock lines */
  _4017_RESET_DDR |= _BV(_4017_RESET_PIN);
   16a0e:	f242 0311 	movw	r3, #8209	; 0x2011
   16a12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16a16:	f242 0211 	movw	r2, #8209	; 0x2011
   16a1a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16a1e:	7812      	ldrb	r2, [r2, #0]
   16a20:	b2d2      	uxtb	r2, r2
   16a22:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16a26:	b2d2      	uxtb	r2, r2
   16a28:	701a      	strb	r2, [r3, #0]
  _4017_CLOCK_DDR |= _BV(_4017_CLOCK_PIN);
   16a2a:	f242 0317 	movw	r3, #8215	; 0x2017
   16a2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16a32:	f242 0217 	movw	r2, #8215	; 0x2017
   16a36:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16a3a:	7812      	ldrb	r2, [r2, #0]
   16a3c:	b2d2      	uxtb	r2, r2
   16a3e:	f042 0202 	orr.w	r2, r2, #2
   16a42:	b2d2      	uxtb	r2, r2
   16a44:	701a      	strb	r2, [r3, #0]

  /* Reset the decade counter */
  sbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16a46:	f242 0312 	movw	r3, #8210	; 0x2012
   16a4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16a4e:	f242 0212 	movw	r2, #8210	; 0x2012
   16a52:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16a56:	7812      	ldrb	r2, [r2, #0]
   16a58:	b2d2      	uxtb	r2, r2
   16a5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16a5e:	b2d2      	uxtb	r2, r2
   16a60:	701a      	strb	r2, [r3, #0]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );
   16a62:	f242 0318 	movw	r3, #8216	; 0x2018
   16a66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16a6a:	f242 0218 	movw	r2, #8216	; 0x2018
   16a6e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16a72:	7812      	ldrb	r2, [r2, #0]
   16a74:	b2d2      	uxtb	r2, r2
   16a76:	f022 0202 	bic.w	r2, r2, #2
   16a7a:	b2d2      	uxtb	r2, r2
   16a7c:	701a      	strb	r2, [r3, #0]

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   16a7e:	2300      	movs	r3, #0
   16a80:	71fb      	strb	r3, [r7, #7]
   16a82:	e00b      	b.n	16a9c <servo_init+0x94>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
   16a84:	79fa      	ldrb	r2, [r7, #7]
   16a86:	f24c 635c 	movw	r3, #50780	; 0xc65c
   16a8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a8e:	f645 51c0 	movw	r1, #24000	; 0x5dc0
   16a92:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   16a96:	79fb      	ldrb	r3, [r7, #7]
   16a98:	3301      	adds	r3, #1
   16a9a:	71fb      	strb	r3, [r7, #7]
   16a9c:	79fb      	ldrb	r3, [r7, #7]
   16a9e:	2b09      	cmp	r3, #9
   16aa0:	d9f0      	bls.n	16a84 <servo_init+0x7c>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
	
  /* Set servos to go off some long time from now */
  SERVO_OCR	= 32768ul;
   16aa2:	f242 032a 	movw	r3, #8234	; 0x202a
   16aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16aaa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   16aae:	801a      	strh	r2, [r3, #0]

  /*
   * Configure output compare to toggle the output bits.
   */
  TCCR1A |=  _BV(SERVO_COM0 );
   16ab0:	f242 032f 	movw	r3, #8239	; 0x202f
   16ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ab8:	f242 022f 	movw	r2, #8239	; 0x202f
   16abc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16ac0:	7812      	ldrb	r2, [r2, #0]
   16ac2:	b2d2      	uxtb	r2, r2
   16ac4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16ac8:	b2d2      	uxtb	r2, r2
   16aca:	701a      	strb	r2, [r3, #0]
	
  /* Clear the interrupt flags in case they are set */
  TIFR = _BV(SERVO_FLAG);
   16acc:	f242 0336 	movw	r3, #8246	; 0x2036
   16ad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ad4:	2210      	movs	r2, #16
   16ad6:	701a      	strb	r2, [r3, #0]

  /* Unassert the decade counter reset to start it running */
  cbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16ad8:	f242 0312 	movw	r3, #8210	; 0x2012
   16adc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ae0:	f242 0212 	movw	r2, #8210	; 0x2012
   16ae4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16ae8:	7812      	ldrb	r2, [r2, #0]
   16aea:	b2d2      	uxtb	r2, r2
   16aec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   16af0:	b2d2      	uxtb	r2, r2
   16af2:	701a      	strb	r2, [r3, #0]

  /* Enable our output compare interrupts */
  TIMSK |= _BV(SERVO_ENABLE );
   16af4:	f242 0337 	movw	r3, #8247	; 0x2037
   16af8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16afc:	f242 0237 	movw	r2, #8247	; 0x2037
   16b00:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16b04:	7812      	ldrb	r2, [r2, #0]
   16b06:	b2d2      	uxtb	r2, r2
   16b08:	f042 0210 	orr.w	r2, r2, #16
   16b0c:	b2d2      	uxtb	r2, r2
   16b0e:	701a      	strb	r2, [r3, #0]
}
   16b10:	370c      	adds	r7, #12
   16b12:	46bd      	mov	sp, r7
   16b14:	f85d 7b04 	ldr.w	r7, [sp], #4
   16b18:	4770      	bx	lr
   16b1a:	bf00      	nop

00016b1c <servo_set_one>:

  servo++;
}
#endif

void servo_set_one(uint8_t servo, uint16_t value_us) {
   16b1c:	b480      	push	{r7}
   16b1e:	b083      	sub	sp, #12
   16b20:	af00      	add	r7, sp, #0
   16b22:	4602      	mov	r2, r0
   16b24:	460b      	mov	r3, r1
   16b26:	71fa      	strb	r2, [r7, #7]
   16b28:	80bb      	strh	r3, [r7, #4]
  servo_widths[servo] = ChopServo(CLOCK*value_us);
   16b2a:	79f9      	ldrb	r1, [r7, #7]
   16b2c:	88bb      	ldrh	r3, [r7, #4]
   16b2e:	011b      	lsls	r3, r3, #4
   16b30:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16b34:	d308      	bcc.n	16b48 <servo_set_one+0x2c>
   16b36:	88bb      	ldrh	r3, [r7, #4]
   16b38:	011b      	lsls	r3, r3, #4
   16b3a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16b3e:	bf28      	it	cs
   16b40:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16b44:	b29a      	uxth	r2, r3
   16b46:	e001      	b.n	16b4c <servo_set_one+0x30>
   16b48:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16b4c:	f24c 635c 	movw	r3, #50780	; 0xc65c
   16b50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b54:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
   16b58:	370c      	adds	r7, #12
   16b5a:	46bd      	mov	sp, r7
   16b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
   16b60:	4770      	bx	lr
   16b62:	bf00      	nop

00016b64 <servo_transmit>:

void 
servo_transmit(void) {
   16b64:	b580      	push	{r7, lr}
   16b66:	b082      	sub	sp, #8
   16b68:	af00      	add	r7, sp, #0
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);
   16b6a:	2000      	movs	r0, #0
   16b6c:	f000 f9e6 	bl	16f3c <uart_transmit>
   16b70:	2000      	movs	r0, #0
   16b72:	f000 f9e3 	bl	16f3c <uart_transmit>

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16b76:	2300      	movs	r3, #0
   16b78:	71fb      	strb	r3, [r7, #7]
   16b7a:	e01a      	b.n	16bb2 <servo_transmit+0x4e>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
   16b7c:	79fa      	ldrb	r2, [r7, #7]
   16b7e:	f24c 635c 	movw	r3, #50780	; 0xc65c
   16b82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b86:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16b8a:	0a1b      	lsrs	r3, r3, #8
   16b8c:	b29b      	uxth	r3, r3
   16b8e:	b2db      	uxtb	r3, r3
   16b90:	4618      	mov	r0, r3
   16b92:	f000 f9d3 	bl	16f3c <uart_transmit>
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
   16b96:	79fa      	ldrb	r2, [r7, #7]
   16b98:	f24c 635c 	movw	r3, #50780	; 0xc65c
   16b9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ba0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16ba4:	b2db      	uxtb	r3, r3
   16ba6:	4618      	mov	r0, r3
   16ba8:	f000 f9c8 	bl	16f3c <uart_transmit>
servo_transmit(void) {
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16bac:	79fb      	ldrb	r3, [r7, #7]
   16bae:	3301      	adds	r3, #1
   16bb0:	71fb      	strb	r3, [r7, #7]
   16bb2:	79fb      	ldrb	r3, [r7, #7]
   16bb4:	2b09      	cmp	r3, #9
   16bb6:	d9e1      	bls.n	16b7c <servo_transmit+0x18>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
  }
  uart_transmit((uint8_t)'\n');
   16bb8:	200a      	movs	r0, #10
   16bba:	f000 f9bf 	bl	16f3c <uart_transmit>
	//vPrintString("S_10 servo_transmit end! \n\r"); //SunnyBeike
}
   16bbe:	3708      	adds	r7, #8
   16bc0:	46bd      	mov	sp, r7
   16bc2:	bd80      	pop	{r7, pc}

00016bc4 <servo_set>:
 *
 * defines how servos react to radio control or autopilot channels
 *
 */

void servo_set(const pprz_t values[]) {
   16bc4:	b5b0      	push	{r4, r5, r7, lr}
   16bc6:	b084      	sub	sp, #16
   16bc8:	af00      	add	r7, sp, #0
   16bca:	6078      	str	r0, [r7, #4]
  ServoSet(values); /*Generated from airframe.xml */
   16bcc:	687b      	ldr	r3, [r7, #4]
   16bce:	330a      	adds	r3, #10
   16bd0:	881b      	ldrh	r3, [r3, #0]
   16bd2:	b21b      	sxth	r3, r3
   16bd4:	005b      	lsls	r3, r3, #1
   16bd6:	4618      	mov	r0, r3
   16bd8:	f000 fef2 	bl	179c0 <__aeabi_i2d>
   16bdc:	4602      	mov	r2, r0
   16bde:	460b      	mov	r3, r1
   16be0:	4610      	mov	r0, r2
   16be2:	4619      	mov	r1, r3
   16be4:	a3a6      	add	r3, pc, #664	; (adr r3, 16e80 <servo_set+0x2bc>)
   16be6:	e9d3 2300 	ldrd	r2, r3, [r3]
   16bea:	f000 ff4f 	bl	17a8c <__aeabi_dmul>
   16bee:	4602      	mov	r2, r0
   16bf0:	460b      	mov	r3, r1
   16bf2:	4610      	mov	r0, r2
   16bf4:	4619      	mov	r1, r3
   16bf6:	f001 f9e3 	bl	17fc0 <__aeabi_d2iz>
   16bfa:	4603      	mov	r3, r0
   16bfc:	b29b      	uxth	r3, r3
   16bfe:	b29b      	uxth	r3, r3
   16c00:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16c04:	81fb      	strh	r3, [r7, #14]
   16c06:	89fb      	ldrh	r3, [r7, #14]
   16c08:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16c0c:	d307      	bcc.n	16c1e <servo_set+0x5a>
   16c0e:	89fb      	ldrh	r3, [r7, #14]
   16c10:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16c14:	bf28      	it	cs
   16c16:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16c1a:	b29a      	uxth	r2, r3
   16c1c:	e001      	b.n	16c22 <servo_set+0x5e>
   16c1e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16c22:	f24c 635c 	movw	r3, #50780	; 0xc65c
   16c26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c2a:	80da      	strh	r2, [r3, #6]
   16c2c:	687b      	ldr	r3, [r7, #4]
   16c2e:	881b      	ldrh	r3, [r3, #0]
   16c30:	b21b      	sxth	r3, r3
   16c32:	005b      	lsls	r3, r3, #1
   16c34:	4618      	mov	r0, r3
   16c36:	f000 fec3 	bl	179c0 <__aeabi_i2d>
   16c3a:	4602      	mov	r2, r0
   16c3c:	460b      	mov	r3, r1
   16c3e:	4610      	mov	r0, r2
   16c40:	4619      	mov	r1, r3
   16c42:	a38f      	add	r3, pc, #572	; (adr r3, 16e80 <servo_set+0x2bc>)
   16c44:	e9d3 2300 	ldrd	r2, r3, [r3]
   16c48:	f000 ff20 	bl	17a8c <__aeabi_dmul>
   16c4c:	4602      	mov	r2, r0
   16c4e:	460b      	mov	r3, r1
   16c50:	4610      	mov	r0, r2
   16c52:	4619      	mov	r1, r3
   16c54:	f001 f9b4 	bl	17fc0 <__aeabi_d2iz>
   16c58:	4603      	mov	r3, r0
   16c5a:	b29b      	uxth	r3, r3
   16c5c:	b29b      	uxth	r3, r3
   16c5e:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16c62:	81fb      	strh	r3, [r7, #14]
   16c64:	89fb      	ldrh	r3, [r7, #14]
   16c66:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16c6a:	d307      	bcc.n	16c7c <servo_set+0xb8>
   16c6c:	89fb      	ldrh	r3, [r7, #14]
   16c6e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16c72:	bf28      	it	cs
   16c74:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16c78:	b29a      	uxth	r2, r3
   16c7a:	e001      	b.n	16c80 <servo_set+0xbc>
   16c7c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16c80:	f24c 635c 	movw	r3, #50780	; 0xc65c
   16c84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c88:	825a      	strh	r2, [r3, #18]
   16c8a:	687b      	ldr	r3, [r7, #4]
   16c8c:	3304      	adds	r3, #4
   16c8e:	881b      	ldrh	r3, [r3, #0]
   16c90:	b21b      	sxth	r3, r3
   16c92:	4618      	mov	r0, r3
   16c94:	f000 fe94 	bl	179c0 <__aeabi_i2d>
   16c98:	4602      	mov	r2, r0
   16c9a:	460b      	mov	r3, r1
   16c9c:	4610      	mov	r0, r2
   16c9e:	4619      	mov	r1, r3
   16ca0:	a379      	add	r3, pc, #484	; (adr r3, 16e88 <servo_set+0x2c4>)
   16ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
   16ca6:	f000 fef1 	bl	17a8c <__aeabi_dmul>
   16caa:	4602      	mov	r2, r0
   16cac:	460b      	mov	r3, r1
   16cae:	4610      	mov	r0, r2
   16cb0:	4619      	mov	r1, r3
   16cb2:	f001 f985 	bl	17fc0 <__aeabi_d2iz>
   16cb6:	4603      	mov	r3, r0
   16cb8:	b29b      	uxth	r3, r3
   16cba:	b29b      	uxth	r3, r3
   16cbc:	f503 43bf 	add.w	r3, r3, #24448	; 0x5f80
   16cc0:	3320      	adds	r3, #32
   16cc2:	81fb      	strh	r3, [r7, #14]
   16cc4:	89fb      	ldrh	r3, [r7, #14]
   16cc6:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16cca:	d307      	bcc.n	16cdc <servo_set+0x118>
   16ccc:	89fb      	ldrh	r3, [r7, #14]
   16cce:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16cd2:	bf28      	it	cs
   16cd4:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16cd8:	b29a      	uxth	r2, r3
   16cda:	e001      	b.n	16ce0 <servo_set+0x11c>
   16cdc:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16ce0:	f24c 635c 	movw	r3, #50780	; 0xc65c
   16ce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ce8:	819a      	strh	r2, [r3, #12]
   16cea:	687b      	ldr	r3, [r7, #4]
   16cec:	885b      	ldrh	r3, [r3, #2]
   16cee:	81bb      	strh	r3, [r7, #12]
   16cf0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16cf4:	2b00      	cmp	r3, #0
   16cf6:	dd06      	ble.n	16d06 <servo_set+0x142>
   16cf8:	f04f 0400 	mov.w	r4, #0
   16cfc:	f04f 0500 	mov.w	r5, #0
   16d00:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   16d04:	e002      	b.n	16d0c <servo_set+0x148>
   16d06:	a562      	add	r5, pc, #392	; (adr r5, 16e90 <servo_set+0x2cc>)
   16d08:	e9d5 4500 	ldrd	r4, r5, [r5]
   16d0c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16d10:	4618      	mov	r0, r3
   16d12:	f000 fe55 	bl	179c0 <__aeabi_i2d>
   16d16:	4602      	mov	r2, r0
   16d18:	460b      	mov	r3, r1
   16d1a:	4620      	mov	r0, r4
   16d1c:	4629      	mov	r1, r5
   16d1e:	f000 feb5 	bl	17a8c <__aeabi_dmul>
   16d22:	4602      	mov	r2, r0
   16d24:	460b      	mov	r3, r1
   16d26:	4610      	mov	r0, r2
   16d28:	4619      	mov	r1, r3
   16d2a:	a35b      	add	r3, pc, #364	; (adr r3, 16e98 <servo_set+0x2d4>)
   16d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16d30:	f000 feac 	bl	17a8c <__aeabi_dmul>
   16d34:	4602      	mov	r2, r0
   16d36:	460b      	mov	r3, r1
   16d38:	4610      	mov	r0, r2
   16d3a:	4619      	mov	r1, r3
   16d3c:	f001 f940 	bl	17fc0 <__aeabi_d2iz>
   16d40:	4603      	mov	r3, r0
   16d42:	b29b      	uxth	r3, r3
   16d44:	b29b      	uxth	r3, r3
   16d46:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
   16d4a:	81fb      	strh	r3, [r7, #14]
   16d4c:	89fb      	ldrh	r3, [r7, #14]
   16d4e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16d52:	d307      	bcc.n	16d64 <servo_set+0x1a0>
   16d54:	89fb      	ldrh	r3, [r7, #14]
   16d56:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16d5a:	bf28      	it	cs
   16d5c:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16d60:	b29a      	uxth	r2, r3
   16d62:	e001      	b.n	16d68 <servo_set+0x1a4>
   16d64:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16d68:	f24c 635c 	movw	r3, #50780	; 0xc65c
   16d6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d70:	801a      	strh	r2, [r3, #0]
   16d72:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16d76:	2b00      	cmp	r3, #0
   16d78:	dd03      	ble.n	16d82 <servo_set+0x1be>
   16d7a:	a545      	add	r5, pc, #276	; (adr r5, 16e90 <servo_set+0x2cc>)
   16d7c:	e9d5 4500 	ldrd	r4, r5, [r5]
   16d80:	e005      	b.n	16d8e <servo_set+0x1ca>
   16d82:	f04f 0400 	mov.w	r4, #0
   16d86:	f04f 0500 	mov.w	r5, #0
   16d8a:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   16d8e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16d92:	4618      	mov	r0, r3
   16d94:	f000 fe14 	bl	179c0 <__aeabi_i2d>
   16d98:	4602      	mov	r2, r0
   16d9a:	460b      	mov	r3, r1
   16d9c:	4620      	mov	r0, r4
   16d9e:	4629      	mov	r1, r5
   16da0:	f000 fe74 	bl	17a8c <__aeabi_dmul>
   16da4:	4602      	mov	r2, r0
   16da6:	460b      	mov	r3, r1
   16da8:	4610      	mov	r0, r2
   16daa:	4619      	mov	r1, r3
   16dac:	a33c      	add	r3, pc, #240	; (adr r3, 16ea0 <servo_set+0x2dc>)
   16dae:	e9d3 2300 	ldrd	r2, r3, [r3]
   16db2:	f000 fe6b 	bl	17a8c <__aeabi_dmul>
   16db6:	4602      	mov	r2, r0
   16db8:	460b      	mov	r3, r1
   16dba:	4610      	mov	r0, r2
   16dbc:	4619      	mov	r1, r3
   16dbe:	f001 f8ff 	bl	17fc0 <__aeabi_d2iz>
   16dc2:	4603      	mov	r3, r0
   16dc4:	b29b      	uxth	r3, r3
   16dc6:	b29b      	uxth	r3, r3
   16dc8:	f503 43ce 	add.w	r3, r3, #26368	; 0x6700
   16dcc:	3320      	adds	r3, #32
   16dce:	81fb      	strh	r3, [r7, #14]
   16dd0:	89fb      	ldrh	r3, [r7, #14]
   16dd2:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16dd6:	d307      	bcc.n	16de8 <servo_set+0x224>
   16dd8:	89fb      	ldrh	r3, [r7, #14]
   16dda:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16dde:	bf28      	it	cs
   16de0:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16de4:	b29a      	uxth	r2, r3
   16de6:	e001      	b.n	16dec <servo_set+0x228>
   16de8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16dec:	f24c 635c 	movw	r3, #50780	; 0xc65c
   16df0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16df4:	809a      	strh	r2, [r3, #4]
   16df6:	687b      	ldr	r3, [r7, #4]
   16df8:	3306      	adds	r3, #6
   16dfa:	881b      	ldrh	r3, [r3, #0]
   16dfc:	b21b      	sxth	r3, r3
   16dfe:	4618      	mov	r0, r3
   16e00:	f000 fdde 	bl	179c0 <__aeabi_i2d>
   16e04:	4604      	mov	r4, r0
   16e06:	460d      	mov	r5, r1
   16e08:	687b      	ldr	r3, [r7, #4]
   16e0a:	3302      	adds	r3, #2
   16e0c:	881b      	ldrh	r3, [r3, #0]
   16e0e:	b21b      	sxth	r3, r3
   16e10:	4618      	mov	r0, r3
   16e12:	f000 fdd5 	bl	179c0 <__aeabi_i2d>
   16e16:	4602      	mov	r2, r0
   16e18:	460b      	mov	r3, r1
   16e1a:	4620      	mov	r0, r4
   16e1c:	4629      	mov	r1, r5
   16e1e:	f000 fc83 	bl	17728 <__adddf3>
   16e22:	4602      	mov	r2, r0
   16e24:	460b      	mov	r3, r1
   16e26:	4610      	mov	r0, r2
   16e28:	4619      	mov	r1, r3
   16e2a:	a31f      	add	r3, pc, #124	; (adr r3, 16ea8 <servo_set+0x2e4>)
   16e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16e30:	f000 fe2c 	bl	17a8c <__aeabi_dmul>
   16e34:	4602      	mov	r2, r0
   16e36:	460b      	mov	r3, r1
   16e38:	4610      	mov	r0, r2
   16e3a:	4619      	mov	r1, r3
   16e3c:	f001 f8c0 	bl	17fc0 <__aeabi_d2iz>
   16e40:	4603      	mov	r3, r0
   16e42:	b29b      	uxth	r3, r3
   16e44:	b29b      	uxth	r3, r3
   16e46:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
   16e4a:	3320      	adds	r3, #32
   16e4c:	81fb      	strh	r3, [r7, #14]
   16e4e:	89fb      	ldrh	r3, [r7, #14]
   16e50:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16e54:	d307      	bcc.n	16e66 <servo_set+0x2a2>
   16e56:	89fb      	ldrh	r3, [r7, #14]
   16e58:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16e5c:	bf28      	it	cs
   16e5e:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16e62:	b29a      	uxth	r2, r3
   16e64:	e001      	b.n	16e6a <servo_set+0x2a6>
   16e66:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16e6a:	f24c 635c 	movw	r3, #50780	; 0xc65c
   16e6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16e72:	81da      	strh	r2, [r3, #14]
}
   16e74:	3710      	adds	r7, #16
   16e76:	46bd      	mov	sp, r7
   16e78:	bdb0      	pop	{r4, r5, r7, pc}
   16e7a:	bf00      	nop
   16e7c:	f3af 8000 	nop.w
   16e80:	aaaa9ef0 	.word	0xaaaa9ef0
   16e84:	3feaaaaa 	.word	0x3feaaaaa
   16e88:	fc96473e 	.word	0xfc96473e
   16e8c:	3fdfc962 	.word	0x3fdfc962
   16e90:	51eb851f 	.word	0x51eb851f
   16e94:	3fe51eb8 	.word	0x3fe51eb8
   16e98:	9999999a 	.word	0x9999999a
   16e9c:	bfe19999 	.word	0xbfe19999
   16ea0:	aaaa9ef0 	.word	0xaaaa9ef0
   16ea4:	bfe0aaaa 	.word	0xbfe0aaaa
   16ea8:	eeeed77a 	.word	0xeeeed77a
   16eac:	bfdeeeee 	.word	0xbfdeeeee

00016eb0 <uart_init_tx>:
 * UART Baud rate generation settings:
 *
 * With 16.0 MHz clock,UBRR=25  => 38400 baud
 *
 */
void uart_init_tx( void ) {
   16eb0:	b480      	push	{r7}
   16eb2:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRRH = 0; 
   16eb4:	f242 0320 	movw	r3, #8224	; 0x2020
   16eb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ebc:	2200      	movs	r2, #0
   16ebe:	701a      	strb	r2, [r3, #0]
  UBRRL = 25; 
   16ec0:	f242 0309 	movw	r3, #8201	; 0x2009
   16ec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ec8:	2219      	movs	r2, #25
   16eca:	701a      	strb	r2, [r3, #0]
  /* single speed */ 
  UCSRA = 0; 
   16ecc:	f242 030b 	movw	r3, #8203	; 0x200b
   16ed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ed4:	2200      	movs	r2, #0
   16ed6:	701a      	strb	r2, [r3, #0]
  /* Enable transmitter */ 
  UCSRB = _BV(TXEN); 
   16ed8:	f242 030a 	movw	r3, #8202	; 0x200a
   16edc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ee0:	2208      	movs	r2, #8
   16ee2:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0); 
   16ee4:	f242 0320 	movw	r3, #8224	; 0x2020
   16ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16eec:	2286      	movs	r2, #134	; 0x86
   16eee:	701a      	strb	r2, [r3, #0]
}
   16ef0:	46bd      	mov	sp, r7
   16ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
   16ef6:	4770      	bx	lr

00016ef8 <uart_init_rx>:

void uart_init_rx() {
   16ef8:	b480      	push	{r7}
   16efa:	af00      	add	r7, sp, #0
  /* Enable receiver               */ 
  UCSRB |= _BV(RXEN); 
   16efc:	f242 030a 	movw	r3, #8202	; 0x200a
   16f00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16f04:	f242 020a 	movw	r2, #8202	; 0x200a
   16f08:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16f0c:	7812      	ldrb	r2, [r2, #0]
   16f0e:	b2d2      	uxtb	r2, r2
   16f10:	f042 0210 	orr.w	r2, r2, #16
   16f14:	b2d2      	uxtb	r2, r2
   16f16:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi( UCSRB, RXCIE ); 
   16f18:	f242 030a 	movw	r3, #8202	; 0x200a
   16f1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16f20:	f242 020a 	movw	r2, #8202	; 0x200a
   16f24:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16f28:	7812      	ldrb	r2, [r2, #0]
   16f2a:	b2d2      	uxtb	r2, r2
   16f2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16f30:	b2d2      	uxtb	r2, r2
   16f32:	701a      	strb	r2, [r3, #0]
}
   16f34:	46bd      	mov	sp, r7
   16f36:	f85d 7b04 	ldr.w	r7, [sp], #4
   16f3a:	4770      	bx	lr

00016f3c <uart_transmit>:

void uart_transmit( unsigned char data ) {
   16f3c:	b480      	push	{r7}
   16f3e:	b083      	sub	sp, #12
   16f40:	af00      	add	r7, sp, #0
   16f42:	4603      	mov	r3, r0
   16f44:	71fb      	strb	r3, [r7, #7]
  if (UCSRB & _BV(TXCIE)) {
   16f46:	f242 030a 	movw	r3, #8202	; 0x200a
   16f4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16f4e:	781b      	ldrb	r3, [r3, #0]
   16f50:	b2db      	uxtb	r3, r3
   16f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
   16f56:	2b00      	cmp	r3, #0
   16f58:	d028      	beq.n	16fac <uart_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail == tx_head + 1) { /* BUF_SIZE = 256 */
   16f5a:	f24c 6371 	movw	r3, #50801	; 0xc671
   16f5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16f62:	781b      	ldrb	r3, [r3, #0]
   16f64:	b2db      	uxtb	r3, r3
   16f66:	461a      	mov	r2, r3
   16f68:	f24c 6370 	movw	r3, #50800	; 0xc670
   16f6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16f70:	781b      	ldrb	r3, [r3, #0]
   16f72:	3301      	adds	r3, #1
   16f74:	429a      	cmp	r2, r3
   16f76:	d100      	bne.n	16f7a <uart_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   16f78:	e02c      	b.n	16fd4 <uart_transmit+0x98>
    }
    tx_buf[tx_head] = data;
   16f7a:	f24c 6370 	movw	r3, #50800	; 0xc670
   16f7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16f82:	781b      	ldrb	r3, [r3, #0]
   16f84:	461a      	mov	r2, r3
   16f86:	f24c 6374 	movw	r3, #50804	; 0xc674
   16f8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16f8e:	79f9      	ldrb	r1, [r7, #7]
   16f90:	5499      	strb	r1, [r3, r2]
    tx_head++; /* BUF_SIZE = 256 */
   16f92:	f24c 6370 	movw	r3, #50800	; 0xc670
   16f96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16f9a:	781b      	ldrb	r3, [r3, #0]
   16f9c:	3301      	adds	r3, #1
   16f9e:	b2da      	uxtb	r2, r3
   16fa0:	f24c 6370 	movw	r3, #50800	; 0xc670
   16fa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16fa8:	701a      	strb	r2, [r3, #0]
   16faa:	e013      	b.n	16fd4 <uart_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR = data;
   16fac:	f242 030c 	movw	r3, #8204	; 0x200c
   16fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16fb4:	79fa      	ldrb	r2, [r7, #7]
   16fb6:	701a      	strb	r2, [r3, #0]
    sbi(UCSRB, TXCIE);
   16fb8:	f242 030a 	movw	r3, #8202	; 0x200a
   16fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16fc0:	f242 020a 	movw	r2, #8202	; 0x200a
   16fc4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16fc8:	7812      	ldrb	r2, [r2, #0]
   16fca:	b2d2      	uxtb	r2, r2
   16fcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16fd0:	b2d2      	uxtb	r2, r2
   16fd2:	701a      	strb	r2, [r3, #0]
  }
}
   16fd4:	370c      	adds	r7, #12
   16fd6:	46bd      	mov	sp, r7
   16fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
   16fdc:	4770      	bx	lr
   16fde:	bf00      	nop

00016fe0 <uart_print_hex>:

void uart_print_hex ( uint8_t c ) {
   16fe0:	b590      	push	{r4, r7, lr}
   16fe2:	b089      	sub	sp, #36	; 0x24
   16fe4:	af00      	add	r7, sp, #0
   16fe6:	4603      	mov	r3, r0
   16fe8:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   16fea:	f648 231c 	movw	r3, #35356	; 0x8a1c
   16fee:	f2c0 0301 	movt	r3, #1
   16ff2:	f107 040c 	add.w	r4, r7, #12
   16ff6:	6818      	ldr	r0, [r3, #0]
   16ff8:	6859      	ldr	r1, [r3, #4]
   16ffa:	689a      	ldr	r2, [r3, #8]
   16ffc:	68db      	ldr	r3, [r3, #12]
   16ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   17000:	79fb      	ldrb	r3, [r7, #7]
   17002:	091b      	lsrs	r3, r3, #4
   17004:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   17006:	79fb      	ldrb	r3, [r7, #7]
   17008:	f003 030f 	and.w	r3, r3, #15
   1700c:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
        high = 15;
   1700e:	230f      	movs	r3, #15
   17010:	77fb      	strb	r3, [r7, #31]
        low = 15;
   17012:	230f      	movs	r3, #15
   17014:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */

    uart_transmit(hex[high]);
   17016:	7ffb      	ldrb	r3, [r7, #31]
   17018:	f107 0220 	add.w	r2, r7, #32
   1701c:	4413      	add	r3, r2
   1701e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   17022:	4618      	mov	r0, r3
   17024:	f7ff ff8a 	bl	16f3c <uart_transmit>
  uart_transmit(hex[low]);
   17028:	7fbb      	ldrb	r3, [r7, #30]
   1702a:	f107 0220 	add.w	r2, r7, #32
   1702e:	4413      	add	r3, r2
   17030:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   17034:	4618      	mov	r0, r3
   17036:	f7ff ff81 	bl	16f3c <uart_transmit>
} 
   1703a:	3724      	adds	r7, #36	; 0x24
   1703c:	46bd      	mov	sp, r7
   1703e:	bd90      	pop	{r4, r7, pc}

00017040 <uart_print_hex16>:

void uart_print_hex16 ( uint16_t c ) {
   17040:	b580      	push	{r7, lr}
   17042:	b084      	sub	sp, #16
   17044:	af00      	add	r7, sp, #0
   17046:	4603      	mov	r3, r0
   17048:	80fb      	strh	r3, [r7, #6]
  uint8_t high = (uint8_t)(c>>8);
   1704a:	88fb      	ldrh	r3, [r7, #6]
   1704c:	0a1b      	lsrs	r3, r3, #8
   1704e:	b29b      	uxth	r3, r3
   17050:	73fb      	strb	r3, [r7, #15]
  uint8_t low  = (uint8_t)(c);
   17052:	88fb      	ldrh	r3, [r7, #6]
   17054:	73bb      	strb	r3, [r7, #14]
  uart_print_hex(high);
   17056:	7bfb      	ldrb	r3, [r7, #15]
   17058:	4618      	mov	r0, r3
   1705a:	f7ff ffc1 	bl	16fe0 <uart_print_hex>
  uart_print_hex(low);
   1705e:	7bbb      	ldrb	r3, [r7, #14]
   17060:	4618      	mov	r0, r3
   17062:	f7ff ffbd 	bl	16fe0 <uart_print_hex>
}
   17066:	3710      	adds	r7, #16
   17068:	46bd      	mov	sp, r7
   1706a:	bd80      	pop	{r7, pc}

0001706c <uart_print_string>:

void uart_print_string(const uint8_t* s) {
   1706c:	b580      	push	{r7, lr}
   1706e:	b084      	sub	sp, #16
   17070:	af00      	add	r7, sp, #0
   17072:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   17074:	2300      	movs	r3, #0
   17076:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   17078:	e009      	b.n	1708e <uart_print_string+0x22>
    uart_transmit(s[i]);
   1707a:	7bfb      	ldrb	r3, [r7, #15]
   1707c:	687a      	ldr	r2, [r7, #4]
   1707e:	4413      	add	r3, r2
   17080:	781b      	ldrb	r3, [r3, #0]
   17082:	4618      	mov	r0, r3
   17084:	f7ff ff5a 	bl	16f3c <uart_transmit>
    i++;
   17088:	7bfb      	ldrb	r3, [r7, #15]
   1708a:	3301      	adds	r3, #1
   1708c:	73fb      	strb	r3, [r7, #15]
  uart_print_hex(low);
}

void uart_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   1708e:	7bfb      	ldrb	r3, [r7, #15]
   17090:	687a      	ldr	r2, [r7, #4]
   17092:	4413      	add	r3, r2
   17094:	781b      	ldrb	r3, [r3, #0]
   17096:	2b00      	cmp	r3, #0
   17098:	d1ef      	bne.n	1707a <uart_print_string+0xe>
    uart_transmit(s[i]);
    i++;
  }
}
   1709a:	3710      	adds	r7, #16
   1709c:	46bd      	mov	sp, r7
   1709e:	bd80      	pop	{r7, pc}

000170a0 <SIG_UART_TRANS>:

SIGNAL(SIG_UART_TRANS) {
   170a0:	b480      	push	{r7}
   170a2:	af00      	add	r7, sp, #0
  if (tx_head == tx_tail) {
   170a4:	f24c 6370 	movw	r3, #50800	; 0xc670
   170a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   170ac:	781a      	ldrb	r2, [r3, #0]
   170ae:	f24c 6371 	movw	r3, #50801	; 0xc671
   170b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   170b6:	781b      	ldrb	r3, [r3, #0]
   170b8:	b2db      	uxtb	r3, r3
   170ba:	429a      	cmp	r2, r3
   170bc:	d10e      	bne.n	170dc <SIG_UART_TRANS+0x3c>
    /* Nothing more to send */
    cbi(UCSRB, TXCIE); /* disable interrupt */
   170be:	f242 030a 	movw	r3, #8202	; 0x200a
   170c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   170c6:	f242 020a 	movw	r2, #8202	; 0x200a
   170ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
   170ce:	7812      	ldrb	r2, [r2, #0]
   170d0:	b2d2      	uxtb	r2, r2
   170d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   170d6:	b2d2      	uxtb	r2, r2
   170d8:	701a      	strb	r2, [r3, #0]
   170da:	e01d      	b.n	17118 <SIG_UART_TRANS+0x78>
  } else {
    UDR = tx_buf[tx_tail];
   170dc:	f242 030c 	movw	r3, #8204	; 0x200c
   170e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   170e4:	f24c 6271 	movw	r2, #50801	; 0xc671
   170e8:	f2c2 0204 	movt	r2, #8196	; 0x2004
   170ec:	7812      	ldrb	r2, [r2, #0]
   170ee:	b2d2      	uxtb	r2, r2
   170f0:	4611      	mov	r1, r2
   170f2:	f24c 6274 	movw	r2, #50804	; 0xc674
   170f6:	f2c2 0204 	movt	r2, #8196	; 0x2004
   170fa:	5c52      	ldrb	r2, [r2, r1]
   170fc:	701a      	strb	r2, [r3, #0]
    tx_tail++; /* warning tx_buf_len is 256 */
   170fe:	f24c 6371 	movw	r3, #50801	; 0xc671
   17102:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17106:	781b      	ldrb	r3, [r3, #0]
   17108:	b2db      	uxtb	r3, r3
   1710a:	3301      	adds	r3, #1
   1710c:	b2da      	uxtb	r2, r3
   1710e:	f24c 6371 	movw	r3, #50801	; 0xc671
   17112:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17116:	701a      	strb	r2, [r3, #0]
  }
}
   17118:	46bd      	mov	sp, r7
   1711a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1711e:	4770      	bx	lr

00017120 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
   17120:	b580      	push	{r7, lr}
   17122:	b082      	sub	sp, #8
   17124:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   17126:	2010      	movs	r0, #16
   17128:	2101      	movs	r1, #1
   1712a:	f7e9 fe49 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
   1712e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   17132:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17136:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1713a:	2201      	movs	r2, #1
   1713c:	f7ea f950 	bl	13e0 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
   17140:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   17144:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   17146:	2310      	movs	r3, #16
   17148:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   1714a:	2303      	movs	r3, #3
   1714c:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   1714e:	1d3b      	adds	r3, r7, #4
   17150:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   17154:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17158:	4619      	mov	r1, r3
   1715a:	f7ea f805 	bl	1168 <GPIO_Init>
}
   1715e:	3708      	adds	r7, #8
   17160:	46bd      	mov	sp, r7
   17162:	bd80      	pop	{r7, pc}

00017164 <init_button>:

void init_button(void)
{
   17164:	b580      	push	{r7, lr}
   17166:	b082      	sub	sp, #8
   17168:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   1716a:	2004      	movs	r0, #4
   1716c:	2101      	movs	r1, #1
   1716e:	f7e9 fe27 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
   17172:	2301      	movs	r3, #1
   17174:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   17176:	2304      	movs	r3, #4
   17178:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   1717a:	2303      	movs	r3, #3
   1717c:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   1717e:	1d3b      	adds	r3, r7, #4
   17180:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   17184:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17188:	4619      	mov	r1, r3
   1718a:	f7e9 ffed 	bl	1168 <GPIO_Init>
}
   1718e:	3708      	adds	r7, #8
   17190:	46bd      	mov	sp, r7
   17192:	bd80      	pop	{r7, pc}

00017194 <enable_button_interrupts>:

void enable_button_interrupts(void)
{
   17194:	b580      	push	{r7, lr}
   17196:	b084      	sub	sp, #16
   17198:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   1719a:	2001      	movs	r0, #1
   1719c:	2101      	movs	r1, #1
   1719e:	f7e9 fe0f 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
   171a2:	2000      	movs	r0, #0
   171a4:	2100      	movs	r1, #0
   171a6:	f7ea fa13 	bl	15d0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
   171aa:	2301      	movs	r3, #1
   171ac:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   171ae:	2300      	movs	r3, #0
   171b0:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
   171b2:	2308      	movs	r3, #8
   171b4:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   171b6:	2301      	movs	r3, #1
   171b8:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
   171ba:	f107 0308 	add.w	r3, r7, #8
   171be:	4618      	mov	r0, r3
   171c0:	f7ea ff0c 	bl	1fdc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
   171c4:	2306      	movs	r3, #6
   171c6:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   171c8:	230f      	movs	r3, #15
   171ca:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
   171cc:	230f      	movs	r3, #15
   171ce:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   171d0:	2301      	movs	r3, #1
   171d2:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   171d4:	1d3b      	adds	r3, r7, #4
   171d6:	4618      	mov	r0, r3
   171d8:	f7eb f83a 	bl	2250 <NVIC_Init>
}
   171dc:	3710      	adds	r7, #16
   171de:	46bd      	mov	sp, r7
   171e0:	bd80      	pop	{r7, pc}
   171e2:	bf00      	nop

000171e4 <init_rs232>:

void init_rs232(void)
{
   171e4:	b580      	push	{r7, lr}
   171e6:	b086      	sub	sp, #24
   171e8:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
   171ea:	2005      	movs	r0, #5
   171ec:	2101      	movs	r1, #1
   171ee:	f7e9 fde7 	bl	dc0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   171f2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   171f6:	2101      	movs	r1, #1
   171f8:	f7e9 fe0a 	bl	e10 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   171fc:	2308      	movs	r3, #8
   171fe:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   17200:	2304      	movs	r3, #4
   17202:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   17204:	1d3b      	adds	r3, r7, #4
   17206:	f44f 6000 	mov.w	r0, #2048	; 0x800
   1720a:	f2c4 0001 	movt	r0, #16385	; 0x4001
   1720e:	4619      	mov	r1, r3
   17210:	f7e9 ffaa 	bl	1168 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   17214:	2304      	movs	r3, #4
   17216:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   17218:	2303      	movs	r3, #3
   1721a:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   1721c:	2318      	movs	r3, #24
   1721e:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   17220:	1d3b      	adds	r3, r7, #4
   17222:	f44f 6000 	mov.w	r0, #2048	; 0x800
   17226:	f2c4 0001 	movt	r0, #16385	; 0x4001
   1722a:	4619      	mov	r1, r3
   1722c:	f7e9 ff9c 	bl	1168 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
   17230:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   17234:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   17236:	2300      	movs	r3, #0
   17238:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
   1723a:	2300      	movs	r3, #0
   1723c:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
   1723e:	2300      	movs	r3, #0
   17240:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   17242:	2300      	movs	r3, #0
   17244:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   17246:	230c      	movs	r3, #12
   17248:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
   1724a:	f107 0308 	add.w	r3, r7, #8
   1724e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17252:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17256:	4619      	mov	r1, r3
   17258:	f7ea fa6e 	bl	1738 <USART_Init>
    USART_Cmd(USART2, ENABLE);
   1725c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17260:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17264:	2101      	movs	r1, #1
   17266:	f7ea fb85 	bl	1974 <USART_Cmd>
}
   1726a:	3718      	adds	r7, #24
   1726c:	46bd      	mov	sp, r7
   1726e:	bd80      	pop	{r7, pc}

00017270 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
   17270:	b580      	push	{r7, lr}
   17272:	b082      	sub	sp, #8
   17274:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
   17276:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   1727a:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1727e:	f240 7127 	movw	r1, #1831	; 0x727
   17282:	2200      	movs	r2, #0
   17284:	f7ea fb96 	bl	19b4 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   17288:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   1728c:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17290:	f240 5125 	movw	r1, #1317	; 0x525
   17294:	2201      	movs	r2, #1
   17296:	f7ea fb8d 	bl	19b4 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   1729a:	2326      	movs	r3, #38	; 0x26
   1729c:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   1729e:	2300      	movs	r3, #0
   172a0:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   172a2:	2301      	movs	r3, #1
   172a4:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   172a6:	1d3b      	adds	r3, r7, #4
   172a8:	4618      	mov	r0, r3
   172aa:	f7ea ffd1 	bl	2250 <NVIC_Init>
}
   172ae:	3708      	adds	r7, #8
   172b0:	46bd      	mov	sp, r7
   172b2:	bd80      	pop	{r7, pc}

000172b4 <enable_rs232>:

void enable_rs232(void)
{
   172b4:	b580      	push	{r7, lr}
   172b6:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
   172b8:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   172bc:	f2c4 0000 	movt	r0, #16384	; 0x4000
   172c0:	2101      	movs	r1, #1
   172c2:	f7ea fb57 	bl	1974 <USART_Cmd>
}
   172c6:	bd80      	pop	{r7, pc}

000172c8 <send_byte>:

void send_byte(uint8_t b)
{
   172c8:	b580      	push	{r7, lr}
   172ca:	b082      	sub	sp, #8
   172cc:	af00      	add	r7, sp, #0
   172ce:	4603      	mov	r3, r0
   172d0:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
   172d2:	bf00      	nop
   172d4:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   172d8:	f2c4 0000 	movt	r0, #16384	; 0x4000
   172dc:	2180      	movs	r1, #128	; 0x80
   172de:	f7ea fdb5 	bl	1e4c <USART_GetFlagStatus>
   172e2:	4603      	mov	r3, r0
   172e4:	2b00      	cmp	r3, #0
   172e6:	d0f5      	beq.n	172d4 <send_byte+0xc>
    
    GPIOC->ODR ^= 0x00001000;
   172e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   172ec:	f2c4 0301 	movt	r3, #16385	; 0x4001
   172f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   172f4:	f2c4 0201 	movt	r2, #16385	; 0x4001
   172f8:	68d2      	ldr	r2, [r2, #12]
   172fa:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
   172fe:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
   17300:	79fb      	ldrb	r3, [r7, #7]
   17302:	b29b      	uxth	r3, r3
   17304:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17308:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1730c:	4619      	mov	r1, r3
   1730e:	f7ea fc51 	bl	1bb4 <USART_SendData>
}
   17312:	3708      	adds	r7, #8
   17314:	46bd      	mov	sp, r7
   17316:	bd80      	pop	{r7, pc}

00017318 <send_num>:
/**
 *  can print a num which is smaller than 10
 */

void send_num(uint8_t b)
{
   17318:	b580      	push	{r7, lr}
   1731a:	b082      	sub	sp, #8
   1731c:	af00      	add	r7, sp, #0
   1731e:	4603      	mov	r3, r0
   17320:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
   17322:	79fb      	ldrb	r3, [r7, #7]
   17324:	3330      	adds	r3, #48	; 0x30
   17326:	b2db      	uxtb	r3, r3
   17328:	4618      	mov	r0, r3
   1732a:	f7ff ffcd 	bl	172c8 <send_byte>
}
   1732e:	3708      	adds	r7, #8
   17330:	46bd      	mov	sp, r7
   17332:	bd80      	pop	{r7, pc}

00017334 <vPrintString>:
 * print a string
 *
 * */

void vPrintString( const char * string)
{
   17334:	b580      	push	{r7, lr}
   17336:	b084      	sub	sp, #16
   17338:	af00      	add	r7, sp, #0
   1733a:	6078      	str	r0, [r7, #4]
    int i = 0;
   1733c:	2300      	movs	r3, #0
   1733e:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
   17340:	e009      	b.n	17356 <vPrintString+0x22>
    {
        send_byte(string[i]);
   17342:	68fb      	ldr	r3, [r7, #12]
   17344:	687a      	ldr	r2, [r7, #4]
   17346:	4413      	add	r3, r2
   17348:	781b      	ldrb	r3, [r3, #0]
   1734a:	4618      	mov	r0, r3
   1734c:	f7ff ffbc 	bl	172c8 <send_byte>
        i++;
   17350:	68fb      	ldr	r3, [r7, #12]
   17352:	3301      	adds	r3, #1
   17354:	60fb      	str	r3, [r7, #12]
 * */

void vPrintString( const char * string)
{
    int i = 0;
    while(string[i] != '\0')
   17356:	68fb      	ldr	r3, [r7, #12]
   17358:	687a      	ldr	r2, [r7, #4]
   1735a:	4413      	add	r3, r2
   1735c:	781b      	ldrb	r3, [r3, #0]
   1735e:	2b00      	cmp	r3, #0
   17360:	d1ef      	bne.n	17342 <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
   17362:	3710      	adds	r7, #16
   17364:	46bd      	mov	sp, r7
   17366:	bd80      	pop	{r7, pc}

00017368 <vPrintNumber>:
/*
 * print a number which is less than 10
 *
 * */
void vPrintNumber( const long c_num)
{
   17368:	b580      	push	{r7, lr}
   1736a:	b08a      	sub	sp, #40	; 0x28
   1736c:	af00      	add	r7, sp, #0
   1736e:	6078      	str	r0, [r7, #4]
    char time[15], tmp;
    unsigned int i, count = 0;
   17370:	2300      	movs	r3, #0
   17372:	623b      	str	r3, [r7, #32]
    long num = c_num;
   17374:	687b      	ldr	r3, [r7, #4]
   17376:	61fb      	str	r3, [r7, #28]

    if(num == 0)
   17378:	69fb      	ldr	r3, [r7, #28]
   1737a:	2b00      	cmp	r3, #0
   1737c:	d106      	bne.n	1738c <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
   1737e:	f648 202c 	movw	r0, #35372	; 0x8a2c
   17382:	f2c0 0001 	movt	r0, #1
   17386:	f7ff ffd5 	bl	17334 <vPrintString>
   1738a:	e062      	b.n	17452 <vPrintNumber+0xea>
    }
    else
    {
        // transform long into char * 
        while( num  )
   1738c:	e024      	b.n	173d8 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
   1738e:	69f9      	ldr	r1, [r7, #28]
   17390:	f246 6367 	movw	r3, #26215	; 0x6667
   17394:	f2c6 6366 	movt	r3, #26214	; 0x6666
   17398:	fb83 2301 	smull	r2, r3, r3, r1
   1739c:	109a      	asrs	r2, r3, #2
   1739e:	17cb      	asrs	r3, r1, #31
   173a0:	1ad2      	subs	r2, r2, r3
   173a2:	4613      	mov	r3, r2
   173a4:	009b      	lsls	r3, r3, #2
   173a6:	4413      	add	r3, r2
   173a8:	005b      	lsls	r3, r3, #1
   173aa:	1aca      	subs	r2, r1, r3
   173ac:	b2d3      	uxtb	r3, r2
   173ae:	3330      	adds	r3, #48	; 0x30
   173b0:	b2da      	uxtb	r2, r3
   173b2:	f107 010c 	add.w	r1, r7, #12
   173b6:	6a3b      	ldr	r3, [r7, #32]
   173b8:	440b      	add	r3, r1
   173ba:	701a      	strb	r2, [r3, #0]
            count ++;
   173bc:	6a3b      	ldr	r3, [r7, #32]
   173be:	3301      	adds	r3, #1
   173c0:	623b      	str	r3, [r7, #32]
            num /= 10;
   173c2:	69fa      	ldr	r2, [r7, #28]
   173c4:	f246 6367 	movw	r3, #26215	; 0x6667
   173c8:	f2c6 6366 	movt	r3, #26214	; 0x6666
   173cc:	fb83 1302 	smull	r1, r3, r3, r2
   173d0:	1099      	asrs	r1, r3, #2
   173d2:	17d3      	asrs	r3, r2, #31
   173d4:	1acb      	subs	r3, r1, r3
   173d6:	61fb      	str	r3, [r7, #28]
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num  )
   173d8:	69fb      	ldr	r3, [r7, #28]
   173da:	2b00      	cmp	r3, #0
   173dc:	d1d7      	bne.n	1738e <vPrintNumber+0x26>
            time[count] = num%10 +'0';
            count ++;
            num /= 10;

        }
        time[count] = '\0';
   173de:	f107 020c 	add.w	r2, r7, #12
   173e2:	6a3b      	ldr	r3, [r7, #32]
   173e4:	4413      	add	r3, r2
   173e6:	2200      	movs	r2, #0
   173e8:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i )
   173ea:	2300      	movs	r3, #0
   173ec:	627b      	str	r3, [r7, #36]	; 0x24
   173ee:	e020      	b.n	17432 <vPrintNumber+0xca>
        {
            tmp = time[i];
   173f0:	f107 020c 	add.w	r2, r7, #12
   173f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   173f6:	4413      	add	r3, r2
   173f8:	781b      	ldrb	r3, [r3, #0]
   173fa:	76fb      	strb	r3, [r7, #27]
            time[i] = time[count-1-i];
   173fc:	6a3a      	ldr	r2, [r7, #32]
   173fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17400:	1ad3      	subs	r3, r2, r3
   17402:	3b01      	subs	r3, #1
   17404:	f107 0228 	add.w	r2, r7, #40	; 0x28
   17408:	4413      	add	r3, r2
   1740a:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
   1740e:	f107 010c 	add.w	r1, r7, #12
   17412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17414:	440b      	add	r3, r1
   17416:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
   17418:	6a3a      	ldr	r2, [r7, #32]
   1741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1741c:	1ad3      	subs	r3, r2, r3
   1741e:	3b01      	subs	r3, #1
   17420:	f107 0128 	add.w	r1, r7, #40	; 0x28
   17424:	440b      	add	r3, r1
   17426:	7efa      	ldrb	r2, [r7, #27]
   17428:	f803 2c1c 	strb.w	r2, [r3, #-28]

        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i )
   1742c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1742e:	3301      	adds	r3, #1
   17430:	627b      	str	r3, [r7, #36]	; 0x24
   17432:	6a3b      	ldr	r3, [r7, #32]
   17434:	085a      	lsrs	r2, r3, #1
   17436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17438:	429a      	cmp	r2, r3
   1743a:	d8d9      	bhi.n	173f0 <vPrintNumber+0x88>
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;

        }
        vPrintString(time);
   1743c:	f107 030c 	add.w	r3, r7, #12
   17440:	4618      	mov	r0, r3
   17442:	f7ff ff77 	bl	17334 <vPrintString>
        vPrintString("\n\r");
   17446:	f648 2030 	movw	r0, #35376	; 0x8a30
   1744a:	f2c0 0001 	movt	r0, #1
   1744e:	f7ff ff71 	bl	17334 <vPrintString>
    }
}
   17452:	3728      	adds	r7, #40	; 0x28
   17454:	46bd      	mov	sp, r7
   17456:	bd80      	pop	{r7, pc}

00017458 <vInitInitialise>:

extern xTaskComplete[NUMBEROFTASK];


void vInitInitialise()
{
   17458:	b480      	push	{r7}
   1745a:	b083      	sub	sp, #12
   1745c:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    for(i = 0; i < NUMBEROFTASK; ++ i)
   1745e:	2300      	movs	r3, #0
   17460:	607b      	str	r3, [r7, #4]
   17462:	e00a      	b.n	1747a <vInitInitialise+0x22>
    {
        IS_INIT[i] = 0;
   17464:	f24c 7374 	movw	r3, #51060	; 0xc774
   17468:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1746c:	687a      	ldr	r2, [r7, #4]
   1746e:	2100      	movs	r1, #0
   17470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


void vInitInitialise()
{
    portBASE_TYPE i;
    for(i = 0; i < NUMBEROFTASK; ++ i)
   17474:	687b      	ldr	r3, [r7, #4]
   17476:	3301      	adds	r3, #1
   17478:	607b      	str	r3, [r7, #4]
   1747a:	687b      	ldr	r3, [r7, #4]
   1747c:	2b0c      	cmp	r3, #12
   1747e:	ddf1      	ble.n	17464 <vInitInitialise+0xc>
    {
        IS_INIT[i] = 0;
    }
}
   17480:	370c      	adds	r7, #12
   17482:	46bd      	mov	sp, r7
   17484:	f85d 7b04 	ldr.w	r7, [sp], #4
   17488:	4770      	bx	lr
   1748a:	bf00      	nop

0001748c <main>:

#define SERVANT_STACK_SIZE 128 
int main(void)
{
   1748c:	b590      	push	{r4, r7, lr}
   1748e:	b089      	sub	sp, #36	; 0x24
   17490:	af04      	add	r7, sp, #16
    init_led();
   17492:	f7ff fe45 	bl	17120 <init_led>
    init_rs232();
   17496:	f7ff fea5 	bl	171e4 <init_rs232>
    enable_rs232_interrupts();
   1749a:	f7ff fee9 	bl	17270 <enable_rs232_interrupts>
    enable_rs232();
   1749e:	f7ff ff09 	bl	172b4 <enable_rs232>

    //vTaskCompleteInitialise();
    vInitInitialise();
   174a2:	f7ff ffd9 	bl	17458 <vInitInitialise>
    vSemaphoreInitialise();
   174a6:	f7eb fdf1 	bl	308c <vSemaphoreInitialise>
    vParameterInitialise();
   174aa:	f7eb fe2f 	bl	310c <vParameterInitialise>
    vInitialiseEventLists(NUMBEROFEVENTS);  // parameter from app.h 
   174ae:	200d      	movs	r0, #13
   174b0:	f7eb fa2a 	bl	2908 <vInitialiseEventLists>
    portBASE_TYPE i,j;
    portBASE_TYPE flag = 0;
   174b4:	2300      	movs	r3, #0
   174b6:	607b      	str	r3, [r7, #4]

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, (void *)&pvParameters[NUMBEROFSERVANT-1],tskIDLE_PRIORITY + 1, &xTaskOfHandle[NUMBEROFSERVANT-1]);
   174b8:	2301      	movs	r3, #1
   174ba:	9300      	str	r3, [sp, #0]
   174bc:	4b41      	ldr	r3, [pc, #260]	; (175c4 <main+0x138>)
   174be:	9301      	str	r3, [sp, #4]
   174c0:	2300      	movs	r3, #0
   174c2:	9302      	str	r3, [sp, #8]
   174c4:	2300      	movs	r3, #0
   174c6:	9303      	str	r3, [sp, #12]
   174c8:	f643 2011 	movw	r0, #14865	; 0x3a11
   174cc:	f2c0 0000 	movt	r0, #0
   174d0:	f648 2134 	movw	r1, #35380	; 0x8a34
   174d4:	f2c0 0101 	movt	r1, #1
   174d8:	2280      	movs	r2, #128	; 0x80
   174da:	4b3b      	ldr	r3, [pc, #236]	; (175c8 <main+0x13c>)
   174dc:	f7ed fa04 	bl	48e8 <xTaskGenericCreate>

    for( i = 0; i < NUMBEROFSERVANT-1; ++ i )
   174e0:	2300      	movs	r3, #0
   174e2:	60fb      	str	r3, [r7, #12]
   174e4:	e064      	b.n	175b0 <main+0x124>
    {
        for(j = 0; j < NUMBEROFTASK; ++ j)
   174e6:	2300      	movs	r3, #0
   174e8:	60bb      	str	r3, [r7, #8]
   174ea:	e00f      	b.n	1750c <main+0x80>
        {
            if( i == xSensorOfTask[j] )
   174ec:	f240 0360 	movw	r3, #96	; 0x60
   174f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   174f4:	68ba      	ldr	r2, [r7, #8]
   174f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   174fa:	68fb      	ldr	r3, [r7, #12]
   174fc:	429a      	cmp	r2, r3
   174fe:	d102      	bne.n	17506 <main+0x7a>
            {
                flag = 1;  // sensor 
   17500:	2301      	movs	r3, #1
   17502:	607b      	str	r3, [r7, #4]
                break;
   17504:	e005      	b.n	17512 <main+0x86>

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, (void *)&pvParameters[NUMBEROFSERVANT-1],tskIDLE_PRIORITY + 1, &xTaskOfHandle[NUMBEROFSERVANT-1]);

    for( i = 0; i < NUMBEROFSERVANT-1; ++ i )
    {
        for(j = 0; j < NUMBEROFTASK; ++ j)
   17506:	68bb      	ldr	r3, [r7, #8]
   17508:	3301      	adds	r3, #1
   1750a:	60bb      	str	r3, [r7, #8]
   1750c:	68bb      	ldr	r3, [r7, #8]
   1750e:	2b0c      	cmp	r3, #12
   17510:	ddec      	ble.n	174ec <main+0x60>
                flag = 1;  // sensor 
                break;
            }
        }
        // create sensor 
        if(flag == 1)
   17512:	687b      	ldr	r3, [r7, #4]
   17514:	2b01      	cmp	r3, #1
   17516:	d125      	bne.n	17564 <main+0xd8>
        {
            flag = 0; 
   17518:	2300      	movs	r3, #0
   1751a:	607b      	str	r3, [r7, #4]
            xTaskCreate( vSensor, "sensor", SERVANT_STACK_SIZE, (void *)&pvParameters[i], tskIDLE_PRIORITY + 2, &xTaskOfHandle[i] );
   1751c:	68fb      	ldr	r3, [r7, #12]
   1751e:	222c      	movs	r2, #44	; 0x2c
   17520:	fb02 f203 	mul.w	r2, r2, r3
   17524:	f240 5378 	movw	r3, #1400	; 0x578
   17528:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1752c:	18d4      	adds	r4, r2, r3
   1752e:	68fb      	ldr	r3, [r7, #12]
   17530:	009a      	lsls	r2, r3, #2
   17532:	f640 4308 	movw	r3, #3080	; 0xc08
   17536:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1753a:	4413      	add	r3, r2
   1753c:	2202      	movs	r2, #2
   1753e:	9200      	str	r2, [sp, #0]
   17540:	9301      	str	r3, [sp, #4]
   17542:	2300      	movs	r3, #0
   17544:	9302      	str	r3, [sp, #8]
   17546:	2300      	movs	r3, #0
   17548:	9303      	str	r3, [sp, #12]
   1754a:	f243 5085 	movw	r0, #13701	; 0x3585
   1754e:	f2c0 0000 	movt	r0, #0
   17552:	f648 2140 	movw	r1, #35392	; 0x8a40
   17556:	f2c0 0101 	movt	r1, #1
   1755a:	2280      	movs	r2, #128	; 0x80
   1755c:	4623      	mov	r3, r4
   1755e:	f7ed f9c3 	bl	48e8 <xTaskGenericCreate>
   17562:	e022      	b.n	175aa <main+0x11e>
        }
        else  // create servant
        {
            xTaskCreate( vServant, "servant", SERVANT_STACK_SIZE, (void *)&pvParameters[i], tskIDLE_PRIORITY + 2, &xTaskOfHandle[i] );
   17564:	68fb      	ldr	r3, [r7, #12]
   17566:	222c      	movs	r2, #44	; 0x2c
   17568:	fb02 f203 	mul.w	r2, r2, r3
   1756c:	f240 5378 	movw	r3, #1400	; 0x578
   17570:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17574:	18d4      	adds	r4, r2, r3
   17576:	68fb      	ldr	r3, [r7, #12]
   17578:	009a      	lsls	r2, r3, #2
   1757a:	f640 4308 	movw	r3, #3080	; 0xc08
   1757e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17582:	4413      	add	r3, r2
   17584:	2202      	movs	r2, #2
   17586:	9200      	str	r2, [sp, #0]
   17588:	9301      	str	r3, [sp, #4]
   1758a:	2300      	movs	r3, #0
   1758c:	9302      	str	r3, [sp, #8]
   1758e:	2300      	movs	r3, #0
   17590:	9303      	str	r3, [sp, #12]
   17592:	f243 70f1 	movw	r0, #14321	; 0x37f1
   17596:	f2c0 0000 	movt	r0, #0
   1759a:	f648 2148 	movw	r1, #35400	; 0x8a48
   1759e:	f2c0 0101 	movt	r1, #1
   175a2:	2280      	movs	r2, #128	; 0x80
   175a4:	4623      	mov	r3, r4
   175a6:	f7ed f99f 	bl	48e8 <xTaskGenericCreate>
    portBASE_TYPE i,j;
    portBASE_TYPE flag = 0;

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, (void *)&pvParameters[NUMBEROFSERVANT-1],tskIDLE_PRIORITY + 1, &xTaskOfHandle[NUMBEROFSERVANT-1]);

    for( i = 0; i < NUMBEROFSERVANT-1; ++ i )
   175aa:	68fb      	ldr	r3, [r7, #12]
   175ac:	3301      	adds	r3, #1
   175ae:	60fb      	str	r3, [r7, #12]
   175b0:	68fb      	ldr	r3, [r7, #12]
   175b2:	2b21      	cmp	r3, #33	; 0x21
   175b4:	dd97      	ble.n	174e6 <main+0x5a>
        {
            xTaskCreate( vServant, "servant", SERVANT_STACK_SIZE, (void *)&pvParameters[i], tskIDLE_PRIORITY + 2, &xTaskOfHandle[i] );
        }
    }
    /* Start running the task. */
    vTaskStartScheduler();
   175b6:	f7ed fd15 	bl	4fe4 <vTaskStartScheduler>

    return 0;
   175ba:	2300      	movs	r3, #0
}
   175bc:	4618      	mov	r0, r3
   175be:	3714      	adds	r7, #20
   175c0:	46bd      	mov	sp, r7
   175c2:	bd90      	pop	{r4, r7, pc}
   175c4:	20000c90 	.word	0x20000c90
   175c8:	20000b50 	.word	0x20000b50

000175cc <myTraceCreate>:

void myTraceCreate      (){
   175cc:	b480      	push	{r7}
   175ce:	af00      	add	r7, sp, #0
}
   175d0:	46bd      	mov	sp, r7
   175d2:	f85d 7b04 	ldr.w	r7, [sp], #4
   175d6:	4770      	bx	lr

000175d8 <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
   175d8:	b480      	push	{r7}
   175da:	af00      	add	r7, sp, #0
}
   175dc:	46bd      	mov	sp, r7
   175de:	f85d 7b04 	ldr.w	r7, [sp], #4
   175e2:	4770      	bx	lr

000175e4 <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
   175e4:	b480      	push	{r7}
   175e6:	af00      	add	r7, sp, #0
}
   175e8:	46bd      	mov	sp, r7
   175ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   175ee:	4770      	bx	lr

000175f0 <vApplicationTickHook>:
 *
 * if there is any task need to be triggered at this time,
 * tick hook function would send semaphore to them.
 * */
void vApplicationTickHook( void )
{
   175f0:	b580      	push	{r7, lr}
   175f2:	b082      	sub	sp, #8
   175f4:	af00      	add	r7, sp, #0
    portTickType xCurrentTime = xTaskGetTickCount();
   175f6:	f7ed fddf 	bl	51b8 <xTaskGetTickCount>
   175fa:	6038      	str	r0, [r7, #0]
    portBASE_TYPE i;
    /* init task */
    if(xCurrentTime > 0 && xCurrentTime < 2501)
   175fc:	683b      	ldr	r3, [r7, #0]
   175fe:	2b00      	cmp	r3, #0
   17600:	d040      	beq.n	17684 <vApplicationTickHook+0x94>
   17602:	683a      	ldr	r2, [r7, #0]
   17604:	f640 13c4 	movw	r3, #2500	; 0x9c4
   17608:	429a      	cmp	r2, r3
   1760a:	d83b      	bhi.n	17684 <vApplicationTickHook+0x94>
    {
        for(i = 0; i < NUMBEROFTASK; ++i)
   1760c:	2300      	movs	r3, #0
   1760e:	607b      	str	r3, [r7, #4]
   17610:	e035      	b.n	1767e <vApplicationTickHook+0x8e>
        {
            if( IS_INIT[i] == 0 && xCurrentTime % xPeriodOfTask[i] == 0 )
   17612:	f24c 7374 	movw	r3, #51060	; 0xc774
   17616:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1761a:	687a      	ldr	r2, [r7, #4]
   1761c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   17620:	2b00      	cmp	r3, #0
   17622:	d129      	bne.n	17678 <vApplicationTickHook+0x88>
   17624:	f240 032c 	movw	r3, #44	; 0x2c
   17628:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1762c:	687a      	ldr	r2, [r7, #4]
   1762e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   17632:	683b      	ldr	r3, [r7, #0]
   17634:	fbb3 f1f2 	udiv	r1, r3, r2
   17638:	fb02 f201 	mul.w	r2, r2, r1
   1763c:	1a9b      	subs	r3, r3, r2
   1763e:	2b00      	cmp	r3, #0
   17640:	d11a      	bne.n	17678 <vApplicationTickHook+0x88>
            {
                IS_INIT[i] = 1;
   17642:	f24c 7374 	movw	r3, #51060	; 0xc774
   17646:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1764a:	687a      	ldr	r2, [r7, #4]
   1764c:	2101      	movs	r1, #1
   1764e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xSemaphoreGive( xBinarySemaphore[xSensorOfTask[i]] );
   17652:	f240 0360 	movw	r3, #96	; 0x60
   17656:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1765a:	687a      	ldr	r2, [r7, #4]
   1765c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   17660:	f640 337c 	movw	r3, #2940	; 0xb7c
   17664:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1766c:	4618      	mov	r0, r3
   1766e:	2100      	movs	r1, #0
   17670:	2200      	movs	r2, #0
   17672:	2300      	movs	r3, #0
   17674:	f7ec fe26 	bl	42c4 <xQueueGenericSend>
    portTickType xCurrentTime = xTaskGetTickCount();
    portBASE_TYPE i;
    /* init task */
    if(xCurrentTime > 0 && xCurrentTime < 2501)
    {
        for(i = 0; i < NUMBEROFTASK; ++i)
   17678:	687b      	ldr	r3, [r7, #4]
   1767a:	3301      	adds	r3, #1
   1767c:	607b      	str	r3, [r7, #4]
   1767e:	687b      	ldr	r3, [r7, #4]
   17680:	2b0c      	cmp	r3, #12
   17682:	ddc6      	ble.n	17612 <vApplicationTickHook+0x22>
    }
    
    // R-Servant will be suspend when no events need to be proceeded.
    // As a result, we need to send semaphore to R-Servant to triggered it processing events 
    // when time meeting the start time of every task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
   17684:	f240 032c 	movw	r3, #44	; 0x2c
   17688:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1768c:	681b      	ldr	r3, [r3, #0]
   1768e:	005a      	lsls	r2, r3, #1
   17690:	683b      	ldr	r3, [r7, #0]
   17692:	429a      	cmp	r2, r3
   17694:	d83f      	bhi.n	17716 <vApplicationTickHook+0x126>
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
   17696:	f240 032c 	movw	r3, #44	; 0x2c
   1769a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1769e:	681a      	ldr	r2, [r3, #0]
   176a0:	683b      	ldr	r3, [r7, #0]
   176a2:	fbb3 f1f2 	udiv	r1, r3, r2
   176a6:	fb02 f201 	mul.w	r2, r2, r1
   176aa:	1a9b      	subs	r3, r3, r2
   176ac:	2b00      	cmp	r3, #0
   176ae:	d026      	beq.n	176fe <vApplicationTickHook+0x10e>
            xCurrentTime % xPeriodOfTask[2] == 0 ||
   176b0:	f240 032c 	movw	r3, #44	; 0x2c
   176b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   176b8:	689a      	ldr	r2, [r3, #8]
   176ba:	683b      	ldr	r3, [r7, #0]
   176bc:	fbb3 f1f2 	udiv	r1, r3, r2
   176c0:	fb02 f201 	mul.w	r2, r2, r1
   176c4:	1a9b      	subs	r3, r3, r2
    // R-Servant will be suspend when no events need to be proceeded.
    // As a result, we need to send semaphore to R-Servant to triggered it processing events 
    // when time meeting the start time of every task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
   176c6:	2b00      	cmp	r3, #0
   176c8:	d019      	beq.n	176fe <vApplicationTickHook+0x10e>
            xCurrentTime % xPeriodOfTask[2] == 0 ||
            xCurrentTime % xPeriodOfTask[8] == 0 ||
   176ca:	f240 032c 	movw	r3, #44	; 0x2c
   176ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   176d2:	6a1a      	ldr	r2, [r3, #32]
   176d4:	683b      	ldr	r3, [r7, #0]
   176d6:	fbb3 f1f2 	udiv	r1, r3, r2
   176da:	fb02 f201 	mul.w	r2, r2, r1
   176de:	1a9b      	subs	r3, r3, r2
    // As a result, we need to send semaphore to R-Servant to triggered it processing events 
    // when time meeting the start time of every task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
            xCurrentTime % xPeriodOfTask[2] == 0 ||
   176e0:	2b00      	cmp	r3, #0
   176e2:	d00c      	beq.n	176fe <vApplicationTickHook+0x10e>
            xCurrentTime % xPeriodOfTask[8] == 0 ||
            xCurrentTime % xPeriodOfTask[12] == 0)
   176e4:	f240 032c 	movw	r3, #44	; 0x2c
   176e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   176ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   176ee:	683b      	ldr	r3, [r7, #0]
   176f0:	fbb3 f1f2 	udiv	r1, r3, r2
   176f4:	fb02 f201 	mul.w	r2, r2, r1
   176f8:	1a9b      	subs	r3, r3, r2
    // when time meeting the start time of every task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
            xCurrentTime % xPeriodOfTask[2] == 0 ||
            xCurrentTime % xPeriodOfTask[8] == 0 ||
   176fa:	2b00      	cmp	r3, #0
   176fc:	d10b      	bne.n	17716 <vApplicationTickHook+0x126>
            xCurrentTime % xPeriodOfTask[12] == 0)
        {
           xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT - 1] ); 
   176fe:	f640 337c 	movw	r3, #2940	; 0xb7c
   17702:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   1770a:	4618      	mov	r0, r3
   1770c:	2100      	movs	r1, #0
   1770e:	2200      	movs	r2, #0
   17710:	2300      	movs	r3, #0
   17712:	f7ec fdd7 	bl	42c4 <xQueueGenericSend>
        }
    }
}
   17716:	3708      	adds	r7, #8
   17718:	46bd      	mov	sp, r7
   1771a:	bd80      	pop	{r7, pc}

0001771c <__aeabi_drsub>:
   1771c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   17720:	e002      	b.n	17728 <__adddf3>
   17722:	bf00      	nop

00017724 <__aeabi_dsub>:
   17724:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00017728 <__adddf3>:
   17728:	b530      	push	{r4, r5, lr}
   1772a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1772e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   17732:	ea94 0f05 	teq	r4, r5
   17736:	bf08      	it	eq
   17738:	ea90 0f02 	teqeq	r0, r2
   1773c:	bf1f      	itttt	ne
   1773e:	ea54 0c00 	orrsne.w	ip, r4, r0
   17742:	ea55 0c02 	orrsne.w	ip, r5, r2
   17746:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1774a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1774e:	f000 80e2 	beq.w	17916 <__adddf3+0x1ee>
   17752:	ea4f 5454 	mov.w	r4, r4, lsr #21
   17756:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1775a:	bfb8      	it	lt
   1775c:	426d      	neglt	r5, r5
   1775e:	dd0c      	ble.n	1777a <__adddf3+0x52>
   17760:	442c      	add	r4, r5
   17762:	ea80 0202 	eor.w	r2, r0, r2
   17766:	ea81 0303 	eor.w	r3, r1, r3
   1776a:	ea82 0000 	eor.w	r0, r2, r0
   1776e:	ea83 0101 	eor.w	r1, r3, r1
   17772:	ea80 0202 	eor.w	r2, r0, r2
   17776:	ea81 0303 	eor.w	r3, r1, r3
   1777a:	2d36      	cmp	r5, #54	; 0x36
   1777c:	bf88      	it	hi
   1777e:	bd30      	pophi	{r4, r5, pc}
   17780:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   17784:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17788:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1778c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   17790:	d002      	beq.n	17798 <__adddf3+0x70>
   17792:	4240      	negs	r0, r0
   17794:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17798:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1779c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   177a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   177a4:	d002      	beq.n	177ac <__adddf3+0x84>
   177a6:	4252      	negs	r2, r2
   177a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   177ac:	ea94 0f05 	teq	r4, r5
   177b0:	f000 80a7 	beq.w	17902 <__adddf3+0x1da>
   177b4:	f1a4 0401 	sub.w	r4, r4, #1
   177b8:	f1d5 0e20 	rsbs	lr, r5, #32
   177bc:	db0d      	blt.n	177da <__adddf3+0xb2>
   177be:	fa02 fc0e 	lsl.w	ip, r2, lr
   177c2:	fa22 f205 	lsr.w	r2, r2, r5
   177c6:	1880      	adds	r0, r0, r2
   177c8:	f141 0100 	adc.w	r1, r1, #0
   177cc:	fa03 f20e 	lsl.w	r2, r3, lr
   177d0:	1880      	adds	r0, r0, r2
   177d2:	fa43 f305 	asr.w	r3, r3, r5
   177d6:	4159      	adcs	r1, r3
   177d8:	e00e      	b.n	177f8 <__adddf3+0xd0>
   177da:	f1a5 0520 	sub.w	r5, r5, #32
   177de:	f10e 0e20 	add.w	lr, lr, #32
   177e2:	2a01      	cmp	r2, #1
   177e4:	fa03 fc0e 	lsl.w	ip, r3, lr
   177e8:	bf28      	it	cs
   177ea:	f04c 0c02 	orrcs.w	ip, ip, #2
   177ee:	fa43 f305 	asr.w	r3, r3, r5
   177f2:	18c0      	adds	r0, r0, r3
   177f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   177f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   177fc:	d507      	bpl.n	1780e <__adddf3+0xe6>
   177fe:	f04f 0e00 	mov.w	lr, #0
   17802:	f1dc 0c00 	rsbs	ip, ip, #0
   17806:	eb7e 0000 	sbcs.w	r0, lr, r0
   1780a:	eb6e 0101 	sbc.w	r1, lr, r1
   1780e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   17812:	d31b      	bcc.n	1784c <__adddf3+0x124>
   17814:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   17818:	d30c      	bcc.n	17834 <__adddf3+0x10c>
   1781a:	0849      	lsrs	r1, r1, #1
   1781c:	ea5f 0030 	movs.w	r0, r0, rrx
   17820:	ea4f 0c3c 	mov.w	ip, ip, rrx
   17824:	f104 0401 	add.w	r4, r4, #1
   17828:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1782c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   17830:	f080 809a 	bcs.w	17968 <__adddf3+0x240>
   17834:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   17838:	bf08      	it	eq
   1783a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1783e:	f150 0000 	adcs.w	r0, r0, #0
   17842:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17846:	ea41 0105 	orr.w	r1, r1, r5
   1784a:	bd30      	pop	{r4, r5, pc}
   1784c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   17850:	4140      	adcs	r0, r0
   17852:	eb41 0101 	adc.w	r1, r1, r1
   17856:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1785a:	f1a4 0401 	sub.w	r4, r4, #1
   1785e:	d1e9      	bne.n	17834 <__adddf3+0x10c>
   17860:	f091 0f00 	teq	r1, #0
   17864:	bf04      	itt	eq
   17866:	4601      	moveq	r1, r0
   17868:	2000      	moveq	r0, #0
   1786a:	fab1 f381 	clz	r3, r1
   1786e:	bf08      	it	eq
   17870:	3320      	addeq	r3, #32
   17872:	f1a3 030b 	sub.w	r3, r3, #11
   17876:	f1b3 0220 	subs.w	r2, r3, #32
   1787a:	da0c      	bge.n	17896 <__adddf3+0x16e>
   1787c:	320c      	adds	r2, #12
   1787e:	dd08      	ble.n	17892 <__adddf3+0x16a>
   17880:	f102 0c14 	add.w	ip, r2, #20
   17884:	f1c2 020c 	rsb	r2, r2, #12
   17888:	fa01 f00c 	lsl.w	r0, r1, ip
   1788c:	fa21 f102 	lsr.w	r1, r1, r2
   17890:	e00c      	b.n	178ac <__adddf3+0x184>
   17892:	f102 0214 	add.w	r2, r2, #20
   17896:	bfd8      	it	le
   17898:	f1c2 0c20 	rsble	ip, r2, #32
   1789c:	fa01 f102 	lsl.w	r1, r1, r2
   178a0:	fa20 fc0c 	lsr.w	ip, r0, ip
   178a4:	bfdc      	itt	le
   178a6:	ea41 010c 	orrle.w	r1, r1, ip
   178aa:	4090      	lslle	r0, r2
   178ac:	1ae4      	subs	r4, r4, r3
   178ae:	bfa2      	ittt	ge
   178b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   178b4:	4329      	orrge	r1, r5
   178b6:	bd30      	popge	{r4, r5, pc}
   178b8:	ea6f 0404 	mvn.w	r4, r4
   178bc:	3c1f      	subs	r4, #31
   178be:	da1c      	bge.n	178fa <__adddf3+0x1d2>
   178c0:	340c      	adds	r4, #12
   178c2:	dc0e      	bgt.n	178e2 <__adddf3+0x1ba>
   178c4:	f104 0414 	add.w	r4, r4, #20
   178c8:	f1c4 0220 	rsb	r2, r4, #32
   178cc:	fa20 f004 	lsr.w	r0, r0, r4
   178d0:	fa01 f302 	lsl.w	r3, r1, r2
   178d4:	ea40 0003 	orr.w	r0, r0, r3
   178d8:	fa21 f304 	lsr.w	r3, r1, r4
   178dc:	ea45 0103 	orr.w	r1, r5, r3
   178e0:	bd30      	pop	{r4, r5, pc}
   178e2:	f1c4 040c 	rsb	r4, r4, #12
   178e6:	f1c4 0220 	rsb	r2, r4, #32
   178ea:	fa20 f002 	lsr.w	r0, r0, r2
   178ee:	fa01 f304 	lsl.w	r3, r1, r4
   178f2:	ea40 0003 	orr.w	r0, r0, r3
   178f6:	4629      	mov	r1, r5
   178f8:	bd30      	pop	{r4, r5, pc}
   178fa:	fa21 f004 	lsr.w	r0, r1, r4
   178fe:	4629      	mov	r1, r5
   17900:	bd30      	pop	{r4, r5, pc}
   17902:	f094 0f00 	teq	r4, #0
   17906:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1790a:	bf06      	itte	eq
   1790c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   17910:	3401      	addeq	r4, #1
   17912:	3d01      	subne	r5, #1
   17914:	e74e      	b.n	177b4 <__adddf3+0x8c>
   17916:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1791a:	bf18      	it	ne
   1791c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   17920:	d029      	beq.n	17976 <__adddf3+0x24e>
   17922:	ea94 0f05 	teq	r4, r5
   17926:	bf08      	it	eq
   17928:	ea90 0f02 	teqeq	r0, r2
   1792c:	d005      	beq.n	1793a <__adddf3+0x212>
   1792e:	ea54 0c00 	orrs.w	ip, r4, r0
   17932:	bf04      	itt	eq
   17934:	4619      	moveq	r1, r3
   17936:	4610      	moveq	r0, r2
   17938:	bd30      	pop	{r4, r5, pc}
   1793a:	ea91 0f03 	teq	r1, r3
   1793e:	bf1e      	ittt	ne
   17940:	2100      	movne	r1, #0
   17942:	2000      	movne	r0, #0
   17944:	bd30      	popne	{r4, r5, pc}
   17946:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1794a:	d105      	bne.n	17958 <__adddf3+0x230>
   1794c:	0040      	lsls	r0, r0, #1
   1794e:	4149      	adcs	r1, r1
   17950:	bf28      	it	cs
   17952:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   17956:	bd30      	pop	{r4, r5, pc}
   17958:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1795c:	bf3c      	itt	cc
   1795e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   17962:	bd30      	popcc	{r4, r5, pc}
   17964:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17968:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1796c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17970:	f04f 0000 	mov.w	r0, #0
   17974:	bd30      	pop	{r4, r5, pc}
   17976:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1797a:	bf1a      	itte	ne
   1797c:	4619      	movne	r1, r3
   1797e:	4610      	movne	r0, r2
   17980:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   17984:	bf1c      	itt	ne
   17986:	460b      	movne	r3, r1
   17988:	4602      	movne	r2, r0
   1798a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1798e:	bf06      	itte	eq
   17990:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   17994:	ea91 0f03 	teqeq	r1, r3
   17998:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1799c:	bd30      	pop	{r4, r5, pc}
   1799e:	bf00      	nop

000179a0 <__aeabi_ui2d>:
   179a0:	f090 0f00 	teq	r0, #0
   179a4:	bf04      	itt	eq
   179a6:	2100      	moveq	r1, #0
   179a8:	4770      	bxeq	lr
   179aa:	b530      	push	{r4, r5, lr}
   179ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   179b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   179b4:	f04f 0500 	mov.w	r5, #0
   179b8:	f04f 0100 	mov.w	r1, #0
   179bc:	e750      	b.n	17860 <__adddf3+0x138>
   179be:	bf00      	nop

000179c0 <__aeabi_i2d>:
   179c0:	f090 0f00 	teq	r0, #0
   179c4:	bf04      	itt	eq
   179c6:	2100      	moveq	r1, #0
   179c8:	4770      	bxeq	lr
   179ca:	b530      	push	{r4, r5, lr}
   179cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   179d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   179d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   179d8:	bf48      	it	mi
   179da:	4240      	negmi	r0, r0
   179dc:	f04f 0100 	mov.w	r1, #0
   179e0:	e73e      	b.n	17860 <__adddf3+0x138>
   179e2:	bf00      	nop

000179e4 <__aeabi_f2d>:
   179e4:	0042      	lsls	r2, r0, #1
   179e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   179ea:	ea4f 0131 	mov.w	r1, r1, rrx
   179ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
   179f2:	bf1f      	itttt	ne
   179f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   179f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   179fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   17a00:	4770      	bxne	lr
   17a02:	f092 0f00 	teq	r2, #0
   17a06:	bf14      	ite	ne
   17a08:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17a0c:	4770      	bxeq	lr
   17a0e:	b530      	push	{r4, r5, lr}
   17a10:	f44f 7460 	mov.w	r4, #896	; 0x380
   17a14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17a18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17a1c:	e720      	b.n	17860 <__adddf3+0x138>
   17a1e:	bf00      	nop

00017a20 <__aeabi_ul2d>:
   17a20:	ea50 0201 	orrs.w	r2, r0, r1
   17a24:	bf08      	it	eq
   17a26:	4770      	bxeq	lr
   17a28:	b530      	push	{r4, r5, lr}
   17a2a:	f04f 0500 	mov.w	r5, #0
   17a2e:	e00a      	b.n	17a46 <__aeabi_l2d+0x16>

00017a30 <__aeabi_l2d>:
   17a30:	ea50 0201 	orrs.w	r2, r0, r1
   17a34:	bf08      	it	eq
   17a36:	4770      	bxeq	lr
   17a38:	b530      	push	{r4, r5, lr}
   17a3a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   17a3e:	d502      	bpl.n	17a46 <__aeabi_l2d+0x16>
   17a40:	4240      	negs	r0, r0
   17a42:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17a46:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17a4a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17a4e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   17a52:	f43f aedc 	beq.w	1780e <__adddf3+0xe6>
   17a56:	f04f 0203 	mov.w	r2, #3
   17a5a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17a5e:	bf18      	it	ne
   17a60:	3203      	addne	r2, #3
   17a62:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17a66:	bf18      	it	ne
   17a68:	3203      	addne	r2, #3
   17a6a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   17a6e:	f1c2 0320 	rsb	r3, r2, #32
   17a72:	fa00 fc03 	lsl.w	ip, r0, r3
   17a76:	fa20 f002 	lsr.w	r0, r0, r2
   17a7a:	fa01 fe03 	lsl.w	lr, r1, r3
   17a7e:	ea40 000e 	orr.w	r0, r0, lr
   17a82:	fa21 f102 	lsr.w	r1, r1, r2
   17a86:	4414      	add	r4, r2
   17a88:	e6c1      	b.n	1780e <__adddf3+0xe6>
   17a8a:	bf00      	nop

00017a8c <__aeabi_dmul>:
   17a8c:	b570      	push	{r4, r5, r6, lr}
   17a8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17a92:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17a96:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17a9a:	bf1d      	ittte	ne
   17a9c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17aa0:	ea94 0f0c 	teqne	r4, ip
   17aa4:	ea95 0f0c 	teqne	r5, ip
   17aa8:	f000 f8de 	bleq	17c68 <__aeabi_dmul+0x1dc>
   17aac:	442c      	add	r4, r5
   17aae:	ea81 0603 	eor.w	r6, r1, r3
   17ab2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   17ab6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   17aba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   17abe:	bf18      	it	ne
   17ac0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   17ac4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17ac8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   17acc:	d038      	beq.n	17b40 <__aeabi_dmul+0xb4>
   17ace:	fba0 ce02 	umull	ip, lr, r0, r2
   17ad2:	f04f 0500 	mov.w	r5, #0
   17ad6:	fbe1 e502 	umlal	lr, r5, r1, r2
   17ada:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   17ade:	fbe0 e503 	umlal	lr, r5, r0, r3
   17ae2:	f04f 0600 	mov.w	r6, #0
   17ae6:	fbe1 5603 	umlal	r5, r6, r1, r3
   17aea:	f09c 0f00 	teq	ip, #0
   17aee:	bf18      	it	ne
   17af0:	f04e 0e01 	orrne.w	lr, lr, #1
   17af4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   17af8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   17afc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   17b00:	d204      	bcs.n	17b0c <__aeabi_dmul+0x80>
   17b02:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   17b06:	416d      	adcs	r5, r5
   17b08:	eb46 0606 	adc.w	r6, r6, r6
   17b0c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   17b10:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   17b14:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   17b18:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   17b1c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   17b20:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17b24:	bf88      	it	hi
   17b26:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17b2a:	d81e      	bhi.n	17b6a <__aeabi_dmul+0xde>
   17b2c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   17b30:	bf08      	it	eq
   17b32:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   17b36:	f150 0000 	adcs.w	r0, r0, #0
   17b3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17b3e:	bd70      	pop	{r4, r5, r6, pc}
   17b40:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   17b44:	ea46 0101 	orr.w	r1, r6, r1
   17b48:	ea40 0002 	orr.w	r0, r0, r2
   17b4c:	ea81 0103 	eor.w	r1, r1, r3
   17b50:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   17b54:	bfc2      	ittt	gt
   17b56:	ebd4 050c 	rsbsgt	r5, r4, ip
   17b5a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17b5e:	bd70      	popgt	{r4, r5, r6, pc}
   17b60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17b64:	f04f 0e00 	mov.w	lr, #0
   17b68:	3c01      	subs	r4, #1
   17b6a:	f300 80ab 	bgt.w	17cc4 <__aeabi_dmul+0x238>
   17b6e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   17b72:	bfde      	ittt	le
   17b74:	2000      	movle	r0, #0
   17b76:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   17b7a:	bd70      	pople	{r4, r5, r6, pc}
   17b7c:	f1c4 0400 	rsb	r4, r4, #0
   17b80:	3c20      	subs	r4, #32
   17b82:	da35      	bge.n	17bf0 <__aeabi_dmul+0x164>
   17b84:	340c      	adds	r4, #12
   17b86:	dc1b      	bgt.n	17bc0 <__aeabi_dmul+0x134>
   17b88:	f104 0414 	add.w	r4, r4, #20
   17b8c:	f1c4 0520 	rsb	r5, r4, #32
   17b90:	fa00 f305 	lsl.w	r3, r0, r5
   17b94:	fa20 f004 	lsr.w	r0, r0, r4
   17b98:	fa01 f205 	lsl.w	r2, r1, r5
   17b9c:	ea40 0002 	orr.w	r0, r0, r2
   17ba0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   17ba4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17ba8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17bac:	fa21 f604 	lsr.w	r6, r1, r4
   17bb0:	eb42 0106 	adc.w	r1, r2, r6
   17bb4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17bb8:	bf08      	it	eq
   17bba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17bbe:	bd70      	pop	{r4, r5, r6, pc}
   17bc0:	f1c4 040c 	rsb	r4, r4, #12
   17bc4:	f1c4 0520 	rsb	r5, r4, #32
   17bc8:	fa00 f304 	lsl.w	r3, r0, r4
   17bcc:	fa20 f005 	lsr.w	r0, r0, r5
   17bd0:	fa01 f204 	lsl.w	r2, r1, r4
   17bd4:	ea40 0002 	orr.w	r0, r0, r2
   17bd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17bdc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17be0:	f141 0100 	adc.w	r1, r1, #0
   17be4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17be8:	bf08      	it	eq
   17bea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17bee:	bd70      	pop	{r4, r5, r6, pc}
   17bf0:	f1c4 0520 	rsb	r5, r4, #32
   17bf4:	fa00 f205 	lsl.w	r2, r0, r5
   17bf8:	ea4e 0e02 	orr.w	lr, lr, r2
   17bfc:	fa20 f304 	lsr.w	r3, r0, r4
   17c00:	fa01 f205 	lsl.w	r2, r1, r5
   17c04:	ea43 0302 	orr.w	r3, r3, r2
   17c08:	fa21 f004 	lsr.w	r0, r1, r4
   17c0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17c10:	fa21 f204 	lsr.w	r2, r1, r4
   17c14:	ea20 0002 	bic.w	r0, r0, r2
   17c18:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   17c1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17c20:	bf08      	it	eq
   17c22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17c26:	bd70      	pop	{r4, r5, r6, pc}
   17c28:	f094 0f00 	teq	r4, #0
   17c2c:	d10f      	bne.n	17c4e <__aeabi_dmul+0x1c2>
   17c2e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   17c32:	0040      	lsls	r0, r0, #1
   17c34:	eb41 0101 	adc.w	r1, r1, r1
   17c38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17c3c:	bf08      	it	eq
   17c3e:	3c01      	subeq	r4, #1
   17c40:	d0f7      	beq.n	17c32 <__aeabi_dmul+0x1a6>
   17c42:	ea41 0106 	orr.w	r1, r1, r6
   17c46:	f095 0f00 	teq	r5, #0
   17c4a:	bf18      	it	ne
   17c4c:	4770      	bxne	lr
   17c4e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   17c52:	0052      	lsls	r2, r2, #1
   17c54:	eb43 0303 	adc.w	r3, r3, r3
   17c58:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   17c5c:	bf08      	it	eq
   17c5e:	3d01      	subeq	r5, #1
   17c60:	d0f7      	beq.n	17c52 <__aeabi_dmul+0x1c6>
   17c62:	ea43 0306 	orr.w	r3, r3, r6
   17c66:	4770      	bx	lr
   17c68:	ea94 0f0c 	teq	r4, ip
   17c6c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17c70:	bf18      	it	ne
   17c72:	ea95 0f0c 	teqne	r5, ip
   17c76:	d00c      	beq.n	17c92 <__aeabi_dmul+0x206>
   17c78:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17c7c:	bf18      	it	ne
   17c7e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17c82:	d1d1      	bne.n	17c28 <__aeabi_dmul+0x19c>
   17c84:	ea81 0103 	eor.w	r1, r1, r3
   17c88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17c8c:	f04f 0000 	mov.w	r0, #0
   17c90:	bd70      	pop	{r4, r5, r6, pc}
   17c92:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17c96:	bf06      	itte	eq
   17c98:	4610      	moveq	r0, r2
   17c9a:	4619      	moveq	r1, r3
   17c9c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17ca0:	d019      	beq.n	17cd6 <__aeabi_dmul+0x24a>
   17ca2:	ea94 0f0c 	teq	r4, ip
   17ca6:	d102      	bne.n	17cae <__aeabi_dmul+0x222>
   17ca8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   17cac:	d113      	bne.n	17cd6 <__aeabi_dmul+0x24a>
   17cae:	ea95 0f0c 	teq	r5, ip
   17cb2:	d105      	bne.n	17cc0 <__aeabi_dmul+0x234>
   17cb4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   17cb8:	bf1c      	itt	ne
   17cba:	4610      	movne	r0, r2
   17cbc:	4619      	movne	r1, r3
   17cbe:	d10a      	bne.n	17cd6 <__aeabi_dmul+0x24a>
   17cc0:	ea81 0103 	eor.w	r1, r1, r3
   17cc4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17cc8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17ccc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17cd0:	f04f 0000 	mov.w	r0, #0
   17cd4:	bd70      	pop	{r4, r5, r6, pc}
   17cd6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17cda:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   17cde:	bd70      	pop	{r4, r5, r6, pc}

00017ce0 <__aeabi_ddiv>:
   17ce0:	b570      	push	{r4, r5, r6, lr}
   17ce2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17ce6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17cea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17cee:	bf1d      	ittte	ne
   17cf0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17cf4:	ea94 0f0c 	teqne	r4, ip
   17cf8:	ea95 0f0c 	teqne	r5, ip
   17cfc:	f000 f8a7 	bleq	17e4e <__aeabi_ddiv+0x16e>
   17d00:	eba4 0405 	sub.w	r4, r4, r5
   17d04:	ea81 0e03 	eor.w	lr, r1, r3
   17d08:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17d0c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17d10:	f000 8088 	beq.w	17e24 <__aeabi_ddiv+0x144>
   17d14:	ea4f 3303 	mov.w	r3, r3, lsl #12
   17d18:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   17d1c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   17d20:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   17d24:	ea4f 2202 	mov.w	r2, r2, lsl #8
   17d28:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   17d2c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   17d30:	ea4f 2600 	mov.w	r6, r0, lsl #8
   17d34:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   17d38:	429d      	cmp	r5, r3
   17d3a:	bf08      	it	eq
   17d3c:	4296      	cmpeq	r6, r2
   17d3e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   17d42:	f504 7440 	add.w	r4, r4, #768	; 0x300
   17d46:	d202      	bcs.n	17d4e <__aeabi_ddiv+0x6e>
   17d48:	085b      	lsrs	r3, r3, #1
   17d4a:	ea4f 0232 	mov.w	r2, r2, rrx
   17d4e:	1ab6      	subs	r6, r6, r2
   17d50:	eb65 0503 	sbc.w	r5, r5, r3
   17d54:	085b      	lsrs	r3, r3, #1
   17d56:	ea4f 0232 	mov.w	r2, r2, rrx
   17d5a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   17d5e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   17d62:	ebb6 0e02 	subs.w	lr, r6, r2
   17d66:	eb75 0e03 	sbcs.w	lr, r5, r3
   17d6a:	bf22      	ittt	cs
   17d6c:	1ab6      	subcs	r6, r6, r2
   17d6e:	4675      	movcs	r5, lr
   17d70:	ea40 000c 	orrcs.w	r0, r0, ip
   17d74:	085b      	lsrs	r3, r3, #1
   17d76:	ea4f 0232 	mov.w	r2, r2, rrx
   17d7a:	ebb6 0e02 	subs.w	lr, r6, r2
   17d7e:	eb75 0e03 	sbcs.w	lr, r5, r3
   17d82:	bf22      	ittt	cs
   17d84:	1ab6      	subcs	r6, r6, r2
   17d86:	4675      	movcs	r5, lr
   17d88:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   17d8c:	085b      	lsrs	r3, r3, #1
   17d8e:	ea4f 0232 	mov.w	r2, r2, rrx
   17d92:	ebb6 0e02 	subs.w	lr, r6, r2
   17d96:	eb75 0e03 	sbcs.w	lr, r5, r3
   17d9a:	bf22      	ittt	cs
   17d9c:	1ab6      	subcs	r6, r6, r2
   17d9e:	4675      	movcs	r5, lr
   17da0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   17da4:	085b      	lsrs	r3, r3, #1
   17da6:	ea4f 0232 	mov.w	r2, r2, rrx
   17daa:	ebb6 0e02 	subs.w	lr, r6, r2
   17dae:	eb75 0e03 	sbcs.w	lr, r5, r3
   17db2:	bf22      	ittt	cs
   17db4:	1ab6      	subcs	r6, r6, r2
   17db6:	4675      	movcs	r5, lr
   17db8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   17dbc:	ea55 0e06 	orrs.w	lr, r5, r6
   17dc0:	d018      	beq.n	17df4 <__aeabi_ddiv+0x114>
   17dc2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   17dc6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   17dca:	ea4f 1606 	mov.w	r6, r6, lsl #4
   17dce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   17dd2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   17dd6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   17dda:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   17dde:	d1c0      	bne.n	17d62 <__aeabi_ddiv+0x82>
   17de0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17de4:	d10b      	bne.n	17dfe <__aeabi_ddiv+0x11e>
   17de6:	ea41 0100 	orr.w	r1, r1, r0
   17dea:	f04f 0000 	mov.w	r0, #0
   17dee:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   17df2:	e7b6      	b.n	17d62 <__aeabi_ddiv+0x82>
   17df4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17df8:	bf04      	itt	eq
   17dfa:	4301      	orreq	r1, r0
   17dfc:	2000      	moveq	r0, #0
   17dfe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17e02:	bf88      	it	hi
   17e04:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17e08:	f63f aeaf 	bhi.w	17b6a <__aeabi_dmul+0xde>
   17e0c:	ebb5 0c03 	subs.w	ip, r5, r3
   17e10:	bf04      	itt	eq
   17e12:	ebb6 0c02 	subseq.w	ip, r6, r2
   17e16:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   17e1a:	f150 0000 	adcs.w	r0, r0, #0
   17e1e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17e22:	bd70      	pop	{r4, r5, r6, pc}
   17e24:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   17e28:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   17e2c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   17e30:	bfc2      	ittt	gt
   17e32:	ebd4 050c 	rsbsgt	r5, r4, ip
   17e36:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17e3a:	bd70      	popgt	{r4, r5, r6, pc}
   17e3c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17e40:	f04f 0e00 	mov.w	lr, #0
   17e44:	3c01      	subs	r4, #1
   17e46:	e690      	b.n	17b6a <__aeabi_dmul+0xde>
   17e48:	ea45 0e06 	orr.w	lr, r5, r6
   17e4c:	e68d      	b.n	17b6a <__aeabi_dmul+0xde>
   17e4e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17e52:	ea94 0f0c 	teq	r4, ip
   17e56:	bf08      	it	eq
   17e58:	ea95 0f0c 	teqeq	r5, ip
   17e5c:	f43f af3b 	beq.w	17cd6 <__aeabi_dmul+0x24a>
   17e60:	ea94 0f0c 	teq	r4, ip
   17e64:	d10a      	bne.n	17e7c <__aeabi_ddiv+0x19c>
   17e66:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   17e6a:	f47f af34 	bne.w	17cd6 <__aeabi_dmul+0x24a>
   17e6e:	ea95 0f0c 	teq	r5, ip
   17e72:	f47f af25 	bne.w	17cc0 <__aeabi_dmul+0x234>
   17e76:	4610      	mov	r0, r2
   17e78:	4619      	mov	r1, r3
   17e7a:	e72c      	b.n	17cd6 <__aeabi_dmul+0x24a>
   17e7c:	ea95 0f0c 	teq	r5, ip
   17e80:	d106      	bne.n	17e90 <__aeabi_ddiv+0x1b0>
   17e82:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17e86:	f43f aefd 	beq.w	17c84 <__aeabi_dmul+0x1f8>
   17e8a:	4610      	mov	r0, r2
   17e8c:	4619      	mov	r1, r3
   17e8e:	e722      	b.n	17cd6 <__aeabi_dmul+0x24a>
   17e90:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17e94:	bf18      	it	ne
   17e96:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17e9a:	f47f aec5 	bne.w	17c28 <__aeabi_dmul+0x19c>
   17e9e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   17ea2:	f47f af0d 	bne.w	17cc0 <__aeabi_dmul+0x234>
   17ea6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   17eaa:	f47f aeeb 	bne.w	17c84 <__aeabi_dmul+0x1f8>
   17eae:	e712      	b.n	17cd6 <__aeabi_dmul+0x24a>

00017eb0 <__gedf2>:
   17eb0:	f04f 3cff 	mov.w	ip, #4294967295
   17eb4:	e006      	b.n	17ec4 <__cmpdf2+0x4>
   17eb6:	bf00      	nop

00017eb8 <__ledf2>:
   17eb8:	f04f 0c01 	mov.w	ip, #1
   17ebc:	e002      	b.n	17ec4 <__cmpdf2+0x4>
   17ebe:	bf00      	nop

00017ec0 <__cmpdf2>:
   17ec0:	f04f 0c01 	mov.w	ip, #1
   17ec4:	f84d cd04 	str.w	ip, [sp, #-4]!
   17ec8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   17ecc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17ed0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   17ed4:	bf18      	it	ne
   17ed6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   17eda:	d01b      	beq.n	17f14 <__cmpdf2+0x54>
   17edc:	b001      	add	sp, #4
   17ede:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   17ee2:	bf0c      	ite	eq
   17ee4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   17ee8:	ea91 0f03 	teqne	r1, r3
   17eec:	bf02      	ittt	eq
   17eee:	ea90 0f02 	teqeq	r0, r2
   17ef2:	2000      	moveq	r0, #0
   17ef4:	4770      	bxeq	lr
   17ef6:	f110 0f00 	cmn.w	r0, #0
   17efa:	ea91 0f03 	teq	r1, r3
   17efe:	bf58      	it	pl
   17f00:	4299      	cmppl	r1, r3
   17f02:	bf08      	it	eq
   17f04:	4290      	cmpeq	r0, r2
   17f06:	bf2c      	ite	cs
   17f08:	17d8      	asrcs	r0, r3, #31
   17f0a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   17f0e:	f040 0001 	orr.w	r0, r0, #1
   17f12:	4770      	bx	lr
   17f14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   17f18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17f1c:	d102      	bne.n	17f24 <__cmpdf2+0x64>
   17f1e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   17f22:	d107      	bne.n	17f34 <__cmpdf2+0x74>
   17f24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   17f28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17f2c:	d1d6      	bne.n	17edc <__cmpdf2+0x1c>
   17f2e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   17f32:	d0d3      	beq.n	17edc <__cmpdf2+0x1c>
   17f34:	f85d 0b04 	ldr.w	r0, [sp], #4
   17f38:	4770      	bx	lr
   17f3a:	bf00      	nop

00017f3c <__aeabi_cdrcmple>:
   17f3c:	4684      	mov	ip, r0
   17f3e:	4610      	mov	r0, r2
   17f40:	4662      	mov	r2, ip
   17f42:	468c      	mov	ip, r1
   17f44:	4619      	mov	r1, r3
   17f46:	4663      	mov	r3, ip
   17f48:	e000      	b.n	17f4c <__aeabi_cdcmpeq>
   17f4a:	bf00      	nop

00017f4c <__aeabi_cdcmpeq>:
   17f4c:	b501      	push	{r0, lr}
   17f4e:	f7ff ffb7 	bl	17ec0 <__cmpdf2>
   17f52:	2800      	cmp	r0, #0
   17f54:	bf48      	it	mi
   17f56:	f110 0f00 	cmnmi.w	r0, #0
   17f5a:	bd01      	pop	{r0, pc}

00017f5c <__aeabi_dcmpeq>:
   17f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
   17f60:	f7ff fff4 	bl	17f4c <__aeabi_cdcmpeq>
   17f64:	bf0c      	ite	eq
   17f66:	2001      	moveq	r0, #1
   17f68:	2000      	movne	r0, #0
   17f6a:	f85d fb08 	ldr.w	pc, [sp], #8
   17f6e:	bf00      	nop

00017f70 <__aeabi_dcmplt>:
   17f70:	f84d ed08 	str.w	lr, [sp, #-8]!
   17f74:	f7ff ffea 	bl	17f4c <__aeabi_cdcmpeq>
   17f78:	bf34      	ite	cc
   17f7a:	2001      	movcc	r0, #1
   17f7c:	2000      	movcs	r0, #0
   17f7e:	f85d fb08 	ldr.w	pc, [sp], #8
   17f82:	bf00      	nop

00017f84 <__aeabi_dcmple>:
   17f84:	f84d ed08 	str.w	lr, [sp, #-8]!
   17f88:	f7ff ffe0 	bl	17f4c <__aeabi_cdcmpeq>
   17f8c:	bf94      	ite	ls
   17f8e:	2001      	movls	r0, #1
   17f90:	2000      	movhi	r0, #0
   17f92:	f85d fb08 	ldr.w	pc, [sp], #8
   17f96:	bf00      	nop

00017f98 <__aeabi_dcmpge>:
   17f98:	f84d ed08 	str.w	lr, [sp, #-8]!
   17f9c:	f7ff ffce 	bl	17f3c <__aeabi_cdrcmple>
   17fa0:	bf94      	ite	ls
   17fa2:	2001      	movls	r0, #1
   17fa4:	2000      	movhi	r0, #0
   17fa6:	f85d fb08 	ldr.w	pc, [sp], #8
   17faa:	bf00      	nop

00017fac <__aeabi_dcmpgt>:
   17fac:	f84d ed08 	str.w	lr, [sp, #-8]!
   17fb0:	f7ff ffc4 	bl	17f3c <__aeabi_cdrcmple>
   17fb4:	bf34      	ite	cc
   17fb6:	2001      	movcc	r0, #1
   17fb8:	2000      	movcs	r0, #0
   17fba:	f85d fb08 	ldr.w	pc, [sp], #8
   17fbe:	bf00      	nop

00017fc0 <__aeabi_d2iz>:
   17fc0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   17fc4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   17fc8:	d215      	bcs.n	17ff6 <__aeabi_d2iz+0x36>
   17fca:	d511      	bpl.n	17ff0 <__aeabi_d2iz+0x30>
   17fcc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   17fd0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   17fd4:	d912      	bls.n	17ffc <__aeabi_d2iz+0x3c>
   17fd6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   17fda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   17fde:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   17fe2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   17fe6:	fa23 f002 	lsr.w	r0, r3, r2
   17fea:	bf18      	it	ne
   17fec:	4240      	negne	r0, r0
   17fee:	4770      	bx	lr
   17ff0:	f04f 0000 	mov.w	r0, #0
   17ff4:	4770      	bx	lr
   17ff6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   17ffa:	d105      	bne.n	18008 <__aeabi_d2iz+0x48>
   17ffc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   18000:	bf08      	it	eq
   18002:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   18006:	4770      	bx	lr
   18008:	f04f 0000 	mov.w	r0, #0
   1800c:	4770      	bx	lr
   1800e:	bf00      	nop

00018010 <__aeabi_d2uiz>:
   18010:	004a      	lsls	r2, r1, #1
   18012:	d211      	bcs.n	18038 <__aeabi_d2uiz+0x28>
   18014:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   18018:	d211      	bcs.n	1803e <__aeabi_d2uiz+0x2e>
   1801a:	d50d      	bpl.n	18038 <__aeabi_d2uiz+0x28>
   1801c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   18020:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   18024:	d40e      	bmi.n	18044 <__aeabi_d2uiz+0x34>
   18026:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1802a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1802e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   18032:	fa23 f002 	lsr.w	r0, r3, r2
   18036:	4770      	bx	lr
   18038:	f04f 0000 	mov.w	r0, #0
   1803c:	4770      	bx	lr
   1803e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   18042:	d102      	bne.n	1804a <__aeabi_d2uiz+0x3a>
   18044:	f04f 30ff 	mov.w	r0, #4294967295
   18048:	4770      	bx	lr
   1804a:	f04f 0000 	mov.w	r0, #0
   1804e:	4770      	bx	lr

00018050 <__aeabi_d2f>:
   18050:	ea4f 0241 	mov.w	r2, r1, lsl #1
   18054:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   18058:	bf24      	itt	cs
   1805a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1805e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   18062:	d90d      	bls.n	18080 <__aeabi_d2f+0x30>
   18064:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18068:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   1806c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   18070:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   18074:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   18078:	bf08      	it	eq
   1807a:	f020 0001 	biceq.w	r0, r0, #1
   1807e:	4770      	bx	lr
   18080:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   18084:	d121      	bne.n	180ca <__aeabi_d2f+0x7a>
   18086:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1808a:	bfbc      	itt	lt
   1808c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   18090:	4770      	bxlt	lr
   18092:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18096:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1809a:	f1c2 0218 	rsb	r2, r2, #24
   1809e:	f1c2 0c20 	rsb	ip, r2, #32
   180a2:	fa10 f30c 	lsls.w	r3, r0, ip
   180a6:	fa20 f002 	lsr.w	r0, r0, r2
   180aa:	bf18      	it	ne
   180ac:	f040 0001 	orrne.w	r0, r0, #1
   180b0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   180b4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   180b8:	fa03 fc0c 	lsl.w	ip, r3, ip
   180bc:	ea40 000c 	orr.w	r0, r0, ip
   180c0:	fa23 f302 	lsr.w	r3, r3, r2
   180c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   180c8:	e7cc      	b.n	18064 <__aeabi_d2f+0x14>
   180ca:	ea7f 5362 	mvns.w	r3, r2, asr #21
   180ce:	d107      	bne.n	180e0 <__aeabi_d2f+0x90>
   180d0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   180d4:	bf1e      	ittt	ne
   180d6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   180da:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   180de:	4770      	bxne	lr
   180e0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   180e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   180e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   180ec:	4770      	bx	lr
   180ee:	bf00      	nop

000180f0 <__aeabi_frsub>:
   180f0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   180f4:	e002      	b.n	180fc <__addsf3>
   180f6:	bf00      	nop

000180f8 <__aeabi_fsub>:
   180f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000180fc <__addsf3>:
   180fc:	0042      	lsls	r2, r0, #1
   180fe:	bf1f      	itttt	ne
   18100:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   18104:	ea92 0f03 	teqne	r2, r3
   18108:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   1810c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18110:	d06a      	beq.n	181e8 <__addsf3+0xec>
   18112:	ea4f 6212 	mov.w	r2, r2, lsr #24
   18116:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1811a:	bfc1      	itttt	gt
   1811c:	18d2      	addgt	r2, r2, r3
   1811e:	4041      	eorgt	r1, r0
   18120:	4048      	eorgt	r0, r1
   18122:	4041      	eorgt	r1, r0
   18124:	bfb8      	it	lt
   18126:	425b      	neglt	r3, r3
   18128:	2b19      	cmp	r3, #25
   1812a:	bf88      	it	hi
   1812c:	4770      	bxhi	lr
   1812e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   18132:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18136:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1813a:	bf18      	it	ne
   1813c:	4240      	negne	r0, r0
   1813e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18142:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   18146:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1814a:	bf18      	it	ne
   1814c:	4249      	negne	r1, r1
   1814e:	ea92 0f03 	teq	r2, r3
   18152:	d03f      	beq.n	181d4 <__addsf3+0xd8>
   18154:	f1a2 0201 	sub.w	r2, r2, #1
   18158:	fa41 fc03 	asr.w	ip, r1, r3
   1815c:	eb10 000c 	adds.w	r0, r0, ip
   18160:	f1c3 0320 	rsb	r3, r3, #32
   18164:	fa01 f103 	lsl.w	r1, r1, r3
   18168:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1816c:	d502      	bpl.n	18174 <__addsf3+0x78>
   1816e:	4249      	negs	r1, r1
   18170:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   18174:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   18178:	d313      	bcc.n	181a2 <__addsf3+0xa6>
   1817a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1817e:	d306      	bcc.n	1818e <__addsf3+0x92>
   18180:	0840      	lsrs	r0, r0, #1
   18182:	ea4f 0131 	mov.w	r1, r1, rrx
   18186:	f102 0201 	add.w	r2, r2, #1
   1818a:	2afe      	cmp	r2, #254	; 0xfe
   1818c:	d251      	bcs.n	18232 <__addsf3+0x136>
   1818e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   18192:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18196:	bf08      	it	eq
   18198:	f020 0001 	biceq.w	r0, r0, #1
   1819c:	ea40 0003 	orr.w	r0, r0, r3
   181a0:	4770      	bx	lr
   181a2:	0049      	lsls	r1, r1, #1
   181a4:	eb40 0000 	adc.w	r0, r0, r0
   181a8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   181ac:	f1a2 0201 	sub.w	r2, r2, #1
   181b0:	d1ed      	bne.n	1818e <__addsf3+0x92>
   181b2:	fab0 fc80 	clz	ip, r0
   181b6:	f1ac 0c08 	sub.w	ip, ip, #8
   181ba:	ebb2 020c 	subs.w	r2, r2, ip
   181be:	fa00 f00c 	lsl.w	r0, r0, ip
   181c2:	bfaa      	itet	ge
   181c4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   181c8:	4252      	neglt	r2, r2
   181ca:	4318      	orrge	r0, r3
   181cc:	bfbc      	itt	lt
   181ce:	40d0      	lsrlt	r0, r2
   181d0:	4318      	orrlt	r0, r3
   181d2:	4770      	bx	lr
   181d4:	f092 0f00 	teq	r2, #0
   181d8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   181dc:	bf06      	itte	eq
   181de:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   181e2:	3201      	addeq	r2, #1
   181e4:	3b01      	subne	r3, #1
   181e6:	e7b5      	b.n	18154 <__addsf3+0x58>
   181e8:	ea4f 0341 	mov.w	r3, r1, lsl #1
   181ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   181f0:	bf18      	it	ne
   181f2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   181f6:	d021      	beq.n	1823c <__addsf3+0x140>
   181f8:	ea92 0f03 	teq	r2, r3
   181fc:	d004      	beq.n	18208 <__addsf3+0x10c>
   181fe:	f092 0f00 	teq	r2, #0
   18202:	bf08      	it	eq
   18204:	4608      	moveq	r0, r1
   18206:	4770      	bx	lr
   18208:	ea90 0f01 	teq	r0, r1
   1820c:	bf1c      	itt	ne
   1820e:	2000      	movne	r0, #0
   18210:	4770      	bxne	lr
   18212:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   18216:	d104      	bne.n	18222 <__addsf3+0x126>
   18218:	0040      	lsls	r0, r0, #1
   1821a:	bf28      	it	cs
   1821c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   18220:	4770      	bx	lr
   18222:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   18226:	bf3c      	itt	cc
   18228:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   1822c:	4770      	bxcc	lr
   1822e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18232:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   18236:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1823a:	4770      	bx	lr
   1823c:	ea7f 6222 	mvns.w	r2, r2, asr #24
   18240:	bf16      	itet	ne
   18242:	4608      	movne	r0, r1
   18244:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   18248:	4601      	movne	r1, r0
   1824a:	0242      	lsls	r2, r0, #9
   1824c:	bf06      	itte	eq
   1824e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   18252:	ea90 0f01 	teqeq	r0, r1
   18256:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1825a:	4770      	bx	lr

0001825c <__aeabi_ui2f>:
   1825c:	f04f 0300 	mov.w	r3, #0
   18260:	e004      	b.n	1826c <__aeabi_i2f+0x8>
   18262:	bf00      	nop

00018264 <__aeabi_i2f>:
   18264:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   18268:	bf48      	it	mi
   1826a:	4240      	negmi	r0, r0
   1826c:	ea5f 0c00 	movs.w	ip, r0
   18270:	bf08      	it	eq
   18272:	4770      	bxeq	lr
   18274:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   18278:	4601      	mov	r1, r0
   1827a:	f04f 0000 	mov.w	r0, #0
   1827e:	e01c      	b.n	182ba <__aeabi_l2f+0x2a>

00018280 <__aeabi_ul2f>:
   18280:	ea50 0201 	orrs.w	r2, r0, r1
   18284:	bf08      	it	eq
   18286:	4770      	bxeq	lr
   18288:	f04f 0300 	mov.w	r3, #0
   1828c:	e00a      	b.n	182a4 <__aeabi_l2f+0x14>
   1828e:	bf00      	nop

00018290 <__aeabi_l2f>:
   18290:	ea50 0201 	orrs.w	r2, r0, r1
   18294:	bf08      	it	eq
   18296:	4770      	bxeq	lr
   18298:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   1829c:	d502      	bpl.n	182a4 <__aeabi_l2f+0x14>
   1829e:	4240      	negs	r0, r0
   182a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   182a4:	ea5f 0c01 	movs.w	ip, r1
   182a8:	bf02      	ittt	eq
   182aa:	4684      	moveq	ip, r0
   182ac:	4601      	moveq	r1, r0
   182ae:	2000      	moveq	r0, #0
   182b0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   182b4:	bf08      	it	eq
   182b6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   182ba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   182be:	fabc f28c 	clz	r2, ip
   182c2:	3a08      	subs	r2, #8
   182c4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   182c8:	db10      	blt.n	182ec <__aeabi_l2f+0x5c>
   182ca:	fa01 fc02 	lsl.w	ip, r1, r2
   182ce:	4463      	add	r3, ip
   182d0:	fa00 fc02 	lsl.w	ip, r0, r2
   182d4:	f1c2 0220 	rsb	r2, r2, #32
   182d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   182dc:	fa20 f202 	lsr.w	r2, r0, r2
   182e0:	eb43 0002 	adc.w	r0, r3, r2
   182e4:	bf08      	it	eq
   182e6:	f020 0001 	biceq.w	r0, r0, #1
   182ea:	4770      	bx	lr
   182ec:	f102 0220 	add.w	r2, r2, #32
   182f0:	fa01 fc02 	lsl.w	ip, r1, r2
   182f4:	f1c2 0220 	rsb	r2, r2, #32
   182f8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   182fc:	fa21 f202 	lsr.w	r2, r1, r2
   18300:	eb43 0002 	adc.w	r0, r3, r2
   18304:	bf08      	it	eq
   18306:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1830a:	4770      	bx	lr

0001830c <__aeabi_fmul>:
   1830c:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18310:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   18314:	bf1e      	ittt	ne
   18316:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1831a:	ea92 0f0c 	teqne	r2, ip
   1831e:	ea93 0f0c 	teqne	r3, ip
   18322:	d06f      	beq.n	18404 <__aeabi_fmul+0xf8>
   18324:	441a      	add	r2, r3
   18326:	ea80 0c01 	eor.w	ip, r0, r1
   1832a:	0240      	lsls	r0, r0, #9
   1832c:	bf18      	it	ne
   1832e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   18332:	d01e      	beq.n	18372 <__aeabi_fmul+0x66>
   18334:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   18338:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   1833c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   18340:	fba0 3101 	umull	r3, r1, r0, r1
   18344:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   18348:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   1834c:	bf3e      	ittt	cc
   1834e:	0049      	lslcc	r1, r1, #1
   18350:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   18354:	005b      	lslcc	r3, r3, #1
   18356:	ea40 0001 	orr.w	r0, r0, r1
   1835a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   1835e:	2afd      	cmp	r2, #253	; 0xfd
   18360:	d81d      	bhi.n	1839e <__aeabi_fmul+0x92>
   18362:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   18366:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1836a:	bf08      	it	eq
   1836c:	f020 0001 	biceq.w	r0, r0, #1
   18370:	4770      	bx	lr
   18372:	f090 0f00 	teq	r0, #0
   18376:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1837a:	bf08      	it	eq
   1837c:	0249      	lsleq	r1, r1, #9
   1837e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   18382:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   18386:	3a7f      	subs	r2, #127	; 0x7f
   18388:	bfc2      	ittt	gt
   1838a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1838e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   18392:	4770      	bxgt	lr
   18394:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18398:	f04f 0300 	mov.w	r3, #0
   1839c:	3a01      	subs	r2, #1
   1839e:	dc5d      	bgt.n	1845c <__aeabi_fmul+0x150>
   183a0:	f112 0f19 	cmn.w	r2, #25
   183a4:	bfdc      	itt	le
   183a6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   183aa:	4770      	bxle	lr
   183ac:	f1c2 0200 	rsb	r2, r2, #0
   183b0:	0041      	lsls	r1, r0, #1
   183b2:	fa21 f102 	lsr.w	r1, r1, r2
   183b6:	f1c2 0220 	rsb	r2, r2, #32
   183ba:	fa00 fc02 	lsl.w	ip, r0, r2
   183be:	ea5f 0031 	movs.w	r0, r1, rrx
   183c2:	f140 0000 	adc.w	r0, r0, #0
   183c6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   183ca:	bf08      	it	eq
   183cc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   183d0:	4770      	bx	lr
   183d2:	f092 0f00 	teq	r2, #0
   183d6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   183da:	bf02      	ittt	eq
   183dc:	0040      	lsleq	r0, r0, #1
   183de:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   183e2:	3a01      	subeq	r2, #1
   183e4:	d0f9      	beq.n	183da <__aeabi_fmul+0xce>
   183e6:	ea40 000c 	orr.w	r0, r0, ip
   183ea:	f093 0f00 	teq	r3, #0
   183ee:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   183f2:	bf02      	ittt	eq
   183f4:	0049      	lsleq	r1, r1, #1
   183f6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   183fa:	3b01      	subeq	r3, #1
   183fc:	d0f9      	beq.n	183f2 <__aeabi_fmul+0xe6>
   183fe:	ea41 010c 	orr.w	r1, r1, ip
   18402:	e78f      	b.n	18324 <__aeabi_fmul+0x18>
   18404:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   18408:	ea92 0f0c 	teq	r2, ip
   1840c:	bf18      	it	ne
   1840e:	ea93 0f0c 	teqne	r3, ip
   18412:	d00a      	beq.n	1842a <__aeabi_fmul+0x11e>
   18414:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   18418:	bf18      	it	ne
   1841a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1841e:	d1d8      	bne.n	183d2 <__aeabi_fmul+0xc6>
   18420:	ea80 0001 	eor.w	r0, r0, r1
   18424:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   18428:	4770      	bx	lr
   1842a:	f090 0f00 	teq	r0, #0
   1842e:	bf17      	itett	ne
   18430:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   18434:	4608      	moveq	r0, r1
   18436:	f091 0f00 	teqne	r1, #0
   1843a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   1843e:	d014      	beq.n	1846a <__aeabi_fmul+0x15e>
   18440:	ea92 0f0c 	teq	r2, ip
   18444:	d101      	bne.n	1844a <__aeabi_fmul+0x13e>
   18446:	0242      	lsls	r2, r0, #9
   18448:	d10f      	bne.n	1846a <__aeabi_fmul+0x15e>
   1844a:	ea93 0f0c 	teq	r3, ip
   1844e:	d103      	bne.n	18458 <__aeabi_fmul+0x14c>
   18450:	024b      	lsls	r3, r1, #9
   18452:	bf18      	it	ne
   18454:	4608      	movne	r0, r1
   18456:	d108      	bne.n	1846a <__aeabi_fmul+0x15e>
   18458:	ea80 0001 	eor.w	r0, r0, r1
   1845c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   18460:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18464:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18468:	4770      	bx	lr
   1846a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1846e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   18472:	4770      	bx	lr

00018474 <__aeabi_fdiv>:
   18474:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18478:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1847c:	bf1e      	ittt	ne
   1847e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   18482:	ea92 0f0c 	teqne	r2, ip
   18486:	ea93 0f0c 	teqne	r3, ip
   1848a:	d069      	beq.n	18560 <__aeabi_fdiv+0xec>
   1848c:	eba2 0203 	sub.w	r2, r2, r3
   18490:	ea80 0c01 	eor.w	ip, r0, r1
   18494:	0249      	lsls	r1, r1, #9
   18496:	ea4f 2040 	mov.w	r0, r0, lsl #9
   1849a:	d037      	beq.n	1850c <__aeabi_fdiv+0x98>
   1849c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   184a0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   184a4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   184a8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   184ac:	428b      	cmp	r3, r1
   184ae:	bf38      	it	cc
   184b0:	005b      	lslcc	r3, r3, #1
   184b2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   184b6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   184ba:	428b      	cmp	r3, r1
   184bc:	bf24      	itt	cs
   184be:	1a5b      	subcs	r3, r3, r1
   184c0:	ea40 000c 	orrcs.w	r0, r0, ip
   184c4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   184c8:	bf24      	itt	cs
   184ca:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   184ce:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   184d2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   184d6:	bf24      	itt	cs
   184d8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   184dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   184e0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   184e4:	bf24      	itt	cs
   184e6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   184ea:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   184ee:	011b      	lsls	r3, r3, #4
   184f0:	bf18      	it	ne
   184f2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   184f6:	d1e0      	bne.n	184ba <__aeabi_fdiv+0x46>
   184f8:	2afd      	cmp	r2, #253	; 0xfd
   184fa:	f63f af50 	bhi.w	1839e <__aeabi_fmul+0x92>
   184fe:	428b      	cmp	r3, r1
   18500:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18504:	bf08      	it	eq
   18506:	f020 0001 	biceq.w	r0, r0, #1
   1850a:	4770      	bx	lr
   1850c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   18510:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   18514:	327f      	adds	r2, #127	; 0x7f
   18516:	bfc2      	ittt	gt
   18518:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1851c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   18520:	4770      	bxgt	lr
   18522:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18526:	f04f 0300 	mov.w	r3, #0
   1852a:	3a01      	subs	r2, #1
   1852c:	e737      	b.n	1839e <__aeabi_fmul+0x92>
   1852e:	f092 0f00 	teq	r2, #0
   18532:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   18536:	bf02      	ittt	eq
   18538:	0040      	lsleq	r0, r0, #1
   1853a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1853e:	3a01      	subeq	r2, #1
   18540:	d0f9      	beq.n	18536 <__aeabi_fdiv+0xc2>
   18542:	ea40 000c 	orr.w	r0, r0, ip
   18546:	f093 0f00 	teq	r3, #0
   1854a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1854e:	bf02      	ittt	eq
   18550:	0049      	lsleq	r1, r1, #1
   18552:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   18556:	3b01      	subeq	r3, #1
   18558:	d0f9      	beq.n	1854e <__aeabi_fdiv+0xda>
   1855a:	ea41 010c 	orr.w	r1, r1, ip
   1855e:	e795      	b.n	1848c <__aeabi_fdiv+0x18>
   18560:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   18564:	ea92 0f0c 	teq	r2, ip
   18568:	d108      	bne.n	1857c <__aeabi_fdiv+0x108>
   1856a:	0242      	lsls	r2, r0, #9
   1856c:	f47f af7d 	bne.w	1846a <__aeabi_fmul+0x15e>
   18570:	ea93 0f0c 	teq	r3, ip
   18574:	f47f af70 	bne.w	18458 <__aeabi_fmul+0x14c>
   18578:	4608      	mov	r0, r1
   1857a:	e776      	b.n	1846a <__aeabi_fmul+0x15e>
   1857c:	ea93 0f0c 	teq	r3, ip
   18580:	d104      	bne.n	1858c <__aeabi_fdiv+0x118>
   18582:	024b      	lsls	r3, r1, #9
   18584:	f43f af4c 	beq.w	18420 <__aeabi_fmul+0x114>
   18588:	4608      	mov	r0, r1
   1858a:	e76e      	b.n	1846a <__aeabi_fmul+0x15e>
   1858c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   18590:	bf18      	it	ne
   18592:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   18596:	d1ca      	bne.n	1852e <__aeabi_fdiv+0xba>
   18598:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   1859c:	f47f af5c 	bne.w	18458 <__aeabi_fmul+0x14c>
   185a0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   185a4:	f47f af3c 	bne.w	18420 <__aeabi_fmul+0x114>
   185a8:	e75f      	b.n	1846a <__aeabi_fmul+0x15e>
   185aa:	bf00      	nop

000185ac <__gesf2>:
   185ac:	f04f 3cff 	mov.w	ip, #4294967295
   185b0:	e006      	b.n	185c0 <__cmpsf2+0x4>
   185b2:	bf00      	nop

000185b4 <__lesf2>:
   185b4:	f04f 0c01 	mov.w	ip, #1
   185b8:	e002      	b.n	185c0 <__cmpsf2+0x4>
   185ba:	bf00      	nop

000185bc <__cmpsf2>:
   185bc:	f04f 0c01 	mov.w	ip, #1
   185c0:	f84d cd04 	str.w	ip, [sp, #-4]!
   185c4:	ea4f 0240 	mov.w	r2, r0, lsl #1
   185c8:	ea4f 0341 	mov.w	r3, r1, lsl #1
   185cc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   185d0:	bf18      	it	ne
   185d2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   185d6:	d011      	beq.n	185fc <__cmpsf2+0x40>
   185d8:	b001      	add	sp, #4
   185da:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   185de:	bf18      	it	ne
   185e0:	ea90 0f01 	teqne	r0, r1
   185e4:	bf58      	it	pl
   185e6:	ebb2 0003 	subspl.w	r0, r2, r3
   185ea:	bf88      	it	hi
   185ec:	17c8      	asrhi	r0, r1, #31
   185ee:	bf38      	it	cc
   185f0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   185f4:	bf18      	it	ne
   185f6:	f040 0001 	orrne.w	r0, r0, #1
   185fa:	4770      	bx	lr
   185fc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18600:	d102      	bne.n	18608 <__cmpsf2+0x4c>
   18602:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   18606:	d105      	bne.n	18614 <__cmpsf2+0x58>
   18608:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   1860c:	d1e4      	bne.n	185d8 <__cmpsf2+0x1c>
   1860e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   18612:	d0e1      	beq.n	185d8 <__cmpsf2+0x1c>
   18614:	f85d 0b04 	ldr.w	r0, [sp], #4
   18618:	4770      	bx	lr
   1861a:	bf00      	nop

0001861c <__aeabi_cfrcmple>:
   1861c:	4684      	mov	ip, r0
   1861e:	4608      	mov	r0, r1
   18620:	4661      	mov	r1, ip
   18622:	e7ff      	b.n	18624 <__aeabi_cfcmpeq>

00018624 <__aeabi_cfcmpeq>:
   18624:	b50f      	push	{r0, r1, r2, r3, lr}
   18626:	f7ff ffc9 	bl	185bc <__cmpsf2>
   1862a:	2800      	cmp	r0, #0
   1862c:	bf48      	it	mi
   1862e:	f110 0f00 	cmnmi.w	r0, #0
   18632:	bd0f      	pop	{r0, r1, r2, r3, pc}

00018634 <__aeabi_fcmpeq>:
   18634:	f84d ed08 	str.w	lr, [sp, #-8]!
   18638:	f7ff fff4 	bl	18624 <__aeabi_cfcmpeq>
   1863c:	bf0c      	ite	eq
   1863e:	2001      	moveq	r0, #1
   18640:	2000      	movne	r0, #0
   18642:	f85d fb08 	ldr.w	pc, [sp], #8
   18646:	bf00      	nop

00018648 <__aeabi_fcmplt>:
   18648:	f84d ed08 	str.w	lr, [sp, #-8]!
   1864c:	f7ff ffea 	bl	18624 <__aeabi_cfcmpeq>
   18650:	bf34      	ite	cc
   18652:	2001      	movcc	r0, #1
   18654:	2000      	movcs	r0, #0
   18656:	f85d fb08 	ldr.w	pc, [sp], #8
   1865a:	bf00      	nop

0001865c <__aeabi_fcmple>:
   1865c:	f84d ed08 	str.w	lr, [sp, #-8]!
   18660:	f7ff ffe0 	bl	18624 <__aeabi_cfcmpeq>
   18664:	bf94      	ite	ls
   18666:	2001      	movls	r0, #1
   18668:	2000      	movhi	r0, #0
   1866a:	f85d fb08 	ldr.w	pc, [sp], #8
   1866e:	bf00      	nop

00018670 <__aeabi_fcmpge>:
   18670:	f84d ed08 	str.w	lr, [sp, #-8]!
   18674:	f7ff ffd2 	bl	1861c <__aeabi_cfrcmple>
   18678:	bf94      	ite	ls
   1867a:	2001      	movls	r0, #1
   1867c:	2000      	movhi	r0, #0
   1867e:	f85d fb08 	ldr.w	pc, [sp], #8
   18682:	bf00      	nop

00018684 <__aeabi_fcmpgt>:
   18684:	f84d ed08 	str.w	lr, [sp, #-8]!
   18688:	f7ff ffc8 	bl	1861c <__aeabi_cfrcmple>
   1868c:	bf34      	ite	cc
   1868e:	2001      	movcc	r0, #1
   18690:	2000      	movcs	r0, #0
   18692:	f85d fb08 	ldr.w	pc, [sp], #8
   18696:	bf00      	nop

00018698 <__aeabi_f2iz>:
   18698:	ea4f 0240 	mov.w	r2, r0, lsl #1
   1869c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   186a0:	d30f      	bcc.n	186c2 <__aeabi_f2iz+0x2a>
   186a2:	f04f 039e 	mov.w	r3, #158	; 0x9e
   186a6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   186aa:	d90d      	bls.n	186c8 <__aeabi_f2iz+0x30>
   186ac:	ea4f 2300 	mov.w	r3, r0, lsl #8
   186b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   186b4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   186b8:	fa23 f002 	lsr.w	r0, r3, r2
   186bc:	bf18      	it	ne
   186be:	4240      	negne	r0, r0
   186c0:	4770      	bx	lr
   186c2:	f04f 0000 	mov.w	r0, #0
   186c6:	4770      	bx	lr
   186c8:	f112 0f61 	cmn.w	r2, #97	; 0x61
   186cc:	d101      	bne.n	186d2 <__aeabi_f2iz+0x3a>
   186ce:	0242      	lsls	r2, r0, #9
   186d0:	d105      	bne.n	186de <__aeabi_f2iz+0x46>
   186d2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   186d6:	bf08      	it	eq
   186d8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   186dc:	4770      	bx	lr
   186de:	f04f 0000 	mov.w	r0, #0
   186e2:	4770      	bx	lr

000186e4 <memcpy>:
   186e4:	2a0f      	cmp	r2, #15
   186e6:	b4f0      	push	{r4, r5, r6, r7}
   186e8:	d945      	bls.n	18776 <memcpy+0x92>
   186ea:	ea40 0301 	orr.w	r3, r0, r1
   186ee:	079b      	lsls	r3, r3, #30
   186f0:	d145      	bne.n	1877e <memcpy+0x9a>
   186f2:	f1a2 0710 	sub.w	r7, r2, #16
   186f6:	460c      	mov	r4, r1
   186f8:	4603      	mov	r3, r0
   186fa:	093f      	lsrs	r7, r7, #4
   186fc:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   18700:	3610      	adds	r6, #16
   18702:	6825      	ldr	r5, [r4, #0]
   18704:	3310      	adds	r3, #16
   18706:	3410      	adds	r4, #16
   18708:	f843 5c10 	str.w	r5, [r3, #-16]
   1870c:	f854 5c0c 	ldr.w	r5, [r4, #-12]
   18710:	f843 5c0c 	str.w	r5, [r3, #-12]
   18714:	f854 5c08 	ldr.w	r5, [r4, #-8]
   18718:	f843 5c08 	str.w	r5, [r3, #-8]
   1871c:	f854 5c04 	ldr.w	r5, [r4, #-4]
   18720:	f843 5c04 	str.w	r5, [r3, #-4]
   18724:	42b3      	cmp	r3, r6
   18726:	d1ec      	bne.n	18702 <memcpy+0x1e>
   18728:	1c7b      	adds	r3, r7, #1
   1872a:	f002 0c0f 	and.w	ip, r2, #15
   1872e:	f1bc 0f03 	cmp.w	ip, #3
   18732:	ea4f 1303 	mov.w	r3, r3, lsl #4
   18736:	4419      	add	r1, r3
   18738:	4403      	add	r3, r0
   1873a:	d922      	bls.n	18782 <memcpy+0x9e>
   1873c:	460e      	mov	r6, r1
   1873e:	461d      	mov	r5, r3
   18740:	4664      	mov	r4, ip
   18742:	f856 7b04 	ldr.w	r7, [r6], #4
   18746:	3c04      	subs	r4, #4
   18748:	2c03      	cmp	r4, #3
   1874a:	f845 7b04 	str.w	r7, [r5], #4
   1874e:	d8f8      	bhi.n	18742 <memcpy+0x5e>
   18750:	f1ac 0404 	sub.w	r4, ip, #4
   18754:	f002 0203 	and.w	r2, r2, #3
   18758:	f024 0403 	bic.w	r4, r4, #3
   1875c:	3404      	adds	r4, #4
   1875e:	4423      	add	r3, r4
   18760:	4421      	add	r1, r4
   18762:	b132      	cbz	r2, 18772 <memcpy+0x8e>
   18764:	440a      	add	r2, r1
   18766:	f811 4b01 	ldrb.w	r4, [r1], #1
   1876a:	4291      	cmp	r1, r2
   1876c:	f803 4b01 	strb.w	r4, [r3], #1
   18770:	d1f9      	bne.n	18766 <memcpy+0x82>
   18772:	bcf0      	pop	{r4, r5, r6, r7}
   18774:	4770      	bx	lr
   18776:	4603      	mov	r3, r0
   18778:	2a00      	cmp	r2, #0
   1877a:	d1f3      	bne.n	18764 <memcpy+0x80>
   1877c:	e7f9      	b.n	18772 <memcpy+0x8e>
   1877e:	4603      	mov	r3, r0
   18780:	e7f0      	b.n	18764 <memcpy+0x80>
   18782:	4662      	mov	r2, ip
   18784:	2a00      	cmp	r2, #0
   18786:	d1ed      	bne.n	18764 <memcpy+0x80>
   18788:	e7f3      	b.n	18772 <memcpy+0x8e>
   1878a:	bf00      	nop

0001878c <memset>:
   1878c:	0783      	lsls	r3, r0, #30
   1878e:	b4f0      	push	{r4, r5, r6, r7}
   18790:	d048      	beq.n	18824 <memset+0x98>
   18792:	1e54      	subs	r4, r2, #1
   18794:	2a00      	cmp	r2, #0
   18796:	d043      	beq.n	18820 <memset+0x94>
   18798:	b2cd      	uxtb	r5, r1
   1879a:	4603      	mov	r3, r0
   1879c:	e002      	b.n	187a4 <memset+0x18>
   1879e:	2c00      	cmp	r4, #0
   187a0:	d03e      	beq.n	18820 <memset+0x94>
   187a2:	4614      	mov	r4, r2
   187a4:	f803 5b01 	strb.w	r5, [r3], #1
   187a8:	f013 0f03 	tst.w	r3, #3
   187ac:	f104 32ff 	add.w	r2, r4, #4294967295
   187b0:	d1f5      	bne.n	1879e <memset+0x12>
   187b2:	2c03      	cmp	r4, #3
   187b4:	d92d      	bls.n	18812 <memset+0x86>
   187b6:	b2cd      	uxtb	r5, r1
   187b8:	2c0f      	cmp	r4, #15
   187ba:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   187be:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   187c2:	d918      	bls.n	187f6 <memset+0x6a>
   187c4:	f1a4 0710 	sub.w	r7, r4, #16
   187c8:	f103 0610 	add.w	r6, r3, #16
   187cc:	461a      	mov	r2, r3
   187ce:	093f      	lsrs	r7, r7, #4
   187d0:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   187d4:	6015      	str	r5, [r2, #0]
   187d6:	3210      	adds	r2, #16
   187d8:	f842 5c0c 	str.w	r5, [r2, #-12]
   187dc:	f842 5c08 	str.w	r5, [r2, #-8]
   187e0:	f842 5c04 	str.w	r5, [r2, #-4]
   187e4:	42b2      	cmp	r2, r6
   187e6:	d1f5      	bne.n	187d4 <memset+0x48>
   187e8:	f004 040f 	and.w	r4, r4, #15
   187ec:	3701      	adds	r7, #1
   187ee:	2c03      	cmp	r4, #3
   187f0:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   187f4:	d90d      	bls.n	18812 <memset+0x86>
   187f6:	461e      	mov	r6, r3
   187f8:	4622      	mov	r2, r4
   187fa:	3a04      	subs	r2, #4
   187fc:	f846 5b04 	str.w	r5, [r6], #4
   18800:	2a03      	cmp	r2, #3
   18802:	d8fa      	bhi.n	187fa <memset+0x6e>
   18804:	1f22      	subs	r2, r4, #4
   18806:	f004 0403 	and.w	r4, r4, #3
   1880a:	f022 0203 	bic.w	r2, r2, #3
   1880e:	3204      	adds	r2, #4
   18810:	4413      	add	r3, r2
   18812:	b12c      	cbz	r4, 18820 <memset+0x94>
   18814:	b2c9      	uxtb	r1, r1
   18816:	441c      	add	r4, r3
   18818:	f803 1b01 	strb.w	r1, [r3], #1
   1881c:	42a3      	cmp	r3, r4
   1881e:	d1fb      	bne.n	18818 <memset+0x8c>
   18820:	bcf0      	pop	{r4, r5, r6, r7}
   18822:	4770      	bx	lr
   18824:	4614      	mov	r4, r2
   18826:	4603      	mov	r3, r0
   18828:	e7c3      	b.n	187b2 <memset+0x26>
   1882a:	bf00      	nop

0001882c <strncpy>:
   1882c:	ea40 0301 	orr.w	r3, r0, r1
   18830:	079b      	lsls	r3, r3, #30
   18832:	b470      	push	{r4, r5, r6}
   18834:	d12b      	bne.n	1888e <strncpy+0x62>
   18836:	2a03      	cmp	r2, #3
   18838:	bf84      	itt	hi
   1883a:	460b      	movhi	r3, r1
   1883c:	4605      	movhi	r5, r0
   1883e:	d926      	bls.n	1888e <strncpy+0x62>
   18840:	4619      	mov	r1, r3
   18842:	f853 4b04 	ldr.w	r4, [r3], #4
   18846:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
   1884a:	ea26 0604 	bic.w	r6, r6, r4
   1884e:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   18852:	d105      	bne.n	18860 <strncpy+0x34>
   18854:	3a04      	subs	r2, #4
   18856:	f845 4b04 	str.w	r4, [r5], #4
   1885a:	2a03      	cmp	r2, #3
   1885c:	4619      	mov	r1, r3
   1885e:	d8ef      	bhi.n	18840 <strncpy+0x14>
   18860:	b19a      	cbz	r2, 1888a <strncpy+0x5e>
   18862:	780c      	ldrb	r4, [r1, #0]
   18864:	3a01      	subs	r2, #1
   18866:	1c6b      	adds	r3, r5, #1
   18868:	702c      	strb	r4, [r5, #0]
   1886a:	b13c      	cbz	r4, 1887c <strncpy+0x50>
   1886c:	b16a      	cbz	r2, 1888a <strncpy+0x5e>
   1886e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   18872:	3a01      	subs	r2, #1
   18874:	f803 4b01 	strb.w	r4, [r3], #1
   18878:	2c00      	cmp	r4, #0
   1887a:	d1f7      	bne.n	1886c <strncpy+0x40>
   1887c:	b12a      	cbz	r2, 1888a <strncpy+0x5e>
   1887e:	441a      	add	r2, r3
   18880:	2100      	movs	r1, #0
   18882:	f803 1b01 	strb.w	r1, [r3], #1
   18886:	4293      	cmp	r3, r2
   18888:	d1fb      	bne.n	18882 <strncpy+0x56>
   1888a:	bc70      	pop	{r4, r5, r6}
   1888c:	4770      	bx	lr
   1888e:	4605      	mov	r5, r0
   18890:	e7e6      	b.n	18860 <strncpy+0x34>
   18892:	bf00      	nop

00018894 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
   18894:	2100      	movs	r1, #0
  b	LoopCopyDataInit
   18896:	e003      	b.n	188a0 <LoopCopyDataInit>

00018898 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
   18898:	4b0a      	ldr	r3, [pc, #40]	; (188c4 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
   1889a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
   1889c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
   1889e:	3104      	adds	r1, #4

000188a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   188a0:	4809      	ldr	r0, [pc, #36]	; (188c8 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
   188a2:	4b0a      	ldr	r3, [pc, #40]	; (188cc <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
   188a4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
   188a6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
   188a8:	d3f6      	bcc.n	18898 <CopyDataInit>
	ldr	r2, =_sbss
   188aa:	4a09      	ldr	r2, [pc, #36]	; (188d0 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
   188ac:	e002      	b.n	188b4 <LoopFillZerobss>

000188ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
   188ae:	2300      	movs	r3, #0
	str	r3, [r2], #4
   188b0:	f842 3b04 	str.w	r3, [r2], #4

000188b4 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
   188b4:	4b07      	ldr	r3, [pc, #28]	; (188d4 <LoopFillZerobss+0x20>)
	cmp	r2, r3
   188b6:	429a      	cmp	r2, r3
	bcc	FillZerobss
   188b8:	d3f9      	bcc.n	188ae <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
   188ba:	f7e7 fd3f 	bl	33c <SystemInit>
/* Call the application's entry point.*/
	bl	main
   188be:	f7fe fde5 	bl	1748c <main>
	bx	lr    
   188c2:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
   188c4:	00018a50 	.word	0x00018a50
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   188c8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
   188cc:	20000488 	.word	0x20000488
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
   188d0:	20000488 	.word	0x20000488
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
   188d4:	2004c7a8 	.word	0x2004c7a8

000188d8 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
   188d8:	e7fe      	b.n	188d8 <ADC1_2_IRQHandler>
   188da:	0000      	movs	r0, r0
   188dc:	206f4e20 	.word	0x206f4e20
   188e0:	656c6449 	.word	0x656c6449
   188e4:	65764520 	.word	0x65764520
   188e8:	2073746e 	.word	0x2073746e
   188ec:	69617661 	.word	0x69617661
   188f0:	6c62616c 	.word	0x6c62616c
   188f4:	000d0a65 	.word	0x000d0a65
   188f8:	6c6c616d 	.word	0x6c6c616d
   188fc:	6620636f 	.word	0x6620636f
   18900:	6520726f 	.word	0x6520726f
   18904:	746e6576 	.word	0x746e6576
   18908:	61747320 	.word	0x61747320
   1890c:	66206b63 	.word	0x66206b63
   18910:	656c6961 	.word	0x656c6961
   18914:	000d0a64 	.word	0x000d0a64
   18918:	72656874 	.word	0x72656874
   1891c:	72612065 	.word	0x72612065
   18920:	65732065 	.word	0x65732065
   18924:	726f736e 	.word	0x726f736e
   18928:	73696d20 	.word	0x73696d20
   1892c:	676e6973 	.word	0x676e6973
   18930:	61656420 	.word	0x61656420
   18934:	6e696c64 	.word	0x6e696c64
   18938:	000d0a65 	.word	0x000d0a65
   1893c:	72656874 	.word	0x72656874
   18940:	72612065 	.word	0x72612065
   18944:	65732065 	.word	0x65732065
   18948:	6e617672 	.word	0x6e617672
   1894c:	6d207374 	.word	0x6d207374
   18950:	69737369 	.word	0x69737369
   18954:	6420676e 	.word	0x6420676e
   18958:	6c646165 	.word	0x6c646165
   1895c:	0a656e69 	.word	0x0a656e69
   18960:	0000000d 	.word	0x0000000d
   18964:	6f727245 	.word	0x6f727245
   18968:	54203a72 	.word	0x54203a72
   1896c:	20736968 	.word	0x20736968
   18970:	6e657665 	.word	0x6e657665
   18974:	61682074 	.word	0x61682074
   18978:	72612073 	.word	0x72612073
   1897c:	65766972 	.word	0x65766972
   18980:	0a212164 	.word	0x0a212164
   18984:	0000000d 	.word	0x0000000d
   18988:	454c4449 	.word	0x454c4449
   1898c:	00000000 	.word	0x00000000

00018990 <ulKernelPriority>:
   18990:	0000007f                                ....

00018994 <heapSTRUCT_SIZE>:
   18994:	00010010                                         ..

00018996 <version>:
   18996:	3d5a0001                                         ..

00018998 <utm_east0>:
   18998:	00093d5a                                Z=..

0001899c <utm_north0>:
   1899c:	005875e6                                .uX.

000189a0 <climb_pgain>:
   189a0:	bcf5c28f                                ....

000189a4 <climb_igain>:
   189a4:	3dcccccd                                ...=

000189a8 <level_gaz>:
   189a8:	3e9eb852                                R..>

000189ac <nav_east0>:
   189ac:	00093d5a                                Z=..

000189b0 <nav_north0>:
   189b0:	005875e6                                .uX.

000189b4 <nb_waypoint>:
   189b4:	00000007 33323130 37363534 42413938     ....0123456789AB
   189c4:	46454443                                CDEF

000189c8 <failsafe>:
	...
   189dc:	20574246 746f6f42 20676e69 3a644924     FBW Booting $Id:
   189ec:	69616d20 2c632e6e 2e312076 30322033      main.c,v 1.3 20
   189fc:	312f3830 32322f30 3a393120 313a3134     08/10/22 19:41:1
   18a0c:	61632039 20657373 20707845 000d0a24     9 casse Exp $...
   18a1c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   18a2c:	000d0a30 00000d0a 65532d52 6e617672     0.......R-Servan
   18a3c:	00000074 736e6573 0000726f 76726573     t...sensor..serv
   18a4c:	00746e61                                ant.
