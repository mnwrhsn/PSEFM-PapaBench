
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 40 01 20 c9 87 01 00 0d 88 01 00 0d 88 01 00     .@. ............
      10:	0d 88 01 00 0d 88 01 00 0d 88 01 00 00 00 00 00     ................
	...
      2c:	15 57 00 00 0d 88 01 00 00 00 00 00 21 58 00 00     .W..........!X..
      3c:	5d 58 00 00 0d 88 01 00 0d 88 01 00 0d 88 01 00     ]X..............
      4c:	0d 88 01 00 0d 88 01 00 0d 88 01 00 0d 88 01 00     ................
      5c:	0d 88 01 00 0d 88 01 00 0d 88 01 00 0d 88 01 00     ................
      6c:	0d 88 01 00 0d 88 01 00 0d 88 01 00 0d 88 01 00     ................
      7c:	0d 88 01 00 0d 88 01 00 0d 88 01 00 0d 88 01 00     ................
      8c:	0d 88 01 00 0d 88 01 00 0d 88 01 00 0d 88 01 00     ................
      9c:	0d 88 01 00 0d 88 01 00 0d 88 01 00 0d 88 01 00     ................
      ac:	0d 88 01 00 0d 88 01 00 0d 88 01 00 0d 88 01 00     ................
      bc:	0d 88 01 00 0d 88 01 00 0d 88 01 00 0d 88 01 00     ................
      cc:	0d 88 01 00 0d 88 01 00 0d 88 01 00 0d 88 01 00     ................
      dc:	0d 88 01 00 0d 88 01 00 0d 88 01 00 0d 88 01 00     ................
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
     31c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     31e:	2300      	movs	r3, #0
     320:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     322:	683b      	ldr	r3, [r7, #0]
     324:	687a      	ldr	r2, [r7, #4]
     326:	e843 2300 	strex	r3, r2, [r3]
     32a:	60fb      	str	r3, [r7, #12]
   return(result);
     32c:	68fb      	ldr	r3, [r7, #12]
}
     32e:	4618      	mov	r0, r3
     330:	3714      	adds	r7, #20
     332:	46bd      	mov	sp, r7
     334:	f85d 7b04 	ldr.w	r7, [sp], #4
     338:	4770      	bx	lr
     33a:	bf00      	nop

0000033c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     344:	f2c4 0302 	movt	r3, #16386	; 0x4002
     348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     350:	6812      	ldr	r2, [r2, #0]
     352:	f042 0201 	orr.w	r2, r2, #1
     356:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     35c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     364:	f2c4 0302 	movt	r3, #16386	; 0x4002
     368:	6859      	ldr	r1, [r3, #4]
     36a:	2300      	movs	r3, #0
     36c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     370:	400b      	ands	r3, r1
     372:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     378:	f2c4 0302 	movt	r3, #16386	; 0x4002
     37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     380:	f2c4 0202 	movt	r2, #16386	; 0x4002
     384:	6812      	ldr	r2, [r2, #0]
     386:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     38a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     38e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b8:	6852      	ldr	r2, [r2, #4]
     3ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3cc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ce:	f000 f8a7 	bl	520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     3d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3de:	609a      	str	r2, [r3, #8]
#endif
}
     3e0:	bd80      	pop	{r7, pc}
     3e2:	bf00      	nop

000003e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3e4:	b480      	push	{r7}
     3e6:	b085      	sub	sp, #20
     3e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	60fb      	str	r3, [r7, #12]
     3ee:	2300      	movs	r3, #0
     3f0:	60bb      	str	r3, [r7, #8]
     3f2:	2300      	movs	r3, #0
     3f4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3fe:	685b      	ldr	r3, [r3, #4]
     400:	f003 030c 	and.w	r3, r3, #12
     404:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b04      	cmp	r3, #4
     40a:	d00d      	beq.n	428 <SystemCoreClockUpdate+0x44>
     40c:	2b08      	cmp	r3, #8
     40e:	d015      	beq.n	43c <SystemCoreClockUpdate+0x58>
     410:	2b00      	cmp	r3, #0
     412:	d15b      	bne.n	4cc <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     414:	f240 0300 	movw	r3, #0
     418:	f2c2 0300 	movt	r3, #8192	; 0x2000
     41c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     420:	f2c0 027a 	movt	r2, #122	; 0x7a
     424:	601a      	str	r2, [r3, #0]
      break;
     426:	e05b      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     428:	f240 0300 	movw	r3, #0
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     434:	f2c0 027a 	movt	r2, #122	; 0x7a
     438:	601a      	str	r2, [r3, #0]
      break;
     43a:	e051      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     440:	f2c4 0302 	movt	r3, #16386	; 0x4002
     444:	685b      	ldr	r3, [r3, #4]
     446:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     44a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     44c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     450:	f2c4 0302 	movt	r3, #16386	; 0x4002
     454:	685b      	ldr	r3, [r3, #4]
     456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     45a:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     45c:	68bb      	ldr	r3, [r7, #8]
     45e:	0c9b      	lsrs	r3, r3, #18
     460:	3302      	adds	r3, #2
     462:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     470:	f2c0 033d 	movt	r3, #61	; 0x3d
     474:	fb03 f202 	mul.w	r2, r3, r2
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	601a      	str	r2, [r3, #0]
     482:	e022      	b.n	4ca <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     488:	f2c4 0302 	movt	r3, #16386	; 0x4002
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     492:	2b00      	cmp	r3, #0
     494:	d00c      	beq.n	4b0 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     496:	68ba      	ldr	r2, [r7, #8]
     498:	f44f 6310 	mov.w	r3, #2304	; 0x900
     49c:	f2c0 033d 	movt	r3, #61	; 0x3d
     4a0:	fb03 f202 	mul.w	r2, r3, r2
     4a4:	f240 0300 	movw	r3, #0
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	601a      	str	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     4b0:	68ba      	ldr	r2, [r7, #8]
     4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
     4ba:	fb03 f202 	mul.w	r2, r3, r2
     4be:	f240 0300 	movw	r3, #0
     4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4c8:	e00a      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
     4ca:	e009      	b.n	4e0 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     4cc:	f240 0300 	movw	r3, #0
     4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     4d8:	f2c0 027a 	movt	r2, #122	; 0x7a
     4dc:	601a      	str	r2, [r3, #0]
      break;
     4de:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ee:	091a      	lsrs	r2, r3, #4
     4f0:	f240 0304 	movw	r3, #4
     4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4f8:	5c9b      	ldrb	r3, [r3, r2]
     4fa:	b2db      	uxtb	r3, r3
     4fc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     4fe:	f240 0300 	movw	r3, #0
     502:	f2c2 0300 	movt	r3, #8192	; 0x2000
     506:	681a      	ldr	r2, [r3, #0]
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	40da      	lsrs	r2, r3
     50c:	f240 0300 	movw	r3, #0
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
}
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     524:	f000 f802 	bl	52c <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     528:	bd80      	pop	{r7, pc}
     52a:	bf00      	nop

0000052c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     532:	2300      	movs	r3, #0
     534:	607b      	str	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     556:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     560:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3301      	adds	r3, #1
     566:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d103      	bne.n	576 <SetSysClockTo72+0x4a>
     56e:	687b      	ldr	r3, [r7, #4]
     570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     574:	d1ed      	bne.n	552 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     57e:	681b      	ldr	r3, [r3, #0]
     580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     584:	2b00      	cmp	r3, #0
     586:	d002      	beq.n	58e <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     588:	2301      	movs	r3, #1
     58a:	603b      	str	r3, [r7, #0]
     58c:	e001      	b.n	592 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     58e:	2300      	movs	r3, #0
     590:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     592:	683b      	ldr	r3, [r7, #0]
     594:	2b01      	cmp	r3, #1
     596:	f040 8094 	bne.w	6c2 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     59e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5aa:	6812      	ldr	r2, [r2, #0]
     5ac:	f042 0210 	orr.w	r2, r2, #16
     5b0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     5b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5be:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	f022 0203 	bic.w	r2, r2, #3
     5c8:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     5ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5da:	6812      	ldr	r2, [r2, #0]
     5dc:	f042 0202 	orr.w	r2, r2, #2
     5e0:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5f2:	6852      	ldr	r2, [r2, #4]
     5f4:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     602:	f2c4 0202 	movt	r2, #16386	; 0x4002
     606:	6852      	ldr	r2, [r2, #4]
     608:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     616:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61a:	6852      	ldr	r2, [r2, #4]
     61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     620:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     626:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     632:	6852      	ldr	r2, [r2, #4]
     634:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     638:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     63e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     646:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64a:	6852      	ldr	r2, [r2, #4]
     64c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     650:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     65e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     662:	6812      	ldr	r2, [r2, #0]
     664:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     668:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     66a:	bf00      	nop
     66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     670:	f2c4 0302 	movt	r3, #16386	; 0x4002
     674:	681b      	ldr	r3, [r3, #0]
     676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     67a:	2b00      	cmp	r3, #0
     67c:	d0f6      	beq.n	66c <SetSysClockTo72+0x140>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     682:	f2c4 0302 	movt	r3, #16386	; 0x4002
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68e:	6852      	ldr	r2, [r2, #4]
     690:	f022 0203 	bic.w	r2, r2, #3
     694:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     69a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a6:	6852      	ldr	r2, [r2, #4]
     6a8:	f042 0202 	orr.w	r2, r2, #2
     6ac:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6ae:	bf00      	nop
     6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 030c 	and.w	r3, r3, #12
     6be:	2b08      	cmp	r3, #8
     6c0:	d1f6      	bne.n	6b0 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     6c2:	370c      	adds	r7, #12
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr
     6cc:	00018a54 	.word	0x00018a54
     6d0:	20000000 	.word	0x20000000
     6d4:	20000320 	.word	0x20000320
     6d8:	20000320 	.word	0x20000320
     6dc:	2000b32c 	.word	0x2000b32c

000006e0 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     6e0:	b480      	push	{r7}
     6e2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f4:	6812      	ldr	r2, [r2, #0]
     6f6:	f042 0201 	orr.w	r2, r2, #1
     6fa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     6fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     700:	f2c4 0202 	movt	r2, #16386	; 0x4002
     704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     708:	f2c4 0302 	movt	r3, #16386	; 0x4002
     70c:	6859      	ldr	r1, [r3, #4]
     70e:	2300      	movs	r3, #0
     710:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     714:	400b      	ands	r3, r1
     716:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     71c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	f2c4 0202 	movt	r2, #16386	; 0x4002
     728:	6812      	ldr	r2, [r2, #0]
     72a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     72e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     732:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     74a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     758:	f2c4 0202 	movt	r2, #16386	; 0x4002
     75c:	6852      	ldr	r2, [r2, #4]
     75e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     762:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 0302 	movt	r3, #16386	; 0x4002
     76c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     770:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     77c:	b480      	push	{r7}
     77e:	b083      	sub	sp, #12
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     79a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6812      	ldr	r2, [r2, #0]
     7ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7b2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     7ba:	d003      	beq.n	7c4 <RCC_HSEConfig+0x48>
     7bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     7c0:	d00d      	beq.n	7de <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;

    default:
      break;
     7c2:	e019      	b.n	7f8 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d4:	6812      	ldr	r2, [r2, #0]
     7d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     7da:	601a      	str	r2, [r3, #0]
      break;
     7dc:	e00c      	b.n	7f8 <RCC_HSEConfig+0x7c>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ee:	6812      	ldr	r2, [r2, #0]
     7f0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     7f4:	601a      	str	r2, [r3, #0]
      break;
     7f6:	bf00      	nop

    default:
      break;
  }
}
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     800:	4770      	bx	lr
     802:	bf00      	nop

00000804 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     80a:	2300      	movs	r3, #0
     80c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     80e:	2300      	movs	r3, #0
     810:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     812:	2300      	movs	r3, #0
     814:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     816:	2031      	movs	r0, #49	; 0x31
     818:	f000 fba2 	bl	f60 <RCC_GetFlagStatus>
     81c:	4603      	mov	r3, r0
     81e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     820:	683b      	ldr	r3, [r7, #0]
     822:	3301      	adds	r3, #1
     824:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     826:	683b      	ldr	r3, [r7, #0]
     828:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     82c:	d002      	beq.n	834 <RCC_WaitForHSEStartUp+0x30>
     82e:	79bb      	ldrb	r3, [r7, #6]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     834:	2031      	movs	r0, #49	; 0x31
     836:	f000 fb93 	bl	f60 <RCC_GetFlagStatus>
     83a:	4603      	mov	r3, r0
     83c:	2b00      	cmp	r3, #0
     83e:	d002      	beq.n	846 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     840:	2301      	movs	r3, #1
     842:	71fb      	strb	r3, [r7, #7]
     844:	e001      	b.n	84a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     846:	2300      	movs	r3, #0
     848:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     84a:	79fb      	ldrb	r3, [r7, #7]
}
     84c:	4618      	mov	r0, r3
     84e:	3708      	adds	r7, #8
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}

00000854 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     854:	b480      	push	{r7}
     856:	b085      	sub	sp, #20
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     85e:	2300      	movs	r3, #0
     860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     866:	f2c4 0302 	movt	r3, #16386	; 0x4002
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     874:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     876:	79fb      	ldrb	r3, [r7, #7]
     878:	00db      	lsls	r3, r3, #3
     87a:	68fa      	ldr	r2, [r7, #12]
     87c:	4313      	orrs	r3, r2
     87e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     884:	f2c4 0302 	movt	r3, #16386	; 0x4002
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	3714      	adds	r7, #20
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	4603      	mov	r3, r0
     8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8a2:	2300      	movs	r3, #0
     8a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8a8:	79fa      	ldrb	r2, [r7, #7]
     8aa:	601a      	str	r2, [r3, #0]
}
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     8b8:	b480      	push	{r7}
     8ba:	b085      	sub	sp, #20
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     8c2:	2300      	movs	r3, #0
     8c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     8d8:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     8da:	687a      	ldr	r2, [r7, #4]
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	4313      	orrs	r3, r2
     8e0:	68fa      	ldr	r2, [r7, #12]
     8e2:	4313      	orrs	r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	605a      	str	r2, [r3, #4]
}
     8f2:	3714      	adds	r7, #20
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     906:	2360      	movs	r3, #96	; 0x60
     908:	f2c4 2342 	movt	r3, #16962	; 0x4242
     90c:	79fa      	ldrb	r2, [r7, #7]
     90e:	601a      	str	r2, [r3, #0]
}
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     930:	685b      	ldr	r3, [r3, #4]
     932:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	687b      	ldr	r3, [r7, #4]
     940:	4313      	orrs	r3, r2
     942:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     948:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94c:	68fa      	ldr	r2, [r7, #12]
     94e:	605a      	str	r2, [r3, #4]
}
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     95c:	b480      	push	{r7}
     95e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	685b      	ldr	r3, [r3, #4]
     96a:	b2db      	uxtb	r3, r3
     96c:	f003 030c 	and.w	r3, r3, #12
     970:	b2db      	uxtb	r3, r3
}
     972:	4618      	mov	r0, r3
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     97c:	b480      	push	{r7}
     97e:	b085      	sub	sp, #20
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     984:	2300      	movs	r3, #0
     986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     990:	685b      	ldr	r3, [r3, #4]
     992:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     99a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4313      	orrs	r3, r2
     9a2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ac:	68fa      	ldr	r2, [r7, #12]
     9ae:	605a      	str	r2, [r3, #4]
}
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     9da:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4313      	orrs	r3, r2
     9e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	605a      	str	r2, [r3, #4]
}
     9f0:	3714      	adds	r7, #20
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     9fc:	b480      	push	{r7}
     9fe:	b085      	sub	sp, #20
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a04:	2300      	movs	r3, #0
     a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a1a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	68fa      	ldr	r2, [r7, #12]
     a22:	4313      	orrs	r3, r2
     a24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	605a      	str	r2, [r3, #4]
}
     a32:	3714      	adds	r7, #20
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr

00000a3c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a3c:	b480      	push	{r7}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	71fa      	strb	r2, [r7, #7]
     a48:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a4a:	79bb      	ldrb	r3, [r7, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00e      	beq.n	a6e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     a50:	f241 0309 	movw	r3, #4105	; 0x1009
     a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a58:	f241 0209 	movw	r2, #4105	; 0x1009
     a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	b2d1      	uxtb	r1, r2
     a64:	79fa      	ldrb	r2, [r7, #7]
     a66:	430a      	orrs	r2, r1
     a68:	b2d2      	uxtb	r2, r2
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e00f      	b.n	a8e <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     a6e:	f241 0309 	movw	r3, #4105	; 0x1009
     a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a76:	f241 0209 	movw	r2, #4105	; 0x1009
     a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	b2d1      	uxtb	r1, r2
     a82:	79fa      	ldrb	r2, [r7, #7]
     a84:	43d2      	mvns	r2, r2
     a86:	b2d2      	uxtb	r2, r2
     a88:	400a      	ands	r2, r1
     a8a:	b2d2      	uxtb	r2, r2
     a8c:	701a      	strb	r2, [r3, #0]
  }
}
     a8e:	370c      	adds	r7, #12
     a90:	46bd      	mov	sp, r7
     a92:	f85d 7b04 	ldr.w	r7, [sp], #4
     a96:	4770      	bx	lr

00000a98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     aa0:	23d8      	movs	r3, #216	; 0xd8
     aa2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab2:	4770      	bx	lr

00000ab4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ab4:	b480      	push	{r7}
     ab6:	b085      	sub	sp, #20
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     abc:	2300      	movs	r3, #0
     abe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ad2:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     afe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b0a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b12:	2200      	movs	r2, #0
     b14:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	2b01      	cmp	r3, #1
     b1a:	d002      	beq.n	b22 <RCC_LSEConfig+0x2e>
     b1c:	2b04      	cmp	r3, #4
     b1e:	d007      	beq.n	b30 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;

    default:
      break;
     b20:	e00d      	b.n	b3e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
      break;
     b2e:	e006      	b.n	b3e <RCC_LSEConfig+0x4a>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b30:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b38:	2205      	movs	r2, #5
     b3a:	701a      	strb	r2, [r3, #0]
      break;
     b3c:	bf00      	nop

    default:
      break;
  }
}
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr

00000b48 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b48:	b480      	push	{r7}
     b4a:	b083      	sub	sp, #12
     b4c:	af00      	add	r7, sp, #0
     b4e:	4603      	mov	r3, r0
     b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     b52:	f44f 6390 	mov.w	r3, #1152	; 0x480
     b56:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b5a:	79fa      	ldrb	r2, [r7, #7]
     b5c:	601a      	str	r2, [r3, #0]
}
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	f85d 7b04 	ldr.w	r7, [sp], #4
     b66:	4770      	bx	lr

00000b68 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b80:	6a11      	ldr	r1, [r2, #32]
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	430a      	orrs	r2, r1
     b86:	621a      	str	r2, [r3, #32]
}
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     b94:	b480      	push	{r7}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	4603      	mov	r3, r0
     b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     b9e:	f240 433c 	movw	r3, #1084	; 0x43c
     ba2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ba6:	79fa      	ldrb	r2, [r7, #7]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     bb4:	b480      	push	{r7}
     bb6:	b087      	sub	sp, #28
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	617b      	str	r3, [r7, #20]
     bc0:	2300      	movs	r3, #0
     bc2:	613b      	str	r3, [r7, #16]
     bc4:	2300      	movs	r3, #0
     bc6:	60fb      	str	r3, [r7, #12]
     bc8:	2300      	movs	r3, #0
     bca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	f003 030c 	and.w	r3, r3, #12
     bda:	617b      	str	r3, [r7, #20]

  switch (tmp)
     bdc:	697b      	ldr	r3, [r7, #20]
     bde:	2b04      	cmp	r3, #4
     be0:	d00a      	beq.n	bf8 <RCC_GetClocksFreq+0x44>
     be2:	2b08      	cmp	r3, #8
     be4:	d00f      	beq.n	c06 <RCC_GetClocksFreq+0x52>
     be6:	2b00      	cmp	r3, #0
     be8:	d14c      	bne.n	c84 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     bea:	687a      	ldr	r2, [r7, #4]
     bec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bf0:	f2c0 037a 	movt	r3, #122	; 0x7a
     bf4:	6013      	str	r3, [r2, #0]
      break;
     bf6:	e04c      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     bf8:	687a      	ldr	r2, [r7, #4]
     bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bfe:	f2c0 037a 	movt	r3, #122	; 0x7a
     c02:	6013      	str	r3, [r2, #0]
      break;
     c04:	e045      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c14:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c24:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     c26:	693b      	ldr	r3, [r7, #16]
     c28:	0c9b      	lsrs	r3, r3, #18
     c2a:	3302      	adds	r3, #2
     c2c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	2b00      	cmp	r3, #0
     c32:	d109      	bne.n	c48 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c34:	693a      	ldr	r2, [r7, #16]
     c36:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c3a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c3e:	fb03 f202 	mul.w	r2, r3, r2
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	601a      	str	r2, [r3, #0]
     c46:	e01c      	b.n	c82 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     c5a:	693a      	ldr	r2, [r7, #16]
     c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c60:	f2c0 033d 	movt	r3, #61	; 0x3d
     c64:	fb03 f202 	mul.w	r2, r3, r2
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	e009      	b.n	c82 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     c6e:	693a      	ldr	r2, [r7, #16]
     c70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c74:	f2c0 037a 	movt	r3, #122	; 0x7a
     c78:	fb03 f202 	mul.w	r2, r3, r2
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     c80:	e007      	b.n	c92 <RCC_GetClocksFreq+0xde>
     c82:	e006      	b.n	c92 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c84:	687a      	ldr	r2, [r7, #4]
     c86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c8a:	f2c0 037a 	movt	r3, #122	; 0x7a
     c8e:	6013      	str	r3, [r2, #0]
      break;
     c90:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ca2:	697b      	ldr	r3, [r7, #20]
     ca4:	091b      	lsrs	r3, r3, #4
     ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ca8:	f240 0314 	movw	r3, #20
     cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb0:	697a      	ldr	r2, [r7, #20]
     cb2:	4413      	add	r3, r2
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	40da      	lsrs	r2, r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     cd4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	0a1b      	lsrs	r3, r3, #8
     cda:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cdc:	f240 0314 	movw	r3, #20
     ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ce4:	697a      	ldr	r2, [r7, #20]
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	685a      	ldr	r2, [r3, #4]
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	40da      	lsrs	r2, r3
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	0adb      	lsrs	r3, r3, #11
     d0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d10:	f240 0314 	movw	r3, #20
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	4413      	add	r3, r2
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	b2db      	uxtb	r3, r3
     d20:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	40da      	lsrs	r2, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	0b9b      	lsrs	r3, r3, #14
     d42:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d44:	f240 0324 	movw	r3, #36	; 0x24
     d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4c:	697a      	ldr	r2, [r7, #20]
     d4e:	4413      	add	r3, r2
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	68da      	ldr	r2, [r3, #12]
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	fbb2 f2f3 	udiv	r2, r2, r3
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	611a      	str	r2, [r3, #16]
}
     d64:	371c      	adds	r7, #28
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     d70:	b480      	push	{r7}
     d72:	b083      	sub	sp, #12
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	460b      	mov	r3, r1
     d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     d7c:	78fb      	ldrb	r3, [r7, #3]
     d7e:	2b00      	cmp	r3, #0
     d80:	d00c      	beq.n	d9c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d92:	6951      	ldr	r1, [r2, #20]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	430a      	orrs	r2, r1
     d98:	615a      	str	r2, [r3, #20]
     d9a:	e00c      	b.n	db6 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     da8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dac:	6951      	ldr	r1, [r2, #20]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	43d2      	mvns	r2, r2
     db2:	400a      	ands	r2, r1
     db4:	615a      	str	r2, [r3, #20]
  }
}
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
     dea:	e00c      	b.n	e06 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6991      	ldr	r1, [r2, #24]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	619a      	str	r2, [r3, #24]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	69d1      	ldr	r1, [r2, #28]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	61da      	str	r2, [r3, #28]
     e3a:	e00c      	b.n	e56 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	69d1      	ldr	r1, [r2, #28]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	61da      	str	r2, [r3, #28]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	68d1      	ldr	r1, [r2, #12]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	60da      	str	r2, [r3, #12]
     e8a:	e00c      	b.n	ea6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	68d1      	ldr	r1, [r2, #12]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	60da      	str	r2, [r3, #12]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	6911      	ldr	r1, [r2, #16]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	611a      	str	r2, [r3, #16]
     eda:	e00c      	b.n	ef6 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	6911      	ldr	r1, [r2, #16]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	611a      	str	r2, [r3, #16]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f0a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f12:	79fa      	ldrb	r2, [r7, #7]
     f14:	601a      	str	r2, [r3, #0]
}
     f16:	370c      	adds	r7, #12
     f18:	46bd      	mov	sp, r7
     f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1e:	4770      	bx	lr

00000f20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f20:	b480      	push	{r7}
     f22:	b083      	sub	sp, #12
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f2a:	234c      	movs	r3, #76	; 0x4c
     f2c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	601a      	str	r2, [r3, #0]
}
     f34:	370c      	adds	r7, #12
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f4a:	f241 0307 	movw	r3, #4103	; 0x1007
     f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f52:	79fa      	ldrb	r2, [r7, #7]
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5e:	4770      	bx	lr

00000f60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f60:	b480      	push	{r7}
     f62:	b087      	sub	sp, #28
     f64:	af00      	add	r7, sp, #0
     f66:	4603      	mov	r3, r0
     f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     f6e:	2300      	movs	r3, #0
     f70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     f72:	2300      	movs	r3, #0
     f74:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     f76:	79fb      	ldrb	r3, [r7, #7]
     f78:	095b      	lsrs	r3, r3, #5
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b01      	cmp	r3, #1
     f82:	d106      	bne.n	f92 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	617b      	str	r3, [r7, #20]
     f90:	e00f      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	2b02      	cmp	r3, #2
     f96:	d106      	bne.n	fa6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa0:	6a1b      	ldr	r3, [r3, #32]
     fa2:	617b      	str	r3, [r7, #20]
     fa4:	e005      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	f003 031f 	and.w	r3, r3, #31
     fb8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	697a      	ldr	r2, [r7, #20]
     fbe:	fa22 f303 	lsr.w	r3, r2, r3
     fc2:	f003 0301 	and.w	r3, r3, #1
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
     fca:	2301      	movs	r3, #1
     fcc:	74fb      	strb	r3, [r7, #19]
     fce:	e001      	b.n	fd4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
     fd0:	2300      	movs	r3, #0
     fd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     fd4:	7cfb      	ldrb	r3, [r7, #19]
}
     fd6:	4618      	mov	r0, r3
     fd8:	371c      	adds	r7, #28
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop

00000fe4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     ffe:	625a      	str	r2, [r3, #36]	; 0x24
}
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr

00001008 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1012:	2300      	movs	r3, #0
    1014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    101e:	689a      	ldr	r2, [r3, #8]
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4013      	ands	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	d002      	beq.n	102e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1028:	2301      	movs	r3, #1
    102a:	73fb      	strb	r3, [r7, #15]
    102c:	e001      	b.n	1032 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    102e:	2300      	movs	r3, #0
    1030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	4603      	mov	r3, r0
    1048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    104a:	f241 030a 	movw	r3, #4106	; 0x100a
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	79fa      	ldrb	r2, [r7, #7]
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	370c      	adds	r7, #12
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr

00001060 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1068:	687a      	ldr	r2, [r7, #4]
    106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    106e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1072:	429a      	cmp	r2, r3
    1074:	d108      	bne.n	1088 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1076:	2004      	movs	r0, #4
    1078:	2101      	movs	r1, #1
    107a:	f7ff fef1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    107e:	2004      	movs	r0, #4
    1080:	2100      	movs	r1, #0
    1082:	f7ff feed 	bl	e60 <RCC_APB2PeriphResetCmd>
    1086:	e060      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    108e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1092:	429a      	cmp	r2, r3
    1094:	d108      	bne.n	10a8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1096:	2008      	movs	r0, #8
    1098:	2101      	movs	r1, #1
    109a:	f7ff fee1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    109e:	2008      	movs	r0, #8
    10a0:	2100      	movs	r1, #0
    10a2:	f7ff fedd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10a6:	e050      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10a8:	687a      	ldr	r2, [r7, #4]
    10aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10b2:	429a      	cmp	r2, r3
    10b4:	d108      	bne.n	10c8 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10b6:	2010      	movs	r0, #16
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff fed1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10be:	2010      	movs	r0, #16
    10c0:	2100      	movs	r1, #0
    10c2:	f7ff fecd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10c6:	e040      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    10ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10d2:	429a      	cmp	r2, r3
    10d4:	d108      	bne.n	10e8 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10d6:	2020      	movs	r0, #32
    10d8:	2101      	movs	r1, #1
    10da:	f7ff fec1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2100      	movs	r1, #0
    10e2:	f7ff febd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10e6:	e030      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOE)
    10e8:	687a      	ldr	r2, [r7, #4]
    10ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    10ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10f2:	429a      	cmp	r2, r3
    10f4:	d108      	bne.n	1108 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f6:	2040      	movs	r0, #64	; 0x40
    10f8:	2101      	movs	r1, #1
    10fa:	f7ff feb1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    10fe:	2040      	movs	r0, #64	; 0x40
    1100:	2100      	movs	r1, #0
    1102:	f7ff fead 	bl	e60 <RCC_APB2PeriphResetCmd>
    1106:	e020      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOF)
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    110e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1112:	429a      	cmp	r2, r3
    1114:	d108      	bne.n	1128 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1116:	2080      	movs	r0, #128	; 0x80
    1118:	2101      	movs	r1, #1
    111a:	f7ff fea1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111e:	2080      	movs	r0, #128	; 0x80
    1120:	2100      	movs	r1, #0
    1122:	f7ff fe9d 	bl	e60 <RCC_APB2PeriphResetCmd>
    1126:	e010      	b.n	114a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    112e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1132:	429a      	cmp	r2, r3
    1134:	d109      	bne.n	114a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2101      	movs	r1, #1
    113c:	f7ff fe90 	bl	e60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1140:	f44f 7080 	mov.w	r0, #256	; 0x100
    1144:	2100      	movs	r1, #0
    1146:	f7ff fe8b 	bl	e60 <RCC_APB2PeriphResetCmd>
    }
  }
}
    114a:	3708      	adds	r7, #8
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}

00001150 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1154:	2001      	movs	r0, #1
    1156:	2101      	movs	r1, #1
    1158:	f7ff fe82 	bl	e60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    115c:	2001      	movs	r0, #1
    115e:	2100      	movs	r1, #0
    1160:	f7ff fe7e 	bl	e60 <RCC_APB2PeriphResetCmd>
}
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop

00001168 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1168:	b480      	push	{r7}
    116a:	b089      	sub	sp, #36	; 0x24
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
    1170:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1172:	2300      	movs	r3, #0
    1174:	61fb      	str	r3, [r7, #28]
    1176:	2300      	movs	r3, #0
    1178:	613b      	str	r3, [r7, #16]
    117a:	2300      	movs	r3, #0
    117c:	61bb      	str	r3, [r7, #24]
    117e:	2300      	movs	r3, #0
    1180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1182:	2300      	movs	r3, #0
    1184:	617b      	str	r3, [r7, #20]
    1186:	2300      	movs	r3, #0
    1188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	f003 030f 	and.w	r3, r3, #15
    1192:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	78db      	ldrb	r3, [r3, #3]
    1198:	f003 0310 	and.w	r3, r3, #16
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <GPIO_Init+0x42>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11a0:	683b      	ldr	r3, [r7, #0]
    11a2:	789b      	ldrb	r3, [r3, #2]
    11a4:	69fa      	ldr	r2, [r7, #28]
    11a6:	4313      	orrs	r3, r2
    11a8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	881b      	ldrh	r3, [r3, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d044      	beq.n	123e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ba:	2300      	movs	r3, #0
    11bc:	61bb      	str	r3, [r7, #24]
    11be:	e038      	b.n	1232 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	2201      	movs	r2, #1
    11c4:	fa02 f303 	lsl.w	r3, r2, r3
    11c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11ca:	683b      	ldr	r3, [r7, #0]
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	461a      	mov	r2, r3
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	4013      	ands	r3, r2
    11d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11d6:	693a      	ldr	r2, [r7, #16]
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	429a      	cmp	r2, r3
    11dc:	d126      	bne.n	122c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	220f      	movs	r2, #15
    11e8:	fa02 f303 	lsl.w	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	43db      	mvns	r3, r3
    11f2:	697a      	ldr	r2, [r7, #20]
    11f4:	4013      	ands	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	69fa      	ldr	r2, [r7, #28]
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	4313      	orrs	r3, r2
    1204:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b28      	cmp	r3, #40	; 0x28
    120c:	d105      	bne.n	121a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    120e:	69bb      	ldr	r3, [r7, #24]
    1210:	2201      	movs	r2, #1
    1212:	409a      	lsls	r2, r3
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	615a      	str	r2, [r3, #20]
    1218:	e008      	b.n	122c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b48      	cmp	r3, #72	; 0x48
    1220:	d104      	bne.n	122c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	3301      	adds	r3, #1
    1230:	61bb      	str	r3, [r7, #24]
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b07      	cmp	r3, #7
    1236:	d9c3      	bls.n	11c0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	697a      	ldr	r2, [r7, #20]
    123c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	2bff      	cmp	r3, #255	; 0xff
    1244:	d946      	bls.n	12d4 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    124c:	2300      	movs	r3, #0
    124e:	61bb      	str	r3, [r7, #24]
    1250:	e03a      	b.n	12c8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3308      	adds	r3, #8
    1256:	2201      	movs	r2, #1
    1258:	fa02 f303 	lsl.w	r3, r2, r3
    125c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4013      	ands	r3, r2
    1268:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    126a:	693a      	ldr	r2, [r7, #16]
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	429a      	cmp	r2, r3
    1270:	d127      	bne.n	12c2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	009b      	lsls	r3, r3, #2
    1276:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	220f      	movs	r2, #15
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	43db      	mvns	r3, r3
    1286:	697a      	ldr	r2, [r7, #20]
    1288:	4013      	ands	r3, r2
    128a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	69fa      	ldr	r2, [r7, #28]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	78db      	ldrb	r3, [r3, #3]
    129e:	2b28      	cmp	r3, #40	; 0x28
    12a0:	d105      	bne.n	12ae <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	409a      	lsls	r2, r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b48      	cmp	r3, #72	; 0x48
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	3301      	adds	r3, #1
    12c6:	61bb      	str	r3, [r7, #24]
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	2b07      	cmp	r3, #7
    12cc:	d9c1      	bls.n	1252 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	605a      	str	r2, [r3, #4]
  }
}
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop

000012e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12e0:	b480      	push	{r7}
    12e2:	b083      	sub	sp, #12
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	2202      	movs	r2, #2
    12f4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	2204      	movs	r2, #4
    12fa:	70da      	strb	r2, [r3, #3]
}
    12fc:	370c      	adds	r7, #12
    12fe:	46bd      	mov	sp, r7
    1300:	f85d 7b04 	ldr.w	r7, [sp], #4
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1308:	b480      	push	{r7}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	460b      	mov	r3, r1
    1312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1314:	2300      	movs	r3, #0
    1316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	689a      	ldr	r2, [r3, #8]
    131c:	887b      	ldrh	r3, [r7, #2]
    131e:	4013      	ands	r3, r2
    1320:	2b00      	cmp	r3, #0
    1322:	d002      	beq.n	132a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1324:	2301      	movs	r3, #1
    1326:	73fb      	strb	r3, [r7, #15]
    1328:	e001      	b.n	132e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    132a:	2300      	movs	r3, #0
    132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    132e:	7bfb      	ldrb	r3, [r7, #15]
}
    1330:	4618      	mov	r0, r3
    1332:	3714      	adds	r7, #20
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	b29b      	uxth	r3, r3
}
    134a:	4618      	mov	r0, r3
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	68da      	ldr	r2, [r3, #12]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    13b4:	887a      	ldrh	r2, [r7, #2]
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	611a      	str	r2, [r3, #16]
}
    13ba:	370c      	adds	r7, #12
    13bc:	46bd      	mov	sp, r7
    13be:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c2:	4770      	bx	lr

000013c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	460b      	mov	r3, r1
    13ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    13d0:	887a      	ldrh	r2, [r7, #2]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	615a      	str	r2, [r3, #20]
}
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13e0:	b480      	push	{r7}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	4613      	mov	r3, r2
    13ea:	460a      	mov	r2, r1
    13ec:	807a      	strh	r2, [r7, #2]
    13ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    13f0:	787b      	ldrb	r3, [r7, #1]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d003      	beq.n	13fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    13f6:	887a      	ldrh	r2, [r7, #2]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	611a      	str	r2, [r3, #16]
    13fc:	e002      	b.n	1404 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    13fe:	887a      	ldrh	r2, [r7, #2]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	615a      	str	r2, [r3, #20]
  }
}
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	460b      	mov	r3, r1
    141a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    141c:	887a      	ldrh	r2, [r7, #2]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	60da      	str	r2, [r3, #12]
}
    1422:	370c      	adds	r7, #12
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    142c:	b480      	push	{r7}
    142e:	b085      	sub	sp, #20
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	460b      	mov	r3, r1
    1436:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    143c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    143e:	887b      	ldrh	r3, [r7, #2]
    1440:	68fa      	ldr	r2, [r7, #12]
    1442:	4313      	orrs	r3, r2
    1444:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	68fa      	ldr	r2, [r7, #12]
    144a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    144c:	887a      	ldrh	r2, [r7, #2]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	699b      	ldr	r3, [r3, #24]
    145c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	699b      	ldr	r3, [r3, #24]
    1462:	60fb      	str	r3, [r7, #12]
}
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr
    146e:	bf00      	nop

00001470 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1470:	b480      	push	{r7}
    1472:	b085      	sub	sp, #20
    1474:	af00      	add	r7, sp, #0
    1476:	4602      	mov	r2, r0
    1478:	460b      	mov	r3, r1
    147a:	71fa      	strb	r2, [r7, #7]
    147c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    147e:	2300      	movs	r3, #0
    1480:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1482:	2300      	movs	r3, #0
    1484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1492:	4013      	ands	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1496:	79fb      	ldrb	r3, [r7, #7]
    1498:	011b      	lsls	r3, r3, #4
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	4313      	orrs	r3, r2
    149e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14a0:	79bb      	ldrb	r3, [r7, #6]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	4313      	orrs	r3, r2
    14a6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14a8:	2300      	movs	r3, #0
    14aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	601a      	str	r2, [r3, #0]
}
    14b2:	3714      	adds	r7, #20
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr

000014bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14bc:	b480      	push	{r7}
    14be:	b083      	sub	sp, #12
    14c0:	af00      	add	r7, sp, #0
    14c2:	4603      	mov	r3, r0
    14c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14c6:	231c      	movs	r3, #28
    14c8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    14cc:	79fa      	ldrb	r2, [r7, #7]
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
    14da:	bf00      	nop

000014dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14dc:	b480      	push	{r7}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	460b      	mov	r3, r1
    14e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14e8:	2300      	movs	r3, #0
    14ea:	613b      	str	r3, [r7, #16]
    14ec:	2300      	movs	r3, #0
    14ee:	60fb      	str	r3, [r7, #12]
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	2b00      	cmp	r3, #0
    14fc:	da05      	bge.n	150a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    14fe:	2300      	movs	r3, #0
    1500:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e004      	b.n	1514 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    150a:	2300      	movs	r3, #0
    150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1510:	685b      	ldr	r3, [r3, #4]
    1512:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    151a:	0c1b      	lsrs	r3, r3, #16
    151c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	b29b      	uxth	r3, r3
    1522:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    152e:	d10e      	bne.n	154e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1536:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1538:	2300      	movs	r3, #0
    153a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    153e:	2200      	movs	r2, #0
    1540:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da05      	bge.n	15bc <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	2300      	movs	r3, #0
    15b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	61da      	str	r2, [r3, #28]
    15ba:	e004      	b.n	15c6 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15bc:	2300      	movs	r3, #0
    15be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	605a      	str	r2, [r3, #4]
  }
}
    15c6:	371c      	adds	r7, #28
    15c8:	46bd      	mov	sp, r7
    15ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ce:	4770      	bx	lr

000015d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15d0:	b490      	push	{r4, r7}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	71fa      	strb	r2, [r7, #7]
    15dc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15de:	2300      	movs	r3, #0
    15e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15e2:	79bb      	ldrb	r3, [r7, #6]
    15e4:	f003 0303 	and.w	r3, r3, #3
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	220f      	movs	r2, #15
    15ec:	fa02 f303 	lsl.w	r3, r2, r3
    15f0:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15f2:	2300      	movs	r3, #0
    15f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15f8:	79ba      	ldrb	r2, [r7, #6]
    15fa:	0892      	lsrs	r2, r2, #2
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	2200      	movs	r2, #0
    1602:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1606:	79b9      	ldrb	r1, [r7, #6]
    1608:	0889      	lsrs	r1, r1, #2
    160a:	b2c9      	uxtb	r1, r1
    160c:	3102      	adds	r1, #2
    160e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	43d2      	mvns	r2, r2
    1616:	4011      	ands	r1, r2
    1618:	1c82      	adds	r2, r0, #2
    161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    161e:	2300      	movs	r3, #0
    1620:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1624:	79ba      	ldrb	r2, [r7, #6]
    1626:	0892      	lsrs	r2, r2, #2
    1628:	b2d2      	uxtb	r2, r2
    162a:	4610      	mov	r0, r2
    162c:	2200      	movs	r2, #0
    162e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1632:	79b9      	ldrb	r1, [r7, #6]
    1634:	0889      	lsrs	r1, r1, #2
    1636:	b2c9      	uxtb	r1, r1
    1638:	3102      	adds	r1, #2
    163a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    163e:	79fc      	ldrb	r4, [r7, #7]
    1640:	79ba      	ldrb	r2, [r7, #6]
    1642:	f002 0203 	and.w	r2, r2, #3
    1646:	0092      	lsls	r2, r2, #2
    1648:	fa04 f202 	lsl.w	r2, r4, r2
    164c:	4311      	orrs	r1, r2
    164e:	1c82      	adds	r2, r0, #2
    1650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1654:	3710      	adds	r7, #16
    1656:	46bd      	mov	sp, r7
    1658:	bc90      	pop	{r4, r7}
    165a:	4770      	bx	lr

0000165c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1664:	23dc      	movs	r3, #220	; 0xdc
    1666:	f2c4 2320 	movt	r3, #16928	; 0x4220
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
}
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	429a      	cmp	r2, r3
    168c:	d10a      	bne.n	16a4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1692:	2101      	movs	r1, #1
    1694:	f7ff fbe4 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    169c:	2100      	movs	r1, #0
    169e:	f7ff fbdf 	bl	e60 <RCC_APB2PeriphResetCmd>
    16a2:	e046      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16ae:	429a      	cmp	r2, r3
    16b0:	d10a      	bne.n	16c8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    16b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16b6:	2101      	movs	r1, #1
    16b8:	f7ff fbfa 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    16bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16c0:	2100      	movs	r1, #0
    16c2:	f7ff fbf5 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16c6:	e034      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    16ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16d2:	429a      	cmp	r2, r3
    16d4:	d10a      	bne.n	16ec <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16da:	2101      	movs	r1, #1
    16dc:	f7ff fbe8 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16e4:	2100      	movs	r1, #0
    16e6:	f7ff fbe3 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16ea:	e022      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == UART4)
    16ec:	687a      	ldr	r2, [r7, #4]
    16ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	429a      	cmp	r2, r3
    16f8:	d10a      	bne.n	1710 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16fe:	2101      	movs	r1, #1
    1700:	f7ff fbd6 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1708:	2100      	movs	r1, #0
    170a:	f7ff fbd1 	bl	eb0 <RCC_APB1PeriphResetCmd>
    170e:	e010      	b.n	1732 <USART_DeInit+0xba>
  }
  else
  {
    if (USARTx == UART5)
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1716:	f2c4 0300 	movt	r3, #16384	; 0x4000
    171a:	429a      	cmp	r2, r3
    171c:	d109      	bne.n	1732 <USART_DeInit+0xba>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    171e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1722:	2101      	movs	r1, #1
    1724:	f7ff fbc4 	bl	eb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1728:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    172c:	2100      	movs	r1, #0
    172e:	f7ff fbbf 	bl	eb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1732:	3708      	adds	r7, #8
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}

00001738 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1738:	b580      	push	{r7, lr}
    173a:	b08c      	sub	sp, #48	; 0x30
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1742:	2300      	movs	r3, #0
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
    1746:	2300      	movs	r3, #0
    1748:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    174a:	2300      	movs	r3, #0
    174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    174e:	2300      	movs	r3, #0
    1750:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1752:	2300      	movs	r3, #0
    1754:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8a1b      	ldrh	r3, [r3, #16]
    175e:	b29b      	uxth	r3, r3
    1760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1764:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1768:	4013      	ands	r3, r2
    176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    176c:	683b      	ldr	r3, [r7, #0]
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1772:	4313      	orrs	r3, r2
    1774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1778:	b29a      	uxth	r2, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	899b      	ldrh	r3, [r3, #12]
    1782:	b29b      	uxth	r3, r3
    1784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1788:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    178c:	4013      	ands	r3, r2
    178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	889a      	ldrh	r2, [r3, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	891b      	ldrh	r3, [r3, #8]
    1798:	4313      	orrs	r3, r2
    179a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17a0:	4313      	orrs	r3, r2
    17a2:	b29b      	uxth	r3, r3
    17a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a6:	4313      	orrs	r3, r2
    17a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17ac:	b29a      	uxth	r2, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	8a9b      	ldrh	r3, [r3, #20]
    17b6:	b29b      	uxth	r3, r3
    17b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    17ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17bc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17c0:	4013      	ands	r3, r2
    17c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	899b      	ldrh	r3, [r3, #12]
    17c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ca:	4313      	orrs	r3, r2
    17cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	b29a      	uxth	r2, r3
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17d6:	f107 0308 	add.w	r3, r7, #8
    17da:	4618      	mov	r0, r3
    17dc:	f7ff f9ea 	bl	bb4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17e0:	69fa      	ldr	r2, [r7, #28]
    17e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    17e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17ea:	429a      	cmp	r2, r3
    17ec:	d102      	bne.n	17f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	62bb      	str	r3, [r7, #40]	; 0x28
    17f2:	e001      	b.n	17f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17f4:	693b      	ldr	r3, [r7, #16]
    17f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b29b      	uxth	r3, r3
    1800:	b21b      	sxth	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	da0c      	bge.n	1820 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009a      	lsls	r2, r3, #2
    1810:	441a      	add	r2, r3
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	005b      	lsls	r3, r3, #1
    1818:	fbb2 f3f3 	udiv	r3, r2, r3
    181c:	627b      	str	r3, [r7, #36]	; 0x24
    181e:	e00b      	b.n	1838 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009a      	lsls	r2, r3, #2
    182a:	441a      	add	r2, r3
    182c:	683b      	ldr	r3, [r7, #0]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	009b      	lsls	r3, r3, #2
    1832:	fbb2 f3f3 	udiv	r3, r2, r3
    1836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    183a:	f248 531f 	movw	r3, #34079	; 0x851f
    183e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1842:	fba3 1302 	umull	r1, r3, r3, r2
    1846:	095b      	lsrs	r3, r3, #5
    1848:	011b      	lsls	r3, r3, #4
    184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    184e:	091b      	lsrs	r3, r3, #4
    1850:	2264      	movs	r2, #100	; 0x64
    1852:	fb02 f303 	mul.w	r3, r2, r3
    1856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1858:	1ad3      	subs	r3, r2, r3
    185a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	899b      	ldrh	r3, [r3, #12]
    1860:	b29b      	uxth	r3, r3
    1862:	b29b      	uxth	r3, r3
    1864:	b21b      	sxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	da10      	bge.n	188c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    186a:	6a3b      	ldr	r3, [r7, #32]
    186c:	00db      	lsls	r3, r3, #3
    186e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1872:	f248 531f 	movw	r3, #34079	; 0x851f
    1876:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    187a:	fba3 1302 	umull	r1, r3, r3, r2
    187e:	095b      	lsrs	r3, r3, #5
    1880:	f003 0307 	and.w	r3, r3, #7
    1884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1886:	4313      	orrs	r3, r2
    1888:	62fb      	str	r3, [r7, #44]	; 0x2c
    188a:	e00f      	b.n	18ac <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    188c:	6a3b      	ldr	r3, [r7, #32]
    188e:	011b      	lsls	r3, r3, #4
    1890:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1894:	f248 531f 	movw	r3, #34079	; 0x851f
    1898:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    189c:	fba3 1302 	umull	r1, r3, r3, r2
    18a0:	095b      	lsrs	r3, r3, #5
    18a2:	f003 030f 	and.w	r3, r3, #15
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4313      	orrs	r3, r2
    18aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18ae:	b29a      	uxth	r2, r3
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	811a      	strh	r2, [r3, #8]
}
    18b4:	3730      	adds	r7, #48	; 0x30
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop

000018bc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    18ca:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2200      	movs	r2, #0
    18d6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2200      	movs	r2, #0
    18dc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	220c      	movs	r2, #12
    18e2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	2200      	movs	r2, #0
    18e8:	819a      	strh	r2, [r3, #12]
}
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18f4:	b480      	push	{r7}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18fe:	2300      	movs	r3, #0
    1900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	8a1b      	ldrh	r3, [r3, #16]
    1906:	b29b      	uxth	r3, r3
    1908:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    190a:	68fa      	ldr	r2, [r7, #12]
    190c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1910:	4013      	ands	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	881a      	ldrh	r2, [r3, #0]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    191c:	4313      	orrs	r3, r2
    191e:	b29a      	uxth	r2, r3
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	889b      	ldrh	r3, [r3, #4]
    1924:	4313      	orrs	r3, r2
    1926:	b29a      	uxth	r2, r3
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	88db      	ldrh	r3, [r3, #6]
    192c:	4313      	orrs	r3, r2
    192e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1930:	68fa      	ldr	r2, [r7, #12]
    1932:	4313      	orrs	r3, r2
    1934:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	b29a      	uxth	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	821a      	strh	r2, [r3, #16]
}
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	2200      	movs	r2, #0
    1954:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2200      	movs	r2, #0
    195a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	2200      	movs	r2, #0
    1960:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2200      	movs	r2, #0
    1966:	80da      	strh	r2, [r3, #6]
}
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1980:	78fb      	ldrb	r3, [r7, #3]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	899b      	ldrh	r3, [r3, #12]
    198a:	b29b      	uxth	r3, r3
    198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1990:	b29a      	uxth	r2, r3
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	819a      	strh	r2, [r3, #12]
    1996:	e007      	b.n	19a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	899b      	ldrh	r3, [r3, #12]
    199c:	b29b      	uxth	r3, r3
    199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19a2:	b29a      	uxth	r2, r3
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	819a      	strh	r2, [r3, #12]
  }
}
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    19b4:	b480      	push	{r7}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	4613      	mov	r3, r2
    19be:	460a      	mov	r2, r1
    19c0:	807a      	strh	r2, [r7, #2]
    19c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    19c4:	2300      	movs	r3, #0
    19c6:	613b      	str	r3, [r7, #16]
    19c8:	2300      	movs	r3, #0
    19ca:	60fb      	str	r3, [r7, #12]
    19cc:	2300      	movs	r3, #0
    19ce:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19d0:	2300      	movs	r3, #0
    19d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	b2db      	uxtb	r3, r3
    19dc:	095b      	lsrs	r3, r3, #5
    19de:	b2db      	uxtb	r3, r3
    19e0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19e2:	887b      	ldrh	r3, [r7, #2]
    19e4:	f003 031f 	and.w	r3, r3, #31
    19e8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2201      	movs	r2, #1
    19ee:	fa02 f303 	lsl.w	r3, r2, r3
    19f2:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d103      	bne.n	1a02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	330c      	adds	r3, #12
    19fe:	617b      	str	r3, [r7, #20]
    1a00:	e009      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2b02      	cmp	r3, #2
    1a06:	d103      	bne.n	1a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	3310      	adds	r3, #16
    1a0c:	617b      	str	r3, [r7, #20]
    1a0e:	e002      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3314      	adds	r3, #20
    1a14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a16:	787b      	ldrb	r3, [r7, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d006      	beq.n	1a2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	697a      	ldr	r2, [r7, #20]
    1a20:	6811      	ldr	r1, [r2, #0]
    1a22:	68ba      	ldr	r2, [r7, #8]
    1a24:	430a      	orrs	r2, r1
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	e006      	b.n	1a38 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	697a      	ldr	r2, [r7, #20]
    1a2e:	6811      	ldr	r1, [r2, #0]
    1a30:	68ba      	ldr	r2, [r7, #8]
    1a32:	43d2      	mvns	r2, r2
    1a34:	400a      	ands	r2, r1
    1a36:	601a      	str	r2, [r3, #0]
  }
}
    1a38:	371c      	adds	r7, #28
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	4613      	mov	r3, r2
    1a4e:	460a      	mov	r2, r1
    1a50:	807a      	strh	r2, [r7, #2]
    1a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1a54:	787b      	ldrb	r3, [r7, #1]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d008      	beq.n	1a6c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	8a9b      	ldrh	r3, [r3, #20]
    1a5e:	b29a      	uxth	r2, r3
    1a60:	887b      	ldrh	r3, [r7, #2]
    1a62:	4313      	orrs	r3, r2
    1a64:	b29a      	uxth	r2, r3
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	829a      	strh	r2, [r3, #20]
    1a6a:	e009      	b.n	1a80 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a9b      	ldrh	r3, [r3, #20]
    1a70:	b29a      	uxth	r2, r3
    1a72:	887b      	ldrh	r3, [r7, #2]
    1a74:	43db      	mvns	r3, r3
    1a76:	b29b      	uxth	r3, r3
    1a78:	4013      	ands	r3, r2
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	829a      	strh	r2, [r3, #20]
  }
}
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	8a1b      	ldrh	r3, [r3, #16]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	f023 030f 	bic.w	r3, r3, #15
    1aa2:	b29a      	uxth	r2, r3
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	8a1b      	ldrh	r3, [r3, #16]
    1aac:	b29a      	uxth	r2, r3
    1aae:	78fb      	ldrb	r3, [r7, #3]
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	821a      	strh	r2, [r3, #16]
}
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	460b      	mov	r3, r1
    1ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	899b      	ldrh	r3, [r3, #12]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1ada:	b29a      	uxth	r2, r3
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	899b      	ldrh	r3, [r3, #12]
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	887b      	ldrh	r3, [r7, #2]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b29a      	uxth	r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	819a      	strh	r2, [r3, #12]
}
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b08:	78fb      	ldrb	r3, [r7, #3]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d008      	beq.n	1b20 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	899b      	ldrh	r3, [r3, #12]
    1b12:	b29b      	uxth	r3, r3
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	819a      	strh	r2, [r3, #12]
    1b1e:	e007      	b.n	1b30 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f023 0302 	bic.w	r3, r3, #2
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  }
}
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop

00001b3c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	460b      	mov	r3, r1
    1b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8a1b      	ldrh	r3, [r3, #16]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	f023 0320 	bic.w	r3, r3, #32
    1b52:	b29a      	uxth	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	8a1b      	ldrh	r3, [r3, #16]
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	887b      	ldrh	r3, [r7, #2]
    1b60:	4313      	orrs	r3, r2
    1b62:	b29a      	uxth	r2, r3
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	821a      	strh	r2, [r3, #16]
}
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	460b      	mov	r3, r1
    1b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b90:	b29a      	uxth	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	821a      	strh	r2, [r3, #16]
    1b96:	e007      	b.n	1ba8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  }
}
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1bc0:	887b      	ldrh	r3, [r7, #2]
    1bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bc6:	b29a      	uxth	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	809a      	strh	r2, [r3, #4]
}
    1bcc:	370c      	adds	r7, #12
    1bce:	46bd      	mov	sp, r7
    1bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop

00001bd8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	b29b      	uxth	r3, r3
    1be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bea:	b29b      	uxth	r3, r3
}
    1bec:	4618      	mov	r0, r3
    1bee:	370c      	adds	r7, #12
    1bf0:	46bd      	mov	sp, r7
    1bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf6:	4770      	bx	lr

00001bf8 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b083      	sub	sp, #12
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	899b      	ldrh	r3, [r3, #12]
    1c04:	b29b      	uxth	r3, r3
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	819a      	strh	r2, [r3, #12]
}
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	460b      	mov	r3, r1
    1c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8b1b      	ldrh	r3, [r3, #24]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	b29a      	uxth	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b1b      	ldrh	r3, [r3, #24]
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	b29b      	uxth	r3, r3
    1c44:	4313      	orrs	r3, r2
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	831a      	strh	r2, [r3, #24]
}
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1c58:	b480      	push	{r7}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	8b1b      	ldrh	r3, [r3, #24]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c6e:	b29a      	uxth	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	8b1b      	ldrh	r3, [r3, #24]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	78fb      	ldrb	r3, [r7, #3]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	4313      	orrs	r3, r2
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
}
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	460b      	mov	r3, r1
    1c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c9c:	78fb      	ldrb	r3, [r7, #3]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d008      	beq.n	1cb4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	8a9b      	ldrh	r3, [r3, #20]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	f043 0320 	orr.w	r3, r3, #32
    1cac:	b29a      	uxth	r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	829a      	strh	r2, [r3, #20]
    1cb2:	e007      	b.n	1cc4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8a9b      	ldrh	r3, [r3, #20]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 0320 	bic.w	r3, r3, #32
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	829a      	strh	r2, [r3, #20]
  }
}
    1cc4:	370c      	adds	r7, #12
    1cc6:	46bd      	mov	sp, r7
    1cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	460b      	mov	r3, r1
    1cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cdc:	78fb      	ldrb	r3, [r7, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d008      	beq.n	1cf4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	8a9b      	ldrh	r3, [r3, #20]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	f043 0310 	orr.w	r3, r3, #16
    1cec:	b29a      	uxth	r2, r3
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	829a      	strh	r2, [r3, #20]
    1cf2:	e007      	b.n	1d04 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	8a9b      	ldrh	r3, [r3, #20]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f023 0310 	bic.w	r3, r3, #16
    1cfe:	b29a      	uxth	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	829a      	strh	r2, [r3, #20]
  }
}
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d10:	b480      	push	{r7}
    1d12:	b083      	sub	sp, #12
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	460b      	mov	r3, r1
    1d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d1c:	78fb      	ldrb	r3, [r7, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d008      	beq.n	1d34 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	8a9b      	ldrh	r3, [r3, #20]
    1d26:	b29b      	uxth	r3, r3
    1d28:	f043 0308 	orr.w	r3, r3, #8
    1d2c:	b29a      	uxth	r2, r3
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	829a      	strh	r2, [r3, #20]
    1d32:	e007      	b.n	1d44 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	8a9b      	ldrh	r3, [r3, #20]
    1d38:	b29b      	uxth	r3, r3
    1d3a:	f023 0308 	bic.w	r3, r3, #8
    1d3e:	b29a      	uxth	r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	829a      	strh	r2, [r3, #20]
  }
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop

00001d50 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d50:	b480      	push	{r7}
    1d52:	b083      	sub	sp, #12
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	460b      	mov	r3, r1
    1d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d5c:	78fb      	ldrb	r3, [r7, #3]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00a      	beq.n	1d78 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	899b      	ldrh	r3, [r3, #12]
    1d66:	b29b      	uxth	r3, r3
    1d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d70:	b29a      	uxth	r2, r3
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	819a      	strh	r2, [r3, #12]
    1d76:	e007      	b.n	1d88 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d82:	b29a      	uxth	r2, r3
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	819a      	strh	r2, [r3, #12]
  }
}
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop

00001d94 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d94:	b480      	push	{r7}
    1d96:	b083      	sub	sp, #12
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	460b      	mov	r3, r1
    1d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1da0:	78fb      	ldrb	r3, [r7, #3]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d008      	beq.n	1db8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	8a9b      	ldrh	r3, [r3, #20]
    1daa:	b29b      	uxth	r3, r3
    1dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1db0:	b29a      	uxth	r2, r3
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	829a      	strh	r2, [r3, #20]
    1db6:	e007      	b.n	1dc8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	8a9b      	ldrh	r3, [r3, #20]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	829a      	strh	r2, [r3, #20]
  }
}
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1dd4:	b480      	push	{r7}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	8a9b      	ldrh	r3, [r3, #20]
    1de4:	b29b      	uxth	r3, r3
    1de6:	f023 0304 	bic.w	r3, r3, #4
    1dea:	b29a      	uxth	r2, r3
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	8a9b      	ldrh	r3, [r3, #20]
    1df4:	b29a      	uxth	r2, r3
    1df6:	887b      	ldrh	r3, [r7, #2]
    1df8:	4313      	orrs	r3, r2
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	829a      	strh	r2, [r3, #20]
}
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop

00001e0c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b083      	sub	sp, #12
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	460b      	mov	r3, r1
    1e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d008      	beq.n	1e30 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	8a9b      	ldrh	r3, [r3, #20]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 0302 	orr.w	r3, r3, #2
    1e28:	b29a      	uxth	r2, r3
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	829a      	strh	r2, [r3, #20]
    1e2e:	e007      	b.n	1e40 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  }
}
    1e40:	370c      	adds	r7, #12
    1e42:	46bd      	mov	sp, r7
    1e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e4c:	b480      	push	{r7}
    1e4e:	b085      	sub	sp, #20
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	460b      	mov	r3, r1
    1e56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e58:	2300      	movs	r3, #0
    1e5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	b29a      	uxth	r2, r3
    1e62:	887b      	ldrh	r3, [r7, #2]
    1e64:	4013      	ands	r3, r2
    1e66:	b29b      	uxth	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d002      	beq.n	1e72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e6c:	2301      	movs	r3, #1
    1e6e:	73fb      	strb	r3, [r7, #15]
    1e70:	e001      	b.n	1e76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e72:	2300      	movs	r3, #0
    1e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e76:	7bfb      	ldrb	r3, [r7, #15]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3714      	adds	r7, #20
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    1e90:	887b      	ldrh	r3, [r7, #2]
    1e92:	43db      	mvns	r3, r3
    1e94:	b29a      	uxth	r2, r3
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	801a      	strh	r2, [r3, #0]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr

00001ea4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ea4:	b480      	push	{r7}
    1ea6:	b087      	sub	sp, #28
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	460b      	mov	r3, r1
    1eae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
    1eb4:	2300      	movs	r3, #0
    1eb6:	617b      	str	r3, [r7, #20]
    1eb8:	2300      	movs	r3, #0
    1eba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1ebc:	2300      	movs	r3, #0
    1ebe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1ec0:	887b      	ldrh	r3, [r7, #2]
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	095b      	lsrs	r3, r3, #5
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1eca:	887b      	ldrh	r3, [r7, #2]
    1ecc:	f003 031f 	and.w	r3, r3, #31
    1ed0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2201      	movs	r2, #1
    1ed6:	fa02 f303 	lsl.w	r3, r2, r3
    1eda:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d106      	bne.n	1ef0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	899b      	ldrh	r3, [r3, #12]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	697a      	ldr	r2, [r7, #20]
    1eea:	4013      	ands	r3, r2
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00f      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d106      	bne.n	1f04 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	8a1b      	ldrh	r3, [r3, #16]
    1efa:	b29b      	uxth	r3, r3
    1efc:	697a      	ldr	r2, [r7, #20]
    1efe:	4013      	ands	r3, r2
    1f00:	617b      	str	r3, [r7, #20]
    1f02:	e005      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	8a9b      	ldrh	r3, [r3, #20]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	4013      	ands	r3, r2
    1f0e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b29b      	uxth	r3, r3
    1f16:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2201      	movs	r2, #1
    1f1c:	fa02 f303 	lsl.w	r3, r2, r3
    1f20:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	881b      	ldrh	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d005      	beq.n	1f40 <USART_GetITStatus+0x9c>
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f3a:	2301      	movs	r3, #1
    1f3c:	74fb      	strb	r3, [r7, #19]
    1f3e:	e001      	b.n	1f44 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f40:	2300      	movs	r3, #0
    1f42:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    1f44:	7cfb      	ldrb	r3, [r7, #19]
}
    1f46:	4618      	mov	r0, r3
    1f48:	371c      	adds	r7, #28
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f54:	b480      	push	{r7}
    1f56:	b085      	sub	sp, #20
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f60:	2300      	movs	r3, #0
    1f62:	81fb      	strh	r3, [r7, #14]
    1f64:	2300      	movs	r3, #0
    1f66:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    1f68:	887b      	ldrh	r3, [r7, #2]
    1f6a:	0a1b      	lsrs	r3, r3, #8
    1f6c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f6e:	89fb      	ldrh	r3, [r7, #14]
    1f70:	2201      	movs	r2, #1
    1f72:	fa02 f303 	lsl.w	r3, r2, r3
    1f76:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f78:	89bb      	ldrh	r3, [r7, #12]
    1f7a:	43db      	mvns	r3, r3
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	801a      	strh	r2, [r3, #0]
}
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f8c:	b480      	push	{r7}
    1f8e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	2200      	movs	r2, #0
    1f9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fa4:	2200      	movs	r2, #0
    1fa6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    1fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fb0:	2200      	movs	r2, #0
    1fb2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    1fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fbc:	2200      	movs	r2, #0
    1fbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fcc:	f2c0 020f 	movt	r2, #15
    1fd0:	615a      	str	r2, [r3, #20]
}
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1fdc:	b480      	push	{r7}
    1fde:	b085      	sub	sp, #20
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1fe4:	2300      	movs	r3, #0
    1fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff0:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d074      	beq.n	20e4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2006:	f2c4 0201 	movt	r2, #16385	; 0x4001
    200a:	6811      	ldr	r1, [r2, #0]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	43d2      	mvns	r2, r2
    2012:	400a      	ands	r2, r1
    2014:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2016:	f44f 6380 	mov.w	r3, #1024	; 0x400
    201a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	6812      	ldr	r2, [r2, #0]
    202c:	43d2      	mvns	r2, r2
    202e:	400a      	ands	r2, r1
    2030:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	4413      	add	r3, r2
    203a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	68fa      	ldr	r2, [r7, #12]
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	430a      	orrs	r2, r1
    2048:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	68d1      	ldr	r1, [r2, #12]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b10      	cmp	r3, #16
    2088:	d11a      	bne.n	20c0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    208e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2096:	f2c4 0201 	movt	r2, #16385	; 0x4001
    209a:	6891      	ldr	r1, [r2, #8]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	6812      	ldr	r2, [r2, #0]
    20a0:	430a      	orrs	r2, r1
    20a2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20b4:	68d1      	ldr	r1, [r2, #12]
    20b6:	687a      	ldr	r2, [r7, #4]
    20b8:	6812      	ldr	r2, [r2, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	60da      	str	r2, [r3, #12]
    20be:	e01e      	b.n	20fe <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    20c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20c8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	795b      	ldrb	r3, [r3, #5]
    20ce:	68fa      	ldr	r2, [r7, #12]
    20d0:	4413      	add	r3, r2
    20d2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68fa      	ldr	r2, [r7, #12]
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	430a      	orrs	r2, r1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	e00c      	b.n	20fe <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	791b      	ldrb	r3, [r3, #4]
    20e8:	68fa      	ldr	r2, [r7, #12]
    20ea:	4413      	add	r3, r2
    20ec:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    20ee:	68fb      	ldr	r3, [r7, #12]
    20f0:	68fa      	ldr	r2, [r7, #12]
    20f2:	6811      	ldr	r1, [r2, #0]
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	43d2      	mvns	r2, r2
    20fa:	400a      	ands	r2, r1
    20fc:	601a      	str	r2, [r3, #0]
  }
}
    20fe:	3714      	adds	r7, #20
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	220c      	movs	r2, #12
    2120:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	719a      	strb	r2, [r3, #6]
}
    2128:	370c      	adds	r7, #12
    212a:	46bd      	mov	sp, r7
    212c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2140:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2148:	f2c4 0201 	movt	r2, #16385	; 0x4001
    214c:	6911      	ldr	r1, [r2, #16]
    214e:	687a      	ldr	r2, [r7, #4]
    2150:	430a      	orrs	r2, r1
    2152:	611a      	str	r2, [r3, #16]
}
    2154:	370c      	adds	r7, #12
    2156:	46bd      	mov	sp, r7
    2158:	f85d 7b04 	ldr.w	r7, [sp], #4
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2160:	b480      	push	{r7}
    2162:	b085      	sub	sp, #20
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2168:	2300      	movs	r3, #0
    216a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2170:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2174:	695a      	ldr	r2, [r3, #20]
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4013      	ands	r3, r2
    217a:	2b00      	cmp	r3, #0
    217c:	d002      	beq.n	2184 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    217e:	2301      	movs	r3, #1
    2180:	73fb      	strb	r3, [r7, #15]
    2182:	e001      	b.n	2188 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    2184:	2300      	movs	r3, #0
    2186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2188:	7bfb      	ldrb	r3, [r7, #15]
}
    218a:	4618      	mov	r0, r3
    218c:	3714      	adds	r7, #20
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop

00002198 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2198:	b480      	push	{r7}
    219a:	b083      	sub	sp, #12
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    21a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21a8:	687a      	ldr	r2, [r7, #4]
    21aa:	615a      	str	r2, [r3, #20]
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop

000021b8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    21b8:	b480      	push	{r7}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    21c0:	2300      	movs	r3, #0
    21c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    21c4:	2300      	movs	r3, #0
    21c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    21c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	4013      	ands	r3, r2
    21d6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    21d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21e0:	695a      	ldr	r2, [r3, #20]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	4013      	ands	r3, r2
    21e6:	2b00      	cmp	r3, #0
    21e8:	d005      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    21f0:	2301      	movs	r3, #1
    21f2:	73fb      	strb	r3, [r7, #15]
    21f4:	e001      	b.n	21fa <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    21f6:	2300      	movs	r3, #0
    21f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21fa:	7bfb      	ldrb	r3, [r7, #15]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3714      	adds	r7, #20
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr

00002208 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2214:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	615a      	str	r2, [r3, #20]
}
    221c:	370c      	adds	r7, #12
    221e:	46bd      	mov	sp, r7
    2220:	f85d 7b04 	ldr.w	r7, [sp], #4
    2224:	4770      	bx	lr
    2226:	bf00      	nop

00002228 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2230:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2234:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    223e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2242:	60da      	str	r2, [r3, #12]
}
    2244:	370c      	adds	r7, #12
    2246:	46bd      	mov	sp, r7
    2248:	f85d 7b04 	ldr.w	r7, [sp], #4
    224c:	4770      	bx	lr
    224e:	bf00      	nop

00002250 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2250:	b480      	push	{r7}
    2252:	b087      	sub	sp, #28
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2258:	2300      	movs	r3, #0
    225a:	617b      	str	r3, [r7, #20]
    225c:	2300      	movs	r3, #0
    225e:	613b      	str	r3, [r7, #16]
    2260:	230f      	movs	r3, #15
    2262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	78db      	ldrb	r3, [r3, #3]
    2268:	2b00      	cmp	r3, #0
    226a:	d042      	beq.n	22f2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    226c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2270:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2274:	68db      	ldr	r3, [r3, #12]
    2276:	43db      	mvns	r3, r3
    2278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    227c:	0a1b      	lsrs	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	f1c3 0304 	rsb	r3, r3, #4
    2286:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	68fa      	ldr	r2, [r7, #12]
    228c:	fa22 f303 	lsr.w	r3, r2, r3
    2290:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	785b      	ldrb	r3, [r3, #1]
    2296:	461a      	mov	r2, r3
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	fa02 f303 	lsl.w	r3, r2, r3
    229e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	461a      	mov	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	4013      	ands	r3, r2
    22aa:	697a      	ldr	r2, [r7, #20]
    22ac:	4313      	orrs	r3, r2
    22ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	011b      	lsls	r3, r3, #4
    22b4:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    22b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7812      	ldrb	r2, [r2, #0]
    22c2:	4611      	mov	r1, r2
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	b2d2      	uxtb	r2, r2
    22c8:	440b      	add	r3, r1
    22ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	7812      	ldrb	r2, [r2, #0]
    22da:	0952      	lsrs	r2, r2, #5
    22dc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	7809      	ldrb	r1, [r1, #0]
    22e2:	f001 011f 	and.w	r1, r1, #31
    22e6:	2001      	movs	r0, #1
    22e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    22f0:	e011      	b.n	2316 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	7812      	ldrb	r2, [r2, #0]
    22fe:	0952      	lsrs	r2, r2, #5
    2300:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2302:	6879      	ldr	r1, [r7, #4]
    2304:	7809      	ldrb	r1, [r1, #0]
    2306:	f001 011f 	and.w	r1, r1, #31
    230a:	2001      	movs	r0, #1
    230c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2310:	3220      	adds	r2, #32
    2312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2316:	371c      	adds	r7, #28
    2318:	46bd      	mov	sp, r7
    231a:	f85d 7b04 	ldr.w	r7, [sp], #4
    231e:	4770      	bx	lr

00002320 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2320:	b480      	push	{r7}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    232a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2332:	683a      	ldr	r2, [r7, #0]
    2334:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2338:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233c:	6879      	ldr	r1, [r7, #4]
    233e:	430a      	orrs	r2, r1
    2340:	609a      	str	r2, [r3, #8]
}
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr

0000234c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	71fa      	strb	r2, [r7, #7]
    2358:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    235a:	79bb      	ldrb	r3, [r7, #6]
    235c:	2b00      	cmp	r3, #0
    235e:	d00c      	beq.n	237a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2360:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2364:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2368:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    236c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2370:	6911      	ldr	r1, [r2, #16]
    2372:	79fa      	ldrb	r2, [r7, #7]
    2374:	430a      	orrs	r2, r1
    2376:	611a      	str	r2, [r3, #16]
    2378:	e00c      	b.n	2394 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2386:	f2ce 0200 	movt	r2, #57344	; 0xe000
    238a:	6911      	ldr	r1, [r2, #16]
    238c:	79fa      	ldrb	r2, [r7, #7]
    238e:	43d2      	mvns	r2, r2
    2390:	400a      	ands	r2, r1
    2392:	611a      	str	r2, [r3, #16]
  }
}
    2394:	370c      	adds	r7, #12
    2396:	46bd      	mov	sp, r7
    2398:	f85d 7b04 	ldr.w	r7, [sp], #4
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2b04      	cmp	r3, #4
    23ac:	d10c      	bne.n	23c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23ae:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b6:	f24e 0210 	movw	r2, #57360	; 0xe010
    23ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23be:	6812      	ldr	r2, [r2, #0]
    23c0:	f042 0204 	orr.w	r2, r2, #4
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e00b      	b.n	23e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23c8:	f24e 0310 	movw	r3, #57360	; 0xe010
    23cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d0:	f24e 0210 	movw	r2, #57360	; 0xe010
    23d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23d8:	6812      	ldr	r2, [r2, #0]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	601a      	str	r2, [r3, #0]
  }
}
    23e0:	370c      	adds	r7, #12
    23e2:	46bd      	mov	sp, r7
    23e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af00      	add	r7, sp, #0
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	60b9      	str	r1, [r7, #8]
    23f6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23f8:	2038      	movs	r0, #56	; 0x38
    23fa:	f003 fa59 	bl	58b0 <pvPortMalloc>
    23fe:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d058      	beq.n	24b8 <xCoRoutineCreate+0xcc>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2406:	f240 338c 	movw	r3, #908	; 0x38c
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	681b      	ldr	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d107      	bne.n	2424 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2414:	f240 338c 	movw	r3, #908	; 0x38c
    2418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241c:	693a      	ldr	r2, [r7, #16]
    241e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2420:	f000 fa08 	bl	2834 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2b01      	cmp	r3, #1
    2428:	d901      	bls.n	242e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    242a:	2301      	movs	r3, #1
    242c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2200      	movs	r2, #0
    2432:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2434:	693b      	ldr	r3, [r7, #16]
    2436:	68ba      	ldr	r2, [r7, #8]
    2438:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	687a      	ldr	r2, [r7, #4]
    243e:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	68fa      	ldr	r2, [r7, #12]
    2444:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	3304      	adds	r3, #4
    244a:	4618      	mov	r0, r3
    244c:	f001 fb98 	bl	3b80 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2450:	693b      	ldr	r3, [r7, #16]
    2452:	3318      	adds	r3, #24
    2454:	4618      	mov	r0, r3
    2456:	f001 fb93 	bl	3b80 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    245a:	693b      	ldr	r3, [r7, #16]
    245c:	693a      	ldr	r2, [r7, #16]
    245e:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2460:	693b      	ldr	r3, [r7, #16]
    2462:	693a      	ldr	r2, [r7, #16]
    2464:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	f1c3 0214 	rsb	r2, r3, #20
    246c:	693b      	ldr	r3, [r7, #16]
    246e:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2470:	693b      	ldr	r3, [r7, #16]
    2472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2474:	f240 3390 	movw	r3, #912	; 0x390
    2478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    247c:	681b      	ldr	r3, [r3, #0]
    247e:	429a      	cmp	r2, r3
    2480:	d906      	bls.n	2490 <xCoRoutineCreate+0xa4>
    2482:	693b      	ldr	r3, [r7, #16]
    2484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2486:	f240 3390 	movw	r3, #912	; 0x390
    248a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    248e:	601a      	str	r2, [r3, #0]
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2494:	4613      	mov	r3, r2
    2496:	009b      	lsls	r3, r3, #2
    2498:	4413      	add	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	f240 3220 	movw	r2, #800	; 0x320
    24a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    24a4:	441a      	add	r2, r3
    24a6:	693b      	ldr	r3, [r7, #16]
    24a8:	3304      	adds	r3, #4
    24aa:	4610      	mov	r0, r2
    24ac:	4619      	mov	r1, r3
    24ae:	f001 fb73 	bl	3b98 <vListInsertEnd>

		xReturn = pdPASS;
    24b2:	2301      	movs	r3, #1
    24b4:	617b      	str	r3, [r7, #20]
    24b6:	e002      	b.n	24be <xCoRoutineCreate+0xd2>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b8:	f04f 33ff 	mov.w	r3, #4294967295
    24bc:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    24be:	697b      	ldr	r3, [r7, #20]
}
    24c0:	4618      	mov	r0, r3
    24c2:	3718      	adds	r7, #24
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}

000024c8 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    24d2:	f240 3394 	movw	r3, #916	; 0x394
    24d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24da:	681a      	ldr	r2, [r3, #0]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	4413      	add	r3, r2
    24e0:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    24e2:	f240 338c 	movw	r3, #908	; 0x38c
    24e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24ea:	681b      	ldr	r3, [r3, #0]
    24ec:	3304      	adds	r3, #4
    24ee:	4618      	mov	r0, r3
    24f0:	f001 fbb2 	bl	3c58 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    24f4:	f240 338c 	movw	r3, #908	; 0x38c
    24f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24fc:	681b      	ldr	r3, [r3, #0]
    24fe:	68fa      	ldr	r2, [r7, #12]
    2500:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2502:	f240 3394 	movw	r3, #916	; 0x394
    2506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	68fa      	ldr	r2, [r7, #12]
    250e:	429a      	cmp	r2, r3
    2510:	d20f      	bcs.n	2532 <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2512:	f240 3374 	movw	r3, #884	; 0x374
    2516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    251a:	681a      	ldr	r2, [r3, #0]
    251c:	f240 338c 	movw	r3, #908	; 0x38c
    2520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	3304      	adds	r3, #4
    2528:	4610      	mov	r0, r2
    252a:	4619      	mov	r1, r3
    252c:	f001 fb5c 	bl	3be8 <vListInsert>
    2530:	e00e      	b.n	2550 <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2532:	f240 3370 	movw	r3, #880	; 0x370
    2536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253a:	681a      	ldr	r2, [r3, #0]
    253c:	f240 338c 	movw	r3, #908	; 0x38c
    2540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	3304      	adds	r3, #4
    2548:	4610      	mov	r0, r2
    254a:	4619      	mov	r1, r3
    254c:	f001 fb4c 	bl	3be8 <vListInsert>
	}

	if( pxEventList )
    2550:	683b      	ldr	r3, [r7, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d009      	beq.n	256a <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2556:	f240 338c 	movw	r3, #908	; 0x38c
    255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	3318      	adds	r3, #24
    2562:	6838      	ldr	r0, [r7, #0]
    2564:	4619      	mov	r1, r3
    2566:	f001 fb3f 	bl	3be8 <vListInsert>
	}
}
    256a:	3710      	adds	r7, #16
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}

00002570 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2576:	e039      	b.n	25ec <prvCheckPendingReadyList+0x7c>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2578:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    257c:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2580:	f240 3378 	movw	r3, #888	; 0x378
    2584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2588:	68db      	ldr	r3, [r3, #12]
    258a:	68db      	ldr	r3, [r3, #12]
    258c:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	3318      	adds	r3, #24
    2592:	4618      	mov	r0, r3
    2594:	f001 fb60 	bl	3c58 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2598:	f04f 0000 	mov.w	r0, #0
    259c:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	3304      	adds	r3, #4
    25a4:	4618      	mov	r0, r3
    25a6:	f001 fb57 	bl	3c58 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ae:	f240 3390 	movw	r3, #912	; 0x390
    25b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	429a      	cmp	r2, r3
    25ba:	d906      	bls.n	25ca <prvCheckPendingReadyList+0x5a>
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25c0:	f240 3390 	movw	r3, #912	; 0x390
    25c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25c8:	601a      	str	r2, [r3, #0]
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ce:	4613      	mov	r3, r2
    25d0:	009b      	lsls	r3, r3, #2
    25d2:	4413      	add	r3, r2
    25d4:	009b      	lsls	r3, r3, #2
    25d6:	f240 3220 	movw	r2, #800	; 0x320
    25da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    25de:	441a      	add	r2, r3
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	3304      	adds	r3, #4
    25e4:	4610      	mov	r0, r2
    25e6:	4619      	mov	r1, r3
    25e8:	f001 fad6 	bl	3b98 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25ec:	f240 3378 	movw	r3, #888	; 0x378
    25f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1be      	bne.n	2578 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    25fa:	3708      	adds	r7, #8
    25fc:	46bd      	mov	sp, r7
    25fe:	bd80      	pop	{r7, pc}

00002600 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2600:	b580      	push	{r7, lr}
    2602:	b082      	sub	sp, #8
    2604:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2606:	f002 fba5 	bl	4d54 <xTaskGetTickCount>
    260a:	4602      	mov	r2, r0
    260c:	f240 3398 	movw	r3, #920	; 0x398
    2610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	1ad2      	subs	r2, r2, r3
    2618:	f240 339c 	movw	r3, #924	; 0x39c
    261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2620:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2622:	e085      	b.n	2730 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
    2624:	f240 3394 	movw	r3, #916	; 0x394
    2628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	1c5a      	adds	r2, r3, #1
    2630:	f240 3394 	movw	r3, #916	; 0x394
    2634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2638:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    263a:	f240 339c 	movw	r3, #924	; 0x39c
    263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	1e5a      	subs	r2, r3, #1
    2646:	f240 339c 	movw	r3, #924	; 0x39c
    264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    264e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2650:	f240 3394 	movw	r3, #916	; 0x394
    2654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	2b00      	cmp	r3, #0
    265c:	d116      	bne.n	268c <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    265e:	f240 3370 	movw	r3, #880	; 0x370
    2662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    266a:	f240 3374 	movw	r3, #884	; 0x374
    266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2672:	681a      	ldr	r2, [r3, #0]
    2674:	f240 3370 	movw	r3, #880	; 0x370
    2678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    267e:	f240 3374 	movw	r3, #884	; 0x374
    2682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2686:	687a      	ldr	r2, [r7, #4]
    2688:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    268a:	e049      	b.n	2720 <prvCheckDelayedList+0x120>
    268c:	e048      	b.n	2720 <prvCheckDelayedList+0x120>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    268e:	f240 3370 	movw	r3, #880	; 0x370
    2692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	68db      	ldr	r3, [r3, #12]
    269a:	68db      	ldr	r3, [r3, #12]
    269c:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    269e:	683b      	ldr	r3, [r7, #0]
    26a0:	685a      	ldr	r2, [r3, #4]
    26a2:	f240 3394 	movw	r3, #916	; 0x394
    26a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	429a      	cmp	r2, r3
    26ae:	d900      	bls.n	26b2 <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    26b0:	e03e      	b.n	2730 <prvCheckDelayedList+0x130>
			}																						

			portDISABLE_INTERRUPTS();
    26b2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    26b6:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    26ba:	683b      	ldr	r3, [r7, #0]
    26bc:	3304      	adds	r3, #4
    26be:	4618      	mov	r0, r3
    26c0:	f001 faca 	bl	3c58 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26c8:	2b00      	cmp	r3, #0
    26ca:	d004      	beq.n	26d6 <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    26cc:	683b      	ldr	r3, [r7, #0]
    26ce:	3318      	adds	r3, #24
    26d0:	4618      	mov	r0, r3
    26d2:	f001 fac1 	bl	3c58 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    26d6:	f04f 0000 	mov.w	r0, #0
    26da:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    26de:	683b      	ldr	r3, [r7, #0]
    26e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26e2:	f240 3390 	movw	r3, #912	; 0x390
    26e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	429a      	cmp	r2, r3
    26ee:	d906      	bls.n	26fe <prvCheckDelayedList+0xfe>
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26f4:	f240 3390 	movw	r3, #912	; 0x390
    26f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26fc:	601a      	str	r2, [r3, #0]
    26fe:	683b      	ldr	r3, [r7, #0]
    2700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2702:	4613      	mov	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	4413      	add	r3, r2
    2708:	009b      	lsls	r3, r3, #2
    270a:	f240 3220 	movw	r2, #800	; 0x320
    270e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2712:	441a      	add	r2, r3
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	3304      	adds	r3, #4
    2718:	4610      	mov	r0, r2
    271a:	4619      	mov	r1, r3
    271c:	f001 fa3c 	bl	3b98 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2720:	f240 3370 	movw	r3, #880	; 0x370
    2724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d1ae      	bne.n	268e <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2730:	f240 339c 	movw	r3, #924	; 0x39c
    2734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2738:	681b      	ldr	r3, [r3, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	f47f af72 	bne.w	2624 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2740:	f240 3394 	movw	r3, #916	; 0x394
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	681a      	ldr	r2, [r3, #0]
    274a:	f240 3398 	movw	r3, #920	; 0x398
    274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2752:	601a      	str	r2, [r3, #0]
}
    2754:	3708      	adds	r7, #8
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}
    275a:	bf00      	nop

0000275c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    275c:	b580      	push	{r7, lr}
    275e:	b082      	sub	sp, #8
    2760:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2762:	f7ff ff05 	bl	2570 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2766:	f7ff ff4b 	bl	2600 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    276a:	e012      	b.n	2792 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    276c:	f240 3390 	movw	r3, #912	; 0x390
    2770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	2b00      	cmp	r3, #0
    2778:	d100      	bne.n	277c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    277a:	e057      	b.n	282c <vCoRoutineSchedule+0xd0>
		}
		--uxTopCoRoutineReadyPriority;
    277c:	f240 3390 	movw	r3, #912	; 0x390
    2780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	1e5a      	subs	r2, r3, #1
    2788:	f240 3390 	movw	r3, #912	; 0x390
    278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2790:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2792:	f240 3390 	movw	r3, #912	; 0x390
    2796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    279a:	6819      	ldr	r1, [r3, #0]
    279c:	f240 3220 	movw	r2, #800	; 0x320
    27a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27a4:	460b      	mov	r3, r1
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	440b      	add	r3, r1
    27aa:	009b      	lsls	r3, r3, #2
    27ac:	4413      	add	r3, r2
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d0db      	beq.n	276c <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    27b4:	f240 3390 	movw	r3, #912	; 0x390
    27b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27bc:	681a      	ldr	r2, [r3, #0]
    27be:	4613      	mov	r3, r2
    27c0:	009b      	lsls	r3, r3, #2
    27c2:	4413      	add	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	f240 3220 	movw	r2, #800	; 0x320
    27ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27ce:	4413      	add	r3, r2
    27d0:	607b      	str	r3, [r7, #4]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	685b      	ldr	r3, [r3, #4]
    27d6:	685a      	ldr	r2, [r3, #4]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	605a      	str	r2, [r3, #4]
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	685a      	ldr	r2, [r3, #4]
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	3308      	adds	r3, #8
    27e4:	429a      	cmp	r2, r3
    27e6:	d104      	bne.n	27f2 <vCoRoutineSchedule+0x96>
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	685b      	ldr	r3, [r3, #4]
    27ec:	685a      	ldr	r2, [r3, #4]
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	605a      	str	r2, [r3, #4]
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	685b      	ldr	r3, [r3, #4]
    27f6:	68da      	ldr	r2, [r3, #12]
    27f8:	f240 338c 	movw	r3, #908	; 0x38c
    27fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2800:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2802:	f240 338c 	movw	r3, #908	; 0x38c
    2806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	681a      	ldr	r2, [r3, #0]
    280e:	f240 338c 	movw	r3, #908	; 0x38c
    2812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2816:	6819      	ldr	r1, [r3, #0]
    2818:	f240 338c 	movw	r3, #908	; 0x38c
    281c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2820:	681b      	ldr	r3, [r3, #0]
    2822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2824:	4608      	mov	r0, r1
    2826:	4619      	mov	r1, r3
    2828:	4790      	blx	r2

	return;
    282a:	bf00      	nop
}
    282c:	3708      	adds	r7, #8
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	bf00      	nop

00002834 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    283a:	2300      	movs	r3, #0
    283c:	607b      	str	r3, [r7, #4]
    283e:	e00f      	b.n	2860 <prvInitialiseCoRoutineLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2840:	687a      	ldr	r2, [r7, #4]
    2842:	4613      	mov	r3, r2
    2844:	009b      	lsls	r3, r3, #2
    2846:	4413      	add	r3, r2
    2848:	009b      	lsls	r3, r3, #2
    284a:	f240 3220 	movw	r2, #800	; 0x320
    284e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2852:	4413      	add	r3, r2
    2854:	4618      	mov	r0, r3
    2856:	f001 f973 	bl	3b40 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	3301      	adds	r3, #1
    285e:	607b      	str	r3, [r7, #4]
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	2b01      	cmp	r3, #1
    2864:	d9ec      	bls.n	2840 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2866:	f240 3048 	movw	r0, #840	; 0x348
    286a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    286e:	f001 f967 	bl	3b40 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2872:	f240 305c 	movw	r0, #860	; 0x35c
    2876:	f2c2 0000 	movt	r0, #8192	; 0x2000
    287a:	f001 f961 	bl	3b40 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    287e:	f240 3078 	movw	r0, #888	; 0x378
    2882:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2886:	f001 f95b 	bl	3b40 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    288a:	f240 3370 	movw	r3, #880	; 0x370
    288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2892:	f240 3248 	movw	r2, #840	; 0x348
    2896:	f2c2 0200 	movt	r2, #8192	; 0x2000
    289a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    289c:	f240 3374 	movw	r3, #884	; 0x374
    28a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a4:	f240 325c 	movw	r2, #860	; 0x35c
    28a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28ac:	601a      	str	r2, [r3, #0]
}
    28ae:	3708      	adds	r7, #8
    28b0:	46bd      	mov	sp, r7
    28b2:	bd80      	pop	{r7, pc}

000028b4 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	68db      	ldr	r3, [r3, #12]
    28c0:	68db      	ldr	r3, [r3, #12]
    28c2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    28c4:	68bb      	ldr	r3, [r7, #8]
    28c6:	3318      	adds	r3, #24
    28c8:	4618      	mov	r0, r3
    28ca:	f001 f9c5 	bl	3c58 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	3318      	adds	r3, #24
    28d2:	f240 3078 	movw	r0, #888	; 0x378
    28d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28da:	4619      	mov	r1, r3
    28dc:	f001 f95c 	bl	3b98 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    28e0:	68bb      	ldr	r3, [r7, #8]
    28e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28e4:	f240 338c 	movw	r3, #908	; 0x38c
    28e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28f0:	429a      	cmp	r2, r3
    28f2:	d302      	bcc.n	28fa <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    28f4:	2301      	movs	r3, #1
    28f6:	60fb      	str	r3, [r7, #12]
    28f8:	e001      	b.n	28fe <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    28fa:	2300      	movs	r3, #0
    28fc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    28fe:	68fb      	ldr	r3, [r7, #12]
}
    2900:	4618      	mov	r0, r3
    2902:	3710      	adds	r7, #16
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}

00002908 <prvInitialiseEventLists>:
static void vEventSetxTimeStamp( xEventHandle pxNewEvent, portTickType xTime );

static xList * pxGetReadyList( void );

static void prvInitialiseEventLists(void )
{
    2908:	b580      	push	{r7, lr}
    290a:	b082      	sub	sp, #8
    290c:	af00      	add	r7, sp, #0
    volatile portBASE_TYPE xCPU;

    vListInitialise( ( xList * ) &xEventList );
    290e:	f240 30a0 	movw	r0, #928	; 0x3a0
    2912:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2916:	f001 f913 	bl	3b40 <vListInitialise>

    // init the xEventReadyList[configCPU_NUMBER].
    for ( xCPU = 0; xCPU < configCPU_NUMBER; xCPU ++ )
    291a:	2300      	movs	r3, #0
    291c:	607b      	str	r3, [r7, #4]
    291e:	e00f      	b.n	2940 <prvInitialiseEventLists+0x38>
    {
        vListInitialise( (xList * ) & xEventReadyList[xCPU] );
    2920:	687a      	ldr	r2, [r7, #4]
    2922:	4613      	mov	r3, r2
    2924:	009b      	lsls	r3, r3, #2
    2926:	4413      	add	r3, r2
    2928:	009b      	lsls	r3, r3, #2
    292a:	f240 32b4 	movw	r2, #948	; 0x3b4
    292e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2932:	4413      	add	r3, r2
    2934:	4618      	mov	r0, r3
    2936:	f001 f903 	bl	3b40 <vListInitialise>
    volatile portBASE_TYPE xCPU;

    vListInitialise( ( xList * ) &xEventList );

    // init the xEventReadyList[configCPU_NUMBER].
    for ( xCPU = 0; xCPU < configCPU_NUMBER; xCPU ++ )
    293a:	687b      	ldr	r3, [r7, #4]
    293c:	3301      	adds	r3, #1
    293e:	607b      	str	r3, [r7, #4]
    2940:	687b      	ldr	r3, [r7, #4]
    2942:	2b00      	cmp	r3, #0
    2944:	ddec      	ble.n	2920 <prvInitialiseEventLists+0x18>
    {
        vListInitialise( (xList * ) & xEventReadyList[xCPU] );
    }
}
    2946:	3708      	adds	r7, #8
    2948:	46bd      	mov	sp, r7
    294a:	bd80      	pop	{r7, pc}

0000294c <xCompareFunction>:


static portBASE_TYPE xCompareFunction( const struct timeStamp t1, const struct timeStamp t2 )
{
    294c:	b082      	sub	sp, #8
    294e:	b490      	push	{r4, r7}
    2950:	b084      	sub	sp, #16
    2952:	af00      	add	r7, sp, #0
    2954:	1d3c      	adds	r4, r7, #4
    2956:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    295a:	61fb      	str	r3, [r7, #28]
    if( t1.xTime < t2.xTime )
    295c:	687a      	ldr	r2, [r7, #4]
    295e:	69fb      	ldr	r3, [r7, #28]
    2960:	429a      	cmp	r2, r3
    2962:	d201      	bcs.n	2968 <xCompareFunction+0x1c>
    {
        return pdTRUE;
    2964:	2301      	movs	r3, #1
    2966:	e00a      	b.n	297e <xCompareFunction+0x32>
    }
    else if ( t1.xTime == t2.xTime)
    2968:	687a      	ldr	r2, [r7, #4]
    296a:	69fb      	ldr	r3, [r7, #28]
    296c:	429a      	cmp	r2, r3
    296e:	d105      	bne.n	297c <xCompareFunction+0x30>
    {
        if( t1.xLevel < t2.xLevel )
    2970:	68fa      	ldr	r2, [r7, #12]
    2972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2974:	429a      	cmp	r2, r3
    2976:	da01      	bge.n	297c <xCompareFunction+0x30>
        {
            return pdTRUE;
    2978:	2301      	movs	r3, #1
    297a:	e000      	b.n	297e <xCompareFunction+0x32>
        }
    }

    return pdFALSE;
    297c:	2300      	movs	r3, #0
}
    297e:	4618      	mov	r0, r3
    2980:	3710      	adds	r7, #16
    2982:	46bd      	mov	sp, r7
    2984:	bc90      	pop	{r4, r7}
    2986:	b002      	add	sp, #8
    2988:	4770      	bx	lr
    298a:	bf00      	nop

0000298c <xEventGetpxSource>:
    return pdTRUE;
}
*/

xTaskHandle xEventGetpxSource( xEventHandle pxEvent )
{
    298c:	b480      	push	{r7}
    298e:	b083      	sub	sp, #12
    2990:	af00      	add	r7, sp, #0
    2992:	6078      	str	r0, [r7, #4]
    return ((eveECB *)pxEvent)->pxSource;
    2994:	687b      	ldr	r3, [r7, #4]
    2996:	681b      	ldr	r3, [r3, #0]
}
    2998:	4618      	mov	r0, r3
    299a:	370c      	adds	r7, #12
    299c:	46bd      	mov	sp, r7
    299e:	f85d 7b04 	ldr.w	r7, [sp], #4
    29a2:	4770      	bx	lr

000029a4 <xEventGetpxDestination>:

xTaskHandle xEventGetpxDestination( xEventHandle pxEvent)
{
    29a4:	b480      	push	{r7}
    29a6:	b083      	sub	sp, #12
    29a8:	af00      	add	r7, sp, #0
    29aa:	6078      	str	r0, [r7, #4]
    return ((eveECB *) pxEvent)->pxDestination;
    29ac:	687b      	ldr	r3, [r7, #4]
    29ae:	685b      	ldr	r3, [r3, #4]
}
    29b0:	4618      	mov	r0, r3
    29b2:	370c      	adds	r7, #12
    29b4:	46bd      	mov	sp, r7
    29b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    29ba:	4770      	bx	lr

000029bc <xEventGetxTimeStamp>:

struct timeStamp xEventGetxTimeStamp( xEventHandle pxEvent)
{
    29bc:	b480      	push	{r7}
    29be:	b083      	sub	sp, #12
    29c0:	af00      	add	r7, sp, #0
    29c2:	6078      	str	r0, [r7, #4]
    29c4:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xTimeStamp;
    29c6:	687b      	ldr	r3, [r7, #4]
    29c8:	683a      	ldr	r2, [r7, #0]
    29ca:	3208      	adds	r2, #8
    29cc:	ca07      	ldmia	r2, {r0, r1, r2}
    29ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
    29d2:	6878      	ldr	r0, [r7, #4]
    29d4:	370c      	adds	r7, #12
    29d6:	46bd      	mov	sp, r7
    29d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    29dc:	4770      	bx	lr
    29de:	bf00      	nop

000029e0 <xEventGetxData>:

struct eventData xEventGetxData( xEventHandle pxEvent)
{
    29e0:	b490      	push	{r4, r7}
    29e2:	b082      	sub	sp, #8
    29e4:	af00      	add	r7, sp, #0
    29e6:	6078      	str	r0, [r7, #4]
    29e8:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xData;
    29ea:	687a      	ldr	r2, [r7, #4]
    29ec:	683b      	ldr	r3, [r7, #0]
    29ee:	4614      	mov	r4, r2
    29f0:	3328      	adds	r3, #40	; 0x28
    29f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    29f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    29f8:	6878      	ldr	r0, [r7, #4]
    29fa:	3708      	adds	r7, #8
    29fc:	46bd      	mov	sp, r7
    29fe:	bc90      	pop	{r4, r7}
    2a00:	4770      	bx	lr
    2a02:	bf00      	nop

00002a04 <vEventSetxTimeStamp>:

void vEventSetxTimeStamp( xEventHandle pxNewEvent, portTickType xTime )
{
    2a04:	b580      	push	{r7, lr}
    2a06:	b084      	sub	sp, #16
    2a08:	af00      	add	r7, sp, #0
    2a0a:	6078      	str	r0, [r7, #4]
    2a0c:	6039      	str	r1, [r7, #0]
    eveECB * pxEvent =(eveECB *) pxNewEvent;
    2a0e:	687b      	ldr	r3, [r7, #4]
    2a10:	60fb      	str	r3, [r7, #12]
    /* get the current task TCB handler*/
    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    2a12:	f002 fd6b 	bl	54ec <xTaskGetCurrentTaskHandle>
    2a16:	60b8      	str	r0, [r7, #8]

    /*set the time of this event to be processed */
    pxEvent->xTimeStamp.xTime = xTime ;
    2a18:	68fb      	ldr	r3, [r7, #12]
    2a1a:	683a      	ldr	r2, [r7, #0]
    2a1c:	609a      	str	r2, [r3, #8]

    /*the microstep is not used now*/
    pxEvent->xTimeStamp.xMicroStep = 0;
    2a1e:	68fb      	ldr	r3, [r7, #12]
    2a20:	2200      	movs	r2, #0
    2a22:	60da      	str	r2, [r3, #12]

    /* set the level of timestamp according to the topology sort result*/
    pxEvent->xTimeStamp.xLevel = xEventSerialNumber;
    2a24:	f240 33c8 	movw	r3, #968	; 0x3c8
    2a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a2c:	681b      	ldr	r3, [r3, #0]
    2a2e:	461a      	mov	r2, r3
    2a30:	68fb      	ldr	r3, [r7, #12]
    2a32:	611a      	str	r2, [r3, #16]

    xEventSerialNumber++;
    2a34:	f240 33c8 	movw	r3, #968	; 0x3c8
    2a38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a3c:	681b      	ldr	r3, [r3, #0]
    2a3e:	1c5a      	adds	r2, r3, #1
    2a40:	f240 33c8 	movw	r3, #968	; 0x3c8
    2a44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a48:	601a      	str	r2, [r3, #0]
}
    2a4a:	3710      	adds	r7, #16
    2a4c:	46bd      	mov	sp, r7
    2a4e:	bd80      	pop	{r7, pc}

00002a50 <vEventSetxData>:

static void vEventSetxData( xEventHandle pxEvent, struct eventData xData)
{
    2a50:	b084      	sub	sp, #16
    2a52:	b490      	push	{r4, r7}
    2a54:	b082      	sub	sp, #8
    2a56:	af00      	add	r7, sp, #0
    2a58:	6078      	str	r0, [r7, #4]
    2a5a:	f107 0014 	add.w	r0, r7, #20
    2a5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ((eveECB *) pxEvent)->xData = xData;
    2a62:	687b      	ldr	r3, [r7, #4]
    2a64:	f103 0428 	add.w	r4, r3, #40	; 0x28
    2a68:	f107 0314 	add.w	r3, r7, #20
    2a6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2a6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    2a72:	3708      	adds	r7, #8
    2a74:	46bd      	mov	sp, r7
    2a76:	bc90      	pop	{r4, r7}
    2a78:	b004      	add	sp, #16
    2a7a:	4770      	bx	lr

00002a7c <pxGetReadyList>:
* Get the event ready list according to the multicore scheduling algorithm.
*
* @return the address of the event ready list.
* */
static xList * pxGetReadyList( void )
{
    2a7c:	b480      	push	{r7}
    2a7e:	af00      	add	r7, sp, #0
    return &xEventReadyList[0];
    2a80:	f240 33b4 	movw	r3, #948	; 0x3b4
    2a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
    2a88:	4618      	mov	r0, r3
    2a8a:	46bd      	mov	sp, r7
    2a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a90:	4770      	bx	lr
    2a92:	bf00      	nop

00002a94 <prvEventListGenericInsert>:
}

*/

static void prvEventListGenericInsert( xListItem *pxNewListItem )
{
    2a94:	b580      	push	{r7, lr}
    2a96:	b08c      	sub	sp, #48	; 0x30
    2a98:	af02      	add	r7, sp, #8
    2a9a:	6078      	str	r0, [r7, #4]
    volatile xListItem *pxIterator;
    struct timeStamp xTimeStampOfInsertion;
    xList * pxList = &xEventList;
    2a9c:	f240 33a0 	movw	r3, #928	; 0x3a0
    2aa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2aa4:	623b      	str	r3, [r7, #32]

    xTimeStampOfInsertion = xEventGetxTimeStamp(pxNewListItem->pvOwner);
    2aa6:	687b      	ldr	r3, [r7, #4]
    2aa8:	68db      	ldr	r3, [r3, #12]
    2aaa:	f107 0208 	add.w	r2, r7, #8
    2aae:	4610      	mov	r0, r2
    2ab0:	4619      	mov	r1, r3
    2ab2:	f7ff ff83 	bl	29bc <xEventGetxTimeStamp>

    if( xTimeStampOfInsertion.xTime == portMAX_DELAY )
    2ab6:	68bb      	ldr	r3, [r7, #8]
    2ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
    2abc:	d103      	bne.n	2ac6 <prvEventListGenericInsert+0x32>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    2abe:	6a3b      	ldr	r3, [r7, #32]
    2ac0:	691b      	ldr	r3, [r3, #16]
    2ac2:	627b      	str	r3, [r7, #36]	; 0x24
    2ac4:	e023      	b.n	2b0e <prvEventListGenericInsert+0x7a>
    }
    else
    {
        taskENTER_CRITICAL();
    2ac6:	f002 fe79 	bl	57bc <vPortEnterCritical>
        // There must already be a End Flag Event with max timeStamp in xEventList.
        // The End Flag Event can be the last Event to be processed, and new events
        // are inserted before it in xEventList.
        // The End Flag Event has been inserted when xEventList is initialised.
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); xCompareFunction( xEventGetxTimeStamp( pxIterator->pxNext->pvOwner ), xTimeStampOfInsertion ); pxIterator = pxIterator->pxNext ) 
    2aca:	6a3b      	ldr	r3, [r7, #32]
    2acc:	3308      	adds	r3, #8
    2ace:	627b      	str	r3, [r7, #36]	; 0x24
    2ad0:	e002      	b.n	2ad8 <prvEventListGenericInsert+0x44>
    2ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ad4:	685b      	ldr	r3, [r3, #4]
    2ad6:	627b      	str	r3, [r7, #36]	; 0x24
    2ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ada:	685b      	ldr	r3, [r3, #4]
    2adc:	68db      	ldr	r3, [r3, #12]
    2ade:	f107 0214 	add.w	r2, r7, #20
    2ae2:	4610      	mov	r0, r2
    2ae4:	4619      	mov	r1, r3
    2ae6:	f7ff ff69 	bl	29bc <xEventGetxTimeStamp>
    2aea:	466b      	mov	r3, sp
    2aec:	f107 020c 	add.w	r2, r7, #12
    2af0:	e892 0003 	ldmia.w	r2, {r0, r1}
    2af4:	e883 0003 	stmia.w	r3, {r0, r1}
    2af8:	68bb      	ldr	r3, [r7, #8]
    2afa:	f107 0214 	add.w	r2, r7, #20
    2afe:	ca07      	ldmia	r2, {r0, r1, r2}
    2b00:	f7ff ff24 	bl	294c <xCompareFunction>
    2b04:	4603      	mov	r3, r0
    2b06:	2b00      	cmp	r3, #0
    2b08:	d1e3      	bne.n	2ad2 <prvEventListGenericInsert+0x3e>
        {
        }
        taskEXIT_CRITICAL();
    2b0a:	f002 fe6d 	bl	57e8 <vPortExitCritical>
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    2b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2b10:	685a      	ldr	r2, [r3, #4]
    2b12:	687b      	ldr	r3, [r7, #4]
    2b14:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2b16:	687b      	ldr	r3, [r7, #4]
    2b18:	685b      	ldr	r3, [r3, #4]
    2b1a:	687a      	ldr	r2, [r7, #4]
    2b1c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
    2b1e:	687b      	ldr	r3, [r7, #4]
    2b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2b22:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2b26:	687a      	ldr	r2, [r7, #4]
    2b28:	605a      	str	r2, [r3, #4]

    pxNewListItem->pvContainer = ( void * ) pxList;
    2b2a:	687b      	ldr	r3, [r7, #4]
    2b2c:	6a3a      	ldr	r2, [r7, #32]
    2b2e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
    2b30:	6a3b      	ldr	r3, [r7, #32]
    2b32:	681b      	ldr	r3, [r3, #0]
    2b34:	1c5a      	adds	r2, r3, #1
    2b36:	6a3b      	ldr	r3, [r7, #32]
    2b38:	601a      	str	r2, [r3, #0]
}
    2b3a:	3728      	adds	r7, #40	; 0x28
    2b3c:	46bd      	mov	sp, r7
    2b3e:	bd80      	pop	{r7, pc}

00002b40 <vListIntialiseEventItem>:



static void vListIntialiseEventItem( xEventHandle pvOwner, xListItem * pxNewEventItem)
{
    2b40:	b480      	push	{r7}
    2b42:	b083      	sub	sp, #12
    2b44:	af00      	add	r7, sp, #0
    2b46:	6078      	str	r0, [r7, #4]
    2b48:	6039      	str	r1, [r7, #0]
    /* set the pvOwner of the EventItem as a event*/
    listSET_LIST_ITEM_OWNER( pxNewEventItem, pvOwner );
    2b4a:	683b      	ldr	r3, [r7, #0]
    2b4c:	687a      	ldr	r2, [r7, #4]
    2b4e:	60da      	str	r2, [r3, #12]
    //pxNewEventItem->pvContainer = (void *) &xEventList;
}
    2b50:	370c      	adds	r7, #12
    2b52:	46bd      	mov	sp, r7
    2b54:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b58:	4770      	bx	lr
    2b5a:	bf00      	nop

00002b5c <vEventGenericCreate>:


void vEventGenericCreate( xTaskHandle pxDestination, struct eventData pdData)
{
    2b5c:	b084      	sub	sp, #16
    2b5e:	b580      	push	{r7, lr}
    2b60:	b088      	sub	sp, #32
    2b62:	af02      	add	r7, sp, #8
    2b64:	6078      	str	r0, [r7, #4]
    2b66:	f107 0024 	add.w	r0, r7, #36	; 0x24
    2b6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    eveECB * pxNewEvent = NULL;
    2b6e:	2300      	movs	r3, #0
    2b70:	617b      	str	r3, [r7, #20]

    /* using the pxCurrentTCB, current task should not be changed */
    taskENTER_CRITICAL();
    2b72:	f002 fe23 	bl	57bc <vPortEnterCritical>

    if ( IS_FIRST_EVENT == 1 )
    2b76:	f240 0328 	movw	r3, #40	; 0x28
    2b7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b7e:	681b      	ldr	r3, [r3, #0]
    2b80:	2b01      	cmp	r3, #1
    2b82:	d129      	bne.n	2bd8 <vEventGenericCreate+0x7c>
    {
        IS_FIRST_EVENT = 0;
    2b84:	f240 0328 	movw	r3, #40	; 0x28
    2b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b8c:	2200      	movs	r2, #0
    2b8e:	601a      	str	r2, [r3, #0]
        prvInitialiseEventLists();
    2b90:	f7ff feba 	bl	2908 <prvInitialiseEventLists>

        // Creating an End FLag Event and insert into the end of xEventList.
        eveECB * pxEndFlagEvent = (eveECB *) pvPortMalloc( sizeof( eveECB ) );
    2b94:	2038      	movs	r0, #56	; 0x38
    2b96:	f002 fe8b 	bl	58b0 <pvPortMalloc>
    2b9a:	6138      	str	r0, [r7, #16]
        if( pxEndFlagEvent != NULL )
    2b9c:	693b      	ldr	r3, [r7, #16]
    2b9e:	2b00      	cmp	r3, #0
    2ba0:	d01a      	beq.n	2bd8 <vEventGenericCreate+0x7c>
        {
           // pxEndFlagEvent->pxSource = pxEndFlagEvent->pxDestination = NULL;
            // there may be some problem here because of this assignment way
            pxEndFlagEvent->xTimeStamp.xTime = portMAX_DELAY;
    2ba2:	693b      	ldr	r3, [r7, #16]
    2ba4:	f04f 32ff 	mov.w	r2, #4294967295
    2ba8:	609a      	str	r2, [r3, #8]
            pxEndFlagEvent->xTimeStamp.xMicroStep = portMAX_DELAY;
    2baa:	693b      	ldr	r3, [r7, #16]
    2bac:	f04f 32ff 	mov.w	r2, #4294967295
    2bb0:	60da      	str	r2, [r3, #12]
            pxEndFlagEvent->xTimeStamp.xLevel = portMAX_DELAY;
    2bb2:	693b      	ldr	r3, [r7, #16]
    2bb4:	f04f 32ff 	mov.w	r2, #4294967295
    2bb8:	611a      	str	r2, [r3, #16]
            vListIntialiseEventItem( pxEndFlagEvent, (xListItem *) & pxEndFlagEvent->xEventListItem );
    2bba:	693b      	ldr	r3, [r7, #16]
    2bbc:	3314      	adds	r3, #20
    2bbe:	6938      	ldr	r0, [r7, #16]
    2bc0:	4619      	mov	r1, r3
    2bc2:	f7ff ffbd 	bl	2b40 <vListIntialiseEventItem>
            vListInsertEnd(&xEventList, &pxEndFlagEvent->xEventListItem); 
    2bc6:	693b      	ldr	r3, [r7, #16]
    2bc8:	3314      	adds	r3, #20
    2bca:	f240 30a0 	movw	r0, #928	; 0x3a0
    2bce:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2bd2:	4619      	mov	r1, r3
    2bd4:	f000 ffe0 	bl	3b98 <vListInsertEnd>
        }
    }

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    2bd8:	f002 fc88 	bl	54ec <xTaskGetCurrentTaskHandle>
    2bdc:	60f8      	str	r0, [r7, #12]
    pxNewEvent = (eveECB *)pvPortMalloc( sizeof( eveECB ));
    2bde:	2038      	movs	r0, #56	; 0x38
    2be0:	f002 fe66 	bl	58b0 <pvPortMalloc>
    2be4:	6178      	str	r0, [r7, #20]
    if( pxNewEvent == NULL )
    2be6:	697b      	ldr	r3, [r7, #20]
    2be8:	2b00      	cmp	r3, #0
    2bea:	d105      	bne.n	2bf8 <vEventGenericCreate+0x9c>
    {
        vPrintString("malloc for event stack failed\n\r");
    2bec:	f648 0010 	movw	r0, #34832	; 0x8810
    2bf0:	f2c0 0001 	movt	r0, #1
    2bf4:	f014 f96e 	bl	16ed4 <vPrintString>
    }
    if ( pxNewEvent != NULL )
    2bf8:	697b      	ldr	r3, [r7, #20]
    2bfa:	2b00      	cmp	r3, #0
    2bfc:	d026      	beq.n	2c4c <vEventGenericCreate+0xf0>
    {
        pxNewEvent->pxSource = pxCurrentTCBLocal;
    2bfe:	697b      	ldr	r3, [r7, #20]
    2c00:	68fa      	ldr	r2, [r7, #12]
    2c02:	601a      	str	r2, [r3, #0]
        pxNewEvent->pxDestination = pxDestination;
    2c04:	697b      	ldr	r3, [r7, #20]
    2c06:	687a      	ldr	r2, [r7, #4]
    2c08:	605a      	str	r2, [r3, #4]

        /* initialise the time stamp of an event item according to the sort algorithm.*/
        if( pdData.IS_LAST_SERVANT == 1 )
    2c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2c0c:	2b01      	cmp	r3, #1
    2c0e:	d105      	bne.n	2c1c <vEventGenericCreate+0xc0>
        {
            vEventSetxTimeStamp( pxNewEvent, pdData.xNextPeriod);
    2c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2c12:	6978      	ldr	r0, [r7, #20]
    2c14:	4619      	mov	r1, r3
    2c16:	f7ff fef5 	bl	2a04 <vEventSetxTimeStamp>
    2c1a:	e004      	b.n	2c26 <vEventGenericCreate+0xca>
        }
        else
        {
            vEventSetxTimeStamp( pxNewEvent, pdData.xTime );
    2c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c1e:	6978      	ldr	r0, [r7, #20]
    2c20:	4619      	mov	r1, r3
    2c22:	f7ff feef 	bl	2a04 <vEventSetxTimeStamp>
        }

        vListIntialiseEventItem( pxNewEvent, (xListItem *) &pxNewEvent->xEventListItem );
    2c26:	697b      	ldr	r3, [r7, #20]
    2c28:	3314      	adds	r3, #20
    2c2a:	6978      	ldr	r0, [r7, #20]
    2c2c:	4619      	mov	r1, r3
    2c2e:	f7ff ff87 	bl	2b40 <vListIntialiseEventItem>

        vEventSetxData( pxNewEvent, pdData );
    2c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2c34:	9300      	str	r3, [sp, #0]
    2c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
    2c3a:	cb0e      	ldmia	r3, {r1, r2, r3}
    2c3c:	6978      	ldr	r0, [r7, #20]
    2c3e:	f7ff ff07 	bl	2a50 <vEventSetxData>

        /*how to call this funciton: vEventListInsert( newListItem ). This function add the new item into the xEventList as default*/
        prvEventListGenericInsert( (xListItem *) &(pxNewEvent->xEventListItem));
    2c42:	697b      	ldr	r3, [r7, #20]
    2c44:	3314      	adds	r3, #20
    2c46:	4618      	mov	r0, r3
    2c48:	f7ff ff24 	bl	2a94 <prvEventListGenericInsert>
    
    }
    taskEXIT_CRITICAL();
    2c4c:	f002 fdcc 	bl	57e8 <vPortExitCritical>

}
    2c50:	3718      	adds	r7, #24
    2c52:	46bd      	mov	sp, r7
    2c54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    2c58:	b004      	add	sp, #16
    2c5a:	4770      	bx	lr

00002c5c <xEventListGenericTransit>:


/* An API to transfer the Event Item from xEventList to one of the xEventReadyList*/
portBASE_TYPE xEventListGenericTransit( xListItem ** pxEventListItem, xList ** pxCurrentReadyList)
{
    2c5c:	b580      	push	{r7, lr}
    2c5e:	b086      	sub	sp, #24
    2c60:	af00      	add	r7, sp, #0
    2c62:	6078      	str	r0, [r7, #4]
    2c64:	6039      	str	r1, [r7, #0]
    //if( listLIST_IS_EMPTY(&xEventList) )
    // if there is only End Flag Event in xEventList, then return NULL.

    if( listCURRENT_LIST_LENGTH(&xEventList) == 1 )
    2c66:	f240 33a0 	movw	r3, #928	; 0x3a0
    2c6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c6e:	681b      	ldr	r3, [r3, #0]
    2c70:	2b01      	cmp	r3, #1
    2c72:	d108      	bne.n	2c86 <xEventListGenericTransit+0x2a>
    {
        *pxEventListItem  = NULL;
    2c74:	687b      	ldr	r3, [r7, #4]
    2c76:	2200      	movs	r2, #0
    2c78:	601a      	str	r2, [r3, #0]
        *pxCurrentReadyList = NULL;
    2c7a:	683b      	ldr	r3, [r7, #0]
    2c7c:	2200      	movs	r2, #0
    2c7e:	601a      	str	r2, [r3, #0]
        return -1;
    2c80:	f04f 33ff 	mov.w	r3, #4294967295
    2c84:	e035      	b.n	2cf2 <xEventListGenericTransit+0x96>
    }
        
    // get the first event of the xEventList.  
    *pxEventListItem = (xListItem *)xEventList.xListEnd.pxNext;
    2c86:	f240 33a0 	movw	r3, #928	; 0x3a0
    2c8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c8e:	68da      	ldr	r2, [r3, #12]
    2c90:	687b      	ldr	r3, [r7, #4]
    2c92:	601a      	str	r2, [r3, #0]
    *pxCurrentReadyList = pxGetReadyList();
    2c94:	f7ff fef2 	bl	2a7c <pxGetReadyList>
    2c98:	4602      	mov	r2, r0
    2c9a:	683b      	ldr	r3, [r7, #0]
    2c9c:	601a      	str	r2, [r3, #0]

    struct timeStamp xTimeStamp = xEventGetxTimeStamp((xEventHandle) (*pxEventListItem)->pvOwner);
    2c9e:	687b      	ldr	r3, [r7, #4]
    2ca0:	681b      	ldr	r3, [r3, #0]
    2ca2:	68db      	ldr	r3, [r3, #12]
    2ca4:	f107 0208 	add.w	r2, r7, #8
    2ca8:	4610      	mov	r0, r2
    2caa:	4619      	mov	r1, r3
    2cac:	f7ff fe86 	bl	29bc <xEventGetxTimeStamp>
    portTickType xCurrentTime;
    xCurrentTime = xTaskGetTickCount();
    2cb0:	f002 f850 	bl	4d54 <xTaskGetTickCount>
    2cb4:	6178      	str	r0, [r7, #20]


    if( xTimeStamp.xTime > xCurrentTime)
    2cb6:	68ba      	ldr	r2, [r7, #8]
    2cb8:	697b      	ldr	r3, [r7, #20]
    2cba:	429a      	cmp	r2, r3
    2cbc:	d907      	bls.n	2cce <xEventListGenericTransit+0x72>
    {
        // not time yet
        *pxEventListItem  = NULL;
    2cbe:	687b      	ldr	r3, [r7, #4]
    2cc0:	2200      	movs	r2, #0
    2cc2:	601a      	str	r2, [r3, #0]
        *pxCurrentReadyList = NULL;
    2cc4:	683b      	ldr	r3, [r7, #0]
    2cc6:	2200      	movs	r2, #0
    2cc8:	601a      	str	r2, [r3, #0]
        return 0;
    2cca:	2300      	movs	r3, #0
    2ccc:	e011      	b.n	2cf2 <xEventListGenericTransit+0x96>
    }
    else
    {
        taskENTER_CRITICAL();
    2cce:	f002 fd75 	bl	57bc <vPortEnterCritical>
        /* remove pxListItem from xEventList */ 
        vListRemove(*pxEventListItem);
    2cd2:	687b      	ldr	r3, [r7, #4]
    2cd4:	681b      	ldr	r3, [r3, #0]
    2cd6:	4618      	mov	r0, r3
    2cd8:	f000 ffbe 	bl	3c58 <vListRemove>
        /* insert the pxListItem into the specified pxList */
        vListInsertEnd(*pxCurrentReadyList, *pxEventListItem);
    2cdc:	683b      	ldr	r3, [r7, #0]
    2cde:	681a      	ldr	r2, [r3, #0]
    2ce0:	687b      	ldr	r3, [r7, #4]
    2ce2:	681b      	ldr	r3, [r3, #0]
    2ce4:	4610      	mov	r0, r2
    2ce6:	4619      	mov	r1, r3
    2ce8:	f000 ff56 	bl	3b98 <vListInsertEnd>
        taskEXIT_CRITICAL();
    2cec:	f002 fd7c 	bl	57e8 <vPortExitCritical>
        return 1;
    2cf0:	2301      	movs	r3, #1
    }
}
    2cf2:	4618      	mov	r0, r3
    2cf4:	3718      	adds	r7, #24
    2cf6:	46bd      	mov	sp, r7
    2cf8:	bd80      	pop	{r7, pc}
    2cfa:	bf00      	nop

00002cfc <vEventGenericReceive>:

void vEventGenericReceive( xEventHandle * pxEvent, xTaskHandle pxSource, xList * pxList )
{
    2cfc:	b580      	push	{r7, lr}
    2cfe:	b088      	sub	sp, #32
    2d00:	af00      	add	r7, sp, #0
    2d02:	60f8      	str	r0, [r7, #12]
    2d04:	60b9      	str	r1, [r7, #8]
    2d06:	607a      	str	r2, [r7, #4]
    xList * const pxConstList = pxList; 
    2d08:	687b      	ldr	r3, [r7, #4]
    2d0a:	61bb      	str	r3, [r7, #24]
    {
        //successful.
        //helloworld();
    }

    if( listLIST_IS_EMPTY( pxList ) )
    2d0c:	687b      	ldr	r3, [r7, #4]
    2d0e:	681b      	ldr	r3, [r3, #0]
    2d10:	2b00      	cmp	r3, #0
    2d12:	d103      	bne.n	2d1c <vEventGenericReceive+0x20>
    {
        *pxEvent = NULL;
    2d14:	68fb      	ldr	r3, [r7, #12]
    2d16:	2200      	movs	r2, #0
    2d18:	601a      	str	r2, [r3, #0]
        return;
    2d1a:	e04d      	b.n	2db8 <vEventGenericReceive+0xbc>
    }

    volatile xListItem * pxFlag = pxConstList->xListEnd.pxNext;
    2d1c:	69bb      	ldr	r3, [r7, #24]
    2d1e:	68db      	ldr	r3, [r3, #12]
    2d20:	61fb      	str	r3, [r7, #28]


    taskENTER_CRITICAL();
    2d22:	f002 fd4b 	bl	57bc <vPortEnterCritical>

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    2d26:	f002 fbe1 	bl	54ec <xTaskGetCurrentTaskHandle>
    2d2a:	6178      	str	r0, [r7, #20]

    /* look up in the specified xEventReadyList. */
    for(; pxFlag != (xListItem *) ( pxConstList->xListEnd.pxPrevious); pxFlag = pxFlag->pxNext)
    2d2c:	e01e      	b.n	2d6c <vEventGenericReceive+0x70>
    {
        if( xEventGetpxSource((xEventHandle) pxFlag->pvOwner) == pxSource && xEventGetpxDestination((xEventHandle) pxFlag->pvOwner) == pxCurrentTCBLocal )
    2d2e:	69fb      	ldr	r3, [r7, #28]
    2d30:	68db      	ldr	r3, [r3, #12]
    2d32:	4618      	mov	r0, r3
    2d34:	f7ff fe2a 	bl	298c <xEventGetpxSource>
    2d38:	4602      	mov	r2, r0
    2d3a:	68bb      	ldr	r3, [r7, #8]
    2d3c:	429a      	cmp	r2, r3
    2d3e:	d112      	bne.n	2d66 <vEventGenericReceive+0x6a>
    2d40:	69fb      	ldr	r3, [r7, #28]
    2d42:	68db      	ldr	r3, [r3, #12]
    2d44:	4618      	mov	r0, r3
    2d46:	f7ff fe2d 	bl	29a4 <xEventGetpxDestination>
    2d4a:	4602      	mov	r2, r0
    2d4c:	697b      	ldr	r3, [r7, #20]
    2d4e:	429a      	cmp	r2, r3
    2d50:	d109      	bne.n	2d66 <vEventGenericReceive+0x6a>
        {
            *pxEvent = pxFlag->pvOwner;
    2d52:	69fb      	ldr	r3, [r7, #28]
    2d54:	68da      	ldr	r2, [r3, #12]
    2d56:	68fb      	ldr	r3, [r7, #12]
    2d58:	601a      	str	r2, [r3, #0]
            vListRemove((xListItem *)pxFlag);
    2d5a:	69f8      	ldr	r0, [r7, #28]
    2d5c:	f000 ff7c 	bl	3c58 <vListRemove>
            taskEXIT_CRITICAL();
    2d60:	f002 fd42 	bl	57e8 <vPortExitCritical>
            return;
    2d64:	e028      	b.n	2db8 <vEventGenericReceive+0xbc>
    taskENTER_CRITICAL();

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();

    /* look up in the specified xEventReadyList. */
    for(; pxFlag != (xListItem *) ( pxConstList->xListEnd.pxPrevious); pxFlag = pxFlag->pxNext)
    2d66:	69fb      	ldr	r3, [r7, #28]
    2d68:	685b      	ldr	r3, [r3, #4]
    2d6a:	61fb      	str	r3, [r7, #28]
    2d6c:	69bb      	ldr	r3, [r7, #24]
    2d6e:	691a      	ldr	r2, [r3, #16]
    2d70:	69fb      	ldr	r3, [r7, #28]
    2d72:	429a      	cmp	r2, r3
    2d74:	d1db      	bne.n	2d2e <vEventGenericReceive+0x32>
            return;
        }
    }

    /* we can't forget the last one item of the list. */
    if( xEventGetpxSource((xEventHandle) pxFlag->pvOwner) == pxSource && xEventGetpxDestination((xEventHandle) pxFlag->pvOwner) == pxCurrentTCBLocal )
    2d76:	69fb      	ldr	r3, [r7, #28]
    2d78:	68db      	ldr	r3, [r3, #12]
    2d7a:	4618      	mov	r0, r3
    2d7c:	f7ff fe06 	bl	298c <xEventGetpxSource>
    2d80:	4602      	mov	r2, r0
    2d82:	68bb      	ldr	r3, [r7, #8]
    2d84:	429a      	cmp	r2, r3
    2d86:	d112      	bne.n	2dae <vEventGenericReceive+0xb2>
    2d88:	69fb      	ldr	r3, [r7, #28]
    2d8a:	68db      	ldr	r3, [r3, #12]
    2d8c:	4618      	mov	r0, r3
    2d8e:	f7ff fe09 	bl	29a4 <xEventGetpxDestination>
    2d92:	4602      	mov	r2, r0
    2d94:	697b      	ldr	r3, [r7, #20]
    2d96:	429a      	cmp	r2, r3
    2d98:	d109      	bne.n	2dae <vEventGenericReceive+0xb2>
    {
        *pxEvent = pxFlag->pvOwner;
    2d9a:	69fb      	ldr	r3, [r7, #28]
    2d9c:	68da      	ldr	r2, [r3, #12]
    2d9e:	68fb      	ldr	r3, [r7, #12]
    2da0:	601a      	str	r2, [r3, #0]
        vListRemove((xListItem *)pxFlag);
    2da2:	69f8      	ldr	r0, [r7, #28]
    2da4:	f000 ff58 	bl	3c58 <vListRemove>
        taskEXIT_CRITICAL();
    2da8:	f002 fd1e 	bl	57e8 <vPortExitCritical>
        return;
    2dac:	e004      	b.n	2db8 <vEventGenericReceive+0xbc>
    }
    else
    {
        // cannot find the specified event.
        *pxEvent = NULL;
    2dae:	68fb      	ldr	r3, [r7, #12]
    2db0:	2200      	movs	r2, #0
    2db2:	601a      	str	r2, [r3, #0]
    }

    taskEXIT_CRITICAL();
    2db4:	f002 fd18 	bl	57e8 <vPortExitCritical>
}
    2db8:	3720      	adds	r7, #32
    2dba:	46bd      	mov	sp, r7
    2dbc:	bd80      	pop	{r7, pc}
    2dbe:	bf00      	nop

00002dc0 <vEventGenericDelete>:

void vEventGenericDelete( xEventHandle xEvent)
{
    2dc0:	b580      	push	{r7, lr}
    2dc2:	b082      	sub	sp, #8
    2dc4:	af00      	add	r7, sp, #0
    2dc6:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
    2dc8:	f002 fcf8 	bl	57bc <vPortEnterCritical>

    vPortFree( xEvent );
    2dcc:	6878      	ldr	r0, [r7, #4]
    2dce:	f002 fe33 	bl	5a38 <vPortFree>

    taskEXIT_CRITICAL();
    2dd2:	f002 fd09 	bl	57e8 <vPortExitCritical>
}
    2dd6:	3708      	adds	r7, #8
    2dd8:	46bd      	mov	sp, r7
    2dda:	bd80      	pop	{r7, pc}

00002ddc <vSemaphoreInitialise>:
}
*/

/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    2ddc:	b580      	push	{r7, lr}
    2dde:	b082      	sub	sp, #8
    2de0:	af00      	add	r7, sp, #0
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    2de2:	2300      	movs	r3, #0
    2de4:	607b      	str	r3, [r7, #4]
    2de6:	e033      	b.n	2e50 <vSemaphoreInitialise+0x74>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
    2de8:	2001      	movs	r0, #1
    2dea:	2100      	movs	r1, #0
    2dec:	2203      	movs	r2, #3
    2dee:	f000 ffa9 	bl	3d44 <xQueueGenericCreate>
    2df2:	4601      	mov	r1, r0
    2df4:	f240 7398 	movw	r3, #1944	; 0x798
    2df8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2dfc:	687a      	ldr	r2, [r7, #4]
    2dfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    2e02:	f240 7398 	movw	r3, #1944	; 0x798
    2e06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e0a:	687a      	ldr	r2, [r7, #4]
    2e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2e10:	2b00      	cmp	r3, #0
    2e12:	d00c      	beq.n	2e2e <vSemaphoreInitialise+0x52>
    2e14:	f240 7398 	movw	r3, #1944	; 0x798
    2e18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e1c:	687a      	ldr	r2, [r7, #4]
    2e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2e22:	4618      	mov	r0, r3
    2e24:	2100      	movs	r1, #0
    2e26:	2200      	movs	r2, #0
    2e28:	2300      	movs	r3, #0
    2e2a:	f001 f819 	bl	3e60 <xQueueGenericSend>
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    2e2e:	f240 7398 	movw	r3, #1944	; 0x798
    2e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e36:	687a      	ldr	r2, [r7, #4]
    2e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2e3c:	4618      	mov	r0, r3
    2e3e:	2100      	movs	r1, #0
    2e40:	f04f 32ff 	mov.w	r2, #4294967295
    2e44:	2300      	movs	r3, #0
    2e46:	f001 f8d1 	bl	3fec <xQueueGenericReceive>
/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    2e4a:	687b      	ldr	r3, [r7, #4]
    2e4c:	3301      	adds	r3, #1
    2e4e:	607b      	str	r3, [r7, #4]
    2e50:	687b      	ldr	r3, [r7, #4]
    2e52:	2b15      	cmp	r3, #21
    2e54:	ddc8      	ble.n	2de8 <vSemaphoreInitialise+0xc>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    }
}
    2e56:	3708      	adds	r7, #8
    2e58:	46bd      	mov	sp, r7
    2e5a:	bd80      	pop	{r7, pc}

00002e5c <vParameterInitialise>:
/*
 * Set all the parameters of S-Servants.
 *
 * */
void vParameterInitialise()
{
    2e5c:	b480      	push	{r7}
    2e5e:	b085      	sub	sp, #20
    2e60:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    2e62:	2300      	movs	r3, #0
    2e64:	60fb      	str	r3, [r7, #12]
    2e66:	e073      	b.n	2f50 <vParameterInitialise+0xf4>
    {
        pvParameters[i].xMyFlag = i;
    2e68:	f240 33d0 	movw	r3, #976	; 0x3d0
    2e6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e70:	68fa      	ldr	r2, [r7, #12]
    2e72:	212c      	movs	r1, #44	; 0x2c
    2e74:	fb01 f202 	mul.w	r2, r1, r2
    2e78:	4413      	add	r3, r2
    2e7a:	68fa      	ldr	r2, [r7, #12]
    2e7c:	601a      	str	r2, [r3, #0]
        pvParameters[i].xNumOfIn = 0;
    2e7e:	f240 33d0 	movw	r3, #976	; 0x3d0
    2e82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e86:	68fa      	ldr	r2, [r7, #12]
    2e88:	212c      	movs	r1, #44	; 0x2c
    2e8a:	fb01 f202 	mul.w	r2, r1, r2
    2e8e:	4413      	add	r3, r2
    2e90:	3304      	adds	r3, #4
    2e92:	2200      	movs	r2, #0
    2e94:	601a      	str	r2, [r3, #0]
        pvParameters[i].xNumOfOut = 0;
    2e96:	f240 33d0 	movw	r3, #976	; 0x3d0
    2e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e9e:	68fa      	ldr	r2, [r7, #12]
    2ea0:	212c      	movs	r1, #44	; 0x2c
    2ea2:	fb01 f202 	mul.w	r2, r1, r2
    2ea6:	4413      	add	r3, r2
    2ea8:	3308      	adds	r3, #8
    2eaa:	2200      	movs	r2, #0
    2eac:	601a      	str	r2, [r3, #0]
        pvParameters[i].xLet = xLetOfServant[i]/portTICK_RATE_MS;
    2eae:	f240 0360 	movw	r3, #96	; 0x60
    2eb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2eb6:	68fa      	ldr	r2, [r7, #12]
    2eb8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2ebc:	f240 33d0 	movw	r3, #976	; 0x3d0
    2ec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ec4:	68f9      	ldr	r1, [r7, #12]
    2ec6:	202c      	movs	r0, #44	; 0x2c
    2ec8:	fb00 f101 	mul.w	r1, r0, r1
    2ecc:	440b      	add	r3, r1
    2ece:	331c      	adds	r3, #28
    2ed0:	601a      	str	r2, [r3, #0]
        pvParameters[i].xFp = xServantTable[i];
    2ed2:	f240 231c 	movw	r3, #540	; 0x21c
    2ed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2eda:	68fa      	ldr	r2, [r7, #12]
    2edc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2ee0:	f240 33d0 	movw	r3, #976	; 0x3d0
    2ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ee8:	68f9      	ldr	r1, [r7, #12]
    2eea:	202c      	movs	r0, #44	; 0x2c
    2eec:	fb00 f101 	mul.w	r1, r0, r1
    2ef0:	440b      	add	r3, r1
    2ef2:	3320      	adds	r3, #32
    2ef4:	601a      	str	r2, [r3, #0]
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
    2ef6:	f240 03b8 	movw	r3, #184	; 0xb8
    2efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2efe:	68fa      	ldr	r2, [r7, #12]
    2f00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2f04:	f240 33d0 	movw	r3, #976	; 0x3d0
    2f08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f0c:	68f9      	ldr	r1, [r7, #12]
    2f0e:	202c      	movs	r0, #44	; 0x2c
    2f10:	fb00 f101 	mul.w	r1, r0, r1
    2f14:	440b      	add	r3, r1
    2f16:	3328      	adds	r3, #40	; 0x28
    2f18:	601a      	str	r2, [r3, #0]
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    2f1a:	f240 03b8 	movw	r3, #184	; 0xb8
    2f1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f22:	68fa      	ldr	r2, [r7, #12]
    2f24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2f28:	f240 032c 	movw	r3, #44	; 0x2c
    2f2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f30:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2f34:	f240 33d0 	movw	r3, #976	; 0x3d0
    2f38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f3c:	68f9      	ldr	r1, [r7, #12]
    2f3e:	202c      	movs	r0, #44	; 0x2c
    2f40:	fb00 f101 	mul.w	r1, r0, r1
    2f44:	440b      	add	r3, r1
    2f46:	3324      	adds	r3, #36	; 0x24
    2f48:	601a      	str	r2, [r3, #0]
{
    portBASE_TYPE i;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    2f4a:	68fb      	ldr	r3, [r7, #12]
    2f4c:	3301      	adds	r3, #1
    2f4e:	60fb      	str	r3, [r7, #12]
    2f50:	68fb      	ldr	r3, [r7, #12]
    2f52:	2b15      	cmp	r3, #21
    2f54:	dd88      	ble.n	2e68 <vParameterInitialise+0xc>
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    2f56:	2300      	movs	r3, #0
    2f58:	60fb      	str	r3, [r7, #12]
    2f5a:	e080      	b.n	305e <vParameterInitialise+0x202>
    {
        xSource = xRelations.xRelation[i].xInFlag;
    2f5c:	f240 1210 	movw	r2, #272	; 0x110
    2f60:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f64:	68f9      	ldr	r1, [r7, #12]
    2f66:	460b      	mov	r3, r1
    2f68:	005b      	lsls	r3, r3, #1
    2f6a:	440b      	add	r3, r1
    2f6c:	009b      	lsls	r3, r3, #2
    2f6e:	4413      	add	r3, r2
    2f70:	3304      	adds	r3, #4
    2f72:	681b      	ldr	r3, [r3, #0]
    2f74:	60bb      	str	r3, [r7, #8]
        xDest   = xRelations.xRelation[i].xOutFlag;
    2f76:	f240 1210 	movw	r2, #272	; 0x110
    2f7a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f7e:	68f9      	ldr	r1, [r7, #12]
    2f80:	460b      	mov	r3, r1
    2f82:	005b      	lsls	r3, r3, #1
    2f84:	440b      	add	r3, r1
    2f86:	009b      	lsls	r3, r3, #2
    2f88:	4413      	add	r3, r2
    2f8a:	3308      	adds	r3, #8
    2f8c:	681b      	ldr	r3, [r3, #0]
    2f8e:	607b      	str	r3, [r7, #4]

        pvParameters[xSource].xOutFlag[pvParameters[xSource].xNumOfOut] = xDest;
    2f90:	f240 33d0 	movw	r3, #976	; 0x3d0
    2f94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f98:	68ba      	ldr	r2, [r7, #8]
    2f9a:	212c      	movs	r1, #44	; 0x2c
    2f9c:	fb01 f202 	mul.w	r2, r1, r2
    2fa0:	4413      	add	r3, r2
    2fa2:	3308      	adds	r3, #8
    2fa4:	6818      	ldr	r0, [r3, #0]
    2fa6:	f240 32d0 	movw	r2, #976	; 0x3d0
    2faa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2fae:	68b9      	ldr	r1, [r7, #8]
    2fb0:	460b      	mov	r3, r1
    2fb2:	009b      	lsls	r3, r3, #2
    2fb4:	440b      	add	r3, r1
    2fb6:	005b      	lsls	r3, r3, #1
    2fb8:	440b      	add	r3, r1
    2fba:	4403      	add	r3, r0
    2fbc:	3304      	adds	r3, #4
    2fbe:	009b      	lsls	r3, r3, #2
    2fc0:	4413      	add	r3, r2
    2fc2:	687a      	ldr	r2, [r7, #4]
    2fc4:	605a      	str	r2, [r3, #4]
        pvParameters[xSource].xNumOfOut ++;
    2fc6:	f240 33d0 	movw	r3, #976	; 0x3d0
    2fca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fce:	68ba      	ldr	r2, [r7, #8]
    2fd0:	212c      	movs	r1, #44	; 0x2c
    2fd2:	fb01 f202 	mul.w	r2, r1, r2
    2fd6:	4413      	add	r3, r2
    2fd8:	3308      	adds	r3, #8
    2fda:	681b      	ldr	r3, [r3, #0]
    2fdc:	1c5a      	adds	r2, r3, #1
    2fde:	f240 33d0 	movw	r3, #976	; 0x3d0
    2fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fe6:	68b9      	ldr	r1, [r7, #8]
    2fe8:	202c      	movs	r0, #44	; 0x2c
    2fea:	fb00 f101 	mul.w	r1, r0, r1
    2fee:	440b      	add	r3, r1
    2ff0:	3308      	adds	r3, #8
    2ff2:	601a      	str	r2, [r3, #0]

        pvParameters[xDest].xInFlag[pvParameters[xDest].xNumOfIn] = xSource;
    2ff4:	f240 33d0 	movw	r3, #976	; 0x3d0
    2ff8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ffc:	687a      	ldr	r2, [r7, #4]
    2ffe:	212c      	movs	r1, #44	; 0x2c
    3000:	fb01 f202 	mul.w	r2, r1, r2
    3004:	4413      	add	r3, r2
    3006:	3304      	adds	r3, #4
    3008:	6818      	ldr	r0, [r3, #0]
    300a:	f240 32d0 	movw	r2, #976	; 0x3d0
    300e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3012:	6879      	ldr	r1, [r7, #4]
    3014:	460b      	mov	r3, r1
    3016:	009b      	lsls	r3, r3, #2
    3018:	440b      	add	r3, r1
    301a:	005b      	lsls	r3, r3, #1
    301c:	440b      	add	r3, r1
    301e:	4403      	add	r3, r0
    3020:	3302      	adds	r3, #2
    3022:	009b      	lsls	r3, r3, #2
    3024:	4413      	add	r3, r2
    3026:	68ba      	ldr	r2, [r7, #8]
    3028:	605a      	str	r2, [r3, #4]
        pvParameters[xDest].xNumOfIn ++;
    302a:	f240 33d0 	movw	r3, #976	; 0x3d0
    302e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3032:	687a      	ldr	r2, [r7, #4]
    3034:	212c      	movs	r1, #44	; 0x2c
    3036:	fb01 f202 	mul.w	r2, r1, r2
    303a:	4413      	add	r3, r2
    303c:	3304      	adds	r3, #4
    303e:	681b      	ldr	r3, [r3, #0]
    3040:	1c5a      	adds	r2, r3, #1
    3042:	f240 33d0 	movw	r3, #976	; 0x3d0
    3046:	f2c2 0300 	movt	r3, #8192	; 0x2000
    304a:	6879      	ldr	r1, [r7, #4]
    304c:	202c      	movs	r0, #44	; 0x2c
    304e:	fb00 f101 	mul.w	r1, r0, r1
    3052:	440b      	add	r3, r1
    3054:	3304      	adds	r3, #4
    3056:	601a      	str	r2, [r3, #0]
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3058:	68fb      	ldr	r3, [r7, #12]
    305a:	3301      	adds	r3, #1
    305c:	60fb      	str	r3, [r7, #12]
    305e:	f240 1310 	movw	r3, #272	; 0x110
    3062:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3066:	681a      	ldr	r2, [r3, #0]
    3068:	68fb      	ldr	r3, [r7, #12]
    306a:	429a      	cmp	r2, r3
    306c:	f73f af76 	bgt.w	2f5c <vParameterInitialise+0x100>
        pvParameters[xSource].xNumOfOut ++;

        pvParameters[xDest].xInFlag[pvParameters[xDest].xNumOfIn] = xSource;
        pvParameters[xDest].xNumOfIn ++;
    }
}
    3070:	3714      	adds	r7, #20
    3072:	46bd      	mov	sp, r7
    3074:	f85d 7b04 	ldr.w	r7, [sp], #4
    3078:	4770      	bx	lr
    307a:	bf00      	nop

0000307c <vTaskDelayLET>:

void vTaskDelayLET()
{
    307c:	b580      	push	{r7, lr}
    307e:	b084      	sub	sp, #16
    3080:	af00      	add	r7, sp, #0
    xTaskHandle pxTaskCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    3082:	f002 fa33 	bl	54ec <xTaskGetCurrentTaskHandle>
    3086:	60b8      	str	r0, [r7, #8]
    portTickType xStartTime = xTaskGetxStartTime( pxTaskCurrentTCBLocal );
    3088:	68b8      	ldr	r0, [r7, #8]
    308a:	f002 fae5 	bl	5658 <xTaskGetxStartTime>
    308e:	6078      	str	r0, [r7, #4]
    portTickType xOutputTime = xTaskGetxLet( pxTaskCurrentTCBLocal ) + xStartTime;
    3090:	68b8      	ldr	r0, [r7, #8]
    3092:	f002 faed 	bl	5670 <xTaskGetxLet>
    3096:	4602      	mov	r2, r0
    3098:	687b      	ldr	r3, [r7, #4]
    309a:	4413      	add	r3, r2
    309c:	603b      	str	r3, [r7, #0]
    portTickType xCurrentTime = xTaskGetTickCount();
    309e:	f001 fe59 	bl	4d54 <xTaskGetTickCount>
    30a2:	60f8      	str	r0, [r7, #12]

    while( xCurrentTime <  xOutputTime)
    30a4:	e002      	b.n	30ac <vTaskDelayLET+0x30>
    {
        xCurrentTime = xTaskGetTickCount();
    30a6:	f001 fe55 	bl	4d54 <xTaskGetTickCount>
    30aa:	60f8      	str	r0, [r7, #12]
    xTaskHandle pxTaskCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    portTickType xStartTime = xTaskGetxStartTime( pxTaskCurrentTCBLocal );
    portTickType xOutputTime = xTaskGetxLet( pxTaskCurrentTCBLocal ) + xStartTime;
    portTickType xCurrentTime = xTaskGetTickCount();

    while( xCurrentTime <  xOutputTime)
    30ac:	68fa      	ldr	r2, [r7, #12]
    30ae:	683b      	ldr	r3, [r7, #0]
    30b0:	429a      	cmp	r2, r3
    30b2:	d3f8      	bcc.n	30a6 <vTaskDelayLET+0x2a>
    {
        xCurrentTime = xTaskGetTickCount();
    }
}
    30b4:	3710      	adds	r7, #16
    30b6:	46bd      	mov	sp, r7
    30b8:	bd80      	pop	{r7, pc}
    30ba:	bf00      	nop

000030bc <vEventReceiveAll>:

// receive all Events from sources servant, and return them through the point
void vEventReceiveAll( void * pvParameter, xEventHandle *pxEvent )
{
    30bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    30c0:	b088      	sub	sp, #32
    30c2:	af00      	add	r7, sp, #0
    30c4:	6078      	str	r0, [r7, #4]
    30c6:	6039      	str	r1, [r7, #0]
    30c8:	4669      	mov	r1, sp
    30ca:	4688      	mov	r8, r1
    portBASE_TYPE i ;

    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;
    30cc:	6879      	ldr	r1, [r7, #4]
    30ce:	6849      	ldr	r1, [r1, #4]
    30d0:	61b9      	str	r1, [r7, #24]
    portBASE_TYPE xInFlag[NUM]; 
    30d2:	69be      	ldr	r6, [r7, #24]
    30d4:	1e71      	subs	r1, r6, #1
    30d6:	6179      	str	r1, [r7, #20]
    30d8:	4631      	mov	r1, r6
    30da:	4608      	mov	r0, r1
    30dc:	f04f 0100 	mov.w	r1, #0
    30e0:	014d      	lsls	r5, r1, #5
    30e2:	ea45 65d0 	orr.w	r5, r5, r0, lsr #27
    30e6:	0144      	lsls	r4, r0, #5
    30e8:	4631      	mov	r1, r6
    30ea:	4608      	mov	r0, r1
    30ec:	f04f 0100 	mov.w	r1, #0
    30f0:	014b      	lsls	r3, r1, #5
    30f2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    30f6:	0142      	lsls	r2, r0, #5
    30f8:	4633      	mov	r3, r6
    30fa:	009b      	lsls	r3, r3, #2
    30fc:	3303      	adds	r3, #3
    30fe:	3307      	adds	r3, #7
    3100:	08db      	lsrs	r3, r3, #3
    3102:	00db      	lsls	r3, r3, #3
    3104:	ebad 0d03 	sub.w	sp, sp, r3
    3108:	466b      	mov	r3, sp
    310a:	3303      	adds	r3, #3
    310c:	089b      	lsrs	r3, r3, #2
    310e:	009b      	lsls	r3, r3, #2
    3110:	613b      	str	r3, [r7, #16]
    portBASE_TYPE xMyFlag = ((struct xParam *) pvParameter)->xMyFlag;
    3112:	687b      	ldr	r3, [r7, #4]
    3114:	681b      	ldr	r3, [r3, #0]
    3116:	60fb      	str	r3, [r7, #12]
    portTickType xCurrentTime;
   
    xSemaphoreTake( xBinarySemaphore[xMyFlag],portMAX_DELAY );
    3118:	f240 7398 	movw	r3, #1944	; 0x798
    311c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3120:	68fa      	ldr	r2, [r7, #12]
    3122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3126:	4618      	mov	r0, r3
    3128:	2100      	movs	r1, #0
    312a:	f04f 32ff 	mov.w	r2, #4294967295
    312e:	2300      	movs	r3, #0
    3130:	f000 ff5c 	bl	3fec <xQueueGenericReceive>

    xCurrentTime = xTaskGetTickCount(); 
    3134:	f001 fe0e 	bl	4d54 <xTaskGetTickCount>
    3138:	60b8      	str	r0, [r7, #8]
    vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    313a:	f240 73f0 	movw	r3, #2032	; 0x7f0
    313e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3142:	68fa      	ldr	r2, [r7, #12]
    3144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3148:	4618      	mov	r0, r3
    314a:	68b9      	ldr	r1, [r7, #8]
    314c:	f002 fa9c 	bl	5688 <vTaskSetxStartTime>

    for( i = 0; i < NUM; i ++ )
    3150:	2300      	movs	r3, #0
    3152:	61fb      	str	r3, [r7, #28]
    3154:	e024      	b.n	31a0 <vEventReceiveAll+0xe4>
    {
        // get all the in flag
        xInFlag[i] = ((struct xParam *) pvParameter)->xInFlag[i];
    3156:	687a      	ldr	r2, [r7, #4]
    3158:	69fb      	ldr	r3, [r7, #28]
    315a:	3302      	adds	r3, #2
    315c:	009b      	lsls	r3, r3, #2
    315e:	4413      	add	r3, r2
    3160:	6859      	ldr	r1, [r3, #4]
    3162:	693b      	ldr	r3, [r7, #16]
    3164:	69fa      	ldr	r2, [r7, #28]
    3166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        // receive all events which are created by source servants and return 
        // them back to current Servant through the inout point
        vEventReceive( &pxEvent[i], xTaskOfHandle[xInFlag[i]], pxCurrentReadyList );
    316a:	69fb      	ldr	r3, [r7, #28]
    316c:	009b      	lsls	r3, r3, #2
    316e:	683a      	ldr	r2, [r7, #0]
    3170:	18d1      	adds	r1, r2, r3
    3172:	693b      	ldr	r3, [r7, #16]
    3174:	69fa      	ldr	r2, [r7, #28]
    3176:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    317a:	f240 73f0 	movw	r3, #2032	; 0x7f0
    317e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3182:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3186:	f240 33cc 	movw	r3, #972	; 0x3cc
    318a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    318e:	681b      	ldr	r3, [r3, #0]
    3190:	4608      	mov	r0, r1
    3192:	4611      	mov	r1, r2
    3194:	461a      	mov	r2, r3
    3196:	f7ff fdb1 	bl	2cfc <vEventGenericReceive>
    xSemaphoreTake( xBinarySemaphore[xMyFlag],portMAX_DELAY );

    xCurrentTime = xTaskGetTickCount(); 
    vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );

    for( i = 0; i < NUM; i ++ )
    319a:	69fb      	ldr	r3, [r7, #28]
    319c:	3301      	adds	r3, #1
    319e:	61fb      	str	r3, [r7, #28]
    31a0:	69fa      	ldr	r2, [r7, #28]
    31a2:	69bb      	ldr	r3, [r7, #24]
    31a4:	429a      	cmp	r2, r3
    31a6:	dbd6      	blt.n	3156 <vEventReceiveAll+0x9a>
    31a8:	46c5      	mov	sp, r8
        xInFlag[i] = ((struct xParam *) pvParameter)->xInFlag[i];
        // receive all events which are created by source servants and return 
        // them back to current Servant through the inout point
        vEventReceive( &pxEvent[i], xTaskOfHandle[xInFlag[i]], pxCurrentReadyList );
    }
}
    31aa:	3720      	adds	r7, #32
    31ac:	46bd      	mov	sp, r7
    31ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    31b2:	bf00      	nop

000031b4 <vEventDeleteAll>:

void vEventDeleteAll( void * pvParameter, xEventHandle * pxEvent )
{
    31b4:	b580      	push	{r7, lr}
    31b6:	b084      	sub	sp, #16
    31b8:	af00      	add	r7, sp, #0
    31ba:	6078      	str	r0, [r7, #4]
    31bc:	6039      	str	r1, [r7, #0]
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;
    31be:	687b      	ldr	r3, [r7, #4]
    31c0:	685b      	ldr	r3, [r3, #4]
    31c2:	60bb      	str	r3, [r7, #8]

    for( i = 0; i < NUM; ++i )
    31c4:	2300      	movs	r3, #0
    31c6:	60fb      	str	r3, [r7, #12]
    31c8:	e00a      	b.n	31e0 <vEventDeleteAll+0x2c>
    {
        vEventDelete( pxEvent[i] );
    31ca:	68fb      	ldr	r3, [r7, #12]
    31cc:	009b      	lsls	r3, r3, #2
    31ce:	683a      	ldr	r2, [r7, #0]
    31d0:	4413      	add	r3, r2
    31d2:	681b      	ldr	r3, [r3, #0]
    31d4:	4618      	mov	r0, r3
    31d6:	f7ff fdf3 	bl	2dc0 <vEventGenericDelete>
void vEventDeleteAll( void * pvParameter, xEventHandle * pxEvent )
{
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;

    for( i = 0; i < NUM; ++i )
    31da:	68fb      	ldr	r3, [r7, #12]
    31dc:	3301      	adds	r3, #1
    31de:	60fb      	str	r3, [r7, #12]
    31e0:	68fa      	ldr	r2, [r7, #12]
    31e2:	68bb      	ldr	r3, [r7, #8]
    31e4:	429a      	cmp	r2, r3
    31e6:	dbf0      	blt.n	31ca <vEventDeleteAll+0x16>
    {
        vEventDelete( pxEvent[i] );
    }
}
    31e8:	3710      	adds	r7, #16
    31ea:	46bd      	mov	sp, r7
    31ec:	bd80      	pop	{r7, pc}
    31ee:	bf00      	nop

000031f0 <vEventCreateAll>:


void vEventCreateAll( void * pvParameter, struct eventData *xDatas )
{
    31f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    31f4:	b08a      	sub	sp, #40	; 0x28
    31f6:	af02      	add	r7, sp, #8
    31f8:	6078      	str	r0, [r7, #4]
    31fa:	6039      	str	r1, [r7, #0]
    31fc:	4669      	mov	r1, sp
    31fe:	4688      	mov	r8, r1
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfOut;
    3200:	6879      	ldr	r1, [r7, #4]
    3202:	6889      	ldr	r1, [r1, #8]
    3204:	61b9      	str	r1, [r7, #24]
    portBASE_TYPE xMyFlag = ((struct xParam *)pvParameter)->xMyFlag;
    3206:	6879      	ldr	r1, [r7, #4]
    3208:	6809      	ldr	r1, [r1, #0]
    320a:	6179      	str	r1, [r7, #20]
    portTickType xPeriod = ((struct xParam *) pvParameter)->xPeriod;
    320c:	6879      	ldr	r1, [r7, #4]
    320e:	6a49      	ldr	r1, [r1, #36]	; 0x24
    3210:	6139      	str	r1, [r7, #16]
    portBASE_TYPE xFlags[NUM];
    3212:	69be      	ldr	r6, [r7, #24]
    3214:	1e71      	subs	r1, r6, #1
    3216:	60f9      	str	r1, [r7, #12]
    3218:	4631      	mov	r1, r6
    321a:	4608      	mov	r0, r1
    321c:	f04f 0100 	mov.w	r1, #0
    3220:	014d      	lsls	r5, r1, #5
    3222:	ea45 65d0 	orr.w	r5, r5, r0, lsr #27
    3226:	0144      	lsls	r4, r0, #5
    3228:	4631      	mov	r1, r6
    322a:	4608      	mov	r0, r1
    322c:	f04f 0100 	mov.w	r1, #0
    3230:	014b      	lsls	r3, r1, #5
    3232:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    3236:	0142      	lsls	r2, r0, #5
    3238:	4633      	mov	r3, r6
    323a:	009b      	lsls	r3, r3, #2
    323c:	3303      	adds	r3, #3
    323e:	3307      	adds	r3, #7
    3240:	08db      	lsrs	r3, r3, #3
    3242:	00db      	lsls	r3, r3, #3
    3244:	ebad 0d03 	sub.w	sp, sp, r3
    3248:	ab02      	add	r3, sp, #8
    324a:	3303      	adds	r3, #3
    324c:	089b      	lsrs	r3, r3, #2
    324e:	009b      	lsls	r3, r3, #2
    3250:	60bb      	str	r3, [r7, #8]

    for( i = 0; i < NUM; i ++ )
    3252:	2300      	movs	r3, #0
    3254:	61fb      	str	r3, [r7, #28]
    3256:	e033      	b.n	32c0 <vEventCreateAll+0xd0>
    {
        // get all flags of destination servants
        xFlags[i] = ((struct xParam *) pvParameter)->xOutFlag[i]; 
    3258:	687a      	ldr	r2, [r7, #4]
    325a:	69fb      	ldr	r3, [r7, #28]
    325c:	3304      	adds	r3, #4
    325e:	009b      	lsls	r3, r3, #2
    3260:	4413      	add	r3, r2
    3262:	6859      	ldr	r1, [r3, #4]
    3264:	68bb      	ldr	r3, [r7, #8]
    3266:	69fa      	ldr	r2, [r7, #28]
    3268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        if( xFlags[i] <= xMyFlag )
    326c:	68bb      	ldr	r3, [r7, #8]
    326e:	69fa      	ldr	r2, [r7, #28]
    3270:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3274:	697b      	ldr	r3, [r7, #20]
    3276:	429a      	cmp	r2, r3
    3278:	dc06      	bgt.n	3288 <vEventCreateAll+0x98>
        {
            xDatas[i].IS_LAST_SERVANT = 1;
    327a:	69fb      	ldr	r3, [r7, #28]
    327c:	011b      	lsls	r3, r3, #4
    327e:	683a      	ldr	r2, [r7, #0]
    3280:	4413      	add	r3, r2
    3282:	2201      	movs	r2, #1
    3284:	609a      	str	r2, [r3, #8]
    3286:	e005      	b.n	3294 <vEventCreateAll+0xa4>
        }
        else
        {
            xDatas[i].IS_LAST_SERVANT = 0;
    3288:	69fb      	ldr	r3, [r7, #28]
    328a:	011b      	lsls	r3, r3, #4
    328c:	683a      	ldr	r2, [r7, #0]
    328e:	4413      	add	r3, r2
    3290:	2200      	movs	r2, #0
    3292:	609a      	str	r2, [r3, #8]
        }
        // create events which would be sent to destination servants.
        vEventCreate(xTaskOfHandle[xFlags[i]], xDatas[i]) ;
    3294:	68bb      	ldr	r3, [r7, #8]
    3296:	69fa      	ldr	r2, [r7, #28]
    3298:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    329c:	f240 73f0 	movw	r3, #2032	; 0x7f0
    32a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32a4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    32a8:	69fb      	ldr	r3, [r7, #28]
    32aa:	011b      	lsls	r3, r3, #4
    32ac:	683a      	ldr	r2, [r7, #0]
    32ae:	4413      	add	r3, r2
    32b0:	68da      	ldr	r2, [r3, #12]
    32b2:	9200      	str	r2, [sp, #0]
    32b4:	cb0e      	ldmia	r3, {r1, r2, r3}
    32b6:	f7ff fc51 	bl	2b5c <vEventGenericCreate>
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfOut;
    portBASE_TYPE xMyFlag = ((struct xParam *)pvParameter)->xMyFlag;
    portTickType xPeriod = ((struct xParam *) pvParameter)->xPeriod;
    portBASE_TYPE xFlags[NUM];

    for( i = 0; i < NUM; i ++ )
    32ba:	69fb      	ldr	r3, [r7, #28]
    32bc:	3301      	adds	r3, #1
    32be:	61fb      	str	r3, [r7, #28]
    32c0:	69fa      	ldr	r2, [r7, #28]
    32c2:	69bb      	ldr	r3, [r7, #24]
    32c4:	429a      	cmp	r2, r3
    32c6:	dbc7      	blt.n	3258 <vEventCreateAll+0x68>
    32c8:	46c5      	mov	sp, r8
            xDatas[i].IS_LAST_SERVANT = 0;
        }
        // create events which would be sent to destination servants.
        vEventCreate(xTaskOfHandle[xFlags[i]], xDatas[i]) ;
    }
}
    32ca:	3720      	adds	r7, #32
    32cc:	46bd      	mov	sp, r7
    32ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    32d2:	bf00      	nop

000032d4 <vDoActuator>:

static void vDoActuator( xEventHandle * pxEvent)
{
    32d4:	b480      	push	{r7}
    32d6:	b083      	sub	sp, #12
    32d8:	af00      	add	r7, sp, #0
    32da:	6078      	str	r0, [r7, #4]
    {
        vPrintString("There are tasks miss deadline\n\r");
    }
    */
   
}
    32dc:	370c      	adds	r7, #12
    32de:	46bd      	mov	sp, r7
    32e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    32e4:	4770      	bx	lr
    32e6:	bf00      	nop

000032e8 <vDoSensor>:

static void vDoSensor()
{
    32e8:	b480      	push	{r7}
    32ea:	af00      	add	r7, sp, #0

}
    32ec:	46bd      	mov	sp, r7
    32ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    32f2:	4770      	bx	lr

000032f4 <vSensor>:
*
* @param pvParameter is parameter from programmer.
*
* */
void vSensor( void * pvParameter )
{
    32f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
    32f8:	b094      	sub	sp, #80	; 0x50
    32fa:	af00      	add	r7, sp, #0
    32fc:	60f8      	str	r0, [r7, #12]
    portTickType xCurrentTime;
    portTickType xStartTime;
    portBASE_TYPE i;
    portBASE_TYPE IS_FIRST_TIME_TO_EXE = 1;
    32fe:	2301      	movs	r3, #1
    3300:	64bb      	str	r3, [r7, #72]	; 0x48
    portBASE_TYPE xCount = 2;
    3302:	2302      	movs	r3, #2
    3304:	647b      	str	r3, [r7, #68]	; 0x44

    /* store the paramter into stack of servant */
    void * pvMyParameter = pvParameter;
    3306:	68fb      	ldr	r3, [r7, #12]
    3308:	643b      	str	r3, [r7, #64]	; 0x40

    portBASE_TYPE NUM = ((struct xParam *) pvMyParameter)->xNumOfOut;
    330a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    330c:	689b      	ldr	r3, [r3, #8]
    330e:	63fb      	str	r3, [r7, #60]	; 0x3c
    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    3310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3312:	681b      	ldr	r3, [r3, #0]
    3314:	63bb      	str	r3, [r7, #56]	; 0x38
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    3316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3318:	69db      	ldr	r3, [r3, #28]
    331a:	637b      	str	r3, [r7, #52]	; 0x34
    portTickType xPeriod = ((struct xParam *) pvMyParameter)->xPeriod;
    331c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3320:	633b      	str	r3, [r7, #48]	; 0x30
    pvServantFunType xMyFun = ((struct xParam *) pvMyParameter)->xFp;
    3322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3324:	6a1b      	ldr	r3, [r3, #32]
    3326:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* set the LET of Servant when it is created */
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    3328:	f240 73f0 	movw	r3, #2032	; 0x7f0
    332c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3330:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3336:	4618      	mov	r0, r3
    3338:	6b79      	ldr	r1, [r7, #52]	; 0x34
    333a:	f002 f9b3 	bl	56a4 <vTaskSetxLet>
    
    /* receive the events created by the last servant of this task. */
    xEventHandle pxEvent[NUM];
    333e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3340:	1e4b      	subs	r3, r1, #1
    3342:	62bb      	str	r3, [r7, #40]	; 0x28
    3344:	460b      	mov	r3, r1
    3346:	461a      	mov	r2, r3
    3348:	f04f 0300 	mov.w	r3, #0
    334c:	0158      	lsls	r0, r3, #5
    334e:	6078      	str	r0, [r7, #4]
    3350:	6878      	ldr	r0, [r7, #4]
    3352:	ea40 60d2 	orr.w	r0, r0, r2, lsr #27
    3356:	6078      	str	r0, [r7, #4]
    3358:	0150      	lsls	r0, r2, #5
    335a:	460b      	mov	r3, r1
    335c:	461a      	mov	r2, r3
    335e:	f04f 0300 	mov.w	r3, #0
    3362:	ea4f 1b43 	mov.w	fp, r3, lsl #5
    3366:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
    336a:	ea4f 1a42 	mov.w	sl, r2, lsl #5
    336e:	460b      	mov	r3, r1
    3370:	009b      	lsls	r3, r3, #2
    3372:	3303      	adds	r3, #3
    3374:	3307      	adds	r3, #7
    3376:	08db      	lsrs	r3, r3, #3
    3378:	00db      	lsls	r3, r3, #3
    337a:	ebad 0d03 	sub.w	sp, sp, r3
    337e:	466b      	mov	r3, sp
    3380:	3303      	adds	r3, #3
    3382:	089b      	lsrs	r3, r3, #2
    3384:	009b      	lsls	r3, r3, #2
    3386:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* create data for destination servants and initialise them */
    struct eventData xDatas[NUM];
    3388:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    338a:	1e4b      	subs	r3, r1, #1
    338c:	623b      	str	r3, [r7, #32]
    338e:	460b      	mov	r3, r1
    3390:	461a      	mov	r2, r3
    3392:	f04f 0300 	mov.w	r3, #0
    3396:	ea4f 19c3 	mov.w	r9, r3, lsl #7
    339a:	ea49 6952 	orr.w	r9, r9, r2, lsr #25
    339e:	ea4f 18c2 	mov.w	r8, r2, lsl #7
    33a2:	460b      	mov	r3, r1
    33a4:	461a      	mov	r2, r3
    33a6:	f04f 0300 	mov.w	r3, #0
    33aa:	01dd      	lsls	r5, r3, #7
    33ac:	ea45 6552 	orr.w	r5, r5, r2, lsr #25
    33b0:	01d4      	lsls	r4, r2, #7
    33b2:	460b      	mov	r3, r1
    33b4:	011b      	lsls	r3, r3, #4
    33b6:	3303      	adds	r3, #3
    33b8:	3307      	adds	r3, #7
    33ba:	08db      	lsrs	r3, r3, #3
    33bc:	00db      	lsls	r3, r3, #3
    33be:	ebad 0d03 	sub.w	sp, sp, r3
    33c2:	466b      	mov	r3, sp
    33c4:	3303      	adds	r3, #3
    33c6:	089b      	lsrs	r3, r3, #2
    33c8:	009b      	lsls	r3, r3, #2
    33ca:	61fb      	str	r3, [r7, #28]


    while(1)
    {

        if( IS_FIRST_TIME_TO_EXE == 1 )
    33cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    33ce:	2b01      	cmp	r3, #1
    33d0:	d110      	bne.n	33f4 <vSensor+0x100>
        {
            /* Waiting for the start time of task period */
            xSemaphoreTake(xBinarySemaphore[xMyFlag], portMAX_DELAY);
    33d2:	f240 7398 	movw	r3, #1944	; 0x798
    33d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33da:	6bba      	ldr	r2, [r7, #56]	; 0x38
    33dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    33e0:	4618      	mov	r0, r3
    33e2:	2100      	movs	r1, #0
    33e4:	f04f 32ff 	mov.w	r2, #4294967295
    33e8:	2300      	movs	r3, #0
    33ea:	f000 fdff 	bl	3fec <xQueueGenericReceive>
            IS_FIRST_TIME_TO_EXE = 0;
    33ee:	2300      	movs	r3, #0
    33f0:	64bb      	str	r3, [r7, #72]	; 0x48
    33f2:	e00d      	b.n	3410 <vSensor+0x11c>
        {
            /* When system started, the first servant of every task is triggered to
             * execute by the init events created by tick hook. After that, the first
             * servant of every task is triggered by the last servant of corresponding task.
            * */
            vEventReceiveAll( pvMyParameter, pxEvent );
    33f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    33f6:	6c38      	ldr	r0, [r7, #64]	; 0x40
    33f8:	4619      	mov	r1, r3
    33fa:	f7ff fe5f 	bl	30bc <vEventReceiveAll>
            // deal with the output things and seeing whether current task misses deadline
            vDoActuator(pxEvent);
    33fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3400:	4618      	mov	r0, r3
    3402:	f7ff ff67 	bl	32d4 <vDoActuator>
            vEventDeleteAll(pvMyParameter, pxEvent);
    3406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3408:	6c38      	ldr	r0, [r7, #64]	; 0x40
    340a:	4619      	mov	r1, r3
    340c:	f7ff fed2 	bl	31b4 <vEventDeleteAll>
        }

        //xTaskComplete[ xTaskOfServant[xMyFlag] ] = 0;

        // deal with the input
        vDoSensor();
    3410:	f7ff ff6a 	bl	32e8 <vDoSensor>

        vPrintNumber( xMyFlag );
    3414:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3416:	f013 fd77 	bl	16f08 <vPrintNumber>

        xCurrentTime = xTaskGetTickCount();
    341a:	f001 fc9b 	bl	4d54 <xTaskGetTickCount>
    341e:	61b8      	str	r0, [r7, #24]
        vPrintNumber( xCurrentTime );
    3420:	69b8      	ldr	r0, [r7, #24]
    3422:	f013 fd71 	bl	16f08 <vPrintNumber>
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    3426:	f240 73f0 	movw	r3, #2032	; 0x7f0
    342a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    342e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3434:	4618      	mov	r0, r3
    3436:	69b9      	ldr	r1, [r7, #24]
    3438:	f002 f926 	bl	5688 <vTaskSetxStartTime>

        // record the start time of this period.
        xCount ++;
    343c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    343e:	3301      	adds	r3, #1
    3440:	647b      	str	r3, [r7, #68]	; 0x44
        xStartTime = xCount * xPeriod; 
    3442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3446:	fb02 f303 	mul.w	r3, r2, r3
    344a:	617b      	str	r3, [r7, #20]

        for( i = 0; i < NUM; i ++ )
    344c:	2300      	movs	r3, #0
    344e:	64fb      	str	r3, [r7, #76]	; 0x4c
    3450:	e011      	b.n	3476 <vSensor+0x182>
        {
            xDatas[i].xNextPeriod = xStartTime;
    3452:	69fa      	ldr	r2, [r7, #28]
    3454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3456:	011b      	lsls	r3, r3, #4
    3458:	4413      	add	r3, r2
    345a:	697a      	ldr	r2, [r7, #20]
    345c:	601a      	str	r2, [r3, #0]
            xDatas[i].xTime = xCurrentTime + xLet;
    345e:	69ba      	ldr	r2, [r7, #24]
    3460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3462:	441a      	add	r2, r3
    3464:	69f9      	ldr	r1, [r7, #28]
    3466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3468:	011b      	lsls	r3, r3, #4
    346a:	440b      	add	r3, r1
    346c:	3304      	adds	r3, #4
    346e:	601a      	str	r2, [r3, #0]

        // record the start time of this period.
        xCount ++;
        xStartTime = xCount * xPeriod; 

        for( i = 0; i < NUM; i ++ )
    3470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3472:	3301      	adds	r3, #1
    3474:	64fb      	str	r3, [r7, #76]	; 0x4c
    3476:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    347a:	429a      	cmp	r2, r3
    347c:	dbe9      	blt.n	3452 <vSensor+0x15e>
            xDatas[i].xNextPeriod = xStartTime;
            xDatas[i].xTime = xCurrentTime + xLet;
        }

        // create events for all destination servants of this servant. 
        vEventCreateAll( pvMyParameter, xDatas );
    347e:	69fb      	ldr	r3, [r7, #28]
    3480:	6c38      	ldr	r0, [r7, #64]	; 0x40
    3482:	4619      	mov	r1, r3
    3484:	f7ff feb4 	bl	31f0 <vEventCreateAll>

        // this is the first s-servant
        for( i = 0; i < xFunctionTimes; ++ i )
    3488:	2300      	movs	r3, #0
    348a:	64fb      	str	r3, [r7, #76]	; 0x4c
    348c:	e009      	b.n	34a2 <vSensor+0x1ae>
        {
            xMyFun( NULL, 0, xDatas, NUM);
    348e:	69fb      	ldr	r3, [r7, #28]
    3490:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    3492:	2000      	movs	r0, #0
    3494:	2100      	movs	r1, #0
    3496:	461a      	mov	r2, r3
    3498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    349a:	47a0      	blx	r4

        // create events for all destination servants of this servant. 
        vEventCreateAll( pvMyParameter, xDatas );

        // this is the first s-servant
        for( i = 0; i < xFunctionTimes; ++ i )
    349c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    349e:	3301      	adds	r3, #1
    34a0:	64fb      	str	r3, [r7, #76]	; 0x4c
    34a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    34a4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    34a8:	dbf1      	blt.n	348e <vSensor+0x19a>
        {
            xMyFun( NULL, 0, xDatas, NUM);
        }

        vTaskDelayLET();
    34aa:	f7ff fde7 	bl	307c <vTaskDelayLET>
        xCurrentTime = xTaskGetTickCount();
    34ae:	f001 fc51 	bl	4d54 <xTaskGetTickCount>
    34b2:	61b8      	str	r0, [r7, #24]
        vPrintNumber( xCurrentTime );
    34b4:	69b8      	ldr	r0, [r7, #24]
    34b6:	f013 fd27 	bl	16f08 <vPrintNumber>
        vPrintNumber( ( xMyFlag + 10 ) * 3 );
    34ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    34bc:	f103 020a 	add.w	r2, r3, #10
    34c0:	4613      	mov	r3, r2
    34c2:	005b      	lsls	r3, r3, #1
    34c4:	4413      	add	r3, r2
    34c6:	4618      	mov	r0, r3
    34c8:	f013 fd1e 	bl	16f08 <vPrintNumber>

        //vPrintString("the start time of next Period: ");
        //vPrintNumber(xDatas[0].xNextPeriod);
        if( xCurrentTime > xDatas[0].xNextPeriod )
    34cc:	69fb      	ldr	r3, [r7, #28]
    34ce:	681a      	ldr	r2, [r3, #0]
    34d0:	69bb      	ldr	r3, [r7, #24]
    34d2:	429a      	cmp	r2, r3
    34d4:	d20a      	bcs.n	34ec <vSensor+0x1f8>
        {
            vPrintNumber(xDatas[0].xNextPeriod);
    34d6:	69fb      	ldr	r3, [r7, #28]
    34d8:	681b      	ldr	r3, [r3, #0]
    34da:	4618      	mov	r0, r3
    34dc:	f013 fd14 	bl	16f08 <vPrintNumber>
            vPrintString("there are sensor missing deadline\n\r");
    34e0:	f648 0030 	movw	r0, #34864	; 0x8830
    34e4:	f2c0 0001 	movt	r0, #1
    34e8:	f013 fcf4 	bl	16ed4 <vPrintString>
        }
        // triggered R-Servant to execute 
        xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT-1] );
    34ec:	f240 7398 	movw	r3, #1944	; 0x798
    34f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    34f6:	4618      	mov	r0, r3
    34f8:	2100      	movs	r1, #0
    34fa:	2200      	movs	r2, #0
    34fc:	2300      	movs	r3, #0
    34fe:	f000 fcaf 	bl	3e60 <xQueueGenericSend>
    }
    3502:	e763      	b.n	33cc <vSensor+0xd8>

00003504 <vServant>:
*  @param pvParameter is parameter from programmer
*
* */

void vServant( void * pvParameter )
{
    3504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3508:	b093      	sub	sp, #76	; 0x4c
    350a:	af00      	add	r7, sp, #0
    350c:	6178      	str	r0, [r7, #20]
    portBASE_TYPE i;
    void * pvMyParameter = pvParameter;
    350e:	6979      	ldr	r1, [r7, #20]
    3510:	6439      	str	r1, [r7, #64]	; 0x40
    portTickType xCurrentTime;
    
    portBASE_TYPE xNumOfIn = ((struct xParam *) pvMyParameter)->xNumOfIn;
    3512:	6c39      	ldr	r1, [r7, #64]	; 0x40
    3514:	6849      	ldr	r1, [r1, #4]
    3516:	63f9      	str	r1, [r7, #60]	; 0x3c
    portBASE_TYPE xNumOfOut = ((struct xParam *) pvMyParameter)->xNumOfOut;
    3518:	6c39      	ldr	r1, [r7, #64]	; 0x40
    351a:	6889      	ldr	r1, [r1, #8]
    351c:	63b9      	str	r1, [r7, #56]	; 0x38
    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    351e:	6c39      	ldr	r1, [r7, #64]	; 0x40
    3520:	6809      	ldr	r1, [r1, #0]
    3522:	6379      	str	r1, [r7, #52]	; 0x34
    pvServantFunType xMyFun = ((struct xParam *) pvMyParameter)->xFp;
    3524:	6c39      	ldr	r1, [r7, #64]	; 0x40
    3526:	6a09      	ldr	r1, [r1, #32]
    3528:	6339      	str	r1, [r7, #48]	; 0x30

    xEventHandle pxEvent[xNumOfIn];
    352a:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
    352c:	1e71      	subs	r1, r6, #1
    352e:	62f9      	str	r1, [r7, #44]	; 0x2c
    3530:	4631      	mov	r1, r6
    3532:	4608      	mov	r0, r1
    3534:	f04f 0100 	mov.w	r1, #0
    3538:	ea4f 1b41 	mov.w	fp, r1, lsl #5
    353c:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
    3540:	ea4f 1a40 	mov.w	sl, r0, lsl #5
    3544:	4631      	mov	r1, r6
    3546:	4608      	mov	r0, r1
    3548:	f04f 0100 	mov.w	r1, #0
    354c:	ea4f 1941 	mov.w	r9, r1, lsl #5
    3550:	ea49 69d0 	orr.w	r9, r9, r0, lsr #27
    3554:	ea4f 1840 	mov.w	r8, r0, lsl #5
    3558:	4631      	mov	r1, r6
    355a:	0089      	lsls	r1, r1, #2
    355c:	3103      	adds	r1, #3
    355e:	3107      	adds	r1, #7
    3560:	08c9      	lsrs	r1, r1, #3
    3562:	00c9      	lsls	r1, r1, #3
    3564:	ebad 0d01 	sub.w	sp, sp, r1
    3568:	4669      	mov	r1, sp
    356a:	3103      	adds	r1, #3
    356c:	0889      	lsrs	r1, r1, #2
    356e:	0089      	lsls	r1, r1, #2
    3570:	62b9      	str	r1, [r7, #40]	; 0x28
    struct eventData xDatas[xNumOfOut];
    3572:	6bbe      	ldr	r6, [r7, #56]	; 0x38
    3574:	1e71      	subs	r1, r6, #1
    3576:	6279      	str	r1, [r7, #36]	; 0x24
    3578:	4631      	mov	r1, r6
    357a:	4608      	mov	r0, r1
    357c:	f04f 0100 	mov.w	r1, #0
    3580:	01cd      	lsls	r5, r1, #7
    3582:	ea45 6550 	orr.w	r5, r5, r0, lsr #25
    3586:	01c4      	lsls	r4, r0, #7
    3588:	4631      	mov	r1, r6
    358a:	4608      	mov	r0, r1
    358c:	f04f 0100 	mov.w	r1, #0
    3590:	01cb      	lsls	r3, r1, #7
    3592:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
    3596:	01c2      	lsls	r2, r0, #7
    3598:	4633      	mov	r3, r6
    359a:	011b      	lsls	r3, r3, #4
    359c:	3303      	adds	r3, #3
    359e:	3307      	adds	r3, #7
    35a0:	08db      	lsrs	r3, r3, #3
    35a2:	00db      	lsls	r3, r3, #3
    35a4:	ebad 0d03 	sub.w	sp, sp, r3
    35a8:	466b      	mov	r3, sp
    35aa:	3303      	adds	r3, #3
    35ac:	089b      	lsrs	r3, r3, #2
    35ae:	009b      	lsls	r3, r3, #2
    35b0:	623b      	str	r3, [r7, #32]

    /* get the LET of current servant */
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    35b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    35b4:	69db      	ldr	r3, [r3, #28]
    35b6:	61fb      	str	r3, [r7, #28]
    /* set the LET of current servant */
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    35b8:	f240 73f0 	movw	r3, #2032	; 0x7f0
    35bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    35c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    35c6:	4618      	mov	r0, r3
    35c8:	69f9      	ldr	r1, [r7, #28]
    35ca:	f002 f86b 	bl	56a4 <vTaskSetxLet>

    while(1)
    {
        vEventReceiveAll( pvMyParameter, pxEvent );
    35ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    35d0:	6c38      	ldr	r0, [r7, #64]	; 0x40
    35d2:	4619      	mov	r1, r3
    35d4:	f7ff fd72 	bl	30bc <vEventReceiveAll>

        vPrintNumber(xMyFlag);
    35d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
    35da:	f013 fc95 	bl	16f08 <vPrintNumber>

        xCurrentTime = xTaskGetTickCount();
    35de:	f001 fbb9 	bl	4d54 <xTaskGetTickCount>
    35e2:	61b8      	str	r0, [r7, #24]
        vPrintNumber( xCurrentTime );
    35e4:	69b8      	ldr	r0, [r7, #24]
    35e6:	f013 fc8f 	bl	16f08 <vPrintNumber>
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    35ea:	f240 73f0 	movw	r3, #2032	; 0x7f0
    35ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    35f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    35f8:	4618      	mov	r0, r3
    35fa:	69b9      	ldr	r1, [r7, #24]
    35fc:	f002 f844 	bl	5688 <vTaskSetxStartTime>

        /* Here are coding for processing data of events */
        for( i = 0; i < xNumOfOut; i ++ )
    3600:	2300      	movs	r3, #0
    3602:	647b      	str	r3, [r7, #68]	; 0x44
    3604:	e01c      	b.n	3640 <vServant+0x13c>
        {
            xDatas[i] = xEventGetxData(pxEvent[i]);
    3606:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3608:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    360a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    360e:	6a39      	ldr	r1, [r7, #32]
    3610:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3612:	0112      	lsls	r2, r2, #4
    3614:	188c      	adds	r4, r1, r2
    3616:	463a      	mov	r2, r7
    3618:	4610      	mov	r0, r2
    361a:	4619      	mov	r1, r3
    361c:	f7ff f9e0 	bl	29e0 <xEventGetxData>
    3620:	463b      	mov	r3, r7
    3622:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3624:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            xDatas[i].xTime = xCurrentTime + xLet;
    3628:	69ba      	ldr	r2, [r7, #24]
    362a:	69fb      	ldr	r3, [r7, #28]
    362c:	441a      	add	r2, r3
    362e:	6a39      	ldr	r1, [r7, #32]
    3630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3632:	011b      	lsls	r3, r3, #4
    3634:	440b      	add	r3, r1
    3636:	3304      	adds	r3, #4
    3638:	601a      	str	r2, [r3, #0]
        xCurrentTime = xTaskGetTickCount();
        vPrintNumber( xCurrentTime );
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );

        /* Here are coding for processing data of events */
        for( i = 0; i < xNumOfOut; i ++ )
    363a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    363c:	3301      	adds	r3, #1
    363e:	647b      	str	r3, [r7, #68]	; 0x44
    3640:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3644:	429a      	cmp	r2, r3
    3646:	dbde      	blt.n	3606 <vServant+0x102>
        {
            xDatas[i] = xEventGetxData(pxEvent[i]);
            xDatas[i].xTime = xCurrentTime + xLet;
        }

        for( i = 0; i < xFunctionTimes; ++ i )
    3648:	2300      	movs	r3, #0
    364a:	647b      	str	r3, [r7, #68]	; 0x44
    364c:	e00a      	b.n	3664 <vServant+0x160>
        {
            xMyFun(pxEvent, xNumOfIn, xDatas, xNumOfOut);
    364e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3650:	6a3b      	ldr	r3, [r7, #32]
    3652:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    3654:	4610      	mov	r0, r2
    3656:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3658:	461a      	mov	r2, r3
    365a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    365c:	47a0      	blx	r4
        {
            xDatas[i] = xEventGetxData(pxEvent[i]);
            xDatas[i].xTime = xCurrentTime + xLet;
        }

        for( i = 0; i < xFunctionTimes; ++ i )
    365e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3660:	3301      	adds	r3, #1
    3662:	647b      	str	r3, [r7, #68]	; 0x44
    3664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3666:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    366a:	dbf0      	blt.n	364e <vServant+0x14a>
        {
            xMyFun(pxEvent, xNumOfIn, xDatas, xNumOfOut);
        }

        vEventDeleteAll( pvMyParameter, pxEvent );        
    366c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    366e:	6c38      	ldr	r0, [r7, #64]	; 0x40
    3670:	4619      	mov	r1, r3
    3672:	f7ff fd9f 	bl	31b4 <vEventDeleteAll>

        vEventCreateAll( pvMyParameter, xDatas );
    3676:	6a3b      	ldr	r3, [r7, #32]
    3678:	6c38      	ldr	r0, [r7, #64]	; 0x40
    367a:	4619      	mov	r1, r3
    367c:	f7ff fdb8 	bl	31f0 <vEventCreateAll>
        vTaskDelayLET();
    3680:	f7ff fcfc 	bl	307c <vTaskDelayLET>
        xCurrentTime = xTaskGetTickCount();
    3684:	f001 fb66 	bl	4d54 <xTaskGetTickCount>
    3688:	61b8      	str	r0, [r7, #24]
        vPrintNumber( xCurrentTime );
    368a:	69b8      	ldr	r0, [r7, #24]
    368c:	f013 fc3c 	bl	16f08 <vPrintNumber>
        vPrintNumber( (xMyFlag + 10) * 3 );
    3690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3692:	f103 020a 	add.w	r2, r3, #10
    3696:	4613      	mov	r3, r2
    3698:	005b      	lsls	r3, r3, #1
    369a:	4413      	add	r3, r2
    369c:	4618      	mov	r0, r3
    369e:	f013 fc33 	bl	16f08 <vPrintNumber>

        if( xCurrentTime > xDatas[0].xNextPeriod )
    36a2:	6a3b      	ldr	r3, [r7, #32]
    36a4:	681a      	ldr	r2, [r3, #0]
    36a6:	69bb      	ldr	r3, [r7, #24]
    36a8:	429a      	cmp	r2, r3
    36aa:	d20d      	bcs.n	36c8 <vServant+0x1c4>
        {
            vPrintNumber(xDatas[0].xNextPeriod);
    36ac:	6a3b      	ldr	r3, [r7, #32]
    36ae:	681b      	ldr	r3, [r3, #0]
    36b0:	4618      	mov	r0, r3
    36b2:	f013 fc29 	bl	16f08 <vPrintNumber>
            vPrintNumber(xCurrentTime);
    36b6:	69b8      	ldr	r0, [r7, #24]
    36b8:	f013 fc26 	bl	16f08 <vPrintNumber>
            vPrintString("there are servants missing deadline\n\r");
    36bc:	f648 0054 	movw	r0, #34900	; 0x8854
    36c0:	f2c0 0001 	movt	r0, #1
    36c4:	f013 fc06 	bl	16ed4 <vPrintString>
        }
        // triggered R-Servant to execute 
        xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT-1] );
    36c8:	f240 7398 	movw	r3, #1944	; 0x798
    36cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    36d2:	4618      	mov	r0, r3
    36d4:	2100      	movs	r1, #0
    36d6:	2200      	movs	r2, #0
    36d8:	2300      	movs	r3, #0
    36da:	f000 fbc1 	bl	3e60 <xQueueGenericSend>
        
    }
    36de:	e776      	b.n	35ce <vServant+0xca>

000036e0 <vR_Servant>:
}

void vR_Servant( void * pvParameter)
{
    36e0:	b580      	push	{r7, lr}
    36e2:	b090      	sub	sp, #64	; 0x40
    36e4:	af00      	add	r7, sp, #0
    36e6:	6078      	str	r0, [r7, #4]
    portBASE_TYPE xSource, xDest;
    portBASE_TYPE HAVE_TO_SEND_SEMAPHORE; // could the semaphore be sent? 1 means yes , 0 means no
    portBASE_TYPE xResult;

    portTickType xCurrentTime;
    void * pvMyParameter = pvParameter;
    36e8:	687b      	ldr	r3, [r7, #4]
    36ea:	62bb      	str	r3, [r7, #40]	; 0x28

    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    36ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    36ee:	681b      	ldr	r3, [r3, #0]
    36f0:	627b      	str	r3, [r7, #36]	; 0x24
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    36f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    36f4:	69db      	ldr	r3, [r3, #28]
    36f6:	623b      	str	r3, [r7, #32]
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    36f8:	f240 73f0 	movw	r3, #2032	; 0x7f0
    36fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3706:	4618      	mov	r0, r3
    3708:	6a39      	ldr	r1, [r7, #32]
    370a:	f001 ffcb 	bl	56a4 <vTaskSetxLet>
    xTaskHandle destinationTCB, sourceTCB;

    while(1)
    {
        // waiting for events created by tick hook or S-Servant
        xSemaphoreTake( xBinarySemaphore[xMyFlag], portMAX_DELAY );
    370e:	f240 7398 	movw	r3, #1944	; 0x798
    3712:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    371c:	4618      	mov	r0, r3
    371e:	2100      	movs	r1, #0
    3720:	f04f 32ff 	mov.w	r2, #4294967295
    3724:	2300      	movs	r3, #0
    3726:	f000 fc61 	bl	3fec <xQueueGenericReceive>

        //vPrintNumber( xMyFlag );
        xCurrentTime = xTaskGetTickCount();
    372a:	f001 fb13 	bl	4d54 <xTaskGetTickCount>
    372e:	61f8      	str	r0, [r7, #28]
        //vPrintNumber( xCurrentTime );
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    3730:	f240 73f0 	movw	r3, #2032	; 0x7f0
    3734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    373a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    373e:	4618      	mov	r0, r3
    3740:	69f9      	ldr	r1, [r7, #28]
    3742:	f001 ffa1 	bl	5688 <vTaskSetxStartTime>

        // init to zero
        HAVE_TO_SEND_SEMAPHORE = 0;
    3746:	2300      	movs	r3, #0
    3748:	637b      	str	r3, [r7, #52]	; 0x34

        // to see whether there is a servant need to be triggered.
        // This process could be preempted by Sensor servant.
        while(! HAVE_TO_SEND_SEMAPHORE)
    374a:	e094      	b.n	3876 <vR_Servant+0x196>
            /*
             * transit the event item, whose timestamp bigger or equal to current Tick Count, 
             * from xEventList to the idlest xEvestReadyList
             *
             * */
            xResult = xEventListTransit( &pxEventListItem, &pxCurrentReadyList);
    374c:	f107 030c 	add.w	r3, r7, #12
    3750:	4618      	mov	r0, r3
    3752:	f240 31cc 	movw	r1, #972	; 0x3cc
    3756:	f2c2 0100 	movt	r1, #8192	; 0x2000
    375a:	f7ff fa7f 	bl	2c5c <xEventListGenericTransit>
    375e:	6338      	str	r0, [r7, #48]	; 0x30
            if( xResult == -1 )
    3760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3762:	f1b3 3fff 	cmp.w	r3, #4294967295
    3766:	d100      	bne.n	376a <vR_Servant+0x8a>
            {
                // no event
                break;
    3768:	e089      	b.n	387e <vR_Servant+0x19e>
            }
            else if( xResult == 0 )
    376a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    376c:	2b00      	cmp	r3, #0
    376e:	d100      	bne.n	3772 <vR_Servant+0x92>
            {
                // not time yet
                break;
    3770:	e085      	b.n	387e <vR_Servant+0x19e>
            else
            {
                // transmit success
            }

            destinationTCB = xEventGetpxDestination( pxEventListItem->pvOwner);
    3772:	68fb      	ldr	r3, [r7, #12]
    3774:	68db      	ldr	r3, [r3, #12]
    3776:	4618      	mov	r0, r3
    3778:	f7ff f914 	bl	29a4 <xEventGetpxDestination>
    377c:	62f8      	str	r0, [r7, #44]	; 0x2c
            sourceTCB = xEventGetpxSource( pxEventListItem->pvOwner );
    377e:	68fb      	ldr	r3, [r7, #12]
    3780:	68db      	ldr	r3, [r3, #12]
    3782:	4618      	mov	r0, r3
    3784:	f7ff f902 	bl	298c <xEventGetpxSource>
    3788:	61b8      	str	r0, [r7, #24]
            HAVE_TO_SEND_SEMAPHORE = 1;  // set default 1
    378a:	2301      	movs	r3, #1
    378c:	637b      	str	r3, [r7, #52]	; 0x34

            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    378e:	2300      	movs	r3, #0
    3790:	63fb      	str	r3, [r7, #60]	; 0x3c
    3792:	e068      	b.n	3866 <vR_Servant+0x186>
            {
                xSource = xRelations.xRelation[i].xInFlag;
    3794:	f240 1210 	movw	r2, #272	; 0x110
    3798:	f2c2 0200 	movt	r2, #8192	; 0x2000
    379c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    379e:	460b      	mov	r3, r1
    37a0:	005b      	lsls	r3, r3, #1
    37a2:	440b      	add	r3, r1
    37a4:	009b      	lsls	r3, r3, #2
    37a6:	4413      	add	r3, r2
    37a8:	3304      	adds	r3, #4
    37aa:	681b      	ldr	r3, [r3, #0]
    37ac:	617b      	str	r3, [r7, #20]
                xDest   = xRelations.xRelation[i].xOutFlag;
    37ae:	f240 1210 	movw	r2, #272	; 0x110
    37b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    37b8:	460b      	mov	r3, r1
    37ba:	005b      	lsls	r3, r3, #1
    37bc:	440b      	add	r3, r1
    37be:	009b      	lsls	r3, r3, #2
    37c0:	4413      	add	r3, r2
    37c2:	3308      	adds	r3, #8
    37c4:	681b      	ldr	r3, [r3, #0]
    37c6:	613b      	str	r3, [r7, #16]

                if( destinationTCB == xTaskOfHandle[xDest] )
    37c8:	f240 73f0 	movw	r3, #2032	; 0x7f0
    37cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37d0:	693a      	ldr	r2, [r7, #16]
    37d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    37d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    37d8:	429a      	cmp	r2, r3
    37da:	d141      	bne.n	3860 <vR_Servant+0x180>
                {
                    // find the right relation
                    if( sourceTCB == xTaskOfHandle[xSource] )
    37dc:	f240 73f0 	movw	r3, #2032	; 0x7f0
    37e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37e4:	697a      	ldr	r2, [r7, #20]
    37e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    37ea:	69bb      	ldr	r3, [r7, #24]
    37ec:	429a      	cmp	r2, r3
    37ee:	d127      	bne.n	3840 <vR_Servant+0x160>
                    {
                        if( xRelations.xRelation[i].xFlag == 2 )
    37f0:	f240 1210 	movw	r2, #272	; 0x110
    37f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    37fa:	460b      	mov	r3, r1
    37fc:	005b      	lsls	r3, r3, #1
    37fe:	440b      	add	r3, r1
    3800:	009b      	lsls	r3, r3, #2
    3802:	4413      	add	r3, r2
    3804:	330c      	adds	r3, #12
    3806:	681b      	ldr	r3, [r3, #0]
    3808:	2b02      	cmp	r3, #2
    380a:	d10b      	bne.n	3824 <vR_Servant+0x144>
                        {
                            vPrintString("Error: This event has arrived!!\n\r") ;
    380c:	f648 007c 	movw	r0, #34940	; 0x887c
    3810:	f2c0 0001 	movt	r0, #1
    3814:	f013 fb5e 	bl	16ed4 <vPrintString>
                            vEventDelete( (xEventHandle) pxEventListItem->pvOwner );
    3818:	68fb      	ldr	r3, [r7, #12]
    381a:	68db      	ldr	r3, [r3, #12]
    381c:	4618      	mov	r0, r3
    381e:	f7ff facf 	bl	2dc0 <vEventGenericDelete>
    3822:	e01d      	b.n	3860 <vR_Servant+0x180>
                        }
                        else
                        {
                            // set the relation to 2
                            xRelations.xRelation[i].xFlag = 2;
    3824:	f240 1210 	movw	r2, #272	; 0x110
    3828:	f2c2 0200 	movt	r2, #8192	; 0x2000
    382c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    382e:	460b      	mov	r3, r1
    3830:	005b      	lsls	r3, r3, #1
    3832:	440b      	add	r3, r1
    3834:	009b      	lsls	r3, r3, #2
    3836:	4413      	add	r3, r2
    3838:	330c      	adds	r3, #12
    383a:	2202      	movs	r2, #2
    383c:	601a      	str	r2, [r3, #0]
    383e:	e00f      	b.n	3860 <vR_Servant+0x180>
                    }
                    // find other relation which is relative to destinationtcb
                    else
                    {
                        // waiting for an events that is not arriving yet
                        if( xRelations.xRelation[i].xFlag == 1 )
    3840:	f240 1210 	movw	r2, #272	; 0x110
    3844:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3848:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    384a:	460b      	mov	r3, r1
    384c:	005b      	lsls	r3, r3, #1
    384e:	440b      	add	r3, r1
    3850:	009b      	lsls	r3, r3, #2
    3852:	4413      	add	r3, r2
    3854:	330c      	adds	r3, #12
    3856:	681b      	ldr	r3, [r3, #0]
    3858:	2b01      	cmp	r3, #1
    385a:	d101      	bne.n	3860 <vR_Servant+0x180>
                        {
                            HAVE_TO_SEND_SEMAPHORE = 0;
    385c:	2300      	movs	r3, #0
    385e:	637b      	str	r3, [r7, #52]	; 0x34

            destinationTCB = xEventGetpxDestination( pxEventListItem->pvOwner);
            sourceTCB = xEventGetpxSource( pxEventListItem->pvOwner );
            HAVE_TO_SEND_SEMAPHORE = 1;  // set default 1

            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3862:	3301      	adds	r3, #1
    3864:	63fb      	str	r3, [r7, #60]	; 0x3c
    3866:	f240 1310 	movw	r3, #272	; 0x110
    386a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    386e:	681a      	ldr	r2, [r3, #0]
    3870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3872:	429a      	cmp	r2, r3
    3874:	dc8e      	bgt.n	3794 <vR_Servant+0xb4>
        // init to zero
        HAVE_TO_SEND_SEMAPHORE = 0;

        // to see whether there is a servant need to be triggered.
        // This process could be preempted by Sensor servant.
        while(! HAVE_TO_SEND_SEMAPHORE)
    3876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3878:	2b00      	cmp	r3, #0
    387a:	f43f af67 	beq.w	374c <vR_Servant+0x6c>
                }
            }
        } //  end inner while(1)

        // not time yet, R-Servant should be sleep until next period of any task
        if( xResult == -1 )
    387e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3880:	f1b3 3fff 	cmp.w	r3, #4294967295
    3884:	d100      	bne.n	3888 <vR_Servant+0x1a8>
        {
            //vTaskDelayLET();
            continue; 
    3886:	e048      	b.n	391a <vR_Servant+0x23a>
        }
        else if ( xResult == 0 )
    3888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    388a:	2b00      	cmp	r3, #0
    388c:	d100      	bne.n	3890 <vR_Servant+0x1b0>
        {
            //vTaskDelayLET();
            continue;
    388e:	e044      	b.n	391a <vR_Servant+0x23a>
        }
        else
        {
            // set all the relations whose destination S-Servant is xTaskOfHandle[i] to 1.
            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3890:	2300      	movs	r3, #0
    3892:	63fb      	str	r3, [r7, #60]	; 0x3c
    3894:	e028      	b.n	38e8 <vR_Servant+0x208>
            {
                xDest = xRelations.xRelation[i].xOutFlag;
    3896:	f240 1210 	movw	r2, #272	; 0x110
    389a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    389e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    38a0:	460b      	mov	r3, r1
    38a2:	005b      	lsls	r3, r3, #1
    38a4:	440b      	add	r3, r1
    38a6:	009b      	lsls	r3, r3, #2
    38a8:	4413      	add	r3, r2
    38aa:	3308      	adds	r3, #8
    38ac:	681b      	ldr	r3, [r3, #0]
    38ae:	613b      	str	r3, [r7, #16]
                if( destinationTCB == xTaskOfHandle[xDest] )
    38b0:	f240 73f0 	movw	r3, #2032	; 0x7f0
    38b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38b8:	693a      	ldr	r2, [r7, #16]
    38ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    38be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    38c0:	429a      	cmp	r2, r3
    38c2:	d10e      	bne.n	38e2 <vR_Servant+0x202>
                {
                    xRelations.xRelation[i].xFlag = 1;
    38c4:	f240 1210 	movw	r2, #272	; 0x110
    38c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    38cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    38ce:	460b      	mov	r3, r1
    38d0:	005b      	lsls	r3, r3, #1
    38d2:	440b      	add	r3, r1
    38d4:	009b      	lsls	r3, r3, #2
    38d6:	4413      	add	r3, r2
    38d8:	330c      	adds	r3, #12
    38da:	2201      	movs	r2, #1
    38dc:	601a      	str	r2, [r3, #0]
                    // record the number of destinationtcb in xTaskOfHandle array.
                    j = xDest;
    38de:	693b      	ldr	r3, [r7, #16]
    38e0:	63bb      	str	r3, [r7, #56]	; 0x38
            continue;
        }
        else
        {
            // set all the relations whose destination S-Servant is xTaskOfHandle[i] to 1.
            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    38e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    38e4:	3301      	adds	r3, #1
    38e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    38e8:	f240 1310 	movw	r3, #272	; 0x110
    38ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38f0:	681a      	ldr	r2, [r3, #0]
    38f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    38f4:	429a      	cmp	r2, r3
    38f6:	dcce      	bgt.n	3896 <vR_Servant+0x1b6>
                    j = xDest;
                }
            }

            //vTaskDelayLET();
            xCurrentTime = xTaskGetTickCount();
    38f8:	f001 fa2c 	bl	4d54 <xTaskGetTickCount>
    38fc:	61f8      	str	r0, [r7, #28]
            //vPrintNumber( xCurrentTime );
            //vPrintNumber( (xMyFlag + 10) * 3 );

            // send semaphore to destinationtcb
            xSemaphoreGive( xBinarySemaphore[j] );
    38fe:	f240 7398 	movw	r3, #1944	; 0x798
    3902:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3906:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    390c:	4618      	mov	r0, r3
    390e:	2100      	movs	r1, #0
    3910:	2200      	movs	r2, #0
    3912:	2300      	movs	r3, #0
    3914:	f000 faa4 	bl	3e60 <xQueueGenericSend>
        }
    }
    3918:	e6f9      	b.n	370e <vR_Servant+0x2e>
    391a:	e6f8      	b.n	370e <vR_Servant+0x2e>

0000391c <s_0>:
 * 3) s_2
 * 4) s_3
 * 5) actuator 4
 * */
void s_0(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    391c:	b580      	push	{r7, lr}
    391e:	b084      	sub	sp, #16
    3920:	af00      	add	r7, sp, #0
    3922:	60f8      	str	r0, [r7, #12]
    3924:	60b9      	str	r1, [r7, #8]
    3926:	607a      	str	r2, [r7, #4]
    3928:	603b      	str	r3, [r7, #0]
    //vPrintString("Task 1 start ###############\n\r");
    last_radio_from_ppm(); // ppm.h
    392a:	f012 f911 	bl	15b50 <last_radio_from_ppm>
}
    392e:	3710      	adds	r7, #16
    3930:	46bd      	mov	sp, r7
    3932:	bd80      	pop	{r7, pc}

00003934 <s_1>:
void s_1(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3934:	b480      	push	{r7}
    3936:	b085      	sub	sp, #20
    3938:	af00      	add	r7, sp, #0
    393a:	60f8      	str	r0, [r7, #12]
    393c:	60b9      	str	r1, [r7, #8]
    393e:	607a      	str	r2, [r7, #4]
    3940:	603b      	str	r3, [r7, #0]
    //vPrintString("s_0\n\r");
    //servo_set();  // servo.h, this function is used by multitask which in terms of multiuse of Servant. And this
                    // is not implemented now. So cancel.
}
    3942:	3714      	adds	r7, #20
    3944:	46bd      	mov	sp, r7
    3946:	f85d 7b04 	ldr.w	r7, [sp], #4
    394a:	4770      	bx	lr

0000394c <s_2>:
void s_2(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    394c:	b580      	push	{r7, lr}
    394e:	b084      	sub	sp, #16
    3950:	af00      	add	r7, sp, #0
    3952:	60f8      	str	r0, [r7, #12]
    3954:	60b9      	str	r1, [r7, #8]
    3956:	607a      	str	r2, [r7, #4]
    3958:	603b      	str	r3, [r7, #0]

    //vPrintString("s_1\n\r");
    to_autopilot_from_last_radio(); // main.c
    395a:	f012 fcb3 	bl	162c4 <to_autopilot_from_last_radio>
}
    395e:	3710      	adds	r7, #16
    3960:	46bd      	mov	sp, r7
    3962:	bd80      	pop	{r7, pc}

00003964 <s_3>:

void s_3(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3964:	b580      	push	{r7, lr}
    3966:	b084      	sub	sp, #16
    3968:	af00      	add	r7, sp, #0
    396a:	60f8      	str	r0, [r7, #12]
    396c:	60b9      	str	r1, [r7, #8]
    396e:	607a      	str	r2, [r7, #4]
    3970:	603b      	str	r3, [r7, #0]

    spi_reset(); // spi_fbw.h
    3972:	f012 fbe5 	bl	16140 <spi_reset>
}
    3976:	3710      	adds	r7, #16
    3978:	46bd      	mov	sp, r7
    397a:	bd80      	pop	{r7, pc}

0000397c <s_4>:
void s_4(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    397c:	b580      	push	{r7, lr}
    397e:	b084      	sub	sp, #16
    3980:	af00      	add	r7, sp, #0
    3982:	60f8      	str	r0, [r7, #12]
    3984:	60b9      	str	r1, [r7, #8]
    3986:	607a      	str	r2, [r7, #4]
    3988:	603b      	str	r3, [r7, #0]
    //vPrintString("Task 1 end ###############\n\r");
    check_mega128_values_task(); // main.c
    398a:	f012 fde3 	bl	16554 <check_mega128_values_task>
}
    398e:	3710      	adds	r7, #16
    3990:	46bd      	mov	sp, r7
    3992:	bd80      	pop	{r7, pc}

00003994 <s_5>:

void s_5(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3994:	b580      	push	{r7, lr}
    3996:	b084      	sub	sp, #16
    3998:	af00      	add	r7, sp, #0
    399a:	60f8      	str	r0, [r7, #12]
    399c:	60b9      	str	r1, [r7, #8]
    399e:	607a      	str	r2, [r7, #4]
    39a0:	603b      	str	r3, [r7, #0]
    //vPrintString("Task 2 start+++++++++++++++++++\n\r");
    servo_transmit(); //servo.h
    39a2:	f012 feaf 	bl	16704 <servo_transmit>
}
    39a6:	3710      	adds	r7, #16
    39a8:	46bd      	mov	sp, r7
    39aa:	bd80      	pop	{r7, pc}

000039ac <s_6>:

void s_6(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    39ac:	b580      	push	{r7, lr}
    39ae:	b084      	sub	sp, #16
    39b0:	af00      	add	r7, sp, #0
    39b2:	60f8      	str	r0, [r7, #12]
    39b4:	60b9      	str	r1, [r7, #8]
    39b6:	607a      	str	r2, [r7, #4]
    39b8:	603b      	str	r3, [r7, #0]
    //vPrintString("s_2\n\r");
    check_failsafe_task(); // main.c
    39ba:	f012 fdc1 	bl	16540 <check_failsafe_task>
}
    39be:	3710      	adds	r7, #16
    39c0:	46bd      	mov	sp, r7
    39c2:	bd80      	pop	{r7, pc}

000039c4 <s_7>:
void s_7(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    39c4:	b580      	push	{r7, lr}
    39c6:	b084      	sub	sp, #16
    39c8:	af00      	add	r7, sp, #0
    39ca:	60f8      	str	r0, [r7, #12]
    39cc:	60b9      	str	r1, [r7, #8]
    39ce:	607a      	str	r2, [r7, #4]
    39d0:	603b      	str	r3, [r7, #0]

    //vPrintString("s_7\n\r");
     //inflight_calib(pdTRUE); // inflight_calib.h
     //inflight_calib(pdTRUE); // main_auto.c , we transfer this function into main.c because of bugs if not 
     radio_control_task();
    39d2:	f009 f84f 	bl	ca74 <radio_control_task>
}
    39d6:	3710      	adds	r7, #16
    39d8:	46bd      	mov	sp, r7
    39da:	bd80      	pop	{r7, pc}

000039dc <s_8>:
void s_8(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    39dc:	b580      	push	{r7, lr}
    39de:	b084      	sub	sp, #16
    39e0:	af00      	add	r7, sp, #0
    39e2:	60f8      	str	r0, [r7, #12]
    39e4:	60b9      	str	r1, [r7, #8]
    39e6:	607a      	str	r2, [r7, #4]
    39e8:	603b      	str	r3, [r7, #0]
    //check_mega128_values_task(); // link_autopilot.h
    ir_gain_calib(); //infrared.h
    39ea:	f00d fef5 	bl	117d8 <ir_gain_calib>
}
    39ee:	3710      	adds	r7, #16
    39f0:	46bd      	mov	sp, r7
    39f2:	bd80      	pop	{r7, pc}

000039f4 <s_9>:
void s_9(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData)
{
    39f4:	b580      	push	{r7, lr}
    39f6:	b084      	sub	sp, #16
    39f8:	af00      	add	r7, sp, #0
    39fa:	60f8      	str	r0, [r7, #12]
    39fc:	60b9      	str	r1, [r7, #8]
    39fe:	607a      	str	r2, [r7, #4]
    3a00:	603b      	str	r3, [r7, #0]
    
    ir_update(); // infrared.h
    3a02:	f00d feab 	bl	1175c <ir_update>
}
    3a06:	3710      	adds	r7, #16
    3a08:	46bd      	mov	sp, r7
    3a0a:	bd80      	pop	{r7, pc}

00003a0c <s_10>:
void s_10(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3a0c:	b580      	push	{r7, lr}
    3a0e:	b084      	sub	sp, #16
    3a10:	af00      	add	r7, sp, #0
    3a12:	60f8      	str	r0, [r7, #12]
    3a14:	60b9      	str	r1, [r7, #8]
    3a16:	607a      	str	r2, [r7, #4]
    3a18:	603b      	str	r3, [r7, #0]

    //vPrintString("s_3\n\r");
    //servo_transmit();  // servo.h
    estimator_update_state_infrared(); //estimator.h
    3a1a:	f011 f927 	bl	14c6c <estimator_update_state_infrared>
}
    3a1e:	3710      	adds	r7, #16
    3a20:	46bd      	mov	sp, r7
    3a22:	bd80      	pop	{r7, pc}

00003a24 <s_11>:
void s_11(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3a24:	b580      	push	{r7, lr}
    3a26:	b084      	sub	sp, #16
    3a28:	af00      	add	r7, sp, #0
    3a2a:	60f8      	str	r0, [r7, #12]
    3a2c:	60b9      	str	r1, [r7, #8]
    3a2e:	607a      	str	r2, [r7, #4]
    3a30:	603b      	str	r3, [r7, #0]
    //vPrintString("Task 2 end +++++++++++++++++++\n\r");
    roll_pitch_pid_run(); // pid.h
    3a32:	f00d ff01 	bl	11838 <roll_pitch_pid_run>
}
    3a36:	3710      	adds	r7, #16
    3a38:	46bd      	mov	sp, r7
    3a3a:	bd80      	pop	{r7, pc}

00003a3c <s_12>:

void s_12(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3a3c:	b580      	push	{r7, lr}
    3a3e:	b084      	sub	sp, #16
    3a40:	af00      	add	r7, sp, #0
    3a42:	60f8      	str	r0, [r7, #12]
    3a44:	60b9      	str	r1, [r7, #8]
    3a46:	607a      	str	r2, [r7, #4]
    3a48:	603b      	str	r3, [r7, #0]
    //vPrintString("Task 3 start---------------------\n\r");
    link_fbw_send(); //link_fbw.h
    3a4a:	f00d f8f9 	bl	10c40 <link_fbw_send>
}
    3a4e:	3710      	adds	r7, #16
    3a50:	46bd      	mov	sp, r7
    3a52:	bd80      	pop	{r7, pc}

00003a54 <s_13>:
void s_13(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3a54:	b580      	push	{r7, lr}
    3a56:	b084      	sub	sp, #16
    3a58:	af00      	add	r7, sp, #0
    3a5a:	60f8      	str	r0, [r7, #12]
    3a5c:	60b9      	str	r1, [r7, #8]
    3a5e:	607a      	str	r2, [r7, #4]
    3a60:	603b      	str	r3, [r7, #0]
    
    //vPrintString("s_12\n\r");
    parse_gps_msg(); //gps.h
    3a62:	f00d fbc5 	bl	111f0 <parse_gps_msg>
}
    3a66:	3710      	adds	r7, #16
    3a68:	46bd      	mov	sp, r7
    3a6a:	bd80      	pop	{r7, pc}

00003a6c <s_14>:

void s_14(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3a6c:	b580      	push	{r7, lr}
    3a6e:	b084      	sub	sp, #16
    3a70:	af00      	add	r7, sp, #0
    3a72:	60f8      	str	r0, [r7, #12]
    3a74:	60b9      	str	r1, [r7, #8]
    3a76:	607a      	str	r2, [r7, #4]
    3a78:	603b      	str	r3, [r7, #0]
    //vPrintString("Task 3 end ----------------------\n\r");
    //use_gps_pos(); // autopilot.h  is not implemeted.
    send_gps_pos();
    3a7a:	f00a fde1 	bl	e640 <send_gps_pos>
    send_radIR();
    3a7e:	f00b ffa5 	bl	f9cc <send_radIR>
    send_takeOff();
    3a82:	f00c fd9d 	bl	105c0 <send_takeOff>
}
    3a86:	3710      	adds	r7, #16
    3a88:	46bd      	mov	sp, r7
    3a8a:	bd80      	pop	{r7, pc}

00003a8c <s_15>:


void s_15(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3a8c:	b580      	push	{r7, lr}
    3a8e:	b084      	sub	sp, #16
    3a90:	af00      	add	r7, sp, #0
    3a92:	60f8      	str	r0, [r7, #12]
    3a94:	60b9      	str	r1, [r7, #8]
    3a96:	607a      	str	r2, [r7, #4]
    3a98:	603b      	str	r3, [r7, #0]
    //vPrintString("Task 4 start********************\n\r");
    nav_home(); // nav.h
    3a9a:	f010 fe69 	bl	14770 <nav_home>
}
    3a9e:	3710      	adds	r7, #16
    3aa0:	46bd      	mov	sp, r7
    3aa2:	bd80      	pop	{r7, pc}

00003aa4 <s_16>:
void s_16(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3aa4:	b580      	push	{r7, lr}
    3aa6:	b084      	sub	sp, #16
    3aa8:	af00      	add	r7, sp, #0
    3aaa:	60f8      	str	r0, [r7, #12]
    3aac:	60b9      	str	r1, [r7, #8]
    3aae:	607a      	str	r2, [r7, #4]
    3ab0:	603b      	str	r3, [r7, #0]
    
    //vPrintString("s_8\n\r");
    nav_update(); // nav.h
    3ab2:	f010 fe83 	bl	147bc <nav_update>
}
    3ab6:	3710      	adds	r7, #16
    3ab8:	46bd      	mov	sp, r7
    3aba:	bd80      	pop	{r7, pc}

00003abc <s_17>:

void s_17(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3abc:	b580      	push	{r7, lr}
    3abe:	b084      	sub	sp, #16
    3ac0:	af00      	add	r7, sp, #0
    3ac2:	60f8      	str	r0, [r7, #12]
    3ac4:	60b9      	str	r1, [r7, #8]
    3ac6:	607a      	str	r2, [r7, #4]
    3ac8:	603b      	str	r3, [r7, #0]
    course_pid_run(); // pid.h
    3aca:	f00d ffa1 	bl	11a10 <course_pid_run>
}
    3ace:	3710      	adds	r7, #16
    3ad0:	46bd      	mov	sp, r7
    3ad2:	bd80      	pop	{r7, pc}

00003ad4 <s_18>:
void s_18(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3ad4:	b580      	push	{r7, lr}
    3ad6:	b084      	sub	sp, #16
    3ad8:	af00      	add	r7, sp, #0
    3ada:	60f8      	str	r0, [r7, #12]
    3adc:	60b9      	str	r1, [r7, #8]
    3ade:	607a      	str	r2, [r7, #4]
    3ae0:	603b      	str	r3, [r7, #0]
    altitude_pid_run(); // pid.h
    3ae2:	f00e fa1d 	bl	11f20 <altitude_pid_run>
}
    3ae6:	3710      	adds	r7, #16
    3ae8:	46bd      	mov	sp, r7
    3aea:	bd80      	pop	{r7, pc}

00003aec <s_19>:
void s_19(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData)
{
    3aec:	b580      	push	{r7, lr}
    3aee:	b084      	sub	sp, #16
    3af0:	af00      	add	r7, sp, #0
    3af2:	60f8      	str	r0, [r7, #12]
    3af4:	60b9      	str	r1, [r7, #8]
    3af6:	607a      	str	r2, [r7, #4]
    3af8:	603b      	str	r3, [r7, #0]
    climb_pid_run(); // pid.h
    3afa:	f00e f841 	bl	11b80 <climb_pid_run>
}
    3afe:	3710      	adds	r7, #16
    3b00:	46bd      	mov	sp, r7
    3b02:	bd80      	pop	{r7, pc}

00003b04 <s_20>:
void s_20(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3b04:	b580      	push	{r7, lr}
    3b06:	b084      	sub	sp, #16
    3b08:	af00      	add	r7, sp, #0
    3b0a:	60f8      	str	r0, [r7, #12]
    3b0c:	60b9      	str	r1, [r7, #8]
    3b0e:	607a      	str	r2, [r7, #4]
    3b10:	603b      	str	r3, [r7, #0]
    // main.c
    send_boot();
    3b12:	f003 fa77 	bl	7004 <send_boot>
    send_attitude();
    3b16:	f004 fa45 	bl	7fa4 <send_attitude>
    send_adc();
    3b1a:	f004 ff37 	bl	898c <send_adc>
    send_settings();
    3b1e:	f005 f9bd 	bl	8e9c <send_settings>
    send_desired();
    3b22:	f005 fdbf 	bl	96a4 <send_desired>
    send_bat();
    3b26:	f006 fced 	bl	a504 <send_bat>
    send_climb();
    3b2a:	f007 f8a1 	bl	ac70 <send_climb>
    send_mode();
    3b2e:	f007 fe11 	bl	b754 <send_mode>
    send_debug();
    3b32:	f008 f8e3 	bl	bcfc <send_debug>
    send_nav_ref();
    3b36:	f008 fbb7 	bl	c2a8 <send_nav_ref>
}
    3b3a:	3710      	adds	r7, #16
    3b3c:	46bd      	mov	sp, r7
    3b3e:	bd80      	pop	{r7, pc}

00003b40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    3b40:	b480      	push	{r7}
    3b42:	b083      	sub	sp, #12
    3b44:	af00      	add	r7, sp, #0
    3b46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    3b48:	687b      	ldr	r3, [r7, #4]
    3b4a:	f103 0208 	add.w	r2, r3, #8
    3b4e:	687b      	ldr	r3, [r7, #4]
    3b50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    3b52:	687b      	ldr	r3, [r7, #4]
    3b54:	f04f 32ff 	mov.w	r2, #4294967295
    3b58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    3b5a:	687b      	ldr	r3, [r7, #4]
    3b5c:	f103 0208 	add.w	r2, r3, #8
    3b60:	687b      	ldr	r3, [r7, #4]
    3b62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    3b64:	687b      	ldr	r3, [r7, #4]
    3b66:	f103 0208 	add.w	r2, r3, #8
    3b6a:	687b      	ldr	r3, [r7, #4]
    3b6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    3b6e:	687b      	ldr	r3, [r7, #4]
    3b70:	2200      	movs	r2, #0
    3b72:	601a      	str	r2, [r3, #0]
}
    3b74:	370c      	adds	r7, #12
    3b76:	46bd      	mov	sp, r7
    3b78:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b7c:	4770      	bx	lr
    3b7e:	bf00      	nop

00003b80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    3b80:	b480      	push	{r7}
    3b82:	b083      	sub	sp, #12
    3b84:	af00      	add	r7, sp, #0
    3b86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    3b88:	687b      	ldr	r3, [r7, #4]
    3b8a:	2200      	movs	r2, #0
    3b8c:	611a      	str	r2, [r3, #16]
}
    3b8e:	370c      	adds	r7, #12
    3b90:	46bd      	mov	sp, r7
    3b92:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b96:	4770      	bx	lr

00003b98 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    3b98:	b480      	push	{r7}
    3b9a:	b085      	sub	sp, #20
    3b9c:	af00      	add	r7, sp, #0
    3b9e:	6078      	str	r0, [r7, #4]
    3ba0:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    3ba2:	687b      	ldr	r3, [r7, #4]
    3ba4:	685b      	ldr	r3, [r3, #4]
    3ba6:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    3ba8:	68fb      	ldr	r3, [r7, #12]
    3baa:	685a      	ldr	r2, [r3, #4]
    3bac:	683b      	ldr	r3, [r7, #0]
    3bae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    3bb0:	687b      	ldr	r3, [r7, #4]
    3bb2:	685a      	ldr	r2, [r3, #4]
    3bb4:	683b      	ldr	r3, [r7, #0]
    3bb6:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    3bb8:	68fb      	ldr	r3, [r7, #12]
    3bba:	685b      	ldr	r3, [r3, #4]
    3bbc:	683a      	ldr	r2, [r7, #0]
    3bbe:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    3bc0:	68fb      	ldr	r3, [r7, #12]
    3bc2:	683a      	ldr	r2, [r7, #0]
    3bc4:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    3bc6:	687b      	ldr	r3, [r7, #4]
    3bc8:	683a      	ldr	r2, [r7, #0]
    3bca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3bcc:	683b      	ldr	r3, [r7, #0]
    3bce:	687a      	ldr	r2, [r7, #4]
    3bd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    3bd2:	687b      	ldr	r3, [r7, #4]
    3bd4:	681b      	ldr	r3, [r3, #0]
    3bd6:	1c5a      	adds	r2, r3, #1
    3bd8:	687b      	ldr	r3, [r7, #4]
    3bda:	601a      	str	r2, [r3, #0]
}
    3bdc:	3714      	adds	r7, #20
    3bde:	46bd      	mov	sp, r7
    3be0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3be4:	4770      	bx	lr
    3be6:	bf00      	nop

00003be8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    3be8:	b480      	push	{r7}
    3bea:	b085      	sub	sp, #20
    3bec:	af00      	add	r7, sp, #0
    3bee:	6078      	str	r0, [r7, #4]
    3bf0:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    3bf2:	683b      	ldr	r3, [r7, #0]
    3bf4:	681b      	ldr	r3, [r3, #0]
    3bf6:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    3bf8:	68bb      	ldr	r3, [r7, #8]
    3bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
    3bfe:	d103      	bne.n	3c08 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    3c00:	687b      	ldr	r3, [r7, #4]
    3c02:	691b      	ldr	r3, [r3, #16]
    3c04:	60fb      	str	r3, [r7, #12]
    3c06:	e00c      	b.n	3c22 <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    3c08:	687b      	ldr	r3, [r7, #4]
    3c0a:	3308      	adds	r3, #8
    3c0c:	60fb      	str	r3, [r7, #12]
    3c0e:	e002      	b.n	3c16 <vListInsert+0x2e>
    3c10:	68fb      	ldr	r3, [r7, #12]
    3c12:	685b      	ldr	r3, [r3, #4]
    3c14:	60fb      	str	r3, [r7, #12]
    3c16:	68fb      	ldr	r3, [r7, #12]
    3c18:	685b      	ldr	r3, [r3, #4]
    3c1a:	681a      	ldr	r2, [r3, #0]
    3c1c:	68bb      	ldr	r3, [r7, #8]
    3c1e:	429a      	cmp	r2, r3
    3c20:	d9f6      	bls.n	3c10 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    3c22:	68fb      	ldr	r3, [r7, #12]
    3c24:	685a      	ldr	r2, [r3, #4]
    3c26:	683b      	ldr	r3, [r7, #0]
    3c28:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    3c2a:	683b      	ldr	r3, [r7, #0]
    3c2c:	685b      	ldr	r3, [r3, #4]
    3c2e:	683a      	ldr	r2, [r7, #0]
    3c30:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    3c32:	683b      	ldr	r3, [r7, #0]
    3c34:	68fa      	ldr	r2, [r7, #12]
    3c36:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    3c38:	68fb      	ldr	r3, [r7, #12]
    3c3a:	683a      	ldr	r2, [r7, #0]
    3c3c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3c3e:	683b      	ldr	r3, [r7, #0]
    3c40:	687a      	ldr	r2, [r7, #4]
    3c42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    3c44:	687b      	ldr	r3, [r7, #4]
    3c46:	681b      	ldr	r3, [r3, #0]
    3c48:	1c5a      	adds	r2, r3, #1
    3c4a:	687b      	ldr	r3, [r7, #4]
    3c4c:	601a      	str	r2, [r3, #0]
}
    3c4e:	3714      	adds	r7, #20
    3c50:	46bd      	mov	sp, r7
    3c52:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c56:	4770      	bx	lr

00003c58 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    3c58:	b480      	push	{r7}
    3c5a:	b085      	sub	sp, #20
    3c5c:	af00      	add	r7, sp, #0
    3c5e:	6078      	str	r0, [r7, #4]
    xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    3c60:	687b      	ldr	r3, [r7, #4]
    3c62:	685b      	ldr	r3, [r3, #4]
    3c64:	687a      	ldr	r2, [r7, #4]
    3c66:	6892      	ldr	r2, [r2, #8]
    3c68:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    3c6a:	687b      	ldr	r3, [r7, #4]
    3c6c:	689b      	ldr	r3, [r3, #8]
    3c6e:	687a      	ldr	r2, [r7, #4]
    3c70:	6852      	ldr	r2, [r2, #4]
    3c72:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    3c74:	687b      	ldr	r3, [r7, #4]
    3c76:	691b      	ldr	r3, [r3, #16]
    3c78:	60fb      	str	r3, [r7, #12]
	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    3c7a:	68fb      	ldr	r3, [r7, #12]
    3c7c:	685a      	ldr	r2, [r3, #4]
    3c7e:	687b      	ldr	r3, [r7, #4]
    3c80:	429a      	cmp	r2, r3
    3c82:	d103      	bne.n	3c8c <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    3c84:	687b      	ldr	r3, [r7, #4]
    3c86:	689a      	ldr	r2, [r3, #8]
    3c88:	68fb      	ldr	r3, [r7, #12]
    3c8a:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    3c8c:	687b      	ldr	r3, [r7, #4]
    3c8e:	2200      	movs	r2, #0
    3c90:	611a      	str	r2, [r3, #16]
	(pxList->uxNumberOfItems)--;
    3c92:	68fb      	ldr	r3, [r7, #12]
    3c94:	681b      	ldr	r3, [r3, #0]
    3c96:	1e5a      	subs	r2, r3, #1
    3c98:	68fb      	ldr	r3, [r7, #12]
    3c9a:	601a      	str	r2, [r3, #0]
}
    3c9c:	3714      	adds	r7, #20
    3c9e:	46bd      	mov	sp, r7
    3ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ca4:	4770      	bx	lr
    3ca6:	bf00      	nop

00003ca8 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    3ca8:	b580      	push	{r7, lr}
    3caa:	b084      	sub	sp, #16
    3cac:	af00      	add	r7, sp, #0
    3cae:	6078      	str	r0, [r7, #4]
    3cb0:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    3cb2:	2301      	movs	r3, #1
    3cb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    3cb6:	683b      	ldr	r3, [r7, #0]
    3cb8:	2b01      	cmp	r3, #1
    3cba:	d00b      	beq.n	3cd4 <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3cbc:	687b      	ldr	r3, [r7, #4]
    3cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3cc0:	2b00      	cmp	r3, #0
    3cc2:	d001      	beq.n	3cc8 <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    3cc4:	2300      	movs	r3, #0
    3cc6:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3cc8:	687b      	ldr	r3, [r7, #4]
    3cca:	691b      	ldr	r3, [r3, #16]
    3ccc:	2b00      	cmp	r3, #0
    3cce:	d001      	beq.n	3cd4 <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    3cd0:	2300      	movs	r3, #0
    3cd2:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    3cd4:	68fb      	ldr	r3, [r7, #12]
    3cd6:	2b01      	cmp	r3, #1
    3cd8:	d12f      	bne.n	3d3a <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    3cda:	687b      	ldr	r3, [r7, #4]
    3cdc:	681a      	ldr	r2, [r3, #0]
    3cde:	687b      	ldr	r3, [r7, #4]
    3ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3ce2:	6879      	ldr	r1, [r7, #4]
    3ce4:	6c09      	ldr	r1, [r1, #64]	; 0x40
    3ce6:	fb01 f303 	mul.w	r3, r1, r3
    3cea:	441a      	add	r2, r3
    3cec:	687b      	ldr	r3, [r7, #4]
    3cee:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    3cf0:	687b      	ldr	r3, [r7, #4]
    3cf2:	2200      	movs	r2, #0
    3cf4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    3cf6:	687b      	ldr	r3, [r7, #4]
    3cf8:	681a      	ldr	r2, [r3, #0]
    3cfa:	687b      	ldr	r3, [r7, #4]
    3cfc:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    3cfe:	687b      	ldr	r3, [r7, #4]
    3d00:	681a      	ldr	r2, [r3, #0]
    3d02:	687b      	ldr	r3, [r7, #4]
    3d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3d06:	3b01      	subs	r3, #1
    3d08:	6879      	ldr	r1, [r7, #4]
    3d0a:	6c09      	ldr	r1, [r1, #64]	; 0x40
    3d0c:	fb01 f303 	mul.w	r3, r1, r3
    3d10:	441a      	add	r2, r3
    3d12:	687b      	ldr	r3, [r7, #4]
    3d14:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    3d16:	687b      	ldr	r3, [r7, #4]
    3d18:	f04f 32ff 	mov.w	r2, #4294967295
    3d1c:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    3d1e:	687b      	ldr	r3, [r7, #4]
    3d20:	f04f 32ff 	mov.w	r2, #4294967295
    3d24:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    3d26:	687b      	ldr	r3, [r7, #4]
    3d28:	3310      	adds	r3, #16
    3d2a:	4618      	mov	r0, r3
    3d2c:	f7ff ff08 	bl	3b40 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    3d30:	687b      	ldr	r3, [r7, #4]
    3d32:	3324      	adds	r3, #36	; 0x24
    3d34:	4618      	mov	r0, r3
    3d36:	f7ff ff03 	bl	3b40 <vListInitialise>
	}

	return xReturn;
    3d3a:	68fb      	ldr	r3, [r7, #12]
}
    3d3c:	4618      	mov	r0, r3
    3d3e:	3710      	adds	r7, #16
    3d40:	46bd      	mov	sp, r7
    3d42:	bd80      	pop	{r7, pc}

00003d44 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    3d44:	b580      	push	{r7, lr}
    3d46:	b088      	sub	sp, #32
    3d48:	af00      	add	r7, sp, #0
    3d4a:	60f8      	str	r0, [r7, #12]
    3d4c:	60b9      	str	r1, [r7, #8]
    3d4e:	4613      	mov	r3, r2
    3d50:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    3d52:	2300      	movs	r3, #0
    3d54:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    3d56:	68fb      	ldr	r3, [r7, #12]
    3d58:	2b00      	cmp	r3, #0
    3d5a:	d026      	beq.n	3daa <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    3d5c:	204c      	movs	r0, #76	; 0x4c
    3d5e:	f001 fda7 	bl	58b0 <pvPortMalloc>
    3d62:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    3d64:	69bb      	ldr	r3, [r7, #24]
    3d66:	2b00      	cmp	r3, #0
    3d68:	d01f      	beq.n	3daa <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    3d6a:	68fb      	ldr	r3, [r7, #12]
    3d6c:	68ba      	ldr	r2, [r7, #8]
    3d6e:	fb02 f303 	mul.w	r3, r2, r3
    3d72:	3301      	adds	r3, #1
    3d74:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    3d76:	6978      	ldr	r0, [r7, #20]
    3d78:	f001 fd9a 	bl	58b0 <pvPortMalloc>
    3d7c:	4602      	mov	r2, r0
    3d7e:	69bb      	ldr	r3, [r7, #24]
    3d80:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    3d82:	69bb      	ldr	r3, [r7, #24]
    3d84:	681b      	ldr	r3, [r3, #0]
    3d86:	2b00      	cmp	r3, #0
    3d88:	d00c      	beq.n	3da4 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    3d8a:	69bb      	ldr	r3, [r7, #24]
    3d8c:	68fa      	ldr	r2, [r7, #12]
    3d8e:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    3d90:	69bb      	ldr	r3, [r7, #24]
    3d92:	68ba      	ldr	r2, [r7, #8]
    3d94:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    3d96:	69b8      	ldr	r0, [r7, #24]
    3d98:	2101      	movs	r1, #1
    3d9a:	f7ff ff85 	bl	3ca8 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    3d9e:	69bb      	ldr	r3, [r7, #24]
    3da0:	61fb      	str	r3, [r7, #28]
    3da2:	e002      	b.n	3daa <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    3da4:	69b8      	ldr	r0, [r7, #24]
    3da6:	f001 fe47 	bl	5a38 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    3daa:	69fb      	ldr	r3, [r7, #28]
}
    3dac:	4618      	mov	r0, r3
    3dae:	3720      	adds	r7, #32
    3db0:	46bd      	mov	sp, r7
    3db2:	bd80      	pop	{r7, pc}

00003db4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    3db4:	b580      	push	{r7, lr}
    3db6:	b084      	sub	sp, #16
    3db8:	af00      	add	r7, sp, #0
    3dba:	4603      	mov	r3, r0
    3dbc:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    3dbe:	204c      	movs	r0, #76	; 0x4c
    3dc0:	f001 fd76 	bl	58b0 <pvPortMalloc>
    3dc4:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    3dc6:	68fb      	ldr	r3, [r7, #12]
    3dc8:	2b00      	cmp	r3, #0
    3dca:	d02c      	beq.n	3e26 <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    3dcc:	68fb      	ldr	r3, [r7, #12]
    3dce:	2200      	movs	r2, #0
    3dd0:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    3dd2:	68fb      	ldr	r3, [r7, #12]
    3dd4:	2200      	movs	r2, #0
    3dd6:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    3dd8:	68fb      	ldr	r3, [r7, #12]
    3dda:	2200      	movs	r2, #0
    3ddc:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    3dde:	68fb      	ldr	r3, [r7, #12]
    3de0:	2200      	movs	r2, #0
    3de2:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    3de4:	68fb      	ldr	r3, [r7, #12]
    3de6:	2200      	movs	r2, #0
    3de8:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    3dea:	68fb      	ldr	r3, [r7, #12]
    3dec:	2201      	movs	r2, #1
    3dee:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    3df0:	68fb      	ldr	r3, [r7, #12]
    3df2:	2200      	movs	r2, #0
    3df4:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    3df6:	68fb      	ldr	r3, [r7, #12]
    3df8:	f04f 32ff 	mov.w	r2, #4294967295
    3dfc:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    3dfe:	68fb      	ldr	r3, [r7, #12]
    3e00:	f04f 32ff 	mov.w	r2, #4294967295
    3e04:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    3e06:	68fb      	ldr	r3, [r7, #12]
    3e08:	3310      	adds	r3, #16
    3e0a:	4618      	mov	r0, r3
    3e0c:	f7ff fe98 	bl	3b40 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    3e10:	68fb      	ldr	r3, [r7, #12]
    3e12:	3324      	adds	r3, #36	; 0x24
    3e14:	4618      	mov	r0, r3
    3e16:	f7ff fe93 	bl	3b40 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    3e1a:	68f8      	ldr	r0, [r7, #12]
    3e1c:	2100      	movs	r1, #0
    3e1e:	2200      	movs	r2, #0
    3e20:	2300      	movs	r3, #0
    3e22:	f000 f81d 	bl	3e60 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    3e26:	68fb      	ldr	r3, [r7, #12]
	}
    3e28:	4618      	mov	r0, r3
    3e2a:	3710      	adds	r7, #16
    3e2c:	46bd      	mov	sp, r7
    3e2e:	bd80      	pop	{r7, pc}

00003e30 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    3e30:	b580      	push	{r7, lr}
    3e32:	b084      	sub	sp, #16
    3e34:	af00      	add	r7, sp, #0
    3e36:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    3e38:	f001 fcc0 	bl	57bc <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    3e3c:	687b      	ldr	r3, [r7, #4]
    3e3e:	681b      	ldr	r3, [r3, #0]
    3e40:	2b00      	cmp	r3, #0
    3e42:	d103      	bne.n	3e4c <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    3e44:	687b      	ldr	r3, [r7, #4]
    3e46:	685b      	ldr	r3, [r3, #4]
    3e48:	60fb      	str	r3, [r7, #12]
    3e4a:	e001      	b.n	3e50 <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    3e4c:	2300      	movs	r3, #0
    3e4e:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    3e50:	f001 fcca 	bl	57e8 <vPortExitCritical>
		
		return pxReturn;
    3e54:	68fb      	ldr	r3, [r7, #12]
	}
    3e56:	4618      	mov	r0, r3
    3e58:	3710      	adds	r7, #16
    3e5a:	46bd      	mov	sp, r7
    3e5c:	bd80      	pop	{r7, pc}
    3e5e:	bf00      	nop

00003e60 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    3e60:	b580      	push	{r7, lr}
    3e62:	b088      	sub	sp, #32
    3e64:	af00      	add	r7, sp, #0
    3e66:	60f8      	str	r0, [r7, #12]
    3e68:	60b9      	str	r1, [r7, #8]
    3e6a:	607a      	str	r2, [r7, #4]
    3e6c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    3e6e:	2300      	movs	r3, #0
    3e70:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    3e72:	f001 fca3 	bl	57bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    3e76:	68fb      	ldr	r3, [r7, #12]
    3e78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3e7a:	68fb      	ldr	r3, [r7, #12]
    3e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3e7e:	429a      	cmp	r2, r3
    3e80:	d216      	bcs.n	3eb0 <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3e82:	68f8      	ldr	r0, [r7, #12]
    3e84:	68b9      	ldr	r1, [r7, #8]
    3e86:	683a      	ldr	r2, [r7, #0]
    3e88:	f000 f9d6 	bl	4238 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3e8c:	68fb      	ldr	r3, [r7, #12]
    3e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3e90:	2b00      	cmp	r3, #0
    3e92:	d009      	beq.n	3ea8 <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    3e94:	68fb      	ldr	r3, [r7, #12]
    3e96:	3324      	adds	r3, #36	; 0x24
    3e98:	4618      	mov	r0, r3
    3e9a:	f001 f905 	bl	50a8 <xTaskRemoveFromEventList>
    3e9e:	4603      	mov	r3, r0
    3ea0:	2b01      	cmp	r3, #1
    3ea2:	d101      	bne.n	3ea8 <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    3ea4:	f001 fc7c 	bl	57a0 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    3ea8:	f001 fc9e 	bl	57e8 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    3eac:	2301      	movs	r3, #1
    3eae:	e059      	b.n	3f64 <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    3eb0:	687b      	ldr	r3, [r7, #4]
    3eb2:	2b00      	cmp	r3, #0
    3eb4:	d103      	bne.n	3ebe <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    3eb6:	f001 fc97 	bl	57e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    3eba:	2300      	movs	r3, #0
    3ebc:	e052      	b.n	3f64 <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    3ebe:	69fb      	ldr	r3, [r7, #28]
    3ec0:	2b00      	cmp	r3, #0
    3ec2:	d106      	bne.n	3ed2 <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    3ec4:	f107 0314 	add.w	r3, r7, #20
    3ec8:	4618      	mov	r0, r3
    3eca:	f001 f945 	bl	5158 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    3ece:	2301      	movs	r3, #1
    3ed0:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    3ed2:	f001 fc89 	bl	57e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3ed6:	f000 fe93 	bl	4c00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    3eda:	f001 fc6f 	bl	57bc <vPortEnterCritical>
    3ede:	68fb      	ldr	r3, [r7, #12]
    3ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
    3ee6:	d102      	bne.n	3eee <xQueueGenericSend+0x8e>
    3ee8:	68fb      	ldr	r3, [r7, #12]
    3eea:	2200      	movs	r2, #0
    3eec:	645a      	str	r2, [r3, #68]	; 0x44
    3eee:	68fb      	ldr	r3, [r7, #12]
    3ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
    3ef6:	d102      	bne.n	3efe <xQueueGenericSend+0x9e>
    3ef8:	68fb      	ldr	r3, [r7, #12]
    3efa:	2200      	movs	r2, #0
    3efc:	649a      	str	r2, [r3, #72]	; 0x48
    3efe:	f001 fc73 	bl	57e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3f02:	f107 0214 	add.w	r2, r7, #20
    3f06:	1d3b      	adds	r3, r7, #4
    3f08:	4610      	mov	r0, r2
    3f0a:	4619      	mov	r1, r3
    3f0c:	f001 f93c 	bl	5188 <xTaskCheckForTimeOut>
    3f10:	4603      	mov	r3, r0
    3f12:	2b00      	cmp	r3, #0
    3f14:	d11e      	bne.n	3f54 <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    3f16:	68f8      	ldr	r0, [r7, #12]
    3f18:	f000 fa86 	bl	4428 <prvIsQueueFull>
    3f1c:	4603      	mov	r3, r0
    3f1e:	2b00      	cmp	r3, #0
    3f20:	d012      	beq.n	3f48 <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    3f22:	68fb      	ldr	r3, [r7, #12]
    3f24:	f103 0210 	add.w	r2, r3, #16
    3f28:	687b      	ldr	r3, [r7, #4]
    3f2a:	4610      	mov	r0, r2
    3f2c:	4619      	mov	r1, r3
    3f2e:	f001 f883 	bl	5038 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    3f32:	68f8      	ldr	r0, [r7, #12]
    3f34:	f000 fa02 	bl	433c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    3f38:	f000 fe74 	bl	4c24 <xTaskResumeAll>
    3f3c:	4603      	mov	r3, r0
    3f3e:	2b00      	cmp	r3, #0
    3f40:	d10f      	bne.n	3f62 <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    3f42:	f001 fc2d 	bl	57a0 <vPortYieldFromISR>
    3f46:	e00c      	b.n	3f62 <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    3f48:	68f8      	ldr	r0, [r7, #12]
    3f4a:	f000 f9f7 	bl	433c <prvUnlockQueue>
				( void ) xTaskResumeAll();
    3f4e:	f000 fe69 	bl	4c24 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    3f52:	e78e      	b.n	3e72 <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    3f54:	68f8      	ldr	r0, [r7, #12]
    3f56:	f000 f9f1 	bl	433c <prvUnlockQueue>
			( void ) xTaskResumeAll();
    3f5a:	f000 fe63 	bl	4c24 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    3f5e:	2300      	movs	r3, #0
    3f60:	e000      	b.n	3f64 <xQueueGenericSend+0x104>
		}
	}
    3f62:	e786      	b.n	3e72 <xQueueGenericSend+0x12>
}
    3f64:	4618      	mov	r0, r3
    3f66:	3720      	adds	r7, #32
    3f68:	46bd      	mov	sp, r7
    3f6a:	bd80      	pop	{r7, pc}

00003f6c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    3f6c:	b580      	push	{r7, lr}
    3f6e:	b086      	sub	sp, #24
    3f70:	af00      	add	r7, sp, #0
    3f72:	60f8      	str	r0, [r7, #12]
    3f74:	60b9      	str	r1, [r7, #8]
    3f76:	607a      	str	r2, [r7, #4]
    3f78:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3f7a:	2300      	movs	r3, #0
    3f7c:	613b      	str	r3, [r7, #16]
    3f7e:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3f82:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    3f86:	68fb      	ldr	r3, [r7, #12]
    3f88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3f8a:	68fb      	ldr	r3, [r7, #12]
    3f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3f8e:	429a      	cmp	r2, r3
    3f90:	d221      	bcs.n	3fd6 <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3f92:	68f8      	ldr	r0, [r7, #12]
    3f94:	68b9      	ldr	r1, [r7, #8]
    3f96:	683a      	ldr	r2, [r7, #0]
    3f98:	f000 f94e 	bl	4238 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    3f9c:	68fb      	ldr	r3, [r7, #12]
    3f9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
    3fa4:	d10f      	bne.n	3fc6 <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3fa6:	68fb      	ldr	r3, [r7, #12]
    3fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3faa:	2b00      	cmp	r3, #0
    3fac:	d010      	beq.n	3fd0 <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3fae:	68fb      	ldr	r3, [r7, #12]
    3fb0:	3324      	adds	r3, #36	; 0x24
    3fb2:	4618      	mov	r0, r3
    3fb4:	f001 f878 	bl	50a8 <xTaskRemoveFromEventList>
    3fb8:	4603      	mov	r3, r0
    3fba:	2b00      	cmp	r3, #0
    3fbc:	d008      	beq.n	3fd0 <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    3fbe:	687b      	ldr	r3, [r7, #4]
    3fc0:	2201      	movs	r2, #1
    3fc2:	601a      	str	r2, [r3, #0]
    3fc4:	e004      	b.n	3fd0 <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    3fc6:	68fb      	ldr	r3, [r7, #12]
    3fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3fca:	1c5a      	adds	r2, r3, #1
    3fcc:	68fb      	ldr	r3, [r7, #12]
    3fce:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    3fd0:	2301      	movs	r3, #1
    3fd2:	617b      	str	r3, [r7, #20]
    3fd4:	e001      	b.n	3fda <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    3fd6:	2300      	movs	r3, #0
    3fd8:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3fda:	f04f 0000 	mov.w	r0, #0
    3fde:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    3fe2:	697b      	ldr	r3, [r7, #20]
}
    3fe4:	4618      	mov	r0, r3
    3fe6:	3718      	adds	r7, #24
    3fe8:	46bd      	mov	sp, r7
    3fea:	bd80      	pop	{r7, pc}

00003fec <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    3fec:	b580      	push	{r7, lr}
    3fee:	b088      	sub	sp, #32
    3ff0:	af00      	add	r7, sp, #0
    3ff2:	60f8      	str	r0, [r7, #12]
    3ff4:	60b9      	str	r1, [r7, #8]
    3ff6:	607a      	str	r2, [r7, #4]
    3ff8:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    3ffa:	2300      	movs	r3, #0
    3ffc:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    3ffe:	f001 fbdd 	bl	57bc <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    4002:	68fb      	ldr	r3, [r7, #12]
    4004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4006:	2b00      	cmp	r3, #0
    4008:	d03b      	beq.n	4082 <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    400a:	68fb      	ldr	r3, [r7, #12]
    400c:	68db      	ldr	r3, [r3, #12]
    400e:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    4010:	68f8      	ldr	r0, [r7, #12]
    4012:	68b9      	ldr	r1, [r7, #8]
    4014:	f000 f96c 	bl	42f0 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    4018:	683b      	ldr	r3, [r7, #0]
    401a:	2b00      	cmp	r3, #0
    401c:	d11c      	bne.n	4058 <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    401e:	68fb      	ldr	r3, [r7, #12]
    4020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4022:	1e5a      	subs	r2, r3, #1
    4024:	68fb      	ldr	r3, [r7, #12]
    4026:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4028:	68fb      	ldr	r3, [r7, #12]
    402a:	681b      	ldr	r3, [r3, #0]
    402c:	2b00      	cmp	r3, #0
    402e:	d104      	bne.n	403a <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    4030:	f001 fa5c 	bl	54ec <xTaskGetCurrentTaskHandle>
    4034:	4602      	mov	r2, r0
    4036:	68fb      	ldr	r3, [r7, #12]
    4038:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    403a:	68fb      	ldr	r3, [r7, #12]
    403c:	691b      	ldr	r3, [r3, #16]
    403e:	2b00      	cmp	r3, #0
    4040:	d01b      	beq.n	407a <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    4042:	68fb      	ldr	r3, [r7, #12]
    4044:	3310      	adds	r3, #16
    4046:	4618      	mov	r0, r3
    4048:	f001 f82e 	bl	50a8 <xTaskRemoveFromEventList>
    404c:	4603      	mov	r3, r0
    404e:	2b01      	cmp	r3, #1
    4050:	d113      	bne.n	407a <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    4052:	f001 fba5 	bl	57a0 <vPortYieldFromISR>
    4056:	e010      	b.n	407a <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    4058:	68fb      	ldr	r3, [r7, #12]
    405a:	69ba      	ldr	r2, [r7, #24]
    405c:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    405e:	68fb      	ldr	r3, [r7, #12]
    4060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4062:	2b00      	cmp	r3, #0
    4064:	d009      	beq.n	407a <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4066:	68fb      	ldr	r3, [r7, #12]
    4068:	3324      	adds	r3, #36	; 0x24
    406a:	4618      	mov	r0, r3
    406c:	f001 f81c 	bl	50a8 <xTaskRemoveFromEventList>
    4070:	4603      	mov	r3, r0
    4072:	2b00      	cmp	r3, #0
    4074:	d001      	beq.n	407a <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    4076:	f001 fb93 	bl	57a0 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    407a:	f001 fbb5 	bl	57e8 <vPortExitCritical>
				return pdPASS;
    407e:	2301      	movs	r3, #1
    4080:	e066      	b.n	4150 <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    4082:	687b      	ldr	r3, [r7, #4]
    4084:	2b00      	cmp	r3, #0
    4086:	d103      	bne.n	4090 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    4088:	f001 fbae 	bl	57e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    408c:	2300      	movs	r3, #0
    408e:	e05f      	b.n	4150 <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    4090:	69fb      	ldr	r3, [r7, #28]
    4092:	2b00      	cmp	r3, #0
    4094:	d106      	bne.n	40a4 <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    4096:	f107 0310 	add.w	r3, r7, #16
    409a:	4618      	mov	r0, r3
    409c:	f001 f85c 	bl	5158 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    40a0:	2301      	movs	r3, #1
    40a2:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    40a4:	f001 fba0 	bl	57e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    40a8:	f000 fdaa 	bl	4c00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    40ac:	f001 fb86 	bl	57bc <vPortEnterCritical>
    40b0:	68fb      	ldr	r3, [r7, #12]
    40b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    40b4:	f1b3 3fff 	cmp.w	r3, #4294967295
    40b8:	d102      	bne.n	40c0 <xQueueGenericReceive+0xd4>
    40ba:	68fb      	ldr	r3, [r7, #12]
    40bc:	2200      	movs	r2, #0
    40be:	645a      	str	r2, [r3, #68]	; 0x44
    40c0:	68fb      	ldr	r3, [r7, #12]
    40c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    40c4:	f1b3 3fff 	cmp.w	r3, #4294967295
    40c8:	d102      	bne.n	40d0 <xQueueGenericReceive+0xe4>
    40ca:	68fb      	ldr	r3, [r7, #12]
    40cc:	2200      	movs	r2, #0
    40ce:	649a      	str	r2, [r3, #72]	; 0x48
    40d0:	f001 fb8a 	bl	57e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    40d4:	f107 0210 	add.w	r2, r7, #16
    40d8:	1d3b      	adds	r3, r7, #4
    40da:	4610      	mov	r0, r2
    40dc:	4619      	mov	r1, r3
    40de:	f001 f853 	bl	5188 <xTaskCheckForTimeOut>
    40e2:	4603      	mov	r3, r0
    40e4:	2b00      	cmp	r3, #0
    40e6:	d12b      	bne.n	4140 <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    40e8:	68f8      	ldr	r0, [r7, #12]
    40ea:	f000 f973 	bl	43d4 <prvIsQueueEmpty>
    40ee:	4603      	mov	r3, r0
    40f0:	2b00      	cmp	r3, #0
    40f2:	d01f      	beq.n	4134 <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    40f4:	68fb      	ldr	r3, [r7, #12]
    40f6:	681b      	ldr	r3, [r3, #0]
    40f8:	2b00      	cmp	r3, #0
    40fa:	d108      	bne.n	410e <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    40fc:	f001 fb5e 	bl	57bc <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    4100:	68fb      	ldr	r3, [r7, #12]
    4102:	685b      	ldr	r3, [r3, #4]
    4104:	4618      	mov	r0, r3
    4106:	f001 fa01 	bl	550c <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    410a:	f001 fb6d 	bl	57e8 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    410e:	68fb      	ldr	r3, [r7, #12]
    4110:	f103 0224 	add.w	r2, r3, #36	; 0x24
    4114:	687b      	ldr	r3, [r7, #4]
    4116:	4610      	mov	r0, r2
    4118:	4619      	mov	r1, r3
    411a:	f000 ff8d 	bl	5038 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    411e:	68f8      	ldr	r0, [r7, #12]
    4120:	f000 f90c 	bl	433c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    4124:	f000 fd7e 	bl	4c24 <xTaskResumeAll>
    4128:	4603      	mov	r3, r0
    412a:	2b00      	cmp	r3, #0
    412c:	d10f      	bne.n	414e <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    412e:	f001 fb37 	bl	57a0 <vPortYieldFromISR>
    4132:	e00c      	b.n	414e <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    4134:	68f8      	ldr	r0, [r7, #12]
    4136:	f000 f901 	bl	433c <prvUnlockQueue>
				( void ) xTaskResumeAll();
    413a:	f000 fd73 	bl	4c24 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    413e:	e75e      	b.n	3ffe <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    4140:	68f8      	ldr	r0, [r7, #12]
    4142:	f000 f8fb 	bl	433c <prvUnlockQueue>
			( void ) xTaskResumeAll();
    4146:	f000 fd6d 	bl	4c24 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    414a:	2300      	movs	r3, #0
    414c:	e000      	b.n	4150 <xQueueGenericReceive+0x164>
		}
	}
    414e:	e756      	b.n	3ffe <xQueueGenericReceive+0x12>
}
    4150:	4618      	mov	r0, r3
    4152:	3720      	adds	r7, #32
    4154:	46bd      	mov	sp, r7
    4156:	bd80      	pop	{r7, pc}

00004158 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    4158:	b580      	push	{r7, lr}
    415a:	b086      	sub	sp, #24
    415c:	af00      	add	r7, sp, #0
    415e:	60f8      	str	r0, [r7, #12]
    4160:	60b9      	str	r1, [r7, #8]
    4162:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4164:	2300      	movs	r3, #0
    4166:	613b      	str	r3, [r7, #16]
    4168:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    416c:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    4170:	68fb      	ldr	r3, [r7, #12]
    4172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4174:	2b00      	cmp	r3, #0
    4176:	d025      	beq.n	41c4 <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    4178:	68f8      	ldr	r0, [r7, #12]
    417a:	68b9      	ldr	r1, [r7, #8]
    417c:	f000 f8b8 	bl	42f0 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    4180:	68fb      	ldr	r3, [r7, #12]
    4182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4184:	1e5a      	subs	r2, r3, #1
    4186:	68fb      	ldr	r3, [r7, #12]
    4188:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    418a:	68fb      	ldr	r3, [r7, #12]
    418c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    418e:	f1b3 3fff 	cmp.w	r3, #4294967295
    4192:	d10f      	bne.n	41b4 <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4194:	68fb      	ldr	r3, [r7, #12]
    4196:	691b      	ldr	r3, [r3, #16]
    4198:	2b00      	cmp	r3, #0
    419a:	d010      	beq.n	41be <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    419c:	68fb      	ldr	r3, [r7, #12]
    419e:	3310      	adds	r3, #16
    41a0:	4618      	mov	r0, r3
    41a2:	f000 ff81 	bl	50a8 <xTaskRemoveFromEventList>
    41a6:	4603      	mov	r3, r0
    41a8:	2b00      	cmp	r3, #0
    41aa:	d008      	beq.n	41be <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    41ac:	687b      	ldr	r3, [r7, #4]
    41ae:	2201      	movs	r2, #1
    41b0:	601a      	str	r2, [r3, #0]
    41b2:	e004      	b.n	41be <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    41b4:	68fb      	ldr	r3, [r7, #12]
    41b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    41b8:	1c5a      	adds	r2, r3, #1
    41ba:	68fb      	ldr	r3, [r7, #12]
    41bc:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    41be:	2301      	movs	r3, #1
    41c0:	617b      	str	r3, [r7, #20]
    41c2:	e001      	b.n	41c8 <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    41c4:	2300      	movs	r3, #0
    41c6:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    41c8:	f04f 0000 	mov.w	r0, #0
    41cc:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    41d0:	697b      	ldr	r3, [r7, #20]
}
    41d2:	4618      	mov	r0, r3
    41d4:	3718      	adds	r7, #24
    41d6:	46bd      	mov	sp, r7
    41d8:	bd80      	pop	{r7, pc}
    41da:	bf00      	nop

000041dc <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    41dc:	b580      	push	{r7, lr}
    41de:	b084      	sub	sp, #16
    41e0:	af00      	add	r7, sp, #0
    41e2:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    41e4:	f001 faea 	bl	57bc <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    41e8:	687b      	ldr	r3, [r7, #4]
    41ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    41ec:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    41ee:	f001 fafb 	bl	57e8 <vPortExitCritical>

	return uxReturn;
    41f2:	68fb      	ldr	r3, [r7, #12]
}
    41f4:	4618      	mov	r0, r3
    41f6:	3710      	adds	r7, #16
    41f8:	46bd      	mov	sp, r7
    41fa:	bd80      	pop	{r7, pc}

000041fc <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    41fc:	b480      	push	{r7}
    41fe:	b085      	sub	sp, #20
    4200:	af00      	add	r7, sp, #0
    4202:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    4204:	687b      	ldr	r3, [r7, #4]
    4206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4208:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    420a:	68fb      	ldr	r3, [r7, #12]
}
    420c:	4618      	mov	r0, r3
    420e:	3714      	adds	r7, #20
    4210:	46bd      	mov	sp, r7
    4212:	f85d 7b04 	ldr.w	r7, [sp], #4
    4216:	4770      	bx	lr

00004218 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    4218:	b580      	push	{r7, lr}
    421a:	b082      	sub	sp, #8
    421c:	af00      	add	r7, sp, #0
    421e:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    4220:	687b      	ldr	r3, [r7, #4]
    4222:	681b      	ldr	r3, [r3, #0]
    4224:	4618      	mov	r0, r3
    4226:	f001 fc07 	bl	5a38 <vPortFree>
	vPortFree( pxQueue );
    422a:	6878      	ldr	r0, [r7, #4]
    422c:	f001 fc04 	bl	5a38 <vPortFree>
}
    4230:	3708      	adds	r7, #8
    4232:	46bd      	mov	sp, r7
    4234:	bd80      	pop	{r7, pc}
    4236:	bf00      	nop

00004238 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    4238:	b580      	push	{r7, lr}
    423a:	b084      	sub	sp, #16
    423c:	af00      	add	r7, sp, #0
    423e:	60f8      	str	r0, [r7, #12]
    4240:	60b9      	str	r1, [r7, #8]
    4242:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    4244:	68fb      	ldr	r3, [r7, #12]
    4246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4248:	2b00      	cmp	r3, #0
    424a:	d10c      	bne.n	4266 <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    424c:	68fb      	ldr	r3, [r7, #12]
    424e:	681b      	ldr	r3, [r3, #0]
    4250:	2b00      	cmp	r3, #0
    4252:	d145      	bne.n	42e0 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    4254:	68fb      	ldr	r3, [r7, #12]
    4256:	685b      	ldr	r3, [r3, #4]
    4258:	4618      	mov	r0, r3
    425a:	f001 f9bb 	bl	55d4 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    425e:	68fb      	ldr	r3, [r7, #12]
    4260:	2200      	movs	r2, #0
    4262:	605a      	str	r2, [r3, #4]
    4264:	e03c      	b.n	42e0 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    4266:	687b      	ldr	r3, [r7, #4]
    4268:	2b00      	cmp	r3, #0
    426a:	d11a      	bne.n	42a2 <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    426c:	68fb      	ldr	r3, [r7, #12]
    426e:	689a      	ldr	r2, [r3, #8]
    4270:	68fb      	ldr	r3, [r7, #12]
    4272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4274:	4610      	mov	r0, r2
    4276:	68b9      	ldr	r1, [r7, #8]
    4278:	461a      	mov	r2, r3
    427a:	f014 f9cd 	bl	18618 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    427e:	68fb      	ldr	r3, [r7, #12]
    4280:	689a      	ldr	r2, [r3, #8]
    4282:	68fb      	ldr	r3, [r7, #12]
    4284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4286:	441a      	add	r2, r3
    4288:	68fb      	ldr	r3, [r7, #12]
    428a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    428c:	68fb      	ldr	r3, [r7, #12]
    428e:	689a      	ldr	r2, [r3, #8]
    4290:	68fb      	ldr	r3, [r7, #12]
    4292:	685b      	ldr	r3, [r3, #4]
    4294:	429a      	cmp	r2, r3
    4296:	d323      	bcc.n	42e0 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    4298:	68fb      	ldr	r3, [r7, #12]
    429a:	681a      	ldr	r2, [r3, #0]
    429c:	68fb      	ldr	r3, [r7, #12]
    429e:	609a      	str	r2, [r3, #8]
    42a0:	e01e      	b.n	42e0 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    42a2:	68fb      	ldr	r3, [r7, #12]
    42a4:	68da      	ldr	r2, [r3, #12]
    42a6:	68fb      	ldr	r3, [r7, #12]
    42a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    42aa:	4610      	mov	r0, r2
    42ac:	68b9      	ldr	r1, [r7, #8]
    42ae:	461a      	mov	r2, r3
    42b0:	f014 f9b2 	bl	18618 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    42b4:	68fb      	ldr	r3, [r7, #12]
    42b6:	68da      	ldr	r2, [r3, #12]
    42b8:	68fb      	ldr	r3, [r7, #12]
    42ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    42bc:	425b      	negs	r3, r3
    42be:	441a      	add	r2, r3
    42c0:	68fb      	ldr	r3, [r7, #12]
    42c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    42c4:	68fb      	ldr	r3, [r7, #12]
    42c6:	68da      	ldr	r2, [r3, #12]
    42c8:	68fb      	ldr	r3, [r7, #12]
    42ca:	681b      	ldr	r3, [r3, #0]
    42cc:	429a      	cmp	r2, r3
    42ce:	d207      	bcs.n	42e0 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    42d0:	68fb      	ldr	r3, [r7, #12]
    42d2:	685a      	ldr	r2, [r3, #4]
    42d4:	68fb      	ldr	r3, [r7, #12]
    42d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    42d8:	425b      	negs	r3, r3
    42da:	441a      	add	r2, r3
    42dc:	68fb      	ldr	r3, [r7, #12]
    42de:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    42e0:	68fb      	ldr	r3, [r7, #12]
    42e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    42e4:	1c5a      	adds	r2, r3, #1
    42e6:	68fb      	ldr	r3, [r7, #12]
    42e8:	639a      	str	r2, [r3, #56]	; 0x38
}
    42ea:	3710      	adds	r7, #16
    42ec:	46bd      	mov	sp, r7
    42ee:	bd80      	pop	{r7, pc}

000042f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    42f0:	b580      	push	{r7, lr}
    42f2:	b082      	sub	sp, #8
    42f4:	af00      	add	r7, sp, #0
    42f6:	6078      	str	r0, [r7, #4]
    42f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    42fa:	687b      	ldr	r3, [r7, #4]
    42fc:	681b      	ldr	r3, [r3, #0]
    42fe:	2b00      	cmp	r3, #0
    4300:	d019      	beq.n	4336 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    4302:	687b      	ldr	r3, [r7, #4]
    4304:	68da      	ldr	r2, [r3, #12]
    4306:	687b      	ldr	r3, [r7, #4]
    4308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    430a:	441a      	add	r2, r3
    430c:	687b      	ldr	r3, [r7, #4]
    430e:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    4310:	687b      	ldr	r3, [r7, #4]
    4312:	68da      	ldr	r2, [r3, #12]
    4314:	687b      	ldr	r3, [r7, #4]
    4316:	685b      	ldr	r3, [r3, #4]
    4318:	429a      	cmp	r2, r3
    431a:	d303      	bcc.n	4324 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    431c:	687b      	ldr	r3, [r7, #4]
    431e:	681a      	ldr	r2, [r3, #0]
    4320:	687b      	ldr	r3, [r7, #4]
    4322:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    4324:	687b      	ldr	r3, [r7, #4]
    4326:	68da      	ldr	r2, [r3, #12]
    4328:	687b      	ldr	r3, [r7, #4]
    432a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    432c:	6838      	ldr	r0, [r7, #0]
    432e:	4611      	mov	r1, r2
    4330:	461a      	mov	r2, r3
    4332:	f014 f971 	bl	18618 <memcpy>
	}
}
    4336:	3708      	adds	r7, #8
    4338:	46bd      	mov	sp, r7
    433a:	bd80      	pop	{r7, pc}

0000433c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    433c:	b580      	push	{r7, lr}
    433e:	b082      	sub	sp, #8
    4340:	af00      	add	r7, sp, #0
    4342:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    4344:	f001 fa3a 	bl	57bc <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    4348:	e014      	b.n	4374 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    434a:	687b      	ldr	r3, [r7, #4]
    434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    434e:	2b00      	cmp	r3, #0
    4350:	d00f      	beq.n	4372 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4352:	687b      	ldr	r3, [r7, #4]
    4354:	3324      	adds	r3, #36	; 0x24
    4356:	4618      	mov	r0, r3
    4358:	f000 fea6 	bl	50a8 <xTaskRemoveFromEventList>
    435c:	4603      	mov	r3, r0
    435e:	2b00      	cmp	r3, #0
    4360:	d001      	beq.n	4366 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    4362:	f000 ff5d 	bl	5220 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    4366:	687b      	ldr	r3, [r7, #4]
    4368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    436a:	1e5a      	subs	r2, r3, #1
    436c:	687b      	ldr	r3, [r7, #4]
    436e:	649a      	str	r2, [r3, #72]	; 0x48
    4370:	e000      	b.n	4374 <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    4372:	e003      	b.n	437c <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    4374:	687b      	ldr	r3, [r7, #4]
    4376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4378:	2b00      	cmp	r3, #0
    437a:	dce6      	bgt.n	434a <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    437c:	687b      	ldr	r3, [r7, #4]
    437e:	f04f 32ff 	mov.w	r2, #4294967295
    4382:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    4384:	f001 fa30 	bl	57e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    4388:	f001 fa18 	bl	57bc <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    438c:	e014      	b.n	43b8 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    438e:	687b      	ldr	r3, [r7, #4]
    4390:	691b      	ldr	r3, [r3, #16]
    4392:	2b00      	cmp	r3, #0
    4394:	d00f      	beq.n	43b6 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    4396:	687b      	ldr	r3, [r7, #4]
    4398:	3310      	adds	r3, #16
    439a:	4618      	mov	r0, r3
    439c:	f000 fe84 	bl	50a8 <xTaskRemoveFromEventList>
    43a0:	4603      	mov	r3, r0
    43a2:	2b00      	cmp	r3, #0
    43a4:	d001      	beq.n	43aa <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    43a6:	f000 ff3b 	bl	5220 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    43aa:	687b      	ldr	r3, [r7, #4]
    43ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    43ae:	1e5a      	subs	r2, r3, #1
    43b0:	687b      	ldr	r3, [r7, #4]
    43b2:	645a      	str	r2, [r3, #68]	; 0x44
    43b4:	e000      	b.n	43b8 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    43b6:	e003      	b.n	43c0 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    43b8:	687b      	ldr	r3, [r7, #4]
    43ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    43bc:	2b00      	cmp	r3, #0
    43be:	dce6      	bgt.n	438e <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    43c0:	687b      	ldr	r3, [r7, #4]
    43c2:	f04f 32ff 	mov.w	r2, #4294967295
    43c6:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    43c8:	f001 fa0e 	bl	57e8 <vPortExitCritical>
}
    43cc:	3708      	adds	r7, #8
    43ce:	46bd      	mov	sp, r7
    43d0:	bd80      	pop	{r7, pc}
    43d2:	bf00      	nop

000043d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    43d4:	b580      	push	{r7, lr}
    43d6:	b084      	sub	sp, #16
    43d8:	af00      	add	r7, sp, #0
    43da:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    43dc:	f001 f9ee 	bl	57bc <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    43e0:	687b      	ldr	r3, [r7, #4]
    43e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    43e4:	2b00      	cmp	r3, #0
    43e6:	bf14      	ite	ne
    43e8:	2300      	movne	r3, #0
    43ea:	2301      	moveq	r3, #1
    43ec:	b2db      	uxtb	r3, r3
    43ee:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    43f0:	f001 f9fa 	bl	57e8 <vPortExitCritical>

	return xReturn;
    43f4:	68fb      	ldr	r3, [r7, #12]
}
    43f6:	4618      	mov	r0, r3
    43f8:	3710      	adds	r7, #16
    43fa:	46bd      	mov	sp, r7
    43fc:	bd80      	pop	{r7, pc}
    43fe:	bf00      	nop

00004400 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    4400:	b480      	push	{r7}
    4402:	b085      	sub	sp, #20
    4404:	af00      	add	r7, sp, #0
    4406:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4408:	687b      	ldr	r3, [r7, #4]
    440a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    440c:	2b00      	cmp	r3, #0
    440e:	bf14      	ite	ne
    4410:	2300      	movne	r3, #0
    4412:	2301      	moveq	r3, #1
    4414:	b2db      	uxtb	r3, r3
    4416:	60fb      	str	r3, [r7, #12]

	return xReturn;
    4418:	68fb      	ldr	r3, [r7, #12]
}
    441a:	4618      	mov	r0, r3
    441c:	3714      	adds	r7, #20
    441e:	46bd      	mov	sp, r7
    4420:	f85d 7b04 	ldr.w	r7, [sp], #4
    4424:	4770      	bx	lr
    4426:	bf00      	nop

00004428 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    4428:	b580      	push	{r7, lr}
    442a:	b084      	sub	sp, #16
    442c:	af00      	add	r7, sp, #0
    442e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    4430:	f001 f9c4 	bl	57bc <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    4434:	687b      	ldr	r3, [r7, #4]
    4436:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4438:	687b      	ldr	r3, [r7, #4]
    443a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    443c:	429a      	cmp	r2, r3
    443e:	bf14      	ite	ne
    4440:	2300      	movne	r3, #0
    4442:	2301      	moveq	r3, #1
    4444:	b2db      	uxtb	r3, r3
    4446:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4448:	f001 f9ce 	bl	57e8 <vPortExitCritical>

	return xReturn;
    444c:	68fb      	ldr	r3, [r7, #12]
}
    444e:	4618      	mov	r0, r3
    4450:	3710      	adds	r7, #16
    4452:	46bd      	mov	sp, r7
    4454:	bd80      	pop	{r7, pc}
    4456:	bf00      	nop

00004458 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    4458:	b480      	push	{r7}
    445a:	b085      	sub	sp, #20
    445c:	af00      	add	r7, sp, #0
    445e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    4460:	687b      	ldr	r3, [r7, #4]
    4462:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4464:	687b      	ldr	r3, [r7, #4]
    4466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4468:	429a      	cmp	r2, r3
    446a:	bf14      	ite	ne
    446c:	2300      	movne	r3, #0
    446e:	2301      	moveq	r3, #1
    4470:	b2db      	uxtb	r3, r3
    4472:	60fb      	str	r3, [r7, #12]

	return xReturn;
    4474:	68fb      	ldr	r3, [r7, #12]
}
    4476:	4618      	mov	r0, r3
    4478:	3714      	adds	r7, #20
    447a:	46bd      	mov	sp, r7
    447c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4480:	4770      	bx	lr
    4482:	bf00      	nop

00004484 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    4484:	b580      	push	{r7, lr}
    4486:	b08a      	sub	sp, #40	; 0x28
    4488:	af02      	add	r7, sp, #8
    448a:	60f8      	str	r0, [r7, #12]
    448c:	60b9      	str	r1, [r7, #8]
    448e:	603b      	str	r3, [r7, #0]
    4490:	4613      	mov	r3, r2
    4492:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    4494:	88fb      	ldrh	r3, [r7, #6]
    4496:	4618      	mov	r0, r3
    4498:	6b39      	ldr	r1, [r7, #48]	; 0x30
    449a:	f000 ffe5 	bl	5468 <prvAllocateTCBAndStack>
    449e:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    44a0:	69bb      	ldr	r3, [r7, #24]
    44a2:	2b00      	cmp	r3, #0
    44a4:	f000 80a1 	beq.w	45ea <xTaskGenericCreate+0x166>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    44a8:	69bb      	ldr	r3, [r7, #24]
    44aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    44ac:	88fb      	ldrh	r3, [r7, #6]
    44ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    44b2:	3b01      	subs	r3, #1
    44b4:	009b      	lsls	r3, r3, #2
    44b6:	4413      	add	r3, r2
    44b8:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    44ba:	697b      	ldr	r3, [r7, #20]
    44bc:	f023 0307 	bic.w	r3, r3, #7
    44c0:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    44c2:	88fb      	ldrh	r3, [r7, #6]
    44c4:	9300      	str	r3, [sp, #0]
    44c6:	69b8      	ldr	r0, [r7, #24]
    44c8:	68b9      	ldr	r1, [r7, #8]
    44ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
    44cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    44ce:	f000 febd 	bl	524c <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    44d2:	6978      	ldr	r0, [r7, #20]
    44d4:	68f9      	ldr	r1, [r7, #12]
    44d6:	683a      	ldr	r2, [r7, #0]
    44d8:	f001 f8f2 	bl	56c0 <pxPortInitialiseStack>
    44dc:	4602      	mov	r2, r0
    44de:	69bb      	ldr	r3, [r7, #24]
    44e0:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    44e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    44e4:	2b00      	cmp	r3, #0
    44e6:	d002      	beq.n	44ee <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    44e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    44ea:	69ba      	ldr	r2, [r7, #24]
    44ec:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    44ee:	f001 f965 	bl	57bc <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    44f2:	f640 234c 	movw	r3, #2636	; 0xa4c
    44f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44fa:	681b      	ldr	r3, [r3, #0]
    44fc:	1c5a      	adds	r2, r3, #1
    44fe:	f640 234c 	movw	r3, #2636	; 0xa4c
    4502:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4506:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    4508:	f640 0348 	movw	r3, #2120	; 0x848
    450c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4510:	681b      	ldr	r3, [r3, #0]
    4512:	2b00      	cmp	r3, #0
    4514:	d10f      	bne.n	4536 <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    4516:	f640 0348 	movw	r3, #2120	; 0x848
    451a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    451e:	69ba      	ldr	r2, [r7, #24]
    4520:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    4522:	f640 234c 	movw	r3, #2636	; 0xa4c
    4526:	f2c2 0300 	movt	r3, #8192	; 0x2000
    452a:	681b      	ldr	r3, [r3, #0]
    452c:	2b01      	cmp	r3, #1
    452e:	d118      	bne.n	4562 <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    4530:	f000 fec2 	bl	52b8 <prvInitialiseTaskLists>
    4534:	e015      	b.n	4562 <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    4536:	f640 235c 	movw	r3, #2652	; 0xa5c
    453a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    453e:	681b      	ldr	r3, [r3, #0]
    4540:	2b00      	cmp	r3, #0
    4542:	d10e      	bne.n	4562 <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    4544:	f640 0348 	movw	r3, #2120	; 0x848
    4548:	f2c2 0300 	movt	r3, #8192	; 0x2000
    454c:	681b      	ldr	r3, [r3, #0]
    454e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4550:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4552:	429a      	cmp	r2, r3
    4554:	d805      	bhi.n	4562 <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    4556:	f640 0348 	movw	r3, #2120	; 0x848
    455a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    455e:	69ba      	ldr	r2, [r7, #24]
    4560:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    4562:	69bb      	ldr	r3, [r7, #24]
    4564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4566:	f640 2354 	movw	r3, #2644	; 0xa54
    456a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    456e:	681b      	ldr	r3, [r3, #0]
    4570:	429a      	cmp	r2, r3
    4572:	d906      	bls.n	4582 <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    4574:	69bb      	ldr	r3, [r7, #24]
    4576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4578:	f640 2354 	movw	r3, #2644	; 0xa54
    457c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4580:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    4582:	f640 2370 	movw	r3, #2672	; 0xa70
    4586:	f2c2 0300 	movt	r3, #8192	; 0x2000
    458a:	681b      	ldr	r3, [r3, #0]
    458c:	1c5a      	adds	r2, r3, #1
    458e:	f640 2370 	movw	r3, #2672	; 0xa70
    4592:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4596:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    4598:	69bb      	ldr	r3, [r7, #24]
    459a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    459c:	f640 2358 	movw	r3, #2648	; 0xa58
    45a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45a4:	681b      	ldr	r3, [r3, #0]
    45a6:	429a      	cmp	r2, r3
    45a8:	d906      	bls.n	45b8 <xTaskGenericCreate+0x134>
    45aa:	69bb      	ldr	r3, [r7, #24]
    45ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    45ae:	f640 2358 	movw	r3, #2648	; 0xa58
    45b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45b6:	601a      	str	r2, [r3, #0]
    45b8:	69bb      	ldr	r3, [r7, #24]
    45ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    45bc:	4613      	mov	r3, r2
    45be:	009b      	lsls	r3, r3, #2
    45c0:	4413      	add	r3, r2
    45c2:	009b      	lsls	r3, r3, #2
    45c4:	f640 024c 	movw	r2, #2124	; 0x84c
    45c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    45cc:	441a      	add	r2, r3
    45ce:	69bb      	ldr	r3, [r7, #24]
    45d0:	3304      	adds	r3, #4
    45d2:	4610      	mov	r0, r2
    45d4:	4619      	mov	r1, r3
    45d6:	f7ff fadf 	bl	3b98 <vListInsertEnd>

			xReturn = pdPASS;
    45da:	2301      	movs	r3, #1
    45dc:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    45de:	69b8      	ldr	r0, [r7, #24]
    45e0:	f012 ff32 	bl	17448 <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    45e4:	f001 f900 	bl	57e8 <vPortExitCritical>
    45e8:	e002      	b.n	45f0 <xTaskGenericCreate+0x16c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    45ea:	f04f 33ff 	mov.w	r3, #4294967295
    45ee:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    45f0:	69fb      	ldr	r3, [r7, #28]
    45f2:	2b01      	cmp	r3, #1
    45f4:	d111      	bne.n	461a <xTaskGenericCreate+0x196>
	{
		if( xSchedulerRunning != pdFALSE )
    45f6:	f640 235c 	movw	r3, #2652	; 0xa5c
    45fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45fe:	681b      	ldr	r3, [r3, #0]
    4600:	2b00      	cmp	r3, #0
    4602:	d00a      	beq.n	461a <xTaskGenericCreate+0x196>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    4604:	f640 0348 	movw	r3, #2120	; 0x848
    4608:	f2c2 0300 	movt	r3, #8192	; 0x2000
    460c:	681b      	ldr	r3, [r3, #0]
    460e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4610:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4612:	429a      	cmp	r2, r3
    4614:	d201      	bcs.n	461a <xTaskGenericCreate+0x196>
			{
				portYIELD_WITHIN_API();
    4616:	f001 f8c3 	bl	57a0 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    461a:	69fb      	ldr	r3, [r7, #28]
}
    461c:	4618      	mov	r0, r3
    461e:	3720      	adds	r7, #32
    4620:	46bd      	mov	sp, r7
    4622:	bd80      	pop	{r7, pc}

00004624 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    4624:	b580      	push	{r7, lr}
    4626:	b084      	sub	sp, #16
    4628:	af00      	add	r7, sp, #0
    462a:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    462c:	f001 f8c6 	bl	57bc <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    4630:	f640 0348 	movw	r3, #2120	; 0x848
    4634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4638:	681b      	ldr	r3, [r3, #0]
    463a:	687a      	ldr	r2, [r7, #4]
    463c:	429a      	cmp	r2, r3
    463e:	d101      	bne.n	4644 <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    4640:	2300      	movs	r3, #0
    4642:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    4644:	687b      	ldr	r3, [r7, #4]
    4646:	2b00      	cmp	r3, #0
    4648:	d105      	bne.n	4656 <vTaskDelete+0x32>
    464a:	f640 0348 	movw	r3, #2120	; 0x848
    464e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4652:	681b      	ldr	r3, [r3, #0]
    4654:	e000      	b.n	4658 <vTaskDelete+0x34>
    4656:	687b      	ldr	r3, [r7, #4]
    4658:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    465a:	68fb      	ldr	r3, [r7, #12]
    465c:	3304      	adds	r3, #4
    465e:	4618      	mov	r0, r3
    4660:	f7ff fafa 	bl	3c58 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4664:	68fb      	ldr	r3, [r7, #12]
    4666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4668:	2b00      	cmp	r3, #0
    466a:	d004      	beq.n	4676 <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    466c:	68fb      	ldr	r3, [r7, #12]
    466e:	3318      	adds	r3, #24
    4670:	4618      	mov	r0, r3
    4672:	f7ff faf1 	bl	3c58 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    4676:	68fb      	ldr	r3, [r7, #12]
    4678:	3304      	adds	r3, #4
    467a:	f640 2020 	movw	r0, #2592	; 0xa20
    467e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4682:	4619      	mov	r1, r3
    4684:	f7ff fa88 	bl	3b98 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    4688:	f640 2334 	movw	r3, #2612	; 0xa34
    468c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4690:	681b      	ldr	r3, [r3, #0]
    4692:	1c5a      	adds	r2, r3, #1
    4694:	f640 2334 	movw	r3, #2612	; 0xa34
    4698:	f2c2 0300 	movt	r3, #8192	; 0x2000
    469c:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    469e:	f640 2370 	movw	r3, #2672	; 0xa70
    46a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46a6:	681b      	ldr	r3, [r3, #0]
    46a8:	1c5a      	adds	r2, r3, #1
    46aa:	f640 2370 	movw	r3, #2672	; 0xa70
    46ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46b2:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    46b4:	f001 f898 	bl	57e8 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    46b8:	f640 235c 	movw	r3, #2652	; 0xa5c
    46bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46c0:	681b      	ldr	r3, [r3, #0]
    46c2:	2b00      	cmp	r3, #0
    46c4:	d004      	beq.n	46d0 <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    46c6:	687b      	ldr	r3, [r7, #4]
    46c8:	2b00      	cmp	r3, #0
    46ca:	d101      	bne.n	46d0 <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    46cc:	f001 f868 	bl	57a0 <vPortYieldFromISR>
			}
		}
	}
    46d0:	3710      	adds	r7, #16
    46d2:	46bd      	mov	sp, r7
    46d4:	bd80      	pop	{r7, pc}
    46d6:	bf00      	nop

000046d8 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    46d8:	b580      	push	{r7, lr}
    46da:	b086      	sub	sp, #24
    46dc:	af00      	add	r7, sp, #0
    46de:	6078      	str	r0, [r7, #4]
    46e0:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    46e2:	2300      	movs	r3, #0
    46e4:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    46e6:	f000 fa8b 	bl	4c00 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    46ea:	687b      	ldr	r3, [r7, #4]
    46ec:	681a      	ldr	r2, [r3, #0]
    46ee:	683b      	ldr	r3, [r7, #0]
    46f0:	4413      	add	r3, r2
    46f2:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    46f4:	687b      	ldr	r3, [r7, #4]
    46f6:	681a      	ldr	r2, [r3, #0]
    46f8:	f640 2350 	movw	r3, #2640	; 0xa50
    46fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4700:	681b      	ldr	r3, [r3, #0]
    4702:	429a      	cmp	r2, r3
    4704:	d90f      	bls.n	4726 <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    4706:	687b      	ldr	r3, [r7, #4]
    4708:	681a      	ldr	r2, [r3, #0]
    470a:	693b      	ldr	r3, [r7, #16]
    470c:	429a      	cmp	r2, r3
    470e:	d919      	bls.n	4744 <vTaskDelayUntil+0x6c>
    4710:	f640 2350 	movw	r3, #2640	; 0xa50
    4714:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4718:	681b      	ldr	r3, [r3, #0]
    471a:	693a      	ldr	r2, [r7, #16]
    471c:	429a      	cmp	r2, r3
    471e:	d911      	bls.n	4744 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4720:	2301      	movs	r3, #1
    4722:	617b      	str	r3, [r7, #20]
    4724:	e00e      	b.n	4744 <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    4726:	687b      	ldr	r3, [r7, #4]
    4728:	681a      	ldr	r2, [r3, #0]
    472a:	693b      	ldr	r3, [r7, #16]
    472c:	429a      	cmp	r2, r3
    472e:	d807      	bhi.n	4740 <vTaskDelayUntil+0x68>
    4730:	f640 2350 	movw	r3, #2640	; 0xa50
    4734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4738:	681b      	ldr	r3, [r3, #0]
    473a:	693a      	ldr	r2, [r7, #16]
    473c:	429a      	cmp	r2, r3
    473e:	d901      	bls.n	4744 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4740:	2301      	movs	r3, #1
    4742:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    4744:	687b      	ldr	r3, [r7, #4]
    4746:	693a      	ldr	r2, [r7, #16]
    4748:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    474a:	697b      	ldr	r3, [r7, #20]
    474c:	2b00      	cmp	r3, #0
    474e:	d00b      	beq.n	4768 <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4750:	f640 0348 	movw	r3, #2120	; 0x848
    4754:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4758:	681b      	ldr	r3, [r3, #0]
    475a:	3304      	adds	r3, #4
    475c:	4618      	mov	r0, r3
    475e:	f7ff fa7b 	bl	3c58 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4762:	6938      	ldr	r0, [r7, #16]
    4764:	f000 fe3c 	bl	53e0 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    4768:	f000 fa5c 	bl	4c24 <xTaskResumeAll>
    476c:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    476e:	68fb      	ldr	r3, [r7, #12]
    4770:	2b00      	cmp	r3, #0
    4772:	d101      	bne.n	4778 <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    4774:	f001 f814 	bl	57a0 <vPortYieldFromISR>
		}
	}
    4778:	3718      	adds	r7, #24
    477a:	46bd      	mov	sp, r7
    477c:	bd80      	pop	{r7, pc}
    477e:	bf00      	nop

00004780 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    4780:	b580      	push	{r7, lr}
    4782:	b084      	sub	sp, #16
    4784:	af00      	add	r7, sp, #0
    4786:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4788:	2300      	movs	r3, #0
    478a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    478c:	687b      	ldr	r3, [r7, #4]
    478e:	2b00      	cmp	r3, #0
    4790:	d018      	beq.n	47c4 <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    4792:	f000 fa35 	bl	4c00 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    4796:	f640 2350 	movw	r3, #2640	; 0xa50
    479a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    479e:	681a      	ldr	r2, [r3, #0]
    47a0:	687b      	ldr	r3, [r7, #4]
    47a2:	4413      	add	r3, r2
    47a4:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    47a6:	f640 0348 	movw	r3, #2120	; 0x848
    47aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47ae:	681b      	ldr	r3, [r3, #0]
    47b0:	3304      	adds	r3, #4
    47b2:	4618      	mov	r0, r3
    47b4:	f7ff fa50 	bl	3c58 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    47b8:	68b8      	ldr	r0, [r7, #8]
    47ba:	f000 fe11 	bl	53e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    47be:	f000 fa31 	bl	4c24 <xTaskResumeAll>
    47c2:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    47c4:	68fb      	ldr	r3, [r7, #12]
    47c6:	2b00      	cmp	r3, #0
    47c8:	d101      	bne.n	47ce <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    47ca:	f000 ffe9 	bl	57a0 <vPortYieldFromISR>
		}
	}
    47ce:	3710      	adds	r7, #16
    47d0:	46bd      	mov	sp, r7
    47d2:	bd80      	pop	{r7, pc}

000047d4 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    47d4:	b580      	push	{r7, lr}
    47d6:	b084      	sub	sp, #16
    47d8:	af00      	add	r7, sp, #0
    47da:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    47dc:	f000 ffee 	bl	57bc <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    47e0:	687b      	ldr	r3, [r7, #4]
    47e2:	2b00      	cmp	r3, #0
    47e4:	d105      	bne.n	47f2 <uxTaskPriorityGet+0x1e>
    47e6:	f640 0348 	movw	r3, #2120	; 0x848
    47ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47ee:	681b      	ldr	r3, [r3, #0]
    47f0:	e000      	b.n	47f4 <uxTaskPriorityGet+0x20>
    47f2:	687b      	ldr	r3, [r7, #4]
    47f4:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    47f6:	68fb      	ldr	r3, [r7, #12]
    47f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    47fa:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    47fc:	f000 fff4 	bl	57e8 <vPortExitCritical>

		return uxReturn;
    4800:	68bb      	ldr	r3, [r7, #8]
	}
    4802:	4618      	mov	r0, r3
    4804:	3710      	adds	r7, #16
    4806:	46bd      	mov	sp, r7
    4808:	bd80      	pop	{r7, pc}
    480a:	bf00      	nop

0000480c <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    480c:	b580      	push	{r7, lr}
    480e:	b086      	sub	sp, #24
    4810:	af00      	add	r7, sp, #0
    4812:	6078      	str	r0, [r7, #4]
    4814:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    4816:	2300      	movs	r3, #0
    4818:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    481a:	683b      	ldr	r3, [r7, #0]
    481c:	2b13      	cmp	r3, #19
    481e:	d901      	bls.n	4824 <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    4820:	2313      	movs	r3, #19
    4822:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    4824:	f000 ffca 	bl	57bc <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    4828:	f640 0348 	movw	r3, #2120	; 0x848
    482c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4830:	681b      	ldr	r3, [r3, #0]
    4832:	687a      	ldr	r2, [r7, #4]
    4834:	429a      	cmp	r2, r3
    4836:	d101      	bne.n	483c <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    4838:	2300      	movs	r3, #0
    483a:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    483c:	687b      	ldr	r3, [r7, #4]
    483e:	2b00      	cmp	r3, #0
    4840:	d105      	bne.n	484e <vTaskPrioritySet+0x42>
    4842:	f640 0348 	movw	r3, #2120	; 0x848
    4846:	f2c2 0300 	movt	r3, #8192	; 0x2000
    484a:	681b      	ldr	r3, [r3, #0]
    484c:	e000      	b.n	4850 <vTaskPrioritySet+0x44>
    484e:	687b      	ldr	r3, [r7, #4]
    4850:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    4852:	693b      	ldr	r3, [r7, #16]
    4854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    4856:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    4858:	68fa      	ldr	r2, [r7, #12]
    485a:	683b      	ldr	r3, [r7, #0]
    485c:	429a      	cmp	r2, r3
    485e:	d058      	beq.n	4912 <vTaskPrioritySet+0x106>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    4860:	683a      	ldr	r2, [r7, #0]
    4862:	68fb      	ldr	r3, [r7, #12]
    4864:	429a      	cmp	r2, r3
    4866:	d905      	bls.n	4874 <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    4868:	687b      	ldr	r3, [r7, #4]
    486a:	2b00      	cmp	r3, #0
    486c:	d007      	beq.n	487e <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    486e:	2301      	movs	r3, #1
    4870:	617b      	str	r3, [r7, #20]
    4872:	e004      	b.n	487e <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    4874:	687b      	ldr	r3, [r7, #4]
    4876:	2b00      	cmp	r3, #0
    4878:	d101      	bne.n	487e <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    487a:	2301      	movs	r3, #1
    487c:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    487e:	693b      	ldr	r3, [r7, #16]
    4880:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    4882:	693b      	ldr	r3, [r7, #16]
    4884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4886:	429a      	cmp	r2, r3
    4888:	d102      	bne.n	4890 <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    488a:	693b      	ldr	r3, [r7, #16]
    488c:	683a      	ldr	r2, [r7, #0]
    488e:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    4890:	693b      	ldr	r3, [r7, #16]
    4892:	683a      	ldr	r2, [r7, #0]
    4894:	64da      	str	r2, [r3, #76]	; 0x4c
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    4896:	683b      	ldr	r3, [r7, #0]
    4898:	f1c3 0214 	rsb	r2, r3, #20
    489c:	693b      	ldr	r3, [r7, #16]
    489e:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    48a0:	693b      	ldr	r3, [r7, #16]
    48a2:	6959      	ldr	r1, [r3, #20]
    48a4:	68fa      	ldr	r2, [r7, #12]
    48a6:	4613      	mov	r3, r2
    48a8:	009b      	lsls	r3, r3, #2
    48aa:	4413      	add	r3, r2
    48ac:	009b      	lsls	r3, r3, #2
    48ae:	f640 024c 	movw	r2, #2124	; 0x84c
    48b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    48b6:	4413      	add	r3, r2
    48b8:	4299      	cmp	r1, r3
    48ba:	d125      	bne.n	4908 <vTaskPrioritySet+0xfc>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    48bc:	693b      	ldr	r3, [r7, #16]
    48be:	3304      	adds	r3, #4
    48c0:	4618      	mov	r0, r3
    48c2:	f7ff f9c9 	bl	3c58 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    48c6:	693b      	ldr	r3, [r7, #16]
    48c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    48ca:	f640 2358 	movw	r3, #2648	; 0xa58
    48ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48d2:	681b      	ldr	r3, [r3, #0]
    48d4:	429a      	cmp	r2, r3
    48d6:	d906      	bls.n	48e6 <vTaskPrioritySet+0xda>
    48d8:	693b      	ldr	r3, [r7, #16]
    48da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    48dc:	f640 2358 	movw	r3, #2648	; 0xa58
    48e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48e4:	601a      	str	r2, [r3, #0]
    48e6:	693b      	ldr	r3, [r7, #16]
    48e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    48ea:	4613      	mov	r3, r2
    48ec:	009b      	lsls	r3, r3, #2
    48ee:	4413      	add	r3, r2
    48f0:	009b      	lsls	r3, r3, #2
    48f2:	f640 024c 	movw	r2, #2124	; 0x84c
    48f6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    48fa:	441a      	add	r2, r3
    48fc:	693b      	ldr	r3, [r7, #16]
    48fe:	3304      	adds	r3, #4
    4900:	4610      	mov	r0, r2
    4902:	4619      	mov	r1, r3
    4904:	f7ff f948 	bl	3b98 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    4908:	697b      	ldr	r3, [r7, #20]
    490a:	2b01      	cmp	r3, #1
    490c:	d101      	bne.n	4912 <vTaskPrioritySet+0x106>
				{
					portYIELD_WITHIN_API();
    490e:	f000 ff47 	bl	57a0 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    4912:	f000 ff69 	bl	57e8 <vPortExitCritical>
	}
    4916:	3718      	adds	r7, #24
    4918:	46bd      	mov	sp, r7
    491a:	bd80      	pop	{r7, pc}

0000491c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    491c:	b580      	push	{r7, lr}
    491e:	b084      	sub	sp, #16
    4920:	af00      	add	r7, sp, #0
    4922:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4924:	f000 ff4a 	bl	57bc <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    4928:	f640 0348 	movw	r3, #2120	; 0x848
    492c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4930:	681b      	ldr	r3, [r3, #0]
    4932:	687a      	ldr	r2, [r7, #4]
    4934:	429a      	cmp	r2, r3
    4936:	d101      	bne.n	493c <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    4938:	2300      	movs	r3, #0
    493a:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    493c:	687b      	ldr	r3, [r7, #4]
    493e:	2b00      	cmp	r3, #0
    4940:	d105      	bne.n	494e <vTaskSuspend+0x32>
    4942:	f640 0348 	movw	r3, #2120	; 0x848
    4946:	f2c2 0300 	movt	r3, #8192	; 0x2000
    494a:	681b      	ldr	r3, [r3, #0]
    494c:	e000      	b.n	4950 <vTaskSuspend+0x34>
    494e:	687b      	ldr	r3, [r7, #4]
    4950:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4952:	68fb      	ldr	r3, [r7, #12]
    4954:	3304      	adds	r3, #4
    4956:	4618      	mov	r0, r3
    4958:	f7ff f97e 	bl	3c58 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    495c:	68fb      	ldr	r3, [r7, #12]
    495e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4960:	2b00      	cmp	r3, #0
    4962:	d004      	beq.n	496e <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4964:	68fb      	ldr	r3, [r7, #12]
    4966:	3318      	adds	r3, #24
    4968:	4618      	mov	r0, r3
    496a:	f7ff f975 	bl	3c58 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    496e:	68fb      	ldr	r3, [r7, #12]
    4970:	3304      	adds	r3, #4
    4972:	f640 2038 	movw	r0, #2616	; 0xa38
    4976:	f2c2 0000 	movt	r0, #8192	; 0x2000
    497a:	4619      	mov	r1, r3
    497c:	f7ff f90c 	bl	3b98 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    4980:	f000 ff32 	bl	57e8 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    4984:	687b      	ldr	r3, [r7, #4]
    4986:	2b00      	cmp	r3, #0
    4988:	d11e      	bne.n	49c8 <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    498a:	f640 235c 	movw	r3, #2652	; 0xa5c
    498e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4992:	681b      	ldr	r3, [r3, #0]
    4994:	2b00      	cmp	r3, #0
    4996:	d002      	beq.n	499e <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    4998:	f000 ff02 	bl	57a0 <vPortYieldFromISR>
    499c:	e014      	b.n	49c8 <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    499e:	f640 2338 	movw	r3, #2616	; 0xa38
    49a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49a6:	681a      	ldr	r2, [r3, #0]
    49a8:	f640 234c 	movw	r3, #2636	; 0xa4c
    49ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49b0:	681b      	ldr	r3, [r3, #0]
    49b2:	429a      	cmp	r2, r3
    49b4:	d106      	bne.n	49c4 <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    49b6:	f640 0348 	movw	r3, #2120	; 0x848
    49ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49be:	2200      	movs	r2, #0
    49c0:	601a      	str	r2, [r3, #0]
    49c2:	e001      	b.n	49c8 <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    49c4:	f000 fadc 	bl	4f80 <vTaskSwitchContext>
				}
			}
		}
	}
    49c8:	3710      	adds	r7, #16
    49ca:	46bd      	mov	sp, r7
    49cc:	bd80      	pop	{r7, pc}
    49ce:	bf00      	nop

000049d0 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    49d0:	b480      	push	{r7}
    49d2:	b085      	sub	sp, #20
    49d4:	af00      	add	r7, sp, #0
    49d6:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    49d8:	2300      	movs	r3, #0
    49da:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    49dc:	687b      	ldr	r3, [r7, #4]
    49de:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    49e0:	68bb      	ldr	r3, [r7, #8]
    49e2:	695a      	ldr	r2, [r3, #20]
    49e4:	f640 2338 	movw	r3, #2616	; 0xa38
    49e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49ec:	429a      	cmp	r2, r3
    49ee:	d10d      	bne.n	4a0c <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    49f0:	68bb      	ldr	r3, [r7, #8]
    49f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    49f4:	f640 230c 	movw	r3, #2572	; 0xa0c
    49f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49fc:	429a      	cmp	r2, r3
    49fe:	d005      	beq.n	4a0c <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    4a00:	68bb      	ldr	r3, [r7, #8]
    4a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4a04:	2b00      	cmp	r3, #0
    4a06:	d101      	bne.n	4a0c <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    4a08:	2301      	movs	r3, #1
    4a0a:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    4a0c:	68fb      	ldr	r3, [r7, #12]
	}
    4a0e:	4618      	mov	r0, r3
    4a10:	3714      	adds	r7, #20
    4a12:	46bd      	mov	sp, r7
    4a14:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a18:	4770      	bx	lr
    4a1a:	bf00      	nop

00004a1c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    4a1c:	b580      	push	{r7, lr}
    4a1e:	b084      	sub	sp, #16
    4a20:	af00      	add	r7, sp, #0
    4a22:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    4a24:	687b      	ldr	r3, [r7, #4]
    4a26:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    4a28:	68fb      	ldr	r3, [r7, #12]
    4a2a:	2b00      	cmp	r3, #0
    4a2c:	d043      	beq.n	4ab6 <vTaskResume+0x9a>
    4a2e:	f640 0348 	movw	r3, #2120	; 0x848
    4a32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a36:	681b      	ldr	r3, [r3, #0]
    4a38:	68fa      	ldr	r2, [r7, #12]
    4a3a:	429a      	cmp	r2, r3
    4a3c:	d03b      	beq.n	4ab6 <vTaskResume+0x9a>
		{
			taskENTER_CRITICAL();
    4a3e:	f000 febd 	bl	57bc <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    4a42:	68f8      	ldr	r0, [r7, #12]
    4a44:	f7ff ffc4 	bl	49d0 <xTaskIsTaskSuspended>
    4a48:	4603      	mov	r3, r0
    4a4a:	2b01      	cmp	r3, #1
    4a4c:	d131      	bne.n	4ab2 <vTaskResume+0x96>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    4a4e:	68fb      	ldr	r3, [r7, #12]
    4a50:	3304      	adds	r3, #4
    4a52:	4618      	mov	r0, r3
    4a54:	f7ff f900 	bl	3c58 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4a58:	68fb      	ldr	r3, [r7, #12]
    4a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4a5c:	f640 2358 	movw	r3, #2648	; 0xa58
    4a60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a64:	681b      	ldr	r3, [r3, #0]
    4a66:	429a      	cmp	r2, r3
    4a68:	d906      	bls.n	4a78 <vTaskResume+0x5c>
    4a6a:	68fb      	ldr	r3, [r7, #12]
    4a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4a6e:	f640 2358 	movw	r3, #2648	; 0xa58
    4a72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a76:	601a      	str	r2, [r3, #0]
    4a78:	68fb      	ldr	r3, [r7, #12]
    4a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4a7c:	4613      	mov	r3, r2
    4a7e:	009b      	lsls	r3, r3, #2
    4a80:	4413      	add	r3, r2
    4a82:	009b      	lsls	r3, r3, #2
    4a84:	f640 024c 	movw	r2, #2124	; 0x84c
    4a88:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4a8c:	441a      	add	r2, r3
    4a8e:	68fb      	ldr	r3, [r7, #12]
    4a90:	3304      	adds	r3, #4
    4a92:	4610      	mov	r0, r2
    4a94:	4619      	mov	r1, r3
    4a96:	f7ff f87f 	bl	3b98 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4a9a:	68fb      	ldr	r3, [r7, #12]
    4a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4a9e:	f640 0348 	movw	r3, #2120	; 0x848
    4aa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4aa6:	681b      	ldr	r3, [r3, #0]
    4aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4aaa:	429a      	cmp	r2, r3
    4aac:	d301      	bcc.n	4ab2 <vTaskResume+0x96>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    4aae:	f000 fe77 	bl	57a0 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    4ab2:	f000 fe99 	bl	57e8 <vPortExitCritical>
		}
	}
    4ab6:	3710      	adds	r7, #16
    4ab8:	46bd      	mov	sp, r7
    4aba:	bd80      	pop	{r7, pc}

00004abc <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    4abc:	b580      	push	{r7, lr}
    4abe:	b086      	sub	sp, #24
    4ac0:	af00      	add	r7, sp, #0
    4ac2:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    4ac4:	2300      	movs	r3, #0
    4ac6:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    4ac8:	687b      	ldr	r3, [r7, #4]
    4aca:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4acc:	2300      	movs	r3, #0
    4ace:	60fb      	str	r3, [r7, #12]
    4ad0:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4ad4:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    4ad8:	6938      	ldr	r0, [r7, #16]
    4ada:	f7ff ff79 	bl	49d0 <xTaskIsTaskSuspended>
    4ade:	4603      	mov	r3, r0
    4ae0:	2b01      	cmp	r3, #1
    4ae2:	d144      	bne.n	4b6e <xTaskResumeFromISR+0xb2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4ae4:	f640 2360 	movw	r3, #2656	; 0xa60
    4ae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4aec:	681b      	ldr	r3, [r3, #0]
    4aee:	2b00      	cmp	r3, #0
    4af0:	d134      	bne.n	4b5c <xTaskResumeFromISR+0xa0>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    4af2:	693b      	ldr	r3, [r7, #16]
    4af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4af6:	f640 0348 	movw	r3, #2120	; 0x848
    4afa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4afe:	681b      	ldr	r3, [r3, #0]
    4b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4b02:	429a      	cmp	r2, r3
    4b04:	bf34      	ite	cc
    4b06:	2300      	movcc	r3, #0
    4b08:	2301      	movcs	r3, #1
    4b0a:	b2db      	uxtb	r3, r3
    4b0c:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    4b0e:	693b      	ldr	r3, [r7, #16]
    4b10:	3304      	adds	r3, #4
    4b12:	4618      	mov	r0, r3
    4b14:	f7ff f8a0 	bl	3c58 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4b18:	693b      	ldr	r3, [r7, #16]
    4b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b1c:	f640 2358 	movw	r3, #2648	; 0xa58
    4b20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b24:	681b      	ldr	r3, [r3, #0]
    4b26:	429a      	cmp	r2, r3
    4b28:	d906      	bls.n	4b38 <xTaskResumeFromISR+0x7c>
    4b2a:	693b      	ldr	r3, [r7, #16]
    4b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b2e:	f640 2358 	movw	r3, #2648	; 0xa58
    4b32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b36:	601a      	str	r2, [r3, #0]
    4b38:	693b      	ldr	r3, [r7, #16]
    4b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b3c:	4613      	mov	r3, r2
    4b3e:	009b      	lsls	r3, r3, #2
    4b40:	4413      	add	r3, r2
    4b42:	009b      	lsls	r3, r3, #2
    4b44:	f640 024c 	movw	r2, #2124	; 0x84c
    4b48:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4b4c:	441a      	add	r2, r3
    4b4e:	693b      	ldr	r3, [r7, #16]
    4b50:	3304      	adds	r3, #4
    4b52:	4610      	mov	r0, r2
    4b54:	4619      	mov	r1, r3
    4b56:	f7ff f81f 	bl	3b98 <vListInsertEnd>
    4b5a:	e008      	b.n	4b6e <xTaskResumeFromISR+0xb2>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    4b5c:	693b      	ldr	r3, [r7, #16]
    4b5e:	3318      	adds	r3, #24
    4b60:	f640 200c 	movw	r0, #2572	; 0xa0c
    4b64:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4b68:	4619      	mov	r1, r3
    4b6a:	f7ff f815 	bl	3b98 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4b6e:	f04f 0000 	mov.w	r0, #0
    4b72:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    4b76:	697b      	ldr	r3, [r7, #20]
	}
    4b78:	4618      	mov	r0, r3
    4b7a:	3718      	adds	r7, #24
    4b7c:	46bd      	mov	sp, r7
    4b7e:	bd80      	pop	{r7, pc}

00004b80 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    4b80:	b580      	push	{r7, lr}
    4b82:	b086      	sub	sp, #24
    4b84:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    4b86:	2300      	movs	r3, #0
    4b88:	9300      	str	r3, [sp, #0]
    4b8a:	2300      	movs	r3, #0
    4b8c:	9301      	str	r3, [sp, #4]
    4b8e:	2300      	movs	r3, #0
    4b90:	9302      	str	r3, [sp, #8]
    4b92:	2300      	movs	r3, #0
    4b94:	9303      	str	r3, [sp, #12]
    4b96:	f245 2039 	movw	r0, #21049	; 0x5239
    4b9a:	f2c0 0000 	movt	r0, #0
    4b9e:	f648 01a0 	movw	r1, #34976	; 0x88a0
    4ba2:	f2c0 0101 	movt	r1, #1
    4ba6:	2280      	movs	r2, #128	; 0x80
    4ba8:	2300      	movs	r3, #0
    4baa:	f7ff fc6b 	bl	4484 <xTaskGenericCreate>
    4bae:	6078      	str	r0, [r7, #4]
            
		}
	}
	#endif

	if( xReturn == pdPASS )
    4bb0:	687b      	ldr	r3, [r7, #4]
    4bb2:	2b01      	cmp	r3, #1
    4bb4:	d111      	bne.n	4bda <vTaskStartScheduler+0x5a>
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */

		portDISABLE_INTERRUPTS();
    4bb6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4bba:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    4bbe:	f640 235c 	movw	r3, #2652	; 0xa5c
    4bc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bc6:	2201      	movs	r2, #1
    4bc8:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    4bca:	f640 2350 	movw	r3, #2640	; 0xa50
    4bce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bd2:	2200      	movs	r2, #0
    4bd4:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    4bd6:	f000 fdb5 	bl	5744 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    4bda:	3708      	adds	r7, #8
    4bdc:	46bd      	mov	sp, r7
    4bde:	bd80      	pop	{r7, pc}

00004be0 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    4be0:	b580      	push	{r7, lr}
    4be2:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    4be4:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4be8:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    4bec:	f640 235c 	movw	r3, #2652	; 0xa5c
    4bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bf4:	2200      	movs	r2, #0
    4bf6:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    4bf8:	f000 fdcc 	bl	5794 <vPortEndScheduler>
}
    4bfc:	bd80      	pop	{r7, pc}
    4bfe:	bf00      	nop

00004c00 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    4c00:	b480      	push	{r7}
    4c02:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    4c04:	f640 2360 	movw	r3, #2656	; 0xa60
    4c08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c0c:	681b      	ldr	r3, [r3, #0]
    4c0e:	1c5a      	adds	r2, r3, #1
    4c10:	f640 2360 	movw	r3, #2656	; 0xa60
    4c14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c18:	601a      	str	r2, [r3, #0]
}
    4c1a:	46bd      	mov	sp, r7
    4c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c20:	4770      	bx	lr
    4c22:	bf00      	nop

00004c24 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    4c24:	b590      	push	{r4, r7, lr}
    4c26:	b083      	sub	sp, #12
    4c28:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4c2a:	2300      	movs	r3, #0
    4c2c:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    4c2e:	f000 fdc5 	bl	57bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    4c32:	f640 2360 	movw	r3, #2656	; 0xa60
    4c36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c3a:	681b      	ldr	r3, [r3, #0]
    4c3c:	1e5a      	subs	r2, r3, #1
    4c3e:	f640 2360 	movw	r3, #2656	; 0xa60
    4c42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c46:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4c48:	f640 2360 	movw	r3, #2656	; 0xa60
    4c4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c50:	681b      	ldr	r3, [r3, #0]
    4c52:	2b00      	cmp	r3, #0
    4c54:	d177      	bne.n	4d46 <xTaskResumeAll+0x122>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    4c56:	f640 234c 	movw	r3, #2636	; 0xa4c
    4c5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c5e:	681b      	ldr	r3, [r3, #0]
    4c60:	2b00      	cmp	r3, #0
    4c62:	d070      	beq.n	4d46 <xTaskResumeAll+0x122>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    4c64:	2300      	movs	r3, #0
    4c66:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    4c68:	e036      	b.n	4cd8 <xTaskResumeAll+0xb4>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    4c6a:	f640 230c 	movw	r3, #2572	; 0xa0c
    4c6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c72:	68db      	ldr	r3, [r3, #12]
    4c74:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    4c76:	f104 0318 	add.w	r3, r4, #24
    4c7a:	4618      	mov	r0, r3
    4c7c:	f7fe ffec 	bl	3c58 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    4c80:	1d23      	adds	r3, r4, #4
    4c82:	4618      	mov	r0, r3
    4c84:	f7fe ffe8 	bl	3c58 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4c88:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4c8a:	f640 2358 	movw	r3, #2648	; 0xa58
    4c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c92:	681b      	ldr	r3, [r3, #0]
    4c94:	429a      	cmp	r2, r3
    4c96:	d905      	bls.n	4ca4 <xTaskResumeAll+0x80>
    4c98:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4c9a:	f640 2358 	movw	r3, #2648	; 0xa58
    4c9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ca2:	601a      	str	r2, [r3, #0]
    4ca4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4ca6:	4613      	mov	r3, r2
    4ca8:	009b      	lsls	r3, r3, #2
    4caa:	4413      	add	r3, r2
    4cac:	009b      	lsls	r3, r3, #2
    4cae:	f640 024c 	movw	r2, #2124	; 0x84c
    4cb2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4cb6:	441a      	add	r2, r3
    4cb8:	1d23      	adds	r3, r4, #4
    4cba:	4610      	mov	r0, r2
    4cbc:	4619      	mov	r1, r3
    4cbe:	f7fe ff6b 	bl	3b98 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4cc2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4cc4:	f640 0348 	movw	r3, #2120	; 0x848
    4cc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ccc:	681b      	ldr	r3, [r3, #0]
    4cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4cd0:	429a      	cmp	r2, r3
    4cd2:	d301      	bcc.n	4cd8 <xTaskResumeAll+0xb4>
					{
						xYieldRequired = pdTRUE;
    4cd4:	2301      	movs	r3, #1
    4cd6:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    4cd8:	f640 230c 	movw	r3, #2572	; 0xa0c
    4cdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ce0:	681b      	ldr	r3, [r3, #0]
    4ce2:	2b00      	cmp	r3, #0
    4ce4:	d1c1      	bne.n	4c6a <xTaskResumeAll+0x46>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    4ce6:	f640 2364 	movw	r3, #2660	; 0xa64
    4cea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cee:	681b      	ldr	r3, [r3, #0]
    4cf0:	2b00      	cmp	r3, #0
    4cf2:	d014      	beq.n	4d1e <xTaskResumeAll+0xfa>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    4cf4:	e00c      	b.n	4d10 <xTaskResumeAll+0xec>
					{
						vTaskIncrementTick();
    4cf6:	f000 f865 	bl	4dc4 <vTaskIncrementTick>
						--uxMissedTicks;
    4cfa:	f640 2364 	movw	r3, #2660	; 0xa64
    4cfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d02:	681b      	ldr	r3, [r3, #0]
    4d04:	1e5a      	subs	r2, r3, #1
    4d06:	f640 2364 	movw	r3, #2660	; 0xa64
    4d0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d0e:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    4d10:	f640 2364 	movw	r3, #2660	; 0xa64
    4d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d18:	681b      	ldr	r3, [r3, #0]
    4d1a:	2b00      	cmp	r3, #0
    4d1c:	d1eb      	bne.n	4cf6 <xTaskResumeAll+0xd2>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    4d1e:	683b      	ldr	r3, [r7, #0]
    4d20:	2b01      	cmp	r3, #1
    4d22:	d006      	beq.n	4d32 <xTaskResumeAll+0x10e>
    4d24:	f640 2368 	movw	r3, #2664	; 0xa68
    4d28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d2c:	681b      	ldr	r3, [r3, #0]
    4d2e:	2b01      	cmp	r3, #1
    4d30:	d109      	bne.n	4d46 <xTaskResumeAll+0x122>
				{
					xAlreadyYielded = pdTRUE;
    4d32:	2301      	movs	r3, #1
    4d34:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    4d36:	f640 2368 	movw	r3, #2664	; 0xa68
    4d3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d3e:	2200      	movs	r2, #0
    4d40:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    4d42:	f000 fd2d 	bl	57a0 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    4d46:	f000 fd4f 	bl	57e8 <vPortExitCritical>

	return xAlreadyYielded;
    4d4a:	687b      	ldr	r3, [r7, #4]
}
    4d4c:	4618      	mov	r0, r3
    4d4e:	370c      	adds	r7, #12
    4d50:	46bd      	mov	sp, r7
    4d52:	bd90      	pop	{r4, r7, pc}

00004d54 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    4d54:	b580      	push	{r7, lr}
    4d56:	b082      	sub	sp, #8
    4d58:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    4d5a:	f000 fd2f 	bl	57bc <vPortEnterCritical>
	{
		xTicks = xTickCount;
    4d5e:	f640 2350 	movw	r3, #2640	; 0xa50
    4d62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d66:	681b      	ldr	r3, [r3, #0]
    4d68:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    4d6a:	f000 fd3d 	bl	57e8 <vPortExitCritical>

	return xTicks;
    4d6e:	687b      	ldr	r3, [r7, #4]
}
    4d70:	4618      	mov	r0, r3
    4d72:	3708      	adds	r7, #8
    4d74:	46bd      	mov	sp, r7
    4d76:	bd80      	pop	{r7, pc}

00004d78 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    4d78:	b480      	push	{r7}
    4d7a:	b083      	sub	sp, #12
    4d7c:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4d7e:	2300      	movs	r3, #0
    4d80:	607b      	str	r3, [r7, #4]
    4d82:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4d86:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    4d8a:	f640 2350 	movw	r3, #2640	; 0xa50
    4d8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d92:	681b      	ldr	r3, [r3, #0]
    4d94:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4d96:	f04f 0000 	mov.w	r0, #0
    4d9a:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4d9e:	683b      	ldr	r3, [r7, #0]
}
    4da0:	4618      	mov	r0, r3
    4da2:	370c      	adds	r7, #12
    4da4:	46bd      	mov	sp, r7
    4da6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4daa:	4770      	bx	lr

00004dac <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    4dac:	b480      	push	{r7}
    4dae:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    4db0:	f640 234c 	movw	r3, #2636	; 0xa4c
    4db4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4db8:	681b      	ldr	r3, [r3, #0]
}
    4dba:	4618      	mov	r0, r3
    4dbc:	46bd      	mov	sp, r7
    4dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dc2:	4770      	bx	lr

00004dc4 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    4dc4:	b580      	push	{r7, lr}
    4dc6:	b084      	sub	sp, #16
    4dc8:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4dca:	f640 2360 	movw	r3, #2656	; 0xa60
    4dce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dd2:	681b      	ldr	r3, [r3, #0]
    4dd4:	2b00      	cmp	r3, #0
    4dd6:	f040 80b9 	bne.w	4f4c <vTaskIncrementTick+0x188>
	{
		++xTickCount;
    4dda:	f640 2350 	movw	r3, #2640	; 0xa50
    4dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4de2:	681b      	ldr	r3, [r3, #0]
    4de4:	1c5a      	adds	r2, r3, #1
    4de6:	f640 2350 	movw	r3, #2640	; 0xa50
    4dea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dee:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    4df0:	f640 2350 	movw	r3, #2640	; 0xa50
    4df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4df8:	681b      	ldr	r3, [r3, #0]
    4dfa:	2b00      	cmp	r3, #0
    4dfc:	d13f      	bne.n	4e7e <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    4dfe:	f640 2304 	movw	r3, #2564	; 0xa04
    4e02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e06:	681b      	ldr	r3, [r3, #0]
    4e08:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    4e0a:	f640 2308 	movw	r3, #2568	; 0xa08
    4e0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e12:	681a      	ldr	r2, [r3, #0]
    4e14:	f640 2304 	movw	r3, #2564	; 0xa04
    4e18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e1c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    4e1e:	f640 2308 	movw	r3, #2568	; 0xa08
    4e22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e26:	68fa      	ldr	r2, [r7, #12]
    4e28:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    4e2a:	f640 236c 	movw	r3, #2668	; 0xa6c
    4e2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e32:	681b      	ldr	r3, [r3, #0]
    4e34:	1c5a      	adds	r2, r3, #1
    4e36:	f640 236c 	movw	r3, #2668	; 0xa6c
    4e3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e3e:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    4e40:	f640 2304 	movw	r3, #2564	; 0xa04
    4e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e48:	681b      	ldr	r3, [r3, #0]
    4e4a:	681b      	ldr	r3, [r3, #0]
    4e4c:	2b00      	cmp	r3, #0
    4e4e:	d107      	bne.n	4e60 <vTaskIncrementTick+0x9c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    4e50:	f240 2374 	movw	r3, #628	; 0x274
    4e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e58:	f04f 32ff 	mov.w	r2, #4294967295
    4e5c:	601a      	str	r2, [r3, #0]
    4e5e:	e00e      	b.n	4e7e <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    4e60:	f640 2304 	movw	r3, #2564	; 0xa04
    4e64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e68:	681b      	ldr	r3, [r3, #0]
    4e6a:	68db      	ldr	r3, [r3, #12]
    4e6c:	68db      	ldr	r3, [r3, #12]
    4e6e:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    4e70:	68bb      	ldr	r3, [r7, #8]
    4e72:	685a      	ldr	r2, [r3, #4]
    4e74:	f240 2374 	movw	r3, #628	; 0x274
    4e78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e7c:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    4e7e:	f640 2350 	movw	r3, #2640	; 0xa50
    4e82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e86:	681a      	ldr	r2, [r3, #0]
    4e88:	f240 2374 	movw	r3, #628	; 0x274
    4e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e90:	681b      	ldr	r3, [r3, #0]
    4e92:	429a      	cmp	r2, r3
    4e94:	d359      	bcc.n	4f4a <vTaskIncrementTick+0x186>
    4e96:	f640 2304 	movw	r3, #2564	; 0xa04
    4e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e9e:	681b      	ldr	r3, [r3, #0]
    4ea0:	681b      	ldr	r3, [r3, #0]
    4ea2:	2b00      	cmp	r3, #0
    4ea4:	d107      	bne.n	4eb6 <vTaskIncrementTick+0xf2>
    4ea6:	f240 2374 	movw	r3, #628	; 0x274
    4eaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eae:	f04f 32ff 	mov.w	r2, #4294967295
    4eb2:	601a      	str	r2, [r3, #0]
    4eb4:	e049      	b.n	4f4a <vTaskIncrementTick+0x186>
    4eb6:	f640 2304 	movw	r3, #2564	; 0xa04
    4eba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ebe:	681b      	ldr	r3, [r3, #0]
    4ec0:	68db      	ldr	r3, [r3, #12]
    4ec2:	68db      	ldr	r3, [r3, #12]
    4ec4:	60bb      	str	r3, [r7, #8]
    4ec6:	68bb      	ldr	r3, [r7, #8]
    4ec8:	685b      	ldr	r3, [r3, #4]
    4eca:	607b      	str	r3, [r7, #4]
    4ecc:	f640 2350 	movw	r3, #2640	; 0xa50
    4ed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ed4:	681a      	ldr	r2, [r3, #0]
    4ed6:	687b      	ldr	r3, [r7, #4]
    4ed8:	429a      	cmp	r2, r3
    4eda:	d206      	bcs.n	4eea <vTaskIncrementTick+0x126>
    4edc:	f240 2374 	movw	r3, #628	; 0x274
    4ee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ee4:	687a      	ldr	r2, [r7, #4]
    4ee6:	601a      	str	r2, [r3, #0]
    4ee8:	e02f      	b.n	4f4a <vTaskIncrementTick+0x186>
    4eea:	68bb      	ldr	r3, [r7, #8]
    4eec:	3304      	adds	r3, #4
    4eee:	4618      	mov	r0, r3
    4ef0:	f7fe feb2 	bl	3c58 <vListRemove>
    4ef4:	68bb      	ldr	r3, [r7, #8]
    4ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4ef8:	2b00      	cmp	r3, #0
    4efa:	d004      	beq.n	4f06 <vTaskIncrementTick+0x142>
    4efc:	68bb      	ldr	r3, [r7, #8]
    4efe:	3318      	adds	r3, #24
    4f00:	4618      	mov	r0, r3
    4f02:	f7fe fea9 	bl	3c58 <vListRemove>
    4f06:	68bb      	ldr	r3, [r7, #8]
    4f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4f0a:	f640 2358 	movw	r3, #2648	; 0xa58
    4f0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f12:	681b      	ldr	r3, [r3, #0]
    4f14:	429a      	cmp	r2, r3
    4f16:	d906      	bls.n	4f26 <vTaskIncrementTick+0x162>
    4f18:	68bb      	ldr	r3, [r7, #8]
    4f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4f1c:	f640 2358 	movw	r3, #2648	; 0xa58
    4f20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f24:	601a      	str	r2, [r3, #0]
    4f26:	68bb      	ldr	r3, [r7, #8]
    4f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4f2a:	4613      	mov	r3, r2
    4f2c:	009b      	lsls	r3, r3, #2
    4f2e:	4413      	add	r3, r2
    4f30:	009b      	lsls	r3, r3, #2
    4f32:	f640 024c 	movw	r2, #2124	; 0x84c
    4f36:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4f3a:	441a      	add	r2, r3
    4f3c:	68bb      	ldr	r3, [r7, #8]
    4f3e:	3304      	adds	r3, #4
    4f40:	4610      	mov	r0, r2
    4f42:	4619      	mov	r1, r3
    4f44:	f7fe fe28 	bl	3b98 <vListInsertEnd>
    4f48:	e7a5      	b.n	4e96 <vTaskIncrementTick+0xd2>
    4f4a:	e00c      	b.n	4f66 <vTaskIncrementTick+0x1a2>
	}
	else
	{
		++uxMissedTicks;
    4f4c:	f640 2364 	movw	r3, #2660	; 0xa64
    4f50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f54:	681b      	ldr	r3, [r3, #0]
    4f56:	1c5a      	adds	r2, r3, #1
    4f58:	f640 2364 	movw	r3, #2660	; 0xa64
    4f5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f60:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    4f62:	f012 fa83 	bl	1746c <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    4f66:	f640 2364 	movw	r3, #2660	; 0xa64
    4f6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f6e:	681b      	ldr	r3, [r3, #0]
    4f70:	2b00      	cmp	r3, #0
    4f72:	d101      	bne.n	4f78 <vTaskIncrementTick+0x1b4>
		{
			vApplicationTickHook();
    4f74:	f012 fa7a 	bl	1746c <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    4f78:	3710      	adds	r7, #16
    4f7a:	46bd      	mov	sp, r7
    4f7c:	bd80      	pop	{r7, pc}
    4f7e:	bf00      	nop

00004f80 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    4f80:	b580      	push	{r7, lr}
    4f82:	b082      	sub	sp, #8
    4f84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    4f86:	f640 2360 	movw	r3, #2656	; 0xa60
    4f8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f8e:	681b      	ldr	r3, [r3, #0]
    4f90:	2b00      	cmp	r3, #0
    4f92:	d006      	beq.n	4fa2 <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    4f94:	f640 2368 	movw	r3, #2664	; 0xa68
    4f98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f9c:	2201      	movs	r2, #1
    4f9e:	601a      	str	r2, [r3, #0]
    4fa0:	e047      	b.n	5032 <vTaskSwitchContext+0xb2>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    4fa2:	f012 fa5d 	bl	17460 <myTraceSwitchedOut>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    4fa6:	e00a      	b.n	4fbe <vTaskSwitchContext+0x3e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    4fa8:	f640 2358 	movw	r3, #2648	; 0xa58
    4fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fb0:	681b      	ldr	r3, [r3, #0]
    4fb2:	1e5a      	subs	r2, r3, #1
    4fb4:	f640 2358 	movw	r3, #2648	; 0xa58
    4fb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fbc:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    4fbe:	f640 2358 	movw	r3, #2648	; 0xa58
    4fc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fc6:	6819      	ldr	r1, [r3, #0]
    4fc8:	f640 024c 	movw	r2, #2124	; 0x84c
    4fcc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4fd0:	460b      	mov	r3, r1
    4fd2:	009b      	lsls	r3, r3, #2
    4fd4:	440b      	add	r3, r1
    4fd6:	009b      	lsls	r3, r3, #2
    4fd8:	4413      	add	r3, r2
    4fda:	681b      	ldr	r3, [r3, #0]
    4fdc:	2b00      	cmp	r3, #0
    4fde:	d0e3      	beq.n	4fa8 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    4fe0:	f640 2358 	movw	r3, #2648	; 0xa58
    4fe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fe8:	681a      	ldr	r2, [r3, #0]
    4fea:	4613      	mov	r3, r2
    4fec:	009b      	lsls	r3, r3, #2
    4fee:	4413      	add	r3, r2
    4ff0:	009b      	lsls	r3, r3, #2
    4ff2:	f640 024c 	movw	r2, #2124	; 0x84c
    4ff6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4ffa:	4413      	add	r3, r2
    4ffc:	607b      	str	r3, [r7, #4]
    4ffe:	687b      	ldr	r3, [r7, #4]
    5000:	685b      	ldr	r3, [r3, #4]
    5002:	685a      	ldr	r2, [r3, #4]
    5004:	687b      	ldr	r3, [r7, #4]
    5006:	605a      	str	r2, [r3, #4]
    5008:	687b      	ldr	r3, [r7, #4]
    500a:	685a      	ldr	r2, [r3, #4]
    500c:	687b      	ldr	r3, [r7, #4]
    500e:	3308      	adds	r3, #8
    5010:	429a      	cmp	r2, r3
    5012:	d104      	bne.n	501e <vTaskSwitchContext+0x9e>
    5014:	687b      	ldr	r3, [r7, #4]
    5016:	685b      	ldr	r3, [r3, #4]
    5018:	685a      	ldr	r2, [r3, #4]
    501a:	687b      	ldr	r3, [r7, #4]
    501c:	605a      	str	r2, [r3, #4]
    501e:	687b      	ldr	r3, [r7, #4]
    5020:	685b      	ldr	r3, [r3, #4]
    5022:	68da      	ldr	r2, [r3, #12]
    5024:	f640 0348 	movw	r3, #2120	; 0x848
    5028:	f2c2 0300 	movt	r3, #8192	; 0x2000
    502c:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
    502e:	f012 fa11 	bl	17454 <myTraceSwitchedIn>
	}
}
    5032:	3708      	adds	r7, #8
    5034:	46bd      	mov	sp, r7
    5036:	bd80      	pop	{r7, pc}

00005038 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    5038:	b580      	push	{r7, lr}
    503a:	b084      	sub	sp, #16
    503c:	af00      	add	r7, sp, #0
    503e:	6078      	str	r0, [r7, #4]
    5040:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    5042:	f640 0348 	movw	r3, #2120	; 0x848
    5046:	f2c2 0300 	movt	r3, #8192	; 0x2000
    504a:	681b      	ldr	r3, [r3, #0]
    504c:	3318      	adds	r3, #24
    504e:	6878      	ldr	r0, [r7, #4]
    5050:	4619      	mov	r1, r3
    5052:	f7fe fdc9 	bl	3be8 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5056:	f640 0348 	movw	r3, #2120	; 0x848
    505a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    505e:	681b      	ldr	r3, [r3, #0]
    5060:	3304      	adds	r3, #4
    5062:	4618      	mov	r0, r3
    5064:	f7fe fdf8 	bl	3c58 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    5068:	683b      	ldr	r3, [r7, #0]
    506a:	f1b3 3fff 	cmp.w	r3, #4294967295
    506e:	d10d      	bne.n	508c <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5070:	f640 0348 	movw	r3, #2120	; 0x848
    5074:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5078:	681b      	ldr	r3, [r3, #0]
    507a:	3304      	adds	r3, #4
    507c:	f640 2038 	movw	r0, #2616	; 0xa38
    5080:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5084:	4619      	mov	r1, r3
    5086:	f7fe fd87 	bl	3b98 <vListInsertEnd>
    508a:	e00a      	b.n	50a2 <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    508c:	f640 2350 	movw	r3, #2640	; 0xa50
    5090:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5094:	681a      	ldr	r2, [r3, #0]
    5096:	683b      	ldr	r3, [r7, #0]
    5098:	4413      	add	r3, r2
    509a:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    509c:	68f8      	ldr	r0, [r7, #12]
    509e:	f000 f99f 	bl	53e0 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    50a2:	3710      	adds	r7, #16
    50a4:	46bd      	mov	sp, r7
    50a6:	bd80      	pop	{r7, pc}

000050a8 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    50a8:	b580      	push	{r7, lr}
    50aa:	b084      	sub	sp, #16
    50ac:	af00      	add	r7, sp, #0
    50ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    50b0:	687b      	ldr	r3, [r7, #4]
    50b2:	68db      	ldr	r3, [r3, #12]
    50b4:	68db      	ldr	r3, [r3, #12]
    50b6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    50b8:	68bb      	ldr	r3, [r7, #8]
    50ba:	3318      	adds	r3, #24
    50bc:	4618      	mov	r0, r3
    50be:	f7fe fdcb 	bl	3c58 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    50c2:	f640 2360 	movw	r3, #2656	; 0xa60
    50c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50ca:	681b      	ldr	r3, [r3, #0]
    50cc:	2b00      	cmp	r3, #0
    50ce:	d126      	bne.n	511e <xTaskRemoveFromEventList+0x76>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    50d0:	68bb      	ldr	r3, [r7, #8]
    50d2:	3304      	adds	r3, #4
    50d4:	4618      	mov	r0, r3
    50d6:	f7fe fdbf 	bl	3c58 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    50da:	68bb      	ldr	r3, [r7, #8]
    50dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    50de:	f640 2358 	movw	r3, #2648	; 0xa58
    50e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50e6:	681b      	ldr	r3, [r3, #0]
    50e8:	429a      	cmp	r2, r3
    50ea:	d906      	bls.n	50fa <xTaskRemoveFromEventList+0x52>
    50ec:	68bb      	ldr	r3, [r7, #8]
    50ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    50f0:	f640 2358 	movw	r3, #2648	; 0xa58
    50f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50f8:	601a      	str	r2, [r3, #0]
    50fa:	68bb      	ldr	r3, [r7, #8]
    50fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    50fe:	4613      	mov	r3, r2
    5100:	009b      	lsls	r3, r3, #2
    5102:	4413      	add	r3, r2
    5104:	009b      	lsls	r3, r3, #2
    5106:	f640 024c 	movw	r2, #2124	; 0x84c
    510a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    510e:	441a      	add	r2, r3
    5110:	68bb      	ldr	r3, [r7, #8]
    5112:	3304      	adds	r3, #4
    5114:	4610      	mov	r0, r2
    5116:	4619      	mov	r1, r3
    5118:	f7fe fd3e 	bl	3b98 <vListInsertEnd>
    511c:	e008      	b.n	5130 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    511e:	68bb      	ldr	r3, [r7, #8]
    5120:	3318      	adds	r3, #24
    5122:	f640 200c 	movw	r0, #2572	; 0xa0c
    5126:	f2c2 0000 	movt	r0, #8192	; 0x2000
    512a:	4619      	mov	r1, r3
    512c:	f7fe fd34 	bl	3b98 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    5130:	68bb      	ldr	r3, [r7, #8]
    5132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5134:	f640 0348 	movw	r3, #2120	; 0x848
    5138:	f2c2 0300 	movt	r3, #8192	; 0x2000
    513c:	681b      	ldr	r3, [r3, #0]
    513e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5140:	429a      	cmp	r2, r3
    5142:	d302      	bcc.n	514a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    5144:	2301      	movs	r3, #1
    5146:	60fb      	str	r3, [r7, #12]
    5148:	e001      	b.n	514e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
    514a:	2300      	movs	r3, #0
    514c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    514e:	68fb      	ldr	r3, [r7, #12]
}
    5150:	4618      	mov	r0, r3
    5152:	3710      	adds	r7, #16
    5154:	46bd      	mov	sp, r7
    5156:	bd80      	pop	{r7, pc}

00005158 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    5158:	b480      	push	{r7}
    515a:	b083      	sub	sp, #12
    515c:	af00      	add	r7, sp, #0
    515e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    5160:	f640 236c 	movw	r3, #2668	; 0xa6c
    5164:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5168:	681a      	ldr	r2, [r3, #0]
    516a:	687b      	ldr	r3, [r7, #4]
    516c:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    516e:	f640 2350 	movw	r3, #2640	; 0xa50
    5172:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5176:	681a      	ldr	r2, [r3, #0]
    5178:	687b      	ldr	r3, [r7, #4]
    517a:	605a      	str	r2, [r3, #4]
}
    517c:	370c      	adds	r7, #12
    517e:	46bd      	mov	sp, r7
    5180:	f85d 7b04 	ldr.w	r7, [sp], #4
    5184:	4770      	bx	lr
    5186:	bf00      	nop

00005188 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    5188:	b580      	push	{r7, lr}
    518a:	b084      	sub	sp, #16
    518c:	af00      	add	r7, sp, #0
    518e:	6078      	str	r0, [r7, #4]
    5190:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    5192:	f000 fb13 	bl	57bc <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    5196:	683b      	ldr	r3, [r7, #0]
    5198:	681b      	ldr	r3, [r3, #0]
    519a:	f1b3 3fff 	cmp.w	r3, #4294967295
    519e:	d102      	bne.n	51a6 <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    51a0:	2300      	movs	r3, #0
    51a2:	60fb      	str	r3, [r7, #12]
    51a4:	e035      	b.n	5212 <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    51a6:	687b      	ldr	r3, [r7, #4]
    51a8:	681a      	ldr	r2, [r3, #0]
    51aa:	f640 236c 	movw	r3, #2668	; 0xa6c
    51ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51b2:	681b      	ldr	r3, [r3, #0]
    51b4:	429a      	cmp	r2, r3
    51b6:	d00b      	beq.n	51d0 <xTaskCheckForTimeOut+0x48>
    51b8:	687b      	ldr	r3, [r7, #4]
    51ba:	685a      	ldr	r2, [r3, #4]
    51bc:	f640 2350 	movw	r3, #2640	; 0xa50
    51c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51c4:	681b      	ldr	r3, [r3, #0]
    51c6:	429a      	cmp	r2, r3
    51c8:	d802      	bhi.n	51d0 <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    51ca:	2301      	movs	r3, #1
    51cc:	60fb      	str	r3, [r7, #12]
    51ce:	e020      	b.n	5212 <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    51d0:	f640 2350 	movw	r3, #2640	; 0xa50
    51d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51d8:	681a      	ldr	r2, [r3, #0]
    51da:	687b      	ldr	r3, [r7, #4]
    51dc:	685b      	ldr	r3, [r3, #4]
    51de:	1ad2      	subs	r2, r2, r3
    51e0:	683b      	ldr	r3, [r7, #0]
    51e2:	681b      	ldr	r3, [r3, #0]
    51e4:	429a      	cmp	r2, r3
    51e6:	d212      	bcs.n	520e <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    51e8:	683b      	ldr	r3, [r7, #0]
    51ea:	681a      	ldr	r2, [r3, #0]
    51ec:	687b      	ldr	r3, [r7, #4]
    51ee:	6859      	ldr	r1, [r3, #4]
    51f0:	f640 2350 	movw	r3, #2640	; 0xa50
    51f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51f8:	681b      	ldr	r3, [r3, #0]
    51fa:	1acb      	subs	r3, r1, r3
    51fc:	441a      	add	r2, r3
    51fe:	683b      	ldr	r3, [r7, #0]
    5200:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    5202:	6878      	ldr	r0, [r7, #4]
    5204:	f7ff ffa8 	bl	5158 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    5208:	2300      	movs	r3, #0
    520a:	60fb      	str	r3, [r7, #12]
    520c:	e001      	b.n	5212 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    520e:	2301      	movs	r3, #1
    5210:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    5212:	f000 fae9 	bl	57e8 <vPortExitCritical>

	return xReturn;
    5216:	68fb      	ldr	r3, [r7, #12]
}
    5218:	4618      	mov	r0, r3
    521a:	3710      	adds	r7, #16
    521c:	46bd      	mov	sp, r7
    521e:	bd80      	pop	{r7, pc}

00005220 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    5220:	b480      	push	{r7}
    5222:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    5224:	f640 2368 	movw	r3, #2664	; 0xa68
    5228:	f2c2 0300 	movt	r3, #8192	; 0x2000
    522c:	2201      	movs	r2, #1
    522e:	601a      	str	r2, [r3, #0]
}
    5230:	46bd      	mov	sp, r7
    5232:	f85d 7b04 	ldr.w	r7, [sp], #4
    5236:	4770      	bx	lr

00005238 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    5238:	b580      	push	{r7, lr}
    523a:	b082      	sub	sp, #8
    523c:	af00      	add	r7, sp, #0
    523e:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    5240:	f000 f886 	bl	5350 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    5244:	f000 faac 	bl	57a0 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    5248:	e7fa      	b.n	5240 <prvIdleTask+0x8>
    524a:	bf00      	nop

0000524c <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    524c:	b580      	push	{r7, lr}
    524e:	b084      	sub	sp, #16
    5250:	af00      	add	r7, sp, #0
    5252:	60f8      	str	r0, [r7, #12]
    5254:	60b9      	str	r1, [r7, #8]
    5256:	607a      	str	r2, [r7, #4]
    5258:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    525a:	68fb      	ldr	r3, [r7, #12]
    525c:	3334      	adds	r3, #52	; 0x34
    525e:	4618      	mov	r0, r3
    5260:	68b9      	ldr	r1, [r7, #8]
    5262:	2210      	movs	r2, #16
    5264:	f013 fa7c 	bl	18760 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    5268:	68fb      	ldr	r3, [r7, #12]
    526a:	2200      	movs	r2, #0
    526c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    5270:	687b      	ldr	r3, [r7, #4]
    5272:	2b13      	cmp	r3, #19
    5274:	d901      	bls.n	527a <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    5276:	2313      	movs	r3, #19
    5278:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    527a:	68fb      	ldr	r3, [r7, #12]
    527c:	687a      	ldr	r2, [r7, #4]
    527e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    5280:	68fb      	ldr	r3, [r7, #12]
    5282:	687a      	ldr	r2, [r7, #4]
    5284:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    5286:	68fb      	ldr	r3, [r7, #12]
    5288:	3304      	adds	r3, #4
    528a:	4618      	mov	r0, r3
    528c:	f7fe fc78 	bl	3b80 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    5290:	68fb      	ldr	r3, [r7, #12]
    5292:	3318      	adds	r3, #24
    5294:	4618      	mov	r0, r3
    5296:	f7fe fc73 	bl	3b80 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    529a:	68fb      	ldr	r3, [r7, #12]
    529c:	68fa      	ldr	r2, [r7, #12]
    529e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    52a0:	687b      	ldr	r3, [r7, #4]
    52a2:	f1c3 0214 	rsb	r2, r3, #20
    52a6:	68fb      	ldr	r3, [r7, #12]
    52a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    52aa:	68fb      	ldr	r3, [r7, #12]
    52ac:	68fa      	ldr	r2, [r7, #12]
    52ae:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    52b0:	3710      	adds	r7, #16
    52b2:	46bd      	mov	sp, r7
    52b4:	bd80      	pop	{r7, pc}
    52b6:	bf00      	nop

000052b8 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    52b8:	b580      	push	{r7, lr}
    52ba:	b082      	sub	sp, #8
    52bc:	af00      	add	r7, sp, #0
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    52be:	2300      	movs	r3, #0
    52c0:	607b      	str	r3, [r7, #4]
    52c2:	e00f      	b.n	52e4 <prvInitialiseTaskLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    52c4:	687a      	ldr	r2, [r7, #4]
    52c6:	4613      	mov	r3, r2
    52c8:	009b      	lsls	r3, r3, #2
    52ca:	4413      	add	r3, r2
    52cc:	009b      	lsls	r3, r3, #2
    52ce:	f640 024c 	movw	r2, #2124	; 0x84c
    52d2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    52d6:	4413      	add	r3, r2
    52d8:	4618      	mov	r0, r3
    52da:	f7fe fc31 	bl	3b40 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    52de:	687b      	ldr	r3, [r7, #4]
    52e0:	3301      	adds	r3, #1
    52e2:	607b      	str	r3, [r7, #4]
    52e4:	687b      	ldr	r3, [r7, #4]
    52e6:	2b13      	cmp	r3, #19
    52e8:	d9ec      	bls.n	52c4 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    52ea:	f640 10dc 	movw	r0, #2524	; 0x9dc
    52ee:	f2c2 0000 	movt	r0, #8192	; 0x2000
    52f2:	f7fe fc25 	bl	3b40 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    52f6:	f640 10f0 	movw	r0, #2544	; 0x9f0
    52fa:	f2c2 0000 	movt	r0, #8192	; 0x2000
    52fe:	f7fe fc1f 	bl	3b40 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    5302:	f640 200c 	movw	r0, #2572	; 0xa0c
    5306:	f2c2 0000 	movt	r0, #8192	; 0x2000
    530a:	f7fe fc19 	bl	3b40 <vListInitialise>


	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    530e:	f640 2020 	movw	r0, #2592	; 0xa20
    5312:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5316:	f7fe fc13 	bl	3b40 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    531a:	f640 2038 	movw	r0, #2616	; 0xa38
    531e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5322:	f7fe fc0d 	bl	3b40 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    5326:	f640 2304 	movw	r3, #2564	; 0xa04
    532a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    532e:	f640 12dc 	movw	r2, #2524	; 0x9dc
    5332:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5336:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    5338:	f640 2308 	movw	r3, #2568	; 0xa08
    533c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5340:	f640 12f0 	movw	r2, #2544	; 0x9f0
    5344:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5348:	601a      	str	r2, [r3, #0]
}
    534a:	3708      	adds	r7, #8
    534c:	46bd      	mov	sp, r7
    534e:	bd80      	pop	{r7, pc}

00005350 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    5350:	b580      	push	{r7, lr}
    5352:	b082      	sub	sp, #8
    5354:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    5356:	f640 2334 	movw	r3, #2612	; 0xa34
    535a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    535e:	681b      	ldr	r3, [r3, #0]
    5360:	2b00      	cmp	r3, #0
    5362:	d03a      	beq.n	53da <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    5364:	f7ff fc4c 	bl	4c00 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    5368:	f640 2320 	movw	r3, #2592	; 0xa20
    536c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5370:	681b      	ldr	r3, [r3, #0]
    5372:	2b00      	cmp	r3, #0
    5374:	bf14      	ite	ne
    5376:	2300      	movne	r3, #0
    5378:	2301      	moveq	r3, #1
    537a:	b2db      	uxtb	r3, r3
    537c:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    537e:	f7ff fc51 	bl	4c24 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    5382:	687b      	ldr	r3, [r7, #4]
    5384:	2b00      	cmp	r3, #0
    5386:	d128      	bne.n	53da <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    5388:	f000 fa18 	bl	57bc <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    538c:	f640 2320 	movw	r3, #2592	; 0xa20
    5390:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5394:	68db      	ldr	r3, [r3, #12]
    5396:	68db      	ldr	r3, [r3, #12]
    5398:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    539a:	683b      	ldr	r3, [r7, #0]
    539c:	3304      	adds	r3, #4
    539e:	4618      	mov	r0, r3
    53a0:	f7fe fc5a 	bl	3c58 <vListRemove>
					--uxCurrentNumberOfTasks;
    53a4:	f640 234c 	movw	r3, #2636	; 0xa4c
    53a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53ac:	681b      	ldr	r3, [r3, #0]
    53ae:	1e5a      	subs	r2, r3, #1
    53b0:	f640 234c 	movw	r3, #2636	; 0xa4c
    53b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53b8:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    53ba:	f640 2334 	movw	r3, #2612	; 0xa34
    53be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53c2:	681b      	ldr	r3, [r3, #0]
    53c4:	1e5a      	subs	r2, r3, #1
    53c6:	f640 2334 	movw	r3, #2612	; 0xa34
    53ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53ce:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    53d0:	f000 fa0a 	bl	57e8 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    53d4:	6838      	ldr	r0, [r7, #0]
    53d6:	f000 f879 	bl	54cc <prvDeleteTCB>
			}
		}
	}
	#endif
}
    53da:	3708      	adds	r7, #8
    53dc:	46bd      	mov	sp, r7
    53de:	bd80      	pop	{r7, pc}

000053e0 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    53e0:	b580      	push	{r7, lr}
    53e2:	b082      	sub	sp, #8
    53e4:	af00      	add	r7, sp, #0
    53e6:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    53e8:	f640 0348 	movw	r3, #2120	; 0x848
    53ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53f0:	681b      	ldr	r3, [r3, #0]
    53f2:	687a      	ldr	r2, [r7, #4]
    53f4:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    53f6:	f640 2350 	movw	r3, #2640	; 0xa50
    53fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53fe:	681b      	ldr	r3, [r3, #0]
    5400:	687a      	ldr	r2, [r7, #4]
    5402:	429a      	cmp	r2, r3
    5404:	d20f      	bcs.n	5426 <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5406:	f640 2308 	movw	r3, #2568	; 0xa08
    540a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    540e:	681a      	ldr	r2, [r3, #0]
    5410:	f640 0348 	movw	r3, #2120	; 0x848
    5414:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5418:	681b      	ldr	r3, [r3, #0]
    541a:	3304      	adds	r3, #4
    541c:	4610      	mov	r0, r2
    541e:	4619      	mov	r1, r3
    5420:	f7fe fbe2 	bl	3be8 <vListInsert>
    5424:	e01c      	b.n	5460 <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5426:	f640 2304 	movw	r3, #2564	; 0xa04
    542a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    542e:	681a      	ldr	r2, [r3, #0]
    5430:	f640 0348 	movw	r3, #2120	; 0x848
    5434:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5438:	681b      	ldr	r3, [r3, #0]
    543a:	3304      	adds	r3, #4
    543c:	4610      	mov	r0, r2
    543e:	4619      	mov	r1, r3
    5440:	f7fe fbd2 	bl	3be8 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    5444:	f240 2374 	movw	r3, #628	; 0x274
    5448:	f2c2 0300 	movt	r3, #8192	; 0x2000
    544c:	681b      	ldr	r3, [r3, #0]
    544e:	687a      	ldr	r2, [r7, #4]
    5450:	429a      	cmp	r2, r3
    5452:	d205      	bcs.n	5460 <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    5454:	f240 2374 	movw	r3, #628	; 0x274
    5458:	f2c2 0300 	movt	r3, #8192	; 0x2000
    545c:	687a      	ldr	r2, [r7, #4]
    545e:	601a      	str	r2, [r3, #0]
		}
	}
}
    5460:	3708      	adds	r7, #8
    5462:	46bd      	mov	sp, r7
    5464:	bd80      	pop	{r7, pc}
    5466:	bf00      	nop

00005468 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    5468:	b580      	push	{r7, lr}
    546a:	b084      	sub	sp, #16
    546c:	af00      	add	r7, sp, #0
    546e:	4603      	mov	r3, r0
    5470:	6039      	str	r1, [r7, #0]
    5472:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    5474:	2050      	movs	r0, #80	; 0x50
    5476:	f000 fa1b 	bl	58b0 <pvPortMalloc>
    547a:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    547c:	68fb      	ldr	r3, [r7, #12]
    547e:	2b00      	cmp	r3, #0
    5480:	d01f      	beq.n	54c2 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    5482:	683b      	ldr	r3, [r7, #0]
    5484:	2b00      	cmp	r3, #0
    5486:	d106      	bne.n	5496 <prvAllocateTCBAndStack+0x2e>
    5488:	88fb      	ldrh	r3, [r7, #6]
    548a:	009b      	lsls	r3, r3, #2
    548c:	4618      	mov	r0, r3
    548e:	f000 fa0f 	bl	58b0 <pvPortMalloc>
    5492:	4603      	mov	r3, r0
    5494:	e000      	b.n	5498 <prvAllocateTCBAndStack+0x30>
    5496:	683b      	ldr	r3, [r7, #0]
    5498:	68fa      	ldr	r2, [r7, #12]
    549a:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    549c:	68fb      	ldr	r3, [r7, #12]
    549e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    54a0:	2b00      	cmp	r3, #0
    54a2:	d105      	bne.n	54b0 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    54a4:	68f8      	ldr	r0, [r7, #12]
    54a6:	f000 fac7 	bl	5a38 <vPortFree>
			pxNewTCB = NULL;
    54aa:	2300      	movs	r3, #0
    54ac:	60fb      	str	r3, [r7, #12]
    54ae:	e008      	b.n	54c2 <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    54b0:	68fb      	ldr	r3, [r7, #12]
    54b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    54b4:	88fb      	ldrh	r3, [r7, #6]
    54b6:	009b      	lsls	r3, r3, #2
    54b8:	4610      	mov	r0, r2
    54ba:	21a5      	movs	r1, #165	; 0xa5
    54bc:	461a      	mov	r2, r3
    54be:	f013 f8ff 	bl	186c0 <memset>
		}
	}

	return pxNewTCB;
    54c2:	68fb      	ldr	r3, [r7, #12]
}
    54c4:	4618      	mov	r0, r3
    54c6:	3710      	adds	r7, #16
    54c8:	46bd      	mov	sp, r7
    54ca:	bd80      	pop	{r7, pc}

000054cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    54cc:	b580      	push	{r7, lr}
    54ce:	b082      	sub	sp, #8
    54d0:	af00      	add	r7, sp, #0
    54d2:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    54d4:	687b      	ldr	r3, [r7, #4]
    54d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    54d8:	4618      	mov	r0, r3
    54da:	f000 faad 	bl	5a38 <vPortFree>
		vPortFree( pxTCB );
    54de:	6878      	ldr	r0, [r7, #4]
    54e0:	f000 faaa 	bl	5a38 <vPortFree>
	}
    54e4:	3708      	adds	r7, #8
    54e6:	46bd      	mov	sp, r7
    54e8:	bd80      	pop	{r7, pc}
    54ea:	bf00      	nop

000054ec <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    54ec:	b480      	push	{r7}
    54ee:	b083      	sub	sp, #12
    54f0:	af00      	add	r7, sp, #0
        xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    54f2:	f640 0348 	movw	r3, #2120	; 0x848
    54f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54fa:	681b      	ldr	r3, [r3, #0]
    54fc:	607b      	str	r3, [r7, #4]

		return xReturn;
    54fe:	687b      	ldr	r3, [r7, #4]
	}
    5500:	4618      	mov	r0, r3
    5502:	370c      	adds	r7, #12
    5504:	46bd      	mov	sp, r7
    5506:	f85d 7b04 	ldr.w	r7, [sp], #4
    550a:	4770      	bx	lr

0000550c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    550c:	b580      	push	{r7, lr}
    550e:	b084      	sub	sp, #16
    5510:	af00      	add	r7, sp, #0
    5512:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5514:	687b      	ldr	r3, [r7, #4]
    5516:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    5518:	68fb      	ldr	r3, [r7, #12]
    551a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    551c:	f640 0348 	movw	r3, #2120	; 0x848
    5520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5524:	681b      	ldr	r3, [r3, #0]
    5526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5528:	429a      	cmp	r2, r3
    552a:	d24f      	bcs.n	55cc <vTaskPriorityInherit+0xc0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    552c:	f640 0348 	movw	r3, #2120	; 0x848
    5530:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5534:	681b      	ldr	r3, [r3, #0]
    5536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5538:	f1c3 0214 	rsb	r2, r3, #20
    553c:	68fb      	ldr	r3, [r7, #12]
    553e:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    5540:	68fb      	ldr	r3, [r7, #12]
    5542:	6959      	ldr	r1, [r3, #20]
    5544:	68fb      	ldr	r3, [r7, #12]
    5546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5548:	4613      	mov	r3, r2
    554a:	009b      	lsls	r3, r3, #2
    554c:	4413      	add	r3, r2
    554e:	009b      	lsls	r3, r3, #2
    5550:	f640 024c 	movw	r2, #2124	; 0x84c
    5554:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5558:	4413      	add	r3, r2
    555a:	4299      	cmp	r1, r3
    555c:	d12e      	bne.n	55bc <vTaskPriorityInherit+0xb0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    555e:	68fb      	ldr	r3, [r7, #12]
    5560:	3304      	adds	r3, #4
    5562:	4618      	mov	r0, r3
    5564:	f7fe fb78 	bl	3c58 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5568:	f640 0348 	movw	r3, #2120	; 0x848
    556c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5570:	681b      	ldr	r3, [r3, #0]
    5572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5574:	68fb      	ldr	r3, [r7, #12]
    5576:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    5578:	68fb      	ldr	r3, [r7, #12]
    557a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    557c:	f640 2358 	movw	r3, #2648	; 0xa58
    5580:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5584:	681b      	ldr	r3, [r3, #0]
    5586:	429a      	cmp	r2, r3
    5588:	d906      	bls.n	5598 <vTaskPriorityInherit+0x8c>
    558a:	68fb      	ldr	r3, [r7, #12]
    558c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    558e:	f640 2358 	movw	r3, #2648	; 0xa58
    5592:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5596:	601a      	str	r2, [r3, #0]
    5598:	68fb      	ldr	r3, [r7, #12]
    559a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    559c:	4613      	mov	r3, r2
    559e:	009b      	lsls	r3, r3, #2
    55a0:	4413      	add	r3, r2
    55a2:	009b      	lsls	r3, r3, #2
    55a4:	f640 024c 	movw	r2, #2124	; 0x84c
    55a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    55ac:	441a      	add	r2, r3
    55ae:	68fb      	ldr	r3, [r7, #12]
    55b0:	3304      	adds	r3, #4
    55b2:	4610      	mov	r0, r2
    55b4:	4619      	mov	r1, r3
    55b6:	f7fe faef 	bl	3b98 <vListInsertEnd>
    55ba:	e007      	b.n	55cc <vTaskPriorityInherit+0xc0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    55bc:	f640 0348 	movw	r3, #2120	; 0x848
    55c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55c4:	681b      	ldr	r3, [r3, #0]
    55c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    55c8:	68fb      	ldr	r3, [r7, #12]
    55ca:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    55cc:	3710      	adds	r7, #16
    55ce:	46bd      	mov	sp, r7
    55d0:	bd80      	pop	{r7, pc}
    55d2:	bf00      	nop

000055d4 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    55d4:	b580      	push	{r7, lr}
    55d6:	b084      	sub	sp, #16
    55d8:	af00      	add	r7, sp, #0
    55da:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    55dc:	687b      	ldr	r3, [r7, #4]
    55de:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    55e0:	687b      	ldr	r3, [r7, #4]
    55e2:	2b00      	cmp	r3, #0
    55e4:	d035      	beq.n	5652 <vTaskPriorityDisinherit+0x7e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    55e6:	68fb      	ldr	r3, [r7, #12]
    55e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    55ea:	68fb      	ldr	r3, [r7, #12]
    55ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    55ee:	429a      	cmp	r2, r3
    55f0:	d02f      	beq.n	5652 <vTaskPriorityDisinherit+0x7e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    55f2:	68fb      	ldr	r3, [r7, #12]
    55f4:	3304      	adds	r3, #4
    55f6:	4618      	mov	r0, r3
    55f8:	f7fe fb2e 	bl	3c58 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    55fc:	68fb      	ldr	r3, [r7, #12]
    55fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    5600:	68fb      	ldr	r3, [r7, #12]
    5602:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    5604:	68fb      	ldr	r3, [r7, #12]
    5606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5608:	f1c3 0214 	rsb	r2, r3, #20
    560c:	68fb      	ldr	r3, [r7, #12]
    560e:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    5610:	68fb      	ldr	r3, [r7, #12]
    5612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5614:	f640 2358 	movw	r3, #2648	; 0xa58
    5618:	f2c2 0300 	movt	r3, #8192	; 0x2000
    561c:	681b      	ldr	r3, [r3, #0]
    561e:	429a      	cmp	r2, r3
    5620:	d906      	bls.n	5630 <vTaskPriorityDisinherit+0x5c>
    5622:	68fb      	ldr	r3, [r7, #12]
    5624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5626:	f640 2358 	movw	r3, #2648	; 0xa58
    562a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    562e:	601a      	str	r2, [r3, #0]
    5630:	68fb      	ldr	r3, [r7, #12]
    5632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5634:	4613      	mov	r3, r2
    5636:	009b      	lsls	r3, r3, #2
    5638:	4413      	add	r3, r2
    563a:	009b      	lsls	r3, r3, #2
    563c:	f640 024c 	movw	r2, #2124	; 0x84c
    5640:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5644:	441a      	add	r2, r3
    5646:	68fb      	ldr	r3, [r7, #12]
    5648:	3304      	adds	r3, #4
    564a:	4610      	mov	r0, r2
    564c:	4619      	mov	r1, r3
    564e:	f7fe faa3 	bl	3b98 <vListInsertEnd>
			}
		}
	}
    5652:	3710      	adds	r7, #16
    5654:	46bd      	mov	sp, r7
    5656:	bd80      	pop	{r7, pc}

00005658 <xTaskGetxStartTime>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_SEFM == 1)

    portTickType xTaskGetxStartTime( xTaskHandle pxTCB )
    {
    5658:	b480      	push	{r7}
    565a:	b083      	sub	sp, #12
    565c:	af00      	add	r7, sp, #0
    565e:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xStartTime;
    5660:	687b      	ldr	r3, [r7, #4]
    5662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    }
    5664:	4618      	mov	r0, r3
    5666:	370c      	adds	r7, #12
    5668:	46bd      	mov	sp, r7
    566a:	f85d 7b04 	ldr.w	r7, [sp], #4
    566e:	4770      	bx	lr

00005670 <xTaskGetxLet>:

    portTickType xTaskGetxLet( xTaskHandle pxTCB )
    {
    5670:	b480      	push	{r7}
    5672:	b083      	sub	sp, #12
    5674:	af00      	add	r7, sp, #0
    5676:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xLet;
    5678:	687b      	ldr	r3, [r7, #4]
    567a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
    567c:	4618      	mov	r0, r3
    567e:	370c      	adds	r7, #12
    5680:	46bd      	mov	sp, r7
    5682:	f85d 7b04 	ldr.w	r7, [sp], #4
    5686:	4770      	bx	lr

00005688 <vTaskSetxStartTime>:

    void vTaskSetxStartTime ( xTaskHandle pxTCB, portTickType xStartTime )
    {
    5688:	b480      	push	{r7}
    568a:	b083      	sub	sp, #12
    568c:	af00      	add	r7, sp, #0
    568e:	6078      	str	r0, [r7, #4]
    5690:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xStartTime = xStartTime; 
    5692:	687b      	ldr	r3, [r7, #4]
    5694:	683a      	ldr	r2, [r7, #0]
    5696:	645a      	str	r2, [r3, #68]	; 0x44
    }
    5698:	370c      	adds	r7, #12
    569a:	46bd      	mov	sp, r7
    569c:	f85d 7b04 	ldr.w	r7, [sp], #4
    56a0:	4770      	bx	lr
    56a2:	bf00      	nop

000056a4 <vTaskSetxLet>:

    void vTaskSetxLet( xTaskHandle pxTCB, portTickType xLet )
    {
    56a4:	b480      	push	{r7}
    56a6:	b083      	sub	sp, #12
    56a8:	af00      	add	r7, sp, #0
    56aa:	6078      	str	r0, [r7, #4]
    56ac:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xLet = xLet;
    56ae:	687b      	ldr	r3, [r7, #4]
    56b0:	683a      	ldr	r2, [r7, #0]
    56b2:	649a      	str	r2, [r3, #72]	; 0x48
    }
    56b4:	370c      	adds	r7, #12
    56b6:	46bd      	mov	sp, r7
    56b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    56bc:	4770      	bx	lr
    56be:	bf00      	nop

000056c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    56c0:	b480      	push	{r7}
    56c2:	b085      	sub	sp, #20
    56c4:	af00      	add	r7, sp, #0
    56c6:	60f8      	str	r0, [r7, #12]
    56c8:	60b9      	str	r1, [r7, #8]
    56ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    56cc:	68fb      	ldr	r3, [r7, #12]
    56ce:	3b04      	subs	r3, #4
    56d0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    56d2:	68fb      	ldr	r3, [r7, #12]
    56d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    56d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    56da:	68fb      	ldr	r3, [r7, #12]
    56dc:	3b04      	subs	r3, #4
    56de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    56e0:	68ba      	ldr	r2, [r7, #8]
    56e2:	68fb      	ldr	r3, [r7, #12]
    56e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    56e6:	68fb      	ldr	r3, [r7, #12]
    56e8:	3b04      	subs	r3, #4
    56ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    56ec:	68fb      	ldr	r3, [r7, #12]
    56ee:	2200      	movs	r2, #0
    56f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    56f2:	68fb      	ldr	r3, [r7, #12]
    56f4:	3b14      	subs	r3, #20
    56f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    56f8:	687a      	ldr	r2, [r7, #4]
    56fa:	68fb      	ldr	r3, [r7, #12]
    56fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    56fe:	68fb      	ldr	r3, [r7, #12]
    5700:	3b20      	subs	r3, #32
    5702:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    5704:	68fb      	ldr	r3, [r7, #12]
}
    5706:	4618      	mov	r0, r3
    5708:	3714      	adds	r7, #20
    570a:	46bd      	mov	sp, r7
    570c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5710:	4770      	bx	lr
    5712:	bf00      	nop

00005714 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    5714:	4b06      	ldr	r3, [pc, #24]	; (5730 <pxCurrentTCBConst2>)
    5716:	6819      	ldr	r1, [r3, #0]
    5718:	6808      	ldr	r0, [r1, #0]
    571a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    571e:	f380 8809 	msr	PSP, r0
    5722:	f04f 0000 	mov.w	r0, #0
    5726:	f380 8811 	msr	BASEPRI, r0
    572a:	f04e 0e0d 	orr.w	lr, lr, #13
    572e:	4770      	bx	lr

00005730 <pxCurrentTCBConst2>:
    5730:	20000848 	.word	0x20000848

00005734 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    5734:	485d      	ldr	r0, [pc, #372]	; (58ac <prvSetupTimerInterrupt+0x2c>)
    5736:	6800      	ldr	r0, [r0, #0]
    5738:	6800      	ldr	r0, [r0, #0]
    573a:	f380 8808 	msr	MSP, r0
    573e:	b662      	cpsie	i
    5740:	df00      	svc	0
    5742:	bf00      	nop

00005744 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    5744:	b580      	push	{r7, lr}
    5746:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    5748:	f64e 5320 	movw	r3, #60704	; 0xed20
    574c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5750:	f64e 5220 	movw	r2, #60704	; 0xed20
    5754:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5758:	6812      	ldr	r2, [r2, #0]
    575a:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    575e:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    5760:	f64e 5320 	movw	r3, #60704	; 0xed20
    5764:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5768:	f64e 5220 	movw	r2, #60704	; 0xed20
    576c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5770:	6812      	ldr	r2, [r2, #0]
    5772:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    5776:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    5778:	f000 f882 	bl	5880 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    577c:	f240 2378 	movw	r3, #632	; 0x278
    5780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5784:	2200      	movs	r2, #0
    5786:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    5788:	f7ff ffd4 	bl	5734 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    578c:	2300      	movs	r3, #0
}
    578e:	4618      	mov	r0, r3
    5790:	bd80      	pop	{r7, pc}
    5792:	bf00      	nop

00005794 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    5794:	b480      	push	{r7}
    5796:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    5798:	46bd      	mov	sp, r7
    579a:	f85d 7b04 	ldr.w	r7, [sp], #4
    579e:	4770      	bx	lr

000057a0 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    57a0:	b480      	push	{r7}
    57a2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    57a4:	f64e 5304 	movw	r3, #60676	; 0xed04
    57a8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    57ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    57b0:	601a      	str	r2, [r3, #0]
}
    57b2:	46bd      	mov	sp, r7
    57b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    57b8:	4770      	bx	lr
    57ba:	bf00      	nop

000057bc <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    57bc:	b480      	push	{r7}
    57be:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    57c0:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    57c4:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    57c8:	f240 2378 	movw	r3, #632	; 0x278
    57cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57d0:	681b      	ldr	r3, [r3, #0]
    57d2:	1c5a      	adds	r2, r3, #1
    57d4:	f240 2378 	movw	r3, #632	; 0x278
    57d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57dc:	601a      	str	r2, [r3, #0]
}
    57de:	46bd      	mov	sp, r7
    57e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    57e4:	4770      	bx	lr
    57e6:	bf00      	nop

000057e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    57e8:	b480      	push	{r7}
    57ea:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    57ec:	f240 2378 	movw	r3, #632	; 0x278
    57f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57f4:	681b      	ldr	r3, [r3, #0]
    57f6:	1e5a      	subs	r2, r3, #1
    57f8:	f240 2378 	movw	r3, #632	; 0x278
    57fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5800:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    5802:	f240 2378 	movw	r3, #632	; 0x278
    5806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    580a:	681b      	ldr	r3, [r3, #0]
    580c:	2b00      	cmp	r3, #0
    580e:	d103      	bne.n	5818 <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    5810:	f04f 0000 	mov.w	r0, #0
    5814:	f380 8811 	msr	BASEPRI, r0
	}
}
    5818:	46bd      	mov	sp, r7
    581a:	f85d 7b04 	ldr.w	r7, [sp], #4
    581e:	4770      	bx	lr

00005820 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    5820:	f3ef 8009 	mrs	r0, PSP
    5824:	4b0c      	ldr	r3, [pc, #48]	; (5858 <pxCurrentTCBConst>)
    5826:	681a      	ldr	r2, [r3, #0]
    5828:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    582c:	6010      	str	r0, [r2, #0]
    582e:	e92d 4008 	stmdb	sp!, {r3, lr}
    5832:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5836:	f380 8811 	msr	BASEPRI, r0
    583a:	f7ff fba1 	bl	4f80 <vTaskSwitchContext>
    583e:	f04f 0000 	mov.w	r0, #0
    5842:	f380 8811 	msr	BASEPRI, r0
    5846:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    584a:	6819      	ldr	r1, [r3, #0]
    584c:	6808      	ldr	r0, [r1, #0]
    584e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5852:	f380 8809 	msr	PSP, r0
    5856:	4770      	bx	lr

00005858 <pxCurrentTCBConst>:
    5858:	20000848 	.word	0x20000848

0000585c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    585c:	b580      	push	{r7, lr}
    585e:	b082      	sub	sp, #8
    5860:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    5862:	2300      	movs	r3, #0
    5864:	607b      	str	r3, [r7, #4]
    5866:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    586a:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    586e:	f7ff faa9 	bl	4dc4 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    5872:	f04f 0000 	mov.w	r0, #0
    5876:	f380 8811 	msr	BASEPRI, r0
}
    587a:	3708      	adds	r7, #8
    587c:	46bd      	mov	sp, r7
    587e:	bd80      	pop	{r7, pc}

00005880 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    5880:	b480      	push	{r7}
    5882:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    5884:	f24e 0314 	movw	r3, #57364	; 0xe014
    5888:	f2ce 0300 	movt	r3, #57344	; 0xe000
    588c:	f641 123f 	movw	r2, #6463	; 0x193f
    5890:	f2c0 0201 	movt	r2, #1
    5894:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    5896:	f24e 0310 	movw	r3, #57360	; 0xe010
    589a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    589e:	2207      	movs	r2, #7
    58a0:	601a      	str	r2, [r3, #0]
}
    58a2:	46bd      	mov	sp, r7
    58a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    58a8:	4770      	bx	lr
    58aa:	0000      	.short	0x0000
    58ac:	e000ed08 	.word	0xe000ed08

000058b0 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    58b0:	b580      	push	{r7, lr}
    58b2:	b08a      	sub	sp, #40	; 0x28
    58b4:	af00      	add	r7, sp, #0
    58b6:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    58b8:	2300      	movs	r3, #0
    58ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    58bc:	f7ff f9a0 	bl	4c00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    58c0:	f64a 2388 	movw	r3, #43656	; 0xaa88
    58c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58c8:	681b      	ldr	r3, [r3, #0]
    58ca:	2b00      	cmp	r3, #0
    58cc:	d130      	bne.n	5930 <pvPortMalloc+0x80>
		{
			prvHeapInit();
    58ce:	f64a 2378 	movw	r3, #43640	; 0xaa78
    58d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58d6:	f640 2278 	movw	r2, #2680	; 0xa78
    58da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    58de:	601a      	str	r2, [r3, #0]
    58e0:	f64a 2378 	movw	r3, #43640	; 0xaa78
    58e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58e8:	2200      	movs	r2, #0
    58ea:	605a      	str	r2, [r3, #4]
    58ec:	f64a 2380 	movw	r3, #43648	; 0xaa80
    58f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58f4:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    58f8:	605a      	str	r2, [r3, #4]
    58fa:	f64a 2380 	movw	r3, #43648	; 0xaa80
    58fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5902:	2200      	movs	r2, #0
    5904:	601a      	str	r2, [r3, #0]
    5906:	f640 2378 	movw	r3, #2680	; 0xa78
    590a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    590e:	617b      	str	r3, [r7, #20]
    5910:	697b      	ldr	r3, [r7, #20]
    5912:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    5916:	605a      	str	r2, [r3, #4]
    5918:	697a      	ldr	r2, [r7, #20]
    591a:	f64a 2380 	movw	r3, #43648	; 0xaa80
    591e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5922:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    5924:	f64a 2388 	movw	r3, #43656	; 0xaa88
    5928:	f2c2 0300 	movt	r3, #8192	; 0x2000
    592c:	2201      	movs	r2, #1
    592e:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    5930:	687b      	ldr	r3, [r7, #4]
    5932:	2b00      	cmp	r3, #0
    5934:	d00d      	beq.n	5952 <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    5936:	2310      	movs	r3, #16
    5938:	687a      	ldr	r2, [r7, #4]
    593a:	4413      	add	r3, r2
    593c:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    593e:	687b      	ldr	r3, [r7, #4]
    5940:	f003 0307 	and.w	r3, r3, #7
    5944:	2b00      	cmp	r3, #0
    5946:	d004      	beq.n	5952 <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    5948:	687b      	ldr	r3, [r7, #4]
    594a:	f023 0307 	bic.w	r3, r3, #7
    594e:	3308      	adds	r3, #8
    5950:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    5952:	687b      	ldr	r3, [r7, #4]
    5954:	2b00      	cmp	r3, #0
    5956:	d068      	beq.n	5a2a <pvPortMalloc+0x17a>
    5958:	687b      	ldr	r3, [r7, #4]
    595a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
    595e:	d264      	bcs.n	5a2a <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    5960:	f64a 2378 	movw	r3, #43640	; 0xaa78
    5964:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5968:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    596a:	f64a 2378 	movw	r3, #43640	; 0xaa78
    596e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5972:	681b      	ldr	r3, [r3, #0]
    5974:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5976:	e004      	b.n	5982 <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    5978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    597a:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    597e:	681b      	ldr	r3, [r3, #0]
    5980:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5984:	685a      	ldr	r2, [r3, #4]
    5986:	687b      	ldr	r3, [r7, #4]
    5988:	429a      	cmp	r2, r3
    598a:	d203      	bcs.n	5994 <pvPortMalloc+0xe4>
    598c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    598e:	681b      	ldr	r3, [r3, #0]
    5990:	2b00      	cmp	r3, #0
    5992:	d1f1      	bne.n	5978 <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    5994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5996:	f64a 2380 	movw	r3, #43648	; 0xaa80
    599a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    599e:	429a      	cmp	r2, r3
    59a0:	d043      	beq.n	5a2a <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    59a2:	6a3b      	ldr	r3, [r7, #32]
    59a4:	681a      	ldr	r2, [r3, #0]
    59a6:	2310      	movs	r3, #16
    59a8:	4413      	add	r3, r2
    59aa:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    59ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    59ae:	681a      	ldr	r2, [r3, #0]
    59b0:	6a3b      	ldr	r3, [r7, #32]
    59b2:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    59b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    59b6:	685a      	ldr	r2, [r3, #4]
    59b8:	687b      	ldr	r3, [r7, #4]
    59ba:	1ad2      	subs	r2, r2, r3
    59bc:	2310      	movs	r3, #16
    59be:	005b      	lsls	r3, r3, #1
    59c0:	429a      	cmp	r2, r3
    59c2:	d925      	bls.n	5a10 <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    59c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    59c6:	687b      	ldr	r3, [r7, #4]
    59c8:	4413      	add	r3, r2
    59ca:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    59cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    59ce:	685a      	ldr	r2, [r3, #4]
    59d0:	687b      	ldr	r3, [r7, #4]
    59d2:	1ad2      	subs	r2, r2, r3
    59d4:	693b      	ldr	r3, [r7, #16]
    59d6:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    59d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    59da:	687a      	ldr	r2, [r7, #4]
    59dc:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    59de:	693b      	ldr	r3, [r7, #16]
    59e0:	685b      	ldr	r3, [r3, #4]
    59e2:	60fb      	str	r3, [r7, #12]
    59e4:	f64a 2378 	movw	r3, #43640	; 0xaa78
    59e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59ec:	61bb      	str	r3, [r7, #24]
    59ee:	e002      	b.n	59f6 <pvPortMalloc+0x146>
    59f0:	69bb      	ldr	r3, [r7, #24]
    59f2:	681b      	ldr	r3, [r3, #0]
    59f4:	61bb      	str	r3, [r7, #24]
    59f6:	69bb      	ldr	r3, [r7, #24]
    59f8:	681b      	ldr	r3, [r3, #0]
    59fa:	685a      	ldr	r2, [r3, #4]
    59fc:	68fb      	ldr	r3, [r7, #12]
    59fe:	429a      	cmp	r2, r3
    5a00:	d3f6      	bcc.n	59f0 <pvPortMalloc+0x140>
    5a02:	69bb      	ldr	r3, [r7, #24]
    5a04:	681a      	ldr	r2, [r3, #0]
    5a06:	693b      	ldr	r3, [r7, #16]
    5a08:	601a      	str	r2, [r3, #0]
    5a0a:	69bb      	ldr	r3, [r7, #24]
    5a0c:	693a      	ldr	r2, [r7, #16]
    5a0e:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    5a10:	f240 237c 	movw	r3, #636	; 0x27c
    5a14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a18:	681a      	ldr	r2, [r3, #0]
    5a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5a1c:	685b      	ldr	r3, [r3, #4]
    5a1e:	1ad2      	subs	r2, r2, r3
    5a20:	f240 237c 	movw	r3, #636	; 0x27c
    5a24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a28:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    5a2a:	f7ff f8fb 	bl	4c24 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    5a2e:	69fb      	ldr	r3, [r7, #28]
}
    5a30:	4618      	mov	r0, r3
    5a32:	3728      	adds	r7, #40	; 0x28
    5a34:	46bd      	mov	sp, r7
    5a36:	bd80      	pop	{r7, pc}

00005a38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    5a38:	b580      	push	{r7, lr}
    5a3a:	b086      	sub	sp, #24
    5a3c:	af00      	add	r7, sp, #0
    5a3e:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    5a40:	687b      	ldr	r3, [r7, #4]
    5a42:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    5a44:	687b      	ldr	r3, [r7, #4]
    5a46:	2b00      	cmp	r3, #0
    5a48:	d030      	beq.n	5aac <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    5a4a:	2310      	movs	r3, #16
    5a4c:	425b      	negs	r3, r3
    5a4e:	693a      	ldr	r2, [r7, #16]
    5a50:	4413      	add	r3, r2
    5a52:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    5a54:	693b      	ldr	r3, [r7, #16]
    5a56:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    5a58:	f7ff f8d2 	bl	4c00 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    5a5c:	68fb      	ldr	r3, [r7, #12]
    5a5e:	685b      	ldr	r3, [r3, #4]
    5a60:	60bb      	str	r3, [r7, #8]
    5a62:	f64a 2378 	movw	r3, #43640	; 0xaa78
    5a66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a6a:	617b      	str	r3, [r7, #20]
    5a6c:	e002      	b.n	5a74 <vPortFree+0x3c>
    5a6e:	697b      	ldr	r3, [r7, #20]
    5a70:	681b      	ldr	r3, [r3, #0]
    5a72:	617b      	str	r3, [r7, #20]
    5a74:	697b      	ldr	r3, [r7, #20]
    5a76:	681b      	ldr	r3, [r3, #0]
    5a78:	685a      	ldr	r2, [r3, #4]
    5a7a:	68bb      	ldr	r3, [r7, #8]
    5a7c:	429a      	cmp	r2, r3
    5a7e:	d3f6      	bcc.n	5a6e <vPortFree+0x36>
    5a80:	697b      	ldr	r3, [r7, #20]
    5a82:	681a      	ldr	r2, [r3, #0]
    5a84:	68fb      	ldr	r3, [r7, #12]
    5a86:	601a      	str	r2, [r3, #0]
    5a88:	697b      	ldr	r3, [r7, #20]
    5a8a:	68fa      	ldr	r2, [r7, #12]
    5a8c:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    5a8e:	68fb      	ldr	r3, [r7, #12]
    5a90:	685a      	ldr	r2, [r3, #4]
    5a92:	f240 237c 	movw	r3, #636	; 0x27c
    5a96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a9a:	681b      	ldr	r3, [r3, #0]
    5a9c:	441a      	add	r2, r3
    5a9e:	f240 237c 	movw	r3, #636	; 0x27c
    5aa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5aa6:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    5aa8:	f7ff f8bc 	bl	4c24 <xTaskResumeAll>
	}
}
    5aac:	3718      	adds	r7, #24
    5aae:	46bd      	mov	sp, r7
    5ab0:	bd80      	pop	{r7, pc}
    5ab2:	bf00      	nop

00005ab4 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    5ab4:	b480      	push	{r7}
    5ab6:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    5ab8:	f240 237c 	movw	r3, #636	; 0x27c
    5abc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ac0:	681b      	ldr	r3, [r3, #0]
}
    5ac2:	4618      	mov	r0, r3
    5ac4:	46bd      	mov	sp, r7
    5ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5aca:	4770      	bx	lr

00005acc <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    5acc:	b480      	push	{r7}
    5ace:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    5ad0:	46bd      	mov	sp, r7
    5ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ad6:	4770      	bx	lr

00005ad8 <ground_calibrate>:
 * set to auto1 before MAX_DELAY_FOR_CALIBRATION secondes */
/**User must put verticaly the uav (nose bottom) and push
 * radio roll stick to get new calibration
 * If not, the default calibration is used.
 */
inline void ground_calibrate( void ) {
    5ad8:	b580      	push	{r7, lr}
    5ada:	af00      	add	r7, sp, #0
    break;
  case CALIB_DONE:
    break;
  }
#else*/
if(calib_status == NO_CALIB)
    5adc:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
    5ae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ae4:	781b      	ldrb	r3, [r3, #0]
    5ae6:	2b00      	cmp	r3, #0
    5ae8:	f040 815d 	bne.w	5da6 <ground_calibrate+0x2ce>
{
    if (cputime < MAX_DELAY_FOR_CALIBRATION && pprz_mode == PPRZ_MODE_AUTO1 ) {
    5aec:	f64a 2392 	movw	r3, #43666	; 0xaa92
    5af0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5af4:	881b      	ldrh	r3, [r3, #0]
    5af6:	2b09      	cmp	r3, #9
    5af8:	f201 8145 	bhi.w	6d86 <ground_calibrate+0x12ae>
    5afc:	f64a 2394 	movw	r3, #43668	; 0xaa94
    5b00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b04:	781b      	ldrb	r3, [r3, #0]
    5b06:	2b01      	cmp	r3, #1
    5b08:	f041 813d 	bne.w	6d86 <ground_calibrate+0x12ae>
      calib_status = WAITING_CALIB_CONTRAST;
    5b0c:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
    5b10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b14:	2201      	movs	r2, #1
    5b16:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_START();
    5b18:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5b1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b20:	781a      	ldrb	r2, [r3, #0]
    5b22:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    5b26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b2a:	781b      	ldrb	r3, [r3, #0]
    5b2c:	b2db      	uxtb	r3, r3
    5b2e:	429a      	cmp	r2, r3
    5b30:	d313      	bcc.n	5b5a <ground_calibrate+0x82>
    5b32:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    5b36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b3a:	781b      	ldrb	r3, [r3, #0]
    5b3c:	b2db      	uxtb	r3, r3
    5b3e:	461a      	mov	r2, r3
    5b40:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5b44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b48:	781b      	ldrb	r3, [r3, #0]
    5b4a:	1ad3      	subs	r3, r2, r3
    5b4c:	33ff      	adds	r3, #255	; 0xff
    5b4e:	2b04      	cmp	r3, #4
    5b50:	bfd4      	ite	le
    5b52:	2300      	movle	r3, #0
    5b54:	2301      	movgt	r3, #1
    5b56:	b2db      	uxtb	r3, r3
    5b58:	e011      	b.n	5b7e <ground_calibrate+0xa6>
    5b5a:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    5b5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b62:	781b      	ldrb	r3, [r3, #0]
    5b64:	b2db      	uxtb	r3, r3
    5b66:	461a      	mov	r2, r3
    5b68:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5b6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b70:	781b      	ldrb	r3, [r3, #0]
    5b72:	1ad3      	subs	r3, r2, r3
    5b74:	2b04      	cmp	r3, #4
    5b76:	bfd4      	ite	le
    5b78:	2300      	movle	r3, #0
    5b7a:	2301      	movgt	r3, #1
    5b7c:	b2db      	uxtb	r3, r3
    5b7e:	2b00      	cmp	r3, #0
    5b80:	f000 8103 	beq.w	5d8a <ground_calibrate+0x2b2>
    5b84:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b8c:	781b      	ldrb	r3, [r3, #0]
    5b8e:	461a      	mov	r2, r3
    5b90:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    5b94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b98:	2105      	movs	r1, #5
    5b9a:	5499      	strb	r1, [r3, r2]
    5b9c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5ba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ba4:	781b      	ldrb	r3, [r3, #0]
    5ba6:	3301      	adds	r3, #1
    5ba8:	b2da      	uxtb	r2, r3
    5baa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5bae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bb2:	701a      	strb	r2, [r3, #0]
    5bb4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bbc:	781b      	ldrb	r3, [r3, #0]
    5bbe:	2bff      	cmp	r3, #255	; 0xff
    5bc0:	d105      	bne.n	5bce <ground_calibrate+0xf6>
    5bc2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5bc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bca:	2200      	movs	r2, #0
    5bcc:	701a      	strb	r2, [r3, #0]
    5bce:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bd6:	781b      	ldrb	r3, [r3, #0]
    5bd8:	461a      	mov	r2, r3
    5bda:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    5bde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5be2:	2102      	movs	r1, #2
    5be4:	5499      	strb	r1, [r3, r2]
    5be6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bee:	781b      	ldrb	r3, [r3, #0]
    5bf0:	3301      	adds	r3, #1
    5bf2:	b2da      	uxtb	r2, r3
    5bf4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bfc:	701a      	strb	r2, [r3, #0]
    5bfe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5c02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c06:	781b      	ldrb	r3, [r3, #0]
    5c08:	2bff      	cmp	r3, #255	; 0xff
    5c0a:	d105      	bne.n	5c18 <ground_calibrate+0x140>
    5c0c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5c10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c14:	2200      	movs	r2, #0
    5c16:	701a      	strb	r2, [r3, #0]
    5c18:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    5c1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c20:	2202      	movs	r2, #2
    5c22:	701a      	strb	r2, [r3, #0]
    5c24:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    5c28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c2c:	2202      	movs	r2, #2
    5c2e:	701a      	strb	r2, [r3, #0]
    5c30:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5c34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c38:	781b      	ldrb	r3, [r3, #0]
    5c3a:	461a      	mov	r2, r3
    5c3c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    5c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c44:	7819      	ldrb	r1, [r3, #0]
    5c46:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    5c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c4e:	5499      	strb	r1, [r3, r2]
    5c50:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5c54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c58:	781b      	ldrb	r3, [r3, #0]
    5c5a:	3301      	adds	r3, #1
    5c5c:	b2da      	uxtb	r2, r3
    5c5e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5c62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c66:	701a      	strb	r2, [r3, #0]
    5c68:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c70:	781b      	ldrb	r3, [r3, #0]
    5c72:	2bff      	cmp	r3, #255	; 0xff
    5c74:	d105      	bne.n	5c82 <ground_calibrate+0x1aa>
    5c76:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5c7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c7e:	2200      	movs	r2, #0
    5c80:	701a      	strb	r2, [r3, #0]
    5c82:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5c86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c8a:	781b      	ldrb	r3, [r3, #0]
    5c8c:	461a      	mov	r2, r3
    5c8e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    5c92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c96:	7819      	ldrb	r1, [r3, #0]
    5c98:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    5c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ca0:	5499      	strb	r1, [r3, r2]
    5ca2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5ca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5caa:	781b      	ldrb	r3, [r3, #0]
    5cac:	3301      	adds	r3, #1
    5cae:	b2da      	uxtb	r2, r3
    5cb0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5cb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cb8:	701a      	strb	r2, [r3, #0]
    5cba:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5cbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cc2:	781b      	ldrb	r3, [r3, #0]
    5cc4:	2bff      	cmp	r3, #255	; 0xff
    5cc6:	d105      	bne.n	5cd4 <ground_calibrate+0x1fc>
    5cc8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5ccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cd0:	2200      	movs	r2, #0
    5cd2:	701a      	strb	r2, [r3, #0]
    5cd4:	f242 0339 	movw	r3, #8249	; 0x2039
    5cd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cdc:	781b      	ldrb	r3, [r3, #0]
    5cde:	b2db      	uxtb	r3, r3
    5ce0:	f003 0310 	and.w	r3, r3, #16
    5ce4:	2b00      	cmp	r3, #0
    5ce6:	f041 804e 	bne.w	6d86 <ground_calibrate+0x12ae>
    5cea:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    5cee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cf2:	781b      	ldrb	r3, [r3, #0]
    5cf4:	b2db      	uxtb	r3, r3
    5cf6:	461a      	mov	r2, r3
    5cf8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    5cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d00:	5c9a      	ldrb	r2, [r3, r2]
    5d02:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    5d06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d0a:	701a      	strb	r2, [r3, #0]
    5d0c:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    5d10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d14:	2200      	movs	r2, #0
    5d16:	701a      	strb	r2, [r3, #0]
    5d18:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    5d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d20:	781b      	ldrb	r3, [r3, #0]
    5d22:	b2db      	uxtb	r3, r3
    5d24:	3301      	adds	r3, #1
    5d26:	b2da      	uxtb	r2, r3
    5d28:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    5d2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d30:	701a      	strb	r2, [r3, #0]
    5d32:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    5d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d3a:	781b      	ldrb	r3, [r3, #0]
    5d3c:	b2db      	uxtb	r3, r3
    5d3e:	2bff      	cmp	r3, #255	; 0xff
    5d40:	d105      	bne.n	5d4e <ground_calibrate+0x276>
    5d42:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    5d46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d4a:	2200      	movs	r2, #0
    5d4c:	701a      	strb	r2, [r3, #0]
    5d4e:	f242 0338 	movw	r3, #8248	; 0x2038
    5d52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d56:	f242 0238 	movw	r2, #8248	; 0x2038
    5d5a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5d5e:	7812      	ldrb	r2, [r2, #0]
    5d60:	b2d2      	uxtb	r2, r2
    5d62:	f042 0201 	orr.w	r2, r2, #1
    5d66:	b2d2      	uxtb	r2, r2
    5d68:	701a      	strb	r2, [r3, #0]
    5d6a:	f242 0339 	movw	r3, #8249	; 0x2039
    5d6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d72:	f242 0239 	movw	r2, #8249	; 0x2039
    5d76:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5d7a:	7812      	ldrb	r2, [r2, #0]
    5d7c:	b2d2      	uxtb	r2, r2
    5d7e:	f042 0210 	orr.w	r2, r2, #16
    5d82:	b2d2      	uxtb	r2, r2
    5d84:	701a      	strb	r2, [r3, #0]
    5d86:	f000 bffe 	b.w	6d86 <ground_calibrate+0x12ae>
    5d8a:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    5d8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d92:	781b      	ldrb	r3, [r3, #0]
    5d94:	3301      	adds	r3, #1
    5d96:	b2da      	uxtb	r2, r3
    5d98:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    5d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5da0:	701a      	strb	r2, [r3, #0]
    5da2:	f000 bff0 	b.w	6d86 <ground_calibrate+0x12ae>
    }
}
else if (calib_status == WAITING_CALIB_CONTRAST)
    5da6:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
    5daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dae:	781b      	ldrb	r3, [r3, #0]
    5db0:	2b01      	cmp	r3, #1
    5db2:	f040 87e8 	bne.w	6d86 <ground_calibrate+0x12ae>
{
    if (STICK_PUSHED(from_fbw.channels[RADIO_ROLL])) {
    5db6:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    5dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dbe:	885b      	ldrh	r3, [r3, #2]
    5dc0:	b21b      	sxth	r3, r3
    5dc2:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    5dc6:	db09      	blt.n	5ddc <ground_calibrate+0x304>
    5dc8:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    5dcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dd0:	885b      	ldrh	r3, [r3, #2]
    5dd2:	b21b      	sxth	r3, r3
    5dd4:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    5dd8:	f340 87d5 	ble.w	6d86 <ground_calibrate+0x12ae>
      ir_gain_calib();
    5ddc:	f00b fcfc 	bl	117d8 <ir_gain_calib>
      estimator_rad_of_ir = ir_rad_of_ir;
    5de0:	f240 238c 	movw	r3, #652	; 0x28c
    5de4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5de8:	681a      	ldr	r2, [r3, #0]
    5dea:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
    5dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5df2:	601a      	str	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    5df4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5df8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dfc:	781a      	ldrb	r2, [r3, #0]
    5dfe:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    5e02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e06:	781b      	ldrb	r3, [r3, #0]
    5e08:	b2db      	uxtb	r3, r3
    5e0a:	429a      	cmp	r2, r3
    5e0c:	d313      	bcc.n	5e36 <ground_calibrate+0x35e>
    5e0e:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    5e12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e16:	781b      	ldrb	r3, [r3, #0]
    5e18:	b2db      	uxtb	r3, r3
    5e1a:	461a      	mov	r2, r3
    5e1c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5e20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e24:	781b      	ldrb	r3, [r3, #0]
    5e26:	1ad3      	subs	r3, r2, r3
    5e28:	33ff      	adds	r3, #255	; 0xff
    5e2a:	2b14      	cmp	r3, #20
    5e2c:	bfd4      	ite	le
    5e2e:	2300      	movle	r3, #0
    5e30:	2301      	movgt	r3, #1
    5e32:	b2db      	uxtb	r3, r3
    5e34:	e011      	b.n	5e5a <ground_calibrate+0x382>
    5e36:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    5e3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e3e:	781b      	ldrb	r3, [r3, #0]
    5e40:	b2db      	uxtb	r3, r3
    5e42:	461a      	mov	r2, r3
    5e44:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e4c:	781b      	ldrb	r3, [r3, #0]
    5e4e:	1ad3      	subs	r3, r2, r3
    5e50:	2b14      	cmp	r3, #20
    5e52:	bfd4      	ite	le
    5e54:	2300      	movle	r3, #0
    5e56:	2301      	movgt	r3, #1
    5e58:	b2db      	uxtb	r3, r3
    5e5a:	2b00      	cmp	r3, #0
    5e5c:	f000 85a6 	beq.w	69ac <ground_calibrate+0xed4>
    5e60:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5e64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e68:	781b      	ldrb	r3, [r3, #0]
    5e6a:	461a      	mov	r2, r3
    5e6c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    5e70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e74:	2105      	movs	r1, #5
    5e76:	5499      	strb	r1, [r3, r2]
    5e78:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5e7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e80:	781b      	ldrb	r3, [r3, #0]
    5e82:	3301      	adds	r3, #1
    5e84:	b2da      	uxtb	r2, r3
    5e86:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5e8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e8e:	701a      	strb	r2, [r3, #0]
    5e90:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e98:	781b      	ldrb	r3, [r3, #0]
    5e9a:	2bff      	cmp	r3, #255	; 0xff
    5e9c:	d105      	bne.n	5eaa <ground_calibrate+0x3d2>
    5e9e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5ea2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ea6:	2200      	movs	r2, #0
    5ea8:	701a      	strb	r2, [r3, #0]
    5eaa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5eae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5eb2:	781b      	ldrb	r3, [r3, #0]
    5eb4:	461a      	mov	r2, r3
    5eb6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    5eba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ebe:	2105      	movs	r1, #5
    5ec0:	5499      	strb	r1, [r3, r2]
    5ec2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5ec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5eca:	781b      	ldrb	r3, [r3, #0]
    5ecc:	3301      	adds	r3, #1
    5ece:	b2da      	uxtb	r2, r3
    5ed0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ed8:	701a      	strb	r2, [r3, #0]
    5eda:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5ede:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ee2:	781b      	ldrb	r3, [r3, #0]
    5ee4:	2bff      	cmp	r3, #255	; 0xff
    5ee6:	d105      	bne.n	5ef4 <ground_calibrate+0x41c>
    5ee8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5eec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ef0:	2200      	movs	r2, #0
    5ef2:	701a      	strb	r2, [r3, #0]
    5ef4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    5ef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5efc:	2205      	movs	r2, #5
    5efe:	701a      	strb	r2, [r3, #0]
    5f00:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    5f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f08:	2205      	movs	r2, #5
    5f0a:	701a      	strb	r2, [r3, #0]
    5f0c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5f10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f14:	781b      	ldrb	r3, [r3, #0]
    5f16:	461a      	mov	r2, r3
    5f18:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    5f1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f20:	7819      	ldrb	r1, [r3, #0]
    5f22:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    5f26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f2a:	5499      	strb	r1, [r3, r2]
    5f2c:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    5f30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f34:	781a      	ldrb	r2, [r3, #0]
    5f36:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    5f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f3e:	781b      	ldrb	r3, [r3, #0]
    5f40:	4413      	add	r3, r2
    5f42:	b2da      	uxtb	r2, r3
    5f44:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    5f48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f4c:	701a      	strb	r2, [r3, #0]
    5f4e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    5f52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f56:	781a      	ldrb	r2, [r3, #0]
    5f58:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    5f5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f60:	781b      	ldrb	r3, [r3, #0]
    5f62:	4413      	add	r3, r2
    5f64:	b2da      	uxtb	r2, r3
    5f66:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    5f6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f6e:	701a      	strb	r2, [r3, #0]
    5f70:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5f74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f78:	781b      	ldrb	r3, [r3, #0]
    5f7a:	3301      	adds	r3, #1
    5f7c:	b2da      	uxtb	r2, r3
    5f7e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f86:	701a      	strb	r2, [r3, #0]
    5f88:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5f8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f90:	781b      	ldrb	r3, [r3, #0]
    5f92:	2bff      	cmp	r3, #255	; 0xff
    5f94:	d105      	bne.n	5fa2 <ground_calibrate+0x4ca>
    5f96:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f9e:	2200      	movs	r2, #0
    5fa0:	701a      	strb	r2, [r3, #0]
    5fa2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5faa:	781b      	ldrb	r3, [r3, #0]
    5fac:	461a      	mov	r2, r3
    5fae:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    5fb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fb6:	7859      	ldrb	r1, [r3, #1]
    5fb8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    5fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fc0:	5499      	strb	r1, [r3, r2]
    5fc2:	4bd2      	ldr	r3, [pc, #840]	; (630c <ground_calibrate+0x834>)
    5fc4:	781a      	ldrb	r2, [r3, #0]
    5fc6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    5fca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fce:	781b      	ldrb	r3, [r3, #0]
    5fd0:	4413      	add	r3, r2
    5fd2:	b2da      	uxtb	r2, r3
    5fd4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    5fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fdc:	701a      	strb	r2, [r3, #0]
    5fde:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    5fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fe6:	781a      	ldrb	r2, [r3, #0]
    5fe8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    5fec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ff0:	781b      	ldrb	r3, [r3, #0]
    5ff2:	4413      	add	r3, r2
    5ff4:	b2da      	uxtb	r2, r3
    5ff6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    5ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ffe:	701a      	strb	r2, [r3, #0]
    6000:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6004:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6008:	781b      	ldrb	r3, [r3, #0]
    600a:	3301      	adds	r3, #1
    600c:	b2da      	uxtb	r2, r3
    600e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6012:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6016:	701a      	strb	r2, [r3, #0]
    6018:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    601c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6020:	781b      	ldrb	r3, [r3, #0]
    6022:	2bff      	cmp	r3, #255	; 0xff
    6024:	d105      	bne.n	6032 <ground_calibrate+0x55a>
    6026:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    602a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    602e:	2200      	movs	r2, #0
    6030:	701a      	strb	r2, [r3, #0]
    6032:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6036:	f2c2 0300 	movt	r3, #8192	; 0x2000
    603a:	781b      	ldrb	r3, [r3, #0]
    603c:	461a      	mov	r2, r3
    603e:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    6042:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6046:	7899      	ldrb	r1, [r3, #2]
    6048:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    604c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6050:	5499      	strb	r1, [r3, r2]
    6052:	4baf      	ldr	r3, [pc, #700]	; (6310 <ground_calibrate+0x838>)
    6054:	781a      	ldrb	r2, [r3, #0]
    6056:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    605a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    605e:	781b      	ldrb	r3, [r3, #0]
    6060:	4413      	add	r3, r2
    6062:	b2da      	uxtb	r2, r3
    6064:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6068:	f2c2 0300 	movt	r3, #8192	; 0x2000
    606c:	701a      	strb	r2, [r3, #0]
    606e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6072:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6076:	781a      	ldrb	r2, [r3, #0]
    6078:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    607c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6080:	781b      	ldrb	r3, [r3, #0]
    6082:	4413      	add	r3, r2
    6084:	b2da      	uxtb	r2, r3
    6086:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    608a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    608e:	701a      	strb	r2, [r3, #0]
    6090:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6094:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6098:	781b      	ldrb	r3, [r3, #0]
    609a:	3301      	adds	r3, #1
    609c:	b2da      	uxtb	r2, r3
    609e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    60a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60a6:	701a      	strb	r2, [r3, #0]
    60a8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    60ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60b0:	781b      	ldrb	r3, [r3, #0]
    60b2:	2bff      	cmp	r3, #255	; 0xff
    60b4:	d105      	bne.n	60c2 <ground_calibrate+0x5ea>
    60b6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    60ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60be:	2200      	movs	r2, #0
    60c0:	701a      	strb	r2, [r3, #0]
    60c2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    60c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60ca:	781b      	ldrb	r3, [r3, #0]
    60cc:	461a      	mov	r2, r3
    60ce:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    60d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60d6:	78d9      	ldrb	r1, [r3, #3]
    60d8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    60dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60e0:	5499      	strb	r1, [r3, r2]
    60e2:	4b8c      	ldr	r3, [pc, #560]	; (6314 <ground_calibrate+0x83c>)
    60e4:	781a      	ldrb	r2, [r3, #0]
    60e6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    60ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60ee:	781b      	ldrb	r3, [r3, #0]
    60f0:	4413      	add	r3, r2
    60f2:	b2da      	uxtb	r2, r3
    60f4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    60f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60fc:	701a      	strb	r2, [r3, #0]
    60fe:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6102:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6106:	781a      	ldrb	r2, [r3, #0]
    6108:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    610c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6110:	781b      	ldrb	r3, [r3, #0]
    6112:	4413      	add	r3, r2
    6114:	b2da      	uxtb	r2, r3
    6116:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    611a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    611e:	701a      	strb	r2, [r3, #0]
    6120:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6124:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6128:	781b      	ldrb	r3, [r3, #0]
    612a:	3301      	adds	r3, #1
    612c:	b2da      	uxtb	r2, r3
    612e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6132:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6136:	701a      	strb	r2, [r3, #0]
    6138:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    613c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6140:	781b      	ldrb	r3, [r3, #0]
    6142:	2bff      	cmp	r3, #255	; 0xff
    6144:	d105      	bne.n	6152 <ground_calibrate+0x67a>
    6146:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    614a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    614e:	2200      	movs	r2, #0
    6150:	701a      	strb	r2, [r3, #0]
    6152:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6156:	f2c2 0300 	movt	r3, #8192	; 0x2000
    615a:	781b      	ldrb	r3, [r3, #0]
    615c:	461a      	mov	r2, r3
    615e:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    6162:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6166:	7819      	ldrb	r1, [r3, #0]
    6168:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    616c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6170:	5499      	strb	r1, [r3, r2]
    6172:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    6176:	f2c2 0300 	movt	r3, #8192	; 0x2000
    617a:	781a      	ldrb	r2, [r3, #0]
    617c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6180:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6184:	781b      	ldrb	r3, [r3, #0]
    6186:	4413      	add	r3, r2
    6188:	b2da      	uxtb	r2, r3
    618a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    618e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6192:	701a      	strb	r2, [r3, #0]
    6194:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6198:	f2c2 0300 	movt	r3, #8192	; 0x2000
    619c:	781a      	ldrb	r2, [r3, #0]
    619e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    61a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61a6:	781b      	ldrb	r3, [r3, #0]
    61a8:	4413      	add	r3, r2
    61aa:	b2da      	uxtb	r2, r3
    61ac:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    61b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61b4:	701a      	strb	r2, [r3, #0]
    61b6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    61ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61be:	781b      	ldrb	r3, [r3, #0]
    61c0:	3301      	adds	r3, #1
    61c2:	b2da      	uxtb	r2, r3
    61c4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    61c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61cc:	701a      	strb	r2, [r3, #0]
    61ce:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    61d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61d6:	781b      	ldrb	r3, [r3, #0]
    61d8:	2bff      	cmp	r3, #255	; 0xff
    61da:	d105      	bne.n	61e8 <ground_calibrate+0x710>
    61dc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    61e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61e4:	2200      	movs	r2, #0
    61e6:	701a      	strb	r2, [r3, #0]
    61e8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    61ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61f0:	781b      	ldrb	r3, [r3, #0]
    61f2:	461a      	mov	r2, r3
    61f4:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    61f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61fc:	7859      	ldrb	r1, [r3, #1]
    61fe:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6202:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6206:	5499      	strb	r1, [r3, r2]
    6208:	4b43      	ldr	r3, [pc, #268]	; (6318 <ground_calibrate+0x840>)
    620a:	781a      	ldrb	r2, [r3, #0]
    620c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6210:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6214:	781b      	ldrb	r3, [r3, #0]
    6216:	4413      	add	r3, r2
    6218:	b2da      	uxtb	r2, r3
    621a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    621e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6222:	701a      	strb	r2, [r3, #0]
    6224:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6228:	f2c2 0300 	movt	r3, #8192	; 0x2000
    622c:	781a      	ldrb	r2, [r3, #0]
    622e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6232:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6236:	781b      	ldrb	r3, [r3, #0]
    6238:	4413      	add	r3, r2
    623a:	b2da      	uxtb	r2, r3
    623c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6240:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6244:	701a      	strb	r2, [r3, #0]
    6246:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    624a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    624e:	781b      	ldrb	r3, [r3, #0]
    6250:	3301      	adds	r3, #1
    6252:	b2da      	uxtb	r2, r3
    6254:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    625c:	701a      	strb	r2, [r3, #0]
    625e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6262:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6266:	781b      	ldrb	r3, [r3, #0]
    6268:	2bff      	cmp	r3, #255	; 0xff
    626a:	d105      	bne.n	6278 <ground_calibrate+0x7a0>
    626c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6270:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6274:	2200      	movs	r2, #0
    6276:	701a      	strb	r2, [r3, #0]
    6278:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    627c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6280:	781b      	ldrb	r3, [r3, #0]
    6282:	461a      	mov	r2, r3
    6284:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    6288:	f2c2 0300 	movt	r3, #8192	; 0x2000
    628c:	7899      	ldrb	r1, [r3, #2]
    628e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6292:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6296:	5499      	strb	r1, [r3, r2]
    6298:	4b20      	ldr	r3, [pc, #128]	; (631c <ground_calibrate+0x844>)
    629a:	781a      	ldrb	r2, [r3, #0]
    629c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    62a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62a4:	781b      	ldrb	r3, [r3, #0]
    62a6:	4413      	add	r3, r2
    62a8:	b2da      	uxtb	r2, r3
    62aa:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    62ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62b2:	701a      	strb	r2, [r3, #0]
    62b4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    62b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62bc:	781a      	ldrb	r2, [r3, #0]
    62be:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    62c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62c6:	781b      	ldrb	r3, [r3, #0]
    62c8:	4413      	add	r3, r2
    62ca:	b2da      	uxtb	r2, r3
    62cc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    62d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62d4:	701a      	strb	r2, [r3, #0]
    62d6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    62da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62de:	781b      	ldrb	r3, [r3, #0]
    62e0:	3301      	adds	r3, #1
    62e2:	b2da      	uxtb	r2, r3
    62e4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    62e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62ec:	701a      	strb	r2, [r3, #0]
    62ee:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    62f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62f6:	781b      	ldrb	r3, [r3, #0]
    62f8:	2bff      	cmp	r3, #255	; 0xff
    62fa:	d111      	bne.n	6320 <ground_calibrate+0x848>
    62fc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6300:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6304:	2200      	movs	r2, #0
    6306:	701a      	strb	r2, [r3, #0]
    6308:	e00a      	b.n	6320 <ground_calibrate+0x848>
    630a:	bf00      	nop
    630c:	2000b0a9 	.word	0x2000b0a9
    6310:	2000b0aa 	.word	0x2000b0aa
    6314:	2000b0ab 	.word	0x2000b0ab
    6318:	2000b0ad 	.word	0x2000b0ad
    631c:	2000b0ae 	.word	0x2000b0ae
    6320:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6324:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6328:	781b      	ldrb	r3, [r3, #0]
    632a:	461a      	mov	r2, r3
    632c:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    6330:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6334:	78d9      	ldrb	r1, [r3, #3]
    6336:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    633a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    633e:	5499      	strb	r1, [r3, r2]
    6340:	4bd3      	ldr	r3, [pc, #844]	; (6690 <ground_calibrate+0xbb8>)
    6342:	781a      	ldrb	r2, [r3, #0]
    6344:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6348:	f2c2 0300 	movt	r3, #8192	; 0x2000
    634c:	781b      	ldrb	r3, [r3, #0]
    634e:	4413      	add	r3, r2
    6350:	b2da      	uxtb	r2, r3
    6352:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6356:	f2c2 0300 	movt	r3, #8192	; 0x2000
    635a:	701a      	strb	r2, [r3, #0]
    635c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6360:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6364:	781a      	ldrb	r2, [r3, #0]
    6366:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    636a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    636e:	781b      	ldrb	r3, [r3, #0]
    6370:	4413      	add	r3, r2
    6372:	b2da      	uxtb	r2, r3
    6374:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6378:	f2c2 0300 	movt	r3, #8192	; 0x2000
    637c:	701a      	strb	r2, [r3, #0]
    637e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6382:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6386:	781b      	ldrb	r3, [r3, #0]
    6388:	3301      	adds	r3, #1
    638a:	b2da      	uxtb	r2, r3
    638c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6390:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6394:	701a      	strb	r2, [r3, #0]
    6396:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    639a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    639e:	781b      	ldrb	r3, [r3, #0]
    63a0:	2bff      	cmp	r3, #255	; 0xff
    63a2:	d105      	bne.n	63b0 <ground_calibrate+0x8d8>
    63a4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    63a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63ac:	2200      	movs	r2, #0
    63ae:	701a      	strb	r2, [r3, #0]
    63b0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    63b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63b8:	781b      	ldrb	r3, [r3, #0]
    63ba:	461a      	mov	r2, r3
    63bc:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
    63c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63c4:	7819      	ldrb	r1, [r3, #0]
    63c6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    63ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63ce:	5499      	strb	r1, [r3, r2]
    63d0:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
    63d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63d8:	781a      	ldrb	r2, [r3, #0]
    63da:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    63de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63e2:	781b      	ldrb	r3, [r3, #0]
    63e4:	4413      	add	r3, r2
    63e6:	b2da      	uxtb	r2, r3
    63e8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    63ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63f0:	701a      	strb	r2, [r3, #0]
    63f2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    63f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63fa:	781a      	ldrb	r2, [r3, #0]
    63fc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6400:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6404:	781b      	ldrb	r3, [r3, #0]
    6406:	4413      	add	r3, r2
    6408:	b2da      	uxtb	r2, r3
    640a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    640e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6412:	701a      	strb	r2, [r3, #0]
    6414:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    641c:	781b      	ldrb	r3, [r3, #0]
    641e:	3301      	adds	r3, #1
    6420:	b2da      	uxtb	r2, r3
    6422:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6426:	f2c2 0300 	movt	r3, #8192	; 0x2000
    642a:	701a      	strb	r2, [r3, #0]
    642c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6430:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6434:	781b      	ldrb	r3, [r3, #0]
    6436:	2bff      	cmp	r3, #255	; 0xff
    6438:	d105      	bne.n	6446 <ground_calibrate+0x96e>
    643a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    643e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6442:	2200      	movs	r2, #0
    6444:	701a      	strb	r2, [r3, #0]
    6446:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    644a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    644e:	781b      	ldrb	r3, [r3, #0]
    6450:	461a      	mov	r2, r3
    6452:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
    6456:	f2c2 0300 	movt	r3, #8192	; 0x2000
    645a:	7859      	ldrb	r1, [r3, #1]
    645c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6460:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6464:	5499      	strb	r1, [r3, r2]
    6466:	4b8b      	ldr	r3, [pc, #556]	; (6694 <ground_calibrate+0xbbc>)
    6468:	781a      	ldrb	r2, [r3, #0]
    646a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    646e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6472:	781b      	ldrb	r3, [r3, #0]
    6474:	4413      	add	r3, r2
    6476:	b2da      	uxtb	r2, r3
    6478:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    647c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6480:	701a      	strb	r2, [r3, #0]
    6482:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6486:	f2c2 0300 	movt	r3, #8192	; 0x2000
    648a:	781a      	ldrb	r2, [r3, #0]
    648c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6490:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6494:	781b      	ldrb	r3, [r3, #0]
    6496:	4413      	add	r3, r2
    6498:	b2da      	uxtb	r2, r3
    649a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    649e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64a2:	701a      	strb	r2, [r3, #0]
    64a4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    64a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64ac:	781b      	ldrb	r3, [r3, #0]
    64ae:	3301      	adds	r3, #1
    64b0:	b2da      	uxtb	r2, r3
    64b2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    64b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64ba:	701a      	strb	r2, [r3, #0]
    64bc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    64c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64c4:	781b      	ldrb	r3, [r3, #0]
    64c6:	2bff      	cmp	r3, #255	; 0xff
    64c8:	d105      	bne.n	64d6 <ground_calibrate+0x9fe>
    64ca:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    64ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64d2:	2200      	movs	r2, #0
    64d4:	701a      	strb	r2, [r3, #0]
    64d6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    64da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64de:	781b      	ldrb	r3, [r3, #0]
    64e0:	461a      	mov	r2, r3
    64e2:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
    64e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64ea:	7899      	ldrb	r1, [r3, #2]
    64ec:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    64f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64f4:	5499      	strb	r1, [r3, r2]
    64f6:	4b68      	ldr	r3, [pc, #416]	; (6698 <ground_calibrate+0xbc0>)
    64f8:	781a      	ldrb	r2, [r3, #0]
    64fa:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    64fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6502:	781b      	ldrb	r3, [r3, #0]
    6504:	4413      	add	r3, r2
    6506:	b2da      	uxtb	r2, r3
    6508:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    650c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6510:	701a      	strb	r2, [r3, #0]
    6512:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    651a:	781a      	ldrb	r2, [r3, #0]
    651c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6524:	781b      	ldrb	r3, [r3, #0]
    6526:	4413      	add	r3, r2
    6528:	b2da      	uxtb	r2, r3
    652a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    652e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6532:	701a      	strb	r2, [r3, #0]
    6534:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6538:	f2c2 0300 	movt	r3, #8192	; 0x2000
    653c:	781b      	ldrb	r3, [r3, #0]
    653e:	3301      	adds	r3, #1
    6540:	b2da      	uxtb	r2, r3
    6542:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6546:	f2c2 0300 	movt	r3, #8192	; 0x2000
    654a:	701a      	strb	r2, [r3, #0]
    654c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6550:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6554:	781b      	ldrb	r3, [r3, #0]
    6556:	2bff      	cmp	r3, #255	; 0xff
    6558:	d105      	bne.n	6566 <ground_calibrate+0xa8e>
    655a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    655e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6562:	2200      	movs	r2, #0
    6564:	701a      	strb	r2, [r3, #0]
    6566:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    656a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    656e:	781b      	ldrb	r3, [r3, #0]
    6570:	461a      	mov	r2, r3
    6572:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
    6576:	f2c2 0300 	movt	r3, #8192	; 0x2000
    657a:	78d9      	ldrb	r1, [r3, #3]
    657c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6580:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6584:	5499      	strb	r1, [r3, r2]
    6586:	4b45      	ldr	r3, [pc, #276]	; (669c <ground_calibrate+0xbc4>)
    6588:	781a      	ldrb	r2, [r3, #0]
    658a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    658e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6592:	781b      	ldrb	r3, [r3, #0]
    6594:	4413      	add	r3, r2
    6596:	b2da      	uxtb	r2, r3
    6598:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    659c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65a0:	701a      	strb	r2, [r3, #0]
    65a2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    65a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65aa:	781a      	ldrb	r2, [r3, #0]
    65ac:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    65b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65b4:	781b      	ldrb	r3, [r3, #0]
    65b6:	4413      	add	r3, r2
    65b8:	b2da      	uxtb	r2, r3
    65ba:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    65be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65c2:	701a      	strb	r2, [r3, #0]
    65c4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    65c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65cc:	781b      	ldrb	r3, [r3, #0]
    65ce:	3301      	adds	r3, #1
    65d0:	b2da      	uxtb	r2, r3
    65d2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    65d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65da:	701a      	strb	r2, [r3, #0]
    65dc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    65e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65e4:	781b      	ldrb	r3, [r3, #0]
    65e6:	2bff      	cmp	r3, #255	; 0xff
    65e8:	d105      	bne.n	65f6 <ground_calibrate+0xb1e>
    65ea:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    65ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65f2:	2200      	movs	r2, #0
    65f4:	701a      	strb	r2, [r3, #0]
    65f6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    65fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65fe:	781b      	ldrb	r3, [r3, #0]
    6600:	461a      	mov	r2, r3
    6602:	f240 2386 	movw	r3, #646	; 0x286
    6606:	f2c2 0300 	movt	r3, #8192	; 0x2000
    660a:	7819      	ldrb	r1, [r3, #0]
    660c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6614:	5499      	strb	r1, [r3, r2]
    6616:	f240 2386 	movw	r3, #646	; 0x286
    661a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    661e:	781a      	ldrb	r2, [r3, #0]
    6620:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6624:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6628:	781b      	ldrb	r3, [r3, #0]
    662a:	4413      	add	r3, r2
    662c:	b2da      	uxtb	r2, r3
    662e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6632:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6636:	701a      	strb	r2, [r3, #0]
    6638:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    663c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6640:	781a      	ldrb	r2, [r3, #0]
    6642:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6646:	f2c2 0300 	movt	r3, #8192	; 0x2000
    664a:	781b      	ldrb	r3, [r3, #0]
    664c:	4413      	add	r3, r2
    664e:	b2da      	uxtb	r2, r3
    6650:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6658:	701a      	strb	r2, [r3, #0]
    665a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    665e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6662:	781b      	ldrb	r3, [r3, #0]
    6664:	3301      	adds	r3, #1
    6666:	b2da      	uxtb	r2, r3
    6668:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    666c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6670:	701a      	strb	r2, [r3, #0]
    6672:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6676:	f2c2 0300 	movt	r3, #8192	; 0x2000
    667a:	781b      	ldrb	r3, [r3, #0]
    667c:	2bff      	cmp	r3, #255	; 0xff
    667e:	d10f      	bne.n	66a0 <ground_calibrate+0xbc8>
    6680:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6684:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6688:	2200      	movs	r2, #0
    668a:	701a      	strb	r2, [r3, #0]
    668c:	e008      	b.n	66a0 <ground_calibrate+0xbc8>
    668e:	bf00      	nop
    6690:	2000b0af 	.word	0x2000b0af
    6694:	2000b0a5 	.word	0x2000b0a5
    6698:	2000b0a6 	.word	0x2000b0a6
    669c:	2000b0a7 	.word	0x2000b0a7
    66a0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    66a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66a8:	781b      	ldrb	r3, [r3, #0]
    66aa:	461a      	mov	r2, r3
    66ac:	f240 2386 	movw	r3, #646	; 0x286
    66b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66b4:	7859      	ldrb	r1, [r3, #1]
    66b6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    66ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66be:	5499      	strb	r1, [r3, r2]
    66c0:	4bd4      	ldr	r3, [pc, #848]	; (6a14 <ground_calibrate+0xf3c>)
    66c2:	781a      	ldrb	r2, [r3, #0]
    66c4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    66c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66cc:	781b      	ldrb	r3, [r3, #0]
    66ce:	4413      	add	r3, r2
    66d0:	b2da      	uxtb	r2, r3
    66d2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    66d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66da:	701a      	strb	r2, [r3, #0]
    66dc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    66e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66e4:	781a      	ldrb	r2, [r3, #0]
    66e6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    66ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66ee:	781b      	ldrb	r3, [r3, #0]
    66f0:	4413      	add	r3, r2
    66f2:	b2da      	uxtb	r2, r3
    66f4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    66f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66fc:	701a      	strb	r2, [r3, #0]
    66fe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6702:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6706:	781b      	ldrb	r3, [r3, #0]
    6708:	3301      	adds	r3, #1
    670a:	b2da      	uxtb	r2, r3
    670c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6710:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6714:	701a      	strb	r2, [r3, #0]
    6716:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    671a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    671e:	781b      	ldrb	r3, [r3, #0]
    6720:	2bff      	cmp	r3, #255	; 0xff
    6722:	d105      	bne.n	6730 <ground_calibrate+0xc58>
    6724:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6728:	f2c2 0300 	movt	r3, #8192	; 0x2000
    672c:	2200      	movs	r2, #0
    672e:	701a      	strb	r2, [r3, #0]
    6730:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6738:	781b      	ldrb	r3, [r3, #0]
    673a:	461a      	mov	r2, r3
    673c:	f240 2388 	movw	r3, #648	; 0x288
    6740:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6744:	7819      	ldrb	r1, [r3, #0]
    6746:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    674a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    674e:	5499      	strb	r1, [r3, r2]
    6750:	f240 2388 	movw	r3, #648	; 0x288
    6754:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6758:	781a      	ldrb	r2, [r3, #0]
    675a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    675e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6762:	781b      	ldrb	r3, [r3, #0]
    6764:	4413      	add	r3, r2
    6766:	b2da      	uxtb	r2, r3
    6768:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    676c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6770:	701a      	strb	r2, [r3, #0]
    6772:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6776:	f2c2 0300 	movt	r3, #8192	; 0x2000
    677a:	781a      	ldrb	r2, [r3, #0]
    677c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6784:	781b      	ldrb	r3, [r3, #0]
    6786:	4413      	add	r3, r2
    6788:	b2da      	uxtb	r2, r3
    678a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    678e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6792:	701a      	strb	r2, [r3, #0]
    6794:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6798:	f2c2 0300 	movt	r3, #8192	; 0x2000
    679c:	781b      	ldrb	r3, [r3, #0]
    679e:	3301      	adds	r3, #1
    67a0:	b2da      	uxtb	r2, r3
    67a2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    67a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67aa:	701a      	strb	r2, [r3, #0]
    67ac:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    67b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67b4:	781b      	ldrb	r3, [r3, #0]
    67b6:	2bff      	cmp	r3, #255	; 0xff
    67b8:	d105      	bne.n	67c6 <ground_calibrate+0xcee>
    67ba:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    67be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67c2:	2200      	movs	r2, #0
    67c4:	701a      	strb	r2, [r3, #0]
    67c6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    67ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67ce:	781b      	ldrb	r3, [r3, #0]
    67d0:	461a      	mov	r2, r3
    67d2:	f240 2388 	movw	r3, #648	; 0x288
    67d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67da:	7859      	ldrb	r1, [r3, #1]
    67dc:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    67e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67e4:	5499      	strb	r1, [r3, r2]
    67e6:	4b8c      	ldr	r3, [pc, #560]	; (6a18 <ground_calibrate+0xf40>)
    67e8:	781a      	ldrb	r2, [r3, #0]
    67ea:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    67ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67f2:	781b      	ldrb	r3, [r3, #0]
    67f4:	4413      	add	r3, r2
    67f6:	b2da      	uxtb	r2, r3
    67f8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    67fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6800:	701a      	strb	r2, [r3, #0]
    6802:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    680a:	781a      	ldrb	r2, [r3, #0]
    680c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6810:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6814:	781b      	ldrb	r3, [r3, #0]
    6816:	4413      	add	r3, r2
    6818:	b2da      	uxtb	r2, r3
    681a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    681e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6822:	701a      	strb	r2, [r3, #0]
    6824:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6828:	f2c2 0300 	movt	r3, #8192	; 0x2000
    682c:	781b      	ldrb	r3, [r3, #0]
    682e:	3301      	adds	r3, #1
    6830:	b2da      	uxtb	r2, r3
    6832:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6836:	f2c2 0300 	movt	r3, #8192	; 0x2000
    683a:	701a      	strb	r2, [r3, #0]
    683c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6840:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6844:	781b      	ldrb	r3, [r3, #0]
    6846:	2bff      	cmp	r3, #255	; 0xff
    6848:	d105      	bne.n	6856 <ground_calibrate+0xd7e>
    684a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    684e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6852:	2200      	movs	r2, #0
    6854:	701a      	strb	r2, [r3, #0]
    6856:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    685a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    685e:	781b      	ldrb	r3, [r3, #0]
    6860:	461a      	mov	r2, r3
    6862:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6866:	f2c2 0300 	movt	r3, #8192	; 0x2000
    686a:	7819      	ldrb	r1, [r3, #0]
    686c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6870:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6874:	5499      	strb	r1, [r3, r2]
    6876:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    687a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    687e:	781b      	ldrb	r3, [r3, #0]
    6880:	3301      	adds	r3, #1
    6882:	b2da      	uxtb	r2, r3
    6884:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6888:	f2c2 0300 	movt	r3, #8192	; 0x2000
    688c:	701a      	strb	r2, [r3, #0]
    688e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6892:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6896:	781b      	ldrb	r3, [r3, #0]
    6898:	2bff      	cmp	r3, #255	; 0xff
    689a:	d105      	bne.n	68a8 <ground_calibrate+0xdd0>
    689c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    68a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68a4:	2200      	movs	r2, #0
    68a6:	701a      	strb	r2, [r3, #0]
    68a8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    68ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68b0:	781b      	ldrb	r3, [r3, #0]
    68b2:	461a      	mov	r2, r3
    68b4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    68b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68bc:	7819      	ldrb	r1, [r3, #0]
    68be:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    68c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68c6:	5499      	strb	r1, [r3, r2]
    68c8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    68cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68d0:	781b      	ldrb	r3, [r3, #0]
    68d2:	3301      	adds	r3, #1
    68d4:	b2da      	uxtb	r2, r3
    68d6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    68da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68de:	701a      	strb	r2, [r3, #0]
    68e0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    68e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68e8:	781b      	ldrb	r3, [r3, #0]
    68ea:	2bff      	cmp	r3, #255	; 0xff
    68ec:	d105      	bne.n	68fa <ground_calibrate+0xe22>
    68ee:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    68f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68f6:	2200      	movs	r2, #0
    68f8:	701a      	strb	r2, [r3, #0]
    68fa:	f242 0339 	movw	r3, #8249	; 0x2039
    68fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6902:	781b      	ldrb	r3, [r3, #0]
    6904:	b2db      	uxtb	r3, r3
    6906:	f003 0310 	and.w	r3, r3, #16
    690a:	2b00      	cmp	r3, #0
    690c:	d15a      	bne.n	69c4 <ground_calibrate+0xeec>
    690e:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    6912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6916:	781b      	ldrb	r3, [r3, #0]
    6918:	b2db      	uxtb	r3, r3
    691a:	461a      	mov	r2, r3
    691c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6924:	5c9a      	ldrb	r2, [r3, r2]
    6926:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    692a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    692e:	701a      	strb	r2, [r3, #0]
    6930:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    6934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6938:	2200      	movs	r2, #0
    693a:	701a      	strb	r2, [r3, #0]
    693c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    6940:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6944:	781b      	ldrb	r3, [r3, #0]
    6946:	b2db      	uxtb	r3, r3
    6948:	3301      	adds	r3, #1
    694a:	b2da      	uxtb	r2, r3
    694c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    6950:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6954:	701a      	strb	r2, [r3, #0]
    6956:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    695a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    695e:	781b      	ldrb	r3, [r3, #0]
    6960:	b2db      	uxtb	r3, r3
    6962:	2bff      	cmp	r3, #255	; 0xff
    6964:	d105      	bne.n	6972 <ground_calibrate+0xe9a>
    6966:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    696a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    696e:	2200      	movs	r2, #0
    6970:	701a      	strb	r2, [r3, #0]
    6972:	f242 0338 	movw	r3, #8248	; 0x2038
    6976:	f2c2 0300 	movt	r3, #8192	; 0x2000
    697a:	f242 0238 	movw	r2, #8248	; 0x2038
    697e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6982:	7812      	ldrb	r2, [r2, #0]
    6984:	b2d2      	uxtb	r2, r2
    6986:	f042 0201 	orr.w	r2, r2, #1
    698a:	b2d2      	uxtb	r2, r2
    698c:	701a      	strb	r2, [r3, #0]
    698e:	f242 0339 	movw	r3, #8249	; 0x2039
    6992:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6996:	f242 0239 	movw	r2, #8249	; 0x2039
    699a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    699e:	7812      	ldrb	r2, [r2, #0]
    69a0:	b2d2      	uxtb	r2, r2
    69a2:	f042 0210 	orr.w	r2, r2, #16
    69a6:	b2d2      	uxtb	r2, r2
    69a8:	701a      	strb	r2, [r3, #0]
    69aa:	e00b      	b.n	69c4 <ground_calibrate+0xeec>
    69ac:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    69b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69b4:	781b      	ldrb	r3, [r3, #0]
    69b6:	3301      	adds	r3, #1
    69b8:	b2da      	uxtb	r2, r3
    69ba:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    69be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69c2:	701a      	strb	r2, [r3, #0]
      calib_status = CALIB_DONE;
    69c4:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
    69c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69cc:	2202      	movs	r2, #2
    69ce:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_CONTRAST(&ir_contrast);
    69d0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    69d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69d8:	781a      	ldrb	r2, [r3, #0]
    69da:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    69de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69e2:	781b      	ldrb	r3, [r3, #0]
    69e4:	b2db      	uxtb	r3, r3
    69e6:	429a      	cmp	r2, r3
    69e8:	d318      	bcc.n	6a1c <ground_calibrate+0xf44>
    69ea:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    69ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69f2:	781b      	ldrb	r3, [r3, #0]
    69f4:	b2db      	uxtb	r3, r3
    69f6:	461a      	mov	r2, r3
    69f8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    69fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a00:	781b      	ldrb	r3, [r3, #0]
    6a02:	1ad3      	subs	r3, r2, r3
    6a04:	33ff      	adds	r3, #255	; 0xff
    6a06:	2b06      	cmp	r3, #6
    6a08:	bfd4      	ite	le
    6a0a:	2300      	movle	r3, #0
    6a0c:	2301      	movgt	r3, #1
    6a0e:	b2db      	uxtb	r3, r3
    6a10:	e016      	b.n	6a40 <ground_calibrate+0xf68>
    6a12:	bf00      	nop
    6a14:	20000287 	.word	0x20000287
    6a18:	20000289 	.word	0x20000289
    6a1c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    6a20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a24:	781b      	ldrb	r3, [r3, #0]
    6a26:	b2db      	uxtb	r3, r3
    6a28:	461a      	mov	r2, r3
    6a2a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6a2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a32:	781b      	ldrb	r3, [r3, #0]
    6a34:	1ad3      	subs	r3, r2, r3
    6a36:	2b06      	cmp	r3, #6
    6a38:	bfd4      	ite	le
    6a3a:	2300      	movle	r3, #0
    6a3c:	2301      	movgt	r3, #1
    6a3e:	b2db      	uxtb	r3, r3
    6a40:	2b00      	cmp	r3, #0
    6a42:	f000 8194 	beq.w	6d6e <ground_calibrate+0x1296>
    6a46:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6a4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a4e:	781b      	ldrb	r3, [r3, #0]
    6a50:	461a      	mov	r2, r3
    6a52:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6a56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a5a:	2105      	movs	r1, #5
    6a5c:	5499      	strb	r1, [r3, r2]
    6a5e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6a62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a66:	781b      	ldrb	r3, [r3, #0]
    6a68:	3301      	adds	r3, #1
    6a6a:	b2da      	uxtb	r2, r3
    6a6c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6a70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a74:	701a      	strb	r2, [r3, #0]
    6a76:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6a7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a7e:	781b      	ldrb	r3, [r3, #0]
    6a80:	2bff      	cmp	r3, #255	; 0xff
    6a82:	d105      	bne.n	6a90 <ground_calibrate+0xfb8>
    6a84:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6a88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a8c:	2200      	movs	r2, #0
    6a8e:	701a      	strb	r2, [r3, #0]
    6a90:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6a94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a98:	781b      	ldrb	r3, [r3, #0]
    6a9a:	461a      	mov	r2, r3
    6a9c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6aa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6aa4:	2103      	movs	r1, #3
    6aa6:	5499      	strb	r1, [r3, r2]
    6aa8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6aac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ab0:	781b      	ldrb	r3, [r3, #0]
    6ab2:	3301      	adds	r3, #1
    6ab4:	b2da      	uxtb	r2, r3
    6ab6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6aba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6abe:	701a      	strb	r2, [r3, #0]
    6ac0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6ac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ac8:	781b      	ldrb	r3, [r3, #0]
    6aca:	2bff      	cmp	r3, #255	; 0xff
    6acc:	d105      	bne.n	6ada <ground_calibrate+0x1002>
    6ace:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6ad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ad6:	2200      	movs	r2, #0
    6ad8:	701a      	strb	r2, [r3, #0]
    6ada:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6ade:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ae2:	2203      	movs	r2, #3
    6ae4:	701a      	strb	r2, [r3, #0]
    6ae6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6aea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6aee:	2203      	movs	r2, #3
    6af0:	701a      	strb	r2, [r3, #0]
    6af2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6af6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6afa:	781b      	ldrb	r3, [r3, #0]
    6afc:	461a      	mov	r2, r3
    6afe:	f240 2384 	movw	r3, #644	; 0x284
    6b02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b06:	7819      	ldrb	r1, [r3, #0]
    6b08:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6b0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b10:	5499      	strb	r1, [r3, r2]
    6b12:	f240 2384 	movw	r3, #644	; 0x284
    6b16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b1a:	781a      	ldrb	r2, [r3, #0]
    6b1c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6b20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b24:	781b      	ldrb	r3, [r3, #0]
    6b26:	4413      	add	r3, r2
    6b28:	b2da      	uxtb	r2, r3
    6b2a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6b2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b32:	701a      	strb	r2, [r3, #0]
    6b34:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6b38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b3c:	781a      	ldrb	r2, [r3, #0]
    6b3e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6b42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b46:	781b      	ldrb	r3, [r3, #0]
    6b48:	4413      	add	r3, r2
    6b4a:	b2da      	uxtb	r2, r3
    6b4c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6b50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b54:	701a      	strb	r2, [r3, #0]
    6b56:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6b5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b5e:	781b      	ldrb	r3, [r3, #0]
    6b60:	3301      	adds	r3, #1
    6b62:	b2da      	uxtb	r2, r3
    6b64:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6b68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b6c:	701a      	strb	r2, [r3, #0]
    6b6e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6b72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b76:	781b      	ldrb	r3, [r3, #0]
    6b78:	2bff      	cmp	r3, #255	; 0xff
    6b7a:	d105      	bne.n	6b88 <ground_calibrate+0x10b0>
    6b7c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6b80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b84:	2200      	movs	r2, #0
    6b86:	701a      	strb	r2, [r3, #0]
    6b88:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b90:	781b      	ldrb	r3, [r3, #0]
    6b92:	461a      	mov	r2, r3
    6b94:	f240 2384 	movw	r3, #644	; 0x284
    6b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b9c:	7859      	ldrb	r1, [r3, #1]
    6b9e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6ba2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ba6:	5499      	strb	r1, [r3, r2]
    6ba8:	4b77      	ldr	r3, [pc, #476]	; (6d88 <ground_calibrate+0x12b0>)
    6baa:	781a      	ldrb	r2, [r3, #0]
    6bac:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6bb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bb4:	781b      	ldrb	r3, [r3, #0]
    6bb6:	4413      	add	r3, r2
    6bb8:	b2da      	uxtb	r2, r3
    6bba:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bc2:	701a      	strb	r2, [r3, #0]
    6bc4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6bc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bcc:	781a      	ldrb	r2, [r3, #0]
    6bce:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bd6:	781b      	ldrb	r3, [r3, #0]
    6bd8:	4413      	add	r3, r2
    6bda:	b2da      	uxtb	r2, r3
    6bdc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6be4:	701a      	strb	r2, [r3, #0]
    6be6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bee:	781b      	ldrb	r3, [r3, #0]
    6bf0:	3301      	adds	r3, #1
    6bf2:	b2da      	uxtb	r2, r3
    6bf4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bfc:	701a      	strb	r2, [r3, #0]
    6bfe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6c02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c06:	781b      	ldrb	r3, [r3, #0]
    6c08:	2bff      	cmp	r3, #255	; 0xff
    6c0a:	d105      	bne.n	6c18 <ground_calibrate+0x1140>
    6c0c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6c10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c14:	2200      	movs	r2, #0
    6c16:	701a      	strb	r2, [r3, #0]
    6c18:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6c1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c20:	781b      	ldrb	r3, [r3, #0]
    6c22:	461a      	mov	r2, r3
    6c24:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6c28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c2c:	7819      	ldrb	r1, [r3, #0]
    6c2e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6c32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c36:	5499      	strb	r1, [r3, r2]
    6c38:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c40:	781b      	ldrb	r3, [r3, #0]
    6c42:	3301      	adds	r3, #1
    6c44:	b2da      	uxtb	r2, r3
    6c46:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c4e:	701a      	strb	r2, [r3, #0]
    6c50:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6c54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c58:	781b      	ldrb	r3, [r3, #0]
    6c5a:	2bff      	cmp	r3, #255	; 0xff
    6c5c:	d105      	bne.n	6c6a <ground_calibrate+0x1192>
    6c5e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6c62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c66:	2200      	movs	r2, #0
    6c68:	701a      	strb	r2, [r3, #0]
    6c6a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6c6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c72:	781b      	ldrb	r3, [r3, #0]
    6c74:	461a      	mov	r2, r3
    6c76:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6c7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c7e:	7819      	ldrb	r1, [r3, #0]
    6c80:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c88:	5499      	strb	r1, [r3, r2]
    6c8a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c92:	781b      	ldrb	r3, [r3, #0]
    6c94:	3301      	adds	r3, #1
    6c96:	b2da      	uxtb	r2, r3
    6c98:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ca0:	701a      	strb	r2, [r3, #0]
    6ca2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6ca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6caa:	781b      	ldrb	r3, [r3, #0]
    6cac:	2bff      	cmp	r3, #255	; 0xff
    6cae:	d105      	bne.n	6cbc <ground_calibrate+0x11e4>
    6cb0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6cb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cb8:	2200      	movs	r2, #0
    6cba:	701a      	strb	r2, [r3, #0]
    6cbc:	f242 0339 	movw	r3, #8249	; 0x2039
    6cc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cc4:	781b      	ldrb	r3, [r3, #0]
    6cc6:	b2db      	uxtb	r3, r3
    6cc8:	f003 0310 	and.w	r3, r3, #16
    6ccc:	2b00      	cmp	r3, #0
    6cce:	d15a      	bne.n	6d86 <ground_calibrate+0x12ae>
    6cd0:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    6cd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cd8:	781b      	ldrb	r3, [r3, #0]
    6cda:	b2db      	uxtb	r3, r3
    6cdc:	461a      	mov	r2, r3
    6cde:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6ce2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ce6:	5c9a      	ldrb	r2, [r3, r2]
    6ce8:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    6cec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cf0:	701a      	strb	r2, [r3, #0]
    6cf2:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    6cf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cfa:	2200      	movs	r2, #0
    6cfc:	701a      	strb	r2, [r3, #0]
    6cfe:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    6d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d06:	781b      	ldrb	r3, [r3, #0]
    6d08:	b2db      	uxtb	r3, r3
    6d0a:	3301      	adds	r3, #1
    6d0c:	b2da      	uxtb	r2, r3
    6d0e:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    6d12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d16:	701a      	strb	r2, [r3, #0]
    6d18:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    6d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d20:	781b      	ldrb	r3, [r3, #0]
    6d22:	b2db      	uxtb	r3, r3
    6d24:	2bff      	cmp	r3, #255	; 0xff
    6d26:	d105      	bne.n	6d34 <ground_calibrate+0x125c>
    6d28:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    6d2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d30:	2200      	movs	r2, #0
    6d32:	701a      	strb	r2, [r3, #0]
    6d34:	f242 0338 	movw	r3, #8248	; 0x2038
    6d38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d3c:	f242 0238 	movw	r2, #8248	; 0x2038
    6d40:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6d44:	7812      	ldrb	r2, [r2, #0]
    6d46:	b2d2      	uxtb	r2, r2
    6d48:	f042 0201 	orr.w	r2, r2, #1
    6d4c:	b2d2      	uxtb	r2, r2
    6d4e:	701a      	strb	r2, [r3, #0]
    6d50:	f242 0339 	movw	r3, #8249	; 0x2039
    6d54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d58:	f242 0239 	movw	r2, #8249	; 0x2039
    6d5c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6d60:	7812      	ldrb	r2, [r2, #0]
    6d62:	b2d2      	uxtb	r2, r2
    6d64:	f042 0210 	orr.w	r2, r2, #16
    6d68:	b2d2      	uxtb	r2, r2
    6d6a:	701a      	strb	r2, [r3, #0]
    6d6c:	e00b      	b.n	6d86 <ground_calibrate+0x12ae>
    6d6e:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    6d72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d76:	781b      	ldrb	r3, [r3, #0]
    6d78:	3301      	adds	r3, #1
    6d7a:	b2da      	uxtb	r2, r3
    6d7c:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    6d80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d84:	701a      	strb	r2, [r3, #0]
    }
}
else {}

//#endif
}
    6d86:	bd80      	pop	{r7, pc}
    6d88:	20000285 	.word	0x20000285

00006d8c <pprz_mode_update>:

/** \fn inline uint8_t pprz_mode_update( void )
 *  \brief Update paparazzi mode
 */
inline uint8_t pprz_mode_update( void ) {
    6d8c:	b480      	push	{r7}
    6d8e:	b083      	sub	sp, #12
    6d90:	af00      	add	r7, sp, #0
  /** We remain in home mode until explicit reset from the RC */
  if (pprz_mode != PPRZ_MODE_HOME || CheckEvent(rc_event_1)) {
    6d92:	f64a 2394 	movw	r3, #43668	; 0xaa94
    6d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d9a:	781b      	ldrb	r3, [r3, #0]
    6d9c:	2b03      	cmp	r3, #3
    6d9e:	d10c      	bne.n	6dba <pprz_mode_update+0x2e>
    6da0:	f64a 2398 	movw	r3, #43672	; 0xaa98
    6da4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6da8:	781b      	ldrb	r3, [r3, #0]
    6daa:	2b00      	cmp	r3, #0
    6dac:	d032      	beq.n	6e14 <pprz_mode_update+0x88>
    6dae:	f64a 2398 	movw	r3, #43672	; 0xaa98
    6db2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6db6:	2200      	movs	r2, #0
    6db8:	701a      	strb	r2, [r3, #0]
    ModeUpdate(pprz_mode, PPRZ_MODE_OF_PULSE(from_fbw.channels[RADIO_MODE], from_fbw.status));
    6dba:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    6dbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dc2:	891b      	ldrh	r3, [r3, #8]
    6dc4:	b21b      	sxth	r3, r3
    6dc6:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    6dca:	dc0f      	bgt.n	6dec <pprz_mode_update+0x60>
    6dcc:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    6dd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dd4:	891b      	ldrh	r3, [r3, #8]
    6dd6:	b21a      	sxth	r2, r3
    6dd8:	f64e 5341 	movw	r3, #60737	; 0xed41
    6ddc:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    6de0:	429a      	cmp	r2, r3
    6de2:	bfb4      	ite	lt
    6de4:	2300      	movlt	r3, #0
    6de6:	2301      	movge	r3, #1
    6de8:	b2db      	uxtb	r3, r3
    6dea:	e000      	b.n	6dee <pprz_mode_update+0x62>
    6dec:	2302      	movs	r3, #2
    6dee:	71fb      	strb	r3, [r7, #7]
    6df0:	f64a 2394 	movw	r3, #43668	; 0xaa94
    6df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6df8:	781b      	ldrb	r3, [r3, #0]
    6dfa:	79fa      	ldrb	r2, [r7, #7]
    6dfc:	429a      	cmp	r2, r3
    6dfe:	d007      	beq.n	6e10 <pprz_mode_update+0x84>
    6e00:	f64a 2394 	movw	r3, #43668	; 0xaa94
    6e04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e08:	79fa      	ldrb	r2, [r7, #7]
    6e0a:	701a      	strb	r2, [r3, #0]
    6e0c:	2301      	movs	r3, #1
    6e0e:	e002      	b.n	6e16 <pprz_mode_update+0x8a>
    6e10:	2300      	movs	r3, #0
    6e12:	e000      	b.n	6e16 <pprz_mode_update+0x8a>
  } else
    return FALSE;
    6e14:	2300      	movs	r3, #0
}
    6e16:	4618      	mov	r0, r3
    6e18:	370c      	adds	r7, #12
    6e1a:	46bd      	mov	sp, r7
    6e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e20:	4770      	bx	lr
    6e22:	bf00      	nop

00006e24 <ir_estim_mode_update>:

#ifdef RADIO_LLS
/** \fn inline uint8_t ir_estim_mode_update( void )
 *  \brief update ir estimation if RADIO_LLS is true \n
 */
inline uint8_t ir_estim_mode_update( void ) {
    6e24:	b480      	push	{r7}
    6e26:	b083      	sub	sp, #12
    6e28:	af00      	add	r7, sp, #0
  ModeUpdate(ir_estim_mode, IR_ESTIM_MODE_OF_PULSE(from_fbw.channels[RADIO_LLS]));
    6e2a:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    6e2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e32:	89db      	ldrh	r3, [r3, #14]
    6e34:	b21a      	sxth	r2, r3
    6e36:	f640 437f 	movw	r3, #3199	; 0xc7f
    6e3a:	429a      	cmp	r2, r3
    6e3c:	bfd4      	ite	le
    6e3e:	2300      	movle	r3, #0
    6e40:	2301      	movgt	r3, #1
    6e42:	b2db      	uxtb	r3, r3
    6e44:	71fb      	strb	r3, [r7, #7]
    6e46:	f240 2380 	movw	r3, #640	; 0x280
    6e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e4e:	781b      	ldrb	r3, [r3, #0]
    6e50:	79fa      	ldrb	r2, [r7, #7]
    6e52:	429a      	cmp	r2, r3
    6e54:	d007      	beq.n	6e66 <ir_estim_mode_update+0x42>
    6e56:	f240 2380 	movw	r3, #640	; 0x280
    6e5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e5e:	79fa      	ldrb	r2, [r7, #7]
    6e60:	701a      	strb	r2, [r3, #0]
    6e62:	2301      	movs	r3, #1
    6e64:	e000      	b.n	6e68 <ir_estim_mode_update+0x44>
    6e66:	2300      	movs	r3, #0
}
    6e68:	4618      	mov	r0, r3
    6e6a:	370c      	adds	r7, #12
    6e6c:	46bd      	mov	sp, r7
    6e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e72:	4770      	bx	lr

00006e74 <mcu1_status_update>:


/** \fn inline uint8_t mcu1_status_update( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t mcu1_status_update( void ) {
    6e74:	b480      	push	{r7}
    6e76:	b083      	sub	sp, #12
    6e78:	af00      	add	r7, sp, #0
  uint8_t new_mode = from_fbw.status;
    6e7a:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    6e7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e82:	7cdb      	ldrb	r3, [r3, #19]
    6e84:	71fb      	strb	r3, [r7, #7]
  if (mcu1_status != new_mode) {
    6e86:	f64a 239b 	movw	r3, #43675	; 0xaa9b
    6e8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e8e:	781b      	ldrb	r3, [r3, #0]
    6e90:	79fa      	ldrb	r2, [r7, #7]
    6e92:	429a      	cmp	r2, r3
    6e94:	d017      	beq.n	6ec6 <mcu1_status_update+0x52>
    bool_t changed = ((mcu1_status&MASK_FBW_CHANGED) != (new_mode&MASK_FBW_CHANGED));
    6e96:	f64a 239b 	movw	r3, #43675	; 0xaa9b
    6e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e9e:	781b      	ldrb	r3, [r3, #0]
    6ea0:	461a      	mov	r2, r3
    6ea2:	79fb      	ldrb	r3, [r7, #7]
    6ea4:	4053      	eors	r3, r2
    6ea6:	f003 0303 	and.w	r3, r3, #3
    6eaa:	2b00      	cmp	r3, #0
    6eac:	bf0c      	ite	eq
    6eae:	2300      	moveq	r3, #0
    6eb0:	2301      	movne	r3, #1
    6eb2:	b2db      	uxtb	r3, r3
    6eb4:	71bb      	strb	r3, [r7, #6]
    mcu1_status = new_mode;
    6eb6:	f64a 239b 	movw	r3, #43675	; 0xaa9b
    6eba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ebe:	79fa      	ldrb	r2, [r7, #7]
    6ec0:	701a      	strb	r2, [r3, #0]
    return changed;
    6ec2:	79bb      	ldrb	r3, [r7, #6]
    6ec4:	e000      	b.n	6ec8 <mcu1_status_update+0x54>
  }
  return FALSE;
    6ec6:	2300      	movs	r3, #0
}
    6ec8:	4618      	mov	r0, r3
    6eca:	370c      	adds	r7, #12
    6ecc:	46bd      	mov	sp, r7
    6ece:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ed2:	4770      	bx	lr

00006ed4 <events_update>:
 EventUpdate(_cpt, (inflight_calib_mode==IF_CALIB_MODE_NONE && from_fbw.channels[_channel]<(int)(-0.75*MAX_PPRZ)), _event)

/** \fn static inline void events_update( void )
 *  @@@@@ A FIXER @@@@@
 */
static inline void events_update( void ) {
    6ed4:	b480      	push	{r7}
    6ed6:	af00      	add	r7, sp, #0
  static uint16_t event1_cpt = 0;
  static uint16_t event2_cpt = 0;
  EventPos(event1_cpt, RADIO_GAIN1, rc_event_1);
    6ed8:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
    6edc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ee0:	781b      	ldrb	r3, [r3, #0]
    6ee2:	2b00      	cmp	r3, #0
    6ee4:	d12a      	bne.n	6f3c <events_update+0x68>
    6ee6:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    6eea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6eee:	895b      	ldrh	r3, [r3, #10]
    6ef0:	b21b      	sxth	r3, r3
    6ef2:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
    6ef6:	dd21      	ble.n	6f3c <events_update+0x68>
    6ef8:	f64a 23ac 	movw	r3, #43692	; 0xaaac
    6efc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f00:	881b      	ldrh	r3, [r3, #0]
    6f02:	2b13      	cmp	r3, #19
    6f04:	d819      	bhi.n	6f3a <events_update+0x66>
    6f06:	f64a 23ac 	movw	r3, #43692	; 0xaaac
    6f0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f0e:	881b      	ldrh	r3, [r3, #0]
    6f10:	3301      	adds	r3, #1
    6f12:	b29a      	uxth	r2, r3
    6f14:	f64a 23ac 	movw	r3, #43692	; 0xaaac
    6f18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f1c:	801a      	strh	r2, [r3, #0]
    6f1e:	f64a 23ac 	movw	r3, #43692	; 0xaaac
    6f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f26:	881b      	ldrh	r3, [r3, #0]
    6f28:	2b14      	cmp	r3, #20
    6f2a:	d106      	bne.n	6f3a <events_update+0x66>
    6f2c:	f64a 2398 	movw	r3, #43672	; 0xaa98
    6f30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f34:	2201      	movs	r2, #1
    6f36:	701a      	strb	r2, [r3, #0]
    6f38:	e00c      	b.n	6f54 <events_update+0x80>
    6f3a:	e00b      	b.n	6f54 <events_update+0x80>
    6f3c:	f64a 23ac 	movw	r3, #43692	; 0xaaac
    6f40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f44:	2200      	movs	r2, #0
    6f46:	801a      	strh	r2, [r3, #0]
    6f48:	f64a 2398 	movw	r3, #43672	; 0xaa98
    6f4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f50:	2200      	movs	r2, #0
    6f52:	701a      	strb	r2, [r3, #0]
  EventNeg(event2_cpt, RADIO_GAIN1, rc_event_2);
    6f54:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
    6f58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f5c:	781b      	ldrb	r3, [r3, #0]
    6f5e:	2b00      	cmp	r3, #0
    6f60:	d12a      	bne.n	6fb8 <events_update+0xe4>
    6f62:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    6f66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f6a:	895b      	ldrh	r3, [r3, #10]
    6f6c:	b21b      	sxth	r3, r3
    6f6e:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
    6f72:	da21      	bge.n	6fb8 <events_update+0xe4>
    6f74:	f64a 23ae 	movw	r3, #43694	; 0xaaae
    6f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f7c:	881b      	ldrh	r3, [r3, #0]
    6f7e:	2b13      	cmp	r3, #19
    6f80:	d819      	bhi.n	6fb6 <events_update+0xe2>
    6f82:	f64a 23ae 	movw	r3, #43694	; 0xaaae
    6f86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f8a:	881b      	ldrh	r3, [r3, #0]
    6f8c:	3301      	adds	r3, #1
    6f8e:	b29a      	uxth	r2, r3
    6f90:	f64a 23ae 	movw	r3, #43694	; 0xaaae
    6f94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f98:	801a      	strh	r2, [r3, #0]
    6f9a:	f64a 23ae 	movw	r3, #43694	; 0xaaae
    6f9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fa2:	881b      	ldrh	r3, [r3, #0]
    6fa4:	2b14      	cmp	r3, #20
    6fa6:	d106      	bne.n	6fb6 <events_update+0xe2>
    6fa8:	f64a 2399 	movw	r3, #43673	; 0xaa99
    6fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fb0:	2201      	movs	r2, #1
    6fb2:	701a      	strb	r2, [r3, #0]
    6fb4:	e00c      	b.n	6fd0 <events_update+0xfc>
    6fb6:	e00b      	b.n	6fd0 <events_update+0xfc>
    6fb8:	f64a 23ae 	movw	r3, #43694	; 0xaaae
    6fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fc0:	2200      	movs	r2, #0
    6fc2:	801a      	strh	r2, [r3, #0]
    6fc4:	f64a 2399 	movw	r3, #43673	; 0xaa99
    6fc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fcc:	2200      	movs	r2, #0
    6fce:	701a      	strb	r2, [r3, #0]
}  
    6fd0:	46bd      	mov	sp, r7
    6fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fd6:	4770      	bx	lr

00006fd8 <copy_from_to_fbw>:


/** \fn inline void copy_from_to_fbw ( void )
 *  \brief Send back uncontrolled channels (only rudder)
 */
inline void copy_from_to_fbw ( void ) {
    6fd8:	b480      	push	{r7}
    6fda:	af00      	add	r7, sp, #0
  to_fbw.channels[RADIO_YAW] = from_fbw.channels[RADIO_YAW];
    6fdc:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    6fe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fe4:	88da      	ldrh	r2, [r3, #6]
    6fe6:	f64a 33d0 	movw	r3, #43984	; 0xabd0
    6fea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fee:	80da      	strh	r2, [r3, #6]
#ifdef ANTON_T7
  to_fbw.channels[RADIO_PITCH] = from_fbw.channels[RADIO_PITCH];
#endif
  to_fbw.status = 0;
    6ff0:	f64a 33d0 	movw	r3, #43984	; 0xabd0
    6ff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ff8:	2200      	movs	r2, #0
    6ffa:	74da      	strb	r2, [r3, #19]
}
    6ffc:	46bd      	mov	sp, r7
    6ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
    7002:	4770      	bx	lr

00007004 <send_boot>:
/** \fn inline void reporting_task( void )
 *  \brief Send a serie of initialisation messages followed by a stream of periodic ones\n
 * Called at 20Hz.
 */

void send_boot(void){
    7004:	b480      	push	{r7}
    7006:	af00      	add	r7, sp, #0
  /** initialisation phase during boot */
  //vPrintString("S_13 reporting_task start!\n\r");
  //add by wanbo
  //if (boot) 
  {
      DOWNLINK_SEND_BOOT(&version);
    7008:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    700c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7010:	781a      	ldrb	r2, [r3, #0]
    7012:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    7016:	f2c2 0300 	movt	r3, #8192	; 0x2000
    701a:	781b      	ldrb	r3, [r3, #0]
    701c:	b2db      	uxtb	r3, r3
    701e:	429a      	cmp	r2, r3
    7020:	d313      	bcc.n	704a <send_boot+0x46>
    7022:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    7026:	f2c2 0300 	movt	r3, #8192	; 0x2000
    702a:	781b      	ldrb	r3, [r3, #0]
    702c:	b2db      	uxtb	r3, r3
    702e:	461a      	mov	r2, r3
    7030:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7034:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7038:	781b      	ldrb	r3, [r3, #0]
    703a:	1ad3      	subs	r3, r2, r3
    703c:	33ff      	adds	r3, #255	; 0xff
    703e:	2b06      	cmp	r3, #6
    7040:	bfd4      	ite	le
    7042:	2300      	movle	r3, #0
    7044:	2301      	movgt	r3, #1
    7046:	b2db      	uxtb	r3, r3
    7048:	e011      	b.n	706e <send_boot+0x6a>
    704a:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    704e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7052:	781b      	ldrb	r3, [r3, #0]
    7054:	b2db      	uxtb	r3, r3
    7056:	461a      	mov	r2, r3
    7058:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    705c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7060:	781b      	ldrb	r3, [r3, #0]
    7062:	1ad3      	subs	r3, r2, r3
    7064:	2b06      	cmp	r3, #6
    7066:	bfd4      	ite	le
    7068:	2300      	movle	r3, #0
    706a:	2301      	movgt	r3, #1
    706c:	b2db      	uxtb	r3, r3
    706e:	2b00      	cmp	r3, #0
    7070:	f000 8194 	beq.w	739c <send_boot+0x398>
    7074:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7078:	f2c2 0300 	movt	r3, #8192	; 0x2000
    707c:	781b      	ldrb	r3, [r3, #0]
    707e:	461a      	mov	r2, r3
    7080:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7084:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7088:	2105      	movs	r1, #5
    708a:	5499      	strb	r1, [r3, r2]
    708c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7090:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7094:	781b      	ldrb	r3, [r3, #0]
    7096:	3301      	adds	r3, #1
    7098:	b2da      	uxtb	r2, r3
    709a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    709e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70a2:	701a      	strb	r2, [r3, #0]
    70a4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    70a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70ac:	781b      	ldrb	r3, [r3, #0]
    70ae:	2bff      	cmp	r3, #255	; 0xff
    70b0:	d105      	bne.n	70be <send_boot+0xba>
    70b2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    70b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70ba:	2200      	movs	r2, #0
    70bc:	701a      	strb	r2, [r3, #0]
    70be:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    70c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70c6:	781b      	ldrb	r3, [r3, #0]
    70c8:	461a      	mov	r2, r3
    70ca:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    70ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70d2:	2101      	movs	r1, #1
    70d4:	5499      	strb	r1, [r3, r2]
    70d6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    70da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70de:	781b      	ldrb	r3, [r3, #0]
    70e0:	3301      	adds	r3, #1
    70e2:	b2da      	uxtb	r2, r3
    70e4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    70e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70ec:	701a      	strb	r2, [r3, #0]
    70ee:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    70f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70f6:	781b      	ldrb	r3, [r3, #0]
    70f8:	2bff      	cmp	r3, #255	; 0xff
    70fa:	d105      	bne.n	7108 <send_boot+0x104>
    70fc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7100:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7104:	2200      	movs	r2, #0
    7106:	701a      	strb	r2, [r3, #0]
    7108:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    710c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7110:	2201      	movs	r2, #1
    7112:	701a      	strb	r2, [r3, #0]
    7114:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7118:	f2c2 0300 	movt	r3, #8192	; 0x2000
    711c:	2201      	movs	r2, #1
    711e:	701a      	strb	r2, [r3, #0]
    7120:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7124:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7128:	781b      	ldrb	r3, [r3, #0]
    712a:	461a      	mov	r2, r3
    712c:	f648 03ae 	movw	r3, #34990	; 0x88ae
    7130:	f2c0 0301 	movt	r3, #1
    7134:	7819      	ldrb	r1, [r3, #0]
    7136:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    713a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    713e:	5499      	strb	r1, [r3, r2]
    7140:	f648 03ae 	movw	r3, #34990	; 0x88ae
    7144:	f2c0 0301 	movt	r3, #1
    7148:	781a      	ldrb	r2, [r3, #0]
    714a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    714e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7152:	781b      	ldrb	r3, [r3, #0]
    7154:	4413      	add	r3, r2
    7156:	b2da      	uxtb	r2, r3
    7158:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    715c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7160:	701a      	strb	r2, [r3, #0]
    7162:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7166:	f2c2 0300 	movt	r3, #8192	; 0x2000
    716a:	781a      	ldrb	r2, [r3, #0]
    716c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7170:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7174:	781b      	ldrb	r3, [r3, #0]
    7176:	4413      	add	r3, r2
    7178:	b2da      	uxtb	r2, r3
    717a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    717e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7182:	701a      	strb	r2, [r3, #0]
    7184:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7188:	f2c2 0300 	movt	r3, #8192	; 0x2000
    718c:	781b      	ldrb	r3, [r3, #0]
    718e:	3301      	adds	r3, #1
    7190:	b2da      	uxtb	r2, r3
    7192:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7196:	f2c2 0300 	movt	r3, #8192	; 0x2000
    719a:	701a      	strb	r2, [r3, #0]
    719c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    71a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71a4:	781b      	ldrb	r3, [r3, #0]
    71a6:	2bff      	cmp	r3, #255	; 0xff
    71a8:	d105      	bne.n	71b6 <send_boot+0x1b2>
    71aa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    71ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71b2:	2200      	movs	r2, #0
    71b4:	701a      	strb	r2, [r3, #0]
    71b6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    71ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71be:	781b      	ldrb	r3, [r3, #0]
    71c0:	461a      	mov	r2, r3
    71c2:	f648 03ae 	movw	r3, #34990	; 0x88ae
    71c6:	f2c0 0301 	movt	r3, #1
    71ca:	7859      	ldrb	r1, [r3, #1]
    71cc:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    71d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71d4:	5499      	strb	r1, [r3, r2]
    71d6:	4b88      	ldr	r3, [pc, #544]	; (73f8 <send_boot+0x3f4>)
    71d8:	781a      	ldrb	r2, [r3, #0]
    71da:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    71de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71e2:	781b      	ldrb	r3, [r3, #0]
    71e4:	4413      	add	r3, r2
    71e6:	b2da      	uxtb	r2, r3
    71e8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    71ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71f0:	701a      	strb	r2, [r3, #0]
    71f2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    71f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71fa:	781a      	ldrb	r2, [r3, #0]
    71fc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7200:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7204:	781b      	ldrb	r3, [r3, #0]
    7206:	4413      	add	r3, r2
    7208:	b2da      	uxtb	r2, r3
    720a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    720e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7212:	701a      	strb	r2, [r3, #0]
    7214:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7218:	f2c2 0300 	movt	r3, #8192	; 0x2000
    721c:	781b      	ldrb	r3, [r3, #0]
    721e:	3301      	adds	r3, #1
    7220:	b2da      	uxtb	r2, r3
    7222:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    722a:	701a      	strb	r2, [r3, #0]
    722c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7230:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7234:	781b      	ldrb	r3, [r3, #0]
    7236:	2bff      	cmp	r3, #255	; 0xff
    7238:	d105      	bne.n	7246 <send_boot+0x242>
    723a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    723e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7242:	2200      	movs	r2, #0
    7244:	701a      	strb	r2, [r3, #0]
    7246:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    724a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    724e:	781b      	ldrb	r3, [r3, #0]
    7250:	461a      	mov	r2, r3
    7252:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7256:	f2c2 0300 	movt	r3, #8192	; 0x2000
    725a:	7819      	ldrb	r1, [r3, #0]
    725c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7260:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7264:	5499      	strb	r1, [r3, r2]
    7266:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    726a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    726e:	781b      	ldrb	r3, [r3, #0]
    7270:	3301      	adds	r3, #1
    7272:	b2da      	uxtb	r2, r3
    7274:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7278:	f2c2 0300 	movt	r3, #8192	; 0x2000
    727c:	701a      	strb	r2, [r3, #0]
    727e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7282:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7286:	781b      	ldrb	r3, [r3, #0]
    7288:	2bff      	cmp	r3, #255	; 0xff
    728a:	d105      	bne.n	7298 <send_boot+0x294>
    728c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7290:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7294:	2200      	movs	r2, #0
    7296:	701a      	strb	r2, [r3, #0]
    7298:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    729c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72a0:	781b      	ldrb	r3, [r3, #0]
    72a2:	461a      	mov	r2, r3
    72a4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    72a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72ac:	7819      	ldrb	r1, [r3, #0]
    72ae:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    72b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72b6:	5499      	strb	r1, [r3, r2]
    72b8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    72bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72c0:	781b      	ldrb	r3, [r3, #0]
    72c2:	3301      	adds	r3, #1
    72c4:	b2da      	uxtb	r2, r3
    72c6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    72ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72ce:	701a      	strb	r2, [r3, #0]
    72d0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    72d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72d8:	781b      	ldrb	r3, [r3, #0]
    72da:	2bff      	cmp	r3, #255	; 0xff
    72dc:	d105      	bne.n	72ea <send_boot+0x2e6>
    72de:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    72e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72e6:	2200      	movs	r2, #0
    72e8:	701a      	strb	r2, [r3, #0]
    72ea:	f242 0339 	movw	r3, #8249	; 0x2039
    72ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72f2:	781b      	ldrb	r3, [r3, #0]
    72f4:	b2db      	uxtb	r3, r3
    72f6:	f003 0310 	and.w	r3, r3, #16
    72fa:	2b00      	cmp	r3, #0
    72fc:	d15a      	bne.n	73b4 <send_boot+0x3b0>
    72fe:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    7302:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7306:	781b      	ldrb	r3, [r3, #0]
    7308:	b2db      	uxtb	r3, r3
    730a:	461a      	mov	r2, r3
    730c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7310:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7314:	5c9a      	ldrb	r2, [r3, r2]
    7316:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    731a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    731e:	701a      	strb	r2, [r3, #0]
    7320:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    7324:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7328:	2200      	movs	r2, #0
    732a:	701a      	strb	r2, [r3, #0]
    732c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    7330:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7334:	781b      	ldrb	r3, [r3, #0]
    7336:	b2db      	uxtb	r3, r3
    7338:	3301      	adds	r3, #1
    733a:	b2da      	uxtb	r2, r3
    733c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    7340:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7344:	701a      	strb	r2, [r3, #0]
    7346:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    734a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    734e:	781b      	ldrb	r3, [r3, #0]
    7350:	b2db      	uxtb	r3, r3
    7352:	2bff      	cmp	r3, #255	; 0xff
    7354:	d105      	bne.n	7362 <send_boot+0x35e>
    7356:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    735a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    735e:	2200      	movs	r2, #0
    7360:	701a      	strb	r2, [r3, #0]
    7362:	f242 0338 	movw	r3, #8248	; 0x2038
    7366:	f2c2 0300 	movt	r3, #8192	; 0x2000
    736a:	f242 0238 	movw	r2, #8248	; 0x2038
    736e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7372:	7812      	ldrb	r2, [r2, #0]
    7374:	b2d2      	uxtb	r2, r2
    7376:	f042 0201 	orr.w	r2, r2, #1
    737a:	b2d2      	uxtb	r2, r2
    737c:	701a      	strb	r2, [r3, #0]
    737e:	f242 0339 	movw	r3, #8249	; 0x2039
    7382:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7386:	f242 0239 	movw	r2, #8249	; 0x2039
    738a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    738e:	7812      	ldrb	r2, [r2, #0]
    7390:	b2d2      	uxtb	r2, r2
    7392:	f042 0210 	orr.w	r2, r2, #16
    7396:	b2d2      	uxtb	r2, r2
    7398:	701a      	strb	r2, [r3, #0]
    739a:	e00b      	b.n	73b4 <send_boot+0x3b0>
    739c:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    73a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73a4:	781b      	ldrb	r3, [r3, #0]
    73a6:	3301      	adds	r3, #1
    73a8:	b2da      	uxtb	r2, r3
    73aa:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    73ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73b2:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    73b4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    73b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73bc:	781a      	ldrb	r2, [r3, #0]
    73be:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    73c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73c6:	781b      	ldrb	r3, [r3, #0]
    73c8:	b2db      	uxtb	r3, r3
    73ca:	429a      	cmp	r2, r3
    73cc:	d316      	bcc.n	73fc <send_boot+0x3f8>
    73ce:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    73d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73d6:	781b      	ldrb	r3, [r3, #0]
    73d8:	b2db      	uxtb	r3, r3
    73da:	461a      	mov	r2, r3
    73dc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    73e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73e4:	781b      	ldrb	r3, [r3, #0]
    73e6:	1ad3      	subs	r3, r2, r3
    73e8:	33ff      	adds	r3, #255	; 0xff
    73ea:	2b14      	cmp	r3, #20
    73ec:	bfd4      	ite	le
    73ee:	2300      	movle	r3, #0
    73f0:	2301      	movgt	r3, #1
    73f2:	b2db      	uxtb	r3, r3
    73f4:	e014      	b.n	7420 <send_boot+0x41c>
    73f6:	bf00      	nop
    73f8:	000188af 	.word	0x000188af
    73fc:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    7400:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7404:	781b      	ldrb	r3, [r3, #0]
    7406:	b2db      	uxtb	r3, r3
    7408:	461a      	mov	r2, r3
    740a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    740e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7412:	781b      	ldrb	r3, [r3, #0]
    7414:	1ad3      	subs	r3, r2, r3
    7416:	2b14      	cmp	r3, #20
    7418:	bfd4      	ite	le
    741a:	2300      	movle	r3, #0
    741c:	2301      	movgt	r3, #1
    741e:	b2db      	uxtb	r3, r3
    7420:	2b00      	cmp	r3, #0
    7422:	f000 85a5 	beq.w	7f70 <send_boot+0xf6c>
    7426:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    742a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    742e:	781b      	ldrb	r3, [r3, #0]
    7430:	461a      	mov	r2, r3
    7432:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7436:	f2c2 0300 	movt	r3, #8192	; 0x2000
    743a:	2105      	movs	r1, #5
    743c:	5499      	strb	r1, [r3, r2]
    743e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7442:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7446:	781b      	ldrb	r3, [r3, #0]
    7448:	3301      	adds	r3, #1
    744a:	b2da      	uxtb	r2, r3
    744c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7450:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7454:	701a      	strb	r2, [r3, #0]
    7456:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    745a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    745e:	781b      	ldrb	r3, [r3, #0]
    7460:	2bff      	cmp	r3, #255	; 0xff
    7462:	d105      	bne.n	7470 <send_boot+0x46c>
    7464:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7468:	f2c2 0300 	movt	r3, #8192	; 0x2000
    746c:	2200      	movs	r2, #0
    746e:	701a      	strb	r2, [r3, #0]
    7470:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7474:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7478:	781b      	ldrb	r3, [r3, #0]
    747a:	461a      	mov	r2, r3
    747c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7480:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7484:	2105      	movs	r1, #5
    7486:	5499      	strb	r1, [r3, r2]
    7488:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    748c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7490:	781b      	ldrb	r3, [r3, #0]
    7492:	3301      	adds	r3, #1
    7494:	b2da      	uxtb	r2, r3
    7496:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    749a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    749e:	701a      	strb	r2, [r3, #0]
    74a0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    74a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74a8:	781b      	ldrb	r3, [r3, #0]
    74aa:	2bff      	cmp	r3, #255	; 0xff
    74ac:	d105      	bne.n	74ba <send_boot+0x4b6>
    74ae:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    74b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74b6:	2200      	movs	r2, #0
    74b8:	701a      	strb	r2, [r3, #0]
    74ba:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    74be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74c2:	2205      	movs	r2, #5
    74c4:	701a      	strb	r2, [r3, #0]
    74c6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    74ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74ce:	2205      	movs	r2, #5
    74d0:	701a      	strb	r2, [r3, #0]
    74d2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    74d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74da:	781b      	ldrb	r3, [r3, #0]
    74dc:	461a      	mov	r2, r3
    74de:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    74e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74e6:	7819      	ldrb	r1, [r3, #0]
    74e8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    74ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74f0:	5499      	strb	r1, [r3, r2]
    74f2:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    74f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74fa:	781a      	ldrb	r2, [r3, #0]
    74fc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7500:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7504:	781b      	ldrb	r3, [r3, #0]
    7506:	4413      	add	r3, r2
    7508:	b2da      	uxtb	r2, r3
    750a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    750e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7512:	701a      	strb	r2, [r3, #0]
    7514:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7518:	f2c2 0300 	movt	r3, #8192	; 0x2000
    751c:	781a      	ldrb	r2, [r3, #0]
    751e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7522:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7526:	781b      	ldrb	r3, [r3, #0]
    7528:	4413      	add	r3, r2
    752a:	b2da      	uxtb	r2, r3
    752c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7530:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7534:	701a      	strb	r2, [r3, #0]
    7536:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    753a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    753e:	781b      	ldrb	r3, [r3, #0]
    7540:	3301      	adds	r3, #1
    7542:	b2da      	uxtb	r2, r3
    7544:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7548:	f2c2 0300 	movt	r3, #8192	; 0x2000
    754c:	701a      	strb	r2, [r3, #0]
    754e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7552:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7556:	781b      	ldrb	r3, [r3, #0]
    7558:	2bff      	cmp	r3, #255	; 0xff
    755a:	d105      	bne.n	7568 <send_boot+0x564>
    755c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7560:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7564:	2200      	movs	r2, #0
    7566:	701a      	strb	r2, [r3, #0]
    7568:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    756c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7570:	781b      	ldrb	r3, [r3, #0]
    7572:	461a      	mov	r2, r3
    7574:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    7578:	f2c2 0300 	movt	r3, #8192	; 0x2000
    757c:	7859      	ldrb	r1, [r3, #1]
    757e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7582:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7586:	5499      	strb	r1, [r3, r2]
    7588:	4bd1      	ldr	r3, [pc, #836]	; (78d0 <send_boot+0x8cc>)
    758a:	781a      	ldrb	r2, [r3, #0]
    758c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7590:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7594:	781b      	ldrb	r3, [r3, #0]
    7596:	4413      	add	r3, r2
    7598:	b2da      	uxtb	r2, r3
    759a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    759e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75a2:	701a      	strb	r2, [r3, #0]
    75a4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    75a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75ac:	781a      	ldrb	r2, [r3, #0]
    75ae:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    75b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75b6:	781b      	ldrb	r3, [r3, #0]
    75b8:	4413      	add	r3, r2
    75ba:	b2da      	uxtb	r2, r3
    75bc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    75c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75c4:	701a      	strb	r2, [r3, #0]
    75c6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    75ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75ce:	781b      	ldrb	r3, [r3, #0]
    75d0:	3301      	adds	r3, #1
    75d2:	b2da      	uxtb	r2, r3
    75d4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    75d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75dc:	701a      	strb	r2, [r3, #0]
    75de:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    75e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75e6:	781b      	ldrb	r3, [r3, #0]
    75e8:	2bff      	cmp	r3, #255	; 0xff
    75ea:	d105      	bne.n	75f8 <send_boot+0x5f4>
    75ec:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    75f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75f4:	2200      	movs	r2, #0
    75f6:	701a      	strb	r2, [r3, #0]
    75f8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    75fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7600:	781b      	ldrb	r3, [r3, #0]
    7602:	461a      	mov	r2, r3
    7604:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    7608:	f2c2 0300 	movt	r3, #8192	; 0x2000
    760c:	7899      	ldrb	r1, [r3, #2]
    760e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7612:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7616:	5499      	strb	r1, [r3, r2]
    7618:	4bae      	ldr	r3, [pc, #696]	; (78d4 <send_boot+0x8d0>)
    761a:	781a      	ldrb	r2, [r3, #0]
    761c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7620:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7624:	781b      	ldrb	r3, [r3, #0]
    7626:	4413      	add	r3, r2
    7628:	b2da      	uxtb	r2, r3
    762a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    762e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7632:	701a      	strb	r2, [r3, #0]
    7634:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7638:	f2c2 0300 	movt	r3, #8192	; 0x2000
    763c:	781a      	ldrb	r2, [r3, #0]
    763e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7642:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7646:	781b      	ldrb	r3, [r3, #0]
    7648:	4413      	add	r3, r2
    764a:	b2da      	uxtb	r2, r3
    764c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7650:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7654:	701a      	strb	r2, [r3, #0]
    7656:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    765a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    765e:	781b      	ldrb	r3, [r3, #0]
    7660:	3301      	adds	r3, #1
    7662:	b2da      	uxtb	r2, r3
    7664:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7668:	f2c2 0300 	movt	r3, #8192	; 0x2000
    766c:	701a      	strb	r2, [r3, #0]
    766e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7672:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7676:	781b      	ldrb	r3, [r3, #0]
    7678:	2bff      	cmp	r3, #255	; 0xff
    767a:	d105      	bne.n	7688 <send_boot+0x684>
    767c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7680:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7684:	2200      	movs	r2, #0
    7686:	701a      	strb	r2, [r3, #0]
    7688:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    768c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7690:	781b      	ldrb	r3, [r3, #0]
    7692:	461a      	mov	r2, r3
    7694:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    7698:	f2c2 0300 	movt	r3, #8192	; 0x2000
    769c:	78d9      	ldrb	r1, [r3, #3]
    769e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    76a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76a6:	5499      	strb	r1, [r3, r2]
    76a8:	4b8b      	ldr	r3, [pc, #556]	; (78d8 <send_boot+0x8d4>)
    76aa:	781a      	ldrb	r2, [r3, #0]
    76ac:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    76b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76b4:	781b      	ldrb	r3, [r3, #0]
    76b6:	4413      	add	r3, r2
    76b8:	b2da      	uxtb	r2, r3
    76ba:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    76be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76c2:	701a      	strb	r2, [r3, #0]
    76c4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    76c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76cc:	781a      	ldrb	r2, [r3, #0]
    76ce:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    76d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76d6:	781b      	ldrb	r3, [r3, #0]
    76d8:	4413      	add	r3, r2
    76da:	b2da      	uxtb	r2, r3
    76dc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    76e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76e4:	701a      	strb	r2, [r3, #0]
    76e6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    76ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76ee:	781b      	ldrb	r3, [r3, #0]
    76f0:	3301      	adds	r3, #1
    76f2:	b2da      	uxtb	r2, r3
    76f4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    76f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76fc:	701a      	strb	r2, [r3, #0]
    76fe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7702:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7706:	781b      	ldrb	r3, [r3, #0]
    7708:	2bff      	cmp	r3, #255	; 0xff
    770a:	d105      	bne.n	7718 <send_boot+0x714>
    770c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7710:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7714:	2200      	movs	r2, #0
    7716:	701a      	strb	r2, [r3, #0]
    7718:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    771c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7720:	781b      	ldrb	r3, [r3, #0]
    7722:	461a      	mov	r2, r3
    7724:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    7728:	f2c2 0300 	movt	r3, #8192	; 0x2000
    772c:	7819      	ldrb	r1, [r3, #0]
    772e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7732:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7736:	5499      	strb	r1, [r3, r2]
    7738:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    773c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7740:	781a      	ldrb	r2, [r3, #0]
    7742:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7746:	f2c2 0300 	movt	r3, #8192	; 0x2000
    774a:	781b      	ldrb	r3, [r3, #0]
    774c:	4413      	add	r3, r2
    774e:	b2da      	uxtb	r2, r3
    7750:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7754:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7758:	701a      	strb	r2, [r3, #0]
    775a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    775e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7762:	781a      	ldrb	r2, [r3, #0]
    7764:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7768:	f2c2 0300 	movt	r3, #8192	; 0x2000
    776c:	781b      	ldrb	r3, [r3, #0]
    776e:	4413      	add	r3, r2
    7770:	b2da      	uxtb	r2, r3
    7772:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7776:	f2c2 0300 	movt	r3, #8192	; 0x2000
    777a:	701a      	strb	r2, [r3, #0]
    777c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7784:	781b      	ldrb	r3, [r3, #0]
    7786:	3301      	adds	r3, #1
    7788:	b2da      	uxtb	r2, r3
    778a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    778e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7792:	701a      	strb	r2, [r3, #0]
    7794:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7798:	f2c2 0300 	movt	r3, #8192	; 0x2000
    779c:	781b      	ldrb	r3, [r3, #0]
    779e:	2bff      	cmp	r3, #255	; 0xff
    77a0:	d105      	bne.n	77ae <send_boot+0x7aa>
    77a2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    77a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77aa:	2200      	movs	r2, #0
    77ac:	701a      	strb	r2, [r3, #0]
    77ae:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    77b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77b6:	781b      	ldrb	r3, [r3, #0]
    77b8:	461a      	mov	r2, r3
    77ba:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    77be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77c2:	7859      	ldrb	r1, [r3, #1]
    77c4:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    77c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77cc:	5499      	strb	r1, [r3, r2]
    77ce:	4b43      	ldr	r3, [pc, #268]	; (78dc <send_boot+0x8d8>)
    77d0:	781a      	ldrb	r2, [r3, #0]
    77d2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    77d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77da:	781b      	ldrb	r3, [r3, #0]
    77dc:	4413      	add	r3, r2
    77de:	b2da      	uxtb	r2, r3
    77e0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    77e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77e8:	701a      	strb	r2, [r3, #0]
    77ea:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    77ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77f2:	781a      	ldrb	r2, [r3, #0]
    77f4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    77f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77fc:	781b      	ldrb	r3, [r3, #0]
    77fe:	4413      	add	r3, r2
    7800:	b2da      	uxtb	r2, r3
    7802:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    780a:	701a      	strb	r2, [r3, #0]
    780c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7810:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7814:	781b      	ldrb	r3, [r3, #0]
    7816:	3301      	adds	r3, #1
    7818:	b2da      	uxtb	r2, r3
    781a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    781e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7822:	701a      	strb	r2, [r3, #0]
    7824:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7828:	f2c2 0300 	movt	r3, #8192	; 0x2000
    782c:	781b      	ldrb	r3, [r3, #0]
    782e:	2bff      	cmp	r3, #255	; 0xff
    7830:	d105      	bne.n	783e <send_boot+0x83a>
    7832:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7836:	f2c2 0300 	movt	r3, #8192	; 0x2000
    783a:	2200      	movs	r2, #0
    783c:	701a      	strb	r2, [r3, #0]
    783e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7842:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7846:	781b      	ldrb	r3, [r3, #0]
    7848:	461a      	mov	r2, r3
    784a:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    784e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7852:	7899      	ldrb	r1, [r3, #2]
    7854:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7858:	f2c2 0300 	movt	r3, #8192	; 0x2000
    785c:	5499      	strb	r1, [r3, r2]
    785e:	4b20      	ldr	r3, [pc, #128]	; (78e0 <send_boot+0x8dc>)
    7860:	781a      	ldrb	r2, [r3, #0]
    7862:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7866:	f2c2 0300 	movt	r3, #8192	; 0x2000
    786a:	781b      	ldrb	r3, [r3, #0]
    786c:	4413      	add	r3, r2
    786e:	b2da      	uxtb	r2, r3
    7870:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7874:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7878:	701a      	strb	r2, [r3, #0]
    787a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    787e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7882:	781a      	ldrb	r2, [r3, #0]
    7884:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7888:	f2c2 0300 	movt	r3, #8192	; 0x2000
    788c:	781b      	ldrb	r3, [r3, #0]
    788e:	4413      	add	r3, r2
    7890:	b2da      	uxtb	r2, r3
    7892:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7896:	f2c2 0300 	movt	r3, #8192	; 0x2000
    789a:	701a      	strb	r2, [r3, #0]
    789c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    78a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78a4:	781b      	ldrb	r3, [r3, #0]
    78a6:	3301      	adds	r3, #1
    78a8:	b2da      	uxtb	r2, r3
    78aa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    78ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78b2:	701a      	strb	r2, [r3, #0]
    78b4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    78b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78bc:	781b      	ldrb	r3, [r3, #0]
    78be:	2bff      	cmp	r3, #255	; 0xff
    78c0:	d110      	bne.n	78e4 <send_boot+0x8e0>
    78c2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    78c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78ca:	2200      	movs	r2, #0
    78cc:	701a      	strb	r2, [r3, #0]
    78ce:	e009      	b.n	78e4 <send_boot+0x8e0>
    78d0:	2000b0a9 	.word	0x2000b0a9
    78d4:	2000b0aa 	.word	0x2000b0aa
    78d8:	2000b0ab 	.word	0x2000b0ab
    78dc:	2000b0ad 	.word	0x2000b0ad
    78e0:	2000b0ae 	.word	0x2000b0ae
    78e4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    78e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78ec:	781b      	ldrb	r3, [r3, #0]
    78ee:	461a      	mov	r2, r3
    78f0:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    78f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78f8:	78d9      	ldrb	r1, [r3, #3]
    78fa:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    78fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7902:	5499      	strb	r1, [r3, r2]
    7904:	4bd3      	ldr	r3, [pc, #844]	; (7c54 <send_boot+0xc50>)
    7906:	781a      	ldrb	r2, [r3, #0]
    7908:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    790c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7910:	781b      	ldrb	r3, [r3, #0]
    7912:	4413      	add	r3, r2
    7914:	b2da      	uxtb	r2, r3
    7916:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    791a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    791e:	701a      	strb	r2, [r3, #0]
    7920:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7924:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7928:	781a      	ldrb	r2, [r3, #0]
    792a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    792e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7932:	781b      	ldrb	r3, [r3, #0]
    7934:	4413      	add	r3, r2
    7936:	b2da      	uxtb	r2, r3
    7938:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    793c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7940:	701a      	strb	r2, [r3, #0]
    7942:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7946:	f2c2 0300 	movt	r3, #8192	; 0x2000
    794a:	781b      	ldrb	r3, [r3, #0]
    794c:	3301      	adds	r3, #1
    794e:	b2da      	uxtb	r2, r3
    7950:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7954:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7958:	701a      	strb	r2, [r3, #0]
    795a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    795e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7962:	781b      	ldrb	r3, [r3, #0]
    7964:	2bff      	cmp	r3, #255	; 0xff
    7966:	d105      	bne.n	7974 <send_boot+0x970>
    7968:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    796c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7970:	2200      	movs	r2, #0
    7972:	701a      	strb	r2, [r3, #0]
    7974:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7978:	f2c2 0300 	movt	r3, #8192	; 0x2000
    797c:	781b      	ldrb	r3, [r3, #0]
    797e:	461a      	mov	r2, r3
    7980:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
    7984:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7988:	7819      	ldrb	r1, [r3, #0]
    798a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    798e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7992:	5499      	strb	r1, [r3, r2]
    7994:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
    7998:	f2c2 0300 	movt	r3, #8192	; 0x2000
    799c:	781a      	ldrb	r2, [r3, #0]
    799e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    79a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79a6:	781b      	ldrb	r3, [r3, #0]
    79a8:	4413      	add	r3, r2
    79aa:	b2da      	uxtb	r2, r3
    79ac:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    79b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79b4:	701a      	strb	r2, [r3, #0]
    79b6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    79ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79be:	781a      	ldrb	r2, [r3, #0]
    79c0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    79c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79c8:	781b      	ldrb	r3, [r3, #0]
    79ca:	4413      	add	r3, r2
    79cc:	b2da      	uxtb	r2, r3
    79ce:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    79d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79d6:	701a      	strb	r2, [r3, #0]
    79d8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    79dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79e0:	781b      	ldrb	r3, [r3, #0]
    79e2:	3301      	adds	r3, #1
    79e4:	b2da      	uxtb	r2, r3
    79e6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    79ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79ee:	701a      	strb	r2, [r3, #0]
    79f0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    79f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79f8:	781b      	ldrb	r3, [r3, #0]
    79fa:	2bff      	cmp	r3, #255	; 0xff
    79fc:	d105      	bne.n	7a0a <send_boot+0xa06>
    79fe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7a02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a06:	2200      	movs	r2, #0
    7a08:	701a      	strb	r2, [r3, #0]
    7a0a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7a0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a12:	781b      	ldrb	r3, [r3, #0]
    7a14:	461a      	mov	r2, r3
    7a16:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
    7a1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a1e:	7859      	ldrb	r1, [r3, #1]
    7a20:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7a24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a28:	5499      	strb	r1, [r3, r2]
    7a2a:	4b8b      	ldr	r3, [pc, #556]	; (7c58 <send_boot+0xc54>)
    7a2c:	781a      	ldrb	r2, [r3, #0]
    7a2e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7a32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a36:	781b      	ldrb	r3, [r3, #0]
    7a38:	4413      	add	r3, r2
    7a3a:	b2da      	uxtb	r2, r3
    7a3c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7a40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a44:	701a      	strb	r2, [r3, #0]
    7a46:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7a4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a4e:	781a      	ldrb	r2, [r3, #0]
    7a50:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a58:	781b      	ldrb	r3, [r3, #0]
    7a5a:	4413      	add	r3, r2
    7a5c:	b2da      	uxtb	r2, r3
    7a5e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7a62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a66:	701a      	strb	r2, [r3, #0]
    7a68:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7a6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a70:	781b      	ldrb	r3, [r3, #0]
    7a72:	3301      	adds	r3, #1
    7a74:	b2da      	uxtb	r2, r3
    7a76:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7a7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a7e:	701a      	strb	r2, [r3, #0]
    7a80:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a88:	781b      	ldrb	r3, [r3, #0]
    7a8a:	2bff      	cmp	r3, #255	; 0xff
    7a8c:	d105      	bne.n	7a9a <send_boot+0xa96>
    7a8e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7a92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a96:	2200      	movs	r2, #0
    7a98:	701a      	strb	r2, [r3, #0]
    7a9a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7a9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7aa2:	781b      	ldrb	r3, [r3, #0]
    7aa4:	461a      	mov	r2, r3
    7aa6:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
    7aaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7aae:	7899      	ldrb	r1, [r3, #2]
    7ab0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ab8:	5499      	strb	r1, [r3, r2]
    7aba:	4b68      	ldr	r3, [pc, #416]	; (7c5c <send_boot+0xc58>)
    7abc:	781a      	ldrb	r2, [r3, #0]
    7abe:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7ac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ac6:	781b      	ldrb	r3, [r3, #0]
    7ac8:	4413      	add	r3, r2
    7aca:	b2da      	uxtb	r2, r3
    7acc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7ad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ad4:	701a      	strb	r2, [r3, #0]
    7ad6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7ada:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ade:	781a      	ldrb	r2, [r3, #0]
    7ae0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ae8:	781b      	ldrb	r3, [r3, #0]
    7aea:	4413      	add	r3, r2
    7aec:	b2da      	uxtb	r2, r3
    7aee:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7af2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7af6:	701a      	strb	r2, [r3, #0]
    7af8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7afc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b00:	781b      	ldrb	r3, [r3, #0]
    7b02:	3301      	adds	r3, #1
    7b04:	b2da      	uxtb	r2, r3
    7b06:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7b0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b0e:	701a      	strb	r2, [r3, #0]
    7b10:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7b14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b18:	781b      	ldrb	r3, [r3, #0]
    7b1a:	2bff      	cmp	r3, #255	; 0xff
    7b1c:	d105      	bne.n	7b2a <send_boot+0xb26>
    7b1e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7b22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b26:	2200      	movs	r2, #0
    7b28:	701a      	strb	r2, [r3, #0]
    7b2a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7b2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b32:	781b      	ldrb	r3, [r3, #0]
    7b34:	461a      	mov	r2, r3
    7b36:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
    7b3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b3e:	78d9      	ldrb	r1, [r3, #3]
    7b40:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7b44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b48:	5499      	strb	r1, [r3, r2]
    7b4a:	4b45      	ldr	r3, [pc, #276]	; (7c60 <send_boot+0xc5c>)
    7b4c:	781a      	ldrb	r2, [r3, #0]
    7b4e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7b52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b56:	781b      	ldrb	r3, [r3, #0]
    7b58:	4413      	add	r3, r2
    7b5a:	b2da      	uxtb	r2, r3
    7b5c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7b60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b64:	701a      	strb	r2, [r3, #0]
    7b66:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7b6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b6e:	781a      	ldrb	r2, [r3, #0]
    7b70:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7b74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b78:	781b      	ldrb	r3, [r3, #0]
    7b7a:	4413      	add	r3, r2
    7b7c:	b2da      	uxtb	r2, r3
    7b7e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b86:	701a      	strb	r2, [r3, #0]
    7b88:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b90:	781b      	ldrb	r3, [r3, #0]
    7b92:	3301      	adds	r3, #1
    7b94:	b2da      	uxtb	r2, r3
    7b96:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b9e:	701a      	strb	r2, [r3, #0]
    7ba0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7ba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ba8:	781b      	ldrb	r3, [r3, #0]
    7baa:	2bff      	cmp	r3, #255	; 0xff
    7bac:	d105      	bne.n	7bba <send_boot+0xbb6>
    7bae:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7bb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bb6:	2200      	movs	r2, #0
    7bb8:	701a      	strb	r2, [r3, #0]
    7bba:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bc2:	781b      	ldrb	r3, [r3, #0]
    7bc4:	461a      	mov	r2, r3
    7bc6:	f240 2386 	movw	r3, #646	; 0x286
    7bca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bce:	7819      	ldrb	r1, [r3, #0]
    7bd0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7bd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bd8:	5499      	strb	r1, [r3, r2]
    7bda:	f240 2386 	movw	r3, #646	; 0x286
    7bde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7be2:	781a      	ldrb	r2, [r3, #0]
    7be4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7be8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bec:	781b      	ldrb	r3, [r3, #0]
    7bee:	4413      	add	r3, r2
    7bf0:	b2da      	uxtb	r2, r3
    7bf2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7bf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bfa:	701a      	strb	r2, [r3, #0]
    7bfc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7c00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c04:	781a      	ldrb	r2, [r3, #0]
    7c06:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7c0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c0e:	781b      	ldrb	r3, [r3, #0]
    7c10:	4413      	add	r3, r2
    7c12:	b2da      	uxtb	r2, r3
    7c14:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7c18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c1c:	701a      	strb	r2, [r3, #0]
    7c1e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7c22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c26:	781b      	ldrb	r3, [r3, #0]
    7c28:	3301      	adds	r3, #1
    7c2a:	b2da      	uxtb	r2, r3
    7c2c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c34:	701a      	strb	r2, [r3, #0]
    7c36:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7c3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c3e:	781b      	ldrb	r3, [r3, #0]
    7c40:	2bff      	cmp	r3, #255	; 0xff
    7c42:	d10f      	bne.n	7c64 <send_boot+0xc60>
    7c44:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7c48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c4c:	2200      	movs	r2, #0
    7c4e:	701a      	strb	r2, [r3, #0]
    7c50:	e008      	b.n	7c64 <send_boot+0xc60>
    7c52:	bf00      	nop
    7c54:	2000b0af 	.word	0x2000b0af
    7c58:	2000b0a5 	.word	0x2000b0a5
    7c5c:	2000b0a6 	.word	0x2000b0a6
    7c60:	2000b0a7 	.word	0x2000b0a7
    7c64:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7c68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c6c:	781b      	ldrb	r3, [r3, #0]
    7c6e:	461a      	mov	r2, r3
    7c70:	f240 2386 	movw	r3, #646	; 0x286
    7c74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c78:	7859      	ldrb	r1, [r3, #1]
    7c7a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7c7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c82:	5499      	strb	r1, [r3, r2]
    7c84:	4bc5      	ldr	r3, [pc, #788]	; (7f9c <send_boot+0xf98>)
    7c86:	781a      	ldrb	r2, [r3, #0]
    7c88:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7c8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c90:	781b      	ldrb	r3, [r3, #0]
    7c92:	4413      	add	r3, r2
    7c94:	b2da      	uxtb	r2, r3
    7c96:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7c9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c9e:	701a      	strb	r2, [r3, #0]
    7ca0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7ca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ca8:	781a      	ldrb	r2, [r3, #0]
    7caa:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7cae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cb2:	781b      	ldrb	r3, [r3, #0]
    7cb4:	4413      	add	r3, r2
    7cb6:	b2da      	uxtb	r2, r3
    7cb8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7cbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cc0:	701a      	strb	r2, [r3, #0]
    7cc2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7cc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cca:	781b      	ldrb	r3, [r3, #0]
    7ccc:	3301      	adds	r3, #1
    7cce:	b2da      	uxtb	r2, r3
    7cd0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7cd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cd8:	701a      	strb	r2, [r3, #0]
    7cda:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7cde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ce2:	781b      	ldrb	r3, [r3, #0]
    7ce4:	2bff      	cmp	r3, #255	; 0xff
    7ce6:	d105      	bne.n	7cf4 <send_boot+0xcf0>
    7ce8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7cec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cf0:	2200      	movs	r2, #0
    7cf2:	701a      	strb	r2, [r3, #0]
    7cf4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7cf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cfc:	781b      	ldrb	r3, [r3, #0]
    7cfe:	461a      	mov	r2, r3
    7d00:	f240 2388 	movw	r3, #648	; 0x288
    7d04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d08:	7819      	ldrb	r1, [r3, #0]
    7d0a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7d0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d12:	5499      	strb	r1, [r3, r2]
    7d14:	f240 2388 	movw	r3, #648	; 0x288
    7d18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d1c:	781a      	ldrb	r2, [r3, #0]
    7d1e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7d22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d26:	781b      	ldrb	r3, [r3, #0]
    7d28:	4413      	add	r3, r2
    7d2a:	b2da      	uxtb	r2, r3
    7d2c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7d30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d34:	701a      	strb	r2, [r3, #0]
    7d36:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7d3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d3e:	781a      	ldrb	r2, [r3, #0]
    7d40:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d48:	781b      	ldrb	r3, [r3, #0]
    7d4a:	4413      	add	r3, r2
    7d4c:	b2da      	uxtb	r2, r3
    7d4e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7d52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d56:	701a      	strb	r2, [r3, #0]
    7d58:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7d5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d60:	781b      	ldrb	r3, [r3, #0]
    7d62:	3301      	adds	r3, #1
    7d64:	b2da      	uxtb	r2, r3
    7d66:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7d6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d6e:	701a      	strb	r2, [r3, #0]
    7d70:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7d74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d78:	781b      	ldrb	r3, [r3, #0]
    7d7a:	2bff      	cmp	r3, #255	; 0xff
    7d7c:	d105      	bne.n	7d8a <send_boot+0xd86>
    7d7e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7d82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d86:	2200      	movs	r2, #0
    7d88:	701a      	strb	r2, [r3, #0]
    7d8a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7d8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d92:	781b      	ldrb	r3, [r3, #0]
    7d94:	461a      	mov	r2, r3
    7d96:	f240 2388 	movw	r3, #648	; 0x288
    7d9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d9e:	7859      	ldrb	r1, [r3, #1]
    7da0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7da4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7da8:	5499      	strb	r1, [r3, r2]
    7daa:	4b7d      	ldr	r3, [pc, #500]	; (7fa0 <send_boot+0xf9c>)
    7dac:	781a      	ldrb	r2, [r3, #0]
    7dae:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7db2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7db6:	781b      	ldrb	r3, [r3, #0]
    7db8:	4413      	add	r3, r2
    7dba:	b2da      	uxtb	r2, r3
    7dbc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7dc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dc4:	701a      	strb	r2, [r3, #0]
    7dc6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7dca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dce:	781a      	ldrb	r2, [r3, #0]
    7dd0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7dd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dd8:	781b      	ldrb	r3, [r3, #0]
    7dda:	4413      	add	r3, r2
    7ddc:	b2da      	uxtb	r2, r3
    7dde:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7de2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7de6:	701a      	strb	r2, [r3, #0]
    7de8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7dec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7df0:	781b      	ldrb	r3, [r3, #0]
    7df2:	3301      	adds	r3, #1
    7df4:	b2da      	uxtb	r2, r3
    7df6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7dfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dfe:	701a      	strb	r2, [r3, #0]
    7e00:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7e04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e08:	781b      	ldrb	r3, [r3, #0]
    7e0a:	2bff      	cmp	r3, #255	; 0xff
    7e0c:	d105      	bne.n	7e1a <send_boot+0xe16>
    7e0e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7e12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e16:	2200      	movs	r2, #0
    7e18:	701a      	strb	r2, [r3, #0]
    7e1a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7e1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e22:	781b      	ldrb	r3, [r3, #0]
    7e24:	461a      	mov	r2, r3
    7e26:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7e2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e2e:	7819      	ldrb	r1, [r3, #0]
    7e30:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7e34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e38:	5499      	strb	r1, [r3, r2]
    7e3a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7e3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e42:	781b      	ldrb	r3, [r3, #0]
    7e44:	3301      	adds	r3, #1
    7e46:	b2da      	uxtb	r2, r3
    7e48:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e50:	701a      	strb	r2, [r3, #0]
    7e52:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7e56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e5a:	781b      	ldrb	r3, [r3, #0]
    7e5c:	2bff      	cmp	r3, #255	; 0xff
    7e5e:	d105      	bne.n	7e6c <send_boot+0xe68>
    7e60:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7e64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e68:	2200      	movs	r2, #0
    7e6a:	701a      	strb	r2, [r3, #0]
    7e6c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7e70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e74:	781b      	ldrb	r3, [r3, #0]
    7e76:	461a      	mov	r2, r3
    7e78:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7e7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e80:	7819      	ldrb	r1, [r3, #0]
    7e82:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7e86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e8a:	5499      	strb	r1, [r3, r2]
    7e8c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7e90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e94:	781b      	ldrb	r3, [r3, #0]
    7e96:	3301      	adds	r3, #1
    7e98:	b2da      	uxtb	r2, r3
    7e9a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7e9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ea2:	701a      	strb	r2, [r3, #0]
    7ea4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7eac:	781b      	ldrb	r3, [r3, #0]
    7eae:	2bff      	cmp	r3, #255	; 0xff
    7eb0:	d105      	bne.n	7ebe <send_boot+0xeba>
    7eb2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7eb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7eba:	2200      	movs	r2, #0
    7ebc:	701a      	strb	r2, [r3, #0]
    7ebe:	f242 0339 	movw	r3, #8249	; 0x2039
    7ec2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ec6:	781b      	ldrb	r3, [r3, #0]
    7ec8:	b2db      	uxtb	r3, r3
    7eca:	f003 0310 	and.w	r3, r3, #16
    7ece:	2b00      	cmp	r3, #0
    7ed0:	d15a      	bne.n	7f88 <send_boot+0xf84>
    7ed2:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    7ed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7eda:	781b      	ldrb	r3, [r3, #0]
    7edc:	b2db      	uxtb	r3, r3
    7ede:	461a      	mov	r2, r3
    7ee0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ee8:	5c9a      	ldrb	r2, [r3, r2]
    7eea:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    7eee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ef2:	701a      	strb	r2, [r3, #0]
    7ef4:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    7ef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7efc:	2200      	movs	r2, #0
    7efe:	701a      	strb	r2, [r3, #0]
    7f00:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    7f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f08:	781b      	ldrb	r3, [r3, #0]
    7f0a:	b2db      	uxtb	r3, r3
    7f0c:	3301      	adds	r3, #1
    7f0e:	b2da      	uxtb	r2, r3
    7f10:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    7f14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f18:	701a      	strb	r2, [r3, #0]
    7f1a:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    7f1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f22:	781b      	ldrb	r3, [r3, #0]
    7f24:	b2db      	uxtb	r3, r3
    7f26:	2bff      	cmp	r3, #255	; 0xff
    7f28:	d105      	bne.n	7f36 <send_boot+0xf32>
    7f2a:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    7f2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f32:	2200      	movs	r2, #0
    7f34:	701a      	strb	r2, [r3, #0]
    7f36:	f242 0338 	movw	r3, #8248	; 0x2038
    7f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f3e:	f242 0238 	movw	r2, #8248	; 0x2038
    7f42:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7f46:	7812      	ldrb	r2, [r2, #0]
    7f48:	b2d2      	uxtb	r2, r2
    7f4a:	f042 0201 	orr.w	r2, r2, #1
    7f4e:	b2d2      	uxtb	r2, r2
    7f50:	701a      	strb	r2, [r3, #0]
    7f52:	f242 0339 	movw	r3, #8249	; 0x2039
    7f56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f5a:	f242 0239 	movw	r2, #8249	; 0x2039
    7f5e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7f62:	7812      	ldrb	r2, [r2, #0]
    7f64:	b2d2      	uxtb	r2, r2
    7f66:	f042 0210 	orr.w	r2, r2, #16
    7f6a:	b2d2      	uxtb	r2, r2
    7f6c:	701a      	strb	r2, [r3, #0]
    7f6e:	e00b      	b.n	7f88 <send_boot+0xf84>
    7f70:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    7f74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f78:	781b      	ldrb	r3, [r3, #0]
    7f7a:	3301      	adds	r3, #1
    7f7c:	b2da      	uxtb	r2, r3
    7f7e:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    7f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f86:	701a      	strb	r2, [r3, #0]
      boot = FALSE;
    7f88:	f240 2381 	movw	r3, #641	; 0x281
    7f8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f90:	2200      	movs	r2, #0
    7f92:	701a      	strb	r2, [r3, #0]
  }
}
    7f94:	46bd      	mov	sp, r7
    7f96:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f9a:	4770      	bx	lr
    7f9c:	20000287 	.word	0x20000287
    7fa0:	20000289 	.word	0x20000289

00007fa4 <send_attitude>:
void send_attitude(void){ //499ms
    7fa4:	b480      	push	{r7}
    7fa6:	af00      	add	r7, sp, #0
    // add by wanbo
  //if(!boot)
  {
    count++;
    7fa8:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    7fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fb0:	781b      	ldrb	r3, [r3, #0]
    7fb2:	3301      	adds	r3, #1
    7fb4:	b2da      	uxtb	r2, r3
    7fb6:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    7fba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fbe:	701a      	strb	r2, [r3, #0]
    if (count == 250) count = 0;
    7fc0:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    7fc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fc8:	781b      	ldrb	r3, [r3, #0]
    7fca:	2bfa      	cmp	r3, #250	; 0xfa
    7fcc:	d105      	bne.n	7fda <send_attitude+0x36>
    7fce:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    7fd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fd6:	2200      	movs	r2, #0
    7fd8:	701a      	strb	r2, [r3, #0]
    if (count % 5 == 0) 
    7fda:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    7fde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fe2:	781a      	ldrb	r2, [r3, #0]
    7fe4:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    7fe8:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    7fec:	fba3 1302 	umull	r1, r3, r3, r2
    7ff0:	0899      	lsrs	r1, r3, #2
    7ff2:	460b      	mov	r3, r1
    7ff4:	009b      	lsls	r3, r3, #2
    7ff6:	440b      	add	r3, r1
    7ff8:	1ad3      	subs	r3, r2, r3
    7ffa:	b2db      	uxtb	r3, r3
    7ffc:	2b00      	cmp	r3, #0
    7ffe:	f040 84c1 	bne.w	8984 <send_attitude+0x9e0>
       PERIODIC_SEND_ATTITUDE(); 
    8002:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8006:	f2c2 0300 	movt	r3, #8192	; 0x2000
    800a:	781a      	ldrb	r2, [r3, #0]
    800c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8010:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8014:	781b      	ldrb	r3, [r3, #0]
    8016:	b2db      	uxtb	r3, r3
    8018:	429a      	cmp	r2, r3
    801a:	d313      	bcc.n	8044 <send_attitude+0xa0>
    801c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8020:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8024:	781b      	ldrb	r3, [r3, #0]
    8026:	b2db      	uxtb	r3, r3
    8028:	461a      	mov	r2, r3
    802a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    802e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8032:	781b      	ldrb	r3, [r3, #0]
    8034:	1ad3      	subs	r3, r2, r3
    8036:	33ff      	adds	r3, #255	; 0xff
    8038:	2b10      	cmp	r3, #16
    803a:	bfd4      	ite	le
    803c:	2300      	movle	r3, #0
    803e:	2301      	movgt	r3, #1
    8040:	b2db      	uxtb	r3, r3
    8042:	e011      	b.n	8068 <send_attitude+0xc4>
    8044:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8048:	f2c2 0300 	movt	r3, #8192	; 0x2000
    804c:	781b      	ldrb	r3, [r3, #0]
    804e:	b2db      	uxtb	r3, r3
    8050:	461a      	mov	r2, r3
    8052:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8056:	f2c2 0300 	movt	r3, #8192	; 0x2000
    805a:	781b      	ldrb	r3, [r3, #0]
    805c:	1ad3      	subs	r3, r2, r3
    805e:	2b10      	cmp	r3, #16
    8060:	bfd4      	ite	le
    8062:	2300      	movle	r3, #0
    8064:	2301      	movgt	r3, #1
    8066:	b2db      	uxtb	r3, r3
    8068:	2b00      	cmp	r3, #0
    806a:	f000 847f 	beq.w	896c <send_attitude+0x9c8>
    806e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8072:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8076:	781b      	ldrb	r3, [r3, #0]
    8078:	461a      	mov	r2, r3
    807a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    807e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8082:	2105      	movs	r1, #5
    8084:	5499      	strb	r1, [r3, r2]
    8086:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    808a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    808e:	781b      	ldrb	r3, [r3, #0]
    8090:	3301      	adds	r3, #1
    8092:	b2da      	uxtb	r2, r3
    8094:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8098:	f2c2 0300 	movt	r3, #8192	; 0x2000
    809c:	701a      	strb	r2, [r3, #0]
    809e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    80a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80a6:	781b      	ldrb	r3, [r3, #0]
    80a8:	2bff      	cmp	r3, #255	; 0xff
    80aa:	d105      	bne.n	80b8 <send_attitude+0x114>
    80ac:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    80b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80b4:	2200      	movs	r2, #0
    80b6:	701a      	strb	r2, [r3, #0]
    80b8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    80bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80c0:	781b      	ldrb	r3, [r3, #0]
    80c2:	461a      	mov	r2, r3
    80c4:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    80c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80cc:	2106      	movs	r1, #6
    80ce:	5499      	strb	r1, [r3, r2]
    80d0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    80d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80d8:	781b      	ldrb	r3, [r3, #0]
    80da:	3301      	adds	r3, #1
    80dc:	b2da      	uxtb	r2, r3
    80de:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    80e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80e6:	701a      	strb	r2, [r3, #0]
    80e8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    80ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80f0:	781b      	ldrb	r3, [r3, #0]
    80f2:	2bff      	cmp	r3, #255	; 0xff
    80f4:	d105      	bne.n	8102 <send_attitude+0x15e>
    80f6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    80fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80fe:	2200      	movs	r2, #0
    8100:	701a      	strb	r2, [r3, #0]
    8102:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8106:	f2c2 0300 	movt	r3, #8192	; 0x2000
    810a:	2206      	movs	r2, #6
    810c:	701a      	strb	r2, [r3, #0]
    810e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8112:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8116:	2206      	movs	r2, #6
    8118:	701a      	strb	r2, [r3, #0]
    811a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    811e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8122:	781b      	ldrb	r3, [r3, #0]
    8124:	461a      	mov	r2, r3
    8126:	f24b 0370 	movw	r3, #45168	; 0xb070
    812a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    812e:	7819      	ldrb	r1, [r3, #0]
    8130:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8134:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8138:	5499      	strb	r1, [r3, r2]
    813a:	f24b 0370 	movw	r3, #45168	; 0xb070
    813e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8142:	781a      	ldrb	r2, [r3, #0]
    8144:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8148:	f2c2 0300 	movt	r3, #8192	; 0x2000
    814c:	781b      	ldrb	r3, [r3, #0]
    814e:	4413      	add	r3, r2
    8150:	b2da      	uxtb	r2, r3
    8152:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8156:	f2c2 0300 	movt	r3, #8192	; 0x2000
    815a:	701a      	strb	r2, [r3, #0]
    815c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8160:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8164:	781a      	ldrb	r2, [r3, #0]
    8166:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    816a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    816e:	781b      	ldrb	r3, [r3, #0]
    8170:	4413      	add	r3, r2
    8172:	b2da      	uxtb	r2, r3
    8174:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8178:	f2c2 0300 	movt	r3, #8192	; 0x2000
    817c:	701a      	strb	r2, [r3, #0]
    817e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8182:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8186:	781b      	ldrb	r3, [r3, #0]
    8188:	3301      	adds	r3, #1
    818a:	b2da      	uxtb	r2, r3
    818c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8190:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8194:	701a      	strb	r2, [r3, #0]
    8196:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    819a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    819e:	781b      	ldrb	r3, [r3, #0]
    81a0:	2bff      	cmp	r3, #255	; 0xff
    81a2:	d105      	bne.n	81b0 <send_attitude+0x20c>
    81a4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    81a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81ac:	2200      	movs	r2, #0
    81ae:	701a      	strb	r2, [r3, #0]
    81b0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    81b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81b8:	781b      	ldrb	r3, [r3, #0]
    81ba:	461a      	mov	r2, r3
    81bc:	f24b 0370 	movw	r3, #45168	; 0xb070
    81c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81c4:	7859      	ldrb	r1, [r3, #1]
    81c6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    81ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81ce:	5499      	strb	r1, [r3, r2]
    81d0:	4bd1      	ldr	r3, [pc, #836]	; (8518 <send_attitude+0x574>)
    81d2:	781a      	ldrb	r2, [r3, #0]
    81d4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    81d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81dc:	781b      	ldrb	r3, [r3, #0]
    81de:	4413      	add	r3, r2
    81e0:	b2da      	uxtb	r2, r3
    81e2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    81e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81ea:	701a      	strb	r2, [r3, #0]
    81ec:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    81f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81f4:	781a      	ldrb	r2, [r3, #0]
    81f6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    81fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81fe:	781b      	ldrb	r3, [r3, #0]
    8200:	4413      	add	r3, r2
    8202:	b2da      	uxtb	r2, r3
    8204:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8208:	f2c2 0300 	movt	r3, #8192	; 0x2000
    820c:	701a      	strb	r2, [r3, #0]
    820e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8212:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8216:	781b      	ldrb	r3, [r3, #0]
    8218:	3301      	adds	r3, #1
    821a:	b2da      	uxtb	r2, r3
    821c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8220:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8224:	701a      	strb	r2, [r3, #0]
    8226:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    822a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    822e:	781b      	ldrb	r3, [r3, #0]
    8230:	2bff      	cmp	r3, #255	; 0xff
    8232:	d105      	bne.n	8240 <send_attitude+0x29c>
    8234:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8238:	f2c2 0300 	movt	r3, #8192	; 0x2000
    823c:	2200      	movs	r2, #0
    823e:	701a      	strb	r2, [r3, #0]
    8240:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8244:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8248:	781b      	ldrb	r3, [r3, #0]
    824a:	461a      	mov	r2, r3
    824c:	f24b 0370 	movw	r3, #45168	; 0xb070
    8250:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8254:	7899      	ldrb	r1, [r3, #2]
    8256:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    825a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    825e:	5499      	strb	r1, [r3, r2]
    8260:	4bae      	ldr	r3, [pc, #696]	; (851c <send_attitude+0x578>)
    8262:	781a      	ldrb	r2, [r3, #0]
    8264:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8268:	f2c2 0300 	movt	r3, #8192	; 0x2000
    826c:	781b      	ldrb	r3, [r3, #0]
    826e:	4413      	add	r3, r2
    8270:	b2da      	uxtb	r2, r3
    8272:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8276:	f2c2 0300 	movt	r3, #8192	; 0x2000
    827a:	701a      	strb	r2, [r3, #0]
    827c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8280:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8284:	781a      	ldrb	r2, [r3, #0]
    8286:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    828a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    828e:	781b      	ldrb	r3, [r3, #0]
    8290:	4413      	add	r3, r2
    8292:	b2da      	uxtb	r2, r3
    8294:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8298:	f2c2 0300 	movt	r3, #8192	; 0x2000
    829c:	701a      	strb	r2, [r3, #0]
    829e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    82a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82a6:	781b      	ldrb	r3, [r3, #0]
    82a8:	3301      	adds	r3, #1
    82aa:	b2da      	uxtb	r2, r3
    82ac:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    82b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82b4:	701a      	strb	r2, [r3, #0]
    82b6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    82ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82be:	781b      	ldrb	r3, [r3, #0]
    82c0:	2bff      	cmp	r3, #255	; 0xff
    82c2:	d105      	bne.n	82d0 <send_attitude+0x32c>
    82c4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    82c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82cc:	2200      	movs	r2, #0
    82ce:	701a      	strb	r2, [r3, #0]
    82d0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    82d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82d8:	781b      	ldrb	r3, [r3, #0]
    82da:	461a      	mov	r2, r3
    82dc:	f24b 0370 	movw	r3, #45168	; 0xb070
    82e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82e4:	78d9      	ldrb	r1, [r3, #3]
    82e6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    82ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82ee:	5499      	strb	r1, [r3, r2]
    82f0:	4b8b      	ldr	r3, [pc, #556]	; (8520 <send_attitude+0x57c>)
    82f2:	781a      	ldrb	r2, [r3, #0]
    82f4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    82f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82fc:	781b      	ldrb	r3, [r3, #0]
    82fe:	4413      	add	r3, r2
    8300:	b2da      	uxtb	r2, r3
    8302:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8306:	f2c2 0300 	movt	r3, #8192	; 0x2000
    830a:	701a      	strb	r2, [r3, #0]
    830c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8310:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8314:	781a      	ldrb	r2, [r3, #0]
    8316:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    831a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    831e:	781b      	ldrb	r3, [r3, #0]
    8320:	4413      	add	r3, r2
    8322:	b2da      	uxtb	r2, r3
    8324:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8328:	f2c2 0300 	movt	r3, #8192	; 0x2000
    832c:	701a      	strb	r2, [r3, #0]
    832e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8332:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8336:	781b      	ldrb	r3, [r3, #0]
    8338:	3301      	adds	r3, #1
    833a:	b2da      	uxtb	r2, r3
    833c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8340:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8344:	701a      	strb	r2, [r3, #0]
    8346:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    834a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    834e:	781b      	ldrb	r3, [r3, #0]
    8350:	2bff      	cmp	r3, #255	; 0xff
    8352:	d105      	bne.n	8360 <send_attitude+0x3bc>
    8354:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8358:	f2c2 0300 	movt	r3, #8192	; 0x2000
    835c:	2200      	movs	r2, #0
    835e:	701a      	strb	r2, [r3, #0]
    8360:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8364:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8368:	781b      	ldrb	r3, [r3, #0]
    836a:	461a      	mov	r2, r3
    836c:	f24b 0374 	movw	r3, #45172	; 0xb074
    8370:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8374:	7819      	ldrb	r1, [r3, #0]
    8376:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    837a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    837e:	5499      	strb	r1, [r3, r2]
    8380:	f24b 0374 	movw	r3, #45172	; 0xb074
    8384:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8388:	781a      	ldrb	r2, [r3, #0]
    838a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    838e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8392:	781b      	ldrb	r3, [r3, #0]
    8394:	4413      	add	r3, r2
    8396:	b2da      	uxtb	r2, r3
    8398:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    839c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83a0:	701a      	strb	r2, [r3, #0]
    83a2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    83a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83aa:	781a      	ldrb	r2, [r3, #0]
    83ac:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    83b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83b4:	781b      	ldrb	r3, [r3, #0]
    83b6:	4413      	add	r3, r2
    83b8:	b2da      	uxtb	r2, r3
    83ba:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    83be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83c2:	701a      	strb	r2, [r3, #0]
    83c4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    83c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83cc:	781b      	ldrb	r3, [r3, #0]
    83ce:	3301      	adds	r3, #1
    83d0:	b2da      	uxtb	r2, r3
    83d2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    83d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83da:	701a      	strb	r2, [r3, #0]
    83dc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    83e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83e4:	781b      	ldrb	r3, [r3, #0]
    83e6:	2bff      	cmp	r3, #255	; 0xff
    83e8:	d105      	bne.n	83f6 <send_attitude+0x452>
    83ea:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    83ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83f2:	2200      	movs	r2, #0
    83f4:	701a      	strb	r2, [r3, #0]
    83f6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    83fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83fe:	781b      	ldrb	r3, [r3, #0]
    8400:	461a      	mov	r2, r3
    8402:	f24b 0374 	movw	r3, #45172	; 0xb074
    8406:	f2c2 0300 	movt	r3, #8192	; 0x2000
    840a:	7859      	ldrb	r1, [r3, #1]
    840c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8410:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8414:	5499      	strb	r1, [r3, r2]
    8416:	4b43      	ldr	r3, [pc, #268]	; (8524 <send_attitude+0x580>)
    8418:	781a      	ldrb	r2, [r3, #0]
    841a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    841e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8422:	781b      	ldrb	r3, [r3, #0]
    8424:	4413      	add	r3, r2
    8426:	b2da      	uxtb	r2, r3
    8428:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    842c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8430:	701a      	strb	r2, [r3, #0]
    8432:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8436:	f2c2 0300 	movt	r3, #8192	; 0x2000
    843a:	781a      	ldrb	r2, [r3, #0]
    843c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8440:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8444:	781b      	ldrb	r3, [r3, #0]
    8446:	4413      	add	r3, r2
    8448:	b2da      	uxtb	r2, r3
    844a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    844e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8452:	701a      	strb	r2, [r3, #0]
    8454:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8458:	f2c2 0300 	movt	r3, #8192	; 0x2000
    845c:	781b      	ldrb	r3, [r3, #0]
    845e:	3301      	adds	r3, #1
    8460:	b2da      	uxtb	r2, r3
    8462:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8466:	f2c2 0300 	movt	r3, #8192	; 0x2000
    846a:	701a      	strb	r2, [r3, #0]
    846c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8470:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8474:	781b      	ldrb	r3, [r3, #0]
    8476:	2bff      	cmp	r3, #255	; 0xff
    8478:	d105      	bne.n	8486 <send_attitude+0x4e2>
    847a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    847e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8482:	2200      	movs	r2, #0
    8484:	701a      	strb	r2, [r3, #0]
    8486:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    848a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    848e:	781b      	ldrb	r3, [r3, #0]
    8490:	461a      	mov	r2, r3
    8492:	f24b 0374 	movw	r3, #45172	; 0xb074
    8496:	f2c2 0300 	movt	r3, #8192	; 0x2000
    849a:	7899      	ldrb	r1, [r3, #2]
    849c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    84a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84a4:	5499      	strb	r1, [r3, r2]
    84a6:	4b20      	ldr	r3, [pc, #128]	; (8528 <send_attitude+0x584>)
    84a8:	781a      	ldrb	r2, [r3, #0]
    84aa:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    84ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84b2:	781b      	ldrb	r3, [r3, #0]
    84b4:	4413      	add	r3, r2
    84b6:	b2da      	uxtb	r2, r3
    84b8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    84bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84c0:	701a      	strb	r2, [r3, #0]
    84c2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    84c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84ca:	781a      	ldrb	r2, [r3, #0]
    84cc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    84d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84d4:	781b      	ldrb	r3, [r3, #0]
    84d6:	4413      	add	r3, r2
    84d8:	b2da      	uxtb	r2, r3
    84da:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    84de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84e2:	701a      	strb	r2, [r3, #0]
    84e4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    84e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84ec:	781b      	ldrb	r3, [r3, #0]
    84ee:	3301      	adds	r3, #1
    84f0:	b2da      	uxtb	r2, r3
    84f2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    84f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84fa:	701a      	strb	r2, [r3, #0]
    84fc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8500:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8504:	781b      	ldrb	r3, [r3, #0]
    8506:	2bff      	cmp	r3, #255	; 0xff
    8508:	d110      	bne.n	852c <send_attitude+0x588>
    850a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    850e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8512:	2200      	movs	r2, #0
    8514:	701a      	strb	r2, [r3, #0]
    8516:	e009      	b.n	852c <send_attitude+0x588>
    8518:	2000b071 	.word	0x2000b071
    851c:	2000b072 	.word	0x2000b072
    8520:	2000b073 	.word	0x2000b073
    8524:	2000b075 	.word	0x2000b075
    8528:	2000b076 	.word	0x2000b076
    852c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8530:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8534:	781b      	ldrb	r3, [r3, #0]
    8536:	461a      	mov	r2, r3
    8538:	f24b 0374 	movw	r3, #45172	; 0xb074
    853c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8540:	78d9      	ldrb	r1, [r3, #3]
    8542:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8546:	f2c2 0300 	movt	r3, #8192	; 0x2000
    854a:	5499      	strb	r1, [r3, r2]
    854c:	4bc2      	ldr	r3, [pc, #776]	; (8858 <send_attitude+0x8b4>)
    854e:	781a      	ldrb	r2, [r3, #0]
    8550:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8554:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8558:	781b      	ldrb	r3, [r3, #0]
    855a:	4413      	add	r3, r2
    855c:	b2da      	uxtb	r2, r3
    855e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8562:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8566:	701a      	strb	r2, [r3, #0]
    8568:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    856c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8570:	781a      	ldrb	r2, [r3, #0]
    8572:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8576:	f2c2 0300 	movt	r3, #8192	; 0x2000
    857a:	781b      	ldrb	r3, [r3, #0]
    857c:	4413      	add	r3, r2
    857e:	b2da      	uxtb	r2, r3
    8580:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8588:	701a      	strb	r2, [r3, #0]
    858a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    858e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8592:	781b      	ldrb	r3, [r3, #0]
    8594:	3301      	adds	r3, #1
    8596:	b2da      	uxtb	r2, r3
    8598:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    859c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85a0:	701a      	strb	r2, [r3, #0]
    85a2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    85a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85aa:	781b      	ldrb	r3, [r3, #0]
    85ac:	2bff      	cmp	r3, #255	; 0xff
    85ae:	d105      	bne.n	85bc <send_attitude+0x618>
    85b0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    85b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85b8:	2200      	movs	r2, #0
    85ba:	701a      	strb	r2, [r3, #0]
    85bc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    85c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85c4:	781b      	ldrb	r3, [r3, #0]
    85c6:	461a      	mov	r2, r3
    85c8:	f24b 0378 	movw	r3, #45176	; 0xb078
    85cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85d0:	7819      	ldrb	r1, [r3, #0]
    85d2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    85d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85da:	5499      	strb	r1, [r3, r2]
    85dc:	f24b 0378 	movw	r3, #45176	; 0xb078
    85e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85e4:	781a      	ldrb	r2, [r3, #0]
    85e6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    85ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85ee:	781b      	ldrb	r3, [r3, #0]
    85f0:	4413      	add	r3, r2
    85f2:	b2da      	uxtb	r2, r3
    85f4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    85f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85fc:	701a      	strb	r2, [r3, #0]
    85fe:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8602:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8606:	781a      	ldrb	r2, [r3, #0]
    8608:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    860c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8610:	781b      	ldrb	r3, [r3, #0]
    8612:	4413      	add	r3, r2
    8614:	b2da      	uxtb	r2, r3
    8616:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    861a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    861e:	701a      	strb	r2, [r3, #0]
    8620:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8624:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8628:	781b      	ldrb	r3, [r3, #0]
    862a:	3301      	adds	r3, #1
    862c:	b2da      	uxtb	r2, r3
    862e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8632:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8636:	701a      	strb	r2, [r3, #0]
    8638:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    863c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8640:	781b      	ldrb	r3, [r3, #0]
    8642:	2bff      	cmp	r3, #255	; 0xff
    8644:	d105      	bne.n	8652 <send_attitude+0x6ae>
    8646:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    864a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    864e:	2200      	movs	r2, #0
    8650:	701a      	strb	r2, [r3, #0]
    8652:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8656:	f2c2 0300 	movt	r3, #8192	; 0x2000
    865a:	781b      	ldrb	r3, [r3, #0]
    865c:	461a      	mov	r2, r3
    865e:	f24b 0378 	movw	r3, #45176	; 0xb078
    8662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8666:	7859      	ldrb	r1, [r3, #1]
    8668:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    866c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8670:	5499      	strb	r1, [r3, r2]
    8672:	4b7a      	ldr	r3, [pc, #488]	; (885c <send_attitude+0x8b8>)
    8674:	781a      	ldrb	r2, [r3, #0]
    8676:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    867a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    867e:	781b      	ldrb	r3, [r3, #0]
    8680:	4413      	add	r3, r2
    8682:	b2da      	uxtb	r2, r3
    8684:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8688:	f2c2 0300 	movt	r3, #8192	; 0x2000
    868c:	701a      	strb	r2, [r3, #0]
    868e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8696:	781a      	ldrb	r2, [r3, #0]
    8698:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    869c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86a0:	781b      	ldrb	r3, [r3, #0]
    86a2:	4413      	add	r3, r2
    86a4:	b2da      	uxtb	r2, r3
    86a6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    86aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86ae:	701a      	strb	r2, [r3, #0]
    86b0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    86b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86b8:	781b      	ldrb	r3, [r3, #0]
    86ba:	3301      	adds	r3, #1
    86bc:	b2da      	uxtb	r2, r3
    86be:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    86c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86c6:	701a      	strb	r2, [r3, #0]
    86c8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    86cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86d0:	781b      	ldrb	r3, [r3, #0]
    86d2:	2bff      	cmp	r3, #255	; 0xff
    86d4:	d105      	bne.n	86e2 <send_attitude+0x73e>
    86d6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    86da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86de:	2200      	movs	r2, #0
    86e0:	701a      	strb	r2, [r3, #0]
    86e2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    86e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86ea:	781b      	ldrb	r3, [r3, #0]
    86ec:	461a      	mov	r2, r3
    86ee:	f24b 0378 	movw	r3, #45176	; 0xb078
    86f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86f6:	7899      	ldrb	r1, [r3, #2]
    86f8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    86fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8700:	5499      	strb	r1, [r3, r2]
    8702:	4b57      	ldr	r3, [pc, #348]	; (8860 <send_attitude+0x8bc>)
    8704:	781a      	ldrb	r2, [r3, #0]
    8706:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    870a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    870e:	781b      	ldrb	r3, [r3, #0]
    8710:	4413      	add	r3, r2
    8712:	b2da      	uxtb	r2, r3
    8714:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8718:	f2c2 0300 	movt	r3, #8192	; 0x2000
    871c:	701a      	strb	r2, [r3, #0]
    871e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8722:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8726:	781a      	ldrb	r2, [r3, #0]
    8728:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    872c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8730:	781b      	ldrb	r3, [r3, #0]
    8732:	4413      	add	r3, r2
    8734:	b2da      	uxtb	r2, r3
    8736:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    873a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    873e:	701a      	strb	r2, [r3, #0]
    8740:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8748:	781b      	ldrb	r3, [r3, #0]
    874a:	3301      	adds	r3, #1
    874c:	b2da      	uxtb	r2, r3
    874e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8752:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8756:	701a      	strb	r2, [r3, #0]
    8758:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    875c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8760:	781b      	ldrb	r3, [r3, #0]
    8762:	2bff      	cmp	r3, #255	; 0xff
    8764:	d105      	bne.n	8772 <send_attitude+0x7ce>
    8766:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    876a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    876e:	2200      	movs	r2, #0
    8770:	701a      	strb	r2, [r3, #0]
    8772:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8776:	f2c2 0300 	movt	r3, #8192	; 0x2000
    877a:	781b      	ldrb	r3, [r3, #0]
    877c:	461a      	mov	r2, r3
    877e:	f24b 0378 	movw	r3, #45176	; 0xb078
    8782:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8786:	78d9      	ldrb	r1, [r3, #3]
    8788:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    878c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8790:	5499      	strb	r1, [r3, r2]
    8792:	4b34      	ldr	r3, [pc, #208]	; (8864 <send_attitude+0x8c0>)
    8794:	781a      	ldrb	r2, [r3, #0]
    8796:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    879a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    879e:	781b      	ldrb	r3, [r3, #0]
    87a0:	4413      	add	r3, r2
    87a2:	b2da      	uxtb	r2, r3
    87a4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    87a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87ac:	701a      	strb	r2, [r3, #0]
    87ae:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    87b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87b6:	781a      	ldrb	r2, [r3, #0]
    87b8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    87bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87c0:	781b      	ldrb	r3, [r3, #0]
    87c2:	4413      	add	r3, r2
    87c4:	b2da      	uxtb	r2, r3
    87c6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    87ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87ce:	701a      	strb	r2, [r3, #0]
    87d0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    87d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87d8:	781b      	ldrb	r3, [r3, #0]
    87da:	3301      	adds	r3, #1
    87dc:	b2da      	uxtb	r2, r3
    87de:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    87e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87e6:	701a      	strb	r2, [r3, #0]
    87e8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    87ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87f0:	781b      	ldrb	r3, [r3, #0]
    87f2:	2bff      	cmp	r3, #255	; 0xff
    87f4:	d105      	bne.n	8802 <send_attitude+0x85e>
    87f6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    87fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87fe:	2200      	movs	r2, #0
    8800:	701a      	strb	r2, [r3, #0]
    8802:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    880a:	781b      	ldrb	r3, [r3, #0]
    880c:	461a      	mov	r2, r3
    880e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8816:	7819      	ldrb	r1, [r3, #0]
    8818:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    881c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8820:	5499      	strb	r1, [r3, r2]
    8822:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8826:	f2c2 0300 	movt	r3, #8192	; 0x2000
    882a:	781b      	ldrb	r3, [r3, #0]
    882c:	3301      	adds	r3, #1
    882e:	b2da      	uxtb	r2, r3
    8830:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8834:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8838:	701a      	strb	r2, [r3, #0]
    883a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    883e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8842:	781b      	ldrb	r3, [r3, #0]
    8844:	2bff      	cmp	r3, #255	; 0xff
    8846:	d10f      	bne.n	8868 <send_attitude+0x8c4>
    8848:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    884c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8850:	2200      	movs	r2, #0
    8852:	701a      	strb	r2, [r3, #0]
    8854:	e008      	b.n	8868 <send_attitude+0x8c4>
    8856:	bf00      	nop
    8858:	2000b077 	.word	0x2000b077
    885c:	2000b079 	.word	0x2000b079
    8860:	2000b07a 	.word	0x2000b07a
    8864:	2000b07b 	.word	0x2000b07b
    8868:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    886c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8870:	781b      	ldrb	r3, [r3, #0]
    8872:	461a      	mov	r2, r3
    8874:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8878:	f2c2 0300 	movt	r3, #8192	; 0x2000
    887c:	7819      	ldrb	r1, [r3, #0]
    887e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8882:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8886:	5499      	strb	r1, [r3, r2]
    8888:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    888c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8890:	781b      	ldrb	r3, [r3, #0]
    8892:	3301      	adds	r3, #1
    8894:	b2da      	uxtb	r2, r3
    8896:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    889a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    889e:	701a      	strb	r2, [r3, #0]
    88a0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    88a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88a8:	781b      	ldrb	r3, [r3, #0]
    88aa:	2bff      	cmp	r3, #255	; 0xff
    88ac:	d105      	bne.n	88ba <send_attitude+0x916>
    88ae:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    88b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88b6:	2200      	movs	r2, #0
    88b8:	701a      	strb	r2, [r3, #0]
    88ba:	f242 0339 	movw	r3, #8249	; 0x2039
    88be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88c2:	781b      	ldrb	r3, [r3, #0]
    88c4:	b2db      	uxtb	r3, r3
    88c6:	f003 0310 	and.w	r3, r3, #16
    88ca:	2b00      	cmp	r3, #0
    88cc:	d15a      	bne.n	8984 <send_attitude+0x9e0>
    88ce:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    88d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88d6:	781b      	ldrb	r3, [r3, #0]
    88d8:	b2db      	uxtb	r3, r3
    88da:	461a      	mov	r2, r3
    88dc:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    88e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88e4:	5c9a      	ldrb	r2, [r3, r2]
    88e6:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    88ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88ee:	701a      	strb	r2, [r3, #0]
    88f0:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    88f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88f8:	2200      	movs	r2, #0
    88fa:	701a      	strb	r2, [r3, #0]
    88fc:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8900:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8904:	781b      	ldrb	r3, [r3, #0]
    8906:	b2db      	uxtb	r3, r3
    8908:	3301      	adds	r3, #1
    890a:	b2da      	uxtb	r2, r3
    890c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8910:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8914:	701a      	strb	r2, [r3, #0]
    8916:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    891a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    891e:	781b      	ldrb	r3, [r3, #0]
    8920:	b2db      	uxtb	r3, r3
    8922:	2bff      	cmp	r3, #255	; 0xff
    8924:	d105      	bne.n	8932 <send_attitude+0x98e>
    8926:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    892a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    892e:	2200      	movs	r2, #0
    8930:	701a      	strb	r2, [r3, #0]
    8932:	f242 0338 	movw	r3, #8248	; 0x2038
    8936:	f2c2 0300 	movt	r3, #8192	; 0x2000
    893a:	f242 0238 	movw	r2, #8248	; 0x2038
    893e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8942:	7812      	ldrb	r2, [r2, #0]
    8944:	b2d2      	uxtb	r2, r2
    8946:	f042 0201 	orr.w	r2, r2, #1
    894a:	b2d2      	uxtb	r2, r2
    894c:	701a      	strb	r2, [r3, #0]
    894e:	f242 0339 	movw	r3, #8249	; 0x2039
    8952:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8956:	f242 0239 	movw	r2, #8249	; 0x2039
    895a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    895e:	7812      	ldrb	r2, [r2, #0]
    8960:	b2d2      	uxtb	r2, r2
    8962:	f042 0210 	orr.w	r2, r2, #16
    8966:	b2d2      	uxtb	r2, r2
    8968:	701a      	strb	r2, [r3, #0]
    896a:	e00b      	b.n	8984 <send_attitude+0x9e0>
    896c:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    8970:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8974:	781b      	ldrb	r3, [r3, #0]
    8976:	3301      	adds	r3, #1
    8978:	b2da      	uxtb	r2, r3
    897a:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    897e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8982:	701a      	strb	r2, [r3, #0]
  }
}
    8984:	46bd      	mov	sp, r7
    8986:	f85d 7b04 	ldr.w	r7, [sp], #4
    898a:	4770      	bx	lr

0000898c <send_adc>:
  
void send_adc(void){  //500ms
    898c:	b480      	push	{r7}
    898e:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 5 == 1) PERIODIC_SEND_ADC();}
    8990:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    8994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8998:	781a      	ldrb	r2, [r3, #0]
    899a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    899e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    89a2:	fba3 1302 	umull	r1, r3, r3, r2
    89a6:	0899      	lsrs	r1, r3, #2
    89a8:	460b      	mov	r3, r1
    89aa:	009b      	lsls	r3, r3, #2
    89ac:	440b      	add	r3, r1
    89ae:	1ad3      	subs	r3, r2, r3
    89b0:	b2db      	uxtb	r3, r3
    89b2:	2b01      	cmp	r3, #1
    89b4:	f040 8269 	bne.w	8e8a <send_adc+0x4fe>
    89b8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    89bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89c0:	781a      	ldrb	r2, [r3, #0]
    89c2:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    89c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89ca:	781b      	ldrb	r3, [r3, #0]
    89cc:	b2db      	uxtb	r3, r3
    89ce:	429a      	cmp	r2, r3
    89d0:	d313      	bcc.n	89fa <send_adc+0x6e>
    89d2:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    89d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89da:	781b      	ldrb	r3, [r3, #0]
    89dc:	b2db      	uxtb	r3, r3
    89de:	461a      	mov	r2, r3
    89e0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    89e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89e8:	781b      	ldrb	r3, [r3, #0]
    89ea:	1ad3      	subs	r3, r2, r3
    89ec:	33ff      	adds	r3, #255	; 0xff
    89ee:	2b08      	cmp	r3, #8
    89f0:	bfd4      	ite	le
    89f2:	2300      	movle	r3, #0
    89f4:	2301      	movgt	r3, #1
    89f6:	b2db      	uxtb	r3, r3
    89f8:	e011      	b.n	8a1e <send_adc+0x92>
    89fa:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    89fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a02:	781b      	ldrb	r3, [r3, #0]
    8a04:	b2db      	uxtb	r3, r3
    8a06:	461a      	mov	r2, r3
    8a08:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a10:	781b      	ldrb	r3, [r3, #0]
    8a12:	1ad3      	subs	r3, r2, r3
    8a14:	2b08      	cmp	r3, #8
    8a16:	bfd4      	ite	le
    8a18:	2300      	movle	r3, #0
    8a1a:	2301      	movgt	r3, #1
    8a1c:	b2db      	uxtb	r3, r3
    8a1e:	2b00      	cmp	r3, #0
    8a20:	f000 8227 	beq.w	8e72 <send_adc+0x4e6>
    8a24:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a2c:	781b      	ldrb	r3, [r3, #0]
    8a2e:	461a      	mov	r2, r3
    8a30:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8a34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a38:	2105      	movs	r1, #5
    8a3a:	5499      	strb	r1, [r3, r2]
    8a3c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8a40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a44:	781b      	ldrb	r3, [r3, #0]
    8a46:	3301      	adds	r3, #1
    8a48:	b2da      	uxtb	r2, r3
    8a4a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8a4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a52:	701a      	strb	r2, [r3, #0]
    8a54:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8a58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a5c:	781b      	ldrb	r3, [r3, #0]
    8a5e:	2bff      	cmp	r3, #255	; 0xff
    8a60:	d105      	bne.n	8a6e <send_adc+0xe2>
    8a62:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8a66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a6a:	2200      	movs	r2, #0
    8a6c:	701a      	strb	r2, [r3, #0]
    8a6e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8a72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a76:	781b      	ldrb	r3, [r3, #0]
    8a78:	461a      	mov	r2, r3
    8a7a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8a7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a82:	2107      	movs	r1, #7
    8a84:	5499      	strb	r1, [r3, r2]
    8a86:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8a8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a8e:	781b      	ldrb	r3, [r3, #0]
    8a90:	3301      	adds	r3, #1
    8a92:	b2da      	uxtb	r2, r3
    8a94:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8a98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a9c:	701a      	strb	r2, [r3, #0]
    8a9e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8aa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8aa6:	781b      	ldrb	r3, [r3, #0]
    8aa8:	2bff      	cmp	r3, #255	; 0xff
    8aaa:	d105      	bne.n	8ab8 <send_adc+0x12c>
    8aac:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ab4:	2200      	movs	r2, #0
    8ab6:	701a      	strb	r2, [r3, #0]
    8ab8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8abc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ac0:	2207      	movs	r2, #7
    8ac2:	701a      	strb	r2, [r3, #0]
    8ac4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8acc:	2207      	movs	r2, #7
    8ace:	701a      	strb	r2, [r3, #0]
    8ad0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8ad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ad8:	781b      	ldrb	r3, [r3, #0]
    8ada:	461a      	mov	r2, r3
    8adc:	f64a 5350 	movw	r3, #44368	; 0xad50
    8ae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ae4:	7819      	ldrb	r1, [r3, #0]
    8ae6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8aea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8aee:	5499      	strb	r1, [r3, r2]
    8af0:	f64a 5350 	movw	r3, #44368	; 0xad50
    8af4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8af8:	781a      	ldrb	r2, [r3, #0]
    8afa:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8afe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b02:	781b      	ldrb	r3, [r3, #0]
    8b04:	4413      	add	r3, r2
    8b06:	b2da      	uxtb	r2, r3
    8b08:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8b0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b10:	701a      	strb	r2, [r3, #0]
    8b12:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8b16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b1a:	781a      	ldrb	r2, [r3, #0]
    8b1c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8b20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b24:	781b      	ldrb	r3, [r3, #0]
    8b26:	4413      	add	r3, r2
    8b28:	b2da      	uxtb	r2, r3
    8b2a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8b2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b32:	701a      	strb	r2, [r3, #0]
    8b34:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8b38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b3c:	781b      	ldrb	r3, [r3, #0]
    8b3e:	3301      	adds	r3, #1
    8b40:	b2da      	uxtb	r2, r3
    8b42:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8b46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b4a:	701a      	strb	r2, [r3, #0]
    8b4c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8b50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b54:	781b      	ldrb	r3, [r3, #0]
    8b56:	2bff      	cmp	r3, #255	; 0xff
    8b58:	d105      	bne.n	8b66 <send_adc+0x1da>
    8b5a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8b5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b62:	2200      	movs	r2, #0
    8b64:	701a      	strb	r2, [r3, #0]
    8b66:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8b6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b6e:	781b      	ldrb	r3, [r3, #0]
    8b70:	461a      	mov	r2, r3
    8b72:	f64a 5350 	movw	r3, #44368	; 0xad50
    8b76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b7a:	7859      	ldrb	r1, [r3, #1]
    8b7c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8b80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b84:	5499      	strb	r1, [r3, r2]
    8b86:	4bc3      	ldr	r3, [pc, #780]	; (8e94 <send_adc+0x508>)
    8b88:	781a      	ldrb	r2, [r3, #0]
    8b8a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b92:	781b      	ldrb	r3, [r3, #0]
    8b94:	4413      	add	r3, r2
    8b96:	b2da      	uxtb	r2, r3
    8b98:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8b9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ba0:	701a      	strb	r2, [r3, #0]
    8ba2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8baa:	781a      	ldrb	r2, [r3, #0]
    8bac:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8bb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bb4:	781b      	ldrb	r3, [r3, #0]
    8bb6:	4413      	add	r3, r2
    8bb8:	b2da      	uxtb	r2, r3
    8bba:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bc2:	701a      	strb	r2, [r3, #0]
    8bc4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8bc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bcc:	781b      	ldrb	r3, [r3, #0]
    8bce:	3301      	adds	r3, #1
    8bd0:	b2da      	uxtb	r2, r3
    8bd2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8bd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bda:	701a      	strb	r2, [r3, #0]
    8bdc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8be4:	781b      	ldrb	r3, [r3, #0]
    8be6:	2bff      	cmp	r3, #255	; 0xff
    8be8:	d105      	bne.n	8bf6 <send_adc+0x26a>
    8bea:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8bee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bf2:	2200      	movs	r2, #0
    8bf4:	701a      	strb	r2, [r3, #0]
    8bf6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8bfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bfe:	781b      	ldrb	r3, [r3, #0]
    8c00:	461a      	mov	r2, r3
    8c02:	f64a 5352 	movw	r3, #44370	; 0xad52
    8c06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c0a:	7819      	ldrb	r1, [r3, #0]
    8c0c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8c10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c14:	5499      	strb	r1, [r3, r2]
    8c16:	f64a 5352 	movw	r3, #44370	; 0xad52
    8c1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c1e:	781a      	ldrb	r2, [r3, #0]
    8c20:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8c24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c28:	781b      	ldrb	r3, [r3, #0]
    8c2a:	4413      	add	r3, r2
    8c2c:	b2da      	uxtb	r2, r3
    8c2e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8c32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c36:	701a      	strb	r2, [r3, #0]
    8c38:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c40:	781a      	ldrb	r2, [r3, #0]
    8c42:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8c46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c4a:	781b      	ldrb	r3, [r3, #0]
    8c4c:	4413      	add	r3, r2
    8c4e:	b2da      	uxtb	r2, r3
    8c50:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8c54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c58:	701a      	strb	r2, [r3, #0]
    8c5a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8c5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c62:	781b      	ldrb	r3, [r3, #0]
    8c64:	3301      	adds	r3, #1
    8c66:	b2da      	uxtb	r2, r3
    8c68:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c70:	701a      	strb	r2, [r3, #0]
    8c72:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8c76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c7a:	781b      	ldrb	r3, [r3, #0]
    8c7c:	2bff      	cmp	r3, #255	; 0xff
    8c7e:	d105      	bne.n	8c8c <send_adc+0x300>
    8c80:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c88:	2200      	movs	r2, #0
    8c8a:	701a      	strb	r2, [r3, #0]
    8c8c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c94:	781b      	ldrb	r3, [r3, #0]
    8c96:	461a      	mov	r2, r3
    8c98:	f64a 5352 	movw	r3, #44370	; 0xad52
    8c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ca0:	7859      	ldrb	r1, [r3, #1]
    8ca2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8ca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8caa:	5499      	strb	r1, [r3, r2]
    8cac:	4b7a      	ldr	r3, [pc, #488]	; (8e98 <send_adc+0x50c>)
    8cae:	781a      	ldrb	r2, [r3, #0]
    8cb0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8cb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cb8:	781b      	ldrb	r3, [r3, #0]
    8cba:	4413      	add	r3, r2
    8cbc:	b2da      	uxtb	r2, r3
    8cbe:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8cc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cc6:	701a      	strb	r2, [r3, #0]
    8cc8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8ccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cd0:	781a      	ldrb	r2, [r3, #0]
    8cd2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8cd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cda:	781b      	ldrb	r3, [r3, #0]
    8cdc:	4413      	add	r3, r2
    8cde:	b2da      	uxtb	r2, r3
    8ce0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ce8:	701a      	strb	r2, [r3, #0]
    8cea:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8cee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cf2:	781b      	ldrb	r3, [r3, #0]
    8cf4:	3301      	adds	r3, #1
    8cf6:	b2da      	uxtb	r2, r3
    8cf8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d00:	701a      	strb	r2, [r3, #0]
    8d02:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8d06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d0a:	781b      	ldrb	r3, [r3, #0]
    8d0c:	2bff      	cmp	r3, #255	; 0xff
    8d0e:	d105      	bne.n	8d1c <send_adc+0x390>
    8d10:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d18:	2200      	movs	r2, #0
    8d1a:	701a      	strb	r2, [r3, #0]
    8d1c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8d20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d24:	781b      	ldrb	r3, [r3, #0]
    8d26:	461a      	mov	r2, r3
    8d28:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8d2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d30:	7819      	ldrb	r1, [r3, #0]
    8d32:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d3a:	5499      	strb	r1, [r3, r2]
    8d3c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8d40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d44:	781b      	ldrb	r3, [r3, #0]
    8d46:	3301      	adds	r3, #1
    8d48:	b2da      	uxtb	r2, r3
    8d4a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8d4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d52:	701a      	strb	r2, [r3, #0]
    8d54:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8d58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d5c:	781b      	ldrb	r3, [r3, #0]
    8d5e:	2bff      	cmp	r3, #255	; 0xff
    8d60:	d105      	bne.n	8d6e <send_adc+0x3e2>
    8d62:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8d66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d6a:	2200      	movs	r2, #0
    8d6c:	701a      	strb	r2, [r3, #0]
    8d6e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8d72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d76:	781b      	ldrb	r3, [r3, #0]
    8d78:	461a      	mov	r2, r3
    8d7a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8d7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d82:	7819      	ldrb	r1, [r3, #0]
    8d84:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8d88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d8c:	5499      	strb	r1, [r3, r2]
    8d8e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d96:	781b      	ldrb	r3, [r3, #0]
    8d98:	3301      	adds	r3, #1
    8d9a:	b2da      	uxtb	r2, r3
    8d9c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8da0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8da4:	701a      	strb	r2, [r3, #0]
    8da6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dae:	781b      	ldrb	r3, [r3, #0]
    8db0:	2bff      	cmp	r3, #255	; 0xff
    8db2:	d105      	bne.n	8dc0 <send_adc+0x434>
    8db4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8db8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dbc:	2200      	movs	r2, #0
    8dbe:	701a      	strb	r2, [r3, #0]
    8dc0:	f242 0339 	movw	r3, #8249	; 0x2039
    8dc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dc8:	781b      	ldrb	r3, [r3, #0]
    8dca:	b2db      	uxtb	r3, r3
    8dcc:	f003 0310 	and.w	r3, r3, #16
    8dd0:	2b00      	cmp	r3, #0
    8dd2:	d15a      	bne.n	8e8a <send_adc+0x4fe>
    8dd4:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8dd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ddc:	781b      	ldrb	r3, [r3, #0]
    8dde:	b2db      	uxtb	r3, r3
    8de0:	461a      	mov	r2, r3
    8de2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8de6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dea:	5c9a      	ldrb	r2, [r3, r2]
    8dec:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    8df0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8df4:	701a      	strb	r2, [r3, #0]
    8df6:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    8dfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dfe:	2200      	movs	r2, #0
    8e00:	701a      	strb	r2, [r3, #0]
    8e02:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8e06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e0a:	781b      	ldrb	r3, [r3, #0]
    8e0c:	b2db      	uxtb	r3, r3
    8e0e:	3301      	adds	r3, #1
    8e10:	b2da      	uxtb	r2, r3
    8e12:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8e16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e1a:	701a      	strb	r2, [r3, #0]
    8e1c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8e20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e24:	781b      	ldrb	r3, [r3, #0]
    8e26:	b2db      	uxtb	r3, r3
    8e28:	2bff      	cmp	r3, #255	; 0xff
    8e2a:	d105      	bne.n	8e38 <send_adc+0x4ac>
    8e2c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8e30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e34:	2200      	movs	r2, #0
    8e36:	701a      	strb	r2, [r3, #0]
    8e38:	f242 0338 	movw	r3, #8248	; 0x2038
    8e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e40:	f242 0238 	movw	r2, #8248	; 0x2038
    8e44:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8e48:	7812      	ldrb	r2, [r2, #0]
    8e4a:	b2d2      	uxtb	r2, r2
    8e4c:	f042 0201 	orr.w	r2, r2, #1
    8e50:	b2d2      	uxtb	r2, r2
    8e52:	701a      	strb	r2, [r3, #0]
    8e54:	f242 0339 	movw	r3, #8249	; 0x2039
    8e58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e5c:	f242 0239 	movw	r2, #8249	; 0x2039
    8e60:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8e64:	7812      	ldrb	r2, [r2, #0]
    8e66:	b2d2      	uxtb	r2, r2
    8e68:	f042 0210 	orr.w	r2, r2, #16
    8e6c:	b2d2      	uxtb	r2, r2
    8e6e:	701a      	strb	r2, [r3, #0]
    8e70:	e00b      	b.n	8e8a <send_adc+0x4fe>
    8e72:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    8e76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e7a:	781b      	ldrb	r3, [r3, #0]
    8e7c:	3301      	adds	r3, #1
    8e7e:	b2da      	uxtb	r2, r3
    8e80:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    8e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e88:	701a      	strb	r2, [r3, #0]
}
    8e8a:	46bd      	mov	sp, r7
    8e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e90:	4770      	bx	lr
    8e92:	bf00      	nop
    8e94:	2000ad51 	.word	0x2000ad51
    8e98:	2000ad53 	.word	0x2000ad53

00008e9c <send_settings>:
void send_settings(void){ //500ms
    8e9c:	b480      	push	{r7}
    8e9e:	af00      	add	r7, sp, #0
  //if(!boot)
  {if (count % 5 == 2) PERIODIC_SEND_SETTINGS();}
    8ea0:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    8ea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ea8:	781a      	ldrb	r2, [r3, #0]
    8eaa:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8eae:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8eb2:	fba3 1302 	umull	r1, r3, r3, r2
    8eb6:	0899      	lsrs	r1, r3, #2
    8eb8:	460b      	mov	r3, r1
    8eba:	009b      	lsls	r3, r3, #2
    8ebc:	440b      	add	r3, r1
    8ebe:	1ad3      	subs	r3, r2, r3
    8ec0:	b2db      	uxtb	r3, r3
    8ec2:	2b02      	cmp	r3, #2
    8ec4:	f040 83e7 	bne.w	9696 <send_settings+0x7fa>
    8ec8:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
    8ecc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ed0:	781b      	ldrb	r3, [r3, #0]
    8ed2:	2b00      	cmp	r3, #0
    8ed4:	f000 83df 	beq.w	9696 <send_settings+0x7fa>
    8ed8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8edc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ee0:	781a      	ldrb	r2, [r3, #0]
    8ee2:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8ee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8eea:	781b      	ldrb	r3, [r3, #0]
    8eec:	b2db      	uxtb	r3, r3
    8eee:	429a      	cmp	r2, r3
    8ef0:	d313      	bcc.n	8f1a <send_settings+0x7e>
    8ef2:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8ef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8efa:	781b      	ldrb	r3, [r3, #0]
    8efc:	b2db      	uxtb	r3, r3
    8efe:	461a      	mov	r2, r3
    8f00:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f08:	781b      	ldrb	r3, [r3, #0]
    8f0a:	1ad3      	subs	r3, r2, r3
    8f0c:	33ff      	adds	r3, #255	; 0xff
    8f0e:	2b0d      	cmp	r3, #13
    8f10:	bfd4      	ite	le
    8f12:	2300      	movle	r3, #0
    8f14:	2301      	movgt	r3, #1
    8f16:	b2db      	uxtb	r3, r3
    8f18:	e011      	b.n	8f3e <send_settings+0xa2>
    8f1a:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8f1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f22:	781b      	ldrb	r3, [r3, #0]
    8f24:	b2db      	uxtb	r3, r3
    8f26:	461a      	mov	r2, r3
    8f28:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8f2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f30:	781b      	ldrb	r3, [r3, #0]
    8f32:	1ad3      	subs	r3, r2, r3
    8f34:	2b0d      	cmp	r3, #13
    8f36:	bfd4      	ite	le
    8f38:	2300      	movle	r3, #0
    8f3a:	2301      	movgt	r3, #1
    8f3c:	b2db      	uxtb	r3, r3
    8f3e:	2b00      	cmp	r3, #0
    8f40:	f000 839d 	beq.w	967e <send_settings+0x7e2>
    8f44:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8f48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f4c:	781b      	ldrb	r3, [r3, #0]
    8f4e:	461a      	mov	r2, r3
    8f50:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8f54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f58:	2105      	movs	r1, #5
    8f5a:	5499      	strb	r1, [r3, r2]
    8f5c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8f60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f64:	781b      	ldrb	r3, [r3, #0]
    8f66:	3301      	adds	r3, #1
    8f68:	b2da      	uxtb	r2, r3
    8f6a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8f6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f72:	701a      	strb	r2, [r3, #0]
    8f74:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f7c:	781b      	ldrb	r3, [r3, #0]
    8f7e:	2bff      	cmp	r3, #255	; 0xff
    8f80:	d105      	bne.n	8f8e <send_settings+0xf2>
    8f82:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8f86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f8a:	2200      	movs	r2, #0
    8f8c:	701a      	strb	r2, [r3, #0]
    8f8e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f96:	781b      	ldrb	r3, [r3, #0]
    8f98:	461a      	mov	r2, r3
    8f9a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8f9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fa2:	2111      	movs	r1, #17
    8fa4:	5499      	strb	r1, [r3, r2]
    8fa6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fae:	781b      	ldrb	r3, [r3, #0]
    8fb0:	3301      	adds	r3, #1
    8fb2:	b2da      	uxtb	r2, r3
    8fb4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8fb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fbc:	701a      	strb	r2, [r3, #0]
    8fbe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8fc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fc6:	781b      	ldrb	r3, [r3, #0]
    8fc8:	2bff      	cmp	r3, #255	; 0xff
    8fca:	d105      	bne.n	8fd8 <send_settings+0x13c>
    8fcc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8fd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fd4:	2200      	movs	r2, #0
    8fd6:	701a      	strb	r2, [r3, #0]
    8fd8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8fdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fe0:	2211      	movs	r2, #17
    8fe2:	701a      	strb	r2, [r3, #0]
    8fe4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8fe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fec:	2211      	movs	r2, #17
    8fee:	701a      	strb	r2, [r3, #0]
    8ff0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8ff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ff8:	781b      	ldrb	r3, [r3, #0]
    8ffa:	461a      	mov	r2, r3
    8ffc:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
    9000:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9004:	7819      	ldrb	r1, [r3, #0]
    9006:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    900a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    900e:	5499      	strb	r1, [r3, r2]
    9010:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9014:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9018:	781a      	ldrb	r2, [r3, #0]
    901a:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
    901e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9022:	781b      	ldrb	r3, [r3, #0]
    9024:	4413      	add	r3, r2
    9026:	b2da      	uxtb	r2, r3
    9028:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    902c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9030:	701a      	strb	r2, [r3, #0]
    9032:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9036:	f2c2 0300 	movt	r3, #8192	; 0x2000
    903a:	781a      	ldrb	r2, [r3, #0]
    903c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9040:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9044:	781b      	ldrb	r3, [r3, #0]
    9046:	4413      	add	r3, r2
    9048:	b2da      	uxtb	r2, r3
    904a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    904e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9052:	701a      	strb	r2, [r3, #0]
    9054:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9058:	f2c2 0300 	movt	r3, #8192	; 0x2000
    905c:	781b      	ldrb	r3, [r3, #0]
    905e:	3301      	adds	r3, #1
    9060:	b2da      	uxtb	r2, r3
    9062:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9066:	f2c2 0300 	movt	r3, #8192	; 0x2000
    906a:	701a      	strb	r2, [r3, #0]
    906c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9070:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9074:	781b      	ldrb	r3, [r3, #0]
    9076:	2bff      	cmp	r3, #255	; 0xff
    9078:	d105      	bne.n	9086 <send_settings+0x1ea>
    907a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    907e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9082:	2200      	movs	r2, #0
    9084:	701a      	strb	r2, [r3, #0]
    9086:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    908a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    908e:	781b      	ldrb	r3, [r3, #0]
    9090:	461a      	mov	r2, r3
    9092:	f64a 23a0 	movw	r3, #43680	; 0xaaa0
    9096:	f2c2 0300 	movt	r3, #8192	; 0x2000
    909a:	7819      	ldrb	r1, [r3, #0]
    909c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    90a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90a4:	5499      	strb	r1, [r3, r2]
    90a6:	f64a 23a0 	movw	r3, #43680	; 0xaaa0
    90aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90ae:	781a      	ldrb	r2, [r3, #0]
    90b0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    90b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90b8:	781b      	ldrb	r3, [r3, #0]
    90ba:	4413      	add	r3, r2
    90bc:	b2da      	uxtb	r2, r3
    90be:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    90c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90c6:	701a      	strb	r2, [r3, #0]
    90c8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    90cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90d0:	781a      	ldrb	r2, [r3, #0]
    90d2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    90d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90da:	781b      	ldrb	r3, [r3, #0]
    90dc:	4413      	add	r3, r2
    90de:	b2da      	uxtb	r2, r3
    90e0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    90e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90e8:	701a      	strb	r2, [r3, #0]
    90ea:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    90ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90f2:	781b      	ldrb	r3, [r3, #0]
    90f4:	3301      	adds	r3, #1
    90f6:	b2da      	uxtb	r2, r3
    90f8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    90fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9100:	701a      	strb	r2, [r3, #0]
    9102:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9106:	f2c2 0300 	movt	r3, #8192	; 0x2000
    910a:	781b      	ldrb	r3, [r3, #0]
    910c:	2bff      	cmp	r3, #255	; 0xff
    910e:	d105      	bne.n	911c <send_settings+0x280>
    9110:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9114:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9118:	2200      	movs	r2, #0
    911a:	701a      	strb	r2, [r3, #0]
    911c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9120:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9124:	781b      	ldrb	r3, [r3, #0]
    9126:	461a      	mov	r2, r3
    9128:	f64a 23a0 	movw	r3, #43680	; 0xaaa0
    912c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9130:	7859      	ldrb	r1, [r3, #1]
    9132:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9136:	f2c2 0300 	movt	r3, #8192	; 0x2000
    913a:	5499      	strb	r1, [r3, r2]
    913c:	4bd1      	ldr	r3, [pc, #836]	; (9484 <send_settings+0x5e8>)
    913e:	781a      	ldrb	r2, [r3, #0]
    9140:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9144:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9148:	781b      	ldrb	r3, [r3, #0]
    914a:	4413      	add	r3, r2
    914c:	b2da      	uxtb	r2, r3
    914e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9152:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9156:	701a      	strb	r2, [r3, #0]
    9158:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    915c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9160:	781a      	ldrb	r2, [r3, #0]
    9162:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9166:	f2c2 0300 	movt	r3, #8192	; 0x2000
    916a:	781b      	ldrb	r3, [r3, #0]
    916c:	4413      	add	r3, r2
    916e:	b2da      	uxtb	r2, r3
    9170:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9174:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9178:	701a      	strb	r2, [r3, #0]
    917a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    917e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9182:	781b      	ldrb	r3, [r3, #0]
    9184:	3301      	adds	r3, #1
    9186:	b2da      	uxtb	r2, r3
    9188:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    918c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9190:	701a      	strb	r2, [r3, #0]
    9192:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9196:	f2c2 0300 	movt	r3, #8192	; 0x2000
    919a:	781b      	ldrb	r3, [r3, #0]
    919c:	2bff      	cmp	r3, #255	; 0xff
    919e:	d105      	bne.n	91ac <send_settings+0x310>
    91a0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    91a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91a8:	2200      	movs	r2, #0
    91aa:	701a      	strb	r2, [r3, #0]
    91ac:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    91b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91b4:	781b      	ldrb	r3, [r3, #0]
    91b6:	461a      	mov	r2, r3
    91b8:	f64a 23a0 	movw	r3, #43680	; 0xaaa0
    91bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91c0:	7899      	ldrb	r1, [r3, #2]
    91c2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    91c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91ca:	5499      	strb	r1, [r3, r2]
    91cc:	4bae      	ldr	r3, [pc, #696]	; (9488 <send_settings+0x5ec>)
    91ce:	781a      	ldrb	r2, [r3, #0]
    91d0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    91d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91d8:	781b      	ldrb	r3, [r3, #0]
    91da:	4413      	add	r3, r2
    91dc:	b2da      	uxtb	r2, r3
    91de:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    91e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91e6:	701a      	strb	r2, [r3, #0]
    91e8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    91ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91f0:	781a      	ldrb	r2, [r3, #0]
    91f2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    91f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91fa:	781b      	ldrb	r3, [r3, #0]
    91fc:	4413      	add	r3, r2
    91fe:	b2da      	uxtb	r2, r3
    9200:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9204:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9208:	701a      	strb	r2, [r3, #0]
    920a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    920e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9212:	781b      	ldrb	r3, [r3, #0]
    9214:	3301      	adds	r3, #1
    9216:	b2da      	uxtb	r2, r3
    9218:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    921c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9220:	701a      	strb	r2, [r3, #0]
    9222:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    922a:	781b      	ldrb	r3, [r3, #0]
    922c:	2bff      	cmp	r3, #255	; 0xff
    922e:	d105      	bne.n	923c <send_settings+0x3a0>
    9230:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9234:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9238:	2200      	movs	r2, #0
    923a:	701a      	strb	r2, [r3, #0]
    923c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9240:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9244:	781b      	ldrb	r3, [r3, #0]
    9246:	461a      	mov	r2, r3
    9248:	f64a 23a0 	movw	r3, #43680	; 0xaaa0
    924c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9250:	78d9      	ldrb	r1, [r3, #3]
    9252:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9256:	f2c2 0300 	movt	r3, #8192	; 0x2000
    925a:	5499      	strb	r1, [r3, r2]
    925c:	4b8b      	ldr	r3, [pc, #556]	; (948c <send_settings+0x5f0>)
    925e:	781a      	ldrb	r2, [r3, #0]
    9260:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9264:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9268:	781b      	ldrb	r3, [r3, #0]
    926a:	4413      	add	r3, r2
    926c:	b2da      	uxtb	r2, r3
    926e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9272:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9276:	701a      	strb	r2, [r3, #0]
    9278:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    927c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9280:	781a      	ldrb	r2, [r3, #0]
    9282:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9286:	f2c2 0300 	movt	r3, #8192	; 0x2000
    928a:	781b      	ldrb	r3, [r3, #0]
    928c:	4413      	add	r3, r2
    928e:	b2da      	uxtb	r2, r3
    9290:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9294:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9298:	701a      	strb	r2, [r3, #0]
    929a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    929e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92a2:	781b      	ldrb	r3, [r3, #0]
    92a4:	3301      	adds	r3, #1
    92a6:	b2da      	uxtb	r2, r3
    92a8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    92ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92b0:	701a      	strb	r2, [r3, #0]
    92b2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    92b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92ba:	781b      	ldrb	r3, [r3, #0]
    92bc:	2bff      	cmp	r3, #255	; 0xff
    92be:	d105      	bne.n	92cc <send_settings+0x430>
    92c0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    92c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92c8:	2200      	movs	r2, #0
    92ca:	701a      	strb	r2, [r3, #0]
    92cc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    92d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92d4:	781b      	ldrb	r3, [r3, #0]
    92d6:	461a      	mov	r2, r3
    92d8:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
    92dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92e0:	7819      	ldrb	r1, [r3, #0]
    92e2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    92e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92ea:	5499      	strb	r1, [r3, r2]
    92ec:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
    92f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92f4:	781a      	ldrb	r2, [r3, #0]
    92f6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    92fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92fe:	781b      	ldrb	r3, [r3, #0]
    9300:	4413      	add	r3, r2
    9302:	b2da      	uxtb	r2, r3
    9304:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9308:	f2c2 0300 	movt	r3, #8192	; 0x2000
    930c:	701a      	strb	r2, [r3, #0]
    930e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9312:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9316:	781a      	ldrb	r2, [r3, #0]
    9318:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    931c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9320:	781b      	ldrb	r3, [r3, #0]
    9322:	4413      	add	r3, r2
    9324:	b2da      	uxtb	r2, r3
    9326:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    932a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    932e:	701a      	strb	r2, [r3, #0]
    9330:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9334:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9338:	781b      	ldrb	r3, [r3, #0]
    933a:	3301      	adds	r3, #1
    933c:	b2da      	uxtb	r2, r3
    933e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9342:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9346:	701a      	strb	r2, [r3, #0]
    9348:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    934c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9350:	781b      	ldrb	r3, [r3, #0]
    9352:	2bff      	cmp	r3, #255	; 0xff
    9354:	d105      	bne.n	9362 <send_settings+0x4c6>
    9356:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    935a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    935e:	2200      	movs	r2, #0
    9360:	701a      	strb	r2, [r3, #0]
    9362:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9366:	f2c2 0300 	movt	r3, #8192	; 0x2000
    936a:	781b      	ldrb	r3, [r3, #0]
    936c:	461a      	mov	r2, r3
    936e:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
    9372:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9376:	7859      	ldrb	r1, [r3, #1]
    9378:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    937c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9380:	5499      	strb	r1, [r3, r2]
    9382:	4b43      	ldr	r3, [pc, #268]	; (9490 <send_settings+0x5f4>)
    9384:	781a      	ldrb	r2, [r3, #0]
    9386:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    938a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    938e:	781b      	ldrb	r3, [r3, #0]
    9390:	4413      	add	r3, r2
    9392:	b2da      	uxtb	r2, r3
    9394:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9398:	f2c2 0300 	movt	r3, #8192	; 0x2000
    939c:	701a      	strb	r2, [r3, #0]
    939e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    93a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93a6:	781a      	ldrb	r2, [r3, #0]
    93a8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    93ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93b0:	781b      	ldrb	r3, [r3, #0]
    93b2:	4413      	add	r3, r2
    93b4:	b2da      	uxtb	r2, r3
    93b6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    93ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93be:	701a      	strb	r2, [r3, #0]
    93c0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    93c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93c8:	781b      	ldrb	r3, [r3, #0]
    93ca:	3301      	adds	r3, #1
    93cc:	b2da      	uxtb	r2, r3
    93ce:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    93d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93d6:	701a      	strb	r2, [r3, #0]
    93d8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    93dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93e0:	781b      	ldrb	r3, [r3, #0]
    93e2:	2bff      	cmp	r3, #255	; 0xff
    93e4:	d105      	bne.n	93f2 <send_settings+0x556>
    93e6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    93ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93ee:	2200      	movs	r2, #0
    93f0:	701a      	strb	r2, [r3, #0]
    93f2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    93f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93fa:	781b      	ldrb	r3, [r3, #0]
    93fc:	461a      	mov	r2, r3
    93fe:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
    9402:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9406:	7899      	ldrb	r1, [r3, #2]
    9408:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    940c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9410:	5499      	strb	r1, [r3, r2]
    9412:	4b20      	ldr	r3, [pc, #128]	; (9494 <send_settings+0x5f8>)
    9414:	781a      	ldrb	r2, [r3, #0]
    9416:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    941a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    941e:	781b      	ldrb	r3, [r3, #0]
    9420:	4413      	add	r3, r2
    9422:	b2da      	uxtb	r2, r3
    9424:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9428:	f2c2 0300 	movt	r3, #8192	; 0x2000
    942c:	701a      	strb	r2, [r3, #0]
    942e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9432:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9436:	781a      	ldrb	r2, [r3, #0]
    9438:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    943c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9440:	781b      	ldrb	r3, [r3, #0]
    9442:	4413      	add	r3, r2
    9444:	b2da      	uxtb	r2, r3
    9446:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    944a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    944e:	701a      	strb	r2, [r3, #0]
    9450:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9454:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9458:	781b      	ldrb	r3, [r3, #0]
    945a:	3301      	adds	r3, #1
    945c:	b2da      	uxtb	r2, r3
    945e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9462:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9466:	701a      	strb	r2, [r3, #0]
    9468:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    946c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9470:	781b      	ldrb	r3, [r3, #0]
    9472:	2bff      	cmp	r3, #255	; 0xff
    9474:	d110      	bne.n	9498 <send_settings+0x5fc>
    9476:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    947a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    947e:	2200      	movs	r2, #0
    9480:	701a      	strb	r2, [r3, #0]
    9482:	e009      	b.n	9498 <send_settings+0x5fc>
    9484:	2000aaa1 	.word	0x2000aaa1
    9488:	2000aaa2 	.word	0x2000aaa2
    948c:	2000aaa3 	.word	0x2000aaa3
    9490:	2000aaa5 	.word	0x2000aaa5
    9494:	2000aaa6 	.word	0x2000aaa6
    9498:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    949c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94a0:	781b      	ldrb	r3, [r3, #0]
    94a2:	461a      	mov	r2, r3
    94a4:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
    94a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94ac:	78d9      	ldrb	r1, [r3, #3]
    94ae:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    94b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94b6:	5499      	strb	r1, [r3, r2]
    94b8:	4b79      	ldr	r3, [pc, #484]	; (96a0 <send_settings+0x804>)
    94ba:	781a      	ldrb	r2, [r3, #0]
    94bc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    94c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94c4:	781b      	ldrb	r3, [r3, #0]
    94c6:	4413      	add	r3, r2
    94c8:	b2da      	uxtb	r2, r3
    94ca:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    94ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94d2:	701a      	strb	r2, [r3, #0]
    94d4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    94d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94dc:	781a      	ldrb	r2, [r3, #0]
    94de:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    94e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94e6:	781b      	ldrb	r3, [r3, #0]
    94e8:	4413      	add	r3, r2
    94ea:	b2da      	uxtb	r2, r3
    94ec:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    94f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94f4:	701a      	strb	r2, [r3, #0]
    94f6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    94fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94fe:	781b      	ldrb	r3, [r3, #0]
    9500:	3301      	adds	r3, #1
    9502:	b2da      	uxtb	r2, r3
    9504:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9508:	f2c2 0300 	movt	r3, #8192	; 0x2000
    950c:	701a      	strb	r2, [r3, #0]
    950e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9512:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9516:	781b      	ldrb	r3, [r3, #0]
    9518:	2bff      	cmp	r3, #255	; 0xff
    951a:	d105      	bne.n	9528 <send_settings+0x68c>
    951c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9524:	2200      	movs	r2, #0
    9526:	701a      	strb	r2, [r3, #0]
    9528:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    952c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9530:	781b      	ldrb	r3, [r3, #0]
    9532:	461a      	mov	r2, r3
    9534:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9538:	f2c2 0300 	movt	r3, #8192	; 0x2000
    953c:	7819      	ldrb	r1, [r3, #0]
    953e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9542:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9546:	5499      	strb	r1, [r3, r2]
    9548:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    954c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9550:	781b      	ldrb	r3, [r3, #0]
    9552:	3301      	adds	r3, #1
    9554:	b2da      	uxtb	r2, r3
    9556:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    955a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    955e:	701a      	strb	r2, [r3, #0]
    9560:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9564:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9568:	781b      	ldrb	r3, [r3, #0]
    956a:	2bff      	cmp	r3, #255	; 0xff
    956c:	d105      	bne.n	957a <send_settings+0x6de>
    956e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9572:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9576:	2200      	movs	r2, #0
    9578:	701a      	strb	r2, [r3, #0]
    957a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    957e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9582:	781b      	ldrb	r3, [r3, #0]
    9584:	461a      	mov	r2, r3
    9586:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    958a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    958e:	7819      	ldrb	r1, [r3, #0]
    9590:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9594:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9598:	5499      	strb	r1, [r3, r2]
    959a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    959e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95a2:	781b      	ldrb	r3, [r3, #0]
    95a4:	3301      	adds	r3, #1
    95a6:	b2da      	uxtb	r2, r3
    95a8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    95ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95b0:	701a      	strb	r2, [r3, #0]
    95b2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    95b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95ba:	781b      	ldrb	r3, [r3, #0]
    95bc:	2bff      	cmp	r3, #255	; 0xff
    95be:	d105      	bne.n	95cc <send_settings+0x730>
    95c0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    95c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95c8:	2200      	movs	r2, #0
    95ca:	701a      	strb	r2, [r3, #0]
    95cc:	f242 0339 	movw	r3, #8249	; 0x2039
    95d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95d4:	781b      	ldrb	r3, [r3, #0]
    95d6:	b2db      	uxtb	r3, r3
    95d8:	f003 0310 	and.w	r3, r3, #16
    95dc:	2b00      	cmp	r3, #0
    95de:	d15a      	bne.n	9696 <send_settings+0x7fa>
    95e0:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    95e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95e8:	781b      	ldrb	r3, [r3, #0]
    95ea:	b2db      	uxtb	r3, r3
    95ec:	461a      	mov	r2, r3
    95ee:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    95f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95f6:	5c9a      	ldrb	r2, [r3, r2]
    95f8:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    95fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9600:	701a      	strb	r2, [r3, #0]
    9602:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    9606:	f2c2 0300 	movt	r3, #8192	; 0x2000
    960a:	2200      	movs	r2, #0
    960c:	701a      	strb	r2, [r3, #0]
    960e:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    9612:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9616:	781b      	ldrb	r3, [r3, #0]
    9618:	b2db      	uxtb	r3, r3
    961a:	3301      	adds	r3, #1
    961c:	b2da      	uxtb	r2, r3
    961e:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    9622:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9626:	701a      	strb	r2, [r3, #0]
    9628:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    962c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9630:	781b      	ldrb	r3, [r3, #0]
    9632:	b2db      	uxtb	r3, r3
    9634:	2bff      	cmp	r3, #255	; 0xff
    9636:	d105      	bne.n	9644 <send_settings+0x7a8>
    9638:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    963c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9640:	2200      	movs	r2, #0
    9642:	701a      	strb	r2, [r3, #0]
    9644:	f242 0338 	movw	r3, #8248	; 0x2038
    9648:	f2c2 0300 	movt	r3, #8192	; 0x2000
    964c:	f242 0238 	movw	r2, #8248	; 0x2038
    9650:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9654:	7812      	ldrb	r2, [r2, #0]
    9656:	b2d2      	uxtb	r2, r2
    9658:	f042 0201 	orr.w	r2, r2, #1
    965c:	b2d2      	uxtb	r2, r2
    965e:	701a      	strb	r2, [r3, #0]
    9660:	f242 0339 	movw	r3, #8249	; 0x2039
    9664:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9668:	f242 0239 	movw	r2, #8249	; 0x2039
    966c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9670:	7812      	ldrb	r2, [r2, #0]
    9672:	b2d2      	uxtb	r2, r2
    9674:	f042 0210 	orr.w	r2, r2, #16
    9678:	b2d2      	uxtb	r2, r2
    967a:	701a      	strb	r2, [r3, #0]
    967c:	e00b      	b.n	9696 <send_settings+0x7fa>
    967e:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    9682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9686:	781b      	ldrb	r3, [r3, #0]
    9688:	3301      	adds	r3, #1
    968a:	b2da      	uxtb	r2, r3
    968c:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    9690:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9694:	701a      	strb	r2, [r3, #0]
}
    9696:	46bd      	mov	sp, r7
    9698:	f85d 7b04 	ldr.w	r7, [sp], #4
    969c:	4770      	bx	lr
    969e:	bf00      	nop
    96a0:	2000aaa7 	.word	0x2000aaa7

000096a4 <send_desired>:
void send_desired(void){  //1000ms
    96a4:	b480      	push	{r7}
    96a6:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 10 == 3) PERIODIC_SEND_DESIRED();}
    96a8:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    96ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96b0:	781a      	ldrb	r2, [r3, #0]
    96b2:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    96b6:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    96ba:	fba3 1302 	umull	r1, r3, r3, r2
    96be:	08d9      	lsrs	r1, r3, #3
    96c0:	460b      	mov	r3, r1
    96c2:	009b      	lsls	r3, r3, #2
    96c4:	440b      	add	r3, r1
    96c6:	005b      	lsls	r3, r3, #1
    96c8:	1ad3      	subs	r3, r2, r3
    96ca:	b2db      	uxtb	r3, r3
    96cc:	2b03      	cmp	r3, #3
    96ce:	f040 8712 	bne.w	a4f6 <send_desired+0xe52>
    96d2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    96d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96da:	781a      	ldrb	r2, [r3, #0]
    96dc:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    96e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96e4:	781b      	ldrb	r3, [r3, #0]
    96e6:	b2db      	uxtb	r3, r3
    96e8:	429a      	cmp	r2, r3
    96ea:	d313      	bcc.n	9714 <send_desired+0x70>
    96ec:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    96f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96f4:	781b      	ldrb	r3, [r3, #0]
    96f6:	b2db      	uxtb	r3, r3
    96f8:	461a      	mov	r2, r3
    96fa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    96fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9702:	781b      	ldrb	r3, [r3, #0]
    9704:	1ad3      	subs	r3, r2, r3
    9706:	33ff      	adds	r3, #255	; 0xff
    9708:	2b18      	cmp	r3, #24
    970a:	bfd4      	ite	le
    970c:	2300      	movle	r3, #0
    970e:	2301      	movgt	r3, #1
    9710:	b2db      	uxtb	r3, r3
    9712:	e011      	b.n	9738 <send_desired+0x94>
    9714:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    9718:	f2c2 0300 	movt	r3, #8192	; 0x2000
    971c:	781b      	ldrb	r3, [r3, #0]
    971e:	b2db      	uxtb	r3, r3
    9720:	461a      	mov	r2, r3
    9722:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9726:	f2c2 0300 	movt	r3, #8192	; 0x2000
    972a:	781b      	ldrb	r3, [r3, #0]
    972c:	1ad3      	subs	r3, r2, r3
    972e:	2b18      	cmp	r3, #24
    9730:	bfd4      	ite	le
    9732:	2300      	movle	r3, #0
    9734:	2301      	movgt	r3, #1
    9736:	b2db      	uxtb	r3, r3
    9738:	2b00      	cmp	r3, #0
    973a:	f000 86d0 	beq.w	a4de <send_desired+0xe3a>
    973e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9742:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9746:	781b      	ldrb	r3, [r3, #0]
    9748:	461a      	mov	r2, r3
    974a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    974e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9752:	2105      	movs	r1, #5
    9754:	5499      	strb	r1, [r3, r2]
    9756:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    975a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    975e:	781b      	ldrb	r3, [r3, #0]
    9760:	3301      	adds	r3, #1
    9762:	b2da      	uxtb	r2, r3
    9764:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9768:	f2c2 0300 	movt	r3, #8192	; 0x2000
    976c:	701a      	strb	r2, [r3, #0]
    976e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9772:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9776:	781b      	ldrb	r3, [r3, #0]
    9778:	2bff      	cmp	r3, #255	; 0xff
    977a:	d105      	bne.n	9788 <send_desired+0xe4>
    977c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9784:	2200      	movs	r2, #0
    9786:	701a      	strb	r2, [r3, #0]
    9788:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    978c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9790:	781b      	ldrb	r3, [r3, #0]
    9792:	461a      	mov	r2, r3
    9794:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9798:	f2c2 0300 	movt	r3, #8192	; 0x2000
    979c:	2112      	movs	r1, #18
    979e:	5499      	strb	r1, [r3, r2]
    97a0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    97a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97a8:	781b      	ldrb	r3, [r3, #0]
    97aa:	3301      	adds	r3, #1
    97ac:	b2da      	uxtb	r2, r3
    97ae:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    97b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97b6:	701a      	strb	r2, [r3, #0]
    97b8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    97bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97c0:	781b      	ldrb	r3, [r3, #0]
    97c2:	2bff      	cmp	r3, #255	; 0xff
    97c4:	d105      	bne.n	97d2 <send_desired+0x12e>
    97c6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    97ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97ce:	2200      	movs	r2, #0
    97d0:	701a      	strb	r2, [r3, #0]
    97d2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    97d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97da:	2212      	movs	r2, #18
    97dc:	701a      	strb	r2, [r3, #0]
    97de:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    97e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97e6:	2212      	movs	r2, #18
    97e8:	701a      	strb	r2, [r3, #0]
    97ea:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    97ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97f2:	781b      	ldrb	r3, [r3, #0]
    97f4:	461a      	mov	r2, r3
    97f6:	f64a 53dc 	movw	r3, #44508	; 0xaddc
    97fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97fe:	7819      	ldrb	r1, [r3, #0]
    9800:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9804:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9808:	5499      	strb	r1, [r3, r2]
    980a:	f64a 53dc 	movw	r3, #44508	; 0xaddc
    980e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9812:	781a      	ldrb	r2, [r3, #0]
    9814:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9818:	f2c2 0300 	movt	r3, #8192	; 0x2000
    981c:	781b      	ldrb	r3, [r3, #0]
    981e:	4413      	add	r3, r2
    9820:	b2da      	uxtb	r2, r3
    9822:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9826:	f2c2 0300 	movt	r3, #8192	; 0x2000
    982a:	701a      	strb	r2, [r3, #0]
    982c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9830:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9834:	781a      	ldrb	r2, [r3, #0]
    9836:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    983a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    983e:	781b      	ldrb	r3, [r3, #0]
    9840:	4413      	add	r3, r2
    9842:	b2da      	uxtb	r2, r3
    9844:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9848:	f2c2 0300 	movt	r3, #8192	; 0x2000
    984c:	701a      	strb	r2, [r3, #0]
    984e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9852:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9856:	781b      	ldrb	r3, [r3, #0]
    9858:	3301      	adds	r3, #1
    985a:	b2da      	uxtb	r2, r3
    985c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9860:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9864:	701a      	strb	r2, [r3, #0]
    9866:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    986a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    986e:	781b      	ldrb	r3, [r3, #0]
    9870:	2bff      	cmp	r3, #255	; 0xff
    9872:	d105      	bne.n	9880 <send_desired+0x1dc>
    9874:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9878:	f2c2 0300 	movt	r3, #8192	; 0x2000
    987c:	2200      	movs	r2, #0
    987e:	701a      	strb	r2, [r3, #0]
    9880:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9884:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9888:	781b      	ldrb	r3, [r3, #0]
    988a:	461a      	mov	r2, r3
    988c:	f64a 53dc 	movw	r3, #44508	; 0xaddc
    9890:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9894:	7859      	ldrb	r1, [r3, #1]
    9896:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    989a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    989e:	5499      	strb	r1, [r3, r2]
    98a0:	4bd1      	ldr	r3, [pc, #836]	; (9be8 <send_desired+0x544>)
    98a2:	781a      	ldrb	r2, [r3, #0]
    98a4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    98a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98ac:	781b      	ldrb	r3, [r3, #0]
    98ae:	4413      	add	r3, r2
    98b0:	b2da      	uxtb	r2, r3
    98b2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    98b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98ba:	701a      	strb	r2, [r3, #0]
    98bc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    98c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98c4:	781a      	ldrb	r2, [r3, #0]
    98c6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    98ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98ce:	781b      	ldrb	r3, [r3, #0]
    98d0:	4413      	add	r3, r2
    98d2:	b2da      	uxtb	r2, r3
    98d4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    98d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98dc:	701a      	strb	r2, [r3, #0]
    98de:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    98e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98e6:	781b      	ldrb	r3, [r3, #0]
    98e8:	3301      	adds	r3, #1
    98ea:	b2da      	uxtb	r2, r3
    98ec:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    98f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98f4:	701a      	strb	r2, [r3, #0]
    98f6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    98fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98fe:	781b      	ldrb	r3, [r3, #0]
    9900:	2bff      	cmp	r3, #255	; 0xff
    9902:	d105      	bne.n	9910 <send_desired+0x26c>
    9904:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9908:	f2c2 0300 	movt	r3, #8192	; 0x2000
    990c:	2200      	movs	r2, #0
    990e:	701a      	strb	r2, [r3, #0]
    9910:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9914:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9918:	781b      	ldrb	r3, [r3, #0]
    991a:	461a      	mov	r2, r3
    991c:	f64a 53dc 	movw	r3, #44508	; 0xaddc
    9920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9924:	7899      	ldrb	r1, [r3, #2]
    9926:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    992a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    992e:	5499      	strb	r1, [r3, r2]
    9930:	4bae      	ldr	r3, [pc, #696]	; (9bec <send_desired+0x548>)
    9932:	781a      	ldrb	r2, [r3, #0]
    9934:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9938:	f2c2 0300 	movt	r3, #8192	; 0x2000
    993c:	781b      	ldrb	r3, [r3, #0]
    993e:	4413      	add	r3, r2
    9940:	b2da      	uxtb	r2, r3
    9942:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9946:	f2c2 0300 	movt	r3, #8192	; 0x2000
    994a:	701a      	strb	r2, [r3, #0]
    994c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9950:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9954:	781a      	ldrb	r2, [r3, #0]
    9956:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    995a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    995e:	781b      	ldrb	r3, [r3, #0]
    9960:	4413      	add	r3, r2
    9962:	b2da      	uxtb	r2, r3
    9964:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9968:	f2c2 0300 	movt	r3, #8192	; 0x2000
    996c:	701a      	strb	r2, [r3, #0]
    996e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9972:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9976:	781b      	ldrb	r3, [r3, #0]
    9978:	3301      	adds	r3, #1
    997a:	b2da      	uxtb	r2, r3
    997c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9980:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9984:	701a      	strb	r2, [r3, #0]
    9986:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    998a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    998e:	781b      	ldrb	r3, [r3, #0]
    9990:	2bff      	cmp	r3, #255	; 0xff
    9992:	d105      	bne.n	99a0 <send_desired+0x2fc>
    9994:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9998:	f2c2 0300 	movt	r3, #8192	; 0x2000
    999c:	2200      	movs	r2, #0
    999e:	701a      	strb	r2, [r3, #0]
    99a0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    99a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99a8:	781b      	ldrb	r3, [r3, #0]
    99aa:	461a      	mov	r2, r3
    99ac:	f64a 53dc 	movw	r3, #44508	; 0xaddc
    99b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99b4:	78d9      	ldrb	r1, [r3, #3]
    99b6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    99ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99be:	5499      	strb	r1, [r3, r2]
    99c0:	4b8b      	ldr	r3, [pc, #556]	; (9bf0 <send_desired+0x54c>)
    99c2:	781a      	ldrb	r2, [r3, #0]
    99c4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    99c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99cc:	781b      	ldrb	r3, [r3, #0]
    99ce:	4413      	add	r3, r2
    99d0:	b2da      	uxtb	r2, r3
    99d2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    99d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99da:	701a      	strb	r2, [r3, #0]
    99dc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    99e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99e4:	781a      	ldrb	r2, [r3, #0]
    99e6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    99ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99ee:	781b      	ldrb	r3, [r3, #0]
    99f0:	4413      	add	r3, r2
    99f2:	b2da      	uxtb	r2, r3
    99f4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    99f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99fc:	701a      	strb	r2, [r3, #0]
    99fe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9a02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a06:	781b      	ldrb	r3, [r3, #0]
    9a08:	3301      	adds	r3, #1
    9a0a:	b2da      	uxtb	r2, r3
    9a0c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9a10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a14:	701a      	strb	r2, [r3, #0]
    9a16:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9a1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a1e:	781b      	ldrb	r3, [r3, #0]
    9a20:	2bff      	cmp	r3, #255	; 0xff
    9a22:	d105      	bne.n	9a30 <send_desired+0x38c>
    9a24:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a2c:	2200      	movs	r2, #0
    9a2e:	701a      	strb	r2, [r3, #0]
    9a30:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9a34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a38:	781b      	ldrb	r3, [r3, #0]
    9a3a:	461a      	mov	r2, r3
    9a3c:	f64a 53e0 	movw	r3, #44512	; 0xade0
    9a40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a44:	7819      	ldrb	r1, [r3, #0]
    9a46:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9a4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a4e:	5499      	strb	r1, [r3, r2]
    9a50:	f64a 53e0 	movw	r3, #44512	; 0xade0
    9a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a58:	781a      	ldrb	r2, [r3, #0]
    9a5a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a62:	781b      	ldrb	r3, [r3, #0]
    9a64:	4413      	add	r3, r2
    9a66:	b2da      	uxtb	r2, r3
    9a68:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9a6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a70:	701a      	strb	r2, [r3, #0]
    9a72:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a7a:	781a      	ldrb	r2, [r3, #0]
    9a7c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9a80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a84:	781b      	ldrb	r3, [r3, #0]
    9a86:	4413      	add	r3, r2
    9a88:	b2da      	uxtb	r2, r3
    9a8a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9a8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a92:	701a      	strb	r2, [r3, #0]
    9a94:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9a98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a9c:	781b      	ldrb	r3, [r3, #0]
    9a9e:	3301      	adds	r3, #1
    9aa0:	b2da      	uxtb	r2, r3
    9aa2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9aaa:	701a      	strb	r2, [r3, #0]
    9aac:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ab4:	781b      	ldrb	r3, [r3, #0]
    9ab6:	2bff      	cmp	r3, #255	; 0xff
    9ab8:	d105      	bne.n	9ac6 <send_desired+0x422>
    9aba:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9abe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ac2:	2200      	movs	r2, #0
    9ac4:	701a      	strb	r2, [r3, #0]
    9ac6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ace:	781b      	ldrb	r3, [r3, #0]
    9ad0:	461a      	mov	r2, r3
    9ad2:	f64a 53e0 	movw	r3, #44512	; 0xade0
    9ad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ada:	7859      	ldrb	r1, [r3, #1]
    9adc:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9ae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ae4:	5499      	strb	r1, [r3, r2]
    9ae6:	4b43      	ldr	r3, [pc, #268]	; (9bf4 <send_desired+0x550>)
    9ae8:	781a      	ldrb	r2, [r3, #0]
    9aea:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9aee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9af2:	781b      	ldrb	r3, [r3, #0]
    9af4:	4413      	add	r3, r2
    9af6:	b2da      	uxtb	r2, r3
    9af8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9afc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b00:	701a      	strb	r2, [r3, #0]
    9b02:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9b06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b0a:	781a      	ldrb	r2, [r3, #0]
    9b0c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9b10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b14:	781b      	ldrb	r3, [r3, #0]
    9b16:	4413      	add	r3, r2
    9b18:	b2da      	uxtb	r2, r3
    9b1a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9b1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b22:	701a      	strb	r2, [r3, #0]
    9b24:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9b28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b2c:	781b      	ldrb	r3, [r3, #0]
    9b2e:	3301      	adds	r3, #1
    9b30:	b2da      	uxtb	r2, r3
    9b32:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9b36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b3a:	701a      	strb	r2, [r3, #0]
    9b3c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b44:	781b      	ldrb	r3, [r3, #0]
    9b46:	2bff      	cmp	r3, #255	; 0xff
    9b48:	d105      	bne.n	9b56 <send_desired+0x4b2>
    9b4a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b52:	2200      	movs	r2, #0
    9b54:	701a      	strb	r2, [r3, #0]
    9b56:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9b5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b5e:	781b      	ldrb	r3, [r3, #0]
    9b60:	461a      	mov	r2, r3
    9b62:	f64a 53e0 	movw	r3, #44512	; 0xade0
    9b66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b6a:	7899      	ldrb	r1, [r3, #2]
    9b6c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9b70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b74:	5499      	strb	r1, [r3, r2]
    9b76:	4b20      	ldr	r3, [pc, #128]	; (9bf8 <send_desired+0x554>)
    9b78:	781a      	ldrb	r2, [r3, #0]
    9b7a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9b7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b82:	781b      	ldrb	r3, [r3, #0]
    9b84:	4413      	add	r3, r2
    9b86:	b2da      	uxtb	r2, r3
    9b88:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b90:	701a      	strb	r2, [r3, #0]
    9b92:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9b96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b9a:	781a      	ldrb	r2, [r3, #0]
    9b9c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9ba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ba4:	781b      	ldrb	r3, [r3, #0]
    9ba6:	4413      	add	r3, r2
    9ba8:	b2da      	uxtb	r2, r3
    9baa:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9bae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bb2:	701a      	strb	r2, [r3, #0]
    9bb4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bbc:	781b      	ldrb	r3, [r3, #0]
    9bbe:	3301      	adds	r3, #1
    9bc0:	b2da      	uxtb	r2, r3
    9bc2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9bc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bca:	701a      	strb	r2, [r3, #0]
    9bcc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9bd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bd4:	781b      	ldrb	r3, [r3, #0]
    9bd6:	2bff      	cmp	r3, #255	; 0xff
    9bd8:	d110      	bne.n	9bfc <send_desired+0x558>
    9bda:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9bde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9be2:	2200      	movs	r2, #0
    9be4:	701a      	strb	r2, [r3, #0]
    9be6:	e009      	b.n	9bfc <send_desired+0x558>
    9be8:	2000addd 	.word	0x2000addd
    9bec:	2000adde 	.word	0x2000adde
    9bf0:	2000addf 	.word	0x2000addf
    9bf4:	2000ade1 	.word	0x2000ade1
    9bf8:	2000ade2 	.word	0x2000ade2
    9bfc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9c00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c04:	781b      	ldrb	r3, [r3, #0]
    9c06:	461a      	mov	r2, r3
    9c08:	f64a 53e0 	movw	r3, #44512	; 0xade0
    9c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c10:	78d9      	ldrb	r1, [r3, #3]
    9c12:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9c16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c1a:	5499      	strb	r1, [r3, r2]
    9c1c:	4bd3      	ldr	r3, [pc, #844]	; (9f6c <send_desired+0x8c8>)
    9c1e:	781a      	ldrb	r2, [r3, #0]
    9c20:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9c24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c28:	781b      	ldrb	r3, [r3, #0]
    9c2a:	4413      	add	r3, r2
    9c2c:	b2da      	uxtb	r2, r3
    9c2e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9c32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c36:	701a      	strb	r2, [r3, #0]
    9c38:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c40:	781a      	ldrb	r2, [r3, #0]
    9c42:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9c46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c4a:	781b      	ldrb	r3, [r3, #0]
    9c4c:	4413      	add	r3, r2
    9c4e:	b2da      	uxtb	r2, r3
    9c50:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9c54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c58:	701a      	strb	r2, [r3, #0]
    9c5a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9c5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c62:	781b      	ldrb	r3, [r3, #0]
    9c64:	3301      	adds	r3, #1
    9c66:	b2da      	uxtb	r2, r3
    9c68:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c70:	701a      	strb	r2, [r3, #0]
    9c72:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9c76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c7a:	781b      	ldrb	r3, [r3, #0]
    9c7c:	2bff      	cmp	r3, #255	; 0xff
    9c7e:	d105      	bne.n	9c8c <send_desired+0x5e8>
    9c80:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c88:	2200      	movs	r2, #0
    9c8a:	701a      	strb	r2, [r3, #0]
    9c8c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c94:	781b      	ldrb	r3, [r3, #0]
    9c96:	461a      	mov	r2, r3
    9c98:	f64a 6328 	movw	r3, #44584	; 0xae28
    9c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ca0:	7819      	ldrb	r1, [r3, #0]
    9ca2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9ca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9caa:	5499      	strb	r1, [r3, r2]
    9cac:	f64a 6328 	movw	r3, #44584	; 0xae28
    9cb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cb4:	781a      	ldrb	r2, [r3, #0]
    9cb6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9cba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cbe:	781b      	ldrb	r3, [r3, #0]
    9cc0:	4413      	add	r3, r2
    9cc2:	b2da      	uxtb	r2, r3
    9cc4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9cc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ccc:	701a      	strb	r2, [r3, #0]
    9cce:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9cd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cd6:	781a      	ldrb	r2, [r3, #0]
    9cd8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9cdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ce0:	781b      	ldrb	r3, [r3, #0]
    9ce2:	4413      	add	r3, r2
    9ce4:	b2da      	uxtb	r2, r3
    9ce6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9cea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cee:	701a      	strb	r2, [r3, #0]
    9cf0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9cf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cf8:	781b      	ldrb	r3, [r3, #0]
    9cfa:	3301      	adds	r3, #1
    9cfc:	b2da      	uxtb	r2, r3
    9cfe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d06:	701a      	strb	r2, [r3, #0]
    9d08:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9d0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d10:	781b      	ldrb	r3, [r3, #0]
    9d12:	2bff      	cmp	r3, #255	; 0xff
    9d14:	d105      	bne.n	9d22 <send_desired+0x67e>
    9d16:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9d1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d1e:	2200      	movs	r2, #0
    9d20:	701a      	strb	r2, [r3, #0]
    9d22:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9d26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d2a:	781b      	ldrb	r3, [r3, #0]
    9d2c:	461a      	mov	r2, r3
    9d2e:	f64a 6328 	movw	r3, #44584	; 0xae28
    9d32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d36:	7859      	ldrb	r1, [r3, #1]
    9d38:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d40:	5499      	strb	r1, [r3, r2]
    9d42:	4b8b      	ldr	r3, [pc, #556]	; (9f70 <send_desired+0x8cc>)
    9d44:	781a      	ldrb	r2, [r3, #0]
    9d46:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d4e:	781b      	ldrb	r3, [r3, #0]
    9d50:	4413      	add	r3, r2
    9d52:	b2da      	uxtb	r2, r3
    9d54:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9d58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d5c:	701a      	strb	r2, [r3, #0]
    9d5e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9d62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d66:	781a      	ldrb	r2, [r3, #0]
    9d68:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9d6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d70:	781b      	ldrb	r3, [r3, #0]
    9d72:	4413      	add	r3, r2
    9d74:	b2da      	uxtb	r2, r3
    9d76:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9d7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d7e:	701a      	strb	r2, [r3, #0]
    9d80:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9d84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d88:	781b      	ldrb	r3, [r3, #0]
    9d8a:	3301      	adds	r3, #1
    9d8c:	b2da      	uxtb	r2, r3
    9d8e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d96:	701a      	strb	r2, [r3, #0]
    9d98:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9da0:	781b      	ldrb	r3, [r3, #0]
    9da2:	2bff      	cmp	r3, #255	; 0xff
    9da4:	d105      	bne.n	9db2 <send_desired+0x70e>
    9da6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dae:	2200      	movs	r2, #0
    9db0:	701a      	strb	r2, [r3, #0]
    9db2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9db6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dba:	781b      	ldrb	r3, [r3, #0]
    9dbc:	461a      	mov	r2, r3
    9dbe:	f64a 6328 	movw	r3, #44584	; 0xae28
    9dc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dc6:	7899      	ldrb	r1, [r3, #2]
    9dc8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9dcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dd0:	5499      	strb	r1, [r3, r2]
    9dd2:	4b68      	ldr	r3, [pc, #416]	; (9f74 <send_desired+0x8d0>)
    9dd4:	781a      	ldrb	r2, [r3, #0]
    9dd6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9dda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dde:	781b      	ldrb	r3, [r3, #0]
    9de0:	4413      	add	r3, r2
    9de2:	b2da      	uxtb	r2, r3
    9de4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9de8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dec:	701a      	strb	r2, [r3, #0]
    9dee:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9df2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9df6:	781a      	ldrb	r2, [r3, #0]
    9df8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e00:	781b      	ldrb	r3, [r3, #0]
    9e02:	4413      	add	r3, r2
    9e04:	b2da      	uxtb	r2, r3
    9e06:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e0e:	701a      	strb	r2, [r3, #0]
    9e10:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e18:	781b      	ldrb	r3, [r3, #0]
    9e1a:	3301      	adds	r3, #1
    9e1c:	b2da      	uxtb	r2, r3
    9e1e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9e22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e26:	701a      	strb	r2, [r3, #0]
    9e28:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e30:	781b      	ldrb	r3, [r3, #0]
    9e32:	2bff      	cmp	r3, #255	; 0xff
    9e34:	d105      	bne.n	9e42 <send_desired+0x79e>
    9e36:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9e3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e3e:	2200      	movs	r2, #0
    9e40:	701a      	strb	r2, [r3, #0]
    9e42:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9e46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e4a:	781b      	ldrb	r3, [r3, #0]
    9e4c:	461a      	mov	r2, r3
    9e4e:	f64a 6328 	movw	r3, #44584	; 0xae28
    9e52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e56:	78d9      	ldrb	r1, [r3, #3]
    9e58:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9e5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e60:	5499      	strb	r1, [r3, r2]
    9e62:	4b45      	ldr	r3, [pc, #276]	; (9f78 <send_desired+0x8d4>)
    9e64:	781a      	ldrb	r2, [r3, #0]
    9e66:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9e6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e6e:	781b      	ldrb	r3, [r3, #0]
    9e70:	4413      	add	r3, r2
    9e72:	b2da      	uxtb	r2, r3
    9e74:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9e78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e7c:	701a      	strb	r2, [r3, #0]
    9e7e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9e82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e86:	781a      	ldrb	r2, [r3, #0]
    9e88:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e90:	781b      	ldrb	r3, [r3, #0]
    9e92:	4413      	add	r3, r2
    9e94:	b2da      	uxtb	r2, r3
    9e96:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e9e:	701a      	strb	r2, [r3, #0]
    9ea0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9ea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ea8:	781b      	ldrb	r3, [r3, #0]
    9eaa:	3301      	adds	r3, #1
    9eac:	b2da      	uxtb	r2, r3
    9eae:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9eb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9eb6:	701a      	strb	r2, [r3, #0]
    9eb8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ec0:	781b      	ldrb	r3, [r3, #0]
    9ec2:	2bff      	cmp	r3, #255	; 0xff
    9ec4:	d105      	bne.n	9ed2 <send_desired+0x82e>
    9ec6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9eca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ece:	2200      	movs	r2, #0
    9ed0:	701a      	strb	r2, [r3, #0]
    9ed2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9ed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9eda:	781b      	ldrb	r3, [r3, #0]
    9edc:	461a      	mov	r2, r3
    9ede:	f64a 632c 	movw	r3, #44588	; 0xae2c
    9ee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ee6:	7819      	ldrb	r1, [r3, #0]
    9ee8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9eec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ef0:	5499      	strb	r1, [r3, r2]
    9ef2:	f64a 632c 	movw	r3, #44588	; 0xae2c
    9ef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9efa:	781a      	ldrb	r2, [r3, #0]
    9efc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9f00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f04:	781b      	ldrb	r3, [r3, #0]
    9f06:	4413      	add	r3, r2
    9f08:	b2da      	uxtb	r2, r3
    9f0a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9f0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f12:	701a      	strb	r2, [r3, #0]
    9f14:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9f18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f1c:	781a      	ldrb	r2, [r3, #0]
    9f1e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f26:	781b      	ldrb	r3, [r3, #0]
    9f28:	4413      	add	r3, r2
    9f2a:	b2da      	uxtb	r2, r3
    9f2c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9f30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f34:	701a      	strb	r2, [r3, #0]
    9f36:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f3e:	781b      	ldrb	r3, [r3, #0]
    9f40:	3301      	adds	r3, #1
    9f42:	b2da      	uxtb	r2, r3
    9f44:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9f48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f4c:	701a      	strb	r2, [r3, #0]
    9f4e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9f52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f56:	781b      	ldrb	r3, [r3, #0]
    9f58:	2bff      	cmp	r3, #255	; 0xff
    9f5a:	d10f      	bne.n	9f7c <send_desired+0x8d8>
    9f5c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9f60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f64:	2200      	movs	r2, #0
    9f66:	701a      	strb	r2, [r3, #0]
    9f68:	e008      	b.n	9f7c <send_desired+0x8d8>
    9f6a:	bf00      	nop
    9f6c:	2000ade3 	.word	0x2000ade3
    9f70:	2000ae29 	.word	0x2000ae29
    9f74:	2000ae2a 	.word	0x2000ae2a
    9f78:	2000ae2b 	.word	0x2000ae2b
    9f7c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9f80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f84:	781b      	ldrb	r3, [r3, #0]
    9f86:	461a      	mov	r2, r3
    9f88:	f64a 632c 	movw	r3, #44588	; 0xae2c
    9f8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f90:	7859      	ldrb	r1, [r3, #1]
    9f92:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9f96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f9a:	5499      	strb	r1, [r3, r2]
    9f9c:	4bd1      	ldr	r3, [pc, #836]	; (a2e4 <send_desired+0xc40>)
    9f9e:	781a      	ldrb	r2, [r3, #0]
    9fa0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9fa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fa8:	781b      	ldrb	r3, [r3, #0]
    9faa:	4413      	add	r3, r2
    9fac:	b2da      	uxtb	r2, r3
    9fae:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9fb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fb6:	701a      	strb	r2, [r3, #0]
    9fb8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fc0:	781a      	ldrb	r2, [r3, #0]
    9fc2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9fc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fca:	781b      	ldrb	r3, [r3, #0]
    9fcc:	4413      	add	r3, r2
    9fce:	b2da      	uxtb	r2, r3
    9fd0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9fd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fd8:	701a      	strb	r2, [r3, #0]
    9fda:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9fde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fe2:	781b      	ldrb	r3, [r3, #0]
    9fe4:	3301      	adds	r3, #1
    9fe6:	b2da      	uxtb	r2, r3
    9fe8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9fec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ff0:	701a      	strb	r2, [r3, #0]
    9ff2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9ff6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ffa:	781b      	ldrb	r3, [r3, #0]
    9ffc:	2bff      	cmp	r3, #255	; 0xff
    9ffe:	d105      	bne.n	a00c <send_desired+0x968>
    a000:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a004:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a008:	2200      	movs	r2, #0
    a00a:	701a      	strb	r2, [r3, #0]
    a00c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a010:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a014:	781b      	ldrb	r3, [r3, #0]
    a016:	461a      	mov	r2, r3
    a018:	f64a 632c 	movw	r3, #44588	; 0xae2c
    a01c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a020:	7899      	ldrb	r1, [r3, #2]
    a022:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a026:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a02a:	5499      	strb	r1, [r3, r2]
    a02c:	4bae      	ldr	r3, [pc, #696]	; (a2e8 <send_desired+0xc44>)
    a02e:	781a      	ldrb	r2, [r3, #0]
    a030:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a034:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a038:	781b      	ldrb	r3, [r3, #0]
    a03a:	4413      	add	r3, r2
    a03c:	b2da      	uxtb	r2, r3
    a03e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a042:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a046:	701a      	strb	r2, [r3, #0]
    a048:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a04c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a050:	781a      	ldrb	r2, [r3, #0]
    a052:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a056:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a05a:	781b      	ldrb	r3, [r3, #0]
    a05c:	4413      	add	r3, r2
    a05e:	b2da      	uxtb	r2, r3
    a060:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a064:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a068:	701a      	strb	r2, [r3, #0]
    a06a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a06e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a072:	781b      	ldrb	r3, [r3, #0]
    a074:	3301      	adds	r3, #1
    a076:	b2da      	uxtb	r2, r3
    a078:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a07c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a080:	701a      	strb	r2, [r3, #0]
    a082:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a086:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a08a:	781b      	ldrb	r3, [r3, #0]
    a08c:	2bff      	cmp	r3, #255	; 0xff
    a08e:	d105      	bne.n	a09c <send_desired+0x9f8>
    a090:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a094:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a098:	2200      	movs	r2, #0
    a09a:	701a      	strb	r2, [r3, #0]
    a09c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a0a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0a4:	781b      	ldrb	r3, [r3, #0]
    a0a6:	461a      	mov	r2, r3
    a0a8:	f64a 632c 	movw	r3, #44588	; 0xae2c
    a0ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0b0:	78d9      	ldrb	r1, [r3, #3]
    a0b2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a0b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0ba:	5499      	strb	r1, [r3, r2]
    a0bc:	4b8b      	ldr	r3, [pc, #556]	; (a2ec <send_desired+0xc48>)
    a0be:	781a      	ldrb	r2, [r3, #0]
    a0c0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a0c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0c8:	781b      	ldrb	r3, [r3, #0]
    a0ca:	4413      	add	r3, r2
    a0cc:	b2da      	uxtb	r2, r3
    a0ce:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a0d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0d6:	701a      	strb	r2, [r3, #0]
    a0d8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a0dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0e0:	781a      	ldrb	r2, [r3, #0]
    a0e2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a0e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0ea:	781b      	ldrb	r3, [r3, #0]
    a0ec:	4413      	add	r3, r2
    a0ee:	b2da      	uxtb	r2, r3
    a0f0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a0f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0f8:	701a      	strb	r2, [r3, #0]
    a0fa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a0fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a102:	781b      	ldrb	r3, [r3, #0]
    a104:	3301      	adds	r3, #1
    a106:	b2da      	uxtb	r2, r3
    a108:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a10c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a110:	701a      	strb	r2, [r3, #0]
    a112:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a116:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a11a:	781b      	ldrb	r3, [r3, #0]
    a11c:	2bff      	cmp	r3, #255	; 0xff
    a11e:	d105      	bne.n	a12c <send_desired+0xa88>
    a120:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a124:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a128:	2200      	movs	r2, #0
    a12a:	701a      	strb	r2, [r3, #0]
    a12c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a130:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a134:	781b      	ldrb	r3, [r3, #0]
    a136:	461a      	mov	r2, r3
    a138:	f240 23b8 	movw	r3, #696	; 0x2b8
    a13c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a140:	7819      	ldrb	r1, [r3, #0]
    a142:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a146:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a14a:	5499      	strb	r1, [r3, r2]
    a14c:	f240 23b8 	movw	r3, #696	; 0x2b8
    a150:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a154:	781a      	ldrb	r2, [r3, #0]
    a156:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a15a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a15e:	781b      	ldrb	r3, [r3, #0]
    a160:	4413      	add	r3, r2
    a162:	b2da      	uxtb	r2, r3
    a164:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a168:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a16c:	701a      	strb	r2, [r3, #0]
    a16e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a172:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a176:	781a      	ldrb	r2, [r3, #0]
    a178:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a17c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a180:	781b      	ldrb	r3, [r3, #0]
    a182:	4413      	add	r3, r2
    a184:	b2da      	uxtb	r2, r3
    a186:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a18a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a18e:	701a      	strb	r2, [r3, #0]
    a190:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a194:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a198:	781b      	ldrb	r3, [r3, #0]
    a19a:	3301      	adds	r3, #1
    a19c:	b2da      	uxtb	r2, r3
    a19e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a1a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1a6:	701a      	strb	r2, [r3, #0]
    a1a8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a1ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1b0:	781b      	ldrb	r3, [r3, #0]
    a1b2:	2bff      	cmp	r3, #255	; 0xff
    a1b4:	d105      	bne.n	a1c2 <send_desired+0xb1e>
    a1b6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a1ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1be:	2200      	movs	r2, #0
    a1c0:	701a      	strb	r2, [r3, #0]
    a1c2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a1c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1ca:	781b      	ldrb	r3, [r3, #0]
    a1cc:	461a      	mov	r2, r3
    a1ce:	f240 23b8 	movw	r3, #696	; 0x2b8
    a1d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1d6:	7859      	ldrb	r1, [r3, #1]
    a1d8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a1dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1e0:	5499      	strb	r1, [r3, r2]
    a1e2:	4b43      	ldr	r3, [pc, #268]	; (a2f0 <send_desired+0xc4c>)
    a1e4:	781a      	ldrb	r2, [r3, #0]
    a1e6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a1ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1ee:	781b      	ldrb	r3, [r3, #0]
    a1f0:	4413      	add	r3, r2
    a1f2:	b2da      	uxtb	r2, r3
    a1f4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a1f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1fc:	701a      	strb	r2, [r3, #0]
    a1fe:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a202:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a206:	781a      	ldrb	r2, [r3, #0]
    a208:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a20c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a210:	781b      	ldrb	r3, [r3, #0]
    a212:	4413      	add	r3, r2
    a214:	b2da      	uxtb	r2, r3
    a216:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a21a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a21e:	701a      	strb	r2, [r3, #0]
    a220:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a224:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a228:	781b      	ldrb	r3, [r3, #0]
    a22a:	3301      	adds	r3, #1
    a22c:	b2da      	uxtb	r2, r3
    a22e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a232:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a236:	701a      	strb	r2, [r3, #0]
    a238:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a23c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a240:	781b      	ldrb	r3, [r3, #0]
    a242:	2bff      	cmp	r3, #255	; 0xff
    a244:	d105      	bne.n	a252 <send_desired+0xbae>
    a246:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a24a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a24e:	2200      	movs	r2, #0
    a250:	701a      	strb	r2, [r3, #0]
    a252:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a256:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a25a:	781b      	ldrb	r3, [r3, #0]
    a25c:	461a      	mov	r2, r3
    a25e:	f240 23b8 	movw	r3, #696	; 0x2b8
    a262:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a266:	7899      	ldrb	r1, [r3, #2]
    a268:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a26c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a270:	5499      	strb	r1, [r3, r2]
    a272:	4b20      	ldr	r3, [pc, #128]	; (a2f4 <send_desired+0xc50>)
    a274:	781a      	ldrb	r2, [r3, #0]
    a276:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a27a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a27e:	781b      	ldrb	r3, [r3, #0]
    a280:	4413      	add	r3, r2
    a282:	b2da      	uxtb	r2, r3
    a284:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a288:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a28c:	701a      	strb	r2, [r3, #0]
    a28e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a292:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a296:	781a      	ldrb	r2, [r3, #0]
    a298:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a29c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2a0:	781b      	ldrb	r3, [r3, #0]
    a2a2:	4413      	add	r3, r2
    a2a4:	b2da      	uxtb	r2, r3
    a2a6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a2aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2ae:	701a      	strb	r2, [r3, #0]
    a2b0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a2b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2b8:	781b      	ldrb	r3, [r3, #0]
    a2ba:	3301      	adds	r3, #1
    a2bc:	b2da      	uxtb	r2, r3
    a2be:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a2c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2c6:	701a      	strb	r2, [r3, #0]
    a2c8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a2cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2d0:	781b      	ldrb	r3, [r3, #0]
    a2d2:	2bff      	cmp	r3, #255	; 0xff
    a2d4:	d110      	bne.n	a2f8 <send_desired+0xc54>
    a2d6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a2da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2de:	2200      	movs	r2, #0
    a2e0:	701a      	strb	r2, [r3, #0]
    a2e2:	e009      	b.n	a2f8 <send_desired+0xc54>
    a2e4:	2000ae2d 	.word	0x2000ae2d
    a2e8:	2000ae2e 	.word	0x2000ae2e
    a2ec:	2000ae2f 	.word	0x2000ae2f
    a2f0:	200002b9 	.word	0x200002b9
    a2f4:	200002ba 	.word	0x200002ba
    a2f8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a2fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a300:	781b      	ldrb	r3, [r3, #0]
    a302:	461a      	mov	r2, r3
    a304:	f240 23b8 	movw	r3, #696	; 0x2b8
    a308:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a30c:	78d9      	ldrb	r1, [r3, #3]
    a30e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a312:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a316:	5499      	strb	r1, [r3, r2]
    a318:	4b79      	ldr	r3, [pc, #484]	; (a500 <send_desired+0xe5c>)
    a31a:	781a      	ldrb	r2, [r3, #0]
    a31c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a320:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a324:	781b      	ldrb	r3, [r3, #0]
    a326:	4413      	add	r3, r2
    a328:	b2da      	uxtb	r2, r3
    a32a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a32e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a332:	701a      	strb	r2, [r3, #0]
    a334:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a338:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a33c:	781a      	ldrb	r2, [r3, #0]
    a33e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a342:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a346:	781b      	ldrb	r3, [r3, #0]
    a348:	4413      	add	r3, r2
    a34a:	b2da      	uxtb	r2, r3
    a34c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a350:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a354:	701a      	strb	r2, [r3, #0]
    a356:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a35a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a35e:	781b      	ldrb	r3, [r3, #0]
    a360:	3301      	adds	r3, #1
    a362:	b2da      	uxtb	r2, r3
    a364:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a368:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a36c:	701a      	strb	r2, [r3, #0]
    a36e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a372:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a376:	781b      	ldrb	r3, [r3, #0]
    a378:	2bff      	cmp	r3, #255	; 0xff
    a37a:	d105      	bne.n	a388 <send_desired+0xce4>
    a37c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a380:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a384:	2200      	movs	r2, #0
    a386:	701a      	strb	r2, [r3, #0]
    a388:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a38c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a390:	781b      	ldrb	r3, [r3, #0]
    a392:	461a      	mov	r2, r3
    a394:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a398:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a39c:	7819      	ldrb	r1, [r3, #0]
    a39e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a3a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3a6:	5499      	strb	r1, [r3, r2]
    a3a8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a3ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3b0:	781b      	ldrb	r3, [r3, #0]
    a3b2:	3301      	adds	r3, #1
    a3b4:	b2da      	uxtb	r2, r3
    a3b6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a3ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3be:	701a      	strb	r2, [r3, #0]
    a3c0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a3c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3c8:	781b      	ldrb	r3, [r3, #0]
    a3ca:	2bff      	cmp	r3, #255	; 0xff
    a3cc:	d105      	bne.n	a3da <send_desired+0xd36>
    a3ce:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a3d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3d6:	2200      	movs	r2, #0
    a3d8:	701a      	strb	r2, [r3, #0]
    a3da:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a3de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3e2:	781b      	ldrb	r3, [r3, #0]
    a3e4:	461a      	mov	r2, r3
    a3e6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a3ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3ee:	7819      	ldrb	r1, [r3, #0]
    a3f0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a3f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3f8:	5499      	strb	r1, [r3, r2]
    a3fa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a3fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a402:	781b      	ldrb	r3, [r3, #0]
    a404:	3301      	adds	r3, #1
    a406:	b2da      	uxtb	r2, r3
    a408:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a40c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a410:	701a      	strb	r2, [r3, #0]
    a412:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a416:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a41a:	781b      	ldrb	r3, [r3, #0]
    a41c:	2bff      	cmp	r3, #255	; 0xff
    a41e:	d105      	bne.n	a42c <send_desired+0xd88>
    a420:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a424:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a428:	2200      	movs	r2, #0
    a42a:	701a      	strb	r2, [r3, #0]
    a42c:	f242 0339 	movw	r3, #8249	; 0x2039
    a430:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a434:	781b      	ldrb	r3, [r3, #0]
    a436:	b2db      	uxtb	r3, r3
    a438:	f003 0310 	and.w	r3, r3, #16
    a43c:	2b00      	cmp	r3, #0
    a43e:	d15a      	bne.n	a4f6 <send_desired+0xe52>
    a440:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    a444:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a448:	781b      	ldrb	r3, [r3, #0]
    a44a:	b2db      	uxtb	r3, r3
    a44c:	461a      	mov	r2, r3
    a44e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a452:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a456:	5c9a      	ldrb	r2, [r3, r2]
    a458:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    a45c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a460:	701a      	strb	r2, [r3, #0]
    a462:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    a466:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a46a:	2200      	movs	r2, #0
    a46c:	701a      	strb	r2, [r3, #0]
    a46e:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    a472:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a476:	781b      	ldrb	r3, [r3, #0]
    a478:	b2db      	uxtb	r3, r3
    a47a:	3301      	adds	r3, #1
    a47c:	b2da      	uxtb	r2, r3
    a47e:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    a482:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a486:	701a      	strb	r2, [r3, #0]
    a488:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    a48c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a490:	781b      	ldrb	r3, [r3, #0]
    a492:	b2db      	uxtb	r3, r3
    a494:	2bff      	cmp	r3, #255	; 0xff
    a496:	d105      	bne.n	a4a4 <send_desired+0xe00>
    a498:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    a49c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4a0:	2200      	movs	r2, #0
    a4a2:	701a      	strb	r2, [r3, #0]
    a4a4:	f242 0338 	movw	r3, #8248	; 0x2038
    a4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4ac:	f242 0238 	movw	r2, #8248	; 0x2038
    a4b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a4b4:	7812      	ldrb	r2, [r2, #0]
    a4b6:	b2d2      	uxtb	r2, r2
    a4b8:	f042 0201 	orr.w	r2, r2, #1
    a4bc:	b2d2      	uxtb	r2, r2
    a4be:	701a      	strb	r2, [r3, #0]
    a4c0:	f242 0339 	movw	r3, #8249	; 0x2039
    a4c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4c8:	f242 0239 	movw	r2, #8249	; 0x2039
    a4cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a4d0:	7812      	ldrb	r2, [r2, #0]
    a4d2:	b2d2      	uxtb	r2, r2
    a4d4:	f042 0210 	orr.w	r2, r2, #16
    a4d8:	b2d2      	uxtb	r2, r2
    a4da:	701a      	strb	r2, [r3, #0]
    a4dc:	e00b      	b.n	a4f6 <send_desired+0xe52>
    a4de:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    a4e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4e6:	781b      	ldrb	r3, [r3, #0]
    a4e8:	3301      	adds	r3, #1
    a4ea:	b2da      	uxtb	r2, r3
    a4ec:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    a4f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4f4:	701a      	strb	r2, [r3, #0]
}
    a4f6:	46bd      	mov	sp, r7
    a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a4fc:	4770      	bx	lr
    a4fe:	bf00      	nop
    a500:	200002bb 	.word	0x200002bb

0000a504 <send_bat>:
void send_bat(void){  //2000ms
    a504:	b480      	push	{r7}
    a506:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 8) PERIODIC_SEND_BAT();}
    a508:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    a50c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a510:	781a      	ldrb	r2, [r3, #0]
    a512:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    a516:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    a51a:	fba3 1302 	umull	r1, r3, r3, r2
    a51e:	0919      	lsrs	r1, r3, #4
    a520:	460b      	mov	r3, r1
    a522:	009b      	lsls	r3, r3, #2
    a524:	440b      	add	r3, r1
    a526:	009b      	lsls	r3, r3, #2
    a528:	1ad3      	subs	r3, r2, r3
    a52a:	b2db      	uxtb	r3, r3
    a52c:	2b08      	cmp	r3, #8
    a52e:	f040 839a 	bne.w	ac66 <send_bat+0x762>
    a532:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a53a:	781a      	ldrb	r2, [r3, #0]
    a53c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    a540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a544:	781b      	ldrb	r3, [r3, #0]
    a546:	b2db      	uxtb	r3, r3
    a548:	429a      	cmp	r2, r3
    a54a:	d313      	bcc.n	a574 <send_bat+0x70>
    a54c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    a550:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a554:	781b      	ldrb	r3, [r3, #0]
    a556:	b2db      	uxtb	r3, r3
    a558:	461a      	mov	r2, r3
    a55a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a55e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a562:	781b      	ldrb	r3, [r3, #0]
    a564:	1ad3      	subs	r3, r2, r3
    a566:	33ff      	adds	r3, #255	; 0xff
    a568:	2b0c      	cmp	r3, #12
    a56a:	bfd4      	ite	le
    a56c:	2300      	movle	r3, #0
    a56e:	2301      	movgt	r3, #1
    a570:	b2db      	uxtb	r3, r3
    a572:	e011      	b.n	a598 <send_bat+0x94>
    a574:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    a578:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a57c:	781b      	ldrb	r3, [r3, #0]
    a57e:	b2db      	uxtb	r3, r3
    a580:	461a      	mov	r2, r3
    a582:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a586:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a58a:	781b      	ldrb	r3, [r3, #0]
    a58c:	1ad3      	subs	r3, r2, r3
    a58e:	2b0c      	cmp	r3, #12
    a590:	bfd4      	ite	le
    a592:	2300      	movle	r3, #0
    a594:	2301      	movgt	r3, #1
    a596:	b2db      	uxtb	r3, r3
    a598:	2b00      	cmp	r3, #0
    a59a:	f000 8358 	beq.w	ac4e <send_bat+0x74a>
    a59e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a5a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5a6:	781b      	ldrb	r3, [r3, #0]
    a5a8:	461a      	mov	r2, r3
    a5aa:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a5ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5b2:	2105      	movs	r1, #5
    a5b4:	5499      	strb	r1, [r3, r2]
    a5b6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a5ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5be:	781b      	ldrb	r3, [r3, #0]
    a5c0:	3301      	adds	r3, #1
    a5c2:	b2da      	uxtb	r2, r3
    a5c4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a5c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5cc:	701a      	strb	r2, [r3, #0]
    a5ce:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a5d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5d6:	781b      	ldrb	r3, [r3, #0]
    a5d8:	2bff      	cmp	r3, #255	; 0xff
    a5da:	d105      	bne.n	a5e8 <send_bat+0xe4>
    a5dc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a5e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5e4:	2200      	movs	r2, #0
    a5e6:	701a      	strb	r2, [r3, #0]
    a5e8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a5ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5f0:	781b      	ldrb	r3, [r3, #0]
    a5f2:	461a      	mov	r2, r3
    a5f4:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a5f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5fc:	210c      	movs	r1, #12
    a5fe:	5499      	strb	r1, [r3, r2]
    a600:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a604:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a608:	781b      	ldrb	r3, [r3, #0]
    a60a:	3301      	adds	r3, #1
    a60c:	b2da      	uxtb	r2, r3
    a60e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a612:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a616:	701a      	strb	r2, [r3, #0]
    a618:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a61c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a620:	781b      	ldrb	r3, [r3, #0]
    a622:	2bff      	cmp	r3, #255	; 0xff
    a624:	d105      	bne.n	a632 <send_bat+0x12e>
    a626:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a62a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a62e:	2200      	movs	r2, #0
    a630:	701a      	strb	r2, [r3, #0]
    a632:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a636:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a63a:	220c      	movs	r2, #12
    a63c:	701a      	strb	r2, [r3, #0]
    a63e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a642:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a646:	220c      	movs	r2, #12
    a648:	701a      	strb	r2, [r3, #0]
    a64a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a64e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a652:	781b      	ldrb	r3, [r3, #0]
    a654:	461a      	mov	r2, r3
    a656:	f64a 239a 	movw	r3, #43674	; 0xaa9a
    a65a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a65e:	7819      	ldrb	r1, [r3, #0]
    a660:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a664:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a668:	5499      	strb	r1, [r3, r2]
    a66a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a66e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a672:	781a      	ldrb	r2, [r3, #0]
    a674:	f64a 239a 	movw	r3, #43674	; 0xaa9a
    a678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a67c:	781b      	ldrb	r3, [r3, #0]
    a67e:	4413      	add	r3, r2
    a680:	b2da      	uxtb	r2, r3
    a682:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a686:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a68a:	701a      	strb	r2, [r3, #0]
    a68c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a690:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a694:	781a      	ldrb	r2, [r3, #0]
    a696:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a69a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a69e:	781b      	ldrb	r3, [r3, #0]
    a6a0:	4413      	add	r3, r2
    a6a2:	b2da      	uxtb	r2, r3
    a6a4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a6a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6ac:	701a      	strb	r2, [r3, #0]
    a6ae:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a6b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6b6:	781b      	ldrb	r3, [r3, #0]
    a6b8:	3301      	adds	r3, #1
    a6ba:	b2da      	uxtb	r2, r3
    a6bc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a6c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6c4:	701a      	strb	r2, [r3, #0]
    a6c6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a6ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6ce:	781b      	ldrb	r3, [r3, #0]
    a6d0:	2bff      	cmp	r3, #255	; 0xff
    a6d2:	d105      	bne.n	a6e0 <send_bat+0x1dc>
    a6d4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a6d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6dc:	2200      	movs	r2, #0
    a6de:	701a      	strb	r2, [r3, #0]
    a6e0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a6e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6e8:	781b      	ldrb	r3, [r3, #0]
    a6ea:	461a      	mov	r2, r3
    a6ec:	f24b 0394 	movw	r3, #45204	; 0xb094
    a6f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6f4:	7819      	ldrb	r1, [r3, #0]
    a6f6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a6fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6fe:	5499      	strb	r1, [r3, r2]
    a700:	f24b 0394 	movw	r3, #45204	; 0xb094
    a704:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a708:	781a      	ldrb	r2, [r3, #0]
    a70a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a70e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a712:	781b      	ldrb	r3, [r3, #0]
    a714:	4413      	add	r3, r2
    a716:	b2da      	uxtb	r2, r3
    a718:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a71c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a720:	701a      	strb	r2, [r3, #0]
    a722:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a726:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a72a:	781a      	ldrb	r2, [r3, #0]
    a72c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a730:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a734:	781b      	ldrb	r3, [r3, #0]
    a736:	4413      	add	r3, r2
    a738:	b2da      	uxtb	r2, r3
    a73a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a73e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a742:	701a      	strb	r2, [r3, #0]
    a744:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a748:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a74c:	781b      	ldrb	r3, [r3, #0]
    a74e:	3301      	adds	r3, #1
    a750:	b2da      	uxtb	r2, r3
    a752:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a756:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a75a:	701a      	strb	r2, [r3, #0]
    a75c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a760:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a764:	781b      	ldrb	r3, [r3, #0]
    a766:	2bff      	cmp	r3, #255	; 0xff
    a768:	d105      	bne.n	a776 <send_bat+0x272>
    a76a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a76e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a772:	2200      	movs	r2, #0
    a774:	701a      	strb	r2, [r3, #0]
    a776:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a77a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a77e:	781b      	ldrb	r3, [r3, #0]
    a780:	461a      	mov	r2, r3
    a782:	f24b 0394 	movw	r3, #45204	; 0xb094
    a786:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a78a:	7859      	ldrb	r1, [r3, #1]
    a78c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a790:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a794:	5499      	strb	r1, [r3, r2]
    a796:	4bd5      	ldr	r3, [pc, #852]	; (aaec <send_bat+0x5e8>)
    a798:	781a      	ldrb	r2, [r3, #0]
    a79a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a79e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7a2:	781b      	ldrb	r3, [r3, #0]
    a7a4:	4413      	add	r3, r2
    a7a6:	b2da      	uxtb	r2, r3
    a7a8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a7ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7b0:	701a      	strb	r2, [r3, #0]
    a7b2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a7b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7ba:	781a      	ldrb	r2, [r3, #0]
    a7bc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a7c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7c4:	781b      	ldrb	r3, [r3, #0]
    a7c6:	4413      	add	r3, r2
    a7c8:	b2da      	uxtb	r2, r3
    a7ca:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a7ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7d2:	701a      	strb	r2, [r3, #0]
    a7d4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a7d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7dc:	781b      	ldrb	r3, [r3, #0]
    a7de:	3301      	adds	r3, #1
    a7e0:	b2da      	uxtb	r2, r3
    a7e2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a7e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7ea:	701a      	strb	r2, [r3, #0]
    a7ec:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a7f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7f4:	781b      	ldrb	r3, [r3, #0]
    a7f6:	2bff      	cmp	r3, #255	; 0xff
    a7f8:	d105      	bne.n	a806 <send_bat+0x302>
    a7fa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a7fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a802:	2200      	movs	r2, #0
    a804:	701a      	strb	r2, [r3, #0]
    a806:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a80a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a80e:	781b      	ldrb	r3, [r3, #0]
    a810:	461a      	mov	r2, r3
    a812:	f64a 239d 	movw	r3, #43677	; 0xaa9d
    a816:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a81a:	7819      	ldrb	r1, [r3, #0]
    a81c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a820:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a824:	5499      	strb	r1, [r3, r2]
    a826:	f64a 239d 	movw	r3, #43677	; 0xaa9d
    a82a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a82e:	781a      	ldrb	r2, [r3, #0]
    a830:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a834:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a838:	781b      	ldrb	r3, [r3, #0]
    a83a:	4413      	add	r3, r2
    a83c:	b2da      	uxtb	r2, r3
    a83e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a842:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a846:	701a      	strb	r2, [r3, #0]
    a848:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a84c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a850:	781a      	ldrb	r2, [r3, #0]
    a852:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a856:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a85a:	781b      	ldrb	r3, [r3, #0]
    a85c:	4413      	add	r3, r2
    a85e:	b2da      	uxtb	r2, r3
    a860:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a864:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a868:	701a      	strb	r2, [r3, #0]
    a86a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a86e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a872:	781b      	ldrb	r3, [r3, #0]
    a874:	3301      	adds	r3, #1
    a876:	b2da      	uxtb	r2, r3
    a878:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a87c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a880:	701a      	strb	r2, [r3, #0]
    a882:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a886:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a88a:	781b      	ldrb	r3, [r3, #0]
    a88c:	2bff      	cmp	r3, #255	; 0xff
    a88e:	d105      	bne.n	a89c <send_bat+0x398>
    a890:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a894:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a898:	2200      	movs	r2, #0
    a89a:	701a      	strb	r2, [r3, #0]
    a89c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a8a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8a4:	781b      	ldrb	r3, [r3, #0]
    a8a6:	461a      	mov	r2, r3
    a8a8:	f64a 631e 	movw	r3, #44574	; 0xae1e
    a8ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8b0:	7819      	ldrb	r1, [r3, #0]
    a8b2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a8b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8ba:	5499      	strb	r1, [r3, r2]
    a8bc:	f64a 631e 	movw	r3, #44574	; 0xae1e
    a8c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8c4:	781a      	ldrb	r2, [r3, #0]
    a8c6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a8ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8ce:	781b      	ldrb	r3, [r3, #0]
    a8d0:	4413      	add	r3, r2
    a8d2:	b2da      	uxtb	r2, r3
    a8d4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a8d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8dc:	701a      	strb	r2, [r3, #0]
    a8de:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a8e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8e6:	781a      	ldrb	r2, [r3, #0]
    a8e8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a8ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8f0:	781b      	ldrb	r3, [r3, #0]
    a8f2:	4413      	add	r3, r2
    a8f4:	b2da      	uxtb	r2, r3
    a8f6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a8fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8fe:	701a      	strb	r2, [r3, #0]
    a900:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a904:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a908:	781b      	ldrb	r3, [r3, #0]
    a90a:	3301      	adds	r3, #1
    a90c:	b2da      	uxtb	r2, r3
    a90e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a916:	701a      	strb	r2, [r3, #0]
    a918:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a91c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a920:	781b      	ldrb	r3, [r3, #0]
    a922:	2bff      	cmp	r3, #255	; 0xff
    a924:	d105      	bne.n	a932 <send_bat+0x42e>
    a926:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a92a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a92e:	2200      	movs	r2, #0
    a930:	701a      	strb	r2, [r3, #0]
    a932:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a936:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a93a:	781b      	ldrb	r3, [r3, #0]
    a93c:	461a      	mov	r2, r3
    a93e:	f64a 631e 	movw	r3, #44574	; 0xae1e
    a942:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a946:	7859      	ldrb	r1, [r3, #1]
    a948:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a94c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a950:	5499      	strb	r1, [r3, r2]
    a952:	4b67      	ldr	r3, [pc, #412]	; (aaf0 <send_bat+0x5ec>)
    a954:	781a      	ldrb	r2, [r3, #0]
    a956:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a95a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a95e:	781b      	ldrb	r3, [r3, #0]
    a960:	4413      	add	r3, r2
    a962:	b2da      	uxtb	r2, r3
    a964:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a968:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a96c:	701a      	strb	r2, [r3, #0]
    a96e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a972:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a976:	781a      	ldrb	r2, [r3, #0]
    a978:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a97c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a980:	781b      	ldrb	r3, [r3, #0]
    a982:	4413      	add	r3, r2
    a984:	b2da      	uxtb	r2, r3
    a986:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a98a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a98e:	701a      	strb	r2, [r3, #0]
    a990:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a998:	781b      	ldrb	r3, [r3, #0]
    a99a:	3301      	adds	r3, #1
    a99c:	b2da      	uxtb	r2, r3
    a99e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a9a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9a6:	701a      	strb	r2, [r3, #0]
    a9a8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a9ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9b0:	781b      	ldrb	r3, [r3, #0]
    a9b2:	2bff      	cmp	r3, #255	; 0xff
    a9b4:	d105      	bne.n	a9c2 <send_bat+0x4be>
    a9b6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a9ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9be:	2200      	movs	r2, #0
    a9c0:	701a      	strb	r2, [r3, #0]
    a9c2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a9c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9ca:	781b      	ldrb	r3, [r3, #0]
    a9cc:	461a      	mov	r2, r3
    a9ce:	f64a 631c 	movw	r3, #44572	; 0xae1c
    a9d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9d6:	7819      	ldrb	r1, [r3, #0]
    a9d8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a9dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9e0:	5499      	strb	r1, [r3, r2]
    a9e2:	f64a 631c 	movw	r3, #44572	; 0xae1c
    a9e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9ea:	781a      	ldrb	r2, [r3, #0]
    a9ec:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a9f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9f4:	781b      	ldrb	r3, [r3, #0]
    a9f6:	4413      	add	r3, r2
    a9f8:	b2da      	uxtb	r2, r3
    a9fa:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a9fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa02:	701a      	strb	r2, [r3, #0]
    aa04:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    aa08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa0c:	781a      	ldrb	r2, [r3, #0]
    aa0e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    aa12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa16:	781b      	ldrb	r3, [r3, #0]
    aa18:	4413      	add	r3, r2
    aa1a:	b2da      	uxtb	r2, r3
    aa1c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    aa20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa24:	701a      	strb	r2, [r3, #0]
    aa26:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aa2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa2e:	781b      	ldrb	r3, [r3, #0]
    aa30:	3301      	adds	r3, #1
    aa32:	b2da      	uxtb	r2, r3
    aa34:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aa38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa3c:	701a      	strb	r2, [r3, #0]
    aa3e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aa42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa46:	781b      	ldrb	r3, [r3, #0]
    aa48:	2bff      	cmp	r3, #255	; 0xff
    aa4a:	d105      	bne.n	aa58 <send_bat+0x554>
    aa4c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aa50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa54:	2200      	movs	r2, #0
    aa56:	701a      	strb	r2, [r3, #0]
    aa58:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aa5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa60:	781b      	ldrb	r3, [r3, #0]
    aa62:	461a      	mov	r2, r3
    aa64:	f64a 631c 	movw	r3, #44572	; 0xae1c
    aa68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa6c:	7859      	ldrb	r1, [r3, #1]
    aa6e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    aa72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa76:	5499      	strb	r1, [r3, r2]
    aa78:	4b1e      	ldr	r3, [pc, #120]	; (aaf4 <send_bat+0x5f0>)
    aa7a:	781a      	ldrb	r2, [r3, #0]
    aa7c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    aa80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa84:	781b      	ldrb	r3, [r3, #0]
    aa86:	4413      	add	r3, r2
    aa88:	b2da      	uxtb	r2, r3
    aa8a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    aa8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa92:	701a      	strb	r2, [r3, #0]
    aa94:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    aa98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa9c:	781a      	ldrb	r2, [r3, #0]
    aa9e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    aaa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aaa6:	781b      	ldrb	r3, [r3, #0]
    aaa8:	4413      	add	r3, r2
    aaaa:	b2da      	uxtb	r2, r3
    aaac:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    aab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aab4:	701a      	strb	r2, [r3, #0]
    aab6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aaba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aabe:	781b      	ldrb	r3, [r3, #0]
    aac0:	3301      	adds	r3, #1
    aac2:	b2da      	uxtb	r2, r3
    aac4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aacc:	701a      	strb	r2, [r3, #0]
    aace:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aad6:	781b      	ldrb	r3, [r3, #0]
    aad8:	2bff      	cmp	r3, #255	; 0xff
    aada:	d10d      	bne.n	aaf8 <send_bat+0x5f4>
    aadc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aae4:	2200      	movs	r2, #0
    aae6:	701a      	strb	r2, [r3, #0]
    aae8:	e006      	b.n	aaf8 <send_bat+0x5f4>
    aaea:	bf00      	nop
    aaec:	2000b095 	.word	0x2000b095
    aaf0:	2000ae1f 	.word	0x2000ae1f
    aaf4:	2000ae1d 	.word	0x2000ae1d
    aaf8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aafc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab00:	781b      	ldrb	r3, [r3, #0]
    ab02:	461a      	mov	r2, r3
    ab04:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ab08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab0c:	7819      	ldrb	r1, [r3, #0]
    ab0e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ab12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab16:	5499      	strb	r1, [r3, r2]
    ab18:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ab1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab20:	781b      	ldrb	r3, [r3, #0]
    ab22:	3301      	adds	r3, #1
    ab24:	b2da      	uxtb	r2, r3
    ab26:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ab2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab2e:	701a      	strb	r2, [r3, #0]
    ab30:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ab34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab38:	781b      	ldrb	r3, [r3, #0]
    ab3a:	2bff      	cmp	r3, #255	; 0xff
    ab3c:	d105      	bne.n	ab4a <send_bat+0x646>
    ab3e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ab42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab46:	2200      	movs	r2, #0
    ab48:	701a      	strb	r2, [r3, #0]
    ab4a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ab4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab52:	781b      	ldrb	r3, [r3, #0]
    ab54:	461a      	mov	r2, r3
    ab56:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ab5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab5e:	7819      	ldrb	r1, [r3, #0]
    ab60:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ab64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab68:	5499      	strb	r1, [r3, r2]
    ab6a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ab6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab72:	781b      	ldrb	r3, [r3, #0]
    ab74:	3301      	adds	r3, #1
    ab76:	b2da      	uxtb	r2, r3
    ab78:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ab7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab80:	701a      	strb	r2, [r3, #0]
    ab82:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ab86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab8a:	781b      	ldrb	r3, [r3, #0]
    ab8c:	2bff      	cmp	r3, #255	; 0xff
    ab8e:	d105      	bne.n	ab9c <send_bat+0x698>
    ab90:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ab94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab98:	2200      	movs	r2, #0
    ab9a:	701a      	strb	r2, [r3, #0]
    ab9c:	f242 0339 	movw	r3, #8249	; 0x2039
    aba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aba4:	781b      	ldrb	r3, [r3, #0]
    aba6:	b2db      	uxtb	r3, r3
    aba8:	f003 0310 	and.w	r3, r3, #16
    abac:	2b00      	cmp	r3, #0
    abae:	d15a      	bne.n	ac66 <send_bat+0x762>
    abb0:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    abb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abb8:	781b      	ldrb	r3, [r3, #0]
    abba:	b2db      	uxtb	r3, r3
    abbc:	461a      	mov	r2, r3
    abbe:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    abc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abc6:	5c9a      	ldrb	r2, [r3, r2]
    abc8:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    abcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abd0:	701a      	strb	r2, [r3, #0]
    abd2:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    abd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abda:	2200      	movs	r2, #0
    abdc:	701a      	strb	r2, [r3, #0]
    abde:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    abe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abe6:	781b      	ldrb	r3, [r3, #0]
    abe8:	b2db      	uxtb	r3, r3
    abea:	3301      	adds	r3, #1
    abec:	b2da      	uxtb	r2, r3
    abee:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    abf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abf6:	701a      	strb	r2, [r3, #0]
    abf8:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    abfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac00:	781b      	ldrb	r3, [r3, #0]
    ac02:	b2db      	uxtb	r3, r3
    ac04:	2bff      	cmp	r3, #255	; 0xff
    ac06:	d105      	bne.n	ac14 <send_bat+0x710>
    ac08:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    ac0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac10:	2200      	movs	r2, #0
    ac12:	701a      	strb	r2, [r3, #0]
    ac14:	f242 0338 	movw	r3, #8248	; 0x2038
    ac18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac1c:	f242 0238 	movw	r2, #8248	; 0x2038
    ac20:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ac24:	7812      	ldrb	r2, [r2, #0]
    ac26:	b2d2      	uxtb	r2, r2
    ac28:	f042 0201 	orr.w	r2, r2, #1
    ac2c:	b2d2      	uxtb	r2, r2
    ac2e:	701a      	strb	r2, [r3, #0]
    ac30:	f242 0339 	movw	r3, #8249	; 0x2039
    ac34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac38:	f242 0239 	movw	r2, #8249	; 0x2039
    ac3c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ac40:	7812      	ldrb	r2, [r2, #0]
    ac42:	b2d2      	uxtb	r2, r2
    ac44:	f042 0210 	orr.w	r2, r2, #16
    ac48:	b2d2      	uxtb	r2, r2
    ac4a:	701a      	strb	r2, [r3, #0]
    ac4c:	e00b      	b.n	ac66 <send_bat+0x762>
    ac4e:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    ac52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac56:	781b      	ldrb	r3, [r3, #0]
    ac58:	3301      	adds	r3, #1
    ac5a:	b2da      	uxtb	r2, r3
    ac5c:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    ac60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac64:	701a      	strb	r2, [r3, #0]
}
    ac66:	46bd      	mov	sp, r7
    ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac6c:	4770      	bx	lr
    ac6e:	bf00      	nop

0000ac70 <send_climb>:
void send_climb(void){  //2000ms
    ac70:	b480      	push	{r7}
    ac72:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 18) PERIODIC_SEND_CLIMB_PID();}
    ac74:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    ac78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac7c:	781a      	ldrb	r2, [r3, #0]
    ac7e:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    ac82:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    ac86:	fba3 1302 	umull	r1, r3, r3, r2
    ac8a:	0919      	lsrs	r1, r3, #4
    ac8c:	460b      	mov	r3, r1
    ac8e:	009b      	lsls	r3, r3, #2
    ac90:	440b      	add	r3, r1
    ac92:	009b      	lsls	r3, r3, #2
    ac94:	1ad3      	subs	r3, r2, r3
    ac96:	b2db      	uxtb	r3, r3
    ac98:	2b12      	cmp	r3, #18
    ac9a:	f040 8554 	bne.w	b746 <send_climb+0xad6>
    ac9e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aca6:	781a      	ldrb	r2, [r3, #0]
    aca8:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    acac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acb0:	781b      	ldrb	r3, [r3, #0]
    acb2:	b2db      	uxtb	r3, r3
    acb4:	429a      	cmp	r2, r3
    acb6:	d313      	bcc.n	ace0 <send_climb+0x70>
    acb8:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    acbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acc0:	781b      	ldrb	r3, [r3, #0]
    acc2:	b2db      	uxtb	r3, r3
    acc4:	461a      	mov	r2, r3
    acc6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    acca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acce:	781b      	ldrb	r3, [r3, #0]
    acd0:	1ad3      	subs	r3, r2, r3
    acd2:	33ff      	adds	r3, #255	; 0xff
    acd4:	2b12      	cmp	r3, #18
    acd6:	bfd4      	ite	le
    acd8:	2300      	movle	r3, #0
    acda:	2301      	movgt	r3, #1
    acdc:	b2db      	uxtb	r3, r3
    acde:	e011      	b.n	ad04 <send_climb+0x94>
    ace0:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    ace4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ace8:	781b      	ldrb	r3, [r3, #0]
    acea:	b2db      	uxtb	r3, r3
    acec:	461a      	mov	r2, r3
    acee:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    acf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acf6:	781b      	ldrb	r3, [r3, #0]
    acf8:	1ad3      	subs	r3, r2, r3
    acfa:	2b12      	cmp	r3, #18
    acfc:	bfd4      	ite	le
    acfe:	2300      	movle	r3, #0
    ad00:	2301      	movgt	r3, #1
    ad02:	b2db      	uxtb	r3, r3
    ad04:	2b00      	cmp	r3, #0
    ad06:	f000 8512 	beq.w	b72e <send_climb+0xabe>
    ad0a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ad0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad12:	781b      	ldrb	r3, [r3, #0]
    ad14:	461a      	mov	r2, r3
    ad16:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ad1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad1e:	2105      	movs	r1, #5
    ad20:	5499      	strb	r1, [r3, r2]
    ad22:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ad26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad2a:	781b      	ldrb	r3, [r3, #0]
    ad2c:	3301      	adds	r3, #1
    ad2e:	b2da      	uxtb	r2, r3
    ad30:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ad34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad38:	701a      	strb	r2, [r3, #0]
    ad3a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ad3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad42:	781b      	ldrb	r3, [r3, #0]
    ad44:	2bff      	cmp	r3, #255	; 0xff
    ad46:	d105      	bne.n	ad54 <send_climb+0xe4>
    ad48:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ad4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad50:	2200      	movs	r2, #0
    ad52:	701a      	strb	r2, [r3, #0]
    ad54:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ad58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad5c:	781b      	ldrb	r3, [r3, #0]
    ad5e:	461a      	mov	r2, r3
    ad60:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ad64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad68:	210e      	movs	r1, #14
    ad6a:	5499      	strb	r1, [r3, r2]
    ad6c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ad70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad74:	781b      	ldrb	r3, [r3, #0]
    ad76:	3301      	adds	r3, #1
    ad78:	b2da      	uxtb	r2, r3
    ad7a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ad7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad82:	701a      	strb	r2, [r3, #0]
    ad84:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ad88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad8c:	781b      	ldrb	r3, [r3, #0]
    ad8e:	2bff      	cmp	r3, #255	; 0xff
    ad90:	d105      	bne.n	ad9e <send_climb+0x12e>
    ad92:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ad96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad9a:	2200      	movs	r2, #0
    ad9c:	701a      	strb	r2, [r3, #0]
    ad9e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ada2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ada6:	220e      	movs	r2, #14
    ada8:	701a      	strb	r2, [r3, #0]
    adaa:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    adae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adb2:	220e      	movs	r2, #14
    adb4:	701a      	strb	r2, [r3, #0]
    adb6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    adba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adbe:	781b      	ldrb	r3, [r3, #0]
    adc0:	461a      	mov	r2, r3
    adc2:	f64a 53e4 	movw	r3, #44516	; 0xade4
    adc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adca:	7819      	ldrb	r1, [r3, #0]
    adcc:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    add0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    add4:	5499      	strb	r1, [r3, r2]
    add6:	f64a 53e4 	movw	r3, #44516	; 0xade4
    adda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adde:	781a      	ldrb	r2, [r3, #0]
    ade0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ade4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ade8:	781b      	ldrb	r3, [r3, #0]
    adea:	4413      	add	r3, r2
    adec:	b2da      	uxtb	r2, r3
    adee:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    adf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adf6:	701a      	strb	r2, [r3, #0]
    adf8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    adfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae00:	781a      	ldrb	r2, [r3, #0]
    ae02:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ae06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae0a:	781b      	ldrb	r3, [r3, #0]
    ae0c:	4413      	add	r3, r2
    ae0e:	b2da      	uxtb	r2, r3
    ae10:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ae14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae18:	701a      	strb	r2, [r3, #0]
    ae1a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ae1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae22:	781b      	ldrb	r3, [r3, #0]
    ae24:	3301      	adds	r3, #1
    ae26:	b2da      	uxtb	r2, r3
    ae28:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ae2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae30:	701a      	strb	r2, [r3, #0]
    ae32:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ae36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae3a:	781b      	ldrb	r3, [r3, #0]
    ae3c:	2bff      	cmp	r3, #255	; 0xff
    ae3e:	d105      	bne.n	ae4c <send_climb+0x1dc>
    ae40:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ae44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae48:	2200      	movs	r2, #0
    ae4a:	701a      	strb	r2, [r3, #0]
    ae4c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ae50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae54:	781b      	ldrb	r3, [r3, #0]
    ae56:	461a      	mov	r2, r3
    ae58:	f64a 53e4 	movw	r3, #44516	; 0xade4
    ae5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae60:	7859      	ldrb	r1, [r3, #1]
    ae62:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ae66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae6a:	5499      	strb	r1, [r3, r2]
    ae6c:	4bd3      	ldr	r3, [pc, #844]	; (b1bc <send_climb+0x54c>)
    ae6e:	781a      	ldrb	r2, [r3, #0]
    ae70:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ae74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae78:	781b      	ldrb	r3, [r3, #0]
    ae7a:	4413      	add	r3, r2
    ae7c:	b2da      	uxtb	r2, r3
    ae7e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ae82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae86:	701a      	strb	r2, [r3, #0]
    ae88:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ae8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae90:	781a      	ldrb	r2, [r3, #0]
    ae92:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ae96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae9a:	781b      	ldrb	r3, [r3, #0]
    ae9c:	4413      	add	r3, r2
    ae9e:	b2da      	uxtb	r2, r3
    aea0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    aea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aea8:	701a      	strb	r2, [r3, #0]
    aeaa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aeae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aeb2:	781b      	ldrb	r3, [r3, #0]
    aeb4:	3301      	adds	r3, #1
    aeb6:	b2da      	uxtb	r2, r3
    aeb8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aec0:	701a      	strb	r2, [r3, #0]
    aec2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aeca:	781b      	ldrb	r3, [r3, #0]
    aecc:	2bff      	cmp	r3, #255	; 0xff
    aece:	d105      	bne.n	aedc <send_climb+0x26c>
    aed0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aed8:	2200      	movs	r2, #0
    aeda:	701a      	strb	r2, [r3, #0]
    aedc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aee4:	781b      	ldrb	r3, [r3, #0]
    aee6:	461a      	mov	r2, r3
    aee8:	f64a 53f8 	movw	r3, #44536	; 0xadf8
    aeec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aef0:	7819      	ldrb	r1, [r3, #0]
    aef2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    aef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aefa:	5499      	strb	r1, [r3, r2]
    aefc:	f64a 53f8 	movw	r3, #44536	; 0xadf8
    af00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af04:	781a      	ldrb	r2, [r3, #0]
    af06:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    af0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af0e:	781b      	ldrb	r3, [r3, #0]
    af10:	4413      	add	r3, r2
    af12:	b2da      	uxtb	r2, r3
    af14:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    af18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af1c:	701a      	strb	r2, [r3, #0]
    af1e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    af22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af26:	781a      	ldrb	r2, [r3, #0]
    af28:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    af2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af30:	781b      	ldrb	r3, [r3, #0]
    af32:	4413      	add	r3, r2
    af34:	b2da      	uxtb	r2, r3
    af36:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    af3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af3e:	701a      	strb	r2, [r3, #0]
    af40:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    af44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af48:	781b      	ldrb	r3, [r3, #0]
    af4a:	3301      	adds	r3, #1
    af4c:	b2da      	uxtb	r2, r3
    af4e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    af52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af56:	701a      	strb	r2, [r3, #0]
    af58:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    af5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af60:	781b      	ldrb	r3, [r3, #0]
    af62:	2bff      	cmp	r3, #255	; 0xff
    af64:	d105      	bne.n	af72 <send_climb+0x302>
    af66:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    af6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af6e:	2200      	movs	r2, #0
    af70:	701a      	strb	r2, [r3, #0]
    af72:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    af76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af7a:	781b      	ldrb	r3, [r3, #0]
    af7c:	461a      	mov	r2, r3
    af7e:	f64a 53f8 	movw	r3, #44536	; 0xadf8
    af82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af86:	7859      	ldrb	r1, [r3, #1]
    af88:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    af8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af90:	5499      	strb	r1, [r3, r2]
    af92:	4b8b      	ldr	r3, [pc, #556]	; (b1c0 <send_climb+0x550>)
    af94:	781a      	ldrb	r2, [r3, #0]
    af96:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    af9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af9e:	781b      	ldrb	r3, [r3, #0]
    afa0:	4413      	add	r3, r2
    afa2:	b2da      	uxtb	r2, r3
    afa4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    afa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afac:	701a      	strb	r2, [r3, #0]
    afae:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    afb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afb6:	781a      	ldrb	r2, [r3, #0]
    afb8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    afbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afc0:	781b      	ldrb	r3, [r3, #0]
    afc2:	4413      	add	r3, r2
    afc4:	b2da      	uxtb	r2, r3
    afc6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    afca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afce:	701a      	strb	r2, [r3, #0]
    afd0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    afd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afd8:	781b      	ldrb	r3, [r3, #0]
    afda:	3301      	adds	r3, #1
    afdc:	b2da      	uxtb	r2, r3
    afde:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    afe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afe6:	701a      	strb	r2, [r3, #0]
    afe8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    afec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aff0:	781b      	ldrb	r3, [r3, #0]
    aff2:	2bff      	cmp	r3, #255	; 0xff
    aff4:	d105      	bne.n	b002 <send_climb+0x392>
    aff6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    affa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    affe:	2200      	movs	r2, #0
    b000:	701a      	strb	r2, [r3, #0]
    b002:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b006:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b00a:	781b      	ldrb	r3, [r3, #0]
    b00c:	461a      	mov	r2, r3
    b00e:	f64a 53f8 	movw	r3, #44536	; 0xadf8
    b012:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b016:	7899      	ldrb	r1, [r3, #2]
    b018:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b01c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b020:	5499      	strb	r1, [r3, r2]
    b022:	4b68      	ldr	r3, [pc, #416]	; (b1c4 <send_climb+0x554>)
    b024:	781a      	ldrb	r2, [r3, #0]
    b026:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b02a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b02e:	781b      	ldrb	r3, [r3, #0]
    b030:	4413      	add	r3, r2
    b032:	b2da      	uxtb	r2, r3
    b034:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b038:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b03c:	701a      	strb	r2, [r3, #0]
    b03e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b042:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b046:	781a      	ldrb	r2, [r3, #0]
    b048:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b04c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b050:	781b      	ldrb	r3, [r3, #0]
    b052:	4413      	add	r3, r2
    b054:	b2da      	uxtb	r2, r3
    b056:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b05a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b05e:	701a      	strb	r2, [r3, #0]
    b060:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b064:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b068:	781b      	ldrb	r3, [r3, #0]
    b06a:	3301      	adds	r3, #1
    b06c:	b2da      	uxtb	r2, r3
    b06e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b072:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b076:	701a      	strb	r2, [r3, #0]
    b078:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b07c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b080:	781b      	ldrb	r3, [r3, #0]
    b082:	2bff      	cmp	r3, #255	; 0xff
    b084:	d105      	bne.n	b092 <send_climb+0x422>
    b086:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b08a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b08e:	2200      	movs	r2, #0
    b090:	701a      	strb	r2, [r3, #0]
    b092:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b096:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b09a:	781b      	ldrb	r3, [r3, #0]
    b09c:	461a      	mov	r2, r3
    b09e:	f64a 53f8 	movw	r3, #44536	; 0xadf8
    b0a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0a6:	78d9      	ldrb	r1, [r3, #3]
    b0a8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b0ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0b0:	5499      	strb	r1, [r3, r2]
    b0b2:	4b45      	ldr	r3, [pc, #276]	; (b1c8 <send_climb+0x558>)
    b0b4:	781a      	ldrb	r2, [r3, #0]
    b0b6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b0ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0be:	781b      	ldrb	r3, [r3, #0]
    b0c0:	4413      	add	r3, r2
    b0c2:	b2da      	uxtb	r2, r3
    b0c4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b0c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0cc:	701a      	strb	r2, [r3, #0]
    b0ce:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b0d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0d6:	781a      	ldrb	r2, [r3, #0]
    b0d8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b0dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0e0:	781b      	ldrb	r3, [r3, #0]
    b0e2:	4413      	add	r3, r2
    b0e4:	b2da      	uxtb	r2, r3
    b0e6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b0ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0ee:	701a      	strb	r2, [r3, #0]
    b0f0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b0f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0f8:	781b      	ldrb	r3, [r3, #0]
    b0fa:	3301      	adds	r3, #1
    b0fc:	b2da      	uxtb	r2, r3
    b0fe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b102:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b106:	701a      	strb	r2, [r3, #0]
    b108:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b10c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b110:	781b      	ldrb	r3, [r3, #0]
    b112:	2bff      	cmp	r3, #255	; 0xff
    b114:	d105      	bne.n	b122 <send_climb+0x4b2>
    b116:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b11a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b11e:	2200      	movs	r2, #0
    b120:	701a      	strb	r2, [r3, #0]
    b122:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b126:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b12a:	781b      	ldrb	r3, [r3, #0]
    b12c:	461a      	mov	r2, r3
    b12e:	f64a 6300 	movw	r3, #44544	; 0xae00
    b132:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b136:	7819      	ldrb	r1, [r3, #0]
    b138:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b13c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b140:	5499      	strb	r1, [r3, r2]
    b142:	f64a 6300 	movw	r3, #44544	; 0xae00
    b146:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b14a:	781a      	ldrb	r2, [r3, #0]
    b14c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b150:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b154:	781b      	ldrb	r3, [r3, #0]
    b156:	4413      	add	r3, r2
    b158:	b2da      	uxtb	r2, r3
    b15a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b15e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b162:	701a      	strb	r2, [r3, #0]
    b164:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b168:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b16c:	781a      	ldrb	r2, [r3, #0]
    b16e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b172:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b176:	781b      	ldrb	r3, [r3, #0]
    b178:	4413      	add	r3, r2
    b17a:	b2da      	uxtb	r2, r3
    b17c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b180:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b184:	701a      	strb	r2, [r3, #0]
    b186:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b18a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b18e:	781b      	ldrb	r3, [r3, #0]
    b190:	3301      	adds	r3, #1
    b192:	b2da      	uxtb	r2, r3
    b194:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b198:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b19c:	701a      	strb	r2, [r3, #0]
    b19e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b1a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1a6:	781b      	ldrb	r3, [r3, #0]
    b1a8:	2bff      	cmp	r3, #255	; 0xff
    b1aa:	d10f      	bne.n	b1cc <send_climb+0x55c>
    b1ac:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b1b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1b4:	2200      	movs	r2, #0
    b1b6:	701a      	strb	r2, [r3, #0]
    b1b8:	e008      	b.n	b1cc <send_climb+0x55c>
    b1ba:	bf00      	nop
    b1bc:	2000ade5 	.word	0x2000ade5
    b1c0:	2000adf9 	.word	0x2000adf9
    b1c4:	2000adfa 	.word	0x2000adfa
    b1c8:	2000adfb 	.word	0x2000adfb
    b1cc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b1d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1d4:	781b      	ldrb	r3, [r3, #0]
    b1d6:	461a      	mov	r2, r3
    b1d8:	f64a 6300 	movw	r3, #44544	; 0xae00
    b1dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1e0:	7859      	ldrb	r1, [r3, #1]
    b1e2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b1e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1ea:	5499      	strb	r1, [r3, r2]
    b1ec:	4bd1      	ldr	r3, [pc, #836]	; (b534 <send_climb+0x8c4>)
    b1ee:	781a      	ldrb	r2, [r3, #0]
    b1f0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b1f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1f8:	781b      	ldrb	r3, [r3, #0]
    b1fa:	4413      	add	r3, r2
    b1fc:	b2da      	uxtb	r2, r3
    b1fe:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b202:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b206:	701a      	strb	r2, [r3, #0]
    b208:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b20c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b210:	781a      	ldrb	r2, [r3, #0]
    b212:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b216:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b21a:	781b      	ldrb	r3, [r3, #0]
    b21c:	4413      	add	r3, r2
    b21e:	b2da      	uxtb	r2, r3
    b220:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b224:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b228:	701a      	strb	r2, [r3, #0]
    b22a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b22e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b232:	781b      	ldrb	r3, [r3, #0]
    b234:	3301      	adds	r3, #1
    b236:	b2da      	uxtb	r2, r3
    b238:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b23c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b240:	701a      	strb	r2, [r3, #0]
    b242:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b246:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b24a:	781b      	ldrb	r3, [r3, #0]
    b24c:	2bff      	cmp	r3, #255	; 0xff
    b24e:	d105      	bne.n	b25c <send_climb+0x5ec>
    b250:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b254:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b258:	2200      	movs	r2, #0
    b25a:	701a      	strb	r2, [r3, #0]
    b25c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b260:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b264:	781b      	ldrb	r3, [r3, #0]
    b266:	461a      	mov	r2, r3
    b268:	f64a 6300 	movw	r3, #44544	; 0xae00
    b26c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b270:	7899      	ldrb	r1, [r3, #2]
    b272:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b276:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b27a:	5499      	strb	r1, [r3, r2]
    b27c:	4bae      	ldr	r3, [pc, #696]	; (b538 <send_climb+0x8c8>)
    b27e:	781a      	ldrb	r2, [r3, #0]
    b280:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b284:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b288:	781b      	ldrb	r3, [r3, #0]
    b28a:	4413      	add	r3, r2
    b28c:	b2da      	uxtb	r2, r3
    b28e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b292:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b296:	701a      	strb	r2, [r3, #0]
    b298:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b29c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2a0:	781a      	ldrb	r2, [r3, #0]
    b2a2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b2a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2aa:	781b      	ldrb	r3, [r3, #0]
    b2ac:	4413      	add	r3, r2
    b2ae:	b2da      	uxtb	r2, r3
    b2b0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b2b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2b8:	701a      	strb	r2, [r3, #0]
    b2ba:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b2be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2c2:	781b      	ldrb	r3, [r3, #0]
    b2c4:	3301      	adds	r3, #1
    b2c6:	b2da      	uxtb	r2, r3
    b2c8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b2cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2d0:	701a      	strb	r2, [r3, #0]
    b2d2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b2d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2da:	781b      	ldrb	r3, [r3, #0]
    b2dc:	2bff      	cmp	r3, #255	; 0xff
    b2de:	d105      	bne.n	b2ec <send_climb+0x67c>
    b2e0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b2e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2e8:	2200      	movs	r2, #0
    b2ea:	701a      	strb	r2, [r3, #0]
    b2ec:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b2f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2f4:	781b      	ldrb	r3, [r3, #0]
    b2f6:	461a      	mov	r2, r3
    b2f8:	f64a 6300 	movw	r3, #44544	; 0xae00
    b2fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b300:	78d9      	ldrb	r1, [r3, #3]
    b302:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b306:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b30a:	5499      	strb	r1, [r3, r2]
    b30c:	4b8b      	ldr	r3, [pc, #556]	; (b53c <send_climb+0x8cc>)
    b30e:	781a      	ldrb	r2, [r3, #0]
    b310:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b314:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b318:	781b      	ldrb	r3, [r3, #0]
    b31a:	4413      	add	r3, r2
    b31c:	b2da      	uxtb	r2, r3
    b31e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b322:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b326:	701a      	strb	r2, [r3, #0]
    b328:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b32c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b330:	781a      	ldrb	r2, [r3, #0]
    b332:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b336:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b33a:	781b      	ldrb	r3, [r3, #0]
    b33c:	4413      	add	r3, r2
    b33e:	b2da      	uxtb	r2, r3
    b340:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b344:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b348:	701a      	strb	r2, [r3, #0]
    b34a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b34e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b352:	781b      	ldrb	r3, [r3, #0]
    b354:	3301      	adds	r3, #1
    b356:	b2da      	uxtb	r2, r3
    b358:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b35c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b360:	701a      	strb	r2, [r3, #0]
    b362:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b366:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b36a:	781b      	ldrb	r3, [r3, #0]
    b36c:	2bff      	cmp	r3, #255	; 0xff
    b36e:	d105      	bne.n	b37c <send_climb+0x70c>
    b370:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b374:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b378:	2200      	movs	r2, #0
    b37a:	701a      	strb	r2, [r3, #0]
    b37c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b380:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b384:	781b      	ldrb	r3, [r3, #0]
    b386:	461a      	mov	r2, r3
    b388:	f648 03b8 	movw	r3, #35000	; 0x88b8
    b38c:	f2c0 0301 	movt	r3, #1
    b390:	7819      	ldrb	r1, [r3, #0]
    b392:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b396:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b39a:	5499      	strb	r1, [r3, r2]
    b39c:	f648 03b8 	movw	r3, #35000	; 0x88b8
    b3a0:	f2c0 0301 	movt	r3, #1
    b3a4:	781a      	ldrb	r2, [r3, #0]
    b3a6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b3aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3ae:	781b      	ldrb	r3, [r3, #0]
    b3b0:	4413      	add	r3, r2
    b3b2:	b2da      	uxtb	r2, r3
    b3b4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b3b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3bc:	701a      	strb	r2, [r3, #0]
    b3be:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b3c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3c6:	781a      	ldrb	r2, [r3, #0]
    b3c8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b3cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3d0:	781b      	ldrb	r3, [r3, #0]
    b3d2:	4413      	add	r3, r2
    b3d4:	b2da      	uxtb	r2, r3
    b3d6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b3da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3de:	701a      	strb	r2, [r3, #0]
    b3e0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b3e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3e8:	781b      	ldrb	r3, [r3, #0]
    b3ea:	3301      	adds	r3, #1
    b3ec:	b2da      	uxtb	r2, r3
    b3ee:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b3f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3f6:	701a      	strb	r2, [r3, #0]
    b3f8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b3fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b400:	781b      	ldrb	r3, [r3, #0]
    b402:	2bff      	cmp	r3, #255	; 0xff
    b404:	d105      	bne.n	b412 <send_climb+0x7a2>
    b406:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b40a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b40e:	2200      	movs	r2, #0
    b410:	701a      	strb	r2, [r3, #0]
    b412:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b416:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b41a:	781b      	ldrb	r3, [r3, #0]
    b41c:	461a      	mov	r2, r3
    b41e:	f648 03b8 	movw	r3, #35000	; 0x88b8
    b422:	f2c0 0301 	movt	r3, #1
    b426:	7859      	ldrb	r1, [r3, #1]
    b428:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b430:	5499      	strb	r1, [r3, r2]
    b432:	4b43      	ldr	r3, [pc, #268]	; (b540 <send_climb+0x8d0>)
    b434:	781a      	ldrb	r2, [r3, #0]
    b436:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b43a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b43e:	781b      	ldrb	r3, [r3, #0]
    b440:	4413      	add	r3, r2
    b442:	b2da      	uxtb	r2, r3
    b444:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b448:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b44c:	701a      	strb	r2, [r3, #0]
    b44e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b452:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b456:	781a      	ldrb	r2, [r3, #0]
    b458:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b45c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b460:	781b      	ldrb	r3, [r3, #0]
    b462:	4413      	add	r3, r2
    b464:	b2da      	uxtb	r2, r3
    b466:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b46a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b46e:	701a      	strb	r2, [r3, #0]
    b470:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b474:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b478:	781b      	ldrb	r3, [r3, #0]
    b47a:	3301      	adds	r3, #1
    b47c:	b2da      	uxtb	r2, r3
    b47e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b482:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b486:	701a      	strb	r2, [r3, #0]
    b488:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b48c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b490:	781b      	ldrb	r3, [r3, #0]
    b492:	2bff      	cmp	r3, #255	; 0xff
    b494:	d105      	bne.n	b4a2 <send_climb+0x832>
    b496:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b49a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b49e:	2200      	movs	r2, #0
    b4a0:	701a      	strb	r2, [r3, #0]
    b4a2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b4a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4aa:	781b      	ldrb	r3, [r3, #0]
    b4ac:	461a      	mov	r2, r3
    b4ae:	f648 03b8 	movw	r3, #35000	; 0x88b8
    b4b2:	f2c0 0301 	movt	r3, #1
    b4b6:	7899      	ldrb	r1, [r3, #2]
    b4b8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b4bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4c0:	5499      	strb	r1, [r3, r2]
    b4c2:	4b20      	ldr	r3, [pc, #128]	; (b544 <send_climb+0x8d4>)
    b4c4:	781a      	ldrb	r2, [r3, #0]
    b4c6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b4ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4ce:	781b      	ldrb	r3, [r3, #0]
    b4d0:	4413      	add	r3, r2
    b4d2:	b2da      	uxtb	r2, r3
    b4d4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b4d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4dc:	701a      	strb	r2, [r3, #0]
    b4de:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b4e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4e6:	781a      	ldrb	r2, [r3, #0]
    b4e8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b4ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4f0:	781b      	ldrb	r3, [r3, #0]
    b4f2:	4413      	add	r3, r2
    b4f4:	b2da      	uxtb	r2, r3
    b4f6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b4fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4fe:	701a      	strb	r2, [r3, #0]
    b500:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b504:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b508:	781b      	ldrb	r3, [r3, #0]
    b50a:	3301      	adds	r3, #1
    b50c:	b2da      	uxtb	r2, r3
    b50e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b512:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b516:	701a      	strb	r2, [r3, #0]
    b518:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b51c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b520:	781b      	ldrb	r3, [r3, #0]
    b522:	2bff      	cmp	r3, #255	; 0xff
    b524:	d110      	bne.n	b548 <send_climb+0x8d8>
    b526:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b52a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b52e:	2200      	movs	r2, #0
    b530:	701a      	strb	r2, [r3, #0]
    b532:	e009      	b.n	b548 <send_climb+0x8d8>
    b534:	2000ae01 	.word	0x2000ae01
    b538:	2000ae02 	.word	0x2000ae02
    b53c:	2000ae03 	.word	0x2000ae03
    b540:	000188b9 	.word	0x000188b9
    b544:	000188ba 	.word	0x000188ba
    b548:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b54c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b550:	781b      	ldrb	r3, [r3, #0]
    b552:	461a      	mov	r2, r3
    b554:	f648 03b8 	movw	r3, #35000	; 0x88b8
    b558:	f2c0 0301 	movt	r3, #1
    b55c:	78d9      	ldrb	r1, [r3, #3]
    b55e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b562:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b566:	5499      	strb	r1, [r3, r2]
    b568:	4b79      	ldr	r3, [pc, #484]	; (b750 <send_climb+0xae0>)
    b56a:	781a      	ldrb	r2, [r3, #0]
    b56c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b570:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b574:	781b      	ldrb	r3, [r3, #0]
    b576:	4413      	add	r3, r2
    b578:	b2da      	uxtb	r2, r3
    b57a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b57e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b582:	701a      	strb	r2, [r3, #0]
    b584:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b588:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b58c:	781a      	ldrb	r2, [r3, #0]
    b58e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b592:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b596:	781b      	ldrb	r3, [r3, #0]
    b598:	4413      	add	r3, r2
    b59a:	b2da      	uxtb	r2, r3
    b59c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b5a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5a4:	701a      	strb	r2, [r3, #0]
    b5a6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b5aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5ae:	781b      	ldrb	r3, [r3, #0]
    b5b0:	3301      	adds	r3, #1
    b5b2:	b2da      	uxtb	r2, r3
    b5b4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b5b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5bc:	701a      	strb	r2, [r3, #0]
    b5be:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b5c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5c6:	781b      	ldrb	r3, [r3, #0]
    b5c8:	2bff      	cmp	r3, #255	; 0xff
    b5ca:	d105      	bne.n	b5d8 <send_climb+0x968>
    b5cc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b5d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5d4:	2200      	movs	r2, #0
    b5d6:	701a      	strb	r2, [r3, #0]
    b5d8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b5dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5e0:	781b      	ldrb	r3, [r3, #0]
    b5e2:	461a      	mov	r2, r3
    b5e4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b5e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5ec:	7819      	ldrb	r1, [r3, #0]
    b5ee:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b5f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5f6:	5499      	strb	r1, [r3, r2]
    b5f8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b5fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b600:	781b      	ldrb	r3, [r3, #0]
    b602:	3301      	adds	r3, #1
    b604:	b2da      	uxtb	r2, r3
    b606:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b60a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b60e:	701a      	strb	r2, [r3, #0]
    b610:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b614:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b618:	781b      	ldrb	r3, [r3, #0]
    b61a:	2bff      	cmp	r3, #255	; 0xff
    b61c:	d105      	bne.n	b62a <send_climb+0x9ba>
    b61e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b622:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b626:	2200      	movs	r2, #0
    b628:	701a      	strb	r2, [r3, #0]
    b62a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b62e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b632:	781b      	ldrb	r3, [r3, #0]
    b634:	461a      	mov	r2, r3
    b636:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b63a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b63e:	7819      	ldrb	r1, [r3, #0]
    b640:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b644:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b648:	5499      	strb	r1, [r3, r2]
    b64a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b64e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b652:	781b      	ldrb	r3, [r3, #0]
    b654:	3301      	adds	r3, #1
    b656:	b2da      	uxtb	r2, r3
    b658:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b65c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b660:	701a      	strb	r2, [r3, #0]
    b662:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b666:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b66a:	781b      	ldrb	r3, [r3, #0]
    b66c:	2bff      	cmp	r3, #255	; 0xff
    b66e:	d105      	bne.n	b67c <send_climb+0xa0c>
    b670:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b674:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b678:	2200      	movs	r2, #0
    b67a:	701a      	strb	r2, [r3, #0]
    b67c:	f242 0339 	movw	r3, #8249	; 0x2039
    b680:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b684:	781b      	ldrb	r3, [r3, #0]
    b686:	b2db      	uxtb	r3, r3
    b688:	f003 0310 	and.w	r3, r3, #16
    b68c:	2b00      	cmp	r3, #0
    b68e:	d15a      	bne.n	b746 <send_climb+0xad6>
    b690:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    b694:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b698:	781b      	ldrb	r3, [r3, #0]
    b69a:	b2db      	uxtb	r3, r3
    b69c:	461a      	mov	r2, r3
    b69e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b6a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6a6:	5c9a      	ldrb	r2, [r3, r2]
    b6a8:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    b6ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6b0:	701a      	strb	r2, [r3, #0]
    b6b2:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    b6b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6ba:	2200      	movs	r2, #0
    b6bc:	701a      	strb	r2, [r3, #0]
    b6be:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    b6c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6c6:	781b      	ldrb	r3, [r3, #0]
    b6c8:	b2db      	uxtb	r3, r3
    b6ca:	3301      	adds	r3, #1
    b6cc:	b2da      	uxtb	r2, r3
    b6ce:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    b6d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6d6:	701a      	strb	r2, [r3, #0]
    b6d8:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    b6dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6e0:	781b      	ldrb	r3, [r3, #0]
    b6e2:	b2db      	uxtb	r3, r3
    b6e4:	2bff      	cmp	r3, #255	; 0xff
    b6e6:	d105      	bne.n	b6f4 <send_climb+0xa84>
    b6e8:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    b6ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6f0:	2200      	movs	r2, #0
    b6f2:	701a      	strb	r2, [r3, #0]
    b6f4:	f242 0338 	movw	r3, #8248	; 0x2038
    b6f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6fc:	f242 0238 	movw	r2, #8248	; 0x2038
    b700:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b704:	7812      	ldrb	r2, [r2, #0]
    b706:	b2d2      	uxtb	r2, r2
    b708:	f042 0201 	orr.w	r2, r2, #1
    b70c:	b2d2      	uxtb	r2, r2
    b70e:	701a      	strb	r2, [r3, #0]
    b710:	f242 0339 	movw	r3, #8249	; 0x2039
    b714:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b718:	f242 0239 	movw	r2, #8249	; 0x2039
    b71c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b720:	7812      	ldrb	r2, [r2, #0]
    b722:	b2d2      	uxtb	r2, r2
    b724:	f042 0210 	orr.w	r2, r2, #16
    b728:	b2d2      	uxtb	r2, r2
    b72a:	701a      	strb	r2, [r3, #0]
    b72c:	e00b      	b.n	b746 <send_climb+0xad6>
    b72e:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    b732:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b736:	781b      	ldrb	r3, [r3, #0]
    b738:	3301      	adds	r3, #1
    b73a:	b2da      	uxtb	r2, r3
    b73c:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    b740:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b744:	701a      	strb	r2, [r3, #0]
}
    b746:	46bd      	mov	sp, r7
    b748:	f85d 7b04 	ldr.w	r7, [sp], #4
    b74c:	4770      	bx	lr
    b74e:	bf00      	nop
    b750:	000188bb 	.word	0x000188bb

0000b754 <send_mode>:
void send_mode(void){  //5000ms
    b754:	b480      	push	{r7}
    b756:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 9) PERIODIC_SEND_PPRZ_MODE();}
    b758:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    b75c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b760:	781a      	ldrb	r2, [r3, #0]
    b762:	f248 531f 	movw	r3, #34079	; 0x851f
    b766:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    b76a:	fba3 1302 	umull	r1, r3, r3, r2
    b76e:	091b      	lsrs	r3, r3, #4
    b770:	2132      	movs	r1, #50	; 0x32
    b772:	fb01 f303 	mul.w	r3, r1, r3
    b776:	1ad3      	subs	r3, r2, r3
    b778:	b2db      	uxtb	r3, r3
    b77a:	2b09      	cmp	r3, #9
    b77c:	f040 82ba 	bne.w	bcf4 <send_mode+0x5a0>
    b780:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b784:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b788:	781a      	ldrb	r2, [r3, #0]
    b78a:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    b78e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b792:	781b      	ldrb	r3, [r3, #0]
    b794:	b2db      	uxtb	r3, r3
    b796:	429a      	cmp	r2, r3
    b798:	d313      	bcc.n	b7c2 <send_mode+0x6e>
    b79a:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    b79e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7a2:	781b      	ldrb	r3, [r3, #0]
    b7a4:	b2db      	uxtb	r3, r3
    b7a6:	461a      	mov	r2, r3
    b7a8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b7ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7b0:	781b      	ldrb	r3, [r3, #0]
    b7b2:	1ad3      	subs	r3, r2, r3
    b7b4:	33ff      	adds	r3, #255	; 0xff
    b7b6:	2b09      	cmp	r3, #9
    b7b8:	bfd4      	ite	le
    b7ba:	2300      	movle	r3, #0
    b7bc:	2301      	movgt	r3, #1
    b7be:	b2db      	uxtb	r3, r3
    b7c0:	e011      	b.n	b7e6 <send_mode+0x92>
    b7c2:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    b7c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7ca:	781b      	ldrb	r3, [r3, #0]
    b7cc:	b2db      	uxtb	r3, r3
    b7ce:	461a      	mov	r2, r3
    b7d0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b7d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7d8:	781b      	ldrb	r3, [r3, #0]
    b7da:	1ad3      	subs	r3, r2, r3
    b7dc:	2b09      	cmp	r3, #9
    b7de:	bfd4      	ite	le
    b7e0:	2300      	movle	r3, #0
    b7e2:	2301      	movgt	r3, #1
    b7e4:	b2db      	uxtb	r3, r3
    b7e6:	2b00      	cmp	r3, #0
    b7e8:	f000 8278 	beq.w	bcdc <send_mode+0x588>
    b7ec:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b7f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7f4:	781b      	ldrb	r3, [r3, #0]
    b7f6:	461a      	mov	r2, r3
    b7f8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b7fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b800:	2105      	movs	r1, #5
    b802:	5499      	strb	r1, [r3, r2]
    b804:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b808:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b80c:	781b      	ldrb	r3, [r3, #0]
    b80e:	3301      	adds	r3, #1
    b810:	b2da      	uxtb	r2, r3
    b812:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b816:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b81a:	701a      	strb	r2, [r3, #0]
    b81c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b820:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b824:	781b      	ldrb	r3, [r3, #0]
    b826:	2bff      	cmp	r3, #255	; 0xff
    b828:	d105      	bne.n	b836 <send_mode+0xe2>
    b82a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b82e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b832:	2200      	movs	r2, #0
    b834:	701a      	strb	r2, [r3, #0]
    b836:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b83a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b83e:	781b      	ldrb	r3, [r3, #0]
    b840:	461a      	mov	r2, r3
    b842:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b846:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b84a:	210b      	movs	r1, #11
    b84c:	5499      	strb	r1, [r3, r2]
    b84e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b852:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b856:	781b      	ldrb	r3, [r3, #0]
    b858:	3301      	adds	r3, #1
    b85a:	b2da      	uxtb	r2, r3
    b85c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b860:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b864:	701a      	strb	r2, [r3, #0]
    b866:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b86a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b86e:	781b      	ldrb	r3, [r3, #0]
    b870:	2bff      	cmp	r3, #255	; 0xff
    b872:	d105      	bne.n	b880 <send_mode+0x12c>
    b874:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b878:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b87c:	2200      	movs	r2, #0
    b87e:	701a      	strb	r2, [r3, #0]
    b880:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b884:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b888:	220b      	movs	r2, #11
    b88a:	701a      	strb	r2, [r3, #0]
    b88c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b890:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b894:	220b      	movs	r2, #11
    b896:	701a      	strb	r2, [r3, #0]
    b898:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b89c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8a0:	781b      	ldrb	r3, [r3, #0]
    b8a2:	461a      	mov	r2, r3
    b8a4:	f64a 2394 	movw	r3, #43668	; 0xaa94
    b8a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8ac:	7819      	ldrb	r1, [r3, #0]
    b8ae:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b8b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8b6:	5499      	strb	r1, [r3, r2]
    b8b8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b8bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8c0:	781a      	ldrb	r2, [r3, #0]
    b8c2:	f64a 2394 	movw	r3, #43668	; 0xaa94
    b8c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8ca:	781b      	ldrb	r3, [r3, #0]
    b8cc:	4413      	add	r3, r2
    b8ce:	b2da      	uxtb	r2, r3
    b8d0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b8d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8d8:	701a      	strb	r2, [r3, #0]
    b8da:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b8de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8e2:	781a      	ldrb	r2, [r3, #0]
    b8e4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b8e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8ec:	781b      	ldrb	r3, [r3, #0]
    b8ee:	4413      	add	r3, r2
    b8f0:	b2da      	uxtb	r2, r3
    b8f2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b8f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8fa:	701a      	strb	r2, [r3, #0]
    b8fc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b900:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b904:	781b      	ldrb	r3, [r3, #0]
    b906:	3301      	adds	r3, #1
    b908:	b2da      	uxtb	r2, r3
    b90a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b90e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b912:	701a      	strb	r2, [r3, #0]
    b914:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b918:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b91c:	781b      	ldrb	r3, [r3, #0]
    b91e:	2bff      	cmp	r3, #255	; 0xff
    b920:	d105      	bne.n	b92e <send_mode+0x1da>
    b922:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b926:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b92a:	2200      	movs	r2, #0
    b92c:	701a      	strb	r2, [r3, #0]
    b92e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b932:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b936:	781b      	ldrb	r3, [r3, #0]
    b938:	461a      	mov	r2, r3
    b93a:	f64a 2395 	movw	r3, #43669	; 0xaa95
    b93e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b942:	7819      	ldrb	r1, [r3, #0]
    b944:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b948:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b94c:	5499      	strb	r1, [r3, r2]
    b94e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b952:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b956:	781a      	ldrb	r2, [r3, #0]
    b958:	f64a 2395 	movw	r3, #43669	; 0xaa95
    b95c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b960:	781b      	ldrb	r3, [r3, #0]
    b962:	4413      	add	r3, r2
    b964:	b2da      	uxtb	r2, r3
    b966:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b96a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b96e:	701a      	strb	r2, [r3, #0]
    b970:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b974:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b978:	781a      	ldrb	r2, [r3, #0]
    b97a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b97e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b982:	781b      	ldrb	r3, [r3, #0]
    b984:	4413      	add	r3, r2
    b986:	b2da      	uxtb	r2, r3
    b988:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b98c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b990:	701a      	strb	r2, [r3, #0]
    b992:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b996:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b99a:	781b      	ldrb	r3, [r3, #0]
    b99c:	3301      	adds	r3, #1
    b99e:	b2da      	uxtb	r2, r3
    b9a0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b9a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9a8:	701a      	strb	r2, [r3, #0]
    b9aa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b9ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9b2:	781b      	ldrb	r3, [r3, #0]
    b9b4:	2bff      	cmp	r3, #255	; 0xff
    b9b6:	d105      	bne.n	b9c4 <send_mode+0x270>
    b9b8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b9bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9c0:	2200      	movs	r2, #0
    b9c2:	701a      	strb	r2, [r3, #0]
    b9c4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b9c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9cc:	781b      	ldrb	r3, [r3, #0]
    b9ce:	461a      	mov	r2, r3
    b9d0:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
    b9d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9d8:	7819      	ldrb	r1, [r3, #0]
    b9da:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b9de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9e2:	5499      	strb	r1, [r3, r2]
    b9e4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b9e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9ec:	781a      	ldrb	r2, [r3, #0]
    b9ee:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
    b9f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9f6:	781b      	ldrb	r3, [r3, #0]
    b9f8:	4413      	add	r3, r2
    b9fa:	b2da      	uxtb	r2, r3
    b9fc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ba00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba04:	701a      	strb	r2, [r3, #0]
    ba06:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ba0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba0e:	781a      	ldrb	r2, [r3, #0]
    ba10:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ba14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba18:	781b      	ldrb	r3, [r3, #0]
    ba1a:	4413      	add	r3, r2
    ba1c:	b2da      	uxtb	r2, r3
    ba1e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ba22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba26:	701a      	strb	r2, [r3, #0]
    ba28:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ba2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba30:	781b      	ldrb	r3, [r3, #0]
    ba32:	3301      	adds	r3, #1
    ba34:	b2da      	uxtb	r2, r3
    ba36:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ba3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba3e:	701a      	strb	r2, [r3, #0]
    ba40:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ba44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba48:	781b      	ldrb	r3, [r3, #0]
    ba4a:	2bff      	cmp	r3, #255	; 0xff
    ba4c:	d105      	bne.n	ba5a <send_mode+0x306>
    ba4e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ba52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba56:	2200      	movs	r2, #0
    ba58:	701a      	strb	r2, [r3, #0]
    ba5a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ba5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba62:	781b      	ldrb	r3, [r3, #0]
    ba64:	461a      	mov	r2, r3
    ba66:	f64a 239b 	movw	r3, #43675	; 0xaa9b
    ba6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba6e:	7819      	ldrb	r1, [r3, #0]
    ba70:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ba74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba78:	5499      	strb	r1, [r3, r2]
    ba7a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ba7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba82:	781a      	ldrb	r2, [r3, #0]
    ba84:	f64a 239b 	movw	r3, #43675	; 0xaa9b
    ba88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba8c:	781b      	ldrb	r3, [r3, #0]
    ba8e:	4413      	add	r3, r2
    ba90:	b2da      	uxtb	r2, r3
    ba92:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ba96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba9a:	701a      	strb	r2, [r3, #0]
    ba9c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    baa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    baa4:	781a      	ldrb	r2, [r3, #0]
    baa6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    baaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    baae:	781b      	ldrb	r3, [r3, #0]
    bab0:	4413      	add	r3, r2
    bab2:	b2da      	uxtb	r2, r3
    bab4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    bab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    babc:	701a      	strb	r2, [r3, #0]
    babe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bac6:	781b      	ldrb	r3, [r3, #0]
    bac8:	3301      	adds	r3, #1
    baca:	b2da      	uxtb	r2, r3
    bacc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bad4:	701a      	strb	r2, [r3, #0]
    bad6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bada:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bade:	781b      	ldrb	r3, [r3, #0]
    bae0:	2bff      	cmp	r3, #255	; 0xff
    bae2:	d105      	bne.n	baf0 <send_mode+0x39c>
    bae4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    baec:	2200      	movs	r2, #0
    baee:	701a      	strb	r2, [r3, #0]
    baf0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    baf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    baf8:	781b      	ldrb	r3, [r3, #0]
    bafa:	461a      	mov	r2, r3
    bafc:	f240 2380 	movw	r3, #640	; 0x280
    bb00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb04:	7819      	ldrb	r1, [r3, #0]
    bb06:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    bb0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb0e:	5499      	strb	r1, [r3, r2]
    bb10:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    bb14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb18:	781a      	ldrb	r2, [r3, #0]
    bb1a:	f240 2380 	movw	r3, #640	; 0x280
    bb1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb22:	781b      	ldrb	r3, [r3, #0]
    bb24:	4413      	add	r3, r2
    bb26:	b2da      	uxtb	r2, r3
    bb28:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    bb2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb30:	701a      	strb	r2, [r3, #0]
    bb32:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    bb36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb3a:	781a      	ldrb	r2, [r3, #0]
    bb3c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    bb40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb44:	781b      	ldrb	r3, [r3, #0]
    bb46:	4413      	add	r3, r2
    bb48:	b2da      	uxtb	r2, r3
    bb4a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    bb4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb52:	701a      	strb	r2, [r3, #0]
    bb54:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bb58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb5c:	781b      	ldrb	r3, [r3, #0]
    bb5e:	3301      	adds	r3, #1
    bb60:	b2da      	uxtb	r2, r3
    bb62:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bb66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb6a:	701a      	strb	r2, [r3, #0]
    bb6c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bb70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb74:	781b      	ldrb	r3, [r3, #0]
    bb76:	2bff      	cmp	r3, #255	; 0xff
    bb78:	d105      	bne.n	bb86 <send_mode+0x432>
    bb7a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bb7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb82:	2200      	movs	r2, #0
    bb84:	701a      	strb	r2, [r3, #0]
    bb86:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bb8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb8e:	781b      	ldrb	r3, [r3, #0]
    bb90:	461a      	mov	r2, r3
    bb92:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    bb96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb9a:	7819      	ldrb	r1, [r3, #0]
    bb9c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    bba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bba4:	5499      	strb	r1, [r3, r2]
    bba6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bbaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbae:	781b      	ldrb	r3, [r3, #0]
    bbb0:	3301      	adds	r3, #1
    bbb2:	b2da      	uxtb	r2, r3
    bbb4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bbb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbbc:	701a      	strb	r2, [r3, #0]
    bbbe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bbc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbc6:	781b      	ldrb	r3, [r3, #0]
    bbc8:	2bff      	cmp	r3, #255	; 0xff
    bbca:	d105      	bne.n	bbd8 <send_mode+0x484>
    bbcc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bbd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbd4:	2200      	movs	r2, #0
    bbd6:	701a      	strb	r2, [r3, #0]
    bbd8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bbdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbe0:	781b      	ldrb	r3, [r3, #0]
    bbe2:	461a      	mov	r2, r3
    bbe4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    bbe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbec:	7819      	ldrb	r1, [r3, #0]
    bbee:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    bbf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbf6:	5499      	strb	r1, [r3, r2]
    bbf8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bbfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc00:	781b      	ldrb	r3, [r3, #0]
    bc02:	3301      	adds	r3, #1
    bc04:	b2da      	uxtb	r2, r3
    bc06:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bc0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc0e:	701a      	strb	r2, [r3, #0]
    bc10:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bc14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc18:	781b      	ldrb	r3, [r3, #0]
    bc1a:	2bff      	cmp	r3, #255	; 0xff
    bc1c:	d105      	bne.n	bc2a <send_mode+0x4d6>
    bc1e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bc22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc26:	2200      	movs	r2, #0
    bc28:	701a      	strb	r2, [r3, #0]
    bc2a:	f242 0339 	movw	r3, #8249	; 0x2039
    bc2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc32:	781b      	ldrb	r3, [r3, #0]
    bc34:	b2db      	uxtb	r3, r3
    bc36:	f003 0310 	and.w	r3, r3, #16
    bc3a:	2b00      	cmp	r3, #0
    bc3c:	d15a      	bne.n	bcf4 <send_mode+0x5a0>
    bc3e:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    bc42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc46:	781b      	ldrb	r3, [r3, #0]
    bc48:	b2db      	uxtb	r3, r3
    bc4a:	461a      	mov	r2, r3
    bc4c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    bc50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc54:	5c9a      	ldrb	r2, [r3, r2]
    bc56:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    bc5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc5e:	701a      	strb	r2, [r3, #0]
    bc60:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    bc64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc68:	2200      	movs	r2, #0
    bc6a:	701a      	strb	r2, [r3, #0]
    bc6c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    bc70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc74:	781b      	ldrb	r3, [r3, #0]
    bc76:	b2db      	uxtb	r3, r3
    bc78:	3301      	adds	r3, #1
    bc7a:	b2da      	uxtb	r2, r3
    bc7c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    bc80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc84:	701a      	strb	r2, [r3, #0]
    bc86:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    bc8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc8e:	781b      	ldrb	r3, [r3, #0]
    bc90:	b2db      	uxtb	r3, r3
    bc92:	2bff      	cmp	r3, #255	; 0xff
    bc94:	d105      	bne.n	bca2 <send_mode+0x54e>
    bc96:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    bc9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc9e:	2200      	movs	r2, #0
    bca0:	701a      	strb	r2, [r3, #0]
    bca2:	f242 0338 	movw	r3, #8248	; 0x2038
    bca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcaa:	f242 0238 	movw	r2, #8248	; 0x2038
    bcae:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bcb2:	7812      	ldrb	r2, [r2, #0]
    bcb4:	b2d2      	uxtb	r2, r2
    bcb6:	f042 0201 	orr.w	r2, r2, #1
    bcba:	b2d2      	uxtb	r2, r2
    bcbc:	701a      	strb	r2, [r3, #0]
    bcbe:	f242 0339 	movw	r3, #8249	; 0x2039
    bcc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcc6:	f242 0239 	movw	r2, #8249	; 0x2039
    bcca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bcce:	7812      	ldrb	r2, [r2, #0]
    bcd0:	b2d2      	uxtb	r2, r2
    bcd2:	f042 0210 	orr.w	r2, r2, #16
    bcd6:	b2d2      	uxtb	r2, r2
    bcd8:	701a      	strb	r2, [r3, #0]
    bcda:	e00b      	b.n	bcf4 <send_mode+0x5a0>
    bcdc:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    bce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bce4:	781b      	ldrb	r3, [r3, #0]
    bce6:	3301      	adds	r3, #1
    bce8:	b2da      	uxtb	r2, r3
    bcea:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    bcee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcf2:	701a      	strb	r2, [r3, #0]
}
    bcf4:	46bd      	mov	sp, r7
    bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
    bcfa:	4770      	bx	lr

0000bcfc <send_debug>:
void send_debug(void){  //5000ms
    bcfc:	b480      	push	{r7}
    bcfe:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 29) PERIODIC_SEND_DEBUG();}
    bd00:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    bd04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd08:	781a      	ldrb	r2, [r3, #0]
    bd0a:	f248 531f 	movw	r3, #34079	; 0x851f
    bd0e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    bd12:	fba3 1302 	umull	r1, r3, r3, r2
    bd16:	091b      	lsrs	r3, r3, #4
    bd18:	2132      	movs	r1, #50	; 0x32
    bd1a:	fb01 f303 	mul.w	r3, r1, r3
    bd1e:	1ad3      	subs	r3, r2, r3
    bd20:	b2db      	uxtb	r3, r3
    bd22:	2b1d      	cmp	r3, #29
    bd24:	f040 82bb 	bne.w	c29e <send_debug+0x5a2>
    bd28:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bd2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd30:	781a      	ldrb	r2, [r3, #0]
    bd32:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    bd36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd3a:	781b      	ldrb	r3, [r3, #0]
    bd3c:	b2db      	uxtb	r3, r3
    bd3e:	429a      	cmp	r2, r3
    bd40:	d313      	bcc.n	bd6a <send_debug+0x6e>
    bd42:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    bd46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd4a:	781b      	ldrb	r3, [r3, #0]
    bd4c:	b2db      	uxtb	r3, r3
    bd4e:	461a      	mov	r2, r3
    bd50:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bd54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd58:	781b      	ldrb	r3, [r3, #0]
    bd5a:	1ad3      	subs	r3, r2, r3
    bd5c:	33ff      	adds	r3, #255	; 0xff
    bd5e:	2b09      	cmp	r3, #9
    bd60:	bfd4      	ite	le
    bd62:	2300      	movle	r3, #0
    bd64:	2301      	movgt	r3, #1
    bd66:	b2db      	uxtb	r3, r3
    bd68:	e011      	b.n	bd8e <send_debug+0x92>
    bd6a:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    bd6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd72:	781b      	ldrb	r3, [r3, #0]
    bd74:	b2db      	uxtb	r3, r3
    bd76:	461a      	mov	r2, r3
    bd78:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bd7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd80:	781b      	ldrb	r3, [r3, #0]
    bd82:	1ad3      	subs	r3, r2, r3
    bd84:	2b09      	cmp	r3, #9
    bd86:	bfd4      	ite	le
    bd88:	2300      	movle	r3, #0
    bd8a:	2301      	movgt	r3, #1
    bd8c:	b2db      	uxtb	r3, r3
    bd8e:	2b00      	cmp	r3, #0
    bd90:	f000 8279 	beq.w	c286 <send_debug+0x58a>
    bd94:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bd98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd9c:	781b      	ldrb	r3, [r3, #0]
    bd9e:	461a      	mov	r2, r3
    bda0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    bda4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bda8:	2105      	movs	r1, #5
    bdaa:	5499      	strb	r1, [r3, r2]
    bdac:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bdb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdb4:	781b      	ldrb	r3, [r3, #0]
    bdb6:	3301      	adds	r3, #1
    bdb8:	b2da      	uxtb	r2, r3
    bdba:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bdbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdc2:	701a      	strb	r2, [r3, #0]
    bdc4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bdc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdcc:	781b      	ldrb	r3, [r3, #0]
    bdce:	2bff      	cmp	r3, #255	; 0xff
    bdd0:	d105      	bne.n	bdde <send_debug+0xe2>
    bdd2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bdd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdda:	2200      	movs	r2, #0
    bddc:	701a      	strb	r2, [r3, #0]
    bdde:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bde2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bde6:	781b      	ldrb	r3, [r3, #0]
    bde8:	461a      	mov	r2, r3
    bdea:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    bdee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdf2:	210d      	movs	r1, #13
    bdf4:	5499      	strb	r1, [r3, r2]
    bdf6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bdfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdfe:	781b      	ldrb	r3, [r3, #0]
    be00:	3301      	adds	r3, #1
    be02:	b2da      	uxtb	r2, r3
    be04:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    be08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be0c:	701a      	strb	r2, [r3, #0]
    be0e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    be12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be16:	781b      	ldrb	r3, [r3, #0]
    be18:	2bff      	cmp	r3, #255	; 0xff
    be1a:	d105      	bne.n	be28 <send_debug+0x12c>
    be1c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    be20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be24:	2200      	movs	r2, #0
    be26:	701a      	strb	r2, [r3, #0]
    be28:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    be2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be30:	220d      	movs	r2, #13
    be32:	701a      	strb	r2, [r3, #0]
    be34:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    be38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be3c:	220d      	movs	r2, #13
    be3e:	701a      	strb	r2, [r3, #0]
    be40:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    be44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be48:	781b      	ldrb	r3, [r3, #0]
    be4a:	461a      	mov	r2, r3
    be4c:	f64a 33e7 	movw	r3, #44007	; 0xabe7
    be50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be54:	781b      	ldrb	r3, [r3, #0]
    be56:	b2d9      	uxtb	r1, r3
    be58:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    be5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be60:	5499      	strb	r1, [r3, r2]
    be62:	f64a 33e7 	movw	r3, #44007	; 0xabe7
    be66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be6a:	781a      	ldrb	r2, [r3, #0]
    be6c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    be70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be74:	781b      	ldrb	r3, [r3, #0]
    be76:	4413      	add	r3, r2
    be78:	b2da      	uxtb	r2, r3
    be7a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    be7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be82:	701a      	strb	r2, [r3, #0]
    be84:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    be88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be8c:	781a      	ldrb	r2, [r3, #0]
    be8e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    be92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be96:	781b      	ldrb	r3, [r3, #0]
    be98:	4413      	add	r3, r2
    be9a:	b2da      	uxtb	r2, r3
    be9c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    bea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bea4:	701a      	strb	r2, [r3, #0]
    bea6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    beaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    beae:	781b      	ldrb	r3, [r3, #0]
    beb0:	3301      	adds	r3, #1
    beb2:	b2da      	uxtb	r2, r3
    beb4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    beb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bebc:	701a      	strb	r2, [r3, #0]
    bebe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bec2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bec6:	781b      	ldrb	r3, [r3, #0]
    bec8:	2bff      	cmp	r3, #255	; 0xff
    beca:	d105      	bne.n	bed8 <send_debug+0x1dc>
    becc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bed4:	2200      	movs	r2, #0
    bed6:	701a      	strb	r2, [r3, #0]
    bed8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bedc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bee0:	781b      	ldrb	r3, [r3, #0]
    bee2:	461a      	mov	r2, r3
    bee4:	f64a 33e8 	movw	r3, #44008	; 0xabe8
    bee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    beec:	7819      	ldrb	r1, [r3, #0]
    beee:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    bef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bef6:	5499      	strb	r1, [r3, r2]
    bef8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    befc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf00:	781a      	ldrb	r2, [r3, #0]
    bf02:	f64a 33e8 	movw	r3, #44008	; 0xabe8
    bf06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf0a:	781b      	ldrb	r3, [r3, #0]
    bf0c:	4413      	add	r3, r2
    bf0e:	b2da      	uxtb	r2, r3
    bf10:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    bf14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf18:	701a      	strb	r2, [r3, #0]
    bf1a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    bf1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf22:	781a      	ldrb	r2, [r3, #0]
    bf24:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    bf28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf2c:	781b      	ldrb	r3, [r3, #0]
    bf2e:	4413      	add	r3, r2
    bf30:	b2da      	uxtb	r2, r3
    bf32:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    bf36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf3a:	701a      	strb	r2, [r3, #0]
    bf3c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bf40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf44:	781b      	ldrb	r3, [r3, #0]
    bf46:	3301      	adds	r3, #1
    bf48:	b2da      	uxtb	r2, r3
    bf4a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bf4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf52:	701a      	strb	r2, [r3, #0]
    bf54:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bf58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf5c:	781b      	ldrb	r3, [r3, #0]
    bf5e:	2bff      	cmp	r3, #255	; 0xff
    bf60:	d105      	bne.n	bf6e <send_debug+0x272>
    bf62:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bf66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf6a:	2200      	movs	r2, #0
    bf6c:	701a      	strb	r2, [r3, #0]
    bf6e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bf72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf76:	781b      	ldrb	r3, [r3, #0]
    bf78:	461a      	mov	r2, r3
    bf7a:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    bf7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf82:	7819      	ldrb	r1, [r3, #0]
    bf84:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    bf88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf8c:	5499      	strb	r1, [r3, r2]
    bf8e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    bf92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf96:	781a      	ldrb	r2, [r3, #0]
    bf98:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    bf9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfa0:	781b      	ldrb	r3, [r3, #0]
    bfa2:	4413      	add	r3, r2
    bfa4:	b2da      	uxtb	r2, r3
    bfa6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    bfaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfae:	701a      	strb	r2, [r3, #0]
    bfb0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    bfb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfb8:	781a      	ldrb	r2, [r3, #0]
    bfba:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    bfbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfc2:	781b      	ldrb	r3, [r3, #0]
    bfc4:	4413      	add	r3, r2
    bfc6:	b2da      	uxtb	r2, r3
    bfc8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    bfcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfd0:	701a      	strb	r2, [r3, #0]
    bfd2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bfd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfda:	781b      	ldrb	r3, [r3, #0]
    bfdc:	3301      	adds	r3, #1
    bfde:	b2da      	uxtb	r2, r3
    bfe0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bfe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfe8:	701a      	strb	r2, [r3, #0]
    bfea:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bfee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bff2:	781b      	ldrb	r3, [r3, #0]
    bff4:	2bff      	cmp	r3, #255	; 0xff
    bff6:	d105      	bne.n	c004 <send_debug+0x308>
    bff8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c000:	2200      	movs	r2, #0
    c002:	701a      	strb	r2, [r3, #0]
    c004:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c008:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c00c:	781b      	ldrb	r3, [r3, #0]
    c00e:	461a      	mov	r2, r3
    c010:	f64a 534f 	movw	r3, #44367	; 0xad4f
    c014:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c018:	7819      	ldrb	r1, [r3, #0]
    c01a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c01e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c022:	5499      	strb	r1, [r3, r2]
    c024:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c028:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c02c:	781a      	ldrb	r2, [r3, #0]
    c02e:	f64a 534f 	movw	r3, #44367	; 0xad4f
    c032:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c036:	781b      	ldrb	r3, [r3, #0]
    c038:	4413      	add	r3, r2
    c03a:	b2da      	uxtb	r2, r3
    c03c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c040:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c044:	701a      	strb	r2, [r3, #0]
    c046:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c04a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c04e:	781a      	ldrb	r2, [r3, #0]
    c050:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c054:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c058:	781b      	ldrb	r3, [r3, #0]
    c05a:	4413      	add	r3, r2
    c05c:	b2da      	uxtb	r2, r3
    c05e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c062:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c066:	701a      	strb	r2, [r3, #0]
    c068:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c06c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c070:	781b      	ldrb	r3, [r3, #0]
    c072:	3301      	adds	r3, #1
    c074:	b2da      	uxtb	r2, r3
    c076:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c07a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c07e:	701a      	strb	r2, [r3, #0]
    c080:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c084:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c088:	781b      	ldrb	r3, [r3, #0]
    c08a:	2bff      	cmp	r3, #255	; 0xff
    c08c:	d105      	bne.n	c09a <send_debug+0x39e>
    c08e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c092:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c096:	2200      	movs	r2, #0
    c098:	701a      	strb	r2, [r3, #0]
    c09a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c09e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0a2:	781b      	ldrb	r3, [r3, #0]
    c0a4:	461a      	mov	r2, r3
    c0a6:	f64a 239c 	movw	r3, #43676	; 0xaa9c
    c0aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0ae:	7819      	ldrb	r1, [r3, #0]
    c0b0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c0b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0b8:	5499      	strb	r1, [r3, r2]
    c0ba:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c0be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0c2:	781a      	ldrb	r2, [r3, #0]
    c0c4:	f64a 239c 	movw	r3, #43676	; 0xaa9c
    c0c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0cc:	781b      	ldrb	r3, [r3, #0]
    c0ce:	4413      	add	r3, r2
    c0d0:	b2da      	uxtb	r2, r3
    c0d2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c0d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0da:	701a      	strb	r2, [r3, #0]
    c0dc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c0e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0e4:	781a      	ldrb	r2, [r3, #0]
    c0e6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c0ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0ee:	781b      	ldrb	r3, [r3, #0]
    c0f0:	4413      	add	r3, r2
    c0f2:	b2da      	uxtb	r2, r3
    c0f4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c0f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0fc:	701a      	strb	r2, [r3, #0]
    c0fe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c102:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c106:	781b      	ldrb	r3, [r3, #0]
    c108:	3301      	adds	r3, #1
    c10a:	b2da      	uxtb	r2, r3
    c10c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c110:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c114:	701a      	strb	r2, [r3, #0]
    c116:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c11a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c11e:	781b      	ldrb	r3, [r3, #0]
    c120:	2bff      	cmp	r3, #255	; 0xff
    c122:	d105      	bne.n	c130 <send_debug+0x434>
    c124:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c128:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c12c:	2200      	movs	r2, #0
    c12e:	701a      	strb	r2, [r3, #0]
    c130:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c134:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c138:	781b      	ldrb	r3, [r3, #0]
    c13a:	461a      	mov	r2, r3
    c13c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c140:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c144:	7819      	ldrb	r1, [r3, #0]
    c146:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c14a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c14e:	5499      	strb	r1, [r3, r2]
    c150:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c154:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c158:	781b      	ldrb	r3, [r3, #0]
    c15a:	3301      	adds	r3, #1
    c15c:	b2da      	uxtb	r2, r3
    c15e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c162:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c166:	701a      	strb	r2, [r3, #0]
    c168:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c16c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c170:	781b      	ldrb	r3, [r3, #0]
    c172:	2bff      	cmp	r3, #255	; 0xff
    c174:	d105      	bne.n	c182 <send_debug+0x486>
    c176:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c17a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c17e:	2200      	movs	r2, #0
    c180:	701a      	strb	r2, [r3, #0]
    c182:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c186:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c18a:	781b      	ldrb	r3, [r3, #0]
    c18c:	461a      	mov	r2, r3
    c18e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c192:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c196:	7819      	ldrb	r1, [r3, #0]
    c198:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c19c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1a0:	5499      	strb	r1, [r3, r2]
    c1a2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c1a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1aa:	781b      	ldrb	r3, [r3, #0]
    c1ac:	3301      	adds	r3, #1
    c1ae:	b2da      	uxtb	r2, r3
    c1b0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c1b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1b8:	701a      	strb	r2, [r3, #0]
    c1ba:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c1be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1c2:	781b      	ldrb	r3, [r3, #0]
    c1c4:	2bff      	cmp	r3, #255	; 0xff
    c1c6:	d105      	bne.n	c1d4 <send_debug+0x4d8>
    c1c8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c1cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1d0:	2200      	movs	r2, #0
    c1d2:	701a      	strb	r2, [r3, #0]
    c1d4:	f242 0339 	movw	r3, #8249	; 0x2039
    c1d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1dc:	781b      	ldrb	r3, [r3, #0]
    c1de:	b2db      	uxtb	r3, r3
    c1e0:	f003 0310 	and.w	r3, r3, #16
    c1e4:	2b00      	cmp	r3, #0
    c1e6:	d15a      	bne.n	c29e <send_debug+0x5a2>
    c1e8:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    c1ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1f0:	781b      	ldrb	r3, [r3, #0]
    c1f2:	b2db      	uxtb	r3, r3
    c1f4:	461a      	mov	r2, r3
    c1f6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c1fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1fe:	5c9a      	ldrb	r2, [r3, r2]
    c200:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    c204:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c208:	701a      	strb	r2, [r3, #0]
    c20a:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    c20e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c212:	2200      	movs	r2, #0
    c214:	701a      	strb	r2, [r3, #0]
    c216:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    c21a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c21e:	781b      	ldrb	r3, [r3, #0]
    c220:	b2db      	uxtb	r3, r3
    c222:	3301      	adds	r3, #1
    c224:	b2da      	uxtb	r2, r3
    c226:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    c22a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c22e:	701a      	strb	r2, [r3, #0]
    c230:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    c234:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c238:	781b      	ldrb	r3, [r3, #0]
    c23a:	b2db      	uxtb	r3, r3
    c23c:	2bff      	cmp	r3, #255	; 0xff
    c23e:	d105      	bne.n	c24c <send_debug+0x550>
    c240:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    c244:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c248:	2200      	movs	r2, #0
    c24a:	701a      	strb	r2, [r3, #0]
    c24c:	f242 0338 	movw	r3, #8248	; 0x2038
    c250:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c254:	f242 0238 	movw	r2, #8248	; 0x2038
    c258:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c25c:	7812      	ldrb	r2, [r2, #0]
    c25e:	b2d2      	uxtb	r2, r2
    c260:	f042 0201 	orr.w	r2, r2, #1
    c264:	b2d2      	uxtb	r2, r2
    c266:	701a      	strb	r2, [r3, #0]
    c268:	f242 0339 	movw	r3, #8249	; 0x2039
    c26c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c270:	f242 0239 	movw	r2, #8249	; 0x2039
    c274:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c278:	7812      	ldrb	r2, [r2, #0]
    c27a:	b2d2      	uxtb	r2, r2
    c27c:	f042 0210 	orr.w	r2, r2, #16
    c280:	b2d2      	uxtb	r2, r2
    c282:	701a      	strb	r2, [r3, #0]
    c284:	e00b      	b.n	c29e <send_debug+0x5a2>
    c286:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    c28a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c28e:	781b      	ldrb	r3, [r3, #0]
    c290:	3301      	adds	r3, #1
    c292:	b2da      	uxtb	r2, r3
    c294:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    c298:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c29c:	701a      	strb	r2, [r3, #0]
}
    c29e:	46bd      	mov	sp, r7
    c2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c2a4:	4770      	bx	lr
    c2a6:	bf00      	nop

0000c2a8 <send_nav_ref>:
void send_nav_ref(void){  //10000ms
    c2a8:	b480      	push	{r7}
    c2aa:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 100 == 49) PERIODIC_SEND_NAVIGATION_REF();}
    c2ac:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    c2b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2b4:	781a      	ldrb	r2, [r3, #0]
    c2b6:	f248 531f 	movw	r3, #34079	; 0x851f
    c2ba:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c2be:	fba3 1302 	umull	r1, r3, r3, r2
    c2c2:	095b      	lsrs	r3, r3, #5
    c2c4:	2164      	movs	r1, #100	; 0x64
    c2c6:	fb01 f303 	mul.w	r3, r1, r3
    c2ca:	1ad3      	subs	r3, r2, r3
    c2cc:	b2db      	uxtb	r3, r3
    c2ce:	2b31      	cmp	r3, #49	; 0x31
    c2d0:	f040 8395 	bne.w	c9fe <send_nav_ref+0x756>
    c2d4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c2d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2dc:	781a      	ldrb	r2, [r3, #0]
    c2de:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    c2e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2e6:	781b      	ldrb	r3, [r3, #0]
    c2e8:	b2db      	uxtb	r3, r3
    c2ea:	429a      	cmp	r2, r3
    c2ec:	d313      	bcc.n	c316 <send_nav_ref+0x6e>
    c2ee:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    c2f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2f6:	781b      	ldrb	r3, [r3, #0]
    c2f8:	b2db      	uxtb	r3, r3
    c2fa:	461a      	mov	r2, r3
    c2fc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c300:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c304:	781b      	ldrb	r3, [r3, #0]
    c306:	1ad3      	subs	r3, r2, r3
    c308:	33ff      	adds	r3, #255	; 0xff
    c30a:	2b0c      	cmp	r3, #12
    c30c:	bfd4      	ite	le
    c30e:	2300      	movle	r3, #0
    c310:	2301      	movgt	r3, #1
    c312:	b2db      	uxtb	r3, r3
    c314:	e011      	b.n	c33a <send_nav_ref+0x92>
    c316:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    c31a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c31e:	781b      	ldrb	r3, [r3, #0]
    c320:	b2db      	uxtb	r3, r3
    c322:	461a      	mov	r2, r3
    c324:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c328:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c32c:	781b      	ldrb	r3, [r3, #0]
    c32e:	1ad3      	subs	r3, r2, r3
    c330:	2b0c      	cmp	r3, #12
    c332:	bfd4      	ite	le
    c334:	2300      	movle	r3, #0
    c336:	2301      	movgt	r3, #1
    c338:	b2db      	uxtb	r3, r3
    c33a:	2b00      	cmp	r3, #0
    c33c:	f000 8353 	beq.w	c9e6 <send_nav_ref+0x73e>
    c340:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c344:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c348:	781b      	ldrb	r3, [r3, #0]
    c34a:	461a      	mov	r2, r3
    c34c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c350:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c354:	2105      	movs	r1, #5
    c356:	5499      	strb	r1, [r3, r2]
    c358:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c35c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c360:	781b      	ldrb	r3, [r3, #0]
    c362:	3301      	adds	r3, #1
    c364:	b2da      	uxtb	r2, r3
    c366:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c36a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c36e:	701a      	strb	r2, [r3, #0]
    c370:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c374:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c378:	781b      	ldrb	r3, [r3, #0]
    c37a:	2bff      	cmp	r3, #255	; 0xff
    c37c:	d105      	bne.n	c38a <send_nav_ref+0xe2>
    c37e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c382:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c386:	2200      	movs	r2, #0
    c388:	701a      	strb	r2, [r3, #0]
    c38a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c38e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c392:	781b      	ldrb	r3, [r3, #0]
    c394:	461a      	mov	r2, r3
    c396:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c39a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c39e:	2109      	movs	r1, #9
    c3a0:	5499      	strb	r1, [r3, r2]
    c3a2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c3a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3aa:	781b      	ldrb	r3, [r3, #0]
    c3ac:	3301      	adds	r3, #1
    c3ae:	b2da      	uxtb	r2, r3
    c3b0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c3b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3b8:	701a      	strb	r2, [r3, #0]
    c3ba:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c3be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3c2:	781b      	ldrb	r3, [r3, #0]
    c3c4:	2bff      	cmp	r3, #255	; 0xff
    c3c6:	d105      	bne.n	c3d4 <send_nav_ref+0x12c>
    c3c8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c3cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3d0:	2200      	movs	r2, #0
    c3d2:	701a      	strb	r2, [r3, #0]
    c3d4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c3d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3dc:	2209      	movs	r2, #9
    c3de:	701a      	strb	r2, [r3, #0]
    c3e0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c3e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3e8:	2209      	movs	r2, #9
    c3ea:	701a      	strb	r2, [r3, #0]
    c3ec:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c3f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3f4:	781b      	ldrb	r3, [r3, #0]
    c3f6:	461a      	mov	r2, r3
    c3f8:	f648 03b0 	movw	r3, #34992	; 0x88b0
    c3fc:	f2c0 0301 	movt	r3, #1
    c400:	7819      	ldrb	r1, [r3, #0]
    c402:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c406:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c40a:	5499      	strb	r1, [r3, r2]
    c40c:	f648 03b0 	movw	r3, #34992	; 0x88b0
    c410:	f2c0 0301 	movt	r3, #1
    c414:	781a      	ldrb	r2, [r3, #0]
    c416:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c41a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c41e:	781b      	ldrb	r3, [r3, #0]
    c420:	4413      	add	r3, r2
    c422:	b2da      	uxtb	r2, r3
    c424:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c428:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c42c:	701a      	strb	r2, [r3, #0]
    c42e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c432:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c436:	781a      	ldrb	r2, [r3, #0]
    c438:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c43c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c440:	781b      	ldrb	r3, [r3, #0]
    c442:	4413      	add	r3, r2
    c444:	b2da      	uxtb	r2, r3
    c446:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c44a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c44e:	701a      	strb	r2, [r3, #0]
    c450:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c454:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c458:	781b      	ldrb	r3, [r3, #0]
    c45a:	3301      	adds	r3, #1
    c45c:	b2da      	uxtb	r2, r3
    c45e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c462:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c466:	701a      	strb	r2, [r3, #0]
    c468:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c46c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c470:	781b      	ldrb	r3, [r3, #0]
    c472:	2bff      	cmp	r3, #255	; 0xff
    c474:	d105      	bne.n	c482 <send_nav_ref+0x1da>
    c476:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c47a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c47e:	2200      	movs	r2, #0
    c480:	701a      	strb	r2, [r3, #0]
    c482:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c486:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c48a:	781b      	ldrb	r3, [r3, #0]
    c48c:	461a      	mov	r2, r3
    c48e:	f648 03b0 	movw	r3, #34992	; 0x88b0
    c492:	f2c0 0301 	movt	r3, #1
    c496:	7859      	ldrb	r1, [r3, #1]
    c498:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c49c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4a0:	5499      	strb	r1, [r3, r2]
    c4a2:	4bd2      	ldr	r3, [pc, #840]	; (c7ec <send_nav_ref+0x544>)
    c4a4:	781a      	ldrb	r2, [r3, #0]
    c4a6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c4aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4ae:	781b      	ldrb	r3, [r3, #0]
    c4b0:	4413      	add	r3, r2
    c4b2:	b2da      	uxtb	r2, r3
    c4b4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c4b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4bc:	701a      	strb	r2, [r3, #0]
    c4be:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4c6:	781a      	ldrb	r2, [r3, #0]
    c4c8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c4cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4d0:	781b      	ldrb	r3, [r3, #0]
    c4d2:	4413      	add	r3, r2
    c4d4:	b2da      	uxtb	r2, r3
    c4d6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c4da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4de:	701a      	strb	r2, [r3, #0]
    c4e0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c4e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4e8:	781b      	ldrb	r3, [r3, #0]
    c4ea:	3301      	adds	r3, #1
    c4ec:	b2da      	uxtb	r2, r3
    c4ee:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c4f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4f6:	701a      	strb	r2, [r3, #0]
    c4f8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c4fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c500:	781b      	ldrb	r3, [r3, #0]
    c502:	2bff      	cmp	r3, #255	; 0xff
    c504:	d105      	bne.n	c512 <send_nav_ref+0x26a>
    c506:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c50a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c50e:	2200      	movs	r2, #0
    c510:	701a      	strb	r2, [r3, #0]
    c512:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c51a:	781b      	ldrb	r3, [r3, #0]
    c51c:	461a      	mov	r2, r3
    c51e:	f648 03b0 	movw	r3, #34992	; 0x88b0
    c522:	f2c0 0301 	movt	r3, #1
    c526:	7899      	ldrb	r1, [r3, #2]
    c528:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c52c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c530:	5499      	strb	r1, [r3, r2]
    c532:	4baf      	ldr	r3, [pc, #700]	; (c7f0 <send_nav_ref+0x548>)
    c534:	781a      	ldrb	r2, [r3, #0]
    c536:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c53a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c53e:	781b      	ldrb	r3, [r3, #0]
    c540:	4413      	add	r3, r2
    c542:	b2da      	uxtb	r2, r3
    c544:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c548:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c54c:	701a      	strb	r2, [r3, #0]
    c54e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c552:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c556:	781a      	ldrb	r2, [r3, #0]
    c558:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c55c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c560:	781b      	ldrb	r3, [r3, #0]
    c562:	4413      	add	r3, r2
    c564:	b2da      	uxtb	r2, r3
    c566:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c56a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c56e:	701a      	strb	r2, [r3, #0]
    c570:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c574:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c578:	781b      	ldrb	r3, [r3, #0]
    c57a:	3301      	adds	r3, #1
    c57c:	b2da      	uxtb	r2, r3
    c57e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c582:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c586:	701a      	strb	r2, [r3, #0]
    c588:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c58c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c590:	781b      	ldrb	r3, [r3, #0]
    c592:	2bff      	cmp	r3, #255	; 0xff
    c594:	d105      	bne.n	c5a2 <send_nav_ref+0x2fa>
    c596:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c59a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c59e:	2200      	movs	r2, #0
    c5a0:	701a      	strb	r2, [r3, #0]
    c5a2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c5a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5aa:	781b      	ldrb	r3, [r3, #0]
    c5ac:	461a      	mov	r2, r3
    c5ae:	f648 03b0 	movw	r3, #34992	; 0x88b0
    c5b2:	f2c0 0301 	movt	r3, #1
    c5b6:	78d9      	ldrb	r1, [r3, #3]
    c5b8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c5bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5c0:	5499      	strb	r1, [r3, r2]
    c5c2:	4b8c      	ldr	r3, [pc, #560]	; (c7f4 <send_nav_ref+0x54c>)
    c5c4:	781a      	ldrb	r2, [r3, #0]
    c5c6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c5ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5ce:	781b      	ldrb	r3, [r3, #0]
    c5d0:	4413      	add	r3, r2
    c5d2:	b2da      	uxtb	r2, r3
    c5d4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c5d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5dc:	701a      	strb	r2, [r3, #0]
    c5de:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c5e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5e6:	781a      	ldrb	r2, [r3, #0]
    c5e8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c5ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5f0:	781b      	ldrb	r3, [r3, #0]
    c5f2:	4413      	add	r3, r2
    c5f4:	b2da      	uxtb	r2, r3
    c5f6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c5fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5fe:	701a      	strb	r2, [r3, #0]
    c600:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c604:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c608:	781b      	ldrb	r3, [r3, #0]
    c60a:	3301      	adds	r3, #1
    c60c:	b2da      	uxtb	r2, r3
    c60e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c612:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c616:	701a      	strb	r2, [r3, #0]
    c618:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c61c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c620:	781b      	ldrb	r3, [r3, #0]
    c622:	2bff      	cmp	r3, #255	; 0xff
    c624:	d105      	bne.n	c632 <send_nav_ref+0x38a>
    c626:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c62a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c62e:	2200      	movs	r2, #0
    c630:	701a      	strb	r2, [r3, #0]
    c632:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c636:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c63a:	781b      	ldrb	r3, [r3, #0]
    c63c:	461a      	mov	r2, r3
    c63e:	f648 03b4 	movw	r3, #34996	; 0x88b4
    c642:	f2c0 0301 	movt	r3, #1
    c646:	7819      	ldrb	r1, [r3, #0]
    c648:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c64c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c650:	5499      	strb	r1, [r3, r2]
    c652:	f648 03b4 	movw	r3, #34996	; 0x88b4
    c656:	f2c0 0301 	movt	r3, #1
    c65a:	781a      	ldrb	r2, [r3, #0]
    c65c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c660:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c664:	781b      	ldrb	r3, [r3, #0]
    c666:	4413      	add	r3, r2
    c668:	b2da      	uxtb	r2, r3
    c66a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c66e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c672:	701a      	strb	r2, [r3, #0]
    c674:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c67c:	781a      	ldrb	r2, [r3, #0]
    c67e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c686:	781b      	ldrb	r3, [r3, #0]
    c688:	4413      	add	r3, r2
    c68a:	b2da      	uxtb	r2, r3
    c68c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c690:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c694:	701a      	strb	r2, [r3, #0]
    c696:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c69a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c69e:	781b      	ldrb	r3, [r3, #0]
    c6a0:	3301      	adds	r3, #1
    c6a2:	b2da      	uxtb	r2, r3
    c6a4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c6a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6ac:	701a      	strb	r2, [r3, #0]
    c6ae:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c6b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6b6:	781b      	ldrb	r3, [r3, #0]
    c6b8:	2bff      	cmp	r3, #255	; 0xff
    c6ba:	d105      	bne.n	c6c8 <send_nav_ref+0x420>
    c6bc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c6c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6c4:	2200      	movs	r2, #0
    c6c6:	701a      	strb	r2, [r3, #0]
    c6c8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c6cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6d0:	781b      	ldrb	r3, [r3, #0]
    c6d2:	461a      	mov	r2, r3
    c6d4:	f648 03b4 	movw	r3, #34996	; 0x88b4
    c6d8:	f2c0 0301 	movt	r3, #1
    c6dc:	7859      	ldrb	r1, [r3, #1]
    c6de:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c6e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6e6:	5499      	strb	r1, [r3, r2]
    c6e8:	4b43      	ldr	r3, [pc, #268]	; (c7f8 <send_nav_ref+0x550>)
    c6ea:	781a      	ldrb	r2, [r3, #0]
    c6ec:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c6f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6f4:	781b      	ldrb	r3, [r3, #0]
    c6f6:	4413      	add	r3, r2
    c6f8:	b2da      	uxtb	r2, r3
    c6fa:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c6fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c702:	701a      	strb	r2, [r3, #0]
    c704:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c708:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c70c:	781a      	ldrb	r2, [r3, #0]
    c70e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c712:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c716:	781b      	ldrb	r3, [r3, #0]
    c718:	4413      	add	r3, r2
    c71a:	b2da      	uxtb	r2, r3
    c71c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c720:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c724:	701a      	strb	r2, [r3, #0]
    c726:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c72a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c72e:	781b      	ldrb	r3, [r3, #0]
    c730:	3301      	adds	r3, #1
    c732:	b2da      	uxtb	r2, r3
    c734:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c738:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c73c:	701a      	strb	r2, [r3, #0]
    c73e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c742:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c746:	781b      	ldrb	r3, [r3, #0]
    c748:	2bff      	cmp	r3, #255	; 0xff
    c74a:	d105      	bne.n	c758 <send_nav_ref+0x4b0>
    c74c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c750:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c754:	2200      	movs	r2, #0
    c756:	701a      	strb	r2, [r3, #0]
    c758:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c75c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c760:	781b      	ldrb	r3, [r3, #0]
    c762:	461a      	mov	r2, r3
    c764:	f648 03b4 	movw	r3, #34996	; 0x88b4
    c768:	f2c0 0301 	movt	r3, #1
    c76c:	7899      	ldrb	r1, [r3, #2]
    c76e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c772:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c776:	5499      	strb	r1, [r3, r2]
    c778:	4b20      	ldr	r3, [pc, #128]	; (c7fc <send_nav_ref+0x554>)
    c77a:	781a      	ldrb	r2, [r3, #0]
    c77c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c784:	781b      	ldrb	r3, [r3, #0]
    c786:	4413      	add	r3, r2
    c788:	b2da      	uxtb	r2, r3
    c78a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c78e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c792:	701a      	strb	r2, [r3, #0]
    c794:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c798:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c79c:	781a      	ldrb	r2, [r3, #0]
    c79e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c7a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7a6:	781b      	ldrb	r3, [r3, #0]
    c7a8:	4413      	add	r3, r2
    c7aa:	b2da      	uxtb	r2, r3
    c7ac:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c7b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7b4:	701a      	strb	r2, [r3, #0]
    c7b6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c7ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7be:	781b      	ldrb	r3, [r3, #0]
    c7c0:	3301      	adds	r3, #1
    c7c2:	b2da      	uxtb	r2, r3
    c7c4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c7c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7cc:	701a      	strb	r2, [r3, #0]
    c7ce:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c7d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7d6:	781b      	ldrb	r3, [r3, #0]
    c7d8:	2bff      	cmp	r3, #255	; 0xff
    c7da:	d111      	bne.n	c800 <send_nav_ref+0x558>
    c7dc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c7e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7e4:	2200      	movs	r2, #0
    c7e6:	701a      	strb	r2, [r3, #0]
    c7e8:	e00a      	b.n	c800 <send_nav_ref+0x558>
    c7ea:	bf00      	nop
    c7ec:	000188b1 	.word	0x000188b1
    c7f0:	000188b2 	.word	0x000188b2
    c7f4:	000188b3 	.word	0x000188b3
    c7f8:	000188b5 	.word	0x000188b5
    c7fc:	000188b6 	.word	0x000188b6
    c800:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c804:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c808:	781b      	ldrb	r3, [r3, #0]
    c80a:	461a      	mov	r2, r3
    c80c:	f648 03b4 	movw	r3, #34996	; 0x88b4
    c810:	f2c0 0301 	movt	r3, #1
    c814:	78d9      	ldrb	r1, [r3, #3]
    c816:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c81a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c81e:	5499      	strb	r1, [r3, r2]
    c820:	4b79      	ldr	r3, [pc, #484]	; (ca08 <send_nav_ref+0x760>)
    c822:	781a      	ldrb	r2, [r3, #0]
    c824:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c828:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c82c:	781b      	ldrb	r3, [r3, #0]
    c82e:	4413      	add	r3, r2
    c830:	b2da      	uxtb	r2, r3
    c832:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c836:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c83a:	701a      	strb	r2, [r3, #0]
    c83c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c840:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c844:	781a      	ldrb	r2, [r3, #0]
    c846:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c84a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c84e:	781b      	ldrb	r3, [r3, #0]
    c850:	4413      	add	r3, r2
    c852:	b2da      	uxtb	r2, r3
    c854:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c858:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c85c:	701a      	strb	r2, [r3, #0]
    c85e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c862:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c866:	781b      	ldrb	r3, [r3, #0]
    c868:	3301      	adds	r3, #1
    c86a:	b2da      	uxtb	r2, r3
    c86c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c870:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c874:	701a      	strb	r2, [r3, #0]
    c876:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c87a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c87e:	781b      	ldrb	r3, [r3, #0]
    c880:	2bff      	cmp	r3, #255	; 0xff
    c882:	d105      	bne.n	c890 <send_nav_ref+0x5e8>
    c884:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c888:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c88c:	2200      	movs	r2, #0
    c88e:	701a      	strb	r2, [r3, #0]
    c890:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c894:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c898:	781b      	ldrb	r3, [r3, #0]
    c89a:	461a      	mov	r2, r3
    c89c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c8a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8a4:	7819      	ldrb	r1, [r3, #0]
    c8a6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c8aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8ae:	5499      	strb	r1, [r3, r2]
    c8b0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c8b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8b8:	781b      	ldrb	r3, [r3, #0]
    c8ba:	3301      	adds	r3, #1
    c8bc:	b2da      	uxtb	r2, r3
    c8be:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c8c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8c6:	701a      	strb	r2, [r3, #0]
    c8c8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c8cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8d0:	781b      	ldrb	r3, [r3, #0]
    c8d2:	2bff      	cmp	r3, #255	; 0xff
    c8d4:	d105      	bne.n	c8e2 <send_nav_ref+0x63a>
    c8d6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c8da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8de:	2200      	movs	r2, #0
    c8e0:	701a      	strb	r2, [r3, #0]
    c8e2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c8e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8ea:	781b      	ldrb	r3, [r3, #0]
    c8ec:	461a      	mov	r2, r3
    c8ee:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c8f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8f6:	7819      	ldrb	r1, [r3, #0]
    c8f8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c8fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c900:	5499      	strb	r1, [r3, r2]
    c902:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c906:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c90a:	781b      	ldrb	r3, [r3, #0]
    c90c:	3301      	adds	r3, #1
    c90e:	b2da      	uxtb	r2, r3
    c910:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c914:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c918:	701a      	strb	r2, [r3, #0]
    c91a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c91e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c922:	781b      	ldrb	r3, [r3, #0]
    c924:	2bff      	cmp	r3, #255	; 0xff
    c926:	d105      	bne.n	c934 <send_nav_ref+0x68c>
    c928:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c92c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c930:	2200      	movs	r2, #0
    c932:	701a      	strb	r2, [r3, #0]
    c934:	f242 0339 	movw	r3, #8249	; 0x2039
    c938:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c93c:	781b      	ldrb	r3, [r3, #0]
    c93e:	b2db      	uxtb	r3, r3
    c940:	f003 0310 	and.w	r3, r3, #16
    c944:	2b00      	cmp	r3, #0
    c946:	d15a      	bne.n	c9fe <send_nav_ref+0x756>
    c948:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    c94c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c950:	781b      	ldrb	r3, [r3, #0]
    c952:	b2db      	uxtb	r3, r3
    c954:	461a      	mov	r2, r3
    c956:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c95a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c95e:	5c9a      	ldrb	r2, [r3, r2]
    c960:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    c964:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c968:	701a      	strb	r2, [r3, #0]
    c96a:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    c96e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c972:	2200      	movs	r2, #0
    c974:	701a      	strb	r2, [r3, #0]
    c976:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    c97a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c97e:	781b      	ldrb	r3, [r3, #0]
    c980:	b2db      	uxtb	r3, r3
    c982:	3301      	adds	r3, #1
    c984:	b2da      	uxtb	r2, r3
    c986:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    c98a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c98e:	701a      	strb	r2, [r3, #0]
    c990:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    c994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c998:	781b      	ldrb	r3, [r3, #0]
    c99a:	b2db      	uxtb	r3, r3
    c99c:	2bff      	cmp	r3, #255	; 0xff
    c99e:	d105      	bne.n	c9ac <send_nav_ref+0x704>
    c9a0:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    c9a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9a8:	2200      	movs	r2, #0
    c9aa:	701a      	strb	r2, [r3, #0]
    c9ac:	f242 0338 	movw	r3, #8248	; 0x2038
    c9b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9b4:	f242 0238 	movw	r2, #8248	; 0x2038
    c9b8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c9bc:	7812      	ldrb	r2, [r2, #0]
    c9be:	b2d2      	uxtb	r2, r2
    c9c0:	f042 0201 	orr.w	r2, r2, #1
    c9c4:	b2d2      	uxtb	r2, r2
    c9c6:	701a      	strb	r2, [r3, #0]
    c9c8:	f242 0339 	movw	r3, #8249	; 0x2039
    c9cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9d0:	f242 0239 	movw	r2, #8249	; 0x2039
    c9d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c9d8:	7812      	ldrb	r2, [r2, #0]
    c9da:	b2d2      	uxtb	r2, r2
    c9dc:	f042 0210 	orr.w	r2, r2, #16
    c9e0:	b2d2      	uxtb	r2, r2
    c9e2:	701a      	strb	r2, [r3, #0]
    c9e4:	e00b      	b.n	c9fe <send_nav_ref+0x756>
    c9e6:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    c9ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9ee:	781b      	ldrb	r3, [r3, #0]
    c9f0:	3301      	adds	r3, #1
    c9f2:	b2da      	uxtb	r2, r3
    c9f4:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    c9f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9fc:	701a      	strb	r2, [r3, #0]
  //vPrintString("S_13 reporting_task end!\n\r");
}
    c9fe:	46bd      	mov	sp, r7
    ca00:	f85d 7b04 	ldr.w	r7, [sp], #4
    ca04:	4770      	bx	lr
    ca06:	bf00      	nop
    ca08:	000188b7 	.word	0x000188b7

0000ca0c <inflight_calib_mode_update>:

/** \fn inline uint8_t inflight_calib_mode_update ( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t inflight_calib_mode_update ( void ) {
    ca0c:	b480      	push	{r7}
    ca0e:	b083      	sub	sp, #12
    ca10:	af00      	add	r7, sp, #0
  ModeUpdate(inflight_calib_mode, IF_CALIB_MODE_OF_PULSE(from_fbw.channels[RADIO_CALIB]));
    ca12:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    ca16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca1a:	8a1b      	ldrh	r3, [r3, #16]
    ca1c:	b21b      	sxth	r3, r3
    ca1e:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    ca22:	db0d      	blt.n	ca40 <inflight_calib_mode_update+0x34>
    ca24:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    ca28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca2c:	8a1b      	ldrh	r3, [r3, #16]
    ca2e:	b21a      	sxth	r2, r3
    ca30:	f640 437f 	movw	r3, #3199	; 0xc7f
    ca34:	429a      	cmp	r2, r3
    ca36:	bfd4      	ite	le
    ca38:	2300      	movle	r3, #0
    ca3a:	2301      	movgt	r3, #1
    ca3c:	b2db      	uxtb	r3, r3
    ca3e:	e000      	b.n	ca42 <inflight_calib_mode_update+0x36>
    ca40:	2302      	movs	r3, #2
    ca42:	71fb      	strb	r3, [r7, #7]
    ca44:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
    ca48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca4c:	781b      	ldrb	r3, [r3, #0]
    ca4e:	79fa      	ldrb	r2, [r7, #7]
    ca50:	429a      	cmp	r2, r3
    ca52:	d007      	beq.n	ca64 <inflight_calib_mode_update+0x58>
    ca54:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
    ca58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca5c:	79fa      	ldrb	r2, [r7, #7]
    ca5e:	701a      	strb	r2, [r3, #0]
    ca60:	2301      	movs	r3, #1
    ca62:	e000      	b.n	ca66 <inflight_calib_mode_update+0x5a>
    ca64:	2300      	movs	r3, #0
}
    ca66:	4618      	mov	r0, r3
    ca68:	370c      	adds	r7, #12
    ca6a:	46bd      	mov	sp, r7
    ca6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ca70:	4770      	bx	lr
    ca72:	bf00      	nop

0000ca74 <radio_control_task>:


/** \fn inline void radio_control_task( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
void radio_control_task( void ) {
    ca74:	b580      	push	{r7, lr}
    ca76:	b082      	sub	sp, #8
    ca78:	af00      	add	r7, sp, #0
  bool_t calib_mode_changed;
	//vPrintString("S_3 radio_control_task start! \n\r"); //SunnyBeike
    //add by wanbo
    link_fbw_receive_valid = 1;
    ca7a:	f64a 33e6 	movw	r3, #44006	; 0xabe6
    ca7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca82:	2201      	movs	r2, #1
    ca84:	701a      	strb	r2, [r3, #0]
  if (link_fbw_receive_valid) {
    ca86:	f64a 33e6 	movw	r3, #44006	; 0xabe6
    ca8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca8e:	781b      	ldrb	r3, [r3, #0]
    ca90:	b2db      	uxtb	r3, r3
    ca92:	2b00      	cmp	r3, #0
    ca94:	f000 83b8 	beq.w	d208 <radio_control_task+0x794>
    uint8_t mode_changed = FALSE;
    ca98:	2300      	movs	r3, #0
    ca9a:	71fb      	strb	r3, [r7, #7]
    copy_from_to_fbw();
    ca9c:	f7fa fa9c 	bl	6fd8 <copy_from_to_fbw>
    if ((bit_is_set(from_fbw.status, RADIO_REALLY_LOST) && (pprz_mode == PPRZ_MODE_AUTO1 || pprz_mode == PPRZ_MODE_MANUAL)) || too_far_from_home) {
    caa0:	4b3a      	ldr	r3, [pc, #232]	; (cb8c <radio_control_task+0x118>)
    caa2:	781b      	ldrb	r3, [r3, #0]
    caa4:	b2db      	uxtb	r3, r3
    caa6:	f003 0302 	and.w	r3, r3, #2
    caaa:	2b00      	cmp	r3, #0
    caac:	d00d      	beq.n	caca <radio_control_task+0x56>
    caae:	f64a 2394 	movw	r3, #43668	; 0xaa94
    cab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cab6:	781b      	ldrb	r3, [r3, #0]
    cab8:	2b01      	cmp	r3, #1
    caba:	d00d      	beq.n	cad8 <radio_control_task+0x64>
    cabc:	f64a 2394 	movw	r3, #43668	; 0xaa94
    cac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cac4:	781b      	ldrb	r3, [r3, #0]
    cac6:	2b00      	cmp	r3, #0
    cac8:	d006      	beq.n	cad8 <radio_control_task+0x64>
    caca:	f64a 6344 	movw	r3, #44612	; 0xae44
    cace:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cad2:	781b      	ldrb	r3, [r3, #0]
    cad4:	2b00      	cmp	r3, #0
    cad6:	d007      	beq.n	cae8 <radio_control_task+0x74>
      pprz_mode = PPRZ_MODE_HOME;
    cad8:	f64a 2394 	movw	r3, #43668	; 0xaa94
    cadc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cae0:	2203      	movs	r2, #3
    cae2:	701a      	strb	r2, [r3, #0]
      mode_changed = TRUE;
    cae4:	2301      	movs	r3, #1
    cae6:	71fb      	strb	r3, [r7, #7]
    }
    // modified by wanbo
    //if (bit_is_set(from_fbw.status, AVERAGED_CHANNELS_SENT)) 
    {
      bool_t pprz_mode_changed = pprz_mode_update();
    cae8:	f7fa f950 	bl	6d8c <pprz_mode_update>
    caec:	4603      	mov	r3, r0
    caee:	71bb      	strb	r3, [r7, #6]
      mode_changed |= pprz_mode_changed;
    caf0:	79fa      	ldrb	r2, [r7, #7]
    caf2:	79bb      	ldrb	r3, [r7, #6]
    caf4:	4313      	orrs	r3, r2
    caf6:	71fb      	strb	r3, [r7, #7]
#ifdef RADIO_LLS
      mode_changed |= ir_estim_mode_update();
    caf8:	f7fa f994 	bl	6e24 <ir_estim_mode_update>
    cafc:	4603      	mov	r3, r0
    cafe:	461a      	mov	r2, r3
    cb00:	79fb      	ldrb	r3, [r7, #7]
    cb02:	4313      	orrs	r3, r2
    cb04:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef RADIO_CALIB
      calib_mode_changed = inflight_calib_mode_update();
    cb06:	f7ff ff81 	bl	ca0c <inflight_calib_mode_update>
    cb0a:	4603      	mov	r3, r0
    cb0c:	717b      	strb	r3, [r7, #5]
      inflight_calib(calib_mode_changed || pprz_mode_changed);
    cb0e:	797b      	ldrb	r3, [r7, #5]
    cb10:	2b00      	cmp	r3, #0
    cb12:	d102      	bne.n	cb1a <radio_control_task+0xa6>
    cb14:	79bb      	ldrb	r3, [r7, #6]
    cb16:	2b00      	cmp	r3, #0
    cb18:	d001      	beq.n	cb1e <radio_control_task+0xaa>
    cb1a:	2301      	movs	r3, #1
    cb1c:	e000      	b.n	cb20 <radio_control_task+0xac>
    cb1e:	2300      	movs	r3, #0
    cb20:	b2db      	uxtb	r3, r3
    cb22:	4618      	mov	r0, r3
    cb24:	f008 fba0 	bl	15268 <inflight_calib>
      mode_changed |= calib_mode_changed;
    cb28:	79fa      	ldrb	r2, [r7, #7]
    cb2a:	797b      	ldrb	r3, [r7, #5]
    cb2c:	4313      	orrs	r3, r2
    cb2e:	71fb      	strb	r3, [r7, #7]
#endif
    }
    mode_changed |= mcu1_status_update();
    cb30:	f7fa f9a0 	bl	6e74 <mcu1_status_update>
    cb34:	4603      	mov	r3, r0
    cb36:	461a      	mov	r2, r3
    cb38:	79fb      	ldrb	r3, [r7, #7]
    cb3a:	4313      	orrs	r3, r2
    cb3c:	71fb      	strb	r3, [r7, #7]
    // add by wanbo
    mode_changed = 1;
    cb3e:	2301      	movs	r3, #1
    cb40:	71fb      	strb	r3, [r7, #7]
    if ( mode_changed )
    cb42:	79fb      	ldrb	r3, [r7, #7]
    cb44:	2b00      	cmp	r3, #0
    cb46:	f000 82bc 	beq.w	d0c2 <radio_control_task+0x64e>
      DOWNLINK_SEND_PPRZ_MODE(&pprz_mode, &vertical_mode, &inflight_calib_mode, &mcu1_status, &ir_estim_mode);
    cb4a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cb4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb52:	781a      	ldrb	r2, [r3, #0]
    cb54:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    cb58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb5c:	781b      	ldrb	r3, [r3, #0]
    cb5e:	b2db      	uxtb	r3, r3
    cb60:	429a      	cmp	r2, r3
    cb62:	d315      	bcc.n	cb90 <radio_control_task+0x11c>
    cb64:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    cb68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb6c:	781b      	ldrb	r3, [r3, #0]
    cb6e:	b2db      	uxtb	r3, r3
    cb70:	461a      	mov	r2, r3
    cb72:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cb76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb7a:	781b      	ldrb	r3, [r3, #0]
    cb7c:	1ad3      	subs	r3, r2, r3
    cb7e:	33ff      	adds	r3, #255	; 0xff
    cb80:	2b09      	cmp	r3, #9
    cb82:	bfd4      	ite	le
    cb84:	2300      	movle	r3, #0
    cb86:	2301      	movgt	r3, #1
    cb88:	b2db      	uxtb	r3, r3
    cb8a:	e013      	b.n	cbb4 <radio_control_task+0x140>
    cb8c:	2000abcb 	.word	0x2000abcb
    cb90:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    cb94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb98:	781b      	ldrb	r3, [r3, #0]
    cb9a:	b2db      	uxtb	r3, r3
    cb9c:	461a      	mov	r2, r3
    cb9e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cba2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cba6:	781b      	ldrb	r3, [r3, #0]
    cba8:	1ad3      	subs	r3, r2, r3
    cbaa:	2b09      	cmp	r3, #9
    cbac:	bfd4      	ite	le
    cbae:	2300      	movle	r3, #0
    cbb0:	2301      	movgt	r3, #1
    cbb2:	b2db      	uxtb	r3, r3
    cbb4:	2b00      	cmp	r3, #0
    cbb6:	f000 8278 	beq.w	d0aa <radio_control_task+0x636>
    cbba:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cbbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbc2:	781b      	ldrb	r3, [r3, #0]
    cbc4:	461a      	mov	r2, r3
    cbc6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    cbca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbce:	2105      	movs	r1, #5
    cbd0:	5499      	strb	r1, [r3, r2]
    cbd2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cbd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbda:	781b      	ldrb	r3, [r3, #0]
    cbdc:	3301      	adds	r3, #1
    cbde:	b2da      	uxtb	r2, r3
    cbe0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cbe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbe8:	701a      	strb	r2, [r3, #0]
    cbea:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cbee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbf2:	781b      	ldrb	r3, [r3, #0]
    cbf4:	2bff      	cmp	r3, #255	; 0xff
    cbf6:	d105      	bne.n	cc04 <radio_control_task+0x190>
    cbf8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cbfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc00:	2200      	movs	r2, #0
    cc02:	701a      	strb	r2, [r3, #0]
    cc04:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cc08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc0c:	781b      	ldrb	r3, [r3, #0]
    cc0e:	461a      	mov	r2, r3
    cc10:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    cc14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc18:	210b      	movs	r1, #11
    cc1a:	5499      	strb	r1, [r3, r2]
    cc1c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cc20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc24:	781b      	ldrb	r3, [r3, #0]
    cc26:	3301      	adds	r3, #1
    cc28:	b2da      	uxtb	r2, r3
    cc2a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cc2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc32:	701a      	strb	r2, [r3, #0]
    cc34:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cc38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc3c:	781b      	ldrb	r3, [r3, #0]
    cc3e:	2bff      	cmp	r3, #255	; 0xff
    cc40:	d105      	bne.n	cc4e <radio_control_task+0x1da>
    cc42:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cc46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc4a:	2200      	movs	r2, #0
    cc4c:	701a      	strb	r2, [r3, #0]
    cc4e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    cc52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc56:	220b      	movs	r2, #11
    cc58:	701a      	strb	r2, [r3, #0]
    cc5a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    cc5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc62:	220b      	movs	r2, #11
    cc64:	701a      	strb	r2, [r3, #0]
    cc66:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cc6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc6e:	781b      	ldrb	r3, [r3, #0]
    cc70:	461a      	mov	r2, r3
    cc72:	f64a 2394 	movw	r3, #43668	; 0xaa94
    cc76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc7a:	7819      	ldrb	r1, [r3, #0]
    cc7c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    cc80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc84:	5499      	strb	r1, [r3, r2]
    cc86:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    cc8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc8e:	781a      	ldrb	r2, [r3, #0]
    cc90:	f64a 2394 	movw	r3, #43668	; 0xaa94
    cc94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc98:	781b      	ldrb	r3, [r3, #0]
    cc9a:	4413      	add	r3, r2
    cc9c:	b2da      	uxtb	r2, r3
    cc9e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    cca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cca6:	701a      	strb	r2, [r3, #0]
    cca8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ccac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccb0:	781a      	ldrb	r2, [r3, #0]
    ccb2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ccb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccba:	781b      	ldrb	r3, [r3, #0]
    ccbc:	4413      	add	r3, r2
    ccbe:	b2da      	uxtb	r2, r3
    ccc0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ccc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccc8:	701a      	strb	r2, [r3, #0]
    ccca:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ccce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccd2:	781b      	ldrb	r3, [r3, #0]
    ccd4:	3301      	adds	r3, #1
    ccd6:	b2da      	uxtb	r2, r3
    ccd8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ccdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cce0:	701a      	strb	r2, [r3, #0]
    cce2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cce6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccea:	781b      	ldrb	r3, [r3, #0]
    ccec:	2bff      	cmp	r3, #255	; 0xff
    ccee:	d105      	bne.n	ccfc <radio_control_task+0x288>
    ccf0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ccf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccf8:	2200      	movs	r2, #0
    ccfa:	701a      	strb	r2, [r3, #0]
    ccfc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cd00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd04:	781b      	ldrb	r3, [r3, #0]
    cd06:	461a      	mov	r2, r3
    cd08:	f64a 2395 	movw	r3, #43669	; 0xaa95
    cd0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd10:	7819      	ldrb	r1, [r3, #0]
    cd12:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    cd16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd1a:	5499      	strb	r1, [r3, r2]
    cd1c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    cd20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd24:	781a      	ldrb	r2, [r3, #0]
    cd26:	f64a 2395 	movw	r3, #43669	; 0xaa95
    cd2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd2e:	781b      	ldrb	r3, [r3, #0]
    cd30:	4413      	add	r3, r2
    cd32:	b2da      	uxtb	r2, r3
    cd34:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    cd38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd3c:	701a      	strb	r2, [r3, #0]
    cd3e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    cd42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd46:	781a      	ldrb	r2, [r3, #0]
    cd48:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    cd4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd50:	781b      	ldrb	r3, [r3, #0]
    cd52:	4413      	add	r3, r2
    cd54:	b2da      	uxtb	r2, r3
    cd56:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    cd5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd5e:	701a      	strb	r2, [r3, #0]
    cd60:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cd64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd68:	781b      	ldrb	r3, [r3, #0]
    cd6a:	3301      	adds	r3, #1
    cd6c:	b2da      	uxtb	r2, r3
    cd6e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cd72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd76:	701a      	strb	r2, [r3, #0]
    cd78:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cd7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd80:	781b      	ldrb	r3, [r3, #0]
    cd82:	2bff      	cmp	r3, #255	; 0xff
    cd84:	d105      	bne.n	cd92 <radio_control_task+0x31e>
    cd86:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cd8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd8e:	2200      	movs	r2, #0
    cd90:	701a      	strb	r2, [r3, #0]
    cd92:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cd96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd9a:	781b      	ldrb	r3, [r3, #0]
    cd9c:	461a      	mov	r2, r3
    cd9e:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
    cda2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cda6:	7819      	ldrb	r1, [r3, #0]
    cda8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    cdac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdb0:	5499      	strb	r1, [r3, r2]
    cdb2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    cdb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdba:	781a      	ldrb	r2, [r3, #0]
    cdbc:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
    cdc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdc4:	781b      	ldrb	r3, [r3, #0]
    cdc6:	4413      	add	r3, r2
    cdc8:	b2da      	uxtb	r2, r3
    cdca:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    cdce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdd2:	701a      	strb	r2, [r3, #0]
    cdd4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    cdd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cddc:	781a      	ldrb	r2, [r3, #0]
    cdde:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    cde2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cde6:	781b      	ldrb	r3, [r3, #0]
    cde8:	4413      	add	r3, r2
    cdea:	b2da      	uxtb	r2, r3
    cdec:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    cdf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdf4:	701a      	strb	r2, [r3, #0]
    cdf6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cdfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdfe:	781b      	ldrb	r3, [r3, #0]
    ce00:	3301      	adds	r3, #1
    ce02:	b2da      	uxtb	r2, r3
    ce04:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ce08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce0c:	701a      	strb	r2, [r3, #0]
    ce0e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ce12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce16:	781b      	ldrb	r3, [r3, #0]
    ce18:	2bff      	cmp	r3, #255	; 0xff
    ce1a:	d105      	bne.n	ce28 <radio_control_task+0x3b4>
    ce1c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ce20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce24:	2200      	movs	r2, #0
    ce26:	701a      	strb	r2, [r3, #0]
    ce28:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ce2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce30:	781b      	ldrb	r3, [r3, #0]
    ce32:	461a      	mov	r2, r3
    ce34:	f64a 239b 	movw	r3, #43675	; 0xaa9b
    ce38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce3c:	7819      	ldrb	r1, [r3, #0]
    ce3e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ce42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce46:	5499      	strb	r1, [r3, r2]
    ce48:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ce4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce50:	781a      	ldrb	r2, [r3, #0]
    ce52:	f64a 239b 	movw	r3, #43675	; 0xaa9b
    ce56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce5a:	781b      	ldrb	r3, [r3, #0]
    ce5c:	4413      	add	r3, r2
    ce5e:	b2da      	uxtb	r2, r3
    ce60:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ce64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce68:	701a      	strb	r2, [r3, #0]
    ce6a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ce6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce72:	781a      	ldrb	r2, [r3, #0]
    ce74:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ce78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce7c:	781b      	ldrb	r3, [r3, #0]
    ce7e:	4413      	add	r3, r2
    ce80:	b2da      	uxtb	r2, r3
    ce82:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ce86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce8a:	701a      	strb	r2, [r3, #0]
    ce8c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ce90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce94:	781b      	ldrb	r3, [r3, #0]
    ce96:	3301      	adds	r3, #1
    ce98:	b2da      	uxtb	r2, r3
    ce9a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ce9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cea2:	701a      	strb	r2, [r3, #0]
    cea4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ceac:	781b      	ldrb	r3, [r3, #0]
    ceae:	2bff      	cmp	r3, #255	; 0xff
    ceb0:	d105      	bne.n	cebe <radio_control_task+0x44a>
    ceb2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ceb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ceba:	2200      	movs	r2, #0
    cebc:	701a      	strb	r2, [r3, #0]
    cebe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cec2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cec6:	781b      	ldrb	r3, [r3, #0]
    cec8:	461a      	mov	r2, r3
    ceca:	f240 2380 	movw	r3, #640	; 0x280
    cece:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ced2:	7819      	ldrb	r1, [r3, #0]
    ced4:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ced8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cedc:	5499      	strb	r1, [r3, r2]
    cede:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    cee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cee6:	781a      	ldrb	r2, [r3, #0]
    cee8:	f240 2380 	movw	r3, #640	; 0x280
    ceec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cef0:	781b      	ldrb	r3, [r3, #0]
    cef2:	4413      	add	r3, r2
    cef4:	b2da      	uxtb	r2, r3
    cef6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    cefa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cefe:	701a      	strb	r2, [r3, #0]
    cf00:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    cf04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf08:	781a      	ldrb	r2, [r3, #0]
    cf0a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    cf0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf12:	781b      	ldrb	r3, [r3, #0]
    cf14:	4413      	add	r3, r2
    cf16:	b2da      	uxtb	r2, r3
    cf18:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    cf1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf20:	701a      	strb	r2, [r3, #0]
    cf22:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cf26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf2a:	781b      	ldrb	r3, [r3, #0]
    cf2c:	3301      	adds	r3, #1
    cf2e:	b2da      	uxtb	r2, r3
    cf30:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cf34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf38:	701a      	strb	r2, [r3, #0]
    cf3a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cf3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf42:	781b      	ldrb	r3, [r3, #0]
    cf44:	2bff      	cmp	r3, #255	; 0xff
    cf46:	d105      	bne.n	cf54 <radio_control_task+0x4e0>
    cf48:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cf4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf50:	2200      	movs	r2, #0
    cf52:	701a      	strb	r2, [r3, #0]
    cf54:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cf58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf5c:	781b      	ldrb	r3, [r3, #0]
    cf5e:	461a      	mov	r2, r3
    cf60:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    cf64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf68:	7819      	ldrb	r1, [r3, #0]
    cf6a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    cf6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf72:	5499      	strb	r1, [r3, r2]
    cf74:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cf78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf7c:	781b      	ldrb	r3, [r3, #0]
    cf7e:	3301      	adds	r3, #1
    cf80:	b2da      	uxtb	r2, r3
    cf82:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cf86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf8a:	701a      	strb	r2, [r3, #0]
    cf8c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cf90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf94:	781b      	ldrb	r3, [r3, #0]
    cf96:	2bff      	cmp	r3, #255	; 0xff
    cf98:	d105      	bne.n	cfa6 <radio_control_task+0x532>
    cf9a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cf9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfa2:	2200      	movs	r2, #0
    cfa4:	701a      	strb	r2, [r3, #0]
    cfa6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cfaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfae:	781b      	ldrb	r3, [r3, #0]
    cfb0:	461a      	mov	r2, r3
    cfb2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    cfb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfba:	7819      	ldrb	r1, [r3, #0]
    cfbc:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    cfc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfc4:	5499      	strb	r1, [r3, r2]
    cfc6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cfca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfce:	781b      	ldrb	r3, [r3, #0]
    cfd0:	3301      	adds	r3, #1
    cfd2:	b2da      	uxtb	r2, r3
    cfd4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cfd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfdc:	701a      	strb	r2, [r3, #0]
    cfde:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cfe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfe6:	781b      	ldrb	r3, [r3, #0]
    cfe8:	2bff      	cmp	r3, #255	; 0xff
    cfea:	d105      	bne.n	cff8 <radio_control_task+0x584>
    cfec:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cff4:	2200      	movs	r2, #0
    cff6:	701a      	strb	r2, [r3, #0]
    cff8:	f242 0339 	movw	r3, #8249	; 0x2039
    cffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d000:	781b      	ldrb	r3, [r3, #0]
    d002:	b2db      	uxtb	r3, r3
    d004:	f003 0310 	and.w	r3, r3, #16
    d008:	2b00      	cmp	r3, #0
    d00a:	d15a      	bne.n	d0c2 <radio_control_task+0x64e>
    d00c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    d010:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d014:	781b      	ldrb	r3, [r3, #0]
    d016:	b2db      	uxtb	r3, r3
    d018:	461a      	mov	r2, r3
    d01a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d01e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d022:	5c9a      	ldrb	r2, [r3, r2]
    d024:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    d028:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d02c:	701a      	strb	r2, [r3, #0]
    d02e:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    d032:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d036:	2200      	movs	r2, #0
    d038:	701a      	strb	r2, [r3, #0]
    d03a:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    d03e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d042:	781b      	ldrb	r3, [r3, #0]
    d044:	b2db      	uxtb	r3, r3
    d046:	3301      	adds	r3, #1
    d048:	b2da      	uxtb	r2, r3
    d04a:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    d04e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d052:	701a      	strb	r2, [r3, #0]
    d054:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    d058:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d05c:	781b      	ldrb	r3, [r3, #0]
    d05e:	b2db      	uxtb	r3, r3
    d060:	2bff      	cmp	r3, #255	; 0xff
    d062:	d105      	bne.n	d070 <radio_control_task+0x5fc>
    d064:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    d068:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d06c:	2200      	movs	r2, #0
    d06e:	701a      	strb	r2, [r3, #0]
    d070:	f242 0338 	movw	r3, #8248	; 0x2038
    d074:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d078:	f242 0238 	movw	r2, #8248	; 0x2038
    d07c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d080:	7812      	ldrb	r2, [r2, #0]
    d082:	b2d2      	uxtb	r2, r2
    d084:	f042 0201 	orr.w	r2, r2, #1
    d088:	b2d2      	uxtb	r2, r2
    d08a:	701a      	strb	r2, [r3, #0]
    d08c:	f242 0339 	movw	r3, #8249	; 0x2039
    d090:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d094:	f242 0239 	movw	r2, #8249	; 0x2039
    d098:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d09c:	7812      	ldrb	r2, [r2, #0]
    d09e:	b2d2      	uxtb	r2, r2
    d0a0:	f042 0210 	orr.w	r2, r2, #16
    d0a4:	b2d2      	uxtb	r2, r2
    d0a6:	701a      	strb	r2, [r3, #0]
    d0a8:	e00b      	b.n	d0c2 <radio_control_task+0x64e>
    d0aa:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    d0ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0b2:	781b      	ldrb	r3, [r3, #0]
    d0b4:	3301      	adds	r3, #1
    d0b6:	b2da      	uxtb	r2, r3
    d0b8:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    d0bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0c0:	701a      	strb	r2, [r3, #0]
      
    // add by wanbo
    //if (pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_roll = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_ROLL], 0., -0.6);
    d0c2:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    d0c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0ca:	885b      	ldrh	r3, [r3, #2]
    d0cc:	b21b      	sxth	r3, r3
    d0ce:	4618      	mov	r0, r3
    d0d0:	f00b f862 	bl	18198 <__aeabi_i2f>
    d0d4:	4603      	mov	r3, r0
    d0d6:	4618      	mov	r0, r3
    d0d8:	f04f 0100 	mov.w	r1, #0
    d0dc:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d0e0:	f00b f962 	bl	183a8 <__aeabi_fdiv>
    d0e4:	4603      	mov	r3, r0
    d0e6:	4618      	mov	r0, r3
    d0e8:	f00a fc16 	bl	17918 <__aeabi_f2d>
    d0ec:	4602      	mov	r2, r0
    d0ee:	460b      	mov	r3, r1
    d0f0:	4610      	mov	r0, r2
    d0f2:	4619      	mov	r1, r3
    d0f4:	a346      	add	r3, pc, #280	; (adr r3, d210 <radio_control_task+0x79c>)
    d0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    d0fa:	f00a fc61 	bl	179c0 <__aeabi_dmul>
    d0fe:	4602      	mov	r2, r0
    d100:	460b      	mov	r3, r1
    d102:	4610      	mov	r0, r2
    d104:	4619      	mov	r1, r3
    d106:	f04f 0200 	mov.w	r2, #0
    d10a:	f04f 0300 	mov.w	r3, #0
    d10e:	f00a faa5 	bl	1765c <__adddf3>
    d112:	4602      	mov	r2, r0
    d114:	460b      	mov	r3, r1
    d116:	4610      	mov	r0, r2
    d118:	4619      	mov	r1, r3
    d11a:	f00a ff33 	bl	17f84 <__aeabi_d2f>
    d11e:	4602      	mov	r2, r0
    d120:	f64a 53dc 	movw	r3, #44508	; 0xaddc
    d124:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d128:	601a      	str	r2, [r3, #0]
      desired_pitch = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_PITCH], 0., 0.5);
    d12a:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    d12e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d132:	889b      	ldrh	r3, [r3, #4]
    d134:	b21b      	sxth	r3, r3
    d136:	4618      	mov	r0, r3
    d138:	f00b f82e 	bl	18198 <__aeabi_i2f>
    d13c:	4603      	mov	r3, r0
    d13e:	4618      	mov	r0, r3
    d140:	f04f 0100 	mov.w	r1, #0
    d144:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d148:	f00b f92e 	bl	183a8 <__aeabi_fdiv>
    d14c:	4603      	mov	r3, r0
    d14e:	4618      	mov	r0, r3
    d150:	f00a fbe2 	bl	17918 <__aeabi_f2d>
    d154:	4602      	mov	r2, r0
    d156:	460b      	mov	r3, r1
    d158:	4610      	mov	r0, r2
    d15a:	4619      	mov	r1, r3
    d15c:	f04f 0200 	mov.w	r2, #0
    d160:	f04f 0300 	mov.w	r3, #0
    d164:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
    d168:	f00a fc2a 	bl	179c0 <__aeabi_dmul>
    d16c:	4602      	mov	r2, r0
    d16e:	460b      	mov	r3, r1
    d170:	4610      	mov	r0, r2
    d172:	4619      	mov	r1, r3
    d174:	f04f 0200 	mov.w	r2, #0
    d178:	f04f 0300 	mov.w	r3, #0
    d17c:	f00a fa6e 	bl	1765c <__adddf3>
    d180:	4602      	mov	r2, r0
    d182:	460b      	mov	r3, r1
    d184:	4610      	mov	r0, r2
    d186:	4619      	mov	r1, r3
    d188:	f00a fefc 	bl	17f84 <__aeabi_d2f>
    d18c:	4602      	mov	r2, r0
    d18e:	f64a 53e0 	movw	r3, #44512	; 0xade0
    d192:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d196:	601a      	str	r2, [r3, #0]
    } // else asynchronously set by course_pid_run()

    // add by wanbo
   // if (pprz_mode == PPRZ_MODE_MANUAL || pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_gaz = from_fbw.channels[RADIO_THROTTLE];
    d198:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    d19c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1a0:	881a      	ldrh	r2, [r3, #0]
    d1a2:	f64a 53e4 	movw	r3, #44516	; 0xade4
    d1a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1aa:	801a      	strh	r2, [r3, #0]
      pitch_pgain = PITCH_PGAIN * ( 1 - 1. / 3. * from_fbw.channels[RADIO_THROTTLE] / MAX_PPRZ);
#endif /* ANTON_MAGICAL_MISTERY_GAINS */
    }
    // else asynchronously set by climb_pid_run();

    mcu1_ppm_cpt = from_fbw.ppm_cpt;
    d1ac:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    d1b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1b4:	7c9a      	ldrb	r2, [r3, #18]
    d1b6:	f64a 239c 	movw	r3, #43676	; 0xaa9c
    d1ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1be:	701a      	strb	r2, [r3, #0]
    vsupply = from_fbw.vsupply;
    d1c0:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    d1c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1c8:	7d5a      	ldrb	r2, [r3, #21]
    d1ca:	f64a 239a 	movw	r3, #43674	; 0xaa9a
    d1ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1d2:	701a      	strb	r2, [r3, #0]

    events_update();
    d1d4:	f7f9 fe7e 	bl	6ed4 <events_update>

    // add by wanbo
    //if (!estimator_flight_time) 
    {
      ground_calibrate();
    d1d8:	f7f8 fc7e 	bl	5ad8 <ground_calibrate>
      if (pprz_mode == PPRZ_MODE_AUTO2 && from_fbw.channels[RADIO_THROTTLE] > GAZ_THRESHOLD_TAKEOFF) {
    d1dc:	f64a 2394 	movw	r3, #43668	; 0xaa94
    d1e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1e4:	781b      	ldrb	r3, [r3, #0]
    d1e6:	2b02      	cmp	r3, #2
    d1e8:	d10e      	bne.n	d208 <radio_control_task+0x794>
    d1ea:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    d1ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1f2:	881b      	ldrh	r3, [r3, #0]
    d1f4:	b21b      	sxth	r3, r3
    d1f6:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
    d1fa:	dd05      	ble.n	d208 <radio_control_task+0x794>
	launch = TRUE;
    d1fc:	f64a 23a8 	movw	r3, #43688	; 0xaaa8
    d200:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d204:	2201      	movs	r2, #1
    d206:	701a      	strb	r2, [r3, #0]
      }
    }
  }

	//vPrintString("S_3 radio_control_task end! \n\r"); //SunnyBeike
}
    d208:	3708      	adds	r7, #8
    d20a:	46bd      	mov	sp, r7
    d20c:	bd80      	pop	{r7, pc}
    d20e:	bf00      	nop
    d210:	33333333 	.word	0x33333333
    d214:	bfe33333 	.word	0xbfe33333

0000d218 <navigation_update>:

/** \fn void navigation_task( void )
 *  \brief Compute desired_course
 */
void navigation_update( void ) {
    d218:	b580      	push	{r7, lr}
    d21a:	af00      	add	r7, sp, #0

  /* Default to keep compatibility with previous behaviour */
  //vPrintString("S_17 Navigation task start!\n\r");
  lateral_mode = LATERAL_MODE_COURSE;
    d21c:	f64a 2396 	movw	r3, #43670	; 0xaa96
    d220:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d224:	2203      	movs	r2, #3
    d226:	701a      	strb	r2, [r3, #0]
  if (pprz_mode == PPRZ_MODE_HOME)
    d228:	f64a 2394 	movw	r3, #43668	; 0xaa94
    d22c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d230:	781b      	ldrb	r3, [r3, #0]
    d232:	2b03      	cmp	r3, #3
    d234:	d102      	bne.n	d23c <navigation_update+0x24>
    nav_home();
    d236:	f007 fa9b 	bl	14770 <nav_home>
    d23a:	e001      	b.n	d240 <navigation_update+0x28>
  else
    nav_update();
    d23c:	f007 fabe 	bl	147bc <nav_update>
}
    d240:	bd80      	pop	{r7, pc}
    d242:	bf00      	nop

0000d244 <send_nav_values>:

void send_nav_values(void){
    d244:	b480      	push	{r7}
    d246:	af00      	add	r7, sp, #0
  
  DOWNLINK_SEND_NAVIGATION(&nav_block, &nav_stage, &estimator_x, &estimator_y, &desired_course, &dist2_to_wp, &course_pgain, &dist2_to_home);
    d248:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d24c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d250:	781a      	ldrb	r2, [r3, #0]
    d252:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    d256:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d25a:	781b      	ldrb	r3, [r3, #0]
    d25c:	b2db      	uxtb	r3, r3
    d25e:	429a      	cmp	r2, r3
    d260:	d313      	bcc.n	d28a <send_nav_values+0x46>
    d262:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    d266:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d26a:	781b      	ldrb	r3, [r3, #0]
    d26c:	b2db      	uxtb	r3, r3
    d26e:	461a      	mov	r2, r3
    d270:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d274:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d278:	781b      	ldrb	r3, [r3, #0]
    d27a:	1ad3      	subs	r3, r2, r3
    d27c:	33ff      	adds	r3, #255	; 0xff
    d27e:	2b1e      	cmp	r3, #30
    d280:	bfd4      	ite	le
    d282:	2300      	movle	r3, #0
    d284:	2301      	movgt	r3, #1
    d286:	b2db      	uxtb	r3, r3
    d288:	e011      	b.n	d2ae <send_nav_values+0x6a>
    d28a:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    d28e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d292:	781b      	ldrb	r3, [r3, #0]
    d294:	b2db      	uxtb	r3, r3
    d296:	461a      	mov	r2, r3
    d298:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d29c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2a0:	781b      	ldrb	r3, [r3, #0]
    d2a2:	1ad3      	subs	r3, r2, r3
    d2a4:	2b1e      	cmp	r3, #30
    d2a6:	bfd4      	ite	le
    d2a8:	2300      	movle	r3, #0
    d2aa:	2301      	movgt	r3, #1
    d2ac:	b2db      	uxtb	r3, r3
    d2ae:	2b00      	cmp	r3, #0
    d2b0:	f001 8094 	beq.w	e3dc <send_nav_values+0x1198>
    d2b4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d2b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2bc:	781b      	ldrb	r3, [r3, #0]
    d2be:	461a      	mov	r2, r3
    d2c0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d2c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2c8:	2105      	movs	r1, #5
    d2ca:	5499      	strb	r1, [r3, r2]
    d2cc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d2d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2d4:	781b      	ldrb	r3, [r3, #0]
    d2d6:	3301      	adds	r3, #1
    d2d8:	b2da      	uxtb	r2, r3
    d2da:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d2de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2e2:	701a      	strb	r2, [r3, #0]
    d2e4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d2e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2ec:	781b      	ldrb	r3, [r3, #0]
    d2ee:	2bff      	cmp	r3, #255	; 0xff
    d2f0:	d105      	bne.n	d2fe <send_nav_values+0xba>
    d2f2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d2f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2fa:	2200      	movs	r2, #0
    d2fc:	701a      	strb	r2, [r3, #0]
    d2fe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d302:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d306:	781b      	ldrb	r3, [r3, #0]
    d308:	461a      	mov	r2, r3
    d30a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d30e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d312:	210a      	movs	r1, #10
    d314:	5499      	strb	r1, [r3, r2]
    d316:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d31a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d31e:	781b      	ldrb	r3, [r3, #0]
    d320:	3301      	adds	r3, #1
    d322:	b2da      	uxtb	r2, r3
    d324:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d328:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d32c:	701a      	strb	r2, [r3, #0]
    d32e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d332:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d336:	781b      	ldrb	r3, [r3, #0]
    d338:	2bff      	cmp	r3, #255	; 0xff
    d33a:	d105      	bne.n	d348 <send_nav_values+0x104>
    d33c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d340:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d344:	2200      	movs	r2, #0
    d346:	701a      	strb	r2, [r3, #0]
    d348:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d34c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d350:	220a      	movs	r2, #10
    d352:	701a      	strb	r2, [r3, #0]
    d354:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d358:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d35c:	220a      	movs	r2, #10
    d35e:	701a      	strb	r2, [r3, #0]
    d360:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d364:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d368:	781b      	ldrb	r3, [r3, #0]
    d36a:	461a      	mov	r2, r3
    d36c:	f64a 6309 	movw	r3, #44553	; 0xae09
    d370:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d374:	7819      	ldrb	r1, [r3, #0]
    d376:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d37a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d37e:	5499      	strb	r1, [r3, r2]
    d380:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d384:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d388:	781a      	ldrb	r2, [r3, #0]
    d38a:	f64a 6309 	movw	r3, #44553	; 0xae09
    d38e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d392:	781b      	ldrb	r3, [r3, #0]
    d394:	4413      	add	r3, r2
    d396:	b2da      	uxtb	r2, r3
    d398:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d39c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3a0:	701a      	strb	r2, [r3, #0]
    d3a2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d3a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3aa:	781a      	ldrb	r2, [r3, #0]
    d3ac:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d3b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3b4:	781b      	ldrb	r3, [r3, #0]
    d3b6:	4413      	add	r3, r2
    d3b8:	b2da      	uxtb	r2, r3
    d3ba:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d3be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3c2:	701a      	strb	r2, [r3, #0]
    d3c4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d3c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3cc:	781b      	ldrb	r3, [r3, #0]
    d3ce:	3301      	adds	r3, #1
    d3d0:	b2da      	uxtb	r2, r3
    d3d2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d3d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3da:	701a      	strb	r2, [r3, #0]
    d3dc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d3e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3e4:	781b      	ldrb	r3, [r3, #0]
    d3e6:	2bff      	cmp	r3, #255	; 0xff
    d3e8:	d105      	bne.n	d3f6 <send_nav_values+0x1b2>
    d3ea:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d3ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3f2:	2200      	movs	r2, #0
    d3f4:	701a      	strb	r2, [r3, #0]
    d3f6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d3fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3fe:	781b      	ldrb	r3, [r3, #0]
    d400:	461a      	mov	r2, r3
    d402:	f64a 6308 	movw	r3, #44552	; 0xae08
    d406:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d40a:	7819      	ldrb	r1, [r3, #0]
    d40c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d410:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d414:	5499      	strb	r1, [r3, r2]
    d416:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d41a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d41e:	781a      	ldrb	r2, [r3, #0]
    d420:	f64a 6308 	movw	r3, #44552	; 0xae08
    d424:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d428:	781b      	ldrb	r3, [r3, #0]
    d42a:	4413      	add	r3, r2
    d42c:	b2da      	uxtb	r2, r3
    d42e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d432:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d436:	701a      	strb	r2, [r3, #0]
    d438:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d43c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d440:	781a      	ldrb	r2, [r3, #0]
    d442:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d446:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d44a:	781b      	ldrb	r3, [r3, #0]
    d44c:	4413      	add	r3, r2
    d44e:	b2da      	uxtb	r2, r3
    d450:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d454:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d458:	701a      	strb	r2, [r3, #0]
    d45a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d45e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d462:	781b      	ldrb	r3, [r3, #0]
    d464:	3301      	adds	r3, #1
    d466:	b2da      	uxtb	r2, r3
    d468:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d46c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d470:	701a      	strb	r2, [r3, #0]
    d472:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d476:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d47a:	781b      	ldrb	r3, [r3, #0]
    d47c:	2bff      	cmp	r3, #255	; 0xff
    d47e:	d105      	bne.n	d48c <send_nav_values+0x248>
    d480:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d484:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d488:	2200      	movs	r2, #0
    d48a:	701a      	strb	r2, [r3, #0]
    d48c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d490:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d494:	781b      	ldrb	r3, [r3, #0]
    d496:	461a      	mov	r2, r3
    d498:	f24b 0364 	movw	r3, #45156	; 0xb064
    d49c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4a0:	7819      	ldrb	r1, [r3, #0]
    d4a2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d4a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4aa:	5499      	strb	r1, [r3, r2]
    d4ac:	f24b 0364 	movw	r3, #45156	; 0xb064
    d4b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4b4:	781a      	ldrb	r2, [r3, #0]
    d4b6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d4ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4be:	781b      	ldrb	r3, [r3, #0]
    d4c0:	4413      	add	r3, r2
    d4c2:	b2da      	uxtb	r2, r3
    d4c4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d4c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4cc:	701a      	strb	r2, [r3, #0]
    d4ce:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d4d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4d6:	781a      	ldrb	r2, [r3, #0]
    d4d8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d4dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4e0:	781b      	ldrb	r3, [r3, #0]
    d4e2:	4413      	add	r3, r2
    d4e4:	b2da      	uxtb	r2, r3
    d4e6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d4ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4ee:	701a      	strb	r2, [r3, #0]
    d4f0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4f8:	781b      	ldrb	r3, [r3, #0]
    d4fa:	3301      	adds	r3, #1
    d4fc:	b2da      	uxtb	r2, r3
    d4fe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d502:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d506:	701a      	strb	r2, [r3, #0]
    d508:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d50c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d510:	781b      	ldrb	r3, [r3, #0]
    d512:	2bff      	cmp	r3, #255	; 0xff
    d514:	d105      	bne.n	d522 <send_nav_values+0x2de>
    d516:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d51a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d51e:	2200      	movs	r2, #0
    d520:	701a      	strb	r2, [r3, #0]
    d522:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d526:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d52a:	781b      	ldrb	r3, [r3, #0]
    d52c:	461a      	mov	r2, r3
    d52e:	f24b 0364 	movw	r3, #45156	; 0xb064
    d532:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d536:	7859      	ldrb	r1, [r3, #1]
    d538:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d53c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d540:	5499      	strb	r1, [r3, r2]
    d542:	4bd2      	ldr	r3, [pc, #840]	; (d88c <send_nav_values+0x648>)
    d544:	781a      	ldrb	r2, [r3, #0]
    d546:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d54a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d54e:	781b      	ldrb	r3, [r3, #0]
    d550:	4413      	add	r3, r2
    d552:	b2da      	uxtb	r2, r3
    d554:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d558:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d55c:	701a      	strb	r2, [r3, #0]
    d55e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d562:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d566:	781a      	ldrb	r2, [r3, #0]
    d568:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d56c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d570:	781b      	ldrb	r3, [r3, #0]
    d572:	4413      	add	r3, r2
    d574:	b2da      	uxtb	r2, r3
    d576:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d57a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d57e:	701a      	strb	r2, [r3, #0]
    d580:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d588:	781b      	ldrb	r3, [r3, #0]
    d58a:	3301      	adds	r3, #1
    d58c:	b2da      	uxtb	r2, r3
    d58e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d592:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d596:	701a      	strb	r2, [r3, #0]
    d598:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d59c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5a0:	781b      	ldrb	r3, [r3, #0]
    d5a2:	2bff      	cmp	r3, #255	; 0xff
    d5a4:	d105      	bne.n	d5b2 <send_nav_values+0x36e>
    d5a6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d5aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5ae:	2200      	movs	r2, #0
    d5b0:	701a      	strb	r2, [r3, #0]
    d5b2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d5b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5ba:	781b      	ldrb	r3, [r3, #0]
    d5bc:	461a      	mov	r2, r3
    d5be:	f24b 0364 	movw	r3, #45156	; 0xb064
    d5c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5c6:	7899      	ldrb	r1, [r3, #2]
    d5c8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d5cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5d0:	5499      	strb	r1, [r3, r2]
    d5d2:	4baf      	ldr	r3, [pc, #700]	; (d890 <send_nav_values+0x64c>)
    d5d4:	781a      	ldrb	r2, [r3, #0]
    d5d6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d5da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5de:	781b      	ldrb	r3, [r3, #0]
    d5e0:	4413      	add	r3, r2
    d5e2:	b2da      	uxtb	r2, r3
    d5e4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d5e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5ec:	701a      	strb	r2, [r3, #0]
    d5ee:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d5f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5f6:	781a      	ldrb	r2, [r3, #0]
    d5f8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d5fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d600:	781b      	ldrb	r3, [r3, #0]
    d602:	4413      	add	r3, r2
    d604:	b2da      	uxtb	r2, r3
    d606:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d60a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d60e:	701a      	strb	r2, [r3, #0]
    d610:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d614:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d618:	781b      	ldrb	r3, [r3, #0]
    d61a:	3301      	adds	r3, #1
    d61c:	b2da      	uxtb	r2, r3
    d61e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d622:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d626:	701a      	strb	r2, [r3, #0]
    d628:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d62c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d630:	781b      	ldrb	r3, [r3, #0]
    d632:	2bff      	cmp	r3, #255	; 0xff
    d634:	d105      	bne.n	d642 <send_nav_values+0x3fe>
    d636:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d63a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d63e:	2200      	movs	r2, #0
    d640:	701a      	strb	r2, [r3, #0]
    d642:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d646:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d64a:	781b      	ldrb	r3, [r3, #0]
    d64c:	461a      	mov	r2, r3
    d64e:	f24b 0364 	movw	r3, #45156	; 0xb064
    d652:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d656:	78d9      	ldrb	r1, [r3, #3]
    d658:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d65c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d660:	5499      	strb	r1, [r3, r2]
    d662:	4b8c      	ldr	r3, [pc, #560]	; (d894 <send_nav_values+0x650>)
    d664:	781a      	ldrb	r2, [r3, #0]
    d666:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d66a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d66e:	781b      	ldrb	r3, [r3, #0]
    d670:	4413      	add	r3, r2
    d672:	b2da      	uxtb	r2, r3
    d674:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d67c:	701a      	strb	r2, [r3, #0]
    d67e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d686:	781a      	ldrb	r2, [r3, #0]
    d688:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d68c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d690:	781b      	ldrb	r3, [r3, #0]
    d692:	4413      	add	r3, r2
    d694:	b2da      	uxtb	r2, r3
    d696:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d69a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d69e:	701a      	strb	r2, [r3, #0]
    d6a0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d6a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6a8:	781b      	ldrb	r3, [r3, #0]
    d6aa:	3301      	adds	r3, #1
    d6ac:	b2da      	uxtb	r2, r3
    d6ae:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d6b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6b6:	701a      	strb	r2, [r3, #0]
    d6b8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d6bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6c0:	781b      	ldrb	r3, [r3, #0]
    d6c2:	2bff      	cmp	r3, #255	; 0xff
    d6c4:	d105      	bne.n	d6d2 <send_nav_values+0x48e>
    d6c6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d6ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6ce:	2200      	movs	r2, #0
    d6d0:	701a      	strb	r2, [r3, #0]
    d6d2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d6d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6da:	781b      	ldrb	r3, [r3, #0]
    d6dc:	461a      	mov	r2, r3
    d6de:	f24b 0368 	movw	r3, #45160	; 0xb068
    d6e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6e6:	7819      	ldrb	r1, [r3, #0]
    d6e8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d6ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6f0:	5499      	strb	r1, [r3, r2]
    d6f2:	f24b 0368 	movw	r3, #45160	; 0xb068
    d6f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6fa:	781a      	ldrb	r2, [r3, #0]
    d6fc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d700:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d704:	781b      	ldrb	r3, [r3, #0]
    d706:	4413      	add	r3, r2
    d708:	b2da      	uxtb	r2, r3
    d70a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d70e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d712:	701a      	strb	r2, [r3, #0]
    d714:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d718:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d71c:	781a      	ldrb	r2, [r3, #0]
    d71e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d722:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d726:	781b      	ldrb	r3, [r3, #0]
    d728:	4413      	add	r3, r2
    d72a:	b2da      	uxtb	r2, r3
    d72c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d730:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d734:	701a      	strb	r2, [r3, #0]
    d736:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d73a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d73e:	781b      	ldrb	r3, [r3, #0]
    d740:	3301      	adds	r3, #1
    d742:	b2da      	uxtb	r2, r3
    d744:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d748:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d74c:	701a      	strb	r2, [r3, #0]
    d74e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d752:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d756:	781b      	ldrb	r3, [r3, #0]
    d758:	2bff      	cmp	r3, #255	; 0xff
    d75a:	d105      	bne.n	d768 <send_nav_values+0x524>
    d75c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d760:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d764:	2200      	movs	r2, #0
    d766:	701a      	strb	r2, [r3, #0]
    d768:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d76c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d770:	781b      	ldrb	r3, [r3, #0]
    d772:	461a      	mov	r2, r3
    d774:	f24b 0368 	movw	r3, #45160	; 0xb068
    d778:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d77c:	7859      	ldrb	r1, [r3, #1]
    d77e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d782:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d786:	5499      	strb	r1, [r3, r2]
    d788:	4b43      	ldr	r3, [pc, #268]	; (d898 <send_nav_values+0x654>)
    d78a:	781a      	ldrb	r2, [r3, #0]
    d78c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d790:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d794:	781b      	ldrb	r3, [r3, #0]
    d796:	4413      	add	r3, r2
    d798:	b2da      	uxtb	r2, r3
    d79a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d79e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7a2:	701a      	strb	r2, [r3, #0]
    d7a4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d7a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7ac:	781a      	ldrb	r2, [r3, #0]
    d7ae:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d7b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7b6:	781b      	ldrb	r3, [r3, #0]
    d7b8:	4413      	add	r3, r2
    d7ba:	b2da      	uxtb	r2, r3
    d7bc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d7c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7c4:	701a      	strb	r2, [r3, #0]
    d7c6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d7ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7ce:	781b      	ldrb	r3, [r3, #0]
    d7d0:	3301      	adds	r3, #1
    d7d2:	b2da      	uxtb	r2, r3
    d7d4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d7d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7dc:	701a      	strb	r2, [r3, #0]
    d7de:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d7e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7e6:	781b      	ldrb	r3, [r3, #0]
    d7e8:	2bff      	cmp	r3, #255	; 0xff
    d7ea:	d105      	bne.n	d7f8 <send_nav_values+0x5b4>
    d7ec:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d7f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7f4:	2200      	movs	r2, #0
    d7f6:	701a      	strb	r2, [r3, #0]
    d7f8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d7fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d800:	781b      	ldrb	r3, [r3, #0]
    d802:	461a      	mov	r2, r3
    d804:	f24b 0368 	movw	r3, #45160	; 0xb068
    d808:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d80c:	7899      	ldrb	r1, [r3, #2]
    d80e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d816:	5499      	strb	r1, [r3, r2]
    d818:	4b20      	ldr	r3, [pc, #128]	; (d89c <send_nav_values+0x658>)
    d81a:	781a      	ldrb	r2, [r3, #0]
    d81c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d820:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d824:	781b      	ldrb	r3, [r3, #0]
    d826:	4413      	add	r3, r2
    d828:	b2da      	uxtb	r2, r3
    d82a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d82e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d832:	701a      	strb	r2, [r3, #0]
    d834:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d838:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d83c:	781a      	ldrb	r2, [r3, #0]
    d83e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d842:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d846:	781b      	ldrb	r3, [r3, #0]
    d848:	4413      	add	r3, r2
    d84a:	b2da      	uxtb	r2, r3
    d84c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d850:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d854:	701a      	strb	r2, [r3, #0]
    d856:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d85a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d85e:	781b      	ldrb	r3, [r3, #0]
    d860:	3301      	adds	r3, #1
    d862:	b2da      	uxtb	r2, r3
    d864:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d868:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d86c:	701a      	strb	r2, [r3, #0]
    d86e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d872:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d876:	781b      	ldrb	r3, [r3, #0]
    d878:	2bff      	cmp	r3, #255	; 0xff
    d87a:	d111      	bne.n	d8a0 <send_nav_values+0x65c>
    d87c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d880:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d884:	2200      	movs	r2, #0
    d886:	701a      	strb	r2, [r3, #0]
    d888:	e00a      	b.n	d8a0 <send_nav_values+0x65c>
    d88a:	bf00      	nop
    d88c:	2000b065 	.word	0x2000b065
    d890:	2000b066 	.word	0x2000b066
    d894:	2000b067 	.word	0x2000b067
    d898:	2000b069 	.word	0x2000b069
    d89c:	2000b06a 	.word	0x2000b06a
    d8a0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d8a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8a8:	781b      	ldrb	r3, [r3, #0]
    d8aa:	461a      	mov	r2, r3
    d8ac:	f24b 0368 	movw	r3, #45160	; 0xb068
    d8b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8b4:	78d9      	ldrb	r1, [r3, #3]
    d8b6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d8ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8be:	5499      	strb	r1, [r3, r2]
    d8c0:	4bd3      	ldr	r3, [pc, #844]	; (dc10 <send_nav_values+0x9cc>)
    d8c2:	781a      	ldrb	r2, [r3, #0]
    d8c4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d8c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8cc:	781b      	ldrb	r3, [r3, #0]
    d8ce:	4413      	add	r3, r2
    d8d0:	b2da      	uxtb	r2, r3
    d8d2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d8d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8da:	701a      	strb	r2, [r3, #0]
    d8dc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d8e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8e4:	781a      	ldrb	r2, [r3, #0]
    d8e6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d8ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8ee:	781b      	ldrb	r3, [r3, #0]
    d8f0:	4413      	add	r3, r2
    d8f2:	b2da      	uxtb	r2, r3
    d8f4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d8f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8fc:	701a      	strb	r2, [r3, #0]
    d8fe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d902:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d906:	781b      	ldrb	r3, [r3, #0]
    d908:	3301      	adds	r3, #1
    d90a:	b2da      	uxtb	r2, r3
    d90c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d910:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d914:	701a      	strb	r2, [r3, #0]
    d916:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d91a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d91e:	781b      	ldrb	r3, [r3, #0]
    d920:	2bff      	cmp	r3, #255	; 0xff
    d922:	d105      	bne.n	d930 <send_nav_values+0x6ec>
    d924:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d928:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d92c:	2200      	movs	r2, #0
    d92e:	701a      	strb	r2, [r3, #0]
    d930:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d938:	781b      	ldrb	r3, [r3, #0]
    d93a:	461a      	mov	r2, r3
    d93c:	f64a 53f4 	movw	r3, #44532	; 0xadf4
    d940:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d944:	7819      	ldrb	r1, [r3, #0]
    d946:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d94a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d94e:	5499      	strb	r1, [r3, r2]
    d950:	f64a 53f4 	movw	r3, #44532	; 0xadf4
    d954:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d958:	781a      	ldrb	r2, [r3, #0]
    d95a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d95e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d962:	781b      	ldrb	r3, [r3, #0]
    d964:	4413      	add	r3, r2
    d966:	b2da      	uxtb	r2, r3
    d968:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d96c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d970:	701a      	strb	r2, [r3, #0]
    d972:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d976:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d97a:	781a      	ldrb	r2, [r3, #0]
    d97c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d980:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d984:	781b      	ldrb	r3, [r3, #0]
    d986:	4413      	add	r3, r2
    d988:	b2da      	uxtb	r2, r3
    d98a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d98e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d992:	701a      	strb	r2, [r3, #0]
    d994:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d998:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d99c:	781b      	ldrb	r3, [r3, #0]
    d99e:	3301      	adds	r3, #1
    d9a0:	b2da      	uxtb	r2, r3
    d9a2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d9a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9aa:	701a      	strb	r2, [r3, #0]
    d9ac:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d9b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9b4:	781b      	ldrb	r3, [r3, #0]
    d9b6:	2bff      	cmp	r3, #255	; 0xff
    d9b8:	d105      	bne.n	d9c6 <send_nav_values+0x782>
    d9ba:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d9be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9c2:	2200      	movs	r2, #0
    d9c4:	701a      	strb	r2, [r3, #0]
    d9c6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d9ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9ce:	781b      	ldrb	r3, [r3, #0]
    d9d0:	461a      	mov	r2, r3
    d9d2:	f64a 53f4 	movw	r3, #44532	; 0xadf4
    d9d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9da:	7859      	ldrb	r1, [r3, #1]
    d9dc:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d9e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9e4:	5499      	strb	r1, [r3, r2]
    d9e6:	4b8b      	ldr	r3, [pc, #556]	; (dc14 <send_nav_values+0x9d0>)
    d9e8:	781a      	ldrb	r2, [r3, #0]
    d9ea:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d9ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9f2:	781b      	ldrb	r3, [r3, #0]
    d9f4:	4413      	add	r3, r2
    d9f6:	b2da      	uxtb	r2, r3
    d9f8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d9fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da00:	701a      	strb	r2, [r3, #0]
    da02:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    da06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da0a:	781a      	ldrb	r2, [r3, #0]
    da0c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    da10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da14:	781b      	ldrb	r3, [r3, #0]
    da16:	4413      	add	r3, r2
    da18:	b2da      	uxtb	r2, r3
    da1a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    da1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da22:	701a      	strb	r2, [r3, #0]
    da24:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    da28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da2c:	781b      	ldrb	r3, [r3, #0]
    da2e:	3301      	adds	r3, #1
    da30:	b2da      	uxtb	r2, r3
    da32:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    da36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da3a:	701a      	strb	r2, [r3, #0]
    da3c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    da40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da44:	781b      	ldrb	r3, [r3, #0]
    da46:	2bff      	cmp	r3, #255	; 0xff
    da48:	d105      	bne.n	da56 <send_nav_values+0x812>
    da4a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    da4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da52:	2200      	movs	r2, #0
    da54:	701a      	strb	r2, [r3, #0]
    da56:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    da5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da5e:	781b      	ldrb	r3, [r3, #0]
    da60:	461a      	mov	r2, r3
    da62:	f64a 53f4 	movw	r3, #44532	; 0xadf4
    da66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da6a:	7899      	ldrb	r1, [r3, #2]
    da6c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    da70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da74:	5499      	strb	r1, [r3, r2]
    da76:	4b68      	ldr	r3, [pc, #416]	; (dc18 <send_nav_values+0x9d4>)
    da78:	781a      	ldrb	r2, [r3, #0]
    da7a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    da7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da82:	781b      	ldrb	r3, [r3, #0]
    da84:	4413      	add	r3, r2
    da86:	b2da      	uxtb	r2, r3
    da88:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    da8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da90:	701a      	strb	r2, [r3, #0]
    da92:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    da96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da9a:	781a      	ldrb	r2, [r3, #0]
    da9c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    daa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    daa4:	781b      	ldrb	r3, [r3, #0]
    daa6:	4413      	add	r3, r2
    daa8:	b2da      	uxtb	r2, r3
    daaa:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    daae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dab2:	701a      	strb	r2, [r3, #0]
    dab4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dabc:	781b      	ldrb	r3, [r3, #0]
    dabe:	3301      	adds	r3, #1
    dac0:	b2da      	uxtb	r2, r3
    dac2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dac6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    daca:	701a      	strb	r2, [r3, #0]
    dacc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dad4:	781b      	ldrb	r3, [r3, #0]
    dad6:	2bff      	cmp	r3, #255	; 0xff
    dad8:	d105      	bne.n	dae6 <send_nav_values+0x8a2>
    dada:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dade:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dae2:	2200      	movs	r2, #0
    dae4:	701a      	strb	r2, [r3, #0]
    dae6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    daea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    daee:	781b      	ldrb	r3, [r3, #0]
    daf0:	461a      	mov	r2, r3
    daf2:	f64a 53f4 	movw	r3, #44532	; 0xadf4
    daf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dafa:	78d9      	ldrb	r1, [r3, #3]
    dafc:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    db00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db04:	5499      	strb	r1, [r3, r2]
    db06:	4b45      	ldr	r3, [pc, #276]	; (dc1c <send_nav_values+0x9d8>)
    db08:	781a      	ldrb	r2, [r3, #0]
    db0a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    db0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db12:	781b      	ldrb	r3, [r3, #0]
    db14:	4413      	add	r3, r2
    db16:	b2da      	uxtb	r2, r3
    db18:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    db1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db20:	701a      	strb	r2, [r3, #0]
    db22:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    db26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db2a:	781a      	ldrb	r2, [r3, #0]
    db2c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    db30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db34:	781b      	ldrb	r3, [r3, #0]
    db36:	4413      	add	r3, r2
    db38:	b2da      	uxtb	r2, r3
    db3a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    db3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db42:	701a      	strb	r2, [r3, #0]
    db44:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    db48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db4c:	781b      	ldrb	r3, [r3, #0]
    db4e:	3301      	adds	r3, #1
    db50:	b2da      	uxtb	r2, r3
    db52:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    db56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db5a:	701a      	strb	r2, [r3, #0]
    db5c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    db60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db64:	781b      	ldrb	r3, [r3, #0]
    db66:	2bff      	cmp	r3, #255	; 0xff
    db68:	d105      	bne.n	db76 <send_nav_values+0x932>
    db6a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    db6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db72:	2200      	movs	r2, #0
    db74:	701a      	strb	r2, [r3, #0]
    db76:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    db7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db7e:	781b      	ldrb	r3, [r3, #0]
    db80:	461a      	mov	r2, r3
    db82:	f64a 633c 	movw	r3, #44604	; 0xae3c
    db86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db8a:	7819      	ldrb	r1, [r3, #0]
    db8c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    db90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db94:	5499      	strb	r1, [r3, r2]
    db96:	f64a 633c 	movw	r3, #44604	; 0xae3c
    db9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db9e:	781a      	ldrb	r2, [r3, #0]
    dba0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dba8:	781b      	ldrb	r3, [r3, #0]
    dbaa:	4413      	add	r3, r2
    dbac:	b2da      	uxtb	r2, r3
    dbae:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dbb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbb6:	701a      	strb	r2, [r3, #0]
    dbb8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    dbbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbc0:	781a      	ldrb	r2, [r3, #0]
    dbc2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dbc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbca:	781b      	ldrb	r3, [r3, #0]
    dbcc:	4413      	add	r3, r2
    dbce:	b2da      	uxtb	r2, r3
    dbd0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    dbd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbd8:	701a      	strb	r2, [r3, #0]
    dbda:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dbde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbe2:	781b      	ldrb	r3, [r3, #0]
    dbe4:	3301      	adds	r3, #1
    dbe6:	b2da      	uxtb	r2, r3
    dbe8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dbec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbf0:	701a      	strb	r2, [r3, #0]
    dbf2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dbf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbfa:	781b      	ldrb	r3, [r3, #0]
    dbfc:	2bff      	cmp	r3, #255	; 0xff
    dbfe:	d10f      	bne.n	dc20 <send_nav_values+0x9dc>
    dc00:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dc04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc08:	2200      	movs	r2, #0
    dc0a:	701a      	strb	r2, [r3, #0]
    dc0c:	e008      	b.n	dc20 <send_nav_values+0x9dc>
    dc0e:	bf00      	nop
    dc10:	2000b06b 	.word	0x2000b06b
    dc14:	2000adf5 	.word	0x2000adf5
    dc18:	2000adf6 	.word	0x2000adf6
    dc1c:	2000adf7 	.word	0x2000adf7
    dc20:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dc24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc28:	781b      	ldrb	r3, [r3, #0]
    dc2a:	461a      	mov	r2, r3
    dc2c:	f64a 633c 	movw	r3, #44604	; 0xae3c
    dc30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc34:	7859      	ldrb	r1, [r3, #1]
    dc36:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    dc3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc3e:	5499      	strb	r1, [r3, r2]
    dc40:	4bd1      	ldr	r3, [pc, #836]	; (df88 <send_nav_values+0xd44>)
    dc42:	781a      	ldrb	r2, [r3, #0]
    dc44:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dc48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc4c:	781b      	ldrb	r3, [r3, #0]
    dc4e:	4413      	add	r3, r2
    dc50:	b2da      	uxtb	r2, r3
    dc52:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dc56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc5a:	701a      	strb	r2, [r3, #0]
    dc5c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    dc60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc64:	781a      	ldrb	r2, [r3, #0]
    dc66:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dc6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc6e:	781b      	ldrb	r3, [r3, #0]
    dc70:	4413      	add	r3, r2
    dc72:	b2da      	uxtb	r2, r3
    dc74:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    dc78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc7c:	701a      	strb	r2, [r3, #0]
    dc7e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dc82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc86:	781b      	ldrb	r3, [r3, #0]
    dc88:	3301      	adds	r3, #1
    dc8a:	b2da      	uxtb	r2, r3
    dc8c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dc90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc94:	701a      	strb	r2, [r3, #0]
    dc96:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dc9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc9e:	781b      	ldrb	r3, [r3, #0]
    dca0:	2bff      	cmp	r3, #255	; 0xff
    dca2:	d105      	bne.n	dcb0 <send_nav_values+0xa6c>
    dca4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcac:	2200      	movs	r2, #0
    dcae:	701a      	strb	r2, [r3, #0]
    dcb0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dcb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcb8:	781b      	ldrb	r3, [r3, #0]
    dcba:	461a      	mov	r2, r3
    dcbc:	f64a 633c 	movw	r3, #44604	; 0xae3c
    dcc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcc4:	7899      	ldrb	r1, [r3, #2]
    dcc6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    dcca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcce:	5499      	strb	r1, [r3, r2]
    dcd0:	4bae      	ldr	r3, [pc, #696]	; (df8c <send_nav_values+0xd48>)
    dcd2:	781a      	ldrb	r2, [r3, #0]
    dcd4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dcd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcdc:	781b      	ldrb	r3, [r3, #0]
    dcde:	4413      	add	r3, r2
    dce0:	b2da      	uxtb	r2, r3
    dce2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dce6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcea:	701a      	strb	r2, [r3, #0]
    dcec:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    dcf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcf4:	781a      	ldrb	r2, [r3, #0]
    dcf6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dcfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcfe:	781b      	ldrb	r3, [r3, #0]
    dd00:	4413      	add	r3, r2
    dd02:	b2da      	uxtb	r2, r3
    dd04:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    dd08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd0c:	701a      	strb	r2, [r3, #0]
    dd0e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dd12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd16:	781b      	ldrb	r3, [r3, #0]
    dd18:	3301      	adds	r3, #1
    dd1a:	b2da      	uxtb	r2, r3
    dd1c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dd20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd24:	701a      	strb	r2, [r3, #0]
    dd26:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dd2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd2e:	781b      	ldrb	r3, [r3, #0]
    dd30:	2bff      	cmp	r3, #255	; 0xff
    dd32:	d105      	bne.n	dd40 <send_nav_values+0xafc>
    dd34:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dd38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd3c:	2200      	movs	r2, #0
    dd3e:	701a      	strb	r2, [r3, #0]
    dd40:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dd44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd48:	781b      	ldrb	r3, [r3, #0]
    dd4a:	461a      	mov	r2, r3
    dd4c:	f64a 633c 	movw	r3, #44604	; 0xae3c
    dd50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd54:	78d9      	ldrb	r1, [r3, #3]
    dd56:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    dd5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd5e:	5499      	strb	r1, [r3, r2]
    dd60:	4b8b      	ldr	r3, [pc, #556]	; (df90 <send_nav_values+0xd4c>)
    dd62:	781a      	ldrb	r2, [r3, #0]
    dd64:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dd68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd6c:	781b      	ldrb	r3, [r3, #0]
    dd6e:	4413      	add	r3, r2
    dd70:	b2da      	uxtb	r2, r3
    dd72:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dd76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd7a:	701a      	strb	r2, [r3, #0]
    dd7c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    dd80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd84:	781a      	ldrb	r2, [r3, #0]
    dd86:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dd8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd8e:	781b      	ldrb	r3, [r3, #0]
    dd90:	4413      	add	r3, r2
    dd92:	b2da      	uxtb	r2, r3
    dd94:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    dd98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd9c:	701a      	strb	r2, [r3, #0]
    dd9e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dda2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dda6:	781b      	ldrb	r3, [r3, #0]
    dda8:	3301      	adds	r3, #1
    ddaa:	b2da      	uxtb	r2, r3
    ddac:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ddb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddb4:	701a      	strb	r2, [r3, #0]
    ddb6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ddba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddbe:	781b      	ldrb	r3, [r3, #0]
    ddc0:	2bff      	cmp	r3, #255	; 0xff
    ddc2:	d105      	bne.n	ddd0 <send_nav_values+0xb8c>
    ddc4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ddc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddcc:	2200      	movs	r2, #0
    ddce:	701a      	strb	r2, [r3, #0]
    ddd0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ddd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddd8:	781b      	ldrb	r3, [r3, #0]
    ddda:	461a      	mov	r2, r3
    dddc:	f240 239c 	movw	r3, #668	; 0x29c
    dde0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dde4:	7819      	ldrb	r1, [r3, #0]
    dde6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ddea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddee:	5499      	strb	r1, [r3, r2]
    ddf0:	f240 239c 	movw	r3, #668	; 0x29c
    ddf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddf8:	781a      	ldrb	r2, [r3, #0]
    ddfa:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ddfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de02:	781b      	ldrb	r3, [r3, #0]
    de04:	4413      	add	r3, r2
    de06:	b2da      	uxtb	r2, r3
    de08:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    de0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de10:	701a      	strb	r2, [r3, #0]
    de12:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    de16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de1a:	781a      	ldrb	r2, [r3, #0]
    de1c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    de20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de24:	781b      	ldrb	r3, [r3, #0]
    de26:	4413      	add	r3, r2
    de28:	b2da      	uxtb	r2, r3
    de2a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    de2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de32:	701a      	strb	r2, [r3, #0]
    de34:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    de38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de3c:	781b      	ldrb	r3, [r3, #0]
    de3e:	3301      	adds	r3, #1
    de40:	b2da      	uxtb	r2, r3
    de42:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    de46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de4a:	701a      	strb	r2, [r3, #0]
    de4c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    de50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de54:	781b      	ldrb	r3, [r3, #0]
    de56:	2bff      	cmp	r3, #255	; 0xff
    de58:	d105      	bne.n	de66 <send_nav_values+0xc22>
    de5a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    de5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de62:	2200      	movs	r2, #0
    de64:	701a      	strb	r2, [r3, #0]
    de66:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    de6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de6e:	781b      	ldrb	r3, [r3, #0]
    de70:	461a      	mov	r2, r3
    de72:	f240 239c 	movw	r3, #668	; 0x29c
    de76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de7a:	7859      	ldrb	r1, [r3, #1]
    de7c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    de80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de84:	5499      	strb	r1, [r3, r2]
    de86:	4b43      	ldr	r3, [pc, #268]	; (df94 <send_nav_values+0xd50>)
    de88:	781a      	ldrb	r2, [r3, #0]
    de8a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    de8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de92:	781b      	ldrb	r3, [r3, #0]
    de94:	4413      	add	r3, r2
    de96:	b2da      	uxtb	r2, r3
    de98:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    de9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dea0:	701a      	strb	r2, [r3, #0]
    dea2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    dea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    deaa:	781a      	ldrb	r2, [r3, #0]
    deac:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    deb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    deb4:	781b      	ldrb	r3, [r3, #0]
    deb6:	4413      	add	r3, r2
    deb8:	b2da      	uxtb	r2, r3
    deba:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    debe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dec2:	701a      	strb	r2, [r3, #0]
    dec4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    decc:	781b      	ldrb	r3, [r3, #0]
    dece:	3301      	adds	r3, #1
    ded0:	b2da      	uxtb	r2, r3
    ded2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ded6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    deda:	701a      	strb	r2, [r3, #0]
    dedc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dee4:	781b      	ldrb	r3, [r3, #0]
    dee6:	2bff      	cmp	r3, #255	; 0xff
    dee8:	d105      	bne.n	def6 <send_nav_values+0xcb2>
    deea:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    deee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    def2:	2200      	movs	r2, #0
    def4:	701a      	strb	r2, [r3, #0]
    def6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    defa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    defe:	781b      	ldrb	r3, [r3, #0]
    df00:	461a      	mov	r2, r3
    df02:	f240 239c 	movw	r3, #668	; 0x29c
    df06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df0a:	7899      	ldrb	r1, [r3, #2]
    df0c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    df10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df14:	5499      	strb	r1, [r3, r2]
    df16:	4b20      	ldr	r3, [pc, #128]	; (df98 <send_nav_values+0xd54>)
    df18:	781a      	ldrb	r2, [r3, #0]
    df1a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    df1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df22:	781b      	ldrb	r3, [r3, #0]
    df24:	4413      	add	r3, r2
    df26:	b2da      	uxtb	r2, r3
    df28:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    df2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df30:	701a      	strb	r2, [r3, #0]
    df32:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    df36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df3a:	781a      	ldrb	r2, [r3, #0]
    df3c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    df40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df44:	781b      	ldrb	r3, [r3, #0]
    df46:	4413      	add	r3, r2
    df48:	b2da      	uxtb	r2, r3
    df4a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    df4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df52:	701a      	strb	r2, [r3, #0]
    df54:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    df58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df5c:	781b      	ldrb	r3, [r3, #0]
    df5e:	3301      	adds	r3, #1
    df60:	b2da      	uxtb	r2, r3
    df62:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    df66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df6a:	701a      	strb	r2, [r3, #0]
    df6c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    df70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df74:	781b      	ldrb	r3, [r3, #0]
    df76:	2bff      	cmp	r3, #255	; 0xff
    df78:	d110      	bne.n	df9c <send_nav_values+0xd58>
    df7a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    df7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df82:	2200      	movs	r2, #0
    df84:	701a      	strb	r2, [r3, #0]
    df86:	e009      	b.n	df9c <send_nav_values+0xd58>
    df88:	2000ae3d 	.word	0x2000ae3d
    df8c:	2000ae3e 	.word	0x2000ae3e
    df90:	2000ae3f 	.word	0x2000ae3f
    df94:	2000029d 	.word	0x2000029d
    df98:	2000029e 	.word	0x2000029e
    df9c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dfa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfa4:	781b      	ldrb	r3, [r3, #0]
    dfa6:	461a      	mov	r2, r3
    dfa8:	f240 239c 	movw	r3, #668	; 0x29c
    dfac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfb0:	78d9      	ldrb	r1, [r3, #3]
    dfb2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    dfb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfba:	5499      	strb	r1, [r3, r2]
    dfbc:	4bc2      	ldr	r3, [pc, #776]	; (e2c8 <send_nav_values+0x1084>)
    dfbe:	781a      	ldrb	r2, [r3, #0]
    dfc0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dfc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfc8:	781b      	ldrb	r3, [r3, #0]
    dfca:	4413      	add	r3, r2
    dfcc:	b2da      	uxtb	r2, r3
    dfce:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dfd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfd6:	701a      	strb	r2, [r3, #0]
    dfd8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    dfdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfe0:	781a      	ldrb	r2, [r3, #0]
    dfe2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dfe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfea:	781b      	ldrb	r3, [r3, #0]
    dfec:	4413      	add	r3, r2
    dfee:	b2da      	uxtb	r2, r3
    dff0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    dff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dff8:	701a      	strb	r2, [r3, #0]
    dffa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e002:	781b      	ldrb	r3, [r3, #0]
    e004:	3301      	adds	r3, #1
    e006:	b2da      	uxtb	r2, r3
    e008:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e00c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e010:	701a      	strb	r2, [r3, #0]
    e012:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e016:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e01a:	781b      	ldrb	r3, [r3, #0]
    e01c:	2bff      	cmp	r3, #255	; 0xff
    e01e:	d105      	bne.n	e02c <send_nav_values+0xde8>
    e020:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e024:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e028:	2200      	movs	r2, #0
    e02a:	701a      	strb	r2, [r3, #0]
    e02c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e030:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e034:	781b      	ldrb	r3, [r3, #0]
    e036:	461a      	mov	r2, r3
    e038:	f64a 6340 	movw	r3, #44608	; 0xae40
    e03c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e040:	7819      	ldrb	r1, [r3, #0]
    e042:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e046:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e04a:	5499      	strb	r1, [r3, r2]
    e04c:	f64a 6340 	movw	r3, #44608	; 0xae40
    e050:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e054:	781a      	ldrb	r2, [r3, #0]
    e056:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e05a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e05e:	781b      	ldrb	r3, [r3, #0]
    e060:	4413      	add	r3, r2
    e062:	b2da      	uxtb	r2, r3
    e064:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e068:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e06c:	701a      	strb	r2, [r3, #0]
    e06e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e072:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e076:	781a      	ldrb	r2, [r3, #0]
    e078:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e07c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e080:	781b      	ldrb	r3, [r3, #0]
    e082:	4413      	add	r3, r2
    e084:	b2da      	uxtb	r2, r3
    e086:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e08a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e08e:	701a      	strb	r2, [r3, #0]
    e090:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e094:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e098:	781b      	ldrb	r3, [r3, #0]
    e09a:	3301      	adds	r3, #1
    e09c:	b2da      	uxtb	r2, r3
    e09e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e0a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0a6:	701a      	strb	r2, [r3, #0]
    e0a8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e0ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0b0:	781b      	ldrb	r3, [r3, #0]
    e0b2:	2bff      	cmp	r3, #255	; 0xff
    e0b4:	d105      	bne.n	e0c2 <send_nav_values+0xe7e>
    e0b6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e0ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0be:	2200      	movs	r2, #0
    e0c0:	701a      	strb	r2, [r3, #0]
    e0c2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e0c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0ca:	781b      	ldrb	r3, [r3, #0]
    e0cc:	461a      	mov	r2, r3
    e0ce:	f64a 6340 	movw	r3, #44608	; 0xae40
    e0d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0d6:	7859      	ldrb	r1, [r3, #1]
    e0d8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e0dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0e0:	5499      	strb	r1, [r3, r2]
    e0e2:	4b7a      	ldr	r3, [pc, #488]	; (e2cc <send_nav_values+0x1088>)
    e0e4:	781a      	ldrb	r2, [r3, #0]
    e0e6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e0ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0ee:	781b      	ldrb	r3, [r3, #0]
    e0f0:	4413      	add	r3, r2
    e0f2:	b2da      	uxtb	r2, r3
    e0f4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e0f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0fc:	701a      	strb	r2, [r3, #0]
    e0fe:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e102:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e106:	781a      	ldrb	r2, [r3, #0]
    e108:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e10c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e110:	781b      	ldrb	r3, [r3, #0]
    e112:	4413      	add	r3, r2
    e114:	b2da      	uxtb	r2, r3
    e116:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e11a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e11e:	701a      	strb	r2, [r3, #0]
    e120:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e124:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e128:	781b      	ldrb	r3, [r3, #0]
    e12a:	3301      	adds	r3, #1
    e12c:	b2da      	uxtb	r2, r3
    e12e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e132:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e136:	701a      	strb	r2, [r3, #0]
    e138:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e13c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e140:	781b      	ldrb	r3, [r3, #0]
    e142:	2bff      	cmp	r3, #255	; 0xff
    e144:	d105      	bne.n	e152 <send_nav_values+0xf0e>
    e146:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e14a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e14e:	2200      	movs	r2, #0
    e150:	701a      	strb	r2, [r3, #0]
    e152:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e156:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e15a:	781b      	ldrb	r3, [r3, #0]
    e15c:	461a      	mov	r2, r3
    e15e:	f64a 6340 	movw	r3, #44608	; 0xae40
    e162:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e166:	7899      	ldrb	r1, [r3, #2]
    e168:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e16c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e170:	5499      	strb	r1, [r3, r2]
    e172:	4b57      	ldr	r3, [pc, #348]	; (e2d0 <send_nav_values+0x108c>)
    e174:	781a      	ldrb	r2, [r3, #0]
    e176:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e17a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e17e:	781b      	ldrb	r3, [r3, #0]
    e180:	4413      	add	r3, r2
    e182:	b2da      	uxtb	r2, r3
    e184:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e188:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e18c:	701a      	strb	r2, [r3, #0]
    e18e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e192:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e196:	781a      	ldrb	r2, [r3, #0]
    e198:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e19c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1a0:	781b      	ldrb	r3, [r3, #0]
    e1a2:	4413      	add	r3, r2
    e1a4:	b2da      	uxtb	r2, r3
    e1a6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e1aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1ae:	701a      	strb	r2, [r3, #0]
    e1b0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e1b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1b8:	781b      	ldrb	r3, [r3, #0]
    e1ba:	3301      	adds	r3, #1
    e1bc:	b2da      	uxtb	r2, r3
    e1be:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e1c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1c6:	701a      	strb	r2, [r3, #0]
    e1c8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e1cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1d0:	781b      	ldrb	r3, [r3, #0]
    e1d2:	2bff      	cmp	r3, #255	; 0xff
    e1d4:	d105      	bne.n	e1e2 <send_nav_values+0xf9e>
    e1d6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e1da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1de:	2200      	movs	r2, #0
    e1e0:	701a      	strb	r2, [r3, #0]
    e1e2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e1e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1ea:	781b      	ldrb	r3, [r3, #0]
    e1ec:	461a      	mov	r2, r3
    e1ee:	f64a 6340 	movw	r3, #44608	; 0xae40
    e1f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1f6:	78d9      	ldrb	r1, [r3, #3]
    e1f8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e1fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e200:	5499      	strb	r1, [r3, r2]
    e202:	4b34      	ldr	r3, [pc, #208]	; (e2d4 <send_nav_values+0x1090>)
    e204:	781a      	ldrb	r2, [r3, #0]
    e206:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e20a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e20e:	781b      	ldrb	r3, [r3, #0]
    e210:	4413      	add	r3, r2
    e212:	b2da      	uxtb	r2, r3
    e214:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e218:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e21c:	701a      	strb	r2, [r3, #0]
    e21e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e222:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e226:	781a      	ldrb	r2, [r3, #0]
    e228:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e22c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e230:	781b      	ldrb	r3, [r3, #0]
    e232:	4413      	add	r3, r2
    e234:	b2da      	uxtb	r2, r3
    e236:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e23a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e23e:	701a      	strb	r2, [r3, #0]
    e240:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e244:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e248:	781b      	ldrb	r3, [r3, #0]
    e24a:	3301      	adds	r3, #1
    e24c:	b2da      	uxtb	r2, r3
    e24e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e252:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e256:	701a      	strb	r2, [r3, #0]
    e258:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e25c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e260:	781b      	ldrb	r3, [r3, #0]
    e262:	2bff      	cmp	r3, #255	; 0xff
    e264:	d105      	bne.n	e272 <send_nav_values+0x102e>
    e266:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e26a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e26e:	2200      	movs	r2, #0
    e270:	701a      	strb	r2, [r3, #0]
    e272:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e276:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e27a:	781b      	ldrb	r3, [r3, #0]
    e27c:	461a      	mov	r2, r3
    e27e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e282:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e286:	7819      	ldrb	r1, [r3, #0]
    e288:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e28c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e290:	5499      	strb	r1, [r3, r2]
    e292:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e296:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e29a:	781b      	ldrb	r3, [r3, #0]
    e29c:	3301      	adds	r3, #1
    e29e:	b2da      	uxtb	r2, r3
    e2a0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e2a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2a8:	701a      	strb	r2, [r3, #0]
    e2aa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e2ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2b2:	781b      	ldrb	r3, [r3, #0]
    e2b4:	2bff      	cmp	r3, #255	; 0xff
    e2b6:	d10f      	bne.n	e2d8 <send_nav_values+0x1094>
    e2b8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e2bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2c0:	2200      	movs	r2, #0
    e2c2:	701a      	strb	r2, [r3, #0]
    e2c4:	e008      	b.n	e2d8 <send_nav_values+0x1094>
    e2c6:	bf00      	nop
    e2c8:	2000029f 	.word	0x2000029f
    e2cc:	2000ae41 	.word	0x2000ae41
    e2d0:	2000ae42 	.word	0x2000ae42
    e2d4:	2000ae43 	.word	0x2000ae43
    e2d8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e2dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2e0:	781b      	ldrb	r3, [r3, #0]
    e2e2:	461a      	mov	r2, r3
    e2e4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e2e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2ec:	7819      	ldrb	r1, [r3, #0]
    e2ee:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e2f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2f6:	5499      	strb	r1, [r3, r2]
    e2f8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e2fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e300:	781b      	ldrb	r3, [r3, #0]
    e302:	3301      	adds	r3, #1
    e304:	b2da      	uxtb	r2, r3
    e306:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e30a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e30e:	701a      	strb	r2, [r3, #0]
    e310:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e314:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e318:	781b      	ldrb	r3, [r3, #0]
    e31a:	2bff      	cmp	r3, #255	; 0xff
    e31c:	d105      	bne.n	e32a <send_nav_values+0x10e6>
    e31e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e322:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e326:	2200      	movs	r2, #0
    e328:	701a      	strb	r2, [r3, #0]
    e32a:	f242 0339 	movw	r3, #8249	; 0x2039
    e32e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e332:	781b      	ldrb	r3, [r3, #0]
    e334:	b2db      	uxtb	r3, r3
    e336:	f003 0310 	and.w	r3, r3, #16
    e33a:	2b00      	cmp	r3, #0
    e33c:	d15a      	bne.n	e3f4 <send_nav_values+0x11b0>
    e33e:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    e342:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e346:	781b      	ldrb	r3, [r3, #0]
    e348:	b2db      	uxtb	r3, r3
    e34a:	461a      	mov	r2, r3
    e34c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e350:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e354:	5c9a      	ldrb	r2, [r3, r2]
    e356:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    e35a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e35e:	701a      	strb	r2, [r3, #0]
    e360:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    e364:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e368:	2200      	movs	r2, #0
    e36a:	701a      	strb	r2, [r3, #0]
    e36c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    e370:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e374:	781b      	ldrb	r3, [r3, #0]
    e376:	b2db      	uxtb	r3, r3
    e378:	3301      	adds	r3, #1
    e37a:	b2da      	uxtb	r2, r3
    e37c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    e380:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e384:	701a      	strb	r2, [r3, #0]
    e386:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    e38a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e38e:	781b      	ldrb	r3, [r3, #0]
    e390:	b2db      	uxtb	r3, r3
    e392:	2bff      	cmp	r3, #255	; 0xff
    e394:	d105      	bne.n	e3a2 <send_nav_values+0x115e>
    e396:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    e39a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e39e:	2200      	movs	r2, #0
    e3a0:	701a      	strb	r2, [r3, #0]
    e3a2:	f242 0338 	movw	r3, #8248	; 0x2038
    e3a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3aa:	f242 0238 	movw	r2, #8248	; 0x2038
    e3ae:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e3b2:	7812      	ldrb	r2, [r2, #0]
    e3b4:	b2d2      	uxtb	r2, r2
    e3b6:	f042 0201 	orr.w	r2, r2, #1
    e3ba:	b2d2      	uxtb	r2, r2
    e3bc:	701a      	strb	r2, [r3, #0]
    e3be:	f242 0339 	movw	r3, #8249	; 0x2039
    e3c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3c6:	f242 0239 	movw	r2, #8249	; 0x2039
    e3ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e3ce:	7812      	ldrb	r2, [r2, #0]
    e3d0:	b2d2      	uxtb	r2, r2
    e3d2:	f042 0210 	orr.w	r2, r2, #16
    e3d6:	b2d2      	uxtb	r2, r2
    e3d8:	701a      	strb	r2, [r3, #0]
    e3da:	e00b      	b.n	e3f4 <send_nav_values+0x11b0>
    e3dc:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    e3e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3e4:	781b      	ldrb	r3, [r3, #0]
    e3e6:	3301      	adds	r3, #1
    e3e8:	b2da      	uxtb	r2, r3
    e3ea:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    e3ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3f2:	701a      	strb	r2, [r3, #0]
}
    e3f4:	46bd      	mov	sp, r7
    e3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    e3fa:	4770      	bx	lr

0000e3fc <course_run>:

void course_run(void){
    e3fc:	b580      	push	{r7, lr}
    e3fe:	af00      	add	r7, sp, #0
  
  if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    e400:	f64a 2394 	movw	r3, #43668	; 0xaa94
    e404:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e408:	781b      	ldrb	r3, [r3, #0]
    e40a:	2b02      	cmp	r3, #2
    e40c:	d006      	beq.n	e41c <course_run+0x20>
    e40e:	f64a 2394 	movw	r3, #43668	; 0xaa94
    e412:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e416:	781b      	ldrb	r3, [r3, #0]
    e418:	2b03      	cmp	r3, #3
    e41a:	d112      	bne.n	e442 <course_run+0x46>
  {
    if (lateral_mode >= LATERAL_MODE_COURSE)
    e41c:	f64a 2396 	movw	r3, #43670	; 0xaa96
    e420:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e424:	781b      	ldrb	r3, [r3, #0]
    e426:	2b02      	cmp	r3, #2
    e428:	d901      	bls.n	e42e <course_run+0x32>
      course_pid_run(); /* aka compute nav_desired_roll */
    e42a:	f003 faf1 	bl	11a10 <course_pid_run>
    desired_roll = nav_desired_roll;
    e42e:	f64a 6338 	movw	r3, #44600	; 0xae38
    e432:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e436:	681a      	ldr	r2, [r3, #0]
    e438:	f64a 53dc 	movw	r3, #44508	; 0xaddc
    e43c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e440:	601a      	str	r2, [r3, #0]
  }  
  //vPrintString("S_17 Navigation task end!\n\r");
}
    e442:	bd80      	pop	{r7, pc}

0000e444 <altitude_control_task>:

void altitude_control_task(void)
{
    e444:	b580      	push	{r7, lr}
    e446:	af00      	add	r7, sp, #0
	//vPrintString("S_18 navigation_task start! \n\r"); //SunnyBeike
	if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) {
    e448:	f64a 2394 	movw	r3, #43668	; 0xaa94
    e44c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e450:	781b      	ldrb	r3, [r3, #0]
    e452:	2b02      	cmp	r3, #2
    e454:	d006      	beq.n	e464 <altitude_control_task+0x20>
    e456:	f64a 2394 	movw	r3, #43668	; 0xaa94
    e45a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e45e:	781b      	ldrb	r3, [r3, #0]
    e460:	2b03      	cmp	r3, #3
    e462:	d108      	bne.n	e476 <altitude_control_task+0x32>
		if (vertical_mode == VERTICAL_MODE_AUTO_ALT)
    e464:	f64a 2395 	movw	r3, #43669	; 0xaa95
    e468:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e46c:	781b      	ldrb	r3, [r3, #0]
    e46e:	2b03      	cmp	r3, #3
    e470:	d101      	bne.n	e476 <altitude_control_task+0x32>
      			altitude_pid_run();
    e472:	f003 fd55 	bl	11f20 <altitude_pid_run>
	}
	//vPrintString("S_18 navigation_task end! \n\r"); //SunnyBeike
}
    e476:	bd80      	pop	{r7, pc}

0000e478 <climb_control_task>:
void climb_control_task(void)
{
    e478:	b580      	push	{r7, lr}
    e47a:	af00      	add	r7, sp, #0
	//vPrintString("S_19 navigation_task start! \n\r"); //SunnyBeike
   if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    e47c:	f64a 2394 	movw	r3, #43668	; 0xaa94
    e480:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e484:	781b      	ldrb	r3, [r3, #0]
    e486:	2b02      	cmp	r3, #2
    e488:	d006      	beq.n	e498 <climb_control_task+0x20>
    e48a:	f64a 2394 	movw	r3, #43668	; 0xaa94
    e48e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e492:	781b      	ldrb	r3, [r3, #0]
    e494:	2b03      	cmp	r3, #3
    e496:	d135      	bne.n	e504 <climb_control_task+0x8c>
   {
	if (vertical_mode >= VERTICAL_MODE_AUTO_CLIMB)
    e498:	f64a 2395 	movw	r3, #43669	; 0xaa95
    e49c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4a0:	781b      	ldrb	r3, [r3, #0]
    e4a2:	2b01      	cmp	r3, #1
    e4a4:	d901      	bls.n	e4aa <climb_control_task+0x32>
        	climb_pid_run();
    e4a6:	f003 fb6b 	bl	11b80 <climb_pid_run>
   	if (vertical_mode == VERTICAL_MODE_AUTO_GAZ)
    e4aa:	f64a 2395 	movw	r3, #43669	; 0xaa95
    e4ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4b2:	781b      	ldrb	r3, [r3, #0]
    e4b4:	2b01      	cmp	r3, #1
    e4b6:	d10a      	bne.n	e4ce <climb_control_task+0x56>
   		 desired_gaz = nav_desired_gaz;
    e4b8:	f64a 6330 	movw	r3, #44592	; 0xae30
    e4bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4c0:	881b      	ldrh	r3, [r3, #0]
    e4c2:	b29a      	uxth	r2, r3
    e4c4:	f64a 53e4 	movw	r3, #44516	; 0xade4
    e4c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4cc:	801a      	strh	r2, [r3, #0]
   	if (low_battery || (!estimator_flight_time && !launch))
    e4ce:	f64a 239d 	movw	r3, #43677	; 0xaa9d
    e4d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4d6:	781b      	ldrb	r3, [r3, #0]
    e4d8:	2b00      	cmp	r3, #0
    e4da:	d10d      	bne.n	e4f8 <climb_control_task+0x80>
    e4dc:	f24b 0394 	movw	r3, #45204	; 0xb094
    e4e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4e4:	881b      	ldrh	r3, [r3, #0]
    e4e6:	2b00      	cmp	r3, #0
    e4e8:	d10c      	bne.n	e504 <climb_control_task+0x8c>
    e4ea:	f64a 23a8 	movw	r3, #43688	; 0xaaa8
    e4ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4f2:	781b      	ldrb	r3, [r3, #0]
    e4f4:	2b00      	cmp	r3, #0
    e4f6:	d105      	bne.n	e504 <climb_control_task+0x8c>
   		 desired_gaz = 0.;
    e4f8:	f64a 53e4 	movw	r3, #44516	; 0xade4
    e4fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e500:	2200      	movs	r2, #0
    e502:	801a      	strh	r2, [r3, #0]
  }  
	//vPrintString("S_19 navigation_task end! \n\r"); //SunnyBeike
}
    e504:	bd80      	pop	{r7, pc}
    e506:	bf00      	nop

0000e508 <stabilisation_task>:
//#endif
}
*/

void stabilisation_task(void)
{
    e508:	b580      	push	{r7, lr}
    e50a:	af00      	add	r7, sp, #0
	//vPrintString("S_6 stabilisation_task start! \n\r"); //SunnyBeike
    ir_update();
    e50c:	f003 f926 	bl	1175c <ir_update>
    estimator_update_state_infrared();
    e510:	f006 fbac 	bl	14c6c <estimator_update_state_infrared>
    roll_pitch_pid_run(); // Set  desired_aileron & desired_elevator
    e514:	f003 f990 	bl	11838 <roll_pitch_pid_run>
    to_fbw.channels[RADIO_THROTTLE] = desired_gaz; // desired_gaz is set upon GPS message reception
    e518:	f64a 53e4 	movw	r3, #44516	; 0xade4
    e51c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e520:	881a      	ldrh	r2, [r3, #0]
    e522:	f64a 33d0 	movw	r3, #43984	; 0xabd0
    e526:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e52a:	801a      	strh	r2, [r3, #0]
    to_fbw.channels[RADIO_ROLL] = desired_aileron;
    e52c:	f64a 53e6 	movw	r3, #44518	; 0xade6
    e530:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e534:	881a      	ldrh	r2, [r3, #0]
    e536:	f64a 33d0 	movw	r3, #43984	; 0xabd0
    e53a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e53e:	805a      	strh	r2, [r3, #2]
#ifndef ANTON_T7
    to_fbw.channels[RADIO_PITCH] = desired_elevator;
    e540:	f64a 53e8 	movw	r3, #44520	; 0xade8
    e544:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e548:	881a      	ldrh	r2, [r3, #0]
    e54a:	f64a 33d0 	movw	r3, #43984	; 0xabd0
    e54e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e552:	809a      	strh	r2, [r3, #4]
#endif
    
    // Code for camera stabilization, FIXME put that elsewhere
    to_fbw.channels[RADIO_GAIN1] = TRIM_PPRZ(MAX_PPRZ/0.75*(-estimator_phi));
    e554:	f24b 0370 	movw	r3, #45168	; 0xb070
    e558:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e55c:	681b      	ldr	r3, [r3, #0]
    e55e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    e562:	4618      	mov	r0, r3
    e564:	f009 f9d8 	bl	17918 <__aeabi_f2d>
    e568:	4602      	mov	r2, r0
    e56a:	460b      	mov	r3, r1
    e56c:	4610      	mov	r0, r2
    e56e:	4619      	mov	r1, r3
    e570:	f04f 0200 	mov.w	r2, #0
    e574:	f04f 0300 	mov.w	r3, #0
    e578:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    e57c:	f009 fa20 	bl	179c0 <__aeabi_dmul>
    e580:	4602      	mov	r2, r0
    e582:	460b      	mov	r3, r1
    e584:	4610      	mov	r0, r2
    e586:	4619      	mov	r1, r3
    e588:	f04f 0200 	mov.w	r2, #0
    e58c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    e590:	f2cc 03c2 	movt	r3, #49346	; 0xc0c2
    e594:	f009 fc86 	bl	17ea4 <__aeabi_dcmplt>
    e598:	4603      	mov	r3, r0
    e59a:	2b00      	cmp	r3, #0
    e59c:	d002      	beq.n	e5a4 <stabilisation_task+0x9c>
    e59e:	f64d 2280 	movw	r2, #55936	; 0xda80
    e5a2:	e046      	b.n	e632 <stabilisation_task+0x12a>
    e5a4:	f24b 0370 	movw	r3, #45168	; 0xb070
    e5a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5ac:	681b      	ldr	r3, [r3, #0]
    e5ae:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    e5b2:	4618      	mov	r0, r3
    e5b4:	f009 f9b0 	bl	17918 <__aeabi_f2d>
    e5b8:	4602      	mov	r2, r0
    e5ba:	460b      	mov	r3, r1
    e5bc:	4610      	mov	r0, r2
    e5be:	4619      	mov	r1, r3
    e5c0:	f04f 0200 	mov.w	r2, #0
    e5c4:	f04f 0300 	mov.w	r3, #0
    e5c8:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    e5cc:	f009 f9f8 	bl	179c0 <__aeabi_dmul>
    e5d0:	4602      	mov	r2, r0
    e5d2:	460b      	mov	r3, r1
    e5d4:	4610      	mov	r0, r2
    e5d6:	4619      	mov	r1, r3
    e5d8:	f04f 0200 	mov.w	r2, #0
    e5dc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    e5e0:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
    e5e4:	f009 fc7c 	bl	17ee0 <__aeabi_dcmpgt>
    e5e8:	4603      	mov	r3, r0
    e5ea:	2b00      	cmp	r3, #0
    e5ec:	d002      	beq.n	e5f4 <stabilisation_task+0xec>
    e5ee:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    e5f2:	e01d      	b.n	e630 <stabilisation_task+0x128>
    e5f4:	f24b 0370 	movw	r3, #45168	; 0xb070
    e5f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5fc:	681b      	ldr	r3, [r3, #0]
    e5fe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    e602:	4618      	mov	r0, r3
    e604:	f009 f988 	bl	17918 <__aeabi_f2d>
    e608:	4602      	mov	r2, r0
    e60a:	460b      	mov	r3, r1
    e60c:	4610      	mov	r0, r2
    e60e:	4619      	mov	r1, r3
    e610:	f04f 0200 	mov.w	r2, #0
    e614:	f04f 0300 	mov.w	r3, #0
    e618:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    e61c:	f009 f9d0 	bl	179c0 <__aeabi_dmul>
    e620:	4602      	mov	r2, r0
    e622:	460b      	mov	r3, r1
    e624:	4610      	mov	r0, r2
    e626:	4619      	mov	r1, r3
    e628:	f009 fc64 	bl	17ef4 <__aeabi_d2iz>
    e62c:	4603      	mov	r3, r0
    e62e:	b29b      	uxth	r3, r3
    e630:	b29a      	uxth	r2, r3
    e632:	f64a 33d0 	movw	r3, #43984	; 0xabd0
    e636:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e63a:	815a      	strh	r2, [r3, #10]
	//vPrintString("S_6 stabilisation_task end! \n\r"); //SunnyBeike
}
    e63c:	bd80      	pop	{r7, pc}
    e63e:	bf00      	nop

0000e640 <send_gps_pos>:
 * If \a estimator_flight_time is null and \a estimator_hspeed_mod is greater
 * than \a MIN_SPEED_FOR_TAKEOFF, set the \a estimator_flight_time to 1 and \a
 * launch to true (which is not set in non auto launch. Then call
 * \a DOWNLINK_SEND_TAKEOFF
 */
void send_gps_pos( void ) {
    e640:	b580      	push	{r7, lr}
    e642:	af00      	add	r7, sp, #0
  gps_msg_received = FALSE;
    e644:	f64a 4345 	movw	r3, #44101	; 0xac45
    e648:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e64c:	2200      	movs	r2, #0
    e64e:	701a      	strb	r2, [r3, #0]
  if (gps_pos_available){
    e650:	f64a 4346 	movw	r3, #44102	; 0xac46
    e654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e658:	781b      	ldrb	r3, [r3, #0]
    e65a:	2b00      	cmp	r3, #0
    e65c:	f001 81af 	beq.w	f9be <send_gps_pos+0x137e>
     DOWNLINK_SEND_GPS(&gps_mode, &gps_utm_east, &gps_utm_north, &gps_fcourse, &gps_falt, &gps_fspeed,&gps_fclimb, &gps_ftow);
    e660:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e664:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e668:	781a      	ldrb	r2, [r3, #0]
    e66a:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    e66e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e672:	781b      	ldrb	r3, [r3, #0]
    e674:	b2db      	uxtb	r3, r3
    e676:	429a      	cmp	r2, r3
    e678:	d313      	bcc.n	e6a2 <send_gps_pos+0x62>
    e67a:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    e67e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e682:	781b      	ldrb	r3, [r3, #0]
    e684:	b2db      	uxtb	r3, r3
    e686:	461a      	mov	r2, r3
    e688:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e68c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e690:	781b      	ldrb	r3, [r3, #0]
    e692:	1ad3      	subs	r3, r2, r3
    e694:	33ff      	adds	r3, #255	; 0xff
    e696:	2b21      	cmp	r3, #33	; 0x21
    e698:	bfd4      	ite	le
    e69a:	2300      	movle	r3, #0
    e69c:	2301      	movgt	r3, #1
    e69e:	b2db      	uxtb	r3, r3
    e6a0:	e011      	b.n	e6c6 <send_gps_pos+0x86>
    e6a2:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    e6a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6aa:	781b      	ldrb	r3, [r3, #0]
    e6ac:	b2db      	uxtb	r3, r3
    e6ae:	461a      	mov	r2, r3
    e6b0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e6b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6b8:	781b      	ldrb	r3, [r3, #0]
    e6ba:	1ad3      	subs	r3, r2, r3
    e6bc:	2b21      	cmp	r3, #33	; 0x21
    e6be:	bfd4      	ite	le
    e6c0:	2300      	movle	r3, #0
    e6c2:	2301      	movgt	r3, #1
    e6c4:	b2db      	uxtb	r3, r3
    e6c6:	2b00      	cmp	r3, #0
    e6c8:	f001 816b 	beq.w	f9a2 <send_gps_pos+0x1362>
    e6cc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e6d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6d4:	781b      	ldrb	r3, [r3, #0]
    e6d6:	461a      	mov	r2, r3
    e6d8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e6dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6e0:	2105      	movs	r1, #5
    e6e2:	5499      	strb	r1, [r3, r2]
    e6e4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e6e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6ec:	781b      	ldrb	r3, [r3, #0]
    e6ee:	3301      	adds	r3, #1
    e6f0:	b2da      	uxtb	r2, r3
    e6f2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e6f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6fa:	701a      	strb	r2, [r3, #0]
    e6fc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e700:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e704:	781b      	ldrb	r3, [r3, #0]
    e706:	2bff      	cmp	r3, #255	; 0xff
    e708:	d105      	bne.n	e716 <send_gps_pos+0xd6>
    e70a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e70e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e712:	2200      	movs	r2, #0
    e714:	701a      	strb	r2, [r3, #0]
    e716:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e71a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e71e:	781b      	ldrb	r3, [r3, #0]
    e720:	461a      	mov	r2, r3
    e722:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e726:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e72a:	2108      	movs	r1, #8
    e72c:	5499      	strb	r1, [r3, r2]
    e72e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e732:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e736:	781b      	ldrb	r3, [r3, #0]
    e738:	3301      	adds	r3, #1
    e73a:	b2da      	uxtb	r2, r3
    e73c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e740:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e744:	701a      	strb	r2, [r3, #0]
    e746:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e74a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e74e:	781b      	ldrb	r3, [r3, #0]
    e750:	2bff      	cmp	r3, #255	; 0xff
    e752:	d105      	bne.n	e760 <send_gps_pos+0x120>
    e754:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e758:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e75c:	2200      	movs	r2, #0
    e75e:	701a      	strb	r2, [r3, #0]
    e760:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e764:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e768:	2208      	movs	r2, #8
    e76a:	701a      	strb	r2, [r3, #0]
    e76c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e774:	2208      	movs	r2, #8
    e776:	701a      	strb	r2, [r3, #0]
    e778:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e77c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e780:	781b      	ldrb	r3, [r3, #0]
    e782:	461a      	mov	r2, r3
    e784:	f64a 4344 	movw	r3, #44100	; 0xac44
    e788:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e78c:	7819      	ldrb	r1, [r3, #0]
    e78e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e792:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e796:	5499      	strb	r1, [r3, r2]
    e798:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e79c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7a0:	781a      	ldrb	r2, [r3, #0]
    e7a2:	f64a 4344 	movw	r3, #44100	; 0xac44
    e7a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7aa:	781b      	ldrb	r3, [r3, #0]
    e7ac:	4413      	add	r3, r2
    e7ae:	b2da      	uxtb	r2, r3
    e7b0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e7b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7b8:	701a      	strb	r2, [r3, #0]
    e7ba:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e7be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7c2:	781a      	ldrb	r2, [r3, #0]
    e7c4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e7c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7cc:	781b      	ldrb	r3, [r3, #0]
    e7ce:	4413      	add	r3, r2
    e7d0:	b2da      	uxtb	r2, r3
    e7d2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e7d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7da:	701a      	strb	r2, [r3, #0]
    e7dc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e7e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7e4:	781b      	ldrb	r3, [r3, #0]
    e7e6:	3301      	adds	r3, #1
    e7e8:	b2da      	uxtb	r2, r3
    e7ea:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e7ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7f2:	701a      	strb	r2, [r3, #0]
    e7f4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e7f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7fc:	781b      	ldrb	r3, [r3, #0]
    e7fe:	2bff      	cmp	r3, #255	; 0xff
    e800:	d105      	bne.n	e80e <send_gps_pos+0x1ce>
    e802:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e80a:	2200      	movs	r2, #0
    e80c:	701a      	strb	r2, [r3, #0]
    e80e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e816:	781b      	ldrb	r3, [r3, #0]
    e818:	461a      	mov	r2, r3
    e81a:	f64a 4334 	movw	r3, #44084	; 0xac34
    e81e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e822:	7819      	ldrb	r1, [r3, #0]
    e824:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e828:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e82c:	5499      	strb	r1, [r3, r2]
    e82e:	f64a 4334 	movw	r3, #44084	; 0xac34
    e832:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e836:	781a      	ldrb	r2, [r3, #0]
    e838:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e83c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e840:	781b      	ldrb	r3, [r3, #0]
    e842:	4413      	add	r3, r2
    e844:	b2da      	uxtb	r2, r3
    e846:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e84a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e84e:	701a      	strb	r2, [r3, #0]
    e850:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e854:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e858:	781a      	ldrb	r2, [r3, #0]
    e85a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e85e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e862:	781b      	ldrb	r3, [r3, #0]
    e864:	4413      	add	r3, r2
    e866:	b2da      	uxtb	r2, r3
    e868:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e86c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e870:	701a      	strb	r2, [r3, #0]
    e872:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e876:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e87a:	781b      	ldrb	r3, [r3, #0]
    e87c:	3301      	adds	r3, #1
    e87e:	b2da      	uxtb	r2, r3
    e880:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e884:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e888:	701a      	strb	r2, [r3, #0]
    e88a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e88e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e892:	781b      	ldrb	r3, [r3, #0]
    e894:	2bff      	cmp	r3, #255	; 0xff
    e896:	d105      	bne.n	e8a4 <send_gps_pos+0x264>
    e898:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e89c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8a0:	2200      	movs	r2, #0
    e8a2:	701a      	strb	r2, [r3, #0]
    e8a4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e8a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8ac:	781b      	ldrb	r3, [r3, #0]
    e8ae:	461a      	mov	r2, r3
    e8b0:	f64a 4334 	movw	r3, #44084	; 0xac34
    e8b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8b8:	7859      	ldrb	r1, [r3, #1]
    e8ba:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e8be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8c2:	5499      	strb	r1, [r3, r2]
    e8c4:	4bd1      	ldr	r3, [pc, #836]	; (ec0c <send_gps_pos+0x5cc>)
    e8c6:	781a      	ldrb	r2, [r3, #0]
    e8c8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e8cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8d0:	781b      	ldrb	r3, [r3, #0]
    e8d2:	4413      	add	r3, r2
    e8d4:	b2da      	uxtb	r2, r3
    e8d6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e8da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8de:	701a      	strb	r2, [r3, #0]
    e8e0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e8e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8e8:	781a      	ldrb	r2, [r3, #0]
    e8ea:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e8ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8f2:	781b      	ldrb	r3, [r3, #0]
    e8f4:	4413      	add	r3, r2
    e8f6:	b2da      	uxtb	r2, r3
    e8f8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e8fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e900:	701a      	strb	r2, [r3, #0]
    e902:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e906:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e90a:	781b      	ldrb	r3, [r3, #0]
    e90c:	3301      	adds	r3, #1
    e90e:	b2da      	uxtb	r2, r3
    e910:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e914:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e918:	701a      	strb	r2, [r3, #0]
    e91a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e91e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e922:	781b      	ldrb	r3, [r3, #0]
    e924:	2bff      	cmp	r3, #255	; 0xff
    e926:	d105      	bne.n	e934 <send_gps_pos+0x2f4>
    e928:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e92c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e930:	2200      	movs	r2, #0
    e932:	701a      	strb	r2, [r3, #0]
    e934:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e938:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e93c:	781b      	ldrb	r3, [r3, #0]
    e93e:	461a      	mov	r2, r3
    e940:	f64a 4334 	movw	r3, #44084	; 0xac34
    e944:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e948:	7899      	ldrb	r1, [r3, #2]
    e94a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e94e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e952:	5499      	strb	r1, [r3, r2]
    e954:	4bae      	ldr	r3, [pc, #696]	; (ec10 <send_gps_pos+0x5d0>)
    e956:	781a      	ldrb	r2, [r3, #0]
    e958:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e95c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e960:	781b      	ldrb	r3, [r3, #0]
    e962:	4413      	add	r3, r2
    e964:	b2da      	uxtb	r2, r3
    e966:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e96a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e96e:	701a      	strb	r2, [r3, #0]
    e970:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e974:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e978:	781a      	ldrb	r2, [r3, #0]
    e97a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e97e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e982:	781b      	ldrb	r3, [r3, #0]
    e984:	4413      	add	r3, r2
    e986:	b2da      	uxtb	r2, r3
    e988:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e98c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e990:	701a      	strb	r2, [r3, #0]
    e992:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e996:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e99a:	781b      	ldrb	r3, [r3, #0]
    e99c:	3301      	adds	r3, #1
    e99e:	b2da      	uxtb	r2, r3
    e9a0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e9a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9a8:	701a      	strb	r2, [r3, #0]
    e9aa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e9ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9b2:	781b      	ldrb	r3, [r3, #0]
    e9b4:	2bff      	cmp	r3, #255	; 0xff
    e9b6:	d105      	bne.n	e9c4 <send_gps_pos+0x384>
    e9b8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e9bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9c0:	2200      	movs	r2, #0
    e9c2:	701a      	strb	r2, [r3, #0]
    e9c4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e9c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9cc:	781b      	ldrb	r3, [r3, #0]
    e9ce:	461a      	mov	r2, r3
    e9d0:	f64a 4334 	movw	r3, #44084	; 0xac34
    e9d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9d8:	78d9      	ldrb	r1, [r3, #3]
    e9da:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e9de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9e2:	5499      	strb	r1, [r3, r2]
    e9e4:	4b8b      	ldr	r3, [pc, #556]	; (ec14 <send_gps_pos+0x5d4>)
    e9e6:	781a      	ldrb	r2, [r3, #0]
    e9e8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e9ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9f0:	781b      	ldrb	r3, [r3, #0]
    e9f2:	4413      	add	r3, r2
    e9f4:	b2da      	uxtb	r2, r3
    e9f6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e9fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9fe:	701a      	strb	r2, [r3, #0]
    ea00:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ea04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea08:	781a      	ldrb	r2, [r3, #0]
    ea0a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ea0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea12:	781b      	ldrb	r3, [r3, #0]
    ea14:	4413      	add	r3, r2
    ea16:	b2da      	uxtb	r2, r3
    ea18:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ea1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea20:	701a      	strb	r2, [r3, #0]
    ea22:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ea26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea2a:	781b      	ldrb	r3, [r3, #0]
    ea2c:	3301      	adds	r3, #1
    ea2e:	b2da      	uxtb	r2, r3
    ea30:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ea34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea38:	701a      	strb	r2, [r3, #0]
    ea3a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ea3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea42:	781b      	ldrb	r3, [r3, #0]
    ea44:	2bff      	cmp	r3, #255	; 0xff
    ea46:	d105      	bne.n	ea54 <send_gps_pos+0x414>
    ea48:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ea4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea50:	2200      	movs	r2, #0
    ea52:	701a      	strb	r2, [r3, #0]
    ea54:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ea58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea5c:	781b      	ldrb	r3, [r3, #0]
    ea5e:	461a      	mov	r2, r3
    ea60:	f64a 4338 	movw	r3, #44088	; 0xac38
    ea64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea68:	7819      	ldrb	r1, [r3, #0]
    ea6a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ea6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea72:	5499      	strb	r1, [r3, r2]
    ea74:	f64a 4338 	movw	r3, #44088	; 0xac38
    ea78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea7c:	781a      	ldrb	r2, [r3, #0]
    ea7e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ea82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea86:	781b      	ldrb	r3, [r3, #0]
    ea88:	4413      	add	r3, r2
    ea8a:	b2da      	uxtb	r2, r3
    ea8c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ea90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea94:	701a      	strb	r2, [r3, #0]
    ea96:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ea9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea9e:	781a      	ldrb	r2, [r3, #0]
    eaa0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    eaa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eaa8:	781b      	ldrb	r3, [r3, #0]
    eaaa:	4413      	add	r3, r2
    eaac:	b2da      	uxtb	r2, r3
    eaae:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    eab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eab6:	701a      	strb	r2, [r3, #0]
    eab8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eabc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eac0:	781b      	ldrb	r3, [r3, #0]
    eac2:	3301      	adds	r3, #1
    eac4:	b2da      	uxtb	r2, r3
    eac6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eaca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eace:	701a      	strb	r2, [r3, #0]
    ead0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ead4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ead8:	781b      	ldrb	r3, [r3, #0]
    eada:	2bff      	cmp	r3, #255	; 0xff
    eadc:	d105      	bne.n	eaea <send_gps_pos+0x4aa>
    eade:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eae2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eae6:	2200      	movs	r2, #0
    eae8:	701a      	strb	r2, [r3, #0]
    eaea:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eaee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eaf2:	781b      	ldrb	r3, [r3, #0]
    eaf4:	461a      	mov	r2, r3
    eaf6:	f64a 4338 	movw	r3, #44088	; 0xac38
    eafa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eafe:	7859      	ldrb	r1, [r3, #1]
    eb00:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    eb04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb08:	5499      	strb	r1, [r3, r2]
    eb0a:	4b43      	ldr	r3, [pc, #268]	; (ec18 <send_gps_pos+0x5d8>)
    eb0c:	781a      	ldrb	r2, [r3, #0]
    eb0e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    eb12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb16:	781b      	ldrb	r3, [r3, #0]
    eb18:	4413      	add	r3, r2
    eb1a:	b2da      	uxtb	r2, r3
    eb1c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    eb20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb24:	701a      	strb	r2, [r3, #0]
    eb26:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    eb2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb2e:	781a      	ldrb	r2, [r3, #0]
    eb30:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    eb34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb38:	781b      	ldrb	r3, [r3, #0]
    eb3a:	4413      	add	r3, r2
    eb3c:	b2da      	uxtb	r2, r3
    eb3e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    eb42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb46:	701a      	strb	r2, [r3, #0]
    eb48:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eb4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb50:	781b      	ldrb	r3, [r3, #0]
    eb52:	3301      	adds	r3, #1
    eb54:	b2da      	uxtb	r2, r3
    eb56:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eb5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb5e:	701a      	strb	r2, [r3, #0]
    eb60:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eb64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb68:	781b      	ldrb	r3, [r3, #0]
    eb6a:	2bff      	cmp	r3, #255	; 0xff
    eb6c:	d105      	bne.n	eb7a <send_gps_pos+0x53a>
    eb6e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eb72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb76:	2200      	movs	r2, #0
    eb78:	701a      	strb	r2, [r3, #0]
    eb7a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eb7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb82:	781b      	ldrb	r3, [r3, #0]
    eb84:	461a      	mov	r2, r3
    eb86:	f64a 4338 	movw	r3, #44088	; 0xac38
    eb8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb8e:	7899      	ldrb	r1, [r3, #2]
    eb90:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    eb94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb98:	5499      	strb	r1, [r3, r2]
    eb9a:	4b20      	ldr	r3, [pc, #128]	; (ec1c <send_gps_pos+0x5dc>)
    eb9c:	781a      	ldrb	r2, [r3, #0]
    eb9e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    eba2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eba6:	781b      	ldrb	r3, [r3, #0]
    eba8:	4413      	add	r3, r2
    ebaa:	b2da      	uxtb	r2, r3
    ebac:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ebb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebb4:	701a      	strb	r2, [r3, #0]
    ebb6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ebba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebbe:	781a      	ldrb	r2, [r3, #0]
    ebc0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ebc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebc8:	781b      	ldrb	r3, [r3, #0]
    ebca:	4413      	add	r3, r2
    ebcc:	b2da      	uxtb	r2, r3
    ebce:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ebd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebd6:	701a      	strb	r2, [r3, #0]
    ebd8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ebdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebe0:	781b      	ldrb	r3, [r3, #0]
    ebe2:	3301      	adds	r3, #1
    ebe4:	b2da      	uxtb	r2, r3
    ebe6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ebea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebee:	701a      	strb	r2, [r3, #0]
    ebf0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ebf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebf8:	781b      	ldrb	r3, [r3, #0]
    ebfa:	2bff      	cmp	r3, #255	; 0xff
    ebfc:	d110      	bne.n	ec20 <send_gps_pos+0x5e0>
    ebfe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ec02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec06:	2200      	movs	r2, #0
    ec08:	701a      	strb	r2, [r3, #0]
    ec0a:	e009      	b.n	ec20 <send_gps_pos+0x5e0>
    ec0c:	2000ac35 	.word	0x2000ac35
    ec10:	2000ac36 	.word	0x2000ac36
    ec14:	2000ac37 	.word	0x2000ac37
    ec18:	2000ac39 	.word	0x2000ac39
    ec1c:	2000ac3a 	.word	0x2000ac3a
    ec20:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ec24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec28:	781b      	ldrb	r3, [r3, #0]
    ec2a:	461a      	mov	r2, r3
    ec2c:	f64a 4338 	movw	r3, #44088	; 0xac38
    ec30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec34:	78d9      	ldrb	r1, [r3, #3]
    ec36:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ec3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec3e:	5499      	strb	r1, [r3, r2]
    ec40:	4bd3      	ldr	r3, [pc, #844]	; (ef90 <send_gps_pos+0x950>)
    ec42:	781a      	ldrb	r2, [r3, #0]
    ec44:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ec48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec4c:	781b      	ldrb	r3, [r3, #0]
    ec4e:	4413      	add	r3, r2
    ec50:	b2da      	uxtb	r2, r3
    ec52:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ec56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec5a:	701a      	strb	r2, [r3, #0]
    ec5c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ec60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec64:	781a      	ldrb	r2, [r3, #0]
    ec66:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ec6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec6e:	781b      	ldrb	r3, [r3, #0]
    ec70:	4413      	add	r3, r2
    ec72:	b2da      	uxtb	r2, r3
    ec74:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ec78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec7c:	701a      	strb	r2, [r3, #0]
    ec7e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ec82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec86:	781b      	ldrb	r3, [r3, #0]
    ec88:	3301      	adds	r3, #1
    ec8a:	b2da      	uxtb	r2, r3
    ec8c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ec90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec94:	701a      	strb	r2, [r3, #0]
    ec96:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ec9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec9e:	781b      	ldrb	r3, [r3, #0]
    eca0:	2bff      	cmp	r3, #255	; 0xff
    eca2:	d105      	bne.n	ecb0 <send_gps_pos+0x670>
    eca4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecac:	2200      	movs	r2, #0
    ecae:	701a      	strb	r2, [r3, #0]
    ecb0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ecb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecb8:	781b      	ldrb	r3, [r3, #0]
    ecba:	461a      	mov	r2, r3
    ecbc:	f64a 4330 	movw	r3, #44080	; 0xac30
    ecc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecc4:	7819      	ldrb	r1, [r3, #0]
    ecc6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ecca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecce:	5499      	strb	r1, [r3, r2]
    ecd0:	f64a 4330 	movw	r3, #44080	; 0xac30
    ecd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecd8:	781a      	ldrb	r2, [r3, #0]
    ecda:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ecde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ece2:	781b      	ldrb	r3, [r3, #0]
    ece4:	4413      	add	r3, r2
    ece6:	b2da      	uxtb	r2, r3
    ece8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ecec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecf0:	701a      	strb	r2, [r3, #0]
    ecf2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ecf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecfa:	781a      	ldrb	r2, [r3, #0]
    ecfc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ed00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed04:	781b      	ldrb	r3, [r3, #0]
    ed06:	4413      	add	r3, r2
    ed08:	b2da      	uxtb	r2, r3
    ed0a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ed0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed12:	701a      	strb	r2, [r3, #0]
    ed14:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ed18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed1c:	781b      	ldrb	r3, [r3, #0]
    ed1e:	3301      	adds	r3, #1
    ed20:	b2da      	uxtb	r2, r3
    ed22:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ed26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed2a:	701a      	strb	r2, [r3, #0]
    ed2c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ed30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed34:	781b      	ldrb	r3, [r3, #0]
    ed36:	2bff      	cmp	r3, #255	; 0xff
    ed38:	d105      	bne.n	ed46 <send_gps_pos+0x706>
    ed3a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ed3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed42:	2200      	movs	r2, #0
    ed44:	701a      	strb	r2, [r3, #0]
    ed46:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ed4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed4e:	781b      	ldrb	r3, [r3, #0]
    ed50:	461a      	mov	r2, r3
    ed52:	f64a 4330 	movw	r3, #44080	; 0xac30
    ed56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed5a:	7859      	ldrb	r1, [r3, #1]
    ed5c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ed60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed64:	5499      	strb	r1, [r3, r2]
    ed66:	4b8b      	ldr	r3, [pc, #556]	; (ef94 <send_gps_pos+0x954>)
    ed68:	781a      	ldrb	r2, [r3, #0]
    ed6a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ed6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed72:	781b      	ldrb	r3, [r3, #0]
    ed74:	4413      	add	r3, r2
    ed76:	b2da      	uxtb	r2, r3
    ed78:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ed7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed80:	701a      	strb	r2, [r3, #0]
    ed82:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ed86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed8a:	781a      	ldrb	r2, [r3, #0]
    ed8c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ed90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed94:	781b      	ldrb	r3, [r3, #0]
    ed96:	4413      	add	r3, r2
    ed98:	b2da      	uxtb	r2, r3
    ed9a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ed9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eda2:	701a      	strb	r2, [r3, #0]
    eda4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eda8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edac:	781b      	ldrb	r3, [r3, #0]
    edae:	3301      	adds	r3, #1
    edb0:	b2da      	uxtb	r2, r3
    edb2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    edb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edba:	701a      	strb	r2, [r3, #0]
    edbc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    edc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edc4:	781b      	ldrb	r3, [r3, #0]
    edc6:	2bff      	cmp	r3, #255	; 0xff
    edc8:	d105      	bne.n	edd6 <send_gps_pos+0x796>
    edca:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    edce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edd2:	2200      	movs	r2, #0
    edd4:	701a      	strb	r2, [r3, #0]
    edd6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    edda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edde:	781b      	ldrb	r3, [r3, #0]
    ede0:	461a      	mov	r2, r3
    ede2:	f64a 4330 	movw	r3, #44080	; 0xac30
    ede6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edea:	7899      	ldrb	r1, [r3, #2]
    edec:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    edf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edf4:	5499      	strb	r1, [r3, r2]
    edf6:	4b68      	ldr	r3, [pc, #416]	; (ef98 <send_gps_pos+0x958>)
    edf8:	781a      	ldrb	r2, [r3, #0]
    edfa:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    edfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee02:	781b      	ldrb	r3, [r3, #0]
    ee04:	4413      	add	r3, r2
    ee06:	b2da      	uxtb	r2, r3
    ee08:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ee0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee10:	701a      	strb	r2, [r3, #0]
    ee12:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ee16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee1a:	781a      	ldrb	r2, [r3, #0]
    ee1c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ee20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee24:	781b      	ldrb	r3, [r3, #0]
    ee26:	4413      	add	r3, r2
    ee28:	b2da      	uxtb	r2, r3
    ee2a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ee2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee32:	701a      	strb	r2, [r3, #0]
    ee34:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ee38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee3c:	781b      	ldrb	r3, [r3, #0]
    ee3e:	3301      	adds	r3, #1
    ee40:	b2da      	uxtb	r2, r3
    ee42:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ee46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee4a:	701a      	strb	r2, [r3, #0]
    ee4c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ee50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee54:	781b      	ldrb	r3, [r3, #0]
    ee56:	2bff      	cmp	r3, #255	; 0xff
    ee58:	d105      	bne.n	ee66 <send_gps_pos+0x826>
    ee5a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ee5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee62:	2200      	movs	r2, #0
    ee64:	701a      	strb	r2, [r3, #0]
    ee66:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ee6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee6e:	781b      	ldrb	r3, [r3, #0]
    ee70:	461a      	mov	r2, r3
    ee72:	f64a 4330 	movw	r3, #44080	; 0xac30
    ee76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee7a:	78d9      	ldrb	r1, [r3, #3]
    ee7c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ee80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee84:	5499      	strb	r1, [r3, r2]
    ee86:	4b45      	ldr	r3, [pc, #276]	; (ef9c <send_gps_pos+0x95c>)
    ee88:	781a      	ldrb	r2, [r3, #0]
    ee8a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ee8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee92:	781b      	ldrb	r3, [r3, #0]
    ee94:	4413      	add	r3, r2
    ee96:	b2da      	uxtb	r2, r3
    ee98:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ee9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eea0:	701a      	strb	r2, [r3, #0]
    eea2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    eea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eeaa:	781a      	ldrb	r2, [r3, #0]
    eeac:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    eeb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eeb4:	781b      	ldrb	r3, [r3, #0]
    eeb6:	4413      	add	r3, r2
    eeb8:	b2da      	uxtb	r2, r3
    eeba:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    eebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eec2:	701a      	strb	r2, [r3, #0]
    eec4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eecc:	781b      	ldrb	r3, [r3, #0]
    eece:	3301      	adds	r3, #1
    eed0:	b2da      	uxtb	r2, r3
    eed2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eeda:	701a      	strb	r2, [r3, #0]
    eedc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eee4:	781b      	ldrb	r3, [r3, #0]
    eee6:	2bff      	cmp	r3, #255	; 0xff
    eee8:	d105      	bne.n	eef6 <send_gps_pos+0x8b6>
    eeea:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eeee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eef2:	2200      	movs	r2, #0
    eef4:	701a      	strb	r2, [r3, #0]
    eef6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eefa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eefe:	781b      	ldrb	r3, [r3, #0]
    ef00:	461a      	mov	r2, r3
    ef02:	f64a 4324 	movw	r3, #44068	; 0xac24
    ef06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef0a:	7819      	ldrb	r1, [r3, #0]
    ef0c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ef10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef14:	5499      	strb	r1, [r3, r2]
    ef16:	f64a 4324 	movw	r3, #44068	; 0xac24
    ef1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef1e:	781a      	ldrb	r2, [r3, #0]
    ef20:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ef24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef28:	781b      	ldrb	r3, [r3, #0]
    ef2a:	4413      	add	r3, r2
    ef2c:	b2da      	uxtb	r2, r3
    ef2e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ef32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef36:	701a      	strb	r2, [r3, #0]
    ef38:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ef3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef40:	781a      	ldrb	r2, [r3, #0]
    ef42:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ef46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef4a:	781b      	ldrb	r3, [r3, #0]
    ef4c:	4413      	add	r3, r2
    ef4e:	b2da      	uxtb	r2, r3
    ef50:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ef54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef58:	701a      	strb	r2, [r3, #0]
    ef5a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ef5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef62:	781b      	ldrb	r3, [r3, #0]
    ef64:	3301      	adds	r3, #1
    ef66:	b2da      	uxtb	r2, r3
    ef68:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ef6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef70:	701a      	strb	r2, [r3, #0]
    ef72:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ef76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef7a:	781b      	ldrb	r3, [r3, #0]
    ef7c:	2bff      	cmp	r3, #255	; 0xff
    ef7e:	d10f      	bne.n	efa0 <send_gps_pos+0x960>
    ef80:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ef84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef88:	2200      	movs	r2, #0
    ef8a:	701a      	strb	r2, [r3, #0]
    ef8c:	e008      	b.n	efa0 <send_gps_pos+0x960>
    ef8e:	bf00      	nop
    ef90:	2000ac3b 	.word	0x2000ac3b
    ef94:	2000ac31 	.word	0x2000ac31
    ef98:	2000ac32 	.word	0x2000ac32
    ef9c:	2000ac33 	.word	0x2000ac33
    efa0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    efa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efa8:	781b      	ldrb	r3, [r3, #0]
    efaa:	461a      	mov	r2, r3
    efac:	f64a 4324 	movw	r3, #44068	; 0xac24
    efb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efb4:	7859      	ldrb	r1, [r3, #1]
    efb6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    efba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efbe:	5499      	strb	r1, [r3, r2]
    efc0:	4bd1      	ldr	r3, [pc, #836]	; (f308 <send_gps_pos+0xcc8>)
    efc2:	781a      	ldrb	r2, [r3, #0]
    efc4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    efc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efcc:	781b      	ldrb	r3, [r3, #0]
    efce:	4413      	add	r3, r2
    efd0:	b2da      	uxtb	r2, r3
    efd2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    efd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efda:	701a      	strb	r2, [r3, #0]
    efdc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    efe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efe4:	781a      	ldrb	r2, [r3, #0]
    efe6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    efea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efee:	781b      	ldrb	r3, [r3, #0]
    eff0:	4413      	add	r3, r2
    eff2:	b2da      	uxtb	r2, r3
    eff4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    eff8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    effc:	701a      	strb	r2, [r3, #0]
    effe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f002:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f006:	781b      	ldrb	r3, [r3, #0]
    f008:	3301      	adds	r3, #1
    f00a:	b2da      	uxtb	r2, r3
    f00c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f010:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f014:	701a      	strb	r2, [r3, #0]
    f016:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f01a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f01e:	781b      	ldrb	r3, [r3, #0]
    f020:	2bff      	cmp	r3, #255	; 0xff
    f022:	d105      	bne.n	f030 <send_gps_pos+0x9f0>
    f024:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f028:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f02c:	2200      	movs	r2, #0
    f02e:	701a      	strb	r2, [r3, #0]
    f030:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f034:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f038:	781b      	ldrb	r3, [r3, #0]
    f03a:	461a      	mov	r2, r3
    f03c:	f64a 4324 	movw	r3, #44068	; 0xac24
    f040:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f044:	7899      	ldrb	r1, [r3, #2]
    f046:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f04a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f04e:	5499      	strb	r1, [r3, r2]
    f050:	4bae      	ldr	r3, [pc, #696]	; (f30c <send_gps_pos+0xccc>)
    f052:	781a      	ldrb	r2, [r3, #0]
    f054:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f058:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f05c:	781b      	ldrb	r3, [r3, #0]
    f05e:	4413      	add	r3, r2
    f060:	b2da      	uxtb	r2, r3
    f062:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f066:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f06a:	701a      	strb	r2, [r3, #0]
    f06c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f070:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f074:	781a      	ldrb	r2, [r3, #0]
    f076:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f07a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f07e:	781b      	ldrb	r3, [r3, #0]
    f080:	4413      	add	r3, r2
    f082:	b2da      	uxtb	r2, r3
    f084:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f088:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f08c:	701a      	strb	r2, [r3, #0]
    f08e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f092:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f096:	781b      	ldrb	r3, [r3, #0]
    f098:	3301      	adds	r3, #1
    f09a:	b2da      	uxtb	r2, r3
    f09c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f0a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0a4:	701a      	strb	r2, [r3, #0]
    f0a6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f0aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0ae:	781b      	ldrb	r3, [r3, #0]
    f0b0:	2bff      	cmp	r3, #255	; 0xff
    f0b2:	d105      	bne.n	f0c0 <send_gps_pos+0xa80>
    f0b4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f0b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0bc:	2200      	movs	r2, #0
    f0be:	701a      	strb	r2, [r3, #0]
    f0c0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f0c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0c8:	781b      	ldrb	r3, [r3, #0]
    f0ca:	461a      	mov	r2, r3
    f0cc:	f64a 4324 	movw	r3, #44068	; 0xac24
    f0d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0d4:	78d9      	ldrb	r1, [r3, #3]
    f0d6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f0da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0de:	5499      	strb	r1, [r3, r2]
    f0e0:	4b8b      	ldr	r3, [pc, #556]	; (f310 <send_gps_pos+0xcd0>)
    f0e2:	781a      	ldrb	r2, [r3, #0]
    f0e4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f0e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0ec:	781b      	ldrb	r3, [r3, #0]
    f0ee:	4413      	add	r3, r2
    f0f0:	b2da      	uxtb	r2, r3
    f0f2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f0f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0fa:	701a      	strb	r2, [r3, #0]
    f0fc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f100:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f104:	781a      	ldrb	r2, [r3, #0]
    f106:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f10a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f10e:	781b      	ldrb	r3, [r3, #0]
    f110:	4413      	add	r3, r2
    f112:	b2da      	uxtb	r2, r3
    f114:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f118:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f11c:	701a      	strb	r2, [r3, #0]
    f11e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f122:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f126:	781b      	ldrb	r3, [r3, #0]
    f128:	3301      	adds	r3, #1
    f12a:	b2da      	uxtb	r2, r3
    f12c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f130:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f134:	701a      	strb	r2, [r3, #0]
    f136:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f13a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f13e:	781b      	ldrb	r3, [r3, #0]
    f140:	2bff      	cmp	r3, #255	; 0xff
    f142:	d105      	bne.n	f150 <send_gps_pos+0xb10>
    f144:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f148:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f14c:	2200      	movs	r2, #0
    f14e:	701a      	strb	r2, [r3, #0]
    f150:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f154:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f158:	781b      	ldrb	r3, [r3, #0]
    f15a:	461a      	mov	r2, r3
    f15c:	f64a 4328 	movw	r3, #44072	; 0xac28
    f160:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f164:	7819      	ldrb	r1, [r3, #0]
    f166:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f16a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f16e:	5499      	strb	r1, [r3, r2]
    f170:	f64a 4328 	movw	r3, #44072	; 0xac28
    f174:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f178:	781a      	ldrb	r2, [r3, #0]
    f17a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f17e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f182:	781b      	ldrb	r3, [r3, #0]
    f184:	4413      	add	r3, r2
    f186:	b2da      	uxtb	r2, r3
    f188:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f18c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f190:	701a      	strb	r2, [r3, #0]
    f192:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f196:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f19a:	781a      	ldrb	r2, [r3, #0]
    f19c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f1a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1a4:	781b      	ldrb	r3, [r3, #0]
    f1a6:	4413      	add	r3, r2
    f1a8:	b2da      	uxtb	r2, r3
    f1aa:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f1ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1b2:	701a      	strb	r2, [r3, #0]
    f1b4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f1b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1bc:	781b      	ldrb	r3, [r3, #0]
    f1be:	3301      	adds	r3, #1
    f1c0:	b2da      	uxtb	r2, r3
    f1c2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f1c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1ca:	701a      	strb	r2, [r3, #0]
    f1cc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f1d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1d4:	781b      	ldrb	r3, [r3, #0]
    f1d6:	2bff      	cmp	r3, #255	; 0xff
    f1d8:	d105      	bne.n	f1e6 <send_gps_pos+0xba6>
    f1da:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f1de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1e2:	2200      	movs	r2, #0
    f1e4:	701a      	strb	r2, [r3, #0]
    f1e6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f1ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1ee:	781b      	ldrb	r3, [r3, #0]
    f1f0:	461a      	mov	r2, r3
    f1f2:	f64a 4328 	movw	r3, #44072	; 0xac28
    f1f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1fa:	7859      	ldrb	r1, [r3, #1]
    f1fc:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f200:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f204:	5499      	strb	r1, [r3, r2]
    f206:	4b43      	ldr	r3, [pc, #268]	; (f314 <send_gps_pos+0xcd4>)
    f208:	781a      	ldrb	r2, [r3, #0]
    f20a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f20e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f212:	781b      	ldrb	r3, [r3, #0]
    f214:	4413      	add	r3, r2
    f216:	b2da      	uxtb	r2, r3
    f218:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f21c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f220:	701a      	strb	r2, [r3, #0]
    f222:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f22a:	781a      	ldrb	r2, [r3, #0]
    f22c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f230:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f234:	781b      	ldrb	r3, [r3, #0]
    f236:	4413      	add	r3, r2
    f238:	b2da      	uxtb	r2, r3
    f23a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f23e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f242:	701a      	strb	r2, [r3, #0]
    f244:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f248:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f24c:	781b      	ldrb	r3, [r3, #0]
    f24e:	3301      	adds	r3, #1
    f250:	b2da      	uxtb	r2, r3
    f252:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f256:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f25a:	701a      	strb	r2, [r3, #0]
    f25c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f260:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f264:	781b      	ldrb	r3, [r3, #0]
    f266:	2bff      	cmp	r3, #255	; 0xff
    f268:	d105      	bne.n	f276 <send_gps_pos+0xc36>
    f26a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f26e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f272:	2200      	movs	r2, #0
    f274:	701a      	strb	r2, [r3, #0]
    f276:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f27a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f27e:	781b      	ldrb	r3, [r3, #0]
    f280:	461a      	mov	r2, r3
    f282:	f64a 4328 	movw	r3, #44072	; 0xac28
    f286:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f28a:	7899      	ldrb	r1, [r3, #2]
    f28c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f290:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f294:	5499      	strb	r1, [r3, r2]
    f296:	4b20      	ldr	r3, [pc, #128]	; (f318 <send_gps_pos+0xcd8>)
    f298:	781a      	ldrb	r2, [r3, #0]
    f29a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f29e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2a2:	781b      	ldrb	r3, [r3, #0]
    f2a4:	4413      	add	r3, r2
    f2a6:	b2da      	uxtb	r2, r3
    f2a8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f2ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2b0:	701a      	strb	r2, [r3, #0]
    f2b2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f2b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2ba:	781a      	ldrb	r2, [r3, #0]
    f2bc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f2c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2c4:	781b      	ldrb	r3, [r3, #0]
    f2c6:	4413      	add	r3, r2
    f2c8:	b2da      	uxtb	r2, r3
    f2ca:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f2ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2d2:	701a      	strb	r2, [r3, #0]
    f2d4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f2d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2dc:	781b      	ldrb	r3, [r3, #0]
    f2de:	3301      	adds	r3, #1
    f2e0:	b2da      	uxtb	r2, r3
    f2e2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f2e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2ea:	701a      	strb	r2, [r3, #0]
    f2ec:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f2f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2f4:	781b      	ldrb	r3, [r3, #0]
    f2f6:	2bff      	cmp	r3, #255	; 0xff
    f2f8:	d110      	bne.n	f31c <send_gps_pos+0xcdc>
    f2fa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f2fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f302:	2200      	movs	r2, #0
    f304:	701a      	strb	r2, [r3, #0]
    f306:	e009      	b.n	f31c <send_gps_pos+0xcdc>
    f308:	2000ac25 	.word	0x2000ac25
    f30c:	2000ac26 	.word	0x2000ac26
    f310:	2000ac27 	.word	0x2000ac27
    f314:	2000ac29 	.word	0x2000ac29
    f318:	2000ac2a 	.word	0x2000ac2a
    f31c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f320:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f324:	781b      	ldrb	r3, [r3, #0]
    f326:	461a      	mov	r2, r3
    f328:	f64a 4328 	movw	r3, #44072	; 0xac28
    f32c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f330:	78d9      	ldrb	r1, [r3, #3]
    f332:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f336:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f33a:	5499      	strb	r1, [r3, r2]
    f33c:	4bd3      	ldr	r3, [pc, #844]	; (f68c <send_gps_pos+0x104c>)
    f33e:	781a      	ldrb	r2, [r3, #0]
    f340:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f344:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f348:	781b      	ldrb	r3, [r3, #0]
    f34a:	4413      	add	r3, r2
    f34c:	b2da      	uxtb	r2, r3
    f34e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f352:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f356:	701a      	strb	r2, [r3, #0]
    f358:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f35c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f360:	781a      	ldrb	r2, [r3, #0]
    f362:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f366:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f36a:	781b      	ldrb	r3, [r3, #0]
    f36c:	4413      	add	r3, r2
    f36e:	b2da      	uxtb	r2, r3
    f370:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f374:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f378:	701a      	strb	r2, [r3, #0]
    f37a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f37e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f382:	781b      	ldrb	r3, [r3, #0]
    f384:	3301      	adds	r3, #1
    f386:	b2da      	uxtb	r2, r3
    f388:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f38c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f390:	701a      	strb	r2, [r3, #0]
    f392:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f396:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f39a:	781b      	ldrb	r3, [r3, #0]
    f39c:	2bff      	cmp	r3, #255	; 0xff
    f39e:	d105      	bne.n	f3ac <send_gps_pos+0xd6c>
    f3a0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f3a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3a8:	2200      	movs	r2, #0
    f3aa:	701a      	strb	r2, [r3, #0]
    f3ac:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f3b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3b4:	781b      	ldrb	r3, [r3, #0]
    f3b6:	461a      	mov	r2, r3
    f3b8:	f64a 432c 	movw	r3, #44076	; 0xac2c
    f3bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3c0:	7819      	ldrb	r1, [r3, #0]
    f3c2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f3c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3ca:	5499      	strb	r1, [r3, r2]
    f3cc:	f64a 432c 	movw	r3, #44076	; 0xac2c
    f3d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3d4:	781a      	ldrb	r2, [r3, #0]
    f3d6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f3da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3de:	781b      	ldrb	r3, [r3, #0]
    f3e0:	4413      	add	r3, r2
    f3e2:	b2da      	uxtb	r2, r3
    f3e4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f3e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3ec:	701a      	strb	r2, [r3, #0]
    f3ee:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f3f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3f6:	781a      	ldrb	r2, [r3, #0]
    f3f8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f3fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f400:	781b      	ldrb	r3, [r3, #0]
    f402:	4413      	add	r3, r2
    f404:	b2da      	uxtb	r2, r3
    f406:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f40a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f40e:	701a      	strb	r2, [r3, #0]
    f410:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f414:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f418:	781b      	ldrb	r3, [r3, #0]
    f41a:	3301      	adds	r3, #1
    f41c:	b2da      	uxtb	r2, r3
    f41e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f422:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f426:	701a      	strb	r2, [r3, #0]
    f428:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f430:	781b      	ldrb	r3, [r3, #0]
    f432:	2bff      	cmp	r3, #255	; 0xff
    f434:	d105      	bne.n	f442 <send_gps_pos+0xe02>
    f436:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f43a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f43e:	2200      	movs	r2, #0
    f440:	701a      	strb	r2, [r3, #0]
    f442:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f446:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f44a:	781b      	ldrb	r3, [r3, #0]
    f44c:	461a      	mov	r2, r3
    f44e:	f64a 432c 	movw	r3, #44076	; 0xac2c
    f452:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f456:	7859      	ldrb	r1, [r3, #1]
    f458:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f45c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f460:	5499      	strb	r1, [r3, r2]
    f462:	4b8b      	ldr	r3, [pc, #556]	; (f690 <send_gps_pos+0x1050>)
    f464:	781a      	ldrb	r2, [r3, #0]
    f466:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f46a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f46e:	781b      	ldrb	r3, [r3, #0]
    f470:	4413      	add	r3, r2
    f472:	b2da      	uxtb	r2, r3
    f474:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f47c:	701a      	strb	r2, [r3, #0]
    f47e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f482:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f486:	781a      	ldrb	r2, [r3, #0]
    f488:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f48c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f490:	781b      	ldrb	r3, [r3, #0]
    f492:	4413      	add	r3, r2
    f494:	b2da      	uxtb	r2, r3
    f496:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f49a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f49e:	701a      	strb	r2, [r3, #0]
    f4a0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f4a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4a8:	781b      	ldrb	r3, [r3, #0]
    f4aa:	3301      	adds	r3, #1
    f4ac:	b2da      	uxtb	r2, r3
    f4ae:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f4b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4b6:	701a      	strb	r2, [r3, #0]
    f4b8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f4bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4c0:	781b      	ldrb	r3, [r3, #0]
    f4c2:	2bff      	cmp	r3, #255	; 0xff
    f4c4:	d105      	bne.n	f4d2 <send_gps_pos+0xe92>
    f4c6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f4ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4ce:	2200      	movs	r2, #0
    f4d0:	701a      	strb	r2, [r3, #0]
    f4d2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f4d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4da:	781b      	ldrb	r3, [r3, #0]
    f4dc:	461a      	mov	r2, r3
    f4de:	f64a 432c 	movw	r3, #44076	; 0xac2c
    f4e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4e6:	7899      	ldrb	r1, [r3, #2]
    f4e8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f4ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4f0:	5499      	strb	r1, [r3, r2]
    f4f2:	4b68      	ldr	r3, [pc, #416]	; (f694 <send_gps_pos+0x1054>)
    f4f4:	781a      	ldrb	r2, [r3, #0]
    f4f6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f4fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4fe:	781b      	ldrb	r3, [r3, #0]
    f500:	4413      	add	r3, r2
    f502:	b2da      	uxtb	r2, r3
    f504:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f508:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f50c:	701a      	strb	r2, [r3, #0]
    f50e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f512:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f516:	781a      	ldrb	r2, [r3, #0]
    f518:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f51c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f520:	781b      	ldrb	r3, [r3, #0]
    f522:	4413      	add	r3, r2
    f524:	b2da      	uxtb	r2, r3
    f526:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f52a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f52e:	701a      	strb	r2, [r3, #0]
    f530:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f534:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f538:	781b      	ldrb	r3, [r3, #0]
    f53a:	3301      	adds	r3, #1
    f53c:	b2da      	uxtb	r2, r3
    f53e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f542:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f546:	701a      	strb	r2, [r3, #0]
    f548:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f54c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f550:	781b      	ldrb	r3, [r3, #0]
    f552:	2bff      	cmp	r3, #255	; 0xff
    f554:	d105      	bne.n	f562 <send_gps_pos+0xf22>
    f556:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f55a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f55e:	2200      	movs	r2, #0
    f560:	701a      	strb	r2, [r3, #0]
    f562:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f566:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f56a:	781b      	ldrb	r3, [r3, #0]
    f56c:	461a      	mov	r2, r3
    f56e:	f64a 432c 	movw	r3, #44076	; 0xac2c
    f572:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f576:	78d9      	ldrb	r1, [r3, #3]
    f578:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f57c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f580:	5499      	strb	r1, [r3, r2]
    f582:	4b45      	ldr	r3, [pc, #276]	; (f698 <send_gps_pos+0x1058>)
    f584:	781a      	ldrb	r2, [r3, #0]
    f586:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f58a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f58e:	781b      	ldrb	r3, [r3, #0]
    f590:	4413      	add	r3, r2
    f592:	b2da      	uxtb	r2, r3
    f594:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f598:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f59c:	701a      	strb	r2, [r3, #0]
    f59e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f5a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5a6:	781a      	ldrb	r2, [r3, #0]
    f5a8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f5ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5b0:	781b      	ldrb	r3, [r3, #0]
    f5b2:	4413      	add	r3, r2
    f5b4:	b2da      	uxtb	r2, r3
    f5b6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f5ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5be:	701a      	strb	r2, [r3, #0]
    f5c0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f5c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5c8:	781b      	ldrb	r3, [r3, #0]
    f5ca:	3301      	adds	r3, #1
    f5cc:	b2da      	uxtb	r2, r3
    f5ce:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f5d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5d6:	701a      	strb	r2, [r3, #0]
    f5d8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f5dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5e0:	781b      	ldrb	r3, [r3, #0]
    f5e2:	2bff      	cmp	r3, #255	; 0xff
    f5e4:	d105      	bne.n	f5f2 <send_gps_pos+0xfb2>
    f5e6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f5ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5ee:	2200      	movs	r2, #0
    f5f0:	701a      	strb	r2, [r3, #0]
    f5f2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f5f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5fa:	781b      	ldrb	r3, [r3, #0]
    f5fc:	461a      	mov	r2, r3
    f5fe:	f64a 4320 	movw	r3, #44064	; 0xac20
    f602:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f606:	7819      	ldrb	r1, [r3, #0]
    f608:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f60c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f610:	5499      	strb	r1, [r3, r2]
    f612:	f64a 4320 	movw	r3, #44064	; 0xac20
    f616:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f61a:	781a      	ldrb	r2, [r3, #0]
    f61c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f620:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f624:	781b      	ldrb	r3, [r3, #0]
    f626:	4413      	add	r3, r2
    f628:	b2da      	uxtb	r2, r3
    f62a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f62e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f632:	701a      	strb	r2, [r3, #0]
    f634:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f638:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f63c:	781a      	ldrb	r2, [r3, #0]
    f63e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f642:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f646:	781b      	ldrb	r3, [r3, #0]
    f648:	4413      	add	r3, r2
    f64a:	b2da      	uxtb	r2, r3
    f64c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f650:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f654:	701a      	strb	r2, [r3, #0]
    f656:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f65a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f65e:	781b      	ldrb	r3, [r3, #0]
    f660:	3301      	adds	r3, #1
    f662:	b2da      	uxtb	r2, r3
    f664:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f668:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f66c:	701a      	strb	r2, [r3, #0]
    f66e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f672:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f676:	781b      	ldrb	r3, [r3, #0]
    f678:	2bff      	cmp	r3, #255	; 0xff
    f67a:	d10f      	bne.n	f69c <send_gps_pos+0x105c>
    f67c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f680:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f684:	2200      	movs	r2, #0
    f686:	701a      	strb	r2, [r3, #0]
    f688:	e008      	b.n	f69c <send_gps_pos+0x105c>
    f68a:	bf00      	nop
    f68c:	2000ac2b 	.word	0x2000ac2b
    f690:	2000ac2d 	.word	0x2000ac2d
    f694:	2000ac2e 	.word	0x2000ac2e
    f698:	2000ac2f 	.word	0x2000ac2f
    f69c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f6a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6a4:	781b      	ldrb	r3, [r3, #0]
    f6a6:	461a      	mov	r2, r3
    f6a8:	f64a 4320 	movw	r3, #44064	; 0xac20
    f6ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6b0:	7859      	ldrb	r1, [r3, #1]
    f6b2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f6b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6ba:	5499      	strb	r1, [r3, r2]
    f6bc:	4bc0      	ldr	r3, [pc, #768]	; (f9c0 <send_gps_pos+0x1380>)
    f6be:	781a      	ldrb	r2, [r3, #0]
    f6c0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f6c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6c8:	781b      	ldrb	r3, [r3, #0]
    f6ca:	4413      	add	r3, r2
    f6cc:	b2da      	uxtb	r2, r3
    f6ce:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f6d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6d6:	701a      	strb	r2, [r3, #0]
    f6d8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f6dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6e0:	781a      	ldrb	r2, [r3, #0]
    f6e2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f6e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6ea:	781b      	ldrb	r3, [r3, #0]
    f6ec:	4413      	add	r3, r2
    f6ee:	b2da      	uxtb	r2, r3
    f6f0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f6f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6f8:	701a      	strb	r2, [r3, #0]
    f6fa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f6fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f702:	781b      	ldrb	r3, [r3, #0]
    f704:	3301      	adds	r3, #1
    f706:	b2da      	uxtb	r2, r3
    f708:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f70c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f710:	701a      	strb	r2, [r3, #0]
    f712:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f716:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f71a:	781b      	ldrb	r3, [r3, #0]
    f71c:	2bff      	cmp	r3, #255	; 0xff
    f71e:	d105      	bne.n	f72c <send_gps_pos+0x10ec>
    f720:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f728:	2200      	movs	r2, #0
    f72a:	701a      	strb	r2, [r3, #0]
    f72c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f730:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f734:	781b      	ldrb	r3, [r3, #0]
    f736:	461a      	mov	r2, r3
    f738:	f64a 4320 	movw	r3, #44064	; 0xac20
    f73c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f740:	7899      	ldrb	r1, [r3, #2]
    f742:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f746:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f74a:	5499      	strb	r1, [r3, r2]
    f74c:	4b9d      	ldr	r3, [pc, #628]	; (f9c4 <send_gps_pos+0x1384>)
    f74e:	781a      	ldrb	r2, [r3, #0]
    f750:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f754:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f758:	781b      	ldrb	r3, [r3, #0]
    f75a:	4413      	add	r3, r2
    f75c:	b2da      	uxtb	r2, r3
    f75e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f762:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f766:	701a      	strb	r2, [r3, #0]
    f768:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f76c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f770:	781a      	ldrb	r2, [r3, #0]
    f772:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f776:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f77a:	781b      	ldrb	r3, [r3, #0]
    f77c:	4413      	add	r3, r2
    f77e:	b2da      	uxtb	r2, r3
    f780:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f784:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f788:	701a      	strb	r2, [r3, #0]
    f78a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f78e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f792:	781b      	ldrb	r3, [r3, #0]
    f794:	3301      	adds	r3, #1
    f796:	b2da      	uxtb	r2, r3
    f798:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f79c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7a0:	701a      	strb	r2, [r3, #0]
    f7a2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f7a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7aa:	781b      	ldrb	r3, [r3, #0]
    f7ac:	2bff      	cmp	r3, #255	; 0xff
    f7ae:	d105      	bne.n	f7bc <send_gps_pos+0x117c>
    f7b0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f7b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7b8:	2200      	movs	r2, #0
    f7ba:	701a      	strb	r2, [r3, #0]
    f7bc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f7c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7c4:	781b      	ldrb	r3, [r3, #0]
    f7c6:	461a      	mov	r2, r3
    f7c8:	f64a 4320 	movw	r3, #44064	; 0xac20
    f7cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7d0:	78d9      	ldrb	r1, [r3, #3]
    f7d2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f7d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7da:	5499      	strb	r1, [r3, r2]
    f7dc:	4b7a      	ldr	r3, [pc, #488]	; (f9c8 <send_gps_pos+0x1388>)
    f7de:	781a      	ldrb	r2, [r3, #0]
    f7e0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f7e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7e8:	781b      	ldrb	r3, [r3, #0]
    f7ea:	4413      	add	r3, r2
    f7ec:	b2da      	uxtb	r2, r3
    f7ee:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f7f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7f6:	701a      	strb	r2, [r3, #0]
    f7f8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f7fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f800:	781a      	ldrb	r2, [r3, #0]
    f802:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f80a:	781b      	ldrb	r3, [r3, #0]
    f80c:	4413      	add	r3, r2
    f80e:	b2da      	uxtb	r2, r3
    f810:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f814:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f818:	701a      	strb	r2, [r3, #0]
    f81a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f81e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f822:	781b      	ldrb	r3, [r3, #0]
    f824:	3301      	adds	r3, #1
    f826:	b2da      	uxtb	r2, r3
    f828:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f82c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f830:	701a      	strb	r2, [r3, #0]
    f832:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f836:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f83a:	781b      	ldrb	r3, [r3, #0]
    f83c:	2bff      	cmp	r3, #255	; 0xff
    f83e:	d105      	bne.n	f84c <send_gps_pos+0x120c>
    f840:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f844:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f848:	2200      	movs	r2, #0
    f84a:	701a      	strb	r2, [r3, #0]
    f84c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f850:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f854:	781b      	ldrb	r3, [r3, #0]
    f856:	461a      	mov	r2, r3
    f858:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f85c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f860:	7819      	ldrb	r1, [r3, #0]
    f862:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f866:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f86a:	5499      	strb	r1, [r3, r2]
    f86c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f870:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f874:	781b      	ldrb	r3, [r3, #0]
    f876:	3301      	adds	r3, #1
    f878:	b2da      	uxtb	r2, r3
    f87a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f87e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f882:	701a      	strb	r2, [r3, #0]
    f884:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f888:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f88c:	781b      	ldrb	r3, [r3, #0]
    f88e:	2bff      	cmp	r3, #255	; 0xff
    f890:	d105      	bne.n	f89e <send_gps_pos+0x125e>
    f892:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f896:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f89a:	2200      	movs	r2, #0
    f89c:	701a      	strb	r2, [r3, #0]
    f89e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f8a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8a6:	781b      	ldrb	r3, [r3, #0]
    f8a8:	461a      	mov	r2, r3
    f8aa:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f8ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8b2:	7819      	ldrb	r1, [r3, #0]
    f8b4:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f8b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8bc:	5499      	strb	r1, [r3, r2]
    f8be:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f8c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8c6:	781b      	ldrb	r3, [r3, #0]
    f8c8:	3301      	adds	r3, #1
    f8ca:	b2da      	uxtb	r2, r3
    f8cc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f8d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8d4:	701a      	strb	r2, [r3, #0]
    f8d6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f8da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8de:	781b      	ldrb	r3, [r3, #0]
    f8e0:	2bff      	cmp	r3, #255	; 0xff
    f8e2:	d105      	bne.n	f8f0 <send_gps_pos+0x12b0>
    f8e4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f8e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8ec:	2200      	movs	r2, #0
    f8ee:	701a      	strb	r2, [r3, #0]
    f8f0:	f242 0339 	movw	r3, #8249	; 0x2039
    f8f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8f8:	781b      	ldrb	r3, [r3, #0]
    f8fa:	b2db      	uxtb	r3, r3
    f8fc:	f003 0310 	and.w	r3, r3, #16
    f900:	2b00      	cmp	r3, #0
    f902:	d15a      	bne.n	f9ba <send_gps_pos+0x137a>
    f904:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    f908:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f90c:	781b      	ldrb	r3, [r3, #0]
    f90e:	b2db      	uxtb	r3, r3
    f910:	461a      	mov	r2, r3
    f912:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f916:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f91a:	5c9a      	ldrb	r2, [r3, r2]
    f91c:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    f920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f924:	701a      	strb	r2, [r3, #0]
    f926:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    f92a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f92e:	2200      	movs	r2, #0
    f930:	701a      	strb	r2, [r3, #0]
    f932:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    f936:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f93a:	781b      	ldrb	r3, [r3, #0]
    f93c:	b2db      	uxtb	r3, r3
    f93e:	3301      	adds	r3, #1
    f940:	b2da      	uxtb	r2, r3
    f942:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    f946:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f94a:	701a      	strb	r2, [r3, #0]
    f94c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    f950:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f954:	781b      	ldrb	r3, [r3, #0]
    f956:	b2db      	uxtb	r3, r3
    f958:	2bff      	cmp	r3, #255	; 0xff
    f95a:	d105      	bne.n	f968 <send_gps_pos+0x1328>
    f95c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    f960:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f964:	2200      	movs	r2, #0
    f966:	701a      	strb	r2, [r3, #0]
    f968:	f242 0338 	movw	r3, #8248	; 0x2038
    f96c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f970:	f242 0238 	movw	r2, #8248	; 0x2038
    f974:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f978:	7812      	ldrb	r2, [r2, #0]
    f97a:	b2d2      	uxtb	r2, r2
    f97c:	f042 0201 	orr.w	r2, r2, #1
    f980:	b2d2      	uxtb	r2, r2
    f982:	701a      	strb	r2, [r3, #0]
    f984:	f242 0339 	movw	r3, #8249	; 0x2039
    f988:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f98c:	f242 0239 	movw	r2, #8249	; 0x2039
    f990:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f994:	7812      	ldrb	r2, [r2, #0]
    f996:	b2d2      	uxtb	r2, r2
    f998:	f042 0210 	orr.w	r2, r2, #16
    f99c:	b2d2      	uxtb	r2, r2
    f99e:	701a      	strb	r2, [r3, #0]
    f9a0:	e00b      	b.n	f9ba <send_gps_pos+0x137a>
    f9a2:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    f9a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9aa:	781b      	ldrb	r3, [r3, #0]
    f9ac:	3301      	adds	r3, #1
    f9ae:	b2da      	uxtb	r2, r3
    f9b0:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    f9b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9b8:	701a      	strb	r2, [r3, #0]
     estimator_update_state_gps();
    f9ba:	f005 fbfd 	bl	151b8 <estimator_update_state_gps>
  }
}
    f9be:	bd80      	pop	{r7, pc}
    f9c0:	2000ac21 	.word	0x2000ac21
    f9c4:	2000ac22 	.word	0x2000ac22
    f9c8:	2000ac23 	.word	0x2000ac23

0000f9cc <send_radIR>:

void send_radIR(void){
    f9cc:	b480      	push	{r7}
    f9ce:	af00      	add	r7, sp, #0
  if (gps_pos_available)
    f9d0:	f64a 4346 	movw	r3, #44102	; 0xac46
    f9d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9d8:	781b      	ldrb	r3, [r3, #0]
    f9da:	2b00      	cmp	r3, #0
    f9dc:	f000 85e8 	beq.w	105b0 <send_radIR+0xbe4>
     DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    f9e0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f9e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9e8:	781a      	ldrb	r2, [r3, #0]
    f9ea:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    f9ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9f2:	781b      	ldrb	r3, [r3, #0]
    f9f4:	b2db      	uxtb	r3, r3
    f9f6:	429a      	cmp	r2, r3
    f9f8:	d313      	bcc.n	fa22 <send_radIR+0x56>
    f9fa:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    f9fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa02:	781b      	ldrb	r3, [r3, #0]
    fa04:	b2db      	uxtb	r3, r3
    fa06:	461a      	mov	r2, r3
    fa08:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fa0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa10:	781b      	ldrb	r3, [r3, #0]
    fa12:	1ad3      	subs	r3, r2, r3
    fa14:	33ff      	adds	r3, #255	; 0xff
    fa16:	2b14      	cmp	r3, #20
    fa18:	bfd4      	ite	le
    fa1a:	2300      	movle	r3, #0
    fa1c:	2301      	movgt	r3, #1
    fa1e:	b2db      	uxtb	r3, r3
    fa20:	e011      	b.n	fa46 <send_radIR+0x7a>
    fa22:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    fa26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa2a:	781b      	ldrb	r3, [r3, #0]
    fa2c:	b2db      	uxtb	r3, r3
    fa2e:	461a      	mov	r2, r3
    fa30:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fa34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa38:	781b      	ldrb	r3, [r3, #0]
    fa3a:	1ad3      	subs	r3, r2, r3
    fa3c:	2b14      	cmp	r3, #20
    fa3e:	bfd4      	ite	le
    fa40:	2300      	movle	r3, #0
    fa42:	2301      	movgt	r3, #1
    fa44:	b2db      	uxtb	r3, r3
    fa46:	2b00      	cmp	r3, #0
    fa48:	f000 85a6 	beq.w	10598 <send_radIR+0xbcc>
    fa4c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fa50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa54:	781b      	ldrb	r3, [r3, #0]
    fa56:	461a      	mov	r2, r3
    fa58:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    fa5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa60:	2105      	movs	r1, #5
    fa62:	5499      	strb	r1, [r3, r2]
    fa64:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fa68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa6c:	781b      	ldrb	r3, [r3, #0]
    fa6e:	3301      	adds	r3, #1
    fa70:	b2da      	uxtb	r2, r3
    fa72:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fa76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa7a:	701a      	strb	r2, [r3, #0]
    fa7c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fa80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa84:	781b      	ldrb	r3, [r3, #0]
    fa86:	2bff      	cmp	r3, #255	; 0xff
    fa88:	d105      	bne.n	fa96 <send_radIR+0xca>
    fa8a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fa8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa92:	2200      	movs	r2, #0
    fa94:	701a      	strb	r2, [r3, #0]
    fa96:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fa9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa9e:	781b      	ldrb	r3, [r3, #0]
    faa0:	461a      	mov	r2, r3
    faa2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    faa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    faaa:	2105      	movs	r1, #5
    faac:	5499      	strb	r1, [r3, r2]
    faae:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fab6:	781b      	ldrb	r3, [r3, #0]
    fab8:	3301      	adds	r3, #1
    faba:	b2da      	uxtb	r2, r3
    fabc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fac4:	701a      	strb	r2, [r3, #0]
    fac6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    faca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    face:	781b      	ldrb	r3, [r3, #0]
    fad0:	2bff      	cmp	r3, #255	; 0xff
    fad2:	d105      	bne.n	fae0 <send_radIR+0x114>
    fad4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fadc:	2200      	movs	r2, #0
    fade:	701a      	strb	r2, [r3, #0]
    fae0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fae8:	2205      	movs	r2, #5
    faea:	701a      	strb	r2, [r3, #0]
    faec:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    faf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    faf4:	2205      	movs	r2, #5
    faf6:	701a      	strb	r2, [r3, #0]
    faf8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fafc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb00:	781b      	ldrb	r3, [r3, #0]
    fb02:	461a      	mov	r2, r3
    fb04:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    fb08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb0c:	7819      	ldrb	r1, [r3, #0]
    fb0e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    fb12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb16:	5499      	strb	r1, [r3, r2]
    fb18:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    fb1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb20:	781a      	ldrb	r2, [r3, #0]
    fb22:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fb26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb2a:	781b      	ldrb	r3, [r3, #0]
    fb2c:	4413      	add	r3, r2
    fb2e:	b2da      	uxtb	r2, r3
    fb30:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fb34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb38:	701a      	strb	r2, [r3, #0]
    fb3a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fb3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb42:	781a      	ldrb	r2, [r3, #0]
    fb44:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fb48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb4c:	781b      	ldrb	r3, [r3, #0]
    fb4e:	4413      	add	r3, r2
    fb50:	b2da      	uxtb	r2, r3
    fb52:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fb56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb5a:	701a      	strb	r2, [r3, #0]
    fb5c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fb60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb64:	781b      	ldrb	r3, [r3, #0]
    fb66:	3301      	adds	r3, #1
    fb68:	b2da      	uxtb	r2, r3
    fb6a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fb6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb72:	701a      	strb	r2, [r3, #0]
    fb74:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fb78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb7c:	781b      	ldrb	r3, [r3, #0]
    fb7e:	2bff      	cmp	r3, #255	; 0xff
    fb80:	d105      	bne.n	fb8e <send_radIR+0x1c2>
    fb82:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fb86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb8a:	2200      	movs	r2, #0
    fb8c:	701a      	strb	r2, [r3, #0]
    fb8e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fb92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb96:	781b      	ldrb	r3, [r3, #0]
    fb98:	461a      	mov	r2, r3
    fb9a:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    fb9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fba2:	7859      	ldrb	r1, [r3, #1]
    fba4:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    fba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbac:	5499      	strb	r1, [r3, r2]
    fbae:	4bd2      	ldr	r3, [pc, #840]	; (fef8 <send_radIR+0x52c>)
    fbb0:	781a      	ldrb	r2, [r3, #0]
    fbb2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fbb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbba:	781b      	ldrb	r3, [r3, #0]
    fbbc:	4413      	add	r3, r2
    fbbe:	b2da      	uxtb	r2, r3
    fbc0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fbc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbc8:	701a      	strb	r2, [r3, #0]
    fbca:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fbce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbd2:	781a      	ldrb	r2, [r3, #0]
    fbd4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fbd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbdc:	781b      	ldrb	r3, [r3, #0]
    fbde:	4413      	add	r3, r2
    fbe0:	b2da      	uxtb	r2, r3
    fbe2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fbe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbea:	701a      	strb	r2, [r3, #0]
    fbec:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fbf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbf4:	781b      	ldrb	r3, [r3, #0]
    fbf6:	3301      	adds	r3, #1
    fbf8:	b2da      	uxtb	r2, r3
    fbfa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fbfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc02:	701a      	strb	r2, [r3, #0]
    fc04:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fc08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc0c:	781b      	ldrb	r3, [r3, #0]
    fc0e:	2bff      	cmp	r3, #255	; 0xff
    fc10:	d105      	bne.n	fc1e <send_radIR+0x252>
    fc12:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fc16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc1a:	2200      	movs	r2, #0
    fc1c:	701a      	strb	r2, [r3, #0]
    fc1e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fc22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc26:	781b      	ldrb	r3, [r3, #0]
    fc28:	461a      	mov	r2, r3
    fc2a:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    fc2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc32:	7899      	ldrb	r1, [r3, #2]
    fc34:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    fc38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc3c:	5499      	strb	r1, [r3, r2]
    fc3e:	4baf      	ldr	r3, [pc, #700]	; (fefc <send_radIR+0x530>)
    fc40:	781a      	ldrb	r2, [r3, #0]
    fc42:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fc46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc4a:	781b      	ldrb	r3, [r3, #0]
    fc4c:	4413      	add	r3, r2
    fc4e:	b2da      	uxtb	r2, r3
    fc50:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fc54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc58:	701a      	strb	r2, [r3, #0]
    fc5a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fc5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc62:	781a      	ldrb	r2, [r3, #0]
    fc64:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fc68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc6c:	781b      	ldrb	r3, [r3, #0]
    fc6e:	4413      	add	r3, r2
    fc70:	b2da      	uxtb	r2, r3
    fc72:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fc76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc7a:	701a      	strb	r2, [r3, #0]
    fc7c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fc80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc84:	781b      	ldrb	r3, [r3, #0]
    fc86:	3301      	adds	r3, #1
    fc88:	b2da      	uxtb	r2, r3
    fc8a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fc8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc92:	701a      	strb	r2, [r3, #0]
    fc94:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fc98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc9c:	781b      	ldrb	r3, [r3, #0]
    fc9e:	2bff      	cmp	r3, #255	; 0xff
    fca0:	d105      	bne.n	fcae <send_radIR+0x2e2>
    fca2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcaa:	2200      	movs	r2, #0
    fcac:	701a      	strb	r2, [r3, #0]
    fcae:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fcb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcb6:	781b      	ldrb	r3, [r3, #0]
    fcb8:	461a      	mov	r2, r3
    fcba:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    fcbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcc2:	78d9      	ldrb	r1, [r3, #3]
    fcc4:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    fcc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fccc:	5499      	strb	r1, [r3, r2]
    fcce:	4b8c      	ldr	r3, [pc, #560]	; (ff00 <send_radIR+0x534>)
    fcd0:	781a      	ldrb	r2, [r3, #0]
    fcd2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fcd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcda:	781b      	ldrb	r3, [r3, #0]
    fcdc:	4413      	add	r3, r2
    fcde:	b2da      	uxtb	r2, r3
    fce0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fce8:	701a      	strb	r2, [r3, #0]
    fcea:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fcee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcf2:	781a      	ldrb	r2, [r3, #0]
    fcf4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fcf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcfc:	781b      	ldrb	r3, [r3, #0]
    fcfe:	4413      	add	r3, r2
    fd00:	b2da      	uxtb	r2, r3
    fd02:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fd06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd0a:	701a      	strb	r2, [r3, #0]
    fd0c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fd10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd14:	781b      	ldrb	r3, [r3, #0]
    fd16:	3301      	adds	r3, #1
    fd18:	b2da      	uxtb	r2, r3
    fd1a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fd1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd22:	701a      	strb	r2, [r3, #0]
    fd24:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fd28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd2c:	781b      	ldrb	r3, [r3, #0]
    fd2e:	2bff      	cmp	r3, #255	; 0xff
    fd30:	d105      	bne.n	fd3e <send_radIR+0x372>
    fd32:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fd36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd3a:	2200      	movs	r2, #0
    fd3c:	701a      	strb	r2, [r3, #0]
    fd3e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fd42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd46:	781b      	ldrb	r3, [r3, #0]
    fd48:	461a      	mov	r2, r3
    fd4a:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    fd4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd52:	7819      	ldrb	r1, [r3, #0]
    fd54:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    fd58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd5c:	5499      	strb	r1, [r3, r2]
    fd5e:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    fd62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd66:	781a      	ldrb	r2, [r3, #0]
    fd68:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fd6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd70:	781b      	ldrb	r3, [r3, #0]
    fd72:	4413      	add	r3, r2
    fd74:	b2da      	uxtb	r2, r3
    fd76:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fd7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd7e:	701a      	strb	r2, [r3, #0]
    fd80:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fd84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd88:	781a      	ldrb	r2, [r3, #0]
    fd8a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fd8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd92:	781b      	ldrb	r3, [r3, #0]
    fd94:	4413      	add	r3, r2
    fd96:	b2da      	uxtb	r2, r3
    fd98:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fd9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fda0:	701a      	strb	r2, [r3, #0]
    fda2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fda6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdaa:	781b      	ldrb	r3, [r3, #0]
    fdac:	3301      	adds	r3, #1
    fdae:	b2da      	uxtb	r2, r3
    fdb0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fdb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdb8:	701a      	strb	r2, [r3, #0]
    fdba:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fdbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdc2:	781b      	ldrb	r3, [r3, #0]
    fdc4:	2bff      	cmp	r3, #255	; 0xff
    fdc6:	d105      	bne.n	fdd4 <send_radIR+0x408>
    fdc8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fdcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdd0:	2200      	movs	r2, #0
    fdd2:	701a      	strb	r2, [r3, #0]
    fdd4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fdd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fddc:	781b      	ldrb	r3, [r3, #0]
    fdde:	461a      	mov	r2, r3
    fde0:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    fde4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fde8:	7859      	ldrb	r1, [r3, #1]
    fdea:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    fdee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdf2:	5499      	strb	r1, [r3, r2]
    fdf4:	4b43      	ldr	r3, [pc, #268]	; (ff04 <send_radIR+0x538>)
    fdf6:	781a      	ldrb	r2, [r3, #0]
    fdf8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fdfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe00:	781b      	ldrb	r3, [r3, #0]
    fe02:	4413      	add	r3, r2
    fe04:	b2da      	uxtb	r2, r3
    fe06:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fe0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe0e:	701a      	strb	r2, [r3, #0]
    fe10:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fe14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe18:	781a      	ldrb	r2, [r3, #0]
    fe1a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fe1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe22:	781b      	ldrb	r3, [r3, #0]
    fe24:	4413      	add	r3, r2
    fe26:	b2da      	uxtb	r2, r3
    fe28:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fe2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe30:	701a      	strb	r2, [r3, #0]
    fe32:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fe36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe3a:	781b      	ldrb	r3, [r3, #0]
    fe3c:	3301      	adds	r3, #1
    fe3e:	b2da      	uxtb	r2, r3
    fe40:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fe44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe48:	701a      	strb	r2, [r3, #0]
    fe4a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fe4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe52:	781b      	ldrb	r3, [r3, #0]
    fe54:	2bff      	cmp	r3, #255	; 0xff
    fe56:	d105      	bne.n	fe64 <send_radIR+0x498>
    fe58:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fe5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe60:	2200      	movs	r2, #0
    fe62:	701a      	strb	r2, [r3, #0]
    fe64:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fe68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe6c:	781b      	ldrb	r3, [r3, #0]
    fe6e:	461a      	mov	r2, r3
    fe70:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    fe74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe78:	7899      	ldrb	r1, [r3, #2]
    fe7a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    fe7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe82:	5499      	strb	r1, [r3, r2]
    fe84:	4b20      	ldr	r3, [pc, #128]	; (ff08 <send_radIR+0x53c>)
    fe86:	781a      	ldrb	r2, [r3, #0]
    fe88:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fe8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe90:	781b      	ldrb	r3, [r3, #0]
    fe92:	4413      	add	r3, r2
    fe94:	b2da      	uxtb	r2, r3
    fe96:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fe9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe9e:	701a      	strb	r2, [r3, #0]
    fea0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fea8:	781a      	ldrb	r2, [r3, #0]
    feaa:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    feae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    feb2:	781b      	ldrb	r3, [r3, #0]
    feb4:	4413      	add	r3, r2
    feb6:	b2da      	uxtb	r2, r3
    feb8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    febc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fec0:	701a      	strb	r2, [r3, #0]
    fec2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    feca:	781b      	ldrb	r3, [r3, #0]
    fecc:	3301      	adds	r3, #1
    fece:	b2da      	uxtb	r2, r3
    fed0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fed8:	701a      	strb	r2, [r3, #0]
    feda:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fede:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fee2:	781b      	ldrb	r3, [r3, #0]
    fee4:	2bff      	cmp	r3, #255	; 0xff
    fee6:	d111      	bne.n	ff0c <send_radIR+0x540>
    fee8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    feec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fef0:	2200      	movs	r2, #0
    fef2:	701a      	strb	r2, [r3, #0]
    fef4:	e00a      	b.n	ff0c <send_radIR+0x540>
    fef6:	bf00      	nop
    fef8:	2000b0a9 	.word	0x2000b0a9
    fefc:	2000b0aa 	.word	0x2000b0aa
    ff00:	2000b0ab 	.word	0x2000b0ab
    ff04:	2000b0ad 	.word	0x2000b0ad
    ff08:	2000b0ae 	.word	0x2000b0ae
    ff0c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ff10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff14:	781b      	ldrb	r3, [r3, #0]
    ff16:	461a      	mov	r2, r3
    ff18:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    ff1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff20:	78d9      	ldrb	r1, [r3, #3]
    ff22:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ff26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff2a:	5499      	strb	r1, [r3, r2]
    ff2c:	4bd3      	ldr	r3, [pc, #844]	; (1027c <send_radIR+0x8b0>)
    ff2e:	781a      	ldrb	r2, [r3, #0]
    ff30:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ff34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff38:	781b      	ldrb	r3, [r3, #0]
    ff3a:	4413      	add	r3, r2
    ff3c:	b2da      	uxtb	r2, r3
    ff3e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ff42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff46:	701a      	strb	r2, [r3, #0]
    ff48:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ff4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff50:	781a      	ldrb	r2, [r3, #0]
    ff52:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ff56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff5a:	781b      	ldrb	r3, [r3, #0]
    ff5c:	4413      	add	r3, r2
    ff5e:	b2da      	uxtb	r2, r3
    ff60:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ff64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff68:	701a      	strb	r2, [r3, #0]
    ff6a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ff6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff72:	781b      	ldrb	r3, [r3, #0]
    ff74:	3301      	adds	r3, #1
    ff76:	b2da      	uxtb	r2, r3
    ff78:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ff7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff80:	701a      	strb	r2, [r3, #0]
    ff82:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ff86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff8a:	781b      	ldrb	r3, [r3, #0]
    ff8c:	2bff      	cmp	r3, #255	; 0xff
    ff8e:	d105      	bne.n	ff9c <send_radIR+0x5d0>
    ff90:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ff94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff98:	2200      	movs	r2, #0
    ff9a:	701a      	strb	r2, [r3, #0]
    ff9c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ffa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffa4:	781b      	ldrb	r3, [r3, #0]
    ffa6:	461a      	mov	r2, r3
    ffa8:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
    ffac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffb0:	7819      	ldrb	r1, [r3, #0]
    ffb2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ffb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffba:	5499      	strb	r1, [r3, r2]
    ffbc:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
    ffc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffc4:	781a      	ldrb	r2, [r3, #0]
    ffc6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ffca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffce:	781b      	ldrb	r3, [r3, #0]
    ffd0:	4413      	add	r3, r2
    ffd2:	b2da      	uxtb	r2, r3
    ffd4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ffd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffdc:	701a      	strb	r2, [r3, #0]
    ffde:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ffe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffe6:	781a      	ldrb	r2, [r3, #0]
    ffe8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ffec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fff0:	781b      	ldrb	r3, [r3, #0]
    fff2:	4413      	add	r3, r2
    fff4:	b2da      	uxtb	r2, r3
    fff6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fffe:	701a      	strb	r2, [r3, #0]
   10000:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10004:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10008:	781b      	ldrb	r3, [r3, #0]
   1000a:	3301      	adds	r3, #1
   1000c:	b2da      	uxtb	r2, r3
   1000e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10012:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10016:	701a      	strb	r2, [r3, #0]
   10018:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1001c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10020:	781b      	ldrb	r3, [r3, #0]
   10022:	2bff      	cmp	r3, #255	; 0xff
   10024:	d105      	bne.n	10032 <send_radIR+0x666>
   10026:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1002a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1002e:	2200      	movs	r2, #0
   10030:	701a      	strb	r2, [r3, #0]
   10032:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10036:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1003a:	781b      	ldrb	r3, [r3, #0]
   1003c:	461a      	mov	r2, r3
   1003e:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
   10042:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10046:	7859      	ldrb	r1, [r3, #1]
   10048:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   1004c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10050:	5499      	strb	r1, [r3, r2]
   10052:	4b8b      	ldr	r3, [pc, #556]	; (10280 <send_radIR+0x8b4>)
   10054:	781a      	ldrb	r2, [r3, #0]
   10056:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   1005a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1005e:	781b      	ldrb	r3, [r3, #0]
   10060:	4413      	add	r3, r2
   10062:	b2da      	uxtb	r2, r3
   10064:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10068:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1006c:	701a      	strb	r2, [r3, #0]
   1006e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   10072:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10076:	781a      	ldrb	r2, [r3, #0]
   10078:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   1007c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10080:	781b      	ldrb	r3, [r3, #0]
   10082:	4413      	add	r3, r2
   10084:	b2da      	uxtb	r2, r3
   10086:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   1008a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1008e:	701a      	strb	r2, [r3, #0]
   10090:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10094:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10098:	781b      	ldrb	r3, [r3, #0]
   1009a:	3301      	adds	r3, #1
   1009c:	b2da      	uxtb	r2, r3
   1009e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   100a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100a6:	701a      	strb	r2, [r3, #0]
   100a8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   100ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100b0:	781b      	ldrb	r3, [r3, #0]
   100b2:	2bff      	cmp	r3, #255	; 0xff
   100b4:	d105      	bne.n	100c2 <send_radIR+0x6f6>
   100b6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   100ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100be:	2200      	movs	r2, #0
   100c0:	701a      	strb	r2, [r3, #0]
   100c2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   100c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100ca:	781b      	ldrb	r3, [r3, #0]
   100cc:	461a      	mov	r2, r3
   100ce:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
   100d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100d6:	7899      	ldrb	r1, [r3, #2]
   100d8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   100dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100e0:	5499      	strb	r1, [r3, r2]
   100e2:	4b68      	ldr	r3, [pc, #416]	; (10284 <send_radIR+0x8b8>)
   100e4:	781a      	ldrb	r2, [r3, #0]
   100e6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   100ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100ee:	781b      	ldrb	r3, [r3, #0]
   100f0:	4413      	add	r3, r2
   100f2:	b2da      	uxtb	r2, r3
   100f4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   100f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100fc:	701a      	strb	r2, [r3, #0]
   100fe:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   10102:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10106:	781a      	ldrb	r2, [r3, #0]
   10108:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   1010c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10110:	781b      	ldrb	r3, [r3, #0]
   10112:	4413      	add	r3, r2
   10114:	b2da      	uxtb	r2, r3
   10116:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   1011a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1011e:	701a      	strb	r2, [r3, #0]
   10120:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10124:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10128:	781b      	ldrb	r3, [r3, #0]
   1012a:	3301      	adds	r3, #1
   1012c:	b2da      	uxtb	r2, r3
   1012e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10132:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10136:	701a      	strb	r2, [r3, #0]
   10138:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1013c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10140:	781b      	ldrb	r3, [r3, #0]
   10142:	2bff      	cmp	r3, #255	; 0xff
   10144:	d105      	bne.n	10152 <send_radIR+0x786>
   10146:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1014a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1014e:	2200      	movs	r2, #0
   10150:	701a      	strb	r2, [r3, #0]
   10152:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10156:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1015a:	781b      	ldrb	r3, [r3, #0]
   1015c:	461a      	mov	r2, r3
   1015e:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
   10162:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10166:	78d9      	ldrb	r1, [r3, #3]
   10168:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   1016c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10170:	5499      	strb	r1, [r3, r2]
   10172:	4b45      	ldr	r3, [pc, #276]	; (10288 <send_radIR+0x8bc>)
   10174:	781a      	ldrb	r2, [r3, #0]
   10176:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   1017a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1017e:	781b      	ldrb	r3, [r3, #0]
   10180:	4413      	add	r3, r2
   10182:	b2da      	uxtb	r2, r3
   10184:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10188:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1018c:	701a      	strb	r2, [r3, #0]
   1018e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   10192:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10196:	781a      	ldrb	r2, [r3, #0]
   10198:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   1019c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101a0:	781b      	ldrb	r3, [r3, #0]
   101a2:	4413      	add	r3, r2
   101a4:	b2da      	uxtb	r2, r3
   101a6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   101aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101ae:	701a      	strb	r2, [r3, #0]
   101b0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   101b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101b8:	781b      	ldrb	r3, [r3, #0]
   101ba:	3301      	adds	r3, #1
   101bc:	b2da      	uxtb	r2, r3
   101be:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   101c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101c6:	701a      	strb	r2, [r3, #0]
   101c8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   101cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101d0:	781b      	ldrb	r3, [r3, #0]
   101d2:	2bff      	cmp	r3, #255	; 0xff
   101d4:	d105      	bne.n	101e2 <send_radIR+0x816>
   101d6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   101da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101de:	2200      	movs	r2, #0
   101e0:	701a      	strb	r2, [r3, #0]
   101e2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   101e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101ea:	781b      	ldrb	r3, [r3, #0]
   101ec:	461a      	mov	r2, r3
   101ee:	f240 2386 	movw	r3, #646	; 0x286
   101f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101f6:	7819      	ldrb	r1, [r3, #0]
   101f8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   101fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10200:	5499      	strb	r1, [r3, r2]
   10202:	f240 2386 	movw	r3, #646	; 0x286
   10206:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1020a:	781a      	ldrb	r2, [r3, #0]
   1020c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10210:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10214:	781b      	ldrb	r3, [r3, #0]
   10216:	4413      	add	r3, r2
   10218:	b2da      	uxtb	r2, r3
   1021a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   1021e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10222:	701a      	strb	r2, [r3, #0]
   10224:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   10228:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1022c:	781a      	ldrb	r2, [r3, #0]
   1022e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10232:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10236:	781b      	ldrb	r3, [r3, #0]
   10238:	4413      	add	r3, r2
   1023a:	b2da      	uxtb	r2, r3
   1023c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   10240:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10244:	701a      	strb	r2, [r3, #0]
   10246:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1024a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1024e:	781b      	ldrb	r3, [r3, #0]
   10250:	3301      	adds	r3, #1
   10252:	b2da      	uxtb	r2, r3
   10254:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10258:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1025c:	701a      	strb	r2, [r3, #0]
   1025e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10262:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10266:	781b      	ldrb	r3, [r3, #0]
   10268:	2bff      	cmp	r3, #255	; 0xff
   1026a:	d10f      	bne.n	1028c <send_radIR+0x8c0>
   1026c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10270:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10274:	2200      	movs	r2, #0
   10276:	701a      	strb	r2, [r3, #0]
   10278:	e008      	b.n	1028c <send_radIR+0x8c0>
   1027a:	bf00      	nop
   1027c:	2000b0af 	.word	0x2000b0af
   10280:	2000b0a5 	.word	0x2000b0a5
   10284:	2000b0a6 	.word	0x2000b0a6
   10288:	2000b0a7 	.word	0x2000b0a7
   1028c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10290:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10294:	781b      	ldrb	r3, [r3, #0]
   10296:	461a      	mov	r2, r3
   10298:	f240 2386 	movw	r3, #646	; 0x286
   1029c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102a0:	7859      	ldrb	r1, [r3, #1]
   102a2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   102a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102aa:	5499      	strb	r1, [r3, r2]
   102ac:	4bc2      	ldr	r3, [pc, #776]	; (105b8 <send_radIR+0xbec>)
   102ae:	781a      	ldrb	r2, [r3, #0]
   102b0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   102b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102b8:	781b      	ldrb	r3, [r3, #0]
   102ba:	4413      	add	r3, r2
   102bc:	b2da      	uxtb	r2, r3
   102be:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   102c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102c6:	701a      	strb	r2, [r3, #0]
   102c8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   102cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102d0:	781a      	ldrb	r2, [r3, #0]
   102d2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   102d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102da:	781b      	ldrb	r3, [r3, #0]
   102dc:	4413      	add	r3, r2
   102de:	b2da      	uxtb	r2, r3
   102e0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   102e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102e8:	701a      	strb	r2, [r3, #0]
   102ea:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   102ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102f2:	781b      	ldrb	r3, [r3, #0]
   102f4:	3301      	adds	r3, #1
   102f6:	b2da      	uxtb	r2, r3
   102f8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   102fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10300:	701a      	strb	r2, [r3, #0]
   10302:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10306:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1030a:	781b      	ldrb	r3, [r3, #0]
   1030c:	2bff      	cmp	r3, #255	; 0xff
   1030e:	d105      	bne.n	1031c <send_radIR+0x950>
   10310:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10314:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10318:	2200      	movs	r2, #0
   1031a:	701a      	strb	r2, [r3, #0]
   1031c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10320:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10324:	781b      	ldrb	r3, [r3, #0]
   10326:	461a      	mov	r2, r3
   10328:	f240 2388 	movw	r3, #648	; 0x288
   1032c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10330:	7819      	ldrb	r1, [r3, #0]
   10332:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   10336:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1033a:	5499      	strb	r1, [r3, r2]
   1033c:	f240 2388 	movw	r3, #648	; 0x288
   10340:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10344:	781a      	ldrb	r2, [r3, #0]
   10346:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   1034a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1034e:	781b      	ldrb	r3, [r3, #0]
   10350:	4413      	add	r3, r2
   10352:	b2da      	uxtb	r2, r3
   10354:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10358:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1035c:	701a      	strb	r2, [r3, #0]
   1035e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   10362:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10366:	781a      	ldrb	r2, [r3, #0]
   10368:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   1036c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10370:	781b      	ldrb	r3, [r3, #0]
   10372:	4413      	add	r3, r2
   10374:	b2da      	uxtb	r2, r3
   10376:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   1037a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1037e:	701a      	strb	r2, [r3, #0]
   10380:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10384:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10388:	781b      	ldrb	r3, [r3, #0]
   1038a:	3301      	adds	r3, #1
   1038c:	b2da      	uxtb	r2, r3
   1038e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10392:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10396:	701a      	strb	r2, [r3, #0]
   10398:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1039c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103a0:	781b      	ldrb	r3, [r3, #0]
   103a2:	2bff      	cmp	r3, #255	; 0xff
   103a4:	d105      	bne.n	103b2 <send_radIR+0x9e6>
   103a6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   103aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103ae:	2200      	movs	r2, #0
   103b0:	701a      	strb	r2, [r3, #0]
   103b2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   103b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103ba:	781b      	ldrb	r3, [r3, #0]
   103bc:	461a      	mov	r2, r3
   103be:	f240 2388 	movw	r3, #648	; 0x288
   103c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103c6:	7859      	ldrb	r1, [r3, #1]
   103c8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   103cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103d0:	5499      	strb	r1, [r3, r2]
   103d2:	4b7a      	ldr	r3, [pc, #488]	; (105bc <send_radIR+0xbf0>)
   103d4:	781a      	ldrb	r2, [r3, #0]
   103d6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   103da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103de:	781b      	ldrb	r3, [r3, #0]
   103e0:	4413      	add	r3, r2
   103e2:	b2da      	uxtb	r2, r3
   103e4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   103e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103ec:	701a      	strb	r2, [r3, #0]
   103ee:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   103f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103f6:	781a      	ldrb	r2, [r3, #0]
   103f8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   103fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10400:	781b      	ldrb	r3, [r3, #0]
   10402:	4413      	add	r3, r2
   10404:	b2da      	uxtb	r2, r3
   10406:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   1040a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1040e:	701a      	strb	r2, [r3, #0]
   10410:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10414:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10418:	781b      	ldrb	r3, [r3, #0]
   1041a:	3301      	adds	r3, #1
   1041c:	b2da      	uxtb	r2, r3
   1041e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10422:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10426:	701a      	strb	r2, [r3, #0]
   10428:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1042c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10430:	781b      	ldrb	r3, [r3, #0]
   10432:	2bff      	cmp	r3, #255	; 0xff
   10434:	d105      	bne.n	10442 <send_radIR+0xa76>
   10436:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1043a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1043e:	2200      	movs	r2, #0
   10440:	701a      	strb	r2, [r3, #0]
   10442:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10446:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1044a:	781b      	ldrb	r3, [r3, #0]
   1044c:	461a      	mov	r2, r3
   1044e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10452:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10456:	7819      	ldrb	r1, [r3, #0]
   10458:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   1045c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10460:	5499      	strb	r1, [r3, r2]
   10462:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10466:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1046a:	781b      	ldrb	r3, [r3, #0]
   1046c:	3301      	adds	r3, #1
   1046e:	b2da      	uxtb	r2, r3
   10470:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10474:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10478:	701a      	strb	r2, [r3, #0]
   1047a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1047e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10482:	781b      	ldrb	r3, [r3, #0]
   10484:	2bff      	cmp	r3, #255	; 0xff
   10486:	d105      	bne.n	10494 <send_radIR+0xac8>
   10488:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1048c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10490:	2200      	movs	r2, #0
   10492:	701a      	strb	r2, [r3, #0]
   10494:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10498:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1049c:	781b      	ldrb	r3, [r3, #0]
   1049e:	461a      	mov	r2, r3
   104a0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   104a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104a8:	7819      	ldrb	r1, [r3, #0]
   104aa:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   104ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104b2:	5499      	strb	r1, [r3, r2]
   104b4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   104b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104bc:	781b      	ldrb	r3, [r3, #0]
   104be:	3301      	adds	r3, #1
   104c0:	b2da      	uxtb	r2, r3
   104c2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   104c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104ca:	701a      	strb	r2, [r3, #0]
   104cc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   104d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104d4:	781b      	ldrb	r3, [r3, #0]
   104d6:	2bff      	cmp	r3, #255	; 0xff
   104d8:	d105      	bne.n	104e6 <send_radIR+0xb1a>
   104da:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   104de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104e2:	2200      	movs	r2, #0
   104e4:	701a      	strb	r2, [r3, #0]
   104e6:	f242 0339 	movw	r3, #8249	; 0x2039
   104ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104ee:	781b      	ldrb	r3, [r3, #0]
   104f0:	b2db      	uxtb	r3, r3
   104f2:	f003 0310 	and.w	r3, r3, #16
   104f6:	2b00      	cmp	r3, #0
   104f8:	d15a      	bne.n	105b0 <send_radIR+0xbe4>
   104fa:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   104fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10502:	781b      	ldrb	r3, [r3, #0]
   10504:	b2db      	uxtb	r3, r3
   10506:	461a      	mov	r2, r3
   10508:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   1050c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10510:	5c9a      	ldrb	r2, [r3, r2]
   10512:	f64a 33b3 	movw	r3, #43955	; 0xabb3
   10516:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1051a:	701a      	strb	r2, [r3, #0]
   1051c:	f64a 33b4 	movw	r3, #43956	; 0xabb4
   10520:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10524:	2200      	movs	r2, #0
   10526:	701a      	strb	r2, [r3, #0]
   10528:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   1052c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10530:	781b      	ldrb	r3, [r3, #0]
   10532:	b2db      	uxtb	r3, r3
   10534:	3301      	adds	r3, #1
   10536:	b2da      	uxtb	r2, r3
   10538:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   1053c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10540:	701a      	strb	r2, [r3, #0]
   10542:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   10546:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1054a:	781b      	ldrb	r3, [r3, #0]
   1054c:	b2db      	uxtb	r3, r3
   1054e:	2bff      	cmp	r3, #255	; 0xff
   10550:	d105      	bne.n	1055e <send_radIR+0xb92>
   10552:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   10556:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1055a:	2200      	movs	r2, #0
   1055c:	701a      	strb	r2, [r3, #0]
   1055e:	f242 0338 	movw	r3, #8248	; 0x2038
   10562:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10566:	f242 0238 	movw	r2, #8248	; 0x2038
   1056a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1056e:	7812      	ldrb	r2, [r2, #0]
   10570:	b2d2      	uxtb	r2, r2
   10572:	f042 0201 	orr.w	r2, r2, #1
   10576:	b2d2      	uxtb	r2, r2
   10578:	701a      	strb	r2, [r3, #0]
   1057a:	f242 0339 	movw	r3, #8249	; 0x2039
   1057e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10582:	f242 0239 	movw	r2, #8249	; 0x2039
   10586:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1058a:	7812      	ldrb	r2, [r2, #0]
   1058c:	b2d2      	uxtb	r2, r2
   1058e:	f042 0210 	orr.w	r2, r2, #16
   10592:	b2d2      	uxtb	r2, r2
   10594:	701a      	strb	r2, [r3, #0]
   10596:	e00b      	b.n	105b0 <send_radIR+0xbe4>
   10598:	f64a 23b0 	movw	r3, #43696	; 0xaab0
   1059c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105a0:	781b      	ldrb	r3, [r3, #0]
   105a2:	3301      	adds	r3, #1
   105a4:	b2da      	uxtb	r2, r3
   105a6:	f64a 23b0 	movw	r3, #43696	; 0xaab0
   105aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105ae:	701a      	strb	r2, [r3, #0]
}
   105b0:	46bd      	mov	sp, r7
   105b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   105b6:	4770      	bx	lr
   105b8:	20000287 	.word	0x20000287
   105bc:	20000289 	.word	0x20000289

000105c0 <send_takeOff>:

void send_takeOff(void){
   105c0:	b580      	push	{r7, lr}
   105c2:	af00      	add	r7, sp, #0
  if (gps_pos_available){
   105c4:	f64a 4346 	movw	r3, #44102	; 0xac46
   105c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105cc:	781b      	ldrb	r3, [r3, #0]
   105ce:	2b00      	cmp	r3, #0
   105d0:	f000 8200 	beq.w	109d4 <send_takeOff+0x414>
     if (!estimator_flight_time && (estimator_hspeed_mod > MIN_SPEED_FOR_TAKEOFF)) {
   105d4:	f24b 0394 	movw	r3, #45204	; 0xb094
   105d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105dc:	881b      	ldrh	r3, [r3, #0]
   105de:	2b00      	cmp	r3, #0
   105e0:	f040 81f2 	bne.w	109c8 <send_takeOff+0x408>
   105e4:	f24b 039c 	movw	r3, #45212	; 0xb09c
   105e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105ec:	681b      	ldr	r3, [r3, #0]
   105ee:	4618      	mov	r0, r3
   105f0:	f04f 0100 	mov.w	r1, #0
   105f4:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   105f8:	f007 ffde 	bl	185b8 <__aeabi_fcmpgt>
   105fc:	4603      	mov	r3, r0
   105fe:	2b00      	cmp	r3, #0
   10600:	f000 81e2 	beq.w	109c8 <send_takeOff+0x408>
        estimator_flight_time = 1;
   10604:	f24b 0394 	movw	r3, #45204	; 0xb094
   10608:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1060c:	2201      	movs	r2, #1
   1060e:	801a      	strh	r2, [r3, #0]
        launch = TRUE; /* Not set in non auto launch */
   10610:	f64a 23a8 	movw	r3, #43688	; 0xaaa8
   10614:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10618:	2201      	movs	r2, #1
   1061a:	701a      	strb	r2, [r3, #0]
        DOWNLINK_SEND_TAKEOFF(&cputime);
   1061c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10620:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10624:	781a      	ldrb	r2, [r3, #0]
   10626:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   1062a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1062e:	781b      	ldrb	r3, [r3, #0]
   10630:	b2db      	uxtb	r3, r3
   10632:	429a      	cmp	r2, r3
   10634:	d313      	bcc.n	1065e <send_takeOff+0x9e>
   10636:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   1063a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1063e:	781b      	ldrb	r3, [r3, #0]
   10640:	b2db      	uxtb	r3, r3
   10642:	461a      	mov	r2, r3
   10644:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10648:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1064c:	781b      	ldrb	r3, [r3, #0]
   1064e:	1ad3      	subs	r3, r2, r3
   10650:	33ff      	adds	r3, #255	; 0xff
   10652:	2b06      	cmp	r3, #6
   10654:	bfd4      	ite	le
   10656:	2300      	movle	r3, #0
   10658:	2301      	movgt	r3, #1
   1065a:	b2db      	uxtb	r3, r3
   1065c:	e011      	b.n	10682 <send_takeOff+0xc2>
   1065e:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   10662:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10666:	781b      	ldrb	r3, [r3, #0]
   10668:	b2db      	uxtb	r3, r3
   1066a:	461a      	mov	r2, r3
   1066c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10670:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10674:	781b      	ldrb	r3, [r3, #0]
   10676:	1ad3      	subs	r3, r2, r3
   10678:	2b06      	cmp	r3, #6
   1067a:	bfd4      	ite	le
   1067c:	2300      	movle	r3, #0
   1067e:	2301      	movgt	r3, #1
   10680:	b2db      	uxtb	r3, r3
   10682:	2b00      	cmp	r3, #0
   10684:	f000 8194 	beq.w	109b0 <send_takeOff+0x3f0>
   10688:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1068c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10690:	781b      	ldrb	r3, [r3, #0]
   10692:	461a      	mov	r2, r3
   10694:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   10698:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1069c:	2105      	movs	r1, #5
   1069e:	5499      	strb	r1, [r3, r2]
   106a0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   106a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106a8:	781b      	ldrb	r3, [r3, #0]
   106aa:	3301      	adds	r3, #1
   106ac:	b2da      	uxtb	r2, r3
   106ae:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   106b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106b6:	701a      	strb	r2, [r3, #0]
   106b8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   106bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106c0:	781b      	ldrb	r3, [r3, #0]
   106c2:	2bff      	cmp	r3, #255	; 0xff
   106c4:	d105      	bne.n	106d2 <send_takeOff+0x112>
   106c6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   106ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106ce:	2200      	movs	r2, #0
   106d0:	701a      	strb	r2, [r3, #0]
   106d2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   106d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106da:	781b      	ldrb	r3, [r3, #0]
   106dc:	461a      	mov	r2, r3
   106de:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   106e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106e6:	2104      	movs	r1, #4
   106e8:	5499      	strb	r1, [r3, r2]
   106ea:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   106ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106f2:	781b      	ldrb	r3, [r3, #0]
   106f4:	3301      	adds	r3, #1
   106f6:	b2da      	uxtb	r2, r3
   106f8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   106fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10700:	701a      	strb	r2, [r3, #0]
   10702:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10706:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1070a:	781b      	ldrb	r3, [r3, #0]
   1070c:	2bff      	cmp	r3, #255	; 0xff
   1070e:	d105      	bne.n	1071c <send_takeOff+0x15c>
   10710:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10714:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10718:	2200      	movs	r2, #0
   1071a:	701a      	strb	r2, [r3, #0]
   1071c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10720:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10724:	2204      	movs	r2, #4
   10726:	701a      	strb	r2, [r3, #0]
   10728:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   1072c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10730:	2204      	movs	r2, #4
   10732:	701a      	strb	r2, [r3, #0]
   10734:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10738:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1073c:	781b      	ldrb	r3, [r3, #0]
   1073e:	461a      	mov	r2, r3
   10740:	f64a 2392 	movw	r3, #43666	; 0xaa92
   10744:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10748:	7819      	ldrb	r1, [r3, #0]
   1074a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   1074e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10752:	5499      	strb	r1, [r3, r2]
   10754:	f64a 2392 	movw	r3, #43666	; 0xaa92
   10758:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1075c:	781a      	ldrb	r2, [r3, #0]
   1075e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10762:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10766:	781b      	ldrb	r3, [r3, #0]
   10768:	4413      	add	r3, r2
   1076a:	b2da      	uxtb	r2, r3
   1076c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10770:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10774:	701a      	strb	r2, [r3, #0]
   10776:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   1077a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1077e:	781a      	ldrb	r2, [r3, #0]
   10780:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10784:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10788:	781b      	ldrb	r3, [r3, #0]
   1078a:	4413      	add	r3, r2
   1078c:	b2da      	uxtb	r2, r3
   1078e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   10792:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10796:	701a      	strb	r2, [r3, #0]
   10798:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1079c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107a0:	781b      	ldrb	r3, [r3, #0]
   107a2:	3301      	adds	r3, #1
   107a4:	b2da      	uxtb	r2, r3
   107a6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   107aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107ae:	701a      	strb	r2, [r3, #0]
   107b0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   107b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107b8:	781b      	ldrb	r3, [r3, #0]
   107ba:	2bff      	cmp	r3, #255	; 0xff
   107bc:	d105      	bne.n	107ca <send_takeOff+0x20a>
   107be:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   107c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107c6:	2200      	movs	r2, #0
   107c8:	701a      	strb	r2, [r3, #0]
   107ca:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   107ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107d2:	781b      	ldrb	r3, [r3, #0]
   107d4:	461a      	mov	r2, r3
   107d6:	f64a 2392 	movw	r3, #43666	; 0xaa92
   107da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107de:	7859      	ldrb	r1, [r3, #1]
   107e0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   107e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107e8:	5499      	strb	r1, [r3, r2]
   107ea:	4b7b      	ldr	r3, [pc, #492]	; (109d8 <send_takeOff+0x418>)
   107ec:	781a      	ldrb	r2, [r3, #0]
   107ee:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   107f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107f6:	781b      	ldrb	r3, [r3, #0]
   107f8:	4413      	add	r3, r2
   107fa:	b2da      	uxtb	r2, r3
   107fc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10800:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10804:	701a      	strb	r2, [r3, #0]
   10806:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   1080a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1080e:	781a      	ldrb	r2, [r3, #0]
   10810:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10814:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10818:	781b      	ldrb	r3, [r3, #0]
   1081a:	4413      	add	r3, r2
   1081c:	b2da      	uxtb	r2, r3
   1081e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   10822:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10826:	701a      	strb	r2, [r3, #0]
   10828:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1082c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10830:	781b      	ldrb	r3, [r3, #0]
   10832:	3301      	adds	r3, #1
   10834:	b2da      	uxtb	r2, r3
   10836:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1083a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1083e:	701a      	strb	r2, [r3, #0]
   10840:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10844:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10848:	781b      	ldrb	r3, [r3, #0]
   1084a:	2bff      	cmp	r3, #255	; 0xff
   1084c:	d105      	bne.n	1085a <send_takeOff+0x29a>
   1084e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10852:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10856:	2200      	movs	r2, #0
   10858:	701a      	strb	r2, [r3, #0]
   1085a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1085e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10862:	781b      	ldrb	r3, [r3, #0]
   10864:	461a      	mov	r2, r3
   10866:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   1086a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1086e:	7819      	ldrb	r1, [r3, #0]
   10870:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   10874:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10878:	5499      	strb	r1, [r3, r2]
   1087a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1087e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10882:	781b      	ldrb	r3, [r3, #0]
   10884:	3301      	adds	r3, #1
   10886:	b2da      	uxtb	r2, r3
   10888:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1088c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10890:	701a      	strb	r2, [r3, #0]
   10892:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10896:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1089a:	781b      	ldrb	r3, [r3, #0]
   1089c:	2bff      	cmp	r3, #255	; 0xff
   1089e:	d105      	bne.n	108ac <send_takeOff+0x2ec>
   108a0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   108a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108a8:	2200      	movs	r2, #0
   108aa:	701a      	strb	r2, [r3, #0]
   108ac:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   108b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108b4:	781b      	ldrb	r3, [r3, #0]
   108b6:	461a      	mov	r2, r3
   108b8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   108bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108c0:	7819      	ldrb	r1, [r3, #0]
   108c2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   108c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108ca:	5499      	strb	r1, [r3, r2]
   108cc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   108d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108d4:	781b      	ldrb	r3, [r3, #0]
   108d6:	3301      	adds	r3, #1
   108d8:	b2da      	uxtb	r2, r3
   108da:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   108de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108e2:	701a      	strb	r2, [r3, #0]
   108e4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   108e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108ec:	781b      	ldrb	r3, [r3, #0]
   108ee:	2bff      	cmp	r3, #255	; 0xff
   108f0:	d105      	bne.n	108fe <send_takeOff+0x33e>
   108f2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   108f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108fa:	2200      	movs	r2, #0
   108fc:	701a      	strb	r2, [r3, #0]
   108fe:	f242 0339 	movw	r3, #8249	; 0x2039
   10902:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10906:	781b      	ldrb	r3, [r3, #0]
   10908:	b2db      	uxtb	r3, r3
   1090a:	f003 0310 	and.w	r3, r3, #16
   1090e:	2b00      	cmp	r3, #0
   10910:	d15a      	bne.n	109c8 <send_takeOff+0x408>
   10912:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   10916:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1091a:	781b      	ldrb	r3, [r3, #0]
   1091c:	b2db      	uxtb	r3, r3
   1091e:	461a      	mov	r2, r3
   10920:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   10924:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10928:	5c9a      	ldrb	r2, [r3, r2]
   1092a:	f64a 33b3 	movw	r3, #43955	; 0xabb3
   1092e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10932:	701a      	strb	r2, [r3, #0]
   10934:	f64a 33b4 	movw	r3, #43956	; 0xabb4
   10938:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1093c:	2200      	movs	r2, #0
   1093e:	701a      	strb	r2, [r3, #0]
   10940:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   10944:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10948:	781b      	ldrb	r3, [r3, #0]
   1094a:	b2db      	uxtb	r3, r3
   1094c:	3301      	adds	r3, #1
   1094e:	b2da      	uxtb	r2, r3
   10950:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   10954:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10958:	701a      	strb	r2, [r3, #0]
   1095a:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   1095e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10962:	781b      	ldrb	r3, [r3, #0]
   10964:	b2db      	uxtb	r3, r3
   10966:	2bff      	cmp	r3, #255	; 0xff
   10968:	d105      	bne.n	10976 <send_takeOff+0x3b6>
   1096a:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   1096e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10972:	2200      	movs	r2, #0
   10974:	701a      	strb	r2, [r3, #0]
   10976:	f242 0338 	movw	r3, #8248	; 0x2038
   1097a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1097e:	f242 0238 	movw	r2, #8248	; 0x2038
   10982:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10986:	7812      	ldrb	r2, [r2, #0]
   10988:	b2d2      	uxtb	r2, r2
   1098a:	f042 0201 	orr.w	r2, r2, #1
   1098e:	b2d2      	uxtb	r2, r2
   10990:	701a      	strb	r2, [r3, #0]
   10992:	f242 0339 	movw	r3, #8249	; 0x2039
   10996:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1099a:	f242 0239 	movw	r2, #8249	; 0x2039
   1099e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   109a2:	7812      	ldrb	r2, [r2, #0]
   109a4:	b2d2      	uxtb	r2, r2
   109a6:	f042 0210 	orr.w	r2, r2, #16
   109aa:	b2d2      	uxtb	r2, r2
   109ac:	701a      	strb	r2, [r3, #0]
   109ae:	e00b      	b.n	109c8 <send_takeOff+0x408>
   109b0:	f64a 23b0 	movw	r3, #43696	; 0xaab0
   109b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109b8:	781b      	ldrb	r3, [r3, #0]
   109ba:	3301      	adds	r3, #1
   109bc:	b2da      	uxtb	r2, r3
   109be:	f64a 23b0 	movw	r3, #43696	; 0xaab0
   109c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109c6:	701a      	strb	r2, [r3, #0]
     }
     gps_pos_available = FALSE; 
   109c8:	f64a 4346 	movw	r3, #44102	; 0xac46
   109cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109d0:	2200      	movs	r2, #0
   109d2:	701a      	strb	r2, [r3, #0]
  }
  //vPrintString("S_16 receive_gps_data_task end!\n\r");
}
   109d4:	bd80      	pop	{r7, pc}
   109d6:	bf00      	nop
   109d8:	2000aa93 	.word	0x2000aa93
   109dc:	f3af 8000 	nop.w

000109e0 <modem_init>:
uint8_t    tx_byte;
uint8_t    tx_byte_idx;

uint8_t ck_a, ck_b;

void modem_init( void ) {
   109e0:	b480      	push	{r7}
   109e2:	af00      	add	r7, sp, #0
  /* 
     on >= V1.2 boards, 4MHz modem clock is generated
     by one PWM module.
  */
#if defined CTL_BRD_V1_2 || defined CTL_BRD_V1_2_1
  MODEM_OSC_DDR |= _BV(MODEM_OSC);
   109e4:	f242 0317 	movw	r3, #8215	; 0x2017
   109e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109ec:	f242 0217 	movw	r2, #8215	; 0x2017
   109f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   109f4:	7812      	ldrb	r2, [r2, #0]
   109f6:	b2d2      	uxtb	r2, r2
   109f8:	f042 0210 	orr.w	r2, r2, #16
   109fc:	b2d2      	uxtb	r2, r2
   109fe:	701a      	strb	r2, [r3, #0]
  OCR0 = 1; /* 4MhZ */
   10a00:	f242 0331 	movw	r3, #8241	; 0x2031
   10a04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a08:	2201      	movs	r2, #1
   10a0a:	701a      	strb	r2, [r3, #0]
  TCCR0 = _BV(WGM01) | _BV(COM00) | _BV(CS00);
   10a0c:	f242 0333 	movw	r3, #8243	; 0x2033
   10a10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a14:	2219      	movs	r2, #25
   10a16:	701a      	strb	r2, [r3, #0]
#endif

  /* setup TX_EN and TX_DATA pin as output */
  MODEM_TX_DDR |= _BV(MODEM_TX_EN) | _BV(MODEM_TX_DATA);
   10a18:	f242 0311 	movw	r3, #8209	; 0x2011
   10a1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a20:	f242 0211 	movw	r2, #8209	; 0x2011
   10a24:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10a28:	7812      	ldrb	r2, [r2, #0]
   10a2a:	b2d2      	uxtb	r2, r2
   10a2c:	f062 023f 	orn	r2, r2, #63	; 0x3f
   10a30:	b2d2      	uxtb	r2, r2
   10a32:	701a      	strb	r2, [r3, #0]
  /* data idles hight */
  sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10a34:	f242 0312 	movw	r3, #8210	; 0x2012
   10a38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a3c:	f242 0212 	movw	r2, #8210	; 0x2012
   10a40:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10a44:	7812      	ldrb	r2, [r2, #0]
   10a46:	b2d2      	uxtb	r2, r2
   10a48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10a4c:	b2d2      	uxtb	r2, r2
   10a4e:	701a      	strb	r2, [r3, #0]
  /* enable transmitter */
  cbi(MODEM_TX_PORT, MODEM_TX_EN);
   10a50:	f242 0312 	movw	r3, #8210	; 0x2012
   10a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a58:	f242 0212 	movw	r2, #8210	; 0x2012
   10a5c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10a60:	7812      	ldrb	r2, [r2, #0]
   10a62:	b2d2      	uxtb	r2, r2
   10a64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   10a68:	b2d2      	uxtb	r2, r2
   10a6a:	701a      	strb	r2, [r3, #0]
  /* set interrupt on failing edge of clock */
  MODEM_CLK_INT_REG |=  MODEM_CLK_INT_CFG;
   10a6c:	f242 033a 	movw	r3, #8250	; 0x203a
   10a70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a74:	f242 023a 	movw	r2, #8250	; 0x203a
   10a78:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10a7c:	7812      	ldrb	r2, [r2, #0]
   10a7e:	b2d2      	uxtb	r2, r2
   10a80:	f042 0202 	orr.w	r2, r2, #2
   10a84:	b2d2      	uxtb	r2, r2
   10a86:	701a      	strb	r2, [r3, #0]
}
   10a88:	46bd      	mov	sp, r7
   10a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
   10a8e:	4770      	bx	lr

00010a90 <__vector_5>:

SIGNAL( MODEM_CLK_INT_SIG ) {
   10a90:	b480      	push	{r7}
   10a92:	af00      	add	r7, sp, #0
  /*  start bit         */
  if (tx_byte_idx == 0)
   10a94:	f64a 33b4 	movw	r3, #43956	; 0xabb4
   10a98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a9c:	781b      	ldrb	r3, [r3, #0]
   10a9e:	2b00      	cmp	r3, #0
   10aa0:	d10e      	bne.n	10ac0 <__vector_5+0x30>
    cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10aa2:	f242 0312 	movw	r3, #8210	; 0x2012
   10aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10aaa:	f242 0212 	movw	r2, #8210	; 0x2012
   10aae:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ab2:	7812      	ldrb	r2, [r2, #0]
   10ab4:	b2d2      	uxtb	r2, r2
   10ab6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   10aba:	b2d2      	uxtb	r2, r2
   10abc:	701a      	strb	r2, [r3, #0]
   10abe:	e047      	b.n	10b50 <__vector_5+0xc0>
  /* 8 data bits        */ 
  else if (tx_byte_idx < 9) {
   10ac0:	f64a 33b4 	movw	r3, #43956	; 0xabb4
   10ac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ac8:	781b      	ldrb	r3, [r3, #0]
   10aca:	2b08      	cmp	r3, #8
   10acc:	d832      	bhi.n	10b34 <__vector_5+0xa4>
    if (tx_byte & 0x01)
   10ace:	f64a 33b3 	movw	r3, #43955	; 0xabb3
   10ad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ad6:	781b      	ldrb	r3, [r3, #0]
   10ad8:	f003 0301 	and.w	r3, r3, #1
   10adc:	2b00      	cmp	r3, #0
   10ade:	d00e      	beq.n	10afe <__vector_5+0x6e>
      sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10ae0:	f242 0312 	movw	r3, #8210	; 0x2012
   10ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ae8:	f242 0212 	movw	r2, #8210	; 0x2012
   10aec:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10af0:	7812      	ldrb	r2, [r2, #0]
   10af2:	b2d2      	uxtb	r2, r2
   10af4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10af8:	b2d2      	uxtb	r2, r2
   10afa:	701a      	strb	r2, [r3, #0]
   10afc:	e00d      	b.n	10b1a <__vector_5+0x8a>
    else
      cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10afe:	f242 0312 	movw	r3, #8210	; 0x2012
   10b02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b06:	f242 0212 	movw	r2, #8210	; 0x2012
   10b0a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10b0e:	7812      	ldrb	r2, [r2, #0]
   10b10:	b2d2      	uxtb	r2, r2
   10b12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   10b16:	b2d2      	uxtb	r2, r2
   10b18:	701a      	strb	r2, [r3, #0]
    tx_byte >>= 1;
   10b1a:	f64a 33b3 	movw	r3, #43955	; 0xabb3
   10b1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b22:	781b      	ldrb	r3, [r3, #0]
   10b24:	085b      	lsrs	r3, r3, #1
   10b26:	b2da      	uxtb	r2, r3
   10b28:	f64a 33b3 	movw	r3, #43955	; 0xabb3
   10b2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b30:	701a      	strb	r2, [r3, #0]
   10b32:	e00d      	b.n	10b50 <__vector_5+0xc0>
  }
  /* stop_bit           */
  else {
    sbi(MODEM_TX_PORT, MODEM_TX_DATA); 
   10b34:	f242 0312 	movw	r3, #8210	; 0x2012
   10b38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b3c:	f242 0212 	movw	r2, #8210	; 0x2012
   10b40:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10b44:	7812      	ldrb	r2, [r2, #0]
   10b46:	b2d2      	uxtb	r2, r2
   10b48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10b4c:	b2d2      	uxtb	r2, r2
   10b4e:	701a      	strb	r2, [r3, #0]
  }
  tx_byte_idx++;
   10b50:	f64a 33b4 	movw	r3, #43956	; 0xabb4
   10b54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b58:	781b      	ldrb	r3, [r3, #0]
   10b5a:	3301      	adds	r3, #1
   10b5c:	b2da      	uxtb	r2, r3
   10b5e:	f64a 33b4 	movw	r3, #43956	; 0xabb4
   10b62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b66:	701a      	strb	r2, [r3, #0]
  /* next byte          */
  if (tx_byte_idx >= 10) {
   10b68:	f64a 33b4 	movw	r3, #43956	; 0xabb4
   10b6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b70:	781b      	ldrb	r3, [r3, #0]
   10b72:	2b09      	cmp	r3, #9
   10b74:	d94d      	bls.n	10c12 <__vector_5+0x182>
    /*  if we have nothing left to transmit */
    if( tx_head == tx_tail ) {
   10b76:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10b7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b7e:	781a      	ldrb	r2, [r3, #0]
   10b80:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   10b84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b88:	781b      	ldrb	r3, [r3, #0]
   10b8a:	b2db      	uxtb	r3, r3
   10b8c:	429a      	cmp	r2, r3
   10b8e:	d10e      	bne.n	10bae <__vector_5+0x11e>
      /* disable clock interrupt            */
      cbi( EIMSK, MODEM_CLK_INT );
   10b90:	f242 0339 	movw	r3, #8249	; 0x2039
   10b94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b98:	f242 0239 	movw	r2, #8249	; 0x2039
   10b9c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ba0:	7812      	ldrb	r2, [r2, #0]
   10ba2:	b2d2      	uxtb	r2, r2
   10ba4:	f022 0210 	bic.w	r2, r2, #16
   10ba8:	b2d2      	uxtb	r2, r2
   10baa:	701a      	strb	r2, [r3, #0]
   10bac:	e031      	b.n	10c12 <__vector_5+0x182>
    } else {
      /* else load next byte                  */
      MODEM_LOAD_NEXT_BYTE();  
   10bae:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   10bb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bb6:	781b      	ldrb	r3, [r3, #0]
   10bb8:	b2db      	uxtb	r3, r3
   10bba:	461a      	mov	r2, r3
   10bbc:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   10bc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bc4:	5c9a      	ldrb	r2, [r3, r2]
   10bc6:	f64a 33b3 	movw	r3, #43955	; 0xabb3
   10bca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bce:	701a      	strb	r2, [r3, #0]
   10bd0:	f64a 33b4 	movw	r3, #43956	; 0xabb4
   10bd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bd8:	2200      	movs	r2, #0
   10bda:	701a      	strb	r2, [r3, #0]
   10bdc:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   10be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10be4:	781b      	ldrb	r3, [r3, #0]
   10be6:	b2db      	uxtb	r3, r3
   10be8:	3301      	adds	r3, #1
   10bea:	b2da      	uxtb	r2, r3
   10bec:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   10bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bf4:	701a      	strb	r2, [r3, #0]
   10bf6:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   10bfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bfe:	781b      	ldrb	r3, [r3, #0]
   10c00:	b2db      	uxtb	r3, r3
   10c02:	2bff      	cmp	r3, #255	; 0xff
   10c04:	d105      	bne.n	10c12 <__vector_5+0x182>
   10c06:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   10c0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c0e:	2200      	movs	r2, #0
   10c10:	701a      	strb	r2, [r3, #0]
    }
  }
}
   10c12:	46bd      	mov	sp, r7
   10c14:	f85d 7b04 	ldr.w	r7, [sp], #4
   10c18:	4770      	bx	lr
   10c1a:	bf00      	nop

00010c1c <link_fbw_init>:
uint8_t link_fbw_fbw_nb_err;

static uint8_t idx_buf;
static uint8_t xor_in, xor_out;

void link_fbw_init(void) {
   10c1c:	b480      	push	{r7}
   10c1e:	af00      	add	r7, sp, #0
  link_fbw_nb_err;
   10c20:	f64a 33e7 	movw	r3, #44007	; 0xabe7
   10c24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c28:	781b      	ldrb	r3, [r3, #0]
  link_fbw_receive_complete = FALSE;  
   10c2a:	f240 2382 	movw	r3, #642	; 0x282
   10c2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c32:	2200      	movs	r2, #0
   10c34:	701a      	strb	r2, [r3, #0]
}
   10c36:	46bd      	mov	sp, r7
   10c38:	f85d 7b04 	ldr.w	r7, [sp], #4
   10c3c:	4770      	bx	lr
   10c3e:	bf00      	nop

00010c40 <link_fbw_send>:

void link_fbw_send(void) {
   10c40:	b480      	push	{r7}
   10c42:	b083      	sub	sp, #12
   10c44:	af00      	add	r7, sp, #0
    //vPrintString("S_7 link_fbw_send start! \n\r"); //SunnyBeike

    if (spi_cur_slave != SPI_NONE) 
   10c46:	f64a 33ec 	movw	r3, #44012	; 0xabec
   10c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c4e:	781b      	ldrb	r3, [r3, #0]
   10c50:	b2db      	uxtb	r3, r3
   10c52:	2b00      	cmp	r3, #0
   10c54:	d00c      	beq.n	10c70 <link_fbw_send+0x30>
    {
        spi_nb_ovrn++;
   10c56:	f64a 33ed 	movw	r3, #44013	; 0xabed
   10c5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c5e:	781b      	ldrb	r3, [r3, #0]
   10c60:	3301      	adds	r3, #1
   10c62:	b2da      	uxtb	r2, r3
   10c64:	f64a 33ed 	movw	r3, #44013	; 0xabed
   10c68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c6c:	701a      	strb	r2, [r3, #0]
        //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
        return;
   10c6e:	e064      	b.n	10d3a <link_fbw_send+0xfa>
    }

    /* Enable SPI, Master, set clock rate fck/16 */ 
    SPI_START(_BV(SPE) | _BV(MSTR) | _BV(SPR0)); // | _BV(SPR1);
   10c70:	f242 030d 	movw	r3, #8205	; 0x200d
   10c74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c78:	2251      	movs	r2, #81	; 0x51
   10c7a:	701a      	strb	r2, [r3, #0]
   10c7c:	f242 030e 	movw	r3, #8206	; 0x200e
   10c80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c84:	781b      	ldrb	r3, [r3, #0]
   10c86:	b2db      	uxtb	r3, r3
   10c88:	b2db      	uxtb	r3, r3
   10c8a:	b25b      	sxtb	r3, r3
   10c8c:	2b00      	cmp	r3, #0
   10c8e:	da05      	bge.n	10c9c <link_fbw_send+0x5c>
   10c90:	f242 030f 	movw	r3, #8207	; 0x200f
   10c94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c98:	781b      	ldrb	r3, [r3, #0]
   10c9a:	71fb      	strb	r3, [r7, #7]
   10c9c:	f242 030d 	movw	r3, #8205	; 0x200d
   10ca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ca4:	f242 020d 	movw	r2, #8205	; 0x200d
   10ca8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10cac:	7812      	ldrb	r2, [r2, #0]
   10cae:	b2d2      	uxtb	r2, r2
   10cb0:	f062 027f 	orn	r2, r2, #127	; 0x7f
   10cb4:	b2d2      	uxtb	r2, r2
   10cb6:	701a      	strb	r2, [r3, #0]
    SPI_SELECT_SLAVE0();
   10cb8:	f64a 33ec 	movw	r3, #44012	; 0xabec
   10cbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cc0:	2201      	movs	r2, #1
   10cc2:	701a      	strb	r2, [r3, #0]
   10cc4:	f242 0318 	movw	r3, #8216	; 0x2018
   10cc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ccc:	f242 0218 	movw	r2, #8216	; 0x2018
   10cd0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10cd4:	7812      	ldrb	r2, [r2, #0]
   10cd6:	b2d2      	uxtb	r2, r2
   10cd8:	f022 0201 	bic.w	r2, r2, #1
   10cdc:	b2d2      	uxtb	r2, r2
   10cde:	701a      	strb	r2, [r3, #0]

    idx_buf = 0;
   10ce0:	f64a 33e9 	movw	r3, #44009	; 0xabe9
   10ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ce8:	2200      	movs	r2, #0
   10cea:	701a      	strb	r2, [r3, #0]
    xor_in = 0;
   10cec:	f64a 33ea 	movw	r3, #44010	; 0xabea
   10cf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cf4:	2200      	movs	r2, #0
   10cf6:	701a      	strb	r2, [r3, #0]
    xor_out = ((uint8_t*)&to_fbw)[idx_buf];
   10cf8:	f64a 33e9 	movw	r3, #44009	; 0xabe9
   10cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d00:	781b      	ldrb	r3, [r3, #0]
   10d02:	461a      	mov	r2, r3
   10d04:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   10d08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d0c:	4413      	add	r3, r2
   10d0e:	781a      	ldrb	r2, [r3, #0]
   10d10:	f64a 33eb 	movw	r3, #44011	; 0xabeb
   10d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d18:	701a      	strb	r2, [r3, #0]
    SPDR = xor_out;
   10d1a:	f242 030f 	movw	r3, #8207	; 0x200f
   10d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d22:	f64a 32eb 	movw	r2, #44011	; 0xabeb
   10d26:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10d2a:	7812      	ldrb	r2, [r2, #0]
   10d2c:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_valid = FALSE;
   10d2e:	f64a 33e6 	movw	r3, #44006	; 0xabe6
   10d32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d36:	2200      	movs	r2, #0
   10d38:	701a      	strb	r2, [r3, #0]
    // Other bytes will follow SIG_SPI interrupts
    //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
}
   10d3a:	370c      	adds	r7, #12
   10d3c:	46bd      	mov	sp, r7
   10d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
   10d42:	4770      	bx	lr

00010d44 <link_fbw_on_spi_it>:

void link_fbw_on_spi_it( void ) {
   10d44:	b480      	push	{r7}
   10d46:	af00      	add	r7, sp, #0
  /* setup OCR1A to pop in 200 clock cycles */
  /* this leaves time for the slave (fbw)   */
  /* to process the byte we've sent and to  */
  /* prepare a new one to be sent           */
  OCR1A = TCNT1 + 200;
   10d48:	f242 032a 	movw	r3, #8234	; 0x202a
   10d4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d50:	f242 022c 	movw	r2, #8236	; 0x202c
   10d54:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10d58:	8812      	ldrh	r2, [r2, #0]
   10d5a:	b292      	uxth	r2, r2
   10d5c:	32c8      	adds	r2, #200	; 0xc8
   10d5e:	b292      	uxth	r2, r2
   10d60:	801a      	strh	r2, [r3, #0]
  /* clear interrupt flag  */
  sbi(TIFR, OCF1A);
   10d62:	f242 0336 	movw	r3, #8246	; 0x2036
   10d66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d6a:	f242 0236 	movw	r2, #8246	; 0x2036
   10d6e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10d72:	7812      	ldrb	r2, [r2, #0]
   10d74:	b2d2      	uxtb	r2, r2
   10d76:	f042 0210 	orr.w	r2, r2, #16
   10d7a:	b2d2      	uxtb	r2, r2
   10d7c:	701a      	strb	r2, [r3, #0]
  /* enable OC1A interrupt */
  sbi(TIMSK, OCIE1A);
   10d7e:	f242 0337 	movw	r3, #8247	; 0x2037
   10d82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d86:	f242 0237 	movw	r2, #8247	; 0x2037
   10d8a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10d8e:	7812      	ldrb	r2, [r2, #0]
   10d90:	b2d2      	uxtb	r2, r2
   10d92:	f042 0210 	orr.w	r2, r2, #16
   10d96:	b2d2      	uxtb	r2, r2
   10d98:	701a      	strb	r2, [r3, #0]
}
   10d9a:	46bd      	mov	sp, r7
   10d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
   10da0:	4770      	bx	lr
   10da2:	bf00      	nop

00010da4 <__vector_12>:


/* send the next byte */
SIGNAL(SIG_OUTPUT_COMPARE1A) {
   10da4:	b480      	push	{r7}
   10da6:	b083      	sub	sp, #12
   10da8:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* disable OC1A interrupt */
  cbi(TIMSK, OCIE1A); 
   10daa:	f242 0337 	movw	r3, #8247	; 0x2037
   10dae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10db2:	f242 0237 	movw	r2, #8247	; 0x2037
   10db6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10dba:	7812      	ldrb	r2, [r2, #0]
   10dbc:	b2d2      	uxtb	r2, r2
   10dbe:	f022 0210 	bic.w	r2, r2, #16
   10dc2:	b2d2      	uxtb	r2, r2
   10dc4:	701a      	strb	r2, [r3, #0]

  idx_buf++;
   10dc6:	f64a 33e9 	movw	r3, #44009	; 0xabe9
   10dca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10dce:	781b      	ldrb	r3, [r3, #0]
   10dd0:	3301      	adds	r3, #1
   10dd2:	b2da      	uxtb	r2, r3
   10dd4:	f64a 33e9 	movw	r3, #44009	; 0xabe9
   10dd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ddc:	701a      	strb	r2, [r3, #0]

  /* we have sent/received a complete frame */
  if (idx_buf == FRAME_LENGTH) {
   10dde:	f64a 33e9 	movw	r3, #44009	; 0xabe9
   10de2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10de6:	781b      	ldrb	r3, [r3, #0]
   10de8:	2b17      	cmp	r3, #23
   10dea:	d162      	bne.n	10eb2 <__vector_12+0x10e>
    /* read checksum from receive register  */
    tmp = SPDR;
   10dec:	f242 030f 	movw	r3, #8207	; 0x200f
   10df0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10df4:	781b      	ldrb	r3, [r3, #0]
   10df6:	71fb      	strb	r3, [r7, #7]
    /* notify valid frame                   */
    if (tmp == xor_in) {
   10df8:	f64a 33ea 	movw	r3, #44010	; 0xabea
   10dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e00:	781b      	ldrb	r3, [r3, #0]
   10e02:	79fa      	ldrb	r2, [r7, #7]
   10e04:	429a      	cmp	r2, r3
   10e06:	d110      	bne.n	10e2a <__vector_12+0x86>
      link_fbw_receive_valid = TRUE;
   10e08:	f64a 33e6 	movw	r3, #44006	; 0xabe6
   10e0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e10:	2201      	movs	r2, #1
   10e12:	701a      	strb	r2, [r3, #0]
      link_fbw_fbw_nb_err = from_fbw.nb_err;
   10e14:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   10e18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e1c:	7d1a      	ldrb	r2, [r3, #20]
   10e1e:	f64a 33e8 	movw	r3, #44008	; 0xabe8
   10e22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e26:	701a      	strb	r2, [r3, #0]
   10e28:	e00c      	b.n	10e44 <__vector_12+0xa0>
    }
    else
      link_fbw_nb_err++;
   10e2a:	f64a 33e7 	movw	r3, #44007	; 0xabe7
   10e2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e32:	781b      	ldrb	r3, [r3, #0]
   10e34:	b2db      	uxtb	r3, r3
   10e36:	3301      	adds	r3, #1
   10e38:	b2da      	uxtb	r2, r3
   10e3a:	f64a 33e7 	movw	r3, #44007	; 0xabe7
   10e3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e42:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_complete = TRUE;
   10e44:	f240 2382 	movw	r3, #642	; 0x282
   10e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e4c:	2201      	movs	r2, #1
   10e4e:	701a      	strb	r2, [r3, #0]
    /* unselect slave0                      */
    SPI_UNSELECT_SLAVE0();
   10e50:	f64a 33ec 	movw	r3, #44012	; 0xabec
   10e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e58:	2200      	movs	r2, #0
   10e5a:	701a      	strb	r2, [r3, #0]
   10e5c:	f242 0318 	movw	r3, #8216	; 0x2018
   10e60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e64:	f242 0218 	movw	r2, #8216	; 0x2018
   10e68:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10e6c:	7812      	ldrb	r2, [r2, #0]
   10e6e:	b2d2      	uxtb	r2, r2
   10e70:	f042 0201 	orr.w	r2, r2, #1
   10e74:	b2d2      	uxtb	r2, r2
   10e76:	701a      	strb	r2, [r3, #0]
    SPI_STOP();
   10e78:	f242 030d 	movw	r3, #8205	; 0x200d
   10e7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e80:	f242 020d 	movw	r2, #8205	; 0x200d
   10e84:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10e88:	7812      	ldrb	r2, [r2, #0]
   10e8a:	b2d2      	uxtb	r2, r2
   10e8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   10e90:	b2d2      	uxtb	r2, r2
   10e92:	701a      	strb	r2, [r3, #0]
   10e94:	f242 030d 	movw	r3, #8205	; 0x200d
   10e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e9c:	f242 020d 	movw	r2, #8205	; 0x200d
   10ea0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ea4:	7812      	ldrb	r2, [r2, #0]
   10ea6:	b2d2      	uxtb	r2, r2
   10ea8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   10eac:	b2d2      	uxtb	r2, r2
   10eae:	701a      	strb	r2, [r3, #0]
    return;
   10eb0:	e051      	b.n	10f56 <__vector_12+0x1b2>
  }

  /* we are sending/receiving payload       */
  if (idx_buf < FRAME_LENGTH - 1) {
   10eb2:	f64a 33e9 	movw	r3, #44009	; 0xabe9
   10eb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10eba:	781b      	ldrb	r3, [r3, #0]
   10ebc:	2b15      	cmp	r3, #21
   10ebe:	d820      	bhi.n	10f02 <__vector_12+0x15e>
    /* place new payload byte in send register */
    tmp = ((uint8_t*)&to_fbw)[idx_buf];
   10ec0:	f64a 33e9 	movw	r3, #44009	; 0xabe9
   10ec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ec8:	781b      	ldrb	r3, [r3, #0]
   10eca:	461a      	mov	r2, r3
   10ecc:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   10ed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ed4:	4413      	add	r3, r2
   10ed6:	781b      	ldrb	r3, [r3, #0]
   10ed8:	71fb      	strb	r3, [r7, #7]
    SPI_SEND(tmp);
   10eda:	f242 030f 	movw	r3, #8207	; 0x200f
   10ede:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ee2:	79fa      	ldrb	r2, [r7, #7]
   10ee4:	701a      	strb	r2, [r3, #0]
    xor_out ^= tmp;
   10ee6:	f64a 33eb 	movw	r3, #44011	; 0xabeb
   10eea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10eee:	781a      	ldrb	r2, [r3, #0]
   10ef0:	79fb      	ldrb	r3, [r7, #7]
   10ef2:	4053      	eors	r3, r2
   10ef4:	b2da      	uxtb	r2, r3
   10ef6:	f64a 33eb 	movw	r3, #44011	; 0xabeb
   10efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10efe:	701a      	strb	r2, [r3, #0]
   10f00:	e009      	b.n	10f16 <__vector_12+0x172>
  } 
  /* we are done sending the payload */
  else { // idx_buf == FRAME_LENGTH - 1
    /* place checksum in send register */
    SPI_SEND(xor_out);
   10f02:	f242 030f 	movw	r3, #8207	; 0x200f
   10f06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f0a:	f64a 32eb 	movw	r2, #44011	; 0xabeb
   10f0e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f12:	7812      	ldrb	r2, [r2, #0]
   10f14:	701a      	strb	r2, [r3, #0]
  }
  
  /* read the byte from receive register */
  tmp = SPDR;
   10f16:	f242 030f 	movw	r3, #8207	; 0x200f
   10f1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f1e:	781b      	ldrb	r3, [r3, #0]
   10f20:	71fb      	strb	r3, [r7, #7]
  ((uint8_t*)&from_fbw)[idx_buf-1] = tmp;
   10f22:	f64a 33e9 	movw	r3, #44009	; 0xabe9
   10f26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f2a:	781b      	ldrb	r3, [r3, #0]
   10f2c:	1e5a      	subs	r2, r3, #1
   10f2e:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   10f32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f36:	4413      	add	r3, r2
   10f38:	79fa      	ldrb	r2, [r7, #7]
   10f3a:	701a      	strb	r2, [r3, #0]
  xor_in ^= tmp;
   10f3c:	f64a 33ea 	movw	r3, #44010	; 0xabea
   10f40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f44:	781a      	ldrb	r2, [r3, #0]
   10f46:	79fb      	ldrb	r3, [r7, #7]
   10f48:	4053      	eors	r3, r2
   10f4a:	b2da      	uxtb	r2, r3
   10f4c:	f64a 33ea 	movw	r3, #44010	; 0xabea
   10f50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f54:	701a      	strb	r2, [r3, #0]
}
   10f56:	370c      	adds	r7, #12
   10f58:	46bd      	mov	sp, r7
   10f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
   10f5e:	4770      	bx	lr

00010f60 <spi_init>:
#include "ad7714.h"

volatile uint8_t spi_cur_slave;
uint8_t spi_nb_ovrn;

void spi_init( void) {
   10f60:	b480      	push	{r7}
   10f62:	af00      	add	r7, sp, #0
  /* Set MOSI and SCK output, all others input */ 
  SPI_DDR |= _BV(SPI_MOSI_PIN)| _BV(SPI_SCK_PIN); 
   10f64:	f242 0317 	movw	r3, #8215	; 0x2017
   10f68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f6c:	f242 0217 	movw	r2, #8215	; 0x2017
   10f70:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f74:	7812      	ldrb	r2, [r2, #0]
   10f76:	b2d2      	uxtb	r2, r2
   10f78:	f042 0206 	orr.w	r2, r2, #6
   10f7c:	b2d2      	uxtb	r2, r2
   10f7e:	701a      	strb	r2, [r3, #0]

  /* enable pull up for miso */
  //  SPI_PORT |= _BV(SPI_MISO_PIN);

  /* Set SS0 output */
  sbi( SPI_SS0_DDR, SPI_SS0_PIN);
   10f80:	f242 0317 	movw	r3, #8215	; 0x2017
   10f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f88:	f242 0217 	movw	r2, #8215	; 0x2017
   10f8c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f90:	7812      	ldrb	r2, [r2, #0]
   10f92:	b2d2      	uxtb	r2, r2
   10f94:	f042 0201 	orr.w	r2, r2, #1
   10f98:	b2d2      	uxtb	r2, r2
   10f9a:	701a      	strb	r2, [r3, #0]
  /* SS0 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE0();
   10f9c:	f64a 33ec 	movw	r3, #44012	; 0xabec
   10fa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fa4:	2200      	movs	r2, #0
   10fa6:	701a      	strb	r2, [r3, #0]
   10fa8:	f242 0318 	movw	r3, #8216	; 0x2018
   10fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fb0:	f242 0218 	movw	r2, #8216	; 0x2018
   10fb4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10fb8:	7812      	ldrb	r2, [r2, #0]
   10fba:	b2d2      	uxtb	r2, r2
   10fbc:	f042 0201 	orr.w	r2, r2, #1
   10fc0:	b2d2      	uxtb	r2, r2
   10fc2:	701a      	strb	r2, [r3, #0]

  /* Set SS1 output */
  sbi( SPI_SS1_DDR, SPI_SS1_PIN);
   10fc4:	f242 0302 	movw	r3, #8194	; 0x2002
   10fc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fcc:	f242 0202 	movw	r2, #8194	; 0x2002
   10fd0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10fd4:	7812      	ldrb	r2, [r2, #0]
   10fd6:	b2d2      	uxtb	r2, r2
   10fd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
   10fdc:	b2d2      	uxtb	r2, r2
   10fde:	701a      	strb	r2, [r3, #0]
  /* SS1 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE1();
   10fe0:	f64a 33ec 	movw	r3, #44012	; 0xabec
   10fe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fe8:	2200      	movs	r2, #0
   10fea:	701a      	strb	r2, [r3, #0]
   10fec:	f242 0303 	movw	r3, #8195	; 0x2003
   10ff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ff4:	f242 0203 	movw	r2, #8195	; 0x2003
   10ff8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ffc:	7812      	ldrb	r2, [r2, #0]
   10ffe:	b2d2      	uxtb	r2, r2
   11000:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11004:	b2d2      	uxtb	r2, r2
   11006:	701a      	strb	r2, [r3, #0]
  
  spi_cur_slave = SPI_NONE;
   11008:	f64a 33ec 	movw	r3, #44012	; 0xabec
   1100c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11010:	2200      	movs	r2, #0
   11012:	701a      	strb	r2, [r3, #0]
}
   11014:	46bd      	mov	sp, r7
   11016:	f85d 7b04 	ldr.w	r7, [sp], #4
   1101a:	4770      	bx	lr

0001101c <__vector_17>:


SIGNAL(SIG_SPI) {
   1101c:	b580      	push	{r7, lr}
   1101e:	af00      	add	r7, sp, #0
  if (spi_cur_slave == SPI_SLAVE0)
   11020:	f64a 33ec 	movw	r3, #44012	; 0xabec
   11024:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11028:	781b      	ldrb	r3, [r3, #0]
   1102a:	b2db      	uxtb	r3, r3
   1102c:	2b01      	cmp	r3, #1
   1102e:	d102      	bne.n	11036 <__vector_17+0x1a>
    link_fbw_on_spi_it();
   11030:	f7ff fe88 	bl	10d44 <link_fbw_on_spi_it>
   11034:	e00b      	b.n	1104e <__vector_17+0x32>
  else
    fatal_error_nb++;
   11036:	f64a 2390 	movw	r3, #43664	; 0xaa90
   1103a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1103e:	781b      	ldrb	r3, [r3, #0]
   11040:	3301      	adds	r3, #1
   11042:	b2da      	uxtb	r2, r3
   11044:	f64a 2390 	movw	r3, #43664	; 0xaa90
   11048:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1104c:	701a      	strb	r2, [r3, #0]
}
   1104e:	bd80      	pop	{r7, pc}

00011050 <adc_buf_channel>:

uint16_t		adc_samples[ NB_ADC ];

static struct adc_buf* buffers[NB_ADC];

void adc_buf_channel(uint8_t adc_channel, struct adc_buf* s) {
   11050:	b480      	push	{r7}
   11052:	b083      	sub	sp, #12
   11054:	af00      	add	r7, sp, #0
   11056:	4603      	mov	r3, r0
   11058:	6039      	str	r1, [r7, #0]
   1105a:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   1105c:	79fa      	ldrb	r2, [r7, #7]
   1105e:	f64a 4300 	movw	r3, #44032	; 0xac00
   11062:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11066:	6839      	ldr	r1, [r7, #0]
   11068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   1106c:	370c      	adds	r7, #12
   1106e:	46bd      	mov	sp, r7
   11070:	f85d 7b04 	ldr.w	r7, [sp], #4
   11074:	4770      	bx	lr
   11076:	bf00      	nop

00011078 <adc_init>:

void 
adc_init( void )
{
   11078:	b480      	push	{r7}
   1107a:	b083      	sub	sp, #12
   1107c:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   1107e:	f242 0362 	movw	r3, #8290	; 0x2062
   11082:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11086:	2200      	movs	r2, #0
   11088:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   1108a:	f242 0361 	movw	r3, #8289	; 0x2061
   1108e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11092:	2200      	movs	r2, #0
   11094:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref, which is tied to Vcc */
  ADMUX		= ANALOG_VREF;
   11096:	f242 0307 	movw	r3, #8199	; 0x2007
   1109a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1109e:	2240      	movs	r2, #64	; 0x40
   110a0:	701a      	strb	r2, [r3, #0]

  /* Turn off the analog comparator */
  sbi( ACSR, ACD );
   110a2:	f242 0308 	movw	r3, #8200	; 0x2008
   110a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110aa:	f242 0208 	movw	r2, #8200	; 0x2008
   110ae:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110b2:	7812      	ldrb	r2, [r2, #0]
   110b4:	b2d2      	uxtb	r2, r2
   110b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
   110ba:	b2d2      	uxtb	r2, r2
   110bc:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSR		= 0
   110be:	f242 0306 	movw	r3, #8198	; 0x2006
   110c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110c6:	22cf      	movs	r2, #207	; 0xcf
   110c8:	701a      	strb	r2, [r3, #0]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   110ca:	2300      	movs	r3, #0
   110cc:	71fb      	strb	r3, [r7, #7]
   110ce:	e00a      	b.n	110e6 <adc_init+0x6e>
    buffers[i] = (struct adc_buf*)0;
   110d0:	79fa      	ldrb	r2, [r7, #7]
   110d2:	f64a 4300 	movw	r3, #44032	; 0xac00
   110d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110da:	2100      	movs	r1, #0
   110dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   110e0:	79fb      	ldrb	r3, [r7, #7]
   110e2:	3301      	adds	r3, #1
   110e4:	71fb      	strb	r3, [r7, #7]
   110e6:	79fb      	ldrb	r3, [r7, #7]
   110e8:	2b07      	cmp	r3, #7
   110ea:	d9f1      	bls.n	110d0 <adc_init+0x58>
    buffers[i] = (struct adc_buf*)0;
}
   110ec:	370c      	adds	r7, #12
   110ee:	46bd      	mov	sp, r7
   110f0:	f85d 7b04 	ldr.w	r7, [sp], #4
   110f4:	4770      	bx	lr
   110f6:	bf00      	nop

000110f8 <__vector_21>:
 *  8.913kHz on mega128@16MHz 1kHz/channel ??
*/


SIGNAL( SIG_ADC )
{
   110f8:	b480      	push	{r7}
   110fa:	b085      	sub	sp, #20
   110fc:	af00      	add	r7, sp, #0
  uint8_t adc_input	= ADMUX & 0x7;
   110fe:	f242 0307 	movw	r3, #8199	; 0x2007
   11102:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11106:	781b      	ldrb	r3, [r3, #0]
   11108:	b2db      	uxtb	r3, r3
   1110a:	f003 0307 	and.w	r3, r3, #7
   1110e:	73fb      	strb	r3, [r7, #15]
  struct adc_buf* buf = buffers[adc_input];
   11110:	7bfa      	ldrb	r2, [r7, #15]
   11112:	f64a 4300 	movw	r3, #44032	; 0xac00
   11116:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1111a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1111e:	60bb      	str	r3, [r7, #8]
  uint16_t adc_value = ADCW;
   11120:	f242 0304 	movw	r3, #8196	; 0x2004
   11124:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11128:	881b      	ldrh	r3, [r3, #0]
   1112a:	80fb      	strh	r3, [r7, #6]
  /* Store result */
  adc_samples[ adc_input ] = adc_value;
   1112c:	7bfa      	ldrb	r2, [r7, #15]
   1112e:	f64a 33f0 	movw	r3, #44016	; 0xabf0
   11132:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11136:	88f9      	ldrh	r1, [r7, #6]
   11138:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  if (buf) {
   1113c:	68bb      	ldr	r3, [r7, #8]
   1113e:	2b00      	cmp	r3, #0
   11140:	d025      	beq.n	1118e <__vector_21+0x96>
    uint8_t new_head = buf->head + 1;
   11142:	68bb      	ldr	r3, [r7, #8]
   11144:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   11148:	3301      	adds	r3, #1
   1114a:	73bb      	strb	r3, [r7, #14]
    if (new_head >= AV_NB_SAMPLE) new_head = 0;
   1114c:	7bbb      	ldrb	r3, [r7, #14]
   1114e:	2b1f      	cmp	r3, #31
   11150:	d901      	bls.n	11156 <__vector_21+0x5e>
   11152:	2300      	movs	r3, #0
   11154:	73bb      	strb	r3, [r7, #14]
    buf->sum -= buf->values[new_head];
   11156:	68bb      	ldr	r3, [r7, #8]
   11158:	881a      	ldrh	r2, [r3, #0]
   1115a:	7bbb      	ldrb	r3, [r7, #14]
   1115c:	68b9      	ldr	r1, [r7, #8]
   1115e:	005b      	lsls	r3, r3, #1
   11160:	440b      	add	r3, r1
   11162:	885b      	ldrh	r3, [r3, #2]
   11164:	1ad3      	subs	r3, r2, r3
   11166:	b29a      	uxth	r2, r3
   11168:	68bb      	ldr	r3, [r7, #8]
   1116a:	801a      	strh	r2, [r3, #0]
    buf->values[new_head] = adc_value;
   1116c:	7bbb      	ldrb	r3, [r7, #14]
   1116e:	68ba      	ldr	r2, [r7, #8]
   11170:	005b      	lsls	r3, r3, #1
   11172:	4413      	add	r3, r2
   11174:	88fa      	ldrh	r2, [r7, #6]
   11176:	805a      	strh	r2, [r3, #2]
    buf->sum += adc_value;
   11178:	68bb      	ldr	r3, [r7, #8]
   1117a:	881a      	ldrh	r2, [r3, #0]
   1117c:	88fb      	ldrh	r3, [r7, #6]
   1117e:	4413      	add	r3, r2
   11180:	b29a      	uxth	r2, r3
   11182:	68bb      	ldr	r3, [r7, #8]
   11184:	801a      	strh	r2, [r3, #0]
    buf->head = new_head;   
   11186:	68bb      	ldr	r3, [r7, #8]
   11188:	7bba      	ldrb	r2, [r7, #14]
   1118a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Find the next input */
  adc_input++;
   1118e:	7bfb      	ldrb	r3, [r7, #15]
   11190:	3301      	adds	r3, #1
   11192:	73fb      	strb	r3, [r7, #15]
  if( adc_input >= 8 )
   11194:	7bfb      	ldrb	r3, [r7, #15]
   11196:	2b07      	cmp	r3, #7
   11198:	d901      	bls.n	1119e <__vector_21+0xa6>
    adc_input = 0;
   1119a:	2300      	movs	r3, #0
   1119c:	73fb      	strb	r3, [r7, #15]
  /* Select it */
  ADMUX = adc_input | ANALOG_VREF;
   1119e:	f242 0307 	movw	r3, #8199	; 0x2007
   111a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111a6:	7bfa      	ldrb	r2, [r7, #15]
   111a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   111ac:	b2d2      	uxtb	r2, r2
   111ae:	701a      	strb	r2, [r3, #0]
  /* Restart the conversion */
  sbi( ADCSR, ADSC );
   111b0:	f242 0306 	movw	r3, #8198	; 0x2006
   111b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111b8:	f242 0206 	movw	r2, #8198	; 0x2006
   111bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   111c0:	7812      	ldrb	r2, [r2, #0]
   111c2:	b2d2      	uxtb	r2, r2
   111c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   111c8:	b2d2      	uxtb	r2, r2
   111ca:	701a      	strb	r2, [r3, #0]
  
}
   111cc:	3714      	adds	r7, #20
   111ce:	46bd      	mov	sp, r7
   111d0:	f85d 7b04 	ldr.w	r7, [sp], #4
   111d4:	4770      	bx	lr
   111d6:	bf00      	nop

000111d8 <gps_init>:
static uint8_t  ubx_status;
static uint16_t ubx_len;
static uint8_t  ubx_msg_idx;
static uint8_t ck_a, ck_b, ubx_id, ubx_class;

void gps_init( void ) {
   111d8:	b580      	push	{r7, lr}
   111da:	af00      	add	r7, sp, #0
#ifdef SIMUL
  uart0_init();
  simul_ir_roll = ir_roll_neutral;
  simul_ir_pitch = ir_pitch_neutral;
#else
  uart1_init();
   111dc:	f003 fca8 	bl	14b30 <uart1_init>
#endif
  ubx_status = UNINIT;
   111e0:	f64a 5347 	movw	r3, #44359	; 0xad47
   111e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111e8:	2200      	movs	r2, #0
   111ea:	701a      	strb	r2, [r3, #0]
}
   111ec:	bd80      	pop	{r7, pc}
   111ee:	bf00      	nop

000111f0 <parse_gps_msg>:

void parse_gps_msg( void ) {
   111f0:	b580      	push	{r7, lr}
   111f2:	af00      	add	r7, sp, #0
    ubx_class = 1;
    ubx_id = (ubx_id + 1)%0x40;
    */
    //end

  if (ubx_class == UBX_NAV_ID) {
   111f4:	f64a 534e 	movw	r3, #44366	; 0xad4e
   111f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111fc:	781b      	ldrb	r3, [r3, #0]
   111fe:	2b01      	cmp	r3, #1
   11200:	f040 80f9 	bne.w	113f6 <parse_gps_msg+0x206>
    if (ubx_id == UBX_NAV_POSUTM_ID) {
   11204:	f64a 534d 	movw	r3, #44365	; 0xad4d
   11208:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1120c:	781b      	ldrb	r3, [r3, #0]
   1120e:	2b08      	cmp	r3, #8
   11210:	d128      	bne.n	11264 <parse_gps_msg+0x74>
      gps_utm_east = UBX_NAV_POSUTM_EAST(ubx_msg_buf);
   11212:	f64a 4348 	movw	r3, #44104	; 0xac48
   11216:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1121a:	685a      	ldr	r2, [r3, #4]
   1121c:	f64a 4334 	movw	r3, #44084	; 0xac34
   11220:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11224:	601a      	str	r2, [r3, #0]
      gps_utm_north = UBX_NAV_POSUTM_NORTH(ubx_msg_buf);
   11226:	f64a 4348 	movw	r3, #44104	; 0xac48
   1122a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1122e:	689a      	ldr	r2, [r3, #8]
   11230:	f64a 4338 	movw	r3, #44088	; 0xac38
   11234:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11238:	601a      	str	r2, [r3, #0]
      gps_falt = (float)UBX_NAV_POSUTM_ALT(ubx_msg_buf) / 100.;
   1123a:	4b73      	ldr	r3, [pc, #460]	; (11408 <parse_gps_msg+0x218>)
   1123c:	681b      	ldr	r3, [r3, #0]
   1123e:	4618      	mov	r0, r3
   11240:	f006 ffaa 	bl	18198 <__aeabi_i2f>
   11244:	4603      	mov	r3, r0
   11246:	4618      	mov	r0, r3
   11248:	f04f 0100 	mov.w	r1, #0
   1124c:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   11250:	f007 f8aa 	bl	183a8 <__aeabi_fdiv>
   11254:	4603      	mov	r3, r0
   11256:	461a      	mov	r2, r3
   11258:	f64a 4324 	movw	r3, #44068	; 0xac24
   1125c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11260:	601a      	str	r2, [r3, #0]
   11262:	e0c8      	b.n	113f6 <parse_gps_msg+0x206>
        gps_utm_east = gps_utm_east + 0.5;
        gps_utm_north = gps_utm_north + 0.4;
        gps_falt = gps_falt + 0.6;
        */
        // end
    } else if (ubx_id == UBX_NAV_STATUS_ID) {
   11264:	f64a 534d 	movw	r3, #44365	; 0xad4d
   11268:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1126c:	781b      	ldrb	r3, [r3, #0]
   1126e:	2b03      	cmp	r3, #3
   11270:	d10a      	bne.n	11288 <parse_gps_msg+0x98>
      gps_mode = UBX_NAV_STATUS_GPSfix(ubx_msg_buf);
   11272:	f64a 4348 	movw	r3, #44104	; 0xac48
   11276:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1127a:	791a      	ldrb	r2, [r3, #4]
   1127c:	f64a 4344 	movw	r3, #44100	; 0xac44
   11280:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11284:	701a      	strb	r2, [r3, #0]
   11286:	e0b6      	b.n	113f6 <parse_gps_msg+0x206>
    } else if (ubx_id == UBX_NAV_VELNED_ID) {
   11288:	f64a 534d 	movw	r3, #44365	; 0xad4d
   1128c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11290:	781b      	ldrb	r3, [r3, #0]
   11292:	2b12      	cmp	r3, #18
   11294:	f040 80af 	bne.w	113f6 <parse_gps_msg+0x206>
      gps_fspeed = ((float)UBX_NAV_VELNED_GSpeed(ubx_msg_buf)) / 1e2; 
   11298:	4b5c      	ldr	r3, [pc, #368]	; (1140c <parse_gps_msg+0x21c>)
   1129a:	681b      	ldr	r3, [r3, #0]
   1129c:	4618      	mov	r0, r3
   1129e:	f006 ff77 	bl	18190 <__aeabi_ui2f>
   112a2:	4603      	mov	r3, r0
   112a4:	4618      	mov	r0, r3
   112a6:	f04f 0100 	mov.w	r1, #0
   112aa:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   112ae:	f007 f87b 	bl	183a8 <__aeabi_fdiv>
   112b2:	4603      	mov	r3, r0
   112b4:	461a      	mov	r2, r3
   112b6:	f64a 4328 	movw	r3, #44072	; 0xac28
   112ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112be:	601a      	str	r2, [r3, #0]
      gps_fclimb = ((float)UBX_NAV_VELNED_VEL_D(ubx_msg_buf)) / -1e2;
   112c0:	4b51      	ldr	r3, [pc, #324]	; (11408 <parse_gps_msg+0x218>)
   112c2:	681b      	ldr	r3, [r3, #0]
   112c4:	4618      	mov	r0, r3
   112c6:	f006 ff67 	bl	18198 <__aeabi_i2f>
   112ca:	4603      	mov	r3, r0
   112cc:	4618      	mov	r0, r3
   112ce:	f04f 0100 	mov.w	r1, #0
   112d2:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   112d6:	f007 f867 	bl	183a8 <__aeabi_fdiv>
   112da:	4603      	mov	r3, r0
   112dc:	461a      	mov	r2, r3
   112de:	f64a 432c 	movw	r3, #44076	; 0xac2c
   112e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112e6:	601a      	str	r2, [r3, #0]
      gps_fcourse = RadianOfDeg(((float)UBX_NAV_VELNED_Heading(ubx_msg_buf)) / 1e5);
   112e8:	4b49      	ldr	r3, [pc, #292]	; (11410 <parse_gps_msg+0x220>)
   112ea:	681b      	ldr	r3, [r3, #0]
   112ec:	4618      	mov	r0, r3
   112ee:	f006 ff53 	bl	18198 <__aeabi_i2f>
   112f2:	4603      	mov	r3, r0
   112f4:	4618      	mov	r0, r3
   112f6:	f006 fb0f 	bl	17918 <__aeabi_f2d>
   112fa:	4602      	mov	r2, r0
   112fc:	460b      	mov	r3, r1
   112fe:	4610      	mov	r0, r2
   11300:	4619      	mov	r1, r3
   11302:	a33d      	add	r3, pc, #244	; (adr r3, 113f8 <parse_gps_msg+0x208>)
   11304:	e9d3 2300 	ldrd	r2, r3, [r3]
   11308:	f006 fc84 	bl	17c14 <__aeabi_ddiv>
   1130c:	4602      	mov	r2, r0
   1130e:	460b      	mov	r3, r1
   11310:	4610      	mov	r0, r2
   11312:	4619      	mov	r1, r3
   11314:	f04f 0200 	mov.w	r2, #0
   11318:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1131c:	f2c4 0366 	movt	r3, #16486	; 0x4066
   11320:	f006 fc78 	bl	17c14 <__aeabi_ddiv>
   11324:	4602      	mov	r2, r0
   11326:	460b      	mov	r3, r1
   11328:	4610      	mov	r0, r2
   1132a:	4619      	mov	r1, r3
   1132c:	a334      	add	r3, pc, #208	; (adr r3, 11400 <parse_gps_msg+0x210>)
   1132e:	e9d3 2300 	ldrd	r2, r3, [r3]
   11332:	f006 fb45 	bl	179c0 <__aeabi_dmul>
   11336:	4602      	mov	r2, r0
   11338:	460b      	mov	r3, r1
   1133a:	4610      	mov	r0, r2
   1133c:	4619      	mov	r1, r3
   1133e:	f006 fe21 	bl	17f84 <__aeabi_d2f>
   11342:	4602      	mov	r2, r0
   11344:	f64a 4330 	movw	r3, #44080	; 0xac30
   11348:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1134c:	601a      	str	r2, [r3, #0]
      gps_ftow = ((float)UBX_NAV_VELNED_ITOW(ubx_msg_buf)) / 1e3;
   1134e:	f64a 4348 	movw	r3, #44104	; 0xac48
   11352:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11356:	681b      	ldr	r3, [r3, #0]
   11358:	4618      	mov	r0, r3
   1135a:	f006 ff19 	bl	18190 <__aeabi_ui2f>
   1135e:	4603      	mov	r3, r0
   11360:	4618      	mov	r0, r3
   11362:	f04f 0100 	mov.w	r1, #0
   11366:	f2c4 417a 	movt	r1, #17530	; 0x447a
   1136a:	f007 f81d 	bl	183a8 <__aeabi_fdiv>
   1136e:	4603      	mov	r3, r0
   11370:	461a      	mov	r2, r3
   11372:	f64a 4320 	movw	r3, #44064	; 0xac20
   11376:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1137a:	601a      	str	r2, [r3, #0]
        gps_fcourse = gps_fcourse + 0.2;
        gps_ftow = gps_ftow + 0.1;
        */
        // end
      
      gps_east = gps_utm_east / 100 - NAV_UTM_EAST0;
   1137c:	f64a 4334 	movw	r3, #44084	; 0xac34
   11380:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11384:	681a      	ldr	r2, [r3, #0]
   11386:	f248 531f 	movw	r3, #34079	; 0x851f
   1138a:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   1138e:	fb83 1302 	smull	r1, r3, r3, r2
   11392:	1159      	asrs	r1, r3, #5
   11394:	17d3      	asrs	r3, r2, #31
   11396:	1acb      	subs	r3, r1, r3
   11398:	f5a3 2313 	sub.w	r3, r3, #602112	; 0x93000
   1139c:	f6a3 535a 	subw	r3, r3, #3418	; 0xd5a
   113a0:	4618      	mov	r0, r3
   113a2:	f006 fef9 	bl	18198 <__aeabi_i2f>
   113a6:	4602      	mov	r2, r0
   113a8:	f64a 433c 	movw	r3, #44092	; 0xac3c
   113ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113b0:	601a      	str	r2, [r3, #0]
      gps_north = gps_utm_north / 100 - NAV_UTM_NORTH0;
   113b2:	f64a 4338 	movw	r3, #44088	; 0xac38
   113b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113ba:	681a      	ldr	r2, [r3, #0]
   113bc:	f248 531f 	movw	r3, #34079	; 0x851f
   113c0:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   113c4:	fb83 1302 	smull	r1, r3, r3, r2
   113c8:	1159      	asrs	r1, r3, #5
   113ca:	17d3      	asrs	r3, r2, #31
   113cc:	1aca      	subs	r2, r1, r3
   113ce:	f648 231a 	movw	r3, #35354	; 0x8a1a
   113d2:	f6cf 73a7 	movt	r3, #65447	; 0xffa7
   113d6:	4413      	add	r3, r2
   113d8:	4618      	mov	r0, r3
   113da:	f006 fedd 	bl	18198 <__aeabi_i2f>
   113de:	4602      	mov	r2, r0
   113e0:	f64a 4340 	movw	r3, #44096	; 0xac40
   113e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113e8:	601a      	str	r2, [r3, #0]
      
      
      gps_pos_available = TRUE; /* The 3 UBX messages are sent in one rafale */
   113ea:	f64a 4346 	movw	r3, #44102	; 0xac46
   113ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113f2:	2201      	movs	r2, #1
   113f4:	701a      	strb	r2, [r3, #0]
      simul_ir_roll = UBX_USR_IRSIM_ROLL(ubx_msg_buf);
      simul_ir_pitch = UBX_USR_IRSIM_PITCH(ubx_msg_buf);
    }
  }
#endif
}
   113f6:	bd80      	pop	{r7, pc}
   113f8:	00000000 	.word	0x00000000
   113fc:	40f86a00 	.word	0x40f86a00
   11400:	5a7ed197 	.word	0x5a7ed197
   11404:	400921fb 	.word	0x400921fb
   11408:	2000ac54 	.word	0x2000ac54
   1140c:	2000ac5c 	.word	0x2000ac5c
   11410:	2000ac60 	.word	0x2000ac60

00011414 <parse_ubx>:


uint8_t gps_nb_ovrn;


static void parse_ubx( uint8_t c ) {
   11414:	b480      	push	{r7}
   11416:	b083      	sub	sp, #12
   11418:	af00      	add	r7, sp, #0
   1141a:	4603      	mov	r3, r0
   1141c:	71fb      	strb	r3, [r7, #7]
   if (ubx_status < GOT_PAYLOAD) {
   1141e:	f64a 5347 	movw	r3, #44359	; 0xad47
   11422:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11426:	781b      	ldrb	r3, [r3, #0]
   11428:	2b06      	cmp	r3, #6
   1142a:	d81d      	bhi.n	11468 <parse_ubx+0x54>
    ck_a += c;
   1142c:	f64a 534b 	movw	r3, #44363	; 0xad4b
   11430:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11434:	781a      	ldrb	r2, [r3, #0]
   11436:	79fb      	ldrb	r3, [r7, #7]
   11438:	4413      	add	r3, r2
   1143a:	b2da      	uxtb	r2, r3
   1143c:	f64a 534b 	movw	r3, #44363	; 0xad4b
   11440:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11444:	701a      	strb	r2, [r3, #0]
    ck_b += ck_a;
   11446:	f64a 534c 	movw	r3, #44364	; 0xad4c
   1144a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1144e:	781a      	ldrb	r2, [r3, #0]
   11450:	f64a 534b 	movw	r3, #44363	; 0xad4b
   11454:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11458:	781b      	ldrb	r3, [r3, #0]
   1145a:	4413      	add	r3, r2
   1145c:	b2da      	uxtb	r2, r3
   1145e:	f64a 534c 	movw	r3, #44364	; 0xad4c
   11462:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11466:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
    break;
  }
#else */
  if (ubx_status == UNINIT)
   11468:	f64a 5347 	movw	r3, #44359	; 0xad47
   1146c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11470:	781b      	ldrb	r3, [r3, #0]
   11472:	2b00      	cmp	r3, #0
   11474:	d110      	bne.n	11498 <parse_ubx+0x84>
  {
    if (c == UBX_SYNC1)
   11476:	79fb      	ldrb	r3, [r7, #7]
   11478:	2bb5      	cmp	r3, #181	; 0xb5
   1147a:	f040 8135 	bne.w	116e8 <parse_ubx+0x2d4>
      ubx_status++;
   1147e:	f64a 5347 	movw	r3, #44359	; 0xad47
   11482:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11486:	781b      	ldrb	r3, [r3, #0]
   11488:	3301      	adds	r3, #1
   1148a:	b2da      	uxtb	r2, r3
   1148c:	f64a 5347 	movw	r3, #44359	; 0xad47
   11490:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11494:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   11496:	e12f      	b.n	116f8 <parse_ubx+0x2e4>
  if (ubx_status == UNINIT)
  {
    if (c == UBX_SYNC1)
      ubx_status++;
  }
  else if (ubx_status == GOT_SYNC1)
   11498:	f64a 5347 	movw	r3, #44359	; 0xad47
   1149c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114a0:	781b      	ldrb	r3, [r3, #0]
   114a2:	2b01      	cmp	r3, #1
   114a4:	d11c      	bne.n	114e0 <parse_ubx+0xcc>
  {
    if (c != UBX_SYNC2)
   114a6:	79fb      	ldrb	r3, [r7, #7]
   114a8:	2b62      	cmp	r3, #98	; 0x62
   114aa:	d000      	beq.n	114ae <parse_ubx+0x9a>
      goto error;
   114ac:	e11d      	b.n	116ea <parse_ubx+0x2d6>
    ck_a = 0;
   114ae:	f64a 534b 	movw	r3, #44363	; 0xad4b
   114b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114b6:	2200      	movs	r2, #0
   114b8:	701a      	strb	r2, [r3, #0]
    ck_b = 0;
   114ba:	f64a 534c 	movw	r3, #44364	; 0xad4c
   114be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114c2:	2200      	movs	r2, #0
   114c4:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   114c6:	f64a 5347 	movw	r3, #44359	; 0xad47
   114ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114ce:	781b      	ldrb	r3, [r3, #0]
   114d0:	3301      	adds	r3, #1
   114d2:	b2da      	uxtb	r2, r3
   114d4:	f64a 5347 	movw	r3, #44359	; 0xad47
   114d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114dc:	701a      	strb	r2, [r3, #0]
   114de:	e103      	b.n	116e8 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_SYNC2)
   114e0:	f64a 5347 	movw	r3, #44359	; 0xad47
   114e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114e8:	781b      	ldrb	r3, [r3, #0]
   114ea:	2b02      	cmp	r3, #2
   114ec:	d127      	bne.n	1153e <parse_ubx+0x12a>
  {
    if (gps_msg_received) {
   114ee:	f64a 4345 	movw	r3, #44101	; 0xac45
   114f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114f6:	781b      	ldrb	r3, [r3, #0]
   114f8:	b2db      	uxtb	r3, r3
   114fa:	2b00      	cmp	r3, #0
   114fc:	d00c      	beq.n	11518 <parse_ubx+0x104>
      /* Previous message has not yet been parsed: discard this one */
      gps_nb_ovrn++;
   114fe:	f64a 534f 	movw	r3, #44367	; 0xad4f
   11502:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11506:	781b      	ldrb	r3, [r3, #0]
   11508:	3301      	adds	r3, #1
   1150a:	b2da      	uxtb	r2, r3
   1150c:	f64a 534f 	movw	r3, #44367	; 0xad4f
   11510:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11514:	701a      	strb	r2, [r3, #0]
      goto error;
   11516:	e0e8      	b.n	116ea <parse_ubx+0x2d6>
    }
    ubx_class = c;
   11518:	f64a 534e 	movw	r3, #44366	; 0xad4e
   1151c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11520:	79fa      	ldrb	r2, [r7, #7]
   11522:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11524:	f64a 5347 	movw	r3, #44359	; 0xad47
   11528:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1152c:	781b      	ldrb	r3, [r3, #0]
   1152e:	3301      	adds	r3, #1
   11530:	b2da      	uxtb	r2, r3
   11532:	f64a 5347 	movw	r3, #44359	; 0xad47
   11536:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1153a:	701a      	strb	r2, [r3, #0]
   1153c:	e0d4      	b.n	116e8 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CLASS)
   1153e:	f64a 5347 	movw	r3, #44359	; 0xad47
   11542:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11546:	781b      	ldrb	r3, [r3, #0]
   11548:	2b03      	cmp	r3, #3
   1154a:	d112      	bne.n	11572 <parse_ubx+0x15e>
  {
    ubx_id = c;
   1154c:	f64a 534d 	movw	r3, #44365	; 0xad4d
   11550:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11554:	79fa      	ldrb	r2, [r7, #7]
   11556:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11558:	f64a 5347 	movw	r3, #44359	; 0xad47
   1155c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11560:	781b      	ldrb	r3, [r3, #0]
   11562:	3301      	adds	r3, #1
   11564:	b2da      	uxtb	r2, r3
   11566:	f64a 5347 	movw	r3, #44359	; 0xad47
   1156a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1156e:	701a      	strb	r2, [r3, #0]
   11570:	e0ba      	b.n	116e8 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_ID)
   11572:	f64a 5347 	movw	r3, #44359	; 0xad47
   11576:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1157a:	781b      	ldrb	r3, [r3, #0]
   1157c:	2b04      	cmp	r3, #4
   1157e:	d113      	bne.n	115a8 <parse_ubx+0x194>
  {
    ubx_len = c;
   11580:	79fb      	ldrb	r3, [r7, #7]
   11582:	b29a      	uxth	r2, r3
   11584:	f64a 5348 	movw	r3, #44360	; 0xad48
   11588:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1158c:	801a      	strh	r2, [r3, #0]
    ubx_status++;
   1158e:	f64a 5347 	movw	r3, #44359	; 0xad47
   11592:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11596:	781b      	ldrb	r3, [r3, #0]
   11598:	3301      	adds	r3, #1
   1159a:	b2da      	uxtb	r2, r3
   1159c:	f64a 5347 	movw	r3, #44359	; 0xad47
   115a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115a4:	701a      	strb	r2, [r3, #0]
   115a6:	e09f      	b.n	116e8 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN1)
   115a8:	f64a 5347 	movw	r3, #44359	; 0xad47
   115ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115b0:	781b      	ldrb	r3, [r3, #0]
   115b2:	2b05      	cmp	r3, #5
   115b4:	d12b      	bne.n	1160e <parse_ubx+0x1fa>
  {
    ubx_len |= (c<<8);
   115b6:	79fb      	ldrb	r3, [r7, #7]
   115b8:	021b      	lsls	r3, r3, #8
   115ba:	b29a      	uxth	r2, r3
   115bc:	f64a 5348 	movw	r3, #44360	; 0xad48
   115c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115c4:	881b      	ldrh	r3, [r3, #0]
   115c6:	b29b      	uxth	r3, r3
   115c8:	4313      	orrs	r3, r2
   115ca:	b29b      	uxth	r3, r3
   115cc:	b29a      	uxth	r2, r3
   115ce:	f64a 5348 	movw	r3, #44360	; 0xad48
   115d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115d6:	801a      	strh	r2, [r3, #0]
    if (ubx_len > UBX_MAX_PAYLOAD)
   115d8:	f64a 5348 	movw	r3, #44360	; 0xad48
   115dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115e0:	881b      	ldrh	r3, [r3, #0]
   115e2:	2bff      	cmp	r3, #255	; 0xff
   115e4:	d900      	bls.n	115e8 <parse_ubx+0x1d4>
      goto error;
   115e6:	e080      	b.n	116ea <parse_ubx+0x2d6>
    ubx_msg_idx = 0;
   115e8:	f64a 534a 	movw	r3, #44362	; 0xad4a
   115ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115f0:	2200      	movs	r2, #0
   115f2:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   115f4:	f64a 5347 	movw	r3, #44359	; 0xad47
   115f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115fc:	781b      	ldrb	r3, [r3, #0]
   115fe:	3301      	adds	r3, #1
   11600:	b2da      	uxtb	r2, r3
   11602:	f64a 5347 	movw	r3, #44359	; 0xad47
   11606:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1160a:	701a      	strb	r2, [r3, #0]
   1160c:	e06c      	b.n	116e8 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN2)
   1160e:	f64a 5347 	movw	r3, #44359	; 0xad47
   11612:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11616:	781b      	ldrb	r3, [r3, #0]
   11618:	2b06      	cmp	r3, #6
   1161a:	d131      	bne.n	11680 <parse_ubx+0x26c>
  {
    ubx_msg_buf[ubx_msg_idx] = c;
   1161c:	f64a 534a 	movw	r3, #44362	; 0xad4a
   11620:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11624:	781b      	ldrb	r3, [r3, #0]
   11626:	461a      	mov	r2, r3
   11628:	f64a 4348 	movw	r3, #44104	; 0xac48
   1162c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11630:	79f9      	ldrb	r1, [r7, #7]
   11632:	5499      	strb	r1, [r3, r2]
    ubx_msg_idx++;
   11634:	f64a 534a 	movw	r3, #44362	; 0xad4a
   11638:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1163c:	781b      	ldrb	r3, [r3, #0]
   1163e:	3301      	adds	r3, #1
   11640:	b2da      	uxtb	r2, r3
   11642:	f64a 534a 	movw	r3, #44362	; 0xad4a
   11646:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1164a:	701a      	strb	r2, [r3, #0]
    if (ubx_msg_idx >= ubx_len) {
   1164c:	f64a 534a 	movw	r3, #44362	; 0xad4a
   11650:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11654:	781b      	ldrb	r3, [r3, #0]
   11656:	461a      	mov	r2, r3
   11658:	f64a 5348 	movw	r3, #44360	; 0xad48
   1165c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11660:	881b      	ldrh	r3, [r3, #0]
   11662:	429a      	cmp	r2, r3
   11664:	d340      	bcc.n	116e8 <parse_ubx+0x2d4>
      ubx_status++;
   11666:	f64a 5347 	movw	r3, #44359	; 0xad47
   1166a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1166e:	781b      	ldrb	r3, [r3, #0]
   11670:	3301      	adds	r3, #1
   11672:	b2da      	uxtb	r2, r3
   11674:	f64a 5347 	movw	r3, #44359	; 0xad47
   11678:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1167c:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   1167e:	e03b      	b.n	116f8 <parse_ubx+0x2e4>
    ubx_msg_idx++;
    if (ubx_msg_idx >= ubx_len) {
      ubx_status++;
    }
  }
  else if (ubx_status == GOT_PAYLOAD)
   11680:	f64a 5347 	movw	r3, #44359	; 0xad47
   11684:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11688:	781b      	ldrb	r3, [r3, #0]
   1168a:	2b07      	cmp	r3, #7
   1168c:	d115      	bne.n	116ba <parse_ubx+0x2a6>
  {
    if (c != ck_a)
   1168e:	f64a 534b 	movw	r3, #44363	; 0xad4b
   11692:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11696:	781b      	ldrb	r3, [r3, #0]
   11698:	79fa      	ldrb	r2, [r7, #7]
   1169a:	429a      	cmp	r2, r3
   1169c:	d000      	beq.n	116a0 <parse_ubx+0x28c>
      goto error;
   1169e:	e024      	b.n	116ea <parse_ubx+0x2d6>
    ubx_status++;
   116a0:	f64a 5347 	movw	r3, #44359	; 0xad47
   116a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116a8:	781b      	ldrb	r3, [r3, #0]
   116aa:	3301      	adds	r3, #1
   116ac:	b2da      	uxtb	r2, r3
   116ae:	f64a 5347 	movw	r3, #44359	; 0xad47
   116b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116b6:	701a      	strb	r2, [r3, #0]
   116b8:	e016      	b.n	116e8 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CHECKSUM1)
   116ba:	f64a 5347 	movw	r3, #44359	; 0xad47
   116be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116c2:	781b      	ldrb	r3, [r3, #0]
   116c4:	2b08      	cmp	r3, #8
   116c6:	d10f      	bne.n	116e8 <parse_ubx+0x2d4>
  {
    if (c != ck_b)
   116c8:	f64a 534c 	movw	r3, #44364	; 0xad4c
   116cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116d0:	781b      	ldrb	r3, [r3, #0]
   116d2:	79fa      	ldrb	r2, [r7, #7]
   116d4:	429a      	cmp	r2, r3
   116d6:	d000      	beq.n	116da <parse_ubx+0x2c6>
      goto error;
   116d8:	e007      	b.n	116ea <parse_ubx+0x2d6>
    gps_msg_received = TRUE;
   116da:	f64a 4345 	movw	r3, #44101	; 0xac45
   116de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116e2:	2201      	movs	r2, #1
   116e4:	701a      	strb	r2, [r3, #0]
    goto restart;
   116e6:	e000      	b.n	116ea <parse_ubx+0x2d6>
  }
  else {}
//#endif
  return;
   116e8:	e006      	b.n	116f8 <parse_ubx+0x2e4>
 error:  
 restart:
  ubx_status = UNINIT;
   116ea:	f64a 5347 	movw	r3, #44359	; 0xad47
   116ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116f2:	2200      	movs	r2, #0
   116f4:	701a      	strb	r2, [r3, #0]
  return;
   116f6:	bf00      	nop
}
   116f8:	370c      	adds	r7, #12
   116fa:	46bd      	mov	sp, r7
   116fc:	f85d 7b04 	ldr.w	r7, [sp], #4
   11700:	4770      	bx	lr
   11702:	bf00      	nop

00011704 <__vector_30>:

#ifdef SIMUL
ReceiveUart0(parse_ubx);
#else
ReceiveUart1(parse_ubx);
   11704:	b580      	push	{r7, lr}
   11706:	b082      	sub	sp, #8
   11708:	af00      	add	r7, sp, #0
   1170a:	f242 039c 	movw	r3, #8348	; 0x209c
   1170e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11712:	781b      	ldrb	r3, [r3, #0]
   11714:	71fb      	strb	r3, [r7, #7]
   11716:	79fb      	ldrb	r3, [r7, #7]
   11718:	4618      	mov	r0, r3
   1171a:	f7ff fe7b 	bl	11414 <parse_ubx>
   1171e:	3708      	adds	r7, #8
   11720:	46bd      	mov	sp, r7
   11722:	bd80      	pop	{r7, pc}
   11724:	f3af 8000 	nop.w

00011728 <ir_init>:
float ir_rad_of_ir = IR_RAD_OF_IR_CONTRAST / IR_DEFAULT_CONTRAST;

static struct adc_buf buf_ir1;
static struct adc_buf buf_ir2;

void ir_init(void) {
   11728:	b580      	push	{r7, lr}
   1172a:	af00      	add	r7, sp, #0
  RadOfIrFromConstrast(IR_DEFAULT_CONTRAST);
   1172c:	f240 238c 	movw	r3, #652	; 0x28c
   11730:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11734:	f24c 228f 	movw	r2, #49807	; 0xc28f
   11738:	f6c3 3275 	movt	r2, #15221	; 0x3b75
   1173c:	601a      	str	r2, [r3, #0]
  adc_buf_channel(ADC_CHANNEL_IR1, &buf_ir1);
   1173e:	2001      	movs	r0, #1
   11740:	f64a 5154 	movw	r1, #44372	; 0xad54
   11744:	f2c2 0100 	movt	r1, #8192	; 0x2000
   11748:	f7ff fc82 	bl	11050 <adc_buf_channel>
  adc_buf_channel(ADC_CHANNEL_IR2, &buf_ir2);
   1174c:	2002      	movs	r0, #2
   1174e:	f64a 5198 	movw	r1, #44440	; 0xad98
   11752:	f2c2 0100 	movt	r1, #8192	; 0x2000
   11756:	f7ff fc7b 	bl	11050 <adc_buf_channel>
}
   1175a:	bd80      	pop	{r7, pc}

0001175c <ir_update>:
int16_t x1 = 1;
int16_t x2 = 2;
*/
// end

void ir_update(void) {
   1175c:	b480      	push	{r7}
   1175e:	b083      	sub	sp, #12
   11760:	af00      	add	r7, sp, #0
#ifndef SIMUL
  int16_t x1_mean = buf_ir1.sum/AV_NB_SAMPLE;
   11762:	f64a 5354 	movw	r3, #44372	; 0xad54
   11766:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1176a:	881b      	ldrh	r3, [r3, #0]
   1176c:	095b      	lsrs	r3, r3, #5
   1176e:	b29b      	uxth	r3, r3
   11770:	80fb      	strh	r3, [r7, #6]
  int16_t x2_mean = buf_ir2.sum/AV_NB_SAMPLE;
   11772:	f64a 5398 	movw	r3, #44440	; 0xad98
   11776:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1177a:	881b      	ldrh	r3, [r3, #0]
   1177c:	095b      	lsrs	r3, r3, #5
   1177e:	b29b      	uxth	r3, r3
   11780:	80bb      	strh	r3, [r7, #4]
    if( x1 < -900 ) x1 = x2 % x1;
    x2_mean = x2 ++;
    if( x2 > 110 ) x2 = x1 % x2;
    */
    // end
  ir_roll = IR_RollOfIrs(x1_mean, x2_mean) - ir_roll_neutral;
   11782:	88fb      	ldrh	r3, [r7, #6]
   11784:	425b      	negs	r3, r3
   11786:	b29a      	uxth	r2, r3
   11788:	88bb      	ldrh	r3, [r7, #4]
   1178a:	1ad3      	subs	r3, r2, r3
   1178c:	b29a      	uxth	r2, r3
   1178e:	f240 2386 	movw	r3, #646	; 0x286
   11792:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11796:	881b      	ldrh	r3, [r3, #0]
   11798:	b29b      	uxth	r3, r3
   1179a:	1ad3      	subs	r3, r2, r3
   1179c:	b29b      	uxth	r3, r3
   1179e:	b29a      	uxth	r2, r3
   117a0:	f64a 5350 	movw	r3, #44368	; 0xad50
   117a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117a8:	801a      	strh	r2, [r3, #0]
  ir_pitch = IR_PitchOfIrs(x1_mean, x2_mean) - ir_pitch_neutral;
   117aa:	88ba      	ldrh	r2, [r7, #4]
   117ac:	88fb      	ldrh	r3, [r7, #6]
   117ae:	1ad3      	subs	r3, r2, r3
   117b0:	b29a      	uxth	r2, r3
   117b2:	f240 2388 	movw	r3, #648	; 0x288
   117b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117ba:	881b      	ldrh	r3, [r3, #0]
   117bc:	b29b      	uxth	r3, r3
   117be:	1ad3      	subs	r3, r2, r3
   117c0:	b29b      	uxth	r3, r3
   117c2:	b29a      	uxth	r2, r3
   117c4:	f64a 5352 	movw	r3, #44370	; 0xad52
   117c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117cc:	801a      	strh	r2, [r3, #0]
#else
  extern volatile int16_t simul_ir_roll, simul_ir_pitch;
  ir_roll = simul_ir_roll -  ir_roll_neutral; 
  ir_pitch = simul_ir_pitch - ir_pitch_neutral;  
#endif
}
   117ce:	370c      	adds	r7, #12
   117d0:	46bd      	mov	sp, r7
   117d2:	f85d 7b04 	ldr.w	r7, [sp], #4
   117d6:	4770      	bx	lr

000117d8 <ir_gain_calib>:

/* 
   Contrast measurement
*/

void ir_gain_calib(void) {      // Plane nose down
   117d8:	b580      	push	{r7, lr}
   117da:	af00      	add	r7, sp, #0
  /* plane nose down -> negativ value */
  ir_contrast = - ir_pitch;
   117dc:	f64a 5352 	movw	r3, #44370	; 0xad52
   117e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117e4:	881b      	ldrh	r3, [r3, #0]
   117e6:	b29b      	uxth	r3, r3
   117e8:	425b      	negs	r3, r3
   117ea:	b29b      	uxth	r3, r3
   117ec:	b29a      	uxth	r2, r3
   117ee:	f240 2384 	movw	r3, #644	; 0x284
   117f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117f6:	801a      	strh	r2, [r3, #0]
  RadOfIrFromConstrast(ir_contrast);
   117f8:	f240 2384 	movw	r3, #644	; 0x284
   117fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11800:	881b      	ldrh	r3, [r3, #0]
   11802:	b21b      	sxth	r3, r3
   11804:	4618      	mov	r0, r3
   11806:	f006 f875 	bl	178f4 <__aeabi_i2d>
   1180a:	4602      	mov	r2, r0
   1180c:	460b      	mov	r3, r1
   1180e:	f04f 0000 	mov.w	r0, #0
   11812:	f04f 0100 	mov.w	r1, #0
   11816:	f6c3 71e8 	movt	r1, #16360	; 0x3fe8
   1181a:	f006 f9fb 	bl	17c14 <__aeabi_ddiv>
   1181e:	4602      	mov	r2, r0
   11820:	460b      	mov	r3, r1
   11822:	4610      	mov	r0, r2
   11824:	4619      	mov	r1, r3
   11826:	f006 fbad 	bl	17f84 <__aeabi_d2f>
   1182a:	4602      	mov	r2, r0
   1182c:	f240 238c 	movw	r3, #652	; 0x28c
   11830:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11834:	601a      	str	r2, [r3, #0]
}
   11836:	bd80      	pop	{r7, pc}

00011838 <roll_pitch_pid_run>:
float pitch_of_vz_pgain = CLIMB_PITCH_OF_VZ_PGAIN;
float pitch_of_vz = 0.;


/** \brief Computes ::desired_aileron and ::desired_elevator from attitude estimation and expected attitude. */
void roll_pitch_pid_run( void ) {
   11838:	b590      	push	{r4, r7, lr}
   1183a:	b083      	sub	sp, #12
   1183c:	af00      	add	r7, sp, #0
  float err =  estimator_phi - desired_roll;
   1183e:	f24b 0370 	movw	r3, #45168	; 0xb070
   11842:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11846:	681a      	ldr	r2, [r3, #0]
   11848:	f64a 53dc 	movw	r3, #44508	; 0xaddc
   1184c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11850:	681b      	ldr	r3, [r3, #0]
   11852:	4610      	mov	r0, r2
   11854:	4619      	mov	r1, r3
   11856:	f006 fbe9 	bl	1802c <__aeabi_fsub>
   1185a:	4603      	mov	r3, r0
   1185c:	607b      	str	r3, [r7, #4]
  desired_aileron = TRIM_PPRZ(roll_pgain * err);
   1185e:	f240 2390 	movw	r3, #656	; 0x290
   11862:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11866:	681b      	ldr	r3, [r3, #0]
   11868:	4618      	mov	r0, r3
   1186a:	6879      	ldr	r1, [r7, #4]
   1186c:	f006 fce8 	bl	18240 <__aeabi_fmul>
   11870:	4603      	mov	r3, r0
   11872:	4618      	mov	r0, r3
   11874:	f04f 0100 	mov.w	r1, #0
   11878:	f2cc 6116 	movt	r1, #50710	; 0xc616
   1187c:	f006 fe7e 	bl	1857c <__aeabi_fcmplt>
   11880:	4603      	mov	r3, r0
   11882:	2b00      	cmp	r3, #0
   11884:	d002      	beq.n	1188c <roll_pitch_pid_run+0x54>
   11886:	f64d 2280 	movw	r2, #55936	; 0xda80
   1188a:	e026      	b.n	118da <roll_pitch_pid_run+0xa2>
   1188c:	f240 2390 	movw	r3, #656	; 0x290
   11890:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11894:	681b      	ldr	r3, [r3, #0]
   11896:	4618      	mov	r0, r3
   11898:	6879      	ldr	r1, [r7, #4]
   1189a:	f006 fcd1 	bl	18240 <__aeabi_fmul>
   1189e:	4603      	mov	r3, r0
   118a0:	4618      	mov	r0, r3
   118a2:	f04f 0100 	mov.w	r1, #0
   118a6:	f2c4 6116 	movt	r1, #17942	; 0x4616
   118aa:	f006 fe85 	bl	185b8 <__aeabi_fcmpgt>
   118ae:	4603      	mov	r3, r0
   118b0:	2b00      	cmp	r3, #0
   118b2:	d002      	beq.n	118ba <roll_pitch_pid_run+0x82>
   118b4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   118b8:	e00e      	b.n	118d8 <roll_pitch_pid_run+0xa0>
   118ba:	f240 2390 	movw	r3, #656	; 0x290
   118be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118c2:	681b      	ldr	r3, [r3, #0]
   118c4:	4618      	mov	r0, r3
   118c6:	6879      	ldr	r1, [r7, #4]
   118c8:	f006 fcba 	bl	18240 <__aeabi_fmul>
   118cc:	4603      	mov	r3, r0
   118ce:	4618      	mov	r0, r3
   118d0:	f006 fe7c 	bl	185cc <__aeabi_f2iz>
   118d4:	4603      	mov	r3, r0
   118d6:	b29b      	uxth	r3, r3
   118d8:	b29a      	uxth	r2, r3
   118da:	f64a 53e6 	movw	r3, #44518	; 0xade6
   118de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118e2:	801a      	strh	r2, [r3, #0]
  if (pitch_of_roll <0.)
   118e4:	f64a 53ec 	movw	r3, #44524	; 0xadec
   118e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118ec:	681b      	ldr	r3, [r3, #0]
   118ee:	4618      	mov	r0, r3
   118f0:	f04f 0100 	mov.w	r1, #0
   118f4:	f006 fe42 	bl	1857c <__aeabi_fcmplt>
   118f8:	4603      	mov	r3, r0
   118fa:	2b00      	cmp	r3, #0
   118fc:	d006      	beq.n	1190c <roll_pitch_pid_run+0xd4>
    pitch_of_roll = 0.;
   118fe:	f64a 53ec 	movw	r3, #44524	; 0xadec
   11902:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11906:	f04f 0200 	mov.w	r2, #0
   1190a:	601a      	str	r2, [r3, #0]
  err = -(estimator_theta - desired_pitch - pitch_of_roll * fabs(estimator_phi));
   1190c:	f24b 0378 	movw	r3, #45176	; 0xb078
   11910:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11914:	681a      	ldr	r2, [r3, #0]
   11916:	f64a 53e0 	movw	r3, #44512	; 0xade0
   1191a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1191e:	681b      	ldr	r3, [r3, #0]
   11920:	4610      	mov	r0, r2
   11922:	4619      	mov	r1, r3
   11924:	f006 fb82 	bl	1802c <__aeabi_fsub>
   11928:	4603      	mov	r3, r0
   1192a:	461c      	mov	r4, r3
   1192c:	f24b 0370 	movw	r3, #45168	; 0xb070
   11930:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11934:	681b      	ldr	r3, [r3, #0]
   11936:	4618      	mov	r0, r3
   11938:	f04f 0100 	mov.w	r1, #0
   1193c:	f006 fe1e 	bl	1857c <__aeabi_fcmplt>
   11940:	4603      	mov	r3, r0
   11942:	2b00      	cmp	r3, #0
   11944:	d007      	beq.n	11956 <roll_pitch_pid_run+0x11e>
   11946:	f24b 0370 	movw	r3, #45168	; 0xb070
   1194a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1194e:	681b      	ldr	r3, [r3, #0]
   11950:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11954:	e004      	b.n	11960 <roll_pitch_pid_run+0x128>
   11956:	f24b 0370 	movw	r3, #45168	; 0xb070
   1195a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1195e:	681a      	ldr	r2, [r3, #0]
   11960:	f64a 53ec 	movw	r3, #44524	; 0xadec
   11964:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11968:	681b      	ldr	r3, [r3, #0]
   1196a:	4610      	mov	r0, r2
   1196c:	4619      	mov	r1, r3
   1196e:	f006 fc67 	bl	18240 <__aeabi_fmul>
   11972:	4603      	mov	r3, r0
   11974:	4620      	mov	r0, r4
   11976:	4619      	mov	r1, r3
   11978:	f006 fb58 	bl	1802c <__aeabi_fsub>
   1197c:	4603      	mov	r3, r0
   1197e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   11982:	607b      	str	r3, [r7, #4]
  desired_elevator = TRIM_PPRZ(pitch_pgain * err);
   11984:	f240 2394 	movw	r3, #660	; 0x294
   11988:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1198c:	681b      	ldr	r3, [r3, #0]
   1198e:	4618      	mov	r0, r3
   11990:	6879      	ldr	r1, [r7, #4]
   11992:	f006 fc55 	bl	18240 <__aeabi_fmul>
   11996:	4603      	mov	r3, r0
   11998:	4618      	mov	r0, r3
   1199a:	f04f 0100 	mov.w	r1, #0
   1199e:	f2cc 6116 	movt	r1, #50710	; 0xc616
   119a2:	f006 fdeb 	bl	1857c <__aeabi_fcmplt>
   119a6:	4603      	mov	r3, r0
   119a8:	2b00      	cmp	r3, #0
   119aa:	d002      	beq.n	119b2 <roll_pitch_pid_run+0x17a>
   119ac:	f64d 2280 	movw	r2, #55936	; 0xda80
   119b0:	e026      	b.n	11a00 <roll_pitch_pid_run+0x1c8>
   119b2:	f240 2394 	movw	r3, #660	; 0x294
   119b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119ba:	681b      	ldr	r3, [r3, #0]
   119bc:	4618      	mov	r0, r3
   119be:	6879      	ldr	r1, [r7, #4]
   119c0:	f006 fc3e 	bl	18240 <__aeabi_fmul>
   119c4:	4603      	mov	r3, r0
   119c6:	4618      	mov	r0, r3
   119c8:	f04f 0100 	mov.w	r1, #0
   119cc:	f2c4 6116 	movt	r1, #17942	; 0x4616
   119d0:	f006 fdf2 	bl	185b8 <__aeabi_fcmpgt>
   119d4:	4603      	mov	r3, r0
   119d6:	2b00      	cmp	r3, #0
   119d8:	d002      	beq.n	119e0 <roll_pitch_pid_run+0x1a8>
   119da:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   119de:	e00e      	b.n	119fe <roll_pitch_pid_run+0x1c6>
   119e0:	f240 2394 	movw	r3, #660	; 0x294
   119e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119e8:	681b      	ldr	r3, [r3, #0]
   119ea:	4618      	mov	r0, r3
   119ec:	6879      	ldr	r1, [r7, #4]
   119ee:	f006 fc27 	bl	18240 <__aeabi_fmul>
   119f2:	4603      	mov	r3, r0
   119f4:	4618      	mov	r0, r3
   119f6:	f006 fde9 	bl	185cc <__aeabi_f2iz>
   119fa:	4603      	mov	r3, r0
   119fc:	b29b      	uxth	r3, r3
   119fe:	b29a      	uxth	r2, r3
   11a00:	f64a 53e8 	movw	r3, #44520	; 0xade8
   11a04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a08:	801a      	strh	r2, [r3, #0]
}
   11a0a:	370c      	adds	r7, #12
   11a0c:	46bd      	mov	sp, r7
   11a0e:	bd90      	pop	{r4, r7, pc}

00011a10 <course_pid_run>:

float course_pgain = COURSE_PGAIN;
float desired_course = 0.;
float max_roll = MAX_ROLL;

void course_pid_run( void ) {
   11a10:	b580      	push	{r7, lr}
   11a12:	b082      	sub	sp, #8
   11a14:	af00      	add	r7, sp, #0
  float err = estimator_hspeed_dir - desired_course;
   11a16:	f24b 03a0 	movw	r3, #45216	; 0xb0a0
   11a1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a1e:	681a      	ldr	r2, [r3, #0]
   11a20:	f64a 53f4 	movw	r3, #44532	; 0xadf4
   11a24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a28:	681b      	ldr	r3, [r3, #0]
   11a2a:	4610      	mov	r0, r2
   11a2c:	4619      	mov	r1, r3
   11a2e:	f006 fafd 	bl	1802c <__aeabi_fsub>
   11a32:	4603      	mov	r3, r0
   11a34:	607b      	str	r3, [r7, #4]
  NORM_RAD_ANGLE(err);
   11a36:	e013      	b.n	11a60 <course_pid_run+0x50>
   11a38:	6878      	ldr	r0, [r7, #4]
   11a3a:	f005 ff6d 	bl	17918 <__aeabi_f2d>
   11a3e:	4602      	mov	r2, r0
   11a40:	460b      	mov	r3, r1
   11a42:	4610      	mov	r0, r2
   11a44:	4619      	mov	r1, r3
   11a46:	a348      	add	r3, pc, #288	; (adr r3, 11b68 <course_pid_run+0x158>)
   11a48:	e9d3 2300 	ldrd	r2, r3, [r3]
   11a4c:	f005 fe04 	bl	17658 <__aeabi_dsub>
   11a50:	4602      	mov	r2, r0
   11a52:	460b      	mov	r3, r1
   11a54:	4610      	mov	r0, r2
   11a56:	4619      	mov	r1, r3
   11a58:	f006 fa94 	bl	17f84 <__aeabi_d2f>
   11a5c:	4603      	mov	r3, r0
   11a5e:	607b      	str	r3, [r7, #4]
   11a60:	6878      	ldr	r0, [r7, #4]
   11a62:	f005 ff59 	bl	17918 <__aeabi_f2d>
   11a66:	4602      	mov	r2, r0
   11a68:	460b      	mov	r3, r1
   11a6a:	4610      	mov	r0, r2
   11a6c:	4619      	mov	r1, r3
   11a6e:	a340      	add	r3, pc, #256	; (adr r3, 11b70 <course_pid_run+0x160>)
   11a70:	e9d3 2300 	ldrd	r2, r3, [r3]
   11a74:	f006 fa34 	bl	17ee0 <__aeabi_dcmpgt>
   11a78:	4603      	mov	r3, r0
   11a7a:	2b00      	cmp	r3, #0
   11a7c:	d1dc      	bne.n	11a38 <course_pid_run+0x28>
   11a7e:	e013      	b.n	11aa8 <course_pid_run+0x98>
   11a80:	6878      	ldr	r0, [r7, #4]
   11a82:	f005 ff49 	bl	17918 <__aeabi_f2d>
   11a86:	4602      	mov	r2, r0
   11a88:	460b      	mov	r3, r1
   11a8a:	4610      	mov	r0, r2
   11a8c:	4619      	mov	r1, r3
   11a8e:	a336      	add	r3, pc, #216	; (adr r3, 11b68 <course_pid_run+0x158>)
   11a90:	e9d3 2300 	ldrd	r2, r3, [r3]
   11a94:	f005 fde2 	bl	1765c <__adddf3>
   11a98:	4602      	mov	r2, r0
   11a9a:	460b      	mov	r3, r1
   11a9c:	4610      	mov	r0, r2
   11a9e:	4619      	mov	r1, r3
   11aa0:	f006 fa70 	bl	17f84 <__aeabi_d2f>
   11aa4:	4603      	mov	r3, r0
   11aa6:	607b      	str	r3, [r7, #4]
   11aa8:	6878      	ldr	r0, [r7, #4]
   11aaa:	f005 ff35 	bl	17918 <__aeabi_f2d>
   11aae:	4602      	mov	r2, r0
   11ab0:	460b      	mov	r3, r1
   11ab2:	4610      	mov	r0, r2
   11ab4:	4619      	mov	r1, r3
   11ab6:	a330      	add	r3, pc, #192	; (adr r3, 11b78 <course_pid_run+0x168>)
   11ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
   11abc:	f006 f9f2 	bl	17ea4 <__aeabi_dcmplt>
   11ac0:	4603      	mov	r3, r0
   11ac2:	2b00      	cmp	r3, #0
   11ac4:	d1dc      	bne.n	11a80 <course_pid_run+0x70>
  nav_desired_roll = course_pgain * err; //  * fspeed / AIR_SPEED;
   11ac6:	f240 239c 	movw	r3, #668	; 0x29c
   11aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ace:	681b      	ldr	r3, [r3, #0]
   11ad0:	4618      	mov	r0, r3
   11ad2:	6879      	ldr	r1, [r7, #4]
   11ad4:	f006 fbb4 	bl	18240 <__aeabi_fmul>
   11ad8:	4603      	mov	r3, r0
   11ada:	461a      	mov	r2, r3
   11adc:	f64a 6338 	movw	r3, #44600	; 0xae38
   11ae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ae4:	601a      	str	r2, [r3, #0]
  if (nav_desired_roll > max_roll)
   11ae6:	f64a 6338 	movw	r3, #44600	; 0xae38
   11aea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11aee:	681a      	ldr	r2, [r3, #0]
   11af0:	f240 23a0 	movw	r3, #672	; 0x2a0
   11af4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11af8:	681b      	ldr	r3, [r3, #0]
   11afa:	4610      	mov	r0, r2
   11afc:	4619      	mov	r1, r3
   11afe:	f006 fd5b 	bl	185b8 <__aeabi_fcmpgt>
   11b02:	4603      	mov	r3, r0
   11b04:	2b00      	cmp	r3, #0
   11b06:	d00a      	beq.n	11b1e <course_pid_run+0x10e>
    nav_desired_roll = max_roll;
   11b08:	f240 23a0 	movw	r3, #672	; 0x2a0
   11b0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b10:	681a      	ldr	r2, [r3, #0]
   11b12:	f64a 6338 	movw	r3, #44600	; 0xae38
   11b16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b1a:	601a      	str	r2, [r3, #0]
   11b1c:	e01e      	b.n	11b5c <course_pid_run+0x14c>
  else if (nav_desired_roll < -max_roll)
   11b1e:	f240 23a0 	movw	r3, #672	; 0x2a0
   11b22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b26:	681b      	ldr	r3, [r3, #0]
   11b28:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11b2c:	f64a 6338 	movw	r3, #44600	; 0xae38
   11b30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b34:	681b      	ldr	r3, [r3, #0]
   11b36:	4610      	mov	r0, r2
   11b38:	4619      	mov	r1, r3
   11b3a:	f006 fd3d 	bl	185b8 <__aeabi_fcmpgt>
   11b3e:	4603      	mov	r3, r0
   11b40:	2b00      	cmp	r3, #0
   11b42:	d00b      	beq.n	11b5c <course_pid_run+0x14c>
    nav_desired_roll = -max_roll;
   11b44:	f240 23a0 	movw	r3, #672	; 0x2a0
   11b48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b4c:	681b      	ldr	r3, [r3, #0]
   11b4e:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11b52:	f64a 6338 	movw	r3, #44600	; 0xae38
   11b56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b5a:	601a      	str	r2, [r3, #0]
}
   11b5c:	3708      	adds	r7, #8
   11b5e:	46bd      	mov	sp, r7
   11b60:	bd80      	pop	{r7, pc}
   11b62:	bf00      	nop
   11b64:	f3af 8000 	nop.w
   11b68:	54442d18 	.word	0x54442d18
   11b6c:	401921fb 	.word	0x401921fb
   11b70:	54442d18 	.word	0x54442d18
   11b74:	400921fb 	.word	0x400921fb
   11b78:	54442d18 	.word	0x54442d18
   11b7c:	c00921fb 	.word	0xc00921fb

00011b80 <climb_pid_run>:

#define MAX_CLIMB_SUM_ERR 100
#define MAX_PITCH_CLIMB_SUM_ERR 100

/** \brief Computes desired_gaz and desired_pitch from desired_climb */
void climb_pid_run ( void ) {
   11b80:	b5b0      	push	{r4, r5, r7, lr}
   11b82:	b082      	sub	sp, #8
   11b84:	af00      	add	r7, sp, #0
  float err  = estimator_z_dot - desired_climb;
   11b86:	f24b 0384 	movw	r3, #45188	; 0xb084
   11b8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b8e:	681a      	ldr	r2, [r3, #0]
   11b90:	f64a 53f8 	movw	r3, #44536	; 0xadf8
   11b94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b98:	681b      	ldr	r3, [r3, #0]
   11b9a:	4610      	mov	r0, r2
   11b9c:	4619      	mov	r1, r3
   11b9e:	f006 fa45 	bl	1802c <__aeabi_fsub>
   11ba2:	4603      	mov	r3, r0
   11ba4:	607b      	str	r3, [r7, #4]
  float fgaz;
  if (auto_pitch) { /* gaz constant */
   11ba6:	f64a 2397 	movw	r3, #43671	; 0xaa97
   11baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bae:	781b      	ldrb	r3, [r3, #0]
   11bb0:	2b00      	cmp	r3, #0
   11bb2:	f000 80a8 	beq.w	11d06 <climb_pid_run+0x186>
    desired_gaz = nav_desired_gaz;
   11bb6:	f64a 6330 	movw	r3, #44592	; 0xae30
   11bba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bbe:	881b      	ldrh	r3, [r3, #0]
   11bc0:	b29a      	uxth	r2, r3
   11bc2:	f64a 53e4 	movw	r3, #44516	; 0xade4
   11bc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bca:	801a      	strh	r2, [r3, #0]
    desired_pitch = climb_pitch_pgain * (err + climb_pitch_igain * climb_pitch_sum_err);
   11bcc:	f240 23a8 	movw	r3, #680	; 0x2a8
   11bd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bd4:	681a      	ldr	r2, [r3, #0]
   11bd6:	f64a 6304 	movw	r3, #44548	; 0xae04
   11bda:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bde:	681b      	ldr	r3, [r3, #0]
   11be0:	4610      	mov	r0, r2
   11be2:	4619      	mov	r1, r3
   11be4:	f006 fb2c 	bl	18240 <__aeabi_fmul>
   11be8:	4603      	mov	r3, r0
   11bea:	4618      	mov	r0, r3
   11bec:	6879      	ldr	r1, [r7, #4]
   11bee:	f006 fa1f 	bl	18030 <__addsf3>
   11bf2:	4603      	mov	r3, r0
   11bf4:	461a      	mov	r2, r3
   11bf6:	f240 23a4 	movw	r3, #676	; 0x2a4
   11bfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bfe:	681b      	ldr	r3, [r3, #0]
   11c00:	4610      	mov	r0, r2
   11c02:	4619      	mov	r1, r3
   11c04:	f006 fb1c 	bl	18240 <__aeabi_fmul>
   11c08:	4603      	mov	r3, r0
   11c0a:	461a      	mov	r2, r3
   11c0c:	f64a 53e0 	movw	r3, #44512	; 0xade0
   11c10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c14:	601a      	str	r2, [r3, #0]
    if (desired_pitch > max_pitch)
   11c16:	f64a 53e0 	movw	r3, #44512	; 0xade0
   11c1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c1e:	681a      	ldr	r2, [r3, #0]
   11c20:	f240 23ac 	movw	r3, #684	; 0x2ac
   11c24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c28:	681b      	ldr	r3, [r3, #0]
   11c2a:	4610      	mov	r0, r2
   11c2c:	4619      	mov	r1, r3
   11c2e:	f006 fcc3 	bl	185b8 <__aeabi_fcmpgt>
   11c32:	4603      	mov	r3, r0
   11c34:	2b00      	cmp	r3, #0
   11c36:	d009      	beq.n	11c4c <climb_pid_run+0xcc>
      desired_pitch = max_pitch;
   11c38:	f240 23ac 	movw	r3, #684	; 0x2ac
   11c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c40:	681a      	ldr	r2, [r3, #0]
   11c42:	f64a 53e0 	movw	r3, #44512	; 0xade0
   11c46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c4a:	601a      	str	r2, [r3, #0]
    if (desired_pitch < min_pitch)
   11c4c:	f64a 53e0 	movw	r3, #44512	; 0xade0
   11c50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c54:	681a      	ldr	r2, [r3, #0]
   11c56:	f240 23b0 	movw	r3, #688	; 0x2b0
   11c5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c5e:	681b      	ldr	r3, [r3, #0]
   11c60:	4610      	mov	r0, r2
   11c62:	4619      	mov	r1, r3
   11c64:	f006 fc8a 	bl	1857c <__aeabi_fcmplt>
   11c68:	4603      	mov	r3, r0
   11c6a:	2b00      	cmp	r3, #0
   11c6c:	d009      	beq.n	11c82 <climb_pid_run+0x102>
      desired_pitch = min_pitch;
   11c6e:	f240 23b0 	movw	r3, #688	; 0x2b0
   11c72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c76:	681a      	ldr	r2, [r3, #0]
   11c78:	f64a 53e0 	movw	r3, #44512	; 0xade0
   11c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c80:	601a      	str	r2, [r3, #0]
    climb_pitch_sum_err += err;
   11c82:	f64a 6304 	movw	r3, #44548	; 0xae04
   11c86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c8a:	681b      	ldr	r3, [r3, #0]
   11c8c:	4618      	mov	r0, r3
   11c8e:	6879      	ldr	r1, [r7, #4]
   11c90:	f006 f9ce 	bl	18030 <__addsf3>
   11c94:	4603      	mov	r3, r0
   11c96:	461a      	mov	r2, r3
   11c98:	f64a 6304 	movw	r3, #44548	; 0xae04
   11c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ca0:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err > MAX_PITCH_CLIMB_SUM_ERR)
   11ca2:	f64a 6304 	movw	r3, #44548	; 0xae04
   11ca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11caa:	681b      	ldr	r3, [r3, #0]
   11cac:	4618      	mov	r0, r3
   11cae:	f04f 0100 	mov.w	r1, #0
   11cb2:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   11cb6:	f006 fc7f 	bl	185b8 <__aeabi_fcmpgt>
   11cba:	4603      	mov	r3, r0
   11cbc:	2b00      	cmp	r3, #0
   11cbe:	d008      	beq.n	11cd2 <climb_pid_run+0x152>
      climb_pitch_sum_err = MAX_PITCH_CLIMB_SUM_ERR;
   11cc0:	f64a 6304 	movw	r3, #44548	; 0xae04
   11cc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cc8:	f04f 0200 	mov.w	r2, #0
   11ccc:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   11cd0:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err < - MAX_PITCH_CLIMB_SUM_ERR)
   11cd2:	f64a 6304 	movw	r3, #44548	; 0xae04
   11cd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cda:	681b      	ldr	r3, [r3, #0]
   11cdc:	4618      	mov	r0, r3
   11cde:	f04f 0100 	mov.w	r1, #0
   11ce2:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   11ce6:	f006 fc49 	bl	1857c <__aeabi_fcmplt>
   11cea:	4603      	mov	r3, r0
   11cec:	2b00      	cmp	r3, #0
   11cee:	d100      	bne.n	11cf2 <climb_pid_run+0x172>
   11cf0:	e109      	b.n	11f06 <climb_pid_run+0x386>
      climb_pitch_sum_err = - MAX_PITCH_CLIMB_SUM_ERR; 
   11cf2:	f64a 6304 	movw	r3, #44548	; 0xae04
   11cf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cfa:	f04f 0200 	mov.w	r2, #0
   11cfe:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   11d02:	601a      	str	r2, [r3, #0]
   11d04:	e0ff      	b.n	11f06 <climb_pid_run+0x386>
  } else { /* pitch almost constant */
    /* pitch offset for climb */
    pitch_of_vz = (desired_climb > 0) ? desired_climb * pitch_of_vz_pgain : 0.;
   11d06:	f64a 53f8 	movw	r3, #44536	; 0xadf8
   11d0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d0e:	681b      	ldr	r3, [r3, #0]
   11d10:	4618      	mov	r0, r3
   11d12:	f04f 0100 	mov.w	r1, #0
   11d16:	f006 fc4f 	bl	185b8 <__aeabi_fcmpgt>
   11d1a:	4603      	mov	r3, r0
   11d1c:	2b00      	cmp	r3, #0
   11d1e:	d010      	beq.n	11d42 <climb_pid_run+0x1c2>
   11d20:	f64a 53f8 	movw	r3, #44536	; 0xadf8
   11d24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d28:	681a      	ldr	r2, [r3, #0]
   11d2a:	f240 2398 	movw	r3, #664	; 0x298
   11d2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d32:	681b      	ldr	r3, [r3, #0]
   11d34:	4610      	mov	r0, r2
   11d36:	4619      	mov	r1, r3
   11d38:	f006 fa82 	bl	18240 <__aeabi_fmul>
   11d3c:	4603      	mov	r3, r0
   11d3e:	461a      	mov	r2, r3
   11d40:	e001      	b.n	11d46 <climb_pid_run+0x1c6>
   11d42:	f04f 0200 	mov.w	r2, #0
   11d46:	f64a 53f0 	movw	r3, #44528	; 0xadf0
   11d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d4e:	601a      	str	r2, [r3, #0]
    fgaz = climb_pgain * (err + climb_igain * climb_sum_err) + CLIMB_LEVEL_GAZ + CLIMB_GAZ_OF_CLIMB*desired_climb;
   11d50:	f64c 42cd 	movw	r2, #52429	; 0xcccd
   11d54:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
   11d58:	f64a 6300 	movw	r3, #44544	; 0xae00
   11d5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d60:	681b      	ldr	r3, [r3, #0]
   11d62:	4610      	mov	r0, r2
   11d64:	4619      	mov	r1, r3
   11d66:	f006 fa6b 	bl	18240 <__aeabi_fmul>
   11d6a:	4603      	mov	r3, r0
   11d6c:	4618      	mov	r0, r3
   11d6e:	6879      	ldr	r1, [r7, #4]
   11d70:	f006 f95e 	bl	18030 <__addsf3>
   11d74:	4603      	mov	r3, r0
   11d76:	461a      	mov	r2, r3
   11d78:	f24c 238f 	movw	r3, #49807	; 0xc28f
   11d7c:	f6cb 43f5 	movt	r3, #48373	; 0xbcf5
   11d80:	4610      	mov	r0, r2
   11d82:	4619      	mov	r1, r3
   11d84:	f006 fa5c 	bl	18240 <__aeabi_fmul>
   11d88:	4603      	mov	r3, r0
   11d8a:	4618      	mov	r0, r3
   11d8c:	f005 fdc4 	bl	17918 <__aeabi_f2d>
   11d90:	4602      	mov	r2, r0
   11d92:	460b      	mov	r3, r1
   11d94:	4610      	mov	r0, r2
   11d96:	4619      	mov	r1, r3
   11d98:	a35d      	add	r3, pc, #372	; (adr r3, 11f10 <climb_pid_run+0x390>)
   11d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   11d9e:	f005 fc5d 	bl	1765c <__adddf3>
   11da2:	4602      	mov	r2, r0
   11da4:	460b      	mov	r3, r1
   11da6:	4614      	mov	r4, r2
   11da8:	461d      	mov	r5, r3
   11daa:	f64a 53f8 	movw	r3, #44536	; 0xadf8
   11dae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11db2:	681b      	ldr	r3, [r3, #0]
   11db4:	4618      	mov	r0, r3
   11db6:	f005 fdaf 	bl	17918 <__aeabi_f2d>
   11dba:	4602      	mov	r2, r0
   11dbc:	460b      	mov	r3, r1
   11dbe:	4610      	mov	r0, r2
   11dc0:	4619      	mov	r1, r3
   11dc2:	a355      	add	r3, pc, #340	; (adr r3, 11f18 <climb_pid_run+0x398>)
   11dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   11dc8:	f005 fdfa 	bl	179c0 <__aeabi_dmul>
   11dcc:	4602      	mov	r2, r0
   11dce:	460b      	mov	r3, r1
   11dd0:	4620      	mov	r0, r4
   11dd2:	4629      	mov	r1, r5
   11dd4:	f005 fc42 	bl	1765c <__adddf3>
   11dd8:	4602      	mov	r2, r0
   11dda:	460b      	mov	r3, r1
   11ddc:	4610      	mov	r0, r2
   11dde:	4619      	mov	r1, r3
   11de0:	f006 f8d0 	bl	17f84 <__aeabi_d2f>
   11de4:	4603      	mov	r3, r0
   11de6:	603b      	str	r3, [r7, #0]
    climb_sum_err += err;
   11de8:	f64a 6300 	movw	r3, #44544	; 0xae00
   11dec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11df0:	681b      	ldr	r3, [r3, #0]
   11df2:	4618      	mov	r0, r3
   11df4:	6879      	ldr	r1, [r7, #4]
   11df6:	f006 f91b 	bl	18030 <__addsf3>
   11dfa:	4603      	mov	r3, r0
   11dfc:	461a      	mov	r2, r3
   11dfe:	f64a 6300 	movw	r3, #44544	; 0xae00
   11e02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e06:	601a      	str	r2, [r3, #0]
    if (climb_sum_err > MAX_CLIMB_SUM_ERR) climb_sum_err = MAX_CLIMB_SUM_ERR;
   11e08:	f64a 6300 	movw	r3, #44544	; 0xae00
   11e0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e10:	681b      	ldr	r3, [r3, #0]
   11e12:	4618      	mov	r0, r3
   11e14:	f04f 0100 	mov.w	r1, #0
   11e18:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   11e1c:	f006 fbcc 	bl	185b8 <__aeabi_fcmpgt>
   11e20:	4603      	mov	r3, r0
   11e22:	2b00      	cmp	r3, #0
   11e24:	d008      	beq.n	11e38 <climb_pid_run+0x2b8>
   11e26:	f64a 6300 	movw	r3, #44544	; 0xae00
   11e2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e2e:	f04f 0200 	mov.w	r2, #0
   11e32:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   11e36:	601a      	str	r2, [r3, #0]
    if (climb_sum_err < - MAX_CLIMB_SUM_ERR) climb_sum_err = - MAX_CLIMB_SUM_ERR;
   11e38:	f64a 6300 	movw	r3, #44544	; 0xae00
   11e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e40:	681b      	ldr	r3, [r3, #0]
   11e42:	4618      	mov	r0, r3
   11e44:	f04f 0100 	mov.w	r1, #0
   11e48:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   11e4c:	f006 fb96 	bl	1857c <__aeabi_fcmplt>
   11e50:	4603      	mov	r3, r0
   11e52:	2b00      	cmp	r3, #0
   11e54:	d008      	beq.n	11e68 <climb_pid_run+0x2e8>
   11e56:	f64a 6300 	movw	r3, #44544	; 0xae00
   11e5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e5e:	f04f 0200 	mov.w	r2, #0
   11e62:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   11e66:	601a      	str	r2, [r3, #0]
    desired_gaz = TRIM_UPPRZ(fgaz * MAX_PPRZ);
   11e68:	6838      	ldr	r0, [r7, #0]
   11e6a:	f04f 0100 	mov.w	r1, #0
   11e6e:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11e72:	f006 f9e5 	bl	18240 <__aeabi_fmul>
   11e76:	4603      	mov	r3, r0
   11e78:	4618      	mov	r0, r3
   11e7a:	f04f 0100 	mov.w	r1, #0
   11e7e:	f006 fb7d 	bl	1857c <__aeabi_fcmplt>
   11e82:	4603      	mov	r3, r0
   11e84:	2b00      	cmp	r3, #0
   11e86:	d001      	beq.n	11e8c <climb_pid_run+0x30c>
   11e88:	2200      	movs	r2, #0
   11e8a:	e022      	b.n	11ed2 <climb_pid_run+0x352>
   11e8c:	6838      	ldr	r0, [r7, #0]
   11e8e:	f04f 0100 	mov.w	r1, #0
   11e92:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11e96:	f006 f9d3 	bl	18240 <__aeabi_fmul>
   11e9a:	4603      	mov	r3, r0
   11e9c:	4618      	mov	r0, r3
   11e9e:	f04f 0100 	mov.w	r1, #0
   11ea2:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11ea6:	f006 fb87 	bl	185b8 <__aeabi_fcmpgt>
   11eaa:	4603      	mov	r3, r0
   11eac:	2b00      	cmp	r3, #0
   11eae:	d002      	beq.n	11eb6 <climb_pid_run+0x336>
   11eb0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11eb4:	e00c      	b.n	11ed0 <climb_pid_run+0x350>
   11eb6:	6838      	ldr	r0, [r7, #0]
   11eb8:	f04f 0100 	mov.w	r1, #0
   11ebc:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11ec0:	f006 f9be 	bl	18240 <__aeabi_fmul>
   11ec4:	4603      	mov	r3, r0
   11ec6:	4618      	mov	r0, r3
   11ec8:	f006 fb80 	bl	185cc <__aeabi_f2iz>
   11ecc:	4603      	mov	r3, r0
   11ece:	b29b      	uxth	r3, r3
   11ed0:	b29a      	uxth	r2, r3
   11ed2:	f64a 53e4 	movw	r3, #44516	; 0xade4
   11ed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11eda:	801a      	strh	r2, [r3, #0]
    desired_pitch = nav_pitch + pitch_of_vz;
   11edc:	f64a 6334 	movw	r3, #44596	; 0xae34
   11ee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ee4:	681a      	ldr	r2, [r3, #0]
   11ee6:	f64a 53f0 	movw	r3, #44528	; 0xadf0
   11eea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11eee:	681b      	ldr	r3, [r3, #0]
   11ef0:	4610      	mov	r0, r2
   11ef2:	4619      	mov	r1, r3
   11ef4:	f006 f89c 	bl	18030 <__addsf3>
   11ef8:	4603      	mov	r3, r0
   11efa:	461a      	mov	r2, r3
   11efc:	f64a 53e0 	movw	r3, #44512	; 0xade0
   11f00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f04:	601a      	str	r2, [r3, #0]
  }
}
   11f06:	3708      	adds	r7, #8
   11f08:	46bd      	mov	sp, r7
   11f0a:	bdb0      	pop	{r4, r5, r7, pc}
   11f0c:	f3af 8000 	nop.w
   11f10:	3d70a3d7 	.word	0x3d70a3d7
   11f14:	3fd3d70a 	.word	0x3fd3d70a
   11f18:	9999999a 	.word	0x9999999a
   11f1c:	3fc99999 	.word	0x3fc99999

00011f20 <altitude_pid_run>:

float altitude_pgain = ALTITUDE_PGAIN;


void altitude_pid_run(void) {
   11f20:	b580      	push	{r7, lr}
   11f22:	b082      	sub	sp, #8
   11f24:	af00      	add	r7, sp, #0
  float err = estimator_z - desired_altitude;
   11f26:	f24b 036c 	movw	r3, #45164	; 0xb06c
   11f2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f2e:	681a      	ldr	r2, [r3, #0]
   11f30:	f240 23b8 	movw	r3, #696	; 0x2b8
   11f34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f38:	681b      	ldr	r3, [r3, #0]
   11f3a:	4610      	mov	r0, r2
   11f3c:	4619      	mov	r1, r3
   11f3e:	f006 f875 	bl	1802c <__aeabi_fsub>
   11f42:	4603      	mov	r3, r0
   11f44:	607b      	str	r3, [r7, #4]
  desired_climb = pre_climb + altitude_pgain * err;
   11f46:	f240 23b4 	movw	r3, #692	; 0x2b4
   11f4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f4e:	681b      	ldr	r3, [r3, #0]
   11f50:	4618      	mov	r0, r3
   11f52:	6879      	ldr	r1, [r7, #4]
   11f54:	f006 f974 	bl	18240 <__aeabi_fmul>
   11f58:	4603      	mov	r3, r0
   11f5a:	461a      	mov	r2, r3
   11f5c:	f64a 53fc 	movw	r3, #44540	; 0xadfc
   11f60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f64:	681b      	ldr	r3, [r3, #0]
   11f66:	4610      	mov	r0, r2
   11f68:	4619      	mov	r1, r3
   11f6a:	f006 f861 	bl	18030 <__addsf3>
   11f6e:	4603      	mov	r3, r0
   11f70:	461a      	mov	r2, r3
   11f72:	f64a 53f8 	movw	r3, #44536	; 0xadf8
   11f76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f7a:	601a      	str	r2, [r3, #0]
  if (desired_climb < -CLIMB_MAX) desired_climb = -CLIMB_MAX;
   11f7c:	f64a 53f8 	movw	r3, #44536	; 0xadf8
   11f80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f84:	681b      	ldr	r3, [r3, #0]
   11f86:	4618      	mov	r0, r3
   11f88:	f04f 0100 	mov.w	r1, #0
   11f8c:	f6cb 7180 	movt	r1, #49024	; 0xbf80
   11f90:	f006 faf4 	bl	1857c <__aeabi_fcmplt>
   11f94:	4603      	mov	r3, r0
   11f96:	2b00      	cmp	r3, #0
   11f98:	d008      	beq.n	11fac <altitude_pid_run+0x8c>
   11f9a:	f64a 53f8 	movw	r3, #44536	; 0xadf8
   11f9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fa2:	f04f 0200 	mov.w	r2, #0
   11fa6:	f6cb 7280 	movt	r2, #49024	; 0xbf80
   11faa:	601a      	str	r2, [r3, #0]
  if (desired_climb > CLIMB_MAX) desired_climb = CLIMB_MAX;
   11fac:	f64a 53f8 	movw	r3, #44536	; 0xadf8
   11fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fb4:	681b      	ldr	r3, [r3, #0]
   11fb6:	4618      	mov	r0, r3
   11fb8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   11fbc:	f006 fafc 	bl	185b8 <__aeabi_fcmpgt>
   11fc0:	4603      	mov	r3, r0
   11fc2:	2b00      	cmp	r3, #0
   11fc4:	d006      	beq.n	11fd4 <altitude_pid_run+0xb4>
   11fc6:	f64a 53f8 	movw	r3, #44536	; 0xadf8
   11fca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   11fd2:	601a      	str	r2, [r3, #0]
}
   11fd4:	3708      	adds	r7, #8
   11fd6:	46bd      	mov	sp, r7
   11fd8:	bd80      	pop	{r7, pc}
   11fda:	bf00      	nop
   11fdc:	f3af 8000 	nop.w

00011fe0 <auto_nav>:
#define GROUND_ALT 125.
#define SECURITY_ALT 150.
#define MAX_DIST_FROM_HOME 500.
#ifdef NAV_C

static inline void auto_nav(void) {
   11fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
   11fe2:	b08b      	sub	sp, #44	; 0x2c
   11fe4:	af00      	add	r7, sp, #0
        NextBlock()
    }

}
#else*/
if(nav_block == 0)
   11fe6:	f64a 6309 	movw	r3, #44553	; 0xae09
   11fea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fee:	781b      	ldrb	r3, [r3, #0]
   11ff0:	2b00      	cmp	r3, #0
   11ff2:	f040 8169 	bne.w	122c8 <auto_nav+0x2e8>
{ // init
    
    if (nav_stage == 0) 
   11ff6:	f64a 6308 	movw	r3, #44552	; 0xae08
   11ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ffe:	781b      	ldrb	r3, [r3, #0]
   12000:	2b00      	cmp	r3, #0
   12002:	d13c      	bne.n	1207e <auto_nav+0x9e>
    {
	Label(while_1)
	nav_stage=0;
   12004:	f64a 6308 	movw	r3, #44552	; 0xae08
   12008:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1200c:	2200      	movs	r2, #0
   1200e:	701a      	strb	r2, [r3, #0]
	if (! (!(estimator_flight_time))) Goto(endwhile_2) 
   12010:	f24b 0394 	movw	r3, #45204	; 0xb094
   12014:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12018:	881b      	ldrh	r3, [r3, #0]
   1201a:	2b00      	cmp	r3, #0
   1201c:	d000      	beq.n	12020 <auto_nav+0x40>
   1201e:	e03d      	b.n	1209c <auto_nav+0xbc>
	else NextStage(); 
   12020:	f64a 6308 	movw	r3, #44552	; 0xae08
   12024:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12028:	781b      	ldrb	r3, [r3, #0]
   1202a:	3301      	adds	r3, #1
   1202c:	b2da      	uxtb	r2, r3
   1202e:	f64a 6308 	movw	r3, #44552	; 0xae08
   12032:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12036:	701a      	strb	r2, [r3, #0]
   12038:	f24b 0364 	movw	r3, #45156	; 0xb064
   1203c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12040:	681a      	ldr	r2, [r3, #0]
   12042:	f64a 630c 	movw	r3, #44556	; 0xae0c
   12046:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1204a:	601a      	str	r2, [r3, #0]
   1204c:	f24b 0368 	movw	r3, #45160	; 0xb068
   12050:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12054:	681a      	ldr	r2, [r3, #0]
   12056:	f64a 6310 	movw	r3, #44560	; 0xae10
   1205a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1205e:	601a      	str	r2, [r3, #0]
   12060:	f64a 631c 	movw	r3, #44572	; 0xae1c
   12064:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12068:	2200      	movs	r2, #0
   1206a:	801a      	strh	r2, [r3, #0]
   1206c:	f64a 6320 	movw	r3, #44576	; 0xae20
   12070:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12074:	f04f 0200 	mov.w	r2, #0
   12078:	601a      	str	r2, [r3, #0]
   1207a:	f002 b883 	b.w	14184 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   1207e:	f64a 6308 	movw	r3, #44552	; 0xae08
   12082:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12086:	781b      	ldrb	r3, [r3, #0]
   12088:	2b01      	cmp	r3, #1
   1208a:	d100      	bne.n	1208e <auto_nav+0xae>
    {   Goto(while_1)}
   1208c:	e7ba      	b.n	12004 <auto_nav+0x24>
    else if (nav_stage == 2)
   1208e:	f64a 6308 	movw	r3, #44552	; 0xae08
   12092:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12096:	781b      	ldrb	r3, [r3, #0]
   12098:	2b02      	cmp	r3, #2
   1209a:	d162      	bne.n	12162 <auto_nav+0x182>
    {
	Label(endwhile_2)
	nav_stage = 2;
   1209c:	f64a 6308 	movw	r3, #44552	; 0xae08
   120a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120a4:	2202      	movs	r2, #2
   120a6:	701a      	strb	r2, [r3, #0]
        if ((estimator_flight_time>8)) NextStage() else {
   120a8:	f24b 0394 	movw	r3, #45204	; 0xb094
   120ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120b0:	881b      	ldrh	r3, [r3, #0]
   120b2:	2b08      	cmp	r3, #8
   120b4:	d92e      	bls.n	12114 <auto_nav+0x134>
   120b6:	f64a 6308 	movw	r3, #44552	; 0xae08
   120ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120be:	781b      	ldrb	r3, [r3, #0]
   120c0:	3301      	adds	r3, #1
   120c2:	b2da      	uxtb	r2, r3
   120c4:	f64a 6308 	movw	r3, #44552	; 0xae08
   120c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120cc:	701a      	strb	r2, [r3, #0]
   120ce:	f24b 0364 	movw	r3, #45156	; 0xb064
   120d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120d6:	681a      	ldr	r2, [r3, #0]
   120d8:	f64a 630c 	movw	r3, #44556	; 0xae0c
   120dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120e0:	601a      	str	r2, [r3, #0]
   120e2:	f24b 0368 	movw	r3, #45160	; 0xb068
   120e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120ea:	681a      	ldr	r2, [r3, #0]
   120ec:	f64a 6310 	movw	r3, #44560	; 0xae10
   120f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120f4:	601a      	str	r2, [r3, #0]
   120f6:	f64a 631c 	movw	r3, #44572	; 0xae1c
   120fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120fe:	2200      	movs	r2, #0
   12100:	801a      	strh	r2, [r3, #0]
   12102:	f64a 6320 	movw	r3, #44576	; 0xae20
   12106:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1210a:	f04f 0200 	mov.w	r2, #0
   1210e:	601a      	str	r2, [r3, #0]
   12110:	f002 b838 	b.w	14184 <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   12114:	f64a 53f4 	movw	r3, #44532	; 0xadf4
   12118:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1211c:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   12120:	f2c4 0296 	movt	r2, #16534	; 0x4096
   12124:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   12126:	f64a 2397 	movw	r3, #43671	; 0xaa97
   1212a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1212e:	2200      	movs	r2, #0
   12130:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.150000;
   12132:	f64a 6334 	movw	r3, #44596	; 0xae34
   12136:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1213a:	f649 129a 	movw	r2, #39322	; 0x999a
   1213e:	f6c3 6219 	movt	r2, #15897	; 0x3e19
   12142:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_GAZ;
   12144:	f64a 2395 	movw	r3, #43669	; 0xaa95
   12148:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1214c:	2201      	movs	r2, #1
   1214e:	701a      	strb	r2, [r3, #0]
          nav_desired_gaz = TRIM_UPPRZ(0.800000*MAX_PPRZ);
   12150:	f64a 6330 	movw	r3, #44592	; 0xae30
   12154:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12158:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
   1215c:	801a      	strh	r2, [r3, #0]
        }
        return;
   1215e:	f002 b811 	b.w	14184 <auto_nav+0x21a4>
     }
     else if (nav_stage == 3)
   12162:	f64a 6308 	movw	r3, #44552	; 0xae08
   12166:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1216a:	781b      	ldrb	r3, [r3, #0]
   1216c:	2b03      	cmp	r3, #3
   1216e:	d168      	bne.n	12242 <auto_nav+0x262>
     {
	nav_stage = 3;	
   12170:	f64a 6308 	movw	r3, #44552	; 0xae08
   12174:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12178:	2203      	movs	r2, #3
   1217a:	701a      	strb	r2, [r3, #0]
        if ((estimator_z>SECURITY_ALT)) NextStage() else {
   1217c:	f24b 036c 	movw	r3, #45164	; 0xb06c
   12180:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12184:	681b      	ldr	r3, [r3, #0]
   12186:	4618      	mov	r0, r3
   12188:	f04f 0100 	mov.w	r1, #0
   1218c:	f2c4 3116 	movt	r1, #17174	; 0x4316
   12190:	f006 fa12 	bl	185b8 <__aeabi_fcmpgt>
   12194:	4603      	mov	r3, r0
   12196:	2b00      	cmp	r3, #0
   12198:	d02e      	beq.n	121f8 <auto_nav+0x218>
   1219a:	f64a 6308 	movw	r3, #44552	; 0xae08
   1219e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121a2:	781b      	ldrb	r3, [r3, #0]
   121a4:	3301      	adds	r3, #1
   121a6:	b2da      	uxtb	r2, r3
   121a8:	f64a 6308 	movw	r3, #44552	; 0xae08
   121ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121b0:	701a      	strb	r2, [r3, #0]
   121b2:	f24b 0364 	movw	r3, #45156	; 0xb064
   121b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121ba:	681a      	ldr	r2, [r3, #0]
   121bc:	f64a 630c 	movw	r3, #44556	; 0xae0c
   121c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121c4:	601a      	str	r2, [r3, #0]
   121c6:	f24b 0368 	movw	r3, #45160	; 0xb068
   121ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121ce:	681a      	ldr	r2, [r3, #0]
   121d0:	f64a 6310 	movw	r3, #44560	; 0xae10
   121d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121d8:	601a      	str	r2, [r3, #0]
   121da:	f64a 631c 	movw	r3, #44572	; 0xae1c
   121de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121e2:	2200      	movs	r2, #0
   121e4:	801a      	strh	r2, [r3, #0]
   121e6:	f64a 6320 	movw	r3, #44576	; 0xae20
   121ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121ee:	f04f 0200 	mov.w	r2, #0
   121f2:	601a      	str	r2, [r3, #0]
   121f4:	f001 bfc6 	b.w	14184 <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   121f8:	f64a 53f4 	movw	r3, #44532	; 0xadf4
   121fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12200:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   12204:	f2c4 0296 	movt	r2, #16534	; 0x4096
   12208:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   1220a:	f64a 2397 	movw	r3, #43671	; 0xaa97
   1220e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12212:	2200      	movs	r2, #0
   12214:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   12216:	f64a 6334 	movw	r3, #44596	; 0xae34
   1221a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1221e:	f04f 0200 	mov.w	r2, #0
   12222:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_CLIMB;
   12224:	f64a 2395 	movw	r3, #43669	; 0xaa95
   12228:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1222c:	2202      	movs	r2, #2
   1222e:	701a      	strb	r2, [r3, #0]
          desired_climb = 8.000000;
   12230:	f64a 53f8 	movw	r3, #44536	; 0xadf8
   12234:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12238:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   1223c:	601a      	str	r2, [r3, #0]
        }
        return;
   1223e:	f001 bfa1 	b.w	14184 <auto_nav+0x21a4>
     }
     else if (nav_stage == 4)
   12242:	f64a 6308 	movw	r3, #44552	; 0xae08
   12246:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1224a:	781b      	ldrb	r3, [r3, #0]
   1224c:	2b04      	cmp	r3, #4
   1224e:	f041 8799 	bne.w	14184 <auto_nav+0x21a4>
        NextBlock()
   12252:	f64a 6309 	movw	r3, #44553	; 0xae09
   12256:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1225a:	781b      	ldrb	r3, [r3, #0]
   1225c:	3301      	adds	r3, #1
   1225e:	b2da      	uxtb	r2, r3
   12260:	f64a 6309 	movw	r3, #44553	; 0xae09
   12264:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12268:	701a      	strb	r2, [r3, #0]
   1226a:	f64a 6308 	movw	r3, #44552	; 0xae08
   1226e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12272:	2200      	movs	r2, #0
   12274:	701a      	strb	r2, [r3, #0]
   12276:	f64a 631e 	movw	r3, #44574	; 0xae1e
   1227a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1227e:	2200      	movs	r2, #0
   12280:	801a      	strh	r2, [r3, #0]
   12282:	f24b 0364 	movw	r3, #45156	; 0xb064
   12286:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1228a:	681a      	ldr	r2, [r3, #0]
   1228c:	f64a 630c 	movw	r3, #44556	; 0xae0c
   12290:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12294:	601a      	str	r2, [r3, #0]
   12296:	f24b 0368 	movw	r3, #45160	; 0xb068
   1229a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1229e:	681a      	ldr	r2, [r3, #0]
   122a0:	f64a 6310 	movw	r3, #44560	; 0xae10
   122a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122a8:	601a      	str	r2, [r3, #0]
   122aa:	f64a 631c 	movw	r3, #44572	; 0xae1c
   122ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122b2:	2200      	movs	r2, #0
   122b4:	801a      	strh	r2, [r3, #0]
   122b6:	f64a 6320 	movw	r3, #44576	; 0xae20
   122ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122be:	f04f 0200 	mov.w	r2, #0
   122c2:	601a      	str	r2, [r3, #0]
   122c4:	f001 bf5e 	b.w	14184 <auto_nav+0x21a4>
     else { }
}
else if (nav_block == 1) // two
   122c8:	f64a 6309 	movw	r3, #44553	; 0xae09
   122cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122d0:	781b      	ldrb	r3, [r3, #0]
   122d2:	2b01      	cmp	r3, #1
   122d4:	f040 81bc 	bne.w	12650 <auto_nav+0x670>
{
    nav_block = 1;
   122d8:	f64a 6309 	movw	r3, #44553	; 0xae09
   122dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122e0:	2201      	movs	r2, #1
   122e2:	701a      	strb	r2, [r3, #0]
    if RcEvent1() 
   122e4:	f64a 2398 	movw	r3, #43672	; 0xaa98
   122e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122ec:	781b      	ldrb	r3, [r3, #0]
   122ee:	2b00      	cmp	r3, #0
   122f0:	d007      	beq.n	12302 <auto_nav+0x322>
   122f2:	f64a 2398 	movw	r3, #43672	; 0xaa98
   122f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122fa:	2200      	movs	r2, #0
   122fc:	701a      	strb	r2, [r3, #0]
   122fe:	2301      	movs	r3, #1
   12300:	e000      	b.n	12304 <auto_nav+0x324>
   12302:	2300      	movs	r3, #0
   12304:	2b00      	cmp	r3, #0
   12306:	d034      	beq.n	12372 <auto_nav+0x392>
	{ GotoBlock(2) }
   12308:	f64a 6309 	movw	r3, #44553	; 0xae09
   1230c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12310:	2202      	movs	r2, #2
   12312:	701a      	strb	r2, [r3, #0]
   12314:	f64a 6308 	movw	r3, #44552	; 0xae08
   12318:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1231c:	2200      	movs	r2, #0
   1231e:	701a      	strb	r2, [r3, #0]
   12320:	f64a 631e 	movw	r3, #44574	; 0xae1e
   12324:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12328:	2200      	movs	r2, #0
   1232a:	801a      	strh	r2, [r3, #0]
   1232c:	f24b 0364 	movw	r3, #45156	; 0xb064
   12330:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12334:	681a      	ldr	r2, [r3, #0]
   12336:	f64a 630c 	movw	r3, #44556	; 0xae0c
   1233a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1233e:	601a      	str	r2, [r3, #0]
   12340:	f24b 0368 	movw	r3, #45160	; 0xb068
   12344:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12348:	681a      	ldr	r2, [r3, #0]
   1234a:	f64a 6310 	movw	r3, #44560	; 0xae10
   1234e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12352:	601a      	str	r2, [r3, #0]
   12354:	f64a 631c 	movw	r3, #44572	; 0xae1c
   12358:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1235c:	2200      	movs	r2, #0
   1235e:	801a      	strh	r2, [r3, #0]
   12360:	f64a 6320 	movw	r3, #44576	; 0xae20
   12364:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12368:	f04f 0200 	mov.w	r2, #0
   1236c:	601a      	str	r2, [r3, #0]
   1236e:	f001 bf09 	b.w	14184 <auto_nav+0x21a4>
    if(nav_stage == 0)
   12372:	f64a 6308 	movw	r3, #44552	; 0xae08
   12376:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1237a:	781b      	ldrb	r3, [r3, #0]
   1237c:	2b00      	cmp	r3, #0
   1237e:	d12e      	bne.n	123de <auto_nav+0x3fe>
    {
       Label(while_3)
       if (! (TRUE)) Goto(endwhile_4) else NextStage();
   12380:	f64a 6308 	movw	r3, #44552	; 0xae08
   12384:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12388:	781b      	ldrb	r3, [r3, #0]
   1238a:	3301      	adds	r3, #1
   1238c:	b2da      	uxtb	r2, r3
   1238e:	f64a 6308 	movw	r3, #44552	; 0xae08
   12392:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12396:	701a      	strb	r2, [r3, #0]
   12398:	f24b 0364 	movw	r3, #45156	; 0xb064
   1239c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123a0:	681a      	ldr	r2, [r3, #0]
   123a2:	f64a 630c 	movw	r3, #44556	; 0xae0c
   123a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123aa:	601a      	str	r2, [r3, #0]
   123ac:	f24b 0368 	movw	r3, #45160	; 0xb068
   123b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123b4:	681a      	ldr	r2, [r3, #0]
   123b6:	f64a 6310 	movw	r3, #44560	; 0xae10
   123ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123be:	601a      	str	r2, [r3, #0]
   123c0:	f64a 631c 	movw	r3, #44572	; 0xae1c
   123c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123c8:	2200      	movs	r2, #0
   123ca:	801a      	strh	r2, [r3, #0]
   123cc:	f64a 6320 	movw	r3, #44576	; 0xae20
   123d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123d4:	f04f 0200 	mov.w	r2, #0
   123d8:	601a      	str	r2, [r3, #0]
   123da:	f001 bed3 	b.w	14184 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   123de:	f64a 6308 	movw	r3, #44552	; 0xae08
   123e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123e6:	781b      	ldrb	r3, [r3, #0]
   123e8:	2b01      	cmp	r3, #1
   123ea:	d169      	bne.n	124c0 <auto_nav+0x4e0>
    {
	  nav_stage = 1;
   123ec:	f64a 6308 	movw	r3, #44552	; 0xae08
   123f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123f4:	2201      	movs	r2, #1
   123f6:	701a      	strb	r2, [r3, #0]
          if (approaching(1)) NextStageFrom(1) else {
   123f8:	2001      	movs	r0, #1
   123fa:	f001 fed1 	bl	141a0 <approaching>
   123fe:	4603      	mov	r3, r0
   12400:	2b00      	cmp	r3, #0
   12402:	d034      	beq.n	1246e <auto_nav+0x48e>
   12404:	f64a 6314 	movw	r3, #44564	; 0xae14
   12408:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1240c:	2201      	movs	r2, #1
   1240e:	701a      	strb	r2, [r3, #0]
   12410:	f64a 6308 	movw	r3, #44552	; 0xae08
   12414:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12418:	781b      	ldrb	r3, [r3, #0]
   1241a:	3301      	adds	r3, #1
   1241c:	b2da      	uxtb	r2, r3
   1241e:	f64a 6308 	movw	r3, #44552	; 0xae08
   12422:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12426:	701a      	strb	r2, [r3, #0]
   12428:	f24b 0364 	movw	r3, #45156	; 0xb064
   1242c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12430:	681a      	ldr	r2, [r3, #0]
   12432:	f64a 630c 	movw	r3, #44556	; 0xae0c
   12436:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1243a:	601a      	str	r2, [r3, #0]
   1243c:	f24b 0368 	movw	r3, #45160	; 0xb068
   12440:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12444:	681a      	ldr	r2, [r3, #0]
   12446:	f64a 6310 	movw	r3, #44560	; 0xae10
   1244a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1244e:	601a      	str	r2, [r3, #0]
   12450:	f64a 631c 	movw	r3, #44572	; 0xae1c
   12454:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12458:	2200      	movs	r2, #0
   1245a:	801a      	strh	r2, [r3, #0]
   1245c:	f64a 6320 	movw	r3, #44576	; 0xae20
   12460:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12464:	f04f 0200 	mov.w	r2, #0
   12468:	601a      	str	r2, [r3, #0]
   1246a:	f001 be8b 	b.w	14184 <auto_nav+0x21a4>
            fly_to(1);
   1246e:	2001      	movs	r0, #1
   12470:	f001 ffca 	bl	14408 <fly_to>
            auto_pitch = FALSE;
   12474:	f64a 2397 	movw	r3, #43671	; 0xaa97
   12478:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1247c:	2200      	movs	r2, #0
   1247e:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12480:	f64a 6334 	movw	r3, #44596	; 0xae34
   12484:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12488:	f04f 0200 	mov.w	r2, #0
   1248c:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1248e:	f64a 2395 	movw	r3, #43669	; 0xaa95
   12492:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12496:	2203      	movs	r2, #3
   12498:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   1249a:	f240 23bc 	movw	r3, #700	; 0x2bc
   1249e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124a2:	695a      	ldr	r2, [r3, #20]
   124a4:	f240 23b8 	movw	r3, #696	; 0x2b8
   124a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124ac:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   124ae:	f64a 53fc 	movw	r3, #44540	; 0xadfc
   124b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124b6:	f04f 0200 	mov.w	r2, #0
   124ba:	601a      	str	r2, [r3, #0]
          }
          return;
   124bc:	f001 be62 	b.w	14184 <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   124c0:	f64a 6308 	movw	r3, #44552	; 0xae08
   124c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124c8:	781b      	ldrb	r3, [r3, #0]
   124ca:	2b02      	cmp	r3, #2
   124cc:	d169      	bne.n	125a2 <auto_nav+0x5c2>
     {
	  nav_stage = 2;
   124ce:	f64a 6308 	movw	r3, #44552	; 0xae08
   124d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124d6:	2202      	movs	r2, #2
   124d8:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   124da:	2004      	movs	r0, #4
   124dc:	f001 fe60 	bl	141a0 <approaching>
   124e0:	4603      	mov	r3, r0
   124e2:	2b00      	cmp	r3, #0
   124e4:	d034      	beq.n	12550 <auto_nav+0x570>
   124e6:	f64a 6314 	movw	r3, #44564	; 0xae14
   124ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124ee:	2204      	movs	r2, #4
   124f0:	701a      	strb	r2, [r3, #0]
   124f2:	f64a 6308 	movw	r3, #44552	; 0xae08
   124f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124fa:	781b      	ldrb	r3, [r3, #0]
   124fc:	3301      	adds	r3, #1
   124fe:	b2da      	uxtb	r2, r3
   12500:	f64a 6308 	movw	r3, #44552	; 0xae08
   12504:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12508:	701a      	strb	r2, [r3, #0]
   1250a:	f24b 0364 	movw	r3, #45156	; 0xb064
   1250e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12512:	681a      	ldr	r2, [r3, #0]
   12514:	f64a 630c 	movw	r3, #44556	; 0xae0c
   12518:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1251c:	601a      	str	r2, [r3, #0]
   1251e:	f24b 0368 	movw	r3, #45160	; 0xb068
   12522:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12526:	681a      	ldr	r2, [r3, #0]
   12528:	f64a 6310 	movw	r3, #44560	; 0xae10
   1252c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12530:	601a      	str	r2, [r3, #0]
   12532:	f64a 631c 	movw	r3, #44572	; 0xae1c
   12536:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1253a:	2200      	movs	r2, #0
   1253c:	801a      	strh	r2, [r3, #0]
   1253e:	f64a 6320 	movw	r3, #44576	; 0xae20
   12542:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12546:	f04f 0200 	mov.w	r2, #0
   1254a:	601a      	str	r2, [r3, #0]
   1254c:	f001 be1a 	b.w	14184 <auto_nav+0x21a4>
            fly_to(4);
   12550:	2004      	movs	r0, #4
   12552:	f001 ff59 	bl	14408 <fly_to>
            auto_pitch = FALSE;
   12556:	f64a 2397 	movw	r3, #43671	; 0xaa97
   1255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1255e:	2200      	movs	r2, #0
   12560:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12562:	f64a 6334 	movw	r3, #44596	; 0xae34
   12566:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1256a:	f04f 0200 	mov.w	r2, #0
   1256e:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12570:	f64a 2395 	movw	r3, #43669	; 0xaa95
   12574:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12578:	2203      	movs	r2, #3
   1257a:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   1257c:	f240 23bc 	movw	r3, #700	; 0x2bc
   12580:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12584:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   12586:	f240 23b8 	movw	r3, #696	; 0x2b8
   1258a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1258e:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12590:	f64a 53fc 	movw	r3, #44540	; 0xadfc
   12594:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12598:	f04f 0200 	mov.w	r2, #0
   1259c:	601a      	str	r2, [r3, #0]
          }
          return;
   1259e:	f001 bdf1 	b.w	14184 <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   125a2:	f64a 6308 	movw	r3, #44552	; 0xae08
   125a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125aa:	781b      	ldrb	r3, [r3, #0]
   125ac:	2b03      	cmp	r3, #3
   125ae:	d106      	bne.n	125be <auto_nav+0x5de>
      {
	  nav_stage = 3;
   125b0:	f64a 6308 	movw	r3, #44552	; 0xae08
   125b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125b8:	2203      	movs	r2, #3
   125ba:	701a      	strb	r2, [r3, #0]
          Goto(while_3)
   125bc:	e6e0      	b.n	12380 <auto_nav+0x3a0>
      }
      else if (nav_stage == 4)
   125be:	f64a 6308 	movw	r3, #44552	; 0xae08
   125c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125c6:	781b      	ldrb	r3, [r3, #0]
   125c8:	2b04      	cmp	r3, #4
   125ca:	f041 85db 	bne.w	14184 <auto_nav+0x21a4>
      {
        Label(endwhile_4)
	nav_stage = 4;
   125ce:	f64a 6308 	movw	r3, #44552	; 0xae08
   125d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125d6:	2204      	movs	r2, #4
   125d8:	701a      	strb	r2, [r3, #0]
        NextBlock()
   125da:	f64a 6309 	movw	r3, #44553	; 0xae09
   125de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125e2:	781b      	ldrb	r3, [r3, #0]
   125e4:	3301      	adds	r3, #1
   125e6:	b2da      	uxtb	r2, r3
   125e8:	f64a 6309 	movw	r3, #44553	; 0xae09
   125ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125f0:	701a      	strb	r2, [r3, #0]
   125f2:	f64a 6308 	movw	r3, #44552	; 0xae08
   125f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125fa:	2200      	movs	r2, #0
   125fc:	701a      	strb	r2, [r3, #0]
   125fe:	f64a 631e 	movw	r3, #44574	; 0xae1e
   12602:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12606:	2200      	movs	r2, #0
   12608:	801a      	strh	r2, [r3, #0]
   1260a:	f24b 0364 	movw	r3, #45156	; 0xb064
   1260e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12612:	681a      	ldr	r2, [r3, #0]
   12614:	f64a 630c 	movw	r3, #44556	; 0xae0c
   12618:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1261c:	601a      	str	r2, [r3, #0]
   1261e:	f24b 0368 	movw	r3, #45160	; 0xb068
   12622:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12626:	681a      	ldr	r2, [r3, #0]
   12628:	f64a 6310 	movw	r3, #44560	; 0xae10
   1262c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12630:	601a      	str	r2, [r3, #0]
   12632:	f64a 631c 	movw	r3, #44572	; 0xae1c
   12636:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1263a:	2200      	movs	r2, #0
   1263c:	801a      	strh	r2, [r3, #0]
   1263e:	f64a 6320 	movw	r3, #44576	; 0xae20
   12642:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12646:	f04f 0200 	mov.w	r2, #0
   1264a:	601a      	str	r2, [r3, #0]
   1264c:	f001 bd9a 	b.w	14184 <auto_nav+0x21a4>
      }
      else { }
}
else if (nav_block == 2) // height
   12650:	f64a 6309 	movw	r3, #44553	; 0xae09
   12654:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12658:	781b      	ldrb	r3, [r3, #0]
   1265a:	2b02      	cmp	r3, #2
   1265c:	f040 8392 	bne.w	12d84 <auto_nav+0xda4>
{
	nav_block = 2;
   12660:	f64a 6309 	movw	r3, #44553	; 0xae09
   12664:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12668:	2202      	movs	r2, #2
   1266a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(3) }
   1266c:	f64a 2398 	movw	r3, #43672	; 0xaa98
   12670:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12674:	781b      	ldrb	r3, [r3, #0]
   12676:	2b00      	cmp	r3, #0
   12678:	d007      	beq.n	1268a <auto_nav+0x6aa>
   1267a:	f64a 2398 	movw	r3, #43672	; 0xaa98
   1267e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12682:	2200      	movs	r2, #0
   12684:	701a      	strb	r2, [r3, #0]
   12686:	2301      	movs	r3, #1
   12688:	e000      	b.n	1268c <auto_nav+0x6ac>
   1268a:	2300      	movs	r3, #0
   1268c:	2b00      	cmp	r3, #0
   1268e:	d034      	beq.n	126fa <auto_nav+0x71a>
   12690:	f64a 6309 	movw	r3, #44553	; 0xae09
   12694:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12698:	2203      	movs	r2, #3
   1269a:	701a      	strb	r2, [r3, #0]
   1269c:	f64a 6308 	movw	r3, #44552	; 0xae08
   126a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126a4:	2200      	movs	r2, #0
   126a6:	701a      	strb	r2, [r3, #0]
   126a8:	f64a 631e 	movw	r3, #44574	; 0xae1e
   126ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126b0:	2200      	movs	r2, #0
   126b2:	801a      	strh	r2, [r3, #0]
   126b4:	f24b 0364 	movw	r3, #45156	; 0xb064
   126b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126bc:	681a      	ldr	r2, [r3, #0]
   126be:	f64a 630c 	movw	r3, #44556	; 0xae0c
   126c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126c6:	601a      	str	r2, [r3, #0]
   126c8:	f24b 0368 	movw	r3, #45160	; 0xb068
   126cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126d0:	681a      	ldr	r2, [r3, #0]
   126d2:	f64a 6310 	movw	r3, #44560	; 0xae10
   126d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126da:	601a      	str	r2, [r3, #0]
   126dc:	f64a 631c 	movw	r3, #44572	; 0xae1c
   126e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126e4:	2200      	movs	r2, #0
   126e6:	801a      	strh	r2, [r3, #0]
   126e8:	f64a 6320 	movw	r3, #44576	; 0xae20
   126ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126f0:	f04f 0200 	mov.w	r2, #0
   126f4:	601a      	str	r2, [r3, #0]
   126f6:	f001 bd45 	b.w	14184 <auto_nav+0x21a4>
    
    if(nav_stage == 0)
   126fa:	f64a 6308 	movw	r3, #44552	; 0xae08
   126fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12702:	781b      	ldrb	r3, [r3, #0]
   12704:	2b00      	cmp	r3, #0
   12706:	d134      	bne.n	12772 <auto_nav+0x792>
    {
       Label(while_5)
       nav_stage = 0;
   12708:	f64a 6308 	movw	r3, #44552	; 0xae08
   1270c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12710:	2200      	movs	r2, #0
   12712:	701a      	strb	r2, [r3, #0]
       if (! (TRUE)) Goto(endwhile_6) else NextStage();
   12714:	f64a 6308 	movw	r3, #44552	; 0xae08
   12718:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1271c:	781b      	ldrb	r3, [r3, #0]
   1271e:	3301      	adds	r3, #1
   12720:	b2da      	uxtb	r2, r3
   12722:	f64a 6308 	movw	r3, #44552	; 0xae08
   12726:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1272a:	701a      	strb	r2, [r3, #0]
   1272c:	f24b 0364 	movw	r3, #45156	; 0xb064
   12730:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12734:	681a      	ldr	r2, [r3, #0]
   12736:	f64a 630c 	movw	r3, #44556	; 0xae0c
   1273a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1273e:	601a      	str	r2, [r3, #0]
   12740:	f24b 0368 	movw	r3, #45160	; 0xb068
   12744:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12748:	681a      	ldr	r2, [r3, #0]
   1274a:	f64a 6310 	movw	r3, #44560	; 0xae10
   1274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12752:	601a      	str	r2, [r3, #0]
   12754:	f64a 631c 	movw	r3, #44572	; 0xae1c
   12758:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1275c:	2200      	movs	r2, #0
   1275e:	801a      	strh	r2, [r3, #0]
   12760:	f64a 6320 	movw	r3, #44576	; 0xae20
   12764:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12768:	f04f 0200 	mov.w	r2, #0
   1276c:	601a      	str	r2, [r3, #0]
   1276e:	f001 bd09 	b.w	14184 <auto_nav+0x21a4>
    }
    else if(nav_stage == 1)
   12772:	f64a 6308 	movw	r3, #44552	; 0xae08
   12776:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1277a:	781b      	ldrb	r3, [r3, #0]
   1277c:	2b01      	cmp	r3, #1
   1277e:	d169      	bne.n	12854 <auto_nav+0x874>
    {
         nav_stage =1;
   12780:	f64a 6308 	movw	r3, #44552	; 0xae08
   12784:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12788:	2201      	movs	r2, #1
   1278a:	701a      	strb	r2, [r3, #0]
          if (approaching(6)) NextStageFrom(6) else {
   1278c:	2006      	movs	r0, #6
   1278e:	f001 fd07 	bl	141a0 <approaching>
   12792:	4603      	mov	r3, r0
   12794:	2b00      	cmp	r3, #0
   12796:	d034      	beq.n	12802 <auto_nav+0x822>
   12798:	f64a 6314 	movw	r3, #44564	; 0xae14
   1279c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127a0:	2206      	movs	r2, #6
   127a2:	701a      	strb	r2, [r3, #0]
   127a4:	f64a 6308 	movw	r3, #44552	; 0xae08
   127a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127ac:	781b      	ldrb	r3, [r3, #0]
   127ae:	3301      	adds	r3, #1
   127b0:	b2da      	uxtb	r2, r3
   127b2:	f64a 6308 	movw	r3, #44552	; 0xae08
   127b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127ba:	701a      	strb	r2, [r3, #0]
   127bc:	f24b 0364 	movw	r3, #45156	; 0xb064
   127c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127c4:	681a      	ldr	r2, [r3, #0]
   127c6:	f64a 630c 	movw	r3, #44556	; 0xae0c
   127ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127ce:	601a      	str	r2, [r3, #0]
   127d0:	f24b 0368 	movw	r3, #45160	; 0xb068
   127d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127d8:	681a      	ldr	r2, [r3, #0]
   127da:	f64a 6310 	movw	r3, #44560	; 0xae10
   127de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127e2:	601a      	str	r2, [r3, #0]
   127e4:	f64a 631c 	movw	r3, #44572	; 0xae1c
   127e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127ec:	2200      	movs	r2, #0
   127ee:	801a      	strh	r2, [r3, #0]
   127f0:	f64a 6320 	movw	r3, #44576	; 0xae20
   127f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127f8:	f04f 0200 	mov.w	r2, #0
   127fc:	601a      	str	r2, [r3, #0]
   127fe:	f001 bcc1 	b.w	14184 <auto_nav+0x21a4>
            fly_to(6);
   12802:	2006      	movs	r0, #6
   12804:	f001 fe00 	bl	14408 <fly_to>
            auto_pitch = FALSE;
   12808:	f64a 2397 	movw	r3, #43671	; 0xaa97
   1280c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12810:	2200      	movs	r2, #0
   12812:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12814:	f64a 6334 	movw	r3, #44596	; 0xae34
   12818:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1281c:	f04f 0200 	mov.w	r2, #0
   12820:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12822:	f64a 2395 	movw	r3, #43669	; 0xaa95
   12826:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1282a:	2203      	movs	r2, #3
   1282c:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[6].a;
   1282e:	f240 23bc 	movw	r3, #700	; 0x2bc
   12832:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12836:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   12838:	f240 23b8 	movw	r3, #696	; 0x2b8
   1283c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12840:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12842:	f64a 53fc 	movw	r3, #44540	; 0xadfc
   12846:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1284a:	f04f 0200 	mov.w	r2, #0
   1284e:	601a      	str	r2, [r3, #0]
          }
          return;
   12850:	f001 bc98 	b.w	14184 <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12854:	f64a 6308 	movw	r3, #44552	; 0xae08
   12858:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1285c:	781b      	ldrb	r3, [r3, #0]
   1285e:	2b02      	cmp	r3, #2
   12860:	d169      	bne.n	12936 <auto_nav+0x956>
     {
         nav_stage =2; 
   12862:	f64a 6308 	movw	r3, #44552	; 0xae08
   12866:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1286a:	2202      	movs	r2, #2
   1286c:	701a      	strb	r2, [r3, #0]
         if (approaching(1)) NextStageFrom(1) else {
   1286e:	2001      	movs	r0, #1
   12870:	f001 fc96 	bl	141a0 <approaching>
   12874:	4603      	mov	r3, r0
   12876:	2b00      	cmp	r3, #0
   12878:	d034      	beq.n	128e4 <auto_nav+0x904>
   1287a:	f64a 6314 	movw	r3, #44564	; 0xae14
   1287e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12882:	2201      	movs	r2, #1
   12884:	701a      	strb	r2, [r3, #0]
   12886:	f64a 6308 	movw	r3, #44552	; 0xae08
   1288a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1288e:	781b      	ldrb	r3, [r3, #0]
   12890:	3301      	adds	r3, #1
   12892:	b2da      	uxtb	r2, r3
   12894:	f64a 6308 	movw	r3, #44552	; 0xae08
   12898:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1289c:	701a      	strb	r2, [r3, #0]
   1289e:	f24b 0364 	movw	r3, #45156	; 0xb064
   128a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128a6:	681a      	ldr	r2, [r3, #0]
   128a8:	f64a 630c 	movw	r3, #44556	; 0xae0c
   128ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128b0:	601a      	str	r2, [r3, #0]
   128b2:	f24b 0368 	movw	r3, #45160	; 0xb068
   128b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128ba:	681a      	ldr	r2, [r3, #0]
   128bc:	f64a 6310 	movw	r3, #44560	; 0xae10
   128c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128c4:	601a      	str	r2, [r3, #0]
   128c6:	f64a 631c 	movw	r3, #44572	; 0xae1c
   128ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128ce:	2200      	movs	r2, #0
   128d0:	801a      	strh	r2, [r3, #0]
   128d2:	f64a 6320 	movw	r3, #44576	; 0xae20
   128d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128da:	f04f 0200 	mov.w	r2, #0
   128de:	601a      	str	r2, [r3, #0]
   128e0:	f001 bc50 	b.w	14184 <auto_nav+0x21a4>
            fly_to(1);
   128e4:	2001      	movs	r0, #1
   128e6:	f001 fd8f 	bl	14408 <fly_to>
            auto_pitch = FALSE;
   128ea:	f64a 2397 	movw	r3, #43671	; 0xaa97
   128ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128f2:	2200      	movs	r2, #0
   128f4:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   128f6:	f64a 6334 	movw	r3, #44596	; 0xae34
   128fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128fe:	f04f 0200 	mov.w	r2, #0
   12902:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12904:	f64a 2395 	movw	r3, #43669	; 0xaa95
   12908:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1290c:	2203      	movs	r2, #3
   1290e:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12910:	f240 23bc 	movw	r3, #700	; 0x2bc
   12914:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12918:	695a      	ldr	r2, [r3, #20]
   1291a:	f240 23b8 	movw	r3, #696	; 0x2b8
   1291e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12922:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12924:	f64a 53fc 	movw	r3, #44540	; 0xadfc
   12928:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1292c:	f04f 0200 	mov.w	r2, #0
   12930:	601a      	str	r2, [r3, #0]
          }
          return;
   12932:	f001 bc27 	b.w	14184 <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12936:	f64a 6308 	movw	r3, #44552	; 0xae08
   1293a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1293e:	781b      	ldrb	r3, [r3, #0]
   12940:	2b03      	cmp	r3, #3
   12942:	d16f      	bne.n	12a24 <auto_nav+0xa44>
      {
	   nav_stage = 3;         
   12944:	f64a 6308 	movw	r3, #44552	; 0xae08
   12948:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1294c:	2203      	movs	r2, #3
   1294e:	701a      	strb	r2, [r3, #0]
           if (approaching(2)) NextStageFrom(2) else {
   12950:	2002      	movs	r0, #2
   12952:	f001 fc25 	bl	141a0 <approaching>
   12956:	4603      	mov	r3, r0
   12958:	2b00      	cmp	r3, #0
   1295a:	d034      	beq.n	129c6 <auto_nav+0x9e6>
   1295c:	f64a 6314 	movw	r3, #44564	; 0xae14
   12960:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12964:	2202      	movs	r2, #2
   12966:	701a      	strb	r2, [r3, #0]
   12968:	f64a 6308 	movw	r3, #44552	; 0xae08
   1296c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12970:	781b      	ldrb	r3, [r3, #0]
   12972:	3301      	adds	r3, #1
   12974:	b2da      	uxtb	r2, r3
   12976:	f64a 6308 	movw	r3, #44552	; 0xae08
   1297a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1297e:	701a      	strb	r2, [r3, #0]
   12980:	f24b 0364 	movw	r3, #45156	; 0xb064
   12984:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12988:	681a      	ldr	r2, [r3, #0]
   1298a:	f64a 630c 	movw	r3, #44556	; 0xae0c
   1298e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12992:	601a      	str	r2, [r3, #0]
   12994:	f24b 0368 	movw	r3, #45160	; 0xb068
   12998:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1299c:	681a      	ldr	r2, [r3, #0]
   1299e:	f64a 6310 	movw	r3, #44560	; 0xae10
   129a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129a6:	601a      	str	r2, [r3, #0]
   129a8:	f64a 631c 	movw	r3, #44572	; 0xae1c
   129ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129b0:	2200      	movs	r2, #0
   129b2:	801a      	strh	r2, [r3, #0]
   129b4:	f64a 6320 	movw	r3, #44576	; 0xae20
   129b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129bc:	f04f 0200 	mov.w	r2, #0
   129c0:	601a      	str	r2, [r3, #0]
   129c2:	f001 bbdf 	b.w	14184 <auto_nav+0x21a4>
            route_to(last_wp, 2);
   129c6:	f64a 6314 	movw	r3, #44564	; 0xae14
   129ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129ce:	781b      	ldrb	r3, [r3, #0]
   129d0:	4618      	mov	r0, r3
   129d2:	2102      	movs	r1, #2
   129d4:	f001 fd3a 	bl	1444c <route_to>
            auto_pitch = FALSE;
   129d8:	f64a 2397 	movw	r3, #43671	; 0xaa97
   129dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129e0:	2200      	movs	r2, #0
   129e2:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   129e4:	f64a 6334 	movw	r3, #44596	; 0xae34
   129e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129ec:	f04f 0200 	mov.w	r2, #0
   129f0:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   129f2:	f64a 2395 	movw	r3, #43669	; 0xaa95
   129f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129fa:	2203      	movs	r2, #3
   129fc:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[2].a;
   129fe:	f240 23bc 	movw	r3, #700	; 0x2bc
   12a02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a06:	6a1a      	ldr	r2, [r3, #32]
   12a08:	f240 23b8 	movw	r3, #696	; 0x2b8
   12a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a10:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12a12:	f64a 53fc 	movw	r3, #44540	; 0xadfc
   12a16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a1a:	f04f 0200 	mov.w	r2, #0
   12a1e:	601a      	str	r2, [r3, #0]
          }
          return;
   12a20:	f001 bbb0 	b.w	14184 <auto_nav+0x21a4>
       }
       else if (nav_stage == 4)
   12a24:	f64a 6308 	movw	r3, #44552	; 0xae08
   12a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a2c:	781b      	ldrb	r3, [r3, #0]
   12a2e:	2b04      	cmp	r3, #4
   12a30:	d169      	bne.n	12b06 <auto_nav+0xb26>
       {
          nav_stage = 4;
   12a32:	f64a 6308 	movw	r3, #44552	; 0xae08
   12a36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a3a:	2204      	movs	r2, #4
   12a3c:	701a      	strb	r2, [r3, #0]
          if (approaching(3)) NextStageFrom(3) else {
   12a3e:	2003      	movs	r0, #3
   12a40:	f001 fbae 	bl	141a0 <approaching>
   12a44:	4603      	mov	r3, r0
   12a46:	2b00      	cmp	r3, #0
   12a48:	d034      	beq.n	12ab4 <auto_nav+0xad4>
   12a4a:	f64a 6314 	movw	r3, #44564	; 0xae14
   12a4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a52:	2203      	movs	r2, #3
   12a54:	701a      	strb	r2, [r3, #0]
   12a56:	f64a 6308 	movw	r3, #44552	; 0xae08
   12a5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a5e:	781b      	ldrb	r3, [r3, #0]
   12a60:	3301      	adds	r3, #1
   12a62:	b2da      	uxtb	r2, r3
   12a64:	f64a 6308 	movw	r3, #44552	; 0xae08
   12a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a6c:	701a      	strb	r2, [r3, #0]
   12a6e:	f24b 0364 	movw	r3, #45156	; 0xb064
   12a72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a76:	681a      	ldr	r2, [r3, #0]
   12a78:	f64a 630c 	movw	r3, #44556	; 0xae0c
   12a7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a80:	601a      	str	r2, [r3, #0]
   12a82:	f24b 0368 	movw	r3, #45160	; 0xb068
   12a86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a8a:	681a      	ldr	r2, [r3, #0]
   12a8c:	f64a 6310 	movw	r3, #44560	; 0xae10
   12a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a94:	601a      	str	r2, [r3, #0]
   12a96:	f64a 631c 	movw	r3, #44572	; 0xae1c
   12a9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a9e:	2200      	movs	r2, #0
   12aa0:	801a      	strh	r2, [r3, #0]
   12aa2:	f64a 6320 	movw	r3, #44576	; 0xae20
   12aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12aaa:	f04f 0200 	mov.w	r2, #0
   12aae:	601a      	str	r2, [r3, #0]
   12ab0:	f001 bb68 	b.w	14184 <auto_nav+0x21a4>
            fly_to(3);
   12ab4:	2003      	movs	r0, #3
   12ab6:	f001 fca7 	bl	14408 <fly_to>
            auto_pitch = FALSE;
   12aba:	f64a 2397 	movw	r3, #43671	; 0xaa97
   12abe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ac2:	2200      	movs	r2, #0
   12ac4:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12ac6:	f64a 6334 	movw	r3, #44596	; 0xae34
   12aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ace:	f04f 0200 	mov.w	r2, #0
   12ad2:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12ad4:	f64a 2395 	movw	r3, #43669	; 0xaa95
   12ad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12adc:	2203      	movs	r2, #3
   12ade:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[3].a;
   12ae0:	f240 23bc 	movw	r3, #700	; 0x2bc
   12ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   12aea:	f240 23b8 	movw	r3, #696	; 0x2b8
   12aee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12af2:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12af4:	f64a 53fc 	movw	r3, #44540	; 0xadfc
   12af8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12afc:	f04f 0200 	mov.w	r2, #0
   12b00:	601a      	str	r2, [r3, #0]
          }
          return;
   12b02:	f001 bb3f 	b.w	14184 <auto_nav+0x21a4>
       }
       else if (nav_stage == 5)
   12b06:	f64a 6308 	movw	r3, #44552	; 0xae08
   12b0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b0e:	781b      	ldrb	r3, [r3, #0]
   12b10:	2b05      	cmp	r3, #5
   12b12:	d169      	bne.n	12be8 <auto_nav+0xc08>
       {
          nav_stage =5;
   12b14:	f64a 6308 	movw	r3, #44552	; 0xae08
   12b18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b1c:	2205      	movs	r2, #5
   12b1e:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   12b20:	2004      	movs	r0, #4
   12b22:	f001 fb3d 	bl	141a0 <approaching>
   12b26:	4603      	mov	r3, r0
   12b28:	2b00      	cmp	r3, #0
   12b2a:	d034      	beq.n	12b96 <auto_nav+0xbb6>
   12b2c:	f64a 6314 	movw	r3, #44564	; 0xae14
   12b30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b34:	2204      	movs	r2, #4
   12b36:	701a      	strb	r2, [r3, #0]
   12b38:	f64a 6308 	movw	r3, #44552	; 0xae08
   12b3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b40:	781b      	ldrb	r3, [r3, #0]
   12b42:	3301      	adds	r3, #1
   12b44:	b2da      	uxtb	r2, r3
   12b46:	f64a 6308 	movw	r3, #44552	; 0xae08
   12b4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b4e:	701a      	strb	r2, [r3, #0]
   12b50:	f24b 0364 	movw	r3, #45156	; 0xb064
   12b54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b58:	681a      	ldr	r2, [r3, #0]
   12b5a:	f64a 630c 	movw	r3, #44556	; 0xae0c
   12b5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b62:	601a      	str	r2, [r3, #0]
   12b64:	f24b 0368 	movw	r3, #45160	; 0xb068
   12b68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b6c:	681a      	ldr	r2, [r3, #0]
   12b6e:	f64a 6310 	movw	r3, #44560	; 0xae10
   12b72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b76:	601a      	str	r2, [r3, #0]
   12b78:	f64a 631c 	movw	r3, #44572	; 0xae1c
   12b7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b80:	2200      	movs	r2, #0
   12b82:	801a      	strh	r2, [r3, #0]
   12b84:	f64a 6320 	movw	r3, #44576	; 0xae20
   12b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b8c:	f04f 0200 	mov.w	r2, #0
   12b90:	601a      	str	r2, [r3, #0]
   12b92:	f001 baf7 	b.w	14184 <auto_nav+0x21a4>
            fly_to(4);
   12b96:	2004      	movs	r0, #4
   12b98:	f001 fc36 	bl	14408 <fly_to>
            auto_pitch = FALSE;
   12b9c:	f64a 2397 	movw	r3, #43671	; 0xaa97
   12ba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ba4:	2200      	movs	r2, #0
   12ba6:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12ba8:	f64a 6334 	movw	r3, #44596	; 0xae34
   12bac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bb0:	f04f 0200 	mov.w	r2, #0
   12bb4:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12bb6:	f64a 2395 	movw	r3, #43669	; 0xaa95
   12bba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bbe:	2203      	movs	r2, #3
   12bc0:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   12bc2:	f240 23bc 	movw	r3, #700	; 0x2bc
   12bc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   12bcc:	f240 23b8 	movw	r3, #696	; 0x2b8
   12bd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bd4:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12bd6:	f64a 53fc 	movw	r3, #44540	; 0xadfc
   12bda:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bde:	f04f 0200 	mov.w	r2, #0
   12be2:	601a      	str	r2, [r3, #0]
          }
          return;
   12be4:	f001 bace 	b.w	14184 <auto_nav+0x21a4>
       }
       else if (nav_stage == 6)
   12be8:	f64a 6308 	movw	r3, #44552	; 0xae08
   12bec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bf0:	781b      	ldrb	r3, [r3, #0]
   12bf2:	2b06      	cmp	r3, #6
   12bf4:	d16f      	bne.n	12cd6 <auto_nav+0xcf6>
       {
          nav_stage =6;
   12bf6:	f64a 6308 	movw	r3, #44552	; 0xae08
   12bfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bfe:	2206      	movs	r2, #6
   12c00:	701a      	strb	r2, [r3, #0]
          if (approaching(5)) NextStageFrom(5) else {
   12c02:	2005      	movs	r0, #5
   12c04:	f001 facc 	bl	141a0 <approaching>
   12c08:	4603      	mov	r3, r0
   12c0a:	2b00      	cmp	r3, #0
   12c0c:	d034      	beq.n	12c78 <auto_nav+0xc98>
   12c0e:	f64a 6314 	movw	r3, #44564	; 0xae14
   12c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c16:	2205      	movs	r2, #5
   12c18:	701a      	strb	r2, [r3, #0]
   12c1a:	f64a 6308 	movw	r3, #44552	; 0xae08
   12c1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c22:	781b      	ldrb	r3, [r3, #0]
   12c24:	3301      	adds	r3, #1
   12c26:	b2da      	uxtb	r2, r3
   12c28:	f64a 6308 	movw	r3, #44552	; 0xae08
   12c2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c30:	701a      	strb	r2, [r3, #0]
   12c32:	f24b 0364 	movw	r3, #45156	; 0xb064
   12c36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c3a:	681a      	ldr	r2, [r3, #0]
   12c3c:	f64a 630c 	movw	r3, #44556	; 0xae0c
   12c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c44:	601a      	str	r2, [r3, #0]
   12c46:	f24b 0368 	movw	r3, #45160	; 0xb068
   12c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c4e:	681a      	ldr	r2, [r3, #0]
   12c50:	f64a 6310 	movw	r3, #44560	; 0xae10
   12c54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c58:	601a      	str	r2, [r3, #0]
   12c5a:	f64a 631c 	movw	r3, #44572	; 0xae1c
   12c5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c62:	2200      	movs	r2, #0
   12c64:	801a      	strh	r2, [r3, #0]
   12c66:	f64a 6320 	movw	r3, #44576	; 0xae20
   12c6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c6e:	f04f 0200 	mov.w	r2, #0
   12c72:	601a      	str	r2, [r3, #0]
   12c74:	f001 ba86 	b.w	14184 <auto_nav+0x21a4>
            route_to(last_wp, 5);
   12c78:	f64a 6314 	movw	r3, #44564	; 0xae14
   12c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c80:	781b      	ldrb	r3, [r3, #0]
   12c82:	4618      	mov	r0, r3
   12c84:	2105      	movs	r1, #5
   12c86:	f001 fbe1 	bl	1444c <route_to>
            auto_pitch = FALSE;
   12c8a:	f64a 2397 	movw	r3, #43671	; 0xaa97
   12c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c92:	2200      	movs	r2, #0
   12c94:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12c96:	f64a 6334 	movw	r3, #44596	; 0xae34
   12c9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c9e:	f04f 0200 	mov.w	r2, #0
   12ca2:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12ca4:	f64a 2395 	movw	r3, #43669	; 0xaa95
   12ca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cac:	2203      	movs	r2, #3
   12cae:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[5].a;
   12cb0:	f240 23bc 	movw	r3, #700	; 0x2bc
   12cb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   12cba:	f240 23b8 	movw	r3, #696	; 0x2b8
   12cbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cc2:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12cc4:	f64a 53fc 	movw	r3, #44540	; 0xadfc
   12cc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ccc:	f04f 0200 	mov.w	r2, #0
   12cd0:	601a      	str	r2, [r3, #0]
          }
          return;
   12cd2:	f001 ba57 	b.w	14184 <auto_nav+0x21a4>
       }
       else if (nav_stage == 7)
   12cd6:	f64a 6308 	movw	r3, #44552	; 0xae08
   12cda:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cde:	781b      	ldrb	r3, [r3, #0]
   12ce0:	2b07      	cmp	r3, #7
   12ce2:	d106      	bne.n	12cf2 <auto_nav+0xd12>
       {
	   nav_stage =7;
   12ce4:	f64a 6308 	movw	r3, #44552	; 0xae08
   12ce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cec:	2207      	movs	r2, #7
   12cee:	701a      	strb	r2, [r3, #0]
	   Goto(while_5)
   12cf0:	e50a      	b.n	12708 <auto_nav+0x728>
	}
       
       else if (nav_stage == 8){
   12cf2:	f64a 6308 	movw	r3, #44552	; 0xae08
   12cf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cfa:	781b      	ldrb	r3, [r3, #0]
   12cfc:	2b08      	cmp	r3, #8
   12cfe:	f041 8241 	bne.w	14184 <auto_nav+0x21a4>
	  Label(endwhile_6)
	  nav_stage =8;
   12d02:	f64a 6308 	movw	r3, #44552	; 0xae08
   12d06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d0a:	2208      	movs	r2, #8
   12d0c:	701a      	strb	r2, [r3, #0]
          NextBlock();
   12d0e:	f64a 6309 	movw	r3, #44553	; 0xae09
   12d12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d16:	781b      	ldrb	r3, [r3, #0]
   12d18:	3301      	adds	r3, #1
   12d1a:	b2da      	uxtb	r2, r3
   12d1c:	f64a 6309 	movw	r3, #44553	; 0xae09
   12d20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d24:	701a      	strb	r2, [r3, #0]
   12d26:	f64a 6308 	movw	r3, #44552	; 0xae08
   12d2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d2e:	2200      	movs	r2, #0
   12d30:	701a      	strb	r2, [r3, #0]
   12d32:	f64a 631e 	movw	r3, #44574	; 0xae1e
   12d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d3a:	2200      	movs	r2, #0
   12d3c:	801a      	strh	r2, [r3, #0]
   12d3e:	f24b 0364 	movw	r3, #45156	; 0xb064
   12d42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d46:	681a      	ldr	r2, [r3, #0]
   12d48:	f64a 630c 	movw	r3, #44556	; 0xae0c
   12d4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d50:	601a      	str	r2, [r3, #0]
   12d52:	f24b 0368 	movw	r3, #45160	; 0xb068
   12d56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d5a:	681a      	ldr	r2, [r3, #0]
   12d5c:	f64a 6310 	movw	r3, #44560	; 0xae10
   12d60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d64:	601a      	str	r2, [r3, #0]
   12d66:	f64a 631c 	movw	r3, #44572	; 0xae1c
   12d6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d6e:	2200      	movs	r2, #0
   12d70:	801a      	strh	r2, [r3, #0]
   12d72:	f64a 6320 	movw	r3, #44576	; 0xae20
   12d76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d7a:	f04f 0200 	mov.w	r2, #0
   12d7e:	601a      	str	r2, [r3, #0]
   12d80:	f001 ba00 	b.w	14184 <auto_nav+0x21a4>
       }
       else { }
}
else if (nav_block == 3) // xyz
   12d84:	f64a 6309 	movw	r3, #44553	; 0xae09
   12d88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d8c:	781b      	ldrb	r3, [r3, #0]
   12d8e:	2b03      	cmp	r3, #3
   12d90:	f040 8388 	bne.w	134a4 <auto_nav+0x14c4>
{
    nav_block = 3;
   12d94:	f64a 6309 	movw	r3, #44553	; 0xae09
   12d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d9c:	2203      	movs	r2, #3
   12d9e:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(4) }
   12da0:	f64a 2398 	movw	r3, #43672	; 0xaa98
   12da4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12da8:	781b      	ldrb	r3, [r3, #0]
   12daa:	2b00      	cmp	r3, #0
   12dac:	d007      	beq.n	12dbe <auto_nav+0xdde>
   12dae:	f64a 2398 	movw	r3, #43672	; 0xaa98
   12db2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12db6:	2200      	movs	r2, #0
   12db8:	701a      	strb	r2, [r3, #0]
   12dba:	2301      	movs	r3, #1
   12dbc:	e000      	b.n	12dc0 <auto_nav+0xde0>
   12dbe:	2300      	movs	r3, #0
   12dc0:	2b00      	cmp	r3, #0
   12dc2:	d034      	beq.n	12e2e <auto_nav+0xe4e>
   12dc4:	f64a 6309 	movw	r3, #44553	; 0xae09
   12dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12dcc:	2204      	movs	r2, #4
   12dce:	701a      	strb	r2, [r3, #0]
   12dd0:	f64a 6308 	movw	r3, #44552	; 0xae08
   12dd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12dd8:	2200      	movs	r2, #0
   12dda:	701a      	strb	r2, [r3, #0]
   12ddc:	f64a 631e 	movw	r3, #44574	; 0xae1e
   12de0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12de4:	2200      	movs	r2, #0
   12de6:	801a      	strh	r2, [r3, #0]
   12de8:	f24b 0364 	movw	r3, #45156	; 0xb064
   12dec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12df0:	681a      	ldr	r2, [r3, #0]
   12df2:	f64a 630c 	movw	r3, #44556	; 0xae0c
   12df6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12dfa:	601a      	str	r2, [r3, #0]
   12dfc:	f24b 0368 	movw	r3, #45160	; 0xb068
   12e00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e04:	681a      	ldr	r2, [r3, #0]
   12e06:	f64a 6310 	movw	r3, #44560	; 0xae10
   12e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e0e:	601a      	str	r2, [r3, #0]
   12e10:	f64a 631c 	movw	r3, #44572	; 0xae1c
   12e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e18:	2200      	movs	r2, #0
   12e1a:	801a      	strh	r2, [r3, #0]
   12e1c:	f64a 6320 	movw	r3, #44576	; 0xae20
   12e20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e24:	f04f 0200 	mov.w	r2, #0
   12e28:	601a      	str	r2, [r3, #0]
   12e2a:	f001 b9ab 	b.w	14184 <auto_nav+0x21a4>
    if(nav_stage == 0)
   12e2e:	f64a 6308 	movw	r3, #44552	; 0xae08
   12e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e36:	781b      	ldrb	r3, [r3, #0]
   12e38:	2b00      	cmp	r3, #0
   12e3a:	f040 82ea 	bne.w	13412 <auto_nav+0x1432>
    {
        nav_stage = 0;
   12e3e:	f64a 6308 	movw	r3, #44552	; 0xae08
   12e42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e46:	2200      	movs	r2, #0
   12e48:	701a      	strb	r2, [r3, #0]
        Goto3D(50)
   12e4a:	f64a 2394 	movw	r3, #43668	; 0xaa94
   12e4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e52:	781b      	ldrb	r3, [r3, #0]
   12e54:	2b02      	cmp	r3, #2
   12e56:	f040 81a5 	bne.w	131a4 <auto_nav+0x11c4>
   12e5a:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   12e5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e62:	88db      	ldrh	r3, [r3, #6]
   12e64:	84fb      	strh	r3, [r7, #38]	; 0x26
   12e66:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   12e6a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   12e6e:	dc04      	bgt.n	12e7a <auto_nav+0xe9a>
   12e70:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   12e74:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   12e78:	da7e      	bge.n	12f78 <auto_nav+0xf98>
   12e7a:	f64a 6354 	movw	r3, #44628	; 0xae54
   12e7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e82:	681b      	ldr	r3, [r3, #0]
   12e84:	4618      	mov	r0, r3
   12e86:	f004 fd47 	bl	17918 <__aeabi_f2d>
   12e8a:	4604      	mov	r4, r0
   12e8c:	460d      	mov	r5, r1
   12e8e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   12e92:	4618      	mov	r0, r3
   12e94:	f005 f980 	bl	18198 <__aeabi_i2f>
   12e98:	4603      	mov	r3, r0
   12e9a:	4618      	mov	r0, r3
   12e9c:	f04f 0100 	mov.w	r1, #0
   12ea0:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12ea4:	f005 fa80 	bl	183a8 <__aeabi_fdiv>
   12ea8:	4603      	mov	r3, r0
   12eaa:	4618      	mov	r0, r3
   12eac:	f004 fd34 	bl	17918 <__aeabi_f2d>
   12eb0:	4602      	mov	r2, r0
   12eb2:	460b      	mov	r3, r1
   12eb4:	4610      	mov	r0, r2
   12eb6:	4619      	mov	r1, r3
   12eb8:	f04f 0200 	mov.w	r2, #0
   12ebc:	f04f 0300 	mov.w	r3, #0
   12ec0:	f2cc 0334 	movt	r3, #49204	; 0xc034
   12ec4:	f004 fd7c 	bl	179c0 <__aeabi_dmul>
   12ec8:	4602      	mov	r2, r0
   12eca:	460b      	mov	r3, r1
   12ecc:	4610      	mov	r0, r2
   12ece:	4619      	mov	r1, r3
   12ed0:	f04f 0200 	mov.w	r2, #0
   12ed4:	f04f 0300 	mov.w	r3, #0
   12ed8:	f004 fbc0 	bl	1765c <__adddf3>
   12edc:	4602      	mov	r2, r0
   12ede:	460b      	mov	r3, r1
   12ee0:	4620      	mov	r0, r4
   12ee2:	4629      	mov	r1, r5
   12ee4:	f004 fbba 	bl	1765c <__adddf3>
   12ee8:	4602      	mov	r2, r0
   12eea:	460b      	mov	r3, r1
   12eec:	4610      	mov	r0, r2
   12eee:	4619      	mov	r1, r3
   12ef0:	f005 f848 	bl	17f84 <__aeabi_d2f>
   12ef4:	4602      	mov	r2, r0
   12ef6:	f64a 6354 	movw	r3, #44628	; 0xae54
   12efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12efe:	601a      	str	r2, [r3, #0]
   12f00:	f64a 6354 	movw	r3, #44628	; 0xae54
   12f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f08:	681b      	ldr	r3, [r3, #0]
   12f0a:	4618      	mov	r0, r3
   12f0c:	f04f 0100 	mov.w	r1, #0
   12f10:	f2c4 317a 	movt	r1, #17274	; 0x437a
   12f14:	f005 fb3c 	bl	18590 <__aeabi_fcmple>
   12f18:	4603      	mov	r3, r0
   12f1a:	2b00      	cmp	r3, #0
   12f1c:	d005      	beq.n	12f2a <auto_nav+0xf4a>
   12f1e:	f64a 6354 	movw	r3, #44628	; 0xae54
   12f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f26:	681a      	ldr	r2, [r3, #0]
   12f28:	e003      	b.n	12f32 <auto_nav+0xf52>
   12f2a:	f04f 0200 	mov.w	r2, #0
   12f2e:	f2c4 327a 	movt	r2, #17274	; 0x437a
   12f32:	f64a 6354 	movw	r3, #44628	; 0xae54
   12f36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f3a:	601a      	str	r2, [r3, #0]
   12f3c:	f64a 6354 	movw	r3, #44628	; 0xae54
   12f40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f44:	681b      	ldr	r3, [r3, #0]
   12f46:	4618      	mov	r0, r3
   12f48:	f04f 0100 	mov.w	r1, #0
   12f4c:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   12f50:	f005 fb28 	bl	185a4 <__aeabi_fcmpge>
   12f54:	4603      	mov	r3, r0
   12f56:	2b00      	cmp	r3, #0
   12f58:	d005      	beq.n	12f66 <auto_nav+0xf86>
   12f5a:	f64a 6354 	movw	r3, #44628	; 0xae54
   12f5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f62:	681a      	ldr	r2, [r3, #0]
   12f64:	e003      	b.n	12f6e <auto_nav+0xf8e>
   12f66:	f04f 0200 	mov.w	r2, #0
   12f6a:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   12f6e:	f64a 6354 	movw	r3, #44628	; 0xae54
   12f72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f76:	601a      	str	r2, [r3, #0]
   12f78:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   12f7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f80:	889b      	ldrh	r3, [r3, #4]
   12f82:	84bb      	strh	r3, [r7, #36]	; 0x24
   12f84:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   12f88:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   12f8c:	dc04      	bgt.n	12f98 <auto_nav+0xfb8>
   12f8e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   12f92:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   12f96:	da7e      	bge.n	13096 <auto_nav+0x10b6>
   12f98:	f64a 6358 	movw	r3, #44632	; 0xae58
   12f9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fa0:	681b      	ldr	r3, [r3, #0]
   12fa2:	4618      	mov	r0, r3
   12fa4:	f004 fcb8 	bl	17918 <__aeabi_f2d>
   12fa8:	4604      	mov	r4, r0
   12faa:	460d      	mov	r5, r1
   12fac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   12fb0:	4618      	mov	r0, r3
   12fb2:	f005 f8f1 	bl	18198 <__aeabi_i2f>
   12fb6:	4603      	mov	r3, r0
   12fb8:	4618      	mov	r0, r3
   12fba:	f04f 0100 	mov.w	r1, #0
   12fbe:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12fc2:	f005 f9f1 	bl	183a8 <__aeabi_fdiv>
   12fc6:	4603      	mov	r3, r0
   12fc8:	4618      	mov	r0, r3
   12fca:	f004 fca5 	bl	17918 <__aeabi_f2d>
   12fce:	4602      	mov	r2, r0
   12fd0:	460b      	mov	r3, r1
   12fd2:	4610      	mov	r0, r2
   12fd4:	4619      	mov	r1, r3
   12fd6:	f04f 0200 	mov.w	r2, #0
   12fda:	f04f 0300 	mov.w	r3, #0
   12fde:	f2cc 0334 	movt	r3, #49204	; 0xc034
   12fe2:	f004 fced 	bl	179c0 <__aeabi_dmul>
   12fe6:	4602      	mov	r2, r0
   12fe8:	460b      	mov	r3, r1
   12fea:	4610      	mov	r0, r2
   12fec:	4619      	mov	r1, r3
   12fee:	f04f 0200 	mov.w	r2, #0
   12ff2:	f04f 0300 	mov.w	r3, #0
   12ff6:	f004 fb31 	bl	1765c <__adddf3>
   12ffa:	4602      	mov	r2, r0
   12ffc:	460b      	mov	r3, r1
   12ffe:	4620      	mov	r0, r4
   13000:	4629      	mov	r1, r5
   13002:	f004 fb2b 	bl	1765c <__adddf3>
   13006:	4602      	mov	r2, r0
   13008:	460b      	mov	r3, r1
   1300a:	4610      	mov	r0, r2
   1300c:	4619      	mov	r1, r3
   1300e:	f004 ffb9 	bl	17f84 <__aeabi_d2f>
   13012:	4602      	mov	r2, r0
   13014:	f64a 6358 	movw	r3, #44632	; 0xae58
   13018:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1301c:	601a      	str	r2, [r3, #0]
   1301e:	f64a 6358 	movw	r3, #44632	; 0xae58
   13022:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13026:	681b      	ldr	r3, [r3, #0]
   13028:	4618      	mov	r0, r3
   1302a:	f04f 0100 	mov.w	r1, #0
   1302e:	f2c4 317a 	movt	r1, #17274	; 0x437a
   13032:	f005 faad 	bl	18590 <__aeabi_fcmple>
   13036:	4603      	mov	r3, r0
   13038:	2b00      	cmp	r3, #0
   1303a:	d005      	beq.n	13048 <auto_nav+0x1068>
   1303c:	f64a 6358 	movw	r3, #44632	; 0xae58
   13040:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13044:	681a      	ldr	r2, [r3, #0]
   13046:	e003      	b.n	13050 <auto_nav+0x1070>
   13048:	f04f 0200 	mov.w	r2, #0
   1304c:	f2c4 327a 	movt	r2, #17274	; 0x437a
   13050:	f64a 6358 	movw	r3, #44632	; 0xae58
   13054:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13058:	601a      	str	r2, [r3, #0]
   1305a:	f64a 6358 	movw	r3, #44632	; 0xae58
   1305e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13062:	681b      	ldr	r3, [r3, #0]
   13064:	4618      	mov	r0, r3
   13066:	f04f 0100 	mov.w	r1, #0
   1306a:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   1306e:	f005 fa99 	bl	185a4 <__aeabi_fcmpge>
   13072:	4603      	mov	r3, r0
   13074:	2b00      	cmp	r3, #0
   13076:	d005      	beq.n	13084 <auto_nav+0x10a4>
   13078:	f64a 6358 	movw	r3, #44632	; 0xae58
   1307c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13080:	681a      	ldr	r2, [r3, #0]
   13082:	e003      	b.n	1308c <auto_nav+0x10ac>
   13084:	f04f 0200 	mov.w	r2, #0
   13088:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   1308c:	f64a 6358 	movw	r3, #44632	; 0xae58
   13090:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13094:	601a      	str	r2, [r3, #0]
   13096:	f64a 2395 	movw	r3, #43669	; 0xaa95
   1309a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1309e:	2203      	movs	r2, #3
   130a0:	701a      	strb	r2, [r3, #0]
   130a2:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   130a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130aa:	885b      	ldrh	r3, [r3, #2]
   130ac:	847b      	strh	r3, [r7, #34]	; 0x22
   130ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   130b2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   130b6:	dc04      	bgt.n	130c2 <auto_nav+0x10e2>
   130b8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   130bc:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   130c0:	da70      	bge.n	131a4 <auto_nav+0x11c4>
   130c2:	f240 23b8 	movw	r3, #696	; 0x2b8
   130c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130ca:	681b      	ldr	r3, [r3, #0]
   130cc:	4618      	mov	r0, r3
   130ce:	f004 fc23 	bl	17918 <__aeabi_f2d>
   130d2:	4604      	mov	r4, r0
   130d4:	460d      	mov	r5, r1
   130d6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   130da:	4618      	mov	r0, r3
   130dc:	f005 f85c 	bl	18198 <__aeabi_i2f>
   130e0:	4603      	mov	r3, r0
   130e2:	4618      	mov	r0, r3
   130e4:	f04f 0100 	mov.w	r1, #0
   130e8:	f2c4 6116 	movt	r1, #17942	; 0x4616
   130ec:	f005 f95c 	bl	183a8 <__aeabi_fdiv>
   130f0:	4603      	mov	r3, r0
   130f2:	4618      	mov	r0, r3
   130f4:	f004 fc10 	bl	17918 <__aeabi_f2d>
   130f8:	4602      	mov	r2, r0
   130fa:	460b      	mov	r3, r1
   130fc:	f04f 0000 	mov.w	r0, #0
   13100:	f04f 0100 	mov.w	r1, #0
   13104:	f004 faa8 	bl	17658 <__aeabi_dsub>
   13108:	4602      	mov	r2, r0
   1310a:	460b      	mov	r3, r1
   1310c:	4620      	mov	r0, r4
   1310e:	4629      	mov	r1, r5
   13110:	f004 faa4 	bl	1765c <__adddf3>
   13114:	4602      	mov	r2, r0
   13116:	460b      	mov	r3, r1
   13118:	4610      	mov	r0, r2
   1311a:	4619      	mov	r1, r3
   1311c:	f004 ff32 	bl	17f84 <__aeabi_d2f>
   13120:	4602      	mov	r2, r0
   13122:	f240 23b8 	movw	r3, #696	; 0x2b8
   13126:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1312a:	601a      	str	r2, [r3, #0]
   1312c:	f240 23b8 	movw	r3, #696	; 0x2b8
   13130:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13134:	681b      	ldr	r3, [r3, #0]
   13136:	4618      	mov	r0, r3
   13138:	f04f 0100 	mov.w	r1, #0
   1313c:	f2c4 312f 	movt	r1, #17199	; 0x432f
   13140:	f005 fa30 	bl	185a4 <__aeabi_fcmpge>
   13144:	4603      	mov	r3, r0
   13146:	2b00      	cmp	r3, #0
   13148:	d005      	beq.n	13156 <auto_nav+0x1176>
   1314a:	f240 23b8 	movw	r3, #696	; 0x2b8
   1314e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13152:	681a      	ldr	r2, [r3, #0]
   13154:	e003      	b.n	1315e <auto_nav+0x117e>
   13156:	f04f 0200 	mov.w	r2, #0
   1315a:	f2c4 322f 	movt	r2, #17199	; 0x432f
   1315e:	f240 23b8 	movw	r3, #696	; 0x2b8
   13162:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13166:	601a      	str	r2, [r3, #0]
   13168:	f240 23b8 	movw	r3, #696	; 0x2b8
   1316c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13170:	681b      	ldr	r3, [r3, #0]
   13172:	4618      	mov	r0, r3
   13174:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   13178:	f2c4 3189 	movt	r1, #17289	; 0x4389
   1317c:	f005 fa08 	bl	18590 <__aeabi_fcmple>
   13180:	4603      	mov	r3, r0
   13182:	2b00      	cmp	r3, #0
   13184:	d005      	beq.n	13192 <auto_nav+0x11b2>
   13186:	f240 23b8 	movw	r3, #696	; 0x2b8
   1318a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1318e:	681a      	ldr	r2, [r3, #0]
   13190:	e003      	b.n	1319a <auto_nav+0x11ba>
   13192:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   13196:	f2c4 3289 	movt	r2, #17289	; 0x4389
   1319a:	f240 23b8 	movw	r3, #696	; 0x2b8
   1319e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131a2:	601a      	str	r2, [r3, #0]
   131a4:	f24b 0368 	movw	r3, #45160	; 0xb068
   131a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131ac:	681a      	ldr	r2, [r3, #0]
   131ae:	f64a 6358 	movw	r3, #44632	; 0xae58
   131b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131b6:	681b      	ldr	r3, [r3, #0]
   131b8:	4610      	mov	r0, r2
   131ba:	4619      	mov	r1, r3
   131bc:	f004 ff36 	bl	1802c <__aeabi_fsub>
   131c0:	4603      	mov	r3, r0
   131c2:	4618      	mov	r0, r3
   131c4:	f004 fba8 	bl	17918 <__aeabi_f2d>
   131c8:	4604      	mov	r4, r0
   131ca:	460d      	mov	r5, r1
   131cc:	f24b 0364 	movw	r3, #45156	; 0xb064
   131d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131d4:	681a      	ldr	r2, [r3, #0]
   131d6:	f64a 6354 	movw	r3, #44628	; 0xae54
   131da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131de:	681b      	ldr	r3, [r3, #0]
   131e0:	4610      	mov	r0, r2
   131e2:	4619      	mov	r1, r3
   131e4:	f004 ff22 	bl	1802c <__aeabi_fsub>
   131e8:	4603      	mov	r3, r0
   131ea:	4618      	mov	r0, r3
   131ec:	f004 fb94 	bl	17918 <__aeabi_f2d>
   131f0:	4602      	mov	r2, r0
   131f2:	460b      	mov	r3, r1
   131f4:	4620      	mov	r0, r4
   131f6:	4629      	mov	r1, r5
   131f8:	f002 fa12 	bl	15620 <pp_atan2>
   131fc:	4602      	mov	r2, r0
   131fe:	460b      	mov	r3, r1
   13200:	4610      	mov	r0, r2
   13202:	4619      	mov	r1, r3
   13204:	f004 febe 	bl	17f84 <__aeabi_d2f>
   13208:	4603      	mov	r3, r0
   1320a:	61fb      	str	r3, [r7, #28]
   1320c:	69f8      	ldr	r0, [r7, #28]
   1320e:	f004 fb83 	bl	17918 <__aeabi_f2d>
   13212:	4604      	mov	r4, r0
   13214:	460d      	mov	r5, r1
   13216:	f24b 039c 	movw	r3, #45212	; 0xb09c
   1321a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1321e:	681b      	ldr	r3, [r3, #0]
   13220:	4618      	mov	r0, r3
   13222:	f04f 0100 	mov.w	r1, #0
   13226:	f2cc 2148 	movt	r1, #49736	; 0xc248
   1322a:	f005 f809 	bl	18240 <__aeabi_fmul>
   1322e:	4603      	mov	r3, r0
   13230:	4618      	mov	r0, r3
   13232:	f004 fb71 	bl	17918 <__aeabi_f2d>
   13236:	4602      	mov	r2, r0
   13238:	460b      	mov	r3, r1
   1323a:	f04f 0000 	mov.w	r0, #0
   1323e:	f04f 0100 	mov.w	r1, #0
   13242:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13246:	f004 fce5 	bl	17c14 <__aeabi_ddiv>
   1324a:	4602      	mov	r2, r0
   1324c:	460b      	mov	r3, r1
   1324e:	4620      	mov	r0, r4
   13250:	4629      	mov	r1, r5
   13252:	f004 fa03 	bl	1765c <__adddf3>
   13256:	4602      	mov	r2, r0
   13258:	460b      	mov	r3, r1
   1325a:	4610      	mov	r0, r2
   1325c:	4619      	mov	r1, r3
   1325e:	f004 fe91 	bl	17f84 <__aeabi_d2f>
   13262:	4603      	mov	r3, r0
   13264:	61bb      	str	r3, [r7, #24]
   13266:	f64a 6354 	movw	r3, #44628	; 0xae54
   1326a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1326e:	681b      	ldr	r3, [r3, #0]
   13270:	4618      	mov	r0, r3
   13272:	f004 fb51 	bl	17918 <__aeabi_f2d>
   13276:	4604      	mov	r4, r0
   13278:	460d      	mov	r5, r1
   1327a:	69b8      	ldr	r0, [r7, #24]
   1327c:	f004 fb4c 	bl	17918 <__aeabi_f2d>
   13280:	4602      	mov	r2, r0
   13282:	460b      	mov	r3, r1
   13284:	4610      	mov	r0, r2
   13286:	4619      	mov	r1, r3
   13288:	a3b1      	add	r3, pc, #708	; (adr r3, 13550 <auto_nav+0x1570>)
   1328a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1328e:	f004 f9e5 	bl	1765c <__adddf3>
   13292:	4602      	mov	r2, r0
   13294:	460b      	mov	r3, r1
   13296:	4610      	mov	r0, r2
   13298:	4619      	mov	r1, r3
   1329a:	f002 fa81 	bl	157a0 <pp_sin>
   1329e:	4602      	mov	r2, r0
   132a0:	460b      	mov	r3, r1
   132a2:	4610      	mov	r0, r2
   132a4:	4619      	mov	r1, r3
   132a6:	f04f 0200 	mov.w	r2, #0
   132aa:	f04f 0300 	mov.w	r3, #0
   132ae:	f2c4 0349 	movt	r3, #16457	; 0x4049
   132b2:	f004 fb85 	bl	179c0 <__aeabi_dmul>
   132b6:	4602      	mov	r2, r0
   132b8:	460b      	mov	r3, r1
   132ba:	4620      	mov	r0, r4
   132bc:	4629      	mov	r1, r5
   132be:	f004 f9cd 	bl	1765c <__adddf3>
   132c2:	4602      	mov	r2, r0
   132c4:	460b      	mov	r3, r1
   132c6:	4610      	mov	r0, r2
   132c8:	4619      	mov	r1, r3
   132ca:	f004 fe5b 	bl	17f84 <__aeabi_d2f>
   132ce:	4606      	mov	r6, r0
   132d0:	f64a 6358 	movw	r3, #44632	; 0xae58
   132d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   132d8:	681b      	ldr	r3, [r3, #0]
   132da:	4618      	mov	r0, r3
   132dc:	f004 fb1c 	bl	17918 <__aeabi_f2d>
   132e0:	4604      	mov	r4, r0
   132e2:	460d      	mov	r5, r1
   132e4:	69b8      	ldr	r0, [r7, #24]
   132e6:	f004 fb17 	bl	17918 <__aeabi_f2d>
   132ea:	4602      	mov	r2, r0
   132ec:	460b      	mov	r3, r1
   132ee:	4610      	mov	r0, r2
   132f0:	4619      	mov	r1, r3
   132f2:	f002 fa55 	bl	157a0 <pp_sin>
   132f6:	4602      	mov	r2, r0
   132f8:	460b      	mov	r3, r1
   132fa:	4610      	mov	r0, r2
   132fc:	4619      	mov	r1, r3
   132fe:	f04f 0200 	mov.w	r2, #0
   13302:	f04f 0300 	mov.w	r3, #0
   13306:	f2c4 0349 	movt	r3, #16457	; 0x4049
   1330a:	f004 fb59 	bl	179c0 <__aeabi_dmul>
   1330e:	4602      	mov	r2, r0
   13310:	460b      	mov	r3, r1
   13312:	4620      	mov	r0, r4
   13314:	4629      	mov	r1, r5
   13316:	f004 f9a1 	bl	1765c <__adddf3>
   1331a:	4602      	mov	r2, r0
   1331c:	460b      	mov	r3, r1
   1331e:	4610      	mov	r0, r2
   13320:	4619      	mov	r1, r3
   13322:	f004 fe2f 	bl	17f84 <__aeabi_d2f>
   13326:	4603      	mov	r3, r0
   13328:	4630      	mov	r0, r6
   1332a:	4619      	mov	r1, r3
   1332c:	f001 f81c 	bl	14368 <fly_to_xy>
   13330:	69b8      	ldr	r0, [r7, #24]
   13332:	f004 faf1 	bl	17918 <__aeabi_f2d>
   13336:	4602      	mov	r2, r0
   13338:	460b      	mov	r3, r1
   1333a:	a185      	add	r1, pc, #532	; (adr r1, 13550 <auto_nav+0x1570>)
   1333c:	e9d1 0100 	ldrd	r0, r1, [r1]
   13340:	f004 f98a 	bl	17658 <__aeabi_dsub>
   13344:	4602      	mov	r2, r0
   13346:	460b      	mov	r3, r1
   13348:	4610      	mov	r0, r2
   1334a:	4619      	mov	r1, r3
   1334c:	a382      	add	r3, pc, #520	; (adr r3, 13558 <auto_nav+0x1578>)
   1334e:	e9d3 2300 	ldrd	r2, r3, [r3]
   13352:	f004 fc5f 	bl	17c14 <__aeabi_ddiv>
   13356:	4602      	mov	r2, r0
   13358:	460b      	mov	r3, r1
   1335a:	4610      	mov	r0, r2
   1335c:	4619      	mov	r1, r3
   1335e:	f04f 0200 	mov.w	r2, #0
   13362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13366:	f2c4 0366 	movt	r3, #16486	; 0x4066
   1336a:	f004 fb29 	bl	179c0 <__aeabi_dmul>
   1336e:	4602      	mov	r2, r0
   13370:	460b      	mov	r3, r1
   13372:	4610      	mov	r0, r2
   13374:	4619      	mov	r1, r3
   13376:	f004 fe05 	bl	17f84 <__aeabi_d2f>
   1337a:	4602      	mov	r2, r0
   1337c:	f64a 6324 	movw	r3, #44580	; 0xae24
   13380:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13384:	601a      	str	r2, [r3, #0]
   13386:	e012      	b.n	133ae <auto_nav+0x13ce>
   13388:	f64a 6324 	movw	r3, #44580	; 0xae24
   1338c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13390:	681b      	ldr	r3, [r3, #0]
   13392:	4618      	mov	r0, r3
   13394:	f04f 0100 	mov.w	r1, #0
   13398:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1339c:	f004 fe48 	bl	18030 <__addsf3>
   133a0:	4603      	mov	r3, r0
   133a2:	461a      	mov	r2, r3
   133a4:	f64a 6324 	movw	r3, #44580	; 0xae24
   133a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   133ac:	601a      	str	r2, [r3, #0]
   133ae:	f64a 6324 	movw	r3, #44580	; 0xae24
   133b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   133b6:	681b      	ldr	r3, [r3, #0]
   133b8:	4618      	mov	r0, r3
   133ba:	f04f 0100 	mov.w	r1, #0
   133be:	f005 f8dd 	bl	1857c <__aeabi_fcmplt>
   133c2:	4603      	mov	r3, r0
   133c4:	2b00      	cmp	r3, #0
   133c6:	d1df      	bne.n	13388 <auto_nav+0x13a8>
   133c8:	e012      	b.n	133f0 <auto_nav+0x1410>
   133ca:	f64a 6324 	movw	r3, #44580	; 0xae24
   133ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   133d2:	681b      	ldr	r3, [r3, #0]
   133d4:	4618      	mov	r0, r3
   133d6:	f04f 0100 	mov.w	r1, #0
   133da:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   133de:	f004 fe25 	bl	1802c <__aeabi_fsub>
   133e2:	4603      	mov	r3, r0
   133e4:	461a      	mov	r2, r3
   133e6:	f64a 6324 	movw	r3, #44580	; 0xae24
   133ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   133ee:	601a      	str	r2, [r3, #0]
   133f0:	f64a 6324 	movw	r3, #44580	; 0xae24
   133f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   133f8:	681b      	ldr	r3, [r3, #0]
   133fa:	4618      	mov	r0, r3
   133fc:	f04f 0100 	mov.w	r1, #0
   13400:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13404:	f005 f8ce 	bl	185a4 <__aeabi_fcmpge>
   13408:	4603      	mov	r3, r0
   1340a:	2b00      	cmp	r3, #0
   1340c:	d1dd      	bne.n	133ca <auto_nav+0x13ea>
        return;
   1340e:	f000 beb9 	b.w	14184 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   13412:	f64a 6308 	movw	r3, #44552	; 0xae08
   13416:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1341a:	781b      	ldrb	r3, [r3, #0]
   1341c:	2b01      	cmp	r3, #1
   1341e:	f040 86b1 	bne.w	14184 <auto_nav+0x21a4>
    {
        nav_stage = 1;
   13422:	f64a 6308 	movw	r3, #44552	; 0xae08
   13426:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1342a:	2201      	movs	r2, #1
   1342c:	701a      	strb	r2, [r3, #0]
        NextBlock()
   1342e:	f64a 6309 	movw	r3, #44553	; 0xae09
   13432:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13436:	781b      	ldrb	r3, [r3, #0]
   13438:	3301      	adds	r3, #1
   1343a:	b2da      	uxtb	r2, r3
   1343c:	f64a 6309 	movw	r3, #44553	; 0xae09
   13440:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13444:	701a      	strb	r2, [r3, #0]
   13446:	f64a 6308 	movw	r3, #44552	; 0xae08
   1344a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1344e:	2200      	movs	r2, #0
   13450:	701a      	strb	r2, [r3, #0]
   13452:	f64a 631e 	movw	r3, #44574	; 0xae1e
   13456:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1345a:	2200      	movs	r2, #0
   1345c:	801a      	strh	r2, [r3, #0]
   1345e:	f24b 0364 	movw	r3, #45156	; 0xb064
   13462:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13466:	681a      	ldr	r2, [r3, #0]
   13468:	f64a 630c 	movw	r3, #44556	; 0xae0c
   1346c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13470:	601a      	str	r2, [r3, #0]
   13472:	f24b 0368 	movw	r3, #45160	; 0xb068
   13476:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1347a:	681a      	ldr	r2, [r3, #0]
   1347c:	f64a 6310 	movw	r3, #44560	; 0xae10
   13480:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13484:	601a      	str	r2, [r3, #0]
   13486:	f64a 631c 	movw	r3, #44572	; 0xae1c
   1348a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1348e:	2200      	movs	r2, #0
   13490:	801a      	strh	r2, [r3, #0]
   13492:	f64a 6320 	movw	r3, #44576	; 0xae20
   13496:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1349a:	f04f 0200 	mov.w	r2, #0
   1349e:	601a      	str	r2, [r3, #0]
   134a0:	f000 be70 	b.w	14184 <auto_nav+0x21a4>
    }
    else { }
}
else if (nav_block == 4)
   134a4:	f64a 6309 	movw	r3, #44553	; 0xae09
   134a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134ac:	781b      	ldrb	r3, [r3, #0]
   134ae:	2b04      	cmp	r3, #4
   134b0:	f040 8202 	bne.w	138b8 <auto_nav+0x18d8>
{
    nav_block = 4;
   134b4:	f64a 6309 	movw	r3, #44553	; 0xae09
   134b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134bc:	2204      	movs	r2, #4
   134be:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(5) }
   134c0:	f64a 2398 	movw	r3, #43672	; 0xaa98
   134c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134c8:	781b      	ldrb	r3, [r3, #0]
   134ca:	2b00      	cmp	r3, #0
   134cc:	d007      	beq.n	134de <auto_nav+0x14fe>
   134ce:	f64a 2398 	movw	r3, #43672	; 0xaa98
   134d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134d6:	2200      	movs	r2, #0
   134d8:	701a      	strb	r2, [r3, #0]
   134da:	2301      	movs	r3, #1
   134dc:	e000      	b.n	134e0 <auto_nav+0x1500>
   134de:	2300      	movs	r3, #0
   134e0:	2b00      	cmp	r3, #0
   134e2:	d03d      	beq.n	13560 <auto_nav+0x1580>
   134e4:	f64a 6309 	movw	r3, #44553	; 0xae09
   134e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134ec:	2205      	movs	r2, #5
   134ee:	701a      	strb	r2, [r3, #0]
   134f0:	f64a 6308 	movw	r3, #44552	; 0xae08
   134f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134f8:	2200      	movs	r2, #0
   134fa:	701a      	strb	r2, [r3, #0]
   134fc:	f64a 631e 	movw	r3, #44574	; 0xae1e
   13500:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13504:	2200      	movs	r2, #0
   13506:	801a      	strh	r2, [r3, #0]
   13508:	f24b 0364 	movw	r3, #45156	; 0xb064
   1350c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13510:	681a      	ldr	r2, [r3, #0]
   13512:	f64a 630c 	movw	r3, #44556	; 0xae0c
   13516:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1351a:	601a      	str	r2, [r3, #0]
   1351c:	f24b 0368 	movw	r3, #45160	; 0xb068
   13520:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13524:	681a      	ldr	r2, [r3, #0]
   13526:	f64a 6310 	movw	r3, #44560	; 0xae10
   1352a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1352e:	601a      	str	r2, [r3, #0]
   13530:	f64a 631c 	movw	r3, #44572	; 0xae1c
   13534:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13538:	2200      	movs	r2, #0
   1353a:	801a      	strh	r2, [r3, #0]
   1353c:	f64a 6320 	movw	r3, #44576	; 0xae20
   13540:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13544:	f04f 0200 	mov.w	r2, #0
   13548:	601a      	str	r2, [r3, #0]
   1354a:	f000 be1b 	b.w	14184 <auto_nav+0x21a4>
   1354e:	bf00      	nop
   13550:	54442d18 	.word	0x54442d18
   13554:	3ff921fb 	.word	0x3ff921fb
   13558:	54442d18 	.word	0x54442d18
   1355c:	400921fb 	.word	0x400921fb
    if(nav_stage == 0)
   13560:	f64a 6308 	movw	r3, #44552	; 0xae08
   13564:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13568:	781b      	ldrb	r3, [r3, #0]
   1356a:	2b00      	cmp	r3, #0
   1356c:	f040 815b 	bne.w	13826 <auto_nav+0x1846>
    {
        nav_stage = 0;
   13570:	f64a 6308 	movw	r3, #44552	; 0xae08
   13574:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13578:	2200      	movs	r2, #0
   1357a:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   1357c:	f64a 2397 	movw	r3, #43671	; 0xaa97
   13580:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13584:	2200      	movs	r2, #0
   13586:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13588:	f64a 6334 	movw	r3, #44596	; 0xae34
   1358c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13590:	f04f 0200 	mov.w	r2, #0
   13594:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13596:	f64a 2395 	movw	r3, #43669	; 0xaa95
   1359a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1359e:	2203      	movs	r2, #3
   135a0:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[0].a;
   135a2:	f240 23bc 	movw	r3, #700	; 0x2bc
   135a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135aa:	689a      	ldr	r2, [r3, #8]
   135ac:	f240 23b8 	movw	r3, #696	; 0x2b8
   135b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135b4:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   135b6:	f64a 53fc 	movw	r3, #44540	; 0xadfc
   135ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135be:	f04f 0200 	mov.w	r2, #0
   135c2:	601a      	str	r2, [r3, #0]
        Circle(0, 150);
   135c4:	f24b 0368 	movw	r3, #45160	; 0xb068
   135c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135cc:	681a      	ldr	r2, [r3, #0]
   135ce:	f240 23bc 	movw	r3, #700	; 0x2bc
   135d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135d6:	685b      	ldr	r3, [r3, #4]
   135d8:	4610      	mov	r0, r2
   135da:	4619      	mov	r1, r3
   135dc:	f004 fd26 	bl	1802c <__aeabi_fsub>
   135e0:	4603      	mov	r3, r0
   135e2:	4618      	mov	r0, r3
   135e4:	f004 f998 	bl	17918 <__aeabi_f2d>
   135e8:	4604      	mov	r4, r0
   135ea:	460d      	mov	r5, r1
   135ec:	f24b 0364 	movw	r3, #45156	; 0xb064
   135f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135f4:	681a      	ldr	r2, [r3, #0]
   135f6:	f240 23bc 	movw	r3, #700	; 0x2bc
   135fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135fe:	681b      	ldr	r3, [r3, #0]
   13600:	4610      	mov	r0, r2
   13602:	4619      	mov	r1, r3
   13604:	f004 fd12 	bl	1802c <__aeabi_fsub>
   13608:	4603      	mov	r3, r0
   1360a:	4618      	mov	r0, r3
   1360c:	f004 f984 	bl	17918 <__aeabi_f2d>
   13610:	4602      	mov	r2, r0
   13612:	460b      	mov	r3, r1
   13614:	4620      	mov	r0, r4
   13616:	4629      	mov	r1, r5
   13618:	f002 f802 	bl	15620 <pp_atan2>
   1361c:	4602      	mov	r2, r0
   1361e:	460b      	mov	r3, r1
   13620:	4610      	mov	r0, r2
   13622:	4619      	mov	r1, r3
   13624:	f004 fcae 	bl	17f84 <__aeabi_d2f>
   13628:	4603      	mov	r3, r0
   1362a:	617b      	str	r3, [r7, #20]
   1362c:	6978      	ldr	r0, [r7, #20]
   1362e:	f004 f973 	bl	17918 <__aeabi_f2d>
   13632:	4604      	mov	r4, r0
   13634:	460d      	mov	r5, r1
   13636:	f24b 039c 	movw	r3, #45212	; 0xb09c
   1363a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1363e:	681b      	ldr	r3, [r3, #0]
   13640:	4618      	mov	r0, r3
   13642:	f04f 0100 	mov.w	r1, #0
   13646:	f2cc 3116 	movt	r1, #49942	; 0xc316
   1364a:	f004 fdf9 	bl	18240 <__aeabi_fmul>
   1364e:	4603      	mov	r3, r0
   13650:	4618      	mov	r0, r3
   13652:	f004 f961 	bl	17918 <__aeabi_f2d>
   13656:	4602      	mov	r2, r0
   13658:	460b      	mov	r3, r1
   1365a:	f04f 0000 	mov.w	r0, #0
   1365e:	f04f 0100 	mov.w	r1, #0
   13662:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13666:	f004 fad5 	bl	17c14 <__aeabi_ddiv>
   1366a:	4602      	mov	r2, r0
   1366c:	460b      	mov	r3, r1
   1366e:	4620      	mov	r0, r4
   13670:	4629      	mov	r1, r5
   13672:	f003 fff3 	bl	1765c <__adddf3>
   13676:	4602      	mov	r2, r0
   13678:	460b      	mov	r3, r1
   1367a:	4610      	mov	r0, r2
   1367c:	4619      	mov	r1, r3
   1367e:	f004 fc81 	bl	17f84 <__aeabi_d2f>
   13682:	4603      	mov	r3, r0
   13684:	613b      	str	r3, [r7, #16]
   13686:	f240 23bc 	movw	r3, #700	; 0x2bc
   1368a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1368e:	681b      	ldr	r3, [r3, #0]
   13690:	4618      	mov	r0, r3
   13692:	f004 f941 	bl	17918 <__aeabi_f2d>
   13696:	4604      	mov	r4, r0
   13698:	460d      	mov	r5, r1
   1369a:	6938      	ldr	r0, [r7, #16]
   1369c:	f004 f93c 	bl	17918 <__aeabi_f2d>
   136a0:	4602      	mov	r2, r0
   136a2:	460b      	mov	r3, r1
   136a4:	4610      	mov	r0, r2
   136a6:	4619      	mov	r1, r3
   136a8:	a3af      	add	r3, pc, #700	; (adr r3, 13968 <auto_nav+0x1988>)
   136aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   136ae:	f003 ffd5 	bl	1765c <__adddf3>
   136b2:	4602      	mov	r2, r0
   136b4:	460b      	mov	r3, r1
   136b6:	4610      	mov	r0, r2
   136b8:	4619      	mov	r1, r3
   136ba:	f002 f871 	bl	157a0 <pp_sin>
   136be:	4602      	mov	r2, r0
   136c0:	460b      	mov	r3, r1
   136c2:	4610      	mov	r0, r2
   136c4:	4619      	mov	r1, r3
   136c6:	a3aa      	add	r3, pc, #680	; (adr r3, 13970 <auto_nav+0x1990>)
   136c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   136cc:	f004 f978 	bl	179c0 <__aeabi_dmul>
   136d0:	4602      	mov	r2, r0
   136d2:	460b      	mov	r3, r1
   136d4:	4620      	mov	r0, r4
   136d6:	4629      	mov	r1, r5
   136d8:	f003 ffc0 	bl	1765c <__adddf3>
   136dc:	4602      	mov	r2, r0
   136de:	460b      	mov	r3, r1
   136e0:	4610      	mov	r0, r2
   136e2:	4619      	mov	r1, r3
   136e4:	f004 fc4e 	bl	17f84 <__aeabi_d2f>
   136e8:	4606      	mov	r6, r0
   136ea:	f240 23bc 	movw	r3, #700	; 0x2bc
   136ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136f2:	685b      	ldr	r3, [r3, #4]
   136f4:	4618      	mov	r0, r3
   136f6:	f004 f90f 	bl	17918 <__aeabi_f2d>
   136fa:	4604      	mov	r4, r0
   136fc:	460d      	mov	r5, r1
   136fe:	6938      	ldr	r0, [r7, #16]
   13700:	f004 f90a 	bl	17918 <__aeabi_f2d>
   13704:	4602      	mov	r2, r0
   13706:	460b      	mov	r3, r1
   13708:	4610      	mov	r0, r2
   1370a:	4619      	mov	r1, r3
   1370c:	f002 f848 	bl	157a0 <pp_sin>
   13710:	4602      	mov	r2, r0
   13712:	460b      	mov	r3, r1
   13714:	4610      	mov	r0, r2
   13716:	4619      	mov	r1, r3
   13718:	a395      	add	r3, pc, #596	; (adr r3, 13970 <auto_nav+0x1990>)
   1371a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1371e:	f004 f94f 	bl	179c0 <__aeabi_dmul>
   13722:	4602      	mov	r2, r0
   13724:	460b      	mov	r3, r1
   13726:	4620      	mov	r0, r4
   13728:	4629      	mov	r1, r5
   1372a:	f003 ff97 	bl	1765c <__adddf3>
   1372e:	4602      	mov	r2, r0
   13730:	460b      	mov	r3, r1
   13732:	4610      	mov	r0, r2
   13734:	4619      	mov	r1, r3
   13736:	f004 fc25 	bl	17f84 <__aeabi_d2f>
   1373a:	4603      	mov	r3, r0
   1373c:	4630      	mov	r0, r6
   1373e:	4619      	mov	r1, r3
   13740:	f000 fe12 	bl	14368 <fly_to_xy>
   13744:	6938      	ldr	r0, [r7, #16]
   13746:	f004 f8e7 	bl	17918 <__aeabi_f2d>
   1374a:	4602      	mov	r2, r0
   1374c:	460b      	mov	r3, r1
   1374e:	a186      	add	r1, pc, #536	; (adr r1, 13968 <auto_nav+0x1988>)
   13750:	e9d1 0100 	ldrd	r0, r1, [r1]
   13754:	f003 ff80 	bl	17658 <__aeabi_dsub>
   13758:	4602      	mov	r2, r0
   1375a:	460b      	mov	r3, r1
   1375c:	4610      	mov	r0, r2
   1375e:	4619      	mov	r1, r3
   13760:	a385      	add	r3, pc, #532	; (adr r3, 13978 <auto_nav+0x1998>)
   13762:	e9d3 2300 	ldrd	r2, r3, [r3]
   13766:	f004 fa55 	bl	17c14 <__aeabi_ddiv>
   1376a:	4602      	mov	r2, r0
   1376c:	460b      	mov	r3, r1
   1376e:	4610      	mov	r0, r2
   13770:	4619      	mov	r1, r3
   13772:	f04f 0200 	mov.w	r2, #0
   13776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1377a:	f2c4 0366 	movt	r3, #16486	; 0x4066
   1377e:	f004 f91f 	bl	179c0 <__aeabi_dmul>
   13782:	4602      	mov	r2, r0
   13784:	460b      	mov	r3, r1
   13786:	4610      	mov	r0, r2
   13788:	4619      	mov	r1, r3
   1378a:	f004 fbfb 	bl	17f84 <__aeabi_d2f>
   1378e:	4602      	mov	r2, r0
   13790:	f64a 6324 	movw	r3, #44580	; 0xae24
   13794:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13798:	601a      	str	r2, [r3, #0]
   1379a:	e012      	b.n	137c2 <auto_nav+0x17e2>
   1379c:	f64a 6324 	movw	r3, #44580	; 0xae24
   137a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137a4:	681b      	ldr	r3, [r3, #0]
   137a6:	4618      	mov	r0, r3
   137a8:	f04f 0100 	mov.w	r1, #0
   137ac:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   137b0:	f004 fc3e 	bl	18030 <__addsf3>
   137b4:	4603      	mov	r3, r0
   137b6:	461a      	mov	r2, r3
   137b8:	f64a 6324 	movw	r3, #44580	; 0xae24
   137bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137c0:	601a      	str	r2, [r3, #0]
   137c2:	f64a 6324 	movw	r3, #44580	; 0xae24
   137c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137ca:	681b      	ldr	r3, [r3, #0]
   137cc:	4618      	mov	r0, r3
   137ce:	f04f 0100 	mov.w	r1, #0
   137d2:	f004 fed3 	bl	1857c <__aeabi_fcmplt>
   137d6:	4603      	mov	r3, r0
   137d8:	2b00      	cmp	r3, #0
   137da:	d1df      	bne.n	1379c <auto_nav+0x17bc>
   137dc:	e012      	b.n	13804 <auto_nav+0x1824>
   137de:	f64a 6324 	movw	r3, #44580	; 0xae24
   137e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137e6:	681b      	ldr	r3, [r3, #0]
   137e8:	4618      	mov	r0, r3
   137ea:	f04f 0100 	mov.w	r1, #0
   137ee:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   137f2:	f004 fc1b 	bl	1802c <__aeabi_fsub>
   137f6:	4603      	mov	r3, r0
   137f8:	461a      	mov	r2, r3
   137fa:	f64a 6324 	movw	r3, #44580	; 0xae24
   137fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13802:	601a      	str	r2, [r3, #0]
   13804:	f64a 6324 	movw	r3, #44580	; 0xae24
   13808:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1380c:	681b      	ldr	r3, [r3, #0]
   1380e:	4618      	mov	r0, r3
   13810:	f04f 0100 	mov.w	r1, #0
   13814:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13818:	f004 fec4 	bl	185a4 <__aeabi_fcmpge>
   1381c:	4603      	mov	r3, r0
   1381e:	2b00      	cmp	r3, #0
   13820:	d1dd      	bne.n	137de <auto_nav+0x17fe>
        return;
   13822:	f000 bcaf 	b.w	14184 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   13826:	f64a 6308 	movw	r3, #44552	; 0xae08
   1382a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1382e:	781b      	ldrb	r3, [r3, #0]
   13830:	2b01      	cmp	r3, #1
   13832:	f040 84a7 	bne.w	14184 <auto_nav+0x21a4>
    {
        nav_stage =1;
   13836:	f64a 6308 	movw	r3, #44552	; 0xae08
   1383a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1383e:	2201      	movs	r2, #1
   13840:	701a      	strb	r2, [r3, #0]
        NextBlock()
   13842:	f64a 6309 	movw	r3, #44553	; 0xae09
   13846:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1384a:	781b      	ldrb	r3, [r3, #0]
   1384c:	3301      	adds	r3, #1
   1384e:	b2da      	uxtb	r2, r3
   13850:	f64a 6309 	movw	r3, #44553	; 0xae09
   13854:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13858:	701a      	strb	r2, [r3, #0]
   1385a:	f64a 6308 	movw	r3, #44552	; 0xae08
   1385e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13862:	2200      	movs	r2, #0
   13864:	701a      	strb	r2, [r3, #0]
   13866:	f64a 631e 	movw	r3, #44574	; 0xae1e
   1386a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1386e:	2200      	movs	r2, #0
   13870:	801a      	strh	r2, [r3, #0]
   13872:	f24b 0364 	movw	r3, #45156	; 0xb064
   13876:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1387a:	681a      	ldr	r2, [r3, #0]
   1387c:	f64a 630c 	movw	r3, #44556	; 0xae0c
   13880:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13884:	601a      	str	r2, [r3, #0]
   13886:	f24b 0368 	movw	r3, #45160	; 0xb068
   1388a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1388e:	681a      	ldr	r2, [r3, #0]
   13890:	f64a 6310 	movw	r3, #44560	; 0xae10
   13894:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13898:	601a      	str	r2, [r3, #0]
   1389a:	f64a 631c 	movw	r3, #44572	; 0xae1c
   1389e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138a2:	2200      	movs	r2, #0
   138a4:	801a      	strh	r2, [r3, #0]
   138a6:	f64a 6320 	movw	r3, #44576	; 0xae20
   138aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138ae:	f04f 0200 	mov.w	r2, #0
   138b2:	601a      	str	r2, [r3, #0]
   138b4:	f000 bc66 	b.w	14184 <auto_nav+0x21a4>
    }
    else {}
}
else if (nav_block == 5)
   138b8:	f64a 6309 	movw	r3, #44553	; 0xae09
   138bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138c0:	781b      	ldrb	r3, [r3, #0]
   138c2:	2b05      	cmp	r3, #5
   138c4:	f040 845e 	bne.w	14184 <auto_nav+0x21a4>
{
    nav_block = 5;
   138c8:	f64a 6309 	movw	r3, #44553	; 0xae09
   138cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138d0:	2205      	movs	r2, #5
   138d2:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(1) }
   138d4:	f64a 2398 	movw	r3, #43672	; 0xaa98
   138d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138dc:	781b      	ldrb	r3, [r3, #0]
   138de:	2b00      	cmp	r3, #0
   138e0:	d007      	beq.n	138f2 <auto_nav+0x1912>
   138e2:	f64a 2398 	movw	r3, #43672	; 0xaa98
   138e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138ea:	2200      	movs	r2, #0
   138ec:	701a      	strb	r2, [r3, #0]
   138ee:	2301      	movs	r3, #1
   138f0:	e000      	b.n	138f4 <auto_nav+0x1914>
   138f2:	2300      	movs	r3, #0
   138f4:	2b00      	cmp	r3, #0
   138f6:	d043      	beq.n	13980 <auto_nav+0x19a0>
   138f8:	f64a 6309 	movw	r3, #44553	; 0xae09
   138fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13900:	2201      	movs	r2, #1
   13902:	701a      	strb	r2, [r3, #0]
   13904:	f64a 6308 	movw	r3, #44552	; 0xae08
   13908:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1390c:	2200      	movs	r2, #0
   1390e:	701a      	strb	r2, [r3, #0]
   13910:	f64a 631e 	movw	r3, #44574	; 0xae1e
   13914:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13918:	2200      	movs	r2, #0
   1391a:	801a      	strh	r2, [r3, #0]
   1391c:	f24b 0364 	movw	r3, #45156	; 0xb064
   13920:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13924:	681a      	ldr	r2, [r3, #0]
   13926:	f64a 630c 	movw	r3, #44556	; 0xae0c
   1392a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1392e:	601a      	str	r2, [r3, #0]
   13930:	f24b 0368 	movw	r3, #45160	; 0xb068
   13934:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13938:	681a      	ldr	r2, [r3, #0]
   1393a:	f64a 6310 	movw	r3, #44560	; 0xae10
   1393e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13942:	601a      	str	r2, [r3, #0]
   13944:	f64a 631c 	movw	r3, #44572	; 0xae1c
   13948:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1394c:	2200      	movs	r2, #0
   1394e:	801a      	strh	r2, [r3, #0]
   13950:	f64a 6320 	movw	r3, #44576	; 0xae20
   13954:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13958:	f04f 0200 	mov.w	r2, #0
   1395c:	601a      	str	r2, [r3, #0]
   1395e:	f000 bc11 	b.w	14184 <auto_nav+0x21a4>
   13962:	bf00      	nop
   13964:	f3af 8000 	nop.w
   13968:	54442d18 	.word	0x54442d18
   1396c:	3ff921fb 	.word	0x3ff921fb
   13970:	00000000 	.word	0x00000000
   13974:	4062c000 	.word	0x4062c000
   13978:	54442d18 	.word	0x54442d18
   1397c:	400921fb 	.word	0x400921fb
    if(nav_stage == 0) {
   13980:	f64a 6308 	movw	r3, #44552	; 0xae08
   13984:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13988:	781b      	ldrb	r3, [r3, #0]
   1398a:	2b00      	cmp	r3, #0
   1398c:	d133      	bne.n	139f6 <auto_nav+0x1a16>
       Label(while_7) 
       nav_stage = 0;
   1398e:	f64a 6308 	movw	r3, #44552	; 0xae08
   13992:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13996:	2200      	movs	r2, #0
   13998:	701a      	strb	r2, [r3, #0]
      if (! (TRUE)) Goto(endwhile_8) else NextStage();}
   1399a:	f64a 6308 	movw	r3, #44552	; 0xae08
   1399e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139a2:	781b      	ldrb	r3, [r3, #0]
   139a4:	3301      	adds	r3, #1
   139a6:	b2da      	uxtb	r2, r3
   139a8:	f64a 6308 	movw	r3, #44552	; 0xae08
   139ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139b0:	701a      	strb	r2, [r3, #0]
   139b2:	f24b 0364 	movw	r3, #45156	; 0xb064
   139b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139ba:	681a      	ldr	r2, [r3, #0]
   139bc:	f64a 630c 	movw	r3, #44556	; 0xae0c
   139c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139c4:	601a      	str	r2, [r3, #0]
   139c6:	f24b 0368 	movw	r3, #45160	; 0xb068
   139ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139ce:	681a      	ldr	r2, [r3, #0]
   139d0:	f64a 6310 	movw	r3, #44560	; 0xae10
   139d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139d8:	601a      	str	r2, [r3, #0]
   139da:	f64a 631c 	movw	r3, #44572	; 0xae1c
   139de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139e2:	2200      	movs	r2, #0
   139e4:	801a      	strh	r2, [r3, #0]
   139e6:	f64a 6320 	movw	r3, #44576	; 0xae20
   139ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139ee:	f04f 0200 	mov.w	r2, #0
   139f2:	601a      	str	r2, [r3, #0]
   139f4:	e3c6      	b.n	14184 <auto_nav+0x21a4>
     
    else if (nav_stage == 1)
   139f6:	f64a 6308 	movw	r3, #44552	; 0xae08
   139fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139fe:	781b      	ldrb	r3, [r3, #0]
   13a00:	2b01      	cmp	r3, #1
   13a02:	f040 81b5 	bne.w	13d70 <auto_nav+0x1d90>
    {
        nav_stage =1;
   13a06:	f64a 6308 	movw	r3, #44552	; 0xae08
   13a0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a0e:	2201      	movs	r2, #1
   13a10:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   13a12:	f64a 2397 	movw	r3, #43671	; 0xaa97
   13a16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a1a:	2200      	movs	r2, #0
   13a1c:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13a1e:	f64a 6334 	movw	r3, #44596	; 0xae34
   13a22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a26:	f04f 0200 	mov.w	r2, #0
   13a2a:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13a2c:	f64a 2395 	movw	r3, #43669	; 0xaa95
   13a30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a34:	2203      	movs	r2, #3
   13a36:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[1].a;
   13a38:	f240 23bc 	movw	r3, #700	; 0x2bc
   13a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a40:	695a      	ldr	r2, [r3, #20]
   13a42:	f240 23b8 	movw	r3, #696	; 0x2b8
   13a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a4a:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   13a4c:	f64a 53fc 	movw	r3, #44540	; 0xadfc
   13a50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a54:	f04f 0200 	mov.w	r2, #0
   13a58:	601a      	str	r2, [r3, #0]
        Circle(1, 100);
   13a5a:	f24b 0368 	movw	r3, #45160	; 0xb068
   13a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a62:	681a      	ldr	r2, [r3, #0]
   13a64:	f240 23bc 	movw	r3, #700	; 0x2bc
   13a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a6c:	691b      	ldr	r3, [r3, #16]
   13a6e:	4610      	mov	r0, r2
   13a70:	4619      	mov	r1, r3
   13a72:	f004 fadb 	bl	1802c <__aeabi_fsub>
   13a76:	4603      	mov	r3, r0
   13a78:	4618      	mov	r0, r3
   13a7a:	f003 ff4d 	bl	17918 <__aeabi_f2d>
   13a7e:	4604      	mov	r4, r0
   13a80:	460d      	mov	r5, r1
   13a82:	f24b 0364 	movw	r3, #45156	; 0xb064
   13a86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a8a:	681a      	ldr	r2, [r3, #0]
   13a8c:	f240 23bc 	movw	r3, #700	; 0x2bc
   13a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a94:	68db      	ldr	r3, [r3, #12]
   13a96:	4610      	mov	r0, r2
   13a98:	4619      	mov	r1, r3
   13a9a:	f004 fac7 	bl	1802c <__aeabi_fsub>
   13a9e:	4603      	mov	r3, r0
   13aa0:	4618      	mov	r0, r3
   13aa2:	f003 ff39 	bl	17918 <__aeabi_f2d>
   13aa6:	4602      	mov	r2, r0
   13aa8:	460b      	mov	r3, r1
   13aaa:	4620      	mov	r0, r4
   13aac:	4629      	mov	r1, r5
   13aae:	f001 fdb7 	bl	15620 <pp_atan2>
   13ab2:	4602      	mov	r2, r0
   13ab4:	460b      	mov	r3, r1
   13ab6:	4610      	mov	r0, r2
   13ab8:	4619      	mov	r1, r3
   13aba:	f004 fa63 	bl	17f84 <__aeabi_d2f>
   13abe:	4603      	mov	r3, r0
   13ac0:	60fb      	str	r3, [r7, #12]
   13ac2:	68f8      	ldr	r0, [r7, #12]
   13ac4:	f003 ff28 	bl	17918 <__aeabi_f2d>
   13ac8:	4604      	mov	r4, r0
   13aca:	460d      	mov	r5, r1
   13acc:	f24b 039c 	movw	r3, #45212	; 0xb09c
   13ad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ad4:	681b      	ldr	r3, [r3, #0]
   13ad6:	4618      	mov	r0, r3
   13ad8:	f04f 0100 	mov.w	r1, #0
   13adc:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   13ae0:	f004 fbae 	bl	18240 <__aeabi_fmul>
   13ae4:	4603      	mov	r3, r0
   13ae6:	4618      	mov	r0, r3
   13ae8:	f003 ff16 	bl	17918 <__aeabi_f2d>
   13aec:	4602      	mov	r2, r0
   13aee:	460b      	mov	r3, r1
   13af0:	f04f 0000 	mov.w	r0, #0
   13af4:	f04f 0100 	mov.w	r1, #0
   13af8:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13afc:	f004 f88a 	bl	17c14 <__aeabi_ddiv>
   13b00:	4602      	mov	r2, r0
   13b02:	460b      	mov	r3, r1
   13b04:	4620      	mov	r0, r4
   13b06:	4629      	mov	r1, r5
   13b08:	f003 fda8 	bl	1765c <__adddf3>
   13b0c:	4602      	mov	r2, r0
   13b0e:	460b      	mov	r3, r1
   13b10:	4610      	mov	r0, r2
   13b12:	4619      	mov	r1, r3
   13b14:	f004 fa36 	bl	17f84 <__aeabi_d2f>
   13b18:	4603      	mov	r3, r0
   13b1a:	60bb      	str	r3, [r7, #8]
   13b1c:	f240 23bc 	movw	r3, #700	; 0x2bc
   13b20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b24:	68db      	ldr	r3, [r3, #12]
   13b26:	4618      	mov	r0, r3
   13b28:	f003 fef6 	bl	17918 <__aeabi_f2d>
   13b2c:	4604      	mov	r4, r0
   13b2e:	460d      	mov	r5, r1
   13b30:	68b8      	ldr	r0, [r7, #8]
   13b32:	f003 fef1 	bl	17918 <__aeabi_f2d>
   13b36:	4602      	mov	r2, r0
   13b38:	460b      	mov	r3, r1
   13b3a:	4610      	mov	r0, r2
   13b3c:	4619      	mov	r1, r3
   13b3e:	a388      	add	r3, pc, #544	; (adr r3, 13d60 <auto_nav+0x1d80>)
   13b40:	e9d3 2300 	ldrd	r2, r3, [r3]
   13b44:	f003 fd8a 	bl	1765c <__adddf3>
   13b48:	4602      	mov	r2, r0
   13b4a:	460b      	mov	r3, r1
   13b4c:	4610      	mov	r0, r2
   13b4e:	4619      	mov	r1, r3
   13b50:	f001 fe26 	bl	157a0 <pp_sin>
   13b54:	4602      	mov	r2, r0
   13b56:	460b      	mov	r3, r1
   13b58:	4610      	mov	r0, r2
   13b5a:	4619      	mov	r1, r3
   13b5c:	f04f 0200 	mov.w	r2, #0
   13b60:	f04f 0300 	mov.w	r3, #0
   13b64:	f2c4 0359 	movt	r3, #16473	; 0x4059
   13b68:	f003 ff2a 	bl	179c0 <__aeabi_dmul>
   13b6c:	4602      	mov	r2, r0
   13b6e:	460b      	mov	r3, r1
   13b70:	4620      	mov	r0, r4
   13b72:	4629      	mov	r1, r5
   13b74:	f003 fd72 	bl	1765c <__adddf3>
   13b78:	4602      	mov	r2, r0
   13b7a:	460b      	mov	r3, r1
   13b7c:	4610      	mov	r0, r2
   13b7e:	4619      	mov	r1, r3
   13b80:	f004 fa00 	bl	17f84 <__aeabi_d2f>
   13b84:	4606      	mov	r6, r0
   13b86:	f240 23bc 	movw	r3, #700	; 0x2bc
   13b8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b8e:	691b      	ldr	r3, [r3, #16]
   13b90:	4618      	mov	r0, r3
   13b92:	f003 fec1 	bl	17918 <__aeabi_f2d>
   13b96:	4604      	mov	r4, r0
   13b98:	460d      	mov	r5, r1
   13b9a:	68b8      	ldr	r0, [r7, #8]
   13b9c:	f003 febc 	bl	17918 <__aeabi_f2d>
   13ba0:	4602      	mov	r2, r0
   13ba2:	460b      	mov	r3, r1
   13ba4:	4610      	mov	r0, r2
   13ba6:	4619      	mov	r1, r3
   13ba8:	f001 fdfa 	bl	157a0 <pp_sin>
   13bac:	4602      	mov	r2, r0
   13bae:	460b      	mov	r3, r1
   13bb0:	4610      	mov	r0, r2
   13bb2:	4619      	mov	r1, r3
   13bb4:	f04f 0200 	mov.w	r2, #0
   13bb8:	f04f 0300 	mov.w	r3, #0
   13bbc:	f2c4 0359 	movt	r3, #16473	; 0x4059
   13bc0:	f003 fefe 	bl	179c0 <__aeabi_dmul>
   13bc4:	4602      	mov	r2, r0
   13bc6:	460b      	mov	r3, r1
   13bc8:	4620      	mov	r0, r4
   13bca:	4629      	mov	r1, r5
   13bcc:	f003 fd46 	bl	1765c <__adddf3>
   13bd0:	4602      	mov	r2, r0
   13bd2:	460b      	mov	r3, r1
   13bd4:	4610      	mov	r0, r2
   13bd6:	4619      	mov	r1, r3
   13bd8:	f004 f9d4 	bl	17f84 <__aeabi_d2f>
   13bdc:	4603      	mov	r3, r0
   13bde:	4630      	mov	r0, r6
   13be0:	4619      	mov	r1, r3
   13be2:	f000 fbc1 	bl	14368 <fly_to_xy>
   13be6:	68b8      	ldr	r0, [r7, #8]
   13be8:	f003 fe96 	bl	17918 <__aeabi_f2d>
   13bec:	4602      	mov	r2, r0
   13bee:	460b      	mov	r3, r1
   13bf0:	a15b      	add	r1, pc, #364	; (adr r1, 13d60 <auto_nav+0x1d80>)
   13bf2:	e9d1 0100 	ldrd	r0, r1, [r1]
   13bf6:	f003 fd2f 	bl	17658 <__aeabi_dsub>
   13bfa:	4602      	mov	r2, r0
   13bfc:	460b      	mov	r3, r1
   13bfe:	4610      	mov	r0, r2
   13c00:	4619      	mov	r1, r3
   13c02:	a359      	add	r3, pc, #356	; (adr r3, 13d68 <auto_nav+0x1d88>)
   13c04:	e9d3 2300 	ldrd	r2, r3, [r3]
   13c08:	f004 f804 	bl	17c14 <__aeabi_ddiv>
   13c0c:	4602      	mov	r2, r0
   13c0e:	460b      	mov	r3, r1
   13c10:	4610      	mov	r0, r2
   13c12:	4619      	mov	r1, r3
   13c14:	f04f 0200 	mov.w	r2, #0
   13c18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13c1c:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13c20:	f003 fece 	bl	179c0 <__aeabi_dmul>
   13c24:	4602      	mov	r2, r0
   13c26:	460b      	mov	r3, r1
   13c28:	4610      	mov	r0, r2
   13c2a:	4619      	mov	r1, r3
   13c2c:	f004 f9aa 	bl	17f84 <__aeabi_d2f>
   13c30:	4602      	mov	r2, r0
   13c32:	f64a 6324 	movw	r3, #44580	; 0xae24
   13c36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c3a:	601a      	str	r2, [r3, #0]
   13c3c:	e012      	b.n	13c64 <auto_nav+0x1c84>
   13c3e:	f64a 6324 	movw	r3, #44580	; 0xae24
   13c42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c46:	681b      	ldr	r3, [r3, #0]
   13c48:	4618      	mov	r0, r3
   13c4a:	f04f 0100 	mov.w	r1, #0
   13c4e:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13c52:	f004 f9ed 	bl	18030 <__addsf3>
   13c56:	4603      	mov	r3, r0
   13c58:	461a      	mov	r2, r3
   13c5a:	f64a 6324 	movw	r3, #44580	; 0xae24
   13c5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c62:	601a      	str	r2, [r3, #0]
   13c64:	f64a 6324 	movw	r3, #44580	; 0xae24
   13c68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c6c:	681b      	ldr	r3, [r3, #0]
   13c6e:	4618      	mov	r0, r3
   13c70:	f04f 0100 	mov.w	r1, #0
   13c74:	f004 fc82 	bl	1857c <__aeabi_fcmplt>
   13c78:	4603      	mov	r3, r0
   13c7a:	2b00      	cmp	r3, #0
   13c7c:	d1df      	bne.n	13c3e <auto_nav+0x1c5e>
   13c7e:	e012      	b.n	13ca6 <auto_nav+0x1cc6>
   13c80:	f64a 6324 	movw	r3, #44580	; 0xae24
   13c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c88:	681b      	ldr	r3, [r3, #0]
   13c8a:	4618      	mov	r0, r3
   13c8c:	f04f 0100 	mov.w	r1, #0
   13c90:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13c94:	f004 f9ca 	bl	1802c <__aeabi_fsub>
   13c98:	4603      	mov	r3, r0
   13c9a:	461a      	mov	r2, r3
   13c9c:	f64a 6324 	movw	r3, #44580	; 0xae24
   13ca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ca4:	601a      	str	r2, [r3, #0]
   13ca6:	f64a 6324 	movw	r3, #44580	; 0xae24
   13caa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13cae:	681b      	ldr	r3, [r3, #0]
   13cb0:	4618      	mov	r0, r3
   13cb2:	f04f 0100 	mov.w	r1, #0
   13cb6:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13cba:	f004 fc73 	bl	185a4 <__aeabi_fcmpge>
   13cbe:	4603      	mov	r3, r0
   13cc0:	2b00      	cmp	r3, #0
   13cc2:	d1dd      	bne.n	13c80 <auto_nav+0x1ca0>
        if (Qdr(0)) NextStage();
   13cc4:	f64a 6324 	movw	r3, #44580	; 0xae24
   13cc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ccc:	681b      	ldr	r3, [r3, #0]
   13cce:	4618      	mov	r0, r3
   13cd0:	f04f 0100 	mov.w	r1, #0
   13cd4:	f004 fc70 	bl	185b8 <__aeabi_fcmpgt>
   13cd8:	4603      	mov	r3, r0
   13cda:	2b00      	cmp	r3, #0
   13cdc:	d100      	bne.n	13ce0 <auto_nav+0x1d00>
        return;
   13cde:	e251      	b.n	14184 <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   13ce0:	f64a 6324 	movw	r3, #44580	; 0xae24
   13ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ce8:	681b      	ldr	r3, [r3, #0]
   13cea:	4618      	mov	r0, r3
   13cec:	f04f 0100 	mov.w	r1, #0
   13cf0:	f2c4 1120 	movt	r1, #16672	; 0x4120
   13cf4:	f004 fc42 	bl	1857c <__aeabi_fcmplt>
   13cf8:	4603      	mov	r3, r0
   13cfa:	2b00      	cmp	r3, #0
   13cfc:	d100      	bne.n	13d00 <auto_nav+0x1d20>
        return;
   13cfe:	e241      	b.n	14184 <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   13d00:	f64a 6308 	movw	r3, #44552	; 0xae08
   13d04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d08:	781b      	ldrb	r3, [r3, #0]
   13d0a:	3301      	adds	r3, #1
   13d0c:	b2da      	uxtb	r2, r3
   13d0e:	f64a 6308 	movw	r3, #44552	; 0xae08
   13d12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d16:	701a      	strb	r2, [r3, #0]
   13d18:	f24b 0364 	movw	r3, #45156	; 0xb064
   13d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d20:	681a      	ldr	r2, [r3, #0]
   13d22:	f64a 630c 	movw	r3, #44556	; 0xae0c
   13d26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d2a:	601a      	str	r2, [r3, #0]
   13d2c:	f24b 0368 	movw	r3, #45160	; 0xb068
   13d30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d34:	681a      	ldr	r2, [r3, #0]
   13d36:	f64a 6310 	movw	r3, #44560	; 0xae10
   13d3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d3e:	601a      	str	r2, [r3, #0]
   13d40:	f64a 631c 	movw	r3, #44572	; 0xae1c
   13d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d48:	2200      	movs	r2, #0
   13d4a:	801a      	strh	r2, [r3, #0]
   13d4c:	f64a 6320 	movw	r3, #44576	; 0xae20
   13d50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d54:	f04f 0200 	mov.w	r2, #0
   13d58:	601a      	str	r2, [r3, #0]
   13d5a:	e213      	b.n	14184 <auto_nav+0x21a4>
   13d5c:	f3af 8000 	nop.w
   13d60:	54442d18 	.word	0x54442d18
   13d64:	3ff921fb 	.word	0x3ff921fb
   13d68:	54442d18 	.word	0x54442d18
   13d6c:	400921fb 	.word	0x400921fb
        return;
    }
    else if (nav_stage == 2)
   13d70:	f64a 6308 	movw	r3, #44552	; 0xae08
   13d74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d78:	781b      	ldrb	r3, [r3, #0]
   13d7a:	2b02      	cmp	r3, #2
   13d7c:	f040 81ad 	bne.w	140da <auto_nav+0x20fa>
    {
         nav_stage = 2;
   13d80:	f64a 6308 	movw	r3, #44552	; 0xae08
   13d84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d88:	2202      	movs	r2, #2
   13d8a:	701a      	strb	r2, [r3, #0]
          auto_pitch = FALSE;
   13d8c:	f64a 2397 	movw	r3, #43671	; 0xaa97
   13d90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d94:	2200      	movs	r2, #0
   13d96:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   13d98:	f64a 6334 	movw	r3, #44596	; 0xae34
   13d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13da0:	f04f 0200 	mov.w	r2, #0
   13da4:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13da6:	f64a 2395 	movw	r3, #43669	; 0xaa95
   13daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13dae:	2203      	movs	r2, #3
   13db0:	701a      	strb	r2, [r3, #0]
          desired_altitude = waypoints[4].a;
   13db2:	f240 23bc 	movw	r3, #700	; 0x2bc
   13db6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13dba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   13dbc:	f240 23b8 	movw	r3, #696	; 0x2b8
   13dc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13dc4:	601a      	str	r2, [r3, #0]
          pre_climb = 0.;
   13dc6:	f64a 53fc 	movw	r3, #44540	; 0xadfc
   13dca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13dce:	f04f 0200 	mov.w	r2, #0
   13dd2:	601a      	str	r2, [r3, #0]
          Circle(4, 100);
   13dd4:	f24b 0368 	movw	r3, #45160	; 0xb068
   13dd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ddc:	681a      	ldr	r2, [r3, #0]
   13dde:	f240 23bc 	movw	r3, #700	; 0x2bc
   13de2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   13de8:	4610      	mov	r0, r2
   13dea:	4619      	mov	r1, r3
   13dec:	f004 f91e 	bl	1802c <__aeabi_fsub>
   13df0:	4603      	mov	r3, r0
   13df2:	4618      	mov	r0, r3
   13df4:	f003 fd90 	bl	17918 <__aeabi_f2d>
   13df8:	4604      	mov	r4, r0
   13dfa:	460d      	mov	r5, r1
   13dfc:	f24b 0364 	movw	r3, #45156	; 0xb064
   13e00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e04:	681a      	ldr	r2, [r3, #0]
   13e06:	f240 23bc 	movw	r3, #700	; 0x2bc
   13e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   13e10:	4610      	mov	r0, r2
   13e12:	4619      	mov	r1, r3
   13e14:	f004 f90a 	bl	1802c <__aeabi_fsub>
   13e18:	4603      	mov	r3, r0
   13e1a:	4618      	mov	r0, r3
   13e1c:	f003 fd7c 	bl	17918 <__aeabi_f2d>
   13e20:	4602      	mov	r2, r0
   13e22:	460b      	mov	r3, r1
   13e24:	4620      	mov	r0, r4
   13e26:	4629      	mov	r1, r5
   13e28:	f001 fbfa 	bl	15620 <pp_atan2>
   13e2c:	4602      	mov	r2, r0
   13e2e:	460b      	mov	r3, r1
   13e30:	4610      	mov	r0, r2
   13e32:	4619      	mov	r1, r3
   13e34:	f004 f8a6 	bl	17f84 <__aeabi_d2f>
   13e38:	4603      	mov	r3, r0
   13e3a:	607b      	str	r3, [r7, #4]
   13e3c:	6878      	ldr	r0, [r7, #4]
   13e3e:	f003 fd6b 	bl	17918 <__aeabi_f2d>
   13e42:	4604      	mov	r4, r0
   13e44:	460d      	mov	r5, r1
   13e46:	f24b 039c 	movw	r3, #45212	; 0xb09c
   13e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e4e:	681b      	ldr	r3, [r3, #0]
   13e50:	4618      	mov	r0, r3
   13e52:	f04f 0100 	mov.w	r1, #0
   13e56:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   13e5a:	f004 f9f1 	bl	18240 <__aeabi_fmul>
   13e5e:	4603      	mov	r3, r0
   13e60:	4618      	mov	r0, r3
   13e62:	f003 fd59 	bl	17918 <__aeabi_f2d>
   13e66:	4602      	mov	r2, r0
   13e68:	460b      	mov	r3, r1
   13e6a:	f04f 0000 	mov.w	r0, #0
   13e6e:	f04f 0100 	mov.w	r1, #0
   13e72:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13e76:	f003 fecd 	bl	17c14 <__aeabi_ddiv>
   13e7a:	4602      	mov	r2, r0
   13e7c:	460b      	mov	r3, r1
   13e7e:	4620      	mov	r0, r4
   13e80:	4629      	mov	r1, r5
   13e82:	f003 fbeb 	bl	1765c <__adddf3>
   13e86:	4602      	mov	r2, r0
   13e88:	460b      	mov	r3, r1
   13e8a:	4610      	mov	r0, r2
   13e8c:	4619      	mov	r1, r3
   13e8e:	f004 f879 	bl	17f84 <__aeabi_d2f>
   13e92:	4603      	mov	r3, r0
   13e94:	603b      	str	r3, [r7, #0]
   13e96:	f240 23bc 	movw	r3, #700	; 0x2bc
   13e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   13ea0:	4618      	mov	r0, r3
   13ea2:	f003 fd39 	bl	17918 <__aeabi_f2d>
   13ea6:	4604      	mov	r4, r0
   13ea8:	460d      	mov	r5, r1
   13eaa:	6838      	ldr	r0, [r7, #0]
   13eac:	f003 fd34 	bl	17918 <__aeabi_f2d>
   13eb0:	4602      	mov	r2, r0
   13eb2:	460b      	mov	r3, r1
   13eb4:	4610      	mov	r0, r2
   13eb6:	4619      	mov	r1, r3
   13eb8:	a3b5      	add	r3, pc, #724	; (adr r3, 14190 <auto_nav+0x21b0>)
   13eba:	e9d3 2300 	ldrd	r2, r3, [r3]
   13ebe:	f003 fbcd 	bl	1765c <__adddf3>
   13ec2:	4602      	mov	r2, r0
   13ec4:	460b      	mov	r3, r1
   13ec6:	4610      	mov	r0, r2
   13ec8:	4619      	mov	r1, r3
   13eca:	f001 fc69 	bl	157a0 <pp_sin>
   13ece:	4602      	mov	r2, r0
   13ed0:	460b      	mov	r3, r1
   13ed2:	4610      	mov	r0, r2
   13ed4:	4619      	mov	r1, r3
   13ed6:	f04f 0200 	mov.w	r2, #0
   13eda:	f04f 0300 	mov.w	r3, #0
   13ede:	f2c4 0359 	movt	r3, #16473	; 0x4059
   13ee2:	f003 fd6d 	bl	179c0 <__aeabi_dmul>
   13ee6:	4602      	mov	r2, r0
   13ee8:	460b      	mov	r3, r1
   13eea:	4620      	mov	r0, r4
   13eec:	4629      	mov	r1, r5
   13eee:	f003 fbb5 	bl	1765c <__adddf3>
   13ef2:	4602      	mov	r2, r0
   13ef4:	460b      	mov	r3, r1
   13ef6:	4610      	mov	r0, r2
   13ef8:	4619      	mov	r1, r3
   13efa:	f004 f843 	bl	17f84 <__aeabi_d2f>
   13efe:	4606      	mov	r6, r0
   13f00:	f240 23bc 	movw	r3, #700	; 0x2bc
   13f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   13f0a:	4618      	mov	r0, r3
   13f0c:	f003 fd04 	bl	17918 <__aeabi_f2d>
   13f10:	4604      	mov	r4, r0
   13f12:	460d      	mov	r5, r1
   13f14:	6838      	ldr	r0, [r7, #0]
   13f16:	f003 fcff 	bl	17918 <__aeabi_f2d>
   13f1a:	4602      	mov	r2, r0
   13f1c:	460b      	mov	r3, r1
   13f1e:	4610      	mov	r0, r2
   13f20:	4619      	mov	r1, r3
   13f22:	f001 fc3d 	bl	157a0 <pp_sin>
   13f26:	4602      	mov	r2, r0
   13f28:	460b      	mov	r3, r1
   13f2a:	4610      	mov	r0, r2
   13f2c:	4619      	mov	r1, r3
   13f2e:	f04f 0200 	mov.w	r2, #0
   13f32:	f04f 0300 	mov.w	r3, #0
   13f36:	f2c4 0359 	movt	r3, #16473	; 0x4059
   13f3a:	f003 fd41 	bl	179c0 <__aeabi_dmul>
   13f3e:	4602      	mov	r2, r0
   13f40:	460b      	mov	r3, r1
   13f42:	4620      	mov	r0, r4
   13f44:	4629      	mov	r1, r5
   13f46:	f003 fb89 	bl	1765c <__adddf3>
   13f4a:	4602      	mov	r2, r0
   13f4c:	460b      	mov	r3, r1
   13f4e:	4610      	mov	r0, r2
   13f50:	4619      	mov	r1, r3
   13f52:	f004 f817 	bl	17f84 <__aeabi_d2f>
   13f56:	4603      	mov	r3, r0
   13f58:	4630      	mov	r0, r6
   13f5a:	4619      	mov	r1, r3
   13f5c:	f000 fa04 	bl	14368 <fly_to_xy>
   13f60:	6838      	ldr	r0, [r7, #0]
   13f62:	f003 fcd9 	bl	17918 <__aeabi_f2d>
   13f66:	4602      	mov	r2, r0
   13f68:	460b      	mov	r3, r1
   13f6a:	a189      	add	r1, pc, #548	; (adr r1, 14190 <auto_nav+0x21b0>)
   13f6c:	e9d1 0100 	ldrd	r0, r1, [r1]
   13f70:	f003 fb72 	bl	17658 <__aeabi_dsub>
   13f74:	4602      	mov	r2, r0
   13f76:	460b      	mov	r3, r1
   13f78:	4610      	mov	r0, r2
   13f7a:	4619      	mov	r1, r3
   13f7c:	a386      	add	r3, pc, #536	; (adr r3, 14198 <auto_nav+0x21b8>)
   13f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   13f82:	f003 fe47 	bl	17c14 <__aeabi_ddiv>
   13f86:	4602      	mov	r2, r0
   13f88:	460b      	mov	r3, r1
   13f8a:	4610      	mov	r0, r2
   13f8c:	4619      	mov	r1, r3
   13f8e:	f04f 0200 	mov.w	r2, #0
   13f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13f96:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13f9a:	f003 fd11 	bl	179c0 <__aeabi_dmul>
   13f9e:	4602      	mov	r2, r0
   13fa0:	460b      	mov	r3, r1
   13fa2:	4610      	mov	r0, r2
   13fa4:	4619      	mov	r1, r3
   13fa6:	f003 ffed 	bl	17f84 <__aeabi_d2f>
   13faa:	4602      	mov	r2, r0
   13fac:	f64a 6324 	movw	r3, #44580	; 0xae24
   13fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13fb4:	601a      	str	r2, [r3, #0]
   13fb6:	e012      	b.n	13fde <auto_nav+0x1ffe>
   13fb8:	f64a 6324 	movw	r3, #44580	; 0xae24
   13fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13fc0:	681b      	ldr	r3, [r3, #0]
   13fc2:	4618      	mov	r0, r3
   13fc4:	f04f 0100 	mov.w	r1, #0
   13fc8:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13fcc:	f004 f830 	bl	18030 <__addsf3>
   13fd0:	4603      	mov	r3, r0
   13fd2:	461a      	mov	r2, r3
   13fd4:	f64a 6324 	movw	r3, #44580	; 0xae24
   13fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13fdc:	601a      	str	r2, [r3, #0]
   13fde:	f64a 6324 	movw	r3, #44580	; 0xae24
   13fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13fe6:	681b      	ldr	r3, [r3, #0]
   13fe8:	4618      	mov	r0, r3
   13fea:	f04f 0100 	mov.w	r1, #0
   13fee:	f004 fac5 	bl	1857c <__aeabi_fcmplt>
   13ff2:	4603      	mov	r3, r0
   13ff4:	2b00      	cmp	r3, #0
   13ff6:	d1df      	bne.n	13fb8 <auto_nav+0x1fd8>
   13ff8:	e012      	b.n	14020 <auto_nav+0x2040>
   13ffa:	f64a 6324 	movw	r3, #44580	; 0xae24
   13ffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14002:	681b      	ldr	r3, [r3, #0]
   14004:	4618      	mov	r0, r3
   14006:	f04f 0100 	mov.w	r1, #0
   1400a:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1400e:	f004 f80d 	bl	1802c <__aeabi_fsub>
   14012:	4603      	mov	r3, r0
   14014:	461a      	mov	r2, r3
   14016:	f64a 6324 	movw	r3, #44580	; 0xae24
   1401a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1401e:	601a      	str	r2, [r3, #0]
   14020:	f64a 6324 	movw	r3, #44580	; 0xae24
   14024:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14028:	681b      	ldr	r3, [r3, #0]
   1402a:	4618      	mov	r0, r3
   1402c:	f04f 0100 	mov.w	r1, #0
   14030:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14034:	f004 fab6 	bl	185a4 <__aeabi_fcmpge>
   14038:	4603      	mov	r3, r0
   1403a:	2b00      	cmp	r3, #0
   1403c:	d1dd      	bne.n	13ffa <auto_nav+0x201a>
          if (Qdr(180)) NextStage();
   1403e:	f64a 6324 	movw	r3, #44580	; 0xae24
   14042:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14046:	681b      	ldr	r3, [r3, #0]
   14048:	4618      	mov	r0, r3
   1404a:	f04f 0100 	mov.w	r1, #0
   1404e:	f2c4 3134 	movt	r1, #17204	; 0x4334
   14052:	f004 fab1 	bl	185b8 <__aeabi_fcmpgt>
   14056:	4603      	mov	r3, r0
   14058:	2b00      	cmp	r3, #0
   1405a:	d100      	bne.n	1405e <auto_nav+0x207e>
          return;
   1405c:	e092      	b.n	14184 <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   1405e:	f64a 6324 	movw	r3, #44580	; 0xae24
   14062:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14066:	681b      	ldr	r3, [r3, #0]
   14068:	4618      	mov	r0, r3
   1406a:	f04f 0100 	mov.w	r1, #0
   1406e:	f2c4 313e 	movt	r1, #17214	; 0x433e
   14072:	f004 fa83 	bl	1857c <__aeabi_fcmplt>
   14076:	4603      	mov	r3, r0
   14078:	2b00      	cmp	r3, #0
   1407a:	d100      	bne.n	1407e <auto_nav+0x209e>
          return;
   1407c:	e082      	b.n	14184 <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   1407e:	f64a 6308 	movw	r3, #44552	; 0xae08
   14082:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14086:	781b      	ldrb	r3, [r3, #0]
   14088:	3301      	adds	r3, #1
   1408a:	b2da      	uxtb	r2, r3
   1408c:	f64a 6308 	movw	r3, #44552	; 0xae08
   14090:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14094:	701a      	strb	r2, [r3, #0]
   14096:	f24b 0364 	movw	r3, #45156	; 0xb064
   1409a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1409e:	681a      	ldr	r2, [r3, #0]
   140a0:	f64a 630c 	movw	r3, #44556	; 0xae0c
   140a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140a8:	601a      	str	r2, [r3, #0]
   140aa:	f24b 0368 	movw	r3, #45160	; 0xb068
   140ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140b2:	681a      	ldr	r2, [r3, #0]
   140b4:	f64a 6310 	movw	r3, #44560	; 0xae10
   140b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140bc:	601a      	str	r2, [r3, #0]
   140be:	f64a 631c 	movw	r3, #44572	; 0xae1c
   140c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140c6:	2200      	movs	r2, #0
   140c8:	801a      	strh	r2, [r3, #0]
   140ca:	f64a 6320 	movw	r3, #44576	; 0xae20
   140ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140d2:	f04f 0200 	mov.w	r2, #0
   140d6:	601a      	str	r2, [r3, #0]
   140d8:	e054      	b.n	14184 <auto_nav+0x21a4>
          return;
    }
    else if (nav_stage == 3) 
   140da:	f64a 6308 	movw	r3, #44552	; 0xae08
   140de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140e2:	781b      	ldrb	r3, [r3, #0]
   140e4:	2b03      	cmp	r3, #3
   140e6:	d106      	bne.n	140f6 <auto_nav+0x2116>
    {
	  nav_stage = 3;
   140e8:	f64a 6308 	movw	r3, #44552	; 0xae08
   140ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140f0:	2203      	movs	r2, #3
   140f2:	701a      	strb	r2, [r3, #0]
          Goto(while_7)
   140f4:	e44b      	b.n	1398e <auto_nav+0x19ae>
    }
    else if (nav_stage == 4)
   140f6:	f64a 6308 	movw	r3, #44552	; 0xae08
   140fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140fe:	781b      	ldrb	r3, [r3, #0]
   14100:	2b04      	cmp	r3, #4
   14102:	d13f      	bne.n	14184 <auto_nav+0x21a4>
    {
	Label(endwhile_8)
	nav_stage = 4;
   14104:	f64a 6308 	movw	r3, #44552	; 0xae08
   14108:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1410c:	2204      	movs	r2, #4
   1410e:	701a      	strb	r2, [r3, #0]
        NextBlock()
   14110:	f64a 6309 	movw	r3, #44553	; 0xae09
   14114:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14118:	781b      	ldrb	r3, [r3, #0]
   1411a:	3301      	adds	r3, #1
   1411c:	b2da      	uxtb	r2, r3
   1411e:	f64a 6309 	movw	r3, #44553	; 0xae09
   14122:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14126:	701a      	strb	r2, [r3, #0]
   14128:	f64a 6308 	movw	r3, #44552	; 0xae08
   1412c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14130:	2200      	movs	r2, #0
   14132:	701a      	strb	r2, [r3, #0]
   14134:	f64a 631e 	movw	r3, #44574	; 0xae1e
   14138:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1413c:	2200      	movs	r2, #0
   1413e:	801a      	strh	r2, [r3, #0]
   14140:	f24b 0364 	movw	r3, #45156	; 0xb064
   14144:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14148:	681a      	ldr	r2, [r3, #0]
   1414a:	f64a 630c 	movw	r3, #44556	; 0xae0c
   1414e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14152:	601a      	str	r2, [r3, #0]
   14154:	f24b 0368 	movw	r3, #45160	; 0xb068
   14158:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1415c:	681a      	ldr	r2, [r3, #0]
   1415e:	f64a 6310 	movw	r3, #44560	; 0xae10
   14162:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14166:	601a      	str	r2, [r3, #0]
   14168:	f64a 631c 	movw	r3, #44572	; 0xae1c
   1416c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14170:	2200      	movs	r2, #0
   14172:	801a      	strh	r2, [r3, #0]
   14174:	f64a 6320 	movw	r3, #44576	; 0xae20
   14178:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1417c:	f04f 0200 	mov.w	r2, #0
   14180:	601a      	str	r2, [r3, #0]
   14182:	bf00      	nop
    else { }
}
else { }

//#endif
}
   14184:	372c      	adds	r7, #44	; 0x2c
   14186:	46bd      	mov	sp, r7
   14188:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1418a:	bf00      	nop
   1418c:	f3af 8000 	nop.w
   14190:	54442d18 	.word	0x54442d18
   14194:	3ff921fb 	.word	0x3ff921fb
   14198:	54442d18 	.word	0x54442d18
   1419c:	400921fb 	.word	0x400921fb

000141a0 <approaching>:
const uint8_t nb_waypoint = NB_WAYPOINT;

struct point waypoints[NB_WAYPOINT+1] = WAYPOINTS;

static float carrot;
static bool_t approaching(uint8_t wp) {
   141a0:	b590      	push	{r4, r7, lr}
   141a2:	b087      	sub	sp, #28
   141a4:	af00      	add	r7, sp, #0
   141a6:	4603      	mov	r3, r0
   141a8:	71fb      	strb	r3, [r7, #7]
  float pw_x = waypoints[wp].x - estimator_x;
   141aa:	79f9      	ldrb	r1, [r7, #7]
   141ac:	f240 22bc 	movw	r2, #700	; 0x2bc
   141b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   141b4:	460b      	mov	r3, r1
   141b6:	005b      	lsls	r3, r3, #1
   141b8:	440b      	add	r3, r1
   141ba:	009b      	lsls	r3, r3, #2
   141bc:	4413      	add	r3, r2
   141be:	681a      	ldr	r2, [r3, #0]
   141c0:	f24b 0364 	movw	r3, #45156	; 0xb064
   141c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141c8:	681b      	ldr	r3, [r3, #0]
   141ca:	4610      	mov	r0, r2
   141cc:	4619      	mov	r1, r3
   141ce:	f003 ff2d 	bl	1802c <__aeabi_fsub>
   141d2:	4603      	mov	r3, r0
   141d4:	617b      	str	r3, [r7, #20]
  float pw_y = waypoints[wp].y - estimator_y;
   141d6:	79f9      	ldrb	r1, [r7, #7]
   141d8:	f240 22bc 	movw	r2, #700	; 0x2bc
   141dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   141e0:	460b      	mov	r3, r1
   141e2:	005b      	lsls	r3, r3, #1
   141e4:	440b      	add	r3, r1
   141e6:	009b      	lsls	r3, r3, #2
   141e8:	4413      	add	r3, r2
   141ea:	3304      	adds	r3, #4
   141ec:	681a      	ldr	r2, [r3, #0]
   141ee:	f24b 0368 	movw	r3, #45160	; 0xb068
   141f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141f6:	681b      	ldr	r3, [r3, #0]
   141f8:	4610      	mov	r0, r2
   141fa:	4619      	mov	r1, r3
   141fc:	f003 ff16 	bl	1802c <__aeabi_fsub>
   14200:	4603      	mov	r3, r0
   14202:	613b      	str	r3, [r7, #16]
  float scal_prod;//changes for PowerPc Fev-06

  dist2_to_wp = pw_x*pw_x + pw_y *pw_y;
   14204:	6978      	ldr	r0, [r7, #20]
   14206:	6979      	ldr	r1, [r7, #20]
   14208:	f004 f81a 	bl	18240 <__aeabi_fmul>
   1420c:	4603      	mov	r3, r0
   1420e:	461c      	mov	r4, r3
   14210:	6938      	ldr	r0, [r7, #16]
   14212:	6939      	ldr	r1, [r7, #16]
   14214:	f004 f814 	bl	18240 <__aeabi_fmul>
   14218:	4603      	mov	r3, r0
   1421a:	4620      	mov	r0, r4
   1421c:	4619      	mov	r1, r3
   1421e:	f003 ff07 	bl	18030 <__addsf3>
   14222:	4603      	mov	r3, r0
   14224:	461a      	mov	r2, r3
   14226:	f64a 633c 	movw	r3, #44604	; 0xae3c
   1422a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1422e:	601a      	str	r2, [r3, #0]
  carrot = CARROT * estimator_hspeed_mod;
   14230:	f24b 039c 	movw	r3, #45212	; 0xb09c
   14234:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14238:	681b      	ldr	r3, [r3, #0]
   1423a:	4618      	mov	r0, r3
   1423c:	f04f 0100 	mov.w	r1, #0
   14240:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   14244:	f003 fffc 	bl	18240 <__aeabi_fmul>
   14248:	4603      	mov	r3, r0
   1424a:	461a      	mov	r2, r3
   1424c:	f64a 6348 	movw	r3, #44616	; 0xae48
   14250:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14254:	601a      	str	r2, [r3, #0]
  carrot = (carrot < 40 ? 40 : carrot);
   14256:	f64a 6348 	movw	r3, #44616	; 0xae48
   1425a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1425e:	681b      	ldr	r3, [r3, #0]
   14260:	4618      	mov	r0, r3
   14262:	f04f 0100 	mov.w	r1, #0
   14266:	f2c4 2120 	movt	r1, #16928	; 0x4220
   1426a:	f004 f987 	bl	1857c <__aeabi_fcmplt>
   1426e:	4603      	mov	r3, r0
   14270:	2b00      	cmp	r3, #0
   14272:	d004      	beq.n	1427e <approaching+0xde>
   14274:	f04f 0200 	mov.w	r2, #0
   14278:	f2c4 2220 	movt	r2, #16928	; 0x4220
   1427c:	e004      	b.n	14288 <approaching+0xe8>
   1427e:	f64a 6348 	movw	r3, #44616	; 0xae48
   14282:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14286:	681a      	ldr	r2, [r3, #0]
   14288:	f64a 6348 	movw	r3, #44616	; 0xae48
   1428c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14290:	601a      	str	r2, [r3, #0]
  if (dist2_to_wp < carrot*carrot)
   14292:	f64a 6348 	movw	r3, #44616	; 0xae48
   14296:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1429a:	681a      	ldr	r2, [r3, #0]
   1429c:	f64a 6348 	movw	r3, #44616	; 0xae48
   142a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142a4:	681b      	ldr	r3, [r3, #0]
   142a6:	4610      	mov	r0, r2
   142a8:	4619      	mov	r1, r3
   142aa:	f003 ffc9 	bl	18240 <__aeabi_fmul>
   142ae:	4603      	mov	r3, r0
   142b0:	461a      	mov	r2, r3
   142b2:	f64a 633c 	movw	r3, #44604	; 0xae3c
   142b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142ba:	681b      	ldr	r3, [r3, #0]
   142bc:	4610      	mov	r0, r2
   142be:	4619      	mov	r1, r3
   142c0:	f004 f97a 	bl	185b8 <__aeabi_fcmpgt>
   142c4:	4603      	mov	r3, r0
   142c6:	2b00      	cmp	r3, #0
   142c8:	d001      	beq.n	142ce <approaching+0x12e>
    return TRUE;
   142ca:	2301      	movs	r3, #1
   142cc:	e048      	b.n	14360 <approaching+0x1c0>

  scal_prod = (waypoints[wp].x - last_x) * pw_x + (waypoints[wp].y - last_y) * pw_y;
   142ce:	79f9      	ldrb	r1, [r7, #7]
   142d0:	f240 22bc 	movw	r2, #700	; 0x2bc
   142d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   142d8:	460b      	mov	r3, r1
   142da:	005b      	lsls	r3, r3, #1
   142dc:	440b      	add	r3, r1
   142de:	009b      	lsls	r3, r3, #2
   142e0:	4413      	add	r3, r2
   142e2:	681a      	ldr	r2, [r3, #0]
   142e4:	f64a 630c 	movw	r3, #44556	; 0xae0c
   142e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142ec:	681b      	ldr	r3, [r3, #0]
   142ee:	4610      	mov	r0, r2
   142f0:	4619      	mov	r1, r3
   142f2:	f003 fe9b 	bl	1802c <__aeabi_fsub>
   142f6:	4603      	mov	r3, r0
   142f8:	4618      	mov	r0, r3
   142fa:	6979      	ldr	r1, [r7, #20]
   142fc:	f003 ffa0 	bl	18240 <__aeabi_fmul>
   14300:	4603      	mov	r3, r0
   14302:	461c      	mov	r4, r3
   14304:	79f9      	ldrb	r1, [r7, #7]
   14306:	f240 22bc 	movw	r2, #700	; 0x2bc
   1430a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1430e:	460b      	mov	r3, r1
   14310:	005b      	lsls	r3, r3, #1
   14312:	440b      	add	r3, r1
   14314:	009b      	lsls	r3, r3, #2
   14316:	4413      	add	r3, r2
   14318:	3304      	adds	r3, #4
   1431a:	681a      	ldr	r2, [r3, #0]
   1431c:	f64a 6310 	movw	r3, #44560	; 0xae10
   14320:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14324:	681b      	ldr	r3, [r3, #0]
   14326:	4610      	mov	r0, r2
   14328:	4619      	mov	r1, r3
   1432a:	f003 fe7f 	bl	1802c <__aeabi_fsub>
   1432e:	4603      	mov	r3, r0
   14330:	4618      	mov	r0, r3
   14332:	6939      	ldr	r1, [r7, #16]
   14334:	f003 ff84 	bl	18240 <__aeabi_fmul>
   14338:	4603      	mov	r3, r0
   1433a:	4620      	mov	r0, r4
   1433c:	4619      	mov	r1, r3
   1433e:	f003 fe77 	bl	18030 <__addsf3>
   14342:	4603      	mov	r3, r0
   14344:	60fb      	str	r3, [r7, #12]
  
  return (scal_prod < 0);
   14346:	2301      	movs	r3, #1
   14348:	461c      	mov	r4, r3
   1434a:	68f8      	ldr	r0, [r7, #12]
   1434c:	f04f 0100 	mov.w	r1, #0
   14350:	f004 f914 	bl	1857c <__aeabi_fcmplt>
   14354:	4603      	mov	r3, r0
   14356:	2b00      	cmp	r3, #0
   14358:	d101      	bne.n	1435e <approaching+0x1be>
   1435a:	2300      	movs	r3, #0
   1435c:	461c      	mov	r4, r3
   1435e:	b2e3      	uxtb	r3, r4
}
   14360:	4618      	mov	r0, r3
   14362:	371c      	adds	r7, #28
   14364:	46bd      	mov	sp, r7
   14366:	bd90      	pop	{r4, r7, pc}

00014368 <fly_to_xy>:

static inline void fly_to_xy(float x, float y) 
{ 
   14368:	b5b0      	push	{r4, r5, r7, lr}
   1436a:	b082      	sub	sp, #8
   1436c:	af00      	add	r7, sp, #0
   1436e:	6078      	str	r0, [r7, #4]
   14370:	6039      	str	r1, [r7, #0]
  desired_x = x;
   14372:	f64a 6328 	movw	r3, #44584	; 0xae28
   14376:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1437a:	687a      	ldr	r2, [r7, #4]
   1437c:	601a      	str	r2, [r3, #0]
  desired_y = y;
   1437e:	f64a 632c 	movw	r3, #44588	; 0xae2c
   14382:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14386:	683a      	ldr	r2, [r7, #0]
   14388:	601a      	str	r2, [r3, #0]
  desired_course = M_PI/2.-atan2(y - estimator_y, x - estimator_x);
   1438a:	f24b 0368 	movw	r3, #45160	; 0xb068
   1438e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14392:	681b      	ldr	r3, [r3, #0]
   14394:	6838      	ldr	r0, [r7, #0]
   14396:	4619      	mov	r1, r3
   14398:	f003 fe48 	bl	1802c <__aeabi_fsub>
   1439c:	4603      	mov	r3, r0
   1439e:	4618      	mov	r0, r3
   143a0:	f003 faba 	bl	17918 <__aeabi_f2d>
   143a4:	4604      	mov	r4, r0
   143a6:	460d      	mov	r5, r1
   143a8:	f24b 0364 	movw	r3, #45156	; 0xb064
   143ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143b0:	681b      	ldr	r3, [r3, #0]
   143b2:	6878      	ldr	r0, [r7, #4]
   143b4:	4619      	mov	r1, r3
   143b6:	f003 fe39 	bl	1802c <__aeabi_fsub>
   143ba:	4603      	mov	r3, r0
   143bc:	4618      	mov	r0, r3
   143be:	f003 faab 	bl	17918 <__aeabi_f2d>
   143c2:	4602      	mov	r2, r0
   143c4:	460b      	mov	r3, r1
   143c6:	4620      	mov	r0, r4
   143c8:	4629      	mov	r1, r5
   143ca:	f001 f929 	bl	15620 <pp_atan2>
   143ce:	4602      	mov	r2, r0
   143d0:	460b      	mov	r3, r1
   143d2:	a10b      	add	r1, pc, #44	; (adr r1, 14400 <fly_to_xy+0x98>)
   143d4:	e9d1 0100 	ldrd	r0, r1, [r1]
   143d8:	f003 f93e 	bl	17658 <__aeabi_dsub>
   143dc:	4602      	mov	r2, r0
   143de:	460b      	mov	r3, r1
   143e0:	4610      	mov	r0, r2
   143e2:	4619      	mov	r1, r3
   143e4:	f003 fdce 	bl	17f84 <__aeabi_d2f>
   143e8:	4602      	mov	r2, r0
   143ea:	f64a 53f4 	movw	r3, #44532	; 0xadf4
   143ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143f2:	601a      	str	r2, [r3, #0]
}
   143f4:	3708      	adds	r7, #8
   143f6:	46bd      	mov	sp, r7
   143f8:	bdb0      	pop	{r4, r5, r7, pc}
   143fa:	bf00      	nop
   143fc:	f3af 8000 	nop.w
   14400:	54442d18 	.word	0x54442d18
   14404:	3ff921fb 	.word	0x3ff921fb

00014408 <fly_to>:

static void fly_to(uint8_t wp) { 
   14408:	b580      	push	{r7, lr}
   1440a:	b082      	sub	sp, #8
   1440c:	af00      	add	r7, sp, #0
   1440e:	4603      	mov	r3, r0
   14410:	71fb      	strb	r3, [r7, #7]
  fly_to_xy(waypoints[wp].x, waypoints[wp].y);
   14412:	79f9      	ldrb	r1, [r7, #7]
   14414:	f240 22bc 	movw	r2, #700	; 0x2bc
   14418:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1441c:	460b      	mov	r3, r1
   1441e:	005b      	lsls	r3, r3, #1
   14420:	440b      	add	r3, r1
   14422:	009b      	lsls	r3, r3, #2
   14424:	4413      	add	r3, r2
   14426:	6818      	ldr	r0, [r3, #0]
   14428:	79f9      	ldrb	r1, [r7, #7]
   1442a:	f240 22bc 	movw	r2, #700	; 0x2bc
   1442e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14432:	460b      	mov	r3, r1
   14434:	005b      	lsls	r3, r3, #1
   14436:	440b      	add	r3, r1
   14438:	009b      	lsls	r3, r3, #2
   1443a:	4413      	add	r3, r2
   1443c:	3304      	adds	r3, #4
   1443e:	681b      	ldr	r3, [r3, #0]
   14440:	4619      	mov	r1, r3
   14442:	f7ff ff91 	bl	14368 <fly_to_xy>
}
   14446:	3708      	adds	r7, #8
   14448:	46bd      	mov	sp, r7
   1444a:	bd80      	pop	{r7, pc}

0001444c <route_to>:

static float alpha, leg;
static void route_to(uint8_t _last_wp, uint8_t wp) 
{
   1444c:	b5b0      	push	{r4, r5, r7, lr}
   1444e:	b088      	sub	sp, #32
   14450:	af00      	add	r7, sp, #0
   14452:	4602      	mov	r2, r0
   14454:	460b      	mov	r3, r1
   14456:	71fa      	strb	r2, [r7, #7]
   14458:	71bb      	strb	r3, [r7, #6]
  float last_wp_x = waypoints[_last_wp].x;
   1445a:	79f9      	ldrb	r1, [r7, #7]
   1445c:	f240 22bc 	movw	r2, #700	; 0x2bc
   14460:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14464:	460b      	mov	r3, r1
   14466:	005b      	lsls	r3, r3, #1
   14468:	440b      	add	r3, r1
   1446a:	009b      	lsls	r3, r3, #2
   1446c:	4413      	add	r3, r2
   1446e:	681b      	ldr	r3, [r3, #0]
   14470:	61fb      	str	r3, [r7, #28]
  float last_wp_y = waypoints[_last_wp].y;
   14472:	79f9      	ldrb	r1, [r7, #7]
   14474:	f240 22bc 	movw	r2, #700	; 0x2bc
   14478:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1447c:	460b      	mov	r3, r1
   1447e:	005b      	lsls	r3, r3, #1
   14480:	440b      	add	r3, r1
   14482:	009b      	lsls	r3, r3, #2
   14484:	4413      	add	r3, r2
   14486:	3304      	adds	r3, #4
   14488:	681b      	ldr	r3, [r3, #0]
   1448a:	61bb      	str	r3, [r7, #24]
  float leg_x = waypoints[wp].x - last_wp_x;
   1448c:	79b9      	ldrb	r1, [r7, #6]
   1448e:	f240 22bc 	movw	r2, #700	; 0x2bc
   14492:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14496:	460b      	mov	r3, r1
   14498:	005b      	lsls	r3, r3, #1
   1449a:	440b      	add	r3, r1
   1449c:	009b      	lsls	r3, r3, #2
   1449e:	4413      	add	r3, r2
   144a0:	681b      	ldr	r3, [r3, #0]
   144a2:	4618      	mov	r0, r3
   144a4:	69f9      	ldr	r1, [r7, #28]
   144a6:	f003 fdc1 	bl	1802c <__aeabi_fsub>
   144aa:	4603      	mov	r3, r0
   144ac:	617b      	str	r3, [r7, #20]
  float leg_y = waypoints[wp].y - last_wp_y;
   144ae:	79b9      	ldrb	r1, [r7, #6]
   144b0:	f240 22bc 	movw	r2, #700	; 0x2bc
   144b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   144b8:	460b      	mov	r3, r1
   144ba:	005b      	lsls	r3, r3, #1
   144bc:	440b      	add	r3, r1
   144be:	009b      	lsls	r3, r3, #2
   144c0:	4413      	add	r3, r2
   144c2:	3304      	adds	r3, #4
   144c4:	681b      	ldr	r3, [r3, #0]
   144c6:	4618      	mov	r0, r3
   144c8:	69b9      	ldr	r1, [r7, #24]
   144ca:	f003 fdaf 	bl	1802c <__aeabi_fsub>
   144ce:	4603      	mov	r3, r0
   144d0:	613b      	str	r3, [r7, #16]
  float leg2 = leg_x * leg_x + leg_y * leg_y;
   144d2:	6978      	ldr	r0, [r7, #20]
   144d4:	6979      	ldr	r1, [r7, #20]
   144d6:	f003 feb3 	bl	18240 <__aeabi_fmul>
   144da:	4603      	mov	r3, r0
   144dc:	461c      	mov	r4, r3
   144de:	6938      	ldr	r0, [r7, #16]
   144e0:	6939      	ldr	r1, [r7, #16]
   144e2:	f003 fead 	bl	18240 <__aeabi_fmul>
   144e6:	4603      	mov	r3, r0
   144e8:	4620      	mov	r0, r4
   144ea:	4619      	mov	r1, r3
   144ec:	f003 fda0 	bl	18030 <__addsf3>
   144f0:	4603      	mov	r3, r0
   144f2:	60fb      	str	r3, [r7, #12]
  alpha = ((estimator_x - last_wp_x) * leg_x + (estimator_y - last_wp_y) * leg_y) / leg2;
   144f4:	f24b 0364 	movw	r3, #45156	; 0xb064
   144f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144fc:	681b      	ldr	r3, [r3, #0]
   144fe:	4618      	mov	r0, r3
   14500:	69f9      	ldr	r1, [r7, #28]
   14502:	f003 fd93 	bl	1802c <__aeabi_fsub>
   14506:	4603      	mov	r3, r0
   14508:	4618      	mov	r0, r3
   1450a:	6979      	ldr	r1, [r7, #20]
   1450c:	f003 fe98 	bl	18240 <__aeabi_fmul>
   14510:	4603      	mov	r3, r0
   14512:	461c      	mov	r4, r3
   14514:	f24b 0368 	movw	r3, #45160	; 0xb068
   14518:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1451c:	681b      	ldr	r3, [r3, #0]
   1451e:	4618      	mov	r0, r3
   14520:	69b9      	ldr	r1, [r7, #24]
   14522:	f003 fd83 	bl	1802c <__aeabi_fsub>
   14526:	4603      	mov	r3, r0
   14528:	4618      	mov	r0, r3
   1452a:	6939      	ldr	r1, [r7, #16]
   1452c:	f003 fe88 	bl	18240 <__aeabi_fmul>
   14530:	4603      	mov	r3, r0
   14532:	4620      	mov	r0, r4
   14534:	4619      	mov	r1, r3
   14536:	f003 fd7b 	bl	18030 <__addsf3>
   1453a:	4603      	mov	r3, r0
   1453c:	4618      	mov	r0, r3
   1453e:	68f9      	ldr	r1, [r7, #12]
   14540:	f003 ff32 	bl	183a8 <__aeabi_fdiv>
   14544:	4603      	mov	r3, r0
   14546:	461a      	mov	r2, r3
   14548:	f64a 634c 	movw	r3, #44620	; 0xae4c
   1454c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14550:	601a      	str	r2, [r3, #0]
  alpha = Max(alpha, 0.);
   14552:	f64a 634c 	movw	r3, #44620	; 0xae4c
   14556:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1455a:	681b      	ldr	r3, [r3, #0]
   1455c:	4618      	mov	r0, r3
   1455e:	f04f 0100 	mov.w	r1, #0
   14562:	f004 f81f 	bl	185a4 <__aeabi_fcmpge>
   14566:	4603      	mov	r3, r0
   14568:	2b00      	cmp	r3, #0
   1456a:	d005      	beq.n	14578 <route_to+0x12c>
   1456c:	f64a 634c 	movw	r3, #44620	; 0xae4c
   14570:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14574:	681a      	ldr	r2, [r3, #0]
   14576:	e001      	b.n	1457c <route_to+0x130>
   14578:	f04f 0200 	mov.w	r2, #0
   1457c:	f64a 634c 	movw	r3, #44620	; 0xae4c
   14580:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14584:	601a      	str	r2, [r3, #0]
  leg = sqrt(leg2);
   14586:	68f8      	ldr	r0, [r7, #12]
   14588:	f003 f9c6 	bl	17918 <__aeabi_f2d>
   1458c:	4602      	mov	r2, r0
   1458e:	460b      	mov	r3, r1
   14590:	4610      	mov	r0, r2
   14592:	4619      	mov	r1, r3
   14594:	f001 f9f4 	bl	15980 <pp_sqrt>
   14598:	4602      	mov	r2, r0
   1459a:	460b      	mov	r3, r1
   1459c:	4610      	mov	r0, r2
   1459e:	4619      	mov	r1, r3
   145a0:	f003 fcf0 	bl	17f84 <__aeabi_d2f>
   145a4:	4602      	mov	r2, r0
   145a6:	f64a 6350 	movw	r3, #44624	; 0xae50
   145aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   145ae:	601a      	str	r2, [r3, #0]
  alpha += Max(carrot / leg, 0.); /* carrot computed in approaching() */
   145b0:	f64a 634c 	movw	r3, #44620	; 0xae4c
   145b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   145b8:	681b      	ldr	r3, [r3, #0]
   145ba:	4618      	mov	r0, r3
   145bc:	f003 f9ac 	bl	17918 <__aeabi_f2d>
   145c0:	4604      	mov	r4, r0
   145c2:	460d      	mov	r5, r1
   145c4:	f64a 6348 	movw	r3, #44616	; 0xae48
   145c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   145cc:	681a      	ldr	r2, [r3, #0]
   145ce:	f64a 6350 	movw	r3, #44624	; 0xae50
   145d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   145d6:	681b      	ldr	r3, [r3, #0]
   145d8:	4610      	mov	r0, r2
   145da:	4619      	mov	r1, r3
   145dc:	f003 fee4 	bl	183a8 <__aeabi_fdiv>
   145e0:	4603      	mov	r3, r0
   145e2:	4618      	mov	r0, r3
   145e4:	f04f 0100 	mov.w	r1, #0
   145e8:	f003 ffdc 	bl	185a4 <__aeabi_fcmpge>
   145ec:	4603      	mov	r3, r0
   145ee:	2b00      	cmp	r3, #0
   145f0:	d014      	beq.n	1461c <route_to+0x1d0>
   145f2:	f64a 6348 	movw	r3, #44616	; 0xae48
   145f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   145fa:	681a      	ldr	r2, [r3, #0]
   145fc:	f64a 6350 	movw	r3, #44624	; 0xae50
   14600:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14604:	681b      	ldr	r3, [r3, #0]
   14606:	4610      	mov	r0, r2
   14608:	4619      	mov	r1, r3
   1460a:	f003 fecd 	bl	183a8 <__aeabi_fdiv>
   1460e:	4603      	mov	r3, r0
   14610:	4618      	mov	r0, r3
   14612:	f003 f981 	bl	17918 <__aeabi_f2d>
   14616:	4602      	mov	r2, r0
   14618:	460b      	mov	r3, r1
   1461a:	e003      	b.n	14624 <route_to+0x1d8>
   1461c:	f04f 0200 	mov.w	r2, #0
   14620:	f04f 0300 	mov.w	r3, #0
   14624:	4620      	mov	r0, r4
   14626:	4629      	mov	r1, r5
   14628:	f003 f818 	bl	1765c <__adddf3>
   1462c:	4602      	mov	r2, r0
   1462e:	460b      	mov	r3, r1
   14630:	4610      	mov	r0, r2
   14632:	4619      	mov	r1, r3
   14634:	f003 fca6 	bl	17f84 <__aeabi_d2f>
   14638:	4602      	mov	r2, r0
   1463a:	f64a 634c 	movw	r3, #44620	; 0xae4c
   1463e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14642:	601a      	str	r2, [r3, #0]
  alpha = Min(1., alpha);
   14644:	f64a 634c 	movw	r3, #44620	; 0xae4c
   14648:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1464c:	681b      	ldr	r3, [r3, #0]
   1464e:	4618      	mov	r0, r3
   14650:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   14654:	f003 ffa6 	bl	185a4 <__aeabi_fcmpge>
   14658:	4603      	mov	r3, r0
   1465a:	2b00      	cmp	r3, #0
   1465c:	d002      	beq.n	14664 <route_to+0x218>
   1465e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   14662:	e004      	b.n	1466e <route_to+0x222>
   14664:	f64a 634c 	movw	r3, #44620	; 0xae4c
   14668:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1466c:	681a      	ldr	r2, [r3, #0]
   1466e:	f64a 634c 	movw	r3, #44620	; 0xae4c
   14672:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14676:	601a      	str	r2, [r3, #0]
  fly_to_xy(last_wp_x + alpha*leg_x, last_wp_y + alpha*leg_y);
   14678:	f64a 634c 	movw	r3, #44620	; 0xae4c
   1467c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14680:	681b      	ldr	r3, [r3, #0]
   14682:	4618      	mov	r0, r3
   14684:	6979      	ldr	r1, [r7, #20]
   14686:	f003 fddb 	bl	18240 <__aeabi_fmul>
   1468a:	4603      	mov	r3, r0
   1468c:	4618      	mov	r0, r3
   1468e:	69f9      	ldr	r1, [r7, #28]
   14690:	f003 fcce 	bl	18030 <__addsf3>
   14694:	4603      	mov	r3, r0
   14696:	461c      	mov	r4, r3
   14698:	f64a 634c 	movw	r3, #44620	; 0xae4c
   1469c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   146a0:	681b      	ldr	r3, [r3, #0]
   146a2:	4618      	mov	r0, r3
   146a4:	6939      	ldr	r1, [r7, #16]
   146a6:	f003 fdcb 	bl	18240 <__aeabi_fmul>
   146aa:	4603      	mov	r3, r0
   146ac:	4618      	mov	r0, r3
   146ae:	69b9      	ldr	r1, [r7, #24]
   146b0:	f003 fcbe 	bl	18030 <__addsf3>
   146b4:	4603      	mov	r3, r0
   146b6:	4620      	mov	r0, r4
   146b8:	4619      	mov	r1, r3
   146ba:	f7ff fe55 	bl	14368 <fly_to_xy>
}
   146be:	3720      	adds	r7, #32
   146c0:	46bd      	mov	sp, r7
   146c2:	bdb0      	pop	{r4, r5, r7, pc}

000146c4 <compute_dist2_to_home>:
  float last_alt = waypoints[_last_wp].a;
  desired_altitude = last_alt + alpha * (waypoints[wp].a - last_alt);
  pre_climb = NOMINAL_AIRSPEED * (waypoints[wp].a - last_alt) / leg;
}*/

static inline void compute_dist2_to_home(void) {
   146c4:	b590      	push	{r4, r7, lr}
   146c6:	b083      	sub	sp, #12
   146c8:	af00      	add	r7, sp, #0
  float ph_x = waypoints[WP_HOME].x - estimator_x;
   146ca:	f240 23bc 	movw	r3, #700	; 0x2bc
   146ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   146d2:	681a      	ldr	r2, [r3, #0]
   146d4:	f24b 0364 	movw	r3, #45156	; 0xb064
   146d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   146dc:	681b      	ldr	r3, [r3, #0]
   146de:	4610      	mov	r0, r2
   146e0:	4619      	mov	r1, r3
   146e2:	f003 fca3 	bl	1802c <__aeabi_fsub>
   146e6:	4603      	mov	r3, r0
   146e8:	607b      	str	r3, [r7, #4]
  float ph_y = waypoints[WP_HOME].y - estimator_y;
   146ea:	f240 23bc 	movw	r3, #700	; 0x2bc
   146ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   146f2:	685a      	ldr	r2, [r3, #4]
   146f4:	f24b 0368 	movw	r3, #45160	; 0xb068
   146f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   146fc:	681b      	ldr	r3, [r3, #0]
   146fe:	4610      	mov	r0, r2
   14700:	4619      	mov	r1, r3
   14702:	f003 fc93 	bl	1802c <__aeabi_fsub>
   14706:	4603      	mov	r3, r0
   14708:	603b      	str	r3, [r7, #0]
  dist2_to_home = ph_x*ph_x + ph_y *ph_y;
   1470a:	6878      	ldr	r0, [r7, #4]
   1470c:	6879      	ldr	r1, [r7, #4]
   1470e:	f003 fd97 	bl	18240 <__aeabi_fmul>
   14712:	4603      	mov	r3, r0
   14714:	461c      	mov	r4, r3
   14716:	6838      	ldr	r0, [r7, #0]
   14718:	6839      	ldr	r1, [r7, #0]
   1471a:	f003 fd91 	bl	18240 <__aeabi_fmul>
   1471e:	4603      	mov	r3, r0
   14720:	4620      	mov	r0, r4
   14722:	4619      	mov	r1, r3
   14724:	f003 fc84 	bl	18030 <__addsf3>
   14728:	4603      	mov	r3, r0
   1472a:	461a      	mov	r2, r3
   1472c:	f64a 6340 	movw	r3, #44608	; 0xae40
   14730:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14734:	601a      	str	r2, [r3, #0]
  too_far_from_home = dist2_to_home > (MAX_DIST_FROM_HOME*MAX_DIST_FROM_HOME);
   14736:	f64a 6340 	movw	r3, #44608	; 0xae40
   1473a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1473e:	681b      	ldr	r3, [r3, #0]
   14740:	2201      	movs	r2, #1
   14742:	4614      	mov	r4, r2
   14744:	4618      	mov	r0, r3
   14746:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   1474a:	f6c4 0174 	movt	r1, #18548	; 0x4874
   1474e:	f003 ff33 	bl	185b8 <__aeabi_fcmpgt>
   14752:	4603      	mov	r3, r0
   14754:	2b00      	cmp	r3, #0
   14756:	d101      	bne.n	1475c <compute_dist2_to_home+0x98>
   14758:	2300      	movs	r3, #0
   1475a:	461c      	mov	r4, r3
   1475c:	b2e3      	uxtb	r3, r4
   1475e:	461a      	mov	r2, r3
   14760:	f64a 6344 	movw	r3, #44612	; 0xae44
   14764:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14768:	701a      	strb	r2, [r3, #0]
}
   1476a:	370c      	adds	r7, #12
   1476c:	46bd      	mov	sp, r7
   1476e:	bd90      	pop	{r4, r7, pc}

00014770 <nav_home>:

void nav_home(void) {
   14770:	b580      	push	{r7, lr}
   14772:	af00      	add	r7, sp, #0
  //Circle(WP_HOME, 50); /* FIXME: radius should be defined elsewhere */
  nav_pitch = 0.; /* Nominal speed */ 
   14774:	f64a 6334 	movw	r3, #44596	; 0xae34
   14778:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1477c:	f04f 0200 	mov.w	r2, #0
   14780:	601a      	str	r2, [r3, #0]
  vertical_mode = VERTICAL_MODE_AUTO_ALT;
   14782:	f64a 2395 	movw	r3, #43669	; 0xaa95
   14786:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1478a:	2203      	movs	r2, #3
   1478c:	701a      	strb	r2, [r3, #0]
  desired_altitude = GROUND_ALT+50;
   1478e:	f240 23b8 	movw	r3, #696	; 0x2b8
   14792:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14796:	f04f 0200 	mov.w	r2, #0
   1479a:	f2c4 322f 	movt	r2, #17199	; 0x432f
   1479e:	601a      	str	r2, [r3, #0]
  compute_dist2_to_home();
   147a0:	f7ff ff90 	bl	146c4 <compute_dist2_to_home>
  dist2_to_wp = dist2_to_home;
   147a4:	f64a 6340 	movw	r3, #44608	; 0xae40
   147a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   147ac:	681a      	ldr	r2, [r3, #0]
   147ae:	f64a 633c 	movw	r3, #44604	; 0xae3c
   147b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   147b6:	601a      	str	r2, [r3, #0]
}
   147b8:	bd80      	pop	{r7, pc}
   147ba:	bf00      	nop

000147bc <nav_update>:

void nav_update(void) {
   147bc:	b580      	push	{r7, lr}
   147be:	af00      	add	r7, sp, #0
  compute_dist2_to_home();
   147c0:	f7ff ff80 	bl	146c4 <compute_dist2_to_home>

  auto_nav();
   147c4:	f7fd fc0c 	bl	11fe0 <auto_nav>
}
   147c8:	bd80      	pop	{r7, pc}
   147ca:	bf00      	nop

000147cc <nav_init>:


void nav_init(void) {
   147cc:	b480      	push	{r7}
   147ce:	af00      	add	r7, sp, #0
  nav_block = 0;
   147d0:	f64a 6309 	movw	r3, #44553	; 0xae09
   147d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   147d8:	2200      	movs	r2, #0
   147da:	701a      	strb	r2, [r3, #0]
  nav_stage = 0;
   147dc:	f64a 6308 	movw	r3, #44552	; 0xae08
   147e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   147e4:	2200      	movs	r2, #0
   147e6:	701a      	strb	r2, [r3, #0]
}
   147e8:	46bd      	mov	sp, r7
   147ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   147ee:	4770      	bx	lr

000147f0 <uart0_transmit>:

static uint8_t           tx_head1; /* next free in buf */
static volatile uint8_t  tx_tail1; /* next char to send */
static uint8_t           tx_buf1[ TX_BUF_SIZE ];

void uart0_transmit( unsigned char data ) {
   147f0:	b480      	push	{r7}
   147f2:	b083      	sub	sp, #12
   147f4:	af00      	add	r7, sp, #0
   147f6:	4603      	mov	r3, r0
   147f8:	71fb      	strb	r3, [r7, #7]
  if (UCSR0B & _BV(TXCIE)) {
   147fa:	f242 030a 	movw	r3, #8202	; 0x200a
   147fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14802:	781b      	ldrb	r3, [r3, #0]
   14804:	b2db      	uxtb	r3, r3
   14806:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1480a:	2b00      	cmp	r3, #0
   1480c:	d028      	beq.n	14860 <uart0_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail0 == tx_head0 + 1) { /* BUF_SIZE = 256 */
   1480e:	f64a 635d 	movw	r3, #44637	; 0xae5d
   14812:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14816:	781b      	ldrb	r3, [r3, #0]
   14818:	b2db      	uxtb	r3, r3
   1481a:	461a      	mov	r2, r3
   1481c:	f64a 635c 	movw	r3, #44636	; 0xae5c
   14820:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14824:	781b      	ldrb	r3, [r3, #0]
   14826:	3301      	adds	r3, #1
   14828:	429a      	cmp	r2, r3
   1482a:	d100      	bne.n	1482e <uart0_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   1482c:	e02c      	b.n	14888 <uart0_transmit+0x98>
    }
    tx_buf0[tx_head0] = data;
   1482e:	f64a 635c 	movw	r3, #44636	; 0xae5c
   14832:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14836:	781b      	ldrb	r3, [r3, #0]
   14838:	461a      	mov	r2, r3
   1483a:	f64a 6360 	movw	r3, #44640	; 0xae60
   1483e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14842:	79f9      	ldrb	r1, [r7, #7]
   14844:	5499      	strb	r1, [r3, r2]
    tx_head0++; /* BUF_SIZE = 256 */
   14846:	f64a 635c 	movw	r3, #44636	; 0xae5c
   1484a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1484e:	781b      	ldrb	r3, [r3, #0]
   14850:	3301      	adds	r3, #1
   14852:	b2da      	uxtb	r2, r3
   14854:	f64a 635c 	movw	r3, #44636	; 0xae5c
   14858:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1485c:	701a      	strb	r2, [r3, #0]
   1485e:	e013      	b.n	14888 <uart0_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR0 = data;
   14860:	f242 030c 	movw	r3, #8204	; 0x200c
   14864:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14868:	79fa      	ldrb	r2, [r7, #7]
   1486a:	701a      	strb	r2, [r3, #0]
    sbi(UCSR0B, TXCIE);
   1486c:	f242 030a 	movw	r3, #8202	; 0x200a
   14870:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14874:	f242 020a 	movw	r2, #8202	; 0x200a
   14878:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1487c:	7812      	ldrb	r2, [r2, #0]
   1487e:	b2d2      	uxtb	r2, r2
   14880:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14884:	b2d2      	uxtb	r2, r2
   14886:	701a      	strb	r2, [r3, #0]
  }
}
   14888:	370c      	adds	r7, #12
   1488a:	46bd      	mov	sp, r7
   1488c:	f85d 7b04 	ldr.w	r7, [sp], #4
   14890:	4770      	bx	lr
   14892:	bf00      	nop

00014894 <uart1_transmit>:

void uart1_transmit( unsigned char data ) {
   14894:	b480      	push	{r7}
   14896:	b083      	sub	sp, #12
   14898:	af00      	add	r7, sp, #0
   1489a:	4603      	mov	r3, r0
   1489c:	71fb      	strb	r3, [r7, #7]
  if (UCSR1B & _BV(TXCIE)) {
   1489e:	f242 039a 	movw	r3, #8346	; 0x209a
   148a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148a6:	781b      	ldrb	r3, [r3, #0]
   148a8:	b2db      	uxtb	r3, r3
   148aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
   148ae:	2b00      	cmp	r3, #0
   148b0:	d028      	beq.n	14904 <uart1_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail1 == tx_head1 + 1) { /* BUF_SIZE = 256 */
   148b2:	f64a 7361 	movw	r3, #44897	; 0xaf61
   148b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148ba:	781b      	ldrb	r3, [r3, #0]
   148bc:	b2db      	uxtb	r3, r3
   148be:	461a      	mov	r2, r3
   148c0:	f64a 7360 	movw	r3, #44896	; 0xaf60
   148c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148c8:	781b      	ldrb	r3, [r3, #0]
   148ca:	3301      	adds	r3, #1
   148cc:	429a      	cmp	r2, r3
   148ce:	d100      	bne.n	148d2 <uart1_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   148d0:	e02c      	b.n	1492c <uart1_transmit+0x98>
    }
    tx_buf1[tx_head1] = data;
   148d2:	f64a 7360 	movw	r3, #44896	; 0xaf60
   148d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148da:	781b      	ldrb	r3, [r3, #0]
   148dc:	461a      	mov	r2, r3
   148de:	f64a 7364 	movw	r3, #44900	; 0xaf64
   148e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148e6:	79f9      	ldrb	r1, [r7, #7]
   148e8:	5499      	strb	r1, [r3, r2]
    tx_head1++; /* BUF_SIZE = 256 */
   148ea:	f64a 7360 	movw	r3, #44896	; 0xaf60
   148ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148f2:	781b      	ldrb	r3, [r3, #0]
   148f4:	3301      	adds	r3, #1
   148f6:	b2da      	uxtb	r2, r3
   148f8:	f64a 7360 	movw	r3, #44896	; 0xaf60
   148fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14900:	701a      	strb	r2, [r3, #0]
   14902:	e013      	b.n	1492c <uart1_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR1 = data;
   14904:	f242 039c 	movw	r3, #8348	; 0x209c
   14908:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1490c:	79fa      	ldrb	r2, [r7, #7]
   1490e:	701a      	strb	r2, [r3, #0]
    sbi(UCSR1B, TXCIE);
   14910:	f242 039a 	movw	r3, #8346	; 0x209a
   14914:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14918:	f242 029a 	movw	r2, #8346	; 0x209a
   1491c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14920:	7812      	ldrb	r2, [r2, #0]
   14922:	b2d2      	uxtb	r2, r2
   14924:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14928:	b2d2      	uxtb	r2, r2
   1492a:	701a      	strb	r2, [r3, #0]
  }
}
   1492c:	370c      	adds	r7, #12
   1492e:	46bd      	mov	sp, r7
   14930:	f85d 7b04 	ldr.w	r7, [sp], #4
   14934:	4770      	bx	lr
   14936:	bf00      	nop

00014938 <uart0_print_string>:


void uart0_print_string(const uint8_t* s) {
   14938:	b580      	push	{r7, lr}
   1493a:	b084      	sub	sp, #16
   1493c:	af00      	add	r7, sp, #0
   1493e:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   14940:	2300      	movs	r3, #0
   14942:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   14944:	e009      	b.n	1495a <uart0_print_string+0x22>
    uart0_transmit(s[i]);
   14946:	7bfb      	ldrb	r3, [r7, #15]
   14948:	687a      	ldr	r2, [r7, #4]
   1494a:	4413      	add	r3, r2
   1494c:	781b      	ldrb	r3, [r3, #0]
   1494e:	4618      	mov	r0, r3
   14950:	f7ff ff4e 	bl	147f0 <uart0_transmit>
    i++;
   14954:	7bfb      	ldrb	r3, [r7, #15]
   14956:	3301      	adds	r3, #1
   14958:	73fb      	strb	r3, [r7, #15]
}


void uart0_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   1495a:	7bfb      	ldrb	r3, [r7, #15]
   1495c:	687a      	ldr	r2, [r7, #4]
   1495e:	4413      	add	r3, r2
   14960:	781b      	ldrb	r3, [r3, #0]
   14962:	2b00      	cmp	r3, #0
   14964:	d1ef      	bne.n	14946 <uart0_print_string+0xe>
    uart0_transmit(s[i]);
    i++;
  }
}
   14966:	3710      	adds	r7, #16
   14968:	46bd      	mov	sp, r7
   1496a:	bd80      	pop	{r7, pc}

0001496c <uart0_print_hex>:

void uart0_print_hex(const uint8_t c) {
   1496c:	b590      	push	{r4, r7, lr}
   1496e:	b089      	sub	sp, #36	; 0x24
   14970:	af00      	add	r7, sp, #0
   14972:	4603      	mov	r3, r0
   14974:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   14976:	f648 03d0 	movw	r3, #35024	; 0x88d0
   1497a:	f2c0 0301 	movt	r3, #1
   1497e:	f107 040c 	add.w	r4, r7, #12
   14982:	6818      	ldr	r0, [r3, #0]
   14984:	6859      	ldr	r1, [r3, #4]
   14986:	689a      	ldr	r2, [r3, #8]
   14988:	68db      	ldr	r3, [r3, #12]
   1498a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   1498c:	79fb      	ldrb	r3, [r7, #7]
   1498e:	091b      	lsrs	r3, r3, #4
   14990:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   14992:	79fb      	ldrb	r3, [r7, #7]
   14994:	f003 030f 	and.w	r3, r3, #15
   14998:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
    high = 15;
   1499a:	230f      	movs	r3, #15
   1499c:	77fb      	strb	r3, [r7, #31]
    low = 15;
   1499e:	230f      	movs	r3, #15
   149a0:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */
    uart0_transmit(hex[high]);
   149a2:	7ffb      	ldrb	r3, [r7, #31]
   149a4:	f107 0220 	add.w	r2, r7, #32
   149a8:	4413      	add	r3, r2
   149aa:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   149ae:	4618      	mov	r0, r3
   149b0:	f7ff ff1e 	bl	147f0 <uart0_transmit>
  uart0_transmit(hex[low]);
   149b4:	7fbb      	ldrb	r3, [r7, #30]
   149b6:	f107 0220 	add.w	r2, r7, #32
   149ba:	4413      	add	r3, r2
   149bc:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   149c0:	4618      	mov	r0, r3
   149c2:	f7ff ff15 	bl	147f0 <uart0_transmit>
}
   149c6:	3724      	adds	r7, #36	; 0x24
   149c8:	46bd      	mov	sp, r7
   149ca:	bd90      	pop	{r4, r7, pc}

000149cc <__vector_20>:


SIGNAL(SIG_UART0_TRANS) {
   149cc:	b480      	push	{r7}
   149ce:	af00      	add	r7, sp, #0
  if (tx_head0 == tx_tail0) {
   149d0:	f64a 635c 	movw	r3, #44636	; 0xae5c
   149d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149d8:	781a      	ldrb	r2, [r3, #0]
   149da:	f64a 635d 	movw	r3, #44637	; 0xae5d
   149de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149e2:	781b      	ldrb	r3, [r3, #0]
   149e4:	b2db      	uxtb	r3, r3
   149e6:	429a      	cmp	r2, r3
   149e8:	d10e      	bne.n	14a08 <__vector_20+0x3c>
    /* Nothing more to send */
    cbi(UCSR0B, TXCIE); /* disable interrupt */
   149ea:	f242 030a 	movw	r3, #8202	; 0x200a
   149ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149f2:	f242 020a 	movw	r2, #8202	; 0x200a
   149f6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   149fa:	7812      	ldrb	r2, [r2, #0]
   149fc:	b2d2      	uxtb	r2, r2
   149fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   14a02:	b2d2      	uxtb	r2, r2
   14a04:	701a      	strb	r2, [r3, #0]
   14a06:	e01d      	b.n	14a44 <__vector_20+0x78>
  } else {
    UDR0 = tx_buf0[tx_tail0];
   14a08:	f242 030c 	movw	r3, #8204	; 0x200c
   14a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a10:	f64a 625d 	movw	r2, #44637	; 0xae5d
   14a14:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a18:	7812      	ldrb	r2, [r2, #0]
   14a1a:	b2d2      	uxtb	r2, r2
   14a1c:	4611      	mov	r1, r2
   14a1e:	f64a 6260 	movw	r2, #44640	; 0xae60
   14a22:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a26:	5c52      	ldrb	r2, [r2, r1]
   14a28:	701a      	strb	r2, [r3, #0]
    tx_tail0++; /* warning tx_buf_len is 256 */
   14a2a:	f64a 635d 	movw	r3, #44637	; 0xae5d
   14a2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a32:	781b      	ldrb	r3, [r3, #0]
   14a34:	b2db      	uxtb	r3, r3
   14a36:	3301      	adds	r3, #1
   14a38:	b2da      	uxtb	r2, r3
   14a3a:	f64a 635d 	movw	r3, #44637	; 0xae5d
   14a3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a42:	701a      	strb	r2, [r3, #0]
  }
}
   14a44:	46bd      	mov	sp, r7
   14a46:	f85d 7b04 	ldr.w	r7, [sp], #4
   14a4a:	4770      	bx	lr

00014a4c <__vector_32>:

SIGNAL(SIG_UART1_TRANS) {
   14a4c:	b480      	push	{r7}
   14a4e:	af00      	add	r7, sp, #0
  if (tx_head1 == tx_tail1) {
   14a50:	f64a 7360 	movw	r3, #44896	; 0xaf60
   14a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a58:	781a      	ldrb	r2, [r3, #0]
   14a5a:	f64a 7361 	movw	r3, #44897	; 0xaf61
   14a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a62:	781b      	ldrb	r3, [r3, #0]
   14a64:	b2db      	uxtb	r3, r3
   14a66:	429a      	cmp	r2, r3
   14a68:	d10e      	bne.n	14a88 <__vector_32+0x3c>
    /* Nothing more to send */
    cbi(UCSR1B, TXCIE); /* disable interrupt */
   14a6a:	f242 039a 	movw	r3, #8346	; 0x209a
   14a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a72:	f242 029a 	movw	r2, #8346	; 0x209a
   14a76:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a7a:	7812      	ldrb	r2, [r2, #0]
   14a7c:	b2d2      	uxtb	r2, r2
   14a7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   14a82:	b2d2      	uxtb	r2, r2
   14a84:	701a      	strb	r2, [r3, #0]
   14a86:	e01d      	b.n	14ac4 <__vector_32+0x78>
  } else {
    UDR1 = tx_buf1[tx_tail1];
   14a88:	f242 039c 	movw	r3, #8348	; 0x209c
   14a8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a90:	f64a 7261 	movw	r2, #44897	; 0xaf61
   14a94:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a98:	7812      	ldrb	r2, [r2, #0]
   14a9a:	b2d2      	uxtb	r2, r2
   14a9c:	4611      	mov	r1, r2
   14a9e:	f64a 7264 	movw	r2, #44900	; 0xaf64
   14aa2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14aa6:	5c52      	ldrb	r2, [r2, r1]
   14aa8:	701a      	strb	r2, [r3, #0]
    tx_tail1++; /* warning tx_buf_len is 256 */
   14aaa:	f64a 7361 	movw	r3, #44897	; 0xaf61
   14aae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ab2:	781b      	ldrb	r3, [r3, #0]
   14ab4:	b2db      	uxtb	r3, r3
   14ab6:	3301      	adds	r3, #1
   14ab8:	b2da      	uxtb	r2, r3
   14aba:	f64a 7361 	movw	r3, #44897	; 0xaf61
   14abe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ac2:	701a      	strb	r2, [r3, #0]
  }
}
   14ac4:	46bd      	mov	sp, r7
   14ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
   14aca:	4770      	bx	lr

00014acc <uart0_init>:

void uart0_init( void ) {
   14acc:	b480      	push	{r7}
   14ace:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR0H = 0; 
   14ad0:	f242 0390 	movw	r3, #8336	; 0x2090
   14ad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ad8:	2200      	movs	r2, #0
   14ada:	701a      	strb	r2, [r3, #0]
  UBRR0L = 25; // 38.4
   14adc:	f242 0309 	movw	r3, #8201	; 0x2009
   14ae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ae4:	2219      	movs	r2, #25
   14ae6:	701a      	strb	r2, [r3, #0]
  // UBRR0L = 103; //9600
  /* single speed */ 
  UCSR0A = 0; 
   14ae8:	f242 030b 	movw	r3, #8203	; 0x200b
   14aec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14af0:	2200      	movs	r2, #0
   14af2:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR0B = _BV(RXEN) | _BV(TXEN);
   14af4:	f242 030a 	movw	r3, #8202	; 0x200a
   14af8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14afc:	2218      	movs	r2, #24
   14afe:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR0C = _BV(UCSZ1) | _BV(UCSZ0);
   14b00:	f242 0395 	movw	r3, #8341	; 0x2095
   14b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b08:	2206      	movs	r2, #6
   14b0a:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR0B, RXCIE ); 
   14b0c:	f242 030a 	movw	r3, #8202	; 0x200a
   14b10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b14:	f242 020a 	movw	r2, #8202	; 0x200a
   14b18:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14b1c:	7812      	ldrb	r2, [r2, #0]
   14b1e:	b2d2      	uxtb	r2, r2
   14b20:	f062 027f 	orn	r2, r2, #127	; 0x7f
   14b24:	b2d2      	uxtb	r2, r2
   14b26:	701a      	strb	r2, [r3, #0]
}
   14b28:	46bd      	mov	sp, r7
   14b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
   14b2e:	4770      	bx	lr

00014b30 <uart1_init>:

void uart1_init( void ) {
   14b30:	b480      	push	{r7}
   14b32:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR1H = 0; 
   14b34:	f242 0398 	movw	r3, #8344	; 0x2098
   14b38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b3c:	2200      	movs	r2, #0
   14b3e:	701a      	strb	r2, [r3, #0]
  UBRR1L = 25; // 38.4
   14b40:	f242 0399 	movw	r3, #8345	; 0x2099
   14b44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b48:	2219      	movs	r2, #25
   14b4a:	701a      	strb	r2, [r3, #0]
  // UBRR1L = 103; //9600


  /* single speed */ 
  UCSR1A = 0; 
   14b4c:	f242 039b 	movw	r3, #8347	; 0x209b
   14b50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b54:	2200      	movs	r2, #0
   14b56:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR1B = _BV(RXEN) | _BV(TXEN);
   14b58:	f242 039a 	movw	r3, #8346	; 0x209a
   14b5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b60:	2218      	movs	r2, #24
   14b62:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR1C = _BV(UCSZ1) | _BV(UCSZ0);
   14b64:	f242 039d 	movw	r3, #8349	; 0x209d
   14b68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b6c:	2206      	movs	r2, #6
   14b6e:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR1B, RXCIE ); 
   14b70:	f242 039a 	movw	r3, #8346	; 0x209a
   14b74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b78:	f242 029a 	movw	r2, #8346	; 0x209a
   14b7c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14b80:	7812      	ldrb	r2, [r2, #0]
   14b82:	b2d2      	uxtb	r2, r2
   14b84:	f062 027f 	orn	r2, r2, #127	; 0x7f
   14b88:	b2d2      	uxtb	r2, r2
   14b8a:	701a      	strb	r2, [r3, #0]
}
   14b8c:	46bd      	mov	sp, r7
   14b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
   14b92:	4770      	bx	lr
   14b94:	0000      	movs	r0, r0
	...

00014b98 <estimator_init>:
  estimator_theta_dot = theta_dot; \
}

inline void estimator_update_lls( void );

void estimator_init( void ) {
   14b98:	b480      	push	{r7}
   14b9a:	af00      	add	r7, sp, #0

  EstimatorSetPos (0., 0., 0.);
   14b9c:	f24b 0364 	movw	r3, #45156	; 0xb064
   14ba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ba4:	f04f 0200 	mov.w	r2, #0
   14ba8:	601a      	str	r2, [r3, #0]
   14baa:	f24b 0368 	movw	r3, #45160	; 0xb068
   14bae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bb2:	f04f 0200 	mov.w	r2, #0
   14bb6:	601a      	str	r2, [r3, #0]
   14bb8:	f24b 036c 	movw	r3, #45164	; 0xb06c
   14bbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bc0:	f04f 0200 	mov.w	r2, #0
   14bc4:	601a      	str	r2, [r3, #0]

  EstimatorSetAtt (0., 0., 0);
   14bc6:	f24b 0370 	movw	r3, #45168	; 0xb070
   14bca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bce:	f04f 0200 	mov.w	r2, #0
   14bd2:	601a      	str	r2, [r3, #0]
   14bd4:	f24b 0374 	movw	r3, #45172	; 0xb074
   14bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bdc:	f04f 0200 	mov.w	r2, #0
   14be0:	601a      	str	r2, [r3, #0]
   14be2:	f24b 0378 	movw	r3, #45176	; 0xb078
   14be6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bea:	f04f 0200 	mov.w	r2, #0
   14bee:	601a      	str	r2, [r3, #0]

  EstimatorSetSpeedPol ( 0., 0., 0.);
   14bf0:	f24b 039c 	movw	r3, #45212	; 0xb09c
   14bf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bf8:	f04f 0200 	mov.w	r2, #0
   14bfc:	601a      	str	r2, [r3, #0]
   14bfe:	f24b 03a0 	movw	r3, #45216	; 0xb0a0
   14c02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c06:	f04f 0200 	mov.w	r2, #0
   14c0a:	601a      	str	r2, [r3, #0]
   14c0c:	f24b 0384 	movw	r3, #45188	; 0xb084
   14c10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c14:	f04f 0200 	mov.w	r2, #0
   14c18:	601a      	str	r2, [r3, #0]

  EstimatorSetRotSpeed (0., 0., 0.);
   14c1a:	f24b 0388 	movw	r3, #45192	; 0xb088
   14c1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c22:	f04f 0200 	mov.w	r2, #0
   14c26:	601a      	str	r2, [r3, #0]
   14c28:	f24b 038c 	movw	r3, #45196	; 0xb08c
   14c2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c30:	f04f 0200 	mov.w	r2, #0
   14c34:	601a      	str	r2, [r3, #0]
   14c36:	f24b 0390 	movw	r3, #45200	; 0xb090
   14c3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c3e:	f04f 0200 	mov.w	r2, #0
   14c42:	601a      	str	r2, [r3, #0]

  estimator_flight_time = 0;
   14c44:	f24b 0394 	movw	r3, #45204	; 0xb094
   14c48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c4c:	2200      	movs	r2, #0
   14c4e:	801a      	strh	r2, [r3, #0]

  estimator_rad_of_ir = ir_rad_of_ir;
   14c50:	f240 238c 	movw	r3, #652	; 0x28c
   14c54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c58:	681a      	ldr	r2, [r3, #0]
   14c5a:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
   14c5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c62:	601a      	str	r2, [r3, #0]
}
   14c64:	46bd      	mov	sp, r7
   14c66:	f85d 7b04 	ldr.w	r7, [sp], #4
   14c6a:	4770      	bx	lr

00014c6c <estimator_update_state_infrared>:

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
   14c6c:	b580      	push	{r7, lr}
   14c6e:	b082      	sub	sp, #8
   14c70:	af00      	add	r7, sp, #0
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   14c72:	f240 2380 	movw	r3, #640	; 0x280
   14c76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c7a:	781b      	ldrb	r3, [r3, #0]
    estimator_rad_of_ir : ir_rad_of_ir;
   14c7c:	2b01      	cmp	r3, #1
   14c7e:	d105      	bne.n	14c8c <estimator_update_state_infrared+0x20>
   14c80:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
   14c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c88:	681b      	ldr	r3, [r3, #0]
   14c8a:	e004      	b.n	14c96 <estimator_update_state_infrared+0x2a>
   14c8c:	f240 238c 	movw	r3, #652	; 0x28c
   14c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c94:	681b      	ldr	r3, [r3, #0]
}

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   14c96:	607b      	str	r3, [r7, #4]
    estimator_rad_of_ir : ir_rad_of_ir;
  estimator_phi  = rad_of_ir * ir_roll;
   14c98:	f64a 5350 	movw	r3, #44368	; 0xad50
   14c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ca0:	881b      	ldrh	r3, [r3, #0]
   14ca2:	b21b      	sxth	r3, r3
   14ca4:	4618      	mov	r0, r3
   14ca6:	f003 fa77 	bl	18198 <__aeabi_i2f>
   14caa:	4603      	mov	r3, r0
   14cac:	4618      	mov	r0, r3
   14cae:	6879      	ldr	r1, [r7, #4]
   14cb0:	f003 fac6 	bl	18240 <__aeabi_fmul>
   14cb4:	4603      	mov	r3, r0
   14cb6:	461a      	mov	r2, r3
   14cb8:	f24b 0370 	movw	r3, #45168	; 0xb070
   14cbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14cc0:	601a      	str	r2, [r3, #0]

  estimator_theta = rad_of_ir * ir_pitch;
   14cc2:	f64a 5352 	movw	r3, #44370	; 0xad52
   14cc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14cca:	881b      	ldrh	r3, [r3, #0]
   14ccc:	b21b      	sxth	r3, r3
   14cce:	4618      	mov	r0, r3
   14cd0:	f003 fa62 	bl	18198 <__aeabi_i2f>
   14cd4:	4603      	mov	r3, r0
   14cd6:	4618      	mov	r0, r3
   14cd8:	6879      	ldr	r1, [r7, #4]
   14cda:	f003 fab1 	bl	18240 <__aeabi_fmul>
   14cde:	4603      	mov	r3, r0
   14ce0:	461a      	mov	r2, r3
   14ce2:	f24b 0378 	movw	r3, #45176	; 0xb078
   14ce6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14cea:	601a      	str	r2, [r3, #0]
}
   14cec:	3708      	adds	r7, #8
   14cee:	46bd      	mov	sp, r7
   14cf0:	bd80      	pop	{r7, pc}
   14cf2:	bf00      	nop

00014cf4 <estimator_update_ir_estim>:
#define RHO 0.999 /* The higher, the slower the estimation is changing */

#define g 9.81


void estimator_update_ir_estim( void ) {
   14cf4:	b5b0      	push	{r4, r5, r7, lr}
   14cf6:	b084      	sub	sp, #16
   14cf8:	af00      	add	r7, sp, #0
  static bool_t initialized = FALSE;
  static float sum_xy, sum_xx;
  float absphi;
  float init_ir2;

  if (initialized) 
   14cfa:	f24b 03b0 	movw	r3, #45232	; 0xb0b0
   14cfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d02:	781b      	ldrb	r3, [r3, #0]
   14d04:	2b00      	cmp	r3, #0
   14d06:	f000 81e8 	beq.w	150da <estimator_update_ir_estim+0x3e6>
  {
    float dt = gps_ftow - last_t;
   14d0a:	f64a 4320 	movw	r3, #44064	; 0xac20
   14d0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d12:	681a      	ldr	r2, [r3, #0]
   14d14:	f24b 03b4 	movw	r3, #45236	; 0xb0b4
   14d18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d1c:	681b      	ldr	r3, [r3, #0]
   14d1e:	4610      	mov	r0, r2
   14d20:	4619      	mov	r1, r3
   14d22:	f003 f983 	bl	1802c <__aeabi_fsub>
   14d26:	4603      	mov	r3, r0
   14d28:	60bb      	str	r3, [r7, #8]
    if (dt > 0.1) { // Against division by zero
   14d2a:	68b8      	ldr	r0, [r7, #8]
   14d2c:	f002 fdf4 	bl	17918 <__aeabi_f2d>
   14d30:	4602      	mov	r2, r0
   14d32:	460b      	mov	r3, r1
   14d34:	4610      	mov	r0, r2
   14d36:	4619      	mov	r1, r3
   14d38:	a385      	add	r3, pc, #532	; (adr r3, 14f50 <estimator_update_ir_estim+0x25c>)
   14d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
   14d3e:	f003 f8cf 	bl	17ee0 <__aeabi_dcmpgt>
   14d42:	4603      	mov	r3, r0
   14d44:	2b00      	cmp	r3, #0
   14d46:	d100      	bne.n	14d4a <estimator_update_ir_estim+0x56>
   14d48:	e219      	b.n	1517e <estimator_update_ir_estim+0x48a>
      float phi = (estimator_hspeed_dir - last_hspeed_dir); 
   14d4a:	f24b 03a0 	movw	r3, #45216	; 0xb0a0
   14d4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d52:	681a      	ldr	r2, [r3, #0]
   14d54:	f24b 03b8 	movw	r3, #45240	; 0xb0b8
   14d58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d5c:	681b      	ldr	r3, [r3, #0]
   14d5e:	4610      	mov	r0, r2
   14d60:	4619      	mov	r1, r3
   14d62:	f003 f963 	bl	1802c <__aeabi_fsub>
   14d66:	4603      	mov	r3, r0
   14d68:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   14d6a:	e013      	b.n	14d94 <estimator_update_ir_estim+0xa0>
   14d6c:	68f8      	ldr	r0, [r7, #12]
   14d6e:	f002 fdd3 	bl	17918 <__aeabi_f2d>
   14d72:	4602      	mov	r2, r0
   14d74:	460b      	mov	r3, r1
   14d76:	4610      	mov	r0, r2
   14d78:	4619      	mov	r1, r3
   14d7a:	a377      	add	r3, pc, #476	; (adr r3, 14f58 <estimator_update_ir_estim+0x264>)
   14d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   14d80:	f002 fc6a 	bl	17658 <__aeabi_dsub>
   14d84:	4602      	mov	r2, r0
   14d86:	460b      	mov	r3, r1
   14d88:	4610      	mov	r0, r2
   14d8a:	4619      	mov	r1, r3
   14d8c:	f003 f8fa 	bl	17f84 <__aeabi_d2f>
   14d90:	4603      	mov	r3, r0
   14d92:	60fb      	str	r3, [r7, #12]
   14d94:	68f8      	ldr	r0, [r7, #12]
   14d96:	f002 fdbf 	bl	17918 <__aeabi_f2d>
   14d9a:	4602      	mov	r2, r0
   14d9c:	460b      	mov	r3, r1
   14d9e:	4610      	mov	r0, r2
   14da0:	4619      	mov	r1, r3
   14da2:	a36f      	add	r3, pc, #444	; (adr r3, 14f60 <estimator_update_ir_estim+0x26c>)
   14da4:	e9d3 2300 	ldrd	r2, r3, [r3]
   14da8:	f003 f89a 	bl	17ee0 <__aeabi_dcmpgt>
   14dac:	4603      	mov	r3, r0
   14dae:	2b00      	cmp	r3, #0
   14db0:	d1dc      	bne.n	14d6c <estimator_update_ir_estim+0x78>
   14db2:	e013      	b.n	14ddc <estimator_update_ir_estim+0xe8>
   14db4:	68f8      	ldr	r0, [r7, #12]
   14db6:	f002 fdaf 	bl	17918 <__aeabi_f2d>
   14dba:	4602      	mov	r2, r0
   14dbc:	460b      	mov	r3, r1
   14dbe:	4610      	mov	r0, r2
   14dc0:	4619      	mov	r1, r3
   14dc2:	a365      	add	r3, pc, #404	; (adr r3, 14f58 <estimator_update_ir_estim+0x264>)
   14dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   14dc8:	f002 fc48 	bl	1765c <__adddf3>
   14dcc:	4602      	mov	r2, r0
   14dce:	460b      	mov	r3, r1
   14dd0:	4610      	mov	r0, r2
   14dd2:	4619      	mov	r1, r3
   14dd4:	f003 f8d6 	bl	17f84 <__aeabi_d2f>
   14dd8:	4603      	mov	r3, r0
   14dda:	60fb      	str	r3, [r7, #12]
   14ddc:	68f8      	ldr	r0, [r7, #12]
   14dde:	f002 fd9b 	bl	17918 <__aeabi_f2d>
   14de2:	4602      	mov	r2, r0
   14de4:	460b      	mov	r3, r1
   14de6:	4610      	mov	r0, r2
   14de8:	4619      	mov	r1, r3
   14dea:	a35f      	add	r3, pc, #380	; (adr r3, 14f68 <estimator_update_ir_estim+0x274>)
   14dec:	e9d3 2300 	ldrd	r2, r3, [r3]
   14df0:	f003 f858 	bl	17ea4 <__aeabi_dcmplt>
   14df4:	4603      	mov	r3, r0
   14df6:	2b00      	cmp	r3, #0
   14df8:	d1dc      	bne.n	14db4 <estimator_update_ir_estim+0xc0>
      phi = phi/dt*NOMINAL_AIRSPEED/g; /* tan linearized */
   14dfa:	68f8      	ldr	r0, [r7, #12]
   14dfc:	68b9      	ldr	r1, [r7, #8]
   14dfe:	f003 fad3 	bl	183a8 <__aeabi_fdiv>
   14e02:	4603      	mov	r3, r0
   14e04:	4618      	mov	r0, r3
   14e06:	f002 fd87 	bl	17918 <__aeabi_f2d>
   14e0a:	4602      	mov	r2, r0
   14e0c:	460b      	mov	r3, r1
   14e0e:	4610      	mov	r0, r2
   14e10:	4619      	mov	r1, r3
   14e12:	f04f 0200 	mov.w	r2, #0
   14e16:	f04f 0300 	mov.w	r3, #0
   14e1a:	f2c4 0324 	movt	r3, #16420	; 0x4024
   14e1e:	f002 fdcf 	bl	179c0 <__aeabi_dmul>
   14e22:	4602      	mov	r2, r0
   14e24:	460b      	mov	r3, r1
   14e26:	4610      	mov	r0, r2
   14e28:	4619      	mov	r1, r3
   14e2a:	a351      	add	r3, pc, #324	; (adr r3, 14f70 <estimator_update_ir_estim+0x27c>)
   14e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   14e30:	f002 fef0 	bl	17c14 <__aeabi_ddiv>
   14e34:	4602      	mov	r2, r0
   14e36:	460b      	mov	r3, r1
   14e38:	4610      	mov	r0, r2
   14e3a:	4619      	mov	r1, r3
   14e3c:	f003 f8a2 	bl	17f84 <__aeabi_d2f>
   14e40:	4603      	mov	r3, r0
   14e42:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   14e44:	e013      	b.n	14e6e <estimator_update_ir_estim+0x17a>
   14e46:	68f8      	ldr	r0, [r7, #12]
   14e48:	f002 fd66 	bl	17918 <__aeabi_f2d>
   14e4c:	4602      	mov	r2, r0
   14e4e:	460b      	mov	r3, r1
   14e50:	4610      	mov	r0, r2
   14e52:	4619      	mov	r1, r3
   14e54:	a340      	add	r3, pc, #256	; (adr r3, 14f58 <estimator_update_ir_estim+0x264>)
   14e56:	e9d3 2300 	ldrd	r2, r3, [r3]
   14e5a:	f002 fbfd 	bl	17658 <__aeabi_dsub>
   14e5e:	4602      	mov	r2, r0
   14e60:	460b      	mov	r3, r1
   14e62:	4610      	mov	r0, r2
   14e64:	4619      	mov	r1, r3
   14e66:	f003 f88d 	bl	17f84 <__aeabi_d2f>
   14e6a:	4603      	mov	r3, r0
   14e6c:	60fb      	str	r3, [r7, #12]
   14e6e:	68f8      	ldr	r0, [r7, #12]
   14e70:	f002 fd52 	bl	17918 <__aeabi_f2d>
   14e74:	4602      	mov	r2, r0
   14e76:	460b      	mov	r3, r1
   14e78:	4610      	mov	r0, r2
   14e7a:	4619      	mov	r1, r3
   14e7c:	a338      	add	r3, pc, #224	; (adr r3, 14f60 <estimator_update_ir_estim+0x26c>)
   14e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   14e82:	f003 f82d 	bl	17ee0 <__aeabi_dcmpgt>
   14e86:	4603      	mov	r3, r0
   14e88:	2b00      	cmp	r3, #0
   14e8a:	d1dc      	bne.n	14e46 <estimator_update_ir_estim+0x152>
   14e8c:	e013      	b.n	14eb6 <estimator_update_ir_estim+0x1c2>
   14e8e:	68f8      	ldr	r0, [r7, #12]
   14e90:	f002 fd42 	bl	17918 <__aeabi_f2d>
   14e94:	4602      	mov	r2, r0
   14e96:	460b      	mov	r3, r1
   14e98:	4610      	mov	r0, r2
   14e9a:	4619      	mov	r1, r3
   14e9c:	a32e      	add	r3, pc, #184	; (adr r3, 14f58 <estimator_update_ir_estim+0x264>)
   14e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   14ea2:	f002 fbdb 	bl	1765c <__adddf3>
   14ea6:	4602      	mov	r2, r0
   14ea8:	460b      	mov	r3, r1
   14eaa:	4610      	mov	r0, r2
   14eac:	4619      	mov	r1, r3
   14eae:	f003 f869 	bl	17f84 <__aeabi_d2f>
   14eb2:	4603      	mov	r3, r0
   14eb4:	60fb      	str	r3, [r7, #12]
   14eb6:	68f8      	ldr	r0, [r7, #12]
   14eb8:	f002 fd2e 	bl	17918 <__aeabi_f2d>
   14ebc:	4602      	mov	r2, r0
   14ebe:	460b      	mov	r3, r1
   14ec0:	4610      	mov	r0, r2
   14ec2:	4619      	mov	r1, r3
   14ec4:	a328      	add	r3, pc, #160	; (adr r3, 14f68 <estimator_update_ir_estim+0x274>)
   14ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
   14eca:	f002 ffeb 	bl	17ea4 <__aeabi_dcmplt>
   14ece:	4603      	mov	r3, r0
   14ed0:	2b00      	cmp	r3, #0
   14ed2:	d1dc      	bne.n	14e8e <estimator_update_ir_estim+0x19a>
      estimator_ir = (float)ir_roll;
   14ed4:	f64a 5350 	movw	r3, #44368	; 0xad50
   14ed8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14edc:	881b      	ldrh	r3, [r3, #0]
   14ede:	b21b      	sxth	r3, r3
   14ee0:	4618      	mov	r0, r3
   14ee2:	f003 f959 	bl	18198 <__aeabi_i2f>
   14ee6:	4602      	mov	r2, r0
   14ee8:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
   14eec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ef0:	601a      	str	r2, [r3, #0]
      estimator_rad = phi;
   14ef2:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
   14ef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14efa:	68fa      	ldr	r2, [r7, #12]
   14efc:	601a      	str	r2, [r3, #0]
      absphi = fabs(phi);
   14efe:	68f8      	ldr	r0, [r7, #12]
   14f00:	f04f 0100 	mov.w	r1, #0
   14f04:	f003 fb3a 	bl	1857c <__aeabi_fcmplt>
   14f08:	4603      	mov	r3, r0
   14f0a:	2b00      	cmp	r3, #0
   14f0c:	d003      	beq.n	14f16 <estimator_update_ir_estim+0x222>
   14f0e:	68fb      	ldr	r3, [r7, #12]
   14f10:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   14f14:	e000      	b.n	14f18 <estimator_update_ir_estim+0x224>
   14f16:	68fb      	ldr	r3, [r7, #12]
   14f18:	607b      	str	r3, [r7, #4]
      if (absphi < 1.0 && absphi > 0.05 && (- ir_contrast/2 < ir_roll && ir_roll < ir_contrast/2)) {
   14f1a:	6878      	ldr	r0, [r7, #4]
   14f1c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   14f20:	f003 fb2c 	bl	1857c <__aeabi_fcmplt>
   14f24:	4603      	mov	r3, r0
   14f26:	2b00      	cmp	r3, #0
   14f28:	d100      	bne.n	14f2c <estimator_update_ir_estim+0x238>
   14f2a:	e128      	b.n	1517e <estimator_update_ir_estim+0x48a>
   14f2c:	6878      	ldr	r0, [r7, #4]
   14f2e:	f002 fcf3 	bl	17918 <__aeabi_f2d>
   14f32:	4602      	mov	r2, r0
   14f34:	460b      	mov	r3, r1
   14f36:	4610      	mov	r0, r2
   14f38:	4619      	mov	r1, r3
   14f3a:	a30f      	add	r3, pc, #60	; (adr r3, 14f78 <estimator_update_ir_estim+0x284>)
   14f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
   14f40:	f002 ffce 	bl	17ee0 <__aeabi_dcmpgt>
   14f44:	4603      	mov	r3, r0
   14f46:	2b00      	cmp	r3, #0
   14f48:	d11a      	bne.n	14f80 <estimator_update_ir_estim+0x28c>
   14f4a:	e118      	b.n	1517e <estimator_update_ir_estim+0x48a>
   14f4c:	f3af 8000 	nop.w
   14f50:	9999999a 	.word	0x9999999a
   14f54:	3fb99999 	.word	0x3fb99999
   14f58:	54442d18 	.word	0x54442d18
   14f5c:	401921fb 	.word	0x401921fb
   14f60:	54442d18 	.word	0x54442d18
   14f64:	400921fb 	.word	0x400921fb
   14f68:	54442d18 	.word	0x54442d18
   14f6c:	c00921fb 	.word	0xc00921fb
   14f70:	51eb851f 	.word	0x51eb851f
   14f74:	40239eb8 	.word	0x40239eb8
   14f78:	9999999a 	.word	0x9999999a
   14f7c:	3fa99999 	.word	0x3fa99999
   14f80:	f240 2384 	movw	r3, #644	; 0x284
   14f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f88:	881b      	ldrh	r3, [r3, #0]
   14f8a:	b21b      	sxth	r3, r3
   14f8c:	425b      	negs	r3, r3
   14f8e:	0fda      	lsrs	r2, r3, #31
   14f90:	4413      	add	r3, r2
   14f92:	105b      	asrs	r3, r3, #1
   14f94:	461a      	mov	r2, r3
   14f96:	f64a 5350 	movw	r3, #44368	; 0xad50
   14f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f9e:	881b      	ldrh	r3, [r3, #0]
   14fa0:	b21b      	sxth	r3, r3
   14fa2:	429a      	cmp	r2, r3
   14fa4:	f280 8098 	bge.w	150d8 <estimator_update_ir_estim+0x3e4>
   14fa8:	f240 2384 	movw	r3, #644	; 0x284
   14fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fb0:	881b      	ldrh	r3, [r3, #0]
   14fb2:	b21b      	sxth	r3, r3
   14fb4:	0fda      	lsrs	r2, r3, #31
   14fb6:	4413      	add	r3, r2
   14fb8:	105b      	asrs	r3, r3, #1
   14fba:	b29a      	uxth	r2, r3
   14fbc:	f64a 5350 	movw	r3, #44368	; 0xad50
   14fc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fc4:	881b      	ldrh	r3, [r3, #0]
   14fc6:	b212      	sxth	r2, r2
   14fc8:	b21b      	sxth	r3, r3
   14fca:	429a      	cmp	r2, r3
   14fcc:	f340 8084 	ble.w	150d8 <estimator_update_ir_estim+0x3e4>
	sum_xy = estimator_rad * estimator_ir + RHO * sum_xy;
   14fd0:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
   14fd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fd8:	681a      	ldr	r2, [r3, #0]
   14fda:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
   14fde:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fe2:	681b      	ldr	r3, [r3, #0]
   14fe4:	4610      	mov	r0, r2
   14fe6:	4619      	mov	r1, r3
   14fe8:	f003 f92a 	bl	18240 <__aeabi_fmul>
   14fec:	4603      	mov	r3, r0
   14fee:	4618      	mov	r0, r3
   14ff0:	f002 fc92 	bl	17918 <__aeabi_f2d>
   14ff4:	4604      	mov	r4, r0
   14ff6:	460d      	mov	r5, r1
   14ff8:	f24b 03bc 	movw	r3, #45244	; 0xb0bc
   14ffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15000:	681b      	ldr	r3, [r3, #0]
   15002:	4618      	mov	r0, r3
   15004:	f002 fc88 	bl	17918 <__aeabi_f2d>
   15008:	4602      	mov	r2, r0
   1500a:	460b      	mov	r3, r1
   1500c:	4610      	mov	r0, r2
   1500e:	4619      	mov	r1, r3
   15010:	a367      	add	r3, pc, #412	; (adr r3, 151b0 <estimator_update_ir_estim+0x4bc>)
   15012:	e9d3 2300 	ldrd	r2, r3, [r3]
   15016:	f002 fcd3 	bl	179c0 <__aeabi_dmul>
   1501a:	4602      	mov	r2, r0
   1501c:	460b      	mov	r3, r1
   1501e:	4620      	mov	r0, r4
   15020:	4629      	mov	r1, r5
   15022:	f002 fb1b 	bl	1765c <__adddf3>
   15026:	4602      	mov	r2, r0
   15028:	460b      	mov	r3, r1
   1502a:	4610      	mov	r0, r2
   1502c:	4619      	mov	r1, r3
   1502e:	f002 ffa9 	bl	17f84 <__aeabi_d2f>
   15032:	4602      	mov	r2, r0
   15034:	f24b 03bc 	movw	r3, #45244	; 0xb0bc
   15038:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1503c:	601a      	str	r2, [r3, #0]
	sum_xx = estimator_ir * estimator_ir + RHO * sum_xx;
   1503e:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
   15042:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15046:	681a      	ldr	r2, [r3, #0]
   15048:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
   1504c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15050:	681b      	ldr	r3, [r3, #0]
   15052:	4610      	mov	r0, r2
   15054:	4619      	mov	r1, r3
   15056:	f003 f8f3 	bl	18240 <__aeabi_fmul>
   1505a:	4603      	mov	r3, r0
   1505c:	4618      	mov	r0, r3
   1505e:	f002 fc5b 	bl	17918 <__aeabi_f2d>
   15062:	4604      	mov	r4, r0
   15064:	460d      	mov	r5, r1
   15066:	f24b 03c0 	movw	r3, #45248	; 0xb0c0
   1506a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1506e:	681b      	ldr	r3, [r3, #0]
   15070:	4618      	mov	r0, r3
   15072:	f002 fc51 	bl	17918 <__aeabi_f2d>
   15076:	4602      	mov	r2, r0
   15078:	460b      	mov	r3, r1
   1507a:	4610      	mov	r0, r2
   1507c:	4619      	mov	r1, r3
   1507e:	a34c      	add	r3, pc, #304	; (adr r3, 151b0 <estimator_update_ir_estim+0x4bc>)
   15080:	e9d3 2300 	ldrd	r2, r3, [r3]
   15084:	f002 fc9c 	bl	179c0 <__aeabi_dmul>
   15088:	4602      	mov	r2, r0
   1508a:	460b      	mov	r3, r1
   1508c:	4620      	mov	r0, r4
   1508e:	4629      	mov	r1, r5
   15090:	f002 fae4 	bl	1765c <__adddf3>
   15094:	4602      	mov	r2, r0
   15096:	460b      	mov	r3, r1
   15098:	4610      	mov	r0, r2
   1509a:	4619      	mov	r1, r3
   1509c:	f002 ff72 	bl	17f84 <__aeabi_d2f>
   150a0:	4602      	mov	r2, r0
   150a2:	f24b 03c0 	movw	r3, #45248	; 0xb0c0
   150a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150aa:	601a      	str	r2, [r3, #0]
	else if (result > IR_RAD_OF_IR_MAX_VALUE)
	  estimator_rad_of_ir = IR_RAD_OF_IR_MAX_VALUE;
	else
	  estimator_rad_of_ir = result;
#else
	  estimator_rad_of_ir = sum_xy / sum_xx;
   150ac:	f24b 03bc 	movw	r3, #45244	; 0xb0bc
   150b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150b4:	681a      	ldr	r2, [r3, #0]
   150b6:	f24b 03c0 	movw	r3, #45248	; 0xb0c0
   150ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150be:	681b      	ldr	r3, [r3, #0]
   150c0:	4610      	mov	r0, r2
   150c2:	4619      	mov	r1, r3
   150c4:	f003 f970 	bl	183a8 <__aeabi_fdiv>
   150c8:	4603      	mov	r3, r0
   150ca:	461a      	mov	r2, r3
   150cc:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
   150d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150d4:	601a      	str	r2, [r3, #0]
   150d6:	e052      	b.n	1517e <estimator_update_ir_estim+0x48a>
   150d8:	e051      	b.n	1517e <estimator_update_ir_estim+0x48a>
#endif
      }
    } 
  } else {
    initialized = TRUE;
   150da:	f24b 03b0 	movw	r3, #45232	; 0xb0b0
   150de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150e2:	2201      	movs	r2, #1
   150e4:	701a      	strb	r2, [r3, #0]
    init_ir2 = ir_contrast;
   150e6:	f240 2384 	movw	r3, #644	; 0x284
   150ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150ee:	881b      	ldrh	r3, [r3, #0]
   150f0:	b21b      	sxth	r3, r3
   150f2:	4618      	mov	r0, r3
   150f4:	f003 f850 	bl	18198 <__aeabi_i2f>
   150f8:	4603      	mov	r3, r0
   150fa:	603b      	str	r3, [r7, #0]
    init_ir2 = init_ir2*init_ir2;
   150fc:	6838      	ldr	r0, [r7, #0]
   150fe:	6839      	ldr	r1, [r7, #0]
   15100:	f003 f89e 	bl	18240 <__aeabi_fmul>
   15104:	4603      	mov	r3, r0
   15106:	603b      	str	r3, [r7, #0]
    sum_xy = INIT_WEIGHT * estimator_rad_of_ir * init_ir2;
   15108:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
   1510c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15110:	681b      	ldr	r3, [r3, #0]
   15112:	4618      	mov	r0, r3
   15114:	f002 fc00 	bl	17918 <__aeabi_f2d>
   15118:	4602      	mov	r2, r0
   1511a:	460b      	mov	r3, r1
   1511c:	4610      	mov	r0, r2
   1511e:	4619      	mov	r1, r3
   15120:	f04f 0200 	mov.w	r2, #0
   15124:	f04f 0300 	mov.w	r3, #0
   15128:	f2c4 0359 	movt	r3, #16473	; 0x4059
   1512c:	f002 fc48 	bl	179c0 <__aeabi_dmul>
   15130:	4602      	mov	r2, r0
   15132:	460b      	mov	r3, r1
   15134:	4614      	mov	r4, r2
   15136:	461d      	mov	r5, r3
   15138:	6838      	ldr	r0, [r7, #0]
   1513a:	f002 fbed 	bl	17918 <__aeabi_f2d>
   1513e:	4602      	mov	r2, r0
   15140:	460b      	mov	r3, r1
   15142:	4620      	mov	r0, r4
   15144:	4629      	mov	r1, r5
   15146:	f002 fc3b 	bl	179c0 <__aeabi_dmul>
   1514a:	4602      	mov	r2, r0
   1514c:	460b      	mov	r3, r1
   1514e:	4610      	mov	r0, r2
   15150:	4619      	mov	r1, r3
   15152:	f002 ff17 	bl	17f84 <__aeabi_d2f>
   15156:	4602      	mov	r2, r0
   15158:	f24b 03bc 	movw	r3, #45244	; 0xb0bc
   1515c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15160:	601a      	str	r2, [r3, #0]
    sum_xx = INIT_WEIGHT * init_ir2;
   15162:	6838      	ldr	r0, [r7, #0]
   15164:	f04f 0100 	mov.w	r1, #0
   15168:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   1516c:	f003 f868 	bl	18240 <__aeabi_fmul>
   15170:	4603      	mov	r3, r0
   15172:	461a      	mov	r2, r3
   15174:	f24b 03c0 	movw	r3, #45248	; 0xb0c0
   15178:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1517c:	601a      	str	r2, [r3, #0]
  }

  last_hspeed_dir = estimator_hspeed_dir;
   1517e:	f24b 03a0 	movw	r3, #45216	; 0xb0a0
   15182:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15186:	681a      	ldr	r2, [r3, #0]
   15188:	f24b 03b8 	movw	r3, #45240	; 0xb0b8
   1518c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15190:	601a      	str	r2, [r3, #0]
  last_t = gps_ftow;
   15192:	f64a 4320 	movw	r3, #44064	; 0xac20
   15196:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1519a:	681a      	ldr	r2, [r3, #0]
   1519c:	f24b 03b4 	movw	r3, #45236	; 0xb0b4
   151a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151a4:	601a      	str	r2, [r3, #0]
}
   151a6:	3710      	adds	r7, #16
   151a8:	46bd      	mov	sp, r7
   151aa:	bdb0      	pop	{r4, r5, r7, pc}
   151ac:	f3af 8000 	nop.w
   151b0:	d916872b 	.word	0xd916872b
   151b4:	3feff7ce 	.word	0x3feff7ce

000151b8 <estimator_update_state_gps>:


void estimator_update_state_gps( void ) {
   151b8:	b580      	push	{r7, lr}
   151ba:	af00      	add	r7, sp, #0
  if (GPS_FIX_VALID(gps_mode)) {
   151bc:	f64a 4344 	movw	r3, #44100	; 0xac44
   151c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151c4:	781b      	ldrb	r3, [r3, #0]
   151c6:	f003 0320 	and.w	r3, r3, #32
   151ca:	2b00      	cmp	r3, #0
   151cc:	d044      	beq.n	15258 <estimator_update_state_gps+0xa0>
    EstimatorSetPos(gps_east, gps_north, gps_falt);
   151ce:	f64a 433c 	movw	r3, #44092	; 0xac3c
   151d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151d6:	681a      	ldr	r2, [r3, #0]
   151d8:	f24b 0364 	movw	r3, #45156	; 0xb064
   151dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151e0:	601a      	str	r2, [r3, #0]
   151e2:	f64a 4340 	movw	r3, #44096	; 0xac40
   151e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151ea:	681a      	ldr	r2, [r3, #0]
   151ec:	f24b 0368 	movw	r3, #45160	; 0xb068
   151f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151f4:	601a      	str	r2, [r3, #0]
   151f6:	f64a 4324 	movw	r3, #44068	; 0xac24
   151fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151fe:	681a      	ldr	r2, [r3, #0]
   15200:	f24b 036c 	movw	r3, #45164	; 0xb06c
   15204:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15208:	601a      	str	r2, [r3, #0]
    EstimatorSetSpeedPol(gps_fspeed, gps_fcourse, gps_fclimb);
   1520a:	f64a 4328 	movw	r3, #44072	; 0xac28
   1520e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15212:	681a      	ldr	r2, [r3, #0]
   15214:	f24b 039c 	movw	r3, #45212	; 0xb09c
   15218:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1521c:	601a      	str	r2, [r3, #0]
   1521e:	f64a 4330 	movw	r3, #44080	; 0xac30
   15222:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15226:	681a      	ldr	r2, [r3, #0]
   15228:	f24b 03a0 	movw	r3, #45216	; 0xb0a0
   1522c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15230:	601a      	str	r2, [r3, #0]
   15232:	f64a 432c 	movw	r3, #44076	; 0xac2c
   15236:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1523a:	681a      	ldr	r2, [r3, #0]
   1523c:	f24b 0384 	movw	r3, #45188	; 0xb084
   15240:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15244:	601a      	str	r2, [r3, #0]
    
    if (estimator_flight_time)
   15246:	f24b 0394 	movw	r3, #45204	; 0xb094
   1524a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1524e:	881b      	ldrh	r3, [r3, #0]
   15250:	2b00      	cmp	r3, #0
   15252:	d001      	beq.n	15258 <estimator_update_state_gps+0xa0>
      estimator_update_ir_estim();
   15254:	f7ff fd4e 	bl	14cf4 <estimator_update_ir_estim>
  }
}
   15258:	bd80      	pop	{r7, pc}
   1525a:	bf00      	nop

0001525c <estimator_propagate_state>:

void estimator_propagate_state( void ) {
   1525c:	b480      	push	{r7}
   1525e:	af00      	add	r7, sp, #0
  
}
   15260:	46bd      	mov	sp, r7
   15262:	f85d 7b04 	ldr.w	r7, [sp], #4
   15266:	4770      	bx	lr

00015268 <inflight_calib>:
/* Please DO NOT EDIT */

#ifndef INFLIGHT_CALIB_H
#define INFLIGHT_CALIB_H 

void inflight_calib(bool_t mode_changed) {
   15268:	b5b0      	push	{r4, r5, r7, lr}
   1526a:	b082      	sub	sp, #8
   1526c:	af00      	add	r7, sp, #0
   1526e:	4603      	mov	r3, r0
   15270:	71fb      	strb	r3, [r7, #7]
  if (pprz_mode == PPRZ_MODE_AUTO1) {
   15272:	f64a 2394 	movw	r3, #43668	; 0xaa94
   15276:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1527a:	781b      	ldrb	r3, [r3, #0]
   1527c:	2b01      	cmp	r3, #1
   1527e:	f040 80e0 	bne.w	15442 <inflight_calib+0x1da>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15282:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
   15286:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1528a:	781b      	ldrb	r3, [r3, #0]
   1528c:	2b02      	cmp	r3, #2
   1528e:	d168      	bne.n	15362 <inflight_calib+0xfa>
      static int16_t ir_pitch_neutral_init;
      if (mode_changed) {
   15290:	79fb      	ldrb	r3, [r7, #7]
   15292:	2b00      	cmp	r3, #0
   15294:	d013      	beq.n	152be <inflight_calib+0x56>
        ir_pitch_neutral_init = ir_pitch_neutral;
   15296:	f240 2388 	movw	r3, #648	; 0x288
   1529a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1529e:	881a      	ldrh	r2, [r3, #0]
   152a0:	f24b 03ca 	movw	r3, #45258	; 0xb0ca
   152a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152a8:	801a      	strh	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   152aa:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   152ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152b2:	895a      	ldrh	r2, [r3, #10]
   152b4:	f24b 03c6 	movw	r3, #45254	; 0xb0c6
   152b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152bc:	801a      	strh	r2, [r3, #0]
      }
      ir_pitch_neutral = ParamValInt16(ir_pitch_neutral_init, 60.000000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   152be:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   152c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152c6:	895b      	ldrh	r3, [r3, #10]
   152c8:	b21a      	sxth	r2, r3
   152ca:	f24b 03c6 	movw	r3, #45254	; 0xb0c6
   152ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152d2:	881b      	ldrh	r3, [r3, #0]
   152d4:	b21b      	sxth	r3, r3
   152d6:	1ad3      	subs	r3, r2, r3
   152d8:	4618      	mov	r0, r3
   152da:	f002 ff5d 	bl	18198 <__aeabi_i2f>
   152de:	4603      	mov	r3, r0
   152e0:	4618      	mov	r0, r3
   152e2:	f002 fb19 	bl	17918 <__aeabi_f2d>
   152e6:	4602      	mov	r2, r0
   152e8:	460b      	mov	r3, r1
   152ea:	4610      	mov	r0, r2
   152ec:	4619      	mov	r1, r3
   152ee:	f04f 0200 	mov.w	r2, #0
   152f2:	f04f 0300 	mov.w	r3, #0
   152f6:	f2c4 034e 	movt	r3, #16462	; 0x404e
   152fa:	f002 fb61 	bl	179c0 <__aeabi_dmul>
   152fe:	4602      	mov	r2, r0
   15300:	460b      	mov	r3, r1
   15302:	4610      	mov	r0, r2
   15304:	4619      	mov	r1, r3
   15306:	f04f 0200 	mov.w	r2, #0
   1530a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1530e:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15312:	f002 fc7f 	bl	17c14 <__aeabi_ddiv>
   15316:	4602      	mov	r2, r0
   15318:	460b      	mov	r3, r1
   1531a:	4610      	mov	r0, r2
   1531c:	4619      	mov	r1, r3
   1531e:	f002 fde9 	bl	17ef4 <__aeabi_d2iz>
   15322:	4603      	mov	r3, r0
   15324:	b29b      	uxth	r3, r3
   15326:	b29a      	uxth	r2, r3
   15328:	f24b 03ca 	movw	r3, #45258	; 0xb0ca
   1532c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15330:	881b      	ldrh	r3, [r3, #0]
   15332:	b29b      	uxth	r3, r3
   15334:	4413      	add	r3, r2
   15336:	b29b      	uxth	r3, r3
   15338:	b29a      	uxth	r2, r3
   1533a:	f240 2388 	movw	r3, #648	; 0x288
   1533e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15342:	801a      	strh	r2, [r3, #0]
      slider_1_val = (float)ir_pitch_neutral;
   15344:	f240 2388 	movw	r3, #648	; 0x288
   15348:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1534c:	881b      	ldrh	r3, [r3, #0]
   1534e:	b21b      	sxth	r3, r3
   15350:	4618      	mov	r0, r3
   15352:	f002 ff21 	bl	18198 <__aeabi_i2f>
   15356:	4602      	mov	r2, r0
   15358:	f64a 23a0 	movw	r3, #43680	; 0xaaa0
   1535c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15360:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15362:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
   15366:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1536a:	781b      	ldrb	r3, [r3, #0]
   1536c:	2b02      	cmp	r3, #2
   1536e:	d168      	bne.n	15442 <inflight_calib+0x1da>
      static int16_t ir_roll_neutral_init;
      if (mode_changed) {
   15370:	79fb      	ldrb	r3, [r7, #7]
   15372:	2b00      	cmp	r3, #0
   15374:	d013      	beq.n	1539e <inflight_calib+0x136>
        ir_roll_neutral_init = ir_roll_neutral;
   15376:	f240 2386 	movw	r3, #646	; 0x286
   1537a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1537e:	881a      	ldrh	r2, [r3, #0]
   15380:	f24b 03cc 	movw	r3, #45260	; 0xb0cc
   15384:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15388:	801a      	strh	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   1538a:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   1538e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15392:	899a      	ldrh	r2, [r3, #12]
   15394:	f24b 03c8 	movw	r3, #45256	; 0xb0c8
   15398:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1539c:	801a      	strh	r2, [r3, #0]
      }
      ir_roll_neutral = ParamValInt16(ir_roll_neutral_init, -60.000000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   1539e:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   153a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153a6:	899b      	ldrh	r3, [r3, #12]
   153a8:	b21a      	sxth	r2, r3
   153aa:	f24b 03c8 	movw	r3, #45256	; 0xb0c8
   153ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153b2:	881b      	ldrh	r3, [r3, #0]
   153b4:	b21b      	sxth	r3, r3
   153b6:	1ad3      	subs	r3, r2, r3
   153b8:	4618      	mov	r0, r3
   153ba:	f002 feed 	bl	18198 <__aeabi_i2f>
   153be:	4603      	mov	r3, r0
   153c0:	4618      	mov	r0, r3
   153c2:	f002 faa9 	bl	17918 <__aeabi_f2d>
   153c6:	4602      	mov	r2, r0
   153c8:	460b      	mov	r3, r1
   153ca:	4610      	mov	r0, r2
   153cc:	4619      	mov	r1, r3
   153ce:	f04f 0200 	mov.w	r2, #0
   153d2:	f04f 0300 	mov.w	r3, #0
   153d6:	f2cc 034e 	movt	r3, #49230	; 0xc04e
   153da:	f002 faf1 	bl	179c0 <__aeabi_dmul>
   153de:	4602      	mov	r2, r0
   153e0:	460b      	mov	r3, r1
   153e2:	4610      	mov	r0, r2
   153e4:	4619      	mov	r1, r3
   153e6:	f04f 0200 	mov.w	r2, #0
   153ea:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   153ee:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   153f2:	f002 fc0f 	bl	17c14 <__aeabi_ddiv>
   153f6:	4602      	mov	r2, r0
   153f8:	460b      	mov	r3, r1
   153fa:	4610      	mov	r0, r2
   153fc:	4619      	mov	r1, r3
   153fe:	f002 fd79 	bl	17ef4 <__aeabi_d2iz>
   15402:	4603      	mov	r3, r0
   15404:	b29b      	uxth	r3, r3
   15406:	b29a      	uxth	r2, r3
   15408:	f24b 03cc 	movw	r3, #45260	; 0xb0cc
   1540c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15410:	881b      	ldrh	r3, [r3, #0]
   15412:	b29b      	uxth	r3, r3
   15414:	4413      	add	r3, r2
   15416:	b29b      	uxth	r3, r3
   15418:	b29a      	uxth	r2, r3
   1541a:	f240 2386 	movw	r3, #646	; 0x286
   1541e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15422:	801a      	strh	r2, [r3, #0]
      slider_2_val = (float)ir_roll_neutral;
   15424:	f240 2386 	movw	r3, #646	; 0x286
   15428:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1542c:	881b      	ldrh	r3, [r3, #0]
   1542e:	b21b      	sxth	r3, r3
   15430:	4618      	mov	r0, r3
   15432:	f002 feb1 	bl	18198 <__aeabi_i2f>
   15436:	4602      	mov	r2, r0
   15438:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
   1543c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15440:	601a      	str	r2, [r3, #0]
    }
  }
  if (pprz_mode == PPRZ_MODE_AUTO2) {
   15442:	f64a 2394 	movw	r3, #43668	; 0xaa94
   15446:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1544a:	781b      	ldrb	r3, [r3, #0]
   1544c:	2b02      	cmp	r3, #2
   1544e:	f040 80da 	bne.w	15606 <inflight_calib+0x39e>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15452:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
   15456:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1545a:	781b      	ldrb	r3, [r3, #0]
   1545c:	2b02      	cmp	r3, #2
   1545e:	d165      	bne.n	1552c <inflight_calib+0x2c4>
      static float course_pgain_init;
      if (mode_changed) {
   15460:	79fb      	ldrb	r3, [r7, #7]
   15462:	2b00      	cmp	r3, #0
   15464:	d013      	beq.n	1548e <inflight_calib+0x226>
        course_pgain_init = course_pgain;
   15466:	f240 239c 	movw	r3, #668	; 0x29c
   1546a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1546e:	681a      	ldr	r2, [r3, #0]
   15470:	f24b 03d0 	movw	r3, #45264	; 0xb0d0
   15474:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15478:	601a      	str	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   1547a:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   1547e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15482:	895a      	ldrh	r2, [r3, #10]
   15484:	f24b 03c6 	movw	r3, #45254	; 0xb0c6
   15488:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1548c:	801a      	strh	r2, [r3, #0]
      }
      course_pgain = ParamValFloat(course_pgain_init, 0.100000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   1548e:	f24b 03d0 	movw	r3, #45264	; 0xb0d0
   15492:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15496:	681b      	ldr	r3, [r3, #0]
   15498:	4618      	mov	r0, r3
   1549a:	f002 fa3d 	bl	17918 <__aeabi_f2d>
   1549e:	4604      	mov	r4, r0
   154a0:	460d      	mov	r5, r1
   154a2:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   154a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154aa:	895b      	ldrh	r3, [r3, #10]
   154ac:	b21a      	sxth	r2, r3
   154ae:	f24b 03c6 	movw	r3, #45254	; 0xb0c6
   154b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154b6:	881b      	ldrh	r3, [r3, #0]
   154b8:	b21b      	sxth	r3, r3
   154ba:	1ad3      	subs	r3, r2, r3
   154bc:	4618      	mov	r0, r3
   154be:	f002 fe6b 	bl	18198 <__aeabi_i2f>
   154c2:	4603      	mov	r3, r0
   154c4:	4618      	mov	r0, r3
   154c6:	f002 fa27 	bl	17918 <__aeabi_f2d>
   154ca:	4602      	mov	r2, r0
   154cc:	460b      	mov	r3, r1
   154ce:	4610      	mov	r0, r2
   154d0:	4619      	mov	r1, r3
   154d2:	a34f      	add	r3, pc, #316	; (adr r3, 15610 <inflight_calib+0x3a8>)
   154d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   154d8:	f002 fa72 	bl	179c0 <__aeabi_dmul>
   154dc:	4602      	mov	r2, r0
   154de:	460b      	mov	r3, r1
   154e0:	4610      	mov	r0, r2
   154e2:	4619      	mov	r1, r3
   154e4:	f04f 0200 	mov.w	r2, #0
   154e8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   154ec:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   154f0:	f002 fb90 	bl	17c14 <__aeabi_ddiv>
   154f4:	4602      	mov	r2, r0
   154f6:	460b      	mov	r3, r1
   154f8:	4620      	mov	r0, r4
   154fa:	4629      	mov	r1, r5
   154fc:	f002 f8ae 	bl	1765c <__adddf3>
   15500:	4602      	mov	r2, r0
   15502:	460b      	mov	r3, r1
   15504:	4610      	mov	r0, r2
   15506:	4619      	mov	r1, r3
   15508:	f002 fd3c 	bl	17f84 <__aeabi_d2f>
   1550c:	4602      	mov	r2, r0
   1550e:	f240 239c 	movw	r3, #668	; 0x29c
   15512:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15516:	601a      	str	r2, [r3, #0]
      slider_1_val = (float)course_pgain;
   15518:	f240 239c 	movw	r3, #668	; 0x29c
   1551c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15520:	681a      	ldr	r2, [r3, #0]
   15522:	f64a 23a0 	movw	r3, #43680	; 0xaaa0
   15526:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1552a:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   1552c:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
   15530:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15534:	781b      	ldrb	r3, [r3, #0]
   15536:	2b02      	cmp	r3, #2
   15538:	d165      	bne.n	15606 <inflight_calib+0x39e>
      static float max_roll_init;
      if (mode_changed) {
   1553a:	79fb      	ldrb	r3, [r7, #7]
   1553c:	2b00      	cmp	r3, #0
   1553e:	d013      	beq.n	15568 <inflight_calib+0x300>
        max_roll_init = max_roll;
   15540:	f240 23a0 	movw	r3, #672	; 0x2a0
   15544:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15548:	681a      	ldr	r2, [r3, #0]
   1554a:	f24b 03d4 	movw	r3, #45268	; 0xb0d4
   1554e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15552:	601a      	str	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   15554:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   15558:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1555c:	899a      	ldrh	r2, [r3, #12]
   1555e:	f24b 03c8 	movw	r3, #45256	; 0xb0c8
   15562:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15566:	801a      	strh	r2, [r3, #0]
      }
      max_roll = ParamValFloat(max_roll_init, -0.200000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   15568:	f24b 03d4 	movw	r3, #45268	; 0xb0d4
   1556c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15570:	681b      	ldr	r3, [r3, #0]
   15572:	4618      	mov	r0, r3
   15574:	f002 f9d0 	bl	17918 <__aeabi_f2d>
   15578:	4604      	mov	r4, r0
   1557a:	460d      	mov	r5, r1
   1557c:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   15580:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15584:	899b      	ldrh	r3, [r3, #12]
   15586:	b21a      	sxth	r2, r3
   15588:	f24b 03c8 	movw	r3, #45256	; 0xb0c8
   1558c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15590:	881b      	ldrh	r3, [r3, #0]
   15592:	b21b      	sxth	r3, r3
   15594:	1ad3      	subs	r3, r2, r3
   15596:	4618      	mov	r0, r3
   15598:	f002 fdfe 	bl	18198 <__aeabi_i2f>
   1559c:	4603      	mov	r3, r0
   1559e:	4618      	mov	r0, r3
   155a0:	f002 f9ba 	bl	17918 <__aeabi_f2d>
   155a4:	4602      	mov	r2, r0
   155a6:	460b      	mov	r3, r1
   155a8:	4610      	mov	r0, r2
   155aa:	4619      	mov	r1, r3
   155ac:	a31a      	add	r3, pc, #104	; (adr r3, 15618 <inflight_calib+0x3b0>)
   155ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   155b2:	f002 fa05 	bl	179c0 <__aeabi_dmul>
   155b6:	4602      	mov	r2, r0
   155b8:	460b      	mov	r3, r1
   155ba:	4610      	mov	r0, r2
   155bc:	4619      	mov	r1, r3
   155be:	f04f 0200 	mov.w	r2, #0
   155c2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   155c6:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   155ca:	f002 fb23 	bl	17c14 <__aeabi_ddiv>
   155ce:	4602      	mov	r2, r0
   155d0:	460b      	mov	r3, r1
   155d2:	4620      	mov	r0, r4
   155d4:	4629      	mov	r1, r5
   155d6:	f002 f841 	bl	1765c <__adddf3>
   155da:	4602      	mov	r2, r0
   155dc:	460b      	mov	r3, r1
   155de:	4610      	mov	r0, r2
   155e0:	4619      	mov	r1, r3
   155e2:	f002 fccf 	bl	17f84 <__aeabi_d2f>
   155e6:	4602      	mov	r2, r0
   155e8:	f240 23a0 	movw	r3, #672	; 0x2a0
   155ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155f0:	601a      	str	r2, [r3, #0]
      slider_2_val = (float)max_roll;
   155f2:	f240 23a0 	movw	r3, #672	; 0x2a0
   155f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155fa:	681a      	ldr	r2, [r3, #0]
   155fc:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
   15600:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15604:	601a      	str	r2, [r3, #0]
    }
  }
}
   15606:	3708      	adds	r7, #8
   15608:	46bd      	mov	sp, r7
   1560a:	bdb0      	pop	{r4, r5, r7, pc}
   1560c:	f3af 8000 	nop.w
   15610:	9999999a 	.word	0x9999999a
   15614:	3fb99999 	.word	0x3fb99999
   15618:	9999999a 	.word	0x9999999a
   1561c:	bfc99999 	.word	0xbfc99999

00015620 <pp_atan2>:
 *
 */
#include <math.h>

double pp_atan2(double x, double y)
{
   15620:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   15624:	b08e      	sub	sp, #56	; 0x38
   15626:	af00      	add	r7, sp, #0
   15628:	e9c7 0102 	strd	r0, r1, [r7, #8]
   1562c:	e9c7 2300 	strd	r2, r3, [r7]
	double coeff_1 = M_PI/4;
   15630:	a357      	add	r3, pc, #348	; (adr r3, 15790 <pp_atan2+0x170>)
   15632:	e9d3 2300 	ldrd	r2, r3, [r3]
   15636:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double coeff_2 = 3*coeff_1;
   1563a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   1563e:	f04f 0200 	mov.w	r2, #0
   15642:	f04f 0300 	mov.w	r3, #0
   15646:	f2c4 0308 	movt	r3, #16392	; 0x4008
   1564a:	f002 f9b9 	bl	179c0 <__aeabi_dmul>
   1564e:	4602      	mov	r2, r0
   15650:	460b      	mov	r3, r1
   15652:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double abs_y = fabs(y)+1e-10;
   15656:	e9d7 0100 	ldrd	r0, r1, [r7]
   1565a:	f04f 0200 	mov.w	r2, #0
   1565e:	f04f 0300 	mov.w	r3, #0
   15662:	f002 fc1f 	bl	17ea4 <__aeabi_dcmplt>
   15666:	4603      	mov	r3, r0
   15668:	2b00      	cmp	r3, #0
   1566a:	d009      	beq.n	15680 <pp_atan2+0x60>
   1566c:	a14a      	add	r1, pc, #296	; (adr r1, 15798 <pp_atan2+0x178>)
   1566e:	e9d1 0100 	ldrd	r0, r1, [r1]
   15672:	e9d7 2300 	ldrd	r2, r3, [r7]
   15676:	f001 ffef 	bl	17658 <__aeabi_dsub>
   1567a:	4602      	mov	r2, r0
   1567c:	460b      	mov	r3, r1
   1567e:	e008      	b.n	15692 <pp_atan2+0x72>
   15680:	e9d7 0100 	ldrd	r0, r1, [r7]
   15684:	a344      	add	r3, pc, #272	; (adr r3, 15798 <pp_atan2+0x178>)
   15686:	e9d3 2300 	ldrd	r2, r3, [r3]
   1568a:	f001 ffe7 	bl	1765c <__adddf3>
   1568e:	4602      	mov	r2, r0
   15690:	460b      	mov	r3, r1
   15692:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angle, r;
	if(x>0)
   15696:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   1569a:	f04f 0200 	mov.w	r2, #0
   1569e:	f04f 0300 	mov.w	r3, #0
   156a2:	f002 fc1d 	bl	17ee0 <__aeabi_dcmpgt>
   156a6:	4603      	mov	r3, r0
   156a8:	2b00      	cmp	r3, #0
   156aa:	d02a      	beq.n	15702 <pp_atan2+0xe2>
	{
		r = (x - abs_y)/(x + abs_y);
   156ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   156b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   156b4:	f001 ffd0 	bl	17658 <__aeabi_dsub>
   156b8:	4602      	mov	r2, r0
   156ba:	460b      	mov	r3, r1
   156bc:	4690      	mov	r8, r2
   156be:	4699      	mov	r9, r3
   156c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   156c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   156c8:	f001 ffc8 	bl	1765c <__adddf3>
   156cc:	4602      	mov	r2, r0
   156ce:	460b      	mov	r3, r1
   156d0:	4640      	mov	r0, r8
   156d2:	4649      	mov	r1, r9
   156d4:	f002 fa9e 	bl	17c14 <__aeabi_ddiv>
   156d8:	4602      	mov	r2, r0
   156da:	460b      	mov	r3, r1
   156dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_1 - coeff_1*r;
   156e0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   156e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   156e8:	f002 f96a 	bl	179c0 <__aeabi_dmul>
   156ec:	4602      	mov	r2, r0
   156ee:	460b      	mov	r3, r1
   156f0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   156f4:	f001 ffb0 	bl	17658 <__aeabi_dsub>
   156f8:	4602      	mov	r2, r0
   156fa:	460b      	mov	r3, r1
   156fc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   15700:	e029      	b.n	15756 <pp_atan2+0x136>
	}
	else
	{
		r = (x + abs_y)/(abs_y - x);
   15702:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15706:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   1570a:	f001 ffa7 	bl	1765c <__adddf3>
   1570e:	4602      	mov	r2, r0
   15710:	460b      	mov	r3, r1
   15712:	4690      	mov	r8, r2
   15714:	4699      	mov	r9, r3
   15716:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   1571a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1571e:	f001 ff9b 	bl	17658 <__aeabi_dsub>
   15722:	4602      	mov	r2, r0
   15724:	460b      	mov	r3, r1
   15726:	4640      	mov	r0, r8
   15728:	4649      	mov	r1, r9
   1572a:	f002 fa73 	bl	17c14 <__aeabi_ddiv>
   1572e:	4602      	mov	r2, r0
   15730:	460b      	mov	r3, r1
   15732:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_2 - coeff_1*r;
   15736:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   1573a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1573e:	f002 f93f 	bl	179c0 <__aeabi_dmul>
   15742:	4602      	mov	r2, r0
   15744:	460b      	mov	r3, r1
   15746:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   1574a:	f001 ff85 	bl	17658 <__aeabi_dsub>
   1574e:	4602      	mov	r2, r0
   15750:	460b      	mov	r3, r1
   15752:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}
	if(y<0)
   15756:	e9d7 0100 	ldrd	r0, r1, [r7]
   1575a:	f04f 0200 	mov.w	r2, #0
   1575e:	f04f 0300 	mov.w	r3, #0
   15762:	f002 fb9f 	bl	17ea4 <__aeabi_dcmplt>
   15766:	4603      	mov	r3, r0
   15768:	2b00      	cmp	r3, #0
   1576a:	d004      	beq.n	15776 <pp_atan2+0x156>
		return (-angle);
   1576c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   1576e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15770:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15774:	e001      	b.n	1577a <pp_atan2+0x15a>
	else
		return angle;
   15776:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
   1577a:	4622      	mov	r2, r4
   1577c:	462b      	mov	r3, r5
}
   1577e:	4610      	mov	r0, r2
   15780:	4619      	mov	r1, r3
   15782:	3738      	adds	r7, #56	; 0x38
   15784:	46bd      	mov	sp, r7
   15786:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   1578a:	bf00      	nop
   1578c:	f3af 8000 	nop.w
   15790:	54442d18 	.word	0x54442d18
   15794:	3fe921fb 	.word	0x3fe921fb
   15798:	d9d7bdbb 	.word	0xd9d7bdbb
   1579c:	3ddb7cdf 	.word	0x3ddb7cdf

000157a0 <pp_sin>:
 * Range: -pi/2 <= x <= pi/2
 * Precision: +/- .000,000,005
 */
 
double pp_sin(double x)
{
   157a0:	b5b0      	push	{r4, r5, r7, lr}
   157a2:	b08c      	sub	sp, #48	; 0x30
   157a4:	af00      	add	r7, sp, #0
   157a6:	e9c7 0100 	strd	r0, r1, [r7]
	double xi, y, q, q2;
	int sign;

	xi = x; sign = 1;
   157aa:	e9d7 2300 	ldrd	r2, r3, [r7]
   157ae:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   157b2:	2301      	movs	r3, #1
   157b4:	627b      	str	r3, [r7, #36]	; 0x24
	while (xi < -1.57079632679489661923) xi += 6.28318530717958647692;
   157b6:	e00a      	b.n	157ce <pp_sin+0x2e>
   157b8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   157bc:	a35a      	add	r3, pc, #360	; (adr r3, 15928 <pp_sin+0x188>)
   157be:	e9d3 2300 	ldrd	r2, r3, [r3]
   157c2:	f001 ff4b 	bl	1765c <__adddf3>
   157c6:	4602      	mov	r2, r0
   157c8:	460b      	mov	r3, r1
   157ca:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   157ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   157d2:	a357      	add	r3, pc, #348	; (adr r3, 15930 <pp_sin+0x190>)
   157d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   157d8:	f002 fb64 	bl	17ea4 <__aeabi_dcmplt>
   157dc:	4603      	mov	r3, r0
   157de:	2b00      	cmp	r3, #0
   157e0:	d1ea      	bne.n	157b8 <pp_sin+0x18>
	while (xi > 4.71238898038468985769) xi -= 6.28318530717958647692;
   157e2:	e00a      	b.n	157fa <pp_sin+0x5a>
   157e4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   157e8:	a34f      	add	r3, pc, #316	; (adr r3, 15928 <pp_sin+0x188>)
   157ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   157ee:	f001 ff33 	bl	17658 <__aeabi_dsub>
   157f2:	4602      	mov	r2, r0
   157f4:	460b      	mov	r3, r1
   157f6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   157fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   157fe:	a34e      	add	r3, pc, #312	; (adr r3, 15938 <pp_sin+0x198>)
   15800:	e9d3 2300 	ldrd	r2, r3, [r3]
   15804:	f002 fb6c 	bl	17ee0 <__aeabi_dcmpgt>
   15808:	4603      	mov	r3, r0
   1580a:	2b00      	cmp	r3, #0
   1580c:	d1ea      	bne.n	157e4 <pp_sin+0x44>
	if (xi > 1.57079632679489661923) {
   1580e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15812:	a34b      	add	r3, pc, #300	; (adr r3, 15940 <pp_sin+0x1a0>)
   15814:	e9d3 2300 	ldrd	r2, r3, [r3]
   15818:	f002 fb62 	bl	17ee0 <__aeabi_dcmpgt>
   1581c:	4603      	mov	r3, r0
   1581e:	2b00      	cmp	r3, #0
   15820:	d00d      	beq.n	1583e <pp_sin+0x9e>
		xi -= 3.141592653589793238462643;
   15822:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15826:	a348      	add	r3, pc, #288	; (adr r3, 15948 <pp_sin+0x1a8>)
   15828:	e9d3 2300 	ldrd	r2, r3, [r3]
   1582c:	f001 ff14 	bl	17658 <__aeabi_dsub>
   15830:	4602      	mov	r2, r0
   15832:	460b      	mov	r3, r1
   15834:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		sign = -1;
   15838:	f04f 33ff 	mov.w	r3, #4294967295
   1583c:	627b      	str	r3, [r7, #36]	; 0x24
	}
	q = xi / 1.57079632679; q2 = q * q;
   1583e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15842:	a343      	add	r3, pc, #268	; (adr r3, 15950 <pp_sin+0x1b0>)
   15844:	e9d3 2300 	ldrd	r2, r3, [r3]
   15848:	f002 f9e4 	bl	17c14 <__aeabi_ddiv>
   1584c:	4602      	mov	r2, r0
   1584e:	460b      	mov	r3, r1
   15850:	e9c7 2306 	strd	r2, r3, [r7, #24]
   15854:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15858:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   1585c:	f002 f8b0 	bl	179c0 <__aeabi_dmul>
   15860:	4602      	mov	r2, r0
   15862:	460b      	mov	r3, r1
   15864:	e9c7 2304 	strd	r2, r3, [r7, #16]
	y = ((((.00015148419  * q2
   15868:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   1586c:	a33a      	add	r3, pc, #232	; (adr r3, 15958 <pp_sin+0x1b8>)
   1586e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15872:	f002 f8a5 	bl	179c0 <__aeabi_dmul>
   15876:	4602      	mov	r2, r0
   15878:	460b      	mov	r3, r1
	      - .00467376557) * q2
   1587a:	4610      	mov	r0, r2
   1587c:	4619      	mov	r1, r3
   1587e:	a338      	add	r3, pc, #224	; (adr r3, 15960 <pp_sin+0x1c0>)
   15880:	e9d3 2300 	ldrd	r2, r3, [r3]
   15884:	f001 fee8 	bl	17658 <__aeabi_dsub>
   15888:	4602      	mov	r2, r0
   1588a:	460b      	mov	r3, r1
   1588c:	4610      	mov	r0, r2
   1588e:	4619      	mov	r1, r3
   15890:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15894:	f002 f894 	bl	179c0 <__aeabi_dmul>
   15898:	4602      	mov	r2, r0
   1589a:	460b      	mov	r3, r1
	      + .07968967928) * q2
   1589c:	4610      	mov	r0, r2
   1589e:	4619      	mov	r1, r3
   158a0:	a331      	add	r3, pc, #196	; (adr r3, 15968 <pp_sin+0x1c8>)
   158a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   158a6:	f001 fed9 	bl	1765c <__adddf3>
   158aa:	4602      	mov	r2, r0
   158ac:	460b      	mov	r3, r1
   158ae:	4610      	mov	r0, r2
   158b0:	4619      	mov	r1, r3
   158b2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   158b6:	f002 f883 	bl	179c0 <__aeabi_dmul>
   158ba:	4602      	mov	r2, r0
   158bc:	460b      	mov	r3, r1
	      - .64596371106) * q2
   158be:	4610      	mov	r0, r2
   158c0:	4619      	mov	r1, r3
   158c2:	a32b      	add	r3, pc, #172	; (adr r3, 15970 <pp_sin+0x1d0>)
   158c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   158c8:	f001 fec6 	bl	17658 <__aeabi_dsub>
   158cc:	4602      	mov	r2, r0
   158ce:	460b      	mov	r3, r1
   158d0:	4610      	mov	r0, r2
   158d2:	4619      	mov	r1, r3
   158d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   158d8:	f002 f872 	bl	179c0 <__aeabi_dmul>
   158dc:	4602      	mov	r2, r0
   158de:	460b      	mov	r3, r1
	      +1.57079631847) * q;
   158e0:	4610      	mov	r0, r2
   158e2:	4619      	mov	r1, r3
   158e4:	a324      	add	r3, pc, #144	; (adr r3, 15978 <pp_sin+0x1d8>)
   158e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   158ea:	f001 feb7 	bl	1765c <__adddf3>
   158ee:	4602      	mov	r2, r0
   158f0:	460b      	mov	r3, r1
	if (xi > 1.57079632679489661923) {
		xi -= 3.141592653589793238462643;
		sign = -1;
	}
	q = xi / 1.57079632679; q2 = q * q;
	y = ((((.00015148419  * q2
   158f2:	4610      	mov	r0, r2
   158f4:	4619      	mov	r1, r3
   158f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   158fa:	f002 f861 	bl	179c0 <__aeabi_dmul>
   158fe:	4602      	mov	r2, r0
   15900:	460b      	mov	r3, r1
   15902:	e9c7 2302 	strd	r2, r3, [r7, #8]
	      - .00467376557) * q2
	      + .07968967928) * q2
	      - .64596371106) * q2
	      +1.57079631847) * q;
	return(sign < 0? -y : y);
   15906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15908:	2b00      	cmp	r3, #0
   1590a:	da04      	bge.n	15916 <pp_sin+0x176>
   1590c:	68bc      	ldr	r4, [r7, #8]
   1590e:	68fb      	ldr	r3, [r7, #12]
   15910:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15914:	e001      	b.n	1591a <pp_sin+0x17a>
   15916:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
   1591a:	4622      	mov	r2, r4
   1591c:	462b      	mov	r3, r5
}
   1591e:	4610      	mov	r0, r2
   15920:	4619      	mov	r1, r3
   15922:	3730      	adds	r7, #48	; 0x30
   15924:	46bd      	mov	sp, r7
   15926:	bdb0      	pop	{r4, r5, r7, pc}
   15928:	54442d18 	.word	0x54442d18
   1592c:	401921fb 	.word	0x401921fb
   15930:	54442d18 	.word	0x54442d18
   15934:	bff921fb 	.word	0xbff921fb
   15938:	7f3321d2 	.word	0x7f3321d2
   1593c:	4012d97c 	.word	0x4012d97c
   15940:	54442d18 	.word	0x54442d18
   15944:	3ff921fb 	.word	0x3ff921fb
   15948:	54442d18 	.word	0x54442d18
   1594c:	400921fb 	.word	0x400921fb
   15950:	5443d6f4 	.word	0x5443d6f4
   15954:	3ff921fb 	.word	0x3ff921fb
   15958:	48a890af 	.word	0x48a890af
   1595c:	3f23daf7 	.word	0x3f23daf7
   15960:	645b6d0e 	.word	0x645b6d0e
   15964:	3f7324cc 	.word	0x3f7324cc
   15968:	f65619a5 	.word	0xf65619a5
   1596c:	3fb4668a 	.word	0x3fb4668a
   15970:	16acf9cd 	.word	0x16acf9cd
   15974:	3fe4abbc 	.word	0x3fe4abbc
   15978:	520817f7 	.word	0x520817f7
   1597c:	3ff921fb 	.word	0x3ff921fb

00015980 <pp_sqrt>:

#define SQRT_PRECISION 5
double pp_sqrt(double n)
{
   15980:	b480      	push	{r7}
   15982:	b083      	sub	sp, #12
   15984:	af00      	add	r7, sp, #0
   15986:	e9c7 0100 	strd	r0, r1, [r7]
	/* perform the computation */
	for(i = 0; i < SQRT_PRECISION; i++)
		x = (x + n / x) / 2;
	return x;
#endif
}
   1598a:	4610      	mov	r0, r2
   1598c:	4619      	mov	r1, r3
   1598e:	370c      	adds	r7, #12
   15990:	46bd      	mov	sp, r7
   15992:	f85d 7b04 	ldr.w	r7, [sp], #4
   15996:	4770      	bx	lr

00015998 <fbw_adc_buf_channel>:

uint16_t fbw_adc_samples[ FBW_NB_ADC ];

static struct fbw_adc_buf* buffers[FBW_NB_ADC];

void fbw_adc_buf_channel(uint8_t adc_channel, struct fbw_adc_buf* s) {
   15998:	b480      	push	{r7}
   1599a:	b083      	sub	sp, #12
   1599c:	af00      	add	r7, sp, #0
   1599e:	4603      	mov	r3, r0
   159a0:	6039      	str	r1, [r7, #0]
   159a2:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   159a4:	79fa      	ldrb	r2, [r7, #7]
   159a6:	f24b 03e8 	movw	r3, #45288	; 0xb0e8
   159aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159ae:	6839      	ldr	r1, [r7, #0]
   159b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   159b4:	370c      	adds	r7, #12
   159b6:	46bd      	mov	sp, r7
   159b8:	f85d 7b04 	ldr.w	r7, [sp], #4
   159bc:	4770      	bx	lr
   159be:	bf00      	nop

000159c0 <fbw_adc_init>:

void 
fbw_adc_init( void )
{
   159c0:	b480      	push	{r7}
   159c2:	b083      	sub	sp, #12
   159c4:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   159c6:	f242 0315 	movw	r3, #8213	; 0x2015
   159ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159ce:	2200      	movs	r2, #0
   159d0:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   159d2:	f242 0314 	movw	r3, #8212	; 0x2014
   159d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159da:	2200      	movs	r2, #0
   159dc:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref */
  ADMUX		= ANALOG_VREF;
   159de:	f242 0307 	movw	r3, #8199	; 0x2007
   159e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159e6:	22c0      	movs	r2, #192	; 0xc0
   159e8:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSRA = 0
   159ea:	f242 0306 	movw	r3, #8198	; 0x2006
   159ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159f2:	22cf      	movs	r2, #207	; 0xcf
   159f4:	701a      	strb	r2, [r3, #0]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   159f6:	2300      	movs	r3, #0
   159f8:	71fb      	strb	r3, [r7, #7]
   159fa:	e00a      	b.n	15a12 <fbw_adc_init+0x52>
    buffers[i] = (struct fbw_adc_buf*)0;
   159fc:	79fa      	ldrb	r2, [r7, #7]
   159fe:	f24b 03e8 	movw	r3, #45288	; 0xb0e8
   15a02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a06:	2100      	movs	r1, #0
   15a08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   15a0c:	79fb      	ldrb	r3, [r7, #7]
   15a0e:	3301      	adds	r3, #1
   15a10:	71fb      	strb	r3, [r7, #7]
   15a12:	79fb      	ldrb	r3, [r7, #7]
   15a14:	2b07      	cmp	r3, #7
   15a16:	d9f1      	bls.n	159fc <fbw_adc_init+0x3c>
    buffers[i] = (struct fbw_adc_buf*)0;
}
   15a18:	370c      	adds	r7, #12
   15a1a:	46bd      	mov	sp, r7
   15a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
   15a20:	4770      	bx	lr
   15a22:	bf00      	nop

00015a24 <__vector_34>:
#ifdef PAPABENCH_SINGLE
	SIGNAL(SIG_SPM_READY)
#else
	SIGNAL( SIG_INPUT_CAPTURE1 )
#endif
{
   15a24:	b480      	push	{r7}
   15a26:	b083      	sub	sp, #12
   15a28:	af00      	add	r7, sp, #0
  uint16_t		this;
  uint16_t		width;
  static uint8_t		state;
  static uint8_t		sync_start;

  this		= ICR1;
   15a2a:	f242 0326 	movw	r3, #8230	; 0x2026
   15a2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a32:	881b      	ldrh	r3, [r3, #0]
   15a34:	80fb      	strh	r3, [r7, #6]
  width		= this - last;
   15a36:	f24b 1344 	movw	r3, #45380	; 0xb144
   15a3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a3e:	881b      	ldrh	r3, [r3, #0]
   15a40:	88fa      	ldrh	r2, [r7, #6]
   15a42:	1ad3      	subs	r3, r2, r3
   15a44:	80bb      	strh	r3, [r7, #4]
  last		= this;
   15a46:	f24b 1344 	movw	r3, #45380	; 0xb144
   15a4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a4e:	88fa      	ldrh	r2, [r7, #6]
   15a50:	801a      	strh	r2, [r3, #0]
  
  if( state == 0 ) {
   15a52:	f24b 1346 	movw	r3, #45382	; 0xb146
   15a56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a5a:	781b      	ldrb	r3, [r3, #0]
   15a5c:	2b00      	cmp	r3, #0
   15a5e:	d11e      	bne.n	15a9e <__vector_34+0x7a>
    uint8_t	end = TCNT2;
   15a60:	f242 0324 	movw	r3, #8228	; 0x2024
   15a64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a68:	781b      	ldrb	r3, [r3, #0]
   15a6a:	70fb      	strb	r3, [r7, #3]
    uint8_t diff = (end - sync_start);
   15a6c:	f24b 1347 	movw	r3, #45383	; 0xb147
   15a70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a74:	781b      	ldrb	r3, [r3, #0]
   15a76:	78fa      	ldrb	r2, [r7, #3]
   15a78:	1ad3      	subs	r3, r2, r3
   15a7a:	70bb      	strb	r3, [r7, #2]
    sync_start = end;
   15a7c:	f24b 1347 	movw	r3, #45383	; 0xb147
   15a80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a84:	78fa      	ldrb	r2, [r7, #3]
   15a86:	701a      	strb	r2, [r3, #0]

    /* The frame period of the mc3030 seems to be 25ms. 
     * One pulse lasts from 1.05ms to 2.150ms.
     * Sync pulse is at least 7ms : (7000*CLOCK)/1024 = 109
     */
    if( diff > (uint8_t)(((uint32_t)(7000ul*CLOCK))/1024ul) ) {
   15a88:	78bb      	ldrb	r3, [r7, #2]
   15a8a:	2b6d      	cmp	r3, #109	; 0x6d
   15a8c:	d906      	bls.n	15a9c <__vector_34+0x78>
      state = 1;
   15a8e:	f24b 1346 	movw	r3, #45382	; 0xb146
   15a92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a96:	2201      	movs	r2, #1
   15a98:	701a      	strb	r2, [r3, #0]
   15a9a:	e053      	b.n	15b44 <__vector_34+0x120>
   15a9c:	e052      	b.n	15b44 <__vector_34+0x120>
    }
  } 
  else {
    /* Read a data pulses */
    if( width < 700ul*CLOCK || width > 2300ul*CLOCK)
   15a9e:	88bb      	ldrh	r3, [r7, #4]
   15aa0:	f5b3 5f2f 	cmp.w	r3, #11200	; 0x2bc0
   15aa4:	d304      	bcc.n	15ab0 <__vector_34+0x8c>
   15aa6:	88ba      	ldrh	r2, [r7, #4]
   15aa8:	f648 73c0 	movw	r3, #36800	; 0x8fc0
   15aac:	429a      	cmp	r2, r3
   15aae:	d911      	bls.n	15ad4 <__vector_34+0xb0>
      RestartPpmCycle();
   15ab0:	f24b 1346 	movw	r3, #45382	; 0xb146
   15ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ab8:	2200      	movs	r2, #0
   15aba:	701a      	strb	r2, [r3, #0]
   15abc:	f242 0324 	movw	r3, #8228	; 0x2024
   15ac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ac4:	781b      	ldrb	r3, [r3, #0]
   15ac6:	b2da      	uxtb	r2, r3
   15ac8:	f24b 1347 	movw	r3, #45383	; 0xb147
   15acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ad0:	701a      	strb	r2, [r3, #0]
   15ad2:	e038      	b.n	15b46 <__vector_34+0x122>
    ppm_pulses[state - 1] = width;
   15ad4:	f24b 1346 	movw	r3, #45382	; 0xb146
   15ad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15adc:	781b      	ldrb	r3, [r3, #0]
   15ade:	1e5a      	subs	r2, r3, #1
   15ae0:	f24b 1308 	movw	r3, #45320	; 0xb108
   15ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ae8:	88b9      	ldrh	r1, [r7, #4]
   15aea:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (state >= PPM_NB_PULSES) {
   15aee:	f24b 1346 	movw	r3, #45382	; 0xb146
   15af2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15af6:	781b      	ldrb	r3, [r3, #0]
   15af8:	2b08      	cmp	r3, #8
   15afa:	d917      	bls.n	15b2c <__vector_34+0x108>
      ppm_valid	= 1;
   15afc:	f24b 1343 	movw	r3, #45379	; 0xb143
   15b00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b04:	2201      	movs	r2, #1
   15b06:	701a      	strb	r2, [r3, #0]
      RestartPpmCycle();
   15b08:	f24b 1346 	movw	r3, #45382	; 0xb146
   15b0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b10:	2200      	movs	r2, #0
   15b12:	701a      	strb	r2, [r3, #0]
   15b14:	f242 0324 	movw	r3, #8228	; 0x2024
   15b18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b1c:	781b      	ldrb	r3, [r3, #0]
   15b1e:	b2da      	uxtb	r2, r3
   15b20:	f24b 1347 	movw	r3, #45383	; 0xb147
   15b24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b28:	701a      	strb	r2, [r3, #0]
   15b2a:	e00c      	b.n	15b46 <__vector_34+0x122>
    } else 
      state++;
   15b2c:	f24b 1346 	movw	r3, #45382	; 0xb146
   15b30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b34:	781b      	ldrb	r3, [r3, #0]
   15b36:	3301      	adds	r3, #1
   15b38:	b2da      	uxtb	r2, r3
   15b3a:	f24b 1346 	movw	r3, #45382	; 0xb146
   15b3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b42:	701a      	strb	r2, [r3, #0]
  }
  return;
   15b44:	bf00      	nop
}
   15b46:	370c      	adds	r7, #12
   15b48:	46bd      	mov	sp, r7
   15b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
   15b4e:	4770      	bx	lr

00015b50 <last_radio_from_ppm>:

/* Copy from the ppm receiving buffer to the buffer sent to mcu0 */
void last_radio_from_ppm() {
   15b50:	b590      	push	{r4, r7, lr}
   15b52:	b083      	sub	sp, #12
   15b54:	af00      	add	r7, sp, #0
  LastRadioFromPpm()
   15b56:	f24b 1308 	movw	r3, #45320	; 0xb108
   15b5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b5e:	881b      	ldrh	r3, [r3, #0]
   15b60:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   15b64:	b29b      	uxth	r3, r3
   15b66:	80fb      	strh	r3, [r7, #6]
   15b68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15b6c:	4618      	mov	r0, r3
   15b6e:	f002 fb13 	bl	18198 <__aeabi_i2f>
   15b72:	4603      	mov	r3, r0
   15b74:	4618      	mov	r0, r3
   15b76:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   15b7a:	f002 fb61 	bl	18240 <__aeabi_fmul>
   15b7e:	4603      	mov	r3, r0
   15b80:	4618      	mov	r0, r3
   15b82:	f002 fd23 	bl	185cc <__aeabi_f2iz>
   15b86:	4603      	mov	r3, r0
   15b88:	b29a      	uxth	r2, r3
   15b8a:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b92:	801a      	strh	r2, [r3, #0]
   15b94:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b9c:	881b      	ldrh	r3, [r3, #0]
   15b9e:	b21b      	sxth	r3, r3
   15ba0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15ba4:	dd07      	ble.n	15bb6 <last_radio_from_ppm+0x66>
   15ba6:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15bae:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15bb2:	801a      	strh	r2, [r3, #0]
   15bb4:	e00d      	b.n	15bd2 <last_radio_from_ppm+0x82>
   15bb6:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15bba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15bbe:	881b      	ldrh	r3, [r3, #0]
   15bc0:	b21b      	sxth	r3, r3
   15bc2:	2b00      	cmp	r3, #0
   15bc4:	da05      	bge.n	15bd2 <last_radio_from_ppm+0x82>
   15bc6:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15bca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15bce:	2200      	movs	r2, #0
   15bd0:	801a      	strh	r2, [r3, #0]
   15bd2:	f24b 1308 	movw	r3, #45320	; 0xb108
   15bd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15bda:	885b      	ldrh	r3, [r3, #2]
   15bdc:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15be0:	b29b      	uxth	r3, r3
   15be2:	80fb      	strh	r3, [r7, #6]
   15be4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15be8:	4618      	mov	r0, r3
   15bea:	f002 fad5 	bl	18198 <__aeabi_i2f>
   15bee:	4603      	mov	r3, r0
   15bf0:	4618      	mov	r0, r3
   15bf2:	f002 fceb 	bl	185cc <__aeabi_f2iz>
   15bf6:	4603      	mov	r3, r0
   15bf8:	b29a      	uxth	r2, r3
   15bfa:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15bfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c02:	805a      	strh	r2, [r3, #2]
   15c04:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15c08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c0c:	885b      	ldrh	r3, [r3, #2]
   15c0e:	b21b      	sxth	r3, r3
   15c10:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15c14:	dd07      	ble.n	15c26 <last_radio_from_ppm+0xd6>
   15c16:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15c1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c1e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15c22:	805a      	strh	r2, [r3, #2]
   15c24:	e00f      	b.n	15c46 <last_radio_from_ppm+0xf6>
   15c26:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15c2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c2e:	885b      	ldrh	r3, [r3, #2]
   15c30:	b21b      	sxth	r3, r3
   15c32:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   15c36:	da06      	bge.n	15c46 <last_radio_from_ppm+0xf6>
   15c38:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c40:	f64d 2280 	movw	r2, #55936	; 0xda80
   15c44:	805a      	strh	r2, [r3, #2]
   15c46:	f24b 1308 	movw	r3, #45320	; 0xb108
   15c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c4e:	889b      	ldrh	r3, [r3, #4]
   15c50:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15c54:	b29b      	uxth	r3, r3
   15c56:	80fb      	strh	r3, [r7, #6]
   15c58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15c5c:	4618      	mov	r0, r3
   15c5e:	f002 fa9b 	bl	18198 <__aeabi_i2f>
   15c62:	4603      	mov	r3, r0
   15c64:	4618      	mov	r0, r3
   15c66:	f002 fcb1 	bl	185cc <__aeabi_f2iz>
   15c6a:	4603      	mov	r3, r0
   15c6c:	b29a      	uxth	r2, r3
   15c6e:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15c72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c76:	809a      	strh	r2, [r3, #4]
   15c78:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c80:	889b      	ldrh	r3, [r3, #4]
   15c82:	b21b      	sxth	r3, r3
   15c84:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15c88:	dd07      	ble.n	15c9a <last_radio_from_ppm+0x14a>
   15c8a:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c92:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15c96:	809a      	strh	r2, [r3, #4]
   15c98:	e00f      	b.n	15cba <last_radio_from_ppm+0x16a>
   15c9a:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15c9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ca2:	889b      	ldrh	r3, [r3, #4]
   15ca4:	b21b      	sxth	r3, r3
   15ca6:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   15caa:	da06      	bge.n	15cba <last_radio_from_ppm+0x16a>
   15cac:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15cb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15cb4:	f64d 2280 	movw	r2, #55936	; 0xda80
   15cb8:	809a      	strh	r2, [r3, #4]
   15cba:	f24b 1308 	movw	r3, #45320	; 0xb108
   15cbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15cc2:	88db      	ldrh	r3, [r3, #6]
   15cc4:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15cc8:	b29b      	uxth	r3, r3
   15cca:	80fb      	strh	r3, [r7, #6]
   15ccc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15cd0:	4618      	mov	r0, r3
   15cd2:	f002 fa61 	bl	18198 <__aeabi_i2f>
   15cd6:	4603      	mov	r3, r0
   15cd8:	4618      	mov	r0, r3
   15cda:	f002 fc77 	bl	185cc <__aeabi_f2iz>
   15cde:	4603      	mov	r3, r0
   15ce0:	b29a      	uxth	r2, r3
   15ce2:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15ce6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15cea:	80da      	strh	r2, [r3, #6]
   15cec:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15cf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15cf4:	88db      	ldrh	r3, [r3, #6]
   15cf6:	b21b      	sxth	r3, r3
   15cf8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15cfc:	dd07      	ble.n	15d0e <last_radio_from_ppm+0x1be>
   15cfe:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d06:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15d0a:	80da      	strh	r2, [r3, #6]
   15d0c:	e00f      	b.n	15d2e <last_radio_from_ppm+0x1de>
   15d0e:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15d12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d16:	88db      	ldrh	r3, [r3, #6]
   15d18:	b21b      	sxth	r3, r3
   15d1a:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   15d1e:	da06      	bge.n	15d2e <last_radio_from_ppm+0x1de>
   15d20:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15d24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d28:	f64d 2280 	movw	r2, #55936	; 0xda80
   15d2c:	80da      	strh	r2, [r3, #6]
   15d2e:	f24b 1308 	movw	r3, #45320	; 0xb108
   15d32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d36:	891b      	ldrh	r3, [r3, #8]
   15d38:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15d3c:	b29b      	uxth	r3, r3
   15d3e:	80fb      	strh	r3, [r7, #6]
   15d40:	f24b 1330 	movw	r3, #45360	; 0xb130
   15d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d48:	891b      	ldrh	r3, [r3, #8]
   15d4a:	b21b      	sxth	r3, r3
   15d4c:	4618      	mov	r0, r3
   15d4e:	f002 fa23 	bl	18198 <__aeabi_i2f>
   15d52:	4604      	mov	r4, r0
   15d54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15d58:	4618      	mov	r0, r3
   15d5a:	f002 fa1d 	bl	18198 <__aeabi_i2f>
   15d5e:	4603      	mov	r3, r0
   15d60:	4618      	mov	r0, r3
   15d62:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   15d66:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   15d6a:	f002 fa69 	bl	18240 <__aeabi_fmul>
   15d6e:	4603      	mov	r3, r0
   15d70:	4620      	mov	r0, r4
   15d72:	4619      	mov	r1, r3
   15d74:	f002 f95c 	bl	18030 <__addsf3>
   15d78:	4603      	mov	r3, r0
   15d7a:	4618      	mov	r0, r3
   15d7c:	f002 fc26 	bl	185cc <__aeabi_f2iz>
   15d80:	4603      	mov	r3, r0
   15d82:	b29a      	uxth	r2, r3
   15d84:	f24b 1330 	movw	r3, #45360	; 0xb130
   15d88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d8c:	811a      	strh	r2, [r3, #8]
   15d8e:	f24b 1308 	movw	r3, #45320	; 0xb108
   15d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d96:	895b      	ldrh	r3, [r3, #10]
   15d98:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15d9c:	b29b      	uxth	r3, r3
   15d9e:	80fb      	strh	r3, [r7, #6]
   15da0:	f24b 1330 	movw	r3, #45360	; 0xb130
   15da4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15da8:	895b      	ldrh	r3, [r3, #10]
   15daa:	b21b      	sxth	r3, r3
   15dac:	4618      	mov	r0, r3
   15dae:	f002 f9f3 	bl	18198 <__aeabi_i2f>
   15db2:	4604      	mov	r4, r0
   15db4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15db8:	4618      	mov	r0, r3
   15dba:	f002 f9ed 	bl	18198 <__aeabi_i2f>
   15dbe:	4603      	mov	r3, r0
   15dc0:	4618      	mov	r0, r3
   15dc2:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   15dc6:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   15dca:	f002 fa39 	bl	18240 <__aeabi_fmul>
   15dce:	4603      	mov	r3, r0
   15dd0:	4620      	mov	r0, r4
   15dd2:	4619      	mov	r1, r3
   15dd4:	f002 f92c 	bl	18030 <__addsf3>
   15dd8:	4603      	mov	r3, r0
   15dda:	4618      	mov	r0, r3
   15ddc:	f002 fbf6 	bl	185cc <__aeabi_f2iz>
   15de0:	4603      	mov	r3, r0
   15de2:	b29a      	uxth	r2, r3
   15de4:	f24b 1330 	movw	r3, #45360	; 0xb130
   15de8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15dec:	815a      	strh	r2, [r3, #10]
   15dee:	f24b 1308 	movw	r3, #45320	; 0xb108
   15df2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15df6:	899b      	ldrh	r3, [r3, #12]
   15df8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15dfc:	b29b      	uxth	r3, r3
   15dfe:	80fb      	strh	r3, [r7, #6]
   15e00:	f24b 1330 	movw	r3, #45360	; 0xb130
   15e04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e08:	899b      	ldrh	r3, [r3, #12]
   15e0a:	b21b      	sxth	r3, r3
   15e0c:	4618      	mov	r0, r3
   15e0e:	f002 f9c3 	bl	18198 <__aeabi_i2f>
   15e12:	4604      	mov	r4, r0
   15e14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15e18:	4618      	mov	r0, r3
   15e1a:	f002 f9bd 	bl	18198 <__aeabi_i2f>
   15e1e:	4603      	mov	r3, r0
   15e20:	4618      	mov	r0, r3
   15e22:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   15e26:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   15e2a:	f002 fa09 	bl	18240 <__aeabi_fmul>
   15e2e:	4603      	mov	r3, r0
   15e30:	4620      	mov	r0, r4
   15e32:	4619      	mov	r1, r3
   15e34:	f002 f8fc 	bl	18030 <__addsf3>
   15e38:	4603      	mov	r3, r0
   15e3a:	4618      	mov	r0, r3
   15e3c:	f002 fbc6 	bl	185cc <__aeabi_f2iz>
   15e40:	4603      	mov	r3, r0
   15e42:	b29a      	uxth	r2, r3
   15e44:	f24b 1330 	movw	r3, #45360	; 0xb130
   15e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e4c:	819a      	strh	r2, [r3, #12]
   15e4e:	f24b 1308 	movw	r3, #45320	; 0xb108
   15e52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e56:	89db      	ldrh	r3, [r3, #14]
   15e58:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15e5c:	b29b      	uxth	r3, r3
   15e5e:	80fb      	strh	r3, [r7, #6]
   15e60:	f24b 1330 	movw	r3, #45360	; 0xb130
   15e64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e68:	89db      	ldrh	r3, [r3, #14]
   15e6a:	b21b      	sxth	r3, r3
   15e6c:	4618      	mov	r0, r3
   15e6e:	f002 f993 	bl	18198 <__aeabi_i2f>
   15e72:	4604      	mov	r4, r0
   15e74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15e78:	4618      	mov	r0, r3
   15e7a:	f002 f98d 	bl	18198 <__aeabi_i2f>
   15e7e:	4603      	mov	r3, r0
   15e80:	4618      	mov	r0, r3
   15e82:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   15e86:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   15e8a:	f002 f9d9 	bl	18240 <__aeabi_fmul>
   15e8e:	4603      	mov	r3, r0
   15e90:	4620      	mov	r0, r4
   15e92:	4619      	mov	r1, r3
   15e94:	f002 f8cc 	bl	18030 <__addsf3>
   15e98:	4603      	mov	r3, r0
   15e9a:	4618      	mov	r0, r3
   15e9c:	f002 fb96 	bl	185cc <__aeabi_f2iz>
   15ea0:	4603      	mov	r3, r0
   15ea2:	b29a      	uxth	r2, r3
   15ea4:	f24b 1330 	movw	r3, #45360	; 0xb130
   15ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15eac:	81da      	strh	r2, [r3, #14]
   15eae:	f24b 1308 	movw	r3, #45320	; 0xb108
   15eb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15eb6:	8a1b      	ldrh	r3, [r3, #16]
   15eb8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15ebc:	b29b      	uxth	r3, r3
   15ebe:	80fb      	strh	r3, [r7, #6]
   15ec0:	f24b 1330 	movw	r3, #45360	; 0xb130
   15ec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ec8:	8a1b      	ldrh	r3, [r3, #16]
   15eca:	b21b      	sxth	r3, r3
   15ecc:	4618      	mov	r0, r3
   15ece:	f002 f963 	bl	18198 <__aeabi_i2f>
   15ed2:	4604      	mov	r4, r0
   15ed4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15ed8:	4618      	mov	r0, r3
   15eda:	f002 f95d 	bl	18198 <__aeabi_i2f>
   15ede:	4603      	mov	r3, r0
   15ee0:	4618      	mov	r0, r3
   15ee2:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   15ee6:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   15eea:	f002 f9a9 	bl	18240 <__aeabi_fmul>
   15eee:	4603      	mov	r3, r0
   15ef0:	4620      	mov	r0, r4
   15ef2:	4619      	mov	r1, r3
   15ef4:	f002 f89c 	bl	18030 <__addsf3>
   15ef8:	4603      	mov	r3, r0
   15efa:	4618      	mov	r0, r3
   15efc:	f002 fb66 	bl	185cc <__aeabi_f2iz>
   15f00:	4603      	mov	r3, r0
   15f02:	b29a      	uxth	r2, r3
   15f04:	f24b 1330 	movw	r3, #45360	; 0xb130
   15f08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f0c:	821a      	strh	r2, [r3, #16]
   15f0e:	f24b 1348 	movw	r3, #45384	; 0xb148
   15f12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f16:	781b      	ldrb	r3, [r3, #0]
   15f18:	3301      	adds	r3, #1
   15f1a:	b2da      	uxtb	r2, r3
   15f1c:	f24b 1348 	movw	r3, #45384	; 0xb148
   15f20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f24:	701a      	strb	r2, [r3, #0]
   15f26:	f24b 1348 	movw	r3, #45384	; 0xb148
   15f2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f2e:	781b      	ldrb	r3, [r3, #0]
   15f30:	2b0a      	cmp	r3, #10
   15f32:	f040 8101 	bne.w	16138 <last_radio_from_ppm+0x5e8>
   15f36:	f24b 1348 	movw	r3, #45384	; 0xb148
   15f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f3e:	2200      	movs	r2, #0
   15f40:	701a      	strb	r2, [r3, #0]
   15f42:	f24b 1330 	movw	r3, #45360	; 0xb130
   15f46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f4a:	891a      	ldrh	r2, [r3, #8]
   15f4c:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15f50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f54:	811a      	strh	r2, [r3, #8]
   15f56:	f24b 1330 	movw	r3, #45360	; 0xb130
   15f5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f5e:	2200      	movs	r2, #0
   15f60:	811a      	strh	r2, [r3, #8]
   15f62:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15f66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f6a:	891b      	ldrh	r3, [r3, #8]
   15f6c:	b21b      	sxth	r3, r3
   15f6e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15f72:	dd07      	ble.n	15f84 <last_radio_from_ppm+0x434>
   15f74:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15f80:	811a      	strh	r2, [r3, #8]
   15f82:	e00f      	b.n	15fa4 <last_radio_from_ppm+0x454>
   15f84:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15f88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f8c:	891b      	ldrh	r3, [r3, #8]
   15f8e:	b21b      	sxth	r3, r3
   15f90:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   15f94:	da06      	bge.n	15fa4 <last_radio_from_ppm+0x454>
   15f96:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f9e:	f64d 2280 	movw	r2, #55936	; 0xda80
   15fa2:	811a      	strh	r2, [r3, #8]
   15fa4:	f24b 1330 	movw	r3, #45360	; 0xb130
   15fa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fac:	895a      	ldrh	r2, [r3, #10]
   15fae:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15fb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fb6:	815a      	strh	r2, [r3, #10]
   15fb8:	f24b 1330 	movw	r3, #45360	; 0xb130
   15fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fc0:	2200      	movs	r2, #0
   15fc2:	815a      	strh	r2, [r3, #10]
   15fc4:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15fc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fcc:	895b      	ldrh	r3, [r3, #10]
   15fce:	b21b      	sxth	r3, r3
   15fd0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15fd4:	dd07      	ble.n	15fe6 <last_radio_from_ppm+0x496>
   15fd6:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15fda:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fde:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15fe2:	815a      	strh	r2, [r3, #10]
   15fe4:	e00f      	b.n	16006 <last_radio_from_ppm+0x4b6>
   15fe6:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15fea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fee:	895b      	ldrh	r3, [r3, #10]
   15ff0:	b21b      	sxth	r3, r3
   15ff2:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   15ff6:	da06      	bge.n	16006 <last_radio_from_ppm+0x4b6>
   15ff8:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15ffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16000:	f64d 2280 	movw	r2, #55936	; 0xda80
   16004:	815a      	strh	r2, [r3, #10]
   16006:	f24b 1330 	movw	r3, #45360	; 0xb130
   1600a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1600e:	899a      	ldrh	r2, [r3, #12]
   16010:	f24b 131c 	movw	r3, #45340	; 0xb11c
   16014:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16018:	819a      	strh	r2, [r3, #12]
   1601a:	f24b 1330 	movw	r3, #45360	; 0xb130
   1601e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16022:	2200      	movs	r2, #0
   16024:	819a      	strh	r2, [r3, #12]
   16026:	f24b 131c 	movw	r3, #45340	; 0xb11c
   1602a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1602e:	899b      	ldrh	r3, [r3, #12]
   16030:	b21b      	sxth	r3, r3
   16032:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16036:	dd07      	ble.n	16048 <last_radio_from_ppm+0x4f8>
   16038:	f24b 131c 	movw	r3, #45340	; 0xb11c
   1603c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16040:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16044:	819a      	strh	r2, [r3, #12]
   16046:	e00f      	b.n	16068 <last_radio_from_ppm+0x518>
   16048:	f24b 131c 	movw	r3, #45340	; 0xb11c
   1604c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16050:	899b      	ldrh	r3, [r3, #12]
   16052:	b21b      	sxth	r3, r3
   16054:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16058:	da06      	bge.n	16068 <last_radio_from_ppm+0x518>
   1605a:	f24b 131c 	movw	r3, #45340	; 0xb11c
   1605e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16062:	f64d 2280 	movw	r2, #55936	; 0xda80
   16066:	819a      	strh	r2, [r3, #12]
   16068:	f24b 1330 	movw	r3, #45360	; 0xb130
   1606c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16070:	89da      	ldrh	r2, [r3, #14]
   16072:	f24b 131c 	movw	r3, #45340	; 0xb11c
   16076:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1607a:	81da      	strh	r2, [r3, #14]
   1607c:	f24b 1330 	movw	r3, #45360	; 0xb130
   16080:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16084:	2200      	movs	r2, #0
   16086:	81da      	strh	r2, [r3, #14]
   16088:	f24b 131c 	movw	r3, #45340	; 0xb11c
   1608c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16090:	89db      	ldrh	r3, [r3, #14]
   16092:	b21b      	sxth	r3, r3
   16094:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16098:	dd07      	ble.n	160aa <last_radio_from_ppm+0x55a>
   1609a:	f24b 131c 	movw	r3, #45340	; 0xb11c
   1609e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160a2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   160a6:	81da      	strh	r2, [r3, #14]
   160a8:	e00f      	b.n	160ca <last_radio_from_ppm+0x57a>
   160aa:	f24b 131c 	movw	r3, #45340	; 0xb11c
   160ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160b2:	89db      	ldrh	r3, [r3, #14]
   160b4:	b21b      	sxth	r3, r3
   160b6:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   160ba:	da06      	bge.n	160ca <last_radio_from_ppm+0x57a>
   160bc:	f24b 131c 	movw	r3, #45340	; 0xb11c
   160c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160c4:	f64d 2280 	movw	r2, #55936	; 0xda80
   160c8:	81da      	strh	r2, [r3, #14]
   160ca:	f24b 1330 	movw	r3, #45360	; 0xb130
   160ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160d2:	8a1a      	ldrh	r2, [r3, #16]
   160d4:	f24b 131c 	movw	r3, #45340	; 0xb11c
   160d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160dc:	821a      	strh	r2, [r3, #16]
   160de:	f24b 1330 	movw	r3, #45360	; 0xb130
   160e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160e6:	2200      	movs	r2, #0
   160e8:	821a      	strh	r2, [r3, #16]
   160ea:	f24b 131c 	movw	r3, #45340	; 0xb11c
   160ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160f2:	8a1b      	ldrh	r3, [r3, #16]
   160f4:	b21b      	sxth	r3, r3
   160f6:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   160fa:	dd07      	ble.n	1610c <last_radio_from_ppm+0x5bc>
   160fc:	f24b 131c 	movw	r3, #45340	; 0xb11c
   16100:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16104:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16108:	821a      	strh	r2, [r3, #16]
   1610a:	e00f      	b.n	1612c <last_radio_from_ppm+0x5dc>
   1610c:	f24b 131c 	movw	r3, #45340	; 0xb11c
   16110:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16114:	8a1b      	ldrh	r3, [r3, #16]
   16116:	b21b      	sxth	r3, r3
   16118:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1611c:	da06      	bge.n	1612c <last_radio_from_ppm+0x5dc>
   1611e:	f24b 131c 	movw	r3, #45340	; 0xb11c
   16122:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16126:	f64d 2280 	movw	r2, #55936	; 0xda80
   1612a:	821a      	strh	r2, [r3, #16]
   1612c:	f24b 1342 	movw	r3, #45378	; 0xb142
   16130:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16134:	2201      	movs	r2, #1
   16136:	701a      	strb	r2, [r3, #0]
}
   16138:	370c      	adds	r7, #12
   1613a:	46bd      	mov	sp, r7
   1613c:	bd90      	pop	{r4, r7, pc}
   1613e:	bf00      	nop

00016140 <spi_reset>:
volatile bool_t spi_was_interrupted = FALSE;

static volatile uint8_t idx_buf = 0;
static volatile uint8_t xor_in, xor_out;

void spi_reset(void) {
   16140:	b480      	push	{r7}
   16142:	af00      	add	r7, sp, #0
  idx_buf = 0;
   16144:	f24b 137c 	movw	r3, #45436	; 0xb17c
   16148:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1614c:	2200      	movs	r2, #0
   1614e:	701a      	strb	r2, [r3, #0]
  xor_in = 0;
   16150:	f24b 137d 	movw	r3, #45437	; 0xb17d
   16154:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16158:	2200      	movs	r2, #0
   1615a:	701a      	strb	r2, [r3, #0]
  xor_out = ((uint8_t*)&to_mega128)[idx_buf];
   1615c:	f24b 137c 	movw	r3, #45436	; 0xb17c
   16160:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16164:	781b      	ldrb	r3, [r3, #0]
   16166:	b2db      	uxtb	r3, r3
   16168:	461a      	mov	r2, r3
   1616a:	f24b 1364 	movw	r3, #45412	; 0xb164
   1616e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16172:	4413      	add	r3, r2
   16174:	781a      	ldrb	r2, [r3, #0]
   16176:	f24b 137e 	movw	r3, #45438	; 0xb17e
   1617a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1617e:	701a      	strb	r2, [r3, #0]
  SPDR = xor_out;
   16180:	f242 030f 	movw	r3, #8207	; 0x200f
   16184:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16188:	f24b 127e 	movw	r2, #45438	; 0xb17e
   1618c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16190:	7812      	ldrb	r2, [r2, #0]
   16192:	b2d2      	uxtb	r2, r2
   16194:	701a      	strb	r2, [r3, #0]
  mega128_receive_valid = FALSE;
   16196:	f24b 137a 	movw	r3, #45434	; 0xb17a
   1619a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1619e:	2200      	movs	r2, #0
   161a0:	701a      	strb	r2, [r3, #0]
}
   161a2:	46bd      	mov	sp, r7
   161a4:	f85d 7b04 	ldr.w	r7, [sp], #4
   161a8:	4770      	bx	lr
   161aa:	bf00      	nop

000161ac <fbw_spi_init>:

void fbw_spi_init(void) {
   161ac:	b480      	push	{r7}
   161ae:	af00      	add	r7, sp, #0
  to_mega128.status = 0;
   161b0:	f24b 1364 	movw	r3, #45412	; 0xb164
   161b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161b8:	2200      	movs	r2, #0
   161ba:	74da      	strb	r2, [r3, #19]
  to_mega128.nb_err = 0;
   161bc:	f24b 1364 	movw	r3, #45412	; 0xb164
   161c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161c4:	2200      	movs	r2, #0
   161c6:	751a      	strb	r2, [r3, #20]

  /* set it pin output */
  //  IT_DDR |= _BV(IT_PIN);

  /* set MISO pin output */
  SPI_DDR |= _BV(SPI_MISO_PIN);
   161c8:	f242 0317 	movw	r3, #8215	; 0x2017
   161cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161d0:	f242 0217 	movw	r2, #8215	; 0x2017
   161d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   161d8:	7812      	ldrb	r2, [r2, #0]
   161da:	b2d2      	uxtb	r2, r2
   161dc:	f042 0210 	orr.w	r2, r2, #16
   161e0:	b2d2      	uxtb	r2, r2
   161e2:	701a      	strb	r2, [r3, #0]
  /* enable SPI, slave, MSB first, sck idle low */
  SPCR = _BV(SPE);
   161e4:	f242 030d 	movw	r3, #8205	; 0x200d
   161e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161ec:	2240      	movs	r2, #64	; 0x40
   161ee:	701a      	strb	r2, [r3, #0]
  /* enable interrupt */
  SPCR |= _BV(SPIE);
   161f0:	f242 030d 	movw	r3, #8205	; 0x200d
   161f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161f8:	f242 020d 	movw	r2, #8205	; 0x200d
   161fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16200:	7812      	ldrb	r2, [r2, #0]
   16202:	b2d2      	uxtb	r2, r2
   16204:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16208:	b2d2      	uxtb	r2, r2
   1620a:	701a      	strb	r2, [r3, #0]
}
   1620c:	46bd      	mov	sp, r7
   1620e:	f85d 7b04 	ldr.w	r7, [sp], #4
   16212:	4770      	bx	lr
   16214:	0000      	movs	r0, r0
	...

00016218 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
   16218:	b480      	push	{r7}
   1621a:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
   1621c:	f242 032f 	movw	r3, #8239	; 0x202f
   16220:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16224:	2200      	movs	r2, #0
   16226:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
   16228:	f242 032e 	movw	r3, #8238	; 0x202e
   1622c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16230:	2201      	movs	r2, #1
   16232:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
   16234:	f242 0325 	movw	r3, #8229	; 0x2025
   16238:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1623c:	2207      	movs	r2, #7
   1623e:	701a      	strb	r2, [r3, #0]
}
   16240:	46bd      	mov	sp, r7
   16242:	f85d 7b04 	ldr.w	r7, [sp], #4
   16246:	4770      	bx	lr

00016248 <ppm_init>:
 *
 * JR might be rising edge clocked; set that as an option
 */
static inline void
ppm_init( void )
{
   16248:	b480      	push	{r7}
   1624a:	af00      	add	r7, sp, #0
#if   PPM_RX_TYPE == RXFUTABA
  cbi( TCCR1B, ICES1 );
   1624c:	f242 032e 	movw	r3, #8238	; 0x202e
   16250:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16254:	f242 022e 	movw	r2, #8238	; 0x202e
   16258:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1625c:	7812      	ldrb	r2, [r2, #0]
   1625e:	b2d2      	uxtb	r2, r2
   16260:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   16264:	b2d2      	uxtb	r2, r2
   16266:	701a      	strb	r2, [r3, #0]
#else
#	error "ppm.h: Unknown receiver type in PPM_RX_TYPE"
#endif

  /* No noise cancelation */
  sbi( TCCR1B, ICNC1 );
   16268:	f242 032e 	movw	r3, #8238	; 0x202e
   1626c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16270:	f242 022e 	movw	r2, #8238	; 0x202e
   16274:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16278:	7812      	ldrb	r2, [r2, #0]
   1627a:	b2d2      	uxtb	r2, r2
   1627c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16280:	b2d2      	uxtb	r2, r2
   16282:	701a      	strb	r2, [r3, #0]
  
  /* Set ICP to input, no internal pull up */
  cbi( PPM_DDR, PPM_PIN);
   16284:	f242 0317 	movw	r3, #8215	; 0x2017
   16288:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1628c:	f242 0217 	movw	r2, #8215	; 0x2017
   16290:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16294:	7812      	ldrb	r2, [r2, #0]
   16296:	b2d2      	uxtb	r2, r2
   16298:	f022 0201 	bic.w	r2, r2, #1
   1629c:	b2d2      	uxtb	r2, r2
   1629e:	701a      	strb	r2, [r3, #0]
  
  /* Enable interrupt on input capture */
  sbi( TIMSK, TICIE1 );
   162a0:	f242 0337 	movw	r3, #8247	; 0x2037
   162a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162a8:	f242 0237 	movw	r2, #8247	; 0x2037
   162ac:	f2c2 0200 	movt	r2, #8192	; 0x2000
   162b0:	7812      	ldrb	r2, [r2, #0]
   162b2:	b2d2      	uxtb	r2, r2
   162b4:	f042 0220 	orr.w	r2, r2, #32
   162b8:	b2d2      	uxtb	r2, r2
   162ba:	701a      	strb	r2, [r3, #0]
}
   162bc:	46bd      	mov	sp, r7
   162be:	f85d 7b04 	ldr.w	r7, [sp], #4
   162c2:	4770      	bx	lr

000162c4 <to_autopilot_from_last_radio>:
/*   uart_transmit('\n'); */
/* } */


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
   162c4:	b580      	push	{r7, lr}
   162c6:	b082      	sub	sp, #8
   162c8:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   162ca:	2300      	movs	r3, #0
   162cc:	71fb      	strb	r3, [r7, #7]
   162ce:	e010      	b.n	162f2 <to_autopilot_from_last_radio+0x2e>
     to_mega128.channels[i] = last_radio[i];
   162d0:	79fa      	ldrb	r2, [r7, #7]
   162d2:	79f9      	ldrb	r1, [r7, #7]
   162d4:	f24b 131c 	movw	r3, #45340	; 0xb11c
   162d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162dc:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   162e0:	f24b 1364 	movw	r3, #45412	; 0xb164
   162e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162e8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   162ec:	79fb      	ldrb	r3, [r7, #7]
   162ee:	3301      	adds	r3, #1
   162f0:	71fb      	strb	r3, [r7, #7]
   162f2:	79fb      	ldrb	r3, [r7, #7]
   162f4:	2b08      	cmp	r3, #8
   162f6:	d9eb      	bls.n	162d0 <to_autopilot_from_last_radio+0xc>
     to_mega128.channels[i] = last_radio[i];
  to_mega128.status = (radio_ok ? _BV(STATUS_RADIO_OK) : 0);
   162f8:	f24b 230c 	movw	r3, #45580	; 0xb20c
   162fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16300:	781b      	ldrb	r3, [r3, #0]
   16302:	2b00      	cmp	r3, #0
   16304:	bf0c      	ite	eq
   16306:	2300      	moveq	r3, #0
   16308:	2301      	movne	r3, #1
   1630a:	b2db      	uxtb	r3, r3
   1630c:	461a      	mov	r2, r3
   1630e:	f24b 1364 	movw	r3, #45412	; 0xb164
   16312:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16316:	74da      	strb	r2, [r3, #19]
  to_mega128.status |= (radio_really_lost ? _BV(RADIO_REALLY_LOST) : 0);
   16318:	f24b 1364 	movw	r3, #45412	; 0xb164
   1631c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16320:	7cdb      	ldrb	r3, [r3, #19]
   16322:	b2da      	uxtb	r2, r3
   16324:	f24b 230e 	movw	r3, #45582	; 0xb20e
   16328:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1632c:	781b      	ldrb	r3, [r3, #0]
   1632e:	2b00      	cmp	r3, #0
   16330:	d001      	beq.n	16336 <to_autopilot_from_last_radio+0x72>
   16332:	2302      	movs	r3, #2
   16334:	e000      	b.n	16338 <to_autopilot_from_last_radio+0x74>
   16336:	2300      	movs	r3, #0
   16338:	4313      	orrs	r3, r2
   1633a:	b2db      	uxtb	r3, r3
   1633c:	b2da      	uxtb	r2, r3
   1633e:	f24b 1364 	movw	r3, #45412	; 0xb164
   16342:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16346:	74da      	strb	r2, [r3, #19]
  if (last_radio_contains_avg_channels) {
   16348:	f24b 1342 	movw	r3, #45378	; 0xb142
   1634c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16350:	781b      	ldrb	r3, [r3, #0]
   16352:	2b00      	cmp	r3, #0
   16354:	d012      	beq.n	1637c <to_autopilot_from_last_radio+0xb8>
    to_mega128.status |= _BV(AVERAGED_CHANNELS_SENT);
   16356:	f24b 1364 	movw	r3, #45412	; 0xb164
   1635a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1635e:	7cdb      	ldrb	r3, [r3, #19]
   16360:	f043 0304 	orr.w	r3, r3, #4
   16364:	b2da      	uxtb	r2, r3
   16366:	f24b 1364 	movw	r3, #45412	; 0xb164
   1636a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1636e:	74da      	strb	r2, [r3, #19]
    last_radio_contains_avg_channels = FALSE;
   16370:	f24b 1342 	movw	r3, #45378	; 0xb142
   16374:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16378:	2200      	movs	r2, #0
   1637a:	701a      	strb	r2, [r3, #0]
  }
  to_mega128.ppm_cpt = last_ppm_cpt;
   1637c:	f24b 2310 	movw	r3, #45584	; 0xb210
   16380:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16384:	781a      	ldrb	r2, [r3, #0]
   16386:	f24b 1364 	movw	r3, #45412	; 0xb164
   1638a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1638e:	749a      	strb	r2, [r3, #18]
#ifndef CTL_BRD_V1_1
  to_mega128.vsupply = VoltageOfAdc(vsupply_adc_buf.sum/AV_NB_SAMPLE) * 10;
   16390:	f24b 1380 	movw	r3, #45440	; 0xb180
   16394:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16398:	881b      	ldrh	r3, [r3, #0]
   1639a:	4618      	mov	r0, r3
   1639c:	f001 faaa 	bl	178f4 <__aeabi_i2d>
   163a0:	4602      	mov	r2, r0
   163a2:	460b      	mov	r3, r1
   163a4:	4610      	mov	r0, r2
   163a6:	4619      	mov	r1, r3
   163a8:	a31b      	add	r3, pc, #108	; (adr r3, 16418 <to_autopilot_from_last_radio+0x154>)
   163aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   163ae:	f001 fb07 	bl	179c0 <__aeabi_dmul>
   163b2:	4602      	mov	r2, r0
   163b4:	460b      	mov	r3, r1
   163b6:	4610      	mov	r0, r2
   163b8:	4619      	mov	r1, r3
   163ba:	f04f 0200 	mov.w	r2, #0
   163be:	f04f 0300 	mov.w	r3, #0
   163c2:	f2c4 0340 	movt	r3, #16448	; 0x4040
   163c6:	f001 fc25 	bl	17c14 <__aeabi_ddiv>
   163ca:	4602      	mov	r2, r0
   163cc:	460b      	mov	r3, r1
   163ce:	4610      	mov	r0, r2
   163d0:	4619      	mov	r1, r3
   163d2:	a313      	add	r3, pc, #76	; (adr r3, 16420 <to_autopilot_from_last_radio+0x15c>)
   163d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   163d8:	f001 f940 	bl	1765c <__adddf3>
   163dc:	4602      	mov	r2, r0
   163de:	460b      	mov	r3, r1
   163e0:	4610      	mov	r0, r2
   163e2:	4619      	mov	r1, r3
   163e4:	f04f 0200 	mov.w	r2, #0
   163e8:	f04f 0300 	mov.w	r3, #0
   163ec:	f2c4 0324 	movt	r3, #16420	; 0x4024
   163f0:	f001 fae6 	bl	179c0 <__aeabi_dmul>
   163f4:	4602      	mov	r2, r0
   163f6:	460b      	mov	r3, r1
   163f8:	4610      	mov	r0, r2
   163fa:	4619      	mov	r1, r3
   163fc:	f001 fda2 	bl	17f44 <__aeabi_d2uiz>
   16400:	4603      	mov	r3, r0
   16402:	b2da      	uxtb	r2, r3
   16404:	f24b 1364 	movw	r3, #45412	; 0xb164
   16408:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1640c:	755a      	strb	r2, [r3, #21]
#else
  to_mega128.vsupply = 0;
#endif
}
   1640e:	3708      	adds	r7, #8
   16410:	46bd      	mov	sp, r7
   16412:	bd80      	pop	{r7, pc}
   16414:	f3af 8000 	nop.w
   16418:	1eb851ec 	.word	0x1eb851ec
   1641c:	3f91eb85 	.word	0x3f91eb85
   16420:	020c49ba 	.word	0x020c49ba
   16424:	3fb6872b 	.word	0x3fb6872b

00016428 <send_data_to_autopilot_task>:

void send_data_to_autopilot_task(void)
{
   16428:	b580      	push	{r7, lr}
   1642a:	af00      	add	r7, sp, #0
	//vPrintString("S_2 send_data_to_autopilot_task start! \n\r"); //SunnyBeike

    // modified by wanbo
//   if ( !SpiIsSelected() && spi_was_interrupted ) 
   {
      spi_was_interrupted = FALSE;
   1642c:	f24b 137b 	movw	r3, #45435	; 0xb17b
   16430:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16434:	2200      	movs	r2, #0
   16436:	701a      	strb	r2, [r3, #0]
      to_autopilot_from_last_radio();
   16438:	f7ff ff44 	bl	162c4 <to_autopilot_from_last_radio>
      spi_reset();
   1643c:	f7ff fe80 	bl	16140 <spi_reset>
   }
	//vPrintString("S_2 send_data_to_autopilot_task end! \n\r"); //SunnyBeike

}
   16440:	bd80      	pop	{r7, pc}
   16442:	bf00      	nop

00016444 <fbw_init>:
	static uint8_t _1Hz;
	static uint8_t _20Hz;
#endif
*/

void fbw_init(void) {
   16444:	b580      	push	{r7, lr}
   16446:	af00      	add	r7, sp, #0
  uart_init_tx();
   16448:	f000 fb02 	bl	16a50 <uart_init_tx>
  uart_print_string("FBW Booting $Id: main.c,v 1.3 2008/10/22 19:41:19 casse Exp $\n\r");
   1644c:	f648 00f4 	movw	r0, #35060	; 0x88f4
   16450:	f2c0 0001 	movt	r0, #1
   16454:	f000 fbda 	bl	16c0c <uart_print_string>

#ifndef CTL_BRD_V1_1
  fbw_adc_init();
   16458:	f7ff fab2 	bl	159c0 <fbw_adc_init>
  fbw_adc_buf_channel(3, &vsupply_adc_buf);
   1645c:	2003      	movs	r0, #3
   1645e:	f24b 1180 	movw	r1, #45440	; 0xb180
   16462:	f2c2 0100 	movt	r1, #8192	; 0x2000
   16466:	f7ff fa97 	bl	15998 <fbw_adc_buf_channel>
  fbw_adc_buf_channel(6, &vservos_adc_buf);
   1646a:	2006      	movs	r0, #6
   1646c:	f24b 11c4 	movw	r1, #45508	; 0xb1c4
   16470:	f2c2 0100 	movt	r1, #8192	; 0x2000
   16474:	f7ff fa90 	bl	15998 <fbw_adc_buf_channel>
#endif
  timer_init();
   16478:	f7ff fece 	bl	16218 <timer_init>
  servo_init();
   1647c:	f000 f894 	bl	165a8 <servo_init>
  ppm_init();
   16480:	f7ff fee2 	bl	16248 <ppm_init>
  fbw_spi_init();
   16484:	f7ff fe92 	bl	161ac <fbw_spi_init>
  //sei(); //FN
}
   16488:	bd80      	pop	{r7, pc}
   1648a:	bf00      	nop

0001648c <test_ppm_task>:
  return 0;
}
#endif
*/
void test_ppm_task(void)
{
   1648c:	b580      	push	{r7, lr}
   1648e:	af00      	add	r7, sp, #0
	//vPrintString("S_1 test_ppm_task start! \n\r"); //SunnyBeike
    // modified by wanbo
    //if( ppm_valid ) 
    {
      ppm_valid = FALSE;
   16490:	f24b 1343 	movw	r3, #45379	; 0xb143
   16494:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16498:	2200      	movs	r2, #0
   1649a:	701a      	strb	r2, [r3, #0]
      ppm_cpt++;
   1649c:	f24b 230f 	movw	r3, #45583	; 0xb20f
   164a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164a4:	781b      	ldrb	r3, [r3, #0]
   164a6:	3301      	adds	r3, #1
   164a8:	b2da      	uxtb	r2, r3
   164aa:	f24b 230f 	movw	r3, #45583	; 0xb20f
   164ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164b2:	701a      	strb	r2, [r3, #0]
      radio_ok = TRUE;
   164b4:	f24b 230c 	movw	r3, #45580	; 0xb20c
   164b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164bc:	2201      	movs	r2, #1
   164be:	701a      	strb	r2, [r3, #0]
      radio_really_lost = FALSE;
   164c0:	f24b 230e 	movw	r3, #45582	; 0xb20e
   164c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164c8:	2200      	movs	r2, #0
   164ca:	701a      	strb	r2, [r3, #0]
      time_since_last_ppm = 0;
   164cc:	f24b 230a 	movw	r3, #45578	; 0xb20a
   164d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164d4:	2200      	movs	r2, #0
   164d6:	801a      	strh	r2, [r3, #0]
      last_radio_from_ppm();
   164d8:	f7ff fb3a 	bl	15b50 <last_radio_from_ppm>
      //if (last_radio_contains_avg_channels) 
      {
	mode = MODE_OF_PPRZ(last_radio[RADIO_MODE]);
   164dc:	f24b 131c 	movw	r3, #45340	; 0xb11c
   164e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164e4:	891b      	ldrh	r3, [r3, #8]
   164e6:	b21b      	sxth	r3, r3
   164e8:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
   164ec:	bfb4      	ite	lt
   164ee:	2300      	movlt	r3, #0
   164f0:	2301      	movge	r3, #1
   164f2:	b2db      	uxtb	r3, r3
   164f4:	461a      	mov	r2, r3
   164f6:	f24b 2308 	movw	r3, #45576	; 0xb208
   164fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164fe:	701a      	strb	r2, [r3, #0]
      }
      if (mode == MODE_MANUAL) 
   16500:	f24b 2308 	movw	r3, #45576	; 0xb208
   16504:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16508:	781b      	ldrb	r3, [r3, #0]
   1650a:	2b00      	cmp	r3, #0
   1650c:	d105      	bne.n	1651a <test_ppm_task+0x8e>
      {
	servo_set(last_radio);
   1650e:	f24b 101c 	movw	r0, #45340	; 0xb11c
   16512:	f2c2 0000 	movt	r0, #8192	; 0x2000
   16516:	f000 f925 	bl	16764 <servo_set>
      }
    } 
    //else if (mode == MODE_MANUAL && radio_really_lost) 
    {
      mode = MODE_AUTO;
   1651a:	f24b 2308 	movw	r3, #45576	; 0xb208
   1651e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16522:	2201      	movs	r2, #1
   16524:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= STALLED_TIME) 
    {
      radio_ok = FALSE;
   16526:	f24b 230c 	movw	r3, #45580	; 0xb20c
   1652a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1652e:	2200      	movs	r2, #0
   16530:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= REALLY_STALLED_TIME) 
    {
      radio_really_lost = TRUE;
   16532:	f24b 230e 	movw	r3, #45582	; 0xb20e
   16536:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1653a:	2201      	movs	r2, #1
   1653c:	701a      	strb	r2, [r3, #0]
    }
	//vPrintString("S_1 test_ppm_task end! \n\r"); //SunnyBeike

}
   1653e:	bd80      	pop	{r7, pc}

00016540 <check_failsafe_task>:
void check_failsafe_task(void)
{
   16540:	b580      	push	{r7, lr}
   16542:	af00      	add	r7, sp, #0
	//vPrintString("S_9 check_failsafe_task start! \n\r"); //SunnyBeike
    //modified by wanbo
    //if ((mode == MODE_MANUAL && !radio_ok) || (mode == MODE_AUTO && !mega128_ok)) 
    {
      servo_set(failsafe);
   16544:	f648 00e0 	movw	r0, #35040	; 0x88e0
   16548:	f2c0 0001 	movt	r0, #1
   1654c:	f000 f90a 	bl	16764 <servo_set>
    }
	//vPrintString("S_9 check_failsafe_task end! \n\r"); //SunnyBeike
}
   16550:	bd80      	pop	{r7, pc}
   16552:	bf00      	nop

00016554 <check_mega128_values_task>:
void check_mega128_values_task(void)
{
   16554:	b580      	push	{r7, lr}
   16556:	af00      	add	r7, sp, #0
	//vPrintString("S_8 check_mega128_values_task start! \n\r"); //SunnyBeike
// modified by wanbo
     //if ( !SpiIsSelected() && spi_was_interrupted ) 
     {
         if (mega128_receive_valid)
   16558:	f24b 137a 	movw	r3, #45434	; 0xb17a
   1655c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16560:	781b      	ldrb	r3, [r3, #0]
   16562:	b2db      	uxtb	r3, r3
   16564:	2b00      	cmp	r3, #0
   16566:	d018      	beq.n	1659a <check_mega128_values_task+0x46>
         { 
             time_since_last_mega128 = 0;
   16568:	f24b 2309 	movw	r3, #45577	; 0xb209
   1656c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16570:	2200      	movs	r2, #0
   16572:	701a      	strb	r2, [r3, #0]
             mega128_ok = TRUE;
   16574:	f24b 230d 	movw	r3, #45581	; 0xb20d
   16578:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1657c:	2201      	movs	r2, #1
   1657e:	701a      	strb	r2, [r3, #0]
             if (mode == MODE_AUTO)
   16580:	f24b 2308 	movw	r3, #45576	; 0xb208
   16584:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16588:	781b      	ldrb	r3, [r3, #0]
   1658a:	2b01      	cmp	r3, #1
   1658c:	d105      	bne.n	1659a <check_mega128_values_task+0x46>
                 servo_set(from_mega128.channels);
   1658e:	f24b 104c 	movw	r0, #45388	; 0xb14c
   16592:	f2c2 0000 	movt	r0, #8192	; 0x2000
   16596:	f000 f8e5 	bl	16764 <servo_set>
         }
     }
     //if (time_since_last_mega128 == STALLED_TIME) 
     {
         mega128_ok = FALSE;
   1659a:	f24b 230d 	movw	r3, #45581	; 0xb20d
   1659e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165a2:	2200      	movs	r2, #0
   165a4:	701a      	strb	r2, [r3, #0]
     }
	//vPrintString("S_8 check_mega128_values_task end! \n\r"); //SunnyBeike
}
   165a6:	bd80      	pop	{r7, pc}

000165a8 <servo_init>:
 *
 * Ideally, you can use two decade counters to drive 20 servos.
 */
void
servo_init( void )
{
   165a8:	b480      	push	{r7}
   165aa:	b083      	sub	sp, #12
   165ac:	af00      	add	r7, sp, #0
  uint8_t			i;

  /* Configure the reset and clock lines */
  _4017_RESET_DDR |= _BV(_4017_RESET_PIN);
   165ae:	f242 0311 	movw	r3, #8209	; 0x2011
   165b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165b6:	f242 0211 	movw	r2, #8209	; 0x2011
   165ba:	f2c2 0200 	movt	r2, #8192	; 0x2000
   165be:	7812      	ldrb	r2, [r2, #0]
   165c0:	b2d2      	uxtb	r2, r2
   165c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
   165c6:	b2d2      	uxtb	r2, r2
   165c8:	701a      	strb	r2, [r3, #0]
  _4017_CLOCK_DDR |= _BV(_4017_CLOCK_PIN);
   165ca:	f242 0317 	movw	r3, #8215	; 0x2017
   165ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165d2:	f242 0217 	movw	r2, #8215	; 0x2017
   165d6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   165da:	7812      	ldrb	r2, [r2, #0]
   165dc:	b2d2      	uxtb	r2, r2
   165de:	f042 0202 	orr.w	r2, r2, #2
   165e2:	b2d2      	uxtb	r2, r2
   165e4:	701a      	strb	r2, [r3, #0]

  /* Reset the decade counter */
  sbi( _4017_RESET_PORT, _4017_RESET_PIN );
   165e6:	f242 0312 	movw	r3, #8210	; 0x2012
   165ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165ee:	f242 0212 	movw	r2, #8210	; 0x2012
   165f2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   165f6:	7812      	ldrb	r2, [r2, #0]
   165f8:	b2d2      	uxtb	r2, r2
   165fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
   165fe:	b2d2      	uxtb	r2, r2
   16600:	701a      	strb	r2, [r3, #0]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );
   16602:	f242 0318 	movw	r3, #8216	; 0x2018
   16606:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1660a:	f242 0218 	movw	r2, #8216	; 0x2018
   1660e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16612:	7812      	ldrb	r2, [r2, #0]
   16614:	b2d2      	uxtb	r2, r2
   16616:	f022 0202 	bic.w	r2, r2, #2
   1661a:	b2d2      	uxtb	r2, r2
   1661c:	701a      	strb	r2, [r3, #0]

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   1661e:	2300      	movs	r3, #0
   16620:	71fb      	strb	r3, [r7, #7]
   16622:	e00b      	b.n	1663c <servo_init+0x94>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
   16624:	79fa      	ldrb	r2, [r7, #7]
   16626:	f24b 2314 	movw	r3, #45588	; 0xb214
   1662a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1662e:	f645 51c0 	movw	r1, #24000	; 0x5dc0
   16632:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   16636:	79fb      	ldrb	r3, [r7, #7]
   16638:	3301      	adds	r3, #1
   1663a:	71fb      	strb	r3, [r7, #7]
   1663c:	79fb      	ldrb	r3, [r7, #7]
   1663e:	2b09      	cmp	r3, #9
   16640:	d9f0      	bls.n	16624 <servo_init+0x7c>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
	
  /* Set servos to go off some long time from now */
  SERVO_OCR	= 32768ul;
   16642:	f242 032a 	movw	r3, #8234	; 0x202a
   16646:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1664a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1664e:	801a      	strh	r2, [r3, #0]

  /*
   * Configure output compare to toggle the output bits.
   */
  TCCR1A |=  _BV(SERVO_COM0 );
   16650:	f242 032f 	movw	r3, #8239	; 0x202f
   16654:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16658:	f242 022f 	movw	r2, #8239	; 0x202f
   1665c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16660:	7812      	ldrb	r2, [r2, #0]
   16662:	b2d2      	uxtb	r2, r2
   16664:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16668:	b2d2      	uxtb	r2, r2
   1666a:	701a      	strb	r2, [r3, #0]
	
  /* Clear the interrupt flags in case they are set */
  TIFR = _BV(SERVO_FLAG);
   1666c:	f242 0336 	movw	r3, #8246	; 0x2036
   16670:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16674:	2210      	movs	r2, #16
   16676:	701a      	strb	r2, [r3, #0]

  /* Unassert the decade counter reset to start it running */
  cbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16678:	f242 0312 	movw	r3, #8210	; 0x2012
   1667c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16680:	f242 0212 	movw	r2, #8210	; 0x2012
   16684:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16688:	7812      	ldrb	r2, [r2, #0]
   1668a:	b2d2      	uxtb	r2, r2
   1668c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   16690:	b2d2      	uxtb	r2, r2
   16692:	701a      	strb	r2, [r3, #0]

  /* Enable our output compare interrupts */
  TIMSK |= _BV(SERVO_ENABLE );
   16694:	f242 0337 	movw	r3, #8247	; 0x2037
   16698:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1669c:	f242 0237 	movw	r2, #8247	; 0x2037
   166a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   166a4:	7812      	ldrb	r2, [r2, #0]
   166a6:	b2d2      	uxtb	r2, r2
   166a8:	f042 0210 	orr.w	r2, r2, #16
   166ac:	b2d2      	uxtb	r2, r2
   166ae:	701a      	strb	r2, [r3, #0]
}
   166b0:	370c      	adds	r7, #12
   166b2:	46bd      	mov	sp, r7
   166b4:	f85d 7b04 	ldr.w	r7, [sp], #4
   166b8:	4770      	bx	lr
   166ba:	bf00      	nop

000166bc <servo_set_one>:

  servo++;
}
#endif

void servo_set_one(uint8_t servo, uint16_t value_us) {
   166bc:	b480      	push	{r7}
   166be:	b083      	sub	sp, #12
   166c0:	af00      	add	r7, sp, #0
   166c2:	4602      	mov	r2, r0
   166c4:	460b      	mov	r3, r1
   166c6:	71fa      	strb	r2, [r7, #7]
   166c8:	80bb      	strh	r3, [r7, #4]
  servo_widths[servo] = ChopServo(CLOCK*value_us);
   166ca:	79f9      	ldrb	r1, [r7, #7]
   166cc:	88bb      	ldrh	r3, [r7, #4]
   166ce:	011b      	lsls	r3, r3, #4
   166d0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   166d4:	d308      	bcc.n	166e8 <servo_set_one+0x2c>
   166d6:	88bb      	ldrh	r3, [r7, #4]
   166d8:	011b      	lsls	r3, r3, #4
   166da:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   166de:	bf28      	it	cs
   166e0:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   166e4:	b29a      	uxth	r2, r3
   166e6:	e001      	b.n	166ec <servo_set_one+0x30>
   166e8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   166ec:	f24b 2314 	movw	r3, #45588	; 0xb214
   166f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   166f4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
   166f8:	370c      	adds	r7, #12
   166fa:	46bd      	mov	sp, r7
   166fc:	f85d 7b04 	ldr.w	r7, [sp], #4
   16700:	4770      	bx	lr
   16702:	bf00      	nop

00016704 <servo_transmit>:

void 
servo_transmit(void) {
   16704:	b580      	push	{r7, lr}
   16706:	b082      	sub	sp, #8
   16708:	af00      	add	r7, sp, #0
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);
   1670a:	2000      	movs	r0, #0
   1670c:	f000 f9e6 	bl	16adc <uart_transmit>
   16710:	2000      	movs	r0, #0
   16712:	f000 f9e3 	bl	16adc <uart_transmit>

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16716:	2300      	movs	r3, #0
   16718:	71fb      	strb	r3, [r7, #7]
   1671a:	e01a      	b.n	16752 <servo_transmit+0x4e>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
   1671c:	79fa      	ldrb	r2, [r7, #7]
   1671e:	f24b 2314 	movw	r3, #45588	; 0xb214
   16722:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16726:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   1672a:	0a1b      	lsrs	r3, r3, #8
   1672c:	b29b      	uxth	r3, r3
   1672e:	b2db      	uxtb	r3, r3
   16730:	4618      	mov	r0, r3
   16732:	f000 f9d3 	bl	16adc <uart_transmit>
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
   16736:	79fa      	ldrb	r2, [r7, #7]
   16738:	f24b 2314 	movw	r3, #45588	; 0xb214
   1673c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16740:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16744:	b2db      	uxtb	r3, r3
   16746:	4618      	mov	r0, r3
   16748:	f000 f9c8 	bl	16adc <uart_transmit>
servo_transmit(void) {
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   1674c:	79fb      	ldrb	r3, [r7, #7]
   1674e:	3301      	adds	r3, #1
   16750:	71fb      	strb	r3, [r7, #7]
   16752:	79fb      	ldrb	r3, [r7, #7]
   16754:	2b09      	cmp	r3, #9
   16756:	d9e1      	bls.n	1671c <servo_transmit+0x18>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
  }
  uart_transmit((uint8_t)'\n');
   16758:	200a      	movs	r0, #10
   1675a:	f000 f9bf 	bl	16adc <uart_transmit>
	//vPrintString("S_10 servo_transmit end! \n\r"); //SunnyBeike
}
   1675e:	3708      	adds	r7, #8
   16760:	46bd      	mov	sp, r7
   16762:	bd80      	pop	{r7, pc}

00016764 <servo_set>:
 *
 * defines how servos react to radio control or autopilot channels
 *
 */

void servo_set(const pprz_t values[]) {
   16764:	b5b0      	push	{r4, r5, r7, lr}
   16766:	b084      	sub	sp, #16
   16768:	af00      	add	r7, sp, #0
   1676a:	6078      	str	r0, [r7, #4]
  ServoSet(values); /*Generated from airframe.xml */
   1676c:	687b      	ldr	r3, [r7, #4]
   1676e:	330a      	adds	r3, #10
   16770:	881b      	ldrh	r3, [r3, #0]
   16772:	b21b      	sxth	r3, r3
   16774:	005b      	lsls	r3, r3, #1
   16776:	4618      	mov	r0, r3
   16778:	f001 f8bc 	bl	178f4 <__aeabi_i2d>
   1677c:	4602      	mov	r2, r0
   1677e:	460b      	mov	r3, r1
   16780:	4610      	mov	r0, r2
   16782:	4619      	mov	r1, r3
   16784:	a3a6      	add	r3, pc, #664	; (adr r3, 16a20 <servo_set+0x2bc>)
   16786:	e9d3 2300 	ldrd	r2, r3, [r3]
   1678a:	f001 f919 	bl	179c0 <__aeabi_dmul>
   1678e:	4602      	mov	r2, r0
   16790:	460b      	mov	r3, r1
   16792:	4610      	mov	r0, r2
   16794:	4619      	mov	r1, r3
   16796:	f001 fbad 	bl	17ef4 <__aeabi_d2iz>
   1679a:	4603      	mov	r3, r0
   1679c:	b29b      	uxth	r3, r3
   1679e:	b29b      	uxth	r3, r3
   167a0:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   167a4:	81fb      	strh	r3, [r7, #14]
   167a6:	89fb      	ldrh	r3, [r7, #14]
   167a8:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   167ac:	d307      	bcc.n	167be <servo_set+0x5a>
   167ae:	89fb      	ldrh	r3, [r7, #14]
   167b0:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   167b4:	bf28      	it	cs
   167b6:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   167ba:	b29a      	uxth	r2, r3
   167bc:	e001      	b.n	167c2 <servo_set+0x5e>
   167be:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   167c2:	f24b 2314 	movw	r3, #45588	; 0xb214
   167c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167ca:	80da      	strh	r2, [r3, #6]
   167cc:	687b      	ldr	r3, [r7, #4]
   167ce:	881b      	ldrh	r3, [r3, #0]
   167d0:	b21b      	sxth	r3, r3
   167d2:	005b      	lsls	r3, r3, #1
   167d4:	4618      	mov	r0, r3
   167d6:	f001 f88d 	bl	178f4 <__aeabi_i2d>
   167da:	4602      	mov	r2, r0
   167dc:	460b      	mov	r3, r1
   167de:	4610      	mov	r0, r2
   167e0:	4619      	mov	r1, r3
   167e2:	a38f      	add	r3, pc, #572	; (adr r3, 16a20 <servo_set+0x2bc>)
   167e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   167e8:	f001 f8ea 	bl	179c0 <__aeabi_dmul>
   167ec:	4602      	mov	r2, r0
   167ee:	460b      	mov	r3, r1
   167f0:	4610      	mov	r0, r2
   167f2:	4619      	mov	r1, r3
   167f4:	f001 fb7e 	bl	17ef4 <__aeabi_d2iz>
   167f8:	4603      	mov	r3, r0
   167fa:	b29b      	uxth	r3, r3
   167fc:	b29b      	uxth	r3, r3
   167fe:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16802:	81fb      	strh	r3, [r7, #14]
   16804:	89fb      	ldrh	r3, [r7, #14]
   16806:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   1680a:	d307      	bcc.n	1681c <servo_set+0xb8>
   1680c:	89fb      	ldrh	r3, [r7, #14]
   1680e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16812:	bf28      	it	cs
   16814:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16818:	b29a      	uxth	r2, r3
   1681a:	e001      	b.n	16820 <servo_set+0xbc>
   1681c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16820:	f24b 2314 	movw	r3, #45588	; 0xb214
   16824:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16828:	825a      	strh	r2, [r3, #18]
   1682a:	687b      	ldr	r3, [r7, #4]
   1682c:	3304      	adds	r3, #4
   1682e:	881b      	ldrh	r3, [r3, #0]
   16830:	b21b      	sxth	r3, r3
   16832:	4618      	mov	r0, r3
   16834:	f001 f85e 	bl	178f4 <__aeabi_i2d>
   16838:	4602      	mov	r2, r0
   1683a:	460b      	mov	r3, r1
   1683c:	4610      	mov	r0, r2
   1683e:	4619      	mov	r1, r3
   16840:	a379      	add	r3, pc, #484	; (adr r3, 16a28 <servo_set+0x2c4>)
   16842:	e9d3 2300 	ldrd	r2, r3, [r3]
   16846:	f001 f8bb 	bl	179c0 <__aeabi_dmul>
   1684a:	4602      	mov	r2, r0
   1684c:	460b      	mov	r3, r1
   1684e:	4610      	mov	r0, r2
   16850:	4619      	mov	r1, r3
   16852:	f001 fb4f 	bl	17ef4 <__aeabi_d2iz>
   16856:	4603      	mov	r3, r0
   16858:	b29b      	uxth	r3, r3
   1685a:	b29b      	uxth	r3, r3
   1685c:	f503 43bf 	add.w	r3, r3, #24448	; 0x5f80
   16860:	3320      	adds	r3, #32
   16862:	81fb      	strh	r3, [r7, #14]
   16864:	89fb      	ldrh	r3, [r7, #14]
   16866:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   1686a:	d307      	bcc.n	1687c <servo_set+0x118>
   1686c:	89fb      	ldrh	r3, [r7, #14]
   1686e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16872:	bf28      	it	cs
   16874:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16878:	b29a      	uxth	r2, r3
   1687a:	e001      	b.n	16880 <servo_set+0x11c>
   1687c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16880:	f24b 2314 	movw	r3, #45588	; 0xb214
   16884:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16888:	819a      	strh	r2, [r3, #12]
   1688a:	687b      	ldr	r3, [r7, #4]
   1688c:	885b      	ldrh	r3, [r3, #2]
   1688e:	81bb      	strh	r3, [r7, #12]
   16890:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16894:	2b00      	cmp	r3, #0
   16896:	dd06      	ble.n	168a6 <servo_set+0x142>
   16898:	f04f 0400 	mov.w	r4, #0
   1689c:	f04f 0500 	mov.w	r5, #0
   168a0:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   168a4:	e002      	b.n	168ac <servo_set+0x148>
   168a6:	a562      	add	r5, pc, #392	; (adr r5, 16a30 <servo_set+0x2cc>)
   168a8:	e9d5 4500 	ldrd	r4, r5, [r5]
   168ac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   168b0:	4618      	mov	r0, r3
   168b2:	f001 f81f 	bl	178f4 <__aeabi_i2d>
   168b6:	4602      	mov	r2, r0
   168b8:	460b      	mov	r3, r1
   168ba:	4620      	mov	r0, r4
   168bc:	4629      	mov	r1, r5
   168be:	f001 f87f 	bl	179c0 <__aeabi_dmul>
   168c2:	4602      	mov	r2, r0
   168c4:	460b      	mov	r3, r1
   168c6:	4610      	mov	r0, r2
   168c8:	4619      	mov	r1, r3
   168ca:	a35b      	add	r3, pc, #364	; (adr r3, 16a38 <servo_set+0x2d4>)
   168cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   168d0:	f001 f876 	bl	179c0 <__aeabi_dmul>
   168d4:	4602      	mov	r2, r0
   168d6:	460b      	mov	r3, r1
   168d8:	4610      	mov	r0, r2
   168da:	4619      	mov	r1, r3
   168dc:	f001 fb0a 	bl	17ef4 <__aeabi_d2iz>
   168e0:	4603      	mov	r3, r0
   168e2:	b29b      	uxth	r3, r3
   168e4:	b29b      	uxth	r3, r3
   168e6:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
   168ea:	81fb      	strh	r3, [r7, #14]
   168ec:	89fb      	ldrh	r3, [r7, #14]
   168ee:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   168f2:	d307      	bcc.n	16904 <servo_set+0x1a0>
   168f4:	89fb      	ldrh	r3, [r7, #14]
   168f6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   168fa:	bf28      	it	cs
   168fc:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16900:	b29a      	uxth	r2, r3
   16902:	e001      	b.n	16908 <servo_set+0x1a4>
   16904:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16908:	f24b 2314 	movw	r3, #45588	; 0xb214
   1690c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16910:	801a      	strh	r2, [r3, #0]
   16912:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16916:	2b00      	cmp	r3, #0
   16918:	dd03      	ble.n	16922 <servo_set+0x1be>
   1691a:	a545      	add	r5, pc, #276	; (adr r5, 16a30 <servo_set+0x2cc>)
   1691c:	e9d5 4500 	ldrd	r4, r5, [r5]
   16920:	e005      	b.n	1692e <servo_set+0x1ca>
   16922:	f04f 0400 	mov.w	r4, #0
   16926:	f04f 0500 	mov.w	r5, #0
   1692a:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   1692e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16932:	4618      	mov	r0, r3
   16934:	f000 ffde 	bl	178f4 <__aeabi_i2d>
   16938:	4602      	mov	r2, r0
   1693a:	460b      	mov	r3, r1
   1693c:	4620      	mov	r0, r4
   1693e:	4629      	mov	r1, r5
   16940:	f001 f83e 	bl	179c0 <__aeabi_dmul>
   16944:	4602      	mov	r2, r0
   16946:	460b      	mov	r3, r1
   16948:	4610      	mov	r0, r2
   1694a:	4619      	mov	r1, r3
   1694c:	a33c      	add	r3, pc, #240	; (adr r3, 16a40 <servo_set+0x2dc>)
   1694e:	e9d3 2300 	ldrd	r2, r3, [r3]
   16952:	f001 f835 	bl	179c0 <__aeabi_dmul>
   16956:	4602      	mov	r2, r0
   16958:	460b      	mov	r3, r1
   1695a:	4610      	mov	r0, r2
   1695c:	4619      	mov	r1, r3
   1695e:	f001 fac9 	bl	17ef4 <__aeabi_d2iz>
   16962:	4603      	mov	r3, r0
   16964:	b29b      	uxth	r3, r3
   16966:	b29b      	uxth	r3, r3
   16968:	f503 43ce 	add.w	r3, r3, #26368	; 0x6700
   1696c:	3320      	adds	r3, #32
   1696e:	81fb      	strh	r3, [r7, #14]
   16970:	89fb      	ldrh	r3, [r7, #14]
   16972:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16976:	d307      	bcc.n	16988 <servo_set+0x224>
   16978:	89fb      	ldrh	r3, [r7, #14]
   1697a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   1697e:	bf28      	it	cs
   16980:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16984:	b29a      	uxth	r2, r3
   16986:	e001      	b.n	1698c <servo_set+0x228>
   16988:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   1698c:	f24b 2314 	movw	r3, #45588	; 0xb214
   16990:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16994:	809a      	strh	r2, [r3, #4]
   16996:	687b      	ldr	r3, [r7, #4]
   16998:	3306      	adds	r3, #6
   1699a:	881b      	ldrh	r3, [r3, #0]
   1699c:	b21b      	sxth	r3, r3
   1699e:	4618      	mov	r0, r3
   169a0:	f000 ffa8 	bl	178f4 <__aeabi_i2d>
   169a4:	4604      	mov	r4, r0
   169a6:	460d      	mov	r5, r1
   169a8:	687b      	ldr	r3, [r7, #4]
   169aa:	3302      	adds	r3, #2
   169ac:	881b      	ldrh	r3, [r3, #0]
   169ae:	b21b      	sxth	r3, r3
   169b0:	4618      	mov	r0, r3
   169b2:	f000 ff9f 	bl	178f4 <__aeabi_i2d>
   169b6:	4602      	mov	r2, r0
   169b8:	460b      	mov	r3, r1
   169ba:	4620      	mov	r0, r4
   169bc:	4629      	mov	r1, r5
   169be:	f000 fe4d 	bl	1765c <__adddf3>
   169c2:	4602      	mov	r2, r0
   169c4:	460b      	mov	r3, r1
   169c6:	4610      	mov	r0, r2
   169c8:	4619      	mov	r1, r3
   169ca:	a31f      	add	r3, pc, #124	; (adr r3, 16a48 <servo_set+0x2e4>)
   169cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   169d0:	f000 fff6 	bl	179c0 <__aeabi_dmul>
   169d4:	4602      	mov	r2, r0
   169d6:	460b      	mov	r3, r1
   169d8:	4610      	mov	r0, r2
   169da:	4619      	mov	r1, r3
   169dc:	f001 fa8a 	bl	17ef4 <__aeabi_d2iz>
   169e0:	4603      	mov	r3, r0
   169e2:	b29b      	uxth	r3, r3
   169e4:	b29b      	uxth	r3, r3
   169e6:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
   169ea:	3320      	adds	r3, #32
   169ec:	81fb      	strh	r3, [r7, #14]
   169ee:	89fb      	ldrh	r3, [r7, #14]
   169f0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   169f4:	d307      	bcc.n	16a06 <servo_set+0x2a2>
   169f6:	89fb      	ldrh	r3, [r7, #14]
   169f8:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   169fc:	bf28      	it	cs
   169fe:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16a02:	b29a      	uxth	r2, r3
   16a04:	e001      	b.n	16a0a <servo_set+0x2a6>
   16a06:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16a0a:	f24b 2314 	movw	r3, #45588	; 0xb214
   16a0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16a12:	81da      	strh	r2, [r3, #14]
}
   16a14:	3710      	adds	r7, #16
   16a16:	46bd      	mov	sp, r7
   16a18:	bdb0      	pop	{r4, r5, r7, pc}
   16a1a:	bf00      	nop
   16a1c:	f3af 8000 	nop.w
   16a20:	aaaa9ef0 	.word	0xaaaa9ef0
   16a24:	3feaaaaa 	.word	0x3feaaaaa
   16a28:	fc96473e 	.word	0xfc96473e
   16a2c:	3fdfc962 	.word	0x3fdfc962
   16a30:	51eb851f 	.word	0x51eb851f
   16a34:	3fe51eb8 	.word	0x3fe51eb8
   16a38:	9999999a 	.word	0x9999999a
   16a3c:	bfe19999 	.word	0xbfe19999
   16a40:	aaaa9ef0 	.word	0xaaaa9ef0
   16a44:	bfe0aaaa 	.word	0xbfe0aaaa
   16a48:	eeeed77a 	.word	0xeeeed77a
   16a4c:	bfdeeeee 	.word	0xbfdeeeee

00016a50 <uart_init_tx>:
 * UART Baud rate generation settings:
 *
 * With 16.0 MHz clock,UBRR=25  => 38400 baud
 *
 */
void uart_init_tx( void ) {
   16a50:	b480      	push	{r7}
   16a52:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRRH = 0; 
   16a54:	f242 0320 	movw	r3, #8224	; 0x2020
   16a58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16a5c:	2200      	movs	r2, #0
   16a5e:	701a      	strb	r2, [r3, #0]
  UBRRL = 25; 
   16a60:	f242 0309 	movw	r3, #8201	; 0x2009
   16a64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16a68:	2219      	movs	r2, #25
   16a6a:	701a      	strb	r2, [r3, #0]
  /* single speed */ 
  UCSRA = 0; 
   16a6c:	f242 030b 	movw	r3, #8203	; 0x200b
   16a70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16a74:	2200      	movs	r2, #0
   16a76:	701a      	strb	r2, [r3, #0]
  /* Enable transmitter */ 
  UCSRB = _BV(TXEN); 
   16a78:	f242 030a 	movw	r3, #8202	; 0x200a
   16a7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16a80:	2208      	movs	r2, #8
   16a82:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0); 
   16a84:	f242 0320 	movw	r3, #8224	; 0x2020
   16a88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16a8c:	2286      	movs	r2, #134	; 0x86
   16a8e:	701a      	strb	r2, [r3, #0]
}
   16a90:	46bd      	mov	sp, r7
   16a92:	f85d 7b04 	ldr.w	r7, [sp], #4
   16a96:	4770      	bx	lr

00016a98 <uart_init_rx>:

void uart_init_rx() {
   16a98:	b480      	push	{r7}
   16a9a:	af00      	add	r7, sp, #0
  /* Enable receiver               */ 
  UCSRB |= _BV(RXEN); 
   16a9c:	f242 030a 	movw	r3, #8202	; 0x200a
   16aa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16aa4:	f242 020a 	movw	r2, #8202	; 0x200a
   16aa8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16aac:	7812      	ldrb	r2, [r2, #0]
   16aae:	b2d2      	uxtb	r2, r2
   16ab0:	f042 0210 	orr.w	r2, r2, #16
   16ab4:	b2d2      	uxtb	r2, r2
   16ab6:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi( UCSRB, RXCIE ); 
   16ab8:	f242 030a 	movw	r3, #8202	; 0x200a
   16abc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ac0:	f242 020a 	movw	r2, #8202	; 0x200a
   16ac4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16ac8:	7812      	ldrb	r2, [r2, #0]
   16aca:	b2d2      	uxtb	r2, r2
   16acc:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16ad0:	b2d2      	uxtb	r2, r2
   16ad2:	701a      	strb	r2, [r3, #0]
}
   16ad4:	46bd      	mov	sp, r7
   16ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
   16ada:	4770      	bx	lr

00016adc <uart_transmit>:

void uart_transmit( unsigned char data ) {
   16adc:	b480      	push	{r7}
   16ade:	b083      	sub	sp, #12
   16ae0:	af00      	add	r7, sp, #0
   16ae2:	4603      	mov	r3, r0
   16ae4:	71fb      	strb	r3, [r7, #7]
  if (UCSRB & _BV(TXCIE)) {
   16ae6:	f242 030a 	movw	r3, #8202	; 0x200a
   16aea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16aee:	781b      	ldrb	r3, [r3, #0]
   16af0:	b2db      	uxtb	r3, r3
   16af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
   16af6:	2b00      	cmp	r3, #0
   16af8:	d028      	beq.n	16b4c <uart_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail == tx_head + 1) { /* BUF_SIZE = 256 */
   16afa:	f24b 2329 	movw	r3, #45609	; 0xb229
   16afe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b02:	781b      	ldrb	r3, [r3, #0]
   16b04:	b2db      	uxtb	r3, r3
   16b06:	461a      	mov	r2, r3
   16b08:	f24b 2328 	movw	r3, #45608	; 0xb228
   16b0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b10:	781b      	ldrb	r3, [r3, #0]
   16b12:	3301      	adds	r3, #1
   16b14:	429a      	cmp	r2, r3
   16b16:	d100      	bne.n	16b1a <uart_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   16b18:	e02c      	b.n	16b74 <uart_transmit+0x98>
    }
    tx_buf[tx_head] = data;
   16b1a:	f24b 2328 	movw	r3, #45608	; 0xb228
   16b1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b22:	781b      	ldrb	r3, [r3, #0]
   16b24:	461a      	mov	r2, r3
   16b26:	f24b 232c 	movw	r3, #45612	; 0xb22c
   16b2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b2e:	79f9      	ldrb	r1, [r7, #7]
   16b30:	5499      	strb	r1, [r3, r2]
    tx_head++; /* BUF_SIZE = 256 */
   16b32:	f24b 2328 	movw	r3, #45608	; 0xb228
   16b36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b3a:	781b      	ldrb	r3, [r3, #0]
   16b3c:	3301      	adds	r3, #1
   16b3e:	b2da      	uxtb	r2, r3
   16b40:	f24b 2328 	movw	r3, #45608	; 0xb228
   16b44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b48:	701a      	strb	r2, [r3, #0]
   16b4a:	e013      	b.n	16b74 <uart_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR = data;
   16b4c:	f242 030c 	movw	r3, #8204	; 0x200c
   16b50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b54:	79fa      	ldrb	r2, [r7, #7]
   16b56:	701a      	strb	r2, [r3, #0]
    sbi(UCSRB, TXCIE);
   16b58:	f242 030a 	movw	r3, #8202	; 0x200a
   16b5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b60:	f242 020a 	movw	r2, #8202	; 0x200a
   16b64:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16b68:	7812      	ldrb	r2, [r2, #0]
   16b6a:	b2d2      	uxtb	r2, r2
   16b6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16b70:	b2d2      	uxtb	r2, r2
   16b72:	701a      	strb	r2, [r3, #0]
  }
}
   16b74:	370c      	adds	r7, #12
   16b76:	46bd      	mov	sp, r7
   16b78:	f85d 7b04 	ldr.w	r7, [sp], #4
   16b7c:	4770      	bx	lr
   16b7e:	bf00      	nop

00016b80 <uart_print_hex>:

void uart_print_hex ( uint8_t c ) {
   16b80:	b590      	push	{r4, r7, lr}
   16b82:	b089      	sub	sp, #36	; 0x24
   16b84:	af00      	add	r7, sp, #0
   16b86:	4603      	mov	r3, r0
   16b88:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   16b8a:	f648 1334 	movw	r3, #35124	; 0x8934
   16b8e:	f2c0 0301 	movt	r3, #1
   16b92:	f107 040c 	add.w	r4, r7, #12
   16b96:	6818      	ldr	r0, [r3, #0]
   16b98:	6859      	ldr	r1, [r3, #4]
   16b9a:	689a      	ldr	r2, [r3, #8]
   16b9c:	68db      	ldr	r3, [r3, #12]
   16b9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   16ba0:	79fb      	ldrb	r3, [r7, #7]
   16ba2:	091b      	lsrs	r3, r3, #4
   16ba4:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   16ba6:	79fb      	ldrb	r3, [r7, #7]
   16ba8:	f003 030f 	and.w	r3, r3, #15
   16bac:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
        high = 15;
   16bae:	230f      	movs	r3, #15
   16bb0:	77fb      	strb	r3, [r7, #31]
        low = 15;
   16bb2:	230f      	movs	r3, #15
   16bb4:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */

    uart_transmit(hex[high]);
   16bb6:	7ffb      	ldrb	r3, [r7, #31]
   16bb8:	f107 0220 	add.w	r2, r7, #32
   16bbc:	4413      	add	r3, r2
   16bbe:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   16bc2:	4618      	mov	r0, r3
   16bc4:	f7ff ff8a 	bl	16adc <uart_transmit>
  uart_transmit(hex[low]);
   16bc8:	7fbb      	ldrb	r3, [r7, #30]
   16bca:	f107 0220 	add.w	r2, r7, #32
   16bce:	4413      	add	r3, r2
   16bd0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   16bd4:	4618      	mov	r0, r3
   16bd6:	f7ff ff81 	bl	16adc <uart_transmit>
} 
   16bda:	3724      	adds	r7, #36	; 0x24
   16bdc:	46bd      	mov	sp, r7
   16bde:	bd90      	pop	{r4, r7, pc}

00016be0 <uart_print_hex16>:

void uart_print_hex16 ( uint16_t c ) {
   16be0:	b580      	push	{r7, lr}
   16be2:	b084      	sub	sp, #16
   16be4:	af00      	add	r7, sp, #0
   16be6:	4603      	mov	r3, r0
   16be8:	80fb      	strh	r3, [r7, #6]
  uint8_t high = (uint8_t)(c>>8);
   16bea:	88fb      	ldrh	r3, [r7, #6]
   16bec:	0a1b      	lsrs	r3, r3, #8
   16bee:	b29b      	uxth	r3, r3
   16bf0:	73fb      	strb	r3, [r7, #15]
  uint8_t low  = (uint8_t)(c);
   16bf2:	88fb      	ldrh	r3, [r7, #6]
   16bf4:	73bb      	strb	r3, [r7, #14]
  uart_print_hex(high);
   16bf6:	7bfb      	ldrb	r3, [r7, #15]
   16bf8:	4618      	mov	r0, r3
   16bfa:	f7ff ffc1 	bl	16b80 <uart_print_hex>
  uart_print_hex(low);
   16bfe:	7bbb      	ldrb	r3, [r7, #14]
   16c00:	4618      	mov	r0, r3
   16c02:	f7ff ffbd 	bl	16b80 <uart_print_hex>
}
   16c06:	3710      	adds	r7, #16
   16c08:	46bd      	mov	sp, r7
   16c0a:	bd80      	pop	{r7, pc}

00016c0c <uart_print_string>:

void uart_print_string(const uint8_t* s) {
   16c0c:	b580      	push	{r7, lr}
   16c0e:	b084      	sub	sp, #16
   16c10:	af00      	add	r7, sp, #0
   16c12:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   16c14:	2300      	movs	r3, #0
   16c16:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   16c18:	e009      	b.n	16c2e <uart_print_string+0x22>
    uart_transmit(s[i]);
   16c1a:	7bfb      	ldrb	r3, [r7, #15]
   16c1c:	687a      	ldr	r2, [r7, #4]
   16c1e:	4413      	add	r3, r2
   16c20:	781b      	ldrb	r3, [r3, #0]
   16c22:	4618      	mov	r0, r3
   16c24:	f7ff ff5a 	bl	16adc <uart_transmit>
    i++;
   16c28:	7bfb      	ldrb	r3, [r7, #15]
   16c2a:	3301      	adds	r3, #1
   16c2c:	73fb      	strb	r3, [r7, #15]
  uart_print_hex(low);
}

void uart_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   16c2e:	7bfb      	ldrb	r3, [r7, #15]
   16c30:	687a      	ldr	r2, [r7, #4]
   16c32:	4413      	add	r3, r2
   16c34:	781b      	ldrb	r3, [r3, #0]
   16c36:	2b00      	cmp	r3, #0
   16c38:	d1ef      	bne.n	16c1a <uart_print_string+0xe>
    uart_transmit(s[i]);
    i++;
  }
}
   16c3a:	3710      	adds	r7, #16
   16c3c:	46bd      	mov	sp, r7
   16c3e:	bd80      	pop	{r7, pc}

00016c40 <SIG_UART_TRANS>:

SIGNAL(SIG_UART_TRANS) {
   16c40:	b480      	push	{r7}
   16c42:	af00      	add	r7, sp, #0
  if (tx_head == tx_tail) {
   16c44:	f24b 2328 	movw	r3, #45608	; 0xb228
   16c48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c4c:	781a      	ldrb	r2, [r3, #0]
   16c4e:	f24b 2329 	movw	r3, #45609	; 0xb229
   16c52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c56:	781b      	ldrb	r3, [r3, #0]
   16c58:	b2db      	uxtb	r3, r3
   16c5a:	429a      	cmp	r2, r3
   16c5c:	d10e      	bne.n	16c7c <SIG_UART_TRANS+0x3c>
    /* Nothing more to send */
    cbi(UCSRB, TXCIE); /* disable interrupt */
   16c5e:	f242 030a 	movw	r3, #8202	; 0x200a
   16c62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c66:	f242 020a 	movw	r2, #8202	; 0x200a
   16c6a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16c6e:	7812      	ldrb	r2, [r2, #0]
   16c70:	b2d2      	uxtb	r2, r2
   16c72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   16c76:	b2d2      	uxtb	r2, r2
   16c78:	701a      	strb	r2, [r3, #0]
   16c7a:	e01d      	b.n	16cb8 <SIG_UART_TRANS+0x78>
  } else {
    UDR = tx_buf[tx_tail];
   16c7c:	f242 030c 	movw	r3, #8204	; 0x200c
   16c80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c84:	f24b 2229 	movw	r2, #45609	; 0xb229
   16c88:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16c8c:	7812      	ldrb	r2, [r2, #0]
   16c8e:	b2d2      	uxtb	r2, r2
   16c90:	4611      	mov	r1, r2
   16c92:	f24b 222c 	movw	r2, #45612	; 0xb22c
   16c96:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16c9a:	5c52      	ldrb	r2, [r2, r1]
   16c9c:	701a      	strb	r2, [r3, #0]
    tx_tail++; /* warning tx_buf_len is 256 */
   16c9e:	f24b 2329 	movw	r3, #45609	; 0xb229
   16ca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ca6:	781b      	ldrb	r3, [r3, #0]
   16ca8:	b2db      	uxtb	r3, r3
   16caa:	3301      	adds	r3, #1
   16cac:	b2da      	uxtb	r2, r3
   16cae:	f24b 2329 	movw	r3, #45609	; 0xb229
   16cb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16cb6:	701a      	strb	r2, [r3, #0]
  }
}
   16cb8:	46bd      	mov	sp, r7
   16cba:	f85d 7b04 	ldr.w	r7, [sp], #4
   16cbe:	4770      	bx	lr

00016cc0 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
   16cc0:	b580      	push	{r7, lr}
   16cc2:	b082      	sub	sp, #8
   16cc4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   16cc6:	2010      	movs	r0, #16
   16cc8:	2101      	movs	r1, #1
   16cca:	f7ea f879 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
   16cce:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   16cd2:	f2c4 0001 	movt	r0, #16385	; 0x4001
   16cd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   16cda:	2201      	movs	r2, #1
   16cdc:	f7ea fb80 	bl	13e0 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
   16ce0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   16ce4:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   16ce6:	2310      	movs	r3, #16
   16ce8:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   16cea:	2303      	movs	r3, #3
   16cec:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   16cee:	1d3b      	adds	r3, r7, #4
   16cf0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   16cf4:	f2c4 0001 	movt	r0, #16385	; 0x4001
   16cf8:	4619      	mov	r1, r3
   16cfa:	f7ea fa35 	bl	1168 <GPIO_Init>
}
   16cfe:	3708      	adds	r7, #8
   16d00:	46bd      	mov	sp, r7
   16d02:	bd80      	pop	{r7, pc}

00016d04 <init_button>:

void init_button(void)
{
   16d04:	b580      	push	{r7, lr}
   16d06:	b082      	sub	sp, #8
   16d08:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   16d0a:	2004      	movs	r0, #4
   16d0c:	2101      	movs	r1, #1
   16d0e:	f7ea f857 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
   16d12:	2301      	movs	r3, #1
   16d14:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   16d16:	2304      	movs	r3, #4
   16d18:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   16d1a:	2303      	movs	r3, #3
   16d1c:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   16d1e:	1d3b      	adds	r3, r7, #4
   16d20:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   16d24:	f2c4 0001 	movt	r0, #16385	; 0x4001
   16d28:	4619      	mov	r1, r3
   16d2a:	f7ea fa1d 	bl	1168 <GPIO_Init>
}
   16d2e:	3708      	adds	r7, #8
   16d30:	46bd      	mov	sp, r7
   16d32:	bd80      	pop	{r7, pc}

00016d34 <enable_button_interrupts>:

void enable_button_interrupts(void)
{
   16d34:	b580      	push	{r7, lr}
   16d36:	b084      	sub	sp, #16
   16d38:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   16d3a:	2001      	movs	r0, #1
   16d3c:	2101      	movs	r1, #1
   16d3e:	f7ea f83f 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
   16d42:	2000      	movs	r0, #0
   16d44:	2100      	movs	r1, #0
   16d46:	f7ea fc43 	bl	15d0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
   16d4a:	2301      	movs	r3, #1
   16d4c:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   16d4e:	2300      	movs	r3, #0
   16d50:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
   16d52:	2308      	movs	r3, #8
   16d54:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   16d56:	2301      	movs	r3, #1
   16d58:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
   16d5a:	f107 0308 	add.w	r3, r7, #8
   16d5e:	4618      	mov	r0, r3
   16d60:	f7eb f93c 	bl	1fdc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
   16d64:	2306      	movs	r3, #6
   16d66:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   16d68:	230f      	movs	r3, #15
   16d6a:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
   16d6c:	230f      	movs	r3, #15
   16d6e:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   16d70:	2301      	movs	r3, #1
   16d72:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   16d74:	1d3b      	adds	r3, r7, #4
   16d76:	4618      	mov	r0, r3
   16d78:	f7eb fa6a 	bl	2250 <NVIC_Init>
}
   16d7c:	3710      	adds	r7, #16
   16d7e:	46bd      	mov	sp, r7
   16d80:	bd80      	pop	{r7, pc}
   16d82:	bf00      	nop

00016d84 <init_rs232>:

void init_rs232(void)
{
   16d84:	b580      	push	{r7, lr}
   16d86:	b086      	sub	sp, #24
   16d88:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
   16d8a:	2005      	movs	r0, #5
   16d8c:	2101      	movs	r1, #1
   16d8e:	f7ea f817 	bl	dc0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   16d92:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   16d96:	2101      	movs	r1, #1
   16d98:	f7ea f83a 	bl	e10 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   16d9c:	2308      	movs	r3, #8
   16d9e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   16da0:	2304      	movs	r3, #4
   16da2:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   16da4:	1d3b      	adds	r3, r7, #4
   16da6:	f44f 6000 	mov.w	r0, #2048	; 0x800
   16daa:	f2c4 0001 	movt	r0, #16385	; 0x4001
   16dae:	4619      	mov	r1, r3
   16db0:	f7ea f9da 	bl	1168 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   16db4:	2304      	movs	r3, #4
   16db6:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   16db8:	2303      	movs	r3, #3
   16dba:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   16dbc:	2318      	movs	r3, #24
   16dbe:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   16dc0:	1d3b      	adds	r3, r7, #4
   16dc2:	f44f 6000 	mov.w	r0, #2048	; 0x800
   16dc6:	f2c4 0001 	movt	r0, #16385	; 0x4001
   16dca:	4619      	mov	r1, r3
   16dcc:	f7ea f9cc 	bl	1168 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
   16dd0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   16dd4:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   16dd6:	2300      	movs	r3, #0
   16dd8:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
   16dda:	2300      	movs	r3, #0
   16ddc:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
   16dde:	2300      	movs	r3, #0
   16de0:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   16de2:	2300      	movs	r3, #0
   16de4:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   16de6:	230c      	movs	r3, #12
   16de8:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
   16dea:	f107 0308 	add.w	r3, r7, #8
   16dee:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16df2:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16df6:	4619      	mov	r1, r3
   16df8:	f7ea fc9e 	bl	1738 <USART_Init>
    USART_Cmd(USART2, ENABLE);
   16dfc:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16e00:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16e04:	2101      	movs	r1, #1
   16e06:	f7ea fdb5 	bl	1974 <USART_Cmd>
}
   16e0a:	3718      	adds	r7, #24
   16e0c:	46bd      	mov	sp, r7
   16e0e:	bd80      	pop	{r7, pc}

00016e10 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
   16e10:	b580      	push	{r7, lr}
   16e12:	b082      	sub	sp, #8
   16e14:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
   16e16:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16e1a:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16e1e:	f240 7127 	movw	r1, #1831	; 0x727
   16e22:	2200      	movs	r2, #0
   16e24:	f7ea fdc6 	bl	19b4 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   16e28:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16e2c:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16e30:	f240 5125 	movw	r1, #1317	; 0x525
   16e34:	2201      	movs	r2, #1
   16e36:	f7ea fdbd 	bl	19b4 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   16e3a:	2326      	movs	r3, #38	; 0x26
   16e3c:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   16e3e:	2300      	movs	r3, #0
   16e40:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   16e42:	2301      	movs	r3, #1
   16e44:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   16e46:	1d3b      	adds	r3, r7, #4
   16e48:	4618      	mov	r0, r3
   16e4a:	f7eb fa01 	bl	2250 <NVIC_Init>
}
   16e4e:	3708      	adds	r7, #8
   16e50:	46bd      	mov	sp, r7
   16e52:	bd80      	pop	{r7, pc}

00016e54 <enable_rs232>:

void enable_rs232(void)
{
   16e54:	b580      	push	{r7, lr}
   16e56:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
   16e58:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16e5c:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16e60:	2101      	movs	r1, #1
   16e62:	f7ea fd87 	bl	1974 <USART_Cmd>
}
   16e66:	bd80      	pop	{r7, pc}

00016e68 <send_byte>:

void send_byte(uint8_t b)
{
   16e68:	b580      	push	{r7, lr}
   16e6a:	b082      	sub	sp, #8
   16e6c:	af00      	add	r7, sp, #0
   16e6e:	4603      	mov	r3, r0
   16e70:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
   16e72:	bf00      	nop
   16e74:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16e78:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16e7c:	2180      	movs	r1, #128	; 0x80
   16e7e:	f7ea ffe5 	bl	1e4c <USART_GetFlagStatus>
   16e82:	4603      	mov	r3, r0
   16e84:	2b00      	cmp	r3, #0
   16e86:	d0f5      	beq.n	16e74 <send_byte+0xc>
    
    GPIOC->ODR ^= 0x00001000;
   16e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   16e8c:	f2c4 0301 	movt	r3, #16385	; 0x4001
   16e90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   16e94:	f2c4 0201 	movt	r2, #16385	; 0x4001
   16e98:	68d2      	ldr	r2, [r2, #12]
   16e9a:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
   16e9e:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
   16ea0:	79fb      	ldrb	r3, [r7, #7]
   16ea2:	b29b      	uxth	r3, r3
   16ea4:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16ea8:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16eac:	4619      	mov	r1, r3
   16eae:	f7ea fe81 	bl	1bb4 <USART_SendData>
}
   16eb2:	3708      	adds	r7, #8
   16eb4:	46bd      	mov	sp, r7
   16eb6:	bd80      	pop	{r7, pc}

00016eb8 <send_num>:
/**
 *  can print a num which is smaller than 10
 */

void send_num(uint8_t b)
{
   16eb8:	b580      	push	{r7, lr}
   16eba:	b082      	sub	sp, #8
   16ebc:	af00      	add	r7, sp, #0
   16ebe:	4603      	mov	r3, r0
   16ec0:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
   16ec2:	79fb      	ldrb	r3, [r7, #7]
   16ec4:	3330      	adds	r3, #48	; 0x30
   16ec6:	b2db      	uxtb	r3, r3
   16ec8:	4618      	mov	r0, r3
   16eca:	f7ff ffcd 	bl	16e68 <send_byte>
}
   16ece:	3708      	adds	r7, #8
   16ed0:	46bd      	mov	sp, r7
   16ed2:	bd80      	pop	{r7, pc}

00016ed4 <vPrintString>:
 * print a string
 *
 * */

void vPrintString( const char * string)
{
   16ed4:	b580      	push	{r7, lr}
   16ed6:	b084      	sub	sp, #16
   16ed8:	af00      	add	r7, sp, #0
   16eda:	6078      	str	r0, [r7, #4]
    int i = 0;
   16edc:	2300      	movs	r3, #0
   16ede:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
   16ee0:	e009      	b.n	16ef6 <vPrintString+0x22>
    {
        send_byte(string[i]);
   16ee2:	68fb      	ldr	r3, [r7, #12]
   16ee4:	687a      	ldr	r2, [r7, #4]
   16ee6:	4413      	add	r3, r2
   16ee8:	781b      	ldrb	r3, [r3, #0]
   16eea:	4618      	mov	r0, r3
   16eec:	f7ff ffbc 	bl	16e68 <send_byte>
        i++;
   16ef0:	68fb      	ldr	r3, [r7, #12]
   16ef2:	3301      	adds	r3, #1
   16ef4:	60fb      	str	r3, [r7, #12]
 * */

void vPrintString( const char * string)
{
    int i = 0;
    while(string[i] != '\0')
   16ef6:	68fb      	ldr	r3, [r7, #12]
   16ef8:	687a      	ldr	r2, [r7, #4]
   16efa:	4413      	add	r3, r2
   16efc:	781b      	ldrb	r3, [r3, #0]
   16efe:	2b00      	cmp	r3, #0
   16f00:	d1ef      	bne.n	16ee2 <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
   16f02:	3710      	adds	r7, #16
   16f04:	46bd      	mov	sp, r7
   16f06:	bd80      	pop	{r7, pc}

00016f08 <vPrintNumber>:
/*
 * print a number which is less than 10
 *
 * */
void vPrintNumber( const long c_num)
{
   16f08:	b580      	push	{r7, lr}
   16f0a:	b08a      	sub	sp, #40	; 0x28
   16f0c:	af00      	add	r7, sp, #0
   16f0e:	6078      	str	r0, [r7, #4]
    char time[15], tmp;
    unsigned int i, count = 0;
   16f10:	2300      	movs	r3, #0
   16f12:	623b      	str	r3, [r7, #32]
    long num = c_num;
   16f14:	687b      	ldr	r3, [r7, #4]
   16f16:	61fb      	str	r3, [r7, #28]

    if(num == 0)
   16f18:	69fb      	ldr	r3, [r7, #28]
   16f1a:	2b00      	cmp	r3, #0
   16f1c:	d106      	bne.n	16f2c <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
   16f1e:	f648 1044 	movw	r0, #35140	; 0x8944
   16f22:	f2c0 0001 	movt	r0, #1
   16f26:	f7ff ffd5 	bl	16ed4 <vPrintString>
   16f2a:	e062      	b.n	16ff2 <vPrintNumber+0xea>
    }
    else
    {
        // transform long into char * 
        while( num  )
   16f2c:	e024      	b.n	16f78 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
   16f2e:	69f9      	ldr	r1, [r7, #28]
   16f30:	f246 6367 	movw	r3, #26215	; 0x6667
   16f34:	f2c6 6366 	movt	r3, #26214	; 0x6666
   16f38:	fb83 2301 	smull	r2, r3, r3, r1
   16f3c:	109a      	asrs	r2, r3, #2
   16f3e:	17cb      	asrs	r3, r1, #31
   16f40:	1ad2      	subs	r2, r2, r3
   16f42:	4613      	mov	r3, r2
   16f44:	009b      	lsls	r3, r3, #2
   16f46:	4413      	add	r3, r2
   16f48:	005b      	lsls	r3, r3, #1
   16f4a:	1aca      	subs	r2, r1, r3
   16f4c:	b2d3      	uxtb	r3, r2
   16f4e:	3330      	adds	r3, #48	; 0x30
   16f50:	b2da      	uxtb	r2, r3
   16f52:	f107 010c 	add.w	r1, r7, #12
   16f56:	6a3b      	ldr	r3, [r7, #32]
   16f58:	440b      	add	r3, r1
   16f5a:	701a      	strb	r2, [r3, #0]
            count ++;
   16f5c:	6a3b      	ldr	r3, [r7, #32]
   16f5e:	3301      	adds	r3, #1
   16f60:	623b      	str	r3, [r7, #32]
            num /= 10;
   16f62:	69fa      	ldr	r2, [r7, #28]
   16f64:	f246 6367 	movw	r3, #26215	; 0x6667
   16f68:	f2c6 6366 	movt	r3, #26214	; 0x6666
   16f6c:	fb83 1302 	smull	r1, r3, r3, r2
   16f70:	1099      	asrs	r1, r3, #2
   16f72:	17d3      	asrs	r3, r2, #31
   16f74:	1acb      	subs	r3, r1, r3
   16f76:	61fb      	str	r3, [r7, #28]
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num  )
   16f78:	69fb      	ldr	r3, [r7, #28]
   16f7a:	2b00      	cmp	r3, #0
   16f7c:	d1d7      	bne.n	16f2e <vPrintNumber+0x26>
            time[count] = num%10 +'0';
            count ++;
            num /= 10;

        }
        time[count] = '\0';
   16f7e:	f107 020c 	add.w	r2, r7, #12
   16f82:	6a3b      	ldr	r3, [r7, #32]
   16f84:	4413      	add	r3, r2
   16f86:	2200      	movs	r2, #0
   16f88:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i )
   16f8a:	2300      	movs	r3, #0
   16f8c:	627b      	str	r3, [r7, #36]	; 0x24
   16f8e:	e020      	b.n	16fd2 <vPrintNumber+0xca>
        {
            tmp = time[i];
   16f90:	f107 020c 	add.w	r2, r7, #12
   16f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16f96:	4413      	add	r3, r2
   16f98:	781b      	ldrb	r3, [r3, #0]
   16f9a:	76fb      	strb	r3, [r7, #27]
            time[i] = time[count-1-i];
   16f9c:	6a3a      	ldr	r2, [r7, #32]
   16f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16fa0:	1ad3      	subs	r3, r2, r3
   16fa2:	3b01      	subs	r3, #1
   16fa4:	f107 0228 	add.w	r2, r7, #40	; 0x28
   16fa8:	4413      	add	r3, r2
   16faa:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
   16fae:	f107 010c 	add.w	r1, r7, #12
   16fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16fb4:	440b      	add	r3, r1
   16fb6:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
   16fb8:	6a3a      	ldr	r2, [r7, #32]
   16fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16fbc:	1ad3      	subs	r3, r2, r3
   16fbe:	3b01      	subs	r3, #1
   16fc0:	f107 0128 	add.w	r1, r7, #40	; 0x28
   16fc4:	440b      	add	r3, r1
   16fc6:	7efa      	ldrb	r2, [r7, #27]
   16fc8:	f803 2c1c 	strb.w	r2, [r3, #-28]

        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i )
   16fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16fce:	3301      	adds	r3, #1
   16fd0:	627b      	str	r3, [r7, #36]	; 0x24
   16fd2:	6a3b      	ldr	r3, [r7, #32]
   16fd4:	085a      	lsrs	r2, r3, #1
   16fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16fd8:	429a      	cmp	r2, r3
   16fda:	d8d9      	bhi.n	16f90 <vPrintNumber+0x88>
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;

        }
        vPrintString(time);
   16fdc:	f107 030c 	add.w	r3, r7, #12
   16fe0:	4618      	mov	r0, r3
   16fe2:	f7ff ff77 	bl	16ed4 <vPrintString>
        vPrintString("\n\r");
   16fe6:	f648 1048 	movw	r0, #35144	; 0x8948
   16fea:	f2c0 0001 	movt	r0, #1
   16fee:	f7ff ff71 	bl	16ed4 <vPrintString>
    }
}
   16ff2:	3728      	adds	r7, #40	; 0x28
   16ff4:	46bd      	mov	sp, r7
   16ff6:	bd80      	pop	{r7, pc}

00016ff8 <main>:
    pvServantFunType xFp;  // the implementation of current Servant
}; */

#define SERVANT_STACK_SIZE 128 
int main(void)
{
   16ff8:	b580      	push	{r7, lr}
   16ffa:	b084      	sub	sp, #16
   16ffc:	af04      	add	r7, sp, #16
    init_led();
   16ffe:	f7ff fe5f 	bl	16cc0 <init_led>
    init_rs232();
   17002:	f7ff febf 	bl	16d84 <init_rs232>
    enable_rs232_interrupts();
   17006:	f7ff ff03 	bl	16e10 <enable_rs232_interrupts>
    enable_rs232();
   1700a:	f7ff ff23 	bl	16e54 <enable_rs232>

    //vTaskCompleteInitialise();
    vSemaphoreInitialise();
   1700e:	f7eb fee5 	bl	2ddc <vSemaphoreInitialise>
    vParameterInitialise();
   17012:	f7eb ff23 	bl	2e5c <vParameterInitialise>

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, (void *)&pvParameters[NUMBEROFSERVANT-1],tskIDLE_PRIORITY + 1, &xTaskOfHandle[NUMBEROFSERVANT-1]);
   17016:	2301      	movs	r3, #1
   17018:	9300      	str	r3, [sp, #0]
   1701a:	4bc4      	ldr	r3, [pc, #784]	; (1732c <main+0x334>)
   1701c:	9301      	str	r3, [sp, #4]
   1701e:	2300      	movs	r3, #0
   17020:	9302      	str	r3, [sp, #8]
   17022:	2300      	movs	r3, #0
   17024:	9303      	str	r3, [sp, #12]
   17026:	f243 60e1 	movw	r0, #14049	; 0x36e1
   1702a:	f2c0 0000 	movt	r0, #0
   1702e:	f648 114c 	movw	r1, #35148	; 0x894c
   17032:	f2c0 0101 	movt	r1, #1
   17036:	2280      	movs	r2, #128	; 0x80
   17038:	4bbd      	ldr	r3, [pc, #756]	; (17330 <main+0x338>)
   1703a:	f7ed fa23 	bl	4484 <xTaskGenericCreate>

    // task 1, 100ms,
    xTaskCreate( vSensor, "Sensor 0", SERVANT_STACK_SIZE, (void *)&pvParameters[0], tskIDLE_PRIORITY + 15, &xTaskOfHandle[0]);
   1703e:	230f      	movs	r3, #15
   17040:	9300      	str	r3, [sp, #0]
   17042:	f240 73f0 	movw	r3, #2032	; 0x7f0
   17046:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1704a:	9301      	str	r3, [sp, #4]
   1704c:	2300      	movs	r3, #0
   1704e:	9302      	str	r3, [sp, #8]
   17050:	2300      	movs	r3, #0
   17052:	9303      	str	r3, [sp, #12]
   17054:	f243 20f5 	movw	r0, #13045	; 0x32f5
   17058:	f2c0 0000 	movt	r0, #0
   1705c:	f648 1158 	movw	r1, #35160	; 0x8958
   17060:	f2c0 0101 	movt	r1, #1
   17064:	2280      	movs	r2, #128	; 0x80
   17066:	f240 33d0 	movw	r3, #976	; 0x3d0
   1706a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1706e:	f7ed fa09 	bl	4484 <xTaskGenericCreate>
    xTaskCreate( vServant, "Servant 1", SERVANT_STACK_SIZE, (void *)&pvParameters[1], tskIDLE_PRIORITY + 15, &xTaskOfHandle[1]);
   17072:	230f      	movs	r3, #15
   17074:	9300      	str	r3, [sp, #0]
   17076:	4baf      	ldr	r3, [pc, #700]	; (17334 <main+0x33c>)
   17078:	9301      	str	r3, [sp, #4]
   1707a:	2300      	movs	r3, #0
   1707c:	9302      	str	r3, [sp, #8]
   1707e:	2300      	movs	r3, #0
   17080:	9303      	str	r3, [sp, #12]
   17082:	f243 5005 	movw	r0, #13573	; 0x3505
   17086:	f2c0 0000 	movt	r0, #0
   1708a:	f648 1164 	movw	r1, #35172	; 0x8964
   1708e:	f2c0 0101 	movt	r1, #1
   17092:	2280      	movs	r2, #128	; 0x80
   17094:	4ba8      	ldr	r3, [pc, #672]	; (17338 <main+0x340>)
   17096:	f7ed f9f5 	bl	4484 <xTaskGenericCreate>

    // task 2 100ms,
    xTaskCreate( vSensor, "Sensor 2", SERVANT_STACK_SIZE, (void *)&pvParameters[2], tskIDLE_PRIORITY + 14, &xTaskOfHandle[2]);
   1709a:	230e      	movs	r3, #14
   1709c:	9300      	str	r3, [sp, #0]
   1709e:	4ba7      	ldr	r3, [pc, #668]	; (1733c <main+0x344>)
   170a0:	9301      	str	r3, [sp, #4]
   170a2:	2300      	movs	r3, #0
   170a4:	9302      	str	r3, [sp, #8]
   170a6:	2300      	movs	r3, #0
   170a8:	9303      	str	r3, [sp, #12]
   170aa:	f243 20f5 	movw	r0, #13045	; 0x32f5
   170ae:	f2c0 0000 	movt	r0, #0
   170b2:	f648 1170 	movw	r1, #35184	; 0x8970
   170b6:	f2c0 0101 	movt	r1, #1
   170ba:	2280      	movs	r2, #128	; 0x80
   170bc:	4ba0      	ldr	r3, [pc, #640]	; (17340 <main+0x348>)
   170be:	f7ed f9e1 	bl	4484 <xTaskGenericCreate>
    xTaskCreate( vServant, "Servant 3", SERVANT_STACK_SIZE, (void *)&pvParameters[3], tskIDLE_PRIORITY + 14,&xTaskOfHandle[3]);
   170c2:	230e      	movs	r3, #14
   170c4:	9300      	str	r3, [sp, #0]
   170c6:	4b9f      	ldr	r3, [pc, #636]	; (17344 <main+0x34c>)
   170c8:	9301      	str	r3, [sp, #4]
   170ca:	2300      	movs	r3, #0
   170cc:	9302      	str	r3, [sp, #8]
   170ce:	2300      	movs	r3, #0
   170d0:	9303      	str	r3, [sp, #12]
   170d2:	f243 5005 	movw	r0, #13573	; 0x3505
   170d6:	f2c0 0000 	movt	r0, #0
   170da:	f648 117c 	movw	r1, #35196	; 0x897c
   170de:	f2c0 0101 	movt	r1, #1
   170e2:	2280      	movs	r2, #128	; 0x80
   170e4:	4b98      	ldr	r3, [pc, #608]	; (17348 <main+0x350>)
   170e6:	f7ed f9cd 	bl	4484 <xTaskGenericCreate>

    // task 6 100ms,
    xTaskCreate( vSensor, "Sensor 7", SERVANT_STACK_SIZE, (void *)&pvParameters[7], tskIDLE_PRIORITY + 13, &xTaskOfHandle[7]);
   170ea:	230d      	movs	r3, #13
   170ec:	9300      	str	r3, [sp, #0]
   170ee:	4b97      	ldr	r3, [pc, #604]	; (1734c <main+0x354>)
   170f0:	9301      	str	r3, [sp, #4]
   170f2:	2300      	movs	r3, #0
   170f4:	9302      	str	r3, [sp, #8]
   170f6:	2300      	movs	r3, #0
   170f8:	9303      	str	r3, [sp, #12]
   170fa:	f243 20f5 	movw	r0, #13045	; 0x32f5
   170fe:	f2c0 0000 	movt	r0, #0
   17102:	f648 1188 	movw	r1, #35208	; 0x8988
   17106:	f2c0 0101 	movt	r1, #1
   1710a:	2280      	movs	r2, #128	; 0x80
   1710c:	4b90      	ldr	r3, [pc, #576]	; (17350 <main+0x358>)
   1710e:	f7ed f9b9 	bl	4484 <xTaskGenericCreate>
    xTaskCreate( vServant, "Servant 8", SERVANT_STACK_SIZE, (void *)&pvParameters[8], tskIDLE_PRIORITY + 13,&xTaskOfHandle[8]);
   17112:	230d      	movs	r3, #13
   17114:	9300      	str	r3, [sp, #0]
   17116:	4b8f      	ldr	r3, [pc, #572]	; (17354 <main+0x35c>)
   17118:	9301      	str	r3, [sp, #4]
   1711a:	2300      	movs	r3, #0
   1711c:	9302      	str	r3, [sp, #8]
   1711e:	2300      	movs	r3, #0
   17120:	9303      	str	r3, [sp, #12]
   17122:	f243 5005 	movw	r0, #13573	; 0x3505
   17126:	f2c0 0000 	movt	r0, #0
   1712a:	f648 1194 	movw	r1, #35220	; 0x8994
   1712e:	f2c0 0101 	movt	r1, #1
   17132:	2280      	movs	r2, #128	; 0x80
   17134:	4b88      	ldr	r3, [pc, #544]	; (17358 <main+0x360>)
   17136:	f7ed f9a5 	bl	4484 <xTaskGenericCreate>

    // task 3, 200ms, 
    xTaskCreate( vSensor, "Sensor 4", SERVANT_STACK_SIZE, (void *)&pvParameters[4], tskIDLE_PRIORITY + 12, &xTaskOfHandle[4]); 
   1713a:	230c      	movs	r3, #12
   1713c:	9300      	str	r3, [sp, #0]
   1713e:	4b87      	ldr	r3, [pc, #540]	; (1735c <main+0x364>)
   17140:	9301      	str	r3, [sp, #4]
   17142:	2300      	movs	r3, #0
   17144:	9302      	str	r3, [sp, #8]
   17146:	2300      	movs	r3, #0
   17148:	9303      	str	r3, [sp, #12]
   1714a:	f243 20f5 	movw	r0, #13045	; 0x32f5
   1714e:	f2c0 0000 	movt	r0, #0
   17152:	f648 11a0 	movw	r1, #35232	; 0x89a0
   17156:	f2c0 0101 	movt	r1, #1
   1715a:	2280      	movs	r2, #128	; 0x80
   1715c:	4b80      	ldr	r3, [pc, #512]	; (17360 <main+0x368>)
   1715e:	f7ed f991 	bl	4484 <xTaskGenericCreate>

    // task 4, 200ms
    xTaskCreate( vSensor, "Sensor 5", SERVANT_STACK_SIZE, (void *)&pvParameters[5], tskIDLE_PRIORITY + 11, &xTaskOfHandle[5]); 
   17162:	230b      	movs	r3, #11
   17164:	9300      	str	r3, [sp, #0]
   17166:	4b7f      	ldr	r3, [pc, #508]	; (17364 <main+0x36c>)
   17168:	9301      	str	r3, [sp, #4]
   1716a:	2300      	movs	r3, #0
   1716c:	9302      	str	r3, [sp, #8]
   1716e:	2300      	movs	r3, #0
   17170:	9303      	str	r3, [sp, #12]
   17172:	f243 20f5 	movw	r0, #13045	; 0x32f5
   17176:	f2c0 0000 	movt	r0, #0
   1717a:	f648 11ac 	movw	r1, #35244	; 0x89ac
   1717e:	f2c0 0101 	movt	r1, #1
   17182:	2280      	movs	r2, #128	; 0x80
   17184:	4b78      	ldr	r3, [pc, #480]	; (17368 <main+0x370>)
   17186:	f7ed f97d 	bl	4484 <xTaskGenericCreate>

    // task 5, 200ms
    xTaskCreate( vSensor, "Sensor 6", SERVANT_STACK_SIZE, (void *)&pvParameters[6], tskIDLE_PRIORITY + 10, &xTaskOfHandle[6]); 
   1718a:	230a      	movs	r3, #10
   1718c:	9300      	str	r3, [sp, #0]
   1718e:	4b77      	ldr	r3, [pc, #476]	; (1736c <main+0x374>)
   17190:	9301      	str	r3, [sp, #4]
   17192:	2300      	movs	r3, #0
   17194:	9302      	str	r3, [sp, #8]
   17196:	2300      	movs	r3, #0
   17198:	9303      	str	r3, [sp, #12]
   1719a:	f243 20f5 	movw	r0, #13045	; 0x32f5
   1719e:	f2c0 0000 	movt	r0, #0
   171a2:	f648 11b8 	movw	r1, #35256	; 0x89b8
   171a6:	f2c0 0101 	movt	r1, #1
   171aa:	2280      	movs	r2, #128	; 0x80
   171ac:	4b70      	ldr	r3, [pc, #448]	; (17370 <main+0x378>)
   171ae:	f7ed f969 	bl	4484 <xTaskGenericCreate>

    // task 7, 200ms
    xTaskCreate( vSensor, "Sensor 9", SERVANT_STACK_SIZE, (void *)&pvParameters[9], tskIDLE_PRIORITY + 9, &xTaskOfHandle[9]); 
   171b2:	2309      	movs	r3, #9
   171b4:	9300      	str	r3, [sp, #0]
   171b6:	4b6f      	ldr	r3, [pc, #444]	; (17374 <main+0x37c>)
   171b8:	9301      	str	r3, [sp, #4]
   171ba:	2300      	movs	r3, #0
   171bc:	9302      	str	r3, [sp, #8]
   171be:	2300      	movs	r3, #0
   171c0:	9303      	str	r3, [sp, #12]
   171c2:	f243 20f5 	movw	r0, #13045	; 0x32f5
   171c6:	f2c0 0000 	movt	r0, #0
   171ca:	f648 11c4 	movw	r1, #35268	; 0x89c4
   171ce:	f2c0 0101 	movt	r1, #1
   171d2:	2280      	movs	r2, #128	; 0x80
   171d4:	4b68      	ldr	r3, [pc, #416]	; (17378 <main+0x380>)
   171d6:	f7ed f955 	bl	4484 <xTaskGenericCreate>
    xTaskCreate( vServant, "Servant 10", SERVANT_STACK_SIZE, (void *)&pvParameters[10], tskIDLE_PRIORITY + 9,&xTaskOfHandle[10]);
   171da:	2309      	movs	r3, #9
   171dc:	9300      	str	r3, [sp, #0]
   171de:	4b67      	ldr	r3, [pc, #412]	; (1737c <main+0x384>)
   171e0:	9301      	str	r3, [sp, #4]
   171e2:	2300      	movs	r3, #0
   171e4:	9302      	str	r3, [sp, #8]
   171e6:	2300      	movs	r3, #0
   171e8:	9303      	str	r3, [sp, #12]
   171ea:	f243 5005 	movw	r0, #13573	; 0x3505
   171ee:	f2c0 0000 	movt	r0, #0
   171f2:	f648 11d0 	movw	r1, #35280	; 0x89d0
   171f6:	f2c0 0101 	movt	r1, #1
   171fa:	2280      	movs	r2, #128	; 0x80
   171fc:	4b60      	ldr	r3, [pc, #384]	; (17380 <main+0x388>)
   171fe:	f7ed f941 	bl	4484 <xTaskGenericCreate>
    xTaskCreate( vServant, "Servant 11", SERVANT_STACK_SIZE, (void *)&pvParameters[11], tskIDLE_PRIORITY + 9,&xTaskOfHandle[11]);
   17202:	2309      	movs	r3, #9
   17204:	9300      	str	r3, [sp, #0]
   17206:	4b5f      	ldr	r3, [pc, #380]	; (17384 <main+0x38c>)
   17208:	9301      	str	r3, [sp, #4]
   1720a:	2300      	movs	r3, #0
   1720c:	9302      	str	r3, [sp, #8]
   1720e:	2300      	movs	r3, #0
   17210:	9303      	str	r3, [sp, #12]
   17212:	f243 5005 	movw	r0, #13573	; 0x3505
   17216:	f2c0 0000 	movt	r0, #0
   1721a:	f648 11dc 	movw	r1, #35292	; 0x89dc
   1721e:	f2c0 0101 	movt	r1, #1
   17222:	2280      	movs	r2, #128	; 0x80
   17224:	4b58      	ldr	r3, [pc, #352]	; (17388 <main+0x390>)
   17226:	f7ed f92d 	bl	4484 <xTaskGenericCreate>

    // task 8 200ms
    xTaskCreate( vSensor, "Sensor 12", SERVANT_STACK_SIZE, (void *)&pvParameters[12], tskIDLE_PRIORITY + 8, &xTaskOfHandle[12]); 
   1722a:	2308      	movs	r3, #8
   1722c:	9300      	str	r3, [sp, #0]
   1722e:	4b57      	ldr	r3, [pc, #348]	; (1738c <main+0x394>)
   17230:	9301      	str	r3, [sp, #4]
   17232:	2300      	movs	r3, #0
   17234:	9302      	str	r3, [sp, #8]
   17236:	2300      	movs	r3, #0
   17238:	9303      	str	r3, [sp, #12]
   1723a:	f243 20f5 	movw	r0, #13045	; 0x32f5
   1723e:	f2c0 0000 	movt	r0, #0
   17242:	f648 11e8 	movw	r1, #35304	; 0x89e8
   17246:	f2c0 0101 	movt	r1, #1
   1724a:	2280      	movs	r2, #128	; 0x80
   1724c:	4b50      	ldr	r3, [pc, #320]	; (17390 <main+0x398>)
   1724e:	f7ed f919 	bl	4484 <xTaskGenericCreate>

    // task 13 400ms
    xTaskCreate( vSensor, "Sensor 20", SERVANT_STACK_SIZE, (void *)&pvParameters[20], tskIDLE_PRIORITY + 7, &xTaskOfHandle[20]); 
   17252:	2307      	movs	r3, #7
   17254:	9300      	str	r3, [sp, #0]
   17256:	4b4f      	ldr	r3, [pc, #316]	; (17394 <main+0x39c>)
   17258:	9301      	str	r3, [sp, #4]
   1725a:	2300      	movs	r3, #0
   1725c:	9302      	str	r3, [sp, #8]
   1725e:	2300      	movs	r3, #0
   17260:	9303      	str	r3, [sp, #12]
   17262:	f243 20f5 	movw	r0, #13045	; 0x32f5
   17266:	f2c0 0000 	movt	r0, #0
   1726a:	f648 11f4 	movw	r1, #35316	; 0x89f4
   1726e:	f2c0 0101 	movt	r1, #1
   17272:	2280      	movs	r2, #128	; 0x80
   17274:	4b48      	ldr	r3, [pc, #288]	; (17398 <main+0x3a0>)
   17276:	f7ed f905 	bl	4484 <xTaskGenericCreate>

    // task 9 1000ms
    xTaskCreate( vSensor, "Sensor 13", SERVANT_STACK_SIZE, (void *)&pvParameters[13], tskIDLE_PRIORITY + 6, &xTaskOfHandle[13]); 
   1727a:	2306      	movs	r3, #6
   1727c:	9300      	str	r3, [sp, #0]
   1727e:	4b47      	ldr	r3, [pc, #284]	; (1739c <main+0x3a4>)
   17280:	9301      	str	r3, [sp, #4]
   17282:	2300      	movs	r3, #0
   17284:	9302      	str	r3, [sp, #8]
   17286:	2300      	movs	r3, #0
   17288:	9303      	str	r3, [sp, #12]
   1728a:	f243 20f5 	movw	r0, #13045	; 0x32f5
   1728e:	f2c0 0000 	movt	r0, #0
   17292:	f648 2100 	movw	r1, #35328	; 0x8a00
   17296:	f2c0 0101 	movt	r1, #1
   1729a:	2280      	movs	r2, #128	; 0x80
   1729c:	4b40      	ldr	r3, [pc, #256]	; (173a0 <main+0x3a8>)
   1729e:	f7ed f8f1 	bl	4484 <xTaskGenericCreate>
    xTaskCreate( vServant, "Servant 14", SERVANT_STACK_SIZE, (void *)&pvParameters[14], tskIDLE_PRIORITY + 6,&xTaskOfHandle[14]);
   172a2:	2306      	movs	r3, #6
   172a4:	9300      	str	r3, [sp, #0]
   172a6:	4b3f      	ldr	r3, [pc, #252]	; (173a4 <main+0x3ac>)
   172a8:	9301      	str	r3, [sp, #4]
   172aa:	2300      	movs	r3, #0
   172ac:	9302      	str	r3, [sp, #8]
   172ae:	2300      	movs	r3, #0
   172b0:	9303      	str	r3, [sp, #12]
   172b2:	f243 5005 	movw	r0, #13573	; 0x3505
   172b6:	f2c0 0000 	movt	r0, #0
   172ba:	f648 210c 	movw	r1, #35340	; 0x8a0c
   172be:	f2c0 0101 	movt	r1, #1
   172c2:	2280      	movs	r2, #128	; 0x80
   172c4:	4b38      	ldr	r3, [pc, #224]	; (173a8 <main+0x3b0>)
   172c6:	f7ed f8dd 	bl	4484 <xTaskGenericCreate>

    // task 10 1000ms
    xTaskCreate( vSensor, "Sensor 15", SERVANT_STACK_SIZE, (void *)&pvParameters[15], tskIDLE_PRIORITY + 5, &xTaskOfHandle[15]); 
   172ca:	2305      	movs	r3, #5
   172cc:	9300      	str	r3, [sp, #0]
   172ce:	4b37      	ldr	r3, [pc, #220]	; (173ac <main+0x3b4>)
   172d0:	9301      	str	r3, [sp, #4]
   172d2:	2300      	movs	r3, #0
   172d4:	9302      	str	r3, [sp, #8]
   172d6:	2300      	movs	r3, #0
   172d8:	9303      	str	r3, [sp, #12]
   172da:	f243 20f5 	movw	r0, #13045	; 0x32f5
   172de:	f2c0 0000 	movt	r0, #0
   172e2:	f648 2118 	movw	r1, #35352	; 0x8a18
   172e6:	f2c0 0101 	movt	r1, #1
   172ea:	2280      	movs	r2, #128	; 0x80
   172ec:	4b30      	ldr	r3, [pc, #192]	; (173b0 <main+0x3b8>)
   172ee:	f7ed f8c9 	bl	4484 <xTaskGenericCreate>
    xTaskCreate( vServant, "Servant 16", SERVANT_STACK_SIZE, (void *)&pvParameters[16], tskIDLE_PRIORITY + 5,&xTaskOfHandle[16]);
   172f2:	2305      	movs	r3, #5
   172f4:	9300      	str	r3, [sp, #0]
   172f6:	4b2f      	ldr	r3, [pc, #188]	; (173b4 <main+0x3bc>)
   172f8:	9301      	str	r3, [sp, #4]
   172fa:	2300      	movs	r3, #0
   172fc:	9302      	str	r3, [sp, #8]
   172fe:	2300      	movs	r3, #0
   17300:	9303      	str	r3, [sp, #12]
   17302:	f243 5005 	movw	r0, #13573	; 0x3505
   17306:	f2c0 0000 	movt	r0, #0
   1730a:	f648 2124 	movw	r1, #35364	; 0x8a24
   1730e:	f2c0 0101 	movt	r1, #1
   17312:	2280      	movs	r2, #128	; 0x80
   17314:	4b28      	ldr	r3, [pc, #160]	; (173b8 <main+0x3c0>)
   17316:	f7ed f8b5 	bl	4484 <xTaskGenericCreate>
    xTaskCreate( vServant, "Servant 17", SERVANT_STACK_SIZE, (void *)&pvParameters[17], tskIDLE_PRIORITY + 5,&xTaskOfHandle[17]);
   1731a:	2305      	movs	r3, #5
   1731c:	9300      	str	r3, [sp, #0]
   1731e:	4b27      	ldr	r3, [pc, #156]	; (173bc <main+0x3c4>)
   17320:	9301      	str	r3, [sp, #4]
   17322:	2300      	movs	r3, #0
   17324:	9302      	str	r3, [sp, #8]
   17326:	2300      	movs	r3, #0
   17328:	9303      	str	r3, [sp, #12]
   1732a:	e049      	b.n	173c0 <main+0x3c8>
   1732c:	20000844 	.word	0x20000844
   17330:	2000076c 	.word	0x2000076c
   17334:	200007f4 	.word	0x200007f4
   17338:	200003fc 	.word	0x200003fc
   1733c:	200007f8 	.word	0x200007f8
   17340:	20000428 	.word	0x20000428
   17344:	200007fc 	.word	0x200007fc
   17348:	20000454 	.word	0x20000454
   1734c:	2000080c 	.word	0x2000080c
   17350:	20000504 	.word	0x20000504
   17354:	20000810 	.word	0x20000810
   17358:	20000530 	.word	0x20000530
   1735c:	20000800 	.word	0x20000800
   17360:	20000480 	.word	0x20000480
   17364:	20000804 	.word	0x20000804
   17368:	200004ac 	.word	0x200004ac
   1736c:	20000808 	.word	0x20000808
   17370:	200004d8 	.word	0x200004d8
   17374:	20000814 	.word	0x20000814
   17378:	2000055c 	.word	0x2000055c
   1737c:	20000818 	.word	0x20000818
   17380:	20000588 	.word	0x20000588
   17384:	2000081c 	.word	0x2000081c
   17388:	200005b4 	.word	0x200005b4
   1738c:	20000820 	.word	0x20000820
   17390:	200005e0 	.word	0x200005e0
   17394:	20000840 	.word	0x20000840
   17398:	20000740 	.word	0x20000740
   1739c:	20000824 	.word	0x20000824
   173a0:	2000060c 	.word	0x2000060c
   173a4:	20000828 	.word	0x20000828
   173a8:	20000638 	.word	0x20000638
   173ac:	2000082c 	.word	0x2000082c
   173b0:	20000664 	.word	0x20000664
   173b4:	20000830 	.word	0x20000830
   173b8:	20000690 	.word	0x20000690
   173bc:	20000834 	.word	0x20000834
   173c0:	f243 5005 	movw	r0, #13573	; 0x3505
   173c4:	f2c0 0000 	movt	r0, #0
   173c8:	f648 2130 	movw	r1, #35376	; 0x8a30
   173cc:	f2c0 0101 	movt	r1, #1
   173d0:	2280      	movs	r2, #128	; 0x80
   173d2:	4b18      	ldr	r3, [pc, #96]	; (17434 <main+0x43c>)
   173d4:	f7ed f856 	bl	4484 <xTaskGenericCreate>

    // task 11 1000ms
    xTaskCreate( vSensor, "Sensor 18", SERVANT_STACK_SIZE, (void *)&pvParameters[18], tskIDLE_PRIORITY + 4, &xTaskOfHandle[18]); 
   173d8:	2304      	movs	r3, #4
   173da:	9300      	str	r3, [sp, #0]
   173dc:	4b16      	ldr	r3, [pc, #88]	; (17438 <main+0x440>)
   173de:	9301      	str	r3, [sp, #4]
   173e0:	2300      	movs	r3, #0
   173e2:	9302      	str	r3, [sp, #8]
   173e4:	2300      	movs	r3, #0
   173e6:	9303      	str	r3, [sp, #12]
   173e8:	f243 20f5 	movw	r0, #13045	; 0x32f5
   173ec:	f2c0 0000 	movt	r0, #0
   173f0:	f648 213c 	movw	r1, #35388	; 0x8a3c
   173f4:	f2c0 0101 	movt	r1, #1
   173f8:	2280      	movs	r2, #128	; 0x80
   173fa:	4b10      	ldr	r3, [pc, #64]	; (1743c <main+0x444>)
   173fc:	f7ed f842 	bl	4484 <xTaskGenericCreate>

    // task 12 1000ms
    xTaskCreate( vSensor, "Sensor 19", SERVANT_STACK_SIZE, (void *)&pvParameters[19], tskIDLE_PRIORITY + 3, &xTaskOfHandle[19]); 
   17400:	2303      	movs	r3, #3
   17402:	9300      	str	r3, [sp, #0]
   17404:	4b0e      	ldr	r3, [pc, #56]	; (17440 <main+0x448>)
   17406:	9301      	str	r3, [sp, #4]
   17408:	2300      	movs	r3, #0
   1740a:	9302      	str	r3, [sp, #8]
   1740c:	2300      	movs	r3, #0
   1740e:	9303      	str	r3, [sp, #12]
   17410:	f243 20f5 	movw	r0, #13045	; 0x32f5
   17414:	f2c0 0000 	movt	r0, #0
   17418:	f648 2148 	movw	r1, #35400	; 0x8a48
   1741c:	f2c0 0101 	movt	r1, #1
   17420:	2280      	movs	r2, #128	; 0x80
   17422:	4b08      	ldr	r3, [pc, #32]	; (17444 <main+0x44c>)
   17424:	f7ed f82e 	bl	4484 <xTaskGenericCreate>


    /* Start running the task. */
    vTaskStartScheduler();
   17428:	f7ed fbaa 	bl	4b80 <vTaskStartScheduler>

    return 0;
   1742c:	2300      	movs	r3, #0
}
   1742e:	4618      	mov	r0, r3
   17430:	46bd      	mov	sp, r7
   17432:	bd80      	pop	{r7, pc}
   17434:	200006bc 	.word	0x200006bc
   17438:	20000838 	.word	0x20000838
   1743c:	200006e8 	.word	0x200006e8
   17440:	2000083c 	.word	0x2000083c
   17444:	20000714 	.word	0x20000714

00017448 <myTraceCreate>:

void myTraceCreate      (){
   17448:	b480      	push	{r7}
   1744a:	af00      	add	r7, sp, #0
}
   1744c:	46bd      	mov	sp, r7
   1744e:	f85d 7b04 	ldr.w	r7, [sp], #4
   17452:	4770      	bx	lr

00017454 <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
   17454:	b480      	push	{r7}
   17456:	af00      	add	r7, sp, #0
}
   17458:	46bd      	mov	sp, r7
   1745a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1745e:	4770      	bx	lr

00017460 <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
   17460:	b480      	push	{r7}
   17462:	af00      	add	r7, sp, #0
}
   17464:	46bd      	mov	sp, r7
   17466:	f85d 7b04 	ldr.w	r7, [sp], #4
   1746a:	4770      	bx	lr

0001746c <vApplicationTickHook>:
 *
 * if there is any task need to be triggered at this time,
 * tick hook function would send semaphore to them.
 * */
void vApplicationTickHook( void )
{
   1746c:	b580      	push	{r7, lr}
   1746e:	b082      	sub	sp, #8
   17470:	af00      	add	r7, sp, #0
    portTickType xCurrentTime = xTaskGetTickCount();
   17472:	f7ed fc6f 	bl	4d54 <xTaskGetTickCount>
   17476:	6078      	str	r0, [r7, #4]
    if( IS_INIT == 1 && xCurrentTime == 100 )
   17478:	f240 331c 	movw	r3, #796	; 0x31c
   1747c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17480:	681b      	ldr	r3, [r3, #0]
   17482:	2b01      	cmp	r3, #1
   17484:	f040 8099 	bne.w	175ba <vApplicationTickHook+0x14e>
   17488:	687b      	ldr	r3, [r7, #4]
   1748a:	2b64      	cmp	r3, #100	; 0x64
   1748c:	f040 8095 	bne.w	175ba <vApplicationTickHook+0x14e>
    {
        xSemaphoreGive( xBinarySemaphore[0] );
   17490:	f240 7398 	movw	r3, #1944	; 0x798
   17494:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17498:	681b      	ldr	r3, [r3, #0]
   1749a:	4618      	mov	r0, r3
   1749c:	2100      	movs	r1, #0
   1749e:	2200      	movs	r2, #0
   174a0:	2300      	movs	r3, #0
   174a2:	f7ec fcdd 	bl	3e60 <xQueueGenericSend>
        xSemaphoreGive( xBinarySemaphore[2] );
   174a6:	f240 7398 	movw	r3, #1944	; 0x798
   174aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   174ae:	689b      	ldr	r3, [r3, #8]
   174b0:	4618      	mov	r0, r3
   174b2:	2100      	movs	r1, #0
   174b4:	2200      	movs	r2, #0
   174b6:	2300      	movs	r3, #0
   174b8:	f7ec fcd2 	bl	3e60 <xQueueGenericSend>
        xSemaphoreGive( xBinarySemaphore[7] );
   174bc:	f240 7398 	movw	r3, #1944	; 0x798
   174c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   174c4:	69db      	ldr	r3, [r3, #28]
   174c6:	4618      	mov	r0, r3
   174c8:	2100      	movs	r1, #0
   174ca:	2200      	movs	r2, #0
   174cc:	2300      	movs	r3, #0
   174ce:	f7ec fcc7 	bl	3e60 <xQueueGenericSend>
        xSemaphoreGive( xBinarySemaphore[4] );
   174d2:	f240 7398 	movw	r3, #1944	; 0x798
   174d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   174da:	691b      	ldr	r3, [r3, #16]
   174dc:	4618      	mov	r0, r3
   174de:	2100      	movs	r1, #0
   174e0:	2200      	movs	r2, #0
   174e2:	2300      	movs	r3, #0
   174e4:	f7ec fcbc 	bl	3e60 <xQueueGenericSend>
        xSemaphoreGive( xBinarySemaphore[5] );
   174e8:	f240 7398 	movw	r3, #1944	; 0x798
   174ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   174f0:	695b      	ldr	r3, [r3, #20]
   174f2:	4618      	mov	r0, r3
   174f4:	2100      	movs	r1, #0
   174f6:	2200      	movs	r2, #0
   174f8:	2300      	movs	r3, #0
   174fa:	f7ec fcb1 	bl	3e60 <xQueueGenericSend>
        xSemaphoreGive( xBinarySemaphore[6] );
   174fe:	f240 7398 	movw	r3, #1944	; 0x798
   17502:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17506:	699b      	ldr	r3, [r3, #24]
   17508:	4618      	mov	r0, r3
   1750a:	2100      	movs	r1, #0
   1750c:	2200      	movs	r2, #0
   1750e:	2300      	movs	r3, #0
   17510:	f7ec fca6 	bl	3e60 <xQueueGenericSend>
        xSemaphoreGive( xBinarySemaphore[9] );
   17514:	f240 7398 	movw	r3, #1944	; 0x798
   17518:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1751c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1751e:	4618      	mov	r0, r3
   17520:	2100      	movs	r1, #0
   17522:	2200      	movs	r2, #0
   17524:	2300      	movs	r3, #0
   17526:	f7ec fc9b 	bl	3e60 <xQueueGenericSend>
        xSemaphoreGive( xBinarySemaphore[12] );
   1752a:	f240 7398 	movw	r3, #1944	; 0x798
   1752e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17534:	4618      	mov	r0, r3
   17536:	2100      	movs	r1, #0
   17538:	2200      	movs	r2, #0
   1753a:	2300      	movs	r3, #0
   1753c:	f7ec fc90 	bl	3e60 <xQueueGenericSend>
        xSemaphoreGive( xBinarySemaphore[13] );
   17540:	f240 7398 	movw	r3, #1944	; 0x798
   17544:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1754a:	4618      	mov	r0, r3
   1754c:	2100      	movs	r1, #0
   1754e:	2200      	movs	r2, #0
   17550:	2300      	movs	r3, #0
   17552:	f7ec fc85 	bl	3e60 <xQueueGenericSend>
        xSemaphoreGive( xBinarySemaphore[15] );
   17556:	f240 7398 	movw	r3, #1944	; 0x798
   1755a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1755e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   17560:	4618      	mov	r0, r3
   17562:	2100      	movs	r1, #0
   17564:	2200      	movs	r2, #0
   17566:	2300      	movs	r3, #0
   17568:	f7ec fc7a 	bl	3e60 <xQueueGenericSend>
        xSemaphoreGive( xBinarySemaphore[18] );
   1756c:	f240 7398 	movw	r3, #1944	; 0x798
   17570:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   17576:	4618      	mov	r0, r3
   17578:	2100      	movs	r1, #0
   1757a:	2200      	movs	r2, #0
   1757c:	2300      	movs	r3, #0
   1757e:	f7ec fc6f 	bl	3e60 <xQueueGenericSend>
        xSemaphoreGive( xBinarySemaphore[19] );
   17582:	f240 7398 	movw	r3, #1944	; 0x798
   17586:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1758a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1758c:	4618      	mov	r0, r3
   1758e:	2100      	movs	r1, #0
   17590:	2200      	movs	r2, #0
   17592:	2300      	movs	r3, #0
   17594:	f7ec fc64 	bl	3e60 <xQueueGenericSend>
        xSemaphoreGive( xBinarySemaphore[20] );
   17598:	f240 7398 	movw	r3, #1944	; 0x798
   1759c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   175a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   175a2:	4618      	mov	r0, r3
   175a4:	2100      	movs	r1, #0
   175a6:	2200      	movs	r2, #0
   175a8:	2300      	movs	r3, #0
   175aa:	f7ec fc59 	bl	3e60 <xQueueGenericSend>
        IS_INIT = 0;
   175ae:	f240 331c 	movw	r3, #796	; 0x31c
   175b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   175b6:	2200      	movs	r2, #0
   175b8:	601a      	str	r2, [r3, #0]
    }
    
    // send semaphore to R-Servant to triggered it to cope with events 
    // when time meeting the start time of task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
   175ba:	f240 032c 	movw	r3, #44	; 0x2c
   175be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   175c2:	681b      	ldr	r3, [r3, #0]
   175c4:	005a      	lsls	r2, r3, #1
   175c6:	687b      	ldr	r3, [r7, #4]
   175c8:	429a      	cmp	r2, r3
   175ca:	d83e      	bhi.n	1764a <vApplicationTickHook+0x1de>
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
   175cc:	f240 032c 	movw	r3, #44	; 0x2c
   175d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   175d4:	681a      	ldr	r2, [r3, #0]
   175d6:	687b      	ldr	r3, [r7, #4]
   175d8:	fbb3 f1f2 	udiv	r1, r3, r2
   175dc:	fb02 f201 	mul.w	r2, r2, r1
   175e0:	1a9b      	subs	r3, r3, r2
   175e2:	2b00      	cmp	r3, #0
   175e4:	d026      	beq.n	17634 <vApplicationTickHook+0x1c8>
            xCurrentTime % xPeriodOfTask[2] == 0 ||
   175e6:	f240 032c 	movw	r3, #44	; 0x2c
   175ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   175ee:	689a      	ldr	r2, [r3, #8]
   175f0:	687b      	ldr	r3, [r7, #4]
   175f2:	fbb3 f1f2 	udiv	r1, r3, r2
   175f6:	fb02 f201 	mul.w	r2, r2, r1
   175fa:	1a9b      	subs	r3, r3, r2
    
    // send semaphore to R-Servant to triggered it to cope with events 
    // when time meeting the start time of task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
   175fc:	2b00      	cmp	r3, #0
   175fe:	d019      	beq.n	17634 <vApplicationTickHook+0x1c8>
            xCurrentTime % xPeriodOfTask[2] == 0 ||
            xCurrentTime % xPeriodOfTask[12] == 0 ||
   17600:	f240 032c 	movw	r3, #44	; 0x2c
   17604:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1760a:	687b      	ldr	r3, [r7, #4]
   1760c:	fbb3 f1f2 	udiv	r1, r3, r2
   17610:	fb02 f201 	mul.w	r2, r2, r1
   17614:	1a9b      	subs	r3, r3, r2
    // send semaphore to R-Servant to triggered it to cope with events 
    // when time meeting the start time of task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
            xCurrentTime % xPeriodOfTask[2] == 0 ||
   17616:	2b00      	cmp	r3, #0
   17618:	d00c      	beq.n	17634 <vApplicationTickHook+0x1c8>
            xCurrentTime % xPeriodOfTask[12] == 0 ||
            xCurrentTime % xPeriodOfTask[8] == 0)
   1761a:	f240 032c 	movw	r3, #44	; 0x2c
   1761e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17622:	6a1a      	ldr	r2, [r3, #32]
   17624:	687b      	ldr	r3, [r7, #4]
   17626:	fbb3 f1f2 	udiv	r1, r3, r2
   1762a:	fb02 f201 	mul.w	r2, r2, r1
   1762e:	1a9b      	subs	r3, r3, r2
    // when time meeting the start time of task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
            xCurrentTime % xPeriodOfTask[2] == 0 ||
            xCurrentTime % xPeriodOfTask[12] == 0 ||
   17630:	2b00      	cmp	r3, #0
   17632:	d10a      	bne.n	1764a <vApplicationTickHook+0x1de>
            xCurrentTime % xPeriodOfTask[8] == 0)
        {
           xSemaphoreGive( xBinarySemaphore[21] ); 
   17634:	f240 7398 	movw	r3, #1944	; 0x798
   17638:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1763c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1763e:	4618      	mov	r0, r3
   17640:	2100      	movs	r1, #0
   17642:	2200      	movs	r2, #0
   17644:	2300      	movs	r3, #0
   17646:	f7ec fc0b 	bl	3e60 <xQueueGenericSend>
        }
    }
}
   1764a:	3708      	adds	r7, #8
   1764c:	46bd      	mov	sp, r7
   1764e:	bd80      	pop	{r7, pc}

00017650 <__aeabi_drsub>:
   17650:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   17654:	e002      	b.n	1765c <__adddf3>
   17656:	bf00      	nop

00017658 <__aeabi_dsub>:
   17658:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001765c <__adddf3>:
   1765c:	b530      	push	{r4, r5, lr}
   1765e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   17662:	ea4f 0543 	mov.w	r5, r3, lsl #1
   17666:	ea94 0f05 	teq	r4, r5
   1766a:	bf08      	it	eq
   1766c:	ea90 0f02 	teqeq	r0, r2
   17670:	bf1f      	itttt	ne
   17672:	ea54 0c00 	orrsne.w	ip, r4, r0
   17676:	ea55 0c02 	orrsne.w	ip, r5, r2
   1767a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1767e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   17682:	f000 80e2 	beq.w	1784a <__adddf3+0x1ee>
   17686:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1768a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1768e:	bfb8      	it	lt
   17690:	426d      	neglt	r5, r5
   17692:	dd0c      	ble.n	176ae <__adddf3+0x52>
   17694:	442c      	add	r4, r5
   17696:	ea80 0202 	eor.w	r2, r0, r2
   1769a:	ea81 0303 	eor.w	r3, r1, r3
   1769e:	ea82 0000 	eor.w	r0, r2, r0
   176a2:	ea83 0101 	eor.w	r1, r3, r1
   176a6:	ea80 0202 	eor.w	r2, r0, r2
   176aa:	ea81 0303 	eor.w	r3, r1, r3
   176ae:	2d36      	cmp	r5, #54	; 0x36
   176b0:	bf88      	it	hi
   176b2:	bd30      	pophi	{r4, r5, pc}
   176b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   176b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   176bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   176c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   176c4:	d002      	beq.n	176cc <__adddf3+0x70>
   176c6:	4240      	negs	r0, r0
   176c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   176cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   176d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   176d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   176d8:	d002      	beq.n	176e0 <__adddf3+0x84>
   176da:	4252      	negs	r2, r2
   176dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   176e0:	ea94 0f05 	teq	r4, r5
   176e4:	f000 80a7 	beq.w	17836 <__adddf3+0x1da>
   176e8:	f1a4 0401 	sub.w	r4, r4, #1
   176ec:	f1d5 0e20 	rsbs	lr, r5, #32
   176f0:	db0d      	blt.n	1770e <__adddf3+0xb2>
   176f2:	fa02 fc0e 	lsl.w	ip, r2, lr
   176f6:	fa22 f205 	lsr.w	r2, r2, r5
   176fa:	1880      	adds	r0, r0, r2
   176fc:	f141 0100 	adc.w	r1, r1, #0
   17700:	fa03 f20e 	lsl.w	r2, r3, lr
   17704:	1880      	adds	r0, r0, r2
   17706:	fa43 f305 	asr.w	r3, r3, r5
   1770a:	4159      	adcs	r1, r3
   1770c:	e00e      	b.n	1772c <__adddf3+0xd0>
   1770e:	f1a5 0520 	sub.w	r5, r5, #32
   17712:	f10e 0e20 	add.w	lr, lr, #32
   17716:	2a01      	cmp	r2, #1
   17718:	fa03 fc0e 	lsl.w	ip, r3, lr
   1771c:	bf28      	it	cs
   1771e:	f04c 0c02 	orrcs.w	ip, ip, #2
   17722:	fa43 f305 	asr.w	r3, r3, r5
   17726:	18c0      	adds	r0, r0, r3
   17728:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1772c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17730:	d507      	bpl.n	17742 <__adddf3+0xe6>
   17732:	f04f 0e00 	mov.w	lr, #0
   17736:	f1dc 0c00 	rsbs	ip, ip, #0
   1773a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1773e:	eb6e 0101 	sbc.w	r1, lr, r1
   17742:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   17746:	d31b      	bcc.n	17780 <__adddf3+0x124>
   17748:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1774c:	d30c      	bcc.n	17768 <__adddf3+0x10c>
   1774e:	0849      	lsrs	r1, r1, #1
   17750:	ea5f 0030 	movs.w	r0, r0, rrx
   17754:	ea4f 0c3c 	mov.w	ip, ip, rrx
   17758:	f104 0401 	add.w	r4, r4, #1
   1775c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   17760:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   17764:	f080 809a 	bcs.w	1789c <__adddf3+0x240>
   17768:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1776c:	bf08      	it	eq
   1776e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   17772:	f150 0000 	adcs.w	r0, r0, #0
   17776:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1777a:	ea41 0105 	orr.w	r1, r1, r5
   1777e:	bd30      	pop	{r4, r5, pc}
   17780:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   17784:	4140      	adcs	r0, r0
   17786:	eb41 0101 	adc.w	r1, r1, r1
   1778a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1778e:	f1a4 0401 	sub.w	r4, r4, #1
   17792:	d1e9      	bne.n	17768 <__adddf3+0x10c>
   17794:	f091 0f00 	teq	r1, #0
   17798:	bf04      	itt	eq
   1779a:	4601      	moveq	r1, r0
   1779c:	2000      	moveq	r0, #0
   1779e:	fab1 f381 	clz	r3, r1
   177a2:	bf08      	it	eq
   177a4:	3320      	addeq	r3, #32
   177a6:	f1a3 030b 	sub.w	r3, r3, #11
   177aa:	f1b3 0220 	subs.w	r2, r3, #32
   177ae:	da0c      	bge.n	177ca <__adddf3+0x16e>
   177b0:	320c      	adds	r2, #12
   177b2:	dd08      	ble.n	177c6 <__adddf3+0x16a>
   177b4:	f102 0c14 	add.w	ip, r2, #20
   177b8:	f1c2 020c 	rsb	r2, r2, #12
   177bc:	fa01 f00c 	lsl.w	r0, r1, ip
   177c0:	fa21 f102 	lsr.w	r1, r1, r2
   177c4:	e00c      	b.n	177e0 <__adddf3+0x184>
   177c6:	f102 0214 	add.w	r2, r2, #20
   177ca:	bfd8      	it	le
   177cc:	f1c2 0c20 	rsble	ip, r2, #32
   177d0:	fa01 f102 	lsl.w	r1, r1, r2
   177d4:	fa20 fc0c 	lsr.w	ip, r0, ip
   177d8:	bfdc      	itt	le
   177da:	ea41 010c 	orrle.w	r1, r1, ip
   177de:	4090      	lslle	r0, r2
   177e0:	1ae4      	subs	r4, r4, r3
   177e2:	bfa2      	ittt	ge
   177e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   177e8:	4329      	orrge	r1, r5
   177ea:	bd30      	popge	{r4, r5, pc}
   177ec:	ea6f 0404 	mvn.w	r4, r4
   177f0:	3c1f      	subs	r4, #31
   177f2:	da1c      	bge.n	1782e <__adddf3+0x1d2>
   177f4:	340c      	adds	r4, #12
   177f6:	dc0e      	bgt.n	17816 <__adddf3+0x1ba>
   177f8:	f104 0414 	add.w	r4, r4, #20
   177fc:	f1c4 0220 	rsb	r2, r4, #32
   17800:	fa20 f004 	lsr.w	r0, r0, r4
   17804:	fa01 f302 	lsl.w	r3, r1, r2
   17808:	ea40 0003 	orr.w	r0, r0, r3
   1780c:	fa21 f304 	lsr.w	r3, r1, r4
   17810:	ea45 0103 	orr.w	r1, r5, r3
   17814:	bd30      	pop	{r4, r5, pc}
   17816:	f1c4 040c 	rsb	r4, r4, #12
   1781a:	f1c4 0220 	rsb	r2, r4, #32
   1781e:	fa20 f002 	lsr.w	r0, r0, r2
   17822:	fa01 f304 	lsl.w	r3, r1, r4
   17826:	ea40 0003 	orr.w	r0, r0, r3
   1782a:	4629      	mov	r1, r5
   1782c:	bd30      	pop	{r4, r5, pc}
   1782e:	fa21 f004 	lsr.w	r0, r1, r4
   17832:	4629      	mov	r1, r5
   17834:	bd30      	pop	{r4, r5, pc}
   17836:	f094 0f00 	teq	r4, #0
   1783a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1783e:	bf06      	itte	eq
   17840:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   17844:	3401      	addeq	r4, #1
   17846:	3d01      	subne	r5, #1
   17848:	e74e      	b.n	176e8 <__adddf3+0x8c>
   1784a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1784e:	bf18      	it	ne
   17850:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   17854:	d029      	beq.n	178aa <__adddf3+0x24e>
   17856:	ea94 0f05 	teq	r4, r5
   1785a:	bf08      	it	eq
   1785c:	ea90 0f02 	teqeq	r0, r2
   17860:	d005      	beq.n	1786e <__adddf3+0x212>
   17862:	ea54 0c00 	orrs.w	ip, r4, r0
   17866:	bf04      	itt	eq
   17868:	4619      	moveq	r1, r3
   1786a:	4610      	moveq	r0, r2
   1786c:	bd30      	pop	{r4, r5, pc}
   1786e:	ea91 0f03 	teq	r1, r3
   17872:	bf1e      	ittt	ne
   17874:	2100      	movne	r1, #0
   17876:	2000      	movne	r0, #0
   17878:	bd30      	popne	{r4, r5, pc}
   1787a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1787e:	d105      	bne.n	1788c <__adddf3+0x230>
   17880:	0040      	lsls	r0, r0, #1
   17882:	4149      	adcs	r1, r1
   17884:	bf28      	it	cs
   17886:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1788a:	bd30      	pop	{r4, r5, pc}
   1788c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   17890:	bf3c      	itt	cc
   17892:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   17896:	bd30      	popcc	{r4, r5, pc}
   17898:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1789c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   178a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   178a4:	f04f 0000 	mov.w	r0, #0
   178a8:	bd30      	pop	{r4, r5, pc}
   178aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   178ae:	bf1a      	itte	ne
   178b0:	4619      	movne	r1, r3
   178b2:	4610      	movne	r0, r2
   178b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   178b8:	bf1c      	itt	ne
   178ba:	460b      	movne	r3, r1
   178bc:	4602      	movne	r2, r0
   178be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   178c2:	bf06      	itte	eq
   178c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   178c8:	ea91 0f03 	teqeq	r1, r3
   178cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   178d0:	bd30      	pop	{r4, r5, pc}
   178d2:	bf00      	nop

000178d4 <__aeabi_ui2d>:
   178d4:	f090 0f00 	teq	r0, #0
   178d8:	bf04      	itt	eq
   178da:	2100      	moveq	r1, #0
   178dc:	4770      	bxeq	lr
   178de:	b530      	push	{r4, r5, lr}
   178e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   178e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   178e8:	f04f 0500 	mov.w	r5, #0
   178ec:	f04f 0100 	mov.w	r1, #0
   178f0:	e750      	b.n	17794 <__adddf3+0x138>
   178f2:	bf00      	nop

000178f4 <__aeabi_i2d>:
   178f4:	f090 0f00 	teq	r0, #0
   178f8:	bf04      	itt	eq
   178fa:	2100      	moveq	r1, #0
   178fc:	4770      	bxeq	lr
   178fe:	b530      	push	{r4, r5, lr}
   17900:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17904:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17908:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1790c:	bf48      	it	mi
   1790e:	4240      	negmi	r0, r0
   17910:	f04f 0100 	mov.w	r1, #0
   17914:	e73e      	b.n	17794 <__adddf3+0x138>
   17916:	bf00      	nop

00017918 <__aeabi_f2d>:
   17918:	0042      	lsls	r2, r0, #1
   1791a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1791e:	ea4f 0131 	mov.w	r1, r1, rrx
   17922:	ea4f 7002 	mov.w	r0, r2, lsl #28
   17926:	bf1f      	itttt	ne
   17928:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1792c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17930:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   17934:	4770      	bxne	lr
   17936:	f092 0f00 	teq	r2, #0
   1793a:	bf14      	ite	ne
   1793c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17940:	4770      	bxeq	lr
   17942:	b530      	push	{r4, r5, lr}
   17944:	f44f 7460 	mov.w	r4, #896	; 0x380
   17948:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1794c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17950:	e720      	b.n	17794 <__adddf3+0x138>
   17952:	bf00      	nop

00017954 <__aeabi_ul2d>:
   17954:	ea50 0201 	orrs.w	r2, r0, r1
   17958:	bf08      	it	eq
   1795a:	4770      	bxeq	lr
   1795c:	b530      	push	{r4, r5, lr}
   1795e:	f04f 0500 	mov.w	r5, #0
   17962:	e00a      	b.n	1797a <__aeabi_l2d+0x16>

00017964 <__aeabi_l2d>:
   17964:	ea50 0201 	orrs.w	r2, r0, r1
   17968:	bf08      	it	eq
   1796a:	4770      	bxeq	lr
   1796c:	b530      	push	{r4, r5, lr}
   1796e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   17972:	d502      	bpl.n	1797a <__aeabi_l2d+0x16>
   17974:	4240      	negs	r0, r0
   17976:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1797a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1797e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17982:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   17986:	f43f aedc 	beq.w	17742 <__adddf3+0xe6>
   1798a:	f04f 0203 	mov.w	r2, #3
   1798e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17992:	bf18      	it	ne
   17994:	3203      	addne	r2, #3
   17996:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1799a:	bf18      	it	ne
   1799c:	3203      	addne	r2, #3
   1799e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   179a2:	f1c2 0320 	rsb	r3, r2, #32
   179a6:	fa00 fc03 	lsl.w	ip, r0, r3
   179aa:	fa20 f002 	lsr.w	r0, r0, r2
   179ae:	fa01 fe03 	lsl.w	lr, r1, r3
   179b2:	ea40 000e 	orr.w	r0, r0, lr
   179b6:	fa21 f102 	lsr.w	r1, r1, r2
   179ba:	4414      	add	r4, r2
   179bc:	e6c1      	b.n	17742 <__adddf3+0xe6>
   179be:	bf00      	nop

000179c0 <__aeabi_dmul>:
   179c0:	b570      	push	{r4, r5, r6, lr}
   179c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   179c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   179ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   179ce:	bf1d      	ittte	ne
   179d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   179d4:	ea94 0f0c 	teqne	r4, ip
   179d8:	ea95 0f0c 	teqne	r5, ip
   179dc:	f000 f8de 	bleq	17b9c <__aeabi_dmul+0x1dc>
   179e0:	442c      	add	r4, r5
   179e2:	ea81 0603 	eor.w	r6, r1, r3
   179e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   179ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   179ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   179f2:	bf18      	it	ne
   179f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   179f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   179fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   17a00:	d038      	beq.n	17a74 <__aeabi_dmul+0xb4>
   17a02:	fba0 ce02 	umull	ip, lr, r0, r2
   17a06:	f04f 0500 	mov.w	r5, #0
   17a0a:	fbe1 e502 	umlal	lr, r5, r1, r2
   17a0e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   17a12:	fbe0 e503 	umlal	lr, r5, r0, r3
   17a16:	f04f 0600 	mov.w	r6, #0
   17a1a:	fbe1 5603 	umlal	r5, r6, r1, r3
   17a1e:	f09c 0f00 	teq	ip, #0
   17a22:	bf18      	it	ne
   17a24:	f04e 0e01 	orrne.w	lr, lr, #1
   17a28:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   17a2c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   17a30:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   17a34:	d204      	bcs.n	17a40 <__aeabi_dmul+0x80>
   17a36:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   17a3a:	416d      	adcs	r5, r5
   17a3c:	eb46 0606 	adc.w	r6, r6, r6
   17a40:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   17a44:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   17a48:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   17a4c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   17a50:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   17a54:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17a58:	bf88      	it	hi
   17a5a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17a5e:	d81e      	bhi.n	17a9e <__aeabi_dmul+0xde>
   17a60:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   17a64:	bf08      	it	eq
   17a66:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   17a6a:	f150 0000 	adcs.w	r0, r0, #0
   17a6e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17a72:	bd70      	pop	{r4, r5, r6, pc}
   17a74:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   17a78:	ea46 0101 	orr.w	r1, r6, r1
   17a7c:	ea40 0002 	orr.w	r0, r0, r2
   17a80:	ea81 0103 	eor.w	r1, r1, r3
   17a84:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   17a88:	bfc2      	ittt	gt
   17a8a:	ebd4 050c 	rsbsgt	r5, r4, ip
   17a8e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17a92:	bd70      	popgt	{r4, r5, r6, pc}
   17a94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17a98:	f04f 0e00 	mov.w	lr, #0
   17a9c:	3c01      	subs	r4, #1
   17a9e:	f300 80ab 	bgt.w	17bf8 <__aeabi_dmul+0x238>
   17aa2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   17aa6:	bfde      	ittt	le
   17aa8:	2000      	movle	r0, #0
   17aaa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   17aae:	bd70      	pople	{r4, r5, r6, pc}
   17ab0:	f1c4 0400 	rsb	r4, r4, #0
   17ab4:	3c20      	subs	r4, #32
   17ab6:	da35      	bge.n	17b24 <__aeabi_dmul+0x164>
   17ab8:	340c      	adds	r4, #12
   17aba:	dc1b      	bgt.n	17af4 <__aeabi_dmul+0x134>
   17abc:	f104 0414 	add.w	r4, r4, #20
   17ac0:	f1c4 0520 	rsb	r5, r4, #32
   17ac4:	fa00 f305 	lsl.w	r3, r0, r5
   17ac8:	fa20 f004 	lsr.w	r0, r0, r4
   17acc:	fa01 f205 	lsl.w	r2, r1, r5
   17ad0:	ea40 0002 	orr.w	r0, r0, r2
   17ad4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   17ad8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17adc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17ae0:	fa21 f604 	lsr.w	r6, r1, r4
   17ae4:	eb42 0106 	adc.w	r1, r2, r6
   17ae8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17aec:	bf08      	it	eq
   17aee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17af2:	bd70      	pop	{r4, r5, r6, pc}
   17af4:	f1c4 040c 	rsb	r4, r4, #12
   17af8:	f1c4 0520 	rsb	r5, r4, #32
   17afc:	fa00 f304 	lsl.w	r3, r0, r4
   17b00:	fa20 f005 	lsr.w	r0, r0, r5
   17b04:	fa01 f204 	lsl.w	r2, r1, r4
   17b08:	ea40 0002 	orr.w	r0, r0, r2
   17b0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17b10:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17b14:	f141 0100 	adc.w	r1, r1, #0
   17b18:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17b1c:	bf08      	it	eq
   17b1e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17b22:	bd70      	pop	{r4, r5, r6, pc}
   17b24:	f1c4 0520 	rsb	r5, r4, #32
   17b28:	fa00 f205 	lsl.w	r2, r0, r5
   17b2c:	ea4e 0e02 	orr.w	lr, lr, r2
   17b30:	fa20 f304 	lsr.w	r3, r0, r4
   17b34:	fa01 f205 	lsl.w	r2, r1, r5
   17b38:	ea43 0302 	orr.w	r3, r3, r2
   17b3c:	fa21 f004 	lsr.w	r0, r1, r4
   17b40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17b44:	fa21 f204 	lsr.w	r2, r1, r4
   17b48:	ea20 0002 	bic.w	r0, r0, r2
   17b4c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   17b50:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17b54:	bf08      	it	eq
   17b56:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17b5a:	bd70      	pop	{r4, r5, r6, pc}
   17b5c:	f094 0f00 	teq	r4, #0
   17b60:	d10f      	bne.n	17b82 <__aeabi_dmul+0x1c2>
   17b62:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   17b66:	0040      	lsls	r0, r0, #1
   17b68:	eb41 0101 	adc.w	r1, r1, r1
   17b6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17b70:	bf08      	it	eq
   17b72:	3c01      	subeq	r4, #1
   17b74:	d0f7      	beq.n	17b66 <__aeabi_dmul+0x1a6>
   17b76:	ea41 0106 	orr.w	r1, r1, r6
   17b7a:	f095 0f00 	teq	r5, #0
   17b7e:	bf18      	it	ne
   17b80:	4770      	bxne	lr
   17b82:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   17b86:	0052      	lsls	r2, r2, #1
   17b88:	eb43 0303 	adc.w	r3, r3, r3
   17b8c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   17b90:	bf08      	it	eq
   17b92:	3d01      	subeq	r5, #1
   17b94:	d0f7      	beq.n	17b86 <__aeabi_dmul+0x1c6>
   17b96:	ea43 0306 	orr.w	r3, r3, r6
   17b9a:	4770      	bx	lr
   17b9c:	ea94 0f0c 	teq	r4, ip
   17ba0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17ba4:	bf18      	it	ne
   17ba6:	ea95 0f0c 	teqne	r5, ip
   17baa:	d00c      	beq.n	17bc6 <__aeabi_dmul+0x206>
   17bac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17bb0:	bf18      	it	ne
   17bb2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17bb6:	d1d1      	bne.n	17b5c <__aeabi_dmul+0x19c>
   17bb8:	ea81 0103 	eor.w	r1, r1, r3
   17bbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17bc0:	f04f 0000 	mov.w	r0, #0
   17bc4:	bd70      	pop	{r4, r5, r6, pc}
   17bc6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17bca:	bf06      	itte	eq
   17bcc:	4610      	moveq	r0, r2
   17bce:	4619      	moveq	r1, r3
   17bd0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17bd4:	d019      	beq.n	17c0a <__aeabi_dmul+0x24a>
   17bd6:	ea94 0f0c 	teq	r4, ip
   17bda:	d102      	bne.n	17be2 <__aeabi_dmul+0x222>
   17bdc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   17be0:	d113      	bne.n	17c0a <__aeabi_dmul+0x24a>
   17be2:	ea95 0f0c 	teq	r5, ip
   17be6:	d105      	bne.n	17bf4 <__aeabi_dmul+0x234>
   17be8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   17bec:	bf1c      	itt	ne
   17bee:	4610      	movne	r0, r2
   17bf0:	4619      	movne	r1, r3
   17bf2:	d10a      	bne.n	17c0a <__aeabi_dmul+0x24a>
   17bf4:	ea81 0103 	eor.w	r1, r1, r3
   17bf8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17bfc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17c00:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17c04:	f04f 0000 	mov.w	r0, #0
   17c08:	bd70      	pop	{r4, r5, r6, pc}
   17c0a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17c0e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   17c12:	bd70      	pop	{r4, r5, r6, pc}

00017c14 <__aeabi_ddiv>:
   17c14:	b570      	push	{r4, r5, r6, lr}
   17c16:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17c1a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17c1e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17c22:	bf1d      	ittte	ne
   17c24:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17c28:	ea94 0f0c 	teqne	r4, ip
   17c2c:	ea95 0f0c 	teqne	r5, ip
   17c30:	f000 f8a7 	bleq	17d82 <__aeabi_ddiv+0x16e>
   17c34:	eba4 0405 	sub.w	r4, r4, r5
   17c38:	ea81 0e03 	eor.w	lr, r1, r3
   17c3c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17c40:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17c44:	f000 8088 	beq.w	17d58 <__aeabi_ddiv+0x144>
   17c48:	ea4f 3303 	mov.w	r3, r3, lsl #12
   17c4c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   17c50:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   17c54:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   17c58:	ea4f 2202 	mov.w	r2, r2, lsl #8
   17c5c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   17c60:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   17c64:	ea4f 2600 	mov.w	r6, r0, lsl #8
   17c68:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   17c6c:	429d      	cmp	r5, r3
   17c6e:	bf08      	it	eq
   17c70:	4296      	cmpeq	r6, r2
   17c72:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   17c76:	f504 7440 	add.w	r4, r4, #768	; 0x300
   17c7a:	d202      	bcs.n	17c82 <__aeabi_ddiv+0x6e>
   17c7c:	085b      	lsrs	r3, r3, #1
   17c7e:	ea4f 0232 	mov.w	r2, r2, rrx
   17c82:	1ab6      	subs	r6, r6, r2
   17c84:	eb65 0503 	sbc.w	r5, r5, r3
   17c88:	085b      	lsrs	r3, r3, #1
   17c8a:	ea4f 0232 	mov.w	r2, r2, rrx
   17c8e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   17c92:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   17c96:	ebb6 0e02 	subs.w	lr, r6, r2
   17c9a:	eb75 0e03 	sbcs.w	lr, r5, r3
   17c9e:	bf22      	ittt	cs
   17ca0:	1ab6      	subcs	r6, r6, r2
   17ca2:	4675      	movcs	r5, lr
   17ca4:	ea40 000c 	orrcs.w	r0, r0, ip
   17ca8:	085b      	lsrs	r3, r3, #1
   17caa:	ea4f 0232 	mov.w	r2, r2, rrx
   17cae:	ebb6 0e02 	subs.w	lr, r6, r2
   17cb2:	eb75 0e03 	sbcs.w	lr, r5, r3
   17cb6:	bf22      	ittt	cs
   17cb8:	1ab6      	subcs	r6, r6, r2
   17cba:	4675      	movcs	r5, lr
   17cbc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   17cc0:	085b      	lsrs	r3, r3, #1
   17cc2:	ea4f 0232 	mov.w	r2, r2, rrx
   17cc6:	ebb6 0e02 	subs.w	lr, r6, r2
   17cca:	eb75 0e03 	sbcs.w	lr, r5, r3
   17cce:	bf22      	ittt	cs
   17cd0:	1ab6      	subcs	r6, r6, r2
   17cd2:	4675      	movcs	r5, lr
   17cd4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   17cd8:	085b      	lsrs	r3, r3, #1
   17cda:	ea4f 0232 	mov.w	r2, r2, rrx
   17cde:	ebb6 0e02 	subs.w	lr, r6, r2
   17ce2:	eb75 0e03 	sbcs.w	lr, r5, r3
   17ce6:	bf22      	ittt	cs
   17ce8:	1ab6      	subcs	r6, r6, r2
   17cea:	4675      	movcs	r5, lr
   17cec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   17cf0:	ea55 0e06 	orrs.w	lr, r5, r6
   17cf4:	d018      	beq.n	17d28 <__aeabi_ddiv+0x114>
   17cf6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   17cfa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   17cfe:	ea4f 1606 	mov.w	r6, r6, lsl #4
   17d02:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   17d06:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   17d0a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   17d0e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   17d12:	d1c0      	bne.n	17c96 <__aeabi_ddiv+0x82>
   17d14:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17d18:	d10b      	bne.n	17d32 <__aeabi_ddiv+0x11e>
   17d1a:	ea41 0100 	orr.w	r1, r1, r0
   17d1e:	f04f 0000 	mov.w	r0, #0
   17d22:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   17d26:	e7b6      	b.n	17c96 <__aeabi_ddiv+0x82>
   17d28:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17d2c:	bf04      	itt	eq
   17d2e:	4301      	orreq	r1, r0
   17d30:	2000      	moveq	r0, #0
   17d32:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17d36:	bf88      	it	hi
   17d38:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17d3c:	f63f aeaf 	bhi.w	17a9e <__aeabi_dmul+0xde>
   17d40:	ebb5 0c03 	subs.w	ip, r5, r3
   17d44:	bf04      	itt	eq
   17d46:	ebb6 0c02 	subseq.w	ip, r6, r2
   17d4a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   17d4e:	f150 0000 	adcs.w	r0, r0, #0
   17d52:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17d56:	bd70      	pop	{r4, r5, r6, pc}
   17d58:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   17d5c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   17d60:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   17d64:	bfc2      	ittt	gt
   17d66:	ebd4 050c 	rsbsgt	r5, r4, ip
   17d6a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17d6e:	bd70      	popgt	{r4, r5, r6, pc}
   17d70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17d74:	f04f 0e00 	mov.w	lr, #0
   17d78:	3c01      	subs	r4, #1
   17d7a:	e690      	b.n	17a9e <__aeabi_dmul+0xde>
   17d7c:	ea45 0e06 	orr.w	lr, r5, r6
   17d80:	e68d      	b.n	17a9e <__aeabi_dmul+0xde>
   17d82:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17d86:	ea94 0f0c 	teq	r4, ip
   17d8a:	bf08      	it	eq
   17d8c:	ea95 0f0c 	teqeq	r5, ip
   17d90:	f43f af3b 	beq.w	17c0a <__aeabi_dmul+0x24a>
   17d94:	ea94 0f0c 	teq	r4, ip
   17d98:	d10a      	bne.n	17db0 <__aeabi_ddiv+0x19c>
   17d9a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   17d9e:	f47f af34 	bne.w	17c0a <__aeabi_dmul+0x24a>
   17da2:	ea95 0f0c 	teq	r5, ip
   17da6:	f47f af25 	bne.w	17bf4 <__aeabi_dmul+0x234>
   17daa:	4610      	mov	r0, r2
   17dac:	4619      	mov	r1, r3
   17dae:	e72c      	b.n	17c0a <__aeabi_dmul+0x24a>
   17db0:	ea95 0f0c 	teq	r5, ip
   17db4:	d106      	bne.n	17dc4 <__aeabi_ddiv+0x1b0>
   17db6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17dba:	f43f aefd 	beq.w	17bb8 <__aeabi_dmul+0x1f8>
   17dbe:	4610      	mov	r0, r2
   17dc0:	4619      	mov	r1, r3
   17dc2:	e722      	b.n	17c0a <__aeabi_dmul+0x24a>
   17dc4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17dc8:	bf18      	it	ne
   17dca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17dce:	f47f aec5 	bne.w	17b5c <__aeabi_dmul+0x19c>
   17dd2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   17dd6:	f47f af0d 	bne.w	17bf4 <__aeabi_dmul+0x234>
   17dda:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   17dde:	f47f aeeb 	bne.w	17bb8 <__aeabi_dmul+0x1f8>
   17de2:	e712      	b.n	17c0a <__aeabi_dmul+0x24a>

00017de4 <__gedf2>:
   17de4:	f04f 3cff 	mov.w	ip, #4294967295
   17de8:	e006      	b.n	17df8 <__cmpdf2+0x4>
   17dea:	bf00      	nop

00017dec <__ledf2>:
   17dec:	f04f 0c01 	mov.w	ip, #1
   17df0:	e002      	b.n	17df8 <__cmpdf2+0x4>
   17df2:	bf00      	nop

00017df4 <__cmpdf2>:
   17df4:	f04f 0c01 	mov.w	ip, #1
   17df8:	f84d cd04 	str.w	ip, [sp, #-4]!
   17dfc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   17e00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17e04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   17e08:	bf18      	it	ne
   17e0a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   17e0e:	d01b      	beq.n	17e48 <__cmpdf2+0x54>
   17e10:	b001      	add	sp, #4
   17e12:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   17e16:	bf0c      	ite	eq
   17e18:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   17e1c:	ea91 0f03 	teqne	r1, r3
   17e20:	bf02      	ittt	eq
   17e22:	ea90 0f02 	teqeq	r0, r2
   17e26:	2000      	moveq	r0, #0
   17e28:	4770      	bxeq	lr
   17e2a:	f110 0f00 	cmn.w	r0, #0
   17e2e:	ea91 0f03 	teq	r1, r3
   17e32:	bf58      	it	pl
   17e34:	4299      	cmppl	r1, r3
   17e36:	bf08      	it	eq
   17e38:	4290      	cmpeq	r0, r2
   17e3a:	bf2c      	ite	cs
   17e3c:	17d8      	asrcs	r0, r3, #31
   17e3e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   17e42:	f040 0001 	orr.w	r0, r0, #1
   17e46:	4770      	bx	lr
   17e48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   17e4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17e50:	d102      	bne.n	17e58 <__cmpdf2+0x64>
   17e52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   17e56:	d107      	bne.n	17e68 <__cmpdf2+0x74>
   17e58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   17e5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17e60:	d1d6      	bne.n	17e10 <__cmpdf2+0x1c>
   17e62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   17e66:	d0d3      	beq.n	17e10 <__cmpdf2+0x1c>
   17e68:	f85d 0b04 	ldr.w	r0, [sp], #4
   17e6c:	4770      	bx	lr
   17e6e:	bf00      	nop

00017e70 <__aeabi_cdrcmple>:
   17e70:	4684      	mov	ip, r0
   17e72:	4610      	mov	r0, r2
   17e74:	4662      	mov	r2, ip
   17e76:	468c      	mov	ip, r1
   17e78:	4619      	mov	r1, r3
   17e7a:	4663      	mov	r3, ip
   17e7c:	e000      	b.n	17e80 <__aeabi_cdcmpeq>
   17e7e:	bf00      	nop

00017e80 <__aeabi_cdcmpeq>:
   17e80:	b501      	push	{r0, lr}
   17e82:	f7ff ffb7 	bl	17df4 <__cmpdf2>
   17e86:	2800      	cmp	r0, #0
   17e88:	bf48      	it	mi
   17e8a:	f110 0f00 	cmnmi.w	r0, #0
   17e8e:	bd01      	pop	{r0, pc}

00017e90 <__aeabi_dcmpeq>:
   17e90:	f84d ed08 	str.w	lr, [sp, #-8]!
   17e94:	f7ff fff4 	bl	17e80 <__aeabi_cdcmpeq>
   17e98:	bf0c      	ite	eq
   17e9a:	2001      	moveq	r0, #1
   17e9c:	2000      	movne	r0, #0
   17e9e:	f85d fb08 	ldr.w	pc, [sp], #8
   17ea2:	bf00      	nop

00017ea4 <__aeabi_dcmplt>:
   17ea4:	f84d ed08 	str.w	lr, [sp, #-8]!
   17ea8:	f7ff ffea 	bl	17e80 <__aeabi_cdcmpeq>
   17eac:	bf34      	ite	cc
   17eae:	2001      	movcc	r0, #1
   17eb0:	2000      	movcs	r0, #0
   17eb2:	f85d fb08 	ldr.w	pc, [sp], #8
   17eb6:	bf00      	nop

00017eb8 <__aeabi_dcmple>:
   17eb8:	f84d ed08 	str.w	lr, [sp, #-8]!
   17ebc:	f7ff ffe0 	bl	17e80 <__aeabi_cdcmpeq>
   17ec0:	bf94      	ite	ls
   17ec2:	2001      	movls	r0, #1
   17ec4:	2000      	movhi	r0, #0
   17ec6:	f85d fb08 	ldr.w	pc, [sp], #8
   17eca:	bf00      	nop

00017ecc <__aeabi_dcmpge>:
   17ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
   17ed0:	f7ff ffce 	bl	17e70 <__aeabi_cdrcmple>
   17ed4:	bf94      	ite	ls
   17ed6:	2001      	movls	r0, #1
   17ed8:	2000      	movhi	r0, #0
   17eda:	f85d fb08 	ldr.w	pc, [sp], #8
   17ede:	bf00      	nop

00017ee0 <__aeabi_dcmpgt>:
   17ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
   17ee4:	f7ff ffc4 	bl	17e70 <__aeabi_cdrcmple>
   17ee8:	bf34      	ite	cc
   17eea:	2001      	movcc	r0, #1
   17eec:	2000      	movcs	r0, #0
   17eee:	f85d fb08 	ldr.w	pc, [sp], #8
   17ef2:	bf00      	nop

00017ef4 <__aeabi_d2iz>:
   17ef4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   17ef8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   17efc:	d215      	bcs.n	17f2a <__aeabi_d2iz+0x36>
   17efe:	d511      	bpl.n	17f24 <__aeabi_d2iz+0x30>
   17f00:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   17f04:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   17f08:	d912      	bls.n	17f30 <__aeabi_d2iz+0x3c>
   17f0a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   17f0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   17f12:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   17f16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   17f1a:	fa23 f002 	lsr.w	r0, r3, r2
   17f1e:	bf18      	it	ne
   17f20:	4240      	negne	r0, r0
   17f22:	4770      	bx	lr
   17f24:	f04f 0000 	mov.w	r0, #0
   17f28:	4770      	bx	lr
   17f2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   17f2e:	d105      	bne.n	17f3c <__aeabi_d2iz+0x48>
   17f30:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   17f34:	bf08      	it	eq
   17f36:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   17f3a:	4770      	bx	lr
   17f3c:	f04f 0000 	mov.w	r0, #0
   17f40:	4770      	bx	lr
   17f42:	bf00      	nop

00017f44 <__aeabi_d2uiz>:
   17f44:	004a      	lsls	r2, r1, #1
   17f46:	d211      	bcs.n	17f6c <__aeabi_d2uiz+0x28>
   17f48:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   17f4c:	d211      	bcs.n	17f72 <__aeabi_d2uiz+0x2e>
   17f4e:	d50d      	bpl.n	17f6c <__aeabi_d2uiz+0x28>
   17f50:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   17f54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   17f58:	d40e      	bmi.n	17f78 <__aeabi_d2uiz+0x34>
   17f5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   17f5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   17f62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   17f66:	fa23 f002 	lsr.w	r0, r3, r2
   17f6a:	4770      	bx	lr
   17f6c:	f04f 0000 	mov.w	r0, #0
   17f70:	4770      	bx	lr
   17f72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   17f76:	d102      	bne.n	17f7e <__aeabi_d2uiz+0x3a>
   17f78:	f04f 30ff 	mov.w	r0, #4294967295
   17f7c:	4770      	bx	lr
   17f7e:	f04f 0000 	mov.w	r0, #0
   17f82:	4770      	bx	lr

00017f84 <__aeabi_d2f>:
   17f84:	ea4f 0241 	mov.w	r2, r1, lsl #1
   17f88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   17f8c:	bf24      	itt	cs
   17f8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   17f92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   17f96:	d90d      	bls.n	17fb4 <__aeabi_d2f+0x30>
   17f98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   17f9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   17fa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   17fa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   17fa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   17fac:	bf08      	it	eq
   17fae:	f020 0001 	biceq.w	r0, r0, #1
   17fb2:	4770      	bx	lr
   17fb4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   17fb8:	d121      	bne.n	17ffe <__aeabi_d2f+0x7a>
   17fba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   17fbe:	bfbc      	itt	lt
   17fc0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   17fc4:	4770      	bxlt	lr
   17fc6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17fca:	ea4f 5252 	mov.w	r2, r2, lsr #21
   17fce:	f1c2 0218 	rsb	r2, r2, #24
   17fd2:	f1c2 0c20 	rsb	ip, r2, #32
   17fd6:	fa10 f30c 	lsls.w	r3, r0, ip
   17fda:	fa20 f002 	lsr.w	r0, r0, r2
   17fde:	bf18      	it	ne
   17fe0:	f040 0001 	orrne.w	r0, r0, #1
   17fe4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   17fe8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   17fec:	fa03 fc0c 	lsl.w	ip, r3, ip
   17ff0:	ea40 000c 	orr.w	r0, r0, ip
   17ff4:	fa23 f302 	lsr.w	r3, r3, r2
   17ff8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   17ffc:	e7cc      	b.n	17f98 <__aeabi_d2f+0x14>
   17ffe:	ea7f 5362 	mvns.w	r3, r2, asr #21
   18002:	d107      	bne.n	18014 <__aeabi_d2f+0x90>
   18004:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   18008:	bf1e      	ittt	ne
   1800a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1800e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   18012:	4770      	bxne	lr
   18014:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   18018:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1801c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18020:	4770      	bx	lr
   18022:	bf00      	nop

00018024 <__aeabi_frsub>:
   18024:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   18028:	e002      	b.n	18030 <__addsf3>
   1802a:	bf00      	nop

0001802c <__aeabi_fsub>:
   1802c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00018030 <__addsf3>:
   18030:	0042      	lsls	r2, r0, #1
   18032:	bf1f      	itttt	ne
   18034:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   18038:	ea92 0f03 	teqne	r2, r3
   1803c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   18040:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18044:	d06a      	beq.n	1811c <__addsf3+0xec>
   18046:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1804a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1804e:	bfc1      	itttt	gt
   18050:	18d2      	addgt	r2, r2, r3
   18052:	4041      	eorgt	r1, r0
   18054:	4048      	eorgt	r0, r1
   18056:	4041      	eorgt	r1, r0
   18058:	bfb8      	it	lt
   1805a:	425b      	neglt	r3, r3
   1805c:	2b19      	cmp	r3, #25
   1805e:	bf88      	it	hi
   18060:	4770      	bxhi	lr
   18062:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   18066:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1806a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1806e:	bf18      	it	ne
   18070:	4240      	negne	r0, r0
   18072:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18076:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1807a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1807e:	bf18      	it	ne
   18080:	4249      	negne	r1, r1
   18082:	ea92 0f03 	teq	r2, r3
   18086:	d03f      	beq.n	18108 <__addsf3+0xd8>
   18088:	f1a2 0201 	sub.w	r2, r2, #1
   1808c:	fa41 fc03 	asr.w	ip, r1, r3
   18090:	eb10 000c 	adds.w	r0, r0, ip
   18094:	f1c3 0320 	rsb	r3, r3, #32
   18098:	fa01 f103 	lsl.w	r1, r1, r3
   1809c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   180a0:	d502      	bpl.n	180a8 <__addsf3+0x78>
   180a2:	4249      	negs	r1, r1
   180a4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   180a8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   180ac:	d313      	bcc.n	180d6 <__addsf3+0xa6>
   180ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   180b2:	d306      	bcc.n	180c2 <__addsf3+0x92>
   180b4:	0840      	lsrs	r0, r0, #1
   180b6:	ea4f 0131 	mov.w	r1, r1, rrx
   180ba:	f102 0201 	add.w	r2, r2, #1
   180be:	2afe      	cmp	r2, #254	; 0xfe
   180c0:	d251      	bcs.n	18166 <__addsf3+0x136>
   180c2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   180c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   180ca:	bf08      	it	eq
   180cc:	f020 0001 	biceq.w	r0, r0, #1
   180d0:	ea40 0003 	orr.w	r0, r0, r3
   180d4:	4770      	bx	lr
   180d6:	0049      	lsls	r1, r1, #1
   180d8:	eb40 0000 	adc.w	r0, r0, r0
   180dc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   180e0:	f1a2 0201 	sub.w	r2, r2, #1
   180e4:	d1ed      	bne.n	180c2 <__addsf3+0x92>
   180e6:	fab0 fc80 	clz	ip, r0
   180ea:	f1ac 0c08 	sub.w	ip, ip, #8
   180ee:	ebb2 020c 	subs.w	r2, r2, ip
   180f2:	fa00 f00c 	lsl.w	r0, r0, ip
   180f6:	bfaa      	itet	ge
   180f8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   180fc:	4252      	neglt	r2, r2
   180fe:	4318      	orrge	r0, r3
   18100:	bfbc      	itt	lt
   18102:	40d0      	lsrlt	r0, r2
   18104:	4318      	orrlt	r0, r3
   18106:	4770      	bx	lr
   18108:	f092 0f00 	teq	r2, #0
   1810c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   18110:	bf06      	itte	eq
   18112:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   18116:	3201      	addeq	r2, #1
   18118:	3b01      	subne	r3, #1
   1811a:	e7b5      	b.n	18088 <__addsf3+0x58>
   1811c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   18120:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18124:	bf18      	it	ne
   18126:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1812a:	d021      	beq.n	18170 <__addsf3+0x140>
   1812c:	ea92 0f03 	teq	r2, r3
   18130:	d004      	beq.n	1813c <__addsf3+0x10c>
   18132:	f092 0f00 	teq	r2, #0
   18136:	bf08      	it	eq
   18138:	4608      	moveq	r0, r1
   1813a:	4770      	bx	lr
   1813c:	ea90 0f01 	teq	r0, r1
   18140:	bf1c      	itt	ne
   18142:	2000      	movne	r0, #0
   18144:	4770      	bxne	lr
   18146:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1814a:	d104      	bne.n	18156 <__addsf3+0x126>
   1814c:	0040      	lsls	r0, r0, #1
   1814e:	bf28      	it	cs
   18150:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   18154:	4770      	bx	lr
   18156:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1815a:	bf3c      	itt	cc
   1815c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   18160:	4770      	bxcc	lr
   18162:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18166:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1816a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1816e:	4770      	bx	lr
   18170:	ea7f 6222 	mvns.w	r2, r2, asr #24
   18174:	bf16      	itet	ne
   18176:	4608      	movne	r0, r1
   18178:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   1817c:	4601      	movne	r1, r0
   1817e:	0242      	lsls	r2, r0, #9
   18180:	bf06      	itte	eq
   18182:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   18186:	ea90 0f01 	teqeq	r0, r1
   1818a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1818e:	4770      	bx	lr

00018190 <__aeabi_ui2f>:
   18190:	f04f 0300 	mov.w	r3, #0
   18194:	e004      	b.n	181a0 <__aeabi_i2f+0x8>
   18196:	bf00      	nop

00018198 <__aeabi_i2f>:
   18198:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   1819c:	bf48      	it	mi
   1819e:	4240      	negmi	r0, r0
   181a0:	ea5f 0c00 	movs.w	ip, r0
   181a4:	bf08      	it	eq
   181a6:	4770      	bxeq	lr
   181a8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   181ac:	4601      	mov	r1, r0
   181ae:	f04f 0000 	mov.w	r0, #0
   181b2:	e01c      	b.n	181ee <__aeabi_l2f+0x2a>

000181b4 <__aeabi_ul2f>:
   181b4:	ea50 0201 	orrs.w	r2, r0, r1
   181b8:	bf08      	it	eq
   181ba:	4770      	bxeq	lr
   181bc:	f04f 0300 	mov.w	r3, #0
   181c0:	e00a      	b.n	181d8 <__aeabi_l2f+0x14>
   181c2:	bf00      	nop

000181c4 <__aeabi_l2f>:
   181c4:	ea50 0201 	orrs.w	r2, r0, r1
   181c8:	bf08      	it	eq
   181ca:	4770      	bxeq	lr
   181cc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   181d0:	d502      	bpl.n	181d8 <__aeabi_l2f+0x14>
   181d2:	4240      	negs	r0, r0
   181d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   181d8:	ea5f 0c01 	movs.w	ip, r1
   181dc:	bf02      	ittt	eq
   181de:	4684      	moveq	ip, r0
   181e0:	4601      	moveq	r1, r0
   181e2:	2000      	moveq	r0, #0
   181e4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   181e8:	bf08      	it	eq
   181ea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   181ee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   181f2:	fabc f28c 	clz	r2, ip
   181f6:	3a08      	subs	r2, #8
   181f8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   181fc:	db10      	blt.n	18220 <__aeabi_l2f+0x5c>
   181fe:	fa01 fc02 	lsl.w	ip, r1, r2
   18202:	4463      	add	r3, ip
   18204:	fa00 fc02 	lsl.w	ip, r0, r2
   18208:	f1c2 0220 	rsb	r2, r2, #32
   1820c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   18210:	fa20 f202 	lsr.w	r2, r0, r2
   18214:	eb43 0002 	adc.w	r0, r3, r2
   18218:	bf08      	it	eq
   1821a:	f020 0001 	biceq.w	r0, r0, #1
   1821e:	4770      	bx	lr
   18220:	f102 0220 	add.w	r2, r2, #32
   18224:	fa01 fc02 	lsl.w	ip, r1, r2
   18228:	f1c2 0220 	rsb	r2, r2, #32
   1822c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   18230:	fa21 f202 	lsr.w	r2, r1, r2
   18234:	eb43 0002 	adc.w	r0, r3, r2
   18238:	bf08      	it	eq
   1823a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1823e:	4770      	bx	lr

00018240 <__aeabi_fmul>:
   18240:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18244:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   18248:	bf1e      	ittt	ne
   1824a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1824e:	ea92 0f0c 	teqne	r2, ip
   18252:	ea93 0f0c 	teqne	r3, ip
   18256:	d06f      	beq.n	18338 <__aeabi_fmul+0xf8>
   18258:	441a      	add	r2, r3
   1825a:	ea80 0c01 	eor.w	ip, r0, r1
   1825e:	0240      	lsls	r0, r0, #9
   18260:	bf18      	it	ne
   18262:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   18266:	d01e      	beq.n	182a6 <__aeabi_fmul+0x66>
   18268:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1826c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   18270:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   18274:	fba0 3101 	umull	r3, r1, r0, r1
   18278:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1827c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   18280:	bf3e      	ittt	cc
   18282:	0049      	lslcc	r1, r1, #1
   18284:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   18288:	005b      	lslcc	r3, r3, #1
   1828a:	ea40 0001 	orr.w	r0, r0, r1
   1828e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   18292:	2afd      	cmp	r2, #253	; 0xfd
   18294:	d81d      	bhi.n	182d2 <__aeabi_fmul+0x92>
   18296:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1829a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1829e:	bf08      	it	eq
   182a0:	f020 0001 	biceq.w	r0, r0, #1
   182a4:	4770      	bx	lr
   182a6:	f090 0f00 	teq	r0, #0
   182aa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   182ae:	bf08      	it	eq
   182b0:	0249      	lsleq	r1, r1, #9
   182b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   182b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   182ba:	3a7f      	subs	r2, #127	; 0x7f
   182bc:	bfc2      	ittt	gt
   182be:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   182c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   182c6:	4770      	bxgt	lr
   182c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   182cc:	f04f 0300 	mov.w	r3, #0
   182d0:	3a01      	subs	r2, #1
   182d2:	dc5d      	bgt.n	18390 <__aeabi_fmul+0x150>
   182d4:	f112 0f19 	cmn.w	r2, #25
   182d8:	bfdc      	itt	le
   182da:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   182de:	4770      	bxle	lr
   182e0:	f1c2 0200 	rsb	r2, r2, #0
   182e4:	0041      	lsls	r1, r0, #1
   182e6:	fa21 f102 	lsr.w	r1, r1, r2
   182ea:	f1c2 0220 	rsb	r2, r2, #32
   182ee:	fa00 fc02 	lsl.w	ip, r0, r2
   182f2:	ea5f 0031 	movs.w	r0, r1, rrx
   182f6:	f140 0000 	adc.w	r0, r0, #0
   182fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   182fe:	bf08      	it	eq
   18300:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   18304:	4770      	bx	lr
   18306:	f092 0f00 	teq	r2, #0
   1830a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1830e:	bf02      	ittt	eq
   18310:	0040      	lsleq	r0, r0, #1
   18312:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   18316:	3a01      	subeq	r2, #1
   18318:	d0f9      	beq.n	1830e <__aeabi_fmul+0xce>
   1831a:	ea40 000c 	orr.w	r0, r0, ip
   1831e:	f093 0f00 	teq	r3, #0
   18322:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18326:	bf02      	ittt	eq
   18328:	0049      	lsleq	r1, r1, #1
   1832a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1832e:	3b01      	subeq	r3, #1
   18330:	d0f9      	beq.n	18326 <__aeabi_fmul+0xe6>
   18332:	ea41 010c 	orr.w	r1, r1, ip
   18336:	e78f      	b.n	18258 <__aeabi_fmul+0x18>
   18338:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1833c:	ea92 0f0c 	teq	r2, ip
   18340:	bf18      	it	ne
   18342:	ea93 0f0c 	teqne	r3, ip
   18346:	d00a      	beq.n	1835e <__aeabi_fmul+0x11e>
   18348:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1834c:	bf18      	it	ne
   1834e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   18352:	d1d8      	bne.n	18306 <__aeabi_fmul+0xc6>
   18354:	ea80 0001 	eor.w	r0, r0, r1
   18358:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1835c:	4770      	bx	lr
   1835e:	f090 0f00 	teq	r0, #0
   18362:	bf17      	itett	ne
   18364:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   18368:	4608      	moveq	r0, r1
   1836a:	f091 0f00 	teqne	r1, #0
   1836e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   18372:	d014      	beq.n	1839e <__aeabi_fmul+0x15e>
   18374:	ea92 0f0c 	teq	r2, ip
   18378:	d101      	bne.n	1837e <__aeabi_fmul+0x13e>
   1837a:	0242      	lsls	r2, r0, #9
   1837c:	d10f      	bne.n	1839e <__aeabi_fmul+0x15e>
   1837e:	ea93 0f0c 	teq	r3, ip
   18382:	d103      	bne.n	1838c <__aeabi_fmul+0x14c>
   18384:	024b      	lsls	r3, r1, #9
   18386:	bf18      	it	ne
   18388:	4608      	movne	r0, r1
   1838a:	d108      	bne.n	1839e <__aeabi_fmul+0x15e>
   1838c:	ea80 0001 	eor.w	r0, r0, r1
   18390:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   18394:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18398:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1839c:	4770      	bx	lr
   1839e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   183a2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   183a6:	4770      	bx	lr

000183a8 <__aeabi_fdiv>:
   183a8:	f04f 0cff 	mov.w	ip, #255	; 0xff
   183ac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   183b0:	bf1e      	ittt	ne
   183b2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   183b6:	ea92 0f0c 	teqne	r2, ip
   183ba:	ea93 0f0c 	teqne	r3, ip
   183be:	d069      	beq.n	18494 <__aeabi_fdiv+0xec>
   183c0:	eba2 0203 	sub.w	r2, r2, r3
   183c4:	ea80 0c01 	eor.w	ip, r0, r1
   183c8:	0249      	lsls	r1, r1, #9
   183ca:	ea4f 2040 	mov.w	r0, r0, lsl #9
   183ce:	d037      	beq.n	18440 <__aeabi_fdiv+0x98>
   183d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   183d4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   183d8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   183dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   183e0:	428b      	cmp	r3, r1
   183e2:	bf38      	it	cc
   183e4:	005b      	lslcc	r3, r3, #1
   183e6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   183ea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   183ee:	428b      	cmp	r3, r1
   183f0:	bf24      	itt	cs
   183f2:	1a5b      	subcs	r3, r3, r1
   183f4:	ea40 000c 	orrcs.w	r0, r0, ip
   183f8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   183fc:	bf24      	itt	cs
   183fe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   18402:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   18406:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   1840a:	bf24      	itt	cs
   1840c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   18410:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   18414:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   18418:	bf24      	itt	cs
   1841a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   1841e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   18422:	011b      	lsls	r3, r3, #4
   18424:	bf18      	it	ne
   18426:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   1842a:	d1e0      	bne.n	183ee <__aeabi_fdiv+0x46>
   1842c:	2afd      	cmp	r2, #253	; 0xfd
   1842e:	f63f af50 	bhi.w	182d2 <__aeabi_fmul+0x92>
   18432:	428b      	cmp	r3, r1
   18434:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18438:	bf08      	it	eq
   1843a:	f020 0001 	biceq.w	r0, r0, #1
   1843e:	4770      	bx	lr
   18440:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   18444:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   18448:	327f      	adds	r2, #127	; 0x7f
   1844a:	bfc2      	ittt	gt
   1844c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   18450:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   18454:	4770      	bxgt	lr
   18456:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1845a:	f04f 0300 	mov.w	r3, #0
   1845e:	3a01      	subs	r2, #1
   18460:	e737      	b.n	182d2 <__aeabi_fmul+0x92>
   18462:	f092 0f00 	teq	r2, #0
   18466:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1846a:	bf02      	ittt	eq
   1846c:	0040      	lsleq	r0, r0, #1
   1846e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   18472:	3a01      	subeq	r2, #1
   18474:	d0f9      	beq.n	1846a <__aeabi_fdiv+0xc2>
   18476:	ea40 000c 	orr.w	r0, r0, ip
   1847a:	f093 0f00 	teq	r3, #0
   1847e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18482:	bf02      	ittt	eq
   18484:	0049      	lsleq	r1, r1, #1
   18486:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1848a:	3b01      	subeq	r3, #1
   1848c:	d0f9      	beq.n	18482 <__aeabi_fdiv+0xda>
   1848e:	ea41 010c 	orr.w	r1, r1, ip
   18492:	e795      	b.n	183c0 <__aeabi_fdiv+0x18>
   18494:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   18498:	ea92 0f0c 	teq	r2, ip
   1849c:	d108      	bne.n	184b0 <__aeabi_fdiv+0x108>
   1849e:	0242      	lsls	r2, r0, #9
   184a0:	f47f af7d 	bne.w	1839e <__aeabi_fmul+0x15e>
   184a4:	ea93 0f0c 	teq	r3, ip
   184a8:	f47f af70 	bne.w	1838c <__aeabi_fmul+0x14c>
   184ac:	4608      	mov	r0, r1
   184ae:	e776      	b.n	1839e <__aeabi_fmul+0x15e>
   184b0:	ea93 0f0c 	teq	r3, ip
   184b4:	d104      	bne.n	184c0 <__aeabi_fdiv+0x118>
   184b6:	024b      	lsls	r3, r1, #9
   184b8:	f43f af4c 	beq.w	18354 <__aeabi_fmul+0x114>
   184bc:	4608      	mov	r0, r1
   184be:	e76e      	b.n	1839e <__aeabi_fmul+0x15e>
   184c0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   184c4:	bf18      	it	ne
   184c6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   184ca:	d1ca      	bne.n	18462 <__aeabi_fdiv+0xba>
   184cc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   184d0:	f47f af5c 	bne.w	1838c <__aeabi_fmul+0x14c>
   184d4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   184d8:	f47f af3c 	bne.w	18354 <__aeabi_fmul+0x114>
   184dc:	e75f      	b.n	1839e <__aeabi_fmul+0x15e>
   184de:	bf00      	nop

000184e0 <__gesf2>:
   184e0:	f04f 3cff 	mov.w	ip, #4294967295
   184e4:	e006      	b.n	184f4 <__cmpsf2+0x4>
   184e6:	bf00      	nop

000184e8 <__lesf2>:
   184e8:	f04f 0c01 	mov.w	ip, #1
   184ec:	e002      	b.n	184f4 <__cmpsf2+0x4>
   184ee:	bf00      	nop

000184f0 <__cmpsf2>:
   184f0:	f04f 0c01 	mov.w	ip, #1
   184f4:	f84d cd04 	str.w	ip, [sp, #-4]!
   184f8:	ea4f 0240 	mov.w	r2, r0, lsl #1
   184fc:	ea4f 0341 	mov.w	r3, r1, lsl #1
   18500:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18504:	bf18      	it	ne
   18506:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1850a:	d011      	beq.n	18530 <__cmpsf2+0x40>
   1850c:	b001      	add	sp, #4
   1850e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   18512:	bf18      	it	ne
   18514:	ea90 0f01 	teqne	r0, r1
   18518:	bf58      	it	pl
   1851a:	ebb2 0003 	subspl.w	r0, r2, r3
   1851e:	bf88      	it	hi
   18520:	17c8      	asrhi	r0, r1, #31
   18522:	bf38      	it	cc
   18524:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   18528:	bf18      	it	ne
   1852a:	f040 0001 	orrne.w	r0, r0, #1
   1852e:	4770      	bx	lr
   18530:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18534:	d102      	bne.n	1853c <__cmpsf2+0x4c>
   18536:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   1853a:	d105      	bne.n	18548 <__cmpsf2+0x58>
   1853c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   18540:	d1e4      	bne.n	1850c <__cmpsf2+0x1c>
   18542:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   18546:	d0e1      	beq.n	1850c <__cmpsf2+0x1c>
   18548:	f85d 0b04 	ldr.w	r0, [sp], #4
   1854c:	4770      	bx	lr
   1854e:	bf00      	nop

00018550 <__aeabi_cfrcmple>:
   18550:	4684      	mov	ip, r0
   18552:	4608      	mov	r0, r1
   18554:	4661      	mov	r1, ip
   18556:	e7ff      	b.n	18558 <__aeabi_cfcmpeq>

00018558 <__aeabi_cfcmpeq>:
   18558:	b50f      	push	{r0, r1, r2, r3, lr}
   1855a:	f7ff ffc9 	bl	184f0 <__cmpsf2>
   1855e:	2800      	cmp	r0, #0
   18560:	bf48      	it	mi
   18562:	f110 0f00 	cmnmi.w	r0, #0
   18566:	bd0f      	pop	{r0, r1, r2, r3, pc}

00018568 <__aeabi_fcmpeq>:
   18568:	f84d ed08 	str.w	lr, [sp, #-8]!
   1856c:	f7ff fff4 	bl	18558 <__aeabi_cfcmpeq>
   18570:	bf0c      	ite	eq
   18572:	2001      	moveq	r0, #1
   18574:	2000      	movne	r0, #0
   18576:	f85d fb08 	ldr.w	pc, [sp], #8
   1857a:	bf00      	nop

0001857c <__aeabi_fcmplt>:
   1857c:	f84d ed08 	str.w	lr, [sp, #-8]!
   18580:	f7ff ffea 	bl	18558 <__aeabi_cfcmpeq>
   18584:	bf34      	ite	cc
   18586:	2001      	movcc	r0, #1
   18588:	2000      	movcs	r0, #0
   1858a:	f85d fb08 	ldr.w	pc, [sp], #8
   1858e:	bf00      	nop

00018590 <__aeabi_fcmple>:
   18590:	f84d ed08 	str.w	lr, [sp, #-8]!
   18594:	f7ff ffe0 	bl	18558 <__aeabi_cfcmpeq>
   18598:	bf94      	ite	ls
   1859a:	2001      	movls	r0, #1
   1859c:	2000      	movhi	r0, #0
   1859e:	f85d fb08 	ldr.w	pc, [sp], #8
   185a2:	bf00      	nop

000185a4 <__aeabi_fcmpge>:
   185a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   185a8:	f7ff ffd2 	bl	18550 <__aeabi_cfrcmple>
   185ac:	bf94      	ite	ls
   185ae:	2001      	movls	r0, #1
   185b0:	2000      	movhi	r0, #0
   185b2:	f85d fb08 	ldr.w	pc, [sp], #8
   185b6:	bf00      	nop

000185b8 <__aeabi_fcmpgt>:
   185b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   185bc:	f7ff ffc8 	bl	18550 <__aeabi_cfrcmple>
   185c0:	bf34      	ite	cc
   185c2:	2001      	movcc	r0, #1
   185c4:	2000      	movcs	r0, #0
   185c6:	f85d fb08 	ldr.w	pc, [sp], #8
   185ca:	bf00      	nop

000185cc <__aeabi_f2iz>:
   185cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
   185d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   185d4:	d30f      	bcc.n	185f6 <__aeabi_f2iz+0x2a>
   185d6:	f04f 039e 	mov.w	r3, #158	; 0x9e
   185da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   185de:	d90d      	bls.n	185fc <__aeabi_f2iz+0x30>
   185e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
   185e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   185e8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   185ec:	fa23 f002 	lsr.w	r0, r3, r2
   185f0:	bf18      	it	ne
   185f2:	4240      	negne	r0, r0
   185f4:	4770      	bx	lr
   185f6:	f04f 0000 	mov.w	r0, #0
   185fa:	4770      	bx	lr
   185fc:	f112 0f61 	cmn.w	r2, #97	; 0x61
   18600:	d101      	bne.n	18606 <__aeabi_f2iz+0x3a>
   18602:	0242      	lsls	r2, r0, #9
   18604:	d105      	bne.n	18612 <__aeabi_f2iz+0x46>
   18606:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   1860a:	bf08      	it	eq
   1860c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   18610:	4770      	bx	lr
   18612:	f04f 0000 	mov.w	r0, #0
   18616:	4770      	bx	lr

00018618 <memcpy>:
   18618:	2a0f      	cmp	r2, #15
   1861a:	b4f0      	push	{r4, r5, r6, r7}
   1861c:	d945      	bls.n	186aa <memcpy+0x92>
   1861e:	ea40 0301 	orr.w	r3, r0, r1
   18622:	079b      	lsls	r3, r3, #30
   18624:	d145      	bne.n	186b2 <memcpy+0x9a>
   18626:	f1a2 0710 	sub.w	r7, r2, #16
   1862a:	460c      	mov	r4, r1
   1862c:	4603      	mov	r3, r0
   1862e:	093f      	lsrs	r7, r7, #4
   18630:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   18634:	3610      	adds	r6, #16
   18636:	6825      	ldr	r5, [r4, #0]
   18638:	3310      	adds	r3, #16
   1863a:	3410      	adds	r4, #16
   1863c:	f843 5c10 	str.w	r5, [r3, #-16]
   18640:	f854 5c0c 	ldr.w	r5, [r4, #-12]
   18644:	f843 5c0c 	str.w	r5, [r3, #-12]
   18648:	f854 5c08 	ldr.w	r5, [r4, #-8]
   1864c:	f843 5c08 	str.w	r5, [r3, #-8]
   18650:	f854 5c04 	ldr.w	r5, [r4, #-4]
   18654:	f843 5c04 	str.w	r5, [r3, #-4]
   18658:	42b3      	cmp	r3, r6
   1865a:	d1ec      	bne.n	18636 <memcpy+0x1e>
   1865c:	1c7b      	adds	r3, r7, #1
   1865e:	f002 0c0f 	and.w	ip, r2, #15
   18662:	f1bc 0f03 	cmp.w	ip, #3
   18666:	ea4f 1303 	mov.w	r3, r3, lsl #4
   1866a:	4419      	add	r1, r3
   1866c:	4403      	add	r3, r0
   1866e:	d922      	bls.n	186b6 <memcpy+0x9e>
   18670:	460e      	mov	r6, r1
   18672:	461d      	mov	r5, r3
   18674:	4664      	mov	r4, ip
   18676:	f856 7b04 	ldr.w	r7, [r6], #4
   1867a:	3c04      	subs	r4, #4
   1867c:	2c03      	cmp	r4, #3
   1867e:	f845 7b04 	str.w	r7, [r5], #4
   18682:	d8f8      	bhi.n	18676 <memcpy+0x5e>
   18684:	f1ac 0404 	sub.w	r4, ip, #4
   18688:	f002 0203 	and.w	r2, r2, #3
   1868c:	f024 0403 	bic.w	r4, r4, #3
   18690:	3404      	adds	r4, #4
   18692:	4423      	add	r3, r4
   18694:	4421      	add	r1, r4
   18696:	b132      	cbz	r2, 186a6 <memcpy+0x8e>
   18698:	440a      	add	r2, r1
   1869a:	f811 4b01 	ldrb.w	r4, [r1], #1
   1869e:	4291      	cmp	r1, r2
   186a0:	f803 4b01 	strb.w	r4, [r3], #1
   186a4:	d1f9      	bne.n	1869a <memcpy+0x82>
   186a6:	bcf0      	pop	{r4, r5, r6, r7}
   186a8:	4770      	bx	lr
   186aa:	4603      	mov	r3, r0
   186ac:	2a00      	cmp	r2, #0
   186ae:	d1f3      	bne.n	18698 <memcpy+0x80>
   186b0:	e7f9      	b.n	186a6 <memcpy+0x8e>
   186b2:	4603      	mov	r3, r0
   186b4:	e7f0      	b.n	18698 <memcpy+0x80>
   186b6:	4662      	mov	r2, ip
   186b8:	2a00      	cmp	r2, #0
   186ba:	d1ed      	bne.n	18698 <memcpy+0x80>
   186bc:	e7f3      	b.n	186a6 <memcpy+0x8e>
   186be:	bf00      	nop

000186c0 <memset>:
   186c0:	0783      	lsls	r3, r0, #30
   186c2:	b4f0      	push	{r4, r5, r6, r7}
   186c4:	d048      	beq.n	18758 <memset+0x98>
   186c6:	1e54      	subs	r4, r2, #1
   186c8:	2a00      	cmp	r2, #0
   186ca:	d043      	beq.n	18754 <memset+0x94>
   186cc:	b2cd      	uxtb	r5, r1
   186ce:	4603      	mov	r3, r0
   186d0:	e002      	b.n	186d8 <memset+0x18>
   186d2:	2c00      	cmp	r4, #0
   186d4:	d03e      	beq.n	18754 <memset+0x94>
   186d6:	4614      	mov	r4, r2
   186d8:	f803 5b01 	strb.w	r5, [r3], #1
   186dc:	f013 0f03 	tst.w	r3, #3
   186e0:	f104 32ff 	add.w	r2, r4, #4294967295
   186e4:	d1f5      	bne.n	186d2 <memset+0x12>
   186e6:	2c03      	cmp	r4, #3
   186e8:	d92d      	bls.n	18746 <memset+0x86>
   186ea:	b2cd      	uxtb	r5, r1
   186ec:	2c0f      	cmp	r4, #15
   186ee:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   186f2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   186f6:	d918      	bls.n	1872a <memset+0x6a>
   186f8:	f1a4 0710 	sub.w	r7, r4, #16
   186fc:	f103 0610 	add.w	r6, r3, #16
   18700:	461a      	mov	r2, r3
   18702:	093f      	lsrs	r7, r7, #4
   18704:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   18708:	6015      	str	r5, [r2, #0]
   1870a:	3210      	adds	r2, #16
   1870c:	f842 5c0c 	str.w	r5, [r2, #-12]
   18710:	f842 5c08 	str.w	r5, [r2, #-8]
   18714:	f842 5c04 	str.w	r5, [r2, #-4]
   18718:	42b2      	cmp	r2, r6
   1871a:	d1f5      	bne.n	18708 <memset+0x48>
   1871c:	f004 040f 	and.w	r4, r4, #15
   18720:	3701      	adds	r7, #1
   18722:	2c03      	cmp	r4, #3
   18724:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   18728:	d90d      	bls.n	18746 <memset+0x86>
   1872a:	461e      	mov	r6, r3
   1872c:	4622      	mov	r2, r4
   1872e:	3a04      	subs	r2, #4
   18730:	f846 5b04 	str.w	r5, [r6], #4
   18734:	2a03      	cmp	r2, #3
   18736:	d8fa      	bhi.n	1872e <memset+0x6e>
   18738:	1f22      	subs	r2, r4, #4
   1873a:	f004 0403 	and.w	r4, r4, #3
   1873e:	f022 0203 	bic.w	r2, r2, #3
   18742:	3204      	adds	r2, #4
   18744:	4413      	add	r3, r2
   18746:	b12c      	cbz	r4, 18754 <memset+0x94>
   18748:	b2c9      	uxtb	r1, r1
   1874a:	441c      	add	r4, r3
   1874c:	f803 1b01 	strb.w	r1, [r3], #1
   18750:	42a3      	cmp	r3, r4
   18752:	d1fb      	bne.n	1874c <memset+0x8c>
   18754:	bcf0      	pop	{r4, r5, r6, r7}
   18756:	4770      	bx	lr
   18758:	4614      	mov	r4, r2
   1875a:	4603      	mov	r3, r0
   1875c:	e7c3      	b.n	186e6 <memset+0x26>
   1875e:	bf00      	nop

00018760 <strncpy>:
   18760:	ea40 0301 	orr.w	r3, r0, r1
   18764:	079b      	lsls	r3, r3, #30
   18766:	b470      	push	{r4, r5, r6}
   18768:	d12b      	bne.n	187c2 <strncpy+0x62>
   1876a:	2a03      	cmp	r2, #3
   1876c:	bf84      	itt	hi
   1876e:	460b      	movhi	r3, r1
   18770:	4605      	movhi	r5, r0
   18772:	d926      	bls.n	187c2 <strncpy+0x62>
   18774:	4619      	mov	r1, r3
   18776:	f853 4b04 	ldr.w	r4, [r3], #4
   1877a:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
   1877e:	ea26 0604 	bic.w	r6, r6, r4
   18782:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   18786:	d105      	bne.n	18794 <strncpy+0x34>
   18788:	3a04      	subs	r2, #4
   1878a:	f845 4b04 	str.w	r4, [r5], #4
   1878e:	2a03      	cmp	r2, #3
   18790:	4619      	mov	r1, r3
   18792:	d8ef      	bhi.n	18774 <strncpy+0x14>
   18794:	b19a      	cbz	r2, 187be <strncpy+0x5e>
   18796:	780c      	ldrb	r4, [r1, #0]
   18798:	3a01      	subs	r2, #1
   1879a:	1c6b      	adds	r3, r5, #1
   1879c:	702c      	strb	r4, [r5, #0]
   1879e:	b13c      	cbz	r4, 187b0 <strncpy+0x50>
   187a0:	b16a      	cbz	r2, 187be <strncpy+0x5e>
   187a2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   187a6:	3a01      	subs	r2, #1
   187a8:	f803 4b01 	strb.w	r4, [r3], #1
   187ac:	2c00      	cmp	r4, #0
   187ae:	d1f7      	bne.n	187a0 <strncpy+0x40>
   187b0:	b12a      	cbz	r2, 187be <strncpy+0x5e>
   187b2:	441a      	add	r2, r3
   187b4:	2100      	movs	r1, #0
   187b6:	f803 1b01 	strb.w	r1, [r3], #1
   187ba:	4293      	cmp	r3, r2
   187bc:	d1fb      	bne.n	187b6 <strncpy+0x56>
   187be:	bc70      	pop	{r4, r5, r6}
   187c0:	4770      	bx	lr
   187c2:	4605      	mov	r5, r0
   187c4:	e7e6      	b.n	18794 <strncpy+0x34>
   187c6:	bf00      	nop

000187c8 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
   187c8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
   187ca:	e003      	b.n	187d4 <LoopCopyDataInit>

000187cc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
   187cc:	4b0a      	ldr	r3, [pc, #40]	; (187f8 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
   187ce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
   187d0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
   187d2:	3104      	adds	r1, #4

000187d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   187d4:	4809      	ldr	r0, [pc, #36]	; (187fc <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
   187d6:	4b0a      	ldr	r3, [pc, #40]	; (18800 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
   187d8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
   187da:	429a      	cmp	r2, r3
	bcc	CopyDataInit
   187dc:	d3f6      	bcc.n	187cc <CopyDataInit>
	ldr	r2, =_sbss
   187de:	4a09      	ldr	r2, [pc, #36]	; (18804 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
   187e0:	e002      	b.n	187e8 <LoopFillZerobss>

000187e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
   187e2:	2300      	movs	r3, #0
	str	r3, [r2], #4
   187e4:	f842 3b04 	str.w	r3, [r2], #4

000187e8 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
   187e8:	4b07      	ldr	r3, [pc, #28]	; (18808 <LoopFillZerobss+0x20>)
	cmp	r2, r3
   187ea:	429a      	cmp	r2, r3
	bcc	FillZerobss
   187ec:	d3f9      	bcc.n	187e2 <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
   187ee:	f7e7 fda5 	bl	33c <SystemInit>
/* Call the application's entry point.*/
	bl	main
   187f2:	f7fe fc01 	bl	16ff8 <main>
	bx	lr    
   187f6:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
   187f8:	00018a54 	.word	0x00018a54
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   187fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
   18800:	20000320 	.word	0x20000320
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
   18804:	20000320 	.word	0x20000320
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
   18808:	2000b32c 	.word	0x2000b32c

0001880c <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
   1880c:	e7fe      	b.n	1880c <ADC1_2_IRQHandler>
   1880e:	0000      	movs	r0, r0
   18810:	6c6c616d 	.word	0x6c6c616d
   18814:	6620636f 	.word	0x6620636f
   18818:	6520726f 	.word	0x6520726f
   1881c:	746e6576 	.word	0x746e6576
   18820:	61747320 	.word	0x61747320
   18824:	66206b63 	.word	0x66206b63
   18828:	656c6961 	.word	0x656c6961
   1882c:	000d0a64 	.word	0x000d0a64
   18830:	72656874 	.word	0x72656874
   18834:	72612065 	.word	0x72612065
   18838:	65732065 	.word	0x65732065
   1883c:	726f736e 	.word	0x726f736e
   18840:	73696d20 	.word	0x73696d20
   18844:	676e6973 	.word	0x676e6973
   18848:	61656420 	.word	0x61656420
   1884c:	6e696c64 	.word	0x6e696c64
   18850:	000d0a65 	.word	0x000d0a65
   18854:	72656874 	.word	0x72656874
   18858:	72612065 	.word	0x72612065
   1885c:	65732065 	.word	0x65732065
   18860:	6e617672 	.word	0x6e617672
   18864:	6d207374 	.word	0x6d207374
   18868:	69737369 	.word	0x69737369
   1886c:	6420676e 	.word	0x6420676e
   18870:	6c646165 	.word	0x6c646165
   18874:	0a656e69 	.word	0x0a656e69
   18878:	0000000d 	.word	0x0000000d
   1887c:	6f727245 	.word	0x6f727245
   18880:	54203a72 	.word	0x54203a72
   18884:	20736968 	.word	0x20736968
   18888:	6e657665 	.word	0x6e657665
   1888c:	61682074 	.word	0x61682074
   18890:	72612073 	.word	0x72612073
   18894:	65766972 	.word	0x65766972
   18898:	0a212164 	.word	0x0a212164
   1889c:	0000000d 	.word	0x0000000d
   188a0:	454c4449 	.word	0x454c4449
   188a4:	00000000 	.word	0x00000000

000188a8 <ulKernelPriority>:
   188a8:	0000007f                                ....

000188ac <heapSTRUCT_SIZE>:
   188ac:	00010010                                         ..

000188ae <version>:
   188ae:	3d5a0001                                         ..

000188b0 <utm_east0>:
   188b0:	00093d5a                                Z=..

000188b4 <utm_north0>:
   188b4:	005875e6                                .uX.

000188b8 <climb_pgain>:
   188b8:	bcf5c28f                                ....

000188bc <climb_igain>:
   188bc:	3dcccccd                                ...=

000188c0 <level_gaz>:
   188c0:	3e9eb852                                R..>

000188c4 <nav_east0>:
   188c4:	00093d5a                                Z=..

000188c8 <nav_north0>:
   188c8:	005875e6                                .uX.

000188cc <nb_waypoint>:
   188cc:	00000007 33323130 37363534 42413938     ....0123456789AB
   188dc:	46454443                                CDEF

000188e0 <failsafe>:
	...
   188f4:	20574246 746f6f42 20676e69 3a644924     FBW Booting $Id:
   18904:	69616d20 2c632e6e 2e312076 30322033      main.c,v 1.3 20
   18914:	312f3830 32322f30 3a393120 313a3134     08/10/22 19:41:1
   18924:	61632039 20657373 20707845 000d0a24     9 casse Exp $...
   18934:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   18944:	000d0a30 00000d0a 65532d52 6e617672     0.......R-Servan
   18954:	00000074 736e6553 3020726f 00000000     t...Sensor 0....
   18964:	76726553 20746e61 00000031 736e6553     Servant 1...Sens
   18974:	3220726f 00000000 76726553 20746e61     or 2....Servant 
   18984:	00000033 736e6553 3720726f 00000000     3...Sensor 7....
   18994:	76726553 20746e61 00000038 736e6553     Servant 8...Sens
   189a4:	3420726f 00000000 736e6553 3520726f     or 4....Sensor 5
   189b4:	00000000 736e6553 3620726f 00000000     ....Sensor 6....
   189c4:	736e6553 3920726f 00000000 76726553     Sensor 9....Serv
   189d4:	20746e61 00003031 76726553 20746e61     ant 10..Servant 
   189e4:	00003131 736e6553 3120726f 00000032     11..Sensor 12...
   189f4:	736e6553 3220726f 00000030 736e6553     Sensor 20...Sens
   18a04:	3120726f 00000033 76726553 20746e61     or 13...Servant 
   18a14:	00003431 736e6553 3120726f 00000035     14..Sensor 15...
   18a24:	76726553 20746e61 00003631 76726553     Servant 16..Serv
   18a34:	20746e61 00003731 736e6553 3120726f     ant 17..Sensor 1
   18a44:	00000038 736e6553 3120726f 00000039     8...Sensor 19...
