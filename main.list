
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 50 05 20 39 8a 01 00 7d 8a 01 00 7d 8a 01 00     .P. 9...}...}...
      10:	7d 8a 01 00 7d 8a 01 00 7d 8a 01 00 00 00 00 00     }...}...}.......
	...
      2c:	95 5c 00 00 7d 8a 01 00 00 00 00 00 a1 5d 00 00     .\..}........]..
      3c:	dd 5d 00 00 7d 8a 01 00 7d 8a 01 00 7d 8a 01 00     .]..}...}...}...
      4c:	7d 8a 01 00 7d 8a 01 00 7d 8a 01 00 7d 8a 01 00     }...}...}...}...
      5c:	7d 8a 01 00 7d 8a 01 00 7d 8a 01 00 7d 8a 01 00     }...}...}...}...
      6c:	7d 8a 01 00 7d 8a 01 00 7d 8a 01 00 7d 8a 01 00     }...}...}...}...
      7c:	7d 8a 01 00 7d 8a 01 00 7d 8a 01 00 7d 8a 01 00     }...}...}...}...
      8c:	7d 8a 01 00 7d 8a 01 00 7d 8a 01 00 7d 8a 01 00     }...}...}...}...
      9c:	7d 8a 01 00 7d 8a 01 00 7d 8a 01 00 7d 8a 01 00     }...}...}...}...
      ac:	7d 8a 01 00 7d 8a 01 00 7d 8a 01 00 7d 8a 01 00     }...}...}...}...
      bc:	7d 8a 01 00 7d 8a 01 00 7d 8a 01 00 7d 8a 01 00     }...}...}...}...
      cc:	7d 8a 01 00 7d 8a 01 00 7d 8a 01 00 7d 8a 01 00     }...}...}...}...
      dc:	7d 8a 01 00 7d 8a 01 00 7d 8a 01 00 7d 8a 01 00     }...}...}...}...
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
     31c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     31e:	2300      	movs	r3, #0
     320:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     322:	683b      	ldr	r3, [r7, #0]
     324:	687a      	ldr	r2, [r7, #4]
     326:	e843 2300 	strex	r3, r2, [r3]
     32a:	60fb      	str	r3, [r7, #12]
   return(result);
     32c:	68fb      	ldr	r3, [r7, #12]
}
     32e:	4618      	mov	r0, r3
     330:	3714      	adds	r7, #20
     332:	46bd      	mov	sp, r7
     334:	f85d 7b04 	ldr.w	r7, [sp], #4
     338:	4770      	bx	lr
     33a:	bf00      	nop

0000033c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     344:	f2c4 0302 	movt	r3, #16386	; 0x4002
     348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     350:	6812      	ldr	r2, [r2, #0]
     352:	f042 0201 	orr.w	r2, r2, #1
     356:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     35c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     364:	f2c4 0302 	movt	r3, #16386	; 0x4002
     368:	6859      	ldr	r1, [r3, #4]
     36a:	2300      	movs	r3, #0
     36c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     370:	400b      	ands	r3, r1
     372:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     378:	f2c4 0302 	movt	r3, #16386	; 0x4002
     37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     380:	f2c4 0202 	movt	r2, #16386	; 0x4002
     384:	6812      	ldr	r2, [r2, #0]
     386:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     38a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     38e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b8:	6852      	ldr	r2, [r2, #4]
     3ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3cc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ce:	f000 f8a7 	bl	520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     3d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3de:	609a      	str	r2, [r3, #8]
#endif
}
     3e0:	bd80      	pop	{r7, pc}
     3e2:	bf00      	nop

000003e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3e4:	b480      	push	{r7}
     3e6:	b085      	sub	sp, #20
     3e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	60fb      	str	r3, [r7, #12]
     3ee:	2300      	movs	r3, #0
     3f0:	60bb      	str	r3, [r7, #8]
     3f2:	2300      	movs	r3, #0
     3f4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3fe:	685b      	ldr	r3, [r3, #4]
     400:	f003 030c 	and.w	r3, r3, #12
     404:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b04      	cmp	r3, #4
     40a:	d00d      	beq.n	428 <SystemCoreClockUpdate+0x44>
     40c:	2b08      	cmp	r3, #8
     40e:	d015      	beq.n	43c <SystemCoreClockUpdate+0x58>
     410:	2b00      	cmp	r3, #0
     412:	d15b      	bne.n	4cc <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     414:	f240 0300 	movw	r3, #0
     418:	f2c2 0300 	movt	r3, #8192	; 0x2000
     41c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     420:	f2c0 027a 	movt	r2, #122	; 0x7a
     424:	601a      	str	r2, [r3, #0]
      break;
     426:	e05b      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     428:	f240 0300 	movw	r3, #0
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     434:	f2c0 027a 	movt	r2, #122	; 0x7a
     438:	601a      	str	r2, [r3, #0]
      break;
     43a:	e051      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     440:	f2c4 0302 	movt	r3, #16386	; 0x4002
     444:	685b      	ldr	r3, [r3, #4]
     446:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     44a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     44c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     450:	f2c4 0302 	movt	r3, #16386	; 0x4002
     454:	685b      	ldr	r3, [r3, #4]
     456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     45a:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     45c:	68bb      	ldr	r3, [r7, #8]
     45e:	0c9b      	lsrs	r3, r3, #18
     460:	3302      	adds	r3, #2
     462:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     470:	f2c0 033d 	movt	r3, #61	; 0x3d
     474:	fb03 f202 	mul.w	r2, r3, r2
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	601a      	str	r2, [r3, #0]
     482:	e022      	b.n	4ca <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     488:	f2c4 0302 	movt	r3, #16386	; 0x4002
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     492:	2b00      	cmp	r3, #0
     494:	d00c      	beq.n	4b0 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     496:	68ba      	ldr	r2, [r7, #8]
     498:	f44f 6310 	mov.w	r3, #2304	; 0x900
     49c:	f2c0 033d 	movt	r3, #61	; 0x3d
     4a0:	fb03 f202 	mul.w	r2, r3, r2
     4a4:	f240 0300 	movw	r3, #0
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	601a      	str	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     4b0:	68ba      	ldr	r2, [r7, #8]
     4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
     4ba:	fb03 f202 	mul.w	r2, r3, r2
     4be:	f240 0300 	movw	r3, #0
     4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4c8:	e00a      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
     4ca:	e009      	b.n	4e0 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     4cc:	f240 0300 	movw	r3, #0
     4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     4d8:	f2c0 027a 	movt	r2, #122	; 0x7a
     4dc:	601a      	str	r2, [r3, #0]
      break;
     4de:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ee:	091a      	lsrs	r2, r3, #4
     4f0:	f240 0304 	movw	r3, #4
     4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4f8:	5c9b      	ldrb	r3, [r3, r2]
     4fa:	b2db      	uxtb	r3, r3
     4fc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     4fe:	f240 0300 	movw	r3, #0
     502:	f2c2 0300 	movt	r3, #8192	; 0x2000
     506:	681a      	ldr	r2, [r3, #0]
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	40da      	lsrs	r2, r3
     50c:	f240 0300 	movw	r3, #0
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
}
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     524:	f000 f802 	bl	52c <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     528:	bd80      	pop	{r7, pc}
     52a:	bf00      	nop

0000052c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     532:	2300      	movs	r3, #0
     534:	607b      	str	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     556:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     560:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3301      	adds	r3, #1
     566:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d103      	bne.n	576 <SetSysClockTo72+0x4a>
     56e:	687b      	ldr	r3, [r7, #4]
     570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     574:	d1ed      	bne.n	552 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     57e:	681b      	ldr	r3, [r3, #0]
     580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     584:	2b00      	cmp	r3, #0
     586:	d002      	beq.n	58e <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     588:	2301      	movs	r3, #1
     58a:	603b      	str	r3, [r7, #0]
     58c:	e001      	b.n	592 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     58e:	2300      	movs	r3, #0
     590:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     592:	683b      	ldr	r3, [r7, #0]
     594:	2b01      	cmp	r3, #1
     596:	f040 8094 	bne.w	6c2 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     59e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5aa:	6812      	ldr	r2, [r2, #0]
     5ac:	f042 0210 	orr.w	r2, r2, #16
     5b0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     5b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5be:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	f022 0203 	bic.w	r2, r2, #3
     5c8:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     5ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5da:	6812      	ldr	r2, [r2, #0]
     5dc:	f042 0202 	orr.w	r2, r2, #2
     5e0:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5f2:	6852      	ldr	r2, [r2, #4]
     5f4:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     602:	f2c4 0202 	movt	r2, #16386	; 0x4002
     606:	6852      	ldr	r2, [r2, #4]
     608:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     616:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61a:	6852      	ldr	r2, [r2, #4]
     61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     620:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     626:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     632:	6852      	ldr	r2, [r2, #4]
     634:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     638:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     63e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     646:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64a:	6852      	ldr	r2, [r2, #4]
     64c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     650:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     65e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     662:	6812      	ldr	r2, [r2, #0]
     664:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     668:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     66a:	bf00      	nop
     66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     670:	f2c4 0302 	movt	r3, #16386	; 0x4002
     674:	681b      	ldr	r3, [r3, #0]
     676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     67a:	2b00      	cmp	r3, #0
     67c:	d0f6      	beq.n	66c <SetSysClockTo72+0x140>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     682:	f2c4 0302 	movt	r3, #16386	; 0x4002
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68e:	6852      	ldr	r2, [r2, #4]
     690:	f022 0203 	bic.w	r2, r2, #3
     694:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     69a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a6:	6852      	ldr	r2, [r2, #4]
     6a8:	f042 0202 	orr.w	r2, r2, #2
     6ac:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6ae:	bf00      	nop
     6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 030c 	and.w	r3, r3, #12
     6be:	2b08      	cmp	r3, #8
     6c0:	d1f6      	bne.n	6b0 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     6c2:	370c      	adds	r7, #12
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr
     6cc:	00018b68 	.word	0x00018b68
     6d0:	20000000 	.word	0x20000000
     6d4:	200005d8 	.word	0x200005d8
     6d8:	200005d8 	.word	0x200005d8
     6dc:	2004cdd4 	.word	0x2004cdd4

000006e0 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     6e0:	b480      	push	{r7}
     6e2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f4:	6812      	ldr	r2, [r2, #0]
     6f6:	f042 0201 	orr.w	r2, r2, #1
     6fa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     6fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     700:	f2c4 0202 	movt	r2, #16386	; 0x4002
     704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     708:	f2c4 0302 	movt	r3, #16386	; 0x4002
     70c:	6859      	ldr	r1, [r3, #4]
     70e:	2300      	movs	r3, #0
     710:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     714:	400b      	ands	r3, r1
     716:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     71c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	f2c4 0202 	movt	r2, #16386	; 0x4002
     728:	6812      	ldr	r2, [r2, #0]
     72a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     72e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     732:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     74a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     758:	f2c4 0202 	movt	r2, #16386	; 0x4002
     75c:	6852      	ldr	r2, [r2, #4]
     75e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     762:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 0302 	movt	r3, #16386	; 0x4002
     76c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     770:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     77c:	b480      	push	{r7}
     77e:	b083      	sub	sp, #12
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     79a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6812      	ldr	r2, [r2, #0]
     7ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7b2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     7ba:	d003      	beq.n	7c4 <RCC_HSEConfig+0x48>
     7bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     7c0:	d00d      	beq.n	7de <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;

    default:
      break;
     7c2:	e019      	b.n	7f8 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d4:	6812      	ldr	r2, [r2, #0]
     7d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     7da:	601a      	str	r2, [r3, #0]
      break;
     7dc:	e00c      	b.n	7f8 <RCC_HSEConfig+0x7c>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ee:	6812      	ldr	r2, [r2, #0]
     7f0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     7f4:	601a      	str	r2, [r3, #0]
      break;
     7f6:	bf00      	nop

    default:
      break;
  }
}
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     800:	4770      	bx	lr
     802:	bf00      	nop

00000804 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     80a:	2300      	movs	r3, #0
     80c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     80e:	2300      	movs	r3, #0
     810:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     812:	2300      	movs	r3, #0
     814:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     816:	2031      	movs	r0, #49	; 0x31
     818:	f000 fba2 	bl	f60 <RCC_GetFlagStatus>
     81c:	4603      	mov	r3, r0
     81e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     820:	683b      	ldr	r3, [r7, #0]
     822:	3301      	adds	r3, #1
     824:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     826:	683b      	ldr	r3, [r7, #0]
     828:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     82c:	d002      	beq.n	834 <RCC_WaitForHSEStartUp+0x30>
     82e:	79bb      	ldrb	r3, [r7, #6]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     834:	2031      	movs	r0, #49	; 0x31
     836:	f000 fb93 	bl	f60 <RCC_GetFlagStatus>
     83a:	4603      	mov	r3, r0
     83c:	2b00      	cmp	r3, #0
     83e:	d002      	beq.n	846 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     840:	2301      	movs	r3, #1
     842:	71fb      	strb	r3, [r7, #7]
     844:	e001      	b.n	84a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     846:	2300      	movs	r3, #0
     848:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     84a:	79fb      	ldrb	r3, [r7, #7]
}
     84c:	4618      	mov	r0, r3
     84e:	3708      	adds	r7, #8
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}

00000854 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     854:	b480      	push	{r7}
     856:	b085      	sub	sp, #20
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     85e:	2300      	movs	r3, #0
     860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     866:	f2c4 0302 	movt	r3, #16386	; 0x4002
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     874:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     876:	79fb      	ldrb	r3, [r7, #7]
     878:	00db      	lsls	r3, r3, #3
     87a:	68fa      	ldr	r2, [r7, #12]
     87c:	4313      	orrs	r3, r2
     87e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     884:	f2c4 0302 	movt	r3, #16386	; 0x4002
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	3714      	adds	r7, #20
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	4603      	mov	r3, r0
     8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8a2:	2300      	movs	r3, #0
     8a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8a8:	79fa      	ldrb	r2, [r7, #7]
     8aa:	601a      	str	r2, [r3, #0]
}
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     8b8:	b480      	push	{r7}
     8ba:	b085      	sub	sp, #20
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     8c2:	2300      	movs	r3, #0
     8c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     8d8:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     8da:	687a      	ldr	r2, [r7, #4]
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	4313      	orrs	r3, r2
     8e0:	68fa      	ldr	r2, [r7, #12]
     8e2:	4313      	orrs	r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	605a      	str	r2, [r3, #4]
}
     8f2:	3714      	adds	r7, #20
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     906:	2360      	movs	r3, #96	; 0x60
     908:	f2c4 2342 	movt	r3, #16962	; 0x4242
     90c:	79fa      	ldrb	r2, [r7, #7]
     90e:	601a      	str	r2, [r3, #0]
}
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     930:	685b      	ldr	r3, [r3, #4]
     932:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	687b      	ldr	r3, [r7, #4]
     940:	4313      	orrs	r3, r2
     942:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     948:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94c:	68fa      	ldr	r2, [r7, #12]
     94e:	605a      	str	r2, [r3, #4]
}
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     95c:	b480      	push	{r7}
     95e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	685b      	ldr	r3, [r3, #4]
     96a:	b2db      	uxtb	r3, r3
     96c:	f003 030c 	and.w	r3, r3, #12
     970:	b2db      	uxtb	r3, r3
}
     972:	4618      	mov	r0, r3
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     97c:	b480      	push	{r7}
     97e:	b085      	sub	sp, #20
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     984:	2300      	movs	r3, #0
     986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     990:	685b      	ldr	r3, [r3, #4]
     992:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     99a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4313      	orrs	r3, r2
     9a2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ac:	68fa      	ldr	r2, [r7, #12]
     9ae:	605a      	str	r2, [r3, #4]
}
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     9da:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4313      	orrs	r3, r2
     9e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	605a      	str	r2, [r3, #4]
}
     9f0:	3714      	adds	r7, #20
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     9fc:	b480      	push	{r7}
     9fe:	b085      	sub	sp, #20
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a04:	2300      	movs	r3, #0
     a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a1a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	68fa      	ldr	r2, [r7, #12]
     a22:	4313      	orrs	r3, r2
     a24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	605a      	str	r2, [r3, #4]
}
     a32:	3714      	adds	r7, #20
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr

00000a3c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a3c:	b480      	push	{r7}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	71fa      	strb	r2, [r7, #7]
     a48:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a4a:	79bb      	ldrb	r3, [r7, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00e      	beq.n	a6e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     a50:	f241 0309 	movw	r3, #4105	; 0x1009
     a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a58:	f241 0209 	movw	r2, #4105	; 0x1009
     a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	b2d1      	uxtb	r1, r2
     a64:	79fa      	ldrb	r2, [r7, #7]
     a66:	430a      	orrs	r2, r1
     a68:	b2d2      	uxtb	r2, r2
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e00f      	b.n	a8e <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     a6e:	f241 0309 	movw	r3, #4105	; 0x1009
     a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a76:	f241 0209 	movw	r2, #4105	; 0x1009
     a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	b2d1      	uxtb	r1, r2
     a82:	79fa      	ldrb	r2, [r7, #7]
     a84:	43d2      	mvns	r2, r2
     a86:	b2d2      	uxtb	r2, r2
     a88:	400a      	ands	r2, r1
     a8a:	b2d2      	uxtb	r2, r2
     a8c:	701a      	strb	r2, [r3, #0]
  }
}
     a8e:	370c      	adds	r7, #12
     a90:	46bd      	mov	sp, r7
     a92:	f85d 7b04 	ldr.w	r7, [sp], #4
     a96:	4770      	bx	lr

00000a98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     aa0:	23d8      	movs	r3, #216	; 0xd8
     aa2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab2:	4770      	bx	lr

00000ab4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ab4:	b480      	push	{r7}
     ab6:	b085      	sub	sp, #20
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     abc:	2300      	movs	r3, #0
     abe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ad2:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     afe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b0a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b12:	2200      	movs	r2, #0
     b14:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	2b01      	cmp	r3, #1
     b1a:	d002      	beq.n	b22 <RCC_LSEConfig+0x2e>
     b1c:	2b04      	cmp	r3, #4
     b1e:	d007      	beq.n	b30 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;

    default:
      break;
     b20:	e00d      	b.n	b3e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
      break;
     b2e:	e006      	b.n	b3e <RCC_LSEConfig+0x4a>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b30:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b38:	2205      	movs	r2, #5
     b3a:	701a      	strb	r2, [r3, #0]
      break;
     b3c:	bf00      	nop

    default:
      break;
  }
}
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr

00000b48 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b48:	b480      	push	{r7}
     b4a:	b083      	sub	sp, #12
     b4c:	af00      	add	r7, sp, #0
     b4e:	4603      	mov	r3, r0
     b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     b52:	f44f 6390 	mov.w	r3, #1152	; 0x480
     b56:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b5a:	79fa      	ldrb	r2, [r7, #7]
     b5c:	601a      	str	r2, [r3, #0]
}
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	f85d 7b04 	ldr.w	r7, [sp], #4
     b66:	4770      	bx	lr

00000b68 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b80:	6a11      	ldr	r1, [r2, #32]
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	430a      	orrs	r2, r1
     b86:	621a      	str	r2, [r3, #32]
}
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     b94:	b480      	push	{r7}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	4603      	mov	r3, r0
     b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     b9e:	f240 433c 	movw	r3, #1084	; 0x43c
     ba2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ba6:	79fa      	ldrb	r2, [r7, #7]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     bb4:	b480      	push	{r7}
     bb6:	b087      	sub	sp, #28
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	617b      	str	r3, [r7, #20]
     bc0:	2300      	movs	r3, #0
     bc2:	613b      	str	r3, [r7, #16]
     bc4:	2300      	movs	r3, #0
     bc6:	60fb      	str	r3, [r7, #12]
     bc8:	2300      	movs	r3, #0
     bca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	f003 030c 	and.w	r3, r3, #12
     bda:	617b      	str	r3, [r7, #20]

  switch (tmp)
     bdc:	697b      	ldr	r3, [r7, #20]
     bde:	2b04      	cmp	r3, #4
     be0:	d00a      	beq.n	bf8 <RCC_GetClocksFreq+0x44>
     be2:	2b08      	cmp	r3, #8
     be4:	d00f      	beq.n	c06 <RCC_GetClocksFreq+0x52>
     be6:	2b00      	cmp	r3, #0
     be8:	d14c      	bne.n	c84 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     bea:	687a      	ldr	r2, [r7, #4]
     bec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bf0:	f2c0 037a 	movt	r3, #122	; 0x7a
     bf4:	6013      	str	r3, [r2, #0]
      break;
     bf6:	e04c      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     bf8:	687a      	ldr	r2, [r7, #4]
     bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bfe:	f2c0 037a 	movt	r3, #122	; 0x7a
     c02:	6013      	str	r3, [r2, #0]
      break;
     c04:	e045      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c14:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c24:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     c26:	693b      	ldr	r3, [r7, #16]
     c28:	0c9b      	lsrs	r3, r3, #18
     c2a:	3302      	adds	r3, #2
     c2c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	2b00      	cmp	r3, #0
     c32:	d109      	bne.n	c48 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c34:	693a      	ldr	r2, [r7, #16]
     c36:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c3a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c3e:	fb03 f202 	mul.w	r2, r3, r2
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	601a      	str	r2, [r3, #0]
     c46:	e01c      	b.n	c82 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     c5a:	693a      	ldr	r2, [r7, #16]
     c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c60:	f2c0 033d 	movt	r3, #61	; 0x3d
     c64:	fb03 f202 	mul.w	r2, r3, r2
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	e009      	b.n	c82 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     c6e:	693a      	ldr	r2, [r7, #16]
     c70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c74:	f2c0 037a 	movt	r3, #122	; 0x7a
     c78:	fb03 f202 	mul.w	r2, r3, r2
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     c80:	e007      	b.n	c92 <RCC_GetClocksFreq+0xde>
     c82:	e006      	b.n	c92 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c84:	687a      	ldr	r2, [r7, #4]
     c86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c8a:	f2c0 037a 	movt	r3, #122	; 0x7a
     c8e:	6013      	str	r3, [r2, #0]
      break;
     c90:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ca2:	697b      	ldr	r3, [r7, #20]
     ca4:	091b      	lsrs	r3, r3, #4
     ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ca8:	f240 0314 	movw	r3, #20
     cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb0:	697a      	ldr	r2, [r7, #20]
     cb2:	4413      	add	r3, r2
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	40da      	lsrs	r2, r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     cd4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	0a1b      	lsrs	r3, r3, #8
     cda:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cdc:	f240 0314 	movw	r3, #20
     ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ce4:	697a      	ldr	r2, [r7, #20]
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	685a      	ldr	r2, [r3, #4]
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	40da      	lsrs	r2, r3
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	0adb      	lsrs	r3, r3, #11
     d0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d10:	f240 0314 	movw	r3, #20
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	4413      	add	r3, r2
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	b2db      	uxtb	r3, r3
     d20:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	40da      	lsrs	r2, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	0b9b      	lsrs	r3, r3, #14
     d42:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d44:	f240 0324 	movw	r3, #36	; 0x24
     d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4c:	697a      	ldr	r2, [r7, #20]
     d4e:	4413      	add	r3, r2
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	68da      	ldr	r2, [r3, #12]
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	fbb2 f2f3 	udiv	r2, r2, r3
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	611a      	str	r2, [r3, #16]
}
     d64:	371c      	adds	r7, #28
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     d70:	b480      	push	{r7}
     d72:	b083      	sub	sp, #12
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	460b      	mov	r3, r1
     d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     d7c:	78fb      	ldrb	r3, [r7, #3]
     d7e:	2b00      	cmp	r3, #0
     d80:	d00c      	beq.n	d9c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d92:	6951      	ldr	r1, [r2, #20]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	430a      	orrs	r2, r1
     d98:	615a      	str	r2, [r3, #20]
     d9a:	e00c      	b.n	db6 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     da8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dac:	6951      	ldr	r1, [r2, #20]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	43d2      	mvns	r2, r2
     db2:	400a      	ands	r2, r1
     db4:	615a      	str	r2, [r3, #20]
  }
}
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
     dea:	e00c      	b.n	e06 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6991      	ldr	r1, [r2, #24]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	619a      	str	r2, [r3, #24]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	69d1      	ldr	r1, [r2, #28]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	61da      	str	r2, [r3, #28]
     e3a:	e00c      	b.n	e56 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	69d1      	ldr	r1, [r2, #28]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	61da      	str	r2, [r3, #28]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	68d1      	ldr	r1, [r2, #12]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	60da      	str	r2, [r3, #12]
     e8a:	e00c      	b.n	ea6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	68d1      	ldr	r1, [r2, #12]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	60da      	str	r2, [r3, #12]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	6911      	ldr	r1, [r2, #16]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	611a      	str	r2, [r3, #16]
     eda:	e00c      	b.n	ef6 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	6911      	ldr	r1, [r2, #16]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	611a      	str	r2, [r3, #16]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f0a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f12:	79fa      	ldrb	r2, [r7, #7]
     f14:	601a      	str	r2, [r3, #0]
}
     f16:	370c      	adds	r7, #12
     f18:	46bd      	mov	sp, r7
     f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1e:	4770      	bx	lr

00000f20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f20:	b480      	push	{r7}
     f22:	b083      	sub	sp, #12
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f2a:	234c      	movs	r3, #76	; 0x4c
     f2c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	601a      	str	r2, [r3, #0]
}
     f34:	370c      	adds	r7, #12
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f4a:	f241 0307 	movw	r3, #4103	; 0x1007
     f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f52:	79fa      	ldrb	r2, [r7, #7]
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5e:	4770      	bx	lr

00000f60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f60:	b480      	push	{r7}
     f62:	b087      	sub	sp, #28
     f64:	af00      	add	r7, sp, #0
     f66:	4603      	mov	r3, r0
     f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     f6e:	2300      	movs	r3, #0
     f70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     f72:	2300      	movs	r3, #0
     f74:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     f76:	79fb      	ldrb	r3, [r7, #7]
     f78:	095b      	lsrs	r3, r3, #5
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b01      	cmp	r3, #1
     f82:	d106      	bne.n	f92 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	617b      	str	r3, [r7, #20]
     f90:	e00f      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	2b02      	cmp	r3, #2
     f96:	d106      	bne.n	fa6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa0:	6a1b      	ldr	r3, [r3, #32]
     fa2:	617b      	str	r3, [r7, #20]
     fa4:	e005      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	f003 031f 	and.w	r3, r3, #31
     fb8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	697a      	ldr	r2, [r7, #20]
     fbe:	fa22 f303 	lsr.w	r3, r2, r3
     fc2:	f003 0301 	and.w	r3, r3, #1
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
     fca:	2301      	movs	r3, #1
     fcc:	74fb      	strb	r3, [r7, #19]
     fce:	e001      	b.n	fd4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
     fd0:	2300      	movs	r3, #0
     fd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     fd4:	7cfb      	ldrb	r3, [r7, #19]
}
     fd6:	4618      	mov	r0, r3
     fd8:	371c      	adds	r7, #28
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop

00000fe4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     ffe:	625a      	str	r2, [r3, #36]	; 0x24
}
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr

00001008 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1012:	2300      	movs	r3, #0
    1014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    101e:	689a      	ldr	r2, [r3, #8]
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4013      	ands	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	d002      	beq.n	102e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1028:	2301      	movs	r3, #1
    102a:	73fb      	strb	r3, [r7, #15]
    102c:	e001      	b.n	1032 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    102e:	2300      	movs	r3, #0
    1030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	4603      	mov	r3, r0
    1048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    104a:	f241 030a 	movw	r3, #4106	; 0x100a
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	79fa      	ldrb	r2, [r7, #7]
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	370c      	adds	r7, #12
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr

00001060 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1068:	687a      	ldr	r2, [r7, #4]
    106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    106e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1072:	429a      	cmp	r2, r3
    1074:	d108      	bne.n	1088 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1076:	2004      	movs	r0, #4
    1078:	2101      	movs	r1, #1
    107a:	f7ff fef1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    107e:	2004      	movs	r0, #4
    1080:	2100      	movs	r1, #0
    1082:	f7ff feed 	bl	e60 <RCC_APB2PeriphResetCmd>
    1086:	e060      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    108e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1092:	429a      	cmp	r2, r3
    1094:	d108      	bne.n	10a8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1096:	2008      	movs	r0, #8
    1098:	2101      	movs	r1, #1
    109a:	f7ff fee1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    109e:	2008      	movs	r0, #8
    10a0:	2100      	movs	r1, #0
    10a2:	f7ff fedd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10a6:	e050      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10a8:	687a      	ldr	r2, [r7, #4]
    10aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10b2:	429a      	cmp	r2, r3
    10b4:	d108      	bne.n	10c8 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10b6:	2010      	movs	r0, #16
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff fed1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10be:	2010      	movs	r0, #16
    10c0:	2100      	movs	r1, #0
    10c2:	f7ff fecd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10c6:	e040      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    10ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10d2:	429a      	cmp	r2, r3
    10d4:	d108      	bne.n	10e8 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10d6:	2020      	movs	r0, #32
    10d8:	2101      	movs	r1, #1
    10da:	f7ff fec1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2100      	movs	r1, #0
    10e2:	f7ff febd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10e6:	e030      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOE)
    10e8:	687a      	ldr	r2, [r7, #4]
    10ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    10ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10f2:	429a      	cmp	r2, r3
    10f4:	d108      	bne.n	1108 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f6:	2040      	movs	r0, #64	; 0x40
    10f8:	2101      	movs	r1, #1
    10fa:	f7ff feb1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    10fe:	2040      	movs	r0, #64	; 0x40
    1100:	2100      	movs	r1, #0
    1102:	f7ff fead 	bl	e60 <RCC_APB2PeriphResetCmd>
    1106:	e020      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOF)
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    110e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1112:	429a      	cmp	r2, r3
    1114:	d108      	bne.n	1128 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1116:	2080      	movs	r0, #128	; 0x80
    1118:	2101      	movs	r1, #1
    111a:	f7ff fea1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111e:	2080      	movs	r0, #128	; 0x80
    1120:	2100      	movs	r1, #0
    1122:	f7ff fe9d 	bl	e60 <RCC_APB2PeriphResetCmd>
    1126:	e010      	b.n	114a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    112e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1132:	429a      	cmp	r2, r3
    1134:	d109      	bne.n	114a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2101      	movs	r1, #1
    113c:	f7ff fe90 	bl	e60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1140:	f44f 7080 	mov.w	r0, #256	; 0x100
    1144:	2100      	movs	r1, #0
    1146:	f7ff fe8b 	bl	e60 <RCC_APB2PeriphResetCmd>
    }
  }
}
    114a:	3708      	adds	r7, #8
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}

00001150 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1154:	2001      	movs	r0, #1
    1156:	2101      	movs	r1, #1
    1158:	f7ff fe82 	bl	e60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    115c:	2001      	movs	r0, #1
    115e:	2100      	movs	r1, #0
    1160:	f7ff fe7e 	bl	e60 <RCC_APB2PeriphResetCmd>
}
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop

00001168 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1168:	b480      	push	{r7}
    116a:	b089      	sub	sp, #36	; 0x24
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
    1170:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1172:	2300      	movs	r3, #0
    1174:	61fb      	str	r3, [r7, #28]
    1176:	2300      	movs	r3, #0
    1178:	613b      	str	r3, [r7, #16]
    117a:	2300      	movs	r3, #0
    117c:	61bb      	str	r3, [r7, #24]
    117e:	2300      	movs	r3, #0
    1180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1182:	2300      	movs	r3, #0
    1184:	617b      	str	r3, [r7, #20]
    1186:	2300      	movs	r3, #0
    1188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	f003 030f 	and.w	r3, r3, #15
    1192:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	78db      	ldrb	r3, [r3, #3]
    1198:	f003 0310 	and.w	r3, r3, #16
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <GPIO_Init+0x42>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11a0:	683b      	ldr	r3, [r7, #0]
    11a2:	789b      	ldrb	r3, [r3, #2]
    11a4:	69fa      	ldr	r2, [r7, #28]
    11a6:	4313      	orrs	r3, r2
    11a8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	881b      	ldrh	r3, [r3, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d044      	beq.n	123e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ba:	2300      	movs	r3, #0
    11bc:	61bb      	str	r3, [r7, #24]
    11be:	e038      	b.n	1232 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	2201      	movs	r2, #1
    11c4:	fa02 f303 	lsl.w	r3, r2, r3
    11c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11ca:	683b      	ldr	r3, [r7, #0]
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	461a      	mov	r2, r3
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	4013      	ands	r3, r2
    11d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11d6:	693a      	ldr	r2, [r7, #16]
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	429a      	cmp	r2, r3
    11dc:	d126      	bne.n	122c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	220f      	movs	r2, #15
    11e8:	fa02 f303 	lsl.w	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	43db      	mvns	r3, r3
    11f2:	697a      	ldr	r2, [r7, #20]
    11f4:	4013      	ands	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	69fa      	ldr	r2, [r7, #28]
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	4313      	orrs	r3, r2
    1204:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b28      	cmp	r3, #40	; 0x28
    120c:	d105      	bne.n	121a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    120e:	69bb      	ldr	r3, [r7, #24]
    1210:	2201      	movs	r2, #1
    1212:	409a      	lsls	r2, r3
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	615a      	str	r2, [r3, #20]
    1218:	e008      	b.n	122c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b48      	cmp	r3, #72	; 0x48
    1220:	d104      	bne.n	122c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	3301      	adds	r3, #1
    1230:	61bb      	str	r3, [r7, #24]
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b07      	cmp	r3, #7
    1236:	d9c3      	bls.n	11c0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	697a      	ldr	r2, [r7, #20]
    123c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	2bff      	cmp	r3, #255	; 0xff
    1244:	d946      	bls.n	12d4 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    124c:	2300      	movs	r3, #0
    124e:	61bb      	str	r3, [r7, #24]
    1250:	e03a      	b.n	12c8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3308      	adds	r3, #8
    1256:	2201      	movs	r2, #1
    1258:	fa02 f303 	lsl.w	r3, r2, r3
    125c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4013      	ands	r3, r2
    1268:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    126a:	693a      	ldr	r2, [r7, #16]
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	429a      	cmp	r2, r3
    1270:	d127      	bne.n	12c2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	009b      	lsls	r3, r3, #2
    1276:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	220f      	movs	r2, #15
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	43db      	mvns	r3, r3
    1286:	697a      	ldr	r2, [r7, #20]
    1288:	4013      	ands	r3, r2
    128a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	69fa      	ldr	r2, [r7, #28]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	78db      	ldrb	r3, [r3, #3]
    129e:	2b28      	cmp	r3, #40	; 0x28
    12a0:	d105      	bne.n	12ae <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	409a      	lsls	r2, r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b48      	cmp	r3, #72	; 0x48
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	3301      	adds	r3, #1
    12c6:	61bb      	str	r3, [r7, #24]
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	2b07      	cmp	r3, #7
    12cc:	d9c1      	bls.n	1252 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	605a      	str	r2, [r3, #4]
  }
}
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop

000012e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12e0:	b480      	push	{r7}
    12e2:	b083      	sub	sp, #12
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	2202      	movs	r2, #2
    12f4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	2204      	movs	r2, #4
    12fa:	70da      	strb	r2, [r3, #3]
}
    12fc:	370c      	adds	r7, #12
    12fe:	46bd      	mov	sp, r7
    1300:	f85d 7b04 	ldr.w	r7, [sp], #4
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1308:	b480      	push	{r7}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	460b      	mov	r3, r1
    1312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1314:	2300      	movs	r3, #0
    1316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	689a      	ldr	r2, [r3, #8]
    131c:	887b      	ldrh	r3, [r7, #2]
    131e:	4013      	ands	r3, r2
    1320:	2b00      	cmp	r3, #0
    1322:	d002      	beq.n	132a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1324:	2301      	movs	r3, #1
    1326:	73fb      	strb	r3, [r7, #15]
    1328:	e001      	b.n	132e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    132a:	2300      	movs	r3, #0
    132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    132e:	7bfb      	ldrb	r3, [r7, #15]
}
    1330:	4618      	mov	r0, r3
    1332:	3714      	adds	r7, #20
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	b29b      	uxth	r3, r3
}
    134a:	4618      	mov	r0, r3
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	68da      	ldr	r2, [r3, #12]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    13b4:	887a      	ldrh	r2, [r7, #2]
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	611a      	str	r2, [r3, #16]
}
    13ba:	370c      	adds	r7, #12
    13bc:	46bd      	mov	sp, r7
    13be:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c2:	4770      	bx	lr

000013c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	460b      	mov	r3, r1
    13ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    13d0:	887a      	ldrh	r2, [r7, #2]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	615a      	str	r2, [r3, #20]
}
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13e0:	b480      	push	{r7}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	4613      	mov	r3, r2
    13ea:	460a      	mov	r2, r1
    13ec:	807a      	strh	r2, [r7, #2]
    13ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    13f0:	787b      	ldrb	r3, [r7, #1]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d003      	beq.n	13fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    13f6:	887a      	ldrh	r2, [r7, #2]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	611a      	str	r2, [r3, #16]
    13fc:	e002      	b.n	1404 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    13fe:	887a      	ldrh	r2, [r7, #2]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	615a      	str	r2, [r3, #20]
  }
}
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	460b      	mov	r3, r1
    141a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    141c:	887a      	ldrh	r2, [r7, #2]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	60da      	str	r2, [r3, #12]
}
    1422:	370c      	adds	r7, #12
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    142c:	b480      	push	{r7}
    142e:	b085      	sub	sp, #20
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	460b      	mov	r3, r1
    1436:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    143c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    143e:	887b      	ldrh	r3, [r7, #2]
    1440:	68fa      	ldr	r2, [r7, #12]
    1442:	4313      	orrs	r3, r2
    1444:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	68fa      	ldr	r2, [r7, #12]
    144a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    144c:	887a      	ldrh	r2, [r7, #2]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	699b      	ldr	r3, [r3, #24]
    145c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	699b      	ldr	r3, [r3, #24]
    1462:	60fb      	str	r3, [r7, #12]
}
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr
    146e:	bf00      	nop

00001470 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1470:	b480      	push	{r7}
    1472:	b085      	sub	sp, #20
    1474:	af00      	add	r7, sp, #0
    1476:	4602      	mov	r2, r0
    1478:	460b      	mov	r3, r1
    147a:	71fa      	strb	r2, [r7, #7]
    147c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    147e:	2300      	movs	r3, #0
    1480:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1482:	2300      	movs	r3, #0
    1484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1492:	4013      	ands	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1496:	79fb      	ldrb	r3, [r7, #7]
    1498:	011b      	lsls	r3, r3, #4
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	4313      	orrs	r3, r2
    149e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14a0:	79bb      	ldrb	r3, [r7, #6]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	4313      	orrs	r3, r2
    14a6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14a8:	2300      	movs	r3, #0
    14aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	601a      	str	r2, [r3, #0]
}
    14b2:	3714      	adds	r7, #20
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr

000014bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14bc:	b480      	push	{r7}
    14be:	b083      	sub	sp, #12
    14c0:	af00      	add	r7, sp, #0
    14c2:	4603      	mov	r3, r0
    14c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14c6:	231c      	movs	r3, #28
    14c8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    14cc:	79fa      	ldrb	r2, [r7, #7]
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
    14da:	bf00      	nop

000014dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14dc:	b480      	push	{r7}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	460b      	mov	r3, r1
    14e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14e8:	2300      	movs	r3, #0
    14ea:	613b      	str	r3, [r7, #16]
    14ec:	2300      	movs	r3, #0
    14ee:	60fb      	str	r3, [r7, #12]
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	2b00      	cmp	r3, #0
    14fc:	da05      	bge.n	150a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    14fe:	2300      	movs	r3, #0
    1500:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e004      	b.n	1514 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    150a:	2300      	movs	r3, #0
    150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1510:	685b      	ldr	r3, [r3, #4]
    1512:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    151a:	0c1b      	lsrs	r3, r3, #16
    151c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	b29b      	uxth	r3, r3
    1522:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    152e:	d10e      	bne.n	154e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1536:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1538:	2300      	movs	r3, #0
    153a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    153e:	2200      	movs	r2, #0
    1540:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da05      	bge.n	15bc <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	2300      	movs	r3, #0
    15b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	61da      	str	r2, [r3, #28]
    15ba:	e004      	b.n	15c6 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15bc:	2300      	movs	r3, #0
    15be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	605a      	str	r2, [r3, #4]
  }
}
    15c6:	371c      	adds	r7, #28
    15c8:	46bd      	mov	sp, r7
    15ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ce:	4770      	bx	lr

000015d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15d0:	b490      	push	{r4, r7}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	71fa      	strb	r2, [r7, #7]
    15dc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15de:	2300      	movs	r3, #0
    15e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15e2:	79bb      	ldrb	r3, [r7, #6]
    15e4:	f003 0303 	and.w	r3, r3, #3
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	220f      	movs	r2, #15
    15ec:	fa02 f303 	lsl.w	r3, r2, r3
    15f0:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15f2:	2300      	movs	r3, #0
    15f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15f8:	79ba      	ldrb	r2, [r7, #6]
    15fa:	0892      	lsrs	r2, r2, #2
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	2200      	movs	r2, #0
    1602:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1606:	79b9      	ldrb	r1, [r7, #6]
    1608:	0889      	lsrs	r1, r1, #2
    160a:	b2c9      	uxtb	r1, r1
    160c:	3102      	adds	r1, #2
    160e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	43d2      	mvns	r2, r2
    1616:	4011      	ands	r1, r2
    1618:	1c82      	adds	r2, r0, #2
    161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    161e:	2300      	movs	r3, #0
    1620:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1624:	79ba      	ldrb	r2, [r7, #6]
    1626:	0892      	lsrs	r2, r2, #2
    1628:	b2d2      	uxtb	r2, r2
    162a:	4610      	mov	r0, r2
    162c:	2200      	movs	r2, #0
    162e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1632:	79b9      	ldrb	r1, [r7, #6]
    1634:	0889      	lsrs	r1, r1, #2
    1636:	b2c9      	uxtb	r1, r1
    1638:	3102      	adds	r1, #2
    163a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    163e:	79fc      	ldrb	r4, [r7, #7]
    1640:	79ba      	ldrb	r2, [r7, #6]
    1642:	f002 0203 	and.w	r2, r2, #3
    1646:	0092      	lsls	r2, r2, #2
    1648:	fa04 f202 	lsl.w	r2, r4, r2
    164c:	4311      	orrs	r1, r2
    164e:	1c82      	adds	r2, r0, #2
    1650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1654:	3710      	adds	r7, #16
    1656:	46bd      	mov	sp, r7
    1658:	bc90      	pop	{r4, r7}
    165a:	4770      	bx	lr

0000165c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1664:	23dc      	movs	r3, #220	; 0xdc
    1666:	f2c4 2320 	movt	r3, #16928	; 0x4220
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
}
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	429a      	cmp	r2, r3
    168c:	d10a      	bne.n	16a4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1692:	2101      	movs	r1, #1
    1694:	f7ff fbe4 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    169c:	2100      	movs	r1, #0
    169e:	f7ff fbdf 	bl	e60 <RCC_APB2PeriphResetCmd>
    16a2:	e046      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16ae:	429a      	cmp	r2, r3
    16b0:	d10a      	bne.n	16c8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    16b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16b6:	2101      	movs	r1, #1
    16b8:	f7ff fbfa 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    16bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16c0:	2100      	movs	r1, #0
    16c2:	f7ff fbf5 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16c6:	e034      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    16ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16d2:	429a      	cmp	r2, r3
    16d4:	d10a      	bne.n	16ec <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16da:	2101      	movs	r1, #1
    16dc:	f7ff fbe8 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16e4:	2100      	movs	r1, #0
    16e6:	f7ff fbe3 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16ea:	e022      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == UART4)
    16ec:	687a      	ldr	r2, [r7, #4]
    16ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	429a      	cmp	r2, r3
    16f8:	d10a      	bne.n	1710 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16fe:	2101      	movs	r1, #1
    1700:	f7ff fbd6 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1708:	2100      	movs	r1, #0
    170a:	f7ff fbd1 	bl	eb0 <RCC_APB1PeriphResetCmd>
    170e:	e010      	b.n	1732 <USART_DeInit+0xba>
  }
  else
  {
    if (USARTx == UART5)
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1716:	f2c4 0300 	movt	r3, #16384	; 0x4000
    171a:	429a      	cmp	r2, r3
    171c:	d109      	bne.n	1732 <USART_DeInit+0xba>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    171e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1722:	2101      	movs	r1, #1
    1724:	f7ff fbc4 	bl	eb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1728:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    172c:	2100      	movs	r1, #0
    172e:	f7ff fbbf 	bl	eb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1732:	3708      	adds	r7, #8
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}

00001738 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1738:	b580      	push	{r7, lr}
    173a:	b08c      	sub	sp, #48	; 0x30
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1742:	2300      	movs	r3, #0
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
    1746:	2300      	movs	r3, #0
    1748:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    174a:	2300      	movs	r3, #0
    174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    174e:	2300      	movs	r3, #0
    1750:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1752:	2300      	movs	r3, #0
    1754:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8a1b      	ldrh	r3, [r3, #16]
    175e:	b29b      	uxth	r3, r3
    1760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1764:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1768:	4013      	ands	r3, r2
    176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    176c:	683b      	ldr	r3, [r7, #0]
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1772:	4313      	orrs	r3, r2
    1774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1778:	b29a      	uxth	r2, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	899b      	ldrh	r3, [r3, #12]
    1782:	b29b      	uxth	r3, r3
    1784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1788:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    178c:	4013      	ands	r3, r2
    178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	889a      	ldrh	r2, [r3, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	891b      	ldrh	r3, [r3, #8]
    1798:	4313      	orrs	r3, r2
    179a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17a0:	4313      	orrs	r3, r2
    17a2:	b29b      	uxth	r3, r3
    17a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a6:	4313      	orrs	r3, r2
    17a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17ac:	b29a      	uxth	r2, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	8a9b      	ldrh	r3, [r3, #20]
    17b6:	b29b      	uxth	r3, r3
    17b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    17ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17bc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17c0:	4013      	ands	r3, r2
    17c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	899b      	ldrh	r3, [r3, #12]
    17c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ca:	4313      	orrs	r3, r2
    17cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	b29a      	uxth	r2, r3
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17d6:	f107 0308 	add.w	r3, r7, #8
    17da:	4618      	mov	r0, r3
    17dc:	f7ff f9ea 	bl	bb4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17e0:	69fa      	ldr	r2, [r7, #28]
    17e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    17e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17ea:	429a      	cmp	r2, r3
    17ec:	d102      	bne.n	17f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	62bb      	str	r3, [r7, #40]	; 0x28
    17f2:	e001      	b.n	17f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17f4:	693b      	ldr	r3, [r7, #16]
    17f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b29b      	uxth	r3, r3
    1800:	b21b      	sxth	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	da0c      	bge.n	1820 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009a      	lsls	r2, r3, #2
    1810:	441a      	add	r2, r3
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	005b      	lsls	r3, r3, #1
    1818:	fbb2 f3f3 	udiv	r3, r2, r3
    181c:	627b      	str	r3, [r7, #36]	; 0x24
    181e:	e00b      	b.n	1838 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009a      	lsls	r2, r3, #2
    182a:	441a      	add	r2, r3
    182c:	683b      	ldr	r3, [r7, #0]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	009b      	lsls	r3, r3, #2
    1832:	fbb2 f3f3 	udiv	r3, r2, r3
    1836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    183a:	f248 531f 	movw	r3, #34079	; 0x851f
    183e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1842:	fba3 1302 	umull	r1, r3, r3, r2
    1846:	095b      	lsrs	r3, r3, #5
    1848:	011b      	lsls	r3, r3, #4
    184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    184e:	091b      	lsrs	r3, r3, #4
    1850:	2264      	movs	r2, #100	; 0x64
    1852:	fb02 f303 	mul.w	r3, r2, r3
    1856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1858:	1ad3      	subs	r3, r2, r3
    185a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	899b      	ldrh	r3, [r3, #12]
    1860:	b29b      	uxth	r3, r3
    1862:	b29b      	uxth	r3, r3
    1864:	b21b      	sxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	da10      	bge.n	188c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    186a:	6a3b      	ldr	r3, [r7, #32]
    186c:	00db      	lsls	r3, r3, #3
    186e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1872:	f248 531f 	movw	r3, #34079	; 0x851f
    1876:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    187a:	fba3 1302 	umull	r1, r3, r3, r2
    187e:	095b      	lsrs	r3, r3, #5
    1880:	f003 0307 	and.w	r3, r3, #7
    1884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1886:	4313      	orrs	r3, r2
    1888:	62fb      	str	r3, [r7, #44]	; 0x2c
    188a:	e00f      	b.n	18ac <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    188c:	6a3b      	ldr	r3, [r7, #32]
    188e:	011b      	lsls	r3, r3, #4
    1890:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1894:	f248 531f 	movw	r3, #34079	; 0x851f
    1898:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    189c:	fba3 1302 	umull	r1, r3, r3, r2
    18a0:	095b      	lsrs	r3, r3, #5
    18a2:	f003 030f 	and.w	r3, r3, #15
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4313      	orrs	r3, r2
    18aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18ae:	b29a      	uxth	r2, r3
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	811a      	strh	r2, [r3, #8]
}
    18b4:	3730      	adds	r7, #48	; 0x30
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop

000018bc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    18ca:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2200      	movs	r2, #0
    18d6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2200      	movs	r2, #0
    18dc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	220c      	movs	r2, #12
    18e2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	2200      	movs	r2, #0
    18e8:	819a      	strh	r2, [r3, #12]
}
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18f4:	b480      	push	{r7}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18fe:	2300      	movs	r3, #0
    1900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	8a1b      	ldrh	r3, [r3, #16]
    1906:	b29b      	uxth	r3, r3
    1908:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    190a:	68fa      	ldr	r2, [r7, #12]
    190c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1910:	4013      	ands	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	881a      	ldrh	r2, [r3, #0]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    191c:	4313      	orrs	r3, r2
    191e:	b29a      	uxth	r2, r3
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	889b      	ldrh	r3, [r3, #4]
    1924:	4313      	orrs	r3, r2
    1926:	b29a      	uxth	r2, r3
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	88db      	ldrh	r3, [r3, #6]
    192c:	4313      	orrs	r3, r2
    192e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1930:	68fa      	ldr	r2, [r7, #12]
    1932:	4313      	orrs	r3, r2
    1934:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	b29a      	uxth	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	821a      	strh	r2, [r3, #16]
}
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	2200      	movs	r2, #0
    1954:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2200      	movs	r2, #0
    195a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	2200      	movs	r2, #0
    1960:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2200      	movs	r2, #0
    1966:	80da      	strh	r2, [r3, #6]
}
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1980:	78fb      	ldrb	r3, [r7, #3]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	899b      	ldrh	r3, [r3, #12]
    198a:	b29b      	uxth	r3, r3
    198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1990:	b29a      	uxth	r2, r3
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	819a      	strh	r2, [r3, #12]
    1996:	e007      	b.n	19a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	899b      	ldrh	r3, [r3, #12]
    199c:	b29b      	uxth	r3, r3
    199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19a2:	b29a      	uxth	r2, r3
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	819a      	strh	r2, [r3, #12]
  }
}
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    19b4:	b480      	push	{r7}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	4613      	mov	r3, r2
    19be:	460a      	mov	r2, r1
    19c0:	807a      	strh	r2, [r7, #2]
    19c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    19c4:	2300      	movs	r3, #0
    19c6:	613b      	str	r3, [r7, #16]
    19c8:	2300      	movs	r3, #0
    19ca:	60fb      	str	r3, [r7, #12]
    19cc:	2300      	movs	r3, #0
    19ce:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19d0:	2300      	movs	r3, #0
    19d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	b2db      	uxtb	r3, r3
    19dc:	095b      	lsrs	r3, r3, #5
    19de:	b2db      	uxtb	r3, r3
    19e0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19e2:	887b      	ldrh	r3, [r7, #2]
    19e4:	f003 031f 	and.w	r3, r3, #31
    19e8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2201      	movs	r2, #1
    19ee:	fa02 f303 	lsl.w	r3, r2, r3
    19f2:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d103      	bne.n	1a02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	330c      	adds	r3, #12
    19fe:	617b      	str	r3, [r7, #20]
    1a00:	e009      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2b02      	cmp	r3, #2
    1a06:	d103      	bne.n	1a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	3310      	adds	r3, #16
    1a0c:	617b      	str	r3, [r7, #20]
    1a0e:	e002      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3314      	adds	r3, #20
    1a14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a16:	787b      	ldrb	r3, [r7, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d006      	beq.n	1a2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	697a      	ldr	r2, [r7, #20]
    1a20:	6811      	ldr	r1, [r2, #0]
    1a22:	68ba      	ldr	r2, [r7, #8]
    1a24:	430a      	orrs	r2, r1
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	e006      	b.n	1a38 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	697a      	ldr	r2, [r7, #20]
    1a2e:	6811      	ldr	r1, [r2, #0]
    1a30:	68ba      	ldr	r2, [r7, #8]
    1a32:	43d2      	mvns	r2, r2
    1a34:	400a      	ands	r2, r1
    1a36:	601a      	str	r2, [r3, #0]
  }
}
    1a38:	371c      	adds	r7, #28
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	4613      	mov	r3, r2
    1a4e:	460a      	mov	r2, r1
    1a50:	807a      	strh	r2, [r7, #2]
    1a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1a54:	787b      	ldrb	r3, [r7, #1]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d008      	beq.n	1a6c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	8a9b      	ldrh	r3, [r3, #20]
    1a5e:	b29a      	uxth	r2, r3
    1a60:	887b      	ldrh	r3, [r7, #2]
    1a62:	4313      	orrs	r3, r2
    1a64:	b29a      	uxth	r2, r3
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	829a      	strh	r2, [r3, #20]
    1a6a:	e009      	b.n	1a80 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a9b      	ldrh	r3, [r3, #20]
    1a70:	b29a      	uxth	r2, r3
    1a72:	887b      	ldrh	r3, [r7, #2]
    1a74:	43db      	mvns	r3, r3
    1a76:	b29b      	uxth	r3, r3
    1a78:	4013      	ands	r3, r2
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	829a      	strh	r2, [r3, #20]
  }
}
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	8a1b      	ldrh	r3, [r3, #16]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	f023 030f 	bic.w	r3, r3, #15
    1aa2:	b29a      	uxth	r2, r3
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	8a1b      	ldrh	r3, [r3, #16]
    1aac:	b29a      	uxth	r2, r3
    1aae:	78fb      	ldrb	r3, [r7, #3]
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	821a      	strh	r2, [r3, #16]
}
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	460b      	mov	r3, r1
    1ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	899b      	ldrh	r3, [r3, #12]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1ada:	b29a      	uxth	r2, r3
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	899b      	ldrh	r3, [r3, #12]
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	887b      	ldrh	r3, [r7, #2]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b29a      	uxth	r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	819a      	strh	r2, [r3, #12]
}
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b08:	78fb      	ldrb	r3, [r7, #3]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d008      	beq.n	1b20 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	899b      	ldrh	r3, [r3, #12]
    1b12:	b29b      	uxth	r3, r3
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	819a      	strh	r2, [r3, #12]
    1b1e:	e007      	b.n	1b30 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f023 0302 	bic.w	r3, r3, #2
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  }
}
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop

00001b3c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	460b      	mov	r3, r1
    1b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8a1b      	ldrh	r3, [r3, #16]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	f023 0320 	bic.w	r3, r3, #32
    1b52:	b29a      	uxth	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	8a1b      	ldrh	r3, [r3, #16]
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	887b      	ldrh	r3, [r7, #2]
    1b60:	4313      	orrs	r3, r2
    1b62:	b29a      	uxth	r2, r3
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	821a      	strh	r2, [r3, #16]
}
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	460b      	mov	r3, r1
    1b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b90:	b29a      	uxth	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	821a      	strh	r2, [r3, #16]
    1b96:	e007      	b.n	1ba8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  }
}
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1bc0:	887b      	ldrh	r3, [r7, #2]
    1bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bc6:	b29a      	uxth	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	809a      	strh	r2, [r3, #4]
}
    1bcc:	370c      	adds	r7, #12
    1bce:	46bd      	mov	sp, r7
    1bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop

00001bd8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	b29b      	uxth	r3, r3
    1be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bea:	b29b      	uxth	r3, r3
}
    1bec:	4618      	mov	r0, r3
    1bee:	370c      	adds	r7, #12
    1bf0:	46bd      	mov	sp, r7
    1bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf6:	4770      	bx	lr

00001bf8 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b083      	sub	sp, #12
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	899b      	ldrh	r3, [r3, #12]
    1c04:	b29b      	uxth	r3, r3
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	819a      	strh	r2, [r3, #12]
}
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	460b      	mov	r3, r1
    1c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8b1b      	ldrh	r3, [r3, #24]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	b29a      	uxth	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b1b      	ldrh	r3, [r3, #24]
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	b29b      	uxth	r3, r3
    1c44:	4313      	orrs	r3, r2
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	831a      	strh	r2, [r3, #24]
}
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1c58:	b480      	push	{r7}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	8b1b      	ldrh	r3, [r3, #24]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c6e:	b29a      	uxth	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	8b1b      	ldrh	r3, [r3, #24]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	78fb      	ldrb	r3, [r7, #3]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	4313      	orrs	r3, r2
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
}
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	460b      	mov	r3, r1
    1c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c9c:	78fb      	ldrb	r3, [r7, #3]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d008      	beq.n	1cb4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	8a9b      	ldrh	r3, [r3, #20]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	f043 0320 	orr.w	r3, r3, #32
    1cac:	b29a      	uxth	r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	829a      	strh	r2, [r3, #20]
    1cb2:	e007      	b.n	1cc4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8a9b      	ldrh	r3, [r3, #20]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 0320 	bic.w	r3, r3, #32
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	829a      	strh	r2, [r3, #20]
  }
}
    1cc4:	370c      	adds	r7, #12
    1cc6:	46bd      	mov	sp, r7
    1cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	460b      	mov	r3, r1
    1cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cdc:	78fb      	ldrb	r3, [r7, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d008      	beq.n	1cf4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	8a9b      	ldrh	r3, [r3, #20]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	f043 0310 	orr.w	r3, r3, #16
    1cec:	b29a      	uxth	r2, r3
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	829a      	strh	r2, [r3, #20]
    1cf2:	e007      	b.n	1d04 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	8a9b      	ldrh	r3, [r3, #20]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f023 0310 	bic.w	r3, r3, #16
    1cfe:	b29a      	uxth	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	829a      	strh	r2, [r3, #20]
  }
}
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d10:	b480      	push	{r7}
    1d12:	b083      	sub	sp, #12
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	460b      	mov	r3, r1
    1d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d1c:	78fb      	ldrb	r3, [r7, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d008      	beq.n	1d34 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	8a9b      	ldrh	r3, [r3, #20]
    1d26:	b29b      	uxth	r3, r3
    1d28:	f043 0308 	orr.w	r3, r3, #8
    1d2c:	b29a      	uxth	r2, r3
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	829a      	strh	r2, [r3, #20]
    1d32:	e007      	b.n	1d44 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	8a9b      	ldrh	r3, [r3, #20]
    1d38:	b29b      	uxth	r3, r3
    1d3a:	f023 0308 	bic.w	r3, r3, #8
    1d3e:	b29a      	uxth	r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	829a      	strh	r2, [r3, #20]
  }
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop

00001d50 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d50:	b480      	push	{r7}
    1d52:	b083      	sub	sp, #12
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	460b      	mov	r3, r1
    1d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d5c:	78fb      	ldrb	r3, [r7, #3]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00a      	beq.n	1d78 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	899b      	ldrh	r3, [r3, #12]
    1d66:	b29b      	uxth	r3, r3
    1d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d70:	b29a      	uxth	r2, r3
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	819a      	strh	r2, [r3, #12]
    1d76:	e007      	b.n	1d88 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d82:	b29a      	uxth	r2, r3
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	819a      	strh	r2, [r3, #12]
  }
}
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop

00001d94 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d94:	b480      	push	{r7}
    1d96:	b083      	sub	sp, #12
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	460b      	mov	r3, r1
    1d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1da0:	78fb      	ldrb	r3, [r7, #3]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d008      	beq.n	1db8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	8a9b      	ldrh	r3, [r3, #20]
    1daa:	b29b      	uxth	r3, r3
    1dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1db0:	b29a      	uxth	r2, r3
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	829a      	strh	r2, [r3, #20]
    1db6:	e007      	b.n	1dc8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	8a9b      	ldrh	r3, [r3, #20]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	829a      	strh	r2, [r3, #20]
  }
}
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1dd4:	b480      	push	{r7}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	8a9b      	ldrh	r3, [r3, #20]
    1de4:	b29b      	uxth	r3, r3
    1de6:	f023 0304 	bic.w	r3, r3, #4
    1dea:	b29a      	uxth	r2, r3
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	8a9b      	ldrh	r3, [r3, #20]
    1df4:	b29a      	uxth	r2, r3
    1df6:	887b      	ldrh	r3, [r7, #2]
    1df8:	4313      	orrs	r3, r2
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	829a      	strh	r2, [r3, #20]
}
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop

00001e0c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b083      	sub	sp, #12
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	460b      	mov	r3, r1
    1e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d008      	beq.n	1e30 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	8a9b      	ldrh	r3, [r3, #20]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 0302 	orr.w	r3, r3, #2
    1e28:	b29a      	uxth	r2, r3
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	829a      	strh	r2, [r3, #20]
    1e2e:	e007      	b.n	1e40 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  }
}
    1e40:	370c      	adds	r7, #12
    1e42:	46bd      	mov	sp, r7
    1e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e4c:	b480      	push	{r7}
    1e4e:	b085      	sub	sp, #20
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	460b      	mov	r3, r1
    1e56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e58:	2300      	movs	r3, #0
    1e5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	b29a      	uxth	r2, r3
    1e62:	887b      	ldrh	r3, [r7, #2]
    1e64:	4013      	ands	r3, r2
    1e66:	b29b      	uxth	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d002      	beq.n	1e72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e6c:	2301      	movs	r3, #1
    1e6e:	73fb      	strb	r3, [r7, #15]
    1e70:	e001      	b.n	1e76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e72:	2300      	movs	r3, #0
    1e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e76:	7bfb      	ldrb	r3, [r7, #15]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3714      	adds	r7, #20
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    1e90:	887b      	ldrh	r3, [r7, #2]
    1e92:	43db      	mvns	r3, r3
    1e94:	b29a      	uxth	r2, r3
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	801a      	strh	r2, [r3, #0]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr

00001ea4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ea4:	b480      	push	{r7}
    1ea6:	b087      	sub	sp, #28
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	460b      	mov	r3, r1
    1eae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
    1eb4:	2300      	movs	r3, #0
    1eb6:	617b      	str	r3, [r7, #20]
    1eb8:	2300      	movs	r3, #0
    1eba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1ebc:	2300      	movs	r3, #0
    1ebe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1ec0:	887b      	ldrh	r3, [r7, #2]
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	095b      	lsrs	r3, r3, #5
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1eca:	887b      	ldrh	r3, [r7, #2]
    1ecc:	f003 031f 	and.w	r3, r3, #31
    1ed0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2201      	movs	r2, #1
    1ed6:	fa02 f303 	lsl.w	r3, r2, r3
    1eda:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d106      	bne.n	1ef0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	899b      	ldrh	r3, [r3, #12]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	697a      	ldr	r2, [r7, #20]
    1eea:	4013      	ands	r3, r2
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00f      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d106      	bne.n	1f04 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	8a1b      	ldrh	r3, [r3, #16]
    1efa:	b29b      	uxth	r3, r3
    1efc:	697a      	ldr	r2, [r7, #20]
    1efe:	4013      	ands	r3, r2
    1f00:	617b      	str	r3, [r7, #20]
    1f02:	e005      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	8a9b      	ldrh	r3, [r3, #20]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	4013      	ands	r3, r2
    1f0e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b29b      	uxth	r3, r3
    1f16:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2201      	movs	r2, #1
    1f1c:	fa02 f303 	lsl.w	r3, r2, r3
    1f20:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	881b      	ldrh	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d005      	beq.n	1f40 <USART_GetITStatus+0x9c>
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f3a:	2301      	movs	r3, #1
    1f3c:	74fb      	strb	r3, [r7, #19]
    1f3e:	e001      	b.n	1f44 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f40:	2300      	movs	r3, #0
    1f42:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    1f44:	7cfb      	ldrb	r3, [r7, #19]
}
    1f46:	4618      	mov	r0, r3
    1f48:	371c      	adds	r7, #28
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f54:	b480      	push	{r7}
    1f56:	b085      	sub	sp, #20
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f60:	2300      	movs	r3, #0
    1f62:	81fb      	strh	r3, [r7, #14]
    1f64:	2300      	movs	r3, #0
    1f66:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    1f68:	887b      	ldrh	r3, [r7, #2]
    1f6a:	0a1b      	lsrs	r3, r3, #8
    1f6c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f6e:	89fb      	ldrh	r3, [r7, #14]
    1f70:	2201      	movs	r2, #1
    1f72:	fa02 f303 	lsl.w	r3, r2, r3
    1f76:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f78:	89bb      	ldrh	r3, [r7, #12]
    1f7a:	43db      	mvns	r3, r3
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	801a      	strh	r2, [r3, #0]
}
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f8c:	b480      	push	{r7}
    1f8e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	2200      	movs	r2, #0
    1f9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fa4:	2200      	movs	r2, #0
    1fa6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    1fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fb0:	2200      	movs	r2, #0
    1fb2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    1fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fbc:	2200      	movs	r2, #0
    1fbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fcc:	f2c0 020f 	movt	r2, #15
    1fd0:	615a      	str	r2, [r3, #20]
}
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1fdc:	b480      	push	{r7}
    1fde:	b085      	sub	sp, #20
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1fe4:	2300      	movs	r3, #0
    1fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff0:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d074      	beq.n	20e4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2006:	f2c4 0201 	movt	r2, #16385	; 0x4001
    200a:	6811      	ldr	r1, [r2, #0]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	43d2      	mvns	r2, r2
    2012:	400a      	ands	r2, r1
    2014:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2016:	f44f 6380 	mov.w	r3, #1024	; 0x400
    201a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	6812      	ldr	r2, [r2, #0]
    202c:	43d2      	mvns	r2, r2
    202e:	400a      	ands	r2, r1
    2030:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	4413      	add	r3, r2
    203a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	68fa      	ldr	r2, [r7, #12]
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	430a      	orrs	r2, r1
    2048:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	68d1      	ldr	r1, [r2, #12]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b10      	cmp	r3, #16
    2088:	d11a      	bne.n	20c0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    208e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2096:	f2c4 0201 	movt	r2, #16385	; 0x4001
    209a:	6891      	ldr	r1, [r2, #8]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	6812      	ldr	r2, [r2, #0]
    20a0:	430a      	orrs	r2, r1
    20a2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20b4:	68d1      	ldr	r1, [r2, #12]
    20b6:	687a      	ldr	r2, [r7, #4]
    20b8:	6812      	ldr	r2, [r2, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	60da      	str	r2, [r3, #12]
    20be:	e01e      	b.n	20fe <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    20c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20c8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	795b      	ldrb	r3, [r3, #5]
    20ce:	68fa      	ldr	r2, [r7, #12]
    20d0:	4413      	add	r3, r2
    20d2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68fa      	ldr	r2, [r7, #12]
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	430a      	orrs	r2, r1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	e00c      	b.n	20fe <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	791b      	ldrb	r3, [r3, #4]
    20e8:	68fa      	ldr	r2, [r7, #12]
    20ea:	4413      	add	r3, r2
    20ec:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    20ee:	68fb      	ldr	r3, [r7, #12]
    20f0:	68fa      	ldr	r2, [r7, #12]
    20f2:	6811      	ldr	r1, [r2, #0]
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	43d2      	mvns	r2, r2
    20fa:	400a      	ands	r2, r1
    20fc:	601a      	str	r2, [r3, #0]
  }
}
    20fe:	3714      	adds	r7, #20
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	220c      	movs	r2, #12
    2120:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	719a      	strb	r2, [r3, #6]
}
    2128:	370c      	adds	r7, #12
    212a:	46bd      	mov	sp, r7
    212c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2140:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2148:	f2c4 0201 	movt	r2, #16385	; 0x4001
    214c:	6911      	ldr	r1, [r2, #16]
    214e:	687a      	ldr	r2, [r7, #4]
    2150:	430a      	orrs	r2, r1
    2152:	611a      	str	r2, [r3, #16]
}
    2154:	370c      	adds	r7, #12
    2156:	46bd      	mov	sp, r7
    2158:	f85d 7b04 	ldr.w	r7, [sp], #4
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2160:	b480      	push	{r7}
    2162:	b085      	sub	sp, #20
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2168:	2300      	movs	r3, #0
    216a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2170:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2174:	695a      	ldr	r2, [r3, #20]
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4013      	ands	r3, r2
    217a:	2b00      	cmp	r3, #0
    217c:	d002      	beq.n	2184 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    217e:	2301      	movs	r3, #1
    2180:	73fb      	strb	r3, [r7, #15]
    2182:	e001      	b.n	2188 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    2184:	2300      	movs	r3, #0
    2186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2188:	7bfb      	ldrb	r3, [r7, #15]
}
    218a:	4618      	mov	r0, r3
    218c:	3714      	adds	r7, #20
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop

00002198 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2198:	b480      	push	{r7}
    219a:	b083      	sub	sp, #12
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    21a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21a8:	687a      	ldr	r2, [r7, #4]
    21aa:	615a      	str	r2, [r3, #20]
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop

000021b8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    21b8:	b480      	push	{r7}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    21c0:	2300      	movs	r3, #0
    21c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    21c4:	2300      	movs	r3, #0
    21c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    21c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	4013      	ands	r3, r2
    21d6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    21d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21e0:	695a      	ldr	r2, [r3, #20]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	4013      	ands	r3, r2
    21e6:	2b00      	cmp	r3, #0
    21e8:	d005      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    21f0:	2301      	movs	r3, #1
    21f2:	73fb      	strb	r3, [r7, #15]
    21f4:	e001      	b.n	21fa <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    21f6:	2300      	movs	r3, #0
    21f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21fa:	7bfb      	ldrb	r3, [r7, #15]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3714      	adds	r7, #20
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr

00002208 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2214:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	615a      	str	r2, [r3, #20]
}
    221c:	370c      	adds	r7, #12
    221e:	46bd      	mov	sp, r7
    2220:	f85d 7b04 	ldr.w	r7, [sp], #4
    2224:	4770      	bx	lr
    2226:	bf00      	nop

00002228 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2230:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2234:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    223e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2242:	60da      	str	r2, [r3, #12]
}
    2244:	370c      	adds	r7, #12
    2246:	46bd      	mov	sp, r7
    2248:	f85d 7b04 	ldr.w	r7, [sp], #4
    224c:	4770      	bx	lr
    224e:	bf00      	nop

00002250 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2250:	b480      	push	{r7}
    2252:	b087      	sub	sp, #28
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2258:	2300      	movs	r3, #0
    225a:	617b      	str	r3, [r7, #20]
    225c:	2300      	movs	r3, #0
    225e:	613b      	str	r3, [r7, #16]
    2260:	230f      	movs	r3, #15
    2262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	78db      	ldrb	r3, [r3, #3]
    2268:	2b00      	cmp	r3, #0
    226a:	d042      	beq.n	22f2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    226c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2270:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2274:	68db      	ldr	r3, [r3, #12]
    2276:	43db      	mvns	r3, r3
    2278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    227c:	0a1b      	lsrs	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	f1c3 0304 	rsb	r3, r3, #4
    2286:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	68fa      	ldr	r2, [r7, #12]
    228c:	fa22 f303 	lsr.w	r3, r2, r3
    2290:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	785b      	ldrb	r3, [r3, #1]
    2296:	461a      	mov	r2, r3
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	fa02 f303 	lsl.w	r3, r2, r3
    229e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	461a      	mov	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	4013      	ands	r3, r2
    22aa:	697a      	ldr	r2, [r7, #20]
    22ac:	4313      	orrs	r3, r2
    22ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	011b      	lsls	r3, r3, #4
    22b4:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    22b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7812      	ldrb	r2, [r2, #0]
    22c2:	4611      	mov	r1, r2
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	b2d2      	uxtb	r2, r2
    22c8:	440b      	add	r3, r1
    22ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	7812      	ldrb	r2, [r2, #0]
    22da:	0952      	lsrs	r2, r2, #5
    22dc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	7809      	ldrb	r1, [r1, #0]
    22e2:	f001 011f 	and.w	r1, r1, #31
    22e6:	2001      	movs	r0, #1
    22e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    22f0:	e011      	b.n	2316 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	7812      	ldrb	r2, [r2, #0]
    22fe:	0952      	lsrs	r2, r2, #5
    2300:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2302:	6879      	ldr	r1, [r7, #4]
    2304:	7809      	ldrb	r1, [r1, #0]
    2306:	f001 011f 	and.w	r1, r1, #31
    230a:	2001      	movs	r0, #1
    230c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2310:	3220      	adds	r2, #32
    2312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2316:	371c      	adds	r7, #28
    2318:	46bd      	mov	sp, r7
    231a:	f85d 7b04 	ldr.w	r7, [sp], #4
    231e:	4770      	bx	lr

00002320 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2320:	b480      	push	{r7}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    232a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2332:	683a      	ldr	r2, [r7, #0]
    2334:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2338:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233c:	6879      	ldr	r1, [r7, #4]
    233e:	430a      	orrs	r2, r1
    2340:	609a      	str	r2, [r3, #8]
}
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr

0000234c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	71fa      	strb	r2, [r7, #7]
    2358:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    235a:	79bb      	ldrb	r3, [r7, #6]
    235c:	2b00      	cmp	r3, #0
    235e:	d00c      	beq.n	237a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2360:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2364:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2368:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    236c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2370:	6911      	ldr	r1, [r2, #16]
    2372:	79fa      	ldrb	r2, [r7, #7]
    2374:	430a      	orrs	r2, r1
    2376:	611a      	str	r2, [r3, #16]
    2378:	e00c      	b.n	2394 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2386:	f2ce 0200 	movt	r2, #57344	; 0xe000
    238a:	6911      	ldr	r1, [r2, #16]
    238c:	79fa      	ldrb	r2, [r7, #7]
    238e:	43d2      	mvns	r2, r2
    2390:	400a      	ands	r2, r1
    2392:	611a      	str	r2, [r3, #16]
  }
}
    2394:	370c      	adds	r7, #12
    2396:	46bd      	mov	sp, r7
    2398:	f85d 7b04 	ldr.w	r7, [sp], #4
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2b04      	cmp	r3, #4
    23ac:	d10c      	bne.n	23c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23ae:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b6:	f24e 0210 	movw	r2, #57360	; 0xe010
    23ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23be:	6812      	ldr	r2, [r2, #0]
    23c0:	f042 0204 	orr.w	r2, r2, #4
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e00b      	b.n	23e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23c8:	f24e 0310 	movw	r3, #57360	; 0xe010
    23cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d0:	f24e 0210 	movw	r2, #57360	; 0xe010
    23d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23d8:	6812      	ldr	r2, [r2, #0]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	601a      	str	r2, [r3, #0]
  }
}
    23e0:	370c      	adds	r7, #12
    23e2:	46bd      	mov	sp, r7
    23e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af00      	add	r7, sp, #0
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	60b9      	str	r1, [r7, #8]
    23f6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23f8:	2038      	movs	r0, #56	; 0x38
    23fa:	f003 fd19 	bl	5e30 <pvPortMalloc>
    23fe:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d058      	beq.n	24b8 <xCoRoutineCreate+0xcc>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2406:	f240 6344 	movw	r3, #1604	; 0x644
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	681b      	ldr	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d107      	bne.n	2424 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2414:	f240 6344 	movw	r3, #1604	; 0x644
    2418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241c:	693a      	ldr	r2, [r7, #16]
    241e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2420:	f000 fa08 	bl	2834 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2b01      	cmp	r3, #1
    2428:	d901      	bls.n	242e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    242a:	2301      	movs	r3, #1
    242c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2200      	movs	r2, #0
    2432:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2434:	693b      	ldr	r3, [r7, #16]
    2436:	68ba      	ldr	r2, [r7, #8]
    2438:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	687a      	ldr	r2, [r7, #4]
    243e:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	68fa      	ldr	r2, [r7, #12]
    2444:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	3304      	adds	r3, #4
    244a:	4618      	mov	r0, r3
    244c:	f001 fe58 	bl	4100 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2450:	693b      	ldr	r3, [r7, #16]
    2452:	3318      	adds	r3, #24
    2454:	4618      	mov	r0, r3
    2456:	f001 fe53 	bl	4100 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    245a:	693b      	ldr	r3, [r7, #16]
    245c:	693a      	ldr	r2, [r7, #16]
    245e:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2460:	693b      	ldr	r3, [r7, #16]
    2462:	693a      	ldr	r2, [r7, #16]
    2464:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	f1c3 0205 	rsb	r2, r3, #5
    246c:	693b      	ldr	r3, [r7, #16]
    246e:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2470:	693b      	ldr	r3, [r7, #16]
    2472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2474:	f240 6348 	movw	r3, #1608	; 0x648
    2478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    247c:	681b      	ldr	r3, [r3, #0]
    247e:	429a      	cmp	r2, r3
    2480:	d906      	bls.n	2490 <xCoRoutineCreate+0xa4>
    2482:	693b      	ldr	r3, [r7, #16]
    2484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2486:	f240 6348 	movw	r3, #1608	; 0x648
    248a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    248e:	601a      	str	r2, [r3, #0]
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2494:	4613      	mov	r3, r2
    2496:	009b      	lsls	r3, r3, #2
    2498:	4413      	add	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	f240 52d8 	movw	r2, #1496	; 0x5d8
    24a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    24a4:	441a      	add	r2, r3
    24a6:	693b      	ldr	r3, [r7, #16]
    24a8:	3304      	adds	r3, #4
    24aa:	4610      	mov	r0, r2
    24ac:	4619      	mov	r1, r3
    24ae:	f001 fe33 	bl	4118 <vListInsertEnd>

		xReturn = pdPASS;
    24b2:	2301      	movs	r3, #1
    24b4:	617b      	str	r3, [r7, #20]
    24b6:	e002      	b.n	24be <xCoRoutineCreate+0xd2>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b8:	f04f 33ff 	mov.w	r3, #4294967295
    24bc:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    24be:	697b      	ldr	r3, [r7, #20]
}
    24c0:	4618      	mov	r0, r3
    24c2:	3718      	adds	r7, #24
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}

000024c8 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    24d2:	f240 634c 	movw	r3, #1612	; 0x64c
    24d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24da:	681a      	ldr	r2, [r3, #0]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	4413      	add	r3, r2
    24e0:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    24e2:	f240 6344 	movw	r3, #1604	; 0x644
    24e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24ea:	681b      	ldr	r3, [r3, #0]
    24ec:	3304      	adds	r3, #4
    24ee:	4618      	mov	r0, r3
    24f0:	f001 fe72 	bl	41d8 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    24f4:	f240 6344 	movw	r3, #1604	; 0x644
    24f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24fc:	681b      	ldr	r3, [r3, #0]
    24fe:	68fa      	ldr	r2, [r7, #12]
    2500:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2502:	f240 634c 	movw	r3, #1612	; 0x64c
    2506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	68fa      	ldr	r2, [r7, #12]
    250e:	429a      	cmp	r2, r3
    2510:	d20f      	bcs.n	2532 <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2512:	f240 632c 	movw	r3, #1580	; 0x62c
    2516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    251a:	681a      	ldr	r2, [r3, #0]
    251c:	f240 6344 	movw	r3, #1604	; 0x644
    2520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	3304      	adds	r3, #4
    2528:	4610      	mov	r0, r2
    252a:	4619      	mov	r1, r3
    252c:	f001 fe1c 	bl	4168 <vListInsert>
    2530:	e00e      	b.n	2550 <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2532:	f240 6328 	movw	r3, #1576	; 0x628
    2536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253a:	681a      	ldr	r2, [r3, #0]
    253c:	f240 6344 	movw	r3, #1604	; 0x644
    2540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	3304      	adds	r3, #4
    2548:	4610      	mov	r0, r2
    254a:	4619      	mov	r1, r3
    254c:	f001 fe0c 	bl	4168 <vListInsert>
	}

	if( pxEventList )
    2550:	683b      	ldr	r3, [r7, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d009      	beq.n	256a <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2556:	f240 6344 	movw	r3, #1604	; 0x644
    255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	3318      	adds	r3, #24
    2562:	6838      	ldr	r0, [r7, #0]
    2564:	4619      	mov	r1, r3
    2566:	f001 fdff 	bl	4168 <vListInsert>
	}
}
    256a:	3710      	adds	r7, #16
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}

00002570 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2576:	e039      	b.n	25ec <prvCheckPendingReadyList+0x7c>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2578:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    257c:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2580:	f240 6330 	movw	r3, #1584	; 0x630
    2584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2588:	68db      	ldr	r3, [r3, #12]
    258a:	68db      	ldr	r3, [r3, #12]
    258c:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	3318      	adds	r3, #24
    2592:	4618      	mov	r0, r3
    2594:	f001 fe20 	bl	41d8 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2598:	f04f 0000 	mov.w	r0, #0
    259c:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	3304      	adds	r3, #4
    25a4:	4618      	mov	r0, r3
    25a6:	f001 fe17 	bl	41d8 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ae:	f240 6348 	movw	r3, #1608	; 0x648
    25b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	429a      	cmp	r2, r3
    25ba:	d906      	bls.n	25ca <prvCheckPendingReadyList+0x5a>
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25c0:	f240 6348 	movw	r3, #1608	; 0x648
    25c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25c8:	601a      	str	r2, [r3, #0]
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ce:	4613      	mov	r3, r2
    25d0:	009b      	lsls	r3, r3, #2
    25d2:	4413      	add	r3, r2
    25d4:	009b      	lsls	r3, r3, #2
    25d6:	f240 52d8 	movw	r2, #1496	; 0x5d8
    25da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    25de:	441a      	add	r2, r3
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	3304      	adds	r3, #4
    25e4:	4610      	mov	r0, r2
    25e6:	4619      	mov	r1, r3
    25e8:	f001 fd96 	bl	4118 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25ec:	f240 6330 	movw	r3, #1584	; 0x630
    25f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1be      	bne.n	2578 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    25fa:	3708      	adds	r7, #8
    25fc:	46bd      	mov	sp, r7
    25fe:	bd80      	pop	{r7, pc}

00002600 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2600:	b580      	push	{r7, lr}
    2602:	b082      	sub	sp, #8
    2604:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2606:	f002 fe65 	bl	52d4 <xTaskGetTickCount>
    260a:	4602      	mov	r2, r0
    260c:	f240 6350 	movw	r3, #1616	; 0x650
    2610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	1ad2      	subs	r2, r2, r3
    2618:	f240 6354 	movw	r3, #1620	; 0x654
    261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2620:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2622:	e085      	b.n	2730 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
    2624:	f240 634c 	movw	r3, #1612	; 0x64c
    2628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	1c5a      	adds	r2, r3, #1
    2630:	f240 634c 	movw	r3, #1612	; 0x64c
    2634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2638:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    263a:	f240 6354 	movw	r3, #1620	; 0x654
    263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	1e5a      	subs	r2, r3, #1
    2646:	f240 6354 	movw	r3, #1620	; 0x654
    264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    264e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2650:	f240 634c 	movw	r3, #1612	; 0x64c
    2654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	2b00      	cmp	r3, #0
    265c:	d116      	bne.n	268c <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    265e:	f240 6328 	movw	r3, #1576	; 0x628
    2662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    266a:	f240 632c 	movw	r3, #1580	; 0x62c
    266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2672:	681a      	ldr	r2, [r3, #0]
    2674:	f240 6328 	movw	r3, #1576	; 0x628
    2678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    267e:	f240 632c 	movw	r3, #1580	; 0x62c
    2682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2686:	687a      	ldr	r2, [r7, #4]
    2688:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    268a:	e049      	b.n	2720 <prvCheckDelayedList+0x120>
    268c:	e048      	b.n	2720 <prvCheckDelayedList+0x120>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    268e:	f240 6328 	movw	r3, #1576	; 0x628
    2692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	68db      	ldr	r3, [r3, #12]
    269a:	68db      	ldr	r3, [r3, #12]
    269c:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    269e:	683b      	ldr	r3, [r7, #0]
    26a0:	685a      	ldr	r2, [r3, #4]
    26a2:	f240 634c 	movw	r3, #1612	; 0x64c
    26a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	429a      	cmp	r2, r3
    26ae:	d900      	bls.n	26b2 <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    26b0:	e03e      	b.n	2730 <prvCheckDelayedList+0x130>
			}																						

			portDISABLE_INTERRUPTS();
    26b2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    26b6:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    26ba:	683b      	ldr	r3, [r7, #0]
    26bc:	3304      	adds	r3, #4
    26be:	4618      	mov	r0, r3
    26c0:	f001 fd8a 	bl	41d8 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26c8:	2b00      	cmp	r3, #0
    26ca:	d004      	beq.n	26d6 <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    26cc:	683b      	ldr	r3, [r7, #0]
    26ce:	3318      	adds	r3, #24
    26d0:	4618      	mov	r0, r3
    26d2:	f001 fd81 	bl	41d8 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    26d6:	f04f 0000 	mov.w	r0, #0
    26da:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    26de:	683b      	ldr	r3, [r7, #0]
    26e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26e2:	f240 6348 	movw	r3, #1608	; 0x648
    26e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	429a      	cmp	r2, r3
    26ee:	d906      	bls.n	26fe <prvCheckDelayedList+0xfe>
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26f4:	f240 6348 	movw	r3, #1608	; 0x648
    26f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26fc:	601a      	str	r2, [r3, #0]
    26fe:	683b      	ldr	r3, [r7, #0]
    2700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2702:	4613      	mov	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	4413      	add	r3, r2
    2708:	009b      	lsls	r3, r3, #2
    270a:	f240 52d8 	movw	r2, #1496	; 0x5d8
    270e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2712:	441a      	add	r2, r3
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	3304      	adds	r3, #4
    2718:	4610      	mov	r0, r2
    271a:	4619      	mov	r1, r3
    271c:	f001 fcfc 	bl	4118 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2720:	f240 6328 	movw	r3, #1576	; 0x628
    2724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d1ae      	bne.n	268e <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2730:	f240 6354 	movw	r3, #1620	; 0x654
    2734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2738:	681b      	ldr	r3, [r3, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	f47f af72 	bne.w	2624 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2740:	f240 634c 	movw	r3, #1612	; 0x64c
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	681a      	ldr	r2, [r3, #0]
    274a:	f240 6350 	movw	r3, #1616	; 0x650
    274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2752:	601a      	str	r2, [r3, #0]
}
    2754:	3708      	adds	r7, #8
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}
    275a:	bf00      	nop

0000275c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    275c:	b580      	push	{r7, lr}
    275e:	b082      	sub	sp, #8
    2760:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2762:	f7ff ff05 	bl	2570 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2766:	f7ff ff4b 	bl	2600 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    276a:	e012      	b.n	2792 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    276c:	f240 6348 	movw	r3, #1608	; 0x648
    2770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	2b00      	cmp	r3, #0
    2778:	d100      	bne.n	277c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    277a:	e057      	b.n	282c <vCoRoutineSchedule+0xd0>
		}
		--uxTopCoRoutineReadyPriority;
    277c:	f240 6348 	movw	r3, #1608	; 0x648
    2780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	1e5a      	subs	r2, r3, #1
    2788:	f240 6348 	movw	r3, #1608	; 0x648
    278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2790:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2792:	f240 6348 	movw	r3, #1608	; 0x648
    2796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    279a:	6819      	ldr	r1, [r3, #0]
    279c:	f240 52d8 	movw	r2, #1496	; 0x5d8
    27a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27a4:	460b      	mov	r3, r1
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	440b      	add	r3, r1
    27aa:	009b      	lsls	r3, r3, #2
    27ac:	4413      	add	r3, r2
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d0db      	beq.n	276c <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    27b4:	f240 6348 	movw	r3, #1608	; 0x648
    27b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27bc:	681a      	ldr	r2, [r3, #0]
    27be:	4613      	mov	r3, r2
    27c0:	009b      	lsls	r3, r3, #2
    27c2:	4413      	add	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	f240 52d8 	movw	r2, #1496	; 0x5d8
    27ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27ce:	4413      	add	r3, r2
    27d0:	607b      	str	r3, [r7, #4]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	685b      	ldr	r3, [r3, #4]
    27d6:	685a      	ldr	r2, [r3, #4]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	605a      	str	r2, [r3, #4]
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	685a      	ldr	r2, [r3, #4]
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	3308      	adds	r3, #8
    27e4:	429a      	cmp	r2, r3
    27e6:	d104      	bne.n	27f2 <vCoRoutineSchedule+0x96>
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	685b      	ldr	r3, [r3, #4]
    27ec:	685a      	ldr	r2, [r3, #4]
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	605a      	str	r2, [r3, #4]
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	685b      	ldr	r3, [r3, #4]
    27f6:	68da      	ldr	r2, [r3, #12]
    27f8:	f240 6344 	movw	r3, #1604	; 0x644
    27fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2800:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2802:	f240 6344 	movw	r3, #1604	; 0x644
    2806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	681a      	ldr	r2, [r3, #0]
    280e:	f240 6344 	movw	r3, #1604	; 0x644
    2812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2816:	6819      	ldr	r1, [r3, #0]
    2818:	f240 6344 	movw	r3, #1604	; 0x644
    281c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2820:	681b      	ldr	r3, [r3, #0]
    2822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2824:	4608      	mov	r0, r1
    2826:	4619      	mov	r1, r3
    2828:	4790      	blx	r2

	return;
    282a:	bf00      	nop
}
    282c:	3708      	adds	r7, #8
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	bf00      	nop

00002834 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    283a:	2300      	movs	r3, #0
    283c:	607b      	str	r3, [r7, #4]
    283e:	e00f      	b.n	2860 <prvInitialiseCoRoutineLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2840:	687a      	ldr	r2, [r7, #4]
    2842:	4613      	mov	r3, r2
    2844:	009b      	lsls	r3, r3, #2
    2846:	4413      	add	r3, r2
    2848:	009b      	lsls	r3, r3, #2
    284a:	f240 52d8 	movw	r2, #1496	; 0x5d8
    284e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2852:	4413      	add	r3, r2
    2854:	4618      	mov	r0, r3
    2856:	f001 fc33 	bl	40c0 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	3301      	adds	r3, #1
    285e:	607b      	str	r3, [r7, #4]
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	2b01      	cmp	r3, #1
    2864:	d9ec      	bls.n	2840 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2866:	f240 6000 	movw	r0, #1536	; 0x600
    286a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    286e:	f001 fc27 	bl	40c0 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2872:	f240 6014 	movw	r0, #1556	; 0x614
    2876:	f2c2 0000 	movt	r0, #8192	; 0x2000
    287a:	f001 fc21 	bl	40c0 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    287e:	f240 6030 	movw	r0, #1584	; 0x630
    2882:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2886:	f001 fc1b 	bl	40c0 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    288a:	f240 6328 	movw	r3, #1576	; 0x628
    288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2892:	f240 6200 	movw	r2, #1536	; 0x600
    2896:	f2c2 0200 	movt	r2, #8192	; 0x2000
    289a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    289c:	f240 632c 	movw	r3, #1580	; 0x62c
    28a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a4:	f240 6214 	movw	r2, #1556	; 0x614
    28a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28ac:	601a      	str	r2, [r3, #0]
}
    28ae:	3708      	adds	r7, #8
    28b0:	46bd      	mov	sp, r7
    28b2:	bd80      	pop	{r7, pc}

000028b4 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	68db      	ldr	r3, [r3, #12]
    28c0:	68db      	ldr	r3, [r3, #12]
    28c2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    28c4:	68bb      	ldr	r3, [r7, #8]
    28c6:	3318      	adds	r3, #24
    28c8:	4618      	mov	r0, r3
    28ca:	f001 fc85 	bl	41d8 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	3318      	adds	r3, #24
    28d2:	f240 6030 	movw	r0, #1584	; 0x630
    28d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28da:	4619      	mov	r1, r3
    28dc:	f001 fc1c 	bl	4118 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    28e0:	68bb      	ldr	r3, [r7, #8]
    28e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28e4:	f240 6344 	movw	r3, #1604	; 0x644
    28e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28f0:	429a      	cmp	r2, r3
    28f2:	d302      	bcc.n	28fa <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    28f4:	2301      	movs	r3, #1
    28f6:	60fb      	str	r3, [r7, #12]
    28f8:	e001      	b.n	28fe <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    28fa:	2300      	movs	r3, #0
    28fc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    28fe:	68fb      	ldr	r3, [r7, #12]
}
    2900:	4618      	mov	r0, r3
    2902:	3710      	adds	r7, #16
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}

00002908 <xIsERLNull>:
static void vEventSetxTag(portTickType xDeadline, portTickType xTimestamp, xEventHandle pxNewEvent );

// if xEventReadyList is not null,
// then return the type of destination servant of the first event
portBASE_TYPE xIsERLNull()
{
    2908:	b580      	push	{r7, lr}
    290a:	b082      	sub	sp, #8
    290c:	af00      	add	r7, sp, #0
    portBASE_TYPE pxDestination;
    struct tag * xTag;
    if(listCURRENT_LIST_LENGTH(&xEventReadyList) > 0)
    290e:	f640 03f8 	movw	r3, #2296	; 0x8f8
    2912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2916:	681b      	ldr	r3, [r3, #0]
    2918:	2b00      	cmp	r3, #0
    291a:	d029      	beq.n	2970 <xIsERLNull+0x68>
    {
        pxDestination = xEventGetpxDestination((xEventReadyList.xListEnd.pxNext)->pvOwner); 
    291c:	f640 03f8 	movw	r3, #2296	; 0x8f8
    2920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2924:	68db      	ldr	r3, [r3, #12]
    2926:	68db      	ldr	r3, [r3, #12]
    2928:	4618      	mov	r0, r3
    292a:	f000 f833 	bl	2994 <xEventGetpxDestination>
    292e:	6078      	str	r0, [r7, #4]
        xTag = xEventGetxTag(xEventReadyList.xListEnd.pxNext->pvOwner);
    2930:	f640 03f8 	movw	r3, #2296	; 0x8f8
    2934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2938:	68db      	ldr	r3, [r3, #12]
    293a:	68db      	ldr	r3, [r3, #12]
    293c:	4618      	mov	r0, r3
    293e:	f000 f835 	bl	29ac <xEventGetxTag>
    2942:	6038      	str	r0, [r7, #0]
        if( xTaskGetTickCount() >= xTag->xTimestamp )
    2944:	f002 fcc6 	bl	52d4 <xTaskGetTickCount>
    2948:	4602      	mov	r2, r0
    294a:	683b      	ldr	r3, [r7, #0]
    294c:	685b      	ldr	r3, [r3, #4]
    294e:	429a      	cmp	r2, r3
    2950:	d30c      	bcc.n	296c <xIsERLNull+0x64>
            return xContexts[pxDestination].xType; 
    2952:	f640 120c 	movw	r2, #2316	; 0x90c
    2956:	f2c2 0200 	movt	r2, #8192	; 0x2000
    295a:	6879      	ldr	r1, [r7, #4]
    295c:	460b      	mov	r3, r1
    295e:	00db      	lsls	r3, r3, #3
    2960:	1a5b      	subs	r3, r3, r1
    2962:	00db      	lsls	r3, r3, #3
    2964:	4413      	add	r3, r2
    2966:	3304      	adds	r3, #4
    2968:	681b      	ldr	r3, [r3, #0]
    296a:	e003      	b.n	2974 <xIsERLNull+0x6c>
        else
            return 0;
    296c:	2300      	movs	r3, #0
    296e:	e001      	b.n	2974 <xIsERLNull+0x6c>
    }
    return -1;
    2970:	f04f 33ff 	mov.w	r3, #4294967295
}
    2974:	4618      	mov	r0, r3
    2976:	3708      	adds	r7, #8
    2978:	46bd      	mov	sp, r7
    297a:	bd80      	pop	{r7, pc}

0000297c <xEventGetpxSource>:

portBASE_TYPE xEventGetpxSource( xEventHandle pxEvent )
{
    297c:	b480      	push	{r7}
    297e:	b083      	sub	sp, #12
    2980:	af00      	add	r7, sp, #0
    2982:	6078      	str	r0, [r7, #4]
    return ((eveECB *)pxEvent)->pxSource;
    2984:	687b      	ldr	r3, [r7, #4]
    2986:	681b      	ldr	r3, [r3, #0]
}
    2988:	4618      	mov	r0, r3
    298a:	370c      	adds	r7, #12
    298c:	46bd      	mov	sp, r7
    298e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2992:	4770      	bx	lr

00002994 <xEventGetpxDestination>:

portBASE_TYPE xEventGetpxDestination( xEventHandle pxEvent)
{
    2994:	b480      	push	{r7}
    2996:	b083      	sub	sp, #12
    2998:	af00      	add	r7, sp, #0
    299a:	6078      	str	r0, [r7, #4]
    return ((eveECB *) pxEvent)->pxDestination;
    299c:	687b      	ldr	r3, [r7, #4]
    299e:	685b      	ldr	r3, [r3, #4]
}
    29a0:	4618      	mov	r0, r3
    29a2:	370c      	adds	r7, #12
    29a4:	46bd      	mov	sp, r7
    29a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    29aa:	4770      	bx	lr

000029ac <xEventGetxTag>:

struct tag * xEventGetxTag( xEventHandle pxEvent)
{
    29ac:	b480      	push	{r7}
    29ae:	b083      	sub	sp, #12
    29b0:	af00      	add	r7, sp, #0
    29b2:	6078      	str	r0, [r7, #4]
    return &((eveECB *) pxEvent)->xTag;
    29b4:	687b      	ldr	r3, [r7, #4]
    29b6:	3308      	adds	r3, #8
}
    29b8:	4618      	mov	r0, r3
    29ba:	370c      	adds	r7, #12
    29bc:	46bd      	mov	sp, r7
    29be:	f85d 7b04 	ldr.w	r7, [sp], #4
    29c2:	4770      	bx	lr

000029c4 <xEventGetxData>:

struct eventData * xEventGetxData( xEventHandle pxEvent)
{
    29c4:	b480      	push	{r7}
    29c6:	b083      	sub	sp, #12
    29c8:	af00      	add	r7, sp, #0
    29ca:	6078      	str	r0, [r7, #4]
    return &((eveECB *) pxEvent)->xData;
    29cc:	687b      	ldr	r3, [r7, #4]
    29ce:	3318      	adds	r3, #24
}
    29d0:	4618      	mov	r0, r3
    29d2:	370c      	adds	r7, #12
    29d4:	46bd      	mov	sp, r7
    29d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    29da:	4770      	bx	lr

000029dc <getGCD>:

static portBASE_TYPE getGCD(portTickType t1, portTickType t2)
{
    29dc:	b580      	push	{r7, lr}
    29de:	b082      	sub	sp, #8
    29e0:	af00      	add	r7, sp, #0
    29e2:	6078      	str	r0, [r7, #4]
    29e4:	6039      	str	r1, [r7, #0]
    return t1%t2==0 ? t2 : getGCD(t2, t1 % t2);
    29e6:	687b      	ldr	r3, [r7, #4]
    29e8:	683a      	ldr	r2, [r7, #0]
    29ea:	fbb3 f2f2 	udiv	r2, r3, r2
    29ee:	6839      	ldr	r1, [r7, #0]
    29f0:	fb01 f202 	mul.w	r2, r1, r2
    29f4:	1a9b      	subs	r3, r3, r2
    29f6:	2b00      	cmp	r3, #0
    29f8:	d00d      	beq.n	2a16 <getGCD+0x3a>
    29fa:	687b      	ldr	r3, [r7, #4]
    29fc:	683a      	ldr	r2, [r7, #0]
    29fe:	fbb3 f2f2 	udiv	r2, r3, r2
    2a02:	6839      	ldr	r1, [r7, #0]
    2a04:	fb01 f202 	mul.w	r2, r1, r2
    2a08:	1a9b      	subs	r3, r3, r2
    2a0a:	6838      	ldr	r0, [r7, #0]
    2a0c:	4619      	mov	r1, r3
    2a0e:	f7ff ffe5 	bl	29dc <getGCD>
    2a12:	4603      	mov	r3, r0
    2a14:	e000      	b.n	2a18 <getGCD+0x3c>
    2a16:	683b      	ldr	r3, [r7, #0]
}
    2a18:	4618      	mov	r0, r3
    2a1a:	3708      	adds	r7, #8
    2a1c:	46bd      	mov	sp, r7
    2a1e:	bd80      	pop	{r7, pc}

00002a20 <GCDOfTaskPeriod>:

static portTickType GCDOfTaskPeriod()
{
    2a20:	b580      	push	{r7, lr}
    2a22:	b082      	sub	sp, #8
    2a24:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    portTickType result = xPeriodOfTask[0];
    2a26:	f240 0328 	movw	r3, #40	; 0x28
    2a2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a2e:	681b      	ldr	r3, [r3, #0]
    2a30:	603b      	str	r3, [r7, #0]

    for( i = 1; i < NUMBEROFTASK; ++ i )
    2a32:	2301      	movs	r3, #1
    2a34:	607b      	str	r3, [r7, #4]
    2a36:	e00f      	b.n	2a58 <GCDOfTaskPeriod+0x38>
    {
        result = getGCD(result , xPeriodOfTask[i]); 
    2a38:	f240 0328 	movw	r3, #40	; 0x28
    2a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a40:	687a      	ldr	r2, [r7, #4]
    2a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2a46:	6838      	ldr	r0, [r7, #0]
    2a48:	4619      	mov	r1, r3
    2a4a:	f7ff ffc7 	bl	29dc <getGCD>
    2a4e:	4603      	mov	r3, r0
    2a50:	603b      	str	r3, [r7, #0]
static portTickType GCDOfTaskPeriod()
{
    portBASE_TYPE i;
    portTickType result = xPeriodOfTask[0];

    for( i = 1; i < NUMBEROFTASK; ++ i )
    2a52:	687b      	ldr	r3, [r7, #4]
    2a54:	3301      	adds	r3, #1
    2a56:	607b      	str	r3, [r7, #4]
    2a58:	687b      	ldr	r3, [r7, #4]
    2a5a:	2b0c      	cmp	r3, #12
    2a5c:	ddec      	ble.n	2a38 <GCDOfTaskPeriod+0x18>
    {
        result = getGCD(result , xPeriodOfTask[i]); 
    }
    return result;
    2a5e:	683b      	ldr	r3, [r7, #0]
}
    2a60:	4618      	mov	r0, r3
    2a62:	3708      	adds	r7, #8
    2a64:	46bd      	mov	sp, r7
    2a66:	bd80      	pop	{r7, pc}

00002a68 <vInitialiseEventLists>:

void vInitialiseEventLists() 
{
    2a68:	b590      	push	{r4, r7, lr}
    2a6a:	b091      	sub	sp, #68	; 0x44
    2a6c:	af00      	add	r7, sp, #0
    volatile portBASE_TYPE xCPU, i;
    eveECB * pxIdleEvents[NUMBEROFEVENTS];
    eveECB * pxEndFlagEvent;

    // init the GCD of Task period;
    GCDPeriod = GCDOfTaskPeriod();
    2a6e:	f7ff ffd7 	bl	2a20 <GCDOfTaskPeriod>
    2a72:	4602      	mov	r2, r0
    2a74:	f240 6358 	movw	r3, #1624	; 0x658
    2a78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a7c:	601a      	str	r2, [r3, #0]

    vListInitialise( ( xList * ) &xEventIdleList);
    2a7e:	f640 0094 	movw	r0, #2196	; 0x894
    2a82:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2a86:	f001 fb1b 	bl	40c0 <vListInitialise>
    vListInitialise( ( xList * ) &xEventNonExecutablePool );
    2a8a:	f640 00a8 	movw	r0, #2216	; 0x8a8
    2a8e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2a92:	f001 fb15 	bl	40c0 <vListInitialise>
    vListInitialise( ( xList * ) &xEventNonExecutableList);
    2a96:	f640 00bc 	movw	r0, #2236	; 0x8bc
    2a9a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2a9e:	f001 fb0f 	bl	40c0 <vListInitialise>
    vListInitialise( ( xList * ) &xEventExecutablePool );
    2aa2:	f640 00d0 	movw	r0, #2256	; 0x8d0
    2aa6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2aaa:	f001 fb09 	bl	40c0 <vListInitialise>
    vListInitialise( ( xList * ) &xEventExecutableList );
    2aae:	f640 00e4 	movw	r0, #2276	; 0x8e4
    2ab2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ab6:	f001 fb03 	bl	40c0 <vListInitialise>
    vListInitialise( (xList * ) & xEventReadyList);
    2aba:	f640 00f8 	movw	r0, #2296	; 0x8f8
    2abe:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ac2:	f001 fafd 	bl	40c0 <vListInitialise>

    for( i = 0; i < NUMBEROFEVENTS; ++i )
    2ac6:	2300      	movs	r3, #0
    2ac8:	63bb      	str	r3, [r7, #56]	; 0x38
    2aca:	e02b      	b.n	2b24 <vInitialiseEventLists+0xbc>
    {
        pxIdleEvents[i] = (eveECB *) pvPortMalloc(sizeof(eveECB)); 
    2acc:	6bbc      	ldr	r4, [r7, #56]	; 0x38
    2ace:	2034      	movs	r0, #52	; 0x34
    2ad0:	f003 f9ae 	bl	5e30 <pvPortMalloc>
    2ad4:	4602      	mov	r2, r0
    2ad6:	00a3      	lsls	r3, r4, #2
    2ad8:	f107 0140 	add.w	r1, r7, #64	; 0x40
    2adc:	440b      	add	r3, r1
    2ade:	f843 2c3c 	str.w	r2, [r3, #-60]
        listSET_LIST_ITEM_OWNER( (xListItem *) & (pxIdleEvents[i]->xEventListItem), pxIdleEvents[i]);
    2ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2ae4:	009b      	lsls	r3, r3, #2
    2ae6:	f107 0240 	add.w	r2, r7, #64	; 0x40
    2aea:	4413      	add	r3, r2
    2aec:	f853 2c3c 	ldr.w	r2, [r3, #-60]
    2af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2af2:	009b      	lsls	r3, r3, #2
    2af4:	f107 0140 	add.w	r1, r7, #64	; 0x40
    2af8:	440b      	add	r3, r1
    2afa:	f853 3c3c 	ldr.w	r3, [r3, #-60]
    2afe:	62d3      	str	r3, [r2, #44]	; 0x2c
        vListInsertEnd(&xEventIdleList, &pxIdleEvents[i]->xEventListItem); 
    2b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2b02:	009b      	lsls	r3, r3, #2
    2b04:	f107 0240 	add.w	r2, r7, #64	; 0x40
    2b08:	4413      	add	r3, r2
    2b0a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
    2b0e:	3320      	adds	r3, #32
    2b10:	f640 0094 	movw	r0, #2196	; 0x894
    2b14:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2b18:	4619      	mov	r1, r3
    2b1a:	f001 fafd 	bl	4118 <vListInsertEnd>
    vListInitialise( ( xList * ) &xEventNonExecutableList);
    vListInitialise( ( xList * ) &xEventExecutablePool );
    vListInitialise( ( xList * ) &xEventExecutableList );
    vListInitialise( (xList * ) & xEventReadyList);

    for( i = 0; i < NUMBEROFEVENTS; ++i )
    2b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2b20:	3301      	adds	r3, #1
    2b22:	63bb      	str	r3, [r7, #56]	; 0x38
    2b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2b26:	2b0c      	cmp	r3, #12
    2b28:	ddd0      	ble.n	2acc <vInitialiseEventLists+0x64>
        listSET_LIST_ITEM_OWNER( (xListItem *) & (pxIdleEvents[i]->xEventListItem), pxIdleEvents[i]);
        vListInsertEnd(&xEventIdleList, &pxIdleEvents[i]->xEventListItem); 
    }

    // Creating an End FLag Event and insert into the end of xEventList, which needs sorted events
}
    2b2a:	3744      	adds	r7, #68	; 0x44
    2b2c:	46bd      	mov	sp, r7
    2b2e:	bd90      	pop	{r4, r7, pc}

00002b30 <xIsExecutableEventArrive>:

portBASE_TYPE xIsExecutableEventArrive()
{
    2b30:	b580      	push	{r7, lr}
    2b32:	b086      	sub	sp, #24
    2b34:	af00      	add	r7, sp, #0
    volatile xListItem * pxIterator;
    portTickType xCurrentTime;
    portBASE_TYPE xLen, i;
    struct tag * xTag;
    
    if((xLen = listCURRENT_LIST_LENGTH(&xEventNonExecutablePool)) > 0)
    2b36:	f640 03a8 	movw	r3, #2216	; 0x8a8
    2b3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b3e:	681b      	ldr	r3, [r3, #0]
    2b40:	60fb      	str	r3, [r7, #12]
    2b42:	68fb      	ldr	r3, [r7, #12]
    2b44:	2b00      	cmp	r3, #0
    2b46:	dd22      	ble.n	2b8e <xIsExecutableEventArrive+0x5e>
    {

        pxIterator = (xListItem *)(xEventNonExecutablePool.xListEnd.pxNext);
    2b48:	f640 03a8 	movw	r3, #2216	; 0x8a8
    2b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b50:	68db      	ldr	r3, [r3, #12]
    2b52:	617b      	str	r3, [r7, #20]
        xCurrentTime = xTaskGetTickCount();
    2b54:	f002 fbbe 	bl	52d4 <xTaskGetTickCount>
    2b58:	60b8      	str	r0, [r7, #8]
        for( i = 0; i < xLen ; i++ ) 
    2b5a:	2300      	movs	r3, #0
    2b5c:	613b      	str	r3, [r7, #16]
    2b5e:	e012      	b.n	2b86 <xIsExecutableEventArrive+0x56>
        {
            xTag = xEventGetxTag( pxIterator->pvOwner );
    2b60:	697b      	ldr	r3, [r7, #20]
    2b62:	68db      	ldr	r3, [r3, #12]
    2b64:	4618      	mov	r0, r3
    2b66:	f7ff ff21 	bl	29ac <xEventGetxTag>
    2b6a:	6078      	str	r0, [r7, #4]
            if(xTag->xTimestamp <= xCurrentTime) return pdTRUE;
    2b6c:	687b      	ldr	r3, [r7, #4]
    2b6e:	685a      	ldr	r2, [r3, #4]
    2b70:	68bb      	ldr	r3, [r7, #8]
    2b72:	429a      	cmp	r2, r3
    2b74:	d801      	bhi.n	2b7a <xIsExecutableEventArrive+0x4a>
    2b76:	2301      	movs	r3, #1
    2b78:	e00a      	b.n	2b90 <xIsExecutableEventArrive+0x60>
            pxIterator = pxIterator->pxNext;
    2b7a:	697b      	ldr	r3, [r7, #20]
    2b7c:	685b      	ldr	r3, [r3, #4]
    2b7e:	617b      	str	r3, [r7, #20]
    if((xLen = listCURRENT_LIST_LENGTH(&xEventNonExecutablePool)) > 0)
    {

        pxIterator = (xListItem *)(xEventNonExecutablePool.xListEnd.pxNext);
        xCurrentTime = xTaskGetTickCount();
        for( i = 0; i < xLen ; i++ ) 
    2b80:	693b      	ldr	r3, [r7, #16]
    2b82:	3301      	adds	r3, #1
    2b84:	613b      	str	r3, [r7, #16]
    2b86:	693a      	ldr	r2, [r7, #16]
    2b88:	68fb      	ldr	r3, [r7, #12]
    2b8a:	429a      	cmp	r2, r3
    2b8c:	dbe8      	blt.n	2b60 <xIsExecutableEventArrive+0x30>
            xTag = xEventGetxTag( pxIterator->pvOwner );
            if(xTag->xTimestamp <= xCurrentTime) return pdTRUE;
            pxIterator = pxIterator->pxNext;
        }
    }
    return pdFALSE;
    2b8e:	2300      	movs	r3, #0
}
    2b90:	4618      	mov	r0, r3
    2b92:	3718      	adds	r7, #24
    2b94:	46bd      	mov	sp, r7
    2b96:	bd80      	pop	{r7, pc}

00002b98 <xCompareFunction>:

/* executable event comparison function is used in xEventExecutableList. 
 * The event with earlist deadline will be scheduled to execute first */
static portBASE_TYPE xCompareFunction( const struct tag * t1, const struct tag * t2 )
{
    2b98:	b480      	push	{r7}
    2b9a:	b083      	sub	sp, #12
    2b9c:	af00      	add	r7, sp, #0
    2b9e:	6078      	str	r0, [r7, #4]
    2ba0:	6039      	str	r1, [r7, #0]
    if( t1->xDeadline < t2->xDeadline)
    2ba2:	687b      	ldr	r3, [r7, #4]
    2ba4:	681a      	ldr	r2, [r3, #0]
    2ba6:	683b      	ldr	r3, [r7, #0]
    2ba8:	681b      	ldr	r3, [r3, #0]
    2baa:	429a      	cmp	r2, r3
    2bac:	d201      	bcs.n	2bb2 <xCompareFunction+0x1a>
    {
        return pdTRUE;
    2bae:	2301      	movs	r3, #1
    2bb0:	e02a      	b.n	2c08 <xCompareFunction+0x70>
    }
    else if( t1->xDeadline == t2->xDeadline)
    2bb2:	687b      	ldr	r3, [r7, #4]
    2bb4:	681a      	ldr	r2, [r3, #0]
    2bb6:	683b      	ldr	r3, [r7, #0]
    2bb8:	681b      	ldr	r3, [r3, #0]
    2bba:	429a      	cmp	r2, r3
    2bbc:	d123      	bne.n	2c06 <xCompareFunction+0x6e>
    {
        if( t1->xTimestamp < t2->xTimestamp)
    2bbe:	687b      	ldr	r3, [r7, #4]
    2bc0:	685a      	ldr	r2, [r3, #4]
    2bc2:	683b      	ldr	r3, [r7, #0]
    2bc4:	685b      	ldr	r3, [r3, #4]
    2bc6:	429a      	cmp	r2, r3
    2bc8:	d201      	bcs.n	2bce <xCompareFunction+0x36>
        {
            return pdTRUE;
    2bca:	2301      	movs	r3, #1
    2bcc:	e01c      	b.n	2c08 <xCompareFunction+0x70>
        }
        else if( t1->xTimestamp == t2->xTimestamp )
    2bce:	687b      	ldr	r3, [r7, #4]
    2bd0:	685a      	ldr	r2, [r3, #4]
    2bd2:	683b      	ldr	r3, [r7, #0]
    2bd4:	685b      	ldr	r3, [r3, #4]
    2bd6:	429a      	cmp	r2, r3
    2bd8:	d115      	bne.n	2c06 <xCompareFunction+0x6e>
        {
            if( t1->xLevel < t2->xLevel )
    2bda:	687b      	ldr	r3, [r7, #4]
    2bdc:	689a      	ldr	r2, [r3, #8]
    2bde:	683b      	ldr	r3, [r7, #0]
    2be0:	689b      	ldr	r3, [r3, #8]
    2be2:	429a      	cmp	r2, r3
    2be4:	da01      	bge.n	2bea <xCompareFunction+0x52>
            {
                return pdTRUE;
    2be6:	2301      	movs	r3, #1
    2be8:	e00e      	b.n	2c08 <xCompareFunction+0x70>
            }
            else if( t1->xLevel == t2->xLevel && t1->xMicroStep < t2->xMicroStep )
    2bea:	687b      	ldr	r3, [r7, #4]
    2bec:	689a      	ldr	r2, [r3, #8]
    2bee:	683b      	ldr	r3, [r7, #0]
    2bf0:	689b      	ldr	r3, [r3, #8]
    2bf2:	429a      	cmp	r2, r3
    2bf4:	d107      	bne.n	2c06 <xCompareFunction+0x6e>
    2bf6:	687b      	ldr	r3, [r7, #4]
    2bf8:	68da      	ldr	r2, [r3, #12]
    2bfa:	683b      	ldr	r3, [r7, #0]
    2bfc:	68db      	ldr	r3, [r3, #12]
    2bfe:	429a      	cmp	r2, r3
    2c00:	da01      	bge.n	2c06 <xCompareFunction+0x6e>
            {
                return pdTRUE;
    2c02:	2301      	movs	r3, #1
    2c04:	e000      	b.n	2c08 <xCompareFunction+0x70>
            }
        }
    }

    return pdFALSE;
    2c06:	2300      	movs	r3, #0
}
    2c08:	4618      	mov	r0, r3
    2c0a:	370c      	adds	r7, #12
    2c0c:	46bd      	mov	sp, r7
    2c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c12:	4770      	bx	lr

00002c14 <vEventSetxTag>:

static void vEventSetxTag( portTickType xDeadline, portTickType xTimestamp, xEventHandle pxNewEvent )
{
    2c14:	b480      	push	{r7}
    2c16:	b087      	sub	sp, #28
    2c18:	af00      	add	r7, sp, #0
    2c1a:	60f8      	str	r0, [r7, #12]
    2c1c:	60b9      	str	r1, [r7, #8]
    2c1e:	607a      	str	r2, [r7, #4]
    eveECB * pxEvent =(eveECB *) pxNewEvent;
    2c20:	687b      	ldr	r3, [r7, #4]
    2c22:	617b      	str	r3, [r7, #20]

    /* EDF scheduling algorithm */
    pxEvent->xTag.xDeadline = xDeadline ;
    2c24:	697b      	ldr	r3, [r7, #20]
    2c26:	68fa      	ldr	r2, [r7, #12]
    2c28:	609a      	str	r2, [r3, #8]
    pxEvent->xTag.xTimestamp = xTimestamp;
    2c2a:	697b      	ldr	r3, [r7, #20]
    2c2c:	68ba      	ldr	r2, [r7, #8]
    2c2e:	60da      	str	r2, [r3, #12]

    /*the microstep is not used now*/
    pxEvent->xTag.xMicroStep = 0;
    2c30:	697b      	ldr	r3, [r7, #20]
    2c32:	2200      	movs	r2, #0
    2c34:	615a      	str	r2, [r3, #20]
}
    2c36:	371c      	adds	r7, #28
    2c38:	46bd      	mov	sp, r7
    2c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c3e:	4770      	bx	lr

00002c40 <prvEventListGenericInsert>:

/* insert event to xEventNonExecutableList in terms of comparison function 1 */
static void prvEventListGenericInsert( xListItem *pxNewListItem )
{
    2c40:	b580      	push	{r7, lr}
    2c42:	b088      	sub	sp, #32
    2c44:	af00      	add	r7, sp, #0
    2c46:	6078      	str	r0, [r7, #4]
    struct tag * xTagOfInsertion;
    xList * pxList = &xEventExecutableList; 
    2c48:	f640 03e4 	movw	r3, #2276	; 0x8e4
    2c4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c50:	617b      	str	r3, [r7, #20]
    volatile xListItem *pxIterator = (xListItem *)&(pxList->xListEnd);
    2c52:	697b      	ldr	r3, [r7, #20]
    2c54:	3308      	adds	r3, #8
    2c56:	61fb      	str	r3, [r7, #28]
    portBASE_TYPE xLen, i;

    xTagOfInsertion = xEventGetxTag(pxNewListItem->pvOwner);
    2c58:	687b      	ldr	r3, [r7, #4]
    2c5a:	68db      	ldr	r3, [r3, #12]
    2c5c:	4618      	mov	r0, r3
    2c5e:	f7ff fea5 	bl	29ac <xEventGetxTag>
    2c62:	6138      	str	r0, [r7, #16]

    taskENTER_CRITICAL();
    2c64:	f003 f86a 	bl	5d3c <vPortEnterCritical>
    // inserting start from the ending of list
    xLen = listCURRENT_LIST_LENGTH(&xEventExecutableList);
    2c68:	f640 03e4 	movw	r3, #2276	; 0x8e4
    2c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c70:	681b      	ldr	r3, [r3, #0]
    2c72:	60fb      	str	r3, [r7, #12]
    for( i = 0; 
    2c74:	2300      	movs	r3, #0
    2c76:	61bb      	str	r3, [r7, #24]
    2c78:	e005      	b.n	2c86 <prvEventListGenericInsert+0x46>
         i < xLen && xCompareFunction( xTagOfInsertion, xEventGetxTag( pxIterator->pxPrevious->pvOwner ));
         i ++, pxIterator = pxIterator->pxPrevious) {}
    2c7a:	69bb      	ldr	r3, [r7, #24]
    2c7c:	3301      	adds	r3, #1
    2c7e:	61bb      	str	r3, [r7, #24]
    2c80:	69fb      	ldr	r3, [r7, #28]
    2c82:	689b      	ldr	r3, [r3, #8]
    2c84:	61fb      	str	r3, [r7, #28]
    xTagOfInsertion = xEventGetxTag(pxNewListItem->pvOwner);

    taskENTER_CRITICAL();
    // inserting start from the ending of list
    xLen = listCURRENT_LIST_LENGTH(&xEventExecutableList);
    for( i = 0; 
    2c86:	69ba      	ldr	r2, [r7, #24]
    2c88:	68fb      	ldr	r3, [r7, #12]
    2c8a:	429a      	cmp	r2, r3
    2c8c:	da0d      	bge.n	2caa <prvEventListGenericInsert+0x6a>
         i < xLen && xCompareFunction( xTagOfInsertion, xEventGetxTag( pxIterator->pxPrevious->pvOwner ));
    2c8e:	69fb      	ldr	r3, [r7, #28]
    2c90:	689b      	ldr	r3, [r3, #8]
    2c92:	68db      	ldr	r3, [r3, #12]
    2c94:	4618      	mov	r0, r3
    2c96:	f7ff fe89 	bl	29ac <xEventGetxTag>
    2c9a:	4603      	mov	r3, r0
    2c9c:	6938      	ldr	r0, [r7, #16]
    2c9e:	4619      	mov	r1, r3
    2ca0:	f7ff ff7a 	bl	2b98 <xCompareFunction>
    2ca4:	4603      	mov	r3, r0
    2ca6:	2b00      	cmp	r3, #0
    2ca8:	d1e7      	bne.n	2c7a <prvEventListGenericInsert+0x3a>
         i ++, pxIterator = pxIterator->pxPrevious) {}

    taskEXIT_CRITICAL();
    2caa:	f003 f85d 	bl	5d68 <vPortExitCritical>

    //pxIterator = pxIterator->pxPrevious;
    // insert the new event after a smaller one from the back of list
    pxNewListItem->pxNext = pxIterator->pxNext;
    2cae:	69fb      	ldr	r3, [r7, #28]
    2cb0:	685a      	ldr	r2, [r3, #4]
    2cb2:	687b      	ldr	r3, [r7, #4]
    2cb4:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2cb6:	687b      	ldr	r3, [r7, #4]
    2cb8:	685b      	ldr	r3, [r3, #4]
    2cba:	687a      	ldr	r2, [r7, #4]
    2cbc:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
    2cbe:	687b      	ldr	r3, [r7, #4]
    2cc0:	69fa      	ldr	r2, [r7, #28]
    2cc2:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2cc4:	69fb      	ldr	r3, [r7, #28]
    2cc6:	687a      	ldr	r2, [r7, #4]
    2cc8:	605a      	str	r2, [r3, #4]

    pxNewListItem->pvContainer = ( void * ) pxList;
    2cca:	687b      	ldr	r3, [r7, #4]
    2ccc:	697a      	ldr	r2, [r7, #20]
    2cce:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
    2cd0:	697b      	ldr	r3, [r7, #20]
    2cd2:	681b      	ldr	r3, [r3, #0]
    2cd4:	1c5a      	adds	r2, r3, #1
    2cd6:	697b      	ldr	r3, [r7, #20]
    2cd8:	601a      	str	r2, [r3, #0]
}
    2cda:	3720      	adds	r7, #32
    2cdc:	46bd      	mov	sp, r7
    2cde:	bd80      	pop	{r7, pc}

00002ce0 <pxEventGenericCreate>:


xEventHandle pxEventGenericCreate( portBASE_TYPE pxSource, portTickType xDeadline, portTickType xTimestamp, struct eventData * pdData)
{
    2ce0:	b580      	push	{r7, lr}
    2ce2:	b086      	sub	sp, #24
    2ce4:	af00      	add	r7, sp, #0
    2ce6:	60f8      	str	r0, [r7, #12]
    2ce8:	60b9      	str	r1, [r7, #8]
    2cea:	607a      	str	r2, [r7, #4]
    2cec:	603b      	str	r3, [r7, #0]
    eveECB * pxNewEvent = NULL;
    2cee:	2300      	movs	r3, #0
    2cf0:	617b      	str	r3, [r7, #20]

    /* using the pxCurrentTCB, current task should not be changed */
    taskENTER_CRITICAL();
    2cf2:	f003 f823 	bl	5d3c <vPortEnterCritical>

    pxNewEvent = (eveECB *)xEventIdleList.xListEnd.pxNext->pvOwner;
    2cf6:	f640 0394 	movw	r3, #2196	; 0x894
    2cfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2cfe:	68db      	ldr	r3, [r3, #12]
    2d00:	68db      	ldr	r3, [r3, #12]
    2d02:	617b      	str	r3, [r7, #20]
    vListRemove( (xListItem *)&pxNewEvent->xEventListItem );
    2d04:	697b      	ldr	r3, [r7, #20]
    2d06:	3320      	adds	r3, #32
    2d08:	4618      	mov	r0, r3
    2d0a:	f001 fa65 	bl	41d8 <vListRemove>

    pxNewEvent->pxSource = pxSource;
    2d0e:	697b      	ldr	r3, [r7, #20]
    2d10:	68fa      	ldr	r2, [r7, #12]
    2d12:	601a      	str	r2, [r3, #0]
    vEventSetxTag( xDeadline, xTimestamp, pxNewEvent );
    2d14:	68b8      	ldr	r0, [r7, #8]
    2d16:	6879      	ldr	r1, [r7, #4]
    2d18:	697a      	ldr	r2, [r7, #20]
    2d1a:	f7ff ff7b 	bl	2c14 <vEventSetxTag>
    ((eveECB *) pxNewEvent)->xData = *pdData;
    2d1e:	697b      	ldr	r3, [r7, #20]
    2d20:	683a      	ldr	r2, [r7, #0]
    2d22:	3318      	adds	r3, #24
    2d24:	e892 0003 	ldmia.w	r2, {r0, r1}
    2d28:	e883 0003 	stmia.w	r3, {r0, r1}
    listSET_LIST_ITEM_OWNER( (xListItem *) &pxNewEvent->xEventListItem, pxNewEvent);
    2d2c:	697b      	ldr	r3, [r7, #20]
    2d2e:	697a      	ldr	r2, [r7, #20]
    2d30:	62da      	str	r2, [r3, #44]	; 0x2c

    taskEXIT_CRITICAL();
    2d32:	f003 f819 	bl	5d68 <vPortExitCritical>

    return pxNewEvent;
    2d36:	697b      	ldr	r3, [r7, #20]
}
    2d38:	4618      	mov	r0, r3
    2d3a:	3718      	adds	r7, #24
    2d3c:	46bd      	mov	sp, r7
    2d3e:	bd80      	pop	{r7, pc}

00002d40 <vEventGenericScatter>:


// find the executable events from xEventNonExecutablePool.
// scatter the events and transit them into xEventExecutablePool
void vEventGenericScatter()
{
    2d40:	b580      	push	{r7, lr}
    2d42:	b08c      	sub	sp, #48	; 0x30
    2d44:	af00      	add	r7, sp, #0
    portBASE_TYPE pxSource, pxDestination, outs;
    struct tag * xTag;
    eveECB * pxEvent , * pxCopyEvent; 
    xListItem * temp_pxEventListItem;
    portTickType xCurrentTime;
    volatile xListItem * pxIterator = xEventNonExecutablePool.xListEnd.pxNext;
    2d46:	f640 03a8 	movw	r3, #2216	; 0x8a8
    2d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d4e:	68db      	ldr	r3, [r3, #12]
    2d50:	627b      	str	r3, [r7, #36]	; 0x24

    // event scatter
    if( (xLen = listCURRENT_LIST_LENGTH( &xEventNonExecutablePool )) > 0)
    2d52:	f640 03a8 	movw	r3, #2216	; 0x8a8
    2d56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d5a:	681b      	ldr	r3, [r3, #0]
    2d5c:	623b      	str	r3, [r7, #32]
    2d5e:	6a3b      	ldr	r3, [r7, #32]
    2d60:	2b00      	cmp	r3, #0
    2d62:	f340 80c8 	ble.w	2ef6 <vEventGenericScatter+0x1b6>
    {
        xCurrentTime = xTaskGetTickCount();
    2d66:	f002 fab5 	bl	52d4 <xTaskGetTickCount>
    2d6a:	61f8      	str	r0, [r7, #28]
        // search executable event from nonexecutable pool
        for(j = 0; j < xLen; j ++ )
    2d6c:	2300      	movs	r3, #0
    2d6e:	62bb      	str	r3, [r7, #40]	; 0x28
    2d70:	e0bc      	b.n	2eec <vEventGenericScatter+0x1ac>
        {
            xTag = xEventGetxTag( pxIterator->pvOwner ); 
    2d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d74:	68db      	ldr	r3, [r3, #12]
    2d76:	4618      	mov	r0, r3
    2d78:	f7ff fe18 	bl	29ac <xEventGetxTag>
    2d7c:	61b8      	str	r0, [r7, #24]
            // find one
            if( xTag->xTimestamp <= xCurrentTime )
    2d7e:	69bb      	ldr	r3, [r7, #24]
    2d80:	685a      	ldr	r2, [r3, #4]
    2d82:	69fb      	ldr	r3, [r7, #28]
    2d84:	429a      	cmp	r2, r3
    2d86:	f200 80ab 	bhi.w	2ee0 <vEventGenericScatter+0x1a0>
            {
                pxEvent = (eveECB *) pxIterator->pvOwner;
    2d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d8c:	68db      	ldr	r3, [r3, #12]
    2d8e:	617b      	str	r3, [r7, #20]
                outs = xContexts[ pxEvent->pxSource ].xNumOfOut; // used for cloning
    2d90:	697b      	ldr	r3, [r7, #20]
    2d92:	6819      	ldr	r1, [r3, #0]
    2d94:	f640 120c 	movw	r2, #2316	; 0x90c
    2d98:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2d9c:	460b      	mov	r3, r1
    2d9e:	00db      	lsls	r3, r3, #3
    2da0:	1a5b      	subs	r3, r3, r1
    2da2:	00db      	lsls	r3, r3, #3
    2da4:	4413      	add	r3, r2
    2da6:	3310      	adds	r3, #16
    2da8:	681b      	ldr	r3, [r3, #0]
    2daa:	613b      	str	r3, [r7, #16]

                taskENTER_CRITICAL();
    2dac:	f002 ffc6 	bl	5d3c <vPortEnterCritical>
                temp_pxEventListItem = (xListItem *) pxIterator;
    2db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2db2:	60fb      	str	r3, [r7, #12]
                pxIterator = pxIterator->pxNext;
    2db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2db6:	685b      	ldr	r3, [r3, #4]
    2db8:	627b      	str	r3, [r7, #36]	; 0x24
                vListRemove(temp_pxEventListItem);
    2dba:	68f8      	ldr	r0, [r7, #12]
    2dbc:	f001 fa0c 	bl	41d8 <vListRemove>
                // complete the information of the origin event.
                pxEvent->pxDestination = xContexts[pxEvent->pxSource].xOutFlag[0];
    2dc0:	697b      	ldr	r3, [r7, #20]
    2dc2:	6819      	ldr	r1, [r3, #0]
    2dc4:	f640 120c 	movw	r2, #2316	; 0x90c
    2dc8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2dcc:	460b      	mov	r3, r1
    2dce:	00db      	lsls	r3, r3, #3
    2dd0:	1a5b      	subs	r3, r3, r1
    2dd2:	00db      	lsls	r3, r3, #3
    2dd4:	4413      	add	r3, r2
    2dd6:	331c      	adds	r3, #28
    2dd8:	681a      	ldr	r2, [r3, #0]
    2dda:	697b      	ldr	r3, [r7, #20]
    2ddc:	605a      	str	r2, [r3, #4]
                xContexts[pxEvent->pxDestination].xInBoolCount++;
    2dde:	697b      	ldr	r3, [r7, #20]
    2de0:	685a      	ldr	r2, [r3, #4]
    2de2:	f640 110c 	movw	r1, #2316	; 0x90c
    2de6:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2dea:	4613      	mov	r3, r2
    2dec:	00db      	lsls	r3, r3, #3
    2dee:	1a9b      	subs	r3, r3, r2
    2df0:	00db      	lsls	r3, r3, #3
    2df2:	440b      	add	r3, r1
    2df4:	3334      	adds	r3, #52	; 0x34
    2df6:	681b      	ldr	r3, [r3, #0]
    2df8:	1c58      	adds	r0, r3, #1
    2dfa:	f640 110c 	movw	r1, #2316	; 0x90c
    2dfe:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2e02:	4613      	mov	r3, r2
    2e04:	00db      	lsls	r3, r3, #3
    2e06:	1a9b      	subs	r3, r3, r2
    2e08:	00db      	lsls	r3, r3, #3
    2e0a:	440b      	add	r3, r1
    2e0c:	3334      	adds	r3, #52	; 0x34
    2e0e:	6018      	str	r0, [r3, #0]
                pxEvent->xTag.xLevel = xContexts[pxEvent->pxSource].xTaskId;
    2e10:	697b      	ldr	r3, [r7, #20]
    2e12:	6819      	ldr	r1, [r3, #0]
    2e14:	f640 120c 	movw	r2, #2316	; 0x90c
    2e18:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2e1c:	460b      	mov	r3, r1
    2e1e:	00db      	lsls	r3, r3, #3
    2e20:	1a5b      	subs	r3, r3, r1
    2e22:	00db      	lsls	r3, r3, #3
    2e24:	4413      	add	r3, r2
    2e26:	3330      	adds	r3, #48	; 0x30
    2e28:	681a      	ldr	r2, [r3, #0]
    2e2a:	697b      	ldr	r3, [r7, #20]
    2e2c:	611a      	str	r2, [r3, #16]
                vListInsertEnd(&xEventExecutablePool, temp_pxEventListItem);
    2e2e:	f640 00d0 	movw	r0, #2256	; 0x8d0
    2e32:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2e36:	68f9      	ldr	r1, [r7, #12]
    2e38:	f001 f96e 	bl	4118 <vListInsertEnd>

                // copy one event to multiples
                for(i = 1; i < outs; ++ i)
    2e3c:	2301      	movs	r3, #1
    2e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    2e40:	e047      	b.n	2ed2 <vEventGenericScatter+0x192>
                {
                    pxCopyEvent = (eveECB *)pxEventGenericCreate(pxSource, pxEvent->xTag.xDeadline, pxEvent->xTag.xTimestamp, &pxEvent->xData);
    2e42:	697b      	ldr	r3, [r7, #20]
    2e44:	6899      	ldr	r1, [r3, #8]
    2e46:	697b      	ldr	r3, [r7, #20]
    2e48:	68da      	ldr	r2, [r3, #12]
    2e4a:	697b      	ldr	r3, [r7, #20]
    2e4c:	3318      	adds	r3, #24
    2e4e:	68b8      	ldr	r0, [r7, #8]
    2e50:	f7ff ff46 	bl	2ce0 <pxEventGenericCreate>
    2e54:	6078      	str	r0, [r7, #4]
                    // complete the information of the copied event.
                    pxCopyEvent->xTag.xMicroStep = i;
    2e56:	687b      	ldr	r3, [r7, #4]
    2e58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2e5a:	615a      	str	r2, [r3, #20]
                    pxCopyEvent->xTag.xLevel = pxEvent->xTag.xLevel;   // copy events have all the same xLevel
    2e5c:	697b      	ldr	r3, [r7, #20]
    2e5e:	691a      	ldr	r2, [r3, #16]
    2e60:	687b      	ldr	r3, [r7, #4]
    2e62:	611a      	str	r2, [r3, #16]
                    pxCopyEvent->pxDestination = xContexts[pxEvent->pxSource].xOutFlag[i];
    2e64:	697b      	ldr	r3, [r7, #20]
    2e66:	6819      	ldr	r1, [r3, #0]
    2e68:	f640 120c 	movw	r2, #2316	; 0x90c
    2e6c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2e70:	460b      	mov	r3, r1
    2e72:	00db      	lsls	r3, r3, #3
    2e74:	1a5b      	subs	r3, r3, r1
    2e76:	005b      	lsls	r3, r3, #1
    2e78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    2e7a:	440b      	add	r3, r1
    2e7c:	3306      	adds	r3, #6
    2e7e:	009b      	lsls	r3, r3, #2
    2e80:	4413      	add	r3, r2
    2e82:	685a      	ldr	r2, [r3, #4]
    2e84:	687b      	ldr	r3, [r7, #4]
    2e86:	605a      	str	r2, [r3, #4]
                    xContexts[pxCopyEvent->pxDestination].xInBoolCount++;
    2e88:	687b      	ldr	r3, [r7, #4]
    2e8a:	685a      	ldr	r2, [r3, #4]
    2e8c:	f640 110c 	movw	r1, #2316	; 0x90c
    2e90:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2e94:	4613      	mov	r3, r2
    2e96:	00db      	lsls	r3, r3, #3
    2e98:	1a9b      	subs	r3, r3, r2
    2e9a:	00db      	lsls	r3, r3, #3
    2e9c:	440b      	add	r3, r1
    2e9e:	3334      	adds	r3, #52	; 0x34
    2ea0:	681b      	ldr	r3, [r3, #0]
    2ea2:	1c58      	adds	r0, r3, #1
    2ea4:	f640 110c 	movw	r1, #2316	; 0x90c
    2ea8:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2eac:	4613      	mov	r3, r2
    2eae:	00db      	lsls	r3, r3, #3
    2eb0:	1a9b      	subs	r3, r3, r2
    2eb2:	00db      	lsls	r3, r3, #3
    2eb4:	440b      	add	r3, r1
    2eb6:	3334      	adds	r3, #52	; 0x34
    2eb8:	6018      	str	r0, [r3, #0]
                    vListInsertEnd(&xEventExecutablePool, &pxCopyEvent->xEventListItem);
    2eba:	687b      	ldr	r3, [r7, #4]
    2ebc:	3320      	adds	r3, #32
    2ebe:	f640 00d0 	movw	r0, #2256	; 0x8d0
    2ec2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ec6:	4619      	mov	r1, r3
    2ec8:	f001 f926 	bl	4118 <vListInsertEnd>
                xContexts[pxEvent->pxDestination].xInBoolCount++;
                pxEvent->xTag.xLevel = xContexts[pxEvent->pxSource].xTaskId;
                vListInsertEnd(&xEventExecutablePool, temp_pxEventListItem);

                // copy one event to multiples
                for(i = 1; i < outs; ++ i)
    2ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2ece:	3301      	adds	r3, #1
    2ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
    2ed2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2ed4:	693b      	ldr	r3, [r7, #16]
    2ed6:	429a      	cmp	r2, r3
    2ed8:	dbb3      	blt.n	2e42 <vEventGenericScatter+0x102>
                    pxCopyEvent->xTag.xLevel = pxEvent->xTag.xLevel;   // copy events have all the same xLevel
                    pxCopyEvent->pxDestination = xContexts[pxEvent->pxSource].xOutFlag[i];
                    xContexts[pxCopyEvent->pxDestination].xInBoolCount++;
                    vListInsertEnd(&xEventExecutablePool, &pxCopyEvent->xEventListItem);
                }
                taskEXIT_CRITICAL();
    2eda:	f002 ff45 	bl	5d68 <vPortExitCritical>
    2ede:	e002      	b.n	2ee6 <vEventGenericScatter+0x1a6>
            }
            else
            {
                pxIterator = pxIterator->pxNext;
    2ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ee2:	685b      	ldr	r3, [r3, #4]
    2ee4:	627b      	str	r3, [r7, #36]	; 0x24
    // event scatter
    if( (xLen = listCURRENT_LIST_LENGTH( &xEventNonExecutablePool )) > 0)
    {
        xCurrentTime = xTaskGetTickCount();
        // search executable event from nonexecutable pool
        for(j = 0; j < xLen; j ++ )
    2ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2ee8:	3301      	adds	r3, #1
    2eea:	62bb      	str	r3, [r7, #40]	; 0x28
    2eec:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2eee:	6a3b      	ldr	r3, [r7, #32]
    2ef0:	429a      	cmp	r2, r3
    2ef2:	f6ff af3e 	blt.w	2d72 <vEventGenericScatter+0x32>
            {
                pxIterator = pxIterator->pxNext;
            }
        }
    }
}
    2ef6:	3730      	adds	r7, #48	; 0x30
    2ef8:	46bd      	mov	sp, r7
    2efa:	bd80      	pop	{r7, pc}

00002efc <clearEventReduceTrack>:
    }
}
*/

static void clearEventReduceTrack()
{
    2efc:	b480      	push	{r7}
    2efe:	b083      	sub	sp, #12
    2f00:	af00      	add	r7, sp, #0
    portBASE_TYPE i = NUMBEROFSERVANT;
    2f02:	232f      	movs	r3, #47	; 0x2f
    2f04:	607b      	str	r3, [r7, #4]
    while(i--)
    2f06:	e030      	b.n	2f6a <clearEventReduceTrack+0x6e>
    {
        xEventReduceTrack[i].pxEvent = NULL; 
    2f08:	f240 6260 	movw	r2, #1632	; 0x660
    2f0c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f10:	6879      	ldr	r1, [r7, #4]
    2f12:	460b      	mov	r3, r1
    2f14:	005b      	lsls	r3, r3, #1
    2f16:	440b      	add	r3, r1
    2f18:	009b      	lsls	r3, r3, #2
    2f1a:	4413      	add	r3, r2
    2f1c:	2200      	movs	r2, #0
    2f1e:	601a      	str	r2, [r3, #0]
        xEventReduceTrack[i].xNumOfEvent = xEventReduceTrack[i].AllArrive = 0;
    2f20:	f240 6260 	movw	r2, #1632	; 0x660
    2f24:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f28:	6879      	ldr	r1, [r7, #4]
    2f2a:	460b      	mov	r3, r1
    2f2c:	005b      	lsls	r3, r3, #1
    2f2e:	440b      	add	r3, r1
    2f30:	009b      	lsls	r3, r3, #2
    2f32:	4413      	add	r3, r2
    2f34:	3308      	adds	r3, #8
    2f36:	2200      	movs	r2, #0
    2f38:	601a      	str	r2, [r3, #0]
    2f3a:	f240 6260 	movw	r2, #1632	; 0x660
    2f3e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f42:	6879      	ldr	r1, [r7, #4]
    2f44:	460b      	mov	r3, r1
    2f46:	005b      	lsls	r3, r3, #1
    2f48:	440b      	add	r3, r1
    2f4a:	009b      	lsls	r3, r3, #2
    2f4c:	4413      	add	r3, r2
    2f4e:	3308      	adds	r3, #8
    2f50:	6818      	ldr	r0, [r3, #0]
    2f52:	f240 6260 	movw	r2, #1632	; 0x660
    2f56:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f5a:	6879      	ldr	r1, [r7, #4]
    2f5c:	460b      	mov	r3, r1
    2f5e:	005b      	lsls	r3, r3, #1
    2f60:	440b      	add	r3, r1
    2f62:	009b      	lsls	r3, r3, #2
    2f64:	4413      	add	r3, r2
    2f66:	3304      	adds	r3, #4
    2f68:	6018      	str	r0, [r3, #0]
*/

static void clearEventReduceTrack()
{
    portBASE_TYPE i = NUMBEROFSERVANT;
    while(i--)
    2f6a:	687b      	ldr	r3, [r7, #4]
    2f6c:	1e5a      	subs	r2, r3, #1
    2f6e:	607a      	str	r2, [r7, #4]
    2f70:	2b00      	cmp	r3, #0
    2f72:	d1c9      	bne.n	2f08 <clearEventReduceTrack+0xc>
    {
        xEventReduceTrack[i].pxEvent = NULL; 
        xEventReduceTrack[i].xNumOfEvent = xEventReduceTrack[i].AllArrive = 0;
    }
}
    2f74:	370c      	adds	r7, #12
    2f76:	46bd      	mov	sp, r7
    2f78:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f7c:	4770      	bx	lr
    2f7e:	bf00      	nop

00002f80 <vEventGenericReduce>:

void vEventGenericReduce()
{
    2f80:	b580      	push	{r7, lr}
    2f82:	b08a      	sub	sp, #40	; 0x28
    2f84:	af00      	add	r7, sp, #0
    struct tag * temp_tag;
    struct eventData * temp_data;
    volatile xListItem * pxIterator;
    eveRT * temp_RT;

    if( (xLen = listCURRENT_LIST_LENGTH( &xEventExecutablePool )) > 0 )
    2f86:	f640 03d0 	movw	r3, #2256	; 0x8d0
    2f8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f8e:	681b      	ldr	r3, [r3, #0]
    2f90:	61fb      	str	r3, [r7, #28]
    2f92:	69fb      	ldr	r3, [r7, #28]
    2f94:	2b00      	cmp	r3, #0
    2f96:	f340 80dd 	ble.w	3154 <vEventGenericReduce+0x1d4>
    {
        clearEventReduceTrack();
    2f9a:	f7ff ffaf 	bl	2efc <clearEventReduceTrack>
        pxIterator = (xListItem *) xEventExecutablePool.xListEnd.pxNext;
    2f9e:	f640 03d0 	movw	r3, #2256	; 0x8d0
    2fa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fa6:	68db      	ldr	r3, [r3, #12]
    2fa8:	623b      	str	r3, [r7, #32]
        for( i = 0; i < xLen; i++)
    2faa:	2300      	movs	r3, #0
    2fac:	627b      	str	r3, [r7, #36]	; 0x24
    2fae:	e0a6      	b.n	30fe <vEventGenericReduce+0x17e>
        {
            pxDestination = xEventGetpxDestination( pxIterator->pvOwner );
    2fb0:	6a3b      	ldr	r3, [r7, #32]
    2fb2:	68db      	ldr	r3, [r3, #12]
    2fb4:	4618      	mov	r0, r3
    2fb6:	f7ff fced 	bl	2994 <xEventGetpxDestination>
    2fba:	61b8      	str	r0, [r7, #24]
            if(xContexts[pxDestination].xInBoolCount == xContexts[pxDestination].xNumOfIn )
    2fbc:	f640 120c 	movw	r2, #2316	; 0x90c
    2fc0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2fc4:	69b9      	ldr	r1, [r7, #24]
    2fc6:	460b      	mov	r3, r1
    2fc8:	00db      	lsls	r3, r3, #3
    2fca:	1a5b      	subs	r3, r3, r1
    2fcc:	00db      	lsls	r3, r3, #3
    2fce:	4413      	add	r3, r2
    2fd0:	3334      	adds	r3, #52	; 0x34
    2fd2:	6818      	ldr	r0, [r3, #0]
    2fd4:	f640 120c 	movw	r2, #2316	; 0x90c
    2fd8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2fdc:	69b9      	ldr	r1, [r7, #24]
    2fde:	460b      	mov	r3, r1
    2fe0:	00db      	lsls	r3, r3, #3
    2fe2:	1a5b      	subs	r3, r3, r1
    2fe4:	00db      	lsls	r3, r3, #3
    2fe6:	4413      	add	r3, r2
    2fe8:	330c      	adds	r3, #12
    2fea:	681b      	ldr	r3, [r3, #0]
    2fec:	4298      	cmp	r0, r3
    2fee:	f040 8083 	bne.w	30f8 <vEventGenericReduce+0x178>
            {
                temp_RT = &xEventReduceTrack[pxDestination];
    2ff2:	69ba      	ldr	r2, [r7, #24]
    2ff4:	4613      	mov	r3, r2
    2ff6:	005b      	lsls	r3, r3, #1
    2ff8:	4413      	add	r3, r2
    2ffa:	009b      	lsls	r3, r3, #2
    2ffc:	f240 6260 	movw	r2, #1632	; 0x660
    3000:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3004:	4413      	add	r3, r2
    3006:	617b      	str	r3, [r7, #20]
                if(xContexts[pxDestination].xInBoolCount > 1)
    3008:	f640 120c 	movw	r2, #2316	; 0x90c
    300c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3010:	69b9      	ldr	r1, [r7, #24]
    3012:	460b      	mov	r3, r1
    3014:	00db      	lsls	r3, r3, #3
    3016:	1a5b      	subs	r3, r3, r1
    3018:	00db      	lsls	r3, r3, #3
    301a:	4413      	add	r3, r2
    301c:	3334      	adds	r3, #52	; 0x34
    301e:	681b      	ldr	r3, [r3, #0]
    3020:	2b01      	cmp	r3, #1
    3022:	dd57      	ble.n	30d4 <vEventGenericReduce+0x154>
                {
                    if( (temp_count = temp_RT->xNumOfEvent) > 0 )
    3024:	697b      	ldr	r3, [r7, #20]
    3026:	685b      	ldr	r3, [r3, #4]
    3028:	613b      	str	r3, [r7, #16]
    302a:	693b      	ldr	r3, [r7, #16]
    302c:	2b00      	cmp	r3, #0
    302e:	dd41      	ble.n	30b4 <vEventGenericReduce+0x134>
                    {
                        temp_data = xEventGetxData( pxIterator->pvOwner );  
    3030:	6a3b      	ldr	r3, [r7, #32]
    3032:	68db      	ldr	r3, [r3, #12]
    3034:	4618      	mov	r0, r3
    3036:	f7ff fcc5 	bl	29c4 <xEventGetxData>
    303a:	60f8      	str	r0, [r7, #12]
                        temp_tag = xEventGetxTag( pxIterator->pvOwner );
    303c:	6a3b      	ldr	r3, [r7, #32]
    303e:	68db      	ldr	r3, [r3, #12]
    3040:	4618      	mov	r0, r3
    3042:	f7ff fcb3 	bl	29ac <xEventGetxTag>
    3046:	60b8      	str	r0, [r7, #8]
                        ((eveECB *)temp_RT->pxEvent)->xData.xDataArray[temp_count] = temp_data->xDataArray[0];
    3048:	697b      	ldr	r3, [r7, #20]
    304a:	681b      	ldr	r3, [r3, #0]
    304c:	68fa      	ldr	r2, [r7, #12]
    304e:	6811      	ldr	r1, [r2, #0]
    3050:	693a      	ldr	r2, [r7, #16]
    3052:	3206      	adds	r2, #6
    3054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                        if( temp_RT->xNumOfEvent++ == xContexts[pxDestination].xInBoolCount - 1)
    3058:	697b      	ldr	r3, [r7, #20]
    305a:	6859      	ldr	r1, [r3, #4]
    305c:	1c4a      	adds	r2, r1, #1
    305e:	697b      	ldr	r3, [r7, #20]
    3060:	605a      	str	r2, [r3, #4]
    3062:	f640 120c 	movw	r2, #2316	; 0x90c
    3066:	f2c2 0200 	movt	r2, #8192	; 0x2000
    306a:	69b8      	ldr	r0, [r7, #24]
    306c:	4603      	mov	r3, r0
    306e:	00db      	lsls	r3, r3, #3
    3070:	1a1b      	subs	r3, r3, r0
    3072:	00db      	lsls	r3, r3, #3
    3074:	4413      	add	r3, r2
    3076:	3334      	adds	r3, #52	; 0x34
    3078:	681b      	ldr	r3, [r3, #0]
    307a:	3b01      	subs	r3, #1
    307c:	4299      	cmp	r1, r3
    307e:	d102      	bne.n	3086 <vEventGenericReduce+0x106>
                        {
                            temp_RT->AllArrive = 1;
    3080:	697b      	ldr	r3, [r7, #20]
    3082:	2201      	movs	r2, #1
    3084:	609a      	str	r2, [r3, #8]
                        }
                        if(((eveECB *)temp_RT->pxEvent)->xTag.xTimestamp < temp_tag->xTimestamp)
    3086:	697b      	ldr	r3, [r7, #20]
    3088:	681b      	ldr	r3, [r3, #0]
    308a:	68da      	ldr	r2, [r3, #12]
    308c:	68bb      	ldr	r3, [r7, #8]
    308e:	685b      	ldr	r3, [r3, #4]
    3090:	429a      	cmp	r2, r3
    3092:	d204      	bcs.n	309e <vEventGenericReduce+0x11e>
                        {
                            ((eveECB *)temp_RT->pxEvent)->xTag.xTimestamp = temp_tag->xTimestamp;
    3094:	697b      	ldr	r3, [r7, #20]
    3096:	681b      	ldr	r3, [r3, #0]
    3098:	68ba      	ldr	r2, [r7, #8]
    309a:	6852      	ldr	r2, [r2, #4]
    309c:	60da      	str	r2, [r3, #12]
                        }

                        temp_pxEventListItem = (xListItem *) pxIterator;
    309e:	6a3b      	ldr	r3, [r7, #32]
    30a0:	607b      	str	r3, [r7, #4]
                        pxIterator = pxIterator->pxNext;
    30a2:	6a3b      	ldr	r3, [r7, #32]
    30a4:	685b      	ldr	r3, [r3, #4]
    30a6:	623b      	str	r3, [r7, #32]
                        vEventGenericDelete(temp_pxEventListItem->pvOwner);  // delete the redundant events
    30a8:	687b      	ldr	r3, [r7, #4]
    30aa:	68db      	ldr	r3, [r3, #12]
    30ac:	4618      	mov	r0, r3
    30ae:	f000 fa09 	bl	34c4 <vEventGenericDelete>
    30b2:	e021      	b.n	30f8 <vEventGenericReduce+0x178>
                    }
                    else  // the fist one of reduce event
                    {
                        temp_RT->pxEvent = pxIterator->pvOwner; 
    30b4:	6a3b      	ldr	r3, [r7, #32]
    30b6:	68da      	ldr	r2, [r3, #12]
    30b8:	697b      	ldr	r3, [r7, #20]
    30ba:	601a      	str	r2, [r3, #0]
                        temp_RT->xNumOfEvent = 1;
    30bc:	697b      	ldr	r3, [r7, #20]
    30be:	2201      	movs	r2, #1
    30c0:	605a      	str	r2, [r3, #4]
                        
                        temp_pxEventListItem = (xListItem *) pxIterator;
    30c2:	6a3b      	ldr	r3, [r7, #32]
    30c4:	607b      	str	r3, [r7, #4]
                        pxIterator = pxIterator->pxNext;
    30c6:	6a3b      	ldr	r3, [r7, #32]
    30c8:	685b      	ldr	r3, [r3, #4]
    30ca:	623b      	str	r3, [r7, #32]
                        vListRemove(temp_pxEventListItem);
    30cc:	6878      	ldr	r0, [r7, #4]
    30ce:	f001 f883 	bl	41d8 <vListRemove>
    30d2:	e011      	b.n	30f8 <vEventGenericReduce+0x178>
                    }
                }
                else // only one event for the target servant
                {
                    temp_RT->pxEvent = pxIterator->pvOwner; 
    30d4:	6a3b      	ldr	r3, [r7, #32]
    30d6:	68da      	ldr	r2, [r3, #12]
    30d8:	697b      	ldr	r3, [r7, #20]
    30da:	601a      	str	r2, [r3, #0]
                    temp_RT->xNumOfEvent = 1;
    30dc:	697b      	ldr	r3, [r7, #20]
    30de:	2201      	movs	r2, #1
    30e0:	605a      	str	r2, [r3, #4]
                    temp_RT->AllArrive = 1;
    30e2:	697b      	ldr	r3, [r7, #20]
    30e4:	2201      	movs	r2, #1
    30e6:	609a      	str	r2, [r3, #8]
                 
                    temp_pxEventListItem = (xListItem *) pxIterator;
    30e8:	6a3b      	ldr	r3, [r7, #32]
    30ea:	607b      	str	r3, [r7, #4]
                    pxIterator = pxIterator->pxNext;
    30ec:	6a3b      	ldr	r3, [r7, #32]
    30ee:	685b      	ldr	r3, [r3, #4]
    30f0:	623b      	str	r3, [r7, #32]
                    vListRemove(temp_pxEventListItem);
    30f2:	6878      	ldr	r0, [r7, #4]
    30f4:	f001 f870 	bl	41d8 <vListRemove>

    if( (xLen = listCURRENT_LIST_LENGTH( &xEventExecutablePool )) > 0 )
    {
        clearEventReduceTrack();
        pxIterator = (xListItem *) xEventExecutablePool.xListEnd.pxNext;
        for( i = 0; i < xLen; i++)
    30f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    30fa:	3301      	adds	r3, #1
    30fc:	627b      	str	r3, [r7, #36]	; 0x24
    30fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3100:	69fb      	ldr	r3, [r7, #28]
    3102:	429a      	cmp	r2, r3
    3104:	f6ff af54 	blt.w	2fb0 <vEventGenericReduce+0x30>
                    pxIterator = pxIterator->pxNext;
                    vListRemove(temp_pxEventListItem);
                }
            }
        } // end for
        for(i=0; i<NUMBEROFSERVANT; ++i)
    3108:	2300      	movs	r3, #0
    310a:	627b      	str	r3, [r7, #36]	; 0x24
    310c:	e01f      	b.n	314e <vEventGenericReduce+0x1ce>
        {
            if(xEventReduceTrack[i].AllArrive)
    310e:	f240 6260 	movw	r2, #1632	; 0x660
    3112:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3116:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3118:	460b      	mov	r3, r1
    311a:	005b      	lsls	r3, r3, #1
    311c:	440b      	add	r3, r1
    311e:	009b      	lsls	r3, r3, #2
    3120:	4413      	add	r3, r2
    3122:	3308      	adds	r3, #8
    3124:	681b      	ldr	r3, [r3, #0]
    3126:	2b00      	cmp	r3, #0
    3128:	d00e      	beq.n	3148 <vEventGenericReduce+0x1c8>
            {
                prvEventListGenericInsert(&((eveECB *)xEventReduceTrack[i].pxEvent)->xEventListItem);
    312a:	f240 6260 	movw	r2, #1632	; 0x660
    312e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3132:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3134:	460b      	mov	r3, r1
    3136:	005b      	lsls	r3, r3, #1
    3138:	440b      	add	r3, r1
    313a:	009b      	lsls	r3, r3, #2
    313c:	4413      	add	r3, r2
    313e:	681b      	ldr	r3, [r3, #0]
    3140:	3320      	adds	r3, #32
    3142:	4618      	mov	r0, r3
    3144:	f7ff fd7c 	bl	2c40 <prvEventListGenericInsert>
                    pxIterator = pxIterator->pxNext;
                    vListRemove(temp_pxEventListItem);
                }
            }
        } // end for
        for(i=0; i<NUMBEROFSERVANT; ++i)
    3148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    314a:	3301      	adds	r3, #1
    314c:	627b      	str	r3, [r7, #36]	; 0x24
    314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3150:	2b2e      	cmp	r3, #46	; 0x2e
    3152:	dddc      	ble.n	310e <vEventGenericReduce+0x18e>
            {
                prvEventListGenericInsert(&((eveECB *)xEventReduceTrack[i].pxEvent)->xEventListItem);
            }
        } // end for
    } // end if
}
    3154:	3728      	adds	r7, #40	; 0x28
    3156:	46bd      	mov	sp, r7
    3158:	bd80      	pop	{r7, pc}
    315a:	bf00      	nop

0000315c <pOverLap>:


static portBASE_TYPE pOverLap( xListItem * pxEventListItem)
{
    315c:	b480      	push	{r7}
    315e:	b087      	sub	sp, #28
    3160:	af00      	add	r7, sp, #0
    3162:	6078      	str	r0, [r7, #4]
    eveECB * pxEvent = (eveECB *)pxEventListItem->pvOwner;
    3164:	687b      	ldr	r3, [r7, #4]
    3166:	68db      	ldr	r3, [r3, #12]
    3168:	617b      	str	r3, [r7, #20]
    portBASE_TYPE pxDestination = pxEvent->pxDestination; 
    316a:	697b      	ldr	r3, [r7, #20]
    316c:	685b      	ldr	r3, [r3, #4]
    316e:	613b      	str	r3, [r7, #16]
    portTickType start = pxEvent->xTag.xTimestamp;
    3170:	697b      	ldr	r3, [r7, #20]
    3172:	68db      	ldr	r3, [r3, #12]
    3174:	60fb      	str	r3, [r7, #12]
    portTickType end   = start + xContexts[pxDestination].xLet;
    3176:	f640 120c 	movw	r2, #2316	; 0x90c
    317a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    317e:	6939      	ldr	r1, [r7, #16]
    3180:	460b      	mov	r3, r1
    3182:	00db      	lsls	r3, r3, #3
    3184:	1a5b      	subs	r3, r3, r1
    3186:	00db      	lsls	r3, r3, #3
    3188:	4413      	add	r3, r2
    318a:	3324      	adds	r3, #36	; 0x24
    318c:	681a      	ldr	r2, [r3, #0]
    318e:	68fb      	ldr	r3, [r7, #12]
    3190:	4413      	add	r3, r2
    3192:	60bb      	str	r3, [r7, #8]

    // different execution time overlaped
    if( start % GCDPeriod < INPUT || start % GCDPeriod > (GCDPeriod - OUTPUT) || 
    3194:	f240 6358 	movw	r3, #1624	; 0x658
    3198:	f2c2 0300 	movt	r3, #8192	; 0x2000
    319c:	681a      	ldr	r2, [r3, #0]
    319e:	68fb      	ldr	r3, [r7, #12]
    31a0:	fbb3 f1f2 	udiv	r1, r3, r2
    31a4:	fb02 f201 	mul.w	r2, r2, r1
    31a8:	1a9b      	subs	r3, r3, r2
    31aa:	2b02      	cmp	r3, #2
    31ac:	d932      	bls.n	3214 <pOverLap+0xb8>
    31ae:	f240 6358 	movw	r3, #1624	; 0x658
    31b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31b6:	681a      	ldr	r2, [r3, #0]
    31b8:	68fb      	ldr	r3, [r7, #12]
    31ba:	fbb3 f1f2 	udiv	r1, r3, r2
    31be:	fb02 f201 	mul.w	r2, r2, r1
    31c2:	1a9a      	subs	r2, r3, r2
    31c4:	f240 6358 	movw	r3, #1624	; 0x658
    31c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31cc:	681b      	ldr	r3, [r3, #0]
    31ce:	3b03      	subs	r3, #3
    31d0:	429a      	cmp	r2, r3
    31d2:	d81f      	bhi.n	3214 <pOverLap+0xb8>
            end % GCDPeriod < INPUT || end % GCDPeriod > (GCDPeriod - OUTPUT))
    31d4:	f240 6358 	movw	r3, #1624	; 0x658
    31d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31dc:	681a      	ldr	r2, [r3, #0]
    31de:	68bb      	ldr	r3, [r7, #8]
    31e0:	fbb3 f1f2 	udiv	r1, r3, r2
    31e4:	fb02 f201 	mul.w	r2, r2, r1
    31e8:	1a9b      	subs	r3, r3, r2
    portBASE_TYPE pxDestination = pxEvent->pxDestination; 
    portTickType start = pxEvent->xTag.xTimestamp;
    portTickType end   = start + xContexts[pxDestination].xLet;

    // different execution time overlaped
    if( start % GCDPeriod < INPUT || start % GCDPeriod > (GCDPeriod - OUTPUT) || 
    31ea:	2b02      	cmp	r3, #2
    31ec:	d912      	bls.n	3214 <pOverLap+0xb8>
            end % GCDPeriod < INPUT || end % GCDPeriod > (GCDPeriod - OUTPUT))
    31ee:	f240 6358 	movw	r3, #1624	; 0x658
    31f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31f6:	681a      	ldr	r2, [r3, #0]
    31f8:	68bb      	ldr	r3, [r7, #8]
    31fa:	fbb3 f1f2 	udiv	r1, r3, r2
    31fe:	fb02 f201 	mul.w	r2, r2, r1
    3202:	1a9a      	subs	r2, r3, r2
    3204:	f240 6358 	movw	r3, #1624	; 0x658
    3208:	f2c2 0300 	movt	r3, #8192	; 0x2000
    320c:	681b      	ldr	r3, [r3, #0]
    320e:	3b03      	subs	r3, #3
    3210:	429a      	cmp	r2, r3
    3212:	d901      	bls.n	3218 <pOverLap+0xbc>
    {
        return 1;
    3214:	2301      	movs	r3, #1
    3216:	e000      	b.n	321a <pOverLap+0xbe>
    }
    return 0;
    3218:	2300      	movs	r3, #0
}
    321a:	4618      	mov	r0, r3
    321c:	371c      	adds	r7, #28
    321e:	46bd      	mov	sp, r7
    3220:	f85d 7b04 	ldr.w	r7, [sp], #4
    3224:	4770      	bx	lr
    3226:	bf00      	nop

00003228 <xSetTimestamp>:

static void xSetTimestamp( xListItem * pxEventListItem)
{
    3228:	b580      	push	{r7, lr}
    322a:	b084      	sub	sp, #16
    322c:	af00      	add	r7, sp, #0
    322e:	6078      	str	r0, [r7, #4]
    portBASE_TYPE i;
    eveECB *pxEvent;  
    
    pxEvent = (eveECB *) pxEventListItem->pvOwner;
    3230:	687b      	ldr	r3, [r7, #4]
    3232:	68db      	ldr	r3, [r3, #12]
    3234:	60fb      	str	r3, [r7, #12]
    pxEvent->xTag.xTimestamp = xFutureModelTime;
    3236:	f240 635c 	movw	r3, #1628	; 0x65c
    323a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    323e:	681a      	ldr	r2, [r3, #0]
    3240:	68fb      	ldr	r3, [r7, #12]
    3242:	60da      	str	r2, [r3, #12]

    if( pOverLap(pxEventListItem )== 0 ) // not overlaped
    3244:	6878      	ldr	r0, [r7, #4]
    3246:	f7ff ff89 	bl	315c <pOverLap>
    324a:	4603      	mov	r3, r0
    324c:	2b00      	cmp	r3, #0
    324e:	d122      	bne.n	3296 <xSetTimestamp+0x6e>
    {
        xFutureModelTime += xContexts[pxEvent->pxDestination].xLet; // update future model time
    3250:	68fb      	ldr	r3, [r7, #12]
    3252:	6859      	ldr	r1, [r3, #4]
    3254:	f640 120c 	movw	r2, #2316	; 0x90c
    3258:	f2c2 0200 	movt	r2, #8192	; 0x2000
    325c:	460b      	mov	r3, r1
    325e:	00db      	lsls	r3, r3, #3
    3260:	1a5b      	subs	r3, r3, r1
    3262:	00db      	lsls	r3, r3, #3
    3264:	4413      	add	r3, r2
    3266:	3324      	adds	r3, #36	; 0x24
    3268:	681a      	ldr	r2, [r3, #0]
    326a:	f240 635c 	movw	r3, #1628	; 0x65c
    326e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3272:	681b      	ldr	r3, [r3, #0]
    3274:	441a      	add	r2, r3
    3276:	f240 635c 	movw	r3, #1628	; 0x65c
    327a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    327e:	601a      	str	r2, [r3, #0]
        vListRemove( pxEventListItem); 
    3280:	6878      	ldr	r0, [r7, #4]
    3282:	f000 ffa9 	bl	41d8 <vListRemove>
        vListInsertEnd(&xEventReadyList, pxEventListItem);
    3286:	f640 00f8 	movw	r0, #2296	; 0x8f8
    328a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    328e:	6879      	ldr	r1, [r7, #4]
    3290:	f000 ff42 	bl	4118 <vListInsertEnd>
    3294:	e042      	b.n	331c <xSetTimestamp+0xf4>
    }
    else  // overlaped
    {
        // set the future model time to start time of next LET
        xFutureModelTime = (xFutureModelTime/GCDPeriod) * GCDPeriod + GCDPeriod + INPUT;  
    3296:	f240 635c 	movw	r3, #1628	; 0x65c
    329a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    329e:	681a      	ldr	r2, [r3, #0]
    32a0:	f240 6358 	movw	r3, #1624	; 0x658
    32a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32a8:	681b      	ldr	r3, [r3, #0]
    32aa:	fbb2 f3f3 	udiv	r3, r2, r3
    32ae:	1c5a      	adds	r2, r3, #1
    32b0:	f240 6358 	movw	r3, #1624	; 0x658
    32b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32b8:	681b      	ldr	r3, [r3, #0]
    32ba:	fb03 f302 	mul.w	r3, r3, r2
    32be:	1cda      	adds	r2, r3, #3
    32c0:	f240 635c 	movw	r3, #1628	; 0x65c
    32c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32c8:	601a      	str	r2, [r3, #0]
        pxEvent->xTag.xTimestamp = xFutureModelTime;
    32ca:	f240 635c 	movw	r3, #1628	; 0x65c
    32ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32d2:	681a      	ldr	r2, [r3, #0]
    32d4:	68fb      	ldr	r3, [r7, #12]
    32d6:	60da      	str	r2, [r3, #12]
        xFutureModelTime += xContexts[pxEvent->pxDestination].xLet;
    32d8:	68fb      	ldr	r3, [r7, #12]
    32da:	6859      	ldr	r1, [r3, #4]
    32dc:	f640 120c 	movw	r2, #2316	; 0x90c
    32e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    32e4:	460b      	mov	r3, r1
    32e6:	00db      	lsls	r3, r3, #3
    32e8:	1a5b      	subs	r3, r3, r1
    32ea:	00db      	lsls	r3, r3, #3
    32ec:	4413      	add	r3, r2
    32ee:	3324      	adds	r3, #36	; 0x24
    32f0:	681a      	ldr	r2, [r3, #0]
    32f2:	f240 635c 	movw	r3, #1628	; 0x65c
    32f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32fa:	681b      	ldr	r3, [r3, #0]
    32fc:	441a      	add	r2, r3
    32fe:	f240 635c 	movw	r3, #1628	; 0x65c
    3302:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3306:	601a      	str	r2, [r3, #0]

        vListRemove( pxEventListItem); 
    3308:	6878      	ldr	r0, [r7, #4]
    330a:	f000 ff65 	bl	41d8 <vListRemove>
        vListInsertEnd(&xEventNonExecutablePool, pxEventListItem);
    330e:	f640 00a8 	movw	r0, #2216	; 0x8a8
    3312:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3316:	6879      	ldr	r1, [r7, #4]
    3318:	f000 fefe 	bl	4118 <vListInsertEnd>
    }
}
    331c:	3710      	adds	r7, #16
    331e:	46bd      	mov	sp, r7
    3320:	bd80      	pop	{r7, pc}
    3322:	bf00      	nop

00003324 <pEqualxDeadline>:

static portBASE_TYPE pEqualxDeadline(struct tag * xTag1, struct tag * xTag2)
{
    3324:	b480      	push	{r7}
    3326:	b083      	sub	sp, #12
    3328:	af00      	add	r7, sp, #0
    332a:	6078      	str	r0, [r7, #4]
    332c:	6039      	str	r1, [r7, #0]
    return (xTag1->xDeadline == xTag2->xDeadline);
    332e:	687b      	ldr	r3, [r7, #4]
    3330:	681a      	ldr	r2, [r3, #0]
    3332:	683b      	ldr	r3, [r7, #0]
    3334:	681b      	ldr	r3, [r3, #0]
    3336:	429a      	cmp	r2, r3
    3338:	bf14      	ite	ne
    333a:	2300      	movne	r3, #0
    333c:	2301      	moveq	r3, #1
    333e:	b2db      	uxtb	r3, r3
}
    3340:	4618      	mov	r0, r3
    3342:	370c      	adds	r7, #12
    3344:	46bd      	mov	sp, r7
    3346:	f85d 7b04 	ldr.w	r7, [sp], #4
    334a:	4770      	bx	lr

0000334c <xEventGenericSerialize>:

// update the timestamp of event in xEventExecutableList in terms of xFutureModelTime
portBASE_TYPE xEventGenericSerialize()
{
    334c:	b580      	push	{r7, lr}
    334e:	b084      	sub	sp, #16
    3350:	af00      	add	r7, sp, #0
    xListItem * flag_pxEventListItem;
    struct tag * origin_tag;
    portBASE_TYPE count = 1;
    3352:	2301      	movs	r3, #1
    3354:	60bb      	str	r3, [r7, #8]

    if( listCURRENT_LIST_LENGTH( &xEventExecutableList ) > 0 )
    3356:	f640 03e4 	movw	r3, #2276	; 0x8e4
    335a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    335e:	681b      	ldr	r3, [r3, #0]
    3360:	2b00      	cmp	r3, #0
    3362:	d00a      	beq.n	337a <xEventGenericSerialize+0x2e>
    {
        origin_tag = xEventGetxTag( (xEventExecutableList.xListEnd.pxNext)->pvOwner );
    3364:	f640 03e4 	movw	r3, #2276	; 0x8e4
    3368:	f2c2 0300 	movt	r3, #8192	; 0x2000
    336c:	68db      	ldr	r3, [r3, #12]
    336e:	68db      	ldr	r3, [r3, #12]
    3370:	4618      	mov	r0, r3
    3372:	f7ff fb1b 	bl	29ac <xEventGetxTag>
    3376:	60f8      	str	r0, [r7, #12]
    }
    
    while( listCURRENT_LIST_LENGTH(&xEventExecutableList) > 0 )
    3378:	e035      	b.n	33e6 <xEventGenericSerialize+0x9a>
    337a:	e034      	b.n	33e6 <xEventGenericSerialize+0x9a>
    {
        flag_pxEventListItem = (xListItem *) xEventExecutableList.xListEnd.pxNext;
    337c:	f640 03e4 	movw	r3, #2276	; 0x8e4
    3380:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3384:	68db      	ldr	r3, [r3, #12]
    3386:	607b      	str	r3, [r7, #4]
        // only the timestamp of c_servant need updating
        // only remove events that have same xDeadline with the first event in xEventExecutableList to xEventReadyList

        if( xContexts[xEventGetpxDestination(flag_pxEventListItem->pvOwner)].xType == 2 )
    3388:	687b      	ldr	r3, [r7, #4]
    338a:	68db      	ldr	r3, [r3, #12]
    338c:	4618      	mov	r0, r3
    338e:	f7ff fb01 	bl	2994 <xEventGetpxDestination>
    3392:	4601      	mov	r1, r0
    3394:	f640 120c 	movw	r2, #2316	; 0x90c
    3398:	f2c2 0200 	movt	r2, #8192	; 0x2000
    339c:	460b      	mov	r3, r1
    339e:	00db      	lsls	r3, r3, #3
    33a0:	1a5b      	subs	r3, r3, r1
    33a2:	00db      	lsls	r3, r3, #3
    33a4:	4413      	add	r3, r2
    33a6:	3304      	adds	r3, #4
    33a8:	681b      	ldr	r3, [r3, #0]
    33aa:	2b02      	cmp	r3, #2
    33ac:	d111      	bne.n	33d2 <xEventGenericSerialize+0x86>
        {
            if( pEqualxDeadline( xEventGetxTag( flag_pxEventListItem->pvOwner ), origin_tag ))
    33ae:	687b      	ldr	r3, [r7, #4]
    33b0:	68db      	ldr	r3, [r3, #12]
    33b2:	4618      	mov	r0, r3
    33b4:	f7ff fafa 	bl	29ac <xEventGetxTag>
    33b8:	4603      	mov	r3, r0
    33ba:	4618      	mov	r0, r3
    33bc:	68f9      	ldr	r1, [r7, #12]
    33be:	f7ff ffb1 	bl	3324 <pEqualxDeadline>
    33c2:	4603      	mov	r3, r0
    33c4:	2b00      	cmp	r3, #0
    33c6:	d003      	beq.n	33d0 <xEventGenericSerialize+0x84>
            {
                // update the timestamp of event
                // if overlaped, then remove the event to xEventNonExecutablePool
                // else, remove the event to xEvenReadyList
                xSetTimestamp( flag_pxEventListItem);
    33c8:	6878      	ldr	r0, [r7, #4]
    33ca:	f7ff ff2d 	bl	3228 <xSetTimestamp>
    33ce:	e00a      	b.n	33e6 <xEventGenericSerialize+0x9a>
            }
            else
            {
                break;
    33d0:	e010      	b.n	33f4 <xEventGenericSerialize+0xa8>
            }
        }
        else
        {
            vListRemove( flag_pxEventListItem );
    33d2:	6878      	ldr	r0, [r7, #4]
    33d4:	f000 ff00 	bl	41d8 <vListRemove>
            vListInsertEnd( &xEventReadyList, flag_pxEventListItem );
    33d8:	f640 00f8 	movw	r0, #2296	; 0x8f8
    33dc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    33e0:	6879      	ldr	r1, [r7, #4]
    33e2:	f000 fe99 	bl	4118 <vListInsertEnd>
    if( listCURRENT_LIST_LENGTH( &xEventExecutableList ) > 0 )
    {
        origin_tag = xEventGetxTag( (xEventExecutableList.xListEnd.pxNext)->pvOwner );
    }
    
    while( listCURRENT_LIST_LENGTH(&xEventExecutableList) > 0 )
    33e6:	f640 03e4 	movw	r3, #2276	; 0x8e4
    33ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33ee:	681b      	ldr	r3, [r3, #0]
    33f0:	2b00      	cmp	r3, #0
    33f2:	d1c3      	bne.n	337c <xEventGenericSerialize+0x30>
            vListRemove( flag_pxEventListItem );
            vListInsertEnd( &xEventReadyList, flag_pxEventListItem );
        }
    }

    if( listCURRENT_LIST_LENGTH( &xEventReadyList ) > 0 )
    33f4:	f640 03f8 	movw	r3, #2296	; 0x8f8
    33f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33fc:	681b      	ldr	r3, [r3, #0]
    33fe:	2b00      	cmp	r3, #0
    3400:	d00a      	beq.n	3418 <xEventGenericSerialize+0xcc>
    {
        return xEventGetpxDestination((xEventReadyList.xListEnd.pxNext)->pvOwner); //  the first one repsenting the type of events
    3402:	f640 03f8 	movw	r3, #2296	; 0x8f8
    3406:	f2c2 0300 	movt	r3, #8192	; 0x2000
    340a:	68db      	ldr	r3, [r3, #12]
    340c:	68db      	ldr	r3, [r3, #12]
    340e:	4618      	mov	r0, r3
    3410:	f7ff fac0 	bl	2994 <xEventGetpxDestination>
    3414:	4603      	mov	r3, r0
    3416:	e001      	b.n	341c <xEventGenericSerialize+0xd0>
    }
    return -1; // no event avaliable
    3418:	f04f 33ff 	mov.w	r3, #4294967295
}
    341c:	4618      	mov	r0, r3
    341e:	3710      	adds	r7, #16
    3420:	46bd      	mov	sp, r7
    3422:	bd80      	pop	{r7, pc}

00003424 <vEventGenericSend>:

void vEventGenericSend( xEventHandle pxEvent )
{
    3424:	b580      	push	{r7, lr}
    3426:	b082      	sub	sp, #8
    3428:	af00      	add	r7, sp, #0
    342a:	6078      	str	r0, [r7, #4]
    vListInsertEnd(&xEventNonExecutablePool, (xListItem *)&((eveECB *)pxEvent)->xEventListItem);
    342c:	687b      	ldr	r3, [r7, #4]
    342e:	3320      	adds	r3, #32
    3430:	f640 00a8 	movw	r0, #2216	; 0x8a8
    3434:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3438:	4619      	mov	r1, r3
    343a:	f000 fe6d 	bl	4118 <vListInsertEnd>
}
    343e:	3708      	adds	r7, #8
    3440:	46bd      	mov	sp, r7
    3442:	bd80      	pop	{r7, pc}

00003444 <pxEventGenericReceive>:

xEventHandle pxEventGenericReceive()
{
    3444:	b580      	push	{r7, lr}
    3446:	b082      	sub	sp, #8
    3448:	af00      	add	r7, sp, #0
    // xEventReadyList must not be null, which is ensured by servant
    xListItem * pxEventList;

    taskENTER_CRITICAL();
    344a:	f002 fc77 	bl	5d3c <vPortEnterCritical>
    pxEventList= (xListItem *)xEventReadyList.xListEnd.pxNext;
    344e:	f640 03f8 	movw	r3, #2296	; 0x8f8
    3452:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3456:	68db      	ldr	r3, [r3, #12]
    3458:	607b      	str	r3, [r7, #4]
    vListRemove(pxEventList);
    345a:	6878      	ldr	r0, [r7, #4]
    345c:	f000 febc 	bl	41d8 <vListRemove>
    vListInsertEnd(&xEventNonExecutablePool, pxEventList);  // reuse event, which will be update by servant 
    3460:	f640 00a8 	movw	r0, #2216	; 0x8a8
    3464:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3468:	6879      	ldr	r1, [r7, #4]
    346a:	f000 fe55 	bl	4118 <vListInsertEnd>
    taskEXIT_CRITICAL();
    346e:	f002 fc7b 	bl	5d68 <vPortExitCritical>

    return (xEventHandle) pxEventList->pvOwner;
    3472:	687b      	ldr	r3, [r7, #4]
    3474:	68db      	ldr	r3, [r3, #12]
}
    3476:	4618      	mov	r0, r3
    3478:	3708      	adds	r7, #8
    347a:	46bd      	mov	sp, r7
    347c:	bd80      	pop	{r7, pc}
    347e:	bf00      	nop

00003480 <vEventGenericUpdate>:

void vEventGenericUpdate( xEventHandle xEvent, portBASE_TYPE pxSource, portTickType xDeadline, portTickType xTimestamp, struct eventData * xData)
{
    3480:	b480      	push	{r7}
    3482:	b087      	sub	sp, #28
    3484:	af00      	add	r7, sp, #0
    3486:	60f8      	str	r0, [r7, #12]
    3488:	60b9      	str	r1, [r7, #8]
    348a:	607a      	str	r2, [r7, #4]
    348c:	603b      	str	r3, [r7, #0]
    eveECB * pxEvent = (eveECB *)xEvent;
    348e:	68fb      	ldr	r3, [r7, #12]
    3490:	617b      	str	r3, [r7, #20]
    pxEvent->pxSource = pxSource;
    3492:	697b      	ldr	r3, [r7, #20]
    3494:	68ba      	ldr	r2, [r7, #8]
    3496:	601a      	str	r2, [r3, #0]
    pxEvent->xTag.xDeadline = xDeadline;
    3498:	697b      	ldr	r3, [r7, #20]
    349a:	687a      	ldr	r2, [r7, #4]
    349c:	609a      	str	r2, [r3, #8]
    pxEvent->xTag.xTimestamp = xTimestamp; 
    349e:	697b      	ldr	r3, [r7, #20]
    34a0:	683a      	ldr	r2, [r7, #0]
    34a2:	60da      	str	r2, [r3, #12]
    pxEvent->xTag.xMicroStep = 0;
    34a4:	697b      	ldr	r3, [r7, #20]
    34a6:	2200      	movs	r2, #0
    34a8:	615a      	str	r2, [r3, #20]
    pxEvent->xData = *xData;
    34aa:	697b      	ldr	r3, [r7, #20]
    34ac:	6a3a      	ldr	r2, [r7, #32]
    34ae:	3318      	adds	r3, #24
    34b0:	e892 0003 	ldmia.w	r2, {r0, r1}
    34b4:	e883 0003 	stmia.w	r3, {r0, r1}
}
    34b8:	371c      	adds	r7, #28
    34ba:	46bd      	mov	sp, r7
    34bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    34c0:	4770      	bx	lr
    34c2:	bf00      	nop

000034c4 <vEventGenericDelete>:

void vEventGenericDelete( xEventHandle xEvent)
{
    34c4:	b580      	push	{r7, lr}
    34c6:	b084      	sub	sp, #16
    34c8:	af00      	add	r7, sp, #0
    34ca:	6078      	str	r0, [r7, #4]
    xListItem * pxEventItem;
    taskENTER_CRITICAL();
    34cc:	f002 fc36 	bl	5d3c <vPortEnterCritical>

    pxEventItem = &((eveECB *)xEvent)->xEventListItem;
    34d0:	687b      	ldr	r3, [r7, #4]
    34d2:	3320      	adds	r3, #32
    34d4:	60fb      	str	r3, [r7, #12]
    vListRemove (pxEventItem);
    34d6:	68f8      	ldr	r0, [r7, #12]
    34d8:	f000 fe7e 	bl	41d8 <vListRemove>
    vListInsertEnd( &xEventIdleList, pxEventItem );
    34dc:	f640 0094 	movw	r0, #2196	; 0x894
    34e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    34e4:	68f9      	ldr	r1, [r7, #12]
    34e6:	f000 fe17 	bl	4118 <vListInsertEnd>

    taskEXIT_CRITICAL();
    34ea:	f002 fc3d 	bl	5d68 <vPortExitCritical>
}
    34ee:	3710      	adds	r7, #16
    34f0:	46bd      	mov	sp, r7
    34f2:	bd80      	pop	{r7, pc}

000034f4 <vSemaphoreInitialise>:

extern portBASE_TYPE xActuatorOfTask[NUMBEROFTASK];

/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    34f4:	b580      	push	{r7, lr}
    34f6:	b082      	sub	sp, #8
    34f8:	af00      	add	r7, sp, #0
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFTHREAD; ++ i )
    34fa:	2300      	movs	r3, #0
    34fc:	607b      	str	r3, [r7, #4]
    34fe:	e033      	b.n	3568 <vSemaphoreInitialise+0x74>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
    3500:	2001      	movs	r0, #1
    3502:	2100      	movs	r1, #0
    3504:	2203      	movs	r2, #3
    3506:	f000 fedd 	bl	42c4 <xQueueGenericCreate>
    350a:	4601      	mov	r1, r0
    350c:	f241 3354 	movw	r3, #4948	; 0x1354
    3510:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3514:	687a      	ldr	r2, [r7, #4]
    3516:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    351a:	f241 3354 	movw	r3, #4948	; 0x1354
    351e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3522:	687a      	ldr	r2, [r7, #4]
    3524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3528:	2b00      	cmp	r3, #0
    352a:	d00c      	beq.n	3546 <vSemaphoreInitialise+0x52>
    352c:	f241 3354 	movw	r3, #4948	; 0x1354
    3530:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3534:	687a      	ldr	r2, [r7, #4]
    3536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    353a:	4618      	mov	r0, r3
    353c:	2100      	movs	r1, #0
    353e:	2200      	movs	r2, #0
    3540:	2300      	movs	r3, #0
    3542:	f000 ff4d 	bl	43e0 <xQueueGenericSend>
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    3546:	f241 3354 	movw	r3, #4948	; 0x1354
    354a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    354e:	687a      	ldr	r2, [r7, #4]
    3550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3554:	4618      	mov	r0, r3
    3556:	2100      	movs	r1, #0
    3558:	f04f 32ff 	mov.w	r2, #4294967295
    355c:	2300      	movs	r3, #0
    355e:	f001 f805 	bl	456c <xQueueGenericReceive>
/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFTHREAD; ++ i )
    3562:	687b      	ldr	r3, [r7, #4]
    3564:	3301      	adds	r3, #1
    3566:	607b      	str	r3, [r7, #4]
    3568:	687b      	ldr	r3, [r7, #4]
    356a:	2b03      	cmp	r3, #3
    356c:	ddc8      	ble.n	3500 <vSemaphoreInitialise+0xc>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    }
}
    356e:	3708      	adds	r7, #8
    3570:	46bd      	mov	sp, r7
    3572:	bd80      	pop	{r7, pc}

00003574 <vContextInit>:
/*
 * Set all the parameters of S-Servants.
 *
 * */
void vContextInit()
{
    3574:	b480      	push	{r7}
    3576:	b085      	sub	sp, #20
    3578:	af00      	add	r7, sp, #0
    portBASE_TYPE i, j;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    357a:	2300      	movs	r3, #0
    357c:	60fb      	str	r3, [r7, #12]
    357e:	e0a1      	b.n	36c4 <vContextInit+0x150>
    {
        xContexts[i].xMyFlag = i;
    3580:	f640 120c 	movw	r2, #2316	; 0x90c
    3584:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3588:	68f9      	ldr	r1, [r7, #12]
    358a:	460b      	mov	r3, r1
    358c:	00db      	lsls	r3, r3, #3
    358e:	1a5b      	subs	r3, r3, r1
    3590:	00db      	lsls	r3, r3, #3
    3592:	4413      	add	r3, r2
    3594:	68fa      	ldr	r2, [r7, #12]
    3596:	601a      	str	r2, [r3, #0]
        xContexts[i].xType = 2;
    3598:	f640 120c 	movw	r2, #2316	; 0x90c
    359c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    35a0:	68f9      	ldr	r1, [r7, #12]
    35a2:	460b      	mov	r3, r1
    35a4:	00db      	lsls	r3, r3, #3
    35a6:	1a5b      	subs	r3, r3, r1
    35a8:	00db      	lsls	r3, r3, #3
    35aa:	4413      	add	r3, r2
    35ac:	3304      	adds	r3, #4
    35ae:	2202      	movs	r2, #2
    35b0:	601a      	str	r2, [r3, #0]
        xContexts[i].xCount = 1; // the first period of task is used to init system
    35b2:	f640 120c 	movw	r2, #2316	; 0x90c
    35b6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    35ba:	68f9      	ldr	r1, [r7, #12]
    35bc:	460b      	mov	r3, r1
    35be:	00db      	lsls	r3, r3, #3
    35c0:	1a5b      	subs	r3, r3, r1
    35c2:	00db      	lsls	r3, r3, #3
    35c4:	4413      	add	r3, r2
    35c6:	3308      	adds	r3, #8
    35c8:	2201      	movs	r2, #1
    35ca:	601a      	str	r2, [r3, #0]
        xContexts[i].xNumOfIn = 0;
    35cc:	f640 120c 	movw	r2, #2316	; 0x90c
    35d0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    35d4:	68f9      	ldr	r1, [r7, #12]
    35d6:	460b      	mov	r3, r1
    35d8:	00db      	lsls	r3, r3, #3
    35da:	1a5b      	subs	r3, r3, r1
    35dc:	00db      	lsls	r3, r3, #3
    35de:	4413      	add	r3, r2
    35e0:	330c      	adds	r3, #12
    35e2:	2200      	movs	r2, #0
    35e4:	601a      	str	r2, [r3, #0]
        xContexts[i].xNumOfOut = 0;
    35e6:	f640 120c 	movw	r2, #2316	; 0x90c
    35ea:	f2c2 0200 	movt	r2, #8192	; 0x2000
    35ee:	68f9      	ldr	r1, [r7, #12]
    35f0:	460b      	mov	r3, r1
    35f2:	00db      	lsls	r3, r3, #3
    35f4:	1a5b      	subs	r3, r3, r1
    35f6:	00db      	lsls	r3, r3, #3
    35f8:	4413      	add	r3, r2
    35fa:	3310      	adds	r3, #16
    35fc:	2200      	movs	r2, #0
    35fe:	601a      	str	r2, [r3, #0]
        xContexts[i].xLet = xLetOfServant[i];
    3600:	f240 03c4 	movw	r3, #196	; 0xc4
    3604:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3608:	68fa      	ldr	r2, [r7, #12]
    360a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    360e:	f640 120c 	movw	r2, #2316	; 0x90c
    3612:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3616:	68f9      	ldr	r1, [r7, #12]
    3618:	460b      	mov	r3, r1
    361a:	00db      	lsls	r3, r3, #3
    361c:	1a5b      	subs	r3, r3, r1
    361e:	00db      	lsls	r3, r3, #3
    3620:	4413      	add	r3, r2
    3622:	3324      	adds	r3, #36	; 0x24
    3624:	6018      	str	r0, [r3, #0]
        xContexts[i].xFp = xServantTable[i];
    3626:	f240 4374 	movw	r3, #1140	; 0x474
    362a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    362e:	68fa      	ldr	r2, [r7, #12]
    3630:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    3634:	f640 120c 	movw	r2, #2316	; 0x90c
    3638:	f2c2 0200 	movt	r2, #8192	; 0x2000
    363c:	68f9      	ldr	r1, [r7, #12]
    363e:	460b      	mov	r3, r1
    3640:	00db      	lsls	r3, r3, #3
    3642:	1a5b      	subs	r3, r3, r1
    3644:	00db      	lsls	r3, r3, #3
    3646:	4413      	add	r3, r2
    3648:	3328      	adds	r3, #40	; 0x28
    364a:	6018      	str	r0, [r3, #0]
        xContexts[i].xTaskId = xTaskOfServant[i];
    364c:	f240 1380 	movw	r3, #384	; 0x180
    3650:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3654:	68fa      	ldr	r2, [r7, #12]
    3656:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    365a:	f640 120c 	movw	r2, #2316	; 0x90c
    365e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3662:	68f9      	ldr	r1, [r7, #12]
    3664:	460b      	mov	r3, r1
    3666:	00db      	lsls	r3, r3, #3
    3668:	1a5b      	subs	r3, r3, r1
    366a:	00db      	lsls	r3, r3, #3
    366c:	4413      	add	r3, r2
    366e:	3330      	adds	r3, #48	; 0x30
    3670:	6018      	str	r0, [r3, #0]
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
    3672:	f240 1380 	movw	r3, #384	; 0x180
    3676:	f2c2 0300 	movt	r3, #8192	; 0x2000
    367a:	68fa      	ldr	r2, [r7, #12]
    367c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3680:	f240 0328 	movw	r3, #40	; 0x28
    3684:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3688:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    368c:	f640 120c 	movw	r2, #2316	; 0x90c
    3690:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3694:	68f9      	ldr	r1, [r7, #12]
    3696:	460b      	mov	r3, r1
    3698:	00db      	lsls	r3, r3, #3
    369a:	1a5b      	subs	r3, r3, r1
    369c:	00db      	lsls	r3, r3, #3
    369e:	4413      	add	r3, r2
    36a0:	332c      	adds	r3, #44	; 0x2c
    36a2:	6018      	str	r0, [r3, #0]
        xContexts[i].xInBoolCount = 0;
    36a4:	f640 120c 	movw	r2, #2316	; 0x90c
    36a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    36ac:	68f9      	ldr	r1, [r7, #12]
    36ae:	460b      	mov	r3, r1
    36b0:	00db      	lsls	r3, r3, #3
    36b2:	1a5b      	subs	r3, r3, r1
    36b4:	00db      	lsls	r3, r3, #3
    36b6:	4413      	add	r3, r2
    36b8:	3334      	adds	r3, #52	; 0x34
    36ba:	2200      	movs	r2, #0
    36bc:	601a      	str	r2, [r3, #0]
{
    portBASE_TYPE i, j;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    36be:	68fb      	ldr	r3, [r7, #12]
    36c0:	3301      	adds	r3, #1
    36c2:	60fb      	str	r3, [r7, #12]
    36c4:	68fb      	ldr	r3, [r7, #12]
    36c6:	2b2e      	cmp	r3, #46	; 0x2e
    36c8:	f77f af5a 	ble.w	3580 <vContextInit+0xc>
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
        xContexts[i].xInBoolCount = 0;
    }

    // setup the type of servants who are initialised to 2
    for( i = 0; i < NUMBEROFTASK; ++ i )
    36cc:	2300      	movs	r3, #0
    36ce:	60fb      	str	r3, [r7, #12]
    36d0:	e028      	b.n	3724 <vContextInit+0x1b0>
    {
        xContexts[xSensorOfTask[i]].xType = 1;
    36d2:	f240 035c 	movw	r3, #92	; 0x5c
    36d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36da:	68fa      	ldr	r2, [r7, #12]
    36dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    36e0:	f640 120c 	movw	r2, #2316	; 0x90c
    36e4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    36e8:	460b      	mov	r3, r1
    36ea:	00db      	lsls	r3, r3, #3
    36ec:	1a5b      	subs	r3, r3, r1
    36ee:	00db      	lsls	r3, r3, #3
    36f0:	4413      	add	r3, r2
    36f2:	3304      	adds	r3, #4
    36f4:	2201      	movs	r2, #1
    36f6:	601a      	str	r2, [r3, #0]
        xContexts[xActuatorOfTask[i]].xType = 3;
    36f8:	f240 0390 	movw	r3, #144	; 0x90
    36fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3700:	68fa      	ldr	r2, [r7, #12]
    3702:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    3706:	f640 120c 	movw	r2, #2316	; 0x90c
    370a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    370e:	460b      	mov	r3, r1
    3710:	00db      	lsls	r3, r3, #3
    3712:	1a5b      	subs	r3, r3, r1
    3714:	00db      	lsls	r3, r3, #3
    3716:	4413      	add	r3, r2
    3718:	3304      	adds	r3, #4
    371a:	2203      	movs	r2, #3
    371c:	601a      	str	r2, [r3, #0]
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
        xContexts[i].xInBoolCount = 0;
    }

    // setup the type of servants who are initialised to 2
    for( i = 0; i < NUMBEROFTASK; ++ i )
    371e:	68fb      	ldr	r3, [r7, #12]
    3720:	3301      	adds	r3, #1
    3722:	60fb      	str	r3, [r7, #12]
    3724:	68fb      	ldr	r3, [r7, #12]
    3726:	2b0c      	cmp	r3, #12
    3728:	ddd3      	ble.n	36d2 <vContextInit+0x15e>
        xContexts[xSensorOfTask[i]].xType = 1;
        xContexts[xActuatorOfTask[i]].xType = 3;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    372a:	2300      	movs	r3, #0
    372c:	60fb      	str	r3, [r7, #12]
    372e:	e084      	b.n	383a <vContextInit+0x2c6>
    {
        xSource = xRelations.xRelation[i].xInFlag;
    3730:	f240 223c 	movw	r2, #572	; 0x23c
    3734:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3738:	68f9      	ldr	r1, [r7, #12]
    373a:	460b      	mov	r3, r1
    373c:	005b      	lsls	r3, r3, #1
    373e:	440b      	add	r3, r1
    3740:	009b      	lsls	r3, r3, #2
    3742:	4413      	add	r3, r2
    3744:	3304      	adds	r3, #4
    3746:	681b      	ldr	r3, [r3, #0]
    3748:	60bb      	str	r3, [r7, #8]
        xDest   = xRelations.xRelation[i].xOutFlag;
    374a:	f240 223c 	movw	r2, #572	; 0x23c
    374e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3752:	68f9      	ldr	r1, [r7, #12]
    3754:	460b      	mov	r3, r1
    3756:	005b      	lsls	r3, r3, #1
    3758:	440b      	add	r3, r1
    375a:	009b      	lsls	r3, r3, #2
    375c:	4413      	add	r3, r2
    375e:	3308      	adds	r3, #8
    3760:	681b      	ldr	r3, [r3, #0]
    3762:	607b      	str	r3, [r7, #4]

        xContexts[xSource].xOutFlag[xContexts[xSource].xNumOfOut] = xDest;
    3764:	f640 120c 	movw	r2, #2316	; 0x90c
    3768:	f2c2 0200 	movt	r2, #8192	; 0x2000
    376c:	68b9      	ldr	r1, [r7, #8]
    376e:	460b      	mov	r3, r1
    3770:	00db      	lsls	r3, r3, #3
    3772:	1a5b      	subs	r3, r3, r1
    3774:	00db      	lsls	r3, r3, #3
    3776:	4413      	add	r3, r2
    3778:	3310      	adds	r3, #16
    377a:	6818      	ldr	r0, [r3, #0]
    377c:	f640 120c 	movw	r2, #2316	; 0x90c
    3780:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3784:	68b9      	ldr	r1, [r7, #8]
    3786:	460b      	mov	r3, r1
    3788:	00db      	lsls	r3, r3, #3
    378a:	1a5b      	subs	r3, r3, r1
    378c:	005b      	lsls	r3, r3, #1
    378e:	4403      	add	r3, r0
    3790:	3306      	adds	r3, #6
    3792:	009b      	lsls	r3, r3, #2
    3794:	4413      	add	r3, r2
    3796:	687a      	ldr	r2, [r7, #4]
    3798:	605a      	str	r2, [r3, #4]
        xContexts[xSource].xNumOfOut ++;
    379a:	f640 120c 	movw	r2, #2316	; 0x90c
    379e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37a2:	68b9      	ldr	r1, [r7, #8]
    37a4:	460b      	mov	r3, r1
    37a6:	00db      	lsls	r3, r3, #3
    37a8:	1a5b      	subs	r3, r3, r1
    37aa:	00db      	lsls	r3, r3, #3
    37ac:	4413      	add	r3, r2
    37ae:	3310      	adds	r3, #16
    37b0:	681b      	ldr	r3, [r3, #0]
    37b2:	1c58      	adds	r0, r3, #1
    37b4:	f640 120c 	movw	r2, #2316	; 0x90c
    37b8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37bc:	68b9      	ldr	r1, [r7, #8]
    37be:	460b      	mov	r3, r1
    37c0:	00db      	lsls	r3, r3, #3
    37c2:	1a5b      	subs	r3, r3, r1
    37c4:	00db      	lsls	r3, r3, #3
    37c6:	4413      	add	r3, r2
    37c8:	3310      	adds	r3, #16
    37ca:	6018      	str	r0, [r3, #0]

        xContexts[xDest].xInFlag[xContexts[xDest].xNumOfIn] = xSource;
    37cc:	f640 120c 	movw	r2, #2316	; 0x90c
    37d0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37d4:	6879      	ldr	r1, [r7, #4]
    37d6:	460b      	mov	r3, r1
    37d8:	00db      	lsls	r3, r3, #3
    37da:	1a5b      	subs	r3, r3, r1
    37dc:	00db      	lsls	r3, r3, #3
    37de:	4413      	add	r3, r2
    37e0:	330c      	adds	r3, #12
    37e2:	6818      	ldr	r0, [r3, #0]
    37e4:	f640 120c 	movw	r2, #2316	; 0x90c
    37e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37ec:	6879      	ldr	r1, [r7, #4]
    37ee:	460b      	mov	r3, r1
    37f0:	00db      	lsls	r3, r3, #3
    37f2:	1a5b      	subs	r3, r3, r1
    37f4:	005b      	lsls	r3, r3, #1
    37f6:	4403      	add	r3, r0
    37f8:	3304      	adds	r3, #4
    37fa:	009b      	lsls	r3, r3, #2
    37fc:	4413      	add	r3, r2
    37fe:	68ba      	ldr	r2, [r7, #8]
    3800:	605a      	str	r2, [r3, #4]
        xContexts[xDest].xNumOfIn ++;
    3802:	f640 120c 	movw	r2, #2316	; 0x90c
    3806:	f2c2 0200 	movt	r2, #8192	; 0x2000
    380a:	6879      	ldr	r1, [r7, #4]
    380c:	460b      	mov	r3, r1
    380e:	00db      	lsls	r3, r3, #3
    3810:	1a5b      	subs	r3, r3, r1
    3812:	00db      	lsls	r3, r3, #3
    3814:	4413      	add	r3, r2
    3816:	330c      	adds	r3, #12
    3818:	681b      	ldr	r3, [r3, #0]
    381a:	1c58      	adds	r0, r3, #1
    381c:	f640 120c 	movw	r2, #2316	; 0x90c
    3820:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3824:	6879      	ldr	r1, [r7, #4]
    3826:	460b      	mov	r3, r1
    3828:	00db      	lsls	r3, r3, #3
    382a:	1a5b      	subs	r3, r3, r1
    382c:	00db      	lsls	r3, r3, #3
    382e:	4413      	add	r3, r2
    3830:	330c      	adds	r3, #12
    3832:	6018      	str	r0, [r3, #0]
        xContexts[xSensorOfTask[i]].xType = 1;
        xContexts[xActuatorOfTask[i]].xType = 3;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3834:	68fb      	ldr	r3, [r7, #12]
    3836:	3301      	adds	r3, #1
    3838:	60fb      	str	r3, [r7, #12]
    383a:	f240 233c 	movw	r3, #572	; 0x23c
    383e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3842:	681a      	ldr	r2, [r3, #0]
    3844:	68fb      	ldr	r3, [r7, #12]
    3846:	429a      	cmp	r2, r3
    3848:	f73f af72 	bgt.w	3730 <vContextInit+0x1bc>
        xContexts[xSource].xNumOfOut ++;

        xContexts[xDest].xInFlag[xContexts[xDest].xNumOfIn] = xSource;
        xContexts[xDest].xNumOfIn ++;
    }
}
    384c:	3714      	adds	r7, #20
    384e:	46bd      	mov	sp, r7
    3850:	f85d 7b04 	ldr.w	r7, [sp], #4
    3854:	4770      	bx	lr
    3856:	bf00      	nop

00003858 <vSensor>:

void vSensor( void * pvParameter )
{
    3858:	b580      	push	{r7, lr}
    385a:	b08c      	sub	sp, #48	; 0x30
    385c:	af02      	add	r7, sp, #8
    385e:	6078      	str	r0, [r7, #4]
    struct tag * xMyTag;
    portBASE_TYPE boolFlag;

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[1], portMAX_DELAY );
    3860:	f241 3354 	movw	r3, #4948	; 0x1354
    3864:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3868:	685b      	ldr	r3, [r3, #4]
    386a:	4618      	mov	r0, r3
    386c:	2100      	movs	r1, #0
    386e:	f04f 32ff 	mov.w	r2, #4294967295
    3872:	2300      	movs	r3, #0
    3874:	f000 fe7a 	bl	456c <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    3878:	e061      	b.n	393e <vSensor+0xe6>
        {
            if(boolFlag == 0)
    387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    387c:	2b00      	cmp	r3, #0
    387e:	d100      	bne.n	3882 <vSensor+0x2a>
                continue;
    3880:	e05d      	b.n	393e <vSensor+0xe6>
            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    3882:	f7ff fddf 	bl	3444 <pxEventGenericReceive>
    3886:	6238      	str	r0, [r7, #32]
            xMyFlag = xEventGetpxDestination( pxEvent );
    3888:	6a38      	ldr	r0, [r7, #32]
    388a:	f7ff f883 	bl	2994 <xEventGetpxDestination>
    388e:	61f8      	str	r0, [r7, #28]
            xMyData = xEventGetxData( pxEvent );
    3890:	6a38      	ldr	r0, [r7, #32]
    3892:	f7ff f897 	bl	29c4 <xEventGetxData>
    3896:	61b8      	str	r0, [r7, #24]
            xMyTag = xEventGetxTag( pxEvent );
    3898:	6a38      	ldr	r0, [r7, #32]
    389a:	f7ff f887 	bl	29ac <xEventGetxTag>
    389e:	6178      	str	r0, [r7, #20]
            xPeriod= xContexts[xMyFlag].xPeriod;
    38a0:	f640 120c 	movw	r2, #2316	; 0x90c
    38a4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    38a8:	69f9      	ldr	r1, [r7, #28]
    38aa:	460b      	mov	r3, r1
    38ac:	00db      	lsls	r3, r3, #3
    38ae:	1a5b      	subs	r3, r3, r1
    38b0:	00db      	lsls	r3, r3, #3
    38b2:	4413      	add	r3, r2
    38b4:	332c      	adds	r3, #44	; 0x2c
    38b6:	681b      	ldr	r3, [r3, #0]
    38b8:	613b      	str	r3, [r7, #16]
            xContexts[xMyFlag].xCount ++;
    38ba:	f640 120c 	movw	r2, #2316	; 0x90c
    38be:	f2c2 0200 	movt	r2, #8192	; 0x2000
    38c2:	69f9      	ldr	r1, [r7, #28]
    38c4:	460b      	mov	r3, r1
    38c6:	00db      	lsls	r3, r3, #3
    38c8:	1a5b      	subs	r3, r3, r1
    38ca:	00db      	lsls	r3, r3, #3
    38cc:	4413      	add	r3, r2
    38ce:	3308      	adds	r3, #8
    38d0:	681b      	ldr	r3, [r3, #0]
    38d2:	1c58      	adds	r0, r3, #1
    38d4:	f640 120c 	movw	r2, #2316	; 0x90c
    38d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    38dc:	69f9      	ldr	r1, [r7, #28]
    38de:	460b      	mov	r3, r1
    38e0:	00db      	lsls	r3, r3, #3
    38e2:	1a5b      	subs	r3, r3, r1
    38e4:	00db      	lsls	r3, r3, #3
    38e6:	4413      	add	r3, r2
    38e8:	3308      	adds	r3, #8
    38ea:	6018      	str	r0, [r3, #0]
            xTimestamp = xMyTag->xTimestamp + INPUT;   
    38ec:	697b      	ldr	r3, [r7, #20]
    38ee:	685b      	ldr	r3, [r3, #4]
    38f0:	3303      	adds	r3, #3
    38f2:	60fb      	str	r3, [r7, #12]
            xFutureModelTime = xTimestamp;  // init the future model time to the start of LET execution duration.
    38f4:	f240 635c 	movw	r3, #1628	; 0x65c
    38f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38fc:	68fa      	ldr	r2, [r7, #12]
    38fe:	601a      	str	r2, [r3, #0]
            vPrintNumber(xMyFlag);
    3900:	69f8      	ldr	r0, [r7, #28]
    3902:	f013 fe91 	bl	17628 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    3906:	f001 fce5 	bl	52d4 <xTaskGetTickCount>
    390a:	4603      	mov	r3, r0
    390c:	4618      	mov	r0, r3
    390e:	f013 fe8b 	bl	17628 <vPrintNumber>
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
    3912:	f640 120c 	movw	r2, #2316	; 0x90c
    3916:	f2c2 0200 	movt	r2, #8192	; 0x2000
    391a:	69f9      	ldr	r1, [r7, #28]
    391c:	460b      	mov	r3, r1
    391e:	00db      	lsls	r3, r3, #3
    3920:	1a5b      	subs	r3, r3, r1
    3922:	00db      	lsls	r3, r3, #3
    3924:	4413      	add	r3, r2
    3926:	3328      	adds	r3, #40	; 0x28
    3928:	681b      	ldr	r3, [r3, #0]
    392a:	69b8      	ldr	r0, [r7, #24]
    392c:	4798      	blx	r3
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData );  // reuse event
    392e:	69bb      	ldr	r3, [r7, #24]
    3930:	9300      	str	r3, [sp, #0]
    3932:	6a38      	ldr	r0, [r7, #32]
    3934:	69f9      	ldr	r1, [r7, #28]
    3936:	693a      	ldr	r2, [r7, #16]
    3938:	68fb      	ldr	r3, [r7, #12]
    393a:	f7ff fda1 	bl	3480 <vEventGenericUpdate>

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[1], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    393e:	f7fe ffe3 	bl	2908 <xIsERLNull>
    3942:	6278      	str	r0, [r7, #36]	; 0x24
    3944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3946:	f1b3 3fff 	cmp.w	r3, #4294967295
    394a:	d196      	bne.n	387a <vSensor+0x22>
            vPrintNumber(xTaskGetTickCount());
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData );  // reuse event
        }
        xSemaphoreGive( xBinarySemaphore[0] );
    394c:	f241 3354 	movw	r3, #4948	; 0x1354
    3950:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3954:	681b      	ldr	r3, [r3, #0]
    3956:	4618      	mov	r0, r3
    3958:	2100      	movs	r1, #0
    395a:	2200      	movs	r2, #0
    395c:	2300      	movs	r3, #0
    395e:	f000 fd3f 	bl	43e0 <xQueueGenericSend>
    }
    3962:	e77d      	b.n	3860 <vSensor+0x8>

00003964 <vServant>:
}

void vServant( void * pvParameter )
{
    3964:	b580      	push	{r7, lr}
    3966:	b08c      	sub	sp, #48	; 0x30
    3968:	af02      	add	r7, sp, #8
    396a:	6078      	str	r0, [r7, #4]
    struct eventData * xMyData;
    struct tag * xMyTag;
    portBASE_TYPE boolFlag;
    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[2], portMAX_DELAY );
    396c:	f241 3354 	movw	r3, #4948	; 0x1354
    3970:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3974:	689b      	ldr	r3, [r3, #8]
    3976:	4618      	mov	r0, r3
    3978:	2100      	movs	r1, #0
    397a:	f04f 32ff 	mov.w	r2, #4294967295
    397e:	2300      	movs	r3, #0
    3980:	f000 fdf4 	bl	456c <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    3984:	e098      	b.n	3ab8 <vServant+0x154>
        {
            if(boolFlag == 0)
    3986:	6a3b      	ldr	r3, [r7, #32]
    3988:	2b00      	cmp	r3, #0
    398a:	d100      	bne.n	398e <vServant+0x2a>
                continue;
    398c:	e094      	b.n	3ab8 <vServant+0x154>
            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    398e:	f7ff fd59 	bl	3444 <pxEventGenericReceive>
    3992:	61f8      	str	r0, [r7, #28]
            xMyFlag = xEventGetpxDestination( pxEvent );
    3994:	69f8      	ldr	r0, [r7, #28]
    3996:	f7fe fffd 	bl	2994 <xEventGetpxDestination>
    399a:	61b8      	str	r0, [r7, #24]
            xMyData = xEventGetxData( pxEvent );
    399c:	69f8      	ldr	r0, [r7, #28]
    399e:	f7ff f811 	bl	29c4 <xEventGetxData>
    39a2:	6178      	str	r0, [r7, #20]
            xMyTag = xEventGetxTag( pxEvent );
    39a4:	69f8      	ldr	r0, [r7, #28]
    39a6:	f7ff f801 	bl	29ac <xEventGetxTag>
    39aa:	6138      	str	r0, [r7, #16]
            xPeriod= xContexts[xMyFlag].xPeriod;
    39ac:	f640 120c 	movw	r2, #2316	; 0x90c
    39b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    39b4:	69b9      	ldr	r1, [r7, #24]
    39b6:	460b      	mov	r3, r1
    39b8:	00db      	lsls	r3, r3, #3
    39ba:	1a5b      	subs	r3, r3, r1
    39bc:	00db      	lsls	r3, r3, #3
    39be:	4413      	add	r3, r2
    39c0:	332c      	adds	r3, #44	; 0x2c
    39c2:	681b      	ldr	r3, [r3, #0]
    39c4:	60fb      	str	r3, [r7, #12]
            xContexts[xMyFlag].xCount ++;
    39c6:	f640 120c 	movw	r2, #2316	; 0x90c
    39ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    39ce:	69b9      	ldr	r1, [r7, #24]
    39d0:	460b      	mov	r3, r1
    39d2:	00db      	lsls	r3, r3, #3
    39d4:	1a5b      	subs	r3, r3, r1
    39d6:	00db      	lsls	r3, r3, #3
    39d8:	4413      	add	r3, r2
    39da:	3308      	adds	r3, #8
    39dc:	681b      	ldr	r3, [r3, #0]
    39de:	1c58      	adds	r0, r3, #1
    39e0:	f640 120c 	movw	r2, #2316	; 0x90c
    39e4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    39e8:	69b9      	ldr	r1, [r7, #24]
    39ea:	460b      	mov	r3, r1
    39ec:	00db      	lsls	r3, r3, #3
    39ee:	1a5b      	subs	r3, r3, r1
    39f0:	00db      	lsls	r3, r3, #3
    39f2:	4413      	add	r3, r2
    39f4:	3308      	adds	r3, #8
    39f6:	6018      	str	r0, [r3, #0]
            // set the timestamp of event in terms of destination servant
            // if destination is actuator, then set as the EndOfLET
            // else set as the sum of input event's timestamp and let
            pxDestination = xContexts[xMyFlag].xOutFlag[0];
    39f8:	f640 120c 	movw	r2, #2316	; 0x90c
    39fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a00:	69b9      	ldr	r1, [r7, #24]
    3a02:	460b      	mov	r3, r1
    3a04:	00db      	lsls	r3, r3, #3
    3a06:	1a5b      	subs	r3, r3, r1
    3a08:	00db      	lsls	r3, r3, #3
    3a0a:	4413      	add	r3, r2
    3a0c:	331c      	adds	r3, #28
    3a0e:	681b      	ldr	r3, [r3, #0]
    3a10:	60bb      	str	r3, [r7, #8]
            switch(xContexts[pxDestination].xType)
    3a12:	f640 120c 	movw	r2, #2316	; 0x90c
    3a16:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a1a:	68b9      	ldr	r1, [r7, #8]
    3a1c:	460b      	mov	r3, r1
    3a1e:	00db      	lsls	r3, r3, #3
    3a20:	1a5b      	subs	r3, r3, r1
    3a22:	00db      	lsls	r3, r3, #3
    3a24:	4413      	add	r3, r2
    3a26:	3304      	adds	r3, #4
    3a28:	681b      	ldr	r3, [r3, #0]
    3a2a:	2b02      	cmp	r3, #2
    3a2c:	d002      	beq.n	3a34 <vServant+0xd0>
    3a2e:	2b03      	cmp	r3, #3
    3a30:	d011      	beq.n	3a56 <vServant+0xf2>
                case 3:
                    // the output execution time start from 3ms before end of the task period
                    xTimestamp = xPeriod * xContexts[xMyFlag].xCount - OUTPUT; 
                    break;
                default:
                    break;
    3a32:	e022      	b.n	3a7a <vServant+0x116>
            // else set as the sum of input event's timestamp and let
            pxDestination = xContexts[xMyFlag].xOutFlag[0];
            switch(xContexts[pxDestination].xType)
            {
                case 2:
                    xTimestamp = xMyTag->xTimestamp + xContexts[xMyFlag].xLet;
    3a34:	693b      	ldr	r3, [r7, #16]
    3a36:	6858      	ldr	r0, [r3, #4]
    3a38:	f640 120c 	movw	r2, #2316	; 0x90c
    3a3c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a40:	69b9      	ldr	r1, [r7, #24]
    3a42:	460b      	mov	r3, r1
    3a44:	00db      	lsls	r3, r3, #3
    3a46:	1a5b      	subs	r3, r3, r1
    3a48:	00db      	lsls	r3, r3, #3
    3a4a:	4413      	add	r3, r2
    3a4c:	3324      	adds	r3, #36	; 0x24
    3a4e:	681b      	ldr	r3, [r3, #0]
    3a50:	4403      	add	r3, r0
    3a52:	627b      	str	r3, [r7, #36]	; 0x24
                    break;
    3a54:	e011      	b.n	3a7a <vServant+0x116>
                case 3:
                    // the output execution time start from 3ms before end of the task period
                    xTimestamp = xPeriod * xContexts[xMyFlag].xCount - OUTPUT; 
    3a56:	f640 120c 	movw	r2, #2316	; 0x90c
    3a5a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a5e:	69b9      	ldr	r1, [r7, #24]
    3a60:	460b      	mov	r3, r1
    3a62:	00db      	lsls	r3, r3, #3
    3a64:	1a5b      	subs	r3, r3, r1
    3a66:	00db      	lsls	r3, r3, #3
    3a68:	4413      	add	r3, r2
    3a6a:	3308      	adds	r3, #8
    3a6c:	681b      	ldr	r3, [r3, #0]
    3a6e:	68fa      	ldr	r2, [r7, #12]
    3a70:	fb02 f303 	mul.w	r3, r2, r3
    3a74:	3b03      	subs	r3, #3
    3a76:	627b      	str	r3, [r7, #36]	; 0x24
                    break;
    3a78:	bf00      	nop
                default:
                    break;
                    // wrong events type
            }
            vPrintNumber(xMyFlag);
    3a7a:	69b8      	ldr	r0, [r7, #24]
    3a7c:	f013 fdd4 	bl	17628 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    3a80:	f001 fc28 	bl	52d4 <xTaskGetTickCount>
    3a84:	4603      	mov	r3, r0
    3a86:	4618      	mov	r0, r3
    3a88:	f013 fdce 	bl	17628 <vPrintNumber>
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
    3a8c:	f640 120c 	movw	r2, #2316	; 0x90c
    3a90:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a94:	69b9      	ldr	r1, [r7, #24]
    3a96:	460b      	mov	r3, r1
    3a98:	00db      	lsls	r3, r3, #3
    3a9a:	1a5b      	subs	r3, r3, r1
    3a9c:	00db      	lsls	r3, r3, #3
    3a9e:	4413      	add	r3, r2
    3aa0:	3328      	adds	r3, #40	; 0x28
    3aa2:	681b      	ldr	r3, [r3, #0]
    3aa4:	6978      	ldr	r0, [r7, #20]
    3aa6:	4798      	blx	r3
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData );
    3aa8:	697b      	ldr	r3, [r7, #20]
    3aaa:	9300      	str	r3, [sp, #0]
    3aac:	69f8      	ldr	r0, [r7, #28]
    3aae:	69b9      	ldr	r1, [r7, #24]
    3ab0:	68fa      	ldr	r2, [r7, #12]
    3ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3ab4:	f7ff fce4 	bl	3480 <vEventGenericUpdate>
    portBASE_TYPE boolFlag;
    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[2], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    3ab8:	f7fe ff26 	bl	2908 <xIsERLNull>
    3abc:	6238      	str	r0, [r7, #32]
    3abe:	6a3b      	ldr	r3, [r7, #32]
    3ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
    3ac4:	f47f af5f 	bne.w	3986 <vServant+0x22>
            vPrintNumber(xTaskGetTickCount());
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData );
        }
        xSemaphoreGive( xBinarySemaphore[0] );
    3ac8:	f241 3354 	movw	r3, #4948	; 0x1354
    3acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ad0:	681b      	ldr	r3, [r3, #0]
    3ad2:	4618      	mov	r0, r3
    3ad4:	2100      	movs	r1, #0
    3ad6:	2200      	movs	r2, #0
    3ad8:	2300      	movs	r3, #0
    3ada:	f000 fc81 	bl	43e0 <xQueueGenericSend>
    }
    3ade:	e745      	b.n	396c <vServant+0x8>

00003ae0 <vActuator>:

}

void vActuator( void * pvParameter )
{
    3ae0:	b580      	push	{r7, lr}
    3ae2:	b08c      	sub	sp, #48	; 0x30
    3ae4:	af02      	add	r7, sp, #8
    3ae6:	6078      	str	r0, [r7, #4]
    struct tag * xMyTag;
    portBASE_TYPE boolFlag;

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[3], portMAX_DELAY );
    3ae8:	f241 3354 	movw	r3, #4948	; 0x1354
    3aec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3af0:	68db      	ldr	r3, [r3, #12]
    3af2:	4618      	mov	r0, r3
    3af4:	2100      	movs	r1, #0
    3af6:	f04f 32ff 	mov.w	r2, #4294967295
    3afa:	2300      	movs	r3, #0
    3afc:	f000 fd36 	bl	456c <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    3b00:	e05b      	b.n	3bba <vActuator+0xda>
        {
            if(boolFlag == 0)
    3b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3b04:	2b00      	cmp	r3, #0
    3b06:	d100      	bne.n	3b0a <vActuator+0x2a>
                continue;
    3b08:	e057      	b.n	3bba <vActuator+0xda>

            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    3b0a:	f7ff fc9b 	bl	3444 <pxEventGenericReceive>
    3b0e:	6238      	str	r0, [r7, #32]
            xMyFlag = xEventGetpxDestination( pxEvent );
    3b10:	6a38      	ldr	r0, [r7, #32]
    3b12:	f7fe ff3f 	bl	2994 <xEventGetpxDestination>
    3b16:	61f8      	str	r0, [r7, #28]
            xMyData = xEventGetxData( pxEvent );
    3b18:	6a38      	ldr	r0, [r7, #32]
    3b1a:	f7fe ff53 	bl	29c4 <xEventGetxData>
    3b1e:	61b8      	str	r0, [r7, #24]
            xMyTag = xEventGetxTag( pxEvent );
    3b20:	6a38      	ldr	r0, [r7, #32]
    3b22:	f7fe ff43 	bl	29ac <xEventGetxTag>
    3b26:	6178      	str	r0, [r7, #20]
            xPeriod = xContexts[xMyFlag].xPeriod;
    3b28:	f640 120c 	movw	r2, #2316	; 0x90c
    3b2c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b30:	69f9      	ldr	r1, [r7, #28]
    3b32:	460b      	mov	r3, r1
    3b34:	00db      	lsls	r3, r3, #3
    3b36:	1a5b      	subs	r3, r3, r1
    3b38:	00db      	lsls	r3, r3, #3
    3b3a:	4413      	add	r3, r2
    3b3c:	332c      	adds	r3, #44	; 0x2c
    3b3e:	681b      	ldr	r3, [r3, #0]
    3b40:	613b      	str	r3, [r7, #16]
            xContexts[xMyFlag].xCount ++;
    3b42:	f640 120c 	movw	r2, #2316	; 0x90c
    3b46:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b4a:	69f9      	ldr	r1, [r7, #28]
    3b4c:	460b      	mov	r3, r1
    3b4e:	00db      	lsls	r3, r3, #3
    3b50:	1a5b      	subs	r3, r3, r1
    3b52:	00db      	lsls	r3, r3, #3
    3b54:	4413      	add	r3, r2
    3b56:	3308      	adds	r3, #8
    3b58:	681b      	ldr	r3, [r3, #0]
    3b5a:	1c58      	adds	r0, r3, #1
    3b5c:	f640 120c 	movw	r2, #2316	; 0x90c
    3b60:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b64:	69f9      	ldr	r1, [r7, #28]
    3b66:	460b      	mov	r3, r1
    3b68:	00db      	lsls	r3, r3, #3
    3b6a:	1a5b      	subs	r3, r3, r1
    3b6c:	00db      	lsls	r3, r3, #3
    3b6e:	4413      	add	r3, r2
    3b70:	3308      	adds	r3, #8
    3b72:	6018      	str	r0, [r3, #0]
            xTimestamp = xMyTag->xTimestamp + OUTPUT;  // all sensor are scheduled to execute start from 0 to 4 ms of every period
    3b74:	697b      	ldr	r3, [r7, #20]
    3b76:	685b      	ldr	r3, [r3, #4]
    3b78:	3303      	adds	r3, #3
    3b7a:	60fb      	str	r3, [r7, #12]
            vPrintNumber(xMyFlag);
    3b7c:	69f8      	ldr	r0, [r7, #28]
    3b7e:	f013 fd53 	bl	17628 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    3b82:	f001 fba7 	bl	52d4 <xTaskGetTickCount>
    3b86:	4603      	mov	r3, r0
    3b88:	4618      	mov	r0, r3
    3b8a:	f013 fd4d 	bl	17628 <vPrintNumber>
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
    3b8e:	f640 120c 	movw	r2, #2316	; 0x90c
    3b92:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b96:	69f9      	ldr	r1, [r7, #28]
    3b98:	460b      	mov	r3, r1
    3b9a:	00db      	lsls	r3, r3, #3
    3b9c:	1a5b      	subs	r3, r3, r1
    3b9e:	00db      	lsls	r3, r3, #3
    3ba0:	4413      	add	r3, r2
    3ba2:	3328      	adds	r3, #40	; 0x28
    3ba4:	681b      	ldr	r3, [r3, #0]
    3ba6:	69b8      	ldr	r0, [r7, #24]
    3ba8:	4798      	blx	r3
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData ); // update the information of output event 
    3baa:	69bb      	ldr	r3, [r7, #24]
    3bac:	9300      	str	r3, [sp, #0]
    3bae:	6a38      	ldr	r0, [r7, #32]
    3bb0:	69f9      	ldr	r1, [r7, #28]
    3bb2:	693a      	ldr	r2, [r7, #16]
    3bb4:	68fb      	ldr	r3, [r7, #12]
    3bb6:	f7ff fc63 	bl	3480 <vEventGenericUpdate>

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[3], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    3bba:	f7fe fea5 	bl	2908 <xIsERLNull>
    3bbe:	6278      	str	r0, [r7, #36]	; 0x24
    3bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
    3bc6:	d19c      	bne.n	3b02 <vActuator+0x22>
            vPrintNumber(xTaskGetTickCount());
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData ); // update the information of output event 
        }
        xSemaphoreGive( xBinarySemaphore[0] );
    3bc8:	f241 3354 	movw	r3, #4948	; 0x1354
    3bcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bd0:	681b      	ldr	r3, [r3, #0]
    3bd2:	4618      	mov	r0, r3
    3bd4:	2100      	movs	r1, #0
    3bd6:	2200      	movs	r2, #0
    3bd8:	2300      	movs	r3, #0
    3bda:	f000 fc01 	bl	43e0 <xQueueGenericSend>
    }
    3bde:	e783      	b.n	3ae8 <vActuator+0x8>

00003be0 <vR_Servant>:
}


void vR_Servant( void * pvParameter)
{
    3be0:	b580      	push	{r7, lr}
    3be2:	b084      	sub	sp, #16
    3be4:	af00      	add	r7, sp, #0
    3be6:	6078      	str	r0, [r7, #4]
    portBASE_TYPE pxDestination;
    while(1)
    {
        // waiting for events created by tick hook or S-Servant
        xSemaphoreTake( xBinarySemaphore[0], portMAX_DELAY );
    3be8:	f241 3354 	movw	r3, #4948	; 0x1354
    3bec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bf0:	681b      	ldr	r3, [r3, #0]
    3bf2:	4618      	mov	r0, r3
    3bf4:	2100      	movs	r1, #0
    3bf6:	f04f 32ff 	mov.w	r2, #4294967295
    3bfa:	2300      	movs	r3, #0
    3bfc:	f000 fcb6 	bl	456c <xQueueGenericReceive>
        vPrintString("Actuator\n\r");
    3c00:	f648 2080 	movw	r0, #35456	; 0x8a80
    3c04:	f2c0 0001 	movt	r0, #1
    3c08:	f013 fcf4 	bl	175f4 <vPrintString>

        // transit the events from events pool to nonexecutable event list
        // Copy one event to multiple when communication mode is 1 to N
        vEventScatter();
    3c0c:	f7ff f898 	bl	2d40 <vEventGenericScatter>

        // reduce multiple event for destination to one when communication mode is N to 1,
        // and transit the event from executable event pool to executable event list
        vEventReduce(); 
    3c10:	f7ff f9b6 	bl	2f80 <vEventGenericReduce>

        // serialize the timestamp of simulataneous events,
        // and transit the ready events to ready list
        // return the pxDestination of the first ready event in ready list
        pxDestination = xEventSerialize(); 
    3c14:	f7ff fb9a 	bl	334c <xEventGenericSerialize>
    3c18:	60f8      	str	r0, [r7, #12]

        switch(xContexts[pxDestination].xType)
    3c1a:	f640 120c 	movw	r2, #2316	; 0x90c
    3c1e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3c22:	68f9      	ldr	r1, [r7, #12]
    3c24:	460b      	mov	r3, r1
    3c26:	00db      	lsls	r3, r3, #3
    3c28:	1a5b      	subs	r3, r3, r1
    3c2a:	00db      	lsls	r3, r3, #3
    3c2c:	4413      	add	r3, r2
    3c2e:	3304      	adds	r3, #4
    3c30:	681b      	ldr	r3, [r3, #0]
    3c32:	2b02      	cmp	r3, #2
    3c34:	d010      	beq.n	3c58 <vR_Servant+0x78>
    3c36:	2b03      	cmp	r3, #3
    3c38:	d01a      	beq.n	3c70 <vR_Servant+0x90>
    3c3a:	2b01      	cmp	r3, #1
    3c3c:	d000      	beq.n	3c40 <vR_Servant+0x60>
                break;
            case 3:
                xSemaphoreGive( xBinarySemaphore[3] );
                break;
            default:
                break;
    3c3e:	e023      	b.n	3c88 <vR_Servant+0xa8>
        pxDestination = xEventSerialize(); 

        switch(xContexts[pxDestination].xType)
        {
            case 1:
                xSemaphoreGive( xBinarySemaphore[1] );
    3c40:	f241 3354 	movw	r3, #4948	; 0x1354
    3c44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c48:	685b      	ldr	r3, [r3, #4]
    3c4a:	4618      	mov	r0, r3
    3c4c:	2100      	movs	r1, #0
    3c4e:	2200      	movs	r2, #0
    3c50:	2300      	movs	r3, #0
    3c52:	f000 fbc5 	bl	43e0 <xQueueGenericSend>
                break;
    3c56:	e017      	b.n	3c88 <vR_Servant+0xa8>
            case 2:
                xSemaphoreGive( xBinarySemaphore[2] );
    3c58:	f241 3354 	movw	r3, #4948	; 0x1354
    3c5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c60:	689b      	ldr	r3, [r3, #8]
    3c62:	4618      	mov	r0, r3
    3c64:	2100      	movs	r1, #0
    3c66:	2200      	movs	r2, #0
    3c68:	2300      	movs	r3, #0
    3c6a:	f000 fbb9 	bl	43e0 <xQueueGenericSend>
                break;
    3c6e:	e00b      	b.n	3c88 <vR_Servant+0xa8>
            case 3:
                xSemaphoreGive( xBinarySemaphore[3] );
    3c70:	f241 3354 	movw	r3, #4948	; 0x1354
    3c74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c78:	68db      	ldr	r3, [r3, #12]
    3c7a:	4618      	mov	r0, r3
    3c7c:	2100      	movs	r1, #0
    3c7e:	2200      	movs	r2, #0
    3c80:	2300      	movs	r3, #0
    3c82:	f000 fbad 	bl	43e0 <xQueueGenericSend>
                break;
    3c86:	bf00      	nop
            default:
                break;
                // no event available 
        }
    }
    3c88:	e7ae      	b.n	3be8 <vR_Servant+0x8>
    3c8a:	bf00      	nop

00003c8c <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
    3c8c:	b480      	push	{r7}
    3c8e:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
    3c90:	f242 032f 	movw	r3, #8239	; 0x202f
    3c94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c98:	2200      	movs	r2, #0
    3c9a:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
    3c9c:	f242 032e 	movw	r3, #8238	; 0x202e
    3ca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ca4:	2201      	movs	r2, #1
    3ca6:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
    3ca8:	f242 0325 	movw	r3, #8229	; 0x2025
    3cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cb0:	2207      	movs	r2, #7
    3cb2:	701a      	strb	r2, [r3, #0]
}
    3cb4:	46bd      	mov	sp, r7
    3cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cba:	4770      	bx	lr

00003cbc <PapabenchInit>:
extern void ir_init();
extern void estimator_init();
extern void fbw_init();

void PapabenchInit()
{
    3cbc:	b580      	push	{r7, lr}
    3cbe:	af00      	add	r7, sp, #0
    timer_init();
    3cc0:	f7ff ffe4 	bl	3c8c <timer_init>
    modem_init();
    3cc4:	f00d f9a4 	bl	11010 <modem_init>
    adc_init();
    3cc8:	f00d fcee 	bl	116a8 <adc_init>
#ifdef CTL_BRD_V1_1
    adc_buf_channel(ADC_CHANNEL_BAT, &buf_bat);
#endif
    spi_init();
    3ccc:	f00d fc60 	bl	11590 <spi_init>
    link_fbw_init();
    3cd0:	f00d fabc 	bl	1124c <link_fbw_init>
    gps_init();
    3cd4:	f00d fd98 	bl	11808 <gps_init>
    nav_init();
    3cd8:	f011 f890 	bl	14dfc <nav_init>
    ir_init();
    3cdc:	f00e f83c 	bl	11d58 <ir_init>
    estimator_init();
    3ce0:	f011 fa72 	bl	151c8 <estimator_init>
#ifdef PAPABENCH_SINGLE
    fbw_init();
#endif
}
    3ce4:	bd80      	pop	{r7, pc}
    3ce6:	bf00      	nop

00003ce8 <s_0>:
#define SUNNYBEIKE 1
#ifdef SUNNYBEIKE

/*task0*/
void s_0(struct eventData * pxDataArray) 
{
    3ce8:	b480      	push	{r7}
    3cea:	b083      	sub	sp, #12
    3cec:	af00      	add	r7, sp, #0
    3cee:	6078      	str	r0, [r7, #4]
    // do actuator
    // do sensor
}
    3cf0:	370c      	adds	r7, #12
    3cf2:	46bd      	mov	sp, r7
    3cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cf8:	4770      	bx	lr
    3cfa:	bf00      	nop

00003cfc <s_1>:
void s_1(struct eventData * pxDataArray) 
{
    3cfc:	b580      	push	{r7, lr}
    3cfe:	b082      	sub	sp, #8
    3d00:	af00      	add	r7, sp, #0
    3d02:	6078      	str	r0, [r7, #4]
    last_radio_from_ppm(); // ppm.h
    3d04:	f012 fa3c 	bl	16180 <last_radio_from_ppm>
}
    3d08:	3708      	adds	r7, #8
    3d0a:	46bd      	mov	sp, r7
    3d0c:	bd80      	pop	{r7, pc}
    3d0e:	bf00      	nop

00003d10 <s_2>:
void s_2(struct eventData * pxDataArray) 
{
    3d10:	b480      	push	{r7}
    3d12:	b083      	sub	sp, #12
    3d14:	af00      	add	r7, sp, #0
    3d16:	6078      	str	r0, [r7, #4]
    //servo_set();  // servo.h, this function is used by multitask which in terms of multiuse of Servant. And this
                    // is not implemented now. So cancel.
}
    3d18:	370c      	adds	r7, #12
    3d1a:	46bd      	mov	sp, r7
    3d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d20:	4770      	bx	lr
    3d22:	bf00      	nop

00003d24 <s_3>:
void s_3(struct eventData * pxDataArray) 
{
    3d24:	b480      	push	{r7}
    3d26:	b083      	sub	sp, #12
    3d28:	af00      	add	r7, sp, #0
    3d2a:	6078      	str	r0, [r7, #4]
}
    3d2c:	370c      	adds	r7, #12
    3d2e:	46bd      	mov	sp, r7
    3d30:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d34:	4770      	bx	lr
    3d36:	bf00      	nop

00003d38 <s_4>:

/*task1*/
void s_4(struct eventData * pxDataArray) 
{
    3d38:	b480      	push	{r7}
    3d3a:	b083      	sub	sp, #12
    3d3c:	af00      	add	r7, sp, #0
    3d3e:	6078      	str	r0, [r7, #4]
}
    3d40:	370c      	adds	r7, #12
    3d42:	46bd      	mov	sp, r7
    3d44:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d48:	4770      	bx	lr
    3d4a:	bf00      	nop

00003d4c <s_5>:
void s_5(struct eventData * pxDataArray) 
{
    3d4c:	b580      	push	{r7, lr}
    3d4e:	b082      	sub	sp, #8
    3d50:	af00      	add	r7, sp, #0
    3d52:	6078      	str	r0, [r7, #4]
    to_autopilot_from_last_radio(); // main.c
    3d54:	f012 fdce 	bl	168f4 <to_autopilot_from_last_radio>
}
    3d58:	3708      	adds	r7, #8
    3d5a:	46bd      	mov	sp, r7
    3d5c:	bd80      	pop	{r7, pc}
    3d5e:	bf00      	nop

00003d60 <s_6>:
void s_6(struct eventData * pxDataArray) 
{
    3d60:	b580      	push	{r7, lr}
    3d62:	b082      	sub	sp, #8
    3d64:	af00      	add	r7, sp, #0
    3d66:	6078      	str	r0, [r7, #4]
    spi_reset(); // spi_fbw.h
    3d68:	f012 fd02 	bl	16770 <spi_reset>
}
    3d6c:	3708      	adds	r7, #8
    3d6e:	46bd      	mov	sp, r7
    3d70:	bd80      	pop	{r7, pc}
    3d72:	bf00      	nop

00003d74 <s_7>:
void s_7(struct eventData * pxDataArray) 
{
    3d74:	b480      	push	{r7}
    3d76:	b083      	sub	sp, #12
    3d78:	af00      	add	r7, sp, #0
    3d7a:	6078      	str	r0, [r7, #4]
}
    3d7c:	370c      	adds	r7, #12
    3d7e:	46bd      	mov	sp, r7
    3d80:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d84:	4770      	bx	lr
    3d86:	bf00      	nop

00003d88 <s_8>:

/*task 2*/ 
void s_8(struct eventData * pxDataArray) 
{
    3d88:	b480      	push	{r7}
    3d8a:	b083      	sub	sp, #12
    3d8c:	af00      	add	r7, sp, #0
    3d8e:	6078      	str	r0, [r7, #4]
}
    3d90:	370c      	adds	r7, #12
    3d92:	46bd      	mov	sp, r7
    3d94:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d98:	4770      	bx	lr
    3d9a:	bf00      	nop

00003d9c <s_9>:
void s_9(struct eventData * pxDataArray) 
{
    3d9c:	b580      	push	{r7, lr}
    3d9e:	b082      	sub	sp, #8
    3da0:	af00      	add	r7, sp, #0
    3da2:	6078      	str	r0, [r7, #4]
    check_mega128_values_task(); // main.c
    3da4:	f012 ff4a 	bl	16c3c <check_mega128_values_task>
}
    3da8:	3708      	adds	r7, #8
    3daa:	46bd      	mov	sp, r7
    3dac:	bd80      	pop	{r7, pc}
    3dae:	bf00      	nop

00003db0 <s_10>:
void s_10(struct eventData * pxDataArray) 
{
    3db0:	b480      	push	{r7}
    3db2:	b083      	sub	sp, #12
    3db4:	af00      	add	r7, sp, #0
    3db6:	6078      	str	r0, [r7, #4]
}
    3db8:	370c      	adds	r7, #12
    3dba:	46bd      	mov	sp, r7
    3dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dc0:	4770      	bx	lr
    3dc2:	bf00      	nop

00003dc4 <s_11>:

/*task 3, servant 8, 9*/ 
void s_11(struct eventData * pxDataArray) 
{
    3dc4:	b480      	push	{r7}
    3dc6:	b083      	sub	sp, #12
    3dc8:	af00      	add	r7, sp, #0
    3dca:	6078      	str	r0, [r7, #4]
}
    3dcc:	370c      	adds	r7, #12
    3dce:	46bd      	mov	sp, r7
    3dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dd4:	4770      	bx	lr
    3dd6:	bf00      	nop

00003dd8 <s_12>:
void s_12(struct eventData * pxDataArray) 
{
    3dd8:	b580      	push	{r7, lr}
    3dda:	b082      	sub	sp, #8
    3ddc:	af00      	add	r7, sp, #0
    3dde:	6078      	str	r0, [r7, #4]
    servo_transmit(); //servo.h
    3de0:	f013 f820 	bl	16e24 <servo_transmit>
}
    3de4:	3708      	adds	r7, #8
    3de6:	46bd      	mov	sp, r7
    3de8:	bd80      	pop	{r7, pc}
    3dea:	bf00      	nop

00003dec <s_13>:
void s_13(struct eventData * pxDataArray) 
{
    3dec:	b480      	push	{r7}
    3dee:	b083      	sub	sp, #12
    3df0:	af00      	add	r7, sp, #0
    3df2:	6078      	str	r0, [r7, #4]
}
    3df4:	370c      	adds	r7, #12
    3df6:	46bd      	mov	sp, r7
    3df8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dfc:	4770      	bx	lr
    3dfe:	bf00      	nop

00003e00 <s_14>:

/*task 4, servant 10, 11*/
void s_14(struct eventData * pxDataArray) 
{
    3e00:	b480      	push	{r7}
    3e02:	b083      	sub	sp, #12
    3e04:	af00      	add	r7, sp, #0
    3e06:	6078      	str	r0, [r7, #4]
}
    3e08:	370c      	adds	r7, #12
    3e0a:	46bd      	mov	sp, r7
    3e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e10:	4770      	bx	lr
    3e12:	bf00      	nop

00003e14 <s_15>:
void s_15(struct eventData * pxDataArray) 
{
    3e14:	b580      	push	{r7, lr}
    3e16:	b082      	sub	sp, #8
    3e18:	af00      	add	r7, sp, #0
    3e1a:	6078      	str	r0, [r7, #4]
    check_failsafe_task(); // main.c
    3e1c:	f012 fee8 	bl	16bf0 <check_failsafe_task>
}
    3e20:	3708      	adds	r7, #8
    3e22:	46bd      	mov	sp, r7
    3e24:	bd80      	pop	{r7, pc}
    3e26:	bf00      	nop

00003e28 <s_16>:
void s_16(struct eventData * pxDataArray) 
{
    3e28:	b480      	push	{r7}
    3e2a:	b083      	sub	sp, #12
    3e2c:	af00      	add	r7, sp, #0
    3e2e:	6078      	str	r0, [r7, #4]
}
    3e30:	370c      	adds	r7, #12
    3e32:	46bd      	mov	sp, r7
    3e34:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e38:	4770      	bx	lr
    3e3a:	bf00      	nop

00003e3c <s_17>:

/*task 5, servant 12, 13, 14*/
void s_17(struct eventData * pxDataArray) 
{
    3e3c:	b480      	push	{r7}
    3e3e:	b083      	sub	sp, #12
    3e40:	af00      	add	r7, sp, #0
    3e42:	6078      	str	r0, [r7, #4]
}
    3e44:	370c      	adds	r7, #12
    3e46:	46bd      	mov	sp, r7
    3e48:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e4c:	4770      	bx	lr
    3e4e:	bf00      	nop

00003e50 <s_18>:
void s_18(struct eventData * pxDataArray) 
{
    3e50:	b580      	push	{r7, lr}
    3e52:	b082      	sub	sp, #8
    3e54:	af00      	add	r7, sp, #0
    3e56:	6078      	str	r0, [r7, #4]
     //inflight_calib(pdTRUE); // inflight_calib.h
     //inflight_calib(pdTRUE); // main_auto.c , we transfer this function into main.c because of bugs if not 
     radio_control_task();
    3e58:	f009 f91c 	bl	d094 <radio_control_task>
}
    3e5c:	3708      	adds	r7, #8
    3e5e:	46bd      	mov	sp, r7
    3e60:	bd80      	pop	{r7, pc}
    3e62:	bf00      	nop

00003e64 <s_19>:
void s_19(struct eventData * pxDataArray) 
{
    3e64:	b580      	push	{r7, lr}
    3e66:	b082      	sub	sp, #8
    3e68:	af00      	add	r7, sp, #0
    3e6a:	6078      	str	r0, [r7, #4]
    ir_gain_calib(); //infrared.h
    3e6c:	f00d ffcc 	bl	11e08 <ir_gain_calib>
}
    3e70:	3708      	adds	r7, #8
    3e72:	46bd      	mov	sp, r7
    3e74:	bd80      	pop	{r7, pc}
    3e76:	bf00      	nop

00003e78 <s_20>:
void s_20(struct eventData * pxDataArray) 
{
    3e78:	b480      	push	{r7}
    3e7a:	b083      	sub	sp, #12
    3e7c:	af00      	add	r7, sp, #0
    3e7e:	6078      	str	r0, [r7, #4]
}
    3e80:	370c      	adds	r7, #12
    3e82:	46bd      	mov	sp, r7
    3e84:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e88:	4770      	bx	lr
    3e8a:	bf00      	nop

00003e8c <s_21>:

/*task 6, servant 15,16,17,18*/ 
void s_21(struct eventData * pxDataArray) 
{
    3e8c:	b480      	push	{r7}
    3e8e:	b083      	sub	sp, #12
    3e90:	af00      	add	r7, sp, #0
    3e92:	6078      	str	r0, [r7, #4]
}
    3e94:	370c      	adds	r7, #12
    3e96:	46bd      	mov	sp, r7
    3e98:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e9c:	4770      	bx	lr
    3e9e:	bf00      	nop

00003ea0 <s_22>:
void s_22(struct eventData * pxDataArray) 
{
    3ea0:	b580      	push	{r7, lr}
    3ea2:	b082      	sub	sp, #8
    3ea4:	af00      	add	r7, sp, #0
    3ea6:	6078      	str	r0, [r7, #4]
    ir_update(); // infrared.h
    3ea8:	f00d ff70 	bl	11d8c <ir_update>
}
    3eac:	3708      	adds	r7, #8
    3eae:	46bd      	mov	sp, r7
    3eb0:	bd80      	pop	{r7, pc}
    3eb2:	bf00      	nop

00003eb4 <s_23>:
void s_23(struct eventData * pxDataArray) 
{
    3eb4:	b580      	push	{r7, lr}
    3eb6:	b082      	sub	sp, #8
    3eb8:	af00      	add	r7, sp, #0
    3eba:	6078      	str	r0, [r7, #4]
    //servo_transmit();  // servo.h
    estimator_update_state_infrared(); //estimator.h
    3ebc:	f011 f9ee 	bl	1529c <estimator_update_state_infrared>
}
    3ec0:	3708      	adds	r7, #8
    3ec2:	46bd      	mov	sp, r7
    3ec4:	bd80      	pop	{r7, pc}
    3ec6:	bf00      	nop

00003ec8 <s_24>:
void s_24(struct eventData * pxDataArray) 
{
    3ec8:	b580      	push	{r7, lr}
    3eca:	b082      	sub	sp, #8
    3ecc:	af00      	add	r7, sp, #0
    3ece:	6078      	str	r0, [r7, #4]
    roll_pitch_pid_run(); // pid.h
    3ed0:	f00d ffca 	bl	11e68 <roll_pitch_pid_run>
}
    3ed4:	3708      	adds	r7, #8
    3ed6:	46bd      	mov	sp, r7
    3ed8:	bd80      	pop	{r7, pc}
    3eda:	bf00      	nop

00003edc <s_25>:
void s_25(struct eventData * pxDataArray) 
{
    3edc:	b480      	push	{r7}
    3ede:	b083      	sub	sp, #12
    3ee0:	af00      	add	r7, sp, #0
    3ee2:	6078      	str	r0, [r7, #4]
}
    3ee4:	370c      	adds	r7, #12
    3ee6:	46bd      	mov	sp, r7
    3ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3eec:	4770      	bx	lr
    3eee:	bf00      	nop

00003ef0 <s_26>:

/*task 7, servant 19, 20*/
void s_26(struct eventData * pxDataArray) 
{
    3ef0:	b480      	push	{r7}
    3ef2:	b083      	sub	sp, #12
    3ef4:	af00      	add	r7, sp, #0
    3ef6:	6078      	str	r0, [r7, #4]
}
    3ef8:	370c      	adds	r7, #12
    3efa:	46bd      	mov	sp, r7
    3efc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f00:	4770      	bx	lr
    3f02:	bf00      	nop

00003f04 <s_27>:
void s_27(struct eventData * pxDataArray) 
{
    3f04:	b580      	push	{r7, lr}
    3f06:	b082      	sub	sp, #8
    3f08:	af00      	add	r7, sp, #0
    3f0a:	6078      	str	r0, [r7, #4]
    link_fbw_send(); //link_fbw.h
    3f0c:	f00d f9b0 	bl	11270 <link_fbw_send>
}
    3f10:	3708      	adds	r7, #8
    3f12:	46bd      	mov	sp, r7
    3f14:	bd80      	pop	{r7, pc}
    3f16:	bf00      	nop

00003f18 <s_28>:
void s_28(struct eventData * pxDataArray) 
{}
    3f18:	b480      	push	{r7}
    3f1a:	b083      	sub	sp, #12
    3f1c:	af00      	add	r7, sp, #0
    3f1e:	6078      	str	r0, [r7, #4]
    3f20:	370c      	adds	r7, #12
    3f22:	46bd      	mov	sp, r7
    3f24:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f28:	4770      	bx	lr
    3f2a:	bf00      	nop

00003f2c <s_29>:

/*task 8, sevrvant 21,22,23*/
void s_29(struct eventData * pxDataArray) 
{
    3f2c:	b480      	push	{r7}
    3f2e:	b083      	sub	sp, #12
    3f30:	af00      	add	r7, sp, #0
    3f32:	6078      	str	r0, [r7, #4]
}
    3f34:	370c      	adds	r7, #12
    3f36:	46bd      	mov	sp, r7
    3f38:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f3c:	4770      	bx	lr
    3f3e:	bf00      	nop

00003f40 <s_30>:
void s_30(struct eventData * pxDataArray) 
{
    3f40:	b580      	push	{r7, lr}
    3f42:	b082      	sub	sp, #8
    3f44:	af00      	add	r7, sp, #0
    3f46:	6078      	str	r0, [r7, #4]
    parse_gps_msg(); //gps.h
    3f48:	f00d fc6a 	bl	11820 <parse_gps_msg>
}
    3f4c:	3708      	adds	r7, #8
    3f4e:	46bd      	mov	sp, r7
    3f50:	bd80      	pop	{r7, pc}
    3f52:	bf00      	nop

00003f54 <s_31>:
void s_31(struct eventData * pxDataArray) 
{
    3f54:	b580      	push	{r7, lr}
    3f56:	b082      	sub	sp, #8
    3f58:	af00      	add	r7, sp, #0
    3f5a:	6078      	str	r0, [r7, #4]
    //use_gps_pos(); // autopilot.h  is not implemeted.
    send_gps_pos();
    3f5c:	f00a fe88 	bl	ec70 <send_gps_pos>
    send_radIR();
    3f60:	f00c f84c 	bl	fffc <send_radIR>
    send_takeOff();
    3f64:	f00c fe44 	bl	10bf0 <send_takeOff>
}
    3f68:	3708      	adds	r7, #8
    3f6a:	46bd      	mov	sp, r7
    3f6c:	bd80      	pop	{r7, pc}
    3f6e:	bf00      	nop

00003f70 <s_32>:
void s_32(struct eventData * pxDataArray) 
{}
    3f70:	b480      	push	{r7}
    3f72:	b083      	sub	sp, #12
    3f74:	af00      	add	r7, sp, #0
    3f76:	6078      	str	r0, [r7, #4]
    3f78:	370c      	adds	r7, #12
    3f7a:	46bd      	mov	sp, r7
    3f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f80:	4770      	bx	lr
    3f82:	bf00      	nop

00003f84 <s_33>:

/*task 9, servant 24, 25, 26, 27*/
void s_33(struct eventData * pxDataArray) 
{
    3f84:	b480      	push	{r7}
    3f86:	b083      	sub	sp, #12
    3f88:	af00      	add	r7, sp, #0
    3f8a:	6078      	str	r0, [r7, #4]
}
    3f8c:	370c      	adds	r7, #12
    3f8e:	46bd      	mov	sp, r7
    3f90:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f94:	4770      	bx	lr
    3f96:	bf00      	nop

00003f98 <s_34>:
void s_34(struct eventData * pxDataArray) 
{
    3f98:	b580      	push	{r7, lr}
    3f9a:	b082      	sub	sp, #8
    3f9c:	af00      	add	r7, sp, #0
    3f9e:	6078      	str	r0, [r7, #4]
    nav_home(); // nav.h
    3fa0:	f010 fefe 	bl	14da0 <nav_home>
}
    3fa4:	3708      	adds	r7, #8
    3fa6:	46bd      	mov	sp, r7
    3fa8:	bd80      	pop	{r7, pc}
    3faa:	bf00      	nop

00003fac <s_35>:
void s_35(struct eventData * pxDataArray) 
{
    3fac:	b580      	push	{r7, lr}
    3fae:	b082      	sub	sp, #8
    3fb0:	af00      	add	r7, sp, #0
    3fb2:	6078      	str	r0, [r7, #4]
    nav_update(); // nav.h
    3fb4:	f010 ff1a 	bl	14dec <nav_update>
}
    3fb8:	3708      	adds	r7, #8
    3fba:	46bd      	mov	sp, r7
    3fbc:	bd80      	pop	{r7, pc}
    3fbe:	bf00      	nop

00003fc0 <s_36>:
void s_36(struct eventData * pxDataArray) 
{
    3fc0:	b580      	push	{r7, lr}
    3fc2:	b082      	sub	sp, #8
    3fc4:	af00      	add	r7, sp, #0
    3fc6:	6078      	str	r0, [r7, #4]
    course_pid_run(); // pid.h
    3fc8:	f00e f83a 	bl	12040 <course_pid_run>
}
    3fcc:	3708      	adds	r7, #8
    3fce:	46bd      	mov	sp, r7
    3fd0:	bd80      	pop	{r7, pc}
    3fd2:	bf00      	nop

00003fd4 <s_37>:
void s_37(struct eventData * pxDataArray) 
{}
    3fd4:	b480      	push	{r7}
    3fd6:	b083      	sub	sp, #12
    3fd8:	af00      	add	r7, sp, #0
    3fda:	6078      	str	r0, [r7, #4]
    3fdc:	370c      	adds	r7, #12
    3fde:	46bd      	mov	sp, r7
    3fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fe4:	4770      	bx	lr
    3fe6:	bf00      	nop

00003fe8 <s_38>:

/*task 10, servant 28, 29*/
void s_38(struct eventData * pxDataArray) 
{
    3fe8:	b480      	push	{r7}
    3fea:	b083      	sub	sp, #12
    3fec:	af00      	add	r7, sp, #0
    3fee:	6078      	str	r0, [r7, #4]
}
    3ff0:	370c      	adds	r7, #12
    3ff2:	46bd      	mov	sp, r7
    3ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ff8:	4770      	bx	lr
    3ffa:	bf00      	nop

00003ffc <s_39>:
void s_39(struct eventData * pxDataArray) 
{
    3ffc:	b580      	push	{r7, lr}
    3ffe:	b082      	sub	sp, #8
    4000:	af00      	add	r7, sp, #0
    4002:	6078      	str	r0, [r7, #4]
    altitude_pid_run(); // pid.h
    4004:	f00e faa4 	bl	12550 <altitude_pid_run>
}
    4008:	3708      	adds	r7, #8
    400a:	46bd      	mov	sp, r7
    400c:	bd80      	pop	{r7, pc}
    400e:	bf00      	nop

00004010 <s_40>:
void s_40(struct eventData * pxDataArray) 
{}
    4010:	b480      	push	{r7}
    4012:	b083      	sub	sp, #12
    4014:	af00      	add	r7, sp, #0
    4016:	6078      	str	r0, [r7, #4]
    4018:	370c      	adds	r7, #12
    401a:	46bd      	mov	sp, r7
    401c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4020:	4770      	bx	lr
    4022:	bf00      	nop

00004024 <s_41>:

/*task 11, servant 30, 31*/
void s_41(struct eventData * pxDataArray) 
{
    4024:	b480      	push	{r7}
    4026:	b083      	sub	sp, #12
    4028:	af00      	add	r7, sp, #0
    402a:	6078      	str	r0, [r7, #4]
}
    402c:	370c      	adds	r7, #12
    402e:	46bd      	mov	sp, r7
    4030:	f85d 7b04 	ldr.w	r7, [sp], #4
    4034:	4770      	bx	lr
    4036:	bf00      	nop

00004038 <s_42>:
void s_42(struct eventData * pxDataArray) 
{
    4038:	b580      	push	{r7, lr}
    403a:	b082      	sub	sp, #8
    403c:	af00      	add	r7, sp, #0
    403e:	6078      	str	r0, [r7, #4]
    climb_pid_run(); // pid.h
    4040:	f00e f8b6 	bl	121b0 <climb_pid_run>
}
    4044:	3708      	adds	r7, #8
    4046:	46bd      	mov	sp, r7
    4048:	bd80      	pop	{r7, pc}
    404a:	bf00      	nop

0000404c <s_43>:
void s_43(struct eventData * pxDataArray) 
{}
    404c:	b480      	push	{r7}
    404e:	b083      	sub	sp, #12
    4050:	af00      	add	r7, sp, #0
    4052:	6078      	str	r0, [r7, #4]
    4054:	370c      	adds	r7, #12
    4056:	46bd      	mov	sp, r7
    4058:	f85d 7b04 	ldr.w	r7, [sp], #4
    405c:	4770      	bx	lr
    405e:	bf00      	nop

00004060 <s_44>:

/*task 12, servant 32, 33*/
void s_44(struct eventData * pxDataArray) 
{
    4060:	b480      	push	{r7}
    4062:	b083      	sub	sp, #12
    4064:	af00      	add	r7, sp, #0
    4066:	6078      	str	r0, [r7, #4]
}
    4068:	370c      	adds	r7, #12
    406a:	46bd      	mov	sp, r7
    406c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4070:	4770      	bx	lr
    4072:	bf00      	nop

00004074 <s_45>:
void s_45(struct eventData * pxDataArray) 
{
    4074:	b580      	push	{r7, lr}
    4076:	b082      	sub	sp, #8
    4078:	af00      	add	r7, sp, #0
    407a:	6078      	str	r0, [r7, #4]
    // main.c
    send_boot();
    407c:	f003 fa82 	bl	7584 <send_boot>
    send_attitude();
    4080:	f004 fa58 	bl	8534 <send_attitude>
    send_adc();
    4084:	f004 ff52 	bl	8f2c <send_adc>
    send_settings();
    4088:	f005 f9e0 	bl	944c <send_settings>
    send_desired();
    408c:	f005 fdea 	bl	9c64 <send_desired>
    send_bat();
    4090:	f006 fd20 	bl	aad4 <send_bat>
    send_climb();
    4094:	f007 f8dc 	bl	b250 <send_climb>
    send_mode();
    4098:	f007 fe54 	bl	bd44 <send_mode>
    send_debug();
    409c:	f008 f92e 	bl	c2fc <send_debug>
    send_nav_ref();
    40a0:	f008 fc0a 	bl	c8b8 <send_nav_ref>
}
    40a4:	3708      	adds	r7, #8
    40a6:	46bd      	mov	sp, r7
    40a8:	bd80      	pop	{r7, pc}
    40aa:	bf00      	nop

000040ac <s_46>:
void s_46(struct eventData * pxDataArray) 
{}
    40ac:	b480      	push	{r7}
    40ae:	b083      	sub	sp, #12
    40b0:	af00      	add	r7, sp, #0
    40b2:	6078      	str	r0, [r7, #4]
    40b4:	370c      	adds	r7, #12
    40b6:	46bd      	mov	sp, r7
    40b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    40bc:	4770      	bx	lr
    40be:	bf00      	nop

000040c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    40c0:	b480      	push	{r7}
    40c2:	b083      	sub	sp, #12
    40c4:	af00      	add	r7, sp, #0
    40c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    40c8:	687b      	ldr	r3, [r7, #4]
    40ca:	f103 0208 	add.w	r2, r3, #8
    40ce:	687b      	ldr	r3, [r7, #4]
    40d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    40d2:	687b      	ldr	r3, [r7, #4]
    40d4:	f04f 32ff 	mov.w	r2, #4294967295
    40d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    40da:	687b      	ldr	r3, [r7, #4]
    40dc:	f103 0208 	add.w	r2, r3, #8
    40e0:	687b      	ldr	r3, [r7, #4]
    40e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    40e4:	687b      	ldr	r3, [r7, #4]
    40e6:	f103 0208 	add.w	r2, r3, #8
    40ea:	687b      	ldr	r3, [r7, #4]
    40ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    40ee:	687b      	ldr	r3, [r7, #4]
    40f0:	2200      	movs	r2, #0
    40f2:	601a      	str	r2, [r3, #0]
}
    40f4:	370c      	adds	r7, #12
    40f6:	46bd      	mov	sp, r7
    40f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    40fc:	4770      	bx	lr
    40fe:	bf00      	nop

00004100 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    4100:	b480      	push	{r7}
    4102:	b083      	sub	sp, #12
    4104:	af00      	add	r7, sp, #0
    4106:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    4108:	687b      	ldr	r3, [r7, #4]
    410a:	2200      	movs	r2, #0
    410c:	611a      	str	r2, [r3, #16]
}
    410e:	370c      	adds	r7, #12
    4110:	46bd      	mov	sp, r7
    4112:	f85d 7b04 	ldr.w	r7, [sp], #4
    4116:	4770      	bx	lr

00004118 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    4118:	b480      	push	{r7}
    411a:	b085      	sub	sp, #20
    411c:	af00      	add	r7, sp, #0
    411e:	6078      	str	r0, [r7, #4]
    4120:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    4122:	687b      	ldr	r3, [r7, #4]
    4124:	685b      	ldr	r3, [r3, #4]
    4126:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    4128:	68fb      	ldr	r3, [r7, #12]
    412a:	685a      	ldr	r2, [r3, #4]
    412c:	683b      	ldr	r3, [r7, #0]
    412e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    4130:	687b      	ldr	r3, [r7, #4]
    4132:	685a      	ldr	r2, [r3, #4]
    4134:	683b      	ldr	r3, [r7, #0]
    4136:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    4138:	68fb      	ldr	r3, [r7, #12]
    413a:	685b      	ldr	r3, [r3, #4]
    413c:	683a      	ldr	r2, [r7, #0]
    413e:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    4140:	68fb      	ldr	r3, [r7, #12]
    4142:	683a      	ldr	r2, [r7, #0]
    4144:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    4146:	687b      	ldr	r3, [r7, #4]
    4148:	683a      	ldr	r2, [r7, #0]
    414a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    414c:	683b      	ldr	r3, [r7, #0]
    414e:	687a      	ldr	r2, [r7, #4]
    4150:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    4152:	687b      	ldr	r3, [r7, #4]
    4154:	681b      	ldr	r3, [r3, #0]
    4156:	1c5a      	adds	r2, r3, #1
    4158:	687b      	ldr	r3, [r7, #4]
    415a:	601a      	str	r2, [r3, #0]
}
    415c:	3714      	adds	r7, #20
    415e:	46bd      	mov	sp, r7
    4160:	f85d 7b04 	ldr.w	r7, [sp], #4
    4164:	4770      	bx	lr
    4166:	bf00      	nop

00004168 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    4168:	b480      	push	{r7}
    416a:	b085      	sub	sp, #20
    416c:	af00      	add	r7, sp, #0
    416e:	6078      	str	r0, [r7, #4]
    4170:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    4172:	683b      	ldr	r3, [r7, #0]
    4174:	681b      	ldr	r3, [r3, #0]
    4176:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    4178:	68bb      	ldr	r3, [r7, #8]
    417a:	f1b3 3fff 	cmp.w	r3, #4294967295
    417e:	d103      	bne.n	4188 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    4180:	687b      	ldr	r3, [r7, #4]
    4182:	691b      	ldr	r3, [r3, #16]
    4184:	60fb      	str	r3, [r7, #12]
    4186:	e00c      	b.n	41a2 <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    4188:	687b      	ldr	r3, [r7, #4]
    418a:	3308      	adds	r3, #8
    418c:	60fb      	str	r3, [r7, #12]
    418e:	e002      	b.n	4196 <vListInsert+0x2e>
    4190:	68fb      	ldr	r3, [r7, #12]
    4192:	685b      	ldr	r3, [r3, #4]
    4194:	60fb      	str	r3, [r7, #12]
    4196:	68fb      	ldr	r3, [r7, #12]
    4198:	685b      	ldr	r3, [r3, #4]
    419a:	681a      	ldr	r2, [r3, #0]
    419c:	68bb      	ldr	r3, [r7, #8]
    419e:	429a      	cmp	r2, r3
    41a0:	d9f6      	bls.n	4190 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    41a2:	68fb      	ldr	r3, [r7, #12]
    41a4:	685a      	ldr	r2, [r3, #4]
    41a6:	683b      	ldr	r3, [r7, #0]
    41a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    41aa:	683b      	ldr	r3, [r7, #0]
    41ac:	685b      	ldr	r3, [r3, #4]
    41ae:	683a      	ldr	r2, [r7, #0]
    41b0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    41b2:	683b      	ldr	r3, [r7, #0]
    41b4:	68fa      	ldr	r2, [r7, #12]
    41b6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    41b8:	68fb      	ldr	r3, [r7, #12]
    41ba:	683a      	ldr	r2, [r7, #0]
    41bc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    41be:	683b      	ldr	r3, [r7, #0]
    41c0:	687a      	ldr	r2, [r7, #4]
    41c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    41c4:	687b      	ldr	r3, [r7, #4]
    41c6:	681b      	ldr	r3, [r3, #0]
    41c8:	1c5a      	adds	r2, r3, #1
    41ca:	687b      	ldr	r3, [r7, #4]
    41cc:	601a      	str	r2, [r3, #0]
}
    41ce:	3714      	adds	r7, #20
    41d0:	46bd      	mov	sp, r7
    41d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    41d6:	4770      	bx	lr

000041d8 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    41d8:	b480      	push	{r7}
    41da:	b085      	sub	sp, #20
    41dc:	af00      	add	r7, sp, #0
    41de:	6078      	str	r0, [r7, #4]
    xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    41e0:	687b      	ldr	r3, [r7, #4]
    41e2:	685b      	ldr	r3, [r3, #4]
    41e4:	687a      	ldr	r2, [r7, #4]
    41e6:	6892      	ldr	r2, [r2, #8]
    41e8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    41ea:	687b      	ldr	r3, [r7, #4]
    41ec:	689b      	ldr	r3, [r3, #8]
    41ee:	687a      	ldr	r2, [r7, #4]
    41f0:	6852      	ldr	r2, [r2, #4]
    41f2:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    41f4:	687b      	ldr	r3, [r7, #4]
    41f6:	691b      	ldr	r3, [r3, #16]
    41f8:	60fb      	str	r3, [r7, #12]
	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    41fa:	68fb      	ldr	r3, [r7, #12]
    41fc:	685a      	ldr	r2, [r3, #4]
    41fe:	687b      	ldr	r3, [r7, #4]
    4200:	429a      	cmp	r2, r3
    4202:	d103      	bne.n	420c <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    4204:	687b      	ldr	r3, [r7, #4]
    4206:	689a      	ldr	r2, [r3, #8]
    4208:	68fb      	ldr	r3, [r7, #12]
    420a:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    420c:	687b      	ldr	r3, [r7, #4]
    420e:	2200      	movs	r2, #0
    4210:	611a      	str	r2, [r3, #16]
	(pxList->uxNumberOfItems)--;
    4212:	68fb      	ldr	r3, [r7, #12]
    4214:	681b      	ldr	r3, [r3, #0]
    4216:	1e5a      	subs	r2, r3, #1
    4218:	68fb      	ldr	r3, [r7, #12]
    421a:	601a      	str	r2, [r3, #0]
}
    421c:	3714      	adds	r7, #20
    421e:	46bd      	mov	sp, r7
    4220:	f85d 7b04 	ldr.w	r7, [sp], #4
    4224:	4770      	bx	lr
    4226:	bf00      	nop

00004228 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    4228:	b580      	push	{r7, lr}
    422a:	b084      	sub	sp, #16
    422c:	af00      	add	r7, sp, #0
    422e:	6078      	str	r0, [r7, #4]
    4230:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    4232:	2301      	movs	r3, #1
    4234:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    4236:	683b      	ldr	r3, [r7, #0]
    4238:	2b01      	cmp	r3, #1
    423a:	d00b      	beq.n	4254 <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    423c:	687b      	ldr	r3, [r7, #4]
    423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4240:	2b00      	cmp	r3, #0
    4242:	d001      	beq.n	4248 <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    4244:	2300      	movs	r3, #0
    4246:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4248:	687b      	ldr	r3, [r7, #4]
    424a:	691b      	ldr	r3, [r3, #16]
    424c:	2b00      	cmp	r3, #0
    424e:	d001      	beq.n	4254 <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    4250:	2300      	movs	r3, #0
    4252:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    4254:	68fb      	ldr	r3, [r7, #12]
    4256:	2b01      	cmp	r3, #1
    4258:	d12f      	bne.n	42ba <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    425a:	687b      	ldr	r3, [r7, #4]
    425c:	681a      	ldr	r2, [r3, #0]
    425e:	687b      	ldr	r3, [r7, #4]
    4260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4262:	6879      	ldr	r1, [r7, #4]
    4264:	6c09      	ldr	r1, [r1, #64]	; 0x40
    4266:	fb01 f303 	mul.w	r3, r1, r3
    426a:	441a      	add	r2, r3
    426c:	687b      	ldr	r3, [r7, #4]
    426e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    4270:	687b      	ldr	r3, [r7, #4]
    4272:	2200      	movs	r2, #0
    4274:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    4276:	687b      	ldr	r3, [r7, #4]
    4278:	681a      	ldr	r2, [r3, #0]
    427a:	687b      	ldr	r3, [r7, #4]
    427c:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    427e:	687b      	ldr	r3, [r7, #4]
    4280:	681a      	ldr	r2, [r3, #0]
    4282:	687b      	ldr	r3, [r7, #4]
    4284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4286:	3b01      	subs	r3, #1
    4288:	6879      	ldr	r1, [r7, #4]
    428a:	6c09      	ldr	r1, [r1, #64]	; 0x40
    428c:	fb01 f303 	mul.w	r3, r1, r3
    4290:	441a      	add	r2, r3
    4292:	687b      	ldr	r3, [r7, #4]
    4294:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    4296:	687b      	ldr	r3, [r7, #4]
    4298:	f04f 32ff 	mov.w	r2, #4294967295
    429c:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    429e:	687b      	ldr	r3, [r7, #4]
    42a0:	f04f 32ff 	mov.w	r2, #4294967295
    42a4:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    42a6:	687b      	ldr	r3, [r7, #4]
    42a8:	3310      	adds	r3, #16
    42aa:	4618      	mov	r0, r3
    42ac:	f7ff ff08 	bl	40c0 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    42b0:	687b      	ldr	r3, [r7, #4]
    42b2:	3324      	adds	r3, #36	; 0x24
    42b4:	4618      	mov	r0, r3
    42b6:	f7ff ff03 	bl	40c0 <vListInitialise>
	}

	return xReturn;
    42ba:	68fb      	ldr	r3, [r7, #12]
}
    42bc:	4618      	mov	r0, r3
    42be:	3710      	adds	r7, #16
    42c0:	46bd      	mov	sp, r7
    42c2:	bd80      	pop	{r7, pc}

000042c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    42c4:	b580      	push	{r7, lr}
    42c6:	b088      	sub	sp, #32
    42c8:	af00      	add	r7, sp, #0
    42ca:	60f8      	str	r0, [r7, #12]
    42cc:	60b9      	str	r1, [r7, #8]
    42ce:	4613      	mov	r3, r2
    42d0:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    42d2:	2300      	movs	r3, #0
    42d4:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    42d6:	68fb      	ldr	r3, [r7, #12]
    42d8:	2b00      	cmp	r3, #0
    42da:	d026      	beq.n	432a <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    42dc:	204c      	movs	r0, #76	; 0x4c
    42de:	f001 fda7 	bl	5e30 <pvPortMalloc>
    42e2:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    42e4:	69bb      	ldr	r3, [r7, #24]
    42e6:	2b00      	cmp	r3, #0
    42e8:	d01f      	beq.n	432a <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    42ea:	68fb      	ldr	r3, [r7, #12]
    42ec:	68ba      	ldr	r2, [r7, #8]
    42ee:	fb02 f303 	mul.w	r3, r2, r3
    42f2:	3301      	adds	r3, #1
    42f4:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    42f6:	6978      	ldr	r0, [r7, #20]
    42f8:	f001 fd9a 	bl	5e30 <pvPortMalloc>
    42fc:	4602      	mov	r2, r0
    42fe:	69bb      	ldr	r3, [r7, #24]
    4300:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    4302:	69bb      	ldr	r3, [r7, #24]
    4304:	681b      	ldr	r3, [r3, #0]
    4306:	2b00      	cmp	r3, #0
    4308:	d00c      	beq.n	4324 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    430a:	69bb      	ldr	r3, [r7, #24]
    430c:	68fa      	ldr	r2, [r7, #12]
    430e:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    4310:	69bb      	ldr	r3, [r7, #24]
    4312:	68ba      	ldr	r2, [r7, #8]
    4314:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    4316:	69b8      	ldr	r0, [r7, #24]
    4318:	2101      	movs	r1, #1
    431a:	f7ff ff85 	bl	4228 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    431e:	69bb      	ldr	r3, [r7, #24]
    4320:	61fb      	str	r3, [r7, #28]
    4322:	e002      	b.n	432a <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    4324:	69b8      	ldr	r0, [r7, #24]
    4326:	f001 fe47 	bl	5fb8 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    432a:	69fb      	ldr	r3, [r7, #28]
}
    432c:	4618      	mov	r0, r3
    432e:	3720      	adds	r7, #32
    4330:	46bd      	mov	sp, r7
    4332:	bd80      	pop	{r7, pc}

00004334 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    4334:	b580      	push	{r7, lr}
    4336:	b084      	sub	sp, #16
    4338:	af00      	add	r7, sp, #0
    433a:	4603      	mov	r3, r0
    433c:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    433e:	204c      	movs	r0, #76	; 0x4c
    4340:	f001 fd76 	bl	5e30 <pvPortMalloc>
    4344:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    4346:	68fb      	ldr	r3, [r7, #12]
    4348:	2b00      	cmp	r3, #0
    434a:	d02c      	beq.n	43a6 <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    434c:	68fb      	ldr	r3, [r7, #12]
    434e:	2200      	movs	r2, #0
    4350:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    4352:	68fb      	ldr	r3, [r7, #12]
    4354:	2200      	movs	r2, #0
    4356:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    4358:	68fb      	ldr	r3, [r7, #12]
    435a:	2200      	movs	r2, #0
    435c:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    435e:	68fb      	ldr	r3, [r7, #12]
    4360:	2200      	movs	r2, #0
    4362:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    4364:	68fb      	ldr	r3, [r7, #12]
    4366:	2200      	movs	r2, #0
    4368:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    436a:	68fb      	ldr	r3, [r7, #12]
    436c:	2201      	movs	r2, #1
    436e:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    4370:	68fb      	ldr	r3, [r7, #12]
    4372:	2200      	movs	r2, #0
    4374:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    4376:	68fb      	ldr	r3, [r7, #12]
    4378:	f04f 32ff 	mov.w	r2, #4294967295
    437c:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    437e:	68fb      	ldr	r3, [r7, #12]
    4380:	f04f 32ff 	mov.w	r2, #4294967295
    4384:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    4386:	68fb      	ldr	r3, [r7, #12]
    4388:	3310      	adds	r3, #16
    438a:	4618      	mov	r0, r3
    438c:	f7ff fe98 	bl	40c0 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    4390:	68fb      	ldr	r3, [r7, #12]
    4392:	3324      	adds	r3, #36	; 0x24
    4394:	4618      	mov	r0, r3
    4396:	f7ff fe93 	bl	40c0 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    439a:	68f8      	ldr	r0, [r7, #12]
    439c:	2100      	movs	r1, #0
    439e:	2200      	movs	r2, #0
    43a0:	2300      	movs	r3, #0
    43a2:	f000 f81d 	bl	43e0 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    43a6:	68fb      	ldr	r3, [r7, #12]
	}
    43a8:	4618      	mov	r0, r3
    43aa:	3710      	adds	r7, #16
    43ac:	46bd      	mov	sp, r7
    43ae:	bd80      	pop	{r7, pc}

000043b0 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    43b0:	b580      	push	{r7, lr}
    43b2:	b084      	sub	sp, #16
    43b4:	af00      	add	r7, sp, #0
    43b6:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    43b8:	f001 fcc0 	bl	5d3c <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    43bc:	687b      	ldr	r3, [r7, #4]
    43be:	681b      	ldr	r3, [r3, #0]
    43c0:	2b00      	cmp	r3, #0
    43c2:	d103      	bne.n	43cc <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    43c4:	687b      	ldr	r3, [r7, #4]
    43c6:	685b      	ldr	r3, [r3, #4]
    43c8:	60fb      	str	r3, [r7, #12]
    43ca:	e001      	b.n	43d0 <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    43cc:	2300      	movs	r3, #0
    43ce:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    43d0:	f001 fcca 	bl	5d68 <vPortExitCritical>
		
		return pxReturn;
    43d4:	68fb      	ldr	r3, [r7, #12]
	}
    43d6:	4618      	mov	r0, r3
    43d8:	3710      	adds	r7, #16
    43da:	46bd      	mov	sp, r7
    43dc:	bd80      	pop	{r7, pc}
    43de:	bf00      	nop

000043e0 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    43e0:	b580      	push	{r7, lr}
    43e2:	b088      	sub	sp, #32
    43e4:	af00      	add	r7, sp, #0
    43e6:	60f8      	str	r0, [r7, #12]
    43e8:	60b9      	str	r1, [r7, #8]
    43ea:	607a      	str	r2, [r7, #4]
    43ec:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    43ee:	2300      	movs	r3, #0
    43f0:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    43f2:	f001 fca3 	bl	5d3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    43f6:	68fb      	ldr	r3, [r7, #12]
    43f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    43fa:	68fb      	ldr	r3, [r7, #12]
    43fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    43fe:	429a      	cmp	r2, r3
    4400:	d216      	bcs.n	4430 <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    4402:	68f8      	ldr	r0, [r7, #12]
    4404:	68b9      	ldr	r1, [r7, #8]
    4406:	683a      	ldr	r2, [r7, #0]
    4408:	f000 f9d6 	bl	47b8 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    440c:	68fb      	ldr	r3, [r7, #12]
    440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4410:	2b00      	cmp	r3, #0
    4412:	d009      	beq.n	4428 <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    4414:	68fb      	ldr	r3, [r7, #12]
    4416:	3324      	adds	r3, #36	; 0x24
    4418:	4618      	mov	r0, r3
    441a:	f001 f905 	bl	5628 <xTaskRemoveFromEventList>
    441e:	4603      	mov	r3, r0
    4420:	2b01      	cmp	r3, #1
    4422:	d101      	bne.n	4428 <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    4424:	f001 fc7c 	bl	5d20 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    4428:	f001 fc9e 	bl	5d68 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    442c:	2301      	movs	r3, #1
    442e:	e059      	b.n	44e4 <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    4430:	687b      	ldr	r3, [r7, #4]
    4432:	2b00      	cmp	r3, #0
    4434:	d103      	bne.n	443e <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    4436:	f001 fc97 	bl	5d68 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    443a:	2300      	movs	r3, #0
    443c:	e052      	b.n	44e4 <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    443e:	69fb      	ldr	r3, [r7, #28]
    4440:	2b00      	cmp	r3, #0
    4442:	d106      	bne.n	4452 <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    4444:	f107 0314 	add.w	r3, r7, #20
    4448:	4618      	mov	r0, r3
    444a:	f001 f945 	bl	56d8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    444e:	2301      	movs	r3, #1
    4450:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    4452:	f001 fc89 	bl	5d68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    4456:	f000 fe93 	bl	5180 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    445a:	f001 fc6f 	bl	5d3c <vPortEnterCritical>
    445e:	68fb      	ldr	r3, [r7, #12]
    4460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4462:	f1b3 3fff 	cmp.w	r3, #4294967295
    4466:	d102      	bne.n	446e <xQueueGenericSend+0x8e>
    4468:	68fb      	ldr	r3, [r7, #12]
    446a:	2200      	movs	r2, #0
    446c:	645a      	str	r2, [r3, #68]	; 0x44
    446e:	68fb      	ldr	r3, [r7, #12]
    4470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4472:	f1b3 3fff 	cmp.w	r3, #4294967295
    4476:	d102      	bne.n	447e <xQueueGenericSend+0x9e>
    4478:	68fb      	ldr	r3, [r7, #12]
    447a:	2200      	movs	r2, #0
    447c:	649a      	str	r2, [r3, #72]	; 0x48
    447e:	f001 fc73 	bl	5d68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4482:	f107 0214 	add.w	r2, r7, #20
    4486:	1d3b      	adds	r3, r7, #4
    4488:	4610      	mov	r0, r2
    448a:	4619      	mov	r1, r3
    448c:	f001 f93c 	bl	5708 <xTaskCheckForTimeOut>
    4490:	4603      	mov	r3, r0
    4492:	2b00      	cmp	r3, #0
    4494:	d11e      	bne.n	44d4 <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    4496:	68f8      	ldr	r0, [r7, #12]
    4498:	f000 fa86 	bl	49a8 <prvIsQueueFull>
    449c:	4603      	mov	r3, r0
    449e:	2b00      	cmp	r3, #0
    44a0:	d012      	beq.n	44c8 <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    44a2:	68fb      	ldr	r3, [r7, #12]
    44a4:	f103 0210 	add.w	r2, r3, #16
    44a8:	687b      	ldr	r3, [r7, #4]
    44aa:	4610      	mov	r0, r2
    44ac:	4619      	mov	r1, r3
    44ae:	f001 f883 	bl	55b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    44b2:	68f8      	ldr	r0, [r7, #12]
    44b4:	f000 fa02 	bl	48bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    44b8:	f000 fe74 	bl	51a4 <xTaskResumeAll>
    44bc:	4603      	mov	r3, r0
    44be:	2b00      	cmp	r3, #0
    44c0:	d10f      	bne.n	44e2 <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    44c2:	f001 fc2d 	bl	5d20 <vPortYieldFromISR>
    44c6:	e00c      	b.n	44e2 <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    44c8:	68f8      	ldr	r0, [r7, #12]
    44ca:	f000 f9f7 	bl	48bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
    44ce:	f000 fe69 	bl	51a4 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    44d2:	e78e      	b.n	43f2 <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    44d4:	68f8      	ldr	r0, [r7, #12]
    44d6:	f000 f9f1 	bl	48bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
    44da:	f000 fe63 	bl	51a4 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    44de:	2300      	movs	r3, #0
    44e0:	e000      	b.n	44e4 <xQueueGenericSend+0x104>
		}
	}
    44e2:	e786      	b.n	43f2 <xQueueGenericSend+0x12>
}
    44e4:	4618      	mov	r0, r3
    44e6:	3720      	adds	r7, #32
    44e8:	46bd      	mov	sp, r7
    44ea:	bd80      	pop	{r7, pc}

000044ec <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    44ec:	b580      	push	{r7, lr}
    44ee:	b086      	sub	sp, #24
    44f0:	af00      	add	r7, sp, #0
    44f2:	60f8      	str	r0, [r7, #12]
    44f4:	60b9      	str	r1, [r7, #8]
    44f6:	607a      	str	r2, [r7, #4]
    44f8:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    44fa:	2300      	movs	r3, #0
    44fc:	613b      	str	r3, [r7, #16]
    44fe:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4502:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    4506:	68fb      	ldr	r3, [r7, #12]
    4508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    450a:	68fb      	ldr	r3, [r7, #12]
    450c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    450e:	429a      	cmp	r2, r3
    4510:	d221      	bcs.n	4556 <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    4512:	68f8      	ldr	r0, [r7, #12]
    4514:	68b9      	ldr	r1, [r7, #8]
    4516:	683a      	ldr	r2, [r7, #0]
    4518:	f000 f94e 	bl	47b8 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    451c:	68fb      	ldr	r3, [r7, #12]
    451e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4520:	f1b3 3fff 	cmp.w	r3, #4294967295
    4524:	d10f      	bne.n	4546 <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4526:	68fb      	ldr	r3, [r7, #12]
    4528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    452a:	2b00      	cmp	r3, #0
    452c:	d010      	beq.n	4550 <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    452e:	68fb      	ldr	r3, [r7, #12]
    4530:	3324      	adds	r3, #36	; 0x24
    4532:	4618      	mov	r0, r3
    4534:	f001 f878 	bl	5628 <xTaskRemoveFromEventList>
    4538:	4603      	mov	r3, r0
    453a:	2b00      	cmp	r3, #0
    453c:	d008      	beq.n	4550 <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    453e:	687b      	ldr	r3, [r7, #4]
    4540:	2201      	movs	r2, #1
    4542:	601a      	str	r2, [r3, #0]
    4544:	e004      	b.n	4550 <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    4546:	68fb      	ldr	r3, [r7, #12]
    4548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    454a:	1c5a      	adds	r2, r3, #1
    454c:	68fb      	ldr	r3, [r7, #12]
    454e:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    4550:	2301      	movs	r3, #1
    4552:	617b      	str	r3, [r7, #20]
    4554:	e001      	b.n	455a <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    4556:	2300      	movs	r3, #0
    4558:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    455a:	f04f 0000 	mov.w	r0, #0
    455e:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4562:	697b      	ldr	r3, [r7, #20]
}
    4564:	4618      	mov	r0, r3
    4566:	3718      	adds	r7, #24
    4568:	46bd      	mov	sp, r7
    456a:	bd80      	pop	{r7, pc}

0000456c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    456c:	b580      	push	{r7, lr}
    456e:	b088      	sub	sp, #32
    4570:	af00      	add	r7, sp, #0
    4572:	60f8      	str	r0, [r7, #12]
    4574:	60b9      	str	r1, [r7, #8]
    4576:	607a      	str	r2, [r7, #4]
    4578:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    457a:	2300      	movs	r3, #0
    457c:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    457e:	f001 fbdd 	bl	5d3c <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    4582:	68fb      	ldr	r3, [r7, #12]
    4584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4586:	2b00      	cmp	r3, #0
    4588:	d03b      	beq.n	4602 <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    458a:	68fb      	ldr	r3, [r7, #12]
    458c:	68db      	ldr	r3, [r3, #12]
    458e:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    4590:	68f8      	ldr	r0, [r7, #12]
    4592:	68b9      	ldr	r1, [r7, #8]
    4594:	f000 f96c 	bl	4870 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    4598:	683b      	ldr	r3, [r7, #0]
    459a:	2b00      	cmp	r3, #0
    459c:	d11c      	bne.n	45d8 <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    459e:	68fb      	ldr	r3, [r7, #12]
    45a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    45a2:	1e5a      	subs	r2, r3, #1
    45a4:	68fb      	ldr	r3, [r7, #12]
    45a6:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    45a8:	68fb      	ldr	r3, [r7, #12]
    45aa:	681b      	ldr	r3, [r3, #0]
    45ac:	2b00      	cmp	r3, #0
    45ae:	d104      	bne.n	45ba <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    45b0:	f001 fa5c 	bl	5a6c <xTaskGetCurrentTaskHandle>
    45b4:	4602      	mov	r2, r0
    45b6:	68fb      	ldr	r3, [r7, #12]
    45b8:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    45ba:	68fb      	ldr	r3, [r7, #12]
    45bc:	691b      	ldr	r3, [r3, #16]
    45be:	2b00      	cmp	r3, #0
    45c0:	d01b      	beq.n	45fa <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    45c2:	68fb      	ldr	r3, [r7, #12]
    45c4:	3310      	adds	r3, #16
    45c6:	4618      	mov	r0, r3
    45c8:	f001 f82e 	bl	5628 <xTaskRemoveFromEventList>
    45cc:	4603      	mov	r3, r0
    45ce:	2b01      	cmp	r3, #1
    45d0:	d113      	bne.n	45fa <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    45d2:	f001 fba5 	bl	5d20 <vPortYieldFromISR>
    45d6:	e010      	b.n	45fa <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    45d8:	68fb      	ldr	r3, [r7, #12]
    45da:	69ba      	ldr	r2, [r7, #24]
    45dc:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    45de:	68fb      	ldr	r3, [r7, #12]
    45e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    45e2:	2b00      	cmp	r3, #0
    45e4:	d009      	beq.n	45fa <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    45e6:	68fb      	ldr	r3, [r7, #12]
    45e8:	3324      	adds	r3, #36	; 0x24
    45ea:	4618      	mov	r0, r3
    45ec:	f001 f81c 	bl	5628 <xTaskRemoveFromEventList>
    45f0:	4603      	mov	r3, r0
    45f2:	2b00      	cmp	r3, #0
    45f4:	d001      	beq.n	45fa <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    45f6:	f001 fb93 	bl	5d20 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    45fa:	f001 fbb5 	bl	5d68 <vPortExitCritical>
				return pdPASS;
    45fe:	2301      	movs	r3, #1
    4600:	e066      	b.n	46d0 <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    4602:	687b      	ldr	r3, [r7, #4]
    4604:	2b00      	cmp	r3, #0
    4606:	d103      	bne.n	4610 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    4608:	f001 fbae 	bl	5d68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    460c:	2300      	movs	r3, #0
    460e:	e05f      	b.n	46d0 <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    4610:	69fb      	ldr	r3, [r7, #28]
    4612:	2b00      	cmp	r3, #0
    4614:	d106      	bne.n	4624 <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    4616:	f107 0310 	add.w	r3, r7, #16
    461a:	4618      	mov	r0, r3
    461c:	f001 f85c 	bl	56d8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4620:	2301      	movs	r3, #1
    4622:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    4624:	f001 fba0 	bl	5d68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    4628:	f000 fdaa 	bl	5180 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    462c:	f001 fb86 	bl	5d3c <vPortEnterCritical>
    4630:	68fb      	ldr	r3, [r7, #12]
    4632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4634:	f1b3 3fff 	cmp.w	r3, #4294967295
    4638:	d102      	bne.n	4640 <xQueueGenericReceive+0xd4>
    463a:	68fb      	ldr	r3, [r7, #12]
    463c:	2200      	movs	r2, #0
    463e:	645a      	str	r2, [r3, #68]	; 0x44
    4640:	68fb      	ldr	r3, [r7, #12]
    4642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4644:	f1b3 3fff 	cmp.w	r3, #4294967295
    4648:	d102      	bne.n	4650 <xQueueGenericReceive+0xe4>
    464a:	68fb      	ldr	r3, [r7, #12]
    464c:	2200      	movs	r2, #0
    464e:	649a      	str	r2, [r3, #72]	; 0x48
    4650:	f001 fb8a 	bl	5d68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4654:	f107 0210 	add.w	r2, r7, #16
    4658:	1d3b      	adds	r3, r7, #4
    465a:	4610      	mov	r0, r2
    465c:	4619      	mov	r1, r3
    465e:	f001 f853 	bl	5708 <xTaskCheckForTimeOut>
    4662:	4603      	mov	r3, r0
    4664:	2b00      	cmp	r3, #0
    4666:	d12b      	bne.n	46c0 <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    4668:	68f8      	ldr	r0, [r7, #12]
    466a:	f000 f973 	bl	4954 <prvIsQueueEmpty>
    466e:	4603      	mov	r3, r0
    4670:	2b00      	cmp	r3, #0
    4672:	d01f      	beq.n	46b4 <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4674:	68fb      	ldr	r3, [r7, #12]
    4676:	681b      	ldr	r3, [r3, #0]
    4678:	2b00      	cmp	r3, #0
    467a:	d108      	bne.n	468e <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    467c:	f001 fb5e 	bl	5d3c <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    4680:	68fb      	ldr	r3, [r7, #12]
    4682:	685b      	ldr	r3, [r3, #4]
    4684:	4618      	mov	r0, r3
    4686:	f001 fa01 	bl	5a8c <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    468a:	f001 fb6d 	bl	5d68 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    468e:	68fb      	ldr	r3, [r7, #12]
    4690:	f103 0224 	add.w	r2, r3, #36	; 0x24
    4694:	687b      	ldr	r3, [r7, #4]
    4696:	4610      	mov	r0, r2
    4698:	4619      	mov	r1, r3
    469a:	f000 ff8d 	bl	55b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    469e:	68f8      	ldr	r0, [r7, #12]
    46a0:	f000 f90c 	bl	48bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    46a4:	f000 fd7e 	bl	51a4 <xTaskResumeAll>
    46a8:	4603      	mov	r3, r0
    46aa:	2b00      	cmp	r3, #0
    46ac:	d10f      	bne.n	46ce <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    46ae:	f001 fb37 	bl	5d20 <vPortYieldFromISR>
    46b2:	e00c      	b.n	46ce <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    46b4:	68f8      	ldr	r0, [r7, #12]
    46b6:	f000 f901 	bl	48bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
    46ba:	f000 fd73 	bl	51a4 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    46be:	e75e      	b.n	457e <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    46c0:	68f8      	ldr	r0, [r7, #12]
    46c2:	f000 f8fb 	bl	48bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
    46c6:	f000 fd6d 	bl	51a4 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    46ca:	2300      	movs	r3, #0
    46cc:	e000      	b.n	46d0 <xQueueGenericReceive+0x164>
		}
	}
    46ce:	e756      	b.n	457e <xQueueGenericReceive+0x12>
}
    46d0:	4618      	mov	r0, r3
    46d2:	3720      	adds	r7, #32
    46d4:	46bd      	mov	sp, r7
    46d6:	bd80      	pop	{r7, pc}

000046d8 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    46d8:	b580      	push	{r7, lr}
    46da:	b086      	sub	sp, #24
    46dc:	af00      	add	r7, sp, #0
    46de:	60f8      	str	r0, [r7, #12]
    46e0:	60b9      	str	r1, [r7, #8]
    46e2:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    46e4:	2300      	movs	r3, #0
    46e6:	613b      	str	r3, [r7, #16]
    46e8:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    46ec:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    46f0:	68fb      	ldr	r3, [r7, #12]
    46f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    46f4:	2b00      	cmp	r3, #0
    46f6:	d025      	beq.n	4744 <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    46f8:	68f8      	ldr	r0, [r7, #12]
    46fa:	68b9      	ldr	r1, [r7, #8]
    46fc:	f000 f8b8 	bl	4870 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    4700:	68fb      	ldr	r3, [r7, #12]
    4702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4704:	1e5a      	subs	r2, r3, #1
    4706:	68fb      	ldr	r3, [r7, #12]
    4708:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    470a:	68fb      	ldr	r3, [r7, #12]
    470c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    470e:	f1b3 3fff 	cmp.w	r3, #4294967295
    4712:	d10f      	bne.n	4734 <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4714:	68fb      	ldr	r3, [r7, #12]
    4716:	691b      	ldr	r3, [r3, #16]
    4718:	2b00      	cmp	r3, #0
    471a:	d010      	beq.n	473e <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    471c:	68fb      	ldr	r3, [r7, #12]
    471e:	3310      	adds	r3, #16
    4720:	4618      	mov	r0, r3
    4722:	f000 ff81 	bl	5628 <xTaskRemoveFromEventList>
    4726:	4603      	mov	r3, r0
    4728:	2b00      	cmp	r3, #0
    472a:	d008      	beq.n	473e <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    472c:	687b      	ldr	r3, [r7, #4]
    472e:	2201      	movs	r2, #1
    4730:	601a      	str	r2, [r3, #0]
    4732:	e004      	b.n	473e <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    4734:	68fb      	ldr	r3, [r7, #12]
    4736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4738:	1c5a      	adds	r2, r3, #1
    473a:	68fb      	ldr	r3, [r7, #12]
    473c:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    473e:	2301      	movs	r3, #1
    4740:	617b      	str	r3, [r7, #20]
    4742:	e001      	b.n	4748 <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    4744:	2300      	movs	r3, #0
    4746:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4748:	f04f 0000 	mov.w	r0, #0
    474c:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4750:	697b      	ldr	r3, [r7, #20]
}
    4752:	4618      	mov	r0, r3
    4754:	3718      	adds	r7, #24
    4756:	46bd      	mov	sp, r7
    4758:	bd80      	pop	{r7, pc}
    475a:	bf00      	nop

0000475c <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    475c:	b580      	push	{r7, lr}
    475e:	b084      	sub	sp, #16
    4760:	af00      	add	r7, sp, #0
    4762:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    4764:	f001 faea 	bl	5d3c <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    4768:	687b      	ldr	r3, [r7, #4]
    476a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    476c:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    476e:	f001 fafb 	bl	5d68 <vPortExitCritical>

	return uxReturn;
    4772:	68fb      	ldr	r3, [r7, #12]
}
    4774:	4618      	mov	r0, r3
    4776:	3710      	adds	r7, #16
    4778:	46bd      	mov	sp, r7
    477a:	bd80      	pop	{r7, pc}

0000477c <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    477c:	b480      	push	{r7}
    477e:	b085      	sub	sp, #20
    4780:	af00      	add	r7, sp, #0
    4782:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    4784:	687b      	ldr	r3, [r7, #4]
    4786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4788:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    478a:	68fb      	ldr	r3, [r7, #12]
}
    478c:	4618      	mov	r0, r3
    478e:	3714      	adds	r7, #20
    4790:	46bd      	mov	sp, r7
    4792:	f85d 7b04 	ldr.w	r7, [sp], #4
    4796:	4770      	bx	lr

00004798 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    4798:	b580      	push	{r7, lr}
    479a:	b082      	sub	sp, #8
    479c:	af00      	add	r7, sp, #0
    479e:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    47a0:	687b      	ldr	r3, [r7, #4]
    47a2:	681b      	ldr	r3, [r3, #0]
    47a4:	4618      	mov	r0, r3
    47a6:	f001 fc07 	bl	5fb8 <vPortFree>
	vPortFree( pxQueue );
    47aa:	6878      	ldr	r0, [r7, #4]
    47ac:	f001 fc04 	bl	5fb8 <vPortFree>
}
    47b0:	3708      	adds	r7, #8
    47b2:	46bd      	mov	sp, r7
    47b4:	bd80      	pop	{r7, pc}
    47b6:	bf00      	nop

000047b8 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    47b8:	b580      	push	{r7, lr}
    47ba:	b084      	sub	sp, #16
    47bc:	af00      	add	r7, sp, #0
    47be:	60f8      	str	r0, [r7, #12]
    47c0:	60b9      	str	r1, [r7, #8]
    47c2:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    47c4:	68fb      	ldr	r3, [r7, #12]
    47c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    47c8:	2b00      	cmp	r3, #0
    47ca:	d10c      	bne.n	47e6 <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    47cc:	68fb      	ldr	r3, [r7, #12]
    47ce:	681b      	ldr	r3, [r3, #0]
    47d0:	2b00      	cmp	r3, #0
    47d2:	d145      	bne.n	4860 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    47d4:	68fb      	ldr	r3, [r7, #12]
    47d6:	685b      	ldr	r3, [r3, #4]
    47d8:	4618      	mov	r0, r3
    47da:	f001 f9bb 	bl	5b54 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    47de:	68fb      	ldr	r3, [r7, #12]
    47e0:	2200      	movs	r2, #0
    47e2:	605a      	str	r2, [r3, #4]
    47e4:	e03c      	b.n	4860 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    47e6:	687b      	ldr	r3, [r7, #4]
    47e8:	2b00      	cmp	r3, #0
    47ea:	d11a      	bne.n	4822 <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    47ec:	68fb      	ldr	r3, [r7, #12]
    47ee:	689a      	ldr	r2, [r3, #8]
    47f0:	68fb      	ldr	r3, [r7, #12]
    47f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    47f4:	4610      	mov	r0, r2
    47f6:	68b9      	ldr	r1, [r7, #8]
    47f8:	461a      	mov	r2, r3
    47fa:	f014 f845 	bl	18888 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    47fe:	68fb      	ldr	r3, [r7, #12]
    4800:	689a      	ldr	r2, [r3, #8]
    4802:	68fb      	ldr	r3, [r7, #12]
    4804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4806:	441a      	add	r2, r3
    4808:	68fb      	ldr	r3, [r7, #12]
    480a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    480c:	68fb      	ldr	r3, [r7, #12]
    480e:	689a      	ldr	r2, [r3, #8]
    4810:	68fb      	ldr	r3, [r7, #12]
    4812:	685b      	ldr	r3, [r3, #4]
    4814:	429a      	cmp	r2, r3
    4816:	d323      	bcc.n	4860 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    4818:	68fb      	ldr	r3, [r7, #12]
    481a:	681a      	ldr	r2, [r3, #0]
    481c:	68fb      	ldr	r3, [r7, #12]
    481e:	609a      	str	r2, [r3, #8]
    4820:	e01e      	b.n	4860 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    4822:	68fb      	ldr	r3, [r7, #12]
    4824:	68da      	ldr	r2, [r3, #12]
    4826:	68fb      	ldr	r3, [r7, #12]
    4828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    482a:	4610      	mov	r0, r2
    482c:	68b9      	ldr	r1, [r7, #8]
    482e:	461a      	mov	r2, r3
    4830:	f014 f82a 	bl	18888 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    4834:	68fb      	ldr	r3, [r7, #12]
    4836:	68da      	ldr	r2, [r3, #12]
    4838:	68fb      	ldr	r3, [r7, #12]
    483a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    483c:	425b      	negs	r3, r3
    483e:	441a      	add	r2, r3
    4840:	68fb      	ldr	r3, [r7, #12]
    4842:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    4844:	68fb      	ldr	r3, [r7, #12]
    4846:	68da      	ldr	r2, [r3, #12]
    4848:	68fb      	ldr	r3, [r7, #12]
    484a:	681b      	ldr	r3, [r3, #0]
    484c:	429a      	cmp	r2, r3
    484e:	d207      	bcs.n	4860 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    4850:	68fb      	ldr	r3, [r7, #12]
    4852:	685a      	ldr	r2, [r3, #4]
    4854:	68fb      	ldr	r3, [r7, #12]
    4856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4858:	425b      	negs	r3, r3
    485a:	441a      	add	r2, r3
    485c:	68fb      	ldr	r3, [r7, #12]
    485e:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    4860:	68fb      	ldr	r3, [r7, #12]
    4862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4864:	1c5a      	adds	r2, r3, #1
    4866:	68fb      	ldr	r3, [r7, #12]
    4868:	639a      	str	r2, [r3, #56]	; 0x38
}
    486a:	3710      	adds	r7, #16
    486c:	46bd      	mov	sp, r7
    486e:	bd80      	pop	{r7, pc}

00004870 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    4870:	b580      	push	{r7, lr}
    4872:	b082      	sub	sp, #8
    4874:	af00      	add	r7, sp, #0
    4876:	6078      	str	r0, [r7, #4]
    4878:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    487a:	687b      	ldr	r3, [r7, #4]
    487c:	681b      	ldr	r3, [r3, #0]
    487e:	2b00      	cmp	r3, #0
    4880:	d019      	beq.n	48b6 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    4882:	687b      	ldr	r3, [r7, #4]
    4884:	68da      	ldr	r2, [r3, #12]
    4886:	687b      	ldr	r3, [r7, #4]
    4888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    488a:	441a      	add	r2, r3
    488c:	687b      	ldr	r3, [r7, #4]
    488e:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    4890:	687b      	ldr	r3, [r7, #4]
    4892:	68da      	ldr	r2, [r3, #12]
    4894:	687b      	ldr	r3, [r7, #4]
    4896:	685b      	ldr	r3, [r3, #4]
    4898:	429a      	cmp	r2, r3
    489a:	d303      	bcc.n	48a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    489c:	687b      	ldr	r3, [r7, #4]
    489e:	681a      	ldr	r2, [r3, #0]
    48a0:	687b      	ldr	r3, [r7, #4]
    48a2:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    48a4:	687b      	ldr	r3, [r7, #4]
    48a6:	68da      	ldr	r2, [r3, #12]
    48a8:	687b      	ldr	r3, [r7, #4]
    48aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    48ac:	6838      	ldr	r0, [r7, #0]
    48ae:	4611      	mov	r1, r2
    48b0:	461a      	mov	r2, r3
    48b2:	f013 ffe9 	bl	18888 <memcpy>
	}
}
    48b6:	3708      	adds	r7, #8
    48b8:	46bd      	mov	sp, r7
    48ba:	bd80      	pop	{r7, pc}

000048bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    48bc:	b580      	push	{r7, lr}
    48be:	b082      	sub	sp, #8
    48c0:	af00      	add	r7, sp, #0
    48c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    48c4:	f001 fa3a 	bl	5d3c <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    48c8:	e014      	b.n	48f4 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    48ca:	687b      	ldr	r3, [r7, #4]
    48cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    48ce:	2b00      	cmp	r3, #0
    48d0:	d00f      	beq.n	48f2 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    48d2:	687b      	ldr	r3, [r7, #4]
    48d4:	3324      	adds	r3, #36	; 0x24
    48d6:	4618      	mov	r0, r3
    48d8:	f000 fea6 	bl	5628 <xTaskRemoveFromEventList>
    48dc:	4603      	mov	r3, r0
    48de:	2b00      	cmp	r3, #0
    48e0:	d001      	beq.n	48e6 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    48e2:	f000 ff5d 	bl	57a0 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    48e6:	687b      	ldr	r3, [r7, #4]
    48e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    48ea:	1e5a      	subs	r2, r3, #1
    48ec:	687b      	ldr	r3, [r7, #4]
    48ee:	649a      	str	r2, [r3, #72]	; 0x48
    48f0:	e000      	b.n	48f4 <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    48f2:	e003      	b.n	48fc <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    48f4:	687b      	ldr	r3, [r7, #4]
    48f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    48f8:	2b00      	cmp	r3, #0
    48fa:	dce6      	bgt.n	48ca <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    48fc:	687b      	ldr	r3, [r7, #4]
    48fe:	f04f 32ff 	mov.w	r2, #4294967295
    4902:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    4904:	f001 fa30 	bl	5d68 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    4908:	f001 fa18 	bl	5d3c <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    490c:	e014      	b.n	4938 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    490e:	687b      	ldr	r3, [r7, #4]
    4910:	691b      	ldr	r3, [r3, #16]
    4912:	2b00      	cmp	r3, #0
    4914:	d00f      	beq.n	4936 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    4916:	687b      	ldr	r3, [r7, #4]
    4918:	3310      	adds	r3, #16
    491a:	4618      	mov	r0, r3
    491c:	f000 fe84 	bl	5628 <xTaskRemoveFromEventList>
    4920:	4603      	mov	r3, r0
    4922:	2b00      	cmp	r3, #0
    4924:	d001      	beq.n	492a <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    4926:	f000 ff3b 	bl	57a0 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    492a:	687b      	ldr	r3, [r7, #4]
    492c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    492e:	1e5a      	subs	r2, r3, #1
    4930:	687b      	ldr	r3, [r7, #4]
    4932:	645a      	str	r2, [r3, #68]	; 0x44
    4934:	e000      	b.n	4938 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    4936:	e003      	b.n	4940 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    4938:	687b      	ldr	r3, [r7, #4]
    493a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    493c:	2b00      	cmp	r3, #0
    493e:	dce6      	bgt.n	490e <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    4940:	687b      	ldr	r3, [r7, #4]
    4942:	f04f 32ff 	mov.w	r2, #4294967295
    4946:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    4948:	f001 fa0e 	bl	5d68 <vPortExitCritical>
}
    494c:	3708      	adds	r7, #8
    494e:	46bd      	mov	sp, r7
    4950:	bd80      	pop	{r7, pc}
    4952:	bf00      	nop

00004954 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    4954:	b580      	push	{r7, lr}
    4956:	b084      	sub	sp, #16
    4958:	af00      	add	r7, sp, #0
    495a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    495c:	f001 f9ee 	bl	5d3c <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4960:	687b      	ldr	r3, [r7, #4]
    4962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4964:	2b00      	cmp	r3, #0
    4966:	bf14      	ite	ne
    4968:	2300      	movne	r3, #0
    496a:	2301      	moveq	r3, #1
    496c:	b2db      	uxtb	r3, r3
    496e:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4970:	f001 f9fa 	bl	5d68 <vPortExitCritical>

	return xReturn;
    4974:	68fb      	ldr	r3, [r7, #12]
}
    4976:	4618      	mov	r0, r3
    4978:	3710      	adds	r7, #16
    497a:	46bd      	mov	sp, r7
    497c:	bd80      	pop	{r7, pc}
    497e:	bf00      	nop

00004980 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    4980:	b480      	push	{r7}
    4982:	b085      	sub	sp, #20
    4984:	af00      	add	r7, sp, #0
    4986:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4988:	687b      	ldr	r3, [r7, #4]
    498a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    498c:	2b00      	cmp	r3, #0
    498e:	bf14      	ite	ne
    4990:	2300      	movne	r3, #0
    4992:	2301      	moveq	r3, #1
    4994:	b2db      	uxtb	r3, r3
    4996:	60fb      	str	r3, [r7, #12]

	return xReturn;
    4998:	68fb      	ldr	r3, [r7, #12]
}
    499a:	4618      	mov	r0, r3
    499c:	3714      	adds	r7, #20
    499e:	46bd      	mov	sp, r7
    49a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    49a4:	4770      	bx	lr
    49a6:	bf00      	nop

000049a8 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    49a8:	b580      	push	{r7, lr}
    49aa:	b084      	sub	sp, #16
    49ac:	af00      	add	r7, sp, #0
    49ae:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    49b0:	f001 f9c4 	bl	5d3c <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    49b4:	687b      	ldr	r3, [r7, #4]
    49b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    49b8:	687b      	ldr	r3, [r7, #4]
    49ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    49bc:	429a      	cmp	r2, r3
    49be:	bf14      	ite	ne
    49c0:	2300      	movne	r3, #0
    49c2:	2301      	moveq	r3, #1
    49c4:	b2db      	uxtb	r3, r3
    49c6:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    49c8:	f001 f9ce 	bl	5d68 <vPortExitCritical>

	return xReturn;
    49cc:	68fb      	ldr	r3, [r7, #12]
}
    49ce:	4618      	mov	r0, r3
    49d0:	3710      	adds	r7, #16
    49d2:	46bd      	mov	sp, r7
    49d4:	bd80      	pop	{r7, pc}
    49d6:	bf00      	nop

000049d8 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    49d8:	b480      	push	{r7}
    49da:	b085      	sub	sp, #20
    49dc:	af00      	add	r7, sp, #0
    49de:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    49e0:	687b      	ldr	r3, [r7, #4]
    49e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    49e4:	687b      	ldr	r3, [r7, #4]
    49e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    49e8:	429a      	cmp	r2, r3
    49ea:	bf14      	ite	ne
    49ec:	2300      	movne	r3, #0
    49ee:	2301      	moveq	r3, #1
    49f0:	b2db      	uxtb	r3, r3
    49f2:	60fb      	str	r3, [r7, #12]

	return xReturn;
    49f4:	68fb      	ldr	r3, [r7, #12]
}
    49f6:	4618      	mov	r0, r3
    49f8:	3714      	adds	r7, #20
    49fa:	46bd      	mov	sp, r7
    49fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a00:	4770      	bx	lr
    4a02:	bf00      	nop

00004a04 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    4a04:	b580      	push	{r7, lr}
    4a06:	b08a      	sub	sp, #40	; 0x28
    4a08:	af02      	add	r7, sp, #8
    4a0a:	60f8      	str	r0, [r7, #12]
    4a0c:	60b9      	str	r1, [r7, #8]
    4a0e:	603b      	str	r3, [r7, #0]
    4a10:	4613      	mov	r3, r2
    4a12:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    4a14:	88fb      	ldrh	r3, [r7, #6]
    4a16:	4618      	mov	r0, r3
    4a18:	6b39      	ldr	r1, [r7, #48]	; 0x30
    4a1a:	f000 ffe5 	bl	59e8 <prvAllocateTCBAndStack>
    4a1e:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    4a20:	69bb      	ldr	r3, [r7, #24]
    4a22:	2b00      	cmp	r3, #0
    4a24:	f000 80a1 	beq.w	4b6a <xTaskGenericCreate+0x166>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    4a28:	69bb      	ldr	r3, [r7, #24]
    4a2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    4a2c:	88fb      	ldrh	r3, [r7, #6]
    4a2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4a32:	3b01      	subs	r3, #1
    4a34:	009b      	lsls	r3, r3, #2
    4a36:	4413      	add	r3, r2
    4a38:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    4a3a:	697b      	ldr	r3, [r7, #20]
    4a3c:	f023 0307 	bic.w	r3, r3, #7
    4a40:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    4a42:	88fb      	ldrh	r3, [r7, #6]
    4a44:	9300      	str	r3, [sp, #0]
    4a46:	69b8      	ldr	r0, [r7, #24]
    4a48:	68b9      	ldr	r1, [r7, #8]
    4a4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4a4e:	f000 febd 	bl	57cc <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    4a52:	6978      	ldr	r0, [r7, #20]
    4a54:	68f9      	ldr	r1, [r7, #12]
    4a56:	683a      	ldr	r2, [r7, #0]
    4a58:	f001 f8f2 	bl	5c40 <pxPortInitialiseStack>
    4a5c:	4602      	mov	r2, r0
    4a5e:	69bb      	ldr	r3, [r7, #24]
    4a60:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    4a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4a64:	2b00      	cmp	r3, #0
    4a66:	d002      	beq.n	4a6e <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    4a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4a6a:	69ba      	ldr	r2, [r7, #24]
    4a6c:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    4a6e:	f001 f965 	bl	5d3c <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    4a72:	f241 43e8 	movw	r3, #5352	; 0x14e8
    4a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a7a:	681b      	ldr	r3, [r3, #0]
    4a7c:	1c5a      	adds	r2, r3, #1
    4a7e:	f241 43e8 	movw	r3, #5352	; 0x14e8
    4a82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a86:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    4a88:	f241 4310 	movw	r3, #5136	; 0x1410
    4a8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a90:	681b      	ldr	r3, [r3, #0]
    4a92:	2b00      	cmp	r3, #0
    4a94:	d10f      	bne.n	4ab6 <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    4a96:	f241 4310 	movw	r3, #5136	; 0x1410
    4a9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a9e:	69ba      	ldr	r2, [r7, #24]
    4aa0:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    4aa2:	f241 43e8 	movw	r3, #5352	; 0x14e8
    4aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4aaa:	681b      	ldr	r3, [r3, #0]
    4aac:	2b01      	cmp	r3, #1
    4aae:	d118      	bne.n	4ae2 <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    4ab0:	f000 fec2 	bl	5838 <prvInitialiseTaskLists>
    4ab4:	e015      	b.n	4ae2 <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    4ab6:	f241 43f8 	movw	r3, #5368	; 0x14f8
    4aba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4abe:	681b      	ldr	r3, [r3, #0]
    4ac0:	2b00      	cmp	r3, #0
    4ac2:	d10e      	bne.n	4ae2 <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    4ac4:	f241 4310 	movw	r3, #5136	; 0x1410
    4ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4acc:	681b      	ldr	r3, [r3, #0]
    4ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4ad2:	429a      	cmp	r2, r3
    4ad4:	d805      	bhi.n	4ae2 <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    4ad6:	f241 4310 	movw	r3, #5136	; 0x1410
    4ada:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ade:	69ba      	ldr	r2, [r7, #24]
    4ae0:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    4ae2:	69bb      	ldr	r3, [r7, #24]
    4ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ae6:	f241 43f0 	movw	r3, #5360	; 0x14f0
    4aea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4aee:	681b      	ldr	r3, [r3, #0]
    4af0:	429a      	cmp	r2, r3
    4af2:	d906      	bls.n	4b02 <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    4af4:	69bb      	ldr	r3, [r7, #24]
    4af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4af8:	f241 43f0 	movw	r3, #5360	; 0x14f0
    4afc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b00:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    4b02:	f241 530c 	movw	r3, #5388	; 0x150c
    4b06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b0a:	681b      	ldr	r3, [r3, #0]
    4b0c:	1c5a      	adds	r2, r3, #1
    4b0e:	f241 530c 	movw	r3, #5388	; 0x150c
    4b12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b16:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    4b18:	69bb      	ldr	r3, [r7, #24]
    4b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b1c:	f241 43f4 	movw	r3, #5364	; 0x14f4
    4b20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b24:	681b      	ldr	r3, [r3, #0]
    4b26:	429a      	cmp	r2, r3
    4b28:	d906      	bls.n	4b38 <xTaskGenericCreate+0x134>
    4b2a:	69bb      	ldr	r3, [r7, #24]
    4b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b2e:	f241 43f4 	movw	r3, #5364	; 0x14f4
    4b32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b36:	601a      	str	r2, [r3, #0]
    4b38:	69bb      	ldr	r3, [r7, #24]
    4b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b3c:	4613      	mov	r3, r2
    4b3e:	009b      	lsls	r3, r3, #2
    4b40:	4413      	add	r3, r2
    4b42:	009b      	lsls	r3, r3, #2
    4b44:	f241 4214 	movw	r2, #5140	; 0x1414
    4b48:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4b4c:	441a      	add	r2, r3
    4b4e:	69bb      	ldr	r3, [r7, #24]
    4b50:	3304      	adds	r3, #4
    4b52:	4610      	mov	r0, r2
    4b54:	4619      	mov	r1, r3
    4b56:	f7ff fadf 	bl	4118 <vListInsertEnd>

			xReturn = pdPASS;
    4b5a:	2301      	movs	r3, #1
    4b5c:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    4b5e:	69b8      	ldr	r0, [r7, #24]
    4b60:	f012 fe88 	bl	17874 <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    4b64:	f001 f900 	bl	5d68 <vPortExitCritical>
    4b68:	e002      	b.n	4b70 <xTaskGenericCreate+0x16c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    4b6a:	f04f 33ff 	mov.w	r3, #4294967295
    4b6e:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    4b70:	69fb      	ldr	r3, [r7, #28]
    4b72:	2b01      	cmp	r3, #1
    4b74:	d111      	bne.n	4b9a <xTaskGenericCreate+0x196>
	{
		if( xSchedulerRunning != pdFALSE )
    4b76:	f241 43f8 	movw	r3, #5368	; 0x14f8
    4b7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b7e:	681b      	ldr	r3, [r3, #0]
    4b80:	2b00      	cmp	r3, #0
    4b82:	d00a      	beq.n	4b9a <xTaskGenericCreate+0x196>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    4b84:	f241 4310 	movw	r3, #5136	; 0x1410
    4b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b8c:	681b      	ldr	r3, [r3, #0]
    4b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4b92:	429a      	cmp	r2, r3
    4b94:	d201      	bcs.n	4b9a <xTaskGenericCreate+0x196>
			{
				portYIELD_WITHIN_API();
    4b96:	f001 f8c3 	bl	5d20 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    4b9a:	69fb      	ldr	r3, [r7, #28]
}
    4b9c:	4618      	mov	r0, r3
    4b9e:	3720      	adds	r7, #32
    4ba0:	46bd      	mov	sp, r7
    4ba2:	bd80      	pop	{r7, pc}

00004ba4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    4ba4:	b580      	push	{r7, lr}
    4ba6:	b084      	sub	sp, #16
    4ba8:	af00      	add	r7, sp, #0
    4baa:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4bac:	f001 f8c6 	bl	5d3c <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    4bb0:	f241 4310 	movw	r3, #5136	; 0x1410
    4bb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bb8:	681b      	ldr	r3, [r3, #0]
    4bba:	687a      	ldr	r2, [r7, #4]
    4bbc:	429a      	cmp	r2, r3
    4bbe:	d101      	bne.n	4bc4 <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    4bc0:	2300      	movs	r3, #0
    4bc2:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    4bc4:	687b      	ldr	r3, [r7, #4]
    4bc6:	2b00      	cmp	r3, #0
    4bc8:	d105      	bne.n	4bd6 <vTaskDelete+0x32>
    4bca:	f241 4310 	movw	r3, #5136	; 0x1410
    4bce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bd2:	681b      	ldr	r3, [r3, #0]
    4bd4:	e000      	b.n	4bd8 <vTaskDelete+0x34>
    4bd6:	687b      	ldr	r3, [r7, #4]
    4bd8:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4bda:	68fb      	ldr	r3, [r7, #12]
    4bdc:	3304      	adds	r3, #4
    4bde:	4618      	mov	r0, r3
    4be0:	f7ff fafa 	bl	41d8 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4be4:	68fb      	ldr	r3, [r7, #12]
    4be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4be8:	2b00      	cmp	r3, #0
    4bea:	d004      	beq.n	4bf6 <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4bec:	68fb      	ldr	r3, [r7, #12]
    4bee:	3318      	adds	r3, #24
    4bf0:	4618      	mov	r0, r3
    4bf2:	f7ff faf1 	bl	41d8 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    4bf6:	68fb      	ldr	r3, [r7, #12]
    4bf8:	3304      	adds	r3, #4
    4bfa:	f241 40bc 	movw	r0, #5308	; 0x14bc
    4bfe:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4c02:	4619      	mov	r1, r3
    4c04:	f7ff fa88 	bl	4118 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    4c08:	f241 43d0 	movw	r3, #5328	; 0x14d0
    4c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c10:	681b      	ldr	r3, [r3, #0]
    4c12:	1c5a      	adds	r2, r3, #1
    4c14:	f241 43d0 	movw	r3, #5328	; 0x14d0
    4c18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c1c:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    4c1e:	f241 530c 	movw	r3, #5388	; 0x150c
    4c22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c26:	681b      	ldr	r3, [r3, #0]
    4c28:	1c5a      	adds	r2, r3, #1
    4c2a:	f241 530c 	movw	r3, #5388	; 0x150c
    4c2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c32:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    4c34:	f001 f898 	bl	5d68 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    4c38:	f241 43f8 	movw	r3, #5368	; 0x14f8
    4c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c40:	681b      	ldr	r3, [r3, #0]
    4c42:	2b00      	cmp	r3, #0
    4c44:	d004      	beq.n	4c50 <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    4c46:	687b      	ldr	r3, [r7, #4]
    4c48:	2b00      	cmp	r3, #0
    4c4a:	d101      	bne.n	4c50 <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    4c4c:	f001 f868 	bl	5d20 <vPortYieldFromISR>
			}
		}
	}
    4c50:	3710      	adds	r7, #16
    4c52:	46bd      	mov	sp, r7
    4c54:	bd80      	pop	{r7, pc}
    4c56:	bf00      	nop

00004c58 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    4c58:	b580      	push	{r7, lr}
    4c5a:	b086      	sub	sp, #24
    4c5c:	af00      	add	r7, sp, #0
    4c5e:	6078      	str	r0, [r7, #4]
    4c60:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    4c62:	2300      	movs	r3, #0
    4c64:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    4c66:	f000 fa8b 	bl	5180 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    4c6a:	687b      	ldr	r3, [r7, #4]
    4c6c:	681a      	ldr	r2, [r3, #0]
    4c6e:	683b      	ldr	r3, [r7, #0]
    4c70:	4413      	add	r3, r2
    4c72:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    4c74:	687b      	ldr	r3, [r7, #4]
    4c76:	681a      	ldr	r2, [r3, #0]
    4c78:	f241 43ec 	movw	r3, #5356	; 0x14ec
    4c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c80:	681b      	ldr	r3, [r3, #0]
    4c82:	429a      	cmp	r2, r3
    4c84:	d90f      	bls.n	4ca6 <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    4c86:	687b      	ldr	r3, [r7, #4]
    4c88:	681a      	ldr	r2, [r3, #0]
    4c8a:	693b      	ldr	r3, [r7, #16]
    4c8c:	429a      	cmp	r2, r3
    4c8e:	d919      	bls.n	4cc4 <vTaskDelayUntil+0x6c>
    4c90:	f241 43ec 	movw	r3, #5356	; 0x14ec
    4c94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c98:	681b      	ldr	r3, [r3, #0]
    4c9a:	693a      	ldr	r2, [r7, #16]
    4c9c:	429a      	cmp	r2, r3
    4c9e:	d911      	bls.n	4cc4 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4ca0:	2301      	movs	r3, #1
    4ca2:	617b      	str	r3, [r7, #20]
    4ca4:	e00e      	b.n	4cc4 <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    4ca6:	687b      	ldr	r3, [r7, #4]
    4ca8:	681a      	ldr	r2, [r3, #0]
    4caa:	693b      	ldr	r3, [r7, #16]
    4cac:	429a      	cmp	r2, r3
    4cae:	d807      	bhi.n	4cc0 <vTaskDelayUntil+0x68>
    4cb0:	f241 43ec 	movw	r3, #5356	; 0x14ec
    4cb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cb8:	681b      	ldr	r3, [r3, #0]
    4cba:	693a      	ldr	r2, [r7, #16]
    4cbc:	429a      	cmp	r2, r3
    4cbe:	d901      	bls.n	4cc4 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4cc0:	2301      	movs	r3, #1
    4cc2:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    4cc4:	687b      	ldr	r3, [r7, #4]
    4cc6:	693a      	ldr	r2, [r7, #16]
    4cc8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    4cca:	697b      	ldr	r3, [r7, #20]
    4ccc:	2b00      	cmp	r3, #0
    4cce:	d00b      	beq.n	4ce8 <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4cd0:	f241 4310 	movw	r3, #5136	; 0x1410
    4cd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cd8:	681b      	ldr	r3, [r3, #0]
    4cda:	3304      	adds	r3, #4
    4cdc:	4618      	mov	r0, r3
    4cde:	f7ff fa7b 	bl	41d8 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4ce2:	6938      	ldr	r0, [r7, #16]
    4ce4:	f000 fe3c 	bl	5960 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    4ce8:	f000 fa5c 	bl	51a4 <xTaskResumeAll>
    4cec:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4cee:	68fb      	ldr	r3, [r7, #12]
    4cf0:	2b00      	cmp	r3, #0
    4cf2:	d101      	bne.n	4cf8 <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    4cf4:	f001 f814 	bl	5d20 <vPortYieldFromISR>
		}
	}
    4cf8:	3718      	adds	r7, #24
    4cfa:	46bd      	mov	sp, r7
    4cfc:	bd80      	pop	{r7, pc}
    4cfe:	bf00      	nop

00004d00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    4d00:	b580      	push	{r7, lr}
    4d02:	b084      	sub	sp, #16
    4d04:	af00      	add	r7, sp, #0
    4d06:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4d08:	2300      	movs	r3, #0
    4d0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    4d0c:	687b      	ldr	r3, [r7, #4]
    4d0e:	2b00      	cmp	r3, #0
    4d10:	d018      	beq.n	4d44 <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    4d12:	f000 fa35 	bl	5180 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    4d16:	f241 43ec 	movw	r3, #5356	; 0x14ec
    4d1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d1e:	681a      	ldr	r2, [r3, #0]
    4d20:	687b      	ldr	r3, [r7, #4]
    4d22:	4413      	add	r3, r2
    4d24:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4d26:	f241 4310 	movw	r3, #5136	; 0x1410
    4d2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d2e:	681b      	ldr	r3, [r3, #0]
    4d30:	3304      	adds	r3, #4
    4d32:	4618      	mov	r0, r3
    4d34:	f7ff fa50 	bl	41d8 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4d38:	68b8      	ldr	r0, [r7, #8]
    4d3a:	f000 fe11 	bl	5960 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    4d3e:	f000 fa31 	bl	51a4 <xTaskResumeAll>
    4d42:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4d44:	68fb      	ldr	r3, [r7, #12]
    4d46:	2b00      	cmp	r3, #0
    4d48:	d101      	bne.n	4d4e <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    4d4a:	f000 ffe9 	bl	5d20 <vPortYieldFromISR>
		}
	}
    4d4e:	3710      	adds	r7, #16
    4d50:	46bd      	mov	sp, r7
    4d52:	bd80      	pop	{r7, pc}

00004d54 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    4d54:	b580      	push	{r7, lr}
    4d56:	b084      	sub	sp, #16
    4d58:	af00      	add	r7, sp, #0
    4d5a:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    4d5c:	f000 ffee 	bl	5d3c <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4d60:	687b      	ldr	r3, [r7, #4]
    4d62:	2b00      	cmp	r3, #0
    4d64:	d105      	bne.n	4d72 <uxTaskPriorityGet+0x1e>
    4d66:	f241 4310 	movw	r3, #5136	; 0x1410
    4d6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d6e:	681b      	ldr	r3, [r3, #0]
    4d70:	e000      	b.n	4d74 <uxTaskPriorityGet+0x20>
    4d72:	687b      	ldr	r3, [r7, #4]
    4d74:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    4d76:	68fb      	ldr	r3, [r7, #12]
    4d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4d7a:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    4d7c:	f000 fff4 	bl	5d68 <vPortExitCritical>

		return uxReturn;
    4d80:	68bb      	ldr	r3, [r7, #8]
	}
    4d82:	4618      	mov	r0, r3
    4d84:	3710      	adds	r7, #16
    4d86:	46bd      	mov	sp, r7
    4d88:	bd80      	pop	{r7, pc}
    4d8a:	bf00      	nop

00004d8c <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    4d8c:	b580      	push	{r7, lr}
    4d8e:	b086      	sub	sp, #24
    4d90:	af00      	add	r7, sp, #0
    4d92:	6078      	str	r0, [r7, #4]
    4d94:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    4d96:	2300      	movs	r3, #0
    4d98:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    4d9a:	683b      	ldr	r3, [r7, #0]
    4d9c:	2b04      	cmp	r3, #4
    4d9e:	d901      	bls.n	4da4 <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    4da0:	2304      	movs	r3, #4
    4da2:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    4da4:	f000 ffca 	bl	5d3c <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    4da8:	f241 4310 	movw	r3, #5136	; 0x1410
    4dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4db0:	681b      	ldr	r3, [r3, #0]
    4db2:	687a      	ldr	r2, [r7, #4]
    4db4:	429a      	cmp	r2, r3
    4db6:	d101      	bne.n	4dbc <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    4db8:	2300      	movs	r3, #0
    4dba:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4dbc:	687b      	ldr	r3, [r7, #4]
    4dbe:	2b00      	cmp	r3, #0
    4dc0:	d105      	bne.n	4dce <vTaskPrioritySet+0x42>
    4dc2:	f241 4310 	movw	r3, #5136	; 0x1410
    4dc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dca:	681b      	ldr	r3, [r3, #0]
    4dcc:	e000      	b.n	4dd0 <vTaskPrioritySet+0x44>
    4dce:	687b      	ldr	r3, [r7, #4]
    4dd0:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    4dd2:	693b      	ldr	r3, [r7, #16]
    4dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    4dd6:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    4dd8:	68fa      	ldr	r2, [r7, #12]
    4dda:	683b      	ldr	r3, [r7, #0]
    4ddc:	429a      	cmp	r2, r3
    4dde:	d058      	beq.n	4e92 <vTaskPrioritySet+0x106>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    4de0:	683a      	ldr	r2, [r7, #0]
    4de2:	68fb      	ldr	r3, [r7, #12]
    4de4:	429a      	cmp	r2, r3
    4de6:	d905      	bls.n	4df4 <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    4de8:	687b      	ldr	r3, [r7, #4]
    4dea:	2b00      	cmp	r3, #0
    4dec:	d007      	beq.n	4dfe <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    4dee:	2301      	movs	r3, #1
    4df0:	617b      	str	r3, [r7, #20]
    4df2:	e004      	b.n	4dfe <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    4df4:	687b      	ldr	r3, [r7, #4]
    4df6:	2b00      	cmp	r3, #0
    4df8:	d101      	bne.n	4dfe <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    4dfa:	2301      	movs	r3, #1
    4dfc:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    4dfe:	693b      	ldr	r3, [r7, #16]
    4e00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    4e02:	693b      	ldr	r3, [r7, #16]
    4e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4e06:	429a      	cmp	r2, r3
    4e08:	d102      	bne.n	4e10 <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    4e0a:	693b      	ldr	r3, [r7, #16]
    4e0c:	683a      	ldr	r2, [r7, #0]
    4e0e:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    4e10:	693b      	ldr	r3, [r7, #16]
    4e12:	683a      	ldr	r2, [r7, #0]
    4e14:	64da      	str	r2, [r3, #76]	; 0x4c
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    4e16:	683b      	ldr	r3, [r7, #0]
    4e18:	f1c3 0205 	rsb	r2, r3, #5
    4e1c:	693b      	ldr	r3, [r7, #16]
    4e1e:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    4e20:	693b      	ldr	r3, [r7, #16]
    4e22:	6959      	ldr	r1, [r3, #20]
    4e24:	68fa      	ldr	r2, [r7, #12]
    4e26:	4613      	mov	r3, r2
    4e28:	009b      	lsls	r3, r3, #2
    4e2a:	4413      	add	r3, r2
    4e2c:	009b      	lsls	r3, r3, #2
    4e2e:	f241 4214 	movw	r2, #5140	; 0x1414
    4e32:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4e36:	4413      	add	r3, r2
    4e38:	4299      	cmp	r1, r3
    4e3a:	d125      	bne.n	4e88 <vTaskPrioritySet+0xfc>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    4e3c:	693b      	ldr	r3, [r7, #16]
    4e3e:	3304      	adds	r3, #4
    4e40:	4618      	mov	r0, r3
    4e42:	f7ff f9c9 	bl	41d8 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4e46:	693b      	ldr	r3, [r7, #16]
    4e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e4a:	f241 43f4 	movw	r3, #5364	; 0x14f4
    4e4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e52:	681b      	ldr	r3, [r3, #0]
    4e54:	429a      	cmp	r2, r3
    4e56:	d906      	bls.n	4e66 <vTaskPrioritySet+0xda>
    4e58:	693b      	ldr	r3, [r7, #16]
    4e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e5c:	f241 43f4 	movw	r3, #5364	; 0x14f4
    4e60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e64:	601a      	str	r2, [r3, #0]
    4e66:	693b      	ldr	r3, [r7, #16]
    4e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e6a:	4613      	mov	r3, r2
    4e6c:	009b      	lsls	r3, r3, #2
    4e6e:	4413      	add	r3, r2
    4e70:	009b      	lsls	r3, r3, #2
    4e72:	f241 4214 	movw	r2, #5140	; 0x1414
    4e76:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4e7a:	441a      	add	r2, r3
    4e7c:	693b      	ldr	r3, [r7, #16]
    4e7e:	3304      	adds	r3, #4
    4e80:	4610      	mov	r0, r2
    4e82:	4619      	mov	r1, r3
    4e84:	f7ff f948 	bl	4118 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    4e88:	697b      	ldr	r3, [r7, #20]
    4e8a:	2b01      	cmp	r3, #1
    4e8c:	d101      	bne.n	4e92 <vTaskPrioritySet+0x106>
				{
					portYIELD_WITHIN_API();
    4e8e:	f000 ff47 	bl	5d20 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    4e92:	f000 ff69 	bl	5d68 <vPortExitCritical>
	}
    4e96:	3718      	adds	r7, #24
    4e98:	46bd      	mov	sp, r7
    4e9a:	bd80      	pop	{r7, pc}

00004e9c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    4e9c:	b580      	push	{r7, lr}
    4e9e:	b084      	sub	sp, #16
    4ea0:	af00      	add	r7, sp, #0
    4ea2:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4ea4:	f000 ff4a 	bl	5d3c <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    4ea8:	f241 4310 	movw	r3, #5136	; 0x1410
    4eac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eb0:	681b      	ldr	r3, [r3, #0]
    4eb2:	687a      	ldr	r2, [r7, #4]
    4eb4:	429a      	cmp	r2, r3
    4eb6:	d101      	bne.n	4ebc <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    4eb8:	2300      	movs	r3, #0
    4eba:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    4ebc:	687b      	ldr	r3, [r7, #4]
    4ebe:	2b00      	cmp	r3, #0
    4ec0:	d105      	bne.n	4ece <vTaskSuspend+0x32>
    4ec2:	f241 4310 	movw	r3, #5136	; 0x1410
    4ec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eca:	681b      	ldr	r3, [r3, #0]
    4ecc:	e000      	b.n	4ed0 <vTaskSuspend+0x34>
    4ece:	687b      	ldr	r3, [r7, #4]
    4ed0:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4ed2:	68fb      	ldr	r3, [r7, #12]
    4ed4:	3304      	adds	r3, #4
    4ed6:	4618      	mov	r0, r3
    4ed8:	f7ff f97e 	bl	41d8 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4edc:	68fb      	ldr	r3, [r7, #12]
    4ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4ee0:	2b00      	cmp	r3, #0
    4ee2:	d004      	beq.n	4eee <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4ee4:	68fb      	ldr	r3, [r7, #12]
    4ee6:	3318      	adds	r3, #24
    4ee8:	4618      	mov	r0, r3
    4eea:	f7ff f975 	bl	41d8 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    4eee:	68fb      	ldr	r3, [r7, #12]
    4ef0:	3304      	adds	r3, #4
    4ef2:	f241 40d4 	movw	r0, #5332	; 0x14d4
    4ef6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4efa:	4619      	mov	r1, r3
    4efc:	f7ff f90c 	bl	4118 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    4f00:	f000 ff32 	bl	5d68 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    4f04:	687b      	ldr	r3, [r7, #4]
    4f06:	2b00      	cmp	r3, #0
    4f08:	d11e      	bne.n	4f48 <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    4f0a:	f241 43f8 	movw	r3, #5368	; 0x14f8
    4f0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f12:	681b      	ldr	r3, [r3, #0]
    4f14:	2b00      	cmp	r3, #0
    4f16:	d002      	beq.n	4f1e <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    4f18:	f000 ff02 	bl	5d20 <vPortYieldFromISR>
    4f1c:	e014      	b.n	4f48 <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    4f1e:	f241 43d4 	movw	r3, #5332	; 0x14d4
    4f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f26:	681a      	ldr	r2, [r3, #0]
    4f28:	f241 43e8 	movw	r3, #5352	; 0x14e8
    4f2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f30:	681b      	ldr	r3, [r3, #0]
    4f32:	429a      	cmp	r2, r3
    4f34:	d106      	bne.n	4f44 <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    4f36:	f241 4310 	movw	r3, #5136	; 0x1410
    4f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f3e:	2200      	movs	r2, #0
    4f40:	601a      	str	r2, [r3, #0]
    4f42:	e001      	b.n	4f48 <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    4f44:	f000 fadc 	bl	5500 <vTaskSwitchContext>
				}
			}
		}
	}
    4f48:	3710      	adds	r7, #16
    4f4a:	46bd      	mov	sp, r7
    4f4c:	bd80      	pop	{r7, pc}
    4f4e:	bf00      	nop

00004f50 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    4f50:	b480      	push	{r7}
    4f52:	b085      	sub	sp, #20
    4f54:	af00      	add	r7, sp, #0
    4f56:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    4f58:	2300      	movs	r3, #0
    4f5a:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    4f5c:	687b      	ldr	r3, [r7, #4]
    4f5e:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    4f60:	68bb      	ldr	r3, [r7, #8]
    4f62:	695a      	ldr	r2, [r3, #20]
    4f64:	f241 43d4 	movw	r3, #5332	; 0x14d4
    4f68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f6c:	429a      	cmp	r2, r3
    4f6e:	d10d      	bne.n	4f8c <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    4f70:	68bb      	ldr	r3, [r7, #8]
    4f72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4f74:	f241 43a8 	movw	r3, #5288	; 0x14a8
    4f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f7c:	429a      	cmp	r2, r3
    4f7e:	d005      	beq.n	4f8c <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    4f80:	68bb      	ldr	r3, [r7, #8]
    4f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4f84:	2b00      	cmp	r3, #0
    4f86:	d101      	bne.n	4f8c <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    4f88:	2301      	movs	r3, #1
    4f8a:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    4f8c:	68fb      	ldr	r3, [r7, #12]
	}
    4f8e:	4618      	mov	r0, r3
    4f90:	3714      	adds	r7, #20
    4f92:	46bd      	mov	sp, r7
    4f94:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f98:	4770      	bx	lr
    4f9a:	bf00      	nop

00004f9c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    4f9c:	b580      	push	{r7, lr}
    4f9e:	b084      	sub	sp, #16
    4fa0:	af00      	add	r7, sp, #0
    4fa2:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    4fa4:	687b      	ldr	r3, [r7, #4]
    4fa6:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    4fa8:	68fb      	ldr	r3, [r7, #12]
    4faa:	2b00      	cmp	r3, #0
    4fac:	d043      	beq.n	5036 <vTaskResume+0x9a>
    4fae:	f241 4310 	movw	r3, #5136	; 0x1410
    4fb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fb6:	681b      	ldr	r3, [r3, #0]
    4fb8:	68fa      	ldr	r2, [r7, #12]
    4fba:	429a      	cmp	r2, r3
    4fbc:	d03b      	beq.n	5036 <vTaskResume+0x9a>
		{
			taskENTER_CRITICAL();
    4fbe:	f000 febd 	bl	5d3c <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    4fc2:	68f8      	ldr	r0, [r7, #12]
    4fc4:	f7ff ffc4 	bl	4f50 <xTaskIsTaskSuspended>
    4fc8:	4603      	mov	r3, r0
    4fca:	2b01      	cmp	r3, #1
    4fcc:	d131      	bne.n	5032 <vTaskResume+0x96>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    4fce:	68fb      	ldr	r3, [r7, #12]
    4fd0:	3304      	adds	r3, #4
    4fd2:	4618      	mov	r0, r3
    4fd4:	f7ff f900 	bl	41d8 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4fd8:	68fb      	ldr	r3, [r7, #12]
    4fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4fdc:	f241 43f4 	movw	r3, #5364	; 0x14f4
    4fe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fe4:	681b      	ldr	r3, [r3, #0]
    4fe6:	429a      	cmp	r2, r3
    4fe8:	d906      	bls.n	4ff8 <vTaskResume+0x5c>
    4fea:	68fb      	ldr	r3, [r7, #12]
    4fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4fee:	f241 43f4 	movw	r3, #5364	; 0x14f4
    4ff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ff6:	601a      	str	r2, [r3, #0]
    4ff8:	68fb      	ldr	r3, [r7, #12]
    4ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ffc:	4613      	mov	r3, r2
    4ffe:	009b      	lsls	r3, r3, #2
    5000:	4413      	add	r3, r2
    5002:	009b      	lsls	r3, r3, #2
    5004:	f241 4214 	movw	r2, #5140	; 0x1414
    5008:	f2c2 0200 	movt	r2, #8192	; 0x2000
    500c:	441a      	add	r2, r3
    500e:	68fb      	ldr	r3, [r7, #12]
    5010:	3304      	adds	r3, #4
    5012:	4610      	mov	r0, r2
    5014:	4619      	mov	r1, r3
    5016:	f7ff f87f 	bl	4118 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    501a:	68fb      	ldr	r3, [r7, #12]
    501c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    501e:	f241 4310 	movw	r3, #5136	; 0x1410
    5022:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5026:	681b      	ldr	r3, [r3, #0]
    5028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    502a:	429a      	cmp	r2, r3
    502c:	d301      	bcc.n	5032 <vTaskResume+0x96>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    502e:	f000 fe77 	bl	5d20 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    5032:	f000 fe99 	bl	5d68 <vPortExitCritical>
		}
	}
    5036:	3710      	adds	r7, #16
    5038:	46bd      	mov	sp, r7
    503a:	bd80      	pop	{r7, pc}

0000503c <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    503c:	b580      	push	{r7, lr}
    503e:	b086      	sub	sp, #24
    5040:	af00      	add	r7, sp, #0
    5042:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    5044:	2300      	movs	r3, #0
    5046:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    5048:	687b      	ldr	r3, [r7, #4]
    504a:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    504c:	2300      	movs	r3, #0
    504e:	60fb      	str	r3, [r7, #12]
    5050:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5054:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    5058:	6938      	ldr	r0, [r7, #16]
    505a:	f7ff ff79 	bl	4f50 <xTaskIsTaskSuspended>
    505e:	4603      	mov	r3, r0
    5060:	2b01      	cmp	r3, #1
    5062:	d144      	bne.n	50ee <xTaskResumeFromISR+0xb2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    5064:	f241 43fc 	movw	r3, #5372	; 0x14fc
    5068:	f2c2 0300 	movt	r3, #8192	; 0x2000
    506c:	681b      	ldr	r3, [r3, #0]
    506e:	2b00      	cmp	r3, #0
    5070:	d134      	bne.n	50dc <xTaskResumeFromISR+0xa0>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    5072:	693b      	ldr	r3, [r7, #16]
    5074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5076:	f241 4310 	movw	r3, #5136	; 0x1410
    507a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    507e:	681b      	ldr	r3, [r3, #0]
    5080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5082:	429a      	cmp	r2, r3
    5084:	bf34      	ite	cc
    5086:	2300      	movcc	r3, #0
    5088:	2301      	movcs	r3, #1
    508a:	b2db      	uxtb	r3, r3
    508c:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    508e:	693b      	ldr	r3, [r7, #16]
    5090:	3304      	adds	r3, #4
    5092:	4618      	mov	r0, r3
    5094:	f7ff f8a0 	bl	41d8 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    5098:	693b      	ldr	r3, [r7, #16]
    509a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    509c:	f241 43f4 	movw	r3, #5364	; 0x14f4
    50a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50a4:	681b      	ldr	r3, [r3, #0]
    50a6:	429a      	cmp	r2, r3
    50a8:	d906      	bls.n	50b8 <xTaskResumeFromISR+0x7c>
    50aa:	693b      	ldr	r3, [r7, #16]
    50ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    50ae:	f241 43f4 	movw	r3, #5364	; 0x14f4
    50b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50b6:	601a      	str	r2, [r3, #0]
    50b8:	693b      	ldr	r3, [r7, #16]
    50ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    50bc:	4613      	mov	r3, r2
    50be:	009b      	lsls	r3, r3, #2
    50c0:	4413      	add	r3, r2
    50c2:	009b      	lsls	r3, r3, #2
    50c4:	f241 4214 	movw	r2, #5140	; 0x1414
    50c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    50cc:	441a      	add	r2, r3
    50ce:	693b      	ldr	r3, [r7, #16]
    50d0:	3304      	adds	r3, #4
    50d2:	4610      	mov	r0, r2
    50d4:	4619      	mov	r1, r3
    50d6:	f7ff f81f 	bl	4118 <vListInsertEnd>
    50da:	e008      	b.n	50ee <xTaskResumeFromISR+0xb2>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    50dc:	693b      	ldr	r3, [r7, #16]
    50de:	3318      	adds	r3, #24
    50e0:	f241 40a8 	movw	r0, #5288	; 0x14a8
    50e4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    50e8:	4619      	mov	r1, r3
    50ea:	f7ff f815 	bl	4118 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    50ee:	f04f 0000 	mov.w	r0, #0
    50f2:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    50f6:	697b      	ldr	r3, [r7, #20]
	}
    50f8:	4618      	mov	r0, r3
    50fa:	3718      	adds	r7, #24
    50fc:	46bd      	mov	sp, r7
    50fe:	bd80      	pop	{r7, pc}

00005100 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    5100:	b580      	push	{r7, lr}
    5102:	b086      	sub	sp, #24
    5104:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    5106:	2300      	movs	r3, #0
    5108:	9300      	str	r3, [sp, #0]
    510a:	2300      	movs	r3, #0
    510c:	9301      	str	r3, [sp, #4]
    510e:	2300      	movs	r3, #0
    5110:	9302      	str	r3, [sp, #8]
    5112:	2300      	movs	r3, #0
    5114:	9303      	str	r3, [sp, #12]
    5116:	f245 70b9 	movw	r0, #22457	; 0x57b9
    511a:	f2c0 0000 	movt	r0, #0
    511e:	f648 218c 	movw	r1, #35468	; 0x8a8c
    5122:	f2c0 0101 	movt	r1, #1
    5126:	2280      	movs	r2, #128	; 0x80
    5128:	2300      	movs	r3, #0
    512a:	f7ff fc6b 	bl	4a04 <xTaskGenericCreate>
    512e:	6078      	str	r0, [r7, #4]
            
		}
	}
	#endif

	if( xReturn == pdPASS )
    5130:	687b      	ldr	r3, [r7, #4]
    5132:	2b01      	cmp	r3, #1
    5134:	d111      	bne.n	515a <vTaskStartScheduler+0x5a>
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */

		portDISABLE_INTERRUPTS();
    5136:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    513a:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    513e:	f241 43f8 	movw	r3, #5368	; 0x14f8
    5142:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5146:	2201      	movs	r2, #1
    5148:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    514a:	f241 43ec 	movw	r3, #5356	; 0x14ec
    514e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5152:	2200      	movs	r2, #0
    5154:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    5156:	f000 fdb5 	bl	5cc4 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    515a:	3708      	adds	r7, #8
    515c:	46bd      	mov	sp, r7
    515e:	bd80      	pop	{r7, pc}

00005160 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    5160:	b580      	push	{r7, lr}
    5162:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    5164:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5168:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    516c:	f241 43f8 	movw	r3, #5368	; 0x14f8
    5170:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5174:	2200      	movs	r2, #0
    5176:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    5178:	f000 fdcc 	bl	5d14 <vPortEndScheduler>
}
    517c:	bd80      	pop	{r7, pc}
    517e:	bf00      	nop

00005180 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    5180:	b480      	push	{r7}
    5182:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    5184:	f241 43fc 	movw	r3, #5372	; 0x14fc
    5188:	f2c2 0300 	movt	r3, #8192	; 0x2000
    518c:	681b      	ldr	r3, [r3, #0]
    518e:	1c5a      	adds	r2, r3, #1
    5190:	f241 43fc 	movw	r3, #5372	; 0x14fc
    5194:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5198:	601a      	str	r2, [r3, #0]
}
    519a:	46bd      	mov	sp, r7
    519c:	f85d 7b04 	ldr.w	r7, [sp], #4
    51a0:	4770      	bx	lr
    51a2:	bf00      	nop

000051a4 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    51a4:	b590      	push	{r4, r7, lr}
    51a6:	b083      	sub	sp, #12
    51a8:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    51aa:	2300      	movs	r3, #0
    51ac:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    51ae:	f000 fdc5 	bl	5d3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    51b2:	f241 43fc 	movw	r3, #5372	; 0x14fc
    51b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51ba:	681b      	ldr	r3, [r3, #0]
    51bc:	1e5a      	subs	r2, r3, #1
    51be:	f241 43fc 	movw	r3, #5372	; 0x14fc
    51c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51c6:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    51c8:	f241 43fc 	movw	r3, #5372	; 0x14fc
    51cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51d0:	681b      	ldr	r3, [r3, #0]
    51d2:	2b00      	cmp	r3, #0
    51d4:	d177      	bne.n	52c6 <xTaskResumeAll+0x122>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    51d6:	f241 43e8 	movw	r3, #5352	; 0x14e8
    51da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51de:	681b      	ldr	r3, [r3, #0]
    51e0:	2b00      	cmp	r3, #0
    51e2:	d070      	beq.n	52c6 <xTaskResumeAll+0x122>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    51e4:	2300      	movs	r3, #0
    51e6:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    51e8:	e036      	b.n	5258 <xTaskResumeAll+0xb4>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    51ea:	f241 43a8 	movw	r3, #5288	; 0x14a8
    51ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51f2:	68db      	ldr	r3, [r3, #12]
    51f4:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    51f6:	f104 0318 	add.w	r3, r4, #24
    51fa:	4618      	mov	r0, r3
    51fc:	f7fe ffec 	bl	41d8 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    5200:	1d23      	adds	r3, r4, #4
    5202:	4618      	mov	r0, r3
    5204:	f7fe ffe8 	bl	41d8 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    5208:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    520a:	f241 43f4 	movw	r3, #5364	; 0x14f4
    520e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5212:	681b      	ldr	r3, [r3, #0]
    5214:	429a      	cmp	r2, r3
    5216:	d905      	bls.n	5224 <xTaskResumeAll+0x80>
    5218:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    521a:	f241 43f4 	movw	r3, #5364	; 0x14f4
    521e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5222:	601a      	str	r2, [r3, #0]
    5224:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5226:	4613      	mov	r3, r2
    5228:	009b      	lsls	r3, r3, #2
    522a:	4413      	add	r3, r2
    522c:	009b      	lsls	r3, r3, #2
    522e:	f241 4214 	movw	r2, #5140	; 0x1414
    5232:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5236:	441a      	add	r2, r3
    5238:	1d23      	adds	r3, r4, #4
    523a:	4610      	mov	r0, r2
    523c:	4619      	mov	r1, r3
    523e:	f7fe ff6b 	bl	4118 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    5242:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5244:	f241 4310 	movw	r3, #5136	; 0x1410
    5248:	f2c2 0300 	movt	r3, #8192	; 0x2000
    524c:	681b      	ldr	r3, [r3, #0]
    524e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5250:	429a      	cmp	r2, r3
    5252:	d301      	bcc.n	5258 <xTaskResumeAll+0xb4>
					{
						xYieldRequired = pdTRUE;
    5254:	2301      	movs	r3, #1
    5256:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    5258:	f241 43a8 	movw	r3, #5288	; 0x14a8
    525c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5260:	681b      	ldr	r3, [r3, #0]
    5262:	2b00      	cmp	r3, #0
    5264:	d1c1      	bne.n	51ea <xTaskResumeAll+0x46>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    5266:	f241 5300 	movw	r3, #5376	; 0x1500
    526a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    526e:	681b      	ldr	r3, [r3, #0]
    5270:	2b00      	cmp	r3, #0
    5272:	d014      	beq.n	529e <xTaskResumeAll+0xfa>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    5274:	e00c      	b.n	5290 <xTaskResumeAll+0xec>
					{
						vTaskIncrementTick();
    5276:	f000 f865 	bl	5344 <vTaskIncrementTick>
						--uxMissedTicks;
    527a:	f241 5300 	movw	r3, #5376	; 0x1500
    527e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5282:	681b      	ldr	r3, [r3, #0]
    5284:	1e5a      	subs	r2, r3, #1
    5286:	f241 5300 	movw	r3, #5376	; 0x1500
    528a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    528e:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    5290:	f241 5300 	movw	r3, #5376	; 0x1500
    5294:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5298:	681b      	ldr	r3, [r3, #0]
    529a:	2b00      	cmp	r3, #0
    529c:	d1eb      	bne.n	5276 <xTaskResumeAll+0xd2>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    529e:	683b      	ldr	r3, [r7, #0]
    52a0:	2b01      	cmp	r3, #1
    52a2:	d006      	beq.n	52b2 <xTaskResumeAll+0x10e>
    52a4:	f241 5304 	movw	r3, #5380	; 0x1504
    52a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52ac:	681b      	ldr	r3, [r3, #0]
    52ae:	2b01      	cmp	r3, #1
    52b0:	d109      	bne.n	52c6 <xTaskResumeAll+0x122>
				{
					xAlreadyYielded = pdTRUE;
    52b2:	2301      	movs	r3, #1
    52b4:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    52b6:	f241 5304 	movw	r3, #5380	; 0x1504
    52ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52be:	2200      	movs	r2, #0
    52c0:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    52c2:	f000 fd2d 	bl	5d20 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    52c6:	f000 fd4f 	bl	5d68 <vPortExitCritical>

	return xAlreadyYielded;
    52ca:	687b      	ldr	r3, [r7, #4]
}
    52cc:	4618      	mov	r0, r3
    52ce:	370c      	adds	r7, #12
    52d0:	46bd      	mov	sp, r7
    52d2:	bd90      	pop	{r4, r7, pc}

000052d4 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    52d4:	b580      	push	{r7, lr}
    52d6:	b082      	sub	sp, #8
    52d8:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    52da:	f000 fd2f 	bl	5d3c <vPortEnterCritical>
	{
		xTicks = xTickCount;
    52de:	f241 43ec 	movw	r3, #5356	; 0x14ec
    52e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52e6:	681b      	ldr	r3, [r3, #0]
    52e8:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    52ea:	f000 fd3d 	bl	5d68 <vPortExitCritical>

	return xTicks;
    52ee:	687b      	ldr	r3, [r7, #4]
}
    52f0:	4618      	mov	r0, r3
    52f2:	3708      	adds	r7, #8
    52f4:	46bd      	mov	sp, r7
    52f6:	bd80      	pop	{r7, pc}

000052f8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    52f8:	b480      	push	{r7}
    52fa:	b083      	sub	sp, #12
    52fc:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    52fe:	2300      	movs	r3, #0
    5300:	607b      	str	r3, [r7, #4]
    5302:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5306:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    530a:	f241 43ec 	movw	r3, #5356	; 0x14ec
    530e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5312:	681b      	ldr	r3, [r3, #0]
    5314:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    5316:	f04f 0000 	mov.w	r0, #0
    531a:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    531e:	683b      	ldr	r3, [r7, #0]
}
    5320:	4618      	mov	r0, r3
    5322:	370c      	adds	r7, #12
    5324:	46bd      	mov	sp, r7
    5326:	f85d 7b04 	ldr.w	r7, [sp], #4
    532a:	4770      	bx	lr

0000532c <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    532c:	b480      	push	{r7}
    532e:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    5330:	f241 43e8 	movw	r3, #5352	; 0x14e8
    5334:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5338:	681b      	ldr	r3, [r3, #0]
}
    533a:	4618      	mov	r0, r3
    533c:	46bd      	mov	sp, r7
    533e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5342:	4770      	bx	lr

00005344 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    5344:	b580      	push	{r7, lr}
    5346:	b084      	sub	sp, #16
    5348:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    534a:	f241 43fc 	movw	r3, #5372	; 0x14fc
    534e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5352:	681b      	ldr	r3, [r3, #0]
    5354:	2b00      	cmp	r3, #0
    5356:	f040 80b9 	bne.w	54cc <vTaskIncrementTick+0x188>
	{
		++xTickCount;
    535a:	f241 43ec 	movw	r3, #5356	; 0x14ec
    535e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5362:	681b      	ldr	r3, [r3, #0]
    5364:	1c5a      	adds	r2, r3, #1
    5366:	f241 43ec 	movw	r3, #5356	; 0x14ec
    536a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    536e:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    5370:	f241 43ec 	movw	r3, #5356	; 0x14ec
    5374:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5378:	681b      	ldr	r3, [r3, #0]
    537a:	2b00      	cmp	r3, #0
    537c:	d13f      	bne.n	53fe <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    537e:	f241 43a0 	movw	r3, #5280	; 0x14a0
    5382:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5386:	681b      	ldr	r3, [r3, #0]
    5388:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    538a:	f241 43a4 	movw	r3, #5284	; 0x14a4
    538e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5392:	681a      	ldr	r2, [r3, #0]
    5394:	f241 43a0 	movw	r3, #5280	; 0x14a0
    5398:	f2c2 0300 	movt	r3, #8192	; 0x2000
    539c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    539e:	f241 43a4 	movw	r3, #5284	; 0x14a4
    53a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53a6:	68fa      	ldr	r2, [r7, #12]
    53a8:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    53aa:	f241 5308 	movw	r3, #5384	; 0x1508
    53ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53b2:	681b      	ldr	r3, [r3, #0]
    53b4:	1c5a      	adds	r2, r3, #1
    53b6:	f241 5308 	movw	r3, #5384	; 0x1508
    53ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53be:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    53c0:	f241 43a0 	movw	r3, #5280	; 0x14a0
    53c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53c8:	681b      	ldr	r3, [r3, #0]
    53ca:	681b      	ldr	r3, [r3, #0]
    53cc:	2b00      	cmp	r3, #0
    53ce:	d107      	bne.n	53e0 <vTaskIncrementTick+0x9c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    53d0:	f240 5330 	movw	r3, #1328	; 0x530
    53d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53d8:	f04f 32ff 	mov.w	r2, #4294967295
    53dc:	601a      	str	r2, [r3, #0]
    53de:	e00e      	b.n	53fe <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    53e0:	f241 43a0 	movw	r3, #5280	; 0x14a0
    53e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53e8:	681b      	ldr	r3, [r3, #0]
    53ea:	68db      	ldr	r3, [r3, #12]
    53ec:	68db      	ldr	r3, [r3, #12]
    53ee:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    53f0:	68bb      	ldr	r3, [r7, #8]
    53f2:	685a      	ldr	r2, [r3, #4]
    53f4:	f240 5330 	movw	r3, #1328	; 0x530
    53f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53fc:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    53fe:	f241 43ec 	movw	r3, #5356	; 0x14ec
    5402:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5406:	681a      	ldr	r2, [r3, #0]
    5408:	f240 5330 	movw	r3, #1328	; 0x530
    540c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5410:	681b      	ldr	r3, [r3, #0]
    5412:	429a      	cmp	r2, r3
    5414:	d359      	bcc.n	54ca <vTaskIncrementTick+0x186>
    5416:	f241 43a0 	movw	r3, #5280	; 0x14a0
    541a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    541e:	681b      	ldr	r3, [r3, #0]
    5420:	681b      	ldr	r3, [r3, #0]
    5422:	2b00      	cmp	r3, #0
    5424:	d107      	bne.n	5436 <vTaskIncrementTick+0xf2>
    5426:	f240 5330 	movw	r3, #1328	; 0x530
    542a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    542e:	f04f 32ff 	mov.w	r2, #4294967295
    5432:	601a      	str	r2, [r3, #0]
    5434:	e049      	b.n	54ca <vTaskIncrementTick+0x186>
    5436:	f241 43a0 	movw	r3, #5280	; 0x14a0
    543a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    543e:	681b      	ldr	r3, [r3, #0]
    5440:	68db      	ldr	r3, [r3, #12]
    5442:	68db      	ldr	r3, [r3, #12]
    5444:	60bb      	str	r3, [r7, #8]
    5446:	68bb      	ldr	r3, [r7, #8]
    5448:	685b      	ldr	r3, [r3, #4]
    544a:	607b      	str	r3, [r7, #4]
    544c:	f241 43ec 	movw	r3, #5356	; 0x14ec
    5450:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5454:	681a      	ldr	r2, [r3, #0]
    5456:	687b      	ldr	r3, [r7, #4]
    5458:	429a      	cmp	r2, r3
    545a:	d206      	bcs.n	546a <vTaskIncrementTick+0x126>
    545c:	f240 5330 	movw	r3, #1328	; 0x530
    5460:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5464:	687a      	ldr	r2, [r7, #4]
    5466:	601a      	str	r2, [r3, #0]
    5468:	e02f      	b.n	54ca <vTaskIncrementTick+0x186>
    546a:	68bb      	ldr	r3, [r7, #8]
    546c:	3304      	adds	r3, #4
    546e:	4618      	mov	r0, r3
    5470:	f7fe feb2 	bl	41d8 <vListRemove>
    5474:	68bb      	ldr	r3, [r7, #8]
    5476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5478:	2b00      	cmp	r3, #0
    547a:	d004      	beq.n	5486 <vTaskIncrementTick+0x142>
    547c:	68bb      	ldr	r3, [r7, #8]
    547e:	3318      	adds	r3, #24
    5480:	4618      	mov	r0, r3
    5482:	f7fe fea9 	bl	41d8 <vListRemove>
    5486:	68bb      	ldr	r3, [r7, #8]
    5488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    548a:	f241 43f4 	movw	r3, #5364	; 0x14f4
    548e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5492:	681b      	ldr	r3, [r3, #0]
    5494:	429a      	cmp	r2, r3
    5496:	d906      	bls.n	54a6 <vTaskIncrementTick+0x162>
    5498:	68bb      	ldr	r3, [r7, #8]
    549a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    549c:	f241 43f4 	movw	r3, #5364	; 0x14f4
    54a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54a4:	601a      	str	r2, [r3, #0]
    54a6:	68bb      	ldr	r3, [r7, #8]
    54a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    54aa:	4613      	mov	r3, r2
    54ac:	009b      	lsls	r3, r3, #2
    54ae:	4413      	add	r3, r2
    54b0:	009b      	lsls	r3, r3, #2
    54b2:	f241 4214 	movw	r2, #5140	; 0x1414
    54b6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    54ba:	441a      	add	r2, r3
    54bc:	68bb      	ldr	r3, [r7, #8]
    54be:	3304      	adds	r3, #4
    54c0:	4610      	mov	r0, r2
    54c2:	4619      	mov	r1, r3
    54c4:	f7fe fe28 	bl	4118 <vListInsertEnd>
    54c8:	e7a5      	b.n	5416 <vTaskIncrementTick+0xd2>
    54ca:	e00c      	b.n	54e6 <vTaskIncrementTick+0x1a2>
	}
	else
	{
		++uxMissedTicks;
    54cc:	f241 5300 	movw	r3, #5376	; 0x1500
    54d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54d4:	681b      	ldr	r3, [r3, #0]
    54d6:	1c5a      	adds	r2, r3, #1
    54d8:	f241 5300 	movw	r3, #5376	; 0x1500
    54dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54e0:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    54e2:	f012 f9d9 	bl	17898 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    54e6:	f241 5300 	movw	r3, #5376	; 0x1500
    54ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54ee:	681b      	ldr	r3, [r3, #0]
    54f0:	2b00      	cmp	r3, #0
    54f2:	d101      	bne.n	54f8 <vTaskIncrementTick+0x1b4>
		{
			vApplicationTickHook();
    54f4:	f012 f9d0 	bl	17898 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    54f8:	3710      	adds	r7, #16
    54fa:	46bd      	mov	sp, r7
    54fc:	bd80      	pop	{r7, pc}
    54fe:	bf00      	nop

00005500 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    5500:	b580      	push	{r7, lr}
    5502:	b082      	sub	sp, #8
    5504:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    5506:	f241 43fc 	movw	r3, #5372	; 0x14fc
    550a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    550e:	681b      	ldr	r3, [r3, #0]
    5510:	2b00      	cmp	r3, #0
    5512:	d006      	beq.n	5522 <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    5514:	f241 5304 	movw	r3, #5380	; 0x1504
    5518:	f2c2 0300 	movt	r3, #8192	; 0x2000
    551c:	2201      	movs	r2, #1
    551e:	601a      	str	r2, [r3, #0]
    5520:	e047      	b.n	55b2 <vTaskSwitchContext+0xb2>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    5522:	f012 f9b3 	bl	1788c <myTraceSwitchedOut>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    5526:	e00a      	b.n	553e <vTaskSwitchContext+0x3e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    5528:	f241 43f4 	movw	r3, #5364	; 0x14f4
    552c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5530:	681b      	ldr	r3, [r3, #0]
    5532:	1e5a      	subs	r2, r3, #1
    5534:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5538:	f2c2 0300 	movt	r3, #8192	; 0x2000
    553c:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    553e:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5542:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5546:	6819      	ldr	r1, [r3, #0]
    5548:	f241 4214 	movw	r2, #5140	; 0x1414
    554c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5550:	460b      	mov	r3, r1
    5552:	009b      	lsls	r3, r3, #2
    5554:	440b      	add	r3, r1
    5556:	009b      	lsls	r3, r3, #2
    5558:	4413      	add	r3, r2
    555a:	681b      	ldr	r3, [r3, #0]
    555c:	2b00      	cmp	r3, #0
    555e:	d0e3      	beq.n	5528 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    5560:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5564:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5568:	681a      	ldr	r2, [r3, #0]
    556a:	4613      	mov	r3, r2
    556c:	009b      	lsls	r3, r3, #2
    556e:	4413      	add	r3, r2
    5570:	009b      	lsls	r3, r3, #2
    5572:	f241 4214 	movw	r2, #5140	; 0x1414
    5576:	f2c2 0200 	movt	r2, #8192	; 0x2000
    557a:	4413      	add	r3, r2
    557c:	607b      	str	r3, [r7, #4]
    557e:	687b      	ldr	r3, [r7, #4]
    5580:	685b      	ldr	r3, [r3, #4]
    5582:	685a      	ldr	r2, [r3, #4]
    5584:	687b      	ldr	r3, [r7, #4]
    5586:	605a      	str	r2, [r3, #4]
    5588:	687b      	ldr	r3, [r7, #4]
    558a:	685a      	ldr	r2, [r3, #4]
    558c:	687b      	ldr	r3, [r7, #4]
    558e:	3308      	adds	r3, #8
    5590:	429a      	cmp	r2, r3
    5592:	d104      	bne.n	559e <vTaskSwitchContext+0x9e>
    5594:	687b      	ldr	r3, [r7, #4]
    5596:	685b      	ldr	r3, [r3, #4]
    5598:	685a      	ldr	r2, [r3, #4]
    559a:	687b      	ldr	r3, [r7, #4]
    559c:	605a      	str	r2, [r3, #4]
    559e:	687b      	ldr	r3, [r7, #4]
    55a0:	685b      	ldr	r3, [r3, #4]
    55a2:	68da      	ldr	r2, [r3, #12]
    55a4:	f241 4310 	movw	r3, #5136	; 0x1410
    55a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55ac:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
    55ae:	f012 f967 	bl	17880 <myTraceSwitchedIn>
	}
}
    55b2:	3708      	adds	r7, #8
    55b4:	46bd      	mov	sp, r7
    55b6:	bd80      	pop	{r7, pc}

000055b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    55b8:	b580      	push	{r7, lr}
    55ba:	b084      	sub	sp, #16
    55bc:	af00      	add	r7, sp, #0
    55be:	6078      	str	r0, [r7, #4]
    55c0:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    55c2:	f241 4310 	movw	r3, #5136	; 0x1410
    55c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55ca:	681b      	ldr	r3, [r3, #0]
    55cc:	3318      	adds	r3, #24
    55ce:	6878      	ldr	r0, [r7, #4]
    55d0:	4619      	mov	r1, r3
    55d2:	f7fe fdc9 	bl	4168 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    55d6:	f241 4310 	movw	r3, #5136	; 0x1410
    55da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55de:	681b      	ldr	r3, [r3, #0]
    55e0:	3304      	adds	r3, #4
    55e2:	4618      	mov	r0, r3
    55e4:	f7fe fdf8 	bl	41d8 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    55e8:	683b      	ldr	r3, [r7, #0]
    55ea:	f1b3 3fff 	cmp.w	r3, #4294967295
    55ee:	d10d      	bne.n	560c <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    55f0:	f241 4310 	movw	r3, #5136	; 0x1410
    55f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55f8:	681b      	ldr	r3, [r3, #0]
    55fa:	3304      	adds	r3, #4
    55fc:	f241 40d4 	movw	r0, #5332	; 0x14d4
    5600:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5604:	4619      	mov	r1, r3
    5606:	f7fe fd87 	bl	4118 <vListInsertEnd>
    560a:	e00a      	b.n	5622 <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    560c:	f241 43ec 	movw	r3, #5356	; 0x14ec
    5610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5614:	681a      	ldr	r2, [r3, #0]
    5616:	683b      	ldr	r3, [r7, #0]
    5618:	4413      	add	r3, r2
    561a:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    561c:	68f8      	ldr	r0, [r7, #12]
    561e:	f000 f99f 	bl	5960 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    5622:	3710      	adds	r7, #16
    5624:	46bd      	mov	sp, r7
    5626:	bd80      	pop	{r7, pc}

00005628 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    5628:	b580      	push	{r7, lr}
    562a:	b084      	sub	sp, #16
    562c:	af00      	add	r7, sp, #0
    562e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    5630:	687b      	ldr	r3, [r7, #4]
    5632:	68db      	ldr	r3, [r3, #12]
    5634:	68db      	ldr	r3, [r3, #12]
    5636:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    5638:	68bb      	ldr	r3, [r7, #8]
    563a:	3318      	adds	r3, #24
    563c:	4618      	mov	r0, r3
    563e:	f7fe fdcb 	bl	41d8 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    5642:	f241 43fc 	movw	r3, #5372	; 0x14fc
    5646:	f2c2 0300 	movt	r3, #8192	; 0x2000
    564a:	681b      	ldr	r3, [r3, #0]
    564c:	2b00      	cmp	r3, #0
    564e:	d126      	bne.n	569e <xTaskRemoveFromEventList+0x76>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    5650:	68bb      	ldr	r3, [r7, #8]
    5652:	3304      	adds	r3, #4
    5654:	4618      	mov	r0, r3
    5656:	f7fe fdbf 	bl	41d8 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    565a:	68bb      	ldr	r3, [r7, #8]
    565c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    565e:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5666:	681b      	ldr	r3, [r3, #0]
    5668:	429a      	cmp	r2, r3
    566a:	d906      	bls.n	567a <xTaskRemoveFromEventList+0x52>
    566c:	68bb      	ldr	r3, [r7, #8]
    566e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5670:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5674:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5678:	601a      	str	r2, [r3, #0]
    567a:	68bb      	ldr	r3, [r7, #8]
    567c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    567e:	4613      	mov	r3, r2
    5680:	009b      	lsls	r3, r3, #2
    5682:	4413      	add	r3, r2
    5684:	009b      	lsls	r3, r3, #2
    5686:	f241 4214 	movw	r2, #5140	; 0x1414
    568a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    568e:	441a      	add	r2, r3
    5690:	68bb      	ldr	r3, [r7, #8]
    5692:	3304      	adds	r3, #4
    5694:	4610      	mov	r0, r2
    5696:	4619      	mov	r1, r3
    5698:	f7fe fd3e 	bl	4118 <vListInsertEnd>
    569c:	e008      	b.n	56b0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    569e:	68bb      	ldr	r3, [r7, #8]
    56a0:	3318      	adds	r3, #24
    56a2:	f241 40a8 	movw	r0, #5288	; 0x14a8
    56a6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    56aa:	4619      	mov	r1, r3
    56ac:	f7fe fd34 	bl	4118 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    56b0:	68bb      	ldr	r3, [r7, #8]
    56b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    56b4:	f241 4310 	movw	r3, #5136	; 0x1410
    56b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56bc:	681b      	ldr	r3, [r3, #0]
    56be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    56c0:	429a      	cmp	r2, r3
    56c2:	d302      	bcc.n	56ca <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    56c4:	2301      	movs	r3, #1
    56c6:	60fb      	str	r3, [r7, #12]
    56c8:	e001      	b.n	56ce <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
    56ca:	2300      	movs	r3, #0
    56cc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    56ce:	68fb      	ldr	r3, [r7, #12]
}
    56d0:	4618      	mov	r0, r3
    56d2:	3710      	adds	r7, #16
    56d4:	46bd      	mov	sp, r7
    56d6:	bd80      	pop	{r7, pc}

000056d8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    56d8:	b480      	push	{r7}
    56da:	b083      	sub	sp, #12
    56dc:	af00      	add	r7, sp, #0
    56de:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    56e0:	f241 5308 	movw	r3, #5384	; 0x1508
    56e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56e8:	681a      	ldr	r2, [r3, #0]
    56ea:	687b      	ldr	r3, [r7, #4]
    56ec:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    56ee:	f241 43ec 	movw	r3, #5356	; 0x14ec
    56f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56f6:	681a      	ldr	r2, [r3, #0]
    56f8:	687b      	ldr	r3, [r7, #4]
    56fa:	605a      	str	r2, [r3, #4]
}
    56fc:	370c      	adds	r7, #12
    56fe:	46bd      	mov	sp, r7
    5700:	f85d 7b04 	ldr.w	r7, [sp], #4
    5704:	4770      	bx	lr
    5706:	bf00      	nop

00005708 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    5708:	b580      	push	{r7, lr}
    570a:	b084      	sub	sp, #16
    570c:	af00      	add	r7, sp, #0
    570e:	6078      	str	r0, [r7, #4]
    5710:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    5712:	f000 fb13 	bl	5d3c <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    5716:	683b      	ldr	r3, [r7, #0]
    5718:	681b      	ldr	r3, [r3, #0]
    571a:	f1b3 3fff 	cmp.w	r3, #4294967295
    571e:	d102      	bne.n	5726 <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    5720:	2300      	movs	r3, #0
    5722:	60fb      	str	r3, [r7, #12]
    5724:	e035      	b.n	5792 <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    5726:	687b      	ldr	r3, [r7, #4]
    5728:	681a      	ldr	r2, [r3, #0]
    572a:	f241 5308 	movw	r3, #5384	; 0x1508
    572e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5732:	681b      	ldr	r3, [r3, #0]
    5734:	429a      	cmp	r2, r3
    5736:	d00b      	beq.n	5750 <xTaskCheckForTimeOut+0x48>
    5738:	687b      	ldr	r3, [r7, #4]
    573a:	685a      	ldr	r2, [r3, #4]
    573c:	f241 43ec 	movw	r3, #5356	; 0x14ec
    5740:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5744:	681b      	ldr	r3, [r3, #0]
    5746:	429a      	cmp	r2, r3
    5748:	d802      	bhi.n	5750 <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    574a:	2301      	movs	r3, #1
    574c:	60fb      	str	r3, [r7, #12]
    574e:	e020      	b.n	5792 <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    5750:	f241 43ec 	movw	r3, #5356	; 0x14ec
    5754:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5758:	681a      	ldr	r2, [r3, #0]
    575a:	687b      	ldr	r3, [r7, #4]
    575c:	685b      	ldr	r3, [r3, #4]
    575e:	1ad2      	subs	r2, r2, r3
    5760:	683b      	ldr	r3, [r7, #0]
    5762:	681b      	ldr	r3, [r3, #0]
    5764:	429a      	cmp	r2, r3
    5766:	d212      	bcs.n	578e <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    5768:	683b      	ldr	r3, [r7, #0]
    576a:	681a      	ldr	r2, [r3, #0]
    576c:	687b      	ldr	r3, [r7, #4]
    576e:	6859      	ldr	r1, [r3, #4]
    5770:	f241 43ec 	movw	r3, #5356	; 0x14ec
    5774:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5778:	681b      	ldr	r3, [r3, #0]
    577a:	1acb      	subs	r3, r1, r3
    577c:	441a      	add	r2, r3
    577e:	683b      	ldr	r3, [r7, #0]
    5780:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    5782:	6878      	ldr	r0, [r7, #4]
    5784:	f7ff ffa8 	bl	56d8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    5788:	2300      	movs	r3, #0
    578a:	60fb      	str	r3, [r7, #12]
    578c:	e001      	b.n	5792 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    578e:	2301      	movs	r3, #1
    5790:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    5792:	f000 fae9 	bl	5d68 <vPortExitCritical>

	return xReturn;
    5796:	68fb      	ldr	r3, [r7, #12]
}
    5798:	4618      	mov	r0, r3
    579a:	3710      	adds	r7, #16
    579c:	46bd      	mov	sp, r7
    579e:	bd80      	pop	{r7, pc}

000057a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    57a0:	b480      	push	{r7}
    57a2:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    57a4:	f241 5304 	movw	r3, #5380	; 0x1504
    57a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57ac:	2201      	movs	r2, #1
    57ae:	601a      	str	r2, [r3, #0]
}
    57b0:	46bd      	mov	sp, r7
    57b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    57b6:	4770      	bx	lr

000057b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    57b8:	b580      	push	{r7, lr}
    57ba:	b082      	sub	sp, #8
    57bc:	af00      	add	r7, sp, #0
    57be:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    57c0:	f000 f886 	bl	58d0 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    57c4:	f000 faac 	bl	5d20 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    57c8:	e7fa      	b.n	57c0 <prvIdleTask+0x8>
    57ca:	bf00      	nop

000057cc <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    57cc:	b580      	push	{r7, lr}
    57ce:	b084      	sub	sp, #16
    57d0:	af00      	add	r7, sp, #0
    57d2:	60f8      	str	r0, [r7, #12]
    57d4:	60b9      	str	r1, [r7, #8]
    57d6:	607a      	str	r2, [r7, #4]
    57d8:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    57da:	68fb      	ldr	r3, [r7, #12]
    57dc:	3334      	adds	r3, #52	; 0x34
    57de:	4618      	mov	r0, r3
    57e0:	68b9      	ldr	r1, [r7, #8]
    57e2:	2210      	movs	r2, #16
    57e4:	f013 f8f4 	bl	189d0 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    57e8:	68fb      	ldr	r3, [r7, #12]
    57ea:	2200      	movs	r2, #0
    57ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    57f0:	687b      	ldr	r3, [r7, #4]
    57f2:	2b04      	cmp	r3, #4
    57f4:	d901      	bls.n	57fa <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    57f6:	2304      	movs	r3, #4
    57f8:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    57fa:	68fb      	ldr	r3, [r7, #12]
    57fc:	687a      	ldr	r2, [r7, #4]
    57fe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    5800:	68fb      	ldr	r3, [r7, #12]
    5802:	687a      	ldr	r2, [r7, #4]
    5804:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    5806:	68fb      	ldr	r3, [r7, #12]
    5808:	3304      	adds	r3, #4
    580a:	4618      	mov	r0, r3
    580c:	f7fe fc78 	bl	4100 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    5810:	68fb      	ldr	r3, [r7, #12]
    5812:	3318      	adds	r3, #24
    5814:	4618      	mov	r0, r3
    5816:	f7fe fc73 	bl	4100 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    581a:	68fb      	ldr	r3, [r7, #12]
    581c:	68fa      	ldr	r2, [r7, #12]
    581e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    5820:	687b      	ldr	r3, [r7, #4]
    5822:	f1c3 0205 	rsb	r2, r3, #5
    5826:	68fb      	ldr	r3, [r7, #12]
    5828:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    582a:	68fb      	ldr	r3, [r7, #12]
    582c:	68fa      	ldr	r2, [r7, #12]
    582e:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    5830:	3710      	adds	r7, #16
    5832:	46bd      	mov	sp, r7
    5834:	bd80      	pop	{r7, pc}
    5836:	bf00      	nop

00005838 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    5838:	b580      	push	{r7, lr}
    583a:	b082      	sub	sp, #8
    583c:	af00      	add	r7, sp, #0
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    583e:	2300      	movs	r3, #0
    5840:	607b      	str	r3, [r7, #4]
    5842:	e00f      	b.n	5864 <prvInitialiseTaskLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    5844:	687a      	ldr	r2, [r7, #4]
    5846:	4613      	mov	r3, r2
    5848:	009b      	lsls	r3, r3, #2
    584a:	4413      	add	r3, r2
    584c:	009b      	lsls	r3, r3, #2
    584e:	f241 4214 	movw	r2, #5140	; 0x1414
    5852:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5856:	4413      	add	r3, r2
    5858:	4618      	mov	r0, r3
    585a:	f7fe fc31 	bl	40c0 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    585e:	687b      	ldr	r3, [r7, #4]
    5860:	3301      	adds	r3, #1
    5862:	607b      	str	r3, [r7, #4]
    5864:	687b      	ldr	r3, [r7, #4]
    5866:	2b04      	cmp	r3, #4
    5868:	d9ec      	bls.n	5844 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    586a:	f241 4078 	movw	r0, #5240	; 0x1478
    586e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5872:	f7fe fc25 	bl	40c0 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    5876:	f241 408c 	movw	r0, #5260	; 0x148c
    587a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    587e:	f7fe fc1f 	bl	40c0 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    5882:	f241 40a8 	movw	r0, #5288	; 0x14a8
    5886:	f2c2 0000 	movt	r0, #8192	; 0x2000
    588a:	f7fe fc19 	bl	40c0 <vListInitialise>


	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    588e:	f241 40bc 	movw	r0, #5308	; 0x14bc
    5892:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5896:	f7fe fc13 	bl	40c0 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    589a:	f241 40d4 	movw	r0, #5332	; 0x14d4
    589e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    58a2:	f7fe fc0d 	bl	40c0 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    58a6:	f241 43a0 	movw	r3, #5280	; 0x14a0
    58aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58ae:	f241 4278 	movw	r2, #5240	; 0x1478
    58b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    58b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    58b8:	f241 43a4 	movw	r3, #5284	; 0x14a4
    58bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58c0:	f241 428c 	movw	r2, #5260	; 0x148c
    58c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    58c8:	601a      	str	r2, [r3, #0]
}
    58ca:	3708      	adds	r7, #8
    58cc:	46bd      	mov	sp, r7
    58ce:	bd80      	pop	{r7, pc}

000058d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    58d0:	b580      	push	{r7, lr}
    58d2:	b082      	sub	sp, #8
    58d4:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    58d6:	f241 43d0 	movw	r3, #5328	; 0x14d0
    58da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58de:	681b      	ldr	r3, [r3, #0]
    58e0:	2b00      	cmp	r3, #0
    58e2:	d03a      	beq.n	595a <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    58e4:	f7ff fc4c 	bl	5180 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    58e8:	f241 43bc 	movw	r3, #5308	; 0x14bc
    58ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58f0:	681b      	ldr	r3, [r3, #0]
    58f2:	2b00      	cmp	r3, #0
    58f4:	bf14      	ite	ne
    58f6:	2300      	movne	r3, #0
    58f8:	2301      	moveq	r3, #1
    58fa:	b2db      	uxtb	r3, r3
    58fc:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    58fe:	f7ff fc51 	bl	51a4 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    5902:	687b      	ldr	r3, [r7, #4]
    5904:	2b00      	cmp	r3, #0
    5906:	d128      	bne.n	595a <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    5908:	f000 fa18 	bl	5d3c <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    590c:	f241 43bc 	movw	r3, #5308	; 0x14bc
    5910:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5914:	68db      	ldr	r3, [r3, #12]
    5916:	68db      	ldr	r3, [r3, #12]
    5918:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    591a:	683b      	ldr	r3, [r7, #0]
    591c:	3304      	adds	r3, #4
    591e:	4618      	mov	r0, r3
    5920:	f7fe fc5a 	bl	41d8 <vListRemove>
					--uxCurrentNumberOfTasks;
    5924:	f241 43e8 	movw	r3, #5352	; 0x14e8
    5928:	f2c2 0300 	movt	r3, #8192	; 0x2000
    592c:	681b      	ldr	r3, [r3, #0]
    592e:	1e5a      	subs	r2, r3, #1
    5930:	f241 43e8 	movw	r3, #5352	; 0x14e8
    5934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5938:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    593a:	f241 43d0 	movw	r3, #5328	; 0x14d0
    593e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5942:	681b      	ldr	r3, [r3, #0]
    5944:	1e5a      	subs	r2, r3, #1
    5946:	f241 43d0 	movw	r3, #5328	; 0x14d0
    594a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    594e:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    5950:	f000 fa0a 	bl	5d68 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    5954:	6838      	ldr	r0, [r7, #0]
    5956:	f000 f879 	bl	5a4c <prvDeleteTCB>
			}
		}
	}
	#endif
}
    595a:	3708      	adds	r7, #8
    595c:	46bd      	mov	sp, r7
    595e:	bd80      	pop	{r7, pc}

00005960 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    5960:	b580      	push	{r7, lr}
    5962:	b082      	sub	sp, #8
    5964:	af00      	add	r7, sp, #0
    5966:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    5968:	f241 4310 	movw	r3, #5136	; 0x1410
    596c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5970:	681b      	ldr	r3, [r3, #0]
    5972:	687a      	ldr	r2, [r7, #4]
    5974:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    5976:	f241 43ec 	movw	r3, #5356	; 0x14ec
    597a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    597e:	681b      	ldr	r3, [r3, #0]
    5980:	687a      	ldr	r2, [r7, #4]
    5982:	429a      	cmp	r2, r3
    5984:	d20f      	bcs.n	59a6 <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5986:	f241 43a4 	movw	r3, #5284	; 0x14a4
    598a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    598e:	681a      	ldr	r2, [r3, #0]
    5990:	f241 4310 	movw	r3, #5136	; 0x1410
    5994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5998:	681b      	ldr	r3, [r3, #0]
    599a:	3304      	adds	r3, #4
    599c:	4610      	mov	r0, r2
    599e:	4619      	mov	r1, r3
    59a0:	f7fe fbe2 	bl	4168 <vListInsert>
    59a4:	e01c      	b.n	59e0 <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    59a6:	f241 43a0 	movw	r3, #5280	; 0x14a0
    59aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59ae:	681a      	ldr	r2, [r3, #0]
    59b0:	f241 4310 	movw	r3, #5136	; 0x1410
    59b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59b8:	681b      	ldr	r3, [r3, #0]
    59ba:	3304      	adds	r3, #4
    59bc:	4610      	mov	r0, r2
    59be:	4619      	mov	r1, r3
    59c0:	f7fe fbd2 	bl	4168 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    59c4:	f240 5330 	movw	r3, #1328	; 0x530
    59c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59cc:	681b      	ldr	r3, [r3, #0]
    59ce:	687a      	ldr	r2, [r7, #4]
    59d0:	429a      	cmp	r2, r3
    59d2:	d205      	bcs.n	59e0 <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    59d4:	f240 5330 	movw	r3, #1328	; 0x530
    59d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59dc:	687a      	ldr	r2, [r7, #4]
    59de:	601a      	str	r2, [r3, #0]
		}
	}
}
    59e0:	3708      	adds	r7, #8
    59e2:	46bd      	mov	sp, r7
    59e4:	bd80      	pop	{r7, pc}
    59e6:	bf00      	nop

000059e8 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    59e8:	b580      	push	{r7, lr}
    59ea:	b084      	sub	sp, #16
    59ec:	af00      	add	r7, sp, #0
    59ee:	4603      	mov	r3, r0
    59f0:	6039      	str	r1, [r7, #0]
    59f2:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    59f4:	2050      	movs	r0, #80	; 0x50
    59f6:	f000 fa1b 	bl	5e30 <pvPortMalloc>
    59fa:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    59fc:	68fb      	ldr	r3, [r7, #12]
    59fe:	2b00      	cmp	r3, #0
    5a00:	d01f      	beq.n	5a42 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    5a02:	683b      	ldr	r3, [r7, #0]
    5a04:	2b00      	cmp	r3, #0
    5a06:	d106      	bne.n	5a16 <prvAllocateTCBAndStack+0x2e>
    5a08:	88fb      	ldrh	r3, [r7, #6]
    5a0a:	009b      	lsls	r3, r3, #2
    5a0c:	4618      	mov	r0, r3
    5a0e:	f000 fa0f 	bl	5e30 <pvPortMalloc>
    5a12:	4603      	mov	r3, r0
    5a14:	e000      	b.n	5a18 <prvAllocateTCBAndStack+0x30>
    5a16:	683b      	ldr	r3, [r7, #0]
    5a18:	68fa      	ldr	r2, [r7, #12]
    5a1a:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    5a1c:	68fb      	ldr	r3, [r7, #12]
    5a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5a20:	2b00      	cmp	r3, #0
    5a22:	d105      	bne.n	5a30 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    5a24:	68f8      	ldr	r0, [r7, #12]
    5a26:	f000 fac7 	bl	5fb8 <vPortFree>
			pxNewTCB = NULL;
    5a2a:	2300      	movs	r3, #0
    5a2c:	60fb      	str	r3, [r7, #12]
    5a2e:	e008      	b.n	5a42 <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    5a30:	68fb      	ldr	r3, [r7, #12]
    5a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    5a34:	88fb      	ldrh	r3, [r7, #6]
    5a36:	009b      	lsls	r3, r3, #2
    5a38:	4610      	mov	r0, r2
    5a3a:	21a5      	movs	r1, #165	; 0xa5
    5a3c:	461a      	mov	r2, r3
    5a3e:	f012 ff77 	bl	18930 <memset>
		}
	}

	return pxNewTCB;
    5a42:	68fb      	ldr	r3, [r7, #12]
}
    5a44:	4618      	mov	r0, r3
    5a46:	3710      	adds	r7, #16
    5a48:	46bd      	mov	sp, r7
    5a4a:	bd80      	pop	{r7, pc}

00005a4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    5a4c:	b580      	push	{r7, lr}
    5a4e:	b082      	sub	sp, #8
    5a50:	af00      	add	r7, sp, #0
    5a52:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    5a54:	687b      	ldr	r3, [r7, #4]
    5a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5a58:	4618      	mov	r0, r3
    5a5a:	f000 faad 	bl	5fb8 <vPortFree>
		vPortFree( pxTCB );
    5a5e:	6878      	ldr	r0, [r7, #4]
    5a60:	f000 faaa 	bl	5fb8 <vPortFree>
	}
    5a64:	3708      	adds	r7, #8
    5a66:	46bd      	mov	sp, r7
    5a68:	bd80      	pop	{r7, pc}
    5a6a:	bf00      	nop

00005a6c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    5a6c:	b480      	push	{r7}
    5a6e:	b083      	sub	sp, #12
    5a70:	af00      	add	r7, sp, #0
        xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    5a72:	f241 4310 	movw	r3, #5136	; 0x1410
    5a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a7a:	681b      	ldr	r3, [r3, #0]
    5a7c:	607b      	str	r3, [r7, #4]

		return xReturn;
    5a7e:	687b      	ldr	r3, [r7, #4]
	}
    5a80:	4618      	mov	r0, r3
    5a82:	370c      	adds	r7, #12
    5a84:	46bd      	mov	sp, r7
    5a86:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a8a:	4770      	bx	lr

00005a8c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    5a8c:	b580      	push	{r7, lr}
    5a8e:	b084      	sub	sp, #16
    5a90:	af00      	add	r7, sp, #0
    5a92:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5a94:	687b      	ldr	r3, [r7, #4]
    5a96:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    5a98:	68fb      	ldr	r3, [r7, #12]
    5a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a9c:	f241 4310 	movw	r3, #5136	; 0x1410
    5aa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5aa4:	681b      	ldr	r3, [r3, #0]
    5aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5aa8:	429a      	cmp	r2, r3
    5aaa:	d24f      	bcs.n	5b4c <vTaskPriorityInherit+0xc0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    5aac:	f241 4310 	movw	r3, #5136	; 0x1410
    5ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ab4:	681b      	ldr	r3, [r3, #0]
    5ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5ab8:	f1c3 0205 	rsb	r2, r3, #5
    5abc:	68fb      	ldr	r3, [r7, #12]
    5abe:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    5ac0:	68fb      	ldr	r3, [r7, #12]
    5ac2:	6959      	ldr	r1, [r3, #20]
    5ac4:	68fb      	ldr	r3, [r7, #12]
    5ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5ac8:	4613      	mov	r3, r2
    5aca:	009b      	lsls	r3, r3, #2
    5acc:	4413      	add	r3, r2
    5ace:	009b      	lsls	r3, r3, #2
    5ad0:	f241 4214 	movw	r2, #5140	; 0x1414
    5ad4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5ad8:	4413      	add	r3, r2
    5ada:	4299      	cmp	r1, r3
    5adc:	d12e      	bne.n	5b3c <vTaskPriorityInherit+0xb0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    5ade:	68fb      	ldr	r3, [r7, #12]
    5ae0:	3304      	adds	r3, #4
    5ae2:	4618      	mov	r0, r3
    5ae4:	f7fe fb78 	bl	41d8 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5ae8:	f241 4310 	movw	r3, #5136	; 0x1410
    5aec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5af0:	681b      	ldr	r3, [r3, #0]
    5af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5af4:	68fb      	ldr	r3, [r7, #12]
    5af6:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    5af8:	68fb      	ldr	r3, [r7, #12]
    5afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5afc:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5b00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b04:	681b      	ldr	r3, [r3, #0]
    5b06:	429a      	cmp	r2, r3
    5b08:	d906      	bls.n	5b18 <vTaskPriorityInherit+0x8c>
    5b0a:	68fb      	ldr	r3, [r7, #12]
    5b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b0e:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5b12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b16:	601a      	str	r2, [r3, #0]
    5b18:	68fb      	ldr	r3, [r7, #12]
    5b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b1c:	4613      	mov	r3, r2
    5b1e:	009b      	lsls	r3, r3, #2
    5b20:	4413      	add	r3, r2
    5b22:	009b      	lsls	r3, r3, #2
    5b24:	f241 4214 	movw	r2, #5140	; 0x1414
    5b28:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5b2c:	441a      	add	r2, r3
    5b2e:	68fb      	ldr	r3, [r7, #12]
    5b30:	3304      	adds	r3, #4
    5b32:	4610      	mov	r0, r2
    5b34:	4619      	mov	r1, r3
    5b36:	f7fe faef 	bl	4118 <vListInsertEnd>
    5b3a:	e007      	b.n	5b4c <vTaskPriorityInherit+0xc0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5b3c:	f241 4310 	movw	r3, #5136	; 0x1410
    5b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b44:	681b      	ldr	r3, [r3, #0]
    5b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b48:	68fb      	ldr	r3, [r7, #12]
    5b4a:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    5b4c:	3710      	adds	r7, #16
    5b4e:	46bd      	mov	sp, r7
    5b50:	bd80      	pop	{r7, pc}
    5b52:	bf00      	nop

00005b54 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    5b54:	b580      	push	{r7, lr}
    5b56:	b084      	sub	sp, #16
    5b58:	af00      	add	r7, sp, #0
    5b5a:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5b5c:	687b      	ldr	r3, [r7, #4]
    5b5e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    5b60:	687b      	ldr	r3, [r7, #4]
    5b62:	2b00      	cmp	r3, #0
    5b64:	d035      	beq.n	5bd2 <vTaskPriorityDisinherit+0x7e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    5b66:	68fb      	ldr	r3, [r7, #12]
    5b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b6a:	68fb      	ldr	r3, [r7, #12]
    5b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5b6e:	429a      	cmp	r2, r3
    5b70:	d02f      	beq.n	5bd2 <vTaskPriorityDisinherit+0x7e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    5b72:	68fb      	ldr	r3, [r7, #12]
    5b74:	3304      	adds	r3, #4
    5b76:	4618      	mov	r0, r3
    5b78:	f7fe fb2e 	bl	41d8 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    5b7c:	68fb      	ldr	r3, [r7, #12]
    5b7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    5b80:	68fb      	ldr	r3, [r7, #12]
    5b82:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    5b84:	68fb      	ldr	r3, [r7, #12]
    5b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5b88:	f1c3 0205 	rsb	r2, r3, #5
    5b8c:	68fb      	ldr	r3, [r7, #12]
    5b8e:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    5b90:	68fb      	ldr	r3, [r7, #12]
    5b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b94:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b9c:	681b      	ldr	r3, [r3, #0]
    5b9e:	429a      	cmp	r2, r3
    5ba0:	d906      	bls.n	5bb0 <vTaskPriorityDisinherit+0x5c>
    5ba2:	68fb      	ldr	r3, [r7, #12]
    5ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5ba6:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bae:	601a      	str	r2, [r3, #0]
    5bb0:	68fb      	ldr	r3, [r7, #12]
    5bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5bb4:	4613      	mov	r3, r2
    5bb6:	009b      	lsls	r3, r3, #2
    5bb8:	4413      	add	r3, r2
    5bba:	009b      	lsls	r3, r3, #2
    5bbc:	f241 4214 	movw	r2, #5140	; 0x1414
    5bc0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5bc4:	441a      	add	r2, r3
    5bc6:	68fb      	ldr	r3, [r7, #12]
    5bc8:	3304      	adds	r3, #4
    5bca:	4610      	mov	r0, r2
    5bcc:	4619      	mov	r1, r3
    5bce:	f7fe faa3 	bl	4118 <vListInsertEnd>
			}
		}
	}
    5bd2:	3710      	adds	r7, #16
    5bd4:	46bd      	mov	sp, r7
    5bd6:	bd80      	pop	{r7, pc}

00005bd8 <xTaskGetxStartTime>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_SEFM == 1)

    portTickType xTaskGetxStartTime( xTaskHandle pxTCB )
    {
    5bd8:	b480      	push	{r7}
    5bda:	b083      	sub	sp, #12
    5bdc:	af00      	add	r7, sp, #0
    5bde:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xStartTime;
    5be0:	687b      	ldr	r3, [r7, #4]
    5be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    }
    5be4:	4618      	mov	r0, r3
    5be6:	370c      	adds	r7, #12
    5be8:	46bd      	mov	sp, r7
    5bea:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bee:	4770      	bx	lr

00005bf0 <xTaskGetxLet>:

    portTickType xTaskGetxLet( xTaskHandle pxTCB )
    {
    5bf0:	b480      	push	{r7}
    5bf2:	b083      	sub	sp, #12
    5bf4:	af00      	add	r7, sp, #0
    5bf6:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xLet;
    5bf8:	687b      	ldr	r3, [r7, #4]
    5bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
    5bfc:	4618      	mov	r0, r3
    5bfe:	370c      	adds	r7, #12
    5c00:	46bd      	mov	sp, r7
    5c02:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c06:	4770      	bx	lr

00005c08 <vTaskSetxStartTime>:

    void vTaskSetxStartTime ( xTaskHandle pxTCB, portTickType xStartTime )
    {
    5c08:	b480      	push	{r7}
    5c0a:	b083      	sub	sp, #12
    5c0c:	af00      	add	r7, sp, #0
    5c0e:	6078      	str	r0, [r7, #4]
    5c10:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xStartTime = xStartTime; 
    5c12:	687b      	ldr	r3, [r7, #4]
    5c14:	683a      	ldr	r2, [r7, #0]
    5c16:	645a      	str	r2, [r3, #68]	; 0x44
    }
    5c18:	370c      	adds	r7, #12
    5c1a:	46bd      	mov	sp, r7
    5c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c20:	4770      	bx	lr
    5c22:	bf00      	nop

00005c24 <vTaskSetxLet>:

    void vTaskSetxLet( xTaskHandle pxTCB, portTickType xLet )
    {
    5c24:	b480      	push	{r7}
    5c26:	b083      	sub	sp, #12
    5c28:	af00      	add	r7, sp, #0
    5c2a:	6078      	str	r0, [r7, #4]
    5c2c:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xLet = xLet;
    5c2e:	687b      	ldr	r3, [r7, #4]
    5c30:	683a      	ldr	r2, [r7, #0]
    5c32:	649a      	str	r2, [r3, #72]	; 0x48
    }
    5c34:	370c      	adds	r7, #12
    5c36:	46bd      	mov	sp, r7
    5c38:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c3c:	4770      	bx	lr
    5c3e:	bf00      	nop

00005c40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    5c40:	b480      	push	{r7}
    5c42:	b085      	sub	sp, #20
    5c44:	af00      	add	r7, sp, #0
    5c46:	60f8      	str	r0, [r7, #12]
    5c48:	60b9      	str	r1, [r7, #8]
    5c4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    5c4c:	68fb      	ldr	r3, [r7, #12]
    5c4e:	3b04      	subs	r3, #4
    5c50:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    5c52:	68fb      	ldr	r3, [r7, #12]
    5c54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5c58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5c5a:	68fb      	ldr	r3, [r7, #12]
    5c5c:	3b04      	subs	r3, #4
    5c5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    5c60:	68ba      	ldr	r2, [r7, #8]
    5c62:	68fb      	ldr	r3, [r7, #12]
    5c64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5c66:	68fb      	ldr	r3, [r7, #12]
    5c68:	3b04      	subs	r3, #4
    5c6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    5c6c:	68fb      	ldr	r3, [r7, #12]
    5c6e:	2200      	movs	r2, #0
    5c70:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    5c72:	68fb      	ldr	r3, [r7, #12]
    5c74:	3b14      	subs	r3, #20
    5c76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    5c78:	687a      	ldr	r2, [r7, #4]
    5c7a:	68fb      	ldr	r3, [r7, #12]
    5c7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    5c7e:	68fb      	ldr	r3, [r7, #12]
    5c80:	3b20      	subs	r3, #32
    5c82:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    5c84:	68fb      	ldr	r3, [r7, #12]
}
    5c86:	4618      	mov	r0, r3
    5c88:	3714      	adds	r7, #20
    5c8a:	46bd      	mov	sp, r7
    5c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c90:	4770      	bx	lr
    5c92:	bf00      	nop

00005c94 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    5c94:	4b06      	ldr	r3, [pc, #24]	; (5cb0 <pxCurrentTCBConst2>)
    5c96:	6819      	ldr	r1, [r3, #0]
    5c98:	6808      	ldr	r0, [r1, #0]
    5c9a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5c9e:	f380 8809 	msr	PSP, r0
    5ca2:	f04f 0000 	mov.w	r0, #0
    5ca6:	f380 8811 	msr	BASEPRI, r0
    5caa:	f04e 0e0d 	orr.w	lr, lr, #13
    5cae:	4770      	bx	lr

00005cb0 <pxCurrentTCBConst2>:
    5cb0:	20001410 	.word	0x20001410

00005cb4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    5cb4:	485d      	ldr	r0, [pc, #372]	; (5e2c <prvSetupTimerInterrupt+0x2c>)
    5cb6:	6800      	ldr	r0, [r0, #0]
    5cb8:	6800      	ldr	r0, [r0, #0]
    5cba:	f380 8808 	msr	MSP, r0
    5cbe:	b662      	cpsie	i
    5cc0:	df00      	svc	0
    5cc2:	bf00      	nop

00005cc4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    5cc4:	b580      	push	{r7, lr}
    5cc6:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    5cc8:	f64e 5320 	movw	r3, #60704	; 0xed20
    5ccc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5cd0:	f64e 5220 	movw	r2, #60704	; 0xed20
    5cd4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5cd8:	6812      	ldr	r2, [r2, #0]
    5cda:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    5cde:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    5ce0:	f64e 5320 	movw	r3, #60704	; 0xed20
    5ce4:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5ce8:	f64e 5220 	movw	r2, #60704	; 0xed20
    5cec:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5cf0:	6812      	ldr	r2, [r2, #0]
    5cf2:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    5cf6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    5cf8:	f000 f882 	bl	5e00 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    5cfc:	f240 5334 	movw	r3, #1332	; 0x534
    5d00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d04:	2200      	movs	r2, #0
    5d06:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    5d08:	f7ff ffd4 	bl	5cb4 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    5d0c:	2300      	movs	r3, #0
}
    5d0e:	4618      	mov	r0, r3
    5d10:	bd80      	pop	{r7, pc}
    5d12:	bf00      	nop

00005d14 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    5d14:	b480      	push	{r7}
    5d16:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    5d18:	46bd      	mov	sp, r7
    5d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d1e:	4770      	bx	lr

00005d20 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    5d20:	b480      	push	{r7}
    5d22:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    5d24:	f64e 5304 	movw	r3, #60676	; 0xed04
    5d28:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5d30:	601a      	str	r2, [r3, #0]
}
    5d32:	46bd      	mov	sp, r7
    5d34:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d38:	4770      	bx	lr
    5d3a:	bf00      	nop

00005d3c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    5d3c:	b480      	push	{r7}
    5d3e:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    5d40:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5d44:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    5d48:	f240 5334 	movw	r3, #1332	; 0x534
    5d4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d50:	681b      	ldr	r3, [r3, #0]
    5d52:	1c5a      	adds	r2, r3, #1
    5d54:	f240 5334 	movw	r3, #1332	; 0x534
    5d58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d5c:	601a      	str	r2, [r3, #0]
}
    5d5e:	46bd      	mov	sp, r7
    5d60:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d64:	4770      	bx	lr
    5d66:	bf00      	nop

00005d68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    5d68:	b480      	push	{r7}
    5d6a:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    5d6c:	f240 5334 	movw	r3, #1332	; 0x534
    5d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d74:	681b      	ldr	r3, [r3, #0]
    5d76:	1e5a      	subs	r2, r3, #1
    5d78:	f240 5334 	movw	r3, #1332	; 0x534
    5d7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d80:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    5d82:	f240 5334 	movw	r3, #1332	; 0x534
    5d86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d8a:	681b      	ldr	r3, [r3, #0]
    5d8c:	2b00      	cmp	r3, #0
    5d8e:	d103      	bne.n	5d98 <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    5d90:	f04f 0000 	mov.w	r0, #0
    5d94:	f380 8811 	msr	BASEPRI, r0
	}
}
    5d98:	46bd      	mov	sp, r7
    5d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d9e:	4770      	bx	lr

00005da0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    5da0:	f3ef 8009 	mrs	r0, PSP
    5da4:	4b0c      	ldr	r3, [pc, #48]	; (5dd8 <pxCurrentTCBConst>)
    5da6:	681a      	ldr	r2, [r3, #0]
    5da8:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5dac:	6010      	str	r0, [r2, #0]
    5dae:	e92d 4008 	stmdb	sp!, {r3, lr}
    5db2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5db6:	f380 8811 	msr	BASEPRI, r0
    5dba:	f7ff fba1 	bl	5500 <vTaskSwitchContext>
    5dbe:	f04f 0000 	mov.w	r0, #0
    5dc2:	f380 8811 	msr	BASEPRI, r0
    5dc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5dca:	6819      	ldr	r1, [r3, #0]
    5dcc:	6808      	ldr	r0, [r1, #0]
    5dce:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5dd2:	f380 8809 	msr	PSP, r0
    5dd6:	4770      	bx	lr

00005dd8 <pxCurrentTCBConst>:
    5dd8:	20001410 	.word	0x20001410

00005ddc <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    5ddc:	b580      	push	{r7, lr}
    5dde:	b082      	sub	sp, #8
    5de0:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    5de2:	2300      	movs	r3, #0
    5de4:	607b      	str	r3, [r7, #4]
    5de6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5dea:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    5dee:	f7ff faa9 	bl	5344 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    5df2:	f04f 0000 	mov.w	r0, #0
    5df6:	f380 8811 	msr	BASEPRI, r0
}
    5dfa:	3708      	adds	r7, #8
    5dfc:	46bd      	mov	sp, r7
    5dfe:	bd80      	pop	{r7, pc}

00005e00 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    5e00:	b480      	push	{r7}
    5e02:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    5e04:	f24e 0314 	movw	r3, #57364	; 0xe014
    5e08:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5e0c:	f644 32bf 	movw	r2, #19391	; 0x4bbf
    5e10:	f2c0 0203 	movt	r2, #3
    5e14:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    5e16:	f24e 0310 	movw	r3, #57360	; 0xe010
    5e1a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5e1e:	2207      	movs	r2, #7
    5e20:	601a      	str	r2, [r3, #0]
}
    5e22:	46bd      	mov	sp, r7
    5e24:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e28:	4770      	bx	lr
    5e2a:	0000      	.short	0x0000
    5e2c:	e000ed08 	.word	0xe000ed08

00005e30 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    5e30:	b580      	push	{r7, lr}
    5e32:	b08a      	sub	sp, #40	; 0x28
    5e34:	af00      	add	r7, sp, #0
    5e36:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    5e38:	2300      	movs	r3, #0
    5e3a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    5e3c:	f7ff f9a0 	bl	5180 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    5e40:	f24c 5320 	movw	r3, #50464	; 0xc520
    5e44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e48:	681b      	ldr	r3, [r3, #0]
    5e4a:	2b00      	cmp	r3, #0
    5e4c:	d130      	bne.n	5eb0 <pvPortMalloc+0x80>
		{
			prvHeapInit();
    5e4e:	f24c 5310 	movw	r3, #50448	; 0xc510
    5e52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e56:	f241 5210 	movw	r2, #5392	; 0x1510
    5e5a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5e5e:	601a      	str	r2, [r3, #0]
    5e60:	f24c 5310 	movw	r3, #50448	; 0xc510
    5e64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e68:	2200      	movs	r2, #0
    5e6a:	605a      	str	r2, [r3, #4]
    5e6c:	f24c 5318 	movw	r3, #50456	; 0xc518
    5e70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e74:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    5e78:	605a      	str	r2, [r3, #4]
    5e7a:	f24c 5318 	movw	r3, #50456	; 0xc518
    5e7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e82:	2200      	movs	r2, #0
    5e84:	601a      	str	r2, [r3, #0]
    5e86:	f241 5310 	movw	r3, #5392	; 0x1510
    5e8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e8e:	617b      	str	r3, [r7, #20]
    5e90:	697b      	ldr	r3, [r7, #20]
    5e92:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    5e96:	605a      	str	r2, [r3, #4]
    5e98:	697a      	ldr	r2, [r7, #20]
    5e9a:	f24c 5318 	movw	r3, #50456	; 0xc518
    5e9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ea2:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    5ea4:	f24c 5320 	movw	r3, #50464	; 0xc520
    5ea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5eac:	2201      	movs	r2, #1
    5eae:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    5eb0:	687b      	ldr	r3, [r7, #4]
    5eb2:	2b00      	cmp	r3, #0
    5eb4:	d00d      	beq.n	5ed2 <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    5eb6:	2310      	movs	r3, #16
    5eb8:	687a      	ldr	r2, [r7, #4]
    5eba:	4413      	add	r3, r2
    5ebc:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    5ebe:	687b      	ldr	r3, [r7, #4]
    5ec0:	f003 0307 	and.w	r3, r3, #7
    5ec4:	2b00      	cmp	r3, #0
    5ec6:	d004      	beq.n	5ed2 <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    5ec8:	687b      	ldr	r3, [r7, #4]
    5eca:	f023 0307 	bic.w	r3, r3, #7
    5ece:	3308      	adds	r3, #8
    5ed0:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    5ed2:	687b      	ldr	r3, [r7, #4]
    5ed4:	2b00      	cmp	r3, #0
    5ed6:	d068      	beq.n	5faa <pvPortMalloc+0x17a>
    5ed8:	687b      	ldr	r3, [r7, #4]
    5eda:	f5b3 2f96 	cmp.w	r3, #307200	; 0x4b000
    5ede:	d264      	bcs.n	5faa <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    5ee0:	f24c 5310 	movw	r3, #50448	; 0xc510
    5ee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ee8:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    5eea:	f24c 5310 	movw	r3, #50448	; 0xc510
    5eee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ef2:	681b      	ldr	r3, [r3, #0]
    5ef4:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5ef6:	e004      	b.n	5f02 <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    5ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5efa:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    5efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5efe:	681b      	ldr	r3, [r3, #0]
    5f00:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f04:	685a      	ldr	r2, [r3, #4]
    5f06:	687b      	ldr	r3, [r7, #4]
    5f08:	429a      	cmp	r2, r3
    5f0a:	d203      	bcs.n	5f14 <pvPortMalloc+0xe4>
    5f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f0e:	681b      	ldr	r3, [r3, #0]
    5f10:	2b00      	cmp	r3, #0
    5f12:	d1f1      	bne.n	5ef8 <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    5f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5f16:	f24c 5318 	movw	r3, #50456	; 0xc518
    5f1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f1e:	429a      	cmp	r2, r3
    5f20:	d043      	beq.n	5faa <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    5f22:	6a3b      	ldr	r3, [r7, #32]
    5f24:	681a      	ldr	r2, [r3, #0]
    5f26:	2310      	movs	r3, #16
    5f28:	4413      	add	r3, r2
    5f2a:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    5f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f2e:	681a      	ldr	r2, [r3, #0]
    5f30:	6a3b      	ldr	r3, [r7, #32]
    5f32:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    5f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f36:	685a      	ldr	r2, [r3, #4]
    5f38:	687b      	ldr	r3, [r7, #4]
    5f3a:	1ad2      	subs	r2, r2, r3
    5f3c:	2310      	movs	r3, #16
    5f3e:	005b      	lsls	r3, r3, #1
    5f40:	429a      	cmp	r2, r3
    5f42:	d925      	bls.n	5f90 <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    5f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5f46:	687b      	ldr	r3, [r7, #4]
    5f48:	4413      	add	r3, r2
    5f4a:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    5f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f4e:	685a      	ldr	r2, [r3, #4]
    5f50:	687b      	ldr	r3, [r7, #4]
    5f52:	1ad2      	subs	r2, r2, r3
    5f54:	693b      	ldr	r3, [r7, #16]
    5f56:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    5f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f5a:	687a      	ldr	r2, [r7, #4]
    5f5c:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    5f5e:	693b      	ldr	r3, [r7, #16]
    5f60:	685b      	ldr	r3, [r3, #4]
    5f62:	60fb      	str	r3, [r7, #12]
    5f64:	f24c 5310 	movw	r3, #50448	; 0xc510
    5f68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f6c:	61bb      	str	r3, [r7, #24]
    5f6e:	e002      	b.n	5f76 <pvPortMalloc+0x146>
    5f70:	69bb      	ldr	r3, [r7, #24]
    5f72:	681b      	ldr	r3, [r3, #0]
    5f74:	61bb      	str	r3, [r7, #24]
    5f76:	69bb      	ldr	r3, [r7, #24]
    5f78:	681b      	ldr	r3, [r3, #0]
    5f7a:	685a      	ldr	r2, [r3, #4]
    5f7c:	68fb      	ldr	r3, [r7, #12]
    5f7e:	429a      	cmp	r2, r3
    5f80:	d3f6      	bcc.n	5f70 <pvPortMalloc+0x140>
    5f82:	69bb      	ldr	r3, [r7, #24]
    5f84:	681a      	ldr	r2, [r3, #0]
    5f86:	693b      	ldr	r3, [r7, #16]
    5f88:	601a      	str	r2, [r3, #0]
    5f8a:	69bb      	ldr	r3, [r7, #24]
    5f8c:	693a      	ldr	r2, [r7, #16]
    5f8e:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    5f90:	f240 5338 	movw	r3, #1336	; 0x538
    5f94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f98:	681a      	ldr	r2, [r3, #0]
    5f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f9c:	685b      	ldr	r3, [r3, #4]
    5f9e:	1ad2      	subs	r2, r2, r3
    5fa0:	f240 5338 	movw	r3, #1336	; 0x538
    5fa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fa8:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    5faa:	f7ff f8fb 	bl	51a4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    5fae:	69fb      	ldr	r3, [r7, #28]
}
    5fb0:	4618      	mov	r0, r3
    5fb2:	3728      	adds	r7, #40	; 0x28
    5fb4:	46bd      	mov	sp, r7
    5fb6:	bd80      	pop	{r7, pc}

00005fb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    5fb8:	b580      	push	{r7, lr}
    5fba:	b086      	sub	sp, #24
    5fbc:	af00      	add	r7, sp, #0
    5fbe:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    5fc0:	687b      	ldr	r3, [r7, #4]
    5fc2:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    5fc4:	687b      	ldr	r3, [r7, #4]
    5fc6:	2b00      	cmp	r3, #0
    5fc8:	d030      	beq.n	602c <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    5fca:	2310      	movs	r3, #16
    5fcc:	425b      	negs	r3, r3
    5fce:	693a      	ldr	r2, [r7, #16]
    5fd0:	4413      	add	r3, r2
    5fd2:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    5fd4:	693b      	ldr	r3, [r7, #16]
    5fd6:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    5fd8:	f7ff f8d2 	bl	5180 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    5fdc:	68fb      	ldr	r3, [r7, #12]
    5fde:	685b      	ldr	r3, [r3, #4]
    5fe0:	60bb      	str	r3, [r7, #8]
    5fe2:	f24c 5310 	movw	r3, #50448	; 0xc510
    5fe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fea:	617b      	str	r3, [r7, #20]
    5fec:	e002      	b.n	5ff4 <vPortFree+0x3c>
    5fee:	697b      	ldr	r3, [r7, #20]
    5ff0:	681b      	ldr	r3, [r3, #0]
    5ff2:	617b      	str	r3, [r7, #20]
    5ff4:	697b      	ldr	r3, [r7, #20]
    5ff6:	681b      	ldr	r3, [r3, #0]
    5ff8:	685a      	ldr	r2, [r3, #4]
    5ffa:	68bb      	ldr	r3, [r7, #8]
    5ffc:	429a      	cmp	r2, r3
    5ffe:	d3f6      	bcc.n	5fee <vPortFree+0x36>
    6000:	697b      	ldr	r3, [r7, #20]
    6002:	681a      	ldr	r2, [r3, #0]
    6004:	68fb      	ldr	r3, [r7, #12]
    6006:	601a      	str	r2, [r3, #0]
    6008:	697b      	ldr	r3, [r7, #20]
    600a:	68fa      	ldr	r2, [r7, #12]
    600c:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    600e:	68fb      	ldr	r3, [r7, #12]
    6010:	685a      	ldr	r2, [r3, #4]
    6012:	f240 5338 	movw	r3, #1336	; 0x538
    6016:	f2c2 0300 	movt	r3, #8192	; 0x2000
    601a:	681b      	ldr	r3, [r3, #0]
    601c:	441a      	add	r2, r3
    601e:	f240 5338 	movw	r3, #1336	; 0x538
    6022:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6026:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    6028:	f7ff f8bc 	bl	51a4 <xTaskResumeAll>
	}
}
    602c:	3718      	adds	r7, #24
    602e:	46bd      	mov	sp, r7
    6030:	bd80      	pop	{r7, pc}
    6032:	bf00      	nop

00006034 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    6034:	b480      	push	{r7}
    6036:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    6038:	f240 5338 	movw	r3, #1336	; 0x538
    603c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6040:	681b      	ldr	r3, [r3, #0]
}
    6042:	4618      	mov	r0, r3
    6044:	46bd      	mov	sp, r7
    6046:	f85d 7b04 	ldr.w	r7, [sp], #4
    604a:	4770      	bx	lr

0000604c <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    604c:	b480      	push	{r7}
    604e:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    6050:	46bd      	mov	sp, r7
    6052:	f85d 7b04 	ldr.w	r7, [sp], #4
    6056:	4770      	bx	lr

00006058 <ground_calibrate>:
 * set to auto1 before MAX_DELAY_FOR_CALIBRATION secondes */
/**User must put verticaly the uav (nose bottom) and push
 * radio roll stick to get new calibration
 * If not, the default calibration is used.
 */
inline void ground_calibrate( void ) {
    6058:	b580      	push	{r7, lr}
    605a:	af00      	add	r7, sp, #0
    break;
  case CALIB_DONE:
    break;
  }
#else*/
if(calib_status == NO_CALIB)
    605c:	f24c 5342 	movw	r3, #50498	; 0xc542
    6060:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6064:	781b      	ldrb	r3, [r3, #0]
    6066:	2b00      	cmp	r3, #0
    6068:	f040 815d 	bne.w	6326 <ground_calibrate+0x2ce>
{
    if (cputime < MAX_DELAY_FOR_CALIBRATION && pprz_mode == PPRZ_MODE_AUTO1 ) {
    606c:	f24c 532a 	movw	r3, #50474	; 0xc52a
    6070:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6074:	881b      	ldrh	r3, [r3, #0]
    6076:	2b09      	cmp	r3, #9
    6078:	f201 8145 	bhi.w	7306 <ground_calibrate+0x12ae>
    607c:	f24c 532c 	movw	r3, #50476	; 0xc52c
    6080:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6084:	781b      	ldrb	r3, [r3, #0]
    6086:	2b01      	cmp	r3, #1
    6088:	f041 813d 	bne.w	7306 <ground_calibrate+0x12ae>
      calib_status = WAITING_CALIB_CONTRAST;
    608c:	f24c 5342 	movw	r3, #50498	; 0xc542
    6090:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6094:	2201      	movs	r2, #1
    6096:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_START();
    6098:	f24c 5349 	movw	r3, #50505	; 0xc549
    609c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60a0:	781a      	ldrb	r2, [r3, #0]
    60a2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    60a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60aa:	781b      	ldrb	r3, [r3, #0]
    60ac:	b2db      	uxtb	r3, r3
    60ae:	429a      	cmp	r2, r3
    60b0:	d313      	bcc.n	60da <ground_calibrate+0x82>
    60b2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    60b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60ba:	781b      	ldrb	r3, [r3, #0]
    60bc:	b2db      	uxtb	r3, r3
    60be:	461a      	mov	r2, r3
    60c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    60c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60c8:	781b      	ldrb	r3, [r3, #0]
    60ca:	1ad3      	subs	r3, r2, r3
    60cc:	33ff      	adds	r3, #255	; 0xff
    60ce:	2b04      	cmp	r3, #4
    60d0:	bfd4      	ite	le
    60d2:	2300      	movle	r3, #0
    60d4:	2301      	movgt	r3, #1
    60d6:	b2db      	uxtb	r3, r3
    60d8:	e011      	b.n	60fe <ground_calibrate+0xa6>
    60da:	f24c 534a 	movw	r3, #50506	; 0xc54a
    60de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60e2:	781b      	ldrb	r3, [r3, #0]
    60e4:	b2db      	uxtb	r3, r3
    60e6:	461a      	mov	r2, r3
    60e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    60ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60f0:	781b      	ldrb	r3, [r3, #0]
    60f2:	1ad3      	subs	r3, r2, r3
    60f4:	2b04      	cmp	r3, #4
    60f6:	bfd4      	ite	le
    60f8:	2300      	movle	r3, #0
    60fa:	2301      	movgt	r3, #1
    60fc:	b2db      	uxtb	r3, r3
    60fe:	2b00      	cmp	r3, #0
    6100:	f000 8103 	beq.w	630a <ground_calibrate+0x2b2>
    6104:	f24c 5349 	movw	r3, #50505	; 0xc549
    6108:	f2c2 0304 	movt	r3, #8196	; 0x2004
    610c:	781b      	ldrb	r3, [r3, #0]
    610e:	461a      	mov	r2, r3
    6110:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6118:	2105      	movs	r1, #5
    611a:	5499      	strb	r1, [r3, r2]
    611c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6120:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6124:	781b      	ldrb	r3, [r3, #0]
    6126:	3301      	adds	r3, #1
    6128:	b2da      	uxtb	r2, r3
    612a:	f24c 5349 	movw	r3, #50505	; 0xc549
    612e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6132:	701a      	strb	r2, [r3, #0]
    6134:	f24c 5349 	movw	r3, #50505	; 0xc549
    6138:	f2c2 0304 	movt	r3, #8196	; 0x2004
    613c:	781b      	ldrb	r3, [r3, #0]
    613e:	2bff      	cmp	r3, #255	; 0xff
    6140:	d105      	bne.n	614e <ground_calibrate+0xf6>
    6142:	f24c 5349 	movw	r3, #50505	; 0xc549
    6146:	f2c2 0304 	movt	r3, #8196	; 0x2004
    614a:	2200      	movs	r2, #0
    614c:	701a      	strb	r2, [r3, #0]
    614e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6152:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6156:	781b      	ldrb	r3, [r3, #0]
    6158:	461a      	mov	r2, r3
    615a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    615e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6162:	2102      	movs	r1, #2
    6164:	5499      	strb	r1, [r3, r2]
    6166:	f24c 5349 	movw	r3, #50505	; 0xc549
    616a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    616e:	781b      	ldrb	r3, [r3, #0]
    6170:	3301      	adds	r3, #1
    6172:	b2da      	uxtb	r2, r3
    6174:	f24c 5349 	movw	r3, #50505	; 0xc549
    6178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    617c:	701a      	strb	r2, [r3, #0]
    617e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6182:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6186:	781b      	ldrb	r3, [r3, #0]
    6188:	2bff      	cmp	r3, #255	; 0xff
    618a:	d105      	bne.n	6198 <ground_calibrate+0x140>
    618c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6190:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6194:	2200      	movs	r2, #0
    6196:	701a      	strb	r2, [r3, #0]
    6198:	f24c 634d 	movw	r3, #50765	; 0xc64d
    619c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61a0:	2202      	movs	r2, #2
    61a2:	701a      	strb	r2, [r3, #0]
    61a4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    61a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61ac:	2202      	movs	r2, #2
    61ae:	701a      	strb	r2, [r3, #0]
    61b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    61b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61b8:	781b      	ldrb	r3, [r3, #0]
    61ba:	461a      	mov	r2, r3
    61bc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    61c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61c4:	7819      	ldrb	r1, [r3, #0]
    61c6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    61ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61ce:	5499      	strb	r1, [r3, r2]
    61d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    61d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61d8:	781b      	ldrb	r3, [r3, #0]
    61da:	3301      	adds	r3, #1
    61dc:	b2da      	uxtb	r2, r3
    61de:	f24c 5349 	movw	r3, #50505	; 0xc549
    61e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61e6:	701a      	strb	r2, [r3, #0]
    61e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    61ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61f0:	781b      	ldrb	r3, [r3, #0]
    61f2:	2bff      	cmp	r3, #255	; 0xff
    61f4:	d105      	bne.n	6202 <ground_calibrate+0x1aa>
    61f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    61fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61fe:	2200      	movs	r2, #0
    6200:	701a      	strb	r2, [r3, #0]
    6202:	f24c 5349 	movw	r3, #50505	; 0xc549
    6206:	f2c2 0304 	movt	r3, #8196	; 0x2004
    620a:	781b      	ldrb	r3, [r3, #0]
    620c:	461a      	mov	r2, r3
    620e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6212:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6216:	7819      	ldrb	r1, [r3, #0]
    6218:	f24c 534c 	movw	r3, #50508	; 0xc54c
    621c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6220:	5499      	strb	r1, [r3, r2]
    6222:	f24c 5349 	movw	r3, #50505	; 0xc549
    6226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    622a:	781b      	ldrb	r3, [r3, #0]
    622c:	3301      	adds	r3, #1
    622e:	b2da      	uxtb	r2, r3
    6230:	f24c 5349 	movw	r3, #50505	; 0xc549
    6234:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6238:	701a      	strb	r2, [r3, #0]
    623a:	f24c 5349 	movw	r3, #50505	; 0xc549
    623e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6242:	781b      	ldrb	r3, [r3, #0]
    6244:	2bff      	cmp	r3, #255	; 0xff
    6246:	d105      	bne.n	6254 <ground_calibrate+0x1fc>
    6248:	f24c 5349 	movw	r3, #50505	; 0xc549
    624c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6250:	2200      	movs	r2, #0
    6252:	701a      	strb	r2, [r3, #0]
    6254:	f242 0339 	movw	r3, #8249	; 0x2039
    6258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    625c:	781b      	ldrb	r3, [r3, #0]
    625e:	b2db      	uxtb	r3, r3
    6260:	f003 0310 	and.w	r3, r3, #16
    6264:	2b00      	cmp	r3, #0
    6266:	f041 804e 	bne.w	7306 <ground_calibrate+0x12ae>
    626a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    626e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6272:	781b      	ldrb	r3, [r3, #0]
    6274:	b2db      	uxtb	r3, r3
    6276:	461a      	mov	r2, r3
    6278:	f24c 534c 	movw	r3, #50508	; 0xc54c
    627c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6280:	5c9a      	ldrb	r2, [r3, r2]
    6282:	f24c 634b 	movw	r3, #50763	; 0xc64b
    6286:	f2c2 0304 	movt	r3, #8196	; 0x2004
    628a:	701a      	strb	r2, [r3, #0]
    628c:	f24c 634c 	movw	r3, #50764	; 0xc64c
    6290:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6294:	2200      	movs	r2, #0
    6296:	701a      	strb	r2, [r3, #0]
    6298:	f24c 534a 	movw	r3, #50506	; 0xc54a
    629c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62a0:	781b      	ldrb	r3, [r3, #0]
    62a2:	b2db      	uxtb	r3, r3
    62a4:	3301      	adds	r3, #1
    62a6:	b2da      	uxtb	r2, r3
    62a8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    62ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62b0:	701a      	strb	r2, [r3, #0]
    62b2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    62b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62ba:	781b      	ldrb	r3, [r3, #0]
    62bc:	b2db      	uxtb	r3, r3
    62be:	2bff      	cmp	r3, #255	; 0xff
    62c0:	d105      	bne.n	62ce <ground_calibrate+0x276>
    62c2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    62c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62ca:	2200      	movs	r2, #0
    62cc:	701a      	strb	r2, [r3, #0]
    62ce:	f242 0338 	movw	r3, #8248	; 0x2038
    62d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62d6:	f242 0238 	movw	r2, #8248	; 0x2038
    62da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    62de:	7812      	ldrb	r2, [r2, #0]
    62e0:	b2d2      	uxtb	r2, r2
    62e2:	f042 0201 	orr.w	r2, r2, #1
    62e6:	b2d2      	uxtb	r2, r2
    62e8:	701a      	strb	r2, [r3, #0]
    62ea:	f242 0339 	movw	r3, #8249	; 0x2039
    62ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62f2:	f242 0239 	movw	r2, #8249	; 0x2039
    62f6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    62fa:	7812      	ldrb	r2, [r2, #0]
    62fc:	b2d2      	uxtb	r2, r2
    62fe:	f042 0210 	orr.w	r2, r2, #16
    6302:	b2d2      	uxtb	r2, r2
    6304:	701a      	strb	r2, [r3, #0]
    6306:	f000 bffe 	b.w	7306 <ground_calibrate+0x12ae>
    630a:	f24c 5348 	movw	r3, #50504	; 0xc548
    630e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6312:	781b      	ldrb	r3, [r3, #0]
    6314:	3301      	adds	r3, #1
    6316:	b2da      	uxtb	r2, r3
    6318:	f24c 5348 	movw	r3, #50504	; 0xc548
    631c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6320:	701a      	strb	r2, [r3, #0]
    6322:	f000 bff0 	b.w	7306 <ground_calibrate+0x12ae>
    }
}
else if (calib_status == WAITING_CALIB_CONTRAST)
    6326:	f24c 5342 	movw	r3, #50498	; 0xc542
    632a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    632e:	781b      	ldrb	r3, [r3, #0]
    6330:	2b01      	cmp	r3, #1
    6332:	f040 87e8 	bne.w	7306 <ground_calibrate+0x12ae>
{
    if (STICK_PUSHED(from_fbw.channels[RADIO_ROLL])) {
    6336:	f24c 6350 	movw	r3, #50768	; 0xc650
    633a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    633e:	885b      	ldrh	r3, [r3, #2]
    6340:	b21b      	sxth	r3, r3
    6342:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    6346:	db09      	blt.n	635c <ground_calibrate+0x304>
    6348:	f24c 6350 	movw	r3, #50768	; 0xc650
    634c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6350:	885b      	ldrh	r3, [r3, #2]
    6352:	b21b      	sxth	r3, r3
    6354:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    6358:	f340 87d5 	ble.w	7306 <ground_calibrate+0x12ae>
      ir_gain_calib();
    635c:	f00b fd54 	bl	11e08 <ir_gain_calib>
      estimator_rad_of_ir = ir_rad_of_ir;
    6360:	f240 5348 	movw	r3, #1352	; 0x548
    6364:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6368:	681a      	ldr	r2, [r3, #0]
    636a:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    636e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6372:	601a      	str	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    6374:	f24c 5349 	movw	r3, #50505	; 0xc549
    6378:	f2c2 0304 	movt	r3, #8196	; 0x2004
    637c:	781a      	ldrb	r2, [r3, #0]
    637e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6382:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6386:	781b      	ldrb	r3, [r3, #0]
    6388:	b2db      	uxtb	r3, r3
    638a:	429a      	cmp	r2, r3
    638c:	d313      	bcc.n	63b6 <ground_calibrate+0x35e>
    638e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6392:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6396:	781b      	ldrb	r3, [r3, #0]
    6398:	b2db      	uxtb	r3, r3
    639a:	461a      	mov	r2, r3
    639c:	f24c 5349 	movw	r3, #50505	; 0xc549
    63a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63a4:	781b      	ldrb	r3, [r3, #0]
    63a6:	1ad3      	subs	r3, r2, r3
    63a8:	33ff      	adds	r3, #255	; 0xff
    63aa:	2b14      	cmp	r3, #20
    63ac:	bfd4      	ite	le
    63ae:	2300      	movle	r3, #0
    63b0:	2301      	movgt	r3, #1
    63b2:	b2db      	uxtb	r3, r3
    63b4:	e011      	b.n	63da <ground_calibrate+0x382>
    63b6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    63ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63be:	781b      	ldrb	r3, [r3, #0]
    63c0:	b2db      	uxtb	r3, r3
    63c2:	461a      	mov	r2, r3
    63c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    63c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63cc:	781b      	ldrb	r3, [r3, #0]
    63ce:	1ad3      	subs	r3, r2, r3
    63d0:	2b14      	cmp	r3, #20
    63d2:	bfd4      	ite	le
    63d4:	2300      	movle	r3, #0
    63d6:	2301      	movgt	r3, #1
    63d8:	b2db      	uxtb	r3, r3
    63da:	2b00      	cmp	r3, #0
    63dc:	f000 85a6 	beq.w	6f2c <ground_calibrate+0xed4>
    63e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    63e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63e8:	781b      	ldrb	r3, [r3, #0]
    63ea:	461a      	mov	r2, r3
    63ec:	f24c 534c 	movw	r3, #50508	; 0xc54c
    63f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63f4:	2105      	movs	r1, #5
    63f6:	5499      	strb	r1, [r3, r2]
    63f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    63fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6400:	781b      	ldrb	r3, [r3, #0]
    6402:	3301      	adds	r3, #1
    6404:	b2da      	uxtb	r2, r3
    6406:	f24c 5349 	movw	r3, #50505	; 0xc549
    640a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    640e:	701a      	strb	r2, [r3, #0]
    6410:	f24c 5349 	movw	r3, #50505	; 0xc549
    6414:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6418:	781b      	ldrb	r3, [r3, #0]
    641a:	2bff      	cmp	r3, #255	; 0xff
    641c:	d105      	bne.n	642a <ground_calibrate+0x3d2>
    641e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6426:	2200      	movs	r2, #0
    6428:	701a      	strb	r2, [r3, #0]
    642a:	f24c 5349 	movw	r3, #50505	; 0xc549
    642e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6432:	781b      	ldrb	r3, [r3, #0]
    6434:	461a      	mov	r2, r3
    6436:	f24c 534c 	movw	r3, #50508	; 0xc54c
    643a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    643e:	2105      	movs	r1, #5
    6440:	5499      	strb	r1, [r3, r2]
    6442:	f24c 5349 	movw	r3, #50505	; 0xc549
    6446:	f2c2 0304 	movt	r3, #8196	; 0x2004
    644a:	781b      	ldrb	r3, [r3, #0]
    644c:	3301      	adds	r3, #1
    644e:	b2da      	uxtb	r2, r3
    6450:	f24c 5349 	movw	r3, #50505	; 0xc549
    6454:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6458:	701a      	strb	r2, [r3, #0]
    645a:	f24c 5349 	movw	r3, #50505	; 0xc549
    645e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6462:	781b      	ldrb	r3, [r3, #0]
    6464:	2bff      	cmp	r3, #255	; 0xff
    6466:	d105      	bne.n	6474 <ground_calibrate+0x41c>
    6468:	f24c 5349 	movw	r3, #50505	; 0xc549
    646c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6470:	2200      	movs	r2, #0
    6472:	701a      	strb	r2, [r3, #0]
    6474:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6478:	f2c2 0304 	movt	r3, #8196	; 0x2004
    647c:	2205      	movs	r2, #5
    647e:	701a      	strb	r2, [r3, #0]
    6480:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6484:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6488:	2205      	movs	r2, #5
    648a:	701a      	strb	r2, [r3, #0]
    648c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6490:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6494:	781b      	ldrb	r3, [r3, #0]
    6496:	461a      	mov	r2, r3
    6498:	f64c 3340 	movw	r3, #52032	; 0xcb40
    649c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64a0:	7819      	ldrb	r1, [r3, #0]
    64a2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    64a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64aa:	5499      	strb	r1, [r3, r2]
    64ac:	f64c 3340 	movw	r3, #52032	; 0xcb40
    64b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64b4:	781a      	ldrb	r2, [r3, #0]
    64b6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    64ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64be:	781b      	ldrb	r3, [r3, #0]
    64c0:	4413      	add	r3, r2
    64c2:	b2da      	uxtb	r2, r3
    64c4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    64c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64cc:	701a      	strb	r2, [r3, #0]
    64ce:	f24c 634e 	movw	r3, #50766	; 0xc64e
    64d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64d6:	781a      	ldrb	r2, [r3, #0]
    64d8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    64dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64e0:	781b      	ldrb	r3, [r3, #0]
    64e2:	4413      	add	r3, r2
    64e4:	b2da      	uxtb	r2, r3
    64e6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    64ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64ee:	701a      	strb	r2, [r3, #0]
    64f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    64f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64f8:	781b      	ldrb	r3, [r3, #0]
    64fa:	3301      	adds	r3, #1
    64fc:	b2da      	uxtb	r2, r3
    64fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    6502:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6506:	701a      	strb	r2, [r3, #0]
    6508:	f24c 5349 	movw	r3, #50505	; 0xc549
    650c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6510:	781b      	ldrb	r3, [r3, #0]
    6512:	2bff      	cmp	r3, #255	; 0xff
    6514:	d105      	bne.n	6522 <ground_calibrate+0x4ca>
    6516:	f24c 5349 	movw	r3, #50505	; 0xc549
    651a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    651e:	2200      	movs	r2, #0
    6520:	701a      	strb	r2, [r3, #0]
    6522:	f24c 5349 	movw	r3, #50505	; 0xc549
    6526:	f2c2 0304 	movt	r3, #8196	; 0x2004
    652a:	781b      	ldrb	r3, [r3, #0]
    652c:	461a      	mov	r2, r3
    652e:	f64c 3340 	movw	r3, #52032	; 0xcb40
    6532:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6536:	7859      	ldrb	r1, [r3, #1]
    6538:	f24c 534c 	movw	r3, #50508	; 0xc54c
    653c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6540:	5499      	strb	r1, [r3, r2]
    6542:	4bd2      	ldr	r3, [pc, #840]	; (688c <ground_calibrate+0x834>)
    6544:	781a      	ldrb	r2, [r3, #0]
    6546:	f24c 634d 	movw	r3, #50765	; 0xc64d
    654a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    654e:	781b      	ldrb	r3, [r3, #0]
    6550:	4413      	add	r3, r2
    6552:	b2da      	uxtb	r2, r3
    6554:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6558:	f2c2 0304 	movt	r3, #8196	; 0x2004
    655c:	701a      	strb	r2, [r3, #0]
    655e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6562:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6566:	781a      	ldrb	r2, [r3, #0]
    6568:	f24c 634d 	movw	r3, #50765	; 0xc64d
    656c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6570:	781b      	ldrb	r3, [r3, #0]
    6572:	4413      	add	r3, r2
    6574:	b2da      	uxtb	r2, r3
    6576:	f24c 634e 	movw	r3, #50766	; 0xc64e
    657a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    657e:	701a      	strb	r2, [r3, #0]
    6580:	f24c 5349 	movw	r3, #50505	; 0xc549
    6584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6588:	781b      	ldrb	r3, [r3, #0]
    658a:	3301      	adds	r3, #1
    658c:	b2da      	uxtb	r2, r3
    658e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6596:	701a      	strb	r2, [r3, #0]
    6598:	f24c 5349 	movw	r3, #50505	; 0xc549
    659c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65a0:	781b      	ldrb	r3, [r3, #0]
    65a2:	2bff      	cmp	r3, #255	; 0xff
    65a4:	d105      	bne.n	65b2 <ground_calibrate+0x55a>
    65a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    65aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65ae:	2200      	movs	r2, #0
    65b0:	701a      	strb	r2, [r3, #0]
    65b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    65b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65ba:	781b      	ldrb	r3, [r3, #0]
    65bc:	461a      	mov	r2, r3
    65be:	f64c 3340 	movw	r3, #52032	; 0xcb40
    65c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65c6:	7899      	ldrb	r1, [r3, #2]
    65c8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    65cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65d0:	5499      	strb	r1, [r3, r2]
    65d2:	4baf      	ldr	r3, [pc, #700]	; (6890 <ground_calibrate+0x838>)
    65d4:	781a      	ldrb	r2, [r3, #0]
    65d6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    65da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65de:	781b      	ldrb	r3, [r3, #0]
    65e0:	4413      	add	r3, r2
    65e2:	b2da      	uxtb	r2, r3
    65e4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    65e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65ec:	701a      	strb	r2, [r3, #0]
    65ee:	f24c 634e 	movw	r3, #50766	; 0xc64e
    65f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65f6:	781a      	ldrb	r2, [r3, #0]
    65f8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    65fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6600:	781b      	ldrb	r3, [r3, #0]
    6602:	4413      	add	r3, r2
    6604:	b2da      	uxtb	r2, r3
    6606:	f24c 634e 	movw	r3, #50766	; 0xc64e
    660a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    660e:	701a      	strb	r2, [r3, #0]
    6610:	f24c 5349 	movw	r3, #50505	; 0xc549
    6614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6618:	781b      	ldrb	r3, [r3, #0]
    661a:	3301      	adds	r3, #1
    661c:	b2da      	uxtb	r2, r3
    661e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6622:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6626:	701a      	strb	r2, [r3, #0]
    6628:	f24c 5349 	movw	r3, #50505	; 0xc549
    662c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6630:	781b      	ldrb	r3, [r3, #0]
    6632:	2bff      	cmp	r3, #255	; 0xff
    6634:	d105      	bne.n	6642 <ground_calibrate+0x5ea>
    6636:	f24c 5349 	movw	r3, #50505	; 0xc549
    663a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    663e:	2200      	movs	r2, #0
    6640:	701a      	strb	r2, [r3, #0]
    6642:	f24c 5349 	movw	r3, #50505	; 0xc549
    6646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    664a:	781b      	ldrb	r3, [r3, #0]
    664c:	461a      	mov	r2, r3
    664e:	f64c 3340 	movw	r3, #52032	; 0xcb40
    6652:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6656:	78d9      	ldrb	r1, [r3, #3]
    6658:	f24c 534c 	movw	r3, #50508	; 0xc54c
    665c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6660:	5499      	strb	r1, [r3, r2]
    6662:	4b8c      	ldr	r3, [pc, #560]	; (6894 <ground_calibrate+0x83c>)
    6664:	781a      	ldrb	r2, [r3, #0]
    6666:	f24c 634d 	movw	r3, #50765	; 0xc64d
    666a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    666e:	781b      	ldrb	r3, [r3, #0]
    6670:	4413      	add	r3, r2
    6672:	b2da      	uxtb	r2, r3
    6674:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6678:	f2c2 0304 	movt	r3, #8196	; 0x2004
    667c:	701a      	strb	r2, [r3, #0]
    667e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6682:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6686:	781a      	ldrb	r2, [r3, #0]
    6688:	f24c 634d 	movw	r3, #50765	; 0xc64d
    668c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6690:	781b      	ldrb	r3, [r3, #0]
    6692:	4413      	add	r3, r2
    6694:	b2da      	uxtb	r2, r3
    6696:	f24c 634e 	movw	r3, #50766	; 0xc64e
    669a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    669e:	701a      	strb	r2, [r3, #0]
    66a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    66a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66a8:	781b      	ldrb	r3, [r3, #0]
    66aa:	3301      	adds	r3, #1
    66ac:	b2da      	uxtb	r2, r3
    66ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    66b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66b6:	701a      	strb	r2, [r3, #0]
    66b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    66bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66c0:	781b      	ldrb	r3, [r3, #0]
    66c2:	2bff      	cmp	r3, #255	; 0xff
    66c4:	d105      	bne.n	66d2 <ground_calibrate+0x67a>
    66c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    66ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66ce:	2200      	movs	r2, #0
    66d0:	701a      	strb	r2, [r3, #0]
    66d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    66d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66da:	781b      	ldrb	r3, [r3, #0]
    66dc:	461a      	mov	r2, r3
    66de:	f64c 3344 	movw	r3, #52036	; 0xcb44
    66e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66e6:	7819      	ldrb	r1, [r3, #0]
    66e8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    66ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66f0:	5499      	strb	r1, [r3, r2]
    66f2:	f64c 3344 	movw	r3, #52036	; 0xcb44
    66f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66fa:	781a      	ldrb	r2, [r3, #0]
    66fc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6704:	781b      	ldrb	r3, [r3, #0]
    6706:	4413      	add	r3, r2
    6708:	b2da      	uxtb	r2, r3
    670a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    670e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6712:	701a      	strb	r2, [r3, #0]
    6714:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6718:	f2c2 0304 	movt	r3, #8196	; 0x2004
    671c:	781a      	ldrb	r2, [r3, #0]
    671e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6722:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6726:	781b      	ldrb	r3, [r3, #0]
    6728:	4413      	add	r3, r2
    672a:	b2da      	uxtb	r2, r3
    672c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6730:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6734:	701a      	strb	r2, [r3, #0]
    6736:	f24c 5349 	movw	r3, #50505	; 0xc549
    673a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    673e:	781b      	ldrb	r3, [r3, #0]
    6740:	3301      	adds	r3, #1
    6742:	b2da      	uxtb	r2, r3
    6744:	f24c 5349 	movw	r3, #50505	; 0xc549
    6748:	f2c2 0304 	movt	r3, #8196	; 0x2004
    674c:	701a      	strb	r2, [r3, #0]
    674e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6756:	781b      	ldrb	r3, [r3, #0]
    6758:	2bff      	cmp	r3, #255	; 0xff
    675a:	d105      	bne.n	6768 <ground_calibrate+0x710>
    675c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6760:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6764:	2200      	movs	r2, #0
    6766:	701a      	strb	r2, [r3, #0]
    6768:	f24c 5349 	movw	r3, #50505	; 0xc549
    676c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6770:	781b      	ldrb	r3, [r3, #0]
    6772:	461a      	mov	r2, r3
    6774:	f64c 3344 	movw	r3, #52036	; 0xcb44
    6778:	f2c2 0304 	movt	r3, #8196	; 0x2004
    677c:	7859      	ldrb	r1, [r3, #1]
    677e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6786:	5499      	strb	r1, [r3, r2]
    6788:	4b43      	ldr	r3, [pc, #268]	; (6898 <ground_calibrate+0x840>)
    678a:	781a      	ldrb	r2, [r3, #0]
    678c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6790:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6794:	781b      	ldrb	r3, [r3, #0]
    6796:	4413      	add	r3, r2
    6798:	b2da      	uxtb	r2, r3
    679a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    679e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67a2:	701a      	strb	r2, [r3, #0]
    67a4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    67a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67ac:	781a      	ldrb	r2, [r3, #0]
    67ae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    67b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67b6:	781b      	ldrb	r3, [r3, #0]
    67b8:	4413      	add	r3, r2
    67ba:	b2da      	uxtb	r2, r3
    67bc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    67c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67c4:	701a      	strb	r2, [r3, #0]
    67c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    67ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67ce:	781b      	ldrb	r3, [r3, #0]
    67d0:	3301      	adds	r3, #1
    67d2:	b2da      	uxtb	r2, r3
    67d4:	f24c 5349 	movw	r3, #50505	; 0xc549
    67d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67dc:	701a      	strb	r2, [r3, #0]
    67de:	f24c 5349 	movw	r3, #50505	; 0xc549
    67e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67e6:	781b      	ldrb	r3, [r3, #0]
    67e8:	2bff      	cmp	r3, #255	; 0xff
    67ea:	d105      	bne.n	67f8 <ground_calibrate+0x7a0>
    67ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    67f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67f4:	2200      	movs	r2, #0
    67f6:	701a      	strb	r2, [r3, #0]
    67f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    67fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6800:	781b      	ldrb	r3, [r3, #0]
    6802:	461a      	mov	r2, r3
    6804:	f64c 3344 	movw	r3, #52036	; 0xcb44
    6808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    680c:	7899      	ldrb	r1, [r3, #2]
    680e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6816:	5499      	strb	r1, [r3, r2]
    6818:	4b20      	ldr	r3, [pc, #128]	; (689c <ground_calibrate+0x844>)
    681a:	781a      	ldrb	r2, [r3, #0]
    681c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6820:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6824:	781b      	ldrb	r3, [r3, #0]
    6826:	4413      	add	r3, r2
    6828:	b2da      	uxtb	r2, r3
    682a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    682e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6832:	701a      	strb	r2, [r3, #0]
    6834:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    683c:	781a      	ldrb	r2, [r3, #0]
    683e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6842:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6846:	781b      	ldrb	r3, [r3, #0]
    6848:	4413      	add	r3, r2
    684a:	b2da      	uxtb	r2, r3
    684c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6850:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6854:	701a      	strb	r2, [r3, #0]
    6856:	f24c 5349 	movw	r3, #50505	; 0xc549
    685a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    685e:	781b      	ldrb	r3, [r3, #0]
    6860:	3301      	adds	r3, #1
    6862:	b2da      	uxtb	r2, r3
    6864:	f24c 5349 	movw	r3, #50505	; 0xc549
    6868:	f2c2 0304 	movt	r3, #8196	; 0x2004
    686c:	701a      	strb	r2, [r3, #0]
    686e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6876:	781b      	ldrb	r3, [r3, #0]
    6878:	2bff      	cmp	r3, #255	; 0xff
    687a:	d111      	bne.n	68a0 <ground_calibrate+0x848>
    687c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6884:	2200      	movs	r2, #0
    6886:	701a      	strb	r2, [r3, #0]
    6888:	e00a      	b.n	68a0 <ground_calibrate+0x848>
    688a:	bf00      	nop
    688c:	2004cb41 	.word	0x2004cb41
    6890:	2004cb42 	.word	0x2004cb42
    6894:	2004cb43 	.word	0x2004cb43
    6898:	2004cb45 	.word	0x2004cb45
    689c:	2004cb46 	.word	0x2004cb46
    68a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    68a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68a8:	781b      	ldrb	r3, [r3, #0]
    68aa:	461a      	mov	r2, r3
    68ac:	f64c 3344 	movw	r3, #52036	; 0xcb44
    68b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68b4:	78d9      	ldrb	r1, [r3, #3]
    68b6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    68ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68be:	5499      	strb	r1, [r3, r2]
    68c0:	4bd3      	ldr	r3, [pc, #844]	; (6c10 <ground_calibrate+0xbb8>)
    68c2:	781a      	ldrb	r2, [r3, #0]
    68c4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    68c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68cc:	781b      	ldrb	r3, [r3, #0]
    68ce:	4413      	add	r3, r2
    68d0:	b2da      	uxtb	r2, r3
    68d2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    68d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68da:	701a      	strb	r2, [r3, #0]
    68dc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    68e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68e4:	781a      	ldrb	r2, [r3, #0]
    68e6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    68ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68ee:	781b      	ldrb	r3, [r3, #0]
    68f0:	4413      	add	r3, r2
    68f2:	b2da      	uxtb	r2, r3
    68f4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    68f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68fc:	701a      	strb	r2, [r3, #0]
    68fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    6902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6906:	781b      	ldrb	r3, [r3, #0]
    6908:	3301      	adds	r3, #1
    690a:	b2da      	uxtb	r2, r3
    690c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6910:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6914:	701a      	strb	r2, [r3, #0]
    6916:	f24c 5349 	movw	r3, #50505	; 0xc549
    691a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    691e:	781b      	ldrb	r3, [r3, #0]
    6920:	2bff      	cmp	r3, #255	; 0xff
    6922:	d105      	bne.n	6930 <ground_calibrate+0x8d8>
    6924:	f24c 5349 	movw	r3, #50505	; 0xc549
    6928:	f2c2 0304 	movt	r3, #8196	; 0x2004
    692c:	2200      	movs	r2, #0
    692e:	701a      	strb	r2, [r3, #0]
    6930:	f24c 5349 	movw	r3, #50505	; 0xc549
    6934:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6938:	781b      	ldrb	r3, [r3, #0]
    693a:	461a      	mov	r2, r3
    693c:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    6940:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6944:	7819      	ldrb	r1, [r3, #0]
    6946:	f24c 534c 	movw	r3, #50508	; 0xc54c
    694a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    694e:	5499      	strb	r1, [r3, r2]
    6950:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    6954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6958:	781a      	ldrb	r2, [r3, #0]
    695a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    695e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6962:	781b      	ldrb	r3, [r3, #0]
    6964:	4413      	add	r3, r2
    6966:	b2da      	uxtb	r2, r3
    6968:	f24c 634d 	movw	r3, #50765	; 0xc64d
    696c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6970:	701a      	strb	r2, [r3, #0]
    6972:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6976:	f2c2 0304 	movt	r3, #8196	; 0x2004
    697a:	781a      	ldrb	r2, [r3, #0]
    697c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6980:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6984:	781b      	ldrb	r3, [r3, #0]
    6986:	4413      	add	r3, r2
    6988:	b2da      	uxtb	r2, r3
    698a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    698e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6992:	701a      	strb	r2, [r3, #0]
    6994:	f24c 5349 	movw	r3, #50505	; 0xc549
    6998:	f2c2 0304 	movt	r3, #8196	; 0x2004
    699c:	781b      	ldrb	r3, [r3, #0]
    699e:	3301      	adds	r3, #1
    69a0:	b2da      	uxtb	r2, r3
    69a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    69a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69aa:	701a      	strb	r2, [r3, #0]
    69ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    69b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69b4:	781b      	ldrb	r3, [r3, #0]
    69b6:	2bff      	cmp	r3, #255	; 0xff
    69b8:	d105      	bne.n	69c6 <ground_calibrate+0x96e>
    69ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    69be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69c2:	2200      	movs	r2, #0
    69c4:	701a      	strb	r2, [r3, #0]
    69c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    69ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69ce:	781b      	ldrb	r3, [r3, #0]
    69d0:	461a      	mov	r2, r3
    69d2:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    69d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69da:	7859      	ldrb	r1, [r3, #1]
    69dc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    69e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69e4:	5499      	strb	r1, [r3, r2]
    69e6:	4b8b      	ldr	r3, [pc, #556]	; (6c14 <ground_calibrate+0xbbc>)
    69e8:	781a      	ldrb	r2, [r3, #0]
    69ea:	f24c 634d 	movw	r3, #50765	; 0xc64d
    69ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69f2:	781b      	ldrb	r3, [r3, #0]
    69f4:	4413      	add	r3, r2
    69f6:	b2da      	uxtb	r2, r3
    69f8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    69fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a00:	701a      	strb	r2, [r3, #0]
    6a02:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6a06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a0a:	781a      	ldrb	r2, [r3, #0]
    6a0c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6a10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a14:	781b      	ldrb	r3, [r3, #0]
    6a16:	4413      	add	r3, r2
    6a18:	b2da      	uxtb	r2, r3
    6a1a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6a1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a22:	701a      	strb	r2, [r3, #0]
    6a24:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a2c:	781b      	ldrb	r3, [r3, #0]
    6a2e:	3301      	adds	r3, #1
    6a30:	b2da      	uxtb	r2, r3
    6a32:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a3a:	701a      	strb	r2, [r3, #0]
    6a3c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a44:	781b      	ldrb	r3, [r3, #0]
    6a46:	2bff      	cmp	r3, #255	; 0xff
    6a48:	d105      	bne.n	6a56 <ground_calibrate+0x9fe>
    6a4a:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a52:	2200      	movs	r2, #0
    6a54:	701a      	strb	r2, [r3, #0]
    6a56:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a5e:	781b      	ldrb	r3, [r3, #0]
    6a60:	461a      	mov	r2, r3
    6a62:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    6a66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a6a:	7899      	ldrb	r1, [r3, #2]
    6a6c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6a70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a74:	5499      	strb	r1, [r3, r2]
    6a76:	4b68      	ldr	r3, [pc, #416]	; (6c18 <ground_calibrate+0xbc0>)
    6a78:	781a      	ldrb	r2, [r3, #0]
    6a7a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6a7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a82:	781b      	ldrb	r3, [r3, #0]
    6a84:	4413      	add	r3, r2
    6a86:	b2da      	uxtb	r2, r3
    6a88:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6a8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a90:	701a      	strb	r2, [r3, #0]
    6a92:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6a96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a9a:	781a      	ldrb	r2, [r3, #0]
    6a9c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6aa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aa4:	781b      	ldrb	r3, [r3, #0]
    6aa6:	4413      	add	r3, r2
    6aa8:	b2da      	uxtb	r2, r3
    6aaa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6aae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ab2:	701a      	strb	r2, [r3, #0]
    6ab4:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ab8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6abc:	781b      	ldrb	r3, [r3, #0]
    6abe:	3301      	adds	r3, #1
    6ac0:	b2da      	uxtb	r2, r3
    6ac2:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ac6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aca:	701a      	strb	r2, [r3, #0]
    6acc:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ad0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ad4:	781b      	ldrb	r3, [r3, #0]
    6ad6:	2bff      	cmp	r3, #255	; 0xff
    6ad8:	d105      	bne.n	6ae6 <ground_calibrate+0xa8e>
    6ada:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ade:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ae2:	2200      	movs	r2, #0
    6ae4:	701a      	strb	r2, [r3, #0]
    6ae6:	f24c 5349 	movw	r3, #50505	; 0xc549
    6aea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aee:	781b      	ldrb	r3, [r3, #0]
    6af0:	461a      	mov	r2, r3
    6af2:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    6af6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6afa:	78d9      	ldrb	r1, [r3, #3]
    6afc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6b00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b04:	5499      	strb	r1, [r3, r2]
    6b06:	4b45      	ldr	r3, [pc, #276]	; (6c1c <ground_calibrate+0xbc4>)
    6b08:	781a      	ldrb	r2, [r3, #0]
    6b0a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6b0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b12:	781b      	ldrb	r3, [r3, #0]
    6b14:	4413      	add	r3, r2
    6b16:	b2da      	uxtb	r2, r3
    6b18:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6b1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b20:	701a      	strb	r2, [r3, #0]
    6b22:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6b26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b2a:	781a      	ldrb	r2, [r3, #0]
    6b2c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6b30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b34:	781b      	ldrb	r3, [r3, #0]
    6b36:	4413      	add	r3, r2
    6b38:	b2da      	uxtb	r2, r3
    6b3a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6b3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b42:	701a      	strb	r2, [r3, #0]
    6b44:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b4c:	781b      	ldrb	r3, [r3, #0]
    6b4e:	3301      	adds	r3, #1
    6b50:	b2da      	uxtb	r2, r3
    6b52:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b5a:	701a      	strb	r2, [r3, #0]
    6b5c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b64:	781b      	ldrb	r3, [r3, #0]
    6b66:	2bff      	cmp	r3, #255	; 0xff
    6b68:	d105      	bne.n	6b76 <ground_calibrate+0xb1e>
    6b6a:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b72:	2200      	movs	r2, #0
    6b74:	701a      	strb	r2, [r3, #0]
    6b76:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b7e:	781b      	ldrb	r3, [r3, #0]
    6b80:	461a      	mov	r2, r3
    6b82:	f240 5342 	movw	r3, #1346	; 0x542
    6b86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b8a:	7819      	ldrb	r1, [r3, #0]
    6b8c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6b90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b94:	5499      	strb	r1, [r3, r2]
    6b96:	f240 5342 	movw	r3, #1346	; 0x542
    6b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b9e:	781a      	ldrb	r2, [r3, #0]
    6ba0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6ba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ba8:	781b      	ldrb	r3, [r3, #0]
    6baa:	4413      	add	r3, r2
    6bac:	b2da      	uxtb	r2, r3
    6bae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6bb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bb6:	701a      	strb	r2, [r3, #0]
    6bb8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6bbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bc0:	781a      	ldrb	r2, [r3, #0]
    6bc2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6bc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bca:	781b      	ldrb	r3, [r3, #0]
    6bcc:	4413      	add	r3, r2
    6bce:	b2da      	uxtb	r2, r3
    6bd0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6bd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bd8:	701a      	strb	r2, [r3, #0]
    6bda:	f24c 5349 	movw	r3, #50505	; 0xc549
    6bde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6be2:	781b      	ldrb	r3, [r3, #0]
    6be4:	3301      	adds	r3, #1
    6be6:	b2da      	uxtb	r2, r3
    6be8:	f24c 5349 	movw	r3, #50505	; 0xc549
    6bec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bf0:	701a      	strb	r2, [r3, #0]
    6bf2:	f24c 5349 	movw	r3, #50505	; 0xc549
    6bf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bfa:	781b      	ldrb	r3, [r3, #0]
    6bfc:	2bff      	cmp	r3, #255	; 0xff
    6bfe:	d10f      	bne.n	6c20 <ground_calibrate+0xbc8>
    6c00:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c08:	2200      	movs	r2, #0
    6c0a:	701a      	strb	r2, [r3, #0]
    6c0c:	e008      	b.n	6c20 <ground_calibrate+0xbc8>
    6c0e:	bf00      	nop
    6c10:	2004cb47 	.word	0x2004cb47
    6c14:	2004cb3d 	.word	0x2004cb3d
    6c18:	2004cb3e 	.word	0x2004cb3e
    6c1c:	2004cb3f 	.word	0x2004cb3f
    6c20:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c28:	781b      	ldrb	r3, [r3, #0]
    6c2a:	461a      	mov	r2, r3
    6c2c:	f240 5342 	movw	r3, #1346	; 0x542
    6c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c34:	7859      	ldrb	r1, [r3, #1]
    6c36:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6c3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c3e:	5499      	strb	r1, [r3, r2]
    6c40:	4bd4      	ldr	r3, [pc, #848]	; (6f94 <ground_calibrate+0xf3c>)
    6c42:	781a      	ldrb	r2, [r3, #0]
    6c44:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6c48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c4c:	781b      	ldrb	r3, [r3, #0]
    6c4e:	4413      	add	r3, r2
    6c50:	b2da      	uxtb	r2, r3
    6c52:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6c56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c5a:	701a      	strb	r2, [r3, #0]
    6c5c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6c60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c64:	781a      	ldrb	r2, [r3, #0]
    6c66:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6c6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c6e:	781b      	ldrb	r3, [r3, #0]
    6c70:	4413      	add	r3, r2
    6c72:	b2da      	uxtb	r2, r3
    6c74:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6c78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c7c:	701a      	strb	r2, [r3, #0]
    6c7e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c86:	781b      	ldrb	r3, [r3, #0]
    6c88:	3301      	adds	r3, #1
    6c8a:	b2da      	uxtb	r2, r3
    6c8c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c94:	701a      	strb	r2, [r3, #0]
    6c96:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c9e:	781b      	ldrb	r3, [r3, #0]
    6ca0:	2bff      	cmp	r3, #255	; 0xff
    6ca2:	d105      	bne.n	6cb0 <ground_calibrate+0xc58>
    6ca4:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ca8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cac:	2200      	movs	r2, #0
    6cae:	701a      	strb	r2, [r3, #0]
    6cb0:	f24c 5349 	movw	r3, #50505	; 0xc549
    6cb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cb8:	781b      	ldrb	r3, [r3, #0]
    6cba:	461a      	mov	r2, r3
    6cbc:	f240 5344 	movw	r3, #1348	; 0x544
    6cc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cc4:	7819      	ldrb	r1, [r3, #0]
    6cc6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6cca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cce:	5499      	strb	r1, [r3, r2]
    6cd0:	f240 5344 	movw	r3, #1348	; 0x544
    6cd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cd8:	781a      	ldrb	r2, [r3, #0]
    6cda:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6cde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ce2:	781b      	ldrb	r3, [r3, #0]
    6ce4:	4413      	add	r3, r2
    6ce6:	b2da      	uxtb	r2, r3
    6ce8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6cec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cf0:	701a      	strb	r2, [r3, #0]
    6cf2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6cf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cfa:	781a      	ldrb	r2, [r3, #0]
    6cfc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6d00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d04:	781b      	ldrb	r3, [r3, #0]
    6d06:	4413      	add	r3, r2
    6d08:	b2da      	uxtb	r2, r3
    6d0a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6d0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d12:	701a      	strb	r2, [r3, #0]
    6d14:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d1c:	781b      	ldrb	r3, [r3, #0]
    6d1e:	3301      	adds	r3, #1
    6d20:	b2da      	uxtb	r2, r3
    6d22:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d2a:	701a      	strb	r2, [r3, #0]
    6d2c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d34:	781b      	ldrb	r3, [r3, #0]
    6d36:	2bff      	cmp	r3, #255	; 0xff
    6d38:	d105      	bne.n	6d46 <ground_calibrate+0xcee>
    6d3a:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d42:	2200      	movs	r2, #0
    6d44:	701a      	strb	r2, [r3, #0]
    6d46:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d4e:	781b      	ldrb	r3, [r3, #0]
    6d50:	461a      	mov	r2, r3
    6d52:	f240 5344 	movw	r3, #1348	; 0x544
    6d56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d5a:	7859      	ldrb	r1, [r3, #1]
    6d5c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6d60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d64:	5499      	strb	r1, [r3, r2]
    6d66:	4b8c      	ldr	r3, [pc, #560]	; (6f98 <ground_calibrate+0xf40>)
    6d68:	781a      	ldrb	r2, [r3, #0]
    6d6a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6d6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d72:	781b      	ldrb	r3, [r3, #0]
    6d74:	4413      	add	r3, r2
    6d76:	b2da      	uxtb	r2, r3
    6d78:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6d7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d80:	701a      	strb	r2, [r3, #0]
    6d82:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6d86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d8a:	781a      	ldrb	r2, [r3, #0]
    6d8c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6d90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d94:	781b      	ldrb	r3, [r3, #0]
    6d96:	4413      	add	r3, r2
    6d98:	b2da      	uxtb	r2, r3
    6d9a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6d9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6da2:	701a      	strb	r2, [r3, #0]
    6da4:	f24c 5349 	movw	r3, #50505	; 0xc549
    6da8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dac:	781b      	ldrb	r3, [r3, #0]
    6dae:	3301      	adds	r3, #1
    6db0:	b2da      	uxtb	r2, r3
    6db2:	f24c 5349 	movw	r3, #50505	; 0xc549
    6db6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dba:	701a      	strb	r2, [r3, #0]
    6dbc:	f24c 5349 	movw	r3, #50505	; 0xc549
    6dc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dc4:	781b      	ldrb	r3, [r3, #0]
    6dc6:	2bff      	cmp	r3, #255	; 0xff
    6dc8:	d105      	bne.n	6dd6 <ground_calibrate+0xd7e>
    6dca:	f24c 5349 	movw	r3, #50505	; 0xc549
    6dce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dd2:	2200      	movs	r2, #0
    6dd4:	701a      	strb	r2, [r3, #0]
    6dd6:	f24c 5349 	movw	r3, #50505	; 0xc549
    6dda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dde:	781b      	ldrb	r3, [r3, #0]
    6de0:	461a      	mov	r2, r3
    6de2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6de6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dea:	7819      	ldrb	r1, [r3, #0]
    6dec:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6df0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6df4:	5499      	strb	r1, [r3, r2]
    6df6:	f24c 5349 	movw	r3, #50505	; 0xc549
    6dfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dfe:	781b      	ldrb	r3, [r3, #0]
    6e00:	3301      	adds	r3, #1
    6e02:	b2da      	uxtb	r2, r3
    6e04:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e0c:	701a      	strb	r2, [r3, #0]
    6e0e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e16:	781b      	ldrb	r3, [r3, #0]
    6e18:	2bff      	cmp	r3, #255	; 0xff
    6e1a:	d105      	bne.n	6e28 <ground_calibrate+0xdd0>
    6e1c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e24:	2200      	movs	r2, #0
    6e26:	701a      	strb	r2, [r3, #0]
    6e28:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e30:	781b      	ldrb	r3, [r3, #0]
    6e32:	461a      	mov	r2, r3
    6e34:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6e38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e3c:	7819      	ldrb	r1, [r3, #0]
    6e3e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6e42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e46:	5499      	strb	r1, [r3, r2]
    6e48:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e50:	781b      	ldrb	r3, [r3, #0]
    6e52:	3301      	adds	r3, #1
    6e54:	b2da      	uxtb	r2, r3
    6e56:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e5e:	701a      	strb	r2, [r3, #0]
    6e60:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e68:	781b      	ldrb	r3, [r3, #0]
    6e6a:	2bff      	cmp	r3, #255	; 0xff
    6e6c:	d105      	bne.n	6e7a <ground_calibrate+0xe22>
    6e6e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e76:	2200      	movs	r2, #0
    6e78:	701a      	strb	r2, [r3, #0]
    6e7a:	f242 0339 	movw	r3, #8249	; 0x2039
    6e7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e82:	781b      	ldrb	r3, [r3, #0]
    6e84:	b2db      	uxtb	r3, r3
    6e86:	f003 0310 	and.w	r3, r3, #16
    6e8a:	2b00      	cmp	r3, #0
    6e8c:	d15a      	bne.n	6f44 <ground_calibrate+0xeec>
    6e8e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6e92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e96:	781b      	ldrb	r3, [r3, #0]
    6e98:	b2db      	uxtb	r3, r3
    6e9a:	461a      	mov	r2, r3
    6e9c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6ea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ea4:	5c9a      	ldrb	r2, [r3, r2]
    6ea6:	f24c 634b 	movw	r3, #50763	; 0xc64b
    6eaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eae:	701a      	strb	r2, [r3, #0]
    6eb0:	f24c 634c 	movw	r3, #50764	; 0xc64c
    6eb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eb8:	2200      	movs	r2, #0
    6eba:	701a      	strb	r2, [r3, #0]
    6ebc:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6ec0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ec4:	781b      	ldrb	r3, [r3, #0]
    6ec6:	b2db      	uxtb	r3, r3
    6ec8:	3301      	adds	r3, #1
    6eca:	b2da      	uxtb	r2, r3
    6ecc:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6ed0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ed4:	701a      	strb	r2, [r3, #0]
    6ed6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6eda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ede:	781b      	ldrb	r3, [r3, #0]
    6ee0:	b2db      	uxtb	r3, r3
    6ee2:	2bff      	cmp	r3, #255	; 0xff
    6ee4:	d105      	bne.n	6ef2 <ground_calibrate+0xe9a>
    6ee6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6eea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eee:	2200      	movs	r2, #0
    6ef0:	701a      	strb	r2, [r3, #0]
    6ef2:	f242 0338 	movw	r3, #8248	; 0x2038
    6ef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6efa:	f242 0238 	movw	r2, #8248	; 0x2038
    6efe:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6f02:	7812      	ldrb	r2, [r2, #0]
    6f04:	b2d2      	uxtb	r2, r2
    6f06:	f042 0201 	orr.w	r2, r2, #1
    6f0a:	b2d2      	uxtb	r2, r2
    6f0c:	701a      	strb	r2, [r3, #0]
    6f0e:	f242 0339 	movw	r3, #8249	; 0x2039
    6f12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f16:	f242 0239 	movw	r2, #8249	; 0x2039
    6f1a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6f1e:	7812      	ldrb	r2, [r2, #0]
    6f20:	b2d2      	uxtb	r2, r2
    6f22:	f042 0210 	orr.w	r2, r2, #16
    6f26:	b2d2      	uxtb	r2, r2
    6f28:	701a      	strb	r2, [r3, #0]
    6f2a:	e00b      	b.n	6f44 <ground_calibrate+0xeec>
    6f2c:	f24c 5348 	movw	r3, #50504	; 0xc548
    6f30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f34:	781b      	ldrb	r3, [r3, #0]
    6f36:	3301      	adds	r3, #1
    6f38:	b2da      	uxtb	r2, r3
    6f3a:	f24c 5348 	movw	r3, #50504	; 0xc548
    6f3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f42:	701a      	strb	r2, [r3, #0]
      calib_status = CALIB_DONE;
    6f44:	f24c 5342 	movw	r3, #50498	; 0xc542
    6f48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f4c:	2202      	movs	r2, #2
    6f4e:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_CONTRAST(&ir_contrast);
    6f50:	f24c 5349 	movw	r3, #50505	; 0xc549
    6f54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f58:	781a      	ldrb	r2, [r3, #0]
    6f5a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6f5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f62:	781b      	ldrb	r3, [r3, #0]
    6f64:	b2db      	uxtb	r3, r3
    6f66:	429a      	cmp	r2, r3
    6f68:	d318      	bcc.n	6f9c <ground_calibrate+0xf44>
    6f6a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6f6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f72:	781b      	ldrb	r3, [r3, #0]
    6f74:	b2db      	uxtb	r3, r3
    6f76:	461a      	mov	r2, r3
    6f78:	f24c 5349 	movw	r3, #50505	; 0xc549
    6f7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f80:	781b      	ldrb	r3, [r3, #0]
    6f82:	1ad3      	subs	r3, r2, r3
    6f84:	33ff      	adds	r3, #255	; 0xff
    6f86:	2b06      	cmp	r3, #6
    6f88:	bfd4      	ite	le
    6f8a:	2300      	movle	r3, #0
    6f8c:	2301      	movgt	r3, #1
    6f8e:	b2db      	uxtb	r3, r3
    6f90:	e016      	b.n	6fc0 <ground_calibrate+0xf68>
    6f92:	bf00      	nop
    6f94:	20000543 	.word	0x20000543
    6f98:	20000545 	.word	0x20000545
    6f9c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6fa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fa4:	781b      	ldrb	r3, [r3, #0]
    6fa6:	b2db      	uxtb	r3, r3
    6fa8:	461a      	mov	r2, r3
    6faa:	f24c 5349 	movw	r3, #50505	; 0xc549
    6fae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fb2:	781b      	ldrb	r3, [r3, #0]
    6fb4:	1ad3      	subs	r3, r2, r3
    6fb6:	2b06      	cmp	r3, #6
    6fb8:	bfd4      	ite	le
    6fba:	2300      	movle	r3, #0
    6fbc:	2301      	movgt	r3, #1
    6fbe:	b2db      	uxtb	r3, r3
    6fc0:	2b00      	cmp	r3, #0
    6fc2:	f000 8194 	beq.w	72ee <ground_calibrate+0x1296>
    6fc6:	f24c 5349 	movw	r3, #50505	; 0xc549
    6fca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fce:	781b      	ldrb	r3, [r3, #0]
    6fd0:	461a      	mov	r2, r3
    6fd2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6fd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fda:	2105      	movs	r1, #5
    6fdc:	5499      	strb	r1, [r3, r2]
    6fde:	f24c 5349 	movw	r3, #50505	; 0xc549
    6fe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fe6:	781b      	ldrb	r3, [r3, #0]
    6fe8:	3301      	adds	r3, #1
    6fea:	b2da      	uxtb	r2, r3
    6fec:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ff4:	701a      	strb	r2, [r3, #0]
    6ff6:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ffa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ffe:	781b      	ldrb	r3, [r3, #0]
    7000:	2bff      	cmp	r3, #255	; 0xff
    7002:	d105      	bne.n	7010 <ground_calibrate+0xfb8>
    7004:	f24c 5349 	movw	r3, #50505	; 0xc549
    7008:	f2c2 0304 	movt	r3, #8196	; 0x2004
    700c:	2200      	movs	r2, #0
    700e:	701a      	strb	r2, [r3, #0]
    7010:	f24c 5349 	movw	r3, #50505	; 0xc549
    7014:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7018:	781b      	ldrb	r3, [r3, #0]
    701a:	461a      	mov	r2, r3
    701c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7020:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7024:	2103      	movs	r1, #3
    7026:	5499      	strb	r1, [r3, r2]
    7028:	f24c 5349 	movw	r3, #50505	; 0xc549
    702c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7030:	781b      	ldrb	r3, [r3, #0]
    7032:	3301      	adds	r3, #1
    7034:	b2da      	uxtb	r2, r3
    7036:	f24c 5349 	movw	r3, #50505	; 0xc549
    703a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    703e:	701a      	strb	r2, [r3, #0]
    7040:	f24c 5349 	movw	r3, #50505	; 0xc549
    7044:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7048:	781b      	ldrb	r3, [r3, #0]
    704a:	2bff      	cmp	r3, #255	; 0xff
    704c:	d105      	bne.n	705a <ground_calibrate+0x1002>
    704e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7052:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7056:	2200      	movs	r2, #0
    7058:	701a      	strb	r2, [r3, #0]
    705a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    705e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7062:	2203      	movs	r2, #3
    7064:	701a      	strb	r2, [r3, #0]
    7066:	f24c 634e 	movw	r3, #50766	; 0xc64e
    706a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    706e:	2203      	movs	r2, #3
    7070:	701a      	strb	r2, [r3, #0]
    7072:	f24c 5349 	movw	r3, #50505	; 0xc549
    7076:	f2c2 0304 	movt	r3, #8196	; 0x2004
    707a:	781b      	ldrb	r3, [r3, #0]
    707c:	461a      	mov	r2, r3
    707e:	f240 5340 	movw	r3, #1344	; 0x540
    7082:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7086:	7819      	ldrb	r1, [r3, #0]
    7088:	f24c 534c 	movw	r3, #50508	; 0xc54c
    708c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7090:	5499      	strb	r1, [r3, r2]
    7092:	f240 5340 	movw	r3, #1344	; 0x540
    7096:	f2c2 0300 	movt	r3, #8192	; 0x2000
    709a:	781a      	ldrb	r2, [r3, #0]
    709c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    70a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70a4:	781b      	ldrb	r3, [r3, #0]
    70a6:	4413      	add	r3, r2
    70a8:	b2da      	uxtb	r2, r3
    70aa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    70ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70b2:	701a      	strb	r2, [r3, #0]
    70b4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    70b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70bc:	781a      	ldrb	r2, [r3, #0]
    70be:	f24c 634d 	movw	r3, #50765	; 0xc64d
    70c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70c6:	781b      	ldrb	r3, [r3, #0]
    70c8:	4413      	add	r3, r2
    70ca:	b2da      	uxtb	r2, r3
    70cc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    70d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70d4:	701a      	strb	r2, [r3, #0]
    70d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    70da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70de:	781b      	ldrb	r3, [r3, #0]
    70e0:	3301      	adds	r3, #1
    70e2:	b2da      	uxtb	r2, r3
    70e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    70e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70ec:	701a      	strb	r2, [r3, #0]
    70ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    70f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70f6:	781b      	ldrb	r3, [r3, #0]
    70f8:	2bff      	cmp	r3, #255	; 0xff
    70fa:	d105      	bne.n	7108 <ground_calibrate+0x10b0>
    70fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    7100:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7104:	2200      	movs	r2, #0
    7106:	701a      	strb	r2, [r3, #0]
    7108:	f24c 5349 	movw	r3, #50505	; 0xc549
    710c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7110:	781b      	ldrb	r3, [r3, #0]
    7112:	461a      	mov	r2, r3
    7114:	f240 5340 	movw	r3, #1344	; 0x540
    7118:	f2c2 0300 	movt	r3, #8192	; 0x2000
    711c:	7859      	ldrb	r1, [r3, #1]
    711e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7122:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7126:	5499      	strb	r1, [r3, r2]
    7128:	4b77      	ldr	r3, [pc, #476]	; (7308 <ground_calibrate+0x12b0>)
    712a:	781a      	ldrb	r2, [r3, #0]
    712c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7130:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7134:	781b      	ldrb	r3, [r3, #0]
    7136:	4413      	add	r3, r2
    7138:	b2da      	uxtb	r2, r3
    713a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    713e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7142:	701a      	strb	r2, [r3, #0]
    7144:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7148:	f2c2 0304 	movt	r3, #8196	; 0x2004
    714c:	781a      	ldrb	r2, [r3, #0]
    714e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7152:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7156:	781b      	ldrb	r3, [r3, #0]
    7158:	4413      	add	r3, r2
    715a:	b2da      	uxtb	r2, r3
    715c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7164:	701a      	strb	r2, [r3, #0]
    7166:	f24c 5349 	movw	r3, #50505	; 0xc549
    716a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    716e:	781b      	ldrb	r3, [r3, #0]
    7170:	3301      	adds	r3, #1
    7172:	b2da      	uxtb	r2, r3
    7174:	f24c 5349 	movw	r3, #50505	; 0xc549
    7178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    717c:	701a      	strb	r2, [r3, #0]
    717e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7182:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7186:	781b      	ldrb	r3, [r3, #0]
    7188:	2bff      	cmp	r3, #255	; 0xff
    718a:	d105      	bne.n	7198 <ground_calibrate+0x1140>
    718c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7190:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7194:	2200      	movs	r2, #0
    7196:	701a      	strb	r2, [r3, #0]
    7198:	f24c 5349 	movw	r3, #50505	; 0xc549
    719c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71a0:	781b      	ldrb	r3, [r3, #0]
    71a2:	461a      	mov	r2, r3
    71a4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    71a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71ac:	7819      	ldrb	r1, [r3, #0]
    71ae:	f24c 534c 	movw	r3, #50508	; 0xc54c
    71b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71b6:	5499      	strb	r1, [r3, r2]
    71b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    71bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71c0:	781b      	ldrb	r3, [r3, #0]
    71c2:	3301      	adds	r3, #1
    71c4:	b2da      	uxtb	r2, r3
    71c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    71ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71ce:	701a      	strb	r2, [r3, #0]
    71d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    71d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71d8:	781b      	ldrb	r3, [r3, #0]
    71da:	2bff      	cmp	r3, #255	; 0xff
    71dc:	d105      	bne.n	71ea <ground_calibrate+0x1192>
    71de:	f24c 5349 	movw	r3, #50505	; 0xc549
    71e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71e6:	2200      	movs	r2, #0
    71e8:	701a      	strb	r2, [r3, #0]
    71ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    71ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71f2:	781b      	ldrb	r3, [r3, #0]
    71f4:	461a      	mov	r2, r3
    71f6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    71fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71fe:	7819      	ldrb	r1, [r3, #0]
    7200:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7208:	5499      	strb	r1, [r3, r2]
    720a:	f24c 5349 	movw	r3, #50505	; 0xc549
    720e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7212:	781b      	ldrb	r3, [r3, #0]
    7214:	3301      	adds	r3, #1
    7216:	b2da      	uxtb	r2, r3
    7218:	f24c 5349 	movw	r3, #50505	; 0xc549
    721c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7220:	701a      	strb	r2, [r3, #0]
    7222:	f24c 5349 	movw	r3, #50505	; 0xc549
    7226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    722a:	781b      	ldrb	r3, [r3, #0]
    722c:	2bff      	cmp	r3, #255	; 0xff
    722e:	d105      	bne.n	723c <ground_calibrate+0x11e4>
    7230:	f24c 5349 	movw	r3, #50505	; 0xc549
    7234:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7238:	2200      	movs	r2, #0
    723a:	701a      	strb	r2, [r3, #0]
    723c:	f242 0339 	movw	r3, #8249	; 0x2039
    7240:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7244:	781b      	ldrb	r3, [r3, #0]
    7246:	b2db      	uxtb	r3, r3
    7248:	f003 0310 	and.w	r3, r3, #16
    724c:	2b00      	cmp	r3, #0
    724e:	d15a      	bne.n	7306 <ground_calibrate+0x12ae>
    7250:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7254:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7258:	781b      	ldrb	r3, [r3, #0]
    725a:	b2db      	uxtb	r3, r3
    725c:	461a      	mov	r2, r3
    725e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7262:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7266:	5c9a      	ldrb	r2, [r3, r2]
    7268:	f24c 634b 	movw	r3, #50763	; 0xc64b
    726c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7270:	701a      	strb	r2, [r3, #0]
    7272:	f24c 634c 	movw	r3, #50764	; 0xc64c
    7276:	f2c2 0304 	movt	r3, #8196	; 0x2004
    727a:	2200      	movs	r2, #0
    727c:	701a      	strb	r2, [r3, #0]
    727e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7282:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7286:	781b      	ldrb	r3, [r3, #0]
    7288:	b2db      	uxtb	r3, r3
    728a:	3301      	adds	r3, #1
    728c:	b2da      	uxtb	r2, r3
    728e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7292:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7296:	701a      	strb	r2, [r3, #0]
    7298:	f24c 534a 	movw	r3, #50506	; 0xc54a
    729c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72a0:	781b      	ldrb	r3, [r3, #0]
    72a2:	b2db      	uxtb	r3, r3
    72a4:	2bff      	cmp	r3, #255	; 0xff
    72a6:	d105      	bne.n	72b4 <ground_calibrate+0x125c>
    72a8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    72ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72b0:	2200      	movs	r2, #0
    72b2:	701a      	strb	r2, [r3, #0]
    72b4:	f242 0338 	movw	r3, #8248	; 0x2038
    72b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72bc:	f242 0238 	movw	r2, #8248	; 0x2038
    72c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    72c4:	7812      	ldrb	r2, [r2, #0]
    72c6:	b2d2      	uxtb	r2, r2
    72c8:	f042 0201 	orr.w	r2, r2, #1
    72cc:	b2d2      	uxtb	r2, r2
    72ce:	701a      	strb	r2, [r3, #0]
    72d0:	f242 0339 	movw	r3, #8249	; 0x2039
    72d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72d8:	f242 0239 	movw	r2, #8249	; 0x2039
    72dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    72e0:	7812      	ldrb	r2, [r2, #0]
    72e2:	b2d2      	uxtb	r2, r2
    72e4:	f042 0210 	orr.w	r2, r2, #16
    72e8:	b2d2      	uxtb	r2, r2
    72ea:	701a      	strb	r2, [r3, #0]
    72ec:	e00b      	b.n	7306 <ground_calibrate+0x12ae>
    72ee:	f24c 5348 	movw	r3, #50504	; 0xc548
    72f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72f6:	781b      	ldrb	r3, [r3, #0]
    72f8:	3301      	adds	r3, #1
    72fa:	b2da      	uxtb	r2, r3
    72fc:	f24c 5348 	movw	r3, #50504	; 0xc548
    7300:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7304:	701a      	strb	r2, [r3, #0]
    }
}
else {}

//#endif
}
    7306:	bd80      	pop	{r7, pc}
    7308:	20000541 	.word	0x20000541

0000730c <pprz_mode_update>:

/** \fn inline uint8_t pprz_mode_update( void )
 *  \brief Update paparazzi mode
 */
inline uint8_t pprz_mode_update( void ) {
    730c:	b480      	push	{r7}
    730e:	b083      	sub	sp, #12
    7310:	af00      	add	r7, sp, #0
  /** We remain in home mode until explicit reset from the RC */
  if (pprz_mode != PPRZ_MODE_HOME || CheckEvent(rc_event_1)) {
    7312:	f24c 532c 	movw	r3, #50476	; 0xc52c
    7316:	f2c2 0304 	movt	r3, #8196	; 0x2004
    731a:	781b      	ldrb	r3, [r3, #0]
    731c:	2b03      	cmp	r3, #3
    731e:	d10c      	bne.n	733a <pprz_mode_update+0x2e>
    7320:	f24c 5330 	movw	r3, #50480	; 0xc530
    7324:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7328:	781b      	ldrb	r3, [r3, #0]
    732a:	2b00      	cmp	r3, #0
    732c:	d032      	beq.n	7394 <pprz_mode_update+0x88>
    732e:	f24c 5330 	movw	r3, #50480	; 0xc530
    7332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7336:	2200      	movs	r2, #0
    7338:	701a      	strb	r2, [r3, #0]
    ModeUpdate(pprz_mode, PPRZ_MODE_OF_PULSE(from_fbw.channels[RADIO_MODE], from_fbw.status));
    733a:	f24c 6350 	movw	r3, #50768	; 0xc650
    733e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7342:	891b      	ldrh	r3, [r3, #8]
    7344:	b21b      	sxth	r3, r3
    7346:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    734a:	dc0f      	bgt.n	736c <pprz_mode_update+0x60>
    734c:	f24c 6350 	movw	r3, #50768	; 0xc650
    7350:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7354:	891b      	ldrh	r3, [r3, #8]
    7356:	b21a      	sxth	r2, r3
    7358:	f64e 5341 	movw	r3, #60737	; 0xed41
    735c:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    7360:	429a      	cmp	r2, r3
    7362:	bfb4      	ite	lt
    7364:	2300      	movlt	r3, #0
    7366:	2301      	movge	r3, #1
    7368:	b2db      	uxtb	r3, r3
    736a:	e000      	b.n	736e <pprz_mode_update+0x62>
    736c:	2302      	movs	r3, #2
    736e:	71fb      	strb	r3, [r7, #7]
    7370:	f24c 532c 	movw	r3, #50476	; 0xc52c
    7374:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7378:	781b      	ldrb	r3, [r3, #0]
    737a:	79fa      	ldrb	r2, [r7, #7]
    737c:	429a      	cmp	r2, r3
    737e:	d007      	beq.n	7390 <pprz_mode_update+0x84>
    7380:	f24c 532c 	movw	r3, #50476	; 0xc52c
    7384:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7388:	79fa      	ldrb	r2, [r7, #7]
    738a:	701a      	strb	r2, [r3, #0]
    738c:	2301      	movs	r3, #1
    738e:	e002      	b.n	7396 <pprz_mode_update+0x8a>
    7390:	2300      	movs	r3, #0
    7392:	e000      	b.n	7396 <pprz_mode_update+0x8a>
  } else
    return FALSE;
    7394:	2300      	movs	r3, #0
}
    7396:	4618      	mov	r0, r3
    7398:	370c      	adds	r7, #12
    739a:	46bd      	mov	sp, r7
    739c:	f85d 7b04 	ldr.w	r7, [sp], #4
    73a0:	4770      	bx	lr
    73a2:	bf00      	nop

000073a4 <ir_estim_mode_update>:

#ifdef RADIO_LLS
/** \fn inline uint8_t ir_estim_mode_update( void )
 *  \brief update ir estimation if RADIO_LLS is true \n
 */
inline uint8_t ir_estim_mode_update( void ) {
    73a4:	b480      	push	{r7}
    73a6:	b083      	sub	sp, #12
    73a8:	af00      	add	r7, sp, #0
  ModeUpdate(ir_estim_mode, IR_ESTIM_MODE_OF_PULSE(from_fbw.channels[RADIO_LLS]));
    73aa:	f24c 6350 	movw	r3, #50768	; 0xc650
    73ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73b2:	89db      	ldrh	r3, [r3, #14]
    73b4:	b21a      	sxth	r2, r3
    73b6:	f640 437f 	movw	r3, #3199	; 0xc7f
    73ba:	429a      	cmp	r2, r3
    73bc:	bfd4      	ite	le
    73be:	2300      	movle	r3, #0
    73c0:	2301      	movgt	r3, #1
    73c2:	b2db      	uxtb	r3, r3
    73c4:	71fb      	strb	r3, [r7, #7]
    73c6:	f240 533c 	movw	r3, #1340	; 0x53c
    73ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73ce:	781b      	ldrb	r3, [r3, #0]
    73d0:	79fa      	ldrb	r2, [r7, #7]
    73d2:	429a      	cmp	r2, r3
    73d4:	d007      	beq.n	73e6 <ir_estim_mode_update+0x42>
    73d6:	f240 533c 	movw	r3, #1340	; 0x53c
    73da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73de:	79fa      	ldrb	r2, [r7, #7]
    73e0:	701a      	strb	r2, [r3, #0]
    73e2:	2301      	movs	r3, #1
    73e4:	e000      	b.n	73e8 <ir_estim_mode_update+0x44>
    73e6:	2300      	movs	r3, #0
}
    73e8:	4618      	mov	r0, r3
    73ea:	370c      	adds	r7, #12
    73ec:	46bd      	mov	sp, r7
    73ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    73f2:	4770      	bx	lr

000073f4 <mcu1_status_update>:


/** \fn inline uint8_t mcu1_status_update( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t mcu1_status_update( void ) {
    73f4:	b480      	push	{r7}
    73f6:	b083      	sub	sp, #12
    73f8:	af00      	add	r7, sp, #0
  uint8_t new_mode = from_fbw.status;
    73fa:	f24c 6350 	movw	r3, #50768	; 0xc650
    73fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7402:	7cdb      	ldrb	r3, [r3, #19]
    7404:	71fb      	strb	r3, [r7, #7]
  if (mcu1_status != new_mode) {
    7406:	f24c 5333 	movw	r3, #50483	; 0xc533
    740a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    740e:	781b      	ldrb	r3, [r3, #0]
    7410:	79fa      	ldrb	r2, [r7, #7]
    7412:	429a      	cmp	r2, r3
    7414:	d017      	beq.n	7446 <mcu1_status_update+0x52>
    bool_t changed = ((mcu1_status&MASK_FBW_CHANGED) != (new_mode&MASK_FBW_CHANGED));
    7416:	f24c 5333 	movw	r3, #50483	; 0xc533
    741a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    741e:	781b      	ldrb	r3, [r3, #0]
    7420:	461a      	mov	r2, r3
    7422:	79fb      	ldrb	r3, [r7, #7]
    7424:	4053      	eors	r3, r2
    7426:	f003 0303 	and.w	r3, r3, #3
    742a:	2b00      	cmp	r3, #0
    742c:	bf0c      	ite	eq
    742e:	2300      	moveq	r3, #0
    7430:	2301      	movne	r3, #1
    7432:	b2db      	uxtb	r3, r3
    7434:	71bb      	strb	r3, [r7, #6]
    mcu1_status = new_mode;
    7436:	f24c 5333 	movw	r3, #50483	; 0xc533
    743a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    743e:	79fa      	ldrb	r2, [r7, #7]
    7440:	701a      	strb	r2, [r3, #0]
    return changed;
    7442:	79bb      	ldrb	r3, [r7, #6]
    7444:	e000      	b.n	7448 <mcu1_status_update+0x54>
  }
  return FALSE;
    7446:	2300      	movs	r3, #0
}
    7448:	4618      	mov	r0, r3
    744a:	370c      	adds	r7, #12
    744c:	46bd      	mov	sp, r7
    744e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7452:	4770      	bx	lr

00007454 <events_update>:
 EventUpdate(_cpt, (inflight_calib_mode==IF_CALIB_MODE_NONE && from_fbw.channels[_channel]<(int)(-0.75*MAX_PPRZ)), _event)

/** \fn static inline void events_update( void )
 *  @@@@@ A FIXER @@@@@
 */
static inline void events_update( void ) {
    7454:	b480      	push	{r7}
    7456:	af00      	add	r7, sp, #0
  static uint16_t event1_cpt = 0;
  static uint16_t event2_cpt = 0;
  EventPos(event1_cpt, RADIO_GAIN1, rc_event_1);
    7458:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    745c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7460:	781b      	ldrb	r3, [r3, #0]
    7462:	2b00      	cmp	r3, #0
    7464:	d12a      	bne.n	74bc <events_update+0x68>
    7466:	f24c 6350 	movw	r3, #50768	; 0xc650
    746a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    746e:	895b      	ldrh	r3, [r3, #10]
    7470:	b21b      	sxth	r3, r3
    7472:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
    7476:	dd21      	ble.n	74bc <events_update+0x68>
    7478:	f24c 5344 	movw	r3, #50500	; 0xc544
    747c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7480:	881b      	ldrh	r3, [r3, #0]
    7482:	2b13      	cmp	r3, #19
    7484:	d819      	bhi.n	74ba <events_update+0x66>
    7486:	f24c 5344 	movw	r3, #50500	; 0xc544
    748a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    748e:	881b      	ldrh	r3, [r3, #0]
    7490:	3301      	adds	r3, #1
    7492:	b29a      	uxth	r2, r3
    7494:	f24c 5344 	movw	r3, #50500	; 0xc544
    7498:	f2c2 0304 	movt	r3, #8196	; 0x2004
    749c:	801a      	strh	r2, [r3, #0]
    749e:	f24c 5344 	movw	r3, #50500	; 0xc544
    74a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74a6:	881b      	ldrh	r3, [r3, #0]
    74a8:	2b14      	cmp	r3, #20
    74aa:	d106      	bne.n	74ba <events_update+0x66>
    74ac:	f24c 5330 	movw	r3, #50480	; 0xc530
    74b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74b4:	2201      	movs	r2, #1
    74b6:	701a      	strb	r2, [r3, #0]
    74b8:	e00c      	b.n	74d4 <events_update+0x80>
    74ba:	e00b      	b.n	74d4 <events_update+0x80>
    74bc:	f24c 5344 	movw	r3, #50500	; 0xc544
    74c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74c4:	2200      	movs	r2, #0
    74c6:	801a      	strh	r2, [r3, #0]
    74c8:	f24c 5330 	movw	r3, #50480	; 0xc530
    74cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74d0:	2200      	movs	r2, #0
    74d2:	701a      	strb	r2, [r3, #0]
  EventNeg(event2_cpt, RADIO_GAIN1, rc_event_2);
    74d4:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    74d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74dc:	781b      	ldrb	r3, [r3, #0]
    74de:	2b00      	cmp	r3, #0
    74e0:	d12a      	bne.n	7538 <events_update+0xe4>
    74e2:	f24c 6350 	movw	r3, #50768	; 0xc650
    74e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74ea:	895b      	ldrh	r3, [r3, #10]
    74ec:	b21b      	sxth	r3, r3
    74ee:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
    74f2:	da21      	bge.n	7538 <events_update+0xe4>
    74f4:	f24c 5346 	movw	r3, #50502	; 0xc546
    74f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74fc:	881b      	ldrh	r3, [r3, #0]
    74fe:	2b13      	cmp	r3, #19
    7500:	d819      	bhi.n	7536 <events_update+0xe2>
    7502:	f24c 5346 	movw	r3, #50502	; 0xc546
    7506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    750a:	881b      	ldrh	r3, [r3, #0]
    750c:	3301      	adds	r3, #1
    750e:	b29a      	uxth	r2, r3
    7510:	f24c 5346 	movw	r3, #50502	; 0xc546
    7514:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7518:	801a      	strh	r2, [r3, #0]
    751a:	f24c 5346 	movw	r3, #50502	; 0xc546
    751e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7522:	881b      	ldrh	r3, [r3, #0]
    7524:	2b14      	cmp	r3, #20
    7526:	d106      	bne.n	7536 <events_update+0xe2>
    7528:	f24c 5331 	movw	r3, #50481	; 0xc531
    752c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7530:	2201      	movs	r2, #1
    7532:	701a      	strb	r2, [r3, #0]
    7534:	e00c      	b.n	7550 <events_update+0xfc>
    7536:	e00b      	b.n	7550 <events_update+0xfc>
    7538:	f24c 5346 	movw	r3, #50502	; 0xc546
    753c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7540:	2200      	movs	r2, #0
    7542:	801a      	strh	r2, [r3, #0]
    7544:	f24c 5331 	movw	r3, #50481	; 0xc531
    7548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    754c:	2200      	movs	r2, #0
    754e:	701a      	strb	r2, [r3, #0]
}  
    7550:	46bd      	mov	sp, r7
    7552:	f85d 7b04 	ldr.w	r7, [sp], #4
    7556:	4770      	bx	lr

00007558 <copy_from_to_fbw>:


/** \fn inline void copy_from_to_fbw ( void )
 *  \brief Send back uncontrolled channels (only rudder)
 */
inline void copy_from_to_fbw ( void ) {
    7558:	b480      	push	{r7}
    755a:	af00      	add	r7, sp, #0
  to_fbw.channels[RADIO_YAW] = from_fbw.channels[RADIO_YAW];
    755c:	f24c 6350 	movw	r3, #50768	; 0xc650
    7560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7564:	88da      	ldrh	r2, [r3, #6]
    7566:	f24c 6368 	movw	r3, #50792	; 0xc668
    756a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    756e:	80da      	strh	r2, [r3, #6]
#ifdef ANTON_T7
  to_fbw.channels[RADIO_PITCH] = from_fbw.channels[RADIO_PITCH];
#endif
  to_fbw.status = 0;
    7570:	f24c 6368 	movw	r3, #50792	; 0xc668
    7574:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7578:	2200      	movs	r2, #0
    757a:	74da      	strb	r2, [r3, #19]
}
    757c:	46bd      	mov	sp, r7
    757e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7582:	4770      	bx	lr

00007584 <send_boot>:
/** \fn inline void reporting_task( void )
 *  \brief Send a serie of initialisation messages followed by a stream of periodic ones\n
 * Called at 20Hz.
 */

void send_boot(void){
    7584:	b480      	push	{r7}
    7586:	af00      	add	r7, sp, #0
  /** initialisation phase during boot */
  //vPrintString("S_13 reporting_task start!\n\r");
  //add by wanbo
  if (boot) 
    7588:	f240 533d 	movw	r3, #1341	; 0x53d
    758c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7590:	781b      	ldrb	r3, [r3, #0]
    7592:	2b00      	cmp	r3, #0
    7594:	f000 87c6 	beq.w	8524 <send_boot+0xfa0>
  {
      DOWNLINK_SEND_BOOT(&version);
    7598:	f24c 5349 	movw	r3, #50505	; 0xc549
    759c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75a0:	781a      	ldrb	r2, [r3, #0]
    75a2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    75a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75aa:	781b      	ldrb	r3, [r3, #0]
    75ac:	b2db      	uxtb	r3, r3
    75ae:	429a      	cmp	r2, r3
    75b0:	d313      	bcc.n	75da <send_boot+0x56>
    75b2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    75b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75ba:	781b      	ldrb	r3, [r3, #0]
    75bc:	b2db      	uxtb	r3, r3
    75be:	461a      	mov	r2, r3
    75c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    75c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75c8:	781b      	ldrb	r3, [r3, #0]
    75ca:	1ad3      	subs	r3, r2, r3
    75cc:	33ff      	adds	r3, #255	; 0xff
    75ce:	2b06      	cmp	r3, #6
    75d0:	bfd4      	ite	le
    75d2:	2300      	movle	r3, #0
    75d4:	2301      	movgt	r3, #1
    75d6:	b2db      	uxtb	r3, r3
    75d8:	e011      	b.n	75fe <send_boot+0x7a>
    75da:	f24c 534a 	movw	r3, #50506	; 0xc54a
    75de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75e2:	781b      	ldrb	r3, [r3, #0]
    75e4:	b2db      	uxtb	r3, r3
    75e6:	461a      	mov	r2, r3
    75e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    75ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75f0:	781b      	ldrb	r3, [r3, #0]
    75f2:	1ad3      	subs	r3, r2, r3
    75f4:	2b06      	cmp	r3, #6
    75f6:	bfd4      	ite	le
    75f8:	2300      	movle	r3, #0
    75fa:	2301      	movgt	r3, #1
    75fc:	b2db      	uxtb	r3, r3
    75fe:	2b00      	cmp	r3, #0
    7600:	f000 8194 	beq.w	792c <send_boot+0x3a8>
    7604:	f24c 5349 	movw	r3, #50505	; 0xc549
    7608:	f2c2 0304 	movt	r3, #8196	; 0x2004
    760c:	781b      	ldrb	r3, [r3, #0]
    760e:	461a      	mov	r2, r3
    7610:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7618:	2105      	movs	r1, #5
    761a:	5499      	strb	r1, [r3, r2]
    761c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7620:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7624:	781b      	ldrb	r3, [r3, #0]
    7626:	3301      	adds	r3, #1
    7628:	b2da      	uxtb	r2, r3
    762a:	f24c 5349 	movw	r3, #50505	; 0xc549
    762e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7632:	701a      	strb	r2, [r3, #0]
    7634:	f24c 5349 	movw	r3, #50505	; 0xc549
    7638:	f2c2 0304 	movt	r3, #8196	; 0x2004
    763c:	781b      	ldrb	r3, [r3, #0]
    763e:	2bff      	cmp	r3, #255	; 0xff
    7640:	d105      	bne.n	764e <send_boot+0xca>
    7642:	f24c 5349 	movw	r3, #50505	; 0xc549
    7646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    764a:	2200      	movs	r2, #0
    764c:	701a      	strb	r2, [r3, #0]
    764e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7652:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7656:	781b      	ldrb	r3, [r3, #0]
    7658:	461a      	mov	r2, r3
    765a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    765e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7662:	2101      	movs	r1, #1
    7664:	5499      	strb	r1, [r3, r2]
    7666:	f24c 5349 	movw	r3, #50505	; 0xc549
    766a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    766e:	781b      	ldrb	r3, [r3, #0]
    7670:	3301      	adds	r3, #1
    7672:	b2da      	uxtb	r2, r3
    7674:	f24c 5349 	movw	r3, #50505	; 0xc549
    7678:	f2c2 0304 	movt	r3, #8196	; 0x2004
    767c:	701a      	strb	r2, [r3, #0]
    767e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7682:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7686:	781b      	ldrb	r3, [r3, #0]
    7688:	2bff      	cmp	r3, #255	; 0xff
    768a:	d105      	bne.n	7698 <send_boot+0x114>
    768c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7690:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7694:	2200      	movs	r2, #0
    7696:	701a      	strb	r2, [r3, #0]
    7698:	f24c 634d 	movw	r3, #50765	; 0xc64d
    769c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76a0:	2201      	movs	r2, #1
    76a2:	701a      	strb	r2, [r3, #0]
    76a4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    76a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76ac:	2201      	movs	r2, #1
    76ae:	701a      	strb	r2, [r3, #0]
    76b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    76b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76b8:	781b      	ldrb	r3, [r3, #0]
    76ba:	461a      	mov	r2, r3
    76bc:	f648 239a 	movw	r3, #35482	; 0x8a9a
    76c0:	f2c0 0301 	movt	r3, #1
    76c4:	7819      	ldrb	r1, [r3, #0]
    76c6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    76ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76ce:	5499      	strb	r1, [r3, r2]
    76d0:	f648 239a 	movw	r3, #35482	; 0x8a9a
    76d4:	f2c0 0301 	movt	r3, #1
    76d8:	781a      	ldrb	r2, [r3, #0]
    76da:	f24c 634d 	movw	r3, #50765	; 0xc64d
    76de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76e2:	781b      	ldrb	r3, [r3, #0]
    76e4:	4413      	add	r3, r2
    76e6:	b2da      	uxtb	r2, r3
    76e8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    76ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76f0:	701a      	strb	r2, [r3, #0]
    76f2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    76f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76fa:	781a      	ldrb	r2, [r3, #0]
    76fc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7704:	781b      	ldrb	r3, [r3, #0]
    7706:	4413      	add	r3, r2
    7708:	b2da      	uxtb	r2, r3
    770a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    770e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7712:	701a      	strb	r2, [r3, #0]
    7714:	f24c 5349 	movw	r3, #50505	; 0xc549
    7718:	f2c2 0304 	movt	r3, #8196	; 0x2004
    771c:	781b      	ldrb	r3, [r3, #0]
    771e:	3301      	adds	r3, #1
    7720:	b2da      	uxtb	r2, r3
    7722:	f24c 5349 	movw	r3, #50505	; 0xc549
    7726:	f2c2 0304 	movt	r3, #8196	; 0x2004
    772a:	701a      	strb	r2, [r3, #0]
    772c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7730:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7734:	781b      	ldrb	r3, [r3, #0]
    7736:	2bff      	cmp	r3, #255	; 0xff
    7738:	d105      	bne.n	7746 <send_boot+0x1c2>
    773a:	f24c 5349 	movw	r3, #50505	; 0xc549
    773e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7742:	2200      	movs	r2, #0
    7744:	701a      	strb	r2, [r3, #0]
    7746:	f24c 5349 	movw	r3, #50505	; 0xc549
    774a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    774e:	781b      	ldrb	r3, [r3, #0]
    7750:	461a      	mov	r2, r3
    7752:	f648 239a 	movw	r3, #35482	; 0x8a9a
    7756:	f2c0 0301 	movt	r3, #1
    775a:	7859      	ldrb	r1, [r3, #1]
    775c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7760:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7764:	5499      	strb	r1, [r3, r2]
    7766:	4b88      	ldr	r3, [pc, #544]	; (7988 <send_boot+0x404>)
    7768:	781a      	ldrb	r2, [r3, #0]
    776a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    776e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7772:	781b      	ldrb	r3, [r3, #0]
    7774:	4413      	add	r3, r2
    7776:	b2da      	uxtb	r2, r3
    7778:	f24c 634d 	movw	r3, #50765	; 0xc64d
    777c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7780:	701a      	strb	r2, [r3, #0]
    7782:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7786:	f2c2 0304 	movt	r3, #8196	; 0x2004
    778a:	781a      	ldrb	r2, [r3, #0]
    778c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7790:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7794:	781b      	ldrb	r3, [r3, #0]
    7796:	4413      	add	r3, r2
    7798:	b2da      	uxtb	r2, r3
    779a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    779e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77a2:	701a      	strb	r2, [r3, #0]
    77a4:	f24c 5349 	movw	r3, #50505	; 0xc549
    77a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77ac:	781b      	ldrb	r3, [r3, #0]
    77ae:	3301      	adds	r3, #1
    77b0:	b2da      	uxtb	r2, r3
    77b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    77b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77ba:	701a      	strb	r2, [r3, #0]
    77bc:	f24c 5349 	movw	r3, #50505	; 0xc549
    77c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77c4:	781b      	ldrb	r3, [r3, #0]
    77c6:	2bff      	cmp	r3, #255	; 0xff
    77c8:	d105      	bne.n	77d6 <send_boot+0x252>
    77ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    77ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77d2:	2200      	movs	r2, #0
    77d4:	701a      	strb	r2, [r3, #0]
    77d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    77da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77de:	781b      	ldrb	r3, [r3, #0]
    77e0:	461a      	mov	r2, r3
    77e2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    77e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77ea:	7819      	ldrb	r1, [r3, #0]
    77ec:	f24c 534c 	movw	r3, #50508	; 0xc54c
    77f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77f4:	5499      	strb	r1, [r3, r2]
    77f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    77fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77fe:	781b      	ldrb	r3, [r3, #0]
    7800:	3301      	adds	r3, #1
    7802:	b2da      	uxtb	r2, r3
    7804:	f24c 5349 	movw	r3, #50505	; 0xc549
    7808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    780c:	701a      	strb	r2, [r3, #0]
    780e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7816:	781b      	ldrb	r3, [r3, #0]
    7818:	2bff      	cmp	r3, #255	; 0xff
    781a:	d105      	bne.n	7828 <send_boot+0x2a4>
    781c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7820:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7824:	2200      	movs	r2, #0
    7826:	701a      	strb	r2, [r3, #0]
    7828:	f24c 5349 	movw	r3, #50505	; 0xc549
    782c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7830:	781b      	ldrb	r3, [r3, #0]
    7832:	461a      	mov	r2, r3
    7834:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    783c:	7819      	ldrb	r1, [r3, #0]
    783e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7842:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7846:	5499      	strb	r1, [r3, r2]
    7848:	f24c 5349 	movw	r3, #50505	; 0xc549
    784c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7850:	781b      	ldrb	r3, [r3, #0]
    7852:	3301      	adds	r3, #1
    7854:	b2da      	uxtb	r2, r3
    7856:	f24c 5349 	movw	r3, #50505	; 0xc549
    785a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    785e:	701a      	strb	r2, [r3, #0]
    7860:	f24c 5349 	movw	r3, #50505	; 0xc549
    7864:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7868:	781b      	ldrb	r3, [r3, #0]
    786a:	2bff      	cmp	r3, #255	; 0xff
    786c:	d105      	bne.n	787a <send_boot+0x2f6>
    786e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7876:	2200      	movs	r2, #0
    7878:	701a      	strb	r2, [r3, #0]
    787a:	f242 0339 	movw	r3, #8249	; 0x2039
    787e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7882:	781b      	ldrb	r3, [r3, #0]
    7884:	b2db      	uxtb	r3, r3
    7886:	f003 0310 	and.w	r3, r3, #16
    788a:	2b00      	cmp	r3, #0
    788c:	d15a      	bne.n	7944 <send_boot+0x3c0>
    788e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7892:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7896:	781b      	ldrb	r3, [r3, #0]
    7898:	b2db      	uxtb	r3, r3
    789a:	461a      	mov	r2, r3
    789c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    78a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78a4:	5c9a      	ldrb	r2, [r3, r2]
    78a6:	f24c 634b 	movw	r3, #50763	; 0xc64b
    78aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78ae:	701a      	strb	r2, [r3, #0]
    78b0:	f24c 634c 	movw	r3, #50764	; 0xc64c
    78b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78b8:	2200      	movs	r2, #0
    78ba:	701a      	strb	r2, [r3, #0]
    78bc:	f24c 534a 	movw	r3, #50506	; 0xc54a
    78c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78c4:	781b      	ldrb	r3, [r3, #0]
    78c6:	b2db      	uxtb	r3, r3
    78c8:	3301      	adds	r3, #1
    78ca:	b2da      	uxtb	r2, r3
    78cc:	f24c 534a 	movw	r3, #50506	; 0xc54a
    78d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78d4:	701a      	strb	r2, [r3, #0]
    78d6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    78da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78de:	781b      	ldrb	r3, [r3, #0]
    78e0:	b2db      	uxtb	r3, r3
    78e2:	2bff      	cmp	r3, #255	; 0xff
    78e4:	d105      	bne.n	78f2 <send_boot+0x36e>
    78e6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    78ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78ee:	2200      	movs	r2, #0
    78f0:	701a      	strb	r2, [r3, #0]
    78f2:	f242 0338 	movw	r3, #8248	; 0x2038
    78f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78fa:	f242 0238 	movw	r2, #8248	; 0x2038
    78fe:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7902:	7812      	ldrb	r2, [r2, #0]
    7904:	b2d2      	uxtb	r2, r2
    7906:	f042 0201 	orr.w	r2, r2, #1
    790a:	b2d2      	uxtb	r2, r2
    790c:	701a      	strb	r2, [r3, #0]
    790e:	f242 0339 	movw	r3, #8249	; 0x2039
    7912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7916:	f242 0239 	movw	r2, #8249	; 0x2039
    791a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    791e:	7812      	ldrb	r2, [r2, #0]
    7920:	b2d2      	uxtb	r2, r2
    7922:	f042 0210 	orr.w	r2, r2, #16
    7926:	b2d2      	uxtb	r2, r2
    7928:	701a      	strb	r2, [r3, #0]
    792a:	e00b      	b.n	7944 <send_boot+0x3c0>
    792c:	f24c 5348 	movw	r3, #50504	; 0xc548
    7930:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7934:	781b      	ldrb	r3, [r3, #0]
    7936:	3301      	adds	r3, #1
    7938:	b2da      	uxtb	r2, r3
    793a:	f24c 5348 	movw	r3, #50504	; 0xc548
    793e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7942:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    7944:	f24c 5349 	movw	r3, #50505	; 0xc549
    7948:	f2c2 0304 	movt	r3, #8196	; 0x2004
    794c:	781a      	ldrb	r2, [r3, #0]
    794e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7952:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7956:	781b      	ldrb	r3, [r3, #0]
    7958:	b2db      	uxtb	r3, r3
    795a:	429a      	cmp	r2, r3
    795c:	d316      	bcc.n	798c <send_boot+0x408>
    795e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7962:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7966:	781b      	ldrb	r3, [r3, #0]
    7968:	b2db      	uxtb	r3, r3
    796a:	461a      	mov	r2, r3
    796c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7970:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7974:	781b      	ldrb	r3, [r3, #0]
    7976:	1ad3      	subs	r3, r2, r3
    7978:	33ff      	adds	r3, #255	; 0xff
    797a:	2b14      	cmp	r3, #20
    797c:	bfd4      	ite	le
    797e:	2300      	movle	r3, #0
    7980:	2301      	movgt	r3, #1
    7982:	b2db      	uxtb	r3, r3
    7984:	e014      	b.n	79b0 <send_boot+0x42c>
    7986:	bf00      	nop
    7988:	00018a9b 	.word	0x00018a9b
    798c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7990:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7994:	781b      	ldrb	r3, [r3, #0]
    7996:	b2db      	uxtb	r3, r3
    7998:	461a      	mov	r2, r3
    799a:	f24c 5349 	movw	r3, #50505	; 0xc549
    799e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79a2:	781b      	ldrb	r3, [r3, #0]
    79a4:	1ad3      	subs	r3, r2, r3
    79a6:	2b14      	cmp	r3, #20
    79a8:	bfd4      	ite	le
    79aa:	2300      	movle	r3, #0
    79ac:	2301      	movgt	r3, #1
    79ae:	b2db      	uxtb	r3, r3
    79b0:	2b00      	cmp	r3, #0
    79b2:	f000 85a5 	beq.w	8500 <send_boot+0xf7c>
    79b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    79ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79be:	781b      	ldrb	r3, [r3, #0]
    79c0:	461a      	mov	r2, r3
    79c2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    79c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79ca:	2105      	movs	r1, #5
    79cc:	5499      	strb	r1, [r3, r2]
    79ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    79d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79d6:	781b      	ldrb	r3, [r3, #0]
    79d8:	3301      	adds	r3, #1
    79da:	b2da      	uxtb	r2, r3
    79dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    79e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79e4:	701a      	strb	r2, [r3, #0]
    79e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    79ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79ee:	781b      	ldrb	r3, [r3, #0]
    79f0:	2bff      	cmp	r3, #255	; 0xff
    79f2:	d105      	bne.n	7a00 <send_boot+0x47c>
    79f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    79f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79fc:	2200      	movs	r2, #0
    79fe:	701a      	strb	r2, [r3, #0]
    7a00:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a08:	781b      	ldrb	r3, [r3, #0]
    7a0a:	461a      	mov	r2, r3
    7a0c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7a10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a14:	2105      	movs	r1, #5
    7a16:	5499      	strb	r1, [r3, r2]
    7a18:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a20:	781b      	ldrb	r3, [r3, #0]
    7a22:	3301      	adds	r3, #1
    7a24:	b2da      	uxtb	r2, r3
    7a26:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a2e:	701a      	strb	r2, [r3, #0]
    7a30:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a38:	781b      	ldrb	r3, [r3, #0]
    7a3a:	2bff      	cmp	r3, #255	; 0xff
    7a3c:	d105      	bne.n	7a4a <send_boot+0x4c6>
    7a3e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a46:	2200      	movs	r2, #0
    7a48:	701a      	strb	r2, [r3, #0]
    7a4a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7a4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a52:	2205      	movs	r2, #5
    7a54:	701a      	strb	r2, [r3, #0]
    7a56:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7a5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a5e:	2205      	movs	r2, #5
    7a60:	701a      	strb	r2, [r3, #0]
    7a62:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a6a:	781b      	ldrb	r3, [r3, #0]
    7a6c:	461a      	mov	r2, r3
    7a6e:	f64c 3340 	movw	r3, #52032	; 0xcb40
    7a72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a76:	7819      	ldrb	r1, [r3, #0]
    7a78:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7a7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a80:	5499      	strb	r1, [r3, r2]
    7a82:	f64c 3340 	movw	r3, #52032	; 0xcb40
    7a86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a8a:	781a      	ldrb	r2, [r3, #0]
    7a8c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7a90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a94:	781b      	ldrb	r3, [r3, #0]
    7a96:	4413      	add	r3, r2
    7a98:	b2da      	uxtb	r2, r3
    7a9a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7a9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aa2:	701a      	strb	r2, [r3, #0]
    7aa4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7aa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aac:	781a      	ldrb	r2, [r3, #0]
    7aae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7ab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ab6:	781b      	ldrb	r3, [r3, #0]
    7ab8:	4413      	add	r3, r2
    7aba:	b2da      	uxtb	r2, r3
    7abc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7ac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ac4:	701a      	strb	r2, [r3, #0]
    7ac6:	f24c 5349 	movw	r3, #50505	; 0xc549
    7aca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ace:	781b      	ldrb	r3, [r3, #0]
    7ad0:	3301      	adds	r3, #1
    7ad2:	b2da      	uxtb	r2, r3
    7ad4:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7adc:	701a      	strb	r2, [r3, #0]
    7ade:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ae6:	781b      	ldrb	r3, [r3, #0]
    7ae8:	2bff      	cmp	r3, #255	; 0xff
    7aea:	d105      	bne.n	7af8 <send_boot+0x574>
    7aec:	f24c 5349 	movw	r3, #50505	; 0xc549
    7af0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7af4:	2200      	movs	r2, #0
    7af6:	701a      	strb	r2, [r3, #0]
    7af8:	f24c 5349 	movw	r3, #50505	; 0xc549
    7afc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b00:	781b      	ldrb	r3, [r3, #0]
    7b02:	461a      	mov	r2, r3
    7b04:	f64c 3340 	movw	r3, #52032	; 0xcb40
    7b08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b0c:	7859      	ldrb	r1, [r3, #1]
    7b0e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7b12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b16:	5499      	strb	r1, [r3, r2]
    7b18:	4bd1      	ldr	r3, [pc, #836]	; (7e60 <send_boot+0x8dc>)
    7b1a:	781a      	ldrb	r2, [r3, #0]
    7b1c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7b20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b24:	781b      	ldrb	r3, [r3, #0]
    7b26:	4413      	add	r3, r2
    7b28:	b2da      	uxtb	r2, r3
    7b2a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7b2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b32:	701a      	strb	r2, [r3, #0]
    7b34:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7b38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b3c:	781a      	ldrb	r2, [r3, #0]
    7b3e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7b42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b46:	781b      	ldrb	r3, [r3, #0]
    7b48:	4413      	add	r3, r2
    7b4a:	b2da      	uxtb	r2, r3
    7b4c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7b50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b54:	701a      	strb	r2, [r3, #0]
    7b56:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b5e:	781b      	ldrb	r3, [r3, #0]
    7b60:	3301      	adds	r3, #1
    7b62:	b2da      	uxtb	r2, r3
    7b64:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b6c:	701a      	strb	r2, [r3, #0]
    7b6e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b76:	781b      	ldrb	r3, [r3, #0]
    7b78:	2bff      	cmp	r3, #255	; 0xff
    7b7a:	d105      	bne.n	7b88 <send_boot+0x604>
    7b7c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b84:	2200      	movs	r2, #0
    7b86:	701a      	strb	r2, [r3, #0]
    7b88:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b90:	781b      	ldrb	r3, [r3, #0]
    7b92:	461a      	mov	r2, r3
    7b94:	f64c 3340 	movw	r3, #52032	; 0xcb40
    7b98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b9c:	7899      	ldrb	r1, [r3, #2]
    7b9e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7ba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ba6:	5499      	strb	r1, [r3, r2]
    7ba8:	4bae      	ldr	r3, [pc, #696]	; (7e64 <send_boot+0x8e0>)
    7baa:	781a      	ldrb	r2, [r3, #0]
    7bac:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7bb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bb4:	781b      	ldrb	r3, [r3, #0]
    7bb6:	4413      	add	r3, r2
    7bb8:	b2da      	uxtb	r2, r3
    7bba:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7bbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bc2:	701a      	strb	r2, [r3, #0]
    7bc4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7bc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bcc:	781a      	ldrb	r2, [r3, #0]
    7bce:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7bd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bd6:	781b      	ldrb	r3, [r3, #0]
    7bd8:	4413      	add	r3, r2
    7bda:	b2da      	uxtb	r2, r3
    7bdc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7be0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7be4:	701a      	strb	r2, [r3, #0]
    7be6:	f24c 5349 	movw	r3, #50505	; 0xc549
    7bea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bee:	781b      	ldrb	r3, [r3, #0]
    7bf0:	3301      	adds	r3, #1
    7bf2:	b2da      	uxtb	r2, r3
    7bf4:	f24c 5349 	movw	r3, #50505	; 0xc549
    7bf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bfc:	701a      	strb	r2, [r3, #0]
    7bfe:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c06:	781b      	ldrb	r3, [r3, #0]
    7c08:	2bff      	cmp	r3, #255	; 0xff
    7c0a:	d105      	bne.n	7c18 <send_boot+0x694>
    7c0c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c14:	2200      	movs	r2, #0
    7c16:	701a      	strb	r2, [r3, #0]
    7c18:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c20:	781b      	ldrb	r3, [r3, #0]
    7c22:	461a      	mov	r2, r3
    7c24:	f64c 3340 	movw	r3, #52032	; 0xcb40
    7c28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c2c:	78d9      	ldrb	r1, [r3, #3]
    7c2e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7c32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c36:	5499      	strb	r1, [r3, r2]
    7c38:	4b8b      	ldr	r3, [pc, #556]	; (7e68 <send_boot+0x8e4>)
    7c3a:	781a      	ldrb	r2, [r3, #0]
    7c3c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7c40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c44:	781b      	ldrb	r3, [r3, #0]
    7c46:	4413      	add	r3, r2
    7c48:	b2da      	uxtb	r2, r3
    7c4a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7c4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c52:	701a      	strb	r2, [r3, #0]
    7c54:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7c58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c5c:	781a      	ldrb	r2, [r3, #0]
    7c5e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7c62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c66:	781b      	ldrb	r3, [r3, #0]
    7c68:	4413      	add	r3, r2
    7c6a:	b2da      	uxtb	r2, r3
    7c6c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7c70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c74:	701a      	strb	r2, [r3, #0]
    7c76:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c7e:	781b      	ldrb	r3, [r3, #0]
    7c80:	3301      	adds	r3, #1
    7c82:	b2da      	uxtb	r2, r3
    7c84:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c8c:	701a      	strb	r2, [r3, #0]
    7c8e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c96:	781b      	ldrb	r3, [r3, #0]
    7c98:	2bff      	cmp	r3, #255	; 0xff
    7c9a:	d105      	bne.n	7ca8 <send_boot+0x724>
    7c9c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ca4:	2200      	movs	r2, #0
    7ca6:	701a      	strb	r2, [r3, #0]
    7ca8:	f24c 5349 	movw	r3, #50505	; 0xc549
    7cac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cb0:	781b      	ldrb	r3, [r3, #0]
    7cb2:	461a      	mov	r2, r3
    7cb4:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7cb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cbc:	7819      	ldrb	r1, [r3, #0]
    7cbe:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7cc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cc6:	5499      	strb	r1, [r3, r2]
    7cc8:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7ccc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cd0:	781a      	ldrb	r2, [r3, #0]
    7cd2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7cd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cda:	781b      	ldrb	r3, [r3, #0]
    7cdc:	4413      	add	r3, r2
    7cde:	b2da      	uxtb	r2, r3
    7ce0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7ce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ce8:	701a      	strb	r2, [r3, #0]
    7cea:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7cee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cf2:	781a      	ldrb	r2, [r3, #0]
    7cf4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7cf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cfc:	781b      	ldrb	r3, [r3, #0]
    7cfe:	4413      	add	r3, r2
    7d00:	b2da      	uxtb	r2, r3
    7d02:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7d06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d0a:	701a      	strb	r2, [r3, #0]
    7d0c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d14:	781b      	ldrb	r3, [r3, #0]
    7d16:	3301      	adds	r3, #1
    7d18:	b2da      	uxtb	r2, r3
    7d1a:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d22:	701a      	strb	r2, [r3, #0]
    7d24:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d2c:	781b      	ldrb	r3, [r3, #0]
    7d2e:	2bff      	cmp	r3, #255	; 0xff
    7d30:	d105      	bne.n	7d3e <send_boot+0x7ba>
    7d32:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d3a:	2200      	movs	r2, #0
    7d3c:	701a      	strb	r2, [r3, #0]
    7d3e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d46:	781b      	ldrb	r3, [r3, #0]
    7d48:	461a      	mov	r2, r3
    7d4a:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7d4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d52:	7859      	ldrb	r1, [r3, #1]
    7d54:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7d58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d5c:	5499      	strb	r1, [r3, r2]
    7d5e:	4b43      	ldr	r3, [pc, #268]	; (7e6c <send_boot+0x8e8>)
    7d60:	781a      	ldrb	r2, [r3, #0]
    7d62:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7d66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d6a:	781b      	ldrb	r3, [r3, #0]
    7d6c:	4413      	add	r3, r2
    7d6e:	b2da      	uxtb	r2, r3
    7d70:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7d74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d78:	701a      	strb	r2, [r3, #0]
    7d7a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7d7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d82:	781a      	ldrb	r2, [r3, #0]
    7d84:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7d88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d8c:	781b      	ldrb	r3, [r3, #0]
    7d8e:	4413      	add	r3, r2
    7d90:	b2da      	uxtb	r2, r3
    7d92:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7d96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d9a:	701a      	strb	r2, [r3, #0]
    7d9c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7da0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7da4:	781b      	ldrb	r3, [r3, #0]
    7da6:	3301      	adds	r3, #1
    7da8:	b2da      	uxtb	r2, r3
    7daa:	f24c 5349 	movw	r3, #50505	; 0xc549
    7dae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7db2:	701a      	strb	r2, [r3, #0]
    7db4:	f24c 5349 	movw	r3, #50505	; 0xc549
    7db8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dbc:	781b      	ldrb	r3, [r3, #0]
    7dbe:	2bff      	cmp	r3, #255	; 0xff
    7dc0:	d105      	bne.n	7dce <send_boot+0x84a>
    7dc2:	f24c 5349 	movw	r3, #50505	; 0xc549
    7dc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dca:	2200      	movs	r2, #0
    7dcc:	701a      	strb	r2, [r3, #0]
    7dce:	f24c 5349 	movw	r3, #50505	; 0xc549
    7dd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dd6:	781b      	ldrb	r3, [r3, #0]
    7dd8:	461a      	mov	r2, r3
    7dda:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7dde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7de2:	7899      	ldrb	r1, [r3, #2]
    7de4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7de8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dec:	5499      	strb	r1, [r3, r2]
    7dee:	4b20      	ldr	r3, [pc, #128]	; (7e70 <send_boot+0x8ec>)
    7df0:	781a      	ldrb	r2, [r3, #0]
    7df2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7df6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dfa:	781b      	ldrb	r3, [r3, #0]
    7dfc:	4413      	add	r3, r2
    7dfe:	b2da      	uxtb	r2, r3
    7e00:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7e04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e08:	701a      	strb	r2, [r3, #0]
    7e0a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7e0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e12:	781a      	ldrb	r2, [r3, #0]
    7e14:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7e18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e1c:	781b      	ldrb	r3, [r3, #0]
    7e1e:	4413      	add	r3, r2
    7e20:	b2da      	uxtb	r2, r3
    7e22:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7e26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e2a:	701a      	strb	r2, [r3, #0]
    7e2c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e34:	781b      	ldrb	r3, [r3, #0]
    7e36:	3301      	adds	r3, #1
    7e38:	b2da      	uxtb	r2, r3
    7e3a:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e42:	701a      	strb	r2, [r3, #0]
    7e44:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e4c:	781b      	ldrb	r3, [r3, #0]
    7e4e:	2bff      	cmp	r3, #255	; 0xff
    7e50:	d110      	bne.n	7e74 <send_boot+0x8f0>
    7e52:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e5a:	2200      	movs	r2, #0
    7e5c:	701a      	strb	r2, [r3, #0]
    7e5e:	e009      	b.n	7e74 <send_boot+0x8f0>
    7e60:	2004cb41 	.word	0x2004cb41
    7e64:	2004cb42 	.word	0x2004cb42
    7e68:	2004cb43 	.word	0x2004cb43
    7e6c:	2004cb45 	.word	0x2004cb45
    7e70:	2004cb46 	.word	0x2004cb46
    7e74:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e7c:	781b      	ldrb	r3, [r3, #0]
    7e7e:	461a      	mov	r2, r3
    7e80:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7e84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e88:	78d9      	ldrb	r1, [r3, #3]
    7e8a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7e8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e92:	5499      	strb	r1, [r3, r2]
    7e94:	4bd3      	ldr	r3, [pc, #844]	; (81e4 <send_boot+0xc60>)
    7e96:	781a      	ldrb	r2, [r3, #0]
    7e98:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7e9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ea0:	781b      	ldrb	r3, [r3, #0]
    7ea2:	4413      	add	r3, r2
    7ea4:	b2da      	uxtb	r2, r3
    7ea6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7eaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eae:	701a      	strb	r2, [r3, #0]
    7eb0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7eb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eb8:	781a      	ldrb	r2, [r3, #0]
    7eba:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7ebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ec2:	781b      	ldrb	r3, [r3, #0]
    7ec4:	4413      	add	r3, r2
    7ec6:	b2da      	uxtb	r2, r3
    7ec8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7ecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ed0:	701a      	strb	r2, [r3, #0]
    7ed2:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ed6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eda:	781b      	ldrb	r3, [r3, #0]
    7edc:	3301      	adds	r3, #1
    7ede:	b2da      	uxtb	r2, r3
    7ee0:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ee8:	701a      	strb	r2, [r3, #0]
    7eea:	f24c 5349 	movw	r3, #50505	; 0xc549
    7eee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ef2:	781b      	ldrb	r3, [r3, #0]
    7ef4:	2bff      	cmp	r3, #255	; 0xff
    7ef6:	d105      	bne.n	7f04 <send_boot+0x980>
    7ef8:	f24c 5349 	movw	r3, #50505	; 0xc549
    7efc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f00:	2200      	movs	r2, #0
    7f02:	701a      	strb	r2, [r3, #0]
    7f04:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f0c:	781b      	ldrb	r3, [r3, #0]
    7f0e:	461a      	mov	r2, r3
    7f10:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    7f14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f18:	7819      	ldrb	r1, [r3, #0]
    7f1a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7f1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f22:	5499      	strb	r1, [r3, r2]
    7f24:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    7f28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f2c:	781a      	ldrb	r2, [r3, #0]
    7f2e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7f32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f36:	781b      	ldrb	r3, [r3, #0]
    7f38:	4413      	add	r3, r2
    7f3a:	b2da      	uxtb	r2, r3
    7f3c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7f40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f44:	701a      	strb	r2, [r3, #0]
    7f46:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7f4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f4e:	781a      	ldrb	r2, [r3, #0]
    7f50:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7f54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f58:	781b      	ldrb	r3, [r3, #0]
    7f5a:	4413      	add	r3, r2
    7f5c:	b2da      	uxtb	r2, r3
    7f5e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7f62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f66:	701a      	strb	r2, [r3, #0]
    7f68:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f70:	781b      	ldrb	r3, [r3, #0]
    7f72:	3301      	adds	r3, #1
    7f74:	b2da      	uxtb	r2, r3
    7f76:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f7e:	701a      	strb	r2, [r3, #0]
    7f80:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f88:	781b      	ldrb	r3, [r3, #0]
    7f8a:	2bff      	cmp	r3, #255	; 0xff
    7f8c:	d105      	bne.n	7f9a <send_boot+0xa16>
    7f8e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f96:	2200      	movs	r2, #0
    7f98:	701a      	strb	r2, [r3, #0]
    7f9a:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fa2:	781b      	ldrb	r3, [r3, #0]
    7fa4:	461a      	mov	r2, r3
    7fa6:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    7faa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fae:	7859      	ldrb	r1, [r3, #1]
    7fb0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7fb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fb8:	5499      	strb	r1, [r3, r2]
    7fba:	4b8b      	ldr	r3, [pc, #556]	; (81e8 <send_boot+0xc64>)
    7fbc:	781a      	ldrb	r2, [r3, #0]
    7fbe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7fc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fc6:	781b      	ldrb	r3, [r3, #0]
    7fc8:	4413      	add	r3, r2
    7fca:	b2da      	uxtb	r2, r3
    7fcc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7fd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fd4:	701a      	strb	r2, [r3, #0]
    7fd6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7fda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fde:	781a      	ldrb	r2, [r3, #0]
    7fe0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7fe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fe8:	781b      	ldrb	r3, [r3, #0]
    7fea:	4413      	add	r3, r2
    7fec:	b2da      	uxtb	r2, r3
    7fee:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7ff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ff6:	701a      	strb	r2, [r3, #0]
    7ff8:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ffc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8000:	781b      	ldrb	r3, [r3, #0]
    8002:	3301      	adds	r3, #1
    8004:	b2da      	uxtb	r2, r3
    8006:	f24c 5349 	movw	r3, #50505	; 0xc549
    800a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    800e:	701a      	strb	r2, [r3, #0]
    8010:	f24c 5349 	movw	r3, #50505	; 0xc549
    8014:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8018:	781b      	ldrb	r3, [r3, #0]
    801a:	2bff      	cmp	r3, #255	; 0xff
    801c:	d105      	bne.n	802a <send_boot+0xaa6>
    801e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8022:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8026:	2200      	movs	r2, #0
    8028:	701a      	strb	r2, [r3, #0]
    802a:	f24c 5349 	movw	r3, #50505	; 0xc549
    802e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8032:	781b      	ldrb	r3, [r3, #0]
    8034:	461a      	mov	r2, r3
    8036:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    803a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    803e:	7899      	ldrb	r1, [r3, #2]
    8040:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8044:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8048:	5499      	strb	r1, [r3, r2]
    804a:	4b68      	ldr	r3, [pc, #416]	; (81ec <send_boot+0xc68>)
    804c:	781a      	ldrb	r2, [r3, #0]
    804e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8052:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8056:	781b      	ldrb	r3, [r3, #0]
    8058:	4413      	add	r3, r2
    805a:	b2da      	uxtb	r2, r3
    805c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8060:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8064:	701a      	strb	r2, [r3, #0]
    8066:	f24c 634e 	movw	r3, #50766	; 0xc64e
    806a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    806e:	781a      	ldrb	r2, [r3, #0]
    8070:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8074:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8078:	781b      	ldrb	r3, [r3, #0]
    807a:	4413      	add	r3, r2
    807c:	b2da      	uxtb	r2, r3
    807e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8082:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8086:	701a      	strb	r2, [r3, #0]
    8088:	f24c 5349 	movw	r3, #50505	; 0xc549
    808c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8090:	781b      	ldrb	r3, [r3, #0]
    8092:	3301      	adds	r3, #1
    8094:	b2da      	uxtb	r2, r3
    8096:	f24c 5349 	movw	r3, #50505	; 0xc549
    809a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    809e:	701a      	strb	r2, [r3, #0]
    80a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    80a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80a8:	781b      	ldrb	r3, [r3, #0]
    80aa:	2bff      	cmp	r3, #255	; 0xff
    80ac:	d105      	bne.n	80ba <send_boot+0xb36>
    80ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    80b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80b6:	2200      	movs	r2, #0
    80b8:	701a      	strb	r2, [r3, #0]
    80ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    80be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80c2:	781b      	ldrb	r3, [r3, #0]
    80c4:	461a      	mov	r2, r3
    80c6:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    80ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80ce:	78d9      	ldrb	r1, [r3, #3]
    80d0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    80d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80d8:	5499      	strb	r1, [r3, r2]
    80da:	4b45      	ldr	r3, [pc, #276]	; (81f0 <send_boot+0xc6c>)
    80dc:	781a      	ldrb	r2, [r3, #0]
    80de:	f24c 634d 	movw	r3, #50765	; 0xc64d
    80e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80e6:	781b      	ldrb	r3, [r3, #0]
    80e8:	4413      	add	r3, r2
    80ea:	b2da      	uxtb	r2, r3
    80ec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    80f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80f4:	701a      	strb	r2, [r3, #0]
    80f6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    80fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80fe:	781a      	ldrb	r2, [r3, #0]
    8100:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8104:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8108:	781b      	ldrb	r3, [r3, #0]
    810a:	4413      	add	r3, r2
    810c:	b2da      	uxtb	r2, r3
    810e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8112:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8116:	701a      	strb	r2, [r3, #0]
    8118:	f24c 5349 	movw	r3, #50505	; 0xc549
    811c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8120:	781b      	ldrb	r3, [r3, #0]
    8122:	3301      	adds	r3, #1
    8124:	b2da      	uxtb	r2, r3
    8126:	f24c 5349 	movw	r3, #50505	; 0xc549
    812a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    812e:	701a      	strb	r2, [r3, #0]
    8130:	f24c 5349 	movw	r3, #50505	; 0xc549
    8134:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8138:	781b      	ldrb	r3, [r3, #0]
    813a:	2bff      	cmp	r3, #255	; 0xff
    813c:	d105      	bne.n	814a <send_boot+0xbc6>
    813e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8142:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8146:	2200      	movs	r2, #0
    8148:	701a      	strb	r2, [r3, #0]
    814a:	f24c 5349 	movw	r3, #50505	; 0xc549
    814e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8152:	781b      	ldrb	r3, [r3, #0]
    8154:	461a      	mov	r2, r3
    8156:	f240 5342 	movw	r3, #1346	; 0x542
    815a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    815e:	7819      	ldrb	r1, [r3, #0]
    8160:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8164:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8168:	5499      	strb	r1, [r3, r2]
    816a:	f240 5342 	movw	r3, #1346	; 0x542
    816e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8172:	781a      	ldrb	r2, [r3, #0]
    8174:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    817c:	781b      	ldrb	r3, [r3, #0]
    817e:	4413      	add	r3, r2
    8180:	b2da      	uxtb	r2, r3
    8182:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    818a:	701a      	strb	r2, [r3, #0]
    818c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8190:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8194:	781a      	ldrb	r2, [r3, #0]
    8196:	f24c 634d 	movw	r3, #50765	; 0xc64d
    819a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    819e:	781b      	ldrb	r3, [r3, #0]
    81a0:	4413      	add	r3, r2
    81a2:	b2da      	uxtb	r2, r3
    81a4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    81a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81ac:	701a      	strb	r2, [r3, #0]
    81ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    81b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81b6:	781b      	ldrb	r3, [r3, #0]
    81b8:	3301      	adds	r3, #1
    81ba:	b2da      	uxtb	r2, r3
    81bc:	f24c 5349 	movw	r3, #50505	; 0xc549
    81c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81c4:	701a      	strb	r2, [r3, #0]
    81c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    81ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81ce:	781b      	ldrb	r3, [r3, #0]
    81d0:	2bff      	cmp	r3, #255	; 0xff
    81d2:	d10f      	bne.n	81f4 <send_boot+0xc70>
    81d4:	f24c 5349 	movw	r3, #50505	; 0xc549
    81d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81dc:	2200      	movs	r2, #0
    81de:	701a      	strb	r2, [r3, #0]
    81e0:	e008      	b.n	81f4 <send_boot+0xc70>
    81e2:	bf00      	nop
    81e4:	2004cb47 	.word	0x2004cb47
    81e8:	2004cb3d 	.word	0x2004cb3d
    81ec:	2004cb3e 	.word	0x2004cb3e
    81f0:	2004cb3f 	.word	0x2004cb3f
    81f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    81f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81fc:	781b      	ldrb	r3, [r3, #0]
    81fe:	461a      	mov	r2, r3
    8200:	f240 5342 	movw	r3, #1346	; 0x542
    8204:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8208:	7859      	ldrb	r1, [r3, #1]
    820a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    820e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8212:	5499      	strb	r1, [r3, r2]
    8214:	4bc5      	ldr	r3, [pc, #788]	; (852c <send_boot+0xfa8>)
    8216:	781a      	ldrb	r2, [r3, #0]
    8218:	f24c 634d 	movw	r3, #50765	; 0xc64d
    821c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8220:	781b      	ldrb	r3, [r3, #0]
    8222:	4413      	add	r3, r2
    8224:	b2da      	uxtb	r2, r3
    8226:	f24c 634d 	movw	r3, #50765	; 0xc64d
    822a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    822e:	701a      	strb	r2, [r3, #0]
    8230:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8234:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8238:	781a      	ldrb	r2, [r3, #0]
    823a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    823e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8242:	781b      	ldrb	r3, [r3, #0]
    8244:	4413      	add	r3, r2
    8246:	b2da      	uxtb	r2, r3
    8248:	f24c 634e 	movw	r3, #50766	; 0xc64e
    824c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8250:	701a      	strb	r2, [r3, #0]
    8252:	f24c 5349 	movw	r3, #50505	; 0xc549
    8256:	f2c2 0304 	movt	r3, #8196	; 0x2004
    825a:	781b      	ldrb	r3, [r3, #0]
    825c:	3301      	adds	r3, #1
    825e:	b2da      	uxtb	r2, r3
    8260:	f24c 5349 	movw	r3, #50505	; 0xc549
    8264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8268:	701a      	strb	r2, [r3, #0]
    826a:	f24c 5349 	movw	r3, #50505	; 0xc549
    826e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8272:	781b      	ldrb	r3, [r3, #0]
    8274:	2bff      	cmp	r3, #255	; 0xff
    8276:	d105      	bne.n	8284 <send_boot+0xd00>
    8278:	f24c 5349 	movw	r3, #50505	; 0xc549
    827c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8280:	2200      	movs	r2, #0
    8282:	701a      	strb	r2, [r3, #0]
    8284:	f24c 5349 	movw	r3, #50505	; 0xc549
    8288:	f2c2 0304 	movt	r3, #8196	; 0x2004
    828c:	781b      	ldrb	r3, [r3, #0]
    828e:	461a      	mov	r2, r3
    8290:	f240 5344 	movw	r3, #1348	; 0x544
    8294:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8298:	7819      	ldrb	r1, [r3, #0]
    829a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    829e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82a2:	5499      	strb	r1, [r3, r2]
    82a4:	f240 5344 	movw	r3, #1348	; 0x544
    82a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82ac:	781a      	ldrb	r2, [r3, #0]
    82ae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    82b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82b6:	781b      	ldrb	r3, [r3, #0]
    82b8:	4413      	add	r3, r2
    82ba:	b2da      	uxtb	r2, r3
    82bc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    82c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82c4:	701a      	strb	r2, [r3, #0]
    82c6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    82ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82ce:	781a      	ldrb	r2, [r3, #0]
    82d0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    82d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82d8:	781b      	ldrb	r3, [r3, #0]
    82da:	4413      	add	r3, r2
    82dc:	b2da      	uxtb	r2, r3
    82de:	f24c 634e 	movw	r3, #50766	; 0xc64e
    82e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82e6:	701a      	strb	r2, [r3, #0]
    82e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    82ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82f0:	781b      	ldrb	r3, [r3, #0]
    82f2:	3301      	adds	r3, #1
    82f4:	b2da      	uxtb	r2, r3
    82f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    82fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82fe:	701a      	strb	r2, [r3, #0]
    8300:	f24c 5349 	movw	r3, #50505	; 0xc549
    8304:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8308:	781b      	ldrb	r3, [r3, #0]
    830a:	2bff      	cmp	r3, #255	; 0xff
    830c:	d105      	bne.n	831a <send_boot+0xd96>
    830e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8312:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8316:	2200      	movs	r2, #0
    8318:	701a      	strb	r2, [r3, #0]
    831a:	f24c 5349 	movw	r3, #50505	; 0xc549
    831e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8322:	781b      	ldrb	r3, [r3, #0]
    8324:	461a      	mov	r2, r3
    8326:	f240 5344 	movw	r3, #1348	; 0x544
    832a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    832e:	7859      	ldrb	r1, [r3, #1]
    8330:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8334:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8338:	5499      	strb	r1, [r3, r2]
    833a:	4b7d      	ldr	r3, [pc, #500]	; (8530 <send_boot+0xfac>)
    833c:	781a      	ldrb	r2, [r3, #0]
    833e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8342:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8346:	781b      	ldrb	r3, [r3, #0]
    8348:	4413      	add	r3, r2
    834a:	b2da      	uxtb	r2, r3
    834c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8350:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8354:	701a      	strb	r2, [r3, #0]
    8356:	f24c 634e 	movw	r3, #50766	; 0xc64e
    835a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    835e:	781a      	ldrb	r2, [r3, #0]
    8360:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8364:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8368:	781b      	ldrb	r3, [r3, #0]
    836a:	4413      	add	r3, r2
    836c:	b2da      	uxtb	r2, r3
    836e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8376:	701a      	strb	r2, [r3, #0]
    8378:	f24c 5349 	movw	r3, #50505	; 0xc549
    837c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8380:	781b      	ldrb	r3, [r3, #0]
    8382:	3301      	adds	r3, #1
    8384:	b2da      	uxtb	r2, r3
    8386:	f24c 5349 	movw	r3, #50505	; 0xc549
    838a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    838e:	701a      	strb	r2, [r3, #0]
    8390:	f24c 5349 	movw	r3, #50505	; 0xc549
    8394:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8398:	781b      	ldrb	r3, [r3, #0]
    839a:	2bff      	cmp	r3, #255	; 0xff
    839c:	d105      	bne.n	83aa <send_boot+0xe26>
    839e:	f24c 5349 	movw	r3, #50505	; 0xc549
    83a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83a6:	2200      	movs	r2, #0
    83a8:	701a      	strb	r2, [r3, #0]
    83aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    83ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83b2:	781b      	ldrb	r3, [r3, #0]
    83b4:	461a      	mov	r2, r3
    83b6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    83ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83be:	7819      	ldrb	r1, [r3, #0]
    83c0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    83c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83c8:	5499      	strb	r1, [r3, r2]
    83ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    83ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83d2:	781b      	ldrb	r3, [r3, #0]
    83d4:	3301      	adds	r3, #1
    83d6:	b2da      	uxtb	r2, r3
    83d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    83dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83e0:	701a      	strb	r2, [r3, #0]
    83e2:	f24c 5349 	movw	r3, #50505	; 0xc549
    83e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83ea:	781b      	ldrb	r3, [r3, #0]
    83ec:	2bff      	cmp	r3, #255	; 0xff
    83ee:	d105      	bne.n	83fc <send_boot+0xe78>
    83f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    83f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83f8:	2200      	movs	r2, #0
    83fa:	701a      	strb	r2, [r3, #0]
    83fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    8400:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8404:	781b      	ldrb	r3, [r3, #0]
    8406:	461a      	mov	r2, r3
    8408:	f24c 634e 	movw	r3, #50766	; 0xc64e
    840c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8410:	7819      	ldrb	r1, [r3, #0]
    8412:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    841a:	5499      	strb	r1, [r3, r2]
    841c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8420:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8424:	781b      	ldrb	r3, [r3, #0]
    8426:	3301      	adds	r3, #1
    8428:	b2da      	uxtb	r2, r3
    842a:	f24c 5349 	movw	r3, #50505	; 0xc549
    842e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8432:	701a      	strb	r2, [r3, #0]
    8434:	f24c 5349 	movw	r3, #50505	; 0xc549
    8438:	f2c2 0304 	movt	r3, #8196	; 0x2004
    843c:	781b      	ldrb	r3, [r3, #0]
    843e:	2bff      	cmp	r3, #255	; 0xff
    8440:	d105      	bne.n	844e <send_boot+0xeca>
    8442:	f24c 5349 	movw	r3, #50505	; 0xc549
    8446:	f2c2 0304 	movt	r3, #8196	; 0x2004
    844a:	2200      	movs	r2, #0
    844c:	701a      	strb	r2, [r3, #0]
    844e:	f242 0339 	movw	r3, #8249	; 0x2039
    8452:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8456:	781b      	ldrb	r3, [r3, #0]
    8458:	b2db      	uxtb	r3, r3
    845a:	f003 0310 	and.w	r3, r3, #16
    845e:	2b00      	cmp	r3, #0
    8460:	d15a      	bne.n	8518 <send_boot+0xf94>
    8462:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8466:	f2c2 0304 	movt	r3, #8196	; 0x2004
    846a:	781b      	ldrb	r3, [r3, #0]
    846c:	b2db      	uxtb	r3, r3
    846e:	461a      	mov	r2, r3
    8470:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8474:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8478:	5c9a      	ldrb	r2, [r3, r2]
    847a:	f24c 634b 	movw	r3, #50763	; 0xc64b
    847e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8482:	701a      	strb	r2, [r3, #0]
    8484:	f24c 634c 	movw	r3, #50764	; 0xc64c
    8488:	f2c2 0304 	movt	r3, #8196	; 0x2004
    848c:	2200      	movs	r2, #0
    848e:	701a      	strb	r2, [r3, #0]
    8490:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8494:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8498:	781b      	ldrb	r3, [r3, #0]
    849a:	b2db      	uxtb	r3, r3
    849c:	3301      	adds	r3, #1
    849e:	b2da      	uxtb	r2, r3
    84a0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    84a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84a8:	701a      	strb	r2, [r3, #0]
    84aa:	f24c 534a 	movw	r3, #50506	; 0xc54a
    84ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84b2:	781b      	ldrb	r3, [r3, #0]
    84b4:	b2db      	uxtb	r3, r3
    84b6:	2bff      	cmp	r3, #255	; 0xff
    84b8:	d105      	bne.n	84c6 <send_boot+0xf42>
    84ba:	f24c 534a 	movw	r3, #50506	; 0xc54a
    84be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84c2:	2200      	movs	r2, #0
    84c4:	701a      	strb	r2, [r3, #0]
    84c6:	f242 0338 	movw	r3, #8248	; 0x2038
    84ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84ce:	f242 0238 	movw	r2, #8248	; 0x2038
    84d2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    84d6:	7812      	ldrb	r2, [r2, #0]
    84d8:	b2d2      	uxtb	r2, r2
    84da:	f042 0201 	orr.w	r2, r2, #1
    84de:	b2d2      	uxtb	r2, r2
    84e0:	701a      	strb	r2, [r3, #0]
    84e2:	f242 0339 	movw	r3, #8249	; 0x2039
    84e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84ea:	f242 0239 	movw	r2, #8249	; 0x2039
    84ee:	f2c2 0200 	movt	r2, #8192	; 0x2000
    84f2:	7812      	ldrb	r2, [r2, #0]
    84f4:	b2d2      	uxtb	r2, r2
    84f6:	f042 0210 	orr.w	r2, r2, #16
    84fa:	b2d2      	uxtb	r2, r2
    84fc:	701a      	strb	r2, [r3, #0]
    84fe:	e00b      	b.n	8518 <send_boot+0xf94>
    8500:	f24c 5348 	movw	r3, #50504	; 0xc548
    8504:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8508:	781b      	ldrb	r3, [r3, #0]
    850a:	3301      	adds	r3, #1
    850c:	b2da      	uxtb	r2, r3
    850e:	f24c 5348 	movw	r3, #50504	; 0xc548
    8512:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8516:	701a      	strb	r2, [r3, #0]
      boot = FALSE;
    8518:	f240 533d 	movw	r3, #1341	; 0x53d
    851c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8520:	2200      	movs	r2, #0
    8522:	701a      	strb	r2, [r3, #0]
  }
}
    8524:	46bd      	mov	sp, r7
    8526:	f85d 7b04 	ldr.w	r7, [sp], #4
    852a:	4770      	bx	lr
    852c:	20000543 	.word	0x20000543
    8530:	20000545 	.word	0x20000545

00008534 <send_attitude>:
void send_attitude(void){ //499ms
    8534:	b480      	push	{r7}
    8536:	af00      	add	r7, sp, #0
    // add by wanbo
  if(!boot)
    8538:	f240 533d 	movw	r3, #1341	; 0x53d
    853c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8540:	781b      	ldrb	r3, [r3, #0]
    8542:	2b00      	cmp	r3, #0
    8544:	f040 84ee 	bne.w	8f24 <send_attitude+0x9f0>
  {
    count++;
    8548:	f24c 5341 	movw	r3, #50497	; 0xc541
    854c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8550:	781b      	ldrb	r3, [r3, #0]
    8552:	3301      	adds	r3, #1
    8554:	b2da      	uxtb	r2, r3
    8556:	f24c 5341 	movw	r3, #50497	; 0xc541
    855a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    855e:	701a      	strb	r2, [r3, #0]
    if (count == 250) count = 0;
    8560:	f24c 5341 	movw	r3, #50497	; 0xc541
    8564:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8568:	781b      	ldrb	r3, [r3, #0]
    856a:	2bfa      	cmp	r3, #250	; 0xfa
    856c:	d105      	bne.n	857a <send_attitude+0x46>
    856e:	f24c 5341 	movw	r3, #50497	; 0xc541
    8572:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8576:	2200      	movs	r2, #0
    8578:	701a      	strb	r2, [r3, #0]
    if (count % 5 == 0) 
    857a:	f24c 5341 	movw	r3, #50497	; 0xc541
    857e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8582:	781a      	ldrb	r2, [r3, #0]
    8584:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8588:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    858c:	fba3 1302 	umull	r1, r3, r3, r2
    8590:	0899      	lsrs	r1, r3, #2
    8592:	460b      	mov	r3, r1
    8594:	009b      	lsls	r3, r3, #2
    8596:	440b      	add	r3, r1
    8598:	1ad3      	subs	r3, r2, r3
    859a:	b2db      	uxtb	r3, r3
    859c:	2b00      	cmp	r3, #0
    859e:	f040 84c1 	bne.w	8f24 <send_attitude+0x9f0>
       PERIODIC_SEND_ATTITUDE(); 
    85a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    85a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85aa:	781a      	ldrb	r2, [r3, #0]
    85ac:	f24c 534a 	movw	r3, #50506	; 0xc54a
    85b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85b4:	781b      	ldrb	r3, [r3, #0]
    85b6:	b2db      	uxtb	r3, r3
    85b8:	429a      	cmp	r2, r3
    85ba:	d313      	bcc.n	85e4 <send_attitude+0xb0>
    85bc:	f24c 534a 	movw	r3, #50506	; 0xc54a
    85c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85c4:	781b      	ldrb	r3, [r3, #0]
    85c6:	b2db      	uxtb	r3, r3
    85c8:	461a      	mov	r2, r3
    85ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    85ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85d2:	781b      	ldrb	r3, [r3, #0]
    85d4:	1ad3      	subs	r3, r2, r3
    85d6:	33ff      	adds	r3, #255	; 0xff
    85d8:	2b10      	cmp	r3, #16
    85da:	bfd4      	ite	le
    85dc:	2300      	movle	r3, #0
    85de:	2301      	movgt	r3, #1
    85e0:	b2db      	uxtb	r3, r3
    85e2:	e011      	b.n	8608 <send_attitude+0xd4>
    85e4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    85e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85ec:	781b      	ldrb	r3, [r3, #0]
    85ee:	b2db      	uxtb	r3, r3
    85f0:	461a      	mov	r2, r3
    85f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    85f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85fa:	781b      	ldrb	r3, [r3, #0]
    85fc:	1ad3      	subs	r3, r2, r3
    85fe:	2b10      	cmp	r3, #16
    8600:	bfd4      	ite	le
    8602:	2300      	movle	r3, #0
    8604:	2301      	movgt	r3, #1
    8606:	b2db      	uxtb	r3, r3
    8608:	2b00      	cmp	r3, #0
    860a:	f000 847f 	beq.w	8f0c <send_attitude+0x9d8>
    860e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8612:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8616:	781b      	ldrb	r3, [r3, #0]
    8618:	461a      	mov	r2, r3
    861a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    861e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8622:	2105      	movs	r1, #5
    8624:	5499      	strb	r1, [r3, r2]
    8626:	f24c 5349 	movw	r3, #50505	; 0xc549
    862a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    862e:	781b      	ldrb	r3, [r3, #0]
    8630:	3301      	adds	r3, #1
    8632:	b2da      	uxtb	r2, r3
    8634:	f24c 5349 	movw	r3, #50505	; 0xc549
    8638:	f2c2 0304 	movt	r3, #8196	; 0x2004
    863c:	701a      	strb	r2, [r3, #0]
    863e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8642:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8646:	781b      	ldrb	r3, [r3, #0]
    8648:	2bff      	cmp	r3, #255	; 0xff
    864a:	d105      	bne.n	8658 <send_attitude+0x124>
    864c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8650:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8654:	2200      	movs	r2, #0
    8656:	701a      	strb	r2, [r3, #0]
    8658:	f24c 5349 	movw	r3, #50505	; 0xc549
    865c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8660:	781b      	ldrb	r3, [r3, #0]
    8662:	461a      	mov	r2, r3
    8664:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8668:	f2c2 0304 	movt	r3, #8196	; 0x2004
    866c:	2106      	movs	r1, #6
    866e:	5499      	strb	r1, [r3, r2]
    8670:	f24c 5349 	movw	r3, #50505	; 0xc549
    8674:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8678:	781b      	ldrb	r3, [r3, #0]
    867a:	3301      	adds	r3, #1
    867c:	b2da      	uxtb	r2, r3
    867e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8682:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8686:	701a      	strb	r2, [r3, #0]
    8688:	f24c 5349 	movw	r3, #50505	; 0xc549
    868c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8690:	781b      	ldrb	r3, [r3, #0]
    8692:	2bff      	cmp	r3, #255	; 0xff
    8694:	d105      	bne.n	86a2 <send_attitude+0x16e>
    8696:	f24c 5349 	movw	r3, #50505	; 0xc549
    869a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    869e:	2200      	movs	r2, #0
    86a0:	701a      	strb	r2, [r3, #0]
    86a2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    86a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86aa:	2206      	movs	r2, #6
    86ac:	701a      	strb	r2, [r3, #0]
    86ae:	f24c 634e 	movw	r3, #50766	; 0xc64e
    86b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86b6:	2206      	movs	r2, #6
    86b8:	701a      	strb	r2, [r3, #0]
    86ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    86be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86c2:	781b      	ldrb	r3, [r3, #0]
    86c4:	461a      	mov	r2, r3
    86c6:	f64c 3308 	movw	r3, #51976	; 0xcb08
    86ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86ce:	7819      	ldrb	r1, [r3, #0]
    86d0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    86d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86d8:	5499      	strb	r1, [r3, r2]
    86da:	f64c 3308 	movw	r3, #51976	; 0xcb08
    86de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86e2:	781a      	ldrb	r2, [r3, #0]
    86e4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    86e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86ec:	781b      	ldrb	r3, [r3, #0]
    86ee:	4413      	add	r3, r2
    86f0:	b2da      	uxtb	r2, r3
    86f2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    86f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86fa:	701a      	strb	r2, [r3, #0]
    86fc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8704:	781a      	ldrb	r2, [r3, #0]
    8706:	f24c 634d 	movw	r3, #50765	; 0xc64d
    870a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    870e:	781b      	ldrb	r3, [r3, #0]
    8710:	4413      	add	r3, r2
    8712:	b2da      	uxtb	r2, r3
    8714:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8718:	f2c2 0304 	movt	r3, #8196	; 0x2004
    871c:	701a      	strb	r2, [r3, #0]
    871e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8722:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8726:	781b      	ldrb	r3, [r3, #0]
    8728:	3301      	adds	r3, #1
    872a:	b2da      	uxtb	r2, r3
    872c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8730:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8734:	701a      	strb	r2, [r3, #0]
    8736:	f24c 5349 	movw	r3, #50505	; 0xc549
    873a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    873e:	781b      	ldrb	r3, [r3, #0]
    8740:	2bff      	cmp	r3, #255	; 0xff
    8742:	d105      	bne.n	8750 <send_attitude+0x21c>
    8744:	f24c 5349 	movw	r3, #50505	; 0xc549
    8748:	f2c2 0304 	movt	r3, #8196	; 0x2004
    874c:	2200      	movs	r2, #0
    874e:	701a      	strb	r2, [r3, #0]
    8750:	f24c 5349 	movw	r3, #50505	; 0xc549
    8754:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8758:	781b      	ldrb	r3, [r3, #0]
    875a:	461a      	mov	r2, r3
    875c:	f64c 3308 	movw	r3, #51976	; 0xcb08
    8760:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8764:	7859      	ldrb	r1, [r3, #1]
    8766:	f24c 534c 	movw	r3, #50508	; 0xc54c
    876a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    876e:	5499      	strb	r1, [r3, r2]
    8770:	4bd1      	ldr	r3, [pc, #836]	; (8ab8 <send_attitude+0x584>)
    8772:	781a      	ldrb	r2, [r3, #0]
    8774:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8778:	f2c2 0304 	movt	r3, #8196	; 0x2004
    877c:	781b      	ldrb	r3, [r3, #0]
    877e:	4413      	add	r3, r2
    8780:	b2da      	uxtb	r2, r3
    8782:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8786:	f2c2 0304 	movt	r3, #8196	; 0x2004
    878a:	701a      	strb	r2, [r3, #0]
    878c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8790:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8794:	781a      	ldrb	r2, [r3, #0]
    8796:	f24c 634d 	movw	r3, #50765	; 0xc64d
    879a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    879e:	781b      	ldrb	r3, [r3, #0]
    87a0:	4413      	add	r3, r2
    87a2:	b2da      	uxtb	r2, r3
    87a4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    87a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87ac:	701a      	strb	r2, [r3, #0]
    87ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    87b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87b6:	781b      	ldrb	r3, [r3, #0]
    87b8:	3301      	adds	r3, #1
    87ba:	b2da      	uxtb	r2, r3
    87bc:	f24c 5349 	movw	r3, #50505	; 0xc549
    87c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87c4:	701a      	strb	r2, [r3, #0]
    87c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    87ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87ce:	781b      	ldrb	r3, [r3, #0]
    87d0:	2bff      	cmp	r3, #255	; 0xff
    87d2:	d105      	bne.n	87e0 <send_attitude+0x2ac>
    87d4:	f24c 5349 	movw	r3, #50505	; 0xc549
    87d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87dc:	2200      	movs	r2, #0
    87de:	701a      	strb	r2, [r3, #0]
    87e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    87e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87e8:	781b      	ldrb	r3, [r3, #0]
    87ea:	461a      	mov	r2, r3
    87ec:	f64c 3308 	movw	r3, #51976	; 0xcb08
    87f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87f4:	7899      	ldrb	r1, [r3, #2]
    87f6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    87fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87fe:	5499      	strb	r1, [r3, r2]
    8800:	4bae      	ldr	r3, [pc, #696]	; (8abc <send_attitude+0x588>)
    8802:	781a      	ldrb	r2, [r3, #0]
    8804:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    880c:	781b      	ldrb	r3, [r3, #0]
    880e:	4413      	add	r3, r2
    8810:	b2da      	uxtb	r2, r3
    8812:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8816:	f2c2 0304 	movt	r3, #8196	; 0x2004
    881a:	701a      	strb	r2, [r3, #0]
    881c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8820:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8824:	781a      	ldrb	r2, [r3, #0]
    8826:	f24c 634d 	movw	r3, #50765	; 0xc64d
    882a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    882e:	781b      	ldrb	r3, [r3, #0]
    8830:	4413      	add	r3, r2
    8832:	b2da      	uxtb	r2, r3
    8834:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    883c:	701a      	strb	r2, [r3, #0]
    883e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8842:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8846:	781b      	ldrb	r3, [r3, #0]
    8848:	3301      	adds	r3, #1
    884a:	b2da      	uxtb	r2, r3
    884c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8850:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8854:	701a      	strb	r2, [r3, #0]
    8856:	f24c 5349 	movw	r3, #50505	; 0xc549
    885a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    885e:	781b      	ldrb	r3, [r3, #0]
    8860:	2bff      	cmp	r3, #255	; 0xff
    8862:	d105      	bne.n	8870 <send_attitude+0x33c>
    8864:	f24c 5349 	movw	r3, #50505	; 0xc549
    8868:	f2c2 0304 	movt	r3, #8196	; 0x2004
    886c:	2200      	movs	r2, #0
    886e:	701a      	strb	r2, [r3, #0]
    8870:	f24c 5349 	movw	r3, #50505	; 0xc549
    8874:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8878:	781b      	ldrb	r3, [r3, #0]
    887a:	461a      	mov	r2, r3
    887c:	f64c 3308 	movw	r3, #51976	; 0xcb08
    8880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8884:	78d9      	ldrb	r1, [r3, #3]
    8886:	f24c 534c 	movw	r3, #50508	; 0xc54c
    888a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    888e:	5499      	strb	r1, [r3, r2]
    8890:	4b8b      	ldr	r3, [pc, #556]	; (8ac0 <send_attitude+0x58c>)
    8892:	781a      	ldrb	r2, [r3, #0]
    8894:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8898:	f2c2 0304 	movt	r3, #8196	; 0x2004
    889c:	781b      	ldrb	r3, [r3, #0]
    889e:	4413      	add	r3, r2
    88a0:	b2da      	uxtb	r2, r3
    88a2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    88a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88aa:	701a      	strb	r2, [r3, #0]
    88ac:	f24c 634e 	movw	r3, #50766	; 0xc64e
    88b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88b4:	781a      	ldrb	r2, [r3, #0]
    88b6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    88ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88be:	781b      	ldrb	r3, [r3, #0]
    88c0:	4413      	add	r3, r2
    88c2:	b2da      	uxtb	r2, r3
    88c4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    88c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88cc:	701a      	strb	r2, [r3, #0]
    88ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    88d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88d6:	781b      	ldrb	r3, [r3, #0]
    88d8:	3301      	adds	r3, #1
    88da:	b2da      	uxtb	r2, r3
    88dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    88e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88e4:	701a      	strb	r2, [r3, #0]
    88e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    88ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88ee:	781b      	ldrb	r3, [r3, #0]
    88f0:	2bff      	cmp	r3, #255	; 0xff
    88f2:	d105      	bne.n	8900 <send_attitude+0x3cc>
    88f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    88f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88fc:	2200      	movs	r2, #0
    88fe:	701a      	strb	r2, [r3, #0]
    8900:	f24c 5349 	movw	r3, #50505	; 0xc549
    8904:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8908:	781b      	ldrb	r3, [r3, #0]
    890a:	461a      	mov	r2, r3
    890c:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    8910:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8914:	7819      	ldrb	r1, [r3, #0]
    8916:	f24c 534c 	movw	r3, #50508	; 0xc54c
    891a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    891e:	5499      	strb	r1, [r3, r2]
    8920:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    8924:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8928:	781a      	ldrb	r2, [r3, #0]
    892a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    892e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8932:	781b      	ldrb	r3, [r3, #0]
    8934:	4413      	add	r3, r2
    8936:	b2da      	uxtb	r2, r3
    8938:	f24c 634d 	movw	r3, #50765	; 0xc64d
    893c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8940:	701a      	strb	r2, [r3, #0]
    8942:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8946:	f2c2 0304 	movt	r3, #8196	; 0x2004
    894a:	781a      	ldrb	r2, [r3, #0]
    894c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8950:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8954:	781b      	ldrb	r3, [r3, #0]
    8956:	4413      	add	r3, r2
    8958:	b2da      	uxtb	r2, r3
    895a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    895e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8962:	701a      	strb	r2, [r3, #0]
    8964:	f24c 5349 	movw	r3, #50505	; 0xc549
    8968:	f2c2 0304 	movt	r3, #8196	; 0x2004
    896c:	781b      	ldrb	r3, [r3, #0]
    896e:	3301      	adds	r3, #1
    8970:	b2da      	uxtb	r2, r3
    8972:	f24c 5349 	movw	r3, #50505	; 0xc549
    8976:	f2c2 0304 	movt	r3, #8196	; 0x2004
    897a:	701a      	strb	r2, [r3, #0]
    897c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8980:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8984:	781b      	ldrb	r3, [r3, #0]
    8986:	2bff      	cmp	r3, #255	; 0xff
    8988:	d105      	bne.n	8996 <send_attitude+0x462>
    898a:	f24c 5349 	movw	r3, #50505	; 0xc549
    898e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8992:	2200      	movs	r2, #0
    8994:	701a      	strb	r2, [r3, #0]
    8996:	f24c 5349 	movw	r3, #50505	; 0xc549
    899a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    899e:	781b      	ldrb	r3, [r3, #0]
    89a0:	461a      	mov	r2, r3
    89a2:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    89a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89aa:	7859      	ldrb	r1, [r3, #1]
    89ac:	f24c 534c 	movw	r3, #50508	; 0xc54c
    89b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89b4:	5499      	strb	r1, [r3, r2]
    89b6:	4b43      	ldr	r3, [pc, #268]	; (8ac4 <send_attitude+0x590>)
    89b8:	781a      	ldrb	r2, [r3, #0]
    89ba:	f24c 634d 	movw	r3, #50765	; 0xc64d
    89be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89c2:	781b      	ldrb	r3, [r3, #0]
    89c4:	4413      	add	r3, r2
    89c6:	b2da      	uxtb	r2, r3
    89c8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    89cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89d0:	701a      	strb	r2, [r3, #0]
    89d2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    89d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89da:	781a      	ldrb	r2, [r3, #0]
    89dc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    89e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89e4:	781b      	ldrb	r3, [r3, #0]
    89e6:	4413      	add	r3, r2
    89e8:	b2da      	uxtb	r2, r3
    89ea:	f24c 634e 	movw	r3, #50766	; 0xc64e
    89ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89f2:	701a      	strb	r2, [r3, #0]
    89f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    89f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89fc:	781b      	ldrb	r3, [r3, #0]
    89fe:	3301      	adds	r3, #1
    8a00:	b2da      	uxtb	r2, r3
    8a02:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a0a:	701a      	strb	r2, [r3, #0]
    8a0c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a14:	781b      	ldrb	r3, [r3, #0]
    8a16:	2bff      	cmp	r3, #255	; 0xff
    8a18:	d105      	bne.n	8a26 <send_attitude+0x4f2>
    8a1a:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a22:	2200      	movs	r2, #0
    8a24:	701a      	strb	r2, [r3, #0]
    8a26:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a2e:	781b      	ldrb	r3, [r3, #0]
    8a30:	461a      	mov	r2, r3
    8a32:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    8a36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a3a:	7899      	ldrb	r1, [r3, #2]
    8a3c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8a40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a44:	5499      	strb	r1, [r3, r2]
    8a46:	4b20      	ldr	r3, [pc, #128]	; (8ac8 <send_attitude+0x594>)
    8a48:	781a      	ldrb	r2, [r3, #0]
    8a4a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8a4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a52:	781b      	ldrb	r3, [r3, #0]
    8a54:	4413      	add	r3, r2
    8a56:	b2da      	uxtb	r2, r3
    8a58:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8a5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a60:	701a      	strb	r2, [r3, #0]
    8a62:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8a66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a6a:	781a      	ldrb	r2, [r3, #0]
    8a6c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8a70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a74:	781b      	ldrb	r3, [r3, #0]
    8a76:	4413      	add	r3, r2
    8a78:	b2da      	uxtb	r2, r3
    8a7a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8a7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a82:	701a      	strb	r2, [r3, #0]
    8a84:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a8c:	781b      	ldrb	r3, [r3, #0]
    8a8e:	3301      	adds	r3, #1
    8a90:	b2da      	uxtb	r2, r3
    8a92:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a9a:	701a      	strb	r2, [r3, #0]
    8a9c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8aa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aa4:	781b      	ldrb	r3, [r3, #0]
    8aa6:	2bff      	cmp	r3, #255	; 0xff
    8aa8:	d110      	bne.n	8acc <send_attitude+0x598>
    8aaa:	f24c 5349 	movw	r3, #50505	; 0xc549
    8aae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ab2:	2200      	movs	r2, #0
    8ab4:	701a      	strb	r2, [r3, #0]
    8ab6:	e009      	b.n	8acc <send_attitude+0x598>
    8ab8:	2004cb09 	.word	0x2004cb09
    8abc:	2004cb0a 	.word	0x2004cb0a
    8ac0:	2004cb0b 	.word	0x2004cb0b
    8ac4:	2004cb0d 	.word	0x2004cb0d
    8ac8:	2004cb0e 	.word	0x2004cb0e
    8acc:	f24c 5349 	movw	r3, #50505	; 0xc549
    8ad0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ad4:	781b      	ldrb	r3, [r3, #0]
    8ad6:	461a      	mov	r2, r3
    8ad8:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    8adc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ae0:	78d9      	ldrb	r1, [r3, #3]
    8ae2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8ae6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aea:	5499      	strb	r1, [r3, r2]
    8aec:	4bc2      	ldr	r3, [pc, #776]	; (8df8 <send_attitude+0x8c4>)
    8aee:	781a      	ldrb	r2, [r3, #0]
    8af0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8af4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8af8:	781b      	ldrb	r3, [r3, #0]
    8afa:	4413      	add	r3, r2
    8afc:	b2da      	uxtb	r2, r3
    8afe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8b02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b06:	701a      	strb	r2, [r3, #0]
    8b08:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8b0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b10:	781a      	ldrb	r2, [r3, #0]
    8b12:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8b16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b1a:	781b      	ldrb	r3, [r3, #0]
    8b1c:	4413      	add	r3, r2
    8b1e:	b2da      	uxtb	r2, r3
    8b20:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8b24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b28:	701a      	strb	r2, [r3, #0]
    8b2a:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b32:	781b      	ldrb	r3, [r3, #0]
    8b34:	3301      	adds	r3, #1
    8b36:	b2da      	uxtb	r2, r3
    8b38:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b40:	701a      	strb	r2, [r3, #0]
    8b42:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b4a:	781b      	ldrb	r3, [r3, #0]
    8b4c:	2bff      	cmp	r3, #255	; 0xff
    8b4e:	d105      	bne.n	8b5c <send_attitude+0x628>
    8b50:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b58:	2200      	movs	r2, #0
    8b5a:	701a      	strb	r2, [r3, #0]
    8b5c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b64:	781b      	ldrb	r3, [r3, #0]
    8b66:	461a      	mov	r2, r3
    8b68:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8b6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b70:	7819      	ldrb	r1, [r3, #0]
    8b72:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8b76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b7a:	5499      	strb	r1, [r3, r2]
    8b7c:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8b80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b84:	781a      	ldrb	r2, [r3, #0]
    8b86:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8b8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b8e:	781b      	ldrb	r3, [r3, #0]
    8b90:	4413      	add	r3, r2
    8b92:	b2da      	uxtb	r2, r3
    8b94:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8b98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b9c:	701a      	strb	r2, [r3, #0]
    8b9e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8ba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ba6:	781a      	ldrb	r2, [r3, #0]
    8ba8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8bac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bb0:	781b      	ldrb	r3, [r3, #0]
    8bb2:	4413      	add	r3, r2
    8bb4:	b2da      	uxtb	r2, r3
    8bb6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8bba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bbe:	701a      	strb	r2, [r3, #0]
    8bc0:	f24c 5349 	movw	r3, #50505	; 0xc549
    8bc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bc8:	781b      	ldrb	r3, [r3, #0]
    8bca:	3301      	adds	r3, #1
    8bcc:	b2da      	uxtb	r2, r3
    8bce:	f24c 5349 	movw	r3, #50505	; 0xc549
    8bd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bd6:	701a      	strb	r2, [r3, #0]
    8bd8:	f24c 5349 	movw	r3, #50505	; 0xc549
    8bdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8be0:	781b      	ldrb	r3, [r3, #0]
    8be2:	2bff      	cmp	r3, #255	; 0xff
    8be4:	d105      	bne.n	8bf2 <send_attitude+0x6be>
    8be6:	f24c 5349 	movw	r3, #50505	; 0xc549
    8bea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bee:	2200      	movs	r2, #0
    8bf0:	701a      	strb	r2, [r3, #0]
    8bf2:	f24c 5349 	movw	r3, #50505	; 0xc549
    8bf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bfa:	781b      	ldrb	r3, [r3, #0]
    8bfc:	461a      	mov	r2, r3
    8bfe:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8c02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c06:	7859      	ldrb	r1, [r3, #1]
    8c08:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8c0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c10:	5499      	strb	r1, [r3, r2]
    8c12:	4b7a      	ldr	r3, [pc, #488]	; (8dfc <send_attitude+0x8c8>)
    8c14:	781a      	ldrb	r2, [r3, #0]
    8c16:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8c1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c1e:	781b      	ldrb	r3, [r3, #0]
    8c20:	4413      	add	r3, r2
    8c22:	b2da      	uxtb	r2, r3
    8c24:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8c28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c2c:	701a      	strb	r2, [r3, #0]
    8c2e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8c32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c36:	781a      	ldrb	r2, [r3, #0]
    8c38:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8c3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c40:	781b      	ldrb	r3, [r3, #0]
    8c42:	4413      	add	r3, r2
    8c44:	b2da      	uxtb	r2, r3
    8c46:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8c4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c4e:	701a      	strb	r2, [r3, #0]
    8c50:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c58:	781b      	ldrb	r3, [r3, #0]
    8c5a:	3301      	adds	r3, #1
    8c5c:	b2da      	uxtb	r2, r3
    8c5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c66:	701a      	strb	r2, [r3, #0]
    8c68:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c70:	781b      	ldrb	r3, [r3, #0]
    8c72:	2bff      	cmp	r3, #255	; 0xff
    8c74:	d105      	bne.n	8c82 <send_attitude+0x74e>
    8c76:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c7e:	2200      	movs	r2, #0
    8c80:	701a      	strb	r2, [r3, #0]
    8c82:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c8a:	781b      	ldrb	r3, [r3, #0]
    8c8c:	461a      	mov	r2, r3
    8c8e:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8c92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c96:	7899      	ldrb	r1, [r3, #2]
    8c98:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8c9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ca0:	5499      	strb	r1, [r3, r2]
    8ca2:	4b57      	ldr	r3, [pc, #348]	; (8e00 <send_attitude+0x8cc>)
    8ca4:	781a      	ldrb	r2, [r3, #0]
    8ca6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8caa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cae:	781b      	ldrb	r3, [r3, #0]
    8cb0:	4413      	add	r3, r2
    8cb2:	b2da      	uxtb	r2, r3
    8cb4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8cb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cbc:	701a      	strb	r2, [r3, #0]
    8cbe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8cc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cc6:	781a      	ldrb	r2, [r3, #0]
    8cc8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8ccc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cd0:	781b      	ldrb	r3, [r3, #0]
    8cd2:	4413      	add	r3, r2
    8cd4:	b2da      	uxtb	r2, r3
    8cd6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8cda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cde:	701a      	strb	r2, [r3, #0]
    8ce0:	f24c 5349 	movw	r3, #50505	; 0xc549
    8ce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ce8:	781b      	ldrb	r3, [r3, #0]
    8cea:	3301      	adds	r3, #1
    8cec:	b2da      	uxtb	r2, r3
    8cee:	f24c 5349 	movw	r3, #50505	; 0xc549
    8cf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cf6:	701a      	strb	r2, [r3, #0]
    8cf8:	f24c 5349 	movw	r3, #50505	; 0xc549
    8cfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d00:	781b      	ldrb	r3, [r3, #0]
    8d02:	2bff      	cmp	r3, #255	; 0xff
    8d04:	d105      	bne.n	8d12 <send_attitude+0x7de>
    8d06:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d0e:	2200      	movs	r2, #0
    8d10:	701a      	strb	r2, [r3, #0]
    8d12:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d1a:	781b      	ldrb	r3, [r3, #0]
    8d1c:	461a      	mov	r2, r3
    8d1e:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8d22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d26:	78d9      	ldrb	r1, [r3, #3]
    8d28:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8d2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d30:	5499      	strb	r1, [r3, r2]
    8d32:	4b34      	ldr	r3, [pc, #208]	; (8e04 <send_attitude+0x8d0>)
    8d34:	781a      	ldrb	r2, [r3, #0]
    8d36:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8d3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d3e:	781b      	ldrb	r3, [r3, #0]
    8d40:	4413      	add	r3, r2
    8d42:	b2da      	uxtb	r2, r3
    8d44:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8d48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d4c:	701a      	strb	r2, [r3, #0]
    8d4e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8d52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d56:	781a      	ldrb	r2, [r3, #0]
    8d58:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8d5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d60:	781b      	ldrb	r3, [r3, #0]
    8d62:	4413      	add	r3, r2
    8d64:	b2da      	uxtb	r2, r3
    8d66:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8d6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d6e:	701a      	strb	r2, [r3, #0]
    8d70:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d78:	781b      	ldrb	r3, [r3, #0]
    8d7a:	3301      	adds	r3, #1
    8d7c:	b2da      	uxtb	r2, r3
    8d7e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d86:	701a      	strb	r2, [r3, #0]
    8d88:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d90:	781b      	ldrb	r3, [r3, #0]
    8d92:	2bff      	cmp	r3, #255	; 0xff
    8d94:	d105      	bne.n	8da2 <send_attitude+0x86e>
    8d96:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d9e:	2200      	movs	r2, #0
    8da0:	701a      	strb	r2, [r3, #0]
    8da2:	f24c 5349 	movw	r3, #50505	; 0xc549
    8da6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8daa:	781b      	ldrb	r3, [r3, #0]
    8dac:	461a      	mov	r2, r3
    8dae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8db2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8db6:	7819      	ldrb	r1, [r3, #0]
    8db8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8dbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dc0:	5499      	strb	r1, [r3, r2]
    8dc2:	f24c 5349 	movw	r3, #50505	; 0xc549
    8dc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dca:	781b      	ldrb	r3, [r3, #0]
    8dcc:	3301      	adds	r3, #1
    8dce:	b2da      	uxtb	r2, r3
    8dd0:	f24c 5349 	movw	r3, #50505	; 0xc549
    8dd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dd8:	701a      	strb	r2, [r3, #0]
    8dda:	f24c 5349 	movw	r3, #50505	; 0xc549
    8dde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8de2:	781b      	ldrb	r3, [r3, #0]
    8de4:	2bff      	cmp	r3, #255	; 0xff
    8de6:	d10f      	bne.n	8e08 <send_attitude+0x8d4>
    8de8:	f24c 5349 	movw	r3, #50505	; 0xc549
    8dec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8df0:	2200      	movs	r2, #0
    8df2:	701a      	strb	r2, [r3, #0]
    8df4:	e008      	b.n	8e08 <send_attitude+0x8d4>
    8df6:	bf00      	nop
    8df8:	2004cb0f 	.word	0x2004cb0f
    8dfc:	2004cb11 	.word	0x2004cb11
    8e00:	2004cb12 	.word	0x2004cb12
    8e04:	2004cb13 	.word	0x2004cb13
    8e08:	f24c 5349 	movw	r3, #50505	; 0xc549
    8e0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e10:	781b      	ldrb	r3, [r3, #0]
    8e12:	461a      	mov	r2, r3
    8e14:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8e18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e1c:	7819      	ldrb	r1, [r3, #0]
    8e1e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8e22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e26:	5499      	strb	r1, [r3, r2]
    8e28:	f24c 5349 	movw	r3, #50505	; 0xc549
    8e2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e30:	781b      	ldrb	r3, [r3, #0]
    8e32:	3301      	adds	r3, #1
    8e34:	b2da      	uxtb	r2, r3
    8e36:	f24c 5349 	movw	r3, #50505	; 0xc549
    8e3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e3e:	701a      	strb	r2, [r3, #0]
    8e40:	f24c 5349 	movw	r3, #50505	; 0xc549
    8e44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e48:	781b      	ldrb	r3, [r3, #0]
    8e4a:	2bff      	cmp	r3, #255	; 0xff
    8e4c:	d105      	bne.n	8e5a <send_attitude+0x926>
    8e4e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8e52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e56:	2200      	movs	r2, #0
    8e58:	701a      	strb	r2, [r3, #0]
    8e5a:	f242 0339 	movw	r3, #8249	; 0x2039
    8e5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e62:	781b      	ldrb	r3, [r3, #0]
    8e64:	b2db      	uxtb	r3, r3
    8e66:	f003 0310 	and.w	r3, r3, #16
    8e6a:	2b00      	cmp	r3, #0
    8e6c:	d15a      	bne.n	8f24 <send_attitude+0x9f0>
    8e6e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8e72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e76:	781b      	ldrb	r3, [r3, #0]
    8e78:	b2db      	uxtb	r3, r3
    8e7a:	461a      	mov	r2, r3
    8e7c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8e80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e84:	5c9a      	ldrb	r2, [r3, r2]
    8e86:	f24c 634b 	movw	r3, #50763	; 0xc64b
    8e8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e8e:	701a      	strb	r2, [r3, #0]
    8e90:	f24c 634c 	movw	r3, #50764	; 0xc64c
    8e94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e98:	2200      	movs	r2, #0
    8e9a:	701a      	strb	r2, [r3, #0]
    8e9c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8ea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ea4:	781b      	ldrb	r3, [r3, #0]
    8ea6:	b2db      	uxtb	r3, r3
    8ea8:	3301      	adds	r3, #1
    8eaa:	b2da      	uxtb	r2, r3
    8eac:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8eb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eb4:	701a      	strb	r2, [r3, #0]
    8eb6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8eba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ebe:	781b      	ldrb	r3, [r3, #0]
    8ec0:	b2db      	uxtb	r3, r3
    8ec2:	2bff      	cmp	r3, #255	; 0xff
    8ec4:	d105      	bne.n	8ed2 <send_attitude+0x99e>
    8ec6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8eca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ece:	2200      	movs	r2, #0
    8ed0:	701a      	strb	r2, [r3, #0]
    8ed2:	f242 0338 	movw	r3, #8248	; 0x2038
    8ed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8eda:	f242 0238 	movw	r2, #8248	; 0x2038
    8ede:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8ee2:	7812      	ldrb	r2, [r2, #0]
    8ee4:	b2d2      	uxtb	r2, r2
    8ee6:	f042 0201 	orr.w	r2, r2, #1
    8eea:	b2d2      	uxtb	r2, r2
    8eec:	701a      	strb	r2, [r3, #0]
    8eee:	f242 0339 	movw	r3, #8249	; 0x2039
    8ef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ef6:	f242 0239 	movw	r2, #8249	; 0x2039
    8efa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8efe:	7812      	ldrb	r2, [r2, #0]
    8f00:	b2d2      	uxtb	r2, r2
    8f02:	f042 0210 	orr.w	r2, r2, #16
    8f06:	b2d2      	uxtb	r2, r2
    8f08:	701a      	strb	r2, [r3, #0]
    8f0a:	e00b      	b.n	8f24 <send_attitude+0x9f0>
    8f0c:	f24c 5348 	movw	r3, #50504	; 0xc548
    8f10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f14:	781b      	ldrb	r3, [r3, #0]
    8f16:	3301      	adds	r3, #1
    8f18:	b2da      	uxtb	r2, r3
    8f1a:	f24c 5348 	movw	r3, #50504	; 0xc548
    8f1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f22:	701a      	strb	r2, [r3, #0]
  }
}
    8f24:	46bd      	mov	sp, r7
    8f26:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f2a:	4770      	bx	lr

00008f2c <send_adc>:
  
void send_adc(void){  //500ms
    8f2c:	b480      	push	{r7}
    8f2e:	af00      	add	r7, sp, #0
  if(!boot)
    8f30:	f240 533d 	movw	r3, #1341	; 0x53d
    8f34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f38:	781b      	ldrb	r3, [r3, #0]
    8f3a:	2b00      	cmp	r3, #0
    8f3c:	f040 827d 	bne.w	943a <send_adc+0x50e>
  { if (count % 5 == 1) PERIODIC_SEND_ADC();}
    8f40:	f24c 5341 	movw	r3, #50497	; 0xc541
    8f44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f48:	781a      	ldrb	r2, [r3, #0]
    8f4a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8f4e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8f52:	fba3 1302 	umull	r1, r3, r3, r2
    8f56:	0899      	lsrs	r1, r3, #2
    8f58:	460b      	mov	r3, r1
    8f5a:	009b      	lsls	r3, r3, #2
    8f5c:	440b      	add	r3, r1
    8f5e:	1ad3      	subs	r3, r2, r3
    8f60:	b2db      	uxtb	r3, r3
    8f62:	2b01      	cmp	r3, #1
    8f64:	f040 8269 	bne.w	943a <send_adc+0x50e>
    8f68:	f24c 5349 	movw	r3, #50505	; 0xc549
    8f6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f70:	781a      	ldrb	r2, [r3, #0]
    8f72:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8f76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f7a:	781b      	ldrb	r3, [r3, #0]
    8f7c:	b2db      	uxtb	r3, r3
    8f7e:	429a      	cmp	r2, r3
    8f80:	d313      	bcc.n	8faa <send_adc+0x7e>
    8f82:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8f86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f8a:	781b      	ldrb	r3, [r3, #0]
    8f8c:	b2db      	uxtb	r3, r3
    8f8e:	461a      	mov	r2, r3
    8f90:	f24c 5349 	movw	r3, #50505	; 0xc549
    8f94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f98:	781b      	ldrb	r3, [r3, #0]
    8f9a:	1ad3      	subs	r3, r2, r3
    8f9c:	33ff      	adds	r3, #255	; 0xff
    8f9e:	2b08      	cmp	r3, #8
    8fa0:	bfd4      	ite	le
    8fa2:	2300      	movle	r3, #0
    8fa4:	2301      	movgt	r3, #1
    8fa6:	b2db      	uxtb	r3, r3
    8fa8:	e011      	b.n	8fce <send_adc+0xa2>
    8faa:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8fae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fb2:	781b      	ldrb	r3, [r3, #0]
    8fb4:	b2db      	uxtb	r3, r3
    8fb6:	461a      	mov	r2, r3
    8fb8:	f24c 5349 	movw	r3, #50505	; 0xc549
    8fbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fc0:	781b      	ldrb	r3, [r3, #0]
    8fc2:	1ad3      	subs	r3, r2, r3
    8fc4:	2b08      	cmp	r3, #8
    8fc6:	bfd4      	ite	le
    8fc8:	2300      	movle	r3, #0
    8fca:	2301      	movgt	r3, #1
    8fcc:	b2db      	uxtb	r3, r3
    8fce:	2b00      	cmp	r3, #0
    8fd0:	f000 8227 	beq.w	9422 <send_adc+0x4f6>
    8fd4:	f24c 5349 	movw	r3, #50505	; 0xc549
    8fd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fdc:	781b      	ldrb	r3, [r3, #0]
    8fde:	461a      	mov	r2, r3
    8fe0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8fe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fe8:	2105      	movs	r1, #5
    8fea:	5499      	strb	r1, [r3, r2]
    8fec:	f24c 5349 	movw	r3, #50505	; 0xc549
    8ff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ff4:	781b      	ldrb	r3, [r3, #0]
    8ff6:	3301      	adds	r3, #1
    8ff8:	b2da      	uxtb	r2, r3
    8ffa:	f24c 5349 	movw	r3, #50505	; 0xc549
    8ffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9002:	701a      	strb	r2, [r3, #0]
    9004:	f24c 5349 	movw	r3, #50505	; 0xc549
    9008:	f2c2 0304 	movt	r3, #8196	; 0x2004
    900c:	781b      	ldrb	r3, [r3, #0]
    900e:	2bff      	cmp	r3, #255	; 0xff
    9010:	d105      	bne.n	901e <send_adc+0xf2>
    9012:	f24c 5349 	movw	r3, #50505	; 0xc549
    9016:	f2c2 0304 	movt	r3, #8196	; 0x2004
    901a:	2200      	movs	r2, #0
    901c:	701a      	strb	r2, [r3, #0]
    901e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9022:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9026:	781b      	ldrb	r3, [r3, #0]
    9028:	461a      	mov	r2, r3
    902a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    902e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9032:	2107      	movs	r1, #7
    9034:	5499      	strb	r1, [r3, r2]
    9036:	f24c 5349 	movw	r3, #50505	; 0xc549
    903a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    903e:	781b      	ldrb	r3, [r3, #0]
    9040:	3301      	adds	r3, #1
    9042:	b2da      	uxtb	r2, r3
    9044:	f24c 5349 	movw	r3, #50505	; 0xc549
    9048:	f2c2 0304 	movt	r3, #8196	; 0x2004
    904c:	701a      	strb	r2, [r3, #0]
    904e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9052:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9056:	781b      	ldrb	r3, [r3, #0]
    9058:	2bff      	cmp	r3, #255	; 0xff
    905a:	d105      	bne.n	9068 <send_adc+0x13c>
    905c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9060:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9064:	2200      	movs	r2, #0
    9066:	701a      	strb	r2, [r3, #0]
    9068:	f24c 634d 	movw	r3, #50765	; 0xc64d
    906c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9070:	2207      	movs	r2, #7
    9072:	701a      	strb	r2, [r3, #0]
    9074:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9078:	f2c2 0304 	movt	r3, #8196	; 0x2004
    907c:	2207      	movs	r2, #7
    907e:	701a      	strb	r2, [r3, #0]
    9080:	f24c 5349 	movw	r3, #50505	; 0xc549
    9084:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9088:	781b      	ldrb	r3, [r3, #0]
    908a:	461a      	mov	r2, r3
    908c:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
    9090:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9094:	7819      	ldrb	r1, [r3, #0]
    9096:	f24c 534c 	movw	r3, #50508	; 0xc54c
    909a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    909e:	5499      	strb	r1, [r3, r2]
    90a0:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
    90a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90a8:	781a      	ldrb	r2, [r3, #0]
    90aa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    90ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90b2:	781b      	ldrb	r3, [r3, #0]
    90b4:	4413      	add	r3, r2
    90b6:	b2da      	uxtb	r2, r3
    90b8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    90bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90c0:	701a      	strb	r2, [r3, #0]
    90c2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    90c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90ca:	781a      	ldrb	r2, [r3, #0]
    90cc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    90d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90d4:	781b      	ldrb	r3, [r3, #0]
    90d6:	4413      	add	r3, r2
    90d8:	b2da      	uxtb	r2, r3
    90da:	f24c 634e 	movw	r3, #50766	; 0xc64e
    90de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90e2:	701a      	strb	r2, [r3, #0]
    90e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    90e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90ec:	781b      	ldrb	r3, [r3, #0]
    90ee:	3301      	adds	r3, #1
    90f0:	b2da      	uxtb	r2, r3
    90f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    90f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90fa:	701a      	strb	r2, [r3, #0]
    90fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    9100:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9104:	781b      	ldrb	r3, [r3, #0]
    9106:	2bff      	cmp	r3, #255	; 0xff
    9108:	d105      	bne.n	9116 <send_adc+0x1ea>
    910a:	f24c 5349 	movw	r3, #50505	; 0xc549
    910e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9112:	2200      	movs	r2, #0
    9114:	701a      	strb	r2, [r3, #0]
    9116:	f24c 5349 	movw	r3, #50505	; 0xc549
    911a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    911e:	781b      	ldrb	r3, [r3, #0]
    9120:	461a      	mov	r2, r3
    9122:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
    9126:	f2c2 0304 	movt	r3, #8196	; 0x2004
    912a:	7859      	ldrb	r1, [r3, #1]
    912c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9130:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9134:	5499      	strb	r1, [r3, r2]
    9136:	4bc3      	ldr	r3, [pc, #780]	; (9444 <send_adc+0x518>)
    9138:	781a      	ldrb	r2, [r3, #0]
    913a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    913e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9142:	781b      	ldrb	r3, [r3, #0]
    9144:	4413      	add	r3, r2
    9146:	b2da      	uxtb	r2, r3
    9148:	f24c 634d 	movw	r3, #50765	; 0xc64d
    914c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9150:	701a      	strb	r2, [r3, #0]
    9152:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9156:	f2c2 0304 	movt	r3, #8196	; 0x2004
    915a:	781a      	ldrb	r2, [r3, #0]
    915c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9164:	781b      	ldrb	r3, [r3, #0]
    9166:	4413      	add	r3, r2
    9168:	b2da      	uxtb	r2, r3
    916a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    916e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9172:	701a      	strb	r2, [r3, #0]
    9174:	f24c 5349 	movw	r3, #50505	; 0xc549
    9178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    917c:	781b      	ldrb	r3, [r3, #0]
    917e:	3301      	adds	r3, #1
    9180:	b2da      	uxtb	r2, r3
    9182:	f24c 5349 	movw	r3, #50505	; 0xc549
    9186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    918a:	701a      	strb	r2, [r3, #0]
    918c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9190:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9194:	781b      	ldrb	r3, [r3, #0]
    9196:	2bff      	cmp	r3, #255	; 0xff
    9198:	d105      	bne.n	91a6 <send_adc+0x27a>
    919a:	f24c 5349 	movw	r3, #50505	; 0xc549
    919e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91a2:	2200      	movs	r2, #0
    91a4:	701a      	strb	r2, [r3, #0]
    91a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    91aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91ae:	781b      	ldrb	r3, [r3, #0]
    91b0:	461a      	mov	r2, r3
    91b2:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
    91b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91ba:	7819      	ldrb	r1, [r3, #0]
    91bc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    91c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91c4:	5499      	strb	r1, [r3, r2]
    91c6:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
    91ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91ce:	781a      	ldrb	r2, [r3, #0]
    91d0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    91d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91d8:	781b      	ldrb	r3, [r3, #0]
    91da:	4413      	add	r3, r2
    91dc:	b2da      	uxtb	r2, r3
    91de:	f24c 634d 	movw	r3, #50765	; 0xc64d
    91e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91e6:	701a      	strb	r2, [r3, #0]
    91e8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    91ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91f0:	781a      	ldrb	r2, [r3, #0]
    91f2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    91f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91fa:	781b      	ldrb	r3, [r3, #0]
    91fc:	4413      	add	r3, r2
    91fe:	b2da      	uxtb	r2, r3
    9200:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9208:	701a      	strb	r2, [r3, #0]
    920a:	f24c 5349 	movw	r3, #50505	; 0xc549
    920e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9212:	781b      	ldrb	r3, [r3, #0]
    9214:	3301      	adds	r3, #1
    9216:	b2da      	uxtb	r2, r3
    9218:	f24c 5349 	movw	r3, #50505	; 0xc549
    921c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9220:	701a      	strb	r2, [r3, #0]
    9222:	f24c 5349 	movw	r3, #50505	; 0xc549
    9226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    922a:	781b      	ldrb	r3, [r3, #0]
    922c:	2bff      	cmp	r3, #255	; 0xff
    922e:	d105      	bne.n	923c <send_adc+0x310>
    9230:	f24c 5349 	movw	r3, #50505	; 0xc549
    9234:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9238:	2200      	movs	r2, #0
    923a:	701a      	strb	r2, [r3, #0]
    923c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9240:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9244:	781b      	ldrb	r3, [r3, #0]
    9246:	461a      	mov	r2, r3
    9248:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
    924c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9250:	7859      	ldrb	r1, [r3, #1]
    9252:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9256:	f2c2 0304 	movt	r3, #8196	; 0x2004
    925a:	5499      	strb	r1, [r3, r2]
    925c:	4b7a      	ldr	r3, [pc, #488]	; (9448 <send_adc+0x51c>)
    925e:	781a      	ldrb	r2, [r3, #0]
    9260:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9268:	781b      	ldrb	r3, [r3, #0]
    926a:	4413      	add	r3, r2
    926c:	b2da      	uxtb	r2, r3
    926e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9272:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9276:	701a      	strb	r2, [r3, #0]
    9278:	f24c 634e 	movw	r3, #50766	; 0xc64e
    927c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9280:	781a      	ldrb	r2, [r3, #0]
    9282:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9286:	f2c2 0304 	movt	r3, #8196	; 0x2004
    928a:	781b      	ldrb	r3, [r3, #0]
    928c:	4413      	add	r3, r2
    928e:	b2da      	uxtb	r2, r3
    9290:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9294:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9298:	701a      	strb	r2, [r3, #0]
    929a:	f24c 5349 	movw	r3, #50505	; 0xc549
    929e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92a2:	781b      	ldrb	r3, [r3, #0]
    92a4:	3301      	adds	r3, #1
    92a6:	b2da      	uxtb	r2, r3
    92a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    92ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92b0:	701a      	strb	r2, [r3, #0]
    92b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    92b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92ba:	781b      	ldrb	r3, [r3, #0]
    92bc:	2bff      	cmp	r3, #255	; 0xff
    92be:	d105      	bne.n	92cc <send_adc+0x3a0>
    92c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    92c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92c8:	2200      	movs	r2, #0
    92ca:	701a      	strb	r2, [r3, #0]
    92cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    92d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92d4:	781b      	ldrb	r3, [r3, #0]
    92d6:	461a      	mov	r2, r3
    92d8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    92dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92e0:	7819      	ldrb	r1, [r3, #0]
    92e2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    92e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92ea:	5499      	strb	r1, [r3, r2]
    92ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    92f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92f4:	781b      	ldrb	r3, [r3, #0]
    92f6:	3301      	adds	r3, #1
    92f8:	b2da      	uxtb	r2, r3
    92fa:	f24c 5349 	movw	r3, #50505	; 0xc549
    92fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9302:	701a      	strb	r2, [r3, #0]
    9304:	f24c 5349 	movw	r3, #50505	; 0xc549
    9308:	f2c2 0304 	movt	r3, #8196	; 0x2004
    930c:	781b      	ldrb	r3, [r3, #0]
    930e:	2bff      	cmp	r3, #255	; 0xff
    9310:	d105      	bne.n	931e <send_adc+0x3f2>
    9312:	f24c 5349 	movw	r3, #50505	; 0xc549
    9316:	f2c2 0304 	movt	r3, #8196	; 0x2004
    931a:	2200      	movs	r2, #0
    931c:	701a      	strb	r2, [r3, #0]
    931e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9326:	781b      	ldrb	r3, [r3, #0]
    9328:	461a      	mov	r2, r3
    932a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    932e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9332:	7819      	ldrb	r1, [r3, #0]
    9334:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9338:	f2c2 0304 	movt	r3, #8196	; 0x2004
    933c:	5499      	strb	r1, [r3, r2]
    933e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9342:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9346:	781b      	ldrb	r3, [r3, #0]
    9348:	3301      	adds	r3, #1
    934a:	b2da      	uxtb	r2, r3
    934c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9350:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9354:	701a      	strb	r2, [r3, #0]
    9356:	f24c 5349 	movw	r3, #50505	; 0xc549
    935a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    935e:	781b      	ldrb	r3, [r3, #0]
    9360:	2bff      	cmp	r3, #255	; 0xff
    9362:	d105      	bne.n	9370 <send_adc+0x444>
    9364:	f24c 5349 	movw	r3, #50505	; 0xc549
    9368:	f2c2 0304 	movt	r3, #8196	; 0x2004
    936c:	2200      	movs	r2, #0
    936e:	701a      	strb	r2, [r3, #0]
    9370:	f242 0339 	movw	r3, #8249	; 0x2039
    9374:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9378:	781b      	ldrb	r3, [r3, #0]
    937a:	b2db      	uxtb	r3, r3
    937c:	f003 0310 	and.w	r3, r3, #16
    9380:	2b00      	cmp	r3, #0
    9382:	d15a      	bne.n	943a <send_adc+0x50e>
    9384:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9388:	f2c2 0304 	movt	r3, #8196	; 0x2004
    938c:	781b      	ldrb	r3, [r3, #0]
    938e:	b2db      	uxtb	r3, r3
    9390:	461a      	mov	r2, r3
    9392:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9396:	f2c2 0304 	movt	r3, #8196	; 0x2004
    939a:	5c9a      	ldrb	r2, [r3, r2]
    939c:	f24c 634b 	movw	r3, #50763	; 0xc64b
    93a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93a4:	701a      	strb	r2, [r3, #0]
    93a6:	f24c 634c 	movw	r3, #50764	; 0xc64c
    93aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93ae:	2200      	movs	r2, #0
    93b0:	701a      	strb	r2, [r3, #0]
    93b2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    93b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93ba:	781b      	ldrb	r3, [r3, #0]
    93bc:	b2db      	uxtb	r3, r3
    93be:	3301      	adds	r3, #1
    93c0:	b2da      	uxtb	r2, r3
    93c2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    93c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93ca:	701a      	strb	r2, [r3, #0]
    93cc:	f24c 534a 	movw	r3, #50506	; 0xc54a
    93d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93d4:	781b      	ldrb	r3, [r3, #0]
    93d6:	b2db      	uxtb	r3, r3
    93d8:	2bff      	cmp	r3, #255	; 0xff
    93da:	d105      	bne.n	93e8 <send_adc+0x4bc>
    93dc:	f24c 534a 	movw	r3, #50506	; 0xc54a
    93e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93e4:	2200      	movs	r2, #0
    93e6:	701a      	strb	r2, [r3, #0]
    93e8:	f242 0338 	movw	r3, #8248	; 0x2038
    93ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93f0:	f242 0238 	movw	r2, #8248	; 0x2038
    93f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    93f8:	7812      	ldrb	r2, [r2, #0]
    93fa:	b2d2      	uxtb	r2, r2
    93fc:	f042 0201 	orr.w	r2, r2, #1
    9400:	b2d2      	uxtb	r2, r2
    9402:	701a      	strb	r2, [r3, #0]
    9404:	f242 0339 	movw	r3, #8249	; 0x2039
    9408:	f2c2 0300 	movt	r3, #8192	; 0x2000
    940c:	f242 0239 	movw	r2, #8249	; 0x2039
    9410:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9414:	7812      	ldrb	r2, [r2, #0]
    9416:	b2d2      	uxtb	r2, r2
    9418:	f042 0210 	orr.w	r2, r2, #16
    941c:	b2d2      	uxtb	r2, r2
    941e:	701a      	strb	r2, [r3, #0]
    9420:	e00b      	b.n	943a <send_adc+0x50e>
    9422:	f24c 5348 	movw	r3, #50504	; 0xc548
    9426:	f2c2 0304 	movt	r3, #8196	; 0x2004
    942a:	781b      	ldrb	r3, [r3, #0]
    942c:	3301      	adds	r3, #1
    942e:	b2da      	uxtb	r2, r3
    9430:	f24c 5348 	movw	r3, #50504	; 0xc548
    9434:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9438:	701a      	strb	r2, [r3, #0]
}
    943a:	46bd      	mov	sp, r7
    943c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9440:	4770      	bx	lr
    9442:	bf00      	nop
    9444:	2004c7e9 	.word	0x2004c7e9
    9448:	2004c7eb 	.word	0x2004c7eb

0000944c <send_settings>:
void send_settings(void){ //500ms
    944c:	b480      	push	{r7}
    944e:	af00      	add	r7, sp, #0
  if(!boot)
    9450:	f240 533d 	movw	r3, #1341	; 0x53d
    9454:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9458:	781b      	ldrb	r3, [r3, #0]
    945a:	2b00      	cmp	r3, #0
    945c:	f040 83fb 	bne.w	9c56 <send_settings+0x80a>
  {if (count % 5 == 2) PERIODIC_SEND_SETTINGS();}
    9460:	f24c 5341 	movw	r3, #50497	; 0xc541
    9464:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9468:	781a      	ldrb	r2, [r3, #0]
    946a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    946e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    9472:	fba3 1302 	umull	r1, r3, r3, r2
    9476:	0899      	lsrs	r1, r3, #2
    9478:	460b      	mov	r3, r1
    947a:	009b      	lsls	r3, r3, #2
    947c:	440b      	add	r3, r1
    947e:	1ad3      	subs	r3, r2, r3
    9480:	b2db      	uxtb	r3, r3
    9482:	2b02      	cmp	r3, #2
    9484:	f040 83e7 	bne.w	9c56 <send_settings+0x80a>
    9488:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    948c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9490:	781b      	ldrb	r3, [r3, #0]
    9492:	2b00      	cmp	r3, #0
    9494:	f000 83df 	beq.w	9c56 <send_settings+0x80a>
    9498:	f24c 5349 	movw	r3, #50505	; 0xc549
    949c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94a0:	781a      	ldrb	r2, [r3, #0]
    94a2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    94a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94aa:	781b      	ldrb	r3, [r3, #0]
    94ac:	b2db      	uxtb	r3, r3
    94ae:	429a      	cmp	r2, r3
    94b0:	d313      	bcc.n	94da <send_settings+0x8e>
    94b2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    94b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94ba:	781b      	ldrb	r3, [r3, #0]
    94bc:	b2db      	uxtb	r3, r3
    94be:	461a      	mov	r2, r3
    94c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    94c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94c8:	781b      	ldrb	r3, [r3, #0]
    94ca:	1ad3      	subs	r3, r2, r3
    94cc:	33ff      	adds	r3, #255	; 0xff
    94ce:	2b0d      	cmp	r3, #13
    94d0:	bfd4      	ite	le
    94d2:	2300      	movle	r3, #0
    94d4:	2301      	movgt	r3, #1
    94d6:	b2db      	uxtb	r3, r3
    94d8:	e011      	b.n	94fe <send_settings+0xb2>
    94da:	f24c 534a 	movw	r3, #50506	; 0xc54a
    94de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94e2:	781b      	ldrb	r3, [r3, #0]
    94e4:	b2db      	uxtb	r3, r3
    94e6:	461a      	mov	r2, r3
    94e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    94ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94f0:	781b      	ldrb	r3, [r3, #0]
    94f2:	1ad3      	subs	r3, r2, r3
    94f4:	2b0d      	cmp	r3, #13
    94f6:	bfd4      	ite	le
    94f8:	2300      	movle	r3, #0
    94fa:	2301      	movgt	r3, #1
    94fc:	b2db      	uxtb	r3, r3
    94fe:	2b00      	cmp	r3, #0
    9500:	f000 839d 	beq.w	9c3e <send_settings+0x7f2>
    9504:	f24c 5349 	movw	r3, #50505	; 0xc549
    9508:	f2c2 0304 	movt	r3, #8196	; 0x2004
    950c:	781b      	ldrb	r3, [r3, #0]
    950e:	461a      	mov	r2, r3
    9510:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9514:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9518:	2105      	movs	r1, #5
    951a:	5499      	strb	r1, [r3, r2]
    951c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9520:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9524:	781b      	ldrb	r3, [r3, #0]
    9526:	3301      	adds	r3, #1
    9528:	b2da      	uxtb	r2, r3
    952a:	f24c 5349 	movw	r3, #50505	; 0xc549
    952e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9532:	701a      	strb	r2, [r3, #0]
    9534:	f24c 5349 	movw	r3, #50505	; 0xc549
    9538:	f2c2 0304 	movt	r3, #8196	; 0x2004
    953c:	781b      	ldrb	r3, [r3, #0]
    953e:	2bff      	cmp	r3, #255	; 0xff
    9540:	d105      	bne.n	954e <send_settings+0x102>
    9542:	f24c 5349 	movw	r3, #50505	; 0xc549
    9546:	f2c2 0304 	movt	r3, #8196	; 0x2004
    954a:	2200      	movs	r2, #0
    954c:	701a      	strb	r2, [r3, #0]
    954e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9552:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9556:	781b      	ldrb	r3, [r3, #0]
    9558:	461a      	mov	r2, r3
    955a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    955e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9562:	2111      	movs	r1, #17
    9564:	5499      	strb	r1, [r3, r2]
    9566:	f24c 5349 	movw	r3, #50505	; 0xc549
    956a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    956e:	781b      	ldrb	r3, [r3, #0]
    9570:	3301      	adds	r3, #1
    9572:	b2da      	uxtb	r2, r3
    9574:	f24c 5349 	movw	r3, #50505	; 0xc549
    9578:	f2c2 0304 	movt	r3, #8196	; 0x2004
    957c:	701a      	strb	r2, [r3, #0]
    957e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9582:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9586:	781b      	ldrb	r3, [r3, #0]
    9588:	2bff      	cmp	r3, #255	; 0xff
    958a:	d105      	bne.n	9598 <send_settings+0x14c>
    958c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9590:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9594:	2200      	movs	r2, #0
    9596:	701a      	strb	r2, [r3, #0]
    9598:	f24c 634d 	movw	r3, #50765	; 0xc64d
    959c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95a0:	2211      	movs	r2, #17
    95a2:	701a      	strb	r2, [r3, #0]
    95a4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    95a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95ac:	2211      	movs	r2, #17
    95ae:	701a      	strb	r2, [r3, #0]
    95b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    95b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95b8:	781b      	ldrb	r3, [r3, #0]
    95ba:	461a      	mov	r2, r3
    95bc:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    95c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95c4:	7819      	ldrb	r1, [r3, #0]
    95c6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    95ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95ce:	5499      	strb	r1, [r3, r2]
    95d0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    95d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95d8:	781a      	ldrb	r2, [r3, #0]
    95da:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    95de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95e2:	781b      	ldrb	r3, [r3, #0]
    95e4:	4413      	add	r3, r2
    95e6:	b2da      	uxtb	r2, r3
    95e8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    95ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95f0:	701a      	strb	r2, [r3, #0]
    95f2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    95f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95fa:	781a      	ldrb	r2, [r3, #0]
    95fc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9600:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9604:	781b      	ldrb	r3, [r3, #0]
    9606:	4413      	add	r3, r2
    9608:	b2da      	uxtb	r2, r3
    960a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    960e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9612:	701a      	strb	r2, [r3, #0]
    9614:	f24c 5349 	movw	r3, #50505	; 0xc549
    9618:	f2c2 0304 	movt	r3, #8196	; 0x2004
    961c:	781b      	ldrb	r3, [r3, #0]
    961e:	3301      	adds	r3, #1
    9620:	b2da      	uxtb	r2, r3
    9622:	f24c 5349 	movw	r3, #50505	; 0xc549
    9626:	f2c2 0304 	movt	r3, #8196	; 0x2004
    962a:	701a      	strb	r2, [r3, #0]
    962c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9630:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9634:	781b      	ldrb	r3, [r3, #0]
    9636:	2bff      	cmp	r3, #255	; 0xff
    9638:	d105      	bne.n	9646 <send_settings+0x1fa>
    963a:	f24c 5349 	movw	r3, #50505	; 0xc549
    963e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9642:	2200      	movs	r2, #0
    9644:	701a      	strb	r2, [r3, #0]
    9646:	f24c 5349 	movw	r3, #50505	; 0xc549
    964a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    964e:	781b      	ldrb	r3, [r3, #0]
    9650:	461a      	mov	r2, r3
    9652:	f24c 5338 	movw	r3, #50488	; 0xc538
    9656:	f2c2 0304 	movt	r3, #8196	; 0x2004
    965a:	7819      	ldrb	r1, [r3, #0]
    965c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9660:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9664:	5499      	strb	r1, [r3, r2]
    9666:	f24c 5338 	movw	r3, #50488	; 0xc538
    966a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    966e:	781a      	ldrb	r2, [r3, #0]
    9670:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9674:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9678:	781b      	ldrb	r3, [r3, #0]
    967a:	4413      	add	r3, r2
    967c:	b2da      	uxtb	r2, r3
    967e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9682:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9686:	701a      	strb	r2, [r3, #0]
    9688:	f24c 634e 	movw	r3, #50766	; 0xc64e
    968c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9690:	781a      	ldrb	r2, [r3, #0]
    9692:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9696:	f2c2 0304 	movt	r3, #8196	; 0x2004
    969a:	781b      	ldrb	r3, [r3, #0]
    969c:	4413      	add	r3, r2
    969e:	b2da      	uxtb	r2, r3
    96a0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    96a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96a8:	701a      	strb	r2, [r3, #0]
    96aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    96ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96b2:	781b      	ldrb	r3, [r3, #0]
    96b4:	3301      	adds	r3, #1
    96b6:	b2da      	uxtb	r2, r3
    96b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    96bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96c0:	701a      	strb	r2, [r3, #0]
    96c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    96c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96ca:	781b      	ldrb	r3, [r3, #0]
    96cc:	2bff      	cmp	r3, #255	; 0xff
    96ce:	d105      	bne.n	96dc <send_settings+0x290>
    96d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    96d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96d8:	2200      	movs	r2, #0
    96da:	701a      	strb	r2, [r3, #0]
    96dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    96e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96e4:	781b      	ldrb	r3, [r3, #0]
    96e6:	461a      	mov	r2, r3
    96e8:	f24c 5338 	movw	r3, #50488	; 0xc538
    96ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96f0:	7859      	ldrb	r1, [r3, #1]
    96f2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    96f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96fa:	5499      	strb	r1, [r3, r2]
    96fc:	4bd1      	ldr	r3, [pc, #836]	; (9a44 <send_settings+0x5f8>)
    96fe:	781a      	ldrb	r2, [r3, #0]
    9700:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9708:	781b      	ldrb	r3, [r3, #0]
    970a:	4413      	add	r3, r2
    970c:	b2da      	uxtb	r2, r3
    970e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9716:	701a      	strb	r2, [r3, #0]
    9718:	f24c 634e 	movw	r3, #50766	; 0xc64e
    971c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9720:	781a      	ldrb	r2, [r3, #0]
    9722:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9726:	f2c2 0304 	movt	r3, #8196	; 0x2004
    972a:	781b      	ldrb	r3, [r3, #0]
    972c:	4413      	add	r3, r2
    972e:	b2da      	uxtb	r2, r3
    9730:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9734:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9738:	701a      	strb	r2, [r3, #0]
    973a:	f24c 5349 	movw	r3, #50505	; 0xc549
    973e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9742:	781b      	ldrb	r3, [r3, #0]
    9744:	3301      	adds	r3, #1
    9746:	b2da      	uxtb	r2, r3
    9748:	f24c 5349 	movw	r3, #50505	; 0xc549
    974c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9750:	701a      	strb	r2, [r3, #0]
    9752:	f24c 5349 	movw	r3, #50505	; 0xc549
    9756:	f2c2 0304 	movt	r3, #8196	; 0x2004
    975a:	781b      	ldrb	r3, [r3, #0]
    975c:	2bff      	cmp	r3, #255	; 0xff
    975e:	d105      	bne.n	976c <send_settings+0x320>
    9760:	f24c 5349 	movw	r3, #50505	; 0xc549
    9764:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9768:	2200      	movs	r2, #0
    976a:	701a      	strb	r2, [r3, #0]
    976c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9770:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9774:	781b      	ldrb	r3, [r3, #0]
    9776:	461a      	mov	r2, r3
    9778:	f24c 5338 	movw	r3, #50488	; 0xc538
    977c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9780:	7899      	ldrb	r1, [r3, #2]
    9782:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9786:	f2c2 0304 	movt	r3, #8196	; 0x2004
    978a:	5499      	strb	r1, [r3, r2]
    978c:	4bae      	ldr	r3, [pc, #696]	; (9a48 <send_settings+0x5fc>)
    978e:	781a      	ldrb	r2, [r3, #0]
    9790:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9794:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9798:	781b      	ldrb	r3, [r3, #0]
    979a:	4413      	add	r3, r2
    979c:	b2da      	uxtb	r2, r3
    979e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    97a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97a6:	701a      	strb	r2, [r3, #0]
    97a8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    97ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97b0:	781a      	ldrb	r2, [r3, #0]
    97b2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    97b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97ba:	781b      	ldrb	r3, [r3, #0]
    97bc:	4413      	add	r3, r2
    97be:	b2da      	uxtb	r2, r3
    97c0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    97c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97c8:	701a      	strb	r2, [r3, #0]
    97ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    97ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97d2:	781b      	ldrb	r3, [r3, #0]
    97d4:	3301      	adds	r3, #1
    97d6:	b2da      	uxtb	r2, r3
    97d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    97dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97e0:	701a      	strb	r2, [r3, #0]
    97e2:	f24c 5349 	movw	r3, #50505	; 0xc549
    97e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97ea:	781b      	ldrb	r3, [r3, #0]
    97ec:	2bff      	cmp	r3, #255	; 0xff
    97ee:	d105      	bne.n	97fc <send_settings+0x3b0>
    97f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    97f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97f8:	2200      	movs	r2, #0
    97fa:	701a      	strb	r2, [r3, #0]
    97fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    9800:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9804:	781b      	ldrb	r3, [r3, #0]
    9806:	461a      	mov	r2, r3
    9808:	f24c 5338 	movw	r3, #50488	; 0xc538
    980c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9810:	78d9      	ldrb	r1, [r3, #3]
    9812:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9816:	f2c2 0304 	movt	r3, #8196	; 0x2004
    981a:	5499      	strb	r1, [r3, r2]
    981c:	4b8b      	ldr	r3, [pc, #556]	; (9a4c <send_settings+0x600>)
    981e:	781a      	ldrb	r2, [r3, #0]
    9820:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9824:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9828:	781b      	ldrb	r3, [r3, #0]
    982a:	4413      	add	r3, r2
    982c:	b2da      	uxtb	r2, r3
    982e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9832:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9836:	701a      	strb	r2, [r3, #0]
    9838:	f24c 634e 	movw	r3, #50766	; 0xc64e
    983c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9840:	781a      	ldrb	r2, [r3, #0]
    9842:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9846:	f2c2 0304 	movt	r3, #8196	; 0x2004
    984a:	781b      	ldrb	r3, [r3, #0]
    984c:	4413      	add	r3, r2
    984e:	b2da      	uxtb	r2, r3
    9850:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9854:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9858:	701a      	strb	r2, [r3, #0]
    985a:	f24c 5349 	movw	r3, #50505	; 0xc549
    985e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9862:	781b      	ldrb	r3, [r3, #0]
    9864:	3301      	adds	r3, #1
    9866:	b2da      	uxtb	r2, r3
    9868:	f24c 5349 	movw	r3, #50505	; 0xc549
    986c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9870:	701a      	strb	r2, [r3, #0]
    9872:	f24c 5349 	movw	r3, #50505	; 0xc549
    9876:	f2c2 0304 	movt	r3, #8196	; 0x2004
    987a:	781b      	ldrb	r3, [r3, #0]
    987c:	2bff      	cmp	r3, #255	; 0xff
    987e:	d105      	bne.n	988c <send_settings+0x440>
    9880:	f24c 5349 	movw	r3, #50505	; 0xc549
    9884:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9888:	2200      	movs	r2, #0
    988a:	701a      	strb	r2, [r3, #0]
    988c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9890:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9894:	781b      	ldrb	r3, [r3, #0]
    9896:	461a      	mov	r2, r3
    9898:	f24c 533c 	movw	r3, #50492	; 0xc53c
    989c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98a0:	7819      	ldrb	r1, [r3, #0]
    98a2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    98a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98aa:	5499      	strb	r1, [r3, r2]
    98ac:	f24c 533c 	movw	r3, #50492	; 0xc53c
    98b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98b4:	781a      	ldrb	r2, [r3, #0]
    98b6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    98ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98be:	781b      	ldrb	r3, [r3, #0]
    98c0:	4413      	add	r3, r2
    98c2:	b2da      	uxtb	r2, r3
    98c4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    98c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98cc:	701a      	strb	r2, [r3, #0]
    98ce:	f24c 634e 	movw	r3, #50766	; 0xc64e
    98d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98d6:	781a      	ldrb	r2, [r3, #0]
    98d8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    98dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98e0:	781b      	ldrb	r3, [r3, #0]
    98e2:	4413      	add	r3, r2
    98e4:	b2da      	uxtb	r2, r3
    98e6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    98ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98ee:	701a      	strb	r2, [r3, #0]
    98f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    98f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98f8:	781b      	ldrb	r3, [r3, #0]
    98fa:	3301      	adds	r3, #1
    98fc:	b2da      	uxtb	r2, r3
    98fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    9902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9906:	701a      	strb	r2, [r3, #0]
    9908:	f24c 5349 	movw	r3, #50505	; 0xc549
    990c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9910:	781b      	ldrb	r3, [r3, #0]
    9912:	2bff      	cmp	r3, #255	; 0xff
    9914:	d105      	bne.n	9922 <send_settings+0x4d6>
    9916:	f24c 5349 	movw	r3, #50505	; 0xc549
    991a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    991e:	2200      	movs	r2, #0
    9920:	701a      	strb	r2, [r3, #0]
    9922:	f24c 5349 	movw	r3, #50505	; 0xc549
    9926:	f2c2 0304 	movt	r3, #8196	; 0x2004
    992a:	781b      	ldrb	r3, [r3, #0]
    992c:	461a      	mov	r2, r3
    992e:	f24c 533c 	movw	r3, #50492	; 0xc53c
    9932:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9936:	7859      	ldrb	r1, [r3, #1]
    9938:	f24c 534c 	movw	r3, #50508	; 0xc54c
    993c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9940:	5499      	strb	r1, [r3, r2]
    9942:	4b43      	ldr	r3, [pc, #268]	; (9a50 <send_settings+0x604>)
    9944:	781a      	ldrb	r2, [r3, #0]
    9946:	f24c 634d 	movw	r3, #50765	; 0xc64d
    994a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    994e:	781b      	ldrb	r3, [r3, #0]
    9950:	4413      	add	r3, r2
    9952:	b2da      	uxtb	r2, r3
    9954:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9958:	f2c2 0304 	movt	r3, #8196	; 0x2004
    995c:	701a      	strb	r2, [r3, #0]
    995e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9962:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9966:	781a      	ldrb	r2, [r3, #0]
    9968:	f24c 634d 	movw	r3, #50765	; 0xc64d
    996c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9970:	781b      	ldrb	r3, [r3, #0]
    9972:	4413      	add	r3, r2
    9974:	b2da      	uxtb	r2, r3
    9976:	f24c 634e 	movw	r3, #50766	; 0xc64e
    997a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    997e:	701a      	strb	r2, [r3, #0]
    9980:	f24c 5349 	movw	r3, #50505	; 0xc549
    9984:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9988:	781b      	ldrb	r3, [r3, #0]
    998a:	3301      	adds	r3, #1
    998c:	b2da      	uxtb	r2, r3
    998e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9996:	701a      	strb	r2, [r3, #0]
    9998:	f24c 5349 	movw	r3, #50505	; 0xc549
    999c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99a0:	781b      	ldrb	r3, [r3, #0]
    99a2:	2bff      	cmp	r3, #255	; 0xff
    99a4:	d105      	bne.n	99b2 <send_settings+0x566>
    99a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    99aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99ae:	2200      	movs	r2, #0
    99b0:	701a      	strb	r2, [r3, #0]
    99b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    99b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99ba:	781b      	ldrb	r3, [r3, #0]
    99bc:	461a      	mov	r2, r3
    99be:	f24c 533c 	movw	r3, #50492	; 0xc53c
    99c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99c6:	7899      	ldrb	r1, [r3, #2]
    99c8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    99cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99d0:	5499      	strb	r1, [r3, r2]
    99d2:	4b20      	ldr	r3, [pc, #128]	; (9a54 <send_settings+0x608>)
    99d4:	781a      	ldrb	r2, [r3, #0]
    99d6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    99da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99de:	781b      	ldrb	r3, [r3, #0]
    99e0:	4413      	add	r3, r2
    99e2:	b2da      	uxtb	r2, r3
    99e4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    99e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99ec:	701a      	strb	r2, [r3, #0]
    99ee:	f24c 634e 	movw	r3, #50766	; 0xc64e
    99f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99f6:	781a      	ldrb	r2, [r3, #0]
    99f8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    99fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a00:	781b      	ldrb	r3, [r3, #0]
    9a02:	4413      	add	r3, r2
    9a04:	b2da      	uxtb	r2, r3
    9a06:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9a0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a0e:	701a      	strb	r2, [r3, #0]
    9a10:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a18:	781b      	ldrb	r3, [r3, #0]
    9a1a:	3301      	adds	r3, #1
    9a1c:	b2da      	uxtb	r2, r3
    9a1e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a26:	701a      	strb	r2, [r3, #0]
    9a28:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a30:	781b      	ldrb	r3, [r3, #0]
    9a32:	2bff      	cmp	r3, #255	; 0xff
    9a34:	d110      	bne.n	9a58 <send_settings+0x60c>
    9a36:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a3e:	2200      	movs	r2, #0
    9a40:	701a      	strb	r2, [r3, #0]
    9a42:	e009      	b.n	9a58 <send_settings+0x60c>
    9a44:	2004c539 	.word	0x2004c539
    9a48:	2004c53a 	.word	0x2004c53a
    9a4c:	2004c53b 	.word	0x2004c53b
    9a50:	2004c53d 	.word	0x2004c53d
    9a54:	2004c53e 	.word	0x2004c53e
    9a58:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a60:	781b      	ldrb	r3, [r3, #0]
    9a62:	461a      	mov	r2, r3
    9a64:	f24c 533c 	movw	r3, #50492	; 0xc53c
    9a68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a6c:	78d9      	ldrb	r1, [r3, #3]
    9a6e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9a72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a76:	5499      	strb	r1, [r3, r2]
    9a78:	4b79      	ldr	r3, [pc, #484]	; (9c60 <send_settings+0x814>)
    9a7a:	781a      	ldrb	r2, [r3, #0]
    9a7c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9a80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a84:	781b      	ldrb	r3, [r3, #0]
    9a86:	4413      	add	r3, r2
    9a88:	b2da      	uxtb	r2, r3
    9a8a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9a8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a92:	701a      	strb	r2, [r3, #0]
    9a94:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9a98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a9c:	781a      	ldrb	r2, [r3, #0]
    9a9e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9aa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9aa6:	781b      	ldrb	r3, [r3, #0]
    9aa8:	4413      	add	r3, r2
    9aaa:	b2da      	uxtb	r2, r3
    9aac:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9ab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ab4:	701a      	strb	r2, [r3, #0]
    9ab6:	f24c 5349 	movw	r3, #50505	; 0xc549
    9aba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9abe:	781b      	ldrb	r3, [r3, #0]
    9ac0:	3301      	adds	r3, #1
    9ac2:	b2da      	uxtb	r2, r3
    9ac4:	f24c 5349 	movw	r3, #50505	; 0xc549
    9ac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9acc:	701a      	strb	r2, [r3, #0]
    9ace:	f24c 5349 	movw	r3, #50505	; 0xc549
    9ad2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ad6:	781b      	ldrb	r3, [r3, #0]
    9ad8:	2bff      	cmp	r3, #255	; 0xff
    9ada:	d105      	bne.n	9ae8 <send_settings+0x69c>
    9adc:	f24c 5349 	movw	r3, #50505	; 0xc549
    9ae0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ae4:	2200      	movs	r2, #0
    9ae6:	701a      	strb	r2, [r3, #0]
    9ae8:	f24c 5349 	movw	r3, #50505	; 0xc549
    9aec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9af0:	781b      	ldrb	r3, [r3, #0]
    9af2:	461a      	mov	r2, r3
    9af4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9af8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9afc:	7819      	ldrb	r1, [r3, #0]
    9afe:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9b02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b06:	5499      	strb	r1, [r3, r2]
    9b08:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b10:	781b      	ldrb	r3, [r3, #0]
    9b12:	3301      	adds	r3, #1
    9b14:	b2da      	uxtb	r2, r3
    9b16:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b1e:	701a      	strb	r2, [r3, #0]
    9b20:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b28:	781b      	ldrb	r3, [r3, #0]
    9b2a:	2bff      	cmp	r3, #255	; 0xff
    9b2c:	d105      	bne.n	9b3a <send_settings+0x6ee>
    9b2e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b36:	2200      	movs	r2, #0
    9b38:	701a      	strb	r2, [r3, #0]
    9b3a:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b42:	781b      	ldrb	r3, [r3, #0]
    9b44:	461a      	mov	r2, r3
    9b46:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9b4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b4e:	7819      	ldrb	r1, [r3, #0]
    9b50:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9b54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b58:	5499      	strb	r1, [r3, r2]
    9b5a:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b62:	781b      	ldrb	r3, [r3, #0]
    9b64:	3301      	adds	r3, #1
    9b66:	b2da      	uxtb	r2, r3
    9b68:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b70:	701a      	strb	r2, [r3, #0]
    9b72:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b7a:	781b      	ldrb	r3, [r3, #0]
    9b7c:	2bff      	cmp	r3, #255	; 0xff
    9b7e:	d105      	bne.n	9b8c <send_settings+0x740>
    9b80:	f24c 5349 	movw	r3, #50505	; 0xc549
    9b84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b88:	2200      	movs	r2, #0
    9b8a:	701a      	strb	r2, [r3, #0]
    9b8c:	f242 0339 	movw	r3, #8249	; 0x2039
    9b90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b94:	781b      	ldrb	r3, [r3, #0]
    9b96:	b2db      	uxtb	r3, r3
    9b98:	f003 0310 	and.w	r3, r3, #16
    9b9c:	2b00      	cmp	r3, #0
    9b9e:	d15a      	bne.n	9c56 <send_settings+0x80a>
    9ba0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9ba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ba8:	781b      	ldrb	r3, [r3, #0]
    9baa:	b2db      	uxtb	r3, r3
    9bac:	461a      	mov	r2, r3
    9bae:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9bb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bb6:	5c9a      	ldrb	r2, [r3, r2]
    9bb8:	f24c 634b 	movw	r3, #50763	; 0xc64b
    9bbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bc0:	701a      	strb	r2, [r3, #0]
    9bc2:	f24c 634c 	movw	r3, #50764	; 0xc64c
    9bc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bca:	2200      	movs	r2, #0
    9bcc:	701a      	strb	r2, [r3, #0]
    9bce:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9bd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bd6:	781b      	ldrb	r3, [r3, #0]
    9bd8:	b2db      	uxtb	r3, r3
    9bda:	3301      	adds	r3, #1
    9bdc:	b2da      	uxtb	r2, r3
    9bde:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9be2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9be6:	701a      	strb	r2, [r3, #0]
    9be8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9bec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bf0:	781b      	ldrb	r3, [r3, #0]
    9bf2:	b2db      	uxtb	r3, r3
    9bf4:	2bff      	cmp	r3, #255	; 0xff
    9bf6:	d105      	bne.n	9c04 <send_settings+0x7b8>
    9bf8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9bfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c00:	2200      	movs	r2, #0
    9c02:	701a      	strb	r2, [r3, #0]
    9c04:	f242 0338 	movw	r3, #8248	; 0x2038
    9c08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c0c:	f242 0238 	movw	r2, #8248	; 0x2038
    9c10:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9c14:	7812      	ldrb	r2, [r2, #0]
    9c16:	b2d2      	uxtb	r2, r2
    9c18:	f042 0201 	orr.w	r2, r2, #1
    9c1c:	b2d2      	uxtb	r2, r2
    9c1e:	701a      	strb	r2, [r3, #0]
    9c20:	f242 0339 	movw	r3, #8249	; 0x2039
    9c24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c28:	f242 0239 	movw	r2, #8249	; 0x2039
    9c2c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9c30:	7812      	ldrb	r2, [r2, #0]
    9c32:	b2d2      	uxtb	r2, r2
    9c34:	f042 0210 	orr.w	r2, r2, #16
    9c38:	b2d2      	uxtb	r2, r2
    9c3a:	701a      	strb	r2, [r3, #0]
    9c3c:	e00b      	b.n	9c56 <send_settings+0x80a>
    9c3e:	f24c 5348 	movw	r3, #50504	; 0xc548
    9c42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c46:	781b      	ldrb	r3, [r3, #0]
    9c48:	3301      	adds	r3, #1
    9c4a:	b2da      	uxtb	r2, r3
    9c4c:	f24c 5348 	movw	r3, #50504	; 0xc548
    9c50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c54:	701a      	strb	r2, [r3, #0]
}
    9c56:	46bd      	mov	sp, r7
    9c58:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c5c:	4770      	bx	lr
    9c5e:	bf00      	nop
    9c60:	2004c53f 	.word	0x2004c53f

00009c64 <send_desired>:
void send_desired(void){  //1000ms
    9c64:	b480      	push	{r7}
    9c66:	af00      	add	r7, sp, #0
  if(!boot)
    9c68:	f240 533d 	movw	r3, #1341	; 0x53d
    9c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c70:	781b      	ldrb	r3, [r3, #0]
    9c72:	2b00      	cmp	r3, #0
    9c74:	f040 8727 	bne.w	aac6 <send_desired+0xe62>
  { if (count % 10 == 3) PERIODIC_SEND_DESIRED();}
    9c78:	f24c 5341 	movw	r3, #50497	; 0xc541
    9c7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c80:	781a      	ldrb	r2, [r3, #0]
    9c82:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    9c86:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    9c8a:	fba3 1302 	umull	r1, r3, r3, r2
    9c8e:	08d9      	lsrs	r1, r3, #3
    9c90:	460b      	mov	r3, r1
    9c92:	009b      	lsls	r3, r3, #2
    9c94:	440b      	add	r3, r1
    9c96:	005b      	lsls	r3, r3, #1
    9c98:	1ad3      	subs	r3, r2, r3
    9c9a:	b2db      	uxtb	r3, r3
    9c9c:	2b03      	cmp	r3, #3
    9c9e:	f040 8712 	bne.w	aac6 <send_desired+0xe62>
    9ca2:	f24c 5349 	movw	r3, #50505	; 0xc549
    9ca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9caa:	781a      	ldrb	r2, [r3, #0]
    9cac:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9cb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cb4:	781b      	ldrb	r3, [r3, #0]
    9cb6:	b2db      	uxtb	r3, r3
    9cb8:	429a      	cmp	r2, r3
    9cba:	d313      	bcc.n	9ce4 <send_desired+0x80>
    9cbc:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9cc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cc4:	781b      	ldrb	r3, [r3, #0]
    9cc6:	b2db      	uxtb	r3, r3
    9cc8:	461a      	mov	r2, r3
    9cca:	f24c 5349 	movw	r3, #50505	; 0xc549
    9cce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cd2:	781b      	ldrb	r3, [r3, #0]
    9cd4:	1ad3      	subs	r3, r2, r3
    9cd6:	33ff      	adds	r3, #255	; 0xff
    9cd8:	2b18      	cmp	r3, #24
    9cda:	bfd4      	ite	le
    9cdc:	2300      	movle	r3, #0
    9cde:	2301      	movgt	r3, #1
    9ce0:	b2db      	uxtb	r3, r3
    9ce2:	e011      	b.n	9d08 <send_desired+0xa4>
    9ce4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9ce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cec:	781b      	ldrb	r3, [r3, #0]
    9cee:	b2db      	uxtb	r3, r3
    9cf0:	461a      	mov	r2, r3
    9cf2:	f24c 5349 	movw	r3, #50505	; 0xc549
    9cf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cfa:	781b      	ldrb	r3, [r3, #0]
    9cfc:	1ad3      	subs	r3, r2, r3
    9cfe:	2b18      	cmp	r3, #24
    9d00:	bfd4      	ite	le
    9d02:	2300      	movle	r3, #0
    9d04:	2301      	movgt	r3, #1
    9d06:	b2db      	uxtb	r3, r3
    9d08:	2b00      	cmp	r3, #0
    9d0a:	f000 86d0 	beq.w	aaae <send_desired+0xe4a>
    9d0e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d16:	781b      	ldrb	r3, [r3, #0]
    9d18:	461a      	mov	r2, r3
    9d1a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9d1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d22:	2105      	movs	r1, #5
    9d24:	5499      	strb	r1, [r3, r2]
    9d26:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d2e:	781b      	ldrb	r3, [r3, #0]
    9d30:	3301      	adds	r3, #1
    9d32:	b2da      	uxtb	r2, r3
    9d34:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d3c:	701a      	strb	r2, [r3, #0]
    9d3e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d46:	781b      	ldrb	r3, [r3, #0]
    9d48:	2bff      	cmp	r3, #255	; 0xff
    9d4a:	d105      	bne.n	9d58 <send_desired+0xf4>
    9d4c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d54:	2200      	movs	r2, #0
    9d56:	701a      	strb	r2, [r3, #0]
    9d58:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d60:	781b      	ldrb	r3, [r3, #0]
    9d62:	461a      	mov	r2, r3
    9d64:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9d68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d6c:	2112      	movs	r1, #18
    9d6e:	5499      	strb	r1, [r3, r2]
    9d70:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d78:	781b      	ldrb	r3, [r3, #0]
    9d7a:	3301      	adds	r3, #1
    9d7c:	b2da      	uxtb	r2, r3
    9d7e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d86:	701a      	strb	r2, [r3, #0]
    9d88:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d90:	781b      	ldrb	r3, [r3, #0]
    9d92:	2bff      	cmp	r3, #255	; 0xff
    9d94:	d105      	bne.n	9da2 <send_desired+0x13e>
    9d96:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d9e:	2200      	movs	r2, #0
    9da0:	701a      	strb	r2, [r3, #0]
    9da2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9da6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9daa:	2212      	movs	r2, #18
    9dac:	701a      	strb	r2, [r3, #0]
    9dae:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9db2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9db6:	2212      	movs	r2, #18
    9db8:	701a      	strb	r2, [r3, #0]
    9dba:	f24c 5349 	movw	r3, #50505	; 0xc549
    9dbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dc2:	781b      	ldrb	r3, [r3, #0]
    9dc4:	461a      	mov	r2, r3
    9dc6:	f64c 0374 	movw	r3, #51316	; 0xc874
    9dca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dce:	7819      	ldrb	r1, [r3, #0]
    9dd0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9dd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dd8:	5499      	strb	r1, [r3, r2]
    9dda:	f64c 0374 	movw	r3, #51316	; 0xc874
    9dde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9de2:	781a      	ldrb	r2, [r3, #0]
    9de4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9de8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dec:	781b      	ldrb	r3, [r3, #0]
    9dee:	4413      	add	r3, r2
    9df0:	b2da      	uxtb	r2, r3
    9df2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9df6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dfa:	701a      	strb	r2, [r3, #0]
    9dfc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9e00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e04:	781a      	ldrb	r2, [r3, #0]
    9e06:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9e0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e0e:	781b      	ldrb	r3, [r3, #0]
    9e10:	4413      	add	r3, r2
    9e12:	b2da      	uxtb	r2, r3
    9e14:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9e18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e1c:	701a      	strb	r2, [r3, #0]
    9e1e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e26:	781b      	ldrb	r3, [r3, #0]
    9e28:	3301      	adds	r3, #1
    9e2a:	b2da      	uxtb	r2, r3
    9e2c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e34:	701a      	strb	r2, [r3, #0]
    9e36:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e3e:	781b      	ldrb	r3, [r3, #0]
    9e40:	2bff      	cmp	r3, #255	; 0xff
    9e42:	d105      	bne.n	9e50 <send_desired+0x1ec>
    9e44:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e4c:	2200      	movs	r2, #0
    9e4e:	701a      	strb	r2, [r3, #0]
    9e50:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e58:	781b      	ldrb	r3, [r3, #0]
    9e5a:	461a      	mov	r2, r3
    9e5c:	f64c 0374 	movw	r3, #51316	; 0xc874
    9e60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e64:	7859      	ldrb	r1, [r3, #1]
    9e66:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9e6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e6e:	5499      	strb	r1, [r3, r2]
    9e70:	4bd1      	ldr	r3, [pc, #836]	; (a1b8 <send_desired+0x554>)
    9e72:	781a      	ldrb	r2, [r3, #0]
    9e74:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9e78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e7c:	781b      	ldrb	r3, [r3, #0]
    9e7e:	4413      	add	r3, r2
    9e80:	b2da      	uxtb	r2, r3
    9e82:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9e86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e8a:	701a      	strb	r2, [r3, #0]
    9e8c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9e90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e94:	781a      	ldrb	r2, [r3, #0]
    9e96:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9e9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e9e:	781b      	ldrb	r3, [r3, #0]
    9ea0:	4413      	add	r3, r2
    9ea2:	b2da      	uxtb	r2, r3
    9ea4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9ea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eac:	701a      	strb	r2, [r3, #0]
    9eae:	f24c 5349 	movw	r3, #50505	; 0xc549
    9eb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eb6:	781b      	ldrb	r3, [r3, #0]
    9eb8:	3301      	adds	r3, #1
    9eba:	b2da      	uxtb	r2, r3
    9ebc:	f24c 5349 	movw	r3, #50505	; 0xc549
    9ec0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ec4:	701a      	strb	r2, [r3, #0]
    9ec6:	f24c 5349 	movw	r3, #50505	; 0xc549
    9eca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ece:	781b      	ldrb	r3, [r3, #0]
    9ed0:	2bff      	cmp	r3, #255	; 0xff
    9ed2:	d105      	bne.n	9ee0 <send_desired+0x27c>
    9ed4:	f24c 5349 	movw	r3, #50505	; 0xc549
    9ed8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9edc:	2200      	movs	r2, #0
    9ede:	701a      	strb	r2, [r3, #0]
    9ee0:	f24c 5349 	movw	r3, #50505	; 0xc549
    9ee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ee8:	781b      	ldrb	r3, [r3, #0]
    9eea:	461a      	mov	r2, r3
    9eec:	f64c 0374 	movw	r3, #51316	; 0xc874
    9ef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ef4:	7899      	ldrb	r1, [r3, #2]
    9ef6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9efa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9efe:	5499      	strb	r1, [r3, r2]
    9f00:	4bae      	ldr	r3, [pc, #696]	; (a1bc <send_desired+0x558>)
    9f02:	781a      	ldrb	r2, [r3, #0]
    9f04:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9f08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f0c:	781b      	ldrb	r3, [r3, #0]
    9f0e:	4413      	add	r3, r2
    9f10:	b2da      	uxtb	r2, r3
    9f12:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9f16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f1a:	701a      	strb	r2, [r3, #0]
    9f1c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9f20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f24:	781a      	ldrb	r2, [r3, #0]
    9f26:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9f2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f2e:	781b      	ldrb	r3, [r3, #0]
    9f30:	4413      	add	r3, r2
    9f32:	b2da      	uxtb	r2, r3
    9f34:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9f38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f3c:	701a      	strb	r2, [r3, #0]
    9f3e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f46:	781b      	ldrb	r3, [r3, #0]
    9f48:	3301      	adds	r3, #1
    9f4a:	b2da      	uxtb	r2, r3
    9f4c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f54:	701a      	strb	r2, [r3, #0]
    9f56:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f5e:	781b      	ldrb	r3, [r3, #0]
    9f60:	2bff      	cmp	r3, #255	; 0xff
    9f62:	d105      	bne.n	9f70 <send_desired+0x30c>
    9f64:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f6c:	2200      	movs	r2, #0
    9f6e:	701a      	strb	r2, [r3, #0]
    9f70:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f78:	781b      	ldrb	r3, [r3, #0]
    9f7a:	461a      	mov	r2, r3
    9f7c:	f64c 0374 	movw	r3, #51316	; 0xc874
    9f80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f84:	78d9      	ldrb	r1, [r3, #3]
    9f86:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9f8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f8e:	5499      	strb	r1, [r3, r2]
    9f90:	4b8b      	ldr	r3, [pc, #556]	; (a1c0 <send_desired+0x55c>)
    9f92:	781a      	ldrb	r2, [r3, #0]
    9f94:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9f98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f9c:	781b      	ldrb	r3, [r3, #0]
    9f9e:	4413      	add	r3, r2
    9fa0:	b2da      	uxtb	r2, r3
    9fa2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9fa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9faa:	701a      	strb	r2, [r3, #0]
    9fac:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9fb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fb4:	781a      	ldrb	r2, [r3, #0]
    9fb6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9fba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fbe:	781b      	ldrb	r3, [r3, #0]
    9fc0:	4413      	add	r3, r2
    9fc2:	b2da      	uxtb	r2, r3
    9fc4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9fc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fcc:	701a      	strb	r2, [r3, #0]
    9fce:	f24c 5349 	movw	r3, #50505	; 0xc549
    9fd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fd6:	781b      	ldrb	r3, [r3, #0]
    9fd8:	3301      	adds	r3, #1
    9fda:	b2da      	uxtb	r2, r3
    9fdc:	f24c 5349 	movw	r3, #50505	; 0xc549
    9fe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fe4:	701a      	strb	r2, [r3, #0]
    9fe6:	f24c 5349 	movw	r3, #50505	; 0xc549
    9fea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fee:	781b      	ldrb	r3, [r3, #0]
    9ff0:	2bff      	cmp	r3, #255	; 0xff
    9ff2:	d105      	bne.n	a000 <send_desired+0x39c>
    9ff4:	f24c 5349 	movw	r3, #50505	; 0xc549
    9ff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ffc:	2200      	movs	r2, #0
    9ffe:	701a      	strb	r2, [r3, #0]
    a000:	f24c 5349 	movw	r3, #50505	; 0xc549
    a004:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a008:	781b      	ldrb	r3, [r3, #0]
    a00a:	461a      	mov	r2, r3
    a00c:	f64c 0378 	movw	r3, #51320	; 0xc878
    a010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a014:	7819      	ldrb	r1, [r3, #0]
    a016:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a01a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a01e:	5499      	strb	r1, [r3, r2]
    a020:	f64c 0378 	movw	r3, #51320	; 0xc878
    a024:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a028:	781a      	ldrb	r2, [r3, #0]
    a02a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a02e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a032:	781b      	ldrb	r3, [r3, #0]
    a034:	4413      	add	r3, r2
    a036:	b2da      	uxtb	r2, r3
    a038:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a03c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a040:	701a      	strb	r2, [r3, #0]
    a042:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a046:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a04a:	781a      	ldrb	r2, [r3, #0]
    a04c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a050:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a054:	781b      	ldrb	r3, [r3, #0]
    a056:	4413      	add	r3, r2
    a058:	b2da      	uxtb	r2, r3
    a05a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a05e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a062:	701a      	strb	r2, [r3, #0]
    a064:	f24c 5349 	movw	r3, #50505	; 0xc549
    a068:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a06c:	781b      	ldrb	r3, [r3, #0]
    a06e:	3301      	adds	r3, #1
    a070:	b2da      	uxtb	r2, r3
    a072:	f24c 5349 	movw	r3, #50505	; 0xc549
    a076:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a07a:	701a      	strb	r2, [r3, #0]
    a07c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a080:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a084:	781b      	ldrb	r3, [r3, #0]
    a086:	2bff      	cmp	r3, #255	; 0xff
    a088:	d105      	bne.n	a096 <send_desired+0x432>
    a08a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a08e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a092:	2200      	movs	r2, #0
    a094:	701a      	strb	r2, [r3, #0]
    a096:	f24c 5349 	movw	r3, #50505	; 0xc549
    a09a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a09e:	781b      	ldrb	r3, [r3, #0]
    a0a0:	461a      	mov	r2, r3
    a0a2:	f64c 0378 	movw	r3, #51320	; 0xc878
    a0a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0aa:	7859      	ldrb	r1, [r3, #1]
    a0ac:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a0b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0b4:	5499      	strb	r1, [r3, r2]
    a0b6:	4b43      	ldr	r3, [pc, #268]	; (a1c4 <send_desired+0x560>)
    a0b8:	781a      	ldrb	r2, [r3, #0]
    a0ba:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a0be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0c2:	781b      	ldrb	r3, [r3, #0]
    a0c4:	4413      	add	r3, r2
    a0c6:	b2da      	uxtb	r2, r3
    a0c8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a0cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0d0:	701a      	strb	r2, [r3, #0]
    a0d2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a0d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0da:	781a      	ldrb	r2, [r3, #0]
    a0dc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a0e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0e4:	781b      	ldrb	r3, [r3, #0]
    a0e6:	4413      	add	r3, r2
    a0e8:	b2da      	uxtb	r2, r3
    a0ea:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a0ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0f2:	701a      	strb	r2, [r3, #0]
    a0f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    a0f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0fc:	781b      	ldrb	r3, [r3, #0]
    a0fe:	3301      	adds	r3, #1
    a100:	b2da      	uxtb	r2, r3
    a102:	f24c 5349 	movw	r3, #50505	; 0xc549
    a106:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a10a:	701a      	strb	r2, [r3, #0]
    a10c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a110:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a114:	781b      	ldrb	r3, [r3, #0]
    a116:	2bff      	cmp	r3, #255	; 0xff
    a118:	d105      	bne.n	a126 <send_desired+0x4c2>
    a11a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a11e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a122:	2200      	movs	r2, #0
    a124:	701a      	strb	r2, [r3, #0]
    a126:	f24c 5349 	movw	r3, #50505	; 0xc549
    a12a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a12e:	781b      	ldrb	r3, [r3, #0]
    a130:	461a      	mov	r2, r3
    a132:	f64c 0378 	movw	r3, #51320	; 0xc878
    a136:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a13a:	7899      	ldrb	r1, [r3, #2]
    a13c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a140:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a144:	5499      	strb	r1, [r3, r2]
    a146:	4b20      	ldr	r3, [pc, #128]	; (a1c8 <send_desired+0x564>)
    a148:	781a      	ldrb	r2, [r3, #0]
    a14a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a14e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a152:	781b      	ldrb	r3, [r3, #0]
    a154:	4413      	add	r3, r2
    a156:	b2da      	uxtb	r2, r3
    a158:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a15c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a160:	701a      	strb	r2, [r3, #0]
    a162:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a166:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a16a:	781a      	ldrb	r2, [r3, #0]
    a16c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a170:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a174:	781b      	ldrb	r3, [r3, #0]
    a176:	4413      	add	r3, r2
    a178:	b2da      	uxtb	r2, r3
    a17a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a17e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a182:	701a      	strb	r2, [r3, #0]
    a184:	f24c 5349 	movw	r3, #50505	; 0xc549
    a188:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a18c:	781b      	ldrb	r3, [r3, #0]
    a18e:	3301      	adds	r3, #1
    a190:	b2da      	uxtb	r2, r3
    a192:	f24c 5349 	movw	r3, #50505	; 0xc549
    a196:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a19a:	701a      	strb	r2, [r3, #0]
    a19c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a1a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1a4:	781b      	ldrb	r3, [r3, #0]
    a1a6:	2bff      	cmp	r3, #255	; 0xff
    a1a8:	d110      	bne.n	a1cc <send_desired+0x568>
    a1aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    a1ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1b2:	2200      	movs	r2, #0
    a1b4:	701a      	strb	r2, [r3, #0]
    a1b6:	e009      	b.n	a1cc <send_desired+0x568>
    a1b8:	2004c875 	.word	0x2004c875
    a1bc:	2004c876 	.word	0x2004c876
    a1c0:	2004c877 	.word	0x2004c877
    a1c4:	2004c879 	.word	0x2004c879
    a1c8:	2004c87a 	.word	0x2004c87a
    a1cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    a1d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1d4:	781b      	ldrb	r3, [r3, #0]
    a1d6:	461a      	mov	r2, r3
    a1d8:	f64c 0378 	movw	r3, #51320	; 0xc878
    a1dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1e0:	78d9      	ldrb	r1, [r3, #3]
    a1e2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a1e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1ea:	5499      	strb	r1, [r3, r2]
    a1ec:	4bd3      	ldr	r3, [pc, #844]	; (a53c <send_desired+0x8d8>)
    a1ee:	781a      	ldrb	r2, [r3, #0]
    a1f0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a1f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1f8:	781b      	ldrb	r3, [r3, #0]
    a1fa:	4413      	add	r3, r2
    a1fc:	b2da      	uxtb	r2, r3
    a1fe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a202:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a206:	701a      	strb	r2, [r3, #0]
    a208:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a20c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a210:	781a      	ldrb	r2, [r3, #0]
    a212:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a216:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a21a:	781b      	ldrb	r3, [r3, #0]
    a21c:	4413      	add	r3, r2
    a21e:	b2da      	uxtb	r2, r3
    a220:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a224:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a228:	701a      	strb	r2, [r3, #0]
    a22a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a22e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a232:	781b      	ldrb	r3, [r3, #0]
    a234:	3301      	adds	r3, #1
    a236:	b2da      	uxtb	r2, r3
    a238:	f24c 5349 	movw	r3, #50505	; 0xc549
    a23c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a240:	701a      	strb	r2, [r3, #0]
    a242:	f24c 5349 	movw	r3, #50505	; 0xc549
    a246:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a24a:	781b      	ldrb	r3, [r3, #0]
    a24c:	2bff      	cmp	r3, #255	; 0xff
    a24e:	d105      	bne.n	a25c <send_desired+0x5f8>
    a250:	f24c 5349 	movw	r3, #50505	; 0xc549
    a254:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a258:	2200      	movs	r2, #0
    a25a:	701a      	strb	r2, [r3, #0]
    a25c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a260:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a264:	781b      	ldrb	r3, [r3, #0]
    a266:	461a      	mov	r2, r3
    a268:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a26c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a270:	7819      	ldrb	r1, [r3, #0]
    a272:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a276:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a27a:	5499      	strb	r1, [r3, r2]
    a27c:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a280:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a284:	781a      	ldrb	r2, [r3, #0]
    a286:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a28a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a28e:	781b      	ldrb	r3, [r3, #0]
    a290:	4413      	add	r3, r2
    a292:	b2da      	uxtb	r2, r3
    a294:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a298:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a29c:	701a      	strb	r2, [r3, #0]
    a29e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a2a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2a6:	781a      	ldrb	r2, [r3, #0]
    a2a8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a2ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2b0:	781b      	ldrb	r3, [r3, #0]
    a2b2:	4413      	add	r3, r2
    a2b4:	b2da      	uxtb	r2, r3
    a2b6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a2ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2be:	701a      	strb	r2, [r3, #0]
    a2c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a2c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2c8:	781b      	ldrb	r3, [r3, #0]
    a2ca:	3301      	adds	r3, #1
    a2cc:	b2da      	uxtb	r2, r3
    a2ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    a2d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2d6:	701a      	strb	r2, [r3, #0]
    a2d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a2dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2e0:	781b      	ldrb	r3, [r3, #0]
    a2e2:	2bff      	cmp	r3, #255	; 0xff
    a2e4:	d105      	bne.n	a2f2 <send_desired+0x68e>
    a2e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    a2ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2ee:	2200      	movs	r2, #0
    a2f0:	701a      	strb	r2, [r3, #0]
    a2f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    a2f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2fa:	781b      	ldrb	r3, [r3, #0]
    a2fc:	461a      	mov	r2, r3
    a2fe:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a302:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a306:	7859      	ldrb	r1, [r3, #1]
    a308:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a30c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a310:	5499      	strb	r1, [r3, r2]
    a312:	4b8b      	ldr	r3, [pc, #556]	; (a540 <send_desired+0x8dc>)
    a314:	781a      	ldrb	r2, [r3, #0]
    a316:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a31a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a31e:	781b      	ldrb	r3, [r3, #0]
    a320:	4413      	add	r3, r2
    a322:	b2da      	uxtb	r2, r3
    a324:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a328:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a32c:	701a      	strb	r2, [r3, #0]
    a32e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a336:	781a      	ldrb	r2, [r3, #0]
    a338:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a33c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a340:	781b      	ldrb	r3, [r3, #0]
    a342:	4413      	add	r3, r2
    a344:	b2da      	uxtb	r2, r3
    a346:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a34a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a34e:	701a      	strb	r2, [r3, #0]
    a350:	f24c 5349 	movw	r3, #50505	; 0xc549
    a354:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a358:	781b      	ldrb	r3, [r3, #0]
    a35a:	3301      	adds	r3, #1
    a35c:	b2da      	uxtb	r2, r3
    a35e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a362:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a366:	701a      	strb	r2, [r3, #0]
    a368:	f24c 5349 	movw	r3, #50505	; 0xc549
    a36c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a370:	781b      	ldrb	r3, [r3, #0]
    a372:	2bff      	cmp	r3, #255	; 0xff
    a374:	d105      	bne.n	a382 <send_desired+0x71e>
    a376:	f24c 5349 	movw	r3, #50505	; 0xc549
    a37a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a37e:	2200      	movs	r2, #0
    a380:	701a      	strb	r2, [r3, #0]
    a382:	f24c 5349 	movw	r3, #50505	; 0xc549
    a386:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a38a:	781b      	ldrb	r3, [r3, #0]
    a38c:	461a      	mov	r2, r3
    a38e:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a392:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a396:	7899      	ldrb	r1, [r3, #2]
    a398:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a39c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3a0:	5499      	strb	r1, [r3, r2]
    a3a2:	4b68      	ldr	r3, [pc, #416]	; (a544 <send_desired+0x8e0>)
    a3a4:	781a      	ldrb	r2, [r3, #0]
    a3a6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a3aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3ae:	781b      	ldrb	r3, [r3, #0]
    a3b0:	4413      	add	r3, r2
    a3b2:	b2da      	uxtb	r2, r3
    a3b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a3b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3bc:	701a      	strb	r2, [r3, #0]
    a3be:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a3c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3c6:	781a      	ldrb	r2, [r3, #0]
    a3c8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a3cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3d0:	781b      	ldrb	r3, [r3, #0]
    a3d2:	4413      	add	r3, r2
    a3d4:	b2da      	uxtb	r2, r3
    a3d6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a3da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3de:	701a      	strb	r2, [r3, #0]
    a3e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a3e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3e8:	781b      	ldrb	r3, [r3, #0]
    a3ea:	3301      	adds	r3, #1
    a3ec:	b2da      	uxtb	r2, r3
    a3ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    a3f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3f6:	701a      	strb	r2, [r3, #0]
    a3f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a3fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a400:	781b      	ldrb	r3, [r3, #0]
    a402:	2bff      	cmp	r3, #255	; 0xff
    a404:	d105      	bne.n	a412 <send_desired+0x7ae>
    a406:	f24c 5349 	movw	r3, #50505	; 0xc549
    a40a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a40e:	2200      	movs	r2, #0
    a410:	701a      	strb	r2, [r3, #0]
    a412:	f24c 5349 	movw	r3, #50505	; 0xc549
    a416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a41a:	781b      	ldrb	r3, [r3, #0]
    a41c:	461a      	mov	r2, r3
    a41e:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a426:	78d9      	ldrb	r1, [r3, #3]
    a428:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a42c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a430:	5499      	strb	r1, [r3, r2]
    a432:	4b45      	ldr	r3, [pc, #276]	; (a548 <send_desired+0x8e4>)
    a434:	781a      	ldrb	r2, [r3, #0]
    a436:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a43a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a43e:	781b      	ldrb	r3, [r3, #0]
    a440:	4413      	add	r3, r2
    a442:	b2da      	uxtb	r2, r3
    a444:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a448:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a44c:	701a      	strb	r2, [r3, #0]
    a44e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a452:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a456:	781a      	ldrb	r2, [r3, #0]
    a458:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a45c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a460:	781b      	ldrb	r3, [r3, #0]
    a462:	4413      	add	r3, r2
    a464:	b2da      	uxtb	r2, r3
    a466:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a46a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a46e:	701a      	strb	r2, [r3, #0]
    a470:	f24c 5349 	movw	r3, #50505	; 0xc549
    a474:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a478:	781b      	ldrb	r3, [r3, #0]
    a47a:	3301      	adds	r3, #1
    a47c:	b2da      	uxtb	r2, r3
    a47e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a482:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a486:	701a      	strb	r2, [r3, #0]
    a488:	f24c 5349 	movw	r3, #50505	; 0xc549
    a48c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a490:	781b      	ldrb	r3, [r3, #0]
    a492:	2bff      	cmp	r3, #255	; 0xff
    a494:	d105      	bne.n	a4a2 <send_desired+0x83e>
    a496:	f24c 5349 	movw	r3, #50505	; 0xc549
    a49a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a49e:	2200      	movs	r2, #0
    a4a0:	701a      	strb	r2, [r3, #0]
    a4a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    a4a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4aa:	781b      	ldrb	r3, [r3, #0]
    a4ac:	461a      	mov	r2, r3
    a4ae:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a4b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4b6:	7819      	ldrb	r1, [r3, #0]
    a4b8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a4bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4c0:	5499      	strb	r1, [r3, r2]
    a4c2:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a4c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4ca:	781a      	ldrb	r2, [r3, #0]
    a4cc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a4d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4d4:	781b      	ldrb	r3, [r3, #0]
    a4d6:	4413      	add	r3, r2
    a4d8:	b2da      	uxtb	r2, r3
    a4da:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a4de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4e2:	701a      	strb	r2, [r3, #0]
    a4e4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a4e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4ec:	781a      	ldrb	r2, [r3, #0]
    a4ee:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a4f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4f6:	781b      	ldrb	r3, [r3, #0]
    a4f8:	4413      	add	r3, r2
    a4fa:	b2da      	uxtb	r2, r3
    a4fc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a500:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a504:	701a      	strb	r2, [r3, #0]
    a506:	f24c 5349 	movw	r3, #50505	; 0xc549
    a50a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a50e:	781b      	ldrb	r3, [r3, #0]
    a510:	3301      	adds	r3, #1
    a512:	b2da      	uxtb	r2, r3
    a514:	f24c 5349 	movw	r3, #50505	; 0xc549
    a518:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a51c:	701a      	strb	r2, [r3, #0]
    a51e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a522:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a526:	781b      	ldrb	r3, [r3, #0]
    a528:	2bff      	cmp	r3, #255	; 0xff
    a52a:	d10f      	bne.n	a54c <send_desired+0x8e8>
    a52c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a530:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a534:	2200      	movs	r2, #0
    a536:	701a      	strb	r2, [r3, #0]
    a538:	e008      	b.n	a54c <send_desired+0x8e8>
    a53a:	bf00      	nop
    a53c:	2004c87b 	.word	0x2004c87b
    a540:	2004c8c1 	.word	0x2004c8c1
    a544:	2004c8c2 	.word	0x2004c8c2
    a548:	2004c8c3 	.word	0x2004c8c3
    a54c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a550:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a554:	781b      	ldrb	r3, [r3, #0]
    a556:	461a      	mov	r2, r3
    a558:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a55c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a560:	7859      	ldrb	r1, [r3, #1]
    a562:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a566:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a56a:	5499      	strb	r1, [r3, r2]
    a56c:	4bd1      	ldr	r3, [pc, #836]	; (a8b4 <send_desired+0xc50>)
    a56e:	781a      	ldrb	r2, [r3, #0]
    a570:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a574:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a578:	781b      	ldrb	r3, [r3, #0]
    a57a:	4413      	add	r3, r2
    a57c:	b2da      	uxtb	r2, r3
    a57e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a582:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a586:	701a      	strb	r2, [r3, #0]
    a588:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a58c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a590:	781a      	ldrb	r2, [r3, #0]
    a592:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a596:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a59a:	781b      	ldrb	r3, [r3, #0]
    a59c:	4413      	add	r3, r2
    a59e:	b2da      	uxtb	r2, r3
    a5a0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a5a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5a8:	701a      	strb	r2, [r3, #0]
    a5aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    a5ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5b2:	781b      	ldrb	r3, [r3, #0]
    a5b4:	3301      	adds	r3, #1
    a5b6:	b2da      	uxtb	r2, r3
    a5b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a5bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5c0:	701a      	strb	r2, [r3, #0]
    a5c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    a5c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5ca:	781b      	ldrb	r3, [r3, #0]
    a5cc:	2bff      	cmp	r3, #255	; 0xff
    a5ce:	d105      	bne.n	a5dc <send_desired+0x978>
    a5d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a5d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5d8:	2200      	movs	r2, #0
    a5da:	701a      	strb	r2, [r3, #0]
    a5dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    a5e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5e4:	781b      	ldrb	r3, [r3, #0]
    a5e6:	461a      	mov	r2, r3
    a5e8:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a5ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5f0:	7899      	ldrb	r1, [r3, #2]
    a5f2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a5f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5fa:	5499      	strb	r1, [r3, r2]
    a5fc:	4bae      	ldr	r3, [pc, #696]	; (a8b8 <send_desired+0xc54>)
    a5fe:	781a      	ldrb	r2, [r3, #0]
    a600:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a604:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a608:	781b      	ldrb	r3, [r3, #0]
    a60a:	4413      	add	r3, r2
    a60c:	b2da      	uxtb	r2, r3
    a60e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a612:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a616:	701a      	strb	r2, [r3, #0]
    a618:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a61c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a620:	781a      	ldrb	r2, [r3, #0]
    a622:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a626:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a62a:	781b      	ldrb	r3, [r3, #0]
    a62c:	4413      	add	r3, r2
    a62e:	b2da      	uxtb	r2, r3
    a630:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a634:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a638:	701a      	strb	r2, [r3, #0]
    a63a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a63e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a642:	781b      	ldrb	r3, [r3, #0]
    a644:	3301      	adds	r3, #1
    a646:	b2da      	uxtb	r2, r3
    a648:	f24c 5349 	movw	r3, #50505	; 0xc549
    a64c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a650:	701a      	strb	r2, [r3, #0]
    a652:	f24c 5349 	movw	r3, #50505	; 0xc549
    a656:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a65a:	781b      	ldrb	r3, [r3, #0]
    a65c:	2bff      	cmp	r3, #255	; 0xff
    a65e:	d105      	bne.n	a66c <send_desired+0xa08>
    a660:	f24c 5349 	movw	r3, #50505	; 0xc549
    a664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a668:	2200      	movs	r2, #0
    a66a:	701a      	strb	r2, [r3, #0]
    a66c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a670:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a674:	781b      	ldrb	r3, [r3, #0]
    a676:	461a      	mov	r2, r3
    a678:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a67c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a680:	78d9      	ldrb	r1, [r3, #3]
    a682:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a686:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a68a:	5499      	strb	r1, [r3, r2]
    a68c:	4b8b      	ldr	r3, [pc, #556]	; (a8bc <send_desired+0xc58>)
    a68e:	781a      	ldrb	r2, [r3, #0]
    a690:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a694:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a698:	781b      	ldrb	r3, [r3, #0]
    a69a:	4413      	add	r3, r2
    a69c:	b2da      	uxtb	r2, r3
    a69e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a6a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6a6:	701a      	strb	r2, [r3, #0]
    a6a8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a6ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6b0:	781a      	ldrb	r2, [r3, #0]
    a6b2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a6b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6ba:	781b      	ldrb	r3, [r3, #0]
    a6bc:	4413      	add	r3, r2
    a6be:	b2da      	uxtb	r2, r3
    a6c0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a6c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6c8:	701a      	strb	r2, [r3, #0]
    a6ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    a6ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6d2:	781b      	ldrb	r3, [r3, #0]
    a6d4:	3301      	adds	r3, #1
    a6d6:	b2da      	uxtb	r2, r3
    a6d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a6dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6e0:	701a      	strb	r2, [r3, #0]
    a6e2:	f24c 5349 	movw	r3, #50505	; 0xc549
    a6e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6ea:	781b      	ldrb	r3, [r3, #0]
    a6ec:	2bff      	cmp	r3, #255	; 0xff
    a6ee:	d105      	bne.n	a6fc <send_desired+0xa98>
    a6f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a6f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6f8:	2200      	movs	r2, #0
    a6fa:	701a      	strb	r2, [r3, #0]
    a6fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    a700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a704:	781b      	ldrb	r3, [r3, #0]
    a706:	461a      	mov	r2, r3
    a708:	f240 5374 	movw	r3, #1396	; 0x574
    a70c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a710:	7819      	ldrb	r1, [r3, #0]
    a712:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a716:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a71a:	5499      	strb	r1, [r3, r2]
    a71c:	f240 5374 	movw	r3, #1396	; 0x574
    a720:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a724:	781a      	ldrb	r2, [r3, #0]
    a726:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a72a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a72e:	781b      	ldrb	r3, [r3, #0]
    a730:	4413      	add	r3, r2
    a732:	b2da      	uxtb	r2, r3
    a734:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a738:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a73c:	701a      	strb	r2, [r3, #0]
    a73e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a742:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a746:	781a      	ldrb	r2, [r3, #0]
    a748:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a74c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a750:	781b      	ldrb	r3, [r3, #0]
    a752:	4413      	add	r3, r2
    a754:	b2da      	uxtb	r2, r3
    a756:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a75a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a75e:	701a      	strb	r2, [r3, #0]
    a760:	f24c 5349 	movw	r3, #50505	; 0xc549
    a764:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a768:	781b      	ldrb	r3, [r3, #0]
    a76a:	3301      	adds	r3, #1
    a76c:	b2da      	uxtb	r2, r3
    a76e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a772:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a776:	701a      	strb	r2, [r3, #0]
    a778:	f24c 5349 	movw	r3, #50505	; 0xc549
    a77c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a780:	781b      	ldrb	r3, [r3, #0]
    a782:	2bff      	cmp	r3, #255	; 0xff
    a784:	d105      	bne.n	a792 <send_desired+0xb2e>
    a786:	f24c 5349 	movw	r3, #50505	; 0xc549
    a78a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a78e:	2200      	movs	r2, #0
    a790:	701a      	strb	r2, [r3, #0]
    a792:	f24c 5349 	movw	r3, #50505	; 0xc549
    a796:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a79a:	781b      	ldrb	r3, [r3, #0]
    a79c:	461a      	mov	r2, r3
    a79e:	f240 5374 	movw	r3, #1396	; 0x574
    a7a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7a6:	7859      	ldrb	r1, [r3, #1]
    a7a8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a7ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7b0:	5499      	strb	r1, [r3, r2]
    a7b2:	4b43      	ldr	r3, [pc, #268]	; (a8c0 <send_desired+0xc5c>)
    a7b4:	781a      	ldrb	r2, [r3, #0]
    a7b6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a7ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7be:	781b      	ldrb	r3, [r3, #0]
    a7c0:	4413      	add	r3, r2
    a7c2:	b2da      	uxtb	r2, r3
    a7c4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a7c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7cc:	701a      	strb	r2, [r3, #0]
    a7ce:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a7d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7d6:	781a      	ldrb	r2, [r3, #0]
    a7d8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a7dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7e0:	781b      	ldrb	r3, [r3, #0]
    a7e2:	4413      	add	r3, r2
    a7e4:	b2da      	uxtb	r2, r3
    a7e6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a7ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7ee:	701a      	strb	r2, [r3, #0]
    a7f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a7f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7f8:	781b      	ldrb	r3, [r3, #0]
    a7fa:	3301      	adds	r3, #1
    a7fc:	b2da      	uxtb	r2, r3
    a7fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    a802:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a806:	701a      	strb	r2, [r3, #0]
    a808:	f24c 5349 	movw	r3, #50505	; 0xc549
    a80c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a810:	781b      	ldrb	r3, [r3, #0]
    a812:	2bff      	cmp	r3, #255	; 0xff
    a814:	d105      	bne.n	a822 <send_desired+0xbbe>
    a816:	f24c 5349 	movw	r3, #50505	; 0xc549
    a81a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a81e:	2200      	movs	r2, #0
    a820:	701a      	strb	r2, [r3, #0]
    a822:	f24c 5349 	movw	r3, #50505	; 0xc549
    a826:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a82a:	781b      	ldrb	r3, [r3, #0]
    a82c:	461a      	mov	r2, r3
    a82e:	f240 5374 	movw	r3, #1396	; 0x574
    a832:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a836:	7899      	ldrb	r1, [r3, #2]
    a838:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a83c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a840:	5499      	strb	r1, [r3, r2]
    a842:	4b20      	ldr	r3, [pc, #128]	; (a8c4 <send_desired+0xc60>)
    a844:	781a      	ldrb	r2, [r3, #0]
    a846:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a84a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a84e:	781b      	ldrb	r3, [r3, #0]
    a850:	4413      	add	r3, r2
    a852:	b2da      	uxtb	r2, r3
    a854:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a858:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a85c:	701a      	strb	r2, [r3, #0]
    a85e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a862:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a866:	781a      	ldrb	r2, [r3, #0]
    a868:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a86c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a870:	781b      	ldrb	r3, [r3, #0]
    a872:	4413      	add	r3, r2
    a874:	b2da      	uxtb	r2, r3
    a876:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a87a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a87e:	701a      	strb	r2, [r3, #0]
    a880:	f24c 5349 	movw	r3, #50505	; 0xc549
    a884:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a888:	781b      	ldrb	r3, [r3, #0]
    a88a:	3301      	adds	r3, #1
    a88c:	b2da      	uxtb	r2, r3
    a88e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a892:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a896:	701a      	strb	r2, [r3, #0]
    a898:	f24c 5349 	movw	r3, #50505	; 0xc549
    a89c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8a0:	781b      	ldrb	r3, [r3, #0]
    a8a2:	2bff      	cmp	r3, #255	; 0xff
    a8a4:	d110      	bne.n	a8c8 <send_desired+0xc64>
    a8a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    a8aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8ae:	2200      	movs	r2, #0
    a8b0:	701a      	strb	r2, [r3, #0]
    a8b2:	e009      	b.n	a8c8 <send_desired+0xc64>
    a8b4:	2004c8c5 	.word	0x2004c8c5
    a8b8:	2004c8c6 	.word	0x2004c8c6
    a8bc:	2004c8c7 	.word	0x2004c8c7
    a8c0:	20000575 	.word	0x20000575
    a8c4:	20000576 	.word	0x20000576
    a8c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a8cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8d0:	781b      	ldrb	r3, [r3, #0]
    a8d2:	461a      	mov	r2, r3
    a8d4:	f240 5374 	movw	r3, #1396	; 0x574
    a8d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8dc:	78d9      	ldrb	r1, [r3, #3]
    a8de:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a8e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8e6:	5499      	strb	r1, [r3, r2]
    a8e8:	4b79      	ldr	r3, [pc, #484]	; (aad0 <send_desired+0xe6c>)
    a8ea:	781a      	ldrb	r2, [r3, #0]
    a8ec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a8f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8f4:	781b      	ldrb	r3, [r3, #0]
    a8f6:	4413      	add	r3, r2
    a8f8:	b2da      	uxtb	r2, r3
    a8fa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a8fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a902:	701a      	strb	r2, [r3, #0]
    a904:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a90c:	781a      	ldrb	r2, [r3, #0]
    a90e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a916:	781b      	ldrb	r3, [r3, #0]
    a918:	4413      	add	r3, r2
    a91a:	b2da      	uxtb	r2, r3
    a91c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a924:	701a      	strb	r2, [r3, #0]
    a926:	f24c 5349 	movw	r3, #50505	; 0xc549
    a92a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a92e:	781b      	ldrb	r3, [r3, #0]
    a930:	3301      	adds	r3, #1
    a932:	b2da      	uxtb	r2, r3
    a934:	f24c 5349 	movw	r3, #50505	; 0xc549
    a938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a93c:	701a      	strb	r2, [r3, #0]
    a93e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a942:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a946:	781b      	ldrb	r3, [r3, #0]
    a948:	2bff      	cmp	r3, #255	; 0xff
    a94a:	d105      	bne.n	a958 <send_desired+0xcf4>
    a94c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a950:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a954:	2200      	movs	r2, #0
    a956:	701a      	strb	r2, [r3, #0]
    a958:	f24c 5349 	movw	r3, #50505	; 0xc549
    a95c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a960:	781b      	ldrb	r3, [r3, #0]
    a962:	461a      	mov	r2, r3
    a964:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a968:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a96c:	7819      	ldrb	r1, [r3, #0]
    a96e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a972:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a976:	5499      	strb	r1, [r3, r2]
    a978:	f24c 5349 	movw	r3, #50505	; 0xc549
    a97c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a980:	781b      	ldrb	r3, [r3, #0]
    a982:	3301      	adds	r3, #1
    a984:	b2da      	uxtb	r2, r3
    a986:	f24c 5349 	movw	r3, #50505	; 0xc549
    a98a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a98e:	701a      	strb	r2, [r3, #0]
    a990:	f24c 5349 	movw	r3, #50505	; 0xc549
    a994:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a998:	781b      	ldrb	r3, [r3, #0]
    a99a:	2bff      	cmp	r3, #255	; 0xff
    a99c:	d105      	bne.n	a9aa <send_desired+0xd46>
    a99e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a9a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9a6:	2200      	movs	r2, #0
    a9a8:	701a      	strb	r2, [r3, #0]
    a9aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    a9ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9b2:	781b      	ldrb	r3, [r3, #0]
    a9b4:	461a      	mov	r2, r3
    a9b6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a9ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9be:	7819      	ldrb	r1, [r3, #0]
    a9c0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a9c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9c8:	5499      	strb	r1, [r3, r2]
    a9ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    a9ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9d2:	781b      	ldrb	r3, [r3, #0]
    a9d4:	3301      	adds	r3, #1
    a9d6:	b2da      	uxtb	r2, r3
    a9d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a9dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9e0:	701a      	strb	r2, [r3, #0]
    a9e2:	f24c 5349 	movw	r3, #50505	; 0xc549
    a9e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9ea:	781b      	ldrb	r3, [r3, #0]
    a9ec:	2bff      	cmp	r3, #255	; 0xff
    a9ee:	d105      	bne.n	a9fc <send_desired+0xd98>
    a9f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a9f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9f8:	2200      	movs	r2, #0
    a9fa:	701a      	strb	r2, [r3, #0]
    a9fc:	f242 0339 	movw	r3, #8249	; 0x2039
    aa00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa04:	781b      	ldrb	r3, [r3, #0]
    aa06:	b2db      	uxtb	r3, r3
    aa08:	f003 0310 	and.w	r3, r3, #16
    aa0c:	2b00      	cmp	r3, #0
    aa0e:	d15a      	bne.n	aac6 <send_desired+0xe62>
    aa10:	f24c 534a 	movw	r3, #50506	; 0xc54a
    aa14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa18:	781b      	ldrb	r3, [r3, #0]
    aa1a:	b2db      	uxtb	r3, r3
    aa1c:	461a      	mov	r2, r3
    aa1e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    aa22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa26:	5c9a      	ldrb	r2, [r3, r2]
    aa28:	f24c 634b 	movw	r3, #50763	; 0xc64b
    aa2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa30:	701a      	strb	r2, [r3, #0]
    aa32:	f24c 634c 	movw	r3, #50764	; 0xc64c
    aa36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa3a:	2200      	movs	r2, #0
    aa3c:	701a      	strb	r2, [r3, #0]
    aa3e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    aa42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa46:	781b      	ldrb	r3, [r3, #0]
    aa48:	b2db      	uxtb	r3, r3
    aa4a:	3301      	adds	r3, #1
    aa4c:	b2da      	uxtb	r2, r3
    aa4e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    aa52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa56:	701a      	strb	r2, [r3, #0]
    aa58:	f24c 534a 	movw	r3, #50506	; 0xc54a
    aa5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa60:	781b      	ldrb	r3, [r3, #0]
    aa62:	b2db      	uxtb	r3, r3
    aa64:	2bff      	cmp	r3, #255	; 0xff
    aa66:	d105      	bne.n	aa74 <send_desired+0xe10>
    aa68:	f24c 534a 	movw	r3, #50506	; 0xc54a
    aa6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa70:	2200      	movs	r2, #0
    aa72:	701a      	strb	r2, [r3, #0]
    aa74:	f242 0338 	movw	r3, #8248	; 0x2038
    aa78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa7c:	f242 0238 	movw	r2, #8248	; 0x2038
    aa80:	f2c2 0200 	movt	r2, #8192	; 0x2000
    aa84:	7812      	ldrb	r2, [r2, #0]
    aa86:	b2d2      	uxtb	r2, r2
    aa88:	f042 0201 	orr.w	r2, r2, #1
    aa8c:	b2d2      	uxtb	r2, r2
    aa8e:	701a      	strb	r2, [r3, #0]
    aa90:	f242 0339 	movw	r3, #8249	; 0x2039
    aa94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa98:	f242 0239 	movw	r2, #8249	; 0x2039
    aa9c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    aaa0:	7812      	ldrb	r2, [r2, #0]
    aaa2:	b2d2      	uxtb	r2, r2
    aaa4:	f042 0210 	orr.w	r2, r2, #16
    aaa8:	b2d2      	uxtb	r2, r2
    aaaa:	701a      	strb	r2, [r3, #0]
    aaac:	e00b      	b.n	aac6 <send_desired+0xe62>
    aaae:	f24c 5348 	movw	r3, #50504	; 0xc548
    aab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aab6:	781b      	ldrb	r3, [r3, #0]
    aab8:	3301      	adds	r3, #1
    aaba:	b2da      	uxtb	r2, r3
    aabc:	f24c 5348 	movw	r3, #50504	; 0xc548
    aac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aac4:	701a      	strb	r2, [r3, #0]
}
    aac6:	46bd      	mov	sp, r7
    aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
    aacc:	4770      	bx	lr
    aace:	bf00      	nop
    aad0:	20000577 	.word	0x20000577

0000aad4 <send_bat>:
void send_bat(void){  //2000ms
    aad4:	b480      	push	{r7}
    aad6:	af00      	add	r7, sp, #0
  if(!boot)
    aad8:	f240 533d 	movw	r3, #1341	; 0x53d
    aadc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aae0:	781b      	ldrb	r3, [r3, #0]
    aae2:	2b00      	cmp	r3, #0
    aae4:	f040 83af 	bne.w	b246 <send_bat+0x772>
  { if (count % 20 == 8) PERIODIC_SEND_BAT();}
    aae8:	f24c 5341 	movw	r3, #50497	; 0xc541
    aaec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaf0:	781a      	ldrb	r2, [r3, #0]
    aaf2:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    aaf6:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    aafa:	fba3 1302 	umull	r1, r3, r3, r2
    aafe:	0919      	lsrs	r1, r3, #4
    ab00:	460b      	mov	r3, r1
    ab02:	009b      	lsls	r3, r3, #2
    ab04:	440b      	add	r3, r1
    ab06:	009b      	lsls	r3, r3, #2
    ab08:	1ad3      	subs	r3, r2, r3
    ab0a:	b2db      	uxtb	r3, r3
    ab0c:	2b08      	cmp	r3, #8
    ab0e:	f040 839a 	bne.w	b246 <send_bat+0x772>
    ab12:	f24c 5349 	movw	r3, #50505	; 0xc549
    ab16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab1a:	781a      	ldrb	r2, [r3, #0]
    ab1c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ab20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab24:	781b      	ldrb	r3, [r3, #0]
    ab26:	b2db      	uxtb	r3, r3
    ab28:	429a      	cmp	r2, r3
    ab2a:	d313      	bcc.n	ab54 <send_bat+0x80>
    ab2c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ab30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab34:	781b      	ldrb	r3, [r3, #0]
    ab36:	b2db      	uxtb	r3, r3
    ab38:	461a      	mov	r2, r3
    ab3a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ab3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab42:	781b      	ldrb	r3, [r3, #0]
    ab44:	1ad3      	subs	r3, r2, r3
    ab46:	33ff      	adds	r3, #255	; 0xff
    ab48:	2b0c      	cmp	r3, #12
    ab4a:	bfd4      	ite	le
    ab4c:	2300      	movle	r3, #0
    ab4e:	2301      	movgt	r3, #1
    ab50:	b2db      	uxtb	r3, r3
    ab52:	e011      	b.n	ab78 <send_bat+0xa4>
    ab54:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ab58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab5c:	781b      	ldrb	r3, [r3, #0]
    ab5e:	b2db      	uxtb	r3, r3
    ab60:	461a      	mov	r2, r3
    ab62:	f24c 5349 	movw	r3, #50505	; 0xc549
    ab66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab6a:	781b      	ldrb	r3, [r3, #0]
    ab6c:	1ad3      	subs	r3, r2, r3
    ab6e:	2b0c      	cmp	r3, #12
    ab70:	bfd4      	ite	le
    ab72:	2300      	movle	r3, #0
    ab74:	2301      	movgt	r3, #1
    ab76:	b2db      	uxtb	r3, r3
    ab78:	2b00      	cmp	r3, #0
    ab7a:	f000 8358 	beq.w	b22e <send_bat+0x75a>
    ab7e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ab82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab86:	781b      	ldrb	r3, [r3, #0]
    ab88:	461a      	mov	r2, r3
    ab8a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ab8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab92:	2105      	movs	r1, #5
    ab94:	5499      	strb	r1, [r3, r2]
    ab96:	f24c 5349 	movw	r3, #50505	; 0xc549
    ab9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab9e:	781b      	ldrb	r3, [r3, #0]
    aba0:	3301      	adds	r3, #1
    aba2:	b2da      	uxtb	r2, r3
    aba4:	f24c 5349 	movw	r3, #50505	; 0xc549
    aba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abac:	701a      	strb	r2, [r3, #0]
    abae:	f24c 5349 	movw	r3, #50505	; 0xc549
    abb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abb6:	781b      	ldrb	r3, [r3, #0]
    abb8:	2bff      	cmp	r3, #255	; 0xff
    abba:	d105      	bne.n	abc8 <send_bat+0xf4>
    abbc:	f24c 5349 	movw	r3, #50505	; 0xc549
    abc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abc4:	2200      	movs	r2, #0
    abc6:	701a      	strb	r2, [r3, #0]
    abc8:	f24c 5349 	movw	r3, #50505	; 0xc549
    abcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abd0:	781b      	ldrb	r3, [r3, #0]
    abd2:	461a      	mov	r2, r3
    abd4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    abd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abdc:	210c      	movs	r1, #12
    abde:	5499      	strb	r1, [r3, r2]
    abe0:	f24c 5349 	movw	r3, #50505	; 0xc549
    abe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abe8:	781b      	ldrb	r3, [r3, #0]
    abea:	3301      	adds	r3, #1
    abec:	b2da      	uxtb	r2, r3
    abee:	f24c 5349 	movw	r3, #50505	; 0xc549
    abf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abf6:	701a      	strb	r2, [r3, #0]
    abf8:	f24c 5349 	movw	r3, #50505	; 0xc549
    abfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac00:	781b      	ldrb	r3, [r3, #0]
    ac02:	2bff      	cmp	r3, #255	; 0xff
    ac04:	d105      	bne.n	ac12 <send_bat+0x13e>
    ac06:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac0e:	2200      	movs	r2, #0
    ac10:	701a      	strb	r2, [r3, #0]
    ac12:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ac16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac1a:	220c      	movs	r2, #12
    ac1c:	701a      	strb	r2, [r3, #0]
    ac1e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ac22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac26:	220c      	movs	r2, #12
    ac28:	701a      	strb	r2, [r3, #0]
    ac2a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac32:	781b      	ldrb	r3, [r3, #0]
    ac34:	461a      	mov	r2, r3
    ac36:	f24c 5332 	movw	r3, #50482	; 0xc532
    ac3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac3e:	7819      	ldrb	r1, [r3, #0]
    ac40:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ac44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac48:	5499      	strb	r1, [r3, r2]
    ac4a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ac4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac52:	781a      	ldrb	r2, [r3, #0]
    ac54:	f24c 5332 	movw	r3, #50482	; 0xc532
    ac58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac5c:	781b      	ldrb	r3, [r3, #0]
    ac5e:	4413      	add	r3, r2
    ac60:	b2da      	uxtb	r2, r3
    ac62:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ac66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac6a:	701a      	strb	r2, [r3, #0]
    ac6c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ac70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac74:	781a      	ldrb	r2, [r3, #0]
    ac76:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ac7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac7e:	781b      	ldrb	r3, [r3, #0]
    ac80:	4413      	add	r3, r2
    ac82:	b2da      	uxtb	r2, r3
    ac84:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ac88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac8c:	701a      	strb	r2, [r3, #0]
    ac8e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac96:	781b      	ldrb	r3, [r3, #0]
    ac98:	3301      	adds	r3, #1
    ac9a:	b2da      	uxtb	r2, r3
    ac9c:	f24c 5349 	movw	r3, #50505	; 0xc549
    aca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aca4:	701a      	strb	r2, [r3, #0]
    aca6:	f24c 5349 	movw	r3, #50505	; 0xc549
    acaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acae:	781b      	ldrb	r3, [r3, #0]
    acb0:	2bff      	cmp	r3, #255	; 0xff
    acb2:	d105      	bne.n	acc0 <send_bat+0x1ec>
    acb4:	f24c 5349 	movw	r3, #50505	; 0xc549
    acb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acbc:	2200      	movs	r2, #0
    acbe:	701a      	strb	r2, [r3, #0]
    acc0:	f24c 5349 	movw	r3, #50505	; 0xc549
    acc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acc8:	781b      	ldrb	r3, [r3, #0]
    acca:	461a      	mov	r2, r3
    accc:	f64c 332c 	movw	r3, #52012	; 0xcb2c
    acd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acd4:	7819      	ldrb	r1, [r3, #0]
    acd6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    acda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acde:	5499      	strb	r1, [r3, r2]
    ace0:	f64c 332c 	movw	r3, #52012	; 0xcb2c
    ace4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ace8:	781a      	ldrb	r2, [r3, #0]
    acea:	f24c 634d 	movw	r3, #50765	; 0xc64d
    acee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acf2:	781b      	ldrb	r3, [r3, #0]
    acf4:	4413      	add	r3, r2
    acf6:	b2da      	uxtb	r2, r3
    acf8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    acfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad00:	701a      	strb	r2, [r3, #0]
    ad02:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ad06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad0a:	781a      	ldrb	r2, [r3, #0]
    ad0c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ad10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad14:	781b      	ldrb	r3, [r3, #0]
    ad16:	4413      	add	r3, r2
    ad18:	b2da      	uxtb	r2, r3
    ad1a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ad1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad22:	701a      	strb	r2, [r3, #0]
    ad24:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad2c:	781b      	ldrb	r3, [r3, #0]
    ad2e:	3301      	adds	r3, #1
    ad30:	b2da      	uxtb	r2, r3
    ad32:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad3a:	701a      	strb	r2, [r3, #0]
    ad3c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad44:	781b      	ldrb	r3, [r3, #0]
    ad46:	2bff      	cmp	r3, #255	; 0xff
    ad48:	d105      	bne.n	ad56 <send_bat+0x282>
    ad4a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad52:	2200      	movs	r2, #0
    ad54:	701a      	strb	r2, [r3, #0]
    ad56:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad5e:	781b      	ldrb	r3, [r3, #0]
    ad60:	461a      	mov	r2, r3
    ad62:	f64c 332c 	movw	r3, #52012	; 0xcb2c
    ad66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad6a:	7859      	ldrb	r1, [r3, #1]
    ad6c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ad70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad74:	5499      	strb	r1, [r3, r2]
    ad76:	4bd5      	ldr	r3, [pc, #852]	; (b0cc <send_bat+0x5f8>)
    ad78:	781a      	ldrb	r2, [r3, #0]
    ad7a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ad7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad82:	781b      	ldrb	r3, [r3, #0]
    ad84:	4413      	add	r3, r2
    ad86:	b2da      	uxtb	r2, r3
    ad88:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ad8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad90:	701a      	strb	r2, [r3, #0]
    ad92:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ad96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad9a:	781a      	ldrb	r2, [r3, #0]
    ad9c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ada0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ada4:	781b      	ldrb	r3, [r3, #0]
    ada6:	4413      	add	r3, r2
    ada8:	b2da      	uxtb	r2, r3
    adaa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    adae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adb2:	701a      	strb	r2, [r3, #0]
    adb4:	f24c 5349 	movw	r3, #50505	; 0xc549
    adb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adbc:	781b      	ldrb	r3, [r3, #0]
    adbe:	3301      	adds	r3, #1
    adc0:	b2da      	uxtb	r2, r3
    adc2:	f24c 5349 	movw	r3, #50505	; 0xc549
    adc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adca:	701a      	strb	r2, [r3, #0]
    adcc:	f24c 5349 	movw	r3, #50505	; 0xc549
    add0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    add4:	781b      	ldrb	r3, [r3, #0]
    add6:	2bff      	cmp	r3, #255	; 0xff
    add8:	d105      	bne.n	ade6 <send_bat+0x312>
    adda:	f24c 5349 	movw	r3, #50505	; 0xc549
    adde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ade2:	2200      	movs	r2, #0
    ade4:	701a      	strb	r2, [r3, #0]
    ade6:	f24c 5349 	movw	r3, #50505	; 0xc549
    adea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adee:	781b      	ldrb	r3, [r3, #0]
    adf0:	461a      	mov	r2, r3
    adf2:	f24c 5335 	movw	r3, #50485	; 0xc535
    adf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adfa:	7819      	ldrb	r1, [r3, #0]
    adfc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ae00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae04:	5499      	strb	r1, [r3, r2]
    ae06:	f24c 5335 	movw	r3, #50485	; 0xc535
    ae0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae0e:	781a      	ldrb	r2, [r3, #0]
    ae10:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ae14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae18:	781b      	ldrb	r3, [r3, #0]
    ae1a:	4413      	add	r3, r2
    ae1c:	b2da      	uxtb	r2, r3
    ae1e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ae22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae26:	701a      	strb	r2, [r3, #0]
    ae28:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ae2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae30:	781a      	ldrb	r2, [r3, #0]
    ae32:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ae36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae3a:	781b      	ldrb	r3, [r3, #0]
    ae3c:	4413      	add	r3, r2
    ae3e:	b2da      	uxtb	r2, r3
    ae40:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ae44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae48:	701a      	strb	r2, [r3, #0]
    ae4a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae52:	781b      	ldrb	r3, [r3, #0]
    ae54:	3301      	adds	r3, #1
    ae56:	b2da      	uxtb	r2, r3
    ae58:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae60:	701a      	strb	r2, [r3, #0]
    ae62:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae6a:	781b      	ldrb	r3, [r3, #0]
    ae6c:	2bff      	cmp	r3, #255	; 0xff
    ae6e:	d105      	bne.n	ae7c <send_bat+0x3a8>
    ae70:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae78:	2200      	movs	r2, #0
    ae7a:	701a      	strb	r2, [r3, #0]
    ae7c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae84:	781b      	ldrb	r3, [r3, #0]
    ae86:	461a      	mov	r2, r3
    ae88:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
    ae8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae90:	7819      	ldrb	r1, [r3, #0]
    ae92:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ae96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae9a:	5499      	strb	r1, [r3, r2]
    ae9c:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
    aea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aea4:	781a      	ldrb	r2, [r3, #0]
    aea6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    aeaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeae:	781b      	ldrb	r3, [r3, #0]
    aeb0:	4413      	add	r3, r2
    aeb2:	b2da      	uxtb	r2, r3
    aeb4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    aeb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aebc:	701a      	strb	r2, [r3, #0]
    aebe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    aec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aec6:	781a      	ldrb	r2, [r3, #0]
    aec8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    aecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aed0:	781b      	ldrb	r3, [r3, #0]
    aed2:	4413      	add	r3, r2
    aed4:	b2da      	uxtb	r2, r3
    aed6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    aeda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aede:	701a      	strb	r2, [r3, #0]
    aee0:	f24c 5349 	movw	r3, #50505	; 0xc549
    aee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aee8:	781b      	ldrb	r3, [r3, #0]
    aeea:	3301      	adds	r3, #1
    aeec:	b2da      	uxtb	r2, r3
    aeee:	f24c 5349 	movw	r3, #50505	; 0xc549
    aef2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aef6:	701a      	strb	r2, [r3, #0]
    aef8:	f24c 5349 	movw	r3, #50505	; 0xc549
    aefc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af00:	781b      	ldrb	r3, [r3, #0]
    af02:	2bff      	cmp	r3, #255	; 0xff
    af04:	d105      	bne.n	af12 <send_bat+0x43e>
    af06:	f24c 5349 	movw	r3, #50505	; 0xc549
    af0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af0e:	2200      	movs	r2, #0
    af10:	701a      	strb	r2, [r3, #0]
    af12:	f24c 5349 	movw	r3, #50505	; 0xc549
    af16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af1a:	781b      	ldrb	r3, [r3, #0]
    af1c:	461a      	mov	r2, r3
    af1e:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
    af22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af26:	7859      	ldrb	r1, [r3, #1]
    af28:	f24c 534c 	movw	r3, #50508	; 0xc54c
    af2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af30:	5499      	strb	r1, [r3, r2]
    af32:	4b67      	ldr	r3, [pc, #412]	; (b0d0 <send_bat+0x5fc>)
    af34:	781a      	ldrb	r2, [r3, #0]
    af36:	f24c 634d 	movw	r3, #50765	; 0xc64d
    af3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af3e:	781b      	ldrb	r3, [r3, #0]
    af40:	4413      	add	r3, r2
    af42:	b2da      	uxtb	r2, r3
    af44:	f24c 634d 	movw	r3, #50765	; 0xc64d
    af48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af4c:	701a      	strb	r2, [r3, #0]
    af4e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    af52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af56:	781a      	ldrb	r2, [r3, #0]
    af58:	f24c 634d 	movw	r3, #50765	; 0xc64d
    af5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af60:	781b      	ldrb	r3, [r3, #0]
    af62:	4413      	add	r3, r2
    af64:	b2da      	uxtb	r2, r3
    af66:	f24c 634e 	movw	r3, #50766	; 0xc64e
    af6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af6e:	701a      	strb	r2, [r3, #0]
    af70:	f24c 5349 	movw	r3, #50505	; 0xc549
    af74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af78:	781b      	ldrb	r3, [r3, #0]
    af7a:	3301      	adds	r3, #1
    af7c:	b2da      	uxtb	r2, r3
    af7e:	f24c 5349 	movw	r3, #50505	; 0xc549
    af82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af86:	701a      	strb	r2, [r3, #0]
    af88:	f24c 5349 	movw	r3, #50505	; 0xc549
    af8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af90:	781b      	ldrb	r3, [r3, #0]
    af92:	2bff      	cmp	r3, #255	; 0xff
    af94:	d105      	bne.n	afa2 <send_bat+0x4ce>
    af96:	f24c 5349 	movw	r3, #50505	; 0xc549
    af9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af9e:	2200      	movs	r2, #0
    afa0:	701a      	strb	r2, [r3, #0]
    afa2:	f24c 5349 	movw	r3, #50505	; 0xc549
    afa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afaa:	781b      	ldrb	r3, [r3, #0]
    afac:	461a      	mov	r2, r3
    afae:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
    afb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afb6:	7819      	ldrb	r1, [r3, #0]
    afb8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    afbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afc0:	5499      	strb	r1, [r3, r2]
    afc2:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
    afc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afca:	781a      	ldrb	r2, [r3, #0]
    afcc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    afd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afd4:	781b      	ldrb	r3, [r3, #0]
    afd6:	4413      	add	r3, r2
    afd8:	b2da      	uxtb	r2, r3
    afda:	f24c 634d 	movw	r3, #50765	; 0xc64d
    afde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afe2:	701a      	strb	r2, [r3, #0]
    afe4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    afe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afec:	781a      	ldrb	r2, [r3, #0]
    afee:	f24c 634d 	movw	r3, #50765	; 0xc64d
    aff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aff6:	781b      	ldrb	r3, [r3, #0]
    aff8:	4413      	add	r3, r2
    affa:	b2da      	uxtb	r2, r3
    affc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b000:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b004:	701a      	strb	r2, [r3, #0]
    b006:	f24c 5349 	movw	r3, #50505	; 0xc549
    b00a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b00e:	781b      	ldrb	r3, [r3, #0]
    b010:	3301      	adds	r3, #1
    b012:	b2da      	uxtb	r2, r3
    b014:	f24c 5349 	movw	r3, #50505	; 0xc549
    b018:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b01c:	701a      	strb	r2, [r3, #0]
    b01e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b022:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b026:	781b      	ldrb	r3, [r3, #0]
    b028:	2bff      	cmp	r3, #255	; 0xff
    b02a:	d105      	bne.n	b038 <send_bat+0x564>
    b02c:	f24c 5349 	movw	r3, #50505	; 0xc549
    b030:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b034:	2200      	movs	r2, #0
    b036:	701a      	strb	r2, [r3, #0]
    b038:	f24c 5349 	movw	r3, #50505	; 0xc549
    b03c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b040:	781b      	ldrb	r3, [r3, #0]
    b042:	461a      	mov	r2, r3
    b044:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
    b048:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b04c:	7859      	ldrb	r1, [r3, #1]
    b04e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b052:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b056:	5499      	strb	r1, [r3, r2]
    b058:	4b1e      	ldr	r3, [pc, #120]	; (b0d4 <send_bat+0x600>)
    b05a:	781a      	ldrb	r2, [r3, #0]
    b05c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b060:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b064:	781b      	ldrb	r3, [r3, #0]
    b066:	4413      	add	r3, r2
    b068:	b2da      	uxtb	r2, r3
    b06a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b06e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b072:	701a      	strb	r2, [r3, #0]
    b074:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b078:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b07c:	781a      	ldrb	r2, [r3, #0]
    b07e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b082:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b086:	781b      	ldrb	r3, [r3, #0]
    b088:	4413      	add	r3, r2
    b08a:	b2da      	uxtb	r2, r3
    b08c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b090:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b094:	701a      	strb	r2, [r3, #0]
    b096:	f24c 5349 	movw	r3, #50505	; 0xc549
    b09a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b09e:	781b      	ldrb	r3, [r3, #0]
    b0a0:	3301      	adds	r3, #1
    b0a2:	b2da      	uxtb	r2, r3
    b0a4:	f24c 5349 	movw	r3, #50505	; 0xc549
    b0a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0ac:	701a      	strb	r2, [r3, #0]
    b0ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    b0b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0b6:	781b      	ldrb	r3, [r3, #0]
    b0b8:	2bff      	cmp	r3, #255	; 0xff
    b0ba:	d10d      	bne.n	b0d8 <send_bat+0x604>
    b0bc:	f24c 5349 	movw	r3, #50505	; 0xc549
    b0c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0c4:	2200      	movs	r2, #0
    b0c6:	701a      	strb	r2, [r3, #0]
    b0c8:	e006      	b.n	b0d8 <send_bat+0x604>
    b0ca:	bf00      	nop
    b0cc:	2004cb2d 	.word	0x2004cb2d
    b0d0:	2004c8b7 	.word	0x2004c8b7
    b0d4:	2004c8b5 	.word	0x2004c8b5
    b0d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b0dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0e0:	781b      	ldrb	r3, [r3, #0]
    b0e2:	461a      	mov	r2, r3
    b0e4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b0e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0ec:	7819      	ldrb	r1, [r3, #0]
    b0ee:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b0f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0f6:	5499      	strb	r1, [r3, r2]
    b0f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b0fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b100:	781b      	ldrb	r3, [r3, #0]
    b102:	3301      	adds	r3, #1
    b104:	b2da      	uxtb	r2, r3
    b106:	f24c 5349 	movw	r3, #50505	; 0xc549
    b10a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b10e:	701a      	strb	r2, [r3, #0]
    b110:	f24c 5349 	movw	r3, #50505	; 0xc549
    b114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b118:	781b      	ldrb	r3, [r3, #0]
    b11a:	2bff      	cmp	r3, #255	; 0xff
    b11c:	d105      	bne.n	b12a <send_bat+0x656>
    b11e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b122:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b126:	2200      	movs	r2, #0
    b128:	701a      	strb	r2, [r3, #0]
    b12a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b12e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b132:	781b      	ldrb	r3, [r3, #0]
    b134:	461a      	mov	r2, r3
    b136:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b13a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b13e:	7819      	ldrb	r1, [r3, #0]
    b140:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b144:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b148:	5499      	strb	r1, [r3, r2]
    b14a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b14e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b152:	781b      	ldrb	r3, [r3, #0]
    b154:	3301      	adds	r3, #1
    b156:	b2da      	uxtb	r2, r3
    b158:	f24c 5349 	movw	r3, #50505	; 0xc549
    b15c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b160:	701a      	strb	r2, [r3, #0]
    b162:	f24c 5349 	movw	r3, #50505	; 0xc549
    b166:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b16a:	781b      	ldrb	r3, [r3, #0]
    b16c:	2bff      	cmp	r3, #255	; 0xff
    b16e:	d105      	bne.n	b17c <send_bat+0x6a8>
    b170:	f24c 5349 	movw	r3, #50505	; 0xc549
    b174:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b178:	2200      	movs	r2, #0
    b17a:	701a      	strb	r2, [r3, #0]
    b17c:	f242 0339 	movw	r3, #8249	; 0x2039
    b180:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b184:	781b      	ldrb	r3, [r3, #0]
    b186:	b2db      	uxtb	r3, r3
    b188:	f003 0310 	and.w	r3, r3, #16
    b18c:	2b00      	cmp	r3, #0
    b18e:	d15a      	bne.n	b246 <send_bat+0x772>
    b190:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b194:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b198:	781b      	ldrb	r3, [r3, #0]
    b19a:	b2db      	uxtb	r3, r3
    b19c:	461a      	mov	r2, r3
    b19e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b1a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1a6:	5c9a      	ldrb	r2, [r3, r2]
    b1a8:	f24c 634b 	movw	r3, #50763	; 0xc64b
    b1ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1b0:	701a      	strb	r2, [r3, #0]
    b1b2:	f24c 634c 	movw	r3, #50764	; 0xc64c
    b1b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1ba:	2200      	movs	r2, #0
    b1bc:	701a      	strb	r2, [r3, #0]
    b1be:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b1c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1c6:	781b      	ldrb	r3, [r3, #0]
    b1c8:	b2db      	uxtb	r3, r3
    b1ca:	3301      	adds	r3, #1
    b1cc:	b2da      	uxtb	r2, r3
    b1ce:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b1d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1d6:	701a      	strb	r2, [r3, #0]
    b1d8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b1dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1e0:	781b      	ldrb	r3, [r3, #0]
    b1e2:	b2db      	uxtb	r3, r3
    b1e4:	2bff      	cmp	r3, #255	; 0xff
    b1e6:	d105      	bne.n	b1f4 <send_bat+0x720>
    b1e8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b1ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1f0:	2200      	movs	r2, #0
    b1f2:	701a      	strb	r2, [r3, #0]
    b1f4:	f242 0338 	movw	r3, #8248	; 0x2038
    b1f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1fc:	f242 0238 	movw	r2, #8248	; 0x2038
    b200:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b204:	7812      	ldrb	r2, [r2, #0]
    b206:	b2d2      	uxtb	r2, r2
    b208:	f042 0201 	orr.w	r2, r2, #1
    b20c:	b2d2      	uxtb	r2, r2
    b20e:	701a      	strb	r2, [r3, #0]
    b210:	f242 0339 	movw	r3, #8249	; 0x2039
    b214:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b218:	f242 0239 	movw	r2, #8249	; 0x2039
    b21c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b220:	7812      	ldrb	r2, [r2, #0]
    b222:	b2d2      	uxtb	r2, r2
    b224:	f042 0210 	orr.w	r2, r2, #16
    b228:	b2d2      	uxtb	r2, r2
    b22a:	701a      	strb	r2, [r3, #0]
    b22c:	e00b      	b.n	b246 <send_bat+0x772>
    b22e:	f24c 5348 	movw	r3, #50504	; 0xc548
    b232:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b236:	781b      	ldrb	r3, [r3, #0]
    b238:	3301      	adds	r3, #1
    b23a:	b2da      	uxtb	r2, r3
    b23c:	f24c 5348 	movw	r3, #50504	; 0xc548
    b240:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b244:	701a      	strb	r2, [r3, #0]
}
    b246:	46bd      	mov	sp, r7
    b248:	f85d 7b04 	ldr.w	r7, [sp], #4
    b24c:	4770      	bx	lr
    b24e:	bf00      	nop

0000b250 <send_climb>:
void send_climb(void){  //2000ms
    b250:	b480      	push	{r7}
    b252:	af00      	add	r7, sp, #0
  if(!boot)
    b254:	f240 533d 	movw	r3, #1341	; 0x53d
    b258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b25c:	781b      	ldrb	r3, [r3, #0]
    b25e:	2b00      	cmp	r3, #0
    b260:	f040 8569 	bne.w	bd36 <send_climb+0xae6>
  { if (count % 20 == 18) PERIODIC_SEND_CLIMB_PID();}
    b264:	f24c 5341 	movw	r3, #50497	; 0xc541
    b268:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b26c:	781a      	ldrb	r2, [r3, #0]
    b26e:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    b272:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    b276:	fba3 1302 	umull	r1, r3, r3, r2
    b27a:	0919      	lsrs	r1, r3, #4
    b27c:	460b      	mov	r3, r1
    b27e:	009b      	lsls	r3, r3, #2
    b280:	440b      	add	r3, r1
    b282:	009b      	lsls	r3, r3, #2
    b284:	1ad3      	subs	r3, r2, r3
    b286:	b2db      	uxtb	r3, r3
    b288:	2b12      	cmp	r3, #18
    b28a:	f040 8554 	bne.w	bd36 <send_climb+0xae6>
    b28e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b292:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b296:	781a      	ldrb	r2, [r3, #0]
    b298:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b29c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2a0:	781b      	ldrb	r3, [r3, #0]
    b2a2:	b2db      	uxtb	r3, r3
    b2a4:	429a      	cmp	r2, r3
    b2a6:	d313      	bcc.n	b2d0 <send_climb+0x80>
    b2a8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b2ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2b0:	781b      	ldrb	r3, [r3, #0]
    b2b2:	b2db      	uxtb	r3, r3
    b2b4:	461a      	mov	r2, r3
    b2b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    b2ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2be:	781b      	ldrb	r3, [r3, #0]
    b2c0:	1ad3      	subs	r3, r2, r3
    b2c2:	33ff      	adds	r3, #255	; 0xff
    b2c4:	2b12      	cmp	r3, #18
    b2c6:	bfd4      	ite	le
    b2c8:	2300      	movle	r3, #0
    b2ca:	2301      	movgt	r3, #1
    b2cc:	b2db      	uxtb	r3, r3
    b2ce:	e011      	b.n	b2f4 <send_climb+0xa4>
    b2d0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b2d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2d8:	781b      	ldrb	r3, [r3, #0]
    b2da:	b2db      	uxtb	r3, r3
    b2dc:	461a      	mov	r2, r3
    b2de:	f24c 5349 	movw	r3, #50505	; 0xc549
    b2e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2e6:	781b      	ldrb	r3, [r3, #0]
    b2e8:	1ad3      	subs	r3, r2, r3
    b2ea:	2b12      	cmp	r3, #18
    b2ec:	bfd4      	ite	le
    b2ee:	2300      	movle	r3, #0
    b2f0:	2301      	movgt	r3, #1
    b2f2:	b2db      	uxtb	r3, r3
    b2f4:	2b00      	cmp	r3, #0
    b2f6:	f000 8512 	beq.w	bd1e <send_climb+0xace>
    b2fa:	f24c 5349 	movw	r3, #50505	; 0xc549
    b2fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b302:	781b      	ldrb	r3, [r3, #0]
    b304:	461a      	mov	r2, r3
    b306:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b30a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b30e:	2105      	movs	r1, #5
    b310:	5499      	strb	r1, [r3, r2]
    b312:	f24c 5349 	movw	r3, #50505	; 0xc549
    b316:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b31a:	781b      	ldrb	r3, [r3, #0]
    b31c:	3301      	adds	r3, #1
    b31e:	b2da      	uxtb	r2, r3
    b320:	f24c 5349 	movw	r3, #50505	; 0xc549
    b324:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b328:	701a      	strb	r2, [r3, #0]
    b32a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b32e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b332:	781b      	ldrb	r3, [r3, #0]
    b334:	2bff      	cmp	r3, #255	; 0xff
    b336:	d105      	bne.n	b344 <send_climb+0xf4>
    b338:	f24c 5349 	movw	r3, #50505	; 0xc549
    b33c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b340:	2200      	movs	r2, #0
    b342:	701a      	strb	r2, [r3, #0]
    b344:	f24c 5349 	movw	r3, #50505	; 0xc549
    b348:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b34c:	781b      	ldrb	r3, [r3, #0]
    b34e:	461a      	mov	r2, r3
    b350:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b354:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b358:	210e      	movs	r1, #14
    b35a:	5499      	strb	r1, [r3, r2]
    b35c:	f24c 5349 	movw	r3, #50505	; 0xc549
    b360:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b364:	781b      	ldrb	r3, [r3, #0]
    b366:	3301      	adds	r3, #1
    b368:	b2da      	uxtb	r2, r3
    b36a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b36e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b372:	701a      	strb	r2, [r3, #0]
    b374:	f24c 5349 	movw	r3, #50505	; 0xc549
    b378:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b37c:	781b      	ldrb	r3, [r3, #0]
    b37e:	2bff      	cmp	r3, #255	; 0xff
    b380:	d105      	bne.n	b38e <send_climb+0x13e>
    b382:	f24c 5349 	movw	r3, #50505	; 0xc549
    b386:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b38a:	2200      	movs	r2, #0
    b38c:	701a      	strb	r2, [r3, #0]
    b38e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b392:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b396:	220e      	movs	r2, #14
    b398:	701a      	strb	r2, [r3, #0]
    b39a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b39e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3a2:	220e      	movs	r2, #14
    b3a4:	701a      	strb	r2, [r3, #0]
    b3a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    b3aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3ae:	781b      	ldrb	r3, [r3, #0]
    b3b0:	461a      	mov	r2, r3
    b3b2:	f64c 037c 	movw	r3, #51324	; 0xc87c
    b3b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3ba:	7819      	ldrb	r1, [r3, #0]
    b3bc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b3c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3c4:	5499      	strb	r1, [r3, r2]
    b3c6:	f64c 037c 	movw	r3, #51324	; 0xc87c
    b3ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3ce:	781a      	ldrb	r2, [r3, #0]
    b3d0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b3d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3d8:	781b      	ldrb	r3, [r3, #0]
    b3da:	4413      	add	r3, r2
    b3dc:	b2da      	uxtb	r2, r3
    b3de:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b3e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3e6:	701a      	strb	r2, [r3, #0]
    b3e8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b3ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3f0:	781a      	ldrb	r2, [r3, #0]
    b3f2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b3f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3fa:	781b      	ldrb	r3, [r3, #0]
    b3fc:	4413      	add	r3, r2
    b3fe:	b2da      	uxtb	r2, r3
    b400:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b404:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b408:	701a      	strb	r2, [r3, #0]
    b40a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b40e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b412:	781b      	ldrb	r3, [r3, #0]
    b414:	3301      	adds	r3, #1
    b416:	b2da      	uxtb	r2, r3
    b418:	f24c 5349 	movw	r3, #50505	; 0xc549
    b41c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b420:	701a      	strb	r2, [r3, #0]
    b422:	f24c 5349 	movw	r3, #50505	; 0xc549
    b426:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b42a:	781b      	ldrb	r3, [r3, #0]
    b42c:	2bff      	cmp	r3, #255	; 0xff
    b42e:	d105      	bne.n	b43c <send_climb+0x1ec>
    b430:	f24c 5349 	movw	r3, #50505	; 0xc549
    b434:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b438:	2200      	movs	r2, #0
    b43a:	701a      	strb	r2, [r3, #0]
    b43c:	f24c 5349 	movw	r3, #50505	; 0xc549
    b440:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b444:	781b      	ldrb	r3, [r3, #0]
    b446:	461a      	mov	r2, r3
    b448:	f64c 037c 	movw	r3, #51324	; 0xc87c
    b44c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b450:	7859      	ldrb	r1, [r3, #1]
    b452:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b456:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b45a:	5499      	strb	r1, [r3, r2]
    b45c:	4bd3      	ldr	r3, [pc, #844]	; (b7ac <send_climb+0x55c>)
    b45e:	781a      	ldrb	r2, [r3, #0]
    b460:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b464:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b468:	781b      	ldrb	r3, [r3, #0]
    b46a:	4413      	add	r3, r2
    b46c:	b2da      	uxtb	r2, r3
    b46e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b472:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b476:	701a      	strb	r2, [r3, #0]
    b478:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b47c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b480:	781a      	ldrb	r2, [r3, #0]
    b482:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b48a:	781b      	ldrb	r3, [r3, #0]
    b48c:	4413      	add	r3, r2
    b48e:	b2da      	uxtb	r2, r3
    b490:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b494:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b498:	701a      	strb	r2, [r3, #0]
    b49a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b49e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4a2:	781b      	ldrb	r3, [r3, #0]
    b4a4:	3301      	adds	r3, #1
    b4a6:	b2da      	uxtb	r2, r3
    b4a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b4ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4b0:	701a      	strb	r2, [r3, #0]
    b4b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    b4b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4ba:	781b      	ldrb	r3, [r3, #0]
    b4bc:	2bff      	cmp	r3, #255	; 0xff
    b4be:	d105      	bne.n	b4cc <send_climb+0x27c>
    b4c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b4c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4c8:	2200      	movs	r2, #0
    b4ca:	701a      	strb	r2, [r3, #0]
    b4cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    b4d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4d4:	781b      	ldrb	r3, [r3, #0]
    b4d6:	461a      	mov	r2, r3
    b4d8:	f64c 0390 	movw	r3, #51344	; 0xc890
    b4dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4e0:	7819      	ldrb	r1, [r3, #0]
    b4e2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b4e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4ea:	5499      	strb	r1, [r3, r2]
    b4ec:	f64c 0390 	movw	r3, #51344	; 0xc890
    b4f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4f4:	781a      	ldrb	r2, [r3, #0]
    b4f6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b4fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4fe:	781b      	ldrb	r3, [r3, #0]
    b500:	4413      	add	r3, r2
    b502:	b2da      	uxtb	r2, r3
    b504:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b508:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b50c:	701a      	strb	r2, [r3, #0]
    b50e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b512:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b516:	781a      	ldrb	r2, [r3, #0]
    b518:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b51c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b520:	781b      	ldrb	r3, [r3, #0]
    b522:	4413      	add	r3, r2
    b524:	b2da      	uxtb	r2, r3
    b526:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b52a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b52e:	701a      	strb	r2, [r3, #0]
    b530:	f24c 5349 	movw	r3, #50505	; 0xc549
    b534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b538:	781b      	ldrb	r3, [r3, #0]
    b53a:	3301      	adds	r3, #1
    b53c:	b2da      	uxtb	r2, r3
    b53e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b542:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b546:	701a      	strb	r2, [r3, #0]
    b548:	f24c 5349 	movw	r3, #50505	; 0xc549
    b54c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b550:	781b      	ldrb	r3, [r3, #0]
    b552:	2bff      	cmp	r3, #255	; 0xff
    b554:	d105      	bne.n	b562 <send_climb+0x312>
    b556:	f24c 5349 	movw	r3, #50505	; 0xc549
    b55a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b55e:	2200      	movs	r2, #0
    b560:	701a      	strb	r2, [r3, #0]
    b562:	f24c 5349 	movw	r3, #50505	; 0xc549
    b566:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b56a:	781b      	ldrb	r3, [r3, #0]
    b56c:	461a      	mov	r2, r3
    b56e:	f64c 0390 	movw	r3, #51344	; 0xc890
    b572:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b576:	7859      	ldrb	r1, [r3, #1]
    b578:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b57c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b580:	5499      	strb	r1, [r3, r2]
    b582:	4b8b      	ldr	r3, [pc, #556]	; (b7b0 <send_climb+0x560>)
    b584:	781a      	ldrb	r2, [r3, #0]
    b586:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b58a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b58e:	781b      	ldrb	r3, [r3, #0]
    b590:	4413      	add	r3, r2
    b592:	b2da      	uxtb	r2, r3
    b594:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b598:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b59c:	701a      	strb	r2, [r3, #0]
    b59e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b5a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5a6:	781a      	ldrb	r2, [r3, #0]
    b5a8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b5ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5b0:	781b      	ldrb	r3, [r3, #0]
    b5b2:	4413      	add	r3, r2
    b5b4:	b2da      	uxtb	r2, r3
    b5b6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b5ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5be:	701a      	strb	r2, [r3, #0]
    b5c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b5c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5c8:	781b      	ldrb	r3, [r3, #0]
    b5ca:	3301      	adds	r3, #1
    b5cc:	b2da      	uxtb	r2, r3
    b5ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    b5d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5d6:	701a      	strb	r2, [r3, #0]
    b5d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b5dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5e0:	781b      	ldrb	r3, [r3, #0]
    b5e2:	2bff      	cmp	r3, #255	; 0xff
    b5e4:	d105      	bne.n	b5f2 <send_climb+0x3a2>
    b5e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    b5ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5ee:	2200      	movs	r2, #0
    b5f0:	701a      	strb	r2, [r3, #0]
    b5f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    b5f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5fa:	781b      	ldrb	r3, [r3, #0]
    b5fc:	461a      	mov	r2, r3
    b5fe:	f64c 0390 	movw	r3, #51344	; 0xc890
    b602:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b606:	7899      	ldrb	r1, [r3, #2]
    b608:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b60c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b610:	5499      	strb	r1, [r3, r2]
    b612:	4b68      	ldr	r3, [pc, #416]	; (b7b4 <send_climb+0x564>)
    b614:	781a      	ldrb	r2, [r3, #0]
    b616:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b61a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b61e:	781b      	ldrb	r3, [r3, #0]
    b620:	4413      	add	r3, r2
    b622:	b2da      	uxtb	r2, r3
    b624:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b62c:	701a      	strb	r2, [r3, #0]
    b62e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b636:	781a      	ldrb	r2, [r3, #0]
    b638:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b63c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b640:	781b      	ldrb	r3, [r3, #0]
    b642:	4413      	add	r3, r2
    b644:	b2da      	uxtb	r2, r3
    b646:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b64a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b64e:	701a      	strb	r2, [r3, #0]
    b650:	f24c 5349 	movw	r3, #50505	; 0xc549
    b654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b658:	781b      	ldrb	r3, [r3, #0]
    b65a:	3301      	adds	r3, #1
    b65c:	b2da      	uxtb	r2, r3
    b65e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b662:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b666:	701a      	strb	r2, [r3, #0]
    b668:	f24c 5349 	movw	r3, #50505	; 0xc549
    b66c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b670:	781b      	ldrb	r3, [r3, #0]
    b672:	2bff      	cmp	r3, #255	; 0xff
    b674:	d105      	bne.n	b682 <send_climb+0x432>
    b676:	f24c 5349 	movw	r3, #50505	; 0xc549
    b67a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b67e:	2200      	movs	r2, #0
    b680:	701a      	strb	r2, [r3, #0]
    b682:	f24c 5349 	movw	r3, #50505	; 0xc549
    b686:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b68a:	781b      	ldrb	r3, [r3, #0]
    b68c:	461a      	mov	r2, r3
    b68e:	f64c 0390 	movw	r3, #51344	; 0xc890
    b692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b696:	78d9      	ldrb	r1, [r3, #3]
    b698:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b69c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6a0:	5499      	strb	r1, [r3, r2]
    b6a2:	4b45      	ldr	r3, [pc, #276]	; (b7b8 <send_climb+0x568>)
    b6a4:	781a      	ldrb	r2, [r3, #0]
    b6a6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b6aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6ae:	781b      	ldrb	r3, [r3, #0]
    b6b0:	4413      	add	r3, r2
    b6b2:	b2da      	uxtb	r2, r3
    b6b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b6b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6bc:	701a      	strb	r2, [r3, #0]
    b6be:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b6c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6c6:	781a      	ldrb	r2, [r3, #0]
    b6c8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b6cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6d0:	781b      	ldrb	r3, [r3, #0]
    b6d2:	4413      	add	r3, r2
    b6d4:	b2da      	uxtb	r2, r3
    b6d6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b6da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6de:	701a      	strb	r2, [r3, #0]
    b6e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b6e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6e8:	781b      	ldrb	r3, [r3, #0]
    b6ea:	3301      	adds	r3, #1
    b6ec:	b2da      	uxtb	r2, r3
    b6ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    b6f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6f6:	701a      	strb	r2, [r3, #0]
    b6f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b6fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b700:	781b      	ldrb	r3, [r3, #0]
    b702:	2bff      	cmp	r3, #255	; 0xff
    b704:	d105      	bne.n	b712 <send_climb+0x4c2>
    b706:	f24c 5349 	movw	r3, #50505	; 0xc549
    b70a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b70e:	2200      	movs	r2, #0
    b710:	701a      	strb	r2, [r3, #0]
    b712:	f24c 5349 	movw	r3, #50505	; 0xc549
    b716:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b71a:	781b      	ldrb	r3, [r3, #0]
    b71c:	461a      	mov	r2, r3
    b71e:	f64c 0398 	movw	r3, #51352	; 0xc898
    b722:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b726:	7819      	ldrb	r1, [r3, #0]
    b728:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b72c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b730:	5499      	strb	r1, [r3, r2]
    b732:	f64c 0398 	movw	r3, #51352	; 0xc898
    b736:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b73a:	781a      	ldrb	r2, [r3, #0]
    b73c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b744:	781b      	ldrb	r3, [r3, #0]
    b746:	4413      	add	r3, r2
    b748:	b2da      	uxtb	r2, r3
    b74a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b74e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b752:	701a      	strb	r2, [r3, #0]
    b754:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b75c:	781a      	ldrb	r2, [r3, #0]
    b75e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b766:	781b      	ldrb	r3, [r3, #0]
    b768:	4413      	add	r3, r2
    b76a:	b2da      	uxtb	r2, r3
    b76c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b770:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b774:	701a      	strb	r2, [r3, #0]
    b776:	f24c 5349 	movw	r3, #50505	; 0xc549
    b77a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b77e:	781b      	ldrb	r3, [r3, #0]
    b780:	3301      	adds	r3, #1
    b782:	b2da      	uxtb	r2, r3
    b784:	f24c 5349 	movw	r3, #50505	; 0xc549
    b788:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b78c:	701a      	strb	r2, [r3, #0]
    b78e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b792:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b796:	781b      	ldrb	r3, [r3, #0]
    b798:	2bff      	cmp	r3, #255	; 0xff
    b79a:	d10f      	bne.n	b7bc <send_climb+0x56c>
    b79c:	f24c 5349 	movw	r3, #50505	; 0xc549
    b7a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7a4:	2200      	movs	r2, #0
    b7a6:	701a      	strb	r2, [r3, #0]
    b7a8:	e008      	b.n	b7bc <send_climb+0x56c>
    b7aa:	bf00      	nop
    b7ac:	2004c87d 	.word	0x2004c87d
    b7b0:	2004c891 	.word	0x2004c891
    b7b4:	2004c892 	.word	0x2004c892
    b7b8:	2004c893 	.word	0x2004c893
    b7bc:	f24c 5349 	movw	r3, #50505	; 0xc549
    b7c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7c4:	781b      	ldrb	r3, [r3, #0]
    b7c6:	461a      	mov	r2, r3
    b7c8:	f64c 0398 	movw	r3, #51352	; 0xc898
    b7cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7d0:	7859      	ldrb	r1, [r3, #1]
    b7d2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b7d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7da:	5499      	strb	r1, [r3, r2]
    b7dc:	4bd1      	ldr	r3, [pc, #836]	; (bb24 <send_climb+0x8d4>)
    b7de:	781a      	ldrb	r2, [r3, #0]
    b7e0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b7e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7e8:	781b      	ldrb	r3, [r3, #0]
    b7ea:	4413      	add	r3, r2
    b7ec:	b2da      	uxtb	r2, r3
    b7ee:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b7f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7f6:	701a      	strb	r2, [r3, #0]
    b7f8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b7fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b800:	781a      	ldrb	r2, [r3, #0]
    b802:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b806:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b80a:	781b      	ldrb	r3, [r3, #0]
    b80c:	4413      	add	r3, r2
    b80e:	b2da      	uxtb	r2, r3
    b810:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b814:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b818:	701a      	strb	r2, [r3, #0]
    b81a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b81e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b822:	781b      	ldrb	r3, [r3, #0]
    b824:	3301      	adds	r3, #1
    b826:	b2da      	uxtb	r2, r3
    b828:	f24c 5349 	movw	r3, #50505	; 0xc549
    b82c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b830:	701a      	strb	r2, [r3, #0]
    b832:	f24c 5349 	movw	r3, #50505	; 0xc549
    b836:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b83a:	781b      	ldrb	r3, [r3, #0]
    b83c:	2bff      	cmp	r3, #255	; 0xff
    b83e:	d105      	bne.n	b84c <send_climb+0x5fc>
    b840:	f24c 5349 	movw	r3, #50505	; 0xc549
    b844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b848:	2200      	movs	r2, #0
    b84a:	701a      	strb	r2, [r3, #0]
    b84c:	f24c 5349 	movw	r3, #50505	; 0xc549
    b850:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b854:	781b      	ldrb	r3, [r3, #0]
    b856:	461a      	mov	r2, r3
    b858:	f64c 0398 	movw	r3, #51352	; 0xc898
    b85c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b860:	7899      	ldrb	r1, [r3, #2]
    b862:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b866:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b86a:	5499      	strb	r1, [r3, r2]
    b86c:	4bae      	ldr	r3, [pc, #696]	; (bb28 <send_climb+0x8d8>)
    b86e:	781a      	ldrb	r2, [r3, #0]
    b870:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b874:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b878:	781b      	ldrb	r3, [r3, #0]
    b87a:	4413      	add	r3, r2
    b87c:	b2da      	uxtb	r2, r3
    b87e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b882:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b886:	701a      	strb	r2, [r3, #0]
    b888:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b88c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b890:	781a      	ldrb	r2, [r3, #0]
    b892:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b896:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b89a:	781b      	ldrb	r3, [r3, #0]
    b89c:	4413      	add	r3, r2
    b89e:	b2da      	uxtb	r2, r3
    b8a0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b8a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8a8:	701a      	strb	r2, [r3, #0]
    b8aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    b8ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8b2:	781b      	ldrb	r3, [r3, #0]
    b8b4:	3301      	adds	r3, #1
    b8b6:	b2da      	uxtb	r2, r3
    b8b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b8bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8c0:	701a      	strb	r2, [r3, #0]
    b8c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    b8c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8ca:	781b      	ldrb	r3, [r3, #0]
    b8cc:	2bff      	cmp	r3, #255	; 0xff
    b8ce:	d105      	bne.n	b8dc <send_climb+0x68c>
    b8d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b8d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8d8:	2200      	movs	r2, #0
    b8da:	701a      	strb	r2, [r3, #0]
    b8dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    b8e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8e4:	781b      	ldrb	r3, [r3, #0]
    b8e6:	461a      	mov	r2, r3
    b8e8:	f64c 0398 	movw	r3, #51352	; 0xc898
    b8ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8f0:	78d9      	ldrb	r1, [r3, #3]
    b8f2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b8f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8fa:	5499      	strb	r1, [r3, r2]
    b8fc:	4b8b      	ldr	r3, [pc, #556]	; (bb2c <send_climb+0x8dc>)
    b8fe:	781a      	ldrb	r2, [r3, #0]
    b900:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b904:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b908:	781b      	ldrb	r3, [r3, #0]
    b90a:	4413      	add	r3, r2
    b90c:	b2da      	uxtb	r2, r3
    b90e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b916:	701a      	strb	r2, [r3, #0]
    b918:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b91c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b920:	781a      	ldrb	r2, [r3, #0]
    b922:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b926:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b92a:	781b      	ldrb	r3, [r3, #0]
    b92c:	4413      	add	r3, r2
    b92e:	b2da      	uxtb	r2, r3
    b930:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b934:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b938:	701a      	strb	r2, [r3, #0]
    b93a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b93e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b942:	781b      	ldrb	r3, [r3, #0]
    b944:	3301      	adds	r3, #1
    b946:	b2da      	uxtb	r2, r3
    b948:	f24c 5349 	movw	r3, #50505	; 0xc549
    b94c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b950:	701a      	strb	r2, [r3, #0]
    b952:	f24c 5349 	movw	r3, #50505	; 0xc549
    b956:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b95a:	781b      	ldrb	r3, [r3, #0]
    b95c:	2bff      	cmp	r3, #255	; 0xff
    b95e:	d105      	bne.n	b96c <send_climb+0x71c>
    b960:	f24c 5349 	movw	r3, #50505	; 0xc549
    b964:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b968:	2200      	movs	r2, #0
    b96a:	701a      	strb	r2, [r3, #0]
    b96c:	f24c 5349 	movw	r3, #50505	; 0xc549
    b970:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b974:	781b      	ldrb	r3, [r3, #0]
    b976:	461a      	mov	r2, r3
    b978:	f648 23a4 	movw	r3, #35492	; 0x8aa4
    b97c:	f2c0 0301 	movt	r3, #1
    b980:	7819      	ldrb	r1, [r3, #0]
    b982:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b98a:	5499      	strb	r1, [r3, r2]
    b98c:	f648 23a4 	movw	r3, #35492	; 0x8aa4
    b990:	f2c0 0301 	movt	r3, #1
    b994:	781a      	ldrb	r2, [r3, #0]
    b996:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b99a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b99e:	781b      	ldrb	r3, [r3, #0]
    b9a0:	4413      	add	r3, r2
    b9a2:	b2da      	uxtb	r2, r3
    b9a4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b9a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9ac:	701a      	strb	r2, [r3, #0]
    b9ae:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b9b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9b6:	781a      	ldrb	r2, [r3, #0]
    b9b8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b9bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9c0:	781b      	ldrb	r3, [r3, #0]
    b9c2:	4413      	add	r3, r2
    b9c4:	b2da      	uxtb	r2, r3
    b9c6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b9ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9ce:	701a      	strb	r2, [r3, #0]
    b9d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b9d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9d8:	781b      	ldrb	r3, [r3, #0]
    b9da:	3301      	adds	r3, #1
    b9dc:	b2da      	uxtb	r2, r3
    b9de:	f24c 5349 	movw	r3, #50505	; 0xc549
    b9e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9e6:	701a      	strb	r2, [r3, #0]
    b9e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b9ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9f0:	781b      	ldrb	r3, [r3, #0]
    b9f2:	2bff      	cmp	r3, #255	; 0xff
    b9f4:	d105      	bne.n	ba02 <send_climb+0x7b2>
    b9f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    b9fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9fe:	2200      	movs	r2, #0
    ba00:	701a      	strb	r2, [r3, #0]
    ba02:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba0a:	781b      	ldrb	r3, [r3, #0]
    ba0c:	461a      	mov	r2, r3
    ba0e:	f648 23a4 	movw	r3, #35492	; 0x8aa4
    ba12:	f2c0 0301 	movt	r3, #1
    ba16:	7859      	ldrb	r1, [r3, #1]
    ba18:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ba1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba20:	5499      	strb	r1, [r3, r2]
    ba22:	4b43      	ldr	r3, [pc, #268]	; (bb30 <send_climb+0x8e0>)
    ba24:	781a      	ldrb	r2, [r3, #0]
    ba26:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ba2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba2e:	781b      	ldrb	r3, [r3, #0]
    ba30:	4413      	add	r3, r2
    ba32:	b2da      	uxtb	r2, r3
    ba34:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ba38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba3c:	701a      	strb	r2, [r3, #0]
    ba3e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ba42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba46:	781a      	ldrb	r2, [r3, #0]
    ba48:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ba4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba50:	781b      	ldrb	r3, [r3, #0]
    ba52:	4413      	add	r3, r2
    ba54:	b2da      	uxtb	r2, r3
    ba56:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ba5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba5e:	701a      	strb	r2, [r3, #0]
    ba60:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba68:	781b      	ldrb	r3, [r3, #0]
    ba6a:	3301      	adds	r3, #1
    ba6c:	b2da      	uxtb	r2, r3
    ba6e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba76:	701a      	strb	r2, [r3, #0]
    ba78:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba80:	781b      	ldrb	r3, [r3, #0]
    ba82:	2bff      	cmp	r3, #255	; 0xff
    ba84:	d105      	bne.n	ba92 <send_climb+0x842>
    ba86:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba8e:	2200      	movs	r2, #0
    ba90:	701a      	strb	r2, [r3, #0]
    ba92:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba9a:	781b      	ldrb	r3, [r3, #0]
    ba9c:	461a      	mov	r2, r3
    ba9e:	f648 23a4 	movw	r3, #35492	; 0x8aa4
    baa2:	f2c0 0301 	movt	r3, #1
    baa6:	7899      	ldrb	r1, [r3, #2]
    baa8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    baac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bab0:	5499      	strb	r1, [r3, r2]
    bab2:	4b20      	ldr	r3, [pc, #128]	; (bb34 <send_climb+0x8e4>)
    bab4:	781a      	ldrb	r2, [r3, #0]
    bab6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    baba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    babe:	781b      	ldrb	r3, [r3, #0]
    bac0:	4413      	add	r3, r2
    bac2:	b2da      	uxtb	r2, r3
    bac4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bacc:	701a      	strb	r2, [r3, #0]
    bace:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bad2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bad6:	781a      	ldrb	r2, [r3, #0]
    bad8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    badc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bae0:	781b      	ldrb	r3, [r3, #0]
    bae2:	4413      	add	r3, r2
    bae4:	b2da      	uxtb	r2, r3
    bae6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    baea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baee:	701a      	strb	r2, [r3, #0]
    baf0:	f24c 5349 	movw	r3, #50505	; 0xc549
    baf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baf8:	781b      	ldrb	r3, [r3, #0]
    bafa:	3301      	adds	r3, #1
    bafc:	b2da      	uxtb	r2, r3
    bafe:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb06:	701a      	strb	r2, [r3, #0]
    bb08:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb10:	781b      	ldrb	r3, [r3, #0]
    bb12:	2bff      	cmp	r3, #255	; 0xff
    bb14:	d110      	bne.n	bb38 <send_climb+0x8e8>
    bb16:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb1e:	2200      	movs	r2, #0
    bb20:	701a      	strb	r2, [r3, #0]
    bb22:	e009      	b.n	bb38 <send_climb+0x8e8>
    bb24:	2004c899 	.word	0x2004c899
    bb28:	2004c89a 	.word	0x2004c89a
    bb2c:	2004c89b 	.word	0x2004c89b
    bb30:	00018aa5 	.word	0x00018aa5
    bb34:	00018aa6 	.word	0x00018aa6
    bb38:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb40:	781b      	ldrb	r3, [r3, #0]
    bb42:	461a      	mov	r2, r3
    bb44:	f648 23a4 	movw	r3, #35492	; 0x8aa4
    bb48:	f2c0 0301 	movt	r3, #1
    bb4c:	78d9      	ldrb	r1, [r3, #3]
    bb4e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bb52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb56:	5499      	strb	r1, [r3, r2]
    bb58:	4b79      	ldr	r3, [pc, #484]	; (bd40 <send_climb+0xaf0>)
    bb5a:	781a      	ldrb	r2, [r3, #0]
    bb5c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bb60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb64:	781b      	ldrb	r3, [r3, #0]
    bb66:	4413      	add	r3, r2
    bb68:	b2da      	uxtb	r2, r3
    bb6a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bb6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb72:	701a      	strb	r2, [r3, #0]
    bb74:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bb78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb7c:	781a      	ldrb	r2, [r3, #0]
    bb7e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bb82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb86:	781b      	ldrb	r3, [r3, #0]
    bb88:	4413      	add	r3, r2
    bb8a:	b2da      	uxtb	r2, r3
    bb8c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bb90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb94:	701a      	strb	r2, [r3, #0]
    bb96:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb9e:	781b      	ldrb	r3, [r3, #0]
    bba0:	3301      	adds	r3, #1
    bba2:	b2da      	uxtb	r2, r3
    bba4:	f24c 5349 	movw	r3, #50505	; 0xc549
    bba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbac:	701a      	strb	r2, [r3, #0]
    bbae:	f24c 5349 	movw	r3, #50505	; 0xc549
    bbb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbb6:	781b      	ldrb	r3, [r3, #0]
    bbb8:	2bff      	cmp	r3, #255	; 0xff
    bbba:	d105      	bne.n	bbc8 <send_climb+0x978>
    bbbc:	f24c 5349 	movw	r3, #50505	; 0xc549
    bbc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbc4:	2200      	movs	r2, #0
    bbc6:	701a      	strb	r2, [r3, #0]
    bbc8:	f24c 5349 	movw	r3, #50505	; 0xc549
    bbcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbd0:	781b      	ldrb	r3, [r3, #0]
    bbd2:	461a      	mov	r2, r3
    bbd4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bbd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbdc:	7819      	ldrb	r1, [r3, #0]
    bbde:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bbe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbe6:	5499      	strb	r1, [r3, r2]
    bbe8:	f24c 5349 	movw	r3, #50505	; 0xc549
    bbec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbf0:	781b      	ldrb	r3, [r3, #0]
    bbf2:	3301      	adds	r3, #1
    bbf4:	b2da      	uxtb	r2, r3
    bbf6:	f24c 5349 	movw	r3, #50505	; 0xc549
    bbfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbfe:	701a      	strb	r2, [r3, #0]
    bc00:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc08:	781b      	ldrb	r3, [r3, #0]
    bc0a:	2bff      	cmp	r3, #255	; 0xff
    bc0c:	d105      	bne.n	bc1a <send_climb+0x9ca>
    bc0e:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc16:	2200      	movs	r2, #0
    bc18:	701a      	strb	r2, [r3, #0]
    bc1a:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc22:	781b      	ldrb	r3, [r3, #0]
    bc24:	461a      	mov	r2, r3
    bc26:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bc2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc2e:	7819      	ldrb	r1, [r3, #0]
    bc30:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bc34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc38:	5499      	strb	r1, [r3, r2]
    bc3a:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc42:	781b      	ldrb	r3, [r3, #0]
    bc44:	3301      	adds	r3, #1
    bc46:	b2da      	uxtb	r2, r3
    bc48:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc50:	701a      	strb	r2, [r3, #0]
    bc52:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc5a:	781b      	ldrb	r3, [r3, #0]
    bc5c:	2bff      	cmp	r3, #255	; 0xff
    bc5e:	d105      	bne.n	bc6c <send_climb+0xa1c>
    bc60:	f24c 5349 	movw	r3, #50505	; 0xc549
    bc64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc68:	2200      	movs	r2, #0
    bc6a:	701a      	strb	r2, [r3, #0]
    bc6c:	f242 0339 	movw	r3, #8249	; 0x2039
    bc70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc74:	781b      	ldrb	r3, [r3, #0]
    bc76:	b2db      	uxtb	r3, r3
    bc78:	f003 0310 	and.w	r3, r3, #16
    bc7c:	2b00      	cmp	r3, #0
    bc7e:	d15a      	bne.n	bd36 <send_climb+0xae6>
    bc80:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bc84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc88:	781b      	ldrb	r3, [r3, #0]
    bc8a:	b2db      	uxtb	r3, r3
    bc8c:	461a      	mov	r2, r3
    bc8e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bc92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc96:	5c9a      	ldrb	r2, [r3, r2]
    bc98:	f24c 634b 	movw	r3, #50763	; 0xc64b
    bc9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bca0:	701a      	strb	r2, [r3, #0]
    bca2:	f24c 634c 	movw	r3, #50764	; 0xc64c
    bca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcaa:	2200      	movs	r2, #0
    bcac:	701a      	strb	r2, [r3, #0]
    bcae:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bcb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcb6:	781b      	ldrb	r3, [r3, #0]
    bcb8:	b2db      	uxtb	r3, r3
    bcba:	3301      	adds	r3, #1
    bcbc:	b2da      	uxtb	r2, r3
    bcbe:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bcc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcc6:	701a      	strb	r2, [r3, #0]
    bcc8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bccc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcd0:	781b      	ldrb	r3, [r3, #0]
    bcd2:	b2db      	uxtb	r3, r3
    bcd4:	2bff      	cmp	r3, #255	; 0xff
    bcd6:	d105      	bne.n	bce4 <send_climb+0xa94>
    bcd8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bcdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bce0:	2200      	movs	r2, #0
    bce2:	701a      	strb	r2, [r3, #0]
    bce4:	f242 0338 	movw	r3, #8248	; 0x2038
    bce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcec:	f242 0238 	movw	r2, #8248	; 0x2038
    bcf0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bcf4:	7812      	ldrb	r2, [r2, #0]
    bcf6:	b2d2      	uxtb	r2, r2
    bcf8:	f042 0201 	orr.w	r2, r2, #1
    bcfc:	b2d2      	uxtb	r2, r2
    bcfe:	701a      	strb	r2, [r3, #0]
    bd00:	f242 0339 	movw	r3, #8249	; 0x2039
    bd04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd08:	f242 0239 	movw	r2, #8249	; 0x2039
    bd0c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bd10:	7812      	ldrb	r2, [r2, #0]
    bd12:	b2d2      	uxtb	r2, r2
    bd14:	f042 0210 	orr.w	r2, r2, #16
    bd18:	b2d2      	uxtb	r2, r2
    bd1a:	701a      	strb	r2, [r3, #0]
    bd1c:	e00b      	b.n	bd36 <send_climb+0xae6>
    bd1e:	f24c 5348 	movw	r3, #50504	; 0xc548
    bd22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd26:	781b      	ldrb	r3, [r3, #0]
    bd28:	3301      	adds	r3, #1
    bd2a:	b2da      	uxtb	r2, r3
    bd2c:	f24c 5348 	movw	r3, #50504	; 0xc548
    bd30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd34:	701a      	strb	r2, [r3, #0]
}
    bd36:	46bd      	mov	sp, r7
    bd38:	f85d 7b04 	ldr.w	r7, [sp], #4
    bd3c:	4770      	bx	lr
    bd3e:	bf00      	nop
    bd40:	00018aa7 	.word	0x00018aa7

0000bd44 <send_mode>:
void send_mode(void){  //5000ms
    bd44:	b480      	push	{r7}
    bd46:	af00      	add	r7, sp, #0
  if(!boot)
    bd48:	f240 533d 	movw	r3, #1341	; 0x53d
    bd4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd50:	781b      	ldrb	r3, [r3, #0]
    bd52:	2b00      	cmp	r3, #0
    bd54:	f040 82ce 	bne.w	c2f4 <send_mode+0x5b0>
  { if (count % 50 == 9) PERIODIC_SEND_PPRZ_MODE();}
    bd58:	f24c 5341 	movw	r3, #50497	; 0xc541
    bd5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd60:	781a      	ldrb	r2, [r3, #0]
    bd62:	f248 531f 	movw	r3, #34079	; 0x851f
    bd66:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    bd6a:	fba3 1302 	umull	r1, r3, r3, r2
    bd6e:	091b      	lsrs	r3, r3, #4
    bd70:	2132      	movs	r1, #50	; 0x32
    bd72:	fb01 f303 	mul.w	r3, r1, r3
    bd76:	1ad3      	subs	r3, r2, r3
    bd78:	b2db      	uxtb	r3, r3
    bd7a:	2b09      	cmp	r3, #9
    bd7c:	f040 82ba 	bne.w	c2f4 <send_mode+0x5b0>
    bd80:	f24c 5349 	movw	r3, #50505	; 0xc549
    bd84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd88:	781a      	ldrb	r2, [r3, #0]
    bd8a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bd8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd92:	781b      	ldrb	r3, [r3, #0]
    bd94:	b2db      	uxtb	r3, r3
    bd96:	429a      	cmp	r2, r3
    bd98:	d313      	bcc.n	bdc2 <send_mode+0x7e>
    bd9a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bd9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bda2:	781b      	ldrb	r3, [r3, #0]
    bda4:	b2db      	uxtb	r3, r3
    bda6:	461a      	mov	r2, r3
    bda8:	f24c 5349 	movw	r3, #50505	; 0xc549
    bdac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdb0:	781b      	ldrb	r3, [r3, #0]
    bdb2:	1ad3      	subs	r3, r2, r3
    bdb4:	33ff      	adds	r3, #255	; 0xff
    bdb6:	2b09      	cmp	r3, #9
    bdb8:	bfd4      	ite	le
    bdba:	2300      	movle	r3, #0
    bdbc:	2301      	movgt	r3, #1
    bdbe:	b2db      	uxtb	r3, r3
    bdc0:	e011      	b.n	bde6 <send_mode+0xa2>
    bdc2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bdc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdca:	781b      	ldrb	r3, [r3, #0]
    bdcc:	b2db      	uxtb	r3, r3
    bdce:	461a      	mov	r2, r3
    bdd0:	f24c 5349 	movw	r3, #50505	; 0xc549
    bdd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdd8:	781b      	ldrb	r3, [r3, #0]
    bdda:	1ad3      	subs	r3, r2, r3
    bddc:	2b09      	cmp	r3, #9
    bdde:	bfd4      	ite	le
    bde0:	2300      	movle	r3, #0
    bde2:	2301      	movgt	r3, #1
    bde4:	b2db      	uxtb	r3, r3
    bde6:	2b00      	cmp	r3, #0
    bde8:	f000 8278 	beq.w	c2dc <send_mode+0x598>
    bdec:	f24c 5349 	movw	r3, #50505	; 0xc549
    bdf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdf4:	781b      	ldrb	r3, [r3, #0]
    bdf6:	461a      	mov	r2, r3
    bdf8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bdfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be00:	2105      	movs	r1, #5
    be02:	5499      	strb	r1, [r3, r2]
    be04:	f24c 5349 	movw	r3, #50505	; 0xc549
    be08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be0c:	781b      	ldrb	r3, [r3, #0]
    be0e:	3301      	adds	r3, #1
    be10:	b2da      	uxtb	r2, r3
    be12:	f24c 5349 	movw	r3, #50505	; 0xc549
    be16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be1a:	701a      	strb	r2, [r3, #0]
    be1c:	f24c 5349 	movw	r3, #50505	; 0xc549
    be20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be24:	781b      	ldrb	r3, [r3, #0]
    be26:	2bff      	cmp	r3, #255	; 0xff
    be28:	d105      	bne.n	be36 <send_mode+0xf2>
    be2a:	f24c 5349 	movw	r3, #50505	; 0xc549
    be2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be32:	2200      	movs	r2, #0
    be34:	701a      	strb	r2, [r3, #0]
    be36:	f24c 5349 	movw	r3, #50505	; 0xc549
    be3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be3e:	781b      	ldrb	r3, [r3, #0]
    be40:	461a      	mov	r2, r3
    be42:	f24c 534c 	movw	r3, #50508	; 0xc54c
    be46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be4a:	210b      	movs	r1, #11
    be4c:	5499      	strb	r1, [r3, r2]
    be4e:	f24c 5349 	movw	r3, #50505	; 0xc549
    be52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be56:	781b      	ldrb	r3, [r3, #0]
    be58:	3301      	adds	r3, #1
    be5a:	b2da      	uxtb	r2, r3
    be5c:	f24c 5349 	movw	r3, #50505	; 0xc549
    be60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be64:	701a      	strb	r2, [r3, #0]
    be66:	f24c 5349 	movw	r3, #50505	; 0xc549
    be6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be6e:	781b      	ldrb	r3, [r3, #0]
    be70:	2bff      	cmp	r3, #255	; 0xff
    be72:	d105      	bne.n	be80 <send_mode+0x13c>
    be74:	f24c 5349 	movw	r3, #50505	; 0xc549
    be78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be7c:	2200      	movs	r2, #0
    be7e:	701a      	strb	r2, [r3, #0]
    be80:	f24c 634d 	movw	r3, #50765	; 0xc64d
    be84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be88:	220b      	movs	r2, #11
    be8a:	701a      	strb	r2, [r3, #0]
    be8c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    be90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be94:	220b      	movs	r2, #11
    be96:	701a      	strb	r2, [r3, #0]
    be98:	f24c 5349 	movw	r3, #50505	; 0xc549
    be9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bea0:	781b      	ldrb	r3, [r3, #0]
    bea2:	461a      	mov	r2, r3
    bea4:	f24c 532c 	movw	r3, #50476	; 0xc52c
    bea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beac:	7819      	ldrb	r1, [r3, #0]
    beae:	f24c 534c 	movw	r3, #50508	; 0xc54c
    beb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beb6:	5499      	strb	r1, [r3, r2]
    beb8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bebc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bec0:	781a      	ldrb	r2, [r3, #0]
    bec2:	f24c 532c 	movw	r3, #50476	; 0xc52c
    bec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beca:	781b      	ldrb	r3, [r3, #0]
    becc:	4413      	add	r3, r2
    bece:	b2da      	uxtb	r2, r3
    bed0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bed4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bed8:	701a      	strb	r2, [r3, #0]
    beda:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bede:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bee2:	781a      	ldrb	r2, [r3, #0]
    bee4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beec:	781b      	ldrb	r3, [r3, #0]
    beee:	4413      	add	r3, r2
    bef0:	b2da      	uxtb	r2, r3
    bef2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bef6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    befa:	701a      	strb	r2, [r3, #0]
    befc:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf04:	781b      	ldrb	r3, [r3, #0]
    bf06:	3301      	adds	r3, #1
    bf08:	b2da      	uxtb	r2, r3
    bf0a:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf12:	701a      	strb	r2, [r3, #0]
    bf14:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf1c:	781b      	ldrb	r3, [r3, #0]
    bf1e:	2bff      	cmp	r3, #255	; 0xff
    bf20:	d105      	bne.n	bf2e <send_mode+0x1ea>
    bf22:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf2a:	2200      	movs	r2, #0
    bf2c:	701a      	strb	r2, [r3, #0]
    bf2e:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf36:	781b      	ldrb	r3, [r3, #0]
    bf38:	461a      	mov	r2, r3
    bf3a:	f24c 532d 	movw	r3, #50477	; 0xc52d
    bf3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf42:	7819      	ldrb	r1, [r3, #0]
    bf44:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bf48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf4c:	5499      	strb	r1, [r3, r2]
    bf4e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bf52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf56:	781a      	ldrb	r2, [r3, #0]
    bf58:	f24c 532d 	movw	r3, #50477	; 0xc52d
    bf5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf60:	781b      	ldrb	r3, [r3, #0]
    bf62:	4413      	add	r3, r2
    bf64:	b2da      	uxtb	r2, r3
    bf66:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bf6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf6e:	701a      	strb	r2, [r3, #0]
    bf70:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bf74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf78:	781a      	ldrb	r2, [r3, #0]
    bf7a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bf7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf82:	781b      	ldrb	r3, [r3, #0]
    bf84:	4413      	add	r3, r2
    bf86:	b2da      	uxtb	r2, r3
    bf88:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bf8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf90:	701a      	strb	r2, [r3, #0]
    bf92:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf9a:	781b      	ldrb	r3, [r3, #0]
    bf9c:	3301      	adds	r3, #1
    bf9e:	b2da      	uxtb	r2, r3
    bfa0:	f24c 5349 	movw	r3, #50505	; 0xc549
    bfa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfa8:	701a      	strb	r2, [r3, #0]
    bfaa:	f24c 5349 	movw	r3, #50505	; 0xc549
    bfae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfb2:	781b      	ldrb	r3, [r3, #0]
    bfb4:	2bff      	cmp	r3, #255	; 0xff
    bfb6:	d105      	bne.n	bfc4 <send_mode+0x280>
    bfb8:	f24c 5349 	movw	r3, #50505	; 0xc549
    bfbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfc0:	2200      	movs	r2, #0
    bfc2:	701a      	strb	r2, [r3, #0]
    bfc4:	f24c 5349 	movw	r3, #50505	; 0xc549
    bfc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfcc:	781b      	ldrb	r3, [r3, #0]
    bfce:	461a      	mov	r2, r3
    bfd0:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    bfd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfd8:	7819      	ldrb	r1, [r3, #0]
    bfda:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bfde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfe2:	5499      	strb	r1, [r3, r2]
    bfe4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bfe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfec:	781a      	ldrb	r2, [r3, #0]
    bfee:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    bff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bff6:	781b      	ldrb	r3, [r3, #0]
    bff8:	4413      	add	r3, r2
    bffa:	b2da      	uxtb	r2, r3
    bffc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c000:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c004:	701a      	strb	r2, [r3, #0]
    c006:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c00a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c00e:	781a      	ldrb	r2, [r3, #0]
    c010:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c014:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c018:	781b      	ldrb	r3, [r3, #0]
    c01a:	4413      	add	r3, r2
    c01c:	b2da      	uxtb	r2, r3
    c01e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c022:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c026:	701a      	strb	r2, [r3, #0]
    c028:	f24c 5349 	movw	r3, #50505	; 0xc549
    c02c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c030:	781b      	ldrb	r3, [r3, #0]
    c032:	3301      	adds	r3, #1
    c034:	b2da      	uxtb	r2, r3
    c036:	f24c 5349 	movw	r3, #50505	; 0xc549
    c03a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c03e:	701a      	strb	r2, [r3, #0]
    c040:	f24c 5349 	movw	r3, #50505	; 0xc549
    c044:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c048:	781b      	ldrb	r3, [r3, #0]
    c04a:	2bff      	cmp	r3, #255	; 0xff
    c04c:	d105      	bne.n	c05a <send_mode+0x316>
    c04e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c052:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c056:	2200      	movs	r2, #0
    c058:	701a      	strb	r2, [r3, #0]
    c05a:	f24c 5349 	movw	r3, #50505	; 0xc549
    c05e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c062:	781b      	ldrb	r3, [r3, #0]
    c064:	461a      	mov	r2, r3
    c066:	f24c 5333 	movw	r3, #50483	; 0xc533
    c06a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c06e:	7819      	ldrb	r1, [r3, #0]
    c070:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c074:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c078:	5499      	strb	r1, [r3, r2]
    c07a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c07e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c082:	781a      	ldrb	r2, [r3, #0]
    c084:	f24c 5333 	movw	r3, #50483	; 0xc533
    c088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c08c:	781b      	ldrb	r3, [r3, #0]
    c08e:	4413      	add	r3, r2
    c090:	b2da      	uxtb	r2, r3
    c092:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c096:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c09a:	701a      	strb	r2, [r3, #0]
    c09c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c0a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0a4:	781a      	ldrb	r2, [r3, #0]
    c0a6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c0aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0ae:	781b      	ldrb	r3, [r3, #0]
    c0b0:	4413      	add	r3, r2
    c0b2:	b2da      	uxtb	r2, r3
    c0b4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c0b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0bc:	701a      	strb	r2, [r3, #0]
    c0be:	f24c 5349 	movw	r3, #50505	; 0xc549
    c0c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0c6:	781b      	ldrb	r3, [r3, #0]
    c0c8:	3301      	adds	r3, #1
    c0ca:	b2da      	uxtb	r2, r3
    c0cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    c0d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0d4:	701a      	strb	r2, [r3, #0]
    c0d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    c0da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0de:	781b      	ldrb	r3, [r3, #0]
    c0e0:	2bff      	cmp	r3, #255	; 0xff
    c0e2:	d105      	bne.n	c0f0 <send_mode+0x3ac>
    c0e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    c0e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0ec:	2200      	movs	r2, #0
    c0ee:	701a      	strb	r2, [r3, #0]
    c0f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    c0f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0f8:	781b      	ldrb	r3, [r3, #0]
    c0fa:	461a      	mov	r2, r3
    c0fc:	f240 533c 	movw	r3, #1340	; 0x53c
    c100:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c104:	7819      	ldrb	r1, [r3, #0]
    c106:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c10a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c10e:	5499      	strb	r1, [r3, r2]
    c110:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c118:	781a      	ldrb	r2, [r3, #0]
    c11a:	f240 533c 	movw	r3, #1340	; 0x53c
    c11e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c122:	781b      	ldrb	r3, [r3, #0]
    c124:	4413      	add	r3, r2
    c126:	b2da      	uxtb	r2, r3
    c128:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c12c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c130:	701a      	strb	r2, [r3, #0]
    c132:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c136:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c13a:	781a      	ldrb	r2, [r3, #0]
    c13c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c140:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c144:	781b      	ldrb	r3, [r3, #0]
    c146:	4413      	add	r3, r2
    c148:	b2da      	uxtb	r2, r3
    c14a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c14e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c152:	701a      	strb	r2, [r3, #0]
    c154:	f24c 5349 	movw	r3, #50505	; 0xc549
    c158:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c15c:	781b      	ldrb	r3, [r3, #0]
    c15e:	3301      	adds	r3, #1
    c160:	b2da      	uxtb	r2, r3
    c162:	f24c 5349 	movw	r3, #50505	; 0xc549
    c166:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c16a:	701a      	strb	r2, [r3, #0]
    c16c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c170:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c174:	781b      	ldrb	r3, [r3, #0]
    c176:	2bff      	cmp	r3, #255	; 0xff
    c178:	d105      	bne.n	c186 <send_mode+0x442>
    c17a:	f24c 5349 	movw	r3, #50505	; 0xc549
    c17e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c182:	2200      	movs	r2, #0
    c184:	701a      	strb	r2, [r3, #0]
    c186:	f24c 5349 	movw	r3, #50505	; 0xc549
    c18a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c18e:	781b      	ldrb	r3, [r3, #0]
    c190:	461a      	mov	r2, r3
    c192:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c196:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c19a:	7819      	ldrb	r1, [r3, #0]
    c19c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c1a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1a4:	5499      	strb	r1, [r3, r2]
    c1a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    c1aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1ae:	781b      	ldrb	r3, [r3, #0]
    c1b0:	3301      	adds	r3, #1
    c1b2:	b2da      	uxtb	r2, r3
    c1b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    c1b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1bc:	701a      	strb	r2, [r3, #0]
    c1be:	f24c 5349 	movw	r3, #50505	; 0xc549
    c1c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1c6:	781b      	ldrb	r3, [r3, #0]
    c1c8:	2bff      	cmp	r3, #255	; 0xff
    c1ca:	d105      	bne.n	c1d8 <send_mode+0x494>
    c1cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    c1d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1d4:	2200      	movs	r2, #0
    c1d6:	701a      	strb	r2, [r3, #0]
    c1d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c1dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1e0:	781b      	ldrb	r3, [r3, #0]
    c1e2:	461a      	mov	r2, r3
    c1e4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c1e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1ec:	7819      	ldrb	r1, [r3, #0]
    c1ee:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c1f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1f6:	5499      	strb	r1, [r3, r2]
    c1f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c1fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c200:	781b      	ldrb	r3, [r3, #0]
    c202:	3301      	adds	r3, #1
    c204:	b2da      	uxtb	r2, r3
    c206:	f24c 5349 	movw	r3, #50505	; 0xc549
    c20a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c20e:	701a      	strb	r2, [r3, #0]
    c210:	f24c 5349 	movw	r3, #50505	; 0xc549
    c214:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c218:	781b      	ldrb	r3, [r3, #0]
    c21a:	2bff      	cmp	r3, #255	; 0xff
    c21c:	d105      	bne.n	c22a <send_mode+0x4e6>
    c21e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c226:	2200      	movs	r2, #0
    c228:	701a      	strb	r2, [r3, #0]
    c22a:	f242 0339 	movw	r3, #8249	; 0x2039
    c22e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c232:	781b      	ldrb	r3, [r3, #0]
    c234:	b2db      	uxtb	r3, r3
    c236:	f003 0310 	and.w	r3, r3, #16
    c23a:	2b00      	cmp	r3, #0
    c23c:	d15a      	bne.n	c2f4 <send_mode+0x5b0>
    c23e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c246:	781b      	ldrb	r3, [r3, #0]
    c248:	b2db      	uxtb	r3, r3
    c24a:	461a      	mov	r2, r3
    c24c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c250:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c254:	5c9a      	ldrb	r2, [r3, r2]
    c256:	f24c 634b 	movw	r3, #50763	; 0xc64b
    c25a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c25e:	701a      	strb	r2, [r3, #0]
    c260:	f24c 634c 	movw	r3, #50764	; 0xc64c
    c264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c268:	2200      	movs	r2, #0
    c26a:	701a      	strb	r2, [r3, #0]
    c26c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c270:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c274:	781b      	ldrb	r3, [r3, #0]
    c276:	b2db      	uxtb	r3, r3
    c278:	3301      	adds	r3, #1
    c27a:	b2da      	uxtb	r2, r3
    c27c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c280:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c284:	701a      	strb	r2, [r3, #0]
    c286:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c28a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c28e:	781b      	ldrb	r3, [r3, #0]
    c290:	b2db      	uxtb	r3, r3
    c292:	2bff      	cmp	r3, #255	; 0xff
    c294:	d105      	bne.n	c2a2 <send_mode+0x55e>
    c296:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c29a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c29e:	2200      	movs	r2, #0
    c2a0:	701a      	strb	r2, [r3, #0]
    c2a2:	f242 0338 	movw	r3, #8248	; 0x2038
    c2a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2aa:	f242 0238 	movw	r2, #8248	; 0x2038
    c2ae:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c2b2:	7812      	ldrb	r2, [r2, #0]
    c2b4:	b2d2      	uxtb	r2, r2
    c2b6:	f042 0201 	orr.w	r2, r2, #1
    c2ba:	b2d2      	uxtb	r2, r2
    c2bc:	701a      	strb	r2, [r3, #0]
    c2be:	f242 0339 	movw	r3, #8249	; 0x2039
    c2c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2c6:	f242 0239 	movw	r2, #8249	; 0x2039
    c2ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c2ce:	7812      	ldrb	r2, [r2, #0]
    c2d0:	b2d2      	uxtb	r2, r2
    c2d2:	f042 0210 	orr.w	r2, r2, #16
    c2d6:	b2d2      	uxtb	r2, r2
    c2d8:	701a      	strb	r2, [r3, #0]
    c2da:	e00b      	b.n	c2f4 <send_mode+0x5b0>
    c2dc:	f24c 5348 	movw	r3, #50504	; 0xc548
    c2e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2e4:	781b      	ldrb	r3, [r3, #0]
    c2e6:	3301      	adds	r3, #1
    c2e8:	b2da      	uxtb	r2, r3
    c2ea:	f24c 5348 	movw	r3, #50504	; 0xc548
    c2ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2f2:	701a      	strb	r2, [r3, #0]
}
    c2f4:	46bd      	mov	sp, r7
    c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c2fa:	4770      	bx	lr

0000c2fc <send_debug>:
void send_debug(void){  //5000ms
    c2fc:	b480      	push	{r7}
    c2fe:	af00      	add	r7, sp, #0
  if(!boot)
    c300:	f240 533d 	movw	r3, #1341	; 0x53d
    c304:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c308:	781b      	ldrb	r3, [r3, #0]
    c30a:	2b00      	cmp	r3, #0
    c30c:	f040 82cf 	bne.w	c8ae <send_debug+0x5b2>
  { if (count % 50 == 29) PERIODIC_SEND_DEBUG();}
    c310:	f24c 5341 	movw	r3, #50497	; 0xc541
    c314:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c318:	781a      	ldrb	r2, [r3, #0]
    c31a:	f248 531f 	movw	r3, #34079	; 0x851f
    c31e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c322:	fba3 1302 	umull	r1, r3, r3, r2
    c326:	091b      	lsrs	r3, r3, #4
    c328:	2132      	movs	r1, #50	; 0x32
    c32a:	fb01 f303 	mul.w	r3, r1, r3
    c32e:	1ad3      	subs	r3, r2, r3
    c330:	b2db      	uxtb	r3, r3
    c332:	2b1d      	cmp	r3, #29
    c334:	f040 82bb 	bne.w	c8ae <send_debug+0x5b2>
    c338:	f24c 5349 	movw	r3, #50505	; 0xc549
    c33c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c340:	781a      	ldrb	r2, [r3, #0]
    c342:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c346:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c34a:	781b      	ldrb	r3, [r3, #0]
    c34c:	b2db      	uxtb	r3, r3
    c34e:	429a      	cmp	r2, r3
    c350:	d313      	bcc.n	c37a <send_debug+0x7e>
    c352:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c356:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c35a:	781b      	ldrb	r3, [r3, #0]
    c35c:	b2db      	uxtb	r3, r3
    c35e:	461a      	mov	r2, r3
    c360:	f24c 5349 	movw	r3, #50505	; 0xc549
    c364:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c368:	781b      	ldrb	r3, [r3, #0]
    c36a:	1ad3      	subs	r3, r2, r3
    c36c:	33ff      	adds	r3, #255	; 0xff
    c36e:	2b09      	cmp	r3, #9
    c370:	bfd4      	ite	le
    c372:	2300      	movle	r3, #0
    c374:	2301      	movgt	r3, #1
    c376:	b2db      	uxtb	r3, r3
    c378:	e011      	b.n	c39e <send_debug+0xa2>
    c37a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c37e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c382:	781b      	ldrb	r3, [r3, #0]
    c384:	b2db      	uxtb	r3, r3
    c386:	461a      	mov	r2, r3
    c388:	f24c 5349 	movw	r3, #50505	; 0xc549
    c38c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c390:	781b      	ldrb	r3, [r3, #0]
    c392:	1ad3      	subs	r3, r2, r3
    c394:	2b09      	cmp	r3, #9
    c396:	bfd4      	ite	le
    c398:	2300      	movle	r3, #0
    c39a:	2301      	movgt	r3, #1
    c39c:	b2db      	uxtb	r3, r3
    c39e:	2b00      	cmp	r3, #0
    c3a0:	f000 8279 	beq.w	c896 <send_debug+0x59a>
    c3a4:	f24c 5349 	movw	r3, #50505	; 0xc549
    c3a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3ac:	781b      	ldrb	r3, [r3, #0]
    c3ae:	461a      	mov	r2, r3
    c3b0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c3b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3b8:	2105      	movs	r1, #5
    c3ba:	5499      	strb	r1, [r3, r2]
    c3bc:	f24c 5349 	movw	r3, #50505	; 0xc549
    c3c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3c4:	781b      	ldrb	r3, [r3, #0]
    c3c6:	3301      	adds	r3, #1
    c3c8:	b2da      	uxtb	r2, r3
    c3ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    c3ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3d2:	701a      	strb	r2, [r3, #0]
    c3d4:	f24c 5349 	movw	r3, #50505	; 0xc549
    c3d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3dc:	781b      	ldrb	r3, [r3, #0]
    c3de:	2bff      	cmp	r3, #255	; 0xff
    c3e0:	d105      	bne.n	c3ee <send_debug+0xf2>
    c3e2:	f24c 5349 	movw	r3, #50505	; 0xc549
    c3e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3ea:	2200      	movs	r2, #0
    c3ec:	701a      	strb	r2, [r3, #0]
    c3ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    c3f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3f6:	781b      	ldrb	r3, [r3, #0]
    c3f8:	461a      	mov	r2, r3
    c3fa:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c3fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c402:	210d      	movs	r1, #13
    c404:	5499      	strb	r1, [r3, r2]
    c406:	f24c 5349 	movw	r3, #50505	; 0xc549
    c40a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c40e:	781b      	ldrb	r3, [r3, #0]
    c410:	3301      	adds	r3, #1
    c412:	b2da      	uxtb	r2, r3
    c414:	f24c 5349 	movw	r3, #50505	; 0xc549
    c418:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c41c:	701a      	strb	r2, [r3, #0]
    c41e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c426:	781b      	ldrb	r3, [r3, #0]
    c428:	2bff      	cmp	r3, #255	; 0xff
    c42a:	d105      	bne.n	c438 <send_debug+0x13c>
    c42c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c430:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c434:	2200      	movs	r2, #0
    c436:	701a      	strb	r2, [r3, #0]
    c438:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c43c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c440:	220d      	movs	r2, #13
    c442:	701a      	strb	r2, [r3, #0]
    c444:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c448:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c44c:	220d      	movs	r2, #13
    c44e:	701a      	strb	r2, [r3, #0]
    c450:	f24c 5349 	movw	r3, #50505	; 0xc549
    c454:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c458:	781b      	ldrb	r3, [r3, #0]
    c45a:	461a      	mov	r2, r3
    c45c:	f24c 637f 	movw	r3, #50815	; 0xc67f
    c460:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c464:	781b      	ldrb	r3, [r3, #0]
    c466:	b2d9      	uxtb	r1, r3
    c468:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c46c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c470:	5499      	strb	r1, [r3, r2]
    c472:	f24c 637f 	movw	r3, #50815	; 0xc67f
    c476:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c47a:	781a      	ldrb	r2, [r3, #0]
    c47c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c480:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c484:	781b      	ldrb	r3, [r3, #0]
    c486:	4413      	add	r3, r2
    c488:	b2da      	uxtb	r2, r3
    c48a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c48e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c492:	701a      	strb	r2, [r3, #0]
    c494:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c498:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c49c:	781a      	ldrb	r2, [r3, #0]
    c49e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c4a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4a6:	781b      	ldrb	r3, [r3, #0]
    c4a8:	4413      	add	r3, r2
    c4aa:	b2da      	uxtb	r2, r3
    c4ac:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c4b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4b4:	701a      	strb	r2, [r3, #0]
    c4b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    c4ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4be:	781b      	ldrb	r3, [r3, #0]
    c4c0:	3301      	adds	r3, #1
    c4c2:	b2da      	uxtb	r2, r3
    c4c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    c4c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4cc:	701a      	strb	r2, [r3, #0]
    c4ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    c4d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4d6:	781b      	ldrb	r3, [r3, #0]
    c4d8:	2bff      	cmp	r3, #255	; 0xff
    c4da:	d105      	bne.n	c4e8 <send_debug+0x1ec>
    c4dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    c4e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4e4:	2200      	movs	r2, #0
    c4e6:	701a      	strb	r2, [r3, #0]
    c4e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c4ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4f0:	781b      	ldrb	r3, [r3, #0]
    c4f2:	461a      	mov	r2, r3
    c4f4:	f24c 6380 	movw	r3, #50816	; 0xc680
    c4f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4fc:	7819      	ldrb	r1, [r3, #0]
    c4fe:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c502:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c506:	5499      	strb	r1, [r3, r2]
    c508:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c50c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c510:	781a      	ldrb	r2, [r3, #0]
    c512:	f24c 6380 	movw	r3, #50816	; 0xc680
    c516:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c51a:	781b      	ldrb	r3, [r3, #0]
    c51c:	4413      	add	r3, r2
    c51e:	b2da      	uxtb	r2, r3
    c520:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c524:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c528:	701a      	strb	r2, [r3, #0]
    c52a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c52e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c532:	781a      	ldrb	r2, [r3, #0]
    c534:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c538:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c53c:	781b      	ldrb	r3, [r3, #0]
    c53e:	4413      	add	r3, r2
    c540:	b2da      	uxtb	r2, r3
    c542:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c546:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c54a:	701a      	strb	r2, [r3, #0]
    c54c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c550:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c554:	781b      	ldrb	r3, [r3, #0]
    c556:	3301      	adds	r3, #1
    c558:	b2da      	uxtb	r2, r3
    c55a:	f24c 5349 	movw	r3, #50505	; 0xc549
    c55e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c562:	701a      	strb	r2, [r3, #0]
    c564:	f24c 5349 	movw	r3, #50505	; 0xc549
    c568:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c56c:	781b      	ldrb	r3, [r3, #0]
    c56e:	2bff      	cmp	r3, #255	; 0xff
    c570:	d105      	bne.n	c57e <send_debug+0x282>
    c572:	f24c 5349 	movw	r3, #50505	; 0xc549
    c576:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c57a:	2200      	movs	r2, #0
    c57c:	701a      	strb	r2, [r3, #0]
    c57e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c582:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c586:	781b      	ldrb	r3, [r3, #0]
    c588:	461a      	mov	r2, r3
    c58a:	f24c 5348 	movw	r3, #50504	; 0xc548
    c58e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c592:	7819      	ldrb	r1, [r3, #0]
    c594:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c598:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c59c:	5499      	strb	r1, [r3, r2]
    c59e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c5a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5a6:	781a      	ldrb	r2, [r3, #0]
    c5a8:	f24c 5348 	movw	r3, #50504	; 0xc548
    c5ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5b0:	781b      	ldrb	r3, [r3, #0]
    c5b2:	4413      	add	r3, r2
    c5b4:	b2da      	uxtb	r2, r3
    c5b6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c5ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5be:	701a      	strb	r2, [r3, #0]
    c5c0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c5c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5c8:	781a      	ldrb	r2, [r3, #0]
    c5ca:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c5ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5d2:	781b      	ldrb	r3, [r3, #0]
    c5d4:	4413      	add	r3, r2
    c5d6:	b2da      	uxtb	r2, r3
    c5d8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c5dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5e0:	701a      	strb	r2, [r3, #0]
    c5e2:	f24c 5349 	movw	r3, #50505	; 0xc549
    c5e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5ea:	781b      	ldrb	r3, [r3, #0]
    c5ec:	3301      	adds	r3, #1
    c5ee:	b2da      	uxtb	r2, r3
    c5f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    c5f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5f8:	701a      	strb	r2, [r3, #0]
    c5fa:	f24c 5349 	movw	r3, #50505	; 0xc549
    c5fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c602:	781b      	ldrb	r3, [r3, #0]
    c604:	2bff      	cmp	r3, #255	; 0xff
    c606:	d105      	bne.n	c614 <send_debug+0x318>
    c608:	f24c 5349 	movw	r3, #50505	; 0xc549
    c60c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c610:	2200      	movs	r2, #0
    c612:	701a      	strb	r2, [r3, #0]
    c614:	f24c 5349 	movw	r3, #50505	; 0xc549
    c618:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c61c:	781b      	ldrb	r3, [r3, #0]
    c61e:	461a      	mov	r2, r3
    c620:	f24c 73e7 	movw	r3, #51175	; 0xc7e7
    c624:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c628:	7819      	ldrb	r1, [r3, #0]
    c62a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c62e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c632:	5499      	strb	r1, [r3, r2]
    c634:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c638:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c63c:	781a      	ldrb	r2, [r3, #0]
    c63e:	f24c 73e7 	movw	r3, #51175	; 0xc7e7
    c642:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c646:	781b      	ldrb	r3, [r3, #0]
    c648:	4413      	add	r3, r2
    c64a:	b2da      	uxtb	r2, r3
    c64c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c650:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c654:	701a      	strb	r2, [r3, #0]
    c656:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c65a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c65e:	781a      	ldrb	r2, [r3, #0]
    c660:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c668:	781b      	ldrb	r3, [r3, #0]
    c66a:	4413      	add	r3, r2
    c66c:	b2da      	uxtb	r2, r3
    c66e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c672:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c676:	701a      	strb	r2, [r3, #0]
    c678:	f24c 5349 	movw	r3, #50505	; 0xc549
    c67c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c680:	781b      	ldrb	r3, [r3, #0]
    c682:	3301      	adds	r3, #1
    c684:	b2da      	uxtb	r2, r3
    c686:	f24c 5349 	movw	r3, #50505	; 0xc549
    c68a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c68e:	701a      	strb	r2, [r3, #0]
    c690:	f24c 5349 	movw	r3, #50505	; 0xc549
    c694:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c698:	781b      	ldrb	r3, [r3, #0]
    c69a:	2bff      	cmp	r3, #255	; 0xff
    c69c:	d105      	bne.n	c6aa <send_debug+0x3ae>
    c69e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c6a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6a6:	2200      	movs	r2, #0
    c6a8:	701a      	strb	r2, [r3, #0]
    c6aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    c6ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6b2:	781b      	ldrb	r3, [r3, #0]
    c6b4:	461a      	mov	r2, r3
    c6b6:	f24c 5334 	movw	r3, #50484	; 0xc534
    c6ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6be:	7819      	ldrb	r1, [r3, #0]
    c6c0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c6c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6c8:	5499      	strb	r1, [r3, r2]
    c6ca:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c6ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6d2:	781a      	ldrb	r2, [r3, #0]
    c6d4:	f24c 5334 	movw	r3, #50484	; 0xc534
    c6d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6dc:	781b      	ldrb	r3, [r3, #0]
    c6de:	4413      	add	r3, r2
    c6e0:	b2da      	uxtb	r2, r3
    c6e2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c6e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6ea:	701a      	strb	r2, [r3, #0]
    c6ec:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c6f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6f4:	781a      	ldrb	r2, [r3, #0]
    c6f6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c6fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6fe:	781b      	ldrb	r3, [r3, #0]
    c700:	4413      	add	r3, r2
    c702:	b2da      	uxtb	r2, r3
    c704:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c708:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c70c:	701a      	strb	r2, [r3, #0]
    c70e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c716:	781b      	ldrb	r3, [r3, #0]
    c718:	3301      	adds	r3, #1
    c71a:	b2da      	uxtb	r2, r3
    c71c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c720:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c724:	701a      	strb	r2, [r3, #0]
    c726:	f24c 5349 	movw	r3, #50505	; 0xc549
    c72a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c72e:	781b      	ldrb	r3, [r3, #0]
    c730:	2bff      	cmp	r3, #255	; 0xff
    c732:	d105      	bne.n	c740 <send_debug+0x444>
    c734:	f24c 5349 	movw	r3, #50505	; 0xc549
    c738:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c73c:	2200      	movs	r2, #0
    c73e:	701a      	strb	r2, [r3, #0]
    c740:	f24c 5349 	movw	r3, #50505	; 0xc549
    c744:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c748:	781b      	ldrb	r3, [r3, #0]
    c74a:	461a      	mov	r2, r3
    c74c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c750:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c754:	7819      	ldrb	r1, [r3, #0]
    c756:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c75a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c75e:	5499      	strb	r1, [r3, r2]
    c760:	f24c 5349 	movw	r3, #50505	; 0xc549
    c764:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c768:	781b      	ldrb	r3, [r3, #0]
    c76a:	3301      	adds	r3, #1
    c76c:	b2da      	uxtb	r2, r3
    c76e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c772:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c776:	701a      	strb	r2, [r3, #0]
    c778:	f24c 5349 	movw	r3, #50505	; 0xc549
    c77c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c780:	781b      	ldrb	r3, [r3, #0]
    c782:	2bff      	cmp	r3, #255	; 0xff
    c784:	d105      	bne.n	c792 <send_debug+0x496>
    c786:	f24c 5349 	movw	r3, #50505	; 0xc549
    c78a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c78e:	2200      	movs	r2, #0
    c790:	701a      	strb	r2, [r3, #0]
    c792:	f24c 5349 	movw	r3, #50505	; 0xc549
    c796:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c79a:	781b      	ldrb	r3, [r3, #0]
    c79c:	461a      	mov	r2, r3
    c79e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c7a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7a6:	7819      	ldrb	r1, [r3, #0]
    c7a8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c7ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7b0:	5499      	strb	r1, [r3, r2]
    c7b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    c7b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7ba:	781b      	ldrb	r3, [r3, #0]
    c7bc:	3301      	adds	r3, #1
    c7be:	b2da      	uxtb	r2, r3
    c7c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    c7c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7c8:	701a      	strb	r2, [r3, #0]
    c7ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    c7ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7d2:	781b      	ldrb	r3, [r3, #0]
    c7d4:	2bff      	cmp	r3, #255	; 0xff
    c7d6:	d105      	bne.n	c7e4 <send_debug+0x4e8>
    c7d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c7dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7e0:	2200      	movs	r2, #0
    c7e2:	701a      	strb	r2, [r3, #0]
    c7e4:	f242 0339 	movw	r3, #8249	; 0x2039
    c7e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7ec:	781b      	ldrb	r3, [r3, #0]
    c7ee:	b2db      	uxtb	r3, r3
    c7f0:	f003 0310 	and.w	r3, r3, #16
    c7f4:	2b00      	cmp	r3, #0
    c7f6:	d15a      	bne.n	c8ae <send_debug+0x5b2>
    c7f8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c7fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c800:	781b      	ldrb	r3, [r3, #0]
    c802:	b2db      	uxtb	r3, r3
    c804:	461a      	mov	r2, r3
    c806:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c80a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c80e:	5c9a      	ldrb	r2, [r3, r2]
    c810:	f24c 634b 	movw	r3, #50763	; 0xc64b
    c814:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c818:	701a      	strb	r2, [r3, #0]
    c81a:	f24c 634c 	movw	r3, #50764	; 0xc64c
    c81e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c822:	2200      	movs	r2, #0
    c824:	701a      	strb	r2, [r3, #0]
    c826:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c82a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c82e:	781b      	ldrb	r3, [r3, #0]
    c830:	b2db      	uxtb	r3, r3
    c832:	3301      	adds	r3, #1
    c834:	b2da      	uxtb	r2, r3
    c836:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c83a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c83e:	701a      	strb	r2, [r3, #0]
    c840:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c848:	781b      	ldrb	r3, [r3, #0]
    c84a:	b2db      	uxtb	r3, r3
    c84c:	2bff      	cmp	r3, #255	; 0xff
    c84e:	d105      	bne.n	c85c <send_debug+0x560>
    c850:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c854:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c858:	2200      	movs	r2, #0
    c85a:	701a      	strb	r2, [r3, #0]
    c85c:	f242 0338 	movw	r3, #8248	; 0x2038
    c860:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c864:	f242 0238 	movw	r2, #8248	; 0x2038
    c868:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c86c:	7812      	ldrb	r2, [r2, #0]
    c86e:	b2d2      	uxtb	r2, r2
    c870:	f042 0201 	orr.w	r2, r2, #1
    c874:	b2d2      	uxtb	r2, r2
    c876:	701a      	strb	r2, [r3, #0]
    c878:	f242 0339 	movw	r3, #8249	; 0x2039
    c87c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c880:	f242 0239 	movw	r2, #8249	; 0x2039
    c884:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c888:	7812      	ldrb	r2, [r2, #0]
    c88a:	b2d2      	uxtb	r2, r2
    c88c:	f042 0210 	orr.w	r2, r2, #16
    c890:	b2d2      	uxtb	r2, r2
    c892:	701a      	strb	r2, [r3, #0]
    c894:	e00b      	b.n	c8ae <send_debug+0x5b2>
    c896:	f24c 5348 	movw	r3, #50504	; 0xc548
    c89a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c89e:	781b      	ldrb	r3, [r3, #0]
    c8a0:	3301      	adds	r3, #1
    c8a2:	b2da      	uxtb	r2, r3
    c8a4:	f24c 5348 	movw	r3, #50504	; 0xc548
    c8a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8ac:	701a      	strb	r2, [r3, #0]
}
    c8ae:	46bd      	mov	sp, r7
    c8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c8b4:	4770      	bx	lr
    c8b6:	bf00      	nop

0000c8b8 <send_nav_ref>:
void send_nav_ref(void){  //10000ms
    c8b8:	b480      	push	{r7}
    c8ba:	af00      	add	r7, sp, #0
  if(!boot)
    c8bc:	f240 533d 	movw	r3, #1341	; 0x53d
    c8c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8c4:	781b      	ldrb	r3, [r3, #0]
    c8c6:	2b00      	cmp	r3, #0
    c8c8:	f040 83a9 	bne.w	d01e <send_nav_ref+0x766>
  { if (count % 100 == 49) PERIODIC_SEND_NAVIGATION_REF();}
    c8cc:	f24c 5341 	movw	r3, #50497	; 0xc541
    c8d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8d4:	781a      	ldrb	r2, [r3, #0]
    c8d6:	f248 531f 	movw	r3, #34079	; 0x851f
    c8da:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c8de:	fba3 1302 	umull	r1, r3, r3, r2
    c8e2:	095b      	lsrs	r3, r3, #5
    c8e4:	2164      	movs	r1, #100	; 0x64
    c8e6:	fb01 f303 	mul.w	r3, r1, r3
    c8ea:	1ad3      	subs	r3, r2, r3
    c8ec:	b2db      	uxtb	r3, r3
    c8ee:	2b31      	cmp	r3, #49	; 0x31
    c8f0:	f040 8395 	bne.w	d01e <send_nav_ref+0x766>
    c8f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    c8f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8fc:	781a      	ldrb	r2, [r3, #0]
    c8fe:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c906:	781b      	ldrb	r3, [r3, #0]
    c908:	b2db      	uxtb	r3, r3
    c90a:	429a      	cmp	r2, r3
    c90c:	d313      	bcc.n	c936 <send_nav_ref+0x7e>
    c90e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c916:	781b      	ldrb	r3, [r3, #0]
    c918:	b2db      	uxtb	r3, r3
    c91a:	461a      	mov	r2, r3
    c91c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c924:	781b      	ldrb	r3, [r3, #0]
    c926:	1ad3      	subs	r3, r2, r3
    c928:	33ff      	adds	r3, #255	; 0xff
    c92a:	2b0c      	cmp	r3, #12
    c92c:	bfd4      	ite	le
    c92e:	2300      	movle	r3, #0
    c930:	2301      	movgt	r3, #1
    c932:	b2db      	uxtb	r3, r3
    c934:	e011      	b.n	c95a <send_nav_ref+0xa2>
    c936:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c93a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c93e:	781b      	ldrb	r3, [r3, #0]
    c940:	b2db      	uxtb	r3, r3
    c942:	461a      	mov	r2, r3
    c944:	f24c 5349 	movw	r3, #50505	; 0xc549
    c948:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c94c:	781b      	ldrb	r3, [r3, #0]
    c94e:	1ad3      	subs	r3, r2, r3
    c950:	2b0c      	cmp	r3, #12
    c952:	bfd4      	ite	le
    c954:	2300      	movle	r3, #0
    c956:	2301      	movgt	r3, #1
    c958:	b2db      	uxtb	r3, r3
    c95a:	2b00      	cmp	r3, #0
    c95c:	f000 8353 	beq.w	d006 <send_nav_ref+0x74e>
    c960:	f24c 5349 	movw	r3, #50505	; 0xc549
    c964:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c968:	781b      	ldrb	r3, [r3, #0]
    c96a:	461a      	mov	r2, r3
    c96c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c970:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c974:	2105      	movs	r1, #5
    c976:	5499      	strb	r1, [r3, r2]
    c978:	f24c 5349 	movw	r3, #50505	; 0xc549
    c97c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c980:	781b      	ldrb	r3, [r3, #0]
    c982:	3301      	adds	r3, #1
    c984:	b2da      	uxtb	r2, r3
    c986:	f24c 5349 	movw	r3, #50505	; 0xc549
    c98a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c98e:	701a      	strb	r2, [r3, #0]
    c990:	f24c 5349 	movw	r3, #50505	; 0xc549
    c994:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c998:	781b      	ldrb	r3, [r3, #0]
    c99a:	2bff      	cmp	r3, #255	; 0xff
    c99c:	d105      	bne.n	c9aa <send_nav_ref+0xf2>
    c99e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c9a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9a6:	2200      	movs	r2, #0
    c9a8:	701a      	strb	r2, [r3, #0]
    c9aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    c9ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9b2:	781b      	ldrb	r3, [r3, #0]
    c9b4:	461a      	mov	r2, r3
    c9b6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c9ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9be:	2109      	movs	r1, #9
    c9c0:	5499      	strb	r1, [r3, r2]
    c9c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    c9c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9ca:	781b      	ldrb	r3, [r3, #0]
    c9cc:	3301      	adds	r3, #1
    c9ce:	b2da      	uxtb	r2, r3
    c9d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    c9d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9d8:	701a      	strb	r2, [r3, #0]
    c9da:	f24c 5349 	movw	r3, #50505	; 0xc549
    c9de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9e2:	781b      	ldrb	r3, [r3, #0]
    c9e4:	2bff      	cmp	r3, #255	; 0xff
    c9e6:	d105      	bne.n	c9f4 <send_nav_ref+0x13c>
    c9e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c9ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9f0:	2200      	movs	r2, #0
    c9f2:	701a      	strb	r2, [r3, #0]
    c9f4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c9f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9fc:	2209      	movs	r2, #9
    c9fe:	701a      	strb	r2, [r3, #0]
    ca00:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ca04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca08:	2209      	movs	r2, #9
    ca0a:	701a      	strb	r2, [r3, #0]
    ca0c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca14:	781b      	ldrb	r3, [r3, #0]
    ca16:	461a      	mov	r2, r3
    ca18:	f648 239c 	movw	r3, #35484	; 0x8a9c
    ca1c:	f2c0 0301 	movt	r3, #1
    ca20:	7819      	ldrb	r1, [r3, #0]
    ca22:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ca26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca2a:	5499      	strb	r1, [r3, r2]
    ca2c:	f648 239c 	movw	r3, #35484	; 0x8a9c
    ca30:	f2c0 0301 	movt	r3, #1
    ca34:	781a      	ldrb	r2, [r3, #0]
    ca36:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ca3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca3e:	781b      	ldrb	r3, [r3, #0]
    ca40:	4413      	add	r3, r2
    ca42:	b2da      	uxtb	r2, r3
    ca44:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ca48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca4c:	701a      	strb	r2, [r3, #0]
    ca4e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ca52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca56:	781a      	ldrb	r2, [r3, #0]
    ca58:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ca5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca60:	781b      	ldrb	r3, [r3, #0]
    ca62:	4413      	add	r3, r2
    ca64:	b2da      	uxtb	r2, r3
    ca66:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ca6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca6e:	701a      	strb	r2, [r3, #0]
    ca70:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca78:	781b      	ldrb	r3, [r3, #0]
    ca7a:	3301      	adds	r3, #1
    ca7c:	b2da      	uxtb	r2, r3
    ca7e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca86:	701a      	strb	r2, [r3, #0]
    ca88:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca90:	781b      	ldrb	r3, [r3, #0]
    ca92:	2bff      	cmp	r3, #255	; 0xff
    ca94:	d105      	bne.n	caa2 <send_nav_ref+0x1ea>
    ca96:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca9e:	2200      	movs	r2, #0
    caa0:	701a      	strb	r2, [r3, #0]
    caa2:	f24c 5349 	movw	r3, #50505	; 0xc549
    caa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caaa:	781b      	ldrb	r3, [r3, #0]
    caac:	461a      	mov	r2, r3
    caae:	f648 239c 	movw	r3, #35484	; 0x8a9c
    cab2:	f2c0 0301 	movt	r3, #1
    cab6:	7859      	ldrb	r1, [r3, #1]
    cab8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cabc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cac0:	5499      	strb	r1, [r3, r2]
    cac2:	4bd2      	ldr	r3, [pc, #840]	; (ce0c <send_nav_ref+0x554>)
    cac4:	781a      	ldrb	r2, [r3, #0]
    cac6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    caca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cace:	781b      	ldrb	r3, [r3, #0]
    cad0:	4413      	add	r3, r2
    cad2:	b2da      	uxtb	r2, r3
    cad4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cadc:	701a      	strb	r2, [r3, #0]
    cade:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cae6:	781a      	ldrb	r2, [r3, #0]
    cae8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    caec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caf0:	781b      	ldrb	r3, [r3, #0]
    caf2:	4413      	add	r3, r2
    caf4:	b2da      	uxtb	r2, r3
    caf6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cafa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cafe:	701a      	strb	r2, [r3, #0]
    cb00:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb08:	781b      	ldrb	r3, [r3, #0]
    cb0a:	3301      	adds	r3, #1
    cb0c:	b2da      	uxtb	r2, r3
    cb0e:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb16:	701a      	strb	r2, [r3, #0]
    cb18:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb20:	781b      	ldrb	r3, [r3, #0]
    cb22:	2bff      	cmp	r3, #255	; 0xff
    cb24:	d105      	bne.n	cb32 <send_nav_ref+0x27a>
    cb26:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb2e:	2200      	movs	r2, #0
    cb30:	701a      	strb	r2, [r3, #0]
    cb32:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb3a:	781b      	ldrb	r3, [r3, #0]
    cb3c:	461a      	mov	r2, r3
    cb3e:	f648 239c 	movw	r3, #35484	; 0x8a9c
    cb42:	f2c0 0301 	movt	r3, #1
    cb46:	7899      	ldrb	r1, [r3, #2]
    cb48:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cb4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb50:	5499      	strb	r1, [r3, r2]
    cb52:	4baf      	ldr	r3, [pc, #700]	; (ce10 <send_nav_ref+0x558>)
    cb54:	781a      	ldrb	r2, [r3, #0]
    cb56:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cb5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb5e:	781b      	ldrb	r3, [r3, #0]
    cb60:	4413      	add	r3, r2
    cb62:	b2da      	uxtb	r2, r3
    cb64:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cb68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb6c:	701a      	strb	r2, [r3, #0]
    cb6e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cb72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb76:	781a      	ldrb	r2, [r3, #0]
    cb78:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cb7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb80:	781b      	ldrb	r3, [r3, #0]
    cb82:	4413      	add	r3, r2
    cb84:	b2da      	uxtb	r2, r3
    cb86:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cb8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb8e:	701a      	strb	r2, [r3, #0]
    cb90:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb98:	781b      	ldrb	r3, [r3, #0]
    cb9a:	3301      	adds	r3, #1
    cb9c:	b2da      	uxtb	r2, r3
    cb9e:	f24c 5349 	movw	r3, #50505	; 0xc549
    cba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cba6:	701a      	strb	r2, [r3, #0]
    cba8:	f24c 5349 	movw	r3, #50505	; 0xc549
    cbac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbb0:	781b      	ldrb	r3, [r3, #0]
    cbb2:	2bff      	cmp	r3, #255	; 0xff
    cbb4:	d105      	bne.n	cbc2 <send_nav_ref+0x30a>
    cbb6:	f24c 5349 	movw	r3, #50505	; 0xc549
    cbba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbbe:	2200      	movs	r2, #0
    cbc0:	701a      	strb	r2, [r3, #0]
    cbc2:	f24c 5349 	movw	r3, #50505	; 0xc549
    cbc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbca:	781b      	ldrb	r3, [r3, #0]
    cbcc:	461a      	mov	r2, r3
    cbce:	f648 239c 	movw	r3, #35484	; 0x8a9c
    cbd2:	f2c0 0301 	movt	r3, #1
    cbd6:	78d9      	ldrb	r1, [r3, #3]
    cbd8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cbdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbe0:	5499      	strb	r1, [r3, r2]
    cbe2:	4b8c      	ldr	r3, [pc, #560]	; (ce14 <send_nav_ref+0x55c>)
    cbe4:	781a      	ldrb	r2, [r3, #0]
    cbe6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cbea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbee:	781b      	ldrb	r3, [r3, #0]
    cbf0:	4413      	add	r3, r2
    cbf2:	b2da      	uxtb	r2, r3
    cbf4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cbf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbfc:	701a      	strb	r2, [r3, #0]
    cbfe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cc02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc06:	781a      	ldrb	r2, [r3, #0]
    cc08:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cc0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc10:	781b      	ldrb	r3, [r3, #0]
    cc12:	4413      	add	r3, r2
    cc14:	b2da      	uxtb	r2, r3
    cc16:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cc1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc1e:	701a      	strb	r2, [r3, #0]
    cc20:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc28:	781b      	ldrb	r3, [r3, #0]
    cc2a:	3301      	adds	r3, #1
    cc2c:	b2da      	uxtb	r2, r3
    cc2e:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc36:	701a      	strb	r2, [r3, #0]
    cc38:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc40:	781b      	ldrb	r3, [r3, #0]
    cc42:	2bff      	cmp	r3, #255	; 0xff
    cc44:	d105      	bne.n	cc52 <send_nav_ref+0x39a>
    cc46:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc4e:	2200      	movs	r2, #0
    cc50:	701a      	strb	r2, [r3, #0]
    cc52:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc5a:	781b      	ldrb	r3, [r3, #0]
    cc5c:	461a      	mov	r2, r3
    cc5e:	f648 23a0 	movw	r3, #35488	; 0x8aa0
    cc62:	f2c0 0301 	movt	r3, #1
    cc66:	7819      	ldrb	r1, [r3, #0]
    cc68:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cc6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc70:	5499      	strb	r1, [r3, r2]
    cc72:	f648 23a0 	movw	r3, #35488	; 0x8aa0
    cc76:	f2c0 0301 	movt	r3, #1
    cc7a:	781a      	ldrb	r2, [r3, #0]
    cc7c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cc80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc84:	781b      	ldrb	r3, [r3, #0]
    cc86:	4413      	add	r3, r2
    cc88:	b2da      	uxtb	r2, r3
    cc8a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cc8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc92:	701a      	strb	r2, [r3, #0]
    cc94:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cc98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc9c:	781a      	ldrb	r2, [r3, #0]
    cc9e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cca6:	781b      	ldrb	r3, [r3, #0]
    cca8:	4413      	add	r3, r2
    ccaa:	b2da      	uxtb	r2, r3
    ccac:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ccb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccb4:	701a      	strb	r2, [r3, #0]
    ccb6:	f24c 5349 	movw	r3, #50505	; 0xc549
    ccba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccbe:	781b      	ldrb	r3, [r3, #0]
    ccc0:	3301      	adds	r3, #1
    ccc2:	b2da      	uxtb	r2, r3
    ccc4:	f24c 5349 	movw	r3, #50505	; 0xc549
    ccc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cccc:	701a      	strb	r2, [r3, #0]
    ccce:	f24c 5349 	movw	r3, #50505	; 0xc549
    ccd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccd6:	781b      	ldrb	r3, [r3, #0]
    ccd8:	2bff      	cmp	r3, #255	; 0xff
    ccda:	d105      	bne.n	cce8 <send_nav_ref+0x430>
    ccdc:	f24c 5349 	movw	r3, #50505	; 0xc549
    cce0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cce4:	2200      	movs	r2, #0
    cce6:	701a      	strb	r2, [r3, #0]
    cce8:	f24c 5349 	movw	r3, #50505	; 0xc549
    ccec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccf0:	781b      	ldrb	r3, [r3, #0]
    ccf2:	461a      	mov	r2, r3
    ccf4:	f648 23a0 	movw	r3, #35488	; 0x8aa0
    ccf8:	f2c0 0301 	movt	r3, #1
    ccfc:	7859      	ldrb	r1, [r3, #1]
    ccfe:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cd02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd06:	5499      	strb	r1, [r3, r2]
    cd08:	4b43      	ldr	r3, [pc, #268]	; (ce18 <send_nav_ref+0x560>)
    cd0a:	781a      	ldrb	r2, [r3, #0]
    cd0c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cd10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd14:	781b      	ldrb	r3, [r3, #0]
    cd16:	4413      	add	r3, r2
    cd18:	b2da      	uxtb	r2, r3
    cd1a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cd1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd22:	701a      	strb	r2, [r3, #0]
    cd24:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cd28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd2c:	781a      	ldrb	r2, [r3, #0]
    cd2e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cd32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd36:	781b      	ldrb	r3, [r3, #0]
    cd38:	4413      	add	r3, r2
    cd3a:	b2da      	uxtb	r2, r3
    cd3c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cd40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd44:	701a      	strb	r2, [r3, #0]
    cd46:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd4e:	781b      	ldrb	r3, [r3, #0]
    cd50:	3301      	adds	r3, #1
    cd52:	b2da      	uxtb	r2, r3
    cd54:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd5c:	701a      	strb	r2, [r3, #0]
    cd5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd66:	781b      	ldrb	r3, [r3, #0]
    cd68:	2bff      	cmp	r3, #255	; 0xff
    cd6a:	d105      	bne.n	cd78 <send_nav_ref+0x4c0>
    cd6c:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd74:	2200      	movs	r2, #0
    cd76:	701a      	strb	r2, [r3, #0]
    cd78:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd80:	781b      	ldrb	r3, [r3, #0]
    cd82:	461a      	mov	r2, r3
    cd84:	f648 23a0 	movw	r3, #35488	; 0x8aa0
    cd88:	f2c0 0301 	movt	r3, #1
    cd8c:	7899      	ldrb	r1, [r3, #2]
    cd8e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cd92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd96:	5499      	strb	r1, [r3, r2]
    cd98:	4b20      	ldr	r3, [pc, #128]	; (ce1c <send_nav_ref+0x564>)
    cd9a:	781a      	ldrb	r2, [r3, #0]
    cd9c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cda0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cda4:	781b      	ldrb	r3, [r3, #0]
    cda6:	4413      	add	r3, r2
    cda8:	b2da      	uxtb	r2, r3
    cdaa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cdae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdb2:	701a      	strb	r2, [r3, #0]
    cdb4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cdb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdbc:	781a      	ldrb	r2, [r3, #0]
    cdbe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cdc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdc6:	781b      	ldrb	r3, [r3, #0]
    cdc8:	4413      	add	r3, r2
    cdca:	b2da      	uxtb	r2, r3
    cdcc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cdd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdd4:	701a      	strb	r2, [r3, #0]
    cdd6:	f24c 5349 	movw	r3, #50505	; 0xc549
    cdda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdde:	781b      	ldrb	r3, [r3, #0]
    cde0:	3301      	adds	r3, #1
    cde2:	b2da      	uxtb	r2, r3
    cde4:	f24c 5349 	movw	r3, #50505	; 0xc549
    cde8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdec:	701a      	strb	r2, [r3, #0]
    cdee:	f24c 5349 	movw	r3, #50505	; 0xc549
    cdf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdf6:	781b      	ldrb	r3, [r3, #0]
    cdf8:	2bff      	cmp	r3, #255	; 0xff
    cdfa:	d111      	bne.n	ce20 <send_nav_ref+0x568>
    cdfc:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce04:	2200      	movs	r2, #0
    ce06:	701a      	strb	r2, [r3, #0]
    ce08:	e00a      	b.n	ce20 <send_nav_ref+0x568>
    ce0a:	bf00      	nop
    ce0c:	00018a9d 	.word	0x00018a9d
    ce10:	00018a9e 	.word	0x00018a9e
    ce14:	00018a9f 	.word	0x00018a9f
    ce18:	00018aa1 	.word	0x00018aa1
    ce1c:	00018aa2 	.word	0x00018aa2
    ce20:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce28:	781b      	ldrb	r3, [r3, #0]
    ce2a:	461a      	mov	r2, r3
    ce2c:	f648 23a0 	movw	r3, #35488	; 0x8aa0
    ce30:	f2c0 0301 	movt	r3, #1
    ce34:	78d9      	ldrb	r1, [r3, #3]
    ce36:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ce3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce3e:	5499      	strb	r1, [r3, r2]
    ce40:	4b79      	ldr	r3, [pc, #484]	; (d028 <send_nav_ref+0x770>)
    ce42:	781a      	ldrb	r2, [r3, #0]
    ce44:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ce48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce4c:	781b      	ldrb	r3, [r3, #0]
    ce4e:	4413      	add	r3, r2
    ce50:	b2da      	uxtb	r2, r3
    ce52:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ce56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce5a:	701a      	strb	r2, [r3, #0]
    ce5c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ce60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce64:	781a      	ldrb	r2, [r3, #0]
    ce66:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ce6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce6e:	781b      	ldrb	r3, [r3, #0]
    ce70:	4413      	add	r3, r2
    ce72:	b2da      	uxtb	r2, r3
    ce74:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ce78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce7c:	701a      	strb	r2, [r3, #0]
    ce7e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce86:	781b      	ldrb	r3, [r3, #0]
    ce88:	3301      	adds	r3, #1
    ce8a:	b2da      	uxtb	r2, r3
    ce8c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce94:	701a      	strb	r2, [r3, #0]
    ce96:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce9e:	781b      	ldrb	r3, [r3, #0]
    cea0:	2bff      	cmp	r3, #255	; 0xff
    cea2:	d105      	bne.n	ceb0 <send_nav_ref+0x5f8>
    cea4:	f24c 5349 	movw	r3, #50505	; 0xc549
    cea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ceac:	2200      	movs	r2, #0
    ceae:	701a      	strb	r2, [r3, #0]
    ceb0:	f24c 5349 	movw	r3, #50505	; 0xc549
    ceb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ceb8:	781b      	ldrb	r3, [r3, #0]
    ceba:	461a      	mov	r2, r3
    cebc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cec0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cec4:	7819      	ldrb	r1, [r3, #0]
    cec6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ceca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cece:	5499      	strb	r1, [r3, r2]
    ced0:	f24c 5349 	movw	r3, #50505	; 0xc549
    ced4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ced8:	781b      	ldrb	r3, [r3, #0]
    ceda:	3301      	adds	r3, #1
    cedc:	b2da      	uxtb	r2, r3
    cede:	f24c 5349 	movw	r3, #50505	; 0xc549
    cee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cee6:	701a      	strb	r2, [r3, #0]
    cee8:	f24c 5349 	movw	r3, #50505	; 0xc549
    ceec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cef0:	781b      	ldrb	r3, [r3, #0]
    cef2:	2bff      	cmp	r3, #255	; 0xff
    cef4:	d105      	bne.n	cf02 <send_nav_ref+0x64a>
    cef6:	f24c 5349 	movw	r3, #50505	; 0xc549
    cefa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cefe:	2200      	movs	r2, #0
    cf00:	701a      	strb	r2, [r3, #0]
    cf02:	f24c 5349 	movw	r3, #50505	; 0xc549
    cf06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf0a:	781b      	ldrb	r3, [r3, #0]
    cf0c:	461a      	mov	r2, r3
    cf0e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cf12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf16:	7819      	ldrb	r1, [r3, #0]
    cf18:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cf1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf20:	5499      	strb	r1, [r3, r2]
    cf22:	f24c 5349 	movw	r3, #50505	; 0xc549
    cf26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf2a:	781b      	ldrb	r3, [r3, #0]
    cf2c:	3301      	adds	r3, #1
    cf2e:	b2da      	uxtb	r2, r3
    cf30:	f24c 5349 	movw	r3, #50505	; 0xc549
    cf34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf38:	701a      	strb	r2, [r3, #0]
    cf3a:	f24c 5349 	movw	r3, #50505	; 0xc549
    cf3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf42:	781b      	ldrb	r3, [r3, #0]
    cf44:	2bff      	cmp	r3, #255	; 0xff
    cf46:	d105      	bne.n	cf54 <send_nav_ref+0x69c>
    cf48:	f24c 5349 	movw	r3, #50505	; 0xc549
    cf4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf50:	2200      	movs	r2, #0
    cf52:	701a      	strb	r2, [r3, #0]
    cf54:	f242 0339 	movw	r3, #8249	; 0x2039
    cf58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf5c:	781b      	ldrb	r3, [r3, #0]
    cf5e:	b2db      	uxtb	r3, r3
    cf60:	f003 0310 	and.w	r3, r3, #16
    cf64:	2b00      	cmp	r3, #0
    cf66:	d15a      	bne.n	d01e <send_nav_ref+0x766>
    cf68:	f24c 534a 	movw	r3, #50506	; 0xc54a
    cf6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf70:	781b      	ldrb	r3, [r3, #0]
    cf72:	b2db      	uxtb	r3, r3
    cf74:	461a      	mov	r2, r3
    cf76:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cf7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf7e:	5c9a      	ldrb	r2, [r3, r2]
    cf80:	f24c 634b 	movw	r3, #50763	; 0xc64b
    cf84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf88:	701a      	strb	r2, [r3, #0]
    cf8a:	f24c 634c 	movw	r3, #50764	; 0xc64c
    cf8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf92:	2200      	movs	r2, #0
    cf94:	701a      	strb	r2, [r3, #0]
    cf96:	f24c 534a 	movw	r3, #50506	; 0xc54a
    cf9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf9e:	781b      	ldrb	r3, [r3, #0]
    cfa0:	b2db      	uxtb	r3, r3
    cfa2:	3301      	adds	r3, #1
    cfa4:	b2da      	uxtb	r2, r3
    cfa6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    cfaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfae:	701a      	strb	r2, [r3, #0]
    cfb0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    cfb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfb8:	781b      	ldrb	r3, [r3, #0]
    cfba:	b2db      	uxtb	r3, r3
    cfbc:	2bff      	cmp	r3, #255	; 0xff
    cfbe:	d105      	bne.n	cfcc <send_nav_ref+0x714>
    cfc0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    cfc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfc8:	2200      	movs	r2, #0
    cfca:	701a      	strb	r2, [r3, #0]
    cfcc:	f242 0338 	movw	r3, #8248	; 0x2038
    cfd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfd4:	f242 0238 	movw	r2, #8248	; 0x2038
    cfd8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    cfdc:	7812      	ldrb	r2, [r2, #0]
    cfde:	b2d2      	uxtb	r2, r2
    cfe0:	f042 0201 	orr.w	r2, r2, #1
    cfe4:	b2d2      	uxtb	r2, r2
    cfe6:	701a      	strb	r2, [r3, #0]
    cfe8:	f242 0339 	movw	r3, #8249	; 0x2039
    cfec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cff0:	f242 0239 	movw	r2, #8249	; 0x2039
    cff4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    cff8:	7812      	ldrb	r2, [r2, #0]
    cffa:	b2d2      	uxtb	r2, r2
    cffc:	f042 0210 	orr.w	r2, r2, #16
    d000:	b2d2      	uxtb	r2, r2
    d002:	701a      	strb	r2, [r3, #0]
    d004:	e00b      	b.n	d01e <send_nav_ref+0x766>
    d006:	f24c 5348 	movw	r3, #50504	; 0xc548
    d00a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d00e:	781b      	ldrb	r3, [r3, #0]
    d010:	3301      	adds	r3, #1
    d012:	b2da      	uxtb	r2, r3
    d014:	f24c 5348 	movw	r3, #50504	; 0xc548
    d018:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d01c:	701a      	strb	r2, [r3, #0]
  //vPrintString("S_13 reporting_task end!\n\r");
}
    d01e:	46bd      	mov	sp, r7
    d020:	f85d 7b04 	ldr.w	r7, [sp], #4
    d024:	4770      	bx	lr
    d026:	bf00      	nop
    d028:	00018aa3 	.word	0x00018aa3

0000d02c <inflight_calib_mode_update>:

/** \fn inline uint8_t inflight_calib_mode_update ( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t inflight_calib_mode_update ( void ) {
    d02c:	b480      	push	{r7}
    d02e:	b083      	sub	sp, #12
    d030:	af00      	add	r7, sp, #0
  ModeUpdate(inflight_calib_mode, IF_CALIB_MODE_OF_PULSE(from_fbw.channels[RADIO_CALIB]));
    d032:	f24c 6350 	movw	r3, #50768	; 0xc650
    d036:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d03a:	8a1b      	ldrh	r3, [r3, #16]
    d03c:	b21b      	sxth	r3, r3
    d03e:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    d042:	db0d      	blt.n	d060 <inflight_calib_mode_update+0x34>
    d044:	f24c 6350 	movw	r3, #50768	; 0xc650
    d048:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d04c:	8a1b      	ldrh	r3, [r3, #16]
    d04e:	b21a      	sxth	r2, r3
    d050:	f640 437f 	movw	r3, #3199	; 0xc7f
    d054:	429a      	cmp	r2, r3
    d056:	bfd4      	ite	le
    d058:	2300      	movle	r3, #0
    d05a:	2301      	movgt	r3, #1
    d05c:	b2db      	uxtb	r3, r3
    d05e:	e000      	b.n	d062 <inflight_calib_mode_update+0x36>
    d060:	2302      	movs	r3, #2
    d062:	71fb      	strb	r3, [r7, #7]
    d064:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    d068:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d06c:	781b      	ldrb	r3, [r3, #0]
    d06e:	79fa      	ldrb	r2, [r7, #7]
    d070:	429a      	cmp	r2, r3
    d072:	d007      	beq.n	d084 <inflight_calib_mode_update+0x58>
    d074:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    d078:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d07c:	79fa      	ldrb	r2, [r7, #7]
    d07e:	701a      	strb	r2, [r3, #0]
    d080:	2301      	movs	r3, #1
    d082:	e000      	b.n	d086 <inflight_calib_mode_update+0x5a>
    d084:	2300      	movs	r3, #0
}
    d086:	4618      	mov	r0, r3
    d088:	370c      	adds	r7, #12
    d08a:	46bd      	mov	sp, r7
    d08c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d090:	4770      	bx	lr
    d092:	bf00      	nop

0000d094 <radio_control_task>:


/** \fn inline void radio_control_task( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
void radio_control_task( void ) {
    d094:	b580      	push	{r7, lr}
    d096:	b082      	sub	sp, #8
    d098:	af00      	add	r7, sp, #0
  bool_t calib_mode_changed;
	//vPrintString("S_3 radio_control_task start! \n\r"); //SunnyBeike
    //add by wanbo
    link_fbw_receive_valid = 1;
    d09a:	f24c 637e 	movw	r3, #50814	; 0xc67e
    d09e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0a2:	2201      	movs	r2, #1
    d0a4:	701a      	strb	r2, [r3, #0]
  if (link_fbw_receive_valid) {
    d0a6:	f24c 637e 	movw	r3, #50814	; 0xc67e
    d0aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0ae:	781b      	ldrb	r3, [r3, #0]
    d0b0:	b2db      	uxtb	r3, r3
    d0b2:	2b00      	cmp	r3, #0
    d0b4:	f000 83c0 	beq.w	d838 <radio_control_task+0x7a4>
    uint8_t mode_changed = FALSE;
    d0b8:	2300      	movs	r3, #0
    d0ba:	71fb      	strb	r3, [r7, #7]
    copy_from_to_fbw();
    d0bc:	f7fa fa4c 	bl	7558 <copy_from_to_fbw>
    if ((bit_is_set(from_fbw.status, RADIO_REALLY_LOST) && (pprz_mode == PPRZ_MODE_AUTO1 || pprz_mode == PPRZ_MODE_MANUAL)) || too_far_from_home) {
    d0c0:	4b3e      	ldr	r3, [pc, #248]	; (d1bc <radio_control_task+0x128>)
    d0c2:	781b      	ldrb	r3, [r3, #0]
    d0c4:	b2db      	uxtb	r3, r3
    d0c6:	f003 0302 	and.w	r3, r3, #2
    d0ca:	2b00      	cmp	r3, #0
    d0cc:	d00d      	beq.n	d0ea <radio_control_task+0x56>
    d0ce:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d0d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0d6:	781b      	ldrb	r3, [r3, #0]
    d0d8:	2b01      	cmp	r3, #1
    d0da:	d00d      	beq.n	d0f8 <radio_control_task+0x64>
    d0dc:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d0e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0e4:	781b      	ldrb	r3, [r3, #0]
    d0e6:	2b00      	cmp	r3, #0
    d0e8:	d006      	beq.n	d0f8 <radio_control_task+0x64>
    d0ea:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
    d0ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0f2:	781b      	ldrb	r3, [r3, #0]
    d0f4:	2b00      	cmp	r3, #0
    d0f6:	d007      	beq.n	d108 <radio_control_task+0x74>
      pprz_mode = PPRZ_MODE_HOME;
    d0f8:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d0fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d100:	2203      	movs	r2, #3
    d102:	701a      	strb	r2, [r3, #0]
      mode_changed = TRUE;
    d104:	2301      	movs	r3, #1
    d106:	71fb      	strb	r3, [r7, #7]
    }
    // modified by wanbo
    if (bit_is_set(from_fbw.status, AVERAGED_CHANNELS_SENT)) 
    d108:	4b2c      	ldr	r3, [pc, #176]	; (d1bc <radio_control_task+0x128>)
    d10a:	781b      	ldrb	r3, [r3, #0]
    d10c:	b2db      	uxtb	r3, r3
    d10e:	f003 0304 	and.w	r3, r3, #4
    d112:	2b00      	cmp	r3, #0
    d114:	d023      	beq.n	d15e <radio_control_task+0xca>
    {
      bool_t pprz_mode_changed = pprz_mode_update();
    d116:	f7fa f8f9 	bl	730c <pprz_mode_update>
    d11a:	4603      	mov	r3, r0
    d11c:	71bb      	strb	r3, [r7, #6]
      mode_changed |= pprz_mode_changed;
    d11e:	79fa      	ldrb	r2, [r7, #7]
    d120:	79bb      	ldrb	r3, [r7, #6]
    d122:	4313      	orrs	r3, r2
    d124:	71fb      	strb	r3, [r7, #7]
#ifdef RADIO_LLS
      mode_changed |= ir_estim_mode_update();
    d126:	f7fa f93d 	bl	73a4 <ir_estim_mode_update>
    d12a:	4603      	mov	r3, r0
    d12c:	461a      	mov	r2, r3
    d12e:	79fb      	ldrb	r3, [r7, #7]
    d130:	4313      	orrs	r3, r2
    d132:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef RADIO_CALIB
      calib_mode_changed = inflight_calib_mode_update();
    d134:	f7ff ff7a 	bl	d02c <inflight_calib_mode_update>
    d138:	4603      	mov	r3, r0
    d13a:	717b      	strb	r3, [r7, #5]
      inflight_calib(calib_mode_changed || pprz_mode_changed);
    d13c:	797b      	ldrb	r3, [r7, #5]
    d13e:	2b00      	cmp	r3, #0
    d140:	d102      	bne.n	d148 <radio_control_task+0xb4>
    d142:	79bb      	ldrb	r3, [r7, #6]
    d144:	2b00      	cmp	r3, #0
    d146:	d001      	beq.n	d14c <radio_control_task+0xb8>
    d148:	2301      	movs	r3, #1
    d14a:	e000      	b.n	d14e <radio_control_task+0xba>
    d14c:	2300      	movs	r3, #0
    d14e:	b2db      	uxtb	r3, r3
    d150:	4618      	mov	r0, r3
    d152:	f008 fba1 	bl	15898 <inflight_calib>
      mode_changed |= calib_mode_changed;
    d156:	79fa      	ldrb	r2, [r7, #7]
    d158:	797b      	ldrb	r3, [r7, #5]
    d15a:	4313      	orrs	r3, r2
    d15c:	71fb      	strb	r3, [r7, #7]
#endif
    }
    mode_changed |= mcu1_status_update();
    d15e:	f7fa f949 	bl	73f4 <mcu1_status_update>
    d162:	4603      	mov	r3, r0
    d164:	461a      	mov	r2, r3
    d166:	79fb      	ldrb	r3, [r7, #7]
    d168:	4313      	orrs	r3, r2
    d16a:	71fb      	strb	r3, [r7, #7]
    // add by wanbo
    mode_changed = 1;
    d16c:	2301      	movs	r3, #1
    d16e:	71fb      	strb	r3, [r7, #7]
    if ( mode_changed )
    d170:	79fb      	ldrb	r3, [r7, #7]
    d172:	2b00      	cmp	r3, #0
    d174:	f000 82bd 	beq.w	d6f2 <radio_control_task+0x65e>
      DOWNLINK_SEND_PPRZ_MODE(&pprz_mode, &vertical_mode, &inflight_calib_mode, &mcu1_status, &ir_estim_mode);
    d178:	f24c 5349 	movw	r3, #50505	; 0xc549
    d17c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d180:	781a      	ldrb	r2, [r3, #0]
    d182:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d18a:	781b      	ldrb	r3, [r3, #0]
    d18c:	b2db      	uxtb	r3, r3
    d18e:	429a      	cmp	r2, r3
    d190:	d316      	bcc.n	d1c0 <radio_control_task+0x12c>
    d192:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d196:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d19a:	781b      	ldrb	r3, [r3, #0]
    d19c:	b2db      	uxtb	r3, r3
    d19e:	461a      	mov	r2, r3
    d1a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    d1a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1a8:	781b      	ldrb	r3, [r3, #0]
    d1aa:	1ad3      	subs	r3, r2, r3
    d1ac:	33ff      	adds	r3, #255	; 0xff
    d1ae:	2b09      	cmp	r3, #9
    d1b0:	bfd4      	ite	le
    d1b2:	2300      	movle	r3, #0
    d1b4:	2301      	movgt	r3, #1
    d1b6:	b2db      	uxtb	r3, r3
    d1b8:	e014      	b.n	d1e4 <radio_control_task+0x150>
    d1ba:	bf00      	nop
    d1bc:	2004c663 	.word	0x2004c663
    d1c0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d1c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1c8:	781b      	ldrb	r3, [r3, #0]
    d1ca:	b2db      	uxtb	r3, r3
    d1cc:	461a      	mov	r2, r3
    d1ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    d1d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1d6:	781b      	ldrb	r3, [r3, #0]
    d1d8:	1ad3      	subs	r3, r2, r3
    d1da:	2b09      	cmp	r3, #9
    d1dc:	bfd4      	ite	le
    d1de:	2300      	movle	r3, #0
    d1e0:	2301      	movgt	r3, #1
    d1e2:	b2db      	uxtb	r3, r3
    d1e4:	2b00      	cmp	r3, #0
    d1e6:	f000 8278 	beq.w	d6da <radio_control_task+0x646>
    d1ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    d1ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1f2:	781b      	ldrb	r3, [r3, #0]
    d1f4:	461a      	mov	r2, r3
    d1f6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d1fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1fe:	2105      	movs	r1, #5
    d200:	5499      	strb	r1, [r3, r2]
    d202:	f24c 5349 	movw	r3, #50505	; 0xc549
    d206:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d20a:	781b      	ldrb	r3, [r3, #0]
    d20c:	3301      	adds	r3, #1
    d20e:	b2da      	uxtb	r2, r3
    d210:	f24c 5349 	movw	r3, #50505	; 0xc549
    d214:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d218:	701a      	strb	r2, [r3, #0]
    d21a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d21e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d222:	781b      	ldrb	r3, [r3, #0]
    d224:	2bff      	cmp	r3, #255	; 0xff
    d226:	d105      	bne.n	d234 <radio_control_task+0x1a0>
    d228:	f24c 5349 	movw	r3, #50505	; 0xc549
    d22c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d230:	2200      	movs	r2, #0
    d232:	701a      	strb	r2, [r3, #0]
    d234:	f24c 5349 	movw	r3, #50505	; 0xc549
    d238:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d23c:	781b      	ldrb	r3, [r3, #0]
    d23e:	461a      	mov	r2, r3
    d240:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d244:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d248:	210b      	movs	r1, #11
    d24a:	5499      	strb	r1, [r3, r2]
    d24c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d250:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d254:	781b      	ldrb	r3, [r3, #0]
    d256:	3301      	adds	r3, #1
    d258:	b2da      	uxtb	r2, r3
    d25a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d25e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d262:	701a      	strb	r2, [r3, #0]
    d264:	f24c 5349 	movw	r3, #50505	; 0xc549
    d268:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d26c:	781b      	ldrb	r3, [r3, #0]
    d26e:	2bff      	cmp	r3, #255	; 0xff
    d270:	d105      	bne.n	d27e <radio_control_task+0x1ea>
    d272:	f24c 5349 	movw	r3, #50505	; 0xc549
    d276:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d27a:	2200      	movs	r2, #0
    d27c:	701a      	strb	r2, [r3, #0]
    d27e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d282:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d286:	220b      	movs	r2, #11
    d288:	701a      	strb	r2, [r3, #0]
    d28a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d28e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d292:	220b      	movs	r2, #11
    d294:	701a      	strb	r2, [r3, #0]
    d296:	f24c 5349 	movw	r3, #50505	; 0xc549
    d29a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d29e:	781b      	ldrb	r3, [r3, #0]
    d2a0:	461a      	mov	r2, r3
    d2a2:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d2a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2aa:	7819      	ldrb	r1, [r3, #0]
    d2ac:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d2b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2b4:	5499      	strb	r1, [r3, r2]
    d2b6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d2ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2be:	781a      	ldrb	r2, [r3, #0]
    d2c0:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d2c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2c8:	781b      	ldrb	r3, [r3, #0]
    d2ca:	4413      	add	r3, r2
    d2cc:	b2da      	uxtb	r2, r3
    d2ce:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d2d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2d6:	701a      	strb	r2, [r3, #0]
    d2d8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d2dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2e0:	781a      	ldrb	r2, [r3, #0]
    d2e2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d2e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2ea:	781b      	ldrb	r3, [r3, #0]
    d2ec:	4413      	add	r3, r2
    d2ee:	b2da      	uxtb	r2, r3
    d2f0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d2f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2f8:	701a      	strb	r2, [r3, #0]
    d2fa:	f24c 5349 	movw	r3, #50505	; 0xc549
    d2fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d302:	781b      	ldrb	r3, [r3, #0]
    d304:	3301      	adds	r3, #1
    d306:	b2da      	uxtb	r2, r3
    d308:	f24c 5349 	movw	r3, #50505	; 0xc549
    d30c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d310:	701a      	strb	r2, [r3, #0]
    d312:	f24c 5349 	movw	r3, #50505	; 0xc549
    d316:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d31a:	781b      	ldrb	r3, [r3, #0]
    d31c:	2bff      	cmp	r3, #255	; 0xff
    d31e:	d105      	bne.n	d32c <radio_control_task+0x298>
    d320:	f24c 5349 	movw	r3, #50505	; 0xc549
    d324:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d328:	2200      	movs	r2, #0
    d32a:	701a      	strb	r2, [r3, #0]
    d32c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d330:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d334:	781b      	ldrb	r3, [r3, #0]
    d336:	461a      	mov	r2, r3
    d338:	f24c 532d 	movw	r3, #50477	; 0xc52d
    d33c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d340:	7819      	ldrb	r1, [r3, #0]
    d342:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d346:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d34a:	5499      	strb	r1, [r3, r2]
    d34c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d350:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d354:	781a      	ldrb	r2, [r3, #0]
    d356:	f24c 532d 	movw	r3, #50477	; 0xc52d
    d35a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d35e:	781b      	ldrb	r3, [r3, #0]
    d360:	4413      	add	r3, r2
    d362:	b2da      	uxtb	r2, r3
    d364:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d368:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d36c:	701a      	strb	r2, [r3, #0]
    d36e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d376:	781a      	ldrb	r2, [r3, #0]
    d378:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d37c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d380:	781b      	ldrb	r3, [r3, #0]
    d382:	4413      	add	r3, r2
    d384:	b2da      	uxtb	r2, r3
    d386:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d38a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d38e:	701a      	strb	r2, [r3, #0]
    d390:	f24c 5349 	movw	r3, #50505	; 0xc549
    d394:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d398:	781b      	ldrb	r3, [r3, #0]
    d39a:	3301      	adds	r3, #1
    d39c:	b2da      	uxtb	r2, r3
    d39e:	f24c 5349 	movw	r3, #50505	; 0xc549
    d3a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3a6:	701a      	strb	r2, [r3, #0]
    d3a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    d3ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3b0:	781b      	ldrb	r3, [r3, #0]
    d3b2:	2bff      	cmp	r3, #255	; 0xff
    d3b4:	d105      	bne.n	d3c2 <radio_control_task+0x32e>
    d3b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    d3ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3be:	2200      	movs	r2, #0
    d3c0:	701a      	strb	r2, [r3, #0]
    d3c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    d3c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3ca:	781b      	ldrb	r3, [r3, #0]
    d3cc:	461a      	mov	r2, r3
    d3ce:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    d3d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3d6:	7819      	ldrb	r1, [r3, #0]
    d3d8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d3dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3e0:	5499      	strb	r1, [r3, r2]
    d3e2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d3e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3ea:	781a      	ldrb	r2, [r3, #0]
    d3ec:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    d3f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3f4:	781b      	ldrb	r3, [r3, #0]
    d3f6:	4413      	add	r3, r2
    d3f8:	b2da      	uxtb	r2, r3
    d3fa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d3fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d402:	701a      	strb	r2, [r3, #0]
    d404:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d408:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d40c:	781a      	ldrb	r2, [r3, #0]
    d40e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d412:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d416:	781b      	ldrb	r3, [r3, #0]
    d418:	4413      	add	r3, r2
    d41a:	b2da      	uxtb	r2, r3
    d41c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d420:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d424:	701a      	strb	r2, [r3, #0]
    d426:	f24c 5349 	movw	r3, #50505	; 0xc549
    d42a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d42e:	781b      	ldrb	r3, [r3, #0]
    d430:	3301      	adds	r3, #1
    d432:	b2da      	uxtb	r2, r3
    d434:	f24c 5349 	movw	r3, #50505	; 0xc549
    d438:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d43c:	701a      	strb	r2, [r3, #0]
    d43e:	f24c 5349 	movw	r3, #50505	; 0xc549
    d442:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d446:	781b      	ldrb	r3, [r3, #0]
    d448:	2bff      	cmp	r3, #255	; 0xff
    d44a:	d105      	bne.n	d458 <radio_control_task+0x3c4>
    d44c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d450:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d454:	2200      	movs	r2, #0
    d456:	701a      	strb	r2, [r3, #0]
    d458:	f24c 5349 	movw	r3, #50505	; 0xc549
    d45c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d460:	781b      	ldrb	r3, [r3, #0]
    d462:	461a      	mov	r2, r3
    d464:	f24c 5333 	movw	r3, #50483	; 0xc533
    d468:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d46c:	7819      	ldrb	r1, [r3, #0]
    d46e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d472:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d476:	5499      	strb	r1, [r3, r2]
    d478:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d47c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d480:	781a      	ldrb	r2, [r3, #0]
    d482:	f24c 5333 	movw	r3, #50483	; 0xc533
    d486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d48a:	781b      	ldrb	r3, [r3, #0]
    d48c:	4413      	add	r3, r2
    d48e:	b2da      	uxtb	r2, r3
    d490:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d494:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d498:	701a      	strb	r2, [r3, #0]
    d49a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d49e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4a2:	781a      	ldrb	r2, [r3, #0]
    d4a4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d4a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4ac:	781b      	ldrb	r3, [r3, #0]
    d4ae:	4413      	add	r3, r2
    d4b0:	b2da      	uxtb	r2, r3
    d4b2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d4b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4ba:	701a      	strb	r2, [r3, #0]
    d4bc:	f24c 5349 	movw	r3, #50505	; 0xc549
    d4c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4c4:	781b      	ldrb	r3, [r3, #0]
    d4c6:	3301      	adds	r3, #1
    d4c8:	b2da      	uxtb	r2, r3
    d4ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    d4ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4d2:	701a      	strb	r2, [r3, #0]
    d4d4:	f24c 5349 	movw	r3, #50505	; 0xc549
    d4d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4dc:	781b      	ldrb	r3, [r3, #0]
    d4de:	2bff      	cmp	r3, #255	; 0xff
    d4e0:	d105      	bne.n	d4ee <radio_control_task+0x45a>
    d4e2:	f24c 5349 	movw	r3, #50505	; 0xc549
    d4e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4ea:	2200      	movs	r2, #0
    d4ec:	701a      	strb	r2, [r3, #0]
    d4ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    d4f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4f6:	781b      	ldrb	r3, [r3, #0]
    d4f8:	461a      	mov	r2, r3
    d4fa:	f240 533c 	movw	r3, #1340	; 0x53c
    d4fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d502:	7819      	ldrb	r1, [r3, #0]
    d504:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d508:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d50c:	5499      	strb	r1, [r3, r2]
    d50e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d512:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d516:	781a      	ldrb	r2, [r3, #0]
    d518:	f240 533c 	movw	r3, #1340	; 0x53c
    d51c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d520:	781b      	ldrb	r3, [r3, #0]
    d522:	4413      	add	r3, r2
    d524:	b2da      	uxtb	r2, r3
    d526:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d52a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d52e:	701a      	strb	r2, [r3, #0]
    d530:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d538:	781a      	ldrb	r2, [r3, #0]
    d53a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d53e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d542:	781b      	ldrb	r3, [r3, #0]
    d544:	4413      	add	r3, r2
    d546:	b2da      	uxtb	r2, r3
    d548:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d54c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d550:	701a      	strb	r2, [r3, #0]
    d552:	f24c 5349 	movw	r3, #50505	; 0xc549
    d556:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d55a:	781b      	ldrb	r3, [r3, #0]
    d55c:	3301      	adds	r3, #1
    d55e:	b2da      	uxtb	r2, r3
    d560:	f24c 5349 	movw	r3, #50505	; 0xc549
    d564:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d568:	701a      	strb	r2, [r3, #0]
    d56a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d56e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d572:	781b      	ldrb	r3, [r3, #0]
    d574:	2bff      	cmp	r3, #255	; 0xff
    d576:	d105      	bne.n	d584 <radio_control_task+0x4f0>
    d578:	f24c 5349 	movw	r3, #50505	; 0xc549
    d57c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d580:	2200      	movs	r2, #0
    d582:	701a      	strb	r2, [r3, #0]
    d584:	f24c 5349 	movw	r3, #50505	; 0xc549
    d588:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d58c:	781b      	ldrb	r3, [r3, #0]
    d58e:	461a      	mov	r2, r3
    d590:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d594:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d598:	7819      	ldrb	r1, [r3, #0]
    d59a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d59e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5a2:	5499      	strb	r1, [r3, r2]
    d5a4:	f24c 5349 	movw	r3, #50505	; 0xc549
    d5a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5ac:	781b      	ldrb	r3, [r3, #0]
    d5ae:	3301      	adds	r3, #1
    d5b0:	b2da      	uxtb	r2, r3
    d5b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    d5b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5ba:	701a      	strb	r2, [r3, #0]
    d5bc:	f24c 5349 	movw	r3, #50505	; 0xc549
    d5c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5c4:	781b      	ldrb	r3, [r3, #0]
    d5c6:	2bff      	cmp	r3, #255	; 0xff
    d5c8:	d105      	bne.n	d5d6 <radio_control_task+0x542>
    d5ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    d5ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5d2:	2200      	movs	r2, #0
    d5d4:	701a      	strb	r2, [r3, #0]
    d5d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    d5da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5de:	781b      	ldrb	r3, [r3, #0]
    d5e0:	461a      	mov	r2, r3
    d5e2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d5e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5ea:	7819      	ldrb	r1, [r3, #0]
    d5ec:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d5f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5f4:	5499      	strb	r1, [r3, r2]
    d5f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    d5fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5fe:	781b      	ldrb	r3, [r3, #0]
    d600:	3301      	adds	r3, #1
    d602:	b2da      	uxtb	r2, r3
    d604:	f24c 5349 	movw	r3, #50505	; 0xc549
    d608:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d60c:	701a      	strb	r2, [r3, #0]
    d60e:	f24c 5349 	movw	r3, #50505	; 0xc549
    d612:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d616:	781b      	ldrb	r3, [r3, #0]
    d618:	2bff      	cmp	r3, #255	; 0xff
    d61a:	d105      	bne.n	d628 <radio_control_task+0x594>
    d61c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d620:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d624:	2200      	movs	r2, #0
    d626:	701a      	strb	r2, [r3, #0]
    d628:	f242 0339 	movw	r3, #8249	; 0x2039
    d62c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d630:	781b      	ldrb	r3, [r3, #0]
    d632:	b2db      	uxtb	r3, r3
    d634:	f003 0310 	and.w	r3, r3, #16
    d638:	2b00      	cmp	r3, #0
    d63a:	d15a      	bne.n	d6f2 <radio_control_task+0x65e>
    d63c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d640:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d644:	781b      	ldrb	r3, [r3, #0]
    d646:	b2db      	uxtb	r3, r3
    d648:	461a      	mov	r2, r3
    d64a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d64e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d652:	5c9a      	ldrb	r2, [r3, r2]
    d654:	f24c 634b 	movw	r3, #50763	; 0xc64b
    d658:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d65c:	701a      	strb	r2, [r3, #0]
    d65e:	f24c 634c 	movw	r3, #50764	; 0xc64c
    d662:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d666:	2200      	movs	r2, #0
    d668:	701a      	strb	r2, [r3, #0]
    d66a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d66e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d672:	781b      	ldrb	r3, [r3, #0]
    d674:	b2db      	uxtb	r3, r3
    d676:	3301      	adds	r3, #1
    d678:	b2da      	uxtb	r2, r3
    d67a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d67e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d682:	701a      	strb	r2, [r3, #0]
    d684:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d688:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d68c:	781b      	ldrb	r3, [r3, #0]
    d68e:	b2db      	uxtb	r3, r3
    d690:	2bff      	cmp	r3, #255	; 0xff
    d692:	d105      	bne.n	d6a0 <radio_control_task+0x60c>
    d694:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d698:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d69c:	2200      	movs	r2, #0
    d69e:	701a      	strb	r2, [r3, #0]
    d6a0:	f242 0338 	movw	r3, #8248	; 0x2038
    d6a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6a8:	f242 0238 	movw	r2, #8248	; 0x2038
    d6ac:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d6b0:	7812      	ldrb	r2, [r2, #0]
    d6b2:	b2d2      	uxtb	r2, r2
    d6b4:	f042 0201 	orr.w	r2, r2, #1
    d6b8:	b2d2      	uxtb	r2, r2
    d6ba:	701a      	strb	r2, [r3, #0]
    d6bc:	f242 0339 	movw	r3, #8249	; 0x2039
    d6c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6c4:	f242 0239 	movw	r2, #8249	; 0x2039
    d6c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d6cc:	7812      	ldrb	r2, [r2, #0]
    d6ce:	b2d2      	uxtb	r2, r2
    d6d0:	f042 0210 	orr.w	r2, r2, #16
    d6d4:	b2d2      	uxtb	r2, r2
    d6d6:	701a      	strb	r2, [r3, #0]
    d6d8:	e00b      	b.n	d6f2 <radio_control_task+0x65e>
    d6da:	f24c 5348 	movw	r3, #50504	; 0xc548
    d6de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6e2:	781b      	ldrb	r3, [r3, #0]
    d6e4:	3301      	adds	r3, #1
    d6e6:	b2da      	uxtb	r2, r3
    d6e8:	f24c 5348 	movw	r3, #50504	; 0xc548
    d6ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6f0:	701a      	strb	r2, [r3, #0]
      
    // add by wanbo
    //if (pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_roll = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_ROLL], 0., -0.6);
    d6f2:	f24c 6350 	movw	r3, #50768	; 0xc650
    d6f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6fa:	885b      	ldrh	r3, [r3, #2]
    d6fc:	b21b      	sxth	r3, r3
    d6fe:	4618      	mov	r0, r3
    d700:	f00a fe82 	bl	18408 <__aeabi_i2f>
    d704:	4603      	mov	r3, r0
    d706:	4618      	mov	r0, r3
    d708:	f04f 0100 	mov.w	r1, #0
    d70c:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d710:	f00a ff82 	bl	18618 <__aeabi_fdiv>
    d714:	4603      	mov	r3, r0
    d716:	4618      	mov	r0, r3
    d718:	f00a fa36 	bl	17b88 <__aeabi_f2d>
    d71c:	4602      	mov	r2, r0
    d71e:	460b      	mov	r3, r1
    d720:	4610      	mov	r0, r2
    d722:	4619      	mov	r1, r3
    d724:	a346      	add	r3, pc, #280	; (adr r3, d840 <radio_control_task+0x7ac>)
    d726:	e9d3 2300 	ldrd	r2, r3, [r3]
    d72a:	f00a fa81 	bl	17c30 <__aeabi_dmul>
    d72e:	4602      	mov	r2, r0
    d730:	460b      	mov	r3, r1
    d732:	4610      	mov	r0, r2
    d734:	4619      	mov	r1, r3
    d736:	f04f 0200 	mov.w	r2, #0
    d73a:	f04f 0300 	mov.w	r3, #0
    d73e:	f00a f8c5 	bl	178cc <__adddf3>
    d742:	4602      	mov	r2, r0
    d744:	460b      	mov	r3, r1
    d746:	4610      	mov	r0, r2
    d748:	4619      	mov	r1, r3
    d74a:	f00a fd53 	bl	181f4 <__aeabi_d2f>
    d74e:	4602      	mov	r2, r0
    d750:	f64c 0374 	movw	r3, #51316	; 0xc874
    d754:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d758:	601a      	str	r2, [r3, #0]
      desired_pitch = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_PITCH], 0., 0.5);
    d75a:	f24c 6350 	movw	r3, #50768	; 0xc650
    d75e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d762:	889b      	ldrh	r3, [r3, #4]
    d764:	b21b      	sxth	r3, r3
    d766:	4618      	mov	r0, r3
    d768:	f00a fe4e 	bl	18408 <__aeabi_i2f>
    d76c:	4603      	mov	r3, r0
    d76e:	4618      	mov	r0, r3
    d770:	f04f 0100 	mov.w	r1, #0
    d774:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d778:	f00a ff4e 	bl	18618 <__aeabi_fdiv>
    d77c:	4603      	mov	r3, r0
    d77e:	4618      	mov	r0, r3
    d780:	f00a fa02 	bl	17b88 <__aeabi_f2d>
    d784:	4602      	mov	r2, r0
    d786:	460b      	mov	r3, r1
    d788:	4610      	mov	r0, r2
    d78a:	4619      	mov	r1, r3
    d78c:	f04f 0200 	mov.w	r2, #0
    d790:	f04f 0300 	mov.w	r3, #0
    d794:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
    d798:	f00a fa4a 	bl	17c30 <__aeabi_dmul>
    d79c:	4602      	mov	r2, r0
    d79e:	460b      	mov	r3, r1
    d7a0:	4610      	mov	r0, r2
    d7a2:	4619      	mov	r1, r3
    d7a4:	f04f 0200 	mov.w	r2, #0
    d7a8:	f04f 0300 	mov.w	r3, #0
    d7ac:	f00a f88e 	bl	178cc <__adddf3>
    d7b0:	4602      	mov	r2, r0
    d7b2:	460b      	mov	r3, r1
    d7b4:	4610      	mov	r0, r2
    d7b6:	4619      	mov	r1, r3
    d7b8:	f00a fd1c 	bl	181f4 <__aeabi_d2f>
    d7bc:	4602      	mov	r2, r0
    d7be:	f64c 0378 	movw	r3, #51320	; 0xc878
    d7c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7c6:	601a      	str	r2, [r3, #0]
    } // else asynchronously set by course_pid_run()

    // add by wanbo
   // if (pprz_mode == PPRZ_MODE_MANUAL || pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_gaz = from_fbw.channels[RADIO_THROTTLE];
    d7c8:	f24c 6350 	movw	r3, #50768	; 0xc650
    d7cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7d0:	881a      	ldrh	r2, [r3, #0]
    d7d2:	f64c 037c 	movw	r3, #51324	; 0xc87c
    d7d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7da:	801a      	strh	r2, [r3, #0]
      pitch_pgain = PITCH_PGAIN * ( 1 - 1. / 3. * from_fbw.channels[RADIO_THROTTLE] / MAX_PPRZ);
#endif /* ANTON_MAGICAL_MISTERY_GAINS */
    }
    // else asynchronously set by climb_pid_run();

    mcu1_ppm_cpt = from_fbw.ppm_cpt;
    d7dc:	f24c 6350 	movw	r3, #50768	; 0xc650
    d7e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7e4:	7c9a      	ldrb	r2, [r3, #18]
    d7e6:	f24c 5334 	movw	r3, #50484	; 0xc534
    d7ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7ee:	701a      	strb	r2, [r3, #0]
    vsupply = from_fbw.vsupply;
    d7f0:	f24c 6350 	movw	r3, #50768	; 0xc650
    d7f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7f8:	7d5a      	ldrb	r2, [r3, #21]
    d7fa:	f24c 5332 	movw	r3, #50482	; 0xc532
    d7fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d802:	701a      	strb	r2, [r3, #0]

    events_update();
    d804:	f7f9 fe26 	bl	7454 <events_update>

    // add by wanbo
    //if (!estimator_flight_time) 
    {
      ground_calibrate();
    d808:	f7f8 fc26 	bl	6058 <ground_calibrate>
      if (pprz_mode == PPRZ_MODE_AUTO2 && from_fbw.channels[RADIO_THROTTLE] > GAZ_THRESHOLD_TAKEOFF) {
    d80c:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d810:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d814:	781b      	ldrb	r3, [r3, #0]
    d816:	2b02      	cmp	r3, #2
    d818:	d10e      	bne.n	d838 <radio_control_task+0x7a4>
    d81a:	f24c 6350 	movw	r3, #50768	; 0xc650
    d81e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d822:	881b      	ldrh	r3, [r3, #0]
    d824:	b21b      	sxth	r3, r3
    d826:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
    d82a:	dd05      	ble.n	d838 <radio_control_task+0x7a4>
	launch = TRUE;
    d82c:	f24c 5340 	movw	r3, #50496	; 0xc540
    d830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d834:	2201      	movs	r2, #1
    d836:	701a      	strb	r2, [r3, #0]
      }
    }
  }

	//vPrintString("S_3 radio_control_task end! \n\r"); //SunnyBeike
}
    d838:	3708      	adds	r7, #8
    d83a:	46bd      	mov	sp, r7
    d83c:	bd80      	pop	{r7, pc}
    d83e:	bf00      	nop
    d840:	33333333 	.word	0x33333333
    d844:	bfe33333 	.word	0xbfe33333

0000d848 <navigation_update>:

/** \fn void navigation_task( void )
 *  \brief Compute desired_course
 */
void navigation_update( void ) {
    d848:	b580      	push	{r7, lr}
    d84a:	af00      	add	r7, sp, #0

  /* Default to keep compatibility with previous behaviour */
  //vPrintString("S_17 Navigation task start!\n\r");
  lateral_mode = LATERAL_MODE_COURSE;
    d84c:	f24c 532e 	movw	r3, #50478	; 0xc52e
    d850:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d854:	2203      	movs	r2, #3
    d856:	701a      	strb	r2, [r3, #0]
  if (pprz_mode == PPRZ_MODE_HOME)
    d858:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d85c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d860:	781b      	ldrb	r3, [r3, #0]
    d862:	2b03      	cmp	r3, #3
    d864:	d102      	bne.n	d86c <navigation_update+0x24>
    nav_home();
    d866:	f007 fa9b 	bl	14da0 <nav_home>
    d86a:	e001      	b.n	d870 <navigation_update+0x28>
  else
    nav_update();
    d86c:	f007 fabe 	bl	14dec <nav_update>
}
    d870:	bd80      	pop	{r7, pc}
    d872:	bf00      	nop

0000d874 <send_nav_values>:

void send_nav_values(void){
    d874:	b480      	push	{r7}
    d876:	af00      	add	r7, sp, #0
  
  DOWNLINK_SEND_NAVIGATION(&nav_block, &nav_stage, &estimator_x, &estimator_y, &desired_course, &dist2_to_wp, &course_pgain, &dist2_to_home);
    d878:	f24c 5349 	movw	r3, #50505	; 0xc549
    d87c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d880:	781a      	ldrb	r2, [r3, #0]
    d882:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d886:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d88a:	781b      	ldrb	r3, [r3, #0]
    d88c:	b2db      	uxtb	r3, r3
    d88e:	429a      	cmp	r2, r3
    d890:	d313      	bcc.n	d8ba <send_nav_values+0x46>
    d892:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d896:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d89a:	781b      	ldrb	r3, [r3, #0]
    d89c:	b2db      	uxtb	r3, r3
    d89e:	461a      	mov	r2, r3
    d8a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    d8a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8a8:	781b      	ldrb	r3, [r3, #0]
    d8aa:	1ad3      	subs	r3, r2, r3
    d8ac:	33ff      	adds	r3, #255	; 0xff
    d8ae:	2b1e      	cmp	r3, #30
    d8b0:	bfd4      	ite	le
    d8b2:	2300      	movle	r3, #0
    d8b4:	2301      	movgt	r3, #1
    d8b6:	b2db      	uxtb	r3, r3
    d8b8:	e011      	b.n	d8de <send_nav_values+0x6a>
    d8ba:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d8be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8c2:	781b      	ldrb	r3, [r3, #0]
    d8c4:	b2db      	uxtb	r3, r3
    d8c6:	461a      	mov	r2, r3
    d8c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    d8cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8d0:	781b      	ldrb	r3, [r3, #0]
    d8d2:	1ad3      	subs	r3, r2, r3
    d8d4:	2b1e      	cmp	r3, #30
    d8d6:	bfd4      	ite	le
    d8d8:	2300      	movle	r3, #0
    d8da:	2301      	movgt	r3, #1
    d8dc:	b2db      	uxtb	r3, r3
    d8de:	2b00      	cmp	r3, #0
    d8e0:	f001 8094 	beq.w	ea0c <send_nav_values+0x1198>
    d8e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    d8e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8ec:	781b      	ldrb	r3, [r3, #0]
    d8ee:	461a      	mov	r2, r3
    d8f0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d8f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8f8:	2105      	movs	r1, #5
    d8fa:	5499      	strb	r1, [r3, r2]
    d8fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    d900:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d904:	781b      	ldrb	r3, [r3, #0]
    d906:	3301      	adds	r3, #1
    d908:	b2da      	uxtb	r2, r3
    d90a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d90e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d912:	701a      	strb	r2, [r3, #0]
    d914:	f24c 5349 	movw	r3, #50505	; 0xc549
    d918:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d91c:	781b      	ldrb	r3, [r3, #0]
    d91e:	2bff      	cmp	r3, #255	; 0xff
    d920:	d105      	bne.n	d92e <send_nav_values+0xba>
    d922:	f24c 5349 	movw	r3, #50505	; 0xc549
    d926:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d92a:	2200      	movs	r2, #0
    d92c:	701a      	strb	r2, [r3, #0]
    d92e:	f24c 5349 	movw	r3, #50505	; 0xc549
    d932:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d936:	781b      	ldrb	r3, [r3, #0]
    d938:	461a      	mov	r2, r3
    d93a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d93e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d942:	210a      	movs	r1, #10
    d944:	5499      	strb	r1, [r3, r2]
    d946:	f24c 5349 	movw	r3, #50505	; 0xc549
    d94a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d94e:	781b      	ldrb	r3, [r3, #0]
    d950:	3301      	adds	r3, #1
    d952:	b2da      	uxtb	r2, r3
    d954:	f24c 5349 	movw	r3, #50505	; 0xc549
    d958:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d95c:	701a      	strb	r2, [r3, #0]
    d95e:	f24c 5349 	movw	r3, #50505	; 0xc549
    d962:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d966:	781b      	ldrb	r3, [r3, #0]
    d968:	2bff      	cmp	r3, #255	; 0xff
    d96a:	d105      	bne.n	d978 <send_nav_values+0x104>
    d96c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d970:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d974:	2200      	movs	r2, #0
    d976:	701a      	strb	r2, [r3, #0]
    d978:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d97c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d980:	220a      	movs	r2, #10
    d982:	701a      	strb	r2, [r3, #0]
    d984:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d988:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d98c:	220a      	movs	r2, #10
    d98e:	701a      	strb	r2, [r3, #0]
    d990:	f24c 5349 	movw	r3, #50505	; 0xc549
    d994:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d998:	781b      	ldrb	r3, [r3, #0]
    d99a:	461a      	mov	r2, r3
    d99c:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
    d9a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9a4:	7819      	ldrb	r1, [r3, #0]
    d9a6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d9aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9ae:	5499      	strb	r1, [r3, r2]
    d9b0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d9b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9b8:	781a      	ldrb	r2, [r3, #0]
    d9ba:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
    d9be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9c2:	781b      	ldrb	r3, [r3, #0]
    d9c4:	4413      	add	r3, r2
    d9c6:	b2da      	uxtb	r2, r3
    d9c8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d9cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9d0:	701a      	strb	r2, [r3, #0]
    d9d2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d9d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9da:	781a      	ldrb	r2, [r3, #0]
    d9dc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d9e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9e4:	781b      	ldrb	r3, [r3, #0]
    d9e6:	4413      	add	r3, r2
    d9e8:	b2da      	uxtb	r2, r3
    d9ea:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d9ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9f2:	701a      	strb	r2, [r3, #0]
    d9f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    d9f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9fc:	781b      	ldrb	r3, [r3, #0]
    d9fe:	3301      	adds	r3, #1
    da00:	b2da      	uxtb	r2, r3
    da02:	f24c 5349 	movw	r3, #50505	; 0xc549
    da06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da0a:	701a      	strb	r2, [r3, #0]
    da0c:	f24c 5349 	movw	r3, #50505	; 0xc549
    da10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da14:	781b      	ldrb	r3, [r3, #0]
    da16:	2bff      	cmp	r3, #255	; 0xff
    da18:	d105      	bne.n	da26 <send_nav_values+0x1b2>
    da1a:	f24c 5349 	movw	r3, #50505	; 0xc549
    da1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da22:	2200      	movs	r2, #0
    da24:	701a      	strb	r2, [r3, #0]
    da26:	f24c 5349 	movw	r3, #50505	; 0xc549
    da2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da2e:	781b      	ldrb	r3, [r3, #0]
    da30:	461a      	mov	r2, r3
    da32:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
    da36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da3a:	7819      	ldrb	r1, [r3, #0]
    da3c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    da40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da44:	5499      	strb	r1, [r3, r2]
    da46:	f24c 634d 	movw	r3, #50765	; 0xc64d
    da4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da4e:	781a      	ldrb	r2, [r3, #0]
    da50:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
    da54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da58:	781b      	ldrb	r3, [r3, #0]
    da5a:	4413      	add	r3, r2
    da5c:	b2da      	uxtb	r2, r3
    da5e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    da62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da66:	701a      	strb	r2, [r3, #0]
    da68:	f24c 634e 	movw	r3, #50766	; 0xc64e
    da6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da70:	781a      	ldrb	r2, [r3, #0]
    da72:	f24c 634d 	movw	r3, #50765	; 0xc64d
    da76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da7a:	781b      	ldrb	r3, [r3, #0]
    da7c:	4413      	add	r3, r2
    da7e:	b2da      	uxtb	r2, r3
    da80:	f24c 634e 	movw	r3, #50766	; 0xc64e
    da84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da88:	701a      	strb	r2, [r3, #0]
    da8a:	f24c 5349 	movw	r3, #50505	; 0xc549
    da8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da92:	781b      	ldrb	r3, [r3, #0]
    da94:	3301      	adds	r3, #1
    da96:	b2da      	uxtb	r2, r3
    da98:	f24c 5349 	movw	r3, #50505	; 0xc549
    da9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daa0:	701a      	strb	r2, [r3, #0]
    daa2:	f24c 5349 	movw	r3, #50505	; 0xc549
    daa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daaa:	781b      	ldrb	r3, [r3, #0]
    daac:	2bff      	cmp	r3, #255	; 0xff
    daae:	d105      	bne.n	dabc <send_nav_values+0x248>
    dab0:	f24c 5349 	movw	r3, #50505	; 0xc549
    dab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dab8:	2200      	movs	r2, #0
    daba:	701a      	strb	r2, [r3, #0]
    dabc:	f24c 5349 	movw	r3, #50505	; 0xc549
    dac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dac4:	781b      	ldrb	r3, [r3, #0]
    dac6:	461a      	mov	r2, r3
    dac8:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    dacc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dad0:	7819      	ldrb	r1, [r3, #0]
    dad2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dad6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dada:	5499      	strb	r1, [r3, r2]
    dadc:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    dae0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dae4:	781a      	ldrb	r2, [r3, #0]
    dae6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    daea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daee:	781b      	ldrb	r3, [r3, #0]
    daf0:	4413      	add	r3, r2
    daf2:	b2da      	uxtb	r2, r3
    daf4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    daf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dafc:	701a      	strb	r2, [r3, #0]
    dafe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    db02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db06:	781a      	ldrb	r2, [r3, #0]
    db08:	f24c 634d 	movw	r3, #50765	; 0xc64d
    db0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db10:	781b      	ldrb	r3, [r3, #0]
    db12:	4413      	add	r3, r2
    db14:	b2da      	uxtb	r2, r3
    db16:	f24c 634e 	movw	r3, #50766	; 0xc64e
    db1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db1e:	701a      	strb	r2, [r3, #0]
    db20:	f24c 5349 	movw	r3, #50505	; 0xc549
    db24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db28:	781b      	ldrb	r3, [r3, #0]
    db2a:	3301      	adds	r3, #1
    db2c:	b2da      	uxtb	r2, r3
    db2e:	f24c 5349 	movw	r3, #50505	; 0xc549
    db32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db36:	701a      	strb	r2, [r3, #0]
    db38:	f24c 5349 	movw	r3, #50505	; 0xc549
    db3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db40:	781b      	ldrb	r3, [r3, #0]
    db42:	2bff      	cmp	r3, #255	; 0xff
    db44:	d105      	bne.n	db52 <send_nav_values+0x2de>
    db46:	f24c 5349 	movw	r3, #50505	; 0xc549
    db4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db4e:	2200      	movs	r2, #0
    db50:	701a      	strb	r2, [r3, #0]
    db52:	f24c 5349 	movw	r3, #50505	; 0xc549
    db56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db5a:	781b      	ldrb	r3, [r3, #0]
    db5c:	461a      	mov	r2, r3
    db5e:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    db62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db66:	7859      	ldrb	r1, [r3, #1]
    db68:	f24c 534c 	movw	r3, #50508	; 0xc54c
    db6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db70:	5499      	strb	r1, [r3, r2]
    db72:	4bd2      	ldr	r3, [pc, #840]	; (debc <send_nav_values+0x648>)
    db74:	781a      	ldrb	r2, [r3, #0]
    db76:	f24c 634d 	movw	r3, #50765	; 0xc64d
    db7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db7e:	781b      	ldrb	r3, [r3, #0]
    db80:	4413      	add	r3, r2
    db82:	b2da      	uxtb	r2, r3
    db84:	f24c 634d 	movw	r3, #50765	; 0xc64d
    db88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db8c:	701a      	strb	r2, [r3, #0]
    db8e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    db92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db96:	781a      	ldrb	r2, [r3, #0]
    db98:	f24c 634d 	movw	r3, #50765	; 0xc64d
    db9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dba0:	781b      	ldrb	r3, [r3, #0]
    dba2:	4413      	add	r3, r2
    dba4:	b2da      	uxtb	r2, r3
    dba6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dbaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbae:	701a      	strb	r2, [r3, #0]
    dbb0:	f24c 5349 	movw	r3, #50505	; 0xc549
    dbb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbb8:	781b      	ldrb	r3, [r3, #0]
    dbba:	3301      	adds	r3, #1
    dbbc:	b2da      	uxtb	r2, r3
    dbbe:	f24c 5349 	movw	r3, #50505	; 0xc549
    dbc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbc6:	701a      	strb	r2, [r3, #0]
    dbc8:	f24c 5349 	movw	r3, #50505	; 0xc549
    dbcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbd0:	781b      	ldrb	r3, [r3, #0]
    dbd2:	2bff      	cmp	r3, #255	; 0xff
    dbd4:	d105      	bne.n	dbe2 <send_nav_values+0x36e>
    dbd6:	f24c 5349 	movw	r3, #50505	; 0xc549
    dbda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbde:	2200      	movs	r2, #0
    dbe0:	701a      	strb	r2, [r3, #0]
    dbe2:	f24c 5349 	movw	r3, #50505	; 0xc549
    dbe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbea:	781b      	ldrb	r3, [r3, #0]
    dbec:	461a      	mov	r2, r3
    dbee:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    dbf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbf6:	7899      	ldrb	r1, [r3, #2]
    dbf8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dbfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc00:	5499      	strb	r1, [r3, r2]
    dc02:	4baf      	ldr	r3, [pc, #700]	; (dec0 <send_nav_values+0x64c>)
    dc04:	781a      	ldrb	r2, [r3, #0]
    dc06:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dc0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc0e:	781b      	ldrb	r3, [r3, #0]
    dc10:	4413      	add	r3, r2
    dc12:	b2da      	uxtb	r2, r3
    dc14:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dc18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc1c:	701a      	strb	r2, [r3, #0]
    dc1e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dc22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc26:	781a      	ldrb	r2, [r3, #0]
    dc28:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dc2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc30:	781b      	ldrb	r3, [r3, #0]
    dc32:	4413      	add	r3, r2
    dc34:	b2da      	uxtb	r2, r3
    dc36:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dc3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc3e:	701a      	strb	r2, [r3, #0]
    dc40:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc48:	781b      	ldrb	r3, [r3, #0]
    dc4a:	3301      	adds	r3, #1
    dc4c:	b2da      	uxtb	r2, r3
    dc4e:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc56:	701a      	strb	r2, [r3, #0]
    dc58:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc60:	781b      	ldrb	r3, [r3, #0]
    dc62:	2bff      	cmp	r3, #255	; 0xff
    dc64:	d105      	bne.n	dc72 <send_nav_values+0x3fe>
    dc66:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc6e:	2200      	movs	r2, #0
    dc70:	701a      	strb	r2, [r3, #0]
    dc72:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc7a:	781b      	ldrb	r3, [r3, #0]
    dc7c:	461a      	mov	r2, r3
    dc7e:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    dc82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc86:	78d9      	ldrb	r1, [r3, #3]
    dc88:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dc8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc90:	5499      	strb	r1, [r3, r2]
    dc92:	4b8c      	ldr	r3, [pc, #560]	; (dec4 <send_nav_values+0x650>)
    dc94:	781a      	ldrb	r2, [r3, #0]
    dc96:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dc9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc9e:	781b      	ldrb	r3, [r3, #0]
    dca0:	4413      	add	r3, r2
    dca2:	b2da      	uxtb	r2, r3
    dca4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dca8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcac:	701a      	strb	r2, [r3, #0]
    dcae:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dcb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcb6:	781a      	ldrb	r2, [r3, #0]
    dcb8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dcbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcc0:	781b      	ldrb	r3, [r3, #0]
    dcc2:	4413      	add	r3, r2
    dcc4:	b2da      	uxtb	r2, r3
    dcc6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dcca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcce:	701a      	strb	r2, [r3, #0]
    dcd0:	f24c 5349 	movw	r3, #50505	; 0xc549
    dcd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcd8:	781b      	ldrb	r3, [r3, #0]
    dcda:	3301      	adds	r3, #1
    dcdc:	b2da      	uxtb	r2, r3
    dcde:	f24c 5349 	movw	r3, #50505	; 0xc549
    dce2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dce6:	701a      	strb	r2, [r3, #0]
    dce8:	f24c 5349 	movw	r3, #50505	; 0xc549
    dcec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcf0:	781b      	ldrb	r3, [r3, #0]
    dcf2:	2bff      	cmp	r3, #255	; 0xff
    dcf4:	d105      	bne.n	dd02 <send_nav_values+0x48e>
    dcf6:	f24c 5349 	movw	r3, #50505	; 0xc549
    dcfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcfe:	2200      	movs	r2, #0
    dd00:	701a      	strb	r2, [r3, #0]
    dd02:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd0a:	781b      	ldrb	r3, [r3, #0]
    dd0c:	461a      	mov	r2, r3
    dd0e:	f64c 3300 	movw	r3, #51968	; 0xcb00
    dd12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd16:	7819      	ldrb	r1, [r3, #0]
    dd18:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dd1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd20:	5499      	strb	r1, [r3, r2]
    dd22:	f64c 3300 	movw	r3, #51968	; 0xcb00
    dd26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd2a:	781a      	ldrb	r2, [r3, #0]
    dd2c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dd30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd34:	781b      	ldrb	r3, [r3, #0]
    dd36:	4413      	add	r3, r2
    dd38:	b2da      	uxtb	r2, r3
    dd3a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dd3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd42:	701a      	strb	r2, [r3, #0]
    dd44:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dd48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd4c:	781a      	ldrb	r2, [r3, #0]
    dd4e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dd52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd56:	781b      	ldrb	r3, [r3, #0]
    dd58:	4413      	add	r3, r2
    dd5a:	b2da      	uxtb	r2, r3
    dd5c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dd60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd64:	701a      	strb	r2, [r3, #0]
    dd66:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd6e:	781b      	ldrb	r3, [r3, #0]
    dd70:	3301      	adds	r3, #1
    dd72:	b2da      	uxtb	r2, r3
    dd74:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd7c:	701a      	strb	r2, [r3, #0]
    dd7e:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd86:	781b      	ldrb	r3, [r3, #0]
    dd88:	2bff      	cmp	r3, #255	; 0xff
    dd8a:	d105      	bne.n	dd98 <send_nav_values+0x524>
    dd8c:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd94:	2200      	movs	r2, #0
    dd96:	701a      	strb	r2, [r3, #0]
    dd98:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dda0:	781b      	ldrb	r3, [r3, #0]
    dda2:	461a      	mov	r2, r3
    dda4:	f64c 3300 	movw	r3, #51968	; 0xcb00
    dda8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddac:	7859      	ldrb	r1, [r3, #1]
    ddae:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ddb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddb6:	5499      	strb	r1, [r3, r2]
    ddb8:	4b43      	ldr	r3, [pc, #268]	; (dec8 <send_nav_values+0x654>)
    ddba:	781a      	ldrb	r2, [r3, #0]
    ddbc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ddc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddc4:	781b      	ldrb	r3, [r3, #0]
    ddc6:	4413      	add	r3, r2
    ddc8:	b2da      	uxtb	r2, r3
    ddca:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ddce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddd2:	701a      	strb	r2, [r3, #0]
    ddd4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ddd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dddc:	781a      	ldrb	r2, [r3, #0]
    ddde:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dde2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dde6:	781b      	ldrb	r3, [r3, #0]
    dde8:	4413      	add	r3, r2
    ddea:	b2da      	uxtb	r2, r3
    ddec:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ddf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddf4:	701a      	strb	r2, [r3, #0]
    ddf6:	f24c 5349 	movw	r3, #50505	; 0xc549
    ddfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddfe:	781b      	ldrb	r3, [r3, #0]
    de00:	3301      	adds	r3, #1
    de02:	b2da      	uxtb	r2, r3
    de04:	f24c 5349 	movw	r3, #50505	; 0xc549
    de08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de0c:	701a      	strb	r2, [r3, #0]
    de0e:	f24c 5349 	movw	r3, #50505	; 0xc549
    de12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de16:	781b      	ldrb	r3, [r3, #0]
    de18:	2bff      	cmp	r3, #255	; 0xff
    de1a:	d105      	bne.n	de28 <send_nav_values+0x5b4>
    de1c:	f24c 5349 	movw	r3, #50505	; 0xc549
    de20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de24:	2200      	movs	r2, #0
    de26:	701a      	strb	r2, [r3, #0]
    de28:	f24c 5349 	movw	r3, #50505	; 0xc549
    de2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de30:	781b      	ldrb	r3, [r3, #0]
    de32:	461a      	mov	r2, r3
    de34:	f64c 3300 	movw	r3, #51968	; 0xcb00
    de38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de3c:	7899      	ldrb	r1, [r3, #2]
    de3e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    de42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de46:	5499      	strb	r1, [r3, r2]
    de48:	4b20      	ldr	r3, [pc, #128]	; (decc <send_nav_values+0x658>)
    de4a:	781a      	ldrb	r2, [r3, #0]
    de4c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    de50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de54:	781b      	ldrb	r3, [r3, #0]
    de56:	4413      	add	r3, r2
    de58:	b2da      	uxtb	r2, r3
    de5a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    de5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de62:	701a      	strb	r2, [r3, #0]
    de64:	f24c 634e 	movw	r3, #50766	; 0xc64e
    de68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de6c:	781a      	ldrb	r2, [r3, #0]
    de6e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    de72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de76:	781b      	ldrb	r3, [r3, #0]
    de78:	4413      	add	r3, r2
    de7a:	b2da      	uxtb	r2, r3
    de7c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    de80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de84:	701a      	strb	r2, [r3, #0]
    de86:	f24c 5349 	movw	r3, #50505	; 0xc549
    de8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de8e:	781b      	ldrb	r3, [r3, #0]
    de90:	3301      	adds	r3, #1
    de92:	b2da      	uxtb	r2, r3
    de94:	f24c 5349 	movw	r3, #50505	; 0xc549
    de98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de9c:	701a      	strb	r2, [r3, #0]
    de9e:	f24c 5349 	movw	r3, #50505	; 0xc549
    dea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dea6:	781b      	ldrb	r3, [r3, #0]
    dea8:	2bff      	cmp	r3, #255	; 0xff
    deaa:	d111      	bne.n	ded0 <send_nav_values+0x65c>
    deac:	f24c 5349 	movw	r3, #50505	; 0xc549
    deb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deb4:	2200      	movs	r2, #0
    deb6:	701a      	strb	r2, [r3, #0]
    deb8:	e00a      	b.n	ded0 <send_nav_values+0x65c>
    deba:	bf00      	nop
    debc:	2004cafd 	.word	0x2004cafd
    dec0:	2004cafe 	.word	0x2004cafe
    dec4:	2004caff 	.word	0x2004caff
    dec8:	2004cb01 	.word	0x2004cb01
    decc:	2004cb02 	.word	0x2004cb02
    ded0:	f24c 5349 	movw	r3, #50505	; 0xc549
    ded4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ded8:	781b      	ldrb	r3, [r3, #0]
    deda:	461a      	mov	r2, r3
    dedc:	f64c 3300 	movw	r3, #51968	; 0xcb00
    dee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dee4:	78d9      	ldrb	r1, [r3, #3]
    dee6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    deea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deee:	5499      	strb	r1, [r3, r2]
    def0:	4bd3      	ldr	r3, [pc, #844]	; (e240 <send_nav_values+0x9cc>)
    def2:	781a      	ldrb	r2, [r3, #0]
    def4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    def8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    defc:	781b      	ldrb	r3, [r3, #0]
    defe:	4413      	add	r3, r2
    df00:	b2da      	uxtb	r2, r3
    df02:	f24c 634d 	movw	r3, #50765	; 0xc64d
    df06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df0a:	701a      	strb	r2, [r3, #0]
    df0c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    df10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df14:	781a      	ldrb	r2, [r3, #0]
    df16:	f24c 634d 	movw	r3, #50765	; 0xc64d
    df1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df1e:	781b      	ldrb	r3, [r3, #0]
    df20:	4413      	add	r3, r2
    df22:	b2da      	uxtb	r2, r3
    df24:	f24c 634e 	movw	r3, #50766	; 0xc64e
    df28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df2c:	701a      	strb	r2, [r3, #0]
    df2e:	f24c 5349 	movw	r3, #50505	; 0xc549
    df32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df36:	781b      	ldrb	r3, [r3, #0]
    df38:	3301      	adds	r3, #1
    df3a:	b2da      	uxtb	r2, r3
    df3c:	f24c 5349 	movw	r3, #50505	; 0xc549
    df40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df44:	701a      	strb	r2, [r3, #0]
    df46:	f24c 5349 	movw	r3, #50505	; 0xc549
    df4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df4e:	781b      	ldrb	r3, [r3, #0]
    df50:	2bff      	cmp	r3, #255	; 0xff
    df52:	d105      	bne.n	df60 <send_nav_values+0x6ec>
    df54:	f24c 5349 	movw	r3, #50505	; 0xc549
    df58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df5c:	2200      	movs	r2, #0
    df5e:	701a      	strb	r2, [r3, #0]
    df60:	f24c 5349 	movw	r3, #50505	; 0xc549
    df64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df68:	781b      	ldrb	r3, [r3, #0]
    df6a:	461a      	mov	r2, r3
    df6c:	f64c 038c 	movw	r3, #51340	; 0xc88c
    df70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df74:	7819      	ldrb	r1, [r3, #0]
    df76:	f24c 534c 	movw	r3, #50508	; 0xc54c
    df7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df7e:	5499      	strb	r1, [r3, r2]
    df80:	f64c 038c 	movw	r3, #51340	; 0xc88c
    df84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df88:	781a      	ldrb	r2, [r3, #0]
    df8a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    df8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df92:	781b      	ldrb	r3, [r3, #0]
    df94:	4413      	add	r3, r2
    df96:	b2da      	uxtb	r2, r3
    df98:	f24c 634d 	movw	r3, #50765	; 0xc64d
    df9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfa0:	701a      	strb	r2, [r3, #0]
    dfa2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dfa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfaa:	781a      	ldrb	r2, [r3, #0]
    dfac:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dfb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfb4:	781b      	ldrb	r3, [r3, #0]
    dfb6:	4413      	add	r3, r2
    dfb8:	b2da      	uxtb	r2, r3
    dfba:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dfbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfc2:	701a      	strb	r2, [r3, #0]
    dfc4:	f24c 5349 	movw	r3, #50505	; 0xc549
    dfc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfcc:	781b      	ldrb	r3, [r3, #0]
    dfce:	3301      	adds	r3, #1
    dfd0:	b2da      	uxtb	r2, r3
    dfd2:	f24c 5349 	movw	r3, #50505	; 0xc549
    dfd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfda:	701a      	strb	r2, [r3, #0]
    dfdc:	f24c 5349 	movw	r3, #50505	; 0xc549
    dfe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfe4:	781b      	ldrb	r3, [r3, #0]
    dfe6:	2bff      	cmp	r3, #255	; 0xff
    dfe8:	d105      	bne.n	dff6 <send_nav_values+0x782>
    dfea:	f24c 5349 	movw	r3, #50505	; 0xc549
    dfee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dff2:	2200      	movs	r2, #0
    dff4:	701a      	strb	r2, [r3, #0]
    dff6:	f24c 5349 	movw	r3, #50505	; 0xc549
    dffa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dffe:	781b      	ldrb	r3, [r3, #0]
    e000:	461a      	mov	r2, r3
    e002:	f64c 038c 	movw	r3, #51340	; 0xc88c
    e006:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e00a:	7859      	ldrb	r1, [r3, #1]
    e00c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e014:	5499      	strb	r1, [r3, r2]
    e016:	4b8b      	ldr	r3, [pc, #556]	; (e244 <send_nav_values+0x9d0>)
    e018:	781a      	ldrb	r2, [r3, #0]
    e01a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e01e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e022:	781b      	ldrb	r3, [r3, #0]
    e024:	4413      	add	r3, r2
    e026:	b2da      	uxtb	r2, r3
    e028:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e02c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e030:	701a      	strb	r2, [r3, #0]
    e032:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e036:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e03a:	781a      	ldrb	r2, [r3, #0]
    e03c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e040:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e044:	781b      	ldrb	r3, [r3, #0]
    e046:	4413      	add	r3, r2
    e048:	b2da      	uxtb	r2, r3
    e04a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e04e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e052:	701a      	strb	r2, [r3, #0]
    e054:	f24c 5349 	movw	r3, #50505	; 0xc549
    e058:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e05c:	781b      	ldrb	r3, [r3, #0]
    e05e:	3301      	adds	r3, #1
    e060:	b2da      	uxtb	r2, r3
    e062:	f24c 5349 	movw	r3, #50505	; 0xc549
    e066:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e06a:	701a      	strb	r2, [r3, #0]
    e06c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e070:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e074:	781b      	ldrb	r3, [r3, #0]
    e076:	2bff      	cmp	r3, #255	; 0xff
    e078:	d105      	bne.n	e086 <send_nav_values+0x812>
    e07a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e07e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e082:	2200      	movs	r2, #0
    e084:	701a      	strb	r2, [r3, #0]
    e086:	f24c 5349 	movw	r3, #50505	; 0xc549
    e08a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e08e:	781b      	ldrb	r3, [r3, #0]
    e090:	461a      	mov	r2, r3
    e092:	f64c 038c 	movw	r3, #51340	; 0xc88c
    e096:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e09a:	7899      	ldrb	r1, [r3, #2]
    e09c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e0a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0a4:	5499      	strb	r1, [r3, r2]
    e0a6:	4b68      	ldr	r3, [pc, #416]	; (e248 <send_nav_values+0x9d4>)
    e0a8:	781a      	ldrb	r2, [r3, #0]
    e0aa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e0ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0b2:	781b      	ldrb	r3, [r3, #0]
    e0b4:	4413      	add	r3, r2
    e0b6:	b2da      	uxtb	r2, r3
    e0b8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e0bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0c0:	701a      	strb	r2, [r3, #0]
    e0c2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e0c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0ca:	781a      	ldrb	r2, [r3, #0]
    e0cc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e0d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0d4:	781b      	ldrb	r3, [r3, #0]
    e0d6:	4413      	add	r3, r2
    e0d8:	b2da      	uxtb	r2, r3
    e0da:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e0de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0e2:	701a      	strb	r2, [r3, #0]
    e0e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    e0e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0ec:	781b      	ldrb	r3, [r3, #0]
    e0ee:	3301      	adds	r3, #1
    e0f0:	b2da      	uxtb	r2, r3
    e0f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    e0f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0fa:	701a      	strb	r2, [r3, #0]
    e0fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    e100:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e104:	781b      	ldrb	r3, [r3, #0]
    e106:	2bff      	cmp	r3, #255	; 0xff
    e108:	d105      	bne.n	e116 <send_nav_values+0x8a2>
    e10a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e10e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e112:	2200      	movs	r2, #0
    e114:	701a      	strb	r2, [r3, #0]
    e116:	f24c 5349 	movw	r3, #50505	; 0xc549
    e11a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e11e:	781b      	ldrb	r3, [r3, #0]
    e120:	461a      	mov	r2, r3
    e122:	f64c 038c 	movw	r3, #51340	; 0xc88c
    e126:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e12a:	78d9      	ldrb	r1, [r3, #3]
    e12c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e130:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e134:	5499      	strb	r1, [r3, r2]
    e136:	4b45      	ldr	r3, [pc, #276]	; (e24c <send_nav_values+0x9d8>)
    e138:	781a      	ldrb	r2, [r3, #0]
    e13a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e13e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e142:	781b      	ldrb	r3, [r3, #0]
    e144:	4413      	add	r3, r2
    e146:	b2da      	uxtb	r2, r3
    e148:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e14c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e150:	701a      	strb	r2, [r3, #0]
    e152:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e156:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e15a:	781a      	ldrb	r2, [r3, #0]
    e15c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e164:	781b      	ldrb	r3, [r3, #0]
    e166:	4413      	add	r3, r2
    e168:	b2da      	uxtb	r2, r3
    e16a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e16e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e172:	701a      	strb	r2, [r3, #0]
    e174:	f24c 5349 	movw	r3, #50505	; 0xc549
    e178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e17c:	781b      	ldrb	r3, [r3, #0]
    e17e:	3301      	adds	r3, #1
    e180:	b2da      	uxtb	r2, r3
    e182:	f24c 5349 	movw	r3, #50505	; 0xc549
    e186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e18a:	701a      	strb	r2, [r3, #0]
    e18c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e190:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e194:	781b      	ldrb	r3, [r3, #0]
    e196:	2bff      	cmp	r3, #255	; 0xff
    e198:	d105      	bne.n	e1a6 <send_nav_values+0x932>
    e19a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e19e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1a2:	2200      	movs	r2, #0
    e1a4:	701a      	strb	r2, [r3, #0]
    e1a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    e1aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1ae:	781b      	ldrb	r3, [r3, #0]
    e1b0:	461a      	mov	r2, r3
    e1b2:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e1b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1ba:	7819      	ldrb	r1, [r3, #0]
    e1bc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e1c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1c4:	5499      	strb	r1, [r3, r2]
    e1c6:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e1ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1ce:	781a      	ldrb	r2, [r3, #0]
    e1d0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e1d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1d8:	781b      	ldrb	r3, [r3, #0]
    e1da:	4413      	add	r3, r2
    e1dc:	b2da      	uxtb	r2, r3
    e1de:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e1e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1e6:	701a      	strb	r2, [r3, #0]
    e1e8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e1ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1f0:	781a      	ldrb	r2, [r3, #0]
    e1f2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e1f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1fa:	781b      	ldrb	r3, [r3, #0]
    e1fc:	4413      	add	r3, r2
    e1fe:	b2da      	uxtb	r2, r3
    e200:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e208:	701a      	strb	r2, [r3, #0]
    e20a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e20e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e212:	781b      	ldrb	r3, [r3, #0]
    e214:	3301      	adds	r3, #1
    e216:	b2da      	uxtb	r2, r3
    e218:	f24c 5349 	movw	r3, #50505	; 0xc549
    e21c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e220:	701a      	strb	r2, [r3, #0]
    e222:	f24c 5349 	movw	r3, #50505	; 0xc549
    e226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e22a:	781b      	ldrb	r3, [r3, #0]
    e22c:	2bff      	cmp	r3, #255	; 0xff
    e22e:	d10f      	bne.n	e250 <send_nav_values+0x9dc>
    e230:	f24c 5349 	movw	r3, #50505	; 0xc549
    e234:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e238:	2200      	movs	r2, #0
    e23a:	701a      	strb	r2, [r3, #0]
    e23c:	e008      	b.n	e250 <send_nav_values+0x9dc>
    e23e:	bf00      	nop
    e240:	2004cb03 	.word	0x2004cb03
    e244:	2004c88d 	.word	0x2004c88d
    e248:	2004c88e 	.word	0x2004c88e
    e24c:	2004c88f 	.word	0x2004c88f
    e250:	f24c 5349 	movw	r3, #50505	; 0xc549
    e254:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e258:	781b      	ldrb	r3, [r3, #0]
    e25a:	461a      	mov	r2, r3
    e25c:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e260:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e264:	7859      	ldrb	r1, [r3, #1]
    e266:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e26a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e26e:	5499      	strb	r1, [r3, r2]
    e270:	4bd1      	ldr	r3, [pc, #836]	; (e5b8 <send_nav_values+0xd44>)
    e272:	781a      	ldrb	r2, [r3, #0]
    e274:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e278:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e27c:	781b      	ldrb	r3, [r3, #0]
    e27e:	4413      	add	r3, r2
    e280:	b2da      	uxtb	r2, r3
    e282:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e286:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e28a:	701a      	strb	r2, [r3, #0]
    e28c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e290:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e294:	781a      	ldrb	r2, [r3, #0]
    e296:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e29a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e29e:	781b      	ldrb	r3, [r3, #0]
    e2a0:	4413      	add	r3, r2
    e2a2:	b2da      	uxtb	r2, r3
    e2a4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e2a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2ac:	701a      	strb	r2, [r3, #0]
    e2ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    e2b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2b6:	781b      	ldrb	r3, [r3, #0]
    e2b8:	3301      	adds	r3, #1
    e2ba:	b2da      	uxtb	r2, r3
    e2bc:	f24c 5349 	movw	r3, #50505	; 0xc549
    e2c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2c4:	701a      	strb	r2, [r3, #0]
    e2c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    e2ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2ce:	781b      	ldrb	r3, [r3, #0]
    e2d0:	2bff      	cmp	r3, #255	; 0xff
    e2d2:	d105      	bne.n	e2e0 <send_nav_values+0xa6c>
    e2d4:	f24c 5349 	movw	r3, #50505	; 0xc549
    e2d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2dc:	2200      	movs	r2, #0
    e2de:	701a      	strb	r2, [r3, #0]
    e2e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    e2e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2e8:	781b      	ldrb	r3, [r3, #0]
    e2ea:	461a      	mov	r2, r3
    e2ec:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e2f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2f4:	7899      	ldrb	r1, [r3, #2]
    e2f6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e2fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2fe:	5499      	strb	r1, [r3, r2]
    e300:	4bae      	ldr	r3, [pc, #696]	; (e5bc <send_nav_values+0xd48>)
    e302:	781a      	ldrb	r2, [r3, #0]
    e304:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e308:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e30c:	781b      	ldrb	r3, [r3, #0]
    e30e:	4413      	add	r3, r2
    e310:	b2da      	uxtb	r2, r3
    e312:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e316:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e31a:	701a      	strb	r2, [r3, #0]
    e31c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e320:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e324:	781a      	ldrb	r2, [r3, #0]
    e326:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e32a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e32e:	781b      	ldrb	r3, [r3, #0]
    e330:	4413      	add	r3, r2
    e332:	b2da      	uxtb	r2, r3
    e334:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e338:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e33c:	701a      	strb	r2, [r3, #0]
    e33e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e342:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e346:	781b      	ldrb	r3, [r3, #0]
    e348:	3301      	adds	r3, #1
    e34a:	b2da      	uxtb	r2, r3
    e34c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e350:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e354:	701a      	strb	r2, [r3, #0]
    e356:	f24c 5349 	movw	r3, #50505	; 0xc549
    e35a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e35e:	781b      	ldrb	r3, [r3, #0]
    e360:	2bff      	cmp	r3, #255	; 0xff
    e362:	d105      	bne.n	e370 <send_nav_values+0xafc>
    e364:	f24c 5349 	movw	r3, #50505	; 0xc549
    e368:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e36c:	2200      	movs	r2, #0
    e36e:	701a      	strb	r2, [r3, #0]
    e370:	f24c 5349 	movw	r3, #50505	; 0xc549
    e374:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e378:	781b      	ldrb	r3, [r3, #0]
    e37a:	461a      	mov	r2, r3
    e37c:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e380:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e384:	78d9      	ldrb	r1, [r3, #3]
    e386:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e38a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e38e:	5499      	strb	r1, [r3, r2]
    e390:	4b8b      	ldr	r3, [pc, #556]	; (e5c0 <send_nav_values+0xd4c>)
    e392:	781a      	ldrb	r2, [r3, #0]
    e394:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e398:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e39c:	781b      	ldrb	r3, [r3, #0]
    e39e:	4413      	add	r3, r2
    e3a0:	b2da      	uxtb	r2, r3
    e3a2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e3a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3aa:	701a      	strb	r2, [r3, #0]
    e3ac:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e3b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3b4:	781a      	ldrb	r2, [r3, #0]
    e3b6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e3ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3be:	781b      	ldrb	r3, [r3, #0]
    e3c0:	4413      	add	r3, r2
    e3c2:	b2da      	uxtb	r2, r3
    e3c4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e3c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3cc:	701a      	strb	r2, [r3, #0]
    e3ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    e3d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3d6:	781b      	ldrb	r3, [r3, #0]
    e3d8:	3301      	adds	r3, #1
    e3da:	b2da      	uxtb	r2, r3
    e3dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    e3e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3e4:	701a      	strb	r2, [r3, #0]
    e3e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    e3ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3ee:	781b      	ldrb	r3, [r3, #0]
    e3f0:	2bff      	cmp	r3, #255	; 0xff
    e3f2:	d105      	bne.n	e400 <send_nav_values+0xb8c>
    e3f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    e3f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3fc:	2200      	movs	r2, #0
    e3fe:	701a      	strb	r2, [r3, #0]
    e400:	f24c 5349 	movw	r3, #50505	; 0xc549
    e404:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e408:	781b      	ldrb	r3, [r3, #0]
    e40a:	461a      	mov	r2, r3
    e40c:	f240 5358 	movw	r3, #1368	; 0x558
    e410:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e414:	7819      	ldrb	r1, [r3, #0]
    e416:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e41a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e41e:	5499      	strb	r1, [r3, r2]
    e420:	f240 5358 	movw	r3, #1368	; 0x558
    e424:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e428:	781a      	ldrb	r2, [r3, #0]
    e42a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e42e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e432:	781b      	ldrb	r3, [r3, #0]
    e434:	4413      	add	r3, r2
    e436:	b2da      	uxtb	r2, r3
    e438:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e43c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e440:	701a      	strb	r2, [r3, #0]
    e442:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e446:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e44a:	781a      	ldrb	r2, [r3, #0]
    e44c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e450:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e454:	781b      	ldrb	r3, [r3, #0]
    e456:	4413      	add	r3, r2
    e458:	b2da      	uxtb	r2, r3
    e45a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e45e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e462:	701a      	strb	r2, [r3, #0]
    e464:	f24c 5349 	movw	r3, #50505	; 0xc549
    e468:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e46c:	781b      	ldrb	r3, [r3, #0]
    e46e:	3301      	adds	r3, #1
    e470:	b2da      	uxtb	r2, r3
    e472:	f24c 5349 	movw	r3, #50505	; 0xc549
    e476:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e47a:	701a      	strb	r2, [r3, #0]
    e47c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e480:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e484:	781b      	ldrb	r3, [r3, #0]
    e486:	2bff      	cmp	r3, #255	; 0xff
    e488:	d105      	bne.n	e496 <send_nav_values+0xc22>
    e48a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e48e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e492:	2200      	movs	r2, #0
    e494:	701a      	strb	r2, [r3, #0]
    e496:	f24c 5349 	movw	r3, #50505	; 0xc549
    e49a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e49e:	781b      	ldrb	r3, [r3, #0]
    e4a0:	461a      	mov	r2, r3
    e4a2:	f240 5358 	movw	r3, #1368	; 0x558
    e4a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4aa:	7859      	ldrb	r1, [r3, #1]
    e4ac:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e4b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4b4:	5499      	strb	r1, [r3, r2]
    e4b6:	4b43      	ldr	r3, [pc, #268]	; (e5c4 <send_nav_values+0xd50>)
    e4b8:	781a      	ldrb	r2, [r3, #0]
    e4ba:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e4be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4c2:	781b      	ldrb	r3, [r3, #0]
    e4c4:	4413      	add	r3, r2
    e4c6:	b2da      	uxtb	r2, r3
    e4c8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e4cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4d0:	701a      	strb	r2, [r3, #0]
    e4d2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e4d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4da:	781a      	ldrb	r2, [r3, #0]
    e4dc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e4e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4e4:	781b      	ldrb	r3, [r3, #0]
    e4e6:	4413      	add	r3, r2
    e4e8:	b2da      	uxtb	r2, r3
    e4ea:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e4ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4f2:	701a      	strb	r2, [r3, #0]
    e4f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    e4f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4fc:	781b      	ldrb	r3, [r3, #0]
    e4fe:	3301      	adds	r3, #1
    e500:	b2da      	uxtb	r2, r3
    e502:	f24c 5349 	movw	r3, #50505	; 0xc549
    e506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e50a:	701a      	strb	r2, [r3, #0]
    e50c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e510:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e514:	781b      	ldrb	r3, [r3, #0]
    e516:	2bff      	cmp	r3, #255	; 0xff
    e518:	d105      	bne.n	e526 <send_nav_values+0xcb2>
    e51a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e51e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e522:	2200      	movs	r2, #0
    e524:	701a      	strb	r2, [r3, #0]
    e526:	f24c 5349 	movw	r3, #50505	; 0xc549
    e52a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e52e:	781b      	ldrb	r3, [r3, #0]
    e530:	461a      	mov	r2, r3
    e532:	f240 5358 	movw	r3, #1368	; 0x558
    e536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e53a:	7899      	ldrb	r1, [r3, #2]
    e53c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e540:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e544:	5499      	strb	r1, [r3, r2]
    e546:	4b20      	ldr	r3, [pc, #128]	; (e5c8 <send_nav_values+0xd54>)
    e548:	781a      	ldrb	r2, [r3, #0]
    e54a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e54e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e552:	781b      	ldrb	r3, [r3, #0]
    e554:	4413      	add	r3, r2
    e556:	b2da      	uxtb	r2, r3
    e558:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e55c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e560:	701a      	strb	r2, [r3, #0]
    e562:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e566:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e56a:	781a      	ldrb	r2, [r3, #0]
    e56c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e574:	781b      	ldrb	r3, [r3, #0]
    e576:	4413      	add	r3, r2
    e578:	b2da      	uxtb	r2, r3
    e57a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e57e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e582:	701a      	strb	r2, [r3, #0]
    e584:	f24c 5349 	movw	r3, #50505	; 0xc549
    e588:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e58c:	781b      	ldrb	r3, [r3, #0]
    e58e:	3301      	adds	r3, #1
    e590:	b2da      	uxtb	r2, r3
    e592:	f24c 5349 	movw	r3, #50505	; 0xc549
    e596:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e59a:	701a      	strb	r2, [r3, #0]
    e59c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e5a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5a4:	781b      	ldrb	r3, [r3, #0]
    e5a6:	2bff      	cmp	r3, #255	; 0xff
    e5a8:	d110      	bne.n	e5cc <send_nav_values+0xd58>
    e5aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    e5ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5b2:	2200      	movs	r2, #0
    e5b4:	701a      	strb	r2, [r3, #0]
    e5b6:	e009      	b.n	e5cc <send_nav_values+0xd58>
    e5b8:	2004c8d5 	.word	0x2004c8d5
    e5bc:	2004c8d6 	.word	0x2004c8d6
    e5c0:	2004c8d7 	.word	0x2004c8d7
    e5c4:	20000559 	.word	0x20000559
    e5c8:	2000055a 	.word	0x2000055a
    e5cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    e5d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5d4:	781b      	ldrb	r3, [r3, #0]
    e5d6:	461a      	mov	r2, r3
    e5d8:	f240 5358 	movw	r3, #1368	; 0x558
    e5dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5e0:	78d9      	ldrb	r1, [r3, #3]
    e5e2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e5e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5ea:	5499      	strb	r1, [r3, r2]
    e5ec:	4bc2      	ldr	r3, [pc, #776]	; (e8f8 <send_nav_values+0x1084>)
    e5ee:	781a      	ldrb	r2, [r3, #0]
    e5f0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e5f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5f8:	781b      	ldrb	r3, [r3, #0]
    e5fa:	4413      	add	r3, r2
    e5fc:	b2da      	uxtb	r2, r3
    e5fe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e602:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e606:	701a      	strb	r2, [r3, #0]
    e608:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e60c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e610:	781a      	ldrb	r2, [r3, #0]
    e612:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e616:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e61a:	781b      	ldrb	r3, [r3, #0]
    e61c:	4413      	add	r3, r2
    e61e:	b2da      	uxtb	r2, r3
    e620:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e624:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e628:	701a      	strb	r2, [r3, #0]
    e62a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e62e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e632:	781b      	ldrb	r3, [r3, #0]
    e634:	3301      	adds	r3, #1
    e636:	b2da      	uxtb	r2, r3
    e638:	f24c 5349 	movw	r3, #50505	; 0xc549
    e63c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e640:	701a      	strb	r2, [r3, #0]
    e642:	f24c 5349 	movw	r3, #50505	; 0xc549
    e646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e64a:	781b      	ldrb	r3, [r3, #0]
    e64c:	2bff      	cmp	r3, #255	; 0xff
    e64e:	d105      	bne.n	e65c <send_nav_values+0xde8>
    e650:	f24c 5349 	movw	r3, #50505	; 0xc549
    e654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e658:	2200      	movs	r2, #0
    e65a:	701a      	strb	r2, [r3, #0]
    e65c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e660:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e664:	781b      	ldrb	r3, [r3, #0]
    e666:	461a      	mov	r2, r3
    e668:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e66c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e670:	7819      	ldrb	r1, [r3, #0]
    e672:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e676:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e67a:	5499      	strb	r1, [r3, r2]
    e67c:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e680:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e684:	781a      	ldrb	r2, [r3, #0]
    e686:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e68a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e68e:	781b      	ldrb	r3, [r3, #0]
    e690:	4413      	add	r3, r2
    e692:	b2da      	uxtb	r2, r3
    e694:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e698:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e69c:	701a      	strb	r2, [r3, #0]
    e69e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e6a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6a6:	781a      	ldrb	r2, [r3, #0]
    e6a8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e6ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6b0:	781b      	ldrb	r3, [r3, #0]
    e6b2:	4413      	add	r3, r2
    e6b4:	b2da      	uxtb	r2, r3
    e6b6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e6ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6be:	701a      	strb	r2, [r3, #0]
    e6c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    e6c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6c8:	781b      	ldrb	r3, [r3, #0]
    e6ca:	3301      	adds	r3, #1
    e6cc:	b2da      	uxtb	r2, r3
    e6ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    e6d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6d6:	701a      	strb	r2, [r3, #0]
    e6d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    e6dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6e0:	781b      	ldrb	r3, [r3, #0]
    e6e2:	2bff      	cmp	r3, #255	; 0xff
    e6e4:	d105      	bne.n	e6f2 <send_nav_values+0xe7e>
    e6e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    e6ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6ee:	2200      	movs	r2, #0
    e6f0:	701a      	strb	r2, [r3, #0]
    e6f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    e6f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6fa:	781b      	ldrb	r3, [r3, #0]
    e6fc:	461a      	mov	r2, r3
    e6fe:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e702:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e706:	7859      	ldrb	r1, [r3, #1]
    e708:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e70c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e710:	5499      	strb	r1, [r3, r2]
    e712:	4b7a      	ldr	r3, [pc, #488]	; (e8fc <send_nav_values+0x1088>)
    e714:	781a      	ldrb	r2, [r3, #0]
    e716:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e71a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e71e:	781b      	ldrb	r3, [r3, #0]
    e720:	4413      	add	r3, r2
    e722:	b2da      	uxtb	r2, r3
    e724:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e728:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e72c:	701a      	strb	r2, [r3, #0]
    e72e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e732:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e736:	781a      	ldrb	r2, [r3, #0]
    e738:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e73c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e740:	781b      	ldrb	r3, [r3, #0]
    e742:	4413      	add	r3, r2
    e744:	b2da      	uxtb	r2, r3
    e746:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e74a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e74e:	701a      	strb	r2, [r3, #0]
    e750:	f24c 5349 	movw	r3, #50505	; 0xc549
    e754:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e758:	781b      	ldrb	r3, [r3, #0]
    e75a:	3301      	adds	r3, #1
    e75c:	b2da      	uxtb	r2, r3
    e75e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e766:	701a      	strb	r2, [r3, #0]
    e768:	f24c 5349 	movw	r3, #50505	; 0xc549
    e76c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e770:	781b      	ldrb	r3, [r3, #0]
    e772:	2bff      	cmp	r3, #255	; 0xff
    e774:	d105      	bne.n	e782 <send_nav_values+0xf0e>
    e776:	f24c 5349 	movw	r3, #50505	; 0xc549
    e77a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e77e:	2200      	movs	r2, #0
    e780:	701a      	strb	r2, [r3, #0]
    e782:	f24c 5349 	movw	r3, #50505	; 0xc549
    e786:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e78a:	781b      	ldrb	r3, [r3, #0]
    e78c:	461a      	mov	r2, r3
    e78e:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e792:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e796:	7899      	ldrb	r1, [r3, #2]
    e798:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e79c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7a0:	5499      	strb	r1, [r3, r2]
    e7a2:	4b57      	ldr	r3, [pc, #348]	; (e900 <send_nav_values+0x108c>)
    e7a4:	781a      	ldrb	r2, [r3, #0]
    e7a6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e7aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7ae:	781b      	ldrb	r3, [r3, #0]
    e7b0:	4413      	add	r3, r2
    e7b2:	b2da      	uxtb	r2, r3
    e7b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e7b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7bc:	701a      	strb	r2, [r3, #0]
    e7be:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e7c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7c6:	781a      	ldrb	r2, [r3, #0]
    e7c8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e7cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7d0:	781b      	ldrb	r3, [r3, #0]
    e7d2:	4413      	add	r3, r2
    e7d4:	b2da      	uxtb	r2, r3
    e7d6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e7da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7de:	701a      	strb	r2, [r3, #0]
    e7e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    e7e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7e8:	781b      	ldrb	r3, [r3, #0]
    e7ea:	3301      	adds	r3, #1
    e7ec:	b2da      	uxtb	r2, r3
    e7ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    e7f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7f6:	701a      	strb	r2, [r3, #0]
    e7f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    e7fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e800:	781b      	ldrb	r3, [r3, #0]
    e802:	2bff      	cmp	r3, #255	; 0xff
    e804:	d105      	bne.n	e812 <send_nav_values+0xf9e>
    e806:	f24c 5349 	movw	r3, #50505	; 0xc549
    e80a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e80e:	2200      	movs	r2, #0
    e810:	701a      	strb	r2, [r3, #0]
    e812:	f24c 5349 	movw	r3, #50505	; 0xc549
    e816:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e81a:	781b      	ldrb	r3, [r3, #0]
    e81c:	461a      	mov	r2, r3
    e81e:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e822:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e826:	78d9      	ldrb	r1, [r3, #3]
    e828:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e82c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e830:	5499      	strb	r1, [r3, r2]
    e832:	4b34      	ldr	r3, [pc, #208]	; (e904 <send_nav_values+0x1090>)
    e834:	781a      	ldrb	r2, [r3, #0]
    e836:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e83a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e83e:	781b      	ldrb	r3, [r3, #0]
    e840:	4413      	add	r3, r2
    e842:	b2da      	uxtb	r2, r3
    e844:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e848:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e84c:	701a      	strb	r2, [r3, #0]
    e84e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e852:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e856:	781a      	ldrb	r2, [r3, #0]
    e858:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e85c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e860:	781b      	ldrb	r3, [r3, #0]
    e862:	4413      	add	r3, r2
    e864:	b2da      	uxtb	r2, r3
    e866:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e86a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e86e:	701a      	strb	r2, [r3, #0]
    e870:	f24c 5349 	movw	r3, #50505	; 0xc549
    e874:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e878:	781b      	ldrb	r3, [r3, #0]
    e87a:	3301      	adds	r3, #1
    e87c:	b2da      	uxtb	r2, r3
    e87e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e882:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e886:	701a      	strb	r2, [r3, #0]
    e888:	f24c 5349 	movw	r3, #50505	; 0xc549
    e88c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e890:	781b      	ldrb	r3, [r3, #0]
    e892:	2bff      	cmp	r3, #255	; 0xff
    e894:	d105      	bne.n	e8a2 <send_nav_values+0x102e>
    e896:	f24c 5349 	movw	r3, #50505	; 0xc549
    e89a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e89e:	2200      	movs	r2, #0
    e8a0:	701a      	strb	r2, [r3, #0]
    e8a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    e8a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8aa:	781b      	ldrb	r3, [r3, #0]
    e8ac:	461a      	mov	r2, r3
    e8ae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e8b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8b6:	7819      	ldrb	r1, [r3, #0]
    e8b8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e8bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8c0:	5499      	strb	r1, [r3, r2]
    e8c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    e8c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8ca:	781b      	ldrb	r3, [r3, #0]
    e8cc:	3301      	adds	r3, #1
    e8ce:	b2da      	uxtb	r2, r3
    e8d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    e8d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8d8:	701a      	strb	r2, [r3, #0]
    e8da:	f24c 5349 	movw	r3, #50505	; 0xc549
    e8de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8e2:	781b      	ldrb	r3, [r3, #0]
    e8e4:	2bff      	cmp	r3, #255	; 0xff
    e8e6:	d10f      	bne.n	e908 <send_nav_values+0x1094>
    e8e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    e8ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8f0:	2200      	movs	r2, #0
    e8f2:	701a      	strb	r2, [r3, #0]
    e8f4:	e008      	b.n	e908 <send_nav_values+0x1094>
    e8f6:	bf00      	nop
    e8f8:	2000055b 	.word	0x2000055b
    e8fc:	2004c8d9 	.word	0x2004c8d9
    e900:	2004c8da 	.word	0x2004c8da
    e904:	2004c8db 	.word	0x2004c8db
    e908:	f24c 5349 	movw	r3, #50505	; 0xc549
    e90c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e910:	781b      	ldrb	r3, [r3, #0]
    e912:	461a      	mov	r2, r3
    e914:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e918:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e91c:	7819      	ldrb	r1, [r3, #0]
    e91e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e922:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e926:	5499      	strb	r1, [r3, r2]
    e928:	f24c 5349 	movw	r3, #50505	; 0xc549
    e92c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e930:	781b      	ldrb	r3, [r3, #0]
    e932:	3301      	adds	r3, #1
    e934:	b2da      	uxtb	r2, r3
    e936:	f24c 5349 	movw	r3, #50505	; 0xc549
    e93a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e93e:	701a      	strb	r2, [r3, #0]
    e940:	f24c 5349 	movw	r3, #50505	; 0xc549
    e944:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e948:	781b      	ldrb	r3, [r3, #0]
    e94a:	2bff      	cmp	r3, #255	; 0xff
    e94c:	d105      	bne.n	e95a <send_nav_values+0x10e6>
    e94e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e952:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e956:	2200      	movs	r2, #0
    e958:	701a      	strb	r2, [r3, #0]
    e95a:	f242 0339 	movw	r3, #8249	; 0x2039
    e95e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e962:	781b      	ldrb	r3, [r3, #0]
    e964:	b2db      	uxtb	r3, r3
    e966:	f003 0310 	and.w	r3, r3, #16
    e96a:	2b00      	cmp	r3, #0
    e96c:	d15a      	bne.n	ea24 <send_nav_values+0x11b0>
    e96e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    e972:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e976:	781b      	ldrb	r3, [r3, #0]
    e978:	b2db      	uxtb	r3, r3
    e97a:	461a      	mov	r2, r3
    e97c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e980:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e984:	5c9a      	ldrb	r2, [r3, r2]
    e986:	f24c 634b 	movw	r3, #50763	; 0xc64b
    e98a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e98e:	701a      	strb	r2, [r3, #0]
    e990:	f24c 634c 	movw	r3, #50764	; 0xc64c
    e994:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e998:	2200      	movs	r2, #0
    e99a:	701a      	strb	r2, [r3, #0]
    e99c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    e9a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9a4:	781b      	ldrb	r3, [r3, #0]
    e9a6:	b2db      	uxtb	r3, r3
    e9a8:	3301      	adds	r3, #1
    e9aa:	b2da      	uxtb	r2, r3
    e9ac:	f24c 534a 	movw	r3, #50506	; 0xc54a
    e9b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9b4:	701a      	strb	r2, [r3, #0]
    e9b6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    e9ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9be:	781b      	ldrb	r3, [r3, #0]
    e9c0:	b2db      	uxtb	r3, r3
    e9c2:	2bff      	cmp	r3, #255	; 0xff
    e9c4:	d105      	bne.n	e9d2 <send_nav_values+0x115e>
    e9c6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    e9ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9ce:	2200      	movs	r2, #0
    e9d0:	701a      	strb	r2, [r3, #0]
    e9d2:	f242 0338 	movw	r3, #8248	; 0x2038
    e9d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9da:	f242 0238 	movw	r2, #8248	; 0x2038
    e9de:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e9e2:	7812      	ldrb	r2, [r2, #0]
    e9e4:	b2d2      	uxtb	r2, r2
    e9e6:	f042 0201 	orr.w	r2, r2, #1
    e9ea:	b2d2      	uxtb	r2, r2
    e9ec:	701a      	strb	r2, [r3, #0]
    e9ee:	f242 0339 	movw	r3, #8249	; 0x2039
    e9f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9f6:	f242 0239 	movw	r2, #8249	; 0x2039
    e9fa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e9fe:	7812      	ldrb	r2, [r2, #0]
    ea00:	b2d2      	uxtb	r2, r2
    ea02:	f042 0210 	orr.w	r2, r2, #16
    ea06:	b2d2      	uxtb	r2, r2
    ea08:	701a      	strb	r2, [r3, #0]
    ea0a:	e00b      	b.n	ea24 <send_nav_values+0x11b0>
    ea0c:	f24c 5348 	movw	r3, #50504	; 0xc548
    ea10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea14:	781b      	ldrb	r3, [r3, #0]
    ea16:	3301      	adds	r3, #1
    ea18:	b2da      	uxtb	r2, r3
    ea1a:	f24c 5348 	movw	r3, #50504	; 0xc548
    ea1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea22:	701a      	strb	r2, [r3, #0]
}
    ea24:	46bd      	mov	sp, r7
    ea26:	f85d 7b04 	ldr.w	r7, [sp], #4
    ea2a:	4770      	bx	lr

0000ea2c <course_run>:

void course_run(void){
    ea2c:	b580      	push	{r7, lr}
    ea2e:	af00      	add	r7, sp, #0
  
  if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    ea30:	f24c 532c 	movw	r3, #50476	; 0xc52c
    ea34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea38:	781b      	ldrb	r3, [r3, #0]
    ea3a:	2b02      	cmp	r3, #2
    ea3c:	d006      	beq.n	ea4c <course_run+0x20>
    ea3e:	f24c 532c 	movw	r3, #50476	; 0xc52c
    ea42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea46:	781b      	ldrb	r3, [r3, #0]
    ea48:	2b03      	cmp	r3, #3
    ea4a:	d112      	bne.n	ea72 <course_run+0x46>
  {
    if (lateral_mode >= LATERAL_MODE_COURSE)
    ea4c:	f24c 532e 	movw	r3, #50478	; 0xc52e
    ea50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea54:	781b      	ldrb	r3, [r3, #0]
    ea56:	2b02      	cmp	r3, #2
    ea58:	d901      	bls.n	ea5e <course_run+0x32>
      course_pid_run(); /* aka compute nav_desired_roll */
    ea5a:	f003 faf1 	bl	12040 <course_pid_run>
    desired_roll = nav_desired_roll;
    ea5e:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
    ea62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea66:	681a      	ldr	r2, [r3, #0]
    ea68:	f64c 0374 	movw	r3, #51316	; 0xc874
    ea6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea70:	601a      	str	r2, [r3, #0]
  }  
  //vPrintString("S_17 Navigation task end!\n\r");
}
    ea72:	bd80      	pop	{r7, pc}

0000ea74 <altitude_control_task>:

void altitude_control_task(void)
{
    ea74:	b580      	push	{r7, lr}
    ea76:	af00      	add	r7, sp, #0
	//vPrintString("S_18 navigation_task start! \n\r"); //SunnyBeike
	if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) {
    ea78:	f24c 532c 	movw	r3, #50476	; 0xc52c
    ea7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea80:	781b      	ldrb	r3, [r3, #0]
    ea82:	2b02      	cmp	r3, #2
    ea84:	d006      	beq.n	ea94 <altitude_control_task+0x20>
    ea86:	f24c 532c 	movw	r3, #50476	; 0xc52c
    ea8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea8e:	781b      	ldrb	r3, [r3, #0]
    ea90:	2b03      	cmp	r3, #3
    ea92:	d108      	bne.n	eaa6 <altitude_control_task+0x32>
		if (vertical_mode == VERTICAL_MODE_AUTO_ALT)
    ea94:	f24c 532d 	movw	r3, #50477	; 0xc52d
    ea98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea9c:	781b      	ldrb	r3, [r3, #0]
    ea9e:	2b03      	cmp	r3, #3
    eaa0:	d101      	bne.n	eaa6 <altitude_control_task+0x32>
      			altitude_pid_run();
    eaa2:	f003 fd55 	bl	12550 <altitude_pid_run>
	}
	//vPrintString("S_18 navigation_task end! \n\r"); //SunnyBeike
}
    eaa6:	bd80      	pop	{r7, pc}

0000eaa8 <climb_control_task>:
void climb_control_task(void)
{
    eaa8:	b580      	push	{r7, lr}
    eaaa:	af00      	add	r7, sp, #0
	//vPrintString("S_19 navigation_task start! \n\r"); //SunnyBeike
   if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    eaac:	f24c 532c 	movw	r3, #50476	; 0xc52c
    eab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eab4:	781b      	ldrb	r3, [r3, #0]
    eab6:	2b02      	cmp	r3, #2
    eab8:	d006      	beq.n	eac8 <climb_control_task+0x20>
    eaba:	f24c 532c 	movw	r3, #50476	; 0xc52c
    eabe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eac2:	781b      	ldrb	r3, [r3, #0]
    eac4:	2b03      	cmp	r3, #3
    eac6:	d135      	bne.n	eb34 <climb_control_task+0x8c>
   {
	if (vertical_mode >= VERTICAL_MODE_AUTO_CLIMB)
    eac8:	f24c 532d 	movw	r3, #50477	; 0xc52d
    eacc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ead0:	781b      	ldrb	r3, [r3, #0]
    ead2:	2b01      	cmp	r3, #1
    ead4:	d901      	bls.n	eada <climb_control_task+0x32>
        	climb_pid_run();
    ead6:	f003 fb6b 	bl	121b0 <climb_pid_run>
   	if (vertical_mode == VERTICAL_MODE_AUTO_GAZ)
    eada:	f24c 532d 	movw	r3, #50477	; 0xc52d
    eade:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eae2:	781b      	ldrb	r3, [r3, #0]
    eae4:	2b01      	cmp	r3, #1
    eae6:	d10a      	bne.n	eafe <climb_control_task+0x56>
   		 desired_gaz = nav_desired_gaz;
    eae8:	f64c 03c8 	movw	r3, #51400	; 0xc8c8
    eaec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eaf0:	881b      	ldrh	r3, [r3, #0]
    eaf2:	b29a      	uxth	r2, r3
    eaf4:	f64c 037c 	movw	r3, #51324	; 0xc87c
    eaf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eafc:	801a      	strh	r2, [r3, #0]
   	if (low_battery || (!estimator_flight_time && !launch))
    eafe:	f24c 5335 	movw	r3, #50485	; 0xc535
    eb02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb06:	781b      	ldrb	r3, [r3, #0]
    eb08:	2b00      	cmp	r3, #0
    eb0a:	d10d      	bne.n	eb28 <climb_control_task+0x80>
    eb0c:	f64c 332c 	movw	r3, #52012	; 0xcb2c
    eb10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb14:	881b      	ldrh	r3, [r3, #0]
    eb16:	2b00      	cmp	r3, #0
    eb18:	d10c      	bne.n	eb34 <climb_control_task+0x8c>
    eb1a:	f24c 5340 	movw	r3, #50496	; 0xc540
    eb1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb22:	781b      	ldrb	r3, [r3, #0]
    eb24:	2b00      	cmp	r3, #0
    eb26:	d105      	bne.n	eb34 <climb_control_task+0x8c>
   		 desired_gaz = 0.;
    eb28:	f64c 037c 	movw	r3, #51324	; 0xc87c
    eb2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb30:	2200      	movs	r2, #0
    eb32:	801a      	strh	r2, [r3, #0]
  }  
	//vPrintString("S_19 navigation_task end! \n\r"); //SunnyBeike
}
    eb34:	bd80      	pop	{r7, pc}
    eb36:	bf00      	nop

0000eb38 <stabilisation_task>:
//#endif
}
*/

void stabilisation_task(void)
{
    eb38:	b580      	push	{r7, lr}
    eb3a:	af00      	add	r7, sp, #0
	//vPrintString("S_6 stabilisation_task start! \n\r"); //SunnyBeike
    ir_update();
    eb3c:	f003 f926 	bl	11d8c <ir_update>
    estimator_update_state_infrared();
    eb40:	f006 fbac 	bl	1529c <estimator_update_state_infrared>
    roll_pitch_pid_run(); // Set  desired_aileron & desired_elevator
    eb44:	f003 f990 	bl	11e68 <roll_pitch_pid_run>
    to_fbw.channels[RADIO_THROTTLE] = desired_gaz; // desired_gaz is set upon GPS message reception
    eb48:	f64c 037c 	movw	r3, #51324	; 0xc87c
    eb4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb50:	881a      	ldrh	r2, [r3, #0]
    eb52:	f24c 6368 	movw	r3, #50792	; 0xc668
    eb56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb5a:	801a      	strh	r2, [r3, #0]
    to_fbw.channels[RADIO_ROLL] = desired_aileron;
    eb5c:	f64c 037e 	movw	r3, #51326	; 0xc87e
    eb60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb64:	881a      	ldrh	r2, [r3, #0]
    eb66:	f24c 6368 	movw	r3, #50792	; 0xc668
    eb6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb6e:	805a      	strh	r2, [r3, #2]
#ifndef ANTON_T7
    to_fbw.channels[RADIO_PITCH] = desired_elevator;
    eb70:	f64c 0380 	movw	r3, #51328	; 0xc880
    eb74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb78:	881a      	ldrh	r2, [r3, #0]
    eb7a:	f24c 6368 	movw	r3, #50792	; 0xc668
    eb7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb82:	809a      	strh	r2, [r3, #4]
#endif
    
    // Code for camera stabilization, FIXME put that elsewhere
    to_fbw.channels[RADIO_GAIN1] = TRIM_PPRZ(MAX_PPRZ/0.75*(-estimator_phi));
    eb84:	f64c 3308 	movw	r3, #51976	; 0xcb08
    eb88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb8c:	681b      	ldr	r3, [r3, #0]
    eb8e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    eb92:	4618      	mov	r0, r3
    eb94:	f008 fff8 	bl	17b88 <__aeabi_f2d>
    eb98:	4602      	mov	r2, r0
    eb9a:	460b      	mov	r3, r1
    eb9c:	4610      	mov	r0, r2
    eb9e:	4619      	mov	r1, r3
    eba0:	f04f 0200 	mov.w	r2, #0
    eba4:	f04f 0300 	mov.w	r3, #0
    eba8:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    ebac:	f009 f840 	bl	17c30 <__aeabi_dmul>
    ebb0:	4602      	mov	r2, r0
    ebb2:	460b      	mov	r3, r1
    ebb4:	4610      	mov	r0, r2
    ebb6:	4619      	mov	r1, r3
    ebb8:	f04f 0200 	mov.w	r2, #0
    ebbc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    ebc0:	f2cc 03c2 	movt	r3, #49346	; 0xc0c2
    ebc4:	f009 faa6 	bl	18114 <__aeabi_dcmplt>
    ebc8:	4603      	mov	r3, r0
    ebca:	2b00      	cmp	r3, #0
    ebcc:	d002      	beq.n	ebd4 <stabilisation_task+0x9c>
    ebce:	f64d 2280 	movw	r2, #55936	; 0xda80
    ebd2:	e046      	b.n	ec62 <stabilisation_task+0x12a>
    ebd4:	f64c 3308 	movw	r3, #51976	; 0xcb08
    ebd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebdc:	681b      	ldr	r3, [r3, #0]
    ebde:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    ebe2:	4618      	mov	r0, r3
    ebe4:	f008 ffd0 	bl	17b88 <__aeabi_f2d>
    ebe8:	4602      	mov	r2, r0
    ebea:	460b      	mov	r3, r1
    ebec:	4610      	mov	r0, r2
    ebee:	4619      	mov	r1, r3
    ebf0:	f04f 0200 	mov.w	r2, #0
    ebf4:	f04f 0300 	mov.w	r3, #0
    ebf8:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    ebfc:	f009 f818 	bl	17c30 <__aeabi_dmul>
    ec00:	4602      	mov	r2, r0
    ec02:	460b      	mov	r3, r1
    ec04:	4610      	mov	r0, r2
    ec06:	4619      	mov	r1, r3
    ec08:	f04f 0200 	mov.w	r2, #0
    ec0c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    ec10:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
    ec14:	f009 fa9c 	bl	18150 <__aeabi_dcmpgt>
    ec18:	4603      	mov	r3, r0
    ec1a:	2b00      	cmp	r3, #0
    ec1c:	d002      	beq.n	ec24 <stabilisation_task+0xec>
    ec1e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    ec22:	e01d      	b.n	ec60 <stabilisation_task+0x128>
    ec24:	f64c 3308 	movw	r3, #51976	; 0xcb08
    ec28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec2c:	681b      	ldr	r3, [r3, #0]
    ec2e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    ec32:	4618      	mov	r0, r3
    ec34:	f008 ffa8 	bl	17b88 <__aeabi_f2d>
    ec38:	4602      	mov	r2, r0
    ec3a:	460b      	mov	r3, r1
    ec3c:	4610      	mov	r0, r2
    ec3e:	4619      	mov	r1, r3
    ec40:	f04f 0200 	mov.w	r2, #0
    ec44:	f04f 0300 	mov.w	r3, #0
    ec48:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    ec4c:	f008 fff0 	bl	17c30 <__aeabi_dmul>
    ec50:	4602      	mov	r2, r0
    ec52:	460b      	mov	r3, r1
    ec54:	4610      	mov	r0, r2
    ec56:	4619      	mov	r1, r3
    ec58:	f009 fa84 	bl	18164 <__aeabi_d2iz>
    ec5c:	4603      	mov	r3, r0
    ec5e:	b29b      	uxth	r3, r3
    ec60:	b29a      	uxth	r2, r3
    ec62:	f24c 6368 	movw	r3, #50792	; 0xc668
    ec66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec6a:	815a      	strh	r2, [r3, #10]
	//vPrintString("S_6 stabilisation_task end! \n\r"); //SunnyBeike
}
    ec6c:	bd80      	pop	{r7, pc}
    ec6e:	bf00      	nop

0000ec70 <send_gps_pos>:
 * If \a estimator_flight_time is null and \a estimator_hspeed_mod is greater
 * than \a MIN_SPEED_FOR_TAKEOFF, set the \a estimator_flight_time to 1 and \a
 * launch to true (which is not set in non auto launch. Then call
 * \a DOWNLINK_SEND_TAKEOFF
 */
void send_gps_pos( void ) {
    ec70:	b580      	push	{r7, lr}
    ec72:	af00      	add	r7, sp, #0
  gps_msg_received = FALSE;
    ec74:	f24c 63dd 	movw	r3, #50909	; 0xc6dd
    ec78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec7c:	2200      	movs	r2, #0
    ec7e:	701a      	strb	r2, [r3, #0]
  if (gps_pos_available){
    ec80:	f24c 63de 	movw	r3, #50910	; 0xc6de
    ec84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec88:	781b      	ldrb	r3, [r3, #0]
    ec8a:	2b00      	cmp	r3, #0
    ec8c:	f001 81af 	beq.w	ffee <send_gps_pos+0x137e>
     DOWNLINK_SEND_GPS(&gps_mode, &gps_utm_east, &gps_utm_north, &gps_fcourse, &gps_falt, &gps_fspeed,&gps_fclimb, &gps_ftow);
    ec90:	f24c 5349 	movw	r3, #50505	; 0xc549
    ec94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec98:	781a      	ldrb	r2, [r3, #0]
    ec9a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ec9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eca2:	781b      	ldrb	r3, [r3, #0]
    eca4:	b2db      	uxtb	r3, r3
    eca6:	429a      	cmp	r2, r3
    eca8:	d313      	bcc.n	ecd2 <send_gps_pos+0x62>
    ecaa:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ecae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecb2:	781b      	ldrb	r3, [r3, #0]
    ecb4:	b2db      	uxtb	r3, r3
    ecb6:	461a      	mov	r2, r3
    ecb8:	f24c 5349 	movw	r3, #50505	; 0xc549
    ecbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecc0:	781b      	ldrb	r3, [r3, #0]
    ecc2:	1ad3      	subs	r3, r2, r3
    ecc4:	33ff      	adds	r3, #255	; 0xff
    ecc6:	2b21      	cmp	r3, #33	; 0x21
    ecc8:	bfd4      	ite	le
    ecca:	2300      	movle	r3, #0
    eccc:	2301      	movgt	r3, #1
    ecce:	b2db      	uxtb	r3, r3
    ecd0:	e011      	b.n	ecf6 <send_gps_pos+0x86>
    ecd2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ecd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecda:	781b      	ldrb	r3, [r3, #0]
    ecdc:	b2db      	uxtb	r3, r3
    ecde:	461a      	mov	r2, r3
    ece0:	f24c 5349 	movw	r3, #50505	; 0xc549
    ece4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ece8:	781b      	ldrb	r3, [r3, #0]
    ecea:	1ad3      	subs	r3, r2, r3
    ecec:	2b21      	cmp	r3, #33	; 0x21
    ecee:	bfd4      	ite	le
    ecf0:	2300      	movle	r3, #0
    ecf2:	2301      	movgt	r3, #1
    ecf4:	b2db      	uxtb	r3, r3
    ecf6:	2b00      	cmp	r3, #0
    ecf8:	f001 816b 	beq.w	ffd2 <send_gps_pos+0x1362>
    ecfc:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed04:	781b      	ldrb	r3, [r3, #0]
    ed06:	461a      	mov	r2, r3
    ed08:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ed0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed10:	2105      	movs	r1, #5
    ed12:	5499      	strb	r1, [r3, r2]
    ed14:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed1c:	781b      	ldrb	r3, [r3, #0]
    ed1e:	3301      	adds	r3, #1
    ed20:	b2da      	uxtb	r2, r3
    ed22:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed2a:	701a      	strb	r2, [r3, #0]
    ed2c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed34:	781b      	ldrb	r3, [r3, #0]
    ed36:	2bff      	cmp	r3, #255	; 0xff
    ed38:	d105      	bne.n	ed46 <send_gps_pos+0xd6>
    ed3a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed42:	2200      	movs	r2, #0
    ed44:	701a      	strb	r2, [r3, #0]
    ed46:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed4e:	781b      	ldrb	r3, [r3, #0]
    ed50:	461a      	mov	r2, r3
    ed52:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ed56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed5a:	2108      	movs	r1, #8
    ed5c:	5499      	strb	r1, [r3, r2]
    ed5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed66:	781b      	ldrb	r3, [r3, #0]
    ed68:	3301      	adds	r3, #1
    ed6a:	b2da      	uxtb	r2, r3
    ed6c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed74:	701a      	strb	r2, [r3, #0]
    ed76:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed7e:	781b      	ldrb	r3, [r3, #0]
    ed80:	2bff      	cmp	r3, #255	; 0xff
    ed82:	d105      	bne.n	ed90 <send_gps_pos+0x120>
    ed84:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed8c:	2200      	movs	r2, #0
    ed8e:	701a      	strb	r2, [r3, #0]
    ed90:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ed94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed98:	2208      	movs	r2, #8
    ed9a:	701a      	strb	r2, [r3, #0]
    ed9c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    eda0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eda4:	2208      	movs	r2, #8
    eda6:	701a      	strb	r2, [r3, #0]
    eda8:	f24c 5349 	movw	r3, #50505	; 0xc549
    edac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edb0:	781b      	ldrb	r3, [r3, #0]
    edb2:	461a      	mov	r2, r3
    edb4:	f24c 63dc 	movw	r3, #50908	; 0xc6dc
    edb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edbc:	7819      	ldrb	r1, [r3, #0]
    edbe:	f24c 534c 	movw	r3, #50508	; 0xc54c
    edc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edc6:	5499      	strb	r1, [r3, r2]
    edc8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    edcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edd0:	781a      	ldrb	r2, [r3, #0]
    edd2:	f24c 63dc 	movw	r3, #50908	; 0xc6dc
    edd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edda:	781b      	ldrb	r3, [r3, #0]
    eddc:	4413      	add	r3, r2
    edde:	b2da      	uxtb	r2, r3
    ede0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ede4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ede8:	701a      	strb	r2, [r3, #0]
    edea:	f24c 634e 	movw	r3, #50766	; 0xc64e
    edee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edf2:	781a      	ldrb	r2, [r3, #0]
    edf4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    edf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edfc:	781b      	ldrb	r3, [r3, #0]
    edfe:	4413      	add	r3, r2
    ee00:	b2da      	uxtb	r2, r3
    ee02:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ee06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee0a:	701a      	strb	r2, [r3, #0]
    ee0c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee14:	781b      	ldrb	r3, [r3, #0]
    ee16:	3301      	adds	r3, #1
    ee18:	b2da      	uxtb	r2, r3
    ee1a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee22:	701a      	strb	r2, [r3, #0]
    ee24:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee2c:	781b      	ldrb	r3, [r3, #0]
    ee2e:	2bff      	cmp	r3, #255	; 0xff
    ee30:	d105      	bne.n	ee3e <send_gps_pos+0x1ce>
    ee32:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee3a:	2200      	movs	r2, #0
    ee3c:	701a      	strb	r2, [r3, #0]
    ee3e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee46:	781b      	ldrb	r3, [r3, #0]
    ee48:	461a      	mov	r2, r3
    ee4a:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    ee4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee52:	7819      	ldrb	r1, [r3, #0]
    ee54:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ee58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee5c:	5499      	strb	r1, [r3, r2]
    ee5e:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    ee62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee66:	781a      	ldrb	r2, [r3, #0]
    ee68:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ee6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee70:	781b      	ldrb	r3, [r3, #0]
    ee72:	4413      	add	r3, r2
    ee74:	b2da      	uxtb	r2, r3
    ee76:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ee7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee7e:	701a      	strb	r2, [r3, #0]
    ee80:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ee84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee88:	781a      	ldrb	r2, [r3, #0]
    ee8a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ee8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee92:	781b      	ldrb	r3, [r3, #0]
    ee94:	4413      	add	r3, r2
    ee96:	b2da      	uxtb	r2, r3
    ee98:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ee9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eea0:	701a      	strb	r2, [r3, #0]
    eea2:	f24c 5349 	movw	r3, #50505	; 0xc549
    eea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeaa:	781b      	ldrb	r3, [r3, #0]
    eeac:	3301      	adds	r3, #1
    eeae:	b2da      	uxtb	r2, r3
    eeb0:	f24c 5349 	movw	r3, #50505	; 0xc549
    eeb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeb8:	701a      	strb	r2, [r3, #0]
    eeba:	f24c 5349 	movw	r3, #50505	; 0xc549
    eebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eec2:	781b      	ldrb	r3, [r3, #0]
    eec4:	2bff      	cmp	r3, #255	; 0xff
    eec6:	d105      	bne.n	eed4 <send_gps_pos+0x264>
    eec8:	f24c 5349 	movw	r3, #50505	; 0xc549
    eecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eed0:	2200      	movs	r2, #0
    eed2:	701a      	strb	r2, [r3, #0]
    eed4:	f24c 5349 	movw	r3, #50505	; 0xc549
    eed8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eedc:	781b      	ldrb	r3, [r3, #0]
    eede:	461a      	mov	r2, r3
    eee0:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    eee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eee8:	7859      	ldrb	r1, [r3, #1]
    eeea:	f24c 534c 	movw	r3, #50508	; 0xc54c
    eeee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eef2:	5499      	strb	r1, [r3, r2]
    eef4:	4bd1      	ldr	r3, [pc, #836]	; (f23c <send_gps_pos+0x5cc>)
    eef6:	781a      	ldrb	r2, [r3, #0]
    eef8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    eefc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef00:	781b      	ldrb	r3, [r3, #0]
    ef02:	4413      	add	r3, r2
    ef04:	b2da      	uxtb	r2, r3
    ef06:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ef0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef0e:	701a      	strb	r2, [r3, #0]
    ef10:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ef14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef18:	781a      	ldrb	r2, [r3, #0]
    ef1a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ef1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef22:	781b      	ldrb	r3, [r3, #0]
    ef24:	4413      	add	r3, r2
    ef26:	b2da      	uxtb	r2, r3
    ef28:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ef2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef30:	701a      	strb	r2, [r3, #0]
    ef32:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef3a:	781b      	ldrb	r3, [r3, #0]
    ef3c:	3301      	adds	r3, #1
    ef3e:	b2da      	uxtb	r2, r3
    ef40:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef48:	701a      	strb	r2, [r3, #0]
    ef4a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef52:	781b      	ldrb	r3, [r3, #0]
    ef54:	2bff      	cmp	r3, #255	; 0xff
    ef56:	d105      	bne.n	ef64 <send_gps_pos+0x2f4>
    ef58:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef60:	2200      	movs	r2, #0
    ef62:	701a      	strb	r2, [r3, #0]
    ef64:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef6c:	781b      	ldrb	r3, [r3, #0]
    ef6e:	461a      	mov	r2, r3
    ef70:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    ef74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef78:	7899      	ldrb	r1, [r3, #2]
    ef7a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ef7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef82:	5499      	strb	r1, [r3, r2]
    ef84:	4bae      	ldr	r3, [pc, #696]	; (f240 <send_gps_pos+0x5d0>)
    ef86:	781a      	ldrb	r2, [r3, #0]
    ef88:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ef8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef90:	781b      	ldrb	r3, [r3, #0]
    ef92:	4413      	add	r3, r2
    ef94:	b2da      	uxtb	r2, r3
    ef96:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ef9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef9e:	701a      	strb	r2, [r3, #0]
    efa0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    efa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efa8:	781a      	ldrb	r2, [r3, #0]
    efaa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    efae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efb2:	781b      	ldrb	r3, [r3, #0]
    efb4:	4413      	add	r3, r2
    efb6:	b2da      	uxtb	r2, r3
    efb8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    efbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efc0:	701a      	strb	r2, [r3, #0]
    efc2:	f24c 5349 	movw	r3, #50505	; 0xc549
    efc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efca:	781b      	ldrb	r3, [r3, #0]
    efcc:	3301      	adds	r3, #1
    efce:	b2da      	uxtb	r2, r3
    efd0:	f24c 5349 	movw	r3, #50505	; 0xc549
    efd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efd8:	701a      	strb	r2, [r3, #0]
    efda:	f24c 5349 	movw	r3, #50505	; 0xc549
    efde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efe2:	781b      	ldrb	r3, [r3, #0]
    efe4:	2bff      	cmp	r3, #255	; 0xff
    efe6:	d105      	bne.n	eff4 <send_gps_pos+0x384>
    efe8:	f24c 5349 	movw	r3, #50505	; 0xc549
    efec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eff0:	2200      	movs	r2, #0
    eff2:	701a      	strb	r2, [r3, #0]
    eff4:	f24c 5349 	movw	r3, #50505	; 0xc549
    eff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    effc:	781b      	ldrb	r3, [r3, #0]
    effe:	461a      	mov	r2, r3
    f000:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    f004:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f008:	78d9      	ldrb	r1, [r3, #3]
    f00a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f00e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f012:	5499      	strb	r1, [r3, r2]
    f014:	4b8b      	ldr	r3, [pc, #556]	; (f244 <send_gps_pos+0x5d4>)
    f016:	781a      	ldrb	r2, [r3, #0]
    f018:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f01c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f020:	781b      	ldrb	r3, [r3, #0]
    f022:	4413      	add	r3, r2
    f024:	b2da      	uxtb	r2, r3
    f026:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f02a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f02e:	701a      	strb	r2, [r3, #0]
    f030:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f034:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f038:	781a      	ldrb	r2, [r3, #0]
    f03a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f03e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f042:	781b      	ldrb	r3, [r3, #0]
    f044:	4413      	add	r3, r2
    f046:	b2da      	uxtb	r2, r3
    f048:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f04c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f050:	701a      	strb	r2, [r3, #0]
    f052:	f24c 5349 	movw	r3, #50505	; 0xc549
    f056:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f05a:	781b      	ldrb	r3, [r3, #0]
    f05c:	3301      	adds	r3, #1
    f05e:	b2da      	uxtb	r2, r3
    f060:	f24c 5349 	movw	r3, #50505	; 0xc549
    f064:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f068:	701a      	strb	r2, [r3, #0]
    f06a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f06e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f072:	781b      	ldrb	r3, [r3, #0]
    f074:	2bff      	cmp	r3, #255	; 0xff
    f076:	d105      	bne.n	f084 <send_gps_pos+0x414>
    f078:	f24c 5349 	movw	r3, #50505	; 0xc549
    f07c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f080:	2200      	movs	r2, #0
    f082:	701a      	strb	r2, [r3, #0]
    f084:	f24c 5349 	movw	r3, #50505	; 0xc549
    f088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f08c:	781b      	ldrb	r3, [r3, #0]
    f08e:	461a      	mov	r2, r3
    f090:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    f094:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f098:	7819      	ldrb	r1, [r3, #0]
    f09a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f09e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0a2:	5499      	strb	r1, [r3, r2]
    f0a4:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    f0a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0ac:	781a      	ldrb	r2, [r3, #0]
    f0ae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f0b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0b6:	781b      	ldrb	r3, [r3, #0]
    f0b8:	4413      	add	r3, r2
    f0ba:	b2da      	uxtb	r2, r3
    f0bc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f0c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0c4:	701a      	strb	r2, [r3, #0]
    f0c6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f0ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0ce:	781a      	ldrb	r2, [r3, #0]
    f0d0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f0d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0d8:	781b      	ldrb	r3, [r3, #0]
    f0da:	4413      	add	r3, r2
    f0dc:	b2da      	uxtb	r2, r3
    f0de:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f0e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0e6:	701a      	strb	r2, [r3, #0]
    f0e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    f0ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0f0:	781b      	ldrb	r3, [r3, #0]
    f0f2:	3301      	adds	r3, #1
    f0f4:	b2da      	uxtb	r2, r3
    f0f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    f0fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0fe:	701a      	strb	r2, [r3, #0]
    f100:	f24c 5349 	movw	r3, #50505	; 0xc549
    f104:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f108:	781b      	ldrb	r3, [r3, #0]
    f10a:	2bff      	cmp	r3, #255	; 0xff
    f10c:	d105      	bne.n	f11a <send_gps_pos+0x4aa>
    f10e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f112:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f116:	2200      	movs	r2, #0
    f118:	701a      	strb	r2, [r3, #0]
    f11a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f11e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f122:	781b      	ldrb	r3, [r3, #0]
    f124:	461a      	mov	r2, r3
    f126:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    f12a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f12e:	7859      	ldrb	r1, [r3, #1]
    f130:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f134:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f138:	5499      	strb	r1, [r3, r2]
    f13a:	4b43      	ldr	r3, [pc, #268]	; (f248 <send_gps_pos+0x5d8>)
    f13c:	781a      	ldrb	r2, [r3, #0]
    f13e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f142:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f146:	781b      	ldrb	r3, [r3, #0]
    f148:	4413      	add	r3, r2
    f14a:	b2da      	uxtb	r2, r3
    f14c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f150:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f154:	701a      	strb	r2, [r3, #0]
    f156:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f15a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f15e:	781a      	ldrb	r2, [r3, #0]
    f160:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f164:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f168:	781b      	ldrb	r3, [r3, #0]
    f16a:	4413      	add	r3, r2
    f16c:	b2da      	uxtb	r2, r3
    f16e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f172:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f176:	701a      	strb	r2, [r3, #0]
    f178:	f24c 5349 	movw	r3, #50505	; 0xc549
    f17c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f180:	781b      	ldrb	r3, [r3, #0]
    f182:	3301      	adds	r3, #1
    f184:	b2da      	uxtb	r2, r3
    f186:	f24c 5349 	movw	r3, #50505	; 0xc549
    f18a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f18e:	701a      	strb	r2, [r3, #0]
    f190:	f24c 5349 	movw	r3, #50505	; 0xc549
    f194:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f198:	781b      	ldrb	r3, [r3, #0]
    f19a:	2bff      	cmp	r3, #255	; 0xff
    f19c:	d105      	bne.n	f1aa <send_gps_pos+0x53a>
    f19e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f1a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1a6:	2200      	movs	r2, #0
    f1a8:	701a      	strb	r2, [r3, #0]
    f1aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    f1ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1b2:	781b      	ldrb	r3, [r3, #0]
    f1b4:	461a      	mov	r2, r3
    f1b6:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    f1ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1be:	7899      	ldrb	r1, [r3, #2]
    f1c0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f1c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1c8:	5499      	strb	r1, [r3, r2]
    f1ca:	4b20      	ldr	r3, [pc, #128]	; (f24c <send_gps_pos+0x5dc>)
    f1cc:	781a      	ldrb	r2, [r3, #0]
    f1ce:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f1d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1d6:	781b      	ldrb	r3, [r3, #0]
    f1d8:	4413      	add	r3, r2
    f1da:	b2da      	uxtb	r2, r3
    f1dc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f1e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1e4:	701a      	strb	r2, [r3, #0]
    f1e6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f1ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1ee:	781a      	ldrb	r2, [r3, #0]
    f1f0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f1f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1f8:	781b      	ldrb	r3, [r3, #0]
    f1fa:	4413      	add	r3, r2
    f1fc:	b2da      	uxtb	r2, r3
    f1fe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f202:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f206:	701a      	strb	r2, [r3, #0]
    f208:	f24c 5349 	movw	r3, #50505	; 0xc549
    f20c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f210:	781b      	ldrb	r3, [r3, #0]
    f212:	3301      	adds	r3, #1
    f214:	b2da      	uxtb	r2, r3
    f216:	f24c 5349 	movw	r3, #50505	; 0xc549
    f21a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f21e:	701a      	strb	r2, [r3, #0]
    f220:	f24c 5349 	movw	r3, #50505	; 0xc549
    f224:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f228:	781b      	ldrb	r3, [r3, #0]
    f22a:	2bff      	cmp	r3, #255	; 0xff
    f22c:	d110      	bne.n	f250 <send_gps_pos+0x5e0>
    f22e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f232:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f236:	2200      	movs	r2, #0
    f238:	701a      	strb	r2, [r3, #0]
    f23a:	e009      	b.n	f250 <send_gps_pos+0x5e0>
    f23c:	2004c6cd 	.word	0x2004c6cd
    f240:	2004c6ce 	.word	0x2004c6ce
    f244:	2004c6cf 	.word	0x2004c6cf
    f248:	2004c6d1 	.word	0x2004c6d1
    f24c:	2004c6d2 	.word	0x2004c6d2
    f250:	f24c 5349 	movw	r3, #50505	; 0xc549
    f254:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f258:	781b      	ldrb	r3, [r3, #0]
    f25a:	461a      	mov	r2, r3
    f25c:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    f260:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f264:	78d9      	ldrb	r1, [r3, #3]
    f266:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f26a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f26e:	5499      	strb	r1, [r3, r2]
    f270:	4bd3      	ldr	r3, [pc, #844]	; (f5c0 <send_gps_pos+0x950>)
    f272:	781a      	ldrb	r2, [r3, #0]
    f274:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f278:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f27c:	781b      	ldrb	r3, [r3, #0]
    f27e:	4413      	add	r3, r2
    f280:	b2da      	uxtb	r2, r3
    f282:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f286:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f28a:	701a      	strb	r2, [r3, #0]
    f28c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f290:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f294:	781a      	ldrb	r2, [r3, #0]
    f296:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f29a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f29e:	781b      	ldrb	r3, [r3, #0]
    f2a0:	4413      	add	r3, r2
    f2a2:	b2da      	uxtb	r2, r3
    f2a4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f2a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2ac:	701a      	strb	r2, [r3, #0]
    f2ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    f2b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2b6:	781b      	ldrb	r3, [r3, #0]
    f2b8:	3301      	adds	r3, #1
    f2ba:	b2da      	uxtb	r2, r3
    f2bc:	f24c 5349 	movw	r3, #50505	; 0xc549
    f2c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2c4:	701a      	strb	r2, [r3, #0]
    f2c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    f2ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2ce:	781b      	ldrb	r3, [r3, #0]
    f2d0:	2bff      	cmp	r3, #255	; 0xff
    f2d2:	d105      	bne.n	f2e0 <send_gps_pos+0x670>
    f2d4:	f24c 5349 	movw	r3, #50505	; 0xc549
    f2d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2dc:	2200      	movs	r2, #0
    f2de:	701a      	strb	r2, [r3, #0]
    f2e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    f2e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2e8:	781b      	ldrb	r3, [r3, #0]
    f2ea:	461a      	mov	r2, r3
    f2ec:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f2f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2f4:	7819      	ldrb	r1, [r3, #0]
    f2f6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f2fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2fe:	5499      	strb	r1, [r3, r2]
    f300:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f304:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f308:	781a      	ldrb	r2, [r3, #0]
    f30a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f30e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f312:	781b      	ldrb	r3, [r3, #0]
    f314:	4413      	add	r3, r2
    f316:	b2da      	uxtb	r2, r3
    f318:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f31c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f320:	701a      	strb	r2, [r3, #0]
    f322:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f326:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f32a:	781a      	ldrb	r2, [r3, #0]
    f32c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f330:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f334:	781b      	ldrb	r3, [r3, #0]
    f336:	4413      	add	r3, r2
    f338:	b2da      	uxtb	r2, r3
    f33a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f33e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f342:	701a      	strb	r2, [r3, #0]
    f344:	f24c 5349 	movw	r3, #50505	; 0xc549
    f348:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f34c:	781b      	ldrb	r3, [r3, #0]
    f34e:	3301      	adds	r3, #1
    f350:	b2da      	uxtb	r2, r3
    f352:	f24c 5349 	movw	r3, #50505	; 0xc549
    f356:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f35a:	701a      	strb	r2, [r3, #0]
    f35c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f360:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f364:	781b      	ldrb	r3, [r3, #0]
    f366:	2bff      	cmp	r3, #255	; 0xff
    f368:	d105      	bne.n	f376 <send_gps_pos+0x706>
    f36a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f36e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f372:	2200      	movs	r2, #0
    f374:	701a      	strb	r2, [r3, #0]
    f376:	f24c 5349 	movw	r3, #50505	; 0xc549
    f37a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f37e:	781b      	ldrb	r3, [r3, #0]
    f380:	461a      	mov	r2, r3
    f382:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f386:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f38a:	7859      	ldrb	r1, [r3, #1]
    f38c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f390:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f394:	5499      	strb	r1, [r3, r2]
    f396:	4b8b      	ldr	r3, [pc, #556]	; (f5c4 <send_gps_pos+0x954>)
    f398:	781a      	ldrb	r2, [r3, #0]
    f39a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f39e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3a2:	781b      	ldrb	r3, [r3, #0]
    f3a4:	4413      	add	r3, r2
    f3a6:	b2da      	uxtb	r2, r3
    f3a8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f3ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3b0:	701a      	strb	r2, [r3, #0]
    f3b2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f3b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3ba:	781a      	ldrb	r2, [r3, #0]
    f3bc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f3c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3c4:	781b      	ldrb	r3, [r3, #0]
    f3c6:	4413      	add	r3, r2
    f3c8:	b2da      	uxtb	r2, r3
    f3ca:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f3ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3d2:	701a      	strb	r2, [r3, #0]
    f3d4:	f24c 5349 	movw	r3, #50505	; 0xc549
    f3d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3dc:	781b      	ldrb	r3, [r3, #0]
    f3de:	3301      	adds	r3, #1
    f3e0:	b2da      	uxtb	r2, r3
    f3e2:	f24c 5349 	movw	r3, #50505	; 0xc549
    f3e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3ea:	701a      	strb	r2, [r3, #0]
    f3ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    f3f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3f4:	781b      	ldrb	r3, [r3, #0]
    f3f6:	2bff      	cmp	r3, #255	; 0xff
    f3f8:	d105      	bne.n	f406 <send_gps_pos+0x796>
    f3fa:	f24c 5349 	movw	r3, #50505	; 0xc549
    f3fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f402:	2200      	movs	r2, #0
    f404:	701a      	strb	r2, [r3, #0]
    f406:	f24c 5349 	movw	r3, #50505	; 0xc549
    f40a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f40e:	781b      	ldrb	r3, [r3, #0]
    f410:	461a      	mov	r2, r3
    f412:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f41a:	7899      	ldrb	r1, [r3, #2]
    f41c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f420:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f424:	5499      	strb	r1, [r3, r2]
    f426:	4b68      	ldr	r3, [pc, #416]	; (f5c8 <send_gps_pos+0x958>)
    f428:	781a      	ldrb	r2, [r3, #0]
    f42a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f42e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f432:	781b      	ldrb	r3, [r3, #0]
    f434:	4413      	add	r3, r2
    f436:	b2da      	uxtb	r2, r3
    f438:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f43c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f440:	701a      	strb	r2, [r3, #0]
    f442:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f446:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f44a:	781a      	ldrb	r2, [r3, #0]
    f44c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f450:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f454:	781b      	ldrb	r3, [r3, #0]
    f456:	4413      	add	r3, r2
    f458:	b2da      	uxtb	r2, r3
    f45a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f45e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f462:	701a      	strb	r2, [r3, #0]
    f464:	f24c 5349 	movw	r3, #50505	; 0xc549
    f468:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f46c:	781b      	ldrb	r3, [r3, #0]
    f46e:	3301      	adds	r3, #1
    f470:	b2da      	uxtb	r2, r3
    f472:	f24c 5349 	movw	r3, #50505	; 0xc549
    f476:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f47a:	701a      	strb	r2, [r3, #0]
    f47c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f480:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f484:	781b      	ldrb	r3, [r3, #0]
    f486:	2bff      	cmp	r3, #255	; 0xff
    f488:	d105      	bne.n	f496 <send_gps_pos+0x826>
    f48a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f48e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f492:	2200      	movs	r2, #0
    f494:	701a      	strb	r2, [r3, #0]
    f496:	f24c 5349 	movw	r3, #50505	; 0xc549
    f49a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f49e:	781b      	ldrb	r3, [r3, #0]
    f4a0:	461a      	mov	r2, r3
    f4a2:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f4a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4aa:	78d9      	ldrb	r1, [r3, #3]
    f4ac:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f4b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4b4:	5499      	strb	r1, [r3, r2]
    f4b6:	4b45      	ldr	r3, [pc, #276]	; (f5cc <send_gps_pos+0x95c>)
    f4b8:	781a      	ldrb	r2, [r3, #0]
    f4ba:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f4be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4c2:	781b      	ldrb	r3, [r3, #0]
    f4c4:	4413      	add	r3, r2
    f4c6:	b2da      	uxtb	r2, r3
    f4c8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f4cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4d0:	701a      	strb	r2, [r3, #0]
    f4d2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f4d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4da:	781a      	ldrb	r2, [r3, #0]
    f4dc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f4e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4e4:	781b      	ldrb	r3, [r3, #0]
    f4e6:	4413      	add	r3, r2
    f4e8:	b2da      	uxtb	r2, r3
    f4ea:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f4ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4f2:	701a      	strb	r2, [r3, #0]
    f4f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    f4f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4fc:	781b      	ldrb	r3, [r3, #0]
    f4fe:	3301      	adds	r3, #1
    f500:	b2da      	uxtb	r2, r3
    f502:	f24c 5349 	movw	r3, #50505	; 0xc549
    f506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f50a:	701a      	strb	r2, [r3, #0]
    f50c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f510:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f514:	781b      	ldrb	r3, [r3, #0]
    f516:	2bff      	cmp	r3, #255	; 0xff
    f518:	d105      	bne.n	f526 <send_gps_pos+0x8b6>
    f51a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f51e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f522:	2200      	movs	r2, #0
    f524:	701a      	strb	r2, [r3, #0]
    f526:	f24c 5349 	movw	r3, #50505	; 0xc549
    f52a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f52e:	781b      	ldrb	r3, [r3, #0]
    f530:	461a      	mov	r2, r3
    f532:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f536:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f53a:	7819      	ldrb	r1, [r3, #0]
    f53c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f540:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f544:	5499      	strb	r1, [r3, r2]
    f546:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f54a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f54e:	781a      	ldrb	r2, [r3, #0]
    f550:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f554:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f558:	781b      	ldrb	r3, [r3, #0]
    f55a:	4413      	add	r3, r2
    f55c:	b2da      	uxtb	r2, r3
    f55e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f562:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f566:	701a      	strb	r2, [r3, #0]
    f568:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f56c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f570:	781a      	ldrb	r2, [r3, #0]
    f572:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f576:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f57a:	781b      	ldrb	r3, [r3, #0]
    f57c:	4413      	add	r3, r2
    f57e:	b2da      	uxtb	r2, r3
    f580:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f588:	701a      	strb	r2, [r3, #0]
    f58a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f58e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f592:	781b      	ldrb	r3, [r3, #0]
    f594:	3301      	adds	r3, #1
    f596:	b2da      	uxtb	r2, r3
    f598:	f24c 5349 	movw	r3, #50505	; 0xc549
    f59c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5a0:	701a      	strb	r2, [r3, #0]
    f5a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    f5a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5aa:	781b      	ldrb	r3, [r3, #0]
    f5ac:	2bff      	cmp	r3, #255	; 0xff
    f5ae:	d10f      	bne.n	f5d0 <send_gps_pos+0x960>
    f5b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    f5b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5b8:	2200      	movs	r2, #0
    f5ba:	701a      	strb	r2, [r3, #0]
    f5bc:	e008      	b.n	f5d0 <send_gps_pos+0x960>
    f5be:	bf00      	nop
    f5c0:	2004c6d3 	.word	0x2004c6d3
    f5c4:	2004c6c9 	.word	0x2004c6c9
    f5c8:	2004c6ca 	.word	0x2004c6ca
    f5cc:	2004c6cb 	.word	0x2004c6cb
    f5d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    f5d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5d8:	781b      	ldrb	r3, [r3, #0]
    f5da:	461a      	mov	r2, r3
    f5dc:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f5e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5e4:	7859      	ldrb	r1, [r3, #1]
    f5e6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f5ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5ee:	5499      	strb	r1, [r3, r2]
    f5f0:	4bd1      	ldr	r3, [pc, #836]	; (f938 <send_gps_pos+0xcc8>)
    f5f2:	781a      	ldrb	r2, [r3, #0]
    f5f4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f5f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5fc:	781b      	ldrb	r3, [r3, #0]
    f5fe:	4413      	add	r3, r2
    f600:	b2da      	uxtb	r2, r3
    f602:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f606:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f60a:	701a      	strb	r2, [r3, #0]
    f60c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f614:	781a      	ldrb	r2, [r3, #0]
    f616:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f61a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f61e:	781b      	ldrb	r3, [r3, #0]
    f620:	4413      	add	r3, r2
    f622:	b2da      	uxtb	r2, r3
    f624:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f62c:	701a      	strb	r2, [r3, #0]
    f62e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f636:	781b      	ldrb	r3, [r3, #0]
    f638:	3301      	adds	r3, #1
    f63a:	b2da      	uxtb	r2, r3
    f63c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f640:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f644:	701a      	strb	r2, [r3, #0]
    f646:	f24c 5349 	movw	r3, #50505	; 0xc549
    f64a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f64e:	781b      	ldrb	r3, [r3, #0]
    f650:	2bff      	cmp	r3, #255	; 0xff
    f652:	d105      	bne.n	f660 <send_gps_pos+0x9f0>
    f654:	f24c 5349 	movw	r3, #50505	; 0xc549
    f658:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f65c:	2200      	movs	r2, #0
    f65e:	701a      	strb	r2, [r3, #0]
    f660:	f24c 5349 	movw	r3, #50505	; 0xc549
    f664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f668:	781b      	ldrb	r3, [r3, #0]
    f66a:	461a      	mov	r2, r3
    f66c:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f670:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f674:	7899      	ldrb	r1, [r3, #2]
    f676:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f67a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f67e:	5499      	strb	r1, [r3, r2]
    f680:	4bae      	ldr	r3, [pc, #696]	; (f93c <send_gps_pos+0xccc>)
    f682:	781a      	ldrb	r2, [r3, #0]
    f684:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f688:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f68c:	781b      	ldrb	r3, [r3, #0]
    f68e:	4413      	add	r3, r2
    f690:	b2da      	uxtb	r2, r3
    f692:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f696:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f69a:	701a      	strb	r2, [r3, #0]
    f69c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f6a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6a4:	781a      	ldrb	r2, [r3, #0]
    f6a6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f6aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6ae:	781b      	ldrb	r3, [r3, #0]
    f6b0:	4413      	add	r3, r2
    f6b2:	b2da      	uxtb	r2, r3
    f6b4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f6b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6bc:	701a      	strb	r2, [r3, #0]
    f6be:	f24c 5349 	movw	r3, #50505	; 0xc549
    f6c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6c6:	781b      	ldrb	r3, [r3, #0]
    f6c8:	3301      	adds	r3, #1
    f6ca:	b2da      	uxtb	r2, r3
    f6cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    f6d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6d4:	701a      	strb	r2, [r3, #0]
    f6d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    f6da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6de:	781b      	ldrb	r3, [r3, #0]
    f6e0:	2bff      	cmp	r3, #255	; 0xff
    f6e2:	d105      	bne.n	f6f0 <send_gps_pos+0xa80>
    f6e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    f6e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6ec:	2200      	movs	r2, #0
    f6ee:	701a      	strb	r2, [r3, #0]
    f6f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    f6f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6f8:	781b      	ldrb	r3, [r3, #0]
    f6fa:	461a      	mov	r2, r3
    f6fc:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f704:	78d9      	ldrb	r1, [r3, #3]
    f706:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f70a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f70e:	5499      	strb	r1, [r3, r2]
    f710:	4b8b      	ldr	r3, [pc, #556]	; (f940 <send_gps_pos+0xcd0>)
    f712:	781a      	ldrb	r2, [r3, #0]
    f714:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f718:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f71c:	781b      	ldrb	r3, [r3, #0]
    f71e:	4413      	add	r3, r2
    f720:	b2da      	uxtb	r2, r3
    f722:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f726:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f72a:	701a      	strb	r2, [r3, #0]
    f72c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f730:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f734:	781a      	ldrb	r2, [r3, #0]
    f736:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f73a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f73e:	781b      	ldrb	r3, [r3, #0]
    f740:	4413      	add	r3, r2
    f742:	b2da      	uxtb	r2, r3
    f744:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f748:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f74c:	701a      	strb	r2, [r3, #0]
    f74e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f756:	781b      	ldrb	r3, [r3, #0]
    f758:	3301      	adds	r3, #1
    f75a:	b2da      	uxtb	r2, r3
    f75c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f760:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f764:	701a      	strb	r2, [r3, #0]
    f766:	f24c 5349 	movw	r3, #50505	; 0xc549
    f76a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f76e:	781b      	ldrb	r3, [r3, #0]
    f770:	2bff      	cmp	r3, #255	; 0xff
    f772:	d105      	bne.n	f780 <send_gps_pos+0xb10>
    f774:	f24c 5349 	movw	r3, #50505	; 0xc549
    f778:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f77c:	2200      	movs	r2, #0
    f77e:	701a      	strb	r2, [r3, #0]
    f780:	f24c 5349 	movw	r3, #50505	; 0xc549
    f784:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f788:	781b      	ldrb	r3, [r3, #0]
    f78a:	461a      	mov	r2, r3
    f78c:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f790:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f794:	7819      	ldrb	r1, [r3, #0]
    f796:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f79a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f79e:	5499      	strb	r1, [r3, r2]
    f7a0:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f7a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7a8:	781a      	ldrb	r2, [r3, #0]
    f7aa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f7ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7b2:	781b      	ldrb	r3, [r3, #0]
    f7b4:	4413      	add	r3, r2
    f7b6:	b2da      	uxtb	r2, r3
    f7b8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f7bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7c0:	701a      	strb	r2, [r3, #0]
    f7c2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f7c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7ca:	781a      	ldrb	r2, [r3, #0]
    f7cc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f7d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7d4:	781b      	ldrb	r3, [r3, #0]
    f7d6:	4413      	add	r3, r2
    f7d8:	b2da      	uxtb	r2, r3
    f7da:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f7de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7e2:	701a      	strb	r2, [r3, #0]
    f7e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    f7e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7ec:	781b      	ldrb	r3, [r3, #0]
    f7ee:	3301      	adds	r3, #1
    f7f0:	b2da      	uxtb	r2, r3
    f7f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    f7f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7fa:	701a      	strb	r2, [r3, #0]
    f7fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    f800:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f804:	781b      	ldrb	r3, [r3, #0]
    f806:	2bff      	cmp	r3, #255	; 0xff
    f808:	d105      	bne.n	f816 <send_gps_pos+0xba6>
    f80a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f80e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f812:	2200      	movs	r2, #0
    f814:	701a      	strb	r2, [r3, #0]
    f816:	f24c 5349 	movw	r3, #50505	; 0xc549
    f81a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f81e:	781b      	ldrb	r3, [r3, #0]
    f820:	461a      	mov	r2, r3
    f822:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f826:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f82a:	7859      	ldrb	r1, [r3, #1]
    f82c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f834:	5499      	strb	r1, [r3, r2]
    f836:	4b43      	ldr	r3, [pc, #268]	; (f944 <send_gps_pos+0xcd4>)
    f838:	781a      	ldrb	r2, [r3, #0]
    f83a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f83e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f842:	781b      	ldrb	r3, [r3, #0]
    f844:	4413      	add	r3, r2
    f846:	b2da      	uxtb	r2, r3
    f848:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f84c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f850:	701a      	strb	r2, [r3, #0]
    f852:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f856:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f85a:	781a      	ldrb	r2, [r3, #0]
    f85c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f860:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f864:	781b      	ldrb	r3, [r3, #0]
    f866:	4413      	add	r3, r2
    f868:	b2da      	uxtb	r2, r3
    f86a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f86e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f872:	701a      	strb	r2, [r3, #0]
    f874:	f24c 5349 	movw	r3, #50505	; 0xc549
    f878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f87c:	781b      	ldrb	r3, [r3, #0]
    f87e:	3301      	adds	r3, #1
    f880:	b2da      	uxtb	r2, r3
    f882:	f24c 5349 	movw	r3, #50505	; 0xc549
    f886:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f88a:	701a      	strb	r2, [r3, #0]
    f88c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f890:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f894:	781b      	ldrb	r3, [r3, #0]
    f896:	2bff      	cmp	r3, #255	; 0xff
    f898:	d105      	bne.n	f8a6 <send_gps_pos+0xc36>
    f89a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f89e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8a2:	2200      	movs	r2, #0
    f8a4:	701a      	strb	r2, [r3, #0]
    f8a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    f8aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8ae:	781b      	ldrb	r3, [r3, #0]
    f8b0:	461a      	mov	r2, r3
    f8b2:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f8b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8ba:	7899      	ldrb	r1, [r3, #2]
    f8bc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f8c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8c4:	5499      	strb	r1, [r3, r2]
    f8c6:	4b20      	ldr	r3, [pc, #128]	; (f948 <send_gps_pos+0xcd8>)
    f8c8:	781a      	ldrb	r2, [r3, #0]
    f8ca:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f8ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8d2:	781b      	ldrb	r3, [r3, #0]
    f8d4:	4413      	add	r3, r2
    f8d6:	b2da      	uxtb	r2, r3
    f8d8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f8dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8e0:	701a      	strb	r2, [r3, #0]
    f8e2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f8e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8ea:	781a      	ldrb	r2, [r3, #0]
    f8ec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f8f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8f4:	781b      	ldrb	r3, [r3, #0]
    f8f6:	4413      	add	r3, r2
    f8f8:	b2da      	uxtb	r2, r3
    f8fa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f8fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f902:	701a      	strb	r2, [r3, #0]
    f904:	f24c 5349 	movw	r3, #50505	; 0xc549
    f908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f90c:	781b      	ldrb	r3, [r3, #0]
    f90e:	3301      	adds	r3, #1
    f910:	b2da      	uxtb	r2, r3
    f912:	f24c 5349 	movw	r3, #50505	; 0xc549
    f916:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f91a:	701a      	strb	r2, [r3, #0]
    f91c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f924:	781b      	ldrb	r3, [r3, #0]
    f926:	2bff      	cmp	r3, #255	; 0xff
    f928:	d110      	bne.n	f94c <send_gps_pos+0xcdc>
    f92a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f92e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f932:	2200      	movs	r2, #0
    f934:	701a      	strb	r2, [r3, #0]
    f936:	e009      	b.n	f94c <send_gps_pos+0xcdc>
    f938:	2004c6bd 	.word	0x2004c6bd
    f93c:	2004c6be 	.word	0x2004c6be
    f940:	2004c6bf 	.word	0x2004c6bf
    f944:	2004c6c1 	.word	0x2004c6c1
    f948:	2004c6c2 	.word	0x2004c6c2
    f94c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f950:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f954:	781b      	ldrb	r3, [r3, #0]
    f956:	461a      	mov	r2, r3
    f958:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f95c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f960:	78d9      	ldrb	r1, [r3, #3]
    f962:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f966:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f96a:	5499      	strb	r1, [r3, r2]
    f96c:	4bd3      	ldr	r3, [pc, #844]	; (fcbc <send_gps_pos+0x104c>)
    f96e:	781a      	ldrb	r2, [r3, #0]
    f970:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f974:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f978:	781b      	ldrb	r3, [r3, #0]
    f97a:	4413      	add	r3, r2
    f97c:	b2da      	uxtb	r2, r3
    f97e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f982:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f986:	701a      	strb	r2, [r3, #0]
    f988:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f98c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f990:	781a      	ldrb	r2, [r3, #0]
    f992:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f996:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f99a:	781b      	ldrb	r3, [r3, #0]
    f99c:	4413      	add	r3, r2
    f99e:	b2da      	uxtb	r2, r3
    f9a0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f9a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9a8:	701a      	strb	r2, [r3, #0]
    f9aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    f9ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9b2:	781b      	ldrb	r3, [r3, #0]
    f9b4:	3301      	adds	r3, #1
    f9b6:	b2da      	uxtb	r2, r3
    f9b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    f9bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9c0:	701a      	strb	r2, [r3, #0]
    f9c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    f9c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9ca:	781b      	ldrb	r3, [r3, #0]
    f9cc:	2bff      	cmp	r3, #255	; 0xff
    f9ce:	d105      	bne.n	f9dc <send_gps_pos+0xd6c>
    f9d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    f9d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9d8:	2200      	movs	r2, #0
    f9da:	701a      	strb	r2, [r3, #0]
    f9dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    f9e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9e4:	781b      	ldrb	r3, [r3, #0]
    f9e6:	461a      	mov	r2, r3
    f9e8:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    f9ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9f0:	7819      	ldrb	r1, [r3, #0]
    f9f2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f9f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9fa:	5499      	strb	r1, [r3, r2]
    f9fc:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    fa00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa04:	781a      	ldrb	r2, [r3, #0]
    fa06:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fa0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa0e:	781b      	ldrb	r3, [r3, #0]
    fa10:	4413      	add	r3, r2
    fa12:	b2da      	uxtb	r2, r3
    fa14:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fa18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa1c:	701a      	strb	r2, [r3, #0]
    fa1e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fa22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa26:	781a      	ldrb	r2, [r3, #0]
    fa28:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fa2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa30:	781b      	ldrb	r3, [r3, #0]
    fa32:	4413      	add	r3, r2
    fa34:	b2da      	uxtb	r2, r3
    fa36:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fa3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa3e:	701a      	strb	r2, [r3, #0]
    fa40:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa48:	781b      	ldrb	r3, [r3, #0]
    fa4a:	3301      	adds	r3, #1
    fa4c:	b2da      	uxtb	r2, r3
    fa4e:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa56:	701a      	strb	r2, [r3, #0]
    fa58:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa60:	781b      	ldrb	r3, [r3, #0]
    fa62:	2bff      	cmp	r3, #255	; 0xff
    fa64:	d105      	bne.n	fa72 <send_gps_pos+0xe02>
    fa66:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa6e:	2200      	movs	r2, #0
    fa70:	701a      	strb	r2, [r3, #0]
    fa72:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa7a:	781b      	ldrb	r3, [r3, #0]
    fa7c:	461a      	mov	r2, r3
    fa7e:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    fa82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa86:	7859      	ldrb	r1, [r3, #1]
    fa88:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fa8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa90:	5499      	strb	r1, [r3, r2]
    fa92:	4b8b      	ldr	r3, [pc, #556]	; (fcc0 <send_gps_pos+0x1050>)
    fa94:	781a      	ldrb	r2, [r3, #0]
    fa96:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fa9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa9e:	781b      	ldrb	r3, [r3, #0]
    faa0:	4413      	add	r3, r2
    faa2:	b2da      	uxtb	r2, r3
    faa4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    faa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faac:	701a      	strb	r2, [r3, #0]
    faae:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fab6:	781a      	ldrb	r2, [r3, #0]
    fab8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fabc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fac0:	781b      	ldrb	r3, [r3, #0]
    fac2:	4413      	add	r3, r2
    fac4:	b2da      	uxtb	r2, r3
    fac6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    faca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    face:	701a      	strb	r2, [r3, #0]
    fad0:	f24c 5349 	movw	r3, #50505	; 0xc549
    fad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fad8:	781b      	ldrb	r3, [r3, #0]
    fada:	3301      	adds	r3, #1
    fadc:	b2da      	uxtb	r2, r3
    fade:	f24c 5349 	movw	r3, #50505	; 0xc549
    fae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fae6:	701a      	strb	r2, [r3, #0]
    fae8:	f24c 5349 	movw	r3, #50505	; 0xc549
    faec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faf0:	781b      	ldrb	r3, [r3, #0]
    faf2:	2bff      	cmp	r3, #255	; 0xff
    faf4:	d105      	bne.n	fb02 <send_gps_pos+0xe92>
    faf6:	f24c 5349 	movw	r3, #50505	; 0xc549
    fafa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fafe:	2200      	movs	r2, #0
    fb00:	701a      	strb	r2, [r3, #0]
    fb02:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb0a:	781b      	ldrb	r3, [r3, #0]
    fb0c:	461a      	mov	r2, r3
    fb0e:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    fb12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb16:	7899      	ldrb	r1, [r3, #2]
    fb18:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fb1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb20:	5499      	strb	r1, [r3, r2]
    fb22:	4b68      	ldr	r3, [pc, #416]	; (fcc4 <send_gps_pos+0x1054>)
    fb24:	781a      	ldrb	r2, [r3, #0]
    fb26:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fb2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb2e:	781b      	ldrb	r3, [r3, #0]
    fb30:	4413      	add	r3, r2
    fb32:	b2da      	uxtb	r2, r3
    fb34:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fb38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb3c:	701a      	strb	r2, [r3, #0]
    fb3e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fb42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb46:	781a      	ldrb	r2, [r3, #0]
    fb48:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fb4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb50:	781b      	ldrb	r3, [r3, #0]
    fb52:	4413      	add	r3, r2
    fb54:	b2da      	uxtb	r2, r3
    fb56:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fb5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb5e:	701a      	strb	r2, [r3, #0]
    fb60:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb68:	781b      	ldrb	r3, [r3, #0]
    fb6a:	3301      	adds	r3, #1
    fb6c:	b2da      	uxtb	r2, r3
    fb6e:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb76:	701a      	strb	r2, [r3, #0]
    fb78:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb80:	781b      	ldrb	r3, [r3, #0]
    fb82:	2bff      	cmp	r3, #255	; 0xff
    fb84:	d105      	bne.n	fb92 <send_gps_pos+0xf22>
    fb86:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb8e:	2200      	movs	r2, #0
    fb90:	701a      	strb	r2, [r3, #0]
    fb92:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb9a:	781b      	ldrb	r3, [r3, #0]
    fb9c:	461a      	mov	r2, r3
    fb9e:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    fba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fba6:	78d9      	ldrb	r1, [r3, #3]
    fba8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fbac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbb0:	5499      	strb	r1, [r3, r2]
    fbb2:	4b45      	ldr	r3, [pc, #276]	; (fcc8 <send_gps_pos+0x1058>)
    fbb4:	781a      	ldrb	r2, [r3, #0]
    fbb6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fbba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbbe:	781b      	ldrb	r3, [r3, #0]
    fbc0:	4413      	add	r3, r2
    fbc2:	b2da      	uxtb	r2, r3
    fbc4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fbc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbcc:	701a      	strb	r2, [r3, #0]
    fbce:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fbd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbd6:	781a      	ldrb	r2, [r3, #0]
    fbd8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fbdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbe0:	781b      	ldrb	r3, [r3, #0]
    fbe2:	4413      	add	r3, r2
    fbe4:	b2da      	uxtb	r2, r3
    fbe6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fbea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbee:	701a      	strb	r2, [r3, #0]
    fbf0:	f24c 5349 	movw	r3, #50505	; 0xc549
    fbf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbf8:	781b      	ldrb	r3, [r3, #0]
    fbfa:	3301      	adds	r3, #1
    fbfc:	b2da      	uxtb	r2, r3
    fbfe:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc06:	701a      	strb	r2, [r3, #0]
    fc08:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc10:	781b      	ldrb	r3, [r3, #0]
    fc12:	2bff      	cmp	r3, #255	; 0xff
    fc14:	d105      	bne.n	fc22 <send_gps_pos+0xfb2>
    fc16:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc1e:	2200      	movs	r2, #0
    fc20:	701a      	strb	r2, [r3, #0]
    fc22:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc2a:	781b      	ldrb	r3, [r3, #0]
    fc2c:	461a      	mov	r2, r3
    fc2e:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fc32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc36:	7819      	ldrb	r1, [r3, #0]
    fc38:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fc3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc40:	5499      	strb	r1, [r3, r2]
    fc42:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fc46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc4a:	781a      	ldrb	r2, [r3, #0]
    fc4c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fc50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc54:	781b      	ldrb	r3, [r3, #0]
    fc56:	4413      	add	r3, r2
    fc58:	b2da      	uxtb	r2, r3
    fc5a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fc5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc62:	701a      	strb	r2, [r3, #0]
    fc64:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fc68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc6c:	781a      	ldrb	r2, [r3, #0]
    fc6e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fc72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc76:	781b      	ldrb	r3, [r3, #0]
    fc78:	4413      	add	r3, r2
    fc7a:	b2da      	uxtb	r2, r3
    fc7c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fc80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc84:	701a      	strb	r2, [r3, #0]
    fc86:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc8e:	781b      	ldrb	r3, [r3, #0]
    fc90:	3301      	adds	r3, #1
    fc92:	b2da      	uxtb	r2, r3
    fc94:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc9c:	701a      	strb	r2, [r3, #0]
    fc9e:	f24c 5349 	movw	r3, #50505	; 0xc549
    fca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fca6:	781b      	ldrb	r3, [r3, #0]
    fca8:	2bff      	cmp	r3, #255	; 0xff
    fcaa:	d10f      	bne.n	fccc <send_gps_pos+0x105c>
    fcac:	f24c 5349 	movw	r3, #50505	; 0xc549
    fcb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcb4:	2200      	movs	r2, #0
    fcb6:	701a      	strb	r2, [r3, #0]
    fcb8:	e008      	b.n	fccc <send_gps_pos+0x105c>
    fcba:	bf00      	nop
    fcbc:	2004c6c3 	.word	0x2004c6c3
    fcc0:	2004c6c5 	.word	0x2004c6c5
    fcc4:	2004c6c6 	.word	0x2004c6c6
    fcc8:	2004c6c7 	.word	0x2004c6c7
    fccc:	f24c 5349 	movw	r3, #50505	; 0xc549
    fcd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcd4:	781b      	ldrb	r3, [r3, #0]
    fcd6:	461a      	mov	r2, r3
    fcd8:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fcdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fce0:	7859      	ldrb	r1, [r3, #1]
    fce2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fce6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcea:	5499      	strb	r1, [r3, r2]
    fcec:	4bc0      	ldr	r3, [pc, #768]	; (fff0 <send_gps_pos+0x1380>)
    fcee:	781a      	ldrb	r2, [r3, #0]
    fcf0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fcf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcf8:	781b      	ldrb	r3, [r3, #0]
    fcfa:	4413      	add	r3, r2
    fcfc:	b2da      	uxtb	r2, r3
    fcfe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fd02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd06:	701a      	strb	r2, [r3, #0]
    fd08:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fd0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd10:	781a      	ldrb	r2, [r3, #0]
    fd12:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fd16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd1a:	781b      	ldrb	r3, [r3, #0]
    fd1c:	4413      	add	r3, r2
    fd1e:	b2da      	uxtb	r2, r3
    fd20:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fd24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd28:	701a      	strb	r2, [r3, #0]
    fd2a:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd32:	781b      	ldrb	r3, [r3, #0]
    fd34:	3301      	adds	r3, #1
    fd36:	b2da      	uxtb	r2, r3
    fd38:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd40:	701a      	strb	r2, [r3, #0]
    fd42:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd4a:	781b      	ldrb	r3, [r3, #0]
    fd4c:	2bff      	cmp	r3, #255	; 0xff
    fd4e:	d105      	bne.n	fd5c <send_gps_pos+0x10ec>
    fd50:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd58:	2200      	movs	r2, #0
    fd5a:	701a      	strb	r2, [r3, #0]
    fd5c:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd64:	781b      	ldrb	r3, [r3, #0]
    fd66:	461a      	mov	r2, r3
    fd68:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fd6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd70:	7899      	ldrb	r1, [r3, #2]
    fd72:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fd76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd7a:	5499      	strb	r1, [r3, r2]
    fd7c:	4b9d      	ldr	r3, [pc, #628]	; (fff4 <send_gps_pos+0x1384>)
    fd7e:	781a      	ldrb	r2, [r3, #0]
    fd80:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fd84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd88:	781b      	ldrb	r3, [r3, #0]
    fd8a:	4413      	add	r3, r2
    fd8c:	b2da      	uxtb	r2, r3
    fd8e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fd92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd96:	701a      	strb	r2, [r3, #0]
    fd98:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fd9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fda0:	781a      	ldrb	r2, [r3, #0]
    fda2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fda6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdaa:	781b      	ldrb	r3, [r3, #0]
    fdac:	4413      	add	r3, r2
    fdae:	b2da      	uxtb	r2, r3
    fdb0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fdb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdb8:	701a      	strb	r2, [r3, #0]
    fdba:	f24c 5349 	movw	r3, #50505	; 0xc549
    fdbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdc2:	781b      	ldrb	r3, [r3, #0]
    fdc4:	3301      	adds	r3, #1
    fdc6:	b2da      	uxtb	r2, r3
    fdc8:	f24c 5349 	movw	r3, #50505	; 0xc549
    fdcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdd0:	701a      	strb	r2, [r3, #0]
    fdd2:	f24c 5349 	movw	r3, #50505	; 0xc549
    fdd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdda:	781b      	ldrb	r3, [r3, #0]
    fddc:	2bff      	cmp	r3, #255	; 0xff
    fdde:	d105      	bne.n	fdec <send_gps_pos+0x117c>
    fde0:	f24c 5349 	movw	r3, #50505	; 0xc549
    fde4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fde8:	2200      	movs	r2, #0
    fdea:	701a      	strb	r2, [r3, #0]
    fdec:	f24c 5349 	movw	r3, #50505	; 0xc549
    fdf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdf4:	781b      	ldrb	r3, [r3, #0]
    fdf6:	461a      	mov	r2, r3
    fdf8:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fdfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe00:	78d9      	ldrb	r1, [r3, #3]
    fe02:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fe06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe0a:	5499      	strb	r1, [r3, r2]
    fe0c:	4b7a      	ldr	r3, [pc, #488]	; (fff8 <send_gps_pos+0x1388>)
    fe0e:	781a      	ldrb	r2, [r3, #0]
    fe10:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fe14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe18:	781b      	ldrb	r3, [r3, #0]
    fe1a:	4413      	add	r3, r2
    fe1c:	b2da      	uxtb	r2, r3
    fe1e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fe22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe26:	701a      	strb	r2, [r3, #0]
    fe28:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fe2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe30:	781a      	ldrb	r2, [r3, #0]
    fe32:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fe36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe3a:	781b      	ldrb	r3, [r3, #0]
    fe3c:	4413      	add	r3, r2
    fe3e:	b2da      	uxtb	r2, r3
    fe40:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fe44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe48:	701a      	strb	r2, [r3, #0]
    fe4a:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe52:	781b      	ldrb	r3, [r3, #0]
    fe54:	3301      	adds	r3, #1
    fe56:	b2da      	uxtb	r2, r3
    fe58:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe60:	701a      	strb	r2, [r3, #0]
    fe62:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe6a:	781b      	ldrb	r3, [r3, #0]
    fe6c:	2bff      	cmp	r3, #255	; 0xff
    fe6e:	d105      	bne.n	fe7c <send_gps_pos+0x120c>
    fe70:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe78:	2200      	movs	r2, #0
    fe7a:	701a      	strb	r2, [r3, #0]
    fe7c:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe84:	781b      	ldrb	r3, [r3, #0]
    fe86:	461a      	mov	r2, r3
    fe88:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fe8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe90:	7819      	ldrb	r1, [r3, #0]
    fe92:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fe96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe9a:	5499      	strb	r1, [r3, r2]
    fe9c:	f24c 5349 	movw	r3, #50505	; 0xc549
    fea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fea4:	781b      	ldrb	r3, [r3, #0]
    fea6:	3301      	adds	r3, #1
    fea8:	b2da      	uxtb	r2, r3
    feaa:	f24c 5349 	movw	r3, #50505	; 0xc549
    feae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feb2:	701a      	strb	r2, [r3, #0]
    feb4:	f24c 5349 	movw	r3, #50505	; 0xc549
    feb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    febc:	781b      	ldrb	r3, [r3, #0]
    febe:	2bff      	cmp	r3, #255	; 0xff
    fec0:	d105      	bne.n	fece <send_gps_pos+0x125e>
    fec2:	f24c 5349 	movw	r3, #50505	; 0xc549
    fec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feca:	2200      	movs	r2, #0
    fecc:	701a      	strb	r2, [r3, #0]
    fece:	f24c 5349 	movw	r3, #50505	; 0xc549
    fed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fed6:	781b      	ldrb	r3, [r3, #0]
    fed8:	461a      	mov	r2, r3
    feda:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fede:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fee2:	7819      	ldrb	r1, [r3, #0]
    fee4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feec:	5499      	strb	r1, [r3, r2]
    feee:	f24c 5349 	movw	r3, #50505	; 0xc549
    fef2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fef6:	781b      	ldrb	r3, [r3, #0]
    fef8:	3301      	adds	r3, #1
    fefa:	b2da      	uxtb	r2, r3
    fefc:	f24c 5349 	movw	r3, #50505	; 0xc549
    ff00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff04:	701a      	strb	r2, [r3, #0]
    ff06:	f24c 5349 	movw	r3, #50505	; 0xc549
    ff0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff0e:	781b      	ldrb	r3, [r3, #0]
    ff10:	2bff      	cmp	r3, #255	; 0xff
    ff12:	d105      	bne.n	ff20 <send_gps_pos+0x12b0>
    ff14:	f24c 5349 	movw	r3, #50505	; 0xc549
    ff18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff1c:	2200      	movs	r2, #0
    ff1e:	701a      	strb	r2, [r3, #0]
    ff20:	f242 0339 	movw	r3, #8249	; 0x2039
    ff24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff28:	781b      	ldrb	r3, [r3, #0]
    ff2a:	b2db      	uxtb	r3, r3
    ff2c:	f003 0310 	and.w	r3, r3, #16
    ff30:	2b00      	cmp	r3, #0
    ff32:	d15a      	bne.n	ffea <send_gps_pos+0x137a>
    ff34:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ff38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff3c:	781b      	ldrb	r3, [r3, #0]
    ff3e:	b2db      	uxtb	r3, r3
    ff40:	461a      	mov	r2, r3
    ff42:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ff46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff4a:	5c9a      	ldrb	r2, [r3, r2]
    ff4c:	f24c 634b 	movw	r3, #50763	; 0xc64b
    ff50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff54:	701a      	strb	r2, [r3, #0]
    ff56:	f24c 634c 	movw	r3, #50764	; 0xc64c
    ff5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff5e:	2200      	movs	r2, #0
    ff60:	701a      	strb	r2, [r3, #0]
    ff62:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ff66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff6a:	781b      	ldrb	r3, [r3, #0]
    ff6c:	b2db      	uxtb	r3, r3
    ff6e:	3301      	adds	r3, #1
    ff70:	b2da      	uxtb	r2, r3
    ff72:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ff76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff7a:	701a      	strb	r2, [r3, #0]
    ff7c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ff80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff84:	781b      	ldrb	r3, [r3, #0]
    ff86:	b2db      	uxtb	r3, r3
    ff88:	2bff      	cmp	r3, #255	; 0xff
    ff8a:	d105      	bne.n	ff98 <send_gps_pos+0x1328>
    ff8c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ff90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff94:	2200      	movs	r2, #0
    ff96:	701a      	strb	r2, [r3, #0]
    ff98:	f242 0338 	movw	r3, #8248	; 0x2038
    ff9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffa0:	f242 0238 	movw	r2, #8248	; 0x2038
    ffa4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ffa8:	7812      	ldrb	r2, [r2, #0]
    ffaa:	b2d2      	uxtb	r2, r2
    ffac:	f042 0201 	orr.w	r2, r2, #1
    ffb0:	b2d2      	uxtb	r2, r2
    ffb2:	701a      	strb	r2, [r3, #0]
    ffb4:	f242 0339 	movw	r3, #8249	; 0x2039
    ffb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffbc:	f242 0239 	movw	r2, #8249	; 0x2039
    ffc0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ffc4:	7812      	ldrb	r2, [r2, #0]
    ffc6:	b2d2      	uxtb	r2, r2
    ffc8:	f042 0210 	orr.w	r2, r2, #16
    ffcc:	b2d2      	uxtb	r2, r2
    ffce:	701a      	strb	r2, [r3, #0]
    ffd0:	e00b      	b.n	ffea <send_gps_pos+0x137a>
    ffd2:	f24c 5348 	movw	r3, #50504	; 0xc548
    ffd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffda:	781b      	ldrb	r3, [r3, #0]
    ffdc:	3301      	adds	r3, #1
    ffde:	b2da      	uxtb	r2, r3
    ffe0:	f24c 5348 	movw	r3, #50504	; 0xc548
    ffe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffe8:	701a      	strb	r2, [r3, #0]
     estimator_update_state_gps();
    ffea:	f005 fbfd 	bl	157e8 <estimator_update_state_gps>
  }
}
    ffee:	bd80      	pop	{r7, pc}
    fff0:	2004c6b9 	.word	0x2004c6b9
    fff4:	2004c6ba 	.word	0x2004c6ba
    fff8:	2004c6bb 	.word	0x2004c6bb

0000fffc <send_radIR>:

void send_radIR(void){
    fffc:	b480      	push	{r7}
    fffe:	af00      	add	r7, sp, #0
  if (gps_pos_available)
   10000:	f24c 63de 	movw	r3, #50910	; 0xc6de
   10004:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10008:	781b      	ldrb	r3, [r3, #0]
   1000a:	2b00      	cmp	r3, #0
   1000c:	f000 85e8 	beq.w	10be0 <send_radIR+0xbe4>
     DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
   10010:	f24c 5349 	movw	r3, #50505	; 0xc549
   10014:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10018:	781a      	ldrb	r2, [r3, #0]
   1001a:	f24c 534a 	movw	r3, #50506	; 0xc54a
   1001e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10022:	781b      	ldrb	r3, [r3, #0]
   10024:	b2db      	uxtb	r3, r3
   10026:	429a      	cmp	r2, r3
   10028:	d313      	bcc.n	10052 <send_radIR+0x56>
   1002a:	f24c 534a 	movw	r3, #50506	; 0xc54a
   1002e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10032:	781b      	ldrb	r3, [r3, #0]
   10034:	b2db      	uxtb	r3, r3
   10036:	461a      	mov	r2, r3
   10038:	f24c 5349 	movw	r3, #50505	; 0xc549
   1003c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10040:	781b      	ldrb	r3, [r3, #0]
   10042:	1ad3      	subs	r3, r2, r3
   10044:	33ff      	adds	r3, #255	; 0xff
   10046:	2b14      	cmp	r3, #20
   10048:	bfd4      	ite	le
   1004a:	2300      	movle	r3, #0
   1004c:	2301      	movgt	r3, #1
   1004e:	b2db      	uxtb	r3, r3
   10050:	e011      	b.n	10076 <send_radIR+0x7a>
   10052:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10056:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1005a:	781b      	ldrb	r3, [r3, #0]
   1005c:	b2db      	uxtb	r3, r3
   1005e:	461a      	mov	r2, r3
   10060:	f24c 5349 	movw	r3, #50505	; 0xc549
   10064:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10068:	781b      	ldrb	r3, [r3, #0]
   1006a:	1ad3      	subs	r3, r2, r3
   1006c:	2b14      	cmp	r3, #20
   1006e:	bfd4      	ite	le
   10070:	2300      	movle	r3, #0
   10072:	2301      	movgt	r3, #1
   10074:	b2db      	uxtb	r3, r3
   10076:	2b00      	cmp	r3, #0
   10078:	f000 85a6 	beq.w	10bc8 <send_radIR+0xbcc>
   1007c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10080:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10084:	781b      	ldrb	r3, [r3, #0]
   10086:	461a      	mov	r2, r3
   10088:	f24c 534c 	movw	r3, #50508	; 0xc54c
   1008c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10090:	2105      	movs	r1, #5
   10092:	5499      	strb	r1, [r3, r2]
   10094:	f24c 5349 	movw	r3, #50505	; 0xc549
   10098:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1009c:	781b      	ldrb	r3, [r3, #0]
   1009e:	3301      	adds	r3, #1
   100a0:	b2da      	uxtb	r2, r3
   100a2:	f24c 5349 	movw	r3, #50505	; 0xc549
   100a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100aa:	701a      	strb	r2, [r3, #0]
   100ac:	f24c 5349 	movw	r3, #50505	; 0xc549
   100b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100b4:	781b      	ldrb	r3, [r3, #0]
   100b6:	2bff      	cmp	r3, #255	; 0xff
   100b8:	d105      	bne.n	100c6 <send_radIR+0xca>
   100ba:	f24c 5349 	movw	r3, #50505	; 0xc549
   100be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100c2:	2200      	movs	r2, #0
   100c4:	701a      	strb	r2, [r3, #0]
   100c6:	f24c 5349 	movw	r3, #50505	; 0xc549
   100ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100ce:	781b      	ldrb	r3, [r3, #0]
   100d0:	461a      	mov	r2, r3
   100d2:	f24c 534c 	movw	r3, #50508	; 0xc54c
   100d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100da:	2105      	movs	r1, #5
   100dc:	5499      	strb	r1, [r3, r2]
   100de:	f24c 5349 	movw	r3, #50505	; 0xc549
   100e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100e6:	781b      	ldrb	r3, [r3, #0]
   100e8:	3301      	adds	r3, #1
   100ea:	b2da      	uxtb	r2, r3
   100ec:	f24c 5349 	movw	r3, #50505	; 0xc549
   100f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100f4:	701a      	strb	r2, [r3, #0]
   100f6:	f24c 5349 	movw	r3, #50505	; 0xc549
   100fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100fe:	781b      	ldrb	r3, [r3, #0]
   10100:	2bff      	cmp	r3, #255	; 0xff
   10102:	d105      	bne.n	10110 <send_radIR+0x114>
   10104:	f24c 5349 	movw	r3, #50505	; 0xc549
   10108:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1010c:	2200      	movs	r2, #0
   1010e:	701a      	strb	r2, [r3, #0]
   10110:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10114:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10118:	2205      	movs	r2, #5
   1011a:	701a      	strb	r2, [r3, #0]
   1011c:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10120:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10124:	2205      	movs	r2, #5
   10126:	701a      	strb	r2, [r3, #0]
   10128:	f24c 5349 	movw	r3, #50505	; 0xc549
   1012c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10130:	781b      	ldrb	r3, [r3, #0]
   10132:	461a      	mov	r2, r3
   10134:	f64c 3340 	movw	r3, #52032	; 0xcb40
   10138:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1013c:	7819      	ldrb	r1, [r3, #0]
   1013e:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10142:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10146:	5499      	strb	r1, [r3, r2]
   10148:	f64c 3340 	movw	r3, #52032	; 0xcb40
   1014c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10150:	781a      	ldrb	r2, [r3, #0]
   10152:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10156:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1015a:	781b      	ldrb	r3, [r3, #0]
   1015c:	4413      	add	r3, r2
   1015e:	b2da      	uxtb	r2, r3
   10160:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10164:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10168:	701a      	strb	r2, [r3, #0]
   1016a:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1016e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10172:	781a      	ldrb	r2, [r3, #0]
   10174:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10178:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1017c:	781b      	ldrb	r3, [r3, #0]
   1017e:	4413      	add	r3, r2
   10180:	b2da      	uxtb	r2, r3
   10182:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10186:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1018a:	701a      	strb	r2, [r3, #0]
   1018c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10190:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10194:	781b      	ldrb	r3, [r3, #0]
   10196:	3301      	adds	r3, #1
   10198:	b2da      	uxtb	r2, r3
   1019a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1019e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101a2:	701a      	strb	r2, [r3, #0]
   101a4:	f24c 5349 	movw	r3, #50505	; 0xc549
   101a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101ac:	781b      	ldrb	r3, [r3, #0]
   101ae:	2bff      	cmp	r3, #255	; 0xff
   101b0:	d105      	bne.n	101be <send_radIR+0x1c2>
   101b2:	f24c 5349 	movw	r3, #50505	; 0xc549
   101b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101ba:	2200      	movs	r2, #0
   101bc:	701a      	strb	r2, [r3, #0]
   101be:	f24c 5349 	movw	r3, #50505	; 0xc549
   101c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101c6:	781b      	ldrb	r3, [r3, #0]
   101c8:	461a      	mov	r2, r3
   101ca:	f64c 3340 	movw	r3, #52032	; 0xcb40
   101ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101d2:	7859      	ldrb	r1, [r3, #1]
   101d4:	f24c 534c 	movw	r3, #50508	; 0xc54c
   101d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101dc:	5499      	strb	r1, [r3, r2]
   101de:	4bd2      	ldr	r3, [pc, #840]	; (10528 <send_radIR+0x52c>)
   101e0:	781a      	ldrb	r2, [r3, #0]
   101e2:	f24c 634d 	movw	r3, #50765	; 0xc64d
   101e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101ea:	781b      	ldrb	r3, [r3, #0]
   101ec:	4413      	add	r3, r2
   101ee:	b2da      	uxtb	r2, r3
   101f0:	f24c 634d 	movw	r3, #50765	; 0xc64d
   101f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101f8:	701a      	strb	r2, [r3, #0]
   101fa:	f24c 634e 	movw	r3, #50766	; 0xc64e
   101fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10202:	781a      	ldrb	r2, [r3, #0]
   10204:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10208:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1020c:	781b      	ldrb	r3, [r3, #0]
   1020e:	4413      	add	r3, r2
   10210:	b2da      	uxtb	r2, r3
   10212:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10216:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1021a:	701a      	strb	r2, [r3, #0]
   1021c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10220:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10224:	781b      	ldrb	r3, [r3, #0]
   10226:	3301      	adds	r3, #1
   10228:	b2da      	uxtb	r2, r3
   1022a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1022e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10232:	701a      	strb	r2, [r3, #0]
   10234:	f24c 5349 	movw	r3, #50505	; 0xc549
   10238:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1023c:	781b      	ldrb	r3, [r3, #0]
   1023e:	2bff      	cmp	r3, #255	; 0xff
   10240:	d105      	bne.n	1024e <send_radIR+0x252>
   10242:	f24c 5349 	movw	r3, #50505	; 0xc549
   10246:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1024a:	2200      	movs	r2, #0
   1024c:	701a      	strb	r2, [r3, #0]
   1024e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10252:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10256:	781b      	ldrb	r3, [r3, #0]
   10258:	461a      	mov	r2, r3
   1025a:	f64c 3340 	movw	r3, #52032	; 0xcb40
   1025e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10262:	7899      	ldrb	r1, [r3, #2]
   10264:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10268:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1026c:	5499      	strb	r1, [r3, r2]
   1026e:	4baf      	ldr	r3, [pc, #700]	; (1052c <send_radIR+0x530>)
   10270:	781a      	ldrb	r2, [r3, #0]
   10272:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10276:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1027a:	781b      	ldrb	r3, [r3, #0]
   1027c:	4413      	add	r3, r2
   1027e:	b2da      	uxtb	r2, r3
   10280:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10284:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10288:	701a      	strb	r2, [r3, #0]
   1028a:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1028e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10292:	781a      	ldrb	r2, [r3, #0]
   10294:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10298:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1029c:	781b      	ldrb	r3, [r3, #0]
   1029e:	4413      	add	r3, r2
   102a0:	b2da      	uxtb	r2, r3
   102a2:	f24c 634e 	movw	r3, #50766	; 0xc64e
   102a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102aa:	701a      	strb	r2, [r3, #0]
   102ac:	f24c 5349 	movw	r3, #50505	; 0xc549
   102b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102b4:	781b      	ldrb	r3, [r3, #0]
   102b6:	3301      	adds	r3, #1
   102b8:	b2da      	uxtb	r2, r3
   102ba:	f24c 5349 	movw	r3, #50505	; 0xc549
   102be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102c2:	701a      	strb	r2, [r3, #0]
   102c4:	f24c 5349 	movw	r3, #50505	; 0xc549
   102c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102cc:	781b      	ldrb	r3, [r3, #0]
   102ce:	2bff      	cmp	r3, #255	; 0xff
   102d0:	d105      	bne.n	102de <send_radIR+0x2e2>
   102d2:	f24c 5349 	movw	r3, #50505	; 0xc549
   102d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102da:	2200      	movs	r2, #0
   102dc:	701a      	strb	r2, [r3, #0]
   102de:	f24c 5349 	movw	r3, #50505	; 0xc549
   102e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102e6:	781b      	ldrb	r3, [r3, #0]
   102e8:	461a      	mov	r2, r3
   102ea:	f64c 3340 	movw	r3, #52032	; 0xcb40
   102ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102f2:	78d9      	ldrb	r1, [r3, #3]
   102f4:	f24c 534c 	movw	r3, #50508	; 0xc54c
   102f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102fc:	5499      	strb	r1, [r3, r2]
   102fe:	4b8c      	ldr	r3, [pc, #560]	; (10530 <send_radIR+0x534>)
   10300:	781a      	ldrb	r2, [r3, #0]
   10302:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10306:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1030a:	781b      	ldrb	r3, [r3, #0]
   1030c:	4413      	add	r3, r2
   1030e:	b2da      	uxtb	r2, r3
   10310:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10314:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10318:	701a      	strb	r2, [r3, #0]
   1031a:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1031e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10322:	781a      	ldrb	r2, [r3, #0]
   10324:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10328:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1032c:	781b      	ldrb	r3, [r3, #0]
   1032e:	4413      	add	r3, r2
   10330:	b2da      	uxtb	r2, r3
   10332:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10336:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1033a:	701a      	strb	r2, [r3, #0]
   1033c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10340:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10344:	781b      	ldrb	r3, [r3, #0]
   10346:	3301      	adds	r3, #1
   10348:	b2da      	uxtb	r2, r3
   1034a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1034e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10352:	701a      	strb	r2, [r3, #0]
   10354:	f24c 5349 	movw	r3, #50505	; 0xc549
   10358:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1035c:	781b      	ldrb	r3, [r3, #0]
   1035e:	2bff      	cmp	r3, #255	; 0xff
   10360:	d105      	bne.n	1036e <send_radIR+0x372>
   10362:	f24c 5349 	movw	r3, #50505	; 0xc549
   10366:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1036a:	2200      	movs	r2, #0
   1036c:	701a      	strb	r2, [r3, #0]
   1036e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10372:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10376:	781b      	ldrb	r3, [r3, #0]
   10378:	461a      	mov	r2, r3
   1037a:	f64c 3344 	movw	r3, #52036	; 0xcb44
   1037e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10382:	7819      	ldrb	r1, [r3, #0]
   10384:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10388:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1038c:	5499      	strb	r1, [r3, r2]
   1038e:	f64c 3344 	movw	r3, #52036	; 0xcb44
   10392:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10396:	781a      	ldrb	r2, [r3, #0]
   10398:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1039c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103a0:	781b      	ldrb	r3, [r3, #0]
   103a2:	4413      	add	r3, r2
   103a4:	b2da      	uxtb	r2, r3
   103a6:	f24c 634d 	movw	r3, #50765	; 0xc64d
   103aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103ae:	701a      	strb	r2, [r3, #0]
   103b0:	f24c 634e 	movw	r3, #50766	; 0xc64e
   103b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103b8:	781a      	ldrb	r2, [r3, #0]
   103ba:	f24c 634d 	movw	r3, #50765	; 0xc64d
   103be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103c2:	781b      	ldrb	r3, [r3, #0]
   103c4:	4413      	add	r3, r2
   103c6:	b2da      	uxtb	r2, r3
   103c8:	f24c 634e 	movw	r3, #50766	; 0xc64e
   103cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103d0:	701a      	strb	r2, [r3, #0]
   103d2:	f24c 5349 	movw	r3, #50505	; 0xc549
   103d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103da:	781b      	ldrb	r3, [r3, #0]
   103dc:	3301      	adds	r3, #1
   103de:	b2da      	uxtb	r2, r3
   103e0:	f24c 5349 	movw	r3, #50505	; 0xc549
   103e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103e8:	701a      	strb	r2, [r3, #0]
   103ea:	f24c 5349 	movw	r3, #50505	; 0xc549
   103ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103f2:	781b      	ldrb	r3, [r3, #0]
   103f4:	2bff      	cmp	r3, #255	; 0xff
   103f6:	d105      	bne.n	10404 <send_radIR+0x408>
   103f8:	f24c 5349 	movw	r3, #50505	; 0xc549
   103fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10400:	2200      	movs	r2, #0
   10402:	701a      	strb	r2, [r3, #0]
   10404:	f24c 5349 	movw	r3, #50505	; 0xc549
   10408:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1040c:	781b      	ldrb	r3, [r3, #0]
   1040e:	461a      	mov	r2, r3
   10410:	f64c 3344 	movw	r3, #52036	; 0xcb44
   10414:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10418:	7859      	ldrb	r1, [r3, #1]
   1041a:	f24c 534c 	movw	r3, #50508	; 0xc54c
   1041e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10422:	5499      	strb	r1, [r3, r2]
   10424:	4b43      	ldr	r3, [pc, #268]	; (10534 <send_radIR+0x538>)
   10426:	781a      	ldrb	r2, [r3, #0]
   10428:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1042c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10430:	781b      	ldrb	r3, [r3, #0]
   10432:	4413      	add	r3, r2
   10434:	b2da      	uxtb	r2, r3
   10436:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1043a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1043e:	701a      	strb	r2, [r3, #0]
   10440:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10444:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10448:	781a      	ldrb	r2, [r3, #0]
   1044a:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1044e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10452:	781b      	ldrb	r3, [r3, #0]
   10454:	4413      	add	r3, r2
   10456:	b2da      	uxtb	r2, r3
   10458:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1045c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10460:	701a      	strb	r2, [r3, #0]
   10462:	f24c 5349 	movw	r3, #50505	; 0xc549
   10466:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1046a:	781b      	ldrb	r3, [r3, #0]
   1046c:	3301      	adds	r3, #1
   1046e:	b2da      	uxtb	r2, r3
   10470:	f24c 5349 	movw	r3, #50505	; 0xc549
   10474:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10478:	701a      	strb	r2, [r3, #0]
   1047a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1047e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10482:	781b      	ldrb	r3, [r3, #0]
   10484:	2bff      	cmp	r3, #255	; 0xff
   10486:	d105      	bne.n	10494 <send_radIR+0x498>
   10488:	f24c 5349 	movw	r3, #50505	; 0xc549
   1048c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10490:	2200      	movs	r2, #0
   10492:	701a      	strb	r2, [r3, #0]
   10494:	f24c 5349 	movw	r3, #50505	; 0xc549
   10498:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1049c:	781b      	ldrb	r3, [r3, #0]
   1049e:	461a      	mov	r2, r3
   104a0:	f64c 3344 	movw	r3, #52036	; 0xcb44
   104a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104a8:	7899      	ldrb	r1, [r3, #2]
   104aa:	f24c 534c 	movw	r3, #50508	; 0xc54c
   104ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104b2:	5499      	strb	r1, [r3, r2]
   104b4:	4b20      	ldr	r3, [pc, #128]	; (10538 <send_radIR+0x53c>)
   104b6:	781a      	ldrb	r2, [r3, #0]
   104b8:	f24c 634d 	movw	r3, #50765	; 0xc64d
   104bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104c0:	781b      	ldrb	r3, [r3, #0]
   104c2:	4413      	add	r3, r2
   104c4:	b2da      	uxtb	r2, r3
   104c6:	f24c 634d 	movw	r3, #50765	; 0xc64d
   104ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104ce:	701a      	strb	r2, [r3, #0]
   104d0:	f24c 634e 	movw	r3, #50766	; 0xc64e
   104d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104d8:	781a      	ldrb	r2, [r3, #0]
   104da:	f24c 634d 	movw	r3, #50765	; 0xc64d
   104de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104e2:	781b      	ldrb	r3, [r3, #0]
   104e4:	4413      	add	r3, r2
   104e6:	b2da      	uxtb	r2, r3
   104e8:	f24c 634e 	movw	r3, #50766	; 0xc64e
   104ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104f0:	701a      	strb	r2, [r3, #0]
   104f2:	f24c 5349 	movw	r3, #50505	; 0xc549
   104f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104fa:	781b      	ldrb	r3, [r3, #0]
   104fc:	3301      	adds	r3, #1
   104fe:	b2da      	uxtb	r2, r3
   10500:	f24c 5349 	movw	r3, #50505	; 0xc549
   10504:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10508:	701a      	strb	r2, [r3, #0]
   1050a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1050e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10512:	781b      	ldrb	r3, [r3, #0]
   10514:	2bff      	cmp	r3, #255	; 0xff
   10516:	d111      	bne.n	1053c <send_radIR+0x540>
   10518:	f24c 5349 	movw	r3, #50505	; 0xc549
   1051c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10520:	2200      	movs	r2, #0
   10522:	701a      	strb	r2, [r3, #0]
   10524:	e00a      	b.n	1053c <send_radIR+0x540>
   10526:	bf00      	nop
   10528:	2004cb41 	.word	0x2004cb41
   1052c:	2004cb42 	.word	0x2004cb42
   10530:	2004cb43 	.word	0x2004cb43
   10534:	2004cb45 	.word	0x2004cb45
   10538:	2004cb46 	.word	0x2004cb46
   1053c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10540:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10544:	781b      	ldrb	r3, [r3, #0]
   10546:	461a      	mov	r2, r3
   10548:	f64c 3344 	movw	r3, #52036	; 0xcb44
   1054c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10550:	78d9      	ldrb	r1, [r3, #3]
   10552:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10556:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1055a:	5499      	strb	r1, [r3, r2]
   1055c:	4bd3      	ldr	r3, [pc, #844]	; (108ac <send_radIR+0x8b0>)
   1055e:	781a      	ldrb	r2, [r3, #0]
   10560:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10564:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10568:	781b      	ldrb	r3, [r3, #0]
   1056a:	4413      	add	r3, r2
   1056c:	b2da      	uxtb	r2, r3
   1056e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10572:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10576:	701a      	strb	r2, [r3, #0]
   10578:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1057c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10580:	781a      	ldrb	r2, [r3, #0]
   10582:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10586:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1058a:	781b      	ldrb	r3, [r3, #0]
   1058c:	4413      	add	r3, r2
   1058e:	b2da      	uxtb	r2, r3
   10590:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10594:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10598:	701a      	strb	r2, [r3, #0]
   1059a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1059e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105a2:	781b      	ldrb	r3, [r3, #0]
   105a4:	3301      	adds	r3, #1
   105a6:	b2da      	uxtb	r2, r3
   105a8:	f24c 5349 	movw	r3, #50505	; 0xc549
   105ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105b0:	701a      	strb	r2, [r3, #0]
   105b2:	f24c 5349 	movw	r3, #50505	; 0xc549
   105b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105ba:	781b      	ldrb	r3, [r3, #0]
   105bc:	2bff      	cmp	r3, #255	; 0xff
   105be:	d105      	bne.n	105cc <send_radIR+0x5d0>
   105c0:	f24c 5349 	movw	r3, #50505	; 0xc549
   105c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105c8:	2200      	movs	r2, #0
   105ca:	701a      	strb	r2, [r3, #0]
   105cc:	f24c 5349 	movw	r3, #50505	; 0xc549
   105d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105d4:	781b      	ldrb	r3, [r3, #0]
   105d6:	461a      	mov	r2, r3
   105d8:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   105dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105e0:	7819      	ldrb	r1, [r3, #0]
   105e2:	f24c 534c 	movw	r3, #50508	; 0xc54c
   105e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105ea:	5499      	strb	r1, [r3, r2]
   105ec:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   105f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105f4:	781a      	ldrb	r2, [r3, #0]
   105f6:	f24c 634d 	movw	r3, #50765	; 0xc64d
   105fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105fe:	781b      	ldrb	r3, [r3, #0]
   10600:	4413      	add	r3, r2
   10602:	b2da      	uxtb	r2, r3
   10604:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10608:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1060c:	701a      	strb	r2, [r3, #0]
   1060e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10612:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10616:	781a      	ldrb	r2, [r3, #0]
   10618:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1061c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10620:	781b      	ldrb	r3, [r3, #0]
   10622:	4413      	add	r3, r2
   10624:	b2da      	uxtb	r2, r3
   10626:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1062a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1062e:	701a      	strb	r2, [r3, #0]
   10630:	f24c 5349 	movw	r3, #50505	; 0xc549
   10634:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10638:	781b      	ldrb	r3, [r3, #0]
   1063a:	3301      	adds	r3, #1
   1063c:	b2da      	uxtb	r2, r3
   1063e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10642:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10646:	701a      	strb	r2, [r3, #0]
   10648:	f24c 5349 	movw	r3, #50505	; 0xc549
   1064c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10650:	781b      	ldrb	r3, [r3, #0]
   10652:	2bff      	cmp	r3, #255	; 0xff
   10654:	d105      	bne.n	10662 <send_radIR+0x666>
   10656:	f24c 5349 	movw	r3, #50505	; 0xc549
   1065a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1065e:	2200      	movs	r2, #0
   10660:	701a      	strb	r2, [r3, #0]
   10662:	f24c 5349 	movw	r3, #50505	; 0xc549
   10666:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1066a:	781b      	ldrb	r3, [r3, #0]
   1066c:	461a      	mov	r2, r3
   1066e:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   10672:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10676:	7859      	ldrb	r1, [r3, #1]
   10678:	f24c 534c 	movw	r3, #50508	; 0xc54c
   1067c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10680:	5499      	strb	r1, [r3, r2]
   10682:	4b8b      	ldr	r3, [pc, #556]	; (108b0 <send_radIR+0x8b4>)
   10684:	781a      	ldrb	r2, [r3, #0]
   10686:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1068a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1068e:	781b      	ldrb	r3, [r3, #0]
   10690:	4413      	add	r3, r2
   10692:	b2da      	uxtb	r2, r3
   10694:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10698:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1069c:	701a      	strb	r2, [r3, #0]
   1069e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   106a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106a6:	781a      	ldrb	r2, [r3, #0]
   106a8:	f24c 634d 	movw	r3, #50765	; 0xc64d
   106ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106b0:	781b      	ldrb	r3, [r3, #0]
   106b2:	4413      	add	r3, r2
   106b4:	b2da      	uxtb	r2, r3
   106b6:	f24c 634e 	movw	r3, #50766	; 0xc64e
   106ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106be:	701a      	strb	r2, [r3, #0]
   106c0:	f24c 5349 	movw	r3, #50505	; 0xc549
   106c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106c8:	781b      	ldrb	r3, [r3, #0]
   106ca:	3301      	adds	r3, #1
   106cc:	b2da      	uxtb	r2, r3
   106ce:	f24c 5349 	movw	r3, #50505	; 0xc549
   106d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106d6:	701a      	strb	r2, [r3, #0]
   106d8:	f24c 5349 	movw	r3, #50505	; 0xc549
   106dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106e0:	781b      	ldrb	r3, [r3, #0]
   106e2:	2bff      	cmp	r3, #255	; 0xff
   106e4:	d105      	bne.n	106f2 <send_radIR+0x6f6>
   106e6:	f24c 5349 	movw	r3, #50505	; 0xc549
   106ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106ee:	2200      	movs	r2, #0
   106f0:	701a      	strb	r2, [r3, #0]
   106f2:	f24c 5349 	movw	r3, #50505	; 0xc549
   106f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106fa:	781b      	ldrb	r3, [r3, #0]
   106fc:	461a      	mov	r2, r3
   106fe:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   10702:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10706:	7899      	ldrb	r1, [r3, #2]
   10708:	f24c 534c 	movw	r3, #50508	; 0xc54c
   1070c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10710:	5499      	strb	r1, [r3, r2]
   10712:	4b68      	ldr	r3, [pc, #416]	; (108b4 <send_radIR+0x8b8>)
   10714:	781a      	ldrb	r2, [r3, #0]
   10716:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1071a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1071e:	781b      	ldrb	r3, [r3, #0]
   10720:	4413      	add	r3, r2
   10722:	b2da      	uxtb	r2, r3
   10724:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10728:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1072c:	701a      	strb	r2, [r3, #0]
   1072e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10732:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10736:	781a      	ldrb	r2, [r3, #0]
   10738:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1073c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10740:	781b      	ldrb	r3, [r3, #0]
   10742:	4413      	add	r3, r2
   10744:	b2da      	uxtb	r2, r3
   10746:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1074a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1074e:	701a      	strb	r2, [r3, #0]
   10750:	f24c 5349 	movw	r3, #50505	; 0xc549
   10754:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10758:	781b      	ldrb	r3, [r3, #0]
   1075a:	3301      	adds	r3, #1
   1075c:	b2da      	uxtb	r2, r3
   1075e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10762:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10766:	701a      	strb	r2, [r3, #0]
   10768:	f24c 5349 	movw	r3, #50505	; 0xc549
   1076c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10770:	781b      	ldrb	r3, [r3, #0]
   10772:	2bff      	cmp	r3, #255	; 0xff
   10774:	d105      	bne.n	10782 <send_radIR+0x786>
   10776:	f24c 5349 	movw	r3, #50505	; 0xc549
   1077a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1077e:	2200      	movs	r2, #0
   10780:	701a      	strb	r2, [r3, #0]
   10782:	f24c 5349 	movw	r3, #50505	; 0xc549
   10786:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1078a:	781b      	ldrb	r3, [r3, #0]
   1078c:	461a      	mov	r2, r3
   1078e:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   10792:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10796:	78d9      	ldrb	r1, [r3, #3]
   10798:	f24c 534c 	movw	r3, #50508	; 0xc54c
   1079c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107a0:	5499      	strb	r1, [r3, r2]
   107a2:	4b45      	ldr	r3, [pc, #276]	; (108b8 <send_radIR+0x8bc>)
   107a4:	781a      	ldrb	r2, [r3, #0]
   107a6:	f24c 634d 	movw	r3, #50765	; 0xc64d
   107aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107ae:	781b      	ldrb	r3, [r3, #0]
   107b0:	4413      	add	r3, r2
   107b2:	b2da      	uxtb	r2, r3
   107b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
   107b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107bc:	701a      	strb	r2, [r3, #0]
   107be:	f24c 634e 	movw	r3, #50766	; 0xc64e
   107c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107c6:	781a      	ldrb	r2, [r3, #0]
   107c8:	f24c 634d 	movw	r3, #50765	; 0xc64d
   107cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107d0:	781b      	ldrb	r3, [r3, #0]
   107d2:	4413      	add	r3, r2
   107d4:	b2da      	uxtb	r2, r3
   107d6:	f24c 634e 	movw	r3, #50766	; 0xc64e
   107da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107de:	701a      	strb	r2, [r3, #0]
   107e0:	f24c 5349 	movw	r3, #50505	; 0xc549
   107e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107e8:	781b      	ldrb	r3, [r3, #0]
   107ea:	3301      	adds	r3, #1
   107ec:	b2da      	uxtb	r2, r3
   107ee:	f24c 5349 	movw	r3, #50505	; 0xc549
   107f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107f6:	701a      	strb	r2, [r3, #0]
   107f8:	f24c 5349 	movw	r3, #50505	; 0xc549
   107fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10800:	781b      	ldrb	r3, [r3, #0]
   10802:	2bff      	cmp	r3, #255	; 0xff
   10804:	d105      	bne.n	10812 <send_radIR+0x816>
   10806:	f24c 5349 	movw	r3, #50505	; 0xc549
   1080a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1080e:	2200      	movs	r2, #0
   10810:	701a      	strb	r2, [r3, #0]
   10812:	f24c 5349 	movw	r3, #50505	; 0xc549
   10816:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1081a:	781b      	ldrb	r3, [r3, #0]
   1081c:	461a      	mov	r2, r3
   1081e:	f240 5342 	movw	r3, #1346	; 0x542
   10822:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10826:	7819      	ldrb	r1, [r3, #0]
   10828:	f24c 534c 	movw	r3, #50508	; 0xc54c
   1082c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10830:	5499      	strb	r1, [r3, r2]
   10832:	f240 5342 	movw	r3, #1346	; 0x542
   10836:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1083a:	781a      	ldrb	r2, [r3, #0]
   1083c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10840:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10844:	781b      	ldrb	r3, [r3, #0]
   10846:	4413      	add	r3, r2
   10848:	b2da      	uxtb	r2, r3
   1084a:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1084e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10852:	701a      	strb	r2, [r3, #0]
   10854:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10858:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1085c:	781a      	ldrb	r2, [r3, #0]
   1085e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10862:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10866:	781b      	ldrb	r3, [r3, #0]
   10868:	4413      	add	r3, r2
   1086a:	b2da      	uxtb	r2, r3
   1086c:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10870:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10874:	701a      	strb	r2, [r3, #0]
   10876:	f24c 5349 	movw	r3, #50505	; 0xc549
   1087a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1087e:	781b      	ldrb	r3, [r3, #0]
   10880:	3301      	adds	r3, #1
   10882:	b2da      	uxtb	r2, r3
   10884:	f24c 5349 	movw	r3, #50505	; 0xc549
   10888:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1088c:	701a      	strb	r2, [r3, #0]
   1088e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10892:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10896:	781b      	ldrb	r3, [r3, #0]
   10898:	2bff      	cmp	r3, #255	; 0xff
   1089a:	d10f      	bne.n	108bc <send_radIR+0x8c0>
   1089c:	f24c 5349 	movw	r3, #50505	; 0xc549
   108a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108a4:	2200      	movs	r2, #0
   108a6:	701a      	strb	r2, [r3, #0]
   108a8:	e008      	b.n	108bc <send_radIR+0x8c0>
   108aa:	bf00      	nop
   108ac:	2004cb47 	.word	0x2004cb47
   108b0:	2004cb3d 	.word	0x2004cb3d
   108b4:	2004cb3e 	.word	0x2004cb3e
   108b8:	2004cb3f 	.word	0x2004cb3f
   108bc:	f24c 5349 	movw	r3, #50505	; 0xc549
   108c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108c4:	781b      	ldrb	r3, [r3, #0]
   108c6:	461a      	mov	r2, r3
   108c8:	f240 5342 	movw	r3, #1346	; 0x542
   108cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108d0:	7859      	ldrb	r1, [r3, #1]
   108d2:	f24c 534c 	movw	r3, #50508	; 0xc54c
   108d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108da:	5499      	strb	r1, [r3, r2]
   108dc:	4bc2      	ldr	r3, [pc, #776]	; (10be8 <send_radIR+0xbec>)
   108de:	781a      	ldrb	r2, [r3, #0]
   108e0:	f24c 634d 	movw	r3, #50765	; 0xc64d
   108e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108e8:	781b      	ldrb	r3, [r3, #0]
   108ea:	4413      	add	r3, r2
   108ec:	b2da      	uxtb	r2, r3
   108ee:	f24c 634d 	movw	r3, #50765	; 0xc64d
   108f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108f6:	701a      	strb	r2, [r3, #0]
   108f8:	f24c 634e 	movw	r3, #50766	; 0xc64e
   108fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10900:	781a      	ldrb	r2, [r3, #0]
   10902:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10906:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1090a:	781b      	ldrb	r3, [r3, #0]
   1090c:	4413      	add	r3, r2
   1090e:	b2da      	uxtb	r2, r3
   10910:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10914:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10918:	701a      	strb	r2, [r3, #0]
   1091a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1091e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10922:	781b      	ldrb	r3, [r3, #0]
   10924:	3301      	adds	r3, #1
   10926:	b2da      	uxtb	r2, r3
   10928:	f24c 5349 	movw	r3, #50505	; 0xc549
   1092c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10930:	701a      	strb	r2, [r3, #0]
   10932:	f24c 5349 	movw	r3, #50505	; 0xc549
   10936:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1093a:	781b      	ldrb	r3, [r3, #0]
   1093c:	2bff      	cmp	r3, #255	; 0xff
   1093e:	d105      	bne.n	1094c <send_radIR+0x950>
   10940:	f24c 5349 	movw	r3, #50505	; 0xc549
   10944:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10948:	2200      	movs	r2, #0
   1094a:	701a      	strb	r2, [r3, #0]
   1094c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10950:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10954:	781b      	ldrb	r3, [r3, #0]
   10956:	461a      	mov	r2, r3
   10958:	f240 5344 	movw	r3, #1348	; 0x544
   1095c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10960:	7819      	ldrb	r1, [r3, #0]
   10962:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10966:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1096a:	5499      	strb	r1, [r3, r2]
   1096c:	f240 5344 	movw	r3, #1348	; 0x544
   10970:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10974:	781a      	ldrb	r2, [r3, #0]
   10976:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1097a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1097e:	781b      	ldrb	r3, [r3, #0]
   10980:	4413      	add	r3, r2
   10982:	b2da      	uxtb	r2, r3
   10984:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10988:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1098c:	701a      	strb	r2, [r3, #0]
   1098e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10992:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10996:	781a      	ldrb	r2, [r3, #0]
   10998:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1099c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109a0:	781b      	ldrb	r3, [r3, #0]
   109a2:	4413      	add	r3, r2
   109a4:	b2da      	uxtb	r2, r3
   109a6:	f24c 634e 	movw	r3, #50766	; 0xc64e
   109aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109ae:	701a      	strb	r2, [r3, #0]
   109b0:	f24c 5349 	movw	r3, #50505	; 0xc549
   109b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109b8:	781b      	ldrb	r3, [r3, #0]
   109ba:	3301      	adds	r3, #1
   109bc:	b2da      	uxtb	r2, r3
   109be:	f24c 5349 	movw	r3, #50505	; 0xc549
   109c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109c6:	701a      	strb	r2, [r3, #0]
   109c8:	f24c 5349 	movw	r3, #50505	; 0xc549
   109cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109d0:	781b      	ldrb	r3, [r3, #0]
   109d2:	2bff      	cmp	r3, #255	; 0xff
   109d4:	d105      	bne.n	109e2 <send_radIR+0x9e6>
   109d6:	f24c 5349 	movw	r3, #50505	; 0xc549
   109da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109de:	2200      	movs	r2, #0
   109e0:	701a      	strb	r2, [r3, #0]
   109e2:	f24c 5349 	movw	r3, #50505	; 0xc549
   109e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109ea:	781b      	ldrb	r3, [r3, #0]
   109ec:	461a      	mov	r2, r3
   109ee:	f240 5344 	movw	r3, #1348	; 0x544
   109f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109f6:	7859      	ldrb	r1, [r3, #1]
   109f8:	f24c 534c 	movw	r3, #50508	; 0xc54c
   109fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a00:	5499      	strb	r1, [r3, r2]
   10a02:	4b7a      	ldr	r3, [pc, #488]	; (10bec <send_radIR+0xbf0>)
   10a04:	781a      	ldrb	r2, [r3, #0]
   10a06:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10a0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a0e:	781b      	ldrb	r3, [r3, #0]
   10a10:	4413      	add	r3, r2
   10a12:	b2da      	uxtb	r2, r3
   10a14:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10a18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a1c:	701a      	strb	r2, [r3, #0]
   10a1e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10a22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a26:	781a      	ldrb	r2, [r3, #0]
   10a28:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10a2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a30:	781b      	ldrb	r3, [r3, #0]
   10a32:	4413      	add	r3, r2
   10a34:	b2da      	uxtb	r2, r3
   10a36:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10a3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a3e:	701a      	strb	r2, [r3, #0]
   10a40:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a48:	781b      	ldrb	r3, [r3, #0]
   10a4a:	3301      	adds	r3, #1
   10a4c:	b2da      	uxtb	r2, r3
   10a4e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a56:	701a      	strb	r2, [r3, #0]
   10a58:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a60:	781b      	ldrb	r3, [r3, #0]
   10a62:	2bff      	cmp	r3, #255	; 0xff
   10a64:	d105      	bne.n	10a72 <send_radIR+0xa76>
   10a66:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a6e:	2200      	movs	r2, #0
   10a70:	701a      	strb	r2, [r3, #0]
   10a72:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a7a:	781b      	ldrb	r3, [r3, #0]
   10a7c:	461a      	mov	r2, r3
   10a7e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10a82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a86:	7819      	ldrb	r1, [r3, #0]
   10a88:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10a8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a90:	5499      	strb	r1, [r3, r2]
   10a92:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a9a:	781b      	ldrb	r3, [r3, #0]
   10a9c:	3301      	adds	r3, #1
   10a9e:	b2da      	uxtb	r2, r3
   10aa0:	f24c 5349 	movw	r3, #50505	; 0xc549
   10aa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10aa8:	701a      	strb	r2, [r3, #0]
   10aaa:	f24c 5349 	movw	r3, #50505	; 0xc549
   10aae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ab2:	781b      	ldrb	r3, [r3, #0]
   10ab4:	2bff      	cmp	r3, #255	; 0xff
   10ab6:	d105      	bne.n	10ac4 <send_radIR+0xac8>
   10ab8:	f24c 5349 	movw	r3, #50505	; 0xc549
   10abc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ac0:	2200      	movs	r2, #0
   10ac2:	701a      	strb	r2, [r3, #0]
   10ac4:	f24c 5349 	movw	r3, #50505	; 0xc549
   10ac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10acc:	781b      	ldrb	r3, [r3, #0]
   10ace:	461a      	mov	r2, r3
   10ad0:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10ad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ad8:	7819      	ldrb	r1, [r3, #0]
   10ada:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10ade:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ae2:	5499      	strb	r1, [r3, r2]
   10ae4:	f24c 5349 	movw	r3, #50505	; 0xc549
   10ae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10aec:	781b      	ldrb	r3, [r3, #0]
   10aee:	3301      	adds	r3, #1
   10af0:	b2da      	uxtb	r2, r3
   10af2:	f24c 5349 	movw	r3, #50505	; 0xc549
   10af6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10afa:	701a      	strb	r2, [r3, #0]
   10afc:	f24c 5349 	movw	r3, #50505	; 0xc549
   10b00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b04:	781b      	ldrb	r3, [r3, #0]
   10b06:	2bff      	cmp	r3, #255	; 0xff
   10b08:	d105      	bne.n	10b16 <send_radIR+0xb1a>
   10b0a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10b0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b12:	2200      	movs	r2, #0
   10b14:	701a      	strb	r2, [r3, #0]
   10b16:	f242 0339 	movw	r3, #8249	; 0x2039
   10b1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b1e:	781b      	ldrb	r3, [r3, #0]
   10b20:	b2db      	uxtb	r3, r3
   10b22:	f003 0310 	and.w	r3, r3, #16
   10b26:	2b00      	cmp	r3, #0
   10b28:	d15a      	bne.n	10be0 <send_radIR+0xbe4>
   10b2a:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10b2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b32:	781b      	ldrb	r3, [r3, #0]
   10b34:	b2db      	uxtb	r3, r3
   10b36:	461a      	mov	r2, r3
   10b38:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10b3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b40:	5c9a      	ldrb	r2, [r3, r2]
   10b42:	f24c 634b 	movw	r3, #50763	; 0xc64b
   10b46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b4a:	701a      	strb	r2, [r3, #0]
   10b4c:	f24c 634c 	movw	r3, #50764	; 0xc64c
   10b50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b54:	2200      	movs	r2, #0
   10b56:	701a      	strb	r2, [r3, #0]
   10b58:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10b5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b60:	781b      	ldrb	r3, [r3, #0]
   10b62:	b2db      	uxtb	r3, r3
   10b64:	3301      	adds	r3, #1
   10b66:	b2da      	uxtb	r2, r3
   10b68:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10b6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b70:	701a      	strb	r2, [r3, #0]
   10b72:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10b76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b7a:	781b      	ldrb	r3, [r3, #0]
   10b7c:	b2db      	uxtb	r3, r3
   10b7e:	2bff      	cmp	r3, #255	; 0xff
   10b80:	d105      	bne.n	10b8e <send_radIR+0xb92>
   10b82:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10b86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b8a:	2200      	movs	r2, #0
   10b8c:	701a      	strb	r2, [r3, #0]
   10b8e:	f242 0338 	movw	r3, #8248	; 0x2038
   10b92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b96:	f242 0238 	movw	r2, #8248	; 0x2038
   10b9a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10b9e:	7812      	ldrb	r2, [r2, #0]
   10ba0:	b2d2      	uxtb	r2, r2
   10ba2:	f042 0201 	orr.w	r2, r2, #1
   10ba6:	b2d2      	uxtb	r2, r2
   10ba8:	701a      	strb	r2, [r3, #0]
   10baa:	f242 0339 	movw	r3, #8249	; 0x2039
   10bae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bb2:	f242 0239 	movw	r2, #8249	; 0x2039
   10bb6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10bba:	7812      	ldrb	r2, [r2, #0]
   10bbc:	b2d2      	uxtb	r2, r2
   10bbe:	f042 0210 	orr.w	r2, r2, #16
   10bc2:	b2d2      	uxtb	r2, r2
   10bc4:	701a      	strb	r2, [r3, #0]
   10bc6:	e00b      	b.n	10be0 <send_radIR+0xbe4>
   10bc8:	f24c 5348 	movw	r3, #50504	; 0xc548
   10bcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bd0:	781b      	ldrb	r3, [r3, #0]
   10bd2:	3301      	adds	r3, #1
   10bd4:	b2da      	uxtb	r2, r3
   10bd6:	f24c 5348 	movw	r3, #50504	; 0xc548
   10bda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bde:	701a      	strb	r2, [r3, #0]
}
   10be0:	46bd      	mov	sp, r7
   10be2:	f85d 7b04 	ldr.w	r7, [sp], #4
   10be6:	4770      	bx	lr
   10be8:	20000543 	.word	0x20000543
   10bec:	20000545 	.word	0x20000545

00010bf0 <send_takeOff>:

void send_takeOff(void){
   10bf0:	b580      	push	{r7, lr}
   10bf2:	af00      	add	r7, sp, #0
  if (gps_pos_available){
   10bf4:	f24c 63de 	movw	r3, #50910	; 0xc6de
   10bf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bfc:	781b      	ldrb	r3, [r3, #0]
   10bfe:	2b00      	cmp	r3, #0
   10c00:	f000 8200 	beq.w	11004 <send_takeOff+0x414>
     if (!estimator_flight_time && (estimator_hspeed_mod > MIN_SPEED_FOR_TAKEOFF)) {
   10c04:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   10c08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c0c:	881b      	ldrh	r3, [r3, #0]
   10c0e:	2b00      	cmp	r3, #0
   10c10:	f040 81f2 	bne.w	10ff8 <send_takeOff+0x408>
   10c14:	f64c 3334 	movw	r3, #52020	; 0xcb34
   10c18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c1c:	681b      	ldr	r3, [r3, #0]
   10c1e:	4618      	mov	r0, r3
   10c20:	f04f 0100 	mov.w	r1, #0
   10c24:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   10c28:	f007 fdfe 	bl	18828 <__aeabi_fcmpgt>
   10c2c:	4603      	mov	r3, r0
   10c2e:	2b00      	cmp	r3, #0
   10c30:	f000 81e2 	beq.w	10ff8 <send_takeOff+0x408>
        estimator_flight_time = 1;
   10c34:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   10c38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c3c:	2201      	movs	r2, #1
   10c3e:	801a      	strh	r2, [r3, #0]
        launch = TRUE; /* Not set in non auto launch */
   10c40:	f24c 5340 	movw	r3, #50496	; 0xc540
   10c44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c48:	2201      	movs	r2, #1
   10c4a:	701a      	strb	r2, [r3, #0]
        DOWNLINK_SEND_TAKEOFF(&cputime);
   10c4c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10c50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c54:	781a      	ldrb	r2, [r3, #0]
   10c56:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10c5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c5e:	781b      	ldrb	r3, [r3, #0]
   10c60:	b2db      	uxtb	r3, r3
   10c62:	429a      	cmp	r2, r3
   10c64:	d313      	bcc.n	10c8e <send_takeOff+0x9e>
   10c66:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10c6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c6e:	781b      	ldrb	r3, [r3, #0]
   10c70:	b2db      	uxtb	r3, r3
   10c72:	461a      	mov	r2, r3
   10c74:	f24c 5349 	movw	r3, #50505	; 0xc549
   10c78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c7c:	781b      	ldrb	r3, [r3, #0]
   10c7e:	1ad3      	subs	r3, r2, r3
   10c80:	33ff      	adds	r3, #255	; 0xff
   10c82:	2b06      	cmp	r3, #6
   10c84:	bfd4      	ite	le
   10c86:	2300      	movle	r3, #0
   10c88:	2301      	movgt	r3, #1
   10c8a:	b2db      	uxtb	r3, r3
   10c8c:	e011      	b.n	10cb2 <send_takeOff+0xc2>
   10c8e:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10c92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c96:	781b      	ldrb	r3, [r3, #0]
   10c98:	b2db      	uxtb	r3, r3
   10c9a:	461a      	mov	r2, r3
   10c9c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10ca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ca4:	781b      	ldrb	r3, [r3, #0]
   10ca6:	1ad3      	subs	r3, r2, r3
   10ca8:	2b06      	cmp	r3, #6
   10caa:	bfd4      	ite	le
   10cac:	2300      	movle	r3, #0
   10cae:	2301      	movgt	r3, #1
   10cb0:	b2db      	uxtb	r3, r3
   10cb2:	2b00      	cmp	r3, #0
   10cb4:	f000 8194 	beq.w	10fe0 <send_takeOff+0x3f0>
   10cb8:	f24c 5349 	movw	r3, #50505	; 0xc549
   10cbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cc0:	781b      	ldrb	r3, [r3, #0]
   10cc2:	461a      	mov	r2, r3
   10cc4:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10cc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ccc:	2105      	movs	r1, #5
   10cce:	5499      	strb	r1, [r3, r2]
   10cd0:	f24c 5349 	movw	r3, #50505	; 0xc549
   10cd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cd8:	781b      	ldrb	r3, [r3, #0]
   10cda:	3301      	adds	r3, #1
   10cdc:	b2da      	uxtb	r2, r3
   10cde:	f24c 5349 	movw	r3, #50505	; 0xc549
   10ce2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ce6:	701a      	strb	r2, [r3, #0]
   10ce8:	f24c 5349 	movw	r3, #50505	; 0xc549
   10cec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cf0:	781b      	ldrb	r3, [r3, #0]
   10cf2:	2bff      	cmp	r3, #255	; 0xff
   10cf4:	d105      	bne.n	10d02 <send_takeOff+0x112>
   10cf6:	f24c 5349 	movw	r3, #50505	; 0xc549
   10cfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cfe:	2200      	movs	r2, #0
   10d00:	701a      	strb	r2, [r3, #0]
   10d02:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d0a:	781b      	ldrb	r3, [r3, #0]
   10d0c:	461a      	mov	r2, r3
   10d0e:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10d12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d16:	2104      	movs	r1, #4
   10d18:	5499      	strb	r1, [r3, r2]
   10d1a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d22:	781b      	ldrb	r3, [r3, #0]
   10d24:	3301      	adds	r3, #1
   10d26:	b2da      	uxtb	r2, r3
   10d28:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d30:	701a      	strb	r2, [r3, #0]
   10d32:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d3a:	781b      	ldrb	r3, [r3, #0]
   10d3c:	2bff      	cmp	r3, #255	; 0xff
   10d3e:	d105      	bne.n	10d4c <send_takeOff+0x15c>
   10d40:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d48:	2200      	movs	r2, #0
   10d4a:	701a      	strb	r2, [r3, #0]
   10d4c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10d50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d54:	2204      	movs	r2, #4
   10d56:	701a      	strb	r2, [r3, #0]
   10d58:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10d5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d60:	2204      	movs	r2, #4
   10d62:	701a      	strb	r2, [r3, #0]
   10d64:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d6c:	781b      	ldrb	r3, [r3, #0]
   10d6e:	461a      	mov	r2, r3
   10d70:	f24c 532a 	movw	r3, #50474	; 0xc52a
   10d74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d78:	7819      	ldrb	r1, [r3, #0]
   10d7a:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10d7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d82:	5499      	strb	r1, [r3, r2]
   10d84:	f24c 532a 	movw	r3, #50474	; 0xc52a
   10d88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d8c:	781a      	ldrb	r2, [r3, #0]
   10d8e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10d92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d96:	781b      	ldrb	r3, [r3, #0]
   10d98:	4413      	add	r3, r2
   10d9a:	b2da      	uxtb	r2, r3
   10d9c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10da0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10da4:	701a      	strb	r2, [r3, #0]
   10da6:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10daa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dae:	781a      	ldrb	r2, [r3, #0]
   10db0:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10db4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10db8:	781b      	ldrb	r3, [r3, #0]
   10dba:	4413      	add	r3, r2
   10dbc:	b2da      	uxtb	r2, r3
   10dbe:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10dc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dc6:	701a      	strb	r2, [r3, #0]
   10dc8:	f24c 5349 	movw	r3, #50505	; 0xc549
   10dcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dd0:	781b      	ldrb	r3, [r3, #0]
   10dd2:	3301      	adds	r3, #1
   10dd4:	b2da      	uxtb	r2, r3
   10dd6:	f24c 5349 	movw	r3, #50505	; 0xc549
   10dda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dde:	701a      	strb	r2, [r3, #0]
   10de0:	f24c 5349 	movw	r3, #50505	; 0xc549
   10de4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10de8:	781b      	ldrb	r3, [r3, #0]
   10dea:	2bff      	cmp	r3, #255	; 0xff
   10dec:	d105      	bne.n	10dfa <send_takeOff+0x20a>
   10dee:	f24c 5349 	movw	r3, #50505	; 0xc549
   10df2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10df6:	2200      	movs	r2, #0
   10df8:	701a      	strb	r2, [r3, #0]
   10dfa:	f24c 5349 	movw	r3, #50505	; 0xc549
   10dfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e02:	781b      	ldrb	r3, [r3, #0]
   10e04:	461a      	mov	r2, r3
   10e06:	f24c 532a 	movw	r3, #50474	; 0xc52a
   10e0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e0e:	7859      	ldrb	r1, [r3, #1]
   10e10:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10e14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e18:	5499      	strb	r1, [r3, r2]
   10e1a:	4b7b      	ldr	r3, [pc, #492]	; (11008 <send_takeOff+0x418>)
   10e1c:	781a      	ldrb	r2, [r3, #0]
   10e1e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10e22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e26:	781b      	ldrb	r3, [r3, #0]
   10e28:	4413      	add	r3, r2
   10e2a:	b2da      	uxtb	r2, r3
   10e2c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10e30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e34:	701a      	strb	r2, [r3, #0]
   10e36:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10e3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e3e:	781a      	ldrb	r2, [r3, #0]
   10e40:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10e44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e48:	781b      	ldrb	r3, [r3, #0]
   10e4a:	4413      	add	r3, r2
   10e4c:	b2da      	uxtb	r2, r3
   10e4e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10e52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e56:	701a      	strb	r2, [r3, #0]
   10e58:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e60:	781b      	ldrb	r3, [r3, #0]
   10e62:	3301      	adds	r3, #1
   10e64:	b2da      	uxtb	r2, r3
   10e66:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e6e:	701a      	strb	r2, [r3, #0]
   10e70:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e78:	781b      	ldrb	r3, [r3, #0]
   10e7a:	2bff      	cmp	r3, #255	; 0xff
   10e7c:	d105      	bne.n	10e8a <send_takeOff+0x29a>
   10e7e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e86:	2200      	movs	r2, #0
   10e88:	701a      	strb	r2, [r3, #0]
   10e8a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e92:	781b      	ldrb	r3, [r3, #0]
   10e94:	461a      	mov	r2, r3
   10e96:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10e9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e9e:	7819      	ldrb	r1, [r3, #0]
   10ea0:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10ea4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ea8:	5499      	strb	r1, [r3, r2]
   10eaa:	f24c 5349 	movw	r3, #50505	; 0xc549
   10eae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10eb2:	781b      	ldrb	r3, [r3, #0]
   10eb4:	3301      	adds	r3, #1
   10eb6:	b2da      	uxtb	r2, r3
   10eb8:	f24c 5349 	movw	r3, #50505	; 0xc549
   10ebc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ec0:	701a      	strb	r2, [r3, #0]
   10ec2:	f24c 5349 	movw	r3, #50505	; 0xc549
   10ec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10eca:	781b      	ldrb	r3, [r3, #0]
   10ecc:	2bff      	cmp	r3, #255	; 0xff
   10ece:	d105      	bne.n	10edc <send_takeOff+0x2ec>
   10ed0:	f24c 5349 	movw	r3, #50505	; 0xc549
   10ed4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ed8:	2200      	movs	r2, #0
   10eda:	701a      	strb	r2, [r3, #0]
   10edc:	f24c 5349 	movw	r3, #50505	; 0xc549
   10ee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ee4:	781b      	ldrb	r3, [r3, #0]
   10ee6:	461a      	mov	r2, r3
   10ee8:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10eec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ef0:	7819      	ldrb	r1, [r3, #0]
   10ef2:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10ef6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10efa:	5499      	strb	r1, [r3, r2]
   10efc:	f24c 5349 	movw	r3, #50505	; 0xc549
   10f00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f04:	781b      	ldrb	r3, [r3, #0]
   10f06:	3301      	adds	r3, #1
   10f08:	b2da      	uxtb	r2, r3
   10f0a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10f0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f12:	701a      	strb	r2, [r3, #0]
   10f14:	f24c 5349 	movw	r3, #50505	; 0xc549
   10f18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f1c:	781b      	ldrb	r3, [r3, #0]
   10f1e:	2bff      	cmp	r3, #255	; 0xff
   10f20:	d105      	bne.n	10f2e <send_takeOff+0x33e>
   10f22:	f24c 5349 	movw	r3, #50505	; 0xc549
   10f26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f2a:	2200      	movs	r2, #0
   10f2c:	701a      	strb	r2, [r3, #0]
   10f2e:	f242 0339 	movw	r3, #8249	; 0x2039
   10f32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f36:	781b      	ldrb	r3, [r3, #0]
   10f38:	b2db      	uxtb	r3, r3
   10f3a:	f003 0310 	and.w	r3, r3, #16
   10f3e:	2b00      	cmp	r3, #0
   10f40:	d15a      	bne.n	10ff8 <send_takeOff+0x408>
   10f42:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10f46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f4a:	781b      	ldrb	r3, [r3, #0]
   10f4c:	b2db      	uxtb	r3, r3
   10f4e:	461a      	mov	r2, r3
   10f50:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10f54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f58:	5c9a      	ldrb	r2, [r3, r2]
   10f5a:	f24c 634b 	movw	r3, #50763	; 0xc64b
   10f5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f62:	701a      	strb	r2, [r3, #0]
   10f64:	f24c 634c 	movw	r3, #50764	; 0xc64c
   10f68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f6c:	2200      	movs	r2, #0
   10f6e:	701a      	strb	r2, [r3, #0]
   10f70:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10f74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f78:	781b      	ldrb	r3, [r3, #0]
   10f7a:	b2db      	uxtb	r3, r3
   10f7c:	3301      	adds	r3, #1
   10f7e:	b2da      	uxtb	r2, r3
   10f80:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10f84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f88:	701a      	strb	r2, [r3, #0]
   10f8a:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10f8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f92:	781b      	ldrb	r3, [r3, #0]
   10f94:	b2db      	uxtb	r3, r3
   10f96:	2bff      	cmp	r3, #255	; 0xff
   10f98:	d105      	bne.n	10fa6 <send_takeOff+0x3b6>
   10f9a:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10f9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fa2:	2200      	movs	r2, #0
   10fa4:	701a      	strb	r2, [r3, #0]
   10fa6:	f242 0338 	movw	r3, #8248	; 0x2038
   10faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fae:	f242 0238 	movw	r2, #8248	; 0x2038
   10fb2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10fb6:	7812      	ldrb	r2, [r2, #0]
   10fb8:	b2d2      	uxtb	r2, r2
   10fba:	f042 0201 	orr.w	r2, r2, #1
   10fbe:	b2d2      	uxtb	r2, r2
   10fc0:	701a      	strb	r2, [r3, #0]
   10fc2:	f242 0339 	movw	r3, #8249	; 0x2039
   10fc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fca:	f242 0239 	movw	r2, #8249	; 0x2039
   10fce:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10fd2:	7812      	ldrb	r2, [r2, #0]
   10fd4:	b2d2      	uxtb	r2, r2
   10fd6:	f042 0210 	orr.w	r2, r2, #16
   10fda:	b2d2      	uxtb	r2, r2
   10fdc:	701a      	strb	r2, [r3, #0]
   10fde:	e00b      	b.n	10ff8 <send_takeOff+0x408>
   10fe0:	f24c 5348 	movw	r3, #50504	; 0xc548
   10fe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fe8:	781b      	ldrb	r3, [r3, #0]
   10fea:	3301      	adds	r3, #1
   10fec:	b2da      	uxtb	r2, r3
   10fee:	f24c 5348 	movw	r3, #50504	; 0xc548
   10ff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ff6:	701a      	strb	r2, [r3, #0]
     }
     gps_pos_available = FALSE; 
   10ff8:	f24c 63de 	movw	r3, #50910	; 0xc6de
   10ffc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11000:	2200      	movs	r2, #0
   11002:	701a      	strb	r2, [r3, #0]
  }
  //vPrintString("S_16 receive_gps_data_task end!\n\r");
}
   11004:	bd80      	pop	{r7, pc}
   11006:	bf00      	nop
   11008:	2004c52b 	.word	0x2004c52b
   1100c:	f3af 8000 	nop.w

00011010 <modem_init>:
uint8_t    tx_byte;
uint8_t    tx_byte_idx;

uint8_t ck_a, ck_b;

void modem_init( void ) {
   11010:	b480      	push	{r7}
   11012:	af00      	add	r7, sp, #0
  /* 
     on >= V1.2 boards, 4MHz modem clock is generated
     by one PWM module.
  */
#if defined CTL_BRD_V1_2 || defined CTL_BRD_V1_2_1
  MODEM_OSC_DDR |= _BV(MODEM_OSC);
   11014:	f242 0317 	movw	r3, #8215	; 0x2017
   11018:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1101c:	f242 0217 	movw	r2, #8215	; 0x2017
   11020:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11024:	7812      	ldrb	r2, [r2, #0]
   11026:	b2d2      	uxtb	r2, r2
   11028:	f042 0210 	orr.w	r2, r2, #16
   1102c:	b2d2      	uxtb	r2, r2
   1102e:	701a      	strb	r2, [r3, #0]
  OCR0 = 1; /* 4MhZ */
   11030:	f242 0331 	movw	r3, #8241	; 0x2031
   11034:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11038:	2201      	movs	r2, #1
   1103a:	701a      	strb	r2, [r3, #0]
  TCCR0 = _BV(WGM01) | _BV(COM00) | _BV(CS00);
   1103c:	f242 0333 	movw	r3, #8243	; 0x2033
   11040:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11044:	2219      	movs	r2, #25
   11046:	701a      	strb	r2, [r3, #0]
#endif

  /* setup TX_EN and TX_DATA pin as output */
  MODEM_TX_DDR |= _BV(MODEM_TX_EN) | _BV(MODEM_TX_DATA);
   11048:	f242 0311 	movw	r3, #8209	; 0x2011
   1104c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11050:	f242 0211 	movw	r2, #8209	; 0x2011
   11054:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11058:	7812      	ldrb	r2, [r2, #0]
   1105a:	b2d2      	uxtb	r2, r2
   1105c:	f062 023f 	orn	r2, r2, #63	; 0x3f
   11060:	b2d2      	uxtb	r2, r2
   11062:	701a      	strb	r2, [r3, #0]
  /* data idles hight */
  sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   11064:	f242 0312 	movw	r3, #8210	; 0x2012
   11068:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1106c:	f242 0212 	movw	r2, #8210	; 0x2012
   11070:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11074:	7812      	ldrb	r2, [r2, #0]
   11076:	b2d2      	uxtb	r2, r2
   11078:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1107c:	b2d2      	uxtb	r2, r2
   1107e:	701a      	strb	r2, [r3, #0]
  /* enable transmitter */
  cbi(MODEM_TX_PORT, MODEM_TX_EN);
   11080:	f242 0312 	movw	r3, #8210	; 0x2012
   11084:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11088:	f242 0212 	movw	r2, #8210	; 0x2012
   1108c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11090:	7812      	ldrb	r2, [r2, #0]
   11092:	b2d2      	uxtb	r2, r2
   11094:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11098:	b2d2      	uxtb	r2, r2
   1109a:	701a      	strb	r2, [r3, #0]
  /* set interrupt on failing edge of clock */
  MODEM_CLK_INT_REG |=  MODEM_CLK_INT_CFG;
   1109c:	f242 033a 	movw	r3, #8250	; 0x203a
   110a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110a4:	f242 023a 	movw	r2, #8250	; 0x203a
   110a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110ac:	7812      	ldrb	r2, [r2, #0]
   110ae:	b2d2      	uxtb	r2, r2
   110b0:	f042 0202 	orr.w	r2, r2, #2
   110b4:	b2d2      	uxtb	r2, r2
   110b6:	701a      	strb	r2, [r3, #0]
}
   110b8:	46bd      	mov	sp, r7
   110ba:	f85d 7b04 	ldr.w	r7, [sp], #4
   110be:	4770      	bx	lr

000110c0 <__vector_5>:

SIGNAL( MODEM_CLK_INT_SIG ) {
   110c0:	b480      	push	{r7}
   110c2:	af00      	add	r7, sp, #0
  /*  start bit         */
  if (tx_byte_idx == 0)
   110c4:	f24c 634c 	movw	r3, #50764	; 0xc64c
   110c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110cc:	781b      	ldrb	r3, [r3, #0]
   110ce:	2b00      	cmp	r3, #0
   110d0:	d10e      	bne.n	110f0 <__vector_5+0x30>
    cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   110d2:	f242 0312 	movw	r3, #8210	; 0x2012
   110d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110da:	f242 0212 	movw	r2, #8210	; 0x2012
   110de:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110e2:	7812      	ldrb	r2, [r2, #0]
   110e4:	b2d2      	uxtb	r2, r2
   110e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   110ea:	b2d2      	uxtb	r2, r2
   110ec:	701a      	strb	r2, [r3, #0]
   110ee:	e047      	b.n	11180 <__vector_5+0xc0>
  /* 8 data bits        */ 
  else if (tx_byte_idx < 9) {
   110f0:	f24c 634c 	movw	r3, #50764	; 0xc64c
   110f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110f8:	781b      	ldrb	r3, [r3, #0]
   110fa:	2b08      	cmp	r3, #8
   110fc:	d832      	bhi.n	11164 <__vector_5+0xa4>
    if (tx_byte & 0x01)
   110fe:	f24c 634b 	movw	r3, #50763	; 0xc64b
   11102:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11106:	781b      	ldrb	r3, [r3, #0]
   11108:	f003 0301 	and.w	r3, r3, #1
   1110c:	2b00      	cmp	r3, #0
   1110e:	d00e      	beq.n	1112e <__vector_5+0x6e>
      sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   11110:	f242 0312 	movw	r3, #8210	; 0x2012
   11114:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11118:	f242 0212 	movw	r2, #8210	; 0x2012
   1111c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11120:	7812      	ldrb	r2, [r2, #0]
   11122:	b2d2      	uxtb	r2, r2
   11124:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11128:	b2d2      	uxtb	r2, r2
   1112a:	701a      	strb	r2, [r3, #0]
   1112c:	e00d      	b.n	1114a <__vector_5+0x8a>
    else
      cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   1112e:	f242 0312 	movw	r3, #8210	; 0x2012
   11132:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11136:	f242 0212 	movw	r2, #8210	; 0x2012
   1113a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1113e:	7812      	ldrb	r2, [r2, #0]
   11140:	b2d2      	uxtb	r2, r2
   11142:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   11146:	b2d2      	uxtb	r2, r2
   11148:	701a      	strb	r2, [r3, #0]
    tx_byte >>= 1;
   1114a:	f24c 634b 	movw	r3, #50763	; 0xc64b
   1114e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11152:	781b      	ldrb	r3, [r3, #0]
   11154:	085b      	lsrs	r3, r3, #1
   11156:	b2da      	uxtb	r2, r3
   11158:	f24c 634b 	movw	r3, #50763	; 0xc64b
   1115c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11160:	701a      	strb	r2, [r3, #0]
   11162:	e00d      	b.n	11180 <__vector_5+0xc0>
  }
  /* stop_bit           */
  else {
    sbi(MODEM_TX_PORT, MODEM_TX_DATA); 
   11164:	f242 0312 	movw	r3, #8210	; 0x2012
   11168:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1116c:	f242 0212 	movw	r2, #8210	; 0x2012
   11170:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11174:	7812      	ldrb	r2, [r2, #0]
   11176:	b2d2      	uxtb	r2, r2
   11178:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1117c:	b2d2      	uxtb	r2, r2
   1117e:	701a      	strb	r2, [r3, #0]
  }
  tx_byte_idx++;
   11180:	f24c 634c 	movw	r3, #50764	; 0xc64c
   11184:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11188:	781b      	ldrb	r3, [r3, #0]
   1118a:	3301      	adds	r3, #1
   1118c:	b2da      	uxtb	r2, r3
   1118e:	f24c 634c 	movw	r3, #50764	; 0xc64c
   11192:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11196:	701a      	strb	r2, [r3, #0]
  /* next byte          */
  if (tx_byte_idx >= 10) {
   11198:	f24c 634c 	movw	r3, #50764	; 0xc64c
   1119c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111a0:	781b      	ldrb	r3, [r3, #0]
   111a2:	2b09      	cmp	r3, #9
   111a4:	d94d      	bls.n	11242 <__vector_5+0x182>
    /*  if we have nothing left to transmit */
    if( tx_head == tx_tail ) {
   111a6:	f24c 5349 	movw	r3, #50505	; 0xc549
   111aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111ae:	781a      	ldrb	r2, [r3, #0]
   111b0:	f24c 534a 	movw	r3, #50506	; 0xc54a
   111b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111b8:	781b      	ldrb	r3, [r3, #0]
   111ba:	b2db      	uxtb	r3, r3
   111bc:	429a      	cmp	r2, r3
   111be:	d10e      	bne.n	111de <__vector_5+0x11e>
      /* disable clock interrupt            */
      cbi( EIMSK, MODEM_CLK_INT );
   111c0:	f242 0339 	movw	r3, #8249	; 0x2039
   111c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111c8:	f242 0239 	movw	r2, #8249	; 0x2039
   111cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   111d0:	7812      	ldrb	r2, [r2, #0]
   111d2:	b2d2      	uxtb	r2, r2
   111d4:	f022 0210 	bic.w	r2, r2, #16
   111d8:	b2d2      	uxtb	r2, r2
   111da:	701a      	strb	r2, [r3, #0]
   111dc:	e031      	b.n	11242 <__vector_5+0x182>
    } else {
      /* else load next byte                  */
      MODEM_LOAD_NEXT_BYTE();  
   111de:	f24c 534a 	movw	r3, #50506	; 0xc54a
   111e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111e6:	781b      	ldrb	r3, [r3, #0]
   111e8:	b2db      	uxtb	r3, r3
   111ea:	461a      	mov	r2, r3
   111ec:	f24c 534c 	movw	r3, #50508	; 0xc54c
   111f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111f4:	5c9a      	ldrb	r2, [r3, r2]
   111f6:	f24c 634b 	movw	r3, #50763	; 0xc64b
   111fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111fe:	701a      	strb	r2, [r3, #0]
   11200:	f24c 634c 	movw	r3, #50764	; 0xc64c
   11204:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11208:	2200      	movs	r2, #0
   1120a:	701a      	strb	r2, [r3, #0]
   1120c:	f24c 534a 	movw	r3, #50506	; 0xc54a
   11210:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11214:	781b      	ldrb	r3, [r3, #0]
   11216:	b2db      	uxtb	r3, r3
   11218:	3301      	adds	r3, #1
   1121a:	b2da      	uxtb	r2, r3
   1121c:	f24c 534a 	movw	r3, #50506	; 0xc54a
   11220:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11224:	701a      	strb	r2, [r3, #0]
   11226:	f24c 534a 	movw	r3, #50506	; 0xc54a
   1122a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1122e:	781b      	ldrb	r3, [r3, #0]
   11230:	b2db      	uxtb	r3, r3
   11232:	2bff      	cmp	r3, #255	; 0xff
   11234:	d105      	bne.n	11242 <__vector_5+0x182>
   11236:	f24c 534a 	movw	r3, #50506	; 0xc54a
   1123a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1123e:	2200      	movs	r2, #0
   11240:	701a      	strb	r2, [r3, #0]
    }
  }
}
   11242:	46bd      	mov	sp, r7
   11244:	f85d 7b04 	ldr.w	r7, [sp], #4
   11248:	4770      	bx	lr
   1124a:	bf00      	nop

0001124c <link_fbw_init>:
uint8_t link_fbw_fbw_nb_err;

static uint8_t idx_buf;
static uint8_t xor_in, xor_out;

void link_fbw_init(void) {
   1124c:	b480      	push	{r7}
   1124e:	af00      	add	r7, sp, #0
  link_fbw_nb_err;
   11250:	f24c 637f 	movw	r3, #50815	; 0xc67f
   11254:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11258:	781b      	ldrb	r3, [r3, #0]
  link_fbw_receive_complete = FALSE;  
   1125a:	f240 533e 	movw	r3, #1342	; 0x53e
   1125e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11262:	2200      	movs	r2, #0
   11264:	701a      	strb	r2, [r3, #0]
}
   11266:	46bd      	mov	sp, r7
   11268:	f85d 7b04 	ldr.w	r7, [sp], #4
   1126c:	4770      	bx	lr
   1126e:	bf00      	nop

00011270 <link_fbw_send>:

void link_fbw_send(void) {
   11270:	b480      	push	{r7}
   11272:	b083      	sub	sp, #12
   11274:	af00      	add	r7, sp, #0
    //vPrintString("S_7 link_fbw_send start! \n\r"); //SunnyBeike

    if (spi_cur_slave != SPI_NONE) 
   11276:	f24c 6384 	movw	r3, #50820	; 0xc684
   1127a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1127e:	781b      	ldrb	r3, [r3, #0]
   11280:	b2db      	uxtb	r3, r3
   11282:	2b00      	cmp	r3, #0
   11284:	d00c      	beq.n	112a0 <link_fbw_send+0x30>
    {
        spi_nb_ovrn++;
   11286:	f24c 6385 	movw	r3, #50821	; 0xc685
   1128a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1128e:	781b      	ldrb	r3, [r3, #0]
   11290:	3301      	adds	r3, #1
   11292:	b2da      	uxtb	r2, r3
   11294:	f24c 6385 	movw	r3, #50821	; 0xc685
   11298:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1129c:	701a      	strb	r2, [r3, #0]
        //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
        return;
   1129e:	e064      	b.n	1136a <link_fbw_send+0xfa>
    }

    /* Enable SPI, Master, set clock rate fck/16 */ 
    SPI_START(_BV(SPE) | _BV(MSTR) | _BV(SPR0)); // | _BV(SPR1);
   112a0:	f242 030d 	movw	r3, #8205	; 0x200d
   112a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112a8:	2251      	movs	r2, #81	; 0x51
   112aa:	701a      	strb	r2, [r3, #0]
   112ac:	f242 030e 	movw	r3, #8206	; 0x200e
   112b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112b4:	781b      	ldrb	r3, [r3, #0]
   112b6:	b2db      	uxtb	r3, r3
   112b8:	b2db      	uxtb	r3, r3
   112ba:	b25b      	sxtb	r3, r3
   112bc:	2b00      	cmp	r3, #0
   112be:	da05      	bge.n	112cc <link_fbw_send+0x5c>
   112c0:	f242 030f 	movw	r3, #8207	; 0x200f
   112c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112c8:	781b      	ldrb	r3, [r3, #0]
   112ca:	71fb      	strb	r3, [r7, #7]
   112cc:	f242 030d 	movw	r3, #8205	; 0x200d
   112d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112d4:	f242 020d 	movw	r2, #8205	; 0x200d
   112d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   112dc:	7812      	ldrb	r2, [r2, #0]
   112de:	b2d2      	uxtb	r2, r2
   112e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
   112e4:	b2d2      	uxtb	r2, r2
   112e6:	701a      	strb	r2, [r3, #0]
    SPI_SELECT_SLAVE0();
   112e8:	f24c 6384 	movw	r3, #50820	; 0xc684
   112ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112f0:	2201      	movs	r2, #1
   112f2:	701a      	strb	r2, [r3, #0]
   112f4:	f242 0318 	movw	r3, #8216	; 0x2018
   112f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112fc:	f242 0218 	movw	r2, #8216	; 0x2018
   11300:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11304:	7812      	ldrb	r2, [r2, #0]
   11306:	b2d2      	uxtb	r2, r2
   11308:	f022 0201 	bic.w	r2, r2, #1
   1130c:	b2d2      	uxtb	r2, r2
   1130e:	701a      	strb	r2, [r3, #0]

    idx_buf = 0;
   11310:	f24c 6381 	movw	r3, #50817	; 0xc681
   11314:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11318:	2200      	movs	r2, #0
   1131a:	701a      	strb	r2, [r3, #0]
    xor_in = 0;
   1131c:	f24c 6382 	movw	r3, #50818	; 0xc682
   11320:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11324:	2200      	movs	r2, #0
   11326:	701a      	strb	r2, [r3, #0]
    xor_out = ((uint8_t*)&to_fbw)[idx_buf];
   11328:	f24c 6381 	movw	r3, #50817	; 0xc681
   1132c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11330:	781b      	ldrb	r3, [r3, #0]
   11332:	461a      	mov	r2, r3
   11334:	f24c 6368 	movw	r3, #50792	; 0xc668
   11338:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1133c:	4413      	add	r3, r2
   1133e:	781a      	ldrb	r2, [r3, #0]
   11340:	f24c 6383 	movw	r3, #50819	; 0xc683
   11344:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11348:	701a      	strb	r2, [r3, #0]
    SPDR = xor_out;
   1134a:	f242 030f 	movw	r3, #8207	; 0x200f
   1134e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11352:	f24c 6283 	movw	r2, #50819	; 0xc683
   11356:	f2c2 0204 	movt	r2, #8196	; 0x2004
   1135a:	7812      	ldrb	r2, [r2, #0]
   1135c:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_valid = FALSE;
   1135e:	f24c 637e 	movw	r3, #50814	; 0xc67e
   11362:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11366:	2200      	movs	r2, #0
   11368:	701a      	strb	r2, [r3, #0]
    // Other bytes will follow SIG_SPI interrupts
    //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
}
   1136a:	370c      	adds	r7, #12
   1136c:	46bd      	mov	sp, r7
   1136e:	f85d 7b04 	ldr.w	r7, [sp], #4
   11372:	4770      	bx	lr

00011374 <link_fbw_on_spi_it>:

void link_fbw_on_spi_it( void ) {
   11374:	b480      	push	{r7}
   11376:	af00      	add	r7, sp, #0
  /* setup OCR1A to pop in 200 clock cycles */
  /* this leaves time for the slave (fbw)   */
  /* to process the byte we've sent and to  */
  /* prepare a new one to be sent           */
  OCR1A = TCNT1 + 200;
   11378:	f242 032a 	movw	r3, #8234	; 0x202a
   1137c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11380:	f242 022c 	movw	r2, #8236	; 0x202c
   11384:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11388:	8812      	ldrh	r2, [r2, #0]
   1138a:	b292      	uxth	r2, r2
   1138c:	32c8      	adds	r2, #200	; 0xc8
   1138e:	b292      	uxth	r2, r2
   11390:	801a      	strh	r2, [r3, #0]
  /* clear interrupt flag  */
  sbi(TIFR, OCF1A);
   11392:	f242 0336 	movw	r3, #8246	; 0x2036
   11396:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1139a:	f242 0236 	movw	r2, #8246	; 0x2036
   1139e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   113a2:	7812      	ldrb	r2, [r2, #0]
   113a4:	b2d2      	uxtb	r2, r2
   113a6:	f042 0210 	orr.w	r2, r2, #16
   113aa:	b2d2      	uxtb	r2, r2
   113ac:	701a      	strb	r2, [r3, #0]
  /* enable OC1A interrupt */
  sbi(TIMSK, OCIE1A);
   113ae:	f242 0337 	movw	r3, #8247	; 0x2037
   113b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113b6:	f242 0237 	movw	r2, #8247	; 0x2037
   113ba:	f2c2 0200 	movt	r2, #8192	; 0x2000
   113be:	7812      	ldrb	r2, [r2, #0]
   113c0:	b2d2      	uxtb	r2, r2
   113c2:	f042 0210 	orr.w	r2, r2, #16
   113c6:	b2d2      	uxtb	r2, r2
   113c8:	701a      	strb	r2, [r3, #0]
}
   113ca:	46bd      	mov	sp, r7
   113cc:	f85d 7b04 	ldr.w	r7, [sp], #4
   113d0:	4770      	bx	lr
   113d2:	bf00      	nop

000113d4 <__vector_12>:


/* send the next byte */
SIGNAL(SIG_OUTPUT_COMPARE1A) {
   113d4:	b480      	push	{r7}
   113d6:	b083      	sub	sp, #12
   113d8:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* disable OC1A interrupt */
  cbi(TIMSK, OCIE1A); 
   113da:	f242 0337 	movw	r3, #8247	; 0x2037
   113de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113e2:	f242 0237 	movw	r2, #8247	; 0x2037
   113e6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   113ea:	7812      	ldrb	r2, [r2, #0]
   113ec:	b2d2      	uxtb	r2, r2
   113ee:	f022 0210 	bic.w	r2, r2, #16
   113f2:	b2d2      	uxtb	r2, r2
   113f4:	701a      	strb	r2, [r3, #0]

  idx_buf++;
   113f6:	f24c 6381 	movw	r3, #50817	; 0xc681
   113fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113fe:	781b      	ldrb	r3, [r3, #0]
   11400:	3301      	adds	r3, #1
   11402:	b2da      	uxtb	r2, r3
   11404:	f24c 6381 	movw	r3, #50817	; 0xc681
   11408:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1140c:	701a      	strb	r2, [r3, #0]

  /* we have sent/received a complete frame */
  if (idx_buf == FRAME_LENGTH) {
   1140e:	f24c 6381 	movw	r3, #50817	; 0xc681
   11412:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11416:	781b      	ldrb	r3, [r3, #0]
   11418:	2b17      	cmp	r3, #23
   1141a:	d162      	bne.n	114e2 <__vector_12+0x10e>
    /* read checksum from receive register  */
    tmp = SPDR;
   1141c:	f242 030f 	movw	r3, #8207	; 0x200f
   11420:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11424:	781b      	ldrb	r3, [r3, #0]
   11426:	71fb      	strb	r3, [r7, #7]
    /* notify valid frame                   */
    if (tmp == xor_in) {
   11428:	f24c 6382 	movw	r3, #50818	; 0xc682
   1142c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11430:	781b      	ldrb	r3, [r3, #0]
   11432:	79fa      	ldrb	r2, [r7, #7]
   11434:	429a      	cmp	r2, r3
   11436:	d110      	bne.n	1145a <__vector_12+0x86>
      link_fbw_receive_valid = TRUE;
   11438:	f24c 637e 	movw	r3, #50814	; 0xc67e
   1143c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11440:	2201      	movs	r2, #1
   11442:	701a      	strb	r2, [r3, #0]
      link_fbw_fbw_nb_err = from_fbw.nb_err;
   11444:	f24c 6350 	movw	r3, #50768	; 0xc650
   11448:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1144c:	7d1a      	ldrb	r2, [r3, #20]
   1144e:	f24c 6380 	movw	r3, #50816	; 0xc680
   11452:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11456:	701a      	strb	r2, [r3, #0]
   11458:	e00c      	b.n	11474 <__vector_12+0xa0>
    }
    else
      link_fbw_nb_err++;
   1145a:	f24c 637f 	movw	r3, #50815	; 0xc67f
   1145e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11462:	781b      	ldrb	r3, [r3, #0]
   11464:	b2db      	uxtb	r3, r3
   11466:	3301      	adds	r3, #1
   11468:	b2da      	uxtb	r2, r3
   1146a:	f24c 637f 	movw	r3, #50815	; 0xc67f
   1146e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11472:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_complete = TRUE;
   11474:	f240 533e 	movw	r3, #1342	; 0x53e
   11478:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1147c:	2201      	movs	r2, #1
   1147e:	701a      	strb	r2, [r3, #0]
    /* unselect slave0                      */
    SPI_UNSELECT_SLAVE0();
   11480:	f24c 6384 	movw	r3, #50820	; 0xc684
   11484:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11488:	2200      	movs	r2, #0
   1148a:	701a      	strb	r2, [r3, #0]
   1148c:	f242 0318 	movw	r3, #8216	; 0x2018
   11490:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11494:	f242 0218 	movw	r2, #8216	; 0x2018
   11498:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1149c:	7812      	ldrb	r2, [r2, #0]
   1149e:	b2d2      	uxtb	r2, r2
   114a0:	f042 0201 	orr.w	r2, r2, #1
   114a4:	b2d2      	uxtb	r2, r2
   114a6:	701a      	strb	r2, [r3, #0]
    SPI_STOP();
   114a8:	f242 030d 	movw	r3, #8205	; 0x200d
   114ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114b0:	f242 020d 	movw	r2, #8205	; 0x200d
   114b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   114b8:	7812      	ldrb	r2, [r2, #0]
   114ba:	b2d2      	uxtb	r2, r2
   114bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   114c0:	b2d2      	uxtb	r2, r2
   114c2:	701a      	strb	r2, [r3, #0]
   114c4:	f242 030d 	movw	r3, #8205	; 0x200d
   114c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114cc:	f242 020d 	movw	r2, #8205	; 0x200d
   114d0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   114d4:	7812      	ldrb	r2, [r2, #0]
   114d6:	b2d2      	uxtb	r2, r2
   114d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   114dc:	b2d2      	uxtb	r2, r2
   114de:	701a      	strb	r2, [r3, #0]
    return;
   114e0:	e051      	b.n	11586 <__vector_12+0x1b2>
  }

  /* we are sending/receiving payload       */
  if (idx_buf < FRAME_LENGTH - 1) {
   114e2:	f24c 6381 	movw	r3, #50817	; 0xc681
   114e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114ea:	781b      	ldrb	r3, [r3, #0]
   114ec:	2b15      	cmp	r3, #21
   114ee:	d820      	bhi.n	11532 <__vector_12+0x15e>
    /* place new payload byte in send register */
    tmp = ((uint8_t*)&to_fbw)[idx_buf];
   114f0:	f24c 6381 	movw	r3, #50817	; 0xc681
   114f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114f8:	781b      	ldrb	r3, [r3, #0]
   114fa:	461a      	mov	r2, r3
   114fc:	f24c 6368 	movw	r3, #50792	; 0xc668
   11500:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11504:	4413      	add	r3, r2
   11506:	781b      	ldrb	r3, [r3, #0]
   11508:	71fb      	strb	r3, [r7, #7]
    SPI_SEND(tmp);
   1150a:	f242 030f 	movw	r3, #8207	; 0x200f
   1150e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11512:	79fa      	ldrb	r2, [r7, #7]
   11514:	701a      	strb	r2, [r3, #0]
    xor_out ^= tmp;
   11516:	f24c 6383 	movw	r3, #50819	; 0xc683
   1151a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1151e:	781a      	ldrb	r2, [r3, #0]
   11520:	79fb      	ldrb	r3, [r7, #7]
   11522:	4053      	eors	r3, r2
   11524:	b2da      	uxtb	r2, r3
   11526:	f24c 6383 	movw	r3, #50819	; 0xc683
   1152a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1152e:	701a      	strb	r2, [r3, #0]
   11530:	e009      	b.n	11546 <__vector_12+0x172>
  } 
  /* we are done sending the payload */
  else { // idx_buf == FRAME_LENGTH - 1
    /* place checksum in send register */
    SPI_SEND(xor_out);
   11532:	f242 030f 	movw	r3, #8207	; 0x200f
   11536:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1153a:	f24c 6283 	movw	r2, #50819	; 0xc683
   1153e:	f2c2 0204 	movt	r2, #8196	; 0x2004
   11542:	7812      	ldrb	r2, [r2, #0]
   11544:	701a      	strb	r2, [r3, #0]
  }
  
  /* read the byte from receive register */
  tmp = SPDR;
   11546:	f242 030f 	movw	r3, #8207	; 0x200f
   1154a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1154e:	781b      	ldrb	r3, [r3, #0]
   11550:	71fb      	strb	r3, [r7, #7]
  ((uint8_t*)&from_fbw)[idx_buf-1] = tmp;
   11552:	f24c 6381 	movw	r3, #50817	; 0xc681
   11556:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1155a:	781b      	ldrb	r3, [r3, #0]
   1155c:	1e5a      	subs	r2, r3, #1
   1155e:	f24c 6350 	movw	r3, #50768	; 0xc650
   11562:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11566:	4413      	add	r3, r2
   11568:	79fa      	ldrb	r2, [r7, #7]
   1156a:	701a      	strb	r2, [r3, #0]
  xor_in ^= tmp;
   1156c:	f24c 6382 	movw	r3, #50818	; 0xc682
   11570:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11574:	781a      	ldrb	r2, [r3, #0]
   11576:	79fb      	ldrb	r3, [r7, #7]
   11578:	4053      	eors	r3, r2
   1157a:	b2da      	uxtb	r2, r3
   1157c:	f24c 6382 	movw	r3, #50818	; 0xc682
   11580:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11584:	701a      	strb	r2, [r3, #0]
}
   11586:	370c      	adds	r7, #12
   11588:	46bd      	mov	sp, r7
   1158a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1158e:	4770      	bx	lr

00011590 <spi_init>:
#include "ad7714.h"

volatile uint8_t spi_cur_slave;
uint8_t spi_nb_ovrn;

void spi_init( void) {
   11590:	b480      	push	{r7}
   11592:	af00      	add	r7, sp, #0
  /* Set MOSI and SCK output, all others input */ 
  SPI_DDR |= _BV(SPI_MOSI_PIN)| _BV(SPI_SCK_PIN); 
   11594:	f242 0317 	movw	r3, #8215	; 0x2017
   11598:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1159c:	f242 0217 	movw	r2, #8215	; 0x2017
   115a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   115a4:	7812      	ldrb	r2, [r2, #0]
   115a6:	b2d2      	uxtb	r2, r2
   115a8:	f042 0206 	orr.w	r2, r2, #6
   115ac:	b2d2      	uxtb	r2, r2
   115ae:	701a      	strb	r2, [r3, #0]

  /* enable pull up for miso */
  //  SPI_PORT |= _BV(SPI_MISO_PIN);

  /* Set SS0 output */
  sbi( SPI_SS0_DDR, SPI_SS0_PIN);
   115b0:	f242 0317 	movw	r3, #8215	; 0x2017
   115b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115b8:	f242 0217 	movw	r2, #8215	; 0x2017
   115bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   115c0:	7812      	ldrb	r2, [r2, #0]
   115c2:	b2d2      	uxtb	r2, r2
   115c4:	f042 0201 	orr.w	r2, r2, #1
   115c8:	b2d2      	uxtb	r2, r2
   115ca:	701a      	strb	r2, [r3, #0]
  /* SS0 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE0();
   115cc:	f24c 6384 	movw	r3, #50820	; 0xc684
   115d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115d4:	2200      	movs	r2, #0
   115d6:	701a      	strb	r2, [r3, #0]
   115d8:	f242 0318 	movw	r3, #8216	; 0x2018
   115dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115e0:	f242 0218 	movw	r2, #8216	; 0x2018
   115e4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   115e8:	7812      	ldrb	r2, [r2, #0]
   115ea:	b2d2      	uxtb	r2, r2
   115ec:	f042 0201 	orr.w	r2, r2, #1
   115f0:	b2d2      	uxtb	r2, r2
   115f2:	701a      	strb	r2, [r3, #0]

  /* Set SS1 output */
  sbi( SPI_SS1_DDR, SPI_SS1_PIN);
   115f4:	f242 0302 	movw	r3, #8194	; 0x2002
   115f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115fc:	f242 0202 	movw	r2, #8194	; 0x2002
   11600:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11604:	7812      	ldrb	r2, [r2, #0]
   11606:	b2d2      	uxtb	r2, r2
   11608:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1160c:	b2d2      	uxtb	r2, r2
   1160e:	701a      	strb	r2, [r3, #0]
  /* SS1 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE1();
   11610:	f24c 6384 	movw	r3, #50820	; 0xc684
   11614:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11618:	2200      	movs	r2, #0
   1161a:	701a      	strb	r2, [r3, #0]
   1161c:	f242 0303 	movw	r3, #8195	; 0x2003
   11620:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11624:	f242 0203 	movw	r2, #8195	; 0x2003
   11628:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1162c:	7812      	ldrb	r2, [r2, #0]
   1162e:	b2d2      	uxtb	r2, r2
   11630:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11634:	b2d2      	uxtb	r2, r2
   11636:	701a      	strb	r2, [r3, #0]
  
  spi_cur_slave = SPI_NONE;
   11638:	f24c 6384 	movw	r3, #50820	; 0xc684
   1163c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11640:	2200      	movs	r2, #0
   11642:	701a      	strb	r2, [r3, #0]
}
   11644:	46bd      	mov	sp, r7
   11646:	f85d 7b04 	ldr.w	r7, [sp], #4
   1164a:	4770      	bx	lr

0001164c <__vector_17>:


SIGNAL(SIG_SPI) {
   1164c:	b580      	push	{r7, lr}
   1164e:	af00      	add	r7, sp, #0
  if (spi_cur_slave == SPI_SLAVE0)
   11650:	f24c 6384 	movw	r3, #50820	; 0xc684
   11654:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11658:	781b      	ldrb	r3, [r3, #0]
   1165a:	b2db      	uxtb	r3, r3
   1165c:	2b01      	cmp	r3, #1
   1165e:	d102      	bne.n	11666 <__vector_17+0x1a>
    link_fbw_on_spi_it();
   11660:	f7ff fe88 	bl	11374 <link_fbw_on_spi_it>
   11664:	e00b      	b.n	1167e <__vector_17+0x32>
  else
    fatal_error_nb++;
   11666:	f24c 5328 	movw	r3, #50472	; 0xc528
   1166a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1166e:	781b      	ldrb	r3, [r3, #0]
   11670:	3301      	adds	r3, #1
   11672:	b2da      	uxtb	r2, r3
   11674:	f24c 5328 	movw	r3, #50472	; 0xc528
   11678:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1167c:	701a      	strb	r2, [r3, #0]
}
   1167e:	bd80      	pop	{r7, pc}

00011680 <adc_buf_channel>:

uint16_t		adc_samples[ NB_ADC ];

static struct adc_buf* buffers[NB_ADC];

void adc_buf_channel(uint8_t adc_channel, struct adc_buf* s) {
   11680:	b480      	push	{r7}
   11682:	b083      	sub	sp, #12
   11684:	af00      	add	r7, sp, #0
   11686:	4603      	mov	r3, r0
   11688:	6039      	str	r1, [r7, #0]
   1168a:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   1168c:	79fa      	ldrb	r2, [r7, #7]
   1168e:	f24c 6398 	movw	r3, #50840	; 0xc698
   11692:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11696:	6839      	ldr	r1, [r7, #0]
   11698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   1169c:	370c      	adds	r7, #12
   1169e:	46bd      	mov	sp, r7
   116a0:	f85d 7b04 	ldr.w	r7, [sp], #4
   116a4:	4770      	bx	lr
   116a6:	bf00      	nop

000116a8 <adc_init>:

void 
adc_init( void )
{
   116a8:	b480      	push	{r7}
   116aa:	b083      	sub	sp, #12
   116ac:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   116ae:	f242 0362 	movw	r3, #8290	; 0x2062
   116b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116b6:	2200      	movs	r2, #0
   116b8:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   116ba:	f242 0361 	movw	r3, #8289	; 0x2061
   116be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116c2:	2200      	movs	r2, #0
   116c4:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref, which is tied to Vcc */
  ADMUX		= ANALOG_VREF;
   116c6:	f242 0307 	movw	r3, #8199	; 0x2007
   116ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116ce:	2240      	movs	r2, #64	; 0x40
   116d0:	701a      	strb	r2, [r3, #0]

  /* Turn off the analog comparator */
  sbi( ACSR, ACD );
   116d2:	f242 0308 	movw	r3, #8200	; 0x2008
   116d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116da:	f242 0208 	movw	r2, #8200	; 0x2008
   116de:	f2c2 0200 	movt	r2, #8192	; 0x2000
   116e2:	7812      	ldrb	r2, [r2, #0]
   116e4:	b2d2      	uxtb	r2, r2
   116e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
   116ea:	b2d2      	uxtb	r2, r2
   116ec:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSR		= 0
   116ee:	f242 0306 	movw	r3, #8198	; 0x2006
   116f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116f6:	22cf      	movs	r2, #207	; 0xcf
   116f8:	701a      	strb	r2, [r3, #0]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   116fa:	2300      	movs	r3, #0
   116fc:	71fb      	strb	r3, [r7, #7]
   116fe:	e00a      	b.n	11716 <adc_init+0x6e>
    buffers[i] = (struct adc_buf*)0;
   11700:	79fa      	ldrb	r2, [r7, #7]
   11702:	f24c 6398 	movw	r3, #50840	; 0xc698
   11706:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1170a:	2100      	movs	r1, #0
   1170c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   11710:	79fb      	ldrb	r3, [r7, #7]
   11712:	3301      	adds	r3, #1
   11714:	71fb      	strb	r3, [r7, #7]
   11716:	79fb      	ldrb	r3, [r7, #7]
   11718:	2b07      	cmp	r3, #7
   1171a:	d9f1      	bls.n	11700 <adc_init+0x58>
    buffers[i] = (struct adc_buf*)0;
}
   1171c:	370c      	adds	r7, #12
   1171e:	46bd      	mov	sp, r7
   11720:	f85d 7b04 	ldr.w	r7, [sp], #4
   11724:	4770      	bx	lr
   11726:	bf00      	nop

00011728 <__vector_21>:
 *  8.913kHz on mega128@16MHz 1kHz/channel ??
*/


SIGNAL( SIG_ADC )
{
   11728:	b480      	push	{r7}
   1172a:	b085      	sub	sp, #20
   1172c:	af00      	add	r7, sp, #0
  uint8_t adc_input	= ADMUX & 0x7;
   1172e:	f242 0307 	movw	r3, #8199	; 0x2007
   11732:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11736:	781b      	ldrb	r3, [r3, #0]
   11738:	b2db      	uxtb	r3, r3
   1173a:	f003 0307 	and.w	r3, r3, #7
   1173e:	73fb      	strb	r3, [r7, #15]
  struct adc_buf* buf = buffers[adc_input];
   11740:	7bfa      	ldrb	r2, [r7, #15]
   11742:	f24c 6398 	movw	r3, #50840	; 0xc698
   11746:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1174a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1174e:	60bb      	str	r3, [r7, #8]
  uint16_t adc_value = ADCW;
   11750:	f242 0304 	movw	r3, #8196	; 0x2004
   11754:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11758:	881b      	ldrh	r3, [r3, #0]
   1175a:	80fb      	strh	r3, [r7, #6]
  /* Store result */
  adc_samples[ adc_input ] = adc_value;
   1175c:	7bfa      	ldrb	r2, [r7, #15]
   1175e:	f24c 6388 	movw	r3, #50824	; 0xc688
   11762:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11766:	88f9      	ldrh	r1, [r7, #6]
   11768:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  if (buf) {
   1176c:	68bb      	ldr	r3, [r7, #8]
   1176e:	2b00      	cmp	r3, #0
   11770:	d025      	beq.n	117be <__vector_21+0x96>
    uint8_t new_head = buf->head + 1;
   11772:	68bb      	ldr	r3, [r7, #8]
   11774:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   11778:	3301      	adds	r3, #1
   1177a:	73bb      	strb	r3, [r7, #14]
    if (new_head >= AV_NB_SAMPLE) new_head = 0;
   1177c:	7bbb      	ldrb	r3, [r7, #14]
   1177e:	2b1f      	cmp	r3, #31
   11780:	d901      	bls.n	11786 <__vector_21+0x5e>
   11782:	2300      	movs	r3, #0
   11784:	73bb      	strb	r3, [r7, #14]
    buf->sum -= buf->values[new_head];
   11786:	68bb      	ldr	r3, [r7, #8]
   11788:	881a      	ldrh	r2, [r3, #0]
   1178a:	7bbb      	ldrb	r3, [r7, #14]
   1178c:	68b9      	ldr	r1, [r7, #8]
   1178e:	005b      	lsls	r3, r3, #1
   11790:	440b      	add	r3, r1
   11792:	885b      	ldrh	r3, [r3, #2]
   11794:	1ad3      	subs	r3, r2, r3
   11796:	b29a      	uxth	r2, r3
   11798:	68bb      	ldr	r3, [r7, #8]
   1179a:	801a      	strh	r2, [r3, #0]
    buf->values[new_head] = adc_value;
   1179c:	7bbb      	ldrb	r3, [r7, #14]
   1179e:	68ba      	ldr	r2, [r7, #8]
   117a0:	005b      	lsls	r3, r3, #1
   117a2:	4413      	add	r3, r2
   117a4:	88fa      	ldrh	r2, [r7, #6]
   117a6:	805a      	strh	r2, [r3, #2]
    buf->sum += adc_value;
   117a8:	68bb      	ldr	r3, [r7, #8]
   117aa:	881a      	ldrh	r2, [r3, #0]
   117ac:	88fb      	ldrh	r3, [r7, #6]
   117ae:	4413      	add	r3, r2
   117b0:	b29a      	uxth	r2, r3
   117b2:	68bb      	ldr	r3, [r7, #8]
   117b4:	801a      	strh	r2, [r3, #0]
    buf->head = new_head;   
   117b6:	68bb      	ldr	r3, [r7, #8]
   117b8:	7bba      	ldrb	r2, [r7, #14]
   117ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Find the next input */
  adc_input++;
   117be:	7bfb      	ldrb	r3, [r7, #15]
   117c0:	3301      	adds	r3, #1
   117c2:	73fb      	strb	r3, [r7, #15]
  if( adc_input >= 8 )
   117c4:	7bfb      	ldrb	r3, [r7, #15]
   117c6:	2b07      	cmp	r3, #7
   117c8:	d901      	bls.n	117ce <__vector_21+0xa6>
    adc_input = 0;
   117ca:	2300      	movs	r3, #0
   117cc:	73fb      	strb	r3, [r7, #15]
  /* Select it */
  ADMUX = adc_input | ANALOG_VREF;
   117ce:	f242 0307 	movw	r3, #8199	; 0x2007
   117d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117d6:	7bfa      	ldrb	r2, [r7, #15]
   117d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   117dc:	b2d2      	uxtb	r2, r2
   117de:	701a      	strb	r2, [r3, #0]
  /* Restart the conversion */
  sbi( ADCSR, ADSC );
   117e0:	f242 0306 	movw	r3, #8198	; 0x2006
   117e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117e8:	f242 0206 	movw	r2, #8198	; 0x2006
   117ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
   117f0:	7812      	ldrb	r2, [r2, #0]
   117f2:	b2d2      	uxtb	r2, r2
   117f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   117f8:	b2d2      	uxtb	r2, r2
   117fa:	701a      	strb	r2, [r3, #0]
  
}
   117fc:	3714      	adds	r7, #20
   117fe:	46bd      	mov	sp, r7
   11800:	f85d 7b04 	ldr.w	r7, [sp], #4
   11804:	4770      	bx	lr
   11806:	bf00      	nop

00011808 <gps_init>:
static uint8_t  ubx_status;
static uint16_t ubx_len;
static uint8_t  ubx_msg_idx;
static uint8_t ck_a, ck_b, ubx_id, ubx_class;

void gps_init( void ) {
   11808:	b580      	push	{r7, lr}
   1180a:	af00      	add	r7, sp, #0
#ifdef SIMUL
  uart0_init();
  simul_ir_roll = ir_roll_neutral;
  simul_ir_pitch = ir_pitch_neutral;
#else
  uart1_init();
   1180c:	f003 fca8 	bl	15160 <uart1_init>
#endif
  ubx_status = UNINIT;
   11810:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11814:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11818:	2200      	movs	r2, #0
   1181a:	701a      	strb	r2, [r3, #0]
}
   1181c:	bd80      	pop	{r7, pc}
   1181e:	bf00      	nop

00011820 <parse_gps_msg>:

void parse_gps_msg( void ) {
   11820:	b580      	push	{r7, lr}
   11822:	af00      	add	r7, sp, #0
    ubx_class = 1;
    ubx_id = (ubx_id + 1)%0x40;
    */
    //end

  if (ubx_class == UBX_NAV_ID) {
   11824:	f24c 73e6 	movw	r3, #51174	; 0xc7e6
   11828:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1182c:	781b      	ldrb	r3, [r3, #0]
   1182e:	2b01      	cmp	r3, #1
   11830:	f040 80f9 	bne.w	11a26 <parse_gps_msg+0x206>
    if (ubx_id == UBX_NAV_POSUTM_ID) {
   11834:	f24c 73e5 	movw	r3, #51173	; 0xc7e5
   11838:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1183c:	781b      	ldrb	r3, [r3, #0]
   1183e:	2b08      	cmp	r3, #8
   11840:	d128      	bne.n	11894 <parse_gps_msg+0x74>
      gps_utm_east = UBX_NAV_POSUTM_EAST(ubx_msg_buf);
   11842:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   11846:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1184a:	685a      	ldr	r2, [r3, #4]
   1184c:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
   11850:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11854:	601a      	str	r2, [r3, #0]
      gps_utm_north = UBX_NAV_POSUTM_NORTH(ubx_msg_buf);
   11856:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   1185a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1185e:	689a      	ldr	r2, [r3, #8]
   11860:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
   11864:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11868:	601a      	str	r2, [r3, #0]
      gps_falt = (float)UBX_NAV_POSUTM_ALT(ubx_msg_buf) / 100.;
   1186a:	4b73      	ldr	r3, [pc, #460]	; (11a38 <parse_gps_msg+0x218>)
   1186c:	681b      	ldr	r3, [r3, #0]
   1186e:	4618      	mov	r0, r3
   11870:	f006 fdca 	bl	18408 <__aeabi_i2f>
   11874:	4603      	mov	r3, r0
   11876:	4618      	mov	r0, r3
   11878:	f04f 0100 	mov.w	r1, #0
   1187c:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   11880:	f006 feca 	bl	18618 <__aeabi_fdiv>
   11884:	4603      	mov	r3, r0
   11886:	461a      	mov	r2, r3
   11888:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   1188c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11890:	601a      	str	r2, [r3, #0]
   11892:	e0c8      	b.n	11a26 <parse_gps_msg+0x206>
        gps_utm_east = gps_utm_east + 0.5;
        gps_utm_north = gps_utm_north + 0.4;
        gps_falt = gps_falt + 0.6;
        */
        // end
    } else if (ubx_id == UBX_NAV_STATUS_ID) {
   11894:	f24c 73e5 	movw	r3, #51173	; 0xc7e5
   11898:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1189c:	781b      	ldrb	r3, [r3, #0]
   1189e:	2b03      	cmp	r3, #3
   118a0:	d10a      	bne.n	118b8 <parse_gps_msg+0x98>
      gps_mode = UBX_NAV_STATUS_GPSfix(ubx_msg_buf);
   118a2:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   118a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118aa:	791a      	ldrb	r2, [r3, #4]
   118ac:	f24c 63dc 	movw	r3, #50908	; 0xc6dc
   118b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118b4:	701a      	strb	r2, [r3, #0]
   118b6:	e0b6      	b.n	11a26 <parse_gps_msg+0x206>
    } else if (ubx_id == UBX_NAV_VELNED_ID) {
   118b8:	f24c 73e5 	movw	r3, #51173	; 0xc7e5
   118bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118c0:	781b      	ldrb	r3, [r3, #0]
   118c2:	2b12      	cmp	r3, #18
   118c4:	f040 80af 	bne.w	11a26 <parse_gps_msg+0x206>
      gps_fspeed = ((float)UBX_NAV_VELNED_GSpeed(ubx_msg_buf)) / 1e2; 
   118c8:	4b5c      	ldr	r3, [pc, #368]	; (11a3c <parse_gps_msg+0x21c>)
   118ca:	681b      	ldr	r3, [r3, #0]
   118cc:	4618      	mov	r0, r3
   118ce:	f006 fd97 	bl	18400 <__aeabi_ui2f>
   118d2:	4603      	mov	r3, r0
   118d4:	4618      	mov	r0, r3
   118d6:	f04f 0100 	mov.w	r1, #0
   118da:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   118de:	f006 fe9b 	bl	18618 <__aeabi_fdiv>
   118e2:	4603      	mov	r3, r0
   118e4:	461a      	mov	r2, r3
   118e6:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   118ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118ee:	601a      	str	r2, [r3, #0]
      gps_fclimb = ((float)UBX_NAV_VELNED_VEL_D(ubx_msg_buf)) / -1e2;
   118f0:	4b51      	ldr	r3, [pc, #324]	; (11a38 <parse_gps_msg+0x218>)
   118f2:	681b      	ldr	r3, [r3, #0]
   118f4:	4618      	mov	r0, r3
   118f6:	f006 fd87 	bl	18408 <__aeabi_i2f>
   118fa:	4603      	mov	r3, r0
   118fc:	4618      	mov	r0, r3
   118fe:	f04f 0100 	mov.w	r1, #0
   11902:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   11906:	f006 fe87 	bl	18618 <__aeabi_fdiv>
   1190a:	4603      	mov	r3, r0
   1190c:	461a      	mov	r2, r3
   1190e:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   11912:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11916:	601a      	str	r2, [r3, #0]
      gps_fcourse = RadianOfDeg(((float)UBX_NAV_VELNED_Heading(ubx_msg_buf)) / 1e5);
   11918:	4b49      	ldr	r3, [pc, #292]	; (11a40 <parse_gps_msg+0x220>)
   1191a:	681b      	ldr	r3, [r3, #0]
   1191c:	4618      	mov	r0, r3
   1191e:	f006 fd73 	bl	18408 <__aeabi_i2f>
   11922:	4603      	mov	r3, r0
   11924:	4618      	mov	r0, r3
   11926:	f006 f92f 	bl	17b88 <__aeabi_f2d>
   1192a:	4602      	mov	r2, r0
   1192c:	460b      	mov	r3, r1
   1192e:	4610      	mov	r0, r2
   11930:	4619      	mov	r1, r3
   11932:	a33d      	add	r3, pc, #244	; (adr r3, 11a28 <parse_gps_msg+0x208>)
   11934:	e9d3 2300 	ldrd	r2, r3, [r3]
   11938:	f006 faa4 	bl	17e84 <__aeabi_ddiv>
   1193c:	4602      	mov	r2, r0
   1193e:	460b      	mov	r3, r1
   11940:	4610      	mov	r0, r2
   11942:	4619      	mov	r1, r3
   11944:	f04f 0200 	mov.w	r2, #0
   11948:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1194c:	f2c4 0366 	movt	r3, #16486	; 0x4066
   11950:	f006 fa98 	bl	17e84 <__aeabi_ddiv>
   11954:	4602      	mov	r2, r0
   11956:	460b      	mov	r3, r1
   11958:	4610      	mov	r0, r2
   1195a:	4619      	mov	r1, r3
   1195c:	a334      	add	r3, pc, #208	; (adr r3, 11a30 <parse_gps_msg+0x210>)
   1195e:	e9d3 2300 	ldrd	r2, r3, [r3]
   11962:	f006 f965 	bl	17c30 <__aeabi_dmul>
   11966:	4602      	mov	r2, r0
   11968:	460b      	mov	r3, r1
   1196a:	4610      	mov	r0, r2
   1196c:	4619      	mov	r1, r3
   1196e:	f006 fc41 	bl	181f4 <__aeabi_d2f>
   11972:	4602      	mov	r2, r0
   11974:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
   11978:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1197c:	601a      	str	r2, [r3, #0]
      gps_ftow = ((float)UBX_NAV_VELNED_ITOW(ubx_msg_buf)) / 1e3;
   1197e:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   11982:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11986:	681b      	ldr	r3, [r3, #0]
   11988:	4618      	mov	r0, r3
   1198a:	f006 fd39 	bl	18400 <__aeabi_ui2f>
   1198e:	4603      	mov	r3, r0
   11990:	4618      	mov	r0, r3
   11992:	f04f 0100 	mov.w	r1, #0
   11996:	f2c4 417a 	movt	r1, #17530	; 0x447a
   1199a:	f006 fe3d 	bl	18618 <__aeabi_fdiv>
   1199e:	4603      	mov	r3, r0
   119a0:	461a      	mov	r2, r3
   119a2:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   119a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119aa:	601a      	str	r2, [r3, #0]
        gps_fcourse = gps_fcourse + 0.2;
        gps_ftow = gps_ftow + 0.1;
        */
        // end
      
      gps_east = gps_utm_east / 100 - NAV_UTM_EAST0;
   119ac:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
   119b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119b4:	681a      	ldr	r2, [r3, #0]
   119b6:	f248 531f 	movw	r3, #34079	; 0x851f
   119ba:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   119be:	fb83 1302 	smull	r1, r3, r3, r2
   119c2:	1159      	asrs	r1, r3, #5
   119c4:	17d3      	asrs	r3, r2, #31
   119c6:	1acb      	subs	r3, r1, r3
   119c8:	f5a3 2313 	sub.w	r3, r3, #602112	; 0x93000
   119cc:	f6a3 535a 	subw	r3, r3, #3418	; 0xd5a
   119d0:	4618      	mov	r0, r3
   119d2:	f006 fd19 	bl	18408 <__aeabi_i2f>
   119d6:	4602      	mov	r2, r0
   119d8:	f24c 63d4 	movw	r3, #50900	; 0xc6d4
   119dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119e0:	601a      	str	r2, [r3, #0]
      gps_north = gps_utm_north / 100 - NAV_UTM_NORTH0;
   119e2:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
   119e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119ea:	681a      	ldr	r2, [r3, #0]
   119ec:	f248 531f 	movw	r3, #34079	; 0x851f
   119f0:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   119f4:	fb83 1302 	smull	r1, r3, r3, r2
   119f8:	1159      	asrs	r1, r3, #5
   119fa:	17d3      	asrs	r3, r2, #31
   119fc:	1aca      	subs	r2, r1, r3
   119fe:	f648 231a 	movw	r3, #35354	; 0x8a1a
   11a02:	f6cf 73a7 	movt	r3, #65447	; 0xffa7
   11a06:	4413      	add	r3, r2
   11a08:	4618      	mov	r0, r3
   11a0a:	f006 fcfd 	bl	18408 <__aeabi_i2f>
   11a0e:	4602      	mov	r2, r0
   11a10:	f24c 63d8 	movw	r3, #50904	; 0xc6d8
   11a14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a18:	601a      	str	r2, [r3, #0]
      
      
      gps_pos_available = TRUE; /* The 3 UBX messages are sent in one rafale */
   11a1a:	f24c 63de 	movw	r3, #50910	; 0xc6de
   11a1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a22:	2201      	movs	r2, #1
   11a24:	701a      	strb	r2, [r3, #0]
      simul_ir_roll = UBX_USR_IRSIM_ROLL(ubx_msg_buf);
      simul_ir_pitch = UBX_USR_IRSIM_PITCH(ubx_msg_buf);
    }
  }
#endif
}
   11a26:	bd80      	pop	{r7, pc}
   11a28:	00000000 	.word	0x00000000
   11a2c:	40f86a00 	.word	0x40f86a00
   11a30:	5a7ed197 	.word	0x5a7ed197
   11a34:	400921fb 	.word	0x400921fb
   11a38:	2004c6ec 	.word	0x2004c6ec
   11a3c:	2004c6f4 	.word	0x2004c6f4
   11a40:	2004c6f8 	.word	0x2004c6f8

00011a44 <parse_ubx>:


uint8_t gps_nb_ovrn;


static void parse_ubx( uint8_t c ) {
   11a44:	b480      	push	{r7}
   11a46:	b083      	sub	sp, #12
   11a48:	af00      	add	r7, sp, #0
   11a4a:	4603      	mov	r3, r0
   11a4c:	71fb      	strb	r3, [r7, #7]
   if (ubx_status < GOT_PAYLOAD) {
   11a4e:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11a52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a56:	781b      	ldrb	r3, [r3, #0]
   11a58:	2b06      	cmp	r3, #6
   11a5a:	d81d      	bhi.n	11a98 <parse_ubx+0x54>
    ck_a += c;
   11a5c:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   11a60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a64:	781a      	ldrb	r2, [r3, #0]
   11a66:	79fb      	ldrb	r3, [r7, #7]
   11a68:	4413      	add	r3, r2
   11a6a:	b2da      	uxtb	r2, r3
   11a6c:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   11a70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a74:	701a      	strb	r2, [r3, #0]
    ck_b += ck_a;
   11a76:	f24c 73e4 	movw	r3, #51172	; 0xc7e4
   11a7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a7e:	781a      	ldrb	r2, [r3, #0]
   11a80:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   11a84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a88:	781b      	ldrb	r3, [r3, #0]
   11a8a:	4413      	add	r3, r2
   11a8c:	b2da      	uxtb	r2, r3
   11a8e:	f24c 73e4 	movw	r3, #51172	; 0xc7e4
   11a92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a96:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
    break;
  }
#else */
  if (ubx_status == UNINIT)
   11a98:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11a9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11aa0:	781b      	ldrb	r3, [r3, #0]
   11aa2:	2b00      	cmp	r3, #0
   11aa4:	d110      	bne.n	11ac8 <parse_ubx+0x84>
  {
    if (c == UBX_SYNC1)
   11aa6:	79fb      	ldrb	r3, [r7, #7]
   11aa8:	2bb5      	cmp	r3, #181	; 0xb5
   11aaa:	f040 8135 	bne.w	11d18 <parse_ubx+0x2d4>
      ubx_status++;
   11aae:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11ab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ab6:	781b      	ldrb	r3, [r3, #0]
   11ab8:	3301      	adds	r3, #1
   11aba:	b2da      	uxtb	r2, r3
   11abc:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11ac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ac4:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   11ac6:	e12f      	b.n	11d28 <parse_ubx+0x2e4>
  if (ubx_status == UNINIT)
  {
    if (c == UBX_SYNC1)
      ubx_status++;
  }
  else if (ubx_status == GOT_SYNC1)
   11ac8:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11acc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ad0:	781b      	ldrb	r3, [r3, #0]
   11ad2:	2b01      	cmp	r3, #1
   11ad4:	d11c      	bne.n	11b10 <parse_ubx+0xcc>
  {
    if (c != UBX_SYNC2)
   11ad6:	79fb      	ldrb	r3, [r7, #7]
   11ad8:	2b62      	cmp	r3, #98	; 0x62
   11ada:	d000      	beq.n	11ade <parse_ubx+0x9a>
      goto error;
   11adc:	e11d      	b.n	11d1a <parse_ubx+0x2d6>
    ck_a = 0;
   11ade:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   11ae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ae6:	2200      	movs	r2, #0
   11ae8:	701a      	strb	r2, [r3, #0]
    ck_b = 0;
   11aea:	f24c 73e4 	movw	r3, #51172	; 0xc7e4
   11aee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11af2:	2200      	movs	r2, #0
   11af4:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11af6:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11afa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11afe:	781b      	ldrb	r3, [r3, #0]
   11b00:	3301      	adds	r3, #1
   11b02:	b2da      	uxtb	r2, r3
   11b04:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b0c:	701a      	strb	r2, [r3, #0]
   11b0e:	e103      	b.n	11d18 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_SYNC2)
   11b10:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b18:	781b      	ldrb	r3, [r3, #0]
   11b1a:	2b02      	cmp	r3, #2
   11b1c:	d127      	bne.n	11b6e <parse_ubx+0x12a>
  {
    if (gps_msg_received) {
   11b1e:	f24c 63dd 	movw	r3, #50909	; 0xc6dd
   11b22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b26:	781b      	ldrb	r3, [r3, #0]
   11b28:	b2db      	uxtb	r3, r3
   11b2a:	2b00      	cmp	r3, #0
   11b2c:	d00c      	beq.n	11b48 <parse_ubx+0x104>
      /* Previous message has not yet been parsed: discard this one */
      gps_nb_ovrn++;
   11b2e:	f24c 73e7 	movw	r3, #51175	; 0xc7e7
   11b32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b36:	781b      	ldrb	r3, [r3, #0]
   11b38:	3301      	adds	r3, #1
   11b3a:	b2da      	uxtb	r2, r3
   11b3c:	f24c 73e7 	movw	r3, #51175	; 0xc7e7
   11b40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b44:	701a      	strb	r2, [r3, #0]
      goto error;
   11b46:	e0e8      	b.n	11d1a <parse_ubx+0x2d6>
    }
    ubx_class = c;
   11b48:	f24c 73e6 	movw	r3, #51174	; 0xc7e6
   11b4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b50:	79fa      	ldrb	r2, [r7, #7]
   11b52:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11b54:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b5c:	781b      	ldrb	r3, [r3, #0]
   11b5e:	3301      	adds	r3, #1
   11b60:	b2da      	uxtb	r2, r3
   11b62:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b6a:	701a      	strb	r2, [r3, #0]
   11b6c:	e0d4      	b.n	11d18 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CLASS)
   11b6e:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b76:	781b      	ldrb	r3, [r3, #0]
   11b78:	2b03      	cmp	r3, #3
   11b7a:	d112      	bne.n	11ba2 <parse_ubx+0x15e>
  {
    ubx_id = c;
   11b7c:	f24c 73e5 	movw	r3, #51173	; 0xc7e5
   11b80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b84:	79fa      	ldrb	r2, [r7, #7]
   11b86:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11b88:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b90:	781b      	ldrb	r3, [r3, #0]
   11b92:	3301      	adds	r3, #1
   11b94:	b2da      	uxtb	r2, r3
   11b96:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b9e:	701a      	strb	r2, [r3, #0]
   11ba0:	e0ba      	b.n	11d18 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_ID)
   11ba2:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11ba6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11baa:	781b      	ldrb	r3, [r3, #0]
   11bac:	2b04      	cmp	r3, #4
   11bae:	d113      	bne.n	11bd8 <parse_ubx+0x194>
  {
    ubx_len = c;
   11bb0:	79fb      	ldrb	r3, [r7, #7]
   11bb2:	b29a      	uxth	r2, r3
   11bb4:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11bb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bbc:	801a      	strh	r2, [r3, #0]
    ubx_status++;
   11bbe:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11bc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bc6:	781b      	ldrb	r3, [r3, #0]
   11bc8:	3301      	adds	r3, #1
   11bca:	b2da      	uxtb	r2, r3
   11bcc:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11bd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bd4:	701a      	strb	r2, [r3, #0]
   11bd6:	e09f      	b.n	11d18 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN1)
   11bd8:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11bdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11be0:	781b      	ldrb	r3, [r3, #0]
   11be2:	2b05      	cmp	r3, #5
   11be4:	d12b      	bne.n	11c3e <parse_ubx+0x1fa>
  {
    ubx_len |= (c<<8);
   11be6:	79fb      	ldrb	r3, [r7, #7]
   11be8:	021b      	lsls	r3, r3, #8
   11bea:	b29a      	uxth	r2, r3
   11bec:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11bf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bf4:	881b      	ldrh	r3, [r3, #0]
   11bf6:	b29b      	uxth	r3, r3
   11bf8:	4313      	orrs	r3, r2
   11bfa:	b29b      	uxth	r3, r3
   11bfc:	b29a      	uxth	r2, r3
   11bfe:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11c02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c06:	801a      	strh	r2, [r3, #0]
    if (ubx_len > UBX_MAX_PAYLOAD)
   11c08:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11c0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c10:	881b      	ldrh	r3, [r3, #0]
   11c12:	2bff      	cmp	r3, #255	; 0xff
   11c14:	d900      	bls.n	11c18 <parse_ubx+0x1d4>
      goto error;
   11c16:	e080      	b.n	11d1a <parse_ubx+0x2d6>
    ubx_msg_idx = 0;
   11c18:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11c1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c20:	2200      	movs	r2, #0
   11c22:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11c24:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11c28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c2c:	781b      	ldrb	r3, [r3, #0]
   11c2e:	3301      	adds	r3, #1
   11c30:	b2da      	uxtb	r2, r3
   11c32:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11c36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c3a:	701a      	strb	r2, [r3, #0]
   11c3c:	e06c      	b.n	11d18 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN2)
   11c3e:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11c42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c46:	781b      	ldrb	r3, [r3, #0]
   11c48:	2b06      	cmp	r3, #6
   11c4a:	d131      	bne.n	11cb0 <parse_ubx+0x26c>
  {
    ubx_msg_buf[ubx_msg_idx] = c;
   11c4c:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11c50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c54:	781b      	ldrb	r3, [r3, #0]
   11c56:	461a      	mov	r2, r3
   11c58:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   11c5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c60:	79f9      	ldrb	r1, [r7, #7]
   11c62:	5499      	strb	r1, [r3, r2]
    ubx_msg_idx++;
   11c64:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11c68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c6c:	781b      	ldrb	r3, [r3, #0]
   11c6e:	3301      	adds	r3, #1
   11c70:	b2da      	uxtb	r2, r3
   11c72:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11c76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c7a:	701a      	strb	r2, [r3, #0]
    if (ubx_msg_idx >= ubx_len) {
   11c7c:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11c80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c84:	781b      	ldrb	r3, [r3, #0]
   11c86:	461a      	mov	r2, r3
   11c88:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11c8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c90:	881b      	ldrh	r3, [r3, #0]
   11c92:	429a      	cmp	r2, r3
   11c94:	d340      	bcc.n	11d18 <parse_ubx+0x2d4>
      ubx_status++;
   11c96:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11c9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c9e:	781b      	ldrb	r3, [r3, #0]
   11ca0:	3301      	adds	r3, #1
   11ca2:	b2da      	uxtb	r2, r3
   11ca4:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11ca8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cac:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   11cae:	e03b      	b.n	11d28 <parse_ubx+0x2e4>
    ubx_msg_idx++;
    if (ubx_msg_idx >= ubx_len) {
      ubx_status++;
    }
  }
  else if (ubx_status == GOT_PAYLOAD)
   11cb0:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11cb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cb8:	781b      	ldrb	r3, [r3, #0]
   11cba:	2b07      	cmp	r3, #7
   11cbc:	d115      	bne.n	11cea <parse_ubx+0x2a6>
  {
    if (c != ck_a)
   11cbe:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   11cc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cc6:	781b      	ldrb	r3, [r3, #0]
   11cc8:	79fa      	ldrb	r2, [r7, #7]
   11cca:	429a      	cmp	r2, r3
   11ccc:	d000      	beq.n	11cd0 <parse_ubx+0x28c>
      goto error;
   11cce:	e024      	b.n	11d1a <parse_ubx+0x2d6>
    ubx_status++;
   11cd0:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11cd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cd8:	781b      	ldrb	r3, [r3, #0]
   11cda:	3301      	adds	r3, #1
   11cdc:	b2da      	uxtb	r2, r3
   11cde:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11ce2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ce6:	701a      	strb	r2, [r3, #0]
   11ce8:	e016      	b.n	11d18 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CHECKSUM1)
   11cea:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11cee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cf2:	781b      	ldrb	r3, [r3, #0]
   11cf4:	2b08      	cmp	r3, #8
   11cf6:	d10f      	bne.n	11d18 <parse_ubx+0x2d4>
  {
    if (c != ck_b)
   11cf8:	f24c 73e4 	movw	r3, #51172	; 0xc7e4
   11cfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d00:	781b      	ldrb	r3, [r3, #0]
   11d02:	79fa      	ldrb	r2, [r7, #7]
   11d04:	429a      	cmp	r2, r3
   11d06:	d000      	beq.n	11d0a <parse_ubx+0x2c6>
      goto error;
   11d08:	e007      	b.n	11d1a <parse_ubx+0x2d6>
    gps_msg_received = TRUE;
   11d0a:	f24c 63dd 	movw	r3, #50909	; 0xc6dd
   11d0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d12:	2201      	movs	r2, #1
   11d14:	701a      	strb	r2, [r3, #0]
    goto restart;
   11d16:	e000      	b.n	11d1a <parse_ubx+0x2d6>
  }
  else {}
//#endif
  return;
   11d18:	e006      	b.n	11d28 <parse_ubx+0x2e4>
 error:  
 restart:
  ubx_status = UNINIT;
   11d1a:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11d1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d22:	2200      	movs	r2, #0
   11d24:	701a      	strb	r2, [r3, #0]
  return;
   11d26:	bf00      	nop
}
   11d28:	370c      	adds	r7, #12
   11d2a:	46bd      	mov	sp, r7
   11d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
   11d30:	4770      	bx	lr
   11d32:	bf00      	nop

00011d34 <__vector_30>:

#ifdef SIMUL
ReceiveUart0(parse_ubx);
#else
ReceiveUart1(parse_ubx);
   11d34:	b580      	push	{r7, lr}
   11d36:	b082      	sub	sp, #8
   11d38:	af00      	add	r7, sp, #0
   11d3a:	f242 039c 	movw	r3, #8348	; 0x209c
   11d3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d42:	781b      	ldrb	r3, [r3, #0]
   11d44:	71fb      	strb	r3, [r7, #7]
   11d46:	79fb      	ldrb	r3, [r7, #7]
   11d48:	4618      	mov	r0, r3
   11d4a:	f7ff fe7b 	bl	11a44 <parse_ubx>
   11d4e:	3708      	adds	r7, #8
   11d50:	46bd      	mov	sp, r7
   11d52:	bd80      	pop	{r7, pc}
   11d54:	f3af 8000 	nop.w

00011d58 <ir_init>:
float ir_rad_of_ir = IR_RAD_OF_IR_CONTRAST / IR_DEFAULT_CONTRAST;

static struct adc_buf buf_ir1;
static struct adc_buf buf_ir2;

void ir_init(void) {
   11d58:	b580      	push	{r7, lr}
   11d5a:	af00      	add	r7, sp, #0
  RadOfIrFromConstrast(IR_DEFAULT_CONTRAST);
   11d5c:	f240 5348 	movw	r3, #1352	; 0x548
   11d60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d64:	f24c 228f 	movw	r2, #49807	; 0xc28f
   11d68:	f6c3 3275 	movt	r2, #15221	; 0x3b75
   11d6c:	601a      	str	r2, [r3, #0]
  adc_buf_channel(ADC_CHANNEL_IR1, &buf_ir1);
   11d6e:	2001      	movs	r0, #1
   11d70:	f24c 71ec 	movw	r1, #51180	; 0xc7ec
   11d74:	f2c2 0104 	movt	r1, #8196	; 0x2004
   11d78:	f7ff fc82 	bl	11680 <adc_buf_channel>
  adc_buf_channel(ADC_CHANNEL_IR2, &buf_ir2);
   11d7c:	2002      	movs	r0, #2
   11d7e:	f64c 0130 	movw	r1, #51248	; 0xc830
   11d82:	f2c2 0104 	movt	r1, #8196	; 0x2004
   11d86:	f7ff fc7b 	bl	11680 <adc_buf_channel>
}
   11d8a:	bd80      	pop	{r7, pc}

00011d8c <ir_update>:
int16_t x1 = 1;
int16_t x2 = 2;
*/
// end

void ir_update(void) {
   11d8c:	b480      	push	{r7}
   11d8e:	b083      	sub	sp, #12
   11d90:	af00      	add	r7, sp, #0
#ifndef SIMUL
  int16_t x1_mean = buf_ir1.sum/AV_NB_SAMPLE;
   11d92:	f24c 73ec 	movw	r3, #51180	; 0xc7ec
   11d96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d9a:	881b      	ldrh	r3, [r3, #0]
   11d9c:	095b      	lsrs	r3, r3, #5
   11d9e:	b29b      	uxth	r3, r3
   11da0:	80fb      	strh	r3, [r7, #6]
  int16_t x2_mean = buf_ir2.sum/AV_NB_SAMPLE;
   11da2:	f64c 0330 	movw	r3, #51248	; 0xc830
   11da6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11daa:	881b      	ldrh	r3, [r3, #0]
   11dac:	095b      	lsrs	r3, r3, #5
   11dae:	b29b      	uxth	r3, r3
   11db0:	80bb      	strh	r3, [r7, #4]
    if( x1 < -900 ) x1 = x2 % x1;
    x2_mean = x2 ++;
    if( x2 > 110 ) x2 = x1 % x2;
    */
    // end
  ir_roll = IR_RollOfIrs(x1_mean, x2_mean) - ir_roll_neutral;
   11db2:	88fb      	ldrh	r3, [r7, #6]
   11db4:	425b      	negs	r3, r3
   11db6:	b29a      	uxth	r2, r3
   11db8:	88bb      	ldrh	r3, [r7, #4]
   11dba:	1ad3      	subs	r3, r2, r3
   11dbc:	b29a      	uxth	r2, r3
   11dbe:	f240 5342 	movw	r3, #1346	; 0x542
   11dc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11dc6:	881b      	ldrh	r3, [r3, #0]
   11dc8:	b29b      	uxth	r3, r3
   11dca:	1ad3      	subs	r3, r2, r3
   11dcc:	b29b      	uxth	r3, r3
   11dce:	b29a      	uxth	r2, r3
   11dd0:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   11dd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11dd8:	801a      	strh	r2, [r3, #0]
  ir_pitch = IR_PitchOfIrs(x1_mean, x2_mean) - ir_pitch_neutral;
   11dda:	88ba      	ldrh	r2, [r7, #4]
   11ddc:	88fb      	ldrh	r3, [r7, #6]
   11dde:	1ad3      	subs	r3, r2, r3
   11de0:	b29a      	uxth	r2, r3
   11de2:	f240 5344 	movw	r3, #1348	; 0x544
   11de6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11dea:	881b      	ldrh	r3, [r3, #0]
   11dec:	b29b      	uxth	r3, r3
   11dee:	1ad3      	subs	r3, r2, r3
   11df0:	b29b      	uxth	r3, r3
   11df2:	b29a      	uxth	r2, r3
   11df4:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
   11df8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11dfc:	801a      	strh	r2, [r3, #0]
#else
  extern volatile int16_t simul_ir_roll, simul_ir_pitch;
  ir_roll = simul_ir_roll -  ir_roll_neutral; 
  ir_pitch = simul_ir_pitch - ir_pitch_neutral;  
#endif
}
   11dfe:	370c      	adds	r7, #12
   11e00:	46bd      	mov	sp, r7
   11e02:	f85d 7b04 	ldr.w	r7, [sp], #4
   11e06:	4770      	bx	lr

00011e08 <ir_gain_calib>:

/* 
   Contrast measurement
*/

void ir_gain_calib(void) {      // Plane nose down
   11e08:	b580      	push	{r7, lr}
   11e0a:	af00      	add	r7, sp, #0
  /* plane nose down -> negativ value */
  ir_contrast = - ir_pitch;
   11e0c:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
   11e10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e14:	881b      	ldrh	r3, [r3, #0]
   11e16:	b29b      	uxth	r3, r3
   11e18:	425b      	negs	r3, r3
   11e1a:	b29b      	uxth	r3, r3
   11e1c:	b29a      	uxth	r2, r3
   11e1e:	f240 5340 	movw	r3, #1344	; 0x540
   11e22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e26:	801a      	strh	r2, [r3, #0]
  RadOfIrFromConstrast(ir_contrast);
   11e28:	f240 5340 	movw	r3, #1344	; 0x540
   11e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e30:	881b      	ldrh	r3, [r3, #0]
   11e32:	b21b      	sxth	r3, r3
   11e34:	4618      	mov	r0, r3
   11e36:	f005 fe95 	bl	17b64 <__aeabi_i2d>
   11e3a:	4602      	mov	r2, r0
   11e3c:	460b      	mov	r3, r1
   11e3e:	f04f 0000 	mov.w	r0, #0
   11e42:	f04f 0100 	mov.w	r1, #0
   11e46:	f6c3 71e8 	movt	r1, #16360	; 0x3fe8
   11e4a:	f006 f81b 	bl	17e84 <__aeabi_ddiv>
   11e4e:	4602      	mov	r2, r0
   11e50:	460b      	mov	r3, r1
   11e52:	4610      	mov	r0, r2
   11e54:	4619      	mov	r1, r3
   11e56:	f006 f9cd 	bl	181f4 <__aeabi_d2f>
   11e5a:	4602      	mov	r2, r0
   11e5c:	f240 5348 	movw	r3, #1352	; 0x548
   11e60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e64:	601a      	str	r2, [r3, #0]
}
   11e66:	bd80      	pop	{r7, pc}

00011e68 <roll_pitch_pid_run>:
float pitch_of_vz_pgain = CLIMB_PITCH_OF_VZ_PGAIN;
float pitch_of_vz = 0.;


/** \brief Computes ::desired_aileron and ::desired_elevator from attitude estimation and expected attitude. */
void roll_pitch_pid_run( void ) {
   11e68:	b590      	push	{r4, r7, lr}
   11e6a:	b083      	sub	sp, #12
   11e6c:	af00      	add	r7, sp, #0
  float err =  estimator_phi - desired_roll;
   11e6e:	f64c 3308 	movw	r3, #51976	; 0xcb08
   11e72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e76:	681a      	ldr	r2, [r3, #0]
   11e78:	f64c 0374 	movw	r3, #51316	; 0xc874
   11e7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e80:	681b      	ldr	r3, [r3, #0]
   11e82:	4610      	mov	r0, r2
   11e84:	4619      	mov	r1, r3
   11e86:	f006 fa09 	bl	1829c <__aeabi_fsub>
   11e8a:	4603      	mov	r3, r0
   11e8c:	607b      	str	r3, [r7, #4]
  desired_aileron = TRIM_PPRZ(roll_pgain * err);
   11e8e:	f240 534c 	movw	r3, #1356	; 0x54c
   11e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e96:	681b      	ldr	r3, [r3, #0]
   11e98:	4618      	mov	r0, r3
   11e9a:	6879      	ldr	r1, [r7, #4]
   11e9c:	f006 fb08 	bl	184b0 <__aeabi_fmul>
   11ea0:	4603      	mov	r3, r0
   11ea2:	4618      	mov	r0, r3
   11ea4:	f04f 0100 	mov.w	r1, #0
   11ea8:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11eac:	f006 fc9e 	bl	187ec <__aeabi_fcmplt>
   11eb0:	4603      	mov	r3, r0
   11eb2:	2b00      	cmp	r3, #0
   11eb4:	d002      	beq.n	11ebc <roll_pitch_pid_run+0x54>
   11eb6:	f64d 2280 	movw	r2, #55936	; 0xda80
   11eba:	e026      	b.n	11f0a <roll_pitch_pid_run+0xa2>
   11ebc:	f240 534c 	movw	r3, #1356	; 0x54c
   11ec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ec4:	681b      	ldr	r3, [r3, #0]
   11ec6:	4618      	mov	r0, r3
   11ec8:	6879      	ldr	r1, [r7, #4]
   11eca:	f006 faf1 	bl	184b0 <__aeabi_fmul>
   11ece:	4603      	mov	r3, r0
   11ed0:	4618      	mov	r0, r3
   11ed2:	f04f 0100 	mov.w	r1, #0
   11ed6:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11eda:	f006 fca5 	bl	18828 <__aeabi_fcmpgt>
   11ede:	4603      	mov	r3, r0
   11ee0:	2b00      	cmp	r3, #0
   11ee2:	d002      	beq.n	11eea <roll_pitch_pid_run+0x82>
   11ee4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11ee8:	e00e      	b.n	11f08 <roll_pitch_pid_run+0xa0>
   11eea:	f240 534c 	movw	r3, #1356	; 0x54c
   11eee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ef2:	681b      	ldr	r3, [r3, #0]
   11ef4:	4618      	mov	r0, r3
   11ef6:	6879      	ldr	r1, [r7, #4]
   11ef8:	f006 fada 	bl	184b0 <__aeabi_fmul>
   11efc:	4603      	mov	r3, r0
   11efe:	4618      	mov	r0, r3
   11f00:	f006 fc9c 	bl	1883c <__aeabi_f2iz>
   11f04:	4603      	mov	r3, r0
   11f06:	b29b      	uxth	r3, r3
   11f08:	b29a      	uxth	r2, r3
   11f0a:	f64c 037e 	movw	r3, #51326	; 0xc87e
   11f0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f12:	801a      	strh	r2, [r3, #0]
  if (pitch_of_roll <0.)
   11f14:	f64c 0384 	movw	r3, #51332	; 0xc884
   11f18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f1c:	681b      	ldr	r3, [r3, #0]
   11f1e:	4618      	mov	r0, r3
   11f20:	f04f 0100 	mov.w	r1, #0
   11f24:	f006 fc62 	bl	187ec <__aeabi_fcmplt>
   11f28:	4603      	mov	r3, r0
   11f2a:	2b00      	cmp	r3, #0
   11f2c:	d006      	beq.n	11f3c <roll_pitch_pid_run+0xd4>
    pitch_of_roll = 0.;
   11f2e:	f64c 0384 	movw	r3, #51332	; 0xc884
   11f32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f36:	f04f 0200 	mov.w	r2, #0
   11f3a:	601a      	str	r2, [r3, #0]
  err = -(estimator_theta - desired_pitch - pitch_of_roll * fabs(estimator_phi));
   11f3c:	f64c 3310 	movw	r3, #51984	; 0xcb10
   11f40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f44:	681a      	ldr	r2, [r3, #0]
   11f46:	f64c 0378 	movw	r3, #51320	; 0xc878
   11f4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f4e:	681b      	ldr	r3, [r3, #0]
   11f50:	4610      	mov	r0, r2
   11f52:	4619      	mov	r1, r3
   11f54:	f006 f9a2 	bl	1829c <__aeabi_fsub>
   11f58:	4603      	mov	r3, r0
   11f5a:	461c      	mov	r4, r3
   11f5c:	f64c 3308 	movw	r3, #51976	; 0xcb08
   11f60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f64:	681b      	ldr	r3, [r3, #0]
   11f66:	4618      	mov	r0, r3
   11f68:	f04f 0100 	mov.w	r1, #0
   11f6c:	f006 fc3e 	bl	187ec <__aeabi_fcmplt>
   11f70:	4603      	mov	r3, r0
   11f72:	2b00      	cmp	r3, #0
   11f74:	d007      	beq.n	11f86 <roll_pitch_pid_run+0x11e>
   11f76:	f64c 3308 	movw	r3, #51976	; 0xcb08
   11f7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f7e:	681b      	ldr	r3, [r3, #0]
   11f80:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11f84:	e004      	b.n	11f90 <roll_pitch_pid_run+0x128>
   11f86:	f64c 3308 	movw	r3, #51976	; 0xcb08
   11f8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f8e:	681a      	ldr	r2, [r3, #0]
   11f90:	f64c 0384 	movw	r3, #51332	; 0xc884
   11f94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f98:	681b      	ldr	r3, [r3, #0]
   11f9a:	4610      	mov	r0, r2
   11f9c:	4619      	mov	r1, r3
   11f9e:	f006 fa87 	bl	184b0 <__aeabi_fmul>
   11fa2:	4603      	mov	r3, r0
   11fa4:	4620      	mov	r0, r4
   11fa6:	4619      	mov	r1, r3
   11fa8:	f006 f978 	bl	1829c <__aeabi_fsub>
   11fac:	4603      	mov	r3, r0
   11fae:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   11fb2:	607b      	str	r3, [r7, #4]
  desired_elevator = TRIM_PPRZ(pitch_pgain * err);
   11fb4:	f240 5350 	movw	r3, #1360	; 0x550
   11fb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fbc:	681b      	ldr	r3, [r3, #0]
   11fbe:	4618      	mov	r0, r3
   11fc0:	6879      	ldr	r1, [r7, #4]
   11fc2:	f006 fa75 	bl	184b0 <__aeabi_fmul>
   11fc6:	4603      	mov	r3, r0
   11fc8:	4618      	mov	r0, r3
   11fca:	f04f 0100 	mov.w	r1, #0
   11fce:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11fd2:	f006 fc0b 	bl	187ec <__aeabi_fcmplt>
   11fd6:	4603      	mov	r3, r0
   11fd8:	2b00      	cmp	r3, #0
   11fda:	d002      	beq.n	11fe2 <roll_pitch_pid_run+0x17a>
   11fdc:	f64d 2280 	movw	r2, #55936	; 0xda80
   11fe0:	e026      	b.n	12030 <roll_pitch_pid_run+0x1c8>
   11fe2:	f240 5350 	movw	r3, #1360	; 0x550
   11fe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fea:	681b      	ldr	r3, [r3, #0]
   11fec:	4618      	mov	r0, r3
   11fee:	6879      	ldr	r1, [r7, #4]
   11ff0:	f006 fa5e 	bl	184b0 <__aeabi_fmul>
   11ff4:	4603      	mov	r3, r0
   11ff6:	4618      	mov	r0, r3
   11ff8:	f04f 0100 	mov.w	r1, #0
   11ffc:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12000:	f006 fc12 	bl	18828 <__aeabi_fcmpgt>
   12004:	4603      	mov	r3, r0
   12006:	2b00      	cmp	r3, #0
   12008:	d002      	beq.n	12010 <roll_pitch_pid_run+0x1a8>
   1200a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   1200e:	e00e      	b.n	1202e <roll_pitch_pid_run+0x1c6>
   12010:	f240 5350 	movw	r3, #1360	; 0x550
   12014:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12018:	681b      	ldr	r3, [r3, #0]
   1201a:	4618      	mov	r0, r3
   1201c:	6879      	ldr	r1, [r7, #4]
   1201e:	f006 fa47 	bl	184b0 <__aeabi_fmul>
   12022:	4603      	mov	r3, r0
   12024:	4618      	mov	r0, r3
   12026:	f006 fc09 	bl	1883c <__aeabi_f2iz>
   1202a:	4603      	mov	r3, r0
   1202c:	b29b      	uxth	r3, r3
   1202e:	b29a      	uxth	r2, r3
   12030:	f64c 0380 	movw	r3, #51328	; 0xc880
   12034:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12038:	801a      	strh	r2, [r3, #0]
}
   1203a:	370c      	adds	r7, #12
   1203c:	46bd      	mov	sp, r7
   1203e:	bd90      	pop	{r4, r7, pc}

00012040 <course_pid_run>:

float course_pgain = COURSE_PGAIN;
float desired_course = 0.;
float max_roll = MAX_ROLL;

void course_pid_run( void ) {
   12040:	b580      	push	{r7, lr}
   12042:	b082      	sub	sp, #8
   12044:	af00      	add	r7, sp, #0
  float err = estimator_hspeed_dir - desired_course;
   12046:	f64c 3338 	movw	r3, #52024	; 0xcb38
   1204a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1204e:	681a      	ldr	r2, [r3, #0]
   12050:	f64c 038c 	movw	r3, #51340	; 0xc88c
   12054:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12058:	681b      	ldr	r3, [r3, #0]
   1205a:	4610      	mov	r0, r2
   1205c:	4619      	mov	r1, r3
   1205e:	f006 f91d 	bl	1829c <__aeabi_fsub>
   12062:	4603      	mov	r3, r0
   12064:	607b      	str	r3, [r7, #4]
  NORM_RAD_ANGLE(err);
   12066:	e013      	b.n	12090 <course_pid_run+0x50>
   12068:	6878      	ldr	r0, [r7, #4]
   1206a:	f005 fd8d 	bl	17b88 <__aeabi_f2d>
   1206e:	4602      	mov	r2, r0
   12070:	460b      	mov	r3, r1
   12072:	4610      	mov	r0, r2
   12074:	4619      	mov	r1, r3
   12076:	a348      	add	r3, pc, #288	; (adr r3, 12198 <course_pid_run+0x158>)
   12078:	e9d3 2300 	ldrd	r2, r3, [r3]
   1207c:	f005 fc24 	bl	178c8 <__aeabi_dsub>
   12080:	4602      	mov	r2, r0
   12082:	460b      	mov	r3, r1
   12084:	4610      	mov	r0, r2
   12086:	4619      	mov	r1, r3
   12088:	f006 f8b4 	bl	181f4 <__aeabi_d2f>
   1208c:	4603      	mov	r3, r0
   1208e:	607b      	str	r3, [r7, #4]
   12090:	6878      	ldr	r0, [r7, #4]
   12092:	f005 fd79 	bl	17b88 <__aeabi_f2d>
   12096:	4602      	mov	r2, r0
   12098:	460b      	mov	r3, r1
   1209a:	4610      	mov	r0, r2
   1209c:	4619      	mov	r1, r3
   1209e:	a340      	add	r3, pc, #256	; (adr r3, 121a0 <course_pid_run+0x160>)
   120a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   120a4:	f006 f854 	bl	18150 <__aeabi_dcmpgt>
   120a8:	4603      	mov	r3, r0
   120aa:	2b00      	cmp	r3, #0
   120ac:	d1dc      	bne.n	12068 <course_pid_run+0x28>
   120ae:	e013      	b.n	120d8 <course_pid_run+0x98>
   120b0:	6878      	ldr	r0, [r7, #4]
   120b2:	f005 fd69 	bl	17b88 <__aeabi_f2d>
   120b6:	4602      	mov	r2, r0
   120b8:	460b      	mov	r3, r1
   120ba:	4610      	mov	r0, r2
   120bc:	4619      	mov	r1, r3
   120be:	a336      	add	r3, pc, #216	; (adr r3, 12198 <course_pid_run+0x158>)
   120c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   120c4:	f005 fc02 	bl	178cc <__adddf3>
   120c8:	4602      	mov	r2, r0
   120ca:	460b      	mov	r3, r1
   120cc:	4610      	mov	r0, r2
   120ce:	4619      	mov	r1, r3
   120d0:	f006 f890 	bl	181f4 <__aeabi_d2f>
   120d4:	4603      	mov	r3, r0
   120d6:	607b      	str	r3, [r7, #4]
   120d8:	6878      	ldr	r0, [r7, #4]
   120da:	f005 fd55 	bl	17b88 <__aeabi_f2d>
   120de:	4602      	mov	r2, r0
   120e0:	460b      	mov	r3, r1
   120e2:	4610      	mov	r0, r2
   120e4:	4619      	mov	r1, r3
   120e6:	a330      	add	r3, pc, #192	; (adr r3, 121a8 <course_pid_run+0x168>)
   120e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   120ec:	f006 f812 	bl	18114 <__aeabi_dcmplt>
   120f0:	4603      	mov	r3, r0
   120f2:	2b00      	cmp	r3, #0
   120f4:	d1dc      	bne.n	120b0 <course_pid_run+0x70>
  nav_desired_roll = course_pgain * err; //  * fspeed / AIR_SPEED;
   120f6:	f240 5358 	movw	r3, #1368	; 0x558
   120fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120fe:	681b      	ldr	r3, [r3, #0]
   12100:	4618      	mov	r0, r3
   12102:	6879      	ldr	r1, [r7, #4]
   12104:	f006 f9d4 	bl	184b0 <__aeabi_fmul>
   12108:	4603      	mov	r3, r0
   1210a:	461a      	mov	r2, r3
   1210c:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12110:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12114:	601a      	str	r2, [r3, #0]
  if (nav_desired_roll > max_roll)
   12116:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   1211a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1211e:	681a      	ldr	r2, [r3, #0]
   12120:	f240 535c 	movw	r3, #1372	; 0x55c
   12124:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12128:	681b      	ldr	r3, [r3, #0]
   1212a:	4610      	mov	r0, r2
   1212c:	4619      	mov	r1, r3
   1212e:	f006 fb7b 	bl	18828 <__aeabi_fcmpgt>
   12132:	4603      	mov	r3, r0
   12134:	2b00      	cmp	r3, #0
   12136:	d00a      	beq.n	1214e <course_pid_run+0x10e>
    nav_desired_roll = max_roll;
   12138:	f240 535c 	movw	r3, #1372	; 0x55c
   1213c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12140:	681a      	ldr	r2, [r3, #0]
   12142:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12146:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1214a:	601a      	str	r2, [r3, #0]
   1214c:	e01e      	b.n	1218c <course_pid_run+0x14c>
  else if (nav_desired_roll < -max_roll)
   1214e:	f240 535c 	movw	r3, #1372	; 0x55c
   12152:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12156:	681b      	ldr	r3, [r3, #0]
   12158:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   1215c:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12160:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12164:	681b      	ldr	r3, [r3, #0]
   12166:	4610      	mov	r0, r2
   12168:	4619      	mov	r1, r3
   1216a:	f006 fb5d 	bl	18828 <__aeabi_fcmpgt>
   1216e:	4603      	mov	r3, r0
   12170:	2b00      	cmp	r3, #0
   12172:	d00b      	beq.n	1218c <course_pid_run+0x14c>
    nav_desired_roll = -max_roll;
   12174:	f240 535c 	movw	r3, #1372	; 0x55c
   12178:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1217c:	681b      	ldr	r3, [r3, #0]
   1217e:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   12182:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12186:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1218a:	601a      	str	r2, [r3, #0]
}
   1218c:	3708      	adds	r7, #8
   1218e:	46bd      	mov	sp, r7
   12190:	bd80      	pop	{r7, pc}
   12192:	bf00      	nop
   12194:	f3af 8000 	nop.w
   12198:	54442d18 	.word	0x54442d18
   1219c:	401921fb 	.word	0x401921fb
   121a0:	54442d18 	.word	0x54442d18
   121a4:	400921fb 	.word	0x400921fb
   121a8:	54442d18 	.word	0x54442d18
   121ac:	c00921fb 	.word	0xc00921fb

000121b0 <climb_pid_run>:

#define MAX_CLIMB_SUM_ERR 100
#define MAX_PITCH_CLIMB_SUM_ERR 100

/** \brief Computes desired_gaz and desired_pitch from desired_climb */
void climb_pid_run ( void ) {
   121b0:	b5b0      	push	{r4, r5, r7, lr}
   121b2:	b082      	sub	sp, #8
   121b4:	af00      	add	r7, sp, #0
  float err  = estimator_z_dot - desired_climb;
   121b6:	f64c 331c 	movw	r3, #51996	; 0xcb1c
   121ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121be:	681a      	ldr	r2, [r3, #0]
   121c0:	f64c 0390 	movw	r3, #51344	; 0xc890
   121c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121c8:	681b      	ldr	r3, [r3, #0]
   121ca:	4610      	mov	r0, r2
   121cc:	4619      	mov	r1, r3
   121ce:	f006 f865 	bl	1829c <__aeabi_fsub>
   121d2:	4603      	mov	r3, r0
   121d4:	607b      	str	r3, [r7, #4]
  float fgaz;
  if (auto_pitch) { /* gaz constant */
   121d6:	f24c 532f 	movw	r3, #50479	; 0xc52f
   121da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121de:	781b      	ldrb	r3, [r3, #0]
   121e0:	2b00      	cmp	r3, #0
   121e2:	f000 80a8 	beq.w	12336 <climb_pid_run+0x186>
    desired_gaz = nav_desired_gaz;
   121e6:	f64c 03c8 	movw	r3, #51400	; 0xc8c8
   121ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121ee:	881b      	ldrh	r3, [r3, #0]
   121f0:	b29a      	uxth	r2, r3
   121f2:	f64c 037c 	movw	r3, #51324	; 0xc87c
   121f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121fa:	801a      	strh	r2, [r3, #0]
    desired_pitch = climb_pitch_pgain * (err + climb_pitch_igain * climb_pitch_sum_err);
   121fc:	f240 5364 	movw	r3, #1380	; 0x564
   12200:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12204:	681a      	ldr	r2, [r3, #0]
   12206:	f64c 039c 	movw	r3, #51356	; 0xc89c
   1220a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1220e:	681b      	ldr	r3, [r3, #0]
   12210:	4610      	mov	r0, r2
   12212:	4619      	mov	r1, r3
   12214:	f006 f94c 	bl	184b0 <__aeabi_fmul>
   12218:	4603      	mov	r3, r0
   1221a:	4618      	mov	r0, r3
   1221c:	6879      	ldr	r1, [r7, #4]
   1221e:	f006 f83f 	bl	182a0 <__addsf3>
   12222:	4603      	mov	r3, r0
   12224:	461a      	mov	r2, r3
   12226:	f240 5360 	movw	r3, #1376	; 0x560
   1222a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1222e:	681b      	ldr	r3, [r3, #0]
   12230:	4610      	mov	r0, r2
   12232:	4619      	mov	r1, r3
   12234:	f006 f93c 	bl	184b0 <__aeabi_fmul>
   12238:	4603      	mov	r3, r0
   1223a:	461a      	mov	r2, r3
   1223c:	f64c 0378 	movw	r3, #51320	; 0xc878
   12240:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12244:	601a      	str	r2, [r3, #0]
    if (desired_pitch > max_pitch)
   12246:	f64c 0378 	movw	r3, #51320	; 0xc878
   1224a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1224e:	681a      	ldr	r2, [r3, #0]
   12250:	f240 5368 	movw	r3, #1384	; 0x568
   12254:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12258:	681b      	ldr	r3, [r3, #0]
   1225a:	4610      	mov	r0, r2
   1225c:	4619      	mov	r1, r3
   1225e:	f006 fae3 	bl	18828 <__aeabi_fcmpgt>
   12262:	4603      	mov	r3, r0
   12264:	2b00      	cmp	r3, #0
   12266:	d009      	beq.n	1227c <climb_pid_run+0xcc>
      desired_pitch = max_pitch;
   12268:	f240 5368 	movw	r3, #1384	; 0x568
   1226c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12270:	681a      	ldr	r2, [r3, #0]
   12272:	f64c 0378 	movw	r3, #51320	; 0xc878
   12276:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1227a:	601a      	str	r2, [r3, #0]
    if (desired_pitch < min_pitch)
   1227c:	f64c 0378 	movw	r3, #51320	; 0xc878
   12280:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12284:	681a      	ldr	r2, [r3, #0]
   12286:	f240 536c 	movw	r3, #1388	; 0x56c
   1228a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1228e:	681b      	ldr	r3, [r3, #0]
   12290:	4610      	mov	r0, r2
   12292:	4619      	mov	r1, r3
   12294:	f006 faaa 	bl	187ec <__aeabi_fcmplt>
   12298:	4603      	mov	r3, r0
   1229a:	2b00      	cmp	r3, #0
   1229c:	d009      	beq.n	122b2 <climb_pid_run+0x102>
      desired_pitch = min_pitch;
   1229e:	f240 536c 	movw	r3, #1388	; 0x56c
   122a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122a6:	681a      	ldr	r2, [r3, #0]
   122a8:	f64c 0378 	movw	r3, #51320	; 0xc878
   122ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122b0:	601a      	str	r2, [r3, #0]
    climb_pitch_sum_err += err;
   122b2:	f64c 039c 	movw	r3, #51356	; 0xc89c
   122b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122ba:	681b      	ldr	r3, [r3, #0]
   122bc:	4618      	mov	r0, r3
   122be:	6879      	ldr	r1, [r7, #4]
   122c0:	f005 ffee 	bl	182a0 <__addsf3>
   122c4:	4603      	mov	r3, r0
   122c6:	461a      	mov	r2, r3
   122c8:	f64c 039c 	movw	r3, #51356	; 0xc89c
   122cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122d0:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err > MAX_PITCH_CLIMB_SUM_ERR)
   122d2:	f64c 039c 	movw	r3, #51356	; 0xc89c
   122d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122da:	681b      	ldr	r3, [r3, #0]
   122dc:	4618      	mov	r0, r3
   122de:	f04f 0100 	mov.w	r1, #0
   122e2:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   122e6:	f006 fa9f 	bl	18828 <__aeabi_fcmpgt>
   122ea:	4603      	mov	r3, r0
   122ec:	2b00      	cmp	r3, #0
   122ee:	d008      	beq.n	12302 <climb_pid_run+0x152>
      climb_pitch_sum_err = MAX_PITCH_CLIMB_SUM_ERR;
   122f0:	f64c 039c 	movw	r3, #51356	; 0xc89c
   122f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122f8:	f04f 0200 	mov.w	r2, #0
   122fc:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   12300:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err < - MAX_PITCH_CLIMB_SUM_ERR)
   12302:	f64c 039c 	movw	r3, #51356	; 0xc89c
   12306:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1230a:	681b      	ldr	r3, [r3, #0]
   1230c:	4618      	mov	r0, r3
   1230e:	f04f 0100 	mov.w	r1, #0
   12312:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   12316:	f006 fa69 	bl	187ec <__aeabi_fcmplt>
   1231a:	4603      	mov	r3, r0
   1231c:	2b00      	cmp	r3, #0
   1231e:	d100      	bne.n	12322 <climb_pid_run+0x172>
   12320:	e109      	b.n	12536 <climb_pid_run+0x386>
      climb_pitch_sum_err = - MAX_PITCH_CLIMB_SUM_ERR; 
   12322:	f64c 039c 	movw	r3, #51356	; 0xc89c
   12326:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1232a:	f04f 0200 	mov.w	r2, #0
   1232e:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   12332:	601a      	str	r2, [r3, #0]
   12334:	e0ff      	b.n	12536 <climb_pid_run+0x386>
  } else { /* pitch almost constant */
    /* pitch offset for climb */
    pitch_of_vz = (desired_climb > 0) ? desired_climb * pitch_of_vz_pgain : 0.;
   12336:	f64c 0390 	movw	r3, #51344	; 0xc890
   1233a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1233e:	681b      	ldr	r3, [r3, #0]
   12340:	4618      	mov	r0, r3
   12342:	f04f 0100 	mov.w	r1, #0
   12346:	f006 fa6f 	bl	18828 <__aeabi_fcmpgt>
   1234a:	4603      	mov	r3, r0
   1234c:	2b00      	cmp	r3, #0
   1234e:	d010      	beq.n	12372 <climb_pid_run+0x1c2>
   12350:	f64c 0390 	movw	r3, #51344	; 0xc890
   12354:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12358:	681a      	ldr	r2, [r3, #0]
   1235a:	f240 5354 	movw	r3, #1364	; 0x554
   1235e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12362:	681b      	ldr	r3, [r3, #0]
   12364:	4610      	mov	r0, r2
   12366:	4619      	mov	r1, r3
   12368:	f006 f8a2 	bl	184b0 <__aeabi_fmul>
   1236c:	4603      	mov	r3, r0
   1236e:	461a      	mov	r2, r3
   12370:	e001      	b.n	12376 <climb_pid_run+0x1c6>
   12372:	f04f 0200 	mov.w	r2, #0
   12376:	f64c 0388 	movw	r3, #51336	; 0xc888
   1237a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1237e:	601a      	str	r2, [r3, #0]
    fgaz = climb_pgain * (err + climb_igain * climb_sum_err) + CLIMB_LEVEL_GAZ + CLIMB_GAZ_OF_CLIMB*desired_climb;
   12380:	f64c 42cd 	movw	r2, #52429	; 0xcccd
   12384:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
   12388:	f64c 0398 	movw	r3, #51352	; 0xc898
   1238c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12390:	681b      	ldr	r3, [r3, #0]
   12392:	4610      	mov	r0, r2
   12394:	4619      	mov	r1, r3
   12396:	f006 f88b 	bl	184b0 <__aeabi_fmul>
   1239a:	4603      	mov	r3, r0
   1239c:	4618      	mov	r0, r3
   1239e:	6879      	ldr	r1, [r7, #4]
   123a0:	f005 ff7e 	bl	182a0 <__addsf3>
   123a4:	4603      	mov	r3, r0
   123a6:	461a      	mov	r2, r3
   123a8:	f24c 238f 	movw	r3, #49807	; 0xc28f
   123ac:	f6cb 43f5 	movt	r3, #48373	; 0xbcf5
   123b0:	4610      	mov	r0, r2
   123b2:	4619      	mov	r1, r3
   123b4:	f006 f87c 	bl	184b0 <__aeabi_fmul>
   123b8:	4603      	mov	r3, r0
   123ba:	4618      	mov	r0, r3
   123bc:	f005 fbe4 	bl	17b88 <__aeabi_f2d>
   123c0:	4602      	mov	r2, r0
   123c2:	460b      	mov	r3, r1
   123c4:	4610      	mov	r0, r2
   123c6:	4619      	mov	r1, r3
   123c8:	a35d      	add	r3, pc, #372	; (adr r3, 12540 <climb_pid_run+0x390>)
   123ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   123ce:	f005 fa7d 	bl	178cc <__adddf3>
   123d2:	4602      	mov	r2, r0
   123d4:	460b      	mov	r3, r1
   123d6:	4614      	mov	r4, r2
   123d8:	461d      	mov	r5, r3
   123da:	f64c 0390 	movw	r3, #51344	; 0xc890
   123de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123e2:	681b      	ldr	r3, [r3, #0]
   123e4:	4618      	mov	r0, r3
   123e6:	f005 fbcf 	bl	17b88 <__aeabi_f2d>
   123ea:	4602      	mov	r2, r0
   123ec:	460b      	mov	r3, r1
   123ee:	4610      	mov	r0, r2
   123f0:	4619      	mov	r1, r3
   123f2:	a355      	add	r3, pc, #340	; (adr r3, 12548 <climb_pid_run+0x398>)
   123f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   123f8:	f005 fc1a 	bl	17c30 <__aeabi_dmul>
   123fc:	4602      	mov	r2, r0
   123fe:	460b      	mov	r3, r1
   12400:	4620      	mov	r0, r4
   12402:	4629      	mov	r1, r5
   12404:	f005 fa62 	bl	178cc <__adddf3>
   12408:	4602      	mov	r2, r0
   1240a:	460b      	mov	r3, r1
   1240c:	4610      	mov	r0, r2
   1240e:	4619      	mov	r1, r3
   12410:	f005 fef0 	bl	181f4 <__aeabi_d2f>
   12414:	4603      	mov	r3, r0
   12416:	603b      	str	r3, [r7, #0]
    climb_sum_err += err;
   12418:	f64c 0398 	movw	r3, #51352	; 0xc898
   1241c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12420:	681b      	ldr	r3, [r3, #0]
   12422:	4618      	mov	r0, r3
   12424:	6879      	ldr	r1, [r7, #4]
   12426:	f005 ff3b 	bl	182a0 <__addsf3>
   1242a:	4603      	mov	r3, r0
   1242c:	461a      	mov	r2, r3
   1242e:	f64c 0398 	movw	r3, #51352	; 0xc898
   12432:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12436:	601a      	str	r2, [r3, #0]
    if (climb_sum_err > MAX_CLIMB_SUM_ERR) climb_sum_err = MAX_CLIMB_SUM_ERR;
   12438:	f64c 0398 	movw	r3, #51352	; 0xc898
   1243c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12440:	681b      	ldr	r3, [r3, #0]
   12442:	4618      	mov	r0, r3
   12444:	f04f 0100 	mov.w	r1, #0
   12448:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   1244c:	f006 f9ec 	bl	18828 <__aeabi_fcmpgt>
   12450:	4603      	mov	r3, r0
   12452:	2b00      	cmp	r3, #0
   12454:	d008      	beq.n	12468 <climb_pid_run+0x2b8>
   12456:	f64c 0398 	movw	r3, #51352	; 0xc898
   1245a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1245e:	f04f 0200 	mov.w	r2, #0
   12462:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   12466:	601a      	str	r2, [r3, #0]
    if (climb_sum_err < - MAX_CLIMB_SUM_ERR) climb_sum_err = - MAX_CLIMB_SUM_ERR;
   12468:	f64c 0398 	movw	r3, #51352	; 0xc898
   1246c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12470:	681b      	ldr	r3, [r3, #0]
   12472:	4618      	mov	r0, r3
   12474:	f04f 0100 	mov.w	r1, #0
   12478:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   1247c:	f006 f9b6 	bl	187ec <__aeabi_fcmplt>
   12480:	4603      	mov	r3, r0
   12482:	2b00      	cmp	r3, #0
   12484:	d008      	beq.n	12498 <climb_pid_run+0x2e8>
   12486:	f64c 0398 	movw	r3, #51352	; 0xc898
   1248a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1248e:	f04f 0200 	mov.w	r2, #0
   12492:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   12496:	601a      	str	r2, [r3, #0]
    desired_gaz = TRIM_UPPRZ(fgaz * MAX_PPRZ);
   12498:	6838      	ldr	r0, [r7, #0]
   1249a:	f04f 0100 	mov.w	r1, #0
   1249e:	f2c4 6116 	movt	r1, #17942	; 0x4616
   124a2:	f006 f805 	bl	184b0 <__aeabi_fmul>
   124a6:	4603      	mov	r3, r0
   124a8:	4618      	mov	r0, r3
   124aa:	f04f 0100 	mov.w	r1, #0
   124ae:	f006 f99d 	bl	187ec <__aeabi_fcmplt>
   124b2:	4603      	mov	r3, r0
   124b4:	2b00      	cmp	r3, #0
   124b6:	d001      	beq.n	124bc <climb_pid_run+0x30c>
   124b8:	2200      	movs	r2, #0
   124ba:	e022      	b.n	12502 <climb_pid_run+0x352>
   124bc:	6838      	ldr	r0, [r7, #0]
   124be:	f04f 0100 	mov.w	r1, #0
   124c2:	f2c4 6116 	movt	r1, #17942	; 0x4616
   124c6:	f005 fff3 	bl	184b0 <__aeabi_fmul>
   124ca:	4603      	mov	r3, r0
   124cc:	4618      	mov	r0, r3
   124ce:	f04f 0100 	mov.w	r1, #0
   124d2:	f2c4 6116 	movt	r1, #17942	; 0x4616
   124d6:	f006 f9a7 	bl	18828 <__aeabi_fcmpgt>
   124da:	4603      	mov	r3, r0
   124dc:	2b00      	cmp	r3, #0
   124de:	d002      	beq.n	124e6 <climb_pid_run+0x336>
   124e0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   124e4:	e00c      	b.n	12500 <climb_pid_run+0x350>
   124e6:	6838      	ldr	r0, [r7, #0]
   124e8:	f04f 0100 	mov.w	r1, #0
   124ec:	f2c4 6116 	movt	r1, #17942	; 0x4616
   124f0:	f005 ffde 	bl	184b0 <__aeabi_fmul>
   124f4:	4603      	mov	r3, r0
   124f6:	4618      	mov	r0, r3
   124f8:	f006 f9a0 	bl	1883c <__aeabi_f2iz>
   124fc:	4603      	mov	r3, r0
   124fe:	b29b      	uxth	r3, r3
   12500:	b29a      	uxth	r2, r3
   12502:	f64c 037c 	movw	r3, #51324	; 0xc87c
   12506:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1250a:	801a      	strh	r2, [r3, #0]
    desired_pitch = nav_pitch + pitch_of_vz;
   1250c:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12510:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12514:	681a      	ldr	r2, [r3, #0]
   12516:	f64c 0388 	movw	r3, #51336	; 0xc888
   1251a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1251e:	681b      	ldr	r3, [r3, #0]
   12520:	4610      	mov	r0, r2
   12522:	4619      	mov	r1, r3
   12524:	f005 febc 	bl	182a0 <__addsf3>
   12528:	4603      	mov	r3, r0
   1252a:	461a      	mov	r2, r3
   1252c:	f64c 0378 	movw	r3, #51320	; 0xc878
   12530:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12534:	601a      	str	r2, [r3, #0]
  }
}
   12536:	3708      	adds	r7, #8
   12538:	46bd      	mov	sp, r7
   1253a:	bdb0      	pop	{r4, r5, r7, pc}
   1253c:	f3af 8000 	nop.w
   12540:	3d70a3d7 	.word	0x3d70a3d7
   12544:	3fd3d70a 	.word	0x3fd3d70a
   12548:	9999999a 	.word	0x9999999a
   1254c:	3fc99999 	.word	0x3fc99999

00012550 <altitude_pid_run>:

float altitude_pgain = ALTITUDE_PGAIN;


void altitude_pid_run(void) {
   12550:	b580      	push	{r7, lr}
   12552:	b082      	sub	sp, #8
   12554:	af00      	add	r7, sp, #0
  float err = estimator_z - desired_altitude;
   12556:	f64c 3304 	movw	r3, #51972	; 0xcb04
   1255a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1255e:	681a      	ldr	r2, [r3, #0]
   12560:	f240 5374 	movw	r3, #1396	; 0x574
   12564:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12568:	681b      	ldr	r3, [r3, #0]
   1256a:	4610      	mov	r0, r2
   1256c:	4619      	mov	r1, r3
   1256e:	f005 fe95 	bl	1829c <__aeabi_fsub>
   12572:	4603      	mov	r3, r0
   12574:	607b      	str	r3, [r7, #4]
  desired_climb = pre_climb + altitude_pgain * err;
   12576:	f240 5370 	movw	r3, #1392	; 0x570
   1257a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1257e:	681b      	ldr	r3, [r3, #0]
   12580:	4618      	mov	r0, r3
   12582:	6879      	ldr	r1, [r7, #4]
   12584:	f005 ff94 	bl	184b0 <__aeabi_fmul>
   12588:	4603      	mov	r3, r0
   1258a:	461a      	mov	r2, r3
   1258c:	f64c 0394 	movw	r3, #51348	; 0xc894
   12590:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12594:	681b      	ldr	r3, [r3, #0]
   12596:	4610      	mov	r0, r2
   12598:	4619      	mov	r1, r3
   1259a:	f005 fe81 	bl	182a0 <__addsf3>
   1259e:	4603      	mov	r3, r0
   125a0:	461a      	mov	r2, r3
   125a2:	f64c 0390 	movw	r3, #51344	; 0xc890
   125a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125aa:	601a      	str	r2, [r3, #0]
  if (desired_climb < -CLIMB_MAX) desired_climb = -CLIMB_MAX;
   125ac:	f64c 0390 	movw	r3, #51344	; 0xc890
   125b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125b4:	681b      	ldr	r3, [r3, #0]
   125b6:	4618      	mov	r0, r3
   125b8:	f04f 0100 	mov.w	r1, #0
   125bc:	f6cb 7180 	movt	r1, #49024	; 0xbf80
   125c0:	f006 f914 	bl	187ec <__aeabi_fcmplt>
   125c4:	4603      	mov	r3, r0
   125c6:	2b00      	cmp	r3, #0
   125c8:	d008      	beq.n	125dc <altitude_pid_run+0x8c>
   125ca:	f64c 0390 	movw	r3, #51344	; 0xc890
   125ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125d2:	f04f 0200 	mov.w	r2, #0
   125d6:	f6cb 7280 	movt	r2, #49024	; 0xbf80
   125da:	601a      	str	r2, [r3, #0]
  if (desired_climb > CLIMB_MAX) desired_climb = CLIMB_MAX;
   125dc:	f64c 0390 	movw	r3, #51344	; 0xc890
   125e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125e4:	681b      	ldr	r3, [r3, #0]
   125e6:	4618      	mov	r0, r3
   125e8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   125ec:	f006 f91c 	bl	18828 <__aeabi_fcmpgt>
   125f0:	4603      	mov	r3, r0
   125f2:	2b00      	cmp	r3, #0
   125f4:	d006      	beq.n	12604 <altitude_pid_run+0xb4>
   125f6:	f64c 0390 	movw	r3, #51344	; 0xc890
   125fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125fe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   12602:	601a      	str	r2, [r3, #0]
}
   12604:	3708      	adds	r7, #8
   12606:	46bd      	mov	sp, r7
   12608:	bd80      	pop	{r7, pc}
   1260a:	bf00      	nop
   1260c:	f3af 8000 	nop.w

00012610 <auto_nav>:
#define GROUND_ALT 125.
#define SECURITY_ALT 150.
#define MAX_DIST_FROM_HOME 500.
#ifdef NAV_C

static inline void auto_nav(void) {
   12610:	b5f0      	push	{r4, r5, r6, r7, lr}
   12612:	b08b      	sub	sp, #44	; 0x2c
   12614:	af00      	add	r7, sp, #0
        NextBlock()
    }

}
#else*/
if(nav_block == 0)
   12616:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   1261a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1261e:	781b      	ldrb	r3, [r3, #0]
   12620:	2b00      	cmp	r3, #0
   12622:	f040 8169 	bne.w	128f8 <auto_nav+0x2e8>
{ // init
    
    if (nav_stage == 0) 
   12626:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1262a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1262e:	781b      	ldrb	r3, [r3, #0]
   12630:	2b00      	cmp	r3, #0
   12632:	d13c      	bne.n	126ae <auto_nav+0x9e>
    {
	Label(while_1)
	nav_stage=0;
   12634:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12638:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1263c:	2200      	movs	r2, #0
   1263e:	701a      	strb	r2, [r3, #0]
	if (! (!(estimator_flight_time))) Goto(endwhile_2) 
   12640:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   12644:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12648:	881b      	ldrh	r3, [r3, #0]
   1264a:	2b00      	cmp	r3, #0
   1264c:	d000      	beq.n	12650 <auto_nav+0x40>
   1264e:	e03d      	b.n	126cc <auto_nav+0xbc>
	else NextStage(); 
   12650:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12654:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12658:	781b      	ldrb	r3, [r3, #0]
   1265a:	3301      	adds	r3, #1
   1265c:	b2da      	uxtb	r2, r3
   1265e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12662:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12666:	701a      	strb	r2, [r3, #0]
   12668:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1266c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12670:	681a      	ldr	r2, [r3, #0]
   12672:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12676:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1267a:	601a      	str	r2, [r3, #0]
   1267c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12680:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12684:	681a      	ldr	r2, [r3, #0]
   12686:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   1268a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1268e:	601a      	str	r2, [r3, #0]
   12690:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12694:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12698:	2200      	movs	r2, #0
   1269a:	801a      	strh	r2, [r3, #0]
   1269c:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   126a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126a4:	f04f 0200 	mov.w	r2, #0
   126a8:	601a      	str	r2, [r3, #0]
   126aa:	f002 b883 	b.w	147b4 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   126ae:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   126b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126b6:	781b      	ldrb	r3, [r3, #0]
   126b8:	2b01      	cmp	r3, #1
   126ba:	d100      	bne.n	126be <auto_nav+0xae>
    {   Goto(while_1)}
   126bc:	e7ba      	b.n	12634 <auto_nav+0x24>
    else if (nav_stage == 2)
   126be:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   126c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126c6:	781b      	ldrb	r3, [r3, #0]
   126c8:	2b02      	cmp	r3, #2
   126ca:	d162      	bne.n	12792 <auto_nav+0x182>
    {
	Label(endwhile_2)
	nav_stage = 2;
   126cc:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   126d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126d4:	2202      	movs	r2, #2
   126d6:	701a      	strb	r2, [r3, #0]
        if ((estimator_flight_time>8)) NextStage() else {
   126d8:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   126dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126e0:	881b      	ldrh	r3, [r3, #0]
   126e2:	2b08      	cmp	r3, #8
   126e4:	d92e      	bls.n	12744 <auto_nav+0x134>
   126e6:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   126ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126ee:	781b      	ldrb	r3, [r3, #0]
   126f0:	3301      	adds	r3, #1
   126f2:	b2da      	uxtb	r2, r3
   126f4:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   126f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126fc:	701a      	strb	r2, [r3, #0]
   126fe:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12702:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12706:	681a      	ldr	r2, [r3, #0]
   12708:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   1270c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12710:	601a      	str	r2, [r3, #0]
   12712:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12716:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1271a:	681a      	ldr	r2, [r3, #0]
   1271c:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12720:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12724:	601a      	str	r2, [r3, #0]
   12726:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   1272a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1272e:	2200      	movs	r2, #0
   12730:	801a      	strh	r2, [r3, #0]
   12732:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12736:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1273a:	f04f 0200 	mov.w	r2, #0
   1273e:	601a      	str	r2, [r3, #0]
   12740:	f002 b838 	b.w	147b4 <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   12744:	f64c 038c 	movw	r3, #51340	; 0xc88c
   12748:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1274c:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   12750:	f2c4 0296 	movt	r2, #16534	; 0x4096
   12754:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   12756:	f24c 532f 	movw	r3, #50479	; 0xc52f
   1275a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1275e:	2200      	movs	r2, #0
   12760:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.150000;
   12762:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12766:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1276a:	f649 129a 	movw	r2, #39322	; 0x999a
   1276e:	f6c3 6219 	movt	r2, #15897	; 0x3e19
   12772:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_GAZ;
   12774:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12778:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1277c:	2201      	movs	r2, #1
   1277e:	701a      	strb	r2, [r3, #0]
          nav_desired_gaz = TRIM_UPPRZ(0.800000*MAX_PPRZ);
   12780:	f64c 03c8 	movw	r3, #51400	; 0xc8c8
   12784:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12788:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
   1278c:	801a      	strh	r2, [r3, #0]
        }
        return;
   1278e:	f002 b811 	b.w	147b4 <auto_nav+0x21a4>
     }
     else if (nav_stage == 3)
   12792:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12796:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1279a:	781b      	ldrb	r3, [r3, #0]
   1279c:	2b03      	cmp	r3, #3
   1279e:	d168      	bne.n	12872 <auto_nav+0x262>
     {
	nav_stage = 3;	
   127a0:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   127a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127a8:	2203      	movs	r2, #3
   127aa:	701a      	strb	r2, [r3, #0]
        if ((estimator_z>SECURITY_ALT)) NextStage() else {
   127ac:	f64c 3304 	movw	r3, #51972	; 0xcb04
   127b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127b4:	681b      	ldr	r3, [r3, #0]
   127b6:	4618      	mov	r0, r3
   127b8:	f04f 0100 	mov.w	r1, #0
   127bc:	f2c4 3116 	movt	r1, #17174	; 0x4316
   127c0:	f006 f832 	bl	18828 <__aeabi_fcmpgt>
   127c4:	4603      	mov	r3, r0
   127c6:	2b00      	cmp	r3, #0
   127c8:	d02e      	beq.n	12828 <auto_nav+0x218>
   127ca:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   127ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127d2:	781b      	ldrb	r3, [r3, #0]
   127d4:	3301      	adds	r3, #1
   127d6:	b2da      	uxtb	r2, r3
   127d8:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   127dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127e0:	701a      	strb	r2, [r3, #0]
   127e2:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   127e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127ea:	681a      	ldr	r2, [r3, #0]
   127ec:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   127f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127f4:	601a      	str	r2, [r3, #0]
   127f6:	f64c 3300 	movw	r3, #51968	; 0xcb00
   127fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127fe:	681a      	ldr	r2, [r3, #0]
   12800:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12804:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12808:	601a      	str	r2, [r3, #0]
   1280a:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   1280e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12812:	2200      	movs	r2, #0
   12814:	801a      	strh	r2, [r3, #0]
   12816:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   1281a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1281e:	f04f 0200 	mov.w	r2, #0
   12822:	601a      	str	r2, [r3, #0]
   12824:	f001 bfc6 	b.w	147b4 <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   12828:	f64c 038c 	movw	r3, #51340	; 0xc88c
   1282c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12830:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   12834:	f2c4 0296 	movt	r2, #16534	; 0x4096
   12838:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   1283a:	f24c 532f 	movw	r3, #50479	; 0xc52f
   1283e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12842:	2200      	movs	r2, #0
   12844:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   12846:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1284a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1284e:	f04f 0200 	mov.w	r2, #0
   12852:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_CLIMB;
   12854:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12858:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1285c:	2202      	movs	r2, #2
   1285e:	701a      	strb	r2, [r3, #0]
          desired_climb = 8.000000;
   12860:	f64c 0390 	movw	r3, #51344	; 0xc890
   12864:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12868:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   1286c:	601a      	str	r2, [r3, #0]
        }
        return;
   1286e:	f001 bfa1 	b.w	147b4 <auto_nav+0x21a4>
     }
     else if (nav_stage == 4)
   12872:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12876:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1287a:	781b      	ldrb	r3, [r3, #0]
   1287c:	2b04      	cmp	r3, #4
   1287e:	f041 8799 	bne.w	147b4 <auto_nav+0x21a4>
        NextBlock()
   12882:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12886:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1288a:	781b      	ldrb	r3, [r3, #0]
   1288c:	3301      	adds	r3, #1
   1288e:	b2da      	uxtb	r2, r3
   12890:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12894:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12898:	701a      	strb	r2, [r3, #0]
   1289a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1289e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128a2:	2200      	movs	r2, #0
   128a4:	701a      	strb	r2, [r3, #0]
   128a6:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   128aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128ae:	2200      	movs	r2, #0
   128b0:	801a      	strh	r2, [r3, #0]
   128b2:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   128b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128ba:	681a      	ldr	r2, [r3, #0]
   128bc:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   128c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128c4:	601a      	str	r2, [r3, #0]
   128c6:	f64c 3300 	movw	r3, #51968	; 0xcb00
   128ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128ce:	681a      	ldr	r2, [r3, #0]
   128d0:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   128d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128d8:	601a      	str	r2, [r3, #0]
   128da:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   128de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128e2:	2200      	movs	r2, #0
   128e4:	801a      	strh	r2, [r3, #0]
   128e6:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   128ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128ee:	f04f 0200 	mov.w	r2, #0
   128f2:	601a      	str	r2, [r3, #0]
   128f4:	f001 bf5e 	b.w	147b4 <auto_nav+0x21a4>
     else { }
}
else if (nav_block == 1) // two
   128f8:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   128fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12900:	781b      	ldrb	r3, [r3, #0]
   12902:	2b01      	cmp	r3, #1
   12904:	f040 81bc 	bne.w	12c80 <auto_nav+0x670>
{
    nav_block = 1;
   12908:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   1290c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12910:	2201      	movs	r2, #1
   12912:	701a      	strb	r2, [r3, #0]
    if RcEvent1() 
   12914:	f24c 5330 	movw	r3, #50480	; 0xc530
   12918:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1291c:	781b      	ldrb	r3, [r3, #0]
   1291e:	2b00      	cmp	r3, #0
   12920:	d007      	beq.n	12932 <auto_nav+0x322>
   12922:	f24c 5330 	movw	r3, #50480	; 0xc530
   12926:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1292a:	2200      	movs	r2, #0
   1292c:	701a      	strb	r2, [r3, #0]
   1292e:	2301      	movs	r3, #1
   12930:	e000      	b.n	12934 <auto_nav+0x324>
   12932:	2300      	movs	r3, #0
   12934:	2b00      	cmp	r3, #0
   12936:	d034      	beq.n	129a2 <auto_nav+0x392>
	{ GotoBlock(2) }
   12938:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   1293c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12940:	2202      	movs	r2, #2
   12942:	701a      	strb	r2, [r3, #0]
   12944:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12948:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1294c:	2200      	movs	r2, #0
   1294e:	701a      	strb	r2, [r3, #0]
   12950:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   12954:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12958:	2200      	movs	r2, #0
   1295a:	801a      	strh	r2, [r3, #0]
   1295c:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12960:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12964:	681a      	ldr	r2, [r3, #0]
   12966:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   1296a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1296e:	601a      	str	r2, [r3, #0]
   12970:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12974:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12978:	681a      	ldr	r2, [r3, #0]
   1297a:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   1297e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12982:	601a      	str	r2, [r3, #0]
   12984:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12988:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1298c:	2200      	movs	r2, #0
   1298e:	801a      	strh	r2, [r3, #0]
   12990:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12994:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12998:	f04f 0200 	mov.w	r2, #0
   1299c:	601a      	str	r2, [r3, #0]
   1299e:	f001 bf09 	b.w	147b4 <auto_nav+0x21a4>
    if(nav_stage == 0)
   129a2:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   129a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129aa:	781b      	ldrb	r3, [r3, #0]
   129ac:	2b00      	cmp	r3, #0
   129ae:	d12e      	bne.n	12a0e <auto_nav+0x3fe>
    {
       Label(while_3)
       if (! (TRUE)) Goto(endwhile_4) else NextStage();
   129b0:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   129b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129b8:	781b      	ldrb	r3, [r3, #0]
   129ba:	3301      	adds	r3, #1
   129bc:	b2da      	uxtb	r2, r3
   129be:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   129c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129c6:	701a      	strb	r2, [r3, #0]
   129c8:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   129cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129d0:	681a      	ldr	r2, [r3, #0]
   129d2:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   129d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129da:	601a      	str	r2, [r3, #0]
   129dc:	f64c 3300 	movw	r3, #51968	; 0xcb00
   129e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129e4:	681a      	ldr	r2, [r3, #0]
   129e6:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   129ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129ee:	601a      	str	r2, [r3, #0]
   129f0:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   129f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129f8:	2200      	movs	r2, #0
   129fa:	801a      	strh	r2, [r3, #0]
   129fc:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12a00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a04:	f04f 0200 	mov.w	r2, #0
   12a08:	601a      	str	r2, [r3, #0]
   12a0a:	f001 bed3 	b.w	147b4 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   12a0e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12a12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a16:	781b      	ldrb	r3, [r3, #0]
   12a18:	2b01      	cmp	r3, #1
   12a1a:	d169      	bne.n	12af0 <auto_nav+0x4e0>
    {
	  nav_stage = 1;
   12a1c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12a20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a24:	2201      	movs	r2, #1
   12a26:	701a      	strb	r2, [r3, #0]
          if (approaching(1)) NextStageFrom(1) else {
   12a28:	2001      	movs	r0, #1
   12a2a:	f001 fed1 	bl	147d0 <approaching>
   12a2e:	4603      	mov	r3, r0
   12a30:	2b00      	cmp	r3, #0
   12a32:	d034      	beq.n	12a9e <auto_nav+0x48e>
   12a34:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12a38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a3c:	2201      	movs	r2, #1
   12a3e:	701a      	strb	r2, [r3, #0]
   12a40:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12a44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a48:	781b      	ldrb	r3, [r3, #0]
   12a4a:	3301      	adds	r3, #1
   12a4c:	b2da      	uxtb	r2, r3
   12a4e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12a52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a56:	701a      	strb	r2, [r3, #0]
   12a58:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12a5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a60:	681a      	ldr	r2, [r3, #0]
   12a62:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12a66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a6a:	601a      	str	r2, [r3, #0]
   12a6c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12a70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a74:	681a      	ldr	r2, [r3, #0]
   12a76:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12a7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a7e:	601a      	str	r2, [r3, #0]
   12a80:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12a84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a88:	2200      	movs	r2, #0
   12a8a:	801a      	strh	r2, [r3, #0]
   12a8c:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12a90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a94:	f04f 0200 	mov.w	r2, #0
   12a98:	601a      	str	r2, [r3, #0]
   12a9a:	f001 be8b 	b.w	147b4 <auto_nav+0x21a4>
            fly_to(1);
   12a9e:	2001      	movs	r0, #1
   12aa0:	f001 ffca 	bl	14a38 <fly_to>
            auto_pitch = FALSE;
   12aa4:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12aa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12aac:	2200      	movs	r2, #0
   12aae:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12ab0:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12ab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ab8:	f04f 0200 	mov.w	r2, #0
   12abc:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12abe:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12ac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ac6:	2203      	movs	r2, #3
   12ac8:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12aca:	f240 5378 	movw	r3, #1400	; 0x578
   12ace:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ad2:	695a      	ldr	r2, [r3, #20]
   12ad4:	f240 5374 	movw	r3, #1396	; 0x574
   12ad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12adc:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12ade:	f64c 0394 	movw	r3, #51348	; 0xc894
   12ae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ae6:	f04f 0200 	mov.w	r2, #0
   12aea:	601a      	str	r2, [r3, #0]
          }
          return;
   12aec:	f001 be62 	b.w	147b4 <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12af0:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12af4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12af8:	781b      	ldrb	r3, [r3, #0]
   12afa:	2b02      	cmp	r3, #2
   12afc:	d169      	bne.n	12bd2 <auto_nav+0x5c2>
     {
	  nav_stage = 2;
   12afe:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12b02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b06:	2202      	movs	r2, #2
   12b08:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   12b0a:	2004      	movs	r0, #4
   12b0c:	f001 fe60 	bl	147d0 <approaching>
   12b10:	4603      	mov	r3, r0
   12b12:	2b00      	cmp	r3, #0
   12b14:	d034      	beq.n	12b80 <auto_nav+0x570>
   12b16:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12b1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b1e:	2204      	movs	r2, #4
   12b20:	701a      	strb	r2, [r3, #0]
   12b22:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12b26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b2a:	781b      	ldrb	r3, [r3, #0]
   12b2c:	3301      	adds	r3, #1
   12b2e:	b2da      	uxtb	r2, r3
   12b30:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12b34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b38:	701a      	strb	r2, [r3, #0]
   12b3a:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12b3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b42:	681a      	ldr	r2, [r3, #0]
   12b44:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12b48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b4c:	601a      	str	r2, [r3, #0]
   12b4e:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12b52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b56:	681a      	ldr	r2, [r3, #0]
   12b58:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12b5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b60:	601a      	str	r2, [r3, #0]
   12b62:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12b66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b6a:	2200      	movs	r2, #0
   12b6c:	801a      	strh	r2, [r3, #0]
   12b6e:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12b72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b76:	f04f 0200 	mov.w	r2, #0
   12b7a:	601a      	str	r2, [r3, #0]
   12b7c:	f001 be1a 	b.w	147b4 <auto_nav+0x21a4>
            fly_to(4);
   12b80:	2004      	movs	r0, #4
   12b82:	f001 ff59 	bl	14a38 <fly_to>
            auto_pitch = FALSE;
   12b86:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12b8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b8e:	2200      	movs	r2, #0
   12b90:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12b92:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12b96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b9a:	f04f 0200 	mov.w	r2, #0
   12b9e:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12ba0:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12ba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ba8:	2203      	movs	r2, #3
   12baa:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   12bac:	f240 5378 	movw	r3, #1400	; 0x578
   12bb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   12bb6:	f240 5374 	movw	r3, #1396	; 0x574
   12bba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bbe:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12bc0:	f64c 0394 	movw	r3, #51348	; 0xc894
   12bc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bc8:	f04f 0200 	mov.w	r2, #0
   12bcc:	601a      	str	r2, [r3, #0]
          }
          return;
   12bce:	f001 bdf1 	b.w	147b4 <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12bd2:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12bd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bda:	781b      	ldrb	r3, [r3, #0]
   12bdc:	2b03      	cmp	r3, #3
   12bde:	d106      	bne.n	12bee <auto_nav+0x5de>
      {
	  nav_stage = 3;
   12be0:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12be4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12be8:	2203      	movs	r2, #3
   12bea:	701a      	strb	r2, [r3, #0]
          Goto(while_3)
   12bec:	e6e0      	b.n	129b0 <auto_nav+0x3a0>
      }
      else if (nav_stage == 4)
   12bee:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12bf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bf6:	781b      	ldrb	r3, [r3, #0]
   12bf8:	2b04      	cmp	r3, #4
   12bfa:	f041 85db 	bne.w	147b4 <auto_nav+0x21a4>
      {
        Label(endwhile_4)
	nav_stage = 4;
   12bfe:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12c02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c06:	2204      	movs	r2, #4
   12c08:	701a      	strb	r2, [r3, #0]
        NextBlock()
   12c0a:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12c0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c12:	781b      	ldrb	r3, [r3, #0]
   12c14:	3301      	adds	r3, #1
   12c16:	b2da      	uxtb	r2, r3
   12c18:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12c1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c20:	701a      	strb	r2, [r3, #0]
   12c22:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12c26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c2a:	2200      	movs	r2, #0
   12c2c:	701a      	strb	r2, [r3, #0]
   12c2e:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   12c32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c36:	2200      	movs	r2, #0
   12c38:	801a      	strh	r2, [r3, #0]
   12c3a:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12c3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c42:	681a      	ldr	r2, [r3, #0]
   12c44:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12c48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c4c:	601a      	str	r2, [r3, #0]
   12c4e:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12c52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c56:	681a      	ldr	r2, [r3, #0]
   12c58:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12c5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c60:	601a      	str	r2, [r3, #0]
   12c62:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12c66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c6a:	2200      	movs	r2, #0
   12c6c:	801a      	strh	r2, [r3, #0]
   12c6e:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12c72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c76:	f04f 0200 	mov.w	r2, #0
   12c7a:	601a      	str	r2, [r3, #0]
   12c7c:	f001 bd9a 	b.w	147b4 <auto_nav+0x21a4>
      }
      else { }
}
else if (nav_block == 2) // height
   12c80:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12c84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c88:	781b      	ldrb	r3, [r3, #0]
   12c8a:	2b02      	cmp	r3, #2
   12c8c:	f040 8392 	bne.w	133b4 <auto_nav+0xda4>
{
	nav_block = 2;
   12c90:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12c94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c98:	2202      	movs	r2, #2
   12c9a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(3) }
   12c9c:	f24c 5330 	movw	r3, #50480	; 0xc530
   12ca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ca4:	781b      	ldrb	r3, [r3, #0]
   12ca6:	2b00      	cmp	r3, #0
   12ca8:	d007      	beq.n	12cba <auto_nav+0x6aa>
   12caa:	f24c 5330 	movw	r3, #50480	; 0xc530
   12cae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cb2:	2200      	movs	r2, #0
   12cb4:	701a      	strb	r2, [r3, #0]
   12cb6:	2301      	movs	r3, #1
   12cb8:	e000      	b.n	12cbc <auto_nav+0x6ac>
   12cba:	2300      	movs	r3, #0
   12cbc:	2b00      	cmp	r3, #0
   12cbe:	d034      	beq.n	12d2a <auto_nav+0x71a>
   12cc0:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12cc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cc8:	2203      	movs	r2, #3
   12cca:	701a      	strb	r2, [r3, #0]
   12ccc:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12cd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cd4:	2200      	movs	r2, #0
   12cd6:	701a      	strb	r2, [r3, #0]
   12cd8:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   12cdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ce0:	2200      	movs	r2, #0
   12ce2:	801a      	strh	r2, [r3, #0]
   12ce4:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12ce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cec:	681a      	ldr	r2, [r3, #0]
   12cee:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12cf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cf6:	601a      	str	r2, [r3, #0]
   12cf8:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12cfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d00:	681a      	ldr	r2, [r3, #0]
   12d02:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12d06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d0a:	601a      	str	r2, [r3, #0]
   12d0c:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12d10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d14:	2200      	movs	r2, #0
   12d16:	801a      	strh	r2, [r3, #0]
   12d18:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12d1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d20:	f04f 0200 	mov.w	r2, #0
   12d24:	601a      	str	r2, [r3, #0]
   12d26:	f001 bd45 	b.w	147b4 <auto_nav+0x21a4>
    
    if(nav_stage == 0)
   12d2a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12d2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d32:	781b      	ldrb	r3, [r3, #0]
   12d34:	2b00      	cmp	r3, #0
   12d36:	d134      	bne.n	12da2 <auto_nav+0x792>
    {
       Label(while_5)
       nav_stage = 0;
   12d38:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12d3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d40:	2200      	movs	r2, #0
   12d42:	701a      	strb	r2, [r3, #0]
       if (! (TRUE)) Goto(endwhile_6) else NextStage();
   12d44:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12d48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d4c:	781b      	ldrb	r3, [r3, #0]
   12d4e:	3301      	adds	r3, #1
   12d50:	b2da      	uxtb	r2, r3
   12d52:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12d56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d5a:	701a      	strb	r2, [r3, #0]
   12d5c:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12d60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d64:	681a      	ldr	r2, [r3, #0]
   12d66:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12d6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d6e:	601a      	str	r2, [r3, #0]
   12d70:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12d74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d78:	681a      	ldr	r2, [r3, #0]
   12d7a:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12d7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d82:	601a      	str	r2, [r3, #0]
   12d84:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12d88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d8c:	2200      	movs	r2, #0
   12d8e:	801a      	strh	r2, [r3, #0]
   12d90:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12d94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d98:	f04f 0200 	mov.w	r2, #0
   12d9c:	601a      	str	r2, [r3, #0]
   12d9e:	f001 bd09 	b.w	147b4 <auto_nav+0x21a4>
    }
    else if(nav_stage == 1)
   12da2:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12da6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12daa:	781b      	ldrb	r3, [r3, #0]
   12dac:	2b01      	cmp	r3, #1
   12dae:	d169      	bne.n	12e84 <auto_nav+0x874>
    {
         nav_stage =1;
   12db0:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12db4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12db8:	2201      	movs	r2, #1
   12dba:	701a      	strb	r2, [r3, #0]
          if (approaching(6)) NextStageFrom(6) else {
   12dbc:	2006      	movs	r0, #6
   12dbe:	f001 fd07 	bl	147d0 <approaching>
   12dc2:	4603      	mov	r3, r0
   12dc4:	2b00      	cmp	r3, #0
   12dc6:	d034      	beq.n	12e32 <auto_nav+0x822>
   12dc8:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12dcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dd0:	2206      	movs	r2, #6
   12dd2:	701a      	strb	r2, [r3, #0]
   12dd4:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12dd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ddc:	781b      	ldrb	r3, [r3, #0]
   12dde:	3301      	adds	r3, #1
   12de0:	b2da      	uxtb	r2, r3
   12de2:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12de6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dea:	701a      	strb	r2, [r3, #0]
   12dec:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12df0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12df4:	681a      	ldr	r2, [r3, #0]
   12df6:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12dfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dfe:	601a      	str	r2, [r3, #0]
   12e00:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12e04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e08:	681a      	ldr	r2, [r3, #0]
   12e0a:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12e0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e12:	601a      	str	r2, [r3, #0]
   12e14:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12e18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e1c:	2200      	movs	r2, #0
   12e1e:	801a      	strh	r2, [r3, #0]
   12e20:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12e24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e28:	f04f 0200 	mov.w	r2, #0
   12e2c:	601a      	str	r2, [r3, #0]
   12e2e:	f001 bcc1 	b.w	147b4 <auto_nav+0x21a4>
            fly_to(6);
   12e32:	2006      	movs	r0, #6
   12e34:	f001 fe00 	bl	14a38 <fly_to>
            auto_pitch = FALSE;
   12e38:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12e3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e40:	2200      	movs	r2, #0
   12e42:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12e44:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12e48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e4c:	f04f 0200 	mov.w	r2, #0
   12e50:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12e52:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12e56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e5a:	2203      	movs	r2, #3
   12e5c:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[6].a;
   12e5e:	f240 5378 	movw	r3, #1400	; 0x578
   12e62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   12e68:	f240 5374 	movw	r3, #1396	; 0x574
   12e6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e70:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12e72:	f64c 0394 	movw	r3, #51348	; 0xc894
   12e76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e7a:	f04f 0200 	mov.w	r2, #0
   12e7e:	601a      	str	r2, [r3, #0]
          }
          return;
   12e80:	f001 bc98 	b.w	147b4 <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12e84:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12e88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e8c:	781b      	ldrb	r3, [r3, #0]
   12e8e:	2b02      	cmp	r3, #2
   12e90:	d169      	bne.n	12f66 <auto_nav+0x956>
     {
         nav_stage =2; 
   12e92:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12e96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e9a:	2202      	movs	r2, #2
   12e9c:	701a      	strb	r2, [r3, #0]
         if (approaching(1)) NextStageFrom(1) else {
   12e9e:	2001      	movs	r0, #1
   12ea0:	f001 fc96 	bl	147d0 <approaching>
   12ea4:	4603      	mov	r3, r0
   12ea6:	2b00      	cmp	r3, #0
   12ea8:	d034      	beq.n	12f14 <auto_nav+0x904>
   12eaa:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12eae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12eb2:	2201      	movs	r2, #1
   12eb4:	701a      	strb	r2, [r3, #0]
   12eb6:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12eba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ebe:	781b      	ldrb	r3, [r3, #0]
   12ec0:	3301      	adds	r3, #1
   12ec2:	b2da      	uxtb	r2, r3
   12ec4:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12ec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ecc:	701a      	strb	r2, [r3, #0]
   12ece:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12ed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ed6:	681a      	ldr	r2, [r3, #0]
   12ed8:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12edc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ee0:	601a      	str	r2, [r3, #0]
   12ee2:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12ee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12eea:	681a      	ldr	r2, [r3, #0]
   12eec:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12ef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ef4:	601a      	str	r2, [r3, #0]
   12ef6:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12efa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12efe:	2200      	movs	r2, #0
   12f00:	801a      	strh	r2, [r3, #0]
   12f02:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12f06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f0a:	f04f 0200 	mov.w	r2, #0
   12f0e:	601a      	str	r2, [r3, #0]
   12f10:	f001 bc50 	b.w	147b4 <auto_nav+0x21a4>
            fly_to(1);
   12f14:	2001      	movs	r0, #1
   12f16:	f001 fd8f 	bl	14a38 <fly_to>
            auto_pitch = FALSE;
   12f1a:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12f1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f22:	2200      	movs	r2, #0
   12f24:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12f26:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12f2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f2e:	f04f 0200 	mov.w	r2, #0
   12f32:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12f34:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12f38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f3c:	2203      	movs	r2, #3
   12f3e:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12f40:	f240 5378 	movw	r3, #1400	; 0x578
   12f44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f48:	695a      	ldr	r2, [r3, #20]
   12f4a:	f240 5374 	movw	r3, #1396	; 0x574
   12f4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f52:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12f54:	f64c 0394 	movw	r3, #51348	; 0xc894
   12f58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f5c:	f04f 0200 	mov.w	r2, #0
   12f60:	601a      	str	r2, [r3, #0]
          }
          return;
   12f62:	f001 bc27 	b.w	147b4 <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12f66:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12f6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f6e:	781b      	ldrb	r3, [r3, #0]
   12f70:	2b03      	cmp	r3, #3
   12f72:	d16f      	bne.n	13054 <auto_nav+0xa44>
      {
	   nav_stage = 3;         
   12f74:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12f78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f7c:	2203      	movs	r2, #3
   12f7e:	701a      	strb	r2, [r3, #0]
           if (approaching(2)) NextStageFrom(2) else {
   12f80:	2002      	movs	r0, #2
   12f82:	f001 fc25 	bl	147d0 <approaching>
   12f86:	4603      	mov	r3, r0
   12f88:	2b00      	cmp	r3, #0
   12f8a:	d034      	beq.n	12ff6 <auto_nav+0x9e6>
   12f8c:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12f90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f94:	2202      	movs	r2, #2
   12f96:	701a      	strb	r2, [r3, #0]
   12f98:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12f9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fa0:	781b      	ldrb	r3, [r3, #0]
   12fa2:	3301      	adds	r3, #1
   12fa4:	b2da      	uxtb	r2, r3
   12fa6:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12faa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fae:	701a      	strb	r2, [r3, #0]
   12fb0:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12fb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fb8:	681a      	ldr	r2, [r3, #0]
   12fba:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12fbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fc2:	601a      	str	r2, [r3, #0]
   12fc4:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12fc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fcc:	681a      	ldr	r2, [r3, #0]
   12fce:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12fd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fd6:	601a      	str	r2, [r3, #0]
   12fd8:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12fdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fe0:	2200      	movs	r2, #0
   12fe2:	801a      	strh	r2, [r3, #0]
   12fe4:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12fe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fec:	f04f 0200 	mov.w	r2, #0
   12ff0:	601a      	str	r2, [r3, #0]
   12ff2:	f001 bbdf 	b.w	147b4 <auto_nav+0x21a4>
            route_to(last_wp, 2);
   12ff6:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12ffa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ffe:	781b      	ldrb	r3, [r3, #0]
   13000:	4618      	mov	r0, r3
   13002:	2102      	movs	r1, #2
   13004:	f001 fd3a 	bl	14a7c <route_to>
            auto_pitch = FALSE;
   13008:	f24c 532f 	movw	r3, #50479	; 0xc52f
   1300c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13010:	2200      	movs	r2, #0
   13012:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   13014:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13018:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1301c:	f04f 0200 	mov.w	r2, #0
   13020:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13022:	f24c 532d 	movw	r3, #50477	; 0xc52d
   13026:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1302a:	2203      	movs	r2, #3
   1302c:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[2].a;
   1302e:	f240 5378 	movw	r3, #1400	; 0x578
   13032:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13036:	6a1a      	ldr	r2, [r3, #32]
   13038:	f240 5374 	movw	r3, #1396	; 0x574
   1303c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13040:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   13042:	f64c 0394 	movw	r3, #51348	; 0xc894
   13046:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1304a:	f04f 0200 	mov.w	r2, #0
   1304e:	601a      	str	r2, [r3, #0]
          }
          return;
   13050:	f001 bbb0 	b.w	147b4 <auto_nav+0x21a4>
       }
       else if (nav_stage == 4)
   13054:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13058:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1305c:	781b      	ldrb	r3, [r3, #0]
   1305e:	2b04      	cmp	r3, #4
   13060:	d169      	bne.n	13136 <auto_nav+0xb26>
       {
          nav_stage = 4;
   13062:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13066:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1306a:	2204      	movs	r2, #4
   1306c:	701a      	strb	r2, [r3, #0]
          if (approaching(3)) NextStageFrom(3) else {
   1306e:	2003      	movs	r0, #3
   13070:	f001 fbae 	bl	147d0 <approaching>
   13074:	4603      	mov	r3, r0
   13076:	2b00      	cmp	r3, #0
   13078:	d034      	beq.n	130e4 <auto_nav+0xad4>
   1307a:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   1307e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13082:	2203      	movs	r2, #3
   13084:	701a      	strb	r2, [r3, #0]
   13086:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1308a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1308e:	781b      	ldrb	r3, [r3, #0]
   13090:	3301      	adds	r3, #1
   13092:	b2da      	uxtb	r2, r3
   13094:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13098:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1309c:	701a      	strb	r2, [r3, #0]
   1309e:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   130a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130a6:	681a      	ldr	r2, [r3, #0]
   130a8:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   130ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130b0:	601a      	str	r2, [r3, #0]
   130b2:	f64c 3300 	movw	r3, #51968	; 0xcb00
   130b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130ba:	681a      	ldr	r2, [r3, #0]
   130bc:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   130c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130c4:	601a      	str	r2, [r3, #0]
   130c6:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   130ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130ce:	2200      	movs	r2, #0
   130d0:	801a      	strh	r2, [r3, #0]
   130d2:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   130d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130da:	f04f 0200 	mov.w	r2, #0
   130de:	601a      	str	r2, [r3, #0]
   130e0:	f001 bb68 	b.w	147b4 <auto_nav+0x21a4>
            fly_to(3);
   130e4:	2003      	movs	r0, #3
   130e6:	f001 fca7 	bl	14a38 <fly_to>
            auto_pitch = FALSE;
   130ea:	f24c 532f 	movw	r3, #50479	; 0xc52f
   130ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130f2:	2200      	movs	r2, #0
   130f4:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   130f6:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   130fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130fe:	f04f 0200 	mov.w	r2, #0
   13102:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13104:	f24c 532d 	movw	r3, #50477	; 0xc52d
   13108:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1310c:	2203      	movs	r2, #3
   1310e:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[3].a;
   13110:	f240 5378 	movw	r3, #1400	; 0x578
   13114:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1311a:	f240 5374 	movw	r3, #1396	; 0x574
   1311e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13122:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   13124:	f64c 0394 	movw	r3, #51348	; 0xc894
   13128:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1312c:	f04f 0200 	mov.w	r2, #0
   13130:	601a      	str	r2, [r3, #0]
          }
          return;
   13132:	f001 bb3f 	b.w	147b4 <auto_nav+0x21a4>
       }
       else if (nav_stage == 5)
   13136:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1313a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1313e:	781b      	ldrb	r3, [r3, #0]
   13140:	2b05      	cmp	r3, #5
   13142:	d169      	bne.n	13218 <auto_nav+0xc08>
       {
          nav_stage =5;
   13144:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13148:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1314c:	2205      	movs	r2, #5
   1314e:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   13150:	2004      	movs	r0, #4
   13152:	f001 fb3d 	bl	147d0 <approaching>
   13156:	4603      	mov	r3, r0
   13158:	2b00      	cmp	r3, #0
   1315a:	d034      	beq.n	131c6 <auto_nav+0xbb6>
   1315c:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   13160:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13164:	2204      	movs	r2, #4
   13166:	701a      	strb	r2, [r3, #0]
   13168:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1316c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13170:	781b      	ldrb	r3, [r3, #0]
   13172:	3301      	adds	r3, #1
   13174:	b2da      	uxtb	r2, r3
   13176:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1317a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1317e:	701a      	strb	r2, [r3, #0]
   13180:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13184:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13188:	681a      	ldr	r2, [r3, #0]
   1318a:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   1318e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13192:	601a      	str	r2, [r3, #0]
   13194:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13198:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1319c:	681a      	ldr	r2, [r3, #0]
   1319e:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   131a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131a6:	601a      	str	r2, [r3, #0]
   131a8:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   131ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131b0:	2200      	movs	r2, #0
   131b2:	801a      	strh	r2, [r3, #0]
   131b4:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   131b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131bc:	f04f 0200 	mov.w	r2, #0
   131c0:	601a      	str	r2, [r3, #0]
   131c2:	f001 baf7 	b.w	147b4 <auto_nav+0x21a4>
            fly_to(4);
   131c6:	2004      	movs	r0, #4
   131c8:	f001 fc36 	bl	14a38 <fly_to>
            auto_pitch = FALSE;
   131cc:	f24c 532f 	movw	r3, #50479	; 0xc52f
   131d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131d4:	2200      	movs	r2, #0
   131d6:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   131d8:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   131dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131e0:	f04f 0200 	mov.w	r2, #0
   131e4:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   131e6:	f24c 532d 	movw	r3, #50477	; 0xc52d
   131ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131ee:	2203      	movs	r2, #3
   131f0:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   131f2:	f240 5378 	movw	r3, #1400	; 0x578
   131f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   131fc:	f240 5374 	movw	r3, #1396	; 0x574
   13200:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13204:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   13206:	f64c 0394 	movw	r3, #51348	; 0xc894
   1320a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1320e:	f04f 0200 	mov.w	r2, #0
   13212:	601a      	str	r2, [r3, #0]
          }
          return;
   13214:	f001 bace 	b.w	147b4 <auto_nav+0x21a4>
       }
       else if (nav_stage == 6)
   13218:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1321c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13220:	781b      	ldrb	r3, [r3, #0]
   13222:	2b06      	cmp	r3, #6
   13224:	d16f      	bne.n	13306 <auto_nav+0xcf6>
       {
          nav_stage =6;
   13226:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1322a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1322e:	2206      	movs	r2, #6
   13230:	701a      	strb	r2, [r3, #0]
          if (approaching(5)) NextStageFrom(5) else {
   13232:	2005      	movs	r0, #5
   13234:	f001 facc 	bl	147d0 <approaching>
   13238:	4603      	mov	r3, r0
   1323a:	2b00      	cmp	r3, #0
   1323c:	d034      	beq.n	132a8 <auto_nav+0xc98>
   1323e:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   13242:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13246:	2205      	movs	r2, #5
   13248:	701a      	strb	r2, [r3, #0]
   1324a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1324e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13252:	781b      	ldrb	r3, [r3, #0]
   13254:	3301      	adds	r3, #1
   13256:	b2da      	uxtb	r2, r3
   13258:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1325c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13260:	701a      	strb	r2, [r3, #0]
   13262:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13266:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1326a:	681a      	ldr	r2, [r3, #0]
   1326c:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13270:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13274:	601a      	str	r2, [r3, #0]
   13276:	f64c 3300 	movw	r3, #51968	; 0xcb00
   1327a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1327e:	681a      	ldr	r2, [r3, #0]
   13280:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13284:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13288:	601a      	str	r2, [r3, #0]
   1328a:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   1328e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13292:	2200      	movs	r2, #0
   13294:	801a      	strh	r2, [r3, #0]
   13296:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   1329a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1329e:	f04f 0200 	mov.w	r2, #0
   132a2:	601a      	str	r2, [r3, #0]
   132a4:	f001 ba86 	b.w	147b4 <auto_nav+0x21a4>
            route_to(last_wp, 5);
   132a8:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   132ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132b0:	781b      	ldrb	r3, [r3, #0]
   132b2:	4618      	mov	r0, r3
   132b4:	2105      	movs	r1, #5
   132b6:	f001 fbe1 	bl	14a7c <route_to>
            auto_pitch = FALSE;
   132ba:	f24c 532f 	movw	r3, #50479	; 0xc52f
   132be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132c2:	2200      	movs	r2, #0
   132c4:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   132c6:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   132ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132ce:	f04f 0200 	mov.w	r2, #0
   132d2:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   132d4:	f24c 532d 	movw	r3, #50477	; 0xc52d
   132d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132dc:	2203      	movs	r2, #3
   132de:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[5].a;
   132e0:	f240 5378 	movw	r3, #1400	; 0x578
   132e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   132e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   132ea:	f240 5374 	movw	r3, #1396	; 0x574
   132ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   132f2:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   132f4:	f64c 0394 	movw	r3, #51348	; 0xc894
   132f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132fc:	f04f 0200 	mov.w	r2, #0
   13300:	601a      	str	r2, [r3, #0]
          }
          return;
   13302:	f001 ba57 	b.w	147b4 <auto_nav+0x21a4>
       }
       else if (nav_stage == 7)
   13306:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1330a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1330e:	781b      	ldrb	r3, [r3, #0]
   13310:	2b07      	cmp	r3, #7
   13312:	d106      	bne.n	13322 <auto_nav+0xd12>
       {
	   nav_stage =7;
   13314:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13318:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1331c:	2207      	movs	r2, #7
   1331e:	701a      	strb	r2, [r3, #0]
	   Goto(while_5)
   13320:	e50a      	b.n	12d38 <auto_nav+0x728>
	}
       
       else if (nav_stage == 8){
   13322:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13326:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1332a:	781b      	ldrb	r3, [r3, #0]
   1332c:	2b08      	cmp	r3, #8
   1332e:	f041 8241 	bne.w	147b4 <auto_nav+0x21a4>
	  Label(endwhile_6)
	  nav_stage =8;
   13332:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13336:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1333a:	2208      	movs	r2, #8
   1333c:	701a      	strb	r2, [r3, #0]
          NextBlock();
   1333e:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13342:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13346:	781b      	ldrb	r3, [r3, #0]
   13348:	3301      	adds	r3, #1
   1334a:	b2da      	uxtb	r2, r3
   1334c:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13350:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13354:	701a      	strb	r2, [r3, #0]
   13356:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1335a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1335e:	2200      	movs	r2, #0
   13360:	701a      	strb	r2, [r3, #0]
   13362:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13366:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1336a:	2200      	movs	r2, #0
   1336c:	801a      	strh	r2, [r3, #0]
   1336e:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13372:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13376:	681a      	ldr	r2, [r3, #0]
   13378:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   1337c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13380:	601a      	str	r2, [r3, #0]
   13382:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13386:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1338a:	681a      	ldr	r2, [r3, #0]
   1338c:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13390:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13394:	601a      	str	r2, [r3, #0]
   13396:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   1339a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1339e:	2200      	movs	r2, #0
   133a0:	801a      	strh	r2, [r3, #0]
   133a2:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   133a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133aa:	f04f 0200 	mov.w	r2, #0
   133ae:	601a      	str	r2, [r3, #0]
   133b0:	f001 ba00 	b.w	147b4 <auto_nav+0x21a4>
       }
       else { }
}
else if (nav_block == 3) // xyz
   133b4:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   133b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133bc:	781b      	ldrb	r3, [r3, #0]
   133be:	2b03      	cmp	r3, #3
   133c0:	f040 8388 	bne.w	13ad4 <auto_nav+0x14c4>
{
    nav_block = 3;
   133c4:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   133c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133cc:	2203      	movs	r2, #3
   133ce:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(4) }
   133d0:	f24c 5330 	movw	r3, #50480	; 0xc530
   133d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133d8:	781b      	ldrb	r3, [r3, #0]
   133da:	2b00      	cmp	r3, #0
   133dc:	d007      	beq.n	133ee <auto_nav+0xdde>
   133de:	f24c 5330 	movw	r3, #50480	; 0xc530
   133e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133e6:	2200      	movs	r2, #0
   133e8:	701a      	strb	r2, [r3, #0]
   133ea:	2301      	movs	r3, #1
   133ec:	e000      	b.n	133f0 <auto_nav+0xde0>
   133ee:	2300      	movs	r3, #0
   133f0:	2b00      	cmp	r3, #0
   133f2:	d034      	beq.n	1345e <auto_nav+0xe4e>
   133f4:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   133f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133fc:	2204      	movs	r2, #4
   133fe:	701a      	strb	r2, [r3, #0]
   13400:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13404:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13408:	2200      	movs	r2, #0
   1340a:	701a      	strb	r2, [r3, #0]
   1340c:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13410:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13414:	2200      	movs	r2, #0
   13416:	801a      	strh	r2, [r3, #0]
   13418:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1341c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13420:	681a      	ldr	r2, [r3, #0]
   13422:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13426:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1342a:	601a      	str	r2, [r3, #0]
   1342c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13430:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13434:	681a      	ldr	r2, [r3, #0]
   13436:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   1343a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1343e:	601a      	str	r2, [r3, #0]
   13440:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13444:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13448:	2200      	movs	r2, #0
   1344a:	801a      	strh	r2, [r3, #0]
   1344c:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13450:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13454:	f04f 0200 	mov.w	r2, #0
   13458:	601a      	str	r2, [r3, #0]
   1345a:	f001 b9ab 	b.w	147b4 <auto_nav+0x21a4>
    if(nav_stage == 0)
   1345e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13462:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13466:	781b      	ldrb	r3, [r3, #0]
   13468:	2b00      	cmp	r3, #0
   1346a:	f040 82ea 	bne.w	13a42 <auto_nav+0x1432>
    {
        nav_stage = 0;
   1346e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13472:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13476:	2200      	movs	r2, #0
   13478:	701a      	strb	r2, [r3, #0]
        Goto3D(50)
   1347a:	f24c 532c 	movw	r3, #50476	; 0xc52c
   1347e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13482:	781b      	ldrb	r3, [r3, #0]
   13484:	2b02      	cmp	r3, #2
   13486:	f040 81a5 	bne.w	137d4 <auto_nav+0x11c4>
   1348a:	f24c 6350 	movw	r3, #50768	; 0xc650
   1348e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13492:	88db      	ldrh	r3, [r3, #6]
   13494:	84fb      	strh	r3, [r7, #38]	; 0x26
   13496:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   1349a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   1349e:	dc04      	bgt.n	134aa <auto_nav+0xe9a>
   134a0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   134a4:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   134a8:	da7e      	bge.n	135a8 <auto_nav+0xf98>
   134aa:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   134ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134b2:	681b      	ldr	r3, [r3, #0]
   134b4:	4618      	mov	r0, r3
   134b6:	f004 fb67 	bl	17b88 <__aeabi_f2d>
   134ba:	4604      	mov	r4, r0
   134bc:	460d      	mov	r5, r1
   134be:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   134c2:	4618      	mov	r0, r3
   134c4:	f004 ffa0 	bl	18408 <__aeabi_i2f>
   134c8:	4603      	mov	r3, r0
   134ca:	4618      	mov	r0, r3
   134cc:	f04f 0100 	mov.w	r1, #0
   134d0:	f2c4 6116 	movt	r1, #17942	; 0x4616
   134d4:	f005 f8a0 	bl	18618 <__aeabi_fdiv>
   134d8:	4603      	mov	r3, r0
   134da:	4618      	mov	r0, r3
   134dc:	f004 fb54 	bl	17b88 <__aeabi_f2d>
   134e0:	4602      	mov	r2, r0
   134e2:	460b      	mov	r3, r1
   134e4:	4610      	mov	r0, r2
   134e6:	4619      	mov	r1, r3
   134e8:	f04f 0200 	mov.w	r2, #0
   134ec:	f04f 0300 	mov.w	r3, #0
   134f0:	f2cc 0334 	movt	r3, #49204	; 0xc034
   134f4:	f004 fb9c 	bl	17c30 <__aeabi_dmul>
   134f8:	4602      	mov	r2, r0
   134fa:	460b      	mov	r3, r1
   134fc:	4610      	mov	r0, r2
   134fe:	4619      	mov	r1, r3
   13500:	f04f 0200 	mov.w	r2, #0
   13504:	f04f 0300 	mov.w	r3, #0
   13508:	f004 f9e0 	bl	178cc <__adddf3>
   1350c:	4602      	mov	r2, r0
   1350e:	460b      	mov	r3, r1
   13510:	4620      	mov	r0, r4
   13512:	4629      	mov	r1, r5
   13514:	f004 f9da 	bl	178cc <__adddf3>
   13518:	4602      	mov	r2, r0
   1351a:	460b      	mov	r3, r1
   1351c:	4610      	mov	r0, r2
   1351e:	4619      	mov	r1, r3
   13520:	f004 fe68 	bl	181f4 <__aeabi_d2f>
   13524:	4602      	mov	r2, r0
   13526:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   1352a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1352e:	601a      	str	r2, [r3, #0]
   13530:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   13534:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13538:	681b      	ldr	r3, [r3, #0]
   1353a:	4618      	mov	r0, r3
   1353c:	f04f 0100 	mov.w	r1, #0
   13540:	f2c4 317a 	movt	r1, #17274	; 0x437a
   13544:	f005 f95c 	bl	18800 <__aeabi_fcmple>
   13548:	4603      	mov	r3, r0
   1354a:	2b00      	cmp	r3, #0
   1354c:	d005      	beq.n	1355a <auto_nav+0xf4a>
   1354e:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   13552:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13556:	681a      	ldr	r2, [r3, #0]
   13558:	e003      	b.n	13562 <auto_nav+0xf52>
   1355a:	f04f 0200 	mov.w	r2, #0
   1355e:	f2c4 327a 	movt	r2, #17274	; 0x437a
   13562:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   13566:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1356a:	601a      	str	r2, [r3, #0]
   1356c:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   13570:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13574:	681b      	ldr	r3, [r3, #0]
   13576:	4618      	mov	r0, r3
   13578:	f04f 0100 	mov.w	r1, #0
   1357c:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   13580:	f005 f948 	bl	18814 <__aeabi_fcmpge>
   13584:	4603      	mov	r3, r0
   13586:	2b00      	cmp	r3, #0
   13588:	d005      	beq.n	13596 <auto_nav+0xf86>
   1358a:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   1358e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13592:	681a      	ldr	r2, [r3, #0]
   13594:	e003      	b.n	1359e <auto_nav+0xf8e>
   13596:	f04f 0200 	mov.w	r2, #0
   1359a:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   1359e:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   135a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135a6:	601a      	str	r2, [r3, #0]
   135a8:	f24c 6350 	movw	r3, #50768	; 0xc650
   135ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135b0:	889b      	ldrh	r3, [r3, #4]
   135b2:	84bb      	strh	r3, [r7, #36]	; 0x24
   135b4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   135b8:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   135bc:	dc04      	bgt.n	135c8 <auto_nav+0xfb8>
   135be:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   135c2:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   135c6:	da7e      	bge.n	136c6 <auto_nav+0x10b6>
   135c8:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   135cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135d0:	681b      	ldr	r3, [r3, #0]
   135d2:	4618      	mov	r0, r3
   135d4:	f004 fad8 	bl	17b88 <__aeabi_f2d>
   135d8:	4604      	mov	r4, r0
   135da:	460d      	mov	r5, r1
   135dc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   135e0:	4618      	mov	r0, r3
   135e2:	f004 ff11 	bl	18408 <__aeabi_i2f>
   135e6:	4603      	mov	r3, r0
   135e8:	4618      	mov	r0, r3
   135ea:	f04f 0100 	mov.w	r1, #0
   135ee:	f2c4 6116 	movt	r1, #17942	; 0x4616
   135f2:	f005 f811 	bl	18618 <__aeabi_fdiv>
   135f6:	4603      	mov	r3, r0
   135f8:	4618      	mov	r0, r3
   135fa:	f004 fac5 	bl	17b88 <__aeabi_f2d>
   135fe:	4602      	mov	r2, r0
   13600:	460b      	mov	r3, r1
   13602:	4610      	mov	r0, r2
   13604:	4619      	mov	r1, r3
   13606:	f04f 0200 	mov.w	r2, #0
   1360a:	f04f 0300 	mov.w	r3, #0
   1360e:	f2cc 0334 	movt	r3, #49204	; 0xc034
   13612:	f004 fb0d 	bl	17c30 <__aeabi_dmul>
   13616:	4602      	mov	r2, r0
   13618:	460b      	mov	r3, r1
   1361a:	4610      	mov	r0, r2
   1361c:	4619      	mov	r1, r3
   1361e:	f04f 0200 	mov.w	r2, #0
   13622:	f04f 0300 	mov.w	r3, #0
   13626:	f004 f951 	bl	178cc <__adddf3>
   1362a:	4602      	mov	r2, r0
   1362c:	460b      	mov	r3, r1
   1362e:	4620      	mov	r0, r4
   13630:	4629      	mov	r1, r5
   13632:	f004 f94b 	bl	178cc <__adddf3>
   13636:	4602      	mov	r2, r0
   13638:	460b      	mov	r3, r1
   1363a:	4610      	mov	r0, r2
   1363c:	4619      	mov	r1, r3
   1363e:	f004 fdd9 	bl	181f4 <__aeabi_d2f>
   13642:	4602      	mov	r2, r0
   13644:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   13648:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1364c:	601a      	str	r2, [r3, #0]
   1364e:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   13652:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13656:	681b      	ldr	r3, [r3, #0]
   13658:	4618      	mov	r0, r3
   1365a:	f04f 0100 	mov.w	r1, #0
   1365e:	f2c4 317a 	movt	r1, #17274	; 0x437a
   13662:	f005 f8cd 	bl	18800 <__aeabi_fcmple>
   13666:	4603      	mov	r3, r0
   13668:	2b00      	cmp	r3, #0
   1366a:	d005      	beq.n	13678 <auto_nav+0x1068>
   1366c:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   13670:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13674:	681a      	ldr	r2, [r3, #0]
   13676:	e003      	b.n	13680 <auto_nav+0x1070>
   13678:	f04f 0200 	mov.w	r2, #0
   1367c:	f2c4 327a 	movt	r2, #17274	; 0x437a
   13680:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   13684:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13688:	601a      	str	r2, [r3, #0]
   1368a:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   1368e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13692:	681b      	ldr	r3, [r3, #0]
   13694:	4618      	mov	r0, r3
   13696:	f04f 0100 	mov.w	r1, #0
   1369a:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   1369e:	f005 f8b9 	bl	18814 <__aeabi_fcmpge>
   136a2:	4603      	mov	r3, r0
   136a4:	2b00      	cmp	r3, #0
   136a6:	d005      	beq.n	136b4 <auto_nav+0x10a4>
   136a8:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   136ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   136b0:	681a      	ldr	r2, [r3, #0]
   136b2:	e003      	b.n	136bc <auto_nav+0x10ac>
   136b4:	f04f 0200 	mov.w	r2, #0
   136b8:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   136bc:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   136c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   136c4:	601a      	str	r2, [r3, #0]
   136c6:	f24c 532d 	movw	r3, #50477	; 0xc52d
   136ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   136ce:	2203      	movs	r2, #3
   136d0:	701a      	strb	r2, [r3, #0]
   136d2:	f24c 6350 	movw	r3, #50768	; 0xc650
   136d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   136da:	885b      	ldrh	r3, [r3, #2]
   136dc:	847b      	strh	r3, [r7, #34]	; 0x22
   136de:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   136e2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   136e6:	dc04      	bgt.n	136f2 <auto_nav+0x10e2>
   136e8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   136ec:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   136f0:	da70      	bge.n	137d4 <auto_nav+0x11c4>
   136f2:	f240 5374 	movw	r3, #1396	; 0x574
   136f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136fa:	681b      	ldr	r3, [r3, #0]
   136fc:	4618      	mov	r0, r3
   136fe:	f004 fa43 	bl	17b88 <__aeabi_f2d>
   13702:	4604      	mov	r4, r0
   13704:	460d      	mov	r5, r1
   13706:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   1370a:	4618      	mov	r0, r3
   1370c:	f004 fe7c 	bl	18408 <__aeabi_i2f>
   13710:	4603      	mov	r3, r0
   13712:	4618      	mov	r0, r3
   13714:	f04f 0100 	mov.w	r1, #0
   13718:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1371c:	f004 ff7c 	bl	18618 <__aeabi_fdiv>
   13720:	4603      	mov	r3, r0
   13722:	4618      	mov	r0, r3
   13724:	f004 fa30 	bl	17b88 <__aeabi_f2d>
   13728:	4602      	mov	r2, r0
   1372a:	460b      	mov	r3, r1
   1372c:	f04f 0000 	mov.w	r0, #0
   13730:	f04f 0100 	mov.w	r1, #0
   13734:	f004 f8c8 	bl	178c8 <__aeabi_dsub>
   13738:	4602      	mov	r2, r0
   1373a:	460b      	mov	r3, r1
   1373c:	4620      	mov	r0, r4
   1373e:	4629      	mov	r1, r5
   13740:	f004 f8c4 	bl	178cc <__adddf3>
   13744:	4602      	mov	r2, r0
   13746:	460b      	mov	r3, r1
   13748:	4610      	mov	r0, r2
   1374a:	4619      	mov	r1, r3
   1374c:	f004 fd52 	bl	181f4 <__aeabi_d2f>
   13750:	4602      	mov	r2, r0
   13752:	f240 5374 	movw	r3, #1396	; 0x574
   13756:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1375a:	601a      	str	r2, [r3, #0]
   1375c:	f240 5374 	movw	r3, #1396	; 0x574
   13760:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13764:	681b      	ldr	r3, [r3, #0]
   13766:	4618      	mov	r0, r3
   13768:	f04f 0100 	mov.w	r1, #0
   1376c:	f2c4 312f 	movt	r1, #17199	; 0x432f
   13770:	f005 f850 	bl	18814 <__aeabi_fcmpge>
   13774:	4603      	mov	r3, r0
   13776:	2b00      	cmp	r3, #0
   13778:	d005      	beq.n	13786 <auto_nav+0x1176>
   1377a:	f240 5374 	movw	r3, #1396	; 0x574
   1377e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13782:	681a      	ldr	r2, [r3, #0]
   13784:	e003      	b.n	1378e <auto_nav+0x117e>
   13786:	f04f 0200 	mov.w	r2, #0
   1378a:	f2c4 322f 	movt	r2, #17199	; 0x432f
   1378e:	f240 5374 	movw	r3, #1396	; 0x574
   13792:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13796:	601a      	str	r2, [r3, #0]
   13798:	f240 5374 	movw	r3, #1396	; 0x574
   1379c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137a0:	681b      	ldr	r3, [r3, #0]
   137a2:	4618      	mov	r0, r3
   137a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   137a8:	f2c4 3189 	movt	r1, #17289	; 0x4389
   137ac:	f005 f828 	bl	18800 <__aeabi_fcmple>
   137b0:	4603      	mov	r3, r0
   137b2:	2b00      	cmp	r3, #0
   137b4:	d005      	beq.n	137c2 <auto_nav+0x11b2>
   137b6:	f240 5374 	movw	r3, #1396	; 0x574
   137ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137be:	681a      	ldr	r2, [r3, #0]
   137c0:	e003      	b.n	137ca <auto_nav+0x11ba>
   137c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   137c6:	f2c4 3289 	movt	r2, #17289	; 0x4389
   137ca:	f240 5374 	movw	r3, #1396	; 0x574
   137ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137d2:	601a      	str	r2, [r3, #0]
   137d4:	f64c 3300 	movw	r3, #51968	; 0xcb00
   137d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   137dc:	681a      	ldr	r2, [r3, #0]
   137de:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   137e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   137e6:	681b      	ldr	r3, [r3, #0]
   137e8:	4610      	mov	r0, r2
   137ea:	4619      	mov	r1, r3
   137ec:	f004 fd56 	bl	1829c <__aeabi_fsub>
   137f0:	4603      	mov	r3, r0
   137f2:	4618      	mov	r0, r3
   137f4:	f004 f9c8 	bl	17b88 <__aeabi_f2d>
   137f8:	4604      	mov	r4, r0
   137fa:	460d      	mov	r5, r1
   137fc:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13800:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13804:	681a      	ldr	r2, [r3, #0]
   13806:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   1380a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1380e:	681b      	ldr	r3, [r3, #0]
   13810:	4610      	mov	r0, r2
   13812:	4619      	mov	r1, r3
   13814:	f004 fd42 	bl	1829c <__aeabi_fsub>
   13818:	4603      	mov	r3, r0
   1381a:	4618      	mov	r0, r3
   1381c:	f004 f9b4 	bl	17b88 <__aeabi_f2d>
   13820:	4602      	mov	r2, r0
   13822:	460b      	mov	r3, r1
   13824:	4620      	mov	r0, r4
   13826:	4629      	mov	r1, r5
   13828:	f002 fa12 	bl	15c50 <pp_atan2>
   1382c:	4602      	mov	r2, r0
   1382e:	460b      	mov	r3, r1
   13830:	4610      	mov	r0, r2
   13832:	4619      	mov	r1, r3
   13834:	f004 fcde 	bl	181f4 <__aeabi_d2f>
   13838:	4603      	mov	r3, r0
   1383a:	61fb      	str	r3, [r7, #28]
   1383c:	69f8      	ldr	r0, [r7, #28]
   1383e:	f004 f9a3 	bl	17b88 <__aeabi_f2d>
   13842:	4604      	mov	r4, r0
   13844:	460d      	mov	r5, r1
   13846:	f64c 3334 	movw	r3, #52020	; 0xcb34
   1384a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1384e:	681b      	ldr	r3, [r3, #0]
   13850:	4618      	mov	r0, r3
   13852:	f04f 0100 	mov.w	r1, #0
   13856:	f2cc 2148 	movt	r1, #49736	; 0xc248
   1385a:	f004 fe29 	bl	184b0 <__aeabi_fmul>
   1385e:	4603      	mov	r3, r0
   13860:	4618      	mov	r0, r3
   13862:	f004 f991 	bl	17b88 <__aeabi_f2d>
   13866:	4602      	mov	r2, r0
   13868:	460b      	mov	r3, r1
   1386a:	f04f 0000 	mov.w	r0, #0
   1386e:	f04f 0100 	mov.w	r1, #0
   13872:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13876:	f004 fb05 	bl	17e84 <__aeabi_ddiv>
   1387a:	4602      	mov	r2, r0
   1387c:	460b      	mov	r3, r1
   1387e:	4620      	mov	r0, r4
   13880:	4629      	mov	r1, r5
   13882:	f004 f823 	bl	178cc <__adddf3>
   13886:	4602      	mov	r2, r0
   13888:	460b      	mov	r3, r1
   1388a:	4610      	mov	r0, r2
   1388c:	4619      	mov	r1, r3
   1388e:	f004 fcb1 	bl	181f4 <__aeabi_d2f>
   13892:	4603      	mov	r3, r0
   13894:	61bb      	str	r3, [r7, #24]
   13896:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   1389a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1389e:	681b      	ldr	r3, [r3, #0]
   138a0:	4618      	mov	r0, r3
   138a2:	f004 f971 	bl	17b88 <__aeabi_f2d>
   138a6:	4604      	mov	r4, r0
   138a8:	460d      	mov	r5, r1
   138aa:	69b8      	ldr	r0, [r7, #24]
   138ac:	f004 f96c 	bl	17b88 <__aeabi_f2d>
   138b0:	4602      	mov	r2, r0
   138b2:	460b      	mov	r3, r1
   138b4:	4610      	mov	r0, r2
   138b6:	4619      	mov	r1, r3
   138b8:	a3b1      	add	r3, pc, #708	; (adr r3, 13b80 <auto_nav+0x1570>)
   138ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   138be:	f004 f805 	bl	178cc <__adddf3>
   138c2:	4602      	mov	r2, r0
   138c4:	460b      	mov	r3, r1
   138c6:	4610      	mov	r0, r2
   138c8:	4619      	mov	r1, r3
   138ca:	f002 fa81 	bl	15dd0 <pp_sin>
   138ce:	4602      	mov	r2, r0
   138d0:	460b      	mov	r3, r1
   138d2:	4610      	mov	r0, r2
   138d4:	4619      	mov	r1, r3
   138d6:	f04f 0200 	mov.w	r2, #0
   138da:	f04f 0300 	mov.w	r3, #0
   138de:	f2c4 0349 	movt	r3, #16457	; 0x4049
   138e2:	f004 f9a5 	bl	17c30 <__aeabi_dmul>
   138e6:	4602      	mov	r2, r0
   138e8:	460b      	mov	r3, r1
   138ea:	4620      	mov	r0, r4
   138ec:	4629      	mov	r1, r5
   138ee:	f003 ffed 	bl	178cc <__adddf3>
   138f2:	4602      	mov	r2, r0
   138f4:	460b      	mov	r3, r1
   138f6:	4610      	mov	r0, r2
   138f8:	4619      	mov	r1, r3
   138fa:	f004 fc7b 	bl	181f4 <__aeabi_d2f>
   138fe:	4606      	mov	r6, r0
   13900:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   13904:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13908:	681b      	ldr	r3, [r3, #0]
   1390a:	4618      	mov	r0, r3
   1390c:	f004 f93c 	bl	17b88 <__aeabi_f2d>
   13910:	4604      	mov	r4, r0
   13912:	460d      	mov	r5, r1
   13914:	69b8      	ldr	r0, [r7, #24]
   13916:	f004 f937 	bl	17b88 <__aeabi_f2d>
   1391a:	4602      	mov	r2, r0
   1391c:	460b      	mov	r3, r1
   1391e:	4610      	mov	r0, r2
   13920:	4619      	mov	r1, r3
   13922:	f002 fa55 	bl	15dd0 <pp_sin>
   13926:	4602      	mov	r2, r0
   13928:	460b      	mov	r3, r1
   1392a:	4610      	mov	r0, r2
   1392c:	4619      	mov	r1, r3
   1392e:	f04f 0200 	mov.w	r2, #0
   13932:	f04f 0300 	mov.w	r3, #0
   13936:	f2c4 0349 	movt	r3, #16457	; 0x4049
   1393a:	f004 f979 	bl	17c30 <__aeabi_dmul>
   1393e:	4602      	mov	r2, r0
   13940:	460b      	mov	r3, r1
   13942:	4620      	mov	r0, r4
   13944:	4629      	mov	r1, r5
   13946:	f003 ffc1 	bl	178cc <__adddf3>
   1394a:	4602      	mov	r2, r0
   1394c:	460b      	mov	r3, r1
   1394e:	4610      	mov	r0, r2
   13950:	4619      	mov	r1, r3
   13952:	f004 fc4f 	bl	181f4 <__aeabi_d2f>
   13956:	4603      	mov	r3, r0
   13958:	4630      	mov	r0, r6
   1395a:	4619      	mov	r1, r3
   1395c:	f001 f81c 	bl	14998 <fly_to_xy>
   13960:	69b8      	ldr	r0, [r7, #24]
   13962:	f004 f911 	bl	17b88 <__aeabi_f2d>
   13966:	4602      	mov	r2, r0
   13968:	460b      	mov	r3, r1
   1396a:	a185      	add	r1, pc, #532	; (adr r1, 13b80 <auto_nav+0x1570>)
   1396c:	e9d1 0100 	ldrd	r0, r1, [r1]
   13970:	f003 ffaa 	bl	178c8 <__aeabi_dsub>
   13974:	4602      	mov	r2, r0
   13976:	460b      	mov	r3, r1
   13978:	4610      	mov	r0, r2
   1397a:	4619      	mov	r1, r3
   1397c:	a382      	add	r3, pc, #520	; (adr r3, 13b88 <auto_nav+0x1578>)
   1397e:	e9d3 2300 	ldrd	r2, r3, [r3]
   13982:	f004 fa7f 	bl	17e84 <__aeabi_ddiv>
   13986:	4602      	mov	r2, r0
   13988:	460b      	mov	r3, r1
   1398a:	4610      	mov	r0, r2
   1398c:	4619      	mov	r1, r3
   1398e:	f04f 0200 	mov.w	r2, #0
   13992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13996:	f2c4 0366 	movt	r3, #16486	; 0x4066
   1399a:	f004 f949 	bl	17c30 <__aeabi_dmul>
   1399e:	4602      	mov	r2, r0
   139a0:	460b      	mov	r3, r1
   139a2:	4610      	mov	r0, r2
   139a4:	4619      	mov	r1, r3
   139a6:	f004 fc25 	bl	181f4 <__aeabi_d2f>
   139aa:	4602      	mov	r2, r0
   139ac:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   139b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139b4:	601a      	str	r2, [r3, #0]
   139b6:	e012      	b.n	139de <auto_nav+0x13ce>
   139b8:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   139bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139c0:	681b      	ldr	r3, [r3, #0]
   139c2:	4618      	mov	r0, r3
   139c4:	f04f 0100 	mov.w	r1, #0
   139c8:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   139cc:	f004 fc68 	bl	182a0 <__addsf3>
   139d0:	4603      	mov	r3, r0
   139d2:	461a      	mov	r2, r3
   139d4:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   139d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139dc:	601a      	str	r2, [r3, #0]
   139de:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   139e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139e6:	681b      	ldr	r3, [r3, #0]
   139e8:	4618      	mov	r0, r3
   139ea:	f04f 0100 	mov.w	r1, #0
   139ee:	f004 fefd 	bl	187ec <__aeabi_fcmplt>
   139f2:	4603      	mov	r3, r0
   139f4:	2b00      	cmp	r3, #0
   139f6:	d1df      	bne.n	139b8 <auto_nav+0x13a8>
   139f8:	e012      	b.n	13a20 <auto_nav+0x1410>
   139fa:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   139fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a02:	681b      	ldr	r3, [r3, #0]
   13a04:	4618      	mov	r0, r3
   13a06:	f04f 0100 	mov.w	r1, #0
   13a0a:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13a0e:	f004 fc45 	bl	1829c <__aeabi_fsub>
   13a12:	4603      	mov	r3, r0
   13a14:	461a      	mov	r2, r3
   13a16:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13a1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a1e:	601a      	str	r2, [r3, #0]
   13a20:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13a24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a28:	681b      	ldr	r3, [r3, #0]
   13a2a:	4618      	mov	r0, r3
   13a2c:	f04f 0100 	mov.w	r1, #0
   13a30:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13a34:	f004 feee 	bl	18814 <__aeabi_fcmpge>
   13a38:	4603      	mov	r3, r0
   13a3a:	2b00      	cmp	r3, #0
   13a3c:	d1dd      	bne.n	139fa <auto_nav+0x13ea>
        return;
   13a3e:	f000 beb9 	b.w	147b4 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   13a42:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13a46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a4a:	781b      	ldrb	r3, [r3, #0]
   13a4c:	2b01      	cmp	r3, #1
   13a4e:	f040 86b1 	bne.w	147b4 <auto_nav+0x21a4>
    {
        nav_stage = 1;
   13a52:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13a56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a5a:	2201      	movs	r2, #1
   13a5c:	701a      	strb	r2, [r3, #0]
        NextBlock()
   13a5e:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13a62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a66:	781b      	ldrb	r3, [r3, #0]
   13a68:	3301      	adds	r3, #1
   13a6a:	b2da      	uxtb	r2, r3
   13a6c:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13a70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a74:	701a      	strb	r2, [r3, #0]
   13a76:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13a7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a7e:	2200      	movs	r2, #0
   13a80:	701a      	strb	r2, [r3, #0]
   13a82:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13a86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a8a:	2200      	movs	r2, #0
   13a8c:	801a      	strh	r2, [r3, #0]
   13a8e:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13a92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a96:	681a      	ldr	r2, [r3, #0]
   13a98:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13a9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13aa0:	601a      	str	r2, [r3, #0]
   13aa2:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13aa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13aaa:	681a      	ldr	r2, [r3, #0]
   13aac:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13ab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ab4:	601a      	str	r2, [r3, #0]
   13ab6:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13aba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13abe:	2200      	movs	r2, #0
   13ac0:	801a      	strh	r2, [r3, #0]
   13ac2:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13ac6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13aca:	f04f 0200 	mov.w	r2, #0
   13ace:	601a      	str	r2, [r3, #0]
   13ad0:	f000 be70 	b.w	147b4 <auto_nav+0x21a4>
    }
    else { }
}
else if (nav_block == 4)
   13ad4:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13ad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13adc:	781b      	ldrb	r3, [r3, #0]
   13ade:	2b04      	cmp	r3, #4
   13ae0:	f040 8202 	bne.w	13ee8 <auto_nav+0x18d8>
{
    nav_block = 4;
   13ae4:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13ae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13aec:	2204      	movs	r2, #4
   13aee:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(5) }
   13af0:	f24c 5330 	movw	r3, #50480	; 0xc530
   13af4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13af8:	781b      	ldrb	r3, [r3, #0]
   13afa:	2b00      	cmp	r3, #0
   13afc:	d007      	beq.n	13b0e <auto_nav+0x14fe>
   13afe:	f24c 5330 	movw	r3, #50480	; 0xc530
   13b02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b06:	2200      	movs	r2, #0
   13b08:	701a      	strb	r2, [r3, #0]
   13b0a:	2301      	movs	r3, #1
   13b0c:	e000      	b.n	13b10 <auto_nav+0x1500>
   13b0e:	2300      	movs	r3, #0
   13b10:	2b00      	cmp	r3, #0
   13b12:	d03d      	beq.n	13b90 <auto_nav+0x1580>
   13b14:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13b18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b1c:	2205      	movs	r2, #5
   13b1e:	701a      	strb	r2, [r3, #0]
   13b20:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13b24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b28:	2200      	movs	r2, #0
   13b2a:	701a      	strb	r2, [r3, #0]
   13b2c:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13b30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b34:	2200      	movs	r2, #0
   13b36:	801a      	strh	r2, [r3, #0]
   13b38:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13b3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b40:	681a      	ldr	r2, [r3, #0]
   13b42:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13b46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b4a:	601a      	str	r2, [r3, #0]
   13b4c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13b50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b54:	681a      	ldr	r2, [r3, #0]
   13b56:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13b5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b5e:	601a      	str	r2, [r3, #0]
   13b60:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13b64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b68:	2200      	movs	r2, #0
   13b6a:	801a      	strh	r2, [r3, #0]
   13b6c:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b74:	f04f 0200 	mov.w	r2, #0
   13b78:	601a      	str	r2, [r3, #0]
   13b7a:	f000 be1b 	b.w	147b4 <auto_nav+0x21a4>
   13b7e:	bf00      	nop
   13b80:	54442d18 	.word	0x54442d18
   13b84:	3ff921fb 	.word	0x3ff921fb
   13b88:	54442d18 	.word	0x54442d18
   13b8c:	400921fb 	.word	0x400921fb
    if(nav_stage == 0)
   13b90:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13b94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b98:	781b      	ldrb	r3, [r3, #0]
   13b9a:	2b00      	cmp	r3, #0
   13b9c:	f040 815b 	bne.w	13e56 <auto_nav+0x1846>
    {
        nav_stage = 0;
   13ba0:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13ba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ba8:	2200      	movs	r2, #0
   13baa:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   13bac:	f24c 532f 	movw	r3, #50479	; 0xc52f
   13bb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bb4:	2200      	movs	r2, #0
   13bb6:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13bb8:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13bbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bc0:	f04f 0200 	mov.w	r2, #0
   13bc4:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13bc6:	f24c 532d 	movw	r3, #50477	; 0xc52d
   13bca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bce:	2203      	movs	r2, #3
   13bd0:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[0].a;
   13bd2:	f240 5378 	movw	r3, #1400	; 0x578
   13bd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13bda:	689a      	ldr	r2, [r3, #8]
   13bdc:	f240 5374 	movw	r3, #1396	; 0x574
   13be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13be4:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   13be6:	f64c 0394 	movw	r3, #51348	; 0xc894
   13bea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bee:	f04f 0200 	mov.w	r2, #0
   13bf2:	601a      	str	r2, [r3, #0]
        Circle(0, 150);
   13bf4:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13bf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bfc:	681a      	ldr	r2, [r3, #0]
   13bfe:	f240 5378 	movw	r3, #1400	; 0x578
   13c02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c06:	685b      	ldr	r3, [r3, #4]
   13c08:	4610      	mov	r0, r2
   13c0a:	4619      	mov	r1, r3
   13c0c:	f004 fb46 	bl	1829c <__aeabi_fsub>
   13c10:	4603      	mov	r3, r0
   13c12:	4618      	mov	r0, r3
   13c14:	f003 ffb8 	bl	17b88 <__aeabi_f2d>
   13c18:	4604      	mov	r4, r0
   13c1a:	460d      	mov	r5, r1
   13c1c:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13c20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c24:	681a      	ldr	r2, [r3, #0]
   13c26:	f240 5378 	movw	r3, #1400	; 0x578
   13c2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c2e:	681b      	ldr	r3, [r3, #0]
   13c30:	4610      	mov	r0, r2
   13c32:	4619      	mov	r1, r3
   13c34:	f004 fb32 	bl	1829c <__aeabi_fsub>
   13c38:	4603      	mov	r3, r0
   13c3a:	4618      	mov	r0, r3
   13c3c:	f003 ffa4 	bl	17b88 <__aeabi_f2d>
   13c40:	4602      	mov	r2, r0
   13c42:	460b      	mov	r3, r1
   13c44:	4620      	mov	r0, r4
   13c46:	4629      	mov	r1, r5
   13c48:	f002 f802 	bl	15c50 <pp_atan2>
   13c4c:	4602      	mov	r2, r0
   13c4e:	460b      	mov	r3, r1
   13c50:	4610      	mov	r0, r2
   13c52:	4619      	mov	r1, r3
   13c54:	f004 face 	bl	181f4 <__aeabi_d2f>
   13c58:	4603      	mov	r3, r0
   13c5a:	617b      	str	r3, [r7, #20]
   13c5c:	6978      	ldr	r0, [r7, #20]
   13c5e:	f003 ff93 	bl	17b88 <__aeabi_f2d>
   13c62:	4604      	mov	r4, r0
   13c64:	460d      	mov	r5, r1
   13c66:	f64c 3334 	movw	r3, #52020	; 0xcb34
   13c6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c6e:	681b      	ldr	r3, [r3, #0]
   13c70:	4618      	mov	r0, r3
   13c72:	f04f 0100 	mov.w	r1, #0
   13c76:	f2cc 3116 	movt	r1, #49942	; 0xc316
   13c7a:	f004 fc19 	bl	184b0 <__aeabi_fmul>
   13c7e:	4603      	mov	r3, r0
   13c80:	4618      	mov	r0, r3
   13c82:	f003 ff81 	bl	17b88 <__aeabi_f2d>
   13c86:	4602      	mov	r2, r0
   13c88:	460b      	mov	r3, r1
   13c8a:	f04f 0000 	mov.w	r0, #0
   13c8e:	f04f 0100 	mov.w	r1, #0
   13c92:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13c96:	f004 f8f5 	bl	17e84 <__aeabi_ddiv>
   13c9a:	4602      	mov	r2, r0
   13c9c:	460b      	mov	r3, r1
   13c9e:	4620      	mov	r0, r4
   13ca0:	4629      	mov	r1, r5
   13ca2:	f003 fe13 	bl	178cc <__adddf3>
   13ca6:	4602      	mov	r2, r0
   13ca8:	460b      	mov	r3, r1
   13caa:	4610      	mov	r0, r2
   13cac:	4619      	mov	r1, r3
   13cae:	f004 faa1 	bl	181f4 <__aeabi_d2f>
   13cb2:	4603      	mov	r3, r0
   13cb4:	613b      	str	r3, [r7, #16]
   13cb6:	f240 5378 	movw	r3, #1400	; 0x578
   13cba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13cbe:	681b      	ldr	r3, [r3, #0]
   13cc0:	4618      	mov	r0, r3
   13cc2:	f003 ff61 	bl	17b88 <__aeabi_f2d>
   13cc6:	4604      	mov	r4, r0
   13cc8:	460d      	mov	r5, r1
   13cca:	6938      	ldr	r0, [r7, #16]
   13ccc:	f003 ff5c 	bl	17b88 <__aeabi_f2d>
   13cd0:	4602      	mov	r2, r0
   13cd2:	460b      	mov	r3, r1
   13cd4:	4610      	mov	r0, r2
   13cd6:	4619      	mov	r1, r3
   13cd8:	a3af      	add	r3, pc, #700	; (adr r3, 13f98 <auto_nav+0x1988>)
   13cda:	e9d3 2300 	ldrd	r2, r3, [r3]
   13cde:	f003 fdf5 	bl	178cc <__adddf3>
   13ce2:	4602      	mov	r2, r0
   13ce4:	460b      	mov	r3, r1
   13ce6:	4610      	mov	r0, r2
   13ce8:	4619      	mov	r1, r3
   13cea:	f002 f871 	bl	15dd0 <pp_sin>
   13cee:	4602      	mov	r2, r0
   13cf0:	460b      	mov	r3, r1
   13cf2:	4610      	mov	r0, r2
   13cf4:	4619      	mov	r1, r3
   13cf6:	a3aa      	add	r3, pc, #680	; (adr r3, 13fa0 <auto_nav+0x1990>)
   13cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
   13cfc:	f003 ff98 	bl	17c30 <__aeabi_dmul>
   13d00:	4602      	mov	r2, r0
   13d02:	460b      	mov	r3, r1
   13d04:	4620      	mov	r0, r4
   13d06:	4629      	mov	r1, r5
   13d08:	f003 fde0 	bl	178cc <__adddf3>
   13d0c:	4602      	mov	r2, r0
   13d0e:	460b      	mov	r3, r1
   13d10:	4610      	mov	r0, r2
   13d12:	4619      	mov	r1, r3
   13d14:	f004 fa6e 	bl	181f4 <__aeabi_d2f>
   13d18:	4606      	mov	r6, r0
   13d1a:	f240 5378 	movw	r3, #1400	; 0x578
   13d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d22:	685b      	ldr	r3, [r3, #4]
   13d24:	4618      	mov	r0, r3
   13d26:	f003 ff2f 	bl	17b88 <__aeabi_f2d>
   13d2a:	4604      	mov	r4, r0
   13d2c:	460d      	mov	r5, r1
   13d2e:	6938      	ldr	r0, [r7, #16]
   13d30:	f003 ff2a 	bl	17b88 <__aeabi_f2d>
   13d34:	4602      	mov	r2, r0
   13d36:	460b      	mov	r3, r1
   13d38:	4610      	mov	r0, r2
   13d3a:	4619      	mov	r1, r3
   13d3c:	f002 f848 	bl	15dd0 <pp_sin>
   13d40:	4602      	mov	r2, r0
   13d42:	460b      	mov	r3, r1
   13d44:	4610      	mov	r0, r2
   13d46:	4619      	mov	r1, r3
   13d48:	a395      	add	r3, pc, #596	; (adr r3, 13fa0 <auto_nav+0x1990>)
   13d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   13d4e:	f003 ff6f 	bl	17c30 <__aeabi_dmul>
   13d52:	4602      	mov	r2, r0
   13d54:	460b      	mov	r3, r1
   13d56:	4620      	mov	r0, r4
   13d58:	4629      	mov	r1, r5
   13d5a:	f003 fdb7 	bl	178cc <__adddf3>
   13d5e:	4602      	mov	r2, r0
   13d60:	460b      	mov	r3, r1
   13d62:	4610      	mov	r0, r2
   13d64:	4619      	mov	r1, r3
   13d66:	f004 fa45 	bl	181f4 <__aeabi_d2f>
   13d6a:	4603      	mov	r3, r0
   13d6c:	4630      	mov	r0, r6
   13d6e:	4619      	mov	r1, r3
   13d70:	f000 fe12 	bl	14998 <fly_to_xy>
   13d74:	6938      	ldr	r0, [r7, #16]
   13d76:	f003 ff07 	bl	17b88 <__aeabi_f2d>
   13d7a:	4602      	mov	r2, r0
   13d7c:	460b      	mov	r3, r1
   13d7e:	a186      	add	r1, pc, #536	; (adr r1, 13f98 <auto_nav+0x1988>)
   13d80:	e9d1 0100 	ldrd	r0, r1, [r1]
   13d84:	f003 fda0 	bl	178c8 <__aeabi_dsub>
   13d88:	4602      	mov	r2, r0
   13d8a:	460b      	mov	r3, r1
   13d8c:	4610      	mov	r0, r2
   13d8e:	4619      	mov	r1, r3
   13d90:	a385      	add	r3, pc, #532	; (adr r3, 13fa8 <auto_nav+0x1998>)
   13d92:	e9d3 2300 	ldrd	r2, r3, [r3]
   13d96:	f004 f875 	bl	17e84 <__aeabi_ddiv>
   13d9a:	4602      	mov	r2, r0
   13d9c:	460b      	mov	r3, r1
   13d9e:	4610      	mov	r0, r2
   13da0:	4619      	mov	r1, r3
   13da2:	f04f 0200 	mov.w	r2, #0
   13da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13daa:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13dae:	f003 ff3f 	bl	17c30 <__aeabi_dmul>
   13db2:	4602      	mov	r2, r0
   13db4:	460b      	mov	r3, r1
   13db6:	4610      	mov	r0, r2
   13db8:	4619      	mov	r1, r3
   13dba:	f004 fa1b 	bl	181f4 <__aeabi_d2f>
   13dbe:	4602      	mov	r2, r0
   13dc0:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13dc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13dc8:	601a      	str	r2, [r3, #0]
   13dca:	e012      	b.n	13df2 <auto_nav+0x17e2>
   13dcc:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13dd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13dd4:	681b      	ldr	r3, [r3, #0]
   13dd6:	4618      	mov	r0, r3
   13dd8:	f04f 0100 	mov.w	r1, #0
   13ddc:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13de0:	f004 fa5e 	bl	182a0 <__addsf3>
   13de4:	4603      	mov	r3, r0
   13de6:	461a      	mov	r2, r3
   13de8:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13dec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13df0:	601a      	str	r2, [r3, #0]
   13df2:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13df6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13dfa:	681b      	ldr	r3, [r3, #0]
   13dfc:	4618      	mov	r0, r3
   13dfe:	f04f 0100 	mov.w	r1, #0
   13e02:	f004 fcf3 	bl	187ec <__aeabi_fcmplt>
   13e06:	4603      	mov	r3, r0
   13e08:	2b00      	cmp	r3, #0
   13e0a:	d1df      	bne.n	13dcc <auto_nav+0x17bc>
   13e0c:	e012      	b.n	13e34 <auto_nav+0x1824>
   13e0e:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13e12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e16:	681b      	ldr	r3, [r3, #0]
   13e18:	4618      	mov	r0, r3
   13e1a:	f04f 0100 	mov.w	r1, #0
   13e1e:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13e22:	f004 fa3b 	bl	1829c <__aeabi_fsub>
   13e26:	4603      	mov	r3, r0
   13e28:	461a      	mov	r2, r3
   13e2a:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13e2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e32:	601a      	str	r2, [r3, #0]
   13e34:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13e38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e3c:	681b      	ldr	r3, [r3, #0]
   13e3e:	4618      	mov	r0, r3
   13e40:	f04f 0100 	mov.w	r1, #0
   13e44:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13e48:	f004 fce4 	bl	18814 <__aeabi_fcmpge>
   13e4c:	4603      	mov	r3, r0
   13e4e:	2b00      	cmp	r3, #0
   13e50:	d1dd      	bne.n	13e0e <auto_nav+0x17fe>
        return;
   13e52:	f000 bcaf 	b.w	147b4 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   13e56:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13e5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e5e:	781b      	ldrb	r3, [r3, #0]
   13e60:	2b01      	cmp	r3, #1
   13e62:	f040 84a7 	bne.w	147b4 <auto_nav+0x21a4>
    {
        nav_stage =1;
   13e66:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13e6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e6e:	2201      	movs	r2, #1
   13e70:	701a      	strb	r2, [r3, #0]
        NextBlock()
   13e72:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13e76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e7a:	781b      	ldrb	r3, [r3, #0]
   13e7c:	3301      	adds	r3, #1
   13e7e:	b2da      	uxtb	r2, r3
   13e80:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13e84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e88:	701a      	strb	r2, [r3, #0]
   13e8a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13e8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e92:	2200      	movs	r2, #0
   13e94:	701a      	strb	r2, [r3, #0]
   13e96:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13e9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e9e:	2200      	movs	r2, #0
   13ea0:	801a      	strh	r2, [r3, #0]
   13ea2:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13ea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13eaa:	681a      	ldr	r2, [r3, #0]
   13eac:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13eb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13eb4:	601a      	str	r2, [r3, #0]
   13eb6:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13eba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ebe:	681a      	ldr	r2, [r3, #0]
   13ec0:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13ec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ec8:	601a      	str	r2, [r3, #0]
   13eca:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13ece:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ed2:	2200      	movs	r2, #0
   13ed4:	801a      	strh	r2, [r3, #0]
   13ed6:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13eda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ede:	f04f 0200 	mov.w	r2, #0
   13ee2:	601a      	str	r2, [r3, #0]
   13ee4:	f000 bc66 	b.w	147b4 <auto_nav+0x21a4>
    }
    else {}
}
else if (nav_block == 5)
   13ee8:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13eec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ef0:	781b      	ldrb	r3, [r3, #0]
   13ef2:	2b05      	cmp	r3, #5
   13ef4:	f040 845e 	bne.w	147b4 <auto_nav+0x21a4>
{
    nav_block = 5;
   13ef8:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13efc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f00:	2205      	movs	r2, #5
   13f02:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(1) }
   13f04:	f24c 5330 	movw	r3, #50480	; 0xc530
   13f08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f0c:	781b      	ldrb	r3, [r3, #0]
   13f0e:	2b00      	cmp	r3, #0
   13f10:	d007      	beq.n	13f22 <auto_nav+0x1912>
   13f12:	f24c 5330 	movw	r3, #50480	; 0xc530
   13f16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f1a:	2200      	movs	r2, #0
   13f1c:	701a      	strb	r2, [r3, #0]
   13f1e:	2301      	movs	r3, #1
   13f20:	e000      	b.n	13f24 <auto_nav+0x1914>
   13f22:	2300      	movs	r3, #0
   13f24:	2b00      	cmp	r3, #0
   13f26:	d043      	beq.n	13fb0 <auto_nav+0x19a0>
   13f28:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13f2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f30:	2201      	movs	r2, #1
   13f32:	701a      	strb	r2, [r3, #0]
   13f34:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13f38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f3c:	2200      	movs	r2, #0
   13f3e:	701a      	strb	r2, [r3, #0]
   13f40:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13f44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f48:	2200      	movs	r2, #0
   13f4a:	801a      	strh	r2, [r3, #0]
   13f4c:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13f50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f54:	681a      	ldr	r2, [r3, #0]
   13f56:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13f5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f5e:	601a      	str	r2, [r3, #0]
   13f60:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13f64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f68:	681a      	ldr	r2, [r3, #0]
   13f6a:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13f6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f72:	601a      	str	r2, [r3, #0]
   13f74:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13f78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f7c:	2200      	movs	r2, #0
   13f7e:	801a      	strh	r2, [r3, #0]
   13f80:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13f84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f88:	f04f 0200 	mov.w	r2, #0
   13f8c:	601a      	str	r2, [r3, #0]
   13f8e:	f000 bc11 	b.w	147b4 <auto_nav+0x21a4>
   13f92:	bf00      	nop
   13f94:	f3af 8000 	nop.w
   13f98:	54442d18 	.word	0x54442d18
   13f9c:	3ff921fb 	.word	0x3ff921fb
   13fa0:	00000000 	.word	0x00000000
   13fa4:	4062c000 	.word	0x4062c000
   13fa8:	54442d18 	.word	0x54442d18
   13fac:	400921fb 	.word	0x400921fb
    if(nav_stage == 0) {
   13fb0:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13fb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fb8:	781b      	ldrb	r3, [r3, #0]
   13fba:	2b00      	cmp	r3, #0
   13fbc:	d133      	bne.n	14026 <auto_nav+0x1a16>
       Label(while_7) 
       nav_stage = 0;
   13fbe:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13fc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fc6:	2200      	movs	r2, #0
   13fc8:	701a      	strb	r2, [r3, #0]
      if (! (TRUE)) Goto(endwhile_8) else NextStage();}
   13fca:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13fce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fd2:	781b      	ldrb	r3, [r3, #0]
   13fd4:	3301      	adds	r3, #1
   13fd6:	b2da      	uxtb	r2, r3
   13fd8:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13fdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fe0:	701a      	strb	r2, [r3, #0]
   13fe2:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13fe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fea:	681a      	ldr	r2, [r3, #0]
   13fec:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13ff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ff4:	601a      	str	r2, [r3, #0]
   13ff6:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13ffa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ffe:	681a      	ldr	r2, [r3, #0]
   14000:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   14004:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14008:	601a      	str	r2, [r3, #0]
   1400a:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   1400e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14012:	2200      	movs	r2, #0
   14014:	801a      	strh	r2, [r3, #0]
   14016:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   1401a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1401e:	f04f 0200 	mov.w	r2, #0
   14022:	601a      	str	r2, [r3, #0]
   14024:	e3c6      	b.n	147b4 <auto_nav+0x21a4>
     
    else if (nav_stage == 1)
   14026:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1402a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1402e:	781b      	ldrb	r3, [r3, #0]
   14030:	2b01      	cmp	r3, #1
   14032:	f040 81b5 	bne.w	143a0 <auto_nav+0x1d90>
    {
        nav_stage =1;
   14036:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1403a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1403e:	2201      	movs	r2, #1
   14040:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   14042:	f24c 532f 	movw	r3, #50479	; 0xc52f
   14046:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1404a:	2200      	movs	r2, #0
   1404c:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   1404e:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14052:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14056:	f04f 0200 	mov.w	r2, #0
   1405a:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1405c:	f24c 532d 	movw	r3, #50477	; 0xc52d
   14060:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14064:	2203      	movs	r2, #3
   14066:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[1].a;
   14068:	f240 5378 	movw	r3, #1400	; 0x578
   1406c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14070:	695a      	ldr	r2, [r3, #20]
   14072:	f240 5374 	movw	r3, #1396	; 0x574
   14076:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1407a:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   1407c:	f64c 0394 	movw	r3, #51348	; 0xc894
   14080:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14084:	f04f 0200 	mov.w	r2, #0
   14088:	601a      	str	r2, [r3, #0]
        Circle(1, 100);
   1408a:	f64c 3300 	movw	r3, #51968	; 0xcb00
   1408e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14092:	681a      	ldr	r2, [r3, #0]
   14094:	f240 5378 	movw	r3, #1400	; 0x578
   14098:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1409c:	691b      	ldr	r3, [r3, #16]
   1409e:	4610      	mov	r0, r2
   140a0:	4619      	mov	r1, r3
   140a2:	f004 f8fb 	bl	1829c <__aeabi_fsub>
   140a6:	4603      	mov	r3, r0
   140a8:	4618      	mov	r0, r3
   140aa:	f003 fd6d 	bl	17b88 <__aeabi_f2d>
   140ae:	4604      	mov	r4, r0
   140b0:	460d      	mov	r5, r1
   140b2:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   140b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140ba:	681a      	ldr	r2, [r3, #0]
   140bc:	f240 5378 	movw	r3, #1400	; 0x578
   140c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140c4:	68db      	ldr	r3, [r3, #12]
   140c6:	4610      	mov	r0, r2
   140c8:	4619      	mov	r1, r3
   140ca:	f004 f8e7 	bl	1829c <__aeabi_fsub>
   140ce:	4603      	mov	r3, r0
   140d0:	4618      	mov	r0, r3
   140d2:	f003 fd59 	bl	17b88 <__aeabi_f2d>
   140d6:	4602      	mov	r2, r0
   140d8:	460b      	mov	r3, r1
   140da:	4620      	mov	r0, r4
   140dc:	4629      	mov	r1, r5
   140de:	f001 fdb7 	bl	15c50 <pp_atan2>
   140e2:	4602      	mov	r2, r0
   140e4:	460b      	mov	r3, r1
   140e6:	4610      	mov	r0, r2
   140e8:	4619      	mov	r1, r3
   140ea:	f004 f883 	bl	181f4 <__aeabi_d2f>
   140ee:	4603      	mov	r3, r0
   140f0:	60fb      	str	r3, [r7, #12]
   140f2:	68f8      	ldr	r0, [r7, #12]
   140f4:	f003 fd48 	bl	17b88 <__aeabi_f2d>
   140f8:	4604      	mov	r4, r0
   140fa:	460d      	mov	r5, r1
   140fc:	f64c 3334 	movw	r3, #52020	; 0xcb34
   14100:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14104:	681b      	ldr	r3, [r3, #0]
   14106:	4618      	mov	r0, r3
   14108:	f04f 0100 	mov.w	r1, #0
   1410c:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   14110:	f004 f9ce 	bl	184b0 <__aeabi_fmul>
   14114:	4603      	mov	r3, r0
   14116:	4618      	mov	r0, r3
   14118:	f003 fd36 	bl	17b88 <__aeabi_f2d>
   1411c:	4602      	mov	r2, r0
   1411e:	460b      	mov	r3, r1
   14120:	f04f 0000 	mov.w	r0, #0
   14124:	f04f 0100 	mov.w	r1, #0
   14128:	f2c4 0114 	movt	r1, #16404	; 0x4014
   1412c:	f003 feaa 	bl	17e84 <__aeabi_ddiv>
   14130:	4602      	mov	r2, r0
   14132:	460b      	mov	r3, r1
   14134:	4620      	mov	r0, r4
   14136:	4629      	mov	r1, r5
   14138:	f003 fbc8 	bl	178cc <__adddf3>
   1413c:	4602      	mov	r2, r0
   1413e:	460b      	mov	r3, r1
   14140:	4610      	mov	r0, r2
   14142:	4619      	mov	r1, r3
   14144:	f004 f856 	bl	181f4 <__aeabi_d2f>
   14148:	4603      	mov	r3, r0
   1414a:	60bb      	str	r3, [r7, #8]
   1414c:	f240 5378 	movw	r3, #1400	; 0x578
   14150:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14154:	68db      	ldr	r3, [r3, #12]
   14156:	4618      	mov	r0, r3
   14158:	f003 fd16 	bl	17b88 <__aeabi_f2d>
   1415c:	4604      	mov	r4, r0
   1415e:	460d      	mov	r5, r1
   14160:	68b8      	ldr	r0, [r7, #8]
   14162:	f003 fd11 	bl	17b88 <__aeabi_f2d>
   14166:	4602      	mov	r2, r0
   14168:	460b      	mov	r3, r1
   1416a:	4610      	mov	r0, r2
   1416c:	4619      	mov	r1, r3
   1416e:	a388      	add	r3, pc, #544	; (adr r3, 14390 <auto_nav+0x1d80>)
   14170:	e9d3 2300 	ldrd	r2, r3, [r3]
   14174:	f003 fbaa 	bl	178cc <__adddf3>
   14178:	4602      	mov	r2, r0
   1417a:	460b      	mov	r3, r1
   1417c:	4610      	mov	r0, r2
   1417e:	4619      	mov	r1, r3
   14180:	f001 fe26 	bl	15dd0 <pp_sin>
   14184:	4602      	mov	r2, r0
   14186:	460b      	mov	r3, r1
   14188:	4610      	mov	r0, r2
   1418a:	4619      	mov	r1, r3
   1418c:	f04f 0200 	mov.w	r2, #0
   14190:	f04f 0300 	mov.w	r3, #0
   14194:	f2c4 0359 	movt	r3, #16473	; 0x4059
   14198:	f003 fd4a 	bl	17c30 <__aeabi_dmul>
   1419c:	4602      	mov	r2, r0
   1419e:	460b      	mov	r3, r1
   141a0:	4620      	mov	r0, r4
   141a2:	4629      	mov	r1, r5
   141a4:	f003 fb92 	bl	178cc <__adddf3>
   141a8:	4602      	mov	r2, r0
   141aa:	460b      	mov	r3, r1
   141ac:	4610      	mov	r0, r2
   141ae:	4619      	mov	r1, r3
   141b0:	f004 f820 	bl	181f4 <__aeabi_d2f>
   141b4:	4606      	mov	r6, r0
   141b6:	f240 5378 	movw	r3, #1400	; 0x578
   141ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141be:	691b      	ldr	r3, [r3, #16]
   141c0:	4618      	mov	r0, r3
   141c2:	f003 fce1 	bl	17b88 <__aeabi_f2d>
   141c6:	4604      	mov	r4, r0
   141c8:	460d      	mov	r5, r1
   141ca:	68b8      	ldr	r0, [r7, #8]
   141cc:	f003 fcdc 	bl	17b88 <__aeabi_f2d>
   141d0:	4602      	mov	r2, r0
   141d2:	460b      	mov	r3, r1
   141d4:	4610      	mov	r0, r2
   141d6:	4619      	mov	r1, r3
   141d8:	f001 fdfa 	bl	15dd0 <pp_sin>
   141dc:	4602      	mov	r2, r0
   141de:	460b      	mov	r3, r1
   141e0:	4610      	mov	r0, r2
   141e2:	4619      	mov	r1, r3
   141e4:	f04f 0200 	mov.w	r2, #0
   141e8:	f04f 0300 	mov.w	r3, #0
   141ec:	f2c4 0359 	movt	r3, #16473	; 0x4059
   141f0:	f003 fd1e 	bl	17c30 <__aeabi_dmul>
   141f4:	4602      	mov	r2, r0
   141f6:	460b      	mov	r3, r1
   141f8:	4620      	mov	r0, r4
   141fa:	4629      	mov	r1, r5
   141fc:	f003 fb66 	bl	178cc <__adddf3>
   14200:	4602      	mov	r2, r0
   14202:	460b      	mov	r3, r1
   14204:	4610      	mov	r0, r2
   14206:	4619      	mov	r1, r3
   14208:	f003 fff4 	bl	181f4 <__aeabi_d2f>
   1420c:	4603      	mov	r3, r0
   1420e:	4630      	mov	r0, r6
   14210:	4619      	mov	r1, r3
   14212:	f000 fbc1 	bl	14998 <fly_to_xy>
   14216:	68b8      	ldr	r0, [r7, #8]
   14218:	f003 fcb6 	bl	17b88 <__aeabi_f2d>
   1421c:	4602      	mov	r2, r0
   1421e:	460b      	mov	r3, r1
   14220:	a15b      	add	r1, pc, #364	; (adr r1, 14390 <auto_nav+0x1d80>)
   14222:	e9d1 0100 	ldrd	r0, r1, [r1]
   14226:	f003 fb4f 	bl	178c8 <__aeabi_dsub>
   1422a:	4602      	mov	r2, r0
   1422c:	460b      	mov	r3, r1
   1422e:	4610      	mov	r0, r2
   14230:	4619      	mov	r1, r3
   14232:	a359      	add	r3, pc, #356	; (adr r3, 14398 <auto_nav+0x1d88>)
   14234:	e9d3 2300 	ldrd	r2, r3, [r3]
   14238:	f003 fe24 	bl	17e84 <__aeabi_ddiv>
   1423c:	4602      	mov	r2, r0
   1423e:	460b      	mov	r3, r1
   14240:	4610      	mov	r0, r2
   14242:	4619      	mov	r1, r3
   14244:	f04f 0200 	mov.w	r2, #0
   14248:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1424c:	f2c4 0366 	movt	r3, #16486	; 0x4066
   14250:	f003 fcee 	bl	17c30 <__aeabi_dmul>
   14254:	4602      	mov	r2, r0
   14256:	460b      	mov	r3, r1
   14258:	4610      	mov	r0, r2
   1425a:	4619      	mov	r1, r3
   1425c:	f003 ffca 	bl	181f4 <__aeabi_d2f>
   14260:	4602      	mov	r2, r0
   14262:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14266:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1426a:	601a      	str	r2, [r3, #0]
   1426c:	e012      	b.n	14294 <auto_nav+0x1c84>
   1426e:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14272:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14276:	681b      	ldr	r3, [r3, #0]
   14278:	4618      	mov	r0, r3
   1427a:	f04f 0100 	mov.w	r1, #0
   1427e:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14282:	f004 f80d 	bl	182a0 <__addsf3>
   14286:	4603      	mov	r3, r0
   14288:	461a      	mov	r2, r3
   1428a:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   1428e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14292:	601a      	str	r2, [r3, #0]
   14294:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14298:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1429c:	681b      	ldr	r3, [r3, #0]
   1429e:	4618      	mov	r0, r3
   142a0:	f04f 0100 	mov.w	r1, #0
   142a4:	f004 faa2 	bl	187ec <__aeabi_fcmplt>
   142a8:	4603      	mov	r3, r0
   142aa:	2b00      	cmp	r3, #0
   142ac:	d1df      	bne.n	1426e <auto_nav+0x1c5e>
   142ae:	e012      	b.n	142d6 <auto_nav+0x1cc6>
   142b0:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   142b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142b8:	681b      	ldr	r3, [r3, #0]
   142ba:	4618      	mov	r0, r3
   142bc:	f04f 0100 	mov.w	r1, #0
   142c0:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   142c4:	f003 ffea 	bl	1829c <__aeabi_fsub>
   142c8:	4603      	mov	r3, r0
   142ca:	461a      	mov	r2, r3
   142cc:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   142d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142d4:	601a      	str	r2, [r3, #0]
   142d6:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   142da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142de:	681b      	ldr	r3, [r3, #0]
   142e0:	4618      	mov	r0, r3
   142e2:	f04f 0100 	mov.w	r1, #0
   142e6:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   142ea:	f004 fa93 	bl	18814 <__aeabi_fcmpge>
   142ee:	4603      	mov	r3, r0
   142f0:	2b00      	cmp	r3, #0
   142f2:	d1dd      	bne.n	142b0 <auto_nav+0x1ca0>
        if (Qdr(0)) NextStage();
   142f4:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   142f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142fc:	681b      	ldr	r3, [r3, #0]
   142fe:	4618      	mov	r0, r3
   14300:	f04f 0100 	mov.w	r1, #0
   14304:	f004 fa90 	bl	18828 <__aeabi_fcmpgt>
   14308:	4603      	mov	r3, r0
   1430a:	2b00      	cmp	r3, #0
   1430c:	d100      	bne.n	14310 <auto_nav+0x1d00>
        return;
   1430e:	e251      	b.n	147b4 <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   14310:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14314:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14318:	681b      	ldr	r3, [r3, #0]
   1431a:	4618      	mov	r0, r3
   1431c:	f04f 0100 	mov.w	r1, #0
   14320:	f2c4 1120 	movt	r1, #16672	; 0x4120
   14324:	f004 fa62 	bl	187ec <__aeabi_fcmplt>
   14328:	4603      	mov	r3, r0
   1432a:	2b00      	cmp	r3, #0
   1432c:	d100      	bne.n	14330 <auto_nav+0x1d20>
        return;
   1432e:	e241      	b.n	147b4 <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   14330:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14334:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14338:	781b      	ldrb	r3, [r3, #0]
   1433a:	3301      	adds	r3, #1
   1433c:	b2da      	uxtb	r2, r3
   1433e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14342:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14346:	701a      	strb	r2, [r3, #0]
   14348:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1434c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14350:	681a      	ldr	r2, [r3, #0]
   14352:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   14356:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1435a:	601a      	str	r2, [r3, #0]
   1435c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14360:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14364:	681a      	ldr	r2, [r3, #0]
   14366:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   1436a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1436e:	601a      	str	r2, [r3, #0]
   14370:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   14374:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14378:	2200      	movs	r2, #0
   1437a:	801a      	strh	r2, [r3, #0]
   1437c:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   14380:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14384:	f04f 0200 	mov.w	r2, #0
   14388:	601a      	str	r2, [r3, #0]
   1438a:	e213      	b.n	147b4 <auto_nav+0x21a4>
   1438c:	f3af 8000 	nop.w
   14390:	54442d18 	.word	0x54442d18
   14394:	3ff921fb 	.word	0x3ff921fb
   14398:	54442d18 	.word	0x54442d18
   1439c:	400921fb 	.word	0x400921fb
        return;
    }
    else if (nav_stage == 2)
   143a0:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   143a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143a8:	781b      	ldrb	r3, [r3, #0]
   143aa:	2b02      	cmp	r3, #2
   143ac:	f040 81ad 	bne.w	1470a <auto_nav+0x20fa>
    {
         nav_stage = 2;
   143b0:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   143b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143b8:	2202      	movs	r2, #2
   143ba:	701a      	strb	r2, [r3, #0]
          auto_pitch = FALSE;
   143bc:	f24c 532f 	movw	r3, #50479	; 0xc52f
   143c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143c4:	2200      	movs	r2, #0
   143c6:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   143c8:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   143cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143d0:	f04f 0200 	mov.w	r2, #0
   143d4:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
   143d6:	f24c 532d 	movw	r3, #50477	; 0xc52d
   143da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143de:	2203      	movs	r2, #3
   143e0:	701a      	strb	r2, [r3, #0]
          desired_altitude = waypoints[4].a;
   143e2:	f240 5378 	movw	r3, #1400	; 0x578
   143e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   143ec:	f240 5374 	movw	r3, #1396	; 0x574
   143f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143f4:	601a      	str	r2, [r3, #0]
          pre_climb = 0.;
   143f6:	f64c 0394 	movw	r3, #51348	; 0xc894
   143fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143fe:	f04f 0200 	mov.w	r2, #0
   14402:	601a      	str	r2, [r3, #0]
          Circle(4, 100);
   14404:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14408:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1440c:	681a      	ldr	r2, [r3, #0]
   1440e:	f240 5378 	movw	r3, #1400	; 0x578
   14412:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   14418:	4610      	mov	r0, r2
   1441a:	4619      	mov	r1, r3
   1441c:	f003 ff3e 	bl	1829c <__aeabi_fsub>
   14420:	4603      	mov	r3, r0
   14422:	4618      	mov	r0, r3
   14424:	f003 fbb0 	bl	17b88 <__aeabi_f2d>
   14428:	4604      	mov	r4, r0
   1442a:	460d      	mov	r5, r1
   1442c:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   14430:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14434:	681a      	ldr	r2, [r3, #0]
   14436:	f240 5378 	movw	r3, #1400	; 0x578
   1443a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1443e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14440:	4610      	mov	r0, r2
   14442:	4619      	mov	r1, r3
   14444:	f003 ff2a 	bl	1829c <__aeabi_fsub>
   14448:	4603      	mov	r3, r0
   1444a:	4618      	mov	r0, r3
   1444c:	f003 fb9c 	bl	17b88 <__aeabi_f2d>
   14450:	4602      	mov	r2, r0
   14452:	460b      	mov	r3, r1
   14454:	4620      	mov	r0, r4
   14456:	4629      	mov	r1, r5
   14458:	f001 fbfa 	bl	15c50 <pp_atan2>
   1445c:	4602      	mov	r2, r0
   1445e:	460b      	mov	r3, r1
   14460:	4610      	mov	r0, r2
   14462:	4619      	mov	r1, r3
   14464:	f003 fec6 	bl	181f4 <__aeabi_d2f>
   14468:	4603      	mov	r3, r0
   1446a:	607b      	str	r3, [r7, #4]
   1446c:	6878      	ldr	r0, [r7, #4]
   1446e:	f003 fb8b 	bl	17b88 <__aeabi_f2d>
   14472:	4604      	mov	r4, r0
   14474:	460d      	mov	r5, r1
   14476:	f64c 3334 	movw	r3, #52020	; 0xcb34
   1447a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1447e:	681b      	ldr	r3, [r3, #0]
   14480:	4618      	mov	r0, r3
   14482:	f04f 0100 	mov.w	r1, #0
   14486:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   1448a:	f004 f811 	bl	184b0 <__aeabi_fmul>
   1448e:	4603      	mov	r3, r0
   14490:	4618      	mov	r0, r3
   14492:	f003 fb79 	bl	17b88 <__aeabi_f2d>
   14496:	4602      	mov	r2, r0
   14498:	460b      	mov	r3, r1
   1449a:	f04f 0000 	mov.w	r0, #0
   1449e:	f04f 0100 	mov.w	r1, #0
   144a2:	f2c4 0114 	movt	r1, #16404	; 0x4014
   144a6:	f003 fced 	bl	17e84 <__aeabi_ddiv>
   144aa:	4602      	mov	r2, r0
   144ac:	460b      	mov	r3, r1
   144ae:	4620      	mov	r0, r4
   144b0:	4629      	mov	r1, r5
   144b2:	f003 fa0b 	bl	178cc <__adddf3>
   144b6:	4602      	mov	r2, r0
   144b8:	460b      	mov	r3, r1
   144ba:	4610      	mov	r0, r2
   144bc:	4619      	mov	r1, r3
   144be:	f003 fe99 	bl	181f4 <__aeabi_d2f>
   144c2:	4603      	mov	r3, r0
   144c4:	603b      	str	r3, [r7, #0]
   144c6:	f240 5378 	movw	r3, #1400	; 0x578
   144ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   144d0:	4618      	mov	r0, r3
   144d2:	f003 fb59 	bl	17b88 <__aeabi_f2d>
   144d6:	4604      	mov	r4, r0
   144d8:	460d      	mov	r5, r1
   144da:	6838      	ldr	r0, [r7, #0]
   144dc:	f003 fb54 	bl	17b88 <__aeabi_f2d>
   144e0:	4602      	mov	r2, r0
   144e2:	460b      	mov	r3, r1
   144e4:	4610      	mov	r0, r2
   144e6:	4619      	mov	r1, r3
   144e8:	a3b5      	add	r3, pc, #724	; (adr r3, 147c0 <auto_nav+0x21b0>)
   144ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   144ee:	f003 f9ed 	bl	178cc <__adddf3>
   144f2:	4602      	mov	r2, r0
   144f4:	460b      	mov	r3, r1
   144f6:	4610      	mov	r0, r2
   144f8:	4619      	mov	r1, r3
   144fa:	f001 fc69 	bl	15dd0 <pp_sin>
   144fe:	4602      	mov	r2, r0
   14500:	460b      	mov	r3, r1
   14502:	4610      	mov	r0, r2
   14504:	4619      	mov	r1, r3
   14506:	f04f 0200 	mov.w	r2, #0
   1450a:	f04f 0300 	mov.w	r3, #0
   1450e:	f2c4 0359 	movt	r3, #16473	; 0x4059
   14512:	f003 fb8d 	bl	17c30 <__aeabi_dmul>
   14516:	4602      	mov	r2, r0
   14518:	460b      	mov	r3, r1
   1451a:	4620      	mov	r0, r4
   1451c:	4629      	mov	r1, r5
   1451e:	f003 f9d5 	bl	178cc <__adddf3>
   14522:	4602      	mov	r2, r0
   14524:	460b      	mov	r3, r1
   14526:	4610      	mov	r0, r2
   14528:	4619      	mov	r1, r3
   1452a:	f003 fe63 	bl	181f4 <__aeabi_d2f>
   1452e:	4606      	mov	r6, r0
   14530:	f240 5378 	movw	r3, #1400	; 0x578
   14534:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1453a:	4618      	mov	r0, r3
   1453c:	f003 fb24 	bl	17b88 <__aeabi_f2d>
   14540:	4604      	mov	r4, r0
   14542:	460d      	mov	r5, r1
   14544:	6838      	ldr	r0, [r7, #0]
   14546:	f003 fb1f 	bl	17b88 <__aeabi_f2d>
   1454a:	4602      	mov	r2, r0
   1454c:	460b      	mov	r3, r1
   1454e:	4610      	mov	r0, r2
   14550:	4619      	mov	r1, r3
   14552:	f001 fc3d 	bl	15dd0 <pp_sin>
   14556:	4602      	mov	r2, r0
   14558:	460b      	mov	r3, r1
   1455a:	4610      	mov	r0, r2
   1455c:	4619      	mov	r1, r3
   1455e:	f04f 0200 	mov.w	r2, #0
   14562:	f04f 0300 	mov.w	r3, #0
   14566:	f2c4 0359 	movt	r3, #16473	; 0x4059
   1456a:	f003 fb61 	bl	17c30 <__aeabi_dmul>
   1456e:	4602      	mov	r2, r0
   14570:	460b      	mov	r3, r1
   14572:	4620      	mov	r0, r4
   14574:	4629      	mov	r1, r5
   14576:	f003 f9a9 	bl	178cc <__adddf3>
   1457a:	4602      	mov	r2, r0
   1457c:	460b      	mov	r3, r1
   1457e:	4610      	mov	r0, r2
   14580:	4619      	mov	r1, r3
   14582:	f003 fe37 	bl	181f4 <__aeabi_d2f>
   14586:	4603      	mov	r3, r0
   14588:	4630      	mov	r0, r6
   1458a:	4619      	mov	r1, r3
   1458c:	f000 fa04 	bl	14998 <fly_to_xy>
   14590:	6838      	ldr	r0, [r7, #0]
   14592:	f003 faf9 	bl	17b88 <__aeabi_f2d>
   14596:	4602      	mov	r2, r0
   14598:	460b      	mov	r3, r1
   1459a:	a189      	add	r1, pc, #548	; (adr r1, 147c0 <auto_nav+0x21b0>)
   1459c:	e9d1 0100 	ldrd	r0, r1, [r1]
   145a0:	f003 f992 	bl	178c8 <__aeabi_dsub>
   145a4:	4602      	mov	r2, r0
   145a6:	460b      	mov	r3, r1
   145a8:	4610      	mov	r0, r2
   145aa:	4619      	mov	r1, r3
   145ac:	a386      	add	r3, pc, #536	; (adr r3, 147c8 <auto_nav+0x21b8>)
   145ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   145b2:	f003 fc67 	bl	17e84 <__aeabi_ddiv>
   145b6:	4602      	mov	r2, r0
   145b8:	460b      	mov	r3, r1
   145ba:	4610      	mov	r0, r2
   145bc:	4619      	mov	r1, r3
   145be:	f04f 0200 	mov.w	r2, #0
   145c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   145c6:	f2c4 0366 	movt	r3, #16486	; 0x4066
   145ca:	f003 fb31 	bl	17c30 <__aeabi_dmul>
   145ce:	4602      	mov	r2, r0
   145d0:	460b      	mov	r3, r1
   145d2:	4610      	mov	r0, r2
   145d4:	4619      	mov	r1, r3
   145d6:	f003 fe0d 	bl	181f4 <__aeabi_d2f>
   145da:	4602      	mov	r2, r0
   145dc:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   145e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145e4:	601a      	str	r2, [r3, #0]
   145e6:	e012      	b.n	1460e <auto_nav+0x1ffe>
   145e8:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   145ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145f0:	681b      	ldr	r3, [r3, #0]
   145f2:	4618      	mov	r0, r3
   145f4:	f04f 0100 	mov.w	r1, #0
   145f8:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   145fc:	f003 fe50 	bl	182a0 <__addsf3>
   14600:	4603      	mov	r3, r0
   14602:	461a      	mov	r2, r3
   14604:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14608:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1460c:	601a      	str	r2, [r3, #0]
   1460e:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14612:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14616:	681b      	ldr	r3, [r3, #0]
   14618:	4618      	mov	r0, r3
   1461a:	f04f 0100 	mov.w	r1, #0
   1461e:	f004 f8e5 	bl	187ec <__aeabi_fcmplt>
   14622:	4603      	mov	r3, r0
   14624:	2b00      	cmp	r3, #0
   14626:	d1df      	bne.n	145e8 <auto_nav+0x1fd8>
   14628:	e012      	b.n	14650 <auto_nav+0x2040>
   1462a:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   1462e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14632:	681b      	ldr	r3, [r3, #0]
   14634:	4618      	mov	r0, r3
   14636:	f04f 0100 	mov.w	r1, #0
   1463a:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1463e:	f003 fe2d 	bl	1829c <__aeabi_fsub>
   14642:	4603      	mov	r3, r0
   14644:	461a      	mov	r2, r3
   14646:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   1464a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1464e:	601a      	str	r2, [r3, #0]
   14650:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14654:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14658:	681b      	ldr	r3, [r3, #0]
   1465a:	4618      	mov	r0, r3
   1465c:	f04f 0100 	mov.w	r1, #0
   14660:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14664:	f004 f8d6 	bl	18814 <__aeabi_fcmpge>
   14668:	4603      	mov	r3, r0
   1466a:	2b00      	cmp	r3, #0
   1466c:	d1dd      	bne.n	1462a <auto_nav+0x201a>
          if (Qdr(180)) NextStage();
   1466e:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14672:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14676:	681b      	ldr	r3, [r3, #0]
   14678:	4618      	mov	r0, r3
   1467a:	f04f 0100 	mov.w	r1, #0
   1467e:	f2c4 3134 	movt	r1, #17204	; 0x4334
   14682:	f004 f8d1 	bl	18828 <__aeabi_fcmpgt>
   14686:	4603      	mov	r3, r0
   14688:	2b00      	cmp	r3, #0
   1468a:	d100      	bne.n	1468e <auto_nav+0x207e>
          return;
   1468c:	e092      	b.n	147b4 <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   1468e:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14692:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14696:	681b      	ldr	r3, [r3, #0]
   14698:	4618      	mov	r0, r3
   1469a:	f04f 0100 	mov.w	r1, #0
   1469e:	f2c4 313e 	movt	r1, #17214	; 0x433e
   146a2:	f004 f8a3 	bl	187ec <__aeabi_fcmplt>
   146a6:	4603      	mov	r3, r0
   146a8:	2b00      	cmp	r3, #0
   146aa:	d100      	bne.n	146ae <auto_nav+0x209e>
          return;
   146ac:	e082      	b.n	147b4 <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   146ae:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   146b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146b6:	781b      	ldrb	r3, [r3, #0]
   146b8:	3301      	adds	r3, #1
   146ba:	b2da      	uxtb	r2, r3
   146bc:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   146c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146c4:	701a      	strb	r2, [r3, #0]
   146c6:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   146ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146ce:	681a      	ldr	r2, [r3, #0]
   146d0:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   146d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146d8:	601a      	str	r2, [r3, #0]
   146da:	f64c 3300 	movw	r3, #51968	; 0xcb00
   146de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146e2:	681a      	ldr	r2, [r3, #0]
   146e4:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   146e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146ec:	601a      	str	r2, [r3, #0]
   146ee:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   146f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146f6:	2200      	movs	r2, #0
   146f8:	801a      	strh	r2, [r3, #0]
   146fa:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   146fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14702:	f04f 0200 	mov.w	r2, #0
   14706:	601a      	str	r2, [r3, #0]
   14708:	e054      	b.n	147b4 <auto_nav+0x21a4>
          return;
    }
    else if (nav_stage == 3) 
   1470a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1470e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14712:	781b      	ldrb	r3, [r3, #0]
   14714:	2b03      	cmp	r3, #3
   14716:	d106      	bne.n	14726 <auto_nav+0x2116>
    {
	  nav_stage = 3;
   14718:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1471c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14720:	2203      	movs	r2, #3
   14722:	701a      	strb	r2, [r3, #0]
          Goto(while_7)
   14724:	e44b      	b.n	13fbe <auto_nav+0x19ae>
    }
    else if (nav_stage == 4)
   14726:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1472a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1472e:	781b      	ldrb	r3, [r3, #0]
   14730:	2b04      	cmp	r3, #4
   14732:	d13f      	bne.n	147b4 <auto_nav+0x21a4>
    {
	Label(endwhile_8)
	nav_stage = 4;
   14734:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14738:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1473c:	2204      	movs	r2, #4
   1473e:	701a      	strb	r2, [r3, #0]
        NextBlock()
   14740:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   14744:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14748:	781b      	ldrb	r3, [r3, #0]
   1474a:	3301      	adds	r3, #1
   1474c:	b2da      	uxtb	r2, r3
   1474e:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   14752:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14756:	701a      	strb	r2, [r3, #0]
   14758:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1475c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14760:	2200      	movs	r2, #0
   14762:	701a      	strb	r2, [r3, #0]
   14764:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   14768:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1476c:	2200      	movs	r2, #0
   1476e:	801a      	strh	r2, [r3, #0]
   14770:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   14774:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14778:	681a      	ldr	r2, [r3, #0]
   1477a:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   1477e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14782:	601a      	str	r2, [r3, #0]
   14784:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14788:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1478c:	681a      	ldr	r2, [r3, #0]
   1478e:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   14792:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14796:	601a      	str	r2, [r3, #0]
   14798:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   1479c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147a0:	2200      	movs	r2, #0
   147a2:	801a      	strh	r2, [r3, #0]
   147a4:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   147a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147ac:	f04f 0200 	mov.w	r2, #0
   147b0:	601a      	str	r2, [r3, #0]
   147b2:	bf00      	nop
    else { }
}
else { }

//#endif
}
   147b4:	372c      	adds	r7, #44	; 0x2c
   147b6:	46bd      	mov	sp, r7
   147b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   147ba:	bf00      	nop
   147bc:	f3af 8000 	nop.w
   147c0:	54442d18 	.word	0x54442d18
   147c4:	3ff921fb 	.word	0x3ff921fb
   147c8:	54442d18 	.word	0x54442d18
   147cc:	400921fb 	.word	0x400921fb

000147d0 <approaching>:
const uint8_t nb_waypoint = NB_WAYPOINT;

struct point waypoints[NB_WAYPOINT+1] = WAYPOINTS;

static float carrot;
static bool_t approaching(uint8_t wp) {
   147d0:	b590      	push	{r4, r7, lr}
   147d2:	b087      	sub	sp, #28
   147d4:	af00      	add	r7, sp, #0
   147d6:	4603      	mov	r3, r0
   147d8:	71fb      	strb	r3, [r7, #7]
  float pw_x = waypoints[wp].x - estimator_x;
   147da:	79f9      	ldrb	r1, [r7, #7]
   147dc:	f240 5278 	movw	r2, #1400	; 0x578
   147e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   147e4:	460b      	mov	r3, r1
   147e6:	005b      	lsls	r3, r3, #1
   147e8:	440b      	add	r3, r1
   147ea:	009b      	lsls	r3, r3, #2
   147ec:	4413      	add	r3, r2
   147ee:	681a      	ldr	r2, [r3, #0]
   147f0:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   147f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147f8:	681b      	ldr	r3, [r3, #0]
   147fa:	4610      	mov	r0, r2
   147fc:	4619      	mov	r1, r3
   147fe:	f003 fd4d 	bl	1829c <__aeabi_fsub>
   14802:	4603      	mov	r3, r0
   14804:	617b      	str	r3, [r7, #20]
  float pw_y = waypoints[wp].y - estimator_y;
   14806:	79f9      	ldrb	r1, [r7, #7]
   14808:	f240 5278 	movw	r2, #1400	; 0x578
   1480c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14810:	460b      	mov	r3, r1
   14812:	005b      	lsls	r3, r3, #1
   14814:	440b      	add	r3, r1
   14816:	009b      	lsls	r3, r3, #2
   14818:	4413      	add	r3, r2
   1481a:	3304      	adds	r3, #4
   1481c:	681a      	ldr	r2, [r3, #0]
   1481e:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14822:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14826:	681b      	ldr	r3, [r3, #0]
   14828:	4610      	mov	r0, r2
   1482a:	4619      	mov	r1, r3
   1482c:	f003 fd36 	bl	1829c <__aeabi_fsub>
   14830:	4603      	mov	r3, r0
   14832:	613b      	str	r3, [r7, #16]
  float scal_prod;//changes for PowerPc Fev-06

  dist2_to_wp = pw_x*pw_x + pw_y *pw_y;
   14834:	6978      	ldr	r0, [r7, #20]
   14836:	6979      	ldr	r1, [r7, #20]
   14838:	f003 fe3a 	bl	184b0 <__aeabi_fmul>
   1483c:	4603      	mov	r3, r0
   1483e:	461c      	mov	r4, r3
   14840:	6938      	ldr	r0, [r7, #16]
   14842:	6939      	ldr	r1, [r7, #16]
   14844:	f003 fe34 	bl	184b0 <__aeabi_fmul>
   14848:	4603      	mov	r3, r0
   1484a:	4620      	mov	r0, r4
   1484c:	4619      	mov	r1, r3
   1484e:	f003 fd27 	bl	182a0 <__addsf3>
   14852:	4603      	mov	r3, r0
   14854:	461a      	mov	r2, r3
   14856:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   1485a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1485e:	601a      	str	r2, [r3, #0]
  carrot = CARROT * estimator_hspeed_mod;
   14860:	f64c 3334 	movw	r3, #52020	; 0xcb34
   14864:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14868:	681b      	ldr	r3, [r3, #0]
   1486a:	4618      	mov	r0, r3
   1486c:	f04f 0100 	mov.w	r1, #0
   14870:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   14874:	f003 fe1c 	bl	184b0 <__aeabi_fmul>
   14878:	4603      	mov	r3, r0
   1487a:	461a      	mov	r2, r3
   1487c:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   14880:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14884:	601a      	str	r2, [r3, #0]
  carrot = (carrot < 40 ? 40 : carrot);
   14886:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   1488a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1488e:	681b      	ldr	r3, [r3, #0]
   14890:	4618      	mov	r0, r3
   14892:	f04f 0100 	mov.w	r1, #0
   14896:	f2c4 2120 	movt	r1, #16928	; 0x4220
   1489a:	f003 ffa7 	bl	187ec <__aeabi_fcmplt>
   1489e:	4603      	mov	r3, r0
   148a0:	2b00      	cmp	r3, #0
   148a2:	d004      	beq.n	148ae <approaching+0xde>
   148a4:	f04f 0200 	mov.w	r2, #0
   148a8:	f2c4 2220 	movt	r2, #16928	; 0x4220
   148ac:	e004      	b.n	148b8 <approaching+0xe8>
   148ae:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   148b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148b6:	681a      	ldr	r2, [r3, #0]
   148b8:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   148bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148c0:	601a      	str	r2, [r3, #0]
  if (dist2_to_wp < carrot*carrot)
   148c2:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   148c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148ca:	681a      	ldr	r2, [r3, #0]
   148cc:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   148d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148d4:	681b      	ldr	r3, [r3, #0]
   148d6:	4610      	mov	r0, r2
   148d8:	4619      	mov	r1, r3
   148da:	f003 fde9 	bl	184b0 <__aeabi_fmul>
   148de:	4603      	mov	r3, r0
   148e0:	461a      	mov	r2, r3
   148e2:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   148e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148ea:	681b      	ldr	r3, [r3, #0]
   148ec:	4610      	mov	r0, r2
   148ee:	4619      	mov	r1, r3
   148f0:	f003 ff9a 	bl	18828 <__aeabi_fcmpgt>
   148f4:	4603      	mov	r3, r0
   148f6:	2b00      	cmp	r3, #0
   148f8:	d001      	beq.n	148fe <approaching+0x12e>
    return TRUE;
   148fa:	2301      	movs	r3, #1
   148fc:	e048      	b.n	14990 <approaching+0x1c0>

  scal_prod = (waypoints[wp].x - last_x) * pw_x + (waypoints[wp].y - last_y) * pw_y;
   148fe:	79f9      	ldrb	r1, [r7, #7]
   14900:	f240 5278 	movw	r2, #1400	; 0x578
   14904:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14908:	460b      	mov	r3, r1
   1490a:	005b      	lsls	r3, r3, #1
   1490c:	440b      	add	r3, r1
   1490e:	009b      	lsls	r3, r3, #2
   14910:	4413      	add	r3, r2
   14912:	681a      	ldr	r2, [r3, #0]
   14914:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   14918:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1491c:	681b      	ldr	r3, [r3, #0]
   1491e:	4610      	mov	r0, r2
   14920:	4619      	mov	r1, r3
   14922:	f003 fcbb 	bl	1829c <__aeabi_fsub>
   14926:	4603      	mov	r3, r0
   14928:	4618      	mov	r0, r3
   1492a:	6979      	ldr	r1, [r7, #20]
   1492c:	f003 fdc0 	bl	184b0 <__aeabi_fmul>
   14930:	4603      	mov	r3, r0
   14932:	461c      	mov	r4, r3
   14934:	79f9      	ldrb	r1, [r7, #7]
   14936:	f240 5278 	movw	r2, #1400	; 0x578
   1493a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1493e:	460b      	mov	r3, r1
   14940:	005b      	lsls	r3, r3, #1
   14942:	440b      	add	r3, r1
   14944:	009b      	lsls	r3, r3, #2
   14946:	4413      	add	r3, r2
   14948:	3304      	adds	r3, #4
   1494a:	681a      	ldr	r2, [r3, #0]
   1494c:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   14950:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14954:	681b      	ldr	r3, [r3, #0]
   14956:	4610      	mov	r0, r2
   14958:	4619      	mov	r1, r3
   1495a:	f003 fc9f 	bl	1829c <__aeabi_fsub>
   1495e:	4603      	mov	r3, r0
   14960:	4618      	mov	r0, r3
   14962:	6939      	ldr	r1, [r7, #16]
   14964:	f003 fda4 	bl	184b0 <__aeabi_fmul>
   14968:	4603      	mov	r3, r0
   1496a:	4620      	mov	r0, r4
   1496c:	4619      	mov	r1, r3
   1496e:	f003 fc97 	bl	182a0 <__addsf3>
   14972:	4603      	mov	r3, r0
   14974:	60fb      	str	r3, [r7, #12]
  
  return (scal_prod < 0);
   14976:	2301      	movs	r3, #1
   14978:	461c      	mov	r4, r3
   1497a:	68f8      	ldr	r0, [r7, #12]
   1497c:	f04f 0100 	mov.w	r1, #0
   14980:	f003 ff34 	bl	187ec <__aeabi_fcmplt>
   14984:	4603      	mov	r3, r0
   14986:	2b00      	cmp	r3, #0
   14988:	d101      	bne.n	1498e <approaching+0x1be>
   1498a:	2300      	movs	r3, #0
   1498c:	461c      	mov	r4, r3
   1498e:	b2e3      	uxtb	r3, r4
}
   14990:	4618      	mov	r0, r3
   14992:	371c      	adds	r7, #28
   14994:	46bd      	mov	sp, r7
   14996:	bd90      	pop	{r4, r7, pc}

00014998 <fly_to_xy>:

static inline void fly_to_xy(float x, float y) 
{ 
   14998:	b5b0      	push	{r4, r5, r7, lr}
   1499a:	b082      	sub	sp, #8
   1499c:	af00      	add	r7, sp, #0
   1499e:	6078      	str	r0, [r7, #4]
   149a0:	6039      	str	r1, [r7, #0]
  desired_x = x;
   149a2:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
   149a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   149aa:	687a      	ldr	r2, [r7, #4]
   149ac:	601a      	str	r2, [r3, #0]
  desired_y = y;
   149ae:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
   149b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   149b6:	683a      	ldr	r2, [r7, #0]
   149b8:	601a      	str	r2, [r3, #0]
  desired_course = M_PI/2.-atan2(y - estimator_y, x - estimator_x);
   149ba:	f64c 3300 	movw	r3, #51968	; 0xcb00
   149be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   149c2:	681b      	ldr	r3, [r3, #0]
   149c4:	6838      	ldr	r0, [r7, #0]
   149c6:	4619      	mov	r1, r3
   149c8:	f003 fc68 	bl	1829c <__aeabi_fsub>
   149cc:	4603      	mov	r3, r0
   149ce:	4618      	mov	r0, r3
   149d0:	f003 f8da 	bl	17b88 <__aeabi_f2d>
   149d4:	4604      	mov	r4, r0
   149d6:	460d      	mov	r5, r1
   149d8:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   149dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   149e0:	681b      	ldr	r3, [r3, #0]
   149e2:	6878      	ldr	r0, [r7, #4]
   149e4:	4619      	mov	r1, r3
   149e6:	f003 fc59 	bl	1829c <__aeabi_fsub>
   149ea:	4603      	mov	r3, r0
   149ec:	4618      	mov	r0, r3
   149ee:	f003 f8cb 	bl	17b88 <__aeabi_f2d>
   149f2:	4602      	mov	r2, r0
   149f4:	460b      	mov	r3, r1
   149f6:	4620      	mov	r0, r4
   149f8:	4629      	mov	r1, r5
   149fa:	f001 f929 	bl	15c50 <pp_atan2>
   149fe:	4602      	mov	r2, r0
   14a00:	460b      	mov	r3, r1
   14a02:	a10b      	add	r1, pc, #44	; (adr r1, 14a30 <fly_to_xy+0x98>)
   14a04:	e9d1 0100 	ldrd	r0, r1, [r1]
   14a08:	f002 ff5e 	bl	178c8 <__aeabi_dsub>
   14a0c:	4602      	mov	r2, r0
   14a0e:	460b      	mov	r3, r1
   14a10:	4610      	mov	r0, r2
   14a12:	4619      	mov	r1, r3
   14a14:	f003 fbee 	bl	181f4 <__aeabi_d2f>
   14a18:	4602      	mov	r2, r0
   14a1a:	f64c 038c 	movw	r3, #51340	; 0xc88c
   14a1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a22:	601a      	str	r2, [r3, #0]
}
   14a24:	3708      	adds	r7, #8
   14a26:	46bd      	mov	sp, r7
   14a28:	bdb0      	pop	{r4, r5, r7, pc}
   14a2a:	bf00      	nop
   14a2c:	f3af 8000 	nop.w
   14a30:	54442d18 	.word	0x54442d18
   14a34:	3ff921fb 	.word	0x3ff921fb

00014a38 <fly_to>:

static void fly_to(uint8_t wp) { 
   14a38:	b580      	push	{r7, lr}
   14a3a:	b082      	sub	sp, #8
   14a3c:	af00      	add	r7, sp, #0
   14a3e:	4603      	mov	r3, r0
   14a40:	71fb      	strb	r3, [r7, #7]
  fly_to_xy(waypoints[wp].x, waypoints[wp].y);
   14a42:	79f9      	ldrb	r1, [r7, #7]
   14a44:	f240 5278 	movw	r2, #1400	; 0x578
   14a48:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a4c:	460b      	mov	r3, r1
   14a4e:	005b      	lsls	r3, r3, #1
   14a50:	440b      	add	r3, r1
   14a52:	009b      	lsls	r3, r3, #2
   14a54:	4413      	add	r3, r2
   14a56:	6818      	ldr	r0, [r3, #0]
   14a58:	79f9      	ldrb	r1, [r7, #7]
   14a5a:	f240 5278 	movw	r2, #1400	; 0x578
   14a5e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a62:	460b      	mov	r3, r1
   14a64:	005b      	lsls	r3, r3, #1
   14a66:	440b      	add	r3, r1
   14a68:	009b      	lsls	r3, r3, #2
   14a6a:	4413      	add	r3, r2
   14a6c:	3304      	adds	r3, #4
   14a6e:	681b      	ldr	r3, [r3, #0]
   14a70:	4619      	mov	r1, r3
   14a72:	f7ff ff91 	bl	14998 <fly_to_xy>
}
   14a76:	3708      	adds	r7, #8
   14a78:	46bd      	mov	sp, r7
   14a7a:	bd80      	pop	{r7, pc}

00014a7c <route_to>:

static float alpha, leg;
static void route_to(uint8_t _last_wp, uint8_t wp) 
{
   14a7c:	b5b0      	push	{r4, r5, r7, lr}
   14a7e:	b088      	sub	sp, #32
   14a80:	af00      	add	r7, sp, #0
   14a82:	4602      	mov	r2, r0
   14a84:	460b      	mov	r3, r1
   14a86:	71fa      	strb	r2, [r7, #7]
   14a88:	71bb      	strb	r3, [r7, #6]
  float last_wp_x = waypoints[_last_wp].x;
   14a8a:	79f9      	ldrb	r1, [r7, #7]
   14a8c:	f240 5278 	movw	r2, #1400	; 0x578
   14a90:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a94:	460b      	mov	r3, r1
   14a96:	005b      	lsls	r3, r3, #1
   14a98:	440b      	add	r3, r1
   14a9a:	009b      	lsls	r3, r3, #2
   14a9c:	4413      	add	r3, r2
   14a9e:	681b      	ldr	r3, [r3, #0]
   14aa0:	61fb      	str	r3, [r7, #28]
  float last_wp_y = waypoints[_last_wp].y;
   14aa2:	79f9      	ldrb	r1, [r7, #7]
   14aa4:	f240 5278 	movw	r2, #1400	; 0x578
   14aa8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14aac:	460b      	mov	r3, r1
   14aae:	005b      	lsls	r3, r3, #1
   14ab0:	440b      	add	r3, r1
   14ab2:	009b      	lsls	r3, r3, #2
   14ab4:	4413      	add	r3, r2
   14ab6:	3304      	adds	r3, #4
   14ab8:	681b      	ldr	r3, [r3, #0]
   14aba:	61bb      	str	r3, [r7, #24]
  float leg_x = waypoints[wp].x - last_wp_x;
   14abc:	79b9      	ldrb	r1, [r7, #6]
   14abe:	f240 5278 	movw	r2, #1400	; 0x578
   14ac2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14ac6:	460b      	mov	r3, r1
   14ac8:	005b      	lsls	r3, r3, #1
   14aca:	440b      	add	r3, r1
   14acc:	009b      	lsls	r3, r3, #2
   14ace:	4413      	add	r3, r2
   14ad0:	681b      	ldr	r3, [r3, #0]
   14ad2:	4618      	mov	r0, r3
   14ad4:	69f9      	ldr	r1, [r7, #28]
   14ad6:	f003 fbe1 	bl	1829c <__aeabi_fsub>
   14ada:	4603      	mov	r3, r0
   14adc:	617b      	str	r3, [r7, #20]
  float leg_y = waypoints[wp].y - last_wp_y;
   14ade:	79b9      	ldrb	r1, [r7, #6]
   14ae0:	f240 5278 	movw	r2, #1400	; 0x578
   14ae4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14ae8:	460b      	mov	r3, r1
   14aea:	005b      	lsls	r3, r3, #1
   14aec:	440b      	add	r3, r1
   14aee:	009b      	lsls	r3, r3, #2
   14af0:	4413      	add	r3, r2
   14af2:	3304      	adds	r3, #4
   14af4:	681b      	ldr	r3, [r3, #0]
   14af6:	4618      	mov	r0, r3
   14af8:	69b9      	ldr	r1, [r7, #24]
   14afa:	f003 fbcf 	bl	1829c <__aeabi_fsub>
   14afe:	4603      	mov	r3, r0
   14b00:	613b      	str	r3, [r7, #16]
  float leg2 = leg_x * leg_x + leg_y * leg_y;
   14b02:	6978      	ldr	r0, [r7, #20]
   14b04:	6979      	ldr	r1, [r7, #20]
   14b06:	f003 fcd3 	bl	184b0 <__aeabi_fmul>
   14b0a:	4603      	mov	r3, r0
   14b0c:	461c      	mov	r4, r3
   14b0e:	6938      	ldr	r0, [r7, #16]
   14b10:	6939      	ldr	r1, [r7, #16]
   14b12:	f003 fccd 	bl	184b0 <__aeabi_fmul>
   14b16:	4603      	mov	r3, r0
   14b18:	4620      	mov	r0, r4
   14b1a:	4619      	mov	r1, r3
   14b1c:	f003 fbc0 	bl	182a0 <__addsf3>
   14b20:	4603      	mov	r3, r0
   14b22:	60fb      	str	r3, [r7, #12]
  alpha = ((estimator_x - last_wp_x) * leg_x + (estimator_y - last_wp_y) * leg_y) / leg2;
   14b24:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   14b28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b2c:	681b      	ldr	r3, [r3, #0]
   14b2e:	4618      	mov	r0, r3
   14b30:	69f9      	ldr	r1, [r7, #28]
   14b32:	f003 fbb3 	bl	1829c <__aeabi_fsub>
   14b36:	4603      	mov	r3, r0
   14b38:	4618      	mov	r0, r3
   14b3a:	6979      	ldr	r1, [r7, #20]
   14b3c:	f003 fcb8 	bl	184b0 <__aeabi_fmul>
   14b40:	4603      	mov	r3, r0
   14b42:	461c      	mov	r4, r3
   14b44:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14b48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b4c:	681b      	ldr	r3, [r3, #0]
   14b4e:	4618      	mov	r0, r3
   14b50:	69b9      	ldr	r1, [r7, #24]
   14b52:	f003 fba3 	bl	1829c <__aeabi_fsub>
   14b56:	4603      	mov	r3, r0
   14b58:	4618      	mov	r0, r3
   14b5a:	6939      	ldr	r1, [r7, #16]
   14b5c:	f003 fca8 	bl	184b0 <__aeabi_fmul>
   14b60:	4603      	mov	r3, r0
   14b62:	4620      	mov	r0, r4
   14b64:	4619      	mov	r1, r3
   14b66:	f003 fb9b 	bl	182a0 <__addsf3>
   14b6a:	4603      	mov	r3, r0
   14b6c:	4618      	mov	r0, r3
   14b6e:	68f9      	ldr	r1, [r7, #12]
   14b70:	f003 fd52 	bl	18618 <__aeabi_fdiv>
   14b74:	4603      	mov	r3, r0
   14b76:	461a      	mov	r2, r3
   14b78:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14b7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b80:	601a      	str	r2, [r3, #0]
  alpha = Max(alpha, 0.);
   14b82:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14b86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b8a:	681b      	ldr	r3, [r3, #0]
   14b8c:	4618      	mov	r0, r3
   14b8e:	f04f 0100 	mov.w	r1, #0
   14b92:	f003 fe3f 	bl	18814 <__aeabi_fcmpge>
   14b96:	4603      	mov	r3, r0
   14b98:	2b00      	cmp	r3, #0
   14b9a:	d005      	beq.n	14ba8 <route_to+0x12c>
   14b9c:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14ba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ba4:	681a      	ldr	r2, [r3, #0]
   14ba6:	e001      	b.n	14bac <route_to+0x130>
   14ba8:	f04f 0200 	mov.w	r2, #0
   14bac:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14bb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bb4:	601a      	str	r2, [r3, #0]
  leg = sqrt(leg2);
   14bb6:	68f8      	ldr	r0, [r7, #12]
   14bb8:	f002 ffe6 	bl	17b88 <__aeabi_f2d>
   14bbc:	4602      	mov	r2, r0
   14bbe:	460b      	mov	r3, r1
   14bc0:	4610      	mov	r0, r2
   14bc2:	4619      	mov	r1, r3
   14bc4:	f001 f9f4 	bl	15fb0 <pp_sqrt>
   14bc8:	4602      	mov	r2, r0
   14bca:	460b      	mov	r3, r1
   14bcc:	4610      	mov	r0, r2
   14bce:	4619      	mov	r1, r3
   14bd0:	f003 fb10 	bl	181f4 <__aeabi_d2f>
   14bd4:	4602      	mov	r2, r0
   14bd6:	f64c 03e8 	movw	r3, #51432	; 0xc8e8
   14bda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bde:	601a      	str	r2, [r3, #0]
  alpha += Max(carrot / leg, 0.); /* carrot computed in approaching() */
   14be0:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14be4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14be8:	681b      	ldr	r3, [r3, #0]
   14bea:	4618      	mov	r0, r3
   14bec:	f002 ffcc 	bl	17b88 <__aeabi_f2d>
   14bf0:	4604      	mov	r4, r0
   14bf2:	460d      	mov	r5, r1
   14bf4:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   14bf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bfc:	681a      	ldr	r2, [r3, #0]
   14bfe:	f64c 03e8 	movw	r3, #51432	; 0xc8e8
   14c02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c06:	681b      	ldr	r3, [r3, #0]
   14c08:	4610      	mov	r0, r2
   14c0a:	4619      	mov	r1, r3
   14c0c:	f003 fd04 	bl	18618 <__aeabi_fdiv>
   14c10:	4603      	mov	r3, r0
   14c12:	4618      	mov	r0, r3
   14c14:	f04f 0100 	mov.w	r1, #0
   14c18:	f003 fdfc 	bl	18814 <__aeabi_fcmpge>
   14c1c:	4603      	mov	r3, r0
   14c1e:	2b00      	cmp	r3, #0
   14c20:	d014      	beq.n	14c4c <route_to+0x1d0>
   14c22:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   14c26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c2a:	681a      	ldr	r2, [r3, #0]
   14c2c:	f64c 03e8 	movw	r3, #51432	; 0xc8e8
   14c30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c34:	681b      	ldr	r3, [r3, #0]
   14c36:	4610      	mov	r0, r2
   14c38:	4619      	mov	r1, r3
   14c3a:	f003 fced 	bl	18618 <__aeabi_fdiv>
   14c3e:	4603      	mov	r3, r0
   14c40:	4618      	mov	r0, r3
   14c42:	f002 ffa1 	bl	17b88 <__aeabi_f2d>
   14c46:	4602      	mov	r2, r0
   14c48:	460b      	mov	r3, r1
   14c4a:	e003      	b.n	14c54 <route_to+0x1d8>
   14c4c:	f04f 0200 	mov.w	r2, #0
   14c50:	f04f 0300 	mov.w	r3, #0
   14c54:	4620      	mov	r0, r4
   14c56:	4629      	mov	r1, r5
   14c58:	f002 fe38 	bl	178cc <__adddf3>
   14c5c:	4602      	mov	r2, r0
   14c5e:	460b      	mov	r3, r1
   14c60:	4610      	mov	r0, r2
   14c62:	4619      	mov	r1, r3
   14c64:	f003 fac6 	bl	181f4 <__aeabi_d2f>
   14c68:	4602      	mov	r2, r0
   14c6a:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14c6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c72:	601a      	str	r2, [r3, #0]
  alpha = Min(1., alpha);
   14c74:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14c78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c7c:	681b      	ldr	r3, [r3, #0]
   14c7e:	4618      	mov	r0, r3
   14c80:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   14c84:	f003 fdc6 	bl	18814 <__aeabi_fcmpge>
   14c88:	4603      	mov	r3, r0
   14c8a:	2b00      	cmp	r3, #0
   14c8c:	d002      	beq.n	14c94 <route_to+0x218>
   14c8e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   14c92:	e004      	b.n	14c9e <route_to+0x222>
   14c94:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14c98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c9c:	681a      	ldr	r2, [r3, #0]
   14c9e:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14ca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ca6:	601a      	str	r2, [r3, #0]
  fly_to_xy(last_wp_x + alpha*leg_x, last_wp_y + alpha*leg_y);
   14ca8:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14cac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cb0:	681b      	ldr	r3, [r3, #0]
   14cb2:	4618      	mov	r0, r3
   14cb4:	6979      	ldr	r1, [r7, #20]
   14cb6:	f003 fbfb 	bl	184b0 <__aeabi_fmul>
   14cba:	4603      	mov	r3, r0
   14cbc:	4618      	mov	r0, r3
   14cbe:	69f9      	ldr	r1, [r7, #28]
   14cc0:	f003 faee 	bl	182a0 <__addsf3>
   14cc4:	4603      	mov	r3, r0
   14cc6:	461c      	mov	r4, r3
   14cc8:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14ccc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cd0:	681b      	ldr	r3, [r3, #0]
   14cd2:	4618      	mov	r0, r3
   14cd4:	6939      	ldr	r1, [r7, #16]
   14cd6:	f003 fbeb 	bl	184b0 <__aeabi_fmul>
   14cda:	4603      	mov	r3, r0
   14cdc:	4618      	mov	r0, r3
   14cde:	69b9      	ldr	r1, [r7, #24]
   14ce0:	f003 fade 	bl	182a0 <__addsf3>
   14ce4:	4603      	mov	r3, r0
   14ce6:	4620      	mov	r0, r4
   14ce8:	4619      	mov	r1, r3
   14cea:	f7ff fe55 	bl	14998 <fly_to_xy>
}
   14cee:	3720      	adds	r7, #32
   14cf0:	46bd      	mov	sp, r7
   14cf2:	bdb0      	pop	{r4, r5, r7, pc}

00014cf4 <compute_dist2_to_home>:
  float last_alt = waypoints[_last_wp].a;
  desired_altitude = last_alt + alpha * (waypoints[wp].a - last_alt);
  pre_climb = NOMINAL_AIRSPEED * (waypoints[wp].a - last_alt) / leg;
}*/

static inline void compute_dist2_to_home(void) {
   14cf4:	b590      	push	{r4, r7, lr}
   14cf6:	b083      	sub	sp, #12
   14cf8:	af00      	add	r7, sp, #0
  float ph_x = waypoints[WP_HOME].x - estimator_x;
   14cfa:	f240 5378 	movw	r3, #1400	; 0x578
   14cfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d02:	681a      	ldr	r2, [r3, #0]
   14d04:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   14d08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d0c:	681b      	ldr	r3, [r3, #0]
   14d0e:	4610      	mov	r0, r2
   14d10:	4619      	mov	r1, r3
   14d12:	f003 fac3 	bl	1829c <__aeabi_fsub>
   14d16:	4603      	mov	r3, r0
   14d18:	607b      	str	r3, [r7, #4]
  float ph_y = waypoints[WP_HOME].y - estimator_y;
   14d1a:	f240 5378 	movw	r3, #1400	; 0x578
   14d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d22:	685a      	ldr	r2, [r3, #4]
   14d24:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14d28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d2c:	681b      	ldr	r3, [r3, #0]
   14d2e:	4610      	mov	r0, r2
   14d30:	4619      	mov	r1, r3
   14d32:	f003 fab3 	bl	1829c <__aeabi_fsub>
   14d36:	4603      	mov	r3, r0
   14d38:	603b      	str	r3, [r7, #0]
  dist2_to_home = ph_x*ph_x + ph_y *ph_y;
   14d3a:	6878      	ldr	r0, [r7, #4]
   14d3c:	6879      	ldr	r1, [r7, #4]
   14d3e:	f003 fbb7 	bl	184b0 <__aeabi_fmul>
   14d42:	4603      	mov	r3, r0
   14d44:	461c      	mov	r4, r3
   14d46:	6838      	ldr	r0, [r7, #0]
   14d48:	6839      	ldr	r1, [r7, #0]
   14d4a:	f003 fbb1 	bl	184b0 <__aeabi_fmul>
   14d4e:	4603      	mov	r3, r0
   14d50:	4620      	mov	r0, r4
   14d52:	4619      	mov	r1, r3
   14d54:	f003 faa4 	bl	182a0 <__addsf3>
   14d58:	4603      	mov	r3, r0
   14d5a:	461a      	mov	r2, r3
   14d5c:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   14d60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d64:	601a      	str	r2, [r3, #0]
  too_far_from_home = dist2_to_home > (MAX_DIST_FROM_HOME*MAX_DIST_FROM_HOME);
   14d66:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   14d6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d6e:	681b      	ldr	r3, [r3, #0]
   14d70:	2201      	movs	r2, #1
   14d72:	4614      	mov	r4, r2
   14d74:	4618      	mov	r0, r3
   14d76:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   14d7a:	f6c4 0174 	movt	r1, #18548	; 0x4874
   14d7e:	f003 fd53 	bl	18828 <__aeabi_fcmpgt>
   14d82:	4603      	mov	r3, r0
   14d84:	2b00      	cmp	r3, #0
   14d86:	d101      	bne.n	14d8c <compute_dist2_to_home+0x98>
   14d88:	2300      	movs	r3, #0
   14d8a:	461c      	mov	r4, r3
   14d8c:	b2e3      	uxtb	r3, r4
   14d8e:	461a      	mov	r2, r3
   14d90:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
   14d94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d98:	701a      	strb	r2, [r3, #0]
}
   14d9a:	370c      	adds	r7, #12
   14d9c:	46bd      	mov	sp, r7
   14d9e:	bd90      	pop	{r4, r7, pc}

00014da0 <nav_home>:

void nav_home(void) {
   14da0:	b580      	push	{r7, lr}
   14da2:	af00      	add	r7, sp, #0
  //Circle(WP_HOME, 50); /* FIXME: radius should be defined elsewhere */
  nav_pitch = 0.; /* Nominal speed */ 
   14da4:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14da8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14dac:	f04f 0200 	mov.w	r2, #0
   14db0:	601a      	str	r2, [r3, #0]
  vertical_mode = VERTICAL_MODE_AUTO_ALT;
   14db2:	f24c 532d 	movw	r3, #50477	; 0xc52d
   14db6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14dba:	2203      	movs	r2, #3
   14dbc:	701a      	strb	r2, [r3, #0]
  desired_altitude = GROUND_ALT+50;
   14dbe:	f240 5374 	movw	r3, #1396	; 0x574
   14dc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dc6:	f04f 0200 	mov.w	r2, #0
   14dca:	f2c4 322f 	movt	r2, #17199	; 0x432f
   14dce:	601a      	str	r2, [r3, #0]
  compute_dist2_to_home();
   14dd0:	f7ff ff90 	bl	14cf4 <compute_dist2_to_home>
  dist2_to_wp = dist2_to_home;
   14dd4:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   14dd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ddc:	681a      	ldr	r2, [r3, #0]
   14dde:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   14de2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14de6:	601a      	str	r2, [r3, #0]
}
   14de8:	bd80      	pop	{r7, pc}
   14dea:	bf00      	nop

00014dec <nav_update>:

void nav_update(void) {
   14dec:	b580      	push	{r7, lr}
   14dee:	af00      	add	r7, sp, #0
  compute_dist2_to_home();
   14df0:	f7ff ff80 	bl	14cf4 <compute_dist2_to_home>

  auto_nav();
   14df4:	f7fd fc0c 	bl	12610 <auto_nav>
}
   14df8:	bd80      	pop	{r7, pc}
   14dfa:	bf00      	nop

00014dfc <nav_init>:


void nav_init(void) {
   14dfc:	b480      	push	{r7}
   14dfe:	af00      	add	r7, sp, #0
  nav_block = 0;
   14e00:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   14e04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e08:	2200      	movs	r2, #0
   14e0a:	701a      	strb	r2, [r3, #0]
  nav_stage = 0;
   14e0c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14e10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e14:	2200      	movs	r2, #0
   14e16:	701a      	strb	r2, [r3, #0]
}
   14e18:	46bd      	mov	sp, r7
   14e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
   14e1e:	4770      	bx	lr

00014e20 <uart0_transmit>:

static uint8_t           tx_head1; /* next free in buf */
static volatile uint8_t  tx_tail1; /* next char to send */
static uint8_t           tx_buf1[ TX_BUF_SIZE ];

void uart0_transmit( unsigned char data ) {
   14e20:	b480      	push	{r7}
   14e22:	b083      	sub	sp, #12
   14e24:	af00      	add	r7, sp, #0
   14e26:	4603      	mov	r3, r0
   14e28:	71fb      	strb	r3, [r7, #7]
  if (UCSR0B & _BV(TXCIE)) {
   14e2a:	f242 030a 	movw	r3, #8202	; 0x200a
   14e2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e32:	781b      	ldrb	r3, [r3, #0]
   14e34:	b2db      	uxtb	r3, r3
   14e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14e3a:	2b00      	cmp	r3, #0
   14e3c:	d028      	beq.n	14e90 <uart0_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail0 == tx_head0 + 1) { /* BUF_SIZE = 256 */
   14e3e:	f64c 03f5 	movw	r3, #51445	; 0xc8f5
   14e42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e46:	781b      	ldrb	r3, [r3, #0]
   14e48:	b2db      	uxtb	r3, r3
   14e4a:	461a      	mov	r2, r3
   14e4c:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   14e50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e54:	781b      	ldrb	r3, [r3, #0]
   14e56:	3301      	adds	r3, #1
   14e58:	429a      	cmp	r2, r3
   14e5a:	d100      	bne.n	14e5e <uart0_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14e5c:	e02c      	b.n	14eb8 <uart0_transmit+0x98>
    }
    tx_buf0[tx_head0] = data;
   14e5e:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   14e62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e66:	781b      	ldrb	r3, [r3, #0]
   14e68:	461a      	mov	r2, r3
   14e6a:	f64c 03f8 	movw	r3, #51448	; 0xc8f8
   14e6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e72:	79f9      	ldrb	r1, [r7, #7]
   14e74:	5499      	strb	r1, [r3, r2]
    tx_head0++; /* BUF_SIZE = 256 */
   14e76:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   14e7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e7e:	781b      	ldrb	r3, [r3, #0]
   14e80:	3301      	adds	r3, #1
   14e82:	b2da      	uxtb	r2, r3
   14e84:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   14e88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e8c:	701a      	strb	r2, [r3, #0]
   14e8e:	e013      	b.n	14eb8 <uart0_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR0 = data;
   14e90:	f242 030c 	movw	r3, #8204	; 0x200c
   14e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e98:	79fa      	ldrb	r2, [r7, #7]
   14e9a:	701a      	strb	r2, [r3, #0]
    sbi(UCSR0B, TXCIE);
   14e9c:	f242 030a 	movw	r3, #8202	; 0x200a
   14ea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ea4:	f242 020a 	movw	r2, #8202	; 0x200a
   14ea8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14eac:	7812      	ldrb	r2, [r2, #0]
   14eae:	b2d2      	uxtb	r2, r2
   14eb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14eb4:	b2d2      	uxtb	r2, r2
   14eb6:	701a      	strb	r2, [r3, #0]
  }
}
   14eb8:	370c      	adds	r7, #12
   14eba:	46bd      	mov	sp, r7
   14ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
   14ec0:	4770      	bx	lr
   14ec2:	bf00      	nop

00014ec4 <uart1_transmit>:

void uart1_transmit( unsigned char data ) {
   14ec4:	b480      	push	{r7}
   14ec6:	b083      	sub	sp, #12
   14ec8:	af00      	add	r7, sp, #0
   14eca:	4603      	mov	r3, r0
   14ecc:	71fb      	strb	r3, [r7, #7]
  if (UCSR1B & _BV(TXCIE)) {
   14ece:	f242 039a 	movw	r3, #8346	; 0x209a
   14ed2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ed6:	781b      	ldrb	r3, [r3, #0]
   14ed8:	b2db      	uxtb	r3, r3
   14eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14ede:	2b00      	cmp	r3, #0
   14ee0:	d028      	beq.n	14f34 <uart1_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail1 == tx_head1 + 1) { /* BUF_SIZE = 256 */
   14ee2:	f64c 13f9 	movw	r3, #51705	; 0xc9f9
   14ee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14eea:	781b      	ldrb	r3, [r3, #0]
   14eec:	b2db      	uxtb	r3, r3
   14eee:	461a      	mov	r2, r3
   14ef0:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   14ef4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ef8:	781b      	ldrb	r3, [r3, #0]
   14efa:	3301      	adds	r3, #1
   14efc:	429a      	cmp	r2, r3
   14efe:	d100      	bne.n	14f02 <uart1_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14f00:	e02c      	b.n	14f5c <uart1_transmit+0x98>
    }
    tx_buf1[tx_head1] = data;
   14f02:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   14f06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f0a:	781b      	ldrb	r3, [r3, #0]
   14f0c:	461a      	mov	r2, r3
   14f0e:	f64c 13fc 	movw	r3, #51708	; 0xc9fc
   14f12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f16:	79f9      	ldrb	r1, [r7, #7]
   14f18:	5499      	strb	r1, [r3, r2]
    tx_head1++; /* BUF_SIZE = 256 */
   14f1a:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   14f1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f22:	781b      	ldrb	r3, [r3, #0]
   14f24:	3301      	adds	r3, #1
   14f26:	b2da      	uxtb	r2, r3
   14f28:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   14f2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f30:	701a      	strb	r2, [r3, #0]
   14f32:	e013      	b.n	14f5c <uart1_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR1 = data;
   14f34:	f242 039c 	movw	r3, #8348	; 0x209c
   14f38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f3c:	79fa      	ldrb	r2, [r7, #7]
   14f3e:	701a      	strb	r2, [r3, #0]
    sbi(UCSR1B, TXCIE);
   14f40:	f242 039a 	movw	r3, #8346	; 0x209a
   14f44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f48:	f242 029a 	movw	r2, #8346	; 0x209a
   14f4c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14f50:	7812      	ldrb	r2, [r2, #0]
   14f52:	b2d2      	uxtb	r2, r2
   14f54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14f58:	b2d2      	uxtb	r2, r2
   14f5a:	701a      	strb	r2, [r3, #0]
  }
}
   14f5c:	370c      	adds	r7, #12
   14f5e:	46bd      	mov	sp, r7
   14f60:	f85d 7b04 	ldr.w	r7, [sp], #4
   14f64:	4770      	bx	lr
   14f66:	bf00      	nop

00014f68 <uart0_print_string>:


void uart0_print_string(const uint8_t* s) {
   14f68:	b580      	push	{r7, lr}
   14f6a:	b084      	sub	sp, #16
   14f6c:	af00      	add	r7, sp, #0
   14f6e:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   14f70:	2300      	movs	r3, #0
   14f72:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   14f74:	e009      	b.n	14f8a <uart0_print_string+0x22>
    uart0_transmit(s[i]);
   14f76:	7bfb      	ldrb	r3, [r7, #15]
   14f78:	687a      	ldr	r2, [r7, #4]
   14f7a:	4413      	add	r3, r2
   14f7c:	781b      	ldrb	r3, [r3, #0]
   14f7e:	4618      	mov	r0, r3
   14f80:	f7ff ff4e 	bl	14e20 <uart0_transmit>
    i++;
   14f84:	7bfb      	ldrb	r3, [r7, #15]
   14f86:	3301      	adds	r3, #1
   14f88:	73fb      	strb	r3, [r7, #15]
}


void uart0_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   14f8a:	7bfb      	ldrb	r3, [r7, #15]
   14f8c:	687a      	ldr	r2, [r7, #4]
   14f8e:	4413      	add	r3, r2
   14f90:	781b      	ldrb	r3, [r3, #0]
   14f92:	2b00      	cmp	r3, #0
   14f94:	d1ef      	bne.n	14f76 <uart0_print_string+0xe>
    uart0_transmit(s[i]);
    i++;
  }
}
   14f96:	3710      	adds	r7, #16
   14f98:	46bd      	mov	sp, r7
   14f9a:	bd80      	pop	{r7, pc}

00014f9c <uart0_print_hex>:

void uart0_print_hex(const uint8_t c) {
   14f9c:	b590      	push	{r4, r7, lr}
   14f9e:	b089      	sub	sp, #36	; 0x24
   14fa0:	af00      	add	r7, sp, #0
   14fa2:	4603      	mov	r3, r0
   14fa4:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   14fa6:	f648 23bc 	movw	r3, #35516	; 0x8abc
   14faa:	f2c0 0301 	movt	r3, #1
   14fae:	f107 040c 	add.w	r4, r7, #12
   14fb2:	6818      	ldr	r0, [r3, #0]
   14fb4:	6859      	ldr	r1, [r3, #4]
   14fb6:	689a      	ldr	r2, [r3, #8]
   14fb8:	68db      	ldr	r3, [r3, #12]
   14fba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   14fbc:	79fb      	ldrb	r3, [r7, #7]
   14fbe:	091b      	lsrs	r3, r3, #4
   14fc0:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   14fc2:	79fb      	ldrb	r3, [r7, #7]
   14fc4:	f003 030f 	and.w	r3, r3, #15
   14fc8:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
    high = 15;
   14fca:	230f      	movs	r3, #15
   14fcc:	77fb      	strb	r3, [r7, #31]
    low = 15;
   14fce:	230f      	movs	r3, #15
   14fd0:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */
    uart0_transmit(hex[high]);
   14fd2:	7ffb      	ldrb	r3, [r7, #31]
   14fd4:	f107 0220 	add.w	r2, r7, #32
   14fd8:	4413      	add	r3, r2
   14fda:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14fde:	4618      	mov	r0, r3
   14fe0:	f7ff ff1e 	bl	14e20 <uart0_transmit>
  uart0_transmit(hex[low]);
   14fe4:	7fbb      	ldrb	r3, [r7, #30]
   14fe6:	f107 0220 	add.w	r2, r7, #32
   14fea:	4413      	add	r3, r2
   14fec:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14ff0:	4618      	mov	r0, r3
   14ff2:	f7ff ff15 	bl	14e20 <uart0_transmit>
}
   14ff6:	3724      	adds	r7, #36	; 0x24
   14ff8:	46bd      	mov	sp, r7
   14ffa:	bd90      	pop	{r4, r7, pc}

00014ffc <__vector_20>:


SIGNAL(SIG_UART0_TRANS) {
   14ffc:	b480      	push	{r7}
   14ffe:	af00      	add	r7, sp, #0
  if (tx_head0 == tx_tail0) {
   15000:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   15004:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15008:	781a      	ldrb	r2, [r3, #0]
   1500a:	f64c 03f5 	movw	r3, #51445	; 0xc8f5
   1500e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15012:	781b      	ldrb	r3, [r3, #0]
   15014:	b2db      	uxtb	r3, r3
   15016:	429a      	cmp	r2, r3
   15018:	d10e      	bne.n	15038 <__vector_20+0x3c>
    /* Nothing more to send */
    cbi(UCSR0B, TXCIE); /* disable interrupt */
   1501a:	f242 030a 	movw	r3, #8202	; 0x200a
   1501e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15022:	f242 020a 	movw	r2, #8202	; 0x200a
   15026:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1502a:	7812      	ldrb	r2, [r2, #0]
   1502c:	b2d2      	uxtb	r2, r2
   1502e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   15032:	b2d2      	uxtb	r2, r2
   15034:	701a      	strb	r2, [r3, #0]
   15036:	e01d      	b.n	15074 <__vector_20+0x78>
  } else {
    UDR0 = tx_buf0[tx_tail0];
   15038:	f242 030c 	movw	r3, #8204	; 0x200c
   1503c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15040:	f64c 02f5 	movw	r2, #51445	; 0xc8f5
   15044:	f2c2 0204 	movt	r2, #8196	; 0x2004
   15048:	7812      	ldrb	r2, [r2, #0]
   1504a:	b2d2      	uxtb	r2, r2
   1504c:	4611      	mov	r1, r2
   1504e:	f64c 02f8 	movw	r2, #51448	; 0xc8f8
   15052:	f2c2 0204 	movt	r2, #8196	; 0x2004
   15056:	5c52      	ldrb	r2, [r2, r1]
   15058:	701a      	strb	r2, [r3, #0]
    tx_tail0++; /* warning tx_buf_len is 256 */
   1505a:	f64c 03f5 	movw	r3, #51445	; 0xc8f5
   1505e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15062:	781b      	ldrb	r3, [r3, #0]
   15064:	b2db      	uxtb	r3, r3
   15066:	3301      	adds	r3, #1
   15068:	b2da      	uxtb	r2, r3
   1506a:	f64c 03f5 	movw	r3, #51445	; 0xc8f5
   1506e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15072:	701a      	strb	r2, [r3, #0]
  }
}
   15074:	46bd      	mov	sp, r7
   15076:	f85d 7b04 	ldr.w	r7, [sp], #4
   1507a:	4770      	bx	lr

0001507c <__vector_32>:

SIGNAL(SIG_UART1_TRANS) {
   1507c:	b480      	push	{r7}
   1507e:	af00      	add	r7, sp, #0
  if (tx_head1 == tx_tail1) {
   15080:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   15084:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15088:	781a      	ldrb	r2, [r3, #0]
   1508a:	f64c 13f9 	movw	r3, #51705	; 0xc9f9
   1508e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15092:	781b      	ldrb	r3, [r3, #0]
   15094:	b2db      	uxtb	r3, r3
   15096:	429a      	cmp	r2, r3
   15098:	d10e      	bne.n	150b8 <__vector_32+0x3c>
    /* Nothing more to send */
    cbi(UCSR1B, TXCIE); /* disable interrupt */
   1509a:	f242 039a 	movw	r3, #8346	; 0x209a
   1509e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150a2:	f242 029a 	movw	r2, #8346	; 0x209a
   150a6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   150aa:	7812      	ldrb	r2, [r2, #0]
   150ac:	b2d2      	uxtb	r2, r2
   150ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   150b2:	b2d2      	uxtb	r2, r2
   150b4:	701a      	strb	r2, [r3, #0]
   150b6:	e01d      	b.n	150f4 <__vector_32+0x78>
  } else {
    UDR1 = tx_buf1[tx_tail1];
   150b8:	f242 039c 	movw	r3, #8348	; 0x209c
   150bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150c0:	f64c 12f9 	movw	r2, #51705	; 0xc9f9
   150c4:	f2c2 0204 	movt	r2, #8196	; 0x2004
   150c8:	7812      	ldrb	r2, [r2, #0]
   150ca:	b2d2      	uxtb	r2, r2
   150cc:	4611      	mov	r1, r2
   150ce:	f64c 12fc 	movw	r2, #51708	; 0xc9fc
   150d2:	f2c2 0204 	movt	r2, #8196	; 0x2004
   150d6:	5c52      	ldrb	r2, [r2, r1]
   150d8:	701a      	strb	r2, [r3, #0]
    tx_tail1++; /* warning tx_buf_len is 256 */
   150da:	f64c 13f9 	movw	r3, #51705	; 0xc9f9
   150de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   150e2:	781b      	ldrb	r3, [r3, #0]
   150e4:	b2db      	uxtb	r3, r3
   150e6:	3301      	adds	r3, #1
   150e8:	b2da      	uxtb	r2, r3
   150ea:	f64c 13f9 	movw	r3, #51705	; 0xc9f9
   150ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   150f2:	701a      	strb	r2, [r3, #0]
  }
}
   150f4:	46bd      	mov	sp, r7
   150f6:	f85d 7b04 	ldr.w	r7, [sp], #4
   150fa:	4770      	bx	lr

000150fc <uart0_init>:

void uart0_init( void ) {
   150fc:	b480      	push	{r7}
   150fe:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR0H = 0; 
   15100:	f242 0390 	movw	r3, #8336	; 0x2090
   15104:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15108:	2200      	movs	r2, #0
   1510a:	701a      	strb	r2, [r3, #0]
  UBRR0L = 25; // 38.4
   1510c:	f242 0309 	movw	r3, #8201	; 0x2009
   15110:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15114:	2219      	movs	r2, #25
   15116:	701a      	strb	r2, [r3, #0]
  // UBRR0L = 103; //9600
  /* single speed */ 
  UCSR0A = 0; 
   15118:	f242 030b 	movw	r3, #8203	; 0x200b
   1511c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15120:	2200      	movs	r2, #0
   15122:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR0B = _BV(RXEN) | _BV(TXEN);
   15124:	f242 030a 	movw	r3, #8202	; 0x200a
   15128:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1512c:	2218      	movs	r2, #24
   1512e:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR0C = _BV(UCSZ1) | _BV(UCSZ0);
   15130:	f242 0395 	movw	r3, #8341	; 0x2095
   15134:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15138:	2206      	movs	r2, #6
   1513a:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR0B, RXCIE ); 
   1513c:	f242 030a 	movw	r3, #8202	; 0x200a
   15140:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15144:	f242 020a 	movw	r2, #8202	; 0x200a
   15148:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1514c:	7812      	ldrb	r2, [r2, #0]
   1514e:	b2d2      	uxtb	r2, r2
   15150:	f062 027f 	orn	r2, r2, #127	; 0x7f
   15154:	b2d2      	uxtb	r2, r2
   15156:	701a      	strb	r2, [r3, #0]
}
   15158:	46bd      	mov	sp, r7
   1515a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1515e:	4770      	bx	lr

00015160 <uart1_init>:

void uart1_init( void ) {
   15160:	b480      	push	{r7}
   15162:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR1H = 0; 
   15164:	f242 0398 	movw	r3, #8344	; 0x2098
   15168:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1516c:	2200      	movs	r2, #0
   1516e:	701a      	strb	r2, [r3, #0]
  UBRR1L = 25; // 38.4
   15170:	f242 0399 	movw	r3, #8345	; 0x2099
   15174:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15178:	2219      	movs	r2, #25
   1517a:	701a      	strb	r2, [r3, #0]
  // UBRR1L = 103; //9600


  /* single speed */ 
  UCSR1A = 0; 
   1517c:	f242 039b 	movw	r3, #8347	; 0x209b
   15180:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15184:	2200      	movs	r2, #0
   15186:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR1B = _BV(RXEN) | _BV(TXEN);
   15188:	f242 039a 	movw	r3, #8346	; 0x209a
   1518c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15190:	2218      	movs	r2, #24
   15192:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR1C = _BV(UCSZ1) | _BV(UCSZ0);
   15194:	f242 039d 	movw	r3, #8349	; 0x209d
   15198:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1519c:	2206      	movs	r2, #6
   1519e:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR1B, RXCIE ); 
   151a0:	f242 039a 	movw	r3, #8346	; 0x209a
   151a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151a8:	f242 029a 	movw	r2, #8346	; 0x209a
   151ac:	f2c2 0200 	movt	r2, #8192	; 0x2000
   151b0:	7812      	ldrb	r2, [r2, #0]
   151b2:	b2d2      	uxtb	r2, r2
   151b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
   151b8:	b2d2      	uxtb	r2, r2
   151ba:	701a      	strb	r2, [r3, #0]
}
   151bc:	46bd      	mov	sp, r7
   151be:	f85d 7b04 	ldr.w	r7, [sp], #4
   151c2:	4770      	bx	lr
   151c4:	0000      	movs	r0, r0
	...

000151c8 <estimator_init>:
  estimator_theta_dot = theta_dot; \
}

inline void estimator_update_lls( void );

void estimator_init( void ) {
   151c8:	b480      	push	{r7}
   151ca:	af00      	add	r7, sp, #0

  EstimatorSetPos (0., 0., 0.);
   151cc:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   151d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151d4:	f04f 0200 	mov.w	r2, #0
   151d8:	601a      	str	r2, [r3, #0]
   151da:	f64c 3300 	movw	r3, #51968	; 0xcb00
   151de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151e2:	f04f 0200 	mov.w	r2, #0
   151e6:	601a      	str	r2, [r3, #0]
   151e8:	f64c 3304 	movw	r3, #51972	; 0xcb04
   151ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151f0:	f04f 0200 	mov.w	r2, #0
   151f4:	601a      	str	r2, [r3, #0]

  EstimatorSetAtt (0., 0., 0);
   151f6:	f64c 3308 	movw	r3, #51976	; 0xcb08
   151fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151fe:	f04f 0200 	mov.w	r2, #0
   15202:	601a      	str	r2, [r3, #0]
   15204:	f64c 330c 	movw	r3, #51980	; 0xcb0c
   15208:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1520c:	f04f 0200 	mov.w	r2, #0
   15210:	601a      	str	r2, [r3, #0]
   15212:	f64c 3310 	movw	r3, #51984	; 0xcb10
   15216:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1521a:	f04f 0200 	mov.w	r2, #0
   1521e:	601a      	str	r2, [r3, #0]

  EstimatorSetSpeedPol ( 0., 0., 0.);
   15220:	f64c 3334 	movw	r3, #52020	; 0xcb34
   15224:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15228:	f04f 0200 	mov.w	r2, #0
   1522c:	601a      	str	r2, [r3, #0]
   1522e:	f64c 3338 	movw	r3, #52024	; 0xcb38
   15232:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15236:	f04f 0200 	mov.w	r2, #0
   1523a:	601a      	str	r2, [r3, #0]
   1523c:	f64c 331c 	movw	r3, #51996	; 0xcb1c
   15240:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15244:	f04f 0200 	mov.w	r2, #0
   15248:	601a      	str	r2, [r3, #0]

  EstimatorSetRotSpeed (0., 0., 0.);
   1524a:	f64c 3320 	movw	r3, #52000	; 0xcb20
   1524e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15252:	f04f 0200 	mov.w	r2, #0
   15256:	601a      	str	r2, [r3, #0]
   15258:	f64c 3324 	movw	r3, #52004	; 0xcb24
   1525c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15260:	f04f 0200 	mov.w	r2, #0
   15264:	601a      	str	r2, [r3, #0]
   15266:	f64c 3328 	movw	r3, #52008	; 0xcb28
   1526a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1526e:	f04f 0200 	mov.w	r2, #0
   15272:	601a      	str	r2, [r3, #0]

  estimator_flight_time = 0;
   15274:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   15278:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1527c:	2200      	movs	r2, #0
   1527e:	801a      	strh	r2, [r3, #0]

  estimator_rad_of_ir = ir_rad_of_ir;
   15280:	f240 5348 	movw	r3, #1352	; 0x548
   15284:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15288:	681a      	ldr	r2, [r3, #0]
   1528a:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   1528e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15292:	601a      	str	r2, [r3, #0]
}
   15294:	46bd      	mov	sp, r7
   15296:	f85d 7b04 	ldr.w	r7, [sp], #4
   1529a:	4770      	bx	lr

0001529c <estimator_update_state_infrared>:

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
   1529c:	b580      	push	{r7, lr}
   1529e:	b082      	sub	sp, #8
   152a0:	af00      	add	r7, sp, #0
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   152a2:	f240 533c 	movw	r3, #1340	; 0x53c
   152a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152aa:	781b      	ldrb	r3, [r3, #0]
    estimator_rad_of_ir : ir_rad_of_ir;
   152ac:	2b01      	cmp	r3, #1
   152ae:	d105      	bne.n	152bc <estimator_update_state_infrared+0x20>
   152b0:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   152b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152b8:	681b      	ldr	r3, [r3, #0]
   152ba:	e004      	b.n	152c6 <estimator_update_state_infrared+0x2a>
   152bc:	f240 5348 	movw	r3, #1352	; 0x548
   152c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152c4:	681b      	ldr	r3, [r3, #0]
}

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   152c6:	607b      	str	r3, [r7, #4]
    estimator_rad_of_ir : ir_rad_of_ir;
  estimator_phi  = rad_of_ir * ir_roll;
   152c8:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   152cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152d0:	881b      	ldrh	r3, [r3, #0]
   152d2:	b21b      	sxth	r3, r3
   152d4:	4618      	mov	r0, r3
   152d6:	f003 f897 	bl	18408 <__aeabi_i2f>
   152da:	4603      	mov	r3, r0
   152dc:	4618      	mov	r0, r3
   152de:	6879      	ldr	r1, [r7, #4]
   152e0:	f003 f8e6 	bl	184b0 <__aeabi_fmul>
   152e4:	4603      	mov	r3, r0
   152e6:	461a      	mov	r2, r3
   152e8:	f64c 3308 	movw	r3, #51976	; 0xcb08
   152ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152f0:	601a      	str	r2, [r3, #0]

  estimator_theta = rad_of_ir * ir_pitch;
   152f2:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
   152f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152fa:	881b      	ldrh	r3, [r3, #0]
   152fc:	b21b      	sxth	r3, r3
   152fe:	4618      	mov	r0, r3
   15300:	f003 f882 	bl	18408 <__aeabi_i2f>
   15304:	4603      	mov	r3, r0
   15306:	4618      	mov	r0, r3
   15308:	6879      	ldr	r1, [r7, #4]
   1530a:	f003 f8d1 	bl	184b0 <__aeabi_fmul>
   1530e:	4603      	mov	r3, r0
   15310:	461a      	mov	r2, r3
   15312:	f64c 3310 	movw	r3, #51984	; 0xcb10
   15316:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1531a:	601a      	str	r2, [r3, #0]
}
   1531c:	3708      	adds	r7, #8
   1531e:	46bd      	mov	sp, r7
   15320:	bd80      	pop	{r7, pc}
   15322:	bf00      	nop

00015324 <estimator_update_ir_estim>:
#define RHO 0.999 /* The higher, the slower the estimation is changing */

#define g 9.81


void estimator_update_ir_estim( void ) {
   15324:	b5b0      	push	{r4, r5, r7, lr}
   15326:	b084      	sub	sp, #16
   15328:	af00      	add	r7, sp, #0
  static bool_t initialized = FALSE;
  static float sum_xy, sum_xx;
  float absphi;
  float init_ir2;

  if (initialized) 
   1532a:	f64c 3348 	movw	r3, #52040	; 0xcb48
   1532e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15332:	781b      	ldrb	r3, [r3, #0]
   15334:	2b00      	cmp	r3, #0
   15336:	f000 81e8 	beq.w	1570a <estimator_update_ir_estim+0x3e6>
  {
    float dt = gps_ftow - last_t;
   1533a:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   1533e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15342:	681a      	ldr	r2, [r3, #0]
   15344:	f64c 334c 	movw	r3, #52044	; 0xcb4c
   15348:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1534c:	681b      	ldr	r3, [r3, #0]
   1534e:	4610      	mov	r0, r2
   15350:	4619      	mov	r1, r3
   15352:	f002 ffa3 	bl	1829c <__aeabi_fsub>
   15356:	4603      	mov	r3, r0
   15358:	60bb      	str	r3, [r7, #8]
    if (dt > 0.1) { // Against division by zero
   1535a:	68b8      	ldr	r0, [r7, #8]
   1535c:	f002 fc14 	bl	17b88 <__aeabi_f2d>
   15360:	4602      	mov	r2, r0
   15362:	460b      	mov	r3, r1
   15364:	4610      	mov	r0, r2
   15366:	4619      	mov	r1, r3
   15368:	a385      	add	r3, pc, #532	; (adr r3, 15580 <estimator_update_ir_estim+0x25c>)
   1536a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1536e:	f002 feef 	bl	18150 <__aeabi_dcmpgt>
   15372:	4603      	mov	r3, r0
   15374:	2b00      	cmp	r3, #0
   15376:	d100      	bne.n	1537a <estimator_update_ir_estim+0x56>
   15378:	e219      	b.n	157ae <estimator_update_ir_estim+0x48a>
      float phi = (estimator_hspeed_dir - last_hspeed_dir); 
   1537a:	f64c 3338 	movw	r3, #52024	; 0xcb38
   1537e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15382:	681a      	ldr	r2, [r3, #0]
   15384:	f64c 3350 	movw	r3, #52048	; 0xcb50
   15388:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1538c:	681b      	ldr	r3, [r3, #0]
   1538e:	4610      	mov	r0, r2
   15390:	4619      	mov	r1, r3
   15392:	f002 ff83 	bl	1829c <__aeabi_fsub>
   15396:	4603      	mov	r3, r0
   15398:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   1539a:	e013      	b.n	153c4 <estimator_update_ir_estim+0xa0>
   1539c:	68f8      	ldr	r0, [r7, #12]
   1539e:	f002 fbf3 	bl	17b88 <__aeabi_f2d>
   153a2:	4602      	mov	r2, r0
   153a4:	460b      	mov	r3, r1
   153a6:	4610      	mov	r0, r2
   153a8:	4619      	mov	r1, r3
   153aa:	a377      	add	r3, pc, #476	; (adr r3, 15588 <estimator_update_ir_estim+0x264>)
   153ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   153b0:	f002 fa8a 	bl	178c8 <__aeabi_dsub>
   153b4:	4602      	mov	r2, r0
   153b6:	460b      	mov	r3, r1
   153b8:	4610      	mov	r0, r2
   153ba:	4619      	mov	r1, r3
   153bc:	f002 ff1a 	bl	181f4 <__aeabi_d2f>
   153c0:	4603      	mov	r3, r0
   153c2:	60fb      	str	r3, [r7, #12]
   153c4:	68f8      	ldr	r0, [r7, #12]
   153c6:	f002 fbdf 	bl	17b88 <__aeabi_f2d>
   153ca:	4602      	mov	r2, r0
   153cc:	460b      	mov	r3, r1
   153ce:	4610      	mov	r0, r2
   153d0:	4619      	mov	r1, r3
   153d2:	a36f      	add	r3, pc, #444	; (adr r3, 15590 <estimator_update_ir_estim+0x26c>)
   153d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   153d8:	f002 feba 	bl	18150 <__aeabi_dcmpgt>
   153dc:	4603      	mov	r3, r0
   153de:	2b00      	cmp	r3, #0
   153e0:	d1dc      	bne.n	1539c <estimator_update_ir_estim+0x78>
   153e2:	e013      	b.n	1540c <estimator_update_ir_estim+0xe8>
   153e4:	68f8      	ldr	r0, [r7, #12]
   153e6:	f002 fbcf 	bl	17b88 <__aeabi_f2d>
   153ea:	4602      	mov	r2, r0
   153ec:	460b      	mov	r3, r1
   153ee:	4610      	mov	r0, r2
   153f0:	4619      	mov	r1, r3
   153f2:	a365      	add	r3, pc, #404	; (adr r3, 15588 <estimator_update_ir_estim+0x264>)
   153f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   153f8:	f002 fa68 	bl	178cc <__adddf3>
   153fc:	4602      	mov	r2, r0
   153fe:	460b      	mov	r3, r1
   15400:	4610      	mov	r0, r2
   15402:	4619      	mov	r1, r3
   15404:	f002 fef6 	bl	181f4 <__aeabi_d2f>
   15408:	4603      	mov	r3, r0
   1540a:	60fb      	str	r3, [r7, #12]
   1540c:	68f8      	ldr	r0, [r7, #12]
   1540e:	f002 fbbb 	bl	17b88 <__aeabi_f2d>
   15412:	4602      	mov	r2, r0
   15414:	460b      	mov	r3, r1
   15416:	4610      	mov	r0, r2
   15418:	4619      	mov	r1, r3
   1541a:	a35f      	add	r3, pc, #380	; (adr r3, 15598 <estimator_update_ir_estim+0x274>)
   1541c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15420:	f002 fe78 	bl	18114 <__aeabi_dcmplt>
   15424:	4603      	mov	r3, r0
   15426:	2b00      	cmp	r3, #0
   15428:	d1dc      	bne.n	153e4 <estimator_update_ir_estim+0xc0>
      phi = phi/dt*NOMINAL_AIRSPEED/g; /* tan linearized */
   1542a:	68f8      	ldr	r0, [r7, #12]
   1542c:	68b9      	ldr	r1, [r7, #8]
   1542e:	f003 f8f3 	bl	18618 <__aeabi_fdiv>
   15432:	4603      	mov	r3, r0
   15434:	4618      	mov	r0, r3
   15436:	f002 fba7 	bl	17b88 <__aeabi_f2d>
   1543a:	4602      	mov	r2, r0
   1543c:	460b      	mov	r3, r1
   1543e:	4610      	mov	r0, r2
   15440:	4619      	mov	r1, r3
   15442:	f04f 0200 	mov.w	r2, #0
   15446:	f04f 0300 	mov.w	r3, #0
   1544a:	f2c4 0324 	movt	r3, #16420	; 0x4024
   1544e:	f002 fbef 	bl	17c30 <__aeabi_dmul>
   15452:	4602      	mov	r2, r0
   15454:	460b      	mov	r3, r1
   15456:	4610      	mov	r0, r2
   15458:	4619      	mov	r1, r3
   1545a:	a351      	add	r3, pc, #324	; (adr r3, 155a0 <estimator_update_ir_estim+0x27c>)
   1545c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15460:	f002 fd10 	bl	17e84 <__aeabi_ddiv>
   15464:	4602      	mov	r2, r0
   15466:	460b      	mov	r3, r1
   15468:	4610      	mov	r0, r2
   1546a:	4619      	mov	r1, r3
   1546c:	f002 fec2 	bl	181f4 <__aeabi_d2f>
   15470:	4603      	mov	r3, r0
   15472:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   15474:	e013      	b.n	1549e <estimator_update_ir_estim+0x17a>
   15476:	68f8      	ldr	r0, [r7, #12]
   15478:	f002 fb86 	bl	17b88 <__aeabi_f2d>
   1547c:	4602      	mov	r2, r0
   1547e:	460b      	mov	r3, r1
   15480:	4610      	mov	r0, r2
   15482:	4619      	mov	r1, r3
   15484:	a340      	add	r3, pc, #256	; (adr r3, 15588 <estimator_update_ir_estim+0x264>)
   15486:	e9d3 2300 	ldrd	r2, r3, [r3]
   1548a:	f002 fa1d 	bl	178c8 <__aeabi_dsub>
   1548e:	4602      	mov	r2, r0
   15490:	460b      	mov	r3, r1
   15492:	4610      	mov	r0, r2
   15494:	4619      	mov	r1, r3
   15496:	f002 fead 	bl	181f4 <__aeabi_d2f>
   1549a:	4603      	mov	r3, r0
   1549c:	60fb      	str	r3, [r7, #12]
   1549e:	68f8      	ldr	r0, [r7, #12]
   154a0:	f002 fb72 	bl	17b88 <__aeabi_f2d>
   154a4:	4602      	mov	r2, r0
   154a6:	460b      	mov	r3, r1
   154a8:	4610      	mov	r0, r2
   154aa:	4619      	mov	r1, r3
   154ac:	a338      	add	r3, pc, #224	; (adr r3, 15590 <estimator_update_ir_estim+0x26c>)
   154ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   154b2:	f002 fe4d 	bl	18150 <__aeabi_dcmpgt>
   154b6:	4603      	mov	r3, r0
   154b8:	2b00      	cmp	r3, #0
   154ba:	d1dc      	bne.n	15476 <estimator_update_ir_estim+0x152>
   154bc:	e013      	b.n	154e6 <estimator_update_ir_estim+0x1c2>
   154be:	68f8      	ldr	r0, [r7, #12]
   154c0:	f002 fb62 	bl	17b88 <__aeabi_f2d>
   154c4:	4602      	mov	r2, r0
   154c6:	460b      	mov	r3, r1
   154c8:	4610      	mov	r0, r2
   154ca:	4619      	mov	r1, r3
   154cc:	a32e      	add	r3, pc, #184	; (adr r3, 15588 <estimator_update_ir_estim+0x264>)
   154ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   154d2:	f002 f9fb 	bl	178cc <__adddf3>
   154d6:	4602      	mov	r2, r0
   154d8:	460b      	mov	r3, r1
   154da:	4610      	mov	r0, r2
   154dc:	4619      	mov	r1, r3
   154de:	f002 fe89 	bl	181f4 <__aeabi_d2f>
   154e2:	4603      	mov	r3, r0
   154e4:	60fb      	str	r3, [r7, #12]
   154e6:	68f8      	ldr	r0, [r7, #12]
   154e8:	f002 fb4e 	bl	17b88 <__aeabi_f2d>
   154ec:	4602      	mov	r2, r0
   154ee:	460b      	mov	r3, r1
   154f0:	4610      	mov	r0, r2
   154f2:	4619      	mov	r1, r3
   154f4:	a328      	add	r3, pc, #160	; (adr r3, 15598 <estimator_update_ir_estim+0x274>)
   154f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   154fa:	f002 fe0b 	bl	18114 <__aeabi_dcmplt>
   154fe:	4603      	mov	r3, r0
   15500:	2b00      	cmp	r3, #0
   15502:	d1dc      	bne.n	154be <estimator_update_ir_estim+0x19a>
      estimator_ir = (float)ir_roll;
   15504:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   15508:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1550c:	881b      	ldrh	r3, [r3, #0]
   1550e:	b21b      	sxth	r3, r3
   15510:	4618      	mov	r0, r3
   15512:	f002 ff79 	bl	18408 <__aeabi_i2f>
   15516:	4602      	mov	r2, r0
   15518:	f64c 3340 	movw	r3, #52032	; 0xcb40
   1551c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15520:	601a      	str	r2, [r3, #0]
      estimator_rad = phi;
   15522:	f64c 3344 	movw	r3, #52036	; 0xcb44
   15526:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1552a:	68fa      	ldr	r2, [r7, #12]
   1552c:	601a      	str	r2, [r3, #0]
      absphi = fabs(phi);
   1552e:	68f8      	ldr	r0, [r7, #12]
   15530:	f04f 0100 	mov.w	r1, #0
   15534:	f003 f95a 	bl	187ec <__aeabi_fcmplt>
   15538:	4603      	mov	r3, r0
   1553a:	2b00      	cmp	r3, #0
   1553c:	d003      	beq.n	15546 <estimator_update_ir_estim+0x222>
   1553e:	68fb      	ldr	r3, [r7, #12]
   15540:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   15544:	e000      	b.n	15548 <estimator_update_ir_estim+0x224>
   15546:	68fb      	ldr	r3, [r7, #12]
   15548:	607b      	str	r3, [r7, #4]
      if (absphi < 1.0 && absphi > 0.05 && (- ir_contrast/2 < ir_roll && ir_roll < ir_contrast/2)) {
   1554a:	6878      	ldr	r0, [r7, #4]
   1554c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   15550:	f003 f94c 	bl	187ec <__aeabi_fcmplt>
   15554:	4603      	mov	r3, r0
   15556:	2b00      	cmp	r3, #0
   15558:	d100      	bne.n	1555c <estimator_update_ir_estim+0x238>
   1555a:	e128      	b.n	157ae <estimator_update_ir_estim+0x48a>
   1555c:	6878      	ldr	r0, [r7, #4]
   1555e:	f002 fb13 	bl	17b88 <__aeabi_f2d>
   15562:	4602      	mov	r2, r0
   15564:	460b      	mov	r3, r1
   15566:	4610      	mov	r0, r2
   15568:	4619      	mov	r1, r3
   1556a:	a30f      	add	r3, pc, #60	; (adr r3, 155a8 <estimator_update_ir_estim+0x284>)
   1556c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15570:	f002 fdee 	bl	18150 <__aeabi_dcmpgt>
   15574:	4603      	mov	r3, r0
   15576:	2b00      	cmp	r3, #0
   15578:	d11a      	bne.n	155b0 <estimator_update_ir_estim+0x28c>
   1557a:	e118      	b.n	157ae <estimator_update_ir_estim+0x48a>
   1557c:	f3af 8000 	nop.w
   15580:	9999999a 	.word	0x9999999a
   15584:	3fb99999 	.word	0x3fb99999
   15588:	54442d18 	.word	0x54442d18
   1558c:	401921fb 	.word	0x401921fb
   15590:	54442d18 	.word	0x54442d18
   15594:	400921fb 	.word	0x400921fb
   15598:	54442d18 	.word	0x54442d18
   1559c:	c00921fb 	.word	0xc00921fb
   155a0:	51eb851f 	.word	0x51eb851f
   155a4:	40239eb8 	.word	0x40239eb8
   155a8:	9999999a 	.word	0x9999999a
   155ac:	3fa99999 	.word	0x3fa99999
   155b0:	f240 5340 	movw	r3, #1344	; 0x540
   155b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155b8:	881b      	ldrh	r3, [r3, #0]
   155ba:	b21b      	sxth	r3, r3
   155bc:	425b      	negs	r3, r3
   155be:	0fda      	lsrs	r2, r3, #31
   155c0:	4413      	add	r3, r2
   155c2:	105b      	asrs	r3, r3, #1
   155c4:	461a      	mov	r2, r3
   155c6:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   155ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155ce:	881b      	ldrh	r3, [r3, #0]
   155d0:	b21b      	sxth	r3, r3
   155d2:	429a      	cmp	r2, r3
   155d4:	f280 8098 	bge.w	15708 <estimator_update_ir_estim+0x3e4>
   155d8:	f240 5340 	movw	r3, #1344	; 0x540
   155dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155e0:	881b      	ldrh	r3, [r3, #0]
   155e2:	b21b      	sxth	r3, r3
   155e4:	0fda      	lsrs	r2, r3, #31
   155e6:	4413      	add	r3, r2
   155e8:	105b      	asrs	r3, r3, #1
   155ea:	b29a      	uxth	r2, r3
   155ec:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   155f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155f4:	881b      	ldrh	r3, [r3, #0]
   155f6:	b212      	sxth	r2, r2
   155f8:	b21b      	sxth	r3, r3
   155fa:	429a      	cmp	r2, r3
   155fc:	f340 8084 	ble.w	15708 <estimator_update_ir_estim+0x3e4>
	sum_xy = estimator_rad * estimator_ir + RHO * sum_xy;
   15600:	f64c 3344 	movw	r3, #52036	; 0xcb44
   15604:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15608:	681a      	ldr	r2, [r3, #0]
   1560a:	f64c 3340 	movw	r3, #52032	; 0xcb40
   1560e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15612:	681b      	ldr	r3, [r3, #0]
   15614:	4610      	mov	r0, r2
   15616:	4619      	mov	r1, r3
   15618:	f002 ff4a 	bl	184b0 <__aeabi_fmul>
   1561c:	4603      	mov	r3, r0
   1561e:	4618      	mov	r0, r3
   15620:	f002 fab2 	bl	17b88 <__aeabi_f2d>
   15624:	4604      	mov	r4, r0
   15626:	460d      	mov	r5, r1
   15628:	f64c 3354 	movw	r3, #52052	; 0xcb54
   1562c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15630:	681b      	ldr	r3, [r3, #0]
   15632:	4618      	mov	r0, r3
   15634:	f002 faa8 	bl	17b88 <__aeabi_f2d>
   15638:	4602      	mov	r2, r0
   1563a:	460b      	mov	r3, r1
   1563c:	4610      	mov	r0, r2
   1563e:	4619      	mov	r1, r3
   15640:	a367      	add	r3, pc, #412	; (adr r3, 157e0 <estimator_update_ir_estim+0x4bc>)
   15642:	e9d3 2300 	ldrd	r2, r3, [r3]
   15646:	f002 faf3 	bl	17c30 <__aeabi_dmul>
   1564a:	4602      	mov	r2, r0
   1564c:	460b      	mov	r3, r1
   1564e:	4620      	mov	r0, r4
   15650:	4629      	mov	r1, r5
   15652:	f002 f93b 	bl	178cc <__adddf3>
   15656:	4602      	mov	r2, r0
   15658:	460b      	mov	r3, r1
   1565a:	4610      	mov	r0, r2
   1565c:	4619      	mov	r1, r3
   1565e:	f002 fdc9 	bl	181f4 <__aeabi_d2f>
   15662:	4602      	mov	r2, r0
   15664:	f64c 3354 	movw	r3, #52052	; 0xcb54
   15668:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1566c:	601a      	str	r2, [r3, #0]
	sum_xx = estimator_ir * estimator_ir + RHO * sum_xx;
   1566e:	f64c 3340 	movw	r3, #52032	; 0xcb40
   15672:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15676:	681a      	ldr	r2, [r3, #0]
   15678:	f64c 3340 	movw	r3, #52032	; 0xcb40
   1567c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15680:	681b      	ldr	r3, [r3, #0]
   15682:	4610      	mov	r0, r2
   15684:	4619      	mov	r1, r3
   15686:	f002 ff13 	bl	184b0 <__aeabi_fmul>
   1568a:	4603      	mov	r3, r0
   1568c:	4618      	mov	r0, r3
   1568e:	f002 fa7b 	bl	17b88 <__aeabi_f2d>
   15692:	4604      	mov	r4, r0
   15694:	460d      	mov	r5, r1
   15696:	f64c 3358 	movw	r3, #52056	; 0xcb58
   1569a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1569e:	681b      	ldr	r3, [r3, #0]
   156a0:	4618      	mov	r0, r3
   156a2:	f002 fa71 	bl	17b88 <__aeabi_f2d>
   156a6:	4602      	mov	r2, r0
   156a8:	460b      	mov	r3, r1
   156aa:	4610      	mov	r0, r2
   156ac:	4619      	mov	r1, r3
   156ae:	a34c      	add	r3, pc, #304	; (adr r3, 157e0 <estimator_update_ir_estim+0x4bc>)
   156b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   156b4:	f002 fabc 	bl	17c30 <__aeabi_dmul>
   156b8:	4602      	mov	r2, r0
   156ba:	460b      	mov	r3, r1
   156bc:	4620      	mov	r0, r4
   156be:	4629      	mov	r1, r5
   156c0:	f002 f904 	bl	178cc <__adddf3>
   156c4:	4602      	mov	r2, r0
   156c6:	460b      	mov	r3, r1
   156c8:	4610      	mov	r0, r2
   156ca:	4619      	mov	r1, r3
   156cc:	f002 fd92 	bl	181f4 <__aeabi_d2f>
   156d0:	4602      	mov	r2, r0
   156d2:	f64c 3358 	movw	r3, #52056	; 0xcb58
   156d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156da:	601a      	str	r2, [r3, #0]
	else if (result > IR_RAD_OF_IR_MAX_VALUE)
	  estimator_rad_of_ir = IR_RAD_OF_IR_MAX_VALUE;
	else
	  estimator_rad_of_ir = result;
#else
	  estimator_rad_of_ir = sum_xy / sum_xx;
   156dc:	f64c 3354 	movw	r3, #52052	; 0xcb54
   156e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156e4:	681a      	ldr	r2, [r3, #0]
   156e6:	f64c 3358 	movw	r3, #52056	; 0xcb58
   156ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156ee:	681b      	ldr	r3, [r3, #0]
   156f0:	4610      	mov	r0, r2
   156f2:	4619      	mov	r1, r3
   156f4:	f002 ff90 	bl	18618 <__aeabi_fdiv>
   156f8:	4603      	mov	r3, r0
   156fa:	461a      	mov	r2, r3
   156fc:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   15700:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15704:	601a      	str	r2, [r3, #0]
   15706:	e052      	b.n	157ae <estimator_update_ir_estim+0x48a>
   15708:	e051      	b.n	157ae <estimator_update_ir_estim+0x48a>
#endif
      }
    } 
  } else {
    initialized = TRUE;
   1570a:	f64c 3348 	movw	r3, #52040	; 0xcb48
   1570e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15712:	2201      	movs	r2, #1
   15714:	701a      	strb	r2, [r3, #0]
    init_ir2 = ir_contrast;
   15716:	f240 5340 	movw	r3, #1344	; 0x540
   1571a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1571e:	881b      	ldrh	r3, [r3, #0]
   15720:	b21b      	sxth	r3, r3
   15722:	4618      	mov	r0, r3
   15724:	f002 fe70 	bl	18408 <__aeabi_i2f>
   15728:	4603      	mov	r3, r0
   1572a:	603b      	str	r3, [r7, #0]
    init_ir2 = init_ir2*init_ir2;
   1572c:	6838      	ldr	r0, [r7, #0]
   1572e:	6839      	ldr	r1, [r7, #0]
   15730:	f002 febe 	bl	184b0 <__aeabi_fmul>
   15734:	4603      	mov	r3, r0
   15736:	603b      	str	r3, [r7, #0]
    sum_xy = INIT_WEIGHT * estimator_rad_of_ir * init_ir2;
   15738:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   1573c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15740:	681b      	ldr	r3, [r3, #0]
   15742:	4618      	mov	r0, r3
   15744:	f002 fa20 	bl	17b88 <__aeabi_f2d>
   15748:	4602      	mov	r2, r0
   1574a:	460b      	mov	r3, r1
   1574c:	4610      	mov	r0, r2
   1574e:	4619      	mov	r1, r3
   15750:	f04f 0200 	mov.w	r2, #0
   15754:	f04f 0300 	mov.w	r3, #0
   15758:	f2c4 0359 	movt	r3, #16473	; 0x4059
   1575c:	f002 fa68 	bl	17c30 <__aeabi_dmul>
   15760:	4602      	mov	r2, r0
   15762:	460b      	mov	r3, r1
   15764:	4614      	mov	r4, r2
   15766:	461d      	mov	r5, r3
   15768:	6838      	ldr	r0, [r7, #0]
   1576a:	f002 fa0d 	bl	17b88 <__aeabi_f2d>
   1576e:	4602      	mov	r2, r0
   15770:	460b      	mov	r3, r1
   15772:	4620      	mov	r0, r4
   15774:	4629      	mov	r1, r5
   15776:	f002 fa5b 	bl	17c30 <__aeabi_dmul>
   1577a:	4602      	mov	r2, r0
   1577c:	460b      	mov	r3, r1
   1577e:	4610      	mov	r0, r2
   15780:	4619      	mov	r1, r3
   15782:	f002 fd37 	bl	181f4 <__aeabi_d2f>
   15786:	4602      	mov	r2, r0
   15788:	f64c 3354 	movw	r3, #52052	; 0xcb54
   1578c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15790:	601a      	str	r2, [r3, #0]
    sum_xx = INIT_WEIGHT * init_ir2;
   15792:	6838      	ldr	r0, [r7, #0]
   15794:	f04f 0100 	mov.w	r1, #0
   15798:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   1579c:	f002 fe88 	bl	184b0 <__aeabi_fmul>
   157a0:	4603      	mov	r3, r0
   157a2:	461a      	mov	r2, r3
   157a4:	f64c 3358 	movw	r3, #52056	; 0xcb58
   157a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157ac:	601a      	str	r2, [r3, #0]
  }

  last_hspeed_dir = estimator_hspeed_dir;
   157ae:	f64c 3338 	movw	r3, #52024	; 0xcb38
   157b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157b6:	681a      	ldr	r2, [r3, #0]
   157b8:	f64c 3350 	movw	r3, #52048	; 0xcb50
   157bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157c0:	601a      	str	r2, [r3, #0]
  last_t = gps_ftow;
   157c2:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   157c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157ca:	681a      	ldr	r2, [r3, #0]
   157cc:	f64c 334c 	movw	r3, #52044	; 0xcb4c
   157d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157d4:	601a      	str	r2, [r3, #0]
}
   157d6:	3710      	adds	r7, #16
   157d8:	46bd      	mov	sp, r7
   157da:	bdb0      	pop	{r4, r5, r7, pc}
   157dc:	f3af 8000 	nop.w
   157e0:	d916872b 	.word	0xd916872b
   157e4:	3feff7ce 	.word	0x3feff7ce

000157e8 <estimator_update_state_gps>:


void estimator_update_state_gps( void ) {
   157e8:	b580      	push	{r7, lr}
   157ea:	af00      	add	r7, sp, #0
  if (GPS_FIX_VALID(gps_mode)) {
   157ec:	f24c 63dc 	movw	r3, #50908	; 0xc6dc
   157f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157f4:	781b      	ldrb	r3, [r3, #0]
   157f6:	f003 0320 	and.w	r3, r3, #32
   157fa:	2b00      	cmp	r3, #0
   157fc:	d044      	beq.n	15888 <estimator_update_state_gps+0xa0>
    EstimatorSetPos(gps_east, gps_north, gps_falt);
   157fe:	f24c 63d4 	movw	r3, #50900	; 0xc6d4
   15802:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15806:	681a      	ldr	r2, [r3, #0]
   15808:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1580c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15810:	601a      	str	r2, [r3, #0]
   15812:	f24c 63d8 	movw	r3, #50904	; 0xc6d8
   15816:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1581a:	681a      	ldr	r2, [r3, #0]
   1581c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   15820:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15824:	601a      	str	r2, [r3, #0]
   15826:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   1582a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1582e:	681a      	ldr	r2, [r3, #0]
   15830:	f64c 3304 	movw	r3, #51972	; 0xcb04
   15834:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15838:	601a      	str	r2, [r3, #0]
    EstimatorSetSpeedPol(gps_fspeed, gps_fcourse, gps_fclimb);
   1583a:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   1583e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15842:	681a      	ldr	r2, [r3, #0]
   15844:	f64c 3334 	movw	r3, #52020	; 0xcb34
   15848:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1584c:	601a      	str	r2, [r3, #0]
   1584e:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
   15852:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15856:	681a      	ldr	r2, [r3, #0]
   15858:	f64c 3338 	movw	r3, #52024	; 0xcb38
   1585c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15860:	601a      	str	r2, [r3, #0]
   15862:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   15866:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1586a:	681a      	ldr	r2, [r3, #0]
   1586c:	f64c 331c 	movw	r3, #51996	; 0xcb1c
   15870:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15874:	601a      	str	r2, [r3, #0]
    
    if (estimator_flight_time)
   15876:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   1587a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1587e:	881b      	ldrh	r3, [r3, #0]
   15880:	2b00      	cmp	r3, #0
   15882:	d001      	beq.n	15888 <estimator_update_state_gps+0xa0>
      estimator_update_ir_estim();
   15884:	f7ff fd4e 	bl	15324 <estimator_update_ir_estim>
  }
}
   15888:	bd80      	pop	{r7, pc}
   1588a:	bf00      	nop

0001588c <estimator_propagate_state>:

void estimator_propagate_state( void ) {
   1588c:	b480      	push	{r7}
   1588e:	af00      	add	r7, sp, #0
  
}
   15890:	46bd      	mov	sp, r7
   15892:	f85d 7b04 	ldr.w	r7, [sp], #4
   15896:	4770      	bx	lr

00015898 <inflight_calib>:
/* Please DO NOT EDIT */

#ifndef INFLIGHT_CALIB_H
#define INFLIGHT_CALIB_H 

void inflight_calib(bool_t mode_changed) {
   15898:	b5b0      	push	{r4, r5, r7, lr}
   1589a:	b082      	sub	sp, #8
   1589c:	af00      	add	r7, sp, #0
   1589e:	4603      	mov	r3, r0
   158a0:	71fb      	strb	r3, [r7, #7]
  if (pprz_mode == PPRZ_MODE_AUTO1) {
   158a2:	f24c 532c 	movw	r3, #50476	; 0xc52c
   158a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158aa:	781b      	ldrb	r3, [r3, #0]
   158ac:	2b01      	cmp	r3, #1
   158ae:	f040 80e0 	bne.w	15a72 <inflight_calib+0x1da>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   158b2:	f64c 335c 	movw	r3, #52060	; 0xcb5c
   158b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158ba:	781b      	ldrb	r3, [r3, #0]
   158bc:	2b02      	cmp	r3, #2
   158be:	d168      	bne.n	15992 <inflight_calib+0xfa>
      static int16_t ir_pitch_neutral_init;
      if (mode_changed) {
   158c0:	79fb      	ldrb	r3, [r7, #7]
   158c2:	2b00      	cmp	r3, #0
   158c4:	d013      	beq.n	158ee <inflight_calib+0x56>
        ir_pitch_neutral_init = ir_pitch_neutral;
   158c6:	f240 5344 	movw	r3, #1348	; 0x544
   158ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158ce:	881a      	ldrh	r2, [r3, #0]
   158d0:	f64c 3362 	movw	r3, #52066	; 0xcb62
   158d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158d8:	801a      	strh	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   158da:	f24c 6350 	movw	r3, #50768	; 0xc650
   158de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158e2:	895a      	ldrh	r2, [r3, #10]
   158e4:	f64c 335e 	movw	r3, #52062	; 0xcb5e
   158e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158ec:	801a      	strh	r2, [r3, #0]
      }
      ir_pitch_neutral = ParamValInt16(ir_pitch_neutral_init, 60.000000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   158ee:	f24c 6350 	movw	r3, #50768	; 0xc650
   158f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158f6:	895b      	ldrh	r3, [r3, #10]
   158f8:	b21a      	sxth	r2, r3
   158fa:	f64c 335e 	movw	r3, #52062	; 0xcb5e
   158fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15902:	881b      	ldrh	r3, [r3, #0]
   15904:	b21b      	sxth	r3, r3
   15906:	1ad3      	subs	r3, r2, r3
   15908:	4618      	mov	r0, r3
   1590a:	f002 fd7d 	bl	18408 <__aeabi_i2f>
   1590e:	4603      	mov	r3, r0
   15910:	4618      	mov	r0, r3
   15912:	f002 f939 	bl	17b88 <__aeabi_f2d>
   15916:	4602      	mov	r2, r0
   15918:	460b      	mov	r3, r1
   1591a:	4610      	mov	r0, r2
   1591c:	4619      	mov	r1, r3
   1591e:	f04f 0200 	mov.w	r2, #0
   15922:	f04f 0300 	mov.w	r3, #0
   15926:	f2c4 034e 	movt	r3, #16462	; 0x404e
   1592a:	f002 f981 	bl	17c30 <__aeabi_dmul>
   1592e:	4602      	mov	r2, r0
   15930:	460b      	mov	r3, r1
   15932:	4610      	mov	r0, r2
   15934:	4619      	mov	r1, r3
   15936:	f04f 0200 	mov.w	r2, #0
   1593a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1593e:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15942:	f002 fa9f 	bl	17e84 <__aeabi_ddiv>
   15946:	4602      	mov	r2, r0
   15948:	460b      	mov	r3, r1
   1594a:	4610      	mov	r0, r2
   1594c:	4619      	mov	r1, r3
   1594e:	f002 fc09 	bl	18164 <__aeabi_d2iz>
   15952:	4603      	mov	r3, r0
   15954:	b29b      	uxth	r3, r3
   15956:	b29a      	uxth	r2, r3
   15958:	f64c 3362 	movw	r3, #52066	; 0xcb62
   1595c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15960:	881b      	ldrh	r3, [r3, #0]
   15962:	b29b      	uxth	r3, r3
   15964:	4413      	add	r3, r2
   15966:	b29b      	uxth	r3, r3
   15968:	b29a      	uxth	r2, r3
   1596a:	f240 5344 	movw	r3, #1348	; 0x544
   1596e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15972:	801a      	strh	r2, [r3, #0]
      slider_1_val = (float)ir_pitch_neutral;
   15974:	f240 5344 	movw	r3, #1348	; 0x544
   15978:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1597c:	881b      	ldrh	r3, [r3, #0]
   1597e:	b21b      	sxth	r3, r3
   15980:	4618      	mov	r0, r3
   15982:	f002 fd41 	bl	18408 <__aeabi_i2f>
   15986:	4602      	mov	r2, r0
   15988:	f24c 5338 	movw	r3, #50488	; 0xc538
   1598c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15990:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15992:	f64c 335c 	movw	r3, #52060	; 0xcb5c
   15996:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1599a:	781b      	ldrb	r3, [r3, #0]
   1599c:	2b02      	cmp	r3, #2
   1599e:	d168      	bne.n	15a72 <inflight_calib+0x1da>
      static int16_t ir_roll_neutral_init;
      if (mode_changed) {
   159a0:	79fb      	ldrb	r3, [r7, #7]
   159a2:	2b00      	cmp	r3, #0
   159a4:	d013      	beq.n	159ce <inflight_calib+0x136>
        ir_roll_neutral_init = ir_roll_neutral;
   159a6:	f240 5342 	movw	r3, #1346	; 0x542
   159aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159ae:	881a      	ldrh	r2, [r3, #0]
   159b0:	f64c 3364 	movw	r3, #52068	; 0xcb64
   159b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159b8:	801a      	strh	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   159ba:	f24c 6350 	movw	r3, #50768	; 0xc650
   159be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159c2:	899a      	ldrh	r2, [r3, #12]
   159c4:	f64c 3360 	movw	r3, #52064	; 0xcb60
   159c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159cc:	801a      	strh	r2, [r3, #0]
      }
      ir_roll_neutral = ParamValInt16(ir_roll_neutral_init, -60.000000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   159ce:	f24c 6350 	movw	r3, #50768	; 0xc650
   159d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159d6:	899b      	ldrh	r3, [r3, #12]
   159d8:	b21a      	sxth	r2, r3
   159da:	f64c 3360 	movw	r3, #52064	; 0xcb60
   159de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159e2:	881b      	ldrh	r3, [r3, #0]
   159e4:	b21b      	sxth	r3, r3
   159e6:	1ad3      	subs	r3, r2, r3
   159e8:	4618      	mov	r0, r3
   159ea:	f002 fd0d 	bl	18408 <__aeabi_i2f>
   159ee:	4603      	mov	r3, r0
   159f0:	4618      	mov	r0, r3
   159f2:	f002 f8c9 	bl	17b88 <__aeabi_f2d>
   159f6:	4602      	mov	r2, r0
   159f8:	460b      	mov	r3, r1
   159fa:	4610      	mov	r0, r2
   159fc:	4619      	mov	r1, r3
   159fe:	f04f 0200 	mov.w	r2, #0
   15a02:	f04f 0300 	mov.w	r3, #0
   15a06:	f2cc 034e 	movt	r3, #49230	; 0xc04e
   15a0a:	f002 f911 	bl	17c30 <__aeabi_dmul>
   15a0e:	4602      	mov	r2, r0
   15a10:	460b      	mov	r3, r1
   15a12:	4610      	mov	r0, r2
   15a14:	4619      	mov	r1, r3
   15a16:	f04f 0200 	mov.w	r2, #0
   15a1a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15a1e:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15a22:	f002 fa2f 	bl	17e84 <__aeabi_ddiv>
   15a26:	4602      	mov	r2, r0
   15a28:	460b      	mov	r3, r1
   15a2a:	4610      	mov	r0, r2
   15a2c:	4619      	mov	r1, r3
   15a2e:	f002 fb99 	bl	18164 <__aeabi_d2iz>
   15a32:	4603      	mov	r3, r0
   15a34:	b29b      	uxth	r3, r3
   15a36:	b29a      	uxth	r2, r3
   15a38:	f64c 3364 	movw	r3, #52068	; 0xcb64
   15a3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a40:	881b      	ldrh	r3, [r3, #0]
   15a42:	b29b      	uxth	r3, r3
   15a44:	4413      	add	r3, r2
   15a46:	b29b      	uxth	r3, r3
   15a48:	b29a      	uxth	r2, r3
   15a4a:	f240 5342 	movw	r3, #1346	; 0x542
   15a4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a52:	801a      	strh	r2, [r3, #0]
      slider_2_val = (float)ir_roll_neutral;
   15a54:	f240 5342 	movw	r3, #1346	; 0x542
   15a58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a5c:	881b      	ldrh	r3, [r3, #0]
   15a5e:	b21b      	sxth	r3, r3
   15a60:	4618      	mov	r0, r3
   15a62:	f002 fcd1 	bl	18408 <__aeabi_i2f>
   15a66:	4602      	mov	r2, r0
   15a68:	f24c 533c 	movw	r3, #50492	; 0xc53c
   15a6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a70:	601a      	str	r2, [r3, #0]
    }
  }
  if (pprz_mode == PPRZ_MODE_AUTO2) {
   15a72:	f24c 532c 	movw	r3, #50476	; 0xc52c
   15a76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a7a:	781b      	ldrb	r3, [r3, #0]
   15a7c:	2b02      	cmp	r3, #2
   15a7e:	f040 80da 	bne.w	15c36 <inflight_calib+0x39e>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15a82:	f64c 335c 	movw	r3, #52060	; 0xcb5c
   15a86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a8a:	781b      	ldrb	r3, [r3, #0]
   15a8c:	2b02      	cmp	r3, #2
   15a8e:	d165      	bne.n	15b5c <inflight_calib+0x2c4>
      static float course_pgain_init;
      if (mode_changed) {
   15a90:	79fb      	ldrb	r3, [r7, #7]
   15a92:	2b00      	cmp	r3, #0
   15a94:	d013      	beq.n	15abe <inflight_calib+0x226>
        course_pgain_init = course_pgain;
   15a96:	f240 5358 	movw	r3, #1368	; 0x558
   15a9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a9e:	681a      	ldr	r2, [r3, #0]
   15aa0:	f64c 3368 	movw	r3, #52072	; 0xcb68
   15aa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15aa8:	601a      	str	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   15aaa:	f24c 6350 	movw	r3, #50768	; 0xc650
   15aae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ab2:	895a      	ldrh	r2, [r3, #10]
   15ab4:	f64c 335e 	movw	r3, #52062	; 0xcb5e
   15ab8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15abc:	801a      	strh	r2, [r3, #0]
      }
      course_pgain = ParamValFloat(course_pgain_init, 0.100000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   15abe:	f64c 3368 	movw	r3, #52072	; 0xcb68
   15ac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ac6:	681b      	ldr	r3, [r3, #0]
   15ac8:	4618      	mov	r0, r3
   15aca:	f002 f85d 	bl	17b88 <__aeabi_f2d>
   15ace:	4604      	mov	r4, r0
   15ad0:	460d      	mov	r5, r1
   15ad2:	f24c 6350 	movw	r3, #50768	; 0xc650
   15ad6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ada:	895b      	ldrh	r3, [r3, #10]
   15adc:	b21a      	sxth	r2, r3
   15ade:	f64c 335e 	movw	r3, #52062	; 0xcb5e
   15ae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ae6:	881b      	ldrh	r3, [r3, #0]
   15ae8:	b21b      	sxth	r3, r3
   15aea:	1ad3      	subs	r3, r2, r3
   15aec:	4618      	mov	r0, r3
   15aee:	f002 fc8b 	bl	18408 <__aeabi_i2f>
   15af2:	4603      	mov	r3, r0
   15af4:	4618      	mov	r0, r3
   15af6:	f002 f847 	bl	17b88 <__aeabi_f2d>
   15afa:	4602      	mov	r2, r0
   15afc:	460b      	mov	r3, r1
   15afe:	4610      	mov	r0, r2
   15b00:	4619      	mov	r1, r3
   15b02:	a34f      	add	r3, pc, #316	; (adr r3, 15c40 <inflight_calib+0x3a8>)
   15b04:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b08:	f002 f892 	bl	17c30 <__aeabi_dmul>
   15b0c:	4602      	mov	r2, r0
   15b0e:	460b      	mov	r3, r1
   15b10:	4610      	mov	r0, r2
   15b12:	4619      	mov	r1, r3
   15b14:	f04f 0200 	mov.w	r2, #0
   15b18:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15b1c:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15b20:	f002 f9b0 	bl	17e84 <__aeabi_ddiv>
   15b24:	4602      	mov	r2, r0
   15b26:	460b      	mov	r3, r1
   15b28:	4620      	mov	r0, r4
   15b2a:	4629      	mov	r1, r5
   15b2c:	f001 fece 	bl	178cc <__adddf3>
   15b30:	4602      	mov	r2, r0
   15b32:	460b      	mov	r3, r1
   15b34:	4610      	mov	r0, r2
   15b36:	4619      	mov	r1, r3
   15b38:	f002 fb5c 	bl	181f4 <__aeabi_d2f>
   15b3c:	4602      	mov	r2, r0
   15b3e:	f240 5358 	movw	r3, #1368	; 0x558
   15b42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b46:	601a      	str	r2, [r3, #0]
      slider_1_val = (float)course_pgain;
   15b48:	f240 5358 	movw	r3, #1368	; 0x558
   15b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b50:	681a      	ldr	r2, [r3, #0]
   15b52:	f24c 5338 	movw	r3, #50488	; 0xc538
   15b56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b5a:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15b5c:	f64c 335c 	movw	r3, #52060	; 0xcb5c
   15b60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b64:	781b      	ldrb	r3, [r3, #0]
   15b66:	2b02      	cmp	r3, #2
   15b68:	d165      	bne.n	15c36 <inflight_calib+0x39e>
      static float max_roll_init;
      if (mode_changed) {
   15b6a:	79fb      	ldrb	r3, [r7, #7]
   15b6c:	2b00      	cmp	r3, #0
   15b6e:	d013      	beq.n	15b98 <inflight_calib+0x300>
        max_roll_init = max_roll;
   15b70:	f240 535c 	movw	r3, #1372	; 0x55c
   15b74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b78:	681a      	ldr	r2, [r3, #0]
   15b7a:	f64c 336c 	movw	r3, #52076	; 0xcb6c
   15b7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b82:	601a      	str	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   15b84:	f24c 6350 	movw	r3, #50768	; 0xc650
   15b88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b8c:	899a      	ldrh	r2, [r3, #12]
   15b8e:	f64c 3360 	movw	r3, #52064	; 0xcb60
   15b92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b96:	801a      	strh	r2, [r3, #0]
      }
      max_roll = ParamValFloat(max_roll_init, -0.200000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   15b98:	f64c 336c 	movw	r3, #52076	; 0xcb6c
   15b9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ba0:	681b      	ldr	r3, [r3, #0]
   15ba2:	4618      	mov	r0, r3
   15ba4:	f001 fff0 	bl	17b88 <__aeabi_f2d>
   15ba8:	4604      	mov	r4, r0
   15baa:	460d      	mov	r5, r1
   15bac:	f24c 6350 	movw	r3, #50768	; 0xc650
   15bb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15bb4:	899b      	ldrh	r3, [r3, #12]
   15bb6:	b21a      	sxth	r2, r3
   15bb8:	f64c 3360 	movw	r3, #52064	; 0xcb60
   15bbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15bc0:	881b      	ldrh	r3, [r3, #0]
   15bc2:	b21b      	sxth	r3, r3
   15bc4:	1ad3      	subs	r3, r2, r3
   15bc6:	4618      	mov	r0, r3
   15bc8:	f002 fc1e 	bl	18408 <__aeabi_i2f>
   15bcc:	4603      	mov	r3, r0
   15bce:	4618      	mov	r0, r3
   15bd0:	f001 ffda 	bl	17b88 <__aeabi_f2d>
   15bd4:	4602      	mov	r2, r0
   15bd6:	460b      	mov	r3, r1
   15bd8:	4610      	mov	r0, r2
   15bda:	4619      	mov	r1, r3
   15bdc:	a31a      	add	r3, pc, #104	; (adr r3, 15c48 <inflight_calib+0x3b0>)
   15bde:	e9d3 2300 	ldrd	r2, r3, [r3]
   15be2:	f002 f825 	bl	17c30 <__aeabi_dmul>
   15be6:	4602      	mov	r2, r0
   15be8:	460b      	mov	r3, r1
   15bea:	4610      	mov	r0, r2
   15bec:	4619      	mov	r1, r3
   15bee:	f04f 0200 	mov.w	r2, #0
   15bf2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15bf6:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15bfa:	f002 f943 	bl	17e84 <__aeabi_ddiv>
   15bfe:	4602      	mov	r2, r0
   15c00:	460b      	mov	r3, r1
   15c02:	4620      	mov	r0, r4
   15c04:	4629      	mov	r1, r5
   15c06:	f001 fe61 	bl	178cc <__adddf3>
   15c0a:	4602      	mov	r2, r0
   15c0c:	460b      	mov	r3, r1
   15c0e:	4610      	mov	r0, r2
   15c10:	4619      	mov	r1, r3
   15c12:	f002 faef 	bl	181f4 <__aeabi_d2f>
   15c16:	4602      	mov	r2, r0
   15c18:	f240 535c 	movw	r3, #1372	; 0x55c
   15c1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c20:	601a      	str	r2, [r3, #0]
      slider_2_val = (float)max_roll;
   15c22:	f240 535c 	movw	r3, #1372	; 0x55c
   15c26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c2a:	681a      	ldr	r2, [r3, #0]
   15c2c:	f24c 533c 	movw	r3, #50492	; 0xc53c
   15c30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15c34:	601a      	str	r2, [r3, #0]
    }
  }
}
   15c36:	3708      	adds	r7, #8
   15c38:	46bd      	mov	sp, r7
   15c3a:	bdb0      	pop	{r4, r5, r7, pc}
   15c3c:	f3af 8000 	nop.w
   15c40:	9999999a 	.word	0x9999999a
   15c44:	3fb99999 	.word	0x3fb99999
   15c48:	9999999a 	.word	0x9999999a
   15c4c:	bfc99999 	.word	0xbfc99999

00015c50 <pp_atan2>:
 *
 */
#include <math.h>

double pp_atan2(double x, double y)
{
   15c50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   15c54:	b08e      	sub	sp, #56	; 0x38
   15c56:	af00      	add	r7, sp, #0
   15c58:	e9c7 0102 	strd	r0, r1, [r7, #8]
   15c5c:	e9c7 2300 	strd	r2, r3, [r7]
	double coeff_1 = M_PI/4;
   15c60:	a357      	add	r3, pc, #348	; (adr r3, 15dc0 <pp_atan2+0x170>)
   15c62:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c66:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double coeff_2 = 3*coeff_1;
   15c6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15c6e:	f04f 0200 	mov.w	r2, #0
   15c72:	f04f 0300 	mov.w	r3, #0
   15c76:	f2c4 0308 	movt	r3, #16392	; 0x4008
   15c7a:	f001 ffd9 	bl	17c30 <__aeabi_dmul>
   15c7e:	4602      	mov	r2, r0
   15c80:	460b      	mov	r3, r1
   15c82:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double abs_y = fabs(y)+1e-10;
   15c86:	e9d7 0100 	ldrd	r0, r1, [r7]
   15c8a:	f04f 0200 	mov.w	r2, #0
   15c8e:	f04f 0300 	mov.w	r3, #0
   15c92:	f002 fa3f 	bl	18114 <__aeabi_dcmplt>
   15c96:	4603      	mov	r3, r0
   15c98:	2b00      	cmp	r3, #0
   15c9a:	d009      	beq.n	15cb0 <pp_atan2+0x60>
   15c9c:	a14a      	add	r1, pc, #296	; (adr r1, 15dc8 <pp_atan2+0x178>)
   15c9e:	e9d1 0100 	ldrd	r0, r1, [r1]
   15ca2:	e9d7 2300 	ldrd	r2, r3, [r7]
   15ca6:	f001 fe0f 	bl	178c8 <__aeabi_dsub>
   15caa:	4602      	mov	r2, r0
   15cac:	460b      	mov	r3, r1
   15cae:	e008      	b.n	15cc2 <pp_atan2+0x72>
   15cb0:	e9d7 0100 	ldrd	r0, r1, [r7]
   15cb4:	a344      	add	r3, pc, #272	; (adr r3, 15dc8 <pp_atan2+0x178>)
   15cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
   15cba:	f001 fe07 	bl	178cc <__adddf3>
   15cbe:	4602      	mov	r2, r0
   15cc0:	460b      	mov	r3, r1
   15cc2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angle, r;
	if(x>0)
   15cc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15cca:	f04f 0200 	mov.w	r2, #0
   15cce:	f04f 0300 	mov.w	r3, #0
   15cd2:	f002 fa3d 	bl	18150 <__aeabi_dcmpgt>
   15cd6:	4603      	mov	r3, r0
   15cd8:	2b00      	cmp	r3, #0
   15cda:	d02a      	beq.n	15d32 <pp_atan2+0xe2>
	{
		r = (x - abs_y)/(x + abs_y);
   15cdc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15ce0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15ce4:	f001 fdf0 	bl	178c8 <__aeabi_dsub>
   15ce8:	4602      	mov	r2, r0
   15cea:	460b      	mov	r3, r1
   15cec:	4690      	mov	r8, r2
   15cee:	4699      	mov	r9, r3
   15cf0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15cf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15cf8:	f001 fde8 	bl	178cc <__adddf3>
   15cfc:	4602      	mov	r2, r0
   15cfe:	460b      	mov	r3, r1
   15d00:	4640      	mov	r0, r8
   15d02:	4649      	mov	r1, r9
   15d04:	f002 f8be 	bl	17e84 <__aeabi_ddiv>
   15d08:	4602      	mov	r2, r0
   15d0a:	460b      	mov	r3, r1
   15d0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_1 - coeff_1*r;
   15d10:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d14:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15d18:	f001 ff8a 	bl	17c30 <__aeabi_dmul>
   15d1c:	4602      	mov	r2, r0
   15d1e:	460b      	mov	r3, r1
   15d20:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d24:	f001 fdd0 	bl	178c8 <__aeabi_dsub>
   15d28:	4602      	mov	r2, r0
   15d2a:	460b      	mov	r3, r1
   15d2c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   15d30:	e029      	b.n	15d86 <pp_atan2+0x136>
	}
	else
	{
		r = (x + abs_y)/(abs_y - x);
   15d32:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15d36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15d3a:	f001 fdc7 	bl	178cc <__adddf3>
   15d3e:	4602      	mov	r2, r0
   15d40:	460b      	mov	r3, r1
   15d42:	4690      	mov	r8, r2
   15d44:	4699      	mov	r9, r3
   15d46:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15d4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   15d4e:	f001 fdbb 	bl	178c8 <__aeabi_dsub>
   15d52:	4602      	mov	r2, r0
   15d54:	460b      	mov	r3, r1
   15d56:	4640      	mov	r0, r8
   15d58:	4649      	mov	r1, r9
   15d5a:	f002 f893 	bl	17e84 <__aeabi_ddiv>
   15d5e:	4602      	mov	r2, r0
   15d60:	460b      	mov	r3, r1
   15d62:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_2 - coeff_1*r;
   15d66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d6a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15d6e:	f001 ff5f 	bl	17c30 <__aeabi_dmul>
   15d72:	4602      	mov	r2, r0
   15d74:	460b      	mov	r3, r1
   15d76:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   15d7a:	f001 fda5 	bl	178c8 <__aeabi_dsub>
   15d7e:	4602      	mov	r2, r0
   15d80:	460b      	mov	r3, r1
   15d82:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}
	if(y<0)
   15d86:	e9d7 0100 	ldrd	r0, r1, [r7]
   15d8a:	f04f 0200 	mov.w	r2, #0
   15d8e:	f04f 0300 	mov.w	r3, #0
   15d92:	f002 f9bf 	bl	18114 <__aeabi_dcmplt>
   15d96:	4603      	mov	r3, r0
   15d98:	2b00      	cmp	r3, #0
   15d9a:	d004      	beq.n	15da6 <pp_atan2+0x156>
		return (-angle);
   15d9c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   15d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15da0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15da4:	e001      	b.n	15daa <pp_atan2+0x15a>
	else
		return angle;
   15da6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
   15daa:	4622      	mov	r2, r4
   15dac:	462b      	mov	r3, r5
}
   15dae:	4610      	mov	r0, r2
   15db0:	4619      	mov	r1, r3
   15db2:	3738      	adds	r7, #56	; 0x38
   15db4:	46bd      	mov	sp, r7
   15db6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   15dba:	bf00      	nop
   15dbc:	f3af 8000 	nop.w
   15dc0:	54442d18 	.word	0x54442d18
   15dc4:	3fe921fb 	.word	0x3fe921fb
   15dc8:	d9d7bdbb 	.word	0xd9d7bdbb
   15dcc:	3ddb7cdf 	.word	0x3ddb7cdf

00015dd0 <pp_sin>:
 * Range: -pi/2 <= x <= pi/2
 * Precision: +/- .000,000,005
 */
 
double pp_sin(double x)
{
   15dd0:	b5b0      	push	{r4, r5, r7, lr}
   15dd2:	b08c      	sub	sp, #48	; 0x30
   15dd4:	af00      	add	r7, sp, #0
   15dd6:	e9c7 0100 	strd	r0, r1, [r7]
	double xi, y, q, q2;
	int sign;

	xi = x; sign = 1;
   15dda:	e9d7 2300 	ldrd	r2, r3, [r7]
   15dde:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15de2:	2301      	movs	r3, #1
   15de4:	627b      	str	r3, [r7, #36]	; 0x24
	while (xi < -1.57079632679489661923) xi += 6.28318530717958647692;
   15de6:	e00a      	b.n	15dfe <pp_sin+0x2e>
   15de8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15dec:	a35a      	add	r3, pc, #360	; (adr r3, 15f58 <pp_sin+0x188>)
   15dee:	e9d3 2300 	ldrd	r2, r3, [r3]
   15df2:	f001 fd6b 	bl	178cc <__adddf3>
   15df6:	4602      	mov	r2, r0
   15df8:	460b      	mov	r3, r1
   15dfa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15dfe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15e02:	a357      	add	r3, pc, #348	; (adr r3, 15f60 <pp_sin+0x190>)
   15e04:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e08:	f002 f984 	bl	18114 <__aeabi_dcmplt>
   15e0c:	4603      	mov	r3, r0
   15e0e:	2b00      	cmp	r3, #0
   15e10:	d1ea      	bne.n	15de8 <pp_sin+0x18>
	while (xi > 4.71238898038468985769) xi -= 6.28318530717958647692;
   15e12:	e00a      	b.n	15e2a <pp_sin+0x5a>
   15e14:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15e18:	a34f      	add	r3, pc, #316	; (adr r3, 15f58 <pp_sin+0x188>)
   15e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e1e:	f001 fd53 	bl	178c8 <__aeabi_dsub>
   15e22:	4602      	mov	r2, r0
   15e24:	460b      	mov	r3, r1
   15e26:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15e2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15e2e:	a34e      	add	r3, pc, #312	; (adr r3, 15f68 <pp_sin+0x198>)
   15e30:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e34:	f002 f98c 	bl	18150 <__aeabi_dcmpgt>
   15e38:	4603      	mov	r3, r0
   15e3a:	2b00      	cmp	r3, #0
   15e3c:	d1ea      	bne.n	15e14 <pp_sin+0x44>
	if (xi > 1.57079632679489661923) {
   15e3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15e42:	a34b      	add	r3, pc, #300	; (adr r3, 15f70 <pp_sin+0x1a0>)
   15e44:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e48:	f002 f982 	bl	18150 <__aeabi_dcmpgt>
   15e4c:	4603      	mov	r3, r0
   15e4e:	2b00      	cmp	r3, #0
   15e50:	d00d      	beq.n	15e6e <pp_sin+0x9e>
		xi -= 3.141592653589793238462643;
   15e52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15e56:	a348      	add	r3, pc, #288	; (adr r3, 15f78 <pp_sin+0x1a8>)
   15e58:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e5c:	f001 fd34 	bl	178c8 <__aeabi_dsub>
   15e60:	4602      	mov	r2, r0
   15e62:	460b      	mov	r3, r1
   15e64:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		sign = -1;
   15e68:	f04f 33ff 	mov.w	r3, #4294967295
   15e6c:	627b      	str	r3, [r7, #36]	; 0x24
	}
	q = xi / 1.57079632679; q2 = q * q;
   15e6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15e72:	a343      	add	r3, pc, #268	; (adr r3, 15f80 <pp_sin+0x1b0>)
   15e74:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e78:	f002 f804 	bl	17e84 <__aeabi_ddiv>
   15e7c:	4602      	mov	r2, r0
   15e7e:	460b      	mov	r3, r1
   15e80:	e9c7 2306 	strd	r2, r3, [r7, #24]
   15e84:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15e88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15e8c:	f001 fed0 	bl	17c30 <__aeabi_dmul>
   15e90:	4602      	mov	r2, r0
   15e92:	460b      	mov	r3, r1
   15e94:	e9c7 2304 	strd	r2, r3, [r7, #16]
	y = ((((.00015148419  * q2
   15e98:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   15e9c:	a33a      	add	r3, pc, #232	; (adr r3, 15f88 <pp_sin+0x1b8>)
   15e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15ea2:	f001 fec5 	bl	17c30 <__aeabi_dmul>
   15ea6:	4602      	mov	r2, r0
   15ea8:	460b      	mov	r3, r1
	      - .00467376557) * q2
   15eaa:	4610      	mov	r0, r2
   15eac:	4619      	mov	r1, r3
   15eae:	a338      	add	r3, pc, #224	; (adr r3, 15f90 <pp_sin+0x1c0>)
   15eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
   15eb4:	f001 fd08 	bl	178c8 <__aeabi_dsub>
   15eb8:	4602      	mov	r2, r0
   15eba:	460b      	mov	r3, r1
   15ebc:	4610      	mov	r0, r2
   15ebe:	4619      	mov	r1, r3
   15ec0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15ec4:	f001 feb4 	bl	17c30 <__aeabi_dmul>
   15ec8:	4602      	mov	r2, r0
   15eca:	460b      	mov	r3, r1
	      + .07968967928) * q2
   15ecc:	4610      	mov	r0, r2
   15ece:	4619      	mov	r1, r3
   15ed0:	a331      	add	r3, pc, #196	; (adr r3, 15f98 <pp_sin+0x1c8>)
   15ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
   15ed6:	f001 fcf9 	bl	178cc <__adddf3>
   15eda:	4602      	mov	r2, r0
   15edc:	460b      	mov	r3, r1
   15ede:	4610      	mov	r0, r2
   15ee0:	4619      	mov	r1, r3
   15ee2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15ee6:	f001 fea3 	bl	17c30 <__aeabi_dmul>
   15eea:	4602      	mov	r2, r0
   15eec:	460b      	mov	r3, r1
	      - .64596371106) * q2
   15eee:	4610      	mov	r0, r2
   15ef0:	4619      	mov	r1, r3
   15ef2:	a32b      	add	r3, pc, #172	; (adr r3, 15fa0 <pp_sin+0x1d0>)
   15ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
   15ef8:	f001 fce6 	bl	178c8 <__aeabi_dsub>
   15efc:	4602      	mov	r2, r0
   15efe:	460b      	mov	r3, r1
   15f00:	4610      	mov	r0, r2
   15f02:	4619      	mov	r1, r3
   15f04:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15f08:	f001 fe92 	bl	17c30 <__aeabi_dmul>
   15f0c:	4602      	mov	r2, r0
   15f0e:	460b      	mov	r3, r1
	      +1.57079631847) * q;
   15f10:	4610      	mov	r0, r2
   15f12:	4619      	mov	r1, r3
   15f14:	a324      	add	r3, pc, #144	; (adr r3, 15fa8 <pp_sin+0x1d8>)
   15f16:	e9d3 2300 	ldrd	r2, r3, [r3]
   15f1a:	f001 fcd7 	bl	178cc <__adddf3>
   15f1e:	4602      	mov	r2, r0
   15f20:	460b      	mov	r3, r1
	if (xi > 1.57079632679489661923) {
		xi -= 3.141592653589793238462643;
		sign = -1;
	}
	q = xi / 1.57079632679; q2 = q * q;
	y = ((((.00015148419  * q2
   15f22:	4610      	mov	r0, r2
   15f24:	4619      	mov	r1, r3
   15f26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15f2a:	f001 fe81 	bl	17c30 <__aeabi_dmul>
   15f2e:	4602      	mov	r2, r0
   15f30:	460b      	mov	r3, r1
   15f32:	e9c7 2302 	strd	r2, r3, [r7, #8]
	      - .00467376557) * q2
	      + .07968967928) * q2
	      - .64596371106) * q2
	      +1.57079631847) * q;
	return(sign < 0? -y : y);
   15f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15f38:	2b00      	cmp	r3, #0
   15f3a:	da04      	bge.n	15f46 <pp_sin+0x176>
   15f3c:	68bc      	ldr	r4, [r7, #8]
   15f3e:	68fb      	ldr	r3, [r7, #12]
   15f40:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15f44:	e001      	b.n	15f4a <pp_sin+0x17a>
   15f46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
   15f4a:	4622      	mov	r2, r4
   15f4c:	462b      	mov	r3, r5
}
   15f4e:	4610      	mov	r0, r2
   15f50:	4619      	mov	r1, r3
   15f52:	3730      	adds	r7, #48	; 0x30
   15f54:	46bd      	mov	sp, r7
   15f56:	bdb0      	pop	{r4, r5, r7, pc}
   15f58:	54442d18 	.word	0x54442d18
   15f5c:	401921fb 	.word	0x401921fb
   15f60:	54442d18 	.word	0x54442d18
   15f64:	bff921fb 	.word	0xbff921fb
   15f68:	7f3321d2 	.word	0x7f3321d2
   15f6c:	4012d97c 	.word	0x4012d97c
   15f70:	54442d18 	.word	0x54442d18
   15f74:	3ff921fb 	.word	0x3ff921fb
   15f78:	54442d18 	.word	0x54442d18
   15f7c:	400921fb 	.word	0x400921fb
   15f80:	5443d6f4 	.word	0x5443d6f4
   15f84:	3ff921fb 	.word	0x3ff921fb
   15f88:	48a890af 	.word	0x48a890af
   15f8c:	3f23daf7 	.word	0x3f23daf7
   15f90:	645b6d0e 	.word	0x645b6d0e
   15f94:	3f7324cc 	.word	0x3f7324cc
   15f98:	f65619a5 	.word	0xf65619a5
   15f9c:	3fb4668a 	.word	0x3fb4668a
   15fa0:	16acf9cd 	.word	0x16acf9cd
   15fa4:	3fe4abbc 	.word	0x3fe4abbc
   15fa8:	520817f7 	.word	0x520817f7
   15fac:	3ff921fb 	.word	0x3ff921fb

00015fb0 <pp_sqrt>:

#define SQRT_PRECISION 5
double pp_sqrt(double n)
{
   15fb0:	b480      	push	{r7}
   15fb2:	b083      	sub	sp, #12
   15fb4:	af00      	add	r7, sp, #0
   15fb6:	e9c7 0100 	strd	r0, r1, [r7]
	/* perform the computation */
	for(i = 0; i < SQRT_PRECISION; i++)
		x = (x + n / x) / 2;
	return x;
#endif
}
   15fba:	4610      	mov	r0, r2
   15fbc:	4619      	mov	r1, r3
   15fbe:	370c      	adds	r7, #12
   15fc0:	46bd      	mov	sp, r7
   15fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
   15fc6:	4770      	bx	lr

00015fc8 <fbw_adc_buf_channel>:

uint16_t fbw_adc_samples[ FBW_NB_ADC ];

static struct fbw_adc_buf* buffers[FBW_NB_ADC];

void fbw_adc_buf_channel(uint8_t adc_channel, struct fbw_adc_buf* s) {
   15fc8:	b480      	push	{r7}
   15fca:	b083      	sub	sp, #12
   15fcc:	af00      	add	r7, sp, #0
   15fce:	4603      	mov	r3, r0
   15fd0:	6039      	str	r1, [r7, #0]
   15fd2:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   15fd4:	79fa      	ldrb	r2, [r7, #7]
   15fd6:	f64c 3380 	movw	r3, #52096	; 0xcb80
   15fda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15fde:	6839      	ldr	r1, [r7, #0]
   15fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   15fe4:	370c      	adds	r7, #12
   15fe6:	46bd      	mov	sp, r7
   15fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
   15fec:	4770      	bx	lr
   15fee:	bf00      	nop

00015ff0 <fbw_adc_init>:

void 
fbw_adc_init( void )
{
   15ff0:	b480      	push	{r7}
   15ff2:	b083      	sub	sp, #12
   15ff4:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   15ff6:	f242 0315 	movw	r3, #8213	; 0x2015
   15ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ffe:	2200      	movs	r2, #0
   16000:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   16002:	f242 0314 	movw	r3, #8212	; 0x2014
   16006:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1600a:	2200      	movs	r2, #0
   1600c:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref */
  ADMUX		= ANALOG_VREF;
   1600e:	f242 0307 	movw	r3, #8199	; 0x2007
   16012:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16016:	22c0      	movs	r2, #192	; 0xc0
   16018:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSRA = 0
   1601a:	f242 0306 	movw	r3, #8198	; 0x2006
   1601e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16022:	22cf      	movs	r2, #207	; 0xcf
   16024:	701a      	strb	r2, [r3, #0]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   16026:	2300      	movs	r3, #0
   16028:	71fb      	strb	r3, [r7, #7]
   1602a:	e00a      	b.n	16042 <fbw_adc_init+0x52>
    buffers[i] = (struct fbw_adc_buf*)0;
   1602c:	79fa      	ldrb	r2, [r7, #7]
   1602e:	f64c 3380 	movw	r3, #52096	; 0xcb80
   16032:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16036:	2100      	movs	r1, #0
   16038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   1603c:	79fb      	ldrb	r3, [r7, #7]
   1603e:	3301      	adds	r3, #1
   16040:	71fb      	strb	r3, [r7, #7]
   16042:	79fb      	ldrb	r3, [r7, #7]
   16044:	2b07      	cmp	r3, #7
   16046:	d9f1      	bls.n	1602c <fbw_adc_init+0x3c>
    buffers[i] = (struct fbw_adc_buf*)0;
}
   16048:	370c      	adds	r7, #12
   1604a:	46bd      	mov	sp, r7
   1604c:	f85d 7b04 	ldr.w	r7, [sp], #4
   16050:	4770      	bx	lr
   16052:	bf00      	nop

00016054 <__vector_34>:
#ifdef PAPABENCH_SINGLE
	SIGNAL(SIG_SPM_READY)
#else
	SIGNAL( SIG_INPUT_CAPTURE1 )
#endif
{
   16054:	b480      	push	{r7}
   16056:	b083      	sub	sp, #12
   16058:	af00      	add	r7, sp, #0
  uint16_t		this;
  uint16_t		width;
  static uint8_t		state;
  static uint8_t		sync_start;

  this		= ICR1;
   1605a:	f242 0326 	movw	r3, #8230	; 0x2026
   1605e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16062:	881b      	ldrh	r3, [r3, #0]
   16064:	80fb      	strh	r3, [r7, #6]
  width		= this - last;
   16066:	f64c 33dc 	movw	r3, #52188	; 0xcbdc
   1606a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1606e:	881b      	ldrh	r3, [r3, #0]
   16070:	88fa      	ldrh	r2, [r7, #6]
   16072:	1ad3      	subs	r3, r2, r3
   16074:	80bb      	strh	r3, [r7, #4]
  last		= this;
   16076:	f64c 33dc 	movw	r3, #52188	; 0xcbdc
   1607a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1607e:	88fa      	ldrh	r2, [r7, #6]
   16080:	801a      	strh	r2, [r3, #0]
  
  if( state == 0 ) {
   16082:	f64c 33de 	movw	r3, #52190	; 0xcbde
   16086:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1608a:	781b      	ldrb	r3, [r3, #0]
   1608c:	2b00      	cmp	r3, #0
   1608e:	d11e      	bne.n	160ce <__vector_34+0x7a>
    uint8_t	end = TCNT2;
   16090:	f242 0324 	movw	r3, #8228	; 0x2024
   16094:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16098:	781b      	ldrb	r3, [r3, #0]
   1609a:	70fb      	strb	r3, [r7, #3]
    uint8_t diff = (end - sync_start);
   1609c:	f64c 33df 	movw	r3, #52191	; 0xcbdf
   160a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160a4:	781b      	ldrb	r3, [r3, #0]
   160a6:	78fa      	ldrb	r2, [r7, #3]
   160a8:	1ad3      	subs	r3, r2, r3
   160aa:	70bb      	strb	r3, [r7, #2]
    sync_start = end;
   160ac:	f64c 33df 	movw	r3, #52191	; 0xcbdf
   160b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160b4:	78fa      	ldrb	r2, [r7, #3]
   160b6:	701a      	strb	r2, [r3, #0]

    /* The frame period of the mc3030 seems to be 25ms. 
     * One pulse lasts from 1.05ms to 2.150ms.
     * Sync pulse is at least 7ms : (7000*CLOCK)/1024 = 109
     */
    if( diff > (uint8_t)(((uint32_t)(7000ul*CLOCK))/1024ul) ) {
   160b8:	78bb      	ldrb	r3, [r7, #2]
   160ba:	2b6d      	cmp	r3, #109	; 0x6d
   160bc:	d906      	bls.n	160cc <__vector_34+0x78>
      state = 1;
   160be:	f64c 33de 	movw	r3, #52190	; 0xcbde
   160c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160c6:	2201      	movs	r2, #1
   160c8:	701a      	strb	r2, [r3, #0]
   160ca:	e053      	b.n	16174 <__vector_34+0x120>
   160cc:	e052      	b.n	16174 <__vector_34+0x120>
    }
  } 
  else {
    /* Read a data pulses */
    if( width < 700ul*CLOCK || width > 2300ul*CLOCK)
   160ce:	88bb      	ldrh	r3, [r7, #4]
   160d0:	f5b3 5f2f 	cmp.w	r3, #11200	; 0x2bc0
   160d4:	d304      	bcc.n	160e0 <__vector_34+0x8c>
   160d6:	88ba      	ldrh	r2, [r7, #4]
   160d8:	f648 73c0 	movw	r3, #36800	; 0x8fc0
   160dc:	429a      	cmp	r2, r3
   160de:	d911      	bls.n	16104 <__vector_34+0xb0>
      RestartPpmCycle();
   160e0:	f64c 33de 	movw	r3, #52190	; 0xcbde
   160e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160e8:	2200      	movs	r2, #0
   160ea:	701a      	strb	r2, [r3, #0]
   160ec:	f242 0324 	movw	r3, #8228	; 0x2024
   160f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160f4:	781b      	ldrb	r3, [r3, #0]
   160f6:	b2da      	uxtb	r2, r3
   160f8:	f64c 33df 	movw	r3, #52191	; 0xcbdf
   160fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16100:	701a      	strb	r2, [r3, #0]
   16102:	e038      	b.n	16176 <__vector_34+0x122>
    ppm_pulses[state - 1] = width;
   16104:	f64c 33de 	movw	r3, #52190	; 0xcbde
   16108:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1610c:	781b      	ldrb	r3, [r3, #0]
   1610e:	1e5a      	subs	r2, r3, #1
   16110:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   16114:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16118:	88b9      	ldrh	r1, [r7, #4]
   1611a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (state >= PPM_NB_PULSES) {
   1611e:	f64c 33de 	movw	r3, #52190	; 0xcbde
   16122:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16126:	781b      	ldrb	r3, [r3, #0]
   16128:	2b08      	cmp	r3, #8
   1612a:	d917      	bls.n	1615c <__vector_34+0x108>
      ppm_valid	= 1;
   1612c:	f64c 33db 	movw	r3, #52187	; 0xcbdb
   16130:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16134:	2201      	movs	r2, #1
   16136:	701a      	strb	r2, [r3, #0]
      RestartPpmCycle();
   16138:	f64c 33de 	movw	r3, #52190	; 0xcbde
   1613c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16140:	2200      	movs	r2, #0
   16142:	701a      	strb	r2, [r3, #0]
   16144:	f242 0324 	movw	r3, #8228	; 0x2024
   16148:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1614c:	781b      	ldrb	r3, [r3, #0]
   1614e:	b2da      	uxtb	r2, r3
   16150:	f64c 33df 	movw	r3, #52191	; 0xcbdf
   16154:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16158:	701a      	strb	r2, [r3, #0]
   1615a:	e00c      	b.n	16176 <__vector_34+0x122>
    } else 
      state++;
   1615c:	f64c 33de 	movw	r3, #52190	; 0xcbde
   16160:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16164:	781b      	ldrb	r3, [r3, #0]
   16166:	3301      	adds	r3, #1
   16168:	b2da      	uxtb	r2, r3
   1616a:	f64c 33de 	movw	r3, #52190	; 0xcbde
   1616e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16172:	701a      	strb	r2, [r3, #0]
  }
  return;
   16174:	bf00      	nop
}
   16176:	370c      	adds	r7, #12
   16178:	46bd      	mov	sp, r7
   1617a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1617e:	4770      	bx	lr

00016180 <last_radio_from_ppm>:

/* Copy from the ppm receiving buffer to the buffer sent to mcu0 */
void last_radio_from_ppm() {
   16180:	b590      	push	{r4, r7, lr}
   16182:	b083      	sub	sp, #12
   16184:	af00      	add	r7, sp, #0
  LastRadioFromPpm()
   16186:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   1618a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1618e:	881b      	ldrh	r3, [r3, #0]
   16190:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   16194:	b29b      	uxth	r3, r3
   16196:	80fb      	strh	r3, [r7, #6]
   16198:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   1619c:	4618      	mov	r0, r3
   1619e:	f002 f933 	bl	18408 <__aeabi_i2f>
   161a2:	4603      	mov	r3, r0
   161a4:	4618      	mov	r0, r3
   161a6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   161aa:	f002 f981 	bl	184b0 <__aeabi_fmul>
   161ae:	4603      	mov	r3, r0
   161b0:	4618      	mov	r0, r3
   161b2:	f002 fb43 	bl	1883c <__aeabi_f2iz>
   161b6:	4603      	mov	r3, r0
   161b8:	b29a      	uxth	r2, r3
   161ba:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   161be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161c2:	801a      	strh	r2, [r3, #0]
   161c4:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   161c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161cc:	881b      	ldrh	r3, [r3, #0]
   161ce:	b21b      	sxth	r3, r3
   161d0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   161d4:	dd07      	ble.n	161e6 <last_radio_from_ppm+0x66>
   161d6:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   161da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161de:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   161e2:	801a      	strh	r2, [r3, #0]
   161e4:	e00d      	b.n	16202 <last_radio_from_ppm+0x82>
   161e6:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   161ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161ee:	881b      	ldrh	r3, [r3, #0]
   161f0:	b21b      	sxth	r3, r3
   161f2:	2b00      	cmp	r3, #0
   161f4:	da05      	bge.n	16202 <last_radio_from_ppm+0x82>
   161f6:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   161fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161fe:	2200      	movs	r2, #0
   16200:	801a      	strh	r2, [r3, #0]
   16202:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   16206:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1620a:	885b      	ldrh	r3, [r3, #2]
   1620c:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16210:	b29b      	uxth	r3, r3
   16212:	80fb      	strh	r3, [r7, #6]
   16214:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16218:	4618      	mov	r0, r3
   1621a:	f002 f8f5 	bl	18408 <__aeabi_i2f>
   1621e:	4603      	mov	r3, r0
   16220:	4618      	mov	r0, r3
   16222:	f002 fb0b 	bl	1883c <__aeabi_f2iz>
   16226:	4603      	mov	r3, r0
   16228:	b29a      	uxth	r2, r3
   1622a:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1622e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16232:	805a      	strh	r2, [r3, #2]
   16234:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16238:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1623c:	885b      	ldrh	r3, [r3, #2]
   1623e:	b21b      	sxth	r3, r3
   16240:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16244:	dd07      	ble.n	16256 <last_radio_from_ppm+0xd6>
   16246:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1624a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1624e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16252:	805a      	strh	r2, [r3, #2]
   16254:	e00f      	b.n	16276 <last_radio_from_ppm+0xf6>
   16256:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1625a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1625e:	885b      	ldrh	r3, [r3, #2]
   16260:	b21b      	sxth	r3, r3
   16262:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16266:	da06      	bge.n	16276 <last_radio_from_ppm+0xf6>
   16268:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1626c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16270:	f64d 2280 	movw	r2, #55936	; 0xda80
   16274:	805a      	strh	r2, [r3, #2]
   16276:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   1627a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1627e:	889b      	ldrh	r3, [r3, #4]
   16280:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16284:	b29b      	uxth	r3, r3
   16286:	80fb      	strh	r3, [r7, #6]
   16288:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   1628c:	4618      	mov	r0, r3
   1628e:	f002 f8bb 	bl	18408 <__aeabi_i2f>
   16292:	4603      	mov	r3, r0
   16294:	4618      	mov	r0, r3
   16296:	f002 fad1 	bl	1883c <__aeabi_f2iz>
   1629a:	4603      	mov	r3, r0
   1629c:	b29a      	uxth	r2, r3
   1629e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   162a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162a6:	809a      	strh	r2, [r3, #4]
   162a8:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   162ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162b0:	889b      	ldrh	r3, [r3, #4]
   162b2:	b21b      	sxth	r3, r3
   162b4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   162b8:	dd07      	ble.n	162ca <last_radio_from_ppm+0x14a>
   162ba:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   162be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162c2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   162c6:	809a      	strh	r2, [r3, #4]
   162c8:	e00f      	b.n	162ea <last_radio_from_ppm+0x16a>
   162ca:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   162ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162d2:	889b      	ldrh	r3, [r3, #4]
   162d4:	b21b      	sxth	r3, r3
   162d6:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   162da:	da06      	bge.n	162ea <last_radio_from_ppm+0x16a>
   162dc:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   162e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162e4:	f64d 2280 	movw	r2, #55936	; 0xda80
   162e8:	809a      	strh	r2, [r3, #4]
   162ea:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   162ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162f2:	88db      	ldrh	r3, [r3, #6]
   162f4:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   162f8:	b29b      	uxth	r3, r3
   162fa:	80fb      	strh	r3, [r7, #6]
   162fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16300:	4618      	mov	r0, r3
   16302:	f002 f881 	bl	18408 <__aeabi_i2f>
   16306:	4603      	mov	r3, r0
   16308:	4618      	mov	r0, r3
   1630a:	f002 fa97 	bl	1883c <__aeabi_f2iz>
   1630e:	4603      	mov	r3, r0
   16310:	b29a      	uxth	r2, r3
   16312:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16316:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1631a:	80da      	strh	r2, [r3, #6]
   1631c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16320:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16324:	88db      	ldrh	r3, [r3, #6]
   16326:	b21b      	sxth	r3, r3
   16328:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1632c:	dd07      	ble.n	1633e <last_radio_from_ppm+0x1be>
   1632e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16332:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16336:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1633a:	80da      	strh	r2, [r3, #6]
   1633c:	e00f      	b.n	1635e <last_radio_from_ppm+0x1de>
   1633e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16342:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16346:	88db      	ldrh	r3, [r3, #6]
   16348:	b21b      	sxth	r3, r3
   1634a:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1634e:	da06      	bge.n	1635e <last_radio_from_ppm+0x1de>
   16350:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16354:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16358:	f64d 2280 	movw	r2, #55936	; 0xda80
   1635c:	80da      	strh	r2, [r3, #6]
   1635e:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   16362:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16366:	891b      	ldrh	r3, [r3, #8]
   16368:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1636c:	b29b      	uxth	r3, r3
   1636e:	80fb      	strh	r3, [r7, #6]
   16370:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16374:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16378:	891b      	ldrh	r3, [r3, #8]
   1637a:	b21b      	sxth	r3, r3
   1637c:	4618      	mov	r0, r3
   1637e:	f002 f843 	bl	18408 <__aeabi_i2f>
   16382:	4604      	mov	r4, r0
   16384:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16388:	4618      	mov	r0, r3
   1638a:	f002 f83d 	bl	18408 <__aeabi_i2f>
   1638e:	4603      	mov	r3, r0
   16390:	4618      	mov	r0, r3
   16392:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   16396:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   1639a:	f002 f889 	bl	184b0 <__aeabi_fmul>
   1639e:	4603      	mov	r3, r0
   163a0:	4620      	mov	r0, r4
   163a2:	4619      	mov	r1, r3
   163a4:	f001 ff7c 	bl	182a0 <__addsf3>
   163a8:	4603      	mov	r3, r0
   163aa:	4618      	mov	r0, r3
   163ac:	f002 fa46 	bl	1883c <__aeabi_f2iz>
   163b0:	4603      	mov	r3, r0
   163b2:	b29a      	uxth	r2, r3
   163b4:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   163b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163bc:	811a      	strh	r2, [r3, #8]
   163be:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   163c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163c6:	895b      	ldrh	r3, [r3, #10]
   163c8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   163cc:	b29b      	uxth	r3, r3
   163ce:	80fb      	strh	r3, [r7, #6]
   163d0:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   163d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163d8:	895b      	ldrh	r3, [r3, #10]
   163da:	b21b      	sxth	r3, r3
   163dc:	4618      	mov	r0, r3
   163de:	f002 f813 	bl	18408 <__aeabi_i2f>
   163e2:	4604      	mov	r4, r0
   163e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   163e8:	4618      	mov	r0, r3
   163ea:	f002 f80d 	bl	18408 <__aeabi_i2f>
   163ee:	4603      	mov	r3, r0
   163f0:	4618      	mov	r0, r3
   163f2:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   163f6:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   163fa:	f002 f859 	bl	184b0 <__aeabi_fmul>
   163fe:	4603      	mov	r3, r0
   16400:	4620      	mov	r0, r4
   16402:	4619      	mov	r1, r3
   16404:	f001 ff4c 	bl	182a0 <__addsf3>
   16408:	4603      	mov	r3, r0
   1640a:	4618      	mov	r0, r3
   1640c:	f002 fa16 	bl	1883c <__aeabi_f2iz>
   16410:	4603      	mov	r3, r0
   16412:	b29a      	uxth	r2, r3
   16414:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16418:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1641c:	815a      	strh	r2, [r3, #10]
   1641e:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   16422:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16426:	899b      	ldrh	r3, [r3, #12]
   16428:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1642c:	b29b      	uxth	r3, r3
   1642e:	80fb      	strh	r3, [r7, #6]
   16430:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16434:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16438:	899b      	ldrh	r3, [r3, #12]
   1643a:	b21b      	sxth	r3, r3
   1643c:	4618      	mov	r0, r3
   1643e:	f001 ffe3 	bl	18408 <__aeabi_i2f>
   16442:	4604      	mov	r4, r0
   16444:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16448:	4618      	mov	r0, r3
   1644a:	f001 ffdd 	bl	18408 <__aeabi_i2f>
   1644e:	4603      	mov	r3, r0
   16450:	4618      	mov	r0, r3
   16452:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   16456:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   1645a:	f002 f829 	bl	184b0 <__aeabi_fmul>
   1645e:	4603      	mov	r3, r0
   16460:	4620      	mov	r0, r4
   16462:	4619      	mov	r1, r3
   16464:	f001 ff1c 	bl	182a0 <__addsf3>
   16468:	4603      	mov	r3, r0
   1646a:	4618      	mov	r0, r3
   1646c:	f002 f9e6 	bl	1883c <__aeabi_f2iz>
   16470:	4603      	mov	r3, r0
   16472:	b29a      	uxth	r2, r3
   16474:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16478:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1647c:	819a      	strh	r2, [r3, #12]
   1647e:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   16482:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16486:	89db      	ldrh	r3, [r3, #14]
   16488:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1648c:	b29b      	uxth	r3, r3
   1648e:	80fb      	strh	r3, [r7, #6]
   16490:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16494:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16498:	89db      	ldrh	r3, [r3, #14]
   1649a:	b21b      	sxth	r3, r3
   1649c:	4618      	mov	r0, r3
   1649e:	f001 ffb3 	bl	18408 <__aeabi_i2f>
   164a2:	4604      	mov	r4, r0
   164a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   164a8:	4618      	mov	r0, r3
   164aa:	f001 ffad 	bl	18408 <__aeabi_i2f>
   164ae:	4603      	mov	r3, r0
   164b0:	4618      	mov	r0, r3
   164b2:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   164b6:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   164ba:	f001 fff9 	bl	184b0 <__aeabi_fmul>
   164be:	4603      	mov	r3, r0
   164c0:	4620      	mov	r0, r4
   164c2:	4619      	mov	r1, r3
   164c4:	f001 feec 	bl	182a0 <__addsf3>
   164c8:	4603      	mov	r3, r0
   164ca:	4618      	mov	r0, r3
   164cc:	f002 f9b6 	bl	1883c <__aeabi_f2iz>
   164d0:	4603      	mov	r3, r0
   164d2:	b29a      	uxth	r2, r3
   164d4:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   164d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164dc:	81da      	strh	r2, [r3, #14]
   164de:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   164e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164e6:	8a1b      	ldrh	r3, [r3, #16]
   164e8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   164ec:	b29b      	uxth	r3, r3
   164ee:	80fb      	strh	r3, [r7, #6]
   164f0:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   164f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164f8:	8a1b      	ldrh	r3, [r3, #16]
   164fa:	b21b      	sxth	r3, r3
   164fc:	4618      	mov	r0, r3
   164fe:	f001 ff83 	bl	18408 <__aeabi_i2f>
   16502:	4604      	mov	r4, r0
   16504:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16508:	4618      	mov	r0, r3
   1650a:	f001 ff7d 	bl	18408 <__aeabi_i2f>
   1650e:	4603      	mov	r3, r0
   16510:	4618      	mov	r0, r3
   16512:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   16516:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   1651a:	f001 ffc9 	bl	184b0 <__aeabi_fmul>
   1651e:	4603      	mov	r3, r0
   16520:	4620      	mov	r0, r4
   16522:	4619      	mov	r1, r3
   16524:	f001 febc 	bl	182a0 <__addsf3>
   16528:	4603      	mov	r3, r0
   1652a:	4618      	mov	r0, r3
   1652c:	f002 f986 	bl	1883c <__aeabi_f2iz>
   16530:	4603      	mov	r3, r0
   16532:	b29a      	uxth	r2, r3
   16534:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16538:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1653c:	821a      	strh	r2, [r3, #16]
   1653e:	f64c 33e0 	movw	r3, #52192	; 0xcbe0
   16542:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16546:	781b      	ldrb	r3, [r3, #0]
   16548:	3301      	adds	r3, #1
   1654a:	b2da      	uxtb	r2, r3
   1654c:	f64c 33e0 	movw	r3, #52192	; 0xcbe0
   16550:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16554:	701a      	strb	r2, [r3, #0]
   16556:	f64c 33e0 	movw	r3, #52192	; 0xcbe0
   1655a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1655e:	781b      	ldrb	r3, [r3, #0]
   16560:	2b0a      	cmp	r3, #10
   16562:	f040 8101 	bne.w	16768 <last_radio_from_ppm+0x5e8>
   16566:	f64c 33e0 	movw	r3, #52192	; 0xcbe0
   1656a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1656e:	2200      	movs	r2, #0
   16570:	701a      	strb	r2, [r3, #0]
   16572:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16576:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1657a:	891a      	ldrh	r2, [r3, #8]
   1657c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16580:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16584:	811a      	strh	r2, [r3, #8]
   16586:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   1658a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1658e:	2200      	movs	r2, #0
   16590:	811a      	strh	r2, [r3, #8]
   16592:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16596:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1659a:	891b      	ldrh	r3, [r3, #8]
   1659c:	b21b      	sxth	r3, r3
   1659e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   165a2:	dd07      	ble.n	165b4 <last_radio_from_ppm+0x434>
   165a4:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   165a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   165b0:	811a      	strh	r2, [r3, #8]
   165b2:	e00f      	b.n	165d4 <last_radio_from_ppm+0x454>
   165b4:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   165b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165bc:	891b      	ldrh	r3, [r3, #8]
   165be:	b21b      	sxth	r3, r3
   165c0:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   165c4:	da06      	bge.n	165d4 <last_radio_from_ppm+0x454>
   165c6:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   165ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165ce:	f64d 2280 	movw	r2, #55936	; 0xda80
   165d2:	811a      	strh	r2, [r3, #8]
   165d4:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   165d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165dc:	895a      	ldrh	r2, [r3, #10]
   165de:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   165e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165e6:	815a      	strh	r2, [r3, #10]
   165e8:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   165ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165f0:	2200      	movs	r2, #0
   165f2:	815a      	strh	r2, [r3, #10]
   165f4:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   165f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165fc:	895b      	ldrh	r3, [r3, #10]
   165fe:	b21b      	sxth	r3, r3
   16600:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16604:	dd07      	ble.n	16616 <last_radio_from_ppm+0x496>
   16606:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1660a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1660e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16612:	815a      	strh	r2, [r3, #10]
   16614:	e00f      	b.n	16636 <last_radio_from_ppm+0x4b6>
   16616:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1661a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1661e:	895b      	ldrh	r3, [r3, #10]
   16620:	b21b      	sxth	r3, r3
   16622:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16626:	da06      	bge.n	16636 <last_radio_from_ppm+0x4b6>
   16628:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1662c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16630:	f64d 2280 	movw	r2, #55936	; 0xda80
   16634:	815a      	strh	r2, [r3, #10]
   16636:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   1663a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1663e:	899a      	ldrh	r2, [r3, #12]
   16640:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16644:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16648:	819a      	strh	r2, [r3, #12]
   1664a:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   1664e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16652:	2200      	movs	r2, #0
   16654:	819a      	strh	r2, [r3, #12]
   16656:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1665a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1665e:	899b      	ldrh	r3, [r3, #12]
   16660:	b21b      	sxth	r3, r3
   16662:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16666:	dd07      	ble.n	16678 <last_radio_from_ppm+0x4f8>
   16668:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1666c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16670:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16674:	819a      	strh	r2, [r3, #12]
   16676:	e00f      	b.n	16698 <last_radio_from_ppm+0x518>
   16678:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1667c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16680:	899b      	ldrh	r3, [r3, #12]
   16682:	b21b      	sxth	r3, r3
   16684:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16688:	da06      	bge.n	16698 <last_radio_from_ppm+0x518>
   1668a:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1668e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16692:	f64d 2280 	movw	r2, #55936	; 0xda80
   16696:	819a      	strh	r2, [r3, #12]
   16698:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   1669c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166a0:	89da      	ldrh	r2, [r3, #14]
   166a2:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   166a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166aa:	81da      	strh	r2, [r3, #14]
   166ac:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   166b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166b4:	2200      	movs	r2, #0
   166b6:	81da      	strh	r2, [r3, #14]
   166b8:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   166bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166c0:	89db      	ldrh	r3, [r3, #14]
   166c2:	b21b      	sxth	r3, r3
   166c4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   166c8:	dd07      	ble.n	166da <last_radio_from_ppm+0x55a>
   166ca:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   166ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166d2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   166d6:	81da      	strh	r2, [r3, #14]
   166d8:	e00f      	b.n	166fa <last_radio_from_ppm+0x57a>
   166da:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   166de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166e2:	89db      	ldrh	r3, [r3, #14]
   166e4:	b21b      	sxth	r3, r3
   166e6:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   166ea:	da06      	bge.n	166fa <last_radio_from_ppm+0x57a>
   166ec:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   166f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166f4:	f64d 2280 	movw	r2, #55936	; 0xda80
   166f8:	81da      	strh	r2, [r3, #14]
   166fa:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   166fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16702:	8a1a      	ldrh	r2, [r3, #16]
   16704:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16708:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1670c:	821a      	strh	r2, [r3, #16]
   1670e:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16712:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16716:	2200      	movs	r2, #0
   16718:	821a      	strh	r2, [r3, #16]
   1671a:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1671e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16722:	8a1b      	ldrh	r3, [r3, #16]
   16724:	b21b      	sxth	r3, r3
   16726:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1672a:	dd07      	ble.n	1673c <last_radio_from_ppm+0x5bc>
   1672c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16730:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16734:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16738:	821a      	strh	r2, [r3, #16]
   1673a:	e00f      	b.n	1675c <last_radio_from_ppm+0x5dc>
   1673c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16740:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16744:	8a1b      	ldrh	r3, [r3, #16]
   16746:	b21b      	sxth	r3, r3
   16748:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1674c:	da06      	bge.n	1675c <last_radio_from_ppm+0x5dc>
   1674e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16752:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16756:	f64d 2280 	movw	r2, #55936	; 0xda80
   1675a:	821a      	strh	r2, [r3, #16]
   1675c:	f64c 33da 	movw	r3, #52186	; 0xcbda
   16760:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16764:	2201      	movs	r2, #1
   16766:	701a      	strb	r2, [r3, #0]
}
   16768:	370c      	adds	r7, #12
   1676a:	46bd      	mov	sp, r7
   1676c:	bd90      	pop	{r4, r7, pc}
   1676e:	bf00      	nop

00016770 <spi_reset>:
volatile bool_t spi_was_interrupted = FALSE;

static volatile uint8_t idx_buf = 0;
static volatile uint8_t xor_in, xor_out;

void spi_reset(void) {
   16770:	b480      	push	{r7}
   16772:	af00      	add	r7, sp, #0
  idx_buf = 0;
   16774:	f64c 4314 	movw	r3, #52244	; 0xcc14
   16778:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1677c:	2200      	movs	r2, #0
   1677e:	701a      	strb	r2, [r3, #0]
  xor_in = 0;
   16780:	f64c 4315 	movw	r3, #52245	; 0xcc15
   16784:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16788:	2200      	movs	r2, #0
   1678a:	701a      	strb	r2, [r3, #0]
  xor_out = ((uint8_t*)&to_mega128)[idx_buf];
   1678c:	f64c 4314 	movw	r3, #52244	; 0xcc14
   16790:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16794:	781b      	ldrb	r3, [r3, #0]
   16796:	b2db      	uxtb	r3, r3
   16798:	461a      	mov	r2, r3
   1679a:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   1679e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167a2:	4413      	add	r3, r2
   167a4:	781a      	ldrb	r2, [r3, #0]
   167a6:	f64c 4316 	movw	r3, #52246	; 0xcc16
   167aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167ae:	701a      	strb	r2, [r3, #0]
  SPDR = xor_out;
   167b0:	f242 030f 	movw	r3, #8207	; 0x200f
   167b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167b8:	f64c 4216 	movw	r2, #52246	; 0xcc16
   167bc:	f2c2 0204 	movt	r2, #8196	; 0x2004
   167c0:	7812      	ldrb	r2, [r2, #0]
   167c2:	b2d2      	uxtb	r2, r2
   167c4:	701a      	strb	r2, [r3, #0]
  mega128_receive_valid = FALSE;
   167c6:	f64c 4312 	movw	r3, #52242	; 0xcc12
   167ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167ce:	2200      	movs	r2, #0
   167d0:	701a      	strb	r2, [r3, #0]
}
   167d2:	46bd      	mov	sp, r7
   167d4:	f85d 7b04 	ldr.w	r7, [sp], #4
   167d8:	4770      	bx	lr
   167da:	bf00      	nop

000167dc <fbw_spi_init>:

void fbw_spi_init(void) {
   167dc:	b480      	push	{r7}
   167de:	af00      	add	r7, sp, #0
  to_mega128.status = 0;
   167e0:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   167e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167e8:	2200      	movs	r2, #0
   167ea:	74da      	strb	r2, [r3, #19]
  to_mega128.nb_err = 0;
   167ec:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   167f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167f4:	2200      	movs	r2, #0
   167f6:	751a      	strb	r2, [r3, #20]

  /* set it pin output */
  //  IT_DDR |= _BV(IT_PIN);

  /* set MISO pin output */
  SPI_DDR |= _BV(SPI_MISO_PIN);
   167f8:	f242 0317 	movw	r3, #8215	; 0x2017
   167fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16800:	f242 0217 	movw	r2, #8215	; 0x2017
   16804:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16808:	7812      	ldrb	r2, [r2, #0]
   1680a:	b2d2      	uxtb	r2, r2
   1680c:	f042 0210 	orr.w	r2, r2, #16
   16810:	b2d2      	uxtb	r2, r2
   16812:	701a      	strb	r2, [r3, #0]
  /* enable SPI, slave, MSB first, sck idle low */
  SPCR = _BV(SPE);
   16814:	f242 030d 	movw	r3, #8205	; 0x200d
   16818:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1681c:	2240      	movs	r2, #64	; 0x40
   1681e:	701a      	strb	r2, [r3, #0]
  /* enable interrupt */
  SPCR |= _BV(SPIE);
   16820:	f242 030d 	movw	r3, #8205	; 0x200d
   16824:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16828:	f242 020d 	movw	r2, #8205	; 0x200d
   1682c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16830:	7812      	ldrb	r2, [r2, #0]
   16832:	b2d2      	uxtb	r2, r2
   16834:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16838:	b2d2      	uxtb	r2, r2
   1683a:	701a      	strb	r2, [r3, #0]
}
   1683c:	46bd      	mov	sp, r7
   1683e:	f85d 7b04 	ldr.w	r7, [sp], #4
   16842:	4770      	bx	lr
   16844:	0000      	movs	r0, r0
	...

00016848 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
   16848:	b480      	push	{r7}
   1684a:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
   1684c:	f242 032f 	movw	r3, #8239	; 0x202f
   16850:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16854:	2200      	movs	r2, #0
   16856:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
   16858:	f242 032e 	movw	r3, #8238	; 0x202e
   1685c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16860:	2201      	movs	r2, #1
   16862:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
   16864:	f242 0325 	movw	r3, #8229	; 0x2025
   16868:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1686c:	2207      	movs	r2, #7
   1686e:	701a      	strb	r2, [r3, #0]
}
   16870:	46bd      	mov	sp, r7
   16872:	f85d 7b04 	ldr.w	r7, [sp], #4
   16876:	4770      	bx	lr

00016878 <ppm_init>:
 *
 * JR might be rising edge clocked; set that as an option
 */
static inline void
ppm_init( void )
{
   16878:	b480      	push	{r7}
   1687a:	af00      	add	r7, sp, #0
#if   PPM_RX_TYPE == RXFUTABA
  cbi( TCCR1B, ICES1 );
   1687c:	f242 032e 	movw	r3, #8238	; 0x202e
   16880:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16884:	f242 022e 	movw	r2, #8238	; 0x202e
   16888:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1688c:	7812      	ldrb	r2, [r2, #0]
   1688e:	b2d2      	uxtb	r2, r2
   16890:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   16894:	b2d2      	uxtb	r2, r2
   16896:	701a      	strb	r2, [r3, #0]
#else
#	error "ppm.h: Unknown receiver type in PPM_RX_TYPE"
#endif

  /* No noise cancelation */
  sbi( TCCR1B, ICNC1 );
   16898:	f242 032e 	movw	r3, #8238	; 0x202e
   1689c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168a0:	f242 022e 	movw	r2, #8238	; 0x202e
   168a4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   168a8:	7812      	ldrb	r2, [r2, #0]
   168aa:	b2d2      	uxtb	r2, r2
   168ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
   168b0:	b2d2      	uxtb	r2, r2
   168b2:	701a      	strb	r2, [r3, #0]
  
  /* Set ICP to input, no internal pull up */
  cbi( PPM_DDR, PPM_PIN);
   168b4:	f242 0317 	movw	r3, #8215	; 0x2017
   168b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168bc:	f242 0217 	movw	r2, #8215	; 0x2017
   168c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   168c4:	7812      	ldrb	r2, [r2, #0]
   168c6:	b2d2      	uxtb	r2, r2
   168c8:	f022 0201 	bic.w	r2, r2, #1
   168cc:	b2d2      	uxtb	r2, r2
   168ce:	701a      	strb	r2, [r3, #0]
  
  /* Enable interrupt on input capture */
  sbi( TIMSK, TICIE1 );
   168d0:	f242 0337 	movw	r3, #8247	; 0x2037
   168d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168d8:	f242 0237 	movw	r2, #8247	; 0x2037
   168dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   168e0:	7812      	ldrb	r2, [r2, #0]
   168e2:	b2d2      	uxtb	r2, r2
   168e4:	f042 0220 	orr.w	r2, r2, #32
   168e8:	b2d2      	uxtb	r2, r2
   168ea:	701a      	strb	r2, [r3, #0]
}
   168ec:	46bd      	mov	sp, r7
   168ee:	f85d 7b04 	ldr.w	r7, [sp], #4
   168f2:	4770      	bx	lr

000168f4 <to_autopilot_from_last_radio>:
/*   uart_transmit('\n'); */
/* } */


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
   168f4:	b580      	push	{r7, lr}
   168f6:	b082      	sub	sp, #8
   168f8:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   168fa:	2300      	movs	r3, #0
   168fc:	71fb      	strb	r3, [r7, #7]
   168fe:	e010      	b.n	16922 <to_autopilot_from_last_radio+0x2e>
     to_mega128.channels[i] = last_radio[i];
   16900:	79fa      	ldrb	r2, [r7, #7]
   16902:	79f9      	ldrb	r1, [r7, #7]
   16904:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16908:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1690c:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   16910:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   16914:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16918:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   1691c:	79fb      	ldrb	r3, [r7, #7]
   1691e:	3301      	adds	r3, #1
   16920:	71fb      	strb	r3, [r7, #7]
   16922:	79fb      	ldrb	r3, [r7, #7]
   16924:	2b08      	cmp	r3, #8
   16926:	d9eb      	bls.n	16900 <to_autopilot_from_last_radio+0xc>
     to_mega128.channels[i] = last_radio[i];
  to_mega128.status = (radio_ok ? _BV(STATUS_RADIO_OK) : 0);
   16928:	f64c 43a4 	movw	r3, #52388	; 0xcca4
   1692c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16930:	781b      	ldrb	r3, [r3, #0]
   16932:	2b00      	cmp	r3, #0
   16934:	bf0c      	ite	eq
   16936:	2300      	moveq	r3, #0
   16938:	2301      	movne	r3, #1
   1693a:	b2db      	uxtb	r3, r3
   1693c:	461a      	mov	r2, r3
   1693e:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   16942:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16946:	74da      	strb	r2, [r3, #19]
  to_mega128.status |= (radio_really_lost ? _BV(RADIO_REALLY_LOST) : 0);
   16948:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   1694c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16950:	7cdb      	ldrb	r3, [r3, #19]
   16952:	b2da      	uxtb	r2, r3
   16954:	f64c 43a6 	movw	r3, #52390	; 0xcca6
   16958:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1695c:	781b      	ldrb	r3, [r3, #0]
   1695e:	2b00      	cmp	r3, #0
   16960:	d001      	beq.n	16966 <to_autopilot_from_last_radio+0x72>
   16962:	2302      	movs	r3, #2
   16964:	e000      	b.n	16968 <to_autopilot_from_last_radio+0x74>
   16966:	2300      	movs	r3, #0
   16968:	4313      	orrs	r3, r2
   1696a:	b2db      	uxtb	r3, r3
   1696c:	b2da      	uxtb	r2, r3
   1696e:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   16972:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16976:	74da      	strb	r2, [r3, #19]
  if (last_radio_contains_avg_channels) {
   16978:	f64c 33da 	movw	r3, #52186	; 0xcbda
   1697c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16980:	781b      	ldrb	r3, [r3, #0]
   16982:	2b00      	cmp	r3, #0
   16984:	d012      	beq.n	169ac <to_autopilot_from_last_radio+0xb8>
    to_mega128.status |= _BV(AVERAGED_CHANNELS_SENT);
   16986:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   1698a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1698e:	7cdb      	ldrb	r3, [r3, #19]
   16990:	f043 0304 	orr.w	r3, r3, #4
   16994:	b2da      	uxtb	r2, r3
   16996:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   1699a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1699e:	74da      	strb	r2, [r3, #19]
    last_radio_contains_avg_channels = FALSE;
   169a0:	f64c 33da 	movw	r3, #52186	; 0xcbda
   169a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169a8:	2200      	movs	r2, #0
   169aa:	701a      	strb	r2, [r3, #0]
  }
  to_mega128.ppm_cpt = last_ppm_cpt;
   169ac:	f64c 43a8 	movw	r3, #52392	; 0xcca8
   169b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169b4:	781a      	ldrb	r2, [r3, #0]
   169b6:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   169ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169be:	749a      	strb	r2, [r3, #18]
#ifndef CTL_BRD_V1_1
  to_mega128.vsupply = VoltageOfAdc(vsupply_adc_buf.sum/AV_NB_SAMPLE) * 10;
   169c0:	f64c 4318 	movw	r3, #52248	; 0xcc18
   169c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169c8:	881b      	ldrh	r3, [r3, #0]
   169ca:	4618      	mov	r0, r3
   169cc:	f001 f8ca 	bl	17b64 <__aeabi_i2d>
   169d0:	4602      	mov	r2, r0
   169d2:	460b      	mov	r3, r1
   169d4:	4610      	mov	r0, r2
   169d6:	4619      	mov	r1, r3
   169d8:	a31b      	add	r3, pc, #108	; (adr r3, 16a48 <to_autopilot_from_last_radio+0x154>)
   169da:	e9d3 2300 	ldrd	r2, r3, [r3]
   169de:	f001 f927 	bl	17c30 <__aeabi_dmul>
   169e2:	4602      	mov	r2, r0
   169e4:	460b      	mov	r3, r1
   169e6:	4610      	mov	r0, r2
   169e8:	4619      	mov	r1, r3
   169ea:	f04f 0200 	mov.w	r2, #0
   169ee:	f04f 0300 	mov.w	r3, #0
   169f2:	f2c4 0340 	movt	r3, #16448	; 0x4040
   169f6:	f001 fa45 	bl	17e84 <__aeabi_ddiv>
   169fa:	4602      	mov	r2, r0
   169fc:	460b      	mov	r3, r1
   169fe:	4610      	mov	r0, r2
   16a00:	4619      	mov	r1, r3
   16a02:	a313      	add	r3, pc, #76	; (adr r3, 16a50 <to_autopilot_from_last_radio+0x15c>)
   16a04:	e9d3 2300 	ldrd	r2, r3, [r3]
   16a08:	f000 ff60 	bl	178cc <__adddf3>
   16a0c:	4602      	mov	r2, r0
   16a0e:	460b      	mov	r3, r1
   16a10:	4610      	mov	r0, r2
   16a12:	4619      	mov	r1, r3
   16a14:	f04f 0200 	mov.w	r2, #0
   16a18:	f04f 0300 	mov.w	r3, #0
   16a1c:	f2c4 0324 	movt	r3, #16420	; 0x4024
   16a20:	f001 f906 	bl	17c30 <__aeabi_dmul>
   16a24:	4602      	mov	r2, r0
   16a26:	460b      	mov	r3, r1
   16a28:	4610      	mov	r0, r2
   16a2a:	4619      	mov	r1, r3
   16a2c:	f001 fbc2 	bl	181b4 <__aeabi_d2uiz>
   16a30:	4603      	mov	r3, r0
   16a32:	b2da      	uxtb	r2, r3
   16a34:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   16a38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a3c:	755a      	strb	r2, [r3, #21]
#else
  to_mega128.vsupply = 0;
#endif
}
   16a3e:	3708      	adds	r7, #8
   16a40:	46bd      	mov	sp, r7
   16a42:	bd80      	pop	{r7, pc}
   16a44:	f3af 8000 	nop.w
   16a48:	1eb851ec 	.word	0x1eb851ec
   16a4c:	3f91eb85 	.word	0x3f91eb85
   16a50:	020c49ba 	.word	0x020c49ba
   16a54:	3fb6872b 	.word	0x3fb6872b

00016a58 <send_data_to_autopilot_task>:

void send_data_to_autopilot_task(void)
{
   16a58:	b580      	push	{r7, lr}
   16a5a:	af00      	add	r7, sp, #0
	//vPrintString("S_2 send_data_to_autopilot_task start! \n\r"); //SunnyBeike

    // modified by wanbo
   if ( !SpiIsSelected() && spi_was_interrupted ) 
   16a5c:	f242 0316 	movw	r3, #8214	; 0x2016
   16a60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16a64:	781b      	ldrb	r3, [r3, #0]
   16a66:	b2db      	uxtb	r3, r3
   16a68:	f003 0304 	and.w	r3, r3, #4
   16a6c:	2b00      	cmp	r3, #0
   16a6e:	d011      	beq.n	16a94 <send_data_to_autopilot_task+0x3c>
   16a70:	f64c 4313 	movw	r3, #52243	; 0xcc13
   16a74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a78:	781b      	ldrb	r3, [r3, #0]
   16a7a:	b2db      	uxtb	r3, r3
   16a7c:	2b00      	cmp	r3, #0
   16a7e:	d009      	beq.n	16a94 <send_data_to_autopilot_task+0x3c>
   {
      spi_was_interrupted = FALSE;
   16a80:	f64c 4313 	movw	r3, #52243	; 0xcc13
   16a84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a88:	2200      	movs	r2, #0
   16a8a:	701a      	strb	r2, [r3, #0]
      to_autopilot_from_last_radio();
   16a8c:	f7ff ff32 	bl	168f4 <to_autopilot_from_last_radio>
      spi_reset();
   16a90:	f7ff fe6e 	bl	16770 <spi_reset>
   }
	//vPrintString("S_2 send_data_to_autopilot_task end! \n\r"); //SunnyBeike

}
   16a94:	bd80      	pop	{r7, pc}
   16a96:	bf00      	nop

00016a98 <fbw_init>:
	static uint8_t _1Hz;
	static uint8_t _20Hz;
#endif
*/

void fbw_init(void) {
   16a98:	b580      	push	{r7, lr}
   16a9a:	af00      	add	r7, sp, #0
  uart_init_tx();
   16a9c:	f000 fb68 	bl	17170 <uart_init_tx>
  uart_print_string("FBW Booting $Id: main.c,v 1.3 2008/10/22 19:41:19 casse Exp $\n\r");
   16aa0:	f648 20e0 	movw	r0, #35552	; 0x8ae0
   16aa4:	f2c0 0001 	movt	r0, #1
   16aa8:	f000 fc40 	bl	1732c <uart_print_string>

#ifndef CTL_BRD_V1_1
  fbw_adc_init();
   16aac:	f7ff faa0 	bl	15ff0 <fbw_adc_init>
  fbw_adc_buf_channel(3, &vsupply_adc_buf);
   16ab0:	2003      	movs	r0, #3
   16ab2:	f64c 4118 	movw	r1, #52248	; 0xcc18
   16ab6:	f2c2 0104 	movt	r1, #8196	; 0x2004
   16aba:	f7ff fa85 	bl	15fc8 <fbw_adc_buf_channel>
  fbw_adc_buf_channel(6, &vservos_adc_buf);
   16abe:	2006      	movs	r0, #6
   16ac0:	f64c 415c 	movw	r1, #52316	; 0xcc5c
   16ac4:	f2c2 0104 	movt	r1, #8196	; 0x2004
   16ac8:	f7ff fa7e 	bl	15fc8 <fbw_adc_buf_channel>
#endif
  timer_init();
   16acc:	f7ff febc 	bl	16848 <timer_init>
  servo_init();
   16ad0:	f000 f8fa 	bl	16cc8 <servo_init>
  ppm_init();
   16ad4:	f7ff fed0 	bl	16878 <ppm_init>
  fbw_spi_init();
   16ad8:	f7ff fe80 	bl	167dc <fbw_spi_init>
  //sei(); //FN
}
   16adc:	bd80      	pop	{r7, pc}
   16ade:	bf00      	nop

00016ae0 <test_ppm_task>:
  return 0;
}
#endif
*/
void test_ppm_task(void)
{
   16ae0:	b580      	push	{r7, lr}
   16ae2:	af00      	add	r7, sp, #0
	//vPrintString("S_1 test_ppm_task start! \n\r"); //SunnyBeike
    // modified by wanbo
    if( ppm_valid ) 
   16ae4:	f64c 33db 	movw	r3, #52187	; 0xcbdb
   16ae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16aec:	781b      	ldrb	r3, [r3, #0]
   16aee:	b2db      	uxtb	r3, r3
   16af0:	2b00      	cmp	r3, #0
   16af2:	d04c      	beq.n	16b8e <test_ppm_task+0xae>
    {
      ppm_valid = FALSE;
   16af4:	f64c 33db 	movw	r3, #52187	; 0xcbdb
   16af8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16afc:	2200      	movs	r2, #0
   16afe:	701a      	strb	r2, [r3, #0]
      ppm_cpt++;
   16b00:	f64c 43a7 	movw	r3, #52391	; 0xcca7
   16b04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b08:	781b      	ldrb	r3, [r3, #0]
   16b0a:	3301      	adds	r3, #1
   16b0c:	b2da      	uxtb	r2, r3
   16b0e:	f64c 43a7 	movw	r3, #52391	; 0xcca7
   16b12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b16:	701a      	strb	r2, [r3, #0]
      radio_ok = TRUE;
   16b18:	f64c 43a4 	movw	r3, #52388	; 0xcca4
   16b1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b20:	2201      	movs	r2, #1
   16b22:	701a      	strb	r2, [r3, #0]
      radio_really_lost = FALSE;
   16b24:	f64c 43a6 	movw	r3, #52390	; 0xcca6
   16b28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b2c:	2200      	movs	r2, #0
   16b2e:	701a      	strb	r2, [r3, #0]
      time_since_last_ppm = 0;
   16b30:	f64c 43a2 	movw	r3, #52386	; 0xcca2
   16b34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b38:	2200      	movs	r2, #0
   16b3a:	801a      	strh	r2, [r3, #0]
      last_radio_from_ppm();
   16b3c:	f7ff fb20 	bl	16180 <last_radio_from_ppm>
      if (last_radio_contains_avg_channels) 
   16b40:	f64c 33da 	movw	r3, #52186	; 0xcbda
   16b44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b48:	781b      	ldrb	r3, [r3, #0]
   16b4a:	2b00      	cmp	r3, #0
   16b4c:	d011      	beq.n	16b72 <test_ppm_task+0x92>
      {
	mode = MODE_OF_PPRZ(last_radio[RADIO_MODE]);
   16b4e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16b52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b56:	891b      	ldrh	r3, [r3, #8]
   16b58:	b21b      	sxth	r3, r3
   16b5a:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
   16b5e:	bfb4      	ite	lt
   16b60:	2300      	movlt	r3, #0
   16b62:	2301      	movge	r3, #1
   16b64:	b2db      	uxtb	r3, r3
   16b66:	461a      	mov	r2, r3
   16b68:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16b6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b70:	701a      	strb	r2, [r3, #0]
      }
      if (mode == MODE_MANUAL) 
   16b72:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16b76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b7a:	781b      	ldrb	r3, [r3, #0]
   16b7c:	2b00      	cmp	r3, #0
   16b7e:	d11a      	bne.n	16bb6 <test_ppm_task+0xd6>
      {
	servo_set(last_radio);
   16b80:	f64c 30b4 	movw	r0, #52148	; 0xcbb4
   16b84:	f2c2 0004 	movt	r0, #8196	; 0x2004
   16b88:	f000 f97c 	bl	16e84 <servo_set>
   16b8c:	e013      	b.n	16bb6 <test_ppm_task+0xd6>
      }
    } 
    else if (mode == MODE_MANUAL && radio_really_lost) 
   16b8e:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16b92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b96:	781b      	ldrb	r3, [r3, #0]
   16b98:	2b00      	cmp	r3, #0
   16b9a:	d10c      	bne.n	16bb6 <test_ppm_task+0xd6>
   16b9c:	f64c 43a6 	movw	r3, #52390	; 0xcca6
   16ba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ba4:	781b      	ldrb	r3, [r3, #0]
   16ba6:	2b00      	cmp	r3, #0
   16ba8:	d005      	beq.n	16bb6 <test_ppm_task+0xd6>
    {
      mode = MODE_AUTO;
   16baa:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16bae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bb2:	2201      	movs	r2, #1
   16bb4:	701a      	strb	r2, [r3, #0]
    }
    if (time_since_last_ppm >= STALLED_TIME) 
   16bb6:	f64c 43a2 	movw	r3, #52386	; 0xcca2
   16bba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bbe:	881b      	ldrh	r3, [r3, #0]
   16bc0:	2b1d      	cmp	r3, #29
   16bc2:	d905      	bls.n	16bd0 <test_ppm_task+0xf0>
    {
      radio_ok = FALSE;
   16bc4:	f64c 43a4 	movw	r3, #52388	; 0xcca4
   16bc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bcc:	2200      	movs	r2, #0
   16bce:	701a      	strb	r2, [r3, #0]
    }
    if (time_since_last_ppm >= REALLY_STALLED_TIME) 
   16bd0:	f64c 43a2 	movw	r3, #52386	; 0xcca2
   16bd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bd8:	881b      	ldrh	r3, [r3, #0]
   16bda:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   16bde:	d305      	bcc.n	16bec <test_ppm_task+0x10c>
    {
      radio_really_lost = TRUE;
   16be0:	f64c 43a6 	movw	r3, #52390	; 0xcca6
   16be4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16be8:	2201      	movs	r2, #1
   16bea:	701a      	strb	r2, [r3, #0]
    }
	//vPrintString("S_1 test_ppm_task end! \n\r"); //SunnyBeike

}
   16bec:	bd80      	pop	{r7, pc}
   16bee:	bf00      	nop

00016bf0 <check_failsafe_task>:
void check_failsafe_task(void)
{
   16bf0:	b580      	push	{r7, lr}
   16bf2:	af00      	add	r7, sp, #0
	//vPrintString("S_9 check_failsafe_task start! \n\r"); //SunnyBeike
    //modified by wanbo
    if ((mode == MODE_MANUAL && !radio_ok) || (mode == MODE_AUTO && !mega128_ok)) 
   16bf4:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16bf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bfc:	781b      	ldrb	r3, [r3, #0]
   16bfe:	2b00      	cmp	r3, #0
   16c00:	d106      	bne.n	16c10 <check_failsafe_task+0x20>
   16c02:	f64c 43a4 	movw	r3, #52388	; 0xcca4
   16c06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c0a:	781b      	ldrb	r3, [r3, #0]
   16c0c:	2b00      	cmp	r3, #0
   16c0e:	d00d      	beq.n	16c2c <check_failsafe_task+0x3c>
   16c10:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16c14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c18:	781b      	ldrb	r3, [r3, #0]
   16c1a:	2b01      	cmp	r3, #1
   16c1c:	d10c      	bne.n	16c38 <check_failsafe_task+0x48>
   16c1e:	f64c 43a5 	movw	r3, #52389	; 0xcca5
   16c22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c26:	781b      	ldrb	r3, [r3, #0]
   16c28:	2b00      	cmp	r3, #0
   16c2a:	d105      	bne.n	16c38 <check_failsafe_task+0x48>
    {
      servo_set(failsafe);
   16c2c:	f648 20cc 	movw	r0, #35532	; 0x8acc
   16c30:	f2c0 0001 	movt	r0, #1
   16c34:	f000 f926 	bl	16e84 <servo_set>
    }
	//vPrintString("S_9 check_failsafe_task end! \n\r"); //SunnyBeike
}
   16c38:	bd80      	pop	{r7, pc}
   16c3a:	bf00      	nop

00016c3c <check_mega128_values_task>:
void check_mega128_values_task(void)
{
   16c3c:	b580      	push	{r7, lr}
   16c3e:	af00      	add	r7, sp, #0
	//vPrintString("S_8 check_mega128_values_task start! \n\r"); //SunnyBeike
// modified by wanbo
     if ( !SpiIsSelected() && spi_was_interrupted ) 
   16c40:	f242 0316 	movw	r3, #8214	; 0x2016
   16c44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c48:	781b      	ldrb	r3, [r3, #0]
   16c4a:	b2db      	uxtb	r3, r3
   16c4c:	f003 0304 	and.w	r3, r3, #4
   16c50:	2b00      	cmp	r3, #0
   16c52:	d028      	beq.n	16ca6 <check_mega128_values_task+0x6a>
   16c54:	f64c 4313 	movw	r3, #52243	; 0xcc13
   16c58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c5c:	781b      	ldrb	r3, [r3, #0]
   16c5e:	b2db      	uxtb	r3, r3
   16c60:	2b00      	cmp	r3, #0
   16c62:	d020      	beq.n	16ca6 <check_mega128_values_task+0x6a>
     {
         if (mega128_receive_valid)
   16c64:	f64c 4312 	movw	r3, #52242	; 0xcc12
   16c68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c6c:	781b      	ldrb	r3, [r3, #0]
   16c6e:	b2db      	uxtb	r3, r3
   16c70:	2b00      	cmp	r3, #0
   16c72:	d018      	beq.n	16ca6 <check_mega128_values_task+0x6a>
         { 
             time_since_last_mega128 = 0;
   16c74:	f64c 43a1 	movw	r3, #52385	; 0xcca1
   16c78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c7c:	2200      	movs	r2, #0
   16c7e:	701a      	strb	r2, [r3, #0]
             mega128_ok = TRUE;
   16c80:	f64c 43a5 	movw	r3, #52389	; 0xcca5
   16c84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c88:	2201      	movs	r2, #1
   16c8a:	701a      	strb	r2, [r3, #0]
             if (mode == MODE_AUTO)
   16c8c:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16c90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c94:	781b      	ldrb	r3, [r3, #0]
   16c96:	2b01      	cmp	r3, #1
   16c98:	d105      	bne.n	16ca6 <check_mega128_values_task+0x6a>
                 servo_set(from_mega128.channels);
   16c9a:	f64c 30e4 	movw	r0, #52196	; 0xcbe4
   16c9e:	f2c2 0004 	movt	r0, #8196	; 0x2004
   16ca2:	f000 f8ef 	bl	16e84 <servo_set>
         }
     }
     if (time_since_last_mega128 == STALLED_TIME) 
   16ca6:	f64c 43a1 	movw	r3, #52385	; 0xcca1
   16caa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16cae:	781b      	ldrb	r3, [r3, #0]
   16cb0:	2b1e      	cmp	r3, #30
   16cb2:	d105      	bne.n	16cc0 <check_mega128_values_task+0x84>
     {
         mega128_ok = FALSE;
   16cb4:	f64c 43a5 	movw	r3, #52389	; 0xcca5
   16cb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16cbc:	2200      	movs	r2, #0
   16cbe:	701a      	strb	r2, [r3, #0]
     }
	//vPrintString("S_8 check_mega128_values_task end! \n\r"); //SunnyBeike
}
   16cc0:	bd80      	pop	{r7, pc}
   16cc2:	bf00      	nop
   16cc4:	f3af 8000 	nop.w

00016cc8 <servo_init>:
 *
 * Ideally, you can use two decade counters to drive 20 servos.
 */
void
servo_init( void )
{
   16cc8:	b480      	push	{r7}
   16cca:	b083      	sub	sp, #12
   16ccc:	af00      	add	r7, sp, #0
  uint8_t			i;

  /* Configure the reset and clock lines */
  _4017_RESET_DDR |= _BV(_4017_RESET_PIN);
   16cce:	f242 0311 	movw	r3, #8209	; 0x2011
   16cd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16cd6:	f242 0211 	movw	r2, #8209	; 0x2011
   16cda:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16cde:	7812      	ldrb	r2, [r2, #0]
   16ce0:	b2d2      	uxtb	r2, r2
   16ce2:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16ce6:	b2d2      	uxtb	r2, r2
   16ce8:	701a      	strb	r2, [r3, #0]
  _4017_CLOCK_DDR |= _BV(_4017_CLOCK_PIN);
   16cea:	f242 0317 	movw	r3, #8215	; 0x2017
   16cee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16cf2:	f242 0217 	movw	r2, #8215	; 0x2017
   16cf6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16cfa:	7812      	ldrb	r2, [r2, #0]
   16cfc:	b2d2      	uxtb	r2, r2
   16cfe:	f042 0202 	orr.w	r2, r2, #2
   16d02:	b2d2      	uxtb	r2, r2
   16d04:	701a      	strb	r2, [r3, #0]

  /* Reset the decade counter */
  sbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16d06:	f242 0312 	movw	r3, #8210	; 0x2012
   16d0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d0e:	f242 0212 	movw	r2, #8210	; 0x2012
   16d12:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16d16:	7812      	ldrb	r2, [r2, #0]
   16d18:	b2d2      	uxtb	r2, r2
   16d1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16d1e:	b2d2      	uxtb	r2, r2
   16d20:	701a      	strb	r2, [r3, #0]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );
   16d22:	f242 0318 	movw	r3, #8216	; 0x2018
   16d26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d2a:	f242 0218 	movw	r2, #8216	; 0x2018
   16d2e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16d32:	7812      	ldrb	r2, [r2, #0]
   16d34:	b2d2      	uxtb	r2, r2
   16d36:	f022 0202 	bic.w	r2, r2, #2
   16d3a:	b2d2      	uxtb	r2, r2
   16d3c:	701a      	strb	r2, [r3, #0]

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   16d3e:	2300      	movs	r3, #0
   16d40:	71fb      	strb	r3, [r7, #7]
   16d42:	e00b      	b.n	16d5c <servo_init+0x94>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
   16d44:	79fa      	ldrb	r2, [r7, #7]
   16d46:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16d4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d4e:	f645 51c0 	movw	r1, #24000	; 0x5dc0
   16d52:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   16d56:	79fb      	ldrb	r3, [r7, #7]
   16d58:	3301      	adds	r3, #1
   16d5a:	71fb      	strb	r3, [r7, #7]
   16d5c:	79fb      	ldrb	r3, [r7, #7]
   16d5e:	2b09      	cmp	r3, #9
   16d60:	d9f0      	bls.n	16d44 <servo_init+0x7c>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
	
  /* Set servos to go off some long time from now */
  SERVO_OCR	= 32768ul;
   16d62:	f242 032a 	movw	r3, #8234	; 0x202a
   16d66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d6a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   16d6e:	801a      	strh	r2, [r3, #0]

  /*
   * Configure output compare to toggle the output bits.
   */
  TCCR1A |=  _BV(SERVO_COM0 );
   16d70:	f242 032f 	movw	r3, #8239	; 0x202f
   16d74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d78:	f242 022f 	movw	r2, #8239	; 0x202f
   16d7c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16d80:	7812      	ldrb	r2, [r2, #0]
   16d82:	b2d2      	uxtb	r2, r2
   16d84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16d88:	b2d2      	uxtb	r2, r2
   16d8a:	701a      	strb	r2, [r3, #0]
	
  /* Clear the interrupt flags in case they are set */
  TIFR = _BV(SERVO_FLAG);
   16d8c:	f242 0336 	movw	r3, #8246	; 0x2036
   16d90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d94:	2210      	movs	r2, #16
   16d96:	701a      	strb	r2, [r3, #0]

  /* Unassert the decade counter reset to start it running */
  cbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16d98:	f242 0312 	movw	r3, #8210	; 0x2012
   16d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16da0:	f242 0212 	movw	r2, #8210	; 0x2012
   16da4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16da8:	7812      	ldrb	r2, [r2, #0]
   16daa:	b2d2      	uxtb	r2, r2
   16dac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   16db0:	b2d2      	uxtb	r2, r2
   16db2:	701a      	strb	r2, [r3, #0]

  /* Enable our output compare interrupts */
  TIMSK |= _BV(SERVO_ENABLE );
   16db4:	f242 0337 	movw	r3, #8247	; 0x2037
   16db8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16dbc:	f242 0237 	movw	r2, #8247	; 0x2037
   16dc0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16dc4:	7812      	ldrb	r2, [r2, #0]
   16dc6:	b2d2      	uxtb	r2, r2
   16dc8:	f042 0210 	orr.w	r2, r2, #16
   16dcc:	b2d2      	uxtb	r2, r2
   16dce:	701a      	strb	r2, [r3, #0]
}
   16dd0:	370c      	adds	r7, #12
   16dd2:	46bd      	mov	sp, r7
   16dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
   16dd8:	4770      	bx	lr
   16dda:	bf00      	nop

00016ddc <servo_set_one>:

  servo++;
}
#endif

void servo_set_one(uint8_t servo, uint16_t value_us) {
   16ddc:	b480      	push	{r7}
   16dde:	b083      	sub	sp, #12
   16de0:	af00      	add	r7, sp, #0
   16de2:	4602      	mov	r2, r0
   16de4:	460b      	mov	r3, r1
   16de6:	71fa      	strb	r2, [r7, #7]
   16de8:	80bb      	strh	r3, [r7, #4]
  servo_widths[servo] = ChopServo(CLOCK*value_us);
   16dea:	79f9      	ldrb	r1, [r7, #7]
   16dec:	88bb      	ldrh	r3, [r7, #4]
   16dee:	011b      	lsls	r3, r3, #4
   16df0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16df4:	d308      	bcc.n	16e08 <servo_set_one+0x2c>
   16df6:	88bb      	ldrh	r3, [r7, #4]
   16df8:	011b      	lsls	r3, r3, #4
   16dfa:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16dfe:	bf28      	it	cs
   16e00:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16e04:	b29a      	uxth	r2, r3
   16e06:	e001      	b.n	16e0c <servo_set_one+0x30>
   16e08:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16e0c:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16e10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16e14:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
   16e18:	370c      	adds	r7, #12
   16e1a:	46bd      	mov	sp, r7
   16e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
   16e20:	4770      	bx	lr
   16e22:	bf00      	nop

00016e24 <servo_transmit>:

void 
servo_transmit(void) {
   16e24:	b580      	push	{r7, lr}
   16e26:	b082      	sub	sp, #8
   16e28:	af00      	add	r7, sp, #0
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);
   16e2a:	2000      	movs	r0, #0
   16e2c:	f000 f9e6 	bl	171fc <uart_transmit>
   16e30:	2000      	movs	r0, #0
   16e32:	f000 f9e3 	bl	171fc <uart_transmit>

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16e36:	2300      	movs	r3, #0
   16e38:	71fb      	strb	r3, [r7, #7]
   16e3a:	e01a      	b.n	16e72 <servo_transmit+0x4e>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
   16e3c:	79fa      	ldrb	r2, [r7, #7]
   16e3e:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16e42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16e46:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16e4a:	0a1b      	lsrs	r3, r3, #8
   16e4c:	b29b      	uxth	r3, r3
   16e4e:	b2db      	uxtb	r3, r3
   16e50:	4618      	mov	r0, r3
   16e52:	f000 f9d3 	bl	171fc <uart_transmit>
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
   16e56:	79fa      	ldrb	r2, [r7, #7]
   16e58:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16e5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16e60:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16e64:	b2db      	uxtb	r3, r3
   16e66:	4618      	mov	r0, r3
   16e68:	f000 f9c8 	bl	171fc <uart_transmit>
servo_transmit(void) {
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16e6c:	79fb      	ldrb	r3, [r7, #7]
   16e6e:	3301      	adds	r3, #1
   16e70:	71fb      	strb	r3, [r7, #7]
   16e72:	79fb      	ldrb	r3, [r7, #7]
   16e74:	2b09      	cmp	r3, #9
   16e76:	d9e1      	bls.n	16e3c <servo_transmit+0x18>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
  }
  uart_transmit((uint8_t)'\n');
   16e78:	200a      	movs	r0, #10
   16e7a:	f000 f9bf 	bl	171fc <uart_transmit>
	//vPrintString("S_10 servo_transmit end! \n\r"); //SunnyBeike
}
   16e7e:	3708      	adds	r7, #8
   16e80:	46bd      	mov	sp, r7
   16e82:	bd80      	pop	{r7, pc}

00016e84 <servo_set>:
 *
 * defines how servos react to radio control or autopilot channels
 *
 */

void servo_set(const pprz_t values[]) {
   16e84:	b5b0      	push	{r4, r5, r7, lr}
   16e86:	b084      	sub	sp, #16
   16e88:	af00      	add	r7, sp, #0
   16e8a:	6078      	str	r0, [r7, #4]
  ServoSet(values); /*Generated from airframe.xml */
   16e8c:	687b      	ldr	r3, [r7, #4]
   16e8e:	330a      	adds	r3, #10
   16e90:	881b      	ldrh	r3, [r3, #0]
   16e92:	b21b      	sxth	r3, r3
   16e94:	005b      	lsls	r3, r3, #1
   16e96:	4618      	mov	r0, r3
   16e98:	f000 fe64 	bl	17b64 <__aeabi_i2d>
   16e9c:	4602      	mov	r2, r0
   16e9e:	460b      	mov	r3, r1
   16ea0:	4610      	mov	r0, r2
   16ea2:	4619      	mov	r1, r3
   16ea4:	a3a6      	add	r3, pc, #664	; (adr r3, 17140 <servo_set+0x2bc>)
   16ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
   16eaa:	f000 fec1 	bl	17c30 <__aeabi_dmul>
   16eae:	4602      	mov	r2, r0
   16eb0:	460b      	mov	r3, r1
   16eb2:	4610      	mov	r0, r2
   16eb4:	4619      	mov	r1, r3
   16eb6:	f001 f955 	bl	18164 <__aeabi_d2iz>
   16eba:	4603      	mov	r3, r0
   16ebc:	b29b      	uxth	r3, r3
   16ebe:	b29b      	uxth	r3, r3
   16ec0:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16ec4:	81fb      	strh	r3, [r7, #14]
   16ec6:	89fb      	ldrh	r3, [r7, #14]
   16ec8:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16ecc:	d307      	bcc.n	16ede <servo_set+0x5a>
   16ece:	89fb      	ldrh	r3, [r7, #14]
   16ed0:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16ed4:	bf28      	it	cs
   16ed6:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16eda:	b29a      	uxth	r2, r3
   16edc:	e001      	b.n	16ee2 <servo_set+0x5e>
   16ede:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16ee2:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16ee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16eea:	80da      	strh	r2, [r3, #6]
   16eec:	687b      	ldr	r3, [r7, #4]
   16eee:	881b      	ldrh	r3, [r3, #0]
   16ef0:	b21b      	sxth	r3, r3
   16ef2:	005b      	lsls	r3, r3, #1
   16ef4:	4618      	mov	r0, r3
   16ef6:	f000 fe35 	bl	17b64 <__aeabi_i2d>
   16efa:	4602      	mov	r2, r0
   16efc:	460b      	mov	r3, r1
   16efe:	4610      	mov	r0, r2
   16f00:	4619      	mov	r1, r3
   16f02:	a38f      	add	r3, pc, #572	; (adr r3, 17140 <servo_set+0x2bc>)
   16f04:	e9d3 2300 	ldrd	r2, r3, [r3]
   16f08:	f000 fe92 	bl	17c30 <__aeabi_dmul>
   16f0c:	4602      	mov	r2, r0
   16f0e:	460b      	mov	r3, r1
   16f10:	4610      	mov	r0, r2
   16f12:	4619      	mov	r1, r3
   16f14:	f001 f926 	bl	18164 <__aeabi_d2iz>
   16f18:	4603      	mov	r3, r0
   16f1a:	b29b      	uxth	r3, r3
   16f1c:	b29b      	uxth	r3, r3
   16f1e:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16f22:	81fb      	strh	r3, [r7, #14]
   16f24:	89fb      	ldrh	r3, [r7, #14]
   16f26:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16f2a:	d307      	bcc.n	16f3c <servo_set+0xb8>
   16f2c:	89fb      	ldrh	r3, [r7, #14]
   16f2e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16f32:	bf28      	it	cs
   16f34:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16f38:	b29a      	uxth	r2, r3
   16f3a:	e001      	b.n	16f40 <servo_set+0xbc>
   16f3c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16f40:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16f44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16f48:	825a      	strh	r2, [r3, #18]
   16f4a:	687b      	ldr	r3, [r7, #4]
   16f4c:	3304      	adds	r3, #4
   16f4e:	881b      	ldrh	r3, [r3, #0]
   16f50:	b21b      	sxth	r3, r3
   16f52:	4618      	mov	r0, r3
   16f54:	f000 fe06 	bl	17b64 <__aeabi_i2d>
   16f58:	4602      	mov	r2, r0
   16f5a:	460b      	mov	r3, r1
   16f5c:	4610      	mov	r0, r2
   16f5e:	4619      	mov	r1, r3
   16f60:	a379      	add	r3, pc, #484	; (adr r3, 17148 <servo_set+0x2c4>)
   16f62:	e9d3 2300 	ldrd	r2, r3, [r3]
   16f66:	f000 fe63 	bl	17c30 <__aeabi_dmul>
   16f6a:	4602      	mov	r2, r0
   16f6c:	460b      	mov	r3, r1
   16f6e:	4610      	mov	r0, r2
   16f70:	4619      	mov	r1, r3
   16f72:	f001 f8f7 	bl	18164 <__aeabi_d2iz>
   16f76:	4603      	mov	r3, r0
   16f78:	b29b      	uxth	r3, r3
   16f7a:	b29b      	uxth	r3, r3
   16f7c:	f503 43bf 	add.w	r3, r3, #24448	; 0x5f80
   16f80:	3320      	adds	r3, #32
   16f82:	81fb      	strh	r3, [r7, #14]
   16f84:	89fb      	ldrh	r3, [r7, #14]
   16f86:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16f8a:	d307      	bcc.n	16f9c <servo_set+0x118>
   16f8c:	89fb      	ldrh	r3, [r7, #14]
   16f8e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16f92:	bf28      	it	cs
   16f94:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16f98:	b29a      	uxth	r2, r3
   16f9a:	e001      	b.n	16fa0 <servo_set+0x11c>
   16f9c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16fa0:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16fa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16fa8:	819a      	strh	r2, [r3, #12]
   16faa:	687b      	ldr	r3, [r7, #4]
   16fac:	885b      	ldrh	r3, [r3, #2]
   16fae:	81bb      	strh	r3, [r7, #12]
   16fb0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16fb4:	2b00      	cmp	r3, #0
   16fb6:	dd06      	ble.n	16fc6 <servo_set+0x142>
   16fb8:	f04f 0400 	mov.w	r4, #0
   16fbc:	f04f 0500 	mov.w	r5, #0
   16fc0:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   16fc4:	e002      	b.n	16fcc <servo_set+0x148>
   16fc6:	a562      	add	r5, pc, #392	; (adr r5, 17150 <servo_set+0x2cc>)
   16fc8:	e9d5 4500 	ldrd	r4, r5, [r5]
   16fcc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16fd0:	4618      	mov	r0, r3
   16fd2:	f000 fdc7 	bl	17b64 <__aeabi_i2d>
   16fd6:	4602      	mov	r2, r0
   16fd8:	460b      	mov	r3, r1
   16fda:	4620      	mov	r0, r4
   16fdc:	4629      	mov	r1, r5
   16fde:	f000 fe27 	bl	17c30 <__aeabi_dmul>
   16fe2:	4602      	mov	r2, r0
   16fe4:	460b      	mov	r3, r1
   16fe6:	4610      	mov	r0, r2
   16fe8:	4619      	mov	r1, r3
   16fea:	a35b      	add	r3, pc, #364	; (adr r3, 17158 <servo_set+0x2d4>)
   16fec:	e9d3 2300 	ldrd	r2, r3, [r3]
   16ff0:	f000 fe1e 	bl	17c30 <__aeabi_dmul>
   16ff4:	4602      	mov	r2, r0
   16ff6:	460b      	mov	r3, r1
   16ff8:	4610      	mov	r0, r2
   16ffa:	4619      	mov	r1, r3
   16ffc:	f001 f8b2 	bl	18164 <__aeabi_d2iz>
   17000:	4603      	mov	r3, r0
   17002:	b29b      	uxth	r3, r3
   17004:	b29b      	uxth	r3, r3
   17006:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
   1700a:	81fb      	strh	r3, [r7, #14]
   1700c:	89fb      	ldrh	r3, [r7, #14]
   1700e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   17012:	d307      	bcc.n	17024 <servo_set+0x1a0>
   17014:	89fb      	ldrh	r3, [r7, #14]
   17016:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   1701a:	bf28      	it	cs
   1701c:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   17020:	b29a      	uxth	r2, r3
   17022:	e001      	b.n	17028 <servo_set+0x1a4>
   17024:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   17028:	f64c 43ac 	movw	r3, #52396	; 0xccac
   1702c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17030:	801a      	strh	r2, [r3, #0]
   17032:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   17036:	2b00      	cmp	r3, #0
   17038:	dd03      	ble.n	17042 <servo_set+0x1be>
   1703a:	a545      	add	r5, pc, #276	; (adr r5, 17150 <servo_set+0x2cc>)
   1703c:	e9d5 4500 	ldrd	r4, r5, [r5]
   17040:	e005      	b.n	1704e <servo_set+0x1ca>
   17042:	f04f 0400 	mov.w	r4, #0
   17046:	f04f 0500 	mov.w	r5, #0
   1704a:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   1704e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   17052:	4618      	mov	r0, r3
   17054:	f000 fd86 	bl	17b64 <__aeabi_i2d>
   17058:	4602      	mov	r2, r0
   1705a:	460b      	mov	r3, r1
   1705c:	4620      	mov	r0, r4
   1705e:	4629      	mov	r1, r5
   17060:	f000 fde6 	bl	17c30 <__aeabi_dmul>
   17064:	4602      	mov	r2, r0
   17066:	460b      	mov	r3, r1
   17068:	4610      	mov	r0, r2
   1706a:	4619      	mov	r1, r3
   1706c:	a33c      	add	r3, pc, #240	; (adr r3, 17160 <servo_set+0x2dc>)
   1706e:	e9d3 2300 	ldrd	r2, r3, [r3]
   17072:	f000 fddd 	bl	17c30 <__aeabi_dmul>
   17076:	4602      	mov	r2, r0
   17078:	460b      	mov	r3, r1
   1707a:	4610      	mov	r0, r2
   1707c:	4619      	mov	r1, r3
   1707e:	f001 f871 	bl	18164 <__aeabi_d2iz>
   17082:	4603      	mov	r3, r0
   17084:	b29b      	uxth	r3, r3
   17086:	b29b      	uxth	r3, r3
   17088:	f503 43ce 	add.w	r3, r3, #26368	; 0x6700
   1708c:	3320      	adds	r3, #32
   1708e:	81fb      	strh	r3, [r7, #14]
   17090:	89fb      	ldrh	r3, [r7, #14]
   17092:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   17096:	d307      	bcc.n	170a8 <servo_set+0x224>
   17098:	89fb      	ldrh	r3, [r7, #14]
   1709a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   1709e:	bf28      	it	cs
   170a0:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   170a4:	b29a      	uxth	r2, r3
   170a6:	e001      	b.n	170ac <servo_set+0x228>
   170a8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   170ac:	f64c 43ac 	movw	r3, #52396	; 0xccac
   170b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   170b4:	809a      	strh	r2, [r3, #4]
   170b6:	687b      	ldr	r3, [r7, #4]
   170b8:	3306      	adds	r3, #6
   170ba:	881b      	ldrh	r3, [r3, #0]
   170bc:	b21b      	sxth	r3, r3
   170be:	4618      	mov	r0, r3
   170c0:	f000 fd50 	bl	17b64 <__aeabi_i2d>
   170c4:	4604      	mov	r4, r0
   170c6:	460d      	mov	r5, r1
   170c8:	687b      	ldr	r3, [r7, #4]
   170ca:	3302      	adds	r3, #2
   170cc:	881b      	ldrh	r3, [r3, #0]
   170ce:	b21b      	sxth	r3, r3
   170d0:	4618      	mov	r0, r3
   170d2:	f000 fd47 	bl	17b64 <__aeabi_i2d>
   170d6:	4602      	mov	r2, r0
   170d8:	460b      	mov	r3, r1
   170da:	4620      	mov	r0, r4
   170dc:	4629      	mov	r1, r5
   170de:	f000 fbf5 	bl	178cc <__adddf3>
   170e2:	4602      	mov	r2, r0
   170e4:	460b      	mov	r3, r1
   170e6:	4610      	mov	r0, r2
   170e8:	4619      	mov	r1, r3
   170ea:	a31f      	add	r3, pc, #124	; (adr r3, 17168 <servo_set+0x2e4>)
   170ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   170f0:	f000 fd9e 	bl	17c30 <__aeabi_dmul>
   170f4:	4602      	mov	r2, r0
   170f6:	460b      	mov	r3, r1
   170f8:	4610      	mov	r0, r2
   170fa:	4619      	mov	r1, r3
   170fc:	f001 f832 	bl	18164 <__aeabi_d2iz>
   17100:	4603      	mov	r3, r0
   17102:	b29b      	uxth	r3, r3
   17104:	b29b      	uxth	r3, r3
   17106:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
   1710a:	3320      	adds	r3, #32
   1710c:	81fb      	strh	r3, [r7, #14]
   1710e:	89fb      	ldrh	r3, [r7, #14]
   17110:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   17114:	d307      	bcc.n	17126 <servo_set+0x2a2>
   17116:	89fb      	ldrh	r3, [r7, #14]
   17118:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   1711c:	bf28      	it	cs
   1711e:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   17122:	b29a      	uxth	r2, r3
   17124:	e001      	b.n	1712a <servo_set+0x2a6>
   17126:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   1712a:	f64c 43ac 	movw	r3, #52396	; 0xccac
   1712e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17132:	81da      	strh	r2, [r3, #14]
}
   17134:	3710      	adds	r7, #16
   17136:	46bd      	mov	sp, r7
   17138:	bdb0      	pop	{r4, r5, r7, pc}
   1713a:	bf00      	nop
   1713c:	f3af 8000 	nop.w
   17140:	aaaa9ef0 	.word	0xaaaa9ef0
   17144:	3feaaaaa 	.word	0x3feaaaaa
   17148:	fc96473e 	.word	0xfc96473e
   1714c:	3fdfc962 	.word	0x3fdfc962
   17150:	51eb851f 	.word	0x51eb851f
   17154:	3fe51eb8 	.word	0x3fe51eb8
   17158:	9999999a 	.word	0x9999999a
   1715c:	bfe19999 	.word	0xbfe19999
   17160:	aaaa9ef0 	.word	0xaaaa9ef0
   17164:	bfe0aaaa 	.word	0xbfe0aaaa
   17168:	eeeed77a 	.word	0xeeeed77a
   1716c:	bfdeeeee 	.word	0xbfdeeeee

00017170 <uart_init_tx>:
 * UART Baud rate generation settings:
 *
 * With 16.0 MHz clock,UBRR=25  => 38400 baud
 *
 */
void uart_init_tx( void ) {
   17170:	b480      	push	{r7}
   17172:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRRH = 0; 
   17174:	f242 0320 	movw	r3, #8224	; 0x2020
   17178:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1717c:	2200      	movs	r2, #0
   1717e:	701a      	strb	r2, [r3, #0]
  UBRRL = 25; 
   17180:	f242 0309 	movw	r3, #8201	; 0x2009
   17184:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17188:	2219      	movs	r2, #25
   1718a:	701a      	strb	r2, [r3, #0]
  /* single speed */ 
  UCSRA = 0; 
   1718c:	f242 030b 	movw	r3, #8203	; 0x200b
   17190:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17194:	2200      	movs	r2, #0
   17196:	701a      	strb	r2, [r3, #0]
  /* Enable transmitter */ 
  UCSRB = _BV(TXEN); 
   17198:	f242 030a 	movw	r3, #8202	; 0x200a
   1719c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   171a0:	2208      	movs	r2, #8
   171a2:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0); 
   171a4:	f242 0320 	movw	r3, #8224	; 0x2020
   171a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   171ac:	2286      	movs	r2, #134	; 0x86
   171ae:	701a      	strb	r2, [r3, #0]
}
   171b0:	46bd      	mov	sp, r7
   171b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   171b6:	4770      	bx	lr

000171b8 <uart_init_rx>:

void uart_init_rx() {
   171b8:	b480      	push	{r7}
   171ba:	af00      	add	r7, sp, #0
  /* Enable receiver               */ 
  UCSRB |= _BV(RXEN); 
   171bc:	f242 030a 	movw	r3, #8202	; 0x200a
   171c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   171c4:	f242 020a 	movw	r2, #8202	; 0x200a
   171c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   171cc:	7812      	ldrb	r2, [r2, #0]
   171ce:	b2d2      	uxtb	r2, r2
   171d0:	f042 0210 	orr.w	r2, r2, #16
   171d4:	b2d2      	uxtb	r2, r2
   171d6:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi( UCSRB, RXCIE ); 
   171d8:	f242 030a 	movw	r3, #8202	; 0x200a
   171dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   171e0:	f242 020a 	movw	r2, #8202	; 0x200a
   171e4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   171e8:	7812      	ldrb	r2, [r2, #0]
   171ea:	b2d2      	uxtb	r2, r2
   171ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
   171f0:	b2d2      	uxtb	r2, r2
   171f2:	701a      	strb	r2, [r3, #0]
}
   171f4:	46bd      	mov	sp, r7
   171f6:	f85d 7b04 	ldr.w	r7, [sp], #4
   171fa:	4770      	bx	lr

000171fc <uart_transmit>:

void uart_transmit( unsigned char data ) {
   171fc:	b480      	push	{r7}
   171fe:	b083      	sub	sp, #12
   17200:	af00      	add	r7, sp, #0
   17202:	4603      	mov	r3, r0
   17204:	71fb      	strb	r3, [r7, #7]
  if (UCSRB & _BV(TXCIE)) {
   17206:	f242 030a 	movw	r3, #8202	; 0x200a
   1720a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1720e:	781b      	ldrb	r3, [r3, #0]
   17210:	b2db      	uxtb	r3, r3
   17212:	f003 0340 	and.w	r3, r3, #64	; 0x40
   17216:	2b00      	cmp	r3, #0
   17218:	d028      	beq.n	1726c <uart_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail == tx_head + 1) { /* BUF_SIZE = 256 */
   1721a:	f64c 43c1 	movw	r3, #52417	; 0xccc1
   1721e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17222:	781b      	ldrb	r3, [r3, #0]
   17224:	b2db      	uxtb	r3, r3
   17226:	461a      	mov	r2, r3
   17228:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   1722c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17230:	781b      	ldrb	r3, [r3, #0]
   17232:	3301      	adds	r3, #1
   17234:	429a      	cmp	r2, r3
   17236:	d100      	bne.n	1723a <uart_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   17238:	e02c      	b.n	17294 <uart_transmit+0x98>
    }
    tx_buf[tx_head] = data;
   1723a:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   1723e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17242:	781b      	ldrb	r3, [r3, #0]
   17244:	461a      	mov	r2, r3
   17246:	f64c 43c4 	movw	r3, #52420	; 0xccc4
   1724a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1724e:	79f9      	ldrb	r1, [r7, #7]
   17250:	5499      	strb	r1, [r3, r2]
    tx_head++; /* BUF_SIZE = 256 */
   17252:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   17256:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1725a:	781b      	ldrb	r3, [r3, #0]
   1725c:	3301      	adds	r3, #1
   1725e:	b2da      	uxtb	r2, r3
   17260:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   17264:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17268:	701a      	strb	r2, [r3, #0]
   1726a:	e013      	b.n	17294 <uart_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR = data;
   1726c:	f242 030c 	movw	r3, #8204	; 0x200c
   17270:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17274:	79fa      	ldrb	r2, [r7, #7]
   17276:	701a      	strb	r2, [r3, #0]
    sbi(UCSRB, TXCIE);
   17278:	f242 030a 	movw	r3, #8202	; 0x200a
   1727c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17280:	f242 020a 	movw	r2, #8202	; 0x200a
   17284:	f2c2 0200 	movt	r2, #8192	; 0x2000
   17288:	7812      	ldrb	r2, [r2, #0]
   1728a:	b2d2      	uxtb	r2, r2
   1728c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   17290:	b2d2      	uxtb	r2, r2
   17292:	701a      	strb	r2, [r3, #0]
  }
}
   17294:	370c      	adds	r7, #12
   17296:	46bd      	mov	sp, r7
   17298:	f85d 7b04 	ldr.w	r7, [sp], #4
   1729c:	4770      	bx	lr
   1729e:	bf00      	nop

000172a0 <uart_print_hex>:

void uart_print_hex ( uint8_t c ) {
   172a0:	b590      	push	{r4, r7, lr}
   172a2:	b089      	sub	sp, #36	; 0x24
   172a4:	af00      	add	r7, sp, #0
   172a6:	4603      	mov	r3, r0
   172a8:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   172aa:	f648 3320 	movw	r3, #35616	; 0x8b20
   172ae:	f2c0 0301 	movt	r3, #1
   172b2:	f107 040c 	add.w	r4, r7, #12
   172b6:	6818      	ldr	r0, [r3, #0]
   172b8:	6859      	ldr	r1, [r3, #4]
   172ba:	689a      	ldr	r2, [r3, #8]
   172bc:	68db      	ldr	r3, [r3, #12]
   172be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   172c0:	79fb      	ldrb	r3, [r7, #7]
   172c2:	091b      	lsrs	r3, r3, #4
   172c4:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   172c6:	79fb      	ldrb	r3, [r7, #7]
   172c8:	f003 030f 	and.w	r3, r3, #15
   172cc:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
        high = 15;
   172ce:	230f      	movs	r3, #15
   172d0:	77fb      	strb	r3, [r7, #31]
        low = 15;
   172d2:	230f      	movs	r3, #15
   172d4:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */

    uart_transmit(hex[high]);
   172d6:	7ffb      	ldrb	r3, [r7, #31]
   172d8:	f107 0220 	add.w	r2, r7, #32
   172dc:	4413      	add	r3, r2
   172de:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   172e2:	4618      	mov	r0, r3
   172e4:	f7ff ff8a 	bl	171fc <uart_transmit>
  uart_transmit(hex[low]);
   172e8:	7fbb      	ldrb	r3, [r7, #30]
   172ea:	f107 0220 	add.w	r2, r7, #32
   172ee:	4413      	add	r3, r2
   172f0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   172f4:	4618      	mov	r0, r3
   172f6:	f7ff ff81 	bl	171fc <uart_transmit>
} 
   172fa:	3724      	adds	r7, #36	; 0x24
   172fc:	46bd      	mov	sp, r7
   172fe:	bd90      	pop	{r4, r7, pc}

00017300 <uart_print_hex16>:

void uart_print_hex16 ( uint16_t c ) {
   17300:	b580      	push	{r7, lr}
   17302:	b084      	sub	sp, #16
   17304:	af00      	add	r7, sp, #0
   17306:	4603      	mov	r3, r0
   17308:	80fb      	strh	r3, [r7, #6]
  uint8_t high = (uint8_t)(c>>8);
   1730a:	88fb      	ldrh	r3, [r7, #6]
   1730c:	0a1b      	lsrs	r3, r3, #8
   1730e:	b29b      	uxth	r3, r3
   17310:	73fb      	strb	r3, [r7, #15]
  uint8_t low  = (uint8_t)(c);
   17312:	88fb      	ldrh	r3, [r7, #6]
   17314:	73bb      	strb	r3, [r7, #14]
  uart_print_hex(high);
   17316:	7bfb      	ldrb	r3, [r7, #15]
   17318:	4618      	mov	r0, r3
   1731a:	f7ff ffc1 	bl	172a0 <uart_print_hex>
  uart_print_hex(low);
   1731e:	7bbb      	ldrb	r3, [r7, #14]
   17320:	4618      	mov	r0, r3
   17322:	f7ff ffbd 	bl	172a0 <uart_print_hex>
}
   17326:	3710      	adds	r7, #16
   17328:	46bd      	mov	sp, r7
   1732a:	bd80      	pop	{r7, pc}

0001732c <uart_print_string>:

void uart_print_string(const uint8_t* s) {
   1732c:	b580      	push	{r7, lr}
   1732e:	b084      	sub	sp, #16
   17330:	af00      	add	r7, sp, #0
   17332:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   17334:	2300      	movs	r3, #0
   17336:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   17338:	e009      	b.n	1734e <uart_print_string+0x22>
    uart_transmit(s[i]);
   1733a:	7bfb      	ldrb	r3, [r7, #15]
   1733c:	687a      	ldr	r2, [r7, #4]
   1733e:	4413      	add	r3, r2
   17340:	781b      	ldrb	r3, [r3, #0]
   17342:	4618      	mov	r0, r3
   17344:	f7ff ff5a 	bl	171fc <uart_transmit>
    i++;
   17348:	7bfb      	ldrb	r3, [r7, #15]
   1734a:	3301      	adds	r3, #1
   1734c:	73fb      	strb	r3, [r7, #15]
  uart_print_hex(low);
}

void uart_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   1734e:	7bfb      	ldrb	r3, [r7, #15]
   17350:	687a      	ldr	r2, [r7, #4]
   17352:	4413      	add	r3, r2
   17354:	781b      	ldrb	r3, [r3, #0]
   17356:	2b00      	cmp	r3, #0
   17358:	d1ef      	bne.n	1733a <uart_print_string+0xe>
    uart_transmit(s[i]);
    i++;
  }
}
   1735a:	3710      	adds	r7, #16
   1735c:	46bd      	mov	sp, r7
   1735e:	bd80      	pop	{r7, pc}

00017360 <SIG_UART_TRANS>:

SIGNAL(SIG_UART_TRANS) {
   17360:	b480      	push	{r7}
   17362:	af00      	add	r7, sp, #0
  if (tx_head == tx_tail) {
   17364:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   17368:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1736c:	781a      	ldrb	r2, [r3, #0]
   1736e:	f64c 43c1 	movw	r3, #52417	; 0xccc1
   17372:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17376:	781b      	ldrb	r3, [r3, #0]
   17378:	b2db      	uxtb	r3, r3
   1737a:	429a      	cmp	r2, r3
   1737c:	d10e      	bne.n	1739c <SIG_UART_TRANS+0x3c>
    /* Nothing more to send */
    cbi(UCSRB, TXCIE); /* disable interrupt */
   1737e:	f242 030a 	movw	r3, #8202	; 0x200a
   17382:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17386:	f242 020a 	movw	r2, #8202	; 0x200a
   1738a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1738e:	7812      	ldrb	r2, [r2, #0]
   17390:	b2d2      	uxtb	r2, r2
   17392:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   17396:	b2d2      	uxtb	r2, r2
   17398:	701a      	strb	r2, [r3, #0]
   1739a:	e01d      	b.n	173d8 <SIG_UART_TRANS+0x78>
  } else {
    UDR = tx_buf[tx_tail];
   1739c:	f242 030c 	movw	r3, #8204	; 0x200c
   173a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   173a4:	f64c 42c1 	movw	r2, #52417	; 0xccc1
   173a8:	f2c2 0204 	movt	r2, #8196	; 0x2004
   173ac:	7812      	ldrb	r2, [r2, #0]
   173ae:	b2d2      	uxtb	r2, r2
   173b0:	4611      	mov	r1, r2
   173b2:	f64c 42c4 	movw	r2, #52420	; 0xccc4
   173b6:	f2c2 0204 	movt	r2, #8196	; 0x2004
   173ba:	5c52      	ldrb	r2, [r2, r1]
   173bc:	701a      	strb	r2, [r3, #0]
    tx_tail++; /* warning tx_buf_len is 256 */
   173be:	f64c 43c1 	movw	r3, #52417	; 0xccc1
   173c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   173c6:	781b      	ldrb	r3, [r3, #0]
   173c8:	b2db      	uxtb	r3, r3
   173ca:	3301      	adds	r3, #1
   173cc:	b2da      	uxtb	r2, r3
   173ce:	f64c 43c1 	movw	r3, #52417	; 0xccc1
   173d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   173d6:	701a      	strb	r2, [r3, #0]
  }
}
   173d8:	46bd      	mov	sp, r7
   173da:	f85d 7b04 	ldr.w	r7, [sp], #4
   173de:	4770      	bx	lr

000173e0 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
   173e0:	b580      	push	{r7, lr}
   173e2:	b082      	sub	sp, #8
   173e4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   173e6:	2010      	movs	r0, #16
   173e8:	2101      	movs	r1, #1
   173ea:	f7e9 fce9 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
   173ee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   173f2:	f2c4 0001 	movt	r0, #16385	; 0x4001
   173f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   173fa:	2201      	movs	r2, #1
   173fc:	f7e9 fff0 	bl	13e0 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
   17400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   17404:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   17406:	2310      	movs	r3, #16
   17408:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   1740a:	2303      	movs	r3, #3
   1740c:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   1740e:	1d3b      	adds	r3, r7, #4
   17410:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   17414:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17418:	4619      	mov	r1, r3
   1741a:	f7e9 fea5 	bl	1168 <GPIO_Init>
}
   1741e:	3708      	adds	r7, #8
   17420:	46bd      	mov	sp, r7
   17422:	bd80      	pop	{r7, pc}

00017424 <init_button>:

void init_button(void)
{
   17424:	b580      	push	{r7, lr}
   17426:	b082      	sub	sp, #8
   17428:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   1742a:	2004      	movs	r0, #4
   1742c:	2101      	movs	r1, #1
   1742e:	f7e9 fcc7 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
   17432:	2301      	movs	r3, #1
   17434:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   17436:	2304      	movs	r3, #4
   17438:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   1743a:	2303      	movs	r3, #3
   1743c:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   1743e:	1d3b      	adds	r3, r7, #4
   17440:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   17444:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17448:	4619      	mov	r1, r3
   1744a:	f7e9 fe8d 	bl	1168 <GPIO_Init>
}
   1744e:	3708      	adds	r7, #8
   17450:	46bd      	mov	sp, r7
   17452:	bd80      	pop	{r7, pc}

00017454 <enable_button_interrupts>:

void enable_button_interrupts(void)
{
   17454:	b580      	push	{r7, lr}
   17456:	b084      	sub	sp, #16
   17458:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   1745a:	2001      	movs	r0, #1
   1745c:	2101      	movs	r1, #1
   1745e:	f7e9 fcaf 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
   17462:	2000      	movs	r0, #0
   17464:	2100      	movs	r1, #0
   17466:	f7ea f8b3 	bl	15d0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
   1746a:	2301      	movs	r3, #1
   1746c:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   1746e:	2300      	movs	r3, #0
   17470:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
   17472:	2308      	movs	r3, #8
   17474:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   17476:	2301      	movs	r3, #1
   17478:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
   1747a:	f107 0308 	add.w	r3, r7, #8
   1747e:	4618      	mov	r0, r3
   17480:	f7ea fdac 	bl	1fdc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
   17484:	2306      	movs	r3, #6
   17486:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   17488:	230f      	movs	r3, #15
   1748a:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
   1748c:	230f      	movs	r3, #15
   1748e:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   17490:	2301      	movs	r3, #1
   17492:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   17494:	1d3b      	adds	r3, r7, #4
   17496:	4618      	mov	r0, r3
   17498:	f7ea feda 	bl	2250 <NVIC_Init>
}
   1749c:	3710      	adds	r7, #16
   1749e:	46bd      	mov	sp, r7
   174a0:	bd80      	pop	{r7, pc}
   174a2:	bf00      	nop

000174a4 <init_rs232>:

void init_rs232(void)
{
   174a4:	b580      	push	{r7, lr}
   174a6:	b086      	sub	sp, #24
   174a8:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
   174aa:	2005      	movs	r0, #5
   174ac:	2101      	movs	r1, #1
   174ae:	f7e9 fc87 	bl	dc0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   174b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   174b6:	2101      	movs	r1, #1
   174b8:	f7e9 fcaa 	bl	e10 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   174bc:	2308      	movs	r3, #8
   174be:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   174c0:	2304      	movs	r3, #4
   174c2:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   174c4:	1d3b      	adds	r3, r7, #4
   174c6:	f44f 6000 	mov.w	r0, #2048	; 0x800
   174ca:	f2c4 0001 	movt	r0, #16385	; 0x4001
   174ce:	4619      	mov	r1, r3
   174d0:	f7e9 fe4a 	bl	1168 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   174d4:	2304      	movs	r3, #4
   174d6:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   174d8:	2303      	movs	r3, #3
   174da:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   174dc:	2318      	movs	r3, #24
   174de:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   174e0:	1d3b      	adds	r3, r7, #4
   174e2:	f44f 6000 	mov.w	r0, #2048	; 0x800
   174e6:	f2c4 0001 	movt	r0, #16385	; 0x4001
   174ea:	4619      	mov	r1, r3
   174ec:	f7e9 fe3c 	bl	1168 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
   174f0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   174f4:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   174f6:	2300      	movs	r3, #0
   174f8:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
   174fa:	2300      	movs	r3, #0
   174fc:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
   174fe:	2300      	movs	r3, #0
   17500:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   17502:	2300      	movs	r3, #0
   17504:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   17506:	230c      	movs	r3, #12
   17508:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
   1750a:	f107 0308 	add.w	r3, r7, #8
   1750e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17512:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17516:	4619      	mov	r1, r3
   17518:	f7ea f90e 	bl	1738 <USART_Init>
    USART_Cmd(USART2, ENABLE);
   1751c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17520:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17524:	2101      	movs	r1, #1
   17526:	f7ea fa25 	bl	1974 <USART_Cmd>
}
   1752a:	3718      	adds	r7, #24
   1752c:	46bd      	mov	sp, r7
   1752e:	bd80      	pop	{r7, pc}

00017530 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
   17530:	b580      	push	{r7, lr}
   17532:	b082      	sub	sp, #8
   17534:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
   17536:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   1753a:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1753e:	f240 7127 	movw	r1, #1831	; 0x727
   17542:	2200      	movs	r2, #0
   17544:	f7ea fa36 	bl	19b4 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   17548:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   1754c:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17550:	f240 5125 	movw	r1, #1317	; 0x525
   17554:	2201      	movs	r2, #1
   17556:	f7ea fa2d 	bl	19b4 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   1755a:	2326      	movs	r3, #38	; 0x26
   1755c:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   1755e:	2300      	movs	r3, #0
   17560:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   17562:	2301      	movs	r3, #1
   17564:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   17566:	1d3b      	adds	r3, r7, #4
   17568:	4618      	mov	r0, r3
   1756a:	f7ea fe71 	bl	2250 <NVIC_Init>
}
   1756e:	3708      	adds	r7, #8
   17570:	46bd      	mov	sp, r7
   17572:	bd80      	pop	{r7, pc}

00017574 <enable_rs232>:

void enable_rs232(void)
{
   17574:	b580      	push	{r7, lr}
   17576:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
   17578:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   1757c:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17580:	2101      	movs	r1, #1
   17582:	f7ea f9f7 	bl	1974 <USART_Cmd>
}
   17586:	bd80      	pop	{r7, pc}

00017588 <send_byte>:

void send_byte(uint8_t b)
{
   17588:	b580      	push	{r7, lr}
   1758a:	b082      	sub	sp, #8
   1758c:	af00      	add	r7, sp, #0
   1758e:	4603      	mov	r3, r0
   17590:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
   17592:	bf00      	nop
   17594:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17598:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1759c:	2180      	movs	r1, #128	; 0x80
   1759e:	f7ea fc55 	bl	1e4c <USART_GetFlagStatus>
   175a2:	4603      	mov	r3, r0
   175a4:	2b00      	cmp	r3, #0
   175a6:	d0f5      	beq.n	17594 <send_byte+0xc>
    
    GPIOC->ODR ^= 0x00001000;
   175a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   175ac:	f2c4 0301 	movt	r3, #16385	; 0x4001
   175b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   175b4:	f2c4 0201 	movt	r2, #16385	; 0x4001
   175b8:	68d2      	ldr	r2, [r2, #12]
   175ba:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
   175be:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
   175c0:	79fb      	ldrb	r3, [r7, #7]
   175c2:	b29b      	uxth	r3, r3
   175c4:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   175c8:	f2c4 0000 	movt	r0, #16384	; 0x4000
   175cc:	4619      	mov	r1, r3
   175ce:	f7ea faf1 	bl	1bb4 <USART_SendData>
}
   175d2:	3708      	adds	r7, #8
   175d4:	46bd      	mov	sp, r7
   175d6:	bd80      	pop	{r7, pc}

000175d8 <send_num>:
/**
 *  can print a num which is smaller than 10
 */

void send_num(uint8_t b)
{
   175d8:	b580      	push	{r7, lr}
   175da:	b082      	sub	sp, #8
   175dc:	af00      	add	r7, sp, #0
   175de:	4603      	mov	r3, r0
   175e0:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
   175e2:	79fb      	ldrb	r3, [r7, #7]
   175e4:	3330      	adds	r3, #48	; 0x30
   175e6:	b2db      	uxtb	r3, r3
   175e8:	4618      	mov	r0, r3
   175ea:	f7ff ffcd 	bl	17588 <send_byte>
}
   175ee:	3708      	adds	r7, #8
   175f0:	46bd      	mov	sp, r7
   175f2:	bd80      	pop	{r7, pc}

000175f4 <vPrintString>:
 * print a string
 *
 * */

void vPrintString( const char * string)
{
   175f4:	b580      	push	{r7, lr}
   175f6:	b084      	sub	sp, #16
   175f8:	af00      	add	r7, sp, #0
   175fa:	6078      	str	r0, [r7, #4]
    int i = 0;
   175fc:	2300      	movs	r3, #0
   175fe:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
   17600:	e009      	b.n	17616 <vPrintString+0x22>
    {
        send_byte(string[i]);
   17602:	68fb      	ldr	r3, [r7, #12]
   17604:	687a      	ldr	r2, [r7, #4]
   17606:	4413      	add	r3, r2
   17608:	781b      	ldrb	r3, [r3, #0]
   1760a:	4618      	mov	r0, r3
   1760c:	f7ff ffbc 	bl	17588 <send_byte>
        i++;
   17610:	68fb      	ldr	r3, [r7, #12]
   17612:	3301      	adds	r3, #1
   17614:	60fb      	str	r3, [r7, #12]
 * */

void vPrintString( const char * string)
{
    int i = 0;
    while(string[i] != '\0')
   17616:	68fb      	ldr	r3, [r7, #12]
   17618:	687a      	ldr	r2, [r7, #4]
   1761a:	4413      	add	r3, r2
   1761c:	781b      	ldrb	r3, [r3, #0]
   1761e:	2b00      	cmp	r3, #0
   17620:	d1ef      	bne.n	17602 <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
   17622:	3710      	adds	r7, #16
   17624:	46bd      	mov	sp, r7
   17626:	bd80      	pop	{r7, pc}

00017628 <vPrintNumber>:
/*
 * print a number which is less than 10
 *
 * */
void vPrintNumber( const long c_num)
{
   17628:	b580      	push	{r7, lr}
   1762a:	b08a      	sub	sp, #40	; 0x28
   1762c:	af00      	add	r7, sp, #0
   1762e:	6078      	str	r0, [r7, #4]
    char time[15], tmp;
    unsigned int i, count = 0;
   17630:	2300      	movs	r3, #0
   17632:	623b      	str	r3, [r7, #32]
    long num = c_num;
   17634:	687b      	ldr	r3, [r7, #4]
   17636:	61fb      	str	r3, [r7, #28]

    if(num == 0)
   17638:	69fb      	ldr	r3, [r7, #28]
   1763a:	2b00      	cmp	r3, #0
   1763c:	d106      	bne.n	1764c <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
   1763e:	f648 3030 	movw	r0, #35632	; 0x8b30
   17642:	f2c0 0001 	movt	r0, #1
   17646:	f7ff ffd5 	bl	175f4 <vPrintString>
   1764a:	e062      	b.n	17712 <vPrintNumber+0xea>
    }
    else
    {
        // transform long into char * 
        while( num  )
   1764c:	e024      	b.n	17698 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
   1764e:	69f9      	ldr	r1, [r7, #28]
   17650:	f246 6367 	movw	r3, #26215	; 0x6667
   17654:	f2c6 6366 	movt	r3, #26214	; 0x6666
   17658:	fb83 2301 	smull	r2, r3, r3, r1
   1765c:	109a      	asrs	r2, r3, #2
   1765e:	17cb      	asrs	r3, r1, #31
   17660:	1ad2      	subs	r2, r2, r3
   17662:	4613      	mov	r3, r2
   17664:	009b      	lsls	r3, r3, #2
   17666:	4413      	add	r3, r2
   17668:	005b      	lsls	r3, r3, #1
   1766a:	1aca      	subs	r2, r1, r3
   1766c:	b2d3      	uxtb	r3, r2
   1766e:	3330      	adds	r3, #48	; 0x30
   17670:	b2da      	uxtb	r2, r3
   17672:	f107 010c 	add.w	r1, r7, #12
   17676:	6a3b      	ldr	r3, [r7, #32]
   17678:	440b      	add	r3, r1
   1767a:	701a      	strb	r2, [r3, #0]
            count ++;
   1767c:	6a3b      	ldr	r3, [r7, #32]
   1767e:	3301      	adds	r3, #1
   17680:	623b      	str	r3, [r7, #32]
            num /= 10;
   17682:	69fa      	ldr	r2, [r7, #28]
   17684:	f246 6367 	movw	r3, #26215	; 0x6667
   17688:	f2c6 6366 	movt	r3, #26214	; 0x6666
   1768c:	fb83 1302 	smull	r1, r3, r3, r2
   17690:	1099      	asrs	r1, r3, #2
   17692:	17d3      	asrs	r3, r2, #31
   17694:	1acb      	subs	r3, r1, r3
   17696:	61fb      	str	r3, [r7, #28]
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num  )
   17698:	69fb      	ldr	r3, [r7, #28]
   1769a:	2b00      	cmp	r3, #0
   1769c:	d1d7      	bne.n	1764e <vPrintNumber+0x26>
            time[count] = num%10 +'0';
            count ++;
            num /= 10;

        }
        time[count] = '\0';
   1769e:	f107 020c 	add.w	r2, r7, #12
   176a2:	6a3b      	ldr	r3, [r7, #32]
   176a4:	4413      	add	r3, r2
   176a6:	2200      	movs	r2, #0
   176a8:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i )
   176aa:	2300      	movs	r3, #0
   176ac:	627b      	str	r3, [r7, #36]	; 0x24
   176ae:	e020      	b.n	176f2 <vPrintNumber+0xca>
        {
            tmp = time[i];
   176b0:	f107 020c 	add.w	r2, r7, #12
   176b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   176b6:	4413      	add	r3, r2
   176b8:	781b      	ldrb	r3, [r3, #0]
   176ba:	76fb      	strb	r3, [r7, #27]
            time[i] = time[count-1-i];
   176bc:	6a3a      	ldr	r2, [r7, #32]
   176be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   176c0:	1ad3      	subs	r3, r2, r3
   176c2:	3b01      	subs	r3, #1
   176c4:	f107 0228 	add.w	r2, r7, #40	; 0x28
   176c8:	4413      	add	r3, r2
   176ca:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
   176ce:	f107 010c 	add.w	r1, r7, #12
   176d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   176d4:	440b      	add	r3, r1
   176d6:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
   176d8:	6a3a      	ldr	r2, [r7, #32]
   176da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   176dc:	1ad3      	subs	r3, r2, r3
   176de:	3b01      	subs	r3, #1
   176e0:	f107 0128 	add.w	r1, r7, #40	; 0x28
   176e4:	440b      	add	r3, r1
   176e6:	7efa      	ldrb	r2, [r7, #27]
   176e8:	f803 2c1c 	strb.w	r2, [r3, #-28]

        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i )
   176ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   176ee:	3301      	adds	r3, #1
   176f0:	627b      	str	r3, [r7, #36]	; 0x24
   176f2:	6a3b      	ldr	r3, [r7, #32]
   176f4:	085a      	lsrs	r2, r3, #1
   176f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   176f8:	429a      	cmp	r2, r3
   176fa:	d8d9      	bhi.n	176b0 <vPrintNumber+0x88>
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;

        }
        vPrintString(time);
   176fc:	f107 030c 	add.w	r3, r7, #12
   17700:	4618      	mov	r0, r3
   17702:	f7ff ff77 	bl	175f4 <vPrintString>
        vPrintString("\n\r");
   17706:	f648 3034 	movw	r0, #35636	; 0x8b34
   1770a:	f2c0 0001 	movt	r0, #1
   1770e:	f7ff ff71 	bl	175f4 <vPrintString>
    }
}
   17712:	3728      	adds	r7, #40	; 0x28
   17714:	46bd      	mov	sp, r7
   17716:	bd80      	pop	{r7, pc}

00017718 <vStartTask>:
extern portBASE_TYPE xSensorOfTask[NUMBEROFTASK];
extern portBASE_TYPE xActuatorOfTask[NUMBEROFTASK];

// init program to start all task when system init
void vStartTask()
{
   17718:	b580      	push	{r7, lr}
   1771a:	b084      	sub	sp, #16
   1771c:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    xEventHandle pxEvent;
    struct eventData null_data;
    for( i = 0; i < NUMBEROFTASK; ++i )
   1771e:	2300      	movs	r3, #0
   17720:	60fb      	str	r3, [r7, #12]
   17722:	e01e      	b.n	17762 <vStartTask+0x4a>
    {
        pxEvent = pxEventCreate(xActuatorOfTask[i], xPeriodOfTask[i], xPeriodOfTask[i], &null_data);
   17724:	f240 0390 	movw	r3, #144	; 0x90
   17728:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1772c:	68fa      	ldr	r2, [r7, #12]
   1772e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   17732:	f240 0328 	movw	r3, #40	; 0x28
   17736:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1773a:	68fa      	ldr	r2, [r7, #12]
   1773c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   17740:	f240 0328 	movw	r3, #40	; 0x28
   17744:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17748:	68fa      	ldr	r2, [r7, #12]
   1774a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1774e:	463b      	mov	r3, r7
   17750:	f7eb fac6 	bl	2ce0 <pxEventGenericCreate>
   17754:	60b8      	str	r0, [r7, #8]
        vEventSend( pxEvent );   
   17756:	68b8      	ldr	r0, [r7, #8]
   17758:	f7eb fe64 	bl	3424 <vEventGenericSend>
void vStartTask()
{
    portBASE_TYPE i;
    xEventHandle pxEvent;
    struct eventData null_data;
    for( i = 0; i < NUMBEROFTASK; ++i )
   1775c:	68fb      	ldr	r3, [r7, #12]
   1775e:	3301      	adds	r3, #1
   17760:	60fb      	str	r3, [r7, #12]
   17762:	68fb      	ldr	r3, [r7, #12]
   17764:	2b0c      	cmp	r3, #12
   17766:	dddd      	ble.n	17724 <vStartTask+0xc>
    {
        pxEvent = pxEventCreate(xActuatorOfTask[i], xPeriodOfTask[i], xPeriodOfTask[i], &null_data);
        vEventSend( pxEvent );   
    }
}
   17768:	3710      	adds	r7, #16
   1776a:	46bd      	mov	sp, r7
   1776c:	bd80      	pop	{r7, pc}
   1776e:	bf00      	nop

00017770 <main>:

#define SERVANT_STACK_SIZE 128 
int main(void)
{
   17770:	b580      	push	{r7, lr}
   17772:	b086      	sub	sp, #24
   17774:	af04      	add	r7, sp, #16
    init_led();
   17776:	f7ff fe33 	bl	173e0 <init_led>
    init_rs232();
   1777a:	f7ff fe93 	bl	174a4 <init_rs232>
    enable_rs232_interrupts();
   1777e:	f7ff fed7 	bl	17530 <enable_rs232_interrupts>
    enable_rs232();
   17782:	f7ff fef7 	bl	17574 <enable_rs232>
    vSemaphoreInitialise();
   17786:	f7eb feb5 	bl	34f4 <vSemaphoreInitialise>
    vContextInit();
   1778a:	f7eb fef3 	bl	3574 <vContextInit>
    vInitialiseEventLists();  
   1778e:	f7eb f96b 	bl	2a68 <vInitialiseEventLists>
    vStartTask();
   17792:	f7ff ffc1 	bl	17718 <vStartTask>
    PapabenchInit();
   17796:	f7ec fa91 	bl	3cbc <PapabenchInit>
    portBASE_TYPE i,j;
    portBASE_TYPE flag = 0;
   1779a:	2300      	movs	r3, #0
   1779c:	607b      	str	r3, [r7, #4]

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 1, &xTaskOfHandle[0]);
   1779e:	2301      	movs	r3, #1
   177a0:	9300      	str	r3, [sp, #0]
   177a2:	f64c 53c4 	movw	r3, #52676	; 0xcdc4
   177a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   177aa:	9301      	str	r3, [sp, #4]
   177ac:	2300      	movs	r3, #0
   177ae:	9302      	str	r3, [sp, #8]
   177b0:	2300      	movs	r3, #0
   177b2:	9303      	str	r3, [sp, #12]
   177b4:	f643 30e1 	movw	r0, #15329	; 0x3be1
   177b8:	f2c0 0000 	movt	r0, #0
   177bc:	f648 3138 	movw	r1, #35640	; 0x8b38
   177c0:	f2c0 0101 	movt	r1, #1
   177c4:	2280      	movs	r2, #128	; 0x80
   177c6:	2300      	movs	r3, #0
   177c8:	f7ed f91c 	bl	4a04 <xTaskGenericCreate>
    xTaskCreate( vSensor, "I-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 4, &xTaskOfHandle[1]);
   177cc:	2304      	movs	r3, #4
   177ce:	9300      	str	r3, [sp, #0]
   177d0:	4b25      	ldr	r3, [pc, #148]	; (17868 <main+0xf8>)
   177d2:	9301      	str	r3, [sp, #4]
   177d4:	2300      	movs	r3, #0
   177d6:	9302      	str	r3, [sp, #8]
   177d8:	2300      	movs	r3, #0
   177da:	9303      	str	r3, [sp, #12]
   177dc:	f643 0059 	movw	r0, #14425	; 0x3859
   177e0:	f2c0 0000 	movt	r0, #0
   177e4:	f648 3144 	movw	r1, #35652	; 0x8b44
   177e8:	f2c0 0101 	movt	r1, #1
   177ec:	2280      	movs	r2, #128	; 0x80
   177ee:	2300      	movs	r3, #0
   177f0:	f7ed f908 	bl	4a04 <xTaskGenericCreate>
    xTaskCreate( vServant, "C-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 2, &xTaskOfHandle[2]);
   177f4:	2302      	movs	r3, #2
   177f6:	9300      	str	r3, [sp, #0]
   177f8:	4b1c      	ldr	r3, [pc, #112]	; (1786c <main+0xfc>)
   177fa:	9301      	str	r3, [sp, #4]
   177fc:	2300      	movs	r3, #0
   177fe:	9302      	str	r3, [sp, #8]
   17800:	2300      	movs	r3, #0
   17802:	9303      	str	r3, [sp, #12]
   17804:	f643 1065 	movw	r0, #14693	; 0x3965
   17808:	f2c0 0000 	movt	r0, #0
   1780c:	f648 3150 	movw	r1, #35664	; 0x8b50
   17810:	f2c0 0101 	movt	r1, #1
   17814:	2280      	movs	r2, #128	; 0x80
   17816:	2300      	movs	r3, #0
   17818:	f7ed f8f4 	bl	4a04 <xTaskGenericCreate>
    xTaskCreate( vActuator, "O-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 3, &xTaskOfHandle[3]);
   1781c:	2303      	movs	r3, #3
   1781e:	9300      	str	r3, [sp, #0]
   17820:	4b13      	ldr	r3, [pc, #76]	; (17870 <main+0x100>)
   17822:	9301      	str	r3, [sp, #4]
   17824:	2300      	movs	r3, #0
   17826:	9302      	str	r3, [sp, #8]
   17828:	2300      	movs	r3, #0
   1782a:	9303      	str	r3, [sp, #12]
   1782c:	f643 20e1 	movw	r0, #15073	; 0x3ae1
   17830:	f2c0 0000 	movt	r0, #0
   17834:	f648 315c 	movw	r1, #35676	; 0x8b5c
   17838:	f2c0 0101 	movt	r1, #1
   1783c:	2280      	movs	r2, #128	; 0x80
   1783e:	2300      	movs	r3, #0
   17840:	f7ed f8e0 	bl	4a04 <xTaskGenericCreate>

    xSemaphoreGive(xBinarySemaphore[0]);
   17844:	f241 3354 	movw	r3, #4948	; 0x1354
   17848:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1784c:	681b      	ldr	r3, [r3, #0]
   1784e:	4618      	mov	r0, r3
   17850:	2100      	movs	r1, #0
   17852:	2200      	movs	r2, #0
   17854:	2300      	movs	r3, #0
   17856:	f7ec fdc3 	bl	43e0 <xQueueGenericSend>
    vTaskStartScheduler();
   1785a:	f7ed fc51 	bl	5100 <vTaskStartScheduler>

    return 0;
   1785e:	2300      	movs	r3, #0
}
   17860:	4618      	mov	r0, r3
   17862:	3708      	adds	r7, #8
   17864:	46bd      	mov	sp, r7
   17866:	bd80      	pop	{r7, pc}
   17868:	2004cdc8 	.word	0x2004cdc8
   1786c:	2004cdcc 	.word	0x2004cdcc
   17870:	2004cdd0 	.word	0x2004cdd0

00017874 <myTraceCreate>:

void myTraceCreate      (){
   17874:	b480      	push	{r7}
   17876:	af00      	add	r7, sp, #0
}
   17878:	46bd      	mov	sp, r7
   1787a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1787e:	4770      	bx	lr

00017880 <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
   17880:	b480      	push	{r7}
   17882:	af00      	add	r7, sp, #0
}
   17884:	46bd      	mov	sp, r7
   17886:	f85d 7b04 	ldr.w	r7, [sp], #4
   1788a:	4770      	bx	lr

0001788c <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
   1788c:	b480      	push	{r7}
   1788e:	af00      	add	r7, sp, #0
}
   17890:	46bd      	mov	sp, r7
   17892:	f85d 7b04 	ldr.w	r7, [sp], #4
   17896:	4770      	bx	lr

00017898 <vApplicationTickHook>:
 /*
 * if there is any task need to be triggered at this time,
 * tick hook function would send semaphore to them.
 * */
void vApplicationTickHook( void )
{
   17898:	b580      	push	{r7, lr}
   1789a:	af00      	add	r7, sp, #0
    if(xIsExecutableEventArrive())
   1789c:	f7eb f948 	bl	2b30 <xIsExecutableEventArrive>
   178a0:	4603      	mov	r3, r0
   178a2:	2b00      	cmp	r3, #0
   178a4:	d00a      	beq.n	178bc <vApplicationTickHook+0x24>
       xSemaphoreGive( xBinarySemaphore[0] ); 
   178a6:	f241 3354 	movw	r3, #4948	; 0x1354
   178aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   178ae:	681b      	ldr	r3, [r3, #0]
   178b0:	4618      	mov	r0, r3
   178b2:	2100      	movs	r1, #0
   178b4:	2200      	movs	r2, #0
   178b6:	2300      	movs	r3, #0
   178b8:	f7ec fd92 	bl	43e0 <xQueueGenericSend>
}
   178bc:	bd80      	pop	{r7, pc}
   178be:	bf00      	nop

000178c0 <__aeabi_drsub>:
   178c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   178c4:	e002      	b.n	178cc <__adddf3>
   178c6:	bf00      	nop

000178c8 <__aeabi_dsub>:
   178c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000178cc <__adddf3>:
   178cc:	b530      	push	{r4, r5, lr}
   178ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
   178d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   178d6:	ea94 0f05 	teq	r4, r5
   178da:	bf08      	it	eq
   178dc:	ea90 0f02 	teqeq	r0, r2
   178e0:	bf1f      	itttt	ne
   178e2:	ea54 0c00 	orrsne.w	ip, r4, r0
   178e6:	ea55 0c02 	orrsne.w	ip, r5, r2
   178ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   178ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   178f2:	f000 80e2 	beq.w	17aba <__adddf3+0x1ee>
   178f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   178fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   178fe:	bfb8      	it	lt
   17900:	426d      	neglt	r5, r5
   17902:	dd0c      	ble.n	1791e <__adddf3+0x52>
   17904:	442c      	add	r4, r5
   17906:	ea80 0202 	eor.w	r2, r0, r2
   1790a:	ea81 0303 	eor.w	r3, r1, r3
   1790e:	ea82 0000 	eor.w	r0, r2, r0
   17912:	ea83 0101 	eor.w	r1, r3, r1
   17916:	ea80 0202 	eor.w	r2, r0, r2
   1791a:	ea81 0303 	eor.w	r3, r1, r3
   1791e:	2d36      	cmp	r5, #54	; 0x36
   17920:	bf88      	it	hi
   17922:	bd30      	pophi	{r4, r5, pc}
   17924:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   17928:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1792c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   17930:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   17934:	d002      	beq.n	1793c <__adddf3+0x70>
   17936:	4240      	negs	r0, r0
   17938:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1793c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   17940:	ea4f 3303 	mov.w	r3, r3, lsl #12
   17944:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   17948:	d002      	beq.n	17950 <__adddf3+0x84>
   1794a:	4252      	negs	r2, r2
   1794c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   17950:	ea94 0f05 	teq	r4, r5
   17954:	f000 80a7 	beq.w	17aa6 <__adddf3+0x1da>
   17958:	f1a4 0401 	sub.w	r4, r4, #1
   1795c:	f1d5 0e20 	rsbs	lr, r5, #32
   17960:	db0d      	blt.n	1797e <__adddf3+0xb2>
   17962:	fa02 fc0e 	lsl.w	ip, r2, lr
   17966:	fa22 f205 	lsr.w	r2, r2, r5
   1796a:	1880      	adds	r0, r0, r2
   1796c:	f141 0100 	adc.w	r1, r1, #0
   17970:	fa03 f20e 	lsl.w	r2, r3, lr
   17974:	1880      	adds	r0, r0, r2
   17976:	fa43 f305 	asr.w	r3, r3, r5
   1797a:	4159      	adcs	r1, r3
   1797c:	e00e      	b.n	1799c <__adddf3+0xd0>
   1797e:	f1a5 0520 	sub.w	r5, r5, #32
   17982:	f10e 0e20 	add.w	lr, lr, #32
   17986:	2a01      	cmp	r2, #1
   17988:	fa03 fc0e 	lsl.w	ip, r3, lr
   1798c:	bf28      	it	cs
   1798e:	f04c 0c02 	orrcs.w	ip, ip, #2
   17992:	fa43 f305 	asr.w	r3, r3, r5
   17996:	18c0      	adds	r0, r0, r3
   17998:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1799c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   179a0:	d507      	bpl.n	179b2 <__adddf3+0xe6>
   179a2:	f04f 0e00 	mov.w	lr, #0
   179a6:	f1dc 0c00 	rsbs	ip, ip, #0
   179aa:	eb7e 0000 	sbcs.w	r0, lr, r0
   179ae:	eb6e 0101 	sbc.w	r1, lr, r1
   179b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   179b6:	d31b      	bcc.n	179f0 <__adddf3+0x124>
   179b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   179bc:	d30c      	bcc.n	179d8 <__adddf3+0x10c>
   179be:	0849      	lsrs	r1, r1, #1
   179c0:	ea5f 0030 	movs.w	r0, r0, rrx
   179c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   179c8:	f104 0401 	add.w	r4, r4, #1
   179cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   179d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   179d4:	f080 809a 	bcs.w	17b0c <__adddf3+0x240>
   179d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   179dc:	bf08      	it	eq
   179de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   179e2:	f150 0000 	adcs.w	r0, r0, #0
   179e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   179ea:	ea41 0105 	orr.w	r1, r1, r5
   179ee:	bd30      	pop	{r4, r5, pc}
   179f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   179f4:	4140      	adcs	r0, r0
   179f6:	eb41 0101 	adc.w	r1, r1, r1
   179fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   179fe:	f1a4 0401 	sub.w	r4, r4, #1
   17a02:	d1e9      	bne.n	179d8 <__adddf3+0x10c>
   17a04:	f091 0f00 	teq	r1, #0
   17a08:	bf04      	itt	eq
   17a0a:	4601      	moveq	r1, r0
   17a0c:	2000      	moveq	r0, #0
   17a0e:	fab1 f381 	clz	r3, r1
   17a12:	bf08      	it	eq
   17a14:	3320      	addeq	r3, #32
   17a16:	f1a3 030b 	sub.w	r3, r3, #11
   17a1a:	f1b3 0220 	subs.w	r2, r3, #32
   17a1e:	da0c      	bge.n	17a3a <__adddf3+0x16e>
   17a20:	320c      	adds	r2, #12
   17a22:	dd08      	ble.n	17a36 <__adddf3+0x16a>
   17a24:	f102 0c14 	add.w	ip, r2, #20
   17a28:	f1c2 020c 	rsb	r2, r2, #12
   17a2c:	fa01 f00c 	lsl.w	r0, r1, ip
   17a30:	fa21 f102 	lsr.w	r1, r1, r2
   17a34:	e00c      	b.n	17a50 <__adddf3+0x184>
   17a36:	f102 0214 	add.w	r2, r2, #20
   17a3a:	bfd8      	it	le
   17a3c:	f1c2 0c20 	rsble	ip, r2, #32
   17a40:	fa01 f102 	lsl.w	r1, r1, r2
   17a44:	fa20 fc0c 	lsr.w	ip, r0, ip
   17a48:	bfdc      	itt	le
   17a4a:	ea41 010c 	orrle.w	r1, r1, ip
   17a4e:	4090      	lslle	r0, r2
   17a50:	1ae4      	subs	r4, r4, r3
   17a52:	bfa2      	ittt	ge
   17a54:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   17a58:	4329      	orrge	r1, r5
   17a5a:	bd30      	popge	{r4, r5, pc}
   17a5c:	ea6f 0404 	mvn.w	r4, r4
   17a60:	3c1f      	subs	r4, #31
   17a62:	da1c      	bge.n	17a9e <__adddf3+0x1d2>
   17a64:	340c      	adds	r4, #12
   17a66:	dc0e      	bgt.n	17a86 <__adddf3+0x1ba>
   17a68:	f104 0414 	add.w	r4, r4, #20
   17a6c:	f1c4 0220 	rsb	r2, r4, #32
   17a70:	fa20 f004 	lsr.w	r0, r0, r4
   17a74:	fa01 f302 	lsl.w	r3, r1, r2
   17a78:	ea40 0003 	orr.w	r0, r0, r3
   17a7c:	fa21 f304 	lsr.w	r3, r1, r4
   17a80:	ea45 0103 	orr.w	r1, r5, r3
   17a84:	bd30      	pop	{r4, r5, pc}
   17a86:	f1c4 040c 	rsb	r4, r4, #12
   17a8a:	f1c4 0220 	rsb	r2, r4, #32
   17a8e:	fa20 f002 	lsr.w	r0, r0, r2
   17a92:	fa01 f304 	lsl.w	r3, r1, r4
   17a96:	ea40 0003 	orr.w	r0, r0, r3
   17a9a:	4629      	mov	r1, r5
   17a9c:	bd30      	pop	{r4, r5, pc}
   17a9e:	fa21 f004 	lsr.w	r0, r1, r4
   17aa2:	4629      	mov	r1, r5
   17aa4:	bd30      	pop	{r4, r5, pc}
   17aa6:	f094 0f00 	teq	r4, #0
   17aaa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   17aae:	bf06      	itte	eq
   17ab0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   17ab4:	3401      	addeq	r4, #1
   17ab6:	3d01      	subne	r5, #1
   17ab8:	e74e      	b.n	17958 <__adddf3+0x8c>
   17aba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   17abe:	bf18      	it	ne
   17ac0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   17ac4:	d029      	beq.n	17b1a <__adddf3+0x24e>
   17ac6:	ea94 0f05 	teq	r4, r5
   17aca:	bf08      	it	eq
   17acc:	ea90 0f02 	teqeq	r0, r2
   17ad0:	d005      	beq.n	17ade <__adddf3+0x212>
   17ad2:	ea54 0c00 	orrs.w	ip, r4, r0
   17ad6:	bf04      	itt	eq
   17ad8:	4619      	moveq	r1, r3
   17ada:	4610      	moveq	r0, r2
   17adc:	bd30      	pop	{r4, r5, pc}
   17ade:	ea91 0f03 	teq	r1, r3
   17ae2:	bf1e      	ittt	ne
   17ae4:	2100      	movne	r1, #0
   17ae6:	2000      	movne	r0, #0
   17ae8:	bd30      	popne	{r4, r5, pc}
   17aea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   17aee:	d105      	bne.n	17afc <__adddf3+0x230>
   17af0:	0040      	lsls	r0, r0, #1
   17af2:	4149      	adcs	r1, r1
   17af4:	bf28      	it	cs
   17af6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   17afa:	bd30      	pop	{r4, r5, pc}
   17afc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   17b00:	bf3c      	itt	cc
   17b02:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   17b06:	bd30      	popcc	{r4, r5, pc}
   17b08:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17b0c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   17b10:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17b14:	f04f 0000 	mov.w	r0, #0
   17b18:	bd30      	pop	{r4, r5, pc}
   17b1a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   17b1e:	bf1a      	itte	ne
   17b20:	4619      	movne	r1, r3
   17b22:	4610      	movne	r0, r2
   17b24:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   17b28:	bf1c      	itt	ne
   17b2a:	460b      	movne	r3, r1
   17b2c:	4602      	movne	r2, r0
   17b2e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   17b32:	bf06      	itte	eq
   17b34:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   17b38:	ea91 0f03 	teqeq	r1, r3
   17b3c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   17b40:	bd30      	pop	{r4, r5, pc}
   17b42:	bf00      	nop

00017b44 <__aeabi_ui2d>:
   17b44:	f090 0f00 	teq	r0, #0
   17b48:	bf04      	itt	eq
   17b4a:	2100      	moveq	r1, #0
   17b4c:	4770      	bxeq	lr
   17b4e:	b530      	push	{r4, r5, lr}
   17b50:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17b54:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17b58:	f04f 0500 	mov.w	r5, #0
   17b5c:	f04f 0100 	mov.w	r1, #0
   17b60:	e750      	b.n	17a04 <__adddf3+0x138>
   17b62:	bf00      	nop

00017b64 <__aeabi_i2d>:
   17b64:	f090 0f00 	teq	r0, #0
   17b68:	bf04      	itt	eq
   17b6a:	2100      	moveq	r1, #0
   17b6c:	4770      	bxeq	lr
   17b6e:	b530      	push	{r4, r5, lr}
   17b70:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17b74:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17b78:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   17b7c:	bf48      	it	mi
   17b7e:	4240      	negmi	r0, r0
   17b80:	f04f 0100 	mov.w	r1, #0
   17b84:	e73e      	b.n	17a04 <__adddf3+0x138>
   17b86:	bf00      	nop

00017b88 <__aeabi_f2d>:
   17b88:	0042      	lsls	r2, r0, #1
   17b8a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   17b8e:	ea4f 0131 	mov.w	r1, r1, rrx
   17b92:	ea4f 7002 	mov.w	r0, r2, lsl #28
   17b96:	bf1f      	itttt	ne
   17b98:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   17b9c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17ba0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   17ba4:	4770      	bxne	lr
   17ba6:	f092 0f00 	teq	r2, #0
   17baa:	bf14      	ite	ne
   17bac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17bb0:	4770      	bxeq	lr
   17bb2:	b530      	push	{r4, r5, lr}
   17bb4:	f44f 7460 	mov.w	r4, #896	; 0x380
   17bb8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17bbc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17bc0:	e720      	b.n	17a04 <__adddf3+0x138>
   17bc2:	bf00      	nop

00017bc4 <__aeabi_ul2d>:
   17bc4:	ea50 0201 	orrs.w	r2, r0, r1
   17bc8:	bf08      	it	eq
   17bca:	4770      	bxeq	lr
   17bcc:	b530      	push	{r4, r5, lr}
   17bce:	f04f 0500 	mov.w	r5, #0
   17bd2:	e00a      	b.n	17bea <__aeabi_l2d+0x16>

00017bd4 <__aeabi_l2d>:
   17bd4:	ea50 0201 	orrs.w	r2, r0, r1
   17bd8:	bf08      	it	eq
   17bda:	4770      	bxeq	lr
   17bdc:	b530      	push	{r4, r5, lr}
   17bde:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   17be2:	d502      	bpl.n	17bea <__aeabi_l2d+0x16>
   17be4:	4240      	negs	r0, r0
   17be6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17bea:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17bee:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17bf2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   17bf6:	f43f aedc 	beq.w	179b2 <__adddf3+0xe6>
   17bfa:	f04f 0203 	mov.w	r2, #3
   17bfe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17c02:	bf18      	it	ne
   17c04:	3203      	addne	r2, #3
   17c06:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17c0a:	bf18      	it	ne
   17c0c:	3203      	addne	r2, #3
   17c0e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   17c12:	f1c2 0320 	rsb	r3, r2, #32
   17c16:	fa00 fc03 	lsl.w	ip, r0, r3
   17c1a:	fa20 f002 	lsr.w	r0, r0, r2
   17c1e:	fa01 fe03 	lsl.w	lr, r1, r3
   17c22:	ea40 000e 	orr.w	r0, r0, lr
   17c26:	fa21 f102 	lsr.w	r1, r1, r2
   17c2a:	4414      	add	r4, r2
   17c2c:	e6c1      	b.n	179b2 <__adddf3+0xe6>
   17c2e:	bf00      	nop

00017c30 <__aeabi_dmul>:
   17c30:	b570      	push	{r4, r5, r6, lr}
   17c32:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17c36:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17c3a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17c3e:	bf1d      	ittte	ne
   17c40:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17c44:	ea94 0f0c 	teqne	r4, ip
   17c48:	ea95 0f0c 	teqne	r5, ip
   17c4c:	f000 f8de 	bleq	17e0c <__aeabi_dmul+0x1dc>
   17c50:	442c      	add	r4, r5
   17c52:	ea81 0603 	eor.w	r6, r1, r3
   17c56:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   17c5a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   17c5e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   17c62:	bf18      	it	ne
   17c64:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   17c68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17c6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   17c70:	d038      	beq.n	17ce4 <__aeabi_dmul+0xb4>
   17c72:	fba0 ce02 	umull	ip, lr, r0, r2
   17c76:	f04f 0500 	mov.w	r5, #0
   17c7a:	fbe1 e502 	umlal	lr, r5, r1, r2
   17c7e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   17c82:	fbe0 e503 	umlal	lr, r5, r0, r3
   17c86:	f04f 0600 	mov.w	r6, #0
   17c8a:	fbe1 5603 	umlal	r5, r6, r1, r3
   17c8e:	f09c 0f00 	teq	ip, #0
   17c92:	bf18      	it	ne
   17c94:	f04e 0e01 	orrne.w	lr, lr, #1
   17c98:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   17c9c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   17ca0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   17ca4:	d204      	bcs.n	17cb0 <__aeabi_dmul+0x80>
   17ca6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   17caa:	416d      	adcs	r5, r5
   17cac:	eb46 0606 	adc.w	r6, r6, r6
   17cb0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   17cb4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   17cb8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   17cbc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   17cc0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   17cc4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17cc8:	bf88      	it	hi
   17cca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17cce:	d81e      	bhi.n	17d0e <__aeabi_dmul+0xde>
   17cd0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   17cd4:	bf08      	it	eq
   17cd6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   17cda:	f150 0000 	adcs.w	r0, r0, #0
   17cde:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17ce2:	bd70      	pop	{r4, r5, r6, pc}
   17ce4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   17ce8:	ea46 0101 	orr.w	r1, r6, r1
   17cec:	ea40 0002 	orr.w	r0, r0, r2
   17cf0:	ea81 0103 	eor.w	r1, r1, r3
   17cf4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   17cf8:	bfc2      	ittt	gt
   17cfa:	ebd4 050c 	rsbsgt	r5, r4, ip
   17cfe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17d02:	bd70      	popgt	{r4, r5, r6, pc}
   17d04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17d08:	f04f 0e00 	mov.w	lr, #0
   17d0c:	3c01      	subs	r4, #1
   17d0e:	f300 80ab 	bgt.w	17e68 <__aeabi_dmul+0x238>
   17d12:	f114 0f36 	cmn.w	r4, #54	; 0x36
   17d16:	bfde      	ittt	le
   17d18:	2000      	movle	r0, #0
   17d1a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   17d1e:	bd70      	pople	{r4, r5, r6, pc}
   17d20:	f1c4 0400 	rsb	r4, r4, #0
   17d24:	3c20      	subs	r4, #32
   17d26:	da35      	bge.n	17d94 <__aeabi_dmul+0x164>
   17d28:	340c      	adds	r4, #12
   17d2a:	dc1b      	bgt.n	17d64 <__aeabi_dmul+0x134>
   17d2c:	f104 0414 	add.w	r4, r4, #20
   17d30:	f1c4 0520 	rsb	r5, r4, #32
   17d34:	fa00 f305 	lsl.w	r3, r0, r5
   17d38:	fa20 f004 	lsr.w	r0, r0, r4
   17d3c:	fa01 f205 	lsl.w	r2, r1, r5
   17d40:	ea40 0002 	orr.w	r0, r0, r2
   17d44:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   17d48:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17d4c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17d50:	fa21 f604 	lsr.w	r6, r1, r4
   17d54:	eb42 0106 	adc.w	r1, r2, r6
   17d58:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17d5c:	bf08      	it	eq
   17d5e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17d62:	bd70      	pop	{r4, r5, r6, pc}
   17d64:	f1c4 040c 	rsb	r4, r4, #12
   17d68:	f1c4 0520 	rsb	r5, r4, #32
   17d6c:	fa00 f304 	lsl.w	r3, r0, r4
   17d70:	fa20 f005 	lsr.w	r0, r0, r5
   17d74:	fa01 f204 	lsl.w	r2, r1, r4
   17d78:	ea40 0002 	orr.w	r0, r0, r2
   17d7c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17d80:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17d84:	f141 0100 	adc.w	r1, r1, #0
   17d88:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17d8c:	bf08      	it	eq
   17d8e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17d92:	bd70      	pop	{r4, r5, r6, pc}
   17d94:	f1c4 0520 	rsb	r5, r4, #32
   17d98:	fa00 f205 	lsl.w	r2, r0, r5
   17d9c:	ea4e 0e02 	orr.w	lr, lr, r2
   17da0:	fa20 f304 	lsr.w	r3, r0, r4
   17da4:	fa01 f205 	lsl.w	r2, r1, r5
   17da8:	ea43 0302 	orr.w	r3, r3, r2
   17dac:	fa21 f004 	lsr.w	r0, r1, r4
   17db0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17db4:	fa21 f204 	lsr.w	r2, r1, r4
   17db8:	ea20 0002 	bic.w	r0, r0, r2
   17dbc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   17dc0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17dc4:	bf08      	it	eq
   17dc6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17dca:	bd70      	pop	{r4, r5, r6, pc}
   17dcc:	f094 0f00 	teq	r4, #0
   17dd0:	d10f      	bne.n	17df2 <__aeabi_dmul+0x1c2>
   17dd2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   17dd6:	0040      	lsls	r0, r0, #1
   17dd8:	eb41 0101 	adc.w	r1, r1, r1
   17ddc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17de0:	bf08      	it	eq
   17de2:	3c01      	subeq	r4, #1
   17de4:	d0f7      	beq.n	17dd6 <__aeabi_dmul+0x1a6>
   17de6:	ea41 0106 	orr.w	r1, r1, r6
   17dea:	f095 0f00 	teq	r5, #0
   17dee:	bf18      	it	ne
   17df0:	4770      	bxne	lr
   17df2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   17df6:	0052      	lsls	r2, r2, #1
   17df8:	eb43 0303 	adc.w	r3, r3, r3
   17dfc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   17e00:	bf08      	it	eq
   17e02:	3d01      	subeq	r5, #1
   17e04:	d0f7      	beq.n	17df6 <__aeabi_dmul+0x1c6>
   17e06:	ea43 0306 	orr.w	r3, r3, r6
   17e0a:	4770      	bx	lr
   17e0c:	ea94 0f0c 	teq	r4, ip
   17e10:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17e14:	bf18      	it	ne
   17e16:	ea95 0f0c 	teqne	r5, ip
   17e1a:	d00c      	beq.n	17e36 <__aeabi_dmul+0x206>
   17e1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17e20:	bf18      	it	ne
   17e22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17e26:	d1d1      	bne.n	17dcc <__aeabi_dmul+0x19c>
   17e28:	ea81 0103 	eor.w	r1, r1, r3
   17e2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17e30:	f04f 0000 	mov.w	r0, #0
   17e34:	bd70      	pop	{r4, r5, r6, pc}
   17e36:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17e3a:	bf06      	itte	eq
   17e3c:	4610      	moveq	r0, r2
   17e3e:	4619      	moveq	r1, r3
   17e40:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17e44:	d019      	beq.n	17e7a <__aeabi_dmul+0x24a>
   17e46:	ea94 0f0c 	teq	r4, ip
   17e4a:	d102      	bne.n	17e52 <__aeabi_dmul+0x222>
   17e4c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   17e50:	d113      	bne.n	17e7a <__aeabi_dmul+0x24a>
   17e52:	ea95 0f0c 	teq	r5, ip
   17e56:	d105      	bne.n	17e64 <__aeabi_dmul+0x234>
   17e58:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   17e5c:	bf1c      	itt	ne
   17e5e:	4610      	movne	r0, r2
   17e60:	4619      	movne	r1, r3
   17e62:	d10a      	bne.n	17e7a <__aeabi_dmul+0x24a>
   17e64:	ea81 0103 	eor.w	r1, r1, r3
   17e68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17e6c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17e70:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17e74:	f04f 0000 	mov.w	r0, #0
   17e78:	bd70      	pop	{r4, r5, r6, pc}
   17e7a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17e7e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   17e82:	bd70      	pop	{r4, r5, r6, pc}

00017e84 <__aeabi_ddiv>:
   17e84:	b570      	push	{r4, r5, r6, lr}
   17e86:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17e8a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17e8e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17e92:	bf1d      	ittte	ne
   17e94:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17e98:	ea94 0f0c 	teqne	r4, ip
   17e9c:	ea95 0f0c 	teqne	r5, ip
   17ea0:	f000 f8a7 	bleq	17ff2 <__aeabi_ddiv+0x16e>
   17ea4:	eba4 0405 	sub.w	r4, r4, r5
   17ea8:	ea81 0e03 	eor.w	lr, r1, r3
   17eac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17eb0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17eb4:	f000 8088 	beq.w	17fc8 <__aeabi_ddiv+0x144>
   17eb8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   17ebc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   17ec0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   17ec4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   17ec8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   17ecc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   17ed0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   17ed4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   17ed8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   17edc:	429d      	cmp	r5, r3
   17ede:	bf08      	it	eq
   17ee0:	4296      	cmpeq	r6, r2
   17ee2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   17ee6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   17eea:	d202      	bcs.n	17ef2 <__aeabi_ddiv+0x6e>
   17eec:	085b      	lsrs	r3, r3, #1
   17eee:	ea4f 0232 	mov.w	r2, r2, rrx
   17ef2:	1ab6      	subs	r6, r6, r2
   17ef4:	eb65 0503 	sbc.w	r5, r5, r3
   17ef8:	085b      	lsrs	r3, r3, #1
   17efa:	ea4f 0232 	mov.w	r2, r2, rrx
   17efe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   17f02:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   17f06:	ebb6 0e02 	subs.w	lr, r6, r2
   17f0a:	eb75 0e03 	sbcs.w	lr, r5, r3
   17f0e:	bf22      	ittt	cs
   17f10:	1ab6      	subcs	r6, r6, r2
   17f12:	4675      	movcs	r5, lr
   17f14:	ea40 000c 	orrcs.w	r0, r0, ip
   17f18:	085b      	lsrs	r3, r3, #1
   17f1a:	ea4f 0232 	mov.w	r2, r2, rrx
   17f1e:	ebb6 0e02 	subs.w	lr, r6, r2
   17f22:	eb75 0e03 	sbcs.w	lr, r5, r3
   17f26:	bf22      	ittt	cs
   17f28:	1ab6      	subcs	r6, r6, r2
   17f2a:	4675      	movcs	r5, lr
   17f2c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   17f30:	085b      	lsrs	r3, r3, #1
   17f32:	ea4f 0232 	mov.w	r2, r2, rrx
   17f36:	ebb6 0e02 	subs.w	lr, r6, r2
   17f3a:	eb75 0e03 	sbcs.w	lr, r5, r3
   17f3e:	bf22      	ittt	cs
   17f40:	1ab6      	subcs	r6, r6, r2
   17f42:	4675      	movcs	r5, lr
   17f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   17f48:	085b      	lsrs	r3, r3, #1
   17f4a:	ea4f 0232 	mov.w	r2, r2, rrx
   17f4e:	ebb6 0e02 	subs.w	lr, r6, r2
   17f52:	eb75 0e03 	sbcs.w	lr, r5, r3
   17f56:	bf22      	ittt	cs
   17f58:	1ab6      	subcs	r6, r6, r2
   17f5a:	4675      	movcs	r5, lr
   17f5c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   17f60:	ea55 0e06 	orrs.w	lr, r5, r6
   17f64:	d018      	beq.n	17f98 <__aeabi_ddiv+0x114>
   17f66:	ea4f 1505 	mov.w	r5, r5, lsl #4
   17f6a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   17f6e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   17f72:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   17f76:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   17f7a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   17f7e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   17f82:	d1c0      	bne.n	17f06 <__aeabi_ddiv+0x82>
   17f84:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17f88:	d10b      	bne.n	17fa2 <__aeabi_ddiv+0x11e>
   17f8a:	ea41 0100 	orr.w	r1, r1, r0
   17f8e:	f04f 0000 	mov.w	r0, #0
   17f92:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   17f96:	e7b6      	b.n	17f06 <__aeabi_ddiv+0x82>
   17f98:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17f9c:	bf04      	itt	eq
   17f9e:	4301      	orreq	r1, r0
   17fa0:	2000      	moveq	r0, #0
   17fa2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17fa6:	bf88      	it	hi
   17fa8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17fac:	f63f aeaf 	bhi.w	17d0e <__aeabi_dmul+0xde>
   17fb0:	ebb5 0c03 	subs.w	ip, r5, r3
   17fb4:	bf04      	itt	eq
   17fb6:	ebb6 0c02 	subseq.w	ip, r6, r2
   17fba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   17fbe:	f150 0000 	adcs.w	r0, r0, #0
   17fc2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17fc6:	bd70      	pop	{r4, r5, r6, pc}
   17fc8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   17fcc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   17fd0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   17fd4:	bfc2      	ittt	gt
   17fd6:	ebd4 050c 	rsbsgt	r5, r4, ip
   17fda:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17fde:	bd70      	popgt	{r4, r5, r6, pc}
   17fe0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17fe4:	f04f 0e00 	mov.w	lr, #0
   17fe8:	3c01      	subs	r4, #1
   17fea:	e690      	b.n	17d0e <__aeabi_dmul+0xde>
   17fec:	ea45 0e06 	orr.w	lr, r5, r6
   17ff0:	e68d      	b.n	17d0e <__aeabi_dmul+0xde>
   17ff2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17ff6:	ea94 0f0c 	teq	r4, ip
   17ffa:	bf08      	it	eq
   17ffc:	ea95 0f0c 	teqeq	r5, ip
   18000:	f43f af3b 	beq.w	17e7a <__aeabi_dmul+0x24a>
   18004:	ea94 0f0c 	teq	r4, ip
   18008:	d10a      	bne.n	18020 <__aeabi_ddiv+0x19c>
   1800a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1800e:	f47f af34 	bne.w	17e7a <__aeabi_dmul+0x24a>
   18012:	ea95 0f0c 	teq	r5, ip
   18016:	f47f af25 	bne.w	17e64 <__aeabi_dmul+0x234>
   1801a:	4610      	mov	r0, r2
   1801c:	4619      	mov	r1, r3
   1801e:	e72c      	b.n	17e7a <__aeabi_dmul+0x24a>
   18020:	ea95 0f0c 	teq	r5, ip
   18024:	d106      	bne.n	18034 <__aeabi_ddiv+0x1b0>
   18026:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1802a:	f43f aefd 	beq.w	17e28 <__aeabi_dmul+0x1f8>
   1802e:	4610      	mov	r0, r2
   18030:	4619      	mov	r1, r3
   18032:	e722      	b.n	17e7a <__aeabi_dmul+0x24a>
   18034:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18038:	bf18      	it	ne
   1803a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1803e:	f47f aec5 	bne.w	17dcc <__aeabi_dmul+0x19c>
   18042:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   18046:	f47f af0d 	bne.w	17e64 <__aeabi_dmul+0x234>
   1804a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1804e:	f47f aeeb 	bne.w	17e28 <__aeabi_dmul+0x1f8>
   18052:	e712      	b.n	17e7a <__aeabi_dmul+0x24a>

00018054 <__gedf2>:
   18054:	f04f 3cff 	mov.w	ip, #4294967295
   18058:	e006      	b.n	18068 <__cmpdf2+0x4>
   1805a:	bf00      	nop

0001805c <__ledf2>:
   1805c:	f04f 0c01 	mov.w	ip, #1
   18060:	e002      	b.n	18068 <__cmpdf2+0x4>
   18062:	bf00      	nop

00018064 <__cmpdf2>:
   18064:	f04f 0c01 	mov.w	ip, #1
   18068:	f84d cd04 	str.w	ip, [sp, #-4]!
   1806c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   18070:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18074:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   18078:	bf18      	it	ne
   1807a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1807e:	d01b      	beq.n	180b8 <__cmpdf2+0x54>
   18080:	b001      	add	sp, #4
   18082:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   18086:	bf0c      	ite	eq
   18088:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1808c:	ea91 0f03 	teqne	r1, r3
   18090:	bf02      	ittt	eq
   18092:	ea90 0f02 	teqeq	r0, r2
   18096:	2000      	moveq	r0, #0
   18098:	4770      	bxeq	lr
   1809a:	f110 0f00 	cmn.w	r0, #0
   1809e:	ea91 0f03 	teq	r1, r3
   180a2:	bf58      	it	pl
   180a4:	4299      	cmppl	r1, r3
   180a6:	bf08      	it	eq
   180a8:	4290      	cmpeq	r0, r2
   180aa:	bf2c      	ite	cs
   180ac:	17d8      	asrcs	r0, r3, #31
   180ae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   180b2:	f040 0001 	orr.w	r0, r0, #1
   180b6:	4770      	bx	lr
   180b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   180bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   180c0:	d102      	bne.n	180c8 <__cmpdf2+0x64>
   180c2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   180c6:	d107      	bne.n	180d8 <__cmpdf2+0x74>
   180c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   180cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   180d0:	d1d6      	bne.n	18080 <__cmpdf2+0x1c>
   180d2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   180d6:	d0d3      	beq.n	18080 <__cmpdf2+0x1c>
   180d8:	f85d 0b04 	ldr.w	r0, [sp], #4
   180dc:	4770      	bx	lr
   180de:	bf00      	nop

000180e0 <__aeabi_cdrcmple>:
   180e0:	4684      	mov	ip, r0
   180e2:	4610      	mov	r0, r2
   180e4:	4662      	mov	r2, ip
   180e6:	468c      	mov	ip, r1
   180e8:	4619      	mov	r1, r3
   180ea:	4663      	mov	r3, ip
   180ec:	e000      	b.n	180f0 <__aeabi_cdcmpeq>
   180ee:	bf00      	nop

000180f0 <__aeabi_cdcmpeq>:
   180f0:	b501      	push	{r0, lr}
   180f2:	f7ff ffb7 	bl	18064 <__cmpdf2>
   180f6:	2800      	cmp	r0, #0
   180f8:	bf48      	it	mi
   180fa:	f110 0f00 	cmnmi.w	r0, #0
   180fe:	bd01      	pop	{r0, pc}

00018100 <__aeabi_dcmpeq>:
   18100:	f84d ed08 	str.w	lr, [sp, #-8]!
   18104:	f7ff fff4 	bl	180f0 <__aeabi_cdcmpeq>
   18108:	bf0c      	ite	eq
   1810a:	2001      	moveq	r0, #1
   1810c:	2000      	movne	r0, #0
   1810e:	f85d fb08 	ldr.w	pc, [sp], #8
   18112:	bf00      	nop

00018114 <__aeabi_dcmplt>:
   18114:	f84d ed08 	str.w	lr, [sp, #-8]!
   18118:	f7ff ffea 	bl	180f0 <__aeabi_cdcmpeq>
   1811c:	bf34      	ite	cc
   1811e:	2001      	movcc	r0, #1
   18120:	2000      	movcs	r0, #0
   18122:	f85d fb08 	ldr.w	pc, [sp], #8
   18126:	bf00      	nop

00018128 <__aeabi_dcmple>:
   18128:	f84d ed08 	str.w	lr, [sp, #-8]!
   1812c:	f7ff ffe0 	bl	180f0 <__aeabi_cdcmpeq>
   18130:	bf94      	ite	ls
   18132:	2001      	movls	r0, #1
   18134:	2000      	movhi	r0, #0
   18136:	f85d fb08 	ldr.w	pc, [sp], #8
   1813a:	bf00      	nop

0001813c <__aeabi_dcmpge>:
   1813c:	f84d ed08 	str.w	lr, [sp, #-8]!
   18140:	f7ff ffce 	bl	180e0 <__aeabi_cdrcmple>
   18144:	bf94      	ite	ls
   18146:	2001      	movls	r0, #1
   18148:	2000      	movhi	r0, #0
   1814a:	f85d fb08 	ldr.w	pc, [sp], #8
   1814e:	bf00      	nop

00018150 <__aeabi_dcmpgt>:
   18150:	f84d ed08 	str.w	lr, [sp, #-8]!
   18154:	f7ff ffc4 	bl	180e0 <__aeabi_cdrcmple>
   18158:	bf34      	ite	cc
   1815a:	2001      	movcc	r0, #1
   1815c:	2000      	movcs	r0, #0
   1815e:	f85d fb08 	ldr.w	pc, [sp], #8
   18162:	bf00      	nop

00018164 <__aeabi_d2iz>:
   18164:	ea4f 0241 	mov.w	r2, r1, lsl #1
   18168:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1816c:	d215      	bcs.n	1819a <__aeabi_d2iz+0x36>
   1816e:	d511      	bpl.n	18194 <__aeabi_d2iz+0x30>
   18170:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   18174:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   18178:	d912      	bls.n	181a0 <__aeabi_d2iz+0x3c>
   1817a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1817e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   18182:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   18186:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1818a:	fa23 f002 	lsr.w	r0, r3, r2
   1818e:	bf18      	it	ne
   18190:	4240      	negne	r0, r0
   18192:	4770      	bx	lr
   18194:	f04f 0000 	mov.w	r0, #0
   18198:	4770      	bx	lr
   1819a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1819e:	d105      	bne.n	181ac <__aeabi_d2iz+0x48>
   181a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   181a4:	bf08      	it	eq
   181a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   181aa:	4770      	bx	lr
   181ac:	f04f 0000 	mov.w	r0, #0
   181b0:	4770      	bx	lr
   181b2:	bf00      	nop

000181b4 <__aeabi_d2uiz>:
   181b4:	004a      	lsls	r2, r1, #1
   181b6:	d211      	bcs.n	181dc <__aeabi_d2uiz+0x28>
   181b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   181bc:	d211      	bcs.n	181e2 <__aeabi_d2uiz+0x2e>
   181be:	d50d      	bpl.n	181dc <__aeabi_d2uiz+0x28>
   181c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   181c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   181c8:	d40e      	bmi.n	181e8 <__aeabi_d2uiz+0x34>
   181ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   181ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   181d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   181d6:	fa23 f002 	lsr.w	r0, r3, r2
   181da:	4770      	bx	lr
   181dc:	f04f 0000 	mov.w	r0, #0
   181e0:	4770      	bx	lr
   181e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   181e6:	d102      	bne.n	181ee <__aeabi_d2uiz+0x3a>
   181e8:	f04f 30ff 	mov.w	r0, #4294967295
   181ec:	4770      	bx	lr
   181ee:	f04f 0000 	mov.w	r0, #0
   181f2:	4770      	bx	lr

000181f4 <__aeabi_d2f>:
   181f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   181f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   181fc:	bf24      	itt	cs
   181fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   18202:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   18206:	d90d      	bls.n	18224 <__aeabi_d2f+0x30>
   18208:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1820c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   18210:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   18214:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   18218:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   1821c:	bf08      	it	eq
   1821e:	f020 0001 	biceq.w	r0, r0, #1
   18222:	4770      	bx	lr
   18224:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   18228:	d121      	bne.n	1826e <__aeabi_d2f+0x7a>
   1822a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1822e:	bfbc      	itt	lt
   18230:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   18234:	4770      	bxlt	lr
   18236:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1823a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1823e:	f1c2 0218 	rsb	r2, r2, #24
   18242:	f1c2 0c20 	rsb	ip, r2, #32
   18246:	fa10 f30c 	lsls.w	r3, r0, ip
   1824a:	fa20 f002 	lsr.w	r0, r0, r2
   1824e:	bf18      	it	ne
   18250:	f040 0001 	orrne.w	r0, r0, #1
   18254:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   18258:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   1825c:	fa03 fc0c 	lsl.w	ip, r3, ip
   18260:	ea40 000c 	orr.w	r0, r0, ip
   18264:	fa23 f302 	lsr.w	r3, r3, r2
   18268:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1826c:	e7cc      	b.n	18208 <__aeabi_d2f+0x14>
   1826e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   18272:	d107      	bne.n	18284 <__aeabi_d2f+0x90>
   18274:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   18278:	bf1e      	ittt	ne
   1827a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1827e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   18282:	4770      	bxne	lr
   18284:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   18288:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1828c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18290:	4770      	bx	lr
   18292:	bf00      	nop

00018294 <__aeabi_frsub>:
   18294:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   18298:	e002      	b.n	182a0 <__addsf3>
   1829a:	bf00      	nop

0001829c <__aeabi_fsub>:
   1829c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000182a0 <__addsf3>:
   182a0:	0042      	lsls	r2, r0, #1
   182a2:	bf1f      	itttt	ne
   182a4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   182a8:	ea92 0f03 	teqne	r2, r3
   182ac:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   182b0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   182b4:	d06a      	beq.n	1838c <__addsf3+0xec>
   182b6:	ea4f 6212 	mov.w	r2, r2, lsr #24
   182ba:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   182be:	bfc1      	itttt	gt
   182c0:	18d2      	addgt	r2, r2, r3
   182c2:	4041      	eorgt	r1, r0
   182c4:	4048      	eorgt	r0, r1
   182c6:	4041      	eorgt	r1, r0
   182c8:	bfb8      	it	lt
   182ca:	425b      	neglt	r3, r3
   182cc:	2b19      	cmp	r3, #25
   182ce:	bf88      	it	hi
   182d0:	4770      	bxhi	lr
   182d2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   182d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   182da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   182de:	bf18      	it	ne
   182e0:	4240      	negne	r0, r0
   182e2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   182e6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   182ea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   182ee:	bf18      	it	ne
   182f0:	4249      	negne	r1, r1
   182f2:	ea92 0f03 	teq	r2, r3
   182f6:	d03f      	beq.n	18378 <__addsf3+0xd8>
   182f8:	f1a2 0201 	sub.w	r2, r2, #1
   182fc:	fa41 fc03 	asr.w	ip, r1, r3
   18300:	eb10 000c 	adds.w	r0, r0, ip
   18304:	f1c3 0320 	rsb	r3, r3, #32
   18308:	fa01 f103 	lsl.w	r1, r1, r3
   1830c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18310:	d502      	bpl.n	18318 <__addsf3+0x78>
   18312:	4249      	negs	r1, r1
   18314:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   18318:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1831c:	d313      	bcc.n	18346 <__addsf3+0xa6>
   1831e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   18322:	d306      	bcc.n	18332 <__addsf3+0x92>
   18324:	0840      	lsrs	r0, r0, #1
   18326:	ea4f 0131 	mov.w	r1, r1, rrx
   1832a:	f102 0201 	add.w	r2, r2, #1
   1832e:	2afe      	cmp	r2, #254	; 0xfe
   18330:	d251      	bcs.n	183d6 <__addsf3+0x136>
   18332:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   18336:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1833a:	bf08      	it	eq
   1833c:	f020 0001 	biceq.w	r0, r0, #1
   18340:	ea40 0003 	orr.w	r0, r0, r3
   18344:	4770      	bx	lr
   18346:	0049      	lsls	r1, r1, #1
   18348:	eb40 0000 	adc.w	r0, r0, r0
   1834c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   18350:	f1a2 0201 	sub.w	r2, r2, #1
   18354:	d1ed      	bne.n	18332 <__addsf3+0x92>
   18356:	fab0 fc80 	clz	ip, r0
   1835a:	f1ac 0c08 	sub.w	ip, ip, #8
   1835e:	ebb2 020c 	subs.w	r2, r2, ip
   18362:	fa00 f00c 	lsl.w	r0, r0, ip
   18366:	bfaa      	itet	ge
   18368:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   1836c:	4252      	neglt	r2, r2
   1836e:	4318      	orrge	r0, r3
   18370:	bfbc      	itt	lt
   18372:	40d0      	lsrlt	r0, r2
   18374:	4318      	orrlt	r0, r3
   18376:	4770      	bx	lr
   18378:	f092 0f00 	teq	r2, #0
   1837c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   18380:	bf06      	itte	eq
   18382:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   18386:	3201      	addeq	r2, #1
   18388:	3b01      	subne	r3, #1
   1838a:	e7b5      	b.n	182f8 <__addsf3+0x58>
   1838c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   18390:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18394:	bf18      	it	ne
   18396:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1839a:	d021      	beq.n	183e0 <__addsf3+0x140>
   1839c:	ea92 0f03 	teq	r2, r3
   183a0:	d004      	beq.n	183ac <__addsf3+0x10c>
   183a2:	f092 0f00 	teq	r2, #0
   183a6:	bf08      	it	eq
   183a8:	4608      	moveq	r0, r1
   183aa:	4770      	bx	lr
   183ac:	ea90 0f01 	teq	r0, r1
   183b0:	bf1c      	itt	ne
   183b2:	2000      	movne	r0, #0
   183b4:	4770      	bxne	lr
   183b6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   183ba:	d104      	bne.n	183c6 <__addsf3+0x126>
   183bc:	0040      	lsls	r0, r0, #1
   183be:	bf28      	it	cs
   183c0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   183c4:	4770      	bx	lr
   183c6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   183ca:	bf3c      	itt	cc
   183cc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   183d0:	4770      	bxcc	lr
   183d2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   183d6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   183da:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   183de:	4770      	bx	lr
   183e0:	ea7f 6222 	mvns.w	r2, r2, asr #24
   183e4:	bf16      	itet	ne
   183e6:	4608      	movne	r0, r1
   183e8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   183ec:	4601      	movne	r1, r0
   183ee:	0242      	lsls	r2, r0, #9
   183f0:	bf06      	itte	eq
   183f2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   183f6:	ea90 0f01 	teqeq	r0, r1
   183fa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   183fe:	4770      	bx	lr

00018400 <__aeabi_ui2f>:
   18400:	f04f 0300 	mov.w	r3, #0
   18404:	e004      	b.n	18410 <__aeabi_i2f+0x8>
   18406:	bf00      	nop

00018408 <__aeabi_i2f>:
   18408:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   1840c:	bf48      	it	mi
   1840e:	4240      	negmi	r0, r0
   18410:	ea5f 0c00 	movs.w	ip, r0
   18414:	bf08      	it	eq
   18416:	4770      	bxeq	lr
   18418:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   1841c:	4601      	mov	r1, r0
   1841e:	f04f 0000 	mov.w	r0, #0
   18422:	e01c      	b.n	1845e <__aeabi_l2f+0x2a>

00018424 <__aeabi_ul2f>:
   18424:	ea50 0201 	orrs.w	r2, r0, r1
   18428:	bf08      	it	eq
   1842a:	4770      	bxeq	lr
   1842c:	f04f 0300 	mov.w	r3, #0
   18430:	e00a      	b.n	18448 <__aeabi_l2f+0x14>
   18432:	bf00      	nop

00018434 <__aeabi_l2f>:
   18434:	ea50 0201 	orrs.w	r2, r0, r1
   18438:	bf08      	it	eq
   1843a:	4770      	bxeq	lr
   1843c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   18440:	d502      	bpl.n	18448 <__aeabi_l2f+0x14>
   18442:	4240      	negs	r0, r0
   18444:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18448:	ea5f 0c01 	movs.w	ip, r1
   1844c:	bf02      	ittt	eq
   1844e:	4684      	moveq	ip, r0
   18450:	4601      	moveq	r1, r0
   18452:	2000      	moveq	r0, #0
   18454:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   18458:	bf08      	it	eq
   1845a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1845e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   18462:	fabc f28c 	clz	r2, ip
   18466:	3a08      	subs	r2, #8
   18468:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   1846c:	db10      	blt.n	18490 <__aeabi_l2f+0x5c>
   1846e:	fa01 fc02 	lsl.w	ip, r1, r2
   18472:	4463      	add	r3, ip
   18474:	fa00 fc02 	lsl.w	ip, r0, r2
   18478:	f1c2 0220 	rsb	r2, r2, #32
   1847c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   18480:	fa20 f202 	lsr.w	r2, r0, r2
   18484:	eb43 0002 	adc.w	r0, r3, r2
   18488:	bf08      	it	eq
   1848a:	f020 0001 	biceq.w	r0, r0, #1
   1848e:	4770      	bx	lr
   18490:	f102 0220 	add.w	r2, r2, #32
   18494:	fa01 fc02 	lsl.w	ip, r1, r2
   18498:	f1c2 0220 	rsb	r2, r2, #32
   1849c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   184a0:	fa21 f202 	lsr.w	r2, r1, r2
   184a4:	eb43 0002 	adc.w	r0, r3, r2
   184a8:	bf08      	it	eq
   184aa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   184ae:	4770      	bx	lr

000184b0 <__aeabi_fmul>:
   184b0:	f04f 0cff 	mov.w	ip, #255	; 0xff
   184b4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   184b8:	bf1e      	ittt	ne
   184ba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   184be:	ea92 0f0c 	teqne	r2, ip
   184c2:	ea93 0f0c 	teqne	r3, ip
   184c6:	d06f      	beq.n	185a8 <__aeabi_fmul+0xf8>
   184c8:	441a      	add	r2, r3
   184ca:	ea80 0c01 	eor.w	ip, r0, r1
   184ce:	0240      	lsls	r0, r0, #9
   184d0:	bf18      	it	ne
   184d2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   184d6:	d01e      	beq.n	18516 <__aeabi_fmul+0x66>
   184d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   184dc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   184e0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   184e4:	fba0 3101 	umull	r3, r1, r0, r1
   184e8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   184ec:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   184f0:	bf3e      	ittt	cc
   184f2:	0049      	lslcc	r1, r1, #1
   184f4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   184f8:	005b      	lslcc	r3, r3, #1
   184fa:	ea40 0001 	orr.w	r0, r0, r1
   184fe:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   18502:	2afd      	cmp	r2, #253	; 0xfd
   18504:	d81d      	bhi.n	18542 <__aeabi_fmul+0x92>
   18506:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1850a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1850e:	bf08      	it	eq
   18510:	f020 0001 	biceq.w	r0, r0, #1
   18514:	4770      	bx	lr
   18516:	f090 0f00 	teq	r0, #0
   1851a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1851e:	bf08      	it	eq
   18520:	0249      	lsleq	r1, r1, #9
   18522:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   18526:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   1852a:	3a7f      	subs	r2, #127	; 0x7f
   1852c:	bfc2      	ittt	gt
   1852e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   18532:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   18536:	4770      	bxgt	lr
   18538:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1853c:	f04f 0300 	mov.w	r3, #0
   18540:	3a01      	subs	r2, #1
   18542:	dc5d      	bgt.n	18600 <__aeabi_fmul+0x150>
   18544:	f112 0f19 	cmn.w	r2, #25
   18548:	bfdc      	itt	le
   1854a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   1854e:	4770      	bxle	lr
   18550:	f1c2 0200 	rsb	r2, r2, #0
   18554:	0041      	lsls	r1, r0, #1
   18556:	fa21 f102 	lsr.w	r1, r1, r2
   1855a:	f1c2 0220 	rsb	r2, r2, #32
   1855e:	fa00 fc02 	lsl.w	ip, r0, r2
   18562:	ea5f 0031 	movs.w	r0, r1, rrx
   18566:	f140 0000 	adc.w	r0, r0, #0
   1856a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   1856e:	bf08      	it	eq
   18570:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   18574:	4770      	bx	lr
   18576:	f092 0f00 	teq	r2, #0
   1857a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1857e:	bf02      	ittt	eq
   18580:	0040      	lsleq	r0, r0, #1
   18582:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   18586:	3a01      	subeq	r2, #1
   18588:	d0f9      	beq.n	1857e <__aeabi_fmul+0xce>
   1858a:	ea40 000c 	orr.w	r0, r0, ip
   1858e:	f093 0f00 	teq	r3, #0
   18592:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18596:	bf02      	ittt	eq
   18598:	0049      	lsleq	r1, r1, #1
   1859a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1859e:	3b01      	subeq	r3, #1
   185a0:	d0f9      	beq.n	18596 <__aeabi_fmul+0xe6>
   185a2:	ea41 010c 	orr.w	r1, r1, ip
   185a6:	e78f      	b.n	184c8 <__aeabi_fmul+0x18>
   185a8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   185ac:	ea92 0f0c 	teq	r2, ip
   185b0:	bf18      	it	ne
   185b2:	ea93 0f0c 	teqne	r3, ip
   185b6:	d00a      	beq.n	185ce <__aeabi_fmul+0x11e>
   185b8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   185bc:	bf18      	it	ne
   185be:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   185c2:	d1d8      	bne.n	18576 <__aeabi_fmul+0xc6>
   185c4:	ea80 0001 	eor.w	r0, r0, r1
   185c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   185cc:	4770      	bx	lr
   185ce:	f090 0f00 	teq	r0, #0
   185d2:	bf17      	itett	ne
   185d4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   185d8:	4608      	moveq	r0, r1
   185da:	f091 0f00 	teqne	r1, #0
   185de:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   185e2:	d014      	beq.n	1860e <__aeabi_fmul+0x15e>
   185e4:	ea92 0f0c 	teq	r2, ip
   185e8:	d101      	bne.n	185ee <__aeabi_fmul+0x13e>
   185ea:	0242      	lsls	r2, r0, #9
   185ec:	d10f      	bne.n	1860e <__aeabi_fmul+0x15e>
   185ee:	ea93 0f0c 	teq	r3, ip
   185f2:	d103      	bne.n	185fc <__aeabi_fmul+0x14c>
   185f4:	024b      	lsls	r3, r1, #9
   185f6:	bf18      	it	ne
   185f8:	4608      	movne	r0, r1
   185fa:	d108      	bne.n	1860e <__aeabi_fmul+0x15e>
   185fc:	ea80 0001 	eor.w	r0, r0, r1
   18600:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   18604:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18608:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1860c:	4770      	bx	lr
   1860e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18612:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   18616:	4770      	bx	lr

00018618 <__aeabi_fdiv>:
   18618:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1861c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   18620:	bf1e      	ittt	ne
   18622:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   18626:	ea92 0f0c 	teqne	r2, ip
   1862a:	ea93 0f0c 	teqne	r3, ip
   1862e:	d069      	beq.n	18704 <__aeabi_fdiv+0xec>
   18630:	eba2 0203 	sub.w	r2, r2, r3
   18634:	ea80 0c01 	eor.w	ip, r0, r1
   18638:	0249      	lsls	r1, r1, #9
   1863a:	ea4f 2040 	mov.w	r0, r0, lsl #9
   1863e:	d037      	beq.n	186b0 <__aeabi_fdiv+0x98>
   18640:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18644:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   18648:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   1864c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   18650:	428b      	cmp	r3, r1
   18652:	bf38      	it	cc
   18654:	005b      	lslcc	r3, r3, #1
   18656:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   1865a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   1865e:	428b      	cmp	r3, r1
   18660:	bf24      	itt	cs
   18662:	1a5b      	subcs	r3, r3, r1
   18664:	ea40 000c 	orrcs.w	r0, r0, ip
   18668:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   1866c:	bf24      	itt	cs
   1866e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   18672:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   18676:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   1867a:	bf24      	itt	cs
   1867c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   18680:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   18684:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   18688:	bf24      	itt	cs
   1868a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   1868e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   18692:	011b      	lsls	r3, r3, #4
   18694:	bf18      	it	ne
   18696:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   1869a:	d1e0      	bne.n	1865e <__aeabi_fdiv+0x46>
   1869c:	2afd      	cmp	r2, #253	; 0xfd
   1869e:	f63f af50 	bhi.w	18542 <__aeabi_fmul+0x92>
   186a2:	428b      	cmp	r3, r1
   186a4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   186a8:	bf08      	it	eq
   186aa:	f020 0001 	biceq.w	r0, r0, #1
   186ae:	4770      	bx	lr
   186b0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   186b4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   186b8:	327f      	adds	r2, #127	; 0x7f
   186ba:	bfc2      	ittt	gt
   186bc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   186c0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   186c4:	4770      	bxgt	lr
   186c6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   186ca:	f04f 0300 	mov.w	r3, #0
   186ce:	3a01      	subs	r2, #1
   186d0:	e737      	b.n	18542 <__aeabi_fmul+0x92>
   186d2:	f092 0f00 	teq	r2, #0
   186d6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   186da:	bf02      	ittt	eq
   186dc:	0040      	lsleq	r0, r0, #1
   186de:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   186e2:	3a01      	subeq	r2, #1
   186e4:	d0f9      	beq.n	186da <__aeabi_fdiv+0xc2>
   186e6:	ea40 000c 	orr.w	r0, r0, ip
   186ea:	f093 0f00 	teq	r3, #0
   186ee:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   186f2:	bf02      	ittt	eq
   186f4:	0049      	lsleq	r1, r1, #1
   186f6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   186fa:	3b01      	subeq	r3, #1
   186fc:	d0f9      	beq.n	186f2 <__aeabi_fdiv+0xda>
   186fe:	ea41 010c 	orr.w	r1, r1, ip
   18702:	e795      	b.n	18630 <__aeabi_fdiv+0x18>
   18704:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   18708:	ea92 0f0c 	teq	r2, ip
   1870c:	d108      	bne.n	18720 <__aeabi_fdiv+0x108>
   1870e:	0242      	lsls	r2, r0, #9
   18710:	f47f af7d 	bne.w	1860e <__aeabi_fmul+0x15e>
   18714:	ea93 0f0c 	teq	r3, ip
   18718:	f47f af70 	bne.w	185fc <__aeabi_fmul+0x14c>
   1871c:	4608      	mov	r0, r1
   1871e:	e776      	b.n	1860e <__aeabi_fmul+0x15e>
   18720:	ea93 0f0c 	teq	r3, ip
   18724:	d104      	bne.n	18730 <__aeabi_fdiv+0x118>
   18726:	024b      	lsls	r3, r1, #9
   18728:	f43f af4c 	beq.w	185c4 <__aeabi_fmul+0x114>
   1872c:	4608      	mov	r0, r1
   1872e:	e76e      	b.n	1860e <__aeabi_fmul+0x15e>
   18730:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   18734:	bf18      	it	ne
   18736:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1873a:	d1ca      	bne.n	186d2 <__aeabi_fdiv+0xba>
   1873c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   18740:	f47f af5c 	bne.w	185fc <__aeabi_fmul+0x14c>
   18744:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   18748:	f47f af3c 	bne.w	185c4 <__aeabi_fmul+0x114>
   1874c:	e75f      	b.n	1860e <__aeabi_fmul+0x15e>
   1874e:	bf00      	nop

00018750 <__gesf2>:
   18750:	f04f 3cff 	mov.w	ip, #4294967295
   18754:	e006      	b.n	18764 <__cmpsf2+0x4>
   18756:	bf00      	nop

00018758 <__lesf2>:
   18758:	f04f 0c01 	mov.w	ip, #1
   1875c:	e002      	b.n	18764 <__cmpsf2+0x4>
   1875e:	bf00      	nop

00018760 <__cmpsf2>:
   18760:	f04f 0c01 	mov.w	ip, #1
   18764:	f84d cd04 	str.w	ip, [sp, #-4]!
   18768:	ea4f 0240 	mov.w	r2, r0, lsl #1
   1876c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   18770:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18774:	bf18      	it	ne
   18776:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1877a:	d011      	beq.n	187a0 <__cmpsf2+0x40>
   1877c:	b001      	add	sp, #4
   1877e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   18782:	bf18      	it	ne
   18784:	ea90 0f01 	teqne	r0, r1
   18788:	bf58      	it	pl
   1878a:	ebb2 0003 	subspl.w	r0, r2, r3
   1878e:	bf88      	it	hi
   18790:	17c8      	asrhi	r0, r1, #31
   18792:	bf38      	it	cc
   18794:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   18798:	bf18      	it	ne
   1879a:	f040 0001 	orrne.w	r0, r0, #1
   1879e:	4770      	bx	lr
   187a0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   187a4:	d102      	bne.n	187ac <__cmpsf2+0x4c>
   187a6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   187aa:	d105      	bne.n	187b8 <__cmpsf2+0x58>
   187ac:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   187b0:	d1e4      	bne.n	1877c <__cmpsf2+0x1c>
   187b2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   187b6:	d0e1      	beq.n	1877c <__cmpsf2+0x1c>
   187b8:	f85d 0b04 	ldr.w	r0, [sp], #4
   187bc:	4770      	bx	lr
   187be:	bf00      	nop

000187c0 <__aeabi_cfrcmple>:
   187c0:	4684      	mov	ip, r0
   187c2:	4608      	mov	r0, r1
   187c4:	4661      	mov	r1, ip
   187c6:	e7ff      	b.n	187c8 <__aeabi_cfcmpeq>

000187c8 <__aeabi_cfcmpeq>:
   187c8:	b50f      	push	{r0, r1, r2, r3, lr}
   187ca:	f7ff ffc9 	bl	18760 <__cmpsf2>
   187ce:	2800      	cmp	r0, #0
   187d0:	bf48      	it	mi
   187d2:	f110 0f00 	cmnmi.w	r0, #0
   187d6:	bd0f      	pop	{r0, r1, r2, r3, pc}

000187d8 <__aeabi_fcmpeq>:
   187d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   187dc:	f7ff fff4 	bl	187c8 <__aeabi_cfcmpeq>
   187e0:	bf0c      	ite	eq
   187e2:	2001      	moveq	r0, #1
   187e4:	2000      	movne	r0, #0
   187e6:	f85d fb08 	ldr.w	pc, [sp], #8
   187ea:	bf00      	nop

000187ec <__aeabi_fcmplt>:
   187ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   187f0:	f7ff ffea 	bl	187c8 <__aeabi_cfcmpeq>
   187f4:	bf34      	ite	cc
   187f6:	2001      	movcc	r0, #1
   187f8:	2000      	movcs	r0, #0
   187fa:	f85d fb08 	ldr.w	pc, [sp], #8
   187fe:	bf00      	nop

00018800 <__aeabi_fcmple>:
   18800:	f84d ed08 	str.w	lr, [sp, #-8]!
   18804:	f7ff ffe0 	bl	187c8 <__aeabi_cfcmpeq>
   18808:	bf94      	ite	ls
   1880a:	2001      	movls	r0, #1
   1880c:	2000      	movhi	r0, #0
   1880e:	f85d fb08 	ldr.w	pc, [sp], #8
   18812:	bf00      	nop

00018814 <__aeabi_fcmpge>:
   18814:	f84d ed08 	str.w	lr, [sp, #-8]!
   18818:	f7ff ffd2 	bl	187c0 <__aeabi_cfrcmple>
   1881c:	bf94      	ite	ls
   1881e:	2001      	movls	r0, #1
   18820:	2000      	movhi	r0, #0
   18822:	f85d fb08 	ldr.w	pc, [sp], #8
   18826:	bf00      	nop

00018828 <__aeabi_fcmpgt>:
   18828:	f84d ed08 	str.w	lr, [sp, #-8]!
   1882c:	f7ff ffc8 	bl	187c0 <__aeabi_cfrcmple>
   18830:	bf34      	ite	cc
   18832:	2001      	movcc	r0, #1
   18834:	2000      	movcs	r0, #0
   18836:	f85d fb08 	ldr.w	pc, [sp], #8
   1883a:	bf00      	nop

0001883c <__aeabi_f2iz>:
   1883c:	ea4f 0240 	mov.w	r2, r0, lsl #1
   18840:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   18844:	d30f      	bcc.n	18866 <__aeabi_f2iz+0x2a>
   18846:	f04f 039e 	mov.w	r3, #158	; 0x9e
   1884a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   1884e:	d90d      	bls.n	1886c <__aeabi_f2iz+0x30>
   18850:	ea4f 2300 	mov.w	r3, r0, lsl #8
   18854:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   18858:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1885c:	fa23 f002 	lsr.w	r0, r3, r2
   18860:	bf18      	it	ne
   18862:	4240      	negne	r0, r0
   18864:	4770      	bx	lr
   18866:	f04f 0000 	mov.w	r0, #0
   1886a:	4770      	bx	lr
   1886c:	f112 0f61 	cmn.w	r2, #97	; 0x61
   18870:	d101      	bne.n	18876 <__aeabi_f2iz+0x3a>
   18872:	0242      	lsls	r2, r0, #9
   18874:	d105      	bne.n	18882 <__aeabi_f2iz+0x46>
   18876:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   1887a:	bf08      	it	eq
   1887c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   18880:	4770      	bx	lr
   18882:	f04f 0000 	mov.w	r0, #0
   18886:	4770      	bx	lr

00018888 <memcpy>:
   18888:	2a0f      	cmp	r2, #15
   1888a:	b4f0      	push	{r4, r5, r6, r7}
   1888c:	d945      	bls.n	1891a <memcpy+0x92>
   1888e:	ea40 0301 	orr.w	r3, r0, r1
   18892:	079b      	lsls	r3, r3, #30
   18894:	d145      	bne.n	18922 <memcpy+0x9a>
   18896:	f1a2 0710 	sub.w	r7, r2, #16
   1889a:	460c      	mov	r4, r1
   1889c:	4603      	mov	r3, r0
   1889e:	093f      	lsrs	r7, r7, #4
   188a0:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   188a4:	3610      	adds	r6, #16
   188a6:	6825      	ldr	r5, [r4, #0]
   188a8:	3310      	adds	r3, #16
   188aa:	3410      	adds	r4, #16
   188ac:	f843 5c10 	str.w	r5, [r3, #-16]
   188b0:	f854 5c0c 	ldr.w	r5, [r4, #-12]
   188b4:	f843 5c0c 	str.w	r5, [r3, #-12]
   188b8:	f854 5c08 	ldr.w	r5, [r4, #-8]
   188bc:	f843 5c08 	str.w	r5, [r3, #-8]
   188c0:	f854 5c04 	ldr.w	r5, [r4, #-4]
   188c4:	f843 5c04 	str.w	r5, [r3, #-4]
   188c8:	42b3      	cmp	r3, r6
   188ca:	d1ec      	bne.n	188a6 <memcpy+0x1e>
   188cc:	1c7b      	adds	r3, r7, #1
   188ce:	f002 0c0f 	and.w	ip, r2, #15
   188d2:	f1bc 0f03 	cmp.w	ip, #3
   188d6:	ea4f 1303 	mov.w	r3, r3, lsl #4
   188da:	4419      	add	r1, r3
   188dc:	4403      	add	r3, r0
   188de:	d922      	bls.n	18926 <memcpy+0x9e>
   188e0:	460e      	mov	r6, r1
   188e2:	461d      	mov	r5, r3
   188e4:	4664      	mov	r4, ip
   188e6:	f856 7b04 	ldr.w	r7, [r6], #4
   188ea:	3c04      	subs	r4, #4
   188ec:	2c03      	cmp	r4, #3
   188ee:	f845 7b04 	str.w	r7, [r5], #4
   188f2:	d8f8      	bhi.n	188e6 <memcpy+0x5e>
   188f4:	f1ac 0404 	sub.w	r4, ip, #4
   188f8:	f002 0203 	and.w	r2, r2, #3
   188fc:	f024 0403 	bic.w	r4, r4, #3
   18900:	3404      	adds	r4, #4
   18902:	4423      	add	r3, r4
   18904:	4421      	add	r1, r4
   18906:	b132      	cbz	r2, 18916 <memcpy+0x8e>
   18908:	440a      	add	r2, r1
   1890a:	f811 4b01 	ldrb.w	r4, [r1], #1
   1890e:	4291      	cmp	r1, r2
   18910:	f803 4b01 	strb.w	r4, [r3], #1
   18914:	d1f9      	bne.n	1890a <memcpy+0x82>
   18916:	bcf0      	pop	{r4, r5, r6, r7}
   18918:	4770      	bx	lr
   1891a:	4603      	mov	r3, r0
   1891c:	2a00      	cmp	r2, #0
   1891e:	d1f3      	bne.n	18908 <memcpy+0x80>
   18920:	e7f9      	b.n	18916 <memcpy+0x8e>
   18922:	4603      	mov	r3, r0
   18924:	e7f0      	b.n	18908 <memcpy+0x80>
   18926:	4662      	mov	r2, ip
   18928:	2a00      	cmp	r2, #0
   1892a:	d1ed      	bne.n	18908 <memcpy+0x80>
   1892c:	e7f3      	b.n	18916 <memcpy+0x8e>
   1892e:	bf00      	nop

00018930 <memset>:
   18930:	0783      	lsls	r3, r0, #30
   18932:	b4f0      	push	{r4, r5, r6, r7}
   18934:	d048      	beq.n	189c8 <memset+0x98>
   18936:	1e54      	subs	r4, r2, #1
   18938:	2a00      	cmp	r2, #0
   1893a:	d043      	beq.n	189c4 <memset+0x94>
   1893c:	b2cd      	uxtb	r5, r1
   1893e:	4603      	mov	r3, r0
   18940:	e002      	b.n	18948 <memset+0x18>
   18942:	2c00      	cmp	r4, #0
   18944:	d03e      	beq.n	189c4 <memset+0x94>
   18946:	4614      	mov	r4, r2
   18948:	f803 5b01 	strb.w	r5, [r3], #1
   1894c:	f013 0f03 	tst.w	r3, #3
   18950:	f104 32ff 	add.w	r2, r4, #4294967295
   18954:	d1f5      	bne.n	18942 <memset+0x12>
   18956:	2c03      	cmp	r4, #3
   18958:	d92d      	bls.n	189b6 <memset+0x86>
   1895a:	b2cd      	uxtb	r5, r1
   1895c:	2c0f      	cmp	r4, #15
   1895e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   18962:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   18966:	d918      	bls.n	1899a <memset+0x6a>
   18968:	f1a4 0710 	sub.w	r7, r4, #16
   1896c:	f103 0610 	add.w	r6, r3, #16
   18970:	461a      	mov	r2, r3
   18972:	093f      	lsrs	r7, r7, #4
   18974:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   18978:	6015      	str	r5, [r2, #0]
   1897a:	3210      	adds	r2, #16
   1897c:	f842 5c0c 	str.w	r5, [r2, #-12]
   18980:	f842 5c08 	str.w	r5, [r2, #-8]
   18984:	f842 5c04 	str.w	r5, [r2, #-4]
   18988:	42b2      	cmp	r2, r6
   1898a:	d1f5      	bne.n	18978 <memset+0x48>
   1898c:	f004 040f 	and.w	r4, r4, #15
   18990:	3701      	adds	r7, #1
   18992:	2c03      	cmp	r4, #3
   18994:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   18998:	d90d      	bls.n	189b6 <memset+0x86>
   1899a:	461e      	mov	r6, r3
   1899c:	4622      	mov	r2, r4
   1899e:	3a04      	subs	r2, #4
   189a0:	f846 5b04 	str.w	r5, [r6], #4
   189a4:	2a03      	cmp	r2, #3
   189a6:	d8fa      	bhi.n	1899e <memset+0x6e>
   189a8:	1f22      	subs	r2, r4, #4
   189aa:	f004 0403 	and.w	r4, r4, #3
   189ae:	f022 0203 	bic.w	r2, r2, #3
   189b2:	3204      	adds	r2, #4
   189b4:	4413      	add	r3, r2
   189b6:	b12c      	cbz	r4, 189c4 <memset+0x94>
   189b8:	b2c9      	uxtb	r1, r1
   189ba:	441c      	add	r4, r3
   189bc:	f803 1b01 	strb.w	r1, [r3], #1
   189c0:	42a3      	cmp	r3, r4
   189c2:	d1fb      	bne.n	189bc <memset+0x8c>
   189c4:	bcf0      	pop	{r4, r5, r6, r7}
   189c6:	4770      	bx	lr
   189c8:	4614      	mov	r4, r2
   189ca:	4603      	mov	r3, r0
   189cc:	e7c3      	b.n	18956 <memset+0x26>
   189ce:	bf00      	nop

000189d0 <strncpy>:
   189d0:	ea40 0301 	orr.w	r3, r0, r1
   189d4:	079b      	lsls	r3, r3, #30
   189d6:	b470      	push	{r4, r5, r6}
   189d8:	d12b      	bne.n	18a32 <strncpy+0x62>
   189da:	2a03      	cmp	r2, #3
   189dc:	bf84      	itt	hi
   189de:	460b      	movhi	r3, r1
   189e0:	4605      	movhi	r5, r0
   189e2:	d926      	bls.n	18a32 <strncpy+0x62>
   189e4:	4619      	mov	r1, r3
   189e6:	f853 4b04 	ldr.w	r4, [r3], #4
   189ea:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
   189ee:	ea26 0604 	bic.w	r6, r6, r4
   189f2:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   189f6:	d105      	bne.n	18a04 <strncpy+0x34>
   189f8:	3a04      	subs	r2, #4
   189fa:	f845 4b04 	str.w	r4, [r5], #4
   189fe:	2a03      	cmp	r2, #3
   18a00:	4619      	mov	r1, r3
   18a02:	d8ef      	bhi.n	189e4 <strncpy+0x14>
   18a04:	b19a      	cbz	r2, 18a2e <strncpy+0x5e>
   18a06:	780c      	ldrb	r4, [r1, #0]
   18a08:	3a01      	subs	r2, #1
   18a0a:	1c6b      	adds	r3, r5, #1
   18a0c:	702c      	strb	r4, [r5, #0]
   18a0e:	b13c      	cbz	r4, 18a20 <strncpy+0x50>
   18a10:	b16a      	cbz	r2, 18a2e <strncpy+0x5e>
   18a12:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   18a16:	3a01      	subs	r2, #1
   18a18:	f803 4b01 	strb.w	r4, [r3], #1
   18a1c:	2c00      	cmp	r4, #0
   18a1e:	d1f7      	bne.n	18a10 <strncpy+0x40>
   18a20:	b12a      	cbz	r2, 18a2e <strncpy+0x5e>
   18a22:	441a      	add	r2, r3
   18a24:	2100      	movs	r1, #0
   18a26:	f803 1b01 	strb.w	r1, [r3], #1
   18a2a:	4293      	cmp	r3, r2
   18a2c:	d1fb      	bne.n	18a26 <strncpy+0x56>
   18a2e:	bc70      	pop	{r4, r5, r6}
   18a30:	4770      	bx	lr
   18a32:	4605      	mov	r5, r0
   18a34:	e7e6      	b.n	18a04 <strncpy+0x34>
   18a36:	bf00      	nop

00018a38 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
   18a38:	2100      	movs	r1, #0
  b	LoopCopyDataInit
   18a3a:	e003      	b.n	18a44 <LoopCopyDataInit>

00018a3c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
   18a3c:	4b0a      	ldr	r3, [pc, #40]	; (18a68 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
   18a3e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
   18a40:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
   18a42:	3104      	adds	r1, #4

00018a44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   18a44:	4809      	ldr	r0, [pc, #36]	; (18a6c <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
   18a46:	4b0a      	ldr	r3, [pc, #40]	; (18a70 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
   18a48:	1842      	adds	r2, r0, r1
	cmp	r2, r3
   18a4a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
   18a4c:	d3f6      	bcc.n	18a3c <CopyDataInit>
	ldr	r2, =_sbss
   18a4e:	4a09      	ldr	r2, [pc, #36]	; (18a74 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
   18a50:	e002      	b.n	18a58 <LoopFillZerobss>

00018a52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
   18a52:	2300      	movs	r3, #0
	str	r3, [r2], #4
   18a54:	f842 3b04 	str.w	r3, [r2], #4

00018a58 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
   18a58:	4b07      	ldr	r3, [pc, #28]	; (18a78 <LoopFillZerobss+0x20>)
	cmp	r2, r3
   18a5a:	429a      	cmp	r2, r3
	bcc	FillZerobss
   18a5c:	d3f9      	bcc.n	18a52 <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
   18a5e:	f7e7 fc6d 	bl	33c <SystemInit>
/* Call the application's entry point.*/
	bl	main
   18a62:	f7fe fe85 	bl	17770 <main>
	bx	lr    
   18a66:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
   18a68:	00018b68 	.word	0x00018b68
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   18a6c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
   18a70:	200005d8 	.word	0x200005d8
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
   18a74:	200005d8 	.word	0x200005d8
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
   18a78:	2004cdd4 	.word	0x2004cdd4

00018a7c <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
   18a7c:	e7fe      	b.n	18a7c <ADC1_2_IRQHandler>
   18a7e:	0000      	movs	r0, r0
   18a80:	75746341 	.word	0x75746341
   18a84:	726f7461 	.word	0x726f7461
   18a88:	00000d0a 	.word	0x00000d0a
   18a8c:	454c4449 	.word	0x454c4449
   18a90:	00000000 	.word	0x00000000

00018a94 <ulKernelPriority>:
   18a94:	0000007f                                ....

00018a98 <heapSTRUCT_SIZE>:
   18a98:	00010010                                         ..

00018a9a <version>:
   18a9a:	3d5a0001                                         ..

00018a9c <utm_east0>:
   18a9c:	00093d5a                                Z=..

00018aa0 <utm_north0>:
   18aa0:	005875e6                                .uX.

00018aa4 <climb_pgain>:
   18aa4:	bcf5c28f                                ....

00018aa8 <climb_igain>:
   18aa8:	3dcccccd                                ...=

00018aac <level_gaz>:
   18aac:	3e9eb852                                R..>

00018ab0 <nav_east0>:
   18ab0:	00093d5a                                Z=..

00018ab4 <nav_north0>:
   18ab4:	005875e6                                .uX.

00018ab8 <nb_waypoint>:
   18ab8:	00000007 33323130 37363534 42413938     ....0123456789AB
   18ac8:	46454443                                CDEF

00018acc <failsafe>:
	...
   18ae0:	20574246 746f6f42 20676e69 3a644924     FBW Booting $Id:
   18af0:	69616d20 2c632e6e 2e312076 30322033      main.c,v 1.3 20
   18b00:	312f3830 32322f30 3a393120 313a3134     08/10/22 19:41:1
   18b10:	61632039 20657373 20707845 000d0a24     9 casse Exp $...
   18b20:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   18b30:	000d0a30 00000d0a 65532d52 6e617672     0.......R-Servan
   18b40:	00000074 65532d49 6e617672 00000074     t...I-Servant...
   18b50:	65532d43 6e617672 00000074 65532d4f     C-Servant...O-Se
   18b60:	6e617672 00000074                       rvant...
