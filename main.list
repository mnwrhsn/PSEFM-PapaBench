
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 40 01 20 61 88 01 00 a5 88 01 00 a5 88 01 00     .@. a...........
      10:	a5 88 01 00 a5 88 01 00 a5 88 01 00 00 00 00 00     ................
	...
      2c:	75 57 00 00 a5 88 01 00 00 00 00 00 81 58 00 00     uW...........X..
      3c:	bd 58 00 00 a5 88 01 00 a5 88 01 00 a5 88 01 00     .X..............
      4c:	a5 88 01 00 a5 88 01 00 a5 88 01 00 a5 88 01 00     ................
      5c:	a5 88 01 00 a5 88 01 00 a5 88 01 00 a5 88 01 00     ................
      6c:	a5 88 01 00 a5 88 01 00 a5 88 01 00 a5 88 01 00     ................
      7c:	a5 88 01 00 a5 88 01 00 a5 88 01 00 a5 88 01 00     ................
      8c:	a5 88 01 00 a5 88 01 00 a5 88 01 00 a5 88 01 00     ................
      9c:	a5 88 01 00 a5 88 01 00 a5 88 01 00 a5 88 01 00     ................
      ac:	a5 88 01 00 a5 88 01 00 a5 88 01 00 a5 88 01 00     ................
      bc:	a5 88 01 00 a5 88 01 00 a5 88 01 00 a5 88 01 00     ................
      cc:	a5 88 01 00 a5 88 01 00 a5 88 01 00 a5 88 01 00     ................
      dc:	a5 88 01 00 a5 88 01 00 a5 88 01 00 a5 88 01 00     ................
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
     31c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     31e:	2300      	movs	r3, #0
     320:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     322:	683b      	ldr	r3, [r7, #0]
     324:	687a      	ldr	r2, [r7, #4]
     326:	e843 2300 	strex	r3, r2, [r3]
     32a:	60fb      	str	r3, [r7, #12]
   return(result);
     32c:	68fb      	ldr	r3, [r7, #12]
}
     32e:	4618      	mov	r0, r3
     330:	3714      	adds	r7, #20
     332:	46bd      	mov	sp, r7
     334:	f85d 7b04 	ldr.w	r7, [sp], #4
     338:	4770      	bx	lr
     33a:	bf00      	nop

0000033c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     344:	f2c4 0302 	movt	r3, #16386	; 0x4002
     348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     350:	6812      	ldr	r2, [r2, #0]
     352:	f042 0201 	orr.w	r2, r2, #1
     356:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     35c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     364:	f2c4 0302 	movt	r3, #16386	; 0x4002
     368:	6859      	ldr	r1, [r3, #4]
     36a:	2300      	movs	r3, #0
     36c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     370:	400b      	ands	r3, r1
     372:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     378:	f2c4 0302 	movt	r3, #16386	; 0x4002
     37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     380:	f2c4 0202 	movt	r2, #16386	; 0x4002
     384:	6812      	ldr	r2, [r2, #0]
     386:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     38a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     38e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b8:	6852      	ldr	r2, [r2, #4]
     3ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3cc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ce:	f000 f8a7 	bl	520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     3d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3de:	609a      	str	r2, [r3, #8]
#endif
}
     3e0:	bd80      	pop	{r7, pc}
     3e2:	bf00      	nop

000003e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3e4:	b480      	push	{r7}
     3e6:	b085      	sub	sp, #20
     3e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	60fb      	str	r3, [r7, #12]
     3ee:	2300      	movs	r3, #0
     3f0:	60bb      	str	r3, [r7, #8]
     3f2:	2300      	movs	r3, #0
     3f4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3fe:	685b      	ldr	r3, [r3, #4]
     400:	f003 030c 	and.w	r3, r3, #12
     404:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b04      	cmp	r3, #4
     40a:	d00d      	beq.n	428 <SystemCoreClockUpdate+0x44>
     40c:	2b08      	cmp	r3, #8
     40e:	d015      	beq.n	43c <SystemCoreClockUpdate+0x58>
     410:	2b00      	cmp	r3, #0
     412:	d15b      	bne.n	4cc <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     414:	f240 0300 	movw	r3, #0
     418:	f2c2 0300 	movt	r3, #8192	; 0x2000
     41c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     420:	f2c0 027a 	movt	r2, #122	; 0x7a
     424:	601a      	str	r2, [r3, #0]
      break;
     426:	e05b      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     428:	f240 0300 	movw	r3, #0
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     434:	f2c0 027a 	movt	r2, #122	; 0x7a
     438:	601a      	str	r2, [r3, #0]
      break;
     43a:	e051      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     440:	f2c4 0302 	movt	r3, #16386	; 0x4002
     444:	685b      	ldr	r3, [r3, #4]
     446:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     44a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     44c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     450:	f2c4 0302 	movt	r3, #16386	; 0x4002
     454:	685b      	ldr	r3, [r3, #4]
     456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     45a:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     45c:	68bb      	ldr	r3, [r7, #8]
     45e:	0c9b      	lsrs	r3, r3, #18
     460:	3302      	adds	r3, #2
     462:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     470:	f2c0 033d 	movt	r3, #61	; 0x3d
     474:	fb03 f202 	mul.w	r2, r3, r2
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	601a      	str	r2, [r3, #0]
     482:	e022      	b.n	4ca <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     488:	f2c4 0302 	movt	r3, #16386	; 0x4002
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     492:	2b00      	cmp	r3, #0
     494:	d00c      	beq.n	4b0 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     496:	68ba      	ldr	r2, [r7, #8]
     498:	f44f 6310 	mov.w	r3, #2304	; 0x900
     49c:	f2c0 033d 	movt	r3, #61	; 0x3d
     4a0:	fb03 f202 	mul.w	r2, r3, r2
     4a4:	f240 0300 	movw	r3, #0
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	601a      	str	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     4b0:	68ba      	ldr	r2, [r7, #8]
     4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
     4ba:	fb03 f202 	mul.w	r2, r3, r2
     4be:	f240 0300 	movw	r3, #0
     4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4c8:	e00a      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
     4ca:	e009      	b.n	4e0 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     4cc:	f240 0300 	movw	r3, #0
     4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     4d8:	f2c0 027a 	movt	r2, #122	; 0x7a
     4dc:	601a      	str	r2, [r3, #0]
      break;
     4de:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ee:	091a      	lsrs	r2, r3, #4
     4f0:	f240 0304 	movw	r3, #4
     4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4f8:	5c9b      	ldrb	r3, [r3, r2]
     4fa:	b2db      	uxtb	r3, r3
     4fc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     4fe:	f240 0300 	movw	r3, #0
     502:	f2c2 0300 	movt	r3, #8192	; 0x2000
     506:	681a      	ldr	r2, [r3, #0]
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	40da      	lsrs	r2, r3
     50c:	f240 0300 	movw	r3, #0
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
}
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     524:	f000 f802 	bl	52c <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     528:	bd80      	pop	{r7, pc}
     52a:	bf00      	nop

0000052c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     532:	2300      	movs	r3, #0
     534:	607b      	str	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     556:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     560:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3301      	adds	r3, #1
     566:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d103      	bne.n	576 <SetSysClockTo72+0x4a>
     56e:	687b      	ldr	r3, [r7, #4]
     570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     574:	d1ed      	bne.n	552 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     57e:	681b      	ldr	r3, [r3, #0]
     580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     584:	2b00      	cmp	r3, #0
     586:	d002      	beq.n	58e <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     588:	2301      	movs	r3, #1
     58a:	603b      	str	r3, [r7, #0]
     58c:	e001      	b.n	592 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     58e:	2300      	movs	r3, #0
     590:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     592:	683b      	ldr	r3, [r7, #0]
     594:	2b01      	cmp	r3, #1
     596:	f040 8094 	bne.w	6c2 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     59e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5aa:	6812      	ldr	r2, [r2, #0]
     5ac:	f042 0210 	orr.w	r2, r2, #16
     5b0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     5b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5be:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	f022 0203 	bic.w	r2, r2, #3
     5c8:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     5ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5da:	6812      	ldr	r2, [r2, #0]
     5dc:	f042 0202 	orr.w	r2, r2, #2
     5e0:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5f2:	6852      	ldr	r2, [r2, #4]
     5f4:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     602:	f2c4 0202 	movt	r2, #16386	; 0x4002
     606:	6852      	ldr	r2, [r2, #4]
     608:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     616:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61a:	6852      	ldr	r2, [r2, #4]
     61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     620:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     626:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     632:	6852      	ldr	r2, [r2, #4]
     634:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     638:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     63e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     646:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64a:	6852      	ldr	r2, [r2, #4]
     64c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     650:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     65e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     662:	6812      	ldr	r2, [r2, #0]
     664:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     668:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     66a:	bf00      	nop
     66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     670:	f2c4 0302 	movt	r3, #16386	; 0x4002
     674:	681b      	ldr	r3, [r3, #0]
     676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     67a:	2b00      	cmp	r3, #0
     67c:	d0f6      	beq.n	66c <SetSysClockTo72+0x140>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     682:	f2c4 0302 	movt	r3, #16386	; 0x4002
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68e:	6852      	ldr	r2, [r2, #4]
     690:	f022 0203 	bic.w	r2, r2, #3
     694:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     69a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a6:	6852      	ldr	r2, [r2, #4]
     6a8:	f042 0202 	orr.w	r2, r2, #2
     6ac:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6ae:	bf00      	nop
     6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 030c 	and.w	r3, r3, #12
     6be:	2b08      	cmp	r3, #8
     6c0:	d1f6      	bne.n	6b0 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     6c2:	370c      	adds	r7, #12
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr
     6cc:	00018aec 	.word	0x00018aec
     6d0:	20000000 	.word	0x20000000
     6d4:	2000031c 	.word	0x2000031c
     6d8:	20000320 	.word	0x20000320
     6dc:	2000b360 	.word	0x2000b360

000006e0 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     6e0:	b480      	push	{r7}
     6e2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f4:	6812      	ldr	r2, [r2, #0]
     6f6:	f042 0201 	orr.w	r2, r2, #1
     6fa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     6fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     700:	f2c4 0202 	movt	r2, #16386	; 0x4002
     704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     708:	f2c4 0302 	movt	r3, #16386	; 0x4002
     70c:	6859      	ldr	r1, [r3, #4]
     70e:	2300      	movs	r3, #0
     710:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     714:	400b      	ands	r3, r1
     716:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     71c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	f2c4 0202 	movt	r2, #16386	; 0x4002
     728:	6812      	ldr	r2, [r2, #0]
     72a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     72e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     732:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     74a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     758:	f2c4 0202 	movt	r2, #16386	; 0x4002
     75c:	6852      	ldr	r2, [r2, #4]
     75e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     762:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 0302 	movt	r3, #16386	; 0x4002
     76c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     770:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     77c:	b480      	push	{r7}
     77e:	b083      	sub	sp, #12
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     79a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6812      	ldr	r2, [r2, #0]
     7ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7b2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     7ba:	d003      	beq.n	7c4 <RCC_HSEConfig+0x48>
     7bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     7c0:	d00d      	beq.n	7de <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;

    default:
      break;
     7c2:	e019      	b.n	7f8 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d4:	6812      	ldr	r2, [r2, #0]
     7d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     7da:	601a      	str	r2, [r3, #0]
      break;
     7dc:	e00c      	b.n	7f8 <RCC_HSEConfig+0x7c>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ee:	6812      	ldr	r2, [r2, #0]
     7f0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     7f4:	601a      	str	r2, [r3, #0]
      break;
     7f6:	bf00      	nop

    default:
      break;
  }
}
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     800:	4770      	bx	lr
     802:	bf00      	nop

00000804 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     80a:	2300      	movs	r3, #0
     80c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     80e:	2300      	movs	r3, #0
     810:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     812:	2300      	movs	r3, #0
     814:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     816:	2031      	movs	r0, #49	; 0x31
     818:	f000 fba2 	bl	f60 <RCC_GetFlagStatus>
     81c:	4603      	mov	r3, r0
     81e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     820:	683b      	ldr	r3, [r7, #0]
     822:	3301      	adds	r3, #1
     824:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     826:	683b      	ldr	r3, [r7, #0]
     828:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     82c:	d002      	beq.n	834 <RCC_WaitForHSEStartUp+0x30>
     82e:	79bb      	ldrb	r3, [r7, #6]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     834:	2031      	movs	r0, #49	; 0x31
     836:	f000 fb93 	bl	f60 <RCC_GetFlagStatus>
     83a:	4603      	mov	r3, r0
     83c:	2b00      	cmp	r3, #0
     83e:	d002      	beq.n	846 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     840:	2301      	movs	r3, #1
     842:	71fb      	strb	r3, [r7, #7]
     844:	e001      	b.n	84a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     846:	2300      	movs	r3, #0
     848:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     84a:	79fb      	ldrb	r3, [r7, #7]
}
     84c:	4618      	mov	r0, r3
     84e:	3708      	adds	r7, #8
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}

00000854 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     854:	b480      	push	{r7}
     856:	b085      	sub	sp, #20
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     85e:	2300      	movs	r3, #0
     860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     866:	f2c4 0302 	movt	r3, #16386	; 0x4002
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     874:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     876:	79fb      	ldrb	r3, [r7, #7]
     878:	00db      	lsls	r3, r3, #3
     87a:	68fa      	ldr	r2, [r7, #12]
     87c:	4313      	orrs	r3, r2
     87e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     884:	f2c4 0302 	movt	r3, #16386	; 0x4002
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	3714      	adds	r7, #20
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	4603      	mov	r3, r0
     8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8a2:	2300      	movs	r3, #0
     8a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8a8:	79fa      	ldrb	r2, [r7, #7]
     8aa:	601a      	str	r2, [r3, #0]
}
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     8b8:	b480      	push	{r7}
     8ba:	b085      	sub	sp, #20
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     8c2:	2300      	movs	r3, #0
     8c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     8d8:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     8da:	687a      	ldr	r2, [r7, #4]
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	4313      	orrs	r3, r2
     8e0:	68fa      	ldr	r2, [r7, #12]
     8e2:	4313      	orrs	r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	605a      	str	r2, [r3, #4]
}
     8f2:	3714      	adds	r7, #20
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     906:	2360      	movs	r3, #96	; 0x60
     908:	f2c4 2342 	movt	r3, #16962	; 0x4242
     90c:	79fa      	ldrb	r2, [r7, #7]
     90e:	601a      	str	r2, [r3, #0]
}
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     930:	685b      	ldr	r3, [r3, #4]
     932:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	687b      	ldr	r3, [r7, #4]
     940:	4313      	orrs	r3, r2
     942:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     948:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94c:	68fa      	ldr	r2, [r7, #12]
     94e:	605a      	str	r2, [r3, #4]
}
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     95c:	b480      	push	{r7}
     95e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	685b      	ldr	r3, [r3, #4]
     96a:	b2db      	uxtb	r3, r3
     96c:	f003 030c 	and.w	r3, r3, #12
     970:	b2db      	uxtb	r3, r3
}
     972:	4618      	mov	r0, r3
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     97c:	b480      	push	{r7}
     97e:	b085      	sub	sp, #20
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     984:	2300      	movs	r3, #0
     986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     990:	685b      	ldr	r3, [r3, #4]
     992:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     99a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4313      	orrs	r3, r2
     9a2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ac:	68fa      	ldr	r2, [r7, #12]
     9ae:	605a      	str	r2, [r3, #4]
}
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     9da:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4313      	orrs	r3, r2
     9e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	605a      	str	r2, [r3, #4]
}
     9f0:	3714      	adds	r7, #20
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     9fc:	b480      	push	{r7}
     9fe:	b085      	sub	sp, #20
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a04:	2300      	movs	r3, #0
     a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a1a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	68fa      	ldr	r2, [r7, #12]
     a22:	4313      	orrs	r3, r2
     a24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	605a      	str	r2, [r3, #4]
}
     a32:	3714      	adds	r7, #20
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr

00000a3c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a3c:	b480      	push	{r7}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	71fa      	strb	r2, [r7, #7]
     a48:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a4a:	79bb      	ldrb	r3, [r7, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00e      	beq.n	a6e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     a50:	f241 0309 	movw	r3, #4105	; 0x1009
     a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a58:	f241 0209 	movw	r2, #4105	; 0x1009
     a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	b2d1      	uxtb	r1, r2
     a64:	79fa      	ldrb	r2, [r7, #7]
     a66:	430a      	orrs	r2, r1
     a68:	b2d2      	uxtb	r2, r2
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e00f      	b.n	a8e <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     a6e:	f241 0309 	movw	r3, #4105	; 0x1009
     a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a76:	f241 0209 	movw	r2, #4105	; 0x1009
     a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	b2d1      	uxtb	r1, r2
     a82:	79fa      	ldrb	r2, [r7, #7]
     a84:	43d2      	mvns	r2, r2
     a86:	b2d2      	uxtb	r2, r2
     a88:	400a      	ands	r2, r1
     a8a:	b2d2      	uxtb	r2, r2
     a8c:	701a      	strb	r2, [r3, #0]
  }
}
     a8e:	370c      	adds	r7, #12
     a90:	46bd      	mov	sp, r7
     a92:	f85d 7b04 	ldr.w	r7, [sp], #4
     a96:	4770      	bx	lr

00000a98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     aa0:	23d8      	movs	r3, #216	; 0xd8
     aa2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab2:	4770      	bx	lr

00000ab4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ab4:	b480      	push	{r7}
     ab6:	b085      	sub	sp, #20
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     abc:	2300      	movs	r3, #0
     abe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ad2:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     afe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b0a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b12:	2200      	movs	r2, #0
     b14:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	2b01      	cmp	r3, #1
     b1a:	d002      	beq.n	b22 <RCC_LSEConfig+0x2e>
     b1c:	2b04      	cmp	r3, #4
     b1e:	d007      	beq.n	b30 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;

    default:
      break;
     b20:	e00d      	b.n	b3e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
      break;
     b2e:	e006      	b.n	b3e <RCC_LSEConfig+0x4a>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b30:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b38:	2205      	movs	r2, #5
     b3a:	701a      	strb	r2, [r3, #0]
      break;
     b3c:	bf00      	nop

    default:
      break;
  }
}
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr

00000b48 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b48:	b480      	push	{r7}
     b4a:	b083      	sub	sp, #12
     b4c:	af00      	add	r7, sp, #0
     b4e:	4603      	mov	r3, r0
     b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     b52:	f44f 6390 	mov.w	r3, #1152	; 0x480
     b56:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b5a:	79fa      	ldrb	r2, [r7, #7]
     b5c:	601a      	str	r2, [r3, #0]
}
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	f85d 7b04 	ldr.w	r7, [sp], #4
     b66:	4770      	bx	lr

00000b68 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b80:	6a11      	ldr	r1, [r2, #32]
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	430a      	orrs	r2, r1
     b86:	621a      	str	r2, [r3, #32]
}
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     b94:	b480      	push	{r7}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	4603      	mov	r3, r0
     b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     b9e:	f240 433c 	movw	r3, #1084	; 0x43c
     ba2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ba6:	79fa      	ldrb	r2, [r7, #7]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     bb4:	b480      	push	{r7}
     bb6:	b087      	sub	sp, #28
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	617b      	str	r3, [r7, #20]
     bc0:	2300      	movs	r3, #0
     bc2:	613b      	str	r3, [r7, #16]
     bc4:	2300      	movs	r3, #0
     bc6:	60fb      	str	r3, [r7, #12]
     bc8:	2300      	movs	r3, #0
     bca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	f003 030c 	and.w	r3, r3, #12
     bda:	617b      	str	r3, [r7, #20]

  switch (tmp)
     bdc:	697b      	ldr	r3, [r7, #20]
     bde:	2b04      	cmp	r3, #4
     be0:	d00a      	beq.n	bf8 <RCC_GetClocksFreq+0x44>
     be2:	2b08      	cmp	r3, #8
     be4:	d00f      	beq.n	c06 <RCC_GetClocksFreq+0x52>
     be6:	2b00      	cmp	r3, #0
     be8:	d14c      	bne.n	c84 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     bea:	687a      	ldr	r2, [r7, #4]
     bec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bf0:	f2c0 037a 	movt	r3, #122	; 0x7a
     bf4:	6013      	str	r3, [r2, #0]
      break;
     bf6:	e04c      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     bf8:	687a      	ldr	r2, [r7, #4]
     bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bfe:	f2c0 037a 	movt	r3, #122	; 0x7a
     c02:	6013      	str	r3, [r2, #0]
      break;
     c04:	e045      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c14:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c24:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     c26:	693b      	ldr	r3, [r7, #16]
     c28:	0c9b      	lsrs	r3, r3, #18
     c2a:	3302      	adds	r3, #2
     c2c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	2b00      	cmp	r3, #0
     c32:	d109      	bne.n	c48 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c34:	693a      	ldr	r2, [r7, #16]
     c36:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c3a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c3e:	fb03 f202 	mul.w	r2, r3, r2
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	601a      	str	r2, [r3, #0]
     c46:	e01c      	b.n	c82 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     c5a:	693a      	ldr	r2, [r7, #16]
     c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c60:	f2c0 033d 	movt	r3, #61	; 0x3d
     c64:	fb03 f202 	mul.w	r2, r3, r2
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	e009      	b.n	c82 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     c6e:	693a      	ldr	r2, [r7, #16]
     c70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c74:	f2c0 037a 	movt	r3, #122	; 0x7a
     c78:	fb03 f202 	mul.w	r2, r3, r2
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     c80:	e007      	b.n	c92 <RCC_GetClocksFreq+0xde>
     c82:	e006      	b.n	c92 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c84:	687a      	ldr	r2, [r7, #4]
     c86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c8a:	f2c0 037a 	movt	r3, #122	; 0x7a
     c8e:	6013      	str	r3, [r2, #0]
      break;
     c90:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ca2:	697b      	ldr	r3, [r7, #20]
     ca4:	091b      	lsrs	r3, r3, #4
     ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ca8:	f240 0314 	movw	r3, #20
     cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb0:	697a      	ldr	r2, [r7, #20]
     cb2:	4413      	add	r3, r2
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	40da      	lsrs	r2, r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     cd4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	0a1b      	lsrs	r3, r3, #8
     cda:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cdc:	f240 0314 	movw	r3, #20
     ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ce4:	697a      	ldr	r2, [r7, #20]
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	685a      	ldr	r2, [r3, #4]
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	40da      	lsrs	r2, r3
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	0adb      	lsrs	r3, r3, #11
     d0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d10:	f240 0314 	movw	r3, #20
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	4413      	add	r3, r2
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	b2db      	uxtb	r3, r3
     d20:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	40da      	lsrs	r2, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	0b9b      	lsrs	r3, r3, #14
     d42:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d44:	f240 0324 	movw	r3, #36	; 0x24
     d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4c:	697a      	ldr	r2, [r7, #20]
     d4e:	4413      	add	r3, r2
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	68da      	ldr	r2, [r3, #12]
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	fbb2 f2f3 	udiv	r2, r2, r3
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	611a      	str	r2, [r3, #16]
}
     d64:	371c      	adds	r7, #28
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     d70:	b480      	push	{r7}
     d72:	b083      	sub	sp, #12
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	460b      	mov	r3, r1
     d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     d7c:	78fb      	ldrb	r3, [r7, #3]
     d7e:	2b00      	cmp	r3, #0
     d80:	d00c      	beq.n	d9c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d92:	6951      	ldr	r1, [r2, #20]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	430a      	orrs	r2, r1
     d98:	615a      	str	r2, [r3, #20]
     d9a:	e00c      	b.n	db6 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     da8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dac:	6951      	ldr	r1, [r2, #20]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	43d2      	mvns	r2, r2
     db2:	400a      	ands	r2, r1
     db4:	615a      	str	r2, [r3, #20]
  }
}
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
     dea:	e00c      	b.n	e06 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6991      	ldr	r1, [r2, #24]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	619a      	str	r2, [r3, #24]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	69d1      	ldr	r1, [r2, #28]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	61da      	str	r2, [r3, #28]
     e3a:	e00c      	b.n	e56 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	69d1      	ldr	r1, [r2, #28]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	61da      	str	r2, [r3, #28]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	68d1      	ldr	r1, [r2, #12]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	60da      	str	r2, [r3, #12]
     e8a:	e00c      	b.n	ea6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	68d1      	ldr	r1, [r2, #12]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	60da      	str	r2, [r3, #12]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	6911      	ldr	r1, [r2, #16]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	611a      	str	r2, [r3, #16]
     eda:	e00c      	b.n	ef6 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	6911      	ldr	r1, [r2, #16]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	611a      	str	r2, [r3, #16]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f0a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f12:	79fa      	ldrb	r2, [r7, #7]
     f14:	601a      	str	r2, [r3, #0]
}
     f16:	370c      	adds	r7, #12
     f18:	46bd      	mov	sp, r7
     f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1e:	4770      	bx	lr

00000f20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f20:	b480      	push	{r7}
     f22:	b083      	sub	sp, #12
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f2a:	234c      	movs	r3, #76	; 0x4c
     f2c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	601a      	str	r2, [r3, #0]
}
     f34:	370c      	adds	r7, #12
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f4a:	f241 0307 	movw	r3, #4103	; 0x1007
     f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f52:	79fa      	ldrb	r2, [r7, #7]
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5e:	4770      	bx	lr

00000f60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f60:	b480      	push	{r7}
     f62:	b087      	sub	sp, #28
     f64:	af00      	add	r7, sp, #0
     f66:	4603      	mov	r3, r0
     f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     f6e:	2300      	movs	r3, #0
     f70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     f72:	2300      	movs	r3, #0
     f74:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     f76:	79fb      	ldrb	r3, [r7, #7]
     f78:	095b      	lsrs	r3, r3, #5
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b01      	cmp	r3, #1
     f82:	d106      	bne.n	f92 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	617b      	str	r3, [r7, #20]
     f90:	e00f      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	2b02      	cmp	r3, #2
     f96:	d106      	bne.n	fa6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa0:	6a1b      	ldr	r3, [r3, #32]
     fa2:	617b      	str	r3, [r7, #20]
     fa4:	e005      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	f003 031f 	and.w	r3, r3, #31
     fb8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	697a      	ldr	r2, [r7, #20]
     fbe:	fa22 f303 	lsr.w	r3, r2, r3
     fc2:	f003 0301 	and.w	r3, r3, #1
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
     fca:	2301      	movs	r3, #1
     fcc:	74fb      	strb	r3, [r7, #19]
     fce:	e001      	b.n	fd4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
     fd0:	2300      	movs	r3, #0
     fd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     fd4:	7cfb      	ldrb	r3, [r7, #19]
}
     fd6:	4618      	mov	r0, r3
     fd8:	371c      	adds	r7, #28
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop

00000fe4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     ffe:	625a      	str	r2, [r3, #36]	; 0x24
}
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr

00001008 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1012:	2300      	movs	r3, #0
    1014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    101e:	689a      	ldr	r2, [r3, #8]
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4013      	ands	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	d002      	beq.n	102e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1028:	2301      	movs	r3, #1
    102a:	73fb      	strb	r3, [r7, #15]
    102c:	e001      	b.n	1032 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    102e:	2300      	movs	r3, #0
    1030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	4603      	mov	r3, r0
    1048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    104a:	f241 030a 	movw	r3, #4106	; 0x100a
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	79fa      	ldrb	r2, [r7, #7]
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	370c      	adds	r7, #12
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr

00001060 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1068:	687a      	ldr	r2, [r7, #4]
    106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    106e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1072:	429a      	cmp	r2, r3
    1074:	d108      	bne.n	1088 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1076:	2004      	movs	r0, #4
    1078:	2101      	movs	r1, #1
    107a:	f7ff fef1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    107e:	2004      	movs	r0, #4
    1080:	2100      	movs	r1, #0
    1082:	f7ff feed 	bl	e60 <RCC_APB2PeriphResetCmd>
    1086:	e060      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    108e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1092:	429a      	cmp	r2, r3
    1094:	d108      	bne.n	10a8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1096:	2008      	movs	r0, #8
    1098:	2101      	movs	r1, #1
    109a:	f7ff fee1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    109e:	2008      	movs	r0, #8
    10a0:	2100      	movs	r1, #0
    10a2:	f7ff fedd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10a6:	e050      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10a8:	687a      	ldr	r2, [r7, #4]
    10aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10b2:	429a      	cmp	r2, r3
    10b4:	d108      	bne.n	10c8 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10b6:	2010      	movs	r0, #16
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff fed1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10be:	2010      	movs	r0, #16
    10c0:	2100      	movs	r1, #0
    10c2:	f7ff fecd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10c6:	e040      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    10ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10d2:	429a      	cmp	r2, r3
    10d4:	d108      	bne.n	10e8 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10d6:	2020      	movs	r0, #32
    10d8:	2101      	movs	r1, #1
    10da:	f7ff fec1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2100      	movs	r1, #0
    10e2:	f7ff febd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10e6:	e030      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOE)
    10e8:	687a      	ldr	r2, [r7, #4]
    10ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    10ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10f2:	429a      	cmp	r2, r3
    10f4:	d108      	bne.n	1108 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f6:	2040      	movs	r0, #64	; 0x40
    10f8:	2101      	movs	r1, #1
    10fa:	f7ff feb1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    10fe:	2040      	movs	r0, #64	; 0x40
    1100:	2100      	movs	r1, #0
    1102:	f7ff fead 	bl	e60 <RCC_APB2PeriphResetCmd>
    1106:	e020      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOF)
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    110e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1112:	429a      	cmp	r2, r3
    1114:	d108      	bne.n	1128 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1116:	2080      	movs	r0, #128	; 0x80
    1118:	2101      	movs	r1, #1
    111a:	f7ff fea1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111e:	2080      	movs	r0, #128	; 0x80
    1120:	2100      	movs	r1, #0
    1122:	f7ff fe9d 	bl	e60 <RCC_APB2PeriphResetCmd>
    1126:	e010      	b.n	114a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    112e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1132:	429a      	cmp	r2, r3
    1134:	d109      	bne.n	114a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2101      	movs	r1, #1
    113c:	f7ff fe90 	bl	e60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1140:	f44f 7080 	mov.w	r0, #256	; 0x100
    1144:	2100      	movs	r1, #0
    1146:	f7ff fe8b 	bl	e60 <RCC_APB2PeriphResetCmd>
    }
  }
}
    114a:	3708      	adds	r7, #8
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}

00001150 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1154:	2001      	movs	r0, #1
    1156:	2101      	movs	r1, #1
    1158:	f7ff fe82 	bl	e60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    115c:	2001      	movs	r0, #1
    115e:	2100      	movs	r1, #0
    1160:	f7ff fe7e 	bl	e60 <RCC_APB2PeriphResetCmd>
}
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop

00001168 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1168:	b480      	push	{r7}
    116a:	b089      	sub	sp, #36	; 0x24
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
    1170:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1172:	2300      	movs	r3, #0
    1174:	61fb      	str	r3, [r7, #28]
    1176:	2300      	movs	r3, #0
    1178:	613b      	str	r3, [r7, #16]
    117a:	2300      	movs	r3, #0
    117c:	61bb      	str	r3, [r7, #24]
    117e:	2300      	movs	r3, #0
    1180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1182:	2300      	movs	r3, #0
    1184:	617b      	str	r3, [r7, #20]
    1186:	2300      	movs	r3, #0
    1188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	f003 030f 	and.w	r3, r3, #15
    1192:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	78db      	ldrb	r3, [r3, #3]
    1198:	f003 0310 	and.w	r3, r3, #16
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <GPIO_Init+0x42>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11a0:	683b      	ldr	r3, [r7, #0]
    11a2:	789b      	ldrb	r3, [r3, #2]
    11a4:	69fa      	ldr	r2, [r7, #28]
    11a6:	4313      	orrs	r3, r2
    11a8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	881b      	ldrh	r3, [r3, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d044      	beq.n	123e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ba:	2300      	movs	r3, #0
    11bc:	61bb      	str	r3, [r7, #24]
    11be:	e038      	b.n	1232 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	2201      	movs	r2, #1
    11c4:	fa02 f303 	lsl.w	r3, r2, r3
    11c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11ca:	683b      	ldr	r3, [r7, #0]
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	461a      	mov	r2, r3
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	4013      	ands	r3, r2
    11d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11d6:	693a      	ldr	r2, [r7, #16]
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	429a      	cmp	r2, r3
    11dc:	d126      	bne.n	122c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	220f      	movs	r2, #15
    11e8:	fa02 f303 	lsl.w	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	43db      	mvns	r3, r3
    11f2:	697a      	ldr	r2, [r7, #20]
    11f4:	4013      	ands	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	69fa      	ldr	r2, [r7, #28]
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	4313      	orrs	r3, r2
    1204:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b28      	cmp	r3, #40	; 0x28
    120c:	d105      	bne.n	121a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    120e:	69bb      	ldr	r3, [r7, #24]
    1210:	2201      	movs	r2, #1
    1212:	409a      	lsls	r2, r3
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	615a      	str	r2, [r3, #20]
    1218:	e008      	b.n	122c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b48      	cmp	r3, #72	; 0x48
    1220:	d104      	bne.n	122c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	3301      	adds	r3, #1
    1230:	61bb      	str	r3, [r7, #24]
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b07      	cmp	r3, #7
    1236:	d9c3      	bls.n	11c0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	697a      	ldr	r2, [r7, #20]
    123c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	2bff      	cmp	r3, #255	; 0xff
    1244:	d946      	bls.n	12d4 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    124c:	2300      	movs	r3, #0
    124e:	61bb      	str	r3, [r7, #24]
    1250:	e03a      	b.n	12c8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3308      	adds	r3, #8
    1256:	2201      	movs	r2, #1
    1258:	fa02 f303 	lsl.w	r3, r2, r3
    125c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4013      	ands	r3, r2
    1268:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    126a:	693a      	ldr	r2, [r7, #16]
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	429a      	cmp	r2, r3
    1270:	d127      	bne.n	12c2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	009b      	lsls	r3, r3, #2
    1276:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	220f      	movs	r2, #15
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	43db      	mvns	r3, r3
    1286:	697a      	ldr	r2, [r7, #20]
    1288:	4013      	ands	r3, r2
    128a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	69fa      	ldr	r2, [r7, #28]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	78db      	ldrb	r3, [r3, #3]
    129e:	2b28      	cmp	r3, #40	; 0x28
    12a0:	d105      	bne.n	12ae <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	409a      	lsls	r2, r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b48      	cmp	r3, #72	; 0x48
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	3301      	adds	r3, #1
    12c6:	61bb      	str	r3, [r7, #24]
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	2b07      	cmp	r3, #7
    12cc:	d9c1      	bls.n	1252 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	605a      	str	r2, [r3, #4]
  }
}
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop

000012e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12e0:	b480      	push	{r7}
    12e2:	b083      	sub	sp, #12
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	2202      	movs	r2, #2
    12f4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	2204      	movs	r2, #4
    12fa:	70da      	strb	r2, [r3, #3]
}
    12fc:	370c      	adds	r7, #12
    12fe:	46bd      	mov	sp, r7
    1300:	f85d 7b04 	ldr.w	r7, [sp], #4
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1308:	b480      	push	{r7}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	460b      	mov	r3, r1
    1312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1314:	2300      	movs	r3, #0
    1316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	689a      	ldr	r2, [r3, #8]
    131c:	887b      	ldrh	r3, [r7, #2]
    131e:	4013      	ands	r3, r2
    1320:	2b00      	cmp	r3, #0
    1322:	d002      	beq.n	132a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1324:	2301      	movs	r3, #1
    1326:	73fb      	strb	r3, [r7, #15]
    1328:	e001      	b.n	132e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    132a:	2300      	movs	r3, #0
    132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    132e:	7bfb      	ldrb	r3, [r7, #15]
}
    1330:	4618      	mov	r0, r3
    1332:	3714      	adds	r7, #20
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	b29b      	uxth	r3, r3
}
    134a:	4618      	mov	r0, r3
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	68da      	ldr	r2, [r3, #12]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    13b4:	887a      	ldrh	r2, [r7, #2]
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	611a      	str	r2, [r3, #16]
}
    13ba:	370c      	adds	r7, #12
    13bc:	46bd      	mov	sp, r7
    13be:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c2:	4770      	bx	lr

000013c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	460b      	mov	r3, r1
    13ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    13d0:	887a      	ldrh	r2, [r7, #2]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	615a      	str	r2, [r3, #20]
}
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13e0:	b480      	push	{r7}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	4613      	mov	r3, r2
    13ea:	460a      	mov	r2, r1
    13ec:	807a      	strh	r2, [r7, #2]
    13ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    13f0:	787b      	ldrb	r3, [r7, #1]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d003      	beq.n	13fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    13f6:	887a      	ldrh	r2, [r7, #2]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	611a      	str	r2, [r3, #16]
    13fc:	e002      	b.n	1404 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    13fe:	887a      	ldrh	r2, [r7, #2]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	615a      	str	r2, [r3, #20]
  }
}
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	460b      	mov	r3, r1
    141a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    141c:	887a      	ldrh	r2, [r7, #2]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	60da      	str	r2, [r3, #12]
}
    1422:	370c      	adds	r7, #12
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    142c:	b480      	push	{r7}
    142e:	b085      	sub	sp, #20
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	460b      	mov	r3, r1
    1436:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    143c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    143e:	887b      	ldrh	r3, [r7, #2]
    1440:	68fa      	ldr	r2, [r7, #12]
    1442:	4313      	orrs	r3, r2
    1444:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	68fa      	ldr	r2, [r7, #12]
    144a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    144c:	887a      	ldrh	r2, [r7, #2]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	699b      	ldr	r3, [r3, #24]
    145c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	699b      	ldr	r3, [r3, #24]
    1462:	60fb      	str	r3, [r7, #12]
}
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr
    146e:	bf00      	nop

00001470 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1470:	b480      	push	{r7}
    1472:	b085      	sub	sp, #20
    1474:	af00      	add	r7, sp, #0
    1476:	4602      	mov	r2, r0
    1478:	460b      	mov	r3, r1
    147a:	71fa      	strb	r2, [r7, #7]
    147c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    147e:	2300      	movs	r3, #0
    1480:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1482:	2300      	movs	r3, #0
    1484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1492:	4013      	ands	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1496:	79fb      	ldrb	r3, [r7, #7]
    1498:	011b      	lsls	r3, r3, #4
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	4313      	orrs	r3, r2
    149e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14a0:	79bb      	ldrb	r3, [r7, #6]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	4313      	orrs	r3, r2
    14a6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14a8:	2300      	movs	r3, #0
    14aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	601a      	str	r2, [r3, #0]
}
    14b2:	3714      	adds	r7, #20
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr

000014bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14bc:	b480      	push	{r7}
    14be:	b083      	sub	sp, #12
    14c0:	af00      	add	r7, sp, #0
    14c2:	4603      	mov	r3, r0
    14c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14c6:	231c      	movs	r3, #28
    14c8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    14cc:	79fa      	ldrb	r2, [r7, #7]
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
    14da:	bf00      	nop

000014dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14dc:	b480      	push	{r7}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	460b      	mov	r3, r1
    14e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14e8:	2300      	movs	r3, #0
    14ea:	613b      	str	r3, [r7, #16]
    14ec:	2300      	movs	r3, #0
    14ee:	60fb      	str	r3, [r7, #12]
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	2b00      	cmp	r3, #0
    14fc:	da05      	bge.n	150a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    14fe:	2300      	movs	r3, #0
    1500:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e004      	b.n	1514 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    150a:	2300      	movs	r3, #0
    150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1510:	685b      	ldr	r3, [r3, #4]
    1512:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    151a:	0c1b      	lsrs	r3, r3, #16
    151c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	b29b      	uxth	r3, r3
    1522:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    152e:	d10e      	bne.n	154e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1536:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1538:	2300      	movs	r3, #0
    153a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    153e:	2200      	movs	r2, #0
    1540:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da05      	bge.n	15bc <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	2300      	movs	r3, #0
    15b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	61da      	str	r2, [r3, #28]
    15ba:	e004      	b.n	15c6 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15bc:	2300      	movs	r3, #0
    15be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	605a      	str	r2, [r3, #4]
  }
}
    15c6:	371c      	adds	r7, #28
    15c8:	46bd      	mov	sp, r7
    15ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ce:	4770      	bx	lr

000015d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15d0:	b490      	push	{r4, r7}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	71fa      	strb	r2, [r7, #7]
    15dc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15de:	2300      	movs	r3, #0
    15e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15e2:	79bb      	ldrb	r3, [r7, #6]
    15e4:	f003 0303 	and.w	r3, r3, #3
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	220f      	movs	r2, #15
    15ec:	fa02 f303 	lsl.w	r3, r2, r3
    15f0:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15f2:	2300      	movs	r3, #0
    15f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15f8:	79ba      	ldrb	r2, [r7, #6]
    15fa:	0892      	lsrs	r2, r2, #2
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	2200      	movs	r2, #0
    1602:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1606:	79b9      	ldrb	r1, [r7, #6]
    1608:	0889      	lsrs	r1, r1, #2
    160a:	b2c9      	uxtb	r1, r1
    160c:	3102      	adds	r1, #2
    160e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	43d2      	mvns	r2, r2
    1616:	4011      	ands	r1, r2
    1618:	1c82      	adds	r2, r0, #2
    161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    161e:	2300      	movs	r3, #0
    1620:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1624:	79ba      	ldrb	r2, [r7, #6]
    1626:	0892      	lsrs	r2, r2, #2
    1628:	b2d2      	uxtb	r2, r2
    162a:	4610      	mov	r0, r2
    162c:	2200      	movs	r2, #0
    162e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1632:	79b9      	ldrb	r1, [r7, #6]
    1634:	0889      	lsrs	r1, r1, #2
    1636:	b2c9      	uxtb	r1, r1
    1638:	3102      	adds	r1, #2
    163a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    163e:	79fc      	ldrb	r4, [r7, #7]
    1640:	79ba      	ldrb	r2, [r7, #6]
    1642:	f002 0203 	and.w	r2, r2, #3
    1646:	0092      	lsls	r2, r2, #2
    1648:	fa04 f202 	lsl.w	r2, r4, r2
    164c:	4311      	orrs	r1, r2
    164e:	1c82      	adds	r2, r0, #2
    1650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1654:	3710      	adds	r7, #16
    1656:	46bd      	mov	sp, r7
    1658:	bc90      	pop	{r4, r7}
    165a:	4770      	bx	lr

0000165c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1664:	23dc      	movs	r3, #220	; 0xdc
    1666:	f2c4 2320 	movt	r3, #16928	; 0x4220
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
}
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	429a      	cmp	r2, r3
    168c:	d10a      	bne.n	16a4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1692:	2101      	movs	r1, #1
    1694:	f7ff fbe4 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    169c:	2100      	movs	r1, #0
    169e:	f7ff fbdf 	bl	e60 <RCC_APB2PeriphResetCmd>
    16a2:	e046      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16ae:	429a      	cmp	r2, r3
    16b0:	d10a      	bne.n	16c8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    16b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16b6:	2101      	movs	r1, #1
    16b8:	f7ff fbfa 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    16bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16c0:	2100      	movs	r1, #0
    16c2:	f7ff fbf5 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16c6:	e034      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    16ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16d2:	429a      	cmp	r2, r3
    16d4:	d10a      	bne.n	16ec <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16da:	2101      	movs	r1, #1
    16dc:	f7ff fbe8 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16e4:	2100      	movs	r1, #0
    16e6:	f7ff fbe3 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16ea:	e022      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == UART4)
    16ec:	687a      	ldr	r2, [r7, #4]
    16ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	429a      	cmp	r2, r3
    16f8:	d10a      	bne.n	1710 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16fe:	2101      	movs	r1, #1
    1700:	f7ff fbd6 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1708:	2100      	movs	r1, #0
    170a:	f7ff fbd1 	bl	eb0 <RCC_APB1PeriphResetCmd>
    170e:	e010      	b.n	1732 <USART_DeInit+0xba>
  }
  else
  {
    if (USARTx == UART5)
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1716:	f2c4 0300 	movt	r3, #16384	; 0x4000
    171a:	429a      	cmp	r2, r3
    171c:	d109      	bne.n	1732 <USART_DeInit+0xba>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    171e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1722:	2101      	movs	r1, #1
    1724:	f7ff fbc4 	bl	eb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1728:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    172c:	2100      	movs	r1, #0
    172e:	f7ff fbbf 	bl	eb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1732:	3708      	adds	r7, #8
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}

00001738 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1738:	b580      	push	{r7, lr}
    173a:	b08c      	sub	sp, #48	; 0x30
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1742:	2300      	movs	r3, #0
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
    1746:	2300      	movs	r3, #0
    1748:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    174a:	2300      	movs	r3, #0
    174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    174e:	2300      	movs	r3, #0
    1750:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1752:	2300      	movs	r3, #0
    1754:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8a1b      	ldrh	r3, [r3, #16]
    175e:	b29b      	uxth	r3, r3
    1760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1764:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1768:	4013      	ands	r3, r2
    176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    176c:	683b      	ldr	r3, [r7, #0]
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1772:	4313      	orrs	r3, r2
    1774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1778:	b29a      	uxth	r2, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	899b      	ldrh	r3, [r3, #12]
    1782:	b29b      	uxth	r3, r3
    1784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1788:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    178c:	4013      	ands	r3, r2
    178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	889a      	ldrh	r2, [r3, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	891b      	ldrh	r3, [r3, #8]
    1798:	4313      	orrs	r3, r2
    179a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17a0:	4313      	orrs	r3, r2
    17a2:	b29b      	uxth	r3, r3
    17a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a6:	4313      	orrs	r3, r2
    17a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17ac:	b29a      	uxth	r2, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	8a9b      	ldrh	r3, [r3, #20]
    17b6:	b29b      	uxth	r3, r3
    17b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    17ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17bc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17c0:	4013      	ands	r3, r2
    17c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	899b      	ldrh	r3, [r3, #12]
    17c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ca:	4313      	orrs	r3, r2
    17cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	b29a      	uxth	r2, r3
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17d6:	f107 0308 	add.w	r3, r7, #8
    17da:	4618      	mov	r0, r3
    17dc:	f7ff f9ea 	bl	bb4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17e0:	69fa      	ldr	r2, [r7, #28]
    17e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    17e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17ea:	429a      	cmp	r2, r3
    17ec:	d102      	bne.n	17f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	62bb      	str	r3, [r7, #40]	; 0x28
    17f2:	e001      	b.n	17f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17f4:	693b      	ldr	r3, [r7, #16]
    17f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b29b      	uxth	r3, r3
    1800:	b21b      	sxth	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	da0c      	bge.n	1820 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009a      	lsls	r2, r3, #2
    1810:	441a      	add	r2, r3
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	005b      	lsls	r3, r3, #1
    1818:	fbb2 f3f3 	udiv	r3, r2, r3
    181c:	627b      	str	r3, [r7, #36]	; 0x24
    181e:	e00b      	b.n	1838 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009a      	lsls	r2, r3, #2
    182a:	441a      	add	r2, r3
    182c:	683b      	ldr	r3, [r7, #0]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	009b      	lsls	r3, r3, #2
    1832:	fbb2 f3f3 	udiv	r3, r2, r3
    1836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    183a:	f248 531f 	movw	r3, #34079	; 0x851f
    183e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1842:	fba3 1302 	umull	r1, r3, r3, r2
    1846:	095b      	lsrs	r3, r3, #5
    1848:	011b      	lsls	r3, r3, #4
    184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    184e:	091b      	lsrs	r3, r3, #4
    1850:	2264      	movs	r2, #100	; 0x64
    1852:	fb02 f303 	mul.w	r3, r2, r3
    1856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1858:	1ad3      	subs	r3, r2, r3
    185a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	899b      	ldrh	r3, [r3, #12]
    1860:	b29b      	uxth	r3, r3
    1862:	b29b      	uxth	r3, r3
    1864:	b21b      	sxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	da10      	bge.n	188c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    186a:	6a3b      	ldr	r3, [r7, #32]
    186c:	00db      	lsls	r3, r3, #3
    186e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1872:	f248 531f 	movw	r3, #34079	; 0x851f
    1876:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    187a:	fba3 1302 	umull	r1, r3, r3, r2
    187e:	095b      	lsrs	r3, r3, #5
    1880:	f003 0307 	and.w	r3, r3, #7
    1884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1886:	4313      	orrs	r3, r2
    1888:	62fb      	str	r3, [r7, #44]	; 0x2c
    188a:	e00f      	b.n	18ac <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    188c:	6a3b      	ldr	r3, [r7, #32]
    188e:	011b      	lsls	r3, r3, #4
    1890:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1894:	f248 531f 	movw	r3, #34079	; 0x851f
    1898:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    189c:	fba3 1302 	umull	r1, r3, r3, r2
    18a0:	095b      	lsrs	r3, r3, #5
    18a2:	f003 030f 	and.w	r3, r3, #15
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4313      	orrs	r3, r2
    18aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18ae:	b29a      	uxth	r2, r3
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	811a      	strh	r2, [r3, #8]
}
    18b4:	3730      	adds	r7, #48	; 0x30
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop

000018bc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    18ca:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2200      	movs	r2, #0
    18d6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2200      	movs	r2, #0
    18dc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	220c      	movs	r2, #12
    18e2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	2200      	movs	r2, #0
    18e8:	819a      	strh	r2, [r3, #12]
}
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18f4:	b480      	push	{r7}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18fe:	2300      	movs	r3, #0
    1900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	8a1b      	ldrh	r3, [r3, #16]
    1906:	b29b      	uxth	r3, r3
    1908:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    190a:	68fa      	ldr	r2, [r7, #12]
    190c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1910:	4013      	ands	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	881a      	ldrh	r2, [r3, #0]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    191c:	4313      	orrs	r3, r2
    191e:	b29a      	uxth	r2, r3
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	889b      	ldrh	r3, [r3, #4]
    1924:	4313      	orrs	r3, r2
    1926:	b29a      	uxth	r2, r3
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	88db      	ldrh	r3, [r3, #6]
    192c:	4313      	orrs	r3, r2
    192e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1930:	68fa      	ldr	r2, [r7, #12]
    1932:	4313      	orrs	r3, r2
    1934:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	b29a      	uxth	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	821a      	strh	r2, [r3, #16]
}
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	2200      	movs	r2, #0
    1954:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2200      	movs	r2, #0
    195a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	2200      	movs	r2, #0
    1960:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2200      	movs	r2, #0
    1966:	80da      	strh	r2, [r3, #6]
}
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1980:	78fb      	ldrb	r3, [r7, #3]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	899b      	ldrh	r3, [r3, #12]
    198a:	b29b      	uxth	r3, r3
    198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1990:	b29a      	uxth	r2, r3
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	819a      	strh	r2, [r3, #12]
    1996:	e007      	b.n	19a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	899b      	ldrh	r3, [r3, #12]
    199c:	b29b      	uxth	r3, r3
    199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19a2:	b29a      	uxth	r2, r3
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	819a      	strh	r2, [r3, #12]
  }
}
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    19b4:	b480      	push	{r7}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	4613      	mov	r3, r2
    19be:	460a      	mov	r2, r1
    19c0:	807a      	strh	r2, [r7, #2]
    19c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    19c4:	2300      	movs	r3, #0
    19c6:	613b      	str	r3, [r7, #16]
    19c8:	2300      	movs	r3, #0
    19ca:	60fb      	str	r3, [r7, #12]
    19cc:	2300      	movs	r3, #0
    19ce:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19d0:	2300      	movs	r3, #0
    19d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	b2db      	uxtb	r3, r3
    19dc:	095b      	lsrs	r3, r3, #5
    19de:	b2db      	uxtb	r3, r3
    19e0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19e2:	887b      	ldrh	r3, [r7, #2]
    19e4:	f003 031f 	and.w	r3, r3, #31
    19e8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2201      	movs	r2, #1
    19ee:	fa02 f303 	lsl.w	r3, r2, r3
    19f2:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d103      	bne.n	1a02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	330c      	adds	r3, #12
    19fe:	617b      	str	r3, [r7, #20]
    1a00:	e009      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2b02      	cmp	r3, #2
    1a06:	d103      	bne.n	1a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	3310      	adds	r3, #16
    1a0c:	617b      	str	r3, [r7, #20]
    1a0e:	e002      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3314      	adds	r3, #20
    1a14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a16:	787b      	ldrb	r3, [r7, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d006      	beq.n	1a2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	697a      	ldr	r2, [r7, #20]
    1a20:	6811      	ldr	r1, [r2, #0]
    1a22:	68ba      	ldr	r2, [r7, #8]
    1a24:	430a      	orrs	r2, r1
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	e006      	b.n	1a38 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	697a      	ldr	r2, [r7, #20]
    1a2e:	6811      	ldr	r1, [r2, #0]
    1a30:	68ba      	ldr	r2, [r7, #8]
    1a32:	43d2      	mvns	r2, r2
    1a34:	400a      	ands	r2, r1
    1a36:	601a      	str	r2, [r3, #0]
  }
}
    1a38:	371c      	adds	r7, #28
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	4613      	mov	r3, r2
    1a4e:	460a      	mov	r2, r1
    1a50:	807a      	strh	r2, [r7, #2]
    1a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1a54:	787b      	ldrb	r3, [r7, #1]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d008      	beq.n	1a6c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	8a9b      	ldrh	r3, [r3, #20]
    1a5e:	b29a      	uxth	r2, r3
    1a60:	887b      	ldrh	r3, [r7, #2]
    1a62:	4313      	orrs	r3, r2
    1a64:	b29a      	uxth	r2, r3
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	829a      	strh	r2, [r3, #20]
    1a6a:	e009      	b.n	1a80 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a9b      	ldrh	r3, [r3, #20]
    1a70:	b29a      	uxth	r2, r3
    1a72:	887b      	ldrh	r3, [r7, #2]
    1a74:	43db      	mvns	r3, r3
    1a76:	b29b      	uxth	r3, r3
    1a78:	4013      	ands	r3, r2
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	829a      	strh	r2, [r3, #20]
  }
}
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	8a1b      	ldrh	r3, [r3, #16]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	f023 030f 	bic.w	r3, r3, #15
    1aa2:	b29a      	uxth	r2, r3
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	8a1b      	ldrh	r3, [r3, #16]
    1aac:	b29a      	uxth	r2, r3
    1aae:	78fb      	ldrb	r3, [r7, #3]
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	821a      	strh	r2, [r3, #16]
}
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	460b      	mov	r3, r1
    1ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	899b      	ldrh	r3, [r3, #12]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1ada:	b29a      	uxth	r2, r3
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	899b      	ldrh	r3, [r3, #12]
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	887b      	ldrh	r3, [r7, #2]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b29a      	uxth	r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	819a      	strh	r2, [r3, #12]
}
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b08:	78fb      	ldrb	r3, [r7, #3]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d008      	beq.n	1b20 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	899b      	ldrh	r3, [r3, #12]
    1b12:	b29b      	uxth	r3, r3
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	819a      	strh	r2, [r3, #12]
    1b1e:	e007      	b.n	1b30 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f023 0302 	bic.w	r3, r3, #2
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  }
}
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop

00001b3c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	460b      	mov	r3, r1
    1b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8a1b      	ldrh	r3, [r3, #16]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	f023 0320 	bic.w	r3, r3, #32
    1b52:	b29a      	uxth	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	8a1b      	ldrh	r3, [r3, #16]
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	887b      	ldrh	r3, [r7, #2]
    1b60:	4313      	orrs	r3, r2
    1b62:	b29a      	uxth	r2, r3
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	821a      	strh	r2, [r3, #16]
}
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	460b      	mov	r3, r1
    1b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b90:	b29a      	uxth	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	821a      	strh	r2, [r3, #16]
    1b96:	e007      	b.n	1ba8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  }
}
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1bc0:	887b      	ldrh	r3, [r7, #2]
    1bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bc6:	b29a      	uxth	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	809a      	strh	r2, [r3, #4]
}
    1bcc:	370c      	adds	r7, #12
    1bce:	46bd      	mov	sp, r7
    1bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop

00001bd8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	b29b      	uxth	r3, r3
    1be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bea:	b29b      	uxth	r3, r3
}
    1bec:	4618      	mov	r0, r3
    1bee:	370c      	adds	r7, #12
    1bf0:	46bd      	mov	sp, r7
    1bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf6:	4770      	bx	lr

00001bf8 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b083      	sub	sp, #12
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	899b      	ldrh	r3, [r3, #12]
    1c04:	b29b      	uxth	r3, r3
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	819a      	strh	r2, [r3, #12]
}
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	460b      	mov	r3, r1
    1c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8b1b      	ldrh	r3, [r3, #24]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	b29a      	uxth	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b1b      	ldrh	r3, [r3, #24]
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	b29b      	uxth	r3, r3
    1c44:	4313      	orrs	r3, r2
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	831a      	strh	r2, [r3, #24]
}
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1c58:	b480      	push	{r7}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	8b1b      	ldrh	r3, [r3, #24]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c6e:	b29a      	uxth	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	8b1b      	ldrh	r3, [r3, #24]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	78fb      	ldrb	r3, [r7, #3]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	4313      	orrs	r3, r2
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
}
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	460b      	mov	r3, r1
    1c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c9c:	78fb      	ldrb	r3, [r7, #3]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d008      	beq.n	1cb4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	8a9b      	ldrh	r3, [r3, #20]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	f043 0320 	orr.w	r3, r3, #32
    1cac:	b29a      	uxth	r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	829a      	strh	r2, [r3, #20]
    1cb2:	e007      	b.n	1cc4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8a9b      	ldrh	r3, [r3, #20]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 0320 	bic.w	r3, r3, #32
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	829a      	strh	r2, [r3, #20]
  }
}
    1cc4:	370c      	adds	r7, #12
    1cc6:	46bd      	mov	sp, r7
    1cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	460b      	mov	r3, r1
    1cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cdc:	78fb      	ldrb	r3, [r7, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d008      	beq.n	1cf4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	8a9b      	ldrh	r3, [r3, #20]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	f043 0310 	orr.w	r3, r3, #16
    1cec:	b29a      	uxth	r2, r3
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	829a      	strh	r2, [r3, #20]
    1cf2:	e007      	b.n	1d04 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	8a9b      	ldrh	r3, [r3, #20]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f023 0310 	bic.w	r3, r3, #16
    1cfe:	b29a      	uxth	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	829a      	strh	r2, [r3, #20]
  }
}
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d10:	b480      	push	{r7}
    1d12:	b083      	sub	sp, #12
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	460b      	mov	r3, r1
    1d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d1c:	78fb      	ldrb	r3, [r7, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d008      	beq.n	1d34 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	8a9b      	ldrh	r3, [r3, #20]
    1d26:	b29b      	uxth	r3, r3
    1d28:	f043 0308 	orr.w	r3, r3, #8
    1d2c:	b29a      	uxth	r2, r3
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	829a      	strh	r2, [r3, #20]
    1d32:	e007      	b.n	1d44 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	8a9b      	ldrh	r3, [r3, #20]
    1d38:	b29b      	uxth	r3, r3
    1d3a:	f023 0308 	bic.w	r3, r3, #8
    1d3e:	b29a      	uxth	r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	829a      	strh	r2, [r3, #20]
  }
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop

00001d50 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d50:	b480      	push	{r7}
    1d52:	b083      	sub	sp, #12
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	460b      	mov	r3, r1
    1d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d5c:	78fb      	ldrb	r3, [r7, #3]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00a      	beq.n	1d78 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	899b      	ldrh	r3, [r3, #12]
    1d66:	b29b      	uxth	r3, r3
    1d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d70:	b29a      	uxth	r2, r3
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	819a      	strh	r2, [r3, #12]
    1d76:	e007      	b.n	1d88 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d82:	b29a      	uxth	r2, r3
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	819a      	strh	r2, [r3, #12]
  }
}
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop

00001d94 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d94:	b480      	push	{r7}
    1d96:	b083      	sub	sp, #12
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	460b      	mov	r3, r1
    1d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1da0:	78fb      	ldrb	r3, [r7, #3]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d008      	beq.n	1db8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	8a9b      	ldrh	r3, [r3, #20]
    1daa:	b29b      	uxth	r3, r3
    1dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1db0:	b29a      	uxth	r2, r3
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	829a      	strh	r2, [r3, #20]
    1db6:	e007      	b.n	1dc8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	8a9b      	ldrh	r3, [r3, #20]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	829a      	strh	r2, [r3, #20]
  }
}
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1dd4:	b480      	push	{r7}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	8a9b      	ldrh	r3, [r3, #20]
    1de4:	b29b      	uxth	r3, r3
    1de6:	f023 0304 	bic.w	r3, r3, #4
    1dea:	b29a      	uxth	r2, r3
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	8a9b      	ldrh	r3, [r3, #20]
    1df4:	b29a      	uxth	r2, r3
    1df6:	887b      	ldrh	r3, [r7, #2]
    1df8:	4313      	orrs	r3, r2
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	829a      	strh	r2, [r3, #20]
}
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop

00001e0c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b083      	sub	sp, #12
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	460b      	mov	r3, r1
    1e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d008      	beq.n	1e30 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	8a9b      	ldrh	r3, [r3, #20]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 0302 	orr.w	r3, r3, #2
    1e28:	b29a      	uxth	r2, r3
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	829a      	strh	r2, [r3, #20]
    1e2e:	e007      	b.n	1e40 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  }
}
    1e40:	370c      	adds	r7, #12
    1e42:	46bd      	mov	sp, r7
    1e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e4c:	b480      	push	{r7}
    1e4e:	b085      	sub	sp, #20
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	460b      	mov	r3, r1
    1e56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e58:	2300      	movs	r3, #0
    1e5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	b29a      	uxth	r2, r3
    1e62:	887b      	ldrh	r3, [r7, #2]
    1e64:	4013      	ands	r3, r2
    1e66:	b29b      	uxth	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d002      	beq.n	1e72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e6c:	2301      	movs	r3, #1
    1e6e:	73fb      	strb	r3, [r7, #15]
    1e70:	e001      	b.n	1e76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e72:	2300      	movs	r3, #0
    1e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e76:	7bfb      	ldrb	r3, [r7, #15]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3714      	adds	r7, #20
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    1e90:	887b      	ldrh	r3, [r7, #2]
    1e92:	43db      	mvns	r3, r3
    1e94:	b29a      	uxth	r2, r3
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	801a      	strh	r2, [r3, #0]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr

00001ea4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ea4:	b480      	push	{r7}
    1ea6:	b087      	sub	sp, #28
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	460b      	mov	r3, r1
    1eae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
    1eb4:	2300      	movs	r3, #0
    1eb6:	617b      	str	r3, [r7, #20]
    1eb8:	2300      	movs	r3, #0
    1eba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1ebc:	2300      	movs	r3, #0
    1ebe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1ec0:	887b      	ldrh	r3, [r7, #2]
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	095b      	lsrs	r3, r3, #5
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1eca:	887b      	ldrh	r3, [r7, #2]
    1ecc:	f003 031f 	and.w	r3, r3, #31
    1ed0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2201      	movs	r2, #1
    1ed6:	fa02 f303 	lsl.w	r3, r2, r3
    1eda:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d106      	bne.n	1ef0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	899b      	ldrh	r3, [r3, #12]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	697a      	ldr	r2, [r7, #20]
    1eea:	4013      	ands	r3, r2
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00f      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d106      	bne.n	1f04 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	8a1b      	ldrh	r3, [r3, #16]
    1efa:	b29b      	uxth	r3, r3
    1efc:	697a      	ldr	r2, [r7, #20]
    1efe:	4013      	ands	r3, r2
    1f00:	617b      	str	r3, [r7, #20]
    1f02:	e005      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	8a9b      	ldrh	r3, [r3, #20]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	4013      	ands	r3, r2
    1f0e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b29b      	uxth	r3, r3
    1f16:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2201      	movs	r2, #1
    1f1c:	fa02 f303 	lsl.w	r3, r2, r3
    1f20:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	881b      	ldrh	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d005      	beq.n	1f40 <USART_GetITStatus+0x9c>
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f3a:	2301      	movs	r3, #1
    1f3c:	74fb      	strb	r3, [r7, #19]
    1f3e:	e001      	b.n	1f44 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f40:	2300      	movs	r3, #0
    1f42:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    1f44:	7cfb      	ldrb	r3, [r7, #19]
}
    1f46:	4618      	mov	r0, r3
    1f48:	371c      	adds	r7, #28
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f54:	b480      	push	{r7}
    1f56:	b085      	sub	sp, #20
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f60:	2300      	movs	r3, #0
    1f62:	81fb      	strh	r3, [r7, #14]
    1f64:	2300      	movs	r3, #0
    1f66:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    1f68:	887b      	ldrh	r3, [r7, #2]
    1f6a:	0a1b      	lsrs	r3, r3, #8
    1f6c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f6e:	89fb      	ldrh	r3, [r7, #14]
    1f70:	2201      	movs	r2, #1
    1f72:	fa02 f303 	lsl.w	r3, r2, r3
    1f76:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f78:	89bb      	ldrh	r3, [r7, #12]
    1f7a:	43db      	mvns	r3, r3
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	801a      	strh	r2, [r3, #0]
}
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f8c:	b480      	push	{r7}
    1f8e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	2200      	movs	r2, #0
    1f9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fa4:	2200      	movs	r2, #0
    1fa6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    1fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fb0:	2200      	movs	r2, #0
    1fb2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    1fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fbc:	2200      	movs	r2, #0
    1fbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fcc:	f2c0 020f 	movt	r2, #15
    1fd0:	615a      	str	r2, [r3, #20]
}
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1fdc:	b480      	push	{r7}
    1fde:	b085      	sub	sp, #20
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1fe4:	2300      	movs	r3, #0
    1fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff0:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d074      	beq.n	20e4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2006:	f2c4 0201 	movt	r2, #16385	; 0x4001
    200a:	6811      	ldr	r1, [r2, #0]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	43d2      	mvns	r2, r2
    2012:	400a      	ands	r2, r1
    2014:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2016:	f44f 6380 	mov.w	r3, #1024	; 0x400
    201a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	6812      	ldr	r2, [r2, #0]
    202c:	43d2      	mvns	r2, r2
    202e:	400a      	ands	r2, r1
    2030:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	4413      	add	r3, r2
    203a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	68fa      	ldr	r2, [r7, #12]
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	430a      	orrs	r2, r1
    2048:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	68d1      	ldr	r1, [r2, #12]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b10      	cmp	r3, #16
    2088:	d11a      	bne.n	20c0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    208e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2096:	f2c4 0201 	movt	r2, #16385	; 0x4001
    209a:	6891      	ldr	r1, [r2, #8]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	6812      	ldr	r2, [r2, #0]
    20a0:	430a      	orrs	r2, r1
    20a2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20b4:	68d1      	ldr	r1, [r2, #12]
    20b6:	687a      	ldr	r2, [r7, #4]
    20b8:	6812      	ldr	r2, [r2, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	60da      	str	r2, [r3, #12]
    20be:	e01e      	b.n	20fe <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    20c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20c8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	795b      	ldrb	r3, [r3, #5]
    20ce:	68fa      	ldr	r2, [r7, #12]
    20d0:	4413      	add	r3, r2
    20d2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68fa      	ldr	r2, [r7, #12]
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	430a      	orrs	r2, r1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	e00c      	b.n	20fe <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	791b      	ldrb	r3, [r3, #4]
    20e8:	68fa      	ldr	r2, [r7, #12]
    20ea:	4413      	add	r3, r2
    20ec:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    20ee:	68fb      	ldr	r3, [r7, #12]
    20f0:	68fa      	ldr	r2, [r7, #12]
    20f2:	6811      	ldr	r1, [r2, #0]
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	43d2      	mvns	r2, r2
    20fa:	400a      	ands	r2, r1
    20fc:	601a      	str	r2, [r3, #0]
  }
}
    20fe:	3714      	adds	r7, #20
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	220c      	movs	r2, #12
    2120:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	719a      	strb	r2, [r3, #6]
}
    2128:	370c      	adds	r7, #12
    212a:	46bd      	mov	sp, r7
    212c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2140:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2148:	f2c4 0201 	movt	r2, #16385	; 0x4001
    214c:	6911      	ldr	r1, [r2, #16]
    214e:	687a      	ldr	r2, [r7, #4]
    2150:	430a      	orrs	r2, r1
    2152:	611a      	str	r2, [r3, #16]
}
    2154:	370c      	adds	r7, #12
    2156:	46bd      	mov	sp, r7
    2158:	f85d 7b04 	ldr.w	r7, [sp], #4
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2160:	b480      	push	{r7}
    2162:	b085      	sub	sp, #20
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2168:	2300      	movs	r3, #0
    216a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2170:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2174:	695a      	ldr	r2, [r3, #20]
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4013      	ands	r3, r2
    217a:	2b00      	cmp	r3, #0
    217c:	d002      	beq.n	2184 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    217e:	2301      	movs	r3, #1
    2180:	73fb      	strb	r3, [r7, #15]
    2182:	e001      	b.n	2188 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    2184:	2300      	movs	r3, #0
    2186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2188:	7bfb      	ldrb	r3, [r7, #15]
}
    218a:	4618      	mov	r0, r3
    218c:	3714      	adds	r7, #20
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop

00002198 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2198:	b480      	push	{r7}
    219a:	b083      	sub	sp, #12
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    21a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21a8:	687a      	ldr	r2, [r7, #4]
    21aa:	615a      	str	r2, [r3, #20]
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop

000021b8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    21b8:	b480      	push	{r7}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    21c0:	2300      	movs	r3, #0
    21c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    21c4:	2300      	movs	r3, #0
    21c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    21c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	4013      	ands	r3, r2
    21d6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    21d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21e0:	695a      	ldr	r2, [r3, #20]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	4013      	ands	r3, r2
    21e6:	2b00      	cmp	r3, #0
    21e8:	d005      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    21f0:	2301      	movs	r3, #1
    21f2:	73fb      	strb	r3, [r7, #15]
    21f4:	e001      	b.n	21fa <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    21f6:	2300      	movs	r3, #0
    21f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21fa:	7bfb      	ldrb	r3, [r7, #15]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3714      	adds	r7, #20
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr

00002208 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2214:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	615a      	str	r2, [r3, #20]
}
    221c:	370c      	adds	r7, #12
    221e:	46bd      	mov	sp, r7
    2220:	f85d 7b04 	ldr.w	r7, [sp], #4
    2224:	4770      	bx	lr
    2226:	bf00      	nop

00002228 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2230:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2234:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    223e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2242:	60da      	str	r2, [r3, #12]
}
    2244:	370c      	adds	r7, #12
    2246:	46bd      	mov	sp, r7
    2248:	f85d 7b04 	ldr.w	r7, [sp], #4
    224c:	4770      	bx	lr
    224e:	bf00      	nop

00002250 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2250:	b480      	push	{r7}
    2252:	b087      	sub	sp, #28
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2258:	2300      	movs	r3, #0
    225a:	617b      	str	r3, [r7, #20]
    225c:	2300      	movs	r3, #0
    225e:	613b      	str	r3, [r7, #16]
    2260:	230f      	movs	r3, #15
    2262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	78db      	ldrb	r3, [r3, #3]
    2268:	2b00      	cmp	r3, #0
    226a:	d042      	beq.n	22f2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    226c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2270:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2274:	68db      	ldr	r3, [r3, #12]
    2276:	43db      	mvns	r3, r3
    2278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    227c:	0a1b      	lsrs	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	f1c3 0304 	rsb	r3, r3, #4
    2286:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	68fa      	ldr	r2, [r7, #12]
    228c:	fa22 f303 	lsr.w	r3, r2, r3
    2290:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	785b      	ldrb	r3, [r3, #1]
    2296:	461a      	mov	r2, r3
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	fa02 f303 	lsl.w	r3, r2, r3
    229e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	461a      	mov	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	4013      	ands	r3, r2
    22aa:	697a      	ldr	r2, [r7, #20]
    22ac:	4313      	orrs	r3, r2
    22ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	011b      	lsls	r3, r3, #4
    22b4:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    22b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7812      	ldrb	r2, [r2, #0]
    22c2:	4611      	mov	r1, r2
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	b2d2      	uxtb	r2, r2
    22c8:	440b      	add	r3, r1
    22ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	7812      	ldrb	r2, [r2, #0]
    22da:	0952      	lsrs	r2, r2, #5
    22dc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	7809      	ldrb	r1, [r1, #0]
    22e2:	f001 011f 	and.w	r1, r1, #31
    22e6:	2001      	movs	r0, #1
    22e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    22f0:	e011      	b.n	2316 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	7812      	ldrb	r2, [r2, #0]
    22fe:	0952      	lsrs	r2, r2, #5
    2300:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2302:	6879      	ldr	r1, [r7, #4]
    2304:	7809      	ldrb	r1, [r1, #0]
    2306:	f001 011f 	and.w	r1, r1, #31
    230a:	2001      	movs	r0, #1
    230c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2310:	3220      	adds	r2, #32
    2312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2316:	371c      	adds	r7, #28
    2318:	46bd      	mov	sp, r7
    231a:	f85d 7b04 	ldr.w	r7, [sp], #4
    231e:	4770      	bx	lr

00002320 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2320:	b480      	push	{r7}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    232a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2332:	683a      	ldr	r2, [r7, #0]
    2334:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2338:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233c:	6879      	ldr	r1, [r7, #4]
    233e:	430a      	orrs	r2, r1
    2340:	609a      	str	r2, [r3, #8]
}
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr

0000234c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	71fa      	strb	r2, [r7, #7]
    2358:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    235a:	79bb      	ldrb	r3, [r7, #6]
    235c:	2b00      	cmp	r3, #0
    235e:	d00c      	beq.n	237a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2360:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2364:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2368:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    236c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2370:	6911      	ldr	r1, [r2, #16]
    2372:	79fa      	ldrb	r2, [r7, #7]
    2374:	430a      	orrs	r2, r1
    2376:	611a      	str	r2, [r3, #16]
    2378:	e00c      	b.n	2394 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2386:	f2ce 0200 	movt	r2, #57344	; 0xe000
    238a:	6911      	ldr	r1, [r2, #16]
    238c:	79fa      	ldrb	r2, [r7, #7]
    238e:	43d2      	mvns	r2, r2
    2390:	400a      	ands	r2, r1
    2392:	611a      	str	r2, [r3, #16]
  }
}
    2394:	370c      	adds	r7, #12
    2396:	46bd      	mov	sp, r7
    2398:	f85d 7b04 	ldr.w	r7, [sp], #4
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2b04      	cmp	r3, #4
    23ac:	d10c      	bne.n	23c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23ae:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b6:	f24e 0210 	movw	r2, #57360	; 0xe010
    23ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23be:	6812      	ldr	r2, [r2, #0]
    23c0:	f042 0204 	orr.w	r2, r2, #4
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e00b      	b.n	23e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23c8:	f24e 0310 	movw	r3, #57360	; 0xe010
    23cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d0:	f24e 0210 	movw	r2, #57360	; 0xe010
    23d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23d8:	6812      	ldr	r2, [r2, #0]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	601a      	str	r2, [r3, #0]
  }
}
    23e0:	370c      	adds	r7, #12
    23e2:	46bd      	mov	sp, r7
    23e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af00      	add	r7, sp, #0
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	60b9      	str	r1, [r7, #8]
    23f6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23f8:	2038      	movs	r0, #56	; 0x38
    23fa:	f003 fa89 	bl	5910 <pvPortMalloc>
    23fe:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d058      	beq.n	24b8 <xCoRoutineCreate+0xcc>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2406:	f240 338c 	movw	r3, #908	; 0x38c
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	681b      	ldr	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d107      	bne.n	2424 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2414:	f240 338c 	movw	r3, #908	; 0x38c
    2418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241c:	693a      	ldr	r2, [r7, #16]
    241e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2420:	f000 fa08 	bl	2834 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2b01      	cmp	r3, #1
    2428:	d901      	bls.n	242e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    242a:	2301      	movs	r3, #1
    242c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2200      	movs	r2, #0
    2432:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2434:	693b      	ldr	r3, [r7, #16]
    2436:	68ba      	ldr	r2, [r7, #8]
    2438:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	687a      	ldr	r2, [r7, #4]
    243e:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	68fa      	ldr	r2, [r7, #12]
    2444:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	3304      	adds	r3, #4
    244a:	4618      	mov	r0, r3
    244c:	f001 fbc8 	bl	3be0 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2450:	693b      	ldr	r3, [r7, #16]
    2452:	3318      	adds	r3, #24
    2454:	4618      	mov	r0, r3
    2456:	f001 fbc3 	bl	3be0 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    245a:	693b      	ldr	r3, [r7, #16]
    245c:	693a      	ldr	r2, [r7, #16]
    245e:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2460:	693b      	ldr	r3, [r7, #16]
    2462:	693a      	ldr	r2, [r7, #16]
    2464:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	f1c3 0214 	rsb	r2, r3, #20
    246c:	693b      	ldr	r3, [r7, #16]
    246e:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2470:	693b      	ldr	r3, [r7, #16]
    2472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2474:	f240 3390 	movw	r3, #912	; 0x390
    2478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    247c:	681b      	ldr	r3, [r3, #0]
    247e:	429a      	cmp	r2, r3
    2480:	d906      	bls.n	2490 <xCoRoutineCreate+0xa4>
    2482:	693b      	ldr	r3, [r7, #16]
    2484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2486:	f240 3390 	movw	r3, #912	; 0x390
    248a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    248e:	601a      	str	r2, [r3, #0]
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2494:	4613      	mov	r3, r2
    2496:	009b      	lsls	r3, r3, #2
    2498:	4413      	add	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	f240 3220 	movw	r2, #800	; 0x320
    24a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    24a4:	441a      	add	r2, r3
    24a6:	693b      	ldr	r3, [r7, #16]
    24a8:	3304      	adds	r3, #4
    24aa:	4610      	mov	r0, r2
    24ac:	4619      	mov	r1, r3
    24ae:	f001 fba3 	bl	3bf8 <vListInsertEnd>

		xReturn = pdPASS;
    24b2:	2301      	movs	r3, #1
    24b4:	617b      	str	r3, [r7, #20]
    24b6:	e002      	b.n	24be <xCoRoutineCreate+0xd2>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b8:	f04f 33ff 	mov.w	r3, #4294967295
    24bc:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    24be:	697b      	ldr	r3, [r7, #20]
}
    24c0:	4618      	mov	r0, r3
    24c2:	3718      	adds	r7, #24
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}

000024c8 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    24d2:	f240 3394 	movw	r3, #916	; 0x394
    24d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24da:	681a      	ldr	r2, [r3, #0]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	4413      	add	r3, r2
    24e0:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    24e2:	f240 338c 	movw	r3, #908	; 0x38c
    24e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24ea:	681b      	ldr	r3, [r3, #0]
    24ec:	3304      	adds	r3, #4
    24ee:	4618      	mov	r0, r3
    24f0:	f001 fbe2 	bl	3cb8 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    24f4:	f240 338c 	movw	r3, #908	; 0x38c
    24f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24fc:	681b      	ldr	r3, [r3, #0]
    24fe:	68fa      	ldr	r2, [r7, #12]
    2500:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2502:	f240 3394 	movw	r3, #916	; 0x394
    2506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	68fa      	ldr	r2, [r7, #12]
    250e:	429a      	cmp	r2, r3
    2510:	d20f      	bcs.n	2532 <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2512:	f240 3374 	movw	r3, #884	; 0x374
    2516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    251a:	681a      	ldr	r2, [r3, #0]
    251c:	f240 338c 	movw	r3, #908	; 0x38c
    2520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	3304      	adds	r3, #4
    2528:	4610      	mov	r0, r2
    252a:	4619      	mov	r1, r3
    252c:	f001 fb8c 	bl	3c48 <vListInsert>
    2530:	e00e      	b.n	2550 <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2532:	f240 3370 	movw	r3, #880	; 0x370
    2536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253a:	681a      	ldr	r2, [r3, #0]
    253c:	f240 338c 	movw	r3, #908	; 0x38c
    2540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	3304      	adds	r3, #4
    2548:	4610      	mov	r0, r2
    254a:	4619      	mov	r1, r3
    254c:	f001 fb7c 	bl	3c48 <vListInsert>
	}

	if( pxEventList )
    2550:	683b      	ldr	r3, [r7, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d009      	beq.n	256a <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2556:	f240 338c 	movw	r3, #908	; 0x38c
    255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	3318      	adds	r3, #24
    2562:	6838      	ldr	r0, [r7, #0]
    2564:	4619      	mov	r1, r3
    2566:	f001 fb6f 	bl	3c48 <vListInsert>
	}
}
    256a:	3710      	adds	r7, #16
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}

00002570 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2576:	e039      	b.n	25ec <prvCheckPendingReadyList+0x7c>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2578:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    257c:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2580:	f240 3378 	movw	r3, #888	; 0x378
    2584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2588:	68db      	ldr	r3, [r3, #12]
    258a:	68db      	ldr	r3, [r3, #12]
    258c:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	3318      	adds	r3, #24
    2592:	4618      	mov	r0, r3
    2594:	f001 fb90 	bl	3cb8 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2598:	f04f 0000 	mov.w	r0, #0
    259c:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	3304      	adds	r3, #4
    25a4:	4618      	mov	r0, r3
    25a6:	f001 fb87 	bl	3cb8 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ae:	f240 3390 	movw	r3, #912	; 0x390
    25b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	429a      	cmp	r2, r3
    25ba:	d906      	bls.n	25ca <prvCheckPendingReadyList+0x5a>
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25c0:	f240 3390 	movw	r3, #912	; 0x390
    25c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25c8:	601a      	str	r2, [r3, #0]
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ce:	4613      	mov	r3, r2
    25d0:	009b      	lsls	r3, r3, #2
    25d2:	4413      	add	r3, r2
    25d4:	009b      	lsls	r3, r3, #2
    25d6:	f240 3220 	movw	r2, #800	; 0x320
    25da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    25de:	441a      	add	r2, r3
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	3304      	adds	r3, #4
    25e4:	4610      	mov	r0, r2
    25e6:	4619      	mov	r1, r3
    25e8:	f001 fb06 	bl	3bf8 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25ec:	f240 3378 	movw	r3, #888	; 0x378
    25f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1be      	bne.n	2578 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    25fa:	3708      	adds	r7, #8
    25fc:	46bd      	mov	sp, r7
    25fe:	bd80      	pop	{r7, pc}

00002600 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2600:	b580      	push	{r7, lr}
    2602:	b082      	sub	sp, #8
    2604:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2606:	f002 fbd5 	bl	4db4 <xTaskGetTickCount>
    260a:	4602      	mov	r2, r0
    260c:	f240 3398 	movw	r3, #920	; 0x398
    2610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	1ad2      	subs	r2, r2, r3
    2618:	f240 339c 	movw	r3, #924	; 0x39c
    261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2620:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2622:	e085      	b.n	2730 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
    2624:	f240 3394 	movw	r3, #916	; 0x394
    2628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	1c5a      	adds	r2, r3, #1
    2630:	f240 3394 	movw	r3, #916	; 0x394
    2634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2638:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    263a:	f240 339c 	movw	r3, #924	; 0x39c
    263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	1e5a      	subs	r2, r3, #1
    2646:	f240 339c 	movw	r3, #924	; 0x39c
    264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    264e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2650:	f240 3394 	movw	r3, #916	; 0x394
    2654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	2b00      	cmp	r3, #0
    265c:	d116      	bne.n	268c <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    265e:	f240 3370 	movw	r3, #880	; 0x370
    2662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    266a:	f240 3374 	movw	r3, #884	; 0x374
    266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2672:	681a      	ldr	r2, [r3, #0]
    2674:	f240 3370 	movw	r3, #880	; 0x370
    2678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    267e:	f240 3374 	movw	r3, #884	; 0x374
    2682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2686:	687a      	ldr	r2, [r7, #4]
    2688:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    268a:	e049      	b.n	2720 <prvCheckDelayedList+0x120>
    268c:	e048      	b.n	2720 <prvCheckDelayedList+0x120>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    268e:	f240 3370 	movw	r3, #880	; 0x370
    2692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	68db      	ldr	r3, [r3, #12]
    269a:	68db      	ldr	r3, [r3, #12]
    269c:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    269e:	683b      	ldr	r3, [r7, #0]
    26a0:	685a      	ldr	r2, [r3, #4]
    26a2:	f240 3394 	movw	r3, #916	; 0x394
    26a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	429a      	cmp	r2, r3
    26ae:	d900      	bls.n	26b2 <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    26b0:	e03e      	b.n	2730 <prvCheckDelayedList+0x130>
			}																						

			portDISABLE_INTERRUPTS();
    26b2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    26b6:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    26ba:	683b      	ldr	r3, [r7, #0]
    26bc:	3304      	adds	r3, #4
    26be:	4618      	mov	r0, r3
    26c0:	f001 fafa 	bl	3cb8 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26c8:	2b00      	cmp	r3, #0
    26ca:	d004      	beq.n	26d6 <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    26cc:	683b      	ldr	r3, [r7, #0]
    26ce:	3318      	adds	r3, #24
    26d0:	4618      	mov	r0, r3
    26d2:	f001 faf1 	bl	3cb8 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    26d6:	f04f 0000 	mov.w	r0, #0
    26da:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    26de:	683b      	ldr	r3, [r7, #0]
    26e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26e2:	f240 3390 	movw	r3, #912	; 0x390
    26e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	429a      	cmp	r2, r3
    26ee:	d906      	bls.n	26fe <prvCheckDelayedList+0xfe>
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26f4:	f240 3390 	movw	r3, #912	; 0x390
    26f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26fc:	601a      	str	r2, [r3, #0]
    26fe:	683b      	ldr	r3, [r7, #0]
    2700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2702:	4613      	mov	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	4413      	add	r3, r2
    2708:	009b      	lsls	r3, r3, #2
    270a:	f240 3220 	movw	r2, #800	; 0x320
    270e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2712:	441a      	add	r2, r3
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	3304      	adds	r3, #4
    2718:	4610      	mov	r0, r2
    271a:	4619      	mov	r1, r3
    271c:	f001 fa6c 	bl	3bf8 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2720:	f240 3370 	movw	r3, #880	; 0x370
    2724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d1ae      	bne.n	268e <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2730:	f240 339c 	movw	r3, #924	; 0x39c
    2734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2738:	681b      	ldr	r3, [r3, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	f47f af72 	bne.w	2624 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2740:	f240 3394 	movw	r3, #916	; 0x394
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	681a      	ldr	r2, [r3, #0]
    274a:	f240 3398 	movw	r3, #920	; 0x398
    274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2752:	601a      	str	r2, [r3, #0]
}
    2754:	3708      	adds	r7, #8
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}
    275a:	bf00      	nop

0000275c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    275c:	b580      	push	{r7, lr}
    275e:	b082      	sub	sp, #8
    2760:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2762:	f7ff ff05 	bl	2570 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2766:	f7ff ff4b 	bl	2600 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    276a:	e012      	b.n	2792 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    276c:	f240 3390 	movw	r3, #912	; 0x390
    2770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	2b00      	cmp	r3, #0
    2778:	d100      	bne.n	277c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    277a:	e057      	b.n	282c <vCoRoutineSchedule+0xd0>
		}
		--uxTopCoRoutineReadyPriority;
    277c:	f240 3390 	movw	r3, #912	; 0x390
    2780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	1e5a      	subs	r2, r3, #1
    2788:	f240 3390 	movw	r3, #912	; 0x390
    278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2790:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2792:	f240 3390 	movw	r3, #912	; 0x390
    2796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    279a:	6819      	ldr	r1, [r3, #0]
    279c:	f240 3220 	movw	r2, #800	; 0x320
    27a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27a4:	460b      	mov	r3, r1
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	440b      	add	r3, r1
    27aa:	009b      	lsls	r3, r3, #2
    27ac:	4413      	add	r3, r2
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d0db      	beq.n	276c <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    27b4:	f240 3390 	movw	r3, #912	; 0x390
    27b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27bc:	681a      	ldr	r2, [r3, #0]
    27be:	4613      	mov	r3, r2
    27c0:	009b      	lsls	r3, r3, #2
    27c2:	4413      	add	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	f240 3220 	movw	r2, #800	; 0x320
    27ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27ce:	4413      	add	r3, r2
    27d0:	607b      	str	r3, [r7, #4]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	685b      	ldr	r3, [r3, #4]
    27d6:	685a      	ldr	r2, [r3, #4]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	605a      	str	r2, [r3, #4]
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	685a      	ldr	r2, [r3, #4]
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	3308      	adds	r3, #8
    27e4:	429a      	cmp	r2, r3
    27e6:	d104      	bne.n	27f2 <vCoRoutineSchedule+0x96>
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	685b      	ldr	r3, [r3, #4]
    27ec:	685a      	ldr	r2, [r3, #4]
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	605a      	str	r2, [r3, #4]
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	685b      	ldr	r3, [r3, #4]
    27f6:	68da      	ldr	r2, [r3, #12]
    27f8:	f240 338c 	movw	r3, #908	; 0x38c
    27fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2800:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2802:	f240 338c 	movw	r3, #908	; 0x38c
    2806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	681a      	ldr	r2, [r3, #0]
    280e:	f240 338c 	movw	r3, #908	; 0x38c
    2812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2816:	6819      	ldr	r1, [r3, #0]
    2818:	f240 338c 	movw	r3, #908	; 0x38c
    281c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2820:	681b      	ldr	r3, [r3, #0]
    2822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2824:	4608      	mov	r0, r1
    2826:	4619      	mov	r1, r3
    2828:	4790      	blx	r2

	return;
    282a:	bf00      	nop
}
    282c:	3708      	adds	r7, #8
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	bf00      	nop

00002834 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    283a:	2300      	movs	r3, #0
    283c:	607b      	str	r3, [r7, #4]
    283e:	e00f      	b.n	2860 <prvInitialiseCoRoutineLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2840:	687a      	ldr	r2, [r7, #4]
    2842:	4613      	mov	r3, r2
    2844:	009b      	lsls	r3, r3, #2
    2846:	4413      	add	r3, r2
    2848:	009b      	lsls	r3, r3, #2
    284a:	f240 3220 	movw	r2, #800	; 0x320
    284e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2852:	4413      	add	r3, r2
    2854:	4618      	mov	r0, r3
    2856:	f001 f9a3 	bl	3ba0 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	3301      	adds	r3, #1
    285e:	607b      	str	r3, [r7, #4]
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	2b01      	cmp	r3, #1
    2864:	d9ec      	bls.n	2840 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2866:	f240 3048 	movw	r0, #840	; 0x348
    286a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    286e:	f001 f997 	bl	3ba0 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2872:	f240 305c 	movw	r0, #860	; 0x35c
    2876:	f2c2 0000 	movt	r0, #8192	; 0x2000
    287a:	f001 f991 	bl	3ba0 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    287e:	f240 3078 	movw	r0, #888	; 0x378
    2882:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2886:	f001 f98b 	bl	3ba0 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    288a:	f240 3370 	movw	r3, #880	; 0x370
    288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2892:	f240 3248 	movw	r2, #840	; 0x348
    2896:	f2c2 0200 	movt	r2, #8192	; 0x2000
    289a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    289c:	f240 3374 	movw	r3, #884	; 0x374
    28a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a4:	f240 325c 	movw	r2, #860	; 0x35c
    28a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28ac:	601a      	str	r2, [r3, #0]
}
    28ae:	3708      	adds	r7, #8
    28b0:	46bd      	mov	sp, r7
    28b2:	bd80      	pop	{r7, pc}

000028b4 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	68db      	ldr	r3, [r3, #12]
    28c0:	68db      	ldr	r3, [r3, #12]
    28c2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    28c4:	68bb      	ldr	r3, [r7, #8]
    28c6:	3318      	adds	r3, #24
    28c8:	4618      	mov	r0, r3
    28ca:	f001 f9f5 	bl	3cb8 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	3318      	adds	r3, #24
    28d2:	f240 3078 	movw	r0, #888	; 0x378
    28d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28da:	4619      	mov	r1, r3
    28dc:	f001 f98c 	bl	3bf8 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    28e0:	68bb      	ldr	r3, [r7, #8]
    28e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28e4:	f240 338c 	movw	r3, #908	; 0x38c
    28e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28f0:	429a      	cmp	r2, r3
    28f2:	d302      	bcc.n	28fa <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    28f4:	2301      	movs	r3, #1
    28f6:	60fb      	str	r3, [r7, #12]
    28f8:	e001      	b.n	28fe <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    28fa:	2300      	movs	r3, #0
    28fc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    28fe:	68fb      	ldr	r3, [r7, #12]
}
    2900:	4618      	mov	r0, r3
    2902:	3710      	adds	r7, #16
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}

00002908 <prvInitialiseEventLists>:
static void vEventSetxTimeStamp( xEventHandle pxNewEvent );

static xList * pxGetReadyList( void );

static void prvInitialiseEventLists(void )
{
    2908:	b580      	push	{r7, lr}
    290a:	b082      	sub	sp, #8
    290c:	af00      	add	r7, sp, #0
    volatile portBASE_TYPE xCPU;

    vListInitialise( ( xList * ) &xEventList );
    290e:	f240 30a0 	movw	r0, #928	; 0x3a0
    2912:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2916:	f001 f943 	bl	3ba0 <vListInitialise>

    // init the xEventReadyList[configCPU_NUMBER].
    for ( xCPU = 0; xCPU < configCPU_NUMBER; xCPU ++ )
    291a:	2300      	movs	r3, #0
    291c:	607b      	str	r3, [r7, #4]
    291e:	e00f      	b.n	2940 <prvInitialiseEventLists+0x38>
    {
        vListInitialise( (xList * ) & xEventReadyList[xCPU] );
    2920:	687a      	ldr	r2, [r7, #4]
    2922:	4613      	mov	r3, r2
    2924:	009b      	lsls	r3, r3, #2
    2926:	4413      	add	r3, r2
    2928:	009b      	lsls	r3, r3, #2
    292a:	f240 32b4 	movw	r2, #948	; 0x3b4
    292e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2932:	4413      	add	r3, r2
    2934:	4618      	mov	r0, r3
    2936:	f001 f933 	bl	3ba0 <vListInitialise>
    volatile portBASE_TYPE xCPU;

    vListInitialise( ( xList * ) &xEventList );

    // init the xEventReadyList[configCPU_NUMBER].
    for ( xCPU = 0; xCPU < configCPU_NUMBER; xCPU ++ )
    293a:	687b      	ldr	r3, [r7, #4]
    293c:	3301      	adds	r3, #1
    293e:	607b      	str	r3, [r7, #4]
    2940:	687b      	ldr	r3, [r7, #4]
    2942:	2b00      	cmp	r3, #0
    2944:	ddec      	ble.n	2920 <prvInitialiseEventLists+0x18>
    {
        vListInitialise( (xList * ) & xEventReadyList[xCPU] );
    }
}
    2946:	3708      	adds	r7, #8
    2948:	46bd      	mov	sp, r7
    294a:	bd80      	pop	{r7, pc}

0000294c <xCompareFunction>:


static portBASE_TYPE xCompareFunction( const struct timeStamp t1, const struct timeStamp t2 )
{
    294c:	b490      	push	{r4, r7}
    294e:	b084      	sub	sp, #16
    2950:	af00      	add	r7, sp, #0
    2952:	463c      	mov	r4, r7
    2954:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if( t1.xSlackTime < t2.xSlackTime )
    2958:	683a      	ldr	r2, [r7, #0]
    295a:	69bb      	ldr	r3, [r7, #24]
    295c:	429a      	cmp	r2, r3
    295e:	d201      	bcs.n	2964 <xCompareFunction+0x18>
    {
        return pdTRUE;
    2960:	2301      	movs	r3, #1
    2962:	e014      	b.n	298e <xCompareFunction+0x42>
    }
    else if( t1.xSlackTime == t2.xSlackTime )
    2964:	683a      	ldr	r2, [r7, #0]
    2966:	69bb      	ldr	r3, [r7, #24]
    2968:	429a      	cmp	r2, r3
    296a:	d10f      	bne.n	298c <xCompareFunction+0x40>
    {
        if( t1.xTime < t2.xTime )
    296c:	687a      	ldr	r2, [r7, #4]
    296e:	69fb      	ldr	r3, [r7, #28]
    2970:	429a      	cmp	r2, r3
    2972:	d201      	bcs.n	2978 <xCompareFunction+0x2c>
        {
            return pdTRUE;
    2974:	2301      	movs	r3, #1
    2976:	e00a      	b.n	298e <xCompareFunction+0x42>
        }
        else if( t1.xTime == t2.xTime )
    2978:	687a      	ldr	r2, [r7, #4]
    297a:	69fb      	ldr	r3, [r7, #28]
    297c:	429a      	cmp	r2, r3
    297e:	d105      	bne.n	298c <xCompareFunction+0x40>
        {
            if( t1.xLevel < t2.xLevel )
    2980:	68fa      	ldr	r2, [r7, #12]
    2982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2984:	429a      	cmp	r2, r3
    2986:	da01      	bge.n	298c <xCompareFunction+0x40>
            {
                return pdTRUE;
    2988:	2301      	movs	r3, #1
    298a:	e000      	b.n	298e <xCompareFunction+0x42>
            }
        }
    }

    return pdFALSE;
    298c:	2300      	movs	r3, #0
}
    298e:	4618      	mov	r0, r3
    2990:	3710      	adds	r7, #16
    2992:	46bd      	mov	sp, r7
    2994:	bc90      	pop	{r4, r7}
    2996:	4770      	bx	lr

00002998 <xEventGetpxSource>:
    return pdTRUE;
}
*/

xTaskHandle xEventGetpxSource( xEventHandle pxEvent )
{
    2998:	b480      	push	{r7}
    299a:	b083      	sub	sp, #12
    299c:	af00      	add	r7, sp, #0
    299e:	6078      	str	r0, [r7, #4]
    return ((eveECB *)pxEvent)->pxSource;
    29a0:	687b      	ldr	r3, [r7, #4]
    29a2:	681b      	ldr	r3, [r3, #0]
}
    29a4:	4618      	mov	r0, r3
    29a6:	370c      	adds	r7, #12
    29a8:	46bd      	mov	sp, r7
    29aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    29ae:	4770      	bx	lr

000029b0 <xEventGetpxDestination>:

xTaskHandle xEventGetpxDestination( xEventHandle pxEvent)
{
    29b0:	b480      	push	{r7}
    29b2:	b083      	sub	sp, #12
    29b4:	af00      	add	r7, sp, #0
    29b6:	6078      	str	r0, [r7, #4]
    return ((eveECB *) pxEvent)->pxDestination;
    29b8:	687b      	ldr	r3, [r7, #4]
    29ba:	685b      	ldr	r3, [r3, #4]
}
    29bc:	4618      	mov	r0, r3
    29be:	370c      	adds	r7, #12
    29c0:	46bd      	mov	sp, r7
    29c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    29c6:	4770      	bx	lr

000029c8 <xEventGetxTimeStamp>:

struct timeStamp xEventGetxTimeStamp( xEventHandle pxEvent)
{
    29c8:	b490      	push	{r4, r7}
    29ca:	b082      	sub	sp, #8
    29cc:	af00      	add	r7, sp, #0
    29ce:	6078      	str	r0, [r7, #4]
    29d0:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xTimeStamp;
    29d2:	687a      	ldr	r2, [r7, #4]
    29d4:	683b      	ldr	r3, [r7, #0]
    29d6:	4614      	mov	r4, r2
    29d8:	3308      	adds	r3, #8
    29da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    29dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    29e0:	6878      	ldr	r0, [r7, #4]
    29e2:	3708      	adds	r7, #8
    29e4:	46bd      	mov	sp, r7
    29e6:	bc90      	pop	{r4, r7}
    29e8:	4770      	bx	lr
    29ea:	bf00      	nop

000029ec <xEventGetxData>:

struct eventData xEventGetxData( xEventHandle pxEvent)
{
    29ec:	b490      	push	{r4, r7}
    29ee:	b082      	sub	sp, #8
    29f0:	af00      	add	r7, sp, #0
    29f2:	6078      	str	r0, [r7, #4]
    29f4:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xData;
    29f6:	687a      	ldr	r2, [r7, #4]
    29f8:	683b      	ldr	r3, [r7, #0]
    29fa:	4614      	mov	r4, r2
    29fc:	332c      	adds	r3, #44	; 0x2c
    29fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2a00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    2a04:	6878      	ldr	r0, [r7, #4]
    2a06:	3708      	adds	r7, #8
    2a08:	46bd      	mov	sp, r7
    2a0a:	bc90      	pop	{r4, r7}
    2a0c:	4770      	bx	lr
    2a0e:	bf00      	nop

00002a10 <vEventSetxTimeStamp>:

static void vEventSetxTimeStamp( xEventHandle pxNewEvent )
{
    2a10:	b580      	push	{r7, lr}
    2a12:	b086      	sub	sp, #24
    2a14:	af00      	add	r7, sp, #0
    2a16:	6078      	str	r0, [r7, #4]
    eveECB * pxEvent =(eveECB *) pxNewEvent;
    2a18:	687b      	ldr	r3, [r7, #4]
    2a1a:	617b      	str	r3, [r7, #20]
    portTickType xDestxLet = xTaskGetxLet(pxEvent->pxDestination);
    2a1c:	697b      	ldr	r3, [r7, #20]
    2a1e:	685b      	ldr	r3, [r3, #4]
    2a20:	4618      	mov	r0, r3
    2a22:	f002 fe55 	bl	56d0 <xTaskGetxLet>
    2a26:	6138      	str	r0, [r7, #16]
    portTickType xDeadline = pxEvent->xData.xNextPeriod;
    2a28:	697b      	ldr	r3, [r7, #20]
    2a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2a2c:	60fb      	str	r3, [r7, #12]

    /* set the xSlackTime of this event */
    portTickType xCurrentTime = xTaskGetTickCount();
    2a2e:	f002 f9c1 	bl	4db4 <xTaskGetTickCount>
    2a32:	60b8      	str	r0, [r7, #8]
    /* LST is too complicated to be implemented in embedded system where computing resources are precious */
    //pxEvent->xTimeStamp.xSlackTime = xDeadline - ( xCurrentTime + xDestxLet );
    /* EDF scheduling algorithm */
    pxEvent->xTimeStamp.xSlackTime = xDeadline ;
    2a34:	697b      	ldr	r3, [r7, #20]
    2a36:	68fa      	ldr	r2, [r7, #12]
    2a38:	609a      	str	r2, [r3, #8]


    /*set the time of this event to be processed */
    if( pxEvent->xData.IS_LAST_SERVANT == 1 )
    2a3a:	697b      	ldr	r3, [r7, #20]
    2a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2a3e:	2b01      	cmp	r3, #1
    2a40:	d103      	bne.n	2a4a <vEventSetxTimeStamp+0x3a>
    {
        pxEvent->xTimeStamp.xTime = xDeadline;
    2a42:	697b      	ldr	r3, [r7, #20]
    2a44:	68fa      	ldr	r2, [r7, #12]
    2a46:	60da      	str	r2, [r3, #12]
    2a48:	e003      	b.n	2a52 <vEventSetxTimeStamp+0x42>
    }
    else
    {
        pxEvent->xTimeStamp.xTime = pxEvent->xData.xTime ;
    2a4a:	697b      	ldr	r3, [r7, #20]
    2a4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2a4e:	697b      	ldr	r3, [r7, #20]
    2a50:	60da      	str	r2, [r3, #12]
    }


    /*the microstep is not used now*/
    pxEvent->xTimeStamp.xMicroStep = 0;
    2a52:	697b      	ldr	r3, [r7, #20]
    2a54:	2200      	movs	r2, #0
    2a56:	611a      	str	r2, [r3, #16]

    /* set the level of timestamp according to the topology sort result*/
    pxEvent->xTimeStamp.xLevel = xEventSerialNumber;
    2a58:	f240 33c8 	movw	r3, #968	; 0x3c8
    2a5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a60:	681b      	ldr	r3, [r3, #0]
    2a62:	461a      	mov	r2, r3
    2a64:	697b      	ldr	r3, [r7, #20]
    2a66:	615a      	str	r2, [r3, #20]

    xEventSerialNumber++;
    2a68:	f240 33c8 	movw	r3, #968	; 0x3c8
    2a6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a70:	681b      	ldr	r3, [r3, #0]
    2a72:	1c5a      	adds	r2, r3, #1
    2a74:	f240 33c8 	movw	r3, #968	; 0x3c8
    2a78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a7c:	601a      	str	r2, [r3, #0]
}
    2a7e:	3718      	adds	r7, #24
    2a80:	46bd      	mov	sp, r7
    2a82:	bd80      	pop	{r7, pc}

00002a84 <vEventSetxData>:

static void vEventSetxData( xEventHandle pxEvent, struct eventData xData)
{
    2a84:	b084      	sub	sp, #16
    2a86:	b490      	push	{r4, r7}
    2a88:	b082      	sub	sp, #8
    2a8a:	af00      	add	r7, sp, #0
    2a8c:	6078      	str	r0, [r7, #4]
    2a8e:	f107 0014 	add.w	r0, r7, #20
    2a92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ((eveECB *) pxEvent)->xData = xData;
    2a96:	687b      	ldr	r3, [r7, #4]
    2a98:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    2a9c:	f107 0314 	add.w	r3, r7, #20
    2aa0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2aa2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    2aa6:	3708      	adds	r7, #8
    2aa8:	46bd      	mov	sp, r7
    2aaa:	bc90      	pop	{r4, r7}
    2aac:	b004      	add	sp, #16
    2aae:	4770      	bx	lr

00002ab0 <pxGetReadyList>:
* Get the event ready list according to the multicore scheduling algorithm.
*
* @return the address of the event ready list.
* */
static xList * pxGetReadyList( void )
{
    2ab0:	b480      	push	{r7}
    2ab2:	af00      	add	r7, sp, #0
    return &xEventReadyList[0];
    2ab4:	f240 33b4 	movw	r3, #948	; 0x3b4
    2ab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
    2abc:	4618      	mov	r0, r3
    2abe:	46bd      	mov	sp, r7
    2ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ac4:	4770      	bx	lr
    2ac6:	bf00      	nop

00002ac8 <prvEventListGenericInsert>:
}

*/

static void prvEventListGenericInsert( xListItem *pxNewListItem )
{
    2ac8:	b590      	push	{r4, r7, lr}
    2aca:	b091      	sub	sp, #68	; 0x44
    2acc:	af04      	add	r7, sp, #16
    2ace:	6078      	str	r0, [r7, #4]
    volatile xListItem *pxIterator;
    struct timeStamp xTimeStampOfInsertion;
    xList * pxList = &xEventList;
    2ad0:	f240 33a0 	movw	r3, #928	; 0x3a0
    2ad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ad8:	62bb      	str	r3, [r7, #40]	; 0x28

    xTimeStampOfInsertion = xEventGetxTimeStamp(pxNewListItem->pvOwner);
    2ada:	687b      	ldr	r3, [r7, #4]
    2adc:	68db      	ldr	r3, [r3, #12]
    2ade:	f107 0208 	add.w	r2, r7, #8
    2ae2:	4610      	mov	r0, r2
    2ae4:	4619      	mov	r1, r3
    2ae6:	f7ff ff6f 	bl	29c8 <xEventGetxTimeStamp>

    if( xTimeStampOfInsertion.xTime == portMAX_DELAY )
    2aea:	68fb      	ldr	r3, [r7, #12]
    2aec:	f1b3 3fff 	cmp.w	r3, #4294967295
    2af0:	d103      	bne.n	2afa <prvEventListGenericInsert+0x32>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    2af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2af4:	691b      	ldr	r3, [r3, #16]
    2af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    2af8:	e021      	b.n	2b3e <prvEventListGenericInsert+0x76>
    }
    else
    {
        taskENTER_CRITICAL();
    2afa:	f002 fe8f 	bl	581c <vPortEnterCritical>
        // There must already be a End Flag Event with max timeStamp in xEventList.
        // The End Flag Event can be the last Event to be processed, and new events
        // are inserted before it in xEventList.
        // The End Flag Event has been inserted when xEventList is initialised.
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); xCompareFunction( xEventGetxTimeStamp( pxIterator->pxNext->pvOwner ), xTimeStampOfInsertion ); pxIterator = pxIterator->pxNext ) 
    2afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2b00:	3308      	adds	r3, #8
    2b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    2b04:	e002      	b.n	2b0c <prvEventListGenericInsert+0x44>
    2b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b08:	685b      	ldr	r3, [r3, #4]
    2b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    2b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b0e:	685b      	ldr	r3, [r3, #4]
    2b10:	68db      	ldr	r3, [r3, #12]
    2b12:	f107 0218 	add.w	r2, r7, #24
    2b16:	4610      	mov	r0, r2
    2b18:	4619      	mov	r1, r3
    2b1a:	f7ff ff55 	bl	29c8 <xEventGetxTimeStamp>
    2b1e:	466c      	mov	r4, sp
    2b20:	f107 0308 	add.w	r3, r7, #8
    2b24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2b26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2b2a:	f107 0318 	add.w	r3, r7, #24
    2b2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2b30:	f7ff ff0c 	bl	294c <xCompareFunction>
    2b34:	4603      	mov	r3, r0
    2b36:	2b00      	cmp	r3, #0
    2b38:	d1e5      	bne.n	2b06 <prvEventListGenericInsert+0x3e>
        {
        }
        taskEXIT_CRITICAL();
    2b3a:	f002 fe85 	bl	5848 <vPortExitCritical>
    }

    // insert the new event before a bigger one.
    pxNewListItem->pxNext = pxIterator->pxNext;
    2b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b40:	685a      	ldr	r2, [r3, #4]
    2b42:	687b      	ldr	r3, [r7, #4]
    2b44:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2b46:	687b      	ldr	r3, [r7, #4]
    2b48:	685b      	ldr	r3, [r3, #4]
    2b4a:	687a      	ldr	r2, [r7, #4]
    2b4c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
    2b4e:	687b      	ldr	r3, [r7, #4]
    2b50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2b52:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2b56:	687a      	ldr	r2, [r7, #4]
    2b58:	605a      	str	r2, [r3, #4]

    pxNewListItem->pvContainer = ( void * ) pxList;
    2b5a:	687b      	ldr	r3, [r7, #4]
    2b5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2b5e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
    2b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2b62:	681b      	ldr	r3, [r3, #0]
    2b64:	1c5a      	adds	r2, r3, #1
    2b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2b68:	601a      	str	r2, [r3, #0]
}
    2b6a:	3734      	adds	r7, #52	; 0x34
    2b6c:	46bd      	mov	sp, r7
    2b6e:	bd90      	pop	{r4, r7, pc}

00002b70 <vListIntialiseEventItem>:



static void vListIntialiseEventItem( xEventHandle pvOwner, xListItem * pxNewEventItem)
{
    2b70:	b480      	push	{r7}
    2b72:	b083      	sub	sp, #12
    2b74:	af00      	add	r7, sp, #0
    2b76:	6078      	str	r0, [r7, #4]
    2b78:	6039      	str	r1, [r7, #0]
    /* set the pvOwner of the EventItem as a event*/
    listSET_LIST_ITEM_OWNER( pxNewEventItem, pvOwner );
    2b7a:	683b      	ldr	r3, [r7, #0]
    2b7c:	687a      	ldr	r2, [r7, #4]
    2b7e:	60da      	str	r2, [r3, #12]
    //pxNewEventItem->pvContainer = (void *) &xEventList;
}
    2b80:	370c      	adds	r7, #12
    2b82:	46bd      	mov	sp, r7
    2b84:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b88:	4770      	bx	lr
    2b8a:	bf00      	nop

00002b8c <vEventGenericCreate>:


void vEventGenericCreate( xTaskHandle pxDestination, struct eventData pdData)
{
    2b8c:	b084      	sub	sp, #16
    2b8e:	b580      	push	{r7, lr}
    2b90:	b088      	sub	sp, #32
    2b92:	af02      	add	r7, sp, #8
    2b94:	6078      	str	r0, [r7, #4]
    2b96:	f107 0024 	add.w	r0, r7, #36	; 0x24
    2b9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    eveECB * pxNewEvent = NULL;
    2b9e:	2300      	movs	r3, #0
    2ba0:	617b      	str	r3, [r7, #20]

    /* using the pxCurrentTCB, current task should not be changed */
    taskENTER_CRITICAL();
    2ba2:	f002 fe3b 	bl	581c <vPortEnterCritical>

    if ( IS_FIRST_EVENT == 1 )
    2ba6:	f240 0328 	movw	r3, #40	; 0x28
    2baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bae:	681b      	ldr	r3, [r3, #0]
    2bb0:	2b01      	cmp	r3, #1
    2bb2:	d12d      	bne.n	2c10 <vEventGenericCreate+0x84>
    {
        IS_FIRST_EVENT = 0;
    2bb4:	f240 0328 	movw	r3, #40	; 0x28
    2bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bbc:	2200      	movs	r2, #0
    2bbe:	601a      	str	r2, [r3, #0]
        prvInitialiseEventLists();
    2bc0:	f7ff fea2 	bl	2908 <prvInitialiseEventLists>

        // Creating an End FLag Event and insert into the end of xEventList.
        eveECB * pxEndFlagEvent = (eveECB *) pvPortMalloc( sizeof( eveECB ) );
    2bc4:	203c      	movs	r0, #60	; 0x3c
    2bc6:	f002 fea3 	bl	5910 <pvPortMalloc>
    2bca:	6138      	str	r0, [r7, #16]
        if( pxEndFlagEvent != NULL )
    2bcc:	693b      	ldr	r3, [r7, #16]
    2bce:	2b00      	cmp	r3, #0
    2bd0:	d01e      	beq.n	2c10 <vEventGenericCreate+0x84>
        {
           // pxEndFlagEvent->pxSource = pxEndFlagEvent->pxDestination = NULL;
            // there may be some problem here because of this assignment way
            pxEndFlagEvent->xTimeStamp.xSlackTime = portMAX_DELAY;
    2bd2:	693b      	ldr	r3, [r7, #16]
    2bd4:	f04f 32ff 	mov.w	r2, #4294967295
    2bd8:	609a      	str	r2, [r3, #8]
            pxEndFlagEvent->xTimeStamp.xTime = portMAX_DELAY;
    2bda:	693b      	ldr	r3, [r7, #16]
    2bdc:	f04f 32ff 	mov.w	r2, #4294967295
    2be0:	60da      	str	r2, [r3, #12]
            pxEndFlagEvent->xTimeStamp.xMicroStep = portMAX_DELAY;
    2be2:	693b      	ldr	r3, [r7, #16]
    2be4:	f04f 32ff 	mov.w	r2, #4294967295
    2be8:	611a      	str	r2, [r3, #16]
            pxEndFlagEvent->xTimeStamp.xLevel = portMAX_DELAY;
    2bea:	693b      	ldr	r3, [r7, #16]
    2bec:	f04f 32ff 	mov.w	r2, #4294967295
    2bf0:	615a      	str	r2, [r3, #20]
            vListIntialiseEventItem( pxEndFlagEvent, (xListItem *) & pxEndFlagEvent->xEventListItem );
    2bf2:	693b      	ldr	r3, [r7, #16]
    2bf4:	3318      	adds	r3, #24
    2bf6:	6938      	ldr	r0, [r7, #16]
    2bf8:	4619      	mov	r1, r3
    2bfa:	f7ff ffb9 	bl	2b70 <vListIntialiseEventItem>
            vListInsertEnd(&xEventList, &pxEndFlagEvent->xEventListItem); 
    2bfe:	693b      	ldr	r3, [r7, #16]
    2c00:	3318      	adds	r3, #24
    2c02:	f240 30a0 	movw	r0, #928	; 0x3a0
    2c06:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2c0a:	4619      	mov	r1, r3
    2c0c:	f000 fff4 	bl	3bf8 <vListInsertEnd>
        }
    }

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    2c10:	f002 fc9c 	bl	554c <xTaskGetCurrentTaskHandle>
    2c14:	60f8      	str	r0, [r7, #12]
    pxNewEvent = (eveECB *)pvPortMalloc( sizeof( eveECB ));
    2c16:	203c      	movs	r0, #60	; 0x3c
    2c18:	f002 fe7a 	bl	5910 <pvPortMalloc>
    2c1c:	6178      	str	r0, [r7, #20]
    if( pxNewEvent == NULL )
    2c1e:	697b      	ldr	r3, [r7, #20]
    2c20:	2b00      	cmp	r3, #0
    2c22:	d105      	bne.n	2c30 <vEventGenericCreate+0xa4>
    {
        vPrintString("malloc for event stack failed\n\r");
    2c24:	f648 00a8 	movw	r0, #34984	; 0x88a8
    2c28:	f2c0 0001 	movt	r0, #1
    2c2c:	f014 f982 	bl	16f34 <vPrintString>
    }
    if ( pxNewEvent != NULL )
    2c30:	697b      	ldr	r3, [r7, #20]
    2c32:	2b00      	cmp	r3, #0
    2c34:	d01b      	beq.n	2c6e <vEventGenericCreate+0xe2>
    {
        pxNewEvent->pxSource = pxCurrentTCBLocal;
    2c36:	697b      	ldr	r3, [r7, #20]
    2c38:	68fa      	ldr	r2, [r7, #12]
    2c3a:	601a      	str	r2, [r3, #0]
        pxNewEvent->pxDestination = pxDestination;
    2c3c:	697b      	ldr	r3, [r7, #20]
    2c3e:	687a      	ldr	r2, [r7, #4]
    2c40:	605a      	str	r2, [r3, #4]

        /* initialise the time stamp of an event item according to the sort algorithm.*/
        vEventSetxData( pxNewEvent, pdData );
    2c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2c44:	9300      	str	r3, [sp, #0]
    2c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
    2c4a:	cb0e      	ldmia	r3, {r1, r2, r3}
    2c4c:	6978      	ldr	r0, [r7, #20]
    2c4e:	f7ff ff19 	bl	2a84 <vEventSetxData>

        vEventSetxTimeStamp( pxNewEvent );
    2c52:	6978      	ldr	r0, [r7, #20]
    2c54:	f7ff fedc 	bl	2a10 <vEventSetxTimeStamp>
        //vPrintString("event creating\n\r");

        vListIntialiseEventItem( pxNewEvent, (xListItem *) &pxNewEvent->xEventListItem );
    2c58:	697b      	ldr	r3, [r7, #20]
    2c5a:	3318      	adds	r3, #24
    2c5c:	6978      	ldr	r0, [r7, #20]
    2c5e:	4619      	mov	r1, r3
    2c60:	f7ff ff86 	bl	2b70 <vListIntialiseEventItem>

        /*how to call this funciton: vEventListInsert( newListItem ). This function add the new item into the xEventList as default*/
        prvEventListGenericInsert( (xListItem *) &(pxNewEvent->xEventListItem));
    2c64:	697b      	ldr	r3, [r7, #20]
    2c66:	3318      	adds	r3, #24
    2c68:	4618      	mov	r0, r3
    2c6a:	f7ff ff2d 	bl	2ac8 <prvEventListGenericInsert>
    
    }
    taskEXIT_CRITICAL();
    2c6e:	f002 fdeb 	bl	5848 <vPortExitCritical>

}
    2c72:	3718      	adds	r7, #24
    2c74:	46bd      	mov	sp, r7
    2c76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    2c7a:	b004      	add	sp, #16
    2c7c:	4770      	bx	lr
    2c7e:	bf00      	nop

00002c80 <xEventListGenericTransit>:


/* An API to transfer the Event Item from xEventList to one of the xEventReadyList*/
portBASE_TYPE xEventListGenericTransit( xListItem ** pxEventListItem, xList ** pxCurrentReadyList)
{
    2c80:	b580      	push	{r7, lr}
    2c82:	b088      	sub	sp, #32
    2c84:	af00      	add	r7, sp, #0
    2c86:	6078      	str	r0, [r7, #4]
    2c88:	6039      	str	r1, [r7, #0]
    //if( listLIST_IS_EMPTY(&xEventList) )
    // if there is only End Flag Event in xEventList, then return NULL.

    if( listCURRENT_LIST_LENGTH(&xEventList) == 1 )
    2c8a:	f240 33a0 	movw	r3, #928	; 0x3a0
    2c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c92:	681b      	ldr	r3, [r3, #0]
    2c94:	2b01      	cmp	r3, #1
    2c96:	d108      	bne.n	2caa <xEventListGenericTransit+0x2a>
    {
        *pxEventListItem  = NULL;
    2c98:	687b      	ldr	r3, [r7, #4]
    2c9a:	2200      	movs	r2, #0
    2c9c:	601a      	str	r2, [r3, #0]
        *pxCurrentReadyList = NULL;
    2c9e:	683b      	ldr	r3, [r7, #0]
    2ca0:	2200      	movs	r2, #0
    2ca2:	601a      	str	r2, [r3, #0]
        return -1;
    2ca4:	f04f 33ff 	mov.w	r3, #4294967295
    2ca8:	e035      	b.n	2d16 <xEventListGenericTransit+0x96>
    }
        
    // get the first event item in the xEventList.  
    *pxEventListItem = (xListItem *)xEventList.xListEnd.pxNext;
    2caa:	f240 33a0 	movw	r3, #928	; 0x3a0
    2cae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2cb2:	68da      	ldr	r2, [r3, #12]
    2cb4:	687b      	ldr	r3, [r7, #4]
    2cb6:	601a      	str	r2, [r3, #0]
    // every cpu has a event ready list. the transit function is called only when cpu turn into idle state.
    *pxCurrentReadyList = pxGetReadyList();
    2cb8:	f7ff fefa 	bl	2ab0 <pxGetReadyList>
    2cbc:	4602      	mov	r2, r0
    2cbe:	683b      	ldr	r3, [r7, #0]
    2cc0:	601a      	str	r2, [r3, #0]

    struct timeStamp xTimeStamp = xEventGetxTimeStamp((xEventHandle) (*pxEventListItem)->pvOwner);
    2cc2:	687b      	ldr	r3, [r7, #4]
    2cc4:	681b      	ldr	r3, [r3, #0]
    2cc6:	68db      	ldr	r3, [r3, #12]
    2cc8:	f107 020c 	add.w	r2, r7, #12
    2ccc:	4610      	mov	r0, r2
    2cce:	4619      	mov	r1, r3
    2cd0:	f7ff fe7a 	bl	29c8 <xEventGetxTimeStamp>
    portTickType xCurrentTime;
    xCurrentTime = xTaskGetTickCount();
    2cd4:	f002 f86e 	bl	4db4 <xTaskGetTickCount>
    2cd8:	61f8      	str	r0, [r7, #28]


    if( xTimeStamp.xTime > xCurrentTime)
    2cda:	693a      	ldr	r2, [r7, #16]
    2cdc:	69fb      	ldr	r3, [r7, #28]
    2cde:	429a      	cmp	r2, r3
    2ce0:	d907      	bls.n	2cf2 <xEventListGenericTransit+0x72>
    {
        // not time yet
        *pxEventListItem  = NULL;
    2ce2:	687b      	ldr	r3, [r7, #4]
    2ce4:	2200      	movs	r2, #0
    2ce6:	601a      	str	r2, [r3, #0]
        *pxCurrentReadyList = NULL;
    2ce8:	683b      	ldr	r3, [r7, #0]
    2cea:	2200      	movs	r2, #0
    2cec:	601a      	str	r2, [r3, #0]
        return 0;
    2cee:	2300      	movs	r3, #0
    2cf0:	e011      	b.n	2d16 <xEventListGenericTransit+0x96>
    }
    else
    {
        taskENTER_CRITICAL();
    2cf2:	f002 fd93 	bl	581c <vPortEnterCritical>
        /* remove pxListItem from xEventList */ 
        vListRemove(*pxEventListItem);
    2cf6:	687b      	ldr	r3, [r7, #4]
    2cf8:	681b      	ldr	r3, [r3, #0]
    2cfa:	4618      	mov	r0, r3
    2cfc:	f000 ffdc 	bl	3cb8 <vListRemove>
        /* insert the pxListItem into the specified pxList */
        vListInsertEnd(*pxCurrentReadyList, *pxEventListItem);
    2d00:	683b      	ldr	r3, [r7, #0]
    2d02:	681a      	ldr	r2, [r3, #0]
    2d04:	687b      	ldr	r3, [r7, #4]
    2d06:	681b      	ldr	r3, [r3, #0]
    2d08:	4610      	mov	r0, r2
    2d0a:	4619      	mov	r1, r3
    2d0c:	f000 ff74 	bl	3bf8 <vListInsertEnd>
        taskEXIT_CRITICAL();
    2d10:	f002 fd9a 	bl	5848 <vPortExitCritical>
        return 1;
    2d14:	2301      	movs	r3, #1
    }
}
    2d16:	4618      	mov	r0, r3
    2d18:	3720      	adds	r7, #32
    2d1a:	46bd      	mov	sp, r7
    2d1c:	bd80      	pop	{r7, pc}
    2d1e:	bf00      	nop

00002d20 <vEventGenericReceive>:

void vEventGenericReceive( xEventHandle * pxEvent, xTaskHandle pxSource, xList * pxList )
{
    2d20:	b580      	push	{r7, lr}
    2d22:	b088      	sub	sp, #32
    2d24:	af00      	add	r7, sp, #0
    2d26:	60f8      	str	r0, [r7, #12]
    2d28:	60b9      	str	r1, [r7, #8]
    2d2a:	607a      	str	r2, [r7, #4]
    xList * const pxConstList = pxList; 
    2d2c:	687b      	ldr	r3, [r7, #4]
    2d2e:	61bb      	str	r3, [r7, #24]
    {
        //successful.
        //helloworld();
    }

    if( listLIST_IS_EMPTY( pxList ) )
    2d30:	687b      	ldr	r3, [r7, #4]
    2d32:	681b      	ldr	r3, [r3, #0]
    2d34:	2b00      	cmp	r3, #0
    2d36:	d103      	bne.n	2d40 <vEventGenericReceive+0x20>
    {
        *pxEvent = NULL;
    2d38:	68fb      	ldr	r3, [r7, #12]
    2d3a:	2200      	movs	r2, #0
    2d3c:	601a      	str	r2, [r3, #0]
        return;
    2d3e:	e04d      	b.n	2ddc <vEventGenericReceive+0xbc>
    }

    volatile xListItem * pxFlag = pxConstList->xListEnd.pxNext;
    2d40:	69bb      	ldr	r3, [r7, #24]
    2d42:	68db      	ldr	r3, [r3, #12]
    2d44:	61fb      	str	r3, [r7, #28]


    taskENTER_CRITICAL();
    2d46:	f002 fd69 	bl	581c <vPortEnterCritical>

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    2d4a:	f002 fbff 	bl	554c <xTaskGetCurrentTaskHandle>
    2d4e:	6178      	str	r0, [r7, #20]

    /* look up in the specified xEventReadyList. */
    for(; pxFlag != (xListItem *) ( pxConstList->xListEnd.pxPrevious); pxFlag = pxFlag->pxNext)
    2d50:	e01e      	b.n	2d90 <vEventGenericReceive+0x70>
    {
        if( xEventGetpxSource((xEventHandle) pxFlag->pvOwner) == pxSource && xEventGetpxDestination((xEventHandle) pxFlag->pvOwner) == pxCurrentTCBLocal )
    2d52:	69fb      	ldr	r3, [r7, #28]
    2d54:	68db      	ldr	r3, [r3, #12]
    2d56:	4618      	mov	r0, r3
    2d58:	f7ff fe1e 	bl	2998 <xEventGetpxSource>
    2d5c:	4602      	mov	r2, r0
    2d5e:	68bb      	ldr	r3, [r7, #8]
    2d60:	429a      	cmp	r2, r3
    2d62:	d112      	bne.n	2d8a <vEventGenericReceive+0x6a>
    2d64:	69fb      	ldr	r3, [r7, #28]
    2d66:	68db      	ldr	r3, [r3, #12]
    2d68:	4618      	mov	r0, r3
    2d6a:	f7ff fe21 	bl	29b0 <xEventGetpxDestination>
    2d6e:	4602      	mov	r2, r0
    2d70:	697b      	ldr	r3, [r7, #20]
    2d72:	429a      	cmp	r2, r3
    2d74:	d109      	bne.n	2d8a <vEventGenericReceive+0x6a>
        {
            *pxEvent = pxFlag->pvOwner;
    2d76:	69fb      	ldr	r3, [r7, #28]
    2d78:	68da      	ldr	r2, [r3, #12]
    2d7a:	68fb      	ldr	r3, [r7, #12]
    2d7c:	601a      	str	r2, [r3, #0]
            vListRemove((xListItem *)pxFlag);
    2d7e:	69f8      	ldr	r0, [r7, #28]
    2d80:	f000 ff9a 	bl	3cb8 <vListRemove>
            taskEXIT_CRITICAL();
    2d84:	f002 fd60 	bl	5848 <vPortExitCritical>
            return;
    2d88:	e028      	b.n	2ddc <vEventGenericReceive+0xbc>
    taskENTER_CRITICAL();

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();

    /* look up in the specified xEventReadyList. */
    for(; pxFlag != (xListItem *) ( pxConstList->xListEnd.pxPrevious); pxFlag = pxFlag->pxNext)
    2d8a:	69fb      	ldr	r3, [r7, #28]
    2d8c:	685b      	ldr	r3, [r3, #4]
    2d8e:	61fb      	str	r3, [r7, #28]
    2d90:	69bb      	ldr	r3, [r7, #24]
    2d92:	691a      	ldr	r2, [r3, #16]
    2d94:	69fb      	ldr	r3, [r7, #28]
    2d96:	429a      	cmp	r2, r3
    2d98:	d1db      	bne.n	2d52 <vEventGenericReceive+0x32>
            return;
        }
    }

    /* we can't forget the last one item of the list. */
    if( xEventGetpxSource((xEventHandle) pxFlag->pvOwner) == pxSource && xEventGetpxDestination((xEventHandle) pxFlag->pvOwner) == pxCurrentTCBLocal )
    2d9a:	69fb      	ldr	r3, [r7, #28]
    2d9c:	68db      	ldr	r3, [r3, #12]
    2d9e:	4618      	mov	r0, r3
    2da0:	f7ff fdfa 	bl	2998 <xEventGetpxSource>
    2da4:	4602      	mov	r2, r0
    2da6:	68bb      	ldr	r3, [r7, #8]
    2da8:	429a      	cmp	r2, r3
    2daa:	d112      	bne.n	2dd2 <vEventGenericReceive+0xb2>
    2dac:	69fb      	ldr	r3, [r7, #28]
    2dae:	68db      	ldr	r3, [r3, #12]
    2db0:	4618      	mov	r0, r3
    2db2:	f7ff fdfd 	bl	29b0 <xEventGetpxDestination>
    2db6:	4602      	mov	r2, r0
    2db8:	697b      	ldr	r3, [r7, #20]
    2dba:	429a      	cmp	r2, r3
    2dbc:	d109      	bne.n	2dd2 <vEventGenericReceive+0xb2>
    {
        *pxEvent = pxFlag->pvOwner;
    2dbe:	69fb      	ldr	r3, [r7, #28]
    2dc0:	68da      	ldr	r2, [r3, #12]
    2dc2:	68fb      	ldr	r3, [r7, #12]
    2dc4:	601a      	str	r2, [r3, #0]
        vListRemove((xListItem *)pxFlag);
    2dc6:	69f8      	ldr	r0, [r7, #28]
    2dc8:	f000 ff76 	bl	3cb8 <vListRemove>
        taskEXIT_CRITICAL();
    2dcc:	f002 fd3c 	bl	5848 <vPortExitCritical>
        return;
    2dd0:	e004      	b.n	2ddc <vEventGenericReceive+0xbc>
    }
    else
    {
        // cannot find the specified event.
        *pxEvent = NULL;
    2dd2:	68fb      	ldr	r3, [r7, #12]
    2dd4:	2200      	movs	r2, #0
    2dd6:	601a      	str	r2, [r3, #0]
    }

    taskEXIT_CRITICAL();
    2dd8:	f002 fd36 	bl	5848 <vPortExitCritical>
}
    2ddc:	3720      	adds	r7, #32
    2dde:	46bd      	mov	sp, r7
    2de0:	bd80      	pop	{r7, pc}
    2de2:	bf00      	nop

00002de4 <vEventGenericDelete>:

void vEventGenericDelete( xEventHandle xEvent)
{
    2de4:	b580      	push	{r7, lr}
    2de6:	b082      	sub	sp, #8
    2de8:	af00      	add	r7, sp, #0
    2dea:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
    2dec:	f002 fd16 	bl	581c <vPortEnterCritical>

    vPortFree( xEvent );
    2df0:	6878      	ldr	r0, [r7, #4]
    2df2:	f002 fe51 	bl	5a98 <vPortFree>

    taskEXIT_CRITICAL();
    2df6:	f002 fd27 	bl	5848 <vPortExitCritical>
}
    2dfa:	3708      	adds	r7, #8
    2dfc:	46bd      	mov	sp, r7
    2dfe:	bd80      	pop	{r7, pc}

00002e00 <vSemaphoreInitialise>:
}
*/

/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    2e00:	b580      	push	{r7, lr}
    2e02:	b082      	sub	sp, #8
    2e04:	af00      	add	r7, sp, #0
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    2e06:	2300      	movs	r3, #0
    2e08:	607b      	str	r3, [r7, #4]
    2e0a:	e033      	b.n	2e74 <vSemaphoreInitialise+0x74>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
    2e0c:	2001      	movs	r0, #1
    2e0e:	2100      	movs	r1, #0
    2e10:	2203      	movs	r2, #3
    2e12:	f000 ffc7 	bl	3da4 <xQueueGenericCreate>
    2e16:	4601      	mov	r1, r0
    2e18:	f240 7398 	movw	r3, #1944	; 0x798
    2e1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e20:	687a      	ldr	r2, [r7, #4]
    2e22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    2e26:	f240 7398 	movw	r3, #1944	; 0x798
    2e2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e2e:	687a      	ldr	r2, [r7, #4]
    2e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2e34:	2b00      	cmp	r3, #0
    2e36:	d00c      	beq.n	2e52 <vSemaphoreInitialise+0x52>
    2e38:	f240 7398 	movw	r3, #1944	; 0x798
    2e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e40:	687a      	ldr	r2, [r7, #4]
    2e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2e46:	4618      	mov	r0, r3
    2e48:	2100      	movs	r1, #0
    2e4a:	2200      	movs	r2, #0
    2e4c:	2300      	movs	r3, #0
    2e4e:	f001 f837 	bl	3ec0 <xQueueGenericSend>
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    2e52:	f240 7398 	movw	r3, #1944	; 0x798
    2e56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e5a:	687a      	ldr	r2, [r7, #4]
    2e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2e60:	4618      	mov	r0, r3
    2e62:	2100      	movs	r1, #0
    2e64:	f04f 32ff 	mov.w	r2, #4294967295
    2e68:	2300      	movs	r3, #0
    2e6a:	f001 f8ef 	bl	404c <xQueueGenericReceive>
/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    2e6e:	687b      	ldr	r3, [r7, #4]
    2e70:	3301      	adds	r3, #1
    2e72:	607b      	str	r3, [r7, #4]
    2e74:	687b      	ldr	r3, [r7, #4]
    2e76:	2b15      	cmp	r3, #21
    2e78:	ddc8      	ble.n	2e0c <vSemaphoreInitialise+0xc>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    }
}
    2e7a:	3708      	adds	r7, #8
    2e7c:	46bd      	mov	sp, r7
    2e7e:	bd80      	pop	{r7, pc}

00002e80 <vParameterInitialise>:
/*
 * Set all the parameters of S-Servants.
 *
 * */
void vParameterInitialise()
{
    2e80:	b480      	push	{r7}
    2e82:	b085      	sub	sp, #20
    2e84:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    2e86:	2300      	movs	r3, #0
    2e88:	60fb      	str	r3, [r7, #12]
    2e8a:	e073      	b.n	2f74 <vParameterInitialise+0xf4>
    {
        pvParameters[i].xMyFlag = i;
    2e8c:	f240 33d0 	movw	r3, #976	; 0x3d0
    2e90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e94:	68fa      	ldr	r2, [r7, #12]
    2e96:	212c      	movs	r1, #44	; 0x2c
    2e98:	fb01 f202 	mul.w	r2, r1, r2
    2e9c:	4413      	add	r3, r2
    2e9e:	68fa      	ldr	r2, [r7, #12]
    2ea0:	601a      	str	r2, [r3, #0]
        pvParameters[i].xNumOfIn = 0;
    2ea2:	f240 33d0 	movw	r3, #976	; 0x3d0
    2ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2eaa:	68fa      	ldr	r2, [r7, #12]
    2eac:	212c      	movs	r1, #44	; 0x2c
    2eae:	fb01 f202 	mul.w	r2, r1, r2
    2eb2:	4413      	add	r3, r2
    2eb4:	3304      	adds	r3, #4
    2eb6:	2200      	movs	r2, #0
    2eb8:	601a      	str	r2, [r3, #0]
        pvParameters[i].xNumOfOut = 0;
    2eba:	f240 33d0 	movw	r3, #976	; 0x3d0
    2ebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ec2:	68fa      	ldr	r2, [r7, #12]
    2ec4:	212c      	movs	r1, #44	; 0x2c
    2ec6:	fb01 f202 	mul.w	r2, r1, r2
    2eca:	4413      	add	r3, r2
    2ecc:	3308      	adds	r3, #8
    2ece:	2200      	movs	r2, #0
    2ed0:	601a      	str	r2, [r3, #0]
        pvParameters[i].xLet = xLetOfServant[i]/portTICK_RATE_MS;
    2ed2:	f240 0360 	movw	r3, #96	; 0x60
    2ed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2eda:	68fa      	ldr	r2, [r7, #12]
    2edc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2ee0:	f240 33d0 	movw	r3, #976	; 0x3d0
    2ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ee8:	68f9      	ldr	r1, [r7, #12]
    2eea:	202c      	movs	r0, #44	; 0x2c
    2eec:	fb00 f101 	mul.w	r1, r0, r1
    2ef0:	440b      	add	r3, r1
    2ef2:	331c      	adds	r3, #28
    2ef4:	601a      	str	r2, [r3, #0]
        pvParameters[i].xFp = xServantTable[i];
    2ef6:	f240 231c 	movw	r3, #540	; 0x21c
    2efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2efe:	68fa      	ldr	r2, [r7, #12]
    2f00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2f04:	f240 33d0 	movw	r3, #976	; 0x3d0
    2f08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f0c:	68f9      	ldr	r1, [r7, #12]
    2f0e:	202c      	movs	r0, #44	; 0x2c
    2f10:	fb00 f101 	mul.w	r1, r0, r1
    2f14:	440b      	add	r3, r1
    2f16:	3320      	adds	r3, #32
    2f18:	601a      	str	r2, [r3, #0]
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
    2f1a:	f240 03b8 	movw	r3, #184	; 0xb8
    2f1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f22:	68fa      	ldr	r2, [r7, #12]
    2f24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2f28:	f240 33d0 	movw	r3, #976	; 0x3d0
    2f2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f30:	68f9      	ldr	r1, [r7, #12]
    2f32:	202c      	movs	r0, #44	; 0x2c
    2f34:	fb00 f101 	mul.w	r1, r0, r1
    2f38:	440b      	add	r3, r1
    2f3a:	3328      	adds	r3, #40	; 0x28
    2f3c:	601a      	str	r2, [r3, #0]
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    2f3e:	f240 03b8 	movw	r3, #184	; 0xb8
    2f42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f46:	68fa      	ldr	r2, [r7, #12]
    2f48:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2f4c:	f240 032c 	movw	r3, #44	; 0x2c
    2f50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f54:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2f58:	f240 33d0 	movw	r3, #976	; 0x3d0
    2f5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f60:	68f9      	ldr	r1, [r7, #12]
    2f62:	202c      	movs	r0, #44	; 0x2c
    2f64:	fb00 f101 	mul.w	r1, r0, r1
    2f68:	440b      	add	r3, r1
    2f6a:	3324      	adds	r3, #36	; 0x24
    2f6c:	601a      	str	r2, [r3, #0]
{
    portBASE_TYPE i;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    2f6e:	68fb      	ldr	r3, [r7, #12]
    2f70:	3301      	adds	r3, #1
    2f72:	60fb      	str	r3, [r7, #12]
    2f74:	68fb      	ldr	r3, [r7, #12]
    2f76:	2b15      	cmp	r3, #21
    2f78:	dd88      	ble.n	2e8c <vParameterInitialise+0xc>
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    2f7a:	2300      	movs	r3, #0
    2f7c:	60fb      	str	r3, [r7, #12]
    2f7e:	e080      	b.n	3082 <vParameterInitialise+0x202>
    {
        xSource = xRelations.xRelation[i].xInFlag;
    2f80:	f240 1210 	movw	r2, #272	; 0x110
    2f84:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f88:	68f9      	ldr	r1, [r7, #12]
    2f8a:	460b      	mov	r3, r1
    2f8c:	005b      	lsls	r3, r3, #1
    2f8e:	440b      	add	r3, r1
    2f90:	009b      	lsls	r3, r3, #2
    2f92:	4413      	add	r3, r2
    2f94:	3304      	adds	r3, #4
    2f96:	681b      	ldr	r3, [r3, #0]
    2f98:	60bb      	str	r3, [r7, #8]
        xDest   = xRelations.xRelation[i].xOutFlag;
    2f9a:	f240 1210 	movw	r2, #272	; 0x110
    2f9e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2fa2:	68f9      	ldr	r1, [r7, #12]
    2fa4:	460b      	mov	r3, r1
    2fa6:	005b      	lsls	r3, r3, #1
    2fa8:	440b      	add	r3, r1
    2faa:	009b      	lsls	r3, r3, #2
    2fac:	4413      	add	r3, r2
    2fae:	3308      	adds	r3, #8
    2fb0:	681b      	ldr	r3, [r3, #0]
    2fb2:	607b      	str	r3, [r7, #4]

        pvParameters[xSource].xOutFlag[pvParameters[xSource].xNumOfOut] = xDest;
    2fb4:	f240 33d0 	movw	r3, #976	; 0x3d0
    2fb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fbc:	68ba      	ldr	r2, [r7, #8]
    2fbe:	212c      	movs	r1, #44	; 0x2c
    2fc0:	fb01 f202 	mul.w	r2, r1, r2
    2fc4:	4413      	add	r3, r2
    2fc6:	3308      	adds	r3, #8
    2fc8:	6818      	ldr	r0, [r3, #0]
    2fca:	f240 32d0 	movw	r2, #976	; 0x3d0
    2fce:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2fd2:	68b9      	ldr	r1, [r7, #8]
    2fd4:	460b      	mov	r3, r1
    2fd6:	009b      	lsls	r3, r3, #2
    2fd8:	440b      	add	r3, r1
    2fda:	005b      	lsls	r3, r3, #1
    2fdc:	440b      	add	r3, r1
    2fde:	4403      	add	r3, r0
    2fe0:	3304      	adds	r3, #4
    2fe2:	009b      	lsls	r3, r3, #2
    2fe4:	4413      	add	r3, r2
    2fe6:	687a      	ldr	r2, [r7, #4]
    2fe8:	605a      	str	r2, [r3, #4]
        pvParameters[xSource].xNumOfOut ++;
    2fea:	f240 33d0 	movw	r3, #976	; 0x3d0
    2fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ff2:	68ba      	ldr	r2, [r7, #8]
    2ff4:	212c      	movs	r1, #44	; 0x2c
    2ff6:	fb01 f202 	mul.w	r2, r1, r2
    2ffa:	4413      	add	r3, r2
    2ffc:	3308      	adds	r3, #8
    2ffe:	681b      	ldr	r3, [r3, #0]
    3000:	1c5a      	adds	r2, r3, #1
    3002:	f240 33d0 	movw	r3, #976	; 0x3d0
    3006:	f2c2 0300 	movt	r3, #8192	; 0x2000
    300a:	68b9      	ldr	r1, [r7, #8]
    300c:	202c      	movs	r0, #44	; 0x2c
    300e:	fb00 f101 	mul.w	r1, r0, r1
    3012:	440b      	add	r3, r1
    3014:	3308      	adds	r3, #8
    3016:	601a      	str	r2, [r3, #0]

        pvParameters[xDest].xInFlag[pvParameters[xDest].xNumOfIn] = xSource;
    3018:	f240 33d0 	movw	r3, #976	; 0x3d0
    301c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3020:	687a      	ldr	r2, [r7, #4]
    3022:	212c      	movs	r1, #44	; 0x2c
    3024:	fb01 f202 	mul.w	r2, r1, r2
    3028:	4413      	add	r3, r2
    302a:	3304      	adds	r3, #4
    302c:	6818      	ldr	r0, [r3, #0]
    302e:	f240 32d0 	movw	r2, #976	; 0x3d0
    3032:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3036:	6879      	ldr	r1, [r7, #4]
    3038:	460b      	mov	r3, r1
    303a:	009b      	lsls	r3, r3, #2
    303c:	440b      	add	r3, r1
    303e:	005b      	lsls	r3, r3, #1
    3040:	440b      	add	r3, r1
    3042:	4403      	add	r3, r0
    3044:	3302      	adds	r3, #2
    3046:	009b      	lsls	r3, r3, #2
    3048:	4413      	add	r3, r2
    304a:	68ba      	ldr	r2, [r7, #8]
    304c:	605a      	str	r2, [r3, #4]
        pvParameters[xDest].xNumOfIn ++;
    304e:	f240 33d0 	movw	r3, #976	; 0x3d0
    3052:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3056:	687a      	ldr	r2, [r7, #4]
    3058:	212c      	movs	r1, #44	; 0x2c
    305a:	fb01 f202 	mul.w	r2, r1, r2
    305e:	4413      	add	r3, r2
    3060:	3304      	adds	r3, #4
    3062:	681b      	ldr	r3, [r3, #0]
    3064:	1c5a      	adds	r2, r3, #1
    3066:	f240 33d0 	movw	r3, #976	; 0x3d0
    306a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    306e:	6879      	ldr	r1, [r7, #4]
    3070:	202c      	movs	r0, #44	; 0x2c
    3072:	fb00 f101 	mul.w	r1, r0, r1
    3076:	440b      	add	r3, r1
    3078:	3304      	adds	r3, #4
    307a:	601a      	str	r2, [r3, #0]
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    307c:	68fb      	ldr	r3, [r7, #12]
    307e:	3301      	adds	r3, #1
    3080:	60fb      	str	r3, [r7, #12]
    3082:	f240 1310 	movw	r3, #272	; 0x110
    3086:	f2c2 0300 	movt	r3, #8192	; 0x2000
    308a:	681a      	ldr	r2, [r3, #0]
    308c:	68fb      	ldr	r3, [r7, #12]
    308e:	429a      	cmp	r2, r3
    3090:	f73f af76 	bgt.w	2f80 <vParameterInitialise+0x100>
        pvParameters[xSource].xNumOfOut ++;

        pvParameters[xDest].xInFlag[pvParameters[xDest].xNumOfIn] = xSource;
        pvParameters[xDest].xNumOfIn ++;
    }
}
    3094:	3714      	adds	r7, #20
    3096:	46bd      	mov	sp, r7
    3098:	f85d 7b04 	ldr.w	r7, [sp], #4
    309c:	4770      	bx	lr
    309e:	bf00      	nop

000030a0 <vTaskDelayLET>:

void vTaskDelayLET()
{
    30a0:	b580      	push	{r7, lr}
    30a2:	b084      	sub	sp, #16
    30a4:	af00      	add	r7, sp, #0
    xTaskHandle pxTaskCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    30a6:	f002 fa51 	bl	554c <xTaskGetCurrentTaskHandle>
    30aa:	60b8      	str	r0, [r7, #8]
    portTickType xStartTime = xTaskGetxStartTime( pxTaskCurrentTCBLocal );
    30ac:	68b8      	ldr	r0, [r7, #8]
    30ae:	f002 fb03 	bl	56b8 <xTaskGetxStartTime>
    30b2:	6078      	str	r0, [r7, #4]
    portTickType xOutputTime = xTaskGetxLet( pxTaskCurrentTCBLocal ) + xStartTime;
    30b4:	68b8      	ldr	r0, [r7, #8]
    30b6:	f002 fb0b 	bl	56d0 <xTaskGetxLet>
    30ba:	4602      	mov	r2, r0
    30bc:	687b      	ldr	r3, [r7, #4]
    30be:	4413      	add	r3, r2
    30c0:	603b      	str	r3, [r7, #0]
    portTickType xCurrentTime = xTaskGetTickCount();
    30c2:	f001 fe77 	bl	4db4 <xTaskGetTickCount>
    30c6:	60f8      	str	r0, [r7, #12]

    while( xCurrentTime <  xOutputTime)
    30c8:	e002      	b.n	30d0 <vTaskDelayLET+0x30>
    {
        xCurrentTime = xTaskGetTickCount();
    30ca:	f001 fe73 	bl	4db4 <xTaskGetTickCount>
    30ce:	60f8      	str	r0, [r7, #12]
    xTaskHandle pxTaskCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    portTickType xStartTime = xTaskGetxStartTime( pxTaskCurrentTCBLocal );
    portTickType xOutputTime = xTaskGetxLet( pxTaskCurrentTCBLocal ) + xStartTime;
    portTickType xCurrentTime = xTaskGetTickCount();

    while( xCurrentTime <  xOutputTime)
    30d0:	68fa      	ldr	r2, [r7, #12]
    30d2:	683b      	ldr	r3, [r7, #0]
    30d4:	429a      	cmp	r2, r3
    30d6:	d3f8      	bcc.n	30ca <vTaskDelayLET+0x2a>
    {
        xCurrentTime = xTaskGetTickCount();
    }
}
    30d8:	3710      	adds	r7, #16
    30da:	46bd      	mov	sp, r7
    30dc:	bd80      	pop	{r7, pc}
    30de:	bf00      	nop

000030e0 <vEventReceiveAll>:

// receive all Events from sources servant, and return them through the point
void vEventReceiveAll( void * pvParameter, xEventHandle *pxEvent )
{
    30e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    30e4:	b088      	sub	sp, #32
    30e6:	af00      	add	r7, sp, #0
    30e8:	6078      	str	r0, [r7, #4]
    30ea:	6039      	str	r1, [r7, #0]
    30ec:	4669      	mov	r1, sp
    30ee:	4688      	mov	r8, r1
    portBASE_TYPE i ;

    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;
    30f0:	6879      	ldr	r1, [r7, #4]
    30f2:	6849      	ldr	r1, [r1, #4]
    30f4:	61b9      	str	r1, [r7, #24]
    portBASE_TYPE xInFlag[NUM]; 
    30f6:	69be      	ldr	r6, [r7, #24]
    30f8:	1e71      	subs	r1, r6, #1
    30fa:	6179      	str	r1, [r7, #20]
    30fc:	4631      	mov	r1, r6
    30fe:	4608      	mov	r0, r1
    3100:	f04f 0100 	mov.w	r1, #0
    3104:	014d      	lsls	r5, r1, #5
    3106:	ea45 65d0 	orr.w	r5, r5, r0, lsr #27
    310a:	0144      	lsls	r4, r0, #5
    310c:	4631      	mov	r1, r6
    310e:	4608      	mov	r0, r1
    3110:	f04f 0100 	mov.w	r1, #0
    3114:	014b      	lsls	r3, r1, #5
    3116:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    311a:	0142      	lsls	r2, r0, #5
    311c:	4633      	mov	r3, r6
    311e:	009b      	lsls	r3, r3, #2
    3120:	3303      	adds	r3, #3
    3122:	3307      	adds	r3, #7
    3124:	08db      	lsrs	r3, r3, #3
    3126:	00db      	lsls	r3, r3, #3
    3128:	ebad 0d03 	sub.w	sp, sp, r3
    312c:	466b      	mov	r3, sp
    312e:	3303      	adds	r3, #3
    3130:	089b      	lsrs	r3, r3, #2
    3132:	009b      	lsls	r3, r3, #2
    3134:	613b      	str	r3, [r7, #16]
    portBASE_TYPE xMyFlag = ((struct xParam *) pvParameter)->xMyFlag;
    3136:	687b      	ldr	r3, [r7, #4]
    3138:	681b      	ldr	r3, [r3, #0]
    313a:	60fb      	str	r3, [r7, #12]
    portTickType xCurrentTime;
   
    xSemaphoreTake( xBinarySemaphore[xMyFlag],portMAX_DELAY );
    313c:	f240 7398 	movw	r3, #1944	; 0x798
    3140:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3144:	68fa      	ldr	r2, [r7, #12]
    3146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    314a:	4618      	mov	r0, r3
    314c:	2100      	movs	r1, #0
    314e:	f04f 32ff 	mov.w	r2, #4294967295
    3152:	2300      	movs	r3, #0
    3154:	f000 ff7a 	bl	404c <xQueueGenericReceive>

    xCurrentTime = xTaskGetTickCount(); 
    3158:	f001 fe2c 	bl	4db4 <xTaskGetTickCount>
    315c:	60b8      	str	r0, [r7, #8]
    vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    315e:	f240 73f0 	movw	r3, #2032	; 0x7f0
    3162:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3166:	68fa      	ldr	r2, [r7, #12]
    3168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    316c:	4618      	mov	r0, r3
    316e:	68b9      	ldr	r1, [r7, #8]
    3170:	f002 faba 	bl	56e8 <vTaskSetxStartTime>

    for( i = 0; i < NUM; i ++ )
    3174:	2300      	movs	r3, #0
    3176:	61fb      	str	r3, [r7, #28]
    3178:	e024      	b.n	31c4 <vEventReceiveAll+0xe4>
    {
        // get all the in flag
        xInFlag[i] = ((struct xParam *) pvParameter)->xInFlag[i];
    317a:	687a      	ldr	r2, [r7, #4]
    317c:	69fb      	ldr	r3, [r7, #28]
    317e:	3302      	adds	r3, #2
    3180:	009b      	lsls	r3, r3, #2
    3182:	4413      	add	r3, r2
    3184:	6859      	ldr	r1, [r3, #4]
    3186:	693b      	ldr	r3, [r7, #16]
    3188:	69fa      	ldr	r2, [r7, #28]
    318a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        // receive all events which are created by source servants and return 
        // them back to current Servant through the inout point
        vEventReceive( &pxEvent[i], xTaskOfHandle[xInFlag[i]], pxCurrentReadyList );
    318e:	69fb      	ldr	r3, [r7, #28]
    3190:	009b      	lsls	r3, r3, #2
    3192:	683a      	ldr	r2, [r7, #0]
    3194:	18d1      	adds	r1, r2, r3
    3196:	693b      	ldr	r3, [r7, #16]
    3198:	69fa      	ldr	r2, [r7, #28]
    319a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    319e:	f240 73f0 	movw	r3, #2032	; 0x7f0
    31a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    31aa:	f240 33cc 	movw	r3, #972	; 0x3cc
    31ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31b2:	681b      	ldr	r3, [r3, #0]
    31b4:	4608      	mov	r0, r1
    31b6:	4611      	mov	r1, r2
    31b8:	461a      	mov	r2, r3
    31ba:	f7ff fdb1 	bl	2d20 <vEventGenericReceive>
    xSemaphoreTake( xBinarySemaphore[xMyFlag],portMAX_DELAY );

    xCurrentTime = xTaskGetTickCount(); 
    vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );

    for( i = 0; i < NUM; i ++ )
    31be:	69fb      	ldr	r3, [r7, #28]
    31c0:	3301      	adds	r3, #1
    31c2:	61fb      	str	r3, [r7, #28]
    31c4:	69fa      	ldr	r2, [r7, #28]
    31c6:	69bb      	ldr	r3, [r7, #24]
    31c8:	429a      	cmp	r2, r3
    31ca:	dbd6      	blt.n	317a <vEventReceiveAll+0x9a>
    31cc:	46c5      	mov	sp, r8
        xInFlag[i] = ((struct xParam *) pvParameter)->xInFlag[i];
        // receive all events which are created by source servants and return 
        // them back to current Servant through the inout point
        vEventReceive( &pxEvent[i], xTaskOfHandle[xInFlag[i]], pxCurrentReadyList );
    }
}
    31ce:	3720      	adds	r7, #32
    31d0:	46bd      	mov	sp, r7
    31d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    31d6:	bf00      	nop

000031d8 <vEventDeleteAll>:

void vEventDeleteAll( void * pvParameter, xEventHandle * pxEvent )
{
    31d8:	b580      	push	{r7, lr}
    31da:	b084      	sub	sp, #16
    31dc:	af00      	add	r7, sp, #0
    31de:	6078      	str	r0, [r7, #4]
    31e0:	6039      	str	r1, [r7, #0]
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;
    31e2:	687b      	ldr	r3, [r7, #4]
    31e4:	685b      	ldr	r3, [r3, #4]
    31e6:	60bb      	str	r3, [r7, #8]

    for( i = 0; i < NUM; ++i )
    31e8:	2300      	movs	r3, #0
    31ea:	60fb      	str	r3, [r7, #12]
    31ec:	e00a      	b.n	3204 <vEventDeleteAll+0x2c>
    {
        vEventDelete( pxEvent[i] );
    31ee:	68fb      	ldr	r3, [r7, #12]
    31f0:	009b      	lsls	r3, r3, #2
    31f2:	683a      	ldr	r2, [r7, #0]
    31f4:	4413      	add	r3, r2
    31f6:	681b      	ldr	r3, [r3, #0]
    31f8:	4618      	mov	r0, r3
    31fa:	f7ff fdf3 	bl	2de4 <vEventGenericDelete>
void vEventDeleteAll( void * pvParameter, xEventHandle * pxEvent )
{
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;

    for( i = 0; i < NUM; ++i )
    31fe:	68fb      	ldr	r3, [r7, #12]
    3200:	3301      	adds	r3, #1
    3202:	60fb      	str	r3, [r7, #12]
    3204:	68fa      	ldr	r2, [r7, #12]
    3206:	68bb      	ldr	r3, [r7, #8]
    3208:	429a      	cmp	r2, r3
    320a:	dbf0      	blt.n	31ee <vEventDeleteAll+0x16>
    {
        vEventDelete( pxEvent[i] );
    }
}
    320c:	3710      	adds	r7, #16
    320e:	46bd      	mov	sp, r7
    3210:	bd80      	pop	{r7, pc}
    3212:	bf00      	nop

00003214 <vEventCreateAll>:


void vEventCreateAll( void * pvParameter, struct eventData *xDatas )
{
    3214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3218:	b08a      	sub	sp, #40	; 0x28
    321a:	af02      	add	r7, sp, #8
    321c:	6078      	str	r0, [r7, #4]
    321e:	6039      	str	r1, [r7, #0]
    3220:	4669      	mov	r1, sp
    3222:	4688      	mov	r8, r1
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfOut;
    3224:	6879      	ldr	r1, [r7, #4]
    3226:	6889      	ldr	r1, [r1, #8]
    3228:	61b9      	str	r1, [r7, #24]
    portBASE_TYPE xMyFlag = ((struct xParam *)pvParameter)->xMyFlag;
    322a:	6879      	ldr	r1, [r7, #4]
    322c:	6809      	ldr	r1, [r1, #0]
    322e:	6179      	str	r1, [r7, #20]
    portTickType xPeriod = ((struct xParam *) pvParameter)->xPeriod;
    3230:	6879      	ldr	r1, [r7, #4]
    3232:	6a49      	ldr	r1, [r1, #36]	; 0x24
    3234:	6139      	str	r1, [r7, #16]
    portBASE_TYPE xFlags[NUM];
    3236:	69be      	ldr	r6, [r7, #24]
    3238:	1e71      	subs	r1, r6, #1
    323a:	60f9      	str	r1, [r7, #12]
    323c:	4631      	mov	r1, r6
    323e:	4608      	mov	r0, r1
    3240:	f04f 0100 	mov.w	r1, #0
    3244:	014d      	lsls	r5, r1, #5
    3246:	ea45 65d0 	orr.w	r5, r5, r0, lsr #27
    324a:	0144      	lsls	r4, r0, #5
    324c:	4631      	mov	r1, r6
    324e:	4608      	mov	r0, r1
    3250:	f04f 0100 	mov.w	r1, #0
    3254:	014b      	lsls	r3, r1, #5
    3256:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    325a:	0142      	lsls	r2, r0, #5
    325c:	4633      	mov	r3, r6
    325e:	009b      	lsls	r3, r3, #2
    3260:	3303      	adds	r3, #3
    3262:	3307      	adds	r3, #7
    3264:	08db      	lsrs	r3, r3, #3
    3266:	00db      	lsls	r3, r3, #3
    3268:	ebad 0d03 	sub.w	sp, sp, r3
    326c:	ab02      	add	r3, sp, #8
    326e:	3303      	adds	r3, #3
    3270:	089b      	lsrs	r3, r3, #2
    3272:	009b      	lsls	r3, r3, #2
    3274:	60bb      	str	r3, [r7, #8]

    for( i = 0; i < NUM; i ++ )
    3276:	2300      	movs	r3, #0
    3278:	61fb      	str	r3, [r7, #28]
    327a:	e033      	b.n	32e4 <vEventCreateAll+0xd0>
    {
        // get all flags of destination servants
        xFlags[i] = ((struct xParam *) pvParameter)->xOutFlag[i]; 
    327c:	687a      	ldr	r2, [r7, #4]
    327e:	69fb      	ldr	r3, [r7, #28]
    3280:	3304      	adds	r3, #4
    3282:	009b      	lsls	r3, r3, #2
    3284:	4413      	add	r3, r2
    3286:	6859      	ldr	r1, [r3, #4]
    3288:	68bb      	ldr	r3, [r7, #8]
    328a:	69fa      	ldr	r2, [r7, #28]
    328c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        // if current servant is the last one of task, then the event will be proceeded at the deadline
        if( xFlags[i] <= xMyFlag )
    3290:	68bb      	ldr	r3, [r7, #8]
    3292:	69fa      	ldr	r2, [r7, #28]
    3294:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3298:	697b      	ldr	r3, [r7, #20]
    329a:	429a      	cmp	r2, r3
    329c:	dc06      	bgt.n	32ac <vEventCreateAll+0x98>
        {
            xDatas[i].IS_LAST_SERVANT = 1;
    329e:	69fb      	ldr	r3, [r7, #28]
    32a0:	011b      	lsls	r3, r3, #4
    32a2:	683a      	ldr	r2, [r7, #0]
    32a4:	4413      	add	r3, r2
    32a6:	2201      	movs	r2, #1
    32a8:	609a      	str	r2, [r3, #8]
    32aa:	e005      	b.n	32b8 <vEventCreateAll+0xa4>
        }
        else
        {
            xDatas[i].IS_LAST_SERVANT = 0;
    32ac:	69fb      	ldr	r3, [r7, #28]
    32ae:	011b      	lsls	r3, r3, #4
    32b0:	683a      	ldr	r2, [r7, #0]
    32b2:	4413      	add	r3, r2
    32b4:	2200      	movs	r2, #0
    32b6:	609a      	str	r2, [r3, #8]
        }
        // create events which would be sent to destination servants.
        vEventCreate(xTaskOfHandle[xFlags[i]], xDatas[i]) ;
    32b8:	68bb      	ldr	r3, [r7, #8]
    32ba:	69fa      	ldr	r2, [r7, #28]
    32bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    32c0:	f240 73f0 	movw	r3, #2032	; 0x7f0
    32c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32c8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    32cc:	69fb      	ldr	r3, [r7, #28]
    32ce:	011b      	lsls	r3, r3, #4
    32d0:	683a      	ldr	r2, [r7, #0]
    32d2:	4413      	add	r3, r2
    32d4:	68da      	ldr	r2, [r3, #12]
    32d6:	9200      	str	r2, [sp, #0]
    32d8:	cb0e      	ldmia	r3, {r1, r2, r3}
    32da:	f7ff fc57 	bl	2b8c <vEventGenericCreate>
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfOut;
    portBASE_TYPE xMyFlag = ((struct xParam *)pvParameter)->xMyFlag;
    portTickType xPeriod = ((struct xParam *) pvParameter)->xPeriod;
    portBASE_TYPE xFlags[NUM];

    for( i = 0; i < NUM; i ++ )
    32de:	69fb      	ldr	r3, [r7, #28]
    32e0:	3301      	adds	r3, #1
    32e2:	61fb      	str	r3, [r7, #28]
    32e4:	69fa      	ldr	r2, [r7, #28]
    32e6:	69bb      	ldr	r3, [r7, #24]
    32e8:	429a      	cmp	r2, r3
    32ea:	dbc7      	blt.n	327c <vEventCreateAll+0x68>
    32ec:	46c5      	mov	sp, r8
            xDatas[i].IS_LAST_SERVANT = 0;
        }
        // create events which would be sent to destination servants.
        vEventCreate(xTaskOfHandle[xFlags[i]], xDatas[i]) ;
    }
}
    32ee:	3720      	adds	r7, #32
    32f0:	46bd      	mov	sp, r7
    32f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    32f6:	bf00      	nop

000032f8 <vDoActuator>:

static void vDoActuator( xEventHandle * pxEvent)
{
    32f8:	b480      	push	{r7}
    32fa:	b083      	sub	sp, #12
    32fc:	af00      	add	r7, sp, #0
    32fe:	6078      	str	r0, [r7, #4]
    {
        vPrintString("There are tasks miss deadline\n\r");
    }
    */
   
}
    3300:	370c      	adds	r7, #12
    3302:	46bd      	mov	sp, r7
    3304:	f85d 7b04 	ldr.w	r7, [sp], #4
    3308:	4770      	bx	lr
    330a:	bf00      	nop

0000330c <vDoSensor>:

static void vDoSensor()
{
    330c:	b480      	push	{r7}
    330e:	af00      	add	r7, sp, #0

}
    3310:	46bd      	mov	sp, r7
    3312:	f85d 7b04 	ldr.w	r7, [sp], #4
    3316:	4770      	bx	lr

00003318 <vSensor>:
*
* @param pvParameter is parameter from programmer.
*
* */
void vSensor( void * pvParameter )
{
    3318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    331c:	b095      	sub	sp, #84	; 0x54
    331e:	af00      	add	r7, sp, #0
    3320:	60f8      	str	r0, [r7, #12]
    3322:	466b      	mov	r3, sp
    3324:	461e      	mov	r6, r3
    portTickType xCurrentTime;
    portTickType deadline;
    portBASE_TYPE i;
    portBASE_TYPE IS_FIRST_TIME_TO_EXE = 1;
    3326:	2301      	movs	r3, #1
    3328:	64bb      	str	r3, [r7, #72]	; 0x48
    portBASE_TYPE xCount = 1;
    332a:	2301      	movs	r3, #1
    332c:	647b      	str	r3, [r7, #68]	; 0x44

    /* store the paramter into stack of servant */
    void * pvMyParameter = pvParameter;
    332e:	68fb      	ldr	r3, [r7, #12]
    3330:	643b      	str	r3, [r7, #64]	; 0x40

    portBASE_TYPE NUM = ((struct xParam *) pvMyParameter)->xNumOfOut;
    3332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3334:	689b      	ldr	r3, [r3, #8]
    3336:	63fb      	str	r3, [r7, #60]	; 0x3c
    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    3338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    333a:	681b      	ldr	r3, [r3, #0]
    333c:	63bb      	str	r3, [r7, #56]	; 0x38
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    333e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3340:	69db      	ldr	r3, [r3, #28]
    3342:	637b      	str	r3, [r7, #52]	; 0x34
    portTickType xPeriod = ((struct xParam *) pvMyParameter)->xPeriod;
    3344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3348:	633b      	str	r3, [r7, #48]	; 0x30
    pvServantFunType xMyFun = ((struct xParam *) pvMyParameter)->xFp;
    334a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    334c:	6a1b      	ldr	r3, [r3, #32]
    334e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* set the LET of Servant when it is created */
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    3350:	f240 73f0 	movw	r3, #2032	; 0x7f0
    3354:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3358:	6bba      	ldr	r2, [r7, #56]	; 0x38
    335a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    335e:	4618      	mov	r0, r3
    3360:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3362:	f002 f9cf 	bl	5704 <vTaskSetxLet>
    
    /* receive the events created by the last servant of this task. */
    xEventHandle pxEvent[NUM];
    3366:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3368:	1e4b      	subs	r3, r1, #1
    336a:	62bb      	str	r3, [r7, #40]	; 0x28
    336c:	460b      	mov	r3, r1
    336e:	461a      	mov	r2, r3
    3370:	f04f 0300 	mov.w	r3, #0
    3374:	0158      	lsls	r0, r3, #5
    3376:	6078      	str	r0, [r7, #4]
    3378:	6878      	ldr	r0, [r7, #4]
    337a:	ea40 60d2 	orr.w	r0, r0, r2, lsr #27
    337e:	6078      	str	r0, [r7, #4]
    3380:	0150      	lsls	r0, r2, #5
    3382:	460b      	mov	r3, r1
    3384:	461a      	mov	r2, r3
    3386:	f04f 0300 	mov.w	r3, #0
    338a:	ea4f 1b43 	mov.w	fp, r3, lsl #5
    338e:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
    3392:	ea4f 1a42 	mov.w	sl, r2, lsl #5
    3396:	460b      	mov	r3, r1
    3398:	009b      	lsls	r3, r3, #2
    339a:	3303      	adds	r3, #3
    339c:	3307      	adds	r3, #7
    339e:	08db      	lsrs	r3, r3, #3
    33a0:	00db      	lsls	r3, r3, #3
    33a2:	ebad 0d03 	sub.w	sp, sp, r3
    33a6:	466b      	mov	r3, sp
    33a8:	3303      	adds	r3, #3
    33aa:	089b      	lsrs	r3, r3, #2
    33ac:	009b      	lsls	r3, r3, #2
    33ae:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* create data for destination servants and initialise them */
    struct eventData xDatas[NUM];
    33b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    33b2:	1e4b      	subs	r3, r1, #1
    33b4:	623b      	str	r3, [r7, #32]
    33b6:	460b      	mov	r3, r1
    33b8:	461a      	mov	r2, r3
    33ba:	f04f 0300 	mov.w	r3, #0
    33be:	ea4f 19c3 	mov.w	r9, r3, lsl #7
    33c2:	ea49 6952 	orr.w	r9, r9, r2, lsr #25
    33c6:	ea4f 18c2 	mov.w	r8, r2, lsl #7
    33ca:	460b      	mov	r3, r1
    33cc:	461a      	mov	r2, r3
    33ce:	f04f 0300 	mov.w	r3, #0
    33d2:	01dd      	lsls	r5, r3, #7
    33d4:	ea45 6552 	orr.w	r5, r5, r2, lsr #25
    33d8:	01d4      	lsls	r4, r2, #7
    33da:	460b      	mov	r3, r1
    33dc:	011b      	lsls	r3, r3, #4
    33de:	3303      	adds	r3, #3
    33e0:	3307      	adds	r3, #7
    33e2:	08db      	lsrs	r3, r3, #3
    33e4:	00db      	lsls	r3, r3, #3
    33e6:	ebad 0d03 	sub.w	sp, sp, r3
    33ea:	466b      	mov	r3, sp
    33ec:	3303      	adds	r3, #3
    33ee:	089b      	lsrs	r3, r3, #2
    33f0:	009b      	lsls	r3, r3, #2
    33f2:	61fb      	str	r3, [r7, #28]


    while(1)
    {

        if( IS_FIRST_TIME_TO_EXE == 1 )
    33f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    33f6:	2b01      	cmp	r3, #1
    33f8:	d110      	bne.n	341c <vSensor+0x104>
        {
            /* Waiting for the start time of task period */
            xSemaphoreTake(xBinarySemaphore[xMyFlag], portMAX_DELAY);
    33fa:	f240 7398 	movw	r3, #1944	; 0x798
    33fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3402:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3408:	4618      	mov	r0, r3
    340a:	2100      	movs	r1, #0
    340c:	f04f 32ff 	mov.w	r2, #4294967295
    3410:	2300      	movs	r3, #0
    3412:	f000 fe1b 	bl	404c <xQueueGenericReceive>
            IS_FIRST_TIME_TO_EXE = 0;
    3416:	2300      	movs	r3, #0
    3418:	64bb      	str	r3, [r7, #72]	; 0x48
    341a:	e00d      	b.n	3438 <vSensor+0x120>
        {
            /* When system started, the first servant of every task is triggered to
             * execute by the init events created by tick hook. After that, the first
             * servant of every task is triggered by the last servant of corresponding task.
            * */
            vEventReceiveAll( pvMyParameter, pxEvent );
    341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    341e:	6c38      	ldr	r0, [r7, #64]	; 0x40
    3420:	4619      	mov	r1, r3
    3422:	f7ff fe5d 	bl	30e0 <vEventReceiveAll>
            // deal with the output things and seeing whether current task misses deadline
            vDoActuator(pxEvent);
    3426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3428:	4618      	mov	r0, r3
    342a:	f7ff ff65 	bl	32f8 <vDoActuator>
            vEventDeleteAll(pvMyParameter, pxEvent);
    342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3430:	6c38      	ldr	r0, [r7, #64]	; 0x40
    3432:	4619      	mov	r1, r3
    3434:	f7ff fed0 	bl	31d8 <vEventDeleteAll>
        }

        //xTaskComplete[ xTaskOfServant[xMyFlag] ] = 0;

        // deal with the input
        vDoSensor();
    3438:	f7ff ff68 	bl	330c <vDoSensor>

        vPrintNumber( xMyFlag );
    343c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    343e:	f013 fd93 	bl	16f68 <vPrintNumber>
        xCurrentTime = xTaskGetTickCount();
    3442:	f001 fcb7 	bl	4db4 <xTaskGetTickCount>
    3446:	61b8      	str	r0, [r7, #24]
        vPrintNumber( xCurrentTime );
    3448:	69b8      	ldr	r0, [r7, #24]
    344a:	f013 fd8d 	bl	16f68 <vPrintNumber>
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    344e:	f240 73f0 	movw	r3, #2032	; 0x7f0
    3452:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3456:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    345c:	4618      	mov	r0, r3
    345e:	69b9      	ldr	r1, [r7, #24]
    3460:	f002 f942 	bl	56e8 <vTaskSetxStartTime>

        // xStartTime is the start time of next period which is also the deadline of current period
        xCount ++;
    3464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3466:	3301      	adds	r3, #1
    3468:	647b      	str	r3, [r7, #68]	; 0x44
        deadline = xCount * xPeriod; 
    346a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    346c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    346e:	fb02 f303 	mul.w	r3, r2, r3
    3472:	617b      	str	r3, [r7, #20]

        for( i = 0; i < NUM; i ++ )
    3474:	2300      	movs	r3, #0
    3476:	64fb      	str	r3, [r7, #76]	; 0x4c
    3478:	e011      	b.n	349e <vSensor+0x186>
        {
            xDatas[i].xNextPeriod = deadline;
    347a:	69fa      	ldr	r2, [r7, #28]
    347c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    347e:	011b      	lsls	r3, r3, #4
    3480:	4413      	add	r3, r2
    3482:	697a      	ldr	r2, [r7, #20]
    3484:	601a      	str	r2, [r3, #0]
            xDatas[i].xTime = xCurrentTime + xLet;
    3486:	69ba      	ldr	r2, [r7, #24]
    3488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    348a:	441a      	add	r2, r3
    348c:	69f9      	ldr	r1, [r7, #28]
    348e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3490:	011b      	lsls	r3, r3, #4
    3492:	440b      	add	r3, r1
    3494:	3304      	adds	r3, #4
    3496:	601a      	str	r2, [r3, #0]

        // xStartTime is the start time of next period which is also the deadline of current period
        xCount ++;
        deadline = xCount * xPeriod; 

        for( i = 0; i < NUM; i ++ )
    3498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    349a:	3301      	adds	r3, #1
    349c:	64fb      	str	r3, [r7, #76]	; 0x4c
    349e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    34a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    34a2:	429a      	cmp	r2, r3
    34a4:	dbe9      	blt.n	347a <vSensor+0x162>
            xDatas[i].xNextPeriod = deadline;
            xDatas[i].xTime = xCurrentTime + xLet;
        }

        // create events for all destination servants of this servant. 
        vEventCreateAll( pvMyParameter, xDatas );
    34a6:	69fb      	ldr	r3, [r7, #28]
    34a8:	6c38      	ldr	r0, [r7, #64]	; 0x40
    34aa:	4619      	mov	r1, r3
    34ac:	f7ff feb2 	bl	3214 <vEventCreateAll>

        // this is the first s-servant
        for( i = 0; i < xFunctionTimes; ++ i )
    34b0:	2300      	movs	r3, #0
    34b2:	64fb      	str	r3, [r7, #76]	; 0x4c
    34b4:	e002      	b.n	34bc <vSensor+0x1a4>
    34b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    34b8:	3301      	adds	r3, #1
    34ba:	64fb      	str	r3, [r7, #76]	; 0x4c
    34bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    34be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    34c2:	dbf8      	blt.n	34b6 <vSensor+0x19e>
        {
            //xMyFun( NULL, 0, xDatas, NUM);
        }

        vTaskDelayLET();
    34c4:	f7ff fdec 	bl	30a0 <vTaskDelayLET>
        //vPrintNumber( deadline - xPeriod ); // output the ready time of task
        //vPrintNumber( deadline );  // output the deadline of task
        //vPrintString("the start time of next Period: ");
        //vPrintNumber(xDatas[0].xNextPeriod);
        
        if( xCurrentTime > xDatas[0].xNextPeriod )
    34c8:	69fb      	ldr	r3, [r7, #28]
    34ca:	681a      	ldr	r2, [r3, #0]
    34cc:	69bb      	ldr	r3, [r7, #24]
    34ce:	429a      	cmp	r2, r3
    34d0:	d20a      	bcs.n	34e8 <vSensor+0x1d0>
        {
            vPrintNumber(xDatas[0].xNextPeriod);
    34d2:	69fb      	ldr	r3, [r7, #28]
    34d4:	681b      	ldr	r3, [r3, #0]
    34d6:	4618      	mov	r0, r3
    34d8:	f013 fd46 	bl	16f68 <vPrintNumber>
            vPrintString("there are sensor missing deadline\n\r");
    34dc:	f648 00c8 	movw	r0, #35016	; 0x88c8
    34e0:	f2c0 0001 	movt	r0, #1
    34e4:	f013 fd26 	bl	16f34 <vPrintString>
        }
        xCurrentTime = xTaskGetTickCount();
    34e8:	f001 fc64 	bl	4db4 <xTaskGetTickCount>
    34ec:	61b8      	str	r0, [r7, #24]
        vPrintNumber( xCurrentTime );
    34ee:	69b8      	ldr	r0, [r7, #24]
    34f0:	f013 fd3a 	bl	16f68 <vPrintNumber>
        vPrintNumber( ( xMyFlag + 10 ) * 3 );
    34f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    34f6:	f103 020a 	add.w	r2, r3, #10
    34fa:	4613      	mov	r3, r2
    34fc:	005b      	lsls	r3, r3, #1
    34fe:	4413      	add	r3, r2
    3500:	4618      	mov	r0, r3
    3502:	f013 fd31 	bl	16f68 <vPrintNumber>

        xCurrentTime = xTaskGetTickCount();
    3506:	f001 fc55 	bl	4db4 <xTaskGetTickCount>
    350a:	61b8      	str	r0, [r7, #24]
        if( xCurrentTime > 1000000 )
    350c:	69ba      	ldr	r2, [r7, #24]
    350e:	f244 2340 	movw	r3, #16960	; 0x4240
    3512:	f2c0 030f 	movt	r3, #15
    3516:	429a      	cmp	r2, r3
    3518:	d900      	bls.n	351c <vSensor+0x204>
        {
            break;
    351a:	e00b      	b.n	3534 <vSensor+0x21c>
        }
        // triggered R-Servant to execute 
        xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT-1] );
    351c:	f240 7398 	movw	r3, #1944	; 0x798
    3520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    3526:	4618      	mov	r0, r3
    3528:	2100      	movs	r1, #0
    352a:	2200      	movs	r2, #0
    352c:	2300      	movs	r3, #0
    352e:	f000 fcc7 	bl	3ec0 <xQueueGenericSend>
    }
    3532:	e75f      	b.n	33f4 <vSensor+0xdc>
    3534:	46b5      	mov	sp, r6
}
    3536:	3754      	adds	r7, #84	; 0x54
    3538:	46bd      	mov	sp, r7
    353a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    353e:	bf00      	nop

00003540 <vServant>:
*  @param pvParameter is parameter from programmer
*
* */

void vServant( void * pvParameter )
{
    3540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3544:	b097      	sub	sp, #92	; 0x5c
    3546:	af00      	add	r7, sp, #0
    3548:	61f8      	str	r0, [r7, #28]
    354a:	4669      	mov	r1, sp
    354c:	6079      	str	r1, [r7, #4]
    portBASE_TYPE i;
    void * pvMyParameter = pvParameter;
    354e:	69f9      	ldr	r1, [r7, #28]
    3550:	6539      	str	r1, [r7, #80]	; 0x50
    portTickType xCurrentTime;
    
    portBASE_TYPE xNumOfIn = ((struct xParam *) pvMyParameter)->xNumOfIn;
    3552:	6d39      	ldr	r1, [r7, #80]	; 0x50
    3554:	6849      	ldr	r1, [r1, #4]
    3556:	64f9      	str	r1, [r7, #76]	; 0x4c
    portBASE_TYPE xNumOfOut = ((struct xParam *) pvMyParameter)->xNumOfOut;
    3558:	6d39      	ldr	r1, [r7, #80]	; 0x50
    355a:	6889      	ldr	r1, [r1, #8]
    355c:	64b9      	str	r1, [r7, #72]	; 0x48
    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    355e:	6d39      	ldr	r1, [r7, #80]	; 0x50
    3560:	6809      	ldr	r1, [r1, #0]
    3562:	6479      	str	r1, [r7, #68]	; 0x44
    portTickType xPeriod = ((struct xParam *) pvMyParameter)->xPeriod;
    3564:	6d39      	ldr	r1, [r7, #80]	; 0x50
    3566:	6a49      	ldr	r1, [r1, #36]	; 0x24
    3568:	6439      	str	r1, [r7, #64]	; 0x40
    pvServantFunType xMyFun = ((struct xParam *) pvMyParameter)->xFp;
    356a:	6d39      	ldr	r1, [r7, #80]	; 0x50
    356c:	6a09      	ldr	r1, [r1, #32]
    356e:	63f9      	str	r1, [r7, #60]	; 0x3c

    xEventHandle pxEvent[xNumOfIn];
    3570:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
    3572:	1e71      	subs	r1, r6, #1
    3574:	63b9      	str	r1, [r7, #56]	; 0x38
    3576:	4631      	mov	r1, r6
    3578:	4608      	mov	r0, r1
    357a:	f04f 0100 	mov.w	r1, #0
    357e:	ea4f 1b41 	mov.w	fp, r1, lsl #5
    3582:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
    3586:	ea4f 1a40 	mov.w	sl, r0, lsl #5
    358a:	4631      	mov	r1, r6
    358c:	4608      	mov	r0, r1
    358e:	f04f 0100 	mov.w	r1, #0
    3592:	ea4f 1941 	mov.w	r9, r1, lsl #5
    3596:	ea49 69d0 	orr.w	r9, r9, r0, lsr #27
    359a:	ea4f 1840 	mov.w	r8, r0, lsl #5
    359e:	4631      	mov	r1, r6
    35a0:	0089      	lsls	r1, r1, #2
    35a2:	3103      	adds	r1, #3
    35a4:	3107      	adds	r1, #7
    35a6:	08c9      	lsrs	r1, r1, #3
    35a8:	00c9      	lsls	r1, r1, #3
    35aa:	ebad 0d01 	sub.w	sp, sp, r1
    35ae:	4669      	mov	r1, sp
    35b0:	3103      	adds	r1, #3
    35b2:	0889      	lsrs	r1, r1, #2
    35b4:	0089      	lsls	r1, r1, #2
    35b6:	6379      	str	r1, [r7, #52]	; 0x34
    struct eventData xDatas[xNumOfOut];
    35b8:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    35ba:	1e71      	subs	r1, r6, #1
    35bc:	6339      	str	r1, [r7, #48]	; 0x30
    35be:	4631      	mov	r1, r6
    35c0:	4608      	mov	r0, r1
    35c2:	f04f 0100 	mov.w	r1, #0
    35c6:	01cd      	lsls	r5, r1, #7
    35c8:	ea45 6550 	orr.w	r5, r5, r0, lsr #25
    35cc:	01c4      	lsls	r4, r0, #7
    35ce:	4631      	mov	r1, r6
    35d0:	4608      	mov	r0, r1
    35d2:	f04f 0100 	mov.w	r1, #0
    35d6:	01cb      	lsls	r3, r1, #7
    35d8:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
    35dc:	01c2      	lsls	r2, r0, #7
    35de:	4633      	mov	r3, r6
    35e0:	011b      	lsls	r3, r3, #4
    35e2:	3303      	adds	r3, #3
    35e4:	3307      	adds	r3, #7
    35e6:	08db      	lsrs	r3, r3, #3
    35e8:	00db      	lsls	r3, r3, #3
    35ea:	ebad 0d03 	sub.w	sp, sp, r3
    35ee:	466b      	mov	r3, sp
    35f0:	3303      	adds	r3, #3
    35f2:	089b      	lsrs	r3, r3, #2
    35f4:	009b      	lsls	r3, r3, #2
    35f6:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* get the LET of current servant */
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    35f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    35fa:	69db      	ldr	r3, [r3, #28]
    35fc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* set the LET of current servant */
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    35fe:	f240 73f0 	movw	r3, #2032	; 0x7f0
    3602:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3606:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    360c:	4618      	mov	r0, r3
    360e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3610:	f002 f878 	bl	5704 <vTaskSetxLet>

    while(1)
    {
        vEventReceiveAll( pvMyParameter, pxEvent );
    3614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3616:	6d38      	ldr	r0, [r7, #80]	; 0x50
    3618:	4619      	mov	r1, r3
    361a:	f7ff fd61 	bl	30e0 <vEventReceiveAll>

        vPrintNumber(xMyFlag);
    361e:	6c78      	ldr	r0, [r7, #68]	; 0x44
    3620:	f013 fca2 	bl	16f68 <vPrintNumber>

        xCurrentTime = xTaskGetTickCountFromISR();
    3624:	f001 fbd8 	bl	4dd8 <xTaskGetTickCountFromISR>
    3628:	6278      	str	r0, [r7, #36]	; 0x24
        vPrintNumber( xCurrentTime );
    362a:	6a78      	ldr	r0, [r7, #36]	; 0x24
    362c:	f013 fc9c 	bl	16f68 <vPrintNumber>
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    3630:	f240 73f0 	movw	r3, #2032	; 0x7f0
    3634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3638:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    363a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    363e:	4618      	mov	r0, r3
    3640:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3642:	f002 f851 	bl	56e8 <vTaskSetxStartTime>

        /* Here are coding for processing data of events */
        for( i = 0; i < xNumOfOut; i ++ )
    3646:	2300      	movs	r3, #0
    3648:	657b      	str	r3, [r7, #84]	; 0x54
    364a:	e01e      	b.n	368a <vServant+0x14a>
        {
            xDatas[i] = xEventGetxData(pxEvent[i]);
    364c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    364e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3654:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3656:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3658:	0112      	lsls	r2, r2, #4
    365a:	188c      	adds	r4, r1, r2
    365c:	f107 0208 	add.w	r2, r7, #8
    3660:	4610      	mov	r0, r2
    3662:	4619      	mov	r1, r3
    3664:	f7ff f9c2 	bl	29ec <xEventGetxData>
    3668:	f107 0308 	add.w	r3, r7, #8
    366c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    366e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            xDatas[i].xTime = xCurrentTime + xLet;
    3672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3674:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3676:	441a      	add	r2, r3
    3678:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    367a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    367c:	011b      	lsls	r3, r3, #4
    367e:	440b      	add	r3, r1
    3680:	3304      	adds	r3, #4
    3682:	601a      	str	r2, [r3, #0]
        xCurrentTime = xTaskGetTickCountFromISR();
        vPrintNumber( xCurrentTime );
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );

        /* Here are coding for processing data of events */
        for( i = 0; i < xNumOfOut; i ++ )
    3684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3686:	3301      	adds	r3, #1
    3688:	657b      	str	r3, [r7, #84]	; 0x54
    368a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    368c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    368e:	429a      	cmp	r2, r3
    3690:	dbdc      	blt.n	364c <vServant+0x10c>
        {
            xDatas[i] = xEventGetxData(pxEvent[i]);
            xDatas[i].xTime = xCurrentTime + xLet;
        }

        for( i = 0; i < xFunctionTimes; ++ i )
    3692:	2300      	movs	r3, #0
    3694:	657b      	str	r3, [r7, #84]	; 0x54
    3696:	e002      	b.n	369e <vServant+0x15e>
    3698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    369a:	3301      	adds	r3, #1
    369c:	657b      	str	r3, [r7, #84]	; 0x54
    369e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    36a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    36a4:	dbf8      	blt.n	3698 <vServant+0x158>
        {
            //xMyFun(pxEvent, xNumOfIn, xDatas, xNumOfOut);
        }

        vEventDeleteAll( pvMyParameter, pxEvent );        
    36a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    36a8:	6d38      	ldr	r0, [r7, #80]	; 0x50
    36aa:	4619      	mov	r1, r3
    36ac:	f7ff fd94 	bl	31d8 <vEventDeleteAll>

        vEventCreateAll( pvMyParameter, xDatas );
    36b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    36b2:	6d38      	ldr	r0, [r7, #80]	; 0x50
    36b4:	4619      	mov	r1, r3
    36b6:	f7ff fdad 	bl	3214 <vEventCreateAll>

        if( xCurrentTime > xDatas[0].xNextPeriod )
    36ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    36bc:	681a      	ldr	r2, [r3, #0]
    36be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    36c0:	429a      	cmp	r2, r3
    36c2:	d20a      	bcs.n	36da <vServant+0x19a>
        {
            vPrintNumber(xDatas[0].xNextPeriod);
    36c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    36c6:	681b      	ldr	r3, [r3, #0]
    36c8:	4618      	mov	r0, r3
    36ca:	f013 fc4d 	bl	16f68 <vPrintNumber>
            vPrintString("there are servants missing deadline\n\r");
    36ce:	f648 00ec 	movw	r0, #35052	; 0x88ec
    36d2:	f2c0 0001 	movt	r0, #1
    36d6:	f013 fc2d 	bl	16f34 <vPrintString>
        }
        vTaskDelayLET();
    36da:	f7ff fce1 	bl	30a0 <vTaskDelayLET>

        //vPrintNumber( xCurrentTime );
        //vPrintNumber( xDatas[0].xNextPeriod - xPeriod ); // output the ready time of task
        //vPrintNumber( xDatas[0].xNextPeriod );  // output the deadline of task
        xCurrentTime = xTaskGetTickCountFromISR();
    36de:	f001 fb7b 	bl	4dd8 <xTaskGetTickCountFromISR>
    36e2:	6278      	str	r0, [r7, #36]	; 0x24
        vPrintNumber( xCurrentTime );
    36e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
    36e6:	f013 fc3f 	bl	16f68 <vPrintNumber>
        vPrintNumber( (xMyFlag + 10) * 3 );
    36ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    36ec:	f103 020a 	add.w	r2, r3, #10
    36f0:	4613      	mov	r3, r2
    36f2:	005b      	lsls	r3, r3, #1
    36f4:	4413      	add	r3, r2
    36f6:	4618      	mov	r0, r3
    36f8:	f013 fc36 	bl	16f68 <vPrintNumber>

        xCurrentTime = xTaskGetTickCount();
    36fc:	f001 fb5a 	bl	4db4 <xTaskGetTickCount>
    3700:	6278      	str	r0, [r7, #36]	; 0x24
        if( xCurrentTime > 1000000 )
    3702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3704:	f244 2340 	movw	r3, #16960	; 0x4240
    3708:	f2c0 030f 	movt	r3, #15
    370c:	429a      	cmp	r2, r3
    370e:	d900      	bls.n	3712 <vServant+0x1d2>
        {
            break;
    3710:	e00b      	b.n	372a <vServant+0x1ea>
        }

        // triggered R-Servant to execute 
        xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT-1] );
    3712:	f240 7398 	movw	r3, #1944	; 0x798
    3716:	f2c2 0300 	movt	r3, #8192	; 0x2000
    371a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    371c:	4618      	mov	r0, r3
    371e:	2100      	movs	r1, #0
    3720:	2200      	movs	r2, #0
    3722:	2300      	movs	r3, #0
    3724:	f000 fbcc 	bl	3ec0 <xQueueGenericSend>
        
    }
    3728:	e774      	b.n	3614 <vServant+0xd4>
    372a:	687b      	ldr	r3, [r7, #4]
    372c:	469d      	mov	sp, r3
}
    372e:	375c      	adds	r7, #92	; 0x5c
    3730:	46bd      	mov	sp, r7
    3732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3736:	bf00      	nop

00003738 <vR_Servant>:

void vR_Servant( void * pvParameter)
{
    3738:	b580      	push	{r7, lr}
    373a:	b090      	sub	sp, #64	; 0x40
    373c:	af00      	add	r7, sp, #0
    373e:	6078      	str	r0, [r7, #4]
    portBASE_TYPE xSource, xDest;
    portBASE_TYPE HAVE_TO_SEND_SEMAPHORE; // could the semaphore be sent? 1 means yes , 0 means no
    portBASE_TYPE xResult;

    portTickType xCurrentTime;
    void * pvMyParameter = pvParameter;
    3740:	687b      	ldr	r3, [r7, #4]
    3742:	62bb      	str	r3, [r7, #40]	; 0x28

    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    3744:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3746:	681b      	ldr	r3, [r3, #0]
    3748:	627b      	str	r3, [r7, #36]	; 0x24
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    374a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    374c:	69db      	ldr	r3, [r3, #28]
    374e:	623b      	str	r3, [r7, #32]
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    3750:	f240 73f0 	movw	r3, #2032	; 0x7f0
    3754:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    375a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    375e:	4618      	mov	r0, r3
    3760:	6a39      	ldr	r1, [r7, #32]
    3762:	f001 ffcf 	bl	5704 <vTaskSetxLet>
    xTaskHandle destinationTCB, sourceTCB;

    while(1)
    {
        // waiting for events created by tick hook or S-Servant
        xSemaphoreTake( xBinarySemaphore[xMyFlag], portMAX_DELAY );
    3766:	f240 7398 	movw	r3, #1944	; 0x798
    376a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    376e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3774:	4618      	mov	r0, r3
    3776:	2100      	movs	r1, #0
    3778:	f04f 32ff 	mov.w	r2, #4294967295
    377c:	2300      	movs	r3, #0
    377e:	f000 fc65 	bl	404c <xQueueGenericReceive>

        //vPrintNumber( xMyFlag );
        xCurrentTime = xTaskGetTickCount();
    3782:	f001 fb17 	bl	4db4 <xTaskGetTickCount>
    3786:	61f8      	str	r0, [r7, #28]
        //vPrintNumber( xCurrentTime );
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    3788:	f240 73f0 	movw	r3, #2032	; 0x7f0
    378c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3796:	4618      	mov	r0, r3
    3798:	69f9      	ldr	r1, [r7, #28]
    379a:	f001 ffa5 	bl	56e8 <vTaskSetxStartTime>

        // init to zero
        HAVE_TO_SEND_SEMAPHORE = 0;
    379e:	2300      	movs	r3, #0
    37a0:	637b      	str	r3, [r7, #52]	; 0x34

        // to see whether there is a servant need to be triggered.
        // This process could be preempted by Sensor servant.
        while(! HAVE_TO_SEND_SEMAPHORE)
    37a2:	e094      	b.n	38ce <vR_Servant+0x196>
            /*
             * transit the event item, whose timestamp bigger or equal to current Tick Count, 
             * from xEventList to the idlest xEvestReadyList
             *
             * */
            xResult = xEventListTransit( &pxEventListItem, &pxCurrentReadyList);
    37a4:	f107 030c 	add.w	r3, r7, #12
    37a8:	4618      	mov	r0, r3
    37aa:	f240 31cc 	movw	r1, #972	; 0x3cc
    37ae:	f2c2 0100 	movt	r1, #8192	; 0x2000
    37b2:	f7ff fa65 	bl	2c80 <xEventListGenericTransit>
    37b6:	6338      	str	r0, [r7, #48]	; 0x30
            if( xResult == -1 )
    37b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    37ba:	f1b3 3fff 	cmp.w	r3, #4294967295
    37be:	d100      	bne.n	37c2 <vR_Servant+0x8a>
            {
                // no event
                break;
    37c0:	e089      	b.n	38d6 <vR_Servant+0x19e>
            }
            else if( xResult == 0 )
    37c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    37c4:	2b00      	cmp	r3, #0
    37c6:	d100      	bne.n	37ca <vR_Servant+0x92>
            {
                // not time yet
                break;
    37c8:	e085      	b.n	38d6 <vR_Servant+0x19e>
            else
            {
                // transmit success
            }

            destinationTCB = xEventGetpxDestination( pxEventListItem->pvOwner);
    37ca:	68fb      	ldr	r3, [r7, #12]
    37cc:	68db      	ldr	r3, [r3, #12]
    37ce:	4618      	mov	r0, r3
    37d0:	f7ff f8ee 	bl	29b0 <xEventGetpxDestination>
    37d4:	62f8      	str	r0, [r7, #44]	; 0x2c
            sourceTCB = xEventGetpxSource( pxEventListItem->pvOwner );
    37d6:	68fb      	ldr	r3, [r7, #12]
    37d8:	68db      	ldr	r3, [r3, #12]
    37da:	4618      	mov	r0, r3
    37dc:	f7ff f8dc 	bl	2998 <xEventGetpxSource>
    37e0:	61b8      	str	r0, [r7, #24]
            HAVE_TO_SEND_SEMAPHORE = 1;  // set default 1
    37e2:	2301      	movs	r3, #1
    37e4:	637b      	str	r3, [r7, #52]	; 0x34

            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    37e6:	2300      	movs	r3, #0
    37e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    37ea:	e068      	b.n	38be <vR_Servant+0x186>
            {
                xSource = xRelations.xRelation[i].xInFlag;
    37ec:	f240 1210 	movw	r2, #272	; 0x110
    37f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    37f6:	460b      	mov	r3, r1
    37f8:	005b      	lsls	r3, r3, #1
    37fa:	440b      	add	r3, r1
    37fc:	009b      	lsls	r3, r3, #2
    37fe:	4413      	add	r3, r2
    3800:	3304      	adds	r3, #4
    3802:	681b      	ldr	r3, [r3, #0]
    3804:	617b      	str	r3, [r7, #20]
                xDest   = xRelations.xRelation[i].xOutFlag;
    3806:	f240 1210 	movw	r2, #272	; 0x110
    380a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    380e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3810:	460b      	mov	r3, r1
    3812:	005b      	lsls	r3, r3, #1
    3814:	440b      	add	r3, r1
    3816:	009b      	lsls	r3, r3, #2
    3818:	4413      	add	r3, r2
    381a:	3308      	adds	r3, #8
    381c:	681b      	ldr	r3, [r3, #0]
    381e:	613b      	str	r3, [r7, #16]

                if( destinationTCB == xTaskOfHandle[xDest] )
    3820:	f240 73f0 	movw	r3, #2032	; 0x7f0
    3824:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3828:	693a      	ldr	r2, [r7, #16]
    382a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    382e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3830:	429a      	cmp	r2, r3
    3832:	d141      	bne.n	38b8 <vR_Servant+0x180>
                {
                    // find the right relation
                    if( sourceTCB == xTaskOfHandle[xSource] )
    3834:	f240 73f0 	movw	r3, #2032	; 0x7f0
    3838:	f2c2 0300 	movt	r3, #8192	; 0x2000
    383c:	697a      	ldr	r2, [r7, #20]
    383e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3842:	69bb      	ldr	r3, [r7, #24]
    3844:	429a      	cmp	r2, r3
    3846:	d127      	bne.n	3898 <vR_Servant+0x160>
                    {
                        if( xRelations.xRelation[i].xFlag == 2 )
    3848:	f240 1210 	movw	r2, #272	; 0x110
    384c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3850:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3852:	460b      	mov	r3, r1
    3854:	005b      	lsls	r3, r3, #1
    3856:	440b      	add	r3, r1
    3858:	009b      	lsls	r3, r3, #2
    385a:	4413      	add	r3, r2
    385c:	330c      	adds	r3, #12
    385e:	681b      	ldr	r3, [r3, #0]
    3860:	2b02      	cmp	r3, #2
    3862:	d10b      	bne.n	387c <vR_Servant+0x144>
                        {
                            vPrintString("Error: This event has arrived!!\n\r") ;
    3864:	f648 1014 	movw	r0, #35092	; 0x8914
    3868:	f2c0 0001 	movt	r0, #1
    386c:	f013 fb62 	bl	16f34 <vPrintString>
                            vEventDelete( (xEventHandle) pxEventListItem->pvOwner );
    3870:	68fb      	ldr	r3, [r7, #12]
    3872:	68db      	ldr	r3, [r3, #12]
    3874:	4618      	mov	r0, r3
    3876:	f7ff fab5 	bl	2de4 <vEventGenericDelete>
    387a:	e01d      	b.n	38b8 <vR_Servant+0x180>
                        }
                        else
                        {
                            // set the relation to 2
                            xRelations.xRelation[i].xFlag = 2;
    387c:	f240 1210 	movw	r2, #272	; 0x110
    3880:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3884:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3886:	460b      	mov	r3, r1
    3888:	005b      	lsls	r3, r3, #1
    388a:	440b      	add	r3, r1
    388c:	009b      	lsls	r3, r3, #2
    388e:	4413      	add	r3, r2
    3890:	330c      	adds	r3, #12
    3892:	2202      	movs	r2, #2
    3894:	601a      	str	r2, [r3, #0]
    3896:	e00f      	b.n	38b8 <vR_Servant+0x180>
                    }
                    // find other relation which is relative to destinationtcb
                    else
                    {
                        // waiting for an events that is not arriving yet
                        if( xRelations.xRelation[i].xFlag == 1 )
    3898:	f240 1210 	movw	r2, #272	; 0x110
    389c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    38a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    38a2:	460b      	mov	r3, r1
    38a4:	005b      	lsls	r3, r3, #1
    38a6:	440b      	add	r3, r1
    38a8:	009b      	lsls	r3, r3, #2
    38aa:	4413      	add	r3, r2
    38ac:	330c      	adds	r3, #12
    38ae:	681b      	ldr	r3, [r3, #0]
    38b0:	2b01      	cmp	r3, #1
    38b2:	d101      	bne.n	38b8 <vR_Servant+0x180>
                        {
                            HAVE_TO_SEND_SEMAPHORE = 0;
    38b4:	2300      	movs	r3, #0
    38b6:	637b      	str	r3, [r7, #52]	; 0x34

            destinationTCB = xEventGetpxDestination( pxEventListItem->pvOwner);
            sourceTCB = xEventGetpxSource( pxEventListItem->pvOwner );
            HAVE_TO_SEND_SEMAPHORE = 1;  // set default 1

            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    38b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    38ba:	3301      	adds	r3, #1
    38bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    38be:	f240 1310 	movw	r3, #272	; 0x110
    38c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38c6:	681a      	ldr	r2, [r3, #0]
    38c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    38ca:	429a      	cmp	r2, r3
    38cc:	dc8e      	bgt.n	37ec <vR_Servant+0xb4>
        // init to zero
        HAVE_TO_SEND_SEMAPHORE = 0;

        // to see whether there is a servant need to be triggered.
        // This process could be preempted by Sensor servant.
        while(! HAVE_TO_SEND_SEMAPHORE)
    38ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    38d0:	2b00      	cmp	r3, #0
    38d2:	f43f af67 	beq.w	37a4 <vR_Servant+0x6c>
                }
            }
        } //  end inner while(1)

        // not time yet, R-Servant should be sleep until next period of any task
        if( xResult == -1 )
    38d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    38d8:	f1b3 3fff 	cmp.w	r3, #4294967295
    38dc:	d102      	bne.n	38e4 <vR_Servant+0x1ac>
        {
            vTaskDelayLET();
    38de:	f7ff fbdf 	bl	30a0 <vTaskDelayLET>
            //xCurrentTime = xTaskGetTickCount();
            //vPrintNumber( xCurrentTime );
            //vPrintNumber( (xMyFlag + 10) * 3 );
            continue; 
    38e2:	e049      	b.n	3978 <vR_Servant+0x240>
        }
        else if ( xResult == 0 )
    38e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    38e6:	2b00      	cmp	r3, #0
    38e8:	d102      	bne.n	38f0 <vR_Servant+0x1b8>
        {
            vTaskDelayLET();
    38ea:	f7ff fbd9 	bl	30a0 <vTaskDelayLET>
            //xCurrentTime = xTaskGetTickCount();
            //vPrintNumber( xCurrentTime );
            //vPrintNumber( (xMyFlag + 10) * 3 );
            //vPrintString("not time yet\n\r");
            continue;
    38ee:	e043      	b.n	3978 <vR_Servant+0x240>
        }
        else
        {
            // set all the relations whose destination S-Servant is xTaskOfHandle[i] to 1.
            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    38f0:	2300      	movs	r3, #0
    38f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    38f4:	e028      	b.n	3948 <vR_Servant+0x210>
            {
                xDest = xRelations.xRelation[i].xOutFlag;
    38f6:	f240 1210 	movw	r2, #272	; 0x110
    38fa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    38fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3900:	460b      	mov	r3, r1
    3902:	005b      	lsls	r3, r3, #1
    3904:	440b      	add	r3, r1
    3906:	009b      	lsls	r3, r3, #2
    3908:	4413      	add	r3, r2
    390a:	3308      	adds	r3, #8
    390c:	681b      	ldr	r3, [r3, #0]
    390e:	613b      	str	r3, [r7, #16]
                if( destinationTCB == xTaskOfHandle[xDest] )
    3910:	f240 73f0 	movw	r3, #2032	; 0x7f0
    3914:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3918:	693a      	ldr	r2, [r7, #16]
    391a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    391e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3920:	429a      	cmp	r2, r3
    3922:	d10e      	bne.n	3942 <vR_Servant+0x20a>
                {
                    xRelations.xRelation[i].xFlag = 1;
    3924:	f240 1210 	movw	r2, #272	; 0x110
    3928:	f2c2 0200 	movt	r2, #8192	; 0x2000
    392c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    392e:	460b      	mov	r3, r1
    3930:	005b      	lsls	r3, r3, #1
    3932:	440b      	add	r3, r1
    3934:	009b      	lsls	r3, r3, #2
    3936:	4413      	add	r3, r2
    3938:	330c      	adds	r3, #12
    393a:	2201      	movs	r2, #1
    393c:	601a      	str	r2, [r3, #0]
                    // record the number of destinationtcb in xTaskOfHandle array.
                    j = xDest;
    393e:	693b      	ldr	r3, [r7, #16]
    3940:	63bb      	str	r3, [r7, #56]	; 0x38
            continue;
        }
        else
        {
            // set all the relations whose destination S-Servant is xTaskOfHandle[i] to 1.
            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3944:	3301      	adds	r3, #1
    3946:	63fb      	str	r3, [r7, #60]	; 0x3c
    3948:	f240 1310 	movw	r3, #272	; 0x110
    394c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3950:	681a      	ldr	r2, [r3, #0]
    3952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3954:	429a      	cmp	r2, r3
    3956:	dcce      	bgt.n	38f6 <vR_Servant+0x1be>
                    // record the number of destinationtcb in xTaskOfHandle array.
                    j = xDest;
                }
            }

            vTaskDelayLET();
    3958:	f7ff fba2 	bl	30a0 <vTaskDelayLET>
            //xCurrentTime = xTaskGetTickCount();
            //vPrintNumber( xCurrentTime );
            //vPrintNumber( (xMyFlag + 10) * 3 );

            // send semaphore to destinationtcb
            xSemaphoreGive( xBinarySemaphore[j] );
    395c:	f240 7398 	movw	r3, #1944	; 0x798
    3960:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3964:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    396a:	4618      	mov	r0, r3
    396c:	2100      	movs	r1, #0
    396e:	2200      	movs	r2, #0
    3970:	2300      	movs	r3, #0
    3972:	f000 faa5 	bl	3ec0 <xQueueGenericSend>
        }
    }
    3976:	e6f6      	b.n	3766 <vR_Servant+0x2e>
    3978:	e6f5      	b.n	3766 <vR_Servant+0x2e>
    397a:	bf00      	nop

0000397c <s_0>:
 * 3) s_2
 * 4) s_3
 * 5) actuator 4
 * */
void s_0(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    397c:	b580      	push	{r7, lr}
    397e:	b084      	sub	sp, #16
    3980:	af00      	add	r7, sp, #0
    3982:	60f8      	str	r0, [r7, #12]
    3984:	60b9      	str	r1, [r7, #8]
    3986:	607a      	str	r2, [r7, #4]
    3988:	603b      	str	r3, [r7, #0]
    //vPrintString("Task 1 start ###############\n\r");
    last_radio_from_ppm(); // ppm.h
    398a:	f012 f911 	bl	15bb0 <last_radio_from_ppm>
}
    398e:	3710      	adds	r7, #16
    3990:	46bd      	mov	sp, r7
    3992:	bd80      	pop	{r7, pc}

00003994 <s_1>:
void s_1(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3994:	b480      	push	{r7}
    3996:	b085      	sub	sp, #20
    3998:	af00      	add	r7, sp, #0
    399a:	60f8      	str	r0, [r7, #12]
    399c:	60b9      	str	r1, [r7, #8]
    399e:	607a      	str	r2, [r7, #4]
    39a0:	603b      	str	r3, [r7, #0]
    //vPrintString("s_0\n\r");
    //servo_set();  // servo.h, this function is used by multitask which in terms of multiuse of Servant. And this
                    // is not implemented now. So cancel.
}
    39a2:	3714      	adds	r7, #20
    39a4:	46bd      	mov	sp, r7
    39a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    39aa:	4770      	bx	lr

000039ac <s_2>:
void s_2(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    39ac:	b580      	push	{r7, lr}
    39ae:	b084      	sub	sp, #16
    39b0:	af00      	add	r7, sp, #0
    39b2:	60f8      	str	r0, [r7, #12]
    39b4:	60b9      	str	r1, [r7, #8]
    39b6:	607a      	str	r2, [r7, #4]
    39b8:	603b      	str	r3, [r7, #0]

    //vPrintString("s_1\n\r");
    to_autopilot_from_last_radio(); // main.c
    39ba:	f012 fcb3 	bl	16324 <to_autopilot_from_last_radio>
}
    39be:	3710      	adds	r7, #16
    39c0:	46bd      	mov	sp, r7
    39c2:	bd80      	pop	{r7, pc}

000039c4 <s_3>:

void s_3(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    39c4:	b580      	push	{r7, lr}
    39c6:	b084      	sub	sp, #16
    39c8:	af00      	add	r7, sp, #0
    39ca:	60f8      	str	r0, [r7, #12]
    39cc:	60b9      	str	r1, [r7, #8]
    39ce:	607a      	str	r2, [r7, #4]
    39d0:	603b      	str	r3, [r7, #0]

    spi_reset(); // spi_fbw.h
    39d2:	f012 fbe5 	bl	161a0 <spi_reset>
}
    39d6:	3710      	adds	r7, #16
    39d8:	46bd      	mov	sp, r7
    39da:	bd80      	pop	{r7, pc}

000039dc <s_4>:
void s_4(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    39dc:	b580      	push	{r7, lr}
    39de:	b084      	sub	sp, #16
    39e0:	af00      	add	r7, sp, #0
    39e2:	60f8      	str	r0, [r7, #12]
    39e4:	60b9      	str	r1, [r7, #8]
    39e6:	607a      	str	r2, [r7, #4]
    39e8:	603b      	str	r3, [r7, #0]
    //vPrintString("Task 1 end ###############\n\r");
    check_mega128_values_task(); // main.c
    39ea:	f012 fde3 	bl	165b4 <check_mega128_values_task>
}
    39ee:	3710      	adds	r7, #16
    39f0:	46bd      	mov	sp, r7
    39f2:	bd80      	pop	{r7, pc}

000039f4 <s_5>:

void s_5(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    39f4:	b580      	push	{r7, lr}
    39f6:	b084      	sub	sp, #16
    39f8:	af00      	add	r7, sp, #0
    39fa:	60f8      	str	r0, [r7, #12]
    39fc:	60b9      	str	r1, [r7, #8]
    39fe:	607a      	str	r2, [r7, #4]
    3a00:	603b      	str	r3, [r7, #0]
    //vPrintString("Task 2 start+++++++++++++++++++\n\r");
    servo_transmit(); //servo.h
    3a02:	f012 feaf 	bl	16764 <servo_transmit>
}
    3a06:	3710      	adds	r7, #16
    3a08:	46bd      	mov	sp, r7
    3a0a:	bd80      	pop	{r7, pc}

00003a0c <s_6>:

void s_6(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3a0c:	b580      	push	{r7, lr}
    3a0e:	b084      	sub	sp, #16
    3a10:	af00      	add	r7, sp, #0
    3a12:	60f8      	str	r0, [r7, #12]
    3a14:	60b9      	str	r1, [r7, #8]
    3a16:	607a      	str	r2, [r7, #4]
    3a18:	603b      	str	r3, [r7, #0]
    //vPrintString("s_2\n\r");
    check_failsafe_task(); // main.c
    3a1a:	f012 fdc1 	bl	165a0 <check_failsafe_task>
}
    3a1e:	3710      	adds	r7, #16
    3a20:	46bd      	mov	sp, r7
    3a22:	bd80      	pop	{r7, pc}

00003a24 <s_7>:
void s_7(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3a24:	b580      	push	{r7, lr}
    3a26:	b084      	sub	sp, #16
    3a28:	af00      	add	r7, sp, #0
    3a2a:	60f8      	str	r0, [r7, #12]
    3a2c:	60b9      	str	r1, [r7, #8]
    3a2e:	607a      	str	r2, [r7, #4]
    3a30:	603b      	str	r3, [r7, #0]

    //vPrintString("s_7\n\r");
     //inflight_calib(pdTRUE); // inflight_calib.h
     //inflight_calib(pdTRUE); // main_auto.c , we transfer this function into main.c because of bugs if not 
     radio_control_task();
    3a32:	f009 f84f 	bl	cad4 <radio_control_task>
}
    3a36:	3710      	adds	r7, #16
    3a38:	46bd      	mov	sp, r7
    3a3a:	bd80      	pop	{r7, pc}

00003a3c <s_8>:
void s_8(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3a3c:	b580      	push	{r7, lr}
    3a3e:	b084      	sub	sp, #16
    3a40:	af00      	add	r7, sp, #0
    3a42:	60f8      	str	r0, [r7, #12]
    3a44:	60b9      	str	r1, [r7, #8]
    3a46:	607a      	str	r2, [r7, #4]
    3a48:	603b      	str	r3, [r7, #0]
    //check_mega128_values_task(); // link_autopilot.h
    ir_gain_calib(); //infrared.h
    3a4a:	f00d fef5 	bl	11838 <ir_gain_calib>
}
    3a4e:	3710      	adds	r7, #16
    3a50:	46bd      	mov	sp, r7
    3a52:	bd80      	pop	{r7, pc}

00003a54 <s_9>:
void s_9(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData)
{
    3a54:	b580      	push	{r7, lr}
    3a56:	b084      	sub	sp, #16
    3a58:	af00      	add	r7, sp, #0
    3a5a:	60f8      	str	r0, [r7, #12]
    3a5c:	60b9      	str	r1, [r7, #8]
    3a5e:	607a      	str	r2, [r7, #4]
    3a60:	603b      	str	r3, [r7, #0]
    
    ir_update(); // infrared.h
    3a62:	f00d feab 	bl	117bc <ir_update>
}
    3a66:	3710      	adds	r7, #16
    3a68:	46bd      	mov	sp, r7
    3a6a:	bd80      	pop	{r7, pc}

00003a6c <s_10>:
void s_10(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3a6c:	b580      	push	{r7, lr}
    3a6e:	b084      	sub	sp, #16
    3a70:	af00      	add	r7, sp, #0
    3a72:	60f8      	str	r0, [r7, #12]
    3a74:	60b9      	str	r1, [r7, #8]
    3a76:	607a      	str	r2, [r7, #4]
    3a78:	603b      	str	r3, [r7, #0]

    //vPrintString("s_3\n\r");
    //servo_transmit();  // servo.h
    estimator_update_state_infrared(); //estimator.h
    3a7a:	f011 f927 	bl	14ccc <estimator_update_state_infrared>
}
    3a7e:	3710      	adds	r7, #16
    3a80:	46bd      	mov	sp, r7
    3a82:	bd80      	pop	{r7, pc}

00003a84 <s_11>:
void s_11(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3a84:	b580      	push	{r7, lr}
    3a86:	b084      	sub	sp, #16
    3a88:	af00      	add	r7, sp, #0
    3a8a:	60f8      	str	r0, [r7, #12]
    3a8c:	60b9      	str	r1, [r7, #8]
    3a8e:	607a      	str	r2, [r7, #4]
    3a90:	603b      	str	r3, [r7, #0]
    //vPrintString("Task 2 end +++++++++++++++++++\n\r");
    roll_pitch_pid_run(); // pid.h
    3a92:	f00d ff01 	bl	11898 <roll_pitch_pid_run>
}
    3a96:	3710      	adds	r7, #16
    3a98:	46bd      	mov	sp, r7
    3a9a:	bd80      	pop	{r7, pc}

00003a9c <s_12>:

void s_12(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3a9c:	b580      	push	{r7, lr}
    3a9e:	b084      	sub	sp, #16
    3aa0:	af00      	add	r7, sp, #0
    3aa2:	60f8      	str	r0, [r7, #12]
    3aa4:	60b9      	str	r1, [r7, #8]
    3aa6:	607a      	str	r2, [r7, #4]
    3aa8:	603b      	str	r3, [r7, #0]
    //vPrintString("Task 3 start---------------------\n\r");
    link_fbw_send(); //link_fbw.h
    3aaa:	f00d f8f9 	bl	10ca0 <link_fbw_send>
}
    3aae:	3710      	adds	r7, #16
    3ab0:	46bd      	mov	sp, r7
    3ab2:	bd80      	pop	{r7, pc}

00003ab4 <s_13>:
void s_13(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3ab4:	b580      	push	{r7, lr}
    3ab6:	b084      	sub	sp, #16
    3ab8:	af00      	add	r7, sp, #0
    3aba:	60f8      	str	r0, [r7, #12]
    3abc:	60b9      	str	r1, [r7, #8]
    3abe:	607a      	str	r2, [r7, #4]
    3ac0:	603b      	str	r3, [r7, #0]
    
    //vPrintString("s_12\n\r");
    parse_gps_msg(); //gps.h
    3ac2:	f00d fbc5 	bl	11250 <parse_gps_msg>
}
    3ac6:	3710      	adds	r7, #16
    3ac8:	46bd      	mov	sp, r7
    3aca:	bd80      	pop	{r7, pc}

00003acc <s_14>:

void s_14(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3acc:	b580      	push	{r7, lr}
    3ace:	b084      	sub	sp, #16
    3ad0:	af00      	add	r7, sp, #0
    3ad2:	60f8      	str	r0, [r7, #12]
    3ad4:	60b9      	str	r1, [r7, #8]
    3ad6:	607a      	str	r2, [r7, #4]
    3ad8:	603b      	str	r3, [r7, #0]
    //vPrintString("Task 3 end ----------------------\n\r");
    //use_gps_pos(); // autopilot.h  is not implemeted.
    send_gps_pos();
    3ada:	f00a fde1 	bl	e6a0 <send_gps_pos>
    send_radIR();
    3ade:	f00b ffa5 	bl	fa2c <send_radIR>
    send_takeOff();
    3ae2:	f00c fd9d 	bl	10620 <send_takeOff>
}
    3ae6:	3710      	adds	r7, #16
    3ae8:	46bd      	mov	sp, r7
    3aea:	bd80      	pop	{r7, pc}

00003aec <s_15>:


void s_15(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3aec:	b580      	push	{r7, lr}
    3aee:	b084      	sub	sp, #16
    3af0:	af00      	add	r7, sp, #0
    3af2:	60f8      	str	r0, [r7, #12]
    3af4:	60b9      	str	r1, [r7, #8]
    3af6:	607a      	str	r2, [r7, #4]
    3af8:	603b      	str	r3, [r7, #0]
    //vPrintString("Task 4 start********************\n\r");
    nav_home(); // nav.h
    3afa:	f010 fe69 	bl	147d0 <nav_home>
}
    3afe:	3710      	adds	r7, #16
    3b00:	46bd      	mov	sp, r7
    3b02:	bd80      	pop	{r7, pc}

00003b04 <s_16>:
void s_16(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3b04:	b580      	push	{r7, lr}
    3b06:	b084      	sub	sp, #16
    3b08:	af00      	add	r7, sp, #0
    3b0a:	60f8      	str	r0, [r7, #12]
    3b0c:	60b9      	str	r1, [r7, #8]
    3b0e:	607a      	str	r2, [r7, #4]
    3b10:	603b      	str	r3, [r7, #0]
    
    //vPrintString("s_8\n\r");
    nav_update(); // nav.h
    3b12:	f010 fe83 	bl	1481c <nav_update>
}
    3b16:	3710      	adds	r7, #16
    3b18:	46bd      	mov	sp, r7
    3b1a:	bd80      	pop	{r7, pc}

00003b1c <s_17>:

void s_17(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3b1c:	b580      	push	{r7, lr}
    3b1e:	b084      	sub	sp, #16
    3b20:	af00      	add	r7, sp, #0
    3b22:	60f8      	str	r0, [r7, #12]
    3b24:	60b9      	str	r1, [r7, #8]
    3b26:	607a      	str	r2, [r7, #4]
    3b28:	603b      	str	r3, [r7, #0]
    course_pid_run(); // pid.h
    3b2a:	f00d ffa1 	bl	11a70 <course_pid_run>
}
    3b2e:	3710      	adds	r7, #16
    3b30:	46bd      	mov	sp, r7
    3b32:	bd80      	pop	{r7, pc}

00003b34 <s_18>:
void s_18(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3b34:	b580      	push	{r7, lr}
    3b36:	b084      	sub	sp, #16
    3b38:	af00      	add	r7, sp, #0
    3b3a:	60f8      	str	r0, [r7, #12]
    3b3c:	60b9      	str	r1, [r7, #8]
    3b3e:	607a      	str	r2, [r7, #4]
    3b40:	603b      	str	r3, [r7, #0]
    altitude_pid_run(); // pid.h
    3b42:	f00e fa1d 	bl	11f80 <altitude_pid_run>
}
    3b46:	3710      	adds	r7, #16
    3b48:	46bd      	mov	sp, r7
    3b4a:	bd80      	pop	{r7, pc}

00003b4c <s_19>:
void s_19(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData)
{
    3b4c:	b580      	push	{r7, lr}
    3b4e:	b084      	sub	sp, #16
    3b50:	af00      	add	r7, sp, #0
    3b52:	60f8      	str	r0, [r7, #12]
    3b54:	60b9      	str	r1, [r7, #8]
    3b56:	607a      	str	r2, [r7, #4]
    3b58:	603b      	str	r3, [r7, #0]
    climb_pid_run(); // pid.h
    3b5a:	f00e f841 	bl	11be0 <climb_pid_run>
}
    3b5e:	3710      	adds	r7, #16
    3b60:	46bd      	mov	sp, r7
    3b62:	bd80      	pop	{r7, pc}

00003b64 <s_20>:
void s_20(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3b64:	b580      	push	{r7, lr}
    3b66:	b084      	sub	sp, #16
    3b68:	af00      	add	r7, sp, #0
    3b6a:	60f8      	str	r0, [r7, #12]
    3b6c:	60b9      	str	r1, [r7, #8]
    3b6e:	607a      	str	r2, [r7, #4]
    3b70:	603b      	str	r3, [r7, #0]
    // main.c
    send_boot();
    3b72:	f003 fa77 	bl	7064 <send_boot>
    send_attitude();
    3b76:	f004 fa45 	bl	8004 <send_attitude>
    send_adc();
    3b7a:	f004 ff37 	bl	89ec <send_adc>
    send_settings();
    3b7e:	f005 f9bd 	bl	8efc <send_settings>
    send_desired();
    3b82:	f005 fdbf 	bl	9704 <send_desired>
    send_bat();
    3b86:	f006 fced 	bl	a564 <send_bat>
    send_climb();
    3b8a:	f007 f8a1 	bl	acd0 <send_climb>
    send_mode();
    3b8e:	f007 fe11 	bl	b7b4 <send_mode>
    send_debug();
    3b92:	f008 f8e3 	bl	bd5c <send_debug>
    send_nav_ref();
    3b96:	f008 fbb7 	bl	c308 <send_nav_ref>
}
    3b9a:	3710      	adds	r7, #16
    3b9c:	46bd      	mov	sp, r7
    3b9e:	bd80      	pop	{r7, pc}

00003ba0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    3ba0:	b480      	push	{r7}
    3ba2:	b083      	sub	sp, #12
    3ba4:	af00      	add	r7, sp, #0
    3ba6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    3ba8:	687b      	ldr	r3, [r7, #4]
    3baa:	f103 0208 	add.w	r2, r3, #8
    3bae:	687b      	ldr	r3, [r7, #4]
    3bb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    3bb2:	687b      	ldr	r3, [r7, #4]
    3bb4:	f04f 32ff 	mov.w	r2, #4294967295
    3bb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    3bba:	687b      	ldr	r3, [r7, #4]
    3bbc:	f103 0208 	add.w	r2, r3, #8
    3bc0:	687b      	ldr	r3, [r7, #4]
    3bc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    3bc4:	687b      	ldr	r3, [r7, #4]
    3bc6:	f103 0208 	add.w	r2, r3, #8
    3bca:	687b      	ldr	r3, [r7, #4]
    3bcc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    3bce:	687b      	ldr	r3, [r7, #4]
    3bd0:	2200      	movs	r2, #0
    3bd2:	601a      	str	r2, [r3, #0]
}
    3bd4:	370c      	adds	r7, #12
    3bd6:	46bd      	mov	sp, r7
    3bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bdc:	4770      	bx	lr
    3bde:	bf00      	nop

00003be0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    3be0:	b480      	push	{r7}
    3be2:	b083      	sub	sp, #12
    3be4:	af00      	add	r7, sp, #0
    3be6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    3be8:	687b      	ldr	r3, [r7, #4]
    3bea:	2200      	movs	r2, #0
    3bec:	611a      	str	r2, [r3, #16]
}
    3bee:	370c      	adds	r7, #12
    3bf0:	46bd      	mov	sp, r7
    3bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bf6:	4770      	bx	lr

00003bf8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    3bf8:	b480      	push	{r7}
    3bfa:	b085      	sub	sp, #20
    3bfc:	af00      	add	r7, sp, #0
    3bfe:	6078      	str	r0, [r7, #4]
    3c00:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    3c02:	687b      	ldr	r3, [r7, #4]
    3c04:	685b      	ldr	r3, [r3, #4]
    3c06:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    3c08:	68fb      	ldr	r3, [r7, #12]
    3c0a:	685a      	ldr	r2, [r3, #4]
    3c0c:	683b      	ldr	r3, [r7, #0]
    3c0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    3c10:	687b      	ldr	r3, [r7, #4]
    3c12:	685a      	ldr	r2, [r3, #4]
    3c14:	683b      	ldr	r3, [r7, #0]
    3c16:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    3c18:	68fb      	ldr	r3, [r7, #12]
    3c1a:	685b      	ldr	r3, [r3, #4]
    3c1c:	683a      	ldr	r2, [r7, #0]
    3c1e:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    3c20:	68fb      	ldr	r3, [r7, #12]
    3c22:	683a      	ldr	r2, [r7, #0]
    3c24:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    3c26:	687b      	ldr	r3, [r7, #4]
    3c28:	683a      	ldr	r2, [r7, #0]
    3c2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3c2c:	683b      	ldr	r3, [r7, #0]
    3c2e:	687a      	ldr	r2, [r7, #4]
    3c30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    3c32:	687b      	ldr	r3, [r7, #4]
    3c34:	681b      	ldr	r3, [r3, #0]
    3c36:	1c5a      	adds	r2, r3, #1
    3c38:	687b      	ldr	r3, [r7, #4]
    3c3a:	601a      	str	r2, [r3, #0]
}
    3c3c:	3714      	adds	r7, #20
    3c3e:	46bd      	mov	sp, r7
    3c40:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c44:	4770      	bx	lr
    3c46:	bf00      	nop

00003c48 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    3c48:	b480      	push	{r7}
    3c4a:	b085      	sub	sp, #20
    3c4c:	af00      	add	r7, sp, #0
    3c4e:	6078      	str	r0, [r7, #4]
    3c50:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    3c52:	683b      	ldr	r3, [r7, #0]
    3c54:	681b      	ldr	r3, [r3, #0]
    3c56:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    3c58:	68bb      	ldr	r3, [r7, #8]
    3c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
    3c5e:	d103      	bne.n	3c68 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    3c60:	687b      	ldr	r3, [r7, #4]
    3c62:	691b      	ldr	r3, [r3, #16]
    3c64:	60fb      	str	r3, [r7, #12]
    3c66:	e00c      	b.n	3c82 <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    3c68:	687b      	ldr	r3, [r7, #4]
    3c6a:	3308      	adds	r3, #8
    3c6c:	60fb      	str	r3, [r7, #12]
    3c6e:	e002      	b.n	3c76 <vListInsert+0x2e>
    3c70:	68fb      	ldr	r3, [r7, #12]
    3c72:	685b      	ldr	r3, [r3, #4]
    3c74:	60fb      	str	r3, [r7, #12]
    3c76:	68fb      	ldr	r3, [r7, #12]
    3c78:	685b      	ldr	r3, [r3, #4]
    3c7a:	681a      	ldr	r2, [r3, #0]
    3c7c:	68bb      	ldr	r3, [r7, #8]
    3c7e:	429a      	cmp	r2, r3
    3c80:	d9f6      	bls.n	3c70 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    3c82:	68fb      	ldr	r3, [r7, #12]
    3c84:	685a      	ldr	r2, [r3, #4]
    3c86:	683b      	ldr	r3, [r7, #0]
    3c88:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    3c8a:	683b      	ldr	r3, [r7, #0]
    3c8c:	685b      	ldr	r3, [r3, #4]
    3c8e:	683a      	ldr	r2, [r7, #0]
    3c90:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    3c92:	683b      	ldr	r3, [r7, #0]
    3c94:	68fa      	ldr	r2, [r7, #12]
    3c96:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    3c98:	68fb      	ldr	r3, [r7, #12]
    3c9a:	683a      	ldr	r2, [r7, #0]
    3c9c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3c9e:	683b      	ldr	r3, [r7, #0]
    3ca0:	687a      	ldr	r2, [r7, #4]
    3ca2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    3ca4:	687b      	ldr	r3, [r7, #4]
    3ca6:	681b      	ldr	r3, [r3, #0]
    3ca8:	1c5a      	adds	r2, r3, #1
    3caa:	687b      	ldr	r3, [r7, #4]
    3cac:	601a      	str	r2, [r3, #0]
}
    3cae:	3714      	adds	r7, #20
    3cb0:	46bd      	mov	sp, r7
    3cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cb6:	4770      	bx	lr

00003cb8 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    3cb8:	b480      	push	{r7}
    3cba:	b085      	sub	sp, #20
    3cbc:	af00      	add	r7, sp, #0
    3cbe:	6078      	str	r0, [r7, #4]
    xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    3cc0:	687b      	ldr	r3, [r7, #4]
    3cc2:	685b      	ldr	r3, [r3, #4]
    3cc4:	687a      	ldr	r2, [r7, #4]
    3cc6:	6892      	ldr	r2, [r2, #8]
    3cc8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    3cca:	687b      	ldr	r3, [r7, #4]
    3ccc:	689b      	ldr	r3, [r3, #8]
    3cce:	687a      	ldr	r2, [r7, #4]
    3cd0:	6852      	ldr	r2, [r2, #4]
    3cd2:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    3cd4:	687b      	ldr	r3, [r7, #4]
    3cd6:	691b      	ldr	r3, [r3, #16]
    3cd8:	60fb      	str	r3, [r7, #12]
	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    3cda:	68fb      	ldr	r3, [r7, #12]
    3cdc:	685a      	ldr	r2, [r3, #4]
    3cde:	687b      	ldr	r3, [r7, #4]
    3ce0:	429a      	cmp	r2, r3
    3ce2:	d103      	bne.n	3cec <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    3ce4:	687b      	ldr	r3, [r7, #4]
    3ce6:	689a      	ldr	r2, [r3, #8]
    3ce8:	68fb      	ldr	r3, [r7, #12]
    3cea:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    3cec:	687b      	ldr	r3, [r7, #4]
    3cee:	2200      	movs	r2, #0
    3cf0:	611a      	str	r2, [r3, #16]
	(pxList->uxNumberOfItems)--;
    3cf2:	68fb      	ldr	r3, [r7, #12]
    3cf4:	681b      	ldr	r3, [r3, #0]
    3cf6:	1e5a      	subs	r2, r3, #1
    3cf8:	68fb      	ldr	r3, [r7, #12]
    3cfa:	601a      	str	r2, [r3, #0]
}
    3cfc:	3714      	adds	r7, #20
    3cfe:	46bd      	mov	sp, r7
    3d00:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d04:	4770      	bx	lr
    3d06:	bf00      	nop

00003d08 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    3d08:	b580      	push	{r7, lr}
    3d0a:	b084      	sub	sp, #16
    3d0c:	af00      	add	r7, sp, #0
    3d0e:	6078      	str	r0, [r7, #4]
    3d10:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    3d12:	2301      	movs	r3, #1
    3d14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    3d16:	683b      	ldr	r3, [r7, #0]
    3d18:	2b01      	cmp	r3, #1
    3d1a:	d00b      	beq.n	3d34 <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3d1c:	687b      	ldr	r3, [r7, #4]
    3d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3d20:	2b00      	cmp	r3, #0
    3d22:	d001      	beq.n	3d28 <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    3d24:	2300      	movs	r3, #0
    3d26:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3d28:	687b      	ldr	r3, [r7, #4]
    3d2a:	691b      	ldr	r3, [r3, #16]
    3d2c:	2b00      	cmp	r3, #0
    3d2e:	d001      	beq.n	3d34 <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    3d30:	2300      	movs	r3, #0
    3d32:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    3d34:	68fb      	ldr	r3, [r7, #12]
    3d36:	2b01      	cmp	r3, #1
    3d38:	d12f      	bne.n	3d9a <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    3d3a:	687b      	ldr	r3, [r7, #4]
    3d3c:	681a      	ldr	r2, [r3, #0]
    3d3e:	687b      	ldr	r3, [r7, #4]
    3d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3d42:	6879      	ldr	r1, [r7, #4]
    3d44:	6c09      	ldr	r1, [r1, #64]	; 0x40
    3d46:	fb01 f303 	mul.w	r3, r1, r3
    3d4a:	441a      	add	r2, r3
    3d4c:	687b      	ldr	r3, [r7, #4]
    3d4e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    3d50:	687b      	ldr	r3, [r7, #4]
    3d52:	2200      	movs	r2, #0
    3d54:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    3d56:	687b      	ldr	r3, [r7, #4]
    3d58:	681a      	ldr	r2, [r3, #0]
    3d5a:	687b      	ldr	r3, [r7, #4]
    3d5c:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    3d5e:	687b      	ldr	r3, [r7, #4]
    3d60:	681a      	ldr	r2, [r3, #0]
    3d62:	687b      	ldr	r3, [r7, #4]
    3d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3d66:	3b01      	subs	r3, #1
    3d68:	6879      	ldr	r1, [r7, #4]
    3d6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
    3d6c:	fb01 f303 	mul.w	r3, r1, r3
    3d70:	441a      	add	r2, r3
    3d72:	687b      	ldr	r3, [r7, #4]
    3d74:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    3d76:	687b      	ldr	r3, [r7, #4]
    3d78:	f04f 32ff 	mov.w	r2, #4294967295
    3d7c:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    3d7e:	687b      	ldr	r3, [r7, #4]
    3d80:	f04f 32ff 	mov.w	r2, #4294967295
    3d84:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    3d86:	687b      	ldr	r3, [r7, #4]
    3d88:	3310      	adds	r3, #16
    3d8a:	4618      	mov	r0, r3
    3d8c:	f7ff ff08 	bl	3ba0 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    3d90:	687b      	ldr	r3, [r7, #4]
    3d92:	3324      	adds	r3, #36	; 0x24
    3d94:	4618      	mov	r0, r3
    3d96:	f7ff ff03 	bl	3ba0 <vListInitialise>
	}

	return xReturn;
    3d9a:	68fb      	ldr	r3, [r7, #12]
}
    3d9c:	4618      	mov	r0, r3
    3d9e:	3710      	adds	r7, #16
    3da0:	46bd      	mov	sp, r7
    3da2:	bd80      	pop	{r7, pc}

00003da4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    3da4:	b580      	push	{r7, lr}
    3da6:	b088      	sub	sp, #32
    3da8:	af00      	add	r7, sp, #0
    3daa:	60f8      	str	r0, [r7, #12]
    3dac:	60b9      	str	r1, [r7, #8]
    3dae:	4613      	mov	r3, r2
    3db0:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    3db2:	2300      	movs	r3, #0
    3db4:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    3db6:	68fb      	ldr	r3, [r7, #12]
    3db8:	2b00      	cmp	r3, #0
    3dba:	d026      	beq.n	3e0a <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    3dbc:	204c      	movs	r0, #76	; 0x4c
    3dbe:	f001 fda7 	bl	5910 <pvPortMalloc>
    3dc2:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    3dc4:	69bb      	ldr	r3, [r7, #24]
    3dc6:	2b00      	cmp	r3, #0
    3dc8:	d01f      	beq.n	3e0a <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    3dca:	68fb      	ldr	r3, [r7, #12]
    3dcc:	68ba      	ldr	r2, [r7, #8]
    3dce:	fb02 f303 	mul.w	r3, r2, r3
    3dd2:	3301      	adds	r3, #1
    3dd4:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    3dd6:	6978      	ldr	r0, [r7, #20]
    3dd8:	f001 fd9a 	bl	5910 <pvPortMalloc>
    3ddc:	4602      	mov	r2, r0
    3dde:	69bb      	ldr	r3, [r7, #24]
    3de0:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    3de2:	69bb      	ldr	r3, [r7, #24]
    3de4:	681b      	ldr	r3, [r3, #0]
    3de6:	2b00      	cmp	r3, #0
    3de8:	d00c      	beq.n	3e04 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    3dea:	69bb      	ldr	r3, [r7, #24]
    3dec:	68fa      	ldr	r2, [r7, #12]
    3dee:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    3df0:	69bb      	ldr	r3, [r7, #24]
    3df2:	68ba      	ldr	r2, [r7, #8]
    3df4:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    3df6:	69b8      	ldr	r0, [r7, #24]
    3df8:	2101      	movs	r1, #1
    3dfa:	f7ff ff85 	bl	3d08 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    3dfe:	69bb      	ldr	r3, [r7, #24]
    3e00:	61fb      	str	r3, [r7, #28]
    3e02:	e002      	b.n	3e0a <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    3e04:	69b8      	ldr	r0, [r7, #24]
    3e06:	f001 fe47 	bl	5a98 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    3e0a:	69fb      	ldr	r3, [r7, #28]
}
    3e0c:	4618      	mov	r0, r3
    3e0e:	3720      	adds	r7, #32
    3e10:	46bd      	mov	sp, r7
    3e12:	bd80      	pop	{r7, pc}

00003e14 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    3e14:	b580      	push	{r7, lr}
    3e16:	b084      	sub	sp, #16
    3e18:	af00      	add	r7, sp, #0
    3e1a:	4603      	mov	r3, r0
    3e1c:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    3e1e:	204c      	movs	r0, #76	; 0x4c
    3e20:	f001 fd76 	bl	5910 <pvPortMalloc>
    3e24:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    3e26:	68fb      	ldr	r3, [r7, #12]
    3e28:	2b00      	cmp	r3, #0
    3e2a:	d02c      	beq.n	3e86 <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    3e2c:	68fb      	ldr	r3, [r7, #12]
    3e2e:	2200      	movs	r2, #0
    3e30:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    3e32:	68fb      	ldr	r3, [r7, #12]
    3e34:	2200      	movs	r2, #0
    3e36:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    3e38:	68fb      	ldr	r3, [r7, #12]
    3e3a:	2200      	movs	r2, #0
    3e3c:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    3e3e:	68fb      	ldr	r3, [r7, #12]
    3e40:	2200      	movs	r2, #0
    3e42:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    3e44:	68fb      	ldr	r3, [r7, #12]
    3e46:	2200      	movs	r2, #0
    3e48:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    3e4a:	68fb      	ldr	r3, [r7, #12]
    3e4c:	2201      	movs	r2, #1
    3e4e:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    3e50:	68fb      	ldr	r3, [r7, #12]
    3e52:	2200      	movs	r2, #0
    3e54:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    3e56:	68fb      	ldr	r3, [r7, #12]
    3e58:	f04f 32ff 	mov.w	r2, #4294967295
    3e5c:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    3e5e:	68fb      	ldr	r3, [r7, #12]
    3e60:	f04f 32ff 	mov.w	r2, #4294967295
    3e64:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    3e66:	68fb      	ldr	r3, [r7, #12]
    3e68:	3310      	adds	r3, #16
    3e6a:	4618      	mov	r0, r3
    3e6c:	f7ff fe98 	bl	3ba0 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    3e70:	68fb      	ldr	r3, [r7, #12]
    3e72:	3324      	adds	r3, #36	; 0x24
    3e74:	4618      	mov	r0, r3
    3e76:	f7ff fe93 	bl	3ba0 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    3e7a:	68f8      	ldr	r0, [r7, #12]
    3e7c:	2100      	movs	r1, #0
    3e7e:	2200      	movs	r2, #0
    3e80:	2300      	movs	r3, #0
    3e82:	f000 f81d 	bl	3ec0 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    3e86:	68fb      	ldr	r3, [r7, #12]
	}
    3e88:	4618      	mov	r0, r3
    3e8a:	3710      	adds	r7, #16
    3e8c:	46bd      	mov	sp, r7
    3e8e:	bd80      	pop	{r7, pc}

00003e90 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    3e90:	b580      	push	{r7, lr}
    3e92:	b084      	sub	sp, #16
    3e94:	af00      	add	r7, sp, #0
    3e96:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    3e98:	f001 fcc0 	bl	581c <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    3e9c:	687b      	ldr	r3, [r7, #4]
    3e9e:	681b      	ldr	r3, [r3, #0]
    3ea0:	2b00      	cmp	r3, #0
    3ea2:	d103      	bne.n	3eac <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    3ea4:	687b      	ldr	r3, [r7, #4]
    3ea6:	685b      	ldr	r3, [r3, #4]
    3ea8:	60fb      	str	r3, [r7, #12]
    3eaa:	e001      	b.n	3eb0 <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    3eac:	2300      	movs	r3, #0
    3eae:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    3eb0:	f001 fcca 	bl	5848 <vPortExitCritical>
		
		return pxReturn;
    3eb4:	68fb      	ldr	r3, [r7, #12]
	}
    3eb6:	4618      	mov	r0, r3
    3eb8:	3710      	adds	r7, #16
    3eba:	46bd      	mov	sp, r7
    3ebc:	bd80      	pop	{r7, pc}
    3ebe:	bf00      	nop

00003ec0 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    3ec0:	b580      	push	{r7, lr}
    3ec2:	b088      	sub	sp, #32
    3ec4:	af00      	add	r7, sp, #0
    3ec6:	60f8      	str	r0, [r7, #12]
    3ec8:	60b9      	str	r1, [r7, #8]
    3eca:	607a      	str	r2, [r7, #4]
    3ecc:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    3ece:	2300      	movs	r3, #0
    3ed0:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    3ed2:	f001 fca3 	bl	581c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    3ed6:	68fb      	ldr	r3, [r7, #12]
    3ed8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3eda:	68fb      	ldr	r3, [r7, #12]
    3edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3ede:	429a      	cmp	r2, r3
    3ee0:	d216      	bcs.n	3f10 <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3ee2:	68f8      	ldr	r0, [r7, #12]
    3ee4:	68b9      	ldr	r1, [r7, #8]
    3ee6:	683a      	ldr	r2, [r7, #0]
    3ee8:	f000 f9d6 	bl	4298 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3eec:	68fb      	ldr	r3, [r7, #12]
    3eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3ef0:	2b00      	cmp	r3, #0
    3ef2:	d009      	beq.n	3f08 <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    3ef4:	68fb      	ldr	r3, [r7, #12]
    3ef6:	3324      	adds	r3, #36	; 0x24
    3ef8:	4618      	mov	r0, r3
    3efa:	f001 f905 	bl	5108 <xTaskRemoveFromEventList>
    3efe:	4603      	mov	r3, r0
    3f00:	2b01      	cmp	r3, #1
    3f02:	d101      	bne.n	3f08 <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    3f04:	f001 fc7c 	bl	5800 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    3f08:	f001 fc9e 	bl	5848 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    3f0c:	2301      	movs	r3, #1
    3f0e:	e059      	b.n	3fc4 <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    3f10:	687b      	ldr	r3, [r7, #4]
    3f12:	2b00      	cmp	r3, #0
    3f14:	d103      	bne.n	3f1e <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    3f16:	f001 fc97 	bl	5848 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    3f1a:	2300      	movs	r3, #0
    3f1c:	e052      	b.n	3fc4 <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    3f1e:	69fb      	ldr	r3, [r7, #28]
    3f20:	2b00      	cmp	r3, #0
    3f22:	d106      	bne.n	3f32 <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    3f24:	f107 0314 	add.w	r3, r7, #20
    3f28:	4618      	mov	r0, r3
    3f2a:	f001 f945 	bl	51b8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    3f2e:	2301      	movs	r3, #1
    3f30:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    3f32:	f001 fc89 	bl	5848 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3f36:	f000 fe93 	bl	4c60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    3f3a:	f001 fc6f 	bl	581c <vPortEnterCritical>
    3f3e:	68fb      	ldr	r3, [r7, #12]
    3f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3f42:	f1b3 3fff 	cmp.w	r3, #4294967295
    3f46:	d102      	bne.n	3f4e <xQueueGenericSend+0x8e>
    3f48:	68fb      	ldr	r3, [r7, #12]
    3f4a:	2200      	movs	r2, #0
    3f4c:	645a      	str	r2, [r3, #68]	; 0x44
    3f4e:	68fb      	ldr	r3, [r7, #12]
    3f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3f52:	f1b3 3fff 	cmp.w	r3, #4294967295
    3f56:	d102      	bne.n	3f5e <xQueueGenericSend+0x9e>
    3f58:	68fb      	ldr	r3, [r7, #12]
    3f5a:	2200      	movs	r2, #0
    3f5c:	649a      	str	r2, [r3, #72]	; 0x48
    3f5e:	f001 fc73 	bl	5848 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3f62:	f107 0214 	add.w	r2, r7, #20
    3f66:	1d3b      	adds	r3, r7, #4
    3f68:	4610      	mov	r0, r2
    3f6a:	4619      	mov	r1, r3
    3f6c:	f001 f93c 	bl	51e8 <xTaskCheckForTimeOut>
    3f70:	4603      	mov	r3, r0
    3f72:	2b00      	cmp	r3, #0
    3f74:	d11e      	bne.n	3fb4 <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    3f76:	68f8      	ldr	r0, [r7, #12]
    3f78:	f000 fa86 	bl	4488 <prvIsQueueFull>
    3f7c:	4603      	mov	r3, r0
    3f7e:	2b00      	cmp	r3, #0
    3f80:	d012      	beq.n	3fa8 <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    3f82:	68fb      	ldr	r3, [r7, #12]
    3f84:	f103 0210 	add.w	r2, r3, #16
    3f88:	687b      	ldr	r3, [r7, #4]
    3f8a:	4610      	mov	r0, r2
    3f8c:	4619      	mov	r1, r3
    3f8e:	f001 f883 	bl	5098 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    3f92:	68f8      	ldr	r0, [r7, #12]
    3f94:	f000 fa02 	bl	439c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    3f98:	f000 fe74 	bl	4c84 <xTaskResumeAll>
    3f9c:	4603      	mov	r3, r0
    3f9e:	2b00      	cmp	r3, #0
    3fa0:	d10f      	bne.n	3fc2 <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    3fa2:	f001 fc2d 	bl	5800 <vPortYieldFromISR>
    3fa6:	e00c      	b.n	3fc2 <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    3fa8:	68f8      	ldr	r0, [r7, #12]
    3faa:	f000 f9f7 	bl	439c <prvUnlockQueue>
				( void ) xTaskResumeAll();
    3fae:	f000 fe69 	bl	4c84 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    3fb2:	e78e      	b.n	3ed2 <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    3fb4:	68f8      	ldr	r0, [r7, #12]
    3fb6:	f000 f9f1 	bl	439c <prvUnlockQueue>
			( void ) xTaskResumeAll();
    3fba:	f000 fe63 	bl	4c84 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    3fbe:	2300      	movs	r3, #0
    3fc0:	e000      	b.n	3fc4 <xQueueGenericSend+0x104>
		}
	}
    3fc2:	e786      	b.n	3ed2 <xQueueGenericSend+0x12>
}
    3fc4:	4618      	mov	r0, r3
    3fc6:	3720      	adds	r7, #32
    3fc8:	46bd      	mov	sp, r7
    3fca:	bd80      	pop	{r7, pc}

00003fcc <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    3fcc:	b580      	push	{r7, lr}
    3fce:	b086      	sub	sp, #24
    3fd0:	af00      	add	r7, sp, #0
    3fd2:	60f8      	str	r0, [r7, #12]
    3fd4:	60b9      	str	r1, [r7, #8]
    3fd6:	607a      	str	r2, [r7, #4]
    3fd8:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3fda:	2300      	movs	r3, #0
    3fdc:	613b      	str	r3, [r7, #16]
    3fde:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3fe2:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    3fe6:	68fb      	ldr	r3, [r7, #12]
    3fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3fea:	68fb      	ldr	r3, [r7, #12]
    3fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3fee:	429a      	cmp	r2, r3
    3ff0:	d221      	bcs.n	4036 <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3ff2:	68f8      	ldr	r0, [r7, #12]
    3ff4:	68b9      	ldr	r1, [r7, #8]
    3ff6:	683a      	ldr	r2, [r7, #0]
    3ff8:	f000 f94e 	bl	4298 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    3ffc:	68fb      	ldr	r3, [r7, #12]
    3ffe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4000:	f1b3 3fff 	cmp.w	r3, #4294967295
    4004:	d10f      	bne.n	4026 <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4006:	68fb      	ldr	r3, [r7, #12]
    4008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    400a:	2b00      	cmp	r3, #0
    400c:	d010      	beq.n	4030 <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    400e:	68fb      	ldr	r3, [r7, #12]
    4010:	3324      	adds	r3, #36	; 0x24
    4012:	4618      	mov	r0, r3
    4014:	f001 f878 	bl	5108 <xTaskRemoveFromEventList>
    4018:	4603      	mov	r3, r0
    401a:	2b00      	cmp	r3, #0
    401c:	d008      	beq.n	4030 <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    401e:	687b      	ldr	r3, [r7, #4]
    4020:	2201      	movs	r2, #1
    4022:	601a      	str	r2, [r3, #0]
    4024:	e004      	b.n	4030 <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    4026:	68fb      	ldr	r3, [r7, #12]
    4028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    402a:	1c5a      	adds	r2, r3, #1
    402c:	68fb      	ldr	r3, [r7, #12]
    402e:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    4030:	2301      	movs	r3, #1
    4032:	617b      	str	r3, [r7, #20]
    4034:	e001      	b.n	403a <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    4036:	2300      	movs	r3, #0
    4038:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    403a:	f04f 0000 	mov.w	r0, #0
    403e:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4042:	697b      	ldr	r3, [r7, #20]
}
    4044:	4618      	mov	r0, r3
    4046:	3718      	adds	r7, #24
    4048:	46bd      	mov	sp, r7
    404a:	bd80      	pop	{r7, pc}

0000404c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    404c:	b580      	push	{r7, lr}
    404e:	b088      	sub	sp, #32
    4050:	af00      	add	r7, sp, #0
    4052:	60f8      	str	r0, [r7, #12]
    4054:	60b9      	str	r1, [r7, #8]
    4056:	607a      	str	r2, [r7, #4]
    4058:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    405a:	2300      	movs	r3, #0
    405c:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    405e:	f001 fbdd 	bl	581c <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    4062:	68fb      	ldr	r3, [r7, #12]
    4064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4066:	2b00      	cmp	r3, #0
    4068:	d03b      	beq.n	40e2 <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    406a:	68fb      	ldr	r3, [r7, #12]
    406c:	68db      	ldr	r3, [r3, #12]
    406e:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    4070:	68f8      	ldr	r0, [r7, #12]
    4072:	68b9      	ldr	r1, [r7, #8]
    4074:	f000 f96c 	bl	4350 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    4078:	683b      	ldr	r3, [r7, #0]
    407a:	2b00      	cmp	r3, #0
    407c:	d11c      	bne.n	40b8 <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    407e:	68fb      	ldr	r3, [r7, #12]
    4080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4082:	1e5a      	subs	r2, r3, #1
    4084:	68fb      	ldr	r3, [r7, #12]
    4086:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4088:	68fb      	ldr	r3, [r7, #12]
    408a:	681b      	ldr	r3, [r3, #0]
    408c:	2b00      	cmp	r3, #0
    408e:	d104      	bne.n	409a <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    4090:	f001 fa5c 	bl	554c <xTaskGetCurrentTaskHandle>
    4094:	4602      	mov	r2, r0
    4096:	68fb      	ldr	r3, [r7, #12]
    4098:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    409a:	68fb      	ldr	r3, [r7, #12]
    409c:	691b      	ldr	r3, [r3, #16]
    409e:	2b00      	cmp	r3, #0
    40a0:	d01b      	beq.n	40da <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    40a2:	68fb      	ldr	r3, [r7, #12]
    40a4:	3310      	adds	r3, #16
    40a6:	4618      	mov	r0, r3
    40a8:	f001 f82e 	bl	5108 <xTaskRemoveFromEventList>
    40ac:	4603      	mov	r3, r0
    40ae:	2b01      	cmp	r3, #1
    40b0:	d113      	bne.n	40da <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    40b2:	f001 fba5 	bl	5800 <vPortYieldFromISR>
    40b6:	e010      	b.n	40da <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    40b8:	68fb      	ldr	r3, [r7, #12]
    40ba:	69ba      	ldr	r2, [r7, #24]
    40bc:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    40be:	68fb      	ldr	r3, [r7, #12]
    40c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    40c2:	2b00      	cmp	r3, #0
    40c4:	d009      	beq.n	40da <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    40c6:	68fb      	ldr	r3, [r7, #12]
    40c8:	3324      	adds	r3, #36	; 0x24
    40ca:	4618      	mov	r0, r3
    40cc:	f001 f81c 	bl	5108 <xTaskRemoveFromEventList>
    40d0:	4603      	mov	r3, r0
    40d2:	2b00      	cmp	r3, #0
    40d4:	d001      	beq.n	40da <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    40d6:	f001 fb93 	bl	5800 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    40da:	f001 fbb5 	bl	5848 <vPortExitCritical>
				return pdPASS;
    40de:	2301      	movs	r3, #1
    40e0:	e066      	b.n	41b0 <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    40e2:	687b      	ldr	r3, [r7, #4]
    40e4:	2b00      	cmp	r3, #0
    40e6:	d103      	bne.n	40f0 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    40e8:	f001 fbae 	bl	5848 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    40ec:	2300      	movs	r3, #0
    40ee:	e05f      	b.n	41b0 <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    40f0:	69fb      	ldr	r3, [r7, #28]
    40f2:	2b00      	cmp	r3, #0
    40f4:	d106      	bne.n	4104 <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    40f6:	f107 0310 	add.w	r3, r7, #16
    40fa:	4618      	mov	r0, r3
    40fc:	f001 f85c 	bl	51b8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4100:	2301      	movs	r3, #1
    4102:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    4104:	f001 fba0 	bl	5848 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    4108:	f000 fdaa 	bl	4c60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    410c:	f001 fb86 	bl	581c <vPortEnterCritical>
    4110:	68fb      	ldr	r3, [r7, #12]
    4112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4114:	f1b3 3fff 	cmp.w	r3, #4294967295
    4118:	d102      	bne.n	4120 <xQueueGenericReceive+0xd4>
    411a:	68fb      	ldr	r3, [r7, #12]
    411c:	2200      	movs	r2, #0
    411e:	645a      	str	r2, [r3, #68]	; 0x44
    4120:	68fb      	ldr	r3, [r7, #12]
    4122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4124:	f1b3 3fff 	cmp.w	r3, #4294967295
    4128:	d102      	bne.n	4130 <xQueueGenericReceive+0xe4>
    412a:	68fb      	ldr	r3, [r7, #12]
    412c:	2200      	movs	r2, #0
    412e:	649a      	str	r2, [r3, #72]	; 0x48
    4130:	f001 fb8a 	bl	5848 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4134:	f107 0210 	add.w	r2, r7, #16
    4138:	1d3b      	adds	r3, r7, #4
    413a:	4610      	mov	r0, r2
    413c:	4619      	mov	r1, r3
    413e:	f001 f853 	bl	51e8 <xTaskCheckForTimeOut>
    4142:	4603      	mov	r3, r0
    4144:	2b00      	cmp	r3, #0
    4146:	d12b      	bne.n	41a0 <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    4148:	68f8      	ldr	r0, [r7, #12]
    414a:	f000 f973 	bl	4434 <prvIsQueueEmpty>
    414e:	4603      	mov	r3, r0
    4150:	2b00      	cmp	r3, #0
    4152:	d01f      	beq.n	4194 <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4154:	68fb      	ldr	r3, [r7, #12]
    4156:	681b      	ldr	r3, [r3, #0]
    4158:	2b00      	cmp	r3, #0
    415a:	d108      	bne.n	416e <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    415c:	f001 fb5e 	bl	581c <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    4160:	68fb      	ldr	r3, [r7, #12]
    4162:	685b      	ldr	r3, [r3, #4]
    4164:	4618      	mov	r0, r3
    4166:	f001 fa01 	bl	556c <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    416a:	f001 fb6d 	bl	5848 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    416e:	68fb      	ldr	r3, [r7, #12]
    4170:	f103 0224 	add.w	r2, r3, #36	; 0x24
    4174:	687b      	ldr	r3, [r7, #4]
    4176:	4610      	mov	r0, r2
    4178:	4619      	mov	r1, r3
    417a:	f000 ff8d 	bl	5098 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    417e:	68f8      	ldr	r0, [r7, #12]
    4180:	f000 f90c 	bl	439c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    4184:	f000 fd7e 	bl	4c84 <xTaskResumeAll>
    4188:	4603      	mov	r3, r0
    418a:	2b00      	cmp	r3, #0
    418c:	d10f      	bne.n	41ae <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    418e:	f001 fb37 	bl	5800 <vPortYieldFromISR>
    4192:	e00c      	b.n	41ae <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    4194:	68f8      	ldr	r0, [r7, #12]
    4196:	f000 f901 	bl	439c <prvUnlockQueue>
				( void ) xTaskResumeAll();
    419a:	f000 fd73 	bl	4c84 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    419e:	e75e      	b.n	405e <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    41a0:	68f8      	ldr	r0, [r7, #12]
    41a2:	f000 f8fb 	bl	439c <prvUnlockQueue>
			( void ) xTaskResumeAll();
    41a6:	f000 fd6d 	bl	4c84 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    41aa:	2300      	movs	r3, #0
    41ac:	e000      	b.n	41b0 <xQueueGenericReceive+0x164>
		}
	}
    41ae:	e756      	b.n	405e <xQueueGenericReceive+0x12>
}
    41b0:	4618      	mov	r0, r3
    41b2:	3720      	adds	r7, #32
    41b4:	46bd      	mov	sp, r7
    41b6:	bd80      	pop	{r7, pc}

000041b8 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    41b8:	b580      	push	{r7, lr}
    41ba:	b086      	sub	sp, #24
    41bc:	af00      	add	r7, sp, #0
    41be:	60f8      	str	r0, [r7, #12]
    41c0:	60b9      	str	r1, [r7, #8]
    41c2:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    41c4:	2300      	movs	r3, #0
    41c6:	613b      	str	r3, [r7, #16]
    41c8:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    41cc:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    41d0:	68fb      	ldr	r3, [r7, #12]
    41d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    41d4:	2b00      	cmp	r3, #0
    41d6:	d025      	beq.n	4224 <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    41d8:	68f8      	ldr	r0, [r7, #12]
    41da:	68b9      	ldr	r1, [r7, #8]
    41dc:	f000 f8b8 	bl	4350 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    41e0:	68fb      	ldr	r3, [r7, #12]
    41e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    41e4:	1e5a      	subs	r2, r3, #1
    41e6:	68fb      	ldr	r3, [r7, #12]
    41e8:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    41ea:	68fb      	ldr	r3, [r7, #12]
    41ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    41ee:	f1b3 3fff 	cmp.w	r3, #4294967295
    41f2:	d10f      	bne.n	4214 <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    41f4:	68fb      	ldr	r3, [r7, #12]
    41f6:	691b      	ldr	r3, [r3, #16]
    41f8:	2b00      	cmp	r3, #0
    41fa:	d010      	beq.n	421e <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    41fc:	68fb      	ldr	r3, [r7, #12]
    41fe:	3310      	adds	r3, #16
    4200:	4618      	mov	r0, r3
    4202:	f000 ff81 	bl	5108 <xTaskRemoveFromEventList>
    4206:	4603      	mov	r3, r0
    4208:	2b00      	cmp	r3, #0
    420a:	d008      	beq.n	421e <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    420c:	687b      	ldr	r3, [r7, #4]
    420e:	2201      	movs	r2, #1
    4210:	601a      	str	r2, [r3, #0]
    4212:	e004      	b.n	421e <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    4214:	68fb      	ldr	r3, [r7, #12]
    4216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4218:	1c5a      	adds	r2, r3, #1
    421a:	68fb      	ldr	r3, [r7, #12]
    421c:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    421e:	2301      	movs	r3, #1
    4220:	617b      	str	r3, [r7, #20]
    4222:	e001      	b.n	4228 <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    4224:	2300      	movs	r3, #0
    4226:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4228:	f04f 0000 	mov.w	r0, #0
    422c:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4230:	697b      	ldr	r3, [r7, #20]
}
    4232:	4618      	mov	r0, r3
    4234:	3718      	adds	r7, #24
    4236:	46bd      	mov	sp, r7
    4238:	bd80      	pop	{r7, pc}
    423a:	bf00      	nop

0000423c <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    423c:	b580      	push	{r7, lr}
    423e:	b084      	sub	sp, #16
    4240:	af00      	add	r7, sp, #0
    4242:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    4244:	f001 faea 	bl	581c <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    4248:	687b      	ldr	r3, [r7, #4]
    424a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    424c:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    424e:	f001 fafb 	bl	5848 <vPortExitCritical>

	return uxReturn;
    4252:	68fb      	ldr	r3, [r7, #12]
}
    4254:	4618      	mov	r0, r3
    4256:	3710      	adds	r7, #16
    4258:	46bd      	mov	sp, r7
    425a:	bd80      	pop	{r7, pc}

0000425c <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    425c:	b480      	push	{r7}
    425e:	b085      	sub	sp, #20
    4260:	af00      	add	r7, sp, #0
    4262:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    4264:	687b      	ldr	r3, [r7, #4]
    4266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4268:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    426a:	68fb      	ldr	r3, [r7, #12]
}
    426c:	4618      	mov	r0, r3
    426e:	3714      	adds	r7, #20
    4270:	46bd      	mov	sp, r7
    4272:	f85d 7b04 	ldr.w	r7, [sp], #4
    4276:	4770      	bx	lr

00004278 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    4278:	b580      	push	{r7, lr}
    427a:	b082      	sub	sp, #8
    427c:	af00      	add	r7, sp, #0
    427e:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    4280:	687b      	ldr	r3, [r7, #4]
    4282:	681b      	ldr	r3, [r3, #0]
    4284:	4618      	mov	r0, r3
    4286:	f001 fc07 	bl	5a98 <vPortFree>
	vPortFree( pxQueue );
    428a:	6878      	ldr	r0, [r7, #4]
    428c:	f001 fc04 	bl	5a98 <vPortFree>
}
    4290:	3708      	adds	r7, #8
    4292:	46bd      	mov	sp, r7
    4294:	bd80      	pop	{r7, pc}
    4296:	bf00      	nop

00004298 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    4298:	b580      	push	{r7, lr}
    429a:	b084      	sub	sp, #16
    429c:	af00      	add	r7, sp, #0
    429e:	60f8      	str	r0, [r7, #12]
    42a0:	60b9      	str	r1, [r7, #8]
    42a2:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    42a4:	68fb      	ldr	r3, [r7, #12]
    42a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    42a8:	2b00      	cmp	r3, #0
    42aa:	d10c      	bne.n	42c6 <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    42ac:	68fb      	ldr	r3, [r7, #12]
    42ae:	681b      	ldr	r3, [r3, #0]
    42b0:	2b00      	cmp	r3, #0
    42b2:	d145      	bne.n	4340 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    42b4:	68fb      	ldr	r3, [r7, #12]
    42b6:	685b      	ldr	r3, [r3, #4]
    42b8:	4618      	mov	r0, r3
    42ba:	f001 f9bb 	bl	5634 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    42be:	68fb      	ldr	r3, [r7, #12]
    42c0:	2200      	movs	r2, #0
    42c2:	605a      	str	r2, [r3, #4]
    42c4:	e03c      	b.n	4340 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    42c6:	687b      	ldr	r3, [r7, #4]
    42c8:	2b00      	cmp	r3, #0
    42ca:	d11a      	bne.n	4302 <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    42cc:	68fb      	ldr	r3, [r7, #12]
    42ce:	689a      	ldr	r2, [r3, #8]
    42d0:	68fb      	ldr	r3, [r7, #12]
    42d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    42d4:	4610      	mov	r0, r2
    42d6:	68b9      	ldr	r1, [r7, #8]
    42d8:	461a      	mov	r2, r3
    42da:	f014 f9e9 	bl	186b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    42de:	68fb      	ldr	r3, [r7, #12]
    42e0:	689a      	ldr	r2, [r3, #8]
    42e2:	68fb      	ldr	r3, [r7, #12]
    42e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    42e6:	441a      	add	r2, r3
    42e8:	68fb      	ldr	r3, [r7, #12]
    42ea:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    42ec:	68fb      	ldr	r3, [r7, #12]
    42ee:	689a      	ldr	r2, [r3, #8]
    42f0:	68fb      	ldr	r3, [r7, #12]
    42f2:	685b      	ldr	r3, [r3, #4]
    42f4:	429a      	cmp	r2, r3
    42f6:	d323      	bcc.n	4340 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    42f8:	68fb      	ldr	r3, [r7, #12]
    42fa:	681a      	ldr	r2, [r3, #0]
    42fc:	68fb      	ldr	r3, [r7, #12]
    42fe:	609a      	str	r2, [r3, #8]
    4300:	e01e      	b.n	4340 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    4302:	68fb      	ldr	r3, [r7, #12]
    4304:	68da      	ldr	r2, [r3, #12]
    4306:	68fb      	ldr	r3, [r7, #12]
    4308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    430a:	4610      	mov	r0, r2
    430c:	68b9      	ldr	r1, [r7, #8]
    430e:	461a      	mov	r2, r3
    4310:	f014 f9ce 	bl	186b0 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    4314:	68fb      	ldr	r3, [r7, #12]
    4316:	68da      	ldr	r2, [r3, #12]
    4318:	68fb      	ldr	r3, [r7, #12]
    431a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    431c:	425b      	negs	r3, r3
    431e:	441a      	add	r2, r3
    4320:	68fb      	ldr	r3, [r7, #12]
    4322:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    4324:	68fb      	ldr	r3, [r7, #12]
    4326:	68da      	ldr	r2, [r3, #12]
    4328:	68fb      	ldr	r3, [r7, #12]
    432a:	681b      	ldr	r3, [r3, #0]
    432c:	429a      	cmp	r2, r3
    432e:	d207      	bcs.n	4340 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    4330:	68fb      	ldr	r3, [r7, #12]
    4332:	685a      	ldr	r2, [r3, #4]
    4334:	68fb      	ldr	r3, [r7, #12]
    4336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4338:	425b      	negs	r3, r3
    433a:	441a      	add	r2, r3
    433c:	68fb      	ldr	r3, [r7, #12]
    433e:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    4340:	68fb      	ldr	r3, [r7, #12]
    4342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4344:	1c5a      	adds	r2, r3, #1
    4346:	68fb      	ldr	r3, [r7, #12]
    4348:	639a      	str	r2, [r3, #56]	; 0x38
}
    434a:	3710      	adds	r7, #16
    434c:	46bd      	mov	sp, r7
    434e:	bd80      	pop	{r7, pc}

00004350 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    4350:	b580      	push	{r7, lr}
    4352:	b082      	sub	sp, #8
    4354:	af00      	add	r7, sp, #0
    4356:	6078      	str	r0, [r7, #4]
    4358:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    435a:	687b      	ldr	r3, [r7, #4]
    435c:	681b      	ldr	r3, [r3, #0]
    435e:	2b00      	cmp	r3, #0
    4360:	d019      	beq.n	4396 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    4362:	687b      	ldr	r3, [r7, #4]
    4364:	68da      	ldr	r2, [r3, #12]
    4366:	687b      	ldr	r3, [r7, #4]
    4368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    436a:	441a      	add	r2, r3
    436c:	687b      	ldr	r3, [r7, #4]
    436e:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    4370:	687b      	ldr	r3, [r7, #4]
    4372:	68da      	ldr	r2, [r3, #12]
    4374:	687b      	ldr	r3, [r7, #4]
    4376:	685b      	ldr	r3, [r3, #4]
    4378:	429a      	cmp	r2, r3
    437a:	d303      	bcc.n	4384 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    437c:	687b      	ldr	r3, [r7, #4]
    437e:	681a      	ldr	r2, [r3, #0]
    4380:	687b      	ldr	r3, [r7, #4]
    4382:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    4384:	687b      	ldr	r3, [r7, #4]
    4386:	68da      	ldr	r2, [r3, #12]
    4388:	687b      	ldr	r3, [r7, #4]
    438a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    438c:	6838      	ldr	r0, [r7, #0]
    438e:	4611      	mov	r1, r2
    4390:	461a      	mov	r2, r3
    4392:	f014 f98d 	bl	186b0 <memcpy>
	}
}
    4396:	3708      	adds	r7, #8
    4398:	46bd      	mov	sp, r7
    439a:	bd80      	pop	{r7, pc}

0000439c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    439c:	b580      	push	{r7, lr}
    439e:	b082      	sub	sp, #8
    43a0:	af00      	add	r7, sp, #0
    43a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    43a4:	f001 fa3a 	bl	581c <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    43a8:	e014      	b.n	43d4 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    43aa:	687b      	ldr	r3, [r7, #4]
    43ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    43ae:	2b00      	cmp	r3, #0
    43b0:	d00f      	beq.n	43d2 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    43b2:	687b      	ldr	r3, [r7, #4]
    43b4:	3324      	adds	r3, #36	; 0x24
    43b6:	4618      	mov	r0, r3
    43b8:	f000 fea6 	bl	5108 <xTaskRemoveFromEventList>
    43bc:	4603      	mov	r3, r0
    43be:	2b00      	cmp	r3, #0
    43c0:	d001      	beq.n	43c6 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    43c2:	f000 ff5d 	bl	5280 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    43c6:	687b      	ldr	r3, [r7, #4]
    43c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    43ca:	1e5a      	subs	r2, r3, #1
    43cc:	687b      	ldr	r3, [r7, #4]
    43ce:	649a      	str	r2, [r3, #72]	; 0x48
    43d0:	e000      	b.n	43d4 <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    43d2:	e003      	b.n	43dc <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    43d4:	687b      	ldr	r3, [r7, #4]
    43d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    43d8:	2b00      	cmp	r3, #0
    43da:	dce6      	bgt.n	43aa <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    43dc:	687b      	ldr	r3, [r7, #4]
    43de:	f04f 32ff 	mov.w	r2, #4294967295
    43e2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    43e4:	f001 fa30 	bl	5848 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    43e8:	f001 fa18 	bl	581c <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    43ec:	e014      	b.n	4418 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    43ee:	687b      	ldr	r3, [r7, #4]
    43f0:	691b      	ldr	r3, [r3, #16]
    43f2:	2b00      	cmp	r3, #0
    43f4:	d00f      	beq.n	4416 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    43f6:	687b      	ldr	r3, [r7, #4]
    43f8:	3310      	adds	r3, #16
    43fa:	4618      	mov	r0, r3
    43fc:	f000 fe84 	bl	5108 <xTaskRemoveFromEventList>
    4400:	4603      	mov	r3, r0
    4402:	2b00      	cmp	r3, #0
    4404:	d001      	beq.n	440a <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    4406:	f000 ff3b 	bl	5280 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    440a:	687b      	ldr	r3, [r7, #4]
    440c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    440e:	1e5a      	subs	r2, r3, #1
    4410:	687b      	ldr	r3, [r7, #4]
    4412:	645a      	str	r2, [r3, #68]	; 0x44
    4414:	e000      	b.n	4418 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    4416:	e003      	b.n	4420 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    4418:	687b      	ldr	r3, [r7, #4]
    441a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    441c:	2b00      	cmp	r3, #0
    441e:	dce6      	bgt.n	43ee <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    4420:	687b      	ldr	r3, [r7, #4]
    4422:	f04f 32ff 	mov.w	r2, #4294967295
    4426:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    4428:	f001 fa0e 	bl	5848 <vPortExitCritical>
}
    442c:	3708      	adds	r7, #8
    442e:	46bd      	mov	sp, r7
    4430:	bd80      	pop	{r7, pc}
    4432:	bf00      	nop

00004434 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    4434:	b580      	push	{r7, lr}
    4436:	b084      	sub	sp, #16
    4438:	af00      	add	r7, sp, #0
    443a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    443c:	f001 f9ee 	bl	581c <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4440:	687b      	ldr	r3, [r7, #4]
    4442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4444:	2b00      	cmp	r3, #0
    4446:	bf14      	ite	ne
    4448:	2300      	movne	r3, #0
    444a:	2301      	moveq	r3, #1
    444c:	b2db      	uxtb	r3, r3
    444e:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4450:	f001 f9fa 	bl	5848 <vPortExitCritical>

	return xReturn;
    4454:	68fb      	ldr	r3, [r7, #12]
}
    4456:	4618      	mov	r0, r3
    4458:	3710      	adds	r7, #16
    445a:	46bd      	mov	sp, r7
    445c:	bd80      	pop	{r7, pc}
    445e:	bf00      	nop

00004460 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    4460:	b480      	push	{r7}
    4462:	b085      	sub	sp, #20
    4464:	af00      	add	r7, sp, #0
    4466:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4468:	687b      	ldr	r3, [r7, #4]
    446a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    446c:	2b00      	cmp	r3, #0
    446e:	bf14      	ite	ne
    4470:	2300      	movne	r3, #0
    4472:	2301      	moveq	r3, #1
    4474:	b2db      	uxtb	r3, r3
    4476:	60fb      	str	r3, [r7, #12]

	return xReturn;
    4478:	68fb      	ldr	r3, [r7, #12]
}
    447a:	4618      	mov	r0, r3
    447c:	3714      	adds	r7, #20
    447e:	46bd      	mov	sp, r7
    4480:	f85d 7b04 	ldr.w	r7, [sp], #4
    4484:	4770      	bx	lr
    4486:	bf00      	nop

00004488 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    4488:	b580      	push	{r7, lr}
    448a:	b084      	sub	sp, #16
    448c:	af00      	add	r7, sp, #0
    448e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    4490:	f001 f9c4 	bl	581c <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    4494:	687b      	ldr	r3, [r7, #4]
    4496:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4498:	687b      	ldr	r3, [r7, #4]
    449a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    449c:	429a      	cmp	r2, r3
    449e:	bf14      	ite	ne
    44a0:	2300      	movne	r3, #0
    44a2:	2301      	moveq	r3, #1
    44a4:	b2db      	uxtb	r3, r3
    44a6:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    44a8:	f001 f9ce 	bl	5848 <vPortExitCritical>

	return xReturn;
    44ac:	68fb      	ldr	r3, [r7, #12]
}
    44ae:	4618      	mov	r0, r3
    44b0:	3710      	adds	r7, #16
    44b2:	46bd      	mov	sp, r7
    44b4:	bd80      	pop	{r7, pc}
    44b6:	bf00      	nop

000044b8 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    44b8:	b480      	push	{r7}
    44ba:	b085      	sub	sp, #20
    44bc:	af00      	add	r7, sp, #0
    44be:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    44c0:	687b      	ldr	r3, [r7, #4]
    44c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    44c4:	687b      	ldr	r3, [r7, #4]
    44c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    44c8:	429a      	cmp	r2, r3
    44ca:	bf14      	ite	ne
    44cc:	2300      	movne	r3, #0
    44ce:	2301      	moveq	r3, #1
    44d0:	b2db      	uxtb	r3, r3
    44d2:	60fb      	str	r3, [r7, #12]

	return xReturn;
    44d4:	68fb      	ldr	r3, [r7, #12]
}
    44d6:	4618      	mov	r0, r3
    44d8:	3714      	adds	r7, #20
    44da:	46bd      	mov	sp, r7
    44dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    44e0:	4770      	bx	lr
    44e2:	bf00      	nop

000044e4 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    44e4:	b580      	push	{r7, lr}
    44e6:	b08a      	sub	sp, #40	; 0x28
    44e8:	af02      	add	r7, sp, #8
    44ea:	60f8      	str	r0, [r7, #12]
    44ec:	60b9      	str	r1, [r7, #8]
    44ee:	603b      	str	r3, [r7, #0]
    44f0:	4613      	mov	r3, r2
    44f2:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    44f4:	88fb      	ldrh	r3, [r7, #6]
    44f6:	4618      	mov	r0, r3
    44f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
    44fa:	f000 ffe5 	bl	54c8 <prvAllocateTCBAndStack>
    44fe:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    4500:	69bb      	ldr	r3, [r7, #24]
    4502:	2b00      	cmp	r3, #0
    4504:	f000 80a1 	beq.w	464a <xTaskGenericCreate+0x166>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    4508:	69bb      	ldr	r3, [r7, #24]
    450a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    450c:	88fb      	ldrh	r3, [r7, #6]
    450e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4512:	3b01      	subs	r3, #1
    4514:	009b      	lsls	r3, r3, #2
    4516:	4413      	add	r3, r2
    4518:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    451a:	697b      	ldr	r3, [r7, #20]
    451c:	f023 0307 	bic.w	r3, r3, #7
    4520:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    4522:	88fb      	ldrh	r3, [r7, #6]
    4524:	9300      	str	r3, [sp, #0]
    4526:	69b8      	ldr	r0, [r7, #24]
    4528:	68b9      	ldr	r1, [r7, #8]
    452a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    452c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    452e:	f000 febd 	bl	52ac <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    4532:	6978      	ldr	r0, [r7, #20]
    4534:	68f9      	ldr	r1, [r7, #12]
    4536:	683a      	ldr	r2, [r7, #0]
    4538:	f001 f8f2 	bl	5720 <pxPortInitialiseStack>
    453c:	4602      	mov	r2, r0
    453e:	69bb      	ldr	r3, [r7, #24]
    4540:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    4542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4544:	2b00      	cmp	r3, #0
    4546:	d002      	beq.n	454e <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    4548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    454a:	69ba      	ldr	r2, [r7, #24]
    454c:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    454e:	f001 f965 	bl	581c <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    4552:	f640 234c 	movw	r3, #2636	; 0xa4c
    4556:	f2c2 0300 	movt	r3, #8192	; 0x2000
    455a:	681b      	ldr	r3, [r3, #0]
    455c:	1c5a      	adds	r2, r3, #1
    455e:	f640 234c 	movw	r3, #2636	; 0xa4c
    4562:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4566:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    4568:	f640 0348 	movw	r3, #2120	; 0x848
    456c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4570:	681b      	ldr	r3, [r3, #0]
    4572:	2b00      	cmp	r3, #0
    4574:	d10f      	bne.n	4596 <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    4576:	f640 0348 	movw	r3, #2120	; 0x848
    457a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    457e:	69ba      	ldr	r2, [r7, #24]
    4580:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    4582:	f640 234c 	movw	r3, #2636	; 0xa4c
    4586:	f2c2 0300 	movt	r3, #8192	; 0x2000
    458a:	681b      	ldr	r3, [r3, #0]
    458c:	2b01      	cmp	r3, #1
    458e:	d118      	bne.n	45c2 <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    4590:	f000 fec2 	bl	5318 <prvInitialiseTaskLists>
    4594:	e015      	b.n	45c2 <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    4596:	f640 235c 	movw	r3, #2652	; 0xa5c
    459a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    459e:	681b      	ldr	r3, [r3, #0]
    45a0:	2b00      	cmp	r3, #0
    45a2:	d10e      	bne.n	45c2 <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    45a4:	f640 0348 	movw	r3, #2120	; 0x848
    45a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45ac:	681b      	ldr	r3, [r3, #0]
    45ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    45b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    45b2:	429a      	cmp	r2, r3
    45b4:	d805      	bhi.n	45c2 <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    45b6:	f640 0348 	movw	r3, #2120	; 0x848
    45ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45be:	69ba      	ldr	r2, [r7, #24]
    45c0:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    45c2:	69bb      	ldr	r3, [r7, #24]
    45c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    45c6:	f640 2354 	movw	r3, #2644	; 0xa54
    45ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45ce:	681b      	ldr	r3, [r3, #0]
    45d0:	429a      	cmp	r2, r3
    45d2:	d906      	bls.n	45e2 <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    45d4:	69bb      	ldr	r3, [r7, #24]
    45d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    45d8:	f640 2354 	movw	r3, #2644	; 0xa54
    45dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45e0:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    45e2:	f640 2370 	movw	r3, #2672	; 0xa70
    45e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45ea:	681b      	ldr	r3, [r3, #0]
    45ec:	1c5a      	adds	r2, r3, #1
    45ee:	f640 2370 	movw	r3, #2672	; 0xa70
    45f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45f6:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    45f8:	69bb      	ldr	r3, [r7, #24]
    45fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    45fc:	f640 2358 	movw	r3, #2648	; 0xa58
    4600:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4604:	681b      	ldr	r3, [r3, #0]
    4606:	429a      	cmp	r2, r3
    4608:	d906      	bls.n	4618 <xTaskGenericCreate+0x134>
    460a:	69bb      	ldr	r3, [r7, #24]
    460c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    460e:	f640 2358 	movw	r3, #2648	; 0xa58
    4612:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4616:	601a      	str	r2, [r3, #0]
    4618:	69bb      	ldr	r3, [r7, #24]
    461a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    461c:	4613      	mov	r3, r2
    461e:	009b      	lsls	r3, r3, #2
    4620:	4413      	add	r3, r2
    4622:	009b      	lsls	r3, r3, #2
    4624:	f640 024c 	movw	r2, #2124	; 0x84c
    4628:	f2c2 0200 	movt	r2, #8192	; 0x2000
    462c:	441a      	add	r2, r3
    462e:	69bb      	ldr	r3, [r7, #24]
    4630:	3304      	adds	r3, #4
    4632:	4610      	mov	r0, r2
    4634:	4619      	mov	r1, r3
    4636:	f7ff fadf 	bl	3bf8 <vListInsertEnd>

			xReturn = pdPASS;
    463a:	2301      	movs	r3, #1
    463c:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    463e:	69b8      	ldr	r0, [r7, #24]
    4640:	f012 ff4e 	bl	174e0 <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    4644:	f001 f900 	bl	5848 <vPortExitCritical>
    4648:	e002      	b.n	4650 <xTaskGenericCreate+0x16c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    464a:	f04f 33ff 	mov.w	r3, #4294967295
    464e:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    4650:	69fb      	ldr	r3, [r7, #28]
    4652:	2b01      	cmp	r3, #1
    4654:	d111      	bne.n	467a <xTaskGenericCreate+0x196>
	{
		if( xSchedulerRunning != pdFALSE )
    4656:	f640 235c 	movw	r3, #2652	; 0xa5c
    465a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    465e:	681b      	ldr	r3, [r3, #0]
    4660:	2b00      	cmp	r3, #0
    4662:	d00a      	beq.n	467a <xTaskGenericCreate+0x196>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    4664:	f640 0348 	movw	r3, #2120	; 0x848
    4668:	f2c2 0300 	movt	r3, #8192	; 0x2000
    466c:	681b      	ldr	r3, [r3, #0]
    466e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4670:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4672:	429a      	cmp	r2, r3
    4674:	d201      	bcs.n	467a <xTaskGenericCreate+0x196>
			{
				portYIELD_WITHIN_API();
    4676:	f001 f8c3 	bl	5800 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    467a:	69fb      	ldr	r3, [r7, #28]
}
    467c:	4618      	mov	r0, r3
    467e:	3720      	adds	r7, #32
    4680:	46bd      	mov	sp, r7
    4682:	bd80      	pop	{r7, pc}

00004684 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    4684:	b580      	push	{r7, lr}
    4686:	b084      	sub	sp, #16
    4688:	af00      	add	r7, sp, #0
    468a:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    468c:	f001 f8c6 	bl	581c <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    4690:	f640 0348 	movw	r3, #2120	; 0x848
    4694:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4698:	681b      	ldr	r3, [r3, #0]
    469a:	687a      	ldr	r2, [r7, #4]
    469c:	429a      	cmp	r2, r3
    469e:	d101      	bne.n	46a4 <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    46a0:	2300      	movs	r3, #0
    46a2:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    46a4:	687b      	ldr	r3, [r7, #4]
    46a6:	2b00      	cmp	r3, #0
    46a8:	d105      	bne.n	46b6 <vTaskDelete+0x32>
    46aa:	f640 0348 	movw	r3, #2120	; 0x848
    46ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46b2:	681b      	ldr	r3, [r3, #0]
    46b4:	e000      	b.n	46b8 <vTaskDelete+0x34>
    46b6:	687b      	ldr	r3, [r7, #4]
    46b8:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    46ba:	68fb      	ldr	r3, [r7, #12]
    46bc:	3304      	adds	r3, #4
    46be:	4618      	mov	r0, r3
    46c0:	f7ff fafa 	bl	3cb8 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    46c4:	68fb      	ldr	r3, [r7, #12]
    46c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    46c8:	2b00      	cmp	r3, #0
    46ca:	d004      	beq.n	46d6 <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    46cc:	68fb      	ldr	r3, [r7, #12]
    46ce:	3318      	adds	r3, #24
    46d0:	4618      	mov	r0, r3
    46d2:	f7ff faf1 	bl	3cb8 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    46d6:	68fb      	ldr	r3, [r7, #12]
    46d8:	3304      	adds	r3, #4
    46da:	f640 2020 	movw	r0, #2592	; 0xa20
    46de:	f2c2 0000 	movt	r0, #8192	; 0x2000
    46e2:	4619      	mov	r1, r3
    46e4:	f7ff fa88 	bl	3bf8 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    46e8:	f640 2334 	movw	r3, #2612	; 0xa34
    46ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46f0:	681b      	ldr	r3, [r3, #0]
    46f2:	1c5a      	adds	r2, r3, #1
    46f4:	f640 2334 	movw	r3, #2612	; 0xa34
    46f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46fc:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    46fe:	f640 2370 	movw	r3, #2672	; 0xa70
    4702:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4706:	681b      	ldr	r3, [r3, #0]
    4708:	1c5a      	adds	r2, r3, #1
    470a:	f640 2370 	movw	r3, #2672	; 0xa70
    470e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4712:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    4714:	f001 f898 	bl	5848 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    4718:	f640 235c 	movw	r3, #2652	; 0xa5c
    471c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4720:	681b      	ldr	r3, [r3, #0]
    4722:	2b00      	cmp	r3, #0
    4724:	d004      	beq.n	4730 <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    4726:	687b      	ldr	r3, [r7, #4]
    4728:	2b00      	cmp	r3, #0
    472a:	d101      	bne.n	4730 <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    472c:	f001 f868 	bl	5800 <vPortYieldFromISR>
			}
		}
	}
    4730:	3710      	adds	r7, #16
    4732:	46bd      	mov	sp, r7
    4734:	bd80      	pop	{r7, pc}
    4736:	bf00      	nop

00004738 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    4738:	b580      	push	{r7, lr}
    473a:	b086      	sub	sp, #24
    473c:	af00      	add	r7, sp, #0
    473e:	6078      	str	r0, [r7, #4]
    4740:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    4742:	2300      	movs	r3, #0
    4744:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    4746:	f000 fa8b 	bl	4c60 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    474a:	687b      	ldr	r3, [r7, #4]
    474c:	681a      	ldr	r2, [r3, #0]
    474e:	683b      	ldr	r3, [r7, #0]
    4750:	4413      	add	r3, r2
    4752:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    4754:	687b      	ldr	r3, [r7, #4]
    4756:	681a      	ldr	r2, [r3, #0]
    4758:	f640 2350 	movw	r3, #2640	; 0xa50
    475c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4760:	681b      	ldr	r3, [r3, #0]
    4762:	429a      	cmp	r2, r3
    4764:	d90f      	bls.n	4786 <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    4766:	687b      	ldr	r3, [r7, #4]
    4768:	681a      	ldr	r2, [r3, #0]
    476a:	693b      	ldr	r3, [r7, #16]
    476c:	429a      	cmp	r2, r3
    476e:	d919      	bls.n	47a4 <vTaskDelayUntil+0x6c>
    4770:	f640 2350 	movw	r3, #2640	; 0xa50
    4774:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4778:	681b      	ldr	r3, [r3, #0]
    477a:	693a      	ldr	r2, [r7, #16]
    477c:	429a      	cmp	r2, r3
    477e:	d911      	bls.n	47a4 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4780:	2301      	movs	r3, #1
    4782:	617b      	str	r3, [r7, #20]
    4784:	e00e      	b.n	47a4 <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    4786:	687b      	ldr	r3, [r7, #4]
    4788:	681a      	ldr	r2, [r3, #0]
    478a:	693b      	ldr	r3, [r7, #16]
    478c:	429a      	cmp	r2, r3
    478e:	d807      	bhi.n	47a0 <vTaskDelayUntil+0x68>
    4790:	f640 2350 	movw	r3, #2640	; 0xa50
    4794:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4798:	681b      	ldr	r3, [r3, #0]
    479a:	693a      	ldr	r2, [r7, #16]
    479c:	429a      	cmp	r2, r3
    479e:	d901      	bls.n	47a4 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    47a0:	2301      	movs	r3, #1
    47a2:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    47a4:	687b      	ldr	r3, [r7, #4]
    47a6:	693a      	ldr	r2, [r7, #16]
    47a8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    47aa:	697b      	ldr	r3, [r7, #20]
    47ac:	2b00      	cmp	r3, #0
    47ae:	d00b      	beq.n	47c8 <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    47b0:	f640 0348 	movw	r3, #2120	; 0x848
    47b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47b8:	681b      	ldr	r3, [r3, #0]
    47ba:	3304      	adds	r3, #4
    47bc:	4618      	mov	r0, r3
    47be:	f7ff fa7b 	bl	3cb8 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    47c2:	6938      	ldr	r0, [r7, #16]
    47c4:	f000 fe3c 	bl	5440 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    47c8:	f000 fa5c 	bl	4c84 <xTaskResumeAll>
    47cc:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    47ce:	68fb      	ldr	r3, [r7, #12]
    47d0:	2b00      	cmp	r3, #0
    47d2:	d101      	bne.n	47d8 <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    47d4:	f001 f814 	bl	5800 <vPortYieldFromISR>
		}
	}
    47d8:	3718      	adds	r7, #24
    47da:	46bd      	mov	sp, r7
    47dc:	bd80      	pop	{r7, pc}
    47de:	bf00      	nop

000047e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    47e0:	b580      	push	{r7, lr}
    47e2:	b084      	sub	sp, #16
    47e4:	af00      	add	r7, sp, #0
    47e6:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    47e8:	2300      	movs	r3, #0
    47ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    47ec:	687b      	ldr	r3, [r7, #4]
    47ee:	2b00      	cmp	r3, #0
    47f0:	d018      	beq.n	4824 <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    47f2:	f000 fa35 	bl	4c60 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    47f6:	f640 2350 	movw	r3, #2640	; 0xa50
    47fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47fe:	681a      	ldr	r2, [r3, #0]
    4800:	687b      	ldr	r3, [r7, #4]
    4802:	4413      	add	r3, r2
    4804:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4806:	f640 0348 	movw	r3, #2120	; 0x848
    480a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    480e:	681b      	ldr	r3, [r3, #0]
    4810:	3304      	adds	r3, #4
    4812:	4618      	mov	r0, r3
    4814:	f7ff fa50 	bl	3cb8 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4818:	68b8      	ldr	r0, [r7, #8]
    481a:	f000 fe11 	bl	5440 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    481e:	f000 fa31 	bl	4c84 <xTaskResumeAll>
    4822:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4824:	68fb      	ldr	r3, [r7, #12]
    4826:	2b00      	cmp	r3, #0
    4828:	d101      	bne.n	482e <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    482a:	f000 ffe9 	bl	5800 <vPortYieldFromISR>
		}
	}
    482e:	3710      	adds	r7, #16
    4830:	46bd      	mov	sp, r7
    4832:	bd80      	pop	{r7, pc}

00004834 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    4834:	b580      	push	{r7, lr}
    4836:	b084      	sub	sp, #16
    4838:	af00      	add	r7, sp, #0
    483a:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    483c:	f000 ffee 	bl	581c <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4840:	687b      	ldr	r3, [r7, #4]
    4842:	2b00      	cmp	r3, #0
    4844:	d105      	bne.n	4852 <uxTaskPriorityGet+0x1e>
    4846:	f640 0348 	movw	r3, #2120	; 0x848
    484a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    484e:	681b      	ldr	r3, [r3, #0]
    4850:	e000      	b.n	4854 <uxTaskPriorityGet+0x20>
    4852:	687b      	ldr	r3, [r7, #4]
    4854:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    4856:	68fb      	ldr	r3, [r7, #12]
    4858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    485a:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    485c:	f000 fff4 	bl	5848 <vPortExitCritical>

		return uxReturn;
    4860:	68bb      	ldr	r3, [r7, #8]
	}
    4862:	4618      	mov	r0, r3
    4864:	3710      	adds	r7, #16
    4866:	46bd      	mov	sp, r7
    4868:	bd80      	pop	{r7, pc}
    486a:	bf00      	nop

0000486c <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    486c:	b580      	push	{r7, lr}
    486e:	b086      	sub	sp, #24
    4870:	af00      	add	r7, sp, #0
    4872:	6078      	str	r0, [r7, #4]
    4874:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    4876:	2300      	movs	r3, #0
    4878:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    487a:	683b      	ldr	r3, [r7, #0]
    487c:	2b13      	cmp	r3, #19
    487e:	d901      	bls.n	4884 <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    4880:	2313      	movs	r3, #19
    4882:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    4884:	f000 ffca 	bl	581c <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    4888:	f640 0348 	movw	r3, #2120	; 0x848
    488c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4890:	681b      	ldr	r3, [r3, #0]
    4892:	687a      	ldr	r2, [r7, #4]
    4894:	429a      	cmp	r2, r3
    4896:	d101      	bne.n	489c <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    4898:	2300      	movs	r3, #0
    489a:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    489c:	687b      	ldr	r3, [r7, #4]
    489e:	2b00      	cmp	r3, #0
    48a0:	d105      	bne.n	48ae <vTaskPrioritySet+0x42>
    48a2:	f640 0348 	movw	r3, #2120	; 0x848
    48a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48aa:	681b      	ldr	r3, [r3, #0]
    48ac:	e000      	b.n	48b0 <vTaskPrioritySet+0x44>
    48ae:	687b      	ldr	r3, [r7, #4]
    48b0:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    48b2:	693b      	ldr	r3, [r7, #16]
    48b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    48b6:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    48b8:	68fa      	ldr	r2, [r7, #12]
    48ba:	683b      	ldr	r3, [r7, #0]
    48bc:	429a      	cmp	r2, r3
    48be:	d058      	beq.n	4972 <vTaskPrioritySet+0x106>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    48c0:	683a      	ldr	r2, [r7, #0]
    48c2:	68fb      	ldr	r3, [r7, #12]
    48c4:	429a      	cmp	r2, r3
    48c6:	d905      	bls.n	48d4 <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    48c8:	687b      	ldr	r3, [r7, #4]
    48ca:	2b00      	cmp	r3, #0
    48cc:	d007      	beq.n	48de <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    48ce:	2301      	movs	r3, #1
    48d0:	617b      	str	r3, [r7, #20]
    48d2:	e004      	b.n	48de <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    48d4:	687b      	ldr	r3, [r7, #4]
    48d6:	2b00      	cmp	r3, #0
    48d8:	d101      	bne.n	48de <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    48da:	2301      	movs	r3, #1
    48dc:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    48de:	693b      	ldr	r3, [r7, #16]
    48e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    48e2:	693b      	ldr	r3, [r7, #16]
    48e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    48e6:	429a      	cmp	r2, r3
    48e8:	d102      	bne.n	48f0 <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    48ea:	693b      	ldr	r3, [r7, #16]
    48ec:	683a      	ldr	r2, [r7, #0]
    48ee:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    48f0:	693b      	ldr	r3, [r7, #16]
    48f2:	683a      	ldr	r2, [r7, #0]
    48f4:	64da      	str	r2, [r3, #76]	; 0x4c
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    48f6:	683b      	ldr	r3, [r7, #0]
    48f8:	f1c3 0214 	rsb	r2, r3, #20
    48fc:	693b      	ldr	r3, [r7, #16]
    48fe:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    4900:	693b      	ldr	r3, [r7, #16]
    4902:	6959      	ldr	r1, [r3, #20]
    4904:	68fa      	ldr	r2, [r7, #12]
    4906:	4613      	mov	r3, r2
    4908:	009b      	lsls	r3, r3, #2
    490a:	4413      	add	r3, r2
    490c:	009b      	lsls	r3, r3, #2
    490e:	f640 024c 	movw	r2, #2124	; 0x84c
    4912:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4916:	4413      	add	r3, r2
    4918:	4299      	cmp	r1, r3
    491a:	d125      	bne.n	4968 <vTaskPrioritySet+0xfc>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    491c:	693b      	ldr	r3, [r7, #16]
    491e:	3304      	adds	r3, #4
    4920:	4618      	mov	r0, r3
    4922:	f7ff f9c9 	bl	3cb8 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4926:	693b      	ldr	r3, [r7, #16]
    4928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    492a:	f640 2358 	movw	r3, #2648	; 0xa58
    492e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4932:	681b      	ldr	r3, [r3, #0]
    4934:	429a      	cmp	r2, r3
    4936:	d906      	bls.n	4946 <vTaskPrioritySet+0xda>
    4938:	693b      	ldr	r3, [r7, #16]
    493a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    493c:	f640 2358 	movw	r3, #2648	; 0xa58
    4940:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4944:	601a      	str	r2, [r3, #0]
    4946:	693b      	ldr	r3, [r7, #16]
    4948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    494a:	4613      	mov	r3, r2
    494c:	009b      	lsls	r3, r3, #2
    494e:	4413      	add	r3, r2
    4950:	009b      	lsls	r3, r3, #2
    4952:	f640 024c 	movw	r2, #2124	; 0x84c
    4956:	f2c2 0200 	movt	r2, #8192	; 0x2000
    495a:	441a      	add	r2, r3
    495c:	693b      	ldr	r3, [r7, #16]
    495e:	3304      	adds	r3, #4
    4960:	4610      	mov	r0, r2
    4962:	4619      	mov	r1, r3
    4964:	f7ff f948 	bl	3bf8 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    4968:	697b      	ldr	r3, [r7, #20]
    496a:	2b01      	cmp	r3, #1
    496c:	d101      	bne.n	4972 <vTaskPrioritySet+0x106>
				{
					portYIELD_WITHIN_API();
    496e:	f000 ff47 	bl	5800 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    4972:	f000 ff69 	bl	5848 <vPortExitCritical>
	}
    4976:	3718      	adds	r7, #24
    4978:	46bd      	mov	sp, r7
    497a:	bd80      	pop	{r7, pc}

0000497c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    497c:	b580      	push	{r7, lr}
    497e:	b084      	sub	sp, #16
    4980:	af00      	add	r7, sp, #0
    4982:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4984:	f000 ff4a 	bl	581c <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    4988:	f640 0348 	movw	r3, #2120	; 0x848
    498c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4990:	681b      	ldr	r3, [r3, #0]
    4992:	687a      	ldr	r2, [r7, #4]
    4994:	429a      	cmp	r2, r3
    4996:	d101      	bne.n	499c <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    4998:	2300      	movs	r3, #0
    499a:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    499c:	687b      	ldr	r3, [r7, #4]
    499e:	2b00      	cmp	r3, #0
    49a0:	d105      	bne.n	49ae <vTaskSuspend+0x32>
    49a2:	f640 0348 	movw	r3, #2120	; 0x848
    49a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49aa:	681b      	ldr	r3, [r3, #0]
    49ac:	e000      	b.n	49b0 <vTaskSuspend+0x34>
    49ae:	687b      	ldr	r3, [r7, #4]
    49b0:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    49b2:	68fb      	ldr	r3, [r7, #12]
    49b4:	3304      	adds	r3, #4
    49b6:	4618      	mov	r0, r3
    49b8:	f7ff f97e 	bl	3cb8 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    49bc:	68fb      	ldr	r3, [r7, #12]
    49be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    49c0:	2b00      	cmp	r3, #0
    49c2:	d004      	beq.n	49ce <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    49c4:	68fb      	ldr	r3, [r7, #12]
    49c6:	3318      	adds	r3, #24
    49c8:	4618      	mov	r0, r3
    49ca:	f7ff f975 	bl	3cb8 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    49ce:	68fb      	ldr	r3, [r7, #12]
    49d0:	3304      	adds	r3, #4
    49d2:	f640 2038 	movw	r0, #2616	; 0xa38
    49d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    49da:	4619      	mov	r1, r3
    49dc:	f7ff f90c 	bl	3bf8 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    49e0:	f000 ff32 	bl	5848 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    49e4:	687b      	ldr	r3, [r7, #4]
    49e6:	2b00      	cmp	r3, #0
    49e8:	d11e      	bne.n	4a28 <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    49ea:	f640 235c 	movw	r3, #2652	; 0xa5c
    49ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49f2:	681b      	ldr	r3, [r3, #0]
    49f4:	2b00      	cmp	r3, #0
    49f6:	d002      	beq.n	49fe <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    49f8:	f000 ff02 	bl	5800 <vPortYieldFromISR>
    49fc:	e014      	b.n	4a28 <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    49fe:	f640 2338 	movw	r3, #2616	; 0xa38
    4a02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a06:	681a      	ldr	r2, [r3, #0]
    4a08:	f640 234c 	movw	r3, #2636	; 0xa4c
    4a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a10:	681b      	ldr	r3, [r3, #0]
    4a12:	429a      	cmp	r2, r3
    4a14:	d106      	bne.n	4a24 <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    4a16:	f640 0348 	movw	r3, #2120	; 0x848
    4a1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a1e:	2200      	movs	r2, #0
    4a20:	601a      	str	r2, [r3, #0]
    4a22:	e001      	b.n	4a28 <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    4a24:	f000 fadc 	bl	4fe0 <vTaskSwitchContext>
				}
			}
		}
	}
    4a28:	3710      	adds	r7, #16
    4a2a:	46bd      	mov	sp, r7
    4a2c:	bd80      	pop	{r7, pc}
    4a2e:	bf00      	nop

00004a30 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    4a30:	b480      	push	{r7}
    4a32:	b085      	sub	sp, #20
    4a34:	af00      	add	r7, sp, #0
    4a36:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    4a38:	2300      	movs	r3, #0
    4a3a:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    4a3c:	687b      	ldr	r3, [r7, #4]
    4a3e:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    4a40:	68bb      	ldr	r3, [r7, #8]
    4a42:	695a      	ldr	r2, [r3, #20]
    4a44:	f640 2338 	movw	r3, #2616	; 0xa38
    4a48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a4c:	429a      	cmp	r2, r3
    4a4e:	d10d      	bne.n	4a6c <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    4a50:	68bb      	ldr	r3, [r7, #8]
    4a52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4a54:	f640 230c 	movw	r3, #2572	; 0xa0c
    4a58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a5c:	429a      	cmp	r2, r3
    4a5e:	d005      	beq.n	4a6c <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    4a60:	68bb      	ldr	r3, [r7, #8]
    4a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4a64:	2b00      	cmp	r3, #0
    4a66:	d101      	bne.n	4a6c <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    4a68:	2301      	movs	r3, #1
    4a6a:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    4a6c:	68fb      	ldr	r3, [r7, #12]
	}
    4a6e:	4618      	mov	r0, r3
    4a70:	3714      	adds	r7, #20
    4a72:	46bd      	mov	sp, r7
    4a74:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a78:	4770      	bx	lr
    4a7a:	bf00      	nop

00004a7c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    4a7c:	b580      	push	{r7, lr}
    4a7e:	b084      	sub	sp, #16
    4a80:	af00      	add	r7, sp, #0
    4a82:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    4a84:	687b      	ldr	r3, [r7, #4]
    4a86:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    4a88:	68fb      	ldr	r3, [r7, #12]
    4a8a:	2b00      	cmp	r3, #0
    4a8c:	d043      	beq.n	4b16 <vTaskResume+0x9a>
    4a8e:	f640 0348 	movw	r3, #2120	; 0x848
    4a92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a96:	681b      	ldr	r3, [r3, #0]
    4a98:	68fa      	ldr	r2, [r7, #12]
    4a9a:	429a      	cmp	r2, r3
    4a9c:	d03b      	beq.n	4b16 <vTaskResume+0x9a>
		{
			taskENTER_CRITICAL();
    4a9e:	f000 febd 	bl	581c <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    4aa2:	68f8      	ldr	r0, [r7, #12]
    4aa4:	f7ff ffc4 	bl	4a30 <xTaskIsTaskSuspended>
    4aa8:	4603      	mov	r3, r0
    4aaa:	2b01      	cmp	r3, #1
    4aac:	d131      	bne.n	4b12 <vTaskResume+0x96>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    4aae:	68fb      	ldr	r3, [r7, #12]
    4ab0:	3304      	adds	r3, #4
    4ab2:	4618      	mov	r0, r3
    4ab4:	f7ff f900 	bl	3cb8 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4ab8:	68fb      	ldr	r3, [r7, #12]
    4aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4abc:	f640 2358 	movw	r3, #2648	; 0xa58
    4ac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ac4:	681b      	ldr	r3, [r3, #0]
    4ac6:	429a      	cmp	r2, r3
    4ac8:	d906      	bls.n	4ad8 <vTaskResume+0x5c>
    4aca:	68fb      	ldr	r3, [r7, #12]
    4acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ace:	f640 2358 	movw	r3, #2648	; 0xa58
    4ad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ad6:	601a      	str	r2, [r3, #0]
    4ad8:	68fb      	ldr	r3, [r7, #12]
    4ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4adc:	4613      	mov	r3, r2
    4ade:	009b      	lsls	r3, r3, #2
    4ae0:	4413      	add	r3, r2
    4ae2:	009b      	lsls	r3, r3, #2
    4ae4:	f640 024c 	movw	r2, #2124	; 0x84c
    4ae8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4aec:	441a      	add	r2, r3
    4aee:	68fb      	ldr	r3, [r7, #12]
    4af0:	3304      	adds	r3, #4
    4af2:	4610      	mov	r0, r2
    4af4:	4619      	mov	r1, r3
    4af6:	f7ff f87f 	bl	3bf8 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4afa:	68fb      	ldr	r3, [r7, #12]
    4afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4afe:	f640 0348 	movw	r3, #2120	; 0x848
    4b02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b06:	681b      	ldr	r3, [r3, #0]
    4b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4b0a:	429a      	cmp	r2, r3
    4b0c:	d301      	bcc.n	4b12 <vTaskResume+0x96>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    4b0e:	f000 fe77 	bl	5800 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    4b12:	f000 fe99 	bl	5848 <vPortExitCritical>
		}
	}
    4b16:	3710      	adds	r7, #16
    4b18:	46bd      	mov	sp, r7
    4b1a:	bd80      	pop	{r7, pc}

00004b1c <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    4b1c:	b580      	push	{r7, lr}
    4b1e:	b086      	sub	sp, #24
    4b20:	af00      	add	r7, sp, #0
    4b22:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    4b24:	2300      	movs	r3, #0
    4b26:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    4b28:	687b      	ldr	r3, [r7, #4]
    4b2a:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4b2c:	2300      	movs	r3, #0
    4b2e:	60fb      	str	r3, [r7, #12]
    4b30:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4b34:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    4b38:	6938      	ldr	r0, [r7, #16]
    4b3a:	f7ff ff79 	bl	4a30 <xTaskIsTaskSuspended>
    4b3e:	4603      	mov	r3, r0
    4b40:	2b01      	cmp	r3, #1
    4b42:	d144      	bne.n	4bce <xTaskResumeFromISR+0xb2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4b44:	f640 2360 	movw	r3, #2656	; 0xa60
    4b48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b4c:	681b      	ldr	r3, [r3, #0]
    4b4e:	2b00      	cmp	r3, #0
    4b50:	d134      	bne.n	4bbc <xTaskResumeFromISR+0xa0>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    4b52:	693b      	ldr	r3, [r7, #16]
    4b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b56:	f640 0348 	movw	r3, #2120	; 0x848
    4b5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b5e:	681b      	ldr	r3, [r3, #0]
    4b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4b62:	429a      	cmp	r2, r3
    4b64:	bf34      	ite	cc
    4b66:	2300      	movcc	r3, #0
    4b68:	2301      	movcs	r3, #1
    4b6a:	b2db      	uxtb	r3, r3
    4b6c:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    4b6e:	693b      	ldr	r3, [r7, #16]
    4b70:	3304      	adds	r3, #4
    4b72:	4618      	mov	r0, r3
    4b74:	f7ff f8a0 	bl	3cb8 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4b78:	693b      	ldr	r3, [r7, #16]
    4b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b7c:	f640 2358 	movw	r3, #2648	; 0xa58
    4b80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b84:	681b      	ldr	r3, [r3, #0]
    4b86:	429a      	cmp	r2, r3
    4b88:	d906      	bls.n	4b98 <xTaskResumeFromISR+0x7c>
    4b8a:	693b      	ldr	r3, [r7, #16]
    4b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b8e:	f640 2358 	movw	r3, #2648	; 0xa58
    4b92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b96:	601a      	str	r2, [r3, #0]
    4b98:	693b      	ldr	r3, [r7, #16]
    4b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b9c:	4613      	mov	r3, r2
    4b9e:	009b      	lsls	r3, r3, #2
    4ba0:	4413      	add	r3, r2
    4ba2:	009b      	lsls	r3, r3, #2
    4ba4:	f640 024c 	movw	r2, #2124	; 0x84c
    4ba8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4bac:	441a      	add	r2, r3
    4bae:	693b      	ldr	r3, [r7, #16]
    4bb0:	3304      	adds	r3, #4
    4bb2:	4610      	mov	r0, r2
    4bb4:	4619      	mov	r1, r3
    4bb6:	f7ff f81f 	bl	3bf8 <vListInsertEnd>
    4bba:	e008      	b.n	4bce <xTaskResumeFromISR+0xb2>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    4bbc:	693b      	ldr	r3, [r7, #16]
    4bbe:	3318      	adds	r3, #24
    4bc0:	f640 200c 	movw	r0, #2572	; 0xa0c
    4bc4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4bc8:	4619      	mov	r1, r3
    4bca:	f7ff f815 	bl	3bf8 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4bce:	f04f 0000 	mov.w	r0, #0
    4bd2:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    4bd6:	697b      	ldr	r3, [r7, #20]
	}
    4bd8:	4618      	mov	r0, r3
    4bda:	3718      	adds	r7, #24
    4bdc:	46bd      	mov	sp, r7
    4bde:	bd80      	pop	{r7, pc}

00004be0 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    4be0:	b580      	push	{r7, lr}
    4be2:	b086      	sub	sp, #24
    4be4:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    4be6:	2300      	movs	r3, #0
    4be8:	9300      	str	r3, [sp, #0]
    4bea:	2300      	movs	r3, #0
    4bec:	9301      	str	r3, [sp, #4]
    4bee:	2300      	movs	r3, #0
    4bf0:	9302      	str	r3, [sp, #8]
    4bf2:	2300      	movs	r3, #0
    4bf4:	9303      	str	r3, [sp, #12]
    4bf6:	f245 2099 	movw	r0, #21145	; 0x5299
    4bfa:	f2c0 0000 	movt	r0, #0
    4bfe:	f648 1138 	movw	r1, #35128	; 0x8938
    4c02:	f2c0 0101 	movt	r1, #1
    4c06:	2280      	movs	r2, #128	; 0x80
    4c08:	2300      	movs	r3, #0
    4c0a:	f7ff fc6b 	bl	44e4 <xTaskGenericCreate>
    4c0e:	6078      	str	r0, [r7, #4]
            
		}
	}
	#endif

	if( xReturn == pdPASS )
    4c10:	687b      	ldr	r3, [r7, #4]
    4c12:	2b01      	cmp	r3, #1
    4c14:	d111      	bne.n	4c3a <vTaskStartScheduler+0x5a>
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */

		portDISABLE_INTERRUPTS();
    4c16:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4c1a:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    4c1e:	f640 235c 	movw	r3, #2652	; 0xa5c
    4c22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c26:	2201      	movs	r2, #1
    4c28:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    4c2a:	f640 2350 	movw	r3, #2640	; 0xa50
    4c2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c32:	2200      	movs	r2, #0
    4c34:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    4c36:	f000 fdb5 	bl	57a4 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    4c3a:	3708      	adds	r7, #8
    4c3c:	46bd      	mov	sp, r7
    4c3e:	bd80      	pop	{r7, pc}

00004c40 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    4c40:	b580      	push	{r7, lr}
    4c42:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    4c44:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4c48:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    4c4c:	f640 235c 	movw	r3, #2652	; 0xa5c
    4c50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c54:	2200      	movs	r2, #0
    4c56:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    4c58:	f000 fdcc 	bl	57f4 <vPortEndScheduler>
}
    4c5c:	bd80      	pop	{r7, pc}
    4c5e:	bf00      	nop

00004c60 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    4c60:	b480      	push	{r7}
    4c62:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    4c64:	f640 2360 	movw	r3, #2656	; 0xa60
    4c68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c6c:	681b      	ldr	r3, [r3, #0]
    4c6e:	1c5a      	adds	r2, r3, #1
    4c70:	f640 2360 	movw	r3, #2656	; 0xa60
    4c74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c78:	601a      	str	r2, [r3, #0]
}
    4c7a:	46bd      	mov	sp, r7
    4c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c80:	4770      	bx	lr
    4c82:	bf00      	nop

00004c84 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    4c84:	b590      	push	{r4, r7, lr}
    4c86:	b083      	sub	sp, #12
    4c88:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4c8a:	2300      	movs	r3, #0
    4c8c:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    4c8e:	f000 fdc5 	bl	581c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    4c92:	f640 2360 	movw	r3, #2656	; 0xa60
    4c96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c9a:	681b      	ldr	r3, [r3, #0]
    4c9c:	1e5a      	subs	r2, r3, #1
    4c9e:	f640 2360 	movw	r3, #2656	; 0xa60
    4ca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ca6:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4ca8:	f640 2360 	movw	r3, #2656	; 0xa60
    4cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cb0:	681b      	ldr	r3, [r3, #0]
    4cb2:	2b00      	cmp	r3, #0
    4cb4:	d177      	bne.n	4da6 <xTaskResumeAll+0x122>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    4cb6:	f640 234c 	movw	r3, #2636	; 0xa4c
    4cba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cbe:	681b      	ldr	r3, [r3, #0]
    4cc0:	2b00      	cmp	r3, #0
    4cc2:	d070      	beq.n	4da6 <xTaskResumeAll+0x122>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    4cc4:	2300      	movs	r3, #0
    4cc6:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    4cc8:	e036      	b.n	4d38 <xTaskResumeAll+0xb4>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    4cca:	f640 230c 	movw	r3, #2572	; 0xa0c
    4cce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cd2:	68db      	ldr	r3, [r3, #12]
    4cd4:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    4cd6:	f104 0318 	add.w	r3, r4, #24
    4cda:	4618      	mov	r0, r3
    4cdc:	f7fe ffec 	bl	3cb8 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    4ce0:	1d23      	adds	r3, r4, #4
    4ce2:	4618      	mov	r0, r3
    4ce4:	f7fe ffe8 	bl	3cb8 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4ce8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4cea:	f640 2358 	movw	r3, #2648	; 0xa58
    4cee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cf2:	681b      	ldr	r3, [r3, #0]
    4cf4:	429a      	cmp	r2, r3
    4cf6:	d905      	bls.n	4d04 <xTaskResumeAll+0x80>
    4cf8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4cfa:	f640 2358 	movw	r3, #2648	; 0xa58
    4cfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d02:	601a      	str	r2, [r3, #0]
    4d04:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4d06:	4613      	mov	r3, r2
    4d08:	009b      	lsls	r3, r3, #2
    4d0a:	4413      	add	r3, r2
    4d0c:	009b      	lsls	r3, r3, #2
    4d0e:	f640 024c 	movw	r2, #2124	; 0x84c
    4d12:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4d16:	441a      	add	r2, r3
    4d18:	1d23      	adds	r3, r4, #4
    4d1a:	4610      	mov	r0, r2
    4d1c:	4619      	mov	r1, r3
    4d1e:	f7fe ff6b 	bl	3bf8 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4d22:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4d24:	f640 0348 	movw	r3, #2120	; 0x848
    4d28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d2c:	681b      	ldr	r3, [r3, #0]
    4d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4d30:	429a      	cmp	r2, r3
    4d32:	d301      	bcc.n	4d38 <xTaskResumeAll+0xb4>
					{
						xYieldRequired = pdTRUE;
    4d34:	2301      	movs	r3, #1
    4d36:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    4d38:	f640 230c 	movw	r3, #2572	; 0xa0c
    4d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d40:	681b      	ldr	r3, [r3, #0]
    4d42:	2b00      	cmp	r3, #0
    4d44:	d1c1      	bne.n	4cca <xTaskResumeAll+0x46>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    4d46:	f640 2364 	movw	r3, #2660	; 0xa64
    4d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d4e:	681b      	ldr	r3, [r3, #0]
    4d50:	2b00      	cmp	r3, #0
    4d52:	d014      	beq.n	4d7e <xTaskResumeAll+0xfa>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    4d54:	e00c      	b.n	4d70 <xTaskResumeAll+0xec>
					{
						vTaskIncrementTick();
    4d56:	f000 f865 	bl	4e24 <vTaskIncrementTick>
						--uxMissedTicks;
    4d5a:	f640 2364 	movw	r3, #2660	; 0xa64
    4d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d62:	681b      	ldr	r3, [r3, #0]
    4d64:	1e5a      	subs	r2, r3, #1
    4d66:	f640 2364 	movw	r3, #2660	; 0xa64
    4d6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d6e:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    4d70:	f640 2364 	movw	r3, #2660	; 0xa64
    4d74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d78:	681b      	ldr	r3, [r3, #0]
    4d7a:	2b00      	cmp	r3, #0
    4d7c:	d1eb      	bne.n	4d56 <xTaskResumeAll+0xd2>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    4d7e:	683b      	ldr	r3, [r7, #0]
    4d80:	2b01      	cmp	r3, #1
    4d82:	d006      	beq.n	4d92 <xTaskResumeAll+0x10e>
    4d84:	f640 2368 	movw	r3, #2664	; 0xa68
    4d88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d8c:	681b      	ldr	r3, [r3, #0]
    4d8e:	2b01      	cmp	r3, #1
    4d90:	d109      	bne.n	4da6 <xTaskResumeAll+0x122>
				{
					xAlreadyYielded = pdTRUE;
    4d92:	2301      	movs	r3, #1
    4d94:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    4d96:	f640 2368 	movw	r3, #2664	; 0xa68
    4d9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d9e:	2200      	movs	r2, #0
    4da0:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    4da2:	f000 fd2d 	bl	5800 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    4da6:	f000 fd4f 	bl	5848 <vPortExitCritical>

	return xAlreadyYielded;
    4daa:	687b      	ldr	r3, [r7, #4]
}
    4dac:	4618      	mov	r0, r3
    4dae:	370c      	adds	r7, #12
    4db0:	46bd      	mov	sp, r7
    4db2:	bd90      	pop	{r4, r7, pc}

00004db4 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    4db4:	b580      	push	{r7, lr}
    4db6:	b082      	sub	sp, #8
    4db8:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    4dba:	f000 fd2f 	bl	581c <vPortEnterCritical>
	{
		xTicks = xTickCount;
    4dbe:	f640 2350 	movw	r3, #2640	; 0xa50
    4dc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dc6:	681b      	ldr	r3, [r3, #0]
    4dc8:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    4dca:	f000 fd3d 	bl	5848 <vPortExitCritical>

	return xTicks;
    4dce:	687b      	ldr	r3, [r7, #4]
}
    4dd0:	4618      	mov	r0, r3
    4dd2:	3708      	adds	r7, #8
    4dd4:	46bd      	mov	sp, r7
    4dd6:	bd80      	pop	{r7, pc}

00004dd8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    4dd8:	b480      	push	{r7}
    4dda:	b083      	sub	sp, #12
    4ddc:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4dde:	2300      	movs	r3, #0
    4de0:	607b      	str	r3, [r7, #4]
    4de2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4de6:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    4dea:	f640 2350 	movw	r3, #2640	; 0xa50
    4dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4df2:	681b      	ldr	r3, [r3, #0]
    4df4:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4df6:	f04f 0000 	mov.w	r0, #0
    4dfa:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4dfe:	683b      	ldr	r3, [r7, #0]
}
    4e00:	4618      	mov	r0, r3
    4e02:	370c      	adds	r7, #12
    4e04:	46bd      	mov	sp, r7
    4e06:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e0a:	4770      	bx	lr

00004e0c <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    4e0c:	b480      	push	{r7}
    4e0e:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    4e10:	f640 234c 	movw	r3, #2636	; 0xa4c
    4e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e18:	681b      	ldr	r3, [r3, #0]
}
    4e1a:	4618      	mov	r0, r3
    4e1c:	46bd      	mov	sp, r7
    4e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e22:	4770      	bx	lr

00004e24 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    4e24:	b580      	push	{r7, lr}
    4e26:	b084      	sub	sp, #16
    4e28:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4e2a:	f640 2360 	movw	r3, #2656	; 0xa60
    4e2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e32:	681b      	ldr	r3, [r3, #0]
    4e34:	2b00      	cmp	r3, #0
    4e36:	f040 80b9 	bne.w	4fac <vTaskIncrementTick+0x188>
	{
		++xTickCount;
    4e3a:	f640 2350 	movw	r3, #2640	; 0xa50
    4e3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e42:	681b      	ldr	r3, [r3, #0]
    4e44:	1c5a      	adds	r2, r3, #1
    4e46:	f640 2350 	movw	r3, #2640	; 0xa50
    4e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e4e:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    4e50:	f640 2350 	movw	r3, #2640	; 0xa50
    4e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e58:	681b      	ldr	r3, [r3, #0]
    4e5a:	2b00      	cmp	r3, #0
    4e5c:	d13f      	bne.n	4ede <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    4e5e:	f640 2304 	movw	r3, #2564	; 0xa04
    4e62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e66:	681b      	ldr	r3, [r3, #0]
    4e68:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    4e6a:	f640 2308 	movw	r3, #2568	; 0xa08
    4e6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e72:	681a      	ldr	r2, [r3, #0]
    4e74:	f640 2304 	movw	r3, #2564	; 0xa04
    4e78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e7c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    4e7e:	f640 2308 	movw	r3, #2568	; 0xa08
    4e82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e86:	68fa      	ldr	r2, [r7, #12]
    4e88:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    4e8a:	f640 236c 	movw	r3, #2668	; 0xa6c
    4e8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e92:	681b      	ldr	r3, [r3, #0]
    4e94:	1c5a      	adds	r2, r3, #1
    4e96:	f640 236c 	movw	r3, #2668	; 0xa6c
    4e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e9e:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    4ea0:	f640 2304 	movw	r3, #2564	; 0xa04
    4ea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ea8:	681b      	ldr	r3, [r3, #0]
    4eaa:	681b      	ldr	r3, [r3, #0]
    4eac:	2b00      	cmp	r3, #0
    4eae:	d107      	bne.n	4ec0 <vTaskIncrementTick+0x9c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    4eb0:	f240 2374 	movw	r3, #628	; 0x274
    4eb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eb8:	f04f 32ff 	mov.w	r2, #4294967295
    4ebc:	601a      	str	r2, [r3, #0]
    4ebe:	e00e      	b.n	4ede <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    4ec0:	f640 2304 	movw	r3, #2564	; 0xa04
    4ec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ec8:	681b      	ldr	r3, [r3, #0]
    4eca:	68db      	ldr	r3, [r3, #12]
    4ecc:	68db      	ldr	r3, [r3, #12]
    4ece:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    4ed0:	68bb      	ldr	r3, [r7, #8]
    4ed2:	685a      	ldr	r2, [r3, #4]
    4ed4:	f240 2374 	movw	r3, #628	; 0x274
    4ed8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4edc:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    4ede:	f640 2350 	movw	r3, #2640	; 0xa50
    4ee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ee6:	681a      	ldr	r2, [r3, #0]
    4ee8:	f240 2374 	movw	r3, #628	; 0x274
    4eec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ef0:	681b      	ldr	r3, [r3, #0]
    4ef2:	429a      	cmp	r2, r3
    4ef4:	d359      	bcc.n	4faa <vTaskIncrementTick+0x186>
    4ef6:	f640 2304 	movw	r3, #2564	; 0xa04
    4efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4efe:	681b      	ldr	r3, [r3, #0]
    4f00:	681b      	ldr	r3, [r3, #0]
    4f02:	2b00      	cmp	r3, #0
    4f04:	d107      	bne.n	4f16 <vTaskIncrementTick+0xf2>
    4f06:	f240 2374 	movw	r3, #628	; 0x274
    4f0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f0e:	f04f 32ff 	mov.w	r2, #4294967295
    4f12:	601a      	str	r2, [r3, #0]
    4f14:	e049      	b.n	4faa <vTaskIncrementTick+0x186>
    4f16:	f640 2304 	movw	r3, #2564	; 0xa04
    4f1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f1e:	681b      	ldr	r3, [r3, #0]
    4f20:	68db      	ldr	r3, [r3, #12]
    4f22:	68db      	ldr	r3, [r3, #12]
    4f24:	60bb      	str	r3, [r7, #8]
    4f26:	68bb      	ldr	r3, [r7, #8]
    4f28:	685b      	ldr	r3, [r3, #4]
    4f2a:	607b      	str	r3, [r7, #4]
    4f2c:	f640 2350 	movw	r3, #2640	; 0xa50
    4f30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f34:	681a      	ldr	r2, [r3, #0]
    4f36:	687b      	ldr	r3, [r7, #4]
    4f38:	429a      	cmp	r2, r3
    4f3a:	d206      	bcs.n	4f4a <vTaskIncrementTick+0x126>
    4f3c:	f240 2374 	movw	r3, #628	; 0x274
    4f40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f44:	687a      	ldr	r2, [r7, #4]
    4f46:	601a      	str	r2, [r3, #0]
    4f48:	e02f      	b.n	4faa <vTaskIncrementTick+0x186>
    4f4a:	68bb      	ldr	r3, [r7, #8]
    4f4c:	3304      	adds	r3, #4
    4f4e:	4618      	mov	r0, r3
    4f50:	f7fe feb2 	bl	3cb8 <vListRemove>
    4f54:	68bb      	ldr	r3, [r7, #8]
    4f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4f58:	2b00      	cmp	r3, #0
    4f5a:	d004      	beq.n	4f66 <vTaskIncrementTick+0x142>
    4f5c:	68bb      	ldr	r3, [r7, #8]
    4f5e:	3318      	adds	r3, #24
    4f60:	4618      	mov	r0, r3
    4f62:	f7fe fea9 	bl	3cb8 <vListRemove>
    4f66:	68bb      	ldr	r3, [r7, #8]
    4f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4f6a:	f640 2358 	movw	r3, #2648	; 0xa58
    4f6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f72:	681b      	ldr	r3, [r3, #0]
    4f74:	429a      	cmp	r2, r3
    4f76:	d906      	bls.n	4f86 <vTaskIncrementTick+0x162>
    4f78:	68bb      	ldr	r3, [r7, #8]
    4f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4f7c:	f640 2358 	movw	r3, #2648	; 0xa58
    4f80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f84:	601a      	str	r2, [r3, #0]
    4f86:	68bb      	ldr	r3, [r7, #8]
    4f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4f8a:	4613      	mov	r3, r2
    4f8c:	009b      	lsls	r3, r3, #2
    4f8e:	4413      	add	r3, r2
    4f90:	009b      	lsls	r3, r3, #2
    4f92:	f640 024c 	movw	r2, #2124	; 0x84c
    4f96:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4f9a:	441a      	add	r2, r3
    4f9c:	68bb      	ldr	r3, [r7, #8]
    4f9e:	3304      	adds	r3, #4
    4fa0:	4610      	mov	r0, r2
    4fa2:	4619      	mov	r1, r3
    4fa4:	f7fe fe28 	bl	3bf8 <vListInsertEnd>
    4fa8:	e7a5      	b.n	4ef6 <vTaskIncrementTick+0xd2>
    4faa:	e00c      	b.n	4fc6 <vTaskIncrementTick+0x1a2>
	}
	else
	{
		++uxMissedTicks;
    4fac:	f640 2364 	movw	r3, #2660	; 0xa64
    4fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fb4:	681b      	ldr	r3, [r3, #0]
    4fb6:	1c5a      	adds	r2, r3, #1
    4fb8:	f640 2364 	movw	r3, #2660	; 0xa64
    4fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fc0:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    4fc2:	f012 fa9f 	bl	17504 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    4fc6:	f640 2364 	movw	r3, #2660	; 0xa64
    4fca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fce:	681b      	ldr	r3, [r3, #0]
    4fd0:	2b00      	cmp	r3, #0
    4fd2:	d101      	bne.n	4fd8 <vTaskIncrementTick+0x1b4>
		{
			vApplicationTickHook();
    4fd4:	f012 fa96 	bl	17504 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    4fd8:	3710      	adds	r7, #16
    4fda:	46bd      	mov	sp, r7
    4fdc:	bd80      	pop	{r7, pc}
    4fde:	bf00      	nop

00004fe0 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    4fe0:	b580      	push	{r7, lr}
    4fe2:	b082      	sub	sp, #8
    4fe4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    4fe6:	f640 2360 	movw	r3, #2656	; 0xa60
    4fea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fee:	681b      	ldr	r3, [r3, #0]
    4ff0:	2b00      	cmp	r3, #0
    4ff2:	d006      	beq.n	5002 <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    4ff4:	f640 2368 	movw	r3, #2664	; 0xa68
    4ff8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ffc:	2201      	movs	r2, #1
    4ffe:	601a      	str	r2, [r3, #0]
    5000:	e047      	b.n	5092 <vTaskSwitchContext+0xb2>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    5002:	f012 fa79 	bl	174f8 <myTraceSwitchedOut>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    5006:	e00a      	b.n	501e <vTaskSwitchContext+0x3e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    5008:	f640 2358 	movw	r3, #2648	; 0xa58
    500c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5010:	681b      	ldr	r3, [r3, #0]
    5012:	1e5a      	subs	r2, r3, #1
    5014:	f640 2358 	movw	r3, #2648	; 0xa58
    5018:	f2c2 0300 	movt	r3, #8192	; 0x2000
    501c:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    501e:	f640 2358 	movw	r3, #2648	; 0xa58
    5022:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5026:	6819      	ldr	r1, [r3, #0]
    5028:	f640 024c 	movw	r2, #2124	; 0x84c
    502c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5030:	460b      	mov	r3, r1
    5032:	009b      	lsls	r3, r3, #2
    5034:	440b      	add	r3, r1
    5036:	009b      	lsls	r3, r3, #2
    5038:	4413      	add	r3, r2
    503a:	681b      	ldr	r3, [r3, #0]
    503c:	2b00      	cmp	r3, #0
    503e:	d0e3      	beq.n	5008 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    5040:	f640 2358 	movw	r3, #2648	; 0xa58
    5044:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5048:	681a      	ldr	r2, [r3, #0]
    504a:	4613      	mov	r3, r2
    504c:	009b      	lsls	r3, r3, #2
    504e:	4413      	add	r3, r2
    5050:	009b      	lsls	r3, r3, #2
    5052:	f640 024c 	movw	r2, #2124	; 0x84c
    5056:	f2c2 0200 	movt	r2, #8192	; 0x2000
    505a:	4413      	add	r3, r2
    505c:	607b      	str	r3, [r7, #4]
    505e:	687b      	ldr	r3, [r7, #4]
    5060:	685b      	ldr	r3, [r3, #4]
    5062:	685a      	ldr	r2, [r3, #4]
    5064:	687b      	ldr	r3, [r7, #4]
    5066:	605a      	str	r2, [r3, #4]
    5068:	687b      	ldr	r3, [r7, #4]
    506a:	685a      	ldr	r2, [r3, #4]
    506c:	687b      	ldr	r3, [r7, #4]
    506e:	3308      	adds	r3, #8
    5070:	429a      	cmp	r2, r3
    5072:	d104      	bne.n	507e <vTaskSwitchContext+0x9e>
    5074:	687b      	ldr	r3, [r7, #4]
    5076:	685b      	ldr	r3, [r3, #4]
    5078:	685a      	ldr	r2, [r3, #4]
    507a:	687b      	ldr	r3, [r7, #4]
    507c:	605a      	str	r2, [r3, #4]
    507e:	687b      	ldr	r3, [r7, #4]
    5080:	685b      	ldr	r3, [r3, #4]
    5082:	68da      	ldr	r2, [r3, #12]
    5084:	f640 0348 	movw	r3, #2120	; 0x848
    5088:	f2c2 0300 	movt	r3, #8192	; 0x2000
    508c:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
    508e:	f012 fa2d 	bl	174ec <myTraceSwitchedIn>
	}
}
    5092:	3708      	adds	r7, #8
    5094:	46bd      	mov	sp, r7
    5096:	bd80      	pop	{r7, pc}

00005098 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    5098:	b580      	push	{r7, lr}
    509a:	b084      	sub	sp, #16
    509c:	af00      	add	r7, sp, #0
    509e:	6078      	str	r0, [r7, #4]
    50a0:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    50a2:	f640 0348 	movw	r3, #2120	; 0x848
    50a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50aa:	681b      	ldr	r3, [r3, #0]
    50ac:	3318      	adds	r3, #24
    50ae:	6878      	ldr	r0, [r7, #4]
    50b0:	4619      	mov	r1, r3
    50b2:	f7fe fdc9 	bl	3c48 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    50b6:	f640 0348 	movw	r3, #2120	; 0x848
    50ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50be:	681b      	ldr	r3, [r3, #0]
    50c0:	3304      	adds	r3, #4
    50c2:	4618      	mov	r0, r3
    50c4:	f7fe fdf8 	bl	3cb8 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    50c8:	683b      	ldr	r3, [r7, #0]
    50ca:	f1b3 3fff 	cmp.w	r3, #4294967295
    50ce:	d10d      	bne.n	50ec <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    50d0:	f640 0348 	movw	r3, #2120	; 0x848
    50d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50d8:	681b      	ldr	r3, [r3, #0]
    50da:	3304      	adds	r3, #4
    50dc:	f640 2038 	movw	r0, #2616	; 0xa38
    50e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    50e4:	4619      	mov	r1, r3
    50e6:	f7fe fd87 	bl	3bf8 <vListInsertEnd>
    50ea:	e00a      	b.n	5102 <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    50ec:	f640 2350 	movw	r3, #2640	; 0xa50
    50f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50f4:	681a      	ldr	r2, [r3, #0]
    50f6:	683b      	ldr	r3, [r7, #0]
    50f8:	4413      	add	r3, r2
    50fa:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    50fc:	68f8      	ldr	r0, [r7, #12]
    50fe:	f000 f99f 	bl	5440 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    5102:	3710      	adds	r7, #16
    5104:	46bd      	mov	sp, r7
    5106:	bd80      	pop	{r7, pc}

00005108 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    5108:	b580      	push	{r7, lr}
    510a:	b084      	sub	sp, #16
    510c:	af00      	add	r7, sp, #0
    510e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    5110:	687b      	ldr	r3, [r7, #4]
    5112:	68db      	ldr	r3, [r3, #12]
    5114:	68db      	ldr	r3, [r3, #12]
    5116:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    5118:	68bb      	ldr	r3, [r7, #8]
    511a:	3318      	adds	r3, #24
    511c:	4618      	mov	r0, r3
    511e:	f7fe fdcb 	bl	3cb8 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    5122:	f640 2360 	movw	r3, #2656	; 0xa60
    5126:	f2c2 0300 	movt	r3, #8192	; 0x2000
    512a:	681b      	ldr	r3, [r3, #0]
    512c:	2b00      	cmp	r3, #0
    512e:	d126      	bne.n	517e <xTaskRemoveFromEventList+0x76>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    5130:	68bb      	ldr	r3, [r7, #8]
    5132:	3304      	adds	r3, #4
    5134:	4618      	mov	r0, r3
    5136:	f7fe fdbf 	bl	3cb8 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    513a:	68bb      	ldr	r3, [r7, #8]
    513c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    513e:	f640 2358 	movw	r3, #2648	; 0xa58
    5142:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5146:	681b      	ldr	r3, [r3, #0]
    5148:	429a      	cmp	r2, r3
    514a:	d906      	bls.n	515a <xTaskRemoveFromEventList+0x52>
    514c:	68bb      	ldr	r3, [r7, #8]
    514e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5150:	f640 2358 	movw	r3, #2648	; 0xa58
    5154:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5158:	601a      	str	r2, [r3, #0]
    515a:	68bb      	ldr	r3, [r7, #8]
    515c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    515e:	4613      	mov	r3, r2
    5160:	009b      	lsls	r3, r3, #2
    5162:	4413      	add	r3, r2
    5164:	009b      	lsls	r3, r3, #2
    5166:	f640 024c 	movw	r2, #2124	; 0x84c
    516a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    516e:	441a      	add	r2, r3
    5170:	68bb      	ldr	r3, [r7, #8]
    5172:	3304      	adds	r3, #4
    5174:	4610      	mov	r0, r2
    5176:	4619      	mov	r1, r3
    5178:	f7fe fd3e 	bl	3bf8 <vListInsertEnd>
    517c:	e008      	b.n	5190 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    517e:	68bb      	ldr	r3, [r7, #8]
    5180:	3318      	adds	r3, #24
    5182:	f640 200c 	movw	r0, #2572	; 0xa0c
    5186:	f2c2 0000 	movt	r0, #8192	; 0x2000
    518a:	4619      	mov	r1, r3
    518c:	f7fe fd34 	bl	3bf8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    5190:	68bb      	ldr	r3, [r7, #8]
    5192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5194:	f640 0348 	movw	r3, #2120	; 0x848
    5198:	f2c2 0300 	movt	r3, #8192	; 0x2000
    519c:	681b      	ldr	r3, [r3, #0]
    519e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    51a0:	429a      	cmp	r2, r3
    51a2:	d302      	bcc.n	51aa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    51a4:	2301      	movs	r3, #1
    51a6:	60fb      	str	r3, [r7, #12]
    51a8:	e001      	b.n	51ae <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
    51aa:	2300      	movs	r3, #0
    51ac:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    51ae:	68fb      	ldr	r3, [r7, #12]
}
    51b0:	4618      	mov	r0, r3
    51b2:	3710      	adds	r7, #16
    51b4:	46bd      	mov	sp, r7
    51b6:	bd80      	pop	{r7, pc}

000051b8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    51b8:	b480      	push	{r7}
    51ba:	b083      	sub	sp, #12
    51bc:	af00      	add	r7, sp, #0
    51be:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    51c0:	f640 236c 	movw	r3, #2668	; 0xa6c
    51c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51c8:	681a      	ldr	r2, [r3, #0]
    51ca:	687b      	ldr	r3, [r7, #4]
    51cc:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    51ce:	f640 2350 	movw	r3, #2640	; 0xa50
    51d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51d6:	681a      	ldr	r2, [r3, #0]
    51d8:	687b      	ldr	r3, [r7, #4]
    51da:	605a      	str	r2, [r3, #4]
}
    51dc:	370c      	adds	r7, #12
    51de:	46bd      	mov	sp, r7
    51e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    51e4:	4770      	bx	lr
    51e6:	bf00      	nop

000051e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    51e8:	b580      	push	{r7, lr}
    51ea:	b084      	sub	sp, #16
    51ec:	af00      	add	r7, sp, #0
    51ee:	6078      	str	r0, [r7, #4]
    51f0:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    51f2:	f000 fb13 	bl	581c <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    51f6:	683b      	ldr	r3, [r7, #0]
    51f8:	681b      	ldr	r3, [r3, #0]
    51fa:	f1b3 3fff 	cmp.w	r3, #4294967295
    51fe:	d102      	bne.n	5206 <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    5200:	2300      	movs	r3, #0
    5202:	60fb      	str	r3, [r7, #12]
    5204:	e035      	b.n	5272 <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    5206:	687b      	ldr	r3, [r7, #4]
    5208:	681a      	ldr	r2, [r3, #0]
    520a:	f640 236c 	movw	r3, #2668	; 0xa6c
    520e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5212:	681b      	ldr	r3, [r3, #0]
    5214:	429a      	cmp	r2, r3
    5216:	d00b      	beq.n	5230 <xTaskCheckForTimeOut+0x48>
    5218:	687b      	ldr	r3, [r7, #4]
    521a:	685a      	ldr	r2, [r3, #4]
    521c:	f640 2350 	movw	r3, #2640	; 0xa50
    5220:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5224:	681b      	ldr	r3, [r3, #0]
    5226:	429a      	cmp	r2, r3
    5228:	d802      	bhi.n	5230 <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    522a:	2301      	movs	r3, #1
    522c:	60fb      	str	r3, [r7, #12]
    522e:	e020      	b.n	5272 <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    5230:	f640 2350 	movw	r3, #2640	; 0xa50
    5234:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5238:	681a      	ldr	r2, [r3, #0]
    523a:	687b      	ldr	r3, [r7, #4]
    523c:	685b      	ldr	r3, [r3, #4]
    523e:	1ad2      	subs	r2, r2, r3
    5240:	683b      	ldr	r3, [r7, #0]
    5242:	681b      	ldr	r3, [r3, #0]
    5244:	429a      	cmp	r2, r3
    5246:	d212      	bcs.n	526e <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    5248:	683b      	ldr	r3, [r7, #0]
    524a:	681a      	ldr	r2, [r3, #0]
    524c:	687b      	ldr	r3, [r7, #4]
    524e:	6859      	ldr	r1, [r3, #4]
    5250:	f640 2350 	movw	r3, #2640	; 0xa50
    5254:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5258:	681b      	ldr	r3, [r3, #0]
    525a:	1acb      	subs	r3, r1, r3
    525c:	441a      	add	r2, r3
    525e:	683b      	ldr	r3, [r7, #0]
    5260:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    5262:	6878      	ldr	r0, [r7, #4]
    5264:	f7ff ffa8 	bl	51b8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    5268:	2300      	movs	r3, #0
    526a:	60fb      	str	r3, [r7, #12]
    526c:	e001      	b.n	5272 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    526e:	2301      	movs	r3, #1
    5270:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    5272:	f000 fae9 	bl	5848 <vPortExitCritical>

	return xReturn;
    5276:	68fb      	ldr	r3, [r7, #12]
}
    5278:	4618      	mov	r0, r3
    527a:	3710      	adds	r7, #16
    527c:	46bd      	mov	sp, r7
    527e:	bd80      	pop	{r7, pc}

00005280 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    5280:	b480      	push	{r7}
    5282:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    5284:	f640 2368 	movw	r3, #2664	; 0xa68
    5288:	f2c2 0300 	movt	r3, #8192	; 0x2000
    528c:	2201      	movs	r2, #1
    528e:	601a      	str	r2, [r3, #0]
}
    5290:	46bd      	mov	sp, r7
    5292:	f85d 7b04 	ldr.w	r7, [sp], #4
    5296:	4770      	bx	lr

00005298 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    5298:	b580      	push	{r7, lr}
    529a:	b082      	sub	sp, #8
    529c:	af00      	add	r7, sp, #0
    529e:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    52a0:	f000 f886 	bl	53b0 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    52a4:	f000 faac 	bl	5800 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    52a8:	e7fa      	b.n	52a0 <prvIdleTask+0x8>
    52aa:	bf00      	nop

000052ac <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    52ac:	b580      	push	{r7, lr}
    52ae:	b084      	sub	sp, #16
    52b0:	af00      	add	r7, sp, #0
    52b2:	60f8      	str	r0, [r7, #12]
    52b4:	60b9      	str	r1, [r7, #8]
    52b6:	607a      	str	r2, [r7, #4]
    52b8:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    52ba:	68fb      	ldr	r3, [r7, #12]
    52bc:	3334      	adds	r3, #52	; 0x34
    52be:	4618      	mov	r0, r3
    52c0:	68b9      	ldr	r1, [r7, #8]
    52c2:	2210      	movs	r2, #16
    52c4:	f013 fa98 	bl	187f8 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    52c8:	68fb      	ldr	r3, [r7, #12]
    52ca:	2200      	movs	r2, #0
    52cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    52d0:	687b      	ldr	r3, [r7, #4]
    52d2:	2b13      	cmp	r3, #19
    52d4:	d901      	bls.n	52da <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    52d6:	2313      	movs	r3, #19
    52d8:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    52da:	68fb      	ldr	r3, [r7, #12]
    52dc:	687a      	ldr	r2, [r7, #4]
    52de:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    52e0:	68fb      	ldr	r3, [r7, #12]
    52e2:	687a      	ldr	r2, [r7, #4]
    52e4:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    52e6:	68fb      	ldr	r3, [r7, #12]
    52e8:	3304      	adds	r3, #4
    52ea:	4618      	mov	r0, r3
    52ec:	f7fe fc78 	bl	3be0 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    52f0:	68fb      	ldr	r3, [r7, #12]
    52f2:	3318      	adds	r3, #24
    52f4:	4618      	mov	r0, r3
    52f6:	f7fe fc73 	bl	3be0 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    52fa:	68fb      	ldr	r3, [r7, #12]
    52fc:	68fa      	ldr	r2, [r7, #12]
    52fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    5300:	687b      	ldr	r3, [r7, #4]
    5302:	f1c3 0214 	rsb	r2, r3, #20
    5306:	68fb      	ldr	r3, [r7, #12]
    5308:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    530a:	68fb      	ldr	r3, [r7, #12]
    530c:	68fa      	ldr	r2, [r7, #12]
    530e:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    5310:	3710      	adds	r7, #16
    5312:	46bd      	mov	sp, r7
    5314:	bd80      	pop	{r7, pc}
    5316:	bf00      	nop

00005318 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    5318:	b580      	push	{r7, lr}
    531a:	b082      	sub	sp, #8
    531c:	af00      	add	r7, sp, #0
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    531e:	2300      	movs	r3, #0
    5320:	607b      	str	r3, [r7, #4]
    5322:	e00f      	b.n	5344 <prvInitialiseTaskLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    5324:	687a      	ldr	r2, [r7, #4]
    5326:	4613      	mov	r3, r2
    5328:	009b      	lsls	r3, r3, #2
    532a:	4413      	add	r3, r2
    532c:	009b      	lsls	r3, r3, #2
    532e:	f640 024c 	movw	r2, #2124	; 0x84c
    5332:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5336:	4413      	add	r3, r2
    5338:	4618      	mov	r0, r3
    533a:	f7fe fc31 	bl	3ba0 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    533e:	687b      	ldr	r3, [r7, #4]
    5340:	3301      	adds	r3, #1
    5342:	607b      	str	r3, [r7, #4]
    5344:	687b      	ldr	r3, [r7, #4]
    5346:	2b13      	cmp	r3, #19
    5348:	d9ec      	bls.n	5324 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    534a:	f640 10dc 	movw	r0, #2524	; 0x9dc
    534e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5352:	f7fe fc25 	bl	3ba0 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    5356:	f640 10f0 	movw	r0, #2544	; 0x9f0
    535a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    535e:	f7fe fc1f 	bl	3ba0 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    5362:	f640 200c 	movw	r0, #2572	; 0xa0c
    5366:	f2c2 0000 	movt	r0, #8192	; 0x2000
    536a:	f7fe fc19 	bl	3ba0 <vListInitialise>


	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    536e:	f640 2020 	movw	r0, #2592	; 0xa20
    5372:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5376:	f7fe fc13 	bl	3ba0 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    537a:	f640 2038 	movw	r0, #2616	; 0xa38
    537e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5382:	f7fe fc0d 	bl	3ba0 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    5386:	f640 2304 	movw	r3, #2564	; 0xa04
    538a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    538e:	f640 12dc 	movw	r2, #2524	; 0x9dc
    5392:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5396:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    5398:	f640 2308 	movw	r3, #2568	; 0xa08
    539c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53a0:	f640 12f0 	movw	r2, #2544	; 0x9f0
    53a4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    53a8:	601a      	str	r2, [r3, #0]
}
    53aa:	3708      	adds	r7, #8
    53ac:	46bd      	mov	sp, r7
    53ae:	bd80      	pop	{r7, pc}

000053b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    53b0:	b580      	push	{r7, lr}
    53b2:	b082      	sub	sp, #8
    53b4:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    53b6:	f640 2334 	movw	r3, #2612	; 0xa34
    53ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53be:	681b      	ldr	r3, [r3, #0]
    53c0:	2b00      	cmp	r3, #0
    53c2:	d03a      	beq.n	543a <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    53c4:	f7ff fc4c 	bl	4c60 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    53c8:	f640 2320 	movw	r3, #2592	; 0xa20
    53cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53d0:	681b      	ldr	r3, [r3, #0]
    53d2:	2b00      	cmp	r3, #0
    53d4:	bf14      	ite	ne
    53d6:	2300      	movne	r3, #0
    53d8:	2301      	moveq	r3, #1
    53da:	b2db      	uxtb	r3, r3
    53dc:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    53de:	f7ff fc51 	bl	4c84 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    53e2:	687b      	ldr	r3, [r7, #4]
    53e4:	2b00      	cmp	r3, #0
    53e6:	d128      	bne.n	543a <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    53e8:	f000 fa18 	bl	581c <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    53ec:	f640 2320 	movw	r3, #2592	; 0xa20
    53f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53f4:	68db      	ldr	r3, [r3, #12]
    53f6:	68db      	ldr	r3, [r3, #12]
    53f8:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    53fa:	683b      	ldr	r3, [r7, #0]
    53fc:	3304      	adds	r3, #4
    53fe:	4618      	mov	r0, r3
    5400:	f7fe fc5a 	bl	3cb8 <vListRemove>
					--uxCurrentNumberOfTasks;
    5404:	f640 234c 	movw	r3, #2636	; 0xa4c
    5408:	f2c2 0300 	movt	r3, #8192	; 0x2000
    540c:	681b      	ldr	r3, [r3, #0]
    540e:	1e5a      	subs	r2, r3, #1
    5410:	f640 234c 	movw	r3, #2636	; 0xa4c
    5414:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5418:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    541a:	f640 2334 	movw	r3, #2612	; 0xa34
    541e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5422:	681b      	ldr	r3, [r3, #0]
    5424:	1e5a      	subs	r2, r3, #1
    5426:	f640 2334 	movw	r3, #2612	; 0xa34
    542a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    542e:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    5430:	f000 fa0a 	bl	5848 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    5434:	6838      	ldr	r0, [r7, #0]
    5436:	f000 f879 	bl	552c <prvDeleteTCB>
			}
		}
	}
	#endif
}
    543a:	3708      	adds	r7, #8
    543c:	46bd      	mov	sp, r7
    543e:	bd80      	pop	{r7, pc}

00005440 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    5440:	b580      	push	{r7, lr}
    5442:	b082      	sub	sp, #8
    5444:	af00      	add	r7, sp, #0
    5446:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    5448:	f640 0348 	movw	r3, #2120	; 0x848
    544c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5450:	681b      	ldr	r3, [r3, #0]
    5452:	687a      	ldr	r2, [r7, #4]
    5454:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    5456:	f640 2350 	movw	r3, #2640	; 0xa50
    545a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    545e:	681b      	ldr	r3, [r3, #0]
    5460:	687a      	ldr	r2, [r7, #4]
    5462:	429a      	cmp	r2, r3
    5464:	d20f      	bcs.n	5486 <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5466:	f640 2308 	movw	r3, #2568	; 0xa08
    546a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    546e:	681a      	ldr	r2, [r3, #0]
    5470:	f640 0348 	movw	r3, #2120	; 0x848
    5474:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5478:	681b      	ldr	r3, [r3, #0]
    547a:	3304      	adds	r3, #4
    547c:	4610      	mov	r0, r2
    547e:	4619      	mov	r1, r3
    5480:	f7fe fbe2 	bl	3c48 <vListInsert>
    5484:	e01c      	b.n	54c0 <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5486:	f640 2304 	movw	r3, #2564	; 0xa04
    548a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    548e:	681a      	ldr	r2, [r3, #0]
    5490:	f640 0348 	movw	r3, #2120	; 0x848
    5494:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5498:	681b      	ldr	r3, [r3, #0]
    549a:	3304      	adds	r3, #4
    549c:	4610      	mov	r0, r2
    549e:	4619      	mov	r1, r3
    54a0:	f7fe fbd2 	bl	3c48 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    54a4:	f240 2374 	movw	r3, #628	; 0x274
    54a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54ac:	681b      	ldr	r3, [r3, #0]
    54ae:	687a      	ldr	r2, [r7, #4]
    54b0:	429a      	cmp	r2, r3
    54b2:	d205      	bcs.n	54c0 <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    54b4:	f240 2374 	movw	r3, #628	; 0x274
    54b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54bc:	687a      	ldr	r2, [r7, #4]
    54be:	601a      	str	r2, [r3, #0]
		}
	}
}
    54c0:	3708      	adds	r7, #8
    54c2:	46bd      	mov	sp, r7
    54c4:	bd80      	pop	{r7, pc}
    54c6:	bf00      	nop

000054c8 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    54c8:	b580      	push	{r7, lr}
    54ca:	b084      	sub	sp, #16
    54cc:	af00      	add	r7, sp, #0
    54ce:	4603      	mov	r3, r0
    54d0:	6039      	str	r1, [r7, #0]
    54d2:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    54d4:	2050      	movs	r0, #80	; 0x50
    54d6:	f000 fa1b 	bl	5910 <pvPortMalloc>
    54da:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    54dc:	68fb      	ldr	r3, [r7, #12]
    54de:	2b00      	cmp	r3, #0
    54e0:	d01f      	beq.n	5522 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    54e2:	683b      	ldr	r3, [r7, #0]
    54e4:	2b00      	cmp	r3, #0
    54e6:	d106      	bne.n	54f6 <prvAllocateTCBAndStack+0x2e>
    54e8:	88fb      	ldrh	r3, [r7, #6]
    54ea:	009b      	lsls	r3, r3, #2
    54ec:	4618      	mov	r0, r3
    54ee:	f000 fa0f 	bl	5910 <pvPortMalloc>
    54f2:	4603      	mov	r3, r0
    54f4:	e000      	b.n	54f8 <prvAllocateTCBAndStack+0x30>
    54f6:	683b      	ldr	r3, [r7, #0]
    54f8:	68fa      	ldr	r2, [r7, #12]
    54fa:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    54fc:	68fb      	ldr	r3, [r7, #12]
    54fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5500:	2b00      	cmp	r3, #0
    5502:	d105      	bne.n	5510 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    5504:	68f8      	ldr	r0, [r7, #12]
    5506:	f000 fac7 	bl	5a98 <vPortFree>
			pxNewTCB = NULL;
    550a:	2300      	movs	r3, #0
    550c:	60fb      	str	r3, [r7, #12]
    550e:	e008      	b.n	5522 <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    5510:	68fb      	ldr	r3, [r7, #12]
    5512:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    5514:	88fb      	ldrh	r3, [r7, #6]
    5516:	009b      	lsls	r3, r3, #2
    5518:	4610      	mov	r0, r2
    551a:	21a5      	movs	r1, #165	; 0xa5
    551c:	461a      	mov	r2, r3
    551e:	f013 f91b 	bl	18758 <memset>
		}
	}

	return pxNewTCB;
    5522:	68fb      	ldr	r3, [r7, #12]
}
    5524:	4618      	mov	r0, r3
    5526:	3710      	adds	r7, #16
    5528:	46bd      	mov	sp, r7
    552a:	bd80      	pop	{r7, pc}

0000552c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    552c:	b580      	push	{r7, lr}
    552e:	b082      	sub	sp, #8
    5530:	af00      	add	r7, sp, #0
    5532:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    5534:	687b      	ldr	r3, [r7, #4]
    5536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5538:	4618      	mov	r0, r3
    553a:	f000 faad 	bl	5a98 <vPortFree>
		vPortFree( pxTCB );
    553e:	6878      	ldr	r0, [r7, #4]
    5540:	f000 faaa 	bl	5a98 <vPortFree>
	}
    5544:	3708      	adds	r7, #8
    5546:	46bd      	mov	sp, r7
    5548:	bd80      	pop	{r7, pc}
    554a:	bf00      	nop

0000554c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    554c:	b480      	push	{r7}
    554e:	b083      	sub	sp, #12
    5550:	af00      	add	r7, sp, #0
        xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    5552:	f640 0348 	movw	r3, #2120	; 0x848
    5556:	f2c2 0300 	movt	r3, #8192	; 0x2000
    555a:	681b      	ldr	r3, [r3, #0]
    555c:	607b      	str	r3, [r7, #4]

		return xReturn;
    555e:	687b      	ldr	r3, [r7, #4]
	}
    5560:	4618      	mov	r0, r3
    5562:	370c      	adds	r7, #12
    5564:	46bd      	mov	sp, r7
    5566:	f85d 7b04 	ldr.w	r7, [sp], #4
    556a:	4770      	bx	lr

0000556c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    556c:	b580      	push	{r7, lr}
    556e:	b084      	sub	sp, #16
    5570:	af00      	add	r7, sp, #0
    5572:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5574:	687b      	ldr	r3, [r7, #4]
    5576:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    5578:	68fb      	ldr	r3, [r7, #12]
    557a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    557c:	f640 0348 	movw	r3, #2120	; 0x848
    5580:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5584:	681b      	ldr	r3, [r3, #0]
    5586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5588:	429a      	cmp	r2, r3
    558a:	d24f      	bcs.n	562c <vTaskPriorityInherit+0xc0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    558c:	f640 0348 	movw	r3, #2120	; 0x848
    5590:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5594:	681b      	ldr	r3, [r3, #0]
    5596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5598:	f1c3 0214 	rsb	r2, r3, #20
    559c:	68fb      	ldr	r3, [r7, #12]
    559e:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    55a0:	68fb      	ldr	r3, [r7, #12]
    55a2:	6959      	ldr	r1, [r3, #20]
    55a4:	68fb      	ldr	r3, [r7, #12]
    55a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    55a8:	4613      	mov	r3, r2
    55aa:	009b      	lsls	r3, r3, #2
    55ac:	4413      	add	r3, r2
    55ae:	009b      	lsls	r3, r3, #2
    55b0:	f640 024c 	movw	r2, #2124	; 0x84c
    55b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    55b8:	4413      	add	r3, r2
    55ba:	4299      	cmp	r1, r3
    55bc:	d12e      	bne.n	561c <vTaskPriorityInherit+0xb0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    55be:	68fb      	ldr	r3, [r7, #12]
    55c0:	3304      	adds	r3, #4
    55c2:	4618      	mov	r0, r3
    55c4:	f7fe fb78 	bl	3cb8 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    55c8:	f640 0348 	movw	r3, #2120	; 0x848
    55cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55d0:	681b      	ldr	r3, [r3, #0]
    55d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    55d4:	68fb      	ldr	r3, [r7, #12]
    55d6:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    55d8:	68fb      	ldr	r3, [r7, #12]
    55da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    55dc:	f640 2358 	movw	r3, #2648	; 0xa58
    55e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55e4:	681b      	ldr	r3, [r3, #0]
    55e6:	429a      	cmp	r2, r3
    55e8:	d906      	bls.n	55f8 <vTaskPriorityInherit+0x8c>
    55ea:	68fb      	ldr	r3, [r7, #12]
    55ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    55ee:	f640 2358 	movw	r3, #2648	; 0xa58
    55f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55f6:	601a      	str	r2, [r3, #0]
    55f8:	68fb      	ldr	r3, [r7, #12]
    55fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    55fc:	4613      	mov	r3, r2
    55fe:	009b      	lsls	r3, r3, #2
    5600:	4413      	add	r3, r2
    5602:	009b      	lsls	r3, r3, #2
    5604:	f640 024c 	movw	r2, #2124	; 0x84c
    5608:	f2c2 0200 	movt	r2, #8192	; 0x2000
    560c:	441a      	add	r2, r3
    560e:	68fb      	ldr	r3, [r7, #12]
    5610:	3304      	adds	r3, #4
    5612:	4610      	mov	r0, r2
    5614:	4619      	mov	r1, r3
    5616:	f7fe faef 	bl	3bf8 <vListInsertEnd>
    561a:	e007      	b.n	562c <vTaskPriorityInherit+0xc0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    561c:	f640 0348 	movw	r3, #2120	; 0x848
    5620:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5624:	681b      	ldr	r3, [r3, #0]
    5626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5628:	68fb      	ldr	r3, [r7, #12]
    562a:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    562c:	3710      	adds	r7, #16
    562e:	46bd      	mov	sp, r7
    5630:	bd80      	pop	{r7, pc}
    5632:	bf00      	nop

00005634 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    5634:	b580      	push	{r7, lr}
    5636:	b084      	sub	sp, #16
    5638:	af00      	add	r7, sp, #0
    563a:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    563c:	687b      	ldr	r3, [r7, #4]
    563e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    5640:	687b      	ldr	r3, [r7, #4]
    5642:	2b00      	cmp	r3, #0
    5644:	d035      	beq.n	56b2 <vTaskPriorityDisinherit+0x7e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    5646:	68fb      	ldr	r3, [r7, #12]
    5648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    564a:	68fb      	ldr	r3, [r7, #12]
    564c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    564e:	429a      	cmp	r2, r3
    5650:	d02f      	beq.n	56b2 <vTaskPriorityDisinherit+0x7e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    5652:	68fb      	ldr	r3, [r7, #12]
    5654:	3304      	adds	r3, #4
    5656:	4618      	mov	r0, r3
    5658:	f7fe fb2e 	bl	3cb8 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    565c:	68fb      	ldr	r3, [r7, #12]
    565e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    5660:	68fb      	ldr	r3, [r7, #12]
    5662:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    5664:	68fb      	ldr	r3, [r7, #12]
    5666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5668:	f1c3 0214 	rsb	r2, r3, #20
    566c:	68fb      	ldr	r3, [r7, #12]
    566e:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    5670:	68fb      	ldr	r3, [r7, #12]
    5672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5674:	f640 2358 	movw	r3, #2648	; 0xa58
    5678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    567c:	681b      	ldr	r3, [r3, #0]
    567e:	429a      	cmp	r2, r3
    5680:	d906      	bls.n	5690 <vTaskPriorityDisinherit+0x5c>
    5682:	68fb      	ldr	r3, [r7, #12]
    5684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5686:	f640 2358 	movw	r3, #2648	; 0xa58
    568a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    568e:	601a      	str	r2, [r3, #0]
    5690:	68fb      	ldr	r3, [r7, #12]
    5692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5694:	4613      	mov	r3, r2
    5696:	009b      	lsls	r3, r3, #2
    5698:	4413      	add	r3, r2
    569a:	009b      	lsls	r3, r3, #2
    569c:	f640 024c 	movw	r2, #2124	; 0x84c
    56a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    56a4:	441a      	add	r2, r3
    56a6:	68fb      	ldr	r3, [r7, #12]
    56a8:	3304      	adds	r3, #4
    56aa:	4610      	mov	r0, r2
    56ac:	4619      	mov	r1, r3
    56ae:	f7fe faa3 	bl	3bf8 <vListInsertEnd>
			}
		}
	}
    56b2:	3710      	adds	r7, #16
    56b4:	46bd      	mov	sp, r7
    56b6:	bd80      	pop	{r7, pc}

000056b8 <xTaskGetxStartTime>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_SEFM == 1)

    portTickType xTaskGetxStartTime( xTaskHandle pxTCB )
    {
    56b8:	b480      	push	{r7}
    56ba:	b083      	sub	sp, #12
    56bc:	af00      	add	r7, sp, #0
    56be:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xStartTime;
    56c0:	687b      	ldr	r3, [r7, #4]
    56c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    }
    56c4:	4618      	mov	r0, r3
    56c6:	370c      	adds	r7, #12
    56c8:	46bd      	mov	sp, r7
    56ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    56ce:	4770      	bx	lr

000056d0 <xTaskGetxLet>:

    portTickType xTaskGetxLet( xTaskHandle pxTCB )
    {
    56d0:	b480      	push	{r7}
    56d2:	b083      	sub	sp, #12
    56d4:	af00      	add	r7, sp, #0
    56d6:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xLet;
    56d8:	687b      	ldr	r3, [r7, #4]
    56da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
    56dc:	4618      	mov	r0, r3
    56de:	370c      	adds	r7, #12
    56e0:	46bd      	mov	sp, r7
    56e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    56e6:	4770      	bx	lr

000056e8 <vTaskSetxStartTime>:

    void vTaskSetxStartTime ( xTaskHandle pxTCB, portTickType xStartTime )
    {
    56e8:	b480      	push	{r7}
    56ea:	b083      	sub	sp, #12
    56ec:	af00      	add	r7, sp, #0
    56ee:	6078      	str	r0, [r7, #4]
    56f0:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xStartTime = xStartTime; 
    56f2:	687b      	ldr	r3, [r7, #4]
    56f4:	683a      	ldr	r2, [r7, #0]
    56f6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    56f8:	370c      	adds	r7, #12
    56fa:	46bd      	mov	sp, r7
    56fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5700:	4770      	bx	lr
    5702:	bf00      	nop

00005704 <vTaskSetxLet>:

    void vTaskSetxLet( xTaskHandle pxTCB, portTickType xLet )
    {
    5704:	b480      	push	{r7}
    5706:	b083      	sub	sp, #12
    5708:	af00      	add	r7, sp, #0
    570a:	6078      	str	r0, [r7, #4]
    570c:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xLet = xLet;
    570e:	687b      	ldr	r3, [r7, #4]
    5710:	683a      	ldr	r2, [r7, #0]
    5712:	649a      	str	r2, [r3, #72]	; 0x48
    }
    5714:	370c      	adds	r7, #12
    5716:	46bd      	mov	sp, r7
    5718:	f85d 7b04 	ldr.w	r7, [sp], #4
    571c:	4770      	bx	lr
    571e:	bf00      	nop

00005720 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    5720:	b480      	push	{r7}
    5722:	b085      	sub	sp, #20
    5724:	af00      	add	r7, sp, #0
    5726:	60f8      	str	r0, [r7, #12]
    5728:	60b9      	str	r1, [r7, #8]
    572a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    572c:	68fb      	ldr	r3, [r7, #12]
    572e:	3b04      	subs	r3, #4
    5730:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    5732:	68fb      	ldr	r3, [r7, #12]
    5734:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5738:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    573a:	68fb      	ldr	r3, [r7, #12]
    573c:	3b04      	subs	r3, #4
    573e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    5740:	68ba      	ldr	r2, [r7, #8]
    5742:	68fb      	ldr	r3, [r7, #12]
    5744:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5746:	68fb      	ldr	r3, [r7, #12]
    5748:	3b04      	subs	r3, #4
    574a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    574c:	68fb      	ldr	r3, [r7, #12]
    574e:	2200      	movs	r2, #0
    5750:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    5752:	68fb      	ldr	r3, [r7, #12]
    5754:	3b14      	subs	r3, #20
    5756:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    5758:	687a      	ldr	r2, [r7, #4]
    575a:	68fb      	ldr	r3, [r7, #12]
    575c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    575e:	68fb      	ldr	r3, [r7, #12]
    5760:	3b20      	subs	r3, #32
    5762:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    5764:	68fb      	ldr	r3, [r7, #12]
}
    5766:	4618      	mov	r0, r3
    5768:	3714      	adds	r7, #20
    576a:	46bd      	mov	sp, r7
    576c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5770:	4770      	bx	lr
    5772:	bf00      	nop

00005774 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    5774:	4b06      	ldr	r3, [pc, #24]	; (5790 <pxCurrentTCBConst2>)
    5776:	6819      	ldr	r1, [r3, #0]
    5778:	6808      	ldr	r0, [r1, #0]
    577a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    577e:	f380 8809 	msr	PSP, r0
    5782:	f04f 0000 	mov.w	r0, #0
    5786:	f380 8811 	msr	BASEPRI, r0
    578a:	f04e 0e0d 	orr.w	lr, lr, #13
    578e:	4770      	bx	lr

00005790 <pxCurrentTCBConst2>:
    5790:	20000848 	.word	0x20000848

00005794 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    5794:	485d      	ldr	r0, [pc, #372]	; (590c <prvSetupTimerInterrupt+0x2c>)
    5796:	6800      	ldr	r0, [r0, #0]
    5798:	6800      	ldr	r0, [r0, #0]
    579a:	f380 8808 	msr	MSP, r0
    579e:	b662      	cpsie	i
    57a0:	df00      	svc	0
    57a2:	bf00      	nop

000057a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    57a4:	b580      	push	{r7, lr}
    57a6:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    57a8:	f64e 5320 	movw	r3, #60704	; 0xed20
    57ac:	f2ce 0300 	movt	r3, #57344	; 0xe000
    57b0:	f64e 5220 	movw	r2, #60704	; 0xed20
    57b4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    57b8:	6812      	ldr	r2, [r2, #0]
    57ba:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    57be:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    57c0:	f64e 5320 	movw	r3, #60704	; 0xed20
    57c4:	f2ce 0300 	movt	r3, #57344	; 0xe000
    57c8:	f64e 5220 	movw	r2, #60704	; 0xed20
    57cc:	f2ce 0200 	movt	r2, #57344	; 0xe000
    57d0:	6812      	ldr	r2, [r2, #0]
    57d2:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    57d6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    57d8:	f000 f882 	bl	58e0 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    57dc:	f240 2378 	movw	r3, #632	; 0x278
    57e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57e4:	2200      	movs	r2, #0
    57e6:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    57e8:	f7ff ffd4 	bl	5794 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    57ec:	2300      	movs	r3, #0
}
    57ee:	4618      	mov	r0, r3
    57f0:	bd80      	pop	{r7, pc}
    57f2:	bf00      	nop

000057f4 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    57f4:	b480      	push	{r7}
    57f6:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    57f8:	46bd      	mov	sp, r7
    57fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    57fe:	4770      	bx	lr

00005800 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    5800:	b480      	push	{r7}
    5802:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    5804:	f64e 5304 	movw	r3, #60676	; 0xed04
    5808:	f2ce 0300 	movt	r3, #57344	; 0xe000
    580c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5810:	601a      	str	r2, [r3, #0]
}
    5812:	46bd      	mov	sp, r7
    5814:	f85d 7b04 	ldr.w	r7, [sp], #4
    5818:	4770      	bx	lr
    581a:	bf00      	nop

0000581c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    581c:	b480      	push	{r7}
    581e:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    5820:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5824:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    5828:	f240 2378 	movw	r3, #632	; 0x278
    582c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5830:	681b      	ldr	r3, [r3, #0]
    5832:	1c5a      	adds	r2, r3, #1
    5834:	f240 2378 	movw	r3, #632	; 0x278
    5838:	f2c2 0300 	movt	r3, #8192	; 0x2000
    583c:	601a      	str	r2, [r3, #0]
}
    583e:	46bd      	mov	sp, r7
    5840:	f85d 7b04 	ldr.w	r7, [sp], #4
    5844:	4770      	bx	lr
    5846:	bf00      	nop

00005848 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    5848:	b480      	push	{r7}
    584a:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    584c:	f240 2378 	movw	r3, #632	; 0x278
    5850:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5854:	681b      	ldr	r3, [r3, #0]
    5856:	1e5a      	subs	r2, r3, #1
    5858:	f240 2378 	movw	r3, #632	; 0x278
    585c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5860:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    5862:	f240 2378 	movw	r3, #632	; 0x278
    5866:	f2c2 0300 	movt	r3, #8192	; 0x2000
    586a:	681b      	ldr	r3, [r3, #0]
    586c:	2b00      	cmp	r3, #0
    586e:	d103      	bne.n	5878 <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    5870:	f04f 0000 	mov.w	r0, #0
    5874:	f380 8811 	msr	BASEPRI, r0
	}
}
    5878:	46bd      	mov	sp, r7
    587a:	f85d 7b04 	ldr.w	r7, [sp], #4
    587e:	4770      	bx	lr

00005880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    5880:	f3ef 8009 	mrs	r0, PSP
    5884:	4b0c      	ldr	r3, [pc, #48]	; (58b8 <pxCurrentTCBConst>)
    5886:	681a      	ldr	r2, [r3, #0]
    5888:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    588c:	6010      	str	r0, [r2, #0]
    588e:	e92d 4008 	stmdb	sp!, {r3, lr}
    5892:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5896:	f380 8811 	msr	BASEPRI, r0
    589a:	f7ff fba1 	bl	4fe0 <vTaskSwitchContext>
    589e:	f04f 0000 	mov.w	r0, #0
    58a2:	f380 8811 	msr	BASEPRI, r0
    58a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    58aa:	6819      	ldr	r1, [r3, #0]
    58ac:	6808      	ldr	r0, [r1, #0]
    58ae:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    58b2:	f380 8809 	msr	PSP, r0
    58b6:	4770      	bx	lr

000058b8 <pxCurrentTCBConst>:
    58b8:	20000848 	.word	0x20000848

000058bc <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    58bc:	b580      	push	{r7, lr}
    58be:	b082      	sub	sp, #8
    58c0:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    58c2:	2300      	movs	r3, #0
    58c4:	607b      	str	r3, [r7, #4]
    58c6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    58ca:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    58ce:	f7ff faa9 	bl	4e24 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    58d2:	f04f 0000 	mov.w	r0, #0
    58d6:	f380 8811 	msr	BASEPRI, r0
}
    58da:	3708      	adds	r7, #8
    58dc:	46bd      	mov	sp, r7
    58de:	bd80      	pop	{r7, pc}

000058e0 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    58e0:	b480      	push	{r7}
    58e2:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    58e4:	f24e 0314 	movw	r3, #57364	; 0xe014
    58e8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    58ec:	f641 123f 	movw	r2, #6463	; 0x193f
    58f0:	f2c0 0201 	movt	r2, #1
    58f4:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    58f6:	f24e 0310 	movw	r3, #57360	; 0xe010
    58fa:	f2ce 0300 	movt	r3, #57344	; 0xe000
    58fe:	2207      	movs	r2, #7
    5900:	601a      	str	r2, [r3, #0]
}
    5902:	46bd      	mov	sp, r7
    5904:	f85d 7b04 	ldr.w	r7, [sp], #4
    5908:	4770      	bx	lr
    590a:	0000      	.short	0x0000
    590c:	e000ed08 	.word	0xe000ed08

00005910 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    5910:	b580      	push	{r7, lr}
    5912:	b08a      	sub	sp, #40	; 0x28
    5914:	af00      	add	r7, sp, #0
    5916:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    5918:	2300      	movs	r3, #0
    591a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    591c:	f7ff f9a0 	bl	4c60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    5920:	f64a 2388 	movw	r3, #43656	; 0xaa88
    5924:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5928:	681b      	ldr	r3, [r3, #0]
    592a:	2b00      	cmp	r3, #0
    592c:	d130      	bne.n	5990 <pvPortMalloc+0x80>
		{
			prvHeapInit();
    592e:	f64a 2378 	movw	r3, #43640	; 0xaa78
    5932:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5936:	f640 2278 	movw	r2, #2680	; 0xa78
    593a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    593e:	601a      	str	r2, [r3, #0]
    5940:	f64a 2378 	movw	r3, #43640	; 0xaa78
    5944:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5948:	2200      	movs	r2, #0
    594a:	605a      	str	r2, [r3, #4]
    594c:	f64a 2380 	movw	r3, #43648	; 0xaa80
    5950:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5954:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    5958:	605a      	str	r2, [r3, #4]
    595a:	f64a 2380 	movw	r3, #43648	; 0xaa80
    595e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5962:	2200      	movs	r2, #0
    5964:	601a      	str	r2, [r3, #0]
    5966:	f640 2378 	movw	r3, #2680	; 0xa78
    596a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    596e:	617b      	str	r3, [r7, #20]
    5970:	697b      	ldr	r3, [r7, #20]
    5972:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    5976:	605a      	str	r2, [r3, #4]
    5978:	697a      	ldr	r2, [r7, #20]
    597a:	f64a 2380 	movw	r3, #43648	; 0xaa80
    597e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5982:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    5984:	f64a 2388 	movw	r3, #43656	; 0xaa88
    5988:	f2c2 0300 	movt	r3, #8192	; 0x2000
    598c:	2201      	movs	r2, #1
    598e:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    5990:	687b      	ldr	r3, [r7, #4]
    5992:	2b00      	cmp	r3, #0
    5994:	d00d      	beq.n	59b2 <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    5996:	2310      	movs	r3, #16
    5998:	687a      	ldr	r2, [r7, #4]
    599a:	4413      	add	r3, r2
    599c:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    599e:	687b      	ldr	r3, [r7, #4]
    59a0:	f003 0307 	and.w	r3, r3, #7
    59a4:	2b00      	cmp	r3, #0
    59a6:	d004      	beq.n	59b2 <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    59a8:	687b      	ldr	r3, [r7, #4]
    59aa:	f023 0307 	bic.w	r3, r3, #7
    59ae:	3308      	adds	r3, #8
    59b0:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    59b2:	687b      	ldr	r3, [r7, #4]
    59b4:	2b00      	cmp	r3, #0
    59b6:	d068      	beq.n	5a8a <pvPortMalloc+0x17a>
    59b8:	687b      	ldr	r3, [r7, #4]
    59ba:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
    59be:	d264      	bcs.n	5a8a <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    59c0:	f64a 2378 	movw	r3, #43640	; 0xaa78
    59c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59c8:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    59ca:	f64a 2378 	movw	r3, #43640	; 0xaa78
    59ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59d2:	681b      	ldr	r3, [r3, #0]
    59d4:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    59d6:	e004      	b.n	59e2 <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    59d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    59da:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    59dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    59de:	681b      	ldr	r3, [r3, #0]
    59e0:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    59e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    59e4:	685a      	ldr	r2, [r3, #4]
    59e6:	687b      	ldr	r3, [r7, #4]
    59e8:	429a      	cmp	r2, r3
    59ea:	d203      	bcs.n	59f4 <pvPortMalloc+0xe4>
    59ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    59ee:	681b      	ldr	r3, [r3, #0]
    59f0:	2b00      	cmp	r3, #0
    59f2:	d1f1      	bne.n	59d8 <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    59f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    59f6:	f64a 2380 	movw	r3, #43648	; 0xaa80
    59fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59fe:	429a      	cmp	r2, r3
    5a00:	d043      	beq.n	5a8a <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    5a02:	6a3b      	ldr	r3, [r7, #32]
    5a04:	681a      	ldr	r2, [r3, #0]
    5a06:	2310      	movs	r3, #16
    5a08:	4413      	add	r3, r2
    5a0a:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    5a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5a0e:	681a      	ldr	r2, [r3, #0]
    5a10:	6a3b      	ldr	r3, [r7, #32]
    5a12:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    5a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5a16:	685a      	ldr	r2, [r3, #4]
    5a18:	687b      	ldr	r3, [r7, #4]
    5a1a:	1ad2      	subs	r2, r2, r3
    5a1c:	2310      	movs	r3, #16
    5a1e:	005b      	lsls	r3, r3, #1
    5a20:	429a      	cmp	r2, r3
    5a22:	d925      	bls.n	5a70 <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    5a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5a26:	687b      	ldr	r3, [r7, #4]
    5a28:	4413      	add	r3, r2
    5a2a:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    5a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5a2e:	685a      	ldr	r2, [r3, #4]
    5a30:	687b      	ldr	r3, [r7, #4]
    5a32:	1ad2      	subs	r2, r2, r3
    5a34:	693b      	ldr	r3, [r7, #16]
    5a36:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    5a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5a3a:	687a      	ldr	r2, [r7, #4]
    5a3c:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    5a3e:	693b      	ldr	r3, [r7, #16]
    5a40:	685b      	ldr	r3, [r3, #4]
    5a42:	60fb      	str	r3, [r7, #12]
    5a44:	f64a 2378 	movw	r3, #43640	; 0xaa78
    5a48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a4c:	61bb      	str	r3, [r7, #24]
    5a4e:	e002      	b.n	5a56 <pvPortMalloc+0x146>
    5a50:	69bb      	ldr	r3, [r7, #24]
    5a52:	681b      	ldr	r3, [r3, #0]
    5a54:	61bb      	str	r3, [r7, #24]
    5a56:	69bb      	ldr	r3, [r7, #24]
    5a58:	681b      	ldr	r3, [r3, #0]
    5a5a:	685a      	ldr	r2, [r3, #4]
    5a5c:	68fb      	ldr	r3, [r7, #12]
    5a5e:	429a      	cmp	r2, r3
    5a60:	d3f6      	bcc.n	5a50 <pvPortMalloc+0x140>
    5a62:	69bb      	ldr	r3, [r7, #24]
    5a64:	681a      	ldr	r2, [r3, #0]
    5a66:	693b      	ldr	r3, [r7, #16]
    5a68:	601a      	str	r2, [r3, #0]
    5a6a:	69bb      	ldr	r3, [r7, #24]
    5a6c:	693a      	ldr	r2, [r7, #16]
    5a6e:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    5a70:	f240 237c 	movw	r3, #636	; 0x27c
    5a74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a78:	681a      	ldr	r2, [r3, #0]
    5a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5a7c:	685b      	ldr	r3, [r3, #4]
    5a7e:	1ad2      	subs	r2, r2, r3
    5a80:	f240 237c 	movw	r3, #636	; 0x27c
    5a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a88:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    5a8a:	f7ff f8fb 	bl	4c84 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    5a8e:	69fb      	ldr	r3, [r7, #28]
}
    5a90:	4618      	mov	r0, r3
    5a92:	3728      	adds	r7, #40	; 0x28
    5a94:	46bd      	mov	sp, r7
    5a96:	bd80      	pop	{r7, pc}

00005a98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    5a98:	b580      	push	{r7, lr}
    5a9a:	b086      	sub	sp, #24
    5a9c:	af00      	add	r7, sp, #0
    5a9e:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    5aa0:	687b      	ldr	r3, [r7, #4]
    5aa2:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    5aa4:	687b      	ldr	r3, [r7, #4]
    5aa6:	2b00      	cmp	r3, #0
    5aa8:	d030      	beq.n	5b0c <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    5aaa:	2310      	movs	r3, #16
    5aac:	425b      	negs	r3, r3
    5aae:	693a      	ldr	r2, [r7, #16]
    5ab0:	4413      	add	r3, r2
    5ab2:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    5ab4:	693b      	ldr	r3, [r7, #16]
    5ab6:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    5ab8:	f7ff f8d2 	bl	4c60 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    5abc:	68fb      	ldr	r3, [r7, #12]
    5abe:	685b      	ldr	r3, [r3, #4]
    5ac0:	60bb      	str	r3, [r7, #8]
    5ac2:	f64a 2378 	movw	r3, #43640	; 0xaa78
    5ac6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5aca:	617b      	str	r3, [r7, #20]
    5acc:	e002      	b.n	5ad4 <vPortFree+0x3c>
    5ace:	697b      	ldr	r3, [r7, #20]
    5ad0:	681b      	ldr	r3, [r3, #0]
    5ad2:	617b      	str	r3, [r7, #20]
    5ad4:	697b      	ldr	r3, [r7, #20]
    5ad6:	681b      	ldr	r3, [r3, #0]
    5ad8:	685a      	ldr	r2, [r3, #4]
    5ada:	68bb      	ldr	r3, [r7, #8]
    5adc:	429a      	cmp	r2, r3
    5ade:	d3f6      	bcc.n	5ace <vPortFree+0x36>
    5ae0:	697b      	ldr	r3, [r7, #20]
    5ae2:	681a      	ldr	r2, [r3, #0]
    5ae4:	68fb      	ldr	r3, [r7, #12]
    5ae6:	601a      	str	r2, [r3, #0]
    5ae8:	697b      	ldr	r3, [r7, #20]
    5aea:	68fa      	ldr	r2, [r7, #12]
    5aec:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    5aee:	68fb      	ldr	r3, [r7, #12]
    5af0:	685a      	ldr	r2, [r3, #4]
    5af2:	f240 237c 	movw	r3, #636	; 0x27c
    5af6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5afa:	681b      	ldr	r3, [r3, #0]
    5afc:	441a      	add	r2, r3
    5afe:	f240 237c 	movw	r3, #636	; 0x27c
    5b02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b06:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    5b08:	f7ff f8bc 	bl	4c84 <xTaskResumeAll>
	}
}
    5b0c:	3718      	adds	r7, #24
    5b0e:	46bd      	mov	sp, r7
    5b10:	bd80      	pop	{r7, pc}
    5b12:	bf00      	nop

00005b14 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    5b14:	b480      	push	{r7}
    5b16:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    5b18:	f240 237c 	movw	r3, #636	; 0x27c
    5b1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b20:	681b      	ldr	r3, [r3, #0]
}
    5b22:	4618      	mov	r0, r3
    5b24:	46bd      	mov	sp, r7
    5b26:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b2a:	4770      	bx	lr

00005b2c <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    5b2c:	b480      	push	{r7}
    5b2e:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    5b30:	46bd      	mov	sp, r7
    5b32:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b36:	4770      	bx	lr

00005b38 <ground_calibrate>:
 * set to auto1 before MAX_DELAY_FOR_CALIBRATION secondes */
/**User must put verticaly the uav (nose bottom) and push
 * radio roll stick to get new calibration
 * If not, the default calibration is used.
 */
inline void ground_calibrate( void ) {
    5b38:	b580      	push	{r7, lr}
    5b3a:	af00      	add	r7, sp, #0
    break;
  case CALIB_DONE:
    break;
  }
#else*/
if(calib_status == NO_CALIB)
    5b3c:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
    5b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b44:	781b      	ldrb	r3, [r3, #0]
    5b46:	2b00      	cmp	r3, #0
    5b48:	f040 815d 	bne.w	5e06 <ground_calibrate+0x2ce>
{
    if (cputime < MAX_DELAY_FOR_CALIBRATION && pprz_mode == PPRZ_MODE_AUTO1 ) {
    5b4c:	f64a 2392 	movw	r3, #43666	; 0xaa92
    5b50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b54:	881b      	ldrh	r3, [r3, #0]
    5b56:	2b09      	cmp	r3, #9
    5b58:	f201 8145 	bhi.w	6de6 <ground_calibrate+0x12ae>
    5b5c:	f64a 2394 	movw	r3, #43668	; 0xaa94
    5b60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b64:	781b      	ldrb	r3, [r3, #0]
    5b66:	2b01      	cmp	r3, #1
    5b68:	f041 813d 	bne.w	6de6 <ground_calibrate+0x12ae>
      calib_status = WAITING_CALIB_CONTRAST;
    5b6c:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
    5b70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b74:	2201      	movs	r2, #1
    5b76:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_START();
    5b78:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5b7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b80:	781a      	ldrb	r2, [r3, #0]
    5b82:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    5b86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b8a:	781b      	ldrb	r3, [r3, #0]
    5b8c:	b2db      	uxtb	r3, r3
    5b8e:	429a      	cmp	r2, r3
    5b90:	d313      	bcc.n	5bba <ground_calibrate+0x82>
    5b92:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    5b96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b9a:	781b      	ldrb	r3, [r3, #0]
    5b9c:	b2db      	uxtb	r3, r3
    5b9e:	461a      	mov	r2, r3
    5ba0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5ba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ba8:	781b      	ldrb	r3, [r3, #0]
    5baa:	1ad3      	subs	r3, r2, r3
    5bac:	33ff      	adds	r3, #255	; 0xff
    5bae:	2b04      	cmp	r3, #4
    5bb0:	bfd4      	ite	le
    5bb2:	2300      	movle	r3, #0
    5bb4:	2301      	movgt	r3, #1
    5bb6:	b2db      	uxtb	r3, r3
    5bb8:	e011      	b.n	5bde <ground_calibrate+0xa6>
    5bba:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    5bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bc2:	781b      	ldrb	r3, [r3, #0]
    5bc4:	b2db      	uxtb	r3, r3
    5bc6:	461a      	mov	r2, r3
    5bc8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5bcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bd0:	781b      	ldrb	r3, [r3, #0]
    5bd2:	1ad3      	subs	r3, r2, r3
    5bd4:	2b04      	cmp	r3, #4
    5bd6:	bfd4      	ite	le
    5bd8:	2300      	movle	r3, #0
    5bda:	2301      	movgt	r3, #1
    5bdc:	b2db      	uxtb	r3, r3
    5bde:	2b00      	cmp	r3, #0
    5be0:	f000 8103 	beq.w	5dea <ground_calibrate+0x2b2>
    5be4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5be8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bec:	781b      	ldrb	r3, [r3, #0]
    5bee:	461a      	mov	r2, r3
    5bf0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    5bf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bf8:	2105      	movs	r1, #5
    5bfa:	5499      	strb	r1, [r3, r2]
    5bfc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5c00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c04:	781b      	ldrb	r3, [r3, #0]
    5c06:	3301      	adds	r3, #1
    5c08:	b2da      	uxtb	r2, r3
    5c0a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5c0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c12:	701a      	strb	r2, [r3, #0]
    5c14:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5c18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c1c:	781b      	ldrb	r3, [r3, #0]
    5c1e:	2bff      	cmp	r3, #255	; 0xff
    5c20:	d105      	bne.n	5c2e <ground_calibrate+0xf6>
    5c22:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5c26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c2a:	2200      	movs	r2, #0
    5c2c:	701a      	strb	r2, [r3, #0]
    5c2e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5c32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c36:	781b      	ldrb	r3, [r3, #0]
    5c38:	461a      	mov	r2, r3
    5c3a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    5c3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c42:	2102      	movs	r1, #2
    5c44:	5499      	strb	r1, [r3, r2]
    5c46:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c4e:	781b      	ldrb	r3, [r3, #0]
    5c50:	3301      	adds	r3, #1
    5c52:	b2da      	uxtb	r2, r3
    5c54:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5c58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c5c:	701a      	strb	r2, [r3, #0]
    5c5e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5c62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c66:	781b      	ldrb	r3, [r3, #0]
    5c68:	2bff      	cmp	r3, #255	; 0xff
    5c6a:	d105      	bne.n	5c78 <ground_calibrate+0x140>
    5c6c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5c70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c74:	2200      	movs	r2, #0
    5c76:	701a      	strb	r2, [r3, #0]
    5c78:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    5c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c80:	2202      	movs	r2, #2
    5c82:	701a      	strb	r2, [r3, #0]
    5c84:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    5c88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c8c:	2202      	movs	r2, #2
    5c8e:	701a      	strb	r2, [r3, #0]
    5c90:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5c94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c98:	781b      	ldrb	r3, [r3, #0]
    5c9a:	461a      	mov	r2, r3
    5c9c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    5ca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ca4:	7819      	ldrb	r1, [r3, #0]
    5ca6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    5caa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cae:	5499      	strb	r1, [r3, r2]
    5cb0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5cb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cb8:	781b      	ldrb	r3, [r3, #0]
    5cba:	3301      	adds	r3, #1
    5cbc:	b2da      	uxtb	r2, r3
    5cbe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5cc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cc6:	701a      	strb	r2, [r3, #0]
    5cc8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5ccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cd0:	781b      	ldrb	r3, [r3, #0]
    5cd2:	2bff      	cmp	r3, #255	; 0xff
    5cd4:	d105      	bne.n	5ce2 <ground_calibrate+0x1aa>
    5cd6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5cda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cde:	2200      	movs	r2, #0
    5ce0:	701a      	strb	r2, [r3, #0]
    5ce2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5ce6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cea:	781b      	ldrb	r3, [r3, #0]
    5cec:	461a      	mov	r2, r3
    5cee:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    5cf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cf6:	7819      	ldrb	r1, [r3, #0]
    5cf8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    5cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d00:	5499      	strb	r1, [r3, r2]
    5d02:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5d06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d0a:	781b      	ldrb	r3, [r3, #0]
    5d0c:	3301      	adds	r3, #1
    5d0e:	b2da      	uxtb	r2, r3
    5d10:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d18:	701a      	strb	r2, [r3, #0]
    5d1a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d22:	781b      	ldrb	r3, [r3, #0]
    5d24:	2bff      	cmp	r3, #255	; 0xff
    5d26:	d105      	bne.n	5d34 <ground_calibrate+0x1fc>
    5d28:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5d2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d30:	2200      	movs	r2, #0
    5d32:	701a      	strb	r2, [r3, #0]
    5d34:	f242 0339 	movw	r3, #8249	; 0x2039
    5d38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d3c:	781b      	ldrb	r3, [r3, #0]
    5d3e:	b2db      	uxtb	r3, r3
    5d40:	f003 0310 	and.w	r3, r3, #16
    5d44:	2b00      	cmp	r3, #0
    5d46:	f041 804e 	bne.w	6de6 <ground_calibrate+0x12ae>
    5d4a:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    5d4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d52:	781b      	ldrb	r3, [r3, #0]
    5d54:	b2db      	uxtb	r3, r3
    5d56:	461a      	mov	r2, r3
    5d58:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    5d5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d60:	5c9a      	ldrb	r2, [r3, r2]
    5d62:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    5d66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d6a:	701a      	strb	r2, [r3, #0]
    5d6c:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    5d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d74:	2200      	movs	r2, #0
    5d76:	701a      	strb	r2, [r3, #0]
    5d78:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    5d7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d80:	781b      	ldrb	r3, [r3, #0]
    5d82:	b2db      	uxtb	r3, r3
    5d84:	3301      	adds	r3, #1
    5d86:	b2da      	uxtb	r2, r3
    5d88:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    5d8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d90:	701a      	strb	r2, [r3, #0]
    5d92:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    5d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d9a:	781b      	ldrb	r3, [r3, #0]
    5d9c:	b2db      	uxtb	r3, r3
    5d9e:	2bff      	cmp	r3, #255	; 0xff
    5da0:	d105      	bne.n	5dae <ground_calibrate+0x276>
    5da2:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    5da6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5daa:	2200      	movs	r2, #0
    5dac:	701a      	strb	r2, [r3, #0]
    5dae:	f242 0338 	movw	r3, #8248	; 0x2038
    5db2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5db6:	f242 0238 	movw	r2, #8248	; 0x2038
    5dba:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5dbe:	7812      	ldrb	r2, [r2, #0]
    5dc0:	b2d2      	uxtb	r2, r2
    5dc2:	f042 0201 	orr.w	r2, r2, #1
    5dc6:	b2d2      	uxtb	r2, r2
    5dc8:	701a      	strb	r2, [r3, #0]
    5dca:	f242 0339 	movw	r3, #8249	; 0x2039
    5dce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dd2:	f242 0239 	movw	r2, #8249	; 0x2039
    5dd6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5dda:	7812      	ldrb	r2, [r2, #0]
    5ddc:	b2d2      	uxtb	r2, r2
    5dde:	f042 0210 	orr.w	r2, r2, #16
    5de2:	b2d2      	uxtb	r2, r2
    5de4:	701a      	strb	r2, [r3, #0]
    5de6:	f000 bffe 	b.w	6de6 <ground_calibrate+0x12ae>
    5dea:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    5dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5df2:	781b      	ldrb	r3, [r3, #0]
    5df4:	3301      	adds	r3, #1
    5df6:	b2da      	uxtb	r2, r3
    5df8:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    5dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e00:	701a      	strb	r2, [r3, #0]
    5e02:	f000 bff0 	b.w	6de6 <ground_calibrate+0x12ae>
    }
}
else if (calib_status == WAITING_CALIB_CONTRAST)
    5e06:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
    5e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e0e:	781b      	ldrb	r3, [r3, #0]
    5e10:	2b01      	cmp	r3, #1
    5e12:	f040 87e8 	bne.w	6de6 <ground_calibrate+0x12ae>
{
    if (STICK_PUSHED(from_fbw.channels[RADIO_ROLL])) {
    5e16:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    5e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e1e:	885b      	ldrh	r3, [r3, #2]
    5e20:	b21b      	sxth	r3, r3
    5e22:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    5e26:	db09      	blt.n	5e3c <ground_calibrate+0x304>
    5e28:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    5e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e30:	885b      	ldrh	r3, [r3, #2]
    5e32:	b21b      	sxth	r3, r3
    5e34:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    5e38:	f340 87d5 	ble.w	6de6 <ground_calibrate+0x12ae>
      ir_gain_calib();
    5e3c:	f00b fcfc 	bl	11838 <ir_gain_calib>
      estimator_rad_of_ir = ir_rad_of_ir;
    5e40:	f240 238c 	movw	r3, #652	; 0x28c
    5e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e48:	681a      	ldr	r2, [r3, #0]
    5e4a:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
    5e4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e52:	601a      	str	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    5e54:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5e58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e5c:	781a      	ldrb	r2, [r3, #0]
    5e5e:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    5e62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e66:	781b      	ldrb	r3, [r3, #0]
    5e68:	b2db      	uxtb	r3, r3
    5e6a:	429a      	cmp	r2, r3
    5e6c:	d313      	bcc.n	5e96 <ground_calibrate+0x35e>
    5e6e:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    5e72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e76:	781b      	ldrb	r3, [r3, #0]
    5e78:	b2db      	uxtb	r3, r3
    5e7a:	461a      	mov	r2, r3
    5e7c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5e80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e84:	781b      	ldrb	r3, [r3, #0]
    5e86:	1ad3      	subs	r3, r2, r3
    5e88:	33ff      	adds	r3, #255	; 0xff
    5e8a:	2b14      	cmp	r3, #20
    5e8c:	bfd4      	ite	le
    5e8e:	2300      	movle	r3, #0
    5e90:	2301      	movgt	r3, #1
    5e92:	b2db      	uxtb	r3, r3
    5e94:	e011      	b.n	5eba <ground_calibrate+0x382>
    5e96:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    5e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e9e:	781b      	ldrb	r3, [r3, #0]
    5ea0:	b2db      	uxtb	r3, r3
    5ea2:	461a      	mov	r2, r3
    5ea4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5eac:	781b      	ldrb	r3, [r3, #0]
    5eae:	1ad3      	subs	r3, r2, r3
    5eb0:	2b14      	cmp	r3, #20
    5eb2:	bfd4      	ite	le
    5eb4:	2300      	movle	r3, #0
    5eb6:	2301      	movgt	r3, #1
    5eb8:	b2db      	uxtb	r3, r3
    5eba:	2b00      	cmp	r3, #0
    5ebc:	f000 85a6 	beq.w	6a0c <ground_calibrate+0xed4>
    5ec0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5ec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ec8:	781b      	ldrb	r3, [r3, #0]
    5eca:	461a      	mov	r2, r3
    5ecc:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    5ed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ed4:	2105      	movs	r1, #5
    5ed6:	5499      	strb	r1, [r3, r2]
    5ed8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5edc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ee0:	781b      	ldrb	r3, [r3, #0]
    5ee2:	3301      	adds	r3, #1
    5ee4:	b2da      	uxtb	r2, r3
    5ee6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5eea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5eee:	701a      	strb	r2, [r3, #0]
    5ef0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5ef4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ef8:	781b      	ldrb	r3, [r3, #0]
    5efa:	2bff      	cmp	r3, #255	; 0xff
    5efc:	d105      	bne.n	5f0a <ground_calibrate+0x3d2>
    5efe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5f02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f06:	2200      	movs	r2, #0
    5f08:	701a      	strb	r2, [r3, #0]
    5f0a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5f0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f12:	781b      	ldrb	r3, [r3, #0]
    5f14:	461a      	mov	r2, r3
    5f16:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    5f1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f1e:	2105      	movs	r1, #5
    5f20:	5499      	strb	r1, [r3, r2]
    5f22:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5f26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f2a:	781b      	ldrb	r3, [r3, #0]
    5f2c:	3301      	adds	r3, #1
    5f2e:	b2da      	uxtb	r2, r3
    5f30:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5f34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f38:	701a      	strb	r2, [r3, #0]
    5f3a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5f3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f42:	781b      	ldrb	r3, [r3, #0]
    5f44:	2bff      	cmp	r3, #255	; 0xff
    5f46:	d105      	bne.n	5f54 <ground_calibrate+0x41c>
    5f48:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5f4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f50:	2200      	movs	r2, #0
    5f52:	701a      	strb	r2, [r3, #0]
    5f54:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    5f58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f5c:	2205      	movs	r2, #5
    5f5e:	701a      	strb	r2, [r3, #0]
    5f60:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    5f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f68:	2205      	movs	r2, #5
    5f6a:	701a      	strb	r2, [r3, #0]
    5f6c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5f70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f74:	781b      	ldrb	r3, [r3, #0]
    5f76:	461a      	mov	r2, r3
    5f78:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    5f7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f80:	7819      	ldrb	r1, [r3, #0]
    5f82:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    5f86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f8a:	5499      	strb	r1, [r3, r2]
    5f8c:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    5f90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f94:	781a      	ldrb	r2, [r3, #0]
    5f96:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    5f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f9e:	781b      	ldrb	r3, [r3, #0]
    5fa0:	4413      	add	r3, r2
    5fa2:	b2da      	uxtb	r2, r3
    5fa4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    5fa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fac:	701a      	strb	r2, [r3, #0]
    5fae:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    5fb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fb6:	781a      	ldrb	r2, [r3, #0]
    5fb8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    5fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fc0:	781b      	ldrb	r3, [r3, #0]
    5fc2:	4413      	add	r3, r2
    5fc4:	b2da      	uxtb	r2, r3
    5fc6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    5fca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fce:	701a      	strb	r2, [r3, #0]
    5fd0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5fd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fd8:	781b      	ldrb	r3, [r3, #0]
    5fda:	3301      	adds	r3, #1
    5fdc:	b2da      	uxtb	r2, r3
    5fde:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fe6:	701a      	strb	r2, [r3, #0]
    5fe8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5fec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ff0:	781b      	ldrb	r3, [r3, #0]
    5ff2:	2bff      	cmp	r3, #255	; 0xff
    5ff4:	d105      	bne.n	6002 <ground_calibrate+0x4ca>
    5ff6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    5ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ffe:	2200      	movs	r2, #0
    6000:	701a      	strb	r2, [r3, #0]
    6002:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6006:	f2c2 0300 	movt	r3, #8192	; 0x2000
    600a:	781b      	ldrb	r3, [r3, #0]
    600c:	461a      	mov	r2, r3
    600e:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    6012:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6016:	7859      	ldrb	r1, [r3, #1]
    6018:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    601c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6020:	5499      	strb	r1, [r3, r2]
    6022:	4bd2      	ldr	r3, [pc, #840]	; (636c <ground_calibrate+0x834>)
    6024:	781a      	ldrb	r2, [r3, #0]
    6026:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    602a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    602e:	781b      	ldrb	r3, [r3, #0]
    6030:	4413      	add	r3, r2
    6032:	b2da      	uxtb	r2, r3
    6034:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6038:	f2c2 0300 	movt	r3, #8192	; 0x2000
    603c:	701a      	strb	r2, [r3, #0]
    603e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6042:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6046:	781a      	ldrb	r2, [r3, #0]
    6048:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    604c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6050:	781b      	ldrb	r3, [r3, #0]
    6052:	4413      	add	r3, r2
    6054:	b2da      	uxtb	r2, r3
    6056:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    605a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    605e:	701a      	strb	r2, [r3, #0]
    6060:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6064:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6068:	781b      	ldrb	r3, [r3, #0]
    606a:	3301      	adds	r3, #1
    606c:	b2da      	uxtb	r2, r3
    606e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6072:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6076:	701a      	strb	r2, [r3, #0]
    6078:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    607c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6080:	781b      	ldrb	r3, [r3, #0]
    6082:	2bff      	cmp	r3, #255	; 0xff
    6084:	d105      	bne.n	6092 <ground_calibrate+0x55a>
    6086:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    608a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    608e:	2200      	movs	r2, #0
    6090:	701a      	strb	r2, [r3, #0]
    6092:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6096:	f2c2 0300 	movt	r3, #8192	; 0x2000
    609a:	781b      	ldrb	r3, [r3, #0]
    609c:	461a      	mov	r2, r3
    609e:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    60a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60a6:	7899      	ldrb	r1, [r3, #2]
    60a8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    60ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60b0:	5499      	strb	r1, [r3, r2]
    60b2:	4baf      	ldr	r3, [pc, #700]	; (6370 <ground_calibrate+0x838>)
    60b4:	781a      	ldrb	r2, [r3, #0]
    60b6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    60ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60be:	781b      	ldrb	r3, [r3, #0]
    60c0:	4413      	add	r3, r2
    60c2:	b2da      	uxtb	r2, r3
    60c4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    60c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60cc:	701a      	strb	r2, [r3, #0]
    60ce:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    60d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60d6:	781a      	ldrb	r2, [r3, #0]
    60d8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    60dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60e0:	781b      	ldrb	r3, [r3, #0]
    60e2:	4413      	add	r3, r2
    60e4:	b2da      	uxtb	r2, r3
    60e6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    60ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60ee:	701a      	strb	r2, [r3, #0]
    60f0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    60f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60f8:	781b      	ldrb	r3, [r3, #0]
    60fa:	3301      	adds	r3, #1
    60fc:	b2da      	uxtb	r2, r3
    60fe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6102:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6106:	701a      	strb	r2, [r3, #0]
    6108:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    610c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6110:	781b      	ldrb	r3, [r3, #0]
    6112:	2bff      	cmp	r3, #255	; 0xff
    6114:	d105      	bne.n	6122 <ground_calibrate+0x5ea>
    6116:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    611a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    611e:	2200      	movs	r2, #0
    6120:	701a      	strb	r2, [r3, #0]
    6122:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6126:	f2c2 0300 	movt	r3, #8192	; 0x2000
    612a:	781b      	ldrb	r3, [r3, #0]
    612c:	461a      	mov	r2, r3
    612e:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    6132:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6136:	78d9      	ldrb	r1, [r3, #3]
    6138:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    613c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6140:	5499      	strb	r1, [r3, r2]
    6142:	4b8c      	ldr	r3, [pc, #560]	; (6374 <ground_calibrate+0x83c>)
    6144:	781a      	ldrb	r2, [r3, #0]
    6146:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    614a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    614e:	781b      	ldrb	r3, [r3, #0]
    6150:	4413      	add	r3, r2
    6152:	b2da      	uxtb	r2, r3
    6154:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6158:	f2c2 0300 	movt	r3, #8192	; 0x2000
    615c:	701a      	strb	r2, [r3, #0]
    615e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6162:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6166:	781a      	ldrb	r2, [r3, #0]
    6168:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    616c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6170:	781b      	ldrb	r3, [r3, #0]
    6172:	4413      	add	r3, r2
    6174:	b2da      	uxtb	r2, r3
    6176:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    617a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    617e:	701a      	strb	r2, [r3, #0]
    6180:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6184:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6188:	781b      	ldrb	r3, [r3, #0]
    618a:	3301      	adds	r3, #1
    618c:	b2da      	uxtb	r2, r3
    618e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6192:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6196:	701a      	strb	r2, [r3, #0]
    6198:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    619c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61a0:	781b      	ldrb	r3, [r3, #0]
    61a2:	2bff      	cmp	r3, #255	; 0xff
    61a4:	d105      	bne.n	61b2 <ground_calibrate+0x67a>
    61a6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    61aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61ae:	2200      	movs	r2, #0
    61b0:	701a      	strb	r2, [r3, #0]
    61b2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    61b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61ba:	781b      	ldrb	r3, [r3, #0]
    61bc:	461a      	mov	r2, r3
    61be:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    61c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61c6:	7819      	ldrb	r1, [r3, #0]
    61c8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    61cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61d0:	5499      	strb	r1, [r3, r2]
    61d2:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    61d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61da:	781a      	ldrb	r2, [r3, #0]
    61dc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    61e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61e4:	781b      	ldrb	r3, [r3, #0]
    61e6:	4413      	add	r3, r2
    61e8:	b2da      	uxtb	r2, r3
    61ea:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    61ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61f2:	701a      	strb	r2, [r3, #0]
    61f4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    61f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61fc:	781a      	ldrb	r2, [r3, #0]
    61fe:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6202:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6206:	781b      	ldrb	r3, [r3, #0]
    6208:	4413      	add	r3, r2
    620a:	b2da      	uxtb	r2, r3
    620c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6210:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6214:	701a      	strb	r2, [r3, #0]
    6216:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    621a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    621e:	781b      	ldrb	r3, [r3, #0]
    6220:	3301      	adds	r3, #1
    6222:	b2da      	uxtb	r2, r3
    6224:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6228:	f2c2 0300 	movt	r3, #8192	; 0x2000
    622c:	701a      	strb	r2, [r3, #0]
    622e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6232:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6236:	781b      	ldrb	r3, [r3, #0]
    6238:	2bff      	cmp	r3, #255	; 0xff
    623a:	d105      	bne.n	6248 <ground_calibrate+0x710>
    623c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6240:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6244:	2200      	movs	r2, #0
    6246:	701a      	strb	r2, [r3, #0]
    6248:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    624c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6250:	781b      	ldrb	r3, [r3, #0]
    6252:	461a      	mov	r2, r3
    6254:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    6258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    625c:	7859      	ldrb	r1, [r3, #1]
    625e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6262:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6266:	5499      	strb	r1, [r3, r2]
    6268:	4b43      	ldr	r3, [pc, #268]	; (6378 <ground_calibrate+0x840>)
    626a:	781a      	ldrb	r2, [r3, #0]
    626c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6270:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6274:	781b      	ldrb	r3, [r3, #0]
    6276:	4413      	add	r3, r2
    6278:	b2da      	uxtb	r2, r3
    627a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    627e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6282:	701a      	strb	r2, [r3, #0]
    6284:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6288:	f2c2 0300 	movt	r3, #8192	; 0x2000
    628c:	781a      	ldrb	r2, [r3, #0]
    628e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6292:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6296:	781b      	ldrb	r3, [r3, #0]
    6298:	4413      	add	r3, r2
    629a:	b2da      	uxtb	r2, r3
    629c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    62a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62a4:	701a      	strb	r2, [r3, #0]
    62a6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    62aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62ae:	781b      	ldrb	r3, [r3, #0]
    62b0:	3301      	adds	r3, #1
    62b2:	b2da      	uxtb	r2, r3
    62b4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    62b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62bc:	701a      	strb	r2, [r3, #0]
    62be:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    62c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62c6:	781b      	ldrb	r3, [r3, #0]
    62c8:	2bff      	cmp	r3, #255	; 0xff
    62ca:	d105      	bne.n	62d8 <ground_calibrate+0x7a0>
    62cc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    62d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62d4:	2200      	movs	r2, #0
    62d6:	701a      	strb	r2, [r3, #0]
    62d8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    62dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62e0:	781b      	ldrb	r3, [r3, #0]
    62e2:	461a      	mov	r2, r3
    62e4:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    62e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62ec:	7899      	ldrb	r1, [r3, #2]
    62ee:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    62f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62f6:	5499      	strb	r1, [r3, r2]
    62f8:	4b20      	ldr	r3, [pc, #128]	; (637c <ground_calibrate+0x844>)
    62fa:	781a      	ldrb	r2, [r3, #0]
    62fc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6300:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6304:	781b      	ldrb	r3, [r3, #0]
    6306:	4413      	add	r3, r2
    6308:	b2da      	uxtb	r2, r3
    630a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    630e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6312:	701a      	strb	r2, [r3, #0]
    6314:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6318:	f2c2 0300 	movt	r3, #8192	; 0x2000
    631c:	781a      	ldrb	r2, [r3, #0]
    631e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6322:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6326:	781b      	ldrb	r3, [r3, #0]
    6328:	4413      	add	r3, r2
    632a:	b2da      	uxtb	r2, r3
    632c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6330:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6334:	701a      	strb	r2, [r3, #0]
    6336:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    633a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    633e:	781b      	ldrb	r3, [r3, #0]
    6340:	3301      	adds	r3, #1
    6342:	b2da      	uxtb	r2, r3
    6344:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6348:	f2c2 0300 	movt	r3, #8192	; 0x2000
    634c:	701a      	strb	r2, [r3, #0]
    634e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6352:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6356:	781b      	ldrb	r3, [r3, #0]
    6358:	2bff      	cmp	r3, #255	; 0xff
    635a:	d111      	bne.n	6380 <ground_calibrate+0x848>
    635c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6360:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6364:	2200      	movs	r2, #0
    6366:	701a      	strb	r2, [r3, #0]
    6368:	e00a      	b.n	6380 <ground_calibrate+0x848>
    636a:	bf00      	nop
    636c:	2000b0a9 	.word	0x2000b0a9
    6370:	2000b0aa 	.word	0x2000b0aa
    6374:	2000b0ab 	.word	0x2000b0ab
    6378:	2000b0ad 	.word	0x2000b0ad
    637c:	2000b0ae 	.word	0x2000b0ae
    6380:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6384:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6388:	781b      	ldrb	r3, [r3, #0]
    638a:	461a      	mov	r2, r3
    638c:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    6390:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6394:	78d9      	ldrb	r1, [r3, #3]
    6396:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    639a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    639e:	5499      	strb	r1, [r3, r2]
    63a0:	4bd3      	ldr	r3, [pc, #844]	; (66f0 <ground_calibrate+0xbb8>)
    63a2:	781a      	ldrb	r2, [r3, #0]
    63a4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    63a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63ac:	781b      	ldrb	r3, [r3, #0]
    63ae:	4413      	add	r3, r2
    63b0:	b2da      	uxtb	r2, r3
    63b2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    63b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63ba:	701a      	strb	r2, [r3, #0]
    63bc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    63c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63c4:	781a      	ldrb	r2, [r3, #0]
    63c6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    63ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63ce:	781b      	ldrb	r3, [r3, #0]
    63d0:	4413      	add	r3, r2
    63d2:	b2da      	uxtb	r2, r3
    63d4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    63d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63dc:	701a      	strb	r2, [r3, #0]
    63de:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    63e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63e6:	781b      	ldrb	r3, [r3, #0]
    63e8:	3301      	adds	r3, #1
    63ea:	b2da      	uxtb	r2, r3
    63ec:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    63f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63f4:	701a      	strb	r2, [r3, #0]
    63f6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    63fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63fe:	781b      	ldrb	r3, [r3, #0]
    6400:	2bff      	cmp	r3, #255	; 0xff
    6402:	d105      	bne.n	6410 <ground_calibrate+0x8d8>
    6404:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6408:	f2c2 0300 	movt	r3, #8192	; 0x2000
    640c:	2200      	movs	r2, #0
    640e:	701a      	strb	r2, [r3, #0]
    6410:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6414:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6418:	781b      	ldrb	r3, [r3, #0]
    641a:	461a      	mov	r2, r3
    641c:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
    6420:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6424:	7819      	ldrb	r1, [r3, #0]
    6426:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    642a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    642e:	5499      	strb	r1, [r3, r2]
    6430:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
    6434:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6438:	781a      	ldrb	r2, [r3, #0]
    643a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    643e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6442:	781b      	ldrb	r3, [r3, #0]
    6444:	4413      	add	r3, r2
    6446:	b2da      	uxtb	r2, r3
    6448:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    644c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6450:	701a      	strb	r2, [r3, #0]
    6452:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6456:	f2c2 0300 	movt	r3, #8192	; 0x2000
    645a:	781a      	ldrb	r2, [r3, #0]
    645c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6460:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6464:	781b      	ldrb	r3, [r3, #0]
    6466:	4413      	add	r3, r2
    6468:	b2da      	uxtb	r2, r3
    646a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    646e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6472:	701a      	strb	r2, [r3, #0]
    6474:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    647c:	781b      	ldrb	r3, [r3, #0]
    647e:	3301      	adds	r3, #1
    6480:	b2da      	uxtb	r2, r3
    6482:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6486:	f2c2 0300 	movt	r3, #8192	; 0x2000
    648a:	701a      	strb	r2, [r3, #0]
    648c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6490:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6494:	781b      	ldrb	r3, [r3, #0]
    6496:	2bff      	cmp	r3, #255	; 0xff
    6498:	d105      	bne.n	64a6 <ground_calibrate+0x96e>
    649a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    649e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64a2:	2200      	movs	r2, #0
    64a4:	701a      	strb	r2, [r3, #0]
    64a6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    64aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64ae:	781b      	ldrb	r3, [r3, #0]
    64b0:	461a      	mov	r2, r3
    64b2:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
    64b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64ba:	7859      	ldrb	r1, [r3, #1]
    64bc:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    64c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64c4:	5499      	strb	r1, [r3, r2]
    64c6:	4b8b      	ldr	r3, [pc, #556]	; (66f4 <ground_calibrate+0xbbc>)
    64c8:	781a      	ldrb	r2, [r3, #0]
    64ca:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    64ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64d2:	781b      	ldrb	r3, [r3, #0]
    64d4:	4413      	add	r3, r2
    64d6:	b2da      	uxtb	r2, r3
    64d8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    64dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64e0:	701a      	strb	r2, [r3, #0]
    64e2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    64e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64ea:	781a      	ldrb	r2, [r3, #0]
    64ec:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    64f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64f4:	781b      	ldrb	r3, [r3, #0]
    64f6:	4413      	add	r3, r2
    64f8:	b2da      	uxtb	r2, r3
    64fa:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    64fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6502:	701a      	strb	r2, [r3, #0]
    6504:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6508:	f2c2 0300 	movt	r3, #8192	; 0x2000
    650c:	781b      	ldrb	r3, [r3, #0]
    650e:	3301      	adds	r3, #1
    6510:	b2da      	uxtb	r2, r3
    6512:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    651a:	701a      	strb	r2, [r3, #0]
    651c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6524:	781b      	ldrb	r3, [r3, #0]
    6526:	2bff      	cmp	r3, #255	; 0xff
    6528:	d105      	bne.n	6536 <ground_calibrate+0x9fe>
    652a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    652e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6532:	2200      	movs	r2, #0
    6534:	701a      	strb	r2, [r3, #0]
    6536:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    653a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    653e:	781b      	ldrb	r3, [r3, #0]
    6540:	461a      	mov	r2, r3
    6542:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
    6546:	f2c2 0300 	movt	r3, #8192	; 0x2000
    654a:	7899      	ldrb	r1, [r3, #2]
    654c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6550:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6554:	5499      	strb	r1, [r3, r2]
    6556:	4b68      	ldr	r3, [pc, #416]	; (66f8 <ground_calibrate+0xbc0>)
    6558:	781a      	ldrb	r2, [r3, #0]
    655a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    655e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6562:	781b      	ldrb	r3, [r3, #0]
    6564:	4413      	add	r3, r2
    6566:	b2da      	uxtb	r2, r3
    6568:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    656c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6570:	701a      	strb	r2, [r3, #0]
    6572:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6576:	f2c2 0300 	movt	r3, #8192	; 0x2000
    657a:	781a      	ldrb	r2, [r3, #0]
    657c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6580:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6584:	781b      	ldrb	r3, [r3, #0]
    6586:	4413      	add	r3, r2
    6588:	b2da      	uxtb	r2, r3
    658a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    658e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6592:	701a      	strb	r2, [r3, #0]
    6594:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6598:	f2c2 0300 	movt	r3, #8192	; 0x2000
    659c:	781b      	ldrb	r3, [r3, #0]
    659e:	3301      	adds	r3, #1
    65a0:	b2da      	uxtb	r2, r3
    65a2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    65a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65aa:	701a      	strb	r2, [r3, #0]
    65ac:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    65b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65b4:	781b      	ldrb	r3, [r3, #0]
    65b6:	2bff      	cmp	r3, #255	; 0xff
    65b8:	d105      	bne.n	65c6 <ground_calibrate+0xa8e>
    65ba:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    65be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65c2:	2200      	movs	r2, #0
    65c4:	701a      	strb	r2, [r3, #0]
    65c6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    65ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65ce:	781b      	ldrb	r3, [r3, #0]
    65d0:	461a      	mov	r2, r3
    65d2:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
    65d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65da:	78d9      	ldrb	r1, [r3, #3]
    65dc:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    65e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65e4:	5499      	strb	r1, [r3, r2]
    65e6:	4b45      	ldr	r3, [pc, #276]	; (66fc <ground_calibrate+0xbc4>)
    65e8:	781a      	ldrb	r2, [r3, #0]
    65ea:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    65ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65f2:	781b      	ldrb	r3, [r3, #0]
    65f4:	4413      	add	r3, r2
    65f6:	b2da      	uxtb	r2, r3
    65f8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    65fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6600:	701a      	strb	r2, [r3, #0]
    6602:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6606:	f2c2 0300 	movt	r3, #8192	; 0x2000
    660a:	781a      	ldrb	r2, [r3, #0]
    660c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6614:	781b      	ldrb	r3, [r3, #0]
    6616:	4413      	add	r3, r2
    6618:	b2da      	uxtb	r2, r3
    661a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    661e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6622:	701a      	strb	r2, [r3, #0]
    6624:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    662c:	781b      	ldrb	r3, [r3, #0]
    662e:	3301      	adds	r3, #1
    6630:	b2da      	uxtb	r2, r3
    6632:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6636:	f2c2 0300 	movt	r3, #8192	; 0x2000
    663a:	701a      	strb	r2, [r3, #0]
    663c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6640:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6644:	781b      	ldrb	r3, [r3, #0]
    6646:	2bff      	cmp	r3, #255	; 0xff
    6648:	d105      	bne.n	6656 <ground_calibrate+0xb1e>
    664a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    664e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6652:	2200      	movs	r2, #0
    6654:	701a      	strb	r2, [r3, #0]
    6656:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    665a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    665e:	781b      	ldrb	r3, [r3, #0]
    6660:	461a      	mov	r2, r3
    6662:	f240 2386 	movw	r3, #646	; 0x286
    6666:	f2c2 0300 	movt	r3, #8192	; 0x2000
    666a:	7819      	ldrb	r1, [r3, #0]
    666c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6670:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6674:	5499      	strb	r1, [r3, r2]
    6676:	f240 2386 	movw	r3, #646	; 0x286
    667a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    667e:	781a      	ldrb	r2, [r3, #0]
    6680:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6684:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6688:	781b      	ldrb	r3, [r3, #0]
    668a:	4413      	add	r3, r2
    668c:	b2da      	uxtb	r2, r3
    668e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6696:	701a      	strb	r2, [r3, #0]
    6698:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    669c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66a0:	781a      	ldrb	r2, [r3, #0]
    66a2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    66a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66aa:	781b      	ldrb	r3, [r3, #0]
    66ac:	4413      	add	r3, r2
    66ae:	b2da      	uxtb	r2, r3
    66b0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    66b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66b8:	701a      	strb	r2, [r3, #0]
    66ba:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    66be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66c2:	781b      	ldrb	r3, [r3, #0]
    66c4:	3301      	adds	r3, #1
    66c6:	b2da      	uxtb	r2, r3
    66c8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    66cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66d0:	701a      	strb	r2, [r3, #0]
    66d2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    66d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66da:	781b      	ldrb	r3, [r3, #0]
    66dc:	2bff      	cmp	r3, #255	; 0xff
    66de:	d10f      	bne.n	6700 <ground_calibrate+0xbc8>
    66e0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    66e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66e8:	2200      	movs	r2, #0
    66ea:	701a      	strb	r2, [r3, #0]
    66ec:	e008      	b.n	6700 <ground_calibrate+0xbc8>
    66ee:	bf00      	nop
    66f0:	2000b0af 	.word	0x2000b0af
    66f4:	2000b0a5 	.word	0x2000b0a5
    66f8:	2000b0a6 	.word	0x2000b0a6
    66fc:	2000b0a7 	.word	0x2000b0a7
    6700:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6704:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6708:	781b      	ldrb	r3, [r3, #0]
    670a:	461a      	mov	r2, r3
    670c:	f240 2386 	movw	r3, #646	; 0x286
    6710:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6714:	7859      	ldrb	r1, [r3, #1]
    6716:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    671a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    671e:	5499      	strb	r1, [r3, r2]
    6720:	4bd4      	ldr	r3, [pc, #848]	; (6a74 <ground_calibrate+0xf3c>)
    6722:	781a      	ldrb	r2, [r3, #0]
    6724:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6728:	f2c2 0300 	movt	r3, #8192	; 0x2000
    672c:	781b      	ldrb	r3, [r3, #0]
    672e:	4413      	add	r3, r2
    6730:	b2da      	uxtb	r2, r3
    6732:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6736:	f2c2 0300 	movt	r3, #8192	; 0x2000
    673a:	701a      	strb	r2, [r3, #0]
    673c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6740:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6744:	781a      	ldrb	r2, [r3, #0]
    6746:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    674a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    674e:	781b      	ldrb	r3, [r3, #0]
    6750:	4413      	add	r3, r2
    6752:	b2da      	uxtb	r2, r3
    6754:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6758:	f2c2 0300 	movt	r3, #8192	; 0x2000
    675c:	701a      	strb	r2, [r3, #0]
    675e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6762:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6766:	781b      	ldrb	r3, [r3, #0]
    6768:	3301      	adds	r3, #1
    676a:	b2da      	uxtb	r2, r3
    676c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6774:	701a      	strb	r2, [r3, #0]
    6776:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    677a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    677e:	781b      	ldrb	r3, [r3, #0]
    6780:	2bff      	cmp	r3, #255	; 0xff
    6782:	d105      	bne.n	6790 <ground_calibrate+0xc58>
    6784:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6788:	f2c2 0300 	movt	r3, #8192	; 0x2000
    678c:	2200      	movs	r2, #0
    678e:	701a      	strb	r2, [r3, #0]
    6790:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6794:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6798:	781b      	ldrb	r3, [r3, #0]
    679a:	461a      	mov	r2, r3
    679c:	f240 2388 	movw	r3, #648	; 0x288
    67a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67a4:	7819      	ldrb	r1, [r3, #0]
    67a6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    67aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67ae:	5499      	strb	r1, [r3, r2]
    67b0:	f240 2388 	movw	r3, #648	; 0x288
    67b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67b8:	781a      	ldrb	r2, [r3, #0]
    67ba:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    67be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67c2:	781b      	ldrb	r3, [r3, #0]
    67c4:	4413      	add	r3, r2
    67c6:	b2da      	uxtb	r2, r3
    67c8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    67cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67d0:	701a      	strb	r2, [r3, #0]
    67d2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    67d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67da:	781a      	ldrb	r2, [r3, #0]
    67dc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    67e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67e4:	781b      	ldrb	r3, [r3, #0]
    67e6:	4413      	add	r3, r2
    67e8:	b2da      	uxtb	r2, r3
    67ea:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    67ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67f2:	701a      	strb	r2, [r3, #0]
    67f4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    67f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67fc:	781b      	ldrb	r3, [r3, #0]
    67fe:	3301      	adds	r3, #1
    6800:	b2da      	uxtb	r2, r3
    6802:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    680a:	701a      	strb	r2, [r3, #0]
    680c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6810:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6814:	781b      	ldrb	r3, [r3, #0]
    6816:	2bff      	cmp	r3, #255	; 0xff
    6818:	d105      	bne.n	6826 <ground_calibrate+0xcee>
    681a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    681e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6822:	2200      	movs	r2, #0
    6824:	701a      	strb	r2, [r3, #0]
    6826:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    682a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    682e:	781b      	ldrb	r3, [r3, #0]
    6830:	461a      	mov	r2, r3
    6832:	f240 2388 	movw	r3, #648	; 0x288
    6836:	f2c2 0300 	movt	r3, #8192	; 0x2000
    683a:	7859      	ldrb	r1, [r3, #1]
    683c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6840:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6844:	5499      	strb	r1, [r3, r2]
    6846:	4b8c      	ldr	r3, [pc, #560]	; (6a78 <ground_calibrate+0xf40>)
    6848:	781a      	ldrb	r2, [r3, #0]
    684a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    684e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6852:	781b      	ldrb	r3, [r3, #0]
    6854:	4413      	add	r3, r2
    6856:	b2da      	uxtb	r2, r3
    6858:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    685c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6860:	701a      	strb	r2, [r3, #0]
    6862:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6866:	f2c2 0300 	movt	r3, #8192	; 0x2000
    686a:	781a      	ldrb	r2, [r3, #0]
    686c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6870:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6874:	781b      	ldrb	r3, [r3, #0]
    6876:	4413      	add	r3, r2
    6878:	b2da      	uxtb	r2, r3
    687a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    687e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6882:	701a      	strb	r2, [r3, #0]
    6884:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6888:	f2c2 0300 	movt	r3, #8192	; 0x2000
    688c:	781b      	ldrb	r3, [r3, #0]
    688e:	3301      	adds	r3, #1
    6890:	b2da      	uxtb	r2, r3
    6892:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6896:	f2c2 0300 	movt	r3, #8192	; 0x2000
    689a:	701a      	strb	r2, [r3, #0]
    689c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    68a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68a4:	781b      	ldrb	r3, [r3, #0]
    68a6:	2bff      	cmp	r3, #255	; 0xff
    68a8:	d105      	bne.n	68b6 <ground_calibrate+0xd7e>
    68aa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    68ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68b2:	2200      	movs	r2, #0
    68b4:	701a      	strb	r2, [r3, #0]
    68b6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    68ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68be:	781b      	ldrb	r3, [r3, #0]
    68c0:	461a      	mov	r2, r3
    68c2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    68c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68ca:	7819      	ldrb	r1, [r3, #0]
    68cc:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    68d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68d4:	5499      	strb	r1, [r3, r2]
    68d6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    68da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68de:	781b      	ldrb	r3, [r3, #0]
    68e0:	3301      	adds	r3, #1
    68e2:	b2da      	uxtb	r2, r3
    68e4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    68e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68ec:	701a      	strb	r2, [r3, #0]
    68ee:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    68f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68f6:	781b      	ldrb	r3, [r3, #0]
    68f8:	2bff      	cmp	r3, #255	; 0xff
    68fa:	d105      	bne.n	6908 <ground_calibrate+0xdd0>
    68fc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6900:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6904:	2200      	movs	r2, #0
    6906:	701a      	strb	r2, [r3, #0]
    6908:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    690c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6910:	781b      	ldrb	r3, [r3, #0]
    6912:	461a      	mov	r2, r3
    6914:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6918:	f2c2 0300 	movt	r3, #8192	; 0x2000
    691c:	7819      	ldrb	r1, [r3, #0]
    691e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6922:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6926:	5499      	strb	r1, [r3, r2]
    6928:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    692c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6930:	781b      	ldrb	r3, [r3, #0]
    6932:	3301      	adds	r3, #1
    6934:	b2da      	uxtb	r2, r3
    6936:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    693a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    693e:	701a      	strb	r2, [r3, #0]
    6940:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6944:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6948:	781b      	ldrb	r3, [r3, #0]
    694a:	2bff      	cmp	r3, #255	; 0xff
    694c:	d105      	bne.n	695a <ground_calibrate+0xe22>
    694e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6952:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6956:	2200      	movs	r2, #0
    6958:	701a      	strb	r2, [r3, #0]
    695a:	f242 0339 	movw	r3, #8249	; 0x2039
    695e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6962:	781b      	ldrb	r3, [r3, #0]
    6964:	b2db      	uxtb	r3, r3
    6966:	f003 0310 	and.w	r3, r3, #16
    696a:	2b00      	cmp	r3, #0
    696c:	d15a      	bne.n	6a24 <ground_calibrate+0xeec>
    696e:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    6972:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6976:	781b      	ldrb	r3, [r3, #0]
    6978:	b2db      	uxtb	r3, r3
    697a:	461a      	mov	r2, r3
    697c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6980:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6984:	5c9a      	ldrb	r2, [r3, r2]
    6986:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    698a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    698e:	701a      	strb	r2, [r3, #0]
    6990:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    6994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6998:	2200      	movs	r2, #0
    699a:	701a      	strb	r2, [r3, #0]
    699c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    69a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69a4:	781b      	ldrb	r3, [r3, #0]
    69a6:	b2db      	uxtb	r3, r3
    69a8:	3301      	adds	r3, #1
    69aa:	b2da      	uxtb	r2, r3
    69ac:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    69b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69b4:	701a      	strb	r2, [r3, #0]
    69b6:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    69ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69be:	781b      	ldrb	r3, [r3, #0]
    69c0:	b2db      	uxtb	r3, r3
    69c2:	2bff      	cmp	r3, #255	; 0xff
    69c4:	d105      	bne.n	69d2 <ground_calibrate+0xe9a>
    69c6:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    69ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69ce:	2200      	movs	r2, #0
    69d0:	701a      	strb	r2, [r3, #0]
    69d2:	f242 0338 	movw	r3, #8248	; 0x2038
    69d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69da:	f242 0238 	movw	r2, #8248	; 0x2038
    69de:	f2c2 0200 	movt	r2, #8192	; 0x2000
    69e2:	7812      	ldrb	r2, [r2, #0]
    69e4:	b2d2      	uxtb	r2, r2
    69e6:	f042 0201 	orr.w	r2, r2, #1
    69ea:	b2d2      	uxtb	r2, r2
    69ec:	701a      	strb	r2, [r3, #0]
    69ee:	f242 0339 	movw	r3, #8249	; 0x2039
    69f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69f6:	f242 0239 	movw	r2, #8249	; 0x2039
    69fa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    69fe:	7812      	ldrb	r2, [r2, #0]
    6a00:	b2d2      	uxtb	r2, r2
    6a02:	f042 0210 	orr.w	r2, r2, #16
    6a06:	b2d2      	uxtb	r2, r2
    6a08:	701a      	strb	r2, [r3, #0]
    6a0a:	e00b      	b.n	6a24 <ground_calibrate+0xeec>
    6a0c:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    6a10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a14:	781b      	ldrb	r3, [r3, #0]
    6a16:	3301      	adds	r3, #1
    6a18:	b2da      	uxtb	r2, r3
    6a1a:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    6a1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a22:	701a      	strb	r2, [r3, #0]
      calib_status = CALIB_DONE;
    6a24:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
    6a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a2c:	2202      	movs	r2, #2
    6a2e:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_CONTRAST(&ir_contrast);
    6a30:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6a34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a38:	781a      	ldrb	r2, [r3, #0]
    6a3a:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    6a3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a42:	781b      	ldrb	r3, [r3, #0]
    6a44:	b2db      	uxtb	r3, r3
    6a46:	429a      	cmp	r2, r3
    6a48:	d318      	bcc.n	6a7c <ground_calibrate+0xf44>
    6a4a:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    6a4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a52:	781b      	ldrb	r3, [r3, #0]
    6a54:	b2db      	uxtb	r3, r3
    6a56:	461a      	mov	r2, r3
    6a58:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6a5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a60:	781b      	ldrb	r3, [r3, #0]
    6a62:	1ad3      	subs	r3, r2, r3
    6a64:	33ff      	adds	r3, #255	; 0xff
    6a66:	2b06      	cmp	r3, #6
    6a68:	bfd4      	ite	le
    6a6a:	2300      	movle	r3, #0
    6a6c:	2301      	movgt	r3, #1
    6a6e:	b2db      	uxtb	r3, r3
    6a70:	e016      	b.n	6aa0 <ground_calibrate+0xf68>
    6a72:	bf00      	nop
    6a74:	20000287 	.word	0x20000287
    6a78:	20000289 	.word	0x20000289
    6a7c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    6a80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a84:	781b      	ldrb	r3, [r3, #0]
    6a86:	b2db      	uxtb	r3, r3
    6a88:	461a      	mov	r2, r3
    6a8a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6a8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a92:	781b      	ldrb	r3, [r3, #0]
    6a94:	1ad3      	subs	r3, r2, r3
    6a96:	2b06      	cmp	r3, #6
    6a98:	bfd4      	ite	le
    6a9a:	2300      	movle	r3, #0
    6a9c:	2301      	movgt	r3, #1
    6a9e:	b2db      	uxtb	r3, r3
    6aa0:	2b00      	cmp	r3, #0
    6aa2:	f000 8194 	beq.w	6dce <ground_calibrate+0x1296>
    6aa6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6aaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6aae:	781b      	ldrb	r3, [r3, #0]
    6ab0:	461a      	mov	r2, r3
    6ab2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6ab6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6aba:	2105      	movs	r1, #5
    6abc:	5499      	strb	r1, [r3, r2]
    6abe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6ac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ac6:	781b      	ldrb	r3, [r3, #0]
    6ac8:	3301      	adds	r3, #1
    6aca:	b2da      	uxtb	r2, r3
    6acc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6ad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ad4:	701a      	strb	r2, [r3, #0]
    6ad6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6ada:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ade:	781b      	ldrb	r3, [r3, #0]
    6ae0:	2bff      	cmp	r3, #255	; 0xff
    6ae2:	d105      	bne.n	6af0 <ground_calibrate+0xfb8>
    6ae4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6ae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6aec:	2200      	movs	r2, #0
    6aee:	701a      	strb	r2, [r3, #0]
    6af0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6af4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6af8:	781b      	ldrb	r3, [r3, #0]
    6afa:	461a      	mov	r2, r3
    6afc:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6b00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b04:	2103      	movs	r1, #3
    6b06:	5499      	strb	r1, [r3, r2]
    6b08:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6b0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b10:	781b      	ldrb	r3, [r3, #0]
    6b12:	3301      	adds	r3, #1
    6b14:	b2da      	uxtb	r2, r3
    6b16:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6b1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b1e:	701a      	strb	r2, [r3, #0]
    6b20:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6b24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b28:	781b      	ldrb	r3, [r3, #0]
    6b2a:	2bff      	cmp	r3, #255	; 0xff
    6b2c:	d105      	bne.n	6b3a <ground_calibrate+0x1002>
    6b2e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6b32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b36:	2200      	movs	r2, #0
    6b38:	701a      	strb	r2, [r3, #0]
    6b3a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6b3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b42:	2203      	movs	r2, #3
    6b44:	701a      	strb	r2, [r3, #0]
    6b46:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6b4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b4e:	2203      	movs	r2, #3
    6b50:	701a      	strb	r2, [r3, #0]
    6b52:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6b56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b5a:	781b      	ldrb	r3, [r3, #0]
    6b5c:	461a      	mov	r2, r3
    6b5e:	f240 2384 	movw	r3, #644	; 0x284
    6b62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b66:	7819      	ldrb	r1, [r3, #0]
    6b68:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6b6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b70:	5499      	strb	r1, [r3, r2]
    6b72:	f240 2384 	movw	r3, #644	; 0x284
    6b76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b7a:	781a      	ldrb	r2, [r3, #0]
    6b7c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6b80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b84:	781b      	ldrb	r3, [r3, #0]
    6b86:	4413      	add	r3, r2
    6b88:	b2da      	uxtb	r2, r3
    6b8a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b92:	701a      	strb	r2, [r3, #0]
    6b94:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b9c:	781a      	ldrb	r2, [r3, #0]
    6b9e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6ba2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ba6:	781b      	ldrb	r3, [r3, #0]
    6ba8:	4413      	add	r3, r2
    6baa:	b2da      	uxtb	r2, r3
    6bac:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6bb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bb4:	701a      	strb	r2, [r3, #0]
    6bb6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6bba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bbe:	781b      	ldrb	r3, [r3, #0]
    6bc0:	3301      	adds	r3, #1
    6bc2:	b2da      	uxtb	r2, r3
    6bc4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6bc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bcc:	701a      	strb	r2, [r3, #0]
    6bce:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bd6:	781b      	ldrb	r3, [r3, #0]
    6bd8:	2bff      	cmp	r3, #255	; 0xff
    6bda:	d105      	bne.n	6be8 <ground_calibrate+0x10b0>
    6bdc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6be4:	2200      	movs	r2, #0
    6be6:	701a      	strb	r2, [r3, #0]
    6be8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6bec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bf0:	781b      	ldrb	r3, [r3, #0]
    6bf2:	461a      	mov	r2, r3
    6bf4:	f240 2384 	movw	r3, #644	; 0x284
    6bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bfc:	7859      	ldrb	r1, [r3, #1]
    6bfe:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6c02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c06:	5499      	strb	r1, [r3, r2]
    6c08:	4b77      	ldr	r3, [pc, #476]	; (6de8 <ground_calibrate+0x12b0>)
    6c0a:	781a      	ldrb	r2, [r3, #0]
    6c0c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6c10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c14:	781b      	ldrb	r3, [r3, #0]
    6c16:	4413      	add	r3, r2
    6c18:	b2da      	uxtb	r2, r3
    6c1a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6c1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c22:	701a      	strb	r2, [r3, #0]
    6c24:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6c28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c2c:	781a      	ldrb	r2, [r3, #0]
    6c2e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6c32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c36:	781b      	ldrb	r3, [r3, #0]
    6c38:	4413      	add	r3, r2
    6c3a:	b2da      	uxtb	r2, r3
    6c3c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c44:	701a      	strb	r2, [r3, #0]
    6c46:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c4e:	781b      	ldrb	r3, [r3, #0]
    6c50:	3301      	adds	r3, #1
    6c52:	b2da      	uxtb	r2, r3
    6c54:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6c58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c5c:	701a      	strb	r2, [r3, #0]
    6c5e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6c62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c66:	781b      	ldrb	r3, [r3, #0]
    6c68:	2bff      	cmp	r3, #255	; 0xff
    6c6a:	d105      	bne.n	6c78 <ground_calibrate+0x1140>
    6c6c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6c70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c74:	2200      	movs	r2, #0
    6c76:	701a      	strb	r2, [r3, #0]
    6c78:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c80:	781b      	ldrb	r3, [r3, #0]
    6c82:	461a      	mov	r2, r3
    6c84:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    6c88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c8c:	7819      	ldrb	r1, [r3, #0]
    6c8e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6c92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c96:	5499      	strb	r1, [r3, r2]
    6c98:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ca0:	781b      	ldrb	r3, [r3, #0]
    6ca2:	3301      	adds	r3, #1
    6ca4:	b2da      	uxtb	r2, r3
    6ca6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6caa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cae:	701a      	strb	r2, [r3, #0]
    6cb0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6cb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cb8:	781b      	ldrb	r3, [r3, #0]
    6cba:	2bff      	cmp	r3, #255	; 0xff
    6cbc:	d105      	bne.n	6cca <ground_calibrate+0x1192>
    6cbe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6cc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cc6:	2200      	movs	r2, #0
    6cc8:	701a      	strb	r2, [r3, #0]
    6cca:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6cce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cd2:	781b      	ldrb	r3, [r3, #0]
    6cd4:	461a      	mov	r2, r3
    6cd6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    6cda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cde:	7819      	ldrb	r1, [r3, #0]
    6ce0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ce8:	5499      	strb	r1, [r3, r2]
    6cea:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6cee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cf2:	781b      	ldrb	r3, [r3, #0]
    6cf4:	3301      	adds	r3, #1
    6cf6:	b2da      	uxtb	r2, r3
    6cf8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d00:	701a      	strb	r2, [r3, #0]
    6d02:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6d06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d0a:	781b      	ldrb	r3, [r3, #0]
    6d0c:	2bff      	cmp	r3, #255	; 0xff
    6d0e:	d105      	bne.n	6d1c <ground_calibrate+0x11e4>
    6d10:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    6d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d18:	2200      	movs	r2, #0
    6d1a:	701a      	strb	r2, [r3, #0]
    6d1c:	f242 0339 	movw	r3, #8249	; 0x2039
    6d20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d24:	781b      	ldrb	r3, [r3, #0]
    6d26:	b2db      	uxtb	r3, r3
    6d28:	f003 0310 	and.w	r3, r3, #16
    6d2c:	2b00      	cmp	r3, #0
    6d2e:	d15a      	bne.n	6de6 <ground_calibrate+0x12ae>
    6d30:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    6d34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d38:	781b      	ldrb	r3, [r3, #0]
    6d3a:	b2db      	uxtb	r3, r3
    6d3c:	461a      	mov	r2, r3
    6d3e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    6d42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d46:	5c9a      	ldrb	r2, [r3, r2]
    6d48:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    6d4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d50:	701a      	strb	r2, [r3, #0]
    6d52:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    6d56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d5a:	2200      	movs	r2, #0
    6d5c:	701a      	strb	r2, [r3, #0]
    6d5e:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    6d62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d66:	781b      	ldrb	r3, [r3, #0]
    6d68:	b2db      	uxtb	r3, r3
    6d6a:	3301      	adds	r3, #1
    6d6c:	b2da      	uxtb	r2, r3
    6d6e:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    6d72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d76:	701a      	strb	r2, [r3, #0]
    6d78:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    6d7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d80:	781b      	ldrb	r3, [r3, #0]
    6d82:	b2db      	uxtb	r3, r3
    6d84:	2bff      	cmp	r3, #255	; 0xff
    6d86:	d105      	bne.n	6d94 <ground_calibrate+0x125c>
    6d88:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    6d8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d90:	2200      	movs	r2, #0
    6d92:	701a      	strb	r2, [r3, #0]
    6d94:	f242 0338 	movw	r3, #8248	; 0x2038
    6d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d9c:	f242 0238 	movw	r2, #8248	; 0x2038
    6da0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6da4:	7812      	ldrb	r2, [r2, #0]
    6da6:	b2d2      	uxtb	r2, r2
    6da8:	f042 0201 	orr.w	r2, r2, #1
    6dac:	b2d2      	uxtb	r2, r2
    6dae:	701a      	strb	r2, [r3, #0]
    6db0:	f242 0339 	movw	r3, #8249	; 0x2039
    6db4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6db8:	f242 0239 	movw	r2, #8249	; 0x2039
    6dbc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6dc0:	7812      	ldrb	r2, [r2, #0]
    6dc2:	b2d2      	uxtb	r2, r2
    6dc4:	f042 0210 	orr.w	r2, r2, #16
    6dc8:	b2d2      	uxtb	r2, r2
    6dca:	701a      	strb	r2, [r3, #0]
    6dcc:	e00b      	b.n	6de6 <ground_calibrate+0x12ae>
    6dce:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    6dd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dd6:	781b      	ldrb	r3, [r3, #0]
    6dd8:	3301      	adds	r3, #1
    6dda:	b2da      	uxtb	r2, r3
    6ddc:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    6de0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6de4:	701a      	strb	r2, [r3, #0]
    }
}
else {}

//#endif
}
    6de6:	bd80      	pop	{r7, pc}
    6de8:	20000285 	.word	0x20000285

00006dec <pprz_mode_update>:

/** \fn inline uint8_t pprz_mode_update( void )
 *  \brief Update paparazzi mode
 */
inline uint8_t pprz_mode_update( void ) {
    6dec:	b480      	push	{r7}
    6dee:	b083      	sub	sp, #12
    6df0:	af00      	add	r7, sp, #0
  /** We remain in home mode until explicit reset from the RC */
  if (pprz_mode != PPRZ_MODE_HOME || CheckEvent(rc_event_1)) {
    6df2:	f64a 2394 	movw	r3, #43668	; 0xaa94
    6df6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dfa:	781b      	ldrb	r3, [r3, #0]
    6dfc:	2b03      	cmp	r3, #3
    6dfe:	d10c      	bne.n	6e1a <pprz_mode_update+0x2e>
    6e00:	f64a 2398 	movw	r3, #43672	; 0xaa98
    6e04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e08:	781b      	ldrb	r3, [r3, #0]
    6e0a:	2b00      	cmp	r3, #0
    6e0c:	d032      	beq.n	6e74 <pprz_mode_update+0x88>
    6e0e:	f64a 2398 	movw	r3, #43672	; 0xaa98
    6e12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e16:	2200      	movs	r2, #0
    6e18:	701a      	strb	r2, [r3, #0]
    ModeUpdate(pprz_mode, PPRZ_MODE_OF_PULSE(from_fbw.channels[RADIO_MODE], from_fbw.status));
    6e1a:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    6e1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e22:	891b      	ldrh	r3, [r3, #8]
    6e24:	b21b      	sxth	r3, r3
    6e26:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    6e2a:	dc0f      	bgt.n	6e4c <pprz_mode_update+0x60>
    6e2c:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    6e30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e34:	891b      	ldrh	r3, [r3, #8]
    6e36:	b21a      	sxth	r2, r3
    6e38:	f64e 5341 	movw	r3, #60737	; 0xed41
    6e3c:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    6e40:	429a      	cmp	r2, r3
    6e42:	bfb4      	ite	lt
    6e44:	2300      	movlt	r3, #0
    6e46:	2301      	movge	r3, #1
    6e48:	b2db      	uxtb	r3, r3
    6e4a:	e000      	b.n	6e4e <pprz_mode_update+0x62>
    6e4c:	2302      	movs	r3, #2
    6e4e:	71fb      	strb	r3, [r7, #7]
    6e50:	f64a 2394 	movw	r3, #43668	; 0xaa94
    6e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e58:	781b      	ldrb	r3, [r3, #0]
    6e5a:	79fa      	ldrb	r2, [r7, #7]
    6e5c:	429a      	cmp	r2, r3
    6e5e:	d007      	beq.n	6e70 <pprz_mode_update+0x84>
    6e60:	f64a 2394 	movw	r3, #43668	; 0xaa94
    6e64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e68:	79fa      	ldrb	r2, [r7, #7]
    6e6a:	701a      	strb	r2, [r3, #0]
    6e6c:	2301      	movs	r3, #1
    6e6e:	e002      	b.n	6e76 <pprz_mode_update+0x8a>
    6e70:	2300      	movs	r3, #0
    6e72:	e000      	b.n	6e76 <pprz_mode_update+0x8a>
  } else
    return FALSE;
    6e74:	2300      	movs	r3, #0
}
    6e76:	4618      	mov	r0, r3
    6e78:	370c      	adds	r7, #12
    6e7a:	46bd      	mov	sp, r7
    6e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e80:	4770      	bx	lr
    6e82:	bf00      	nop

00006e84 <ir_estim_mode_update>:

#ifdef RADIO_LLS
/** \fn inline uint8_t ir_estim_mode_update( void )
 *  \brief update ir estimation if RADIO_LLS is true \n
 */
inline uint8_t ir_estim_mode_update( void ) {
    6e84:	b480      	push	{r7}
    6e86:	b083      	sub	sp, #12
    6e88:	af00      	add	r7, sp, #0
  ModeUpdate(ir_estim_mode, IR_ESTIM_MODE_OF_PULSE(from_fbw.channels[RADIO_LLS]));
    6e8a:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    6e8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e92:	89db      	ldrh	r3, [r3, #14]
    6e94:	b21a      	sxth	r2, r3
    6e96:	f640 437f 	movw	r3, #3199	; 0xc7f
    6e9a:	429a      	cmp	r2, r3
    6e9c:	bfd4      	ite	le
    6e9e:	2300      	movle	r3, #0
    6ea0:	2301      	movgt	r3, #1
    6ea2:	b2db      	uxtb	r3, r3
    6ea4:	71fb      	strb	r3, [r7, #7]
    6ea6:	f240 2380 	movw	r3, #640	; 0x280
    6eaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6eae:	781b      	ldrb	r3, [r3, #0]
    6eb0:	79fa      	ldrb	r2, [r7, #7]
    6eb2:	429a      	cmp	r2, r3
    6eb4:	d007      	beq.n	6ec6 <ir_estim_mode_update+0x42>
    6eb6:	f240 2380 	movw	r3, #640	; 0x280
    6eba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ebe:	79fa      	ldrb	r2, [r7, #7]
    6ec0:	701a      	strb	r2, [r3, #0]
    6ec2:	2301      	movs	r3, #1
    6ec4:	e000      	b.n	6ec8 <ir_estim_mode_update+0x44>
    6ec6:	2300      	movs	r3, #0
}
    6ec8:	4618      	mov	r0, r3
    6eca:	370c      	adds	r7, #12
    6ecc:	46bd      	mov	sp, r7
    6ece:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ed2:	4770      	bx	lr

00006ed4 <mcu1_status_update>:


/** \fn inline uint8_t mcu1_status_update( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t mcu1_status_update( void ) {
    6ed4:	b480      	push	{r7}
    6ed6:	b083      	sub	sp, #12
    6ed8:	af00      	add	r7, sp, #0
  uint8_t new_mode = from_fbw.status;
    6eda:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    6ede:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ee2:	7cdb      	ldrb	r3, [r3, #19]
    6ee4:	71fb      	strb	r3, [r7, #7]
  if (mcu1_status != new_mode) {
    6ee6:	f64a 239b 	movw	r3, #43675	; 0xaa9b
    6eea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6eee:	781b      	ldrb	r3, [r3, #0]
    6ef0:	79fa      	ldrb	r2, [r7, #7]
    6ef2:	429a      	cmp	r2, r3
    6ef4:	d017      	beq.n	6f26 <mcu1_status_update+0x52>
    bool_t changed = ((mcu1_status&MASK_FBW_CHANGED) != (new_mode&MASK_FBW_CHANGED));
    6ef6:	f64a 239b 	movw	r3, #43675	; 0xaa9b
    6efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6efe:	781b      	ldrb	r3, [r3, #0]
    6f00:	461a      	mov	r2, r3
    6f02:	79fb      	ldrb	r3, [r7, #7]
    6f04:	4053      	eors	r3, r2
    6f06:	f003 0303 	and.w	r3, r3, #3
    6f0a:	2b00      	cmp	r3, #0
    6f0c:	bf0c      	ite	eq
    6f0e:	2300      	moveq	r3, #0
    6f10:	2301      	movne	r3, #1
    6f12:	b2db      	uxtb	r3, r3
    6f14:	71bb      	strb	r3, [r7, #6]
    mcu1_status = new_mode;
    6f16:	f64a 239b 	movw	r3, #43675	; 0xaa9b
    6f1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f1e:	79fa      	ldrb	r2, [r7, #7]
    6f20:	701a      	strb	r2, [r3, #0]
    return changed;
    6f22:	79bb      	ldrb	r3, [r7, #6]
    6f24:	e000      	b.n	6f28 <mcu1_status_update+0x54>
  }
  return FALSE;
    6f26:	2300      	movs	r3, #0
}
    6f28:	4618      	mov	r0, r3
    6f2a:	370c      	adds	r7, #12
    6f2c:	46bd      	mov	sp, r7
    6f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f32:	4770      	bx	lr

00006f34 <events_update>:
 EventUpdate(_cpt, (inflight_calib_mode==IF_CALIB_MODE_NONE && from_fbw.channels[_channel]<(int)(-0.75*MAX_PPRZ)), _event)

/** \fn static inline void events_update( void )
 *  @@@@@ A FIXER @@@@@
 */
static inline void events_update( void ) {
    6f34:	b480      	push	{r7}
    6f36:	af00      	add	r7, sp, #0
  static uint16_t event1_cpt = 0;
  static uint16_t event2_cpt = 0;
  EventPos(event1_cpt, RADIO_GAIN1, rc_event_1);
    6f38:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
    6f3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f40:	781b      	ldrb	r3, [r3, #0]
    6f42:	2b00      	cmp	r3, #0
    6f44:	d12a      	bne.n	6f9c <events_update+0x68>
    6f46:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    6f4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f4e:	895b      	ldrh	r3, [r3, #10]
    6f50:	b21b      	sxth	r3, r3
    6f52:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
    6f56:	dd21      	ble.n	6f9c <events_update+0x68>
    6f58:	f64a 23ac 	movw	r3, #43692	; 0xaaac
    6f5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f60:	881b      	ldrh	r3, [r3, #0]
    6f62:	2b13      	cmp	r3, #19
    6f64:	d819      	bhi.n	6f9a <events_update+0x66>
    6f66:	f64a 23ac 	movw	r3, #43692	; 0xaaac
    6f6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f6e:	881b      	ldrh	r3, [r3, #0]
    6f70:	3301      	adds	r3, #1
    6f72:	b29a      	uxth	r2, r3
    6f74:	f64a 23ac 	movw	r3, #43692	; 0xaaac
    6f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f7c:	801a      	strh	r2, [r3, #0]
    6f7e:	f64a 23ac 	movw	r3, #43692	; 0xaaac
    6f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f86:	881b      	ldrh	r3, [r3, #0]
    6f88:	2b14      	cmp	r3, #20
    6f8a:	d106      	bne.n	6f9a <events_update+0x66>
    6f8c:	f64a 2398 	movw	r3, #43672	; 0xaa98
    6f90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f94:	2201      	movs	r2, #1
    6f96:	701a      	strb	r2, [r3, #0]
    6f98:	e00c      	b.n	6fb4 <events_update+0x80>
    6f9a:	e00b      	b.n	6fb4 <events_update+0x80>
    6f9c:	f64a 23ac 	movw	r3, #43692	; 0xaaac
    6fa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fa4:	2200      	movs	r2, #0
    6fa6:	801a      	strh	r2, [r3, #0]
    6fa8:	f64a 2398 	movw	r3, #43672	; 0xaa98
    6fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fb0:	2200      	movs	r2, #0
    6fb2:	701a      	strb	r2, [r3, #0]
  EventNeg(event2_cpt, RADIO_GAIN1, rc_event_2);
    6fb4:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
    6fb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fbc:	781b      	ldrb	r3, [r3, #0]
    6fbe:	2b00      	cmp	r3, #0
    6fc0:	d12a      	bne.n	7018 <events_update+0xe4>
    6fc2:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    6fc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fca:	895b      	ldrh	r3, [r3, #10]
    6fcc:	b21b      	sxth	r3, r3
    6fce:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
    6fd2:	da21      	bge.n	7018 <events_update+0xe4>
    6fd4:	f64a 23ae 	movw	r3, #43694	; 0xaaae
    6fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fdc:	881b      	ldrh	r3, [r3, #0]
    6fde:	2b13      	cmp	r3, #19
    6fe0:	d819      	bhi.n	7016 <events_update+0xe2>
    6fe2:	f64a 23ae 	movw	r3, #43694	; 0xaaae
    6fe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fea:	881b      	ldrh	r3, [r3, #0]
    6fec:	3301      	adds	r3, #1
    6fee:	b29a      	uxth	r2, r3
    6ff0:	f64a 23ae 	movw	r3, #43694	; 0xaaae
    6ff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ff8:	801a      	strh	r2, [r3, #0]
    6ffa:	f64a 23ae 	movw	r3, #43694	; 0xaaae
    6ffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7002:	881b      	ldrh	r3, [r3, #0]
    7004:	2b14      	cmp	r3, #20
    7006:	d106      	bne.n	7016 <events_update+0xe2>
    7008:	f64a 2399 	movw	r3, #43673	; 0xaa99
    700c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7010:	2201      	movs	r2, #1
    7012:	701a      	strb	r2, [r3, #0]
    7014:	e00c      	b.n	7030 <events_update+0xfc>
    7016:	e00b      	b.n	7030 <events_update+0xfc>
    7018:	f64a 23ae 	movw	r3, #43694	; 0xaaae
    701c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7020:	2200      	movs	r2, #0
    7022:	801a      	strh	r2, [r3, #0]
    7024:	f64a 2399 	movw	r3, #43673	; 0xaa99
    7028:	f2c2 0300 	movt	r3, #8192	; 0x2000
    702c:	2200      	movs	r2, #0
    702e:	701a      	strb	r2, [r3, #0]
}  
    7030:	46bd      	mov	sp, r7
    7032:	f85d 7b04 	ldr.w	r7, [sp], #4
    7036:	4770      	bx	lr

00007038 <copy_from_to_fbw>:


/** \fn inline void copy_from_to_fbw ( void )
 *  \brief Send back uncontrolled channels (only rudder)
 */
inline void copy_from_to_fbw ( void ) {
    7038:	b480      	push	{r7}
    703a:	af00      	add	r7, sp, #0
  to_fbw.channels[RADIO_YAW] = from_fbw.channels[RADIO_YAW];
    703c:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    7040:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7044:	88da      	ldrh	r2, [r3, #6]
    7046:	f64a 33d0 	movw	r3, #43984	; 0xabd0
    704a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    704e:	80da      	strh	r2, [r3, #6]
#ifdef ANTON_T7
  to_fbw.channels[RADIO_PITCH] = from_fbw.channels[RADIO_PITCH];
#endif
  to_fbw.status = 0;
    7050:	f64a 33d0 	movw	r3, #43984	; 0xabd0
    7054:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7058:	2200      	movs	r2, #0
    705a:	74da      	strb	r2, [r3, #19]
}
    705c:	46bd      	mov	sp, r7
    705e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7062:	4770      	bx	lr

00007064 <send_boot>:
/** \fn inline void reporting_task( void )
 *  \brief Send a serie of initialisation messages followed by a stream of periodic ones\n
 * Called at 20Hz.
 */

void send_boot(void){
    7064:	b480      	push	{r7}
    7066:	af00      	add	r7, sp, #0
  /** initialisation phase during boot */
  //vPrintString("S_13 reporting_task start!\n\r");
  //add by wanbo
  //if (boot) 
  {
      DOWNLINK_SEND_BOOT(&version);
    7068:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    706c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7070:	781a      	ldrb	r2, [r3, #0]
    7072:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    7076:	f2c2 0300 	movt	r3, #8192	; 0x2000
    707a:	781b      	ldrb	r3, [r3, #0]
    707c:	b2db      	uxtb	r3, r3
    707e:	429a      	cmp	r2, r3
    7080:	d313      	bcc.n	70aa <send_boot+0x46>
    7082:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    7086:	f2c2 0300 	movt	r3, #8192	; 0x2000
    708a:	781b      	ldrb	r3, [r3, #0]
    708c:	b2db      	uxtb	r3, r3
    708e:	461a      	mov	r2, r3
    7090:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7094:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7098:	781b      	ldrb	r3, [r3, #0]
    709a:	1ad3      	subs	r3, r2, r3
    709c:	33ff      	adds	r3, #255	; 0xff
    709e:	2b06      	cmp	r3, #6
    70a0:	bfd4      	ite	le
    70a2:	2300      	movle	r3, #0
    70a4:	2301      	movgt	r3, #1
    70a6:	b2db      	uxtb	r3, r3
    70a8:	e011      	b.n	70ce <send_boot+0x6a>
    70aa:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    70ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70b2:	781b      	ldrb	r3, [r3, #0]
    70b4:	b2db      	uxtb	r3, r3
    70b6:	461a      	mov	r2, r3
    70b8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    70bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70c0:	781b      	ldrb	r3, [r3, #0]
    70c2:	1ad3      	subs	r3, r2, r3
    70c4:	2b06      	cmp	r3, #6
    70c6:	bfd4      	ite	le
    70c8:	2300      	movle	r3, #0
    70ca:	2301      	movgt	r3, #1
    70cc:	b2db      	uxtb	r3, r3
    70ce:	2b00      	cmp	r3, #0
    70d0:	f000 8194 	beq.w	73fc <send_boot+0x398>
    70d4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    70d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70dc:	781b      	ldrb	r3, [r3, #0]
    70de:	461a      	mov	r2, r3
    70e0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    70e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70e8:	2105      	movs	r1, #5
    70ea:	5499      	strb	r1, [r3, r2]
    70ec:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    70f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70f4:	781b      	ldrb	r3, [r3, #0]
    70f6:	3301      	adds	r3, #1
    70f8:	b2da      	uxtb	r2, r3
    70fa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    70fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7102:	701a      	strb	r2, [r3, #0]
    7104:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7108:	f2c2 0300 	movt	r3, #8192	; 0x2000
    710c:	781b      	ldrb	r3, [r3, #0]
    710e:	2bff      	cmp	r3, #255	; 0xff
    7110:	d105      	bne.n	711e <send_boot+0xba>
    7112:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7116:	f2c2 0300 	movt	r3, #8192	; 0x2000
    711a:	2200      	movs	r2, #0
    711c:	701a      	strb	r2, [r3, #0]
    711e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7122:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7126:	781b      	ldrb	r3, [r3, #0]
    7128:	461a      	mov	r2, r3
    712a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    712e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7132:	2101      	movs	r1, #1
    7134:	5499      	strb	r1, [r3, r2]
    7136:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    713a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    713e:	781b      	ldrb	r3, [r3, #0]
    7140:	3301      	adds	r3, #1
    7142:	b2da      	uxtb	r2, r3
    7144:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7148:	f2c2 0300 	movt	r3, #8192	; 0x2000
    714c:	701a      	strb	r2, [r3, #0]
    714e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7152:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7156:	781b      	ldrb	r3, [r3, #0]
    7158:	2bff      	cmp	r3, #255	; 0xff
    715a:	d105      	bne.n	7168 <send_boot+0x104>
    715c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7160:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7164:	2200      	movs	r2, #0
    7166:	701a      	strb	r2, [r3, #0]
    7168:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    716c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7170:	2201      	movs	r2, #1
    7172:	701a      	strb	r2, [r3, #0]
    7174:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7178:	f2c2 0300 	movt	r3, #8192	; 0x2000
    717c:	2201      	movs	r2, #1
    717e:	701a      	strb	r2, [r3, #0]
    7180:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7184:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7188:	781b      	ldrb	r3, [r3, #0]
    718a:	461a      	mov	r2, r3
    718c:	f648 1346 	movw	r3, #35142	; 0x8946
    7190:	f2c0 0301 	movt	r3, #1
    7194:	7819      	ldrb	r1, [r3, #0]
    7196:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    719a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    719e:	5499      	strb	r1, [r3, r2]
    71a0:	f648 1346 	movw	r3, #35142	; 0x8946
    71a4:	f2c0 0301 	movt	r3, #1
    71a8:	781a      	ldrb	r2, [r3, #0]
    71aa:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    71ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71b2:	781b      	ldrb	r3, [r3, #0]
    71b4:	4413      	add	r3, r2
    71b6:	b2da      	uxtb	r2, r3
    71b8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    71bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71c0:	701a      	strb	r2, [r3, #0]
    71c2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    71c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71ca:	781a      	ldrb	r2, [r3, #0]
    71cc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    71d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71d4:	781b      	ldrb	r3, [r3, #0]
    71d6:	4413      	add	r3, r2
    71d8:	b2da      	uxtb	r2, r3
    71da:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    71de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71e2:	701a      	strb	r2, [r3, #0]
    71e4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    71e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71ec:	781b      	ldrb	r3, [r3, #0]
    71ee:	3301      	adds	r3, #1
    71f0:	b2da      	uxtb	r2, r3
    71f2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    71f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71fa:	701a      	strb	r2, [r3, #0]
    71fc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7200:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7204:	781b      	ldrb	r3, [r3, #0]
    7206:	2bff      	cmp	r3, #255	; 0xff
    7208:	d105      	bne.n	7216 <send_boot+0x1b2>
    720a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    720e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7212:	2200      	movs	r2, #0
    7214:	701a      	strb	r2, [r3, #0]
    7216:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    721a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    721e:	781b      	ldrb	r3, [r3, #0]
    7220:	461a      	mov	r2, r3
    7222:	f648 1346 	movw	r3, #35142	; 0x8946
    7226:	f2c0 0301 	movt	r3, #1
    722a:	7859      	ldrb	r1, [r3, #1]
    722c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7230:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7234:	5499      	strb	r1, [r3, r2]
    7236:	4b88      	ldr	r3, [pc, #544]	; (7458 <send_boot+0x3f4>)
    7238:	781a      	ldrb	r2, [r3, #0]
    723a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    723e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7242:	781b      	ldrb	r3, [r3, #0]
    7244:	4413      	add	r3, r2
    7246:	b2da      	uxtb	r2, r3
    7248:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    724c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7250:	701a      	strb	r2, [r3, #0]
    7252:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7256:	f2c2 0300 	movt	r3, #8192	; 0x2000
    725a:	781a      	ldrb	r2, [r3, #0]
    725c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7260:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7264:	781b      	ldrb	r3, [r3, #0]
    7266:	4413      	add	r3, r2
    7268:	b2da      	uxtb	r2, r3
    726a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    726e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7272:	701a      	strb	r2, [r3, #0]
    7274:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7278:	f2c2 0300 	movt	r3, #8192	; 0x2000
    727c:	781b      	ldrb	r3, [r3, #0]
    727e:	3301      	adds	r3, #1
    7280:	b2da      	uxtb	r2, r3
    7282:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7286:	f2c2 0300 	movt	r3, #8192	; 0x2000
    728a:	701a      	strb	r2, [r3, #0]
    728c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7290:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7294:	781b      	ldrb	r3, [r3, #0]
    7296:	2bff      	cmp	r3, #255	; 0xff
    7298:	d105      	bne.n	72a6 <send_boot+0x242>
    729a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    729e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72a2:	2200      	movs	r2, #0
    72a4:	701a      	strb	r2, [r3, #0]
    72a6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    72aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72ae:	781b      	ldrb	r3, [r3, #0]
    72b0:	461a      	mov	r2, r3
    72b2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    72b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72ba:	7819      	ldrb	r1, [r3, #0]
    72bc:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    72c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72c4:	5499      	strb	r1, [r3, r2]
    72c6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    72ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72ce:	781b      	ldrb	r3, [r3, #0]
    72d0:	3301      	adds	r3, #1
    72d2:	b2da      	uxtb	r2, r3
    72d4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    72d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72dc:	701a      	strb	r2, [r3, #0]
    72de:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    72e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72e6:	781b      	ldrb	r3, [r3, #0]
    72e8:	2bff      	cmp	r3, #255	; 0xff
    72ea:	d105      	bne.n	72f8 <send_boot+0x294>
    72ec:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    72f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72f4:	2200      	movs	r2, #0
    72f6:	701a      	strb	r2, [r3, #0]
    72f8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    72fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7300:	781b      	ldrb	r3, [r3, #0]
    7302:	461a      	mov	r2, r3
    7304:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7308:	f2c2 0300 	movt	r3, #8192	; 0x2000
    730c:	7819      	ldrb	r1, [r3, #0]
    730e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7312:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7316:	5499      	strb	r1, [r3, r2]
    7318:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    731c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7320:	781b      	ldrb	r3, [r3, #0]
    7322:	3301      	adds	r3, #1
    7324:	b2da      	uxtb	r2, r3
    7326:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    732a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    732e:	701a      	strb	r2, [r3, #0]
    7330:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7334:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7338:	781b      	ldrb	r3, [r3, #0]
    733a:	2bff      	cmp	r3, #255	; 0xff
    733c:	d105      	bne.n	734a <send_boot+0x2e6>
    733e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7342:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7346:	2200      	movs	r2, #0
    7348:	701a      	strb	r2, [r3, #0]
    734a:	f242 0339 	movw	r3, #8249	; 0x2039
    734e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7352:	781b      	ldrb	r3, [r3, #0]
    7354:	b2db      	uxtb	r3, r3
    7356:	f003 0310 	and.w	r3, r3, #16
    735a:	2b00      	cmp	r3, #0
    735c:	d15a      	bne.n	7414 <send_boot+0x3b0>
    735e:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    7362:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7366:	781b      	ldrb	r3, [r3, #0]
    7368:	b2db      	uxtb	r3, r3
    736a:	461a      	mov	r2, r3
    736c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7370:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7374:	5c9a      	ldrb	r2, [r3, r2]
    7376:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    737a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    737e:	701a      	strb	r2, [r3, #0]
    7380:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    7384:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7388:	2200      	movs	r2, #0
    738a:	701a      	strb	r2, [r3, #0]
    738c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    7390:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7394:	781b      	ldrb	r3, [r3, #0]
    7396:	b2db      	uxtb	r3, r3
    7398:	3301      	adds	r3, #1
    739a:	b2da      	uxtb	r2, r3
    739c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    73a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73a4:	701a      	strb	r2, [r3, #0]
    73a6:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    73aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73ae:	781b      	ldrb	r3, [r3, #0]
    73b0:	b2db      	uxtb	r3, r3
    73b2:	2bff      	cmp	r3, #255	; 0xff
    73b4:	d105      	bne.n	73c2 <send_boot+0x35e>
    73b6:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    73ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73be:	2200      	movs	r2, #0
    73c0:	701a      	strb	r2, [r3, #0]
    73c2:	f242 0338 	movw	r3, #8248	; 0x2038
    73c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73ca:	f242 0238 	movw	r2, #8248	; 0x2038
    73ce:	f2c2 0200 	movt	r2, #8192	; 0x2000
    73d2:	7812      	ldrb	r2, [r2, #0]
    73d4:	b2d2      	uxtb	r2, r2
    73d6:	f042 0201 	orr.w	r2, r2, #1
    73da:	b2d2      	uxtb	r2, r2
    73dc:	701a      	strb	r2, [r3, #0]
    73de:	f242 0339 	movw	r3, #8249	; 0x2039
    73e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73e6:	f242 0239 	movw	r2, #8249	; 0x2039
    73ea:	f2c2 0200 	movt	r2, #8192	; 0x2000
    73ee:	7812      	ldrb	r2, [r2, #0]
    73f0:	b2d2      	uxtb	r2, r2
    73f2:	f042 0210 	orr.w	r2, r2, #16
    73f6:	b2d2      	uxtb	r2, r2
    73f8:	701a      	strb	r2, [r3, #0]
    73fa:	e00b      	b.n	7414 <send_boot+0x3b0>
    73fc:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    7400:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7404:	781b      	ldrb	r3, [r3, #0]
    7406:	3301      	adds	r3, #1
    7408:	b2da      	uxtb	r2, r3
    740a:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    740e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7412:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    7414:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    741c:	781a      	ldrb	r2, [r3, #0]
    741e:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    7422:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7426:	781b      	ldrb	r3, [r3, #0]
    7428:	b2db      	uxtb	r3, r3
    742a:	429a      	cmp	r2, r3
    742c:	d316      	bcc.n	745c <send_boot+0x3f8>
    742e:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    7432:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7436:	781b      	ldrb	r3, [r3, #0]
    7438:	b2db      	uxtb	r3, r3
    743a:	461a      	mov	r2, r3
    743c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7440:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7444:	781b      	ldrb	r3, [r3, #0]
    7446:	1ad3      	subs	r3, r2, r3
    7448:	33ff      	adds	r3, #255	; 0xff
    744a:	2b14      	cmp	r3, #20
    744c:	bfd4      	ite	le
    744e:	2300      	movle	r3, #0
    7450:	2301      	movgt	r3, #1
    7452:	b2db      	uxtb	r3, r3
    7454:	e014      	b.n	7480 <send_boot+0x41c>
    7456:	bf00      	nop
    7458:	00018947 	.word	0x00018947
    745c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    7460:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7464:	781b      	ldrb	r3, [r3, #0]
    7466:	b2db      	uxtb	r3, r3
    7468:	461a      	mov	r2, r3
    746a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    746e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7472:	781b      	ldrb	r3, [r3, #0]
    7474:	1ad3      	subs	r3, r2, r3
    7476:	2b14      	cmp	r3, #20
    7478:	bfd4      	ite	le
    747a:	2300      	movle	r3, #0
    747c:	2301      	movgt	r3, #1
    747e:	b2db      	uxtb	r3, r3
    7480:	2b00      	cmp	r3, #0
    7482:	f000 85a5 	beq.w	7fd0 <send_boot+0xf6c>
    7486:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    748a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    748e:	781b      	ldrb	r3, [r3, #0]
    7490:	461a      	mov	r2, r3
    7492:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7496:	f2c2 0300 	movt	r3, #8192	; 0x2000
    749a:	2105      	movs	r1, #5
    749c:	5499      	strb	r1, [r3, r2]
    749e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    74a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74a6:	781b      	ldrb	r3, [r3, #0]
    74a8:	3301      	adds	r3, #1
    74aa:	b2da      	uxtb	r2, r3
    74ac:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    74b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74b4:	701a      	strb	r2, [r3, #0]
    74b6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    74ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74be:	781b      	ldrb	r3, [r3, #0]
    74c0:	2bff      	cmp	r3, #255	; 0xff
    74c2:	d105      	bne.n	74d0 <send_boot+0x46c>
    74c4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    74c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74cc:	2200      	movs	r2, #0
    74ce:	701a      	strb	r2, [r3, #0]
    74d0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    74d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74d8:	781b      	ldrb	r3, [r3, #0]
    74da:	461a      	mov	r2, r3
    74dc:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    74e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74e4:	2105      	movs	r1, #5
    74e6:	5499      	strb	r1, [r3, r2]
    74e8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    74ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74f0:	781b      	ldrb	r3, [r3, #0]
    74f2:	3301      	adds	r3, #1
    74f4:	b2da      	uxtb	r2, r3
    74f6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    74fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74fe:	701a      	strb	r2, [r3, #0]
    7500:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7504:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7508:	781b      	ldrb	r3, [r3, #0]
    750a:	2bff      	cmp	r3, #255	; 0xff
    750c:	d105      	bne.n	751a <send_boot+0x4b6>
    750e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7512:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7516:	2200      	movs	r2, #0
    7518:	701a      	strb	r2, [r3, #0]
    751a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    751e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7522:	2205      	movs	r2, #5
    7524:	701a      	strb	r2, [r3, #0]
    7526:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    752a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    752e:	2205      	movs	r2, #5
    7530:	701a      	strb	r2, [r3, #0]
    7532:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    753a:	781b      	ldrb	r3, [r3, #0]
    753c:	461a      	mov	r2, r3
    753e:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    7542:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7546:	7819      	ldrb	r1, [r3, #0]
    7548:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    754c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7550:	5499      	strb	r1, [r3, r2]
    7552:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    7556:	f2c2 0300 	movt	r3, #8192	; 0x2000
    755a:	781a      	ldrb	r2, [r3, #0]
    755c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7560:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7564:	781b      	ldrb	r3, [r3, #0]
    7566:	4413      	add	r3, r2
    7568:	b2da      	uxtb	r2, r3
    756a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    756e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7572:	701a      	strb	r2, [r3, #0]
    7574:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7578:	f2c2 0300 	movt	r3, #8192	; 0x2000
    757c:	781a      	ldrb	r2, [r3, #0]
    757e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7582:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7586:	781b      	ldrb	r3, [r3, #0]
    7588:	4413      	add	r3, r2
    758a:	b2da      	uxtb	r2, r3
    758c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7590:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7594:	701a      	strb	r2, [r3, #0]
    7596:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    759a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    759e:	781b      	ldrb	r3, [r3, #0]
    75a0:	3301      	adds	r3, #1
    75a2:	b2da      	uxtb	r2, r3
    75a4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    75a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75ac:	701a      	strb	r2, [r3, #0]
    75ae:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    75b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75b6:	781b      	ldrb	r3, [r3, #0]
    75b8:	2bff      	cmp	r3, #255	; 0xff
    75ba:	d105      	bne.n	75c8 <send_boot+0x564>
    75bc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    75c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75c4:	2200      	movs	r2, #0
    75c6:	701a      	strb	r2, [r3, #0]
    75c8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    75cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75d0:	781b      	ldrb	r3, [r3, #0]
    75d2:	461a      	mov	r2, r3
    75d4:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    75d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75dc:	7859      	ldrb	r1, [r3, #1]
    75de:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    75e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75e6:	5499      	strb	r1, [r3, r2]
    75e8:	4bd1      	ldr	r3, [pc, #836]	; (7930 <send_boot+0x8cc>)
    75ea:	781a      	ldrb	r2, [r3, #0]
    75ec:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    75f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75f4:	781b      	ldrb	r3, [r3, #0]
    75f6:	4413      	add	r3, r2
    75f8:	b2da      	uxtb	r2, r3
    75fa:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    75fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7602:	701a      	strb	r2, [r3, #0]
    7604:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7608:	f2c2 0300 	movt	r3, #8192	; 0x2000
    760c:	781a      	ldrb	r2, [r3, #0]
    760e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7612:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7616:	781b      	ldrb	r3, [r3, #0]
    7618:	4413      	add	r3, r2
    761a:	b2da      	uxtb	r2, r3
    761c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7620:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7624:	701a      	strb	r2, [r3, #0]
    7626:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    762a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    762e:	781b      	ldrb	r3, [r3, #0]
    7630:	3301      	adds	r3, #1
    7632:	b2da      	uxtb	r2, r3
    7634:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7638:	f2c2 0300 	movt	r3, #8192	; 0x2000
    763c:	701a      	strb	r2, [r3, #0]
    763e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7642:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7646:	781b      	ldrb	r3, [r3, #0]
    7648:	2bff      	cmp	r3, #255	; 0xff
    764a:	d105      	bne.n	7658 <send_boot+0x5f4>
    764c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7650:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7654:	2200      	movs	r2, #0
    7656:	701a      	strb	r2, [r3, #0]
    7658:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    765c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7660:	781b      	ldrb	r3, [r3, #0]
    7662:	461a      	mov	r2, r3
    7664:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    7668:	f2c2 0300 	movt	r3, #8192	; 0x2000
    766c:	7899      	ldrb	r1, [r3, #2]
    766e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7672:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7676:	5499      	strb	r1, [r3, r2]
    7678:	4bae      	ldr	r3, [pc, #696]	; (7934 <send_boot+0x8d0>)
    767a:	781a      	ldrb	r2, [r3, #0]
    767c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7680:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7684:	781b      	ldrb	r3, [r3, #0]
    7686:	4413      	add	r3, r2
    7688:	b2da      	uxtb	r2, r3
    768a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    768e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7692:	701a      	strb	r2, [r3, #0]
    7694:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7698:	f2c2 0300 	movt	r3, #8192	; 0x2000
    769c:	781a      	ldrb	r2, [r3, #0]
    769e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    76a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76a6:	781b      	ldrb	r3, [r3, #0]
    76a8:	4413      	add	r3, r2
    76aa:	b2da      	uxtb	r2, r3
    76ac:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    76b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76b4:	701a      	strb	r2, [r3, #0]
    76b6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    76ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76be:	781b      	ldrb	r3, [r3, #0]
    76c0:	3301      	adds	r3, #1
    76c2:	b2da      	uxtb	r2, r3
    76c4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    76c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76cc:	701a      	strb	r2, [r3, #0]
    76ce:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    76d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76d6:	781b      	ldrb	r3, [r3, #0]
    76d8:	2bff      	cmp	r3, #255	; 0xff
    76da:	d105      	bne.n	76e8 <send_boot+0x684>
    76dc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    76e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76e4:	2200      	movs	r2, #0
    76e6:	701a      	strb	r2, [r3, #0]
    76e8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    76ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76f0:	781b      	ldrb	r3, [r3, #0]
    76f2:	461a      	mov	r2, r3
    76f4:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    76f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76fc:	78d9      	ldrb	r1, [r3, #3]
    76fe:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7702:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7706:	5499      	strb	r1, [r3, r2]
    7708:	4b8b      	ldr	r3, [pc, #556]	; (7938 <send_boot+0x8d4>)
    770a:	781a      	ldrb	r2, [r3, #0]
    770c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7710:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7714:	781b      	ldrb	r3, [r3, #0]
    7716:	4413      	add	r3, r2
    7718:	b2da      	uxtb	r2, r3
    771a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    771e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7722:	701a      	strb	r2, [r3, #0]
    7724:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7728:	f2c2 0300 	movt	r3, #8192	; 0x2000
    772c:	781a      	ldrb	r2, [r3, #0]
    772e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7732:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7736:	781b      	ldrb	r3, [r3, #0]
    7738:	4413      	add	r3, r2
    773a:	b2da      	uxtb	r2, r3
    773c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7740:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7744:	701a      	strb	r2, [r3, #0]
    7746:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    774a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    774e:	781b      	ldrb	r3, [r3, #0]
    7750:	3301      	adds	r3, #1
    7752:	b2da      	uxtb	r2, r3
    7754:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7758:	f2c2 0300 	movt	r3, #8192	; 0x2000
    775c:	701a      	strb	r2, [r3, #0]
    775e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7762:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7766:	781b      	ldrb	r3, [r3, #0]
    7768:	2bff      	cmp	r3, #255	; 0xff
    776a:	d105      	bne.n	7778 <send_boot+0x714>
    776c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7774:	2200      	movs	r2, #0
    7776:	701a      	strb	r2, [r3, #0]
    7778:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    777c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7780:	781b      	ldrb	r3, [r3, #0]
    7782:	461a      	mov	r2, r3
    7784:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    7788:	f2c2 0300 	movt	r3, #8192	; 0x2000
    778c:	7819      	ldrb	r1, [r3, #0]
    778e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7792:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7796:	5499      	strb	r1, [r3, r2]
    7798:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    779c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77a0:	781a      	ldrb	r2, [r3, #0]
    77a2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    77a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77aa:	781b      	ldrb	r3, [r3, #0]
    77ac:	4413      	add	r3, r2
    77ae:	b2da      	uxtb	r2, r3
    77b0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    77b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77b8:	701a      	strb	r2, [r3, #0]
    77ba:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    77be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77c2:	781a      	ldrb	r2, [r3, #0]
    77c4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    77c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77cc:	781b      	ldrb	r3, [r3, #0]
    77ce:	4413      	add	r3, r2
    77d0:	b2da      	uxtb	r2, r3
    77d2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    77d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77da:	701a      	strb	r2, [r3, #0]
    77dc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    77e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77e4:	781b      	ldrb	r3, [r3, #0]
    77e6:	3301      	adds	r3, #1
    77e8:	b2da      	uxtb	r2, r3
    77ea:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    77ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77f2:	701a      	strb	r2, [r3, #0]
    77f4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    77f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77fc:	781b      	ldrb	r3, [r3, #0]
    77fe:	2bff      	cmp	r3, #255	; 0xff
    7800:	d105      	bne.n	780e <send_boot+0x7aa>
    7802:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    780a:	2200      	movs	r2, #0
    780c:	701a      	strb	r2, [r3, #0]
    780e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7816:	781b      	ldrb	r3, [r3, #0]
    7818:	461a      	mov	r2, r3
    781a:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    781e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7822:	7859      	ldrb	r1, [r3, #1]
    7824:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7828:	f2c2 0300 	movt	r3, #8192	; 0x2000
    782c:	5499      	strb	r1, [r3, r2]
    782e:	4b43      	ldr	r3, [pc, #268]	; (793c <send_boot+0x8d8>)
    7830:	781a      	ldrb	r2, [r3, #0]
    7832:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7836:	f2c2 0300 	movt	r3, #8192	; 0x2000
    783a:	781b      	ldrb	r3, [r3, #0]
    783c:	4413      	add	r3, r2
    783e:	b2da      	uxtb	r2, r3
    7840:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7844:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7848:	701a      	strb	r2, [r3, #0]
    784a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    784e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7852:	781a      	ldrb	r2, [r3, #0]
    7854:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7858:	f2c2 0300 	movt	r3, #8192	; 0x2000
    785c:	781b      	ldrb	r3, [r3, #0]
    785e:	4413      	add	r3, r2
    7860:	b2da      	uxtb	r2, r3
    7862:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7866:	f2c2 0300 	movt	r3, #8192	; 0x2000
    786a:	701a      	strb	r2, [r3, #0]
    786c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7870:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7874:	781b      	ldrb	r3, [r3, #0]
    7876:	3301      	adds	r3, #1
    7878:	b2da      	uxtb	r2, r3
    787a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    787e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7882:	701a      	strb	r2, [r3, #0]
    7884:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7888:	f2c2 0300 	movt	r3, #8192	; 0x2000
    788c:	781b      	ldrb	r3, [r3, #0]
    788e:	2bff      	cmp	r3, #255	; 0xff
    7890:	d105      	bne.n	789e <send_boot+0x83a>
    7892:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7896:	f2c2 0300 	movt	r3, #8192	; 0x2000
    789a:	2200      	movs	r2, #0
    789c:	701a      	strb	r2, [r3, #0]
    789e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    78a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78a6:	781b      	ldrb	r3, [r3, #0]
    78a8:	461a      	mov	r2, r3
    78aa:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    78ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78b2:	7899      	ldrb	r1, [r3, #2]
    78b4:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    78b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78bc:	5499      	strb	r1, [r3, r2]
    78be:	4b20      	ldr	r3, [pc, #128]	; (7940 <send_boot+0x8dc>)
    78c0:	781a      	ldrb	r2, [r3, #0]
    78c2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    78c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78ca:	781b      	ldrb	r3, [r3, #0]
    78cc:	4413      	add	r3, r2
    78ce:	b2da      	uxtb	r2, r3
    78d0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    78d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78d8:	701a      	strb	r2, [r3, #0]
    78da:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    78de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78e2:	781a      	ldrb	r2, [r3, #0]
    78e4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    78e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78ec:	781b      	ldrb	r3, [r3, #0]
    78ee:	4413      	add	r3, r2
    78f0:	b2da      	uxtb	r2, r3
    78f2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    78f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78fa:	701a      	strb	r2, [r3, #0]
    78fc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7900:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7904:	781b      	ldrb	r3, [r3, #0]
    7906:	3301      	adds	r3, #1
    7908:	b2da      	uxtb	r2, r3
    790a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    790e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7912:	701a      	strb	r2, [r3, #0]
    7914:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7918:	f2c2 0300 	movt	r3, #8192	; 0x2000
    791c:	781b      	ldrb	r3, [r3, #0]
    791e:	2bff      	cmp	r3, #255	; 0xff
    7920:	d110      	bne.n	7944 <send_boot+0x8e0>
    7922:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7926:	f2c2 0300 	movt	r3, #8192	; 0x2000
    792a:	2200      	movs	r2, #0
    792c:	701a      	strb	r2, [r3, #0]
    792e:	e009      	b.n	7944 <send_boot+0x8e0>
    7930:	2000b0a9 	.word	0x2000b0a9
    7934:	2000b0aa 	.word	0x2000b0aa
    7938:	2000b0ab 	.word	0x2000b0ab
    793c:	2000b0ad 	.word	0x2000b0ad
    7940:	2000b0ae 	.word	0x2000b0ae
    7944:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7948:	f2c2 0300 	movt	r3, #8192	; 0x2000
    794c:	781b      	ldrb	r3, [r3, #0]
    794e:	461a      	mov	r2, r3
    7950:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    7954:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7958:	78d9      	ldrb	r1, [r3, #3]
    795a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    795e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7962:	5499      	strb	r1, [r3, r2]
    7964:	4bd3      	ldr	r3, [pc, #844]	; (7cb4 <send_boot+0xc50>)
    7966:	781a      	ldrb	r2, [r3, #0]
    7968:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    796c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7970:	781b      	ldrb	r3, [r3, #0]
    7972:	4413      	add	r3, r2
    7974:	b2da      	uxtb	r2, r3
    7976:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    797a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    797e:	701a      	strb	r2, [r3, #0]
    7980:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7984:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7988:	781a      	ldrb	r2, [r3, #0]
    798a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    798e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7992:	781b      	ldrb	r3, [r3, #0]
    7994:	4413      	add	r3, r2
    7996:	b2da      	uxtb	r2, r3
    7998:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    799c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79a0:	701a      	strb	r2, [r3, #0]
    79a2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    79a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79aa:	781b      	ldrb	r3, [r3, #0]
    79ac:	3301      	adds	r3, #1
    79ae:	b2da      	uxtb	r2, r3
    79b0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    79b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79b8:	701a      	strb	r2, [r3, #0]
    79ba:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    79be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79c2:	781b      	ldrb	r3, [r3, #0]
    79c4:	2bff      	cmp	r3, #255	; 0xff
    79c6:	d105      	bne.n	79d4 <send_boot+0x970>
    79c8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    79cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79d0:	2200      	movs	r2, #0
    79d2:	701a      	strb	r2, [r3, #0]
    79d4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    79d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79dc:	781b      	ldrb	r3, [r3, #0]
    79de:	461a      	mov	r2, r3
    79e0:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
    79e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79e8:	7819      	ldrb	r1, [r3, #0]
    79ea:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    79ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79f2:	5499      	strb	r1, [r3, r2]
    79f4:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
    79f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79fc:	781a      	ldrb	r2, [r3, #0]
    79fe:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7a02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a06:	781b      	ldrb	r3, [r3, #0]
    7a08:	4413      	add	r3, r2
    7a0a:	b2da      	uxtb	r2, r3
    7a0c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7a10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a14:	701a      	strb	r2, [r3, #0]
    7a16:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7a1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a1e:	781a      	ldrb	r2, [r3, #0]
    7a20:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7a24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a28:	781b      	ldrb	r3, [r3, #0]
    7a2a:	4413      	add	r3, r2
    7a2c:	b2da      	uxtb	r2, r3
    7a2e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7a32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a36:	701a      	strb	r2, [r3, #0]
    7a38:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a40:	781b      	ldrb	r3, [r3, #0]
    7a42:	3301      	adds	r3, #1
    7a44:	b2da      	uxtb	r2, r3
    7a46:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7a4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a4e:	701a      	strb	r2, [r3, #0]
    7a50:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a58:	781b      	ldrb	r3, [r3, #0]
    7a5a:	2bff      	cmp	r3, #255	; 0xff
    7a5c:	d105      	bne.n	7a6a <send_boot+0xa06>
    7a5e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7a62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a66:	2200      	movs	r2, #0
    7a68:	701a      	strb	r2, [r3, #0]
    7a6a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a72:	781b      	ldrb	r3, [r3, #0]
    7a74:	461a      	mov	r2, r3
    7a76:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
    7a7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a7e:	7859      	ldrb	r1, [r3, #1]
    7a80:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a88:	5499      	strb	r1, [r3, r2]
    7a8a:	4b8b      	ldr	r3, [pc, #556]	; (7cb8 <send_boot+0xc54>)
    7a8c:	781a      	ldrb	r2, [r3, #0]
    7a8e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7a92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a96:	781b      	ldrb	r3, [r3, #0]
    7a98:	4413      	add	r3, r2
    7a9a:	b2da      	uxtb	r2, r3
    7a9c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7aa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7aa4:	701a      	strb	r2, [r3, #0]
    7aa6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7aaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7aae:	781a      	ldrb	r2, [r3, #0]
    7ab0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ab8:	781b      	ldrb	r3, [r3, #0]
    7aba:	4413      	add	r3, r2
    7abc:	b2da      	uxtb	r2, r3
    7abe:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7ac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ac6:	701a      	strb	r2, [r3, #0]
    7ac8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ad0:	781b      	ldrb	r3, [r3, #0]
    7ad2:	3301      	adds	r3, #1
    7ad4:	b2da      	uxtb	r2, r3
    7ad6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7ada:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ade:	701a      	strb	r2, [r3, #0]
    7ae0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ae8:	781b      	ldrb	r3, [r3, #0]
    7aea:	2bff      	cmp	r3, #255	; 0xff
    7aec:	d105      	bne.n	7afa <send_boot+0xa96>
    7aee:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7af2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7af6:	2200      	movs	r2, #0
    7af8:	701a      	strb	r2, [r3, #0]
    7afa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7afe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b02:	781b      	ldrb	r3, [r3, #0]
    7b04:	461a      	mov	r2, r3
    7b06:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
    7b0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b0e:	7899      	ldrb	r1, [r3, #2]
    7b10:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7b14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b18:	5499      	strb	r1, [r3, r2]
    7b1a:	4b68      	ldr	r3, [pc, #416]	; (7cbc <send_boot+0xc58>)
    7b1c:	781a      	ldrb	r2, [r3, #0]
    7b1e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7b22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b26:	781b      	ldrb	r3, [r3, #0]
    7b28:	4413      	add	r3, r2
    7b2a:	b2da      	uxtb	r2, r3
    7b2c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7b30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b34:	701a      	strb	r2, [r3, #0]
    7b36:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7b3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b3e:	781a      	ldrb	r2, [r3, #0]
    7b40:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7b44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b48:	781b      	ldrb	r3, [r3, #0]
    7b4a:	4413      	add	r3, r2
    7b4c:	b2da      	uxtb	r2, r3
    7b4e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7b52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b56:	701a      	strb	r2, [r3, #0]
    7b58:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7b5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b60:	781b      	ldrb	r3, [r3, #0]
    7b62:	3301      	adds	r3, #1
    7b64:	b2da      	uxtb	r2, r3
    7b66:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7b6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b6e:	701a      	strb	r2, [r3, #0]
    7b70:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7b74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b78:	781b      	ldrb	r3, [r3, #0]
    7b7a:	2bff      	cmp	r3, #255	; 0xff
    7b7c:	d105      	bne.n	7b8a <send_boot+0xb26>
    7b7e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b86:	2200      	movs	r2, #0
    7b88:	701a      	strb	r2, [r3, #0]
    7b8a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b92:	781b      	ldrb	r3, [r3, #0]
    7b94:	461a      	mov	r2, r3
    7b96:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
    7b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b9e:	78d9      	ldrb	r1, [r3, #3]
    7ba0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7ba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ba8:	5499      	strb	r1, [r3, r2]
    7baa:	4b45      	ldr	r3, [pc, #276]	; (7cc0 <send_boot+0xc5c>)
    7bac:	781a      	ldrb	r2, [r3, #0]
    7bae:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7bb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bb6:	781b      	ldrb	r3, [r3, #0]
    7bb8:	4413      	add	r3, r2
    7bba:	b2da      	uxtb	r2, r3
    7bbc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7bc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bc4:	701a      	strb	r2, [r3, #0]
    7bc6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7bca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bce:	781a      	ldrb	r2, [r3, #0]
    7bd0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7bd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bd8:	781b      	ldrb	r3, [r3, #0]
    7bda:	4413      	add	r3, r2
    7bdc:	b2da      	uxtb	r2, r3
    7bde:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7be2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7be6:	701a      	strb	r2, [r3, #0]
    7be8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7bec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bf0:	781b      	ldrb	r3, [r3, #0]
    7bf2:	3301      	adds	r3, #1
    7bf4:	b2da      	uxtb	r2, r3
    7bf6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7bfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bfe:	701a      	strb	r2, [r3, #0]
    7c00:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7c04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c08:	781b      	ldrb	r3, [r3, #0]
    7c0a:	2bff      	cmp	r3, #255	; 0xff
    7c0c:	d105      	bne.n	7c1a <send_boot+0xbb6>
    7c0e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c16:	2200      	movs	r2, #0
    7c18:	701a      	strb	r2, [r3, #0]
    7c1a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7c1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c22:	781b      	ldrb	r3, [r3, #0]
    7c24:	461a      	mov	r2, r3
    7c26:	f240 2386 	movw	r3, #646	; 0x286
    7c2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c2e:	7819      	ldrb	r1, [r3, #0]
    7c30:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7c34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c38:	5499      	strb	r1, [r3, r2]
    7c3a:	f240 2386 	movw	r3, #646	; 0x286
    7c3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c42:	781a      	ldrb	r2, [r3, #0]
    7c44:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7c48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c4c:	781b      	ldrb	r3, [r3, #0]
    7c4e:	4413      	add	r3, r2
    7c50:	b2da      	uxtb	r2, r3
    7c52:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7c56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c5a:	701a      	strb	r2, [r3, #0]
    7c5c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7c60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c64:	781a      	ldrb	r2, [r3, #0]
    7c66:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7c6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c6e:	781b      	ldrb	r3, [r3, #0]
    7c70:	4413      	add	r3, r2
    7c72:	b2da      	uxtb	r2, r3
    7c74:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7c78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c7c:	701a      	strb	r2, [r3, #0]
    7c7e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7c82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c86:	781b      	ldrb	r3, [r3, #0]
    7c88:	3301      	adds	r3, #1
    7c8a:	b2da      	uxtb	r2, r3
    7c8c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c94:	701a      	strb	r2, [r3, #0]
    7c96:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7c9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c9e:	781b      	ldrb	r3, [r3, #0]
    7ca0:	2bff      	cmp	r3, #255	; 0xff
    7ca2:	d10f      	bne.n	7cc4 <send_boot+0xc60>
    7ca4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7ca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cac:	2200      	movs	r2, #0
    7cae:	701a      	strb	r2, [r3, #0]
    7cb0:	e008      	b.n	7cc4 <send_boot+0xc60>
    7cb2:	bf00      	nop
    7cb4:	2000b0af 	.word	0x2000b0af
    7cb8:	2000b0a5 	.word	0x2000b0a5
    7cbc:	2000b0a6 	.word	0x2000b0a6
    7cc0:	2000b0a7 	.word	0x2000b0a7
    7cc4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7cc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ccc:	781b      	ldrb	r3, [r3, #0]
    7cce:	461a      	mov	r2, r3
    7cd0:	f240 2386 	movw	r3, #646	; 0x286
    7cd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cd8:	7859      	ldrb	r1, [r3, #1]
    7cda:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7cde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ce2:	5499      	strb	r1, [r3, r2]
    7ce4:	4bc5      	ldr	r3, [pc, #788]	; (7ffc <send_boot+0xf98>)
    7ce6:	781a      	ldrb	r2, [r3, #0]
    7ce8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7cec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cf0:	781b      	ldrb	r3, [r3, #0]
    7cf2:	4413      	add	r3, r2
    7cf4:	b2da      	uxtb	r2, r3
    7cf6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7cfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cfe:	701a      	strb	r2, [r3, #0]
    7d00:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7d04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d08:	781a      	ldrb	r2, [r3, #0]
    7d0a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7d0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d12:	781b      	ldrb	r3, [r3, #0]
    7d14:	4413      	add	r3, r2
    7d16:	b2da      	uxtb	r2, r3
    7d18:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d20:	701a      	strb	r2, [r3, #0]
    7d22:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7d26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d2a:	781b      	ldrb	r3, [r3, #0]
    7d2c:	3301      	adds	r3, #1
    7d2e:	b2da      	uxtb	r2, r3
    7d30:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7d34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d38:	701a      	strb	r2, [r3, #0]
    7d3a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7d3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d42:	781b      	ldrb	r3, [r3, #0]
    7d44:	2bff      	cmp	r3, #255	; 0xff
    7d46:	d105      	bne.n	7d54 <send_boot+0xcf0>
    7d48:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7d4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d50:	2200      	movs	r2, #0
    7d52:	701a      	strb	r2, [r3, #0]
    7d54:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7d58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d5c:	781b      	ldrb	r3, [r3, #0]
    7d5e:	461a      	mov	r2, r3
    7d60:	f240 2388 	movw	r3, #648	; 0x288
    7d64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d68:	7819      	ldrb	r1, [r3, #0]
    7d6a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7d6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d72:	5499      	strb	r1, [r3, r2]
    7d74:	f240 2388 	movw	r3, #648	; 0x288
    7d78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d7c:	781a      	ldrb	r2, [r3, #0]
    7d7e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7d82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d86:	781b      	ldrb	r3, [r3, #0]
    7d88:	4413      	add	r3, r2
    7d8a:	b2da      	uxtb	r2, r3
    7d8c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7d90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d94:	701a      	strb	r2, [r3, #0]
    7d96:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7d9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d9e:	781a      	ldrb	r2, [r3, #0]
    7da0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7da4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7da8:	781b      	ldrb	r3, [r3, #0]
    7daa:	4413      	add	r3, r2
    7dac:	b2da      	uxtb	r2, r3
    7dae:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7db2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7db6:	701a      	strb	r2, [r3, #0]
    7db8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7dbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dc0:	781b      	ldrb	r3, [r3, #0]
    7dc2:	3301      	adds	r3, #1
    7dc4:	b2da      	uxtb	r2, r3
    7dc6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7dca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dce:	701a      	strb	r2, [r3, #0]
    7dd0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7dd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dd8:	781b      	ldrb	r3, [r3, #0]
    7dda:	2bff      	cmp	r3, #255	; 0xff
    7ddc:	d105      	bne.n	7dea <send_boot+0xd86>
    7dde:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7de2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7de6:	2200      	movs	r2, #0
    7de8:	701a      	strb	r2, [r3, #0]
    7dea:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7df2:	781b      	ldrb	r3, [r3, #0]
    7df4:	461a      	mov	r2, r3
    7df6:	f240 2388 	movw	r3, #648	; 0x288
    7dfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dfe:	7859      	ldrb	r1, [r3, #1]
    7e00:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7e04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e08:	5499      	strb	r1, [r3, r2]
    7e0a:	4b7d      	ldr	r3, [pc, #500]	; (8000 <send_boot+0xf9c>)
    7e0c:	781a      	ldrb	r2, [r3, #0]
    7e0e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7e12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e16:	781b      	ldrb	r3, [r3, #0]
    7e18:	4413      	add	r3, r2
    7e1a:	b2da      	uxtb	r2, r3
    7e1c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7e20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e24:	701a      	strb	r2, [r3, #0]
    7e26:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7e2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e2e:	781a      	ldrb	r2, [r3, #0]
    7e30:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7e34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e38:	781b      	ldrb	r3, [r3, #0]
    7e3a:	4413      	add	r3, r2
    7e3c:	b2da      	uxtb	r2, r3
    7e3e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7e42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e46:	701a      	strb	r2, [r3, #0]
    7e48:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e50:	781b      	ldrb	r3, [r3, #0]
    7e52:	3301      	adds	r3, #1
    7e54:	b2da      	uxtb	r2, r3
    7e56:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7e5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e5e:	701a      	strb	r2, [r3, #0]
    7e60:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7e64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e68:	781b      	ldrb	r3, [r3, #0]
    7e6a:	2bff      	cmp	r3, #255	; 0xff
    7e6c:	d105      	bne.n	7e7a <send_boot+0xe16>
    7e6e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7e72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e76:	2200      	movs	r2, #0
    7e78:	701a      	strb	r2, [r3, #0]
    7e7a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7e7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e82:	781b      	ldrb	r3, [r3, #0]
    7e84:	461a      	mov	r2, r3
    7e86:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    7e8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e8e:	7819      	ldrb	r1, [r3, #0]
    7e90:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e98:	5499      	strb	r1, [r3, r2]
    7e9a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7e9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ea2:	781b      	ldrb	r3, [r3, #0]
    7ea4:	3301      	adds	r3, #1
    7ea6:	b2da      	uxtb	r2, r3
    7ea8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7eac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7eb0:	701a      	strb	r2, [r3, #0]
    7eb2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7eb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7eba:	781b      	ldrb	r3, [r3, #0]
    7ebc:	2bff      	cmp	r3, #255	; 0xff
    7ebe:	d105      	bne.n	7ecc <send_boot+0xe68>
    7ec0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7ec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ec8:	2200      	movs	r2, #0
    7eca:	701a      	strb	r2, [r3, #0]
    7ecc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7ed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ed4:	781b      	ldrb	r3, [r3, #0]
    7ed6:	461a      	mov	r2, r3
    7ed8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    7edc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ee0:	7819      	ldrb	r1, [r3, #0]
    7ee2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7ee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7eea:	5499      	strb	r1, [r3, r2]
    7eec:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7ef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ef4:	781b      	ldrb	r3, [r3, #0]
    7ef6:	3301      	adds	r3, #1
    7ef8:	b2da      	uxtb	r2, r3
    7efa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7efe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f02:	701a      	strb	r2, [r3, #0]
    7f04:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7f08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f0c:	781b      	ldrb	r3, [r3, #0]
    7f0e:	2bff      	cmp	r3, #255	; 0xff
    7f10:	d105      	bne.n	7f1e <send_boot+0xeba>
    7f12:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    7f16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f1a:	2200      	movs	r2, #0
    7f1c:	701a      	strb	r2, [r3, #0]
    7f1e:	f242 0339 	movw	r3, #8249	; 0x2039
    7f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f26:	781b      	ldrb	r3, [r3, #0]
    7f28:	b2db      	uxtb	r3, r3
    7f2a:	f003 0310 	and.w	r3, r3, #16
    7f2e:	2b00      	cmp	r3, #0
    7f30:	d15a      	bne.n	7fe8 <send_boot+0xf84>
    7f32:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    7f36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f3a:	781b      	ldrb	r3, [r3, #0]
    7f3c:	b2db      	uxtb	r3, r3
    7f3e:	461a      	mov	r2, r3
    7f40:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    7f44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f48:	5c9a      	ldrb	r2, [r3, r2]
    7f4a:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    7f4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f52:	701a      	strb	r2, [r3, #0]
    7f54:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    7f58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f5c:	2200      	movs	r2, #0
    7f5e:	701a      	strb	r2, [r3, #0]
    7f60:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    7f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f68:	781b      	ldrb	r3, [r3, #0]
    7f6a:	b2db      	uxtb	r3, r3
    7f6c:	3301      	adds	r3, #1
    7f6e:	b2da      	uxtb	r2, r3
    7f70:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    7f74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f78:	701a      	strb	r2, [r3, #0]
    7f7a:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    7f7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f82:	781b      	ldrb	r3, [r3, #0]
    7f84:	b2db      	uxtb	r3, r3
    7f86:	2bff      	cmp	r3, #255	; 0xff
    7f88:	d105      	bne.n	7f96 <send_boot+0xf32>
    7f8a:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    7f8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f92:	2200      	movs	r2, #0
    7f94:	701a      	strb	r2, [r3, #0]
    7f96:	f242 0338 	movw	r3, #8248	; 0x2038
    7f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f9e:	f242 0238 	movw	r2, #8248	; 0x2038
    7fa2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7fa6:	7812      	ldrb	r2, [r2, #0]
    7fa8:	b2d2      	uxtb	r2, r2
    7faa:	f042 0201 	orr.w	r2, r2, #1
    7fae:	b2d2      	uxtb	r2, r2
    7fb0:	701a      	strb	r2, [r3, #0]
    7fb2:	f242 0339 	movw	r3, #8249	; 0x2039
    7fb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fba:	f242 0239 	movw	r2, #8249	; 0x2039
    7fbe:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7fc2:	7812      	ldrb	r2, [r2, #0]
    7fc4:	b2d2      	uxtb	r2, r2
    7fc6:	f042 0210 	orr.w	r2, r2, #16
    7fca:	b2d2      	uxtb	r2, r2
    7fcc:	701a      	strb	r2, [r3, #0]
    7fce:	e00b      	b.n	7fe8 <send_boot+0xf84>
    7fd0:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    7fd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fd8:	781b      	ldrb	r3, [r3, #0]
    7fda:	3301      	adds	r3, #1
    7fdc:	b2da      	uxtb	r2, r3
    7fde:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    7fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fe6:	701a      	strb	r2, [r3, #0]
      boot = FALSE;
    7fe8:	f240 2381 	movw	r3, #641	; 0x281
    7fec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ff0:	2200      	movs	r2, #0
    7ff2:	701a      	strb	r2, [r3, #0]
  }
}
    7ff4:	46bd      	mov	sp, r7
    7ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ffa:	4770      	bx	lr
    7ffc:	20000287 	.word	0x20000287
    8000:	20000289 	.word	0x20000289

00008004 <send_attitude>:
void send_attitude(void){ //499ms
    8004:	b480      	push	{r7}
    8006:	af00      	add	r7, sp, #0
    // add by wanbo
  //if(!boot)
  {
    count++;
    8008:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    800c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8010:	781b      	ldrb	r3, [r3, #0]
    8012:	3301      	adds	r3, #1
    8014:	b2da      	uxtb	r2, r3
    8016:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    801a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    801e:	701a      	strb	r2, [r3, #0]
    if (count == 250) count = 0;
    8020:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    8024:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8028:	781b      	ldrb	r3, [r3, #0]
    802a:	2bfa      	cmp	r3, #250	; 0xfa
    802c:	d105      	bne.n	803a <send_attitude+0x36>
    802e:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    8032:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8036:	2200      	movs	r2, #0
    8038:	701a      	strb	r2, [r3, #0]
    if (count % 5 == 0) 
    803a:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    803e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8042:	781a      	ldrb	r2, [r3, #0]
    8044:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8048:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    804c:	fba3 1302 	umull	r1, r3, r3, r2
    8050:	0899      	lsrs	r1, r3, #2
    8052:	460b      	mov	r3, r1
    8054:	009b      	lsls	r3, r3, #2
    8056:	440b      	add	r3, r1
    8058:	1ad3      	subs	r3, r2, r3
    805a:	b2db      	uxtb	r3, r3
    805c:	2b00      	cmp	r3, #0
    805e:	f040 84c1 	bne.w	89e4 <send_attitude+0x9e0>
       PERIODIC_SEND_ATTITUDE(); 
    8062:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8066:	f2c2 0300 	movt	r3, #8192	; 0x2000
    806a:	781a      	ldrb	r2, [r3, #0]
    806c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8070:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8074:	781b      	ldrb	r3, [r3, #0]
    8076:	b2db      	uxtb	r3, r3
    8078:	429a      	cmp	r2, r3
    807a:	d313      	bcc.n	80a4 <send_attitude+0xa0>
    807c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8080:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8084:	781b      	ldrb	r3, [r3, #0]
    8086:	b2db      	uxtb	r3, r3
    8088:	461a      	mov	r2, r3
    808a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    808e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8092:	781b      	ldrb	r3, [r3, #0]
    8094:	1ad3      	subs	r3, r2, r3
    8096:	33ff      	adds	r3, #255	; 0xff
    8098:	2b10      	cmp	r3, #16
    809a:	bfd4      	ite	le
    809c:	2300      	movle	r3, #0
    809e:	2301      	movgt	r3, #1
    80a0:	b2db      	uxtb	r3, r3
    80a2:	e011      	b.n	80c8 <send_attitude+0xc4>
    80a4:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    80a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80ac:	781b      	ldrb	r3, [r3, #0]
    80ae:	b2db      	uxtb	r3, r3
    80b0:	461a      	mov	r2, r3
    80b2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    80b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80ba:	781b      	ldrb	r3, [r3, #0]
    80bc:	1ad3      	subs	r3, r2, r3
    80be:	2b10      	cmp	r3, #16
    80c0:	bfd4      	ite	le
    80c2:	2300      	movle	r3, #0
    80c4:	2301      	movgt	r3, #1
    80c6:	b2db      	uxtb	r3, r3
    80c8:	2b00      	cmp	r3, #0
    80ca:	f000 847f 	beq.w	89cc <send_attitude+0x9c8>
    80ce:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    80d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80d6:	781b      	ldrb	r3, [r3, #0]
    80d8:	461a      	mov	r2, r3
    80da:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    80de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80e2:	2105      	movs	r1, #5
    80e4:	5499      	strb	r1, [r3, r2]
    80e6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    80ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80ee:	781b      	ldrb	r3, [r3, #0]
    80f0:	3301      	adds	r3, #1
    80f2:	b2da      	uxtb	r2, r3
    80f4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    80f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80fc:	701a      	strb	r2, [r3, #0]
    80fe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8102:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8106:	781b      	ldrb	r3, [r3, #0]
    8108:	2bff      	cmp	r3, #255	; 0xff
    810a:	d105      	bne.n	8118 <send_attitude+0x114>
    810c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8110:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8114:	2200      	movs	r2, #0
    8116:	701a      	strb	r2, [r3, #0]
    8118:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    811c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8120:	781b      	ldrb	r3, [r3, #0]
    8122:	461a      	mov	r2, r3
    8124:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8128:	f2c2 0300 	movt	r3, #8192	; 0x2000
    812c:	2106      	movs	r1, #6
    812e:	5499      	strb	r1, [r3, r2]
    8130:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8134:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8138:	781b      	ldrb	r3, [r3, #0]
    813a:	3301      	adds	r3, #1
    813c:	b2da      	uxtb	r2, r3
    813e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8142:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8146:	701a      	strb	r2, [r3, #0]
    8148:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    814c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8150:	781b      	ldrb	r3, [r3, #0]
    8152:	2bff      	cmp	r3, #255	; 0xff
    8154:	d105      	bne.n	8162 <send_attitude+0x15e>
    8156:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    815a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    815e:	2200      	movs	r2, #0
    8160:	701a      	strb	r2, [r3, #0]
    8162:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8166:	f2c2 0300 	movt	r3, #8192	; 0x2000
    816a:	2206      	movs	r2, #6
    816c:	701a      	strb	r2, [r3, #0]
    816e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8172:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8176:	2206      	movs	r2, #6
    8178:	701a      	strb	r2, [r3, #0]
    817a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    817e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8182:	781b      	ldrb	r3, [r3, #0]
    8184:	461a      	mov	r2, r3
    8186:	f24b 0370 	movw	r3, #45168	; 0xb070
    818a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    818e:	7819      	ldrb	r1, [r3, #0]
    8190:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8194:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8198:	5499      	strb	r1, [r3, r2]
    819a:	f24b 0370 	movw	r3, #45168	; 0xb070
    819e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81a2:	781a      	ldrb	r2, [r3, #0]
    81a4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    81a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81ac:	781b      	ldrb	r3, [r3, #0]
    81ae:	4413      	add	r3, r2
    81b0:	b2da      	uxtb	r2, r3
    81b2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    81b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81ba:	701a      	strb	r2, [r3, #0]
    81bc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    81c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81c4:	781a      	ldrb	r2, [r3, #0]
    81c6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    81ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81ce:	781b      	ldrb	r3, [r3, #0]
    81d0:	4413      	add	r3, r2
    81d2:	b2da      	uxtb	r2, r3
    81d4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    81d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81dc:	701a      	strb	r2, [r3, #0]
    81de:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    81e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81e6:	781b      	ldrb	r3, [r3, #0]
    81e8:	3301      	adds	r3, #1
    81ea:	b2da      	uxtb	r2, r3
    81ec:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    81f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81f4:	701a      	strb	r2, [r3, #0]
    81f6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    81fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81fe:	781b      	ldrb	r3, [r3, #0]
    8200:	2bff      	cmp	r3, #255	; 0xff
    8202:	d105      	bne.n	8210 <send_attitude+0x20c>
    8204:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8208:	f2c2 0300 	movt	r3, #8192	; 0x2000
    820c:	2200      	movs	r2, #0
    820e:	701a      	strb	r2, [r3, #0]
    8210:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8214:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8218:	781b      	ldrb	r3, [r3, #0]
    821a:	461a      	mov	r2, r3
    821c:	f24b 0370 	movw	r3, #45168	; 0xb070
    8220:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8224:	7859      	ldrb	r1, [r3, #1]
    8226:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    822a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    822e:	5499      	strb	r1, [r3, r2]
    8230:	4bd1      	ldr	r3, [pc, #836]	; (8578 <send_attitude+0x574>)
    8232:	781a      	ldrb	r2, [r3, #0]
    8234:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8238:	f2c2 0300 	movt	r3, #8192	; 0x2000
    823c:	781b      	ldrb	r3, [r3, #0]
    823e:	4413      	add	r3, r2
    8240:	b2da      	uxtb	r2, r3
    8242:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8246:	f2c2 0300 	movt	r3, #8192	; 0x2000
    824a:	701a      	strb	r2, [r3, #0]
    824c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8250:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8254:	781a      	ldrb	r2, [r3, #0]
    8256:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    825a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    825e:	781b      	ldrb	r3, [r3, #0]
    8260:	4413      	add	r3, r2
    8262:	b2da      	uxtb	r2, r3
    8264:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8268:	f2c2 0300 	movt	r3, #8192	; 0x2000
    826c:	701a      	strb	r2, [r3, #0]
    826e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8272:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8276:	781b      	ldrb	r3, [r3, #0]
    8278:	3301      	adds	r3, #1
    827a:	b2da      	uxtb	r2, r3
    827c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8280:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8284:	701a      	strb	r2, [r3, #0]
    8286:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    828a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    828e:	781b      	ldrb	r3, [r3, #0]
    8290:	2bff      	cmp	r3, #255	; 0xff
    8292:	d105      	bne.n	82a0 <send_attitude+0x29c>
    8294:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8298:	f2c2 0300 	movt	r3, #8192	; 0x2000
    829c:	2200      	movs	r2, #0
    829e:	701a      	strb	r2, [r3, #0]
    82a0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    82a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82a8:	781b      	ldrb	r3, [r3, #0]
    82aa:	461a      	mov	r2, r3
    82ac:	f24b 0370 	movw	r3, #45168	; 0xb070
    82b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82b4:	7899      	ldrb	r1, [r3, #2]
    82b6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    82ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82be:	5499      	strb	r1, [r3, r2]
    82c0:	4bae      	ldr	r3, [pc, #696]	; (857c <send_attitude+0x578>)
    82c2:	781a      	ldrb	r2, [r3, #0]
    82c4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    82c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82cc:	781b      	ldrb	r3, [r3, #0]
    82ce:	4413      	add	r3, r2
    82d0:	b2da      	uxtb	r2, r3
    82d2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    82d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82da:	701a      	strb	r2, [r3, #0]
    82dc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    82e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82e4:	781a      	ldrb	r2, [r3, #0]
    82e6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    82ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82ee:	781b      	ldrb	r3, [r3, #0]
    82f0:	4413      	add	r3, r2
    82f2:	b2da      	uxtb	r2, r3
    82f4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    82f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82fc:	701a      	strb	r2, [r3, #0]
    82fe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8302:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8306:	781b      	ldrb	r3, [r3, #0]
    8308:	3301      	adds	r3, #1
    830a:	b2da      	uxtb	r2, r3
    830c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8310:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8314:	701a      	strb	r2, [r3, #0]
    8316:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    831a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    831e:	781b      	ldrb	r3, [r3, #0]
    8320:	2bff      	cmp	r3, #255	; 0xff
    8322:	d105      	bne.n	8330 <send_attitude+0x32c>
    8324:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8328:	f2c2 0300 	movt	r3, #8192	; 0x2000
    832c:	2200      	movs	r2, #0
    832e:	701a      	strb	r2, [r3, #0]
    8330:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8334:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8338:	781b      	ldrb	r3, [r3, #0]
    833a:	461a      	mov	r2, r3
    833c:	f24b 0370 	movw	r3, #45168	; 0xb070
    8340:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8344:	78d9      	ldrb	r1, [r3, #3]
    8346:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    834a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    834e:	5499      	strb	r1, [r3, r2]
    8350:	4b8b      	ldr	r3, [pc, #556]	; (8580 <send_attitude+0x57c>)
    8352:	781a      	ldrb	r2, [r3, #0]
    8354:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8358:	f2c2 0300 	movt	r3, #8192	; 0x2000
    835c:	781b      	ldrb	r3, [r3, #0]
    835e:	4413      	add	r3, r2
    8360:	b2da      	uxtb	r2, r3
    8362:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8366:	f2c2 0300 	movt	r3, #8192	; 0x2000
    836a:	701a      	strb	r2, [r3, #0]
    836c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8370:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8374:	781a      	ldrb	r2, [r3, #0]
    8376:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    837a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    837e:	781b      	ldrb	r3, [r3, #0]
    8380:	4413      	add	r3, r2
    8382:	b2da      	uxtb	r2, r3
    8384:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8388:	f2c2 0300 	movt	r3, #8192	; 0x2000
    838c:	701a      	strb	r2, [r3, #0]
    838e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8392:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8396:	781b      	ldrb	r3, [r3, #0]
    8398:	3301      	adds	r3, #1
    839a:	b2da      	uxtb	r2, r3
    839c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    83a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83a4:	701a      	strb	r2, [r3, #0]
    83a6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    83aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83ae:	781b      	ldrb	r3, [r3, #0]
    83b0:	2bff      	cmp	r3, #255	; 0xff
    83b2:	d105      	bne.n	83c0 <send_attitude+0x3bc>
    83b4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    83b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83bc:	2200      	movs	r2, #0
    83be:	701a      	strb	r2, [r3, #0]
    83c0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    83c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83c8:	781b      	ldrb	r3, [r3, #0]
    83ca:	461a      	mov	r2, r3
    83cc:	f24b 0374 	movw	r3, #45172	; 0xb074
    83d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83d4:	7819      	ldrb	r1, [r3, #0]
    83d6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    83da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83de:	5499      	strb	r1, [r3, r2]
    83e0:	f24b 0374 	movw	r3, #45172	; 0xb074
    83e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83e8:	781a      	ldrb	r2, [r3, #0]
    83ea:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    83ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83f2:	781b      	ldrb	r3, [r3, #0]
    83f4:	4413      	add	r3, r2
    83f6:	b2da      	uxtb	r2, r3
    83f8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    83fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8400:	701a      	strb	r2, [r3, #0]
    8402:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8406:	f2c2 0300 	movt	r3, #8192	; 0x2000
    840a:	781a      	ldrb	r2, [r3, #0]
    840c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8410:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8414:	781b      	ldrb	r3, [r3, #0]
    8416:	4413      	add	r3, r2
    8418:	b2da      	uxtb	r2, r3
    841a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    841e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8422:	701a      	strb	r2, [r3, #0]
    8424:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8428:	f2c2 0300 	movt	r3, #8192	; 0x2000
    842c:	781b      	ldrb	r3, [r3, #0]
    842e:	3301      	adds	r3, #1
    8430:	b2da      	uxtb	r2, r3
    8432:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8436:	f2c2 0300 	movt	r3, #8192	; 0x2000
    843a:	701a      	strb	r2, [r3, #0]
    843c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8440:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8444:	781b      	ldrb	r3, [r3, #0]
    8446:	2bff      	cmp	r3, #255	; 0xff
    8448:	d105      	bne.n	8456 <send_attitude+0x452>
    844a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    844e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8452:	2200      	movs	r2, #0
    8454:	701a      	strb	r2, [r3, #0]
    8456:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    845a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    845e:	781b      	ldrb	r3, [r3, #0]
    8460:	461a      	mov	r2, r3
    8462:	f24b 0374 	movw	r3, #45172	; 0xb074
    8466:	f2c2 0300 	movt	r3, #8192	; 0x2000
    846a:	7859      	ldrb	r1, [r3, #1]
    846c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8470:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8474:	5499      	strb	r1, [r3, r2]
    8476:	4b43      	ldr	r3, [pc, #268]	; (8584 <send_attitude+0x580>)
    8478:	781a      	ldrb	r2, [r3, #0]
    847a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    847e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8482:	781b      	ldrb	r3, [r3, #0]
    8484:	4413      	add	r3, r2
    8486:	b2da      	uxtb	r2, r3
    8488:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    848c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8490:	701a      	strb	r2, [r3, #0]
    8492:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8496:	f2c2 0300 	movt	r3, #8192	; 0x2000
    849a:	781a      	ldrb	r2, [r3, #0]
    849c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    84a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84a4:	781b      	ldrb	r3, [r3, #0]
    84a6:	4413      	add	r3, r2
    84a8:	b2da      	uxtb	r2, r3
    84aa:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    84ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84b2:	701a      	strb	r2, [r3, #0]
    84b4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    84b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84bc:	781b      	ldrb	r3, [r3, #0]
    84be:	3301      	adds	r3, #1
    84c0:	b2da      	uxtb	r2, r3
    84c2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    84c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84ca:	701a      	strb	r2, [r3, #0]
    84cc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    84d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84d4:	781b      	ldrb	r3, [r3, #0]
    84d6:	2bff      	cmp	r3, #255	; 0xff
    84d8:	d105      	bne.n	84e6 <send_attitude+0x4e2>
    84da:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    84de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84e2:	2200      	movs	r2, #0
    84e4:	701a      	strb	r2, [r3, #0]
    84e6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    84ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84ee:	781b      	ldrb	r3, [r3, #0]
    84f0:	461a      	mov	r2, r3
    84f2:	f24b 0374 	movw	r3, #45172	; 0xb074
    84f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84fa:	7899      	ldrb	r1, [r3, #2]
    84fc:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8500:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8504:	5499      	strb	r1, [r3, r2]
    8506:	4b20      	ldr	r3, [pc, #128]	; (8588 <send_attitude+0x584>)
    8508:	781a      	ldrb	r2, [r3, #0]
    850a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    850e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8512:	781b      	ldrb	r3, [r3, #0]
    8514:	4413      	add	r3, r2
    8516:	b2da      	uxtb	r2, r3
    8518:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    851c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8520:	701a      	strb	r2, [r3, #0]
    8522:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8526:	f2c2 0300 	movt	r3, #8192	; 0x2000
    852a:	781a      	ldrb	r2, [r3, #0]
    852c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8530:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8534:	781b      	ldrb	r3, [r3, #0]
    8536:	4413      	add	r3, r2
    8538:	b2da      	uxtb	r2, r3
    853a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    853e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8542:	701a      	strb	r2, [r3, #0]
    8544:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8548:	f2c2 0300 	movt	r3, #8192	; 0x2000
    854c:	781b      	ldrb	r3, [r3, #0]
    854e:	3301      	adds	r3, #1
    8550:	b2da      	uxtb	r2, r3
    8552:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8556:	f2c2 0300 	movt	r3, #8192	; 0x2000
    855a:	701a      	strb	r2, [r3, #0]
    855c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8560:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8564:	781b      	ldrb	r3, [r3, #0]
    8566:	2bff      	cmp	r3, #255	; 0xff
    8568:	d110      	bne.n	858c <send_attitude+0x588>
    856a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    856e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8572:	2200      	movs	r2, #0
    8574:	701a      	strb	r2, [r3, #0]
    8576:	e009      	b.n	858c <send_attitude+0x588>
    8578:	2000b071 	.word	0x2000b071
    857c:	2000b072 	.word	0x2000b072
    8580:	2000b073 	.word	0x2000b073
    8584:	2000b075 	.word	0x2000b075
    8588:	2000b076 	.word	0x2000b076
    858c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8590:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8594:	781b      	ldrb	r3, [r3, #0]
    8596:	461a      	mov	r2, r3
    8598:	f24b 0374 	movw	r3, #45172	; 0xb074
    859c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85a0:	78d9      	ldrb	r1, [r3, #3]
    85a2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    85a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85aa:	5499      	strb	r1, [r3, r2]
    85ac:	4bc2      	ldr	r3, [pc, #776]	; (88b8 <send_attitude+0x8b4>)
    85ae:	781a      	ldrb	r2, [r3, #0]
    85b0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    85b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85b8:	781b      	ldrb	r3, [r3, #0]
    85ba:	4413      	add	r3, r2
    85bc:	b2da      	uxtb	r2, r3
    85be:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    85c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85c6:	701a      	strb	r2, [r3, #0]
    85c8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    85cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85d0:	781a      	ldrb	r2, [r3, #0]
    85d2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    85d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85da:	781b      	ldrb	r3, [r3, #0]
    85dc:	4413      	add	r3, r2
    85de:	b2da      	uxtb	r2, r3
    85e0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    85e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85e8:	701a      	strb	r2, [r3, #0]
    85ea:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    85ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85f2:	781b      	ldrb	r3, [r3, #0]
    85f4:	3301      	adds	r3, #1
    85f6:	b2da      	uxtb	r2, r3
    85f8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    85fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8600:	701a      	strb	r2, [r3, #0]
    8602:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8606:	f2c2 0300 	movt	r3, #8192	; 0x2000
    860a:	781b      	ldrb	r3, [r3, #0]
    860c:	2bff      	cmp	r3, #255	; 0xff
    860e:	d105      	bne.n	861c <send_attitude+0x618>
    8610:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8614:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8618:	2200      	movs	r2, #0
    861a:	701a      	strb	r2, [r3, #0]
    861c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8620:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8624:	781b      	ldrb	r3, [r3, #0]
    8626:	461a      	mov	r2, r3
    8628:	f24b 0378 	movw	r3, #45176	; 0xb078
    862c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8630:	7819      	ldrb	r1, [r3, #0]
    8632:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8636:	f2c2 0300 	movt	r3, #8192	; 0x2000
    863a:	5499      	strb	r1, [r3, r2]
    863c:	f24b 0378 	movw	r3, #45176	; 0xb078
    8640:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8644:	781a      	ldrb	r2, [r3, #0]
    8646:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    864a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    864e:	781b      	ldrb	r3, [r3, #0]
    8650:	4413      	add	r3, r2
    8652:	b2da      	uxtb	r2, r3
    8654:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8658:	f2c2 0300 	movt	r3, #8192	; 0x2000
    865c:	701a      	strb	r2, [r3, #0]
    865e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8666:	781a      	ldrb	r2, [r3, #0]
    8668:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    866c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8670:	781b      	ldrb	r3, [r3, #0]
    8672:	4413      	add	r3, r2
    8674:	b2da      	uxtb	r2, r3
    8676:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    867a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    867e:	701a      	strb	r2, [r3, #0]
    8680:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8684:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8688:	781b      	ldrb	r3, [r3, #0]
    868a:	3301      	adds	r3, #1
    868c:	b2da      	uxtb	r2, r3
    868e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8696:	701a      	strb	r2, [r3, #0]
    8698:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    869c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86a0:	781b      	ldrb	r3, [r3, #0]
    86a2:	2bff      	cmp	r3, #255	; 0xff
    86a4:	d105      	bne.n	86b2 <send_attitude+0x6ae>
    86a6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    86aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86ae:	2200      	movs	r2, #0
    86b0:	701a      	strb	r2, [r3, #0]
    86b2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    86b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86ba:	781b      	ldrb	r3, [r3, #0]
    86bc:	461a      	mov	r2, r3
    86be:	f24b 0378 	movw	r3, #45176	; 0xb078
    86c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86c6:	7859      	ldrb	r1, [r3, #1]
    86c8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    86cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86d0:	5499      	strb	r1, [r3, r2]
    86d2:	4b7a      	ldr	r3, [pc, #488]	; (88bc <send_attitude+0x8b8>)
    86d4:	781a      	ldrb	r2, [r3, #0]
    86d6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    86da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86de:	781b      	ldrb	r3, [r3, #0]
    86e0:	4413      	add	r3, r2
    86e2:	b2da      	uxtb	r2, r3
    86e4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    86e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86ec:	701a      	strb	r2, [r3, #0]
    86ee:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    86f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86f6:	781a      	ldrb	r2, [r3, #0]
    86f8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    86fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8700:	781b      	ldrb	r3, [r3, #0]
    8702:	4413      	add	r3, r2
    8704:	b2da      	uxtb	r2, r3
    8706:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    870a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    870e:	701a      	strb	r2, [r3, #0]
    8710:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8714:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8718:	781b      	ldrb	r3, [r3, #0]
    871a:	3301      	adds	r3, #1
    871c:	b2da      	uxtb	r2, r3
    871e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8722:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8726:	701a      	strb	r2, [r3, #0]
    8728:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    872c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8730:	781b      	ldrb	r3, [r3, #0]
    8732:	2bff      	cmp	r3, #255	; 0xff
    8734:	d105      	bne.n	8742 <send_attitude+0x73e>
    8736:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    873a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    873e:	2200      	movs	r2, #0
    8740:	701a      	strb	r2, [r3, #0]
    8742:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8746:	f2c2 0300 	movt	r3, #8192	; 0x2000
    874a:	781b      	ldrb	r3, [r3, #0]
    874c:	461a      	mov	r2, r3
    874e:	f24b 0378 	movw	r3, #45176	; 0xb078
    8752:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8756:	7899      	ldrb	r1, [r3, #2]
    8758:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    875c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8760:	5499      	strb	r1, [r3, r2]
    8762:	4b57      	ldr	r3, [pc, #348]	; (88c0 <send_attitude+0x8bc>)
    8764:	781a      	ldrb	r2, [r3, #0]
    8766:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    876a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    876e:	781b      	ldrb	r3, [r3, #0]
    8770:	4413      	add	r3, r2
    8772:	b2da      	uxtb	r2, r3
    8774:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8778:	f2c2 0300 	movt	r3, #8192	; 0x2000
    877c:	701a      	strb	r2, [r3, #0]
    877e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8782:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8786:	781a      	ldrb	r2, [r3, #0]
    8788:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    878c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8790:	781b      	ldrb	r3, [r3, #0]
    8792:	4413      	add	r3, r2
    8794:	b2da      	uxtb	r2, r3
    8796:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    879a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    879e:	701a      	strb	r2, [r3, #0]
    87a0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    87a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87a8:	781b      	ldrb	r3, [r3, #0]
    87aa:	3301      	adds	r3, #1
    87ac:	b2da      	uxtb	r2, r3
    87ae:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    87b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87b6:	701a      	strb	r2, [r3, #0]
    87b8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    87bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87c0:	781b      	ldrb	r3, [r3, #0]
    87c2:	2bff      	cmp	r3, #255	; 0xff
    87c4:	d105      	bne.n	87d2 <send_attitude+0x7ce>
    87c6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    87ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87ce:	2200      	movs	r2, #0
    87d0:	701a      	strb	r2, [r3, #0]
    87d2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    87d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87da:	781b      	ldrb	r3, [r3, #0]
    87dc:	461a      	mov	r2, r3
    87de:	f24b 0378 	movw	r3, #45176	; 0xb078
    87e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87e6:	78d9      	ldrb	r1, [r3, #3]
    87e8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    87ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87f0:	5499      	strb	r1, [r3, r2]
    87f2:	4b34      	ldr	r3, [pc, #208]	; (88c4 <send_attitude+0x8c0>)
    87f4:	781a      	ldrb	r2, [r3, #0]
    87f6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    87fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87fe:	781b      	ldrb	r3, [r3, #0]
    8800:	4413      	add	r3, r2
    8802:	b2da      	uxtb	r2, r3
    8804:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8808:	f2c2 0300 	movt	r3, #8192	; 0x2000
    880c:	701a      	strb	r2, [r3, #0]
    880e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8816:	781a      	ldrb	r2, [r3, #0]
    8818:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    881c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8820:	781b      	ldrb	r3, [r3, #0]
    8822:	4413      	add	r3, r2
    8824:	b2da      	uxtb	r2, r3
    8826:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    882a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    882e:	701a      	strb	r2, [r3, #0]
    8830:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8834:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8838:	781b      	ldrb	r3, [r3, #0]
    883a:	3301      	adds	r3, #1
    883c:	b2da      	uxtb	r2, r3
    883e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8842:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8846:	701a      	strb	r2, [r3, #0]
    8848:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    884c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8850:	781b      	ldrb	r3, [r3, #0]
    8852:	2bff      	cmp	r3, #255	; 0xff
    8854:	d105      	bne.n	8862 <send_attitude+0x85e>
    8856:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    885a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    885e:	2200      	movs	r2, #0
    8860:	701a      	strb	r2, [r3, #0]
    8862:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8866:	f2c2 0300 	movt	r3, #8192	; 0x2000
    886a:	781b      	ldrb	r3, [r3, #0]
    886c:	461a      	mov	r2, r3
    886e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8872:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8876:	7819      	ldrb	r1, [r3, #0]
    8878:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    887c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8880:	5499      	strb	r1, [r3, r2]
    8882:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8886:	f2c2 0300 	movt	r3, #8192	; 0x2000
    888a:	781b      	ldrb	r3, [r3, #0]
    888c:	3301      	adds	r3, #1
    888e:	b2da      	uxtb	r2, r3
    8890:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8894:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8898:	701a      	strb	r2, [r3, #0]
    889a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    889e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88a2:	781b      	ldrb	r3, [r3, #0]
    88a4:	2bff      	cmp	r3, #255	; 0xff
    88a6:	d10f      	bne.n	88c8 <send_attitude+0x8c4>
    88a8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    88ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88b0:	2200      	movs	r2, #0
    88b2:	701a      	strb	r2, [r3, #0]
    88b4:	e008      	b.n	88c8 <send_attitude+0x8c4>
    88b6:	bf00      	nop
    88b8:	2000b077 	.word	0x2000b077
    88bc:	2000b079 	.word	0x2000b079
    88c0:	2000b07a 	.word	0x2000b07a
    88c4:	2000b07b 	.word	0x2000b07b
    88c8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    88cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88d0:	781b      	ldrb	r3, [r3, #0]
    88d2:	461a      	mov	r2, r3
    88d4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    88d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88dc:	7819      	ldrb	r1, [r3, #0]
    88de:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    88e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88e6:	5499      	strb	r1, [r3, r2]
    88e8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    88ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88f0:	781b      	ldrb	r3, [r3, #0]
    88f2:	3301      	adds	r3, #1
    88f4:	b2da      	uxtb	r2, r3
    88f6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    88fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88fe:	701a      	strb	r2, [r3, #0]
    8900:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8904:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8908:	781b      	ldrb	r3, [r3, #0]
    890a:	2bff      	cmp	r3, #255	; 0xff
    890c:	d105      	bne.n	891a <send_attitude+0x916>
    890e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8916:	2200      	movs	r2, #0
    8918:	701a      	strb	r2, [r3, #0]
    891a:	f242 0339 	movw	r3, #8249	; 0x2039
    891e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8922:	781b      	ldrb	r3, [r3, #0]
    8924:	b2db      	uxtb	r3, r3
    8926:	f003 0310 	and.w	r3, r3, #16
    892a:	2b00      	cmp	r3, #0
    892c:	d15a      	bne.n	89e4 <send_attitude+0x9e0>
    892e:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8932:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8936:	781b      	ldrb	r3, [r3, #0]
    8938:	b2db      	uxtb	r3, r3
    893a:	461a      	mov	r2, r3
    893c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8940:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8944:	5c9a      	ldrb	r2, [r3, r2]
    8946:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    894a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    894e:	701a      	strb	r2, [r3, #0]
    8950:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    8954:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8958:	2200      	movs	r2, #0
    895a:	701a      	strb	r2, [r3, #0]
    895c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8960:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8964:	781b      	ldrb	r3, [r3, #0]
    8966:	b2db      	uxtb	r3, r3
    8968:	3301      	adds	r3, #1
    896a:	b2da      	uxtb	r2, r3
    896c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8970:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8974:	701a      	strb	r2, [r3, #0]
    8976:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    897a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    897e:	781b      	ldrb	r3, [r3, #0]
    8980:	b2db      	uxtb	r3, r3
    8982:	2bff      	cmp	r3, #255	; 0xff
    8984:	d105      	bne.n	8992 <send_attitude+0x98e>
    8986:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    898a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    898e:	2200      	movs	r2, #0
    8990:	701a      	strb	r2, [r3, #0]
    8992:	f242 0338 	movw	r3, #8248	; 0x2038
    8996:	f2c2 0300 	movt	r3, #8192	; 0x2000
    899a:	f242 0238 	movw	r2, #8248	; 0x2038
    899e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    89a2:	7812      	ldrb	r2, [r2, #0]
    89a4:	b2d2      	uxtb	r2, r2
    89a6:	f042 0201 	orr.w	r2, r2, #1
    89aa:	b2d2      	uxtb	r2, r2
    89ac:	701a      	strb	r2, [r3, #0]
    89ae:	f242 0339 	movw	r3, #8249	; 0x2039
    89b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89b6:	f242 0239 	movw	r2, #8249	; 0x2039
    89ba:	f2c2 0200 	movt	r2, #8192	; 0x2000
    89be:	7812      	ldrb	r2, [r2, #0]
    89c0:	b2d2      	uxtb	r2, r2
    89c2:	f042 0210 	orr.w	r2, r2, #16
    89c6:	b2d2      	uxtb	r2, r2
    89c8:	701a      	strb	r2, [r3, #0]
    89ca:	e00b      	b.n	89e4 <send_attitude+0x9e0>
    89cc:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    89d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89d4:	781b      	ldrb	r3, [r3, #0]
    89d6:	3301      	adds	r3, #1
    89d8:	b2da      	uxtb	r2, r3
    89da:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    89de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89e2:	701a      	strb	r2, [r3, #0]
  }
}
    89e4:	46bd      	mov	sp, r7
    89e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    89ea:	4770      	bx	lr

000089ec <send_adc>:
  
void send_adc(void){  //500ms
    89ec:	b480      	push	{r7}
    89ee:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 5 == 1) PERIODIC_SEND_ADC();}
    89f0:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    89f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89f8:	781a      	ldrb	r2, [r3, #0]
    89fa:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    89fe:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8a02:	fba3 1302 	umull	r1, r3, r3, r2
    8a06:	0899      	lsrs	r1, r3, #2
    8a08:	460b      	mov	r3, r1
    8a0a:	009b      	lsls	r3, r3, #2
    8a0c:	440b      	add	r3, r1
    8a0e:	1ad3      	subs	r3, r2, r3
    8a10:	b2db      	uxtb	r3, r3
    8a12:	2b01      	cmp	r3, #1
    8a14:	f040 8269 	bne.w	8eea <send_adc+0x4fe>
    8a18:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8a1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a20:	781a      	ldrb	r2, [r3, #0]
    8a22:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8a26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a2a:	781b      	ldrb	r3, [r3, #0]
    8a2c:	b2db      	uxtb	r3, r3
    8a2e:	429a      	cmp	r2, r3
    8a30:	d313      	bcc.n	8a5a <send_adc+0x6e>
    8a32:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8a36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a3a:	781b      	ldrb	r3, [r3, #0]
    8a3c:	b2db      	uxtb	r3, r3
    8a3e:	461a      	mov	r2, r3
    8a40:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8a44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a48:	781b      	ldrb	r3, [r3, #0]
    8a4a:	1ad3      	subs	r3, r2, r3
    8a4c:	33ff      	adds	r3, #255	; 0xff
    8a4e:	2b08      	cmp	r3, #8
    8a50:	bfd4      	ite	le
    8a52:	2300      	movle	r3, #0
    8a54:	2301      	movgt	r3, #1
    8a56:	b2db      	uxtb	r3, r3
    8a58:	e011      	b.n	8a7e <send_adc+0x92>
    8a5a:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a62:	781b      	ldrb	r3, [r3, #0]
    8a64:	b2db      	uxtb	r3, r3
    8a66:	461a      	mov	r2, r3
    8a68:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8a6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a70:	781b      	ldrb	r3, [r3, #0]
    8a72:	1ad3      	subs	r3, r2, r3
    8a74:	2b08      	cmp	r3, #8
    8a76:	bfd4      	ite	le
    8a78:	2300      	movle	r3, #0
    8a7a:	2301      	movgt	r3, #1
    8a7c:	b2db      	uxtb	r3, r3
    8a7e:	2b00      	cmp	r3, #0
    8a80:	f000 8227 	beq.w	8ed2 <send_adc+0x4e6>
    8a84:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8a88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a8c:	781b      	ldrb	r3, [r3, #0]
    8a8e:	461a      	mov	r2, r3
    8a90:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8a94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a98:	2105      	movs	r1, #5
    8a9a:	5499      	strb	r1, [r3, r2]
    8a9c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8aa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8aa4:	781b      	ldrb	r3, [r3, #0]
    8aa6:	3301      	adds	r3, #1
    8aa8:	b2da      	uxtb	r2, r3
    8aaa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8aae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ab2:	701a      	strb	r2, [r3, #0]
    8ab4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8ab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8abc:	781b      	ldrb	r3, [r3, #0]
    8abe:	2bff      	cmp	r3, #255	; 0xff
    8ac0:	d105      	bne.n	8ace <send_adc+0xe2>
    8ac2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8ac6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8aca:	2200      	movs	r2, #0
    8acc:	701a      	strb	r2, [r3, #0]
    8ace:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8ad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ad6:	781b      	ldrb	r3, [r3, #0]
    8ad8:	461a      	mov	r2, r3
    8ada:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8ade:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ae2:	2107      	movs	r1, #7
    8ae4:	5499      	strb	r1, [r3, r2]
    8ae6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8aea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8aee:	781b      	ldrb	r3, [r3, #0]
    8af0:	3301      	adds	r3, #1
    8af2:	b2da      	uxtb	r2, r3
    8af4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8af8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8afc:	701a      	strb	r2, [r3, #0]
    8afe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8b02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b06:	781b      	ldrb	r3, [r3, #0]
    8b08:	2bff      	cmp	r3, #255	; 0xff
    8b0a:	d105      	bne.n	8b18 <send_adc+0x12c>
    8b0c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8b10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b14:	2200      	movs	r2, #0
    8b16:	701a      	strb	r2, [r3, #0]
    8b18:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8b1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b20:	2207      	movs	r2, #7
    8b22:	701a      	strb	r2, [r3, #0]
    8b24:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8b28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b2c:	2207      	movs	r2, #7
    8b2e:	701a      	strb	r2, [r3, #0]
    8b30:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b38:	781b      	ldrb	r3, [r3, #0]
    8b3a:	461a      	mov	r2, r3
    8b3c:	f64a 5350 	movw	r3, #44368	; 0xad50
    8b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b44:	7819      	ldrb	r1, [r3, #0]
    8b46:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8b4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b4e:	5499      	strb	r1, [r3, r2]
    8b50:	f64a 5350 	movw	r3, #44368	; 0xad50
    8b54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b58:	781a      	ldrb	r2, [r3, #0]
    8b5a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8b5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b62:	781b      	ldrb	r3, [r3, #0]
    8b64:	4413      	add	r3, r2
    8b66:	b2da      	uxtb	r2, r3
    8b68:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8b6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b70:	701a      	strb	r2, [r3, #0]
    8b72:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8b76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b7a:	781a      	ldrb	r2, [r3, #0]
    8b7c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8b80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b84:	781b      	ldrb	r3, [r3, #0]
    8b86:	4413      	add	r3, r2
    8b88:	b2da      	uxtb	r2, r3
    8b8a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b92:	701a      	strb	r2, [r3, #0]
    8b94:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b9c:	781b      	ldrb	r3, [r3, #0]
    8b9e:	3301      	adds	r3, #1
    8ba0:	b2da      	uxtb	r2, r3
    8ba2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8baa:	701a      	strb	r2, [r3, #0]
    8bac:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8bb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bb4:	781b      	ldrb	r3, [r3, #0]
    8bb6:	2bff      	cmp	r3, #255	; 0xff
    8bb8:	d105      	bne.n	8bc6 <send_adc+0x1da>
    8bba:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bc2:	2200      	movs	r2, #0
    8bc4:	701a      	strb	r2, [r3, #0]
    8bc6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8bca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bce:	781b      	ldrb	r3, [r3, #0]
    8bd0:	461a      	mov	r2, r3
    8bd2:	f64a 5350 	movw	r3, #44368	; 0xad50
    8bd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bda:	7859      	ldrb	r1, [r3, #1]
    8bdc:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8be4:	5499      	strb	r1, [r3, r2]
    8be6:	4bc3      	ldr	r3, [pc, #780]	; (8ef4 <send_adc+0x508>)
    8be8:	781a      	ldrb	r2, [r3, #0]
    8bea:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8bee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bf2:	781b      	ldrb	r3, [r3, #0]
    8bf4:	4413      	add	r3, r2
    8bf6:	b2da      	uxtb	r2, r3
    8bf8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8bfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c00:	701a      	strb	r2, [r3, #0]
    8c02:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8c06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c0a:	781a      	ldrb	r2, [r3, #0]
    8c0c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8c10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c14:	781b      	ldrb	r3, [r3, #0]
    8c16:	4413      	add	r3, r2
    8c18:	b2da      	uxtb	r2, r3
    8c1a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8c1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c22:	701a      	strb	r2, [r3, #0]
    8c24:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8c28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c2c:	781b      	ldrb	r3, [r3, #0]
    8c2e:	3301      	adds	r3, #1
    8c30:	b2da      	uxtb	r2, r3
    8c32:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8c36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c3a:	701a      	strb	r2, [r3, #0]
    8c3c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c44:	781b      	ldrb	r3, [r3, #0]
    8c46:	2bff      	cmp	r3, #255	; 0xff
    8c48:	d105      	bne.n	8c56 <send_adc+0x26a>
    8c4a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8c4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c52:	2200      	movs	r2, #0
    8c54:	701a      	strb	r2, [r3, #0]
    8c56:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8c5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c5e:	781b      	ldrb	r3, [r3, #0]
    8c60:	461a      	mov	r2, r3
    8c62:	f64a 5352 	movw	r3, #44370	; 0xad52
    8c66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c6a:	7819      	ldrb	r1, [r3, #0]
    8c6c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8c70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c74:	5499      	strb	r1, [r3, r2]
    8c76:	f64a 5352 	movw	r3, #44370	; 0xad52
    8c7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c7e:	781a      	ldrb	r2, [r3, #0]
    8c80:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c88:	781b      	ldrb	r3, [r3, #0]
    8c8a:	4413      	add	r3, r2
    8c8c:	b2da      	uxtb	r2, r3
    8c8e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8c92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c96:	701a      	strb	r2, [r3, #0]
    8c98:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ca0:	781a      	ldrb	r2, [r3, #0]
    8ca2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8ca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8caa:	781b      	ldrb	r3, [r3, #0]
    8cac:	4413      	add	r3, r2
    8cae:	b2da      	uxtb	r2, r3
    8cb0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8cb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cb8:	701a      	strb	r2, [r3, #0]
    8cba:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8cbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cc2:	781b      	ldrb	r3, [r3, #0]
    8cc4:	3301      	adds	r3, #1
    8cc6:	b2da      	uxtb	r2, r3
    8cc8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8ccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cd0:	701a      	strb	r2, [r3, #0]
    8cd2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8cd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cda:	781b      	ldrb	r3, [r3, #0]
    8cdc:	2bff      	cmp	r3, #255	; 0xff
    8cde:	d105      	bne.n	8cec <send_adc+0x300>
    8ce0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ce8:	2200      	movs	r2, #0
    8cea:	701a      	strb	r2, [r3, #0]
    8cec:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8cf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cf4:	781b      	ldrb	r3, [r3, #0]
    8cf6:	461a      	mov	r2, r3
    8cf8:	f64a 5352 	movw	r3, #44370	; 0xad52
    8cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d00:	7859      	ldrb	r1, [r3, #1]
    8d02:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8d06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d0a:	5499      	strb	r1, [r3, r2]
    8d0c:	4b7a      	ldr	r3, [pc, #488]	; (8ef8 <send_adc+0x50c>)
    8d0e:	781a      	ldrb	r2, [r3, #0]
    8d10:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d18:	781b      	ldrb	r3, [r3, #0]
    8d1a:	4413      	add	r3, r2
    8d1c:	b2da      	uxtb	r2, r3
    8d1e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8d22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d26:	701a      	strb	r2, [r3, #0]
    8d28:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8d2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d30:	781a      	ldrb	r2, [r3, #0]
    8d32:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d3a:	781b      	ldrb	r3, [r3, #0]
    8d3c:	4413      	add	r3, r2
    8d3e:	b2da      	uxtb	r2, r3
    8d40:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d48:	701a      	strb	r2, [r3, #0]
    8d4a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8d4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d52:	781b      	ldrb	r3, [r3, #0]
    8d54:	3301      	adds	r3, #1
    8d56:	b2da      	uxtb	r2, r3
    8d58:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8d5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d60:	701a      	strb	r2, [r3, #0]
    8d62:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8d66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d6a:	781b      	ldrb	r3, [r3, #0]
    8d6c:	2bff      	cmp	r3, #255	; 0xff
    8d6e:	d105      	bne.n	8d7c <send_adc+0x390>
    8d70:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8d74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d78:	2200      	movs	r2, #0
    8d7a:	701a      	strb	r2, [r3, #0]
    8d7c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8d80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d84:	781b      	ldrb	r3, [r3, #0]
    8d86:	461a      	mov	r2, r3
    8d88:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    8d8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d90:	7819      	ldrb	r1, [r3, #0]
    8d92:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d9a:	5499      	strb	r1, [r3, r2]
    8d9c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8da0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8da4:	781b      	ldrb	r3, [r3, #0]
    8da6:	3301      	adds	r3, #1
    8da8:	b2da      	uxtb	r2, r3
    8daa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8dae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8db2:	701a      	strb	r2, [r3, #0]
    8db4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8db8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dbc:	781b      	ldrb	r3, [r3, #0]
    8dbe:	2bff      	cmp	r3, #255	; 0xff
    8dc0:	d105      	bne.n	8dce <send_adc+0x3e2>
    8dc2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8dc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dca:	2200      	movs	r2, #0
    8dcc:	701a      	strb	r2, [r3, #0]
    8dce:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8dd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dd6:	781b      	ldrb	r3, [r3, #0]
    8dd8:	461a      	mov	r2, r3
    8dda:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    8dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8de2:	7819      	ldrb	r1, [r3, #0]
    8de4:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8de8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dec:	5499      	strb	r1, [r3, r2]
    8dee:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8df2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8df6:	781b      	ldrb	r3, [r3, #0]
    8df8:	3301      	adds	r3, #1
    8dfa:	b2da      	uxtb	r2, r3
    8dfc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8e00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e04:	701a      	strb	r2, [r3, #0]
    8e06:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e0e:	781b      	ldrb	r3, [r3, #0]
    8e10:	2bff      	cmp	r3, #255	; 0xff
    8e12:	d105      	bne.n	8e20 <send_adc+0x434>
    8e14:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8e18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e1c:	2200      	movs	r2, #0
    8e1e:	701a      	strb	r2, [r3, #0]
    8e20:	f242 0339 	movw	r3, #8249	; 0x2039
    8e24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e28:	781b      	ldrb	r3, [r3, #0]
    8e2a:	b2db      	uxtb	r3, r3
    8e2c:	f003 0310 	and.w	r3, r3, #16
    8e30:	2b00      	cmp	r3, #0
    8e32:	d15a      	bne.n	8eea <send_adc+0x4fe>
    8e34:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8e38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e3c:	781b      	ldrb	r3, [r3, #0]
    8e3e:	b2db      	uxtb	r3, r3
    8e40:	461a      	mov	r2, r3
    8e42:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8e46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e4a:	5c9a      	ldrb	r2, [r3, r2]
    8e4c:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    8e50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e54:	701a      	strb	r2, [r3, #0]
    8e56:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    8e5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e5e:	2200      	movs	r2, #0
    8e60:	701a      	strb	r2, [r3, #0]
    8e62:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8e66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e6a:	781b      	ldrb	r3, [r3, #0]
    8e6c:	b2db      	uxtb	r3, r3
    8e6e:	3301      	adds	r3, #1
    8e70:	b2da      	uxtb	r2, r3
    8e72:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8e76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e7a:	701a      	strb	r2, [r3, #0]
    8e7c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8e80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e84:	781b      	ldrb	r3, [r3, #0]
    8e86:	b2db      	uxtb	r3, r3
    8e88:	2bff      	cmp	r3, #255	; 0xff
    8e8a:	d105      	bne.n	8e98 <send_adc+0x4ac>
    8e8c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8e90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e94:	2200      	movs	r2, #0
    8e96:	701a      	strb	r2, [r3, #0]
    8e98:	f242 0338 	movw	r3, #8248	; 0x2038
    8e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ea0:	f242 0238 	movw	r2, #8248	; 0x2038
    8ea4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8ea8:	7812      	ldrb	r2, [r2, #0]
    8eaa:	b2d2      	uxtb	r2, r2
    8eac:	f042 0201 	orr.w	r2, r2, #1
    8eb0:	b2d2      	uxtb	r2, r2
    8eb2:	701a      	strb	r2, [r3, #0]
    8eb4:	f242 0339 	movw	r3, #8249	; 0x2039
    8eb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ebc:	f242 0239 	movw	r2, #8249	; 0x2039
    8ec0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8ec4:	7812      	ldrb	r2, [r2, #0]
    8ec6:	b2d2      	uxtb	r2, r2
    8ec8:	f042 0210 	orr.w	r2, r2, #16
    8ecc:	b2d2      	uxtb	r2, r2
    8ece:	701a      	strb	r2, [r3, #0]
    8ed0:	e00b      	b.n	8eea <send_adc+0x4fe>
    8ed2:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    8ed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8eda:	781b      	ldrb	r3, [r3, #0]
    8edc:	3301      	adds	r3, #1
    8ede:	b2da      	uxtb	r2, r3
    8ee0:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    8ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ee8:	701a      	strb	r2, [r3, #0]
}
    8eea:	46bd      	mov	sp, r7
    8eec:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ef0:	4770      	bx	lr
    8ef2:	bf00      	nop
    8ef4:	2000ad51 	.word	0x2000ad51
    8ef8:	2000ad53 	.word	0x2000ad53

00008efc <send_settings>:
void send_settings(void){ //500ms
    8efc:	b480      	push	{r7}
    8efe:	af00      	add	r7, sp, #0
  //if(!boot)
  {if (count % 5 == 2) PERIODIC_SEND_SETTINGS();}
    8f00:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    8f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f08:	781a      	ldrb	r2, [r3, #0]
    8f0a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8f0e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8f12:	fba3 1302 	umull	r1, r3, r3, r2
    8f16:	0899      	lsrs	r1, r3, #2
    8f18:	460b      	mov	r3, r1
    8f1a:	009b      	lsls	r3, r3, #2
    8f1c:	440b      	add	r3, r1
    8f1e:	1ad3      	subs	r3, r2, r3
    8f20:	b2db      	uxtb	r3, r3
    8f22:	2b02      	cmp	r3, #2
    8f24:	f040 83e7 	bne.w	96f6 <send_settings+0x7fa>
    8f28:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
    8f2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f30:	781b      	ldrb	r3, [r3, #0]
    8f32:	2b00      	cmp	r3, #0
    8f34:	f000 83df 	beq.w	96f6 <send_settings+0x7fa>
    8f38:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8f3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f40:	781a      	ldrb	r2, [r3, #0]
    8f42:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8f46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f4a:	781b      	ldrb	r3, [r3, #0]
    8f4c:	b2db      	uxtb	r3, r3
    8f4e:	429a      	cmp	r2, r3
    8f50:	d313      	bcc.n	8f7a <send_settings+0x7e>
    8f52:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8f56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f5a:	781b      	ldrb	r3, [r3, #0]
    8f5c:	b2db      	uxtb	r3, r3
    8f5e:	461a      	mov	r2, r3
    8f60:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f68:	781b      	ldrb	r3, [r3, #0]
    8f6a:	1ad3      	subs	r3, r2, r3
    8f6c:	33ff      	adds	r3, #255	; 0xff
    8f6e:	2b0d      	cmp	r3, #13
    8f70:	bfd4      	ite	le
    8f72:	2300      	movle	r3, #0
    8f74:	2301      	movgt	r3, #1
    8f76:	b2db      	uxtb	r3, r3
    8f78:	e011      	b.n	8f9e <send_settings+0xa2>
    8f7a:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    8f7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f82:	781b      	ldrb	r3, [r3, #0]
    8f84:	b2db      	uxtb	r3, r3
    8f86:	461a      	mov	r2, r3
    8f88:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8f8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f90:	781b      	ldrb	r3, [r3, #0]
    8f92:	1ad3      	subs	r3, r2, r3
    8f94:	2b0d      	cmp	r3, #13
    8f96:	bfd4      	ite	le
    8f98:	2300      	movle	r3, #0
    8f9a:	2301      	movgt	r3, #1
    8f9c:	b2db      	uxtb	r3, r3
    8f9e:	2b00      	cmp	r3, #0
    8fa0:	f000 839d 	beq.w	96de <send_settings+0x7e2>
    8fa4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8fa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fac:	781b      	ldrb	r3, [r3, #0]
    8fae:	461a      	mov	r2, r3
    8fb0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8fb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fb8:	2105      	movs	r1, #5
    8fba:	5499      	strb	r1, [r3, r2]
    8fbc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8fc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fc4:	781b      	ldrb	r3, [r3, #0]
    8fc6:	3301      	adds	r3, #1
    8fc8:	b2da      	uxtb	r2, r3
    8fca:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8fce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fd2:	701a      	strb	r2, [r3, #0]
    8fd4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fdc:	781b      	ldrb	r3, [r3, #0]
    8fde:	2bff      	cmp	r3, #255	; 0xff
    8fe0:	d105      	bne.n	8fee <send_settings+0xf2>
    8fe2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8fe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fea:	2200      	movs	r2, #0
    8fec:	701a      	strb	r2, [r3, #0]
    8fee:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    8ff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ff6:	781b      	ldrb	r3, [r3, #0]
    8ff8:	461a      	mov	r2, r3
    8ffa:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    8ffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9002:	2111      	movs	r1, #17
    9004:	5499      	strb	r1, [r3, r2]
    9006:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    900a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    900e:	781b      	ldrb	r3, [r3, #0]
    9010:	3301      	adds	r3, #1
    9012:	b2da      	uxtb	r2, r3
    9014:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9018:	f2c2 0300 	movt	r3, #8192	; 0x2000
    901c:	701a      	strb	r2, [r3, #0]
    901e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9022:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9026:	781b      	ldrb	r3, [r3, #0]
    9028:	2bff      	cmp	r3, #255	; 0xff
    902a:	d105      	bne.n	9038 <send_settings+0x13c>
    902c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9030:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9034:	2200      	movs	r2, #0
    9036:	701a      	strb	r2, [r3, #0]
    9038:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    903c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9040:	2211      	movs	r2, #17
    9042:	701a      	strb	r2, [r3, #0]
    9044:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9048:	f2c2 0300 	movt	r3, #8192	; 0x2000
    904c:	2211      	movs	r2, #17
    904e:	701a      	strb	r2, [r3, #0]
    9050:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9054:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9058:	781b      	ldrb	r3, [r3, #0]
    905a:	461a      	mov	r2, r3
    905c:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
    9060:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9064:	7819      	ldrb	r1, [r3, #0]
    9066:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    906a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    906e:	5499      	strb	r1, [r3, r2]
    9070:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9074:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9078:	781a      	ldrb	r2, [r3, #0]
    907a:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
    907e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9082:	781b      	ldrb	r3, [r3, #0]
    9084:	4413      	add	r3, r2
    9086:	b2da      	uxtb	r2, r3
    9088:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    908c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9090:	701a      	strb	r2, [r3, #0]
    9092:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9096:	f2c2 0300 	movt	r3, #8192	; 0x2000
    909a:	781a      	ldrb	r2, [r3, #0]
    909c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    90a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90a4:	781b      	ldrb	r3, [r3, #0]
    90a6:	4413      	add	r3, r2
    90a8:	b2da      	uxtb	r2, r3
    90aa:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    90ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90b2:	701a      	strb	r2, [r3, #0]
    90b4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    90b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90bc:	781b      	ldrb	r3, [r3, #0]
    90be:	3301      	adds	r3, #1
    90c0:	b2da      	uxtb	r2, r3
    90c2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    90c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90ca:	701a      	strb	r2, [r3, #0]
    90cc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    90d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90d4:	781b      	ldrb	r3, [r3, #0]
    90d6:	2bff      	cmp	r3, #255	; 0xff
    90d8:	d105      	bne.n	90e6 <send_settings+0x1ea>
    90da:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    90de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90e2:	2200      	movs	r2, #0
    90e4:	701a      	strb	r2, [r3, #0]
    90e6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    90ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90ee:	781b      	ldrb	r3, [r3, #0]
    90f0:	461a      	mov	r2, r3
    90f2:	f64a 23a0 	movw	r3, #43680	; 0xaaa0
    90f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90fa:	7819      	ldrb	r1, [r3, #0]
    90fc:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9100:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9104:	5499      	strb	r1, [r3, r2]
    9106:	f64a 23a0 	movw	r3, #43680	; 0xaaa0
    910a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    910e:	781a      	ldrb	r2, [r3, #0]
    9110:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9114:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9118:	781b      	ldrb	r3, [r3, #0]
    911a:	4413      	add	r3, r2
    911c:	b2da      	uxtb	r2, r3
    911e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9122:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9126:	701a      	strb	r2, [r3, #0]
    9128:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    912c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9130:	781a      	ldrb	r2, [r3, #0]
    9132:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9136:	f2c2 0300 	movt	r3, #8192	; 0x2000
    913a:	781b      	ldrb	r3, [r3, #0]
    913c:	4413      	add	r3, r2
    913e:	b2da      	uxtb	r2, r3
    9140:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9144:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9148:	701a      	strb	r2, [r3, #0]
    914a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    914e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9152:	781b      	ldrb	r3, [r3, #0]
    9154:	3301      	adds	r3, #1
    9156:	b2da      	uxtb	r2, r3
    9158:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    915c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9160:	701a      	strb	r2, [r3, #0]
    9162:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9166:	f2c2 0300 	movt	r3, #8192	; 0x2000
    916a:	781b      	ldrb	r3, [r3, #0]
    916c:	2bff      	cmp	r3, #255	; 0xff
    916e:	d105      	bne.n	917c <send_settings+0x280>
    9170:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9174:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9178:	2200      	movs	r2, #0
    917a:	701a      	strb	r2, [r3, #0]
    917c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9180:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9184:	781b      	ldrb	r3, [r3, #0]
    9186:	461a      	mov	r2, r3
    9188:	f64a 23a0 	movw	r3, #43680	; 0xaaa0
    918c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9190:	7859      	ldrb	r1, [r3, #1]
    9192:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9196:	f2c2 0300 	movt	r3, #8192	; 0x2000
    919a:	5499      	strb	r1, [r3, r2]
    919c:	4bd1      	ldr	r3, [pc, #836]	; (94e4 <send_settings+0x5e8>)
    919e:	781a      	ldrb	r2, [r3, #0]
    91a0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    91a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91a8:	781b      	ldrb	r3, [r3, #0]
    91aa:	4413      	add	r3, r2
    91ac:	b2da      	uxtb	r2, r3
    91ae:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    91b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91b6:	701a      	strb	r2, [r3, #0]
    91b8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    91bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91c0:	781a      	ldrb	r2, [r3, #0]
    91c2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    91c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91ca:	781b      	ldrb	r3, [r3, #0]
    91cc:	4413      	add	r3, r2
    91ce:	b2da      	uxtb	r2, r3
    91d0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    91d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91d8:	701a      	strb	r2, [r3, #0]
    91da:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    91de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91e2:	781b      	ldrb	r3, [r3, #0]
    91e4:	3301      	adds	r3, #1
    91e6:	b2da      	uxtb	r2, r3
    91e8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    91ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91f0:	701a      	strb	r2, [r3, #0]
    91f2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    91f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91fa:	781b      	ldrb	r3, [r3, #0]
    91fc:	2bff      	cmp	r3, #255	; 0xff
    91fe:	d105      	bne.n	920c <send_settings+0x310>
    9200:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9204:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9208:	2200      	movs	r2, #0
    920a:	701a      	strb	r2, [r3, #0]
    920c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9210:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9214:	781b      	ldrb	r3, [r3, #0]
    9216:	461a      	mov	r2, r3
    9218:	f64a 23a0 	movw	r3, #43680	; 0xaaa0
    921c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9220:	7899      	ldrb	r1, [r3, #2]
    9222:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    922a:	5499      	strb	r1, [r3, r2]
    922c:	4bae      	ldr	r3, [pc, #696]	; (94e8 <send_settings+0x5ec>)
    922e:	781a      	ldrb	r2, [r3, #0]
    9230:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9234:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9238:	781b      	ldrb	r3, [r3, #0]
    923a:	4413      	add	r3, r2
    923c:	b2da      	uxtb	r2, r3
    923e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9242:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9246:	701a      	strb	r2, [r3, #0]
    9248:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    924c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9250:	781a      	ldrb	r2, [r3, #0]
    9252:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9256:	f2c2 0300 	movt	r3, #8192	; 0x2000
    925a:	781b      	ldrb	r3, [r3, #0]
    925c:	4413      	add	r3, r2
    925e:	b2da      	uxtb	r2, r3
    9260:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9264:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9268:	701a      	strb	r2, [r3, #0]
    926a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    926e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9272:	781b      	ldrb	r3, [r3, #0]
    9274:	3301      	adds	r3, #1
    9276:	b2da      	uxtb	r2, r3
    9278:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    927c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9280:	701a      	strb	r2, [r3, #0]
    9282:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9286:	f2c2 0300 	movt	r3, #8192	; 0x2000
    928a:	781b      	ldrb	r3, [r3, #0]
    928c:	2bff      	cmp	r3, #255	; 0xff
    928e:	d105      	bne.n	929c <send_settings+0x3a0>
    9290:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9294:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9298:	2200      	movs	r2, #0
    929a:	701a      	strb	r2, [r3, #0]
    929c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    92a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92a4:	781b      	ldrb	r3, [r3, #0]
    92a6:	461a      	mov	r2, r3
    92a8:	f64a 23a0 	movw	r3, #43680	; 0xaaa0
    92ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92b0:	78d9      	ldrb	r1, [r3, #3]
    92b2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    92b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92ba:	5499      	strb	r1, [r3, r2]
    92bc:	4b8b      	ldr	r3, [pc, #556]	; (94ec <send_settings+0x5f0>)
    92be:	781a      	ldrb	r2, [r3, #0]
    92c0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    92c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92c8:	781b      	ldrb	r3, [r3, #0]
    92ca:	4413      	add	r3, r2
    92cc:	b2da      	uxtb	r2, r3
    92ce:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    92d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92d6:	701a      	strb	r2, [r3, #0]
    92d8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    92dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92e0:	781a      	ldrb	r2, [r3, #0]
    92e2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    92e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92ea:	781b      	ldrb	r3, [r3, #0]
    92ec:	4413      	add	r3, r2
    92ee:	b2da      	uxtb	r2, r3
    92f0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    92f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92f8:	701a      	strb	r2, [r3, #0]
    92fa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    92fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9302:	781b      	ldrb	r3, [r3, #0]
    9304:	3301      	adds	r3, #1
    9306:	b2da      	uxtb	r2, r3
    9308:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    930c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9310:	701a      	strb	r2, [r3, #0]
    9312:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9316:	f2c2 0300 	movt	r3, #8192	; 0x2000
    931a:	781b      	ldrb	r3, [r3, #0]
    931c:	2bff      	cmp	r3, #255	; 0xff
    931e:	d105      	bne.n	932c <send_settings+0x430>
    9320:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9324:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9328:	2200      	movs	r2, #0
    932a:	701a      	strb	r2, [r3, #0]
    932c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9330:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9334:	781b      	ldrb	r3, [r3, #0]
    9336:	461a      	mov	r2, r3
    9338:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
    933c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9340:	7819      	ldrb	r1, [r3, #0]
    9342:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9346:	f2c2 0300 	movt	r3, #8192	; 0x2000
    934a:	5499      	strb	r1, [r3, r2]
    934c:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
    9350:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9354:	781a      	ldrb	r2, [r3, #0]
    9356:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    935a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    935e:	781b      	ldrb	r3, [r3, #0]
    9360:	4413      	add	r3, r2
    9362:	b2da      	uxtb	r2, r3
    9364:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9368:	f2c2 0300 	movt	r3, #8192	; 0x2000
    936c:	701a      	strb	r2, [r3, #0]
    936e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9372:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9376:	781a      	ldrb	r2, [r3, #0]
    9378:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    937c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9380:	781b      	ldrb	r3, [r3, #0]
    9382:	4413      	add	r3, r2
    9384:	b2da      	uxtb	r2, r3
    9386:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    938a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    938e:	701a      	strb	r2, [r3, #0]
    9390:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9394:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9398:	781b      	ldrb	r3, [r3, #0]
    939a:	3301      	adds	r3, #1
    939c:	b2da      	uxtb	r2, r3
    939e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    93a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93a6:	701a      	strb	r2, [r3, #0]
    93a8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    93ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93b0:	781b      	ldrb	r3, [r3, #0]
    93b2:	2bff      	cmp	r3, #255	; 0xff
    93b4:	d105      	bne.n	93c2 <send_settings+0x4c6>
    93b6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    93ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93be:	2200      	movs	r2, #0
    93c0:	701a      	strb	r2, [r3, #0]
    93c2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    93c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93ca:	781b      	ldrb	r3, [r3, #0]
    93cc:	461a      	mov	r2, r3
    93ce:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
    93d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93d6:	7859      	ldrb	r1, [r3, #1]
    93d8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    93dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93e0:	5499      	strb	r1, [r3, r2]
    93e2:	4b43      	ldr	r3, [pc, #268]	; (94f0 <send_settings+0x5f4>)
    93e4:	781a      	ldrb	r2, [r3, #0]
    93e6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    93ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93ee:	781b      	ldrb	r3, [r3, #0]
    93f0:	4413      	add	r3, r2
    93f2:	b2da      	uxtb	r2, r3
    93f4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    93f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93fc:	701a      	strb	r2, [r3, #0]
    93fe:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9402:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9406:	781a      	ldrb	r2, [r3, #0]
    9408:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    940c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9410:	781b      	ldrb	r3, [r3, #0]
    9412:	4413      	add	r3, r2
    9414:	b2da      	uxtb	r2, r3
    9416:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    941a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    941e:	701a      	strb	r2, [r3, #0]
    9420:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9424:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9428:	781b      	ldrb	r3, [r3, #0]
    942a:	3301      	adds	r3, #1
    942c:	b2da      	uxtb	r2, r3
    942e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9432:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9436:	701a      	strb	r2, [r3, #0]
    9438:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    943c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9440:	781b      	ldrb	r3, [r3, #0]
    9442:	2bff      	cmp	r3, #255	; 0xff
    9444:	d105      	bne.n	9452 <send_settings+0x556>
    9446:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    944a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    944e:	2200      	movs	r2, #0
    9450:	701a      	strb	r2, [r3, #0]
    9452:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9456:	f2c2 0300 	movt	r3, #8192	; 0x2000
    945a:	781b      	ldrb	r3, [r3, #0]
    945c:	461a      	mov	r2, r3
    945e:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
    9462:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9466:	7899      	ldrb	r1, [r3, #2]
    9468:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    946c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9470:	5499      	strb	r1, [r3, r2]
    9472:	4b20      	ldr	r3, [pc, #128]	; (94f4 <send_settings+0x5f8>)
    9474:	781a      	ldrb	r2, [r3, #0]
    9476:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    947a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    947e:	781b      	ldrb	r3, [r3, #0]
    9480:	4413      	add	r3, r2
    9482:	b2da      	uxtb	r2, r3
    9484:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9488:	f2c2 0300 	movt	r3, #8192	; 0x2000
    948c:	701a      	strb	r2, [r3, #0]
    948e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9492:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9496:	781a      	ldrb	r2, [r3, #0]
    9498:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    949c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94a0:	781b      	ldrb	r3, [r3, #0]
    94a2:	4413      	add	r3, r2
    94a4:	b2da      	uxtb	r2, r3
    94a6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    94aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94ae:	701a      	strb	r2, [r3, #0]
    94b0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    94b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94b8:	781b      	ldrb	r3, [r3, #0]
    94ba:	3301      	adds	r3, #1
    94bc:	b2da      	uxtb	r2, r3
    94be:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    94c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94c6:	701a      	strb	r2, [r3, #0]
    94c8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    94cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94d0:	781b      	ldrb	r3, [r3, #0]
    94d2:	2bff      	cmp	r3, #255	; 0xff
    94d4:	d110      	bne.n	94f8 <send_settings+0x5fc>
    94d6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    94da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94de:	2200      	movs	r2, #0
    94e0:	701a      	strb	r2, [r3, #0]
    94e2:	e009      	b.n	94f8 <send_settings+0x5fc>
    94e4:	2000aaa1 	.word	0x2000aaa1
    94e8:	2000aaa2 	.word	0x2000aaa2
    94ec:	2000aaa3 	.word	0x2000aaa3
    94f0:	2000aaa5 	.word	0x2000aaa5
    94f4:	2000aaa6 	.word	0x2000aaa6
    94f8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    94fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9500:	781b      	ldrb	r3, [r3, #0]
    9502:	461a      	mov	r2, r3
    9504:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
    9508:	f2c2 0300 	movt	r3, #8192	; 0x2000
    950c:	78d9      	ldrb	r1, [r3, #3]
    950e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9512:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9516:	5499      	strb	r1, [r3, r2]
    9518:	4b79      	ldr	r3, [pc, #484]	; (9700 <send_settings+0x804>)
    951a:	781a      	ldrb	r2, [r3, #0]
    951c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9524:	781b      	ldrb	r3, [r3, #0]
    9526:	4413      	add	r3, r2
    9528:	b2da      	uxtb	r2, r3
    952a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    952e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9532:	701a      	strb	r2, [r3, #0]
    9534:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9538:	f2c2 0300 	movt	r3, #8192	; 0x2000
    953c:	781a      	ldrb	r2, [r3, #0]
    953e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9542:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9546:	781b      	ldrb	r3, [r3, #0]
    9548:	4413      	add	r3, r2
    954a:	b2da      	uxtb	r2, r3
    954c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9550:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9554:	701a      	strb	r2, [r3, #0]
    9556:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    955a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    955e:	781b      	ldrb	r3, [r3, #0]
    9560:	3301      	adds	r3, #1
    9562:	b2da      	uxtb	r2, r3
    9564:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9568:	f2c2 0300 	movt	r3, #8192	; 0x2000
    956c:	701a      	strb	r2, [r3, #0]
    956e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9572:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9576:	781b      	ldrb	r3, [r3, #0]
    9578:	2bff      	cmp	r3, #255	; 0xff
    957a:	d105      	bne.n	9588 <send_settings+0x68c>
    957c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9580:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9584:	2200      	movs	r2, #0
    9586:	701a      	strb	r2, [r3, #0]
    9588:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    958c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9590:	781b      	ldrb	r3, [r3, #0]
    9592:	461a      	mov	r2, r3
    9594:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9598:	f2c2 0300 	movt	r3, #8192	; 0x2000
    959c:	7819      	ldrb	r1, [r3, #0]
    959e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    95a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95a6:	5499      	strb	r1, [r3, r2]
    95a8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    95ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95b0:	781b      	ldrb	r3, [r3, #0]
    95b2:	3301      	adds	r3, #1
    95b4:	b2da      	uxtb	r2, r3
    95b6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    95ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95be:	701a      	strb	r2, [r3, #0]
    95c0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    95c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95c8:	781b      	ldrb	r3, [r3, #0]
    95ca:	2bff      	cmp	r3, #255	; 0xff
    95cc:	d105      	bne.n	95da <send_settings+0x6de>
    95ce:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    95d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95d6:	2200      	movs	r2, #0
    95d8:	701a      	strb	r2, [r3, #0]
    95da:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    95de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95e2:	781b      	ldrb	r3, [r3, #0]
    95e4:	461a      	mov	r2, r3
    95e6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    95ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95ee:	7819      	ldrb	r1, [r3, #0]
    95f0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    95f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95f8:	5499      	strb	r1, [r3, r2]
    95fa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    95fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9602:	781b      	ldrb	r3, [r3, #0]
    9604:	3301      	adds	r3, #1
    9606:	b2da      	uxtb	r2, r3
    9608:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    960c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9610:	701a      	strb	r2, [r3, #0]
    9612:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9616:	f2c2 0300 	movt	r3, #8192	; 0x2000
    961a:	781b      	ldrb	r3, [r3, #0]
    961c:	2bff      	cmp	r3, #255	; 0xff
    961e:	d105      	bne.n	962c <send_settings+0x730>
    9620:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9624:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9628:	2200      	movs	r2, #0
    962a:	701a      	strb	r2, [r3, #0]
    962c:	f242 0339 	movw	r3, #8249	; 0x2039
    9630:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9634:	781b      	ldrb	r3, [r3, #0]
    9636:	b2db      	uxtb	r3, r3
    9638:	f003 0310 	and.w	r3, r3, #16
    963c:	2b00      	cmp	r3, #0
    963e:	d15a      	bne.n	96f6 <send_settings+0x7fa>
    9640:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    9644:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9648:	781b      	ldrb	r3, [r3, #0]
    964a:	b2db      	uxtb	r3, r3
    964c:	461a      	mov	r2, r3
    964e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9652:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9656:	5c9a      	ldrb	r2, [r3, r2]
    9658:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    965c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9660:	701a      	strb	r2, [r3, #0]
    9662:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    9666:	f2c2 0300 	movt	r3, #8192	; 0x2000
    966a:	2200      	movs	r2, #0
    966c:	701a      	strb	r2, [r3, #0]
    966e:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    9672:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9676:	781b      	ldrb	r3, [r3, #0]
    9678:	b2db      	uxtb	r3, r3
    967a:	3301      	adds	r3, #1
    967c:	b2da      	uxtb	r2, r3
    967e:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    9682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9686:	701a      	strb	r2, [r3, #0]
    9688:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    968c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9690:	781b      	ldrb	r3, [r3, #0]
    9692:	b2db      	uxtb	r3, r3
    9694:	2bff      	cmp	r3, #255	; 0xff
    9696:	d105      	bne.n	96a4 <send_settings+0x7a8>
    9698:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    969c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96a0:	2200      	movs	r2, #0
    96a2:	701a      	strb	r2, [r3, #0]
    96a4:	f242 0338 	movw	r3, #8248	; 0x2038
    96a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96ac:	f242 0238 	movw	r2, #8248	; 0x2038
    96b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    96b4:	7812      	ldrb	r2, [r2, #0]
    96b6:	b2d2      	uxtb	r2, r2
    96b8:	f042 0201 	orr.w	r2, r2, #1
    96bc:	b2d2      	uxtb	r2, r2
    96be:	701a      	strb	r2, [r3, #0]
    96c0:	f242 0339 	movw	r3, #8249	; 0x2039
    96c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96c8:	f242 0239 	movw	r2, #8249	; 0x2039
    96cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    96d0:	7812      	ldrb	r2, [r2, #0]
    96d2:	b2d2      	uxtb	r2, r2
    96d4:	f042 0210 	orr.w	r2, r2, #16
    96d8:	b2d2      	uxtb	r2, r2
    96da:	701a      	strb	r2, [r3, #0]
    96dc:	e00b      	b.n	96f6 <send_settings+0x7fa>
    96de:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    96e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96e6:	781b      	ldrb	r3, [r3, #0]
    96e8:	3301      	adds	r3, #1
    96ea:	b2da      	uxtb	r2, r3
    96ec:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    96f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96f4:	701a      	strb	r2, [r3, #0]
}
    96f6:	46bd      	mov	sp, r7
    96f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    96fc:	4770      	bx	lr
    96fe:	bf00      	nop
    9700:	2000aaa7 	.word	0x2000aaa7

00009704 <send_desired>:
void send_desired(void){  //1000ms
    9704:	b480      	push	{r7}
    9706:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 10 == 3) PERIODIC_SEND_DESIRED();}
    9708:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    970c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9710:	781a      	ldrb	r2, [r3, #0]
    9712:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    9716:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    971a:	fba3 1302 	umull	r1, r3, r3, r2
    971e:	08d9      	lsrs	r1, r3, #3
    9720:	460b      	mov	r3, r1
    9722:	009b      	lsls	r3, r3, #2
    9724:	440b      	add	r3, r1
    9726:	005b      	lsls	r3, r3, #1
    9728:	1ad3      	subs	r3, r2, r3
    972a:	b2db      	uxtb	r3, r3
    972c:	2b03      	cmp	r3, #3
    972e:	f040 8712 	bne.w	a556 <send_desired+0xe52>
    9732:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9736:	f2c2 0300 	movt	r3, #8192	; 0x2000
    973a:	781a      	ldrb	r2, [r3, #0]
    973c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    9740:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9744:	781b      	ldrb	r3, [r3, #0]
    9746:	b2db      	uxtb	r3, r3
    9748:	429a      	cmp	r2, r3
    974a:	d313      	bcc.n	9774 <send_desired+0x70>
    974c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    9750:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9754:	781b      	ldrb	r3, [r3, #0]
    9756:	b2db      	uxtb	r3, r3
    9758:	461a      	mov	r2, r3
    975a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    975e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9762:	781b      	ldrb	r3, [r3, #0]
    9764:	1ad3      	subs	r3, r2, r3
    9766:	33ff      	adds	r3, #255	; 0xff
    9768:	2b18      	cmp	r3, #24
    976a:	bfd4      	ite	le
    976c:	2300      	movle	r3, #0
    976e:	2301      	movgt	r3, #1
    9770:	b2db      	uxtb	r3, r3
    9772:	e011      	b.n	9798 <send_desired+0x94>
    9774:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    9778:	f2c2 0300 	movt	r3, #8192	; 0x2000
    977c:	781b      	ldrb	r3, [r3, #0]
    977e:	b2db      	uxtb	r3, r3
    9780:	461a      	mov	r2, r3
    9782:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9786:	f2c2 0300 	movt	r3, #8192	; 0x2000
    978a:	781b      	ldrb	r3, [r3, #0]
    978c:	1ad3      	subs	r3, r2, r3
    978e:	2b18      	cmp	r3, #24
    9790:	bfd4      	ite	le
    9792:	2300      	movle	r3, #0
    9794:	2301      	movgt	r3, #1
    9796:	b2db      	uxtb	r3, r3
    9798:	2b00      	cmp	r3, #0
    979a:	f000 86d0 	beq.w	a53e <send_desired+0xe3a>
    979e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    97a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97a6:	781b      	ldrb	r3, [r3, #0]
    97a8:	461a      	mov	r2, r3
    97aa:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    97ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97b2:	2105      	movs	r1, #5
    97b4:	5499      	strb	r1, [r3, r2]
    97b6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    97ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97be:	781b      	ldrb	r3, [r3, #0]
    97c0:	3301      	adds	r3, #1
    97c2:	b2da      	uxtb	r2, r3
    97c4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    97c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97cc:	701a      	strb	r2, [r3, #0]
    97ce:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    97d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97d6:	781b      	ldrb	r3, [r3, #0]
    97d8:	2bff      	cmp	r3, #255	; 0xff
    97da:	d105      	bne.n	97e8 <send_desired+0xe4>
    97dc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    97e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97e4:	2200      	movs	r2, #0
    97e6:	701a      	strb	r2, [r3, #0]
    97e8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    97ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97f0:	781b      	ldrb	r3, [r3, #0]
    97f2:	461a      	mov	r2, r3
    97f4:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    97f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97fc:	2112      	movs	r1, #18
    97fe:	5499      	strb	r1, [r3, r2]
    9800:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9804:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9808:	781b      	ldrb	r3, [r3, #0]
    980a:	3301      	adds	r3, #1
    980c:	b2da      	uxtb	r2, r3
    980e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9816:	701a      	strb	r2, [r3, #0]
    9818:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    981c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9820:	781b      	ldrb	r3, [r3, #0]
    9822:	2bff      	cmp	r3, #255	; 0xff
    9824:	d105      	bne.n	9832 <send_desired+0x12e>
    9826:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    982a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    982e:	2200      	movs	r2, #0
    9830:	701a      	strb	r2, [r3, #0]
    9832:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9836:	f2c2 0300 	movt	r3, #8192	; 0x2000
    983a:	2212      	movs	r2, #18
    983c:	701a      	strb	r2, [r3, #0]
    983e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9842:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9846:	2212      	movs	r2, #18
    9848:	701a      	strb	r2, [r3, #0]
    984a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    984e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9852:	781b      	ldrb	r3, [r3, #0]
    9854:	461a      	mov	r2, r3
    9856:	f64a 53dc 	movw	r3, #44508	; 0xaddc
    985a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    985e:	7819      	ldrb	r1, [r3, #0]
    9860:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9864:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9868:	5499      	strb	r1, [r3, r2]
    986a:	f64a 53dc 	movw	r3, #44508	; 0xaddc
    986e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9872:	781a      	ldrb	r2, [r3, #0]
    9874:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9878:	f2c2 0300 	movt	r3, #8192	; 0x2000
    987c:	781b      	ldrb	r3, [r3, #0]
    987e:	4413      	add	r3, r2
    9880:	b2da      	uxtb	r2, r3
    9882:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9886:	f2c2 0300 	movt	r3, #8192	; 0x2000
    988a:	701a      	strb	r2, [r3, #0]
    988c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9890:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9894:	781a      	ldrb	r2, [r3, #0]
    9896:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    989a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    989e:	781b      	ldrb	r3, [r3, #0]
    98a0:	4413      	add	r3, r2
    98a2:	b2da      	uxtb	r2, r3
    98a4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    98a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98ac:	701a      	strb	r2, [r3, #0]
    98ae:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    98b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98b6:	781b      	ldrb	r3, [r3, #0]
    98b8:	3301      	adds	r3, #1
    98ba:	b2da      	uxtb	r2, r3
    98bc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    98c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98c4:	701a      	strb	r2, [r3, #0]
    98c6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    98ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98ce:	781b      	ldrb	r3, [r3, #0]
    98d0:	2bff      	cmp	r3, #255	; 0xff
    98d2:	d105      	bne.n	98e0 <send_desired+0x1dc>
    98d4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    98d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98dc:	2200      	movs	r2, #0
    98de:	701a      	strb	r2, [r3, #0]
    98e0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    98e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98e8:	781b      	ldrb	r3, [r3, #0]
    98ea:	461a      	mov	r2, r3
    98ec:	f64a 53dc 	movw	r3, #44508	; 0xaddc
    98f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98f4:	7859      	ldrb	r1, [r3, #1]
    98f6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    98fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98fe:	5499      	strb	r1, [r3, r2]
    9900:	4bd1      	ldr	r3, [pc, #836]	; (9c48 <send_desired+0x544>)
    9902:	781a      	ldrb	r2, [r3, #0]
    9904:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9908:	f2c2 0300 	movt	r3, #8192	; 0x2000
    990c:	781b      	ldrb	r3, [r3, #0]
    990e:	4413      	add	r3, r2
    9910:	b2da      	uxtb	r2, r3
    9912:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9916:	f2c2 0300 	movt	r3, #8192	; 0x2000
    991a:	701a      	strb	r2, [r3, #0]
    991c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9924:	781a      	ldrb	r2, [r3, #0]
    9926:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    992a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    992e:	781b      	ldrb	r3, [r3, #0]
    9930:	4413      	add	r3, r2
    9932:	b2da      	uxtb	r2, r3
    9934:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9938:	f2c2 0300 	movt	r3, #8192	; 0x2000
    993c:	701a      	strb	r2, [r3, #0]
    993e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9942:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9946:	781b      	ldrb	r3, [r3, #0]
    9948:	3301      	adds	r3, #1
    994a:	b2da      	uxtb	r2, r3
    994c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9950:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9954:	701a      	strb	r2, [r3, #0]
    9956:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    995a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    995e:	781b      	ldrb	r3, [r3, #0]
    9960:	2bff      	cmp	r3, #255	; 0xff
    9962:	d105      	bne.n	9970 <send_desired+0x26c>
    9964:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9968:	f2c2 0300 	movt	r3, #8192	; 0x2000
    996c:	2200      	movs	r2, #0
    996e:	701a      	strb	r2, [r3, #0]
    9970:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9974:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9978:	781b      	ldrb	r3, [r3, #0]
    997a:	461a      	mov	r2, r3
    997c:	f64a 53dc 	movw	r3, #44508	; 0xaddc
    9980:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9984:	7899      	ldrb	r1, [r3, #2]
    9986:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    998a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    998e:	5499      	strb	r1, [r3, r2]
    9990:	4bae      	ldr	r3, [pc, #696]	; (9c4c <send_desired+0x548>)
    9992:	781a      	ldrb	r2, [r3, #0]
    9994:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9998:	f2c2 0300 	movt	r3, #8192	; 0x2000
    999c:	781b      	ldrb	r3, [r3, #0]
    999e:	4413      	add	r3, r2
    99a0:	b2da      	uxtb	r2, r3
    99a2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    99a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99aa:	701a      	strb	r2, [r3, #0]
    99ac:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    99b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99b4:	781a      	ldrb	r2, [r3, #0]
    99b6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    99ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99be:	781b      	ldrb	r3, [r3, #0]
    99c0:	4413      	add	r3, r2
    99c2:	b2da      	uxtb	r2, r3
    99c4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    99c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99cc:	701a      	strb	r2, [r3, #0]
    99ce:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    99d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99d6:	781b      	ldrb	r3, [r3, #0]
    99d8:	3301      	adds	r3, #1
    99da:	b2da      	uxtb	r2, r3
    99dc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    99e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99e4:	701a      	strb	r2, [r3, #0]
    99e6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    99ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99ee:	781b      	ldrb	r3, [r3, #0]
    99f0:	2bff      	cmp	r3, #255	; 0xff
    99f2:	d105      	bne.n	9a00 <send_desired+0x2fc>
    99f4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    99f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99fc:	2200      	movs	r2, #0
    99fe:	701a      	strb	r2, [r3, #0]
    9a00:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9a04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a08:	781b      	ldrb	r3, [r3, #0]
    9a0a:	461a      	mov	r2, r3
    9a0c:	f64a 53dc 	movw	r3, #44508	; 0xaddc
    9a10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a14:	78d9      	ldrb	r1, [r3, #3]
    9a16:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9a1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a1e:	5499      	strb	r1, [r3, r2]
    9a20:	4b8b      	ldr	r3, [pc, #556]	; (9c50 <send_desired+0x54c>)
    9a22:	781a      	ldrb	r2, [r3, #0]
    9a24:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a2c:	781b      	ldrb	r3, [r3, #0]
    9a2e:	4413      	add	r3, r2
    9a30:	b2da      	uxtb	r2, r3
    9a32:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9a36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a3a:	701a      	strb	r2, [r3, #0]
    9a3c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9a40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a44:	781a      	ldrb	r2, [r3, #0]
    9a46:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9a4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a4e:	781b      	ldrb	r3, [r3, #0]
    9a50:	4413      	add	r3, r2
    9a52:	b2da      	uxtb	r2, r3
    9a54:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9a58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a5c:	701a      	strb	r2, [r3, #0]
    9a5e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9a62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a66:	781b      	ldrb	r3, [r3, #0]
    9a68:	3301      	adds	r3, #1
    9a6a:	b2da      	uxtb	r2, r3
    9a6c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9a70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a74:	701a      	strb	r2, [r3, #0]
    9a76:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9a7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a7e:	781b      	ldrb	r3, [r3, #0]
    9a80:	2bff      	cmp	r3, #255	; 0xff
    9a82:	d105      	bne.n	9a90 <send_desired+0x38c>
    9a84:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9a88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a8c:	2200      	movs	r2, #0
    9a8e:	701a      	strb	r2, [r3, #0]
    9a90:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9a94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a98:	781b      	ldrb	r3, [r3, #0]
    9a9a:	461a      	mov	r2, r3
    9a9c:	f64a 53e0 	movw	r3, #44512	; 0xade0
    9aa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9aa4:	7819      	ldrb	r1, [r3, #0]
    9aa6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9aaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9aae:	5499      	strb	r1, [r3, r2]
    9ab0:	f64a 53e0 	movw	r3, #44512	; 0xade0
    9ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ab8:	781a      	ldrb	r2, [r3, #0]
    9aba:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9abe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ac2:	781b      	ldrb	r3, [r3, #0]
    9ac4:	4413      	add	r3, r2
    9ac6:	b2da      	uxtb	r2, r3
    9ac8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ad0:	701a      	strb	r2, [r3, #0]
    9ad2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9ad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ada:	781a      	ldrb	r2, [r3, #0]
    9adc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9ae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ae4:	781b      	ldrb	r3, [r3, #0]
    9ae6:	4413      	add	r3, r2
    9ae8:	b2da      	uxtb	r2, r3
    9aea:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9aee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9af2:	701a      	strb	r2, [r3, #0]
    9af4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9af8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9afc:	781b      	ldrb	r3, [r3, #0]
    9afe:	3301      	adds	r3, #1
    9b00:	b2da      	uxtb	r2, r3
    9b02:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9b06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b0a:	701a      	strb	r2, [r3, #0]
    9b0c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9b10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b14:	781b      	ldrb	r3, [r3, #0]
    9b16:	2bff      	cmp	r3, #255	; 0xff
    9b18:	d105      	bne.n	9b26 <send_desired+0x422>
    9b1a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9b1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b22:	2200      	movs	r2, #0
    9b24:	701a      	strb	r2, [r3, #0]
    9b26:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9b2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b2e:	781b      	ldrb	r3, [r3, #0]
    9b30:	461a      	mov	r2, r3
    9b32:	f64a 53e0 	movw	r3, #44512	; 0xade0
    9b36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b3a:	7859      	ldrb	r1, [r3, #1]
    9b3c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b44:	5499      	strb	r1, [r3, r2]
    9b46:	4b43      	ldr	r3, [pc, #268]	; (9c54 <send_desired+0x550>)
    9b48:	781a      	ldrb	r2, [r3, #0]
    9b4a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b52:	781b      	ldrb	r3, [r3, #0]
    9b54:	4413      	add	r3, r2
    9b56:	b2da      	uxtb	r2, r3
    9b58:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9b5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b60:	701a      	strb	r2, [r3, #0]
    9b62:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9b66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b6a:	781a      	ldrb	r2, [r3, #0]
    9b6c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9b70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b74:	781b      	ldrb	r3, [r3, #0]
    9b76:	4413      	add	r3, r2
    9b78:	b2da      	uxtb	r2, r3
    9b7a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9b7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b82:	701a      	strb	r2, [r3, #0]
    9b84:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b8c:	781b      	ldrb	r3, [r3, #0]
    9b8e:	3301      	adds	r3, #1
    9b90:	b2da      	uxtb	r2, r3
    9b92:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9b96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b9a:	701a      	strb	r2, [r3, #0]
    9b9c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9ba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ba4:	781b      	ldrb	r3, [r3, #0]
    9ba6:	2bff      	cmp	r3, #255	; 0xff
    9ba8:	d105      	bne.n	9bb6 <send_desired+0x4b2>
    9baa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9bae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bb2:	2200      	movs	r2, #0
    9bb4:	701a      	strb	r2, [r3, #0]
    9bb6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9bba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bbe:	781b      	ldrb	r3, [r3, #0]
    9bc0:	461a      	mov	r2, r3
    9bc2:	f64a 53e0 	movw	r3, #44512	; 0xade0
    9bc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bca:	7899      	ldrb	r1, [r3, #2]
    9bcc:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9bd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bd4:	5499      	strb	r1, [r3, r2]
    9bd6:	4b20      	ldr	r3, [pc, #128]	; (9c58 <send_desired+0x554>)
    9bd8:	781a      	ldrb	r2, [r3, #0]
    9bda:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9bde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9be2:	781b      	ldrb	r3, [r3, #0]
    9be4:	4413      	add	r3, r2
    9be6:	b2da      	uxtb	r2, r3
    9be8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9bec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bf0:	701a      	strb	r2, [r3, #0]
    9bf2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9bf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bfa:	781a      	ldrb	r2, [r3, #0]
    9bfc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9c00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c04:	781b      	ldrb	r3, [r3, #0]
    9c06:	4413      	add	r3, r2
    9c08:	b2da      	uxtb	r2, r3
    9c0a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9c0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c12:	701a      	strb	r2, [r3, #0]
    9c14:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9c18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c1c:	781b      	ldrb	r3, [r3, #0]
    9c1e:	3301      	adds	r3, #1
    9c20:	b2da      	uxtb	r2, r3
    9c22:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9c26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c2a:	701a      	strb	r2, [r3, #0]
    9c2c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c34:	781b      	ldrb	r3, [r3, #0]
    9c36:	2bff      	cmp	r3, #255	; 0xff
    9c38:	d110      	bne.n	9c5c <send_desired+0x558>
    9c3a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9c3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c42:	2200      	movs	r2, #0
    9c44:	701a      	strb	r2, [r3, #0]
    9c46:	e009      	b.n	9c5c <send_desired+0x558>
    9c48:	2000addd 	.word	0x2000addd
    9c4c:	2000adde 	.word	0x2000adde
    9c50:	2000addf 	.word	0x2000addf
    9c54:	2000ade1 	.word	0x2000ade1
    9c58:	2000ade2 	.word	0x2000ade2
    9c5c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9c60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c64:	781b      	ldrb	r3, [r3, #0]
    9c66:	461a      	mov	r2, r3
    9c68:	f64a 53e0 	movw	r3, #44512	; 0xade0
    9c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c70:	78d9      	ldrb	r1, [r3, #3]
    9c72:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9c76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c7a:	5499      	strb	r1, [r3, r2]
    9c7c:	4bd3      	ldr	r3, [pc, #844]	; (9fcc <send_desired+0x8c8>)
    9c7e:	781a      	ldrb	r2, [r3, #0]
    9c80:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c88:	781b      	ldrb	r3, [r3, #0]
    9c8a:	4413      	add	r3, r2
    9c8c:	b2da      	uxtb	r2, r3
    9c8e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9c92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c96:	701a      	strb	r2, [r3, #0]
    9c98:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ca0:	781a      	ldrb	r2, [r3, #0]
    9ca2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9ca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9caa:	781b      	ldrb	r3, [r3, #0]
    9cac:	4413      	add	r3, r2
    9cae:	b2da      	uxtb	r2, r3
    9cb0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9cb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cb8:	701a      	strb	r2, [r3, #0]
    9cba:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9cbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cc2:	781b      	ldrb	r3, [r3, #0]
    9cc4:	3301      	adds	r3, #1
    9cc6:	b2da      	uxtb	r2, r3
    9cc8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9ccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cd0:	701a      	strb	r2, [r3, #0]
    9cd2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9cd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cda:	781b      	ldrb	r3, [r3, #0]
    9cdc:	2bff      	cmp	r3, #255	; 0xff
    9cde:	d105      	bne.n	9cec <send_desired+0x5e8>
    9ce0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ce8:	2200      	movs	r2, #0
    9cea:	701a      	strb	r2, [r3, #0]
    9cec:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9cf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cf4:	781b      	ldrb	r3, [r3, #0]
    9cf6:	461a      	mov	r2, r3
    9cf8:	f64a 6328 	movw	r3, #44584	; 0xae28
    9cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d00:	7819      	ldrb	r1, [r3, #0]
    9d02:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9d06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d0a:	5499      	strb	r1, [r3, r2]
    9d0c:	f64a 6328 	movw	r3, #44584	; 0xae28
    9d10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d14:	781a      	ldrb	r2, [r3, #0]
    9d16:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9d1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d1e:	781b      	ldrb	r3, [r3, #0]
    9d20:	4413      	add	r3, r2
    9d22:	b2da      	uxtb	r2, r3
    9d24:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9d28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d2c:	701a      	strb	r2, [r3, #0]
    9d2e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9d32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d36:	781a      	ldrb	r2, [r3, #0]
    9d38:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d40:	781b      	ldrb	r3, [r3, #0]
    9d42:	4413      	add	r3, r2
    9d44:	b2da      	uxtb	r2, r3
    9d46:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d4e:	701a      	strb	r2, [r3, #0]
    9d50:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9d54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d58:	781b      	ldrb	r3, [r3, #0]
    9d5a:	3301      	adds	r3, #1
    9d5c:	b2da      	uxtb	r2, r3
    9d5e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9d62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d66:	701a      	strb	r2, [r3, #0]
    9d68:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9d6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d70:	781b      	ldrb	r3, [r3, #0]
    9d72:	2bff      	cmp	r3, #255	; 0xff
    9d74:	d105      	bne.n	9d82 <send_desired+0x67e>
    9d76:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9d7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d7e:	2200      	movs	r2, #0
    9d80:	701a      	strb	r2, [r3, #0]
    9d82:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9d86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d8a:	781b      	ldrb	r3, [r3, #0]
    9d8c:	461a      	mov	r2, r3
    9d8e:	f64a 6328 	movw	r3, #44584	; 0xae28
    9d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d96:	7859      	ldrb	r1, [r3, #1]
    9d98:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9da0:	5499      	strb	r1, [r3, r2]
    9da2:	4b8b      	ldr	r3, [pc, #556]	; (9fd0 <send_desired+0x8cc>)
    9da4:	781a      	ldrb	r2, [r3, #0]
    9da6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dae:	781b      	ldrb	r3, [r3, #0]
    9db0:	4413      	add	r3, r2
    9db2:	b2da      	uxtb	r2, r3
    9db4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9db8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dbc:	701a      	strb	r2, [r3, #0]
    9dbe:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9dc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dc6:	781a      	ldrb	r2, [r3, #0]
    9dc8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9dcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dd0:	781b      	ldrb	r3, [r3, #0]
    9dd2:	4413      	add	r3, r2
    9dd4:	b2da      	uxtb	r2, r3
    9dd6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9dda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dde:	701a      	strb	r2, [r3, #0]
    9de0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9de4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9de8:	781b      	ldrb	r3, [r3, #0]
    9dea:	3301      	adds	r3, #1
    9dec:	b2da      	uxtb	r2, r3
    9dee:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9df2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9df6:	701a      	strb	r2, [r3, #0]
    9df8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e00:	781b      	ldrb	r3, [r3, #0]
    9e02:	2bff      	cmp	r3, #255	; 0xff
    9e04:	d105      	bne.n	9e12 <send_desired+0x70e>
    9e06:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e0e:	2200      	movs	r2, #0
    9e10:	701a      	strb	r2, [r3, #0]
    9e12:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9e16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e1a:	781b      	ldrb	r3, [r3, #0]
    9e1c:	461a      	mov	r2, r3
    9e1e:	f64a 6328 	movw	r3, #44584	; 0xae28
    9e22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e26:	7899      	ldrb	r1, [r3, #2]
    9e28:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e30:	5499      	strb	r1, [r3, r2]
    9e32:	4b68      	ldr	r3, [pc, #416]	; (9fd4 <send_desired+0x8d0>)
    9e34:	781a      	ldrb	r2, [r3, #0]
    9e36:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9e3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e3e:	781b      	ldrb	r3, [r3, #0]
    9e40:	4413      	add	r3, r2
    9e42:	b2da      	uxtb	r2, r3
    9e44:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e4c:	701a      	strb	r2, [r3, #0]
    9e4e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9e52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e56:	781a      	ldrb	r2, [r3, #0]
    9e58:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9e5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e60:	781b      	ldrb	r3, [r3, #0]
    9e62:	4413      	add	r3, r2
    9e64:	b2da      	uxtb	r2, r3
    9e66:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9e6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e6e:	701a      	strb	r2, [r3, #0]
    9e70:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e78:	781b      	ldrb	r3, [r3, #0]
    9e7a:	3301      	adds	r3, #1
    9e7c:	b2da      	uxtb	r2, r3
    9e7e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9e82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e86:	701a      	strb	r2, [r3, #0]
    9e88:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e90:	781b      	ldrb	r3, [r3, #0]
    9e92:	2bff      	cmp	r3, #255	; 0xff
    9e94:	d105      	bne.n	9ea2 <send_desired+0x79e>
    9e96:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e9e:	2200      	movs	r2, #0
    9ea0:	701a      	strb	r2, [r3, #0]
    9ea2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9eaa:	781b      	ldrb	r3, [r3, #0]
    9eac:	461a      	mov	r2, r3
    9eae:	f64a 6328 	movw	r3, #44584	; 0xae28
    9eb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9eb6:	78d9      	ldrb	r1, [r3, #3]
    9eb8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ec0:	5499      	strb	r1, [r3, r2]
    9ec2:	4b45      	ldr	r3, [pc, #276]	; (9fd8 <send_desired+0x8d4>)
    9ec4:	781a      	ldrb	r2, [r3, #0]
    9ec6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9eca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ece:	781b      	ldrb	r3, [r3, #0]
    9ed0:	4413      	add	r3, r2
    9ed2:	b2da      	uxtb	r2, r3
    9ed4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9ed8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9edc:	701a      	strb	r2, [r3, #0]
    9ede:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9ee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ee6:	781a      	ldrb	r2, [r3, #0]
    9ee8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9eec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ef0:	781b      	ldrb	r3, [r3, #0]
    9ef2:	4413      	add	r3, r2
    9ef4:	b2da      	uxtb	r2, r3
    9ef6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9efe:	701a      	strb	r2, [r3, #0]
    9f00:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f08:	781b      	ldrb	r3, [r3, #0]
    9f0a:	3301      	adds	r3, #1
    9f0c:	b2da      	uxtb	r2, r3
    9f0e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9f12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f16:	701a      	strb	r2, [r3, #0]
    9f18:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9f1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f20:	781b      	ldrb	r3, [r3, #0]
    9f22:	2bff      	cmp	r3, #255	; 0xff
    9f24:	d105      	bne.n	9f32 <send_desired+0x82e>
    9f26:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9f2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f2e:	2200      	movs	r2, #0
    9f30:	701a      	strb	r2, [r3, #0]
    9f32:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9f36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f3a:	781b      	ldrb	r3, [r3, #0]
    9f3c:	461a      	mov	r2, r3
    9f3e:	f64a 632c 	movw	r3, #44588	; 0xae2c
    9f42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f46:	7819      	ldrb	r1, [r3, #0]
    9f48:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9f4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f50:	5499      	strb	r1, [r3, r2]
    9f52:	f64a 632c 	movw	r3, #44588	; 0xae2c
    9f56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f5a:	781a      	ldrb	r2, [r3, #0]
    9f5c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9f60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f64:	781b      	ldrb	r3, [r3, #0]
    9f66:	4413      	add	r3, r2
    9f68:	b2da      	uxtb	r2, r3
    9f6a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9f6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f72:	701a      	strb	r2, [r3, #0]
    9f74:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f7c:	781a      	ldrb	r2, [r3, #0]
    9f7e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    9f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f86:	781b      	ldrb	r3, [r3, #0]
    9f88:	4413      	add	r3, r2
    9f8a:	b2da      	uxtb	r2, r3
    9f8c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    9f90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f94:	701a      	strb	r2, [r3, #0]
    9f96:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f9e:	781b      	ldrb	r3, [r3, #0]
    9fa0:	3301      	adds	r3, #1
    9fa2:	b2da      	uxtb	r2, r3
    9fa4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9fa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fac:	701a      	strb	r2, [r3, #0]
    9fae:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9fb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fb6:	781b      	ldrb	r3, [r3, #0]
    9fb8:	2bff      	cmp	r3, #255	; 0xff
    9fba:	d10f      	bne.n	9fdc <send_desired+0x8d8>
    9fbc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9fc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fc4:	2200      	movs	r2, #0
    9fc6:	701a      	strb	r2, [r3, #0]
    9fc8:	e008      	b.n	9fdc <send_desired+0x8d8>
    9fca:	bf00      	nop
    9fcc:	2000ade3 	.word	0x2000ade3
    9fd0:	2000ae29 	.word	0x2000ae29
    9fd4:	2000ae2a 	.word	0x2000ae2a
    9fd8:	2000ae2b 	.word	0x2000ae2b
    9fdc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    9fe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fe4:	781b      	ldrb	r3, [r3, #0]
    9fe6:	461a      	mov	r2, r3
    9fe8:	f64a 632c 	movw	r3, #44588	; 0xae2c
    9fec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ff0:	7859      	ldrb	r1, [r3, #1]
    9ff2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    9ff6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ffa:	5499      	strb	r1, [r3, r2]
    9ffc:	4bd1      	ldr	r3, [pc, #836]	; (a344 <send_desired+0xc40>)
    9ffe:	781a      	ldrb	r2, [r3, #0]
    a000:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a004:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a008:	781b      	ldrb	r3, [r3, #0]
    a00a:	4413      	add	r3, r2
    a00c:	b2da      	uxtb	r2, r3
    a00e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a012:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a016:	701a      	strb	r2, [r3, #0]
    a018:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a01c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a020:	781a      	ldrb	r2, [r3, #0]
    a022:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a026:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a02a:	781b      	ldrb	r3, [r3, #0]
    a02c:	4413      	add	r3, r2
    a02e:	b2da      	uxtb	r2, r3
    a030:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a034:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a038:	701a      	strb	r2, [r3, #0]
    a03a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a03e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a042:	781b      	ldrb	r3, [r3, #0]
    a044:	3301      	adds	r3, #1
    a046:	b2da      	uxtb	r2, r3
    a048:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a04c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a050:	701a      	strb	r2, [r3, #0]
    a052:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a056:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a05a:	781b      	ldrb	r3, [r3, #0]
    a05c:	2bff      	cmp	r3, #255	; 0xff
    a05e:	d105      	bne.n	a06c <send_desired+0x968>
    a060:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a064:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a068:	2200      	movs	r2, #0
    a06a:	701a      	strb	r2, [r3, #0]
    a06c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a070:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a074:	781b      	ldrb	r3, [r3, #0]
    a076:	461a      	mov	r2, r3
    a078:	f64a 632c 	movw	r3, #44588	; 0xae2c
    a07c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a080:	7899      	ldrb	r1, [r3, #2]
    a082:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a086:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a08a:	5499      	strb	r1, [r3, r2]
    a08c:	4bae      	ldr	r3, [pc, #696]	; (a348 <send_desired+0xc44>)
    a08e:	781a      	ldrb	r2, [r3, #0]
    a090:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a094:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a098:	781b      	ldrb	r3, [r3, #0]
    a09a:	4413      	add	r3, r2
    a09c:	b2da      	uxtb	r2, r3
    a09e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a0a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0a6:	701a      	strb	r2, [r3, #0]
    a0a8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a0ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0b0:	781a      	ldrb	r2, [r3, #0]
    a0b2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a0b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0ba:	781b      	ldrb	r3, [r3, #0]
    a0bc:	4413      	add	r3, r2
    a0be:	b2da      	uxtb	r2, r3
    a0c0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a0c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0c8:	701a      	strb	r2, [r3, #0]
    a0ca:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a0ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0d2:	781b      	ldrb	r3, [r3, #0]
    a0d4:	3301      	adds	r3, #1
    a0d6:	b2da      	uxtb	r2, r3
    a0d8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a0dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0e0:	701a      	strb	r2, [r3, #0]
    a0e2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a0e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0ea:	781b      	ldrb	r3, [r3, #0]
    a0ec:	2bff      	cmp	r3, #255	; 0xff
    a0ee:	d105      	bne.n	a0fc <send_desired+0x9f8>
    a0f0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a0f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0f8:	2200      	movs	r2, #0
    a0fa:	701a      	strb	r2, [r3, #0]
    a0fc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a100:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a104:	781b      	ldrb	r3, [r3, #0]
    a106:	461a      	mov	r2, r3
    a108:	f64a 632c 	movw	r3, #44588	; 0xae2c
    a10c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a110:	78d9      	ldrb	r1, [r3, #3]
    a112:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a116:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a11a:	5499      	strb	r1, [r3, r2]
    a11c:	4b8b      	ldr	r3, [pc, #556]	; (a34c <send_desired+0xc48>)
    a11e:	781a      	ldrb	r2, [r3, #0]
    a120:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a124:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a128:	781b      	ldrb	r3, [r3, #0]
    a12a:	4413      	add	r3, r2
    a12c:	b2da      	uxtb	r2, r3
    a12e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a132:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a136:	701a      	strb	r2, [r3, #0]
    a138:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a13c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a140:	781a      	ldrb	r2, [r3, #0]
    a142:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a146:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a14a:	781b      	ldrb	r3, [r3, #0]
    a14c:	4413      	add	r3, r2
    a14e:	b2da      	uxtb	r2, r3
    a150:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a154:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a158:	701a      	strb	r2, [r3, #0]
    a15a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a15e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a162:	781b      	ldrb	r3, [r3, #0]
    a164:	3301      	adds	r3, #1
    a166:	b2da      	uxtb	r2, r3
    a168:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a16c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a170:	701a      	strb	r2, [r3, #0]
    a172:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a176:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a17a:	781b      	ldrb	r3, [r3, #0]
    a17c:	2bff      	cmp	r3, #255	; 0xff
    a17e:	d105      	bne.n	a18c <send_desired+0xa88>
    a180:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a184:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a188:	2200      	movs	r2, #0
    a18a:	701a      	strb	r2, [r3, #0]
    a18c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a190:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a194:	781b      	ldrb	r3, [r3, #0]
    a196:	461a      	mov	r2, r3
    a198:	f240 23b8 	movw	r3, #696	; 0x2b8
    a19c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1a0:	7819      	ldrb	r1, [r3, #0]
    a1a2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a1a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1aa:	5499      	strb	r1, [r3, r2]
    a1ac:	f240 23b8 	movw	r3, #696	; 0x2b8
    a1b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1b4:	781a      	ldrb	r2, [r3, #0]
    a1b6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a1ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1be:	781b      	ldrb	r3, [r3, #0]
    a1c0:	4413      	add	r3, r2
    a1c2:	b2da      	uxtb	r2, r3
    a1c4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a1c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1cc:	701a      	strb	r2, [r3, #0]
    a1ce:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a1d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1d6:	781a      	ldrb	r2, [r3, #0]
    a1d8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a1dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1e0:	781b      	ldrb	r3, [r3, #0]
    a1e2:	4413      	add	r3, r2
    a1e4:	b2da      	uxtb	r2, r3
    a1e6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a1ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1ee:	701a      	strb	r2, [r3, #0]
    a1f0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a1f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1f8:	781b      	ldrb	r3, [r3, #0]
    a1fa:	3301      	adds	r3, #1
    a1fc:	b2da      	uxtb	r2, r3
    a1fe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a202:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a206:	701a      	strb	r2, [r3, #0]
    a208:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a20c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a210:	781b      	ldrb	r3, [r3, #0]
    a212:	2bff      	cmp	r3, #255	; 0xff
    a214:	d105      	bne.n	a222 <send_desired+0xb1e>
    a216:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a21a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a21e:	2200      	movs	r2, #0
    a220:	701a      	strb	r2, [r3, #0]
    a222:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a22a:	781b      	ldrb	r3, [r3, #0]
    a22c:	461a      	mov	r2, r3
    a22e:	f240 23b8 	movw	r3, #696	; 0x2b8
    a232:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a236:	7859      	ldrb	r1, [r3, #1]
    a238:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a23c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a240:	5499      	strb	r1, [r3, r2]
    a242:	4b43      	ldr	r3, [pc, #268]	; (a350 <send_desired+0xc4c>)
    a244:	781a      	ldrb	r2, [r3, #0]
    a246:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a24a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a24e:	781b      	ldrb	r3, [r3, #0]
    a250:	4413      	add	r3, r2
    a252:	b2da      	uxtb	r2, r3
    a254:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a25c:	701a      	strb	r2, [r3, #0]
    a25e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a262:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a266:	781a      	ldrb	r2, [r3, #0]
    a268:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a26c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a270:	781b      	ldrb	r3, [r3, #0]
    a272:	4413      	add	r3, r2
    a274:	b2da      	uxtb	r2, r3
    a276:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a27a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a27e:	701a      	strb	r2, [r3, #0]
    a280:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a284:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a288:	781b      	ldrb	r3, [r3, #0]
    a28a:	3301      	adds	r3, #1
    a28c:	b2da      	uxtb	r2, r3
    a28e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a292:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a296:	701a      	strb	r2, [r3, #0]
    a298:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a29c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2a0:	781b      	ldrb	r3, [r3, #0]
    a2a2:	2bff      	cmp	r3, #255	; 0xff
    a2a4:	d105      	bne.n	a2b2 <send_desired+0xbae>
    a2a6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a2aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2ae:	2200      	movs	r2, #0
    a2b0:	701a      	strb	r2, [r3, #0]
    a2b2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a2b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2ba:	781b      	ldrb	r3, [r3, #0]
    a2bc:	461a      	mov	r2, r3
    a2be:	f240 23b8 	movw	r3, #696	; 0x2b8
    a2c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2c6:	7899      	ldrb	r1, [r3, #2]
    a2c8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a2cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2d0:	5499      	strb	r1, [r3, r2]
    a2d2:	4b20      	ldr	r3, [pc, #128]	; (a354 <send_desired+0xc50>)
    a2d4:	781a      	ldrb	r2, [r3, #0]
    a2d6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a2da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2de:	781b      	ldrb	r3, [r3, #0]
    a2e0:	4413      	add	r3, r2
    a2e2:	b2da      	uxtb	r2, r3
    a2e4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a2e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2ec:	701a      	strb	r2, [r3, #0]
    a2ee:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a2f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2f6:	781a      	ldrb	r2, [r3, #0]
    a2f8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a2fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a300:	781b      	ldrb	r3, [r3, #0]
    a302:	4413      	add	r3, r2
    a304:	b2da      	uxtb	r2, r3
    a306:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a30a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a30e:	701a      	strb	r2, [r3, #0]
    a310:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a314:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a318:	781b      	ldrb	r3, [r3, #0]
    a31a:	3301      	adds	r3, #1
    a31c:	b2da      	uxtb	r2, r3
    a31e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a322:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a326:	701a      	strb	r2, [r3, #0]
    a328:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a32c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a330:	781b      	ldrb	r3, [r3, #0]
    a332:	2bff      	cmp	r3, #255	; 0xff
    a334:	d110      	bne.n	a358 <send_desired+0xc54>
    a336:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a33a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a33e:	2200      	movs	r2, #0
    a340:	701a      	strb	r2, [r3, #0]
    a342:	e009      	b.n	a358 <send_desired+0xc54>
    a344:	2000ae2d 	.word	0x2000ae2d
    a348:	2000ae2e 	.word	0x2000ae2e
    a34c:	2000ae2f 	.word	0x2000ae2f
    a350:	200002b9 	.word	0x200002b9
    a354:	200002ba 	.word	0x200002ba
    a358:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a35c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a360:	781b      	ldrb	r3, [r3, #0]
    a362:	461a      	mov	r2, r3
    a364:	f240 23b8 	movw	r3, #696	; 0x2b8
    a368:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a36c:	78d9      	ldrb	r1, [r3, #3]
    a36e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a372:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a376:	5499      	strb	r1, [r3, r2]
    a378:	4b79      	ldr	r3, [pc, #484]	; (a560 <send_desired+0xe5c>)
    a37a:	781a      	ldrb	r2, [r3, #0]
    a37c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a380:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a384:	781b      	ldrb	r3, [r3, #0]
    a386:	4413      	add	r3, r2
    a388:	b2da      	uxtb	r2, r3
    a38a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a38e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a392:	701a      	strb	r2, [r3, #0]
    a394:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a398:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a39c:	781a      	ldrb	r2, [r3, #0]
    a39e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a3a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3a6:	781b      	ldrb	r3, [r3, #0]
    a3a8:	4413      	add	r3, r2
    a3aa:	b2da      	uxtb	r2, r3
    a3ac:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a3b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3b4:	701a      	strb	r2, [r3, #0]
    a3b6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a3ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3be:	781b      	ldrb	r3, [r3, #0]
    a3c0:	3301      	adds	r3, #1
    a3c2:	b2da      	uxtb	r2, r3
    a3c4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a3c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3cc:	701a      	strb	r2, [r3, #0]
    a3ce:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a3d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3d6:	781b      	ldrb	r3, [r3, #0]
    a3d8:	2bff      	cmp	r3, #255	; 0xff
    a3da:	d105      	bne.n	a3e8 <send_desired+0xce4>
    a3dc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a3e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3e4:	2200      	movs	r2, #0
    a3e6:	701a      	strb	r2, [r3, #0]
    a3e8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a3ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3f0:	781b      	ldrb	r3, [r3, #0]
    a3f2:	461a      	mov	r2, r3
    a3f4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a3f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3fc:	7819      	ldrb	r1, [r3, #0]
    a3fe:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a402:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a406:	5499      	strb	r1, [r3, r2]
    a408:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a40c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a410:	781b      	ldrb	r3, [r3, #0]
    a412:	3301      	adds	r3, #1
    a414:	b2da      	uxtb	r2, r3
    a416:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a41a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a41e:	701a      	strb	r2, [r3, #0]
    a420:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a424:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a428:	781b      	ldrb	r3, [r3, #0]
    a42a:	2bff      	cmp	r3, #255	; 0xff
    a42c:	d105      	bne.n	a43a <send_desired+0xd36>
    a42e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a432:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a436:	2200      	movs	r2, #0
    a438:	701a      	strb	r2, [r3, #0]
    a43a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a43e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a442:	781b      	ldrb	r3, [r3, #0]
    a444:	461a      	mov	r2, r3
    a446:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a44a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a44e:	7819      	ldrb	r1, [r3, #0]
    a450:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a454:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a458:	5499      	strb	r1, [r3, r2]
    a45a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a45e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a462:	781b      	ldrb	r3, [r3, #0]
    a464:	3301      	adds	r3, #1
    a466:	b2da      	uxtb	r2, r3
    a468:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a46c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a470:	701a      	strb	r2, [r3, #0]
    a472:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a476:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a47a:	781b      	ldrb	r3, [r3, #0]
    a47c:	2bff      	cmp	r3, #255	; 0xff
    a47e:	d105      	bne.n	a48c <send_desired+0xd88>
    a480:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a484:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a488:	2200      	movs	r2, #0
    a48a:	701a      	strb	r2, [r3, #0]
    a48c:	f242 0339 	movw	r3, #8249	; 0x2039
    a490:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a494:	781b      	ldrb	r3, [r3, #0]
    a496:	b2db      	uxtb	r3, r3
    a498:	f003 0310 	and.w	r3, r3, #16
    a49c:	2b00      	cmp	r3, #0
    a49e:	d15a      	bne.n	a556 <send_desired+0xe52>
    a4a0:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    a4a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4a8:	781b      	ldrb	r3, [r3, #0]
    a4aa:	b2db      	uxtb	r3, r3
    a4ac:	461a      	mov	r2, r3
    a4ae:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a4b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4b6:	5c9a      	ldrb	r2, [r3, r2]
    a4b8:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    a4bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4c0:	701a      	strb	r2, [r3, #0]
    a4c2:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    a4c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4ca:	2200      	movs	r2, #0
    a4cc:	701a      	strb	r2, [r3, #0]
    a4ce:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    a4d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4d6:	781b      	ldrb	r3, [r3, #0]
    a4d8:	b2db      	uxtb	r3, r3
    a4da:	3301      	adds	r3, #1
    a4dc:	b2da      	uxtb	r2, r3
    a4de:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    a4e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4e6:	701a      	strb	r2, [r3, #0]
    a4e8:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    a4ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4f0:	781b      	ldrb	r3, [r3, #0]
    a4f2:	b2db      	uxtb	r3, r3
    a4f4:	2bff      	cmp	r3, #255	; 0xff
    a4f6:	d105      	bne.n	a504 <send_desired+0xe00>
    a4f8:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    a4fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a500:	2200      	movs	r2, #0
    a502:	701a      	strb	r2, [r3, #0]
    a504:	f242 0338 	movw	r3, #8248	; 0x2038
    a508:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a50c:	f242 0238 	movw	r2, #8248	; 0x2038
    a510:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a514:	7812      	ldrb	r2, [r2, #0]
    a516:	b2d2      	uxtb	r2, r2
    a518:	f042 0201 	orr.w	r2, r2, #1
    a51c:	b2d2      	uxtb	r2, r2
    a51e:	701a      	strb	r2, [r3, #0]
    a520:	f242 0339 	movw	r3, #8249	; 0x2039
    a524:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a528:	f242 0239 	movw	r2, #8249	; 0x2039
    a52c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a530:	7812      	ldrb	r2, [r2, #0]
    a532:	b2d2      	uxtb	r2, r2
    a534:	f042 0210 	orr.w	r2, r2, #16
    a538:	b2d2      	uxtb	r2, r2
    a53a:	701a      	strb	r2, [r3, #0]
    a53c:	e00b      	b.n	a556 <send_desired+0xe52>
    a53e:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    a542:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a546:	781b      	ldrb	r3, [r3, #0]
    a548:	3301      	adds	r3, #1
    a54a:	b2da      	uxtb	r2, r3
    a54c:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    a550:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a554:	701a      	strb	r2, [r3, #0]
}
    a556:	46bd      	mov	sp, r7
    a558:	f85d 7b04 	ldr.w	r7, [sp], #4
    a55c:	4770      	bx	lr
    a55e:	bf00      	nop
    a560:	200002bb 	.word	0x200002bb

0000a564 <send_bat>:
void send_bat(void){  //2000ms
    a564:	b480      	push	{r7}
    a566:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 8) PERIODIC_SEND_BAT();}
    a568:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    a56c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a570:	781a      	ldrb	r2, [r3, #0]
    a572:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    a576:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    a57a:	fba3 1302 	umull	r1, r3, r3, r2
    a57e:	0919      	lsrs	r1, r3, #4
    a580:	460b      	mov	r3, r1
    a582:	009b      	lsls	r3, r3, #2
    a584:	440b      	add	r3, r1
    a586:	009b      	lsls	r3, r3, #2
    a588:	1ad3      	subs	r3, r2, r3
    a58a:	b2db      	uxtb	r3, r3
    a58c:	2b08      	cmp	r3, #8
    a58e:	f040 839a 	bne.w	acc6 <send_bat+0x762>
    a592:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a596:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a59a:	781a      	ldrb	r2, [r3, #0]
    a59c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    a5a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5a4:	781b      	ldrb	r3, [r3, #0]
    a5a6:	b2db      	uxtb	r3, r3
    a5a8:	429a      	cmp	r2, r3
    a5aa:	d313      	bcc.n	a5d4 <send_bat+0x70>
    a5ac:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    a5b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5b4:	781b      	ldrb	r3, [r3, #0]
    a5b6:	b2db      	uxtb	r3, r3
    a5b8:	461a      	mov	r2, r3
    a5ba:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a5be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5c2:	781b      	ldrb	r3, [r3, #0]
    a5c4:	1ad3      	subs	r3, r2, r3
    a5c6:	33ff      	adds	r3, #255	; 0xff
    a5c8:	2b0c      	cmp	r3, #12
    a5ca:	bfd4      	ite	le
    a5cc:	2300      	movle	r3, #0
    a5ce:	2301      	movgt	r3, #1
    a5d0:	b2db      	uxtb	r3, r3
    a5d2:	e011      	b.n	a5f8 <send_bat+0x94>
    a5d4:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    a5d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5dc:	781b      	ldrb	r3, [r3, #0]
    a5de:	b2db      	uxtb	r3, r3
    a5e0:	461a      	mov	r2, r3
    a5e2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a5e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5ea:	781b      	ldrb	r3, [r3, #0]
    a5ec:	1ad3      	subs	r3, r2, r3
    a5ee:	2b0c      	cmp	r3, #12
    a5f0:	bfd4      	ite	le
    a5f2:	2300      	movle	r3, #0
    a5f4:	2301      	movgt	r3, #1
    a5f6:	b2db      	uxtb	r3, r3
    a5f8:	2b00      	cmp	r3, #0
    a5fa:	f000 8358 	beq.w	acae <send_bat+0x74a>
    a5fe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a602:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a606:	781b      	ldrb	r3, [r3, #0]
    a608:	461a      	mov	r2, r3
    a60a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a60e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a612:	2105      	movs	r1, #5
    a614:	5499      	strb	r1, [r3, r2]
    a616:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a61a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a61e:	781b      	ldrb	r3, [r3, #0]
    a620:	3301      	adds	r3, #1
    a622:	b2da      	uxtb	r2, r3
    a624:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a62c:	701a      	strb	r2, [r3, #0]
    a62e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a632:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a636:	781b      	ldrb	r3, [r3, #0]
    a638:	2bff      	cmp	r3, #255	; 0xff
    a63a:	d105      	bne.n	a648 <send_bat+0xe4>
    a63c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a640:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a644:	2200      	movs	r2, #0
    a646:	701a      	strb	r2, [r3, #0]
    a648:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a64c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a650:	781b      	ldrb	r3, [r3, #0]
    a652:	461a      	mov	r2, r3
    a654:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a658:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a65c:	210c      	movs	r1, #12
    a65e:	5499      	strb	r1, [r3, r2]
    a660:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a664:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a668:	781b      	ldrb	r3, [r3, #0]
    a66a:	3301      	adds	r3, #1
    a66c:	b2da      	uxtb	r2, r3
    a66e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a672:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a676:	701a      	strb	r2, [r3, #0]
    a678:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a67c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a680:	781b      	ldrb	r3, [r3, #0]
    a682:	2bff      	cmp	r3, #255	; 0xff
    a684:	d105      	bne.n	a692 <send_bat+0x12e>
    a686:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a68a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a68e:	2200      	movs	r2, #0
    a690:	701a      	strb	r2, [r3, #0]
    a692:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a696:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a69a:	220c      	movs	r2, #12
    a69c:	701a      	strb	r2, [r3, #0]
    a69e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a6a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6a6:	220c      	movs	r2, #12
    a6a8:	701a      	strb	r2, [r3, #0]
    a6aa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a6ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6b2:	781b      	ldrb	r3, [r3, #0]
    a6b4:	461a      	mov	r2, r3
    a6b6:	f64a 239a 	movw	r3, #43674	; 0xaa9a
    a6ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6be:	7819      	ldrb	r1, [r3, #0]
    a6c0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a6c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6c8:	5499      	strb	r1, [r3, r2]
    a6ca:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a6ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6d2:	781a      	ldrb	r2, [r3, #0]
    a6d4:	f64a 239a 	movw	r3, #43674	; 0xaa9a
    a6d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6dc:	781b      	ldrb	r3, [r3, #0]
    a6de:	4413      	add	r3, r2
    a6e0:	b2da      	uxtb	r2, r3
    a6e2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a6e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6ea:	701a      	strb	r2, [r3, #0]
    a6ec:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a6f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6f4:	781a      	ldrb	r2, [r3, #0]
    a6f6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a6fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6fe:	781b      	ldrb	r3, [r3, #0]
    a700:	4413      	add	r3, r2
    a702:	b2da      	uxtb	r2, r3
    a704:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a708:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a70c:	701a      	strb	r2, [r3, #0]
    a70e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a712:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a716:	781b      	ldrb	r3, [r3, #0]
    a718:	3301      	adds	r3, #1
    a71a:	b2da      	uxtb	r2, r3
    a71c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a720:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a724:	701a      	strb	r2, [r3, #0]
    a726:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a72a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a72e:	781b      	ldrb	r3, [r3, #0]
    a730:	2bff      	cmp	r3, #255	; 0xff
    a732:	d105      	bne.n	a740 <send_bat+0x1dc>
    a734:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a738:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a73c:	2200      	movs	r2, #0
    a73e:	701a      	strb	r2, [r3, #0]
    a740:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a748:	781b      	ldrb	r3, [r3, #0]
    a74a:	461a      	mov	r2, r3
    a74c:	f24b 0394 	movw	r3, #45204	; 0xb094
    a750:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a754:	7819      	ldrb	r1, [r3, #0]
    a756:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a75a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a75e:	5499      	strb	r1, [r3, r2]
    a760:	f24b 0394 	movw	r3, #45204	; 0xb094
    a764:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a768:	781a      	ldrb	r2, [r3, #0]
    a76a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a76e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a772:	781b      	ldrb	r3, [r3, #0]
    a774:	4413      	add	r3, r2
    a776:	b2da      	uxtb	r2, r3
    a778:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a77c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a780:	701a      	strb	r2, [r3, #0]
    a782:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a786:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a78a:	781a      	ldrb	r2, [r3, #0]
    a78c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a790:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a794:	781b      	ldrb	r3, [r3, #0]
    a796:	4413      	add	r3, r2
    a798:	b2da      	uxtb	r2, r3
    a79a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a79e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7a2:	701a      	strb	r2, [r3, #0]
    a7a4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a7a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7ac:	781b      	ldrb	r3, [r3, #0]
    a7ae:	3301      	adds	r3, #1
    a7b0:	b2da      	uxtb	r2, r3
    a7b2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a7b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7ba:	701a      	strb	r2, [r3, #0]
    a7bc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a7c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7c4:	781b      	ldrb	r3, [r3, #0]
    a7c6:	2bff      	cmp	r3, #255	; 0xff
    a7c8:	d105      	bne.n	a7d6 <send_bat+0x272>
    a7ca:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a7ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7d2:	2200      	movs	r2, #0
    a7d4:	701a      	strb	r2, [r3, #0]
    a7d6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a7da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7de:	781b      	ldrb	r3, [r3, #0]
    a7e0:	461a      	mov	r2, r3
    a7e2:	f24b 0394 	movw	r3, #45204	; 0xb094
    a7e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7ea:	7859      	ldrb	r1, [r3, #1]
    a7ec:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a7f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7f4:	5499      	strb	r1, [r3, r2]
    a7f6:	4bd5      	ldr	r3, [pc, #852]	; (ab4c <send_bat+0x5e8>)
    a7f8:	781a      	ldrb	r2, [r3, #0]
    a7fa:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a7fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a802:	781b      	ldrb	r3, [r3, #0]
    a804:	4413      	add	r3, r2
    a806:	b2da      	uxtb	r2, r3
    a808:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a80c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a810:	701a      	strb	r2, [r3, #0]
    a812:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a816:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a81a:	781a      	ldrb	r2, [r3, #0]
    a81c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a820:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a824:	781b      	ldrb	r3, [r3, #0]
    a826:	4413      	add	r3, r2
    a828:	b2da      	uxtb	r2, r3
    a82a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a82e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a832:	701a      	strb	r2, [r3, #0]
    a834:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a838:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a83c:	781b      	ldrb	r3, [r3, #0]
    a83e:	3301      	adds	r3, #1
    a840:	b2da      	uxtb	r2, r3
    a842:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a846:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a84a:	701a      	strb	r2, [r3, #0]
    a84c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a850:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a854:	781b      	ldrb	r3, [r3, #0]
    a856:	2bff      	cmp	r3, #255	; 0xff
    a858:	d105      	bne.n	a866 <send_bat+0x302>
    a85a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a85e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a862:	2200      	movs	r2, #0
    a864:	701a      	strb	r2, [r3, #0]
    a866:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a86a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a86e:	781b      	ldrb	r3, [r3, #0]
    a870:	461a      	mov	r2, r3
    a872:	f64a 239d 	movw	r3, #43677	; 0xaa9d
    a876:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a87a:	7819      	ldrb	r1, [r3, #0]
    a87c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a880:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a884:	5499      	strb	r1, [r3, r2]
    a886:	f64a 239d 	movw	r3, #43677	; 0xaa9d
    a88a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a88e:	781a      	ldrb	r2, [r3, #0]
    a890:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a894:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a898:	781b      	ldrb	r3, [r3, #0]
    a89a:	4413      	add	r3, r2
    a89c:	b2da      	uxtb	r2, r3
    a89e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a8a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8a6:	701a      	strb	r2, [r3, #0]
    a8a8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a8ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8b0:	781a      	ldrb	r2, [r3, #0]
    a8b2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a8b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8ba:	781b      	ldrb	r3, [r3, #0]
    a8bc:	4413      	add	r3, r2
    a8be:	b2da      	uxtb	r2, r3
    a8c0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a8c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8c8:	701a      	strb	r2, [r3, #0]
    a8ca:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a8ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8d2:	781b      	ldrb	r3, [r3, #0]
    a8d4:	3301      	adds	r3, #1
    a8d6:	b2da      	uxtb	r2, r3
    a8d8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a8dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8e0:	701a      	strb	r2, [r3, #0]
    a8e2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a8e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8ea:	781b      	ldrb	r3, [r3, #0]
    a8ec:	2bff      	cmp	r3, #255	; 0xff
    a8ee:	d105      	bne.n	a8fc <send_bat+0x398>
    a8f0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a8f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8f8:	2200      	movs	r2, #0
    a8fa:	701a      	strb	r2, [r3, #0]
    a8fc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a900:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a904:	781b      	ldrb	r3, [r3, #0]
    a906:	461a      	mov	r2, r3
    a908:	f64a 631e 	movw	r3, #44574	; 0xae1e
    a90c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a910:	7819      	ldrb	r1, [r3, #0]
    a912:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a916:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a91a:	5499      	strb	r1, [r3, r2]
    a91c:	f64a 631e 	movw	r3, #44574	; 0xae1e
    a920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a924:	781a      	ldrb	r2, [r3, #0]
    a926:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a92a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a92e:	781b      	ldrb	r3, [r3, #0]
    a930:	4413      	add	r3, r2
    a932:	b2da      	uxtb	r2, r3
    a934:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a938:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a93c:	701a      	strb	r2, [r3, #0]
    a93e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a942:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a946:	781a      	ldrb	r2, [r3, #0]
    a948:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a94c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a950:	781b      	ldrb	r3, [r3, #0]
    a952:	4413      	add	r3, r2
    a954:	b2da      	uxtb	r2, r3
    a956:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a95a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a95e:	701a      	strb	r2, [r3, #0]
    a960:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a964:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a968:	781b      	ldrb	r3, [r3, #0]
    a96a:	3301      	adds	r3, #1
    a96c:	b2da      	uxtb	r2, r3
    a96e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a972:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a976:	701a      	strb	r2, [r3, #0]
    a978:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a97c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a980:	781b      	ldrb	r3, [r3, #0]
    a982:	2bff      	cmp	r3, #255	; 0xff
    a984:	d105      	bne.n	a992 <send_bat+0x42e>
    a986:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a98a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a98e:	2200      	movs	r2, #0
    a990:	701a      	strb	r2, [r3, #0]
    a992:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a996:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a99a:	781b      	ldrb	r3, [r3, #0]
    a99c:	461a      	mov	r2, r3
    a99e:	f64a 631e 	movw	r3, #44574	; 0xae1e
    a9a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9a6:	7859      	ldrb	r1, [r3, #1]
    a9a8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    a9ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9b0:	5499      	strb	r1, [r3, r2]
    a9b2:	4b67      	ldr	r3, [pc, #412]	; (ab50 <send_bat+0x5ec>)
    a9b4:	781a      	ldrb	r2, [r3, #0]
    a9b6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a9ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9be:	781b      	ldrb	r3, [r3, #0]
    a9c0:	4413      	add	r3, r2
    a9c2:	b2da      	uxtb	r2, r3
    a9c4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a9c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9cc:	701a      	strb	r2, [r3, #0]
    a9ce:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a9d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9d6:	781a      	ldrb	r2, [r3, #0]
    a9d8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    a9dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9e0:	781b      	ldrb	r3, [r3, #0]
    a9e2:	4413      	add	r3, r2
    a9e4:	b2da      	uxtb	r2, r3
    a9e6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    a9ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9ee:	701a      	strb	r2, [r3, #0]
    a9f0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    a9f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9f8:	781b      	ldrb	r3, [r3, #0]
    a9fa:	3301      	adds	r3, #1
    a9fc:	b2da      	uxtb	r2, r3
    a9fe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aa02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa06:	701a      	strb	r2, [r3, #0]
    aa08:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aa0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa10:	781b      	ldrb	r3, [r3, #0]
    aa12:	2bff      	cmp	r3, #255	; 0xff
    aa14:	d105      	bne.n	aa22 <send_bat+0x4be>
    aa16:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aa1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa1e:	2200      	movs	r2, #0
    aa20:	701a      	strb	r2, [r3, #0]
    aa22:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aa26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa2a:	781b      	ldrb	r3, [r3, #0]
    aa2c:	461a      	mov	r2, r3
    aa2e:	f64a 631c 	movw	r3, #44572	; 0xae1c
    aa32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa36:	7819      	ldrb	r1, [r3, #0]
    aa38:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    aa3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa40:	5499      	strb	r1, [r3, r2]
    aa42:	f64a 631c 	movw	r3, #44572	; 0xae1c
    aa46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa4a:	781a      	ldrb	r2, [r3, #0]
    aa4c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    aa50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa54:	781b      	ldrb	r3, [r3, #0]
    aa56:	4413      	add	r3, r2
    aa58:	b2da      	uxtb	r2, r3
    aa5a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    aa5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa62:	701a      	strb	r2, [r3, #0]
    aa64:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    aa68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa6c:	781a      	ldrb	r2, [r3, #0]
    aa6e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    aa72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa76:	781b      	ldrb	r3, [r3, #0]
    aa78:	4413      	add	r3, r2
    aa7a:	b2da      	uxtb	r2, r3
    aa7c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    aa80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa84:	701a      	strb	r2, [r3, #0]
    aa86:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aa8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa8e:	781b      	ldrb	r3, [r3, #0]
    aa90:	3301      	adds	r3, #1
    aa92:	b2da      	uxtb	r2, r3
    aa94:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aa98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa9c:	701a      	strb	r2, [r3, #0]
    aa9e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aaa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aaa6:	781b      	ldrb	r3, [r3, #0]
    aaa8:	2bff      	cmp	r3, #255	; 0xff
    aaaa:	d105      	bne.n	aab8 <send_bat+0x554>
    aaac:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aab4:	2200      	movs	r2, #0
    aab6:	701a      	strb	r2, [r3, #0]
    aab8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aabc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aac0:	781b      	ldrb	r3, [r3, #0]
    aac2:	461a      	mov	r2, r3
    aac4:	f64a 631c 	movw	r3, #44572	; 0xae1c
    aac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aacc:	7859      	ldrb	r1, [r3, #1]
    aace:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    aad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aad6:	5499      	strb	r1, [r3, r2]
    aad8:	4b1e      	ldr	r3, [pc, #120]	; (ab54 <send_bat+0x5f0>)
    aada:	781a      	ldrb	r2, [r3, #0]
    aadc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    aae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aae4:	781b      	ldrb	r3, [r3, #0]
    aae6:	4413      	add	r3, r2
    aae8:	b2da      	uxtb	r2, r3
    aaea:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    aaee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aaf2:	701a      	strb	r2, [r3, #0]
    aaf4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    aaf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aafc:	781a      	ldrb	r2, [r3, #0]
    aafe:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ab02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab06:	781b      	ldrb	r3, [r3, #0]
    ab08:	4413      	add	r3, r2
    ab0a:	b2da      	uxtb	r2, r3
    ab0c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ab10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab14:	701a      	strb	r2, [r3, #0]
    ab16:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ab1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab1e:	781b      	ldrb	r3, [r3, #0]
    ab20:	3301      	adds	r3, #1
    ab22:	b2da      	uxtb	r2, r3
    ab24:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ab28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab2c:	701a      	strb	r2, [r3, #0]
    ab2e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ab32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab36:	781b      	ldrb	r3, [r3, #0]
    ab38:	2bff      	cmp	r3, #255	; 0xff
    ab3a:	d10d      	bne.n	ab58 <send_bat+0x5f4>
    ab3c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ab40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab44:	2200      	movs	r2, #0
    ab46:	701a      	strb	r2, [r3, #0]
    ab48:	e006      	b.n	ab58 <send_bat+0x5f4>
    ab4a:	bf00      	nop
    ab4c:	2000b095 	.word	0x2000b095
    ab50:	2000ae1f 	.word	0x2000ae1f
    ab54:	2000ae1d 	.word	0x2000ae1d
    ab58:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ab5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab60:	781b      	ldrb	r3, [r3, #0]
    ab62:	461a      	mov	r2, r3
    ab64:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ab68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab6c:	7819      	ldrb	r1, [r3, #0]
    ab6e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ab72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab76:	5499      	strb	r1, [r3, r2]
    ab78:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ab7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab80:	781b      	ldrb	r3, [r3, #0]
    ab82:	3301      	adds	r3, #1
    ab84:	b2da      	uxtb	r2, r3
    ab86:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ab8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab8e:	701a      	strb	r2, [r3, #0]
    ab90:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ab94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab98:	781b      	ldrb	r3, [r3, #0]
    ab9a:	2bff      	cmp	r3, #255	; 0xff
    ab9c:	d105      	bne.n	abaa <send_bat+0x646>
    ab9e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aba2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aba6:	2200      	movs	r2, #0
    aba8:	701a      	strb	r2, [r3, #0]
    abaa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    abae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abb2:	781b      	ldrb	r3, [r3, #0]
    abb4:	461a      	mov	r2, r3
    abb6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    abba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abbe:	7819      	ldrb	r1, [r3, #0]
    abc0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    abc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abc8:	5499      	strb	r1, [r3, r2]
    abca:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    abce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abd2:	781b      	ldrb	r3, [r3, #0]
    abd4:	3301      	adds	r3, #1
    abd6:	b2da      	uxtb	r2, r3
    abd8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    abdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abe0:	701a      	strb	r2, [r3, #0]
    abe2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    abe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abea:	781b      	ldrb	r3, [r3, #0]
    abec:	2bff      	cmp	r3, #255	; 0xff
    abee:	d105      	bne.n	abfc <send_bat+0x698>
    abf0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    abf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abf8:	2200      	movs	r2, #0
    abfa:	701a      	strb	r2, [r3, #0]
    abfc:	f242 0339 	movw	r3, #8249	; 0x2039
    ac00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac04:	781b      	ldrb	r3, [r3, #0]
    ac06:	b2db      	uxtb	r3, r3
    ac08:	f003 0310 	and.w	r3, r3, #16
    ac0c:	2b00      	cmp	r3, #0
    ac0e:	d15a      	bne.n	acc6 <send_bat+0x762>
    ac10:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    ac14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac18:	781b      	ldrb	r3, [r3, #0]
    ac1a:	b2db      	uxtb	r3, r3
    ac1c:	461a      	mov	r2, r3
    ac1e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ac22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac26:	5c9a      	ldrb	r2, [r3, r2]
    ac28:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    ac2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac30:	701a      	strb	r2, [r3, #0]
    ac32:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    ac36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac3a:	2200      	movs	r2, #0
    ac3c:	701a      	strb	r2, [r3, #0]
    ac3e:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    ac42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac46:	781b      	ldrb	r3, [r3, #0]
    ac48:	b2db      	uxtb	r3, r3
    ac4a:	3301      	adds	r3, #1
    ac4c:	b2da      	uxtb	r2, r3
    ac4e:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    ac52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac56:	701a      	strb	r2, [r3, #0]
    ac58:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    ac5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac60:	781b      	ldrb	r3, [r3, #0]
    ac62:	b2db      	uxtb	r3, r3
    ac64:	2bff      	cmp	r3, #255	; 0xff
    ac66:	d105      	bne.n	ac74 <send_bat+0x710>
    ac68:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    ac6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac70:	2200      	movs	r2, #0
    ac72:	701a      	strb	r2, [r3, #0]
    ac74:	f242 0338 	movw	r3, #8248	; 0x2038
    ac78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac7c:	f242 0238 	movw	r2, #8248	; 0x2038
    ac80:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ac84:	7812      	ldrb	r2, [r2, #0]
    ac86:	b2d2      	uxtb	r2, r2
    ac88:	f042 0201 	orr.w	r2, r2, #1
    ac8c:	b2d2      	uxtb	r2, r2
    ac8e:	701a      	strb	r2, [r3, #0]
    ac90:	f242 0339 	movw	r3, #8249	; 0x2039
    ac94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac98:	f242 0239 	movw	r2, #8249	; 0x2039
    ac9c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    aca0:	7812      	ldrb	r2, [r2, #0]
    aca2:	b2d2      	uxtb	r2, r2
    aca4:	f042 0210 	orr.w	r2, r2, #16
    aca8:	b2d2      	uxtb	r2, r2
    acaa:	701a      	strb	r2, [r3, #0]
    acac:	e00b      	b.n	acc6 <send_bat+0x762>
    acae:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    acb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acb6:	781b      	ldrb	r3, [r3, #0]
    acb8:	3301      	adds	r3, #1
    acba:	b2da      	uxtb	r2, r3
    acbc:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    acc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acc4:	701a      	strb	r2, [r3, #0]
}
    acc6:	46bd      	mov	sp, r7
    acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    accc:	4770      	bx	lr
    acce:	bf00      	nop

0000acd0 <send_climb>:
void send_climb(void){  //2000ms
    acd0:	b480      	push	{r7}
    acd2:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 18) PERIODIC_SEND_CLIMB_PID();}
    acd4:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    acd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acdc:	781a      	ldrb	r2, [r3, #0]
    acde:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    ace2:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    ace6:	fba3 1302 	umull	r1, r3, r3, r2
    acea:	0919      	lsrs	r1, r3, #4
    acec:	460b      	mov	r3, r1
    acee:	009b      	lsls	r3, r3, #2
    acf0:	440b      	add	r3, r1
    acf2:	009b      	lsls	r3, r3, #2
    acf4:	1ad3      	subs	r3, r2, r3
    acf6:	b2db      	uxtb	r3, r3
    acf8:	2b12      	cmp	r3, #18
    acfa:	f040 8554 	bne.w	b7a6 <send_climb+0xad6>
    acfe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ad02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad06:	781a      	ldrb	r2, [r3, #0]
    ad08:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    ad0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad10:	781b      	ldrb	r3, [r3, #0]
    ad12:	b2db      	uxtb	r3, r3
    ad14:	429a      	cmp	r2, r3
    ad16:	d313      	bcc.n	ad40 <send_climb+0x70>
    ad18:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    ad1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad20:	781b      	ldrb	r3, [r3, #0]
    ad22:	b2db      	uxtb	r3, r3
    ad24:	461a      	mov	r2, r3
    ad26:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ad2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad2e:	781b      	ldrb	r3, [r3, #0]
    ad30:	1ad3      	subs	r3, r2, r3
    ad32:	33ff      	adds	r3, #255	; 0xff
    ad34:	2b12      	cmp	r3, #18
    ad36:	bfd4      	ite	le
    ad38:	2300      	movle	r3, #0
    ad3a:	2301      	movgt	r3, #1
    ad3c:	b2db      	uxtb	r3, r3
    ad3e:	e011      	b.n	ad64 <send_climb+0x94>
    ad40:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    ad44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad48:	781b      	ldrb	r3, [r3, #0]
    ad4a:	b2db      	uxtb	r3, r3
    ad4c:	461a      	mov	r2, r3
    ad4e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ad52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad56:	781b      	ldrb	r3, [r3, #0]
    ad58:	1ad3      	subs	r3, r2, r3
    ad5a:	2b12      	cmp	r3, #18
    ad5c:	bfd4      	ite	le
    ad5e:	2300      	movle	r3, #0
    ad60:	2301      	movgt	r3, #1
    ad62:	b2db      	uxtb	r3, r3
    ad64:	2b00      	cmp	r3, #0
    ad66:	f000 8512 	beq.w	b78e <send_climb+0xabe>
    ad6a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ad6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad72:	781b      	ldrb	r3, [r3, #0]
    ad74:	461a      	mov	r2, r3
    ad76:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ad7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad7e:	2105      	movs	r1, #5
    ad80:	5499      	strb	r1, [r3, r2]
    ad82:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ad86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad8a:	781b      	ldrb	r3, [r3, #0]
    ad8c:	3301      	adds	r3, #1
    ad8e:	b2da      	uxtb	r2, r3
    ad90:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ad94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad98:	701a      	strb	r2, [r3, #0]
    ad9a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ad9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ada2:	781b      	ldrb	r3, [r3, #0]
    ada4:	2bff      	cmp	r3, #255	; 0xff
    ada6:	d105      	bne.n	adb4 <send_climb+0xe4>
    ada8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    adac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adb0:	2200      	movs	r2, #0
    adb2:	701a      	strb	r2, [r3, #0]
    adb4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    adb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adbc:	781b      	ldrb	r3, [r3, #0]
    adbe:	461a      	mov	r2, r3
    adc0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    adc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adc8:	210e      	movs	r1, #14
    adca:	5499      	strb	r1, [r3, r2]
    adcc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    add0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    add4:	781b      	ldrb	r3, [r3, #0]
    add6:	3301      	adds	r3, #1
    add8:	b2da      	uxtb	r2, r3
    adda:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    adde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ade2:	701a      	strb	r2, [r3, #0]
    ade4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ade8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adec:	781b      	ldrb	r3, [r3, #0]
    adee:	2bff      	cmp	r3, #255	; 0xff
    adf0:	d105      	bne.n	adfe <send_climb+0x12e>
    adf2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    adf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adfa:	2200      	movs	r2, #0
    adfc:	701a      	strb	r2, [r3, #0]
    adfe:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ae02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae06:	220e      	movs	r2, #14
    ae08:	701a      	strb	r2, [r3, #0]
    ae0a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ae0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae12:	220e      	movs	r2, #14
    ae14:	701a      	strb	r2, [r3, #0]
    ae16:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ae1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae1e:	781b      	ldrb	r3, [r3, #0]
    ae20:	461a      	mov	r2, r3
    ae22:	f64a 53e4 	movw	r3, #44516	; 0xade4
    ae26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae2a:	7819      	ldrb	r1, [r3, #0]
    ae2c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ae30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae34:	5499      	strb	r1, [r3, r2]
    ae36:	f64a 53e4 	movw	r3, #44516	; 0xade4
    ae3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae3e:	781a      	ldrb	r2, [r3, #0]
    ae40:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ae44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae48:	781b      	ldrb	r3, [r3, #0]
    ae4a:	4413      	add	r3, r2
    ae4c:	b2da      	uxtb	r2, r3
    ae4e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ae52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae56:	701a      	strb	r2, [r3, #0]
    ae58:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ae5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae60:	781a      	ldrb	r2, [r3, #0]
    ae62:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ae66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae6a:	781b      	ldrb	r3, [r3, #0]
    ae6c:	4413      	add	r3, r2
    ae6e:	b2da      	uxtb	r2, r3
    ae70:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ae74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae78:	701a      	strb	r2, [r3, #0]
    ae7a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ae7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae82:	781b      	ldrb	r3, [r3, #0]
    ae84:	3301      	adds	r3, #1
    ae86:	b2da      	uxtb	r2, r3
    ae88:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ae8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae90:	701a      	strb	r2, [r3, #0]
    ae92:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ae96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae9a:	781b      	ldrb	r3, [r3, #0]
    ae9c:	2bff      	cmp	r3, #255	; 0xff
    ae9e:	d105      	bne.n	aeac <send_climb+0x1dc>
    aea0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aea8:	2200      	movs	r2, #0
    aeaa:	701a      	strb	r2, [r3, #0]
    aeac:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    aeb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aeb4:	781b      	ldrb	r3, [r3, #0]
    aeb6:	461a      	mov	r2, r3
    aeb8:	f64a 53e4 	movw	r3, #44516	; 0xade4
    aebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aec0:	7859      	ldrb	r1, [r3, #1]
    aec2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    aec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aeca:	5499      	strb	r1, [r3, r2]
    aecc:	4bd3      	ldr	r3, [pc, #844]	; (b21c <send_climb+0x54c>)
    aece:	781a      	ldrb	r2, [r3, #0]
    aed0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    aed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aed8:	781b      	ldrb	r3, [r3, #0]
    aeda:	4413      	add	r3, r2
    aedc:	b2da      	uxtb	r2, r3
    aede:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    aee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aee6:	701a      	strb	r2, [r3, #0]
    aee8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    aeec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aef0:	781a      	ldrb	r2, [r3, #0]
    aef2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    aef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aefa:	781b      	ldrb	r3, [r3, #0]
    aefc:	4413      	add	r3, r2
    aefe:	b2da      	uxtb	r2, r3
    af00:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    af04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af08:	701a      	strb	r2, [r3, #0]
    af0a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    af0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af12:	781b      	ldrb	r3, [r3, #0]
    af14:	3301      	adds	r3, #1
    af16:	b2da      	uxtb	r2, r3
    af18:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    af1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af20:	701a      	strb	r2, [r3, #0]
    af22:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    af26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af2a:	781b      	ldrb	r3, [r3, #0]
    af2c:	2bff      	cmp	r3, #255	; 0xff
    af2e:	d105      	bne.n	af3c <send_climb+0x26c>
    af30:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    af34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af38:	2200      	movs	r2, #0
    af3a:	701a      	strb	r2, [r3, #0]
    af3c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    af40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af44:	781b      	ldrb	r3, [r3, #0]
    af46:	461a      	mov	r2, r3
    af48:	f64a 53f8 	movw	r3, #44536	; 0xadf8
    af4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af50:	7819      	ldrb	r1, [r3, #0]
    af52:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    af56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af5a:	5499      	strb	r1, [r3, r2]
    af5c:	f64a 53f8 	movw	r3, #44536	; 0xadf8
    af60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af64:	781a      	ldrb	r2, [r3, #0]
    af66:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    af6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af6e:	781b      	ldrb	r3, [r3, #0]
    af70:	4413      	add	r3, r2
    af72:	b2da      	uxtb	r2, r3
    af74:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    af78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af7c:	701a      	strb	r2, [r3, #0]
    af7e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    af82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af86:	781a      	ldrb	r2, [r3, #0]
    af88:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    af8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af90:	781b      	ldrb	r3, [r3, #0]
    af92:	4413      	add	r3, r2
    af94:	b2da      	uxtb	r2, r3
    af96:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    af9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af9e:	701a      	strb	r2, [r3, #0]
    afa0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    afa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afa8:	781b      	ldrb	r3, [r3, #0]
    afaa:	3301      	adds	r3, #1
    afac:	b2da      	uxtb	r2, r3
    afae:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    afb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afb6:	701a      	strb	r2, [r3, #0]
    afb8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    afbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afc0:	781b      	ldrb	r3, [r3, #0]
    afc2:	2bff      	cmp	r3, #255	; 0xff
    afc4:	d105      	bne.n	afd2 <send_climb+0x302>
    afc6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    afca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afce:	2200      	movs	r2, #0
    afd0:	701a      	strb	r2, [r3, #0]
    afd2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    afd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afda:	781b      	ldrb	r3, [r3, #0]
    afdc:	461a      	mov	r2, r3
    afde:	f64a 53f8 	movw	r3, #44536	; 0xadf8
    afe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afe6:	7859      	ldrb	r1, [r3, #1]
    afe8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    afec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aff0:	5499      	strb	r1, [r3, r2]
    aff2:	4b8b      	ldr	r3, [pc, #556]	; (b220 <send_climb+0x550>)
    aff4:	781a      	ldrb	r2, [r3, #0]
    aff6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    affa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    affe:	781b      	ldrb	r3, [r3, #0]
    b000:	4413      	add	r3, r2
    b002:	b2da      	uxtb	r2, r3
    b004:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b008:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b00c:	701a      	strb	r2, [r3, #0]
    b00e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b012:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b016:	781a      	ldrb	r2, [r3, #0]
    b018:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b01c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b020:	781b      	ldrb	r3, [r3, #0]
    b022:	4413      	add	r3, r2
    b024:	b2da      	uxtb	r2, r3
    b026:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b02a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b02e:	701a      	strb	r2, [r3, #0]
    b030:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b034:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b038:	781b      	ldrb	r3, [r3, #0]
    b03a:	3301      	adds	r3, #1
    b03c:	b2da      	uxtb	r2, r3
    b03e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b042:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b046:	701a      	strb	r2, [r3, #0]
    b048:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b04c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b050:	781b      	ldrb	r3, [r3, #0]
    b052:	2bff      	cmp	r3, #255	; 0xff
    b054:	d105      	bne.n	b062 <send_climb+0x392>
    b056:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b05a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b05e:	2200      	movs	r2, #0
    b060:	701a      	strb	r2, [r3, #0]
    b062:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b066:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b06a:	781b      	ldrb	r3, [r3, #0]
    b06c:	461a      	mov	r2, r3
    b06e:	f64a 53f8 	movw	r3, #44536	; 0xadf8
    b072:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b076:	7899      	ldrb	r1, [r3, #2]
    b078:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b07c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b080:	5499      	strb	r1, [r3, r2]
    b082:	4b68      	ldr	r3, [pc, #416]	; (b224 <send_climb+0x554>)
    b084:	781a      	ldrb	r2, [r3, #0]
    b086:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b08a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b08e:	781b      	ldrb	r3, [r3, #0]
    b090:	4413      	add	r3, r2
    b092:	b2da      	uxtb	r2, r3
    b094:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b098:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b09c:	701a      	strb	r2, [r3, #0]
    b09e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b0a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0a6:	781a      	ldrb	r2, [r3, #0]
    b0a8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b0ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0b0:	781b      	ldrb	r3, [r3, #0]
    b0b2:	4413      	add	r3, r2
    b0b4:	b2da      	uxtb	r2, r3
    b0b6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b0ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0be:	701a      	strb	r2, [r3, #0]
    b0c0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b0c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0c8:	781b      	ldrb	r3, [r3, #0]
    b0ca:	3301      	adds	r3, #1
    b0cc:	b2da      	uxtb	r2, r3
    b0ce:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b0d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0d6:	701a      	strb	r2, [r3, #0]
    b0d8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b0dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0e0:	781b      	ldrb	r3, [r3, #0]
    b0e2:	2bff      	cmp	r3, #255	; 0xff
    b0e4:	d105      	bne.n	b0f2 <send_climb+0x422>
    b0e6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b0ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0ee:	2200      	movs	r2, #0
    b0f0:	701a      	strb	r2, [r3, #0]
    b0f2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b0f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0fa:	781b      	ldrb	r3, [r3, #0]
    b0fc:	461a      	mov	r2, r3
    b0fe:	f64a 53f8 	movw	r3, #44536	; 0xadf8
    b102:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b106:	78d9      	ldrb	r1, [r3, #3]
    b108:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b10c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b110:	5499      	strb	r1, [r3, r2]
    b112:	4b45      	ldr	r3, [pc, #276]	; (b228 <send_climb+0x558>)
    b114:	781a      	ldrb	r2, [r3, #0]
    b116:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b11a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b11e:	781b      	ldrb	r3, [r3, #0]
    b120:	4413      	add	r3, r2
    b122:	b2da      	uxtb	r2, r3
    b124:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b128:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b12c:	701a      	strb	r2, [r3, #0]
    b12e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b132:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b136:	781a      	ldrb	r2, [r3, #0]
    b138:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b13c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b140:	781b      	ldrb	r3, [r3, #0]
    b142:	4413      	add	r3, r2
    b144:	b2da      	uxtb	r2, r3
    b146:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b14a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b14e:	701a      	strb	r2, [r3, #0]
    b150:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b154:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b158:	781b      	ldrb	r3, [r3, #0]
    b15a:	3301      	adds	r3, #1
    b15c:	b2da      	uxtb	r2, r3
    b15e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b162:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b166:	701a      	strb	r2, [r3, #0]
    b168:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b16c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b170:	781b      	ldrb	r3, [r3, #0]
    b172:	2bff      	cmp	r3, #255	; 0xff
    b174:	d105      	bne.n	b182 <send_climb+0x4b2>
    b176:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b17a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b17e:	2200      	movs	r2, #0
    b180:	701a      	strb	r2, [r3, #0]
    b182:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b186:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b18a:	781b      	ldrb	r3, [r3, #0]
    b18c:	461a      	mov	r2, r3
    b18e:	f64a 6300 	movw	r3, #44544	; 0xae00
    b192:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b196:	7819      	ldrb	r1, [r3, #0]
    b198:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b19c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1a0:	5499      	strb	r1, [r3, r2]
    b1a2:	f64a 6300 	movw	r3, #44544	; 0xae00
    b1a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1aa:	781a      	ldrb	r2, [r3, #0]
    b1ac:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b1b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1b4:	781b      	ldrb	r3, [r3, #0]
    b1b6:	4413      	add	r3, r2
    b1b8:	b2da      	uxtb	r2, r3
    b1ba:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b1be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1c2:	701a      	strb	r2, [r3, #0]
    b1c4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b1c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1cc:	781a      	ldrb	r2, [r3, #0]
    b1ce:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b1d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1d6:	781b      	ldrb	r3, [r3, #0]
    b1d8:	4413      	add	r3, r2
    b1da:	b2da      	uxtb	r2, r3
    b1dc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b1e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1e4:	701a      	strb	r2, [r3, #0]
    b1e6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b1ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1ee:	781b      	ldrb	r3, [r3, #0]
    b1f0:	3301      	adds	r3, #1
    b1f2:	b2da      	uxtb	r2, r3
    b1f4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b1f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1fc:	701a      	strb	r2, [r3, #0]
    b1fe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b202:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b206:	781b      	ldrb	r3, [r3, #0]
    b208:	2bff      	cmp	r3, #255	; 0xff
    b20a:	d10f      	bne.n	b22c <send_climb+0x55c>
    b20c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b210:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b214:	2200      	movs	r2, #0
    b216:	701a      	strb	r2, [r3, #0]
    b218:	e008      	b.n	b22c <send_climb+0x55c>
    b21a:	bf00      	nop
    b21c:	2000ade5 	.word	0x2000ade5
    b220:	2000adf9 	.word	0x2000adf9
    b224:	2000adfa 	.word	0x2000adfa
    b228:	2000adfb 	.word	0x2000adfb
    b22c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b230:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b234:	781b      	ldrb	r3, [r3, #0]
    b236:	461a      	mov	r2, r3
    b238:	f64a 6300 	movw	r3, #44544	; 0xae00
    b23c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b240:	7859      	ldrb	r1, [r3, #1]
    b242:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b246:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b24a:	5499      	strb	r1, [r3, r2]
    b24c:	4bd1      	ldr	r3, [pc, #836]	; (b594 <send_climb+0x8c4>)
    b24e:	781a      	ldrb	r2, [r3, #0]
    b250:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b254:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b258:	781b      	ldrb	r3, [r3, #0]
    b25a:	4413      	add	r3, r2
    b25c:	b2da      	uxtb	r2, r3
    b25e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b262:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b266:	701a      	strb	r2, [r3, #0]
    b268:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b26c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b270:	781a      	ldrb	r2, [r3, #0]
    b272:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b276:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b27a:	781b      	ldrb	r3, [r3, #0]
    b27c:	4413      	add	r3, r2
    b27e:	b2da      	uxtb	r2, r3
    b280:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b284:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b288:	701a      	strb	r2, [r3, #0]
    b28a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b28e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b292:	781b      	ldrb	r3, [r3, #0]
    b294:	3301      	adds	r3, #1
    b296:	b2da      	uxtb	r2, r3
    b298:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b29c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2a0:	701a      	strb	r2, [r3, #0]
    b2a2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b2a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2aa:	781b      	ldrb	r3, [r3, #0]
    b2ac:	2bff      	cmp	r3, #255	; 0xff
    b2ae:	d105      	bne.n	b2bc <send_climb+0x5ec>
    b2b0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b2b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2b8:	2200      	movs	r2, #0
    b2ba:	701a      	strb	r2, [r3, #0]
    b2bc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b2c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2c4:	781b      	ldrb	r3, [r3, #0]
    b2c6:	461a      	mov	r2, r3
    b2c8:	f64a 6300 	movw	r3, #44544	; 0xae00
    b2cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2d0:	7899      	ldrb	r1, [r3, #2]
    b2d2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b2d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2da:	5499      	strb	r1, [r3, r2]
    b2dc:	4bae      	ldr	r3, [pc, #696]	; (b598 <send_climb+0x8c8>)
    b2de:	781a      	ldrb	r2, [r3, #0]
    b2e0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b2e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2e8:	781b      	ldrb	r3, [r3, #0]
    b2ea:	4413      	add	r3, r2
    b2ec:	b2da      	uxtb	r2, r3
    b2ee:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b2f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2f6:	701a      	strb	r2, [r3, #0]
    b2f8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b2fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b300:	781a      	ldrb	r2, [r3, #0]
    b302:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b306:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b30a:	781b      	ldrb	r3, [r3, #0]
    b30c:	4413      	add	r3, r2
    b30e:	b2da      	uxtb	r2, r3
    b310:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b314:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b318:	701a      	strb	r2, [r3, #0]
    b31a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b31e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b322:	781b      	ldrb	r3, [r3, #0]
    b324:	3301      	adds	r3, #1
    b326:	b2da      	uxtb	r2, r3
    b328:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b32c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b330:	701a      	strb	r2, [r3, #0]
    b332:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b336:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b33a:	781b      	ldrb	r3, [r3, #0]
    b33c:	2bff      	cmp	r3, #255	; 0xff
    b33e:	d105      	bne.n	b34c <send_climb+0x67c>
    b340:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b344:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b348:	2200      	movs	r2, #0
    b34a:	701a      	strb	r2, [r3, #0]
    b34c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b350:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b354:	781b      	ldrb	r3, [r3, #0]
    b356:	461a      	mov	r2, r3
    b358:	f64a 6300 	movw	r3, #44544	; 0xae00
    b35c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b360:	78d9      	ldrb	r1, [r3, #3]
    b362:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b366:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b36a:	5499      	strb	r1, [r3, r2]
    b36c:	4b8b      	ldr	r3, [pc, #556]	; (b59c <send_climb+0x8cc>)
    b36e:	781a      	ldrb	r2, [r3, #0]
    b370:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b374:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b378:	781b      	ldrb	r3, [r3, #0]
    b37a:	4413      	add	r3, r2
    b37c:	b2da      	uxtb	r2, r3
    b37e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b382:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b386:	701a      	strb	r2, [r3, #0]
    b388:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b38c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b390:	781a      	ldrb	r2, [r3, #0]
    b392:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b396:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b39a:	781b      	ldrb	r3, [r3, #0]
    b39c:	4413      	add	r3, r2
    b39e:	b2da      	uxtb	r2, r3
    b3a0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b3a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3a8:	701a      	strb	r2, [r3, #0]
    b3aa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b3ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3b2:	781b      	ldrb	r3, [r3, #0]
    b3b4:	3301      	adds	r3, #1
    b3b6:	b2da      	uxtb	r2, r3
    b3b8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b3bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3c0:	701a      	strb	r2, [r3, #0]
    b3c2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b3c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3ca:	781b      	ldrb	r3, [r3, #0]
    b3cc:	2bff      	cmp	r3, #255	; 0xff
    b3ce:	d105      	bne.n	b3dc <send_climb+0x70c>
    b3d0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b3d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3d8:	2200      	movs	r2, #0
    b3da:	701a      	strb	r2, [r3, #0]
    b3dc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b3e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3e4:	781b      	ldrb	r3, [r3, #0]
    b3e6:	461a      	mov	r2, r3
    b3e8:	f648 1350 	movw	r3, #35152	; 0x8950
    b3ec:	f2c0 0301 	movt	r3, #1
    b3f0:	7819      	ldrb	r1, [r3, #0]
    b3f2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b3f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3fa:	5499      	strb	r1, [r3, r2]
    b3fc:	f648 1350 	movw	r3, #35152	; 0x8950
    b400:	f2c0 0301 	movt	r3, #1
    b404:	781a      	ldrb	r2, [r3, #0]
    b406:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b40a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b40e:	781b      	ldrb	r3, [r3, #0]
    b410:	4413      	add	r3, r2
    b412:	b2da      	uxtb	r2, r3
    b414:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b41c:	701a      	strb	r2, [r3, #0]
    b41e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b422:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b426:	781a      	ldrb	r2, [r3, #0]
    b428:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b430:	781b      	ldrb	r3, [r3, #0]
    b432:	4413      	add	r3, r2
    b434:	b2da      	uxtb	r2, r3
    b436:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b43a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b43e:	701a      	strb	r2, [r3, #0]
    b440:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b444:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b448:	781b      	ldrb	r3, [r3, #0]
    b44a:	3301      	adds	r3, #1
    b44c:	b2da      	uxtb	r2, r3
    b44e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b452:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b456:	701a      	strb	r2, [r3, #0]
    b458:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b45c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b460:	781b      	ldrb	r3, [r3, #0]
    b462:	2bff      	cmp	r3, #255	; 0xff
    b464:	d105      	bne.n	b472 <send_climb+0x7a2>
    b466:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b46a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b46e:	2200      	movs	r2, #0
    b470:	701a      	strb	r2, [r3, #0]
    b472:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b476:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b47a:	781b      	ldrb	r3, [r3, #0]
    b47c:	461a      	mov	r2, r3
    b47e:	f648 1350 	movw	r3, #35152	; 0x8950
    b482:	f2c0 0301 	movt	r3, #1
    b486:	7859      	ldrb	r1, [r3, #1]
    b488:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b48c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b490:	5499      	strb	r1, [r3, r2]
    b492:	4b43      	ldr	r3, [pc, #268]	; (b5a0 <send_climb+0x8d0>)
    b494:	781a      	ldrb	r2, [r3, #0]
    b496:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b49a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b49e:	781b      	ldrb	r3, [r3, #0]
    b4a0:	4413      	add	r3, r2
    b4a2:	b2da      	uxtb	r2, r3
    b4a4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4ac:	701a      	strb	r2, [r3, #0]
    b4ae:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b4b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4b6:	781a      	ldrb	r2, [r3, #0]
    b4b8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b4bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4c0:	781b      	ldrb	r3, [r3, #0]
    b4c2:	4413      	add	r3, r2
    b4c4:	b2da      	uxtb	r2, r3
    b4c6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b4ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4ce:	701a      	strb	r2, [r3, #0]
    b4d0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b4d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4d8:	781b      	ldrb	r3, [r3, #0]
    b4da:	3301      	adds	r3, #1
    b4dc:	b2da      	uxtb	r2, r3
    b4de:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b4e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4e6:	701a      	strb	r2, [r3, #0]
    b4e8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b4ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4f0:	781b      	ldrb	r3, [r3, #0]
    b4f2:	2bff      	cmp	r3, #255	; 0xff
    b4f4:	d105      	bne.n	b502 <send_climb+0x832>
    b4f6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b4fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4fe:	2200      	movs	r2, #0
    b500:	701a      	strb	r2, [r3, #0]
    b502:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b50a:	781b      	ldrb	r3, [r3, #0]
    b50c:	461a      	mov	r2, r3
    b50e:	f648 1350 	movw	r3, #35152	; 0x8950
    b512:	f2c0 0301 	movt	r3, #1
    b516:	7899      	ldrb	r1, [r3, #2]
    b518:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b51c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b520:	5499      	strb	r1, [r3, r2]
    b522:	4b20      	ldr	r3, [pc, #128]	; (b5a4 <send_climb+0x8d4>)
    b524:	781a      	ldrb	r2, [r3, #0]
    b526:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b52a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b52e:	781b      	ldrb	r3, [r3, #0]
    b530:	4413      	add	r3, r2
    b532:	b2da      	uxtb	r2, r3
    b534:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b538:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b53c:	701a      	strb	r2, [r3, #0]
    b53e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b542:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b546:	781a      	ldrb	r2, [r3, #0]
    b548:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b54c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b550:	781b      	ldrb	r3, [r3, #0]
    b552:	4413      	add	r3, r2
    b554:	b2da      	uxtb	r2, r3
    b556:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b55a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b55e:	701a      	strb	r2, [r3, #0]
    b560:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b564:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b568:	781b      	ldrb	r3, [r3, #0]
    b56a:	3301      	adds	r3, #1
    b56c:	b2da      	uxtb	r2, r3
    b56e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b572:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b576:	701a      	strb	r2, [r3, #0]
    b578:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b57c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b580:	781b      	ldrb	r3, [r3, #0]
    b582:	2bff      	cmp	r3, #255	; 0xff
    b584:	d110      	bne.n	b5a8 <send_climb+0x8d8>
    b586:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b58a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b58e:	2200      	movs	r2, #0
    b590:	701a      	strb	r2, [r3, #0]
    b592:	e009      	b.n	b5a8 <send_climb+0x8d8>
    b594:	2000ae01 	.word	0x2000ae01
    b598:	2000ae02 	.word	0x2000ae02
    b59c:	2000ae03 	.word	0x2000ae03
    b5a0:	00018951 	.word	0x00018951
    b5a4:	00018952 	.word	0x00018952
    b5a8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b5ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5b0:	781b      	ldrb	r3, [r3, #0]
    b5b2:	461a      	mov	r2, r3
    b5b4:	f648 1350 	movw	r3, #35152	; 0x8950
    b5b8:	f2c0 0301 	movt	r3, #1
    b5bc:	78d9      	ldrb	r1, [r3, #3]
    b5be:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b5c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5c6:	5499      	strb	r1, [r3, r2]
    b5c8:	4b79      	ldr	r3, [pc, #484]	; (b7b0 <send_climb+0xae0>)
    b5ca:	781a      	ldrb	r2, [r3, #0]
    b5cc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b5d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5d4:	781b      	ldrb	r3, [r3, #0]
    b5d6:	4413      	add	r3, r2
    b5d8:	b2da      	uxtb	r2, r3
    b5da:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b5de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5e2:	701a      	strb	r2, [r3, #0]
    b5e4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b5e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5ec:	781a      	ldrb	r2, [r3, #0]
    b5ee:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b5f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5f6:	781b      	ldrb	r3, [r3, #0]
    b5f8:	4413      	add	r3, r2
    b5fa:	b2da      	uxtb	r2, r3
    b5fc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b600:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b604:	701a      	strb	r2, [r3, #0]
    b606:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b60a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b60e:	781b      	ldrb	r3, [r3, #0]
    b610:	3301      	adds	r3, #1
    b612:	b2da      	uxtb	r2, r3
    b614:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b618:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b61c:	701a      	strb	r2, [r3, #0]
    b61e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b622:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b626:	781b      	ldrb	r3, [r3, #0]
    b628:	2bff      	cmp	r3, #255	; 0xff
    b62a:	d105      	bne.n	b638 <send_climb+0x968>
    b62c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b630:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b634:	2200      	movs	r2, #0
    b636:	701a      	strb	r2, [r3, #0]
    b638:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b63c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b640:	781b      	ldrb	r3, [r3, #0]
    b642:	461a      	mov	r2, r3
    b644:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b648:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b64c:	7819      	ldrb	r1, [r3, #0]
    b64e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b652:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b656:	5499      	strb	r1, [r3, r2]
    b658:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b65c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b660:	781b      	ldrb	r3, [r3, #0]
    b662:	3301      	adds	r3, #1
    b664:	b2da      	uxtb	r2, r3
    b666:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b66a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b66e:	701a      	strb	r2, [r3, #0]
    b670:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b674:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b678:	781b      	ldrb	r3, [r3, #0]
    b67a:	2bff      	cmp	r3, #255	; 0xff
    b67c:	d105      	bne.n	b68a <send_climb+0x9ba>
    b67e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b686:	2200      	movs	r2, #0
    b688:	701a      	strb	r2, [r3, #0]
    b68a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b68e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b692:	781b      	ldrb	r3, [r3, #0]
    b694:	461a      	mov	r2, r3
    b696:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b69a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b69e:	7819      	ldrb	r1, [r3, #0]
    b6a0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b6a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6a8:	5499      	strb	r1, [r3, r2]
    b6aa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b6ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6b2:	781b      	ldrb	r3, [r3, #0]
    b6b4:	3301      	adds	r3, #1
    b6b6:	b2da      	uxtb	r2, r3
    b6b8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b6bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6c0:	701a      	strb	r2, [r3, #0]
    b6c2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b6c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6ca:	781b      	ldrb	r3, [r3, #0]
    b6cc:	2bff      	cmp	r3, #255	; 0xff
    b6ce:	d105      	bne.n	b6dc <send_climb+0xa0c>
    b6d0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b6d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6d8:	2200      	movs	r2, #0
    b6da:	701a      	strb	r2, [r3, #0]
    b6dc:	f242 0339 	movw	r3, #8249	; 0x2039
    b6e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6e4:	781b      	ldrb	r3, [r3, #0]
    b6e6:	b2db      	uxtb	r3, r3
    b6e8:	f003 0310 	and.w	r3, r3, #16
    b6ec:	2b00      	cmp	r3, #0
    b6ee:	d15a      	bne.n	b7a6 <send_climb+0xad6>
    b6f0:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    b6f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6f8:	781b      	ldrb	r3, [r3, #0]
    b6fa:	b2db      	uxtb	r3, r3
    b6fc:	461a      	mov	r2, r3
    b6fe:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b702:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b706:	5c9a      	ldrb	r2, [r3, r2]
    b708:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    b70c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b710:	701a      	strb	r2, [r3, #0]
    b712:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    b716:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b71a:	2200      	movs	r2, #0
    b71c:	701a      	strb	r2, [r3, #0]
    b71e:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    b722:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b726:	781b      	ldrb	r3, [r3, #0]
    b728:	b2db      	uxtb	r3, r3
    b72a:	3301      	adds	r3, #1
    b72c:	b2da      	uxtb	r2, r3
    b72e:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    b732:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b736:	701a      	strb	r2, [r3, #0]
    b738:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    b73c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b740:	781b      	ldrb	r3, [r3, #0]
    b742:	b2db      	uxtb	r3, r3
    b744:	2bff      	cmp	r3, #255	; 0xff
    b746:	d105      	bne.n	b754 <send_climb+0xa84>
    b748:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    b74c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b750:	2200      	movs	r2, #0
    b752:	701a      	strb	r2, [r3, #0]
    b754:	f242 0338 	movw	r3, #8248	; 0x2038
    b758:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b75c:	f242 0238 	movw	r2, #8248	; 0x2038
    b760:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b764:	7812      	ldrb	r2, [r2, #0]
    b766:	b2d2      	uxtb	r2, r2
    b768:	f042 0201 	orr.w	r2, r2, #1
    b76c:	b2d2      	uxtb	r2, r2
    b76e:	701a      	strb	r2, [r3, #0]
    b770:	f242 0339 	movw	r3, #8249	; 0x2039
    b774:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b778:	f242 0239 	movw	r2, #8249	; 0x2039
    b77c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b780:	7812      	ldrb	r2, [r2, #0]
    b782:	b2d2      	uxtb	r2, r2
    b784:	f042 0210 	orr.w	r2, r2, #16
    b788:	b2d2      	uxtb	r2, r2
    b78a:	701a      	strb	r2, [r3, #0]
    b78c:	e00b      	b.n	b7a6 <send_climb+0xad6>
    b78e:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    b792:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b796:	781b      	ldrb	r3, [r3, #0]
    b798:	3301      	adds	r3, #1
    b79a:	b2da      	uxtb	r2, r3
    b79c:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    b7a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7a4:	701a      	strb	r2, [r3, #0]
}
    b7a6:	46bd      	mov	sp, r7
    b7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    b7ac:	4770      	bx	lr
    b7ae:	bf00      	nop
    b7b0:	00018953 	.word	0x00018953

0000b7b4 <send_mode>:
void send_mode(void){  //5000ms
    b7b4:	b480      	push	{r7}
    b7b6:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 9) PERIODIC_SEND_PPRZ_MODE();}
    b7b8:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    b7bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7c0:	781a      	ldrb	r2, [r3, #0]
    b7c2:	f248 531f 	movw	r3, #34079	; 0x851f
    b7c6:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    b7ca:	fba3 1302 	umull	r1, r3, r3, r2
    b7ce:	091b      	lsrs	r3, r3, #4
    b7d0:	2132      	movs	r1, #50	; 0x32
    b7d2:	fb01 f303 	mul.w	r3, r1, r3
    b7d6:	1ad3      	subs	r3, r2, r3
    b7d8:	b2db      	uxtb	r3, r3
    b7da:	2b09      	cmp	r3, #9
    b7dc:	f040 82ba 	bne.w	bd54 <send_mode+0x5a0>
    b7e0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b7e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7e8:	781a      	ldrb	r2, [r3, #0]
    b7ea:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    b7ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7f2:	781b      	ldrb	r3, [r3, #0]
    b7f4:	b2db      	uxtb	r3, r3
    b7f6:	429a      	cmp	r2, r3
    b7f8:	d313      	bcc.n	b822 <send_mode+0x6e>
    b7fa:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    b7fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b802:	781b      	ldrb	r3, [r3, #0]
    b804:	b2db      	uxtb	r3, r3
    b806:	461a      	mov	r2, r3
    b808:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b80c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b810:	781b      	ldrb	r3, [r3, #0]
    b812:	1ad3      	subs	r3, r2, r3
    b814:	33ff      	adds	r3, #255	; 0xff
    b816:	2b09      	cmp	r3, #9
    b818:	bfd4      	ite	le
    b81a:	2300      	movle	r3, #0
    b81c:	2301      	movgt	r3, #1
    b81e:	b2db      	uxtb	r3, r3
    b820:	e011      	b.n	b846 <send_mode+0x92>
    b822:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    b826:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b82a:	781b      	ldrb	r3, [r3, #0]
    b82c:	b2db      	uxtb	r3, r3
    b82e:	461a      	mov	r2, r3
    b830:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b834:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b838:	781b      	ldrb	r3, [r3, #0]
    b83a:	1ad3      	subs	r3, r2, r3
    b83c:	2b09      	cmp	r3, #9
    b83e:	bfd4      	ite	le
    b840:	2300      	movle	r3, #0
    b842:	2301      	movgt	r3, #1
    b844:	b2db      	uxtb	r3, r3
    b846:	2b00      	cmp	r3, #0
    b848:	f000 8278 	beq.w	bd3c <send_mode+0x588>
    b84c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b850:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b854:	781b      	ldrb	r3, [r3, #0]
    b856:	461a      	mov	r2, r3
    b858:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b85c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b860:	2105      	movs	r1, #5
    b862:	5499      	strb	r1, [r3, r2]
    b864:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b868:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b86c:	781b      	ldrb	r3, [r3, #0]
    b86e:	3301      	adds	r3, #1
    b870:	b2da      	uxtb	r2, r3
    b872:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b876:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b87a:	701a      	strb	r2, [r3, #0]
    b87c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b880:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b884:	781b      	ldrb	r3, [r3, #0]
    b886:	2bff      	cmp	r3, #255	; 0xff
    b888:	d105      	bne.n	b896 <send_mode+0xe2>
    b88a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b88e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b892:	2200      	movs	r2, #0
    b894:	701a      	strb	r2, [r3, #0]
    b896:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b89a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b89e:	781b      	ldrb	r3, [r3, #0]
    b8a0:	461a      	mov	r2, r3
    b8a2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b8a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8aa:	210b      	movs	r1, #11
    b8ac:	5499      	strb	r1, [r3, r2]
    b8ae:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b8b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8b6:	781b      	ldrb	r3, [r3, #0]
    b8b8:	3301      	adds	r3, #1
    b8ba:	b2da      	uxtb	r2, r3
    b8bc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b8c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8c4:	701a      	strb	r2, [r3, #0]
    b8c6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b8ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8ce:	781b      	ldrb	r3, [r3, #0]
    b8d0:	2bff      	cmp	r3, #255	; 0xff
    b8d2:	d105      	bne.n	b8e0 <send_mode+0x12c>
    b8d4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b8d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8dc:	2200      	movs	r2, #0
    b8de:	701a      	strb	r2, [r3, #0]
    b8e0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b8e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8e8:	220b      	movs	r2, #11
    b8ea:	701a      	strb	r2, [r3, #0]
    b8ec:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b8f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8f4:	220b      	movs	r2, #11
    b8f6:	701a      	strb	r2, [r3, #0]
    b8f8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b8fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b900:	781b      	ldrb	r3, [r3, #0]
    b902:	461a      	mov	r2, r3
    b904:	f64a 2394 	movw	r3, #43668	; 0xaa94
    b908:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b90c:	7819      	ldrb	r1, [r3, #0]
    b90e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b916:	5499      	strb	r1, [r3, r2]
    b918:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b91c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b920:	781a      	ldrb	r2, [r3, #0]
    b922:	f64a 2394 	movw	r3, #43668	; 0xaa94
    b926:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b92a:	781b      	ldrb	r3, [r3, #0]
    b92c:	4413      	add	r3, r2
    b92e:	b2da      	uxtb	r2, r3
    b930:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b938:	701a      	strb	r2, [r3, #0]
    b93a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b93e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b942:	781a      	ldrb	r2, [r3, #0]
    b944:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b948:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b94c:	781b      	ldrb	r3, [r3, #0]
    b94e:	4413      	add	r3, r2
    b950:	b2da      	uxtb	r2, r3
    b952:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b956:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b95a:	701a      	strb	r2, [r3, #0]
    b95c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b960:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b964:	781b      	ldrb	r3, [r3, #0]
    b966:	3301      	adds	r3, #1
    b968:	b2da      	uxtb	r2, r3
    b96a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b96e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b972:	701a      	strb	r2, [r3, #0]
    b974:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b978:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b97c:	781b      	ldrb	r3, [r3, #0]
    b97e:	2bff      	cmp	r3, #255	; 0xff
    b980:	d105      	bne.n	b98e <send_mode+0x1da>
    b982:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b986:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b98a:	2200      	movs	r2, #0
    b98c:	701a      	strb	r2, [r3, #0]
    b98e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b992:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b996:	781b      	ldrb	r3, [r3, #0]
    b998:	461a      	mov	r2, r3
    b99a:	f64a 2395 	movw	r3, #43669	; 0xaa95
    b99e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9a2:	7819      	ldrb	r1, [r3, #0]
    b9a4:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    b9a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9ac:	5499      	strb	r1, [r3, r2]
    b9ae:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b9b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9b6:	781a      	ldrb	r2, [r3, #0]
    b9b8:	f64a 2395 	movw	r3, #43669	; 0xaa95
    b9bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9c0:	781b      	ldrb	r3, [r3, #0]
    b9c2:	4413      	add	r3, r2
    b9c4:	b2da      	uxtb	r2, r3
    b9c6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b9ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9ce:	701a      	strb	r2, [r3, #0]
    b9d0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b9d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9d8:	781a      	ldrb	r2, [r3, #0]
    b9da:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    b9de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9e2:	781b      	ldrb	r3, [r3, #0]
    b9e4:	4413      	add	r3, r2
    b9e6:	b2da      	uxtb	r2, r3
    b9e8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    b9ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9f0:	701a      	strb	r2, [r3, #0]
    b9f2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    b9f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9fa:	781b      	ldrb	r3, [r3, #0]
    b9fc:	3301      	adds	r3, #1
    b9fe:	b2da      	uxtb	r2, r3
    ba00:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ba04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba08:	701a      	strb	r2, [r3, #0]
    ba0a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ba0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba12:	781b      	ldrb	r3, [r3, #0]
    ba14:	2bff      	cmp	r3, #255	; 0xff
    ba16:	d105      	bne.n	ba24 <send_mode+0x270>
    ba18:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ba1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba20:	2200      	movs	r2, #0
    ba22:	701a      	strb	r2, [r3, #0]
    ba24:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ba28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba2c:	781b      	ldrb	r3, [r3, #0]
    ba2e:	461a      	mov	r2, r3
    ba30:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
    ba34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba38:	7819      	ldrb	r1, [r3, #0]
    ba3a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ba3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba42:	5499      	strb	r1, [r3, r2]
    ba44:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ba48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba4c:	781a      	ldrb	r2, [r3, #0]
    ba4e:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
    ba52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba56:	781b      	ldrb	r3, [r3, #0]
    ba58:	4413      	add	r3, r2
    ba5a:	b2da      	uxtb	r2, r3
    ba5c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ba60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba64:	701a      	strb	r2, [r3, #0]
    ba66:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ba6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba6e:	781a      	ldrb	r2, [r3, #0]
    ba70:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ba74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba78:	781b      	ldrb	r3, [r3, #0]
    ba7a:	4413      	add	r3, r2
    ba7c:	b2da      	uxtb	r2, r3
    ba7e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ba82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba86:	701a      	strb	r2, [r3, #0]
    ba88:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ba8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba90:	781b      	ldrb	r3, [r3, #0]
    ba92:	3301      	adds	r3, #1
    ba94:	b2da      	uxtb	r2, r3
    ba96:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ba9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba9e:	701a      	strb	r2, [r3, #0]
    baa0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    baa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    baa8:	781b      	ldrb	r3, [r3, #0]
    baaa:	2bff      	cmp	r3, #255	; 0xff
    baac:	d105      	bne.n	baba <send_mode+0x306>
    baae:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bab6:	2200      	movs	r2, #0
    bab8:	701a      	strb	r2, [r3, #0]
    baba:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    babe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bac2:	781b      	ldrb	r3, [r3, #0]
    bac4:	461a      	mov	r2, r3
    bac6:	f64a 239b 	movw	r3, #43675	; 0xaa9b
    baca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bace:	7819      	ldrb	r1, [r3, #0]
    bad0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    bad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bad8:	5499      	strb	r1, [r3, r2]
    bada:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    bade:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bae2:	781a      	ldrb	r2, [r3, #0]
    bae4:	f64a 239b 	movw	r3, #43675	; 0xaa9b
    bae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    baec:	781b      	ldrb	r3, [r3, #0]
    baee:	4413      	add	r3, r2
    baf0:	b2da      	uxtb	r2, r3
    baf2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    baf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bafa:	701a      	strb	r2, [r3, #0]
    bafc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    bb00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb04:	781a      	ldrb	r2, [r3, #0]
    bb06:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    bb0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb0e:	781b      	ldrb	r3, [r3, #0]
    bb10:	4413      	add	r3, r2
    bb12:	b2da      	uxtb	r2, r3
    bb14:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    bb18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb1c:	701a      	strb	r2, [r3, #0]
    bb1e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bb22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb26:	781b      	ldrb	r3, [r3, #0]
    bb28:	3301      	adds	r3, #1
    bb2a:	b2da      	uxtb	r2, r3
    bb2c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bb30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb34:	701a      	strb	r2, [r3, #0]
    bb36:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bb3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb3e:	781b      	ldrb	r3, [r3, #0]
    bb40:	2bff      	cmp	r3, #255	; 0xff
    bb42:	d105      	bne.n	bb50 <send_mode+0x39c>
    bb44:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bb48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb4c:	2200      	movs	r2, #0
    bb4e:	701a      	strb	r2, [r3, #0]
    bb50:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bb54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb58:	781b      	ldrb	r3, [r3, #0]
    bb5a:	461a      	mov	r2, r3
    bb5c:	f240 2380 	movw	r3, #640	; 0x280
    bb60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb64:	7819      	ldrb	r1, [r3, #0]
    bb66:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    bb6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb6e:	5499      	strb	r1, [r3, r2]
    bb70:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    bb74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb78:	781a      	ldrb	r2, [r3, #0]
    bb7a:	f240 2380 	movw	r3, #640	; 0x280
    bb7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb82:	781b      	ldrb	r3, [r3, #0]
    bb84:	4413      	add	r3, r2
    bb86:	b2da      	uxtb	r2, r3
    bb88:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    bb8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb90:	701a      	strb	r2, [r3, #0]
    bb92:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    bb96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb9a:	781a      	ldrb	r2, [r3, #0]
    bb9c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    bba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bba4:	781b      	ldrb	r3, [r3, #0]
    bba6:	4413      	add	r3, r2
    bba8:	b2da      	uxtb	r2, r3
    bbaa:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    bbae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbb2:	701a      	strb	r2, [r3, #0]
    bbb4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bbb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbbc:	781b      	ldrb	r3, [r3, #0]
    bbbe:	3301      	adds	r3, #1
    bbc0:	b2da      	uxtb	r2, r3
    bbc2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bbc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbca:	701a      	strb	r2, [r3, #0]
    bbcc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bbd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbd4:	781b      	ldrb	r3, [r3, #0]
    bbd6:	2bff      	cmp	r3, #255	; 0xff
    bbd8:	d105      	bne.n	bbe6 <send_mode+0x432>
    bbda:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bbde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbe2:	2200      	movs	r2, #0
    bbe4:	701a      	strb	r2, [r3, #0]
    bbe6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bbea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbee:	781b      	ldrb	r3, [r3, #0]
    bbf0:	461a      	mov	r2, r3
    bbf2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    bbf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbfa:	7819      	ldrb	r1, [r3, #0]
    bbfc:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    bc00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc04:	5499      	strb	r1, [r3, r2]
    bc06:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bc0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc0e:	781b      	ldrb	r3, [r3, #0]
    bc10:	3301      	adds	r3, #1
    bc12:	b2da      	uxtb	r2, r3
    bc14:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bc18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc1c:	701a      	strb	r2, [r3, #0]
    bc1e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bc22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc26:	781b      	ldrb	r3, [r3, #0]
    bc28:	2bff      	cmp	r3, #255	; 0xff
    bc2a:	d105      	bne.n	bc38 <send_mode+0x484>
    bc2c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bc30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc34:	2200      	movs	r2, #0
    bc36:	701a      	strb	r2, [r3, #0]
    bc38:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bc3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc40:	781b      	ldrb	r3, [r3, #0]
    bc42:	461a      	mov	r2, r3
    bc44:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    bc48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc4c:	7819      	ldrb	r1, [r3, #0]
    bc4e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    bc52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc56:	5499      	strb	r1, [r3, r2]
    bc58:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bc5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc60:	781b      	ldrb	r3, [r3, #0]
    bc62:	3301      	adds	r3, #1
    bc64:	b2da      	uxtb	r2, r3
    bc66:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bc6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc6e:	701a      	strb	r2, [r3, #0]
    bc70:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bc74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc78:	781b      	ldrb	r3, [r3, #0]
    bc7a:	2bff      	cmp	r3, #255	; 0xff
    bc7c:	d105      	bne.n	bc8a <send_mode+0x4d6>
    bc7e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bc82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc86:	2200      	movs	r2, #0
    bc88:	701a      	strb	r2, [r3, #0]
    bc8a:	f242 0339 	movw	r3, #8249	; 0x2039
    bc8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc92:	781b      	ldrb	r3, [r3, #0]
    bc94:	b2db      	uxtb	r3, r3
    bc96:	f003 0310 	and.w	r3, r3, #16
    bc9a:	2b00      	cmp	r3, #0
    bc9c:	d15a      	bne.n	bd54 <send_mode+0x5a0>
    bc9e:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    bca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bca6:	781b      	ldrb	r3, [r3, #0]
    bca8:	b2db      	uxtb	r3, r3
    bcaa:	461a      	mov	r2, r3
    bcac:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    bcb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcb4:	5c9a      	ldrb	r2, [r3, r2]
    bcb6:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    bcba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcbe:	701a      	strb	r2, [r3, #0]
    bcc0:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    bcc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcc8:	2200      	movs	r2, #0
    bcca:	701a      	strb	r2, [r3, #0]
    bccc:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    bcd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcd4:	781b      	ldrb	r3, [r3, #0]
    bcd6:	b2db      	uxtb	r3, r3
    bcd8:	3301      	adds	r3, #1
    bcda:	b2da      	uxtb	r2, r3
    bcdc:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    bce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bce4:	701a      	strb	r2, [r3, #0]
    bce6:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    bcea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcee:	781b      	ldrb	r3, [r3, #0]
    bcf0:	b2db      	uxtb	r3, r3
    bcf2:	2bff      	cmp	r3, #255	; 0xff
    bcf4:	d105      	bne.n	bd02 <send_mode+0x54e>
    bcf6:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    bcfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcfe:	2200      	movs	r2, #0
    bd00:	701a      	strb	r2, [r3, #0]
    bd02:	f242 0338 	movw	r3, #8248	; 0x2038
    bd06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd0a:	f242 0238 	movw	r2, #8248	; 0x2038
    bd0e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bd12:	7812      	ldrb	r2, [r2, #0]
    bd14:	b2d2      	uxtb	r2, r2
    bd16:	f042 0201 	orr.w	r2, r2, #1
    bd1a:	b2d2      	uxtb	r2, r2
    bd1c:	701a      	strb	r2, [r3, #0]
    bd1e:	f242 0339 	movw	r3, #8249	; 0x2039
    bd22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd26:	f242 0239 	movw	r2, #8249	; 0x2039
    bd2a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bd2e:	7812      	ldrb	r2, [r2, #0]
    bd30:	b2d2      	uxtb	r2, r2
    bd32:	f042 0210 	orr.w	r2, r2, #16
    bd36:	b2d2      	uxtb	r2, r2
    bd38:	701a      	strb	r2, [r3, #0]
    bd3a:	e00b      	b.n	bd54 <send_mode+0x5a0>
    bd3c:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    bd40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd44:	781b      	ldrb	r3, [r3, #0]
    bd46:	3301      	adds	r3, #1
    bd48:	b2da      	uxtb	r2, r3
    bd4a:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    bd4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd52:	701a      	strb	r2, [r3, #0]
}
    bd54:	46bd      	mov	sp, r7
    bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
    bd5a:	4770      	bx	lr

0000bd5c <send_debug>:
void send_debug(void){  //5000ms
    bd5c:	b480      	push	{r7}
    bd5e:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 29) PERIODIC_SEND_DEBUG();}
    bd60:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    bd64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd68:	781a      	ldrb	r2, [r3, #0]
    bd6a:	f248 531f 	movw	r3, #34079	; 0x851f
    bd6e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    bd72:	fba3 1302 	umull	r1, r3, r3, r2
    bd76:	091b      	lsrs	r3, r3, #4
    bd78:	2132      	movs	r1, #50	; 0x32
    bd7a:	fb01 f303 	mul.w	r3, r1, r3
    bd7e:	1ad3      	subs	r3, r2, r3
    bd80:	b2db      	uxtb	r3, r3
    bd82:	2b1d      	cmp	r3, #29
    bd84:	f040 82bb 	bne.w	c2fe <send_debug+0x5a2>
    bd88:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bd8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd90:	781a      	ldrb	r2, [r3, #0]
    bd92:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    bd96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd9a:	781b      	ldrb	r3, [r3, #0]
    bd9c:	b2db      	uxtb	r3, r3
    bd9e:	429a      	cmp	r2, r3
    bda0:	d313      	bcc.n	bdca <send_debug+0x6e>
    bda2:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    bda6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdaa:	781b      	ldrb	r3, [r3, #0]
    bdac:	b2db      	uxtb	r3, r3
    bdae:	461a      	mov	r2, r3
    bdb0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bdb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdb8:	781b      	ldrb	r3, [r3, #0]
    bdba:	1ad3      	subs	r3, r2, r3
    bdbc:	33ff      	adds	r3, #255	; 0xff
    bdbe:	2b09      	cmp	r3, #9
    bdc0:	bfd4      	ite	le
    bdc2:	2300      	movle	r3, #0
    bdc4:	2301      	movgt	r3, #1
    bdc6:	b2db      	uxtb	r3, r3
    bdc8:	e011      	b.n	bdee <send_debug+0x92>
    bdca:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    bdce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdd2:	781b      	ldrb	r3, [r3, #0]
    bdd4:	b2db      	uxtb	r3, r3
    bdd6:	461a      	mov	r2, r3
    bdd8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bddc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bde0:	781b      	ldrb	r3, [r3, #0]
    bde2:	1ad3      	subs	r3, r2, r3
    bde4:	2b09      	cmp	r3, #9
    bde6:	bfd4      	ite	le
    bde8:	2300      	movle	r3, #0
    bdea:	2301      	movgt	r3, #1
    bdec:	b2db      	uxtb	r3, r3
    bdee:	2b00      	cmp	r3, #0
    bdf0:	f000 8279 	beq.w	c2e6 <send_debug+0x58a>
    bdf4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bdf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdfc:	781b      	ldrb	r3, [r3, #0]
    bdfe:	461a      	mov	r2, r3
    be00:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    be04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be08:	2105      	movs	r1, #5
    be0a:	5499      	strb	r1, [r3, r2]
    be0c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    be10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be14:	781b      	ldrb	r3, [r3, #0]
    be16:	3301      	adds	r3, #1
    be18:	b2da      	uxtb	r2, r3
    be1a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    be1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be22:	701a      	strb	r2, [r3, #0]
    be24:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    be28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be2c:	781b      	ldrb	r3, [r3, #0]
    be2e:	2bff      	cmp	r3, #255	; 0xff
    be30:	d105      	bne.n	be3e <send_debug+0xe2>
    be32:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    be36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be3a:	2200      	movs	r2, #0
    be3c:	701a      	strb	r2, [r3, #0]
    be3e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    be42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be46:	781b      	ldrb	r3, [r3, #0]
    be48:	461a      	mov	r2, r3
    be4a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    be4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be52:	210d      	movs	r1, #13
    be54:	5499      	strb	r1, [r3, r2]
    be56:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    be5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be5e:	781b      	ldrb	r3, [r3, #0]
    be60:	3301      	adds	r3, #1
    be62:	b2da      	uxtb	r2, r3
    be64:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    be68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be6c:	701a      	strb	r2, [r3, #0]
    be6e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    be72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be76:	781b      	ldrb	r3, [r3, #0]
    be78:	2bff      	cmp	r3, #255	; 0xff
    be7a:	d105      	bne.n	be88 <send_debug+0x12c>
    be7c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    be80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be84:	2200      	movs	r2, #0
    be86:	701a      	strb	r2, [r3, #0]
    be88:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    be8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be90:	220d      	movs	r2, #13
    be92:	701a      	strb	r2, [r3, #0]
    be94:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    be98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be9c:	220d      	movs	r2, #13
    be9e:	701a      	strb	r2, [r3, #0]
    bea0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bea8:	781b      	ldrb	r3, [r3, #0]
    beaa:	461a      	mov	r2, r3
    beac:	f64a 33e7 	movw	r3, #44007	; 0xabe7
    beb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    beb4:	781b      	ldrb	r3, [r3, #0]
    beb6:	b2d9      	uxtb	r1, r3
    beb8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    bebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bec0:	5499      	strb	r1, [r3, r2]
    bec2:	f64a 33e7 	movw	r3, #44007	; 0xabe7
    bec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    beca:	781a      	ldrb	r2, [r3, #0]
    becc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    bed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bed4:	781b      	ldrb	r3, [r3, #0]
    bed6:	4413      	add	r3, r2
    bed8:	b2da      	uxtb	r2, r3
    beda:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    bede:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bee2:	701a      	strb	r2, [r3, #0]
    bee4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    bee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    beec:	781a      	ldrb	r2, [r3, #0]
    beee:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    bef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bef6:	781b      	ldrb	r3, [r3, #0]
    bef8:	4413      	add	r3, r2
    befa:	b2da      	uxtb	r2, r3
    befc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    bf00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf04:	701a      	strb	r2, [r3, #0]
    bf06:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bf0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf0e:	781b      	ldrb	r3, [r3, #0]
    bf10:	3301      	adds	r3, #1
    bf12:	b2da      	uxtb	r2, r3
    bf14:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bf18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf1c:	701a      	strb	r2, [r3, #0]
    bf1e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bf22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf26:	781b      	ldrb	r3, [r3, #0]
    bf28:	2bff      	cmp	r3, #255	; 0xff
    bf2a:	d105      	bne.n	bf38 <send_debug+0x1dc>
    bf2c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bf30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf34:	2200      	movs	r2, #0
    bf36:	701a      	strb	r2, [r3, #0]
    bf38:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bf3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf40:	781b      	ldrb	r3, [r3, #0]
    bf42:	461a      	mov	r2, r3
    bf44:	f64a 33e8 	movw	r3, #44008	; 0xabe8
    bf48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf4c:	7819      	ldrb	r1, [r3, #0]
    bf4e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    bf52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf56:	5499      	strb	r1, [r3, r2]
    bf58:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    bf5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf60:	781a      	ldrb	r2, [r3, #0]
    bf62:	f64a 33e8 	movw	r3, #44008	; 0xabe8
    bf66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf6a:	781b      	ldrb	r3, [r3, #0]
    bf6c:	4413      	add	r3, r2
    bf6e:	b2da      	uxtb	r2, r3
    bf70:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    bf74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf78:	701a      	strb	r2, [r3, #0]
    bf7a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    bf7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf82:	781a      	ldrb	r2, [r3, #0]
    bf84:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    bf88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf8c:	781b      	ldrb	r3, [r3, #0]
    bf8e:	4413      	add	r3, r2
    bf90:	b2da      	uxtb	r2, r3
    bf92:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    bf96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf9a:	701a      	strb	r2, [r3, #0]
    bf9c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bfa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfa4:	781b      	ldrb	r3, [r3, #0]
    bfa6:	3301      	adds	r3, #1
    bfa8:	b2da      	uxtb	r2, r3
    bfaa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bfae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfb2:	701a      	strb	r2, [r3, #0]
    bfb4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bfb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfbc:	781b      	ldrb	r3, [r3, #0]
    bfbe:	2bff      	cmp	r3, #255	; 0xff
    bfc0:	d105      	bne.n	bfce <send_debug+0x272>
    bfc2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bfc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfca:	2200      	movs	r2, #0
    bfcc:	701a      	strb	r2, [r3, #0]
    bfce:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    bfd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfd6:	781b      	ldrb	r3, [r3, #0]
    bfd8:	461a      	mov	r2, r3
    bfda:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    bfde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfe2:	7819      	ldrb	r1, [r3, #0]
    bfe4:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    bfe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfec:	5499      	strb	r1, [r3, r2]
    bfee:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    bff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bff6:	781a      	ldrb	r2, [r3, #0]
    bff8:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    bffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c000:	781b      	ldrb	r3, [r3, #0]
    c002:	4413      	add	r3, r2
    c004:	b2da      	uxtb	r2, r3
    c006:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c00a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c00e:	701a      	strb	r2, [r3, #0]
    c010:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c014:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c018:	781a      	ldrb	r2, [r3, #0]
    c01a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c01e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c022:	781b      	ldrb	r3, [r3, #0]
    c024:	4413      	add	r3, r2
    c026:	b2da      	uxtb	r2, r3
    c028:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c02c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c030:	701a      	strb	r2, [r3, #0]
    c032:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c036:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c03a:	781b      	ldrb	r3, [r3, #0]
    c03c:	3301      	adds	r3, #1
    c03e:	b2da      	uxtb	r2, r3
    c040:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c044:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c048:	701a      	strb	r2, [r3, #0]
    c04a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c04e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c052:	781b      	ldrb	r3, [r3, #0]
    c054:	2bff      	cmp	r3, #255	; 0xff
    c056:	d105      	bne.n	c064 <send_debug+0x308>
    c058:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c05c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c060:	2200      	movs	r2, #0
    c062:	701a      	strb	r2, [r3, #0]
    c064:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c068:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c06c:	781b      	ldrb	r3, [r3, #0]
    c06e:	461a      	mov	r2, r3
    c070:	f64a 534f 	movw	r3, #44367	; 0xad4f
    c074:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c078:	7819      	ldrb	r1, [r3, #0]
    c07a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c07e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c082:	5499      	strb	r1, [r3, r2]
    c084:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c088:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c08c:	781a      	ldrb	r2, [r3, #0]
    c08e:	f64a 534f 	movw	r3, #44367	; 0xad4f
    c092:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c096:	781b      	ldrb	r3, [r3, #0]
    c098:	4413      	add	r3, r2
    c09a:	b2da      	uxtb	r2, r3
    c09c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c0a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0a4:	701a      	strb	r2, [r3, #0]
    c0a6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c0aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0ae:	781a      	ldrb	r2, [r3, #0]
    c0b0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c0b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0b8:	781b      	ldrb	r3, [r3, #0]
    c0ba:	4413      	add	r3, r2
    c0bc:	b2da      	uxtb	r2, r3
    c0be:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c0c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0c6:	701a      	strb	r2, [r3, #0]
    c0c8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c0cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0d0:	781b      	ldrb	r3, [r3, #0]
    c0d2:	3301      	adds	r3, #1
    c0d4:	b2da      	uxtb	r2, r3
    c0d6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c0da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0de:	701a      	strb	r2, [r3, #0]
    c0e0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c0e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0e8:	781b      	ldrb	r3, [r3, #0]
    c0ea:	2bff      	cmp	r3, #255	; 0xff
    c0ec:	d105      	bne.n	c0fa <send_debug+0x39e>
    c0ee:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c0f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0f6:	2200      	movs	r2, #0
    c0f8:	701a      	strb	r2, [r3, #0]
    c0fa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c0fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c102:	781b      	ldrb	r3, [r3, #0]
    c104:	461a      	mov	r2, r3
    c106:	f64a 239c 	movw	r3, #43676	; 0xaa9c
    c10a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c10e:	7819      	ldrb	r1, [r3, #0]
    c110:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c114:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c118:	5499      	strb	r1, [r3, r2]
    c11a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c11e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c122:	781a      	ldrb	r2, [r3, #0]
    c124:	f64a 239c 	movw	r3, #43676	; 0xaa9c
    c128:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c12c:	781b      	ldrb	r3, [r3, #0]
    c12e:	4413      	add	r3, r2
    c130:	b2da      	uxtb	r2, r3
    c132:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c136:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c13a:	701a      	strb	r2, [r3, #0]
    c13c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c140:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c144:	781a      	ldrb	r2, [r3, #0]
    c146:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c14a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c14e:	781b      	ldrb	r3, [r3, #0]
    c150:	4413      	add	r3, r2
    c152:	b2da      	uxtb	r2, r3
    c154:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c158:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c15c:	701a      	strb	r2, [r3, #0]
    c15e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c162:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c166:	781b      	ldrb	r3, [r3, #0]
    c168:	3301      	adds	r3, #1
    c16a:	b2da      	uxtb	r2, r3
    c16c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c170:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c174:	701a      	strb	r2, [r3, #0]
    c176:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c17a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c17e:	781b      	ldrb	r3, [r3, #0]
    c180:	2bff      	cmp	r3, #255	; 0xff
    c182:	d105      	bne.n	c190 <send_debug+0x434>
    c184:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c188:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c18c:	2200      	movs	r2, #0
    c18e:	701a      	strb	r2, [r3, #0]
    c190:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c194:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c198:	781b      	ldrb	r3, [r3, #0]
    c19a:	461a      	mov	r2, r3
    c19c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c1a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1a4:	7819      	ldrb	r1, [r3, #0]
    c1a6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c1aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1ae:	5499      	strb	r1, [r3, r2]
    c1b0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c1b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1b8:	781b      	ldrb	r3, [r3, #0]
    c1ba:	3301      	adds	r3, #1
    c1bc:	b2da      	uxtb	r2, r3
    c1be:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c1c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1c6:	701a      	strb	r2, [r3, #0]
    c1c8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c1cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1d0:	781b      	ldrb	r3, [r3, #0]
    c1d2:	2bff      	cmp	r3, #255	; 0xff
    c1d4:	d105      	bne.n	c1e2 <send_debug+0x486>
    c1d6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c1da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1de:	2200      	movs	r2, #0
    c1e0:	701a      	strb	r2, [r3, #0]
    c1e2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c1e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1ea:	781b      	ldrb	r3, [r3, #0]
    c1ec:	461a      	mov	r2, r3
    c1ee:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c1f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1f6:	7819      	ldrb	r1, [r3, #0]
    c1f8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c1fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c200:	5499      	strb	r1, [r3, r2]
    c202:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c206:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c20a:	781b      	ldrb	r3, [r3, #0]
    c20c:	3301      	adds	r3, #1
    c20e:	b2da      	uxtb	r2, r3
    c210:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c214:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c218:	701a      	strb	r2, [r3, #0]
    c21a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c21e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c222:	781b      	ldrb	r3, [r3, #0]
    c224:	2bff      	cmp	r3, #255	; 0xff
    c226:	d105      	bne.n	c234 <send_debug+0x4d8>
    c228:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c22c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c230:	2200      	movs	r2, #0
    c232:	701a      	strb	r2, [r3, #0]
    c234:	f242 0339 	movw	r3, #8249	; 0x2039
    c238:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c23c:	781b      	ldrb	r3, [r3, #0]
    c23e:	b2db      	uxtb	r3, r3
    c240:	f003 0310 	and.w	r3, r3, #16
    c244:	2b00      	cmp	r3, #0
    c246:	d15a      	bne.n	c2fe <send_debug+0x5a2>
    c248:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    c24c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c250:	781b      	ldrb	r3, [r3, #0]
    c252:	b2db      	uxtb	r3, r3
    c254:	461a      	mov	r2, r3
    c256:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c25a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c25e:	5c9a      	ldrb	r2, [r3, r2]
    c260:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    c264:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c268:	701a      	strb	r2, [r3, #0]
    c26a:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    c26e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c272:	2200      	movs	r2, #0
    c274:	701a      	strb	r2, [r3, #0]
    c276:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    c27a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c27e:	781b      	ldrb	r3, [r3, #0]
    c280:	b2db      	uxtb	r3, r3
    c282:	3301      	adds	r3, #1
    c284:	b2da      	uxtb	r2, r3
    c286:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    c28a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c28e:	701a      	strb	r2, [r3, #0]
    c290:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    c294:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c298:	781b      	ldrb	r3, [r3, #0]
    c29a:	b2db      	uxtb	r3, r3
    c29c:	2bff      	cmp	r3, #255	; 0xff
    c29e:	d105      	bne.n	c2ac <send_debug+0x550>
    c2a0:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    c2a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2a8:	2200      	movs	r2, #0
    c2aa:	701a      	strb	r2, [r3, #0]
    c2ac:	f242 0338 	movw	r3, #8248	; 0x2038
    c2b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2b4:	f242 0238 	movw	r2, #8248	; 0x2038
    c2b8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c2bc:	7812      	ldrb	r2, [r2, #0]
    c2be:	b2d2      	uxtb	r2, r2
    c2c0:	f042 0201 	orr.w	r2, r2, #1
    c2c4:	b2d2      	uxtb	r2, r2
    c2c6:	701a      	strb	r2, [r3, #0]
    c2c8:	f242 0339 	movw	r3, #8249	; 0x2039
    c2cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2d0:	f242 0239 	movw	r2, #8249	; 0x2039
    c2d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c2d8:	7812      	ldrb	r2, [r2, #0]
    c2da:	b2d2      	uxtb	r2, r2
    c2dc:	f042 0210 	orr.w	r2, r2, #16
    c2e0:	b2d2      	uxtb	r2, r2
    c2e2:	701a      	strb	r2, [r3, #0]
    c2e4:	e00b      	b.n	c2fe <send_debug+0x5a2>
    c2e6:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    c2ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2ee:	781b      	ldrb	r3, [r3, #0]
    c2f0:	3301      	adds	r3, #1
    c2f2:	b2da      	uxtb	r2, r3
    c2f4:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    c2f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2fc:	701a      	strb	r2, [r3, #0]
}
    c2fe:	46bd      	mov	sp, r7
    c300:	f85d 7b04 	ldr.w	r7, [sp], #4
    c304:	4770      	bx	lr
    c306:	bf00      	nop

0000c308 <send_nav_ref>:
void send_nav_ref(void){  //10000ms
    c308:	b480      	push	{r7}
    c30a:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 100 == 49) PERIODIC_SEND_NAVIGATION_REF();}
    c30c:	f64a 23a9 	movw	r3, #43689	; 0xaaa9
    c310:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c314:	781a      	ldrb	r2, [r3, #0]
    c316:	f248 531f 	movw	r3, #34079	; 0x851f
    c31a:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c31e:	fba3 1302 	umull	r1, r3, r3, r2
    c322:	095b      	lsrs	r3, r3, #5
    c324:	2164      	movs	r1, #100	; 0x64
    c326:	fb01 f303 	mul.w	r3, r1, r3
    c32a:	1ad3      	subs	r3, r2, r3
    c32c:	b2db      	uxtb	r3, r3
    c32e:	2b31      	cmp	r3, #49	; 0x31
    c330:	f040 8395 	bne.w	ca5e <send_nav_ref+0x756>
    c334:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c338:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c33c:	781a      	ldrb	r2, [r3, #0]
    c33e:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    c342:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c346:	781b      	ldrb	r3, [r3, #0]
    c348:	b2db      	uxtb	r3, r3
    c34a:	429a      	cmp	r2, r3
    c34c:	d313      	bcc.n	c376 <send_nav_ref+0x6e>
    c34e:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    c352:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c356:	781b      	ldrb	r3, [r3, #0]
    c358:	b2db      	uxtb	r3, r3
    c35a:	461a      	mov	r2, r3
    c35c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c360:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c364:	781b      	ldrb	r3, [r3, #0]
    c366:	1ad3      	subs	r3, r2, r3
    c368:	33ff      	adds	r3, #255	; 0xff
    c36a:	2b0c      	cmp	r3, #12
    c36c:	bfd4      	ite	le
    c36e:	2300      	movle	r3, #0
    c370:	2301      	movgt	r3, #1
    c372:	b2db      	uxtb	r3, r3
    c374:	e011      	b.n	c39a <send_nav_ref+0x92>
    c376:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    c37a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c37e:	781b      	ldrb	r3, [r3, #0]
    c380:	b2db      	uxtb	r3, r3
    c382:	461a      	mov	r2, r3
    c384:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c388:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c38c:	781b      	ldrb	r3, [r3, #0]
    c38e:	1ad3      	subs	r3, r2, r3
    c390:	2b0c      	cmp	r3, #12
    c392:	bfd4      	ite	le
    c394:	2300      	movle	r3, #0
    c396:	2301      	movgt	r3, #1
    c398:	b2db      	uxtb	r3, r3
    c39a:	2b00      	cmp	r3, #0
    c39c:	f000 8353 	beq.w	ca46 <send_nav_ref+0x73e>
    c3a0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c3a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3a8:	781b      	ldrb	r3, [r3, #0]
    c3aa:	461a      	mov	r2, r3
    c3ac:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c3b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3b4:	2105      	movs	r1, #5
    c3b6:	5499      	strb	r1, [r3, r2]
    c3b8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c3bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3c0:	781b      	ldrb	r3, [r3, #0]
    c3c2:	3301      	adds	r3, #1
    c3c4:	b2da      	uxtb	r2, r3
    c3c6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c3ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3ce:	701a      	strb	r2, [r3, #0]
    c3d0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c3d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3d8:	781b      	ldrb	r3, [r3, #0]
    c3da:	2bff      	cmp	r3, #255	; 0xff
    c3dc:	d105      	bne.n	c3ea <send_nav_ref+0xe2>
    c3de:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c3e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3e6:	2200      	movs	r2, #0
    c3e8:	701a      	strb	r2, [r3, #0]
    c3ea:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c3ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3f2:	781b      	ldrb	r3, [r3, #0]
    c3f4:	461a      	mov	r2, r3
    c3f6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c3fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3fe:	2109      	movs	r1, #9
    c400:	5499      	strb	r1, [r3, r2]
    c402:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c406:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c40a:	781b      	ldrb	r3, [r3, #0]
    c40c:	3301      	adds	r3, #1
    c40e:	b2da      	uxtb	r2, r3
    c410:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c414:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c418:	701a      	strb	r2, [r3, #0]
    c41a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c41e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c422:	781b      	ldrb	r3, [r3, #0]
    c424:	2bff      	cmp	r3, #255	; 0xff
    c426:	d105      	bne.n	c434 <send_nav_ref+0x12c>
    c428:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c430:	2200      	movs	r2, #0
    c432:	701a      	strb	r2, [r3, #0]
    c434:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c438:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c43c:	2209      	movs	r2, #9
    c43e:	701a      	strb	r2, [r3, #0]
    c440:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c444:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c448:	2209      	movs	r2, #9
    c44a:	701a      	strb	r2, [r3, #0]
    c44c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c450:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c454:	781b      	ldrb	r3, [r3, #0]
    c456:	461a      	mov	r2, r3
    c458:	f648 1348 	movw	r3, #35144	; 0x8948
    c45c:	f2c0 0301 	movt	r3, #1
    c460:	7819      	ldrb	r1, [r3, #0]
    c462:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c466:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c46a:	5499      	strb	r1, [r3, r2]
    c46c:	f648 1348 	movw	r3, #35144	; 0x8948
    c470:	f2c0 0301 	movt	r3, #1
    c474:	781a      	ldrb	r2, [r3, #0]
    c476:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c47a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c47e:	781b      	ldrb	r3, [r3, #0]
    c480:	4413      	add	r3, r2
    c482:	b2da      	uxtb	r2, r3
    c484:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c488:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c48c:	701a      	strb	r2, [r3, #0]
    c48e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c492:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c496:	781a      	ldrb	r2, [r3, #0]
    c498:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c49c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4a0:	781b      	ldrb	r3, [r3, #0]
    c4a2:	4413      	add	r3, r2
    c4a4:	b2da      	uxtb	r2, r3
    c4a6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c4aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4ae:	701a      	strb	r2, [r3, #0]
    c4b0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c4b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4b8:	781b      	ldrb	r3, [r3, #0]
    c4ba:	3301      	adds	r3, #1
    c4bc:	b2da      	uxtb	r2, r3
    c4be:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4c6:	701a      	strb	r2, [r3, #0]
    c4c8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c4cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4d0:	781b      	ldrb	r3, [r3, #0]
    c4d2:	2bff      	cmp	r3, #255	; 0xff
    c4d4:	d105      	bne.n	c4e2 <send_nav_ref+0x1da>
    c4d6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c4da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4de:	2200      	movs	r2, #0
    c4e0:	701a      	strb	r2, [r3, #0]
    c4e2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c4e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4ea:	781b      	ldrb	r3, [r3, #0]
    c4ec:	461a      	mov	r2, r3
    c4ee:	f648 1348 	movw	r3, #35144	; 0x8948
    c4f2:	f2c0 0301 	movt	r3, #1
    c4f6:	7859      	ldrb	r1, [r3, #1]
    c4f8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c4fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c500:	5499      	strb	r1, [r3, r2]
    c502:	4bd2      	ldr	r3, [pc, #840]	; (c84c <send_nav_ref+0x544>)
    c504:	781a      	ldrb	r2, [r3, #0]
    c506:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c50a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c50e:	781b      	ldrb	r3, [r3, #0]
    c510:	4413      	add	r3, r2
    c512:	b2da      	uxtb	r2, r3
    c514:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c518:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c51c:	701a      	strb	r2, [r3, #0]
    c51e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c522:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c526:	781a      	ldrb	r2, [r3, #0]
    c528:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c52c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c530:	781b      	ldrb	r3, [r3, #0]
    c532:	4413      	add	r3, r2
    c534:	b2da      	uxtb	r2, r3
    c536:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c53a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c53e:	701a      	strb	r2, [r3, #0]
    c540:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c544:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c548:	781b      	ldrb	r3, [r3, #0]
    c54a:	3301      	adds	r3, #1
    c54c:	b2da      	uxtb	r2, r3
    c54e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c552:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c556:	701a      	strb	r2, [r3, #0]
    c558:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c55c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c560:	781b      	ldrb	r3, [r3, #0]
    c562:	2bff      	cmp	r3, #255	; 0xff
    c564:	d105      	bne.n	c572 <send_nav_ref+0x26a>
    c566:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c56a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c56e:	2200      	movs	r2, #0
    c570:	701a      	strb	r2, [r3, #0]
    c572:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c576:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c57a:	781b      	ldrb	r3, [r3, #0]
    c57c:	461a      	mov	r2, r3
    c57e:	f648 1348 	movw	r3, #35144	; 0x8948
    c582:	f2c0 0301 	movt	r3, #1
    c586:	7899      	ldrb	r1, [r3, #2]
    c588:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c58c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c590:	5499      	strb	r1, [r3, r2]
    c592:	4baf      	ldr	r3, [pc, #700]	; (c850 <send_nav_ref+0x548>)
    c594:	781a      	ldrb	r2, [r3, #0]
    c596:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c59a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c59e:	781b      	ldrb	r3, [r3, #0]
    c5a0:	4413      	add	r3, r2
    c5a2:	b2da      	uxtb	r2, r3
    c5a4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c5a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5ac:	701a      	strb	r2, [r3, #0]
    c5ae:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c5b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5b6:	781a      	ldrb	r2, [r3, #0]
    c5b8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c5bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5c0:	781b      	ldrb	r3, [r3, #0]
    c5c2:	4413      	add	r3, r2
    c5c4:	b2da      	uxtb	r2, r3
    c5c6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c5ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5ce:	701a      	strb	r2, [r3, #0]
    c5d0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c5d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5d8:	781b      	ldrb	r3, [r3, #0]
    c5da:	3301      	adds	r3, #1
    c5dc:	b2da      	uxtb	r2, r3
    c5de:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c5e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5e6:	701a      	strb	r2, [r3, #0]
    c5e8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c5ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5f0:	781b      	ldrb	r3, [r3, #0]
    c5f2:	2bff      	cmp	r3, #255	; 0xff
    c5f4:	d105      	bne.n	c602 <send_nav_ref+0x2fa>
    c5f6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c5fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5fe:	2200      	movs	r2, #0
    c600:	701a      	strb	r2, [r3, #0]
    c602:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c606:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c60a:	781b      	ldrb	r3, [r3, #0]
    c60c:	461a      	mov	r2, r3
    c60e:	f648 1348 	movw	r3, #35144	; 0x8948
    c612:	f2c0 0301 	movt	r3, #1
    c616:	78d9      	ldrb	r1, [r3, #3]
    c618:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c61c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c620:	5499      	strb	r1, [r3, r2]
    c622:	4b8c      	ldr	r3, [pc, #560]	; (c854 <send_nav_ref+0x54c>)
    c624:	781a      	ldrb	r2, [r3, #0]
    c626:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c62a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c62e:	781b      	ldrb	r3, [r3, #0]
    c630:	4413      	add	r3, r2
    c632:	b2da      	uxtb	r2, r3
    c634:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c638:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c63c:	701a      	strb	r2, [r3, #0]
    c63e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c642:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c646:	781a      	ldrb	r2, [r3, #0]
    c648:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c64c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c650:	781b      	ldrb	r3, [r3, #0]
    c652:	4413      	add	r3, r2
    c654:	b2da      	uxtb	r2, r3
    c656:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c65a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c65e:	701a      	strb	r2, [r3, #0]
    c660:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c664:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c668:	781b      	ldrb	r3, [r3, #0]
    c66a:	3301      	adds	r3, #1
    c66c:	b2da      	uxtb	r2, r3
    c66e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c672:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c676:	701a      	strb	r2, [r3, #0]
    c678:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c67c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c680:	781b      	ldrb	r3, [r3, #0]
    c682:	2bff      	cmp	r3, #255	; 0xff
    c684:	d105      	bne.n	c692 <send_nav_ref+0x38a>
    c686:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c68a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c68e:	2200      	movs	r2, #0
    c690:	701a      	strb	r2, [r3, #0]
    c692:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c696:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c69a:	781b      	ldrb	r3, [r3, #0]
    c69c:	461a      	mov	r2, r3
    c69e:	f648 134c 	movw	r3, #35148	; 0x894c
    c6a2:	f2c0 0301 	movt	r3, #1
    c6a6:	7819      	ldrb	r1, [r3, #0]
    c6a8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c6ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6b0:	5499      	strb	r1, [r3, r2]
    c6b2:	f648 134c 	movw	r3, #35148	; 0x894c
    c6b6:	f2c0 0301 	movt	r3, #1
    c6ba:	781a      	ldrb	r2, [r3, #0]
    c6bc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c6c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6c4:	781b      	ldrb	r3, [r3, #0]
    c6c6:	4413      	add	r3, r2
    c6c8:	b2da      	uxtb	r2, r3
    c6ca:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c6ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6d2:	701a      	strb	r2, [r3, #0]
    c6d4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c6d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6dc:	781a      	ldrb	r2, [r3, #0]
    c6de:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c6e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6e6:	781b      	ldrb	r3, [r3, #0]
    c6e8:	4413      	add	r3, r2
    c6ea:	b2da      	uxtb	r2, r3
    c6ec:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c6f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6f4:	701a      	strb	r2, [r3, #0]
    c6f6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c6fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6fe:	781b      	ldrb	r3, [r3, #0]
    c700:	3301      	adds	r3, #1
    c702:	b2da      	uxtb	r2, r3
    c704:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c708:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c70c:	701a      	strb	r2, [r3, #0]
    c70e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c712:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c716:	781b      	ldrb	r3, [r3, #0]
    c718:	2bff      	cmp	r3, #255	; 0xff
    c71a:	d105      	bne.n	c728 <send_nav_ref+0x420>
    c71c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c720:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c724:	2200      	movs	r2, #0
    c726:	701a      	strb	r2, [r3, #0]
    c728:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c72c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c730:	781b      	ldrb	r3, [r3, #0]
    c732:	461a      	mov	r2, r3
    c734:	f648 134c 	movw	r3, #35148	; 0x894c
    c738:	f2c0 0301 	movt	r3, #1
    c73c:	7859      	ldrb	r1, [r3, #1]
    c73e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c742:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c746:	5499      	strb	r1, [r3, r2]
    c748:	4b43      	ldr	r3, [pc, #268]	; (c858 <send_nav_ref+0x550>)
    c74a:	781a      	ldrb	r2, [r3, #0]
    c74c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c750:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c754:	781b      	ldrb	r3, [r3, #0]
    c756:	4413      	add	r3, r2
    c758:	b2da      	uxtb	r2, r3
    c75a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c75e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c762:	701a      	strb	r2, [r3, #0]
    c764:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c768:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c76c:	781a      	ldrb	r2, [r3, #0]
    c76e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c772:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c776:	781b      	ldrb	r3, [r3, #0]
    c778:	4413      	add	r3, r2
    c77a:	b2da      	uxtb	r2, r3
    c77c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c784:	701a      	strb	r2, [r3, #0]
    c786:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c78a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c78e:	781b      	ldrb	r3, [r3, #0]
    c790:	3301      	adds	r3, #1
    c792:	b2da      	uxtb	r2, r3
    c794:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c798:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c79c:	701a      	strb	r2, [r3, #0]
    c79e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c7a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7a6:	781b      	ldrb	r3, [r3, #0]
    c7a8:	2bff      	cmp	r3, #255	; 0xff
    c7aa:	d105      	bne.n	c7b8 <send_nav_ref+0x4b0>
    c7ac:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c7b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7b4:	2200      	movs	r2, #0
    c7b6:	701a      	strb	r2, [r3, #0]
    c7b8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c7bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7c0:	781b      	ldrb	r3, [r3, #0]
    c7c2:	461a      	mov	r2, r3
    c7c4:	f648 134c 	movw	r3, #35148	; 0x894c
    c7c8:	f2c0 0301 	movt	r3, #1
    c7cc:	7899      	ldrb	r1, [r3, #2]
    c7ce:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c7d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7d6:	5499      	strb	r1, [r3, r2]
    c7d8:	4b20      	ldr	r3, [pc, #128]	; (c85c <send_nav_ref+0x554>)
    c7da:	781a      	ldrb	r2, [r3, #0]
    c7dc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c7e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7e4:	781b      	ldrb	r3, [r3, #0]
    c7e6:	4413      	add	r3, r2
    c7e8:	b2da      	uxtb	r2, r3
    c7ea:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c7ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7f2:	701a      	strb	r2, [r3, #0]
    c7f4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c7f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7fc:	781a      	ldrb	r2, [r3, #0]
    c7fe:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c802:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c806:	781b      	ldrb	r3, [r3, #0]
    c808:	4413      	add	r3, r2
    c80a:	b2da      	uxtb	r2, r3
    c80c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c810:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c814:	701a      	strb	r2, [r3, #0]
    c816:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c81a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c81e:	781b      	ldrb	r3, [r3, #0]
    c820:	3301      	adds	r3, #1
    c822:	b2da      	uxtb	r2, r3
    c824:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c828:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c82c:	701a      	strb	r2, [r3, #0]
    c82e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c832:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c836:	781b      	ldrb	r3, [r3, #0]
    c838:	2bff      	cmp	r3, #255	; 0xff
    c83a:	d111      	bne.n	c860 <send_nav_ref+0x558>
    c83c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c840:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c844:	2200      	movs	r2, #0
    c846:	701a      	strb	r2, [r3, #0]
    c848:	e00a      	b.n	c860 <send_nav_ref+0x558>
    c84a:	bf00      	nop
    c84c:	00018949 	.word	0x00018949
    c850:	0001894a 	.word	0x0001894a
    c854:	0001894b 	.word	0x0001894b
    c858:	0001894d 	.word	0x0001894d
    c85c:	0001894e 	.word	0x0001894e
    c860:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c864:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c868:	781b      	ldrb	r3, [r3, #0]
    c86a:	461a      	mov	r2, r3
    c86c:	f648 134c 	movw	r3, #35148	; 0x894c
    c870:	f2c0 0301 	movt	r3, #1
    c874:	78d9      	ldrb	r1, [r3, #3]
    c876:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c87a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c87e:	5499      	strb	r1, [r3, r2]
    c880:	4b79      	ldr	r3, [pc, #484]	; (ca68 <send_nav_ref+0x760>)
    c882:	781a      	ldrb	r2, [r3, #0]
    c884:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c888:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c88c:	781b      	ldrb	r3, [r3, #0]
    c88e:	4413      	add	r3, r2
    c890:	b2da      	uxtb	r2, r3
    c892:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c896:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c89a:	701a      	strb	r2, [r3, #0]
    c89c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c8a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8a4:	781a      	ldrb	r2, [r3, #0]
    c8a6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c8aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8ae:	781b      	ldrb	r3, [r3, #0]
    c8b0:	4413      	add	r3, r2
    c8b2:	b2da      	uxtb	r2, r3
    c8b4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c8b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8bc:	701a      	strb	r2, [r3, #0]
    c8be:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c8c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8c6:	781b      	ldrb	r3, [r3, #0]
    c8c8:	3301      	adds	r3, #1
    c8ca:	b2da      	uxtb	r2, r3
    c8cc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c8d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8d4:	701a      	strb	r2, [r3, #0]
    c8d6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c8da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8de:	781b      	ldrb	r3, [r3, #0]
    c8e0:	2bff      	cmp	r3, #255	; 0xff
    c8e2:	d105      	bne.n	c8f0 <send_nav_ref+0x5e8>
    c8e4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c8e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8ec:	2200      	movs	r2, #0
    c8ee:	701a      	strb	r2, [r3, #0]
    c8f0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c8f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8f8:	781b      	ldrb	r3, [r3, #0]
    c8fa:	461a      	mov	r2, r3
    c8fc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    c900:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c904:	7819      	ldrb	r1, [r3, #0]
    c906:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c90a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c90e:	5499      	strb	r1, [r3, r2]
    c910:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c914:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c918:	781b      	ldrb	r3, [r3, #0]
    c91a:	3301      	adds	r3, #1
    c91c:	b2da      	uxtb	r2, r3
    c91e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c922:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c926:	701a      	strb	r2, [r3, #0]
    c928:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c92c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c930:	781b      	ldrb	r3, [r3, #0]
    c932:	2bff      	cmp	r3, #255	; 0xff
    c934:	d105      	bne.n	c942 <send_nav_ref+0x63a>
    c936:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c93a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c93e:	2200      	movs	r2, #0
    c940:	701a      	strb	r2, [r3, #0]
    c942:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c946:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c94a:	781b      	ldrb	r3, [r3, #0]
    c94c:	461a      	mov	r2, r3
    c94e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    c952:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c956:	7819      	ldrb	r1, [r3, #0]
    c958:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c95c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c960:	5499      	strb	r1, [r3, r2]
    c962:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c966:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c96a:	781b      	ldrb	r3, [r3, #0]
    c96c:	3301      	adds	r3, #1
    c96e:	b2da      	uxtb	r2, r3
    c970:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c974:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c978:	701a      	strb	r2, [r3, #0]
    c97a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c97e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c982:	781b      	ldrb	r3, [r3, #0]
    c984:	2bff      	cmp	r3, #255	; 0xff
    c986:	d105      	bne.n	c994 <send_nav_ref+0x68c>
    c988:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    c98c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c990:	2200      	movs	r2, #0
    c992:	701a      	strb	r2, [r3, #0]
    c994:	f242 0339 	movw	r3, #8249	; 0x2039
    c998:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c99c:	781b      	ldrb	r3, [r3, #0]
    c99e:	b2db      	uxtb	r3, r3
    c9a0:	f003 0310 	and.w	r3, r3, #16
    c9a4:	2b00      	cmp	r3, #0
    c9a6:	d15a      	bne.n	ca5e <send_nav_ref+0x756>
    c9a8:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    c9ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9b0:	781b      	ldrb	r3, [r3, #0]
    c9b2:	b2db      	uxtb	r3, r3
    c9b4:	461a      	mov	r2, r3
    c9b6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    c9ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9be:	5c9a      	ldrb	r2, [r3, r2]
    c9c0:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    c9c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9c8:	701a      	strb	r2, [r3, #0]
    c9ca:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    c9ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9d2:	2200      	movs	r2, #0
    c9d4:	701a      	strb	r2, [r3, #0]
    c9d6:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    c9da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9de:	781b      	ldrb	r3, [r3, #0]
    c9e0:	b2db      	uxtb	r3, r3
    c9e2:	3301      	adds	r3, #1
    c9e4:	b2da      	uxtb	r2, r3
    c9e6:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    c9ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9ee:	701a      	strb	r2, [r3, #0]
    c9f0:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    c9f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9f8:	781b      	ldrb	r3, [r3, #0]
    c9fa:	b2db      	uxtb	r3, r3
    c9fc:	2bff      	cmp	r3, #255	; 0xff
    c9fe:	d105      	bne.n	ca0c <send_nav_ref+0x704>
    ca00:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    ca04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca08:	2200      	movs	r2, #0
    ca0a:	701a      	strb	r2, [r3, #0]
    ca0c:	f242 0338 	movw	r3, #8248	; 0x2038
    ca10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca14:	f242 0238 	movw	r2, #8248	; 0x2038
    ca18:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ca1c:	7812      	ldrb	r2, [r2, #0]
    ca1e:	b2d2      	uxtb	r2, r2
    ca20:	f042 0201 	orr.w	r2, r2, #1
    ca24:	b2d2      	uxtb	r2, r2
    ca26:	701a      	strb	r2, [r3, #0]
    ca28:	f242 0339 	movw	r3, #8249	; 0x2039
    ca2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca30:	f242 0239 	movw	r2, #8249	; 0x2039
    ca34:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ca38:	7812      	ldrb	r2, [r2, #0]
    ca3a:	b2d2      	uxtb	r2, r2
    ca3c:	f042 0210 	orr.w	r2, r2, #16
    ca40:	b2d2      	uxtb	r2, r2
    ca42:	701a      	strb	r2, [r3, #0]
    ca44:	e00b      	b.n	ca5e <send_nav_ref+0x756>
    ca46:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    ca4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca4e:	781b      	ldrb	r3, [r3, #0]
    ca50:	3301      	adds	r3, #1
    ca52:	b2da      	uxtb	r2, r3
    ca54:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    ca58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca5c:	701a      	strb	r2, [r3, #0]
  //vPrintString("S_13 reporting_task end!\n\r");
}
    ca5e:	46bd      	mov	sp, r7
    ca60:	f85d 7b04 	ldr.w	r7, [sp], #4
    ca64:	4770      	bx	lr
    ca66:	bf00      	nop
    ca68:	0001894f 	.word	0x0001894f

0000ca6c <inflight_calib_mode_update>:

/** \fn inline uint8_t inflight_calib_mode_update ( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t inflight_calib_mode_update ( void ) {
    ca6c:	b480      	push	{r7}
    ca6e:	b083      	sub	sp, #12
    ca70:	af00      	add	r7, sp, #0
  ModeUpdate(inflight_calib_mode, IF_CALIB_MODE_OF_PULSE(from_fbw.channels[RADIO_CALIB]));
    ca72:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    ca76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca7a:	8a1b      	ldrh	r3, [r3, #16]
    ca7c:	b21b      	sxth	r3, r3
    ca7e:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    ca82:	db0d      	blt.n	caa0 <inflight_calib_mode_update+0x34>
    ca84:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    ca88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca8c:	8a1b      	ldrh	r3, [r3, #16]
    ca8e:	b21a      	sxth	r2, r3
    ca90:	f640 437f 	movw	r3, #3199	; 0xc7f
    ca94:	429a      	cmp	r2, r3
    ca96:	bfd4      	ite	le
    ca98:	2300      	movle	r3, #0
    ca9a:	2301      	movgt	r3, #1
    ca9c:	b2db      	uxtb	r3, r3
    ca9e:	e000      	b.n	caa2 <inflight_calib_mode_update+0x36>
    caa0:	2302      	movs	r3, #2
    caa2:	71fb      	strb	r3, [r7, #7]
    caa4:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
    caa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    caac:	781b      	ldrb	r3, [r3, #0]
    caae:	79fa      	ldrb	r2, [r7, #7]
    cab0:	429a      	cmp	r2, r3
    cab2:	d007      	beq.n	cac4 <inflight_calib_mode_update+0x58>
    cab4:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
    cab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cabc:	79fa      	ldrb	r2, [r7, #7]
    cabe:	701a      	strb	r2, [r3, #0]
    cac0:	2301      	movs	r3, #1
    cac2:	e000      	b.n	cac6 <inflight_calib_mode_update+0x5a>
    cac4:	2300      	movs	r3, #0
}
    cac6:	4618      	mov	r0, r3
    cac8:	370c      	adds	r7, #12
    caca:	46bd      	mov	sp, r7
    cacc:	f85d 7b04 	ldr.w	r7, [sp], #4
    cad0:	4770      	bx	lr
    cad2:	bf00      	nop

0000cad4 <radio_control_task>:


/** \fn inline void radio_control_task( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
void radio_control_task( void ) {
    cad4:	b580      	push	{r7, lr}
    cad6:	b082      	sub	sp, #8
    cad8:	af00      	add	r7, sp, #0
  bool_t calib_mode_changed;
	//vPrintString("S_3 radio_control_task start! \n\r"); //SunnyBeike
    //add by wanbo
    link_fbw_receive_valid = 1;
    cada:	f64a 33e6 	movw	r3, #44006	; 0xabe6
    cade:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cae2:	2201      	movs	r2, #1
    cae4:	701a      	strb	r2, [r3, #0]
  if (link_fbw_receive_valid) {
    cae6:	f64a 33e6 	movw	r3, #44006	; 0xabe6
    caea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    caee:	781b      	ldrb	r3, [r3, #0]
    caf0:	b2db      	uxtb	r3, r3
    caf2:	2b00      	cmp	r3, #0
    caf4:	f000 83b8 	beq.w	d268 <radio_control_task+0x794>
    uint8_t mode_changed = FALSE;
    caf8:	2300      	movs	r3, #0
    cafa:	71fb      	strb	r3, [r7, #7]
    copy_from_to_fbw();
    cafc:	f7fa fa9c 	bl	7038 <copy_from_to_fbw>
    if ((bit_is_set(from_fbw.status, RADIO_REALLY_LOST) && (pprz_mode == PPRZ_MODE_AUTO1 || pprz_mode == PPRZ_MODE_MANUAL)) || too_far_from_home) {
    cb00:	4b3a      	ldr	r3, [pc, #232]	; (cbec <radio_control_task+0x118>)
    cb02:	781b      	ldrb	r3, [r3, #0]
    cb04:	b2db      	uxtb	r3, r3
    cb06:	f003 0302 	and.w	r3, r3, #2
    cb0a:	2b00      	cmp	r3, #0
    cb0c:	d00d      	beq.n	cb2a <radio_control_task+0x56>
    cb0e:	f64a 2394 	movw	r3, #43668	; 0xaa94
    cb12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb16:	781b      	ldrb	r3, [r3, #0]
    cb18:	2b01      	cmp	r3, #1
    cb1a:	d00d      	beq.n	cb38 <radio_control_task+0x64>
    cb1c:	f64a 2394 	movw	r3, #43668	; 0xaa94
    cb20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb24:	781b      	ldrb	r3, [r3, #0]
    cb26:	2b00      	cmp	r3, #0
    cb28:	d006      	beq.n	cb38 <radio_control_task+0x64>
    cb2a:	f64a 6344 	movw	r3, #44612	; 0xae44
    cb2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb32:	781b      	ldrb	r3, [r3, #0]
    cb34:	2b00      	cmp	r3, #0
    cb36:	d007      	beq.n	cb48 <radio_control_task+0x74>
      pprz_mode = PPRZ_MODE_HOME;
    cb38:	f64a 2394 	movw	r3, #43668	; 0xaa94
    cb3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb40:	2203      	movs	r2, #3
    cb42:	701a      	strb	r2, [r3, #0]
      mode_changed = TRUE;
    cb44:	2301      	movs	r3, #1
    cb46:	71fb      	strb	r3, [r7, #7]
    }
    // modified by wanbo
    //if (bit_is_set(from_fbw.status, AVERAGED_CHANNELS_SENT)) 
    {
      bool_t pprz_mode_changed = pprz_mode_update();
    cb48:	f7fa f950 	bl	6dec <pprz_mode_update>
    cb4c:	4603      	mov	r3, r0
    cb4e:	71bb      	strb	r3, [r7, #6]
      mode_changed |= pprz_mode_changed;
    cb50:	79fa      	ldrb	r2, [r7, #7]
    cb52:	79bb      	ldrb	r3, [r7, #6]
    cb54:	4313      	orrs	r3, r2
    cb56:	71fb      	strb	r3, [r7, #7]
#ifdef RADIO_LLS
      mode_changed |= ir_estim_mode_update();
    cb58:	f7fa f994 	bl	6e84 <ir_estim_mode_update>
    cb5c:	4603      	mov	r3, r0
    cb5e:	461a      	mov	r2, r3
    cb60:	79fb      	ldrb	r3, [r7, #7]
    cb62:	4313      	orrs	r3, r2
    cb64:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef RADIO_CALIB
      calib_mode_changed = inflight_calib_mode_update();
    cb66:	f7ff ff81 	bl	ca6c <inflight_calib_mode_update>
    cb6a:	4603      	mov	r3, r0
    cb6c:	717b      	strb	r3, [r7, #5]
      inflight_calib(calib_mode_changed || pprz_mode_changed);
    cb6e:	797b      	ldrb	r3, [r7, #5]
    cb70:	2b00      	cmp	r3, #0
    cb72:	d102      	bne.n	cb7a <radio_control_task+0xa6>
    cb74:	79bb      	ldrb	r3, [r7, #6]
    cb76:	2b00      	cmp	r3, #0
    cb78:	d001      	beq.n	cb7e <radio_control_task+0xaa>
    cb7a:	2301      	movs	r3, #1
    cb7c:	e000      	b.n	cb80 <radio_control_task+0xac>
    cb7e:	2300      	movs	r3, #0
    cb80:	b2db      	uxtb	r3, r3
    cb82:	4618      	mov	r0, r3
    cb84:	f008 fba0 	bl	152c8 <inflight_calib>
      mode_changed |= calib_mode_changed;
    cb88:	79fa      	ldrb	r2, [r7, #7]
    cb8a:	797b      	ldrb	r3, [r7, #5]
    cb8c:	4313      	orrs	r3, r2
    cb8e:	71fb      	strb	r3, [r7, #7]
#endif
    }
    mode_changed |= mcu1_status_update();
    cb90:	f7fa f9a0 	bl	6ed4 <mcu1_status_update>
    cb94:	4603      	mov	r3, r0
    cb96:	461a      	mov	r2, r3
    cb98:	79fb      	ldrb	r3, [r7, #7]
    cb9a:	4313      	orrs	r3, r2
    cb9c:	71fb      	strb	r3, [r7, #7]
    // add by wanbo
    mode_changed = 1;
    cb9e:	2301      	movs	r3, #1
    cba0:	71fb      	strb	r3, [r7, #7]
    if ( mode_changed )
    cba2:	79fb      	ldrb	r3, [r7, #7]
    cba4:	2b00      	cmp	r3, #0
    cba6:	f000 82bc 	beq.w	d122 <radio_control_task+0x64e>
      DOWNLINK_SEND_PPRZ_MODE(&pprz_mode, &vertical_mode, &inflight_calib_mode, &mcu1_status, &ir_estim_mode);
    cbaa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cbae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbb2:	781a      	ldrb	r2, [r3, #0]
    cbb4:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    cbb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbbc:	781b      	ldrb	r3, [r3, #0]
    cbbe:	b2db      	uxtb	r3, r3
    cbc0:	429a      	cmp	r2, r3
    cbc2:	d315      	bcc.n	cbf0 <radio_control_task+0x11c>
    cbc4:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    cbc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbcc:	781b      	ldrb	r3, [r3, #0]
    cbce:	b2db      	uxtb	r3, r3
    cbd0:	461a      	mov	r2, r3
    cbd2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cbd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbda:	781b      	ldrb	r3, [r3, #0]
    cbdc:	1ad3      	subs	r3, r2, r3
    cbde:	33ff      	adds	r3, #255	; 0xff
    cbe0:	2b09      	cmp	r3, #9
    cbe2:	bfd4      	ite	le
    cbe4:	2300      	movle	r3, #0
    cbe6:	2301      	movgt	r3, #1
    cbe8:	b2db      	uxtb	r3, r3
    cbea:	e013      	b.n	cc14 <radio_control_task+0x140>
    cbec:	2000abcb 	.word	0x2000abcb
    cbf0:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    cbf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbf8:	781b      	ldrb	r3, [r3, #0]
    cbfa:	b2db      	uxtb	r3, r3
    cbfc:	461a      	mov	r2, r3
    cbfe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cc02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc06:	781b      	ldrb	r3, [r3, #0]
    cc08:	1ad3      	subs	r3, r2, r3
    cc0a:	2b09      	cmp	r3, #9
    cc0c:	bfd4      	ite	le
    cc0e:	2300      	movle	r3, #0
    cc10:	2301      	movgt	r3, #1
    cc12:	b2db      	uxtb	r3, r3
    cc14:	2b00      	cmp	r3, #0
    cc16:	f000 8278 	beq.w	d10a <radio_control_task+0x636>
    cc1a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cc1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc22:	781b      	ldrb	r3, [r3, #0]
    cc24:	461a      	mov	r2, r3
    cc26:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    cc2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc2e:	2105      	movs	r1, #5
    cc30:	5499      	strb	r1, [r3, r2]
    cc32:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cc36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc3a:	781b      	ldrb	r3, [r3, #0]
    cc3c:	3301      	adds	r3, #1
    cc3e:	b2da      	uxtb	r2, r3
    cc40:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cc44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc48:	701a      	strb	r2, [r3, #0]
    cc4a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cc4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc52:	781b      	ldrb	r3, [r3, #0]
    cc54:	2bff      	cmp	r3, #255	; 0xff
    cc56:	d105      	bne.n	cc64 <radio_control_task+0x190>
    cc58:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cc5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc60:	2200      	movs	r2, #0
    cc62:	701a      	strb	r2, [r3, #0]
    cc64:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cc68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc6c:	781b      	ldrb	r3, [r3, #0]
    cc6e:	461a      	mov	r2, r3
    cc70:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    cc74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc78:	210b      	movs	r1, #11
    cc7a:	5499      	strb	r1, [r3, r2]
    cc7c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cc80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc84:	781b      	ldrb	r3, [r3, #0]
    cc86:	3301      	adds	r3, #1
    cc88:	b2da      	uxtb	r2, r3
    cc8a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cc8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc92:	701a      	strb	r2, [r3, #0]
    cc94:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cc98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc9c:	781b      	ldrb	r3, [r3, #0]
    cc9e:	2bff      	cmp	r3, #255	; 0xff
    cca0:	d105      	bne.n	ccae <radio_control_task+0x1da>
    cca2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccaa:	2200      	movs	r2, #0
    ccac:	701a      	strb	r2, [r3, #0]
    ccae:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ccb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccb6:	220b      	movs	r2, #11
    ccb8:	701a      	strb	r2, [r3, #0]
    ccba:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ccbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccc2:	220b      	movs	r2, #11
    ccc4:	701a      	strb	r2, [r3, #0]
    ccc6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ccca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccce:	781b      	ldrb	r3, [r3, #0]
    ccd0:	461a      	mov	r2, r3
    ccd2:	f64a 2394 	movw	r3, #43668	; 0xaa94
    ccd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccda:	7819      	ldrb	r1, [r3, #0]
    ccdc:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    cce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cce4:	5499      	strb	r1, [r3, r2]
    cce6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ccea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccee:	781a      	ldrb	r2, [r3, #0]
    ccf0:	f64a 2394 	movw	r3, #43668	; 0xaa94
    ccf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccf8:	781b      	ldrb	r3, [r3, #0]
    ccfa:	4413      	add	r3, r2
    ccfc:	b2da      	uxtb	r2, r3
    ccfe:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    cd02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd06:	701a      	strb	r2, [r3, #0]
    cd08:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    cd0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd10:	781a      	ldrb	r2, [r3, #0]
    cd12:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    cd16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd1a:	781b      	ldrb	r3, [r3, #0]
    cd1c:	4413      	add	r3, r2
    cd1e:	b2da      	uxtb	r2, r3
    cd20:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    cd24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd28:	701a      	strb	r2, [r3, #0]
    cd2a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cd2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd32:	781b      	ldrb	r3, [r3, #0]
    cd34:	3301      	adds	r3, #1
    cd36:	b2da      	uxtb	r2, r3
    cd38:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cd3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd40:	701a      	strb	r2, [r3, #0]
    cd42:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cd46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd4a:	781b      	ldrb	r3, [r3, #0]
    cd4c:	2bff      	cmp	r3, #255	; 0xff
    cd4e:	d105      	bne.n	cd5c <radio_control_task+0x288>
    cd50:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cd54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd58:	2200      	movs	r2, #0
    cd5a:	701a      	strb	r2, [r3, #0]
    cd5c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cd60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd64:	781b      	ldrb	r3, [r3, #0]
    cd66:	461a      	mov	r2, r3
    cd68:	f64a 2395 	movw	r3, #43669	; 0xaa95
    cd6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd70:	7819      	ldrb	r1, [r3, #0]
    cd72:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    cd76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd7a:	5499      	strb	r1, [r3, r2]
    cd7c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    cd80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd84:	781a      	ldrb	r2, [r3, #0]
    cd86:	f64a 2395 	movw	r3, #43669	; 0xaa95
    cd8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd8e:	781b      	ldrb	r3, [r3, #0]
    cd90:	4413      	add	r3, r2
    cd92:	b2da      	uxtb	r2, r3
    cd94:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    cd98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd9c:	701a      	strb	r2, [r3, #0]
    cd9e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    cda2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cda6:	781a      	ldrb	r2, [r3, #0]
    cda8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    cdac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdb0:	781b      	ldrb	r3, [r3, #0]
    cdb2:	4413      	add	r3, r2
    cdb4:	b2da      	uxtb	r2, r3
    cdb6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    cdba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdbe:	701a      	strb	r2, [r3, #0]
    cdc0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cdc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdc8:	781b      	ldrb	r3, [r3, #0]
    cdca:	3301      	adds	r3, #1
    cdcc:	b2da      	uxtb	r2, r3
    cdce:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cdd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdd6:	701a      	strb	r2, [r3, #0]
    cdd8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cddc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cde0:	781b      	ldrb	r3, [r3, #0]
    cde2:	2bff      	cmp	r3, #255	; 0xff
    cde4:	d105      	bne.n	cdf2 <radio_control_task+0x31e>
    cde6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cdea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdee:	2200      	movs	r2, #0
    cdf0:	701a      	strb	r2, [r3, #0]
    cdf2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cdf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdfa:	781b      	ldrb	r3, [r3, #0]
    cdfc:	461a      	mov	r2, r3
    cdfe:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
    ce02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce06:	7819      	ldrb	r1, [r3, #0]
    ce08:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ce0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce10:	5499      	strb	r1, [r3, r2]
    ce12:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ce16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce1a:	781a      	ldrb	r2, [r3, #0]
    ce1c:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
    ce20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce24:	781b      	ldrb	r3, [r3, #0]
    ce26:	4413      	add	r3, r2
    ce28:	b2da      	uxtb	r2, r3
    ce2a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ce2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce32:	701a      	strb	r2, [r3, #0]
    ce34:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ce38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce3c:	781a      	ldrb	r2, [r3, #0]
    ce3e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ce42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce46:	781b      	ldrb	r3, [r3, #0]
    ce48:	4413      	add	r3, r2
    ce4a:	b2da      	uxtb	r2, r3
    ce4c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ce50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce54:	701a      	strb	r2, [r3, #0]
    ce56:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ce5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce5e:	781b      	ldrb	r3, [r3, #0]
    ce60:	3301      	adds	r3, #1
    ce62:	b2da      	uxtb	r2, r3
    ce64:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ce68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce6c:	701a      	strb	r2, [r3, #0]
    ce6e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ce72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce76:	781b      	ldrb	r3, [r3, #0]
    ce78:	2bff      	cmp	r3, #255	; 0xff
    ce7a:	d105      	bne.n	ce88 <radio_control_task+0x3b4>
    ce7c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ce80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce84:	2200      	movs	r2, #0
    ce86:	701a      	strb	r2, [r3, #0]
    ce88:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ce8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce90:	781b      	ldrb	r3, [r3, #0]
    ce92:	461a      	mov	r2, r3
    ce94:	f64a 239b 	movw	r3, #43675	; 0xaa9b
    ce98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce9c:	7819      	ldrb	r1, [r3, #0]
    ce9e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    cea2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cea6:	5499      	strb	r1, [r3, r2]
    cea8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ceac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ceb0:	781a      	ldrb	r2, [r3, #0]
    ceb2:	f64a 239b 	movw	r3, #43675	; 0xaa9b
    ceb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ceba:	781b      	ldrb	r3, [r3, #0]
    cebc:	4413      	add	r3, r2
    cebe:	b2da      	uxtb	r2, r3
    cec0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    cec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cec8:	701a      	strb	r2, [r3, #0]
    ceca:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    cece:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ced2:	781a      	ldrb	r2, [r3, #0]
    ced4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ced8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cedc:	781b      	ldrb	r3, [r3, #0]
    cede:	4413      	add	r3, r2
    cee0:	b2da      	uxtb	r2, r3
    cee2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    cee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ceea:	701a      	strb	r2, [r3, #0]
    ceec:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cef4:	781b      	ldrb	r3, [r3, #0]
    cef6:	3301      	adds	r3, #1
    cef8:	b2da      	uxtb	r2, r3
    cefa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cefe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf02:	701a      	strb	r2, [r3, #0]
    cf04:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cf08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf0c:	781b      	ldrb	r3, [r3, #0]
    cf0e:	2bff      	cmp	r3, #255	; 0xff
    cf10:	d105      	bne.n	cf1e <radio_control_task+0x44a>
    cf12:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cf16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf1a:	2200      	movs	r2, #0
    cf1c:	701a      	strb	r2, [r3, #0]
    cf1e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cf22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf26:	781b      	ldrb	r3, [r3, #0]
    cf28:	461a      	mov	r2, r3
    cf2a:	f240 2380 	movw	r3, #640	; 0x280
    cf2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf32:	7819      	ldrb	r1, [r3, #0]
    cf34:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    cf38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf3c:	5499      	strb	r1, [r3, r2]
    cf3e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    cf42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf46:	781a      	ldrb	r2, [r3, #0]
    cf48:	f240 2380 	movw	r3, #640	; 0x280
    cf4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf50:	781b      	ldrb	r3, [r3, #0]
    cf52:	4413      	add	r3, r2
    cf54:	b2da      	uxtb	r2, r3
    cf56:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    cf5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf5e:	701a      	strb	r2, [r3, #0]
    cf60:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    cf64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf68:	781a      	ldrb	r2, [r3, #0]
    cf6a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    cf6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf72:	781b      	ldrb	r3, [r3, #0]
    cf74:	4413      	add	r3, r2
    cf76:	b2da      	uxtb	r2, r3
    cf78:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    cf7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf80:	701a      	strb	r2, [r3, #0]
    cf82:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cf86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf8a:	781b      	ldrb	r3, [r3, #0]
    cf8c:	3301      	adds	r3, #1
    cf8e:	b2da      	uxtb	r2, r3
    cf90:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cf94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf98:	701a      	strb	r2, [r3, #0]
    cf9a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cf9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfa2:	781b      	ldrb	r3, [r3, #0]
    cfa4:	2bff      	cmp	r3, #255	; 0xff
    cfa6:	d105      	bne.n	cfb4 <radio_control_task+0x4e0>
    cfa8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cfac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfb0:	2200      	movs	r2, #0
    cfb2:	701a      	strb	r2, [r3, #0]
    cfb4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cfb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfbc:	781b      	ldrb	r3, [r3, #0]
    cfbe:	461a      	mov	r2, r3
    cfc0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    cfc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfc8:	7819      	ldrb	r1, [r3, #0]
    cfca:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    cfce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfd2:	5499      	strb	r1, [r3, r2]
    cfd4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cfd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfdc:	781b      	ldrb	r3, [r3, #0]
    cfde:	3301      	adds	r3, #1
    cfe0:	b2da      	uxtb	r2, r3
    cfe2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cfe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfea:	701a      	strb	r2, [r3, #0]
    cfec:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cff4:	781b      	ldrb	r3, [r3, #0]
    cff6:	2bff      	cmp	r3, #255	; 0xff
    cff8:	d105      	bne.n	d006 <radio_control_task+0x532>
    cffa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    cffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d002:	2200      	movs	r2, #0
    d004:	701a      	strb	r2, [r3, #0]
    d006:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d00a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d00e:	781b      	ldrb	r3, [r3, #0]
    d010:	461a      	mov	r2, r3
    d012:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d016:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d01a:	7819      	ldrb	r1, [r3, #0]
    d01c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d020:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d024:	5499      	strb	r1, [r3, r2]
    d026:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d02a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d02e:	781b      	ldrb	r3, [r3, #0]
    d030:	3301      	adds	r3, #1
    d032:	b2da      	uxtb	r2, r3
    d034:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d038:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d03c:	701a      	strb	r2, [r3, #0]
    d03e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d042:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d046:	781b      	ldrb	r3, [r3, #0]
    d048:	2bff      	cmp	r3, #255	; 0xff
    d04a:	d105      	bne.n	d058 <radio_control_task+0x584>
    d04c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d050:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d054:	2200      	movs	r2, #0
    d056:	701a      	strb	r2, [r3, #0]
    d058:	f242 0339 	movw	r3, #8249	; 0x2039
    d05c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d060:	781b      	ldrb	r3, [r3, #0]
    d062:	b2db      	uxtb	r3, r3
    d064:	f003 0310 	and.w	r3, r3, #16
    d068:	2b00      	cmp	r3, #0
    d06a:	d15a      	bne.n	d122 <radio_control_task+0x64e>
    d06c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    d070:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d074:	781b      	ldrb	r3, [r3, #0]
    d076:	b2db      	uxtb	r3, r3
    d078:	461a      	mov	r2, r3
    d07a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d07e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d082:	5c9a      	ldrb	r2, [r3, r2]
    d084:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    d088:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d08c:	701a      	strb	r2, [r3, #0]
    d08e:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    d092:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d096:	2200      	movs	r2, #0
    d098:	701a      	strb	r2, [r3, #0]
    d09a:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    d09e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0a2:	781b      	ldrb	r3, [r3, #0]
    d0a4:	b2db      	uxtb	r3, r3
    d0a6:	3301      	adds	r3, #1
    d0a8:	b2da      	uxtb	r2, r3
    d0aa:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    d0ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0b2:	701a      	strb	r2, [r3, #0]
    d0b4:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    d0b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0bc:	781b      	ldrb	r3, [r3, #0]
    d0be:	b2db      	uxtb	r3, r3
    d0c0:	2bff      	cmp	r3, #255	; 0xff
    d0c2:	d105      	bne.n	d0d0 <radio_control_task+0x5fc>
    d0c4:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    d0c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0cc:	2200      	movs	r2, #0
    d0ce:	701a      	strb	r2, [r3, #0]
    d0d0:	f242 0338 	movw	r3, #8248	; 0x2038
    d0d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0d8:	f242 0238 	movw	r2, #8248	; 0x2038
    d0dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d0e0:	7812      	ldrb	r2, [r2, #0]
    d0e2:	b2d2      	uxtb	r2, r2
    d0e4:	f042 0201 	orr.w	r2, r2, #1
    d0e8:	b2d2      	uxtb	r2, r2
    d0ea:	701a      	strb	r2, [r3, #0]
    d0ec:	f242 0339 	movw	r3, #8249	; 0x2039
    d0f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0f4:	f242 0239 	movw	r2, #8249	; 0x2039
    d0f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d0fc:	7812      	ldrb	r2, [r2, #0]
    d0fe:	b2d2      	uxtb	r2, r2
    d100:	f042 0210 	orr.w	r2, r2, #16
    d104:	b2d2      	uxtb	r2, r2
    d106:	701a      	strb	r2, [r3, #0]
    d108:	e00b      	b.n	d122 <radio_control_task+0x64e>
    d10a:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    d10e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d112:	781b      	ldrb	r3, [r3, #0]
    d114:	3301      	adds	r3, #1
    d116:	b2da      	uxtb	r2, r3
    d118:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    d11c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d120:	701a      	strb	r2, [r3, #0]
      
    // add by wanbo
    //if (pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_roll = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_ROLL], 0., -0.6);
    d122:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    d126:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d12a:	885b      	ldrh	r3, [r3, #2]
    d12c:	b21b      	sxth	r3, r3
    d12e:	4618      	mov	r0, r3
    d130:	f00b f87e 	bl	18230 <__aeabi_i2f>
    d134:	4603      	mov	r3, r0
    d136:	4618      	mov	r0, r3
    d138:	f04f 0100 	mov.w	r1, #0
    d13c:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d140:	f00b f97e 	bl	18440 <__aeabi_fdiv>
    d144:	4603      	mov	r3, r0
    d146:	4618      	mov	r0, r3
    d148:	f00a fc32 	bl	179b0 <__aeabi_f2d>
    d14c:	4602      	mov	r2, r0
    d14e:	460b      	mov	r3, r1
    d150:	4610      	mov	r0, r2
    d152:	4619      	mov	r1, r3
    d154:	a346      	add	r3, pc, #280	; (adr r3, d270 <radio_control_task+0x79c>)
    d156:	e9d3 2300 	ldrd	r2, r3, [r3]
    d15a:	f00a fc7d 	bl	17a58 <__aeabi_dmul>
    d15e:	4602      	mov	r2, r0
    d160:	460b      	mov	r3, r1
    d162:	4610      	mov	r0, r2
    d164:	4619      	mov	r1, r3
    d166:	f04f 0200 	mov.w	r2, #0
    d16a:	f04f 0300 	mov.w	r3, #0
    d16e:	f00a fac1 	bl	176f4 <__adddf3>
    d172:	4602      	mov	r2, r0
    d174:	460b      	mov	r3, r1
    d176:	4610      	mov	r0, r2
    d178:	4619      	mov	r1, r3
    d17a:	f00a ff4f 	bl	1801c <__aeabi_d2f>
    d17e:	4602      	mov	r2, r0
    d180:	f64a 53dc 	movw	r3, #44508	; 0xaddc
    d184:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d188:	601a      	str	r2, [r3, #0]
      desired_pitch = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_PITCH], 0., 0.5);
    d18a:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    d18e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d192:	889b      	ldrh	r3, [r3, #4]
    d194:	b21b      	sxth	r3, r3
    d196:	4618      	mov	r0, r3
    d198:	f00b f84a 	bl	18230 <__aeabi_i2f>
    d19c:	4603      	mov	r3, r0
    d19e:	4618      	mov	r0, r3
    d1a0:	f04f 0100 	mov.w	r1, #0
    d1a4:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d1a8:	f00b f94a 	bl	18440 <__aeabi_fdiv>
    d1ac:	4603      	mov	r3, r0
    d1ae:	4618      	mov	r0, r3
    d1b0:	f00a fbfe 	bl	179b0 <__aeabi_f2d>
    d1b4:	4602      	mov	r2, r0
    d1b6:	460b      	mov	r3, r1
    d1b8:	4610      	mov	r0, r2
    d1ba:	4619      	mov	r1, r3
    d1bc:	f04f 0200 	mov.w	r2, #0
    d1c0:	f04f 0300 	mov.w	r3, #0
    d1c4:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
    d1c8:	f00a fc46 	bl	17a58 <__aeabi_dmul>
    d1cc:	4602      	mov	r2, r0
    d1ce:	460b      	mov	r3, r1
    d1d0:	4610      	mov	r0, r2
    d1d2:	4619      	mov	r1, r3
    d1d4:	f04f 0200 	mov.w	r2, #0
    d1d8:	f04f 0300 	mov.w	r3, #0
    d1dc:	f00a fa8a 	bl	176f4 <__adddf3>
    d1e0:	4602      	mov	r2, r0
    d1e2:	460b      	mov	r3, r1
    d1e4:	4610      	mov	r0, r2
    d1e6:	4619      	mov	r1, r3
    d1e8:	f00a ff18 	bl	1801c <__aeabi_d2f>
    d1ec:	4602      	mov	r2, r0
    d1ee:	f64a 53e0 	movw	r3, #44512	; 0xade0
    d1f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1f6:	601a      	str	r2, [r3, #0]
    } // else asynchronously set by course_pid_run()

    // add by wanbo
   // if (pprz_mode == PPRZ_MODE_MANUAL || pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_gaz = from_fbw.channels[RADIO_THROTTLE];
    d1f8:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    d1fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d200:	881a      	ldrh	r2, [r3, #0]
    d202:	f64a 53e4 	movw	r3, #44516	; 0xade4
    d206:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d20a:	801a      	strh	r2, [r3, #0]
      pitch_pgain = PITCH_PGAIN * ( 1 - 1. / 3. * from_fbw.channels[RADIO_THROTTLE] / MAX_PPRZ);
#endif /* ANTON_MAGICAL_MISTERY_GAINS */
    }
    // else asynchronously set by climb_pid_run();

    mcu1_ppm_cpt = from_fbw.ppm_cpt;
    d20c:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    d210:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d214:	7c9a      	ldrb	r2, [r3, #18]
    d216:	f64a 239c 	movw	r3, #43676	; 0xaa9c
    d21a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d21e:	701a      	strb	r2, [r3, #0]
    vsupply = from_fbw.vsupply;
    d220:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    d224:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d228:	7d5a      	ldrb	r2, [r3, #21]
    d22a:	f64a 239a 	movw	r3, #43674	; 0xaa9a
    d22e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d232:	701a      	strb	r2, [r3, #0]

    events_update();
    d234:	f7f9 fe7e 	bl	6f34 <events_update>

    // add by wanbo
    //if (!estimator_flight_time) 
    {
      ground_calibrate();
    d238:	f7f8 fc7e 	bl	5b38 <ground_calibrate>
      if (pprz_mode == PPRZ_MODE_AUTO2 && from_fbw.channels[RADIO_THROTTLE] > GAZ_THRESHOLD_TAKEOFF) {
    d23c:	f64a 2394 	movw	r3, #43668	; 0xaa94
    d240:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d244:	781b      	ldrb	r3, [r3, #0]
    d246:	2b02      	cmp	r3, #2
    d248:	d10e      	bne.n	d268 <radio_control_task+0x794>
    d24a:	f64a 33b8 	movw	r3, #43960	; 0xabb8
    d24e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d252:	881b      	ldrh	r3, [r3, #0]
    d254:	b21b      	sxth	r3, r3
    d256:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
    d25a:	dd05      	ble.n	d268 <radio_control_task+0x794>
	launch = TRUE;
    d25c:	f64a 23a8 	movw	r3, #43688	; 0xaaa8
    d260:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d264:	2201      	movs	r2, #1
    d266:	701a      	strb	r2, [r3, #0]
      }
    }
  }

	//vPrintString("S_3 radio_control_task end! \n\r"); //SunnyBeike
}
    d268:	3708      	adds	r7, #8
    d26a:	46bd      	mov	sp, r7
    d26c:	bd80      	pop	{r7, pc}
    d26e:	bf00      	nop
    d270:	33333333 	.word	0x33333333
    d274:	bfe33333 	.word	0xbfe33333

0000d278 <navigation_update>:

/** \fn void navigation_task( void )
 *  \brief Compute desired_course
 */
void navigation_update( void ) {
    d278:	b580      	push	{r7, lr}
    d27a:	af00      	add	r7, sp, #0

  /* Default to keep compatibility with previous behaviour */
  //vPrintString("S_17 Navigation task start!\n\r");
  lateral_mode = LATERAL_MODE_COURSE;
    d27c:	f64a 2396 	movw	r3, #43670	; 0xaa96
    d280:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d284:	2203      	movs	r2, #3
    d286:	701a      	strb	r2, [r3, #0]
  if (pprz_mode == PPRZ_MODE_HOME)
    d288:	f64a 2394 	movw	r3, #43668	; 0xaa94
    d28c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d290:	781b      	ldrb	r3, [r3, #0]
    d292:	2b03      	cmp	r3, #3
    d294:	d102      	bne.n	d29c <navigation_update+0x24>
    nav_home();
    d296:	f007 fa9b 	bl	147d0 <nav_home>
    d29a:	e001      	b.n	d2a0 <navigation_update+0x28>
  else
    nav_update();
    d29c:	f007 fabe 	bl	1481c <nav_update>
}
    d2a0:	bd80      	pop	{r7, pc}
    d2a2:	bf00      	nop

0000d2a4 <send_nav_values>:

void send_nav_values(void){
    d2a4:	b480      	push	{r7}
    d2a6:	af00      	add	r7, sp, #0
  
  DOWNLINK_SEND_NAVIGATION(&nav_block, &nav_stage, &estimator_x, &estimator_y, &desired_course, &dist2_to_wp, &course_pgain, &dist2_to_home);
    d2a8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d2ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2b0:	781a      	ldrb	r2, [r3, #0]
    d2b2:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    d2b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2ba:	781b      	ldrb	r3, [r3, #0]
    d2bc:	b2db      	uxtb	r3, r3
    d2be:	429a      	cmp	r2, r3
    d2c0:	d313      	bcc.n	d2ea <send_nav_values+0x46>
    d2c2:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    d2c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2ca:	781b      	ldrb	r3, [r3, #0]
    d2cc:	b2db      	uxtb	r3, r3
    d2ce:	461a      	mov	r2, r3
    d2d0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d2d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2d8:	781b      	ldrb	r3, [r3, #0]
    d2da:	1ad3      	subs	r3, r2, r3
    d2dc:	33ff      	adds	r3, #255	; 0xff
    d2de:	2b1e      	cmp	r3, #30
    d2e0:	bfd4      	ite	le
    d2e2:	2300      	movle	r3, #0
    d2e4:	2301      	movgt	r3, #1
    d2e6:	b2db      	uxtb	r3, r3
    d2e8:	e011      	b.n	d30e <send_nav_values+0x6a>
    d2ea:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    d2ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2f2:	781b      	ldrb	r3, [r3, #0]
    d2f4:	b2db      	uxtb	r3, r3
    d2f6:	461a      	mov	r2, r3
    d2f8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d2fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d300:	781b      	ldrb	r3, [r3, #0]
    d302:	1ad3      	subs	r3, r2, r3
    d304:	2b1e      	cmp	r3, #30
    d306:	bfd4      	ite	le
    d308:	2300      	movle	r3, #0
    d30a:	2301      	movgt	r3, #1
    d30c:	b2db      	uxtb	r3, r3
    d30e:	2b00      	cmp	r3, #0
    d310:	f001 8094 	beq.w	e43c <send_nav_values+0x1198>
    d314:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d318:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d31c:	781b      	ldrb	r3, [r3, #0]
    d31e:	461a      	mov	r2, r3
    d320:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d324:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d328:	2105      	movs	r1, #5
    d32a:	5499      	strb	r1, [r3, r2]
    d32c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d330:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d334:	781b      	ldrb	r3, [r3, #0]
    d336:	3301      	adds	r3, #1
    d338:	b2da      	uxtb	r2, r3
    d33a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d33e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d342:	701a      	strb	r2, [r3, #0]
    d344:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d348:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d34c:	781b      	ldrb	r3, [r3, #0]
    d34e:	2bff      	cmp	r3, #255	; 0xff
    d350:	d105      	bne.n	d35e <send_nav_values+0xba>
    d352:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d356:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d35a:	2200      	movs	r2, #0
    d35c:	701a      	strb	r2, [r3, #0]
    d35e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d362:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d366:	781b      	ldrb	r3, [r3, #0]
    d368:	461a      	mov	r2, r3
    d36a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d36e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d372:	210a      	movs	r1, #10
    d374:	5499      	strb	r1, [r3, r2]
    d376:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d37a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d37e:	781b      	ldrb	r3, [r3, #0]
    d380:	3301      	adds	r3, #1
    d382:	b2da      	uxtb	r2, r3
    d384:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d388:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d38c:	701a      	strb	r2, [r3, #0]
    d38e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d392:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d396:	781b      	ldrb	r3, [r3, #0]
    d398:	2bff      	cmp	r3, #255	; 0xff
    d39a:	d105      	bne.n	d3a8 <send_nav_values+0x104>
    d39c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d3a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3a4:	2200      	movs	r2, #0
    d3a6:	701a      	strb	r2, [r3, #0]
    d3a8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d3ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3b0:	220a      	movs	r2, #10
    d3b2:	701a      	strb	r2, [r3, #0]
    d3b4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d3b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3bc:	220a      	movs	r2, #10
    d3be:	701a      	strb	r2, [r3, #0]
    d3c0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d3c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3c8:	781b      	ldrb	r3, [r3, #0]
    d3ca:	461a      	mov	r2, r3
    d3cc:	f64a 6309 	movw	r3, #44553	; 0xae09
    d3d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3d4:	7819      	ldrb	r1, [r3, #0]
    d3d6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d3da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3de:	5499      	strb	r1, [r3, r2]
    d3e0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d3e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3e8:	781a      	ldrb	r2, [r3, #0]
    d3ea:	f64a 6309 	movw	r3, #44553	; 0xae09
    d3ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3f2:	781b      	ldrb	r3, [r3, #0]
    d3f4:	4413      	add	r3, r2
    d3f6:	b2da      	uxtb	r2, r3
    d3f8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d3fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d400:	701a      	strb	r2, [r3, #0]
    d402:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d406:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d40a:	781a      	ldrb	r2, [r3, #0]
    d40c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d410:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d414:	781b      	ldrb	r3, [r3, #0]
    d416:	4413      	add	r3, r2
    d418:	b2da      	uxtb	r2, r3
    d41a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d41e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d422:	701a      	strb	r2, [r3, #0]
    d424:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d428:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d42c:	781b      	ldrb	r3, [r3, #0]
    d42e:	3301      	adds	r3, #1
    d430:	b2da      	uxtb	r2, r3
    d432:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d436:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d43a:	701a      	strb	r2, [r3, #0]
    d43c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d440:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d444:	781b      	ldrb	r3, [r3, #0]
    d446:	2bff      	cmp	r3, #255	; 0xff
    d448:	d105      	bne.n	d456 <send_nav_values+0x1b2>
    d44a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d44e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d452:	2200      	movs	r2, #0
    d454:	701a      	strb	r2, [r3, #0]
    d456:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d45a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d45e:	781b      	ldrb	r3, [r3, #0]
    d460:	461a      	mov	r2, r3
    d462:	f64a 6308 	movw	r3, #44552	; 0xae08
    d466:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d46a:	7819      	ldrb	r1, [r3, #0]
    d46c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d470:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d474:	5499      	strb	r1, [r3, r2]
    d476:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d47a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d47e:	781a      	ldrb	r2, [r3, #0]
    d480:	f64a 6308 	movw	r3, #44552	; 0xae08
    d484:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d488:	781b      	ldrb	r3, [r3, #0]
    d48a:	4413      	add	r3, r2
    d48c:	b2da      	uxtb	r2, r3
    d48e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d492:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d496:	701a      	strb	r2, [r3, #0]
    d498:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d49c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4a0:	781a      	ldrb	r2, [r3, #0]
    d4a2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d4a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4aa:	781b      	ldrb	r3, [r3, #0]
    d4ac:	4413      	add	r3, r2
    d4ae:	b2da      	uxtb	r2, r3
    d4b0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d4b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4b8:	701a      	strb	r2, [r3, #0]
    d4ba:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d4be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4c2:	781b      	ldrb	r3, [r3, #0]
    d4c4:	3301      	adds	r3, #1
    d4c6:	b2da      	uxtb	r2, r3
    d4c8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d4cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4d0:	701a      	strb	r2, [r3, #0]
    d4d2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d4d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4da:	781b      	ldrb	r3, [r3, #0]
    d4dc:	2bff      	cmp	r3, #255	; 0xff
    d4de:	d105      	bne.n	d4ec <send_nav_values+0x248>
    d4e0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d4e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4e8:	2200      	movs	r2, #0
    d4ea:	701a      	strb	r2, [r3, #0]
    d4ec:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d4f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4f4:	781b      	ldrb	r3, [r3, #0]
    d4f6:	461a      	mov	r2, r3
    d4f8:	f24b 0364 	movw	r3, #45156	; 0xb064
    d4fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d500:	7819      	ldrb	r1, [r3, #0]
    d502:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d50a:	5499      	strb	r1, [r3, r2]
    d50c:	f24b 0364 	movw	r3, #45156	; 0xb064
    d510:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d514:	781a      	ldrb	r2, [r3, #0]
    d516:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d51a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d51e:	781b      	ldrb	r3, [r3, #0]
    d520:	4413      	add	r3, r2
    d522:	b2da      	uxtb	r2, r3
    d524:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d528:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d52c:	701a      	strb	r2, [r3, #0]
    d52e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d532:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d536:	781a      	ldrb	r2, [r3, #0]
    d538:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d53c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d540:	781b      	ldrb	r3, [r3, #0]
    d542:	4413      	add	r3, r2
    d544:	b2da      	uxtb	r2, r3
    d546:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d54a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d54e:	701a      	strb	r2, [r3, #0]
    d550:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d554:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d558:	781b      	ldrb	r3, [r3, #0]
    d55a:	3301      	adds	r3, #1
    d55c:	b2da      	uxtb	r2, r3
    d55e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d562:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d566:	701a      	strb	r2, [r3, #0]
    d568:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d56c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d570:	781b      	ldrb	r3, [r3, #0]
    d572:	2bff      	cmp	r3, #255	; 0xff
    d574:	d105      	bne.n	d582 <send_nav_values+0x2de>
    d576:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d57a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d57e:	2200      	movs	r2, #0
    d580:	701a      	strb	r2, [r3, #0]
    d582:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d586:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d58a:	781b      	ldrb	r3, [r3, #0]
    d58c:	461a      	mov	r2, r3
    d58e:	f24b 0364 	movw	r3, #45156	; 0xb064
    d592:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d596:	7859      	ldrb	r1, [r3, #1]
    d598:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d59c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5a0:	5499      	strb	r1, [r3, r2]
    d5a2:	4bd2      	ldr	r3, [pc, #840]	; (d8ec <send_nav_values+0x648>)
    d5a4:	781a      	ldrb	r2, [r3, #0]
    d5a6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d5aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5ae:	781b      	ldrb	r3, [r3, #0]
    d5b0:	4413      	add	r3, r2
    d5b2:	b2da      	uxtb	r2, r3
    d5b4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d5b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5bc:	701a      	strb	r2, [r3, #0]
    d5be:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d5c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5c6:	781a      	ldrb	r2, [r3, #0]
    d5c8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d5cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5d0:	781b      	ldrb	r3, [r3, #0]
    d5d2:	4413      	add	r3, r2
    d5d4:	b2da      	uxtb	r2, r3
    d5d6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d5da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5de:	701a      	strb	r2, [r3, #0]
    d5e0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d5e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5e8:	781b      	ldrb	r3, [r3, #0]
    d5ea:	3301      	adds	r3, #1
    d5ec:	b2da      	uxtb	r2, r3
    d5ee:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d5f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5f6:	701a      	strb	r2, [r3, #0]
    d5f8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d5fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d600:	781b      	ldrb	r3, [r3, #0]
    d602:	2bff      	cmp	r3, #255	; 0xff
    d604:	d105      	bne.n	d612 <send_nav_values+0x36e>
    d606:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d60a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d60e:	2200      	movs	r2, #0
    d610:	701a      	strb	r2, [r3, #0]
    d612:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d616:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d61a:	781b      	ldrb	r3, [r3, #0]
    d61c:	461a      	mov	r2, r3
    d61e:	f24b 0364 	movw	r3, #45156	; 0xb064
    d622:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d626:	7899      	ldrb	r1, [r3, #2]
    d628:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d62c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d630:	5499      	strb	r1, [r3, r2]
    d632:	4baf      	ldr	r3, [pc, #700]	; (d8f0 <send_nav_values+0x64c>)
    d634:	781a      	ldrb	r2, [r3, #0]
    d636:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d63a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d63e:	781b      	ldrb	r3, [r3, #0]
    d640:	4413      	add	r3, r2
    d642:	b2da      	uxtb	r2, r3
    d644:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d648:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d64c:	701a      	strb	r2, [r3, #0]
    d64e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d652:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d656:	781a      	ldrb	r2, [r3, #0]
    d658:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d65c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d660:	781b      	ldrb	r3, [r3, #0]
    d662:	4413      	add	r3, r2
    d664:	b2da      	uxtb	r2, r3
    d666:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d66a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d66e:	701a      	strb	r2, [r3, #0]
    d670:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d674:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d678:	781b      	ldrb	r3, [r3, #0]
    d67a:	3301      	adds	r3, #1
    d67c:	b2da      	uxtb	r2, r3
    d67e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d686:	701a      	strb	r2, [r3, #0]
    d688:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d68c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d690:	781b      	ldrb	r3, [r3, #0]
    d692:	2bff      	cmp	r3, #255	; 0xff
    d694:	d105      	bne.n	d6a2 <send_nav_values+0x3fe>
    d696:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d69a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d69e:	2200      	movs	r2, #0
    d6a0:	701a      	strb	r2, [r3, #0]
    d6a2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d6a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6aa:	781b      	ldrb	r3, [r3, #0]
    d6ac:	461a      	mov	r2, r3
    d6ae:	f24b 0364 	movw	r3, #45156	; 0xb064
    d6b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6b6:	78d9      	ldrb	r1, [r3, #3]
    d6b8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d6bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6c0:	5499      	strb	r1, [r3, r2]
    d6c2:	4b8c      	ldr	r3, [pc, #560]	; (d8f4 <send_nav_values+0x650>)
    d6c4:	781a      	ldrb	r2, [r3, #0]
    d6c6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d6ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6ce:	781b      	ldrb	r3, [r3, #0]
    d6d0:	4413      	add	r3, r2
    d6d2:	b2da      	uxtb	r2, r3
    d6d4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d6d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6dc:	701a      	strb	r2, [r3, #0]
    d6de:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d6e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6e6:	781a      	ldrb	r2, [r3, #0]
    d6e8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d6ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6f0:	781b      	ldrb	r3, [r3, #0]
    d6f2:	4413      	add	r3, r2
    d6f4:	b2da      	uxtb	r2, r3
    d6f6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d6fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6fe:	701a      	strb	r2, [r3, #0]
    d700:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d704:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d708:	781b      	ldrb	r3, [r3, #0]
    d70a:	3301      	adds	r3, #1
    d70c:	b2da      	uxtb	r2, r3
    d70e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d712:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d716:	701a      	strb	r2, [r3, #0]
    d718:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d71c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d720:	781b      	ldrb	r3, [r3, #0]
    d722:	2bff      	cmp	r3, #255	; 0xff
    d724:	d105      	bne.n	d732 <send_nav_values+0x48e>
    d726:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d72a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d72e:	2200      	movs	r2, #0
    d730:	701a      	strb	r2, [r3, #0]
    d732:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d736:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d73a:	781b      	ldrb	r3, [r3, #0]
    d73c:	461a      	mov	r2, r3
    d73e:	f24b 0368 	movw	r3, #45160	; 0xb068
    d742:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d746:	7819      	ldrb	r1, [r3, #0]
    d748:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d74c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d750:	5499      	strb	r1, [r3, r2]
    d752:	f24b 0368 	movw	r3, #45160	; 0xb068
    d756:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d75a:	781a      	ldrb	r2, [r3, #0]
    d75c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d760:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d764:	781b      	ldrb	r3, [r3, #0]
    d766:	4413      	add	r3, r2
    d768:	b2da      	uxtb	r2, r3
    d76a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d76e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d772:	701a      	strb	r2, [r3, #0]
    d774:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d778:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d77c:	781a      	ldrb	r2, [r3, #0]
    d77e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d782:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d786:	781b      	ldrb	r3, [r3, #0]
    d788:	4413      	add	r3, r2
    d78a:	b2da      	uxtb	r2, r3
    d78c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d790:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d794:	701a      	strb	r2, [r3, #0]
    d796:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d79a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d79e:	781b      	ldrb	r3, [r3, #0]
    d7a0:	3301      	adds	r3, #1
    d7a2:	b2da      	uxtb	r2, r3
    d7a4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d7a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7ac:	701a      	strb	r2, [r3, #0]
    d7ae:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d7b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7b6:	781b      	ldrb	r3, [r3, #0]
    d7b8:	2bff      	cmp	r3, #255	; 0xff
    d7ba:	d105      	bne.n	d7c8 <send_nav_values+0x524>
    d7bc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d7c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7c4:	2200      	movs	r2, #0
    d7c6:	701a      	strb	r2, [r3, #0]
    d7c8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d7cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7d0:	781b      	ldrb	r3, [r3, #0]
    d7d2:	461a      	mov	r2, r3
    d7d4:	f24b 0368 	movw	r3, #45160	; 0xb068
    d7d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7dc:	7859      	ldrb	r1, [r3, #1]
    d7de:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d7e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7e6:	5499      	strb	r1, [r3, r2]
    d7e8:	4b43      	ldr	r3, [pc, #268]	; (d8f8 <send_nav_values+0x654>)
    d7ea:	781a      	ldrb	r2, [r3, #0]
    d7ec:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d7f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7f4:	781b      	ldrb	r3, [r3, #0]
    d7f6:	4413      	add	r3, r2
    d7f8:	b2da      	uxtb	r2, r3
    d7fa:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d7fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d802:	701a      	strb	r2, [r3, #0]
    d804:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d808:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d80c:	781a      	ldrb	r2, [r3, #0]
    d80e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d816:	781b      	ldrb	r3, [r3, #0]
    d818:	4413      	add	r3, r2
    d81a:	b2da      	uxtb	r2, r3
    d81c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d820:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d824:	701a      	strb	r2, [r3, #0]
    d826:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d82a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d82e:	781b      	ldrb	r3, [r3, #0]
    d830:	3301      	adds	r3, #1
    d832:	b2da      	uxtb	r2, r3
    d834:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d838:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d83c:	701a      	strb	r2, [r3, #0]
    d83e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d842:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d846:	781b      	ldrb	r3, [r3, #0]
    d848:	2bff      	cmp	r3, #255	; 0xff
    d84a:	d105      	bne.n	d858 <send_nav_values+0x5b4>
    d84c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d850:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d854:	2200      	movs	r2, #0
    d856:	701a      	strb	r2, [r3, #0]
    d858:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d85c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d860:	781b      	ldrb	r3, [r3, #0]
    d862:	461a      	mov	r2, r3
    d864:	f24b 0368 	movw	r3, #45160	; 0xb068
    d868:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d86c:	7899      	ldrb	r1, [r3, #2]
    d86e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d872:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d876:	5499      	strb	r1, [r3, r2]
    d878:	4b20      	ldr	r3, [pc, #128]	; (d8fc <send_nav_values+0x658>)
    d87a:	781a      	ldrb	r2, [r3, #0]
    d87c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d880:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d884:	781b      	ldrb	r3, [r3, #0]
    d886:	4413      	add	r3, r2
    d888:	b2da      	uxtb	r2, r3
    d88a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d88e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d892:	701a      	strb	r2, [r3, #0]
    d894:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d898:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d89c:	781a      	ldrb	r2, [r3, #0]
    d89e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d8a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8a6:	781b      	ldrb	r3, [r3, #0]
    d8a8:	4413      	add	r3, r2
    d8aa:	b2da      	uxtb	r2, r3
    d8ac:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d8b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8b4:	701a      	strb	r2, [r3, #0]
    d8b6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d8ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8be:	781b      	ldrb	r3, [r3, #0]
    d8c0:	3301      	adds	r3, #1
    d8c2:	b2da      	uxtb	r2, r3
    d8c4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d8c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8cc:	701a      	strb	r2, [r3, #0]
    d8ce:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d8d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8d6:	781b      	ldrb	r3, [r3, #0]
    d8d8:	2bff      	cmp	r3, #255	; 0xff
    d8da:	d111      	bne.n	d900 <send_nav_values+0x65c>
    d8dc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d8e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8e4:	2200      	movs	r2, #0
    d8e6:	701a      	strb	r2, [r3, #0]
    d8e8:	e00a      	b.n	d900 <send_nav_values+0x65c>
    d8ea:	bf00      	nop
    d8ec:	2000b065 	.word	0x2000b065
    d8f0:	2000b066 	.word	0x2000b066
    d8f4:	2000b067 	.word	0x2000b067
    d8f8:	2000b069 	.word	0x2000b069
    d8fc:	2000b06a 	.word	0x2000b06a
    d900:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d904:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d908:	781b      	ldrb	r3, [r3, #0]
    d90a:	461a      	mov	r2, r3
    d90c:	f24b 0368 	movw	r3, #45160	; 0xb068
    d910:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d914:	78d9      	ldrb	r1, [r3, #3]
    d916:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d91a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d91e:	5499      	strb	r1, [r3, r2]
    d920:	4bd3      	ldr	r3, [pc, #844]	; (dc70 <send_nav_values+0x9cc>)
    d922:	781a      	ldrb	r2, [r3, #0]
    d924:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d928:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d92c:	781b      	ldrb	r3, [r3, #0]
    d92e:	4413      	add	r3, r2
    d930:	b2da      	uxtb	r2, r3
    d932:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d936:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d93a:	701a      	strb	r2, [r3, #0]
    d93c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d940:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d944:	781a      	ldrb	r2, [r3, #0]
    d946:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d94a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d94e:	781b      	ldrb	r3, [r3, #0]
    d950:	4413      	add	r3, r2
    d952:	b2da      	uxtb	r2, r3
    d954:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d958:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d95c:	701a      	strb	r2, [r3, #0]
    d95e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d962:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d966:	781b      	ldrb	r3, [r3, #0]
    d968:	3301      	adds	r3, #1
    d96a:	b2da      	uxtb	r2, r3
    d96c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d970:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d974:	701a      	strb	r2, [r3, #0]
    d976:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d97a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d97e:	781b      	ldrb	r3, [r3, #0]
    d980:	2bff      	cmp	r3, #255	; 0xff
    d982:	d105      	bne.n	d990 <send_nav_values+0x6ec>
    d984:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d988:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d98c:	2200      	movs	r2, #0
    d98e:	701a      	strb	r2, [r3, #0]
    d990:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d998:	781b      	ldrb	r3, [r3, #0]
    d99a:	461a      	mov	r2, r3
    d99c:	f64a 53f4 	movw	r3, #44532	; 0xadf4
    d9a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9a4:	7819      	ldrb	r1, [r3, #0]
    d9a6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    d9aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9ae:	5499      	strb	r1, [r3, r2]
    d9b0:	f64a 53f4 	movw	r3, #44532	; 0xadf4
    d9b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9b8:	781a      	ldrb	r2, [r3, #0]
    d9ba:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d9be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9c2:	781b      	ldrb	r3, [r3, #0]
    d9c4:	4413      	add	r3, r2
    d9c6:	b2da      	uxtb	r2, r3
    d9c8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d9cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9d0:	701a      	strb	r2, [r3, #0]
    d9d2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d9d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9da:	781a      	ldrb	r2, [r3, #0]
    d9dc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    d9e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9e4:	781b      	ldrb	r3, [r3, #0]
    d9e6:	4413      	add	r3, r2
    d9e8:	b2da      	uxtb	r2, r3
    d9ea:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    d9ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9f2:	701a      	strb	r2, [r3, #0]
    d9f4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    d9f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9fc:	781b      	ldrb	r3, [r3, #0]
    d9fe:	3301      	adds	r3, #1
    da00:	b2da      	uxtb	r2, r3
    da02:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    da06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da0a:	701a      	strb	r2, [r3, #0]
    da0c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    da10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da14:	781b      	ldrb	r3, [r3, #0]
    da16:	2bff      	cmp	r3, #255	; 0xff
    da18:	d105      	bne.n	da26 <send_nav_values+0x782>
    da1a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    da1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da22:	2200      	movs	r2, #0
    da24:	701a      	strb	r2, [r3, #0]
    da26:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    da2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da2e:	781b      	ldrb	r3, [r3, #0]
    da30:	461a      	mov	r2, r3
    da32:	f64a 53f4 	movw	r3, #44532	; 0xadf4
    da36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da3a:	7859      	ldrb	r1, [r3, #1]
    da3c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    da40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da44:	5499      	strb	r1, [r3, r2]
    da46:	4b8b      	ldr	r3, [pc, #556]	; (dc74 <send_nav_values+0x9d0>)
    da48:	781a      	ldrb	r2, [r3, #0]
    da4a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    da4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da52:	781b      	ldrb	r3, [r3, #0]
    da54:	4413      	add	r3, r2
    da56:	b2da      	uxtb	r2, r3
    da58:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    da5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da60:	701a      	strb	r2, [r3, #0]
    da62:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    da66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da6a:	781a      	ldrb	r2, [r3, #0]
    da6c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    da70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da74:	781b      	ldrb	r3, [r3, #0]
    da76:	4413      	add	r3, r2
    da78:	b2da      	uxtb	r2, r3
    da7a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    da7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da82:	701a      	strb	r2, [r3, #0]
    da84:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    da88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da8c:	781b      	ldrb	r3, [r3, #0]
    da8e:	3301      	adds	r3, #1
    da90:	b2da      	uxtb	r2, r3
    da92:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    da96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da9a:	701a      	strb	r2, [r3, #0]
    da9c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    daa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    daa4:	781b      	ldrb	r3, [r3, #0]
    daa6:	2bff      	cmp	r3, #255	; 0xff
    daa8:	d105      	bne.n	dab6 <send_nav_values+0x812>
    daaa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    daae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dab2:	2200      	movs	r2, #0
    dab4:	701a      	strb	r2, [r3, #0]
    dab6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    daba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dabe:	781b      	ldrb	r3, [r3, #0]
    dac0:	461a      	mov	r2, r3
    dac2:	f64a 53f4 	movw	r3, #44532	; 0xadf4
    dac6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    daca:	7899      	ldrb	r1, [r3, #2]
    dacc:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    dad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dad4:	5499      	strb	r1, [r3, r2]
    dad6:	4b68      	ldr	r3, [pc, #416]	; (dc78 <send_nav_values+0x9d4>)
    dad8:	781a      	ldrb	r2, [r3, #0]
    dada:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dade:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dae2:	781b      	ldrb	r3, [r3, #0]
    dae4:	4413      	add	r3, r2
    dae6:	b2da      	uxtb	r2, r3
    dae8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    daec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    daf0:	701a      	strb	r2, [r3, #0]
    daf2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    daf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dafa:	781a      	ldrb	r2, [r3, #0]
    dafc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    db00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db04:	781b      	ldrb	r3, [r3, #0]
    db06:	4413      	add	r3, r2
    db08:	b2da      	uxtb	r2, r3
    db0a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    db0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db12:	701a      	strb	r2, [r3, #0]
    db14:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    db18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db1c:	781b      	ldrb	r3, [r3, #0]
    db1e:	3301      	adds	r3, #1
    db20:	b2da      	uxtb	r2, r3
    db22:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    db26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db2a:	701a      	strb	r2, [r3, #0]
    db2c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    db30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db34:	781b      	ldrb	r3, [r3, #0]
    db36:	2bff      	cmp	r3, #255	; 0xff
    db38:	d105      	bne.n	db46 <send_nav_values+0x8a2>
    db3a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    db3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db42:	2200      	movs	r2, #0
    db44:	701a      	strb	r2, [r3, #0]
    db46:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    db4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db4e:	781b      	ldrb	r3, [r3, #0]
    db50:	461a      	mov	r2, r3
    db52:	f64a 53f4 	movw	r3, #44532	; 0xadf4
    db56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db5a:	78d9      	ldrb	r1, [r3, #3]
    db5c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    db60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db64:	5499      	strb	r1, [r3, r2]
    db66:	4b45      	ldr	r3, [pc, #276]	; (dc7c <send_nav_values+0x9d8>)
    db68:	781a      	ldrb	r2, [r3, #0]
    db6a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    db6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db72:	781b      	ldrb	r3, [r3, #0]
    db74:	4413      	add	r3, r2
    db76:	b2da      	uxtb	r2, r3
    db78:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    db7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db80:	701a      	strb	r2, [r3, #0]
    db82:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    db86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db8a:	781a      	ldrb	r2, [r3, #0]
    db8c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    db90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db94:	781b      	ldrb	r3, [r3, #0]
    db96:	4413      	add	r3, r2
    db98:	b2da      	uxtb	r2, r3
    db9a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    db9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dba2:	701a      	strb	r2, [r3, #0]
    dba4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbac:	781b      	ldrb	r3, [r3, #0]
    dbae:	3301      	adds	r3, #1
    dbb0:	b2da      	uxtb	r2, r3
    dbb2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dbb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbba:	701a      	strb	r2, [r3, #0]
    dbbc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dbc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbc4:	781b      	ldrb	r3, [r3, #0]
    dbc6:	2bff      	cmp	r3, #255	; 0xff
    dbc8:	d105      	bne.n	dbd6 <send_nav_values+0x932>
    dbca:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dbce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbd2:	2200      	movs	r2, #0
    dbd4:	701a      	strb	r2, [r3, #0]
    dbd6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dbda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbde:	781b      	ldrb	r3, [r3, #0]
    dbe0:	461a      	mov	r2, r3
    dbe2:	f64a 633c 	movw	r3, #44604	; 0xae3c
    dbe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbea:	7819      	ldrb	r1, [r3, #0]
    dbec:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    dbf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbf4:	5499      	strb	r1, [r3, r2]
    dbf6:	f64a 633c 	movw	r3, #44604	; 0xae3c
    dbfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbfe:	781a      	ldrb	r2, [r3, #0]
    dc00:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dc04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc08:	781b      	ldrb	r3, [r3, #0]
    dc0a:	4413      	add	r3, r2
    dc0c:	b2da      	uxtb	r2, r3
    dc0e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dc12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc16:	701a      	strb	r2, [r3, #0]
    dc18:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    dc1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc20:	781a      	ldrb	r2, [r3, #0]
    dc22:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dc26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc2a:	781b      	ldrb	r3, [r3, #0]
    dc2c:	4413      	add	r3, r2
    dc2e:	b2da      	uxtb	r2, r3
    dc30:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    dc34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc38:	701a      	strb	r2, [r3, #0]
    dc3a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dc3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc42:	781b      	ldrb	r3, [r3, #0]
    dc44:	3301      	adds	r3, #1
    dc46:	b2da      	uxtb	r2, r3
    dc48:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dc4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc50:	701a      	strb	r2, [r3, #0]
    dc52:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dc56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc5a:	781b      	ldrb	r3, [r3, #0]
    dc5c:	2bff      	cmp	r3, #255	; 0xff
    dc5e:	d10f      	bne.n	dc80 <send_nav_values+0x9dc>
    dc60:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dc64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc68:	2200      	movs	r2, #0
    dc6a:	701a      	strb	r2, [r3, #0]
    dc6c:	e008      	b.n	dc80 <send_nav_values+0x9dc>
    dc6e:	bf00      	nop
    dc70:	2000b06b 	.word	0x2000b06b
    dc74:	2000adf5 	.word	0x2000adf5
    dc78:	2000adf6 	.word	0x2000adf6
    dc7c:	2000adf7 	.word	0x2000adf7
    dc80:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dc84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc88:	781b      	ldrb	r3, [r3, #0]
    dc8a:	461a      	mov	r2, r3
    dc8c:	f64a 633c 	movw	r3, #44604	; 0xae3c
    dc90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc94:	7859      	ldrb	r1, [r3, #1]
    dc96:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    dc9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc9e:	5499      	strb	r1, [r3, r2]
    dca0:	4bd1      	ldr	r3, [pc, #836]	; (dfe8 <send_nav_values+0xd44>)
    dca2:	781a      	ldrb	r2, [r3, #0]
    dca4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcac:	781b      	ldrb	r3, [r3, #0]
    dcae:	4413      	add	r3, r2
    dcb0:	b2da      	uxtb	r2, r3
    dcb2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dcb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcba:	701a      	strb	r2, [r3, #0]
    dcbc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    dcc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcc4:	781a      	ldrb	r2, [r3, #0]
    dcc6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dcca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcce:	781b      	ldrb	r3, [r3, #0]
    dcd0:	4413      	add	r3, r2
    dcd2:	b2da      	uxtb	r2, r3
    dcd4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    dcd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcdc:	701a      	strb	r2, [r3, #0]
    dcde:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dce2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dce6:	781b      	ldrb	r3, [r3, #0]
    dce8:	3301      	adds	r3, #1
    dcea:	b2da      	uxtb	r2, r3
    dcec:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dcf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcf4:	701a      	strb	r2, [r3, #0]
    dcf6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dcfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcfe:	781b      	ldrb	r3, [r3, #0]
    dd00:	2bff      	cmp	r3, #255	; 0xff
    dd02:	d105      	bne.n	dd10 <send_nav_values+0xa6c>
    dd04:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dd08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd0c:	2200      	movs	r2, #0
    dd0e:	701a      	strb	r2, [r3, #0]
    dd10:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dd14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd18:	781b      	ldrb	r3, [r3, #0]
    dd1a:	461a      	mov	r2, r3
    dd1c:	f64a 633c 	movw	r3, #44604	; 0xae3c
    dd20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd24:	7899      	ldrb	r1, [r3, #2]
    dd26:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    dd2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd2e:	5499      	strb	r1, [r3, r2]
    dd30:	4bae      	ldr	r3, [pc, #696]	; (dfec <send_nav_values+0xd48>)
    dd32:	781a      	ldrb	r2, [r3, #0]
    dd34:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dd38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd3c:	781b      	ldrb	r3, [r3, #0]
    dd3e:	4413      	add	r3, r2
    dd40:	b2da      	uxtb	r2, r3
    dd42:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dd46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd4a:	701a      	strb	r2, [r3, #0]
    dd4c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    dd50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd54:	781a      	ldrb	r2, [r3, #0]
    dd56:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dd5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd5e:	781b      	ldrb	r3, [r3, #0]
    dd60:	4413      	add	r3, r2
    dd62:	b2da      	uxtb	r2, r3
    dd64:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    dd68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd6c:	701a      	strb	r2, [r3, #0]
    dd6e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dd72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd76:	781b      	ldrb	r3, [r3, #0]
    dd78:	3301      	adds	r3, #1
    dd7a:	b2da      	uxtb	r2, r3
    dd7c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dd80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd84:	701a      	strb	r2, [r3, #0]
    dd86:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dd8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd8e:	781b      	ldrb	r3, [r3, #0]
    dd90:	2bff      	cmp	r3, #255	; 0xff
    dd92:	d105      	bne.n	dda0 <send_nav_values+0xafc>
    dd94:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dd98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd9c:	2200      	movs	r2, #0
    dd9e:	701a      	strb	r2, [r3, #0]
    dda0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dda4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dda8:	781b      	ldrb	r3, [r3, #0]
    ddaa:	461a      	mov	r2, r3
    ddac:	f64a 633c 	movw	r3, #44604	; 0xae3c
    ddb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddb4:	78d9      	ldrb	r1, [r3, #3]
    ddb6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ddba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddbe:	5499      	strb	r1, [r3, r2]
    ddc0:	4b8b      	ldr	r3, [pc, #556]	; (dff0 <send_nav_values+0xd4c>)
    ddc2:	781a      	ldrb	r2, [r3, #0]
    ddc4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ddc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddcc:	781b      	ldrb	r3, [r3, #0]
    ddce:	4413      	add	r3, r2
    ddd0:	b2da      	uxtb	r2, r3
    ddd2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ddd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddda:	701a      	strb	r2, [r3, #0]
    dddc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    dde0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dde4:	781a      	ldrb	r2, [r3, #0]
    dde6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ddea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddee:	781b      	ldrb	r3, [r3, #0]
    ddf0:	4413      	add	r3, r2
    ddf2:	b2da      	uxtb	r2, r3
    ddf4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ddf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddfc:	701a      	strb	r2, [r3, #0]
    ddfe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    de02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de06:	781b      	ldrb	r3, [r3, #0]
    de08:	3301      	adds	r3, #1
    de0a:	b2da      	uxtb	r2, r3
    de0c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    de10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de14:	701a      	strb	r2, [r3, #0]
    de16:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    de1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de1e:	781b      	ldrb	r3, [r3, #0]
    de20:	2bff      	cmp	r3, #255	; 0xff
    de22:	d105      	bne.n	de30 <send_nav_values+0xb8c>
    de24:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    de28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de2c:	2200      	movs	r2, #0
    de2e:	701a      	strb	r2, [r3, #0]
    de30:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    de34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de38:	781b      	ldrb	r3, [r3, #0]
    de3a:	461a      	mov	r2, r3
    de3c:	f240 239c 	movw	r3, #668	; 0x29c
    de40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de44:	7819      	ldrb	r1, [r3, #0]
    de46:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    de4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de4e:	5499      	strb	r1, [r3, r2]
    de50:	f240 239c 	movw	r3, #668	; 0x29c
    de54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de58:	781a      	ldrb	r2, [r3, #0]
    de5a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    de5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de62:	781b      	ldrb	r3, [r3, #0]
    de64:	4413      	add	r3, r2
    de66:	b2da      	uxtb	r2, r3
    de68:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    de6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de70:	701a      	strb	r2, [r3, #0]
    de72:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    de76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de7a:	781a      	ldrb	r2, [r3, #0]
    de7c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    de80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de84:	781b      	ldrb	r3, [r3, #0]
    de86:	4413      	add	r3, r2
    de88:	b2da      	uxtb	r2, r3
    de8a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    de8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de92:	701a      	strb	r2, [r3, #0]
    de94:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    de98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de9c:	781b      	ldrb	r3, [r3, #0]
    de9e:	3301      	adds	r3, #1
    dea0:	b2da      	uxtb	r2, r3
    dea2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    deaa:	701a      	strb	r2, [r3, #0]
    deac:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    deb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    deb4:	781b      	ldrb	r3, [r3, #0]
    deb6:	2bff      	cmp	r3, #255	; 0xff
    deb8:	d105      	bne.n	dec6 <send_nav_values+0xc22>
    deba:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    debe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dec2:	2200      	movs	r2, #0
    dec4:	701a      	strb	r2, [r3, #0]
    dec6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    deca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dece:	781b      	ldrb	r3, [r3, #0]
    ded0:	461a      	mov	r2, r3
    ded2:	f240 239c 	movw	r3, #668	; 0x29c
    ded6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    deda:	7859      	ldrb	r1, [r3, #1]
    dedc:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    dee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dee4:	5499      	strb	r1, [r3, r2]
    dee6:	4b43      	ldr	r3, [pc, #268]	; (dff4 <send_nav_values+0xd50>)
    dee8:	781a      	ldrb	r2, [r3, #0]
    deea:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    deee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    def2:	781b      	ldrb	r3, [r3, #0]
    def4:	4413      	add	r3, r2
    def6:	b2da      	uxtb	r2, r3
    def8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    defc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df00:	701a      	strb	r2, [r3, #0]
    df02:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    df06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df0a:	781a      	ldrb	r2, [r3, #0]
    df0c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    df10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df14:	781b      	ldrb	r3, [r3, #0]
    df16:	4413      	add	r3, r2
    df18:	b2da      	uxtb	r2, r3
    df1a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    df1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df22:	701a      	strb	r2, [r3, #0]
    df24:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    df28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df2c:	781b      	ldrb	r3, [r3, #0]
    df2e:	3301      	adds	r3, #1
    df30:	b2da      	uxtb	r2, r3
    df32:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    df36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df3a:	701a      	strb	r2, [r3, #0]
    df3c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    df40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df44:	781b      	ldrb	r3, [r3, #0]
    df46:	2bff      	cmp	r3, #255	; 0xff
    df48:	d105      	bne.n	df56 <send_nav_values+0xcb2>
    df4a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    df4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df52:	2200      	movs	r2, #0
    df54:	701a      	strb	r2, [r3, #0]
    df56:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    df5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df5e:	781b      	ldrb	r3, [r3, #0]
    df60:	461a      	mov	r2, r3
    df62:	f240 239c 	movw	r3, #668	; 0x29c
    df66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df6a:	7899      	ldrb	r1, [r3, #2]
    df6c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    df70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df74:	5499      	strb	r1, [r3, r2]
    df76:	4b20      	ldr	r3, [pc, #128]	; (dff8 <send_nav_values+0xd54>)
    df78:	781a      	ldrb	r2, [r3, #0]
    df7a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    df7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df82:	781b      	ldrb	r3, [r3, #0]
    df84:	4413      	add	r3, r2
    df86:	b2da      	uxtb	r2, r3
    df88:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    df8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df90:	701a      	strb	r2, [r3, #0]
    df92:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    df96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df9a:	781a      	ldrb	r2, [r3, #0]
    df9c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    dfa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfa4:	781b      	ldrb	r3, [r3, #0]
    dfa6:	4413      	add	r3, r2
    dfa8:	b2da      	uxtb	r2, r3
    dfaa:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    dfae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfb2:	701a      	strb	r2, [r3, #0]
    dfb4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dfb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfbc:	781b      	ldrb	r3, [r3, #0]
    dfbe:	3301      	adds	r3, #1
    dfc0:	b2da      	uxtb	r2, r3
    dfc2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dfc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfca:	701a      	strb	r2, [r3, #0]
    dfcc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dfd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfd4:	781b      	ldrb	r3, [r3, #0]
    dfd6:	2bff      	cmp	r3, #255	; 0xff
    dfd8:	d110      	bne.n	dffc <send_nav_values+0xd58>
    dfda:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    dfde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfe2:	2200      	movs	r2, #0
    dfe4:	701a      	strb	r2, [r3, #0]
    dfe6:	e009      	b.n	dffc <send_nav_values+0xd58>
    dfe8:	2000ae3d 	.word	0x2000ae3d
    dfec:	2000ae3e 	.word	0x2000ae3e
    dff0:	2000ae3f 	.word	0x2000ae3f
    dff4:	2000029d 	.word	0x2000029d
    dff8:	2000029e 	.word	0x2000029e
    dffc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e000:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e004:	781b      	ldrb	r3, [r3, #0]
    e006:	461a      	mov	r2, r3
    e008:	f240 239c 	movw	r3, #668	; 0x29c
    e00c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e010:	78d9      	ldrb	r1, [r3, #3]
    e012:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e016:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e01a:	5499      	strb	r1, [r3, r2]
    e01c:	4bc2      	ldr	r3, [pc, #776]	; (e328 <send_nav_values+0x1084>)
    e01e:	781a      	ldrb	r2, [r3, #0]
    e020:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e024:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e028:	781b      	ldrb	r3, [r3, #0]
    e02a:	4413      	add	r3, r2
    e02c:	b2da      	uxtb	r2, r3
    e02e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e032:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e036:	701a      	strb	r2, [r3, #0]
    e038:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e03c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e040:	781a      	ldrb	r2, [r3, #0]
    e042:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e046:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e04a:	781b      	ldrb	r3, [r3, #0]
    e04c:	4413      	add	r3, r2
    e04e:	b2da      	uxtb	r2, r3
    e050:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e054:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e058:	701a      	strb	r2, [r3, #0]
    e05a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e05e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e062:	781b      	ldrb	r3, [r3, #0]
    e064:	3301      	adds	r3, #1
    e066:	b2da      	uxtb	r2, r3
    e068:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e06c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e070:	701a      	strb	r2, [r3, #0]
    e072:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e076:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e07a:	781b      	ldrb	r3, [r3, #0]
    e07c:	2bff      	cmp	r3, #255	; 0xff
    e07e:	d105      	bne.n	e08c <send_nav_values+0xde8>
    e080:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e084:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e088:	2200      	movs	r2, #0
    e08a:	701a      	strb	r2, [r3, #0]
    e08c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e090:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e094:	781b      	ldrb	r3, [r3, #0]
    e096:	461a      	mov	r2, r3
    e098:	f64a 6340 	movw	r3, #44608	; 0xae40
    e09c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0a0:	7819      	ldrb	r1, [r3, #0]
    e0a2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e0a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0aa:	5499      	strb	r1, [r3, r2]
    e0ac:	f64a 6340 	movw	r3, #44608	; 0xae40
    e0b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0b4:	781a      	ldrb	r2, [r3, #0]
    e0b6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e0ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0be:	781b      	ldrb	r3, [r3, #0]
    e0c0:	4413      	add	r3, r2
    e0c2:	b2da      	uxtb	r2, r3
    e0c4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e0c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0cc:	701a      	strb	r2, [r3, #0]
    e0ce:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e0d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0d6:	781a      	ldrb	r2, [r3, #0]
    e0d8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e0dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0e0:	781b      	ldrb	r3, [r3, #0]
    e0e2:	4413      	add	r3, r2
    e0e4:	b2da      	uxtb	r2, r3
    e0e6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e0ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0ee:	701a      	strb	r2, [r3, #0]
    e0f0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e0f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0f8:	781b      	ldrb	r3, [r3, #0]
    e0fa:	3301      	adds	r3, #1
    e0fc:	b2da      	uxtb	r2, r3
    e0fe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e102:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e106:	701a      	strb	r2, [r3, #0]
    e108:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e10c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e110:	781b      	ldrb	r3, [r3, #0]
    e112:	2bff      	cmp	r3, #255	; 0xff
    e114:	d105      	bne.n	e122 <send_nav_values+0xe7e>
    e116:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e11a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e11e:	2200      	movs	r2, #0
    e120:	701a      	strb	r2, [r3, #0]
    e122:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e126:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e12a:	781b      	ldrb	r3, [r3, #0]
    e12c:	461a      	mov	r2, r3
    e12e:	f64a 6340 	movw	r3, #44608	; 0xae40
    e132:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e136:	7859      	ldrb	r1, [r3, #1]
    e138:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e13c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e140:	5499      	strb	r1, [r3, r2]
    e142:	4b7a      	ldr	r3, [pc, #488]	; (e32c <send_nav_values+0x1088>)
    e144:	781a      	ldrb	r2, [r3, #0]
    e146:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e14a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e14e:	781b      	ldrb	r3, [r3, #0]
    e150:	4413      	add	r3, r2
    e152:	b2da      	uxtb	r2, r3
    e154:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e158:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e15c:	701a      	strb	r2, [r3, #0]
    e15e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e162:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e166:	781a      	ldrb	r2, [r3, #0]
    e168:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e16c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e170:	781b      	ldrb	r3, [r3, #0]
    e172:	4413      	add	r3, r2
    e174:	b2da      	uxtb	r2, r3
    e176:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e17a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e17e:	701a      	strb	r2, [r3, #0]
    e180:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e184:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e188:	781b      	ldrb	r3, [r3, #0]
    e18a:	3301      	adds	r3, #1
    e18c:	b2da      	uxtb	r2, r3
    e18e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e192:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e196:	701a      	strb	r2, [r3, #0]
    e198:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e19c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1a0:	781b      	ldrb	r3, [r3, #0]
    e1a2:	2bff      	cmp	r3, #255	; 0xff
    e1a4:	d105      	bne.n	e1b2 <send_nav_values+0xf0e>
    e1a6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e1aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1ae:	2200      	movs	r2, #0
    e1b0:	701a      	strb	r2, [r3, #0]
    e1b2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e1b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1ba:	781b      	ldrb	r3, [r3, #0]
    e1bc:	461a      	mov	r2, r3
    e1be:	f64a 6340 	movw	r3, #44608	; 0xae40
    e1c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1c6:	7899      	ldrb	r1, [r3, #2]
    e1c8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e1cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1d0:	5499      	strb	r1, [r3, r2]
    e1d2:	4b57      	ldr	r3, [pc, #348]	; (e330 <send_nav_values+0x108c>)
    e1d4:	781a      	ldrb	r2, [r3, #0]
    e1d6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e1da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1de:	781b      	ldrb	r3, [r3, #0]
    e1e0:	4413      	add	r3, r2
    e1e2:	b2da      	uxtb	r2, r3
    e1e4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e1e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1ec:	701a      	strb	r2, [r3, #0]
    e1ee:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e1f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1f6:	781a      	ldrb	r2, [r3, #0]
    e1f8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e1fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e200:	781b      	ldrb	r3, [r3, #0]
    e202:	4413      	add	r3, r2
    e204:	b2da      	uxtb	r2, r3
    e206:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e20a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e20e:	701a      	strb	r2, [r3, #0]
    e210:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e214:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e218:	781b      	ldrb	r3, [r3, #0]
    e21a:	3301      	adds	r3, #1
    e21c:	b2da      	uxtb	r2, r3
    e21e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e222:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e226:	701a      	strb	r2, [r3, #0]
    e228:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e22c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e230:	781b      	ldrb	r3, [r3, #0]
    e232:	2bff      	cmp	r3, #255	; 0xff
    e234:	d105      	bne.n	e242 <send_nav_values+0xf9e>
    e236:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e23a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e23e:	2200      	movs	r2, #0
    e240:	701a      	strb	r2, [r3, #0]
    e242:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e246:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e24a:	781b      	ldrb	r3, [r3, #0]
    e24c:	461a      	mov	r2, r3
    e24e:	f64a 6340 	movw	r3, #44608	; 0xae40
    e252:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e256:	78d9      	ldrb	r1, [r3, #3]
    e258:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e25c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e260:	5499      	strb	r1, [r3, r2]
    e262:	4b34      	ldr	r3, [pc, #208]	; (e334 <send_nav_values+0x1090>)
    e264:	781a      	ldrb	r2, [r3, #0]
    e266:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e26a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e26e:	781b      	ldrb	r3, [r3, #0]
    e270:	4413      	add	r3, r2
    e272:	b2da      	uxtb	r2, r3
    e274:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e278:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e27c:	701a      	strb	r2, [r3, #0]
    e27e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e282:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e286:	781a      	ldrb	r2, [r3, #0]
    e288:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e28c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e290:	781b      	ldrb	r3, [r3, #0]
    e292:	4413      	add	r3, r2
    e294:	b2da      	uxtb	r2, r3
    e296:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e29a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e29e:	701a      	strb	r2, [r3, #0]
    e2a0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e2a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2a8:	781b      	ldrb	r3, [r3, #0]
    e2aa:	3301      	adds	r3, #1
    e2ac:	b2da      	uxtb	r2, r3
    e2ae:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e2b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2b6:	701a      	strb	r2, [r3, #0]
    e2b8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e2bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2c0:	781b      	ldrb	r3, [r3, #0]
    e2c2:	2bff      	cmp	r3, #255	; 0xff
    e2c4:	d105      	bne.n	e2d2 <send_nav_values+0x102e>
    e2c6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e2ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2ce:	2200      	movs	r2, #0
    e2d0:	701a      	strb	r2, [r3, #0]
    e2d2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e2d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2da:	781b      	ldrb	r3, [r3, #0]
    e2dc:	461a      	mov	r2, r3
    e2de:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e2e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2e6:	7819      	ldrb	r1, [r3, #0]
    e2e8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e2ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2f0:	5499      	strb	r1, [r3, r2]
    e2f2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e2f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2fa:	781b      	ldrb	r3, [r3, #0]
    e2fc:	3301      	adds	r3, #1
    e2fe:	b2da      	uxtb	r2, r3
    e300:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e304:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e308:	701a      	strb	r2, [r3, #0]
    e30a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e30e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e312:	781b      	ldrb	r3, [r3, #0]
    e314:	2bff      	cmp	r3, #255	; 0xff
    e316:	d10f      	bne.n	e338 <send_nav_values+0x1094>
    e318:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e31c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e320:	2200      	movs	r2, #0
    e322:	701a      	strb	r2, [r3, #0]
    e324:	e008      	b.n	e338 <send_nav_values+0x1094>
    e326:	bf00      	nop
    e328:	2000029f 	.word	0x2000029f
    e32c:	2000ae41 	.word	0x2000ae41
    e330:	2000ae42 	.word	0x2000ae42
    e334:	2000ae43 	.word	0x2000ae43
    e338:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e33c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e340:	781b      	ldrb	r3, [r3, #0]
    e342:	461a      	mov	r2, r3
    e344:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e348:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e34c:	7819      	ldrb	r1, [r3, #0]
    e34e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e352:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e356:	5499      	strb	r1, [r3, r2]
    e358:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e35c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e360:	781b      	ldrb	r3, [r3, #0]
    e362:	3301      	adds	r3, #1
    e364:	b2da      	uxtb	r2, r3
    e366:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e36a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e36e:	701a      	strb	r2, [r3, #0]
    e370:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e374:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e378:	781b      	ldrb	r3, [r3, #0]
    e37a:	2bff      	cmp	r3, #255	; 0xff
    e37c:	d105      	bne.n	e38a <send_nav_values+0x10e6>
    e37e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e382:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e386:	2200      	movs	r2, #0
    e388:	701a      	strb	r2, [r3, #0]
    e38a:	f242 0339 	movw	r3, #8249	; 0x2039
    e38e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e392:	781b      	ldrb	r3, [r3, #0]
    e394:	b2db      	uxtb	r3, r3
    e396:	f003 0310 	and.w	r3, r3, #16
    e39a:	2b00      	cmp	r3, #0
    e39c:	d15a      	bne.n	e454 <send_nav_values+0x11b0>
    e39e:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    e3a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3a6:	781b      	ldrb	r3, [r3, #0]
    e3a8:	b2db      	uxtb	r3, r3
    e3aa:	461a      	mov	r2, r3
    e3ac:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e3b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3b4:	5c9a      	ldrb	r2, [r3, r2]
    e3b6:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    e3ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3be:	701a      	strb	r2, [r3, #0]
    e3c0:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    e3c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3c8:	2200      	movs	r2, #0
    e3ca:	701a      	strb	r2, [r3, #0]
    e3cc:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    e3d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3d4:	781b      	ldrb	r3, [r3, #0]
    e3d6:	b2db      	uxtb	r3, r3
    e3d8:	3301      	adds	r3, #1
    e3da:	b2da      	uxtb	r2, r3
    e3dc:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    e3e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3e4:	701a      	strb	r2, [r3, #0]
    e3e6:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    e3ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3ee:	781b      	ldrb	r3, [r3, #0]
    e3f0:	b2db      	uxtb	r3, r3
    e3f2:	2bff      	cmp	r3, #255	; 0xff
    e3f4:	d105      	bne.n	e402 <send_nav_values+0x115e>
    e3f6:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    e3fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3fe:	2200      	movs	r2, #0
    e400:	701a      	strb	r2, [r3, #0]
    e402:	f242 0338 	movw	r3, #8248	; 0x2038
    e406:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e40a:	f242 0238 	movw	r2, #8248	; 0x2038
    e40e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e412:	7812      	ldrb	r2, [r2, #0]
    e414:	b2d2      	uxtb	r2, r2
    e416:	f042 0201 	orr.w	r2, r2, #1
    e41a:	b2d2      	uxtb	r2, r2
    e41c:	701a      	strb	r2, [r3, #0]
    e41e:	f242 0339 	movw	r3, #8249	; 0x2039
    e422:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e426:	f242 0239 	movw	r2, #8249	; 0x2039
    e42a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e42e:	7812      	ldrb	r2, [r2, #0]
    e430:	b2d2      	uxtb	r2, r2
    e432:	f042 0210 	orr.w	r2, r2, #16
    e436:	b2d2      	uxtb	r2, r2
    e438:	701a      	strb	r2, [r3, #0]
    e43a:	e00b      	b.n	e454 <send_nav_values+0x11b0>
    e43c:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    e440:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e444:	781b      	ldrb	r3, [r3, #0]
    e446:	3301      	adds	r3, #1
    e448:	b2da      	uxtb	r2, r3
    e44a:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    e44e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e452:	701a      	strb	r2, [r3, #0]
}
    e454:	46bd      	mov	sp, r7
    e456:	f85d 7b04 	ldr.w	r7, [sp], #4
    e45a:	4770      	bx	lr

0000e45c <course_run>:

void course_run(void){
    e45c:	b580      	push	{r7, lr}
    e45e:	af00      	add	r7, sp, #0
  
  if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    e460:	f64a 2394 	movw	r3, #43668	; 0xaa94
    e464:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e468:	781b      	ldrb	r3, [r3, #0]
    e46a:	2b02      	cmp	r3, #2
    e46c:	d006      	beq.n	e47c <course_run+0x20>
    e46e:	f64a 2394 	movw	r3, #43668	; 0xaa94
    e472:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e476:	781b      	ldrb	r3, [r3, #0]
    e478:	2b03      	cmp	r3, #3
    e47a:	d112      	bne.n	e4a2 <course_run+0x46>
  {
    if (lateral_mode >= LATERAL_MODE_COURSE)
    e47c:	f64a 2396 	movw	r3, #43670	; 0xaa96
    e480:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e484:	781b      	ldrb	r3, [r3, #0]
    e486:	2b02      	cmp	r3, #2
    e488:	d901      	bls.n	e48e <course_run+0x32>
      course_pid_run(); /* aka compute nav_desired_roll */
    e48a:	f003 faf1 	bl	11a70 <course_pid_run>
    desired_roll = nav_desired_roll;
    e48e:	f64a 6338 	movw	r3, #44600	; 0xae38
    e492:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e496:	681a      	ldr	r2, [r3, #0]
    e498:	f64a 53dc 	movw	r3, #44508	; 0xaddc
    e49c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4a0:	601a      	str	r2, [r3, #0]
  }  
  //vPrintString("S_17 Navigation task end!\n\r");
}
    e4a2:	bd80      	pop	{r7, pc}

0000e4a4 <altitude_control_task>:

void altitude_control_task(void)
{
    e4a4:	b580      	push	{r7, lr}
    e4a6:	af00      	add	r7, sp, #0
	//vPrintString("S_18 navigation_task start! \n\r"); //SunnyBeike
	if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) {
    e4a8:	f64a 2394 	movw	r3, #43668	; 0xaa94
    e4ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4b0:	781b      	ldrb	r3, [r3, #0]
    e4b2:	2b02      	cmp	r3, #2
    e4b4:	d006      	beq.n	e4c4 <altitude_control_task+0x20>
    e4b6:	f64a 2394 	movw	r3, #43668	; 0xaa94
    e4ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4be:	781b      	ldrb	r3, [r3, #0]
    e4c0:	2b03      	cmp	r3, #3
    e4c2:	d108      	bne.n	e4d6 <altitude_control_task+0x32>
		if (vertical_mode == VERTICAL_MODE_AUTO_ALT)
    e4c4:	f64a 2395 	movw	r3, #43669	; 0xaa95
    e4c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4cc:	781b      	ldrb	r3, [r3, #0]
    e4ce:	2b03      	cmp	r3, #3
    e4d0:	d101      	bne.n	e4d6 <altitude_control_task+0x32>
      			altitude_pid_run();
    e4d2:	f003 fd55 	bl	11f80 <altitude_pid_run>
	}
	//vPrintString("S_18 navigation_task end! \n\r"); //SunnyBeike
}
    e4d6:	bd80      	pop	{r7, pc}

0000e4d8 <climb_control_task>:
void climb_control_task(void)
{
    e4d8:	b580      	push	{r7, lr}
    e4da:	af00      	add	r7, sp, #0
	//vPrintString("S_19 navigation_task start! \n\r"); //SunnyBeike
   if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    e4dc:	f64a 2394 	movw	r3, #43668	; 0xaa94
    e4e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4e4:	781b      	ldrb	r3, [r3, #0]
    e4e6:	2b02      	cmp	r3, #2
    e4e8:	d006      	beq.n	e4f8 <climb_control_task+0x20>
    e4ea:	f64a 2394 	movw	r3, #43668	; 0xaa94
    e4ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4f2:	781b      	ldrb	r3, [r3, #0]
    e4f4:	2b03      	cmp	r3, #3
    e4f6:	d135      	bne.n	e564 <climb_control_task+0x8c>
   {
	if (vertical_mode >= VERTICAL_MODE_AUTO_CLIMB)
    e4f8:	f64a 2395 	movw	r3, #43669	; 0xaa95
    e4fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e500:	781b      	ldrb	r3, [r3, #0]
    e502:	2b01      	cmp	r3, #1
    e504:	d901      	bls.n	e50a <climb_control_task+0x32>
        	climb_pid_run();
    e506:	f003 fb6b 	bl	11be0 <climb_pid_run>
   	if (vertical_mode == VERTICAL_MODE_AUTO_GAZ)
    e50a:	f64a 2395 	movw	r3, #43669	; 0xaa95
    e50e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e512:	781b      	ldrb	r3, [r3, #0]
    e514:	2b01      	cmp	r3, #1
    e516:	d10a      	bne.n	e52e <climb_control_task+0x56>
   		 desired_gaz = nav_desired_gaz;
    e518:	f64a 6330 	movw	r3, #44592	; 0xae30
    e51c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e520:	881b      	ldrh	r3, [r3, #0]
    e522:	b29a      	uxth	r2, r3
    e524:	f64a 53e4 	movw	r3, #44516	; 0xade4
    e528:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e52c:	801a      	strh	r2, [r3, #0]
   	if (low_battery || (!estimator_flight_time && !launch))
    e52e:	f64a 239d 	movw	r3, #43677	; 0xaa9d
    e532:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e536:	781b      	ldrb	r3, [r3, #0]
    e538:	2b00      	cmp	r3, #0
    e53a:	d10d      	bne.n	e558 <climb_control_task+0x80>
    e53c:	f24b 0394 	movw	r3, #45204	; 0xb094
    e540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e544:	881b      	ldrh	r3, [r3, #0]
    e546:	2b00      	cmp	r3, #0
    e548:	d10c      	bne.n	e564 <climb_control_task+0x8c>
    e54a:	f64a 23a8 	movw	r3, #43688	; 0xaaa8
    e54e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e552:	781b      	ldrb	r3, [r3, #0]
    e554:	2b00      	cmp	r3, #0
    e556:	d105      	bne.n	e564 <climb_control_task+0x8c>
   		 desired_gaz = 0.;
    e558:	f64a 53e4 	movw	r3, #44516	; 0xade4
    e55c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e560:	2200      	movs	r2, #0
    e562:	801a      	strh	r2, [r3, #0]
  }  
	//vPrintString("S_19 navigation_task end! \n\r"); //SunnyBeike
}
    e564:	bd80      	pop	{r7, pc}
    e566:	bf00      	nop

0000e568 <stabilisation_task>:
//#endif
}
*/

void stabilisation_task(void)
{
    e568:	b580      	push	{r7, lr}
    e56a:	af00      	add	r7, sp, #0
	//vPrintString("S_6 stabilisation_task start! \n\r"); //SunnyBeike
    ir_update();
    e56c:	f003 f926 	bl	117bc <ir_update>
    estimator_update_state_infrared();
    e570:	f006 fbac 	bl	14ccc <estimator_update_state_infrared>
    roll_pitch_pid_run(); // Set  desired_aileron & desired_elevator
    e574:	f003 f990 	bl	11898 <roll_pitch_pid_run>
    to_fbw.channels[RADIO_THROTTLE] = desired_gaz; // desired_gaz is set upon GPS message reception
    e578:	f64a 53e4 	movw	r3, #44516	; 0xade4
    e57c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e580:	881a      	ldrh	r2, [r3, #0]
    e582:	f64a 33d0 	movw	r3, #43984	; 0xabd0
    e586:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e58a:	801a      	strh	r2, [r3, #0]
    to_fbw.channels[RADIO_ROLL] = desired_aileron;
    e58c:	f64a 53e6 	movw	r3, #44518	; 0xade6
    e590:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e594:	881a      	ldrh	r2, [r3, #0]
    e596:	f64a 33d0 	movw	r3, #43984	; 0xabd0
    e59a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e59e:	805a      	strh	r2, [r3, #2]
#ifndef ANTON_T7
    to_fbw.channels[RADIO_PITCH] = desired_elevator;
    e5a0:	f64a 53e8 	movw	r3, #44520	; 0xade8
    e5a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5a8:	881a      	ldrh	r2, [r3, #0]
    e5aa:	f64a 33d0 	movw	r3, #43984	; 0xabd0
    e5ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5b2:	809a      	strh	r2, [r3, #4]
#endif
    
    // Code for camera stabilization, FIXME put that elsewhere
    to_fbw.channels[RADIO_GAIN1] = TRIM_PPRZ(MAX_PPRZ/0.75*(-estimator_phi));
    e5b4:	f24b 0370 	movw	r3, #45168	; 0xb070
    e5b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5bc:	681b      	ldr	r3, [r3, #0]
    e5be:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    e5c2:	4618      	mov	r0, r3
    e5c4:	f009 f9f4 	bl	179b0 <__aeabi_f2d>
    e5c8:	4602      	mov	r2, r0
    e5ca:	460b      	mov	r3, r1
    e5cc:	4610      	mov	r0, r2
    e5ce:	4619      	mov	r1, r3
    e5d0:	f04f 0200 	mov.w	r2, #0
    e5d4:	f04f 0300 	mov.w	r3, #0
    e5d8:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    e5dc:	f009 fa3c 	bl	17a58 <__aeabi_dmul>
    e5e0:	4602      	mov	r2, r0
    e5e2:	460b      	mov	r3, r1
    e5e4:	4610      	mov	r0, r2
    e5e6:	4619      	mov	r1, r3
    e5e8:	f04f 0200 	mov.w	r2, #0
    e5ec:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    e5f0:	f2cc 03c2 	movt	r3, #49346	; 0xc0c2
    e5f4:	f009 fca2 	bl	17f3c <__aeabi_dcmplt>
    e5f8:	4603      	mov	r3, r0
    e5fa:	2b00      	cmp	r3, #0
    e5fc:	d002      	beq.n	e604 <stabilisation_task+0x9c>
    e5fe:	f64d 2280 	movw	r2, #55936	; 0xda80
    e602:	e046      	b.n	e692 <stabilisation_task+0x12a>
    e604:	f24b 0370 	movw	r3, #45168	; 0xb070
    e608:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e60c:	681b      	ldr	r3, [r3, #0]
    e60e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    e612:	4618      	mov	r0, r3
    e614:	f009 f9cc 	bl	179b0 <__aeabi_f2d>
    e618:	4602      	mov	r2, r0
    e61a:	460b      	mov	r3, r1
    e61c:	4610      	mov	r0, r2
    e61e:	4619      	mov	r1, r3
    e620:	f04f 0200 	mov.w	r2, #0
    e624:	f04f 0300 	mov.w	r3, #0
    e628:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    e62c:	f009 fa14 	bl	17a58 <__aeabi_dmul>
    e630:	4602      	mov	r2, r0
    e632:	460b      	mov	r3, r1
    e634:	4610      	mov	r0, r2
    e636:	4619      	mov	r1, r3
    e638:	f04f 0200 	mov.w	r2, #0
    e63c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    e640:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
    e644:	f009 fc98 	bl	17f78 <__aeabi_dcmpgt>
    e648:	4603      	mov	r3, r0
    e64a:	2b00      	cmp	r3, #0
    e64c:	d002      	beq.n	e654 <stabilisation_task+0xec>
    e64e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    e652:	e01d      	b.n	e690 <stabilisation_task+0x128>
    e654:	f24b 0370 	movw	r3, #45168	; 0xb070
    e658:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e65c:	681b      	ldr	r3, [r3, #0]
    e65e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    e662:	4618      	mov	r0, r3
    e664:	f009 f9a4 	bl	179b0 <__aeabi_f2d>
    e668:	4602      	mov	r2, r0
    e66a:	460b      	mov	r3, r1
    e66c:	4610      	mov	r0, r2
    e66e:	4619      	mov	r1, r3
    e670:	f04f 0200 	mov.w	r2, #0
    e674:	f04f 0300 	mov.w	r3, #0
    e678:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    e67c:	f009 f9ec 	bl	17a58 <__aeabi_dmul>
    e680:	4602      	mov	r2, r0
    e682:	460b      	mov	r3, r1
    e684:	4610      	mov	r0, r2
    e686:	4619      	mov	r1, r3
    e688:	f009 fc80 	bl	17f8c <__aeabi_d2iz>
    e68c:	4603      	mov	r3, r0
    e68e:	b29b      	uxth	r3, r3
    e690:	b29a      	uxth	r2, r3
    e692:	f64a 33d0 	movw	r3, #43984	; 0xabd0
    e696:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e69a:	815a      	strh	r2, [r3, #10]
	//vPrintString("S_6 stabilisation_task end! \n\r"); //SunnyBeike
}
    e69c:	bd80      	pop	{r7, pc}
    e69e:	bf00      	nop

0000e6a0 <send_gps_pos>:
 * If \a estimator_flight_time is null and \a estimator_hspeed_mod is greater
 * than \a MIN_SPEED_FOR_TAKEOFF, set the \a estimator_flight_time to 1 and \a
 * launch to true (which is not set in non auto launch. Then call
 * \a DOWNLINK_SEND_TAKEOFF
 */
void send_gps_pos( void ) {
    e6a0:	b580      	push	{r7, lr}
    e6a2:	af00      	add	r7, sp, #0
  gps_msg_received = FALSE;
    e6a4:	f64a 4345 	movw	r3, #44101	; 0xac45
    e6a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6ac:	2200      	movs	r2, #0
    e6ae:	701a      	strb	r2, [r3, #0]
  if (gps_pos_available){
    e6b0:	f64a 4346 	movw	r3, #44102	; 0xac46
    e6b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6b8:	781b      	ldrb	r3, [r3, #0]
    e6ba:	2b00      	cmp	r3, #0
    e6bc:	f001 81af 	beq.w	fa1e <send_gps_pos+0x137e>
     DOWNLINK_SEND_GPS(&gps_mode, &gps_utm_east, &gps_utm_north, &gps_fcourse, &gps_falt, &gps_fspeed,&gps_fclimb, &gps_ftow);
    e6c0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e6c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6c8:	781a      	ldrb	r2, [r3, #0]
    e6ca:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    e6ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6d2:	781b      	ldrb	r3, [r3, #0]
    e6d4:	b2db      	uxtb	r3, r3
    e6d6:	429a      	cmp	r2, r3
    e6d8:	d313      	bcc.n	e702 <send_gps_pos+0x62>
    e6da:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    e6de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6e2:	781b      	ldrb	r3, [r3, #0]
    e6e4:	b2db      	uxtb	r3, r3
    e6e6:	461a      	mov	r2, r3
    e6e8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e6ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6f0:	781b      	ldrb	r3, [r3, #0]
    e6f2:	1ad3      	subs	r3, r2, r3
    e6f4:	33ff      	adds	r3, #255	; 0xff
    e6f6:	2b21      	cmp	r3, #33	; 0x21
    e6f8:	bfd4      	ite	le
    e6fa:	2300      	movle	r3, #0
    e6fc:	2301      	movgt	r3, #1
    e6fe:	b2db      	uxtb	r3, r3
    e700:	e011      	b.n	e726 <send_gps_pos+0x86>
    e702:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    e706:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e70a:	781b      	ldrb	r3, [r3, #0]
    e70c:	b2db      	uxtb	r3, r3
    e70e:	461a      	mov	r2, r3
    e710:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e714:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e718:	781b      	ldrb	r3, [r3, #0]
    e71a:	1ad3      	subs	r3, r2, r3
    e71c:	2b21      	cmp	r3, #33	; 0x21
    e71e:	bfd4      	ite	le
    e720:	2300      	movle	r3, #0
    e722:	2301      	movgt	r3, #1
    e724:	b2db      	uxtb	r3, r3
    e726:	2b00      	cmp	r3, #0
    e728:	f001 816b 	beq.w	fa02 <send_gps_pos+0x1362>
    e72c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e730:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e734:	781b      	ldrb	r3, [r3, #0]
    e736:	461a      	mov	r2, r3
    e738:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e73c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e740:	2105      	movs	r1, #5
    e742:	5499      	strb	r1, [r3, r2]
    e744:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e748:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e74c:	781b      	ldrb	r3, [r3, #0]
    e74e:	3301      	adds	r3, #1
    e750:	b2da      	uxtb	r2, r3
    e752:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e756:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e75a:	701a      	strb	r2, [r3, #0]
    e75c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e760:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e764:	781b      	ldrb	r3, [r3, #0]
    e766:	2bff      	cmp	r3, #255	; 0xff
    e768:	d105      	bne.n	e776 <send_gps_pos+0xd6>
    e76a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e76e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e772:	2200      	movs	r2, #0
    e774:	701a      	strb	r2, [r3, #0]
    e776:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e77a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e77e:	781b      	ldrb	r3, [r3, #0]
    e780:	461a      	mov	r2, r3
    e782:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e786:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e78a:	2108      	movs	r1, #8
    e78c:	5499      	strb	r1, [r3, r2]
    e78e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e792:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e796:	781b      	ldrb	r3, [r3, #0]
    e798:	3301      	adds	r3, #1
    e79a:	b2da      	uxtb	r2, r3
    e79c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e7a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7a4:	701a      	strb	r2, [r3, #0]
    e7a6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e7aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7ae:	781b      	ldrb	r3, [r3, #0]
    e7b0:	2bff      	cmp	r3, #255	; 0xff
    e7b2:	d105      	bne.n	e7c0 <send_gps_pos+0x120>
    e7b4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e7b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7bc:	2200      	movs	r2, #0
    e7be:	701a      	strb	r2, [r3, #0]
    e7c0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e7c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7c8:	2208      	movs	r2, #8
    e7ca:	701a      	strb	r2, [r3, #0]
    e7cc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e7d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7d4:	2208      	movs	r2, #8
    e7d6:	701a      	strb	r2, [r3, #0]
    e7d8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e7dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7e0:	781b      	ldrb	r3, [r3, #0]
    e7e2:	461a      	mov	r2, r3
    e7e4:	f64a 4344 	movw	r3, #44100	; 0xac44
    e7e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7ec:	7819      	ldrb	r1, [r3, #0]
    e7ee:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e7f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7f6:	5499      	strb	r1, [r3, r2]
    e7f8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e7fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e800:	781a      	ldrb	r2, [r3, #0]
    e802:	f64a 4344 	movw	r3, #44100	; 0xac44
    e806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e80a:	781b      	ldrb	r3, [r3, #0]
    e80c:	4413      	add	r3, r2
    e80e:	b2da      	uxtb	r2, r3
    e810:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e814:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e818:	701a      	strb	r2, [r3, #0]
    e81a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e81e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e822:	781a      	ldrb	r2, [r3, #0]
    e824:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e828:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e82c:	781b      	ldrb	r3, [r3, #0]
    e82e:	4413      	add	r3, r2
    e830:	b2da      	uxtb	r2, r3
    e832:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e836:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e83a:	701a      	strb	r2, [r3, #0]
    e83c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e840:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e844:	781b      	ldrb	r3, [r3, #0]
    e846:	3301      	adds	r3, #1
    e848:	b2da      	uxtb	r2, r3
    e84a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e84e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e852:	701a      	strb	r2, [r3, #0]
    e854:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e858:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e85c:	781b      	ldrb	r3, [r3, #0]
    e85e:	2bff      	cmp	r3, #255	; 0xff
    e860:	d105      	bne.n	e86e <send_gps_pos+0x1ce>
    e862:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e866:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e86a:	2200      	movs	r2, #0
    e86c:	701a      	strb	r2, [r3, #0]
    e86e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e872:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e876:	781b      	ldrb	r3, [r3, #0]
    e878:	461a      	mov	r2, r3
    e87a:	f64a 4334 	movw	r3, #44084	; 0xac34
    e87e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e882:	7819      	ldrb	r1, [r3, #0]
    e884:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e888:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e88c:	5499      	strb	r1, [r3, r2]
    e88e:	f64a 4334 	movw	r3, #44084	; 0xac34
    e892:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e896:	781a      	ldrb	r2, [r3, #0]
    e898:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e89c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8a0:	781b      	ldrb	r3, [r3, #0]
    e8a2:	4413      	add	r3, r2
    e8a4:	b2da      	uxtb	r2, r3
    e8a6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e8aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8ae:	701a      	strb	r2, [r3, #0]
    e8b0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e8b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8b8:	781a      	ldrb	r2, [r3, #0]
    e8ba:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e8be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8c2:	781b      	ldrb	r3, [r3, #0]
    e8c4:	4413      	add	r3, r2
    e8c6:	b2da      	uxtb	r2, r3
    e8c8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e8cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8d0:	701a      	strb	r2, [r3, #0]
    e8d2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e8d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8da:	781b      	ldrb	r3, [r3, #0]
    e8dc:	3301      	adds	r3, #1
    e8de:	b2da      	uxtb	r2, r3
    e8e0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e8e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8e8:	701a      	strb	r2, [r3, #0]
    e8ea:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e8ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8f2:	781b      	ldrb	r3, [r3, #0]
    e8f4:	2bff      	cmp	r3, #255	; 0xff
    e8f6:	d105      	bne.n	e904 <send_gps_pos+0x264>
    e8f8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e8fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e900:	2200      	movs	r2, #0
    e902:	701a      	strb	r2, [r3, #0]
    e904:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e908:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e90c:	781b      	ldrb	r3, [r3, #0]
    e90e:	461a      	mov	r2, r3
    e910:	f64a 4334 	movw	r3, #44084	; 0xac34
    e914:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e918:	7859      	ldrb	r1, [r3, #1]
    e91a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e91e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e922:	5499      	strb	r1, [r3, r2]
    e924:	4bd1      	ldr	r3, [pc, #836]	; (ec6c <send_gps_pos+0x5cc>)
    e926:	781a      	ldrb	r2, [r3, #0]
    e928:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e92c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e930:	781b      	ldrb	r3, [r3, #0]
    e932:	4413      	add	r3, r2
    e934:	b2da      	uxtb	r2, r3
    e936:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e93a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e93e:	701a      	strb	r2, [r3, #0]
    e940:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e944:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e948:	781a      	ldrb	r2, [r3, #0]
    e94a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e94e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e952:	781b      	ldrb	r3, [r3, #0]
    e954:	4413      	add	r3, r2
    e956:	b2da      	uxtb	r2, r3
    e958:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e95c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e960:	701a      	strb	r2, [r3, #0]
    e962:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e966:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e96a:	781b      	ldrb	r3, [r3, #0]
    e96c:	3301      	adds	r3, #1
    e96e:	b2da      	uxtb	r2, r3
    e970:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e974:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e978:	701a      	strb	r2, [r3, #0]
    e97a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e97e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e982:	781b      	ldrb	r3, [r3, #0]
    e984:	2bff      	cmp	r3, #255	; 0xff
    e986:	d105      	bne.n	e994 <send_gps_pos+0x2f4>
    e988:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e98c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e990:	2200      	movs	r2, #0
    e992:	701a      	strb	r2, [r3, #0]
    e994:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e998:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e99c:	781b      	ldrb	r3, [r3, #0]
    e99e:	461a      	mov	r2, r3
    e9a0:	f64a 4334 	movw	r3, #44084	; 0xac34
    e9a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9a8:	7899      	ldrb	r1, [r3, #2]
    e9aa:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    e9ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9b2:	5499      	strb	r1, [r3, r2]
    e9b4:	4bae      	ldr	r3, [pc, #696]	; (ec70 <send_gps_pos+0x5d0>)
    e9b6:	781a      	ldrb	r2, [r3, #0]
    e9b8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e9bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9c0:	781b      	ldrb	r3, [r3, #0]
    e9c2:	4413      	add	r3, r2
    e9c4:	b2da      	uxtb	r2, r3
    e9c6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e9ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9ce:	701a      	strb	r2, [r3, #0]
    e9d0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e9d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9d8:	781a      	ldrb	r2, [r3, #0]
    e9da:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    e9de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9e2:	781b      	ldrb	r3, [r3, #0]
    e9e4:	4413      	add	r3, r2
    e9e6:	b2da      	uxtb	r2, r3
    e9e8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e9ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9f0:	701a      	strb	r2, [r3, #0]
    e9f2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    e9f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9fa:	781b      	ldrb	r3, [r3, #0]
    e9fc:	3301      	adds	r3, #1
    e9fe:	b2da      	uxtb	r2, r3
    ea00:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ea04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea08:	701a      	strb	r2, [r3, #0]
    ea0a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ea0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea12:	781b      	ldrb	r3, [r3, #0]
    ea14:	2bff      	cmp	r3, #255	; 0xff
    ea16:	d105      	bne.n	ea24 <send_gps_pos+0x384>
    ea18:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ea1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea20:	2200      	movs	r2, #0
    ea22:	701a      	strb	r2, [r3, #0]
    ea24:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ea28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea2c:	781b      	ldrb	r3, [r3, #0]
    ea2e:	461a      	mov	r2, r3
    ea30:	f64a 4334 	movw	r3, #44084	; 0xac34
    ea34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea38:	78d9      	ldrb	r1, [r3, #3]
    ea3a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ea3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea42:	5499      	strb	r1, [r3, r2]
    ea44:	4b8b      	ldr	r3, [pc, #556]	; (ec74 <send_gps_pos+0x5d4>)
    ea46:	781a      	ldrb	r2, [r3, #0]
    ea48:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ea4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea50:	781b      	ldrb	r3, [r3, #0]
    ea52:	4413      	add	r3, r2
    ea54:	b2da      	uxtb	r2, r3
    ea56:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ea5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea5e:	701a      	strb	r2, [r3, #0]
    ea60:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ea64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea68:	781a      	ldrb	r2, [r3, #0]
    ea6a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ea6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea72:	781b      	ldrb	r3, [r3, #0]
    ea74:	4413      	add	r3, r2
    ea76:	b2da      	uxtb	r2, r3
    ea78:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ea7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea80:	701a      	strb	r2, [r3, #0]
    ea82:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ea86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea8a:	781b      	ldrb	r3, [r3, #0]
    ea8c:	3301      	adds	r3, #1
    ea8e:	b2da      	uxtb	r2, r3
    ea90:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ea94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea98:	701a      	strb	r2, [r3, #0]
    ea9a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ea9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eaa2:	781b      	ldrb	r3, [r3, #0]
    eaa4:	2bff      	cmp	r3, #255	; 0xff
    eaa6:	d105      	bne.n	eab4 <send_gps_pos+0x414>
    eaa8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eaac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eab0:	2200      	movs	r2, #0
    eab2:	701a      	strb	r2, [r3, #0]
    eab4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eabc:	781b      	ldrb	r3, [r3, #0]
    eabe:	461a      	mov	r2, r3
    eac0:	f64a 4338 	movw	r3, #44088	; 0xac38
    eac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eac8:	7819      	ldrb	r1, [r3, #0]
    eaca:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    eace:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ead2:	5499      	strb	r1, [r3, r2]
    ead4:	f64a 4338 	movw	r3, #44088	; 0xac38
    ead8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eadc:	781a      	ldrb	r2, [r3, #0]
    eade:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    eae2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eae6:	781b      	ldrb	r3, [r3, #0]
    eae8:	4413      	add	r3, r2
    eaea:	b2da      	uxtb	r2, r3
    eaec:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    eaf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eaf4:	701a      	strb	r2, [r3, #0]
    eaf6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    eafa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eafe:	781a      	ldrb	r2, [r3, #0]
    eb00:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    eb04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb08:	781b      	ldrb	r3, [r3, #0]
    eb0a:	4413      	add	r3, r2
    eb0c:	b2da      	uxtb	r2, r3
    eb0e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    eb12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb16:	701a      	strb	r2, [r3, #0]
    eb18:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eb1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb20:	781b      	ldrb	r3, [r3, #0]
    eb22:	3301      	adds	r3, #1
    eb24:	b2da      	uxtb	r2, r3
    eb26:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eb2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb2e:	701a      	strb	r2, [r3, #0]
    eb30:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eb34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb38:	781b      	ldrb	r3, [r3, #0]
    eb3a:	2bff      	cmp	r3, #255	; 0xff
    eb3c:	d105      	bne.n	eb4a <send_gps_pos+0x4aa>
    eb3e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eb42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb46:	2200      	movs	r2, #0
    eb48:	701a      	strb	r2, [r3, #0]
    eb4a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eb4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb52:	781b      	ldrb	r3, [r3, #0]
    eb54:	461a      	mov	r2, r3
    eb56:	f64a 4338 	movw	r3, #44088	; 0xac38
    eb5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb5e:	7859      	ldrb	r1, [r3, #1]
    eb60:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    eb64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb68:	5499      	strb	r1, [r3, r2]
    eb6a:	4b43      	ldr	r3, [pc, #268]	; (ec78 <send_gps_pos+0x5d8>)
    eb6c:	781a      	ldrb	r2, [r3, #0]
    eb6e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    eb72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb76:	781b      	ldrb	r3, [r3, #0]
    eb78:	4413      	add	r3, r2
    eb7a:	b2da      	uxtb	r2, r3
    eb7c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    eb80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb84:	701a      	strb	r2, [r3, #0]
    eb86:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    eb8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb8e:	781a      	ldrb	r2, [r3, #0]
    eb90:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    eb94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb98:	781b      	ldrb	r3, [r3, #0]
    eb9a:	4413      	add	r3, r2
    eb9c:	b2da      	uxtb	r2, r3
    eb9e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    eba2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eba6:	701a      	strb	r2, [r3, #0]
    eba8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ebac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebb0:	781b      	ldrb	r3, [r3, #0]
    ebb2:	3301      	adds	r3, #1
    ebb4:	b2da      	uxtb	r2, r3
    ebb6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ebba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebbe:	701a      	strb	r2, [r3, #0]
    ebc0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ebc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebc8:	781b      	ldrb	r3, [r3, #0]
    ebca:	2bff      	cmp	r3, #255	; 0xff
    ebcc:	d105      	bne.n	ebda <send_gps_pos+0x53a>
    ebce:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ebd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebd6:	2200      	movs	r2, #0
    ebd8:	701a      	strb	r2, [r3, #0]
    ebda:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ebde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebe2:	781b      	ldrb	r3, [r3, #0]
    ebe4:	461a      	mov	r2, r3
    ebe6:	f64a 4338 	movw	r3, #44088	; 0xac38
    ebea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebee:	7899      	ldrb	r1, [r3, #2]
    ebf0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ebf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebf8:	5499      	strb	r1, [r3, r2]
    ebfa:	4b20      	ldr	r3, [pc, #128]	; (ec7c <send_gps_pos+0x5dc>)
    ebfc:	781a      	ldrb	r2, [r3, #0]
    ebfe:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ec02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec06:	781b      	ldrb	r3, [r3, #0]
    ec08:	4413      	add	r3, r2
    ec0a:	b2da      	uxtb	r2, r3
    ec0c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ec10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec14:	701a      	strb	r2, [r3, #0]
    ec16:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ec1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec1e:	781a      	ldrb	r2, [r3, #0]
    ec20:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ec24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec28:	781b      	ldrb	r3, [r3, #0]
    ec2a:	4413      	add	r3, r2
    ec2c:	b2da      	uxtb	r2, r3
    ec2e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ec32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec36:	701a      	strb	r2, [r3, #0]
    ec38:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ec3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec40:	781b      	ldrb	r3, [r3, #0]
    ec42:	3301      	adds	r3, #1
    ec44:	b2da      	uxtb	r2, r3
    ec46:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ec4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec4e:	701a      	strb	r2, [r3, #0]
    ec50:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ec54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec58:	781b      	ldrb	r3, [r3, #0]
    ec5a:	2bff      	cmp	r3, #255	; 0xff
    ec5c:	d110      	bne.n	ec80 <send_gps_pos+0x5e0>
    ec5e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ec62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec66:	2200      	movs	r2, #0
    ec68:	701a      	strb	r2, [r3, #0]
    ec6a:	e009      	b.n	ec80 <send_gps_pos+0x5e0>
    ec6c:	2000ac35 	.word	0x2000ac35
    ec70:	2000ac36 	.word	0x2000ac36
    ec74:	2000ac37 	.word	0x2000ac37
    ec78:	2000ac39 	.word	0x2000ac39
    ec7c:	2000ac3a 	.word	0x2000ac3a
    ec80:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ec84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec88:	781b      	ldrb	r3, [r3, #0]
    ec8a:	461a      	mov	r2, r3
    ec8c:	f64a 4338 	movw	r3, #44088	; 0xac38
    ec90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec94:	78d9      	ldrb	r1, [r3, #3]
    ec96:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ec9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec9e:	5499      	strb	r1, [r3, r2]
    eca0:	4bd3      	ldr	r3, [pc, #844]	; (eff0 <send_gps_pos+0x950>)
    eca2:	781a      	ldrb	r2, [r3, #0]
    eca4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    eca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecac:	781b      	ldrb	r3, [r3, #0]
    ecae:	4413      	add	r3, r2
    ecb0:	b2da      	uxtb	r2, r3
    ecb2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ecb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecba:	701a      	strb	r2, [r3, #0]
    ecbc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ecc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecc4:	781a      	ldrb	r2, [r3, #0]
    ecc6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ecca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecce:	781b      	ldrb	r3, [r3, #0]
    ecd0:	4413      	add	r3, r2
    ecd2:	b2da      	uxtb	r2, r3
    ecd4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ecd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecdc:	701a      	strb	r2, [r3, #0]
    ecde:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ece2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ece6:	781b      	ldrb	r3, [r3, #0]
    ece8:	3301      	adds	r3, #1
    ecea:	b2da      	uxtb	r2, r3
    ecec:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ecf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecf4:	701a      	strb	r2, [r3, #0]
    ecf6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ecfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecfe:	781b      	ldrb	r3, [r3, #0]
    ed00:	2bff      	cmp	r3, #255	; 0xff
    ed02:	d105      	bne.n	ed10 <send_gps_pos+0x670>
    ed04:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ed08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed0c:	2200      	movs	r2, #0
    ed0e:	701a      	strb	r2, [r3, #0]
    ed10:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ed14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed18:	781b      	ldrb	r3, [r3, #0]
    ed1a:	461a      	mov	r2, r3
    ed1c:	f64a 4330 	movw	r3, #44080	; 0xac30
    ed20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed24:	7819      	ldrb	r1, [r3, #0]
    ed26:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ed2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed2e:	5499      	strb	r1, [r3, r2]
    ed30:	f64a 4330 	movw	r3, #44080	; 0xac30
    ed34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed38:	781a      	ldrb	r2, [r3, #0]
    ed3a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ed3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed42:	781b      	ldrb	r3, [r3, #0]
    ed44:	4413      	add	r3, r2
    ed46:	b2da      	uxtb	r2, r3
    ed48:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ed4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed50:	701a      	strb	r2, [r3, #0]
    ed52:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ed56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed5a:	781a      	ldrb	r2, [r3, #0]
    ed5c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ed60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed64:	781b      	ldrb	r3, [r3, #0]
    ed66:	4413      	add	r3, r2
    ed68:	b2da      	uxtb	r2, r3
    ed6a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ed6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed72:	701a      	strb	r2, [r3, #0]
    ed74:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ed78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed7c:	781b      	ldrb	r3, [r3, #0]
    ed7e:	3301      	adds	r3, #1
    ed80:	b2da      	uxtb	r2, r3
    ed82:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ed86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed8a:	701a      	strb	r2, [r3, #0]
    ed8c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ed90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed94:	781b      	ldrb	r3, [r3, #0]
    ed96:	2bff      	cmp	r3, #255	; 0xff
    ed98:	d105      	bne.n	eda6 <send_gps_pos+0x706>
    ed9a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ed9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eda2:	2200      	movs	r2, #0
    eda4:	701a      	strb	r2, [r3, #0]
    eda6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    edaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edae:	781b      	ldrb	r3, [r3, #0]
    edb0:	461a      	mov	r2, r3
    edb2:	f64a 4330 	movw	r3, #44080	; 0xac30
    edb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edba:	7859      	ldrb	r1, [r3, #1]
    edbc:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    edc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edc4:	5499      	strb	r1, [r3, r2]
    edc6:	4b8b      	ldr	r3, [pc, #556]	; (eff4 <send_gps_pos+0x954>)
    edc8:	781a      	ldrb	r2, [r3, #0]
    edca:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    edce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edd2:	781b      	ldrb	r3, [r3, #0]
    edd4:	4413      	add	r3, r2
    edd6:	b2da      	uxtb	r2, r3
    edd8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    eddc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ede0:	701a      	strb	r2, [r3, #0]
    ede2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ede6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edea:	781a      	ldrb	r2, [r3, #0]
    edec:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    edf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edf4:	781b      	ldrb	r3, [r3, #0]
    edf6:	4413      	add	r3, r2
    edf8:	b2da      	uxtb	r2, r3
    edfa:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    edfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee02:	701a      	strb	r2, [r3, #0]
    ee04:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ee08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee0c:	781b      	ldrb	r3, [r3, #0]
    ee0e:	3301      	adds	r3, #1
    ee10:	b2da      	uxtb	r2, r3
    ee12:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ee16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee1a:	701a      	strb	r2, [r3, #0]
    ee1c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ee20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee24:	781b      	ldrb	r3, [r3, #0]
    ee26:	2bff      	cmp	r3, #255	; 0xff
    ee28:	d105      	bne.n	ee36 <send_gps_pos+0x796>
    ee2a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ee2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee32:	2200      	movs	r2, #0
    ee34:	701a      	strb	r2, [r3, #0]
    ee36:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ee3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee3e:	781b      	ldrb	r3, [r3, #0]
    ee40:	461a      	mov	r2, r3
    ee42:	f64a 4330 	movw	r3, #44080	; 0xac30
    ee46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee4a:	7899      	ldrb	r1, [r3, #2]
    ee4c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ee50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee54:	5499      	strb	r1, [r3, r2]
    ee56:	4b68      	ldr	r3, [pc, #416]	; (eff8 <send_gps_pos+0x958>)
    ee58:	781a      	ldrb	r2, [r3, #0]
    ee5a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ee5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee62:	781b      	ldrb	r3, [r3, #0]
    ee64:	4413      	add	r3, r2
    ee66:	b2da      	uxtb	r2, r3
    ee68:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ee6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee70:	701a      	strb	r2, [r3, #0]
    ee72:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ee76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee7a:	781a      	ldrb	r2, [r3, #0]
    ee7c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ee80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee84:	781b      	ldrb	r3, [r3, #0]
    ee86:	4413      	add	r3, r2
    ee88:	b2da      	uxtb	r2, r3
    ee8a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ee8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee92:	701a      	strb	r2, [r3, #0]
    ee94:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ee98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee9c:	781b      	ldrb	r3, [r3, #0]
    ee9e:	3301      	adds	r3, #1
    eea0:	b2da      	uxtb	r2, r3
    eea2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eeaa:	701a      	strb	r2, [r3, #0]
    eeac:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eeb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eeb4:	781b      	ldrb	r3, [r3, #0]
    eeb6:	2bff      	cmp	r3, #255	; 0xff
    eeb8:	d105      	bne.n	eec6 <send_gps_pos+0x826>
    eeba:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eec2:	2200      	movs	r2, #0
    eec4:	701a      	strb	r2, [r3, #0]
    eec6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    eeca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eece:	781b      	ldrb	r3, [r3, #0]
    eed0:	461a      	mov	r2, r3
    eed2:	f64a 4330 	movw	r3, #44080	; 0xac30
    eed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eeda:	78d9      	ldrb	r1, [r3, #3]
    eedc:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    eee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eee4:	5499      	strb	r1, [r3, r2]
    eee6:	4b45      	ldr	r3, [pc, #276]	; (effc <send_gps_pos+0x95c>)
    eee8:	781a      	ldrb	r2, [r3, #0]
    eeea:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    eeee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eef2:	781b      	ldrb	r3, [r3, #0]
    eef4:	4413      	add	r3, r2
    eef6:	b2da      	uxtb	r2, r3
    eef8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    eefc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef00:	701a      	strb	r2, [r3, #0]
    ef02:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ef06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef0a:	781a      	ldrb	r2, [r3, #0]
    ef0c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ef10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef14:	781b      	ldrb	r3, [r3, #0]
    ef16:	4413      	add	r3, r2
    ef18:	b2da      	uxtb	r2, r3
    ef1a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ef1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef22:	701a      	strb	r2, [r3, #0]
    ef24:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ef28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef2c:	781b      	ldrb	r3, [r3, #0]
    ef2e:	3301      	adds	r3, #1
    ef30:	b2da      	uxtb	r2, r3
    ef32:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ef36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef3a:	701a      	strb	r2, [r3, #0]
    ef3c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ef40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef44:	781b      	ldrb	r3, [r3, #0]
    ef46:	2bff      	cmp	r3, #255	; 0xff
    ef48:	d105      	bne.n	ef56 <send_gps_pos+0x8b6>
    ef4a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ef4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef52:	2200      	movs	r2, #0
    ef54:	701a      	strb	r2, [r3, #0]
    ef56:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ef5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef5e:	781b      	ldrb	r3, [r3, #0]
    ef60:	461a      	mov	r2, r3
    ef62:	f64a 4324 	movw	r3, #44068	; 0xac24
    ef66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef6a:	7819      	ldrb	r1, [r3, #0]
    ef6c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ef70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef74:	5499      	strb	r1, [r3, r2]
    ef76:	f64a 4324 	movw	r3, #44068	; 0xac24
    ef7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef7e:	781a      	ldrb	r2, [r3, #0]
    ef80:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ef84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef88:	781b      	ldrb	r3, [r3, #0]
    ef8a:	4413      	add	r3, r2
    ef8c:	b2da      	uxtb	r2, r3
    ef8e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ef92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef96:	701a      	strb	r2, [r3, #0]
    ef98:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ef9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efa0:	781a      	ldrb	r2, [r3, #0]
    efa2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    efa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efaa:	781b      	ldrb	r3, [r3, #0]
    efac:	4413      	add	r3, r2
    efae:	b2da      	uxtb	r2, r3
    efb0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    efb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efb8:	701a      	strb	r2, [r3, #0]
    efba:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    efbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efc2:	781b      	ldrb	r3, [r3, #0]
    efc4:	3301      	adds	r3, #1
    efc6:	b2da      	uxtb	r2, r3
    efc8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    efcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efd0:	701a      	strb	r2, [r3, #0]
    efd2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    efd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efda:	781b      	ldrb	r3, [r3, #0]
    efdc:	2bff      	cmp	r3, #255	; 0xff
    efde:	d10f      	bne.n	f000 <send_gps_pos+0x960>
    efe0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    efe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efe8:	2200      	movs	r2, #0
    efea:	701a      	strb	r2, [r3, #0]
    efec:	e008      	b.n	f000 <send_gps_pos+0x960>
    efee:	bf00      	nop
    eff0:	2000ac3b 	.word	0x2000ac3b
    eff4:	2000ac31 	.word	0x2000ac31
    eff8:	2000ac32 	.word	0x2000ac32
    effc:	2000ac33 	.word	0x2000ac33
    f000:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f004:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f008:	781b      	ldrb	r3, [r3, #0]
    f00a:	461a      	mov	r2, r3
    f00c:	f64a 4324 	movw	r3, #44068	; 0xac24
    f010:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f014:	7859      	ldrb	r1, [r3, #1]
    f016:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f01a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f01e:	5499      	strb	r1, [r3, r2]
    f020:	4bd1      	ldr	r3, [pc, #836]	; (f368 <send_gps_pos+0xcc8>)
    f022:	781a      	ldrb	r2, [r3, #0]
    f024:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f028:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f02c:	781b      	ldrb	r3, [r3, #0]
    f02e:	4413      	add	r3, r2
    f030:	b2da      	uxtb	r2, r3
    f032:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f036:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f03a:	701a      	strb	r2, [r3, #0]
    f03c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f040:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f044:	781a      	ldrb	r2, [r3, #0]
    f046:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f04a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f04e:	781b      	ldrb	r3, [r3, #0]
    f050:	4413      	add	r3, r2
    f052:	b2da      	uxtb	r2, r3
    f054:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f058:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f05c:	701a      	strb	r2, [r3, #0]
    f05e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f062:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f066:	781b      	ldrb	r3, [r3, #0]
    f068:	3301      	adds	r3, #1
    f06a:	b2da      	uxtb	r2, r3
    f06c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f070:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f074:	701a      	strb	r2, [r3, #0]
    f076:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f07a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f07e:	781b      	ldrb	r3, [r3, #0]
    f080:	2bff      	cmp	r3, #255	; 0xff
    f082:	d105      	bne.n	f090 <send_gps_pos+0x9f0>
    f084:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f088:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f08c:	2200      	movs	r2, #0
    f08e:	701a      	strb	r2, [r3, #0]
    f090:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f094:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f098:	781b      	ldrb	r3, [r3, #0]
    f09a:	461a      	mov	r2, r3
    f09c:	f64a 4324 	movw	r3, #44068	; 0xac24
    f0a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0a4:	7899      	ldrb	r1, [r3, #2]
    f0a6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f0aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0ae:	5499      	strb	r1, [r3, r2]
    f0b0:	4bae      	ldr	r3, [pc, #696]	; (f36c <send_gps_pos+0xccc>)
    f0b2:	781a      	ldrb	r2, [r3, #0]
    f0b4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f0b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0bc:	781b      	ldrb	r3, [r3, #0]
    f0be:	4413      	add	r3, r2
    f0c0:	b2da      	uxtb	r2, r3
    f0c2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f0c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0ca:	701a      	strb	r2, [r3, #0]
    f0cc:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f0d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0d4:	781a      	ldrb	r2, [r3, #0]
    f0d6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f0da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0de:	781b      	ldrb	r3, [r3, #0]
    f0e0:	4413      	add	r3, r2
    f0e2:	b2da      	uxtb	r2, r3
    f0e4:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f0e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0ec:	701a      	strb	r2, [r3, #0]
    f0ee:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f0f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0f6:	781b      	ldrb	r3, [r3, #0]
    f0f8:	3301      	adds	r3, #1
    f0fa:	b2da      	uxtb	r2, r3
    f0fc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f100:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f104:	701a      	strb	r2, [r3, #0]
    f106:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f10a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f10e:	781b      	ldrb	r3, [r3, #0]
    f110:	2bff      	cmp	r3, #255	; 0xff
    f112:	d105      	bne.n	f120 <send_gps_pos+0xa80>
    f114:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f118:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f11c:	2200      	movs	r2, #0
    f11e:	701a      	strb	r2, [r3, #0]
    f120:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f124:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f128:	781b      	ldrb	r3, [r3, #0]
    f12a:	461a      	mov	r2, r3
    f12c:	f64a 4324 	movw	r3, #44068	; 0xac24
    f130:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f134:	78d9      	ldrb	r1, [r3, #3]
    f136:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f13a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f13e:	5499      	strb	r1, [r3, r2]
    f140:	4b8b      	ldr	r3, [pc, #556]	; (f370 <send_gps_pos+0xcd0>)
    f142:	781a      	ldrb	r2, [r3, #0]
    f144:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f148:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f14c:	781b      	ldrb	r3, [r3, #0]
    f14e:	4413      	add	r3, r2
    f150:	b2da      	uxtb	r2, r3
    f152:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f156:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f15a:	701a      	strb	r2, [r3, #0]
    f15c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f160:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f164:	781a      	ldrb	r2, [r3, #0]
    f166:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f16a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f16e:	781b      	ldrb	r3, [r3, #0]
    f170:	4413      	add	r3, r2
    f172:	b2da      	uxtb	r2, r3
    f174:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f178:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f17c:	701a      	strb	r2, [r3, #0]
    f17e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f182:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f186:	781b      	ldrb	r3, [r3, #0]
    f188:	3301      	adds	r3, #1
    f18a:	b2da      	uxtb	r2, r3
    f18c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f190:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f194:	701a      	strb	r2, [r3, #0]
    f196:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f19a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f19e:	781b      	ldrb	r3, [r3, #0]
    f1a0:	2bff      	cmp	r3, #255	; 0xff
    f1a2:	d105      	bne.n	f1b0 <send_gps_pos+0xb10>
    f1a4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f1a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1ac:	2200      	movs	r2, #0
    f1ae:	701a      	strb	r2, [r3, #0]
    f1b0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f1b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1b8:	781b      	ldrb	r3, [r3, #0]
    f1ba:	461a      	mov	r2, r3
    f1bc:	f64a 4328 	movw	r3, #44072	; 0xac28
    f1c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1c4:	7819      	ldrb	r1, [r3, #0]
    f1c6:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f1ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1ce:	5499      	strb	r1, [r3, r2]
    f1d0:	f64a 4328 	movw	r3, #44072	; 0xac28
    f1d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1d8:	781a      	ldrb	r2, [r3, #0]
    f1da:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f1de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1e2:	781b      	ldrb	r3, [r3, #0]
    f1e4:	4413      	add	r3, r2
    f1e6:	b2da      	uxtb	r2, r3
    f1e8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f1ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1f0:	701a      	strb	r2, [r3, #0]
    f1f2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f1f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1fa:	781a      	ldrb	r2, [r3, #0]
    f1fc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f200:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f204:	781b      	ldrb	r3, [r3, #0]
    f206:	4413      	add	r3, r2
    f208:	b2da      	uxtb	r2, r3
    f20a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f20e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f212:	701a      	strb	r2, [r3, #0]
    f214:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f218:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f21c:	781b      	ldrb	r3, [r3, #0]
    f21e:	3301      	adds	r3, #1
    f220:	b2da      	uxtb	r2, r3
    f222:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f22a:	701a      	strb	r2, [r3, #0]
    f22c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f230:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f234:	781b      	ldrb	r3, [r3, #0]
    f236:	2bff      	cmp	r3, #255	; 0xff
    f238:	d105      	bne.n	f246 <send_gps_pos+0xba6>
    f23a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f23e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f242:	2200      	movs	r2, #0
    f244:	701a      	strb	r2, [r3, #0]
    f246:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f24a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f24e:	781b      	ldrb	r3, [r3, #0]
    f250:	461a      	mov	r2, r3
    f252:	f64a 4328 	movw	r3, #44072	; 0xac28
    f256:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f25a:	7859      	ldrb	r1, [r3, #1]
    f25c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f260:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f264:	5499      	strb	r1, [r3, r2]
    f266:	4b43      	ldr	r3, [pc, #268]	; (f374 <send_gps_pos+0xcd4>)
    f268:	781a      	ldrb	r2, [r3, #0]
    f26a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f26e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f272:	781b      	ldrb	r3, [r3, #0]
    f274:	4413      	add	r3, r2
    f276:	b2da      	uxtb	r2, r3
    f278:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f27c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f280:	701a      	strb	r2, [r3, #0]
    f282:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f286:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f28a:	781a      	ldrb	r2, [r3, #0]
    f28c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f290:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f294:	781b      	ldrb	r3, [r3, #0]
    f296:	4413      	add	r3, r2
    f298:	b2da      	uxtb	r2, r3
    f29a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f29e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2a2:	701a      	strb	r2, [r3, #0]
    f2a4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f2a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2ac:	781b      	ldrb	r3, [r3, #0]
    f2ae:	3301      	adds	r3, #1
    f2b0:	b2da      	uxtb	r2, r3
    f2b2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f2b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2ba:	701a      	strb	r2, [r3, #0]
    f2bc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f2c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2c4:	781b      	ldrb	r3, [r3, #0]
    f2c6:	2bff      	cmp	r3, #255	; 0xff
    f2c8:	d105      	bne.n	f2d6 <send_gps_pos+0xc36>
    f2ca:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f2ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2d2:	2200      	movs	r2, #0
    f2d4:	701a      	strb	r2, [r3, #0]
    f2d6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f2da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2de:	781b      	ldrb	r3, [r3, #0]
    f2e0:	461a      	mov	r2, r3
    f2e2:	f64a 4328 	movw	r3, #44072	; 0xac28
    f2e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2ea:	7899      	ldrb	r1, [r3, #2]
    f2ec:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f2f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2f4:	5499      	strb	r1, [r3, r2]
    f2f6:	4b20      	ldr	r3, [pc, #128]	; (f378 <send_gps_pos+0xcd8>)
    f2f8:	781a      	ldrb	r2, [r3, #0]
    f2fa:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f2fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f302:	781b      	ldrb	r3, [r3, #0]
    f304:	4413      	add	r3, r2
    f306:	b2da      	uxtb	r2, r3
    f308:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f30c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f310:	701a      	strb	r2, [r3, #0]
    f312:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f316:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f31a:	781a      	ldrb	r2, [r3, #0]
    f31c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f320:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f324:	781b      	ldrb	r3, [r3, #0]
    f326:	4413      	add	r3, r2
    f328:	b2da      	uxtb	r2, r3
    f32a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f32e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f332:	701a      	strb	r2, [r3, #0]
    f334:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f338:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f33c:	781b      	ldrb	r3, [r3, #0]
    f33e:	3301      	adds	r3, #1
    f340:	b2da      	uxtb	r2, r3
    f342:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f346:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f34a:	701a      	strb	r2, [r3, #0]
    f34c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f350:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f354:	781b      	ldrb	r3, [r3, #0]
    f356:	2bff      	cmp	r3, #255	; 0xff
    f358:	d110      	bne.n	f37c <send_gps_pos+0xcdc>
    f35a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f35e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f362:	2200      	movs	r2, #0
    f364:	701a      	strb	r2, [r3, #0]
    f366:	e009      	b.n	f37c <send_gps_pos+0xcdc>
    f368:	2000ac25 	.word	0x2000ac25
    f36c:	2000ac26 	.word	0x2000ac26
    f370:	2000ac27 	.word	0x2000ac27
    f374:	2000ac29 	.word	0x2000ac29
    f378:	2000ac2a 	.word	0x2000ac2a
    f37c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f380:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f384:	781b      	ldrb	r3, [r3, #0]
    f386:	461a      	mov	r2, r3
    f388:	f64a 4328 	movw	r3, #44072	; 0xac28
    f38c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f390:	78d9      	ldrb	r1, [r3, #3]
    f392:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f396:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f39a:	5499      	strb	r1, [r3, r2]
    f39c:	4bd3      	ldr	r3, [pc, #844]	; (f6ec <send_gps_pos+0x104c>)
    f39e:	781a      	ldrb	r2, [r3, #0]
    f3a0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f3a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3a8:	781b      	ldrb	r3, [r3, #0]
    f3aa:	4413      	add	r3, r2
    f3ac:	b2da      	uxtb	r2, r3
    f3ae:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f3b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3b6:	701a      	strb	r2, [r3, #0]
    f3b8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f3bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3c0:	781a      	ldrb	r2, [r3, #0]
    f3c2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f3c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3ca:	781b      	ldrb	r3, [r3, #0]
    f3cc:	4413      	add	r3, r2
    f3ce:	b2da      	uxtb	r2, r3
    f3d0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f3d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3d8:	701a      	strb	r2, [r3, #0]
    f3da:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f3de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3e2:	781b      	ldrb	r3, [r3, #0]
    f3e4:	3301      	adds	r3, #1
    f3e6:	b2da      	uxtb	r2, r3
    f3e8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f3ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3f0:	701a      	strb	r2, [r3, #0]
    f3f2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f3f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3fa:	781b      	ldrb	r3, [r3, #0]
    f3fc:	2bff      	cmp	r3, #255	; 0xff
    f3fe:	d105      	bne.n	f40c <send_gps_pos+0xd6c>
    f400:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f404:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f408:	2200      	movs	r2, #0
    f40a:	701a      	strb	r2, [r3, #0]
    f40c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f410:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f414:	781b      	ldrb	r3, [r3, #0]
    f416:	461a      	mov	r2, r3
    f418:	f64a 432c 	movw	r3, #44076	; 0xac2c
    f41c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f420:	7819      	ldrb	r1, [r3, #0]
    f422:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f426:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f42a:	5499      	strb	r1, [r3, r2]
    f42c:	f64a 432c 	movw	r3, #44076	; 0xac2c
    f430:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f434:	781a      	ldrb	r2, [r3, #0]
    f436:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f43a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f43e:	781b      	ldrb	r3, [r3, #0]
    f440:	4413      	add	r3, r2
    f442:	b2da      	uxtb	r2, r3
    f444:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f448:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f44c:	701a      	strb	r2, [r3, #0]
    f44e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f452:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f456:	781a      	ldrb	r2, [r3, #0]
    f458:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f45c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f460:	781b      	ldrb	r3, [r3, #0]
    f462:	4413      	add	r3, r2
    f464:	b2da      	uxtb	r2, r3
    f466:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f46a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f46e:	701a      	strb	r2, [r3, #0]
    f470:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f474:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f478:	781b      	ldrb	r3, [r3, #0]
    f47a:	3301      	adds	r3, #1
    f47c:	b2da      	uxtb	r2, r3
    f47e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f482:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f486:	701a      	strb	r2, [r3, #0]
    f488:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f48c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f490:	781b      	ldrb	r3, [r3, #0]
    f492:	2bff      	cmp	r3, #255	; 0xff
    f494:	d105      	bne.n	f4a2 <send_gps_pos+0xe02>
    f496:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f49a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f49e:	2200      	movs	r2, #0
    f4a0:	701a      	strb	r2, [r3, #0]
    f4a2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f4a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4aa:	781b      	ldrb	r3, [r3, #0]
    f4ac:	461a      	mov	r2, r3
    f4ae:	f64a 432c 	movw	r3, #44076	; 0xac2c
    f4b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4b6:	7859      	ldrb	r1, [r3, #1]
    f4b8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f4bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4c0:	5499      	strb	r1, [r3, r2]
    f4c2:	4b8b      	ldr	r3, [pc, #556]	; (f6f0 <send_gps_pos+0x1050>)
    f4c4:	781a      	ldrb	r2, [r3, #0]
    f4c6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f4ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4ce:	781b      	ldrb	r3, [r3, #0]
    f4d0:	4413      	add	r3, r2
    f4d2:	b2da      	uxtb	r2, r3
    f4d4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f4d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4dc:	701a      	strb	r2, [r3, #0]
    f4de:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f4e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4e6:	781a      	ldrb	r2, [r3, #0]
    f4e8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f4ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4f0:	781b      	ldrb	r3, [r3, #0]
    f4f2:	4413      	add	r3, r2
    f4f4:	b2da      	uxtb	r2, r3
    f4f6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f4fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4fe:	701a      	strb	r2, [r3, #0]
    f500:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f504:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f508:	781b      	ldrb	r3, [r3, #0]
    f50a:	3301      	adds	r3, #1
    f50c:	b2da      	uxtb	r2, r3
    f50e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f512:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f516:	701a      	strb	r2, [r3, #0]
    f518:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f51c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f520:	781b      	ldrb	r3, [r3, #0]
    f522:	2bff      	cmp	r3, #255	; 0xff
    f524:	d105      	bne.n	f532 <send_gps_pos+0xe92>
    f526:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f52a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f52e:	2200      	movs	r2, #0
    f530:	701a      	strb	r2, [r3, #0]
    f532:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f53a:	781b      	ldrb	r3, [r3, #0]
    f53c:	461a      	mov	r2, r3
    f53e:	f64a 432c 	movw	r3, #44076	; 0xac2c
    f542:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f546:	7899      	ldrb	r1, [r3, #2]
    f548:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f54c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f550:	5499      	strb	r1, [r3, r2]
    f552:	4b68      	ldr	r3, [pc, #416]	; (f6f4 <send_gps_pos+0x1054>)
    f554:	781a      	ldrb	r2, [r3, #0]
    f556:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f55a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f55e:	781b      	ldrb	r3, [r3, #0]
    f560:	4413      	add	r3, r2
    f562:	b2da      	uxtb	r2, r3
    f564:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f568:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f56c:	701a      	strb	r2, [r3, #0]
    f56e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f572:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f576:	781a      	ldrb	r2, [r3, #0]
    f578:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f57c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f580:	781b      	ldrb	r3, [r3, #0]
    f582:	4413      	add	r3, r2
    f584:	b2da      	uxtb	r2, r3
    f586:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f58a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f58e:	701a      	strb	r2, [r3, #0]
    f590:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f594:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f598:	781b      	ldrb	r3, [r3, #0]
    f59a:	3301      	adds	r3, #1
    f59c:	b2da      	uxtb	r2, r3
    f59e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f5a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5a6:	701a      	strb	r2, [r3, #0]
    f5a8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f5ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5b0:	781b      	ldrb	r3, [r3, #0]
    f5b2:	2bff      	cmp	r3, #255	; 0xff
    f5b4:	d105      	bne.n	f5c2 <send_gps_pos+0xf22>
    f5b6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f5ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5be:	2200      	movs	r2, #0
    f5c0:	701a      	strb	r2, [r3, #0]
    f5c2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f5c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5ca:	781b      	ldrb	r3, [r3, #0]
    f5cc:	461a      	mov	r2, r3
    f5ce:	f64a 432c 	movw	r3, #44076	; 0xac2c
    f5d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5d6:	78d9      	ldrb	r1, [r3, #3]
    f5d8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f5dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5e0:	5499      	strb	r1, [r3, r2]
    f5e2:	4b45      	ldr	r3, [pc, #276]	; (f6f8 <send_gps_pos+0x1058>)
    f5e4:	781a      	ldrb	r2, [r3, #0]
    f5e6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f5ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5ee:	781b      	ldrb	r3, [r3, #0]
    f5f0:	4413      	add	r3, r2
    f5f2:	b2da      	uxtb	r2, r3
    f5f4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f5f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5fc:	701a      	strb	r2, [r3, #0]
    f5fe:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f602:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f606:	781a      	ldrb	r2, [r3, #0]
    f608:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f60c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f610:	781b      	ldrb	r3, [r3, #0]
    f612:	4413      	add	r3, r2
    f614:	b2da      	uxtb	r2, r3
    f616:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f61a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f61e:	701a      	strb	r2, [r3, #0]
    f620:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f624:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f628:	781b      	ldrb	r3, [r3, #0]
    f62a:	3301      	adds	r3, #1
    f62c:	b2da      	uxtb	r2, r3
    f62e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f632:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f636:	701a      	strb	r2, [r3, #0]
    f638:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f63c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f640:	781b      	ldrb	r3, [r3, #0]
    f642:	2bff      	cmp	r3, #255	; 0xff
    f644:	d105      	bne.n	f652 <send_gps_pos+0xfb2>
    f646:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f64a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f64e:	2200      	movs	r2, #0
    f650:	701a      	strb	r2, [r3, #0]
    f652:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f656:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f65a:	781b      	ldrb	r3, [r3, #0]
    f65c:	461a      	mov	r2, r3
    f65e:	f64a 4320 	movw	r3, #44064	; 0xac20
    f662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f666:	7819      	ldrb	r1, [r3, #0]
    f668:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f66c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f670:	5499      	strb	r1, [r3, r2]
    f672:	f64a 4320 	movw	r3, #44064	; 0xac20
    f676:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f67a:	781a      	ldrb	r2, [r3, #0]
    f67c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f680:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f684:	781b      	ldrb	r3, [r3, #0]
    f686:	4413      	add	r3, r2
    f688:	b2da      	uxtb	r2, r3
    f68a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f68e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f692:	701a      	strb	r2, [r3, #0]
    f694:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f698:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f69c:	781a      	ldrb	r2, [r3, #0]
    f69e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f6a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6a6:	781b      	ldrb	r3, [r3, #0]
    f6a8:	4413      	add	r3, r2
    f6aa:	b2da      	uxtb	r2, r3
    f6ac:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f6b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6b4:	701a      	strb	r2, [r3, #0]
    f6b6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f6ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6be:	781b      	ldrb	r3, [r3, #0]
    f6c0:	3301      	adds	r3, #1
    f6c2:	b2da      	uxtb	r2, r3
    f6c4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f6c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6cc:	701a      	strb	r2, [r3, #0]
    f6ce:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f6d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6d6:	781b      	ldrb	r3, [r3, #0]
    f6d8:	2bff      	cmp	r3, #255	; 0xff
    f6da:	d10f      	bne.n	f6fc <send_gps_pos+0x105c>
    f6dc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f6e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6e4:	2200      	movs	r2, #0
    f6e6:	701a      	strb	r2, [r3, #0]
    f6e8:	e008      	b.n	f6fc <send_gps_pos+0x105c>
    f6ea:	bf00      	nop
    f6ec:	2000ac2b 	.word	0x2000ac2b
    f6f0:	2000ac2d 	.word	0x2000ac2d
    f6f4:	2000ac2e 	.word	0x2000ac2e
    f6f8:	2000ac2f 	.word	0x2000ac2f
    f6fc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f700:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f704:	781b      	ldrb	r3, [r3, #0]
    f706:	461a      	mov	r2, r3
    f708:	f64a 4320 	movw	r3, #44064	; 0xac20
    f70c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f710:	7859      	ldrb	r1, [r3, #1]
    f712:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f716:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f71a:	5499      	strb	r1, [r3, r2]
    f71c:	4bc0      	ldr	r3, [pc, #768]	; (fa20 <send_gps_pos+0x1380>)
    f71e:	781a      	ldrb	r2, [r3, #0]
    f720:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f728:	781b      	ldrb	r3, [r3, #0]
    f72a:	4413      	add	r3, r2
    f72c:	b2da      	uxtb	r2, r3
    f72e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f732:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f736:	701a      	strb	r2, [r3, #0]
    f738:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f73c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f740:	781a      	ldrb	r2, [r3, #0]
    f742:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f746:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f74a:	781b      	ldrb	r3, [r3, #0]
    f74c:	4413      	add	r3, r2
    f74e:	b2da      	uxtb	r2, r3
    f750:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f754:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f758:	701a      	strb	r2, [r3, #0]
    f75a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f75e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f762:	781b      	ldrb	r3, [r3, #0]
    f764:	3301      	adds	r3, #1
    f766:	b2da      	uxtb	r2, r3
    f768:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f76c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f770:	701a      	strb	r2, [r3, #0]
    f772:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f776:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f77a:	781b      	ldrb	r3, [r3, #0]
    f77c:	2bff      	cmp	r3, #255	; 0xff
    f77e:	d105      	bne.n	f78c <send_gps_pos+0x10ec>
    f780:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f784:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f788:	2200      	movs	r2, #0
    f78a:	701a      	strb	r2, [r3, #0]
    f78c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f790:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f794:	781b      	ldrb	r3, [r3, #0]
    f796:	461a      	mov	r2, r3
    f798:	f64a 4320 	movw	r3, #44064	; 0xac20
    f79c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7a0:	7899      	ldrb	r1, [r3, #2]
    f7a2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f7a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7aa:	5499      	strb	r1, [r3, r2]
    f7ac:	4b9d      	ldr	r3, [pc, #628]	; (fa24 <send_gps_pos+0x1384>)
    f7ae:	781a      	ldrb	r2, [r3, #0]
    f7b0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f7b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7b8:	781b      	ldrb	r3, [r3, #0]
    f7ba:	4413      	add	r3, r2
    f7bc:	b2da      	uxtb	r2, r3
    f7be:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f7c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7c6:	701a      	strb	r2, [r3, #0]
    f7c8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f7cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7d0:	781a      	ldrb	r2, [r3, #0]
    f7d2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f7d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7da:	781b      	ldrb	r3, [r3, #0]
    f7dc:	4413      	add	r3, r2
    f7de:	b2da      	uxtb	r2, r3
    f7e0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f7e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7e8:	701a      	strb	r2, [r3, #0]
    f7ea:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f7ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7f2:	781b      	ldrb	r3, [r3, #0]
    f7f4:	3301      	adds	r3, #1
    f7f6:	b2da      	uxtb	r2, r3
    f7f8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f7fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f800:	701a      	strb	r2, [r3, #0]
    f802:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f80a:	781b      	ldrb	r3, [r3, #0]
    f80c:	2bff      	cmp	r3, #255	; 0xff
    f80e:	d105      	bne.n	f81c <send_gps_pos+0x117c>
    f810:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f814:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f818:	2200      	movs	r2, #0
    f81a:	701a      	strb	r2, [r3, #0]
    f81c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f820:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f824:	781b      	ldrb	r3, [r3, #0]
    f826:	461a      	mov	r2, r3
    f828:	f64a 4320 	movw	r3, #44064	; 0xac20
    f82c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f830:	78d9      	ldrb	r1, [r3, #3]
    f832:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f836:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f83a:	5499      	strb	r1, [r3, r2]
    f83c:	4b7a      	ldr	r3, [pc, #488]	; (fa28 <send_gps_pos+0x1388>)
    f83e:	781a      	ldrb	r2, [r3, #0]
    f840:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f844:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f848:	781b      	ldrb	r3, [r3, #0]
    f84a:	4413      	add	r3, r2
    f84c:	b2da      	uxtb	r2, r3
    f84e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f852:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f856:	701a      	strb	r2, [r3, #0]
    f858:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f85c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f860:	781a      	ldrb	r2, [r3, #0]
    f862:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f866:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f86a:	781b      	ldrb	r3, [r3, #0]
    f86c:	4413      	add	r3, r2
    f86e:	b2da      	uxtb	r2, r3
    f870:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f874:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f878:	701a      	strb	r2, [r3, #0]
    f87a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f87e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f882:	781b      	ldrb	r3, [r3, #0]
    f884:	3301      	adds	r3, #1
    f886:	b2da      	uxtb	r2, r3
    f888:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f88c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f890:	701a      	strb	r2, [r3, #0]
    f892:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f896:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f89a:	781b      	ldrb	r3, [r3, #0]
    f89c:	2bff      	cmp	r3, #255	; 0xff
    f89e:	d105      	bne.n	f8ac <send_gps_pos+0x120c>
    f8a0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f8a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8a8:	2200      	movs	r2, #0
    f8aa:	701a      	strb	r2, [r3, #0]
    f8ac:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f8b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8b4:	781b      	ldrb	r3, [r3, #0]
    f8b6:	461a      	mov	r2, r3
    f8b8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    f8bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8c0:	7819      	ldrb	r1, [r3, #0]
    f8c2:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f8c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8ca:	5499      	strb	r1, [r3, r2]
    f8cc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f8d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8d4:	781b      	ldrb	r3, [r3, #0]
    f8d6:	3301      	adds	r3, #1
    f8d8:	b2da      	uxtb	r2, r3
    f8da:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f8de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8e2:	701a      	strb	r2, [r3, #0]
    f8e4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f8e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8ec:	781b      	ldrb	r3, [r3, #0]
    f8ee:	2bff      	cmp	r3, #255	; 0xff
    f8f0:	d105      	bne.n	f8fe <send_gps_pos+0x125e>
    f8f2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f8f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8fa:	2200      	movs	r2, #0
    f8fc:	701a      	strb	r2, [r3, #0]
    f8fe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f902:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f906:	781b      	ldrb	r3, [r3, #0]
    f908:	461a      	mov	r2, r3
    f90a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    f90e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f912:	7819      	ldrb	r1, [r3, #0]
    f914:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f918:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f91c:	5499      	strb	r1, [r3, r2]
    f91e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f922:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f926:	781b      	ldrb	r3, [r3, #0]
    f928:	3301      	adds	r3, #1
    f92a:	b2da      	uxtb	r2, r3
    f92c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f930:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f934:	701a      	strb	r2, [r3, #0]
    f936:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f93a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f93e:	781b      	ldrb	r3, [r3, #0]
    f940:	2bff      	cmp	r3, #255	; 0xff
    f942:	d105      	bne.n	f950 <send_gps_pos+0x12b0>
    f944:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    f948:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f94c:	2200      	movs	r2, #0
    f94e:	701a      	strb	r2, [r3, #0]
    f950:	f242 0339 	movw	r3, #8249	; 0x2039
    f954:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f958:	781b      	ldrb	r3, [r3, #0]
    f95a:	b2db      	uxtb	r3, r3
    f95c:	f003 0310 	and.w	r3, r3, #16
    f960:	2b00      	cmp	r3, #0
    f962:	d15a      	bne.n	fa1a <send_gps_pos+0x137a>
    f964:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    f968:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f96c:	781b      	ldrb	r3, [r3, #0]
    f96e:	b2db      	uxtb	r3, r3
    f970:	461a      	mov	r2, r3
    f972:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    f976:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f97a:	5c9a      	ldrb	r2, [r3, r2]
    f97c:	f64a 33b3 	movw	r3, #43955	; 0xabb3
    f980:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f984:	701a      	strb	r2, [r3, #0]
    f986:	f64a 33b4 	movw	r3, #43956	; 0xabb4
    f98a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f98e:	2200      	movs	r2, #0
    f990:	701a      	strb	r2, [r3, #0]
    f992:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    f996:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f99a:	781b      	ldrb	r3, [r3, #0]
    f99c:	b2db      	uxtb	r3, r3
    f99e:	3301      	adds	r3, #1
    f9a0:	b2da      	uxtb	r2, r3
    f9a2:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    f9a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9aa:	701a      	strb	r2, [r3, #0]
    f9ac:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    f9b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9b4:	781b      	ldrb	r3, [r3, #0]
    f9b6:	b2db      	uxtb	r3, r3
    f9b8:	2bff      	cmp	r3, #255	; 0xff
    f9ba:	d105      	bne.n	f9c8 <send_gps_pos+0x1328>
    f9bc:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    f9c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9c4:	2200      	movs	r2, #0
    f9c6:	701a      	strb	r2, [r3, #0]
    f9c8:	f242 0338 	movw	r3, #8248	; 0x2038
    f9cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9d0:	f242 0238 	movw	r2, #8248	; 0x2038
    f9d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f9d8:	7812      	ldrb	r2, [r2, #0]
    f9da:	b2d2      	uxtb	r2, r2
    f9dc:	f042 0201 	orr.w	r2, r2, #1
    f9e0:	b2d2      	uxtb	r2, r2
    f9e2:	701a      	strb	r2, [r3, #0]
    f9e4:	f242 0339 	movw	r3, #8249	; 0x2039
    f9e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9ec:	f242 0239 	movw	r2, #8249	; 0x2039
    f9f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    f9f4:	7812      	ldrb	r2, [r2, #0]
    f9f6:	b2d2      	uxtb	r2, r2
    f9f8:	f042 0210 	orr.w	r2, r2, #16
    f9fc:	b2d2      	uxtb	r2, r2
    f9fe:	701a      	strb	r2, [r3, #0]
    fa00:	e00b      	b.n	fa1a <send_gps_pos+0x137a>
    fa02:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    fa06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa0a:	781b      	ldrb	r3, [r3, #0]
    fa0c:	3301      	adds	r3, #1
    fa0e:	b2da      	uxtb	r2, r3
    fa10:	f64a 23b0 	movw	r3, #43696	; 0xaab0
    fa14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa18:	701a      	strb	r2, [r3, #0]
     estimator_update_state_gps();
    fa1a:	f005 fbfd 	bl	15218 <estimator_update_state_gps>
  }
}
    fa1e:	bd80      	pop	{r7, pc}
    fa20:	2000ac21 	.word	0x2000ac21
    fa24:	2000ac22 	.word	0x2000ac22
    fa28:	2000ac23 	.word	0x2000ac23

0000fa2c <send_radIR>:

void send_radIR(void){
    fa2c:	b480      	push	{r7}
    fa2e:	af00      	add	r7, sp, #0
  if (gps_pos_available)
    fa30:	f64a 4346 	movw	r3, #44102	; 0xac46
    fa34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa38:	781b      	ldrb	r3, [r3, #0]
    fa3a:	2b00      	cmp	r3, #0
    fa3c:	f000 85e8 	beq.w	10610 <send_radIR+0xbe4>
     DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    fa40:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fa44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa48:	781a      	ldrb	r2, [r3, #0]
    fa4a:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    fa4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa52:	781b      	ldrb	r3, [r3, #0]
    fa54:	b2db      	uxtb	r3, r3
    fa56:	429a      	cmp	r2, r3
    fa58:	d313      	bcc.n	fa82 <send_radIR+0x56>
    fa5a:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    fa5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa62:	781b      	ldrb	r3, [r3, #0]
    fa64:	b2db      	uxtb	r3, r3
    fa66:	461a      	mov	r2, r3
    fa68:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fa6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa70:	781b      	ldrb	r3, [r3, #0]
    fa72:	1ad3      	subs	r3, r2, r3
    fa74:	33ff      	adds	r3, #255	; 0xff
    fa76:	2b14      	cmp	r3, #20
    fa78:	bfd4      	ite	le
    fa7a:	2300      	movle	r3, #0
    fa7c:	2301      	movgt	r3, #1
    fa7e:	b2db      	uxtb	r3, r3
    fa80:	e011      	b.n	faa6 <send_radIR+0x7a>
    fa82:	f64a 23b2 	movw	r3, #43698	; 0xaab2
    fa86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa8a:	781b      	ldrb	r3, [r3, #0]
    fa8c:	b2db      	uxtb	r3, r3
    fa8e:	461a      	mov	r2, r3
    fa90:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fa94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa98:	781b      	ldrb	r3, [r3, #0]
    fa9a:	1ad3      	subs	r3, r2, r3
    fa9c:	2b14      	cmp	r3, #20
    fa9e:	bfd4      	ite	le
    faa0:	2300      	movle	r3, #0
    faa2:	2301      	movgt	r3, #1
    faa4:	b2db      	uxtb	r3, r3
    faa6:	2b00      	cmp	r3, #0
    faa8:	f000 85a6 	beq.w	105f8 <send_radIR+0xbcc>
    faac:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fab4:	781b      	ldrb	r3, [r3, #0]
    fab6:	461a      	mov	r2, r3
    fab8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    fabc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fac0:	2105      	movs	r1, #5
    fac2:	5499      	strb	r1, [r3, r2]
    fac4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    facc:	781b      	ldrb	r3, [r3, #0]
    face:	3301      	adds	r3, #1
    fad0:	b2da      	uxtb	r2, r3
    fad2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fada:	701a      	strb	r2, [r3, #0]
    fadc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fae4:	781b      	ldrb	r3, [r3, #0]
    fae6:	2bff      	cmp	r3, #255	; 0xff
    fae8:	d105      	bne.n	faf6 <send_radIR+0xca>
    faea:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    faee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    faf2:	2200      	movs	r2, #0
    faf4:	701a      	strb	r2, [r3, #0]
    faf6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fafa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fafe:	781b      	ldrb	r3, [r3, #0]
    fb00:	461a      	mov	r2, r3
    fb02:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    fb06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb0a:	2105      	movs	r1, #5
    fb0c:	5499      	strb	r1, [r3, r2]
    fb0e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fb12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb16:	781b      	ldrb	r3, [r3, #0]
    fb18:	3301      	adds	r3, #1
    fb1a:	b2da      	uxtb	r2, r3
    fb1c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fb20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb24:	701a      	strb	r2, [r3, #0]
    fb26:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fb2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb2e:	781b      	ldrb	r3, [r3, #0]
    fb30:	2bff      	cmp	r3, #255	; 0xff
    fb32:	d105      	bne.n	fb40 <send_radIR+0x114>
    fb34:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fb38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb3c:	2200      	movs	r2, #0
    fb3e:	701a      	strb	r2, [r3, #0]
    fb40:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fb44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb48:	2205      	movs	r2, #5
    fb4a:	701a      	strb	r2, [r3, #0]
    fb4c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fb50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb54:	2205      	movs	r2, #5
    fb56:	701a      	strb	r2, [r3, #0]
    fb58:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fb5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb60:	781b      	ldrb	r3, [r3, #0]
    fb62:	461a      	mov	r2, r3
    fb64:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    fb68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb6c:	7819      	ldrb	r1, [r3, #0]
    fb6e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    fb72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb76:	5499      	strb	r1, [r3, r2]
    fb78:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    fb7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb80:	781a      	ldrb	r2, [r3, #0]
    fb82:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fb86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb8a:	781b      	ldrb	r3, [r3, #0]
    fb8c:	4413      	add	r3, r2
    fb8e:	b2da      	uxtb	r2, r3
    fb90:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fb94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb98:	701a      	strb	r2, [r3, #0]
    fb9a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fb9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fba2:	781a      	ldrb	r2, [r3, #0]
    fba4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbac:	781b      	ldrb	r3, [r3, #0]
    fbae:	4413      	add	r3, r2
    fbb0:	b2da      	uxtb	r2, r3
    fbb2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fbb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbba:	701a      	strb	r2, [r3, #0]
    fbbc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fbc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbc4:	781b      	ldrb	r3, [r3, #0]
    fbc6:	3301      	adds	r3, #1
    fbc8:	b2da      	uxtb	r2, r3
    fbca:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fbce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbd2:	701a      	strb	r2, [r3, #0]
    fbd4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fbd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbdc:	781b      	ldrb	r3, [r3, #0]
    fbde:	2bff      	cmp	r3, #255	; 0xff
    fbe0:	d105      	bne.n	fbee <send_radIR+0x1c2>
    fbe2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fbe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbea:	2200      	movs	r2, #0
    fbec:	701a      	strb	r2, [r3, #0]
    fbee:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fbf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbf6:	781b      	ldrb	r3, [r3, #0]
    fbf8:	461a      	mov	r2, r3
    fbfa:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    fbfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc02:	7859      	ldrb	r1, [r3, #1]
    fc04:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    fc08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc0c:	5499      	strb	r1, [r3, r2]
    fc0e:	4bd2      	ldr	r3, [pc, #840]	; (ff58 <send_radIR+0x52c>)
    fc10:	781a      	ldrb	r2, [r3, #0]
    fc12:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fc16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc1a:	781b      	ldrb	r3, [r3, #0]
    fc1c:	4413      	add	r3, r2
    fc1e:	b2da      	uxtb	r2, r3
    fc20:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fc24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc28:	701a      	strb	r2, [r3, #0]
    fc2a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fc2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc32:	781a      	ldrb	r2, [r3, #0]
    fc34:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fc38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc3c:	781b      	ldrb	r3, [r3, #0]
    fc3e:	4413      	add	r3, r2
    fc40:	b2da      	uxtb	r2, r3
    fc42:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fc46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc4a:	701a      	strb	r2, [r3, #0]
    fc4c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fc50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc54:	781b      	ldrb	r3, [r3, #0]
    fc56:	3301      	adds	r3, #1
    fc58:	b2da      	uxtb	r2, r3
    fc5a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fc5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc62:	701a      	strb	r2, [r3, #0]
    fc64:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fc68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc6c:	781b      	ldrb	r3, [r3, #0]
    fc6e:	2bff      	cmp	r3, #255	; 0xff
    fc70:	d105      	bne.n	fc7e <send_radIR+0x252>
    fc72:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fc76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc7a:	2200      	movs	r2, #0
    fc7c:	701a      	strb	r2, [r3, #0]
    fc7e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fc82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc86:	781b      	ldrb	r3, [r3, #0]
    fc88:	461a      	mov	r2, r3
    fc8a:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    fc8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc92:	7899      	ldrb	r1, [r3, #2]
    fc94:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    fc98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc9c:	5499      	strb	r1, [r3, r2]
    fc9e:	4baf      	ldr	r3, [pc, #700]	; (ff5c <send_radIR+0x530>)
    fca0:	781a      	ldrb	r2, [r3, #0]
    fca2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcaa:	781b      	ldrb	r3, [r3, #0]
    fcac:	4413      	add	r3, r2
    fcae:	b2da      	uxtb	r2, r3
    fcb0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fcb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcb8:	701a      	strb	r2, [r3, #0]
    fcba:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fcbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcc2:	781a      	ldrb	r2, [r3, #0]
    fcc4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fcc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fccc:	781b      	ldrb	r3, [r3, #0]
    fcce:	4413      	add	r3, r2
    fcd0:	b2da      	uxtb	r2, r3
    fcd2:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fcd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcda:	701a      	strb	r2, [r3, #0]
    fcdc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fce4:	781b      	ldrb	r3, [r3, #0]
    fce6:	3301      	adds	r3, #1
    fce8:	b2da      	uxtb	r2, r3
    fcea:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fcee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcf2:	701a      	strb	r2, [r3, #0]
    fcf4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fcf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcfc:	781b      	ldrb	r3, [r3, #0]
    fcfe:	2bff      	cmp	r3, #255	; 0xff
    fd00:	d105      	bne.n	fd0e <send_radIR+0x2e2>
    fd02:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fd06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd0a:	2200      	movs	r2, #0
    fd0c:	701a      	strb	r2, [r3, #0]
    fd0e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fd12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd16:	781b      	ldrb	r3, [r3, #0]
    fd18:	461a      	mov	r2, r3
    fd1a:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
    fd1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd22:	78d9      	ldrb	r1, [r3, #3]
    fd24:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    fd28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd2c:	5499      	strb	r1, [r3, r2]
    fd2e:	4b8c      	ldr	r3, [pc, #560]	; (ff60 <send_radIR+0x534>)
    fd30:	781a      	ldrb	r2, [r3, #0]
    fd32:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fd36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd3a:	781b      	ldrb	r3, [r3, #0]
    fd3c:	4413      	add	r3, r2
    fd3e:	b2da      	uxtb	r2, r3
    fd40:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fd44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd48:	701a      	strb	r2, [r3, #0]
    fd4a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fd4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd52:	781a      	ldrb	r2, [r3, #0]
    fd54:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fd58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd5c:	781b      	ldrb	r3, [r3, #0]
    fd5e:	4413      	add	r3, r2
    fd60:	b2da      	uxtb	r2, r3
    fd62:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fd66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd6a:	701a      	strb	r2, [r3, #0]
    fd6c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fd70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd74:	781b      	ldrb	r3, [r3, #0]
    fd76:	3301      	adds	r3, #1
    fd78:	b2da      	uxtb	r2, r3
    fd7a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fd7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd82:	701a      	strb	r2, [r3, #0]
    fd84:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fd88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd8c:	781b      	ldrb	r3, [r3, #0]
    fd8e:	2bff      	cmp	r3, #255	; 0xff
    fd90:	d105      	bne.n	fd9e <send_radIR+0x372>
    fd92:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fd96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd9a:	2200      	movs	r2, #0
    fd9c:	701a      	strb	r2, [r3, #0]
    fd9e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fda2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fda6:	781b      	ldrb	r3, [r3, #0]
    fda8:	461a      	mov	r2, r3
    fdaa:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    fdae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdb2:	7819      	ldrb	r1, [r3, #0]
    fdb4:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    fdb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdbc:	5499      	strb	r1, [r3, r2]
    fdbe:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    fdc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdc6:	781a      	ldrb	r2, [r3, #0]
    fdc8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fdcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdd0:	781b      	ldrb	r3, [r3, #0]
    fdd2:	4413      	add	r3, r2
    fdd4:	b2da      	uxtb	r2, r3
    fdd6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fdda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdde:	701a      	strb	r2, [r3, #0]
    fde0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fde4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fde8:	781a      	ldrb	r2, [r3, #0]
    fdea:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fdee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdf2:	781b      	ldrb	r3, [r3, #0]
    fdf4:	4413      	add	r3, r2
    fdf6:	b2da      	uxtb	r2, r3
    fdf8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fdfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe00:	701a      	strb	r2, [r3, #0]
    fe02:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fe06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe0a:	781b      	ldrb	r3, [r3, #0]
    fe0c:	3301      	adds	r3, #1
    fe0e:	b2da      	uxtb	r2, r3
    fe10:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fe14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe18:	701a      	strb	r2, [r3, #0]
    fe1a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fe1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe22:	781b      	ldrb	r3, [r3, #0]
    fe24:	2bff      	cmp	r3, #255	; 0xff
    fe26:	d105      	bne.n	fe34 <send_radIR+0x408>
    fe28:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fe2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe30:	2200      	movs	r2, #0
    fe32:	701a      	strb	r2, [r3, #0]
    fe34:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fe38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe3c:	781b      	ldrb	r3, [r3, #0]
    fe3e:	461a      	mov	r2, r3
    fe40:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    fe44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe48:	7859      	ldrb	r1, [r3, #1]
    fe4a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    fe4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe52:	5499      	strb	r1, [r3, r2]
    fe54:	4b43      	ldr	r3, [pc, #268]	; (ff64 <send_radIR+0x538>)
    fe56:	781a      	ldrb	r2, [r3, #0]
    fe58:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fe5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe60:	781b      	ldrb	r3, [r3, #0]
    fe62:	4413      	add	r3, r2
    fe64:	b2da      	uxtb	r2, r3
    fe66:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fe6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe6e:	701a      	strb	r2, [r3, #0]
    fe70:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fe74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe78:	781a      	ldrb	r2, [r3, #0]
    fe7a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fe7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe82:	781b      	ldrb	r3, [r3, #0]
    fe84:	4413      	add	r3, r2
    fe86:	b2da      	uxtb	r2, r3
    fe88:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    fe8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe90:	701a      	strb	r2, [r3, #0]
    fe92:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fe96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe9a:	781b      	ldrb	r3, [r3, #0]
    fe9c:	3301      	adds	r3, #1
    fe9e:	b2da      	uxtb	r2, r3
    fea0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fea8:	701a      	strb	r2, [r3, #0]
    feaa:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    feae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    feb2:	781b      	ldrb	r3, [r3, #0]
    feb4:	2bff      	cmp	r3, #255	; 0xff
    feb6:	d105      	bne.n	fec4 <send_radIR+0x498>
    feb8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    febc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fec0:	2200      	movs	r2, #0
    fec2:	701a      	strb	r2, [r3, #0]
    fec4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fecc:	781b      	ldrb	r3, [r3, #0]
    fece:	461a      	mov	r2, r3
    fed0:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    fed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fed8:	7899      	ldrb	r1, [r3, #2]
    feda:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    fede:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fee2:	5499      	strb	r1, [r3, r2]
    fee4:	4b20      	ldr	r3, [pc, #128]	; (ff68 <send_radIR+0x53c>)
    fee6:	781a      	ldrb	r2, [r3, #0]
    fee8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    feec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fef0:	781b      	ldrb	r3, [r3, #0]
    fef2:	4413      	add	r3, r2
    fef4:	b2da      	uxtb	r2, r3
    fef6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    fefa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fefe:	701a      	strb	r2, [r3, #0]
    ff00:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ff04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff08:	781a      	ldrb	r2, [r3, #0]
    ff0a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ff0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff12:	781b      	ldrb	r3, [r3, #0]
    ff14:	4413      	add	r3, r2
    ff16:	b2da      	uxtb	r2, r3
    ff18:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ff1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff20:	701a      	strb	r2, [r3, #0]
    ff22:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ff26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff2a:	781b      	ldrb	r3, [r3, #0]
    ff2c:	3301      	adds	r3, #1
    ff2e:	b2da      	uxtb	r2, r3
    ff30:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ff34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff38:	701a      	strb	r2, [r3, #0]
    ff3a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ff3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff42:	781b      	ldrb	r3, [r3, #0]
    ff44:	2bff      	cmp	r3, #255	; 0xff
    ff46:	d111      	bne.n	ff6c <send_radIR+0x540>
    ff48:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ff4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff50:	2200      	movs	r2, #0
    ff52:	701a      	strb	r2, [r3, #0]
    ff54:	e00a      	b.n	ff6c <send_radIR+0x540>
    ff56:	bf00      	nop
    ff58:	2000b0a9 	.word	0x2000b0a9
    ff5c:	2000b0aa 	.word	0x2000b0aa
    ff60:	2000b0ab 	.word	0x2000b0ab
    ff64:	2000b0ad 	.word	0x2000b0ad
    ff68:	2000b0ae 	.word	0x2000b0ae
    ff6c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ff70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff74:	781b      	ldrb	r3, [r3, #0]
    ff76:	461a      	mov	r2, r3
    ff78:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
    ff7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff80:	78d9      	ldrb	r1, [r3, #3]
    ff82:	f64a 23b4 	movw	r3, #43700	; 0xaab4
    ff86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff8a:	5499      	strb	r1, [r3, r2]
    ff8c:	4bd3      	ldr	r3, [pc, #844]	; (102dc <send_radIR+0x8b0>)
    ff8e:	781a      	ldrb	r2, [r3, #0]
    ff90:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ff94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff98:	781b      	ldrb	r3, [r3, #0]
    ff9a:	4413      	add	r3, r2
    ff9c:	b2da      	uxtb	r2, r3
    ff9e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ffa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffa6:	701a      	strb	r2, [r3, #0]
    ffa8:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ffac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffb0:	781a      	ldrb	r2, [r3, #0]
    ffb2:	f64a 33b5 	movw	r3, #43957	; 0xabb5
    ffb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffba:	781b      	ldrb	r3, [r3, #0]
    ffbc:	4413      	add	r3, r2
    ffbe:	b2da      	uxtb	r2, r3
    ffc0:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    ffc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffc8:	701a      	strb	r2, [r3, #0]
    ffca:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ffce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffd2:	781b      	ldrb	r3, [r3, #0]
    ffd4:	3301      	adds	r3, #1
    ffd6:	b2da      	uxtb	r2, r3
    ffd8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ffdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffe0:	701a      	strb	r2, [r3, #0]
    ffe2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    ffe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffea:	781b      	ldrb	r3, [r3, #0]
    ffec:	2bff      	cmp	r3, #255	; 0xff
    ffee:	d105      	bne.n	fffc <send_radIR+0x5d0>
    fff0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
    fff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fff8:	2200      	movs	r2, #0
    fffa:	701a      	strb	r2, [r3, #0]
    fffc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10000:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10004:	781b      	ldrb	r3, [r3, #0]
   10006:	461a      	mov	r2, r3
   10008:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
   1000c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10010:	7819      	ldrb	r1, [r3, #0]
   10012:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   10016:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1001a:	5499      	strb	r1, [r3, r2]
   1001c:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
   10020:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10024:	781a      	ldrb	r2, [r3, #0]
   10026:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   1002a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1002e:	781b      	ldrb	r3, [r3, #0]
   10030:	4413      	add	r3, r2
   10032:	b2da      	uxtb	r2, r3
   10034:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10038:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1003c:	701a      	strb	r2, [r3, #0]
   1003e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   10042:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10046:	781a      	ldrb	r2, [r3, #0]
   10048:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   1004c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10050:	781b      	ldrb	r3, [r3, #0]
   10052:	4413      	add	r3, r2
   10054:	b2da      	uxtb	r2, r3
   10056:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   1005a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1005e:	701a      	strb	r2, [r3, #0]
   10060:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10064:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10068:	781b      	ldrb	r3, [r3, #0]
   1006a:	3301      	adds	r3, #1
   1006c:	b2da      	uxtb	r2, r3
   1006e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10072:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10076:	701a      	strb	r2, [r3, #0]
   10078:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1007c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10080:	781b      	ldrb	r3, [r3, #0]
   10082:	2bff      	cmp	r3, #255	; 0xff
   10084:	d105      	bne.n	10092 <send_radIR+0x666>
   10086:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1008a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1008e:	2200      	movs	r2, #0
   10090:	701a      	strb	r2, [r3, #0]
   10092:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10096:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1009a:	781b      	ldrb	r3, [r3, #0]
   1009c:	461a      	mov	r2, r3
   1009e:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
   100a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100a6:	7859      	ldrb	r1, [r3, #1]
   100a8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   100ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100b0:	5499      	strb	r1, [r3, r2]
   100b2:	4b8b      	ldr	r3, [pc, #556]	; (102e0 <send_radIR+0x8b4>)
   100b4:	781a      	ldrb	r2, [r3, #0]
   100b6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   100ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100be:	781b      	ldrb	r3, [r3, #0]
   100c0:	4413      	add	r3, r2
   100c2:	b2da      	uxtb	r2, r3
   100c4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   100c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100cc:	701a      	strb	r2, [r3, #0]
   100ce:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   100d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100d6:	781a      	ldrb	r2, [r3, #0]
   100d8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   100dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100e0:	781b      	ldrb	r3, [r3, #0]
   100e2:	4413      	add	r3, r2
   100e4:	b2da      	uxtb	r2, r3
   100e6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   100ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100ee:	701a      	strb	r2, [r3, #0]
   100f0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   100f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100f8:	781b      	ldrb	r3, [r3, #0]
   100fa:	3301      	adds	r3, #1
   100fc:	b2da      	uxtb	r2, r3
   100fe:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10102:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10106:	701a      	strb	r2, [r3, #0]
   10108:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1010c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10110:	781b      	ldrb	r3, [r3, #0]
   10112:	2bff      	cmp	r3, #255	; 0xff
   10114:	d105      	bne.n	10122 <send_radIR+0x6f6>
   10116:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1011a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1011e:	2200      	movs	r2, #0
   10120:	701a      	strb	r2, [r3, #0]
   10122:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10126:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1012a:	781b      	ldrb	r3, [r3, #0]
   1012c:	461a      	mov	r2, r3
   1012e:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
   10132:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10136:	7899      	ldrb	r1, [r3, #2]
   10138:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   1013c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10140:	5499      	strb	r1, [r3, r2]
   10142:	4b68      	ldr	r3, [pc, #416]	; (102e4 <send_radIR+0x8b8>)
   10144:	781a      	ldrb	r2, [r3, #0]
   10146:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   1014a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1014e:	781b      	ldrb	r3, [r3, #0]
   10150:	4413      	add	r3, r2
   10152:	b2da      	uxtb	r2, r3
   10154:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10158:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1015c:	701a      	strb	r2, [r3, #0]
   1015e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   10162:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10166:	781a      	ldrb	r2, [r3, #0]
   10168:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   1016c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10170:	781b      	ldrb	r3, [r3, #0]
   10172:	4413      	add	r3, r2
   10174:	b2da      	uxtb	r2, r3
   10176:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   1017a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1017e:	701a      	strb	r2, [r3, #0]
   10180:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10184:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10188:	781b      	ldrb	r3, [r3, #0]
   1018a:	3301      	adds	r3, #1
   1018c:	b2da      	uxtb	r2, r3
   1018e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10192:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10196:	701a      	strb	r2, [r3, #0]
   10198:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1019c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101a0:	781b      	ldrb	r3, [r3, #0]
   101a2:	2bff      	cmp	r3, #255	; 0xff
   101a4:	d105      	bne.n	101b2 <send_radIR+0x786>
   101a6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   101aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101ae:	2200      	movs	r2, #0
   101b0:	701a      	strb	r2, [r3, #0]
   101b2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   101b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101ba:	781b      	ldrb	r3, [r3, #0]
   101bc:	461a      	mov	r2, r3
   101be:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
   101c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101c6:	78d9      	ldrb	r1, [r3, #3]
   101c8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   101cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101d0:	5499      	strb	r1, [r3, r2]
   101d2:	4b45      	ldr	r3, [pc, #276]	; (102e8 <send_radIR+0x8bc>)
   101d4:	781a      	ldrb	r2, [r3, #0]
   101d6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   101da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101de:	781b      	ldrb	r3, [r3, #0]
   101e0:	4413      	add	r3, r2
   101e2:	b2da      	uxtb	r2, r3
   101e4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   101e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101ec:	701a      	strb	r2, [r3, #0]
   101ee:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   101f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101f6:	781a      	ldrb	r2, [r3, #0]
   101f8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   101fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10200:	781b      	ldrb	r3, [r3, #0]
   10202:	4413      	add	r3, r2
   10204:	b2da      	uxtb	r2, r3
   10206:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   1020a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1020e:	701a      	strb	r2, [r3, #0]
   10210:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10214:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10218:	781b      	ldrb	r3, [r3, #0]
   1021a:	3301      	adds	r3, #1
   1021c:	b2da      	uxtb	r2, r3
   1021e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10222:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10226:	701a      	strb	r2, [r3, #0]
   10228:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1022c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10230:	781b      	ldrb	r3, [r3, #0]
   10232:	2bff      	cmp	r3, #255	; 0xff
   10234:	d105      	bne.n	10242 <send_radIR+0x816>
   10236:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1023a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1023e:	2200      	movs	r2, #0
   10240:	701a      	strb	r2, [r3, #0]
   10242:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10246:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1024a:	781b      	ldrb	r3, [r3, #0]
   1024c:	461a      	mov	r2, r3
   1024e:	f240 2386 	movw	r3, #646	; 0x286
   10252:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10256:	7819      	ldrb	r1, [r3, #0]
   10258:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   1025c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10260:	5499      	strb	r1, [r3, r2]
   10262:	f240 2386 	movw	r3, #646	; 0x286
   10266:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1026a:	781a      	ldrb	r2, [r3, #0]
   1026c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10270:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10274:	781b      	ldrb	r3, [r3, #0]
   10276:	4413      	add	r3, r2
   10278:	b2da      	uxtb	r2, r3
   1027a:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   1027e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10282:	701a      	strb	r2, [r3, #0]
   10284:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   10288:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1028c:	781a      	ldrb	r2, [r3, #0]
   1028e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10292:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10296:	781b      	ldrb	r3, [r3, #0]
   10298:	4413      	add	r3, r2
   1029a:	b2da      	uxtb	r2, r3
   1029c:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   102a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102a4:	701a      	strb	r2, [r3, #0]
   102a6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   102aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102ae:	781b      	ldrb	r3, [r3, #0]
   102b0:	3301      	adds	r3, #1
   102b2:	b2da      	uxtb	r2, r3
   102b4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   102b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102bc:	701a      	strb	r2, [r3, #0]
   102be:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   102c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102c6:	781b      	ldrb	r3, [r3, #0]
   102c8:	2bff      	cmp	r3, #255	; 0xff
   102ca:	d10f      	bne.n	102ec <send_radIR+0x8c0>
   102cc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   102d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102d4:	2200      	movs	r2, #0
   102d6:	701a      	strb	r2, [r3, #0]
   102d8:	e008      	b.n	102ec <send_radIR+0x8c0>
   102da:	bf00      	nop
   102dc:	2000b0af 	.word	0x2000b0af
   102e0:	2000b0a5 	.word	0x2000b0a5
   102e4:	2000b0a6 	.word	0x2000b0a6
   102e8:	2000b0a7 	.word	0x2000b0a7
   102ec:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   102f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102f4:	781b      	ldrb	r3, [r3, #0]
   102f6:	461a      	mov	r2, r3
   102f8:	f240 2386 	movw	r3, #646	; 0x286
   102fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10300:	7859      	ldrb	r1, [r3, #1]
   10302:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   10306:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1030a:	5499      	strb	r1, [r3, r2]
   1030c:	4bc2      	ldr	r3, [pc, #776]	; (10618 <send_radIR+0xbec>)
   1030e:	781a      	ldrb	r2, [r3, #0]
   10310:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10314:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10318:	781b      	ldrb	r3, [r3, #0]
   1031a:	4413      	add	r3, r2
   1031c:	b2da      	uxtb	r2, r3
   1031e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10322:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10326:	701a      	strb	r2, [r3, #0]
   10328:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   1032c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10330:	781a      	ldrb	r2, [r3, #0]
   10332:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10336:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1033a:	781b      	ldrb	r3, [r3, #0]
   1033c:	4413      	add	r3, r2
   1033e:	b2da      	uxtb	r2, r3
   10340:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   10344:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10348:	701a      	strb	r2, [r3, #0]
   1034a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1034e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10352:	781b      	ldrb	r3, [r3, #0]
   10354:	3301      	adds	r3, #1
   10356:	b2da      	uxtb	r2, r3
   10358:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1035c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10360:	701a      	strb	r2, [r3, #0]
   10362:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10366:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1036a:	781b      	ldrb	r3, [r3, #0]
   1036c:	2bff      	cmp	r3, #255	; 0xff
   1036e:	d105      	bne.n	1037c <send_radIR+0x950>
   10370:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10374:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10378:	2200      	movs	r2, #0
   1037a:	701a      	strb	r2, [r3, #0]
   1037c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10380:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10384:	781b      	ldrb	r3, [r3, #0]
   10386:	461a      	mov	r2, r3
   10388:	f240 2388 	movw	r3, #648	; 0x288
   1038c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10390:	7819      	ldrb	r1, [r3, #0]
   10392:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   10396:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1039a:	5499      	strb	r1, [r3, r2]
   1039c:	f240 2388 	movw	r3, #648	; 0x288
   103a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103a4:	781a      	ldrb	r2, [r3, #0]
   103a6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   103aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103ae:	781b      	ldrb	r3, [r3, #0]
   103b0:	4413      	add	r3, r2
   103b2:	b2da      	uxtb	r2, r3
   103b4:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   103b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103bc:	701a      	strb	r2, [r3, #0]
   103be:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   103c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103c6:	781a      	ldrb	r2, [r3, #0]
   103c8:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   103cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103d0:	781b      	ldrb	r3, [r3, #0]
   103d2:	4413      	add	r3, r2
   103d4:	b2da      	uxtb	r2, r3
   103d6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   103da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103de:	701a      	strb	r2, [r3, #0]
   103e0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   103e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103e8:	781b      	ldrb	r3, [r3, #0]
   103ea:	3301      	adds	r3, #1
   103ec:	b2da      	uxtb	r2, r3
   103ee:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   103f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103f6:	701a      	strb	r2, [r3, #0]
   103f8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   103fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10400:	781b      	ldrb	r3, [r3, #0]
   10402:	2bff      	cmp	r3, #255	; 0xff
   10404:	d105      	bne.n	10412 <send_radIR+0x9e6>
   10406:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1040a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1040e:	2200      	movs	r2, #0
   10410:	701a      	strb	r2, [r3, #0]
   10412:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10416:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1041a:	781b      	ldrb	r3, [r3, #0]
   1041c:	461a      	mov	r2, r3
   1041e:	f240 2388 	movw	r3, #648	; 0x288
   10422:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10426:	7859      	ldrb	r1, [r3, #1]
   10428:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   1042c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10430:	5499      	strb	r1, [r3, r2]
   10432:	4b7a      	ldr	r3, [pc, #488]	; (1061c <send_radIR+0xbf0>)
   10434:	781a      	ldrb	r2, [r3, #0]
   10436:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   1043a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1043e:	781b      	ldrb	r3, [r3, #0]
   10440:	4413      	add	r3, r2
   10442:	b2da      	uxtb	r2, r3
   10444:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10448:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1044c:	701a      	strb	r2, [r3, #0]
   1044e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   10452:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10456:	781a      	ldrb	r2, [r3, #0]
   10458:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   1045c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10460:	781b      	ldrb	r3, [r3, #0]
   10462:	4413      	add	r3, r2
   10464:	b2da      	uxtb	r2, r3
   10466:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   1046a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1046e:	701a      	strb	r2, [r3, #0]
   10470:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10474:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10478:	781b      	ldrb	r3, [r3, #0]
   1047a:	3301      	adds	r3, #1
   1047c:	b2da      	uxtb	r2, r3
   1047e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10482:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10486:	701a      	strb	r2, [r3, #0]
   10488:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1048c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10490:	781b      	ldrb	r3, [r3, #0]
   10492:	2bff      	cmp	r3, #255	; 0xff
   10494:	d105      	bne.n	104a2 <send_radIR+0xa76>
   10496:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1049a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1049e:	2200      	movs	r2, #0
   104a0:	701a      	strb	r2, [r3, #0]
   104a2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   104a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104aa:	781b      	ldrb	r3, [r3, #0]
   104ac:	461a      	mov	r2, r3
   104ae:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   104b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104b6:	7819      	ldrb	r1, [r3, #0]
   104b8:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   104bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104c0:	5499      	strb	r1, [r3, r2]
   104c2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   104c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104ca:	781b      	ldrb	r3, [r3, #0]
   104cc:	3301      	adds	r3, #1
   104ce:	b2da      	uxtb	r2, r3
   104d0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   104d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104d8:	701a      	strb	r2, [r3, #0]
   104da:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   104de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104e2:	781b      	ldrb	r3, [r3, #0]
   104e4:	2bff      	cmp	r3, #255	; 0xff
   104e6:	d105      	bne.n	104f4 <send_radIR+0xac8>
   104e8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   104ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104f0:	2200      	movs	r2, #0
   104f2:	701a      	strb	r2, [r3, #0]
   104f4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   104f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104fc:	781b      	ldrb	r3, [r3, #0]
   104fe:	461a      	mov	r2, r3
   10500:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   10504:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10508:	7819      	ldrb	r1, [r3, #0]
   1050a:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   1050e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10512:	5499      	strb	r1, [r3, r2]
   10514:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10518:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1051c:	781b      	ldrb	r3, [r3, #0]
   1051e:	3301      	adds	r3, #1
   10520:	b2da      	uxtb	r2, r3
   10522:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10526:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1052a:	701a      	strb	r2, [r3, #0]
   1052c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10530:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10534:	781b      	ldrb	r3, [r3, #0]
   10536:	2bff      	cmp	r3, #255	; 0xff
   10538:	d105      	bne.n	10546 <send_radIR+0xb1a>
   1053a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1053e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10542:	2200      	movs	r2, #0
   10544:	701a      	strb	r2, [r3, #0]
   10546:	f242 0339 	movw	r3, #8249	; 0x2039
   1054a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1054e:	781b      	ldrb	r3, [r3, #0]
   10550:	b2db      	uxtb	r3, r3
   10552:	f003 0310 	and.w	r3, r3, #16
   10556:	2b00      	cmp	r3, #0
   10558:	d15a      	bne.n	10610 <send_radIR+0xbe4>
   1055a:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   1055e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10562:	781b      	ldrb	r3, [r3, #0]
   10564:	b2db      	uxtb	r3, r3
   10566:	461a      	mov	r2, r3
   10568:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   1056c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10570:	5c9a      	ldrb	r2, [r3, r2]
   10572:	f64a 33b3 	movw	r3, #43955	; 0xabb3
   10576:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1057a:	701a      	strb	r2, [r3, #0]
   1057c:	f64a 33b4 	movw	r3, #43956	; 0xabb4
   10580:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10584:	2200      	movs	r2, #0
   10586:	701a      	strb	r2, [r3, #0]
   10588:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   1058c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10590:	781b      	ldrb	r3, [r3, #0]
   10592:	b2db      	uxtb	r3, r3
   10594:	3301      	adds	r3, #1
   10596:	b2da      	uxtb	r2, r3
   10598:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   1059c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105a0:	701a      	strb	r2, [r3, #0]
   105a2:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   105a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105aa:	781b      	ldrb	r3, [r3, #0]
   105ac:	b2db      	uxtb	r3, r3
   105ae:	2bff      	cmp	r3, #255	; 0xff
   105b0:	d105      	bne.n	105be <send_radIR+0xb92>
   105b2:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   105b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105ba:	2200      	movs	r2, #0
   105bc:	701a      	strb	r2, [r3, #0]
   105be:	f242 0338 	movw	r3, #8248	; 0x2038
   105c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105c6:	f242 0238 	movw	r2, #8248	; 0x2038
   105ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
   105ce:	7812      	ldrb	r2, [r2, #0]
   105d0:	b2d2      	uxtb	r2, r2
   105d2:	f042 0201 	orr.w	r2, r2, #1
   105d6:	b2d2      	uxtb	r2, r2
   105d8:	701a      	strb	r2, [r3, #0]
   105da:	f242 0339 	movw	r3, #8249	; 0x2039
   105de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105e2:	f242 0239 	movw	r2, #8249	; 0x2039
   105e6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   105ea:	7812      	ldrb	r2, [r2, #0]
   105ec:	b2d2      	uxtb	r2, r2
   105ee:	f042 0210 	orr.w	r2, r2, #16
   105f2:	b2d2      	uxtb	r2, r2
   105f4:	701a      	strb	r2, [r3, #0]
   105f6:	e00b      	b.n	10610 <send_radIR+0xbe4>
   105f8:	f64a 23b0 	movw	r3, #43696	; 0xaab0
   105fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10600:	781b      	ldrb	r3, [r3, #0]
   10602:	3301      	adds	r3, #1
   10604:	b2da      	uxtb	r2, r3
   10606:	f64a 23b0 	movw	r3, #43696	; 0xaab0
   1060a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1060e:	701a      	strb	r2, [r3, #0]
}
   10610:	46bd      	mov	sp, r7
   10612:	f85d 7b04 	ldr.w	r7, [sp], #4
   10616:	4770      	bx	lr
   10618:	20000287 	.word	0x20000287
   1061c:	20000289 	.word	0x20000289

00010620 <send_takeOff>:

void send_takeOff(void){
   10620:	b580      	push	{r7, lr}
   10622:	af00      	add	r7, sp, #0
  if (gps_pos_available){
   10624:	f64a 4346 	movw	r3, #44102	; 0xac46
   10628:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1062c:	781b      	ldrb	r3, [r3, #0]
   1062e:	2b00      	cmp	r3, #0
   10630:	f000 8200 	beq.w	10a34 <send_takeOff+0x414>
     if (!estimator_flight_time && (estimator_hspeed_mod > MIN_SPEED_FOR_TAKEOFF)) {
   10634:	f24b 0394 	movw	r3, #45204	; 0xb094
   10638:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1063c:	881b      	ldrh	r3, [r3, #0]
   1063e:	2b00      	cmp	r3, #0
   10640:	f040 81f2 	bne.w	10a28 <send_takeOff+0x408>
   10644:	f24b 039c 	movw	r3, #45212	; 0xb09c
   10648:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1064c:	681b      	ldr	r3, [r3, #0]
   1064e:	4618      	mov	r0, r3
   10650:	f04f 0100 	mov.w	r1, #0
   10654:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   10658:	f007 fffa 	bl	18650 <__aeabi_fcmpgt>
   1065c:	4603      	mov	r3, r0
   1065e:	2b00      	cmp	r3, #0
   10660:	f000 81e2 	beq.w	10a28 <send_takeOff+0x408>
        estimator_flight_time = 1;
   10664:	f24b 0394 	movw	r3, #45204	; 0xb094
   10668:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1066c:	2201      	movs	r2, #1
   1066e:	801a      	strh	r2, [r3, #0]
        launch = TRUE; /* Not set in non auto launch */
   10670:	f64a 23a8 	movw	r3, #43688	; 0xaaa8
   10674:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10678:	2201      	movs	r2, #1
   1067a:	701a      	strb	r2, [r3, #0]
        DOWNLINK_SEND_TAKEOFF(&cputime);
   1067c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10680:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10684:	781a      	ldrb	r2, [r3, #0]
   10686:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   1068a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1068e:	781b      	ldrb	r3, [r3, #0]
   10690:	b2db      	uxtb	r3, r3
   10692:	429a      	cmp	r2, r3
   10694:	d313      	bcc.n	106be <send_takeOff+0x9e>
   10696:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   1069a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1069e:	781b      	ldrb	r3, [r3, #0]
   106a0:	b2db      	uxtb	r3, r3
   106a2:	461a      	mov	r2, r3
   106a4:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   106a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106ac:	781b      	ldrb	r3, [r3, #0]
   106ae:	1ad3      	subs	r3, r2, r3
   106b0:	33ff      	adds	r3, #255	; 0xff
   106b2:	2b06      	cmp	r3, #6
   106b4:	bfd4      	ite	le
   106b6:	2300      	movle	r3, #0
   106b8:	2301      	movgt	r3, #1
   106ba:	b2db      	uxtb	r3, r3
   106bc:	e011      	b.n	106e2 <send_takeOff+0xc2>
   106be:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   106c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106c6:	781b      	ldrb	r3, [r3, #0]
   106c8:	b2db      	uxtb	r3, r3
   106ca:	461a      	mov	r2, r3
   106cc:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   106d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106d4:	781b      	ldrb	r3, [r3, #0]
   106d6:	1ad3      	subs	r3, r2, r3
   106d8:	2b06      	cmp	r3, #6
   106da:	bfd4      	ite	le
   106dc:	2300      	movle	r3, #0
   106de:	2301      	movgt	r3, #1
   106e0:	b2db      	uxtb	r3, r3
   106e2:	2b00      	cmp	r3, #0
   106e4:	f000 8194 	beq.w	10a10 <send_takeOff+0x3f0>
   106e8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   106ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106f0:	781b      	ldrb	r3, [r3, #0]
   106f2:	461a      	mov	r2, r3
   106f4:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   106f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106fc:	2105      	movs	r1, #5
   106fe:	5499      	strb	r1, [r3, r2]
   10700:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10704:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10708:	781b      	ldrb	r3, [r3, #0]
   1070a:	3301      	adds	r3, #1
   1070c:	b2da      	uxtb	r2, r3
   1070e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10712:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10716:	701a      	strb	r2, [r3, #0]
   10718:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1071c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10720:	781b      	ldrb	r3, [r3, #0]
   10722:	2bff      	cmp	r3, #255	; 0xff
   10724:	d105      	bne.n	10732 <send_takeOff+0x112>
   10726:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1072a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1072e:	2200      	movs	r2, #0
   10730:	701a      	strb	r2, [r3, #0]
   10732:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10736:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1073a:	781b      	ldrb	r3, [r3, #0]
   1073c:	461a      	mov	r2, r3
   1073e:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   10742:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10746:	2104      	movs	r1, #4
   10748:	5499      	strb	r1, [r3, r2]
   1074a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1074e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10752:	781b      	ldrb	r3, [r3, #0]
   10754:	3301      	adds	r3, #1
   10756:	b2da      	uxtb	r2, r3
   10758:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1075c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10760:	701a      	strb	r2, [r3, #0]
   10762:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10766:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1076a:	781b      	ldrb	r3, [r3, #0]
   1076c:	2bff      	cmp	r3, #255	; 0xff
   1076e:	d105      	bne.n	1077c <send_takeOff+0x15c>
   10770:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10774:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10778:	2200      	movs	r2, #0
   1077a:	701a      	strb	r2, [r3, #0]
   1077c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10780:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10784:	2204      	movs	r2, #4
   10786:	701a      	strb	r2, [r3, #0]
   10788:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   1078c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10790:	2204      	movs	r2, #4
   10792:	701a      	strb	r2, [r3, #0]
   10794:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10798:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1079c:	781b      	ldrb	r3, [r3, #0]
   1079e:	461a      	mov	r2, r3
   107a0:	f64a 2392 	movw	r3, #43666	; 0xaa92
   107a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107a8:	7819      	ldrb	r1, [r3, #0]
   107aa:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   107ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107b2:	5499      	strb	r1, [r3, r2]
   107b4:	f64a 2392 	movw	r3, #43666	; 0xaa92
   107b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107bc:	781a      	ldrb	r2, [r3, #0]
   107be:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   107c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107c6:	781b      	ldrb	r3, [r3, #0]
   107c8:	4413      	add	r3, r2
   107ca:	b2da      	uxtb	r2, r3
   107cc:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   107d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107d4:	701a      	strb	r2, [r3, #0]
   107d6:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   107da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107de:	781a      	ldrb	r2, [r3, #0]
   107e0:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   107e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107e8:	781b      	ldrb	r3, [r3, #0]
   107ea:	4413      	add	r3, r2
   107ec:	b2da      	uxtb	r2, r3
   107ee:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   107f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107f6:	701a      	strb	r2, [r3, #0]
   107f8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   107fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10800:	781b      	ldrb	r3, [r3, #0]
   10802:	3301      	adds	r3, #1
   10804:	b2da      	uxtb	r2, r3
   10806:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1080a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1080e:	701a      	strb	r2, [r3, #0]
   10810:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10814:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10818:	781b      	ldrb	r3, [r3, #0]
   1081a:	2bff      	cmp	r3, #255	; 0xff
   1081c:	d105      	bne.n	1082a <send_takeOff+0x20a>
   1081e:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10822:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10826:	2200      	movs	r2, #0
   10828:	701a      	strb	r2, [r3, #0]
   1082a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1082e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10832:	781b      	ldrb	r3, [r3, #0]
   10834:	461a      	mov	r2, r3
   10836:	f64a 2392 	movw	r3, #43666	; 0xaa92
   1083a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1083e:	7859      	ldrb	r1, [r3, #1]
   10840:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   10844:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10848:	5499      	strb	r1, [r3, r2]
   1084a:	4b7b      	ldr	r3, [pc, #492]	; (10a38 <send_takeOff+0x418>)
   1084c:	781a      	ldrb	r2, [r3, #0]
   1084e:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10852:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10856:	781b      	ldrb	r3, [r3, #0]
   10858:	4413      	add	r3, r2
   1085a:	b2da      	uxtb	r2, r3
   1085c:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10860:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10864:	701a      	strb	r2, [r3, #0]
   10866:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   1086a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1086e:	781a      	ldrb	r2, [r3, #0]
   10870:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   10874:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10878:	781b      	ldrb	r3, [r3, #0]
   1087a:	4413      	add	r3, r2
   1087c:	b2da      	uxtb	r2, r3
   1087e:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   10882:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10886:	701a      	strb	r2, [r3, #0]
   10888:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1088c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10890:	781b      	ldrb	r3, [r3, #0]
   10892:	3301      	adds	r3, #1
   10894:	b2da      	uxtb	r2, r3
   10896:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1089a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1089e:	701a      	strb	r2, [r3, #0]
   108a0:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   108a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108a8:	781b      	ldrb	r3, [r3, #0]
   108aa:	2bff      	cmp	r3, #255	; 0xff
   108ac:	d105      	bne.n	108ba <send_takeOff+0x29a>
   108ae:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   108b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108b6:	2200      	movs	r2, #0
   108b8:	701a      	strb	r2, [r3, #0]
   108ba:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   108be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108c2:	781b      	ldrb	r3, [r3, #0]
   108c4:	461a      	mov	r2, r3
   108c6:	f64a 33b5 	movw	r3, #43957	; 0xabb5
   108ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108ce:	7819      	ldrb	r1, [r3, #0]
   108d0:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   108d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108d8:	5499      	strb	r1, [r3, r2]
   108da:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   108de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108e2:	781b      	ldrb	r3, [r3, #0]
   108e4:	3301      	adds	r3, #1
   108e6:	b2da      	uxtb	r2, r3
   108e8:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   108ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108f0:	701a      	strb	r2, [r3, #0]
   108f2:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   108f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108fa:	781b      	ldrb	r3, [r3, #0]
   108fc:	2bff      	cmp	r3, #255	; 0xff
   108fe:	d105      	bne.n	1090c <send_takeOff+0x2ec>
   10900:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10904:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10908:	2200      	movs	r2, #0
   1090a:	701a      	strb	r2, [r3, #0]
   1090c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10910:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10914:	781b      	ldrb	r3, [r3, #0]
   10916:	461a      	mov	r2, r3
   10918:	f64a 33b6 	movw	r3, #43958	; 0xabb6
   1091c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10920:	7819      	ldrb	r1, [r3, #0]
   10922:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   10926:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1092a:	5499      	strb	r1, [r3, r2]
   1092c:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10930:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10934:	781b      	ldrb	r3, [r3, #0]
   10936:	3301      	adds	r3, #1
   10938:	b2da      	uxtb	r2, r3
   1093a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   1093e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10942:	701a      	strb	r2, [r3, #0]
   10944:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10948:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1094c:	781b      	ldrb	r3, [r3, #0]
   1094e:	2bff      	cmp	r3, #255	; 0xff
   10950:	d105      	bne.n	1095e <send_takeOff+0x33e>
   10952:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10956:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1095a:	2200      	movs	r2, #0
   1095c:	701a      	strb	r2, [r3, #0]
   1095e:	f242 0339 	movw	r3, #8249	; 0x2039
   10962:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10966:	781b      	ldrb	r3, [r3, #0]
   10968:	b2db      	uxtb	r3, r3
   1096a:	f003 0310 	and.w	r3, r3, #16
   1096e:	2b00      	cmp	r3, #0
   10970:	d15a      	bne.n	10a28 <send_takeOff+0x408>
   10972:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   10976:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1097a:	781b      	ldrb	r3, [r3, #0]
   1097c:	b2db      	uxtb	r3, r3
   1097e:	461a      	mov	r2, r3
   10980:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   10984:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10988:	5c9a      	ldrb	r2, [r3, r2]
   1098a:	f64a 33b3 	movw	r3, #43955	; 0xabb3
   1098e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10992:	701a      	strb	r2, [r3, #0]
   10994:	f64a 33b4 	movw	r3, #43956	; 0xabb4
   10998:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1099c:	2200      	movs	r2, #0
   1099e:	701a      	strb	r2, [r3, #0]
   109a0:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   109a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109a8:	781b      	ldrb	r3, [r3, #0]
   109aa:	b2db      	uxtb	r3, r3
   109ac:	3301      	adds	r3, #1
   109ae:	b2da      	uxtb	r2, r3
   109b0:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   109b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109b8:	701a      	strb	r2, [r3, #0]
   109ba:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   109be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109c2:	781b      	ldrb	r3, [r3, #0]
   109c4:	b2db      	uxtb	r3, r3
   109c6:	2bff      	cmp	r3, #255	; 0xff
   109c8:	d105      	bne.n	109d6 <send_takeOff+0x3b6>
   109ca:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   109ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109d2:	2200      	movs	r2, #0
   109d4:	701a      	strb	r2, [r3, #0]
   109d6:	f242 0338 	movw	r3, #8248	; 0x2038
   109da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109de:	f242 0238 	movw	r2, #8248	; 0x2038
   109e2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   109e6:	7812      	ldrb	r2, [r2, #0]
   109e8:	b2d2      	uxtb	r2, r2
   109ea:	f042 0201 	orr.w	r2, r2, #1
   109ee:	b2d2      	uxtb	r2, r2
   109f0:	701a      	strb	r2, [r3, #0]
   109f2:	f242 0339 	movw	r3, #8249	; 0x2039
   109f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109fa:	f242 0239 	movw	r2, #8249	; 0x2039
   109fe:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10a02:	7812      	ldrb	r2, [r2, #0]
   10a04:	b2d2      	uxtb	r2, r2
   10a06:	f042 0210 	orr.w	r2, r2, #16
   10a0a:	b2d2      	uxtb	r2, r2
   10a0c:	701a      	strb	r2, [r3, #0]
   10a0e:	e00b      	b.n	10a28 <send_takeOff+0x408>
   10a10:	f64a 23b0 	movw	r3, #43696	; 0xaab0
   10a14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a18:	781b      	ldrb	r3, [r3, #0]
   10a1a:	3301      	adds	r3, #1
   10a1c:	b2da      	uxtb	r2, r3
   10a1e:	f64a 23b0 	movw	r3, #43696	; 0xaab0
   10a22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a26:	701a      	strb	r2, [r3, #0]
     }
     gps_pos_available = FALSE; 
   10a28:	f64a 4346 	movw	r3, #44102	; 0xac46
   10a2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a30:	2200      	movs	r2, #0
   10a32:	701a      	strb	r2, [r3, #0]
  }
  //vPrintString("S_16 receive_gps_data_task end!\n\r");
}
   10a34:	bd80      	pop	{r7, pc}
   10a36:	bf00      	nop
   10a38:	2000aa93 	.word	0x2000aa93
   10a3c:	f3af 8000 	nop.w

00010a40 <modem_init>:
uint8_t    tx_byte;
uint8_t    tx_byte_idx;

uint8_t ck_a, ck_b;

void modem_init( void ) {
   10a40:	b480      	push	{r7}
   10a42:	af00      	add	r7, sp, #0
  /* 
     on >= V1.2 boards, 4MHz modem clock is generated
     by one PWM module.
  */
#if defined CTL_BRD_V1_2 || defined CTL_BRD_V1_2_1
  MODEM_OSC_DDR |= _BV(MODEM_OSC);
   10a44:	f242 0317 	movw	r3, #8215	; 0x2017
   10a48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a4c:	f242 0217 	movw	r2, #8215	; 0x2017
   10a50:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10a54:	7812      	ldrb	r2, [r2, #0]
   10a56:	b2d2      	uxtb	r2, r2
   10a58:	f042 0210 	orr.w	r2, r2, #16
   10a5c:	b2d2      	uxtb	r2, r2
   10a5e:	701a      	strb	r2, [r3, #0]
  OCR0 = 1; /* 4MhZ */
   10a60:	f242 0331 	movw	r3, #8241	; 0x2031
   10a64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a68:	2201      	movs	r2, #1
   10a6a:	701a      	strb	r2, [r3, #0]
  TCCR0 = _BV(WGM01) | _BV(COM00) | _BV(CS00);
   10a6c:	f242 0333 	movw	r3, #8243	; 0x2033
   10a70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a74:	2219      	movs	r2, #25
   10a76:	701a      	strb	r2, [r3, #0]
#endif

  /* setup TX_EN and TX_DATA pin as output */
  MODEM_TX_DDR |= _BV(MODEM_TX_EN) | _BV(MODEM_TX_DATA);
   10a78:	f242 0311 	movw	r3, #8209	; 0x2011
   10a7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a80:	f242 0211 	movw	r2, #8209	; 0x2011
   10a84:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10a88:	7812      	ldrb	r2, [r2, #0]
   10a8a:	b2d2      	uxtb	r2, r2
   10a8c:	f062 023f 	orn	r2, r2, #63	; 0x3f
   10a90:	b2d2      	uxtb	r2, r2
   10a92:	701a      	strb	r2, [r3, #0]
  /* data idles hight */
  sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10a94:	f242 0312 	movw	r3, #8210	; 0x2012
   10a98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a9c:	f242 0212 	movw	r2, #8210	; 0x2012
   10aa0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10aa4:	7812      	ldrb	r2, [r2, #0]
   10aa6:	b2d2      	uxtb	r2, r2
   10aa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10aac:	b2d2      	uxtb	r2, r2
   10aae:	701a      	strb	r2, [r3, #0]
  /* enable transmitter */
  cbi(MODEM_TX_PORT, MODEM_TX_EN);
   10ab0:	f242 0312 	movw	r3, #8210	; 0x2012
   10ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ab8:	f242 0212 	movw	r2, #8210	; 0x2012
   10abc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ac0:	7812      	ldrb	r2, [r2, #0]
   10ac2:	b2d2      	uxtb	r2, r2
   10ac4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   10ac8:	b2d2      	uxtb	r2, r2
   10aca:	701a      	strb	r2, [r3, #0]
  /* set interrupt on failing edge of clock */
  MODEM_CLK_INT_REG |=  MODEM_CLK_INT_CFG;
   10acc:	f242 033a 	movw	r3, #8250	; 0x203a
   10ad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ad4:	f242 023a 	movw	r2, #8250	; 0x203a
   10ad8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10adc:	7812      	ldrb	r2, [r2, #0]
   10ade:	b2d2      	uxtb	r2, r2
   10ae0:	f042 0202 	orr.w	r2, r2, #2
   10ae4:	b2d2      	uxtb	r2, r2
   10ae6:	701a      	strb	r2, [r3, #0]
}
   10ae8:	46bd      	mov	sp, r7
   10aea:	f85d 7b04 	ldr.w	r7, [sp], #4
   10aee:	4770      	bx	lr

00010af0 <__vector_5>:

SIGNAL( MODEM_CLK_INT_SIG ) {
   10af0:	b480      	push	{r7}
   10af2:	af00      	add	r7, sp, #0
  /*  start bit         */
  if (tx_byte_idx == 0)
   10af4:	f64a 33b4 	movw	r3, #43956	; 0xabb4
   10af8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10afc:	781b      	ldrb	r3, [r3, #0]
   10afe:	2b00      	cmp	r3, #0
   10b00:	d10e      	bne.n	10b20 <__vector_5+0x30>
    cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10b02:	f242 0312 	movw	r3, #8210	; 0x2012
   10b06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b0a:	f242 0212 	movw	r2, #8210	; 0x2012
   10b0e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10b12:	7812      	ldrb	r2, [r2, #0]
   10b14:	b2d2      	uxtb	r2, r2
   10b16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   10b1a:	b2d2      	uxtb	r2, r2
   10b1c:	701a      	strb	r2, [r3, #0]
   10b1e:	e047      	b.n	10bb0 <__vector_5+0xc0>
  /* 8 data bits        */ 
  else if (tx_byte_idx < 9) {
   10b20:	f64a 33b4 	movw	r3, #43956	; 0xabb4
   10b24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b28:	781b      	ldrb	r3, [r3, #0]
   10b2a:	2b08      	cmp	r3, #8
   10b2c:	d832      	bhi.n	10b94 <__vector_5+0xa4>
    if (tx_byte & 0x01)
   10b2e:	f64a 33b3 	movw	r3, #43955	; 0xabb3
   10b32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b36:	781b      	ldrb	r3, [r3, #0]
   10b38:	f003 0301 	and.w	r3, r3, #1
   10b3c:	2b00      	cmp	r3, #0
   10b3e:	d00e      	beq.n	10b5e <__vector_5+0x6e>
      sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10b40:	f242 0312 	movw	r3, #8210	; 0x2012
   10b44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b48:	f242 0212 	movw	r2, #8210	; 0x2012
   10b4c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10b50:	7812      	ldrb	r2, [r2, #0]
   10b52:	b2d2      	uxtb	r2, r2
   10b54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10b58:	b2d2      	uxtb	r2, r2
   10b5a:	701a      	strb	r2, [r3, #0]
   10b5c:	e00d      	b.n	10b7a <__vector_5+0x8a>
    else
      cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10b5e:	f242 0312 	movw	r3, #8210	; 0x2012
   10b62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b66:	f242 0212 	movw	r2, #8210	; 0x2012
   10b6a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10b6e:	7812      	ldrb	r2, [r2, #0]
   10b70:	b2d2      	uxtb	r2, r2
   10b72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   10b76:	b2d2      	uxtb	r2, r2
   10b78:	701a      	strb	r2, [r3, #0]
    tx_byte >>= 1;
   10b7a:	f64a 33b3 	movw	r3, #43955	; 0xabb3
   10b7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b82:	781b      	ldrb	r3, [r3, #0]
   10b84:	085b      	lsrs	r3, r3, #1
   10b86:	b2da      	uxtb	r2, r3
   10b88:	f64a 33b3 	movw	r3, #43955	; 0xabb3
   10b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b90:	701a      	strb	r2, [r3, #0]
   10b92:	e00d      	b.n	10bb0 <__vector_5+0xc0>
  }
  /* stop_bit           */
  else {
    sbi(MODEM_TX_PORT, MODEM_TX_DATA); 
   10b94:	f242 0312 	movw	r3, #8210	; 0x2012
   10b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b9c:	f242 0212 	movw	r2, #8210	; 0x2012
   10ba0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ba4:	7812      	ldrb	r2, [r2, #0]
   10ba6:	b2d2      	uxtb	r2, r2
   10ba8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10bac:	b2d2      	uxtb	r2, r2
   10bae:	701a      	strb	r2, [r3, #0]
  }
  tx_byte_idx++;
   10bb0:	f64a 33b4 	movw	r3, #43956	; 0xabb4
   10bb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bb8:	781b      	ldrb	r3, [r3, #0]
   10bba:	3301      	adds	r3, #1
   10bbc:	b2da      	uxtb	r2, r3
   10bbe:	f64a 33b4 	movw	r3, #43956	; 0xabb4
   10bc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bc6:	701a      	strb	r2, [r3, #0]
  /* next byte          */
  if (tx_byte_idx >= 10) {
   10bc8:	f64a 33b4 	movw	r3, #43956	; 0xabb4
   10bcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bd0:	781b      	ldrb	r3, [r3, #0]
   10bd2:	2b09      	cmp	r3, #9
   10bd4:	d94d      	bls.n	10c72 <__vector_5+0x182>
    /*  if we have nothing left to transmit */
    if( tx_head == tx_tail ) {
   10bd6:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   10bda:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bde:	781a      	ldrb	r2, [r3, #0]
   10be0:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   10be4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10be8:	781b      	ldrb	r3, [r3, #0]
   10bea:	b2db      	uxtb	r3, r3
   10bec:	429a      	cmp	r2, r3
   10bee:	d10e      	bne.n	10c0e <__vector_5+0x11e>
      /* disable clock interrupt            */
      cbi( EIMSK, MODEM_CLK_INT );
   10bf0:	f242 0339 	movw	r3, #8249	; 0x2039
   10bf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bf8:	f242 0239 	movw	r2, #8249	; 0x2039
   10bfc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10c00:	7812      	ldrb	r2, [r2, #0]
   10c02:	b2d2      	uxtb	r2, r2
   10c04:	f022 0210 	bic.w	r2, r2, #16
   10c08:	b2d2      	uxtb	r2, r2
   10c0a:	701a      	strb	r2, [r3, #0]
   10c0c:	e031      	b.n	10c72 <__vector_5+0x182>
    } else {
      /* else load next byte                  */
      MODEM_LOAD_NEXT_BYTE();  
   10c0e:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   10c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c16:	781b      	ldrb	r3, [r3, #0]
   10c18:	b2db      	uxtb	r3, r3
   10c1a:	461a      	mov	r2, r3
   10c1c:	f64a 23b4 	movw	r3, #43700	; 0xaab4
   10c20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c24:	5c9a      	ldrb	r2, [r3, r2]
   10c26:	f64a 33b3 	movw	r3, #43955	; 0xabb3
   10c2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c2e:	701a      	strb	r2, [r3, #0]
   10c30:	f64a 33b4 	movw	r3, #43956	; 0xabb4
   10c34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c38:	2200      	movs	r2, #0
   10c3a:	701a      	strb	r2, [r3, #0]
   10c3c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   10c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c44:	781b      	ldrb	r3, [r3, #0]
   10c46:	b2db      	uxtb	r3, r3
   10c48:	3301      	adds	r3, #1
   10c4a:	b2da      	uxtb	r2, r3
   10c4c:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   10c50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c54:	701a      	strb	r2, [r3, #0]
   10c56:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   10c5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c5e:	781b      	ldrb	r3, [r3, #0]
   10c60:	b2db      	uxtb	r3, r3
   10c62:	2bff      	cmp	r3, #255	; 0xff
   10c64:	d105      	bne.n	10c72 <__vector_5+0x182>
   10c66:	f64a 23b2 	movw	r3, #43698	; 0xaab2
   10c6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c6e:	2200      	movs	r2, #0
   10c70:	701a      	strb	r2, [r3, #0]
    }
  }
}
   10c72:	46bd      	mov	sp, r7
   10c74:	f85d 7b04 	ldr.w	r7, [sp], #4
   10c78:	4770      	bx	lr
   10c7a:	bf00      	nop

00010c7c <link_fbw_init>:
uint8_t link_fbw_fbw_nb_err;

static uint8_t idx_buf;
static uint8_t xor_in, xor_out;

void link_fbw_init(void) {
   10c7c:	b480      	push	{r7}
   10c7e:	af00      	add	r7, sp, #0
  link_fbw_nb_err;
   10c80:	f64a 33e7 	movw	r3, #44007	; 0xabe7
   10c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c88:	781b      	ldrb	r3, [r3, #0]
  link_fbw_receive_complete = FALSE;  
   10c8a:	f240 2382 	movw	r3, #642	; 0x282
   10c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c92:	2200      	movs	r2, #0
   10c94:	701a      	strb	r2, [r3, #0]
}
   10c96:	46bd      	mov	sp, r7
   10c98:	f85d 7b04 	ldr.w	r7, [sp], #4
   10c9c:	4770      	bx	lr
   10c9e:	bf00      	nop

00010ca0 <link_fbw_send>:

void link_fbw_send(void) {
   10ca0:	b480      	push	{r7}
   10ca2:	b083      	sub	sp, #12
   10ca4:	af00      	add	r7, sp, #0
    //vPrintString("S_7 link_fbw_send start! \n\r"); //SunnyBeike

    if (spi_cur_slave != SPI_NONE) 
   10ca6:	f64a 33ec 	movw	r3, #44012	; 0xabec
   10caa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cae:	781b      	ldrb	r3, [r3, #0]
   10cb0:	b2db      	uxtb	r3, r3
   10cb2:	2b00      	cmp	r3, #0
   10cb4:	d00c      	beq.n	10cd0 <link_fbw_send+0x30>
    {
        spi_nb_ovrn++;
   10cb6:	f64a 33ed 	movw	r3, #44013	; 0xabed
   10cba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cbe:	781b      	ldrb	r3, [r3, #0]
   10cc0:	3301      	adds	r3, #1
   10cc2:	b2da      	uxtb	r2, r3
   10cc4:	f64a 33ed 	movw	r3, #44013	; 0xabed
   10cc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ccc:	701a      	strb	r2, [r3, #0]
        //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
        return;
   10cce:	e064      	b.n	10d9a <link_fbw_send+0xfa>
    }

    /* Enable SPI, Master, set clock rate fck/16 */ 
    SPI_START(_BV(SPE) | _BV(MSTR) | _BV(SPR0)); // | _BV(SPR1);
   10cd0:	f242 030d 	movw	r3, #8205	; 0x200d
   10cd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cd8:	2251      	movs	r2, #81	; 0x51
   10cda:	701a      	strb	r2, [r3, #0]
   10cdc:	f242 030e 	movw	r3, #8206	; 0x200e
   10ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ce4:	781b      	ldrb	r3, [r3, #0]
   10ce6:	b2db      	uxtb	r3, r3
   10ce8:	b2db      	uxtb	r3, r3
   10cea:	b25b      	sxtb	r3, r3
   10cec:	2b00      	cmp	r3, #0
   10cee:	da05      	bge.n	10cfc <link_fbw_send+0x5c>
   10cf0:	f242 030f 	movw	r3, #8207	; 0x200f
   10cf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cf8:	781b      	ldrb	r3, [r3, #0]
   10cfa:	71fb      	strb	r3, [r7, #7]
   10cfc:	f242 030d 	movw	r3, #8205	; 0x200d
   10d00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d04:	f242 020d 	movw	r2, #8205	; 0x200d
   10d08:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10d0c:	7812      	ldrb	r2, [r2, #0]
   10d0e:	b2d2      	uxtb	r2, r2
   10d10:	f062 027f 	orn	r2, r2, #127	; 0x7f
   10d14:	b2d2      	uxtb	r2, r2
   10d16:	701a      	strb	r2, [r3, #0]
    SPI_SELECT_SLAVE0();
   10d18:	f64a 33ec 	movw	r3, #44012	; 0xabec
   10d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d20:	2201      	movs	r2, #1
   10d22:	701a      	strb	r2, [r3, #0]
   10d24:	f242 0318 	movw	r3, #8216	; 0x2018
   10d28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d2c:	f242 0218 	movw	r2, #8216	; 0x2018
   10d30:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10d34:	7812      	ldrb	r2, [r2, #0]
   10d36:	b2d2      	uxtb	r2, r2
   10d38:	f022 0201 	bic.w	r2, r2, #1
   10d3c:	b2d2      	uxtb	r2, r2
   10d3e:	701a      	strb	r2, [r3, #0]

    idx_buf = 0;
   10d40:	f64a 33e9 	movw	r3, #44009	; 0xabe9
   10d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d48:	2200      	movs	r2, #0
   10d4a:	701a      	strb	r2, [r3, #0]
    xor_in = 0;
   10d4c:	f64a 33ea 	movw	r3, #44010	; 0xabea
   10d50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d54:	2200      	movs	r2, #0
   10d56:	701a      	strb	r2, [r3, #0]
    xor_out = ((uint8_t*)&to_fbw)[idx_buf];
   10d58:	f64a 33e9 	movw	r3, #44009	; 0xabe9
   10d5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d60:	781b      	ldrb	r3, [r3, #0]
   10d62:	461a      	mov	r2, r3
   10d64:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   10d68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d6c:	4413      	add	r3, r2
   10d6e:	781a      	ldrb	r2, [r3, #0]
   10d70:	f64a 33eb 	movw	r3, #44011	; 0xabeb
   10d74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d78:	701a      	strb	r2, [r3, #0]
    SPDR = xor_out;
   10d7a:	f242 030f 	movw	r3, #8207	; 0x200f
   10d7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d82:	f64a 32eb 	movw	r2, #44011	; 0xabeb
   10d86:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10d8a:	7812      	ldrb	r2, [r2, #0]
   10d8c:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_valid = FALSE;
   10d8e:	f64a 33e6 	movw	r3, #44006	; 0xabe6
   10d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d96:	2200      	movs	r2, #0
   10d98:	701a      	strb	r2, [r3, #0]
    // Other bytes will follow SIG_SPI interrupts
    //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
}
   10d9a:	370c      	adds	r7, #12
   10d9c:	46bd      	mov	sp, r7
   10d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
   10da2:	4770      	bx	lr

00010da4 <link_fbw_on_spi_it>:

void link_fbw_on_spi_it( void ) {
   10da4:	b480      	push	{r7}
   10da6:	af00      	add	r7, sp, #0
  /* setup OCR1A to pop in 200 clock cycles */
  /* this leaves time for the slave (fbw)   */
  /* to process the byte we've sent and to  */
  /* prepare a new one to be sent           */
  OCR1A = TCNT1 + 200;
   10da8:	f242 032a 	movw	r3, #8234	; 0x202a
   10dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10db0:	f242 022c 	movw	r2, #8236	; 0x202c
   10db4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10db8:	8812      	ldrh	r2, [r2, #0]
   10dba:	b292      	uxth	r2, r2
   10dbc:	32c8      	adds	r2, #200	; 0xc8
   10dbe:	b292      	uxth	r2, r2
   10dc0:	801a      	strh	r2, [r3, #0]
  /* clear interrupt flag  */
  sbi(TIFR, OCF1A);
   10dc2:	f242 0336 	movw	r3, #8246	; 0x2036
   10dc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10dca:	f242 0236 	movw	r2, #8246	; 0x2036
   10dce:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10dd2:	7812      	ldrb	r2, [r2, #0]
   10dd4:	b2d2      	uxtb	r2, r2
   10dd6:	f042 0210 	orr.w	r2, r2, #16
   10dda:	b2d2      	uxtb	r2, r2
   10ddc:	701a      	strb	r2, [r3, #0]
  /* enable OC1A interrupt */
  sbi(TIMSK, OCIE1A);
   10dde:	f242 0337 	movw	r3, #8247	; 0x2037
   10de2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10de6:	f242 0237 	movw	r2, #8247	; 0x2037
   10dea:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10dee:	7812      	ldrb	r2, [r2, #0]
   10df0:	b2d2      	uxtb	r2, r2
   10df2:	f042 0210 	orr.w	r2, r2, #16
   10df6:	b2d2      	uxtb	r2, r2
   10df8:	701a      	strb	r2, [r3, #0]
}
   10dfa:	46bd      	mov	sp, r7
   10dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
   10e00:	4770      	bx	lr
   10e02:	bf00      	nop

00010e04 <__vector_12>:


/* send the next byte */
SIGNAL(SIG_OUTPUT_COMPARE1A) {
   10e04:	b480      	push	{r7}
   10e06:	b083      	sub	sp, #12
   10e08:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* disable OC1A interrupt */
  cbi(TIMSK, OCIE1A); 
   10e0a:	f242 0337 	movw	r3, #8247	; 0x2037
   10e0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e12:	f242 0237 	movw	r2, #8247	; 0x2037
   10e16:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10e1a:	7812      	ldrb	r2, [r2, #0]
   10e1c:	b2d2      	uxtb	r2, r2
   10e1e:	f022 0210 	bic.w	r2, r2, #16
   10e22:	b2d2      	uxtb	r2, r2
   10e24:	701a      	strb	r2, [r3, #0]

  idx_buf++;
   10e26:	f64a 33e9 	movw	r3, #44009	; 0xabe9
   10e2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e2e:	781b      	ldrb	r3, [r3, #0]
   10e30:	3301      	adds	r3, #1
   10e32:	b2da      	uxtb	r2, r3
   10e34:	f64a 33e9 	movw	r3, #44009	; 0xabe9
   10e38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e3c:	701a      	strb	r2, [r3, #0]

  /* we have sent/received a complete frame */
  if (idx_buf == FRAME_LENGTH) {
   10e3e:	f64a 33e9 	movw	r3, #44009	; 0xabe9
   10e42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e46:	781b      	ldrb	r3, [r3, #0]
   10e48:	2b17      	cmp	r3, #23
   10e4a:	d162      	bne.n	10f12 <__vector_12+0x10e>
    /* read checksum from receive register  */
    tmp = SPDR;
   10e4c:	f242 030f 	movw	r3, #8207	; 0x200f
   10e50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e54:	781b      	ldrb	r3, [r3, #0]
   10e56:	71fb      	strb	r3, [r7, #7]
    /* notify valid frame                   */
    if (tmp == xor_in) {
   10e58:	f64a 33ea 	movw	r3, #44010	; 0xabea
   10e5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e60:	781b      	ldrb	r3, [r3, #0]
   10e62:	79fa      	ldrb	r2, [r7, #7]
   10e64:	429a      	cmp	r2, r3
   10e66:	d110      	bne.n	10e8a <__vector_12+0x86>
      link_fbw_receive_valid = TRUE;
   10e68:	f64a 33e6 	movw	r3, #44006	; 0xabe6
   10e6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e70:	2201      	movs	r2, #1
   10e72:	701a      	strb	r2, [r3, #0]
      link_fbw_fbw_nb_err = from_fbw.nb_err;
   10e74:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   10e78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e7c:	7d1a      	ldrb	r2, [r3, #20]
   10e7e:	f64a 33e8 	movw	r3, #44008	; 0xabe8
   10e82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e86:	701a      	strb	r2, [r3, #0]
   10e88:	e00c      	b.n	10ea4 <__vector_12+0xa0>
    }
    else
      link_fbw_nb_err++;
   10e8a:	f64a 33e7 	movw	r3, #44007	; 0xabe7
   10e8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e92:	781b      	ldrb	r3, [r3, #0]
   10e94:	b2db      	uxtb	r3, r3
   10e96:	3301      	adds	r3, #1
   10e98:	b2da      	uxtb	r2, r3
   10e9a:	f64a 33e7 	movw	r3, #44007	; 0xabe7
   10e9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ea2:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_complete = TRUE;
   10ea4:	f240 2382 	movw	r3, #642	; 0x282
   10ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10eac:	2201      	movs	r2, #1
   10eae:	701a      	strb	r2, [r3, #0]
    /* unselect slave0                      */
    SPI_UNSELECT_SLAVE0();
   10eb0:	f64a 33ec 	movw	r3, #44012	; 0xabec
   10eb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10eb8:	2200      	movs	r2, #0
   10eba:	701a      	strb	r2, [r3, #0]
   10ebc:	f242 0318 	movw	r3, #8216	; 0x2018
   10ec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ec4:	f242 0218 	movw	r2, #8216	; 0x2018
   10ec8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ecc:	7812      	ldrb	r2, [r2, #0]
   10ece:	b2d2      	uxtb	r2, r2
   10ed0:	f042 0201 	orr.w	r2, r2, #1
   10ed4:	b2d2      	uxtb	r2, r2
   10ed6:	701a      	strb	r2, [r3, #0]
    SPI_STOP();
   10ed8:	f242 030d 	movw	r3, #8205	; 0x200d
   10edc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ee0:	f242 020d 	movw	r2, #8205	; 0x200d
   10ee4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ee8:	7812      	ldrb	r2, [r2, #0]
   10eea:	b2d2      	uxtb	r2, r2
   10eec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   10ef0:	b2d2      	uxtb	r2, r2
   10ef2:	701a      	strb	r2, [r3, #0]
   10ef4:	f242 030d 	movw	r3, #8205	; 0x200d
   10ef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10efc:	f242 020d 	movw	r2, #8205	; 0x200d
   10f00:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f04:	7812      	ldrb	r2, [r2, #0]
   10f06:	b2d2      	uxtb	r2, r2
   10f08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   10f0c:	b2d2      	uxtb	r2, r2
   10f0e:	701a      	strb	r2, [r3, #0]
    return;
   10f10:	e051      	b.n	10fb6 <__vector_12+0x1b2>
  }

  /* we are sending/receiving payload       */
  if (idx_buf < FRAME_LENGTH - 1) {
   10f12:	f64a 33e9 	movw	r3, #44009	; 0xabe9
   10f16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f1a:	781b      	ldrb	r3, [r3, #0]
   10f1c:	2b15      	cmp	r3, #21
   10f1e:	d820      	bhi.n	10f62 <__vector_12+0x15e>
    /* place new payload byte in send register */
    tmp = ((uint8_t*)&to_fbw)[idx_buf];
   10f20:	f64a 33e9 	movw	r3, #44009	; 0xabe9
   10f24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f28:	781b      	ldrb	r3, [r3, #0]
   10f2a:	461a      	mov	r2, r3
   10f2c:	f64a 33d0 	movw	r3, #43984	; 0xabd0
   10f30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f34:	4413      	add	r3, r2
   10f36:	781b      	ldrb	r3, [r3, #0]
   10f38:	71fb      	strb	r3, [r7, #7]
    SPI_SEND(tmp);
   10f3a:	f242 030f 	movw	r3, #8207	; 0x200f
   10f3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f42:	79fa      	ldrb	r2, [r7, #7]
   10f44:	701a      	strb	r2, [r3, #0]
    xor_out ^= tmp;
   10f46:	f64a 33eb 	movw	r3, #44011	; 0xabeb
   10f4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f4e:	781a      	ldrb	r2, [r3, #0]
   10f50:	79fb      	ldrb	r3, [r7, #7]
   10f52:	4053      	eors	r3, r2
   10f54:	b2da      	uxtb	r2, r3
   10f56:	f64a 33eb 	movw	r3, #44011	; 0xabeb
   10f5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f5e:	701a      	strb	r2, [r3, #0]
   10f60:	e009      	b.n	10f76 <__vector_12+0x172>
  } 
  /* we are done sending the payload */
  else { // idx_buf == FRAME_LENGTH - 1
    /* place checksum in send register */
    SPI_SEND(xor_out);
   10f62:	f242 030f 	movw	r3, #8207	; 0x200f
   10f66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f6a:	f64a 32eb 	movw	r2, #44011	; 0xabeb
   10f6e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f72:	7812      	ldrb	r2, [r2, #0]
   10f74:	701a      	strb	r2, [r3, #0]
  }
  
  /* read the byte from receive register */
  tmp = SPDR;
   10f76:	f242 030f 	movw	r3, #8207	; 0x200f
   10f7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f7e:	781b      	ldrb	r3, [r3, #0]
   10f80:	71fb      	strb	r3, [r7, #7]
  ((uint8_t*)&from_fbw)[idx_buf-1] = tmp;
   10f82:	f64a 33e9 	movw	r3, #44009	; 0xabe9
   10f86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f8a:	781b      	ldrb	r3, [r3, #0]
   10f8c:	1e5a      	subs	r2, r3, #1
   10f8e:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   10f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f96:	4413      	add	r3, r2
   10f98:	79fa      	ldrb	r2, [r7, #7]
   10f9a:	701a      	strb	r2, [r3, #0]
  xor_in ^= tmp;
   10f9c:	f64a 33ea 	movw	r3, #44010	; 0xabea
   10fa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fa4:	781a      	ldrb	r2, [r3, #0]
   10fa6:	79fb      	ldrb	r3, [r7, #7]
   10fa8:	4053      	eors	r3, r2
   10faa:	b2da      	uxtb	r2, r3
   10fac:	f64a 33ea 	movw	r3, #44010	; 0xabea
   10fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fb4:	701a      	strb	r2, [r3, #0]
}
   10fb6:	370c      	adds	r7, #12
   10fb8:	46bd      	mov	sp, r7
   10fba:	f85d 7b04 	ldr.w	r7, [sp], #4
   10fbe:	4770      	bx	lr

00010fc0 <spi_init>:
#include "ad7714.h"

volatile uint8_t spi_cur_slave;
uint8_t spi_nb_ovrn;

void spi_init( void) {
   10fc0:	b480      	push	{r7}
   10fc2:	af00      	add	r7, sp, #0
  /* Set MOSI and SCK output, all others input */ 
  SPI_DDR |= _BV(SPI_MOSI_PIN)| _BV(SPI_SCK_PIN); 
   10fc4:	f242 0317 	movw	r3, #8215	; 0x2017
   10fc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fcc:	f242 0217 	movw	r2, #8215	; 0x2017
   10fd0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10fd4:	7812      	ldrb	r2, [r2, #0]
   10fd6:	b2d2      	uxtb	r2, r2
   10fd8:	f042 0206 	orr.w	r2, r2, #6
   10fdc:	b2d2      	uxtb	r2, r2
   10fde:	701a      	strb	r2, [r3, #0]

  /* enable pull up for miso */
  //  SPI_PORT |= _BV(SPI_MISO_PIN);

  /* Set SS0 output */
  sbi( SPI_SS0_DDR, SPI_SS0_PIN);
   10fe0:	f242 0317 	movw	r3, #8215	; 0x2017
   10fe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fe8:	f242 0217 	movw	r2, #8215	; 0x2017
   10fec:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ff0:	7812      	ldrb	r2, [r2, #0]
   10ff2:	b2d2      	uxtb	r2, r2
   10ff4:	f042 0201 	orr.w	r2, r2, #1
   10ff8:	b2d2      	uxtb	r2, r2
   10ffa:	701a      	strb	r2, [r3, #0]
  /* SS0 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE0();
   10ffc:	f64a 33ec 	movw	r3, #44012	; 0xabec
   11000:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11004:	2200      	movs	r2, #0
   11006:	701a      	strb	r2, [r3, #0]
   11008:	f242 0318 	movw	r3, #8216	; 0x2018
   1100c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11010:	f242 0218 	movw	r2, #8216	; 0x2018
   11014:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11018:	7812      	ldrb	r2, [r2, #0]
   1101a:	b2d2      	uxtb	r2, r2
   1101c:	f042 0201 	orr.w	r2, r2, #1
   11020:	b2d2      	uxtb	r2, r2
   11022:	701a      	strb	r2, [r3, #0]

  /* Set SS1 output */
  sbi( SPI_SS1_DDR, SPI_SS1_PIN);
   11024:	f242 0302 	movw	r3, #8194	; 0x2002
   11028:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1102c:	f242 0202 	movw	r2, #8194	; 0x2002
   11030:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11034:	7812      	ldrb	r2, [r2, #0]
   11036:	b2d2      	uxtb	r2, r2
   11038:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1103c:	b2d2      	uxtb	r2, r2
   1103e:	701a      	strb	r2, [r3, #0]
  /* SS1 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE1();
   11040:	f64a 33ec 	movw	r3, #44012	; 0xabec
   11044:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11048:	2200      	movs	r2, #0
   1104a:	701a      	strb	r2, [r3, #0]
   1104c:	f242 0303 	movw	r3, #8195	; 0x2003
   11050:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11054:	f242 0203 	movw	r2, #8195	; 0x2003
   11058:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1105c:	7812      	ldrb	r2, [r2, #0]
   1105e:	b2d2      	uxtb	r2, r2
   11060:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11064:	b2d2      	uxtb	r2, r2
   11066:	701a      	strb	r2, [r3, #0]
  
  spi_cur_slave = SPI_NONE;
   11068:	f64a 33ec 	movw	r3, #44012	; 0xabec
   1106c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11070:	2200      	movs	r2, #0
   11072:	701a      	strb	r2, [r3, #0]
}
   11074:	46bd      	mov	sp, r7
   11076:	f85d 7b04 	ldr.w	r7, [sp], #4
   1107a:	4770      	bx	lr

0001107c <__vector_17>:


SIGNAL(SIG_SPI) {
   1107c:	b580      	push	{r7, lr}
   1107e:	af00      	add	r7, sp, #0
  if (spi_cur_slave == SPI_SLAVE0)
   11080:	f64a 33ec 	movw	r3, #44012	; 0xabec
   11084:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11088:	781b      	ldrb	r3, [r3, #0]
   1108a:	b2db      	uxtb	r3, r3
   1108c:	2b01      	cmp	r3, #1
   1108e:	d102      	bne.n	11096 <__vector_17+0x1a>
    link_fbw_on_spi_it();
   11090:	f7ff fe88 	bl	10da4 <link_fbw_on_spi_it>
   11094:	e00b      	b.n	110ae <__vector_17+0x32>
  else
    fatal_error_nb++;
   11096:	f64a 2390 	movw	r3, #43664	; 0xaa90
   1109a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1109e:	781b      	ldrb	r3, [r3, #0]
   110a0:	3301      	adds	r3, #1
   110a2:	b2da      	uxtb	r2, r3
   110a4:	f64a 2390 	movw	r3, #43664	; 0xaa90
   110a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110ac:	701a      	strb	r2, [r3, #0]
}
   110ae:	bd80      	pop	{r7, pc}

000110b0 <adc_buf_channel>:

uint16_t		adc_samples[ NB_ADC ];

static struct adc_buf* buffers[NB_ADC];

void adc_buf_channel(uint8_t adc_channel, struct adc_buf* s) {
   110b0:	b480      	push	{r7}
   110b2:	b083      	sub	sp, #12
   110b4:	af00      	add	r7, sp, #0
   110b6:	4603      	mov	r3, r0
   110b8:	6039      	str	r1, [r7, #0]
   110ba:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   110bc:	79fa      	ldrb	r2, [r7, #7]
   110be:	f64a 4300 	movw	r3, #44032	; 0xac00
   110c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110c6:	6839      	ldr	r1, [r7, #0]
   110c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   110cc:	370c      	adds	r7, #12
   110ce:	46bd      	mov	sp, r7
   110d0:	f85d 7b04 	ldr.w	r7, [sp], #4
   110d4:	4770      	bx	lr
   110d6:	bf00      	nop

000110d8 <adc_init>:

void 
adc_init( void )
{
   110d8:	b480      	push	{r7}
   110da:	b083      	sub	sp, #12
   110dc:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   110de:	f242 0362 	movw	r3, #8290	; 0x2062
   110e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110e6:	2200      	movs	r2, #0
   110e8:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   110ea:	f242 0361 	movw	r3, #8289	; 0x2061
   110ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110f2:	2200      	movs	r2, #0
   110f4:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref, which is tied to Vcc */
  ADMUX		= ANALOG_VREF;
   110f6:	f242 0307 	movw	r3, #8199	; 0x2007
   110fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110fe:	2240      	movs	r2, #64	; 0x40
   11100:	701a      	strb	r2, [r3, #0]

  /* Turn off the analog comparator */
  sbi( ACSR, ACD );
   11102:	f242 0308 	movw	r3, #8200	; 0x2008
   11106:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1110a:	f242 0208 	movw	r2, #8200	; 0x2008
   1110e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11112:	7812      	ldrb	r2, [r2, #0]
   11114:	b2d2      	uxtb	r2, r2
   11116:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1111a:	b2d2      	uxtb	r2, r2
   1111c:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSR		= 0
   1111e:	f242 0306 	movw	r3, #8198	; 0x2006
   11122:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11126:	22cf      	movs	r2, #207	; 0xcf
   11128:	701a      	strb	r2, [r3, #0]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   1112a:	2300      	movs	r3, #0
   1112c:	71fb      	strb	r3, [r7, #7]
   1112e:	e00a      	b.n	11146 <adc_init+0x6e>
    buffers[i] = (struct adc_buf*)0;
   11130:	79fa      	ldrb	r2, [r7, #7]
   11132:	f64a 4300 	movw	r3, #44032	; 0xac00
   11136:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1113a:	2100      	movs	r1, #0
   1113c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   11140:	79fb      	ldrb	r3, [r7, #7]
   11142:	3301      	adds	r3, #1
   11144:	71fb      	strb	r3, [r7, #7]
   11146:	79fb      	ldrb	r3, [r7, #7]
   11148:	2b07      	cmp	r3, #7
   1114a:	d9f1      	bls.n	11130 <adc_init+0x58>
    buffers[i] = (struct adc_buf*)0;
}
   1114c:	370c      	adds	r7, #12
   1114e:	46bd      	mov	sp, r7
   11150:	f85d 7b04 	ldr.w	r7, [sp], #4
   11154:	4770      	bx	lr
   11156:	bf00      	nop

00011158 <__vector_21>:
 *  8.913kHz on mega128@16MHz 1kHz/channel ??
*/


SIGNAL( SIG_ADC )
{
   11158:	b480      	push	{r7}
   1115a:	b085      	sub	sp, #20
   1115c:	af00      	add	r7, sp, #0
  uint8_t adc_input	= ADMUX & 0x7;
   1115e:	f242 0307 	movw	r3, #8199	; 0x2007
   11162:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11166:	781b      	ldrb	r3, [r3, #0]
   11168:	b2db      	uxtb	r3, r3
   1116a:	f003 0307 	and.w	r3, r3, #7
   1116e:	73fb      	strb	r3, [r7, #15]
  struct adc_buf* buf = buffers[adc_input];
   11170:	7bfa      	ldrb	r2, [r7, #15]
   11172:	f64a 4300 	movw	r3, #44032	; 0xac00
   11176:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1117a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1117e:	60bb      	str	r3, [r7, #8]
  uint16_t adc_value = ADCW;
   11180:	f242 0304 	movw	r3, #8196	; 0x2004
   11184:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11188:	881b      	ldrh	r3, [r3, #0]
   1118a:	80fb      	strh	r3, [r7, #6]
  /* Store result */
  adc_samples[ adc_input ] = adc_value;
   1118c:	7bfa      	ldrb	r2, [r7, #15]
   1118e:	f64a 33f0 	movw	r3, #44016	; 0xabf0
   11192:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11196:	88f9      	ldrh	r1, [r7, #6]
   11198:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  if (buf) {
   1119c:	68bb      	ldr	r3, [r7, #8]
   1119e:	2b00      	cmp	r3, #0
   111a0:	d025      	beq.n	111ee <__vector_21+0x96>
    uint8_t new_head = buf->head + 1;
   111a2:	68bb      	ldr	r3, [r7, #8]
   111a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   111a8:	3301      	adds	r3, #1
   111aa:	73bb      	strb	r3, [r7, #14]
    if (new_head >= AV_NB_SAMPLE) new_head = 0;
   111ac:	7bbb      	ldrb	r3, [r7, #14]
   111ae:	2b1f      	cmp	r3, #31
   111b0:	d901      	bls.n	111b6 <__vector_21+0x5e>
   111b2:	2300      	movs	r3, #0
   111b4:	73bb      	strb	r3, [r7, #14]
    buf->sum -= buf->values[new_head];
   111b6:	68bb      	ldr	r3, [r7, #8]
   111b8:	881a      	ldrh	r2, [r3, #0]
   111ba:	7bbb      	ldrb	r3, [r7, #14]
   111bc:	68b9      	ldr	r1, [r7, #8]
   111be:	005b      	lsls	r3, r3, #1
   111c0:	440b      	add	r3, r1
   111c2:	885b      	ldrh	r3, [r3, #2]
   111c4:	1ad3      	subs	r3, r2, r3
   111c6:	b29a      	uxth	r2, r3
   111c8:	68bb      	ldr	r3, [r7, #8]
   111ca:	801a      	strh	r2, [r3, #0]
    buf->values[new_head] = adc_value;
   111cc:	7bbb      	ldrb	r3, [r7, #14]
   111ce:	68ba      	ldr	r2, [r7, #8]
   111d0:	005b      	lsls	r3, r3, #1
   111d2:	4413      	add	r3, r2
   111d4:	88fa      	ldrh	r2, [r7, #6]
   111d6:	805a      	strh	r2, [r3, #2]
    buf->sum += adc_value;
   111d8:	68bb      	ldr	r3, [r7, #8]
   111da:	881a      	ldrh	r2, [r3, #0]
   111dc:	88fb      	ldrh	r3, [r7, #6]
   111de:	4413      	add	r3, r2
   111e0:	b29a      	uxth	r2, r3
   111e2:	68bb      	ldr	r3, [r7, #8]
   111e4:	801a      	strh	r2, [r3, #0]
    buf->head = new_head;   
   111e6:	68bb      	ldr	r3, [r7, #8]
   111e8:	7bba      	ldrb	r2, [r7, #14]
   111ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Find the next input */
  adc_input++;
   111ee:	7bfb      	ldrb	r3, [r7, #15]
   111f0:	3301      	adds	r3, #1
   111f2:	73fb      	strb	r3, [r7, #15]
  if( adc_input >= 8 )
   111f4:	7bfb      	ldrb	r3, [r7, #15]
   111f6:	2b07      	cmp	r3, #7
   111f8:	d901      	bls.n	111fe <__vector_21+0xa6>
    adc_input = 0;
   111fa:	2300      	movs	r3, #0
   111fc:	73fb      	strb	r3, [r7, #15]
  /* Select it */
  ADMUX = adc_input | ANALOG_VREF;
   111fe:	f242 0307 	movw	r3, #8199	; 0x2007
   11202:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11206:	7bfa      	ldrb	r2, [r7, #15]
   11208:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1120c:	b2d2      	uxtb	r2, r2
   1120e:	701a      	strb	r2, [r3, #0]
  /* Restart the conversion */
  sbi( ADCSR, ADSC );
   11210:	f242 0306 	movw	r3, #8198	; 0x2006
   11214:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11218:	f242 0206 	movw	r2, #8198	; 0x2006
   1121c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11220:	7812      	ldrb	r2, [r2, #0]
   11222:	b2d2      	uxtb	r2, r2
   11224:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11228:	b2d2      	uxtb	r2, r2
   1122a:	701a      	strb	r2, [r3, #0]
  
}
   1122c:	3714      	adds	r7, #20
   1122e:	46bd      	mov	sp, r7
   11230:	f85d 7b04 	ldr.w	r7, [sp], #4
   11234:	4770      	bx	lr
   11236:	bf00      	nop

00011238 <gps_init>:
static uint8_t  ubx_status;
static uint16_t ubx_len;
static uint8_t  ubx_msg_idx;
static uint8_t ck_a, ck_b, ubx_id, ubx_class;

void gps_init( void ) {
   11238:	b580      	push	{r7, lr}
   1123a:	af00      	add	r7, sp, #0
#ifdef SIMUL
  uart0_init();
  simul_ir_roll = ir_roll_neutral;
  simul_ir_pitch = ir_pitch_neutral;
#else
  uart1_init();
   1123c:	f003 fca8 	bl	14b90 <uart1_init>
#endif
  ubx_status = UNINIT;
   11240:	f64a 5347 	movw	r3, #44359	; 0xad47
   11244:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11248:	2200      	movs	r2, #0
   1124a:	701a      	strb	r2, [r3, #0]
}
   1124c:	bd80      	pop	{r7, pc}
   1124e:	bf00      	nop

00011250 <parse_gps_msg>:

void parse_gps_msg( void ) {
   11250:	b580      	push	{r7, lr}
   11252:	af00      	add	r7, sp, #0
    ubx_class = 1;
    ubx_id = (ubx_id + 1)%0x40;
    */
    //end

  if (ubx_class == UBX_NAV_ID) {
   11254:	f64a 534e 	movw	r3, #44366	; 0xad4e
   11258:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1125c:	781b      	ldrb	r3, [r3, #0]
   1125e:	2b01      	cmp	r3, #1
   11260:	f040 80f9 	bne.w	11456 <parse_gps_msg+0x206>
    if (ubx_id == UBX_NAV_POSUTM_ID) {
   11264:	f64a 534d 	movw	r3, #44365	; 0xad4d
   11268:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1126c:	781b      	ldrb	r3, [r3, #0]
   1126e:	2b08      	cmp	r3, #8
   11270:	d128      	bne.n	112c4 <parse_gps_msg+0x74>
      gps_utm_east = UBX_NAV_POSUTM_EAST(ubx_msg_buf);
   11272:	f64a 4348 	movw	r3, #44104	; 0xac48
   11276:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1127a:	685a      	ldr	r2, [r3, #4]
   1127c:	f64a 4334 	movw	r3, #44084	; 0xac34
   11280:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11284:	601a      	str	r2, [r3, #0]
      gps_utm_north = UBX_NAV_POSUTM_NORTH(ubx_msg_buf);
   11286:	f64a 4348 	movw	r3, #44104	; 0xac48
   1128a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1128e:	689a      	ldr	r2, [r3, #8]
   11290:	f64a 4338 	movw	r3, #44088	; 0xac38
   11294:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11298:	601a      	str	r2, [r3, #0]
      gps_falt = (float)UBX_NAV_POSUTM_ALT(ubx_msg_buf) / 100.;
   1129a:	4b73      	ldr	r3, [pc, #460]	; (11468 <parse_gps_msg+0x218>)
   1129c:	681b      	ldr	r3, [r3, #0]
   1129e:	4618      	mov	r0, r3
   112a0:	f006 ffc6 	bl	18230 <__aeabi_i2f>
   112a4:	4603      	mov	r3, r0
   112a6:	4618      	mov	r0, r3
   112a8:	f04f 0100 	mov.w	r1, #0
   112ac:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   112b0:	f007 f8c6 	bl	18440 <__aeabi_fdiv>
   112b4:	4603      	mov	r3, r0
   112b6:	461a      	mov	r2, r3
   112b8:	f64a 4324 	movw	r3, #44068	; 0xac24
   112bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112c0:	601a      	str	r2, [r3, #0]
   112c2:	e0c8      	b.n	11456 <parse_gps_msg+0x206>
        gps_utm_east = gps_utm_east + 0.5;
        gps_utm_north = gps_utm_north + 0.4;
        gps_falt = gps_falt + 0.6;
        */
        // end
    } else if (ubx_id == UBX_NAV_STATUS_ID) {
   112c4:	f64a 534d 	movw	r3, #44365	; 0xad4d
   112c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112cc:	781b      	ldrb	r3, [r3, #0]
   112ce:	2b03      	cmp	r3, #3
   112d0:	d10a      	bne.n	112e8 <parse_gps_msg+0x98>
      gps_mode = UBX_NAV_STATUS_GPSfix(ubx_msg_buf);
   112d2:	f64a 4348 	movw	r3, #44104	; 0xac48
   112d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112da:	791a      	ldrb	r2, [r3, #4]
   112dc:	f64a 4344 	movw	r3, #44100	; 0xac44
   112e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112e4:	701a      	strb	r2, [r3, #0]
   112e6:	e0b6      	b.n	11456 <parse_gps_msg+0x206>
    } else if (ubx_id == UBX_NAV_VELNED_ID) {
   112e8:	f64a 534d 	movw	r3, #44365	; 0xad4d
   112ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112f0:	781b      	ldrb	r3, [r3, #0]
   112f2:	2b12      	cmp	r3, #18
   112f4:	f040 80af 	bne.w	11456 <parse_gps_msg+0x206>
      gps_fspeed = ((float)UBX_NAV_VELNED_GSpeed(ubx_msg_buf)) / 1e2; 
   112f8:	4b5c      	ldr	r3, [pc, #368]	; (1146c <parse_gps_msg+0x21c>)
   112fa:	681b      	ldr	r3, [r3, #0]
   112fc:	4618      	mov	r0, r3
   112fe:	f006 ff93 	bl	18228 <__aeabi_ui2f>
   11302:	4603      	mov	r3, r0
   11304:	4618      	mov	r0, r3
   11306:	f04f 0100 	mov.w	r1, #0
   1130a:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   1130e:	f007 f897 	bl	18440 <__aeabi_fdiv>
   11312:	4603      	mov	r3, r0
   11314:	461a      	mov	r2, r3
   11316:	f64a 4328 	movw	r3, #44072	; 0xac28
   1131a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1131e:	601a      	str	r2, [r3, #0]
      gps_fclimb = ((float)UBX_NAV_VELNED_VEL_D(ubx_msg_buf)) / -1e2;
   11320:	4b51      	ldr	r3, [pc, #324]	; (11468 <parse_gps_msg+0x218>)
   11322:	681b      	ldr	r3, [r3, #0]
   11324:	4618      	mov	r0, r3
   11326:	f006 ff83 	bl	18230 <__aeabi_i2f>
   1132a:	4603      	mov	r3, r0
   1132c:	4618      	mov	r0, r3
   1132e:	f04f 0100 	mov.w	r1, #0
   11332:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   11336:	f007 f883 	bl	18440 <__aeabi_fdiv>
   1133a:	4603      	mov	r3, r0
   1133c:	461a      	mov	r2, r3
   1133e:	f64a 432c 	movw	r3, #44076	; 0xac2c
   11342:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11346:	601a      	str	r2, [r3, #0]
      gps_fcourse = RadianOfDeg(((float)UBX_NAV_VELNED_Heading(ubx_msg_buf)) / 1e5);
   11348:	4b49      	ldr	r3, [pc, #292]	; (11470 <parse_gps_msg+0x220>)
   1134a:	681b      	ldr	r3, [r3, #0]
   1134c:	4618      	mov	r0, r3
   1134e:	f006 ff6f 	bl	18230 <__aeabi_i2f>
   11352:	4603      	mov	r3, r0
   11354:	4618      	mov	r0, r3
   11356:	f006 fb2b 	bl	179b0 <__aeabi_f2d>
   1135a:	4602      	mov	r2, r0
   1135c:	460b      	mov	r3, r1
   1135e:	4610      	mov	r0, r2
   11360:	4619      	mov	r1, r3
   11362:	a33d      	add	r3, pc, #244	; (adr r3, 11458 <parse_gps_msg+0x208>)
   11364:	e9d3 2300 	ldrd	r2, r3, [r3]
   11368:	f006 fca0 	bl	17cac <__aeabi_ddiv>
   1136c:	4602      	mov	r2, r0
   1136e:	460b      	mov	r3, r1
   11370:	4610      	mov	r0, r2
   11372:	4619      	mov	r1, r3
   11374:	f04f 0200 	mov.w	r2, #0
   11378:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1137c:	f2c4 0366 	movt	r3, #16486	; 0x4066
   11380:	f006 fc94 	bl	17cac <__aeabi_ddiv>
   11384:	4602      	mov	r2, r0
   11386:	460b      	mov	r3, r1
   11388:	4610      	mov	r0, r2
   1138a:	4619      	mov	r1, r3
   1138c:	a334      	add	r3, pc, #208	; (adr r3, 11460 <parse_gps_msg+0x210>)
   1138e:	e9d3 2300 	ldrd	r2, r3, [r3]
   11392:	f006 fb61 	bl	17a58 <__aeabi_dmul>
   11396:	4602      	mov	r2, r0
   11398:	460b      	mov	r3, r1
   1139a:	4610      	mov	r0, r2
   1139c:	4619      	mov	r1, r3
   1139e:	f006 fe3d 	bl	1801c <__aeabi_d2f>
   113a2:	4602      	mov	r2, r0
   113a4:	f64a 4330 	movw	r3, #44080	; 0xac30
   113a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113ac:	601a      	str	r2, [r3, #0]
      gps_ftow = ((float)UBX_NAV_VELNED_ITOW(ubx_msg_buf)) / 1e3;
   113ae:	f64a 4348 	movw	r3, #44104	; 0xac48
   113b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113b6:	681b      	ldr	r3, [r3, #0]
   113b8:	4618      	mov	r0, r3
   113ba:	f006 ff35 	bl	18228 <__aeabi_ui2f>
   113be:	4603      	mov	r3, r0
   113c0:	4618      	mov	r0, r3
   113c2:	f04f 0100 	mov.w	r1, #0
   113c6:	f2c4 417a 	movt	r1, #17530	; 0x447a
   113ca:	f007 f839 	bl	18440 <__aeabi_fdiv>
   113ce:	4603      	mov	r3, r0
   113d0:	461a      	mov	r2, r3
   113d2:	f64a 4320 	movw	r3, #44064	; 0xac20
   113d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113da:	601a      	str	r2, [r3, #0]
        gps_fcourse = gps_fcourse + 0.2;
        gps_ftow = gps_ftow + 0.1;
        */
        // end
      
      gps_east = gps_utm_east / 100 - NAV_UTM_EAST0;
   113dc:	f64a 4334 	movw	r3, #44084	; 0xac34
   113e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113e4:	681a      	ldr	r2, [r3, #0]
   113e6:	f248 531f 	movw	r3, #34079	; 0x851f
   113ea:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   113ee:	fb83 1302 	smull	r1, r3, r3, r2
   113f2:	1159      	asrs	r1, r3, #5
   113f4:	17d3      	asrs	r3, r2, #31
   113f6:	1acb      	subs	r3, r1, r3
   113f8:	f5a3 2313 	sub.w	r3, r3, #602112	; 0x93000
   113fc:	f6a3 535a 	subw	r3, r3, #3418	; 0xd5a
   11400:	4618      	mov	r0, r3
   11402:	f006 ff15 	bl	18230 <__aeabi_i2f>
   11406:	4602      	mov	r2, r0
   11408:	f64a 433c 	movw	r3, #44092	; 0xac3c
   1140c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11410:	601a      	str	r2, [r3, #0]
      gps_north = gps_utm_north / 100 - NAV_UTM_NORTH0;
   11412:	f64a 4338 	movw	r3, #44088	; 0xac38
   11416:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1141a:	681a      	ldr	r2, [r3, #0]
   1141c:	f248 531f 	movw	r3, #34079	; 0x851f
   11420:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   11424:	fb83 1302 	smull	r1, r3, r3, r2
   11428:	1159      	asrs	r1, r3, #5
   1142a:	17d3      	asrs	r3, r2, #31
   1142c:	1aca      	subs	r2, r1, r3
   1142e:	f648 231a 	movw	r3, #35354	; 0x8a1a
   11432:	f6cf 73a7 	movt	r3, #65447	; 0xffa7
   11436:	4413      	add	r3, r2
   11438:	4618      	mov	r0, r3
   1143a:	f006 fef9 	bl	18230 <__aeabi_i2f>
   1143e:	4602      	mov	r2, r0
   11440:	f64a 4340 	movw	r3, #44096	; 0xac40
   11444:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11448:	601a      	str	r2, [r3, #0]
      
      
      gps_pos_available = TRUE; /* The 3 UBX messages are sent in one rafale */
   1144a:	f64a 4346 	movw	r3, #44102	; 0xac46
   1144e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11452:	2201      	movs	r2, #1
   11454:	701a      	strb	r2, [r3, #0]
      simul_ir_roll = UBX_USR_IRSIM_ROLL(ubx_msg_buf);
      simul_ir_pitch = UBX_USR_IRSIM_PITCH(ubx_msg_buf);
    }
  }
#endif
}
   11456:	bd80      	pop	{r7, pc}
   11458:	00000000 	.word	0x00000000
   1145c:	40f86a00 	.word	0x40f86a00
   11460:	5a7ed197 	.word	0x5a7ed197
   11464:	400921fb 	.word	0x400921fb
   11468:	2000ac54 	.word	0x2000ac54
   1146c:	2000ac5c 	.word	0x2000ac5c
   11470:	2000ac60 	.word	0x2000ac60

00011474 <parse_ubx>:


uint8_t gps_nb_ovrn;


static void parse_ubx( uint8_t c ) {
   11474:	b480      	push	{r7}
   11476:	b083      	sub	sp, #12
   11478:	af00      	add	r7, sp, #0
   1147a:	4603      	mov	r3, r0
   1147c:	71fb      	strb	r3, [r7, #7]
   if (ubx_status < GOT_PAYLOAD) {
   1147e:	f64a 5347 	movw	r3, #44359	; 0xad47
   11482:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11486:	781b      	ldrb	r3, [r3, #0]
   11488:	2b06      	cmp	r3, #6
   1148a:	d81d      	bhi.n	114c8 <parse_ubx+0x54>
    ck_a += c;
   1148c:	f64a 534b 	movw	r3, #44363	; 0xad4b
   11490:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11494:	781a      	ldrb	r2, [r3, #0]
   11496:	79fb      	ldrb	r3, [r7, #7]
   11498:	4413      	add	r3, r2
   1149a:	b2da      	uxtb	r2, r3
   1149c:	f64a 534b 	movw	r3, #44363	; 0xad4b
   114a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114a4:	701a      	strb	r2, [r3, #0]
    ck_b += ck_a;
   114a6:	f64a 534c 	movw	r3, #44364	; 0xad4c
   114aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114ae:	781a      	ldrb	r2, [r3, #0]
   114b0:	f64a 534b 	movw	r3, #44363	; 0xad4b
   114b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114b8:	781b      	ldrb	r3, [r3, #0]
   114ba:	4413      	add	r3, r2
   114bc:	b2da      	uxtb	r2, r3
   114be:	f64a 534c 	movw	r3, #44364	; 0xad4c
   114c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114c6:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
    break;
  }
#else */
  if (ubx_status == UNINIT)
   114c8:	f64a 5347 	movw	r3, #44359	; 0xad47
   114cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114d0:	781b      	ldrb	r3, [r3, #0]
   114d2:	2b00      	cmp	r3, #0
   114d4:	d110      	bne.n	114f8 <parse_ubx+0x84>
  {
    if (c == UBX_SYNC1)
   114d6:	79fb      	ldrb	r3, [r7, #7]
   114d8:	2bb5      	cmp	r3, #181	; 0xb5
   114da:	f040 8135 	bne.w	11748 <parse_ubx+0x2d4>
      ubx_status++;
   114de:	f64a 5347 	movw	r3, #44359	; 0xad47
   114e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114e6:	781b      	ldrb	r3, [r3, #0]
   114e8:	3301      	adds	r3, #1
   114ea:	b2da      	uxtb	r2, r3
   114ec:	f64a 5347 	movw	r3, #44359	; 0xad47
   114f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114f4:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   114f6:	e12f      	b.n	11758 <parse_ubx+0x2e4>
  if (ubx_status == UNINIT)
  {
    if (c == UBX_SYNC1)
      ubx_status++;
  }
  else if (ubx_status == GOT_SYNC1)
   114f8:	f64a 5347 	movw	r3, #44359	; 0xad47
   114fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11500:	781b      	ldrb	r3, [r3, #0]
   11502:	2b01      	cmp	r3, #1
   11504:	d11c      	bne.n	11540 <parse_ubx+0xcc>
  {
    if (c != UBX_SYNC2)
   11506:	79fb      	ldrb	r3, [r7, #7]
   11508:	2b62      	cmp	r3, #98	; 0x62
   1150a:	d000      	beq.n	1150e <parse_ubx+0x9a>
      goto error;
   1150c:	e11d      	b.n	1174a <parse_ubx+0x2d6>
    ck_a = 0;
   1150e:	f64a 534b 	movw	r3, #44363	; 0xad4b
   11512:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11516:	2200      	movs	r2, #0
   11518:	701a      	strb	r2, [r3, #0]
    ck_b = 0;
   1151a:	f64a 534c 	movw	r3, #44364	; 0xad4c
   1151e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11522:	2200      	movs	r2, #0
   11524:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11526:	f64a 5347 	movw	r3, #44359	; 0xad47
   1152a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1152e:	781b      	ldrb	r3, [r3, #0]
   11530:	3301      	adds	r3, #1
   11532:	b2da      	uxtb	r2, r3
   11534:	f64a 5347 	movw	r3, #44359	; 0xad47
   11538:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1153c:	701a      	strb	r2, [r3, #0]
   1153e:	e103      	b.n	11748 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_SYNC2)
   11540:	f64a 5347 	movw	r3, #44359	; 0xad47
   11544:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11548:	781b      	ldrb	r3, [r3, #0]
   1154a:	2b02      	cmp	r3, #2
   1154c:	d127      	bne.n	1159e <parse_ubx+0x12a>
  {
    if (gps_msg_received) {
   1154e:	f64a 4345 	movw	r3, #44101	; 0xac45
   11552:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11556:	781b      	ldrb	r3, [r3, #0]
   11558:	b2db      	uxtb	r3, r3
   1155a:	2b00      	cmp	r3, #0
   1155c:	d00c      	beq.n	11578 <parse_ubx+0x104>
      /* Previous message has not yet been parsed: discard this one */
      gps_nb_ovrn++;
   1155e:	f64a 534f 	movw	r3, #44367	; 0xad4f
   11562:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11566:	781b      	ldrb	r3, [r3, #0]
   11568:	3301      	adds	r3, #1
   1156a:	b2da      	uxtb	r2, r3
   1156c:	f64a 534f 	movw	r3, #44367	; 0xad4f
   11570:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11574:	701a      	strb	r2, [r3, #0]
      goto error;
   11576:	e0e8      	b.n	1174a <parse_ubx+0x2d6>
    }
    ubx_class = c;
   11578:	f64a 534e 	movw	r3, #44366	; 0xad4e
   1157c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11580:	79fa      	ldrb	r2, [r7, #7]
   11582:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11584:	f64a 5347 	movw	r3, #44359	; 0xad47
   11588:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1158c:	781b      	ldrb	r3, [r3, #0]
   1158e:	3301      	adds	r3, #1
   11590:	b2da      	uxtb	r2, r3
   11592:	f64a 5347 	movw	r3, #44359	; 0xad47
   11596:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1159a:	701a      	strb	r2, [r3, #0]
   1159c:	e0d4      	b.n	11748 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CLASS)
   1159e:	f64a 5347 	movw	r3, #44359	; 0xad47
   115a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115a6:	781b      	ldrb	r3, [r3, #0]
   115a8:	2b03      	cmp	r3, #3
   115aa:	d112      	bne.n	115d2 <parse_ubx+0x15e>
  {
    ubx_id = c;
   115ac:	f64a 534d 	movw	r3, #44365	; 0xad4d
   115b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115b4:	79fa      	ldrb	r2, [r7, #7]
   115b6:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   115b8:	f64a 5347 	movw	r3, #44359	; 0xad47
   115bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115c0:	781b      	ldrb	r3, [r3, #0]
   115c2:	3301      	adds	r3, #1
   115c4:	b2da      	uxtb	r2, r3
   115c6:	f64a 5347 	movw	r3, #44359	; 0xad47
   115ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115ce:	701a      	strb	r2, [r3, #0]
   115d0:	e0ba      	b.n	11748 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_ID)
   115d2:	f64a 5347 	movw	r3, #44359	; 0xad47
   115d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115da:	781b      	ldrb	r3, [r3, #0]
   115dc:	2b04      	cmp	r3, #4
   115de:	d113      	bne.n	11608 <parse_ubx+0x194>
  {
    ubx_len = c;
   115e0:	79fb      	ldrb	r3, [r7, #7]
   115e2:	b29a      	uxth	r2, r3
   115e4:	f64a 5348 	movw	r3, #44360	; 0xad48
   115e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115ec:	801a      	strh	r2, [r3, #0]
    ubx_status++;
   115ee:	f64a 5347 	movw	r3, #44359	; 0xad47
   115f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115f6:	781b      	ldrb	r3, [r3, #0]
   115f8:	3301      	adds	r3, #1
   115fa:	b2da      	uxtb	r2, r3
   115fc:	f64a 5347 	movw	r3, #44359	; 0xad47
   11600:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11604:	701a      	strb	r2, [r3, #0]
   11606:	e09f      	b.n	11748 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN1)
   11608:	f64a 5347 	movw	r3, #44359	; 0xad47
   1160c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11610:	781b      	ldrb	r3, [r3, #0]
   11612:	2b05      	cmp	r3, #5
   11614:	d12b      	bne.n	1166e <parse_ubx+0x1fa>
  {
    ubx_len |= (c<<8);
   11616:	79fb      	ldrb	r3, [r7, #7]
   11618:	021b      	lsls	r3, r3, #8
   1161a:	b29a      	uxth	r2, r3
   1161c:	f64a 5348 	movw	r3, #44360	; 0xad48
   11620:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11624:	881b      	ldrh	r3, [r3, #0]
   11626:	b29b      	uxth	r3, r3
   11628:	4313      	orrs	r3, r2
   1162a:	b29b      	uxth	r3, r3
   1162c:	b29a      	uxth	r2, r3
   1162e:	f64a 5348 	movw	r3, #44360	; 0xad48
   11632:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11636:	801a      	strh	r2, [r3, #0]
    if (ubx_len > UBX_MAX_PAYLOAD)
   11638:	f64a 5348 	movw	r3, #44360	; 0xad48
   1163c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11640:	881b      	ldrh	r3, [r3, #0]
   11642:	2bff      	cmp	r3, #255	; 0xff
   11644:	d900      	bls.n	11648 <parse_ubx+0x1d4>
      goto error;
   11646:	e080      	b.n	1174a <parse_ubx+0x2d6>
    ubx_msg_idx = 0;
   11648:	f64a 534a 	movw	r3, #44362	; 0xad4a
   1164c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11650:	2200      	movs	r2, #0
   11652:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11654:	f64a 5347 	movw	r3, #44359	; 0xad47
   11658:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1165c:	781b      	ldrb	r3, [r3, #0]
   1165e:	3301      	adds	r3, #1
   11660:	b2da      	uxtb	r2, r3
   11662:	f64a 5347 	movw	r3, #44359	; 0xad47
   11666:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1166a:	701a      	strb	r2, [r3, #0]
   1166c:	e06c      	b.n	11748 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN2)
   1166e:	f64a 5347 	movw	r3, #44359	; 0xad47
   11672:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11676:	781b      	ldrb	r3, [r3, #0]
   11678:	2b06      	cmp	r3, #6
   1167a:	d131      	bne.n	116e0 <parse_ubx+0x26c>
  {
    ubx_msg_buf[ubx_msg_idx] = c;
   1167c:	f64a 534a 	movw	r3, #44362	; 0xad4a
   11680:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11684:	781b      	ldrb	r3, [r3, #0]
   11686:	461a      	mov	r2, r3
   11688:	f64a 4348 	movw	r3, #44104	; 0xac48
   1168c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11690:	79f9      	ldrb	r1, [r7, #7]
   11692:	5499      	strb	r1, [r3, r2]
    ubx_msg_idx++;
   11694:	f64a 534a 	movw	r3, #44362	; 0xad4a
   11698:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1169c:	781b      	ldrb	r3, [r3, #0]
   1169e:	3301      	adds	r3, #1
   116a0:	b2da      	uxtb	r2, r3
   116a2:	f64a 534a 	movw	r3, #44362	; 0xad4a
   116a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116aa:	701a      	strb	r2, [r3, #0]
    if (ubx_msg_idx >= ubx_len) {
   116ac:	f64a 534a 	movw	r3, #44362	; 0xad4a
   116b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116b4:	781b      	ldrb	r3, [r3, #0]
   116b6:	461a      	mov	r2, r3
   116b8:	f64a 5348 	movw	r3, #44360	; 0xad48
   116bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116c0:	881b      	ldrh	r3, [r3, #0]
   116c2:	429a      	cmp	r2, r3
   116c4:	d340      	bcc.n	11748 <parse_ubx+0x2d4>
      ubx_status++;
   116c6:	f64a 5347 	movw	r3, #44359	; 0xad47
   116ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116ce:	781b      	ldrb	r3, [r3, #0]
   116d0:	3301      	adds	r3, #1
   116d2:	b2da      	uxtb	r2, r3
   116d4:	f64a 5347 	movw	r3, #44359	; 0xad47
   116d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116dc:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   116de:	e03b      	b.n	11758 <parse_ubx+0x2e4>
    ubx_msg_idx++;
    if (ubx_msg_idx >= ubx_len) {
      ubx_status++;
    }
  }
  else if (ubx_status == GOT_PAYLOAD)
   116e0:	f64a 5347 	movw	r3, #44359	; 0xad47
   116e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116e8:	781b      	ldrb	r3, [r3, #0]
   116ea:	2b07      	cmp	r3, #7
   116ec:	d115      	bne.n	1171a <parse_ubx+0x2a6>
  {
    if (c != ck_a)
   116ee:	f64a 534b 	movw	r3, #44363	; 0xad4b
   116f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116f6:	781b      	ldrb	r3, [r3, #0]
   116f8:	79fa      	ldrb	r2, [r7, #7]
   116fa:	429a      	cmp	r2, r3
   116fc:	d000      	beq.n	11700 <parse_ubx+0x28c>
      goto error;
   116fe:	e024      	b.n	1174a <parse_ubx+0x2d6>
    ubx_status++;
   11700:	f64a 5347 	movw	r3, #44359	; 0xad47
   11704:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11708:	781b      	ldrb	r3, [r3, #0]
   1170a:	3301      	adds	r3, #1
   1170c:	b2da      	uxtb	r2, r3
   1170e:	f64a 5347 	movw	r3, #44359	; 0xad47
   11712:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11716:	701a      	strb	r2, [r3, #0]
   11718:	e016      	b.n	11748 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CHECKSUM1)
   1171a:	f64a 5347 	movw	r3, #44359	; 0xad47
   1171e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11722:	781b      	ldrb	r3, [r3, #0]
   11724:	2b08      	cmp	r3, #8
   11726:	d10f      	bne.n	11748 <parse_ubx+0x2d4>
  {
    if (c != ck_b)
   11728:	f64a 534c 	movw	r3, #44364	; 0xad4c
   1172c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11730:	781b      	ldrb	r3, [r3, #0]
   11732:	79fa      	ldrb	r2, [r7, #7]
   11734:	429a      	cmp	r2, r3
   11736:	d000      	beq.n	1173a <parse_ubx+0x2c6>
      goto error;
   11738:	e007      	b.n	1174a <parse_ubx+0x2d6>
    gps_msg_received = TRUE;
   1173a:	f64a 4345 	movw	r3, #44101	; 0xac45
   1173e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11742:	2201      	movs	r2, #1
   11744:	701a      	strb	r2, [r3, #0]
    goto restart;
   11746:	e000      	b.n	1174a <parse_ubx+0x2d6>
  }
  else {}
//#endif
  return;
   11748:	e006      	b.n	11758 <parse_ubx+0x2e4>
 error:  
 restart:
  ubx_status = UNINIT;
   1174a:	f64a 5347 	movw	r3, #44359	; 0xad47
   1174e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11752:	2200      	movs	r2, #0
   11754:	701a      	strb	r2, [r3, #0]
  return;
   11756:	bf00      	nop
}
   11758:	370c      	adds	r7, #12
   1175a:	46bd      	mov	sp, r7
   1175c:	f85d 7b04 	ldr.w	r7, [sp], #4
   11760:	4770      	bx	lr
   11762:	bf00      	nop

00011764 <__vector_30>:

#ifdef SIMUL
ReceiveUart0(parse_ubx);
#else
ReceiveUart1(parse_ubx);
   11764:	b580      	push	{r7, lr}
   11766:	b082      	sub	sp, #8
   11768:	af00      	add	r7, sp, #0
   1176a:	f242 039c 	movw	r3, #8348	; 0x209c
   1176e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11772:	781b      	ldrb	r3, [r3, #0]
   11774:	71fb      	strb	r3, [r7, #7]
   11776:	79fb      	ldrb	r3, [r7, #7]
   11778:	4618      	mov	r0, r3
   1177a:	f7ff fe7b 	bl	11474 <parse_ubx>
   1177e:	3708      	adds	r7, #8
   11780:	46bd      	mov	sp, r7
   11782:	bd80      	pop	{r7, pc}
   11784:	f3af 8000 	nop.w

00011788 <ir_init>:
float ir_rad_of_ir = IR_RAD_OF_IR_CONTRAST / IR_DEFAULT_CONTRAST;

static struct adc_buf buf_ir1;
static struct adc_buf buf_ir2;

void ir_init(void) {
   11788:	b580      	push	{r7, lr}
   1178a:	af00      	add	r7, sp, #0
  RadOfIrFromConstrast(IR_DEFAULT_CONTRAST);
   1178c:	f240 238c 	movw	r3, #652	; 0x28c
   11790:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11794:	f24c 228f 	movw	r2, #49807	; 0xc28f
   11798:	f6c3 3275 	movt	r2, #15221	; 0x3b75
   1179c:	601a      	str	r2, [r3, #0]
  adc_buf_channel(ADC_CHANNEL_IR1, &buf_ir1);
   1179e:	2001      	movs	r0, #1
   117a0:	f64a 5154 	movw	r1, #44372	; 0xad54
   117a4:	f2c2 0100 	movt	r1, #8192	; 0x2000
   117a8:	f7ff fc82 	bl	110b0 <adc_buf_channel>
  adc_buf_channel(ADC_CHANNEL_IR2, &buf_ir2);
   117ac:	2002      	movs	r0, #2
   117ae:	f64a 5198 	movw	r1, #44440	; 0xad98
   117b2:	f2c2 0100 	movt	r1, #8192	; 0x2000
   117b6:	f7ff fc7b 	bl	110b0 <adc_buf_channel>
}
   117ba:	bd80      	pop	{r7, pc}

000117bc <ir_update>:
int16_t x1 = 1;
int16_t x2 = 2;
*/
// end

void ir_update(void) {
   117bc:	b480      	push	{r7}
   117be:	b083      	sub	sp, #12
   117c0:	af00      	add	r7, sp, #0
#ifndef SIMUL
  int16_t x1_mean = buf_ir1.sum/AV_NB_SAMPLE;
   117c2:	f64a 5354 	movw	r3, #44372	; 0xad54
   117c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117ca:	881b      	ldrh	r3, [r3, #0]
   117cc:	095b      	lsrs	r3, r3, #5
   117ce:	b29b      	uxth	r3, r3
   117d0:	80fb      	strh	r3, [r7, #6]
  int16_t x2_mean = buf_ir2.sum/AV_NB_SAMPLE;
   117d2:	f64a 5398 	movw	r3, #44440	; 0xad98
   117d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117da:	881b      	ldrh	r3, [r3, #0]
   117dc:	095b      	lsrs	r3, r3, #5
   117de:	b29b      	uxth	r3, r3
   117e0:	80bb      	strh	r3, [r7, #4]
    if( x1 < -900 ) x1 = x2 % x1;
    x2_mean = x2 ++;
    if( x2 > 110 ) x2 = x1 % x2;
    */
    // end
  ir_roll = IR_RollOfIrs(x1_mean, x2_mean) - ir_roll_neutral;
   117e2:	88fb      	ldrh	r3, [r7, #6]
   117e4:	425b      	negs	r3, r3
   117e6:	b29a      	uxth	r2, r3
   117e8:	88bb      	ldrh	r3, [r7, #4]
   117ea:	1ad3      	subs	r3, r2, r3
   117ec:	b29a      	uxth	r2, r3
   117ee:	f240 2386 	movw	r3, #646	; 0x286
   117f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117f6:	881b      	ldrh	r3, [r3, #0]
   117f8:	b29b      	uxth	r3, r3
   117fa:	1ad3      	subs	r3, r2, r3
   117fc:	b29b      	uxth	r3, r3
   117fe:	b29a      	uxth	r2, r3
   11800:	f64a 5350 	movw	r3, #44368	; 0xad50
   11804:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11808:	801a      	strh	r2, [r3, #0]
  ir_pitch = IR_PitchOfIrs(x1_mean, x2_mean) - ir_pitch_neutral;
   1180a:	88ba      	ldrh	r2, [r7, #4]
   1180c:	88fb      	ldrh	r3, [r7, #6]
   1180e:	1ad3      	subs	r3, r2, r3
   11810:	b29a      	uxth	r2, r3
   11812:	f240 2388 	movw	r3, #648	; 0x288
   11816:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1181a:	881b      	ldrh	r3, [r3, #0]
   1181c:	b29b      	uxth	r3, r3
   1181e:	1ad3      	subs	r3, r2, r3
   11820:	b29b      	uxth	r3, r3
   11822:	b29a      	uxth	r2, r3
   11824:	f64a 5352 	movw	r3, #44370	; 0xad52
   11828:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1182c:	801a      	strh	r2, [r3, #0]
#else
  extern volatile int16_t simul_ir_roll, simul_ir_pitch;
  ir_roll = simul_ir_roll -  ir_roll_neutral; 
  ir_pitch = simul_ir_pitch - ir_pitch_neutral;  
#endif
}
   1182e:	370c      	adds	r7, #12
   11830:	46bd      	mov	sp, r7
   11832:	f85d 7b04 	ldr.w	r7, [sp], #4
   11836:	4770      	bx	lr

00011838 <ir_gain_calib>:

/* 
   Contrast measurement
*/

void ir_gain_calib(void) {      // Plane nose down
   11838:	b580      	push	{r7, lr}
   1183a:	af00      	add	r7, sp, #0
  /* plane nose down -> negativ value */
  ir_contrast = - ir_pitch;
   1183c:	f64a 5352 	movw	r3, #44370	; 0xad52
   11840:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11844:	881b      	ldrh	r3, [r3, #0]
   11846:	b29b      	uxth	r3, r3
   11848:	425b      	negs	r3, r3
   1184a:	b29b      	uxth	r3, r3
   1184c:	b29a      	uxth	r2, r3
   1184e:	f240 2384 	movw	r3, #644	; 0x284
   11852:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11856:	801a      	strh	r2, [r3, #0]
  RadOfIrFromConstrast(ir_contrast);
   11858:	f240 2384 	movw	r3, #644	; 0x284
   1185c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11860:	881b      	ldrh	r3, [r3, #0]
   11862:	b21b      	sxth	r3, r3
   11864:	4618      	mov	r0, r3
   11866:	f006 f891 	bl	1798c <__aeabi_i2d>
   1186a:	4602      	mov	r2, r0
   1186c:	460b      	mov	r3, r1
   1186e:	f04f 0000 	mov.w	r0, #0
   11872:	f04f 0100 	mov.w	r1, #0
   11876:	f6c3 71e8 	movt	r1, #16360	; 0x3fe8
   1187a:	f006 fa17 	bl	17cac <__aeabi_ddiv>
   1187e:	4602      	mov	r2, r0
   11880:	460b      	mov	r3, r1
   11882:	4610      	mov	r0, r2
   11884:	4619      	mov	r1, r3
   11886:	f006 fbc9 	bl	1801c <__aeabi_d2f>
   1188a:	4602      	mov	r2, r0
   1188c:	f240 238c 	movw	r3, #652	; 0x28c
   11890:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11894:	601a      	str	r2, [r3, #0]
}
   11896:	bd80      	pop	{r7, pc}

00011898 <roll_pitch_pid_run>:
float pitch_of_vz_pgain = CLIMB_PITCH_OF_VZ_PGAIN;
float pitch_of_vz = 0.;


/** \brief Computes ::desired_aileron and ::desired_elevator from attitude estimation and expected attitude. */
void roll_pitch_pid_run( void ) {
   11898:	b590      	push	{r4, r7, lr}
   1189a:	b083      	sub	sp, #12
   1189c:	af00      	add	r7, sp, #0
  float err =  estimator_phi - desired_roll;
   1189e:	f24b 0370 	movw	r3, #45168	; 0xb070
   118a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118a6:	681a      	ldr	r2, [r3, #0]
   118a8:	f64a 53dc 	movw	r3, #44508	; 0xaddc
   118ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118b0:	681b      	ldr	r3, [r3, #0]
   118b2:	4610      	mov	r0, r2
   118b4:	4619      	mov	r1, r3
   118b6:	f006 fc05 	bl	180c4 <__aeabi_fsub>
   118ba:	4603      	mov	r3, r0
   118bc:	607b      	str	r3, [r7, #4]
  desired_aileron = TRIM_PPRZ(roll_pgain * err);
   118be:	f240 2390 	movw	r3, #656	; 0x290
   118c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118c6:	681b      	ldr	r3, [r3, #0]
   118c8:	4618      	mov	r0, r3
   118ca:	6879      	ldr	r1, [r7, #4]
   118cc:	f006 fd04 	bl	182d8 <__aeabi_fmul>
   118d0:	4603      	mov	r3, r0
   118d2:	4618      	mov	r0, r3
   118d4:	f04f 0100 	mov.w	r1, #0
   118d8:	f2cc 6116 	movt	r1, #50710	; 0xc616
   118dc:	f006 fe9a 	bl	18614 <__aeabi_fcmplt>
   118e0:	4603      	mov	r3, r0
   118e2:	2b00      	cmp	r3, #0
   118e4:	d002      	beq.n	118ec <roll_pitch_pid_run+0x54>
   118e6:	f64d 2280 	movw	r2, #55936	; 0xda80
   118ea:	e026      	b.n	1193a <roll_pitch_pid_run+0xa2>
   118ec:	f240 2390 	movw	r3, #656	; 0x290
   118f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118f4:	681b      	ldr	r3, [r3, #0]
   118f6:	4618      	mov	r0, r3
   118f8:	6879      	ldr	r1, [r7, #4]
   118fa:	f006 fced 	bl	182d8 <__aeabi_fmul>
   118fe:	4603      	mov	r3, r0
   11900:	4618      	mov	r0, r3
   11902:	f04f 0100 	mov.w	r1, #0
   11906:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1190a:	f006 fea1 	bl	18650 <__aeabi_fcmpgt>
   1190e:	4603      	mov	r3, r0
   11910:	2b00      	cmp	r3, #0
   11912:	d002      	beq.n	1191a <roll_pitch_pid_run+0x82>
   11914:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11918:	e00e      	b.n	11938 <roll_pitch_pid_run+0xa0>
   1191a:	f240 2390 	movw	r3, #656	; 0x290
   1191e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11922:	681b      	ldr	r3, [r3, #0]
   11924:	4618      	mov	r0, r3
   11926:	6879      	ldr	r1, [r7, #4]
   11928:	f006 fcd6 	bl	182d8 <__aeabi_fmul>
   1192c:	4603      	mov	r3, r0
   1192e:	4618      	mov	r0, r3
   11930:	f006 fe98 	bl	18664 <__aeabi_f2iz>
   11934:	4603      	mov	r3, r0
   11936:	b29b      	uxth	r3, r3
   11938:	b29a      	uxth	r2, r3
   1193a:	f64a 53e6 	movw	r3, #44518	; 0xade6
   1193e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11942:	801a      	strh	r2, [r3, #0]
  if (pitch_of_roll <0.)
   11944:	f64a 53ec 	movw	r3, #44524	; 0xadec
   11948:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1194c:	681b      	ldr	r3, [r3, #0]
   1194e:	4618      	mov	r0, r3
   11950:	f04f 0100 	mov.w	r1, #0
   11954:	f006 fe5e 	bl	18614 <__aeabi_fcmplt>
   11958:	4603      	mov	r3, r0
   1195a:	2b00      	cmp	r3, #0
   1195c:	d006      	beq.n	1196c <roll_pitch_pid_run+0xd4>
    pitch_of_roll = 0.;
   1195e:	f64a 53ec 	movw	r3, #44524	; 0xadec
   11962:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11966:	f04f 0200 	mov.w	r2, #0
   1196a:	601a      	str	r2, [r3, #0]
  err = -(estimator_theta - desired_pitch - pitch_of_roll * fabs(estimator_phi));
   1196c:	f24b 0378 	movw	r3, #45176	; 0xb078
   11970:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11974:	681a      	ldr	r2, [r3, #0]
   11976:	f64a 53e0 	movw	r3, #44512	; 0xade0
   1197a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1197e:	681b      	ldr	r3, [r3, #0]
   11980:	4610      	mov	r0, r2
   11982:	4619      	mov	r1, r3
   11984:	f006 fb9e 	bl	180c4 <__aeabi_fsub>
   11988:	4603      	mov	r3, r0
   1198a:	461c      	mov	r4, r3
   1198c:	f24b 0370 	movw	r3, #45168	; 0xb070
   11990:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11994:	681b      	ldr	r3, [r3, #0]
   11996:	4618      	mov	r0, r3
   11998:	f04f 0100 	mov.w	r1, #0
   1199c:	f006 fe3a 	bl	18614 <__aeabi_fcmplt>
   119a0:	4603      	mov	r3, r0
   119a2:	2b00      	cmp	r3, #0
   119a4:	d007      	beq.n	119b6 <roll_pitch_pid_run+0x11e>
   119a6:	f24b 0370 	movw	r3, #45168	; 0xb070
   119aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119ae:	681b      	ldr	r3, [r3, #0]
   119b0:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   119b4:	e004      	b.n	119c0 <roll_pitch_pid_run+0x128>
   119b6:	f24b 0370 	movw	r3, #45168	; 0xb070
   119ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119be:	681a      	ldr	r2, [r3, #0]
   119c0:	f64a 53ec 	movw	r3, #44524	; 0xadec
   119c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119c8:	681b      	ldr	r3, [r3, #0]
   119ca:	4610      	mov	r0, r2
   119cc:	4619      	mov	r1, r3
   119ce:	f006 fc83 	bl	182d8 <__aeabi_fmul>
   119d2:	4603      	mov	r3, r0
   119d4:	4620      	mov	r0, r4
   119d6:	4619      	mov	r1, r3
   119d8:	f006 fb74 	bl	180c4 <__aeabi_fsub>
   119dc:	4603      	mov	r3, r0
   119de:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   119e2:	607b      	str	r3, [r7, #4]
  desired_elevator = TRIM_PPRZ(pitch_pgain * err);
   119e4:	f240 2394 	movw	r3, #660	; 0x294
   119e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119ec:	681b      	ldr	r3, [r3, #0]
   119ee:	4618      	mov	r0, r3
   119f0:	6879      	ldr	r1, [r7, #4]
   119f2:	f006 fc71 	bl	182d8 <__aeabi_fmul>
   119f6:	4603      	mov	r3, r0
   119f8:	4618      	mov	r0, r3
   119fa:	f04f 0100 	mov.w	r1, #0
   119fe:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11a02:	f006 fe07 	bl	18614 <__aeabi_fcmplt>
   11a06:	4603      	mov	r3, r0
   11a08:	2b00      	cmp	r3, #0
   11a0a:	d002      	beq.n	11a12 <roll_pitch_pid_run+0x17a>
   11a0c:	f64d 2280 	movw	r2, #55936	; 0xda80
   11a10:	e026      	b.n	11a60 <roll_pitch_pid_run+0x1c8>
   11a12:	f240 2394 	movw	r3, #660	; 0x294
   11a16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a1a:	681b      	ldr	r3, [r3, #0]
   11a1c:	4618      	mov	r0, r3
   11a1e:	6879      	ldr	r1, [r7, #4]
   11a20:	f006 fc5a 	bl	182d8 <__aeabi_fmul>
   11a24:	4603      	mov	r3, r0
   11a26:	4618      	mov	r0, r3
   11a28:	f04f 0100 	mov.w	r1, #0
   11a2c:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11a30:	f006 fe0e 	bl	18650 <__aeabi_fcmpgt>
   11a34:	4603      	mov	r3, r0
   11a36:	2b00      	cmp	r3, #0
   11a38:	d002      	beq.n	11a40 <roll_pitch_pid_run+0x1a8>
   11a3a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11a3e:	e00e      	b.n	11a5e <roll_pitch_pid_run+0x1c6>
   11a40:	f240 2394 	movw	r3, #660	; 0x294
   11a44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a48:	681b      	ldr	r3, [r3, #0]
   11a4a:	4618      	mov	r0, r3
   11a4c:	6879      	ldr	r1, [r7, #4]
   11a4e:	f006 fc43 	bl	182d8 <__aeabi_fmul>
   11a52:	4603      	mov	r3, r0
   11a54:	4618      	mov	r0, r3
   11a56:	f006 fe05 	bl	18664 <__aeabi_f2iz>
   11a5a:	4603      	mov	r3, r0
   11a5c:	b29b      	uxth	r3, r3
   11a5e:	b29a      	uxth	r2, r3
   11a60:	f64a 53e8 	movw	r3, #44520	; 0xade8
   11a64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a68:	801a      	strh	r2, [r3, #0]
}
   11a6a:	370c      	adds	r7, #12
   11a6c:	46bd      	mov	sp, r7
   11a6e:	bd90      	pop	{r4, r7, pc}

00011a70 <course_pid_run>:

float course_pgain = COURSE_PGAIN;
float desired_course = 0.;
float max_roll = MAX_ROLL;

void course_pid_run( void ) {
   11a70:	b580      	push	{r7, lr}
   11a72:	b082      	sub	sp, #8
   11a74:	af00      	add	r7, sp, #0
  float err = estimator_hspeed_dir - desired_course;
   11a76:	f24b 03a0 	movw	r3, #45216	; 0xb0a0
   11a7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a7e:	681a      	ldr	r2, [r3, #0]
   11a80:	f64a 53f4 	movw	r3, #44532	; 0xadf4
   11a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a88:	681b      	ldr	r3, [r3, #0]
   11a8a:	4610      	mov	r0, r2
   11a8c:	4619      	mov	r1, r3
   11a8e:	f006 fb19 	bl	180c4 <__aeabi_fsub>
   11a92:	4603      	mov	r3, r0
   11a94:	607b      	str	r3, [r7, #4]
  NORM_RAD_ANGLE(err);
   11a96:	e013      	b.n	11ac0 <course_pid_run+0x50>
   11a98:	6878      	ldr	r0, [r7, #4]
   11a9a:	f005 ff89 	bl	179b0 <__aeabi_f2d>
   11a9e:	4602      	mov	r2, r0
   11aa0:	460b      	mov	r3, r1
   11aa2:	4610      	mov	r0, r2
   11aa4:	4619      	mov	r1, r3
   11aa6:	a348      	add	r3, pc, #288	; (adr r3, 11bc8 <course_pid_run+0x158>)
   11aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
   11aac:	f005 fe20 	bl	176f0 <__aeabi_dsub>
   11ab0:	4602      	mov	r2, r0
   11ab2:	460b      	mov	r3, r1
   11ab4:	4610      	mov	r0, r2
   11ab6:	4619      	mov	r1, r3
   11ab8:	f006 fab0 	bl	1801c <__aeabi_d2f>
   11abc:	4603      	mov	r3, r0
   11abe:	607b      	str	r3, [r7, #4]
   11ac0:	6878      	ldr	r0, [r7, #4]
   11ac2:	f005 ff75 	bl	179b0 <__aeabi_f2d>
   11ac6:	4602      	mov	r2, r0
   11ac8:	460b      	mov	r3, r1
   11aca:	4610      	mov	r0, r2
   11acc:	4619      	mov	r1, r3
   11ace:	a340      	add	r3, pc, #256	; (adr r3, 11bd0 <course_pid_run+0x160>)
   11ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
   11ad4:	f006 fa50 	bl	17f78 <__aeabi_dcmpgt>
   11ad8:	4603      	mov	r3, r0
   11ada:	2b00      	cmp	r3, #0
   11adc:	d1dc      	bne.n	11a98 <course_pid_run+0x28>
   11ade:	e013      	b.n	11b08 <course_pid_run+0x98>
   11ae0:	6878      	ldr	r0, [r7, #4]
   11ae2:	f005 ff65 	bl	179b0 <__aeabi_f2d>
   11ae6:	4602      	mov	r2, r0
   11ae8:	460b      	mov	r3, r1
   11aea:	4610      	mov	r0, r2
   11aec:	4619      	mov	r1, r3
   11aee:	a336      	add	r3, pc, #216	; (adr r3, 11bc8 <course_pid_run+0x158>)
   11af0:	e9d3 2300 	ldrd	r2, r3, [r3]
   11af4:	f005 fdfe 	bl	176f4 <__adddf3>
   11af8:	4602      	mov	r2, r0
   11afa:	460b      	mov	r3, r1
   11afc:	4610      	mov	r0, r2
   11afe:	4619      	mov	r1, r3
   11b00:	f006 fa8c 	bl	1801c <__aeabi_d2f>
   11b04:	4603      	mov	r3, r0
   11b06:	607b      	str	r3, [r7, #4]
   11b08:	6878      	ldr	r0, [r7, #4]
   11b0a:	f005 ff51 	bl	179b0 <__aeabi_f2d>
   11b0e:	4602      	mov	r2, r0
   11b10:	460b      	mov	r3, r1
   11b12:	4610      	mov	r0, r2
   11b14:	4619      	mov	r1, r3
   11b16:	a330      	add	r3, pc, #192	; (adr r3, 11bd8 <course_pid_run+0x168>)
   11b18:	e9d3 2300 	ldrd	r2, r3, [r3]
   11b1c:	f006 fa0e 	bl	17f3c <__aeabi_dcmplt>
   11b20:	4603      	mov	r3, r0
   11b22:	2b00      	cmp	r3, #0
   11b24:	d1dc      	bne.n	11ae0 <course_pid_run+0x70>
  nav_desired_roll = course_pgain * err; //  * fspeed / AIR_SPEED;
   11b26:	f240 239c 	movw	r3, #668	; 0x29c
   11b2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b2e:	681b      	ldr	r3, [r3, #0]
   11b30:	4618      	mov	r0, r3
   11b32:	6879      	ldr	r1, [r7, #4]
   11b34:	f006 fbd0 	bl	182d8 <__aeabi_fmul>
   11b38:	4603      	mov	r3, r0
   11b3a:	461a      	mov	r2, r3
   11b3c:	f64a 6338 	movw	r3, #44600	; 0xae38
   11b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b44:	601a      	str	r2, [r3, #0]
  if (nav_desired_roll > max_roll)
   11b46:	f64a 6338 	movw	r3, #44600	; 0xae38
   11b4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b4e:	681a      	ldr	r2, [r3, #0]
   11b50:	f240 23a0 	movw	r3, #672	; 0x2a0
   11b54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b58:	681b      	ldr	r3, [r3, #0]
   11b5a:	4610      	mov	r0, r2
   11b5c:	4619      	mov	r1, r3
   11b5e:	f006 fd77 	bl	18650 <__aeabi_fcmpgt>
   11b62:	4603      	mov	r3, r0
   11b64:	2b00      	cmp	r3, #0
   11b66:	d00a      	beq.n	11b7e <course_pid_run+0x10e>
    nav_desired_roll = max_roll;
   11b68:	f240 23a0 	movw	r3, #672	; 0x2a0
   11b6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b70:	681a      	ldr	r2, [r3, #0]
   11b72:	f64a 6338 	movw	r3, #44600	; 0xae38
   11b76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b7a:	601a      	str	r2, [r3, #0]
   11b7c:	e01e      	b.n	11bbc <course_pid_run+0x14c>
  else if (nav_desired_roll < -max_roll)
   11b7e:	f240 23a0 	movw	r3, #672	; 0x2a0
   11b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b86:	681b      	ldr	r3, [r3, #0]
   11b88:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11b8c:	f64a 6338 	movw	r3, #44600	; 0xae38
   11b90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b94:	681b      	ldr	r3, [r3, #0]
   11b96:	4610      	mov	r0, r2
   11b98:	4619      	mov	r1, r3
   11b9a:	f006 fd59 	bl	18650 <__aeabi_fcmpgt>
   11b9e:	4603      	mov	r3, r0
   11ba0:	2b00      	cmp	r3, #0
   11ba2:	d00b      	beq.n	11bbc <course_pid_run+0x14c>
    nav_desired_roll = -max_roll;
   11ba4:	f240 23a0 	movw	r3, #672	; 0x2a0
   11ba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bac:	681b      	ldr	r3, [r3, #0]
   11bae:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11bb2:	f64a 6338 	movw	r3, #44600	; 0xae38
   11bb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bba:	601a      	str	r2, [r3, #0]
}
   11bbc:	3708      	adds	r7, #8
   11bbe:	46bd      	mov	sp, r7
   11bc0:	bd80      	pop	{r7, pc}
   11bc2:	bf00      	nop
   11bc4:	f3af 8000 	nop.w
   11bc8:	54442d18 	.word	0x54442d18
   11bcc:	401921fb 	.word	0x401921fb
   11bd0:	54442d18 	.word	0x54442d18
   11bd4:	400921fb 	.word	0x400921fb
   11bd8:	54442d18 	.word	0x54442d18
   11bdc:	c00921fb 	.word	0xc00921fb

00011be0 <climb_pid_run>:

#define MAX_CLIMB_SUM_ERR 100
#define MAX_PITCH_CLIMB_SUM_ERR 100

/** \brief Computes desired_gaz and desired_pitch from desired_climb */
void climb_pid_run ( void ) {
   11be0:	b5b0      	push	{r4, r5, r7, lr}
   11be2:	b082      	sub	sp, #8
   11be4:	af00      	add	r7, sp, #0
  float err  = estimator_z_dot - desired_climb;
   11be6:	f24b 0384 	movw	r3, #45188	; 0xb084
   11bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bee:	681a      	ldr	r2, [r3, #0]
   11bf0:	f64a 53f8 	movw	r3, #44536	; 0xadf8
   11bf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bf8:	681b      	ldr	r3, [r3, #0]
   11bfa:	4610      	mov	r0, r2
   11bfc:	4619      	mov	r1, r3
   11bfe:	f006 fa61 	bl	180c4 <__aeabi_fsub>
   11c02:	4603      	mov	r3, r0
   11c04:	607b      	str	r3, [r7, #4]
  float fgaz;
  if (auto_pitch) { /* gaz constant */
   11c06:	f64a 2397 	movw	r3, #43671	; 0xaa97
   11c0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c0e:	781b      	ldrb	r3, [r3, #0]
   11c10:	2b00      	cmp	r3, #0
   11c12:	f000 80a8 	beq.w	11d66 <climb_pid_run+0x186>
    desired_gaz = nav_desired_gaz;
   11c16:	f64a 6330 	movw	r3, #44592	; 0xae30
   11c1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c1e:	881b      	ldrh	r3, [r3, #0]
   11c20:	b29a      	uxth	r2, r3
   11c22:	f64a 53e4 	movw	r3, #44516	; 0xade4
   11c26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c2a:	801a      	strh	r2, [r3, #0]
    desired_pitch = climb_pitch_pgain * (err + climb_pitch_igain * climb_pitch_sum_err);
   11c2c:	f240 23a8 	movw	r3, #680	; 0x2a8
   11c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c34:	681a      	ldr	r2, [r3, #0]
   11c36:	f64a 6304 	movw	r3, #44548	; 0xae04
   11c3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c3e:	681b      	ldr	r3, [r3, #0]
   11c40:	4610      	mov	r0, r2
   11c42:	4619      	mov	r1, r3
   11c44:	f006 fb48 	bl	182d8 <__aeabi_fmul>
   11c48:	4603      	mov	r3, r0
   11c4a:	4618      	mov	r0, r3
   11c4c:	6879      	ldr	r1, [r7, #4]
   11c4e:	f006 fa3b 	bl	180c8 <__addsf3>
   11c52:	4603      	mov	r3, r0
   11c54:	461a      	mov	r2, r3
   11c56:	f240 23a4 	movw	r3, #676	; 0x2a4
   11c5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c5e:	681b      	ldr	r3, [r3, #0]
   11c60:	4610      	mov	r0, r2
   11c62:	4619      	mov	r1, r3
   11c64:	f006 fb38 	bl	182d8 <__aeabi_fmul>
   11c68:	4603      	mov	r3, r0
   11c6a:	461a      	mov	r2, r3
   11c6c:	f64a 53e0 	movw	r3, #44512	; 0xade0
   11c70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c74:	601a      	str	r2, [r3, #0]
    if (desired_pitch > max_pitch)
   11c76:	f64a 53e0 	movw	r3, #44512	; 0xade0
   11c7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c7e:	681a      	ldr	r2, [r3, #0]
   11c80:	f240 23ac 	movw	r3, #684	; 0x2ac
   11c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c88:	681b      	ldr	r3, [r3, #0]
   11c8a:	4610      	mov	r0, r2
   11c8c:	4619      	mov	r1, r3
   11c8e:	f006 fcdf 	bl	18650 <__aeabi_fcmpgt>
   11c92:	4603      	mov	r3, r0
   11c94:	2b00      	cmp	r3, #0
   11c96:	d009      	beq.n	11cac <climb_pid_run+0xcc>
      desired_pitch = max_pitch;
   11c98:	f240 23ac 	movw	r3, #684	; 0x2ac
   11c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ca0:	681a      	ldr	r2, [r3, #0]
   11ca2:	f64a 53e0 	movw	r3, #44512	; 0xade0
   11ca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11caa:	601a      	str	r2, [r3, #0]
    if (desired_pitch < min_pitch)
   11cac:	f64a 53e0 	movw	r3, #44512	; 0xade0
   11cb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cb4:	681a      	ldr	r2, [r3, #0]
   11cb6:	f240 23b0 	movw	r3, #688	; 0x2b0
   11cba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cbe:	681b      	ldr	r3, [r3, #0]
   11cc0:	4610      	mov	r0, r2
   11cc2:	4619      	mov	r1, r3
   11cc4:	f006 fca6 	bl	18614 <__aeabi_fcmplt>
   11cc8:	4603      	mov	r3, r0
   11cca:	2b00      	cmp	r3, #0
   11ccc:	d009      	beq.n	11ce2 <climb_pid_run+0x102>
      desired_pitch = min_pitch;
   11cce:	f240 23b0 	movw	r3, #688	; 0x2b0
   11cd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cd6:	681a      	ldr	r2, [r3, #0]
   11cd8:	f64a 53e0 	movw	r3, #44512	; 0xade0
   11cdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ce0:	601a      	str	r2, [r3, #0]
    climb_pitch_sum_err += err;
   11ce2:	f64a 6304 	movw	r3, #44548	; 0xae04
   11ce6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cea:	681b      	ldr	r3, [r3, #0]
   11cec:	4618      	mov	r0, r3
   11cee:	6879      	ldr	r1, [r7, #4]
   11cf0:	f006 f9ea 	bl	180c8 <__addsf3>
   11cf4:	4603      	mov	r3, r0
   11cf6:	461a      	mov	r2, r3
   11cf8:	f64a 6304 	movw	r3, #44548	; 0xae04
   11cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d00:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err > MAX_PITCH_CLIMB_SUM_ERR)
   11d02:	f64a 6304 	movw	r3, #44548	; 0xae04
   11d06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d0a:	681b      	ldr	r3, [r3, #0]
   11d0c:	4618      	mov	r0, r3
   11d0e:	f04f 0100 	mov.w	r1, #0
   11d12:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   11d16:	f006 fc9b 	bl	18650 <__aeabi_fcmpgt>
   11d1a:	4603      	mov	r3, r0
   11d1c:	2b00      	cmp	r3, #0
   11d1e:	d008      	beq.n	11d32 <climb_pid_run+0x152>
      climb_pitch_sum_err = MAX_PITCH_CLIMB_SUM_ERR;
   11d20:	f64a 6304 	movw	r3, #44548	; 0xae04
   11d24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d28:	f04f 0200 	mov.w	r2, #0
   11d2c:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   11d30:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err < - MAX_PITCH_CLIMB_SUM_ERR)
   11d32:	f64a 6304 	movw	r3, #44548	; 0xae04
   11d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d3a:	681b      	ldr	r3, [r3, #0]
   11d3c:	4618      	mov	r0, r3
   11d3e:	f04f 0100 	mov.w	r1, #0
   11d42:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   11d46:	f006 fc65 	bl	18614 <__aeabi_fcmplt>
   11d4a:	4603      	mov	r3, r0
   11d4c:	2b00      	cmp	r3, #0
   11d4e:	d100      	bne.n	11d52 <climb_pid_run+0x172>
   11d50:	e109      	b.n	11f66 <climb_pid_run+0x386>
      climb_pitch_sum_err = - MAX_PITCH_CLIMB_SUM_ERR; 
   11d52:	f64a 6304 	movw	r3, #44548	; 0xae04
   11d56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d5a:	f04f 0200 	mov.w	r2, #0
   11d5e:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   11d62:	601a      	str	r2, [r3, #0]
   11d64:	e0ff      	b.n	11f66 <climb_pid_run+0x386>
  } else { /* pitch almost constant */
    /* pitch offset for climb */
    pitch_of_vz = (desired_climb > 0) ? desired_climb * pitch_of_vz_pgain : 0.;
   11d66:	f64a 53f8 	movw	r3, #44536	; 0xadf8
   11d6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d6e:	681b      	ldr	r3, [r3, #0]
   11d70:	4618      	mov	r0, r3
   11d72:	f04f 0100 	mov.w	r1, #0
   11d76:	f006 fc6b 	bl	18650 <__aeabi_fcmpgt>
   11d7a:	4603      	mov	r3, r0
   11d7c:	2b00      	cmp	r3, #0
   11d7e:	d010      	beq.n	11da2 <climb_pid_run+0x1c2>
   11d80:	f64a 53f8 	movw	r3, #44536	; 0xadf8
   11d84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d88:	681a      	ldr	r2, [r3, #0]
   11d8a:	f240 2398 	movw	r3, #664	; 0x298
   11d8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d92:	681b      	ldr	r3, [r3, #0]
   11d94:	4610      	mov	r0, r2
   11d96:	4619      	mov	r1, r3
   11d98:	f006 fa9e 	bl	182d8 <__aeabi_fmul>
   11d9c:	4603      	mov	r3, r0
   11d9e:	461a      	mov	r2, r3
   11da0:	e001      	b.n	11da6 <climb_pid_run+0x1c6>
   11da2:	f04f 0200 	mov.w	r2, #0
   11da6:	f64a 53f0 	movw	r3, #44528	; 0xadf0
   11daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11dae:	601a      	str	r2, [r3, #0]
    fgaz = climb_pgain * (err + climb_igain * climb_sum_err) + CLIMB_LEVEL_GAZ + CLIMB_GAZ_OF_CLIMB*desired_climb;
   11db0:	f64c 42cd 	movw	r2, #52429	; 0xcccd
   11db4:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
   11db8:	f64a 6300 	movw	r3, #44544	; 0xae00
   11dbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11dc0:	681b      	ldr	r3, [r3, #0]
   11dc2:	4610      	mov	r0, r2
   11dc4:	4619      	mov	r1, r3
   11dc6:	f006 fa87 	bl	182d8 <__aeabi_fmul>
   11dca:	4603      	mov	r3, r0
   11dcc:	4618      	mov	r0, r3
   11dce:	6879      	ldr	r1, [r7, #4]
   11dd0:	f006 f97a 	bl	180c8 <__addsf3>
   11dd4:	4603      	mov	r3, r0
   11dd6:	461a      	mov	r2, r3
   11dd8:	f24c 238f 	movw	r3, #49807	; 0xc28f
   11ddc:	f6cb 43f5 	movt	r3, #48373	; 0xbcf5
   11de0:	4610      	mov	r0, r2
   11de2:	4619      	mov	r1, r3
   11de4:	f006 fa78 	bl	182d8 <__aeabi_fmul>
   11de8:	4603      	mov	r3, r0
   11dea:	4618      	mov	r0, r3
   11dec:	f005 fde0 	bl	179b0 <__aeabi_f2d>
   11df0:	4602      	mov	r2, r0
   11df2:	460b      	mov	r3, r1
   11df4:	4610      	mov	r0, r2
   11df6:	4619      	mov	r1, r3
   11df8:	a35d      	add	r3, pc, #372	; (adr r3, 11f70 <climb_pid_run+0x390>)
   11dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
   11dfe:	f005 fc79 	bl	176f4 <__adddf3>
   11e02:	4602      	mov	r2, r0
   11e04:	460b      	mov	r3, r1
   11e06:	4614      	mov	r4, r2
   11e08:	461d      	mov	r5, r3
   11e0a:	f64a 53f8 	movw	r3, #44536	; 0xadf8
   11e0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e12:	681b      	ldr	r3, [r3, #0]
   11e14:	4618      	mov	r0, r3
   11e16:	f005 fdcb 	bl	179b0 <__aeabi_f2d>
   11e1a:	4602      	mov	r2, r0
   11e1c:	460b      	mov	r3, r1
   11e1e:	4610      	mov	r0, r2
   11e20:	4619      	mov	r1, r3
   11e22:	a355      	add	r3, pc, #340	; (adr r3, 11f78 <climb_pid_run+0x398>)
   11e24:	e9d3 2300 	ldrd	r2, r3, [r3]
   11e28:	f005 fe16 	bl	17a58 <__aeabi_dmul>
   11e2c:	4602      	mov	r2, r0
   11e2e:	460b      	mov	r3, r1
   11e30:	4620      	mov	r0, r4
   11e32:	4629      	mov	r1, r5
   11e34:	f005 fc5e 	bl	176f4 <__adddf3>
   11e38:	4602      	mov	r2, r0
   11e3a:	460b      	mov	r3, r1
   11e3c:	4610      	mov	r0, r2
   11e3e:	4619      	mov	r1, r3
   11e40:	f006 f8ec 	bl	1801c <__aeabi_d2f>
   11e44:	4603      	mov	r3, r0
   11e46:	603b      	str	r3, [r7, #0]
    climb_sum_err += err;
   11e48:	f64a 6300 	movw	r3, #44544	; 0xae00
   11e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e50:	681b      	ldr	r3, [r3, #0]
   11e52:	4618      	mov	r0, r3
   11e54:	6879      	ldr	r1, [r7, #4]
   11e56:	f006 f937 	bl	180c8 <__addsf3>
   11e5a:	4603      	mov	r3, r0
   11e5c:	461a      	mov	r2, r3
   11e5e:	f64a 6300 	movw	r3, #44544	; 0xae00
   11e62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e66:	601a      	str	r2, [r3, #0]
    if (climb_sum_err > MAX_CLIMB_SUM_ERR) climb_sum_err = MAX_CLIMB_SUM_ERR;
   11e68:	f64a 6300 	movw	r3, #44544	; 0xae00
   11e6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e70:	681b      	ldr	r3, [r3, #0]
   11e72:	4618      	mov	r0, r3
   11e74:	f04f 0100 	mov.w	r1, #0
   11e78:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   11e7c:	f006 fbe8 	bl	18650 <__aeabi_fcmpgt>
   11e80:	4603      	mov	r3, r0
   11e82:	2b00      	cmp	r3, #0
   11e84:	d008      	beq.n	11e98 <climb_pid_run+0x2b8>
   11e86:	f64a 6300 	movw	r3, #44544	; 0xae00
   11e8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e8e:	f04f 0200 	mov.w	r2, #0
   11e92:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   11e96:	601a      	str	r2, [r3, #0]
    if (climb_sum_err < - MAX_CLIMB_SUM_ERR) climb_sum_err = - MAX_CLIMB_SUM_ERR;
   11e98:	f64a 6300 	movw	r3, #44544	; 0xae00
   11e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ea0:	681b      	ldr	r3, [r3, #0]
   11ea2:	4618      	mov	r0, r3
   11ea4:	f04f 0100 	mov.w	r1, #0
   11ea8:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   11eac:	f006 fbb2 	bl	18614 <__aeabi_fcmplt>
   11eb0:	4603      	mov	r3, r0
   11eb2:	2b00      	cmp	r3, #0
   11eb4:	d008      	beq.n	11ec8 <climb_pid_run+0x2e8>
   11eb6:	f64a 6300 	movw	r3, #44544	; 0xae00
   11eba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ebe:	f04f 0200 	mov.w	r2, #0
   11ec2:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   11ec6:	601a      	str	r2, [r3, #0]
    desired_gaz = TRIM_UPPRZ(fgaz * MAX_PPRZ);
   11ec8:	6838      	ldr	r0, [r7, #0]
   11eca:	f04f 0100 	mov.w	r1, #0
   11ece:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11ed2:	f006 fa01 	bl	182d8 <__aeabi_fmul>
   11ed6:	4603      	mov	r3, r0
   11ed8:	4618      	mov	r0, r3
   11eda:	f04f 0100 	mov.w	r1, #0
   11ede:	f006 fb99 	bl	18614 <__aeabi_fcmplt>
   11ee2:	4603      	mov	r3, r0
   11ee4:	2b00      	cmp	r3, #0
   11ee6:	d001      	beq.n	11eec <climb_pid_run+0x30c>
   11ee8:	2200      	movs	r2, #0
   11eea:	e022      	b.n	11f32 <climb_pid_run+0x352>
   11eec:	6838      	ldr	r0, [r7, #0]
   11eee:	f04f 0100 	mov.w	r1, #0
   11ef2:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11ef6:	f006 f9ef 	bl	182d8 <__aeabi_fmul>
   11efa:	4603      	mov	r3, r0
   11efc:	4618      	mov	r0, r3
   11efe:	f04f 0100 	mov.w	r1, #0
   11f02:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11f06:	f006 fba3 	bl	18650 <__aeabi_fcmpgt>
   11f0a:	4603      	mov	r3, r0
   11f0c:	2b00      	cmp	r3, #0
   11f0e:	d002      	beq.n	11f16 <climb_pid_run+0x336>
   11f10:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11f14:	e00c      	b.n	11f30 <climb_pid_run+0x350>
   11f16:	6838      	ldr	r0, [r7, #0]
   11f18:	f04f 0100 	mov.w	r1, #0
   11f1c:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11f20:	f006 f9da 	bl	182d8 <__aeabi_fmul>
   11f24:	4603      	mov	r3, r0
   11f26:	4618      	mov	r0, r3
   11f28:	f006 fb9c 	bl	18664 <__aeabi_f2iz>
   11f2c:	4603      	mov	r3, r0
   11f2e:	b29b      	uxth	r3, r3
   11f30:	b29a      	uxth	r2, r3
   11f32:	f64a 53e4 	movw	r3, #44516	; 0xade4
   11f36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f3a:	801a      	strh	r2, [r3, #0]
    desired_pitch = nav_pitch + pitch_of_vz;
   11f3c:	f64a 6334 	movw	r3, #44596	; 0xae34
   11f40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f44:	681a      	ldr	r2, [r3, #0]
   11f46:	f64a 53f0 	movw	r3, #44528	; 0xadf0
   11f4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f4e:	681b      	ldr	r3, [r3, #0]
   11f50:	4610      	mov	r0, r2
   11f52:	4619      	mov	r1, r3
   11f54:	f006 f8b8 	bl	180c8 <__addsf3>
   11f58:	4603      	mov	r3, r0
   11f5a:	461a      	mov	r2, r3
   11f5c:	f64a 53e0 	movw	r3, #44512	; 0xade0
   11f60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f64:	601a      	str	r2, [r3, #0]
  }
}
   11f66:	3708      	adds	r7, #8
   11f68:	46bd      	mov	sp, r7
   11f6a:	bdb0      	pop	{r4, r5, r7, pc}
   11f6c:	f3af 8000 	nop.w
   11f70:	3d70a3d7 	.word	0x3d70a3d7
   11f74:	3fd3d70a 	.word	0x3fd3d70a
   11f78:	9999999a 	.word	0x9999999a
   11f7c:	3fc99999 	.word	0x3fc99999

00011f80 <altitude_pid_run>:

float altitude_pgain = ALTITUDE_PGAIN;


void altitude_pid_run(void) {
   11f80:	b580      	push	{r7, lr}
   11f82:	b082      	sub	sp, #8
   11f84:	af00      	add	r7, sp, #0
  float err = estimator_z - desired_altitude;
   11f86:	f24b 036c 	movw	r3, #45164	; 0xb06c
   11f8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f8e:	681a      	ldr	r2, [r3, #0]
   11f90:	f240 23b8 	movw	r3, #696	; 0x2b8
   11f94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f98:	681b      	ldr	r3, [r3, #0]
   11f9a:	4610      	mov	r0, r2
   11f9c:	4619      	mov	r1, r3
   11f9e:	f006 f891 	bl	180c4 <__aeabi_fsub>
   11fa2:	4603      	mov	r3, r0
   11fa4:	607b      	str	r3, [r7, #4]
  desired_climb = pre_climb + altitude_pgain * err;
   11fa6:	f240 23b4 	movw	r3, #692	; 0x2b4
   11faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fae:	681b      	ldr	r3, [r3, #0]
   11fb0:	4618      	mov	r0, r3
   11fb2:	6879      	ldr	r1, [r7, #4]
   11fb4:	f006 f990 	bl	182d8 <__aeabi_fmul>
   11fb8:	4603      	mov	r3, r0
   11fba:	461a      	mov	r2, r3
   11fbc:	f64a 53fc 	movw	r3, #44540	; 0xadfc
   11fc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fc4:	681b      	ldr	r3, [r3, #0]
   11fc6:	4610      	mov	r0, r2
   11fc8:	4619      	mov	r1, r3
   11fca:	f006 f87d 	bl	180c8 <__addsf3>
   11fce:	4603      	mov	r3, r0
   11fd0:	461a      	mov	r2, r3
   11fd2:	f64a 53f8 	movw	r3, #44536	; 0xadf8
   11fd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fda:	601a      	str	r2, [r3, #0]
  if (desired_climb < -CLIMB_MAX) desired_climb = -CLIMB_MAX;
   11fdc:	f64a 53f8 	movw	r3, #44536	; 0xadf8
   11fe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fe4:	681b      	ldr	r3, [r3, #0]
   11fe6:	4618      	mov	r0, r3
   11fe8:	f04f 0100 	mov.w	r1, #0
   11fec:	f6cb 7180 	movt	r1, #49024	; 0xbf80
   11ff0:	f006 fb10 	bl	18614 <__aeabi_fcmplt>
   11ff4:	4603      	mov	r3, r0
   11ff6:	2b00      	cmp	r3, #0
   11ff8:	d008      	beq.n	1200c <altitude_pid_run+0x8c>
   11ffa:	f64a 53f8 	movw	r3, #44536	; 0xadf8
   11ffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12002:	f04f 0200 	mov.w	r2, #0
   12006:	f6cb 7280 	movt	r2, #49024	; 0xbf80
   1200a:	601a      	str	r2, [r3, #0]
  if (desired_climb > CLIMB_MAX) desired_climb = CLIMB_MAX;
   1200c:	f64a 53f8 	movw	r3, #44536	; 0xadf8
   12010:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12014:	681b      	ldr	r3, [r3, #0]
   12016:	4618      	mov	r0, r3
   12018:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   1201c:	f006 fb18 	bl	18650 <__aeabi_fcmpgt>
   12020:	4603      	mov	r3, r0
   12022:	2b00      	cmp	r3, #0
   12024:	d006      	beq.n	12034 <altitude_pid_run+0xb4>
   12026:	f64a 53f8 	movw	r3, #44536	; 0xadf8
   1202a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1202e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   12032:	601a      	str	r2, [r3, #0]
}
   12034:	3708      	adds	r7, #8
   12036:	46bd      	mov	sp, r7
   12038:	bd80      	pop	{r7, pc}
   1203a:	bf00      	nop
   1203c:	f3af 8000 	nop.w

00012040 <auto_nav>:
#define GROUND_ALT 125.
#define SECURITY_ALT 150.
#define MAX_DIST_FROM_HOME 500.
#ifdef NAV_C

static inline void auto_nav(void) {
   12040:	b5f0      	push	{r4, r5, r6, r7, lr}
   12042:	b08b      	sub	sp, #44	; 0x2c
   12044:	af00      	add	r7, sp, #0
        NextBlock()
    }

}
#else*/
if(nav_block == 0)
   12046:	f64a 6309 	movw	r3, #44553	; 0xae09
   1204a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1204e:	781b      	ldrb	r3, [r3, #0]
   12050:	2b00      	cmp	r3, #0
   12052:	f040 8169 	bne.w	12328 <auto_nav+0x2e8>
{ // init
    
    if (nav_stage == 0) 
   12056:	f64a 6308 	movw	r3, #44552	; 0xae08
   1205a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1205e:	781b      	ldrb	r3, [r3, #0]
   12060:	2b00      	cmp	r3, #0
   12062:	d13c      	bne.n	120de <auto_nav+0x9e>
    {
	Label(while_1)
	nav_stage=0;
   12064:	f64a 6308 	movw	r3, #44552	; 0xae08
   12068:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1206c:	2200      	movs	r2, #0
   1206e:	701a      	strb	r2, [r3, #0]
	if (! (!(estimator_flight_time))) Goto(endwhile_2) 
   12070:	f24b 0394 	movw	r3, #45204	; 0xb094
   12074:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12078:	881b      	ldrh	r3, [r3, #0]
   1207a:	2b00      	cmp	r3, #0
   1207c:	d000      	beq.n	12080 <auto_nav+0x40>
   1207e:	e03d      	b.n	120fc <auto_nav+0xbc>
	else NextStage(); 
   12080:	f64a 6308 	movw	r3, #44552	; 0xae08
   12084:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12088:	781b      	ldrb	r3, [r3, #0]
   1208a:	3301      	adds	r3, #1
   1208c:	b2da      	uxtb	r2, r3
   1208e:	f64a 6308 	movw	r3, #44552	; 0xae08
   12092:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12096:	701a      	strb	r2, [r3, #0]
   12098:	f24b 0364 	movw	r3, #45156	; 0xb064
   1209c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120a0:	681a      	ldr	r2, [r3, #0]
   120a2:	f64a 630c 	movw	r3, #44556	; 0xae0c
   120a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120aa:	601a      	str	r2, [r3, #0]
   120ac:	f24b 0368 	movw	r3, #45160	; 0xb068
   120b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120b4:	681a      	ldr	r2, [r3, #0]
   120b6:	f64a 6310 	movw	r3, #44560	; 0xae10
   120ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120be:	601a      	str	r2, [r3, #0]
   120c0:	f64a 631c 	movw	r3, #44572	; 0xae1c
   120c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120c8:	2200      	movs	r2, #0
   120ca:	801a      	strh	r2, [r3, #0]
   120cc:	f64a 6320 	movw	r3, #44576	; 0xae20
   120d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120d4:	f04f 0200 	mov.w	r2, #0
   120d8:	601a      	str	r2, [r3, #0]
   120da:	f002 b883 	b.w	141e4 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   120de:	f64a 6308 	movw	r3, #44552	; 0xae08
   120e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120e6:	781b      	ldrb	r3, [r3, #0]
   120e8:	2b01      	cmp	r3, #1
   120ea:	d100      	bne.n	120ee <auto_nav+0xae>
    {   Goto(while_1)}
   120ec:	e7ba      	b.n	12064 <auto_nav+0x24>
    else if (nav_stage == 2)
   120ee:	f64a 6308 	movw	r3, #44552	; 0xae08
   120f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120f6:	781b      	ldrb	r3, [r3, #0]
   120f8:	2b02      	cmp	r3, #2
   120fa:	d162      	bne.n	121c2 <auto_nav+0x182>
    {
	Label(endwhile_2)
	nav_stage = 2;
   120fc:	f64a 6308 	movw	r3, #44552	; 0xae08
   12100:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12104:	2202      	movs	r2, #2
   12106:	701a      	strb	r2, [r3, #0]
        if ((estimator_flight_time>8)) NextStage() else {
   12108:	f24b 0394 	movw	r3, #45204	; 0xb094
   1210c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12110:	881b      	ldrh	r3, [r3, #0]
   12112:	2b08      	cmp	r3, #8
   12114:	d92e      	bls.n	12174 <auto_nav+0x134>
   12116:	f64a 6308 	movw	r3, #44552	; 0xae08
   1211a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1211e:	781b      	ldrb	r3, [r3, #0]
   12120:	3301      	adds	r3, #1
   12122:	b2da      	uxtb	r2, r3
   12124:	f64a 6308 	movw	r3, #44552	; 0xae08
   12128:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1212c:	701a      	strb	r2, [r3, #0]
   1212e:	f24b 0364 	movw	r3, #45156	; 0xb064
   12132:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12136:	681a      	ldr	r2, [r3, #0]
   12138:	f64a 630c 	movw	r3, #44556	; 0xae0c
   1213c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12140:	601a      	str	r2, [r3, #0]
   12142:	f24b 0368 	movw	r3, #45160	; 0xb068
   12146:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1214a:	681a      	ldr	r2, [r3, #0]
   1214c:	f64a 6310 	movw	r3, #44560	; 0xae10
   12150:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12154:	601a      	str	r2, [r3, #0]
   12156:	f64a 631c 	movw	r3, #44572	; 0xae1c
   1215a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1215e:	2200      	movs	r2, #0
   12160:	801a      	strh	r2, [r3, #0]
   12162:	f64a 6320 	movw	r3, #44576	; 0xae20
   12166:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1216a:	f04f 0200 	mov.w	r2, #0
   1216e:	601a      	str	r2, [r3, #0]
   12170:	f002 b838 	b.w	141e4 <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   12174:	f64a 53f4 	movw	r3, #44532	; 0xadf4
   12178:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1217c:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   12180:	f2c4 0296 	movt	r2, #16534	; 0x4096
   12184:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   12186:	f64a 2397 	movw	r3, #43671	; 0xaa97
   1218a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1218e:	2200      	movs	r2, #0
   12190:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.150000;
   12192:	f64a 6334 	movw	r3, #44596	; 0xae34
   12196:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1219a:	f649 129a 	movw	r2, #39322	; 0x999a
   1219e:	f6c3 6219 	movt	r2, #15897	; 0x3e19
   121a2:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_GAZ;
   121a4:	f64a 2395 	movw	r3, #43669	; 0xaa95
   121a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121ac:	2201      	movs	r2, #1
   121ae:	701a      	strb	r2, [r3, #0]
          nav_desired_gaz = TRIM_UPPRZ(0.800000*MAX_PPRZ);
   121b0:	f64a 6330 	movw	r3, #44592	; 0xae30
   121b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121b8:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
   121bc:	801a      	strh	r2, [r3, #0]
        }
        return;
   121be:	f002 b811 	b.w	141e4 <auto_nav+0x21a4>
     }
     else if (nav_stage == 3)
   121c2:	f64a 6308 	movw	r3, #44552	; 0xae08
   121c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121ca:	781b      	ldrb	r3, [r3, #0]
   121cc:	2b03      	cmp	r3, #3
   121ce:	d168      	bne.n	122a2 <auto_nav+0x262>
     {
	nav_stage = 3;	
   121d0:	f64a 6308 	movw	r3, #44552	; 0xae08
   121d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121d8:	2203      	movs	r2, #3
   121da:	701a      	strb	r2, [r3, #0]
        if ((estimator_z>SECURITY_ALT)) NextStage() else {
   121dc:	f24b 036c 	movw	r3, #45164	; 0xb06c
   121e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121e4:	681b      	ldr	r3, [r3, #0]
   121e6:	4618      	mov	r0, r3
   121e8:	f04f 0100 	mov.w	r1, #0
   121ec:	f2c4 3116 	movt	r1, #17174	; 0x4316
   121f0:	f006 fa2e 	bl	18650 <__aeabi_fcmpgt>
   121f4:	4603      	mov	r3, r0
   121f6:	2b00      	cmp	r3, #0
   121f8:	d02e      	beq.n	12258 <auto_nav+0x218>
   121fa:	f64a 6308 	movw	r3, #44552	; 0xae08
   121fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12202:	781b      	ldrb	r3, [r3, #0]
   12204:	3301      	adds	r3, #1
   12206:	b2da      	uxtb	r2, r3
   12208:	f64a 6308 	movw	r3, #44552	; 0xae08
   1220c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12210:	701a      	strb	r2, [r3, #0]
   12212:	f24b 0364 	movw	r3, #45156	; 0xb064
   12216:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1221a:	681a      	ldr	r2, [r3, #0]
   1221c:	f64a 630c 	movw	r3, #44556	; 0xae0c
   12220:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12224:	601a      	str	r2, [r3, #0]
   12226:	f24b 0368 	movw	r3, #45160	; 0xb068
   1222a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1222e:	681a      	ldr	r2, [r3, #0]
   12230:	f64a 6310 	movw	r3, #44560	; 0xae10
   12234:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12238:	601a      	str	r2, [r3, #0]
   1223a:	f64a 631c 	movw	r3, #44572	; 0xae1c
   1223e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12242:	2200      	movs	r2, #0
   12244:	801a      	strh	r2, [r3, #0]
   12246:	f64a 6320 	movw	r3, #44576	; 0xae20
   1224a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1224e:	f04f 0200 	mov.w	r2, #0
   12252:	601a      	str	r2, [r3, #0]
   12254:	f001 bfc6 	b.w	141e4 <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   12258:	f64a 53f4 	movw	r3, #44532	; 0xadf4
   1225c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12260:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   12264:	f2c4 0296 	movt	r2, #16534	; 0x4096
   12268:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   1226a:	f64a 2397 	movw	r3, #43671	; 0xaa97
   1226e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12272:	2200      	movs	r2, #0
   12274:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   12276:	f64a 6334 	movw	r3, #44596	; 0xae34
   1227a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1227e:	f04f 0200 	mov.w	r2, #0
   12282:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_CLIMB;
   12284:	f64a 2395 	movw	r3, #43669	; 0xaa95
   12288:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1228c:	2202      	movs	r2, #2
   1228e:	701a      	strb	r2, [r3, #0]
          desired_climb = 8.000000;
   12290:	f64a 53f8 	movw	r3, #44536	; 0xadf8
   12294:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12298:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   1229c:	601a      	str	r2, [r3, #0]
        }
        return;
   1229e:	f001 bfa1 	b.w	141e4 <auto_nav+0x21a4>
     }
     else if (nav_stage == 4)
   122a2:	f64a 6308 	movw	r3, #44552	; 0xae08
   122a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122aa:	781b      	ldrb	r3, [r3, #0]
   122ac:	2b04      	cmp	r3, #4
   122ae:	f041 8799 	bne.w	141e4 <auto_nav+0x21a4>
        NextBlock()
   122b2:	f64a 6309 	movw	r3, #44553	; 0xae09
   122b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122ba:	781b      	ldrb	r3, [r3, #0]
   122bc:	3301      	adds	r3, #1
   122be:	b2da      	uxtb	r2, r3
   122c0:	f64a 6309 	movw	r3, #44553	; 0xae09
   122c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122c8:	701a      	strb	r2, [r3, #0]
   122ca:	f64a 6308 	movw	r3, #44552	; 0xae08
   122ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122d2:	2200      	movs	r2, #0
   122d4:	701a      	strb	r2, [r3, #0]
   122d6:	f64a 631e 	movw	r3, #44574	; 0xae1e
   122da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122de:	2200      	movs	r2, #0
   122e0:	801a      	strh	r2, [r3, #0]
   122e2:	f24b 0364 	movw	r3, #45156	; 0xb064
   122e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122ea:	681a      	ldr	r2, [r3, #0]
   122ec:	f64a 630c 	movw	r3, #44556	; 0xae0c
   122f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122f4:	601a      	str	r2, [r3, #0]
   122f6:	f24b 0368 	movw	r3, #45160	; 0xb068
   122fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122fe:	681a      	ldr	r2, [r3, #0]
   12300:	f64a 6310 	movw	r3, #44560	; 0xae10
   12304:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12308:	601a      	str	r2, [r3, #0]
   1230a:	f64a 631c 	movw	r3, #44572	; 0xae1c
   1230e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12312:	2200      	movs	r2, #0
   12314:	801a      	strh	r2, [r3, #0]
   12316:	f64a 6320 	movw	r3, #44576	; 0xae20
   1231a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1231e:	f04f 0200 	mov.w	r2, #0
   12322:	601a      	str	r2, [r3, #0]
   12324:	f001 bf5e 	b.w	141e4 <auto_nav+0x21a4>
     else { }
}
else if (nav_block == 1) // two
   12328:	f64a 6309 	movw	r3, #44553	; 0xae09
   1232c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12330:	781b      	ldrb	r3, [r3, #0]
   12332:	2b01      	cmp	r3, #1
   12334:	f040 81bc 	bne.w	126b0 <auto_nav+0x670>
{
    nav_block = 1;
   12338:	f64a 6309 	movw	r3, #44553	; 0xae09
   1233c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12340:	2201      	movs	r2, #1
   12342:	701a      	strb	r2, [r3, #0]
    if RcEvent1() 
   12344:	f64a 2398 	movw	r3, #43672	; 0xaa98
   12348:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1234c:	781b      	ldrb	r3, [r3, #0]
   1234e:	2b00      	cmp	r3, #0
   12350:	d007      	beq.n	12362 <auto_nav+0x322>
   12352:	f64a 2398 	movw	r3, #43672	; 0xaa98
   12356:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1235a:	2200      	movs	r2, #0
   1235c:	701a      	strb	r2, [r3, #0]
   1235e:	2301      	movs	r3, #1
   12360:	e000      	b.n	12364 <auto_nav+0x324>
   12362:	2300      	movs	r3, #0
   12364:	2b00      	cmp	r3, #0
   12366:	d034      	beq.n	123d2 <auto_nav+0x392>
	{ GotoBlock(2) }
   12368:	f64a 6309 	movw	r3, #44553	; 0xae09
   1236c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12370:	2202      	movs	r2, #2
   12372:	701a      	strb	r2, [r3, #0]
   12374:	f64a 6308 	movw	r3, #44552	; 0xae08
   12378:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1237c:	2200      	movs	r2, #0
   1237e:	701a      	strb	r2, [r3, #0]
   12380:	f64a 631e 	movw	r3, #44574	; 0xae1e
   12384:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12388:	2200      	movs	r2, #0
   1238a:	801a      	strh	r2, [r3, #0]
   1238c:	f24b 0364 	movw	r3, #45156	; 0xb064
   12390:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12394:	681a      	ldr	r2, [r3, #0]
   12396:	f64a 630c 	movw	r3, #44556	; 0xae0c
   1239a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1239e:	601a      	str	r2, [r3, #0]
   123a0:	f24b 0368 	movw	r3, #45160	; 0xb068
   123a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123a8:	681a      	ldr	r2, [r3, #0]
   123aa:	f64a 6310 	movw	r3, #44560	; 0xae10
   123ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123b2:	601a      	str	r2, [r3, #0]
   123b4:	f64a 631c 	movw	r3, #44572	; 0xae1c
   123b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123bc:	2200      	movs	r2, #0
   123be:	801a      	strh	r2, [r3, #0]
   123c0:	f64a 6320 	movw	r3, #44576	; 0xae20
   123c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123c8:	f04f 0200 	mov.w	r2, #0
   123cc:	601a      	str	r2, [r3, #0]
   123ce:	f001 bf09 	b.w	141e4 <auto_nav+0x21a4>
    if(nav_stage == 0)
   123d2:	f64a 6308 	movw	r3, #44552	; 0xae08
   123d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123da:	781b      	ldrb	r3, [r3, #0]
   123dc:	2b00      	cmp	r3, #0
   123de:	d12e      	bne.n	1243e <auto_nav+0x3fe>
    {
       Label(while_3)
       if (! (TRUE)) Goto(endwhile_4) else NextStage();
   123e0:	f64a 6308 	movw	r3, #44552	; 0xae08
   123e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123e8:	781b      	ldrb	r3, [r3, #0]
   123ea:	3301      	adds	r3, #1
   123ec:	b2da      	uxtb	r2, r3
   123ee:	f64a 6308 	movw	r3, #44552	; 0xae08
   123f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123f6:	701a      	strb	r2, [r3, #0]
   123f8:	f24b 0364 	movw	r3, #45156	; 0xb064
   123fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12400:	681a      	ldr	r2, [r3, #0]
   12402:	f64a 630c 	movw	r3, #44556	; 0xae0c
   12406:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1240a:	601a      	str	r2, [r3, #0]
   1240c:	f24b 0368 	movw	r3, #45160	; 0xb068
   12410:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12414:	681a      	ldr	r2, [r3, #0]
   12416:	f64a 6310 	movw	r3, #44560	; 0xae10
   1241a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1241e:	601a      	str	r2, [r3, #0]
   12420:	f64a 631c 	movw	r3, #44572	; 0xae1c
   12424:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12428:	2200      	movs	r2, #0
   1242a:	801a      	strh	r2, [r3, #0]
   1242c:	f64a 6320 	movw	r3, #44576	; 0xae20
   12430:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12434:	f04f 0200 	mov.w	r2, #0
   12438:	601a      	str	r2, [r3, #0]
   1243a:	f001 bed3 	b.w	141e4 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   1243e:	f64a 6308 	movw	r3, #44552	; 0xae08
   12442:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12446:	781b      	ldrb	r3, [r3, #0]
   12448:	2b01      	cmp	r3, #1
   1244a:	d169      	bne.n	12520 <auto_nav+0x4e0>
    {
	  nav_stage = 1;
   1244c:	f64a 6308 	movw	r3, #44552	; 0xae08
   12450:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12454:	2201      	movs	r2, #1
   12456:	701a      	strb	r2, [r3, #0]
          if (approaching(1)) NextStageFrom(1) else {
   12458:	2001      	movs	r0, #1
   1245a:	f001 fed1 	bl	14200 <approaching>
   1245e:	4603      	mov	r3, r0
   12460:	2b00      	cmp	r3, #0
   12462:	d034      	beq.n	124ce <auto_nav+0x48e>
   12464:	f64a 6314 	movw	r3, #44564	; 0xae14
   12468:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1246c:	2201      	movs	r2, #1
   1246e:	701a      	strb	r2, [r3, #0]
   12470:	f64a 6308 	movw	r3, #44552	; 0xae08
   12474:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12478:	781b      	ldrb	r3, [r3, #0]
   1247a:	3301      	adds	r3, #1
   1247c:	b2da      	uxtb	r2, r3
   1247e:	f64a 6308 	movw	r3, #44552	; 0xae08
   12482:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12486:	701a      	strb	r2, [r3, #0]
   12488:	f24b 0364 	movw	r3, #45156	; 0xb064
   1248c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12490:	681a      	ldr	r2, [r3, #0]
   12492:	f64a 630c 	movw	r3, #44556	; 0xae0c
   12496:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1249a:	601a      	str	r2, [r3, #0]
   1249c:	f24b 0368 	movw	r3, #45160	; 0xb068
   124a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124a4:	681a      	ldr	r2, [r3, #0]
   124a6:	f64a 6310 	movw	r3, #44560	; 0xae10
   124aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124ae:	601a      	str	r2, [r3, #0]
   124b0:	f64a 631c 	movw	r3, #44572	; 0xae1c
   124b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124b8:	2200      	movs	r2, #0
   124ba:	801a      	strh	r2, [r3, #0]
   124bc:	f64a 6320 	movw	r3, #44576	; 0xae20
   124c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124c4:	f04f 0200 	mov.w	r2, #0
   124c8:	601a      	str	r2, [r3, #0]
   124ca:	f001 be8b 	b.w	141e4 <auto_nav+0x21a4>
            fly_to(1);
   124ce:	2001      	movs	r0, #1
   124d0:	f001 ffca 	bl	14468 <fly_to>
            auto_pitch = FALSE;
   124d4:	f64a 2397 	movw	r3, #43671	; 0xaa97
   124d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124dc:	2200      	movs	r2, #0
   124de:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   124e0:	f64a 6334 	movw	r3, #44596	; 0xae34
   124e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124e8:	f04f 0200 	mov.w	r2, #0
   124ec:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   124ee:	f64a 2395 	movw	r3, #43669	; 0xaa95
   124f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124f6:	2203      	movs	r2, #3
   124f8:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   124fa:	f240 23bc 	movw	r3, #700	; 0x2bc
   124fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12502:	695a      	ldr	r2, [r3, #20]
   12504:	f240 23b8 	movw	r3, #696	; 0x2b8
   12508:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1250c:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1250e:	f64a 53fc 	movw	r3, #44540	; 0xadfc
   12512:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12516:	f04f 0200 	mov.w	r2, #0
   1251a:	601a      	str	r2, [r3, #0]
          }
          return;
   1251c:	f001 be62 	b.w	141e4 <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12520:	f64a 6308 	movw	r3, #44552	; 0xae08
   12524:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12528:	781b      	ldrb	r3, [r3, #0]
   1252a:	2b02      	cmp	r3, #2
   1252c:	d169      	bne.n	12602 <auto_nav+0x5c2>
     {
	  nav_stage = 2;
   1252e:	f64a 6308 	movw	r3, #44552	; 0xae08
   12532:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12536:	2202      	movs	r2, #2
   12538:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   1253a:	2004      	movs	r0, #4
   1253c:	f001 fe60 	bl	14200 <approaching>
   12540:	4603      	mov	r3, r0
   12542:	2b00      	cmp	r3, #0
   12544:	d034      	beq.n	125b0 <auto_nav+0x570>
   12546:	f64a 6314 	movw	r3, #44564	; 0xae14
   1254a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1254e:	2204      	movs	r2, #4
   12550:	701a      	strb	r2, [r3, #0]
   12552:	f64a 6308 	movw	r3, #44552	; 0xae08
   12556:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1255a:	781b      	ldrb	r3, [r3, #0]
   1255c:	3301      	adds	r3, #1
   1255e:	b2da      	uxtb	r2, r3
   12560:	f64a 6308 	movw	r3, #44552	; 0xae08
   12564:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12568:	701a      	strb	r2, [r3, #0]
   1256a:	f24b 0364 	movw	r3, #45156	; 0xb064
   1256e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12572:	681a      	ldr	r2, [r3, #0]
   12574:	f64a 630c 	movw	r3, #44556	; 0xae0c
   12578:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1257c:	601a      	str	r2, [r3, #0]
   1257e:	f24b 0368 	movw	r3, #45160	; 0xb068
   12582:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12586:	681a      	ldr	r2, [r3, #0]
   12588:	f64a 6310 	movw	r3, #44560	; 0xae10
   1258c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12590:	601a      	str	r2, [r3, #0]
   12592:	f64a 631c 	movw	r3, #44572	; 0xae1c
   12596:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1259a:	2200      	movs	r2, #0
   1259c:	801a      	strh	r2, [r3, #0]
   1259e:	f64a 6320 	movw	r3, #44576	; 0xae20
   125a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125a6:	f04f 0200 	mov.w	r2, #0
   125aa:	601a      	str	r2, [r3, #0]
   125ac:	f001 be1a 	b.w	141e4 <auto_nav+0x21a4>
            fly_to(4);
   125b0:	2004      	movs	r0, #4
   125b2:	f001 ff59 	bl	14468 <fly_to>
            auto_pitch = FALSE;
   125b6:	f64a 2397 	movw	r3, #43671	; 0xaa97
   125ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125be:	2200      	movs	r2, #0
   125c0:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   125c2:	f64a 6334 	movw	r3, #44596	; 0xae34
   125c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125ca:	f04f 0200 	mov.w	r2, #0
   125ce:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   125d0:	f64a 2395 	movw	r3, #43669	; 0xaa95
   125d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125d8:	2203      	movs	r2, #3
   125da:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   125dc:	f240 23bc 	movw	r3, #700	; 0x2bc
   125e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   125e6:	f240 23b8 	movw	r3, #696	; 0x2b8
   125ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125ee:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   125f0:	f64a 53fc 	movw	r3, #44540	; 0xadfc
   125f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125f8:	f04f 0200 	mov.w	r2, #0
   125fc:	601a      	str	r2, [r3, #0]
          }
          return;
   125fe:	f001 bdf1 	b.w	141e4 <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12602:	f64a 6308 	movw	r3, #44552	; 0xae08
   12606:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1260a:	781b      	ldrb	r3, [r3, #0]
   1260c:	2b03      	cmp	r3, #3
   1260e:	d106      	bne.n	1261e <auto_nav+0x5de>
      {
	  nav_stage = 3;
   12610:	f64a 6308 	movw	r3, #44552	; 0xae08
   12614:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12618:	2203      	movs	r2, #3
   1261a:	701a      	strb	r2, [r3, #0]
          Goto(while_3)
   1261c:	e6e0      	b.n	123e0 <auto_nav+0x3a0>
      }
      else if (nav_stage == 4)
   1261e:	f64a 6308 	movw	r3, #44552	; 0xae08
   12622:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12626:	781b      	ldrb	r3, [r3, #0]
   12628:	2b04      	cmp	r3, #4
   1262a:	f041 85db 	bne.w	141e4 <auto_nav+0x21a4>
      {
        Label(endwhile_4)
	nav_stage = 4;
   1262e:	f64a 6308 	movw	r3, #44552	; 0xae08
   12632:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12636:	2204      	movs	r2, #4
   12638:	701a      	strb	r2, [r3, #0]
        NextBlock()
   1263a:	f64a 6309 	movw	r3, #44553	; 0xae09
   1263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12642:	781b      	ldrb	r3, [r3, #0]
   12644:	3301      	adds	r3, #1
   12646:	b2da      	uxtb	r2, r3
   12648:	f64a 6309 	movw	r3, #44553	; 0xae09
   1264c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12650:	701a      	strb	r2, [r3, #0]
   12652:	f64a 6308 	movw	r3, #44552	; 0xae08
   12656:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1265a:	2200      	movs	r2, #0
   1265c:	701a      	strb	r2, [r3, #0]
   1265e:	f64a 631e 	movw	r3, #44574	; 0xae1e
   12662:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12666:	2200      	movs	r2, #0
   12668:	801a      	strh	r2, [r3, #0]
   1266a:	f24b 0364 	movw	r3, #45156	; 0xb064
   1266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12672:	681a      	ldr	r2, [r3, #0]
   12674:	f64a 630c 	movw	r3, #44556	; 0xae0c
   12678:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1267c:	601a      	str	r2, [r3, #0]
   1267e:	f24b 0368 	movw	r3, #45160	; 0xb068
   12682:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12686:	681a      	ldr	r2, [r3, #0]
   12688:	f64a 6310 	movw	r3, #44560	; 0xae10
   1268c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12690:	601a      	str	r2, [r3, #0]
   12692:	f64a 631c 	movw	r3, #44572	; 0xae1c
   12696:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1269a:	2200      	movs	r2, #0
   1269c:	801a      	strh	r2, [r3, #0]
   1269e:	f64a 6320 	movw	r3, #44576	; 0xae20
   126a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126a6:	f04f 0200 	mov.w	r2, #0
   126aa:	601a      	str	r2, [r3, #0]
   126ac:	f001 bd9a 	b.w	141e4 <auto_nav+0x21a4>
      }
      else { }
}
else if (nav_block == 2) // height
   126b0:	f64a 6309 	movw	r3, #44553	; 0xae09
   126b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126b8:	781b      	ldrb	r3, [r3, #0]
   126ba:	2b02      	cmp	r3, #2
   126bc:	f040 8392 	bne.w	12de4 <auto_nav+0xda4>
{
	nav_block = 2;
   126c0:	f64a 6309 	movw	r3, #44553	; 0xae09
   126c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126c8:	2202      	movs	r2, #2
   126ca:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(3) }
   126cc:	f64a 2398 	movw	r3, #43672	; 0xaa98
   126d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126d4:	781b      	ldrb	r3, [r3, #0]
   126d6:	2b00      	cmp	r3, #0
   126d8:	d007      	beq.n	126ea <auto_nav+0x6aa>
   126da:	f64a 2398 	movw	r3, #43672	; 0xaa98
   126de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126e2:	2200      	movs	r2, #0
   126e4:	701a      	strb	r2, [r3, #0]
   126e6:	2301      	movs	r3, #1
   126e8:	e000      	b.n	126ec <auto_nav+0x6ac>
   126ea:	2300      	movs	r3, #0
   126ec:	2b00      	cmp	r3, #0
   126ee:	d034      	beq.n	1275a <auto_nav+0x71a>
   126f0:	f64a 6309 	movw	r3, #44553	; 0xae09
   126f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126f8:	2203      	movs	r2, #3
   126fa:	701a      	strb	r2, [r3, #0]
   126fc:	f64a 6308 	movw	r3, #44552	; 0xae08
   12700:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12704:	2200      	movs	r2, #0
   12706:	701a      	strb	r2, [r3, #0]
   12708:	f64a 631e 	movw	r3, #44574	; 0xae1e
   1270c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12710:	2200      	movs	r2, #0
   12712:	801a      	strh	r2, [r3, #0]
   12714:	f24b 0364 	movw	r3, #45156	; 0xb064
   12718:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1271c:	681a      	ldr	r2, [r3, #0]
   1271e:	f64a 630c 	movw	r3, #44556	; 0xae0c
   12722:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12726:	601a      	str	r2, [r3, #0]
   12728:	f24b 0368 	movw	r3, #45160	; 0xb068
   1272c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12730:	681a      	ldr	r2, [r3, #0]
   12732:	f64a 6310 	movw	r3, #44560	; 0xae10
   12736:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1273a:	601a      	str	r2, [r3, #0]
   1273c:	f64a 631c 	movw	r3, #44572	; 0xae1c
   12740:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12744:	2200      	movs	r2, #0
   12746:	801a      	strh	r2, [r3, #0]
   12748:	f64a 6320 	movw	r3, #44576	; 0xae20
   1274c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12750:	f04f 0200 	mov.w	r2, #0
   12754:	601a      	str	r2, [r3, #0]
   12756:	f001 bd45 	b.w	141e4 <auto_nav+0x21a4>
    
    if(nav_stage == 0)
   1275a:	f64a 6308 	movw	r3, #44552	; 0xae08
   1275e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12762:	781b      	ldrb	r3, [r3, #0]
   12764:	2b00      	cmp	r3, #0
   12766:	d134      	bne.n	127d2 <auto_nav+0x792>
    {
       Label(while_5)
       nav_stage = 0;
   12768:	f64a 6308 	movw	r3, #44552	; 0xae08
   1276c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12770:	2200      	movs	r2, #0
   12772:	701a      	strb	r2, [r3, #0]
       if (! (TRUE)) Goto(endwhile_6) else NextStage();
   12774:	f64a 6308 	movw	r3, #44552	; 0xae08
   12778:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1277c:	781b      	ldrb	r3, [r3, #0]
   1277e:	3301      	adds	r3, #1
   12780:	b2da      	uxtb	r2, r3
   12782:	f64a 6308 	movw	r3, #44552	; 0xae08
   12786:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1278a:	701a      	strb	r2, [r3, #0]
   1278c:	f24b 0364 	movw	r3, #45156	; 0xb064
   12790:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12794:	681a      	ldr	r2, [r3, #0]
   12796:	f64a 630c 	movw	r3, #44556	; 0xae0c
   1279a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1279e:	601a      	str	r2, [r3, #0]
   127a0:	f24b 0368 	movw	r3, #45160	; 0xb068
   127a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127a8:	681a      	ldr	r2, [r3, #0]
   127aa:	f64a 6310 	movw	r3, #44560	; 0xae10
   127ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127b2:	601a      	str	r2, [r3, #0]
   127b4:	f64a 631c 	movw	r3, #44572	; 0xae1c
   127b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127bc:	2200      	movs	r2, #0
   127be:	801a      	strh	r2, [r3, #0]
   127c0:	f64a 6320 	movw	r3, #44576	; 0xae20
   127c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127c8:	f04f 0200 	mov.w	r2, #0
   127cc:	601a      	str	r2, [r3, #0]
   127ce:	f001 bd09 	b.w	141e4 <auto_nav+0x21a4>
    }
    else if(nav_stage == 1)
   127d2:	f64a 6308 	movw	r3, #44552	; 0xae08
   127d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127da:	781b      	ldrb	r3, [r3, #0]
   127dc:	2b01      	cmp	r3, #1
   127de:	d169      	bne.n	128b4 <auto_nav+0x874>
    {
         nav_stage =1;
   127e0:	f64a 6308 	movw	r3, #44552	; 0xae08
   127e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127e8:	2201      	movs	r2, #1
   127ea:	701a      	strb	r2, [r3, #0]
          if (approaching(6)) NextStageFrom(6) else {
   127ec:	2006      	movs	r0, #6
   127ee:	f001 fd07 	bl	14200 <approaching>
   127f2:	4603      	mov	r3, r0
   127f4:	2b00      	cmp	r3, #0
   127f6:	d034      	beq.n	12862 <auto_nav+0x822>
   127f8:	f64a 6314 	movw	r3, #44564	; 0xae14
   127fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12800:	2206      	movs	r2, #6
   12802:	701a      	strb	r2, [r3, #0]
   12804:	f64a 6308 	movw	r3, #44552	; 0xae08
   12808:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1280c:	781b      	ldrb	r3, [r3, #0]
   1280e:	3301      	adds	r3, #1
   12810:	b2da      	uxtb	r2, r3
   12812:	f64a 6308 	movw	r3, #44552	; 0xae08
   12816:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1281a:	701a      	strb	r2, [r3, #0]
   1281c:	f24b 0364 	movw	r3, #45156	; 0xb064
   12820:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12824:	681a      	ldr	r2, [r3, #0]
   12826:	f64a 630c 	movw	r3, #44556	; 0xae0c
   1282a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1282e:	601a      	str	r2, [r3, #0]
   12830:	f24b 0368 	movw	r3, #45160	; 0xb068
   12834:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12838:	681a      	ldr	r2, [r3, #0]
   1283a:	f64a 6310 	movw	r3, #44560	; 0xae10
   1283e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12842:	601a      	str	r2, [r3, #0]
   12844:	f64a 631c 	movw	r3, #44572	; 0xae1c
   12848:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1284c:	2200      	movs	r2, #0
   1284e:	801a      	strh	r2, [r3, #0]
   12850:	f64a 6320 	movw	r3, #44576	; 0xae20
   12854:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12858:	f04f 0200 	mov.w	r2, #0
   1285c:	601a      	str	r2, [r3, #0]
   1285e:	f001 bcc1 	b.w	141e4 <auto_nav+0x21a4>
            fly_to(6);
   12862:	2006      	movs	r0, #6
   12864:	f001 fe00 	bl	14468 <fly_to>
            auto_pitch = FALSE;
   12868:	f64a 2397 	movw	r3, #43671	; 0xaa97
   1286c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12870:	2200      	movs	r2, #0
   12872:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12874:	f64a 6334 	movw	r3, #44596	; 0xae34
   12878:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1287c:	f04f 0200 	mov.w	r2, #0
   12880:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12882:	f64a 2395 	movw	r3, #43669	; 0xaa95
   12886:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1288a:	2203      	movs	r2, #3
   1288c:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[6].a;
   1288e:	f240 23bc 	movw	r3, #700	; 0x2bc
   12892:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12896:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   12898:	f240 23b8 	movw	r3, #696	; 0x2b8
   1289c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128a0:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   128a2:	f64a 53fc 	movw	r3, #44540	; 0xadfc
   128a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128aa:	f04f 0200 	mov.w	r2, #0
   128ae:	601a      	str	r2, [r3, #0]
          }
          return;
   128b0:	f001 bc98 	b.w	141e4 <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   128b4:	f64a 6308 	movw	r3, #44552	; 0xae08
   128b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128bc:	781b      	ldrb	r3, [r3, #0]
   128be:	2b02      	cmp	r3, #2
   128c0:	d169      	bne.n	12996 <auto_nav+0x956>
     {
         nav_stage =2; 
   128c2:	f64a 6308 	movw	r3, #44552	; 0xae08
   128c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128ca:	2202      	movs	r2, #2
   128cc:	701a      	strb	r2, [r3, #0]
         if (approaching(1)) NextStageFrom(1) else {
   128ce:	2001      	movs	r0, #1
   128d0:	f001 fc96 	bl	14200 <approaching>
   128d4:	4603      	mov	r3, r0
   128d6:	2b00      	cmp	r3, #0
   128d8:	d034      	beq.n	12944 <auto_nav+0x904>
   128da:	f64a 6314 	movw	r3, #44564	; 0xae14
   128de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128e2:	2201      	movs	r2, #1
   128e4:	701a      	strb	r2, [r3, #0]
   128e6:	f64a 6308 	movw	r3, #44552	; 0xae08
   128ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128ee:	781b      	ldrb	r3, [r3, #0]
   128f0:	3301      	adds	r3, #1
   128f2:	b2da      	uxtb	r2, r3
   128f4:	f64a 6308 	movw	r3, #44552	; 0xae08
   128f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128fc:	701a      	strb	r2, [r3, #0]
   128fe:	f24b 0364 	movw	r3, #45156	; 0xb064
   12902:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12906:	681a      	ldr	r2, [r3, #0]
   12908:	f64a 630c 	movw	r3, #44556	; 0xae0c
   1290c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12910:	601a      	str	r2, [r3, #0]
   12912:	f24b 0368 	movw	r3, #45160	; 0xb068
   12916:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1291a:	681a      	ldr	r2, [r3, #0]
   1291c:	f64a 6310 	movw	r3, #44560	; 0xae10
   12920:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12924:	601a      	str	r2, [r3, #0]
   12926:	f64a 631c 	movw	r3, #44572	; 0xae1c
   1292a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1292e:	2200      	movs	r2, #0
   12930:	801a      	strh	r2, [r3, #0]
   12932:	f64a 6320 	movw	r3, #44576	; 0xae20
   12936:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1293a:	f04f 0200 	mov.w	r2, #0
   1293e:	601a      	str	r2, [r3, #0]
   12940:	f001 bc50 	b.w	141e4 <auto_nav+0x21a4>
            fly_to(1);
   12944:	2001      	movs	r0, #1
   12946:	f001 fd8f 	bl	14468 <fly_to>
            auto_pitch = FALSE;
   1294a:	f64a 2397 	movw	r3, #43671	; 0xaa97
   1294e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12952:	2200      	movs	r2, #0
   12954:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12956:	f64a 6334 	movw	r3, #44596	; 0xae34
   1295a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1295e:	f04f 0200 	mov.w	r2, #0
   12962:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12964:	f64a 2395 	movw	r3, #43669	; 0xaa95
   12968:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1296c:	2203      	movs	r2, #3
   1296e:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12970:	f240 23bc 	movw	r3, #700	; 0x2bc
   12974:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12978:	695a      	ldr	r2, [r3, #20]
   1297a:	f240 23b8 	movw	r3, #696	; 0x2b8
   1297e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12982:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12984:	f64a 53fc 	movw	r3, #44540	; 0xadfc
   12988:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1298c:	f04f 0200 	mov.w	r2, #0
   12990:	601a      	str	r2, [r3, #0]
          }
          return;
   12992:	f001 bc27 	b.w	141e4 <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12996:	f64a 6308 	movw	r3, #44552	; 0xae08
   1299a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1299e:	781b      	ldrb	r3, [r3, #0]
   129a0:	2b03      	cmp	r3, #3
   129a2:	d16f      	bne.n	12a84 <auto_nav+0xa44>
      {
	   nav_stage = 3;         
   129a4:	f64a 6308 	movw	r3, #44552	; 0xae08
   129a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129ac:	2203      	movs	r2, #3
   129ae:	701a      	strb	r2, [r3, #0]
           if (approaching(2)) NextStageFrom(2) else {
   129b0:	2002      	movs	r0, #2
   129b2:	f001 fc25 	bl	14200 <approaching>
   129b6:	4603      	mov	r3, r0
   129b8:	2b00      	cmp	r3, #0
   129ba:	d034      	beq.n	12a26 <auto_nav+0x9e6>
   129bc:	f64a 6314 	movw	r3, #44564	; 0xae14
   129c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129c4:	2202      	movs	r2, #2
   129c6:	701a      	strb	r2, [r3, #0]
   129c8:	f64a 6308 	movw	r3, #44552	; 0xae08
   129cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129d0:	781b      	ldrb	r3, [r3, #0]
   129d2:	3301      	adds	r3, #1
   129d4:	b2da      	uxtb	r2, r3
   129d6:	f64a 6308 	movw	r3, #44552	; 0xae08
   129da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129de:	701a      	strb	r2, [r3, #0]
   129e0:	f24b 0364 	movw	r3, #45156	; 0xb064
   129e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129e8:	681a      	ldr	r2, [r3, #0]
   129ea:	f64a 630c 	movw	r3, #44556	; 0xae0c
   129ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129f2:	601a      	str	r2, [r3, #0]
   129f4:	f24b 0368 	movw	r3, #45160	; 0xb068
   129f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129fc:	681a      	ldr	r2, [r3, #0]
   129fe:	f64a 6310 	movw	r3, #44560	; 0xae10
   12a02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a06:	601a      	str	r2, [r3, #0]
   12a08:	f64a 631c 	movw	r3, #44572	; 0xae1c
   12a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a10:	2200      	movs	r2, #0
   12a12:	801a      	strh	r2, [r3, #0]
   12a14:	f64a 6320 	movw	r3, #44576	; 0xae20
   12a18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a1c:	f04f 0200 	mov.w	r2, #0
   12a20:	601a      	str	r2, [r3, #0]
   12a22:	f001 bbdf 	b.w	141e4 <auto_nav+0x21a4>
            route_to(last_wp, 2);
   12a26:	f64a 6314 	movw	r3, #44564	; 0xae14
   12a2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a2e:	781b      	ldrb	r3, [r3, #0]
   12a30:	4618      	mov	r0, r3
   12a32:	2102      	movs	r1, #2
   12a34:	f001 fd3a 	bl	144ac <route_to>
            auto_pitch = FALSE;
   12a38:	f64a 2397 	movw	r3, #43671	; 0xaa97
   12a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a40:	2200      	movs	r2, #0
   12a42:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12a44:	f64a 6334 	movw	r3, #44596	; 0xae34
   12a48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a4c:	f04f 0200 	mov.w	r2, #0
   12a50:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12a52:	f64a 2395 	movw	r3, #43669	; 0xaa95
   12a56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a5a:	2203      	movs	r2, #3
   12a5c:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[2].a;
   12a5e:	f240 23bc 	movw	r3, #700	; 0x2bc
   12a62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a66:	6a1a      	ldr	r2, [r3, #32]
   12a68:	f240 23b8 	movw	r3, #696	; 0x2b8
   12a6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a70:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12a72:	f64a 53fc 	movw	r3, #44540	; 0xadfc
   12a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a7a:	f04f 0200 	mov.w	r2, #0
   12a7e:	601a      	str	r2, [r3, #0]
          }
          return;
   12a80:	f001 bbb0 	b.w	141e4 <auto_nav+0x21a4>
       }
       else if (nav_stage == 4)
   12a84:	f64a 6308 	movw	r3, #44552	; 0xae08
   12a88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a8c:	781b      	ldrb	r3, [r3, #0]
   12a8e:	2b04      	cmp	r3, #4
   12a90:	d169      	bne.n	12b66 <auto_nav+0xb26>
       {
          nav_stage = 4;
   12a92:	f64a 6308 	movw	r3, #44552	; 0xae08
   12a96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a9a:	2204      	movs	r2, #4
   12a9c:	701a      	strb	r2, [r3, #0]
          if (approaching(3)) NextStageFrom(3) else {
   12a9e:	2003      	movs	r0, #3
   12aa0:	f001 fbae 	bl	14200 <approaching>
   12aa4:	4603      	mov	r3, r0
   12aa6:	2b00      	cmp	r3, #0
   12aa8:	d034      	beq.n	12b14 <auto_nav+0xad4>
   12aaa:	f64a 6314 	movw	r3, #44564	; 0xae14
   12aae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ab2:	2203      	movs	r2, #3
   12ab4:	701a      	strb	r2, [r3, #0]
   12ab6:	f64a 6308 	movw	r3, #44552	; 0xae08
   12aba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12abe:	781b      	ldrb	r3, [r3, #0]
   12ac0:	3301      	adds	r3, #1
   12ac2:	b2da      	uxtb	r2, r3
   12ac4:	f64a 6308 	movw	r3, #44552	; 0xae08
   12ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12acc:	701a      	strb	r2, [r3, #0]
   12ace:	f24b 0364 	movw	r3, #45156	; 0xb064
   12ad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ad6:	681a      	ldr	r2, [r3, #0]
   12ad8:	f64a 630c 	movw	r3, #44556	; 0xae0c
   12adc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ae0:	601a      	str	r2, [r3, #0]
   12ae2:	f24b 0368 	movw	r3, #45160	; 0xb068
   12ae6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12aea:	681a      	ldr	r2, [r3, #0]
   12aec:	f64a 6310 	movw	r3, #44560	; 0xae10
   12af0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12af4:	601a      	str	r2, [r3, #0]
   12af6:	f64a 631c 	movw	r3, #44572	; 0xae1c
   12afa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12afe:	2200      	movs	r2, #0
   12b00:	801a      	strh	r2, [r3, #0]
   12b02:	f64a 6320 	movw	r3, #44576	; 0xae20
   12b06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b0a:	f04f 0200 	mov.w	r2, #0
   12b0e:	601a      	str	r2, [r3, #0]
   12b10:	f001 bb68 	b.w	141e4 <auto_nav+0x21a4>
            fly_to(3);
   12b14:	2003      	movs	r0, #3
   12b16:	f001 fca7 	bl	14468 <fly_to>
            auto_pitch = FALSE;
   12b1a:	f64a 2397 	movw	r3, #43671	; 0xaa97
   12b1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b22:	2200      	movs	r2, #0
   12b24:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12b26:	f64a 6334 	movw	r3, #44596	; 0xae34
   12b2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b2e:	f04f 0200 	mov.w	r2, #0
   12b32:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12b34:	f64a 2395 	movw	r3, #43669	; 0xaa95
   12b38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b3c:	2203      	movs	r2, #3
   12b3e:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[3].a;
   12b40:	f240 23bc 	movw	r3, #700	; 0x2bc
   12b44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   12b4a:	f240 23b8 	movw	r3, #696	; 0x2b8
   12b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b52:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12b54:	f64a 53fc 	movw	r3, #44540	; 0xadfc
   12b58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b5c:	f04f 0200 	mov.w	r2, #0
   12b60:	601a      	str	r2, [r3, #0]
          }
          return;
   12b62:	f001 bb3f 	b.w	141e4 <auto_nav+0x21a4>
       }
       else if (nav_stage == 5)
   12b66:	f64a 6308 	movw	r3, #44552	; 0xae08
   12b6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b6e:	781b      	ldrb	r3, [r3, #0]
   12b70:	2b05      	cmp	r3, #5
   12b72:	d169      	bne.n	12c48 <auto_nav+0xc08>
       {
          nav_stage =5;
   12b74:	f64a 6308 	movw	r3, #44552	; 0xae08
   12b78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b7c:	2205      	movs	r2, #5
   12b7e:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   12b80:	2004      	movs	r0, #4
   12b82:	f001 fb3d 	bl	14200 <approaching>
   12b86:	4603      	mov	r3, r0
   12b88:	2b00      	cmp	r3, #0
   12b8a:	d034      	beq.n	12bf6 <auto_nav+0xbb6>
   12b8c:	f64a 6314 	movw	r3, #44564	; 0xae14
   12b90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b94:	2204      	movs	r2, #4
   12b96:	701a      	strb	r2, [r3, #0]
   12b98:	f64a 6308 	movw	r3, #44552	; 0xae08
   12b9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ba0:	781b      	ldrb	r3, [r3, #0]
   12ba2:	3301      	adds	r3, #1
   12ba4:	b2da      	uxtb	r2, r3
   12ba6:	f64a 6308 	movw	r3, #44552	; 0xae08
   12baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bae:	701a      	strb	r2, [r3, #0]
   12bb0:	f24b 0364 	movw	r3, #45156	; 0xb064
   12bb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bb8:	681a      	ldr	r2, [r3, #0]
   12bba:	f64a 630c 	movw	r3, #44556	; 0xae0c
   12bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bc2:	601a      	str	r2, [r3, #0]
   12bc4:	f24b 0368 	movw	r3, #45160	; 0xb068
   12bc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bcc:	681a      	ldr	r2, [r3, #0]
   12bce:	f64a 6310 	movw	r3, #44560	; 0xae10
   12bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bd6:	601a      	str	r2, [r3, #0]
   12bd8:	f64a 631c 	movw	r3, #44572	; 0xae1c
   12bdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12be0:	2200      	movs	r2, #0
   12be2:	801a      	strh	r2, [r3, #0]
   12be4:	f64a 6320 	movw	r3, #44576	; 0xae20
   12be8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bec:	f04f 0200 	mov.w	r2, #0
   12bf0:	601a      	str	r2, [r3, #0]
   12bf2:	f001 baf7 	b.w	141e4 <auto_nav+0x21a4>
            fly_to(4);
   12bf6:	2004      	movs	r0, #4
   12bf8:	f001 fc36 	bl	14468 <fly_to>
            auto_pitch = FALSE;
   12bfc:	f64a 2397 	movw	r3, #43671	; 0xaa97
   12c00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c04:	2200      	movs	r2, #0
   12c06:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12c08:	f64a 6334 	movw	r3, #44596	; 0xae34
   12c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c10:	f04f 0200 	mov.w	r2, #0
   12c14:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12c16:	f64a 2395 	movw	r3, #43669	; 0xaa95
   12c1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c1e:	2203      	movs	r2, #3
   12c20:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   12c22:	f240 23bc 	movw	r3, #700	; 0x2bc
   12c26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   12c2c:	f240 23b8 	movw	r3, #696	; 0x2b8
   12c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c34:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12c36:	f64a 53fc 	movw	r3, #44540	; 0xadfc
   12c3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c3e:	f04f 0200 	mov.w	r2, #0
   12c42:	601a      	str	r2, [r3, #0]
          }
          return;
   12c44:	f001 bace 	b.w	141e4 <auto_nav+0x21a4>
       }
       else if (nav_stage == 6)
   12c48:	f64a 6308 	movw	r3, #44552	; 0xae08
   12c4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c50:	781b      	ldrb	r3, [r3, #0]
   12c52:	2b06      	cmp	r3, #6
   12c54:	d16f      	bne.n	12d36 <auto_nav+0xcf6>
       {
          nav_stage =6;
   12c56:	f64a 6308 	movw	r3, #44552	; 0xae08
   12c5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c5e:	2206      	movs	r2, #6
   12c60:	701a      	strb	r2, [r3, #0]
          if (approaching(5)) NextStageFrom(5) else {
   12c62:	2005      	movs	r0, #5
   12c64:	f001 facc 	bl	14200 <approaching>
   12c68:	4603      	mov	r3, r0
   12c6a:	2b00      	cmp	r3, #0
   12c6c:	d034      	beq.n	12cd8 <auto_nav+0xc98>
   12c6e:	f64a 6314 	movw	r3, #44564	; 0xae14
   12c72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c76:	2205      	movs	r2, #5
   12c78:	701a      	strb	r2, [r3, #0]
   12c7a:	f64a 6308 	movw	r3, #44552	; 0xae08
   12c7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c82:	781b      	ldrb	r3, [r3, #0]
   12c84:	3301      	adds	r3, #1
   12c86:	b2da      	uxtb	r2, r3
   12c88:	f64a 6308 	movw	r3, #44552	; 0xae08
   12c8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c90:	701a      	strb	r2, [r3, #0]
   12c92:	f24b 0364 	movw	r3, #45156	; 0xb064
   12c96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c9a:	681a      	ldr	r2, [r3, #0]
   12c9c:	f64a 630c 	movw	r3, #44556	; 0xae0c
   12ca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ca4:	601a      	str	r2, [r3, #0]
   12ca6:	f24b 0368 	movw	r3, #45160	; 0xb068
   12caa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cae:	681a      	ldr	r2, [r3, #0]
   12cb0:	f64a 6310 	movw	r3, #44560	; 0xae10
   12cb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cb8:	601a      	str	r2, [r3, #0]
   12cba:	f64a 631c 	movw	r3, #44572	; 0xae1c
   12cbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cc2:	2200      	movs	r2, #0
   12cc4:	801a      	strh	r2, [r3, #0]
   12cc6:	f64a 6320 	movw	r3, #44576	; 0xae20
   12cca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cce:	f04f 0200 	mov.w	r2, #0
   12cd2:	601a      	str	r2, [r3, #0]
   12cd4:	f001 ba86 	b.w	141e4 <auto_nav+0x21a4>
            route_to(last_wp, 5);
   12cd8:	f64a 6314 	movw	r3, #44564	; 0xae14
   12cdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ce0:	781b      	ldrb	r3, [r3, #0]
   12ce2:	4618      	mov	r0, r3
   12ce4:	2105      	movs	r1, #5
   12ce6:	f001 fbe1 	bl	144ac <route_to>
            auto_pitch = FALSE;
   12cea:	f64a 2397 	movw	r3, #43671	; 0xaa97
   12cee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cf2:	2200      	movs	r2, #0
   12cf4:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12cf6:	f64a 6334 	movw	r3, #44596	; 0xae34
   12cfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cfe:	f04f 0200 	mov.w	r2, #0
   12d02:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12d04:	f64a 2395 	movw	r3, #43669	; 0xaa95
   12d08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d0c:	2203      	movs	r2, #3
   12d0e:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[5].a;
   12d10:	f240 23bc 	movw	r3, #700	; 0x2bc
   12d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   12d1a:	f240 23b8 	movw	r3, #696	; 0x2b8
   12d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d22:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12d24:	f64a 53fc 	movw	r3, #44540	; 0xadfc
   12d28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d2c:	f04f 0200 	mov.w	r2, #0
   12d30:	601a      	str	r2, [r3, #0]
          }
          return;
   12d32:	f001 ba57 	b.w	141e4 <auto_nav+0x21a4>
       }
       else if (nav_stage == 7)
   12d36:	f64a 6308 	movw	r3, #44552	; 0xae08
   12d3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d3e:	781b      	ldrb	r3, [r3, #0]
   12d40:	2b07      	cmp	r3, #7
   12d42:	d106      	bne.n	12d52 <auto_nav+0xd12>
       {
	   nav_stage =7;
   12d44:	f64a 6308 	movw	r3, #44552	; 0xae08
   12d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d4c:	2207      	movs	r2, #7
   12d4e:	701a      	strb	r2, [r3, #0]
	   Goto(while_5)
   12d50:	e50a      	b.n	12768 <auto_nav+0x728>
	}
       
       else if (nav_stage == 8){
   12d52:	f64a 6308 	movw	r3, #44552	; 0xae08
   12d56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d5a:	781b      	ldrb	r3, [r3, #0]
   12d5c:	2b08      	cmp	r3, #8
   12d5e:	f041 8241 	bne.w	141e4 <auto_nav+0x21a4>
	  Label(endwhile_6)
	  nav_stage =8;
   12d62:	f64a 6308 	movw	r3, #44552	; 0xae08
   12d66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d6a:	2208      	movs	r2, #8
   12d6c:	701a      	strb	r2, [r3, #0]
          NextBlock();
   12d6e:	f64a 6309 	movw	r3, #44553	; 0xae09
   12d72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d76:	781b      	ldrb	r3, [r3, #0]
   12d78:	3301      	adds	r3, #1
   12d7a:	b2da      	uxtb	r2, r3
   12d7c:	f64a 6309 	movw	r3, #44553	; 0xae09
   12d80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d84:	701a      	strb	r2, [r3, #0]
   12d86:	f64a 6308 	movw	r3, #44552	; 0xae08
   12d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d8e:	2200      	movs	r2, #0
   12d90:	701a      	strb	r2, [r3, #0]
   12d92:	f64a 631e 	movw	r3, #44574	; 0xae1e
   12d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d9a:	2200      	movs	r2, #0
   12d9c:	801a      	strh	r2, [r3, #0]
   12d9e:	f24b 0364 	movw	r3, #45156	; 0xb064
   12da2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12da6:	681a      	ldr	r2, [r3, #0]
   12da8:	f64a 630c 	movw	r3, #44556	; 0xae0c
   12dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12db0:	601a      	str	r2, [r3, #0]
   12db2:	f24b 0368 	movw	r3, #45160	; 0xb068
   12db6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12dba:	681a      	ldr	r2, [r3, #0]
   12dbc:	f64a 6310 	movw	r3, #44560	; 0xae10
   12dc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12dc4:	601a      	str	r2, [r3, #0]
   12dc6:	f64a 631c 	movw	r3, #44572	; 0xae1c
   12dca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12dce:	2200      	movs	r2, #0
   12dd0:	801a      	strh	r2, [r3, #0]
   12dd2:	f64a 6320 	movw	r3, #44576	; 0xae20
   12dd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12dda:	f04f 0200 	mov.w	r2, #0
   12dde:	601a      	str	r2, [r3, #0]
   12de0:	f001 ba00 	b.w	141e4 <auto_nav+0x21a4>
       }
       else { }
}
else if (nav_block == 3) // xyz
   12de4:	f64a 6309 	movw	r3, #44553	; 0xae09
   12de8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12dec:	781b      	ldrb	r3, [r3, #0]
   12dee:	2b03      	cmp	r3, #3
   12df0:	f040 8388 	bne.w	13504 <auto_nav+0x14c4>
{
    nav_block = 3;
   12df4:	f64a 6309 	movw	r3, #44553	; 0xae09
   12df8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12dfc:	2203      	movs	r2, #3
   12dfe:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(4) }
   12e00:	f64a 2398 	movw	r3, #43672	; 0xaa98
   12e04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e08:	781b      	ldrb	r3, [r3, #0]
   12e0a:	2b00      	cmp	r3, #0
   12e0c:	d007      	beq.n	12e1e <auto_nav+0xdde>
   12e0e:	f64a 2398 	movw	r3, #43672	; 0xaa98
   12e12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e16:	2200      	movs	r2, #0
   12e18:	701a      	strb	r2, [r3, #0]
   12e1a:	2301      	movs	r3, #1
   12e1c:	e000      	b.n	12e20 <auto_nav+0xde0>
   12e1e:	2300      	movs	r3, #0
   12e20:	2b00      	cmp	r3, #0
   12e22:	d034      	beq.n	12e8e <auto_nav+0xe4e>
   12e24:	f64a 6309 	movw	r3, #44553	; 0xae09
   12e28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e2c:	2204      	movs	r2, #4
   12e2e:	701a      	strb	r2, [r3, #0]
   12e30:	f64a 6308 	movw	r3, #44552	; 0xae08
   12e34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e38:	2200      	movs	r2, #0
   12e3a:	701a      	strb	r2, [r3, #0]
   12e3c:	f64a 631e 	movw	r3, #44574	; 0xae1e
   12e40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e44:	2200      	movs	r2, #0
   12e46:	801a      	strh	r2, [r3, #0]
   12e48:	f24b 0364 	movw	r3, #45156	; 0xb064
   12e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e50:	681a      	ldr	r2, [r3, #0]
   12e52:	f64a 630c 	movw	r3, #44556	; 0xae0c
   12e56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e5a:	601a      	str	r2, [r3, #0]
   12e5c:	f24b 0368 	movw	r3, #45160	; 0xb068
   12e60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e64:	681a      	ldr	r2, [r3, #0]
   12e66:	f64a 6310 	movw	r3, #44560	; 0xae10
   12e6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e6e:	601a      	str	r2, [r3, #0]
   12e70:	f64a 631c 	movw	r3, #44572	; 0xae1c
   12e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e78:	2200      	movs	r2, #0
   12e7a:	801a      	strh	r2, [r3, #0]
   12e7c:	f64a 6320 	movw	r3, #44576	; 0xae20
   12e80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e84:	f04f 0200 	mov.w	r2, #0
   12e88:	601a      	str	r2, [r3, #0]
   12e8a:	f001 b9ab 	b.w	141e4 <auto_nav+0x21a4>
    if(nav_stage == 0)
   12e8e:	f64a 6308 	movw	r3, #44552	; 0xae08
   12e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e96:	781b      	ldrb	r3, [r3, #0]
   12e98:	2b00      	cmp	r3, #0
   12e9a:	f040 82ea 	bne.w	13472 <auto_nav+0x1432>
    {
        nav_stage = 0;
   12e9e:	f64a 6308 	movw	r3, #44552	; 0xae08
   12ea2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ea6:	2200      	movs	r2, #0
   12ea8:	701a      	strb	r2, [r3, #0]
        Goto3D(50)
   12eaa:	f64a 2394 	movw	r3, #43668	; 0xaa94
   12eae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12eb2:	781b      	ldrb	r3, [r3, #0]
   12eb4:	2b02      	cmp	r3, #2
   12eb6:	f040 81a5 	bne.w	13204 <auto_nav+0x11c4>
   12eba:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   12ebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ec2:	88db      	ldrh	r3, [r3, #6]
   12ec4:	84fb      	strh	r3, [r7, #38]	; 0x26
   12ec6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   12eca:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   12ece:	dc04      	bgt.n	12eda <auto_nav+0xe9a>
   12ed0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   12ed4:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   12ed8:	da7e      	bge.n	12fd8 <auto_nav+0xf98>
   12eda:	f64a 6354 	movw	r3, #44628	; 0xae54
   12ede:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ee2:	681b      	ldr	r3, [r3, #0]
   12ee4:	4618      	mov	r0, r3
   12ee6:	f004 fd63 	bl	179b0 <__aeabi_f2d>
   12eea:	4604      	mov	r4, r0
   12eec:	460d      	mov	r5, r1
   12eee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   12ef2:	4618      	mov	r0, r3
   12ef4:	f005 f99c 	bl	18230 <__aeabi_i2f>
   12ef8:	4603      	mov	r3, r0
   12efa:	4618      	mov	r0, r3
   12efc:	f04f 0100 	mov.w	r1, #0
   12f00:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12f04:	f005 fa9c 	bl	18440 <__aeabi_fdiv>
   12f08:	4603      	mov	r3, r0
   12f0a:	4618      	mov	r0, r3
   12f0c:	f004 fd50 	bl	179b0 <__aeabi_f2d>
   12f10:	4602      	mov	r2, r0
   12f12:	460b      	mov	r3, r1
   12f14:	4610      	mov	r0, r2
   12f16:	4619      	mov	r1, r3
   12f18:	f04f 0200 	mov.w	r2, #0
   12f1c:	f04f 0300 	mov.w	r3, #0
   12f20:	f2cc 0334 	movt	r3, #49204	; 0xc034
   12f24:	f004 fd98 	bl	17a58 <__aeabi_dmul>
   12f28:	4602      	mov	r2, r0
   12f2a:	460b      	mov	r3, r1
   12f2c:	4610      	mov	r0, r2
   12f2e:	4619      	mov	r1, r3
   12f30:	f04f 0200 	mov.w	r2, #0
   12f34:	f04f 0300 	mov.w	r3, #0
   12f38:	f004 fbdc 	bl	176f4 <__adddf3>
   12f3c:	4602      	mov	r2, r0
   12f3e:	460b      	mov	r3, r1
   12f40:	4620      	mov	r0, r4
   12f42:	4629      	mov	r1, r5
   12f44:	f004 fbd6 	bl	176f4 <__adddf3>
   12f48:	4602      	mov	r2, r0
   12f4a:	460b      	mov	r3, r1
   12f4c:	4610      	mov	r0, r2
   12f4e:	4619      	mov	r1, r3
   12f50:	f005 f864 	bl	1801c <__aeabi_d2f>
   12f54:	4602      	mov	r2, r0
   12f56:	f64a 6354 	movw	r3, #44628	; 0xae54
   12f5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f5e:	601a      	str	r2, [r3, #0]
   12f60:	f64a 6354 	movw	r3, #44628	; 0xae54
   12f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f68:	681b      	ldr	r3, [r3, #0]
   12f6a:	4618      	mov	r0, r3
   12f6c:	f04f 0100 	mov.w	r1, #0
   12f70:	f2c4 317a 	movt	r1, #17274	; 0x437a
   12f74:	f005 fb58 	bl	18628 <__aeabi_fcmple>
   12f78:	4603      	mov	r3, r0
   12f7a:	2b00      	cmp	r3, #0
   12f7c:	d005      	beq.n	12f8a <auto_nav+0xf4a>
   12f7e:	f64a 6354 	movw	r3, #44628	; 0xae54
   12f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f86:	681a      	ldr	r2, [r3, #0]
   12f88:	e003      	b.n	12f92 <auto_nav+0xf52>
   12f8a:	f04f 0200 	mov.w	r2, #0
   12f8e:	f2c4 327a 	movt	r2, #17274	; 0x437a
   12f92:	f64a 6354 	movw	r3, #44628	; 0xae54
   12f96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f9a:	601a      	str	r2, [r3, #0]
   12f9c:	f64a 6354 	movw	r3, #44628	; 0xae54
   12fa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fa4:	681b      	ldr	r3, [r3, #0]
   12fa6:	4618      	mov	r0, r3
   12fa8:	f04f 0100 	mov.w	r1, #0
   12fac:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   12fb0:	f005 fb44 	bl	1863c <__aeabi_fcmpge>
   12fb4:	4603      	mov	r3, r0
   12fb6:	2b00      	cmp	r3, #0
   12fb8:	d005      	beq.n	12fc6 <auto_nav+0xf86>
   12fba:	f64a 6354 	movw	r3, #44628	; 0xae54
   12fbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fc2:	681a      	ldr	r2, [r3, #0]
   12fc4:	e003      	b.n	12fce <auto_nav+0xf8e>
   12fc6:	f04f 0200 	mov.w	r2, #0
   12fca:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   12fce:	f64a 6354 	movw	r3, #44628	; 0xae54
   12fd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fd6:	601a      	str	r2, [r3, #0]
   12fd8:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   12fdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fe0:	889b      	ldrh	r3, [r3, #4]
   12fe2:	84bb      	strh	r3, [r7, #36]	; 0x24
   12fe4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   12fe8:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   12fec:	dc04      	bgt.n	12ff8 <auto_nav+0xfb8>
   12fee:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   12ff2:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   12ff6:	da7e      	bge.n	130f6 <auto_nav+0x10b6>
   12ff8:	f64a 6358 	movw	r3, #44632	; 0xae58
   12ffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13000:	681b      	ldr	r3, [r3, #0]
   13002:	4618      	mov	r0, r3
   13004:	f004 fcd4 	bl	179b0 <__aeabi_f2d>
   13008:	4604      	mov	r4, r0
   1300a:	460d      	mov	r5, r1
   1300c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   13010:	4618      	mov	r0, r3
   13012:	f005 f90d 	bl	18230 <__aeabi_i2f>
   13016:	4603      	mov	r3, r0
   13018:	4618      	mov	r0, r3
   1301a:	f04f 0100 	mov.w	r1, #0
   1301e:	f2c4 6116 	movt	r1, #17942	; 0x4616
   13022:	f005 fa0d 	bl	18440 <__aeabi_fdiv>
   13026:	4603      	mov	r3, r0
   13028:	4618      	mov	r0, r3
   1302a:	f004 fcc1 	bl	179b0 <__aeabi_f2d>
   1302e:	4602      	mov	r2, r0
   13030:	460b      	mov	r3, r1
   13032:	4610      	mov	r0, r2
   13034:	4619      	mov	r1, r3
   13036:	f04f 0200 	mov.w	r2, #0
   1303a:	f04f 0300 	mov.w	r3, #0
   1303e:	f2cc 0334 	movt	r3, #49204	; 0xc034
   13042:	f004 fd09 	bl	17a58 <__aeabi_dmul>
   13046:	4602      	mov	r2, r0
   13048:	460b      	mov	r3, r1
   1304a:	4610      	mov	r0, r2
   1304c:	4619      	mov	r1, r3
   1304e:	f04f 0200 	mov.w	r2, #0
   13052:	f04f 0300 	mov.w	r3, #0
   13056:	f004 fb4d 	bl	176f4 <__adddf3>
   1305a:	4602      	mov	r2, r0
   1305c:	460b      	mov	r3, r1
   1305e:	4620      	mov	r0, r4
   13060:	4629      	mov	r1, r5
   13062:	f004 fb47 	bl	176f4 <__adddf3>
   13066:	4602      	mov	r2, r0
   13068:	460b      	mov	r3, r1
   1306a:	4610      	mov	r0, r2
   1306c:	4619      	mov	r1, r3
   1306e:	f004 ffd5 	bl	1801c <__aeabi_d2f>
   13072:	4602      	mov	r2, r0
   13074:	f64a 6358 	movw	r3, #44632	; 0xae58
   13078:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1307c:	601a      	str	r2, [r3, #0]
   1307e:	f64a 6358 	movw	r3, #44632	; 0xae58
   13082:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13086:	681b      	ldr	r3, [r3, #0]
   13088:	4618      	mov	r0, r3
   1308a:	f04f 0100 	mov.w	r1, #0
   1308e:	f2c4 317a 	movt	r1, #17274	; 0x437a
   13092:	f005 fac9 	bl	18628 <__aeabi_fcmple>
   13096:	4603      	mov	r3, r0
   13098:	2b00      	cmp	r3, #0
   1309a:	d005      	beq.n	130a8 <auto_nav+0x1068>
   1309c:	f64a 6358 	movw	r3, #44632	; 0xae58
   130a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130a4:	681a      	ldr	r2, [r3, #0]
   130a6:	e003      	b.n	130b0 <auto_nav+0x1070>
   130a8:	f04f 0200 	mov.w	r2, #0
   130ac:	f2c4 327a 	movt	r2, #17274	; 0x437a
   130b0:	f64a 6358 	movw	r3, #44632	; 0xae58
   130b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130b8:	601a      	str	r2, [r3, #0]
   130ba:	f64a 6358 	movw	r3, #44632	; 0xae58
   130be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130c2:	681b      	ldr	r3, [r3, #0]
   130c4:	4618      	mov	r0, r3
   130c6:	f04f 0100 	mov.w	r1, #0
   130ca:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   130ce:	f005 fab5 	bl	1863c <__aeabi_fcmpge>
   130d2:	4603      	mov	r3, r0
   130d4:	2b00      	cmp	r3, #0
   130d6:	d005      	beq.n	130e4 <auto_nav+0x10a4>
   130d8:	f64a 6358 	movw	r3, #44632	; 0xae58
   130dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130e0:	681a      	ldr	r2, [r3, #0]
   130e2:	e003      	b.n	130ec <auto_nav+0x10ac>
   130e4:	f04f 0200 	mov.w	r2, #0
   130e8:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   130ec:	f64a 6358 	movw	r3, #44632	; 0xae58
   130f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130f4:	601a      	str	r2, [r3, #0]
   130f6:	f64a 2395 	movw	r3, #43669	; 0xaa95
   130fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130fe:	2203      	movs	r2, #3
   13100:	701a      	strb	r2, [r3, #0]
   13102:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   13106:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1310a:	885b      	ldrh	r3, [r3, #2]
   1310c:	847b      	strh	r3, [r7, #34]	; 0x22
   1310e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   13112:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   13116:	dc04      	bgt.n	13122 <auto_nav+0x10e2>
   13118:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   1311c:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   13120:	da70      	bge.n	13204 <auto_nav+0x11c4>
   13122:	f240 23b8 	movw	r3, #696	; 0x2b8
   13126:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1312a:	681b      	ldr	r3, [r3, #0]
   1312c:	4618      	mov	r0, r3
   1312e:	f004 fc3f 	bl	179b0 <__aeabi_f2d>
   13132:	4604      	mov	r4, r0
   13134:	460d      	mov	r5, r1
   13136:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   1313a:	4618      	mov	r0, r3
   1313c:	f005 f878 	bl	18230 <__aeabi_i2f>
   13140:	4603      	mov	r3, r0
   13142:	4618      	mov	r0, r3
   13144:	f04f 0100 	mov.w	r1, #0
   13148:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1314c:	f005 f978 	bl	18440 <__aeabi_fdiv>
   13150:	4603      	mov	r3, r0
   13152:	4618      	mov	r0, r3
   13154:	f004 fc2c 	bl	179b0 <__aeabi_f2d>
   13158:	4602      	mov	r2, r0
   1315a:	460b      	mov	r3, r1
   1315c:	f04f 0000 	mov.w	r0, #0
   13160:	f04f 0100 	mov.w	r1, #0
   13164:	f004 fac4 	bl	176f0 <__aeabi_dsub>
   13168:	4602      	mov	r2, r0
   1316a:	460b      	mov	r3, r1
   1316c:	4620      	mov	r0, r4
   1316e:	4629      	mov	r1, r5
   13170:	f004 fac0 	bl	176f4 <__adddf3>
   13174:	4602      	mov	r2, r0
   13176:	460b      	mov	r3, r1
   13178:	4610      	mov	r0, r2
   1317a:	4619      	mov	r1, r3
   1317c:	f004 ff4e 	bl	1801c <__aeabi_d2f>
   13180:	4602      	mov	r2, r0
   13182:	f240 23b8 	movw	r3, #696	; 0x2b8
   13186:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1318a:	601a      	str	r2, [r3, #0]
   1318c:	f240 23b8 	movw	r3, #696	; 0x2b8
   13190:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13194:	681b      	ldr	r3, [r3, #0]
   13196:	4618      	mov	r0, r3
   13198:	f04f 0100 	mov.w	r1, #0
   1319c:	f2c4 312f 	movt	r1, #17199	; 0x432f
   131a0:	f005 fa4c 	bl	1863c <__aeabi_fcmpge>
   131a4:	4603      	mov	r3, r0
   131a6:	2b00      	cmp	r3, #0
   131a8:	d005      	beq.n	131b6 <auto_nav+0x1176>
   131aa:	f240 23b8 	movw	r3, #696	; 0x2b8
   131ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131b2:	681a      	ldr	r2, [r3, #0]
   131b4:	e003      	b.n	131be <auto_nav+0x117e>
   131b6:	f04f 0200 	mov.w	r2, #0
   131ba:	f2c4 322f 	movt	r2, #17199	; 0x432f
   131be:	f240 23b8 	movw	r3, #696	; 0x2b8
   131c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131c6:	601a      	str	r2, [r3, #0]
   131c8:	f240 23b8 	movw	r3, #696	; 0x2b8
   131cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131d0:	681b      	ldr	r3, [r3, #0]
   131d2:	4618      	mov	r0, r3
   131d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   131d8:	f2c4 3189 	movt	r1, #17289	; 0x4389
   131dc:	f005 fa24 	bl	18628 <__aeabi_fcmple>
   131e0:	4603      	mov	r3, r0
   131e2:	2b00      	cmp	r3, #0
   131e4:	d005      	beq.n	131f2 <auto_nav+0x11b2>
   131e6:	f240 23b8 	movw	r3, #696	; 0x2b8
   131ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131ee:	681a      	ldr	r2, [r3, #0]
   131f0:	e003      	b.n	131fa <auto_nav+0x11ba>
   131f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   131f6:	f2c4 3289 	movt	r2, #17289	; 0x4389
   131fa:	f240 23b8 	movw	r3, #696	; 0x2b8
   131fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13202:	601a      	str	r2, [r3, #0]
   13204:	f24b 0368 	movw	r3, #45160	; 0xb068
   13208:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1320c:	681a      	ldr	r2, [r3, #0]
   1320e:	f64a 6358 	movw	r3, #44632	; 0xae58
   13212:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13216:	681b      	ldr	r3, [r3, #0]
   13218:	4610      	mov	r0, r2
   1321a:	4619      	mov	r1, r3
   1321c:	f004 ff52 	bl	180c4 <__aeabi_fsub>
   13220:	4603      	mov	r3, r0
   13222:	4618      	mov	r0, r3
   13224:	f004 fbc4 	bl	179b0 <__aeabi_f2d>
   13228:	4604      	mov	r4, r0
   1322a:	460d      	mov	r5, r1
   1322c:	f24b 0364 	movw	r3, #45156	; 0xb064
   13230:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13234:	681a      	ldr	r2, [r3, #0]
   13236:	f64a 6354 	movw	r3, #44628	; 0xae54
   1323a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1323e:	681b      	ldr	r3, [r3, #0]
   13240:	4610      	mov	r0, r2
   13242:	4619      	mov	r1, r3
   13244:	f004 ff3e 	bl	180c4 <__aeabi_fsub>
   13248:	4603      	mov	r3, r0
   1324a:	4618      	mov	r0, r3
   1324c:	f004 fbb0 	bl	179b0 <__aeabi_f2d>
   13250:	4602      	mov	r2, r0
   13252:	460b      	mov	r3, r1
   13254:	4620      	mov	r0, r4
   13256:	4629      	mov	r1, r5
   13258:	f002 fa12 	bl	15680 <pp_atan2>
   1325c:	4602      	mov	r2, r0
   1325e:	460b      	mov	r3, r1
   13260:	4610      	mov	r0, r2
   13262:	4619      	mov	r1, r3
   13264:	f004 feda 	bl	1801c <__aeabi_d2f>
   13268:	4603      	mov	r3, r0
   1326a:	61fb      	str	r3, [r7, #28]
   1326c:	69f8      	ldr	r0, [r7, #28]
   1326e:	f004 fb9f 	bl	179b0 <__aeabi_f2d>
   13272:	4604      	mov	r4, r0
   13274:	460d      	mov	r5, r1
   13276:	f24b 039c 	movw	r3, #45212	; 0xb09c
   1327a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1327e:	681b      	ldr	r3, [r3, #0]
   13280:	4618      	mov	r0, r3
   13282:	f04f 0100 	mov.w	r1, #0
   13286:	f2cc 2148 	movt	r1, #49736	; 0xc248
   1328a:	f005 f825 	bl	182d8 <__aeabi_fmul>
   1328e:	4603      	mov	r3, r0
   13290:	4618      	mov	r0, r3
   13292:	f004 fb8d 	bl	179b0 <__aeabi_f2d>
   13296:	4602      	mov	r2, r0
   13298:	460b      	mov	r3, r1
   1329a:	f04f 0000 	mov.w	r0, #0
   1329e:	f04f 0100 	mov.w	r1, #0
   132a2:	f2c4 0114 	movt	r1, #16404	; 0x4014
   132a6:	f004 fd01 	bl	17cac <__aeabi_ddiv>
   132aa:	4602      	mov	r2, r0
   132ac:	460b      	mov	r3, r1
   132ae:	4620      	mov	r0, r4
   132b0:	4629      	mov	r1, r5
   132b2:	f004 fa1f 	bl	176f4 <__adddf3>
   132b6:	4602      	mov	r2, r0
   132b8:	460b      	mov	r3, r1
   132ba:	4610      	mov	r0, r2
   132bc:	4619      	mov	r1, r3
   132be:	f004 fead 	bl	1801c <__aeabi_d2f>
   132c2:	4603      	mov	r3, r0
   132c4:	61bb      	str	r3, [r7, #24]
   132c6:	f64a 6354 	movw	r3, #44628	; 0xae54
   132ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   132ce:	681b      	ldr	r3, [r3, #0]
   132d0:	4618      	mov	r0, r3
   132d2:	f004 fb6d 	bl	179b0 <__aeabi_f2d>
   132d6:	4604      	mov	r4, r0
   132d8:	460d      	mov	r5, r1
   132da:	69b8      	ldr	r0, [r7, #24]
   132dc:	f004 fb68 	bl	179b0 <__aeabi_f2d>
   132e0:	4602      	mov	r2, r0
   132e2:	460b      	mov	r3, r1
   132e4:	4610      	mov	r0, r2
   132e6:	4619      	mov	r1, r3
   132e8:	a3b1      	add	r3, pc, #708	; (adr r3, 135b0 <auto_nav+0x1570>)
   132ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   132ee:	f004 fa01 	bl	176f4 <__adddf3>
   132f2:	4602      	mov	r2, r0
   132f4:	460b      	mov	r3, r1
   132f6:	4610      	mov	r0, r2
   132f8:	4619      	mov	r1, r3
   132fa:	f002 fa81 	bl	15800 <pp_sin>
   132fe:	4602      	mov	r2, r0
   13300:	460b      	mov	r3, r1
   13302:	4610      	mov	r0, r2
   13304:	4619      	mov	r1, r3
   13306:	f04f 0200 	mov.w	r2, #0
   1330a:	f04f 0300 	mov.w	r3, #0
   1330e:	f2c4 0349 	movt	r3, #16457	; 0x4049
   13312:	f004 fba1 	bl	17a58 <__aeabi_dmul>
   13316:	4602      	mov	r2, r0
   13318:	460b      	mov	r3, r1
   1331a:	4620      	mov	r0, r4
   1331c:	4629      	mov	r1, r5
   1331e:	f004 f9e9 	bl	176f4 <__adddf3>
   13322:	4602      	mov	r2, r0
   13324:	460b      	mov	r3, r1
   13326:	4610      	mov	r0, r2
   13328:	4619      	mov	r1, r3
   1332a:	f004 fe77 	bl	1801c <__aeabi_d2f>
   1332e:	4606      	mov	r6, r0
   13330:	f64a 6358 	movw	r3, #44632	; 0xae58
   13334:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13338:	681b      	ldr	r3, [r3, #0]
   1333a:	4618      	mov	r0, r3
   1333c:	f004 fb38 	bl	179b0 <__aeabi_f2d>
   13340:	4604      	mov	r4, r0
   13342:	460d      	mov	r5, r1
   13344:	69b8      	ldr	r0, [r7, #24]
   13346:	f004 fb33 	bl	179b0 <__aeabi_f2d>
   1334a:	4602      	mov	r2, r0
   1334c:	460b      	mov	r3, r1
   1334e:	4610      	mov	r0, r2
   13350:	4619      	mov	r1, r3
   13352:	f002 fa55 	bl	15800 <pp_sin>
   13356:	4602      	mov	r2, r0
   13358:	460b      	mov	r3, r1
   1335a:	4610      	mov	r0, r2
   1335c:	4619      	mov	r1, r3
   1335e:	f04f 0200 	mov.w	r2, #0
   13362:	f04f 0300 	mov.w	r3, #0
   13366:	f2c4 0349 	movt	r3, #16457	; 0x4049
   1336a:	f004 fb75 	bl	17a58 <__aeabi_dmul>
   1336e:	4602      	mov	r2, r0
   13370:	460b      	mov	r3, r1
   13372:	4620      	mov	r0, r4
   13374:	4629      	mov	r1, r5
   13376:	f004 f9bd 	bl	176f4 <__adddf3>
   1337a:	4602      	mov	r2, r0
   1337c:	460b      	mov	r3, r1
   1337e:	4610      	mov	r0, r2
   13380:	4619      	mov	r1, r3
   13382:	f004 fe4b 	bl	1801c <__aeabi_d2f>
   13386:	4603      	mov	r3, r0
   13388:	4630      	mov	r0, r6
   1338a:	4619      	mov	r1, r3
   1338c:	f001 f81c 	bl	143c8 <fly_to_xy>
   13390:	69b8      	ldr	r0, [r7, #24]
   13392:	f004 fb0d 	bl	179b0 <__aeabi_f2d>
   13396:	4602      	mov	r2, r0
   13398:	460b      	mov	r3, r1
   1339a:	a185      	add	r1, pc, #532	; (adr r1, 135b0 <auto_nav+0x1570>)
   1339c:	e9d1 0100 	ldrd	r0, r1, [r1]
   133a0:	f004 f9a6 	bl	176f0 <__aeabi_dsub>
   133a4:	4602      	mov	r2, r0
   133a6:	460b      	mov	r3, r1
   133a8:	4610      	mov	r0, r2
   133aa:	4619      	mov	r1, r3
   133ac:	a382      	add	r3, pc, #520	; (adr r3, 135b8 <auto_nav+0x1578>)
   133ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   133b2:	f004 fc7b 	bl	17cac <__aeabi_ddiv>
   133b6:	4602      	mov	r2, r0
   133b8:	460b      	mov	r3, r1
   133ba:	4610      	mov	r0, r2
   133bc:	4619      	mov	r1, r3
   133be:	f04f 0200 	mov.w	r2, #0
   133c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   133c6:	f2c4 0366 	movt	r3, #16486	; 0x4066
   133ca:	f004 fb45 	bl	17a58 <__aeabi_dmul>
   133ce:	4602      	mov	r2, r0
   133d0:	460b      	mov	r3, r1
   133d2:	4610      	mov	r0, r2
   133d4:	4619      	mov	r1, r3
   133d6:	f004 fe21 	bl	1801c <__aeabi_d2f>
   133da:	4602      	mov	r2, r0
   133dc:	f64a 6324 	movw	r3, #44580	; 0xae24
   133e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   133e4:	601a      	str	r2, [r3, #0]
   133e6:	e012      	b.n	1340e <auto_nav+0x13ce>
   133e8:	f64a 6324 	movw	r3, #44580	; 0xae24
   133ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   133f0:	681b      	ldr	r3, [r3, #0]
   133f2:	4618      	mov	r0, r3
   133f4:	f04f 0100 	mov.w	r1, #0
   133f8:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   133fc:	f004 fe64 	bl	180c8 <__addsf3>
   13400:	4603      	mov	r3, r0
   13402:	461a      	mov	r2, r3
   13404:	f64a 6324 	movw	r3, #44580	; 0xae24
   13408:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1340c:	601a      	str	r2, [r3, #0]
   1340e:	f64a 6324 	movw	r3, #44580	; 0xae24
   13412:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13416:	681b      	ldr	r3, [r3, #0]
   13418:	4618      	mov	r0, r3
   1341a:	f04f 0100 	mov.w	r1, #0
   1341e:	f005 f8f9 	bl	18614 <__aeabi_fcmplt>
   13422:	4603      	mov	r3, r0
   13424:	2b00      	cmp	r3, #0
   13426:	d1df      	bne.n	133e8 <auto_nav+0x13a8>
   13428:	e012      	b.n	13450 <auto_nav+0x1410>
   1342a:	f64a 6324 	movw	r3, #44580	; 0xae24
   1342e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13432:	681b      	ldr	r3, [r3, #0]
   13434:	4618      	mov	r0, r3
   13436:	f04f 0100 	mov.w	r1, #0
   1343a:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1343e:	f004 fe41 	bl	180c4 <__aeabi_fsub>
   13442:	4603      	mov	r3, r0
   13444:	461a      	mov	r2, r3
   13446:	f64a 6324 	movw	r3, #44580	; 0xae24
   1344a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1344e:	601a      	str	r2, [r3, #0]
   13450:	f64a 6324 	movw	r3, #44580	; 0xae24
   13454:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13458:	681b      	ldr	r3, [r3, #0]
   1345a:	4618      	mov	r0, r3
   1345c:	f04f 0100 	mov.w	r1, #0
   13460:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13464:	f005 f8ea 	bl	1863c <__aeabi_fcmpge>
   13468:	4603      	mov	r3, r0
   1346a:	2b00      	cmp	r3, #0
   1346c:	d1dd      	bne.n	1342a <auto_nav+0x13ea>
        return;
   1346e:	f000 beb9 	b.w	141e4 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   13472:	f64a 6308 	movw	r3, #44552	; 0xae08
   13476:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1347a:	781b      	ldrb	r3, [r3, #0]
   1347c:	2b01      	cmp	r3, #1
   1347e:	f040 86b1 	bne.w	141e4 <auto_nav+0x21a4>
    {
        nav_stage = 1;
   13482:	f64a 6308 	movw	r3, #44552	; 0xae08
   13486:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1348a:	2201      	movs	r2, #1
   1348c:	701a      	strb	r2, [r3, #0]
        NextBlock()
   1348e:	f64a 6309 	movw	r3, #44553	; 0xae09
   13492:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13496:	781b      	ldrb	r3, [r3, #0]
   13498:	3301      	adds	r3, #1
   1349a:	b2da      	uxtb	r2, r3
   1349c:	f64a 6309 	movw	r3, #44553	; 0xae09
   134a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134a4:	701a      	strb	r2, [r3, #0]
   134a6:	f64a 6308 	movw	r3, #44552	; 0xae08
   134aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134ae:	2200      	movs	r2, #0
   134b0:	701a      	strb	r2, [r3, #0]
   134b2:	f64a 631e 	movw	r3, #44574	; 0xae1e
   134b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134ba:	2200      	movs	r2, #0
   134bc:	801a      	strh	r2, [r3, #0]
   134be:	f24b 0364 	movw	r3, #45156	; 0xb064
   134c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134c6:	681a      	ldr	r2, [r3, #0]
   134c8:	f64a 630c 	movw	r3, #44556	; 0xae0c
   134cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134d0:	601a      	str	r2, [r3, #0]
   134d2:	f24b 0368 	movw	r3, #45160	; 0xb068
   134d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134da:	681a      	ldr	r2, [r3, #0]
   134dc:	f64a 6310 	movw	r3, #44560	; 0xae10
   134e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134e4:	601a      	str	r2, [r3, #0]
   134e6:	f64a 631c 	movw	r3, #44572	; 0xae1c
   134ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134ee:	2200      	movs	r2, #0
   134f0:	801a      	strh	r2, [r3, #0]
   134f2:	f64a 6320 	movw	r3, #44576	; 0xae20
   134f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134fa:	f04f 0200 	mov.w	r2, #0
   134fe:	601a      	str	r2, [r3, #0]
   13500:	f000 be70 	b.w	141e4 <auto_nav+0x21a4>
    }
    else { }
}
else if (nav_block == 4)
   13504:	f64a 6309 	movw	r3, #44553	; 0xae09
   13508:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1350c:	781b      	ldrb	r3, [r3, #0]
   1350e:	2b04      	cmp	r3, #4
   13510:	f040 8202 	bne.w	13918 <auto_nav+0x18d8>
{
    nav_block = 4;
   13514:	f64a 6309 	movw	r3, #44553	; 0xae09
   13518:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1351c:	2204      	movs	r2, #4
   1351e:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(5) }
   13520:	f64a 2398 	movw	r3, #43672	; 0xaa98
   13524:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13528:	781b      	ldrb	r3, [r3, #0]
   1352a:	2b00      	cmp	r3, #0
   1352c:	d007      	beq.n	1353e <auto_nav+0x14fe>
   1352e:	f64a 2398 	movw	r3, #43672	; 0xaa98
   13532:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13536:	2200      	movs	r2, #0
   13538:	701a      	strb	r2, [r3, #0]
   1353a:	2301      	movs	r3, #1
   1353c:	e000      	b.n	13540 <auto_nav+0x1500>
   1353e:	2300      	movs	r3, #0
   13540:	2b00      	cmp	r3, #0
   13542:	d03d      	beq.n	135c0 <auto_nav+0x1580>
   13544:	f64a 6309 	movw	r3, #44553	; 0xae09
   13548:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1354c:	2205      	movs	r2, #5
   1354e:	701a      	strb	r2, [r3, #0]
   13550:	f64a 6308 	movw	r3, #44552	; 0xae08
   13554:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13558:	2200      	movs	r2, #0
   1355a:	701a      	strb	r2, [r3, #0]
   1355c:	f64a 631e 	movw	r3, #44574	; 0xae1e
   13560:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13564:	2200      	movs	r2, #0
   13566:	801a      	strh	r2, [r3, #0]
   13568:	f24b 0364 	movw	r3, #45156	; 0xb064
   1356c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13570:	681a      	ldr	r2, [r3, #0]
   13572:	f64a 630c 	movw	r3, #44556	; 0xae0c
   13576:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1357a:	601a      	str	r2, [r3, #0]
   1357c:	f24b 0368 	movw	r3, #45160	; 0xb068
   13580:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13584:	681a      	ldr	r2, [r3, #0]
   13586:	f64a 6310 	movw	r3, #44560	; 0xae10
   1358a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1358e:	601a      	str	r2, [r3, #0]
   13590:	f64a 631c 	movw	r3, #44572	; 0xae1c
   13594:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13598:	2200      	movs	r2, #0
   1359a:	801a      	strh	r2, [r3, #0]
   1359c:	f64a 6320 	movw	r3, #44576	; 0xae20
   135a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135a4:	f04f 0200 	mov.w	r2, #0
   135a8:	601a      	str	r2, [r3, #0]
   135aa:	f000 be1b 	b.w	141e4 <auto_nav+0x21a4>
   135ae:	bf00      	nop
   135b0:	54442d18 	.word	0x54442d18
   135b4:	3ff921fb 	.word	0x3ff921fb
   135b8:	54442d18 	.word	0x54442d18
   135bc:	400921fb 	.word	0x400921fb
    if(nav_stage == 0)
   135c0:	f64a 6308 	movw	r3, #44552	; 0xae08
   135c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135c8:	781b      	ldrb	r3, [r3, #0]
   135ca:	2b00      	cmp	r3, #0
   135cc:	f040 815b 	bne.w	13886 <auto_nav+0x1846>
    {
        nav_stage = 0;
   135d0:	f64a 6308 	movw	r3, #44552	; 0xae08
   135d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135d8:	2200      	movs	r2, #0
   135da:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   135dc:	f64a 2397 	movw	r3, #43671	; 0xaa97
   135e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135e4:	2200      	movs	r2, #0
   135e6:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   135e8:	f64a 6334 	movw	r3, #44596	; 0xae34
   135ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135f0:	f04f 0200 	mov.w	r2, #0
   135f4:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   135f6:	f64a 2395 	movw	r3, #43669	; 0xaa95
   135fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135fe:	2203      	movs	r2, #3
   13600:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[0].a;
   13602:	f240 23bc 	movw	r3, #700	; 0x2bc
   13606:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1360a:	689a      	ldr	r2, [r3, #8]
   1360c:	f240 23b8 	movw	r3, #696	; 0x2b8
   13610:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13614:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   13616:	f64a 53fc 	movw	r3, #44540	; 0xadfc
   1361a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1361e:	f04f 0200 	mov.w	r2, #0
   13622:	601a      	str	r2, [r3, #0]
        Circle(0, 150);
   13624:	f24b 0368 	movw	r3, #45160	; 0xb068
   13628:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1362c:	681a      	ldr	r2, [r3, #0]
   1362e:	f240 23bc 	movw	r3, #700	; 0x2bc
   13632:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13636:	685b      	ldr	r3, [r3, #4]
   13638:	4610      	mov	r0, r2
   1363a:	4619      	mov	r1, r3
   1363c:	f004 fd42 	bl	180c4 <__aeabi_fsub>
   13640:	4603      	mov	r3, r0
   13642:	4618      	mov	r0, r3
   13644:	f004 f9b4 	bl	179b0 <__aeabi_f2d>
   13648:	4604      	mov	r4, r0
   1364a:	460d      	mov	r5, r1
   1364c:	f24b 0364 	movw	r3, #45156	; 0xb064
   13650:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13654:	681a      	ldr	r2, [r3, #0]
   13656:	f240 23bc 	movw	r3, #700	; 0x2bc
   1365a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1365e:	681b      	ldr	r3, [r3, #0]
   13660:	4610      	mov	r0, r2
   13662:	4619      	mov	r1, r3
   13664:	f004 fd2e 	bl	180c4 <__aeabi_fsub>
   13668:	4603      	mov	r3, r0
   1366a:	4618      	mov	r0, r3
   1366c:	f004 f9a0 	bl	179b0 <__aeabi_f2d>
   13670:	4602      	mov	r2, r0
   13672:	460b      	mov	r3, r1
   13674:	4620      	mov	r0, r4
   13676:	4629      	mov	r1, r5
   13678:	f002 f802 	bl	15680 <pp_atan2>
   1367c:	4602      	mov	r2, r0
   1367e:	460b      	mov	r3, r1
   13680:	4610      	mov	r0, r2
   13682:	4619      	mov	r1, r3
   13684:	f004 fcca 	bl	1801c <__aeabi_d2f>
   13688:	4603      	mov	r3, r0
   1368a:	617b      	str	r3, [r7, #20]
   1368c:	6978      	ldr	r0, [r7, #20]
   1368e:	f004 f98f 	bl	179b0 <__aeabi_f2d>
   13692:	4604      	mov	r4, r0
   13694:	460d      	mov	r5, r1
   13696:	f24b 039c 	movw	r3, #45212	; 0xb09c
   1369a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1369e:	681b      	ldr	r3, [r3, #0]
   136a0:	4618      	mov	r0, r3
   136a2:	f04f 0100 	mov.w	r1, #0
   136a6:	f2cc 3116 	movt	r1, #49942	; 0xc316
   136aa:	f004 fe15 	bl	182d8 <__aeabi_fmul>
   136ae:	4603      	mov	r3, r0
   136b0:	4618      	mov	r0, r3
   136b2:	f004 f97d 	bl	179b0 <__aeabi_f2d>
   136b6:	4602      	mov	r2, r0
   136b8:	460b      	mov	r3, r1
   136ba:	f04f 0000 	mov.w	r0, #0
   136be:	f04f 0100 	mov.w	r1, #0
   136c2:	f2c4 0114 	movt	r1, #16404	; 0x4014
   136c6:	f004 faf1 	bl	17cac <__aeabi_ddiv>
   136ca:	4602      	mov	r2, r0
   136cc:	460b      	mov	r3, r1
   136ce:	4620      	mov	r0, r4
   136d0:	4629      	mov	r1, r5
   136d2:	f004 f80f 	bl	176f4 <__adddf3>
   136d6:	4602      	mov	r2, r0
   136d8:	460b      	mov	r3, r1
   136da:	4610      	mov	r0, r2
   136dc:	4619      	mov	r1, r3
   136de:	f004 fc9d 	bl	1801c <__aeabi_d2f>
   136e2:	4603      	mov	r3, r0
   136e4:	613b      	str	r3, [r7, #16]
   136e6:	f240 23bc 	movw	r3, #700	; 0x2bc
   136ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136ee:	681b      	ldr	r3, [r3, #0]
   136f0:	4618      	mov	r0, r3
   136f2:	f004 f95d 	bl	179b0 <__aeabi_f2d>
   136f6:	4604      	mov	r4, r0
   136f8:	460d      	mov	r5, r1
   136fa:	6938      	ldr	r0, [r7, #16]
   136fc:	f004 f958 	bl	179b0 <__aeabi_f2d>
   13700:	4602      	mov	r2, r0
   13702:	460b      	mov	r3, r1
   13704:	4610      	mov	r0, r2
   13706:	4619      	mov	r1, r3
   13708:	a3af      	add	r3, pc, #700	; (adr r3, 139c8 <auto_nav+0x1988>)
   1370a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1370e:	f003 fff1 	bl	176f4 <__adddf3>
   13712:	4602      	mov	r2, r0
   13714:	460b      	mov	r3, r1
   13716:	4610      	mov	r0, r2
   13718:	4619      	mov	r1, r3
   1371a:	f002 f871 	bl	15800 <pp_sin>
   1371e:	4602      	mov	r2, r0
   13720:	460b      	mov	r3, r1
   13722:	4610      	mov	r0, r2
   13724:	4619      	mov	r1, r3
   13726:	a3aa      	add	r3, pc, #680	; (adr r3, 139d0 <auto_nav+0x1990>)
   13728:	e9d3 2300 	ldrd	r2, r3, [r3]
   1372c:	f004 f994 	bl	17a58 <__aeabi_dmul>
   13730:	4602      	mov	r2, r0
   13732:	460b      	mov	r3, r1
   13734:	4620      	mov	r0, r4
   13736:	4629      	mov	r1, r5
   13738:	f003 ffdc 	bl	176f4 <__adddf3>
   1373c:	4602      	mov	r2, r0
   1373e:	460b      	mov	r3, r1
   13740:	4610      	mov	r0, r2
   13742:	4619      	mov	r1, r3
   13744:	f004 fc6a 	bl	1801c <__aeabi_d2f>
   13748:	4606      	mov	r6, r0
   1374a:	f240 23bc 	movw	r3, #700	; 0x2bc
   1374e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13752:	685b      	ldr	r3, [r3, #4]
   13754:	4618      	mov	r0, r3
   13756:	f004 f92b 	bl	179b0 <__aeabi_f2d>
   1375a:	4604      	mov	r4, r0
   1375c:	460d      	mov	r5, r1
   1375e:	6938      	ldr	r0, [r7, #16]
   13760:	f004 f926 	bl	179b0 <__aeabi_f2d>
   13764:	4602      	mov	r2, r0
   13766:	460b      	mov	r3, r1
   13768:	4610      	mov	r0, r2
   1376a:	4619      	mov	r1, r3
   1376c:	f002 f848 	bl	15800 <pp_sin>
   13770:	4602      	mov	r2, r0
   13772:	460b      	mov	r3, r1
   13774:	4610      	mov	r0, r2
   13776:	4619      	mov	r1, r3
   13778:	a395      	add	r3, pc, #596	; (adr r3, 139d0 <auto_nav+0x1990>)
   1377a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1377e:	f004 f96b 	bl	17a58 <__aeabi_dmul>
   13782:	4602      	mov	r2, r0
   13784:	460b      	mov	r3, r1
   13786:	4620      	mov	r0, r4
   13788:	4629      	mov	r1, r5
   1378a:	f003 ffb3 	bl	176f4 <__adddf3>
   1378e:	4602      	mov	r2, r0
   13790:	460b      	mov	r3, r1
   13792:	4610      	mov	r0, r2
   13794:	4619      	mov	r1, r3
   13796:	f004 fc41 	bl	1801c <__aeabi_d2f>
   1379a:	4603      	mov	r3, r0
   1379c:	4630      	mov	r0, r6
   1379e:	4619      	mov	r1, r3
   137a0:	f000 fe12 	bl	143c8 <fly_to_xy>
   137a4:	6938      	ldr	r0, [r7, #16]
   137a6:	f004 f903 	bl	179b0 <__aeabi_f2d>
   137aa:	4602      	mov	r2, r0
   137ac:	460b      	mov	r3, r1
   137ae:	a186      	add	r1, pc, #536	; (adr r1, 139c8 <auto_nav+0x1988>)
   137b0:	e9d1 0100 	ldrd	r0, r1, [r1]
   137b4:	f003 ff9c 	bl	176f0 <__aeabi_dsub>
   137b8:	4602      	mov	r2, r0
   137ba:	460b      	mov	r3, r1
   137bc:	4610      	mov	r0, r2
   137be:	4619      	mov	r1, r3
   137c0:	a385      	add	r3, pc, #532	; (adr r3, 139d8 <auto_nav+0x1998>)
   137c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   137c6:	f004 fa71 	bl	17cac <__aeabi_ddiv>
   137ca:	4602      	mov	r2, r0
   137cc:	460b      	mov	r3, r1
   137ce:	4610      	mov	r0, r2
   137d0:	4619      	mov	r1, r3
   137d2:	f04f 0200 	mov.w	r2, #0
   137d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   137da:	f2c4 0366 	movt	r3, #16486	; 0x4066
   137de:	f004 f93b 	bl	17a58 <__aeabi_dmul>
   137e2:	4602      	mov	r2, r0
   137e4:	460b      	mov	r3, r1
   137e6:	4610      	mov	r0, r2
   137e8:	4619      	mov	r1, r3
   137ea:	f004 fc17 	bl	1801c <__aeabi_d2f>
   137ee:	4602      	mov	r2, r0
   137f0:	f64a 6324 	movw	r3, #44580	; 0xae24
   137f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137f8:	601a      	str	r2, [r3, #0]
   137fa:	e012      	b.n	13822 <auto_nav+0x17e2>
   137fc:	f64a 6324 	movw	r3, #44580	; 0xae24
   13800:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13804:	681b      	ldr	r3, [r3, #0]
   13806:	4618      	mov	r0, r3
   13808:	f04f 0100 	mov.w	r1, #0
   1380c:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13810:	f004 fc5a 	bl	180c8 <__addsf3>
   13814:	4603      	mov	r3, r0
   13816:	461a      	mov	r2, r3
   13818:	f64a 6324 	movw	r3, #44580	; 0xae24
   1381c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13820:	601a      	str	r2, [r3, #0]
   13822:	f64a 6324 	movw	r3, #44580	; 0xae24
   13826:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1382a:	681b      	ldr	r3, [r3, #0]
   1382c:	4618      	mov	r0, r3
   1382e:	f04f 0100 	mov.w	r1, #0
   13832:	f004 feef 	bl	18614 <__aeabi_fcmplt>
   13836:	4603      	mov	r3, r0
   13838:	2b00      	cmp	r3, #0
   1383a:	d1df      	bne.n	137fc <auto_nav+0x17bc>
   1383c:	e012      	b.n	13864 <auto_nav+0x1824>
   1383e:	f64a 6324 	movw	r3, #44580	; 0xae24
   13842:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13846:	681b      	ldr	r3, [r3, #0]
   13848:	4618      	mov	r0, r3
   1384a:	f04f 0100 	mov.w	r1, #0
   1384e:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13852:	f004 fc37 	bl	180c4 <__aeabi_fsub>
   13856:	4603      	mov	r3, r0
   13858:	461a      	mov	r2, r3
   1385a:	f64a 6324 	movw	r3, #44580	; 0xae24
   1385e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13862:	601a      	str	r2, [r3, #0]
   13864:	f64a 6324 	movw	r3, #44580	; 0xae24
   13868:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1386c:	681b      	ldr	r3, [r3, #0]
   1386e:	4618      	mov	r0, r3
   13870:	f04f 0100 	mov.w	r1, #0
   13874:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13878:	f004 fee0 	bl	1863c <__aeabi_fcmpge>
   1387c:	4603      	mov	r3, r0
   1387e:	2b00      	cmp	r3, #0
   13880:	d1dd      	bne.n	1383e <auto_nav+0x17fe>
        return;
   13882:	f000 bcaf 	b.w	141e4 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   13886:	f64a 6308 	movw	r3, #44552	; 0xae08
   1388a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1388e:	781b      	ldrb	r3, [r3, #0]
   13890:	2b01      	cmp	r3, #1
   13892:	f040 84a7 	bne.w	141e4 <auto_nav+0x21a4>
    {
        nav_stage =1;
   13896:	f64a 6308 	movw	r3, #44552	; 0xae08
   1389a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1389e:	2201      	movs	r2, #1
   138a0:	701a      	strb	r2, [r3, #0]
        NextBlock()
   138a2:	f64a 6309 	movw	r3, #44553	; 0xae09
   138a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138aa:	781b      	ldrb	r3, [r3, #0]
   138ac:	3301      	adds	r3, #1
   138ae:	b2da      	uxtb	r2, r3
   138b0:	f64a 6309 	movw	r3, #44553	; 0xae09
   138b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138b8:	701a      	strb	r2, [r3, #0]
   138ba:	f64a 6308 	movw	r3, #44552	; 0xae08
   138be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138c2:	2200      	movs	r2, #0
   138c4:	701a      	strb	r2, [r3, #0]
   138c6:	f64a 631e 	movw	r3, #44574	; 0xae1e
   138ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138ce:	2200      	movs	r2, #0
   138d0:	801a      	strh	r2, [r3, #0]
   138d2:	f24b 0364 	movw	r3, #45156	; 0xb064
   138d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138da:	681a      	ldr	r2, [r3, #0]
   138dc:	f64a 630c 	movw	r3, #44556	; 0xae0c
   138e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138e4:	601a      	str	r2, [r3, #0]
   138e6:	f24b 0368 	movw	r3, #45160	; 0xb068
   138ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138ee:	681a      	ldr	r2, [r3, #0]
   138f0:	f64a 6310 	movw	r3, #44560	; 0xae10
   138f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138f8:	601a      	str	r2, [r3, #0]
   138fa:	f64a 631c 	movw	r3, #44572	; 0xae1c
   138fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13902:	2200      	movs	r2, #0
   13904:	801a      	strh	r2, [r3, #0]
   13906:	f64a 6320 	movw	r3, #44576	; 0xae20
   1390a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1390e:	f04f 0200 	mov.w	r2, #0
   13912:	601a      	str	r2, [r3, #0]
   13914:	f000 bc66 	b.w	141e4 <auto_nav+0x21a4>
    }
    else {}
}
else if (nav_block == 5)
   13918:	f64a 6309 	movw	r3, #44553	; 0xae09
   1391c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13920:	781b      	ldrb	r3, [r3, #0]
   13922:	2b05      	cmp	r3, #5
   13924:	f040 845e 	bne.w	141e4 <auto_nav+0x21a4>
{
    nav_block = 5;
   13928:	f64a 6309 	movw	r3, #44553	; 0xae09
   1392c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13930:	2205      	movs	r2, #5
   13932:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(1) }
   13934:	f64a 2398 	movw	r3, #43672	; 0xaa98
   13938:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1393c:	781b      	ldrb	r3, [r3, #0]
   1393e:	2b00      	cmp	r3, #0
   13940:	d007      	beq.n	13952 <auto_nav+0x1912>
   13942:	f64a 2398 	movw	r3, #43672	; 0xaa98
   13946:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1394a:	2200      	movs	r2, #0
   1394c:	701a      	strb	r2, [r3, #0]
   1394e:	2301      	movs	r3, #1
   13950:	e000      	b.n	13954 <auto_nav+0x1914>
   13952:	2300      	movs	r3, #0
   13954:	2b00      	cmp	r3, #0
   13956:	d043      	beq.n	139e0 <auto_nav+0x19a0>
   13958:	f64a 6309 	movw	r3, #44553	; 0xae09
   1395c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13960:	2201      	movs	r2, #1
   13962:	701a      	strb	r2, [r3, #0]
   13964:	f64a 6308 	movw	r3, #44552	; 0xae08
   13968:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1396c:	2200      	movs	r2, #0
   1396e:	701a      	strb	r2, [r3, #0]
   13970:	f64a 631e 	movw	r3, #44574	; 0xae1e
   13974:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13978:	2200      	movs	r2, #0
   1397a:	801a      	strh	r2, [r3, #0]
   1397c:	f24b 0364 	movw	r3, #45156	; 0xb064
   13980:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13984:	681a      	ldr	r2, [r3, #0]
   13986:	f64a 630c 	movw	r3, #44556	; 0xae0c
   1398a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1398e:	601a      	str	r2, [r3, #0]
   13990:	f24b 0368 	movw	r3, #45160	; 0xb068
   13994:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13998:	681a      	ldr	r2, [r3, #0]
   1399a:	f64a 6310 	movw	r3, #44560	; 0xae10
   1399e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139a2:	601a      	str	r2, [r3, #0]
   139a4:	f64a 631c 	movw	r3, #44572	; 0xae1c
   139a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139ac:	2200      	movs	r2, #0
   139ae:	801a      	strh	r2, [r3, #0]
   139b0:	f64a 6320 	movw	r3, #44576	; 0xae20
   139b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139b8:	f04f 0200 	mov.w	r2, #0
   139bc:	601a      	str	r2, [r3, #0]
   139be:	f000 bc11 	b.w	141e4 <auto_nav+0x21a4>
   139c2:	bf00      	nop
   139c4:	f3af 8000 	nop.w
   139c8:	54442d18 	.word	0x54442d18
   139cc:	3ff921fb 	.word	0x3ff921fb
   139d0:	00000000 	.word	0x00000000
   139d4:	4062c000 	.word	0x4062c000
   139d8:	54442d18 	.word	0x54442d18
   139dc:	400921fb 	.word	0x400921fb
    if(nav_stage == 0) {
   139e0:	f64a 6308 	movw	r3, #44552	; 0xae08
   139e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139e8:	781b      	ldrb	r3, [r3, #0]
   139ea:	2b00      	cmp	r3, #0
   139ec:	d133      	bne.n	13a56 <auto_nav+0x1a16>
       Label(while_7) 
       nav_stage = 0;
   139ee:	f64a 6308 	movw	r3, #44552	; 0xae08
   139f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139f6:	2200      	movs	r2, #0
   139f8:	701a      	strb	r2, [r3, #0]
      if (! (TRUE)) Goto(endwhile_8) else NextStage();}
   139fa:	f64a 6308 	movw	r3, #44552	; 0xae08
   139fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a02:	781b      	ldrb	r3, [r3, #0]
   13a04:	3301      	adds	r3, #1
   13a06:	b2da      	uxtb	r2, r3
   13a08:	f64a 6308 	movw	r3, #44552	; 0xae08
   13a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a10:	701a      	strb	r2, [r3, #0]
   13a12:	f24b 0364 	movw	r3, #45156	; 0xb064
   13a16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a1a:	681a      	ldr	r2, [r3, #0]
   13a1c:	f64a 630c 	movw	r3, #44556	; 0xae0c
   13a20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a24:	601a      	str	r2, [r3, #0]
   13a26:	f24b 0368 	movw	r3, #45160	; 0xb068
   13a2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a2e:	681a      	ldr	r2, [r3, #0]
   13a30:	f64a 6310 	movw	r3, #44560	; 0xae10
   13a34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a38:	601a      	str	r2, [r3, #0]
   13a3a:	f64a 631c 	movw	r3, #44572	; 0xae1c
   13a3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a42:	2200      	movs	r2, #0
   13a44:	801a      	strh	r2, [r3, #0]
   13a46:	f64a 6320 	movw	r3, #44576	; 0xae20
   13a4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a4e:	f04f 0200 	mov.w	r2, #0
   13a52:	601a      	str	r2, [r3, #0]
   13a54:	e3c6      	b.n	141e4 <auto_nav+0x21a4>
     
    else if (nav_stage == 1)
   13a56:	f64a 6308 	movw	r3, #44552	; 0xae08
   13a5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a5e:	781b      	ldrb	r3, [r3, #0]
   13a60:	2b01      	cmp	r3, #1
   13a62:	f040 81b5 	bne.w	13dd0 <auto_nav+0x1d90>
    {
        nav_stage =1;
   13a66:	f64a 6308 	movw	r3, #44552	; 0xae08
   13a6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a6e:	2201      	movs	r2, #1
   13a70:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   13a72:	f64a 2397 	movw	r3, #43671	; 0xaa97
   13a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a7a:	2200      	movs	r2, #0
   13a7c:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13a7e:	f64a 6334 	movw	r3, #44596	; 0xae34
   13a82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a86:	f04f 0200 	mov.w	r2, #0
   13a8a:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13a8c:	f64a 2395 	movw	r3, #43669	; 0xaa95
   13a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a94:	2203      	movs	r2, #3
   13a96:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[1].a;
   13a98:	f240 23bc 	movw	r3, #700	; 0x2bc
   13a9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13aa0:	695a      	ldr	r2, [r3, #20]
   13aa2:	f240 23b8 	movw	r3, #696	; 0x2b8
   13aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13aaa:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   13aac:	f64a 53fc 	movw	r3, #44540	; 0xadfc
   13ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ab4:	f04f 0200 	mov.w	r2, #0
   13ab8:	601a      	str	r2, [r3, #0]
        Circle(1, 100);
   13aba:	f24b 0368 	movw	r3, #45160	; 0xb068
   13abe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ac2:	681a      	ldr	r2, [r3, #0]
   13ac4:	f240 23bc 	movw	r3, #700	; 0x2bc
   13ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13acc:	691b      	ldr	r3, [r3, #16]
   13ace:	4610      	mov	r0, r2
   13ad0:	4619      	mov	r1, r3
   13ad2:	f004 faf7 	bl	180c4 <__aeabi_fsub>
   13ad6:	4603      	mov	r3, r0
   13ad8:	4618      	mov	r0, r3
   13ada:	f003 ff69 	bl	179b0 <__aeabi_f2d>
   13ade:	4604      	mov	r4, r0
   13ae0:	460d      	mov	r5, r1
   13ae2:	f24b 0364 	movw	r3, #45156	; 0xb064
   13ae6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13aea:	681a      	ldr	r2, [r3, #0]
   13aec:	f240 23bc 	movw	r3, #700	; 0x2bc
   13af0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13af4:	68db      	ldr	r3, [r3, #12]
   13af6:	4610      	mov	r0, r2
   13af8:	4619      	mov	r1, r3
   13afa:	f004 fae3 	bl	180c4 <__aeabi_fsub>
   13afe:	4603      	mov	r3, r0
   13b00:	4618      	mov	r0, r3
   13b02:	f003 ff55 	bl	179b0 <__aeabi_f2d>
   13b06:	4602      	mov	r2, r0
   13b08:	460b      	mov	r3, r1
   13b0a:	4620      	mov	r0, r4
   13b0c:	4629      	mov	r1, r5
   13b0e:	f001 fdb7 	bl	15680 <pp_atan2>
   13b12:	4602      	mov	r2, r0
   13b14:	460b      	mov	r3, r1
   13b16:	4610      	mov	r0, r2
   13b18:	4619      	mov	r1, r3
   13b1a:	f004 fa7f 	bl	1801c <__aeabi_d2f>
   13b1e:	4603      	mov	r3, r0
   13b20:	60fb      	str	r3, [r7, #12]
   13b22:	68f8      	ldr	r0, [r7, #12]
   13b24:	f003 ff44 	bl	179b0 <__aeabi_f2d>
   13b28:	4604      	mov	r4, r0
   13b2a:	460d      	mov	r5, r1
   13b2c:	f24b 039c 	movw	r3, #45212	; 0xb09c
   13b30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b34:	681b      	ldr	r3, [r3, #0]
   13b36:	4618      	mov	r0, r3
   13b38:	f04f 0100 	mov.w	r1, #0
   13b3c:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   13b40:	f004 fbca 	bl	182d8 <__aeabi_fmul>
   13b44:	4603      	mov	r3, r0
   13b46:	4618      	mov	r0, r3
   13b48:	f003 ff32 	bl	179b0 <__aeabi_f2d>
   13b4c:	4602      	mov	r2, r0
   13b4e:	460b      	mov	r3, r1
   13b50:	f04f 0000 	mov.w	r0, #0
   13b54:	f04f 0100 	mov.w	r1, #0
   13b58:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13b5c:	f004 f8a6 	bl	17cac <__aeabi_ddiv>
   13b60:	4602      	mov	r2, r0
   13b62:	460b      	mov	r3, r1
   13b64:	4620      	mov	r0, r4
   13b66:	4629      	mov	r1, r5
   13b68:	f003 fdc4 	bl	176f4 <__adddf3>
   13b6c:	4602      	mov	r2, r0
   13b6e:	460b      	mov	r3, r1
   13b70:	4610      	mov	r0, r2
   13b72:	4619      	mov	r1, r3
   13b74:	f004 fa52 	bl	1801c <__aeabi_d2f>
   13b78:	4603      	mov	r3, r0
   13b7a:	60bb      	str	r3, [r7, #8]
   13b7c:	f240 23bc 	movw	r3, #700	; 0x2bc
   13b80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b84:	68db      	ldr	r3, [r3, #12]
   13b86:	4618      	mov	r0, r3
   13b88:	f003 ff12 	bl	179b0 <__aeabi_f2d>
   13b8c:	4604      	mov	r4, r0
   13b8e:	460d      	mov	r5, r1
   13b90:	68b8      	ldr	r0, [r7, #8]
   13b92:	f003 ff0d 	bl	179b0 <__aeabi_f2d>
   13b96:	4602      	mov	r2, r0
   13b98:	460b      	mov	r3, r1
   13b9a:	4610      	mov	r0, r2
   13b9c:	4619      	mov	r1, r3
   13b9e:	a388      	add	r3, pc, #544	; (adr r3, 13dc0 <auto_nav+0x1d80>)
   13ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
   13ba4:	f003 fda6 	bl	176f4 <__adddf3>
   13ba8:	4602      	mov	r2, r0
   13baa:	460b      	mov	r3, r1
   13bac:	4610      	mov	r0, r2
   13bae:	4619      	mov	r1, r3
   13bb0:	f001 fe26 	bl	15800 <pp_sin>
   13bb4:	4602      	mov	r2, r0
   13bb6:	460b      	mov	r3, r1
   13bb8:	4610      	mov	r0, r2
   13bba:	4619      	mov	r1, r3
   13bbc:	f04f 0200 	mov.w	r2, #0
   13bc0:	f04f 0300 	mov.w	r3, #0
   13bc4:	f2c4 0359 	movt	r3, #16473	; 0x4059
   13bc8:	f003 ff46 	bl	17a58 <__aeabi_dmul>
   13bcc:	4602      	mov	r2, r0
   13bce:	460b      	mov	r3, r1
   13bd0:	4620      	mov	r0, r4
   13bd2:	4629      	mov	r1, r5
   13bd4:	f003 fd8e 	bl	176f4 <__adddf3>
   13bd8:	4602      	mov	r2, r0
   13bda:	460b      	mov	r3, r1
   13bdc:	4610      	mov	r0, r2
   13bde:	4619      	mov	r1, r3
   13be0:	f004 fa1c 	bl	1801c <__aeabi_d2f>
   13be4:	4606      	mov	r6, r0
   13be6:	f240 23bc 	movw	r3, #700	; 0x2bc
   13bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13bee:	691b      	ldr	r3, [r3, #16]
   13bf0:	4618      	mov	r0, r3
   13bf2:	f003 fedd 	bl	179b0 <__aeabi_f2d>
   13bf6:	4604      	mov	r4, r0
   13bf8:	460d      	mov	r5, r1
   13bfa:	68b8      	ldr	r0, [r7, #8]
   13bfc:	f003 fed8 	bl	179b0 <__aeabi_f2d>
   13c00:	4602      	mov	r2, r0
   13c02:	460b      	mov	r3, r1
   13c04:	4610      	mov	r0, r2
   13c06:	4619      	mov	r1, r3
   13c08:	f001 fdfa 	bl	15800 <pp_sin>
   13c0c:	4602      	mov	r2, r0
   13c0e:	460b      	mov	r3, r1
   13c10:	4610      	mov	r0, r2
   13c12:	4619      	mov	r1, r3
   13c14:	f04f 0200 	mov.w	r2, #0
   13c18:	f04f 0300 	mov.w	r3, #0
   13c1c:	f2c4 0359 	movt	r3, #16473	; 0x4059
   13c20:	f003 ff1a 	bl	17a58 <__aeabi_dmul>
   13c24:	4602      	mov	r2, r0
   13c26:	460b      	mov	r3, r1
   13c28:	4620      	mov	r0, r4
   13c2a:	4629      	mov	r1, r5
   13c2c:	f003 fd62 	bl	176f4 <__adddf3>
   13c30:	4602      	mov	r2, r0
   13c32:	460b      	mov	r3, r1
   13c34:	4610      	mov	r0, r2
   13c36:	4619      	mov	r1, r3
   13c38:	f004 f9f0 	bl	1801c <__aeabi_d2f>
   13c3c:	4603      	mov	r3, r0
   13c3e:	4630      	mov	r0, r6
   13c40:	4619      	mov	r1, r3
   13c42:	f000 fbc1 	bl	143c8 <fly_to_xy>
   13c46:	68b8      	ldr	r0, [r7, #8]
   13c48:	f003 feb2 	bl	179b0 <__aeabi_f2d>
   13c4c:	4602      	mov	r2, r0
   13c4e:	460b      	mov	r3, r1
   13c50:	a15b      	add	r1, pc, #364	; (adr r1, 13dc0 <auto_nav+0x1d80>)
   13c52:	e9d1 0100 	ldrd	r0, r1, [r1]
   13c56:	f003 fd4b 	bl	176f0 <__aeabi_dsub>
   13c5a:	4602      	mov	r2, r0
   13c5c:	460b      	mov	r3, r1
   13c5e:	4610      	mov	r0, r2
   13c60:	4619      	mov	r1, r3
   13c62:	a359      	add	r3, pc, #356	; (adr r3, 13dc8 <auto_nav+0x1d88>)
   13c64:	e9d3 2300 	ldrd	r2, r3, [r3]
   13c68:	f004 f820 	bl	17cac <__aeabi_ddiv>
   13c6c:	4602      	mov	r2, r0
   13c6e:	460b      	mov	r3, r1
   13c70:	4610      	mov	r0, r2
   13c72:	4619      	mov	r1, r3
   13c74:	f04f 0200 	mov.w	r2, #0
   13c78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13c7c:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13c80:	f003 feea 	bl	17a58 <__aeabi_dmul>
   13c84:	4602      	mov	r2, r0
   13c86:	460b      	mov	r3, r1
   13c88:	4610      	mov	r0, r2
   13c8a:	4619      	mov	r1, r3
   13c8c:	f004 f9c6 	bl	1801c <__aeabi_d2f>
   13c90:	4602      	mov	r2, r0
   13c92:	f64a 6324 	movw	r3, #44580	; 0xae24
   13c96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c9a:	601a      	str	r2, [r3, #0]
   13c9c:	e012      	b.n	13cc4 <auto_nav+0x1c84>
   13c9e:	f64a 6324 	movw	r3, #44580	; 0xae24
   13ca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ca6:	681b      	ldr	r3, [r3, #0]
   13ca8:	4618      	mov	r0, r3
   13caa:	f04f 0100 	mov.w	r1, #0
   13cae:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13cb2:	f004 fa09 	bl	180c8 <__addsf3>
   13cb6:	4603      	mov	r3, r0
   13cb8:	461a      	mov	r2, r3
   13cba:	f64a 6324 	movw	r3, #44580	; 0xae24
   13cbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13cc2:	601a      	str	r2, [r3, #0]
   13cc4:	f64a 6324 	movw	r3, #44580	; 0xae24
   13cc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ccc:	681b      	ldr	r3, [r3, #0]
   13cce:	4618      	mov	r0, r3
   13cd0:	f04f 0100 	mov.w	r1, #0
   13cd4:	f004 fc9e 	bl	18614 <__aeabi_fcmplt>
   13cd8:	4603      	mov	r3, r0
   13cda:	2b00      	cmp	r3, #0
   13cdc:	d1df      	bne.n	13c9e <auto_nav+0x1c5e>
   13cde:	e012      	b.n	13d06 <auto_nav+0x1cc6>
   13ce0:	f64a 6324 	movw	r3, #44580	; 0xae24
   13ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ce8:	681b      	ldr	r3, [r3, #0]
   13cea:	4618      	mov	r0, r3
   13cec:	f04f 0100 	mov.w	r1, #0
   13cf0:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13cf4:	f004 f9e6 	bl	180c4 <__aeabi_fsub>
   13cf8:	4603      	mov	r3, r0
   13cfa:	461a      	mov	r2, r3
   13cfc:	f64a 6324 	movw	r3, #44580	; 0xae24
   13d00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d04:	601a      	str	r2, [r3, #0]
   13d06:	f64a 6324 	movw	r3, #44580	; 0xae24
   13d0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d0e:	681b      	ldr	r3, [r3, #0]
   13d10:	4618      	mov	r0, r3
   13d12:	f04f 0100 	mov.w	r1, #0
   13d16:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13d1a:	f004 fc8f 	bl	1863c <__aeabi_fcmpge>
   13d1e:	4603      	mov	r3, r0
   13d20:	2b00      	cmp	r3, #0
   13d22:	d1dd      	bne.n	13ce0 <auto_nav+0x1ca0>
        if (Qdr(0)) NextStage();
   13d24:	f64a 6324 	movw	r3, #44580	; 0xae24
   13d28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d2c:	681b      	ldr	r3, [r3, #0]
   13d2e:	4618      	mov	r0, r3
   13d30:	f04f 0100 	mov.w	r1, #0
   13d34:	f004 fc8c 	bl	18650 <__aeabi_fcmpgt>
   13d38:	4603      	mov	r3, r0
   13d3a:	2b00      	cmp	r3, #0
   13d3c:	d100      	bne.n	13d40 <auto_nav+0x1d00>
        return;
   13d3e:	e251      	b.n	141e4 <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   13d40:	f64a 6324 	movw	r3, #44580	; 0xae24
   13d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d48:	681b      	ldr	r3, [r3, #0]
   13d4a:	4618      	mov	r0, r3
   13d4c:	f04f 0100 	mov.w	r1, #0
   13d50:	f2c4 1120 	movt	r1, #16672	; 0x4120
   13d54:	f004 fc5e 	bl	18614 <__aeabi_fcmplt>
   13d58:	4603      	mov	r3, r0
   13d5a:	2b00      	cmp	r3, #0
   13d5c:	d100      	bne.n	13d60 <auto_nav+0x1d20>
        return;
   13d5e:	e241      	b.n	141e4 <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   13d60:	f64a 6308 	movw	r3, #44552	; 0xae08
   13d64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d68:	781b      	ldrb	r3, [r3, #0]
   13d6a:	3301      	adds	r3, #1
   13d6c:	b2da      	uxtb	r2, r3
   13d6e:	f64a 6308 	movw	r3, #44552	; 0xae08
   13d72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d76:	701a      	strb	r2, [r3, #0]
   13d78:	f24b 0364 	movw	r3, #45156	; 0xb064
   13d7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d80:	681a      	ldr	r2, [r3, #0]
   13d82:	f64a 630c 	movw	r3, #44556	; 0xae0c
   13d86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d8a:	601a      	str	r2, [r3, #0]
   13d8c:	f24b 0368 	movw	r3, #45160	; 0xb068
   13d90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d94:	681a      	ldr	r2, [r3, #0]
   13d96:	f64a 6310 	movw	r3, #44560	; 0xae10
   13d9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d9e:	601a      	str	r2, [r3, #0]
   13da0:	f64a 631c 	movw	r3, #44572	; 0xae1c
   13da4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13da8:	2200      	movs	r2, #0
   13daa:	801a      	strh	r2, [r3, #0]
   13dac:	f64a 6320 	movw	r3, #44576	; 0xae20
   13db0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13db4:	f04f 0200 	mov.w	r2, #0
   13db8:	601a      	str	r2, [r3, #0]
   13dba:	e213      	b.n	141e4 <auto_nav+0x21a4>
   13dbc:	f3af 8000 	nop.w
   13dc0:	54442d18 	.word	0x54442d18
   13dc4:	3ff921fb 	.word	0x3ff921fb
   13dc8:	54442d18 	.word	0x54442d18
   13dcc:	400921fb 	.word	0x400921fb
        return;
    }
    else if (nav_stage == 2)
   13dd0:	f64a 6308 	movw	r3, #44552	; 0xae08
   13dd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13dd8:	781b      	ldrb	r3, [r3, #0]
   13dda:	2b02      	cmp	r3, #2
   13ddc:	f040 81ad 	bne.w	1413a <auto_nav+0x20fa>
    {
         nav_stage = 2;
   13de0:	f64a 6308 	movw	r3, #44552	; 0xae08
   13de4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13de8:	2202      	movs	r2, #2
   13dea:	701a      	strb	r2, [r3, #0]
          auto_pitch = FALSE;
   13dec:	f64a 2397 	movw	r3, #43671	; 0xaa97
   13df0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13df4:	2200      	movs	r2, #0
   13df6:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   13df8:	f64a 6334 	movw	r3, #44596	; 0xae34
   13dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e00:	f04f 0200 	mov.w	r2, #0
   13e04:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13e06:	f64a 2395 	movw	r3, #43669	; 0xaa95
   13e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e0e:	2203      	movs	r2, #3
   13e10:	701a      	strb	r2, [r3, #0]
          desired_altitude = waypoints[4].a;
   13e12:	f240 23bc 	movw	r3, #700	; 0x2bc
   13e16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   13e1c:	f240 23b8 	movw	r3, #696	; 0x2b8
   13e20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e24:	601a      	str	r2, [r3, #0]
          pre_climb = 0.;
   13e26:	f64a 53fc 	movw	r3, #44540	; 0xadfc
   13e2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e2e:	f04f 0200 	mov.w	r2, #0
   13e32:	601a      	str	r2, [r3, #0]
          Circle(4, 100);
   13e34:	f24b 0368 	movw	r3, #45160	; 0xb068
   13e38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e3c:	681a      	ldr	r2, [r3, #0]
   13e3e:	f240 23bc 	movw	r3, #700	; 0x2bc
   13e42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   13e48:	4610      	mov	r0, r2
   13e4a:	4619      	mov	r1, r3
   13e4c:	f004 f93a 	bl	180c4 <__aeabi_fsub>
   13e50:	4603      	mov	r3, r0
   13e52:	4618      	mov	r0, r3
   13e54:	f003 fdac 	bl	179b0 <__aeabi_f2d>
   13e58:	4604      	mov	r4, r0
   13e5a:	460d      	mov	r5, r1
   13e5c:	f24b 0364 	movw	r3, #45156	; 0xb064
   13e60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e64:	681a      	ldr	r2, [r3, #0]
   13e66:	f240 23bc 	movw	r3, #700	; 0x2bc
   13e6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   13e70:	4610      	mov	r0, r2
   13e72:	4619      	mov	r1, r3
   13e74:	f004 f926 	bl	180c4 <__aeabi_fsub>
   13e78:	4603      	mov	r3, r0
   13e7a:	4618      	mov	r0, r3
   13e7c:	f003 fd98 	bl	179b0 <__aeabi_f2d>
   13e80:	4602      	mov	r2, r0
   13e82:	460b      	mov	r3, r1
   13e84:	4620      	mov	r0, r4
   13e86:	4629      	mov	r1, r5
   13e88:	f001 fbfa 	bl	15680 <pp_atan2>
   13e8c:	4602      	mov	r2, r0
   13e8e:	460b      	mov	r3, r1
   13e90:	4610      	mov	r0, r2
   13e92:	4619      	mov	r1, r3
   13e94:	f004 f8c2 	bl	1801c <__aeabi_d2f>
   13e98:	4603      	mov	r3, r0
   13e9a:	607b      	str	r3, [r7, #4]
   13e9c:	6878      	ldr	r0, [r7, #4]
   13e9e:	f003 fd87 	bl	179b0 <__aeabi_f2d>
   13ea2:	4604      	mov	r4, r0
   13ea4:	460d      	mov	r5, r1
   13ea6:	f24b 039c 	movw	r3, #45212	; 0xb09c
   13eaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13eae:	681b      	ldr	r3, [r3, #0]
   13eb0:	4618      	mov	r0, r3
   13eb2:	f04f 0100 	mov.w	r1, #0
   13eb6:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   13eba:	f004 fa0d 	bl	182d8 <__aeabi_fmul>
   13ebe:	4603      	mov	r3, r0
   13ec0:	4618      	mov	r0, r3
   13ec2:	f003 fd75 	bl	179b0 <__aeabi_f2d>
   13ec6:	4602      	mov	r2, r0
   13ec8:	460b      	mov	r3, r1
   13eca:	f04f 0000 	mov.w	r0, #0
   13ece:	f04f 0100 	mov.w	r1, #0
   13ed2:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13ed6:	f003 fee9 	bl	17cac <__aeabi_ddiv>
   13eda:	4602      	mov	r2, r0
   13edc:	460b      	mov	r3, r1
   13ede:	4620      	mov	r0, r4
   13ee0:	4629      	mov	r1, r5
   13ee2:	f003 fc07 	bl	176f4 <__adddf3>
   13ee6:	4602      	mov	r2, r0
   13ee8:	460b      	mov	r3, r1
   13eea:	4610      	mov	r0, r2
   13eec:	4619      	mov	r1, r3
   13eee:	f004 f895 	bl	1801c <__aeabi_d2f>
   13ef2:	4603      	mov	r3, r0
   13ef4:	603b      	str	r3, [r7, #0]
   13ef6:	f240 23bc 	movw	r3, #700	; 0x2bc
   13efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   13f00:	4618      	mov	r0, r3
   13f02:	f003 fd55 	bl	179b0 <__aeabi_f2d>
   13f06:	4604      	mov	r4, r0
   13f08:	460d      	mov	r5, r1
   13f0a:	6838      	ldr	r0, [r7, #0]
   13f0c:	f003 fd50 	bl	179b0 <__aeabi_f2d>
   13f10:	4602      	mov	r2, r0
   13f12:	460b      	mov	r3, r1
   13f14:	4610      	mov	r0, r2
   13f16:	4619      	mov	r1, r3
   13f18:	a3b5      	add	r3, pc, #724	; (adr r3, 141f0 <auto_nav+0x21b0>)
   13f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
   13f1e:	f003 fbe9 	bl	176f4 <__adddf3>
   13f22:	4602      	mov	r2, r0
   13f24:	460b      	mov	r3, r1
   13f26:	4610      	mov	r0, r2
   13f28:	4619      	mov	r1, r3
   13f2a:	f001 fc69 	bl	15800 <pp_sin>
   13f2e:	4602      	mov	r2, r0
   13f30:	460b      	mov	r3, r1
   13f32:	4610      	mov	r0, r2
   13f34:	4619      	mov	r1, r3
   13f36:	f04f 0200 	mov.w	r2, #0
   13f3a:	f04f 0300 	mov.w	r3, #0
   13f3e:	f2c4 0359 	movt	r3, #16473	; 0x4059
   13f42:	f003 fd89 	bl	17a58 <__aeabi_dmul>
   13f46:	4602      	mov	r2, r0
   13f48:	460b      	mov	r3, r1
   13f4a:	4620      	mov	r0, r4
   13f4c:	4629      	mov	r1, r5
   13f4e:	f003 fbd1 	bl	176f4 <__adddf3>
   13f52:	4602      	mov	r2, r0
   13f54:	460b      	mov	r3, r1
   13f56:	4610      	mov	r0, r2
   13f58:	4619      	mov	r1, r3
   13f5a:	f004 f85f 	bl	1801c <__aeabi_d2f>
   13f5e:	4606      	mov	r6, r0
   13f60:	f240 23bc 	movw	r3, #700	; 0x2bc
   13f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   13f6a:	4618      	mov	r0, r3
   13f6c:	f003 fd20 	bl	179b0 <__aeabi_f2d>
   13f70:	4604      	mov	r4, r0
   13f72:	460d      	mov	r5, r1
   13f74:	6838      	ldr	r0, [r7, #0]
   13f76:	f003 fd1b 	bl	179b0 <__aeabi_f2d>
   13f7a:	4602      	mov	r2, r0
   13f7c:	460b      	mov	r3, r1
   13f7e:	4610      	mov	r0, r2
   13f80:	4619      	mov	r1, r3
   13f82:	f001 fc3d 	bl	15800 <pp_sin>
   13f86:	4602      	mov	r2, r0
   13f88:	460b      	mov	r3, r1
   13f8a:	4610      	mov	r0, r2
   13f8c:	4619      	mov	r1, r3
   13f8e:	f04f 0200 	mov.w	r2, #0
   13f92:	f04f 0300 	mov.w	r3, #0
   13f96:	f2c4 0359 	movt	r3, #16473	; 0x4059
   13f9a:	f003 fd5d 	bl	17a58 <__aeabi_dmul>
   13f9e:	4602      	mov	r2, r0
   13fa0:	460b      	mov	r3, r1
   13fa2:	4620      	mov	r0, r4
   13fa4:	4629      	mov	r1, r5
   13fa6:	f003 fba5 	bl	176f4 <__adddf3>
   13faa:	4602      	mov	r2, r0
   13fac:	460b      	mov	r3, r1
   13fae:	4610      	mov	r0, r2
   13fb0:	4619      	mov	r1, r3
   13fb2:	f004 f833 	bl	1801c <__aeabi_d2f>
   13fb6:	4603      	mov	r3, r0
   13fb8:	4630      	mov	r0, r6
   13fba:	4619      	mov	r1, r3
   13fbc:	f000 fa04 	bl	143c8 <fly_to_xy>
   13fc0:	6838      	ldr	r0, [r7, #0]
   13fc2:	f003 fcf5 	bl	179b0 <__aeabi_f2d>
   13fc6:	4602      	mov	r2, r0
   13fc8:	460b      	mov	r3, r1
   13fca:	a189      	add	r1, pc, #548	; (adr r1, 141f0 <auto_nav+0x21b0>)
   13fcc:	e9d1 0100 	ldrd	r0, r1, [r1]
   13fd0:	f003 fb8e 	bl	176f0 <__aeabi_dsub>
   13fd4:	4602      	mov	r2, r0
   13fd6:	460b      	mov	r3, r1
   13fd8:	4610      	mov	r0, r2
   13fda:	4619      	mov	r1, r3
   13fdc:	a386      	add	r3, pc, #536	; (adr r3, 141f8 <auto_nav+0x21b8>)
   13fde:	e9d3 2300 	ldrd	r2, r3, [r3]
   13fe2:	f003 fe63 	bl	17cac <__aeabi_ddiv>
   13fe6:	4602      	mov	r2, r0
   13fe8:	460b      	mov	r3, r1
   13fea:	4610      	mov	r0, r2
   13fec:	4619      	mov	r1, r3
   13fee:	f04f 0200 	mov.w	r2, #0
   13ff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13ff6:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13ffa:	f003 fd2d 	bl	17a58 <__aeabi_dmul>
   13ffe:	4602      	mov	r2, r0
   14000:	460b      	mov	r3, r1
   14002:	4610      	mov	r0, r2
   14004:	4619      	mov	r1, r3
   14006:	f004 f809 	bl	1801c <__aeabi_d2f>
   1400a:	4602      	mov	r2, r0
   1400c:	f64a 6324 	movw	r3, #44580	; 0xae24
   14010:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14014:	601a      	str	r2, [r3, #0]
   14016:	e012      	b.n	1403e <auto_nav+0x1ffe>
   14018:	f64a 6324 	movw	r3, #44580	; 0xae24
   1401c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14020:	681b      	ldr	r3, [r3, #0]
   14022:	4618      	mov	r0, r3
   14024:	f04f 0100 	mov.w	r1, #0
   14028:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1402c:	f004 f84c 	bl	180c8 <__addsf3>
   14030:	4603      	mov	r3, r0
   14032:	461a      	mov	r2, r3
   14034:	f64a 6324 	movw	r3, #44580	; 0xae24
   14038:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1403c:	601a      	str	r2, [r3, #0]
   1403e:	f64a 6324 	movw	r3, #44580	; 0xae24
   14042:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14046:	681b      	ldr	r3, [r3, #0]
   14048:	4618      	mov	r0, r3
   1404a:	f04f 0100 	mov.w	r1, #0
   1404e:	f004 fae1 	bl	18614 <__aeabi_fcmplt>
   14052:	4603      	mov	r3, r0
   14054:	2b00      	cmp	r3, #0
   14056:	d1df      	bne.n	14018 <auto_nav+0x1fd8>
   14058:	e012      	b.n	14080 <auto_nav+0x2040>
   1405a:	f64a 6324 	movw	r3, #44580	; 0xae24
   1405e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14062:	681b      	ldr	r3, [r3, #0]
   14064:	4618      	mov	r0, r3
   14066:	f04f 0100 	mov.w	r1, #0
   1406a:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1406e:	f004 f829 	bl	180c4 <__aeabi_fsub>
   14072:	4603      	mov	r3, r0
   14074:	461a      	mov	r2, r3
   14076:	f64a 6324 	movw	r3, #44580	; 0xae24
   1407a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1407e:	601a      	str	r2, [r3, #0]
   14080:	f64a 6324 	movw	r3, #44580	; 0xae24
   14084:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14088:	681b      	ldr	r3, [r3, #0]
   1408a:	4618      	mov	r0, r3
   1408c:	f04f 0100 	mov.w	r1, #0
   14090:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14094:	f004 fad2 	bl	1863c <__aeabi_fcmpge>
   14098:	4603      	mov	r3, r0
   1409a:	2b00      	cmp	r3, #0
   1409c:	d1dd      	bne.n	1405a <auto_nav+0x201a>
          if (Qdr(180)) NextStage();
   1409e:	f64a 6324 	movw	r3, #44580	; 0xae24
   140a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140a6:	681b      	ldr	r3, [r3, #0]
   140a8:	4618      	mov	r0, r3
   140aa:	f04f 0100 	mov.w	r1, #0
   140ae:	f2c4 3134 	movt	r1, #17204	; 0x4334
   140b2:	f004 facd 	bl	18650 <__aeabi_fcmpgt>
   140b6:	4603      	mov	r3, r0
   140b8:	2b00      	cmp	r3, #0
   140ba:	d100      	bne.n	140be <auto_nav+0x207e>
          return;
   140bc:	e092      	b.n	141e4 <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   140be:	f64a 6324 	movw	r3, #44580	; 0xae24
   140c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140c6:	681b      	ldr	r3, [r3, #0]
   140c8:	4618      	mov	r0, r3
   140ca:	f04f 0100 	mov.w	r1, #0
   140ce:	f2c4 313e 	movt	r1, #17214	; 0x433e
   140d2:	f004 fa9f 	bl	18614 <__aeabi_fcmplt>
   140d6:	4603      	mov	r3, r0
   140d8:	2b00      	cmp	r3, #0
   140da:	d100      	bne.n	140de <auto_nav+0x209e>
          return;
   140dc:	e082      	b.n	141e4 <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   140de:	f64a 6308 	movw	r3, #44552	; 0xae08
   140e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140e6:	781b      	ldrb	r3, [r3, #0]
   140e8:	3301      	adds	r3, #1
   140ea:	b2da      	uxtb	r2, r3
   140ec:	f64a 6308 	movw	r3, #44552	; 0xae08
   140f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140f4:	701a      	strb	r2, [r3, #0]
   140f6:	f24b 0364 	movw	r3, #45156	; 0xb064
   140fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140fe:	681a      	ldr	r2, [r3, #0]
   14100:	f64a 630c 	movw	r3, #44556	; 0xae0c
   14104:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14108:	601a      	str	r2, [r3, #0]
   1410a:	f24b 0368 	movw	r3, #45160	; 0xb068
   1410e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14112:	681a      	ldr	r2, [r3, #0]
   14114:	f64a 6310 	movw	r3, #44560	; 0xae10
   14118:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1411c:	601a      	str	r2, [r3, #0]
   1411e:	f64a 631c 	movw	r3, #44572	; 0xae1c
   14122:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14126:	2200      	movs	r2, #0
   14128:	801a      	strh	r2, [r3, #0]
   1412a:	f64a 6320 	movw	r3, #44576	; 0xae20
   1412e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14132:	f04f 0200 	mov.w	r2, #0
   14136:	601a      	str	r2, [r3, #0]
   14138:	e054      	b.n	141e4 <auto_nav+0x21a4>
          return;
    }
    else if (nav_stage == 3) 
   1413a:	f64a 6308 	movw	r3, #44552	; 0xae08
   1413e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14142:	781b      	ldrb	r3, [r3, #0]
   14144:	2b03      	cmp	r3, #3
   14146:	d106      	bne.n	14156 <auto_nav+0x2116>
    {
	  nav_stage = 3;
   14148:	f64a 6308 	movw	r3, #44552	; 0xae08
   1414c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14150:	2203      	movs	r2, #3
   14152:	701a      	strb	r2, [r3, #0]
          Goto(while_7)
   14154:	e44b      	b.n	139ee <auto_nav+0x19ae>
    }
    else if (nav_stage == 4)
   14156:	f64a 6308 	movw	r3, #44552	; 0xae08
   1415a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1415e:	781b      	ldrb	r3, [r3, #0]
   14160:	2b04      	cmp	r3, #4
   14162:	d13f      	bne.n	141e4 <auto_nav+0x21a4>
    {
	Label(endwhile_8)
	nav_stage = 4;
   14164:	f64a 6308 	movw	r3, #44552	; 0xae08
   14168:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1416c:	2204      	movs	r2, #4
   1416e:	701a      	strb	r2, [r3, #0]
        NextBlock()
   14170:	f64a 6309 	movw	r3, #44553	; 0xae09
   14174:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14178:	781b      	ldrb	r3, [r3, #0]
   1417a:	3301      	adds	r3, #1
   1417c:	b2da      	uxtb	r2, r3
   1417e:	f64a 6309 	movw	r3, #44553	; 0xae09
   14182:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14186:	701a      	strb	r2, [r3, #0]
   14188:	f64a 6308 	movw	r3, #44552	; 0xae08
   1418c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14190:	2200      	movs	r2, #0
   14192:	701a      	strb	r2, [r3, #0]
   14194:	f64a 631e 	movw	r3, #44574	; 0xae1e
   14198:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1419c:	2200      	movs	r2, #0
   1419e:	801a      	strh	r2, [r3, #0]
   141a0:	f24b 0364 	movw	r3, #45156	; 0xb064
   141a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141a8:	681a      	ldr	r2, [r3, #0]
   141aa:	f64a 630c 	movw	r3, #44556	; 0xae0c
   141ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141b2:	601a      	str	r2, [r3, #0]
   141b4:	f24b 0368 	movw	r3, #45160	; 0xb068
   141b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141bc:	681a      	ldr	r2, [r3, #0]
   141be:	f64a 6310 	movw	r3, #44560	; 0xae10
   141c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141c6:	601a      	str	r2, [r3, #0]
   141c8:	f64a 631c 	movw	r3, #44572	; 0xae1c
   141cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141d0:	2200      	movs	r2, #0
   141d2:	801a      	strh	r2, [r3, #0]
   141d4:	f64a 6320 	movw	r3, #44576	; 0xae20
   141d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141dc:	f04f 0200 	mov.w	r2, #0
   141e0:	601a      	str	r2, [r3, #0]
   141e2:	bf00      	nop
    else { }
}
else { }

//#endif
}
   141e4:	372c      	adds	r7, #44	; 0x2c
   141e6:	46bd      	mov	sp, r7
   141e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   141ea:	bf00      	nop
   141ec:	f3af 8000 	nop.w
   141f0:	54442d18 	.word	0x54442d18
   141f4:	3ff921fb 	.word	0x3ff921fb
   141f8:	54442d18 	.word	0x54442d18
   141fc:	400921fb 	.word	0x400921fb

00014200 <approaching>:
const uint8_t nb_waypoint = NB_WAYPOINT;

struct point waypoints[NB_WAYPOINT+1] = WAYPOINTS;

static float carrot;
static bool_t approaching(uint8_t wp) {
   14200:	b590      	push	{r4, r7, lr}
   14202:	b087      	sub	sp, #28
   14204:	af00      	add	r7, sp, #0
   14206:	4603      	mov	r3, r0
   14208:	71fb      	strb	r3, [r7, #7]
  float pw_x = waypoints[wp].x - estimator_x;
   1420a:	79f9      	ldrb	r1, [r7, #7]
   1420c:	f240 22bc 	movw	r2, #700	; 0x2bc
   14210:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14214:	460b      	mov	r3, r1
   14216:	005b      	lsls	r3, r3, #1
   14218:	440b      	add	r3, r1
   1421a:	009b      	lsls	r3, r3, #2
   1421c:	4413      	add	r3, r2
   1421e:	681a      	ldr	r2, [r3, #0]
   14220:	f24b 0364 	movw	r3, #45156	; 0xb064
   14224:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14228:	681b      	ldr	r3, [r3, #0]
   1422a:	4610      	mov	r0, r2
   1422c:	4619      	mov	r1, r3
   1422e:	f003 ff49 	bl	180c4 <__aeabi_fsub>
   14232:	4603      	mov	r3, r0
   14234:	617b      	str	r3, [r7, #20]
  float pw_y = waypoints[wp].y - estimator_y;
   14236:	79f9      	ldrb	r1, [r7, #7]
   14238:	f240 22bc 	movw	r2, #700	; 0x2bc
   1423c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14240:	460b      	mov	r3, r1
   14242:	005b      	lsls	r3, r3, #1
   14244:	440b      	add	r3, r1
   14246:	009b      	lsls	r3, r3, #2
   14248:	4413      	add	r3, r2
   1424a:	3304      	adds	r3, #4
   1424c:	681a      	ldr	r2, [r3, #0]
   1424e:	f24b 0368 	movw	r3, #45160	; 0xb068
   14252:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14256:	681b      	ldr	r3, [r3, #0]
   14258:	4610      	mov	r0, r2
   1425a:	4619      	mov	r1, r3
   1425c:	f003 ff32 	bl	180c4 <__aeabi_fsub>
   14260:	4603      	mov	r3, r0
   14262:	613b      	str	r3, [r7, #16]
  float scal_prod;//changes for PowerPc Fev-06

  dist2_to_wp = pw_x*pw_x + pw_y *pw_y;
   14264:	6978      	ldr	r0, [r7, #20]
   14266:	6979      	ldr	r1, [r7, #20]
   14268:	f004 f836 	bl	182d8 <__aeabi_fmul>
   1426c:	4603      	mov	r3, r0
   1426e:	461c      	mov	r4, r3
   14270:	6938      	ldr	r0, [r7, #16]
   14272:	6939      	ldr	r1, [r7, #16]
   14274:	f004 f830 	bl	182d8 <__aeabi_fmul>
   14278:	4603      	mov	r3, r0
   1427a:	4620      	mov	r0, r4
   1427c:	4619      	mov	r1, r3
   1427e:	f003 ff23 	bl	180c8 <__addsf3>
   14282:	4603      	mov	r3, r0
   14284:	461a      	mov	r2, r3
   14286:	f64a 633c 	movw	r3, #44604	; 0xae3c
   1428a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1428e:	601a      	str	r2, [r3, #0]
  carrot = CARROT * estimator_hspeed_mod;
   14290:	f24b 039c 	movw	r3, #45212	; 0xb09c
   14294:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14298:	681b      	ldr	r3, [r3, #0]
   1429a:	4618      	mov	r0, r3
   1429c:	f04f 0100 	mov.w	r1, #0
   142a0:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   142a4:	f004 f818 	bl	182d8 <__aeabi_fmul>
   142a8:	4603      	mov	r3, r0
   142aa:	461a      	mov	r2, r3
   142ac:	f64a 6348 	movw	r3, #44616	; 0xae48
   142b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142b4:	601a      	str	r2, [r3, #0]
  carrot = (carrot < 40 ? 40 : carrot);
   142b6:	f64a 6348 	movw	r3, #44616	; 0xae48
   142ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142be:	681b      	ldr	r3, [r3, #0]
   142c0:	4618      	mov	r0, r3
   142c2:	f04f 0100 	mov.w	r1, #0
   142c6:	f2c4 2120 	movt	r1, #16928	; 0x4220
   142ca:	f004 f9a3 	bl	18614 <__aeabi_fcmplt>
   142ce:	4603      	mov	r3, r0
   142d0:	2b00      	cmp	r3, #0
   142d2:	d004      	beq.n	142de <approaching+0xde>
   142d4:	f04f 0200 	mov.w	r2, #0
   142d8:	f2c4 2220 	movt	r2, #16928	; 0x4220
   142dc:	e004      	b.n	142e8 <approaching+0xe8>
   142de:	f64a 6348 	movw	r3, #44616	; 0xae48
   142e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142e6:	681a      	ldr	r2, [r3, #0]
   142e8:	f64a 6348 	movw	r3, #44616	; 0xae48
   142ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142f0:	601a      	str	r2, [r3, #0]
  if (dist2_to_wp < carrot*carrot)
   142f2:	f64a 6348 	movw	r3, #44616	; 0xae48
   142f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142fa:	681a      	ldr	r2, [r3, #0]
   142fc:	f64a 6348 	movw	r3, #44616	; 0xae48
   14300:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14304:	681b      	ldr	r3, [r3, #0]
   14306:	4610      	mov	r0, r2
   14308:	4619      	mov	r1, r3
   1430a:	f003 ffe5 	bl	182d8 <__aeabi_fmul>
   1430e:	4603      	mov	r3, r0
   14310:	461a      	mov	r2, r3
   14312:	f64a 633c 	movw	r3, #44604	; 0xae3c
   14316:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1431a:	681b      	ldr	r3, [r3, #0]
   1431c:	4610      	mov	r0, r2
   1431e:	4619      	mov	r1, r3
   14320:	f004 f996 	bl	18650 <__aeabi_fcmpgt>
   14324:	4603      	mov	r3, r0
   14326:	2b00      	cmp	r3, #0
   14328:	d001      	beq.n	1432e <approaching+0x12e>
    return TRUE;
   1432a:	2301      	movs	r3, #1
   1432c:	e048      	b.n	143c0 <approaching+0x1c0>

  scal_prod = (waypoints[wp].x - last_x) * pw_x + (waypoints[wp].y - last_y) * pw_y;
   1432e:	79f9      	ldrb	r1, [r7, #7]
   14330:	f240 22bc 	movw	r2, #700	; 0x2bc
   14334:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14338:	460b      	mov	r3, r1
   1433a:	005b      	lsls	r3, r3, #1
   1433c:	440b      	add	r3, r1
   1433e:	009b      	lsls	r3, r3, #2
   14340:	4413      	add	r3, r2
   14342:	681a      	ldr	r2, [r3, #0]
   14344:	f64a 630c 	movw	r3, #44556	; 0xae0c
   14348:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1434c:	681b      	ldr	r3, [r3, #0]
   1434e:	4610      	mov	r0, r2
   14350:	4619      	mov	r1, r3
   14352:	f003 feb7 	bl	180c4 <__aeabi_fsub>
   14356:	4603      	mov	r3, r0
   14358:	4618      	mov	r0, r3
   1435a:	6979      	ldr	r1, [r7, #20]
   1435c:	f003 ffbc 	bl	182d8 <__aeabi_fmul>
   14360:	4603      	mov	r3, r0
   14362:	461c      	mov	r4, r3
   14364:	79f9      	ldrb	r1, [r7, #7]
   14366:	f240 22bc 	movw	r2, #700	; 0x2bc
   1436a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1436e:	460b      	mov	r3, r1
   14370:	005b      	lsls	r3, r3, #1
   14372:	440b      	add	r3, r1
   14374:	009b      	lsls	r3, r3, #2
   14376:	4413      	add	r3, r2
   14378:	3304      	adds	r3, #4
   1437a:	681a      	ldr	r2, [r3, #0]
   1437c:	f64a 6310 	movw	r3, #44560	; 0xae10
   14380:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14384:	681b      	ldr	r3, [r3, #0]
   14386:	4610      	mov	r0, r2
   14388:	4619      	mov	r1, r3
   1438a:	f003 fe9b 	bl	180c4 <__aeabi_fsub>
   1438e:	4603      	mov	r3, r0
   14390:	4618      	mov	r0, r3
   14392:	6939      	ldr	r1, [r7, #16]
   14394:	f003 ffa0 	bl	182d8 <__aeabi_fmul>
   14398:	4603      	mov	r3, r0
   1439a:	4620      	mov	r0, r4
   1439c:	4619      	mov	r1, r3
   1439e:	f003 fe93 	bl	180c8 <__addsf3>
   143a2:	4603      	mov	r3, r0
   143a4:	60fb      	str	r3, [r7, #12]
  
  return (scal_prod < 0);
   143a6:	2301      	movs	r3, #1
   143a8:	461c      	mov	r4, r3
   143aa:	68f8      	ldr	r0, [r7, #12]
   143ac:	f04f 0100 	mov.w	r1, #0
   143b0:	f004 f930 	bl	18614 <__aeabi_fcmplt>
   143b4:	4603      	mov	r3, r0
   143b6:	2b00      	cmp	r3, #0
   143b8:	d101      	bne.n	143be <approaching+0x1be>
   143ba:	2300      	movs	r3, #0
   143bc:	461c      	mov	r4, r3
   143be:	b2e3      	uxtb	r3, r4
}
   143c0:	4618      	mov	r0, r3
   143c2:	371c      	adds	r7, #28
   143c4:	46bd      	mov	sp, r7
   143c6:	bd90      	pop	{r4, r7, pc}

000143c8 <fly_to_xy>:

static inline void fly_to_xy(float x, float y) 
{ 
   143c8:	b5b0      	push	{r4, r5, r7, lr}
   143ca:	b082      	sub	sp, #8
   143cc:	af00      	add	r7, sp, #0
   143ce:	6078      	str	r0, [r7, #4]
   143d0:	6039      	str	r1, [r7, #0]
  desired_x = x;
   143d2:	f64a 6328 	movw	r3, #44584	; 0xae28
   143d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143da:	687a      	ldr	r2, [r7, #4]
   143dc:	601a      	str	r2, [r3, #0]
  desired_y = y;
   143de:	f64a 632c 	movw	r3, #44588	; 0xae2c
   143e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143e6:	683a      	ldr	r2, [r7, #0]
   143e8:	601a      	str	r2, [r3, #0]
  desired_course = M_PI/2.-atan2(y - estimator_y, x - estimator_x);
   143ea:	f24b 0368 	movw	r3, #45160	; 0xb068
   143ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143f2:	681b      	ldr	r3, [r3, #0]
   143f4:	6838      	ldr	r0, [r7, #0]
   143f6:	4619      	mov	r1, r3
   143f8:	f003 fe64 	bl	180c4 <__aeabi_fsub>
   143fc:	4603      	mov	r3, r0
   143fe:	4618      	mov	r0, r3
   14400:	f003 fad6 	bl	179b0 <__aeabi_f2d>
   14404:	4604      	mov	r4, r0
   14406:	460d      	mov	r5, r1
   14408:	f24b 0364 	movw	r3, #45156	; 0xb064
   1440c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14410:	681b      	ldr	r3, [r3, #0]
   14412:	6878      	ldr	r0, [r7, #4]
   14414:	4619      	mov	r1, r3
   14416:	f003 fe55 	bl	180c4 <__aeabi_fsub>
   1441a:	4603      	mov	r3, r0
   1441c:	4618      	mov	r0, r3
   1441e:	f003 fac7 	bl	179b0 <__aeabi_f2d>
   14422:	4602      	mov	r2, r0
   14424:	460b      	mov	r3, r1
   14426:	4620      	mov	r0, r4
   14428:	4629      	mov	r1, r5
   1442a:	f001 f929 	bl	15680 <pp_atan2>
   1442e:	4602      	mov	r2, r0
   14430:	460b      	mov	r3, r1
   14432:	a10b      	add	r1, pc, #44	; (adr r1, 14460 <fly_to_xy+0x98>)
   14434:	e9d1 0100 	ldrd	r0, r1, [r1]
   14438:	f003 f95a 	bl	176f0 <__aeabi_dsub>
   1443c:	4602      	mov	r2, r0
   1443e:	460b      	mov	r3, r1
   14440:	4610      	mov	r0, r2
   14442:	4619      	mov	r1, r3
   14444:	f003 fdea 	bl	1801c <__aeabi_d2f>
   14448:	4602      	mov	r2, r0
   1444a:	f64a 53f4 	movw	r3, #44532	; 0xadf4
   1444e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14452:	601a      	str	r2, [r3, #0]
}
   14454:	3708      	adds	r7, #8
   14456:	46bd      	mov	sp, r7
   14458:	bdb0      	pop	{r4, r5, r7, pc}
   1445a:	bf00      	nop
   1445c:	f3af 8000 	nop.w
   14460:	54442d18 	.word	0x54442d18
   14464:	3ff921fb 	.word	0x3ff921fb

00014468 <fly_to>:

static void fly_to(uint8_t wp) { 
   14468:	b580      	push	{r7, lr}
   1446a:	b082      	sub	sp, #8
   1446c:	af00      	add	r7, sp, #0
   1446e:	4603      	mov	r3, r0
   14470:	71fb      	strb	r3, [r7, #7]
  fly_to_xy(waypoints[wp].x, waypoints[wp].y);
   14472:	79f9      	ldrb	r1, [r7, #7]
   14474:	f240 22bc 	movw	r2, #700	; 0x2bc
   14478:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1447c:	460b      	mov	r3, r1
   1447e:	005b      	lsls	r3, r3, #1
   14480:	440b      	add	r3, r1
   14482:	009b      	lsls	r3, r3, #2
   14484:	4413      	add	r3, r2
   14486:	6818      	ldr	r0, [r3, #0]
   14488:	79f9      	ldrb	r1, [r7, #7]
   1448a:	f240 22bc 	movw	r2, #700	; 0x2bc
   1448e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14492:	460b      	mov	r3, r1
   14494:	005b      	lsls	r3, r3, #1
   14496:	440b      	add	r3, r1
   14498:	009b      	lsls	r3, r3, #2
   1449a:	4413      	add	r3, r2
   1449c:	3304      	adds	r3, #4
   1449e:	681b      	ldr	r3, [r3, #0]
   144a0:	4619      	mov	r1, r3
   144a2:	f7ff ff91 	bl	143c8 <fly_to_xy>
}
   144a6:	3708      	adds	r7, #8
   144a8:	46bd      	mov	sp, r7
   144aa:	bd80      	pop	{r7, pc}

000144ac <route_to>:

static float alpha, leg;
static void route_to(uint8_t _last_wp, uint8_t wp) 
{
   144ac:	b5b0      	push	{r4, r5, r7, lr}
   144ae:	b088      	sub	sp, #32
   144b0:	af00      	add	r7, sp, #0
   144b2:	4602      	mov	r2, r0
   144b4:	460b      	mov	r3, r1
   144b6:	71fa      	strb	r2, [r7, #7]
   144b8:	71bb      	strb	r3, [r7, #6]
  float last_wp_x = waypoints[_last_wp].x;
   144ba:	79f9      	ldrb	r1, [r7, #7]
   144bc:	f240 22bc 	movw	r2, #700	; 0x2bc
   144c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   144c4:	460b      	mov	r3, r1
   144c6:	005b      	lsls	r3, r3, #1
   144c8:	440b      	add	r3, r1
   144ca:	009b      	lsls	r3, r3, #2
   144cc:	4413      	add	r3, r2
   144ce:	681b      	ldr	r3, [r3, #0]
   144d0:	61fb      	str	r3, [r7, #28]
  float last_wp_y = waypoints[_last_wp].y;
   144d2:	79f9      	ldrb	r1, [r7, #7]
   144d4:	f240 22bc 	movw	r2, #700	; 0x2bc
   144d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   144dc:	460b      	mov	r3, r1
   144de:	005b      	lsls	r3, r3, #1
   144e0:	440b      	add	r3, r1
   144e2:	009b      	lsls	r3, r3, #2
   144e4:	4413      	add	r3, r2
   144e6:	3304      	adds	r3, #4
   144e8:	681b      	ldr	r3, [r3, #0]
   144ea:	61bb      	str	r3, [r7, #24]
  float leg_x = waypoints[wp].x - last_wp_x;
   144ec:	79b9      	ldrb	r1, [r7, #6]
   144ee:	f240 22bc 	movw	r2, #700	; 0x2bc
   144f2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   144f6:	460b      	mov	r3, r1
   144f8:	005b      	lsls	r3, r3, #1
   144fa:	440b      	add	r3, r1
   144fc:	009b      	lsls	r3, r3, #2
   144fe:	4413      	add	r3, r2
   14500:	681b      	ldr	r3, [r3, #0]
   14502:	4618      	mov	r0, r3
   14504:	69f9      	ldr	r1, [r7, #28]
   14506:	f003 fddd 	bl	180c4 <__aeabi_fsub>
   1450a:	4603      	mov	r3, r0
   1450c:	617b      	str	r3, [r7, #20]
  float leg_y = waypoints[wp].y - last_wp_y;
   1450e:	79b9      	ldrb	r1, [r7, #6]
   14510:	f240 22bc 	movw	r2, #700	; 0x2bc
   14514:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14518:	460b      	mov	r3, r1
   1451a:	005b      	lsls	r3, r3, #1
   1451c:	440b      	add	r3, r1
   1451e:	009b      	lsls	r3, r3, #2
   14520:	4413      	add	r3, r2
   14522:	3304      	adds	r3, #4
   14524:	681b      	ldr	r3, [r3, #0]
   14526:	4618      	mov	r0, r3
   14528:	69b9      	ldr	r1, [r7, #24]
   1452a:	f003 fdcb 	bl	180c4 <__aeabi_fsub>
   1452e:	4603      	mov	r3, r0
   14530:	613b      	str	r3, [r7, #16]
  float leg2 = leg_x * leg_x + leg_y * leg_y;
   14532:	6978      	ldr	r0, [r7, #20]
   14534:	6979      	ldr	r1, [r7, #20]
   14536:	f003 fecf 	bl	182d8 <__aeabi_fmul>
   1453a:	4603      	mov	r3, r0
   1453c:	461c      	mov	r4, r3
   1453e:	6938      	ldr	r0, [r7, #16]
   14540:	6939      	ldr	r1, [r7, #16]
   14542:	f003 fec9 	bl	182d8 <__aeabi_fmul>
   14546:	4603      	mov	r3, r0
   14548:	4620      	mov	r0, r4
   1454a:	4619      	mov	r1, r3
   1454c:	f003 fdbc 	bl	180c8 <__addsf3>
   14550:	4603      	mov	r3, r0
   14552:	60fb      	str	r3, [r7, #12]
  alpha = ((estimator_x - last_wp_x) * leg_x + (estimator_y - last_wp_y) * leg_y) / leg2;
   14554:	f24b 0364 	movw	r3, #45156	; 0xb064
   14558:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1455c:	681b      	ldr	r3, [r3, #0]
   1455e:	4618      	mov	r0, r3
   14560:	69f9      	ldr	r1, [r7, #28]
   14562:	f003 fdaf 	bl	180c4 <__aeabi_fsub>
   14566:	4603      	mov	r3, r0
   14568:	4618      	mov	r0, r3
   1456a:	6979      	ldr	r1, [r7, #20]
   1456c:	f003 feb4 	bl	182d8 <__aeabi_fmul>
   14570:	4603      	mov	r3, r0
   14572:	461c      	mov	r4, r3
   14574:	f24b 0368 	movw	r3, #45160	; 0xb068
   14578:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1457c:	681b      	ldr	r3, [r3, #0]
   1457e:	4618      	mov	r0, r3
   14580:	69b9      	ldr	r1, [r7, #24]
   14582:	f003 fd9f 	bl	180c4 <__aeabi_fsub>
   14586:	4603      	mov	r3, r0
   14588:	4618      	mov	r0, r3
   1458a:	6939      	ldr	r1, [r7, #16]
   1458c:	f003 fea4 	bl	182d8 <__aeabi_fmul>
   14590:	4603      	mov	r3, r0
   14592:	4620      	mov	r0, r4
   14594:	4619      	mov	r1, r3
   14596:	f003 fd97 	bl	180c8 <__addsf3>
   1459a:	4603      	mov	r3, r0
   1459c:	4618      	mov	r0, r3
   1459e:	68f9      	ldr	r1, [r7, #12]
   145a0:	f003 ff4e 	bl	18440 <__aeabi_fdiv>
   145a4:	4603      	mov	r3, r0
   145a6:	461a      	mov	r2, r3
   145a8:	f64a 634c 	movw	r3, #44620	; 0xae4c
   145ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   145b0:	601a      	str	r2, [r3, #0]
  alpha = Max(alpha, 0.);
   145b2:	f64a 634c 	movw	r3, #44620	; 0xae4c
   145b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   145ba:	681b      	ldr	r3, [r3, #0]
   145bc:	4618      	mov	r0, r3
   145be:	f04f 0100 	mov.w	r1, #0
   145c2:	f004 f83b 	bl	1863c <__aeabi_fcmpge>
   145c6:	4603      	mov	r3, r0
   145c8:	2b00      	cmp	r3, #0
   145ca:	d005      	beq.n	145d8 <route_to+0x12c>
   145cc:	f64a 634c 	movw	r3, #44620	; 0xae4c
   145d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   145d4:	681a      	ldr	r2, [r3, #0]
   145d6:	e001      	b.n	145dc <route_to+0x130>
   145d8:	f04f 0200 	mov.w	r2, #0
   145dc:	f64a 634c 	movw	r3, #44620	; 0xae4c
   145e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   145e4:	601a      	str	r2, [r3, #0]
  leg = sqrt(leg2);
   145e6:	68f8      	ldr	r0, [r7, #12]
   145e8:	f003 f9e2 	bl	179b0 <__aeabi_f2d>
   145ec:	4602      	mov	r2, r0
   145ee:	460b      	mov	r3, r1
   145f0:	4610      	mov	r0, r2
   145f2:	4619      	mov	r1, r3
   145f4:	f001 f9f4 	bl	159e0 <pp_sqrt>
   145f8:	4602      	mov	r2, r0
   145fa:	460b      	mov	r3, r1
   145fc:	4610      	mov	r0, r2
   145fe:	4619      	mov	r1, r3
   14600:	f003 fd0c 	bl	1801c <__aeabi_d2f>
   14604:	4602      	mov	r2, r0
   14606:	f64a 6350 	movw	r3, #44624	; 0xae50
   1460a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1460e:	601a      	str	r2, [r3, #0]
  alpha += Max(carrot / leg, 0.); /* carrot computed in approaching() */
   14610:	f64a 634c 	movw	r3, #44620	; 0xae4c
   14614:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14618:	681b      	ldr	r3, [r3, #0]
   1461a:	4618      	mov	r0, r3
   1461c:	f003 f9c8 	bl	179b0 <__aeabi_f2d>
   14620:	4604      	mov	r4, r0
   14622:	460d      	mov	r5, r1
   14624:	f64a 6348 	movw	r3, #44616	; 0xae48
   14628:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1462c:	681a      	ldr	r2, [r3, #0]
   1462e:	f64a 6350 	movw	r3, #44624	; 0xae50
   14632:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14636:	681b      	ldr	r3, [r3, #0]
   14638:	4610      	mov	r0, r2
   1463a:	4619      	mov	r1, r3
   1463c:	f003 ff00 	bl	18440 <__aeabi_fdiv>
   14640:	4603      	mov	r3, r0
   14642:	4618      	mov	r0, r3
   14644:	f04f 0100 	mov.w	r1, #0
   14648:	f003 fff8 	bl	1863c <__aeabi_fcmpge>
   1464c:	4603      	mov	r3, r0
   1464e:	2b00      	cmp	r3, #0
   14650:	d014      	beq.n	1467c <route_to+0x1d0>
   14652:	f64a 6348 	movw	r3, #44616	; 0xae48
   14656:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1465a:	681a      	ldr	r2, [r3, #0]
   1465c:	f64a 6350 	movw	r3, #44624	; 0xae50
   14660:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14664:	681b      	ldr	r3, [r3, #0]
   14666:	4610      	mov	r0, r2
   14668:	4619      	mov	r1, r3
   1466a:	f003 fee9 	bl	18440 <__aeabi_fdiv>
   1466e:	4603      	mov	r3, r0
   14670:	4618      	mov	r0, r3
   14672:	f003 f99d 	bl	179b0 <__aeabi_f2d>
   14676:	4602      	mov	r2, r0
   14678:	460b      	mov	r3, r1
   1467a:	e003      	b.n	14684 <route_to+0x1d8>
   1467c:	f04f 0200 	mov.w	r2, #0
   14680:	f04f 0300 	mov.w	r3, #0
   14684:	4620      	mov	r0, r4
   14686:	4629      	mov	r1, r5
   14688:	f003 f834 	bl	176f4 <__adddf3>
   1468c:	4602      	mov	r2, r0
   1468e:	460b      	mov	r3, r1
   14690:	4610      	mov	r0, r2
   14692:	4619      	mov	r1, r3
   14694:	f003 fcc2 	bl	1801c <__aeabi_d2f>
   14698:	4602      	mov	r2, r0
   1469a:	f64a 634c 	movw	r3, #44620	; 0xae4c
   1469e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   146a2:	601a      	str	r2, [r3, #0]
  alpha = Min(1., alpha);
   146a4:	f64a 634c 	movw	r3, #44620	; 0xae4c
   146a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   146ac:	681b      	ldr	r3, [r3, #0]
   146ae:	4618      	mov	r0, r3
   146b0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   146b4:	f003 ffc2 	bl	1863c <__aeabi_fcmpge>
   146b8:	4603      	mov	r3, r0
   146ba:	2b00      	cmp	r3, #0
   146bc:	d002      	beq.n	146c4 <route_to+0x218>
   146be:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   146c2:	e004      	b.n	146ce <route_to+0x222>
   146c4:	f64a 634c 	movw	r3, #44620	; 0xae4c
   146c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   146cc:	681a      	ldr	r2, [r3, #0]
   146ce:	f64a 634c 	movw	r3, #44620	; 0xae4c
   146d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   146d6:	601a      	str	r2, [r3, #0]
  fly_to_xy(last_wp_x + alpha*leg_x, last_wp_y + alpha*leg_y);
   146d8:	f64a 634c 	movw	r3, #44620	; 0xae4c
   146dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   146e0:	681b      	ldr	r3, [r3, #0]
   146e2:	4618      	mov	r0, r3
   146e4:	6979      	ldr	r1, [r7, #20]
   146e6:	f003 fdf7 	bl	182d8 <__aeabi_fmul>
   146ea:	4603      	mov	r3, r0
   146ec:	4618      	mov	r0, r3
   146ee:	69f9      	ldr	r1, [r7, #28]
   146f0:	f003 fcea 	bl	180c8 <__addsf3>
   146f4:	4603      	mov	r3, r0
   146f6:	461c      	mov	r4, r3
   146f8:	f64a 634c 	movw	r3, #44620	; 0xae4c
   146fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14700:	681b      	ldr	r3, [r3, #0]
   14702:	4618      	mov	r0, r3
   14704:	6939      	ldr	r1, [r7, #16]
   14706:	f003 fde7 	bl	182d8 <__aeabi_fmul>
   1470a:	4603      	mov	r3, r0
   1470c:	4618      	mov	r0, r3
   1470e:	69b9      	ldr	r1, [r7, #24]
   14710:	f003 fcda 	bl	180c8 <__addsf3>
   14714:	4603      	mov	r3, r0
   14716:	4620      	mov	r0, r4
   14718:	4619      	mov	r1, r3
   1471a:	f7ff fe55 	bl	143c8 <fly_to_xy>
}
   1471e:	3720      	adds	r7, #32
   14720:	46bd      	mov	sp, r7
   14722:	bdb0      	pop	{r4, r5, r7, pc}

00014724 <compute_dist2_to_home>:
  float last_alt = waypoints[_last_wp].a;
  desired_altitude = last_alt + alpha * (waypoints[wp].a - last_alt);
  pre_climb = NOMINAL_AIRSPEED * (waypoints[wp].a - last_alt) / leg;
}*/

static inline void compute_dist2_to_home(void) {
   14724:	b590      	push	{r4, r7, lr}
   14726:	b083      	sub	sp, #12
   14728:	af00      	add	r7, sp, #0
  float ph_x = waypoints[WP_HOME].x - estimator_x;
   1472a:	f240 23bc 	movw	r3, #700	; 0x2bc
   1472e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14732:	681a      	ldr	r2, [r3, #0]
   14734:	f24b 0364 	movw	r3, #45156	; 0xb064
   14738:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1473c:	681b      	ldr	r3, [r3, #0]
   1473e:	4610      	mov	r0, r2
   14740:	4619      	mov	r1, r3
   14742:	f003 fcbf 	bl	180c4 <__aeabi_fsub>
   14746:	4603      	mov	r3, r0
   14748:	607b      	str	r3, [r7, #4]
  float ph_y = waypoints[WP_HOME].y - estimator_y;
   1474a:	f240 23bc 	movw	r3, #700	; 0x2bc
   1474e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14752:	685a      	ldr	r2, [r3, #4]
   14754:	f24b 0368 	movw	r3, #45160	; 0xb068
   14758:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1475c:	681b      	ldr	r3, [r3, #0]
   1475e:	4610      	mov	r0, r2
   14760:	4619      	mov	r1, r3
   14762:	f003 fcaf 	bl	180c4 <__aeabi_fsub>
   14766:	4603      	mov	r3, r0
   14768:	603b      	str	r3, [r7, #0]
  dist2_to_home = ph_x*ph_x + ph_y *ph_y;
   1476a:	6878      	ldr	r0, [r7, #4]
   1476c:	6879      	ldr	r1, [r7, #4]
   1476e:	f003 fdb3 	bl	182d8 <__aeabi_fmul>
   14772:	4603      	mov	r3, r0
   14774:	461c      	mov	r4, r3
   14776:	6838      	ldr	r0, [r7, #0]
   14778:	6839      	ldr	r1, [r7, #0]
   1477a:	f003 fdad 	bl	182d8 <__aeabi_fmul>
   1477e:	4603      	mov	r3, r0
   14780:	4620      	mov	r0, r4
   14782:	4619      	mov	r1, r3
   14784:	f003 fca0 	bl	180c8 <__addsf3>
   14788:	4603      	mov	r3, r0
   1478a:	461a      	mov	r2, r3
   1478c:	f64a 6340 	movw	r3, #44608	; 0xae40
   14790:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14794:	601a      	str	r2, [r3, #0]
  too_far_from_home = dist2_to_home > (MAX_DIST_FROM_HOME*MAX_DIST_FROM_HOME);
   14796:	f64a 6340 	movw	r3, #44608	; 0xae40
   1479a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1479e:	681b      	ldr	r3, [r3, #0]
   147a0:	2201      	movs	r2, #1
   147a2:	4614      	mov	r4, r2
   147a4:	4618      	mov	r0, r3
   147a6:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   147aa:	f6c4 0174 	movt	r1, #18548	; 0x4874
   147ae:	f003 ff4f 	bl	18650 <__aeabi_fcmpgt>
   147b2:	4603      	mov	r3, r0
   147b4:	2b00      	cmp	r3, #0
   147b6:	d101      	bne.n	147bc <compute_dist2_to_home+0x98>
   147b8:	2300      	movs	r3, #0
   147ba:	461c      	mov	r4, r3
   147bc:	b2e3      	uxtb	r3, r4
   147be:	461a      	mov	r2, r3
   147c0:	f64a 6344 	movw	r3, #44612	; 0xae44
   147c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   147c8:	701a      	strb	r2, [r3, #0]
}
   147ca:	370c      	adds	r7, #12
   147cc:	46bd      	mov	sp, r7
   147ce:	bd90      	pop	{r4, r7, pc}

000147d0 <nav_home>:

void nav_home(void) {
   147d0:	b580      	push	{r7, lr}
   147d2:	af00      	add	r7, sp, #0
  //Circle(WP_HOME, 50); /* FIXME: radius should be defined elsewhere */
  nav_pitch = 0.; /* Nominal speed */ 
   147d4:	f64a 6334 	movw	r3, #44596	; 0xae34
   147d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   147dc:	f04f 0200 	mov.w	r2, #0
   147e0:	601a      	str	r2, [r3, #0]
  vertical_mode = VERTICAL_MODE_AUTO_ALT;
   147e2:	f64a 2395 	movw	r3, #43669	; 0xaa95
   147e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   147ea:	2203      	movs	r2, #3
   147ec:	701a      	strb	r2, [r3, #0]
  desired_altitude = GROUND_ALT+50;
   147ee:	f240 23b8 	movw	r3, #696	; 0x2b8
   147f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   147f6:	f04f 0200 	mov.w	r2, #0
   147fa:	f2c4 322f 	movt	r2, #17199	; 0x432f
   147fe:	601a      	str	r2, [r3, #0]
  compute_dist2_to_home();
   14800:	f7ff ff90 	bl	14724 <compute_dist2_to_home>
  dist2_to_wp = dist2_to_home;
   14804:	f64a 6340 	movw	r3, #44608	; 0xae40
   14808:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1480c:	681a      	ldr	r2, [r3, #0]
   1480e:	f64a 633c 	movw	r3, #44604	; 0xae3c
   14812:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14816:	601a      	str	r2, [r3, #0]
}
   14818:	bd80      	pop	{r7, pc}
   1481a:	bf00      	nop

0001481c <nav_update>:

void nav_update(void) {
   1481c:	b580      	push	{r7, lr}
   1481e:	af00      	add	r7, sp, #0
  compute_dist2_to_home();
   14820:	f7ff ff80 	bl	14724 <compute_dist2_to_home>

  auto_nav();
   14824:	f7fd fc0c 	bl	12040 <auto_nav>
}
   14828:	bd80      	pop	{r7, pc}
   1482a:	bf00      	nop

0001482c <nav_init>:


void nav_init(void) {
   1482c:	b480      	push	{r7}
   1482e:	af00      	add	r7, sp, #0
  nav_block = 0;
   14830:	f64a 6309 	movw	r3, #44553	; 0xae09
   14834:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14838:	2200      	movs	r2, #0
   1483a:	701a      	strb	r2, [r3, #0]
  nav_stage = 0;
   1483c:	f64a 6308 	movw	r3, #44552	; 0xae08
   14840:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14844:	2200      	movs	r2, #0
   14846:	701a      	strb	r2, [r3, #0]
}
   14848:	46bd      	mov	sp, r7
   1484a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1484e:	4770      	bx	lr

00014850 <uart0_transmit>:

static uint8_t           tx_head1; /* next free in buf */
static volatile uint8_t  tx_tail1; /* next char to send */
static uint8_t           tx_buf1[ TX_BUF_SIZE ];

void uart0_transmit( unsigned char data ) {
   14850:	b480      	push	{r7}
   14852:	b083      	sub	sp, #12
   14854:	af00      	add	r7, sp, #0
   14856:	4603      	mov	r3, r0
   14858:	71fb      	strb	r3, [r7, #7]
  if (UCSR0B & _BV(TXCIE)) {
   1485a:	f242 030a 	movw	r3, #8202	; 0x200a
   1485e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14862:	781b      	ldrb	r3, [r3, #0]
   14864:	b2db      	uxtb	r3, r3
   14866:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1486a:	2b00      	cmp	r3, #0
   1486c:	d028      	beq.n	148c0 <uart0_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail0 == tx_head0 + 1) { /* BUF_SIZE = 256 */
   1486e:	f64a 635d 	movw	r3, #44637	; 0xae5d
   14872:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14876:	781b      	ldrb	r3, [r3, #0]
   14878:	b2db      	uxtb	r3, r3
   1487a:	461a      	mov	r2, r3
   1487c:	f64a 635c 	movw	r3, #44636	; 0xae5c
   14880:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14884:	781b      	ldrb	r3, [r3, #0]
   14886:	3301      	adds	r3, #1
   14888:	429a      	cmp	r2, r3
   1488a:	d100      	bne.n	1488e <uart0_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   1488c:	e02c      	b.n	148e8 <uart0_transmit+0x98>
    }
    tx_buf0[tx_head0] = data;
   1488e:	f64a 635c 	movw	r3, #44636	; 0xae5c
   14892:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14896:	781b      	ldrb	r3, [r3, #0]
   14898:	461a      	mov	r2, r3
   1489a:	f64a 6360 	movw	r3, #44640	; 0xae60
   1489e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148a2:	79f9      	ldrb	r1, [r7, #7]
   148a4:	5499      	strb	r1, [r3, r2]
    tx_head0++; /* BUF_SIZE = 256 */
   148a6:	f64a 635c 	movw	r3, #44636	; 0xae5c
   148aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148ae:	781b      	ldrb	r3, [r3, #0]
   148b0:	3301      	adds	r3, #1
   148b2:	b2da      	uxtb	r2, r3
   148b4:	f64a 635c 	movw	r3, #44636	; 0xae5c
   148b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148bc:	701a      	strb	r2, [r3, #0]
   148be:	e013      	b.n	148e8 <uart0_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR0 = data;
   148c0:	f242 030c 	movw	r3, #8204	; 0x200c
   148c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148c8:	79fa      	ldrb	r2, [r7, #7]
   148ca:	701a      	strb	r2, [r3, #0]
    sbi(UCSR0B, TXCIE);
   148cc:	f242 030a 	movw	r3, #8202	; 0x200a
   148d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148d4:	f242 020a 	movw	r2, #8202	; 0x200a
   148d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   148dc:	7812      	ldrb	r2, [r2, #0]
   148de:	b2d2      	uxtb	r2, r2
   148e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   148e4:	b2d2      	uxtb	r2, r2
   148e6:	701a      	strb	r2, [r3, #0]
  }
}
   148e8:	370c      	adds	r7, #12
   148ea:	46bd      	mov	sp, r7
   148ec:	f85d 7b04 	ldr.w	r7, [sp], #4
   148f0:	4770      	bx	lr
   148f2:	bf00      	nop

000148f4 <uart1_transmit>:

void uart1_transmit( unsigned char data ) {
   148f4:	b480      	push	{r7}
   148f6:	b083      	sub	sp, #12
   148f8:	af00      	add	r7, sp, #0
   148fa:	4603      	mov	r3, r0
   148fc:	71fb      	strb	r3, [r7, #7]
  if (UCSR1B & _BV(TXCIE)) {
   148fe:	f242 039a 	movw	r3, #8346	; 0x209a
   14902:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14906:	781b      	ldrb	r3, [r3, #0]
   14908:	b2db      	uxtb	r3, r3
   1490a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1490e:	2b00      	cmp	r3, #0
   14910:	d028      	beq.n	14964 <uart1_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail1 == tx_head1 + 1) { /* BUF_SIZE = 256 */
   14912:	f64a 7361 	movw	r3, #44897	; 0xaf61
   14916:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1491a:	781b      	ldrb	r3, [r3, #0]
   1491c:	b2db      	uxtb	r3, r3
   1491e:	461a      	mov	r2, r3
   14920:	f64a 7360 	movw	r3, #44896	; 0xaf60
   14924:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14928:	781b      	ldrb	r3, [r3, #0]
   1492a:	3301      	adds	r3, #1
   1492c:	429a      	cmp	r2, r3
   1492e:	d100      	bne.n	14932 <uart1_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14930:	e02c      	b.n	1498c <uart1_transmit+0x98>
    }
    tx_buf1[tx_head1] = data;
   14932:	f64a 7360 	movw	r3, #44896	; 0xaf60
   14936:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1493a:	781b      	ldrb	r3, [r3, #0]
   1493c:	461a      	mov	r2, r3
   1493e:	f64a 7364 	movw	r3, #44900	; 0xaf64
   14942:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14946:	79f9      	ldrb	r1, [r7, #7]
   14948:	5499      	strb	r1, [r3, r2]
    tx_head1++; /* BUF_SIZE = 256 */
   1494a:	f64a 7360 	movw	r3, #44896	; 0xaf60
   1494e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14952:	781b      	ldrb	r3, [r3, #0]
   14954:	3301      	adds	r3, #1
   14956:	b2da      	uxtb	r2, r3
   14958:	f64a 7360 	movw	r3, #44896	; 0xaf60
   1495c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14960:	701a      	strb	r2, [r3, #0]
   14962:	e013      	b.n	1498c <uart1_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR1 = data;
   14964:	f242 039c 	movw	r3, #8348	; 0x209c
   14968:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1496c:	79fa      	ldrb	r2, [r7, #7]
   1496e:	701a      	strb	r2, [r3, #0]
    sbi(UCSR1B, TXCIE);
   14970:	f242 039a 	movw	r3, #8346	; 0x209a
   14974:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14978:	f242 029a 	movw	r2, #8346	; 0x209a
   1497c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14980:	7812      	ldrb	r2, [r2, #0]
   14982:	b2d2      	uxtb	r2, r2
   14984:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14988:	b2d2      	uxtb	r2, r2
   1498a:	701a      	strb	r2, [r3, #0]
  }
}
   1498c:	370c      	adds	r7, #12
   1498e:	46bd      	mov	sp, r7
   14990:	f85d 7b04 	ldr.w	r7, [sp], #4
   14994:	4770      	bx	lr
   14996:	bf00      	nop

00014998 <uart0_print_string>:


void uart0_print_string(const uint8_t* s) {
   14998:	b580      	push	{r7, lr}
   1499a:	b084      	sub	sp, #16
   1499c:	af00      	add	r7, sp, #0
   1499e:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   149a0:	2300      	movs	r3, #0
   149a2:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   149a4:	e009      	b.n	149ba <uart0_print_string+0x22>
    uart0_transmit(s[i]);
   149a6:	7bfb      	ldrb	r3, [r7, #15]
   149a8:	687a      	ldr	r2, [r7, #4]
   149aa:	4413      	add	r3, r2
   149ac:	781b      	ldrb	r3, [r3, #0]
   149ae:	4618      	mov	r0, r3
   149b0:	f7ff ff4e 	bl	14850 <uart0_transmit>
    i++;
   149b4:	7bfb      	ldrb	r3, [r7, #15]
   149b6:	3301      	adds	r3, #1
   149b8:	73fb      	strb	r3, [r7, #15]
}


void uart0_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   149ba:	7bfb      	ldrb	r3, [r7, #15]
   149bc:	687a      	ldr	r2, [r7, #4]
   149be:	4413      	add	r3, r2
   149c0:	781b      	ldrb	r3, [r3, #0]
   149c2:	2b00      	cmp	r3, #0
   149c4:	d1ef      	bne.n	149a6 <uart0_print_string+0xe>
    uart0_transmit(s[i]);
    i++;
  }
}
   149c6:	3710      	adds	r7, #16
   149c8:	46bd      	mov	sp, r7
   149ca:	bd80      	pop	{r7, pc}

000149cc <uart0_print_hex>:

void uart0_print_hex(const uint8_t c) {
   149cc:	b590      	push	{r4, r7, lr}
   149ce:	b089      	sub	sp, #36	; 0x24
   149d0:	af00      	add	r7, sp, #0
   149d2:	4603      	mov	r3, r0
   149d4:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   149d6:	f648 1368 	movw	r3, #35176	; 0x8968
   149da:	f2c0 0301 	movt	r3, #1
   149de:	f107 040c 	add.w	r4, r7, #12
   149e2:	6818      	ldr	r0, [r3, #0]
   149e4:	6859      	ldr	r1, [r3, #4]
   149e6:	689a      	ldr	r2, [r3, #8]
   149e8:	68db      	ldr	r3, [r3, #12]
   149ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   149ec:	79fb      	ldrb	r3, [r7, #7]
   149ee:	091b      	lsrs	r3, r3, #4
   149f0:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   149f2:	79fb      	ldrb	r3, [r7, #7]
   149f4:	f003 030f 	and.w	r3, r3, #15
   149f8:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
    high = 15;
   149fa:	230f      	movs	r3, #15
   149fc:	77fb      	strb	r3, [r7, #31]
    low = 15;
   149fe:	230f      	movs	r3, #15
   14a00:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */
    uart0_transmit(hex[high]);
   14a02:	7ffb      	ldrb	r3, [r7, #31]
   14a04:	f107 0220 	add.w	r2, r7, #32
   14a08:	4413      	add	r3, r2
   14a0a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14a0e:	4618      	mov	r0, r3
   14a10:	f7ff ff1e 	bl	14850 <uart0_transmit>
  uart0_transmit(hex[low]);
   14a14:	7fbb      	ldrb	r3, [r7, #30]
   14a16:	f107 0220 	add.w	r2, r7, #32
   14a1a:	4413      	add	r3, r2
   14a1c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14a20:	4618      	mov	r0, r3
   14a22:	f7ff ff15 	bl	14850 <uart0_transmit>
}
   14a26:	3724      	adds	r7, #36	; 0x24
   14a28:	46bd      	mov	sp, r7
   14a2a:	bd90      	pop	{r4, r7, pc}

00014a2c <__vector_20>:


SIGNAL(SIG_UART0_TRANS) {
   14a2c:	b480      	push	{r7}
   14a2e:	af00      	add	r7, sp, #0
  if (tx_head0 == tx_tail0) {
   14a30:	f64a 635c 	movw	r3, #44636	; 0xae5c
   14a34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a38:	781a      	ldrb	r2, [r3, #0]
   14a3a:	f64a 635d 	movw	r3, #44637	; 0xae5d
   14a3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a42:	781b      	ldrb	r3, [r3, #0]
   14a44:	b2db      	uxtb	r3, r3
   14a46:	429a      	cmp	r2, r3
   14a48:	d10e      	bne.n	14a68 <__vector_20+0x3c>
    /* Nothing more to send */
    cbi(UCSR0B, TXCIE); /* disable interrupt */
   14a4a:	f242 030a 	movw	r3, #8202	; 0x200a
   14a4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a52:	f242 020a 	movw	r2, #8202	; 0x200a
   14a56:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a5a:	7812      	ldrb	r2, [r2, #0]
   14a5c:	b2d2      	uxtb	r2, r2
   14a5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   14a62:	b2d2      	uxtb	r2, r2
   14a64:	701a      	strb	r2, [r3, #0]
   14a66:	e01d      	b.n	14aa4 <__vector_20+0x78>
  } else {
    UDR0 = tx_buf0[tx_tail0];
   14a68:	f242 030c 	movw	r3, #8204	; 0x200c
   14a6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a70:	f64a 625d 	movw	r2, #44637	; 0xae5d
   14a74:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a78:	7812      	ldrb	r2, [r2, #0]
   14a7a:	b2d2      	uxtb	r2, r2
   14a7c:	4611      	mov	r1, r2
   14a7e:	f64a 6260 	movw	r2, #44640	; 0xae60
   14a82:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a86:	5c52      	ldrb	r2, [r2, r1]
   14a88:	701a      	strb	r2, [r3, #0]
    tx_tail0++; /* warning tx_buf_len is 256 */
   14a8a:	f64a 635d 	movw	r3, #44637	; 0xae5d
   14a8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a92:	781b      	ldrb	r3, [r3, #0]
   14a94:	b2db      	uxtb	r3, r3
   14a96:	3301      	adds	r3, #1
   14a98:	b2da      	uxtb	r2, r3
   14a9a:	f64a 635d 	movw	r3, #44637	; 0xae5d
   14a9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14aa2:	701a      	strb	r2, [r3, #0]
  }
}
   14aa4:	46bd      	mov	sp, r7
   14aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
   14aaa:	4770      	bx	lr

00014aac <__vector_32>:

SIGNAL(SIG_UART1_TRANS) {
   14aac:	b480      	push	{r7}
   14aae:	af00      	add	r7, sp, #0
  if (tx_head1 == tx_tail1) {
   14ab0:	f64a 7360 	movw	r3, #44896	; 0xaf60
   14ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ab8:	781a      	ldrb	r2, [r3, #0]
   14aba:	f64a 7361 	movw	r3, #44897	; 0xaf61
   14abe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ac2:	781b      	ldrb	r3, [r3, #0]
   14ac4:	b2db      	uxtb	r3, r3
   14ac6:	429a      	cmp	r2, r3
   14ac8:	d10e      	bne.n	14ae8 <__vector_32+0x3c>
    /* Nothing more to send */
    cbi(UCSR1B, TXCIE); /* disable interrupt */
   14aca:	f242 039a 	movw	r3, #8346	; 0x209a
   14ace:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ad2:	f242 029a 	movw	r2, #8346	; 0x209a
   14ad6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14ada:	7812      	ldrb	r2, [r2, #0]
   14adc:	b2d2      	uxtb	r2, r2
   14ade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   14ae2:	b2d2      	uxtb	r2, r2
   14ae4:	701a      	strb	r2, [r3, #0]
   14ae6:	e01d      	b.n	14b24 <__vector_32+0x78>
  } else {
    UDR1 = tx_buf1[tx_tail1];
   14ae8:	f242 039c 	movw	r3, #8348	; 0x209c
   14aec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14af0:	f64a 7261 	movw	r2, #44897	; 0xaf61
   14af4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14af8:	7812      	ldrb	r2, [r2, #0]
   14afa:	b2d2      	uxtb	r2, r2
   14afc:	4611      	mov	r1, r2
   14afe:	f64a 7264 	movw	r2, #44900	; 0xaf64
   14b02:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14b06:	5c52      	ldrb	r2, [r2, r1]
   14b08:	701a      	strb	r2, [r3, #0]
    tx_tail1++; /* warning tx_buf_len is 256 */
   14b0a:	f64a 7361 	movw	r3, #44897	; 0xaf61
   14b0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b12:	781b      	ldrb	r3, [r3, #0]
   14b14:	b2db      	uxtb	r3, r3
   14b16:	3301      	adds	r3, #1
   14b18:	b2da      	uxtb	r2, r3
   14b1a:	f64a 7361 	movw	r3, #44897	; 0xaf61
   14b1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b22:	701a      	strb	r2, [r3, #0]
  }
}
   14b24:	46bd      	mov	sp, r7
   14b26:	f85d 7b04 	ldr.w	r7, [sp], #4
   14b2a:	4770      	bx	lr

00014b2c <uart0_init>:

void uart0_init( void ) {
   14b2c:	b480      	push	{r7}
   14b2e:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR0H = 0; 
   14b30:	f242 0390 	movw	r3, #8336	; 0x2090
   14b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b38:	2200      	movs	r2, #0
   14b3a:	701a      	strb	r2, [r3, #0]
  UBRR0L = 25; // 38.4
   14b3c:	f242 0309 	movw	r3, #8201	; 0x2009
   14b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b44:	2219      	movs	r2, #25
   14b46:	701a      	strb	r2, [r3, #0]
  // UBRR0L = 103; //9600
  /* single speed */ 
  UCSR0A = 0; 
   14b48:	f242 030b 	movw	r3, #8203	; 0x200b
   14b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b50:	2200      	movs	r2, #0
   14b52:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR0B = _BV(RXEN) | _BV(TXEN);
   14b54:	f242 030a 	movw	r3, #8202	; 0x200a
   14b58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b5c:	2218      	movs	r2, #24
   14b5e:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR0C = _BV(UCSZ1) | _BV(UCSZ0);
   14b60:	f242 0395 	movw	r3, #8341	; 0x2095
   14b64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b68:	2206      	movs	r2, #6
   14b6a:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR0B, RXCIE ); 
   14b6c:	f242 030a 	movw	r3, #8202	; 0x200a
   14b70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b74:	f242 020a 	movw	r2, #8202	; 0x200a
   14b78:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14b7c:	7812      	ldrb	r2, [r2, #0]
   14b7e:	b2d2      	uxtb	r2, r2
   14b80:	f062 027f 	orn	r2, r2, #127	; 0x7f
   14b84:	b2d2      	uxtb	r2, r2
   14b86:	701a      	strb	r2, [r3, #0]
}
   14b88:	46bd      	mov	sp, r7
   14b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
   14b8e:	4770      	bx	lr

00014b90 <uart1_init>:

void uart1_init( void ) {
   14b90:	b480      	push	{r7}
   14b92:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR1H = 0; 
   14b94:	f242 0398 	movw	r3, #8344	; 0x2098
   14b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b9c:	2200      	movs	r2, #0
   14b9e:	701a      	strb	r2, [r3, #0]
  UBRR1L = 25; // 38.4
   14ba0:	f242 0399 	movw	r3, #8345	; 0x2099
   14ba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ba8:	2219      	movs	r2, #25
   14baa:	701a      	strb	r2, [r3, #0]
  // UBRR1L = 103; //9600


  /* single speed */ 
  UCSR1A = 0; 
   14bac:	f242 039b 	movw	r3, #8347	; 0x209b
   14bb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bb4:	2200      	movs	r2, #0
   14bb6:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR1B = _BV(RXEN) | _BV(TXEN);
   14bb8:	f242 039a 	movw	r3, #8346	; 0x209a
   14bbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bc0:	2218      	movs	r2, #24
   14bc2:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR1C = _BV(UCSZ1) | _BV(UCSZ0);
   14bc4:	f242 039d 	movw	r3, #8349	; 0x209d
   14bc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bcc:	2206      	movs	r2, #6
   14bce:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR1B, RXCIE ); 
   14bd0:	f242 039a 	movw	r3, #8346	; 0x209a
   14bd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bd8:	f242 029a 	movw	r2, #8346	; 0x209a
   14bdc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14be0:	7812      	ldrb	r2, [r2, #0]
   14be2:	b2d2      	uxtb	r2, r2
   14be4:	f062 027f 	orn	r2, r2, #127	; 0x7f
   14be8:	b2d2      	uxtb	r2, r2
   14bea:	701a      	strb	r2, [r3, #0]
}
   14bec:	46bd      	mov	sp, r7
   14bee:	f85d 7b04 	ldr.w	r7, [sp], #4
   14bf2:	4770      	bx	lr
   14bf4:	0000      	movs	r0, r0
	...

00014bf8 <estimator_init>:
  estimator_theta_dot = theta_dot; \
}

inline void estimator_update_lls( void );

void estimator_init( void ) {
   14bf8:	b480      	push	{r7}
   14bfa:	af00      	add	r7, sp, #0

  EstimatorSetPos (0., 0., 0.);
   14bfc:	f24b 0364 	movw	r3, #45156	; 0xb064
   14c00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c04:	f04f 0200 	mov.w	r2, #0
   14c08:	601a      	str	r2, [r3, #0]
   14c0a:	f24b 0368 	movw	r3, #45160	; 0xb068
   14c0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c12:	f04f 0200 	mov.w	r2, #0
   14c16:	601a      	str	r2, [r3, #0]
   14c18:	f24b 036c 	movw	r3, #45164	; 0xb06c
   14c1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c20:	f04f 0200 	mov.w	r2, #0
   14c24:	601a      	str	r2, [r3, #0]

  EstimatorSetAtt (0., 0., 0);
   14c26:	f24b 0370 	movw	r3, #45168	; 0xb070
   14c2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c2e:	f04f 0200 	mov.w	r2, #0
   14c32:	601a      	str	r2, [r3, #0]
   14c34:	f24b 0374 	movw	r3, #45172	; 0xb074
   14c38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c3c:	f04f 0200 	mov.w	r2, #0
   14c40:	601a      	str	r2, [r3, #0]
   14c42:	f24b 0378 	movw	r3, #45176	; 0xb078
   14c46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c4a:	f04f 0200 	mov.w	r2, #0
   14c4e:	601a      	str	r2, [r3, #0]

  EstimatorSetSpeedPol ( 0., 0., 0.);
   14c50:	f24b 039c 	movw	r3, #45212	; 0xb09c
   14c54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c58:	f04f 0200 	mov.w	r2, #0
   14c5c:	601a      	str	r2, [r3, #0]
   14c5e:	f24b 03a0 	movw	r3, #45216	; 0xb0a0
   14c62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c66:	f04f 0200 	mov.w	r2, #0
   14c6a:	601a      	str	r2, [r3, #0]
   14c6c:	f24b 0384 	movw	r3, #45188	; 0xb084
   14c70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c74:	f04f 0200 	mov.w	r2, #0
   14c78:	601a      	str	r2, [r3, #0]

  EstimatorSetRotSpeed (0., 0., 0.);
   14c7a:	f24b 0388 	movw	r3, #45192	; 0xb088
   14c7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c82:	f04f 0200 	mov.w	r2, #0
   14c86:	601a      	str	r2, [r3, #0]
   14c88:	f24b 038c 	movw	r3, #45196	; 0xb08c
   14c8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c90:	f04f 0200 	mov.w	r2, #0
   14c94:	601a      	str	r2, [r3, #0]
   14c96:	f24b 0390 	movw	r3, #45200	; 0xb090
   14c9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c9e:	f04f 0200 	mov.w	r2, #0
   14ca2:	601a      	str	r2, [r3, #0]

  estimator_flight_time = 0;
   14ca4:	f24b 0394 	movw	r3, #45204	; 0xb094
   14ca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14cac:	2200      	movs	r2, #0
   14cae:	801a      	strh	r2, [r3, #0]

  estimator_rad_of_ir = ir_rad_of_ir;
   14cb0:	f240 238c 	movw	r3, #652	; 0x28c
   14cb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14cb8:	681a      	ldr	r2, [r3, #0]
   14cba:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
   14cbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14cc2:	601a      	str	r2, [r3, #0]
}
   14cc4:	46bd      	mov	sp, r7
   14cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
   14cca:	4770      	bx	lr

00014ccc <estimator_update_state_infrared>:

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
   14ccc:	b580      	push	{r7, lr}
   14cce:	b082      	sub	sp, #8
   14cd0:	af00      	add	r7, sp, #0
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   14cd2:	f240 2380 	movw	r3, #640	; 0x280
   14cd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14cda:	781b      	ldrb	r3, [r3, #0]
    estimator_rad_of_ir : ir_rad_of_ir;
   14cdc:	2b01      	cmp	r3, #1
   14cde:	d105      	bne.n	14cec <estimator_update_state_infrared+0x20>
   14ce0:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
   14ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ce8:	681b      	ldr	r3, [r3, #0]
   14cea:	e004      	b.n	14cf6 <estimator_update_state_infrared+0x2a>
   14cec:	f240 238c 	movw	r3, #652	; 0x28c
   14cf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14cf4:	681b      	ldr	r3, [r3, #0]
}

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   14cf6:	607b      	str	r3, [r7, #4]
    estimator_rad_of_ir : ir_rad_of_ir;
  estimator_phi  = rad_of_ir * ir_roll;
   14cf8:	f64a 5350 	movw	r3, #44368	; 0xad50
   14cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d00:	881b      	ldrh	r3, [r3, #0]
   14d02:	b21b      	sxth	r3, r3
   14d04:	4618      	mov	r0, r3
   14d06:	f003 fa93 	bl	18230 <__aeabi_i2f>
   14d0a:	4603      	mov	r3, r0
   14d0c:	4618      	mov	r0, r3
   14d0e:	6879      	ldr	r1, [r7, #4]
   14d10:	f003 fae2 	bl	182d8 <__aeabi_fmul>
   14d14:	4603      	mov	r3, r0
   14d16:	461a      	mov	r2, r3
   14d18:	f24b 0370 	movw	r3, #45168	; 0xb070
   14d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d20:	601a      	str	r2, [r3, #0]

  estimator_theta = rad_of_ir * ir_pitch;
   14d22:	f64a 5352 	movw	r3, #44370	; 0xad52
   14d26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d2a:	881b      	ldrh	r3, [r3, #0]
   14d2c:	b21b      	sxth	r3, r3
   14d2e:	4618      	mov	r0, r3
   14d30:	f003 fa7e 	bl	18230 <__aeabi_i2f>
   14d34:	4603      	mov	r3, r0
   14d36:	4618      	mov	r0, r3
   14d38:	6879      	ldr	r1, [r7, #4]
   14d3a:	f003 facd 	bl	182d8 <__aeabi_fmul>
   14d3e:	4603      	mov	r3, r0
   14d40:	461a      	mov	r2, r3
   14d42:	f24b 0378 	movw	r3, #45176	; 0xb078
   14d46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d4a:	601a      	str	r2, [r3, #0]
}
   14d4c:	3708      	adds	r7, #8
   14d4e:	46bd      	mov	sp, r7
   14d50:	bd80      	pop	{r7, pc}
   14d52:	bf00      	nop

00014d54 <estimator_update_ir_estim>:
#define RHO 0.999 /* The higher, the slower the estimation is changing */

#define g 9.81


void estimator_update_ir_estim( void ) {
   14d54:	b5b0      	push	{r4, r5, r7, lr}
   14d56:	b084      	sub	sp, #16
   14d58:	af00      	add	r7, sp, #0
  static bool_t initialized = FALSE;
  static float sum_xy, sum_xx;
  float absphi;
  float init_ir2;

  if (initialized) 
   14d5a:	f24b 03b0 	movw	r3, #45232	; 0xb0b0
   14d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d62:	781b      	ldrb	r3, [r3, #0]
   14d64:	2b00      	cmp	r3, #0
   14d66:	f000 81e8 	beq.w	1513a <estimator_update_ir_estim+0x3e6>
  {
    float dt = gps_ftow - last_t;
   14d6a:	f64a 4320 	movw	r3, #44064	; 0xac20
   14d6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d72:	681a      	ldr	r2, [r3, #0]
   14d74:	f24b 03b4 	movw	r3, #45236	; 0xb0b4
   14d78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d7c:	681b      	ldr	r3, [r3, #0]
   14d7e:	4610      	mov	r0, r2
   14d80:	4619      	mov	r1, r3
   14d82:	f003 f99f 	bl	180c4 <__aeabi_fsub>
   14d86:	4603      	mov	r3, r0
   14d88:	60bb      	str	r3, [r7, #8]
    if (dt > 0.1) { // Against division by zero
   14d8a:	68b8      	ldr	r0, [r7, #8]
   14d8c:	f002 fe10 	bl	179b0 <__aeabi_f2d>
   14d90:	4602      	mov	r2, r0
   14d92:	460b      	mov	r3, r1
   14d94:	4610      	mov	r0, r2
   14d96:	4619      	mov	r1, r3
   14d98:	a385      	add	r3, pc, #532	; (adr r3, 14fb0 <estimator_update_ir_estim+0x25c>)
   14d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   14d9e:	f003 f8eb 	bl	17f78 <__aeabi_dcmpgt>
   14da2:	4603      	mov	r3, r0
   14da4:	2b00      	cmp	r3, #0
   14da6:	d100      	bne.n	14daa <estimator_update_ir_estim+0x56>
   14da8:	e219      	b.n	151de <estimator_update_ir_estim+0x48a>
      float phi = (estimator_hspeed_dir - last_hspeed_dir); 
   14daa:	f24b 03a0 	movw	r3, #45216	; 0xb0a0
   14dae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14db2:	681a      	ldr	r2, [r3, #0]
   14db4:	f24b 03b8 	movw	r3, #45240	; 0xb0b8
   14db8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dbc:	681b      	ldr	r3, [r3, #0]
   14dbe:	4610      	mov	r0, r2
   14dc0:	4619      	mov	r1, r3
   14dc2:	f003 f97f 	bl	180c4 <__aeabi_fsub>
   14dc6:	4603      	mov	r3, r0
   14dc8:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   14dca:	e013      	b.n	14df4 <estimator_update_ir_estim+0xa0>
   14dcc:	68f8      	ldr	r0, [r7, #12]
   14dce:	f002 fdef 	bl	179b0 <__aeabi_f2d>
   14dd2:	4602      	mov	r2, r0
   14dd4:	460b      	mov	r3, r1
   14dd6:	4610      	mov	r0, r2
   14dd8:	4619      	mov	r1, r3
   14dda:	a377      	add	r3, pc, #476	; (adr r3, 14fb8 <estimator_update_ir_estim+0x264>)
   14ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
   14de0:	f002 fc86 	bl	176f0 <__aeabi_dsub>
   14de4:	4602      	mov	r2, r0
   14de6:	460b      	mov	r3, r1
   14de8:	4610      	mov	r0, r2
   14dea:	4619      	mov	r1, r3
   14dec:	f003 f916 	bl	1801c <__aeabi_d2f>
   14df0:	4603      	mov	r3, r0
   14df2:	60fb      	str	r3, [r7, #12]
   14df4:	68f8      	ldr	r0, [r7, #12]
   14df6:	f002 fddb 	bl	179b0 <__aeabi_f2d>
   14dfa:	4602      	mov	r2, r0
   14dfc:	460b      	mov	r3, r1
   14dfe:	4610      	mov	r0, r2
   14e00:	4619      	mov	r1, r3
   14e02:	a36f      	add	r3, pc, #444	; (adr r3, 14fc0 <estimator_update_ir_estim+0x26c>)
   14e04:	e9d3 2300 	ldrd	r2, r3, [r3]
   14e08:	f003 f8b6 	bl	17f78 <__aeabi_dcmpgt>
   14e0c:	4603      	mov	r3, r0
   14e0e:	2b00      	cmp	r3, #0
   14e10:	d1dc      	bne.n	14dcc <estimator_update_ir_estim+0x78>
   14e12:	e013      	b.n	14e3c <estimator_update_ir_estim+0xe8>
   14e14:	68f8      	ldr	r0, [r7, #12]
   14e16:	f002 fdcb 	bl	179b0 <__aeabi_f2d>
   14e1a:	4602      	mov	r2, r0
   14e1c:	460b      	mov	r3, r1
   14e1e:	4610      	mov	r0, r2
   14e20:	4619      	mov	r1, r3
   14e22:	a365      	add	r3, pc, #404	; (adr r3, 14fb8 <estimator_update_ir_estim+0x264>)
   14e24:	e9d3 2300 	ldrd	r2, r3, [r3]
   14e28:	f002 fc64 	bl	176f4 <__adddf3>
   14e2c:	4602      	mov	r2, r0
   14e2e:	460b      	mov	r3, r1
   14e30:	4610      	mov	r0, r2
   14e32:	4619      	mov	r1, r3
   14e34:	f003 f8f2 	bl	1801c <__aeabi_d2f>
   14e38:	4603      	mov	r3, r0
   14e3a:	60fb      	str	r3, [r7, #12]
   14e3c:	68f8      	ldr	r0, [r7, #12]
   14e3e:	f002 fdb7 	bl	179b0 <__aeabi_f2d>
   14e42:	4602      	mov	r2, r0
   14e44:	460b      	mov	r3, r1
   14e46:	4610      	mov	r0, r2
   14e48:	4619      	mov	r1, r3
   14e4a:	a35f      	add	r3, pc, #380	; (adr r3, 14fc8 <estimator_update_ir_estim+0x274>)
   14e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   14e50:	f003 f874 	bl	17f3c <__aeabi_dcmplt>
   14e54:	4603      	mov	r3, r0
   14e56:	2b00      	cmp	r3, #0
   14e58:	d1dc      	bne.n	14e14 <estimator_update_ir_estim+0xc0>
      phi = phi/dt*NOMINAL_AIRSPEED/g; /* tan linearized */
   14e5a:	68f8      	ldr	r0, [r7, #12]
   14e5c:	68b9      	ldr	r1, [r7, #8]
   14e5e:	f003 faef 	bl	18440 <__aeabi_fdiv>
   14e62:	4603      	mov	r3, r0
   14e64:	4618      	mov	r0, r3
   14e66:	f002 fda3 	bl	179b0 <__aeabi_f2d>
   14e6a:	4602      	mov	r2, r0
   14e6c:	460b      	mov	r3, r1
   14e6e:	4610      	mov	r0, r2
   14e70:	4619      	mov	r1, r3
   14e72:	f04f 0200 	mov.w	r2, #0
   14e76:	f04f 0300 	mov.w	r3, #0
   14e7a:	f2c4 0324 	movt	r3, #16420	; 0x4024
   14e7e:	f002 fdeb 	bl	17a58 <__aeabi_dmul>
   14e82:	4602      	mov	r2, r0
   14e84:	460b      	mov	r3, r1
   14e86:	4610      	mov	r0, r2
   14e88:	4619      	mov	r1, r3
   14e8a:	a351      	add	r3, pc, #324	; (adr r3, 14fd0 <estimator_update_ir_estim+0x27c>)
   14e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   14e90:	f002 ff0c 	bl	17cac <__aeabi_ddiv>
   14e94:	4602      	mov	r2, r0
   14e96:	460b      	mov	r3, r1
   14e98:	4610      	mov	r0, r2
   14e9a:	4619      	mov	r1, r3
   14e9c:	f003 f8be 	bl	1801c <__aeabi_d2f>
   14ea0:	4603      	mov	r3, r0
   14ea2:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   14ea4:	e013      	b.n	14ece <estimator_update_ir_estim+0x17a>
   14ea6:	68f8      	ldr	r0, [r7, #12]
   14ea8:	f002 fd82 	bl	179b0 <__aeabi_f2d>
   14eac:	4602      	mov	r2, r0
   14eae:	460b      	mov	r3, r1
   14eb0:	4610      	mov	r0, r2
   14eb2:	4619      	mov	r1, r3
   14eb4:	a340      	add	r3, pc, #256	; (adr r3, 14fb8 <estimator_update_ir_estim+0x264>)
   14eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
   14eba:	f002 fc19 	bl	176f0 <__aeabi_dsub>
   14ebe:	4602      	mov	r2, r0
   14ec0:	460b      	mov	r3, r1
   14ec2:	4610      	mov	r0, r2
   14ec4:	4619      	mov	r1, r3
   14ec6:	f003 f8a9 	bl	1801c <__aeabi_d2f>
   14eca:	4603      	mov	r3, r0
   14ecc:	60fb      	str	r3, [r7, #12]
   14ece:	68f8      	ldr	r0, [r7, #12]
   14ed0:	f002 fd6e 	bl	179b0 <__aeabi_f2d>
   14ed4:	4602      	mov	r2, r0
   14ed6:	460b      	mov	r3, r1
   14ed8:	4610      	mov	r0, r2
   14eda:	4619      	mov	r1, r3
   14edc:	a338      	add	r3, pc, #224	; (adr r3, 14fc0 <estimator_update_ir_estim+0x26c>)
   14ede:	e9d3 2300 	ldrd	r2, r3, [r3]
   14ee2:	f003 f849 	bl	17f78 <__aeabi_dcmpgt>
   14ee6:	4603      	mov	r3, r0
   14ee8:	2b00      	cmp	r3, #0
   14eea:	d1dc      	bne.n	14ea6 <estimator_update_ir_estim+0x152>
   14eec:	e013      	b.n	14f16 <estimator_update_ir_estim+0x1c2>
   14eee:	68f8      	ldr	r0, [r7, #12]
   14ef0:	f002 fd5e 	bl	179b0 <__aeabi_f2d>
   14ef4:	4602      	mov	r2, r0
   14ef6:	460b      	mov	r3, r1
   14ef8:	4610      	mov	r0, r2
   14efa:	4619      	mov	r1, r3
   14efc:	a32e      	add	r3, pc, #184	; (adr r3, 14fb8 <estimator_update_ir_estim+0x264>)
   14efe:	e9d3 2300 	ldrd	r2, r3, [r3]
   14f02:	f002 fbf7 	bl	176f4 <__adddf3>
   14f06:	4602      	mov	r2, r0
   14f08:	460b      	mov	r3, r1
   14f0a:	4610      	mov	r0, r2
   14f0c:	4619      	mov	r1, r3
   14f0e:	f003 f885 	bl	1801c <__aeabi_d2f>
   14f12:	4603      	mov	r3, r0
   14f14:	60fb      	str	r3, [r7, #12]
   14f16:	68f8      	ldr	r0, [r7, #12]
   14f18:	f002 fd4a 	bl	179b0 <__aeabi_f2d>
   14f1c:	4602      	mov	r2, r0
   14f1e:	460b      	mov	r3, r1
   14f20:	4610      	mov	r0, r2
   14f22:	4619      	mov	r1, r3
   14f24:	a328      	add	r3, pc, #160	; (adr r3, 14fc8 <estimator_update_ir_estim+0x274>)
   14f26:	e9d3 2300 	ldrd	r2, r3, [r3]
   14f2a:	f003 f807 	bl	17f3c <__aeabi_dcmplt>
   14f2e:	4603      	mov	r3, r0
   14f30:	2b00      	cmp	r3, #0
   14f32:	d1dc      	bne.n	14eee <estimator_update_ir_estim+0x19a>
      estimator_ir = (float)ir_roll;
   14f34:	f64a 5350 	movw	r3, #44368	; 0xad50
   14f38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f3c:	881b      	ldrh	r3, [r3, #0]
   14f3e:	b21b      	sxth	r3, r3
   14f40:	4618      	mov	r0, r3
   14f42:	f003 f975 	bl	18230 <__aeabi_i2f>
   14f46:	4602      	mov	r2, r0
   14f48:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
   14f4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f50:	601a      	str	r2, [r3, #0]
      estimator_rad = phi;
   14f52:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
   14f56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f5a:	68fa      	ldr	r2, [r7, #12]
   14f5c:	601a      	str	r2, [r3, #0]
      absphi = fabs(phi);
   14f5e:	68f8      	ldr	r0, [r7, #12]
   14f60:	f04f 0100 	mov.w	r1, #0
   14f64:	f003 fb56 	bl	18614 <__aeabi_fcmplt>
   14f68:	4603      	mov	r3, r0
   14f6a:	2b00      	cmp	r3, #0
   14f6c:	d003      	beq.n	14f76 <estimator_update_ir_estim+0x222>
   14f6e:	68fb      	ldr	r3, [r7, #12]
   14f70:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   14f74:	e000      	b.n	14f78 <estimator_update_ir_estim+0x224>
   14f76:	68fb      	ldr	r3, [r7, #12]
   14f78:	607b      	str	r3, [r7, #4]
      if (absphi < 1.0 && absphi > 0.05 && (- ir_contrast/2 < ir_roll && ir_roll < ir_contrast/2)) {
   14f7a:	6878      	ldr	r0, [r7, #4]
   14f7c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   14f80:	f003 fb48 	bl	18614 <__aeabi_fcmplt>
   14f84:	4603      	mov	r3, r0
   14f86:	2b00      	cmp	r3, #0
   14f88:	d100      	bne.n	14f8c <estimator_update_ir_estim+0x238>
   14f8a:	e128      	b.n	151de <estimator_update_ir_estim+0x48a>
   14f8c:	6878      	ldr	r0, [r7, #4]
   14f8e:	f002 fd0f 	bl	179b0 <__aeabi_f2d>
   14f92:	4602      	mov	r2, r0
   14f94:	460b      	mov	r3, r1
   14f96:	4610      	mov	r0, r2
   14f98:	4619      	mov	r1, r3
   14f9a:	a30f      	add	r3, pc, #60	; (adr r3, 14fd8 <estimator_update_ir_estim+0x284>)
   14f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   14fa0:	f002 ffea 	bl	17f78 <__aeabi_dcmpgt>
   14fa4:	4603      	mov	r3, r0
   14fa6:	2b00      	cmp	r3, #0
   14fa8:	d11a      	bne.n	14fe0 <estimator_update_ir_estim+0x28c>
   14faa:	e118      	b.n	151de <estimator_update_ir_estim+0x48a>
   14fac:	f3af 8000 	nop.w
   14fb0:	9999999a 	.word	0x9999999a
   14fb4:	3fb99999 	.word	0x3fb99999
   14fb8:	54442d18 	.word	0x54442d18
   14fbc:	401921fb 	.word	0x401921fb
   14fc0:	54442d18 	.word	0x54442d18
   14fc4:	400921fb 	.word	0x400921fb
   14fc8:	54442d18 	.word	0x54442d18
   14fcc:	c00921fb 	.word	0xc00921fb
   14fd0:	51eb851f 	.word	0x51eb851f
   14fd4:	40239eb8 	.word	0x40239eb8
   14fd8:	9999999a 	.word	0x9999999a
   14fdc:	3fa99999 	.word	0x3fa99999
   14fe0:	f240 2384 	movw	r3, #644	; 0x284
   14fe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fe8:	881b      	ldrh	r3, [r3, #0]
   14fea:	b21b      	sxth	r3, r3
   14fec:	425b      	negs	r3, r3
   14fee:	0fda      	lsrs	r2, r3, #31
   14ff0:	4413      	add	r3, r2
   14ff2:	105b      	asrs	r3, r3, #1
   14ff4:	461a      	mov	r2, r3
   14ff6:	f64a 5350 	movw	r3, #44368	; 0xad50
   14ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ffe:	881b      	ldrh	r3, [r3, #0]
   15000:	b21b      	sxth	r3, r3
   15002:	429a      	cmp	r2, r3
   15004:	f280 8098 	bge.w	15138 <estimator_update_ir_estim+0x3e4>
   15008:	f240 2384 	movw	r3, #644	; 0x284
   1500c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15010:	881b      	ldrh	r3, [r3, #0]
   15012:	b21b      	sxth	r3, r3
   15014:	0fda      	lsrs	r2, r3, #31
   15016:	4413      	add	r3, r2
   15018:	105b      	asrs	r3, r3, #1
   1501a:	b29a      	uxth	r2, r3
   1501c:	f64a 5350 	movw	r3, #44368	; 0xad50
   15020:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15024:	881b      	ldrh	r3, [r3, #0]
   15026:	b212      	sxth	r2, r2
   15028:	b21b      	sxth	r3, r3
   1502a:	429a      	cmp	r2, r3
   1502c:	f340 8084 	ble.w	15138 <estimator_update_ir_estim+0x3e4>
	sum_xy = estimator_rad * estimator_ir + RHO * sum_xy;
   15030:	f24b 03ac 	movw	r3, #45228	; 0xb0ac
   15034:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15038:	681a      	ldr	r2, [r3, #0]
   1503a:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
   1503e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15042:	681b      	ldr	r3, [r3, #0]
   15044:	4610      	mov	r0, r2
   15046:	4619      	mov	r1, r3
   15048:	f003 f946 	bl	182d8 <__aeabi_fmul>
   1504c:	4603      	mov	r3, r0
   1504e:	4618      	mov	r0, r3
   15050:	f002 fcae 	bl	179b0 <__aeabi_f2d>
   15054:	4604      	mov	r4, r0
   15056:	460d      	mov	r5, r1
   15058:	f24b 03bc 	movw	r3, #45244	; 0xb0bc
   1505c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15060:	681b      	ldr	r3, [r3, #0]
   15062:	4618      	mov	r0, r3
   15064:	f002 fca4 	bl	179b0 <__aeabi_f2d>
   15068:	4602      	mov	r2, r0
   1506a:	460b      	mov	r3, r1
   1506c:	4610      	mov	r0, r2
   1506e:	4619      	mov	r1, r3
   15070:	a367      	add	r3, pc, #412	; (adr r3, 15210 <estimator_update_ir_estim+0x4bc>)
   15072:	e9d3 2300 	ldrd	r2, r3, [r3]
   15076:	f002 fcef 	bl	17a58 <__aeabi_dmul>
   1507a:	4602      	mov	r2, r0
   1507c:	460b      	mov	r3, r1
   1507e:	4620      	mov	r0, r4
   15080:	4629      	mov	r1, r5
   15082:	f002 fb37 	bl	176f4 <__adddf3>
   15086:	4602      	mov	r2, r0
   15088:	460b      	mov	r3, r1
   1508a:	4610      	mov	r0, r2
   1508c:	4619      	mov	r1, r3
   1508e:	f002 ffc5 	bl	1801c <__aeabi_d2f>
   15092:	4602      	mov	r2, r0
   15094:	f24b 03bc 	movw	r3, #45244	; 0xb0bc
   15098:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1509c:	601a      	str	r2, [r3, #0]
	sum_xx = estimator_ir * estimator_ir + RHO * sum_xx;
   1509e:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
   150a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150a6:	681a      	ldr	r2, [r3, #0]
   150a8:	f24b 03a8 	movw	r3, #45224	; 0xb0a8
   150ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150b0:	681b      	ldr	r3, [r3, #0]
   150b2:	4610      	mov	r0, r2
   150b4:	4619      	mov	r1, r3
   150b6:	f003 f90f 	bl	182d8 <__aeabi_fmul>
   150ba:	4603      	mov	r3, r0
   150bc:	4618      	mov	r0, r3
   150be:	f002 fc77 	bl	179b0 <__aeabi_f2d>
   150c2:	4604      	mov	r4, r0
   150c4:	460d      	mov	r5, r1
   150c6:	f24b 03c0 	movw	r3, #45248	; 0xb0c0
   150ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150ce:	681b      	ldr	r3, [r3, #0]
   150d0:	4618      	mov	r0, r3
   150d2:	f002 fc6d 	bl	179b0 <__aeabi_f2d>
   150d6:	4602      	mov	r2, r0
   150d8:	460b      	mov	r3, r1
   150da:	4610      	mov	r0, r2
   150dc:	4619      	mov	r1, r3
   150de:	a34c      	add	r3, pc, #304	; (adr r3, 15210 <estimator_update_ir_estim+0x4bc>)
   150e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   150e4:	f002 fcb8 	bl	17a58 <__aeabi_dmul>
   150e8:	4602      	mov	r2, r0
   150ea:	460b      	mov	r3, r1
   150ec:	4620      	mov	r0, r4
   150ee:	4629      	mov	r1, r5
   150f0:	f002 fb00 	bl	176f4 <__adddf3>
   150f4:	4602      	mov	r2, r0
   150f6:	460b      	mov	r3, r1
   150f8:	4610      	mov	r0, r2
   150fa:	4619      	mov	r1, r3
   150fc:	f002 ff8e 	bl	1801c <__aeabi_d2f>
   15100:	4602      	mov	r2, r0
   15102:	f24b 03c0 	movw	r3, #45248	; 0xb0c0
   15106:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1510a:	601a      	str	r2, [r3, #0]
	else if (result > IR_RAD_OF_IR_MAX_VALUE)
	  estimator_rad_of_ir = IR_RAD_OF_IR_MAX_VALUE;
	else
	  estimator_rad_of_ir = result;
#else
	  estimator_rad_of_ir = sum_xy / sum_xx;
   1510c:	f24b 03bc 	movw	r3, #45244	; 0xb0bc
   15110:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15114:	681a      	ldr	r2, [r3, #0]
   15116:	f24b 03c0 	movw	r3, #45248	; 0xb0c0
   1511a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1511e:	681b      	ldr	r3, [r3, #0]
   15120:	4610      	mov	r0, r2
   15122:	4619      	mov	r1, r3
   15124:	f003 f98c 	bl	18440 <__aeabi_fdiv>
   15128:	4603      	mov	r3, r0
   1512a:	461a      	mov	r2, r3
   1512c:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
   15130:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15134:	601a      	str	r2, [r3, #0]
   15136:	e052      	b.n	151de <estimator_update_ir_estim+0x48a>
   15138:	e051      	b.n	151de <estimator_update_ir_estim+0x48a>
#endif
      }
    } 
  } else {
    initialized = TRUE;
   1513a:	f24b 03b0 	movw	r3, #45232	; 0xb0b0
   1513e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15142:	2201      	movs	r2, #1
   15144:	701a      	strb	r2, [r3, #0]
    init_ir2 = ir_contrast;
   15146:	f240 2384 	movw	r3, #644	; 0x284
   1514a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1514e:	881b      	ldrh	r3, [r3, #0]
   15150:	b21b      	sxth	r3, r3
   15152:	4618      	mov	r0, r3
   15154:	f003 f86c 	bl	18230 <__aeabi_i2f>
   15158:	4603      	mov	r3, r0
   1515a:	603b      	str	r3, [r7, #0]
    init_ir2 = init_ir2*init_ir2;
   1515c:	6838      	ldr	r0, [r7, #0]
   1515e:	6839      	ldr	r1, [r7, #0]
   15160:	f003 f8ba 	bl	182d8 <__aeabi_fmul>
   15164:	4603      	mov	r3, r0
   15166:	603b      	str	r3, [r7, #0]
    sum_xy = INIT_WEIGHT * estimator_rad_of_ir * init_ir2;
   15168:	f24b 03a4 	movw	r3, #45220	; 0xb0a4
   1516c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15170:	681b      	ldr	r3, [r3, #0]
   15172:	4618      	mov	r0, r3
   15174:	f002 fc1c 	bl	179b0 <__aeabi_f2d>
   15178:	4602      	mov	r2, r0
   1517a:	460b      	mov	r3, r1
   1517c:	4610      	mov	r0, r2
   1517e:	4619      	mov	r1, r3
   15180:	f04f 0200 	mov.w	r2, #0
   15184:	f04f 0300 	mov.w	r3, #0
   15188:	f2c4 0359 	movt	r3, #16473	; 0x4059
   1518c:	f002 fc64 	bl	17a58 <__aeabi_dmul>
   15190:	4602      	mov	r2, r0
   15192:	460b      	mov	r3, r1
   15194:	4614      	mov	r4, r2
   15196:	461d      	mov	r5, r3
   15198:	6838      	ldr	r0, [r7, #0]
   1519a:	f002 fc09 	bl	179b0 <__aeabi_f2d>
   1519e:	4602      	mov	r2, r0
   151a0:	460b      	mov	r3, r1
   151a2:	4620      	mov	r0, r4
   151a4:	4629      	mov	r1, r5
   151a6:	f002 fc57 	bl	17a58 <__aeabi_dmul>
   151aa:	4602      	mov	r2, r0
   151ac:	460b      	mov	r3, r1
   151ae:	4610      	mov	r0, r2
   151b0:	4619      	mov	r1, r3
   151b2:	f002 ff33 	bl	1801c <__aeabi_d2f>
   151b6:	4602      	mov	r2, r0
   151b8:	f24b 03bc 	movw	r3, #45244	; 0xb0bc
   151bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151c0:	601a      	str	r2, [r3, #0]
    sum_xx = INIT_WEIGHT * init_ir2;
   151c2:	6838      	ldr	r0, [r7, #0]
   151c4:	f04f 0100 	mov.w	r1, #0
   151c8:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   151cc:	f003 f884 	bl	182d8 <__aeabi_fmul>
   151d0:	4603      	mov	r3, r0
   151d2:	461a      	mov	r2, r3
   151d4:	f24b 03c0 	movw	r3, #45248	; 0xb0c0
   151d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151dc:	601a      	str	r2, [r3, #0]
  }

  last_hspeed_dir = estimator_hspeed_dir;
   151de:	f24b 03a0 	movw	r3, #45216	; 0xb0a0
   151e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151e6:	681a      	ldr	r2, [r3, #0]
   151e8:	f24b 03b8 	movw	r3, #45240	; 0xb0b8
   151ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151f0:	601a      	str	r2, [r3, #0]
  last_t = gps_ftow;
   151f2:	f64a 4320 	movw	r3, #44064	; 0xac20
   151f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151fa:	681a      	ldr	r2, [r3, #0]
   151fc:	f24b 03b4 	movw	r3, #45236	; 0xb0b4
   15200:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15204:	601a      	str	r2, [r3, #0]
}
   15206:	3710      	adds	r7, #16
   15208:	46bd      	mov	sp, r7
   1520a:	bdb0      	pop	{r4, r5, r7, pc}
   1520c:	f3af 8000 	nop.w
   15210:	d916872b 	.word	0xd916872b
   15214:	3feff7ce 	.word	0x3feff7ce

00015218 <estimator_update_state_gps>:


void estimator_update_state_gps( void ) {
   15218:	b580      	push	{r7, lr}
   1521a:	af00      	add	r7, sp, #0
  if (GPS_FIX_VALID(gps_mode)) {
   1521c:	f64a 4344 	movw	r3, #44100	; 0xac44
   15220:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15224:	781b      	ldrb	r3, [r3, #0]
   15226:	f003 0320 	and.w	r3, r3, #32
   1522a:	2b00      	cmp	r3, #0
   1522c:	d044      	beq.n	152b8 <estimator_update_state_gps+0xa0>
    EstimatorSetPos(gps_east, gps_north, gps_falt);
   1522e:	f64a 433c 	movw	r3, #44092	; 0xac3c
   15232:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15236:	681a      	ldr	r2, [r3, #0]
   15238:	f24b 0364 	movw	r3, #45156	; 0xb064
   1523c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15240:	601a      	str	r2, [r3, #0]
   15242:	f64a 4340 	movw	r3, #44096	; 0xac40
   15246:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1524a:	681a      	ldr	r2, [r3, #0]
   1524c:	f24b 0368 	movw	r3, #45160	; 0xb068
   15250:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15254:	601a      	str	r2, [r3, #0]
   15256:	f64a 4324 	movw	r3, #44068	; 0xac24
   1525a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1525e:	681a      	ldr	r2, [r3, #0]
   15260:	f24b 036c 	movw	r3, #45164	; 0xb06c
   15264:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15268:	601a      	str	r2, [r3, #0]
    EstimatorSetSpeedPol(gps_fspeed, gps_fcourse, gps_fclimb);
   1526a:	f64a 4328 	movw	r3, #44072	; 0xac28
   1526e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15272:	681a      	ldr	r2, [r3, #0]
   15274:	f24b 039c 	movw	r3, #45212	; 0xb09c
   15278:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1527c:	601a      	str	r2, [r3, #0]
   1527e:	f64a 4330 	movw	r3, #44080	; 0xac30
   15282:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15286:	681a      	ldr	r2, [r3, #0]
   15288:	f24b 03a0 	movw	r3, #45216	; 0xb0a0
   1528c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15290:	601a      	str	r2, [r3, #0]
   15292:	f64a 432c 	movw	r3, #44076	; 0xac2c
   15296:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1529a:	681a      	ldr	r2, [r3, #0]
   1529c:	f24b 0384 	movw	r3, #45188	; 0xb084
   152a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152a4:	601a      	str	r2, [r3, #0]
    
    if (estimator_flight_time)
   152a6:	f24b 0394 	movw	r3, #45204	; 0xb094
   152aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152ae:	881b      	ldrh	r3, [r3, #0]
   152b0:	2b00      	cmp	r3, #0
   152b2:	d001      	beq.n	152b8 <estimator_update_state_gps+0xa0>
      estimator_update_ir_estim();
   152b4:	f7ff fd4e 	bl	14d54 <estimator_update_ir_estim>
  }
}
   152b8:	bd80      	pop	{r7, pc}
   152ba:	bf00      	nop

000152bc <estimator_propagate_state>:

void estimator_propagate_state( void ) {
   152bc:	b480      	push	{r7}
   152be:	af00      	add	r7, sp, #0
  
}
   152c0:	46bd      	mov	sp, r7
   152c2:	f85d 7b04 	ldr.w	r7, [sp], #4
   152c6:	4770      	bx	lr

000152c8 <inflight_calib>:
/* Please DO NOT EDIT */

#ifndef INFLIGHT_CALIB_H
#define INFLIGHT_CALIB_H 

void inflight_calib(bool_t mode_changed) {
   152c8:	b5b0      	push	{r4, r5, r7, lr}
   152ca:	b082      	sub	sp, #8
   152cc:	af00      	add	r7, sp, #0
   152ce:	4603      	mov	r3, r0
   152d0:	71fb      	strb	r3, [r7, #7]
  if (pprz_mode == PPRZ_MODE_AUTO1) {
   152d2:	f64a 2394 	movw	r3, #43668	; 0xaa94
   152d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152da:	781b      	ldrb	r3, [r3, #0]
   152dc:	2b01      	cmp	r3, #1
   152de:	f040 80e0 	bne.w	154a2 <inflight_calib+0x1da>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   152e2:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
   152e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152ea:	781b      	ldrb	r3, [r3, #0]
   152ec:	2b02      	cmp	r3, #2
   152ee:	d168      	bne.n	153c2 <inflight_calib+0xfa>
      static int16_t ir_pitch_neutral_init;
      if (mode_changed) {
   152f0:	79fb      	ldrb	r3, [r7, #7]
   152f2:	2b00      	cmp	r3, #0
   152f4:	d013      	beq.n	1531e <inflight_calib+0x56>
        ir_pitch_neutral_init = ir_pitch_neutral;
   152f6:	f240 2388 	movw	r3, #648	; 0x288
   152fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152fe:	881a      	ldrh	r2, [r3, #0]
   15300:	f24b 03ca 	movw	r3, #45258	; 0xb0ca
   15304:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15308:	801a      	strh	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   1530a:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   1530e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15312:	895a      	ldrh	r2, [r3, #10]
   15314:	f24b 03c6 	movw	r3, #45254	; 0xb0c6
   15318:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1531c:	801a      	strh	r2, [r3, #0]
      }
      ir_pitch_neutral = ParamValInt16(ir_pitch_neutral_init, 60.000000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   1531e:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   15322:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15326:	895b      	ldrh	r3, [r3, #10]
   15328:	b21a      	sxth	r2, r3
   1532a:	f24b 03c6 	movw	r3, #45254	; 0xb0c6
   1532e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15332:	881b      	ldrh	r3, [r3, #0]
   15334:	b21b      	sxth	r3, r3
   15336:	1ad3      	subs	r3, r2, r3
   15338:	4618      	mov	r0, r3
   1533a:	f002 ff79 	bl	18230 <__aeabi_i2f>
   1533e:	4603      	mov	r3, r0
   15340:	4618      	mov	r0, r3
   15342:	f002 fb35 	bl	179b0 <__aeabi_f2d>
   15346:	4602      	mov	r2, r0
   15348:	460b      	mov	r3, r1
   1534a:	4610      	mov	r0, r2
   1534c:	4619      	mov	r1, r3
   1534e:	f04f 0200 	mov.w	r2, #0
   15352:	f04f 0300 	mov.w	r3, #0
   15356:	f2c4 034e 	movt	r3, #16462	; 0x404e
   1535a:	f002 fb7d 	bl	17a58 <__aeabi_dmul>
   1535e:	4602      	mov	r2, r0
   15360:	460b      	mov	r3, r1
   15362:	4610      	mov	r0, r2
   15364:	4619      	mov	r1, r3
   15366:	f04f 0200 	mov.w	r2, #0
   1536a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1536e:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15372:	f002 fc9b 	bl	17cac <__aeabi_ddiv>
   15376:	4602      	mov	r2, r0
   15378:	460b      	mov	r3, r1
   1537a:	4610      	mov	r0, r2
   1537c:	4619      	mov	r1, r3
   1537e:	f002 fe05 	bl	17f8c <__aeabi_d2iz>
   15382:	4603      	mov	r3, r0
   15384:	b29b      	uxth	r3, r3
   15386:	b29a      	uxth	r2, r3
   15388:	f24b 03ca 	movw	r3, #45258	; 0xb0ca
   1538c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15390:	881b      	ldrh	r3, [r3, #0]
   15392:	b29b      	uxth	r3, r3
   15394:	4413      	add	r3, r2
   15396:	b29b      	uxth	r3, r3
   15398:	b29a      	uxth	r2, r3
   1539a:	f240 2388 	movw	r3, #648	; 0x288
   1539e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153a2:	801a      	strh	r2, [r3, #0]
      slider_1_val = (float)ir_pitch_neutral;
   153a4:	f240 2388 	movw	r3, #648	; 0x288
   153a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153ac:	881b      	ldrh	r3, [r3, #0]
   153ae:	b21b      	sxth	r3, r3
   153b0:	4618      	mov	r0, r3
   153b2:	f002 ff3d 	bl	18230 <__aeabi_i2f>
   153b6:	4602      	mov	r2, r0
   153b8:	f64a 23a0 	movw	r3, #43680	; 0xaaa0
   153bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153c0:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   153c2:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
   153c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153ca:	781b      	ldrb	r3, [r3, #0]
   153cc:	2b02      	cmp	r3, #2
   153ce:	d168      	bne.n	154a2 <inflight_calib+0x1da>
      static int16_t ir_roll_neutral_init;
      if (mode_changed) {
   153d0:	79fb      	ldrb	r3, [r7, #7]
   153d2:	2b00      	cmp	r3, #0
   153d4:	d013      	beq.n	153fe <inflight_calib+0x136>
        ir_roll_neutral_init = ir_roll_neutral;
   153d6:	f240 2386 	movw	r3, #646	; 0x286
   153da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153de:	881a      	ldrh	r2, [r3, #0]
   153e0:	f24b 03cc 	movw	r3, #45260	; 0xb0cc
   153e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153e8:	801a      	strh	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   153ea:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   153ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153f2:	899a      	ldrh	r2, [r3, #12]
   153f4:	f24b 03c8 	movw	r3, #45256	; 0xb0c8
   153f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153fc:	801a      	strh	r2, [r3, #0]
      }
      ir_roll_neutral = ParamValInt16(ir_roll_neutral_init, -60.000000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   153fe:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   15402:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15406:	899b      	ldrh	r3, [r3, #12]
   15408:	b21a      	sxth	r2, r3
   1540a:	f24b 03c8 	movw	r3, #45256	; 0xb0c8
   1540e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15412:	881b      	ldrh	r3, [r3, #0]
   15414:	b21b      	sxth	r3, r3
   15416:	1ad3      	subs	r3, r2, r3
   15418:	4618      	mov	r0, r3
   1541a:	f002 ff09 	bl	18230 <__aeabi_i2f>
   1541e:	4603      	mov	r3, r0
   15420:	4618      	mov	r0, r3
   15422:	f002 fac5 	bl	179b0 <__aeabi_f2d>
   15426:	4602      	mov	r2, r0
   15428:	460b      	mov	r3, r1
   1542a:	4610      	mov	r0, r2
   1542c:	4619      	mov	r1, r3
   1542e:	f04f 0200 	mov.w	r2, #0
   15432:	f04f 0300 	mov.w	r3, #0
   15436:	f2cc 034e 	movt	r3, #49230	; 0xc04e
   1543a:	f002 fb0d 	bl	17a58 <__aeabi_dmul>
   1543e:	4602      	mov	r2, r0
   15440:	460b      	mov	r3, r1
   15442:	4610      	mov	r0, r2
   15444:	4619      	mov	r1, r3
   15446:	f04f 0200 	mov.w	r2, #0
   1544a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1544e:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15452:	f002 fc2b 	bl	17cac <__aeabi_ddiv>
   15456:	4602      	mov	r2, r0
   15458:	460b      	mov	r3, r1
   1545a:	4610      	mov	r0, r2
   1545c:	4619      	mov	r1, r3
   1545e:	f002 fd95 	bl	17f8c <__aeabi_d2iz>
   15462:	4603      	mov	r3, r0
   15464:	b29b      	uxth	r3, r3
   15466:	b29a      	uxth	r2, r3
   15468:	f24b 03cc 	movw	r3, #45260	; 0xb0cc
   1546c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15470:	881b      	ldrh	r3, [r3, #0]
   15472:	b29b      	uxth	r3, r3
   15474:	4413      	add	r3, r2
   15476:	b29b      	uxth	r3, r3
   15478:	b29a      	uxth	r2, r3
   1547a:	f240 2386 	movw	r3, #646	; 0x286
   1547e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15482:	801a      	strh	r2, [r3, #0]
      slider_2_val = (float)ir_roll_neutral;
   15484:	f240 2386 	movw	r3, #646	; 0x286
   15488:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1548c:	881b      	ldrh	r3, [r3, #0]
   1548e:	b21b      	sxth	r3, r3
   15490:	4618      	mov	r0, r3
   15492:	f002 fecd 	bl	18230 <__aeabi_i2f>
   15496:	4602      	mov	r2, r0
   15498:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
   1549c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154a0:	601a      	str	r2, [r3, #0]
    }
  }
  if (pprz_mode == PPRZ_MODE_AUTO2) {
   154a2:	f64a 2394 	movw	r3, #43668	; 0xaa94
   154a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154aa:	781b      	ldrb	r3, [r3, #0]
   154ac:	2b02      	cmp	r3, #2
   154ae:	f040 80da 	bne.w	15666 <inflight_calib+0x39e>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   154b2:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
   154b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154ba:	781b      	ldrb	r3, [r3, #0]
   154bc:	2b02      	cmp	r3, #2
   154be:	d165      	bne.n	1558c <inflight_calib+0x2c4>
      static float course_pgain_init;
      if (mode_changed) {
   154c0:	79fb      	ldrb	r3, [r7, #7]
   154c2:	2b00      	cmp	r3, #0
   154c4:	d013      	beq.n	154ee <inflight_calib+0x226>
        course_pgain_init = course_pgain;
   154c6:	f240 239c 	movw	r3, #668	; 0x29c
   154ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154ce:	681a      	ldr	r2, [r3, #0]
   154d0:	f24b 03d0 	movw	r3, #45264	; 0xb0d0
   154d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154d8:	601a      	str	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   154da:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   154de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154e2:	895a      	ldrh	r2, [r3, #10]
   154e4:	f24b 03c6 	movw	r3, #45254	; 0xb0c6
   154e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154ec:	801a      	strh	r2, [r3, #0]
      }
      course_pgain = ParamValFloat(course_pgain_init, 0.100000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   154ee:	f24b 03d0 	movw	r3, #45264	; 0xb0d0
   154f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154f6:	681b      	ldr	r3, [r3, #0]
   154f8:	4618      	mov	r0, r3
   154fa:	f002 fa59 	bl	179b0 <__aeabi_f2d>
   154fe:	4604      	mov	r4, r0
   15500:	460d      	mov	r5, r1
   15502:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   15506:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1550a:	895b      	ldrh	r3, [r3, #10]
   1550c:	b21a      	sxth	r2, r3
   1550e:	f24b 03c6 	movw	r3, #45254	; 0xb0c6
   15512:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15516:	881b      	ldrh	r3, [r3, #0]
   15518:	b21b      	sxth	r3, r3
   1551a:	1ad3      	subs	r3, r2, r3
   1551c:	4618      	mov	r0, r3
   1551e:	f002 fe87 	bl	18230 <__aeabi_i2f>
   15522:	4603      	mov	r3, r0
   15524:	4618      	mov	r0, r3
   15526:	f002 fa43 	bl	179b0 <__aeabi_f2d>
   1552a:	4602      	mov	r2, r0
   1552c:	460b      	mov	r3, r1
   1552e:	4610      	mov	r0, r2
   15530:	4619      	mov	r1, r3
   15532:	a34f      	add	r3, pc, #316	; (adr r3, 15670 <inflight_calib+0x3a8>)
   15534:	e9d3 2300 	ldrd	r2, r3, [r3]
   15538:	f002 fa8e 	bl	17a58 <__aeabi_dmul>
   1553c:	4602      	mov	r2, r0
   1553e:	460b      	mov	r3, r1
   15540:	4610      	mov	r0, r2
   15542:	4619      	mov	r1, r3
   15544:	f04f 0200 	mov.w	r2, #0
   15548:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1554c:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15550:	f002 fbac 	bl	17cac <__aeabi_ddiv>
   15554:	4602      	mov	r2, r0
   15556:	460b      	mov	r3, r1
   15558:	4620      	mov	r0, r4
   1555a:	4629      	mov	r1, r5
   1555c:	f002 f8ca 	bl	176f4 <__adddf3>
   15560:	4602      	mov	r2, r0
   15562:	460b      	mov	r3, r1
   15564:	4610      	mov	r0, r2
   15566:	4619      	mov	r1, r3
   15568:	f002 fd58 	bl	1801c <__aeabi_d2f>
   1556c:	4602      	mov	r2, r0
   1556e:	f240 239c 	movw	r3, #668	; 0x29c
   15572:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15576:	601a      	str	r2, [r3, #0]
      slider_1_val = (float)course_pgain;
   15578:	f240 239c 	movw	r3, #668	; 0x29c
   1557c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15580:	681a      	ldr	r2, [r3, #0]
   15582:	f64a 23a0 	movw	r3, #43680	; 0xaaa0
   15586:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1558a:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   1558c:	f24b 03c4 	movw	r3, #45252	; 0xb0c4
   15590:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15594:	781b      	ldrb	r3, [r3, #0]
   15596:	2b02      	cmp	r3, #2
   15598:	d165      	bne.n	15666 <inflight_calib+0x39e>
      static float max_roll_init;
      if (mode_changed) {
   1559a:	79fb      	ldrb	r3, [r7, #7]
   1559c:	2b00      	cmp	r3, #0
   1559e:	d013      	beq.n	155c8 <inflight_calib+0x300>
        max_roll_init = max_roll;
   155a0:	f240 23a0 	movw	r3, #672	; 0x2a0
   155a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155a8:	681a      	ldr	r2, [r3, #0]
   155aa:	f24b 03d4 	movw	r3, #45268	; 0xb0d4
   155ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155b2:	601a      	str	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   155b4:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   155b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155bc:	899a      	ldrh	r2, [r3, #12]
   155be:	f24b 03c8 	movw	r3, #45256	; 0xb0c8
   155c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155c6:	801a      	strh	r2, [r3, #0]
      }
      max_roll = ParamValFloat(max_roll_init, -0.200000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   155c8:	f24b 03d4 	movw	r3, #45268	; 0xb0d4
   155cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155d0:	681b      	ldr	r3, [r3, #0]
   155d2:	4618      	mov	r0, r3
   155d4:	f002 f9ec 	bl	179b0 <__aeabi_f2d>
   155d8:	4604      	mov	r4, r0
   155da:	460d      	mov	r5, r1
   155dc:	f64a 33b8 	movw	r3, #43960	; 0xabb8
   155e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155e4:	899b      	ldrh	r3, [r3, #12]
   155e6:	b21a      	sxth	r2, r3
   155e8:	f24b 03c8 	movw	r3, #45256	; 0xb0c8
   155ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155f0:	881b      	ldrh	r3, [r3, #0]
   155f2:	b21b      	sxth	r3, r3
   155f4:	1ad3      	subs	r3, r2, r3
   155f6:	4618      	mov	r0, r3
   155f8:	f002 fe1a 	bl	18230 <__aeabi_i2f>
   155fc:	4603      	mov	r3, r0
   155fe:	4618      	mov	r0, r3
   15600:	f002 f9d6 	bl	179b0 <__aeabi_f2d>
   15604:	4602      	mov	r2, r0
   15606:	460b      	mov	r3, r1
   15608:	4610      	mov	r0, r2
   1560a:	4619      	mov	r1, r3
   1560c:	a31a      	add	r3, pc, #104	; (adr r3, 15678 <inflight_calib+0x3b0>)
   1560e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15612:	f002 fa21 	bl	17a58 <__aeabi_dmul>
   15616:	4602      	mov	r2, r0
   15618:	460b      	mov	r3, r1
   1561a:	4610      	mov	r0, r2
   1561c:	4619      	mov	r1, r3
   1561e:	f04f 0200 	mov.w	r2, #0
   15622:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15626:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   1562a:	f002 fb3f 	bl	17cac <__aeabi_ddiv>
   1562e:	4602      	mov	r2, r0
   15630:	460b      	mov	r3, r1
   15632:	4620      	mov	r0, r4
   15634:	4629      	mov	r1, r5
   15636:	f002 f85d 	bl	176f4 <__adddf3>
   1563a:	4602      	mov	r2, r0
   1563c:	460b      	mov	r3, r1
   1563e:	4610      	mov	r0, r2
   15640:	4619      	mov	r1, r3
   15642:	f002 fceb 	bl	1801c <__aeabi_d2f>
   15646:	4602      	mov	r2, r0
   15648:	f240 23a0 	movw	r3, #672	; 0x2a0
   1564c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15650:	601a      	str	r2, [r3, #0]
      slider_2_val = (float)max_roll;
   15652:	f240 23a0 	movw	r3, #672	; 0x2a0
   15656:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1565a:	681a      	ldr	r2, [r3, #0]
   1565c:	f64a 23a4 	movw	r3, #43684	; 0xaaa4
   15660:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15664:	601a      	str	r2, [r3, #0]
    }
  }
}
   15666:	3708      	adds	r7, #8
   15668:	46bd      	mov	sp, r7
   1566a:	bdb0      	pop	{r4, r5, r7, pc}
   1566c:	f3af 8000 	nop.w
   15670:	9999999a 	.word	0x9999999a
   15674:	3fb99999 	.word	0x3fb99999
   15678:	9999999a 	.word	0x9999999a
   1567c:	bfc99999 	.word	0xbfc99999

00015680 <pp_atan2>:
 *
 */
#include <math.h>

double pp_atan2(double x, double y)
{
   15680:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   15684:	b08e      	sub	sp, #56	; 0x38
   15686:	af00      	add	r7, sp, #0
   15688:	e9c7 0102 	strd	r0, r1, [r7, #8]
   1568c:	e9c7 2300 	strd	r2, r3, [r7]
	double coeff_1 = M_PI/4;
   15690:	a357      	add	r3, pc, #348	; (adr r3, 157f0 <pp_atan2+0x170>)
   15692:	e9d3 2300 	ldrd	r2, r3, [r3]
   15696:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double coeff_2 = 3*coeff_1;
   1569a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   1569e:	f04f 0200 	mov.w	r2, #0
   156a2:	f04f 0300 	mov.w	r3, #0
   156a6:	f2c4 0308 	movt	r3, #16392	; 0x4008
   156aa:	f002 f9d5 	bl	17a58 <__aeabi_dmul>
   156ae:	4602      	mov	r2, r0
   156b0:	460b      	mov	r3, r1
   156b2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double abs_y = fabs(y)+1e-10;
   156b6:	e9d7 0100 	ldrd	r0, r1, [r7]
   156ba:	f04f 0200 	mov.w	r2, #0
   156be:	f04f 0300 	mov.w	r3, #0
   156c2:	f002 fc3b 	bl	17f3c <__aeabi_dcmplt>
   156c6:	4603      	mov	r3, r0
   156c8:	2b00      	cmp	r3, #0
   156ca:	d009      	beq.n	156e0 <pp_atan2+0x60>
   156cc:	a14a      	add	r1, pc, #296	; (adr r1, 157f8 <pp_atan2+0x178>)
   156ce:	e9d1 0100 	ldrd	r0, r1, [r1]
   156d2:	e9d7 2300 	ldrd	r2, r3, [r7]
   156d6:	f002 f80b 	bl	176f0 <__aeabi_dsub>
   156da:	4602      	mov	r2, r0
   156dc:	460b      	mov	r3, r1
   156de:	e008      	b.n	156f2 <pp_atan2+0x72>
   156e0:	e9d7 0100 	ldrd	r0, r1, [r7]
   156e4:	a344      	add	r3, pc, #272	; (adr r3, 157f8 <pp_atan2+0x178>)
   156e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   156ea:	f002 f803 	bl	176f4 <__adddf3>
   156ee:	4602      	mov	r2, r0
   156f0:	460b      	mov	r3, r1
   156f2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angle, r;
	if(x>0)
   156f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   156fa:	f04f 0200 	mov.w	r2, #0
   156fe:	f04f 0300 	mov.w	r3, #0
   15702:	f002 fc39 	bl	17f78 <__aeabi_dcmpgt>
   15706:	4603      	mov	r3, r0
   15708:	2b00      	cmp	r3, #0
   1570a:	d02a      	beq.n	15762 <pp_atan2+0xe2>
	{
		r = (x - abs_y)/(x + abs_y);
   1570c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15710:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15714:	f001 ffec 	bl	176f0 <__aeabi_dsub>
   15718:	4602      	mov	r2, r0
   1571a:	460b      	mov	r3, r1
   1571c:	4690      	mov	r8, r2
   1571e:	4699      	mov	r9, r3
   15720:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15724:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15728:	f001 ffe4 	bl	176f4 <__adddf3>
   1572c:	4602      	mov	r2, r0
   1572e:	460b      	mov	r3, r1
   15730:	4640      	mov	r0, r8
   15732:	4649      	mov	r1, r9
   15734:	f002 faba 	bl	17cac <__aeabi_ddiv>
   15738:	4602      	mov	r2, r0
   1573a:	460b      	mov	r3, r1
   1573c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_1 - coeff_1*r;
   15740:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15744:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15748:	f002 f986 	bl	17a58 <__aeabi_dmul>
   1574c:	4602      	mov	r2, r0
   1574e:	460b      	mov	r3, r1
   15750:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15754:	f001 ffcc 	bl	176f0 <__aeabi_dsub>
   15758:	4602      	mov	r2, r0
   1575a:	460b      	mov	r3, r1
   1575c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   15760:	e029      	b.n	157b6 <pp_atan2+0x136>
	}
	else
	{
		r = (x + abs_y)/(abs_y - x);
   15762:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15766:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   1576a:	f001 ffc3 	bl	176f4 <__adddf3>
   1576e:	4602      	mov	r2, r0
   15770:	460b      	mov	r3, r1
   15772:	4690      	mov	r8, r2
   15774:	4699      	mov	r9, r3
   15776:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   1577a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1577e:	f001 ffb7 	bl	176f0 <__aeabi_dsub>
   15782:	4602      	mov	r2, r0
   15784:	460b      	mov	r3, r1
   15786:	4640      	mov	r0, r8
   15788:	4649      	mov	r1, r9
   1578a:	f002 fa8f 	bl	17cac <__aeabi_ddiv>
   1578e:	4602      	mov	r2, r0
   15790:	460b      	mov	r3, r1
   15792:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_2 - coeff_1*r;
   15796:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   1579a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1579e:	f002 f95b 	bl	17a58 <__aeabi_dmul>
   157a2:	4602      	mov	r2, r0
   157a4:	460b      	mov	r3, r1
   157a6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   157aa:	f001 ffa1 	bl	176f0 <__aeabi_dsub>
   157ae:	4602      	mov	r2, r0
   157b0:	460b      	mov	r3, r1
   157b2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}
	if(y<0)
   157b6:	e9d7 0100 	ldrd	r0, r1, [r7]
   157ba:	f04f 0200 	mov.w	r2, #0
   157be:	f04f 0300 	mov.w	r3, #0
   157c2:	f002 fbbb 	bl	17f3c <__aeabi_dcmplt>
   157c6:	4603      	mov	r3, r0
   157c8:	2b00      	cmp	r3, #0
   157ca:	d004      	beq.n	157d6 <pp_atan2+0x156>
		return (-angle);
   157cc:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   157ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   157d0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   157d4:	e001      	b.n	157da <pp_atan2+0x15a>
	else
		return angle;
   157d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
   157da:	4622      	mov	r2, r4
   157dc:	462b      	mov	r3, r5
}
   157de:	4610      	mov	r0, r2
   157e0:	4619      	mov	r1, r3
   157e2:	3738      	adds	r7, #56	; 0x38
   157e4:	46bd      	mov	sp, r7
   157e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   157ea:	bf00      	nop
   157ec:	f3af 8000 	nop.w
   157f0:	54442d18 	.word	0x54442d18
   157f4:	3fe921fb 	.word	0x3fe921fb
   157f8:	d9d7bdbb 	.word	0xd9d7bdbb
   157fc:	3ddb7cdf 	.word	0x3ddb7cdf

00015800 <pp_sin>:
 * Range: -pi/2 <= x <= pi/2
 * Precision: +/- .000,000,005
 */
 
double pp_sin(double x)
{
   15800:	b5b0      	push	{r4, r5, r7, lr}
   15802:	b08c      	sub	sp, #48	; 0x30
   15804:	af00      	add	r7, sp, #0
   15806:	e9c7 0100 	strd	r0, r1, [r7]
	double xi, y, q, q2;
	int sign;

	xi = x; sign = 1;
   1580a:	e9d7 2300 	ldrd	r2, r3, [r7]
   1580e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15812:	2301      	movs	r3, #1
   15814:	627b      	str	r3, [r7, #36]	; 0x24
	while (xi < -1.57079632679489661923) xi += 6.28318530717958647692;
   15816:	e00a      	b.n	1582e <pp_sin+0x2e>
   15818:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   1581c:	a35a      	add	r3, pc, #360	; (adr r3, 15988 <pp_sin+0x188>)
   1581e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15822:	f001 ff67 	bl	176f4 <__adddf3>
   15826:	4602      	mov	r2, r0
   15828:	460b      	mov	r3, r1
   1582a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   1582e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15832:	a357      	add	r3, pc, #348	; (adr r3, 15990 <pp_sin+0x190>)
   15834:	e9d3 2300 	ldrd	r2, r3, [r3]
   15838:	f002 fb80 	bl	17f3c <__aeabi_dcmplt>
   1583c:	4603      	mov	r3, r0
   1583e:	2b00      	cmp	r3, #0
   15840:	d1ea      	bne.n	15818 <pp_sin+0x18>
	while (xi > 4.71238898038468985769) xi -= 6.28318530717958647692;
   15842:	e00a      	b.n	1585a <pp_sin+0x5a>
   15844:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15848:	a34f      	add	r3, pc, #316	; (adr r3, 15988 <pp_sin+0x188>)
   1584a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1584e:	f001 ff4f 	bl	176f0 <__aeabi_dsub>
   15852:	4602      	mov	r2, r0
   15854:	460b      	mov	r3, r1
   15856:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   1585a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   1585e:	a34e      	add	r3, pc, #312	; (adr r3, 15998 <pp_sin+0x198>)
   15860:	e9d3 2300 	ldrd	r2, r3, [r3]
   15864:	f002 fb88 	bl	17f78 <__aeabi_dcmpgt>
   15868:	4603      	mov	r3, r0
   1586a:	2b00      	cmp	r3, #0
   1586c:	d1ea      	bne.n	15844 <pp_sin+0x44>
	if (xi > 1.57079632679489661923) {
   1586e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15872:	a34b      	add	r3, pc, #300	; (adr r3, 159a0 <pp_sin+0x1a0>)
   15874:	e9d3 2300 	ldrd	r2, r3, [r3]
   15878:	f002 fb7e 	bl	17f78 <__aeabi_dcmpgt>
   1587c:	4603      	mov	r3, r0
   1587e:	2b00      	cmp	r3, #0
   15880:	d00d      	beq.n	1589e <pp_sin+0x9e>
		xi -= 3.141592653589793238462643;
   15882:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15886:	a348      	add	r3, pc, #288	; (adr r3, 159a8 <pp_sin+0x1a8>)
   15888:	e9d3 2300 	ldrd	r2, r3, [r3]
   1588c:	f001 ff30 	bl	176f0 <__aeabi_dsub>
   15890:	4602      	mov	r2, r0
   15892:	460b      	mov	r3, r1
   15894:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		sign = -1;
   15898:	f04f 33ff 	mov.w	r3, #4294967295
   1589c:	627b      	str	r3, [r7, #36]	; 0x24
	}
	q = xi / 1.57079632679; q2 = q * q;
   1589e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   158a2:	a343      	add	r3, pc, #268	; (adr r3, 159b0 <pp_sin+0x1b0>)
   158a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   158a8:	f002 fa00 	bl	17cac <__aeabi_ddiv>
   158ac:	4602      	mov	r2, r0
   158ae:	460b      	mov	r3, r1
   158b0:	e9c7 2306 	strd	r2, r3, [r7, #24]
   158b4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   158b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   158bc:	f002 f8cc 	bl	17a58 <__aeabi_dmul>
   158c0:	4602      	mov	r2, r0
   158c2:	460b      	mov	r3, r1
   158c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	y = ((((.00015148419  * q2
   158c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   158cc:	a33a      	add	r3, pc, #232	; (adr r3, 159b8 <pp_sin+0x1b8>)
   158ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   158d2:	f002 f8c1 	bl	17a58 <__aeabi_dmul>
   158d6:	4602      	mov	r2, r0
   158d8:	460b      	mov	r3, r1
	      - .00467376557) * q2
   158da:	4610      	mov	r0, r2
   158dc:	4619      	mov	r1, r3
   158de:	a338      	add	r3, pc, #224	; (adr r3, 159c0 <pp_sin+0x1c0>)
   158e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   158e4:	f001 ff04 	bl	176f0 <__aeabi_dsub>
   158e8:	4602      	mov	r2, r0
   158ea:	460b      	mov	r3, r1
   158ec:	4610      	mov	r0, r2
   158ee:	4619      	mov	r1, r3
   158f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   158f4:	f002 f8b0 	bl	17a58 <__aeabi_dmul>
   158f8:	4602      	mov	r2, r0
   158fa:	460b      	mov	r3, r1
	      + .07968967928) * q2
   158fc:	4610      	mov	r0, r2
   158fe:	4619      	mov	r1, r3
   15900:	a331      	add	r3, pc, #196	; (adr r3, 159c8 <pp_sin+0x1c8>)
   15902:	e9d3 2300 	ldrd	r2, r3, [r3]
   15906:	f001 fef5 	bl	176f4 <__adddf3>
   1590a:	4602      	mov	r2, r0
   1590c:	460b      	mov	r3, r1
   1590e:	4610      	mov	r0, r2
   15910:	4619      	mov	r1, r3
   15912:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15916:	f002 f89f 	bl	17a58 <__aeabi_dmul>
   1591a:	4602      	mov	r2, r0
   1591c:	460b      	mov	r3, r1
	      - .64596371106) * q2
   1591e:	4610      	mov	r0, r2
   15920:	4619      	mov	r1, r3
   15922:	a32b      	add	r3, pc, #172	; (adr r3, 159d0 <pp_sin+0x1d0>)
   15924:	e9d3 2300 	ldrd	r2, r3, [r3]
   15928:	f001 fee2 	bl	176f0 <__aeabi_dsub>
   1592c:	4602      	mov	r2, r0
   1592e:	460b      	mov	r3, r1
   15930:	4610      	mov	r0, r2
   15932:	4619      	mov	r1, r3
   15934:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15938:	f002 f88e 	bl	17a58 <__aeabi_dmul>
   1593c:	4602      	mov	r2, r0
   1593e:	460b      	mov	r3, r1
	      +1.57079631847) * q;
   15940:	4610      	mov	r0, r2
   15942:	4619      	mov	r1, r3
   15944:	a324      	add	r3, pc, #144	; (adr r3, 159d8 <pp_sin+0x1d8>)
   15946:	e9d3 2300 	ldrd	r2, r3, [r3]
   1594a:	f001 fed3 	bl	176f4 <__adddf3>
   1594e:	4602      	mov	r2, r0
   15950:	460b      	mov	r3, r1
	if (xi > 1.57079632679489661923) {
		xi -= 3.141592653589793238462643;
		sign = -1;
	}
	q = xi / 1.57079632679; q2 = q * q;
	y = ((((.00015148419  * q2
   15952:	4610      	mov	r0, r2
   15954:	4619      	mov	r1, r3
   15956:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   1595a:	f002 f87d 	bl	17a58 <__aeabi_dmul>
   1595e:	4602      	mov	r2, r0
   15960:	460b      	mov	r3, r1
   15962:	e9c7 2302 	strd	r2, r3, [r7, #8]
	      - .00467376557) * q2
	      + .07968967928) * q2
	      - .64596371106) * q2
	      +1.57079631847) * q;
	return(sign < 0? -y : y);
   15966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15968:	2b00      	cmp	r3, #0
   1596a:	da04      	bge.n	15976 <pp_sin+0x176>
   1596c:	68bc      	ldr	r4, [r7, #8]
   1596e:	68fb      	ldr	r3, [r7, #12]
   15970:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15974:	e001      	b.n	1597a <pp_sin+0x17a>
   15976:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
   1597a:	4622      	mov	r2, r4
   1597c:	462b      	mov	r3, r5
}
   1597e:	4610      	mov	r0, r2
   15980:	4619      	mov	r1, r3
   15982:	3730      	adds	r7, #48	; 0x30
   15984:	46bd      	mov	sp, r7
   15986:	bdb0      	pop	{r4, r5, r7, pc}
   15988:	54442d18 	.word	0x54442d18
   1598c:	401921fb 	.word	0x401921fb
   15990:	54442d18 	.word	0x54442d18
   15994:	bff921fb 	.word	0xbff921fb
   15998:	7f3321d2 	.word	0x7f3321d2
   1599c:	4012d97c 	.word	0x4012d97c
   159a0:	54442d18 	.word	0x54442d18
   159a4:	3ff921fb 	.word	0x3ff921fb
   159a8:	54442d18 	.word	0x54442d18
   159ac:	400921fb 	.word	0x400921fb
   159b0:	5443d6f4 	.word	0x5443d6f4
   159b4:	3ff921fb 	.word	0x3ff921fb
   159b8:	48a890af 	.word	0x48a890af
   159bc:	3f23daf7 	.word	0x3f23daf7
   159c0:	645b6d0e 	.word	0x645b6d0e
   159c4:	3f7324cc 	.word	0x3f7324cc
   159c8:	f65619a5 	.word	0xf65619a5
   159cc:	3fb4668a 	.word	0x3fb4668a
   159d0:	16acf9cd 	.word	0x16acf9cd
   159d4:	3fe4abbc 	.word	0x3fe4abbc
   159d8:	520817f7 	.word	0x520817f7
   159dc:	3ff921fb 	.word	0x3ff921fb

000159e0 <pp_sqrt>:

#define SQRT_PRECISION 5
double pp_sqrt(double n)
{
   159e0:	b480      	push	{r7}
   159e2:	b083      	sub	sp, #12
   159e4:	af00      	add	r7, sp, #0
   159e6:	e9c7 0100 	strd	r0, r1, [r7]
	/* perform the computation */
	for(i = 0; i < SQRT_PRECISION; i++)
		x = (x + n / x) / 2;
	return x;
#endif
}
   159ea:	4610      	mov	r0, r2
   159ec:	4619      	mov	r1, r3
   159ee:	370c      	adds	r7, #12
   159f0:	46bd      	mov	sp, r7
   159f2:	f85d 7b04 	ldr.w	r7, [sp], #4
   159f6:	4770      	bx	lr

000159f8 <fbw_adc_buf_channel>:

uint16_t fbw_adc_samples[ FBW_NB_ADC ];

static struct fbw_adc_buf* buffers[FBW_NB_ADC];

void fbw_adc_buf_channel(uint8_t adc_channel, struct fbw_adc_buf* s) {
   159f8:	b480      	push	{r7}
   159fa:	b083      	sub	sp, #12
   159fc:	af00      	add	r7, sp, #0
   159fe:	4603      	mov	r3, r0
   15a00:	6039      	str	r1, [r7, #0]
   15a02:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   15a04:	79fa      	ldrb	r2, [r7, #7]
   15a06:	f24b 03e8 	movw	r3, #45288	; 0xb0e8
   15a0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a0e:	6839      	ldr	r1, [r7, #0]
   15a10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   15a14:	370c      	adds	r7, #12
   15a16:	46bd      	mov	sp, r7
   15a18:	f85d 7b04 	ldr.w	r7, [sp], #4
   15a1c:	4770      	bx	lr
   15a1e:	bf00      	nop

00015a20 <fbw_adc_init>:

void 
fbw_adc_init( void )
{
   15a20:	b480      	push	{r7}
   15a22:	b083      	sub	sp, #12
   15a24:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   15a26:	f242 0315 	movw	r3, #8213	; 0x2015
   15a2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a2e:	2200      	movs	r2, #0
   15a30:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   15a32:	f242 0314 	movw	r3, #8212	; 0x2014
   15a36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a3a:	2200      	movs	r2, #0
   15a3c:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref */
  ADMUX		= ANALOG_VREF;
   15a3e:	f242 0307 	movw	r3, #8199	; 0x2007
   15a42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a46:	22c0      	movs	r2, #192	; 0xc0
   15a48:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSRA = 0
   15a4a:	f242 0306 	movw	r3, #8198	; 0x2006
   15a4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a52:	22cf      	movs	r2, #207	; 0xcf
   15a54:	701a      	strb	r2, [r3, #0]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   15a56:	2300      	movs	r3, #0
   15a58:	71fb      	strb	r3, [r7, #7]
   15a5a:	e00a      	b.n	15a72 <fbw_adc_init+0x52>
    buffers[i] = (struct fbw_adc_buf*)0;
   15a5c:	79fa      	ldrb	r2, [r7, #7]
   15a5e:	f24b 03e8 	movw	r3, #45288	; 0xb0e8
   15a62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a66:	2100      	movs	r1, #0
   15a68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   15a6c:	79fb      	ldrb	r3, [r7, #7]
   15a6e:	3301      	adds	r3, #1
   15a70:	71fb      	strb	r3, [r7, #7]
   15a72:	79fb      	ldrb	r3, [r7, #7]
   15a74:	2b07      	cmp	r3, #7
   15a76:	d9f1      	bls.n	15a5c <fbw_adc_init+0x3c>
    buffers[i] = (struct fbw_adc_buf*)0;
}
   15a78:	370c      	adds	r7, #12
   15a7a:	46bd      	mov	sp, r7
   15a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
   15a80:	4770      	bx	lr
   15a82:	bf00      	nop

00015a84 <__vector_34>:
#ifdef PAPABENCH_SINGLE
	SIGNAL(SIG_SPM_READY)
#else
	SIGNAL( SIG_INPUT_CAPTURE1 )
#endif
{
   15a84:	b480      	push	{r7}
   15a86:	b083      	sub	sp, #12
   15a88:	af00      	add	r7, sp, #0
  uint16_t		this;
  uint16_t		width;
  static uint8_t		state;
  static uint8_t		sync_start;

  this		= ICR1;
   15a8a:	f242 0326 	movw	r3, #8230	; 0x2026
   15a8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a92:	881b      	ldrh	r3, [r3, #0]
   15a94:	80fb      	strh	r3, [r7, #6]
  width		= this - last;
   15a96:	f24b 1344 	movw	r3, #45380	; 0xb144
   15a9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a9e:	881b      	ldrh	r3, [r3, #0]
   15aa0:	88fa      	ldrh	r2, [r7, #6]
   15aa2:	1ad3      	subs	r3, r2, r3
   15aa4:	80bb      	strh	r3, [r7, #4]
  last		= this;
   15aa6:	f24b 1344 	movw	r3, #45380	; 0xb144
   15aaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15aae:	88fa      	ldrh	r2, [r7, #6]
   15ab0:	801a      	strh	r2, [r3, #0]
  
  if( state == 0 ) {
   15ab2:	f24b 1346 	movw	r3, #45382	; 0xb146
   15ab6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15aba:	781b      	ldrb	r3, [r3, #0]
   15abc:	2b00      	cmp	r3, #0
   15abe:	d11e      	bne.n	15afe <__vector_34+0x7a>
    uint8_t	end = TCNT2;
   15ac0:	f242 0324 	movw	r3, #8228	; 0x2024
   15ac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ac8:	781b      	ldrb	r3, [r3, #0]
   15aca:	70fb      	strb	r3, [r7, #3]
    uint8_t diff = (end - sync_start);
   15acc:	f24b 1347 	movw	r3, #45383	; 0xb147
   15ad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ad4:	781b      	ldrb	r3, [r3, #0]
   15ad6:	78fa      	ldrb	r2, [r7, #3]
   15ad8:	1ad3      	subs	r3, r2, r3
   15ada:	70bb      	strb	r3, [r7, #2]
    sync_start = end;
   15adc:	f24b 1347 	movw	r3, #45383	; 0xb147
   15ae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ae4:	78fa      	ldrb	r2, [r7, #3]
   15ae6:	701a      	strb	r2, [r3, #0]

    /* The frame period of the mc3030 seems to be 25ms. 
     * One pulse lasts from 1.05ms to 2.150ms.
     * Sync pulse is at least 7ms : (7000*CLOCK)/1024 = 109
     */
    if( diff > (uint8_t)(((uint32_t)(7000ul*CLOCK))/1024ul) ) {
   15ae8:	78bb      	ldrb	r3, [r7, #2]
   15aea:	2b6d      	cmp	r3, #109	; 0x6d
   15aec:	d906      	bls.n	15afc <__vector_34+0x78>
      state = 1;
   15aee:	f24b 1346 	movw	r3, #45382	; 0xb146
   15af2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15af6:	2201      	movs	r2, #1
   15af8:	701a      	strb	r2, [r3, #0]
   15afa:	e053      	b.n	15ba4 <__vector_34+0x120>
   15afc:	e052      	b.n	15ba4 <__vector_34+0x120>
    }
  } 
  else {
    /* Read a data pulses */
    if( width < 700ul*CLOCK || width > 2300ul*CLOCK)
   15afe:	88bb      	ldrh	r3, [r7, #4]
   15b00:	f5b3 5f2f 	cmp.w	r3, #11200	; 0x2bc0
   15b04:	d304      	bcc.n	15b10 <__vector_34+0x8c>
   15b06:	88ba      	ldrh	r2, [r7, #4]
   15b08:	f648 73c0 	movw	r3, #36800	; 0x8fc0
   15b0c:	429a      	cmp	r2, r3
   15b0e:	d911      	bls.n	15b34 <__vector_34+0xb0>
      RestartPpmCycle();
   15b10:	f24b 1346 	movw	r3, #45382	; 0xb146
   15b14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b18:	2200      	movs	r2, #0
   15b1a:	701a      	strb	r2, [r3, #0]
   15b1c:	f242 0324 	movw	r3, #8228	; 0x2024
   15b20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b24:	781b      	ldrb	r3, [r3, #0]
   15b26:	b2da      	uxtb	r2, r3
   15b28:	f24b 1347 	movw	r3, #45383	; 0xb147
   15b2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b30:	701a      	strb	r2, [r3, #0]
   15b32:	e038      	b.n	15ba6 <__vector_34+0x122>
    ppm_pulses[state - 1] = width;
   15b34:	f24b 1346 	movw	r3, #45382	; 0xb146
   15b38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b3c:	781b      	ldrb	r3, [r3, #0]
   15b3e:	1e5a      	subs	r2, r3, #1
   15b40:	f24b 1308 	movw	r3, #45320	; 0xb108
   15b44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b48:	88b9      	ldrh	r1, [r7, #4]
   15b4a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (state >= PPM_NB_PULSES) {
   15b4e:	f24b 1346 	movw	r3, #45382	; 0xb146
   15b52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b56:	781b      	ldrb	r3, [r3, #0]
   15b58:	2b08      	cmp	r3, #8
   15b5a:	d917      	bls.n	15b8c <__vector_34+0x108>
      ppm_valid	= 1;
   15b5c:	f24b 1343 	movw	r3, #45379	; 0xb143
   15b60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b64:	2201      	movs	r2, #1
   15b66:	701a      	strb	r2, [r3, #0]
      RestartPpmCycle();
   15b68:	f24b 1346 	movw	r3, #45382	; 0xb146
   15b6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b70:	2200      	movs	r2, #0
   15b72:	701a      	strb	r2, [r3, #0]
   15b74:	f242 0324 	movw	r3, #8228	; 0x2024
   15b78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b7c:	781b      	ldrb	r3, [r3, #0]
   15b7e:	b2da      	uxtb	r2, r3
   15b80:	f24b 1347 	movw	r3, #45383	; 0xb147
   15b84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b88:	701a      	strb	r2, [r3, #0]
   15b8a:	e00c      	b.n	15ba6 <__vector_34+0x122>
    } else 
      state++;
   15b8c:	f24b 1346 	movw	r3, #45382	; 0xb146
   15b90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b94:	781b      	ldrb	r3, [r3, #0]
   15b96:	3301      	adds	r3, #1
   15b98:	b2da      	uxtb	r2, r3
   15b9a:	f24b 1346 	movw	r3, #45382	; 0xb146
   15b9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ba2:	701a      	strb	r2, [r3, #0]
  }
  return;
   15ba4:	bf00      	nop
}
   15ba6:	370c      	adds	r7, #12
   15ba8:	46bd      	mov	sp, r7
   15baa:	f85d 7b04 	ldr.w	r7, [sp], #4
   15bae:	4770      	bx	lr

00015bb0 <last_radio_from_ppm>:

/* Copy from the ppm receiving buffer to the buffer sent to mcu0 */
void last_radio_from_ppm() {
   15bb0:	b590      	push	{r4, r7, lr}
   15bb2:	b083      	sub	sp, #12
   15bb4:	af00      	add	r7, sp, #0
  LastRadioFromPpm()
   15bb6:	f24b 1308 	movw	r3, #45320	; 0xb108
   15bba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15bbe:	881b      	ldrh	r3, [r3, #0]
   15bc0:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   15bc4:	b29b      	uxth	r3, r3
   15bc6:	80fb      	strh	r3, [r7, #6]
   15bc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15bcc:	4618      	mov	r0, r3
   15bce:	f002 fb2f 	bl	18230 <__aeabi_i2f>
   15bd2:	4603      	mov	r3, r0
   15bd4:	4618      	mov	r0, r3
   15bd6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   15bda:	f002 fb7d 	bl	182d8 <__aeabi_fmul>
   15bde:	4603      	mov	r3, r0
   15be0:	4618      	mov	r0, r3
   15be2:	f002 fd3f 	bl	18664 <__aeabi_f2iz>
   15be6:	4603      	mov	r3, r0
   15be8:	b29a      	uxth	r2, r3
   15bea:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15bee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15bf2:	801a      	strh	r2, [r3, #0]
   15bf4:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15bfc:	881b      	ldrh	r3, [r3, #0]
   15bfe:	b21b      	sxth	r3, r3
   15c00:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15c04:	dd07      	ble.n	15c16 <last_radio_from_ppm+0x66>
   15c06:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15c0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c0e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15c12:	801a      	strh	r2, [r3, #0]
   15c14:	e00d      	b.n	15c32 <last_radio_from_ppm+0x82>
   15c16:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15c1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c1e:	881b      	ldrh	r3, [r3, #0]
   15c20:	b21b      	sxth	r3, r3
   15c22:	2b00      	cmp	r3, #0
   15c24:	da05      	bge.n	15c32 <last_radio_from_ppm+0x82>
   15c26:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15c2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c2e:	2200      	movs	r2, #0
   15c30:	801a      	strh	r2, [r3, #0]
   15c32:	f24b 1308 	movw	r3, #45320	; 0xb108
   15c36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c3a:	885b      	ldrh	r3, [r3, #2]
   15c3c:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15c40:	b29b      	uxth	r3, r3
   15c42:	80fb      	strh	r3, [r7, #6]
   15c44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15c48:	4618      	mov	r0, r3
   15c4a:	f002 faf1 	bl	18230 <__aeabi_i2f>
   15c4e:	4603      	mov	r3, r0
   15c50:	4618      	mov	r0, r3
   15c52:	f002 fd07 	bl	18664 <__aeabi_f2iz>
   15c56:	4603      	mov	r3, r0
   15c58:	b29a      	uxth	r2, r3
   15c5a:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15c5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c62:	805a      	strh	r2, [r3, #2]
   15c64:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15c68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c6c:	885b      	ldrh	r3, [r3, #2]
   15c6e:	b21b      	sxth	r3, r3
   15c70:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15c74:	dd07      	ble.n	15c86 <last_radio_from_ppm+0xd6>
   15c76:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15c7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c7e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15c82:	805a      	strh	r2, [r3, #2]
   15c84:	e00f      	b.n	15ca6 <last_radio_from_ppm+0xf6>
   15c86:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15c8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c8e:	885b      	ldrh	r3, [r3, #2]
   15c90:	b21b      	sxth	r3, r3
   15c92:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   15c96:	da06      	bge.n	15ca6 <last_radio_from_ppm+0xf6>
   15c98:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ca0:	f64d 2280 	movw	r2, #55936	; 0xda80
   15ca4:	805a      	strh	r2, [r3, #2]
   15ca6:	f24b 1308 	movw	r3, #45320	; 0xb108
   15caa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15cae:	889b      	ldrh	r3, [r3, #4]
   15cb0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15cb4:	b29b      	uxth	r3, r3
   15cb6:	80fb      	strh	r3, [r7, #6]
   15cb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15cbc:	4618      	mov	r0, r3
   15cbe:	f002 fab7 	bl	18230 <__aeabi_i2f>
   15cc2:	4603      	mov	r3, r0
   15cc4:	4618      	mov	r0, r3
   15cc6:	f002 fccd 	bl	18664 <__aeabi_f2iz>
   15cca:	4603      	mov	r3, r0
   15ccc:	b29a      	uxth	r2, r3
   15cce:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15cd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15cd6:	809a      	strh	r2, [r3, #4]
   15cd8:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15cdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ce0:	889b      	ldrh	r3, [r3, #4]
   15ce2:	b21b      	sxth	r3, r3
   15ce4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15ce8:	dd07      	ble.n	15cfa <last_radio_from_ppm+0x14a>
   15cea:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15cee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15cf2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15cf6:	809a      	strh	r2, [r3, #4]
   15cf8:	e00f      	b.n	15d1a <last_radio_from_ppm+0x16a>
   15cfa:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15cfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d02:	889b      	ldrh	r3, [r3, #4]
   15d04:	b21b      	sxth	r3, r3
   15d06:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   15d0a:	da06      	bge.n	15d1a <last_radio_from_ppm+0x16a>
   15d0c:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15d10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d14:	f64d 2280 	movw	r2, #55936	; 0xda80
   15d18:	809a      	strh	r2, [r3, #4]
   15d1a:	f24b 1308 	movw	r3, #45320	; 0xb108
   15d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d22:	88db      	ldrh	r3, [r3, #6]
   15d24:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15d28:	b29b      	uxth	r3, r3
   15d2a:	80fb      	strh	r3, [r7, #6]
   15d2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15d30:	4618      	mov	r0, r3
   15d32:	f002 fa7d 	bl	18230 <__aeabi_i2f>
   15d36:	4603      	mov	r3, r0
   15d38:	4618      	mov	r0, r3
   15d3a:	f002 fc93 	bl	18664 <__aeabi_f2iz>
   15d3e:	4603      	mov	r3, r0
   15d40:	b29a      	uxth	r2, r3
   15d42:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15d46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d4a:	80da      	strh	r2, [r3, #6]
   15d4c:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15d50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d54:	88db      	ldrh	r3, [r3, #6]
   15d56:	b21b      	sxth	r3, r3
   15d58:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15d5c:	dd07      	ble.n	15d6e <last_radio_from_ppm+0x1be>
   15d5e:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15d62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d66:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15d6a:	80da      	strh	r2, [r3, #6]
   15d6c:	e00f      	b.n	15d8e <last_radio_from_ppm+0x1de>
   15d6e:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15d72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d76:	88db      	ldrh	r3, [r3, #6]
   15d78:	b21b      	sxth	r3, r3
   15d7a:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   15d7e:	da06      	bge.n	15d8e <last_radio_from_ppm+0x1de>
   15d80:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15d84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d88:	f64d 2280 	movw	r2, #55936	; 0xda80
   15d8c:	80da      	strh	r2, [r3, #6]
   15d8e:	f24b 1308 	movw	r3, #45320	; 0xb108
   15d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d96:	891b      	ldrh	r3, [r3, #8]
   15d98:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15d9c:	b29b      	uxth	r3, r3
   15d9e:	80fb      	strh	r3, [r7, #6]
   15da0:	f24b 1330 	movw	r3, #45360	; 0xb130
   15da4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15da8:	891b      	ldrh	r3, [r3, #8]
   15daa:	b21b      	sxth	r3, r3
   15dac:	4618      	mov	r0, r3
   15dae:	f002 fa3f 	bl	18230 <__aeabi_i2f>
   15db2:	4604      	mov	r4, r0
   15db4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15db8:	4618      	mov	r0, r3
   15dba:	f002 fa39 	bl	18230 <__aeabi_i2f>
   15dbe:	4603      	mov	r3, r0
   15dc0:	4618      	mov	r0, r3
   15dc2:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   15dc6:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   15dca:	f002 fa85 	bl	182d8 <__aeabi_fmul>
   15dce:	4603      	mov	r3, r0
   15dd0:	4620      	mov	r0, r4
   15dd2:	4619      	mov	r1, r3
   15dd4:	f002 f978 	bl	180c8 <__addsf3>
   15dd8:	4603      	mov	r3, r0
   15dda:	4618      	mov	r0, r3
   15ddc:	f002 fc42 	bl	18664 <__aeabi_f2iz>
   15de0:	4603      	mov	r3, r0
   15de2:	b29a      	uxth	r2, r3
   15de4:	f24b 1330 	movw	r3, #45360	; 0xb130
   15de8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15dec:	811a      	strh	r2, [r3, #8]
   15dee:	f24b 1308 	movw	r3, #45320	; 0xb108
   15df2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15df6:	895b      	ldrh	r3, [r3, #10]
   15df8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15dfc:	b29b      	uxth	r3, r3
   15dfe:	80fb      	strh	r3, [r7, #6]
   15e00:	f24b 1330 	movw	r3, #45360	; 0xb130
   15e04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e08:	895b      	ldrh	r3, [r3, #10]
   15e0a:	b21b      	sxth	r3, r3
   15e0c:	4618      	mov	r0, r3
   15e0e:	f002 fa0f 	bl	18230 <__aeabi_i2f>
   15e12:	4604      	mov	r4, r0
   15e14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15e18:	4618      	mov	r0, r3
   15e1a:	f002 fa09 	bl	18230 <__aeabi_i2f>
   15e1e:	4603      	mov	r3, r0
   15e20:	4618      	mov	r0, r3
   15e22:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   15e26:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   15e2a:	f002 fa55 	bl	182d8 <__aeabi_fmul>
   15e2e:	4603      	mov	r3, r0
   15e30:	4620      	mov	r0, r4
   15e32:	4619      	mov	r1, r3
   15e34:	f002 f948 	bl	180c8 <__addsf3>
   15e38:	4603      	mov	r3, r0
   15e3a:	4618      	mov	r0, r3
   15e3c:	f002 fc12 	bl	18664 <__aeabi_f2iz>
   15e40:	4603      	mov	r3, r0
   15e42:	b29a      	uxth	r2, r3
   15e44:	f24b 1330 	movw	r3, #45360	; 0xb130
   15e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e4c:	815a      	strh	r2, [r3, #10]
   15e4e:	f24b 1308 	movw	r3, #45320	; 0xb108
   15e52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e56:	899b      	ldrh	r3, [r3, #12]
   15e58:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15e5c:	b29b      	uxth	r3, r3
   15e5e:	80fb      	strh	r3, [r7, #6]
   15e60:	f24b 1330 	movw	r3, #45360	; 0xb130
   15e64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e68:	899b      	ldrh	r3, [r3, #12]
   15e6a:	b21b      	sxth	r3, r3
   15e6c:	4618      	mov	r0, r3
   15e6e:	f002 f9df 	bl	18230 <__aeabi_i2f>
   15e72:	4604      	mov	r4, r0
   15e74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15e78:	4618      	mov	r0, r3
   15e7a:	f002 f9d9 	bl	18230 <__aeabi_i2f>
   15e7e:	4603      	mov	r3, r0
   15e80:	4618      	mov	r0, r3
   15e82:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   15e86:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   15e8a:	f002 fa25 	bl	182d8 <__aeabi_fmul>
   15e8e:	4603      	mov	r3, r0
   15e90:	4620      	mov	r0, r4
   15e92:	4619      	mov	r1, r3
   15e94:	f002 f918 	bl	180c8 <__addsf3>
   15e98:	4603      	mov	r3, r0
   15e9a:	4618      	mov	r0, r3
   15e9c:	f002 fbe2 	bl	18664 <__aeabi_f2iz>
   15ea0:	4603      	mov	r3, r0
   15ea2:	b29a      	uxth	r2, r3
   15ea4:	f24b 1330 	movw	r3, #45360	; 0xb130
   15ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15eac:	819a      	strh	r2, [r3, #12]
   15eae:	f24b 1308 	movw	r3, #45320	; 0xb108
   15eb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15eb6:	89db      	ldrh	r3, [r3, #14]
   15eb8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15ebc:	b29b      	uxth	r3, r3
   15ebe:	80fb      	strh	r3, [r7, #6]
   15ec0:	f24b 1330 	movw	r3, #45360	; 0xb130
   15ec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ec8:	89db      	ldrh	r3, [r3, #14]
   15eca:	b21b      	sxth	r3, r3
   15ecc:	4618      	mov	r0, r3
   15ece:	f002 f9af 	bl	18230 <__aeabi_i2f>
   15ed2:	4604      	mov	r4, r0
   15ed4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15ed8:	4618      	mov	r0, r3
   15eda:	f002 f9a9 	bl	18230 <__aeabi_i2f>
   15ede:	4603      	mov	r3, r0
   15ee0:	4618      	mov	r0, r3
   15ee2:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   15ee6:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   15eea:	f002 f9f5 	bl	182d8 <__aeabi_fmul>
   15eee:	4603      	mov	r3, r0
   15ef0:	4620      	mov	r0, r4
   15ef2:	4619      	mov	r1, r3
   15ef4:	f002 f8e8 	bl	180c8 <__addsf3>
   15ef8:	4603      	mov	r3, r0
   15efa:	4618      	mov	r0, r3
   15efc:	f002 fbb2 	bl	18664 <__aeabi_f2iz>
   15f00:	4603      	mov	r3, r0
   15f02:	b29a      	uxth	r2, r3
   15f04:	f24b 1330 	movw	r3, #45360	; 0xb130
   15f08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f0c:	81da      	strh	r2, [r3, #14]
   15f0e:	f24b 1308 	movw	r3, #45320	; 0xb108
   15f12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f16:	8a1b      	ldrh	r3, [r3, #16]
   15f18:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15f1c:	b29b      	uxth	r3, r3
   15f1e:	80fb      	strh	r3, [r7, #6]
   15f20:	f24b 1330 	movw	r3, #45360	; 0xb130
   15f24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f28:	8a1b      	ldrh	r3, [r3, #16]
   15f2a:	b21b      	sxth	r3, r3
   15f2c:	4618      	mov	r0, r3
   15f2e:	f002 f97f 	bl	18230 <__aeabi_i2f>
   15f32:	4604      	mov	r4, r0
   15f34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15f38:	4618      	mov	r0, r3
   15f3a:	f002 f979 	bl	18230 <__aeabi_i2f>
   15f3e:	4603      	mov	r3, r0
   15f40:	4618      	mov	r0, r3
   15f42:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   15f46:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   15f4a:	f002 f9c5 	bl	182d8 <__aeabi_fmul>
   15f4e:	4603      	mov	r3, r0
   15f50:	4620      	mov	r0, r4
   15f52:	4619      	mov	r1, r3
   15f54:	f002 f8b8 	bl	180c8 <__addsf3>
   15f58:	4603      	mov	r3, r0
   15f5a:	4618      	mov	r0, r3
   15f5c:	f002 fb82 	bl	18664 <__aeabi_f2iz>
   15f60:	4603      	mov	r3, r0
   15f62:	b29a      	uxth	r2, r3
   15f64:	f24b 1330 	movw	r3, #45360	; 0xb130
   15f68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f6c:	821a      	strh	r2, [r3, #16]
   15f6e:	f24b 1348 	movw	r3, #45384	; 0xb148
   15f72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f76:	781b      	ldrb	r3, [r3, #0]
   15f78:	3301      	adds	r3, #1
   15f7a:	b2da      	uxtb	r2, r3
   15f7c:	f24b 1348 	movw	r3, #45384	; 0xb148
   15f80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f84:	701a      	strb	r2, [r3, #0]
   15f86:	f24b 1348 	movw	r3, #45384	; 0xb148
   15f8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f8e:	781b      	ldrb	r3, [r3, #0]
   15f90:	2b0a      	cmp	r3, #10
   15f92:	f040 8101 	bne.w	16198 <last_radio_from_ppm+0x5e8>
   15f96:	f24b 1348 	movw	r3, #45384	; 0xb148
   15f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f9e:	2200      	movs	r2, #0
   15fa0:	701a      	strb	r2, [r3, #0]
   15fa2:	f24b 1330 	movw	r3, #45360	; 0xb130
   15fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15faa:	891a      	ldrh	r2, [r3, #8]
   15fac:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fb4:	811a      	strh	r2, [r3, #8]
   15fb6:	f24b 1330 	movw	r3, #45360	; 0xb130
   15fba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fbe:	2200      	movs	r2, #0
   15fc0:	811a      	strh	r2, [r3, #8]
   15fc2:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15fc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fca:	891b      	ldrh	r3, [r3, #8]
   15fcc:	b21b      	sxth	r3, r3
   15fce:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15fd2:	dd07      	ble.n	15fe4 <last_radio_from_ppm+0x434>
   15fd4:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fdc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15fe0:	811a      	strh	r2, [r3, #8]
   15fe2:	e00f      	b.n	16004 <last_radio_from_ppm+0x454>
   15fe4:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15fe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fec:	891b      	ldrh	r3, [r3, #8]
   15fee:	b21b      	sxth	r3, r3
   15ff0:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   15ff4:	da06      	bge.n	16004 <last_radio_from_ppm+0x454>
   15ff6:	f24b 131c 	movw	r3, #45340	; 0xb11c
   15ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ffe:	f64d 2280 	movw	r2, #55936	; 0xda80
   16002:	811a      	strh	r2, [r3, #8]
   16004:	f24b 1330 	movw	r3, #45360	; 0xb130
   16008:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1600c:	895a      	ldrh	r2, [r3, #10]
   1600e:	f24b 131c 	movw	r3, #45340	; 0xb11c
   16012:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16016:	815a      	strh	r2, [r3, #10]
   16018:	f24b 1330 	movw	r3, #45360	; 0xb130
   1601c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16020:	2200      	movs	r2, #0
   16022:	815a      	strh	r2, [r3, #10]
   16024:	f24b 131c 	movw	r3, #45340	; 0xb11c
   16028:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1602c:	895b      	ldrh	r3, [r3, #10]
   1602e:	b21b      	sxth	r3, r3
   16030:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16034:	dd07      	ble.n	16046 <last_radio_from_ppm+0x496>
   16036:	f24b 131c 	movw	r3, #45340	; 0xb11c
   1603a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1603e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16042:	815a      	strh	r2, [r3, #10]
   16044:	e00f      	b.n	16066 <last_radio_from_ppm+0x4b6>
   16046:	f24b 131c 	movw	r3, #45340	; 0xb11c
   1604a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1604e:	895b      	ldrh	r3, [r3, #10]
   16050:	b21b      	sxth	r3, r3
   16052:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16056:	da06      	bge.n	16066 <last_radio_from_ppm+0x4b6>
   16058:	f24b 131c 	movw	r3, #45340	; 0xb11c
   1605c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16060:	f64d 2280 	movw	r2, #55936	; 0xda80
   16064:	815a      	strh	r2, [r3, #10]
   16066:	f24b 1330 	movw	r3, #45360	; 0xb130
   1606a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1606e:	899a      	ldrh	r2, [r3, #12]
   16070:	f24b 131c 	movw	r3, #45340	; 0xb11c
   16074:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16078:	819a      	strh	r2, [r3, #12]
   1607a:	f24b 1330 	movw	r3, #45360	; 0xb130
   1607e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16082:	2200      	movs	r2, #0
   16084:	819a      	strh	r2, [r3, #12]
   16086:	f24b 131c 	movw	r3, #45340	; 0xb11c
   1608a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1608e:	899b      	ldrh	r3, [r3, #12]
   16090:	b21b      	sxth	r3, r3
   16092:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16096:	dd07      	ble.n	160a8 <last_radio_from_ppm+0x4f8>
   16098:	f24b 131c 	movw	r3, #45340	; 0xb11c
   1609c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   160a4:	819a      	strh	r2, [r3, #12]
   160a6:	e00f      	b.n	160c8 <last_radio_from_ppm+0x518>
   160a8:	f24b 131c 	movw	r3, #45340	; 0xb11c
   160ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160b0:	899b      	ldrh	r3, [r3, #12]
   160b2:	b21b      	sxth	r3, r3
   160b4:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   160b8:	da06      	bge.n	160c8 <last_radio_from_ppm+0x518>
   160ba:	f24b 131c 	movw	r3, #45340	; 0xb11c
   160be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160c2:	f64d 2280 	movw	r2, #55936	; 0xda80
   160c6:	819a      	strh	r2, [r3, #12]
   160c8:	f24b 1330 	movw	r3, #45360	; 0xb130
   160cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160d0:	89da      	ldrh	r2, [r3, #14]
   160d2:	f24b 131c 	movw	r3, #45340	; 0xb11c
   160d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160da:	81da      	strh	r2, [r3, #14]
   160dc:	f24b 1330 	movw	r3, #45360	; 0xb130
   160e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160e4:	2200      	movs	r2, #0
   160e6:	81da      	strh	r2, [r3, #14]
   160e8:	f24b 131c 	movw	r3, #45340	; 0xb11c
   160ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160f0:	89db      	ldrh	r3, [r3, #14]
   160f2:	b21b      	sxth	r3, r3
   160f4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   160f8:	dd07      	ble.n	1610a <last_radio_from_ppm+0x55a>
   160fa:	f24b 131c 	movw	r3, #45340	; 0xb11c
   160fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16102:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16106:	81da      	strh	r2, [r3, #14]
   16108:	e00f      	b.n	1612a <last_radio_from_ppm+0x57a>
   1610a:	f24b 131c 	movw	r3, #45340	; 0xb11c
   1610e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16112:	89db      	ldrh	r3, [r3, #14]
   16114:	b21b      	sxth	r3, r3
   16116:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1611a:	da06      	bge.n	1612a <last_radio_from_ppm+0x57a>
   1611c:	f24b 131c 	movw	r3, #45340	; 0xb11c
   16120:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16124:	f64d 2280 	movw	r2, #55936	; 0xda80
   16128:	81da      	strh	r2, [r3, #14]
   1612a:	f24b 1330 	movw	r3, #45360	; 0xb130
   1612e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16132:	8a1a      	ldrh	r2, [r3, #16]
   16134:	f24b 131c 	movw	r3, #45340	; 0xb11c
   16138:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1613c:	821a      	strh	r2, [r3, #16]
   1613e:	f24b 1330 	movw	r3, #45360	; 0xb130
   16142:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16146:	2200      	movs	r2, #0
   16148:	821a      	strh	r2, [r3, #16]
   1614a:	f24b 131c 	movw	r3, #45340	; 0xb11c
   1614e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16152:	8a1b      	ldrh	r3, [r3, #16]
   16154:	b21b      	sxth	r3, r3
   16156:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1615a:	dd07      	ble.n	1616c <last_radio_from_ppm+0x5bc>
   1615c:	f24b 131c 	movw	r3, #45340	; 0xb11c
   16160:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16164:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16168:	821a      	strh	r2, [r3, #16]
   1616a:	e00f      	b.n	1618c <last_radio_from_ppm+0x5dc>
   1616c:	f24b 131c 	movw	r3, #45340	; 0xb11c
   16170:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16174:	8a1b      	ldrh	r3, [r3, #16]
   16176:	b21b      	sxth	r3, r3
   16178:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1617c:	da06      	bge.n	1618c <last_radio_from_ppm+0x5dc>
   1617e:	f24b 131c 	movw	r3, #45340	; 0xb11c
   16182:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16186:	f64d 2280 	movw	r2, #55936	; 0xda80
   1618a:	821a      	strh	r2, [r3, #16]
   1618c:	f24b 1342 	movw	r3, #45378	; 0xb142
   16190:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16194:	2201      	movs	r2, #1
   16196:	701a      	strb	r2, [r3, #0]
}
   16198:	370c      	adds	r7, #12
   1619a:	46bd      	mov	sp, r7
   1619c:	bd90      	pop	{r4, r7, pc}
   1619e:	bf00      	nop

000161a0 <spi_reset>:
volatile bool_t spi_was_interrupted = FALSE;

static volatile uint8_t idx_buf = 0;
static volatile uint8_t xor_in, xor_out;

void spi_reset(void) {
   161a0:	b480      	push	{r7}
   161a2:	af00      	add	r7, sp, #0
  idx_buf = 0;
   161a4:	f24b 137c 	movw	r3, #45436	; 0xb17c
   161a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161ac:	2200      	movs	r2, #0
   161ae:	701a      	strb	r2, [r3, #0]
  xor_in = 0;
   161b0:	f24b 137d 	movw	r3, #45437	; 0xb17d
   161b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161b8:	2200      	movs	r2, #0
   161ba:	701a      	strb	r2, [r3, #0]
  xor_out = ((uint8_t*)&to_mega128)[idx_buf];
   161bc:	f24b 137c 	movw	r3, #45436	; 0xb17c
   161c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161c4:	781b      	ldrb	r3, [r3, #0]
   161c6:	b2db      	uxtb	r3, r3
   161c8:	461a      	mov	r2, r3
   161ca:	f24b 1364 	movw	r3, #45412	; 0xb164
   161ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161d2:	4413      	add	r3, r2
   161d4:	781a      	ldrb	r2, [r3, #0]
   161d6:	f24b 137e 	movw	r3, #45438	; 0xb17e
   161da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161de:	701a      	strb	r2, [r3, #0]
  SPDR = xor_out;
   161e0:	f242 030f 	movw	r3, #8207	; 0x200f
   161e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161e8:	f24b 127e 	movw	r2, #45438	; 0xb17e
   161ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
   161f0:	7812      	ldrb	r2, [r2, #0]
   161f2:	b2d2      	uxtb	r2, r2
   161f4:	701a      	strb	r2, [r3, #0]
  mega128_receive_valid = FALSE;
   161f6:	f24b 137a 	movw	r3, #45434	; 0xb17a
   161fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161fe:	2200      	movs	r2, #0
   16200:	701a      	strb	r2, [r3, #0]
}
   16202:	46bd      	mov	sp, r7
   16204:	f85d 7b04 	ldr.w	r7, [sp], #4
   16208:	4770      	bx	lr
   1620a:	bf00      	nop

0001620c <fbw_spi_init>:

void fbw_spi_init(void) {
   1620c:	b480      	push	{r7}
   1620e:	af00      	add	r7, sp, #0
  to_mega128.status = 0;
   16210:	f24b 1364 	movw	r3, #45412	; 0xb164
   16214:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16218:	2200      	movs	r2, #0
   1621a:	74da      	strb	r2, [r3, #19]
  to_mega128.nb_err = 0;
   1621c:	f24b 1364 	movw	r3, #45412	; 0xb164
   16220:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16224:	2200      	movs	r2, #0
   16226:	751a      	strb	r2, [r3, #20]

  /* set it pin output */
  //  IT_DDR |= _BV(IT_PIN);

  /* set MISO pin output */
  SPI_DDR |= _BV(SPI_MISO_PIN);
   16228:	f242 0317 	movw	r3, #8215	; 0x2017
   1622c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16230:	f242 0217 	movw	r2, #8215	; 0x2017
   16234:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16238:	7812      	ldrb	r2, [r2, #0]
   1623a:	b2d2      	uxtb	r2, r2
   1623c:	f042 0210 	orr.w	r2, r2, #16
   16240:	b2d2      	uxtb	r2, r2
   16242:	701a      	strb	r2, [r3, #0]
  /* enable SPI, slave, MSB first, sck idle low */
  SPCR = _BV(SPE);
   16244:	f242 030d 	movw	r3, #8205	; 0x200d
   16248:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1624c:	2240      	movs	r2, #64	; 0x40
   1624e:	701a      	strb	r2, [r3, #0]
  /* enable interrupt */
  SPCR |= _BV(SPIE);
   16250:	f242 030d 	movw	r3, #8205	; 0x200d
   16254:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16258:	f242 020d 	movw	r2, #8205	; 0x200d
   1625c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16260:	7812      	ldrb	r2, [r2, #0]
   16262:	b2d2      	uxtb	r2, r2
   16264:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16268:	b2d2      	uxtb	r2, r2
   1626a:	701a      	strb	r2, [r3, #0]
}
   1626c:	46bd      	mov	sp, r7
   1626e:	f85d 7b04 	ldr.w	r7, [sp], #4
   16272:	4770      	bx	lr
   16274:	0000      	movs	r0, r0
	...

00016278 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
   16278:	b480      	push	{r7}
   1627a:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
   1627c:	f242 032f 	movw	r3, #8239	; 0x202f
   16280:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16284:	2200      	movs	r2, #0
   16286:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
   16288:	f242 032e 	movw	r3, #8238	; 0x202e
   1628c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16290:	2201      	movs	r2, #1
   16292:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
   16294:	f242 0325 	movw	r3, #8229	; 0x2025
   16298:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1629c:	2207      	movs	r2, #7
   1629e:	701a      	strb	r2, [r3, #0]
}
   162a0:	46bd      	mov	sp, r7
   162a2:	f85d 7b04 	ldr.w	r7, [sp], #4
   162a6:	4770      	bx	lr

000162a8 <ppm_init>:
 *
 * JR might be rising edge clocked; set that as an option
 */
static inline void
ppm_init( void )
{
   162a8:	b480      	push	{r7}
   162aa:	af00      	add	r7, sp, #0
#if   PPM_RX_TYPE == RXFUTABA
  cbi( TCCR1B, ICES1 );
   162ac:	f242 032e 	movw	r3, #8238	; 0x202e
   162b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162b4:	f242 022e 	movw	r2, #8238	; 0x202e
   162b8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   162bc:	7812      	ldrb	r2, [r2, #0]
   162be:	b2d2      	uxtb	r2, r2
   162c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   162c4:	b2d2      	uxtb	r2, r2
   162c6:	701a      	strb	r2, [r3, #0]
#else
#	error "ppm.h: Unknown receiver type in PPM_RX_TYPE"
#endif

  /* No noise cancelation */
  sbi( TCCR1B, ICNC1 );
   162c8:	f242 032e 	movw	r3, #8238	; 0x202e
   162cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162d0:	f242 022e 	movw	r2, #8238	; 0x202e
   162d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   162d8:	7812      	ldrb	r2, [r2, #0]
   162da:	b2d2      	uxtb	r2, r2
   162dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
   162e0:	b2d2      	uxtb	r2, r2
   162e2:	701a      	strb	r2, [r3, #0]
  
  /* Set ICP to input, no internal pull up */
  cbi( PPM_DDR, PPM_PIN);
   162e4:	f242 0317 	movw	r3, #8215	; 0x2017
   162e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162ec:	f242 0217 	movw	r2, #8215	; 0x2017
   162f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   162f4:	7812      	ldrb	r2, [r2, #0]
   162f6:	b2d2      	uxtb	r2, r2
   162f8:	f022 0201 	bic.w	r2, r2, #1
   162fc:	b2d2      	uxtb	r2, r2
   162fe:	701a      	strb	r2, [r3, #0]
  
  /* Enable interrupt on input capture */
  sbi( TIMSK, TICIE1 );
   16300:	f242 0337 	movw	r3, #8247	; 0x2037
   16304:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16308:	f242 0237 	movw	r2, #8247	; 0x2037
   1630c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16310:	7812      	ldrb	r2, [r2, #0]
   16312:	b2d2      	uxtb	r2, r2
   16314:	f042 0220 	orr.w	r2, r2, #32
   16318:	b2d2      	uxtb	r2, r2
   1631a:	701a      	strb	r2, [r3, #0]
}
   1631c:	46bd      	mov	sp, r7
   1631e:	f85d 7b04 	ldr.w	r7, [sp], #4
   16322:	4770      	bx	lr

00016324 <to_autopilot_from_last_radio>:
/*   uart_transmit('\n'); */
/* } */


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
   16324:	b580      	push	{r7, lr}
   16326:	b082      	sub	sp, #8
   16328:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   1632a:	2300      	movs	r3, #0
   1632c:	71fb      	strb	r3, [r7, #7]
   1632e:	e010      	b.n	16352 <to_autopilot_from_last_radio+0x2e>
     to_mega128.channels[i] = last_radio[i];
   16330:	79fa      	ldrb	r2, [r7, #7]
   16332:	79f9      	ldrb	r1, [r7, #7]
   16334:	f24b 131c 	movw	r3, #45340	; 0xb11c
   16338:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1633c:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   16340:	f24b 1364 	movw	r3, #45412	; 0xb164
   16344:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16348:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   1634c:	79fb      	ldrb	r3, [r7, #7]
   1634e:	3301      	adds	r3, #1
   16350:	71fb      	strb	r3, [r7, #7]
   16352:	79fb      	ldrb	r3, [r7, #7]
   16354:	2b08      	cmp	r3, #8
   16356:	d9eb      	bls.n	16330 <to_autopilot_from_last_radio+0xc>
     to_mega128.channels[i] = last_radio[i];
  to_mega128.status = (radio_ok ? _BV(STATUS_RADIO_OK) : 0);
   16358:	f24b 230c 	movw	r3, #45580	; 0xb20c
   1635c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16360:	781b      	ldrb	r3, [r3, #0]
   16362:	2b00      	cmp	r3, #0
   16364:	bf0c      	ite	eq
   16366:	2300      	moveq	r3, #0
   16368:	2301      	movne	r3, #1
   1636a:	b2db      	uxtb	r3, r3
   1636c:	461a      	mov	r2, r3
   1636e:	f24b 1364 	movw	r3, #45412	; 0xb164
   16372:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16376:	74da      	strb	r2, [r3, #19]
  to_mega128.status |= (radio_really_lost ? _BV(RADIO_REALLY_LOST) : 0);
   16378:	f24b 1364 	movw	r3, #45412	; 0xb164
   1637c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16380:	7cdb      	ldrb	r3, [r3, #19]
   16382:	b2da      	uxtb	r2, r3
   16384:	f24b 230e 	movw	r3, #45582	; 0xb20e
   16388:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1638c:	781b      	ldrb	r3, [r3, #0]
   1638e:	2b00      	cmp	r3, #0
   16390:	d001      	beq.n	16396 <to_autopilot_from_last_radio+0x72>
   16392:	2302      	movs	r3, #2
   16394:	e000      	b.n	16398 <to_autopilot_from_last_radio+0x74>
   16396:	2300      	movs	r3, #0
   16398:	4313      	orrs	r3, r2
   1639a:	b2db      	uxtb	r3, r3
   1639c:	b2da      	uxtb	r2, r3
   1639e:	f24b 1364 	movw	r3, #45412	; 0xb164
   163a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163a6:	74da      	strb	r2, [r3, #19]
  if (last_radio_contains_avg_channels) {
   163a8:	f24b 1342 	movw	r3, #45378	; 0xb142
   163ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163b0:	781b      	ldrb	r3, [r3, #0]
   163b2:	2b00      	cmp	r3, #0
   163b4:	d012      	beq.n	163dc <to_autopilot_from_last_radio+0xb8>
    to_mega128.status |= _BV(AVERAGED_CHANNELS_SENT);
   163b6:	f24b 1364 	movw	r3, #45412	; 0xb164
   163ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163be:	7cdb      	ldrb	r3, [r3, #19]
   163c0:	f043 0304 	orr.w	r3, r3, #4
   163c4:	b2da      	uxtb	r2, r3
   163c6:	f24b 1364 	movw	r3, #45412	; 0xb164
   163ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163ce:	74da      	strb	r2, [r3, #19]
    last_radio_contains_avg_channels = FALSE;
   163d0:	f24b 1342 	movw	r3, #45378	; 0xb142
   163d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163d8:	2200      	movs	r2, #0
   163da:	701a      	strb	r2, [r3, #0]
  }
  to_mega128.ppm_cpt = last_ppm_cpt;
   163dc:	f24b 2310 	movw	r3, #45584	; 0xb210
   163e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163e4:	781a      	ldrb	r2, [r3, #0]
   163e6:	f24b 1364 	movw	r3, #45412	; 0xb164
   163ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163ee:	749a      	strb	r2, [r3, #18]
#ifndef CTL_BRD_V1_1
  to_mega128.vsupply = VoltageOfAdc(vsupply_adc_buf.sum/AV_NB_SAMPLE) * 10;
   163f0:	f24b 1380 	movw	r3, #45440	; 0xb180
   163f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163f8:	881b      	ldrh	r3, [r3, #0]
   163fa:	4618      	mov	r0, r3
   163fc:	f001 fac6 	bl	1798c <__aeabi_i2d>
   16400:	4602      	mov	r2, r0
   16402:	460b      	mov	r3, r1
   16404:	4610      	mov	r0, r2
   16406:	4619      	mov	r1, r3
   16408:	a31b      	add	r3, pc, #108	; (adr r3, 16478 <to_autopilot_from_last_radio+0x154>)
   1640a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1640e:	f001 fb23 	bl	17a58 <__aeabi_dmul>
   16412:	4602      	mov	r2, r0
   16414:	460b      	mov	r3, r1
   16416:	4610      	mov	r0, r2
   16418:	4619      	mov	r1, r3
   1641a:	f04f 0200 	mov.w	r2, #0
   1641e:	f04f 0300 	mov.w	r3, #0
   16422:	f2c4 0340 	movt	r3, #16448	; 0x4040
   16426:	f001 fc41 	bl	17cac <__aeabi_ddiv>
   1642a:	4602      	mov	r2, r0
   1642c:	460b      	mov	r3, r1
   1642e:	4610      	mov	r0, r2
   16430:	4619      	mov	r1, r3
   16432:	a313      	add	r3, pc, #76	; (adr r3, 16480 <to_autopilot_from_last_radio+0x15c>)
   16434:	e9d3 2300 	ldrd	r2, r3, [r3]
   16438:	f001 f95c 	bl	176f4 <__adddf3>
   1643c:	4602      	mov	r2, r0
   1643e:	460b      	mov	r3, r1
   16440:	4610      	mov	r0, r2
   16442:	4619      	mov	r1, r3
   16444:	f04f 0200 	mov.w	r2, #0
   16448:	f04f 0300 	mov.w	r3, #0
   1644c:	f2c4 0324 	movt	r3, #16420	; 0x4024
   16450:	f001 fb02 	bl	17a58 <__aeabi_dmul>
   16454:	4602      	mov	r2, r0
   16456:	460b      	mov	r3, r1
   16458:	4610      	mov	r0, r2
   1645a:	4619      	mov	r1, r3
   1645c:	f001 fdbe 	bl	17fdc <__aeabi_d2uiz>
   16460:	4603      	mov	r3, r0
   16462:	b2da      	uxtb	r2, r3
   16464:	f24b 1364 	movw	r3, #45412	; 0xb164
   16468:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1646c:	755a      	strb	r2, [r3, #21]
#else
  to_mega128.vsupply = 0;
#endif
}
   1646e:	3708      	adds	r7, #8
   16470:	46bd      	mov	sp, r7
   16472:	bd80      	pop	{r7, pc}
   16474:	f3af 8000 	nop.w
   16478:	1eb851ec 	.word	0x1eb851ec
   1647c:	3f91eb85 	.word	0x3f91eb85
   16480:	020c49ba 	.word	0x020c49ba
   16484:	3fb6872b 	.word	0x3fb6872b

00016488 <send_data_to_autopilot_task>:

void send_data_to_autopilot_task(void)
{
   16488:	b580      	push	{r7, lr}
   1648a:	af00      	add	r7, sp, #0
	//vPrintString("S_2 send_data_to_autopilot_task start! \n\r"); //SunnyBeike

    // modified by wanbo
//   if ( !SpiIsSelected() && spi_was_interrupted ) 
   {
      spi_was_interrupted = FALSE;
   1648c:	f24b 137b 	movw	r3, #45435	; 0xb17b
   16490:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16494:	2200      	movs	r2, #0
   16496:	701a      	strb	r2, [r3, #0]
      to_autopilot_from_last_radio();
   16498:	f7ff ff44 	bl	16324 <to_autopilot_from_last_radio>
      spi_reset();
   1649c:	f7ff fe80 	bl	161a0 <spi_reset>
   }
	//vPrintString("S_2 send_data_to_autopilot_task end! \n\r"); //SunnyBeike

}
   164a0:	bd80      	pop	{r7, pc}
   164a2:	bf00      	nop

000164a4 <fbw_init>:
	static uint8_t _1Hz;
	static uint8_t _20Hz;
#endif
*/

void fbw_init(void) {
   164a4:	b580      	push	{r7, lr}
   164a6:	af00      	add	r7, sp, #0
  uart_init_tx();
   164a8:	f000 fb02 	bl	16ab0 <uart_init_tx>
  uart_print_string("FBW Booting $Id: main.c,v 1.3 2008/10/22 19:41:19 casse Exp $\n\r");
   164ac:	f648 108c 	movw	r0, #35212	; 0x898c
   164b0:	f2c0 0001 	movt	r0, #1
   164b4:	f000 fbda 	bl	16c6c <uart_print_string>

#ifndef CTL_BRD_V1_1
  fbw_adc_init();
   164b8:	f7ff fab2 	bl	15a20 <fbw_adc_init>
  fbw_adc_buf_channel(3, &vsupply_adc_buf);
   164bc:	2003      	movs	r0, #3
   164be:	f24b 1180 	movw	r1, #45440	; 0xb180
   164c2:	f2c2 0100 	movt	r1, #8192	; 0x2000
   164c6:	f7ff fa97 	bl	159f8 <fbw_adc_buf_channel>
  fbw_adc_buf_channel(6, &vservos_adc_buf);
   164ca:	2006      	movs	r0, #6
   164cc:	f24b 11c4 	movw	r1, #45508	; 0xb1c4
   164d0:	f2c2 0100 	movt	r1, #8192	; 0x2000
   164d4:	f7ff fa90 	bl	159f8 <fbw_adc_buf_channel>
#endif
  timer_init();
   164d8:	f7ff fece 	bl	16278 <timer_init>
  servo_init();
   164dc:	f000 f894 	bl	16608 <servo_init>
  ppm_init();
   164e0:	f7ff fee2 	bl	162a8 <ppm_init>
  fbw_spi_init();
   164e4:	f7ff fe92 	bl	1620c <fbw_spi_init>
  //sei(); //FN
}
   164e8:	bd80      	pop	{r7, pc}
   164ea:	bf00      	nop

000164ec <test_ppm_task>:
  return 0;
}
#endif
*/
void test_ppm_task(void)
{
   164ec:	b580      	push	{r7, lr}
   164ee:	af00      	add	r7, sp, #0
	//vPrintString("S_1 test_ppm_task start! \n\r"); //SunnyBeike
    // modified by wanbo
    //if( ppm_valid ) 
    {
      ppm_valid = FALSE;
   164f0:	f24b 1343 	movw	r3, #45379	; 0xb143
   164f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164f8:	2200      	movs	r2, #0
   164fa:	701a      	strb	r2, [r3, #0]
      ppm_cpt++;
   164fc:	f24b 230f 	movw	r3, #45583	; 0xb20f
   16500:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16504:	781b      	ldrb	r3, [r3, #0]
   16506:	3301      	adds	r3, #1
   16508:	b2da      	uxtb	r2, r3
   1650a:	f24b 230f 	movw	r3, #45583	; 0xb20f
   1650e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16512:	701a      	strb	r2, [r3, #0]
      radio_ok = TRUE;
   16514:	f24b 230c 	movw	r3, #45580	; 0xb20c
   16518:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1651c:	2201      	movs	r2, #1
   1651e:	701a      	strb	r2, [r3, #0]
      radio_really_lost = FALSE;
   16520:	f24b 230e 	movw	r3, #45582	; 0xb20e
   16524:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16528:	2200      	movs	r2, #0
   1652a:	701a      	strb	r2, [r3, #0]
      time_since_last_ppm = 0;
   1652c:	f24b 230a 	movw	r3, #45578	; 0xb20a
   16530:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16534:	2200      	movs	r2, #0
   16536:	801a      	strh	r2, [r3, #0]
      last_radio_from_ppm();
   16538:	f7ff fb3a 	bl	15bb0 <last_radio_from_ppm>
      //if (last_radio_contains_avg_channels) 
      {
	mode = MODE_OF_PPRZ(last_radio[RADIO_MODE]);
   1653c:	f24b 131c 	movw	r3, #45340	; 0xb11c
   16540:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16544:	891b      	ldrh	r3, [r3, #8]
   16546:	b21b      	sxth	r3, r3
   16548:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
   1654c:	bfb4      	ite	lt
   1654e:	2300      	movlt	r3, #0
   16550:	2301      	movge	r3, #1
   16552:	b2db      	uxtb	r3, r3
   16554:	461a      	mov	r2, r3
   16556:	f24b 2308 	movw	r3, #45576	; 0xb208
   1655a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1655e:	701a      	strb	r2, [r3, #0]
      }
      if (mode == MODE_MANUAL) 
   16560:	f24b 2308 	movw	r3, #45576	; 0xb208
   16564:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16568:	781b      	ldrb	r3, [r3, #0]
   1656a:	2b00      	cmp	r3, #0
   1656c:	d105      	bne.n	1657a <test_ppm_task+0x8e>
      {
	servo_set(last_radio);
   1656e:	f24b 101c 	movw	r0, #45340	; 0xb11c
   16572:	f2c2 0000 	movt	r0, #8192	; 0x2000
   16576:	f000 f925 	bl	167c4 <servo_set>
      }
    } 
    //else if (mode == MODE_MANUAL && radio_really_lost) 
    {
      mode = MODE_AUTO;
   1657a:	f24b 2308 	movw	r3, #45576	; 0xb208
   1657e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16582:	2201      	movs	r2, #1
   16584:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= STALLED_TIME) 
    {
      radio_ok = FALSE;
   16586:	f24b 230c 	movw	r3, #45580	; 0xb20c
   1658a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1658e:	2200      	movs	r2, #0
   16590:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= REALLY_STALLED_TIME) 
    {
      radio_really_lost = TRUE;
   16592:	f24b 230e 	movw	r3, #45582	; 0xb20e
   16596:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1659a:	2201      	movs	r2, #1
   1659c:	701a      	strb	r2, [r3, #0]
    }
	//vPrintString("S_1 test_ppm_task end! \n\r"); //SunnyBeike

}
   1659e:	bd80      	pop	{r7, pc}

000165a0 <check_failsafe_task>:
void check_failsafe_task(void)
{
   165a0:	b580      	push	{r7, lr}
   165a2:	af00      	add	r7, sp, #0
	//vPrintString("S_9 check_failsafe_task start! \n\r"); //SunnyBeike
    //modified by wanbo
    //if ((mode == MODE_MANUAL && !radio_ok) || (mode == MODE_AUTO && !mega128_ok)) 
    {
      servo_set(failsafe);
   165a4:	f648 1078 	movw	r0, #35192	; 0x8978
   165a8:	f2c0 0001 	movt	r0, #1
   165ac:	f000 f90a 	bl	167c4 <servo_set>
    }
	//vPrintString("S_9 check_failsafe_task end! \n\r"); //SunnyBeike
}
   165b0:	bd80      	pop	{r7, pc}
   165b2:	bf00      	nop

000165b4 <check_mega128_values_task>:
void check_mega128_values_task(void)
{
   165b4:	b580      	push	{r7, lr}
   165b6:	af00      	add	r7, sp, #0
	//vPrintString("S_8 check_mega128_values_task start! \n\r"); //SunnyBeike
// modified by wanbo
     //if ( !SpiIsSelected() && spi_was_interrupted ) 
     {
         if (mega128_receive_valid)
   165b8:	f24b 137a 	movw	r3, #45434	; 0xb17a
   165bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165c0:	781b      	ldrb	r3, [r3, #0]
   165c2:	b2db      	uxtb	r3, r3
   165c4:	2b00      	cmp	r3, #0
   165c6:	d018      	beq.n	165fa <check_mega128_values_task+0x46>
         { 
             time_since_last_mega128 = 0;
   165c8:	f24b 2309 	movw	r3, #45577	; 0xb209
   165cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165d0:	2200      	movs	r2, #0
   165d2:	701a      	strb	r2, [r3, #0]
             mega128_ok = TRUE;
   165d4:	f24b 230d 	movw	r3, #45581	; 0xb20d
   165d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165dc:	2201      	movs	r2, #1
   165de:	701a      	strb	r2, [r3, #0]
             if (mode == MODE_AUTO)
   165e0:	f24b 2308 	movw	r3, #45576	; 0xb208
   165e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165e8:	781b      	ldrb	r3, [r3, #0]
   165ea:	2b01      	cmp	r3, #1
   165ec:	d105      	bne.n	165fa <check_mega128_values_task+0x46>
                 servo_set(from_mega128.channels);
   165ee:	f24b 104c 	movw	r0, #45388	; 0xb14c
   165f2:	f2c2 0000 	movt	r0, #8192	; 0x2000
   165f6:	f000 f8e5 	bl	167c4 <servo_set>
         }
     }
     //if (time_since_last_mega128 == STALLED_TIME) 
     {
         mega128_ok = FALSE;
   165fa:	f24b 230d 	movw	r3, #45581	; 0xb20d
   165fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16602:	2200      	movs	r2, #0
   16604:	701a      	strb	r2, [r3, #0]
     }
	//vPrintString("S_8 check_mega128_values_task end! \n\r"); //SunnyBeike
}
   16606:	bd80      	pop	{r7, pc}

00016608 <servo_init>:
 *
 * Ideally, you can use two decade counters to drive 20 servos.
 */
void
servo_init( void )
{
   16608:	b480      	push	{r7}
   1660a:	b083      	sub	sp, #12
   1660c:	af00      	add	r7, sp, #0
  uint8_t			i;

  /* Configure the reset and clock lines */
  _4017_RESET_DDR |= _BV(_4017_RESET_PIN);
   1660e:	f242 0311 	movw	r3, #8209	; 0x2011
   16612:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16616:	f242 0211 	movw	r2, #8209	; 0x2011
   1661a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1661e:	7812      	ldrb	r2, [r2, #0]
   16620:	b2d2      	uxtb	r2, r2
   16622:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16626:	b2d2      	uxtb	r2, r2
   16628:	701a      	strb	r2, [r3, #0]
  _4017_CLOCK_DDR |= _BV(_4017_CLOCK_PIN);
   1662a:	f242 0317 	movw	r3, #8215	; 0x2017
   1662e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16632:	f242 0217 	movw	r2, #8215	; 0x2017
   16636:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1663a:	7812      	ldrb	r2, [r2, #0]
   1663c:	b2d2      	uxtb	r2, r2
   1663e:	f042 0202 	orr.w	r2, r2, #2
   16642:	b2d2      	uxtb	r2, r2
   16644:	701a      	strb	r2, [r3, #0]

  /* Reset the decade counter */
  sbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16646:	f242 0312 	movw	r3, #8210	; 0x2012
   1664a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1664e:	f242 0212 	movw	r2, #8210	; 0x2012
   16652:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16656:	7812      	ldrb	r2, [r2, #0]
   16658:	b2d2      	uxtb	r2, r2
   1665a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1665e:	b2d2      	uxtb	r2, r2
   16660:	701a      	strb	r2, [r3, #0]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );
   16662:	f242 0318 	movw	r3, #8216	; 0x2018
   16666:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1666a:	f242 0218 	movw	r2, #8216	; 0x2018
   1666e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16672:	7812      	ldrb	r2, [r2, #0]
   16674:	b2d2      	uxtb	r2, r2
   16676:	f022 0202 	bic.w	r2, r2, #2
   1667a:	b2d2      	uxtb	r2, r2
   1667c:	701a      	strb	r2, [r3, #0]

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   1667e:	2300      	movs	r3, #0
   16680:	71fb      	strb	r3, [r7, #7]
   16682:	e00b      	b.n	1669c <servo_init+0x94>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
   16684:	79fa      	ldrb	r2, [r7, #7]
   16686:	f24b 2314 	movw	r3, #45588	; 0xb214
   1668a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1668e:	f645 51c0 	movw	r1, #24000	; 0x5dc0
   16692:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   16696:	79fb      	ldrb	r3, [r7, #7]
   16698:	3301      	adds	r3, #1
   1669a:	71fb      	strb	r3, [r7, #7]
   1669c:	79fb      	ldrb	r3, [r7, #7]
   1669e:	2b09      	cmp	r3, #9
   166a0:	d9f0      	bls.n	16684 <servo_init+0x7c>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
	
  /* Set servos to go off some long time from now */
  SERVO_OCR	= 32768ul;
   166a2:	f242 032a 	movw	r3, #8234	; 0x202a
   166a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   166aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   166ae:	801a      	strh	r2, [r3, #0]

  /*
   * Configure output compare to toggle the output bits.
   */
  TCCR1A |=  _BV(SERVO_COM0 );
   166b0:	f242 032f 	movw	r3, #8239	; 0x202f
   166b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   166b8:	f242 022f 	movw	r2, #8239	; 0x202f
   166bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   166c0:	7812      	ldrb	r2, [r2, #0]
   166c2:	b2d2      	uxtb	r2, r2
   166c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   166c8:	b2d2      	uxtb	r2, r2
   166ca:	701a      	strb	r2, [r3, #0]
	
  /* Clear the interrupt flags in case they are set */
  TIFR = _BV(SERVO_FLAG);
   166cc:	f242 0336 	movw	r3, #8246	; 0x2036
   166d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   166d4:	2210      	movs	r2, #16
   166d6:	701a      	strb	r2, [r3, #0]

  /* Unassert the decade counter reset to start it running */
  cbi( _4017_RESET_PORT, _4017_RESET_PIN );
   166d8:	f242 0312 	movw	r3, #8210	; 0x2012
   166dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   166e0:	f242 0212 	movw	r2, #8210	; 0x2012
   166e4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   166e8:	7812      	ldrb	r2, [r2, #0]
   166ea:	b2d2      	uxtb	r2, r2
   166ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   166f0:	b2d2      	uxtb	r2, r2
   166f2:	701a      	strb	r2, [r3, #0]

  /* Enable our output compare interrupts */
  TIMSK |= _BV(SERVO_ENABLE );
   166f4:	f242 0337 	movw	r3, #8247	; 0x2037
   166f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   166fc:	f242 0237 	movw	r2, #8247	; 0x2037
   16700:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16704:	7812      	ldrb	r2, [r2, #0]
   16706:	b2d2      	uxtb	r2, r2
   16708:	f042 0210 	orr.w	r2, r2, #16
   1670c:	b2d2      	uxtb	r2, r2
   1670e:	701a      	strb	r2, [r3, #0]
}
   16710:	370c      	adds	r7, #12
   16712:	46bd      	mov	sp, r7
   16714:	f85d 7b04 	ldr.w	r7, [sp], #4
   16718:	4770      	bx	lr
   1671a:	bf00      	nop

0001671c <servo_set_one>:

  servo++;
}
#endif

void servo_set_one(uint8_t servo, uint16_t value_us) {
   1671c:	b480      	push	{r7}
   1671e:	b083      	sub	sp, #12
   16720:	af00      	add	r7, sp, #0
   16722:	4602      	mov	r2, r0
   16724:	460b      	mov	r3, r1
   16726:	71fa      	strb	r2, [r7, #7]
   16728:	80bb      	strh	r3, [r7, #4]
  servo_widths[servo] = ChopServo(CLOCK*value_us);
   1672a:	79f9      	ldrb	r1, [r7, #7]
   1672c:	88bb      	ldrh	r3, [r7, #4]
   1672e:	011b      	lsls	r3, r3, #4
   16730:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16734:	d308      	bcc.n	16748 <servo_set_one+0x2c>
   16736:	88bb      	ldrh	r3, [r7, #4]
   16738:	011b      	lsls	r3, r3, #4
   1673a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   1673e:	bf28      	it	cs
   16740:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16744:	b29a      	uxth	r2, r3
   16746:	e001      	b.n	1674c <servo_set_one+0x30>
   16748:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   1674c:	f24b 2314 	movw	r3, #45588	; 0xb214
   16750:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16754:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
   16758:	370c      	adds	r7, #12
   1675a:	46bd      	mov	sp, r7
   1675c:	f85d 7b04 	ldr.w	r7, [sp], #4
   16760:	4770      	bx	lr
   16762:	bf00      	nop

00016764 <servo_transmit>:

void 
servo_transmit(void) {
   16764:	b580      	push	{r7, lr}
   16766:	b082      	sub	sp, #8
   16768:	af00      	add	r7, sp, #0
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);
   1676a:	2000      	movs	r0, #0
   1676c:	f000 f9e6 	bl	16b3c <uart_transmit>
   16770:	2000      	movs	r0, #0
   16772:	f000 f9e3 	bl	16b3c <uart_transmit>

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16776:	2300      	movs	r3, #0
   16778:	71fb      	strb	r3, [r7, #7]
   1677a:	e01a      	b.n	167b2 <servo_transmit+0x4e>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
   1677c:	79fa      	ldrb	r2, [r7, #7]
   1677e:	f24b 2314 	movw	r3, #45588	; 0xb214
   16782:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16786:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   1678a:	0a1b      	lsrs	r3, r3, #8
   1678c:	b29b      	uxth	r3, r3
   1678e:	b2db      	uxtb	r3, r3
   16790:	4618      	mov	r0, r3
   16792:	f000 f9d3 	bl	16b3c <uart_transmit>
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
   16796:	79fa      	ldrb	r2, [r7, #7]
   16798:	f24b 2314 	movw	r3, #45588	; 0xb214
   1679c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167a0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   167a4:	b2db      	uxtb	r3, r3
   167a6:	4618      	mov	r0, r3
   167a8:	f000 f9c8 	bl	16b3c <uart_transmit>
servo_transmit(void) {
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   167ac:	79fb      	ldrb	r3, [r7, #7]
   167ae:	3301      	adds	r3, #1
   167b0:	71fb      	strb	r3, [r7, #7]
   167b2:	79fb      	ldrb	r3, [r7, #7]
   167b4:	2b09      	cmp	r3, #9
   167b6:	d9e1      	bls.n	1677c <servo_transmit+0x18>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
  }
  uart_transmit((uint8_t)'\n');
   167b8:	200a      	movs	r0, #10
   167ba:	f000 f9bf 	bl	16b3c <uart_transmit>
	//vPrintString("S_10 servo_transmit end! \n\r"); //SunnyBeike
}
   167be:	3708      	adds	r7, #8
   167c0:	46bd      	mov	sp, r7
   167c2:	bd80      	pop	{r7, pc}

000167c4 <servo_set>:
 *
 * defines how servos react to radio control or autopilot channels
 *
 */

void servo_set(const pprz_t values[]) {
   167c4:	b5b0      	push	{r4, r5, r7, lr}
   167c6:	b084      	sub	sp, #16
   167c8:	af00      	add	r7, sp, #0
   167ca:	6078      	str	r0, [r7, #4]
  ServoSet(values); /*Generated from airframe.xml */
   167cc:	687b      	ldr	r3, [r7, #4]
   167ce:	330a      	adds	r3, #10
   167d0:	881b      	ldrh	r3, [r3, #0]
   167d2:	b21b      	sxth	r3, r3
   167d4:	005b      	lsls	r3, r3, #1
   167d6:	4618      	mov	r0, r3
   167d8:	f001 f8d8 	bl	1798c <__aeabi_i2d>
   167dc:	4602      	mov	r2, r0
   167de:	460b      	mov	r3, r1
   167e0:	4610      	mov	r0, r2
   167e2:	4619      	mov	r1, r3
   167e4:	a3a6      	add	r3, pc, #664	; (adr r3, 16a80 <servo_set+0x2bc>)
   167e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   167ea:	f001 f935 	bl	17a58 <__aeabi_dmul>
   167ee:	4602      	mov	r2, r0
   167f0:	460b      	mov	r3, r1
   167f2:	4610      	mov	r0, r2
   167f4:	4619      	mov	r1, r3
   167f6:	f001 fbc9 	bl	17f8c <__aeabi_d2iz>
   167fa:	4603      	mov	r3, r0
   167fc:	b29b      	uxth	r3, r3
   167fe:	b29b      	uxth	r3, r3
   16800:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16804:	81fb      	strh	r3, [r7, #14]
   16806:	89fb      	ldrh	r3, [r7, #14]
   16808:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   1680c:	d307      	bcc.n	1681e <servo_set+0x5a>
   1680e:	89fb      	ldrh	r3, [r7, #14]
   16810:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16814:	bf28      	it	cs
   16816:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   1681a:	b29a      	uxth	r2, r3
   1681c:	e001      	b.n	16822 <servo_set+0x5e>
   1681e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16822:	f24b 2314 	movw	r3, #45588	; 0xb214
   16826:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1682a:	80da      	strh	r2, [r3, #6]
   1682c:	687b      	ldr	r3, [r7, #4]
   1682e:	881b      	ldrh	r3, [r3, #0]
   16830:	b21b      	sxth	r3, r3
   16832:	005b      	lsls	r3, r3, #1
   16834:	4618      	mov	r0, r3
   16836:	f001 f8a9 	bl	1798c <__aeabi_i2d>
   1683a:	4602      	mov	r2, r0
   1683c:	460b      	mov	r3, r1
   1683e:	4610      	mov	r0, r2
   16840:	4619      	mov	r1, r3
   16842:	a38f      	add	r3, pc, #572	; (adr r3, 16a80 <servo_set+0x2bc>)
   16844:	e9d3 2300 	ldrd	r2, r3, [r3]
   16848:	f001 f906 	bl	17a58 <__aeabi_dmul>
   1684c:	4602      	mov	r2, r0
   1684e:	460b      	mov	r3, r1
   16850:	4610      	mov	r0, r2
   16852:	4619      	mov	r1, r3
   16854:	f001 fb9a 	bl	17f8c <__aeabi_d2iz>
   16858:	4603      	mov	r3, r0
   1685a:	b29b      	uxth	r3, r3
   1685c:	b29b      	uxth	r3, r3
   1685e:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16862:	81fb      	strh	r3, [r7, #14]
   16864:	89fb      	ldrh	r3, [r7, #14]
   16866:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   1686a:	d307      	bcc.n	1687c <servo_set+0xb8>
   1686c:	89fb      	ldrh	r3, [r7, #14]
   1686e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16872:	bf28      	it	cs
   16874:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16878:	b29a      	uxth	r2, r3
   1687a:	e001      	b.n	16880 <servo_set+0xbc>
   1687c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16880:	f24b 2314 	movw	r3, #45588	; 0xb214
   16884:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16888:	825a      	strh	r2, [r3, #18]
   1688a:	687b      	ldr	r3, [r7, #4]
   1688c:	3304      	adds	r3, #4
   1688e:	881b      	ldrh	r3, [r3, #0]
   16890:	b21b      	sxth	r3, r3
   16892:	4618      	mov	r0, r3
   16894:	f001 f87a 	bl	1798c <__aeabi_i2d>
   16898:	4602      	mov	r2, r0
   1689a:	460b      	mov	r3, r1
   1689c:	4610      	mov	r0, r2
   1689e:	4619      	mov	r1, r3
   168a0:	a379      	add	r3, pc, #484	; (adr r3, 16a88 <servo_set+0x2c4>)
   168a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   168a6:	f001 f8d7 	bl	17a58 <__aeabi_dmul>
   168aa:	4602      	mov	r2, r0
   168ac:	460b      	mov	r3, r1
   168ae:	4610      	mov	r0, r2
   168b0:	4619      	mov	r1, r3
   168b2:	f001 fb6b 	bl	17f8c <__aeabi_d2iz>
   168b6:	4603      	mov	r3, r0
   168b8:	b29b      	uxth	r3, r3
   168ba:	b29b      	uxth	r3, r3
   168bc:	f503 43bf 	add.w	r3, r3, #24448	; 0x5f80
   168c0:	3320      	adds	r3, #32
   168c2:	81fb      	strh	r3, [r7, #14]
   168c4:	89fb      	ldrh	r3, [r7, #14]
   168c6:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   168ca:	d307      	bcc.n	168dc <servo_set+0x118>
   168cc:	89fb      	ldrh	r3, [r7, #14]
   168ce:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   168d2:	bf28      	it	cs
   168d4:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   168d8:	b29a      	uxth	r2, r3
   168da:	e001      	b.n	168e0 <servo_set+0x11c>
   168dc:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   168e0:	f24b 2314 	movw	r3, #45588	; 0xb214
   168e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168e8:	819a      	strh	r2, [r3, #12]
   168ea:	687b      	ldr	r3, [r7, #4]
   168ec:	885b      	ldrh	r3, [r3, #2]
   168ee:	81bb      	strh	r3, [r7, #12]
   168f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   168f4:	2b00      	cmp	r3, #0
   168f6:	dd06      	ble.n	16906 <servo_set+0x142>
   168f8:	f04f 0400 	mov.w	r4, #0
   168fc:	f04f 0500 	mov.w	r5, #0
   16900:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   16904:	e002      	b.n	1690c <servo_set+0x148>
   16906:	a562      	add	r5, pc, #392	; (adr r5, 16a90 <servo_set+0x2cc>)
   16908:	e9d5 4500 	ldrd	r4, r5, [r5]
   1690c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16910:	4618      	mov	r0, r3
   16912:	f001 f83b 	bl	1798c <__aeabi_i2d>
   16916:	4602      	mov	r2, r0
   16918:	460b      	mov	r3, r1
   1691a:	4620      	mov	r0, r4
   1691c:	4629      	mov	r1, r5
   1691e:	f001 f89b 	bl	17a58 <__aeabi_dmul>
   16922:	4602      	mov	r2, r0
   16924:	460b      	mov	r3, r1
   16926:	4610      	mov	r0, r2
   16928:	4619      	mov	r1, r3
   1692a:	a35b      	add	r3, pc, #364	; (adr r3, 16a98 <servo_set+0x2d4>)
   1692c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16930:	f001 f892 	bl	17a58 <__aeabi_dmul>
   16934:	4602      	mov	r2, r0
   16936:	460b      	mov	r3, r1
   16938:	4610      	mov	r0, r2
   1693a:	4619      	mov	r1, r3
   1693c:	f001 fb26 	bl	17f8c <__aeabi_d2iz>
   16940:	4603      	mov	r3, r0
   16942:	b29b      	uxth	r3, r3
   16944:	b29b      	uxth	r3, r3
   16946:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
   1694a:	81fb      	strh	r3, [r7, #14]
   1694c:	89fb      	ldrh	r3, [r7, #14]
   1694e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16952:	d307      	bcc.n	16964 <servo_set+0x1a0>
   16954:	89fb      	ldrh	r3, [r7, #14]
   16956:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   1695a:	bf28      	it	cs
   1695c:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16960:	b29a      	uxth	r2, r3
   16962:	e001      	b.n	16968 <servo_set+0x1a4>
   16964:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16968:	f24b 2314 	movw	r3, #45588	; 0xb214
   1696c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16970:	801a      	strh	r2, [r3, #0]
   16972:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16976:	2b00      	cmp	r3, #0
   16978:	dd03      	ble.n	16982 <servo_set+0x1be>
   1697a:	a545      	add	r5, pc, #276	; (adr r5, 16a90 <servo_set+0x2cc>)
   1697c:	e9d5 4500 	ldrd	r4, r5, [r5]
   16980:	e005      	b.n	1698e <servo_set+0x1ca>
   16982:	f04f 0400 	mov.w	r4, #0
   16986:	f04f 0500 	mov.w	r5, #0
   1698a:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   1698e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16992:	4618      	mov	r0, r3
   16994:	f000 fffa 	bl	1798c <__aeabi_i2d>
   16998:	4602      	mov	r2, r0
   1699a:	460b      	mov	r3, r1
   1699c:	4620      	mov	r0, r4
   1699e:	4629      	mov	r1, r5
   169a0:	f001 f85a 	bl	17a58 <__aeabi_dmul>
   169a4:	4602      	mov	r2, r0
   169a6:	460b      	mov	r3, r1
   169a8:	4610      	mov	r0, r2
   169aa:	4619      	mov	r1, r3
   169ac:	a33c      	add	r3, pc, #240	; (adr r3, 16aa0 <servo_set+0x2dc>)
   169ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   169b2:	f001 f851 	bl	17a58 <__aeabi_dmul>
   169b6:	4602      	mov	r2, r0
   169b8:	460b      	mov	r3, r1
   169ba:	4610      	mov	r0, r2
   169bc:	4619      	mov	r1, r3
   169be:	f001 fae5 	bl	17f8c <__aeabi_d2iz>
   169c2:	4603      	mov	r3, r0
   169c4:	b29b      	uxth	r3, r3
   169c6:	b29b      	uxth	r3, r3
   169c8:	f503 43ce 	add.w	r3, r3, #26368	; 0x6700
   169cc:	3320      	adds	r3, #32
   169ce:	81fb      	strh	r3, [r7, #14]
   169d0:	89fb      	ldrh	r3, [r7, #14]
   169d2:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   169d6:	d307      	bcc.n	169e8 <servo_set+0x224>
   169d8:	89fb      	ldrh	r3, [r7, #14]
   169da:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   169de:	bf28      	it	cs
   169e0:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   169e4:	b29a      	uxth	r2, r3
   169e6:	e001      	b.n	169ec <servo_set+0x228>
   169e8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   169ec:	f24b 2314 	movw	r3, #45588	; 0xb214
   169f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   169f4:	809a      	strh	r2, [r3, #4]
   169f6:	687b      	ldr	r3, [r7, #4]
   169f8:	3306      	adds	r3, #6
   169fa:	881b      	ldrh	r3, [r3, #0]
   169fc:	b21b      	sxth	r3, r3
   169fe:	4618      	mov	r0, r3
   16a00:	f000 ffc4 	bl	1798c <__aeabi_i2d>
   16a04:	4604      	mov	r4, r0
   16a06:	460d      	mov	r5, r1
   16a08:	687b      	ldr	r3, [r7, #4]
   16a0a:	3302      	adds	r3, #2
   16a0c:	881b      	ldrh	r3, [r3, #0]
   16a0e:	b21b      	sxth	r3, r3
   16a10:	4618      	mov	r0, r3
   16a12:	f000 ffbb 	bl	1798c <__aeabi_i2d>
   16a16:	4602      	mov	r2, r0
   16a18:	460b      	mov	r3, r1
   16a1a:	4620      	mov	r0, r4
   16a1c:	4629      	mov	r1, r5
   16a1e:	f000 fe69 	bl	176f4 <__adddf3>
   16a22:	4602      	mov	r2, r0
   16a24:	460b      	mov	r3, r1
   16a26:	4610      	mov	r0, r2
   16a28:	4619      	mov	r1, r3
   16a2a:	a31f      	add	r3, pc, #124	; (adr r3, 16aa8 <servo_set+0x2e4>)
   16a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16a30:	f001 f812 	bl	17a58 <__aeabi_dmul>
   16a34:	4602      	mov	r2, r0
   16a36:	460b      	mov	r3, r1
   16a38:	4610      	mov	r0, r2
   16a3a:	4619      	mov	r1, r3
   16a3c:	f001 faa6 	bl	17f8c <__aeabi_d2iz>
   16a40:	4603      	mov	r3, r0
   16a42:	b29b      	uxth	r3, r3
   16a44:	b29b      	uxth	r3, r3
   16a46:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
   16a4a:	3320      	adds	r3, #32
   16a4c:	81fb      	strh	r3, [r7, #14]
   16a4e:	89fb      	ldrh	r3, [r7, #14]
   16a50:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16a54:	d307      	bcc.n	16a66 <servo_set+0x2a2>
   16a56:	89fb      	ldrh	r3, [r7, #14]
   16a58:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16a5c:	bf28      	it	cs
   16a5e:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16a62:	b29a      	uxth	r2, r3
   16a64:	e001      	b.n	16a6a <servo_set+0x2a6>
   16a66:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16a6a:	f24b 2314 	movw	r3, #45588	; 0xb214
   16a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16a72:	81da      	strh	r2, [r3, #14]
}
   16a74:	3710      	adds	r7, #16
   16a76:	46bd      	mov	sp, r7
   16a78:	bdb0      	pop	{r4, r5, r7, pc}
   16a7a:	bf00      	nop
   16a7c:	f3af 8000 	nop.w
   16a80:	aaaa9ef0 	.word	0xaaaa9ef0
   16a84:	3feaaaaa 	.word	0x3feaaaaa
   16a88:	fc96473e 	.word	0xfc96473e
   16a8c:	3fdfc962 	.word	0x3fdfc962
   16a90:	51eb851f 	.word	0x51eb851f
   16a94:	3fe51eb8 	.word	0x3fe51eb8
   16a98:	9999999a 	.word	0x9999999a
   16a9c:	bfe19999 	.word	0xbfe19999
   16aa0:	aaaa9ef0 	.word	0xaaaa9ef0
   16aa4:	bfe0aaaa 	.word	0xbfe0aaaa
   16aa8:	eeeed77a 	.word	0xeeeed77a
   16aac:	bfdeeeee 	.word	0xbfdeeeee

00016ab0 <uart_init_tx>:
 * UART Baud rate generation settings:
 *
 * With 16.0 MHz clock,UBRR=25  => 38400 baud
 *
 */
void uart_init_tx( void ) {
   16ab0:	b480      	push	{r7}
   16ab2:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRRH = 0; 
   16ab4:	f242 0320 	movw	r3, #8224	; 0x2020
   16ab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16abc:	2200      	movs	r2, #0
   16abe:	701a      	strb	r2, [r3, #0]
  UBRRL = 25; 
   16ac0:	f242 0309 	movw	r3, #8201	; 0x2009
   16ac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ac8:	2219      	movs	r2, #25
   16aca:	701a      	strb	r2, [r3, #0]
  /* single speed */ 
  UCSRA = 0; 
   16acc:	f242 030b 	movw	r3, #8203	; 0x200b
   16ad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ad4:	2200      	movs	r2, #0
   16ad6:	701a      	strb	r2, [r3, #0]
  /* Enable transmitter */ 
  UCSRB = _BV(TXEN); 
   16ad8:	f242 030a 	movw	r3, #8202	; 0x200a
   16adc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ae0:	2208      	movs	r2, #8
   16ae2:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0); 
   16ae4:	f242 0320 	movw	r3, #8224	; 0x2020
   16ae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16aec:	2286      	movs	r2, #134	; 0x86
   16aee:	701a      	strb	r2, [r3, #0]
}
   16af0:	46bd      	mov	sp, r7
   16af2:	f85d 7b04 	ldr.w	r7, [sp], #4
   16af6:	4770      	bx	lr

00016af8 <uart_init_rx>:

void uart_init_rx() {
   16af8:	b480      	push	{r7}
   16afa:	af00      	add	r7, sp, #0
  /* Enable receiver               */ 
  UCSRB |= _BV(RXEN); 
   16afc:	f242 030a 	movw	r3, #8202	; 0x200a
   16b00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b04:	f242 020a 	movw	r2, #8202	; 0x200a
   16b08:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16b0c:	7812      	ldrb	r2, [r2, #0]
   16b0e:	b2d2      	uxtb	r2, r2
   16b10:	f042 0210 	orr.w	r2, r2, #16
   16b14:	b2d2      	uxtb	r2, r2
   16b16:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi( UCSRB, RXCIE ); 
   16b18:	f242 030a 	movw	r3, #8202	; 0x200a
   16b1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b20:	f242 020a 	movw	r2, #8202	; 0x200a
   16b24:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16b28:	7812      	ldrb	r2, [r2, #0]
   16b2a:	b2d2      	uxtb	r2, r2
   16b2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16b30:	b2d2      	uxtb	r2, r2
   16b32:	701a      	strb	r2, [r3, #0]
}
   16b34:	46bd      	mov	sp, r7
   16b36:	f85d 7b04 	ldr.w	r7, [sp], #4
   16b3a:	4770      	bx	lr

00016b3c <uart_transmit>:

void uart_transmit( unsigned char data ) {
   16b3c:	b480      	push	{r7}
   16b3e:	b083      	sub	sp, #12
   16b40:	af00      	add	r7, sp, #0
   16b42:	4603      	mov	r3, r0
   16b44:	71fb      	strb	r3, [r7, #7]
  if (UCSRB & _BV(TXCIE)) {
   16b46:	f242 030a 	movw	r3, #8202	; 0x200a
   16b4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b4e:	781b      	ldrb	r3, [r3, #0]
   16b50:	b2db      	uxtb	r3, r3
   16b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
   16b56:	2b00      	cmp	r3, #0
   16b58:	d028      	beq.n	16bac <uart_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail == tx_head + 1) { /* BUF_SIZE = 256 */
   16b5a:	f24b 2329 	movw	r3, #45609	; 0xb229
   16b5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b62:	781b      	ldrb	r3, [r3, #0]
   16b64:	b2db      	uxtb	r3, r3
   16b66:	461a      	mov	r2, r3
   16b68:	f24b 2328 	movw	r3, #45608	; 0xb228
   16b6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b70:	781b      	ldrb	r3, [r3, #0]
   16b72:	3301      	adds	r3, #1
   16b74:	429a      	cmp	r2, r3
   16b76:	d100      	bne.n	16b7a <uart_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   16b78:	e02c      	b.n	16bd4 <uart_transmit+0x98>
    }
    tx_buf[tx_head] = data;
   16b7a:	f24b 2328 	movw	r3, #45608	; 0xb228
   16b7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b82:	781b      	ldrb	r3, [r3, #0]
   16b84:	461a      	mov	r2, r3
   16b86:	f24b 232c 	movw	r3, #45612	; 0xb22c
   16b8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b8e:	79f9      	ldrb	r1, [r7, #7]
   16b90:	5499      	strb	r1, [r3, r2]
    tx_head++; /* BUF_SIZE = 256 */
   16b92:	f24b 2328 	movw	r3, #45608	; 0xb228
   16b96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b9a:	781b      	ldrb	r3, [r3, #0]
   16b9c:	3301      	adds	r3, #1
   16b9e:	b2da      	uxtb	r2, r3
   16ba0:	f24b 2328 	movw	r3, #45608	; 0xb228
   16ba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ba8:	701a      	strb	r2, [r3, #0]
   16baa:	e013      	b.n	16bd4 <uart_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR = data;
   16bac:	f242 030c 	movw	r3, #8204	; 0x200c
   16bb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16bb4:	79fa      	ldrb	r2, [r7, #7]
   16bb6:	701a      	strb	r2, [r3, #0]
    sbi(UCSRB, TXCIE);
   16bb8:	f242 030a 	movw	r3, #8202	; 0x200a
   16bbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16bc0:	f242 020a 	movw	r2, #8202	; 0x200a
   16bc4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16bc8:	7812      	ldrb	r2, [r2, #0]
   16bca:	b2d2      	uxtb	r2, r2
   16bcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16bd0:	b2d2      	uxtb	r2, r2
   16bd2:	701a      	strb	r2, [r3, #0]
  }
}
   16bd4:	370c      	adds	r7, #12
   16bd6:	46bd      	mov	sp, r7
   16bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
   16bdc:	4770      	bx	lr
   16bde:	bf00      	nop

00016be0 <uart_print_hex>:

void uart_print_hex ( uint8_t c ) {
   16be0:	b590      	push	{r4, r7, lr}
   16be2:	b089      	sub	sp, #36	; 0x24
   16be4:	af00      	add	r7, sp, #0
   16be6:	4603      	mov	r3, r0
   16be8:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   16bea:	f648 13cc 	movw	r3, #35276	; 0x89cc
   16bee:	f2c0 0301 	movt	r3, #1
   16bf2:	f107 040c 	add.w	r4, r7, #12
   16bf6:	6818      	ldr	r0, [r3, #0]
   16bf8:	6859      	ldr	r1, [r3, #4]
   16bfa:	689a      	ldr	r2, [r3, #8]
   16bfc:	68db      	ldr	r3, [r3, #12]
   16bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   16c00:	79fb      	ldrb	r3, [r7, #7]
   16c02:	091b      	lsrs	r3, r3, #4
   16c04:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   16c06:	79fb      	ldrb	r3, [r7, #7]
   16c08:	f003 030f 	and.w	r3, r3, #15
   16c0c:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
        high = 15;
   16c0e:	230f      	movs	r3, #15
   16c10:	77fb      	strb	r3, [r7, #31]
        low = 15;
   16c12:	230f      	movs	r3, #15
   16c14:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */

    uart_transmit(hex[high]);
   16c16:	7ffb      	ldrb	r3, [r7, #31]
   16c18:	f107 0220 	add.w	r2, r7, #32
   16c1c:	4413      	add	r3, r2
   16c1e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   16c22:	4618      	mov	r0, r3
   16c24:	f7ff ff8a 	bl	16b3c <uart_transmit>
  uart_transmit(hex[low]);
   16c28:	7fbb      	ldrb	r3, [r7, #30]
   16c2a:	f107 0220 	add.w	r2, r7, #32
   16c2e:	4413      	add	r3, r2
   16c30:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   16c34:	4618      	mov	r0, r3
   16c36:	f7ff ff81 	bl	16b3c <uart_transmit>
} 
   16c3a:	3724      	adds	r7, #36	; 0x24
   16c3c:	46bd      	mov	sp, r7
   16c3e:	bd90      	pop	{r4, r7, pc}

00016c40 <uart_print_hex16>:

void uart_print_hex16 ( uint16_t c ) {
   16c40:	b580      	push	{r7, lr}
   16c42:	b084      	sub	sp, #16
   16c44:	af00      	add	r7, sp, #0
   16c46:	4603      	mov	r3, r0
   16c48:	80fb      	strh	r3, [r7, #6]
  uint8_t high = (uint8_t)(c>>8);
   16c4a:	88fb      	ldrh	r3, [r7, #6]
   16c4c:	0a1b      	lsrs	r3, r3, #8
   16c4e:	b29b      	uxth	r3, r3
   16c50:	73fb      	strb	r3, [r7, #15]
  uint8_t low  = (uint8_t)(c);
   16c52:	88fb      	ldrh	r3, [r7, #6]
   16c54:	73bb      	strb	r3, [r7, #14]
  uart_print_hex(high);
   16c56:	7bfb      	ldrb	r3, [r7, #15]
   16c58:	4618      	mov	r0, r3
   16c5a:	f7ff ffc1 	bl	16be0 <uart_print_hex>
  uart_print_hex(low);
   16c5e:	7bbb      	ldrb	r3, [r7, #14]
   16c60:	4618      	mov	r0, r3
   16c62:	f7ff ffbd 	bl	16be0 <uart_print_hex>
}
   16c66:	3710      	adds	r7, #16
   16c68:	46bd      	mov	sp, r7
   16c6a:	bd80      	pop	{r7, pc}

00016c6c <uart_print_string>:

void uart_print_string(const uint8_t* s) {
   16c6c:	b580      	push	{r7, lr}
   16c6e:	b084      	sub	sp, #16
   16c70:	af00      	add	r7, sp, #0
   16c72:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   16c74:	2300      	movs	r3, #0
   16c76:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   16c78:	e009      	b.n	16c8e <uart_print_string+0x22>
    uart_transmit(s[i]);
   16c7a:	7bfb      	ldrb	r3, [r7, #15]
   16c7c:	687a      	ldr	r2, [r7, #4]
   16c7e:	4413      	add	r3, r2
   16c80:	781b      	ldrb	r3, [r3, #0]
   16c82:	4618      	mov	r0, r3
   16c84:	f7ff ff5a 	bl	16b3c <uart_transmit>
    i++;
   16c88:	7bfb      	ldrb	r3, [r7, #15]
   16c8a:	3301      	adds	r3, #1
   16c8c:	73fb      	strb	r3, [r7, #15]
  uart_print_hex(low);
}

void uart_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   16c8e:	7bfb      	ldrb	r3, [r7, #15]
   16c90:	687a      	ldr	r2, [r7, #4]
   16c92:	4413      	add	r3, r2
   16c94:	781b      	ldrb	r3, [r3, #0]
   16c96:	2b00      	cmp	r3, #0
   16c98:	d1ef      	bne.n	16c7a <uart_print_string+0xe>
    uart_transmit(s[i]);
    i++;
  }
}
   16c9a:	3710      	adds	r7, #16
   16c9c:	46bd      	mov	sp, r7
   16c9e:	bd80      	pop	{r7, pc}

00016ca0 <SIG_UART_TRANS>:

SIGNAL(SIG_UART_TRANS) {
   16ca0:	b480      	push	{r7}
   16ca2:	af00      	add	r7, sp, #0
  if (tx_head == tx_tail) {
   16ca4:	f24b 2328 	movw	r3, #45608	; 0xb228
   16ca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16cac:	781a      	ldrb	r2, [r3, #0]
   16cae:	f24b 2329 	movw	r3, #45609	; 0xb229
   16cb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16cb6:	781b      	ldrb	r3, [r3, #0]
   16cb8:	b2db      	uxtb	r3, r3
   16cba:	429a      	cmp	r2, r3
   16cbc:	d10e      	bne.n	16cdc <SIG_UART_TRANS+0x3c>
    /* Nothing more to send */
    cbi(UCSRB, TXCIE); /* disable interrupt */
   16cbe:	f242 030a 	movw	r3, #8202	; 0x200a
   16cc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16cc6:	f242 020a 	movw	r2, #8202	; 0x200a
   16cca:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16cce:	7812      	ldrb	r2, [r2, #0]
   16cd0:	b2d2      	uxtb	r2, r2
   16cd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   16cd6:	b2d2      	uxtb	r2, r2
   16cd8:	701a      	strb	r2, [r3, #0]
   16cda:	e01d      	b.n	16d18 <SIG_UART_TRANS+0x78>
  } else {
    UDR = tx_buf[tx_tail];
   16cdc:	f242 030c 	movw	r3, #8204	; 0x200c
   16ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ce4:	f24b 2229 	movw	r2, #45609	; 0xb229
   16ce8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16cec:	7812      	ldrb	r2, [r2, #0]
   16cee:	b2d2      	uxtb	r2, r2
   16cf0:	4611      	mov	r1, r2
   16cf2:	f24b 222c 	movw	r2, #45612	; 0xb22c
   16cf6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16cfa:	5c52      	ldrb	r2, [r2, r1]
   16cfc:	701a      	strb	r2, [r3, #0]
    tx_tail++; /* warning tx_buf_len is 256 */
   16cfe:	f24b 2329 	movw	r3, #45609	; 0xb229
   16d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d06:	781b      	ldrb	r3, [r3, #0]
   16d08:	b2db      	uxtb	r3, r3
   16d0a:	3301      	adds	r3, #1
   16d0c:	b2da      	uxtb	r2, r3
   16d0e:	f24b 2329 	movw	r3, #45609	; 0xb229
   16d12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d16:	701a      	strb	r2, [r3, #0]
  }
}
   16d18:	46bd      	mov	sp, r7
   16d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
   16d1e:	4770      	bx	lr

00016d20 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
   16d20:	b580      	push	{r7, lr}
   16d22:	b082      	sub	sp, #8
   16d24:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   16d26:	2010      	movs	r0, #16
   16d28:	2101      	movs	r1, #1
   16d2a:	f7ea f849 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
   16d2e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   16d32:	f2c4 0001 	movt	r0, #16385	; 0x4001
   16d36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   16d3a:	2201      	movs	r2, #1
   16d3c:	f7ea fb50 	bl	13e0 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
   16d40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   16d44:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   16d46:	2310      	movs	r3, #16
   16d48:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   16d4a:	2303      	movs	r3, #3
   16d4c:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   16d4e:	1d3b      	adds	r3, r7, #4
   16d50:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   16d54:	f2c4 0001 	movt	r0, #16385	; 0x4001
   16d58:	4619      	mov	r1, r3
   16d5a:	f7ea fa05 	bl	1168 <GPIO_Init>
}
   16d5e:	3708      	adds	r7, #8
   16d60:	46bd      	mov	sp, r7
   16d62:	bd80      	pop	{r7, pc}

00016d64 <init_button>:

void init_button(void)
{
   16d64:	b580      	push	{r7, lr}
   16d66:	b082      	sub	sp, #8
   16d68:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   16d6a:	2004      	movs	r0, #4
   16d6c:	2101      	movs	r1, #1
   16d6e:	f7ea f827 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
   16d72:	2301      	movs	r3, #1
   16d74:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   16d76:	2304      	movs	r3, #4
   16d78:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   16d7a:	2303      	movs	r3, #3
   16d7c:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   16d7e:	1d3b      	adds	r3, r7, #4
   16d80:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   16d84:	f2c4 0001 	movt	r0, #16385	; 0x4001
   16d88:	4619      	mov	r1, r3
   16d8a:	f7ea f9ed 	bl	1168 <GPIO_Init>
}
   16d8e:	3708      	adds	r7, #8
   16d90:	46bd      	mov	sp, r7
   16d92:	bd80      	pop	{r7, pc}

00016d94 <enable_button_interrupts>:

void enable_button_interrupts(void)
{
   16d94:	b580      	push	{r7, lr}
   16d96:	b084      	sub	sp, #16
   16d98:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   16d9a:	2001      	movs	r0, #1
   16d9c:	2101      	movs	r1, #1
   16d9e:	f7ea f80f 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
   16da2:	2000      	movs	r0, #0
   16da4:	2100      	movs	r1, #0
   16da6:	f7ea fc13 	bl	15d0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
   16daa:	2301      	movs	r3, #1
   16dac:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   16dae:	2300      	movs	r3, #0
   16db0:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
   16db2:	2308      	movs	r3, #8
   16db4:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   16db6:	2301      	movs	r3, #1
   16db8:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
   16dba:	f107 0308 	add.w	r3, r7, #8
   16dbe:	4618      	mov	r0, r3
   16dc0:	f7eb f90c 	bl	1fdc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
   16dc4:	2306      	movs	r3, #6
   16dc6:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   16dc8:	230f      	movs	r3, #15
   16dca:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
   16dcc:	230f      	movs	r3, #15
   16dce:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   16dd0:	2301      	movs	r3, #1
   16dd2:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   16dd4:	1d3b      	adds	r3, r7, #4
   16dd6:	4618      	mov	r0, r3
   16dd8:	f7eb fa3a 	bl	2250 <NVIC_Init>
}
   16ddc:	3710      	adds	r7, #16
   16dde:	46bd      	mov	sp, r7
   16de0:	bd80      	pop	{r7, pc}
   16de2:	bf00      	nop

00016de4 <init_rs232>:

void init_rs232(void)
{
   16de4:	b580      	push	{r7, lr}
   16de6:	b086      	sub	sp, #24
   16de8:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
   16dea:	2005      	movs	r0, #5
   16dec:	2101      	movs	r1, #1
   16dee:	f7e9 ffe7 	bl	dc0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   16df2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   16df6:	2101      	movs	r1, #1
   16df8:	f7ea f80a 	bl	e10 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   16dfc:	2308      	movs	r3, #8
   16dfe:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   16e00:	2304      	movs	r3, #4
   16e02:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   16e04:	1d3b      	adds	r3, r7, #4
   16e06:	f44f 6000 	mov.w	r0, #2048	; 0x800
   16e0a:	f2c4 0001 	movt	r0, #16385	; 0x4001
   16e0e:	4619      	mov	r1, r3
   16e10:	f7ea f9aa 	bl	1168 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   16e14:	2304      	movs	r3, #4
   16e16:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   16e18:	2303      	movs	r3, #3
   16e1a:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   16e1c:	2318      	movs	r3, #24
   16e1e:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   16e20:	1d3b      	adds	r3, r7, #4
   16e22:	f44f 6000 	mov.w	r0, #2048	; 0x800
   16e26:	f2c4 0001 	movt	r0, #16385	; 0x4001
   16e2a:	4619      	mov	r1, r3
   16e2c:	f7ea f99c 	bl	1168 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
   16e30:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   16e34:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   16e36:	2300      	movs	r3, #0
   16e38:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
   16e3a:	2300      	movs	r3, #0
   16e3c:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
   16e3e:	2300      	movs	r3, #0
   16e40:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   16e42:	2300      	movs	r3, #0
   16e44:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   16e46:	230c      	movs	r3, #12
   16e48:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
   16e4a:	f107 0308 	add.w	r3, r7, #8
   16e4e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16e52:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16e56:	4619      	mov	r1, r3
   16e58:	f7ea fc6e 	bl	1738 <USART_Init>
    USART_Cmd(USART2, ENABLE);
   16e5c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16e60:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16e64:	2101      	movs	r1, #1
   16e66:	f7ea fd85 	bl	1974 <USART_Cmd>
}
   16e6a:	3718      	adds	r7, #24
   16e6c:	46bd      	mov	sp, r7
   16e6e:	bd80      	pop	{r7, pc}

00016e70 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
   16e70:	b580      	push	{r7, lr}
   16e72:	b082      	sub	sp, #8
   16e74:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
   16e76:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16e7a:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16e7e:	f240 7127 	movw	r1, #1831	; 0x727
   16e82:	2200      	movs	r2, #0
   16e84:	f7ea fd96 	bl	19b4 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   16e88:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16e8c:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16e90:	f240 5125 	movw	r1, #1317	; 0x525
   16e94:	2201      	movs	r2, #1
   16e96:	f7ea fd8d 	bl	19b4 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   16e9a:	2326      	movs	r3, #38	; 0x26
   16e9c:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   16e9e:	2300      	movs	r3, #0
   16ea0:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   16ea2:	2301      	movs	r3, #1
   16ea4:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   16ea6:	1d3b      	adds	r3, r7, #4
   16ea8:	4618      	mov	r0, r3
   16eaa:	f7eb f9d1 	bl	2250 <NVIC_Init>
}
   16eae:	3708      	adds	r7, #8
   16eb0:	46bd      	mov	sp, r7
   16eb2:	bd80      	pop	{r7, pc}

00016eb4 <enable_rs232>:

void enable_rs232(void)
{
   16eb4:	b580      	push	{r7, lr}
   16eb6:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
   16eb8:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16ebc:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16ec0:	2101      	movs	r1, #1
   16ec2:	f7ea fd57 	bl	1974 <USART_Cmd>
}
   16ec6:	bd80      	pop	{r7, pc}

00016ec8 <send_byte>:

void send_byte(uint8_t b)
{
   16ec8:	b580      	push	{r7, lr}
   16eca:	b082      	sub	sp, #8
   16ecc:	af00      	add	r7, sp, #0
   16ece:	4603      	mov	r3, r0
   16ed0:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
   16ed2:	bf00      	nop
   16ed4:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16ed8:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16edc:	2180      	movs	r1, #128	; 0x80
   16ede:	f7ea ffb5 	bl	1e4c <USART_GetFlagStatus>
   16ee2:	4603      	mov	r3, r0
   16ee4:	2b00      	cmp	r3, #0
   16ee6:	d0f5      	beq.n	16ed4 <send_byte+0xc>
    
    GPIOC->ODR ^= 0x00001000;
   16ee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   16eec:	f2c4 0301 	movt	r3, #16385	; 0x4001
   16ef0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   16ef4:	f2c4 0201 	movt	r2, #16385	; 0x4001
   16ef8:	68d2      	ldr	r2, [r2, #12]
   16efa:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
   16efe:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
   16f00:	79fb      	ldrb	r3, [r7, #7]
   16f02:	b29b      	uxth	r3, r3
   16f04:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   16f08:	f2c4 0000 	movt	r0, #16384	; 0x4000
   16f0c:	4619      	mov	r1, r3
   16f0e:	f7ea fe51 	bl	1bb4 <USART_SendData>
}
   16f12:	3708      	adds	r7, #8
   16f14:	46bd      	mov	sp, r7
   16f16:	bd80      	pop	{r7, pc}

00016f18 <send_num>:
/**
 *  can print a num which is smaller than 10
 */

void send_num(uint8_t b)
{
   16f18:	b580      	push	{r7, lr}
   16f1a:	b082      	sub	sp, #8
   16f1c:	af00      	add	r7, sp, #0
   16f1e:	4603      	mov	r3, r0
   16f20:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
   16f22:	79fb      	ldrb	r3, [r7, #7]
   16f24:	3330      	adds	r3, #48	; 0x30
   16f26:	b2db      	uxtb	r3, r3
   16f28:	4618      	mov	r0, r3
   16f2a:	f7ff ffcd 	bl	16ec8 <send_byte>
}
   16f2e:	3708      	adds	r7, #8
   16f30:	46bd      	mov	sp, r7
   16f32:	bd80      	pop	{r7, pc}

00016f34 <vPrintString>:
 * print a string
 *
 * */

void vPrintString( const char * string)
{
   16f34:	b580      	push	{r7, lr}
   16f36:	b084      	sub	sp, #16
   16f38:	af00      	add	r7, sp, #0
   16f3a:	6078      	str	r0, [r7, #4]
    int i = 0;
   16f3c:	2300      	movs	r3, #0
   16f3e:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
   16f40:	e009      	b.n	16f56 <vPrintString+0x22>
    {
        send_byte(string[i]);
   16f42:	68fb      	ldr	r3, [r7, #12]
   16f44:	687a      	ldr	r2, [r7, #4]
   16f46:	4413      	add	r3, r2
   16f48:	781b      	ldrb	r3, [r3, #0]
   16f4a:	4618      	mov	r0, r3
   16f4c:	f7ff ffbc 	bl	16ec8 <send_byte>
        i++;
   16f50:	68fb      	ldr	r3, [r7, #12]
   16f52:	3301      	adds	r3, #1
   16f54:	60fb      	str	r3, [r7, #12]
 * */

void vPrintString( const char * string)
{
    int i = 0;
    while(string[i] != '\0')
   16f56:	68fb      	ldr	r3, [r7, #12]
   16f58:	687a      	ldr	r2, [r7, #4]
   16f5a:	4413      	add	r3, r2
   16f5c:	781b      	ldrb	r3, [r3, #0]
   16f5e:	2b00      	cmp	r3, #0
   16f60:	d1ef      	bne.n	16f42 <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
   16f62:	3710      	adds	r7, #16
   16f64:	46bd      	mov	sp, r7
   16f66:	bd80      	pop	{r7, pc}

00016f68 <vPrintNumber>:
/*
 * print a number which is less than 10
 *
 * */
void vPrintNumber( const long c_num)
{
   16f68:	b580      	push	{r7, lr}
   16f6a:	b08a      	sub	sp, #40	; 0x28
   16f6c:	af00      	add	r7, sp, #0
   16f6e:	6078      	str	r0, [r7, #4]
    char time[15], tmp;
    unsigned int i, count = 0;
   16f70:	2300      	movs	r3, #0
   16f72:	623b      	str	r3, [r7, #32]
    long num = c_num;
   16f74:	687b      	ldr	r3, [r7, #4]
   16f76:	61fb      	str	r3, [r7, #28]

    if(num == 0)
   16f78:	69fb      	ldr	r3, [r7, #28]
   16f7a:	2b00      	cmp	r3, #0
   16f7c:	d106      	bne.n	16f8c <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
   16f7e:	f648 10dc 	movw	r0, #35292	; 0x89dc
   16f82:	f2c0 0001 	movt	r0, #1
   16f86:	f7ff ffd5 	bl	16f34 <vPrintString>
   16f8a:	e062      	b.n	17052 <vPrintNumber+0xea>
    }
    else
    {
        // transform long into char * 
        while( num  )
   16f8c:	e024      	b.n	16fd8 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
   16f8e:	69f9      	ldr	r1, [r7, #28]
   16f90:	f246 6367 	movw	r3, #26215	; 0x6667
   16f94:	f2c6 6366 	movt	r3, #26214	; 0x6666
   16f98:	fb83 2301 	smull	r2, r3, r3, r1
   16f9c:	109a      	asrs	r2, r3, #2
   16f9e:	17cb      	asrs	r3, r1, #31
   16fa0:	1ad2      	subs	r2, r2, r3
   16fa2:	4613      	mov	r3, r2
   16fa4:	009b      	lsls	r3, r3, #2
   16fa6:	4413      	add	r3, r2
   16fa8:	005b      	lsls	r3, r3, #1
   16faa:	1aca      	subs	r2, r1, r3
   16fac:	b2d3      	uxtb	r3, r2
   16fae:	3330      	adds	r3, #48	; 0x30
   16fb0:	b2da      	uxtb	r2, r3
   16fb2:	f107 010c 	add.w	r1, r7, #12
   16fb6:	6a3b      	ldr	r3, [r7, #32]
   16fb8:	440b      	add	r3, r1
   16fba:	701a      	strb	r2, [r3, #0]
            count ++;
   16fbc:	6a3b      	ldr	r3, [r7, #32]
   16fbe:	3301      	adds	r3, #1
   16fc0:	623b      	str	r3, [r7, #32]
            num /= 10;
   16fc2:	69fa      	ldr	r2, [r7, #28]
   16fc4:	f246 6367 	movw	r3, #26215	; 0x6667
   16fc8:	f2c6 6366 	movt	r3, #26214	; 0x6666
   16fcc:	fb83 1302 	smull	r1, r3, r3, r2
   16fd0:	1099      	asrs	r1, r3, #2
   16fd2:	17d3      	asrs	r3, r2, #31
   16fd4:	1acb      	subs	r3, r1, r3
   16fd6:	61fb      	str	r3, [r7, #28]
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num  )
   16fd8:	69fb      	ldr	r3, [r7, #28]
   16fda:	2b00      	cmp	r3, #0
   16fdc:	d1d7      	bne.n	16f8e <vPrintNumber+0x26>
            time[count] = num%10 +'0';
            count ++;
            num /= 10;

        }
        time[count] = '\0';
   16fde:	f107 020c 	add.w	r2, r7, #12
   16fe2:	6a3b      	ldr	r3, [r7, #32]
   16fe4:	4413      	add	r3, r2
   16fe6:	2200      	movs	r2, #0
   16fe8:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i )
   16fea:	2300      	movs	r3, #0
   16fec:	627b      	str	r3, [r7, #36]	; 0x24
   16fee:	e020      	b.n	17032 <vPrintNumber+0xca>
        {
            tmp = time[i];
   16ff0:	f107 020c 	add.w	r2, r7, #12
   16ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16ff6:	4413      	add	r3, r2
   16ff8:	781b      	ldrb	r3, [r3, #0]
   16ffa:	76fb      	strb	r3, [r7, #27]
            time[i] = time[count-1-i];
   16ffc:	6a3a      	ldr	r2, [r7, #32]
   16ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17000:	1ad3      	subs	r3, r2, r3
   17002:	3b01      	subs	r3, #1
   17004:	f107 0228 	add.w	r2, r7, #40	; 0x28
   17008:	4413      	add	r3, r2
   1700a:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
   1700e:	f107 010c 	add.w	r1, r7, #12
   17012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17014:	440b      	add	r3, r1
   17016:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
   17018:	6a3a      	ldr	r2, [r7, #32]
   1701a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1701c:	1ad3      	subs	r3, r2, r3
   1701e:	3b01      	subs	r3, #1
   17020:	f107 0128 	add.w	r1, r7, #40	; 0x28
   17024:	440b      	add	r3, r1
   17026:	7efa      	ldrb	r2, [r7, #27]
   17028:	f803 2c1c 	strb.w	r2, [r3, #-28]

        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i )
   1702c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1702e:	3301      	adds	r3, #1
   17030:	627b      	str	r3, [r7, #36]	; 0x24
   17032:	6a3b      	ldr	r3, [r7, #32]
   17034:	085a      	lsrs	r2, r3, #1
   17036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17038:	429a      	cmp	r2, r3
   1703a:	d8d9      	bhi.n	16ff0 <vPrintNumber+0x88>
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;

        }
        vPrintString(time);
   1703c:	f107 030c 	add.w	r3, r7, #12
   17040:	4618      	mov	r0, r3
   17042:	f7ff ff77 	bl	16f34 <vPrintString>
        vPrintString("\n\r");
   17046:	f648 10e0 	movw	r0, #35296	; 0x89e0
   1704a:	f2c0 0001 	movt	r0, #1
   1704e:	f7ff ff71 	bl	16f34 <vPrintString>
    }
}
   17052:	3728      	adds	r7, #40	; 0x28
   17054:	46bd      	mov	sp, r7
   17056:	bd80      	pop	{r7, pc}

00017058 <vInitInitialise>:

extern xTaskComplete[NUMBEROFTASK];


void vInitInitialise()
{
   17058:	b480      	push	{r7}
   1705a:	b083      	sub	sp, #12
   1705c:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    for(i = 0; i < NUMBEROFTASK; ++ i)
   1705e:	2300      	movs	r3, #0
   17060:	607b      	str	r3, [r7, #4]
   17062:	e00a      	b.n	1707a <vInitInitialise+0x22>
    {
        IS_INIT[i] = 0;
   17064:	f24b 332c 	movw	r3, #45868	; 0xb32c
   17068:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1706c:	687a      	ldr	r2, [r7, #4]
   1706e:	2100      	movs	r1, #0
   17070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


void vInitInitialise()
{
    portBASE_TYPE i;
    for(i = 0; i < NUMBEROFTASK; ++ i)
   17074:	687b      	ldr	r3, [r7, #4]
   17076:	3301      	adds	r3, #1
   17078:	607b      	str	r3, [r7, #4]
   1707a:	687b      	ldr	r3, [r7, #4]
   1707c:	2b0c      	cmp	r3, #12
   1707e:	ddf1      	ble.n	17064 <vInitInitialise+0xc>
    {
        IS_INIT[i] = 0;
    }
}
   17080:	370c      	adds	r7, #12
   17082:	46bd      	mov	sp, r7
   17084:	f85d 7b04 	ldr.w	r7, [sp], #4
   17088:	4770      	bx	lr
   1708a:	bf00      	nop

0001708c <main>:

#define SERVANT_STACK_SIZE 128 
int main(void)
{
   1708c:	b580      	push	{r7, lr}
   1708e:	b084      	sub	sp, #16
   17090:	af04      	add	r7, sp, #16
    init_led();
   17092:	f7ff fe45 	bl	16d20 <init_led>
    init_rs232();
   17096:	f7ff fea5 	bl	16de4 <init_rs232>
    enable_rs232_interrupts();
   1709a:	f7ff fee9 	bl	16e70 <enable_rs232_interrupts>
    enable_rs232();
   1709e:	f7ff ff09 	bl	16eb4 <enable_rs232>

    //vTaskCompleteInitialise();
    vInitInitialise();
   170a2:	f7ff ffd9 	bl	17058 <vInitInitialise>
    vSemaphoreInitialise();
   170a6:	f7eb feab 	bl	2e00 <vSemaphoreInitialise>
    vParameterInitialise();
   170aa:	f7eb fee9 	bl	2e80 <vParameterInitialise>

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, (void *)&pvParameters[NUMBEROFSERVANT-1],tskIDLE_PRIORITY + 1, &xTaskOfHandle[NUMBEROFSERVANT-1]);
   170ae:	2301      	movs	r3, #1
   170b0:	9300      	str	r3, [sp, #0]
   170b2:	4bc4      	ldr	r3, [pc, #784]	; (173c4 <main+0x338>)
   170b4:	9301      	str	r3, [sp, #4]
   170b6:	2300      	movs	r3, #0
   170b8:	9302      	str	r3, [sp, #8]
   170ba:	2300      	movs	r3, #0
   170bc:	9303      	str	r3, [sp, #12]
   170be:	f243 7039 	movw	r0, #14137	; 0x3739
   170c2:	f2c0 0000 	movt	r0, #0
   170c6:	f648 11e4 	movw	r1, #35300	; 0x89e4
   170ca:	f2c0 0101 	movt	r1, #1
   170ce:	2280      	movs	r2, #128	; 0x80
   170d0:	4bbd      	ldr	r3, [pc, #756]	; (173c8 <main+0x33c>)
   170d2:	f7ed fa07 	bl	44e4 <xTaskGenericCreate>

    // task 1, 100ms,
    xTaskCreate( vSensor, "Sensor 0", SERVANT_STACK_SIZE, (void *)&pvParameters[0], tskIDLE_PRIORITY + 15, &xTaskOfHandle[0]);
   170d6:	230f      	movs	r3, #15
   170d8:	9300      	str	r3, [sp, #0]
   170da:	f240 73f0 	movw	r3, #2032	; 0x7f0
   170de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   170e2:	9301      	str	r3, [sp, #4]
   170e4:	2300      	movs	r3, #0
   170e6:	9302      	str	r3, [sp, #8]
   170e8:	2300      	movs	r3, #0
   170ea:	9303      	str	r3, [sp, #12]
   170ec:	f243 3019 	movw	r0, #13081	; 0x3319
   170f0:	f2c0 0000 	movt	r0, #0
   170f4:	f648 11f0 	movw	r1, #35312	; 0x89f0
   170f8:	f2c0 0101 	movt	r1, #1
   170fc:	2280      	movs	r2, #128	; 0x80
   170fe:	f240 33d0 	movw	r3, #976	; 0x3d0
   17102:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17106:	f7ed f9ed 	bl	44e4 <xTaskGenericCreate>
    xTaskCreate( vServant, "Servant 1", SERVANT_STACK_SIZE, (void *)&pvParameters[1], tskIDLE_PRIORITY + 15, &xTaskOfHandle[1]);
   1710a:	230f      	movs	r3, #15
   1710c:	9300      	str	r3, [sp, #0]
   1710e:	4baf      	ldr	r3, [pc, #700]	; (173cc <main+0x340>)
   17110:	9301      	str	r3, [sp, #4]
   17112:	2300      	movs	r3, #0
   17114:	9302      	str	r3, [sp, #8]
   17116:	2300      	movs	r3, #0
   17118:	9303      	str	r3, [sp, #12]
   1711a:	f243 5041 	movw	r0, #13633	; 0x3541
   1711e:	f2c0 0000 	movt	r0, #0
   17122:	f648 11fc 	movw	r1, #35324	; 0x89fc
   17126:	f2c0 0101 	movt	r1, #1
   1712a:	2280      	movs	r2, #128	; 0x80
   1712c:	4ba8      	ldr	r3, [pc, #672]	; (173d0 <main+0x344>)
   1712e:	f7ed f9d9 	bl	44e4 <xTaskGenericCreate>

    // task 2 100ms,
    xTaskCreate( vSensor, "Sensor 2", SERVANT_STACK_SIZE, (void *)&pvParameters[2], tskIDLE_PRIORITY + 14, &xTaskOfHandle[2]);
   17132:	230e      	movs	r3, #14
   17134:	9300      	str	r3, [sp, #0]
   17136:	4ba7      	ldr	r3, [pc, #668]	; (173d4 <main+0x348>)
   17138:	9301      	str	r3, [sp, #4]
   1713a:	2300      	movs	r3, #0
   1713c:	9302      	str	r3, [sp, #8]
   1713e:	2300      	movs	r3, #0
   17140:	9303      	str	r3, [sp, #12]
   17142:	f243 3019 	movw	r0, #13081	; 0x3319
   17146:	f2c0 0000 	movt	r0, #0
   1714a:	f648 2108 	movw	r1, #35336	; 0x8a08
   1714e:	f2c0 0101 	movt	r1, #1
   17152:	2280      	movs	r2, #128	; 0x80
   17154:	4ba0      	ldr	r3, [pc, #640]	; (173d8 <main+0x34c>)
   17156:	f7ed f9c5 	bl	44e4 <xTaskGenericCreate>
    xTaskCreate( vServant, "Servant 3", SERVANT_STACK_SIZE, (void *)&pvParameters[3], tskIDLE_PRIORITY + 14,&xTaskOfHandle[3]);
   1715a:	230e      	movs	r3, #14
   1715c:	9300      	str	r3, [sp, #0]
   1715e:	4b9f      	ldr	r3, [pc, #636]	; (173dc <main+0x350>)
   17160:	9301      	str	r3, [sp, #4]
   17162:	2300      	movs	r3, #0
   17164:	9302      	str	r3, [sp, #8]
   17166:	2300      	movs	r3, #0
   17168:	9303      	str	r3, [sp, #12]
   1716a:	f243 5041 	movw	r0, #13633	; 0x3541
   1716e:	f2c0 0000 	movt	r0, #0
   17172:	f648 2114 	movw	r1, #35348	; 0x8a14
   17176:	f2c0 0101 	movt	r1, #1
   1717a:	2280      	movs	r2, #128	; 0x80
   1717c:	4b98      	ldr	r3, [pc, #608]	; (173e0 <main+0x354>)
   1717e:	f7ed f9b1 	bl	44e4 <xTaskGenericCreate>

    // task 6 100ms,
    xTaskCreate( vSensor, "Sensor 7", SERVANT_STACK_SIZE, (void *)&pvParameters[7], tskIDLE_PRIORITY + 13, &xTaskOfHandle[7]);
   17182:	230d      	movs	r3, #13
   17184:	9300      	str	r3, [sp, #0]
   17186:	4b97      	ldr	r3, [pc, #604]	; (173e4 <main+0x358>)
   17188:	9301      	str	r3, [sp, #4]
   1718a:	2300      	movs	r3, #0
   1718c:	9302      	str	r3, [sp, #8]
   1718e:	2300      	movs	r3, #0
   17190:	9303      	str	r3, [sp, #12]
   17192:	f243 3019 	movw	r0, #13081	; 0x3319
   17196:	f2c0 0000 	movt	r0, #0
   1719a:	f648 2120 	movw	r1, #35360	; 0x8a20
   1719e:	f2c0 0101 	movt	r1, #1
   171a2:	2280      	movs	r2, #128	; 0x80
   171a4:	4b90      	ldr	r3, [pc, #576]	; (173e8 <main+0x35c>)
   171a6:	f7ed f99d 	bl	44e4 <xTaskGenericCreate>
    xTaskCreate( vServant, "Servant 8", SERVANT_STACK_SIZE, (void *)&pvParameters[8], tskIDLE_PRIORITY + 13,&xTaskOfHandle[8]);
   171aa:	230d      	movs	r3, #13
   171ac:	9300      	str	r3, [sp, #0]
   171ae:	4b8f      	ldr	r3, [pc, #572]	; (173ec <main+0x360>)
   171b0:	9301      	str	r3, [sp, #4]
   171b2:	2300      	movs	r3, #0
   171b4:	9302      	str	r3, [sp, #8]
   171b6:	2300      	movs	r3, #0
   171b8:	9303      	str	r3, [sp, #12]
   171ba:	f243 5041 	movw	r0, #13633	; 0x3541
   171be:	f2c0 0000 	movt	r0, #0
   171c2:	f648 212c 	movw	r1, #35372	; 0x8a2c
   171c6:	f2c0 0101 	movt	r1, #1
   171ca:	2280      	movs	r2, #128	; 0x80
   171cc:	4b88      	ldr	r3, [pc, #544]	; (173f0 <main+0x364>)
   171ce:	f7ed f989 	bl	44e4 <xTaskGenericCreate>

    // task 3, 200ms, 
    xTaskCreate( vSensor, "Sensor 4", SERVANT_STACK_SIZE, (void *)&pvParameters[4], tskIDLE_PRIORITY + 12, &xTaskOfHandle[4]); 
   171d2:	230c      	movs	r3, #12
   171d4:	9300      	str	r3, [sp, #0]
   171d6:	4b87      	ldr	r3, [pc, #540]	; (173f4 <main+0x368>)
   171d8:	9301      	str	r3, [sp, #4]
   171da:	2300      	movs	r3, #0
   171dc:	9302      	str	r3, [sp, #8]
   171de:	2300      	movs	r3, #0
   171e0:	9303      	str	r3, [sp, #12]
   171e2:	f243 3019 	movw	r0, #13081	; 0x3319
   171e6:	f2c0 0000 	movt	r0, #0
   171ea:	f648 2138 	movw	r1, #35384	; 0x8a38
   171ee:	f2c0 0101 	movt	r1, #1
   171f2:	2280      	movs	r2, #128	; 0x80
   171f4:	4b80      	ldr	r3, [pc, #512]	; (173f8 <main+0x36c>)
   171f6:	f7ed f975 	bl	44e4 <xTaskGenericCreate>

    // task 4, 200ms
    xTaskCreate( vSensor, "Sensor 5", SERVANT_STACK_SIZE, (void *)&pvParameters[5], tskIDLE_PRIORITY + 11, &xTaskOfHandle[5]); 
   171fa:	230b      	movs	r3, #11
   171fc:	9300      	str	r3, [sp, #0]
   171fe:	4b7f      	ldr	r3, [pc, #508]	; (173fc <main+0x370>)
   17200:	9301      	str	r3, [sp, #4]
   17202:	2300      	movs	r3, #0
   17204:	9302      	str	r3, [sp, #8]
   17206:	2300      	movs	r3, #0
   17208:	9303      	str	r3, [sp, #12]
   1720a:	f243 3019 	movw	r0, #13081	; 0x3319
   1720e:	f2c0 0000 	movt	r0, #0
   17212:	f648 2144 	movw	r1, #35396	; 0x8a44
   17216:	f2c0 0101 	movt	r1, #1
   1721a:	2280      	movs	r2, #128	; 0x80
   1721c:	4b78      	ldr	r3, [pc, #480]	; (17400 <main+0x374>)
   1721e:	f7ed f961 	bl	44e4 <xTaskGenericCreate>

    // task 5, 200ms
    xTaskCreate( vSensor, "Sensor 6", SERVANT_STACK_SIZE, (void *)&pvParameters[6], tskIDLE_PRIORITY + 10, &xTaskOfHandle[6]); 
   17222:	230a      	movs	r3, #10
   17224:	9300      	str	r3, [sp, #0]
   17226:	4b77      	ldr	r3, [pc, #476]	; (17404 <main+0x378>)
   17228:	9301      	str	r3, [sp, #4]
   1722a:	2300      	movs	r3, #0
   1722c:	9302      	str	r3, [sp, #8]
   1722e:	2300      	movs	r3, #0
   17230:	9303      	str	r3, [sp, #12]
   17232:	f243 3019 	movw	r0, #13081	; 0x3319
   17236:	f2c0 0000 	movt	r0, #0
   1723a:	f648 2150 	movw	r1, #35408	; 0x8a50
   1723e:	f2c0 0101 	movt	r1, #1
   17242:	2280      	movs	r2, #128	; 0x80
   17244:	4b70      	ldr	r3, [pc, #448]	; (17408 <main+0x37c>)
   17246:	f7ed f94d 	bl	44e4 <xTaskGenericCreate>

    // task 7, 200ms
    xTaskCreate( vSensor, "Sensor 9", SERVANT_STACK_SIZE, (void *)&pvParameters[9], tskIDLE_PRIORITY + 9, &xTaskOfHandle[9]); 
   1724a:	2309      	movs	r3, #9
   1724c:	9300      	str	r3, [sp, #0]
   1724e:	4b6f      	ldr	r3, [pc, #444]	; (1740c <main+0x380>)
   17250:	9301      	str	r3, [sp, #4]
   17252:	2300      	movs	r3, #0
   17254:	9302      	str	r3, [sp, #8]
   17256:	2300      	movs	r3, #0
   17258:	9303      	str	r3, [sp, #12]
   1725a:	f243 3019 	movw	r0, #13081	; 0x3319
   1725e:	f2c0 0000 	movt	r0, #0
   17262:	f648 215c 	movw	r1, #35420	; 0x8a5c
   17266:	f2c0 0101 	movt	r1, #1
   1726a:	2280      	movs	r2, #128	; 0x80
   1726c:	4b68      	ldr	r3, [pc, #416]	; (17410 <main+0x384>)
   1726e:	f7ed f939 	bl	44e4 <xTaskGenericCreate>
    xTaskCreate( vServant, "Servant 10", SERVANT_STACK_SIZE, (void *)&pvParameters[10], tskIDLE_PRIORITY + 9,&xTaskOfHandle[10]);
   17272:	2309      	movs	r3, #9
   17274:	9300      	str	r3, [sp, #0]
   17276:	4b67      	ldr	r3, [pc, #412]	; (17414 <main+0x388>)
   17278:	9301      	str	r3, [sp, #4]
   1727a:	2300      	movs	r3, #0
   1727c:	9302      	str	r3, [sp, #8]
   1727e:	2300      	movs	r3, #0
   17280:	9303      	str	r3, [sp, #12]
   17282:	f243 5041 	movw	r0, #13633	; 0x3541
   17286:	f2c0 0000 	movt	r0, #0
   1728a:	f648 2168 	movw	r1, #35432	; 0x8a68
   1728e:	f2c0 0101 	movt	r1, #1
   17292:	2280      	movs	r2, #128	; 0x80
   17294:	4b60      	ldr	r3, [pc, #384]	; (17418 <main+0x38c>)
   17296:	f7ed f925 	bl	44e4 <xTaskGenericCreate>
    xTaskCreate( vServant, "Servant 11", SERVANT_STACK_SIZE, (void *)&pvParameters[11], tskIDLE_PRIORITY + 9,&xTaskOfHandle[11]);
   1729a:	2309      	movs	r3, #9
   1729c:	9300      	str	r3, [sp, #0]
   1729e:	4b5f      	ldr	r3, [pc, #380]	; (1741c <main+0x390>)
   172a0:	9301      	str	r3, [sp, #4]
   172a2:	2300      	movs	r3, #0
   172a4:	9302      	str	r3, [sp, #8]
   172a6:	2300      	movs	r3, #0
   172a8:	9303      	str	r3, [sp, #12]
   172aa:	f243 5041 	movw	r0, #13633	; 0x3541
   172ae:	f2c0 0000 	movt	r0, #0
   172b2:	f648 2174 	movw	r1, #35444	; 0x8a74
   172b6:	f2c0 0101 	movt	r1, #1
   172ba:	2280      	movs	r2, #128	; 0x80
   172bc:	4b58      	ldr	r3, [pc, #352]	; (17420 <main+0x394>)
   172be:	f7ed f911 	bl	44e4 <xTaskGenericCreate>

    // task 8 200ms
    xTaskCreate( vSensor, "Sensor 12", SERVANT_STACK_SIZE, (void *)&pvParameters[12], tskIDLE_PRIORITY + 8, &xTaskOfHandle[12]); 
   172c2:	2308      	movs	r3, #8
   172c4:	9300      	str	r3, [sp, #0]
   172c6:	4b57      	ldr	r3, [pc, #348]	; (17424 <main+0x398>)
   172c8:	9301      	str	r3, [sp, #4]
   172ca:	2300      	movs	r3, #0
   172cc:	9302      	str	r3, [sp, #8]
   172ce:	2300      	movs	r3, #0
   172d0:	9303      	str	r3, [sp, #12]
   172d2:	f243 3019 	movw	r0, #13081	; 0x3319
   172d6:	f2c0 0000 	movt	r0, #0
   172da:	f648 2180 	movw	r1, #35456	; 0x8a80
   172de:	f2c0 0101 	movt	r1, #1
   172e2:	2280      	movs	r2, #128	; 0x80
   172e4:	4b50      	ldr	r3, [pc, #320]	; (17428 <main+0x39c>)
   172e6:	f7ed f8fd 	bl	44e4 <xTaskGenericCreate>

    // task 13 400ms
    xTaskCreate( vSensor, "Sensor 20", SERVANT_STACK_SIZE, (void *)&pvParameters[20], tskIDLE_PRIORITY + 7, &xTaskOfHandle[20]); 
   172ea:	2307      	movs	r3, #7
   172ec:	9300      	str	r3, [sp, #0]
   172ee:	4b4f      	ldr	r3, [pc, #316]	; (1742c <main+0x3a0>)
   172f0:	9301      	str	r3, [sp, #4]
   172f2:	2300      	movs	r3, #0
   172f4:	9302      	str	r3, [sp, #8]
   172f6:	2300      	movs	r3, #0
   172f8:	9303      	str	r3, [sp, #12]
   172fa:	f243 3019 	movw	r0, #13081	; 0x3319
   172fe:	f2c0 0000 	movt	r0, #0
   17302:	f648 218c 	movw	r1, #35468	; 0x8a8c
   17306:	f2c0 0101 	movt	r1, #1
   1730a:	2280      	movs	r2, #128	; 0x80
   1730c:	4b48      	ldr	r3, [pc, #288]	; (17430 <main+0x3a4>)
   1730e:	f7ed f8e9 	bl	44e4 <xTaskGenericCreate>

    // task 9 1000ms
    xTaskCreate( vSensor, "Sensor 13", SERVANT_STACK_SIZE, (void *)&pvParameters[13], tskIDLE_PRIORITY + 6, &xTaskOfHandle[13]); 
   17312:	2306      	movs	r3, #6
   17314:	9300      	str	r3, [sp, #0]
   17316:	4b47      	ldr	r3, [pc, #284]	; (17434 <main+0x3a8>)
   17318:	9301      	str	r3, [sp, #4]
   1731a:	2300      	movs	r3, #0
   1731c:	9302      	str	r3, [sp, #8]
   1731e:	2300      	movs	r3, #0
   17320:	9303      	str	r3, [sp, #12]
   17322:	f243 3019 	movw	r0, #13081	; 0x3319
   17326:	f2c0 0000 	movt	r0, #0
   1732a:	f648 2198 	movw	r1, #35480	; 0x8a98
   1732e:	f2c0 0101 	movt	r1, #1
   17332:	2280      	movs	r2, #128	; 0x80
   17334:	4b40      	ldr	r3, [pc, #256]	; (17438 <main+0x3ac>)
   17336:	f7ed f8d5 	bl	44e4 <xTaskGenericCreate>
    xTaskCreate( vServant, "Servant 14", SERVANT_STACK_SIZE, (void *)&pvParameters[14], tskIDLE_PRIORITY + 6,&xTaskOfHandle[14]);
   1733a:	2306      	movs	r3, #6
   1733c:	9300      	str	r3, [sp, #0]
   1733e:	4b3f      	ldr	r3, [pc, #252]	; (1743c <main+0x3b0>)
   17340:	9301      	str	r3, [sp, #4]
   17342:	2300      	movs	r3, #0
   17344:	9302      	str	r3, [sp, #8]
   17346:	2300      	movs	r3, #0
   17348:	9303      	str	r3, [sp, #12]
   1734a:	f243 5041 	movw	r0, #13633	; 0x3541
   1734e:	f2c0 0000 	movt	r0, #0
   17352:	f648 21a4 	movw	r1, #35492	; 0x8aa4
   17356:	f2c0 0101 	movt	r1, #1
   1735a:	2280      	movs	r2, #128	; 0x80
   1735c:	4b38      	ldr	r3, [pc, #224]	; (17440 <main+0x3b4>)
   1735e:	f7ed f8c1 	bl	44e4 <xTaskGenericCreate>

    // task 10 1000ms
    xTaskCreate( vSensor, "Sensor 15", SERVANT_STACK_SIZE, (void *)&pvParameters[15], tskIDLE_PRIORITY + 5, &xTaskOfHandle[15]); 
   17362:	2305      	movs	r3, #5
   17364:	9300      	str	r3, [sp, #0]
   17366:	4b37      	ldr	r3, [pc, #220]	; (17444 <main+0x3b8>)
   17368:	9301      	str	r3, [sp, #4]
   1736a:	2300      	movs	r3, #0
   1736c:	9302      	str	r3, [sp, #8]
   1736e:	2300      	movs	r3, #0
   17370:	9303      	str	r3, [sp, #12]
   17372:	f243 3019 	movw	r0, #13081	; 0x3319
   17376:	f2c0 0000 	movt	r0, #0
   1737a:	f648 21b0 	movw	r1, #35504	; 0x8ab0
   1737e:	f2c0 0101 	movt	r1, #1
   17382:	2280      	movs	r2, #128	; 0x80
   17384:	4b30      	ldr	r3, [pc, #192]	; (17448 <main+0x3bc>)
   17386:	f7ed f8ad 	bl	44e4 <xTaskGenericCreate>
    xTaskCreate( vServant, "Servant 16", SERVANT_STACK_SIZE, (void *)&pvParameters[16], tskIDLE_PRIORITY + 5,&xTaskOfHandle[16]);
   1738a:	2305      	movs	r3, #5
   1738c:	9300      	str	r3, [sp, #0]
   1738e:	4b2f      	ldr	r3, [pc, #188]	; (1744c <main+0x3c0>)
   17390:	9301      	str	r3, [sp, #4]
   17392:	2300      	movs	r3, #0
   17394:	9302      	str	r3, [sp, #8]
   17396:	2300      	movs	r3, #0
   17398:	9303      	str	r3, [sp, #12]
   1739a:	f243 5041 	movw	r0, #13633	; 0x3541
   1739e:	f2c0 0000 	movt	r0, #0
   173a2:	f648 21bc 	movw	r1, #35516	; 0x8abc
   173a6:	f2c0 0101 	movt	r1, #1
   173aa:	2280      	movs	r2, #128	; 0x80
   173ac:	4b28      	ldr	r3, [pc, #160]	; (17450 <main+0x3c4>)
   173ae:	f7ed f899 	bl	44e4 <xTaskGenericCreate>
    xTaskCreate( vServant, "Servant 17", SERVANT_STACK_SIZE, (void *)&pvParameters[17], tskIDLE_PRIORITY + 5,&xTaskOfHandle[17]);
   173b2:	2305      	movs	r3, #5
   173b4:	9300      	str	r3, [sp, #0]
   173b6:	4b27      	ldr	r3, [pc, #156]	; (17454 <main+0x3c8>)
   173b8:	9301      	str	r3, [sp, #4]
   173ba:	2300      	movs	r3, #0
   173bc:	9302      	str	r3, [sp, #8]
   173be:	2300      	movs	r3, #0
   173c0:	9303      	str	r3, [sp, #12]
   173c2:	e049      	b.n	17458 <main+0x3cc>
   173c4:	20000844 	.word	0x20000844
   173c8:	2000076c 	.word	0x2000076c
   173cc:	200007f4 	.word	0x200007f4
   173d0:	200003fc 	.word	0x200003fc
   173d4:	200007f8 	.word	0x200007f8
   173d8:	20000428 	.word	0x20000428
   173dc:	200007fc 	.word	0x200007fc
   173e0:	20000454 	.word	0x20000454
   173e4:	2000080c 	.word	0x2000080c
   173e8:	20000504 	.word	0x20000504
   173ec:	20000810 	.word	0x20000810
   173f0:	20000530 	.word	0x20000530
   173f4:	20000800 	.word	0x20000800
   173f8:	20000480 	.word	0x20000480
   173fc:	20000804 	.word	0x20000804
   17400:	200004ac 	.word	0x200004ac
   17404:	20000808 	.word	0x20000808
   17408:	200004d8 	.word	0x200004d8
   1740c:	20000814 	.word	0x20000814
   17410:	2000055c 	.word	0x2000055c
   17414:	20000818 	.word	0x20000818
   17418:	20000588 	.word	0x20000588
   1741c:	2000081c 	.word	0x2000081c
   17420:	200005b4 	.word	0x200005b4
   17424:	20000820 	.word	0x20000820
   17428:	200005e0 	.word	0x200005e0
   1742c:	20000840 	.word	0x20000840
   17430:	20000740 	.word	0x20000740
   17434:	20000824 	.word	0x20000824
   17438:	2000060c 	.word	0x2000060c
   1743c:	20000828 	.word	0x20000828
   17440:	20000638 	.word	0x20000638
   17444:	2000082c 	.word	0x2000082c
   17448:	20000664 	.word	0x20000664
   1744c:	20000830 	.word	0x20000830
   17450:	20000690 	.word	0x20000690
   17454:	20000834 	.word	0x20000834
   17458:	f243 5041 	movw	r0, #13633	; 0x3541
   1745c:	f2c0 0000 	movt	r0, #0
   17460:	f648 21c8 	movw	r1, #35528	; 0x8ac8
   17464:	f2c0 0101 	movt	r1, #1
   17468:	2280      	movs	r2, #128	; 0x80
   1746a:	4b18      	ldr	r3, [pc, #96]	; (174cc <main+0x440>)
   1746c:	f7ed f83a 	bl	44e4 <xTaskGenericCreate>

    // task 11 1000ms
    xTaskCreate( vSensor, "Sensor 18", SERVANT_STACK_SIZE, (void *)&pvParameters[18], tskIDLE_PRIORITY + 4, &xTaskOfHandle[18]); 
   17470:	2304      	movs	r3, #4
   17472:	9300      	str	r3, [sp, #0]
   17474:	4b16      	ldr	r3, [pc, #88]	; (174d0 <main+0x444>)
   17476:	9301      	str	r3, [sp, #4]
   17478:	2300      	movs	r3, #0
   1747a:	9302      	str	r3, [sp, #8]
   1747c:	2300      	movs	r3, #0
   1747e:	9303      	str	r3, [sp, #12]
   17480:	f243 3019 	movw	r0, #13081	; 0x3319
   17484:	f2c0 0000 	movt	r0, #0
   17488:	f648 21d4 	movw	r1, #35540	; 0x8ad4
   1748c:	f2c0 0101 	movt	r1, #1
   17490:	2280      	movs	r2, #128	; 0x80
   17492:	4b10      	ldr	r3, [pc, #64]	; (174d4 <main+0x448>)
   17494:	f7ed f826 	bl	44e4 <xTaskGenericCreate>

    // task 12 1000ms
    xTaskCreate( vSensor, "Sensor 19", SERVANT_STACK_SIZE, (void *)&pvParameters[19], tskIDLE_PRIORITY + 3, &xTaskOfHandle[19]); 
   17498:	2303      	movs	r3, #3
   1749a:	9300      	str	r3, [sp, #0]
   1749c:	4b0e      	ldr	r3, [pc, #56]	; (174d8 <main+0x44c>)
   1749e:	9301      	str	r3, [sp, #4]
   174a0:	2300      	movs	r3, #0
   174a2:	9302      	str	r3, [sp, #8]
   174a4:	2300      	movs	r3, #0
   174a6:	9303      	str	r3, [sp, #12]
   174a8:	f243 3019 	movw	r0, #13081	; 0x3319
   174ac:	f2c0 0000 	movt	r0, #0
   174b0:	f648 21e0 	movw	r1, #35552	; 0x8ae0
   174b4:	f2c0 0101 	movt	r1, #1
   174b8:	2280      	movs	r2, #128	; 0x80
   174ba:	4b08      	ldr	r3, [pc, #32]	; (174dc <main+0x450>)
   174bc:	f7ed f812 	bl	44e4 <xTaskGenericCreate>


    /* Start running the task. */
    vTaskStartScheduler();
   174c0:	f7ed fb8e 	bl	4be0 <vTaskStartScheduler>

    return 0;
   174c4:	2300      	movs	r3, #0
}
   174c6:	4618      	mov	r0, r3
   174c8:	46bd      	mov	sp, r7
   174ca:	bd80      	pop	{r7, pc}
   174cc:	200006bc 	.word	0x200006bc
   174d0:	20000838 	.word	0x20000838
   174d4:	200006e8 	.word	0x200006e8
   174d8:	2000083c 	.word	0x2000083c
   174dc:	20000714 	.word	0x20000714

000174e0 <myTraceCreate>:

void myTraceCreate      (){
   174e0:	b480      	push	{r7}
   174e2:	af00      	add	r7, sp, #0
}
   174e4:	46bd      	mov	sp, r7
   174e6:	f85d 7b04 	ldr.w	r7, [sp], #4
   174ea:	4770      	bx	lr

000174ec <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
   174ec:	b480      	push	{r7}
   174ee:	af00      	add	r7, sp, #0
}
   174f0:	46bd      	mov	sp, r7
   174f2:	f85d 7b04 	ldr.w	r7, [sp], #4
   174f6:	4770      	bx	lr

000174f8 <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
   174f8:	b480      	push	{r7}
   174fa:	af00      	add	r7, sp, #0
}
   174fc:	46bd      	mov	sp, r7
   174fe:	f85d 7b04 	ldr.w	r7, [sp], #4
   17502:	4770      	bx	lr

00017504 <vApplicationTickHook>:
 *
 * if there is any task need to be triggered at this time,
 * tick hook function would send semaphore to them.
 * */
void vApplicationTickHook( void )
{
   17504:	b580      	push	{r7, lr}
   17506:	b082      	sub	sp, #8
   17508:	af00      	add	r7, sp, #0
    portTickType xCurrentTime = xTaskGetTickCount();
   1750a:	f7ed fc53 	bl	4db4 <xTaskGetTickCount>
   1750e:	6078      	str	r0, [r7, #4]
    if( IS_INIT[0] == 0 && xCurrentTime == 70 )
   17510:	f24b 332c 	movw	r3, #45868	; 0xb32c
   17514:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17518:	681b      	ldr	r3, [r3, #0]
   1751a:	2b00      	cmp	r3, #0
   1751c:	f040 8099 	bne.w	17652 <vApplicationTickHook+0x14e>
   17520:	687b      	ldr	r3, [r7, #4]
   17522:	2b46      	cmp	r3, #70	; 0x46
   17524:	f040 8095 	bne.w	17652 <vApplicationTickHook+0x14e>
    {
        xSemaphoreGive( xBinarySemaphore[0] );
   17528:	f240 7398 	movw	r3, #1944	; 0x798
   1752c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17530:	681b      	ldr	r3, [r3, #0]
   17532:	4618      	mov	r0, r3
   17534:	2100      	movs	r1, #0
   17536:	2200      	movs	r2, #0
   17538:	2300      	movs	r3, #0
   1753a:	f7ec fcc1 	bl	3ec0 <xQueueGenericSend>
        xSemaphoreGive( xBinarySemaphore[2] );
   1753e:	f240 7398 	movw	r3, #1944	; 0x798
   17542:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17546:	689b      	ldr	r3, [r3, #8]
   17548:	4618      	mov	r0, r3
   1754a:	2100      	movs	r1, #0
   1754c:	2200      	movs	r2, #0
   1754e:	2300      	movs	r3, #0
   17550:	f7ec fcb6 	bl	3ec0 <xQueueGenericSend>
        xSemaphoreGive( xBinarySemaphore[7] );
   17554:	f240 7398 	movw	r3, #1944	; 0x798
   17558:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1755c:	69db      	ldr	r3, [r3, #28]
   1755e:	4618      	mov	r0, r3
   17560:	2100      	movs	r1, #0
   17562:	2200      	movs	r2, #0
   17564:	2300      	movs	r3, #0
   17566:	f7ec fcab 	bl	3ec0 <xQueueGenericSend>
        xSemaphoreGive( xBinarySemaphore[4] );
   1756a:	f240 7398 	movw	r3, #1944	; 0x798
   1756e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17572:	691b      	ldr	r3, [r3, #16]
   17574:	4618      	mov	r0, r3
   17576:	2100      	movs	r1, #0
   17578:	2200      	movs	r2, #0
   1757a:	2300      	movs	r3, #0
   1757c:	f7ec fca0 	bl	3ec0 <xQueueGenericSend>
        xSemaphoreGive( xBinarySemaphore[5] );
   17580:	f240 7398 	movw	r3, #1944	; 0x798
   17584:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17588:	695b      	ldr	r3, [r3, #20]
   1758a:	4618      	mov	r0, r3
   1758c:	2100      	movs	r1, #0
   1758e:	2200      	movs	r2, #0
   17590:	2300      	movs	r3, #0
   17592:	f7ec fc95 	bl	3ec0 <xQueueGenericSend>
        xSemaphoreGive( xBinarySemaphore[6] );
   17596:	f240 7398 	movw	r3, #1944	; 0x798
   1759a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1759e:	699b      	ldr	r3, [r3, #24]
   175a0:	4618      	mov	r0, r3
   175a2:	2100      	movs	r1, #0
   175a4:	2200      	movs	r2, #0
   175a6:	2300      	movs	r3, #0
   175a8:	f7ec fc8a 	bl	3ec0 <xQueueGenericSend>
        xSemaphoreGive( xBinarySemaphore[9] );
   175ac:	f240 7398 	movw	r3, #1944	; 0x798
   175b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   175b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   175b6:	4618      	mov	r0, r3
   175b8:	2100      	movs	r1, #0
   175ba:	2200      	movs	r2, #0
   175bc:	2300      	movs	r3, #0
   175be:	f7ec fc7f 	bl	3ec0 <xQueueGenericSend>
        xSemaphoreGive( xBinarySemaphore[12] );
   175c2:	f240 7398 	movw	r3, #1944	; 0x798
   175c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   175ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   175cc:	4618      	mov	r0, r3
   175ce:	2100      	movs	r1, #0
   175d0:	2200      	movs	r2, #0
   175d2:	2300      	movs	r3, #0
   175d4:	f7ec fc74 	bl	3ec0 <xQueueGenericSend>
        xSemaphoreGive( xBinarySemaphore[13] );
   175d8:	f240 7398 	movw	r3, #1944	; 0x798
   175dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   175e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   175e2:	4618      	mov	r0, r3
   175e4:	2100      	movs	r1, #0
   175e6:	2200      	movs	r2, #0
   175e8:	2300      	movs	r3, #0
   175ea:	f7ec fc69 	bl	3ec0 <xQueueGenericSend>
        xSemaphoreGive( xBinarySemaphore[15] );
   175ee:	f240 7398 	movw	r3, #1944	; 0x798
   175f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   175f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   175f8:	4618      	mov	r0, r3
   175fa:	2100      	movs	r1, #0
   175fc:	2200      	movs	r2, #0
   175fe:	2300      	movs	r3, #0
   17600:	f7ec fc5e 	bl	3ec0 <xQueueGenericSend>
        xSemaphoreGive( xBinarySemaphore[18] );
   17604:	f240 7398 	movw	r3, #1944	; 0x798
   17608:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1760c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1760e:	4618      	mov	r0, r3
   17610:	2100      	movs	r1, #0
   17612:	2200      	movs	r2, #0
   17614:	2300      	movs	r3, #0
   17616:	f7ec fc53 	bl	3ec0 <xQueueGenericSend>
        xSemaphoreGive( xBinarySemaphore[19] );
   1761a:	f240 7398 	movw	r3, #1944	; 0x798
   1761e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   17624:	4618      	mov	r0, r3
   17626:	2100      	movs	r1, #0
   17628:	2200      	movs	r2, #0
   1762a:	2300      	movs	r3, #0
   1762c:	f7ec fc48 	bl	3ec0 <xQueueGenericSend>
        xSemaphoreGive( xBinarySemaphore[20] );
   17630:	f240 7398 	movw	r3, #1944	; 0x798
   17634:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1763a:	4618      	mov	r0, r3
   1763c:	2100      	movs	r1, #0
   1763e:	2200      	movs	r2, #0
   17640:	2300      	movs	r3, #0
   17642:	f7ec fc3d 	bl	3ec0 <xQueueGenericSend>
        IS_INIT[0] = 0;
   17646:	f24b 332c 	movw	r3, #45868	; 0xb32c
   1764a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1764e:	2200      	movs	r2, #0
   17650:	601a      	str	r2, [r3, #0]
    }
    
    // send semaphore to R-Servant to triggered it to cope with events 
    // when time meeting the start time of task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
   17652:	f240 032c 	movw	r3, #44	; 0x2c
   17656:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1765a:	681b      	ldr	r3, [r3, #0]
   1765c:	005a      	lsls	r2, r3, #1
   1765e:	687b      	ldr	r3, [r7, #4]
   17660:	429a      	cmp	r2, r3
   17662:	d83e      	bhi.n	176e2 <vApplicationTickHook+0x1de>
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
   17664:	f240 032c 	movw	r3, #44	; 0x2c
   17668:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1766c:	681a      	ldr	r2, [r3, #0]
   1766e:	687b      	ldr	r3, [r7, #4]
   17670:	fbb3 f1f2 	udiv	r1, r3, r2
   17674:	fb02 f201 	mul.w	r2, r2, r1
   17678:	1a9b      	subs	r3, r3, r2
   1767a:	2b00      	cmp	r3, #0
   1767c:	d026      	beq.n	176cc <vApplicationTickHook+0x1c8>
            xCurrentTime % xPeriodOfTask[2] == 0 ||
   1767e:	f240 032c 	movw	r3, #44	; 0x2c
   17682:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17686:	689a      	ldr	r2, [r3, #8]
   17688:	687b      	ldr	r3, [r7, #4]
   1768a:	fbb3 f1f2 	udiv	r1, r3, r2
   1768e:	fb02 f201 	mul.w	r2, r2, r1
   17692:	1a9b      	subs	r3, r3, r2
    
    // send semaphore to R-Servant to triggered it to cope with events 
    // when time meeting the start time of task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
   17694:	2b00      	cmp	r3, #0
   17696:	d019      	beq.n	176cc <vApplicationTickHook+0x1c8>
            xCurrentTime % xPeriodOfTask[2] == 0 ||
            xCurrentTime % xPeriodOfTask[12] == 0 ||
   17698:	f240 032c 	movw	r3, #44	; 0x2c
   1769c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   176a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   176a2:	687b      	ldr	r3, [r7, #4]
   176a4:	fbb3 f1f2 	udiv	r1, r3, r2
   176a8:	fb02 f201 	mul.w	r2, r2, r1
   176ac:	1a9b      	subs	r3, r3, r2
    // send semaphore to R-Servant to triggered it to cope with events 
    // when time meeting the start time of task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
            xCurrentTime % xPeriodOfTask[2] == 0 ||
   176ae:	2b00      	cmp	r3, #0
   176b0:	d00c      	beq.n	176cc <vApplicationTickHook+0x1c8>
            xCurrentTime % xPeriodOfTask[12] == 0 ||
            xCurrentTime % xPeriodOfTask[8] == 0)
   176b2:	f240 032c 	movw	r3, #44	; 0x2c
   176b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   176ba:	6a1a      	ldr	r2, [r3, #32]
   176bc:	687b      	ldr	r3, [r7, #4]
   176be:	fbb3 f1f2 	udiv	r1, r3, r2
   176c2:	fb02 f201 	mul.w	r2, r2, r1
   176c6:	1a9b      	subs	r3, r3, r2
    // when time meeting the start time of task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
            xCurrentTime % xPeriodOfTask[2] == 0 ||
            xCurrentTime % xPeriodOfTask[12] == 0 ||
   176c8:	2b00      	cmp	r3, #0
   176ca:	d10a      	bne.n	176e2 <vApplicationTickHook+0x1de>
            xCurrentTime % xPeriodOfTask[8] == 0)
        {
           xSemaphoreGive( xBinarySemaphore[21] ); 
   176cc:	f240 7398 	movw	r3, #1944	; 0x798
   176d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   176d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   176d6:	4618      	mov	r0, r3
   176d8:	2100      	movs	r1, #0
   176da:	2200      	movs	r2, #0
   176dc:	2300      	movs	r3, #0
   176de:	f7ec fbef 	bl	3ec0 <xQueueGenericSend>
        }
    }
}
   176e2:	3708      	adds	r7, #8
   176e4:	46bd      	mov	sp, r7
   176e6:	bd80      	pop	{r7, pc}

000176e8 <__aeabi_drsub>:
   176e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   176ec:	e002      	b.n	176f4 <__adddf3>
   176ee:	bf00      	nop

000176f0 <__aeabi_dsub>:
   176f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000176f4 <__adddf3>:
   176f4:	b530      	push	{r4, r5, lr}
   176f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   176fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
   176fe:	ea94 0f05 	teq	r4, r5
   17702:	bf08      	it	eq
   17704:	ea90 0f02 	teqeq	r0, r2
   17708:	bf1f      	itttt	ne
   1770a:	ea54 0c00 	orrsne.w	ip, r4, r0
   1770e:	ea55 0c02 	orrsne.w	ip, r5, r2
   17712:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   17716:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1771a:	f000 80e2 	beq.w	178e2 <__adddf3+0x1ee>
   1771e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   17722:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   17726:	bfb8      	it	lt
   17728:	426d      	neglt	r5, r5
   1772a:	dd0c      	ble.n	17746 <__adddf3+0x52>
   1772c:	442c      	add	r4, r5
   1772e:	ea80 0202 	eor.w	r2, r0, r2
   17732:	ea81 0303 	eor.w	r3, r1, r3
   17736:	ea82 0000 	eor.w	r0, r2, r0
   1773a:	ea83 0101 	eor.w	r1, r3, r1
   1773e:	ea80 0202 	eor.w	r2, r0, r2
   17742:	ea81 0303 	eor.w	r3, r1, r3
   17746:	2d36      	cmp	r5, #54	; 0x36
   17748:	bf88      	it	hi
   1774a:	bd30      	pophi	{r4, r5, pc}
   1774c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   17750:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17754:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   17758:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1775c:	d002      	beq.n	17764 <__adddf3+0x70>
   1775e:	4240      	negs	r0, r0
   17760:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17764:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   17768:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1776c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   17770:	d002      	beq.n	17778 <__adddf3+0x84>
   17772:	4252      	negs	r2, r2
   17774:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   17778:	ea94 0f05 	teq	r4, r5
   1777c:	f000 80a7 	beq.w	178ce <__adddf3+0x1da>
   17780:	f1a4 0401 	sub.w	r4, r4, #1
   17784:	f1d5 0e20 	rsbs	lr, r5, #32
   17788:	db0d      	blt.n	177a6 <__adddf3+0xb2>
   1778a:	fa02 fc0e 	lsl.w	ip, r2, lr
   1778e:	fa22 f205 	lsr.w	r2, r2, r5
   17792:	1880      	adds	r0, r0, r2
   17794:	f141 0100 	adc.w	r1, r1, #0
   17798:	fa03 f20e 	lsl.w	r2, r3, lr
   1779c:	1880      	adds	r0, r0, r2
   1779e:	fa43 f305 	asr.w	r3, r3, r5
   177a2:	4159      	adcs	r1, r3
   177a4:	e00e      	b.n	177c4 <__adddf3+0xd0>
   177a6:	f1a5 0520 	sub.w	r5, r5, #32
   177aa:	f10e 0e20 	add.w	lr, lr, #32
   177ae:	2a01      	cmp	r2, #1
   177b0:	fa03 fc0e 	lsl.w	ip, r3, lr
   177b4:	bf28      	it	cs
   177b6:	f04c 0c02 	orrcs.w	ip, ip, #2
   177ba:	fa43 f305 	asr.w	r3, r3, r5
   177be:	18c0      	adds	r0, r0, r3
   177c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   177c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   177c8:	d507      	bpl.n	177da <__adddf3+0xe6>
   177ca:	f04f 0e00 	mov.w	lr, #0
   177ce:	f1dc 0c00 	rsbs	ip, ip, #0
   177d2:	eb7e 0000 	sbcs.w	r0, lr, r0
   177d6:	eb6e 0101 	sbc.w	r1, lr, r1
   177da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   177de:	d31b      	bcc.n	17818 <__adddf3+0x124>
   177e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   177e4:	d30c      	bcc.n	17800 <__adddf3+0x10c>
   177e6:	0849      	lsrs	r1, r1, #1
   177e8:	ea5f 0030 	movs.w	r0, r0, rrx
   177ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
   177f0:	f104 0401 	add.w	r4, r4, #1
   177f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   177f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   177fc:	f080 809a 	bcs.w	17934 <__adddf3+0x240>
   17800:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   17804:	bf08      	it	eq
   17806:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1780a:	f150 0000 	adcs.w	r0, r0, #0
   1780e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17812:	ea41 0105 	orr.w	r1, r1, r5
   17816:	bd30      	pop	{r4, r5, pc}
   17818:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1781c:	4140      	adcs	r0, r0
   1781e:	eb41 0101 	adc.w	r1, r1, r1
   17822:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17826:	f1a4 0401 	sub.w	r4, r4, #1
   1782a:	d1e9      	bne.n	17800 <__adddf3+0x10c>
   1782c:	f091 0f00 	teq	r1, #0
   17830:	bf04      	itt	eq
   17832:	4601      	moveq	r1, r0
   17834:	2000      	moveq	r0, #0
   17836:	fab1 f381 	clz	r3, r1
   1783a:	bf08      	it	eq
   1783c:	3320      	addeq	r3, #32
   1783e:	f1a3 030b 	sub.w	r3, r3, #11
   17842:	f1b3 0220 	subs.w	r2, r3, #32
   17846:	da0c      	bge.n	17862 <__adddf3+0x16e>
   17848:	320c      	adds	r2, #12
   1784a:	dd08      	ble.n	1785e <__adddf3+0x16a>
   1784c:	f102 0c14 	add.w	ip, r2, #20
   17850:	f1c2 020c 	rsb	r2, r2, #12
   17854:	fa01 f00c 	lsl.w	r0, r1, ip
   17858:	fa21 f102 	lsr.w	r1, r1, r2
   1785c:	e00c      	b.n	17878 <__adddf3+0x184>
   1785e:	f102 0214 	add.w	r2, r2, #20
   17862:	bfd8      	it	le
   17864:	f1c2 0c20 	rsble	ip, r2, #32
   17868:	fa01 f102 	lsl.w	r1, r1, r2
   1786c:	fa20 fc0c 	lsr.w	ip, r0, ip
   17870:	bfdc      	itt	le
   17872:	ea41 010c 	orrle.w	r1, r1, ip
   17876:	4090      	lslle	r0, r2
   17878:	1ae4      	subs	r4, r4, r3
   1787a:	bfa2      	ittt	ge
   1787c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   17880:	4329      	orrge	r1, r5
   17882:	bd30      	popge	{r4, r5, pc}
   17884:	ea6f 0404 	mvn.w	r4, r4
   17888:	3c1f      	subs	r4, #31
   1788a:	da1c      	bge.n	178c6 <__adddf3+0x1d2>
   1788c:	340c      	adds	r4, #12
   1788e:	dc0e      	bgt.n	178ae <__adddf3+0x1ba>
   17890:	f104 0414 	add.w	r4, r4, #20
   17894:	f1c4 0220 	rsb	r2, r4, #32
   17898:	fa20 f004 	lsr.w	r0, r0, r4
   1789c:	fa01 f302 	lsl.w	r3, r1, r2
   178a0:	ea40 0003 	orr.w	r0, r0, r3
   178a4:	fa21 f304 	lsr.w	r3, r1, r4
   178a8:	ea45 0103 	orr.w	r1, r5, r3
   178ac:	bd30      	pop	{r4, r5, pc}
   178ae:	f1c4 040c 	rsb	r4, r4, #12
   178b2:	f1c4 0220 	rsb	r2, r4, #32
   178b6:	fa20 f002 	lsr.w	r0, r0, r2
   178ba:	fa01 f304 	lsl.w	r3, r1, r4
   178be:	ea40 0003 	orr.w	r0, r0, r3
   178c2:	4629      	mov	r1, r5
   178c4:	bd30      	pop	{r4, r5, pc}
   178c6:	fa21 f004 	lsr.w	r0, r1, r4
   178ca:	4629      	mov	r1, r5
   178cc:	bd30      	pop	{r4, r5, pc}
   178ce:	f094 0f00 	teq	r4, #0
   178d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   178d6:	bf06      	itte	eq
   178d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   178dc:	3401      	addeq	r4, #1
   178de:	3d01      	subne	r5, #1
   178e0:	e74e      	b.n	17780 <__adddf3+0x8c>
   178e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   178e6:	bf18      	it	ne
   178e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   178ec:	d029      	beq.n	17942 <__adddf3+0x24e>
   178ee:	ea94 0f05 	teq	r4, r5
   178f2:	bf08      	it	eq
   178f4:	ea90 0f02 	teqeq	r0, r2
   178f8:	d005      	beq.n	17906 <__adddf3+0x212>
   178fa:	ea54 0c00 	orrs.w	ip, r4, r0
   178fe:	bf04      	itt	eq
   17900:	4619      	moveq	r1, r3
   17902:	4610      	moveq	r0, r2
   17904:	bd30      	pop	{r4, r5, pc}
   17906:	ea91 0f03 	teq	r1, r3
   1790a:	bf1e      	ittt	ne
   1790c:	2100      	movne	r1, #0
   1790e:	2000      	movne	r0, #0
   17910:	bd30      	popne	{r4, r5, pc}
   17912:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   17916:	d105      	bne.n	17924 <__adddf3+0x230>
   17918:	0040      	lsls	r0, r0, #1
   1791a:	4149      	adcs	r1, r1
   1791c:	bf28      	it	cs
   1791e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   17922:	bd30      	pop	{r4, r5, pc}
   17924:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   17928:	bf3c      	itt	cc
   1792a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1792e:	bd30      	popcc	{r4, r5, pc}
   17930:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17934:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   17938:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1793c:	f04f 0000 	mov.w	r0, #0
   17940:	bd30      	pop	{r4, r5, pc}
   17942:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   17946:	bf1a      	itte	ne
   17948:	4619      	movne	r1, r3
   1794a:	4610      	movne	r0, r2
   1794c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   17950:	bf1c      	itt	ne
   17952:	460b      	movne	r3, r1
   17954:	4602      	movne	r2, r0
   17956:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1795a:	bf06      	itte	eq
   1795c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   17960:	ea91 0f03 	teqeq	r1, r3
   17964:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   17968:	bd30      	pop	{r4, r5, pc}
   1796a:	bf00      	nop

0001796c <__aeabi_ui2d>:
   1796c:	f090 0f00 	teq	r0, #0
   17970:	bf04      	itt	eq
   17972:	2100      	moveq	r1, #0
   17974:	4770      	bxeq	lr
   17976:	b530      	push	{r4, r5, lr}
   17978:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1797c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17980:	f04f 0500 	mov.w	r5, #0
   17984:	f04f 0100 	mov.w	r1, #0
   17988:	e750      	b.n	1782c <__adddf3+0x138>
   1798a:	bf00      	nop

0001798c <__aeabi_i2d>:
   1798c:	f090 0f00 	teq	r0, #0
   17990:	bf04      	itt	eq
   17992:	2100      	moveq	r1, #0
   17994:	4770      	bxeq	lr
   17996:	b530      	push	{r4, r5, lr}
   17998:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1799c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   179a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   179a4:	bf48      	it	mi
   179a6:	4240      	negmi	r0, r0
   179a8:	f04f 0100 	mov.w	r1, #0
   179ac:	e73e      	b.n	1782c <__adddf3+0x138>
   179ae:	bf00      	nop

000179b0 <__aeabi_f2d>:
   179b0:	0042      	lsls	r2, r0, #1
   179b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   179b6:	ea4f 0131 	mov.w	r1, r1, rrx
   179ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
   179be:	bf1f      	itttt	ne
   179c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   179c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   179c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   179cc:	4770      	bxne	lr
   179ce:	f092 0f00 	teq	r2, #0
   179d2:	bf14      	ite	ne
   179d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   179d8:	4770      	bxeq	lr
   179da:	b530      	push	{r4, r5, lr}
   179dc:	f44f 7460 	mov.w	r4, #896	; 0x380
   179e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   179e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   179e8:	e720      	b.n	1782c <__adddf3+0x138>
   179ea:	bf00      	nop

000179ec <__aeabi_ul2d>:
   179ec:	ea50 0201 	orrs.w	r2, r0, r1
   179f0:	bf08      	it	eq
   179f2:	4770      	bxeq	lr
   179f4:	b530      	push	{r4, r5, lr}
   179f6:	f04f 0500 	mov.w	r5, #0
   179fa:	e00a      	b.n	17a12 <__aeabi_l2d+0x16>

000179fc <__aeabi_l2d>:
   179fc:	ea50 0201 	orrs.w	r2, r0, r1
   17a00:	bf08      	it	eq
   17a02:	4770      	bxeq	lr
   17a04:	b530      	push	{r4, r5, lr}
   17a06:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   17a0a:	d502      	bpl.n	17a12 <__aeabi_l2d+0x16>
   17a0c:	4240      	negs	r0, r0
   17a0e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17a12:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17a16:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17a1a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   17a1e:	f43f aedc 	beq.w	177da <__adddf3+0xe6>
   17a22:	f04f 0203 	mov.w	r2, #3
   17a26:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17a2a:	bf18      	it	ne
   17a2c:	3203      	addne	r2, #3
   17a2e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17a32:	bf18      	it	ne
   17a34:	3203      	addne	r2, #3
   17a36:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   17a3a:	f1c2 0320 	rsb	r3, r2, #32
   17a3e:	fa00 fc03 	lsl.w	ip, r0, r3
   17a42:	fa20 f002 	lsr.w	r0, r0, r2
   17a46:	fa01 fe03 	lsl.w	lr, r1, r3
   17a4a:	ea40 000e 	orr.w	r0, r0, lr
   17a4e:	fa21 f102 	lsr.w	r1, r1, r2
   17a52:	4414      	add	r4, r2
   17a54:	e6c1      	b.n	177da <__adddf3+0xe6>
   17a56:	bf00      	nop

00017a58 <__aeabi_dmul>:
   17a58:	b570      	push	{r4, r5, r6, lr}
   17a5a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17a5e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17a62:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17a66:	bf1d      	ittte	ne
   17a68:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17a6c:	ea94 0f0c 	teqne	r4, ip
   17a70:	ea95 0f0c 	teqne	r5, ip
   17a74:	f000 f8de 	bleq	17c34 <__aeabi_dmul+0x1dc>
   17a78:	442c      	add	r4, r5
   17a7a:	ea81 0603 	eor.w	r6, r1, r3
   17a7e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   17a82:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   17a86:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   17a8a:	bf18      	it	ne
   17a8c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   17a90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17a94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   17a98:	d038      	beq.n	17b0c <__aeabi_dmul+0xb4>
   17a9a:	fba0 ce02 	umull	ip, lr, r0, r2
   17a9e:	f04f 0500 	mov.w	r5, #0
   17aa2:	fbe1 e502 	umlal	lr, r5, r1, r2
   17aa6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   17aaa:	fbe0 e503 	umlal	lr, r5, r0, r3
   17aae:	f04f 0600 	mov.w	r6, #0
   17ab2:	fbe1 5603 	umlal	r5, r6, r1, r3
   17ab6:	f09c 0f00 	teq	ip, #0
   17aba:	bf18      	it	ne
   17abc:	f04e 0e01 	orrne.w	lr, lr, #1
   17ac0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   17ac4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   17ac8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   17acc:	d204      	bcs.n	17ad8 <__aeabi_dmul+0x80>
   17ace:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   17ad2:	416d      	adcs	r5, r5
   17ad4:	eb46 0606 	adc.w	r6, r6, r6
   17ad8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   17adc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   17ae0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   17ae4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   17ae8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   17aec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17af0:	bf88      	it	hi
   17af2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17af6:	d81e      	bhi.n	17b36 <__aeabi_dmul+0xde>
   17af8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   17afc:	bf08      	it	eq
   17afe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   17b02:	f150 0000 	adcs.w	r0, r0, #0
   17b06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17b0a:	bd70      	pop	{r4, r5, r6, pc}
   17b0c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   17b10:	ea46 0101 	orr.w	r1, r6, r1
   17b14:	ea40 0002 	orr.w	r0, r0, r2
   17b18:	ea81 0103 	eor.w	r1, r1, r3
   17b1c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   17b20:	bfc2      	ittt	gt
   17b22:	ebd4 050c 	rsbsgt	r5, r4, ip
   17b26:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17b2a:	bd70      	popgt	{r4, r5, r6, pc}
   17b2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17b30:	f04f 0e00 	mov.w	lr, #0
   17b34:	3c01      	subs	r4, #1
   17b36:	f300 80ab 	bgt.w	17c90 <__aeabi_dmul+0x238>
   17b3a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   17b3e:	bfde      	ittt	le
   17b40:	2000      	movle	r0, #0
   17b42:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   17b46:	bd70      	pople	{r4, r5, r6, pc}
   17b48:	f1c4 0400 	rsb	r4, r4, #0
   17b4c:	3c20      	subs	r4, #32
   17b4e:	da35      	bge.n	17bbc <__aeabi_dmul+0x164>
   17b50:	340c      	adds	r4, #12
   17b52:	dc1b      	bgt.n	17b8c <__aeabi_dmul+0x134>
   17b54:	f104 0414 	add.w	r4, r4, #20
   17b58:	f1c4 0520 	rsb	r5, r4, #32
   17b5c:	fa00 f305 	lsl.w	r3, r0, r5
   17b60:	fa20 f004 	lsr.w	r0, r0, r4
   17b64:	fa01 f205 	lsl.w	r2, r1, r5
   17b68:	ea40 0002 	orr.w	r0, r0, r2
   17b6c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   17b70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17b74:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17b78:	fa21 f604 	lsr.w	r6, r1, r4
   17b7c:	eb42 0106 	adc.w	r1, r2, r6
   17b80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17b84:	bf08      	it	eq
   17b86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17b8a:	bd70      	pop	{r4, r5, r6, pc}
   17b8c:	f1c4 040c 	rsb	r4, r4, #12
   17b90:	f1c4 0520 	rsb	r5, r4, #32
   17b94:	fa00 f304 	lsl.w	r3, r0, r4
   17b98:	fa20 f005 	lsr.w	r0, r0, r5
   17b9c:	fa01 f204 	lsl.w	r2, r1, r4
   17ba0:	ea40 0002 	orr.w	r0, r0, r2
   17ba4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17ba8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17bac:	f141 0100 	adc.w	r1, r1, #0
   17bb0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17bb4:	bf08      	it	eq
   17bb6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17bba:	bd70      	pop	{r4, r5, r6, pc}
   17bbc:	f1c4 0520 	rsb	r5, r4, #32
   17bc0:	fa00 f205 	lsl.w	r2, r0, r5
   17bc4:	ea4e 0e02 	orr.w	lr, lr, r2
   17bc8:	fa20 f304 	lsr.w	r3, r0, r4
   17bcc:	fa01 f205 	lsl.w	r2, r1, r5
   17bd0:	ea43 0302 	orr.w	r3, r3, r2
   17bd4:	fa21 f004 	lsr.w	r0, r1, r4
   17bd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17bdc:	fa21 f204 	lsr.w	r2, r1, r4
   17be0:	ea20 0002 	bic.w	r0, r0, r2
   17be4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   17be8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17bec:	bf08      	it	eq
   17bee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17bf2:	bd70      	pop	{r4, r5, r6, pc}
   17bf4:	f094 0f00 	teq	r4, #0
   17bf8:	d10f      	bne.n	17c1a <__aeabi_dmul+0x1c2>
   17bfa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   17bfe:	0040      	lsls	r0, r0, #1
   17c00:	eb41 0101 	adc.w	r1, r1, r1
   17c04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17c08:	bf08      	it	eq
   17c0a:	3c01      	subeq	r4, #1
   17c0c:	d0f7      	beq.n	17bfe <__aeabi_dmul+0x1a6>
   17c0e:	ea41 0106 	orr.w	r1, r1, r6
   17c12:	f095 0f00 	teq	r5, #0
   17c16:	bf18      	it	ne
   17c18:	4770      	bxne	lr
   17c1a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   17c1e:	0052      	lsls	r2, r2, #1
   17c20:	eb43 0303 	adc.w	r3, r3, r3
   17c24:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   17c28:	bf08      	it	eq
   17c2a:	3d01      	subeq	r5, #1
   17c2c:	d0f7      	beq.n	17c1e <__aeabi_dmul+0x1c6>
   17c2e:	ea43 0306 	orr.w	r3, r3, r6
   17c32:	4770      	bx	lr
   17c34:	ea94 0f0c 	teq	r4, ip
   17c38:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17c3c:	bf18      	it	ne
   17c3e:	ea95 0f0c 	teqne	r5, ip
   17c42:	d00c      	beq.n	17c5e <__aeabi_dmul+0x206>
   17c44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17c48:	bf18      	it	ne
   17c4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17c4e:	d1d1      	bne.n	17bf4 <__aeabi_dmul+0x19c>
   17c50:	ea81 0103 	eor.w	r1, r1, r3
   17c54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17c58:	f04f 0000 	mov.w	r0, #0
   17c5c:	bd70      	pop	{r4, r5, r6, pc}
   17c5e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17c62:	bf06      	itte	eq
   17c64:	4610      	moveq	r0, r2
   17c66:	4619      	moveq	r1, r3
   17c68:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17c6c:	d019      	beq.n	17ca2 <__aeabi_dmul+0x24a>
   17c6e:	ea94 0f0c 	teq	r4, ip
   17c72:	d102      	bne.n	17c7a <__aeabi_dmul+0x222>
   17c74:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   17c78:	d113      	bne.n	17ca2 <__aeabi_dmul+0x24a>
   17c7a:	ea95 0f0c 	teq	r5, ip
   17c7e:	d105      	bne.n	17c8c <__aeabi_dmul+0x234>
   17c80:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   17c84:	bf1c      	itt	ne
   17c86:	4610      	movne	r0, r2
   17c88:	4619      	movne	r1, r3
   17c8a:	d10a      	bne.n	17ca2 <__aeabi_dmul+0x24a>
   17c8c:	ea81 0103 	eor.w	r1, r1, r3
   17c90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17c94:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17c98:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17c9c:	f04f 0000 	mov.w	r0, #0
   17ca0:	bd70      	pop	{r4, r5, r6, pc}
   17ca2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17ca6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   17caa:	bd70      	pop	{r4, r5, r6, pc}

00017cac <__aeabi_ddiv>:
   17cac:	b570      	push	{r4, r5, r6, lr}
   17cae:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17cb2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17cb6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17cba:	bf1d      	ittte	ne
   17cbc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17cc0:	ea94 0f0c 	teqne	r4, ip
   17cc4:	ea95 0f0c 	teqne	r5, ip
   17cc8:	f000 f8a7 	bleq	17e1a <__aeabi_ddiv+0x16e>
   17ccc:	eba4 0405 	sub.w	r4, r4, r5
   17cd0:	ea81 0e03 	eor.w	lr, r1, r3
   17cd4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17cd8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17cdc:	f000 8088 	beq.w	17df0 <__aeabi_ddiv+0x144>
   17ce0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   17ce4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   17ce8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   17cec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   17cf0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   17cf4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   17cf8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   17cfc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   17d00:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   17d04:	429d      	cmp	r5, r3
   17d06:	bf08      	it	eq
   17d08:	4296      	cmpeq	r6, r2
   17d0a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   17d0e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   17d12:	d202      	bcs.n	17d1a <__aeabi_ddiv+0x6e>
   17d14:	085b      	lsrs	r3, r3, #1
   17d16:	ea4f 0232 	mov.w	r2, r2, rrx
   17d1a:	1ab6      	subs	r6, r6, r2
   17d1c:	eb65 0503 	sbc.w	r5, r5, r3
   17d20:	085b      	lsrs	r3, r3, #1
   17d22:	ea4f 0232 	mov.w	r2, r2, rrx
   17d26:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   17d2a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   17d2e:	ebb6 0e02 	subs.w	lr, r6, r2
   17d32:	eb75 0e03 	sbcs.w	lr, r5, r3
   17d36:	bf22      	ittt	cs
   17d38:	1ab6      	subcs	r6, r6, r2
   17d3a:	4675      	movcs	r5, lr
   17d3c:	ea40 000c 	orrcs.w	r0, r0, ip
   17d40:	085b      	lsrs	r3, r3, #1
   17d42:	ea4f 0232 	mov.w	r2, r2, rrx
   17d46:	ebb6 0e02 	subs.w	lr, r6, r2
   17d4a:	eb75 0e03 	sbcs.w	lr, r5, r3
   17d4e:	bf22      	ittt	cs
   17d50:	1ab6      	subcs	r6, r6, r2
   17d52:	4675      	movcs	r5, lr
   17d54:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   17d58:	085b      	lsrs	r3, r3, #1
   17d5a:	ea4f 0232 	mov.w	r2, r2, rrx
   17d5e:	ebb6 0e02 	subs.w	lr, r6, r2
   17d62:	eb75 0e03 	sbcs.w	lr, r5, r3
   17d66:	bf22      	ittt	cs
   17d68:	1ab6      	subcs	r6, r6, r2
   17d6a:	4675      	movcs	r5, lr
   17d6c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   17d70:	085b      	lsrs	r3, r3, #1
   17d72:	ea4f 0232 	mov.w	r2, r2, rrx
   17d76:	ebb6 0e02 	subs.w	lr, r6, r2
   17d7a:	eb75 0e03 	sbcs.w	lr, r5, r3
   17d7e:	bf22      	ittt	cs
   17d80:	1ab6      	subcs	r6, r6, r2
   17d82:	4675      	movcs	r5, lr
   17d84:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   17d88:	ea55 0e06 	orrs.w	lr, r5, r6
   17d8c:	d018      	beq.n	17dc0 <__aeabi_ddiv+0x114>
   17d8e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   17d92:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   17d96:	ea4f 1606 	mov.w	r6, r6, lsl #4
   17d9a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   17d9e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   17da2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   17da6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   17daa:	d1c0      	bne.n	17d2e <__aeabi_ddiv+0x82>
   17dac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17db0:	d10b      	bne.n	17dca <__aeabi_ddiv+0x11e>
   17db2:	ea41 0100 	orr.w	r1, r1, r0
   17db6:	f04f 0000 	mov.w	r0, #0
   17dba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   17dbe:	e7b6      	b.n	17d2e <__aeabi_ddiv+0x82>
   17dc0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17dc4:	bf04      	itt	eq
   17dc6:	4301      	orreq	r1, r0
   17dc8:	2000      	moveq	r0, #0
   17dca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17dce:	bf88      	it	hi
   17dd0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17dd4:	f63f aeaf 	bhi.w	17b36 <__aeabi_dmul+0xde>
   17dd8:	ebb5 0c03 	subs.w	ip, r5, r3
   17ddc:	bf04      	itt	eq
   17dde:	ebb6 0c02 	subseq.w	ip, r6, r2
   17de2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   17de6:	f150 0000 	adcs.w	r0, r0, #0
   17dea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17dee:	bd70      	pop	{r4, r5, r6, pc}
   17df0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   17df4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   17df8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   17dfc:	bfc2      	ittt	gt
   17dfe:	ebd4 050c 	rsbsgt	r5, r4, ip
   17e02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17e06:	bd70      	popgt	{r4, r5, r6, pc}
   17e08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17e0c:	f04f 0e00 	mov.w	lr, #0
   17e10:	3c01      	subs	r4, #1
   17e12:	e690      	b.n	17b36 <__aeabi_dmul+0xde>
   17e14:	ea45 0e06 	orr.w	lr, r5, r6
   17e18:	e68d      	b.n	17b36 <__aeabi_dmul+0xde>
   17e1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17e1e:	ea94 0f0c 	teq	r4, ip
   17e22:	bf08      	it	eq
   17e24:	ea95 0f0c 	teqeq	r5, ip
   17e28:	f43f af3b 	beq.w	17ca2 <__aeabi_dmul+0x24a>
   17e2c:	ea94 0f0c 	teq	r4, ip
   17e30:	d10a      	bne.n	17e48 <__aeabi_ddiv+0x19c>
   17e32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   17e36:	f47f af34 	bne.w	17ca2 <__aeabi_dmul+0x24a>
   17e3a:	ea95 0f0c 	teq	r5, ip
   17e3e:	f47f af25 	bne.w	17c8c <__aeabi_dmul+0x234>
   17e42:	4610      	mov	r0, r2
   17e44:	4619      	mov	r1, r3
   17e46:	e72c      	b.n	17ca2 <__aeabi_dmul+0x24a>
   17e48:	ea95 0f0c 	teq	r5, ip
   17e4c:	d106      	bne.n	17e5c <__aeabi_ddiv+0x1b0>
   17e4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17e52:	f43f aefd 	beq.w	17c50 <__aeabi_dmul+0x1f8>
   17e56:	4610      	mov	r0, r2
   17e58:	4619      	mov	r1, r3
   17e5a:	e722      	b.n	17ca2 <__aeabi_dmul+0x24a>
   17e5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17e60:	bf18      	it	ne
   17e62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17e66:	f47f aec5 	bne.w	17bf4 <__aeabi_dmul+0x19c>
   17e6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   17e6e:	f47f af0d 	bne.w	17c8c <__aeabi_dmul+0x234>
   17e72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   17e76:	f47f aeeb 	bne.w	17c50 <__aeabi_dmul+0x1f8>
   17e7a:	e712      	b.n	17ca2 <__aeabi_dmul+0x24a>

00017e7c <__gedf2>:
   17e7c:	f04f 3cff 	mov.w	ip, #4294967295
   17e80:	e006      	b.n	17e90 <__cmpdf2+0x4>
   17e82:	bf00      	nop

00017e84 <__ledf2>:
   17e84:	f04f 0c01 	mov.w	ip, #1
   17e88:	e002      	b.n	17e90 <__cmpdf2+0x4>
   17e8a:	bf00      	nop

00017e8c <__cmpdf2>:
   17e8c:	f04f 0c01 	mov.w	ip, #1
   17e90:	f84d cd04 	str.w	ip, [sp, #-4]!
   17e94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   17e98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17e9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   17ea0:	bf18      	it	ne
   17ea2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   17ea6:	d01b      	beq.n	17ee0 <__cmpdf2+0x54>
   17ea8:	b001      	add	sp, #4
   17eaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   17eae:	bf0c      	ite	eq
   17eb0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   17eb4:	ea91 0f03 	teqne	r1, r3
   17eb8:	bf02      	ittt	eq
   17eba:	ea90 0f02 	teqeq	r0, r2
   17ebe:	2000      	moveq	r0, #0
   17ec0:	4770      	bxeq	lr
   17ec2:	f110 0f00 	cmn.w	r0, #0
   17ec6:	ea91 0f03 	teq	r1, r3
   17eca:	bf58      	it	pl
   17ecc:	4299      	cmppl	r1, r3
   17ece:	bf08      	it	eq
   17ed0:	4290      	cmpeq	r0, r2
   17ed2:	bf2c      	ite	cs
   17ed4:	17d8      	asrcs	r0, r3, #31
   17ed6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   17eda:	f040 0001 	orr.w	r0, r0, #1
   17ede:	4770      	bx	lr
   17ee0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   17ee4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17ee8:	d102      	bne.n	17ef0 <__cmpdf2+0x64>
   17eea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   17eee:	d107      	bne.n	17f00 <__cmpdf2+0x74>
   17ef0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   17ef4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17ef8:	d1d6      	bne.n	17ea8 <__cmpdf2+0x1c>
   17efa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   17efe:	d0d3      	beq.n	17ea8 <__cmpdf2+0x1c>
   17f00:	f85d 0b04 	ldr.w	r0, [sp], #4
   17f04:	4770      	bx	lr
   17f06:	bf00      	nop

00017f08 <__aeabi_cdrcmple>:
   17f08:	4684      	mov	ip, r0
   17f0a:	4610      	mov	r0, r2
   17f0c:	4662      	mov	r2, ip
   17f0e:	468c      	mov	ip, r1
   17f10:	4619      	mov	r1, r3
   17f12:	4663      	mov	r3, ip
   17f14:	e000      	b.n	17f18 <__aeabi_cdcmpeq>
   17f16:	bf00      	nop

00017f18 <__aeabi_cdcmpeq>:
   17f18:	b501      	push	{r0, lr}
   17f1a:	f7ff ffb7 	bl	17e8c <__cmpdf2>
   17f1e:	2800      	cmp	r0, #0
   17f20:	bf48      	it	mi
   17f22:	f110 0f00 	cmnmi.w	r0, #0
   17f26:	bd01      	pop	{r0, pc}

00017f28 <__aeabi_dcmpeq>:
   17f28:	f84d ed08 	str.w	lr, [sp, #-8]!
   17f2c:	f7ff fff4 	bl	17f18 <__aeabi_cdcmpeq>
   17f30:	bf0c      	ite	eq
   17f32:	2001      	moveq	r0, #1
   17f34:	2000      	movne	r0, #0
   17f36:	f85d fb08 	ldr.w	pc, [sp], #8
   17f3a:	bf00      	nop

00017f3c <__aeabi_dcmplt>:
   17f3c:	f84d ed08 	str.w	lr, [sp, #-8]!
   17f40:	f7ff ffea 	bl	17f18 <__aeabi_cdcmpeq>
   17f44:	bf34      	ite	cc
   17f46:	2001      	movcc	r0, #1
   17f48:	2000      	movcs	r0, #0
   17f4a:	f85d fb08 	ldr.w	pc, [sp], #8
   17f4e:	bf00      	nop

00017f50 <__aeabi_dcmple>:
   17f50:	f84d ed08 	str.w	lr, [sp, #-8]!
   17f54:	f7ff ffe0 	bl	17f18 <__aeabi_cdcmpeq>
   17f58:	bf94      	ite	ls
   17f5a:	2001      	movls	r0, #1
   17f5c:	2000      	movhi	r0, #0
   17f5e:	f85d fb08 	ldr.w	pc, [sp], #8
   17f62:	bf00      	nop

00017f64 <__aeabi_dcmpge>:
   17f64:	f84d ed08 	str.w	lr, [sp, #-8]!
   17f68:	f7ff ffce 	bl	17f08 <__aeabi_cdrcmple>
   17f6c:	bf94      	ite	ls
   17f6e:	2001      	movls	r0, #1
   17f70:	2000      	movhi	r0, #0
   17f72:	f85d fb08 	ldr.w	pc, [sp], #8
   17f76:	bf00      	nop

00017f78 <__aeabi_dcmpgt>:
   17f78:	f84d ed08 	str.w	lr, [sp, #-8]!
   17f7c:	f7ff ffc4 	bl	17f08 <__aeabi_cdrcmple>
   17f80:	bf34      	ite	cc
   17f82:	2001      	movcc	r0, #1
   17f84:	2000      	movcs	r0, #0
   17f86:	f85d fb08 	ldr.w	pc, [sp], #8
   17f8a:	bf00      	nop

00017f8c <__aeabi_d2iz>:
   17f8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   17f90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   17f94:	d215      	bcs.n	17fc2 <__aeabi_d2iz+0x36>
   17f96:	d511      	bpl.n	17fbc <__aeabi_d2iz+0x30>
   17f98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   17f9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   17fa0:	d912      	bls.n	17fc8 <__aeabi_d2iz+0x3c>
   17fa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   17fa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   17faa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   17fae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   17fb2:	fa23 f002 	lsr.w	r0, r3, r2
   17fb6:	bf18      	it	ne
   17fb8:	4240      	negne	r0, r0
   17fba:	4770      	bx	lr
   17fbc:	f04f 0000 	mov.w	r0, #0
   17fc0:	4770      	bx	lr
   17fc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   17fc6:	d105      	bne.n	17fd4 <__aeabi_d2iz+0x48>
   17fc8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   17fcc:	bf08      	it	eq
   17fce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   17fd2:	4770      	bx	lr
   17fd4:	f04f 0000 	mov.w	r0, #0
   17fd8:	4770      	bx	lr
   17fda:	bf00      	nop

00017fdc <__aeabi_d2uiz>:
   17fdc:	004a      	lsls	r2, r1, #1
   17fde:	d211      	bcs.n	18004 <__aeabi_d2uiz+0x28>
   17fe0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   17fe4:	d211      	bcs.n	1800a <__aeabi_d2uiz+0x2e>
   17fe6:	d50d      	bpl.n	18004 <__aeabi_d2uiz+0x28>
   17fe8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   17fec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   17ff0:	d40e      	bmi.n	18010 <__aeabi_d2uiz+0x34>
   17ff2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   17ff6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   17ffa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   17ffe:	fa23 f002 	lsr.w	r0, r3, r2
   18002:	4770      	bx	lr
   18004:	f04f 0000 	mov.w	r0, #0
   18008:	4770      	bx	lr
   1800a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1800e:	d102      	bne.n	18016 <__aeabi_d2uiz+0x3a>
   18010:	f04f 30ff 	mov.w	r0, #4294967295
   18014:	4770      	bx	lr
   18016:	f04f 0000 	mov.w	r0, #0
   1801a:	4770      	bx	lr

0001801c <__aeabi_d2f>:
   1801c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   18020:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   18024:	bf24      	itt	cs
   18026:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1802a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1802e:	d90d      	bls.n	1804c <__aeabi_d2f+0x30>
   18030:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18034:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   18038:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   1803c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   18040:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   18044:	bf08      	it	eq
   18046:	f020 0001 	biceq.w	r0, r0, #1
   1804a:	4770      	bx	lr
   1804c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   18050:	d121      	bne.n	18096 <__aeabi_d2f+0x7a>
   18052:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   18056:	bfbc      	itt	lt
   18058:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   1805c:	4770      	bxlt	lr
   1805e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18062:	ea4f 5252 	mov.w	r2, r2, lsr #21
   18066:	f1c2 0218 	rsb	r2, r2, #24
   1806a:	f1c2 0c20 	rsb	ip, r2, #32
   1806e:	fa10 f30c 	lsls.w	r3, r0, ip
   18072:	fa20 f002 	lsr.w	r0, r0, r2
   18076:	bf18      	it	ne
   18078:	f040 0001 	orrne.w	r0, r0, #1
   1807c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   18080:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   18084:	fa03 fc0c 	lsl.w	ip, r3, ip
   18088:	ea40 000c 	orr.w	r0, r0, ip
   1808c:	fa23 f302 	lsr.w	r3, r3, r2
   18090:	ea4f 0343 	mov.w	r3, r3, lsl #1
   18094:	e7cc      	b.n	18030 <__aeabi_d2f+0x14>
   18096:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1809a:	d107      	bne.n	180ac <__aeabi_d2f+0x90>
   1809c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   180a0:	bf1e      	ittt	ne
   180a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   180a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   180aa:	4770      	bxne	lr
   180ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   180b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   180b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   180b8:	4770      	bx	lr
   180ba:	bf00      	nop

000180bc <__aeabi_frsub>:
   180bc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   180c0:	e002      	b.n	180c8 <__addsf3>
   180c2:	bf00      	nop

000180c4 <__aeabi_fsub>:
   180c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000180c8 <__addsf3>:
   180c8:	0042      	lsls	r2, r0, #1
   180ca:	bf1f      	itttt	ne
   180cc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   180d0:	ea92 0f03 	teqne	r2, r3
   180d4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   180d8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   180dc:	d06a      	beq.n	181b4 <__addsf3+0xec>
   180de:	ea4f 6212 	mov.w	r2, r2, lsr #24
   180e2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   180e6:	bfc1      	itttt	gt
   180e8:	18d2      	addgt	r2, r2, r3
   180ea:	4041      	eorgt	r1, r0
   180ec:	4048      	eorgt	r0, r1
   180ee:	4041      	eorgt	r1, r0
   180f0:	bfb8      	it	lt
   180f2:	425b      	neglt	r3, r3
   180f4:	2b19      	cmp	r3, #25
   180f6:	bf88      	it	hi
   180f8:	4770      	bxhi	lr
   180fa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   180fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18102:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   18106:	bf18      	it	ne
   18108:	4240      	negne	r0, r0
   1810a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1810e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   18112:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   18116:	bf18      	it	ne
   18118:	4249      	negne	r1, r1
   1811a:	ea92 0f03 	teq	r2, r3
   1811e:	d03f      	beq.n	181a0 <__addsf3+0xd8>
   18120:	f1a2 0201 	sub.w	r2, r2, #1
   18124:	fa41 fc03 	asr.w	ip, r1, r3
   18128:	eb10 000c 	adds.w	r0, r0, ip
   1812c:	f1c3 0320 	rsb	r3, r3, #32
   18130:	fa01 f103 	lsl.w	r1, r1, r3
   18134:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18138:	d502      	bpl.n	18140 <__addsf3+0x78>
   1813a:	4249      	negs	r1, r1
   1813c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   18140:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   18144:	d313      	bcc.n	1816e <__addsf3+0xa6>
   18146:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1814a:	d306      	bcc.n	1815a <__addsf3+0x92>
   1814c:	0840      	lsrs	r0, r0, #1
   1814e:	ea4f 0131 	mov.w	r1, r1, rrx
   18152:	f102 0201 	add.w	r2, r2, #1
   18156:	2afe      	cmp	r2, #254	; 0xfe
   18158:	d251      	bcs.n	181fe <__addsf3+0x136>
   1815a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1815e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18162:	bf08      	it	eq
   18164:	f020 0001 	biceq.w	r0, r0, #1
   18168:	ea40 0003 	orr.w	r0, r0, r3
   1816c:	4770      	bx	lr
   1816e:	0049      	lsls	r1, r1, #1
   18170:	eb40 0000 	adc.w	r0, r0, r0
   18174:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   18178:	f1a2 0201 	sub.w	r2, r2, #1
   1817c:	d1ed      	bne.n	1815a <__addsf3+0x92>
   1817e:	fab0 fc80 	clz	ip, r0
   18182:	f1ac 0c08 	sub.w	ip, ip, #8
   18186:	ebb2 020c 	subs.w	r2, r2, ip
   1818a:	fa00 f00c 	lsl.w	r0, r0, ip
   1818e:	bfaa      	itet	ge
   18190:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   18194:	4252      	neglt	r2, r2
   18196:	4318      	orrge	r0, r3
   18198:	bfbc      	itt	lt
   1819a:	40d0      	lsrlt	r0, r2
   1819c:	4318      	orrlt	r0, r3
   1819e:	4770      	bx	lr
   181a0:	f092 0f00 	teq	r2, #0
   181a4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   181a8:	bf06      	itte	eq
   181aa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   181ae:	3201      	addeq	r2, #1
   181b0:	3b01      	subne	r3, #1
   181b2:	e7b5      	b.n	18120 <__addsf3+0x58>
   181b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
   181b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   181bc:	bf18      	it	ne
   181be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   181c2:	d021      	beq.n	18208 <__addsf3+0x140>
   181c4:	ea92 0f03 	teq	r2, r3
   181c8:	d004      	beq.n	181d4 <__addsf3+0x10c>
   181ca:	f092 0f00 	teq	r2, #0
   181ce:	bf08      	it	eq
   181d0:	4608      	moveq	r0, r1
   181d2:	4770      	bx	lr
   181d4:	ea90 0f01 	teq	r0, r1
   181d8:	bf1c      	itt	ne
   181da:	2000      	movne	r0, #0
   181dc:	4770      	bxne	lr
   181de:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   181e2:	d104      	bne.n	181ee <__addsf3+0x126>
   181e4:	0040      	lsls	r0, r0, #1
   181e6:	bf28      	it	cs
   181e8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   181ec:	4770      	bx	lr
   181ee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   181f2:	bf3c      	itt	cc
   181f4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   181f8:	4770      	bxcc	lr
   181fa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   181fe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   18202:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18206:	4770      	bx	lr
   18208:	ea7f 6222 	mvns.w	r2, r2, asr #24
   1820c:	bf16      	itet	ne
   1820e:	4608      	movne	r0, r1
   18210:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   18214:	4601      	movne	r1, r0
   18216:	0242      	lsls	r2, r0, #9
   18218:	bf06      	itte	eq
   1821a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   1821e:	ea90 0f01 	teqeq	r0, r1
   18222:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   18226:	4770      	bx	lr

00018228 <__aeabi_ui2f>:
   18228:	f04f 0300 	mov.w	r3, #0
   1822c:	e004      	b.n	18238 <__aeabi_i2f+0x8>
   1822e:	bf00      	nop

00018230 <__aeabi_i2f>:
   18230:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   18234:	bf48      	it	mi
   18236:	4240      	negmi	r0, r0
   18238:	ea5f 0c00 	movs.w	ip, r0
   1823c:	bf08      	it	eq
   1823e:	4770      	bxeq	lr
   18240:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   18244:	4601      	mov	r1, r0
   18246:	f04f 0000 	mov.w	r0, #0
   1824a:	e01c      	b.n	18286 <__aeabi_l2f+0x2a>

0001824c <__aeabi_ul2f>:
   1824c:	ea50 0201 	orrs.w	r2, r0, r1
   18250:	bf08      	it	eq
   18252:	4770      	bxeq	lr
   18254:	f04f 0300 	mov.w	r3, #0
   18258:	e00a      	b.n	18270 <__aeabi_l2f+0x14>
   1825a:	bf00      	nop

0001825c <__aeabi_l2f>:
   1825c:	ea50 0201 	orrs.w	r2, r0, r1
   18260:	bf08      	it	eq
   18262:	4770      	bxeq	lr
   18264:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   18268:	d502      	bpl.n	18270 <__aeabi_l2f+0x14>
   1826a:	4240      	negs	r0, r0
   1826c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18270:	ea5f 0c01 	movs.w	ip, r1
   18274:	bf02      	ittt	eq
   18276:	4684      	moveq	ip, r0
   18278:	4601      	moveq	r1, r0
   1827a:	2000      	moveq	r0, #0
   1827c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   18280:	bf08      	it	eq
   18282:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   18286:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1828a:	fabc f28c 	clz	r2, ip
   1828e:	3a08      	subs	r2, #8
   18290:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   18294:	db10      	blt.n	182b8 <__aeabi_l2f+0x5c>
   18296:	fa01 fc02 	lsl.w	ip, r1, r2
   1829a:	4463      	add	r3, ip
   1829c:	fa00 fc02 	lsl.w	ip, r0, r2
   182a0:	f1c2 0220 	rsb	r2, r2, #32
   182a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   182a8:	fa20 f202 	lsr.w	r2, r0, r2
   182ac:	eb43 0002 	adc.w	r0, r3, r2
   182b0:	bf08      	it	eq
   182b2:	f020 0001 	biceq.w	r0, r0, #1
   182b6:	4770      	bx	lr
   182b8:	f102 0220 	add.w	r2, r2, #32
   182bc:	fa01 fc02 	lsl.w	ip, r1, r2
   182c0:	f1c2 0220 	rsb	r2, r2, #32
   182c4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   182c8:	fa21 f202 	lsr.w	r2, r1, r2
   182cc:	eb43 0002 	adc.w	r0, r3, r2
   182d0:	bf08      	it	eq
   182d2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   182d6:	4770      	bx	lr

000182d8 <__aeabi_fmul>:
   182d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
   182dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   182e0:	bf1e      	ittt	ne
   182e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   182e6:	ea92 0f0c 	teqne	r2, ip
   182ea:	ea93 0f0c 	teqne	r3, ip
   182ee:	d06f      	beq.n	183d0 <__aeabi_fmul+0xf8>
   182f0:	441a      	add	r2, r3
   182f2:	ea80 0c01 	eor.w	ip, r0, r1
   182f6:	0240      	lsls	r0, r0, #9
   182f8:	bf18      	it	ne
   182fa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   182fe:	d01e      	beq.n	1833e <__aeabi_fmul+0x66>
   18300:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   18304:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   18308:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   1830c:	fba0 3101 	umull	r3, r1, r0, r1
   18310:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   18314:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   18318:	bf3e      	ittt	cc
   1831a:	0049      	lslcc	r1, r1, #1
   1831c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   18320:	005b      	lslcc	r3, r3, #1
   18322:	ea40 0001 	orr.w	r0, r0, r1
   18326:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   1832a:	2afd      	cmp	r2, #253	; 0xfd
   1832c:	d81d      	bhi.n	1836a <__aeabi_fmul+0x92>
   1832e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   18332:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18336:	bf08      	it	eq
   18338:	f020 0001 	biceq.w	r0, r0, #1
   1833c:	4770      	bx	lr
   1833e:	f090 0f00 	teq	r0, #0
   18342:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   18346:	bf08      	it	eq
   18348:	0249      	lsleq	r1, r1, #9
   1834a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1834e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   18352:	3a7f      	subs	r2, #127	; 0x7f
   18354:	bfc2      	ittt	gt
   18356:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1835a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1835e:	4770      	bxgt	lr
   18360:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18364:	f04f 0300 	mov.w	r3, #0
   18368:	3a01      	subs	r2, #1
   1836a:	dc5d      	bgt.n	18428 <__aeabi_fmul+0x150>
   1836c:	f112 0f19 	cmn.w	r2, #25
   18370:	bfdc      	itt	le
   18372:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   18376:	4770      	bxle	lr
   18378:	f1c2 0200 	rsb	r2, r2, #0
   1837c:	0041      	lsls	r1, r0, #1
   1837e:	fa21 f102 	lsr.w	r1, r1, r2
   18382:	f1c2 0220 	rsb	r2, r2, #32
   18386:	fa00 fc02 	lsl.w	ip, r0, r2
   1838a:	ea5f 0031 	movs.w	r0, r1, rrx
   1838e:	f140 0000 	adc.w	r0, r0, #0
   18392:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   18396:	bf08      	it	eq
   18398:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1839c:	4770      	bx	lr
   1839e:	f092 0f00 	teq	r2, #0
   183a2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   183a6:	bf02      	ittt	eq
   183a8:	0040      	lsleq	r0, r0, #1
   183aa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   183ae:	3a01      	subeq	r2, #1
   183b0:	d0f9      	beq.n	183a6 <__aeabi_fmul+0xce>
   183b2:	ea40 000c 	orr.w	r0, r0, ip
   183b6:	f093 0f00 	teq	r3, #0
   183ba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   183be:	bf02      	ittt	eq
   183c0:	0049      	lsleq	r1, r1, #1
   183c2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   183c6:	3b01      	subeq	r3, #1
   183c8:	d0f9      	beq.n	183be <__aeabi_fmul+0xe6>
   183ca:	ea41 010c 	orr.w	r1, r1, ip
   183ce:	e78f      	b.n	182f0 <__aeabi_fmul+0x18>
   183d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   183d4:	ea92 0f0c 	teq	r2, ip
   183d8:	bf18      	it	ne
   183da:	ea93 0f0c 	teqne	r3, ip
   183de:	d00a      	beq.n	183f6 <__aeabi_fmul+0x11e>
   183e0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   183e4:	bf18      	it	ne
   183e6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   183ea:	d1d8      	bne.n	1839e <__aeabi_fmul+0xc6>
   183ec:	ea80 0001 	eor.w	r0, r0, r1
   183f0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   183f4:	4770      	bx	lr
   183f6:	f090 0f00 	teq	r0, #0
   183fa:	bf17      	itett	ne
   183fc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   18400:	4608      	moveq	r0, r1
   18402:	f091 0f00 	teqne	r1, #0
   18406:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   1840a:	d014      	beq.n	18436 <__aeabi_fmul+0x15e>
   1840c:	ea92 0f0c 	teq	r2, ip
   18410:	d101      	bne.n	18416 <__aeabi_fmul+0x13e>
   18412:	0242      	lsls	r2, r0, #9
   18414:	d10f      	bne.n	18436 <__aeabi_fmul+0x15e>
   18416:	ea93 0f0c 	teq	r3, ip
   1841a:	d103      	bne.n	18424 <__aeabi_fmul+0x14c>
   1841c:	024b      	lsls	r3, r1, #9
   1841e:	bf18      	it	ne
   18420:	4608      	movne	r0, r1
   18422:	d108      	bne.n	18436 <__aeabi_fmul+0x15e>
   18424:	ea80 0001 	eor.w	r0, r0, r1
   18428:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1842c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18430:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18434:	4770      	bx	lr
   18436:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1843a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   1843e:	4770      	bx	lr

00018440 <__aeabi_fdiv>:
   18440:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18444:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   18448:	bf1e      	ittt	ne
   1844a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1844e:	ea92 0f0c 	teqne	r2, ip
   18452:	ea93 0f0c 	teqne	r3, ip
   18456:	d069      	beq.n	1852c <__aeabi_fdiv+0xec>
   18458:	eba2 0203 	sub.w	r2, r2, r3
   1845c:	ea80 0c01 	eor.w	ip, r0, r1
   18460:	0249      	lsls	r1, r1, #9
   18462:	ea4f 2040 	mov.w	r0, r0, lsl #9
   18466:	d037      	beq.n	184d8 <__aeabi_fdiv+0x98>
   18468:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1846c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   18470:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   18474:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   18478:	428b      	cmp	r3, r1
   1847a:	bf38      	it	cc
   1847c:	005b      	lslcc	r3, r3, #1
   1847e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   18482:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   18486:	428b      	cmp	r3, r1
   18488:	bf24      	itt	cs
   1848a:	1a5b      	subcs	r3, r3, r1
   1848c:	ea40 000c 	orrcs.w	r0, r0, ip
   18490:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   18494:	bf24      	itt	cs
   18496:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   1849a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1849e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   184a2:	bf24      	itt	cs
   184a4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   184a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   184ac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   184b0:	bf24      	itt	cs
   184b2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   184b6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   184ba:	011b      	lsls	r3, r3, #4
   184bc:	bf18      	it	ne
   184be:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   184c2:	d1e0      	bne.n	18486 <__aeabi_fdiv+0x46>
   184c4:	2afd      	cmp	r2, #253	; 0xfd
   184c6:	f63f af50 	bhi.w	1836a <__aeabi_fmul+0x92>
   184ca:	428b      	cmp	r3, r1
   184cc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   184d0:	bf08      	it	eq
   184d2:	f020 0001 	biceq.w	r0, r0, #1
   184d6:	4770      	bx	lr
   184d8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   184dc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   184e0:	327f      	adds	r2, #127	; 0x7f
   184e2:	bfc2      	ittt	gt
   184e4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   184e8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   184ec:	4770      	bxgt	lr
   184ee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   184f2:	f04f 0300 	mov.w	r3, #0
   184f6:	3a01      	subs	r2, #1
   184f8:	e737      	b.n	1836a <__aeabi_fmul+0x92>
   184fa:	f092 0f00 	teq	r2, #0
   184fe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   18502:	bf02      	ittt	eq
   18504:	0040      	lsleq	r0, r0, #1
   18506:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1850a:	3a01      	subeq	r2, #1
   1850c:	d0f9      	beq.n	18502 <__aeabi_fdiv+0xc2>
   1850e:	ea40 000c 	orr.w	r0, r0, ip
   18512:	f093 0f00 	teq	r3, #0
   18516:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1851a:	bf02      	ittt	eq
   1851c:	0049      	lsleq	r1, r1, #1
   1851e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   18522:	3b01      	subeq	r3, #1
   18524:	d0f9      	beq.n	1851a <__aeabi_fdiv+0xda>
   18526:	ea41 010c 	orr.w	r1, r1, ip
   1852a:	e795      	b.n	18458 <__aeabi_fdiv+0x18>
   1852c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   18530:	ea92 0f0c 	teq	r2, ip
   18534:	d108      	bne.n	18548 <__aeabi_fdiv+0x108>
   18536:	0242      	lsls	r2, r0, #9
   18538:	f47f af7d 	bne.w	18436 <__aeabi_fmul+0x15e>
   1853c:	ea93 0f0c 	teq	r3, ip
   18540:	f47f af70 	bne.w	18424 <__aeabi_fmul+0x14c>
   18544:	4608      	mov	r0, r1
   18546:	e776      	b.n	18436 <__aeabi_fmul+0x15e>
   18548:	ea93 0f0c 	teq	r3, ip
   1854c:	d104      	bne.n	18558 <__aeabi_fdiv+0x118>
   1854e:	024b      	lsls	r3, r1, #9
   18550:	f43f af4c 	beq.w	183ec <__aeabi_fmul+0x114>
   18554:	4608      	mov	r0, r1
   18556:	e76e      	b.n	18436 <__aeabi_fmul+0x15e>
   18558:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1855c:	bf18      	it	ne
   1855e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   18562:	d1ca      	bne.n	184fa <__aeabi_fdiv+0xba>
   18564:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   18568:	f47f af5c 	bne.w	18424 <__aeabi_fmul+0x14c>
   1856c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   18570:	f47f af3c 	bne.w	183ec <__aeabi_fmul+0x114>
   18574:	e75f      	b.n	18436 <__aeabi_fmul+0x15e>
   18576:	bf00      	nop

00018578 <__gesf2>:
   18578:	f04f 3cff 	mov.w	ip, #4294967295
   1857c:	e006      	b.n	1858c <__cmpsf2+0x4>
   1857e:	bf00      	nop

00018580 <__lesf2>:
   18580:	f04f 0c01 	mov.w	ip, #1
   18584:	e002      	b.n	1858c <__cmpsf2+0x4>
   18586:	bf00      	nop

00018588 <__cmpsf2>:
   18588:	f04f 0c01 	mov.w	ip, #1
   1858c:	f84d cd04 	str.w	ip, [sp, #-4]!
   18590:	ea4f 0240 	mov.w	r2, r0, lsl #1
   18594:	ea4f 0341 	mov.w	r3, r1, lsl #1
   18598:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1859c:	bf18      	it	ne
   1859e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   185a2:	d011      	beq.n	185c8 <__cmpsf2+0x40>
   185a4:	b001      	add	sp, #4
   185a6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   185aa:	bf18      	it	ne
   185ac:	ea90 0f01 	teqne	r0, r1
   185b0:	bf58      	it	pl
   185b2:	ebb2 0003 	subspl.w	r0, r2, r3
   185b6:	bf88      	it	hi
   185b8:	17c8      	asrhi	r0, r1, #31
   185ba:	bf38      	it	cc
   185bc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   185c0:	bf18      	it	ne
   185c2:	f040 0001 	orrne.w	r0, r0, #1
   185c6:	4770      	bx	lr
   185c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   185cc:	d102      	bne.n	185d4 <__cmpsf2+0x4c>
   185ce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   185d2:	d105      	bne.n	185e0 <__cmpsf2+0x58>
   185d4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   185d8:	d1e4      	bne.n	185a4 <__cmpsf2+0x1c>
   185da:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   185de:	d0e1      	beq.n	185a4 <__cmpsf2+0x1c>
   185e0:	f85d 0b04 	ldr.w	r0, [sp], #4
   185e4:	4770      	bx	lr
   185e6:	bf00      	nop

000185e8 <__aeabi_cfrcmple>:
   185e8:	4684      	mov	ip, r0
   185ea:	4608      	mov	r0, r1
   185ec:	4661      	mov	r1, ip
   185ee:	e7ff      	b.n	185f0 <__aeabi_cfcmpeq>

000185f0 <__aeabi_cfcmpeq>:
   185f0:	b50f      	push	{r0, r1, r2, r3, lr}
   185f2:	f7ff ffc9 	bl	18588 <__cmpsf2>
   185f6:	2800      	cmp	r0, #0
   185f8:	bf48      	it	mi
   185fa:	f110 0f00 	cmnmi.w	r0, #0
   185fe:	bd0f      	pop	{r0, r1, r2, r3, pc}

00018600 <__aeabi_fcmpeq>:
   18600:	f84d ed08 	str.w	lr, [sp, #-8]!
   18604:	f7ff fff4 	bl	185f0 <__aeabi_cfcmpeq>
   18608:	bf0c      	ite	eq
   1860a:	2001      	moveq	r0, #1
   1860c:	2000      	movne	r0, #0
   1860e:	f85d fb08 	ldr.w	pc, [sp], #8
   18612:	bf00      	nop

00018614 <__aeabi_fcmplt>:
   18614:	f84d ed08 	str.w	lr, [sp, #-8]!
   18618:	f7ff ffea 	bl	185f0 <__aeabi_cfcmpeq>
   1861c:	bf34      	ite	cc
   1861e:	2001      	movcc	r0, #1
   18620:	2000      	movcs	r0, #0
   18622:	f85d fb08 	ldr.w	pc, [sp], #8
   18626:	bf00      	nop

00018628 <__aeabi_fcmple>:
   18628:	f84d ed08 	str.w	lr, [sp, #-8]!
   1862c:	f7ff ffe0 	bl	185f0 <__aeabi_cfcmpeq>
   18630:	bf94      	ite	ls
   18632:	2001      	movls	r0, #1
   18634:	2000      	movhi	r0, #0
   18636:	f85d fb08 	ldr.w	pc, [sp], #8
   1863a:	bf00      	nop

0001863c <__aeabi_fcmpge>:
   1863c:	f84d ed08 	str.w	lr, [sp, #-8]!
   18640:	f7ff ffd2 	bl	185e8 <__aeabi_cfrcmple>
   18644:	bf94      	ite	ls
   18646:	2001      	movls	r0, #1
   18648:	2000      	movhi	r0, #0
   1864a:	f85d fb08 	ldr.w	pc, [sp], #8
   1864e:	bf00      	nop

00018650 <__aeabi_fcmpgt>:
   18650:	f84d ed08 	str.w	lr, [sp, #-8]!
   18654:	f7ff ffc8 	bl	185e8 <__aeabi_cfrcmple>
   18658:	bf34      	ite	cc
   1865a:	2001      	movcc	r0, #1
   1865c:	2000      	movcs	r0, #0
   1865e:	f85d fb08 	ldr.w	pc, [sp], #8
   18662:	bf00      	nop

00018664 <__aeabi_f2iz>:
   18664:	ea4f 0240 	mov.w	r2, r0, lsl #1
   18668:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   1866c:	d30f      	bcc.n	1868e <__aeabi_f2iz+0x2a>
   1866e:	f04f 039e 	mov.w	r3, #158	; 0x9e
   18672:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   18676:	d90d      	bls.n	18694 <__aeabi_f2iz+0x30>
   18678:	ea4f 2300 	mov.w	r3, r0, lsl #8
   1867c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   18680:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   18684:	fa23 f002 	lsr.w	r0, r3, r2
   18688:	bf18      	it	ne
   1868a:	4240      	negne	r0, r0
   1868c:	4770      	bx	lr
   1868e:	f04f 0000 	mov.w	r0, #0
   18692:	4770      	bx	lr
   18694:	f112 0f61 	cmn.w	r2, #97	; 0x61
   18698:	d101      	bne.n	1869e <__aeabi_f2iz+0x3a>
   1869a:	0242      	lsls	r2, r0, #9
   1869c:	d105      	bne.n	186aa <__aeabi_f2iz+0x46>
   1869e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   186a2:	bf08      	it	eq
   186a4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   186a8:	4770      	bx	lr
   186aa:	f04f 0000 	mov.w	r0, #0
   186ae:	4770      	bx	lr

000186b0 <memcpy>:
   186b0:	2a0f      	cmp	r2, #15
   186b2:	b4f0      	push	{r4, r5, r6, r7}
   186b4:	d945      	bls.n	18742 <memcpy+0x92>
   186b6:	ea40 0301 	orr.w	r3, r0, r1
   186ba:	079b      	lsls	r3, r3, #30
   186bc:	d145      	bne.n	1874a <memcpy+0x9a>
   186be:	f1a2 0710 	sub.w	r7, r2, #16
   186c2:	460c      	mov	r4, r1
   186c4:	4603      	mov	r3, r0
   186c6:	093f      	lsrs	r7, r7, #4
   186c8:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   186cc:	3610      	adds	r6, #16
   186ce:	6825      	ldr	r5, [r4, #0]
   186d0:	3310      	adds	r3, #16
   186d2:	3410      	adds	r4, #16
   186d4:	f843 5c10 	str.w	r5, [r3, #-16]
   186d8:	f854 5c0c 	ldr.w	r5, [r4, #-12]
   186dc:	f843 5c0c 	str.w	r5, [r3, #-12]
   186e0:	f854 5c08 	ldr.w	r5, [r4, #-8]
   186e4:	f843 5c08 	str.w	r5, [r3, #-8]
   186e8:	f854 5c04 	ldr.w	r5, [r4, #-4]
   186ec:	f843 5c04 	str.w	r5, [r3, #-4]
   186f0:	42b3      	cmp	r3, r6
   186f2:	d1ec      	bne.n	186ce <memcpy+0x1e>
   186f4:	1c7b      	adds	r3, r7, #1
   186f6:	f002 0c0f 	and.w	ip, r2, #15
   186fa:	f1bc 0f03 	cmp.w	ip, #3
   186fe:	ea4f 1303 	mov.w	r3, r3, lsl #4
   18702:	4419      	add	r1, r3
   18704:	4403      	add	r3, r0
   18706:	d922      	bls.n	1874e <memcpy+0x9e>
   18708:	460e      	mov	r6, r1
   1870a:	461d      	mov	r5, r3
   1870c:	4664      	mov	r4, ip
   1870e:	f856 7b04 	ldr.w	r7, [r6], #4
   18712:	3c04      	subs	r4, #4
   18714:	2c03      	cmp	r4, #3
   18716:	f845 7b04 	str.w	r7, [r5], #4
   1871a:	d8f8      	bhi.n	1870e <memcpy+0x5e>
   1871c:	f1ac 0404 	sub.w	r4, ip, #4
   18720:	f002 0203 	and.w	r2, r2, #3
   18724:	f024 0403 	bic.w	r4, r4, #3
   18728:	3404      	adds	r4, #4
   1872a:	4423      	add	r3, r4
   1872c:	4421      	add	r1, r4
   1872e:	b132      	cbz	r2, 1873e <memcpy+0x8e>
   18730:	440a      	add	r2, r1
   18732:	f811 4b01 	ldrb.w	r4, [r1], #1
   18736:	4291      	cmp	r1, r2
   18738:	f803 4b01 	strb.w	r4, [r3], #1
   1873c:	d1f9      	bne.n	18732 <memcpy+0x82>
   1873e:	bcf0      	pop	{r4, r5, r6, r7}
   18740:	4770      	bx	lr
   18742:	4603      	mov	r3, r0
   18744:	2a00      	cmp	r2, #0
   18746:	d1f3      	bne.n	18730 <memcpy+0x80>
   18748:	e7f9      	b.n	1873e <memcpy+0x8e>
   1874a:	4603      	mov	r3, r0
   1874c:	e7f0      	b.n	18730 <memcpy+0x80>
   1874e:	4662      	mov	r2, ip
   18750:	2a00      	cmp	r2, #0
   18752:	d1ed      	bne.n	18730 <memcpy+0x80>
   18754:	e7f3      	b.n	1873e <memcpy+0x8e>
   18756:	bf00      	nop

00018758 <memset>:
   18758:	0783      	lsls	r3, r0, #30
   1875a:	b4f0      	push	{r4, r5, r6, r7}
   1875c:	d048      	beq.n	187f0 <memset+0x98>
   1875e:	1e54      	subs	r4, r2, #1
   18760:	2a00      	cmp	r2, #0
   18762:	d043      	beq.n	187ec <memset+0x94>
   18764:	b2cd      	uxtb	r5, r1
   18766:	4603      	mov	r3, r0
   18768:	e002      	b.n	18770 <memset+0x18>
   1876a:	2c00      	cmp	r4, #0
   1876c:	d03e      	beq.n	187ec <memset+0x94>
   1876e:	4614      	mov	r4, r2
   18770:	f803 5b01 	strb.w	r5, [r3], #1
   18774:	f013 0f03 	tst.w	r3, #3
   18778:	f104 32ff 	add.w	r2, r4, #4294967295
   1877c:	d1f5      	bne.n	1876a <memset+0x12>
   1877e:	2c03      	cmp	r4, #3
   18780:	d92d      	bls.n	187de <memset+0x86>
   18782:	b2cd      	uxtb	r5, r1
   18784:	2c0f      	cmp	r4, #15
   18786:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1878a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1878e:	d918      	bls.n	187c2 <memset+0x6a>
   18790:	f1a4 0710 	sub.w	r7, r4, #16
   18794:	f103 0610 	add.w	r6, r3, #16
   18798:	461a      	mov	r2, r3
   1879a:	093f      	lsrs	r7, r7, #4
   1879c:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   187a0:	6015      	str	r5, [r2, #0]
   187a2:	3210      	adds	r2, #16
   187a4:	f842 5c0c 	str.w	r5, [r2, #-12]
   187a8:	f842 5c08 	str.w	r5, [r2, #-8]
   187ac:	f842 5c04 	str.w	r5, [r2, #-4]
   187b0:	42b2      	cmp	r2, r6
   187b2:	d1f5      	bne.n	187a0 <memset+0x48>
   187b4:	f004 040f 	and.w	r4, r4, #15
   187b8:	3701      	adds	r7, #1
   187ba:	2c03      	cmp	r4, #3
   187bc:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   187c0:	d90d      	bls.n	187de <memset+0x86>
   187c2:	461e      	mov	r6, r3
   187c4:	4622      	mov	r2, r4
   187c6:	3a04      	subs	r2, #4
   187c8:	f846 5b04 	str.w	r5, [r6], #4
   187cc:	2a03      	cmp	r2, #3
   187ce:	d8fa      	bhi.n	187c6 <memset+0x6e>
   187d0:	1f22      	subs	r2, r4, #4
   187d2:	f004 0403 	and.w	r4, r4, #3
   187d6:	f022 0203 	bic.w	r2, r2, #3
   187da:	3204      	adds	r2, #4
   187dc:	4413      	add	r3, r2
   187de:	b12c      	cbz	r4, 187ec <memset+0x94>
   187e0:	b2c9      	uxtb	r1, r1
   187e2:	441c      	add	r4, r3
   187e4:	f803 1b01 	strb.w	r1, [r3], #1
   187e8:	42a3      	cmp	r3, r4
   187ea:	d1fb      	bne.n	187e4 <memset+0x8c>
   187ec:	bcf0      	pop	{r4, r5, r6, r7}
   187ee:	4770      	bx	lr
   187f0:	4614      	mov	r4, r2
   187f2:	4603      	mov	r3, r0
   187f4:	e7c3      	b.n	1877e <memset+0x26>
   187f6:	bf00      	nop

000187f8 <strncpy>:
   187f8:	ea40 0301 	orr.w	r3, r0, r1
   187fc:	079b      	lsls	r3, r3, #30
   187fe:	b470      	push	{r4, r5, r6}
   18800:	d12b      	bne.n	1885a <strncpy+0x62>
   18802:	2a03      	cmp	r2, #3
   18804:	bf84      	itt	hi
   18806:	460b      	movhi	r3, r1
   18808:	4605      	movhi	r5, r0
   1880a:	d926      	bls.n	1885a <strncpy+0x62>
   1880c:	4619      	mov	r1, r3
   1880e:	f853 4b04 	ldr.w	r4, [r3], #4
   18812:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
   18816:	ea26 0604 	bic.w	r6, r6, r4
   1881a:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   1881e:	d105      	bne.n	1882c <strncpy+0x34>
   18820:	3a04      	subs	r2, #4
   18822:	f845 4b04 	str.w	r4, [r5], #4
   18826:	2a03      	cmp	r2, #3
   18828:	4619      	mov	r1, r3
   1882a:	d8ef      	bhi.n	1880c <strncpy+0x14>
   1882c:	b19a      	cbz	r2, 18856 <strncpy+0x5e>
   1882e:	780c      	ldrb	r4, [r1, #0]
   18830:	3a01      	subs	r2, #1
   18832:	1c6b      	adds	r3, r5, #1
   18834:	702c      	strb	r4, [r5, #0]
   18836:	b13c      	cbz	r4, 18848 <strncpy+0x50>
   18838:	b16a      	cbz	r2, 18856 <strncpy+0x5e>
   1883a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1883e:	3a01      	subs	r2, #1
   18840:	f803 4b01 	strb.w	r4, [r3], #1
   18844:	2c00      	cmp	r4, #0
   18846:	d1f7      	bne.n	18838 <strncpy+0x40>
   18848:	b12a      	cbz	r2, 18856 <strncpy+0x5e>
   1884a:	441a      	add	r2, r3
   1884c:	2100      	movs	r1, #0
   1884e:	f803 1b01 	strb.w	r1, [r3], #1
   18852:	4293      	cmp	r3, r2
   18854:	d1fb      	bne.n	1884e <strncpy+0x56>
   18856:	bc70      	pop	{r4, r5, r6}
   18858:	4770      	bx	lr
   1885a:	4605      	mov	r5, r0
   1885c:	e7e6      	b.n	1882c <strncpy+0x34>
   1885e:	bf00      	nop

00018860 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
   18860:	2100      	movs	r1, #0
  b	LoopCopyDataInit
   18862:	e003      	b.n	1886c <LoopCopyDataInit>

00018864 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
   18864:	4b0a      	ldr	r3, [pc, #40]	; (18890 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
   18866:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
   18868:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
   1886a:	3104      	adds	r1, #4

0001886c <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   1886c:	4809      	ldr	r0, [pc, #36]	; (18894 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
   1886e:	4b0a      	ldr	r3, [pc, #40]	; (18898 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
   18870:	1842      	adds	r2, r0, r1
	cmp	r2, r3
   18872:	429a      	cmp	r2, r3
	bcc	CopyDataInit
   18874:	d3f6      	bcc.n	18864 <CopyDataInit>
	ldr	r2, =_sbss
   18876:	4a09      	ldr	r2, [pc, #36]	; (1889c <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
   18878:	e002      	b.n	18880 <LoopFillZerobss>

0001887a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
   1887a:	2300      	movs	r3, #0
	str	r3, [r2], #4
   1887c:	f842 3b04 	str.w	r3, [r2], #4

00018880 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
   18880:	4b07      	ldr	r3, [pc, #28]	; (188a0 <LoopFillZerobss+0x20>)
	cmp	r2, r3
   18882:	429a      	cmp	r2, r3
	bcc	FillZerobss
   18884:	d3f9      	bcc.n	1887a <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
   18886:	f7e7 fd59 	bl	33c <SystemInit>
/* Call the application's entry point.*/
	bl	main
   1888a:	f7fe fbff 	bl	1708c <main>
	bx	lr    
   1888e:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
   18890:	00018aec 	.word	0x00018aec
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   18894:	20000000 	.word	0x20000000
	ldr	r3, =_edata
   18898:	2000031c 	.word	0x2000031c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
   1889c:	20000320 	.word	0x20000320
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
   188a0:	2000b360 	.word	0x2000b360

000188a4 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
   188a4:	e7fe      	b.n	188a4 <ADC1_2_IRQHandler>
   188a6:	0000      	movs	r0, r0
   188a8:	6c6c616d 	.word	0x6c6c616d
   188ac:	6620636f 	.word	0x6620636f
   188b0:	6520726f 	.word	0x6520726f
   188b4:	746e6576 	.word	0x746e6576
   188b8:	61747320 	.word	0x61747320
   188bc:	66206b63 	.word	0x66206b63
   188c0:	656c6961 	.word	0x656c6961
   188c4:	000d0a64 	.word	0x000d0a64
   188c8:	72656874 	.word	0x72656874
   188cc:	72612065 	.word	0x72612065
   188d0:	65732065 	.word	0x65732065
   188d4:	726f736e 	.word	0x726f736e
   188d8:	73696d20 	.word	0x73696d20
   188dc:	676e6973 	.word	0x676e6973
   188e0:	61656420 	.word	0x61656420
   188e4:	6e696c64 	.word	0x6e696c64
   188e8:	000d0a65 	.word	0x000d0a65
   188ec:	72656874 	.word	0x72656874
   188f0:	72612065 	.word	0x72612065
   188f4:	65732065 	.word	0x65732065
   188f8:	6e617672 	.word	0x6e617672
   188fc:	6d207374 	.word	0x6d207374
   18900:	69737369 	.word	0x69737369
   18904:	6420676e 	.word	0x6420676e
   18908:	6c646165 	.word	0x6c646165
   1890c:	0a656e69 	.word	0x0a656e69
   18910:	0000000d 	.word	0x0000000d
   18914:	6f727245 	.word	0x6f727245
   18918:	54203a72 	.word	0x54203a72
   1891c:	20736968 	.word	0x20736968
   18920:	6e657665 	.word	0x6e657665
   18924:	61682074 	.word	0x61682074
   18928:	72612073 	.word	0x72612073
   1892c:	65766972 	.word	0x65766972
   18930:	0a212164 	.word	0x0a212164
   18934:	0000000d 	.word	0x0000000d
   18938:	454c4449 	.word	0x454c4449
   1893c:	00000000 	.word	0x00000000

00018940 <ulKernelPriority>:
   18940:	0000007f                                ....

00018944 <heapSTRUCT_SIZE>:
   18944:	00010010                                         ..

00018946 <version>:
   18946:	3d5a0001                                         ..

00018948 <utm_east0>:
   18948:	00093d5a                                Z=..

0001894c <utm_north0>:
   1894c:	005875e6                                .uX.

00018950 <climb_pgain>:
   18950:	bcf5c28f                                ....

00018954 <climb_igain>:
   18954:	3dcccccd                                ...=

00018958 <level_gaz>:
   18958:	3e9eb852                                R..>

0001895c <nav_east0>:
   1895c:	00093d5a                                Z=..

00018960 <nav_north0>:
   18960:	005875e6                                .uX.

00018964 <nb_waypoint>:
   18964:	00000007 33323130 37363534 42413938     ....0123456789AB
   18974:	46454443                                CDEF

00018978 <failsafe>:
	...
   1898c:	20574246 746f6f42 20676e69 3a644924     FBW Booting $Id:
   1899c:	69616d20 2c632e6e 2e312076 30322033      main.c,v 1.3 20
   189ac:	312f3830 32322f30 3a393120 313a3134     08/10/22 19:41:1
   189bc:	61632039 20657373 20707845 000d0a24     9 casse Exp $...
   189cc:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   189dc:	000d0a30 00000d0a 65532d52 6e617672     0.......R-Servan
   189ec:	00000074 736e6553 3020726f 00000000     t...Sensor 0....
   189fc:	76726553 20746e61 00000031 736e6553     Servant 1...Sens
   18a0c:	3220726f 00000000 76726553 20746e61     or 2....Servant 
   18a1c:	00000033 736e6553 3720726f 00000000     3...Sensor 7....
   18a2c:	76726553 20746e61 00000038 736e6553     Servant 8...Sens
   18a3c:	3420726f 00000000 736e6553 3520726f     or 4....Sensor 5
   18a4c:	00000000 736e6553 3620726f 00000000     ....Sensor 6....
   18a5c:	736e6553 3920726f 00000000 76726553     Sensor 9....Serv
   18a6c:	20746e61 00003031 76726553 20746e61     ant 10..Servant 
   18a7c:	00003131 736e6553 3120726f 00000032     11..Sensor 12...
   18a8c:	736e6553 3220726f 00000030 736e6553     Sensor 20...Sens
   18a9c:	3120726f 00000033 76726553 20746e61     or 13...Servant 
   18aac:	00003431 736e6553 3120726f 00000035     14..Sensor 15...
   18abc:	76726553 20746e61 00003631 76726553     Servant 16..Serv
   18acc:	20746e61 00003731 736e6553 3120726f     ant 17..Sensor 1
   18adc:	00000038 736e6553 3120726f 00000039     8...Sensor 19...
