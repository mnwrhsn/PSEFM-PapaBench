
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 50 05 20 15 8b 01 00 59 8b 01 00 59 8b 01 00     .P. ....Y...Y...
      10:	59 8b 01 00 59 8b 01 00 59 8b 01 00 00 00 00 00     Y...Y...Y.......
	...
      2c:	69 5d 00 00 59 8b 01 00 00 00 00 00 75 5e 00 00     i]..Y.......u^..
      3c:	b1 5e 00 00 59 8b 01 00 59 8b 01 00 59 8b 01 00     .^..Y...Y...Y...
      4c:	59 8b 01 00 59 8b 01 00 59 8b 01 00 59 8b 01 00     Y...Y...Y...Y...
      5c:	59 8b 01 00 59 8b 01 00 59 8b 01 00 59 8b 01 00     Y...Y...Y...Y...
      6c:	59 8b 01 00 59 8b 01 00 59 8b 01 00 59 8b 01 00     Y...Y...Y...Y...
      7c:	59 8b 01 00 59 8b 01 00 59 8b 01 00 59 8b 01 00     Y...Y...Y...Y...
      8c:	59 8b 01 00 59 8b 01 00 59 8b 01 00 59 8b 01 00     Y...Y...Y...Y...
      9c:	59 8b 01 00 59 8b 01 00 59 8b 01 00 59 8b 01 00     Y...Y...Y...Y...
      ac:	59 8b 01 00 59 8b 01 00 59 8b 01 00 59 8b 01 00     Y...Y...Y...Y...
      bc:	59 8b 01 00 59 8b 01 00 59 8b 01 00 59 8b 01 00     Y...Y...Y...Y...
      cc:	59 8b 01 00 59 8b 01 00 59 8b 01 00 59 8b 01 00     Y...Y...Y...Y...
      dc:	59 8b 01 00 59 8b 01 00 59 8b 01 00 59 8b 01 00     Y...Y...Y...Y...
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
     31c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     31e:	2300      	movs	r3, #0
     320:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     322:	683b      	ldr	r3, [r7, #0]
     324:	687a      	ldr	r2, [r7, #4]
     326:	e843 2300 	strex	r3, r2, [r3]
     32a:	60fb      	str	r3, [r7, #12]
   return(result);
     32c:	68fb      	ldr	r3, [r7, #12]
}
     32e:	4618      	mov	r0, r3
     330:	3714      	adds	r7, #20
     332:	46bd      	mov	sp, r7
     334:	f85d 7b04 	ldr.w	r7, [sp], #4
     338:	4770      	bx	lr
     33a:	bf00      	nop

0000033c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     344:	f2c4 0302 	movt	r3, #16386	; 0x4002
     348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     350:	6812      	ldr	r2, [r2, #0]
     352:	f042 0201 	orr.w	r2, r2, #1
     356:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     35c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     364:	f2c4 0302 	movt	r3, #16386	; 0x4002
     368:	6859      	ldr	r1, [r3, #4]
     36a:	2300      	movs	r3, #0
     36c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     370:	400b      	ands	r3, r1
     372:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     378:	f2c4 0302 	movt	r3, #16386	; 0x4002
     37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     380:	f2c4 0202 	movt	r2, #16386	; 0x4002
     384:	6812      	ldr	r2, [r2, #0]
     386:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     38a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     38e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b8:	6852      	ldr	r2, [r2, #4]
     3ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3cc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ce:	f000 f8a7 	bl	520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     3d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3de:	609a      	str	r2, [r3, #8]
#endif
}
     3e0:	bd80      	pop	{r7, pc}
     3e2:	bf00      	nop

000003e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3e4:	b480      	push	{r7}
     3e6:	b085      	sub	sp, #20
     3e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	60fb      	str	r3, [r7, #12]
     3ee:	2300      	movs	r3, #0
     3f0:	60bb      	str	r3, [r7, #8]
     3f2:	2300      	movs	r3, #0
     3f4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3fe:	685b      	ldr	r3, [r3, #4]
     400:	f003 030c 	and.w	r3, r3, #12
     404:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b04      	cmp	r3, #4
     40a:	d00d      	beq.n	428 <SystemCoreClockUpdate+0x44>
     40c:	2b08      	cmp	r3, #8
     40e:	d015      	beq.n	43c <SystemCoreClockUpdate+0x58>
     410:	2b00      	cmp	r3, #0
     412:	d15b      	bne.n	4cc <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     414:	f240 0300 	movw	r3, #0
     418:	f2c2 0300 	movt	r3, #8192	; 0x2000
     41c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     420:	f2c0 027a 	movt	r2, #122	; 0x7a
     424:	601a      	str	r2, [r3, #0]
      break;
     426:	e05b      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     428:	f240 0300 	movw	r3, #0
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     434:	f2c0 027a 	movt	r2, #122	; 0x7a
     438:	601a      	str	r2, [r3, #0]
      break;
     43a:	e051      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     440:	f2c4 0302 	movt	r3, #16386	; 0x4002
     444:	685b      	ldr	r3, [r3, #4]
     446:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     44a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     44c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     450:	f2c4 0302 	movt	r3, #16386	; 0x4002
     454:	685b      	ldr	r3, [r3, #4]
     456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     45a:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     45c:	68bb      	ldr	r3, [r7, #8]
     45e:	0c9b      	lsrs	r3, r3, #18
     460:	3302      	adds	r3, #2
     462:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     470:	f2c0 033d 	movt	r3, #61	; 0x3d
     474:	fb03 f202 	mul.w	r2, r3, r2
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	601a      	str	r2, [r3, #0]
     482:	e022      	b.n	4ca <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     488:	f2c4 0302 	movt	r3, #16386	; 0x4002
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     492:	2b00      	cmp	r3, #0
     494:	d00c      	beq.n	4b0 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     496:	68ba      	ldr	r2, [r7, #8]
     498:	f44f 6310 	mov.w	r3, #2304	; 0x900
     49c:	f2c0 033d 	movt	r3, #61	; 0x3d
     4a0:	fb03 f202 	mul.w	r2, r3, r2
     4a4:	f240 0300 	movw	r3, #0
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	601a      	str	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     4b0:	68ba      	ldr	r2, [r7, #8]
     4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
     4ba:	fb03 f202 	mul.w	r2, r3, r2
     4be:	f240 0300 	movw	r3, #0
     4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4c8:	e00a      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
     4ca:	e009      	b.n	4e0 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     4cc:	f240 0300 	movw	r3, #0
     4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     4d8:	f2c0 027a 	movt	r2, #122	; 0x7a
     4dc:	601a      	str	r2, [r3, #0]
      break;
     4de:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ee:	091a      	lsrs	r2, r3, #4
     4f0:	f240 0304 	movw	r3, #4
     4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4f8:	5c9b      	ldrb	r3, [r3, r2]
     4fa:	b2db      	uxtb	r3, r3
     4fc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     4fe:	f240 0300 	movw	r3, #0
     502:	f2c2 0300 	movt	r3, #8192	; 0x2000
     506:	681a      	ldr	r2, [r3, #0]
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	40da      	lsrs	r2, r3
     50c:	f240 0300 	movw	r3, #0
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
}
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     524:	f000 f802 	bl	52c <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     528:	bd80      	pop	{r7, pc}
     52a:	bf00      	nop

0000052c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     532:	2300      	movs	r3, #0
     534:	607b      	str	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     556:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     560:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3301      	adds	r3, #1
     566:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d103      	bne.n	576 <SetSysClockTo72+0x4a>
     56e:	687b      	ldr	r3, [r7, #4]
     570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     574:	d1ed      	bne.n	552 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     57e:	681b      	ldr	r3, [r3, #0]
     580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     584:	2b00      	cmp	r3, #0
     586:	d002      	beq.n	58e <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     588:	2301      	movs	r3, #1
     58a:	603b      	str	r3, [r7, #0]
     58c:	e001      	b.n	592 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     58e:	2300      	movs	r3, #0
     590:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     592:	683b      	ldr	r3, [r7, #0]
     594:	2b01      	cmp	r3, #1
     596:	f040 8094 	bne.w	6c2 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     59e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5aa:	6812      	ldr	r2, [r2, #0]
     5ac:	f042 0210 	orr.w	r2, r2, #16
     5b0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     5b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5be:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	f022 0203 	bic.w	r2, r2, #3
     5c8:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     5ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5da:	6812      	ldr	r2, [r2, #0]
     5dc:	f042 0202 	orr.w	r2, r2, #2
     5e0:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5f2:	6852      	ldr	r2, [r2, #4]
     5f4:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     602:	f2c4 0202 	movt	r2, #16386	; 0x4002
     606:	6852      	ldr	r2, [r2, #4]
     608:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     616:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61a:	6852      	ldr	r2, [r2, #4]
     61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     620:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     626:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     632:	6852      	ldr	r2, [r2, #4]
     634:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     638:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     63e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     646:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64a:	6852      	ldr	r2, [r2, #4]
     64c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     650:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     65e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     662:	6812      	ldr	r2, [r2, #0]
     664:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     668:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     66a:	bf00      	nop
     66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     670:	f2c4 0302 	movt	r3, #16386	; 0x4002
     674:	681b      	ldr	r3, [r3, #0]
     676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     67a:	2b00      	cmp	r3, #0
     67c:	d0f6      	beq.n	66c <SetSysClockTo72+0x140>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     682:	f2c4 0302 	movt	r3, #16386	; 0x4002
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68e:	6852      	ldr	r2, [r2, #4]
     690:	f022 0203 	bic.w	r2, r2, #3
     694:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     69a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a6:	6852      	ldr	r2, [r2, #4]
     6a8:	f042 0202 	orr.w	r2, r2, #2
     6ac:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6ae:	bf00      	nop
     6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 030c 	and.w	r3, r3, #12
     6be:	2b08      	cmp	r3, #8
     6c0:	d1f6      	bne.n	6b0 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     6c2:	370c      	adds	r7, #12
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr
     6cc:	00018c38 	.word	0x00018c38
     6d0:	20000000 	.word	0x20000000
     6d4:	200005d8 	.word	0x200005d8
     6d8:	200005d8 	.word	0x200005d8
     6dc:	2004cba4 	.word	0x2004cba4

000006e0 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     6e0:	b480      	push	{r7}
     6e2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f4:	6812      	ldr	r2, [r2, #0]
     6f6:	f042 0201 	orr.w	r2, r2, #1
     6fa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     6fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     700:	f2c4 0202 	movt	r2, #16386	; 0x4002
     704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     708:	f2c4 0302 	movt	r3, #16386	; 0x4002
     70c:	6859      	ldr	r1, [r3, #4]
     70e:	2300      	movs	r3, #0
     710:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     714:	400b      	ands	r3, r1
     716:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     71c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	f2c4 0202 	movt	r2, #16386	; 0x4002
     728:	6812      	ldr	r2, [r2, #0]
     72a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     72e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     732:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     74a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     758:	f2c4 0202 	movt	r2, #16386	; 0x4002
     75c:	6852      	ldr	r2, [r2, #4]
     75e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     762:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 0302 	movt	r3, #16386	; 0x4002
     76c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     770:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     77c:	b480      	push	{r7}
     77e:	b083      	sub	sp, #12
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     79a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6812      	ldr	r2, [r2, #0]
     7ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7b2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     7ba:	d003      	beq.n	7c4 <RCC_HSEConfig+0x48>
     7bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     7c0:	d00d      	beq.n	7de <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;

    default:
      break;
     7c2:	e019      	b.n	7f8 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d4:	6812      	ldr	r2, [r2, #0]
     7d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     7da:	601a      	str	r2, [r3, #0]
      break;
     7dc:	e00c      	b.n	7f8 <RCC_HSEConfig+0x7c>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ee:	6812      	ldr	r2, [r2, #0]
     7f0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     7f4:	601a      	str	r2, [r3, #0]
      break;
     7f6:	bf00      	nop

    default:
      break;
  }
}
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     800:	4770      	bx	lr
     802:	bf00      	nop

00000804 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     80a:	2300      	movs	r3, #0
     80c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     80e:	2300      	movs	r3, #0
     810:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     812:	2300      	movs	r3, #0
     814:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     816:	2031      	movs	r0, #49	; 0x31
     818:	f000 fba2 	bl	f60 <RCC_GetFlagStatus>
     81c:	4603      	mov	r3, r0
     81e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     820:	683b      	ldr	r3, [r7, #0]
     822:	3301      	adds	r3, #1
     824:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     826:	683b      	ldr	r3, [r7, #0]
     828:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     82c:	d002      	beq.n	834 <RCC_WaitForHSEStartUp+0x30>
     82e:	79bb      	ldrb	r3, [r7, #6]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     834:	2031      	movs	r0, #49	; 0x31
     836:	f000 fb93 	bl	f60 <RCC_GetFlagStatus>
     83a:	4603      	mov	r3, r0
     83c:	2b00      	cmp	r3, #0
     83e:	d002      	beq.n	846 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     840:	2301      	movs	r3, #1
     842:	71fb      	strb	r3, [r7, #7]
     844:	e001      	b.n	84a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     846:	2300      	movs	r3, #0
     848:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     84a:	79fb      	ldrb	r3, [r7, #7]
}
     84c:	4618      	mov	r0, r3
     84e:	3708      	adds	r7, #8
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}

00000854 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     854:	b480      	push	{r7}
     856:	b085      	sub	sp, #20
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     85e:	2300      	movs	r3, #0
     860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     866:	f2c4 0302 	movt	r3, #16386	; 0x4002
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     874:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     876:	79fb      	ldrb	r3, [r7, #7]
     878:	00db      	lsls	r3, r3, #3
     87a:	68fa      	ldr	r2, [r7, #12]
     87c:	4313      	orrs	r3, r2
     87e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     884:	f2c4 0302 	movt	r3, #16386	; 0x4002
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	3714      	adds	r7, #20
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	4603      	mov	r3, r0
     8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8a2:	2300      	movs	r3, #0
     8a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8a8:	79fa      	ldrb	r2, [r7, #7]
     8aa:	601a      	str	r2, [r3, #0]
}
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     8b8:	b480      	push	{r7}
     8ba:	b085      	sub	sp, #20
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     8c2:	2300      	movs	r3, #0
     8c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     8d8:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     8da:	687a      	ldr	r2, [r7, #4]
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	4313      	orrs	r3, r2
     8e0:	68fa      	ldr	r2, [r7, #12]
     8e2:	4313      	orrs	r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	605a      	str	r2, [r3, #4]
}
     8f2:	3714      	adds	r7, #20
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     906:	2360      	movs	r3, #96	; 0x60
     908:	f2c4 2342 	movt	r3, #16962	; 0x4242
     90c:	79fa      	ldrb	r2, [r7, #7]
     90e:	601a      	str	r2, [r3, #0]
}
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     930:	685b      	ldr	r3, [r3, #4]
     932:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	687b      	ldr	r3, [r7, #4]
     940:	4313      	orrs	r3, r2
     942:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     948:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94c:	68fa      	ldr	r2, [r7, #12]
     94e:	605a      	str	r2, [r3, #4]
}
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     95c:	b480      	push	{r7}
     95e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	685b      	ldr	r3, [r3, #4]
     96a:	b2db      	uxtb	r3, r3
     96c:	f003 030c 	and.w	r3, r3, #12
     970:	b2db      	uxtb	r3, r3
}
     972:	4618      	mov	r0, r3
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     97c:	b480      	push	{r7}
     97e:	b085      	sub	sp, #20
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     984:	2300      	movs	r3, #0
     986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     990:	685b      	ldr	r3, [r3, #4]
     992:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     99a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4313      	orrs	r3, r2
     9a2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ac:	68fa      	ldr	r2, [r7, #12]
     9ae:	605a      	str	r2, [r3, #4]
}
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     9da:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4313      	orrs	r3, r2
     9e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	605a      	str	r2, [r3, #4]
}
     9f0:	3714      	adds	r7, #20
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     9fc:	b480      	push	{r7}
     9fe:	b085      	sub	sp, #20
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a04:	2300      	movs	r3, #0
     a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a1a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	68fa      	ldr	r2, [r7, #12]
     a22:	4313      	orrs	r3, r2
     a24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	605a      	str	r2, [r3, #4]
}
     a32:	3714      	adds	r7, #20
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr

00000a3c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a3c:	b480      	push	{r7}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	71fa      	strb	r2, [r7, #7]
     a48:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a4a:	79bb      	ldrb	r3, [r7, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00e      	beq.n	a6e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     a50:	f241 0309 	movw	r3, #4105	; 0x1009
     a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a58:	f241 0209 	movw	r2, #4105	; 0x1009
     a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	b2d1      	uxtb	r1, r2
     a64:	79fa      	ldrb	r2, [r7, #7]
     a66:	430a      	orrs	r2, r1
     a68:	b2d2      	uxtb	r2, r2
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e00f      	b.n	a8e <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     a6e:	f241 0309 	movw	r3, #4105	; 0x1009
     a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a76:	f241 0209 	movw	r2, #4105	; 0x1009
     a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	b2d1      	uxtb	r1, r2
     a82:	79fa      	ldrb	r2, [r7, #7]
     a84:	43d2      	mvns	r2, r2
     a86:	b2d2      	uxtb	r2, r2
     a88:	400a      	ands	r2, r1
     a8a:	b2d2      	uxtb	r2, r2
     a8c:	701a      	strb	r2, [r3, #0]
  }
}
     a8e:	370c      	adds	r7, #12
     a90:	46bd      	mov	sp, r7
     a92:	f85d 7b04 	ldr.w	r7, [sp], #4
     a96:	4770      	bx	lr

00000a98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     aa0:	23d8      	movs	r3, #216	; 0xd8
     aa2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab2:	4770      	bx	lr

00000ab4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ab4:	b480      	push	{r7}
     ab6:	b085      	sub	sp, #20
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     abc:	2300      	movs	r3, #0
     abe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ad2:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     afe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b0a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b12:	2200      	movs	r2, #0
     b14:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	2b01      	cmp	r3, #1
     b1a:	d002      	beq.n	b22 <RCC_LSEConfig+0x2e>
     b1c:	2b04      	cmp	r3, #4
     b1e:	d007      	beq.n	b30 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;

    default:
      break;
     b20:	e00d      	b.n	b3e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
      break;
     b2e:	e006      	b.n	b3e <RCC_LSEConfig+0x4a>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b30:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b38:	2205      	movs	r2, #5
     b3a:	701a      	strb	r2, [r3, #0]
      break;
     b3c:	bf00      	nop

    default:
      break;
  }
}
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr

00000b48 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b48:	b480      	push	{r7}
     b4a:	b083      	sub	sp, #12
     b4c:	af00      	add	r7, sp, #0
     b4e:	4603      	mov	r3, r0
     b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     b52:	f44f 6390 	mov.w	r3, #1152	; 0x480
     b56:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b5a:	79fa      	ldrb	r2, [r7, #7]
     b5c:	601a      	str	r2, [r3, #0]
}
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	f85d 7b04 	ldr.w	r7, [sp], #4
     b66:	4770      	bx	lr

00000b68 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b80:	6a11      	ldr	r1, [r2, #32]
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	430a      	orrs	r2, r1
     b86:	621a      	str	r2, [r3, #32]
}
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     b94:	b480      	push	{r7}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	4603      	mov	r3, r0
     b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     b9e:	f240 433c 	movw	r3, #1084	; 0x43c
     ba2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ba6:	79fa      	ldrb	r2, [r7, #7]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     bb4:	b480      	push	{r7}
     bb6:	b087      	sub	sp, #28
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	617b      	str	r3, [r7, #20]
     bc0:	2300      	movs	r3, #0
     bc2:	613b      	str	r3, [r7, #16]
     bc4:	2300      	movs	r3, #0
     bc6:	60fb      	str	r3, [r7, #12]
     bc8:	2300      	movs	r3, #0
     bca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	f003 030c 	and.w	r3, r3, #12
     bda:	617b      	str	r3, [r7, #20]

  switch (tmp)
     bdc:	697b      	ldr	r3, [r7, #20]
     bde:	2b04      	cmp	r3, #4
     be0:	d00a      	beq.n	bf8 <RCC_GetClocksFreq+0x44>
     be2:	2b08      	cmp	r3, #8
     be4:	d00f      	beq.n	c06 <RCC_GetClocksFreq+0x52>
     be6:	2b00      	cmp	r3, #0
     be8:	d14c      	bne.n	c84 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     bea:	687a      	ldr	r2, [r7, #4]
     bec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bf0:	f2c0 037a 	movt	r3, #122	; 0x7a
     bf4:	6013      	str	r3, [r2, #0]
      break;
     bf6:	e04c      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     bf8:	687a      	ldr	r2, [r7, #4]
     bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bfe:	f2c0 037a 	movt	r3, #122	; 0x7a
     c02:	6013      	str	r3, [r2, #0]
      break;
     c04:	e045      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c14:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c24:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     c26:	693b      	ldr	r3, [r7, #16]
     c28:	0c9b      	lsrs	r3, r3, #18
     c2a:	3302      	adds	r3, #2
     c2c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	2b00      	cmp	r3, #0
     c32:	d109      	bne.n	c48 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c34:	693a      	ldr	r2, [r7, #16]
     c36:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c3a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c3e:	fb03 f202 	mul.w	r2, r3, r2
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	601a      	str	r2, [r3, #0]
     c46:	e01c      	b.n	c82 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     c5a:	693a      	ldr	r2, [r7, #16]
     c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c60:	f2c0 033d 	movt	r3, #61	; 0x3d
     c64:	fb03 f202 	mul.w	r2, r3, r2
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	e009      	b.n	c82 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     c6e:	693a      	ldr	r2, [r7, #16]
     c70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c74:	f2c0 037a 	movt	r3, #122	; 0x7a
     c78:	fb03 f202 	mul.w	r2, r3, r2
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     c80:	e007      	b.n	c92 <RCC_GetClocksFreq+0xde>
     c82:	e006      	b.n	c92 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c84:	687a      	ldr	r2, [r7, #4]
     c86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c8a:	f2c0 037a 	movt	r3, #122	; 0x7a
     c8e:	6013      	str	r3, [r2, #0]
      break;
     c90:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ca2:	697b      	ldr	r3, [r7, #20]
     ca4:	091b      	lsrs	r3, r3, #4
     ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ca8:	f240 0314 	movw	r3, #20
     cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb0:	697a      	ldr	r2, [r7, #20]
     cb2:	4413      	add	r3, r2
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	40da      	lsrs	r2, r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     cd4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	0a1b      	lsrs	r3, r3, #8
     cda:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cdc:	f240 0314 	movw	r3, #20
     ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ce4:	697a      	ldr	r2, [r7, #20]
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	685a      	ldr	r2, [r3, #4]
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	40da      	lsrs	r2, r3
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	0adb      	lsrs	r3, r3, #11
     d0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d10:	f240 0314 	movw	r3, #20
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	4413      	add	r3, r2
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	b2db      	uxtb	r3, r3
     d20:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	40da      	lsrs	r2, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	0b9b      	lsrs	r3, r3, #14
     d42:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d44:	f240 0324 	movw	r3, #36	; 0x24
     d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4c:	697a      	ldr	r2, [r7, #20]
     d4e:	4413      	add	r3, r2
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	68da      	ldr	r2, [r3, #12]
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	fbb2 f2f3 	udiv	r2, r2, r3
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	611a      	str	r2, [r3, #16]
}
     d64:	371c      	adds	r7, #28
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     d70:	b480      	push	{r7}
     d72:	b083      	sub	sp, #12
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	460b      	mov	r3, r1
     d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     d7c:	78fb      	ldrb	r3, [r7, #3]
     d7e:	2b00      	cmp	r3, #0
     d80:	d00c      	beq.n	d9c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d92:	6951      	ldr	r1, [r2, #20]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	430a      	orrs	r2, r1
     d98:	615a      	str	r2, [r3, #20]
     d9a:	e00c      	b.n	db6 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     da8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dac:	6951      	ldr	r1, [r2, #20]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	43d2      	mvns	r2, r2
     db2:	400a      	ands	r2, r1
     db4:	615a      	str	r2, [r3, #20]
  }
}
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
     dea:	e00c      	b.n	e06 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6991      	ldr	r1, [r2, #24]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	619a      	str	r2, [r3, #24]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	69d1      	ldr	r1, [r2, #28]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	61da      	str	r2, [r3, #28]
     e3a:	e00c      	b.n	e56 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	69d1      	ldr	r1, [r2, #28]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	61da      	str	r2, [r3, #28]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	68d1      	ldr	r1, [r2, #12]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	60da      	str	r2, [r3, #12]
     e8a:	e00c      	b.n	ea6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	68d1      	ldr	r1, [r2, #12]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	60da      	str	r2, [r3, #12]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	6911      	ldr	r1, [r2, #16]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	611a      	str	r2, [r3, #16]
     eda:	e00c      	b.n	ef6 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	6911      	ldr	r1, [r2, #16]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	611a      	str	r2, [r3, #16]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f0a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f12:	79fa      	ldrb	r2, [r7, #7]
     f14:	601a      	str	r2, [r3, #0]
}
     f16:	370c      	adds	r7, #12
     f18:	46bd      	mov	sp, r7
     f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1e:	4770      	bx	lr

00000f20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f20:	b480      	push	{r7}
     f22:	b083      	sub	sp, #12
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f2a:	234c      	movs	r3, #76	; 0x4c
     f2c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	601a      	str	r2, [r3, #0]
}
     f34:	370c      	adds	r7, #12
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f4a:	f241 0307 	movw	r3, #4103	; 0x1007
     f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f52:	79fa      	ldrb	r2, [r7, #7]
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5e:	4770      	bx	lr

00000f60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f60:	b480      	push	{r7}
     f62:	b087      	sub	sp, #28
     f64:	af00      	add	r7, sp, #0
     f66:	4603      	mov	r3, r0
     f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     f6e:	2300      	movs	r3, #0
     f70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     f72:	2300      	movs	r3, #0
     f74:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     f76:	79fb      	ldrb	r3, [r7, #7]
     f78:	095b      	lsrs	r3, r3, #5
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b01      	cmp	r3, #1
     f82:	d106      	bne.n	f92 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	617b      	str	r3, [r7, #20]
     f90:	e00f      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	2b02      	cmp	r3, #2
     f96:	d106      	bne.n	fa6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa0:	6a1b      	ldr	r3, [r3, #32]
     fa2:	617b      	str	r3, [r7, #20]
     fa4:	e005      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	f003 031f 	and.w	r3, r3, #31
     fb8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	697a      	ldr	r2, [r7, #20]
     fbe:	fa22 f303 	lsr.w	r3, r2, r3
     fc2:	f003 0301 	and.w	r3, r3, #1
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
     fca:	2301      	movs	r3, #1
     fcc:	74fb      	strb	r3, [r7, #19]
     fce:	e001      	b.n	fd4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
     fd0:	2300      	movs	r3, #0
     fd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     fd4:	7cfb      	ldrb	r3, [r7, #19]
}
     fd6:	4618      	mov	r0, r3
     fd8:	371c      	adds	r7, #28
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop

00000fe4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     ffe:	625a      	str	r2, [r3, #36]	; 0x24
}
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr

00001008 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1012:	2300      	movs	r3, #0
    1014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    101e:	689a      	ldr	r2, [r3, #8]
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4013      	ands	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	d002      	beq.n	102e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1028:	2301      	movs	r3, #1
    102a:	73fb      	strb	r3, [r7, #15]
    102c:	e001      	b.n	1032 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    102e:	2300      	movs	r3, #0
    1030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	4603      	mov	r3, r0
    1048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    104a:	f241 030a 	movw	r3, #4106	; 0x100a
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	79fa      	ldrb	r2, [r7, #7]
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	370c      	adds	r7, #12
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr

00001060 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1068:	687a      	ldr	r2, [r7, #4]
    106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    106e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1072:	429a      	cmp	r2, r3
    1074:	d108      	bne.n	1088 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1076:	2004      	movs	r0, #4
    1078:	2101      	movs	r1, #1
    107a:	f7ff fef1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    107e:	2004      	movs	r0, #4
    1080:	2100      	movs	r1, #0
    1082:	f7ff feed 	bl	e60 <RCC_APB2PeriphResetCmd>
    1086:	e060      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    108e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1092:	429a      	cmp	r2, r3
    1094:	d108      	bne.n	10a8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1096:	2008      	movs	r0, #8
    1098:	2101      	movs	r1, #1
    109a:	f7ff fee1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    109e:	2008      	movs	r0, #8
    10a0:	2100      	movs	r1, #0
    10a2:	f7ff fedd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10a6:	e050      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10a8:	687a      	ldr	r2, [r7, #4]
    10aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10b2:	429a      	cmp	r2, r3
    10b4:	d108      	bne.n	10c8 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10b6:	2010      	movs	r0, #16
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff fed1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10be:	2010      	movs	r0, #16
    10c0:	2100      	movs	r1, #0
    10c2:	f7ff fecd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10c6:	e040      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    10ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10d2:	429a      	cmp	r2, r3
    10d4:	d108      	bne.n	10e8 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10d6:	2020      	movs	r0, #32
    10d8:	2101      	movs	r1, #1
    10da:	f7ff fec1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2100      	movs	r1, #0
    10e2:	f7ff febd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10e6:	e030      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOE)
    10e8:	687a      	ldr	r2, [r7, #4]
    10ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    10ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10f2:	429a      	cmp	r2, r3
    10f4:	d108      	bne.n	1108 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f6:	2040      	movs	r0, #64	; 0x40
    10f8:	2101      	movs	r1, #1
    10fa:	f7ff feb1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    10fe:	2040      	movs	r0, #64	; 0x40
    1100:	2100      	movs	r1, #0
    1102:	f7ff fead 	bl	e60 <RCC_APB2PeriphResetCmd>
    1106:	e020      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOF)
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    110e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1112:	429a      	cmp	r2, r3
    1114:	d108      	bne.n	1128 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1116:	2080      	movs	r0, #128	; 0x80
    1118:	2101      	movs	r1, #1
    111a:	f7ff fea1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111e:	2080      	movs	r0, #128	; 0x80
    1120:	2100      	movs	r1, #0
    1122:	f7ff fe9d 	bl	e60 <RCC_APB2PeriphResetCmd>
    1126:	e010      	b.n	114a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    112e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1132:	429a      	cmp	r2, r3
    1134:	d109      	bne.n	114a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2101      	movs	r1, #1
    113c:	f7ff fe90 	bl	e60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1140:	f44f 7080 	mov.w	r0, #256	; 0x100
    1144:	2100      	movs	r1, #0
    1146:	f7ff fe8b 	bl	e60 <RCC_APB2PeriphResetCmd>
    }
  }
}
    114a:	3708      	adds	r7, #8
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}

00001150 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1154:	2001      	movs	r0, #1
    1156:	2101      	movs	r1, #1
    1158:	f7ff fe82 	bl	e60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    115c:	2001      	movs	r0, #1
    115e:	2100      	movs	r1, #0
    1160:	f7ff fe7e 	bl	e60 <RCC_APB2PeriphResetCmd>
}
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop

00001168 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1168:	b480      	push	{r7}
    116a:	b089      	sub	sp, #36	; 0x24
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
    1170:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1172:	2300      	movs	r3, #0
    1174:	61fb      	str	r3, [r7, #28]
    1176:	2300      	movs	r3, #0
    1178:	613b      	str	r3, [r7, #16]
    117a:	2300      	movs	r3, #0
    117c:	61bb      	str	r3, [r7, #24]
    117e:	2300      	movs	r3, #0
    1180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1182:	2300      	movs	r3, #0
    1184:	617b      	str	r3, [r7, #20]
    1186:	2300      	movs	r3, #0
    1188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	f003 030f 	and.w	r3, r3, #15
    1192:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	78db      	ldrb	r3, [r3, #3]
    1198:	f003 0310 	and.w	r3, r3, #16
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <GPIO_Init+0x42>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11a0:	683b      	ldr	r3, [r7, #0]
    11a2:	789b      	ldrb	r3, [r3, #2]
    11a4:	69fa      	ldr	r2, [r7, #28]
    11a6:	4313      	orrs	r3, r2
    11a8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	881b      	ldrh	r3, [r3, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d044      	beq.n	123e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ba:	2300      	movs	r3, #0
    11bc:	61bb      	str	r3, [r7, #24]
    11be:	e038      	b.n	1232 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	2201      	movs	r2, #1
    11c4:	fa02 f303 	lsl.w	r3, r2, r3
    11c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11ca:	683b      	ldr	r3, [r7, #0]
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	461a      	mov	r2, r3
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	4013      	ands	r3, r2
    11d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11d6:	693a      	ldr	r2, [r7, #16]
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	429a      	cmp	r2, r3
    11dc:	d126      	bne.n	122c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	220f      	movs	r2, #15
    11e8:	fa02 f303 	lsl.w	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	43db      	mvns	r3, r3
    11f2:	697a      	ldr	r2, [r7, #20]
    11f4:	4013      	ands	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	69fa      	ldr	r2, [r7, #28]
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	4313      	orrs	r3, r2
    1204:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b28      	cmp	r3, #40	; 0x28
    120c:	d105      	bne.n	121a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    120e:	69bb      	ldr	r3, [r7, #24]
    1210:	2201      	movs	r2, #1
    1212:	409a      	lsls	r2, r3
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	615a      	str	r2, [r3, #20]
    1218:	e008      	b.n	122c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b48      	cmp	r3, #72	; 0x48
    1220:	d104      	bne.n	122c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	3301      	adds	r3, #1
    1230:	61bb      	str	r3, [r7, #24]
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b07      	cmp	r3, #7
    1236:	d9c3      	bls.n	11c0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	697a      	ldr	r2, [r7, #20]
    123c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	2bff      	cmp	r3, #255	; 0xff
    1244:	d946      	bls.n	12d4 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    124c:	2300      	movs	r3, #0
    124e:	61bb      	str	r3, [r7, #24]
    1250:	e03a      	b.n	12c8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3308      	adds	r3, #8
    1256:	2201      	movs	r2, #1
    1258:	fa02 f303 	lsl.w	r3, r2, r3
    125c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4013      	ands	r3, r2
    1268:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    126a:	693a      	ldr	r2, [r7, #16]
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	429a      	cmp	r2, r3
    1270:	d127      	bne.n	12c2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	009b      	lsls	r3, r3, #2
    1276:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	220f      	movs	r2, #15
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	43db      	mvns	r3, r3
    1286:	697a      	ldr	r2, [r7, #20]
    1288:	4013      	ands	r3, r2
    128a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	69fa      	ldr	r2, [r7, #28]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	78db      	ldrb	r3, [r3, #3]
    129e:	2b28      	cmp	r3, #40	; 0x28
    12a0:	d105      	bne.n	12ae <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	409a      	lsls	r2, r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b48      	cmp	r3, #72	; 0x48
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	3301      	adds	r3, #1
    12c6:	61bb      	str	r3, [r7, #24]
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	2b07      	cmp	r3, #7
    12cc:	d9c1      	bls.n	1252 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	605a      	str	r2, [r3, #4]
  }
}
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop

000012e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12e0:	b480      	push	{r7}
    12e2:	b083      	sub	sp, #12
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	2202      	movs	r2, #2
    12f4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	2204      	movs	r2, #4
    12fa:	70da      	strb	r2, [r3, #3]
}
    12fc:	370c      	adds	r7, #12
    12fe:	46bd      	mov	sp, r7
    1300:	f85d 7b04 	ldr.w	r7, [sp], #4
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1308:	b480      	push	{r7}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	460b      	mov	r3, r1
    1312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1314:	2300      	movs	r3, #0
    1316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	689a      	ldr	r2, [r3, #8]
    131c:	887b      	ldrh	r3, [r7, #2]
    131e:	4013      	ands	r3, r2
    1320:	2b00      	cmp	r3, #0
    1322:	d002      	beq.n	132a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1324:	2301      	movs	r3, #1
    1326:	73fb      	strb	r3, [r7, #15]
    1328:	e001      	b.n	132e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    132a:	2300      	movs	r3, #0
    132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    132e:	7bfb      	ldrb	r3, [r7, #15]
}
    1330:	4618      	mov	r0, r3
    1332:	3714      	adds	r7, #20
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	b29b      	uxth	r3, r3
}
    134a:	4618      	mov	r0, r3
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	68da      	ldr	r2, [r3, #12]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    13b4:	887a      	ldrh	r2, [r7, #2]
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	611a      	str	r2, [r3, #16]
}
    13ba:	370c      	adds	r7, #12
    13bc:	46bd      	mov	sp, r7
    13be:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c2:	4770      	bx	lr

000013c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	460b      	mov	r3, r1
    13ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    13d0:	887a      	ldrh	r2, [r7, #2]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	615a      	str	r2, [r3, #20]
}
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13e0:	b480      	push	{r7}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	4613      	mov	r3, r2
    13ea:	460a      	mov	r2, r1
    13ec:	807a      	strh	r2, [r7, #2]
    13ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    13f0:	787b      	ldrb	r3, [r7, #1]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d003      	beq.n	13fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    13f6:	887a      	ldrh	r2, [r7, #2]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	611a      	str	r2, [r3, #16]
    13fc:	e002      	b.n	1404 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    13fe:	887a      	ldrh	r2, [r7, #2]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	615a      	str	r2, [r3, #20]
  }
}
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	460b      	mov	r3, r1
    141a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    141c:	887a      	ldrh	r2, [r7, #2]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	60da      	str	r2, [r3, #12]
}
    1422:	370c      	adds	r7, #12
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    142c:	b480      	push	{r7}
    142e:	b085      	sub	sp, #20
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	460b      	mov	r3, r1
    1436:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    143c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    143e:	887b      	ldrh	r3, [r7, #2]
    1440:	68fa      	ldr	r2, [r7, #12]
    1442:	4313      	orrs	r3, r2
    1444:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	68fa      	ldr	r2, [r7, #12]
    144a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    144c:	887a      	ldrh	r2, [r7, #2]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	699b      	ldr	r3, [r3, #24]
    145c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	699b      	ldr	r3, [r3, #24]
    1462:	60fb      	str	r3, [r7, #12]
}
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr
    146e:	bf00      	nop

00001470 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1470:	b480      	push	{r7}
    1472:	b085      	sub	sp, #20
    1474:	af00      	add	r7, sp, #0
    1476:	4602      	mov	r2, r0
    1478:	460b      	mov	r3, r1
    147a:	71fa      	strb	r2, [r7, #7]
    147c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    147e:	2300      	movs	r3, #0
    1480:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1482:	2300      	movs	r3, #0
    1484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1492:	4013      	ands	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1496:	79fb      	ldrb	r3, [r7, #7]
    1498:	011b      	lsls	r3, r3, #4
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	4313      	orrs	r3, r2
    149e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14a0:	79bb      	ldrb	r3, [r7, #6]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	4313      	orrs	r3, r2
    14a6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14a8:	2300      	movs	r3, #0
    14aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	601a      	str	r2, [r3, #0]
}
    14b2:	3714      	adds	r7, #20
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr

000014bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14bc:	b480      	push	{r7}
    14be:	b083      	sub	sp, #12
    14c0:	af00      	add	r7, sp, #0
    14c2:	4603      	mov	r3, r0
    14c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14c6:	231c      	movs	r3, #28
    14c8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    14cc:	79fa      	ldrb	r2, [r7, #7]
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
    14da:	bf00      	nop

000014dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14dc:	b480      	push	{r7}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	460b      	mov	r3, r1
    14e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14e8:	2300      	movs	r3, #0
    14ea:	613b      	str	r3, [r7, #16]
    14ec:	2300      	movs	r3, #0
    14ee:	60fb      	str	r3, [r7, #12]
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	2b00      	cmp	r3, #0
    14fc:	da05      	bge.n	150a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    14fe:	2300      	movs	r3, #0
    1500:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e004      	b.n	1514 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    150a:	2300      	movs	r3, #0
    150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1510:	685b      	ldr	r3, [r3, #4]
    1512:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    151a:	0c1b      	lsrs	r3, r3, #16
    151c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	b29b      	uxth	r3, r3
    1522:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    152e:	d10e      	bne.n	154e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1536:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1538:	2300      	movs	r3, #0
    153a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    153e:	2200      	movs	r2, #0
    1540:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da05      	bge.n	15bc <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	2300      	movs	r3, #0
    15b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	61da      	str	r2, [r3, #28]
    15ba:	e004      	b.n	15c6 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15bc:	2300      	movs	r3, #0
    15be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	605a      	str	r2, [r3, #4]
  }
}
    15c6:	371c      	adds	r7, #28
    15c8:	46bd      	mov	sp, r7
    15ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ce:	4770      	bx	lr

000015d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15d0:	b490      	push	{r4, r7}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	71fa      	strb	r2, [r7, #7]
    15dc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15de:	2300      	movs	r3, #0
    15e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15e2:	79bb      	ldrb	r3, [r7, #6]
    15e4:	f003 0303 	and.w	r3, r3, #3
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	220f      	movs	r2, #15
    15ec:	fa02 f303 	lsl.w	r3, r2, r3
    15f0:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15f2:	2300      	movs	r3, #0
    15f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15f8:	79ba      	ldrb	r2, [r7, #6]
    15fa:	0892      	lsrs	r2, r2, #2
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	2200      	movs	r2, #0
    1602:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1606:	79b9      	ldrb	r1, [r7, #6]
    1608:	0889      	lsrs	r1, r1, #2
    160a:	b2c9      	uxtb	r1, r1
    160c:	3102      	adds	r1, #2
    160e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	43d2      	mvns	r2, r2
    1616:	4011      	ands	r1, r2
    1618:	1c82      	adds	r2, r0, #2
    161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    161e:	2300      	movs	r3, #0
    1620:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1624:	79ba      	ldrb	r2, [r7, #6]
    1626:	0892      	lsrs	r2, r2, #2
    1628:	b2d2      	uxtb	r2, r2
    162a:	4610      	mov	r0, r2
    162c:	2200      	movs	r2, #0
    162e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1632:	79b9      	ldrb	r1, [r7, #6]
    1634:	0889      	lsrs	r1, r1, #2
    1636:	b2c9      	uxtb	r1, r1
    1638:	3102      	adds	r1, #2
    163a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    163e:	79fc      	ldrb	r4, [r7, #7]
    1640:	79ba      	ldrb	r2, [r7, #6]
    1642:	f002 0203 	and.w	r2, r2, #3
    1646:	0092      	lsls	r2, r2, #2
    1648:	fa04 f202 	lsl.w	r2, r4, r2
    164c:	4311      	orrs	r1, r2
    164e:	1c82      	adds	r2, r0, #2
    1650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1654:	3710      	adds	r7, #16
    1656:	46bd      	mov	sp, r7
    1658:	bc90      	pop	{r4, r7}
    165a:	4770      	bx	lr

0000165c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1664:	23dc      	movs	r3, #220	; 0xdc
    1666:	f2c4 2320 	movt	r3, #16928	; 0x4220
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
}
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	429a      	cmp	r2, r3
    168c:	d10a      	bne.n	16a4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1692:	2101      	movs	r1, #1
    1694:	f7ff fbe4 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    169c:	2100      	movs	r1, #0
    169e:	f7ff fbdf 	bl	e60 <RCC_APB2PeriphResetCmd>
    16a2:	e046      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16ae:	429a      	cmp	r2, r3
    16b0:	d10a      	bne.n	16c8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    16b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16b6:	2101      	movs	r1, #1
    16b8:	f7ff fbfa 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    16bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16c0:	2100      	movs	r1, #0
    16c2:	f7ff fbf5 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16c6:	e034      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    16ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16d2:	429a      	cmp	r2, r3
    16d4:	d10a      	bne.n	16ec <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16da:	2101      	movs	r1, #1
    16dc:	f7ff fbe8 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16e4:	2100      	movs	r1, #0
    16e6:	f7ff fbe3 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16ea:	e022      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == UART4)
    16ec:	687a      	ldr	r2, [r7, #4]
    16ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	429a      	cmp	r2, r3
    16f8:	d10a      	bne.n	1710 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16fe:	2101      	movs	r1, #1
    1700:	f7ff fbd6 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1708:	2100      	movs	r1, #0
    170a:	f7ff fbd1 	bl	eb0 <RCC_APB1PeriphResetCmd>
    170e:	e010      	b.n	1732 <USART_DeInit+0xba>
  }
  else
  {
    if (USARTx == UART5)
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1716:	f2c4 0300 	movt	r3, #16384	; 0x4000
    171a:	429a      	cmp	r2, r3
    171c:	d109      	bne.n	1732 <USART_DeInit+0xba>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    171e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1722:	2101      	movs	r1, #1
    1724:	f7ff fbc4 	bl	eb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1728:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    172c:	2100      	movs	r1, #0
    172e:	f7ff fbbf 	bl	eb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1732:	3708      	adds	r7, #8
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}

00001738 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1738:	b580      	push	{r7, lr}
    173a:	b08c      	sub	sp, #48	; 0x30
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1742:	2300      	movs	r3, #0
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
    1746:	2300      	movs	r3, #0
    1748:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    174a:	2300      	movs	r3, #0
    174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    174e:	2300      	movs	r3, #0
    1750:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1752:	2300      	movs	r3, #0
    1754:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8a1b      	ldrh	r3, [r3, #16]
    175e:	b29b      	uxth	r3, r3
    1760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1764:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1768:	4013      	ands	r3, r2
    176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    176c:	683b      	ldr	r3, [r7, #0]
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1772:	4313      	orrs	r3, r2
    1774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1778:	b29a      	uxth	r2, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	899b      	ldrh	r3, [r3, #12]
    1782:	b29b      	uxth	r3, r3
    1784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1788:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    178c:	4013      	ands	r3, r2
    178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	889a      	ldrh	r2, [r3, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	891b      	ldrh	r3, [r3, #8]
    1798:	4313      	orrs	r3, r2
    179a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17a0:	4313      	orrs	r3, r2
    17a2:	b29b      	uxth	r3, r3
    17a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a6:	4313      	orrs	r3, r2
    17a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17ac:	b29a      	uxth	r2, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	8a9b      	ldrh	r3, [r3, #20]
    17b6:	b29b      	uxth	r3, r3
    17b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    17ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17bc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17c0:	4013      	ands	r3, r2
    17c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	899b      	ldrh	r3, [r3, #12]
    17c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ca:	4313      	orrs	r3, r2
    17cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	b29a      	uxth	r2, r3
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17d6:	f107 0308 	add.w	r3, r7, #8
    17da:	4618      	mov	r0, r3
    17dc:	f7ff f9ea 	bl	bb4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17e0:	69fa      	ldr	r2, [r7, #28]
    17e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    17e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17ea:	429a      	cmp	r2, r3
    17ec:	d102      	bne.n	17f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	62bb      	str	r3, [r7, #40]	; 0x28
    17f2:	e001      	b.n	17f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17f4:	693b      	ldr	r3, [r7, #16]
    17f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b29b      	uxth	r3, r3
    1800:	b21b      	sxth	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	da0c      	bge.n	1820 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009a      	lsls	r2, r3, #2
    1810:	441a      	add	r2, r3
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	005b      	lsls	r3, r3, #1
    1818:	fbb2 f3f3 	udiv	r3, r2, r3
    181c:	627b      	str	r3, [r7, #36]	; 0x24
    181e:	e00b      	b.n	1838 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009a      	lsls	r2, r3, #2
    182a:	441a      	add	r2, r3
    182c:	683b      	ldr	r3, [r7, #0]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	009b      	lsls	r3, r3, #2
    1832:	fbb2 f3f3 	udiv	r3, r2, r3
    1836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    183a:	f248 531f 	movw	r3, #34079	; 0x851f
    183e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1842:	fba3 1302 	umull	r1, r3, r3, r2
    1846:	095b      	lsrs	r3, r3, #5
    1848:	011b      	lsls	r3, r3, #4
    184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    184e:	091b      	lsrs	r3, r3, #4
    1850:	2264      	movs	r2, #100	; 0x64
    1852:	fb02 f303 	mul.w	r3, r2, r3
    1856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1858:	1ad3      	subs	r3, r2, r3
    185a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	899b      	ldrh	r3, [r3, #12]
    1860:	b29b      	uxth	r3, r3
    1862:	b29b      	uxth	r3, r3
    1864:	b21b      	sxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	da10      	bge.n	188c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    186a:	6a3b      	ldr	r3, [r7, #32]
    186c:	00db      	lsls	r3, r3, #3
    186e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1872:	f248 531f 	movw	r3, #34079	; 0x851f
    1876:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    187a:	fba3 1302 	umull	r1, r3, r3, r2
    187e:	095b      	lsrs	r3, r3, #5
    1880:	f003 0307 	and.w	r3, r3, #7
    1884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1886:	4313      	orrs	r3, r2
    1888:	62fb      	str	r3, [r7, #44]	; 0x2c
    188a:	e00f      	b.n	18ac <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    188c:	6a3b      	ldr	r3, [r7, #32]
    188e:	011b      	lsls	r3, r3, #4
    1890:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1894:	f248 531f 	movw	r3, #34079	; 0x851f
    1898:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    189c:	fba3 1302 	umull	r1, r3, r3, r2
    18a0:	095b      	lsrs	r3, r3, #5
    18a2:	f003 030f 	and.w	r3, r3, #15
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4313      	orrs	r3, r2
    18aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18ae:	b29a      	uxth	r2, r3
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	811a      	strh	r2, [r3, #8]
}
    18b4:	3730      	adds	r7, #48	; 0x30
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop

000018bc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    18ca:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2200      	movs	r2, #0
    18d6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2200      	movs	r2, #0
    18dc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	220c      	movs	r2, #12
    18e2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	2200      	movs	r2, #0
    18e8:	819a      	strh	r2, [r3, #12]
}
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18f4:	b480      	push	{r7}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18fe:	2300      	movs	r3, #0
    1900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	8a1b      	ldrh	r3, [r3, #16]
    1906:	b29b      	uxth	r3, r3
    1908:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    190a:	68fa      	ldr	r2, [r7, #12]
    190c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1910:	4013      	ands	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	881a      	ldrh	r2, [r3, #0]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    191c:	4313      	orrs	r3, r2
    191e:	b29a      	uxth	r2, r3
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	889b      	ldrh	r3, [r3, #4]
    1924:	4313      	orrs	r3, r2
    1926:	b29a      	uxth	r2, r3
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	88db      	ldrh	r3, [r3, #6]
    192c:	4313      	orrs	r3, r2
    192e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1930:	68fa      	ldr	r2, [r7, #12]
    1932:	4313      	orrs	r3, r2
    1934:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	b29a      	uxth	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	821a      	strh	r2, [r3, #16]
}
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	2200      	movs	r2, #0
    1954:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2200      	movs	r2, #0
    195a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	2200      	movs	r2, #0
    1960:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2200      	movs	r2, #0
    1966:	80da      	strh	r2, [r3, #6]
}
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1980:	78fb      	ldrb	r3, [r7, #3]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	899b      	ldrh	r3, [r3, #12]
    198a:	b29b      	uxth	r3, r3
    198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1990:	b29a      	uxth	r2, r3
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	819a      	strh	r2, [r3, #12]
    1996:	e007      	b.n	19a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	899b      	ldrh	r3, [r3, #12]
    199c:	b29b      	uxth	r3, r3
    199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19a2:	b29a      	uxth	r2, r3
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	819a      	strh	r2, [r3, #12]
  }
}
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    19b4:	b480      	push	{r7}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	4613      	mov	r3, r2
    19be:	460a      	mov	r2, r1
    19c0:	807a      	strh	r2, [r7, #2]
    19c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    19c4:	2300      	movs	r3, #0
    19c6:	613b      	str	r3, [r7, #16]
    19c8:	2300      	movs	r3, #0
    19ca:	60fb      	str	r3, [r7, #12]
    19cc:	2300      	movs	r3, #0
    19ce:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19d0:	2300      	movs	r3, #0
    19d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	b2db      	uxtb	r3, r3
    19dc:	095b      	lsrs	r3, r3, #5
    19de:	b2db      	uxtb	r3, r3
    19e0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19e2:	887b      	ldrh	r3, [r7, #2]
    19e4:	f003 031f 	and.w	r3, r3, #31
    19e8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2201      	movs	r2, #1
    19ee:	fa02 f303 	lsl.w	r3, r2, r3
    19f2:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d103      	bne.n	1a02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	330c      	adds	r3, #12
    19fe:	617b      	str	r3, [r7, #20]
    1a00:	e009      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2b02      	cmp	r3, #2
    1a06:	d103      	bne.n	1a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	3310      	adds	r3, #16
    1a0c:	617b      	str	r3, [r7, #20]
    1a0e:	e002      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3314      	adds	r3, #20
    1a14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a16:	787b      	ldrb	r3, [r7, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d006      	beq.n	1a2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	697a      	ldr	r2, [r7, #20]
    1a20:	6811      	ldr	r1, [r2, #0]
    1a22:	68ba      	ldr	r2, [r7, #8]
    1a24:	430a      	orrs	r2, r1
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	e006      	b.n	1a38 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	697a      	ldr	r2, [r7, #20]
    1a2e:	6811      	ldr	r1, [r2, #0]
    1a30:	68ba      	ldr	r2, [r7, #8]
    1a32:	43d2      	mvns	r2, r2
    1a34:	400a      	ands	r2, r1
    1a36:	601a      	str	r2, [r3, #0]
  }
}
    1a38:	371c      	adds	r7, #28
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	4613      	mov	r3, r2
    1a4e:	460a      	mov	r2, r1
    1a50:	807a      	strh	r2, [r7, #2]
    1a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1a54:	787b      	ldrb	r3, [r7, #1]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d008      	beq.n	1a6c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	8a9b      	ldrh	r3, [r3, #20]
    1a5e:	b29a      	uxth	r2, r3
    1a60:	887b      	ldrh	r3, [r7, #2]
    1a62:	4313      	orrs	r3, r2
    1a64:	b29a      	uxth	r2, r3
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	829a      	strh	r2, [r3, #20]
    1a6a:	e009      	b.n	1a80 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a9b      	ldrh	r3, [r3, #20]
    1a70:	b29a      	uxth	r2, r3
    1a72:	887b      	ldrh	r3, [r7, #2]
    1a74:	43db      	mvns	r3, r3
    1a76:	b29b      	uxth	r3, r3
    1a78:	4013      	ands	r3, r2
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	829a      	strh	r2, [r3, #20]
  }
}
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	8a1b      	ldrh	r3, [r3, #16]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	f023 030f 	bic.w	r3, r3, #15
    1aa2:	b29a      	uxth	r2, r3
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	8a1b      	ldrh	r3, [r3, #16]
    1aac:	b29a      	uxth	r2, r3
    1aae:	78fb      	ldrb	r3, [r7, #3]
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	821a      	strh	r2, [r3, #16]
}
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	460b      	mov	r3, r1
    1ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	899b      	ldrh	r3, [r3, #12]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1ada:	b29a      	uxth	r2, r3
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	899b      	ldrh	r3, [r3, #12]
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	887b      	ldrh	r3, [r7, #2]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b29a      	uxth	r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	819a      	strh	r2, [r3, #12]
}
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b08:	78fb      	ldrb	r3, [r7, #3]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d008      	beq.n	1b20 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	899b      	ldrh	r3, [r3, #12]
    1b12:	b29b      	uxth	r3, r3
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	819a      	strh	r2, [r3, #12]
    1b1e:	e007      	b.n	1b30 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f023 0302 	bic.w	r3, r3, #2
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  }
}
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop

00001b3c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	460b      	mov	r3, r1
    1b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8a1b      	ldrh	r3, [r3, #16]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	f023 0320 	bic.w	r3, r3, #32
    1b52:	b29a      	uxth	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	8a1b      	ldrh	r3, [r3, #16]
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	887b      	ldrh	r3, [r7, #2]
    1b60:	4313      	orrs	r3, r2
    1b62:	b29a      	uxth	r2, r3
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	821a      	strh	r2, [r3, #16]
}
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	460b      	mov	r3, r1
    1b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b90:	b29a      	uxth	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	821a      	strh	r2, [r3, #16]
    1b96:	e007      	b.n	1ba8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  }
}
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1bc0:	887b      	ldrh	r3, [r7, #2]
    1bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bc6:	b29a      	uxth	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	809a      	strh	r2, [r3, #4]
}
    1bcc:	370c      	adds	r7, #12
    1bce:	46bd      	mov	sp, r7
    1bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop

00001bd8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	b29b      	uxth	r3, r3
    1be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bea:	b29b      	uxth	r3, r3
}
    1bec:	4618      	mov	r0, r3
    1bee:	370c      	adds	r7, #12
    1bf0:	46bd      	mov	sp, r7
    1bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf6:	4770      	bx	lr

00001bf8 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b083      	sub	sp, #12
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	899b      	ldrh	r3, [r3, #12]
    1c04:	b29b      	uxth	r3, r3
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	819a      	strh	r2, [r3, #12]
}
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	460b      	mov	r3, r1
    1c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8b1b      	ldrh	r3, [r3, #24]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	b29a      	uxth	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b1b      	ldrh	r3, [r3, #24]
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	b29b      	uxth	r3, r3
    1c44:	4313      	orrs	r3, r2
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	831a      	strh	r2, [r3, #24]
}
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1c58:	b480      	push	{r7}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	8b1b      	ldrh	r3, [r3, #24]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c6e:	b29a      	uxth	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	8b1b      	ldrh	r3, [r3, #24]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	78fb      	ldrb	r3, [r7, #3]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	4313      	orrs	r3, r2
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
}
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	460b      	mov	r3, r1
    1c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c9c:	78fb      	ldrb	r3, [r7, #3]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d008      	beq.n	1cb4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	8a9b      	ldrh	r3, [r3, #20]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	f043 0320 	orr.w	r3, r3, #32
    1cac:	b29a      	uxth	r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	829a      	strh	r2, [r3, #20]
    1cb2:	e007      	b.n	1cc4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8a9b      	ldrh	r3, [r3, #20]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 0320 	bic.w	r3, r3, #32
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	829a      	strh	r2, [r3, #20]
  }
}
    1cc4:	370c      	adds	r7, #12
    1cc6:	46bd      	mov	sp, r7
    1cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	460b      	mov	r3, r1
    1cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cdc:	78fb      	ldrb	r3, [r7, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d008      	beq.n	1cf4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	8a9b      	ldrh	r3, [r3, #20]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	f043 0310 	orr.w	r3, r3, #16
    1cec:	b29a      	uxth	r2, r3
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	829a      	strh	r2, [r3, #20]
    1cf2:	e007      	b.n	1d04 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	8a9b      	ldrh	r3, [r3, #20]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f023 0310 	bic.w	r3, r3, #16
    1cfe:	b29a      	uxth	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	829a      	strh	r2, [r3, #20]
  }
}
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d10:	b480      	push	{r7}
    1d12:	b083      	sub	sp, #12
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	460b      	mov	r3, r1
    1d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d1c:	78fb      	ldrb	r3, [r7, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d008      	beq.n	1d34 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	8a9b      	ldrh	r3, [r3, #20]
    1d26:	b29b      	uxth	r3, r3
    1d28:	f043 0308 	orr.w	r3, r3, #8
    1d2c:	b29a      	uxth	r2, r3
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	829a      	strh	r2, [r3, #20]
    1d32:	e007      	b.n	1d44 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	8a9b      	ldrh	r3, [r3, #20]
    1d38:	b29b      	uxth	r3, r3
    1d3a:	f023 0308 	bic.w	r3, r3, #8
    1d3e:	b29a      	uxth	r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	829a      	strh	r2, [r3, #20]
  }
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop

00001d50 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d50:	b480      	push	{r7}
    1d52:	b083      	sub	sp, #12
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	460b      	mov	r3, r1
    1d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d5c:	78fb      	ldrb	r3, [r7, #3]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00a      	beq.n	1d78 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	899b      	ldrh	r3, [r3, #12]
    1d66:	b29b      	uxth	r3, r3
    1d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d70:	b29a      	uxth	r2, r3
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	819a      	strh	r2, [r3, #12]
    1d76:	e007      	b.n	1d88 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d82:	b29a      	uxth	r2, r3
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	819a      	strh	r2, [r3, #12]
  }
}
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop

00001d94 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d94:	b480      	push	{r7}
    1d96:	b083      	sub	sp, #12
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	460b      	mov	r3, r1
    1d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1da0:	78fb      	ldrb	r3, [r7, #3]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d008      	beq.n	1db8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	8a9b      	ldrh	r3, [r3, #20]
    1daa:	b29b      	uxth	r3, r3
    1dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1db0:	b29a      	uxth	r2, r3
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	829a      	strh	r2, [r3, #20]
    1db6:	e007      	b.n	1dc8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	8a9b      	ldrh	r3, [r3, #20]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	829a      	strh	r2, [r3, #20]
  }
}
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1dd4:	b480      	push	{r7}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	8a9b      	ldrh	r3, [r3, #20]
    1de4:	b29b      	uxth	r3, r3
    1de6:	f023 0304 	bic.w	r3, r3, #4
    1dea:	b29a      	uxth	r2, r3
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	8a9b      	ldrh	r3, [r3, #20]
    1df4:	b29a      	uxth	r2, r3
    1df6:	887b      	ldrh	r3, [r7, #2]
    1df8:	4313      	orrs	r3, r2
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	829a      	strh	r2, [r3, #20]
}
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop

00001e0c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b083      	sub	sp, #12
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	460b      	mov	r3, r1
    1e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d008      	beq.n	1e30 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	8a9b      	ldrh	r3, [r3, #20]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 0302 	orr.w	r3, r3, #2
    1e28:	b29a      	uxth	r2, r3
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	829a      	strh	r2, [r3, #20]
    1e2e:	e007      	b.n	1e40 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  }
}
    1e40:	370c      	adds	r7, #12
    1e42:	46bd      	mov	sp, r7
    1e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e4c:	b480      	push	{r7}
    1e4e:	b085      	sub	sp, #20
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	460b      	mov	r3, r1
    1e56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e58:	2300      	movs	r3, #0
    1e5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	b29a      	uxth	r2, r3
    1e62:	887b      	ldrh	r3, [r7, #2]
    1e64:	4013      	ands	r3, r2
    1e66:	b29b      	uxth	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d002      	beq.n	1e72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e6c:	2301      	movs	r3, #1
    1e6e:	73fb      	strb	r3, [r7, #15]
    1e70:	e001      	b.n	1e76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e72:	2300      	movs	r3, #0
    1e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e76:	7bfb      	ldrb	r3, [r7, #15]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3714      	adds	r7, #20
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    1e90:	887b      	ldrh	r3, [r7, #2]
    1e92:	43db      	mvns	r3, r3
    1e94:	b29a      	uxth	r2, r3
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	801a      	strh	r2, [r3, #0]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr

00001ea4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ea4:	b480      	push	{r7}
    1ea6:	b087      	sub	sp, #28
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	460b      	mov	r3, r1
    1eae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
    1eb4:	2300      	movs	r3, #0
    1eb6:	617b      	str	r3, [r7, #20]
    1eb8:	2300      	movs	r3, #0
    1eba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1ebc:	2300      	movs	r3, #0
    1ebe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1ec0:	887b      	ldrh	r3, [r7, #2]
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	095b      	lsrs	r3, r3, #5
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1eca:	887b      	ldrh	r3, [r7, #2]
    1ecc:	f003 031f 	and.w	r3, r3, #31
    1ed0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2201      	movs	r2, #1
    1ed6:	fa02 f303 	lsl.w	r3, r2, r3
    1eda:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d106      	bne.n	1ef0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	899b      	ldrh	r3, [r3, #12]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	697a      	ldr	r2, [r7, #20]
    1eea:	4013      	ands	r3, r2
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00f      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d106      	bne.n	1f04 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	8a1b      	ldrh	r3, [r3, #16]
    1efa:	b29b      	uxth	r3, r3
    1efc:	697a      	ldr	r2, [r7, #20]
    1efe:	4013      	ands	r3, r2
    1f00:	617b      	str	r3, [r7, #20]
    1f02:	e005      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	8a9b      	ldrh	r3, [r3, #20]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	4013      	ands	r3, r2
    1f0e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b29b      	uxth	r3, r3
    1f16:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2201      	movs	r2, #1
    1f1c:	fa02 f303 	lsl.w	r3, r2, r3
    1f20:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	881b      	ldrh	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d005      	beq.n	1f40 <USART_GetITStatus+0x9c>
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f3a:	2301      	movs	r3, #1
    1f3c:	74fb      	strb	r3, [r7, #19]
    1f3e:	e001      	b.n	1f44 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f40:	2300      	movs	r3, #0
    1f42:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    1f44:	7cfb      	ldrb	r3, [r7, #19]
}
    1f46:	4618      	mov	r0, r3
    1f48:	371c      	adds	r7, #28
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f54:	b480      	push	{r7}
    1f56:	b085      	sub	sp, #20
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f60:	2300      	movs	r3, #0
    1f62:	81fb      	strh	r3, [r7, #14]
    1f64:	2300      	movs	r3, #0
    1f66:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    1f68:	887b      	ldrh	r3, [r7, #2]
    1f6a:	0a1b      	lsrs	r3, r3, #8
    1f6c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f6e:	89fb      	ldrh	r3, [r7, #14]
    1f70:	2201      	movs	r2, #1
    1f72:	fa02 f303 	lsl.w	r3, r2, r3
    1f76:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f78:	89bb      	ldrh	r3, [r7, #12]
    1f7a:	43db      	mvns	r3, r3
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	801a      	strh	r2, [r3, #0]
}
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f8c:	b480      	push	{r7}
    1f8e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	2200      	movs	r2, #0
    1f9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fa4:	2200      	movs	r2, #0
    1fa6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    1fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fb0:	2200      	movs	r2, #0
    1fb2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    1fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fbc:	2200      	movs	r2, #0
    1fbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fcc:	f2c0 020f 	movt	r2, #15
    1fd0:	615a      	str	r2, [r3, #20]
}
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1fdc:	b480      	push	{r7}
    1fde:	b085      	sub	sp, #20
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1fe4:	2300      	movs	r3, #0
    1fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff0:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d074      	beq.n	20e4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2006:	f2c4 0201 	movt	r2, #16385	; 0x4001
    200a:	6811      	ldr	r1, [r2, #0]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	43d2      	mvns	r2, r2
    2012:	400a      	ands	r2, r1
    2014:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2016:	f44f 6380 	mov.w	r3, #1024	; 0x400
    201a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	6812      	ldr	r2, [r2, #0]
    202c:	43d2      	mvns	r2, r2
    202e:	400a      	ands	r2, r1
    2030:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	4413      	add	r3, r2
    203a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	68fa      	ldr	r2, [r7, #12]
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	430a      	orrs	r2, r1
    2048:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	68d1      	ldr	r1, [r2, #12]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b10      	cmp	r3, #16
    2088:	d11a      	bne.n	20c0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    208e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2096:	f2c4 0201 	movt	r2, #16385	; 0x4001
    209a:	6891      	ldr	r1, [r2, #8]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	6812      	ldr	r2, [r2, #0]
    20a0:	430a      	orrs	r2, r1
    20a2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20b4:	68d1      	ldr	r1, [r2, #12]
    20b6:	687a      	ldr	r2, [r7, #4]
    20b8:	6812      	ldr	r2, [r2, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	60da      	str	r2, [r3, #12]
    20be:	e01e      	b.n	20fe <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    20c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20c8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	795b      	ldrb	r3, [r3, #5]
    20ce:	68fa      	ldr	r2, [r7, #12]
    20d0:	4413      	add	r3, r2
    20d2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68fa      	ldr	r2, [r7, #12]
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	430a      	orrs	r2, r1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	e00c      	b.n	20fe <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	791b      	ldrb	r3, [r3, #4]
    20e8:	68fa      	ldr	r2, [r7, #12]
    20ea:	4413      	add	r3, r2
    20ec:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    20ee:	68fb      	ldr	r3, [r7, #12]
    20f0:	68fa      	ldr	r2, [r7, #12]
    20f2:	6811      	ldr	r1, [r2, #0]
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	43d2      	mvns	r2, r2
    20fa:	400a      	ands	r2, r1
    20fc:	601a      	str	r2, [r3, #0]
  }
}
    20fe:	3714      	adds	r7, #20
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	220c      	movs	r2, #12
    2120:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	719a      	strb	r2, [r3, #6]
}
    2128:	370c      	adds	r7, #12
    212a:	46bd      	mov	sp, r7
    212c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2140:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2148:	f2c4 0201 	movt	r2, #16385	; 0x4001
    214c:	6911      	ldr	r1, [r2, #16]
    214e:	687a      	ldr	r2, [r7, #4]
    2150:	430a      	orrs	r2, r1
    2152:	611a      	str	r2, [r3, #16]
}
    2154:	370c      	adds	r7, #12
    2156:	46bd      	mov	sp, r7
    2158:	f85d 7b04 	ldr.w	r7, [sp], #4
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2160:	b480      	push	{r7}
    2162:	b085      	sub	sp, #20
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2168:	2300      	movs	r3, #0
    216a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2170:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2174:	695a      	ldr	r2, [r3, #20]
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4013      	ands	r3, r2
    217a:	2b00      	cmp	r3, #0
    217c:	d002      	beq.n	2184 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    217e:	2301      	movs	r3, #1
    2180:	73fb      	strb	r3, [r7, #15]
    2182:	e001      	b.n	2188 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    2184:	2300      	movs	r3, #0
    2186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2188:	7bfb      	ldrb	r3, [r7, #15]
}
    218a:	4618      	mov	r0, r3
    218c:	3714      	adds	r7, #20
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop

00002198 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2198:	b480      	push	{r7}
    219a:	b083      	sub	sp, #12
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    21a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21a8:	687a      	ldr	r2, [r7, #4]
    21aa:	615a      	str	r2, [r3, #20]
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop

000021b8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    21b8:	b480      	push	{r7}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    21c0:	2300      	movs	r3, #0
    21c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    21c4:	2300      	movs	r3, #0
    21c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    21c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	4013      	ands	r3, r2
    21d6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    21d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21e0:	695a      	ldr	r2, [r3, #20]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	4013      	ands	r3, r2
    21e6:	2b00      	cmp	r3, #0
    21e8:	d005      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    21f0:	2301      	movs	r3, #1
    21f2:	73fb      	strb	r3, [r7, #15]
    21f4:	e001      	b.n	21fa <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    21f6:	2300      	movs	r3, #0
    21f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21fa:	7bfb      	ldrb	r3, [r7, #15]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3714      	adds	r7, #20
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr

00002208 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2214:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	615a      	str	r2, [r3, #20]
}
    221c:	370c      	adds	r7, #12
    221e:	46bd      	mov	sp, r7
    2220:	f85d 7b04 	ldr.w	r7, [sp], #4
    2224:	4770      	bx	lr
    2226:	bf00      	nop

00002228 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2230:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2234:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    223e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2242:	60da      	str	r2, [r3, #12]
}
    2244:	370c      	adds	r7, #12
    2246:	46bd      	mov	sp, r7
    2248:	f85d 7b04 	ldr.w	r7, [sp], #4
    224c:	4770      	bx	lr
    224e:	bf00      	nop

00002250 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2250:	b480      	push	{r7}
    2252:	b087      	sub	sp, #28
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2258:	2300      	movs	r3, #0
    225a:	617b      	str	r3, [r7, #20]
    225c:	2300      	movs	r3, #0
    225e:	613b      	str	r3, [r7, #16]
    2260:	230f      	movs	r3, #15
    2262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	78db      	ldrb	r3, [r3, #3]
    2268:	2b00      	cmp	r3, #0
    226a:	d042      	beq.n	22f2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    226c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2270:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2274:	68db      	ldr	r3, [r3, #12]
    2276:	43db      	mvns	r3, r3
    2278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    227c:	0a1b      	lsrs	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	f1c3 0304 	rsb	r3, r3, #4
    2286:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	68fa      	ldr	r2, [r7, #12]
    228c:	fa22 f303 	lsr.w	r3, r2, r3
    2290:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	785b      	ldrb	r3, [r3, #1]
    2296:	461a      	mov	r2, r3
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	fa02 f303 	lsl.w	r3, r2, r3
    229e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	461a      	mov	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	4013      	ands	r3, r2
    22aa:	697a      	ldr	r2, [r7, #20]
    22ac:	4313      	orrs	r3, r2
    22ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	011b      	lsls	r3, r3, #4
    22b4:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    22b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7812      	ldrb	r2, [r2, #0]
    22c2:	4611      	mov	r1, r2
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	b2d2      	uxtb	r2, r2
    22c8:	440b      	add	r3, r1
    22ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	7812      	ldrb	r2, [r2, #0]
    22da:	0952      	lsrs	r2, r2, #5
    22dc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	7809      	ldrb	r1, [r1, #0]
    22e2:	f001 011f 	and.w	r1, r1, #31
    22e6:	2001      	movs	r0, #1
    22e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    22f0:	e011      	b.n	2316 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	7812      	ldrb	r2, [r2, #0]
    22fe:	0952      	lsrs	r2, r2, #5
    2300:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2302:	6879      	ldr	r1, [r7, #4]
    2304:	7809      	ldrb	r1, [r1, #0]
    2306:	f001 011f 	and.w	r1, r1, #31
    230a:	2001      	movs	r0, #1
    230c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2310:	3220      	adds	r2, #32
    2312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2316:	371c      	adds	r7, #28
    2318:	46bd      	mov	sp, r7
    231a:	f85d 7b04 	ldr.w	r7, [sp], #4
    231e:	4770      	bx	lr

00002320 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2320:	b480      	push	{r7}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    232a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2332:	683a      	ldr	r2, [r7, #0]
    2334:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2338:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233c:	6879      	ldr	r1, [r7, #4]
    233e:	430a      	orrs	r2, r1
    2340:	609a      	str	r2, [r3, #8]
}
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr

0000234c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	71fa      	strb	r2, [r7, #7]
    2358:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    235a:	79bb      	ldrb	r3, [r7, #6]
    235c:	2b00      	cmp	r3, #0
    235e:	d00c      	beq.n	237a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2360:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2364:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2368:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    236c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2370:	6911      	ldr	r1, [r2, #16]
    2372:	79fa      	ldrb	r2, [r7, #7]
    2374:	430a      	orrs	r2, r1
    2376:	611a      	str	r2, [r3, #16]
    2378:	e00c      	b.n	2394 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2386:	f2ce 0200 	movt	r2, #57344	; 0xe000
    238a:	6911      	ldr	r1, [r2, #16]
    238c:	79fa      	ldrb	r2, [r7, #7]
    238e:	43d2      	mvns	r2, r2
    2390:	400a      	ands	r2, r1
    2392:	611a      	str	r2, [r3, #16]
  }
}
    2394:	370c      	adds	r7, #12
    2396:	46bd      	mov	sp, r7
    2398:	f85d 7b04 	ldr.w	r7, [sp], #4
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2b04      	cmp	r3, #4
    23ac:	d10c      	bne.n	23c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23ae:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b6:	f24e 0210 	movw	r2, #57360	; 0xe010
    23ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23be:	6812      	ldr	r2, [r2, #0]
    23c0:	f042 0204 	orr.w	r2, r2, #4
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e00b      	b.n	23e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23c8:	f24e 0310 	movw	r3, #57360	; 0xe010
    23cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d0:	f24e 0210 	movw	r2, #57360	; 0xe010
    23d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23d8:	6812      	ldr	r2, [r2, #0]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	601a      	str	r2, [r3, #0]
  }
}
    23e0:	370c      	adds	r7, #12
    23e2:	46bd      	mov	sp, r7
    23e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af00      	add	r7, sp, #0
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	60b9      	str	r1, [r7, #8]
    23f6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23f8:	2038      	movs	r0, #56	; 0x38
    23fa:	f003 fd83 	bl	5f04 <pvPortMalloc>
    23fe:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d058      	beq.n	24b8 <xCoRoutineCreate+0xcc>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2406:	f240 6344 	movw	r3, #1604	; 0x644
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	681b      	ldr	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d107      	bne.n	2424 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2414:	f240 6344 	movw	r3, #1604	; 0x644
    2418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241c:	693a      	ldr	r2, [r7, #16]
    241e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2420:	f000 fa08 	bl	2834 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2b01      	cmp	r3, #1
    2428:	d901      	bls.n	242e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    242a:	2301      	movs	r3, #1
    242c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2200      	movs	r2, #0
    2432:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2434:	693b      	ldr	r3, [r7, #16]
    2436:	68ba      	ldr	r2, [r7, #8]
    2438:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	687a      	ldr	r2, [r7, #4]
    243e:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	68fa      	ldr	r2, [r7, #12]
    2444:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	3304      	adds	r3, #4
    244a:	4618      	mov	r0, r3
    244c:	f001 fec2 	bl	41d4 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2450:	693b      	ldr	r3, [r7, #16]
    2452:	3318      	adds	r3, #24
    2454:	4618      	mov	r0, r3
    2456:	f001 febd 	bl	41d4 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    245a:	693b      	ldr	r3, [r7, #16]
    245c:	693a      	ldr	r2, [r7, #16]
    245e:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2460:	693b      	ldr	r3, [r7, #16]
    2462:	693a      	ldr	r2, [r7, #16]
    2464:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	f1c3 0205 	rsb	r2, r3, #5
    246c:	693b      	ldr	r3, [r7, #16]
    246e:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2470:	693b      	ldr	r3, [r7, #16]
    2472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2474:	f240 6348 	movw	r3, #1608	; 0x648
    2478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    247c:	681b      	ldr	r3, [r3, #0]
    247e:	429a      	cmp	r2, r3
    2480:	d906      	bls.n	2490 <xCoRoutineCreate+0xa4>
    2482:	693b      	ldr	r3, [r7, #16]
    2484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2486:	f240 6348 	movw	r3, #1608	; 0x648
    248a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    248e:	601a      	str	r2, [r3, #0]
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2494:	4613      	mov	r3, r2
    2496:	009b      	lsls	r3, r3, #2
    2498:	4413      	add	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	f240 52d8 	movw	r2, #1496	; 0x5d8
    24a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    24a4:	441a      	add	r2, r3
    24a6:	693b      	ldr	r3, [r7, #16]
    24a8:	3304      	adds	r3, #4
    24aa:	4610      	mov	r0, r2
    24ac:	4619      	mov	r1, r3
    24ae:	f001 fe9d 	bl	41ec <vListInsertEnd>

		xReturn = pdPASS;
    24b2:	2301      	movs	r3, #1
    24b4:	617b      	str	r3, [r7, #20]
    24b6:	e002      	b.n	24be <xCoRoutineCreate+0xd2>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b8:	f04f 33ff 	mov.w	r3, #4294967295
    24bc:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    24be:	697b      	ldr	r3, [r7, #20]
}
    24c0:	4618      	mov	r0, r3
    24c2:	3718      	adds	r7, #24
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}

000024c8 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    24d2:	f240 634c 	movw	r3, #1612	; 0x64c
    24d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24da:	681a      	ldr	r2, [r3, #0]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	4413      	add	r3, r2
    24e0:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    24e2:	f240 6344 	movw	r3, #1604	; 0x644
    24e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24ea:	681b      	ldr	r3, [r3, #0]
    24ec:	3304      	adds	r3, #4
    24ee:	4618      	mov	r0, r3
    24f0:	f001 fedc 	bl	42ac <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    24f4:	f240 6344 	movw	r3, #1604	; 0x644
    24f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24fc:	681b      	ldr	r3, [r3, #0]
    24fe:	68fa      	ldr	r2, [r7, #12]
    2500:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2502:	f240 634c 	movw	r3, #1612	; 0x64c
    2506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	68fa      	ldr	r2, [r7, #12]
    250e:	429a      	cmp	r2, r3
    2510:	d20f      	bcs.n	2532 <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2512:	f240 632c 	movw	r3, #1580	; 0x62c
    2516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    251a:	681a      	ldr	r2, [r3, #0]
    251c:	f240 6344 	movw	r3, #1604	; 0x644
    2520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	3304      	adds	r3, #4
    2528:	4610      	mov	r0, r2
    252a:	4619      	mov	r1, r3
    252c:	f001 fe86 	bl	423c <vListInsert>
    2530:	e00e      	b.n	2550 <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2532:	f240 6328 	movw	r3, #1576	; 0x628
    2536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253a:	681a      	ldr	r2, [r3, #0]
    253c:	f240 6344 	movw	r3, #1604	; 0x644
    2540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	3304      	adds	r3, #4
    2548:	4610      	mov	r0, r2
    254a:	4619      	mov	r1, r3
    254c:	f001 fe76 	bl	423c <vListInsert>
	}

	if( pxEventList )
    2550:	683b      	ldr	r3, [r7, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d009      	beq.n	256a <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2556:	f240 6344 	movw	r3, #1604	; 0x644
    255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	3318      	adds	r3, #24
    2562:	6838      	ldr	r0, [r7, #0]
    2564:	4619      	mov	r1, r3
    2566:	f001 fe69 	bl	423c <vListInsert>
	}
}
    256a:	3710      	adds	r7, #16
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}

00002570 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2576:	e039      	b.n	25ec <prvCheckPendingReadyList+0x7c>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2578:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    257c:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2580:	f240 6330 	movw	r3, #1584	; 0x630
    2584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2588:	68db      	ldr	r3, [r3, #12]
    258a:	68db      	ldr	r3, [r3, #12]
    258c:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	3318      	adds	r3, #24
    2592:	4618      	mov	r0, r3
    2594:	f001 fe8a 	bl	42ac <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2598:	f04f 0000 	mov.w	r0, #0
    259c:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	3304      	adds	r3, #4
    25a4:	4618      	mov	r0, r3
    25a6:	f001 fe81 	bl	42ac <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ae:	f240 6348 	movw	r3, #1608	; 0x648
    25b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	429a      	cmp	r2, r3
    25ba:	d906      	bls.n	25ca <prvCheckPendingReadyList+0x5a>
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25c0:	f240 6348 	movw	r3, #1608	; 0x648
    25c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25c8:	601a      	str	r2, [r3, #0]
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ce:	4613      	mov	r3, r2
    25d0:	009b      	lsls	r3, r3, #2
    25d2:	4413      	add	r3, r2
    25d4:	009b      	lsls	r3, r3, #2
    25d6:	f240 52d8 	movw	r2, #1496	; 0x5d8
    25da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    25de:	441a      	add	r2, r3
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	3304      	adds	r3, #4
    25e4:	4610      	mov	r0, r2
    25e6:	4619      	mov	r1, r3
    25e8:	f001 fe00 	bl	41ec <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25ec:	f240 6330 	movw	r3, #1584	; 0x630
    25f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1be      	bne.n	2578 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    25fa:	3708      	adds	r7, #8
    25fc:	46bd      	mov	sp, r7
    25fe:	bd80      	pop	{r7, pc}

00002600 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2600:	b580      	push	{r7, lr}
    2602:	b082      	sub	sp, #8
    2604:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2606:	f002 fecf 	bl	53a8 <xTaskGetTickCount>
    260a:	4602      	mov	r2, r0
    260c:	f240 6350 	movw	r3, #1616	; 0x650
    2610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	1ad2      	subs	r2, r2, r3
    2618:	f240 6354 	movw	r3, #1620	; 0x654
    261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2620:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2622:	e085      	b.n	2730 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
    2624:	f240 634c 	movw	r3, #1612	; 0x64c
    2628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	1c5a      	adds	r2, r3, #1
    2630:	f240 634c 	movw	r3, #1612	; 0x64c
    2634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2638:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    263a:	f240 6354 	movw	r3, #1620	; 0x654
    263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	1e5a      	subs	r2, r3, #1
    2646:	f240 6354 	movw	r3, #1620	; 0x654
    264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    264e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2650:	f240 634c 	movw	r3, #1612	; 0x64c
    2654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	2b00      	cmp	r3, #0
    265c:	d116      	bne.n	268c <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    265e:	f240 6328 	movw	r3, #1576	; 0x628
    2662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    266a:	f240 632c 	movw	r3, #1580	; 0x62c
    266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2672:	681a      	ldr	r2, [r3, #0]
    2674:	f240 6328 	movw	r3, #1576	; 0x628
    2678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    267e:	f240 632c 	movw	r3, #1580	; 0x62c
    2682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2686:	687a      	ldr	r2, [r7, #4]
    2688:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    268a:	e049      	b.n	2720 <prvCheckDelayedList+0x120>
    268c:	e048      	b.n	2720 <prvCheckDelayedList+0x120>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    268e:	f240 6328 	movw	r3, #1576	; 0x628
    2692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	68db      	ldr	r3, [r3, #12]
    269a:	68db      	ldr	r3, [r3, #12]
    269c:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    269e:	683b      	ldr	r3, [r7, #0]
    26a0:	685a      	ldr	r2, [r3, #4]
    26a2:	f240 634c 	movw	r3, #1612	; 0x64c
    26a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	429a      	cmp	r2, r3
    26ae:	d900      	bls.n	26b2 <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    26b0:	e03e      	b.n	2730 <prvCheckDelayedList+0x130>
			}																						

			portDISABLE_INTERRUPTS();
    26b2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    26b6:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    26ba:	683b      	ldr	r3, [r7, #0]
    26bc:	3304      	adds	r3, #4
    26be:	4618      	mov	r0, r3
    26c0:	f001 fdf4 	bl	42ac <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26c8:	2b00      	cmp	r3, #0
    26ca:	d004      	beq.n	26d6 <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    26cc:	683b      	ldr	r3, [r7, #0]
    26ce:	3318      	adds	r3, #24
    26d0:	4618      	mov	r0, r3
    26d2:	f001 fdeb 	bl	42ac <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    26d6:	f04f 0000 	mov.w	r0, #0
    26da:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    26de:	683b      	ldr	r3, [r7, #0]
    26e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26e2:	f240 6348 	movw	r3, #1608	; 0x648
    26e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	429a      	cmp	r2, r3
    26ee:	d906      	bls.n	26fe <prvCheckDelayedList+0xfe>
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26f4:	f240 6348 	movw	r3, #1608	; 0x648
    26f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26fc:	601a      	str	r2, [r3, #0]
    26fe:	683b      	ldr	r3, [r7, #0]
    2700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2702:	4613      	mov	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	4413      	add	r3, r2
    2708:	009b      	lsls	r3, r3, #2
    270a:	f240 52d8 	movw	r2, #1496	; 0x5d8
    270e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2712:	441a      	add	r2, r3
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	3304      	adds	r3, #4
    2718:	4610      	mov	r0, r2
    271a:	4619      	mov	r1, r3
    271c:	f001 fd66 	bl	41ec <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2720:	f240 6328 	movw	r3, #1576	; 0x628
    2724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d1ae      	bne.n	268e <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2730:	f240 6354 	movw	r3, #1620	; 0x654
    2734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2738:	681b      	ldr	r3, [r3, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	f47f af72 	bne.w	2624 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2740:	f240 634c 	movw	r3, #1612	; 0x64c
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	681a      	ldr	r2, [r3, #0]
    274a:	f240 6350 	movw	r3, #1616	; 0x650
    274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2752:	601a      	str	r2, [r3, #0]
}
    2754:	3708      	adds	r7, #8
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}
    275a:	bf00      	nop

0000275c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    275c:	b580      	push	{r7, lr}
    275e:	b082      	sub	sp, #8
    2760:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2762:	f7ff ff05 	bl	2570 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2766:	f7ff ff4b 	bl	2600 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    276a:	e012      	b.n	2792 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    276c:	f240 6348 	movw	r3, #1608	; 0x648
    2770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	2b00      	cmp	r3, #0
    2778:	d100      	bne.n	277c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    277a:	e057      	b.n	282c <vCoRoutineSchedule+0xd0>
		}
		--uxTopCoRoutineReadyPriority;
    277c:	f240 6348 	movw	r3, #1608	; 0x648
    2780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	1e5a      	subs	r2, r3, #1
    2788:	f240 6348 	movw	r3, #1608	; 0x648
    278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2790:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2792:	f240 6348 	movw	r3, #1608	; 0x648
    2796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    279a:	6819      	ldr	r1, [r3, #0]
    279c:	f240 52d8 	movw	r2, #1496	; 0x5d8
    27a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27a4:	460b      	mov	r3, r1
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	440b      	add	r3, r1
    27aa:	009b      	lsls	r3, r3, #2
    27ac:	4413      	add	r3, r2
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d0db      	beq.n	276c <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    27b4:	f240 6348 	movw	r3, #1608	; 0x648
    27b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27bc:	681a      	ldr	r2, [r3, #0]
    27be:	4613      	mov	r3, r2
    27c0:	009b      	lsls	r3, r3, #2
    27c2:	4413      	add	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	f240 52d8 	movw	r2, #1496	; 0x5d8
    27ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27ce:	4413      	add	r3, r2
    27d0:	607b      	str	r3, [r7, #4]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	685b      	ldr	r3, [r3, #4]
    27d6:	685a      	ldr	r2, [r3, #4]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	605a      	str	r2, [r3, #4]
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	685a      	ldr	r2, [r3, #4]
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	3308      	adds	r3, #8
    27e4:	429a      	cmp	r2, r3
    27e6:	d104      	bne.n	27f2 <vCoRoutineSchedule+0x96>
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	685b      	ldr	r3, [r3, #4]
    27ec:	685a      	ldr	r2, [r3, #4]
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	605a      	str	r2, [r3, #4]
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	685b      	ldr	r3, [r3, #4]
    27f6:	68da      	ldr	r2, [r3, #12]
    27f8:	f240 6344 	movw	r3, #1604	; 0x644
    27fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2800:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2802:	f240 6344 	movw	r3, #1604	; 0x644
    2806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	681a      	ldr	r2, [r3, #0]
    280e:	f240 6344 	movw	r3, #1604	; 0x644
    2812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2816:	6819      	ldr	r1, [r3, #0]
    2818:	f240 6344 	movw	r3, #1604	; 0x644
    281c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2820:	681b      	ldr	r3, [r3, #0]
    2822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2824:	4608      	mov	r0, r1
    2826:	4619      	mov	r1, r3
    2828:	4790      	blx	r2

	return;
    282a:	bf00      	nop
}
    282c:	3708      	adds	r7, #8
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	bf00      	nop

00002834 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    283a:	2300      	movs	r3, #0
    283c:	607b      	str	r3, [r7, #4]
    283e:	e00f      	b.n	2860 <prvInitialiseCoRoutineLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2840:	687a      	ldr	r2, [r7, #4]
    2842:	4613      	mov	r3, r2
    2844:	009b      	lsls	r3, r3, #2
    2846:	4413      	add	r3, r2
    2848:	009b      	lsls	r3, r3, #2
    284a:	f240 52d8 	movw	r2, #1496	; 0x5d8
    284e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2852:	4413      	add	r3, r2
    2854:	4618      	mov	r0, r3
    2856:	f001 fc9d 	bl	4194 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	3301      	adds	r3, #1
    285e:	607b      	str	r3, [r7, #4]
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	2b01      	cmp	r3, #1
    2864:	d9ec      	bls.n	2840 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2866:	f240 6000 	movw	r0, #1536	; 0x600
    286a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    286e:	f001 fc91 	bl	4194 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2872:	f240 6014 	movw	r0, #1556	; 0x614
    2876:	f2c2 0000 	movt	r0, #8192	; 0x2000
    287a:	f001 fc8b 	bl	4194 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    287e:	f240 6030 	movw	r0, #1584	; 0x630
    2882:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2886:	f001 fc85 	bl	4194 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    288a:	f240 6328 	movw	r3, #1576	; 0x628
    288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2892:	f240 6200 	movw	r2, #1536	; 0x600
    2896:	f2c2 0200 	movt	r2, #8192	; 0x2000
    289a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    289c:	f240 632c 	movw	r3, #1580	; 0x62c
    28a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a4:	f240 6214 	movw	r2, #1556	; 0x614
    28a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28ac:	601a      	str	r2, [r3, #0]
}
    28ae:	3708      	adds	r7, #8
    28b0:	46bd      	mov	sp, r7
    28b2:	bd80      	pop	{r7, pc}

000028b4 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	68db      	ldr	r3, [r3, #12]
    28c0:	68db      	ldr	r3, [r3, #12]
    28c2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    28c4:	68bb      	ldr	r3, [r7, #8]
    28c6:	3318      	adds	r3, #24
    28c8:	4618      	mov	r0, r3
    28ca:	f001 fcef 	bl	42ac <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	3318      	adds	r3, #24
    28d2:	f240 6030 	movw	r0, #1584	; 0x630
    28d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28da:	4619      	mov	r1, r3
    28dc:	f001 fc86 	bl	41ec <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    28e0:	68bb      	ldr	r3, [r7, #8]
    28e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28e4:	f240 6344 	movw	r3, #1604	; 0x644
    28e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28f0:	429a      	cmp	r2, r3
    28f2:	d302      	bcc.n	28fa <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    28f4:	2301      	movs	r3, #1
    28f6:	60fb      	str	r3, [r7, #12]
    28f8:	e001      	b.n	28fe <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    28fa:	2300      	movs	r3, #0
    28fc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    28fe:	68fb      	ldr	r3, [r7, #12]
}
    2900:	4618      	mov	r0, r3
    2902:	3710      	adds	r7, #16
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}

00002908 <xIsERLNull>:
static void vEventSetxTag(portTickType xDeadline, portTickType xTimestamp, xEventHandle pxNewEvent );

// if xEventReadyList is not null,
// then return the type of destination servant of the first event
portBASE_TYPE xIsERLNull()
{
    2908:	b580      	push	{r7, lr}
    290a:	b086      	sub	sp, #24
    290c:	af00      	add	r7, sp, #0
    portBASE_TYPE pxDestination;
    struct tag xTag;
    if(listCURRENT_LIST_LENGTH(&xEventReadyList) > 0)
    290e:	f240 63c4 	movw	r3, #1732	; 0x6c4
    2912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2916:	681b      	ldr	r3, [r3, #0]
    2918:	2b00      	cmp	r3, #0
    291a:	d029      	beq.n	2970 <xIsERLNull+0x68>
    {
        pxDestination = xEventGetpxDestination((xEventReadyList.xListEnd.pxNext)->pvOwner); 
    291c:	f240 63c4 	movw	r3, #1732	; 0x6c4
    2920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2924:	68db      	ldr	r3, [r3, #12]
    2926:	68db      	ldr	r3, [r3, #12]
    2928:	4618      	mov	r0, r3
    292a:	f000 f833 	bl	2994 <xEventGetpxDestination>
    292e:	6178      	str	r0, [r7, #20]
        xTag = xEventGetxTag(xEventReadyList.xListEnd.pxNext->pvOwner);
    2930:	f240 63c4 	movw	r3, #1732	; 0x6c4
    2934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2938:	68db      	ldr	r3, [r3, #12]
    293a:	68db      	ldr	r3, [r3, #12]
    293c:	1d3a      	adds	r2, r7, #4
    293e:	4610      	mov	r0, r2
    2940:	4619      	mov	r1, r3
    2942:	f000 f833 	bl	29ac <xEventGetxTag>
        if( xTaskGetTickCount() >= xTag.xTimestamp )
    2946:	f002 fd2f 	bl	53a8 <xTaskGetTickCount>
    294a:	4602      	mov	r2, r0
    294c:	68bb      	ldr	r3, [r7, #8]
    294e:	429a      	cmp	r2, r3
    2950:	d30c      	bcc.n	296c <xIsERLNull+0x64>
            return xContexts[pxDestination].xType; 
    2952:	f240 62d8 	movw	r2, #1752	; 0x6d8
    2956:	f2c2 0200 	movt	r2, #8192	; 0x2000
    295a:	6979      	ldr	r1, [r7, #20]
    295c:	460b      	mov	r3, r1
    295e:	00db      	lsls	r3, r3, #3
    2960:	1a5b      	subs	r3, r3, r1
    2962:	00db      	lsls	r3, r3, #3
    2964:	4413      	add	r3, r2
    2966:	3304      	adds	r3, #4
    2968:	681b      	ldr	r3, [r3, #0]
    296a:	e003      	b.n	2974 <xIsERLNull+0x6c>
        else
            return 0;
    296c:	2300      	movs	r3, #0
    296e:	e001      	b.n	2974 <xIsERLNull+0x6c>
    }
    return -1;
    2970:	f04f 33ff 	mov.w	r3, #4294967295
}
    2974:	4618      	mov	r0, r3
    2976:	3718      	adds	r7, #24
    2978:	46bd      	mov	sp, r7
    297a:	bd80      	pop	{r7, pc}

0000297c <xEventGetpxSource>:

portBASE_TYPE xEventGetpxSource( xEventHandle pxEvent )
{
    297c:	b480      	push	{r7}
    297e:	b083      	sub	sp, #12
    2980:	af00      	add	r7, sp, #0
    2982:	6078      	str	r0, [r7, #4]
    return ((eveECB *)pxEvent)->pxSource;
    2984:	687b      	ldr	r3, [r7, #4]
    2986:	681b      	ldr	r3, [r3, #0]
}
    2988:	4618      	mov	r0, r3
    298a:	370c      	adds	r7, #12
    298c:	46bd      	mov	sp, r7
    298e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2992:	4770      	bx	lr

00002994 <xEventGetpxDestination>:

portBASE_TYPE xEventGetpxDestination( xEventHandle pxEvent)
{
    2994:	b480      	push	{r7}
    2996:	b083      	sub	sp, #12
    2998:	af00      	add	r7, sp, #0
    299a:	6078      	str	r0, [r7, #4]
    return ((eveECB *) pxEvent)->pxDestination;
    299c:	687b      	ldr	r3, [r7, #4]
    299e:	685b      	ldr	r3, [r3, #4]
}
    29a0:	4618      	mov	r0, r3
    29a2:	370c      	adds	r7, #12
    29a4:	46bd      	mov	sp, r7
    29a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    29aa:	4770      	bx	lr

000029ac <xEventGetxTag>:

struct tag xEventGetxTag( xEventHandle pxEvent)
{
    29ac:	b490      	push	{r4, r7}
    29ae:	b082      	sub	sp, #8
    29b0:	af00      	add	r7, sp, #0
    29b2:	6078      	str	r0, [r7, #4]
    29b4:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xTag;
    29b6:	687a      	ldr	r2, [r7, #4]
    29b8:	683b      	ldr	r3, [r7, #0]
    29ba:	4614      	mov	r4, r2
    29bc:	3308      	adds	r3, #8
    29be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    29c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    29c4:	6878      	ldr	r0, [r7, #4]
    29c6:	3708      	adds	r7, #8
    29c8:	46bd      	mov	sp, r7
    29ca:	bc90      	pop	{r4, r7}
    29cc:	4770      	bx	lr
    29ce:	bf00      	nop

000029d0 <xEventGetxData>:

struct eventData xEventGetxData( xEventHandle pxEvent)
{
    29d0:	b480      	push	{r7}
    29d2:	b083      	sub	sp, #12
    29d4:	af00      	add	r7, sp, #0
    29d6:	6078      	str	r0, [r7, #4]
    29d8:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xData;
    29da:	687b      	ldr	r3, [r7, #4]
    29dc:	683a      	ldr	r2, [r7, #0]
    29de:	3218      	adds	r2, #24
    29e0:	e892 0003 	ldmia.w	r2, {r0, r1}
    29e4:	e883 0003 	stmia.w	r3, {r0, r1}
}
    29e8:	6878      	ldr	r0, [r7, #4]
    29ea:	370c      	adds	r7, #12
    29ec:	46bd      	mov	sp, r7
    29ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    29f2:	4770      	bx	lr

000029f4 <getGCD>:

static portBASE_TYPE getGCD(portTickType t1, portTickType t2)
{
    29f4:	b580      	push	{r7, lr}
    29f6:	b082      	sub	sp, #8
    29f8:	af00      	add	r7, sp, #0
    29fa:	6078      	str	r0, [r7, #4]
    29fc:	6039      	str	r1, [r7, #0]
    return t1%t2==0 ? t2 : getGCD(t2, t1 % t2);
    29fe:	687b      	ldr	r3, [r7, #4]
    2a00:	683a      	ldr	r2, [r7, #0]
    2a02:	fbb3 f2f2 	udiv	r2, r3, r2
    2a06:	6839      	ldr	r1, [r7, #0]
    2a08:	fb01 f202 	mul.w	r2, r1, r2
    2a0c:	1a9b      	subs	r3, r3, r2
    2a0e:	2b00      	cmp	r3, #0
    2a10:	d00d      	beq.n	2a2e <getGCD+0x3a>
    2a12:	687b      	ldr	r3, [r7, #4]
    2a14:	683a      	ldr	r2, [r7, #0]
    2a16:	fbb3 f2f2 	udiv	r2, r3, r2
    2a1a:	6839      	ldr	r1, [r7, #0]
    2a1c:	fb01 f202 	mul.w	r2, r1, r2
    2a20:	1a9b      	subs	r3, r3, r2
    2a22:	6838      	ldr	r0, [r7, #0]
    2a24:	4619      	mov	r1, r3
    2a26:	f7ff ffe5 	bl	29f4 <getGCD>
    2a2a:	4603      	mov	r3, r0
    2a2c:	e000      	b.n	2a30 <getGCD+0x3c>
    2a2e:	683b      	ldr	r3, [r7, #0]
}
    2a30:	4618      	mov	r0, r3
    2a32:	3708      	adds	r7, #8
    2a34:	46bd      	mov	sp, r7
    2a36:	bd80      	pop	{r7, pc}

00002a38 <GCDOfTaskPeriod>:

inline static portTickType GCDOfTaskPeriod()
{
    2a38:	b580      	push	{r7, lr}
    2a3a:	b082      	sub	sp, #8
    2a3c:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    portTickType result = xPeriodOfTask[0];
    2a3e:	f240 0328 	movw	r3, #40	; 0x28
    2a42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a46:	681b      	ldr	r3, [r3, #0]
    2a48:	603b      	str	r3, [r7, #0]

    for( i = 1; i < NUMBEROFTASK; ++ i )
    2a4a:	2301      	movs	r3, #1
    2a4c:	607b      	str	r3, [r7, #4]
    2a4e:	e00f      	b.n	2a70 <GCDOfTaskPeriod+0x38>
    {
        result = getGCD(result , xPeriodOfTask[i]); 
    2a50:	f240 0328 	movw	r3, #40	; 0x28
    2a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a58:	687a      	ldr	r2, [r7, #4]
    2a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2a5e:	6838      	ldr	r0, [r7, #0]
    2a60:	4619      	mov	r1, r3
    2a62:	f7ff ffc7 	bl	29f4 <getGCD>
    2a66:	4603      	mov	r3, r0
    2a68:	603b      	str	r3, [r7, #0]
inline static portTickType GCDOfTaskPeriod()
{
    portBASE_TYPE i;
    portTickType result = xPeriodOfTask[0];

    for( i = 1; i < NUMBEROFTASK; ++ i )
    2a6a:	687b      	ldr	r3, [r7, #4]
    2a6c:	3301      	adds	r3, #1
    2a6e:	607b      	str	r3, [r7, #4]
    2a70:	687b      	ldr	r3, [r7, #4]
    2a72:	2b0c      	cmp	r3, #12
    2a74:	ddec      	ble.n	2a50 <GCDOfTaskPeriod+0x18>
    {
        result = getGCD(result , xPeriodOfTask[i]); 
    }
    return result;
    2a76:	683b      	ldr	r3, [r7, #0]
}
    2a78:	4618      	mov	r0, r3
    2a7a:	3708      	adds	r7, #8
    2a7c:	46bd      	mov	sp, r7
    2a7e:	bd80      	pop	{r7, pc}

00002a80 <vInitialiseEventLists>:

void vInitialiseEventLists() 
{
    2a80:	b590      	push	{r4, r7, lr}
    2a82:	b091      	sub	sp, #68	; 0x44
    2a84:	af00      	add	r7, sp, #0
    volatile portBASE_TYPE xCPU, i;
    eveECB * pxIdleEvents[NUMBEROFEVENTS];
    eveECB * pxEndFlagEvent;

    // init the GCD of Task period;
    GCDPeriod = GCDOfTaskPeriod();
    2a86:	f7ff ffd7 	bl	2a38 <GCDOfTaskPeriod>
    2a8a:	4602      	mov	r2, r0
    2a8c:	f240 6358 	movw	r3, #1624	; 0x658
    2a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a94:	601a      	str	r2, [r3, #0]

    vListInitialise( ( xList * ) &xEventIdleList);
    2a96:	f240 6060 	movw	r0, #1632	; 0x660
    2a9a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2a9e:	f001 fb79 	bl	4194 <vListInitialise>
    vListInitialise( ( xList * ) &xEventNonExecutablePool );
    2aa2:	f240 6074 	movw	r0, #1652	; 0x674
    2aa6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2aaa:	f001 fb73 	bl	4194 <vListInitialise>
    vListInitialise( ( xList * ) &xEventNonExecutableList);
    2aae:	f240 6088 	movw	r0, #1672	; 0x688
    2ab2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ab6:	f001 fb6d 	bl	4194 <vListInitialise>
    vListInitialise( ( xList * ) &xEventExecutablePool );
    2aba:	f240 609c 	movw	r0, #1692	; 0x69c
    2abe:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ac2:	f001 fb67 	bl	4194 <vListInitialise>
    vListInitialise( ( xList * ) &xEventExecutableList );
    2ac6:	f240 60b0 	movw	r0, #1712	; 0x6b0
    2aca:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ace:	f001 fb61 	bl	4194 <vListInitialise>
    vListInitialise( (xList * ) & xEventReadyList);
    2ad2:	f240 60c4 	movw	r0, #1732	; 0x6c4
    2ad6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ada:	f001 fb5b 	bl	4194 <vListInitialise>

    for( i = 0; i < NUMBEROFEVENTS; ++i )
    2ade:	2300      	movs	r3, #0
    2ae0:	637b      	str	r3, [r7, #52]	; 0x34
    2ae2:	e02f      	b.n	2b44 <vInitialiseEventLists+0xc4>
    {
        pxIdleEvents[i] = (eveECB *) pvPortMalloc(sizeof(eveECB)); 
    2ae4:	6b7c      	ldr	r4, [r7, #52]	; 0x34
    2ae6:	2034      	movs	r0, #52	; 0x34
    2ae8:	f003 fa0c 	bl	5f04 <pvPortMalloc>
    2aec:	4602      	mov	r2, r0
    2aee:	00a3      	lsls	r3, r4, #2
    2af0:	f107 0140 	add.w	r1, r7, #64	; 0x40
    2af4:	440b      	add	r3, r1
    2af6:	f843 2c40 	str.w	r2, [r3, #-64]
        vListIntialiseEventItem( pxIdleEvents[i], (xListItem *) & pxIdleEvents[i]->xEventListItem );
    2afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2afc:	009b      	lsls	r3, r3, #2
    2afe:	f107 0240 	add.w	r2, r7, #64	; 0x40
    2b02:	4413      	add	r3, r2
    2b04:	f853 2c40 	ldr.w	r2, [r3, #-64]
    2b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2b0a:	009b      	lsls	r3, r3, #2
    2b0c:	f107 0140 	add.w	r1, r7, #64	; 0x40
    2b10:	440b      	add	r3, r1
    2b12:	f853 3c40 	ldr.w	r3, [r3, #-64]
    2b16:	3320      	adds	r3, #32
    2b18:	4610      	mov	r0, r2
    2b1a:	4619      	mov	r1, r3
    2b1c:	f000 f97a 	bl	2e14 <vListIntialiseEventItem>
        vListInsertEnd(&xEventIdleList, &pxIdleEvents[i]->xEventListItem); 
    2b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2b22:	009b      	lsls	r3, r3, #2
    2b24:	f107 0240 	add.w	r2, r7, #64	; 0x40
    2b28:	4413      	add	r3, r2
    2b2a:	f853 3c40 	ldr.w	r3, [r3, #-64]
    2b2e:	3320      	adds	r3, #32
    2b30:	f240 6060 	movw	r0, #1632	; 0x660
    2b34:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2b38:	4619      	mov	r1, r3
    2b3a:	f001 fb57 	bl	41ec <vListInsertEnd>
    vListInitialise( ( xList * ) &xEventNonExecutableList);
    vListInitialise( ( xList * ) &xEventExecutablePool );
    vListInitialise( ( xList * ) &xEventExecutableList );
    vListInitialise( (xList * ) & xEventReadyList);

    for( i = 0; i < NUMBEROFEVENTS; ++i )
    2b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2b40:	3301      	adds	r3, #1
    2b42:	637b      	str	r3, [r7, #52]	; 0x34
    2b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2b46:	2b0c      	cmp	r3, #12
    2b48:	ddcc      	ble.n	2ae4 <vInitialiseEventLists+0x64>
        vListIntialiseEventItem( pxIdleEvents[i], (xListItem *) & pxIdleEvents[i]->xEventListItem );
        vListInsertEnd(&xEventIdleList, &pxIdleEvents[i]->xEventListItem); 
    }

    // Creating an End FLag Event and insert into the end of xEventList, which needs sorted events
    pxEndFlagEvent = (eveECB *) pvPortMalloc( sizeof( eveECB ) );
    2b4a:	2034      	movs	r0, #52	; 0x34
    2b4c:	f003 f9da 	bl	5f04 <pvPortMalloc>
    2b50:	63f8      	str	r0, [r7, #60]	; 0x3c
    if( pxEndFlagEvent != NULL )
    2b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b54:	2b00      	cmp	r3, #0
    2b56:	d01e      	beq.n	2b96 <vInitialiseEventLists+0x116>
    {
       // pxEndFlagEvent->pxSource = pxEndFlagEvent->pxDestination = NULL;
        // there may be some problem here because of this assignment way
        pxEndFlagEvent->xTag.xDeadline= portMAX_DELAY;
    2b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b5a:	f04f 32ff 	mov.w	r2, #4294967295
    2b5e:	609a      	str	r2, [r3, #8]
        pxEndFlagEvent->xTag.xTimestamp = portMAX_DELAY;
    2b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b62:	f04f 32ff 	mov.w	r2, #4294967295
    2b66:	60da      	str	r2, [r3, #12]
        pxEndFlagEvent->xTag.xMicroStep = portMAX_DELAY;
    2b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b6a:	f04f 32ff 	mov.w	r2, #4294967295
    2b6e:	615a      	str	r2, [r3, #20]
        pxEndFlagEvent->xTag.xLevel = portMAX_DELAY;
    2b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b72:	f04f 32ff 	mov.w	r2, #4294967295
    2b76:	611a      	str	r2, [r3, #16]
        vListIntialiseEventItem( pxEndFlagEvent, (xListItem *) & pxEndFlagEvent->xEventListItem );
    2b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b7a:	3320      	adds	r3, #32
    2b7c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    2b7e:	4619      	mov	r1, r3
    2b80:	f000 f948 	bl	2e14 <vListIntialiseEventItem>
        vListInsertEnd(&xEventNonExecutableList, &pxEndFlagEvent->xEventListItem); 
    2b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b86:	3320      	adds	r3, #32
    2b88:	f240 6088 	movw	r0, #1672	; 0x688
    2b8c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2b90:	4619      	mov	r1, r3
    2b92:	f001 fb2b 	bl	41ec <vListInsertEnd>
    }

    // Creating an End FLag Event and insert into the end of xEventExecutableList, which needs sorted events
    pxEndFlagEvent = (eveECB *) pvPortMalloc( sizeof( eveECB ) );
    2b96:	2034      	movs	r0, #52	; 0x34
    2b98:	f003 f9b4 	bl	5f04 <pvPortMalloc>
    2b9c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if( pxEndFlagEvent != NULL )
    2b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2ba0:	2b00      	cmp	r3, #0
    2ba2:	d01e      	beq.n	2be2 <vInitialiseEventLists+0x162>
    {
        // there may be some problem here because of this assignment way
        pxEndFlagEvent->xTag.xDeadline= portMAX_DELAY;
    2ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2ba6:	f04f 32ff 	mov.w	r2, #4294967295
    2baa:	609a      	str	r2, [r3, #8]
        pxEndFlagEvent->xTag.xTimestamp = portMAX_DELAY;
    2bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2bae:	f04f 32ff 	mov.w	r2, #4294967295
    2bb2:	60da      	str	r2, [r3, #12]
        pxEndFlagEvent->xTag.xMicroStep = portMAX_DELAY;
    2bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2bb6:	f04f 32ff 	mov.w	r2, #4294967295
    2bba:	615a      	str	r2, [r3, #20]
        pxEndFlagEvent->xTag.xLevel = portMAX_DELAY;
    2bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2bbe:	f04f 32ff 	mov.w	r2, #4294967295
    2bc2:	611a      	str	r2, [r3, #16]
        vListIntialiseEventItem( pxEndFlagEvent, (xListItem *) & pxEndFlagEvent->xEventListItem );
    2bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2bc6:	3320      	adds	r3, #32
    2bc8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    2bca:	4619      	mov	r1, r3
    2bcc:	f000 f922 	bl	2e14 <vListIntialiseEventItem>
        vListInsertEnd(&xEventExecutableList, &pxEndFlagEvent->xEventListItem); 
    2bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2bd2:	3320      	adds	r3, #32
    2bd4:	f240 60b0 	movw	r0, #1712	; 0x6b0
    2bd8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2bdc:	4619      	mov	r1, r3
    2bde:	f001 fb05 	bl	41ec <vListInsertEnd>
    }
}
    2be2:	3744      	adds	r7, #68	; 0x44
    2be4:	46bd      	mov	sp, r7
    2be6:	bd90      	pop	{r4, r7, pc}

00002be8 <xIsExecutableEventArrive>:

portBASE_TYPE xIsExecutableEventArrive()
{
    2be8:	b580      	push	{r7, lr}
    2bea:	b086      	sub	sp, #24
    2bec:	af00      	add	r7, sp, #0
    xListItem * temp_pxEventListItem;
    portTickType xCurrentTime;
    struct tag xTag;
    
    if(listCURRENT_LIST_LENGTH(&xEventNonExecutableList) > 1)
    2bee:	f240 6388 	movw	r3, #1672	; 0x688
    2bf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bf6:	681b      	ldr	r3, [r3, #0]
    2bf8:	2b01      	cmp	r3, #1
    2bfa:	d917      	bls.n	2c2c <xIsExecutableEventArrive+0x44>
    {
        temp_pxEventListItem = (xListItem *)xEventNonExecutableList.xListEnd.pxNext;
    2bfc:	f240 6388 	movw	r3, #1672	; 0x688
    2c00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c04:	68db      	ldr	r3, [r3, #12]
    2c06:	617b      	str	r3, [r7, #20]
        xTag= xEventGetxTag( (xEventHandle) (temp_pxEventListItem)->pvOwner );
    2c08:	697b      	ldr	r3, [r7, #20]
    2c0a:	68db      	ldr	r3, [r3, #12]
    2c0c:	463a      	mov	r2, r7
    2c0e:	4610      	mov	r0, r2
    2c10:	4619      	mov	r1, r3
    2c12:	f7ff fecb 	bl	29ac <xEventGetxTag>
        xCurrentTime = xTaskGetTickCount();
    2c16:	f002 fbc7 	bl	53a8 <xTaskGetTickCount>
    2c1a:	6138      	str	r0, [r7, #16]
        return xTag.xTimestamp <= xCurrentTime? pdTRUE : pdFALSE;
    2c1c:	687a      	ldr	r2, [r7, #4]
    2c1e:	693b      	ldr	r3, [r7, #16]
    2c20:	429a      	cmp	r2, r3
    2c22:	bf8c      	ite	hi
    2c24:	2300      	movhi	r3, #0
    2c26:	2301      	movls	r3, #1
    2c28:	b2db      	uxtb	r3, r3
    2c2a:	e000      	b.n	2c2e <xIsExecutableEventArrive+0x46>
    }
    return 0;
    2c2c:	2300      	movs	r3, #0
}
    2c2e:	4618      	mov	r0, r3
    2c30:	3718      	adds	r7, #24
    2c32:	46bd      	mov	sp, r7
    2c34:	bd80      	pop	{r7, pc}
    2c36:	bf00      	nop

00002c38 <xCompareFunction1>:

/* unexecutable event comparison function is used in xEventList. 
 * The event with earlist timestamp will be proceeded first*/
static portBASE_TYPE xCompareFunction1( const struct tag t1, const struct tag t2 )
{
    2c38:	b490      	push	{r4, r7}
    2c3a:	b084      	sub	sp, #16
    2c3c:	af00      	add	r7, sp, #0
    2c3e:	463c      	mov	r4, r7
    2c40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if( t1.xTimestamp < t2.xTimestamp)
    2c44:	687a      	ldr	r2, [r7, #4]
    2c46:	69fb      	ldr	r3, [r7, #28]
    2c48:	429a      	cmp	r2, r3
    2c4a:	d201      	bcs.n	2c50 <xCompareFunction1+0x18>
    {
        return pdTRUE;
    2c4c:	2301      	movs	r3, #1
    2c4e:	e01e      	b.n	2c8e <xCompareFunction1+0x56>
    }
    else if( t1.xTimestamp == t2.xTimestamp)
    2c50:	687a      	ldr	r2, [r7, #4]
    2c52:	69fb      	ldr	r3, [r7, #28]
    2c54:	429a      	cmp	r2, r3
    2c56:	d119      	bne.n	2c8c <xCompareFunction1+0x54>
    {
        if( t1.xDeadline < t2.xDeadline )
    2c58:	683a      	ldr	r2, [r7, #0]
    2c5a:	69bb      	ldr	r3, [r7, #24]
    2c5c:	429a      	cmp	r2, r3
    2c5e:	d201      	bcs.n	2c64 <xCompareFunction1+0x2c>
        {
            return pdTRUE;
    2c60:	2301      	movs	r3, #1
    2c62:	e014      	b.n	2c8e <xCompareFunction1+0x56>
        }
        else if( t1.xDeadline == t2.xDeadline )
    2c64:	683a      	ldr	r2, [r7, #0]
    2c66:	69bb      	ldr	r3, [r7, #24]
    2c68:	429a      	cmp	r2, r3
    2c6a:	d10f      	bne.n	2c8c <xCompareFunction1+0x54>
        {
            if( t1.xLevel < t2.xLevel )
    2c6c:	68ba      	ldr	r2, [r7, #8]
    2c6e:	6a3b      	ldr	r3, [r7, #32]
    2c70:	429a      	cmp	r2, r3
    2c72:	da01      	bge.n	2c78 <xCompareFunction1+0x40>
            {
                return pdTRUE;
    2c74:	2301      	movs	r3, #1
    2c76:	e00a      	b.n	2c8e <xCompareFunction1+0x56>
            }
            else if( t1.xLevel == t2.xLevel && t1.xMicroStep < t2.xMicroStep )
    2c78:	68ba      	ldr	r2, [r7, #8]
    2c7a:	6a3b      	ldr	r3, [r7, #32]
    2c7c:	429a      	cmp	r2, r3
    2c7e:	d105      	bne.n	2c8c <xCompareFunction1+0x54>
    2c80:	68fa      	ldr	r2, [r7, #12]
    2c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2c84:	429a      	cmp	r2, r3
    2c86:	da01      	bge.n	2c8c <xCompareFunction1+0x54>
            {
                return pdTRUE;
    2c88:	2301      	movs	r3, #1
    2c8a:	e000      	b.n	2c8e <xCompareFunction1+0x56>
            }
        }
    }
    return pdFALSE;
    2c8c:	2300      	movs	r3, #0
}
    2c8e:	4618      	mov	r0, r3
    2c90:	3710      	adds	r7, #16
    2c92:	46bd      	mov	sp, r7
    2c94:	bc90      	pop	{r4, r7}
    2c96:	4770      	bx	lr

00002c98 <xCompareFunction2>:

/* executable event comparison function is used in xEventExecutableList. 
 * The event with earlist deadline will be scheduled to execute first */
static portBASE_TYPE xCompareFunction2( const struct tag t1, const struct tag t2 )
{
    2c98:	b490      	push	{r4, r7}
    2c9a:	b084      	sub	sp, #16
    2c9c:	af00      	add	r7, sp, #0
    2c9e:	463c      	mov	r4, r7
    2ca0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if( t1.xDeadline < t2.xDeadline)
    2ca4:	683a      	ldr	r2, [r7, #0]
    2ca6:	69bb      	ldr	r3, [r7, #24]
    2ca8:	429a      	cmp	r2, r3
    2caa:	d201      	bcs.n	2cb0 <xCompareFunction2+0x18>
    {
        return pdTRUE;
    2cac:	2301      	movs	r3, #1
    2cae:	e01e      	b.n	2cee <xCompareFunction2+0x56>
    }
    else if( t1.xDeadline == t2.xDeadline)
    2cb0:	683a      	ldr	r2, [r7, #0]
    2cb2:	69bb      	ldr	r3, [r7, #24]
    2cb4:	429a      	cmp	r2, r3
    2cb6:	d119      	bne.n	2cec <xCompareFunction2+0x54>
    {
        if( t1.xTimestamp < t2.xTimestamp)
    2cb8:	687a      	ldr	r2, [r7, #4]
    2cba:	69fb      	ldr	r3, [r7, #28]
    2cbc:	429a      	cmp	r2, r3
    2cbe:	d201      	bcs.n	2cc4 <xCompareFunction2+0x2c>
        {
            return pdTRUE;
    2cc0:	2301      	movs	r3, #1
    2cc2:	e014      	b.n	2cee <xCompareFunction2+0x56>
        }
        else if( t1.xTimestamp == t2.xTimestamp )
    2cc4:	687a      	ldr	r2, [r7, #4]
    2cc6:	69fb      	ldr	r3, [r7, #28]
    2cc8:	429a      	cmp	r2, r3
    2cca:	d10f      	bne.n	2cec <xCompareFunction2+0x54>
        {
            if( t1.xLevel < t2.xLevel )
    2ccc:	68ba      	ldr	r2, [r7, #8]
    2cce:	6a3b      	ldr	r3, [r7, #32]
    2cd0:	429a      	cmp	r2, r3
    2cd2:	da01      	bge.n	2cd8 <xCompareFunction2+0x40>
            {
                return pdTRUE;
    2cd4:	2301      	movs	r3, #1
    2cd6:	e00a      	b.n	2cee <xCompareFunction2+0x56>
            }
            else if( t1.xLevel == t2.xLevel && t1.xMicroStep < t2.xMicroStep )
    2cd8:	68ba      	ldr	r2, [r7, #8]
    2cda:	6a3b      	ldr	r3, [r7, #32]
    2cdc:	429a      	cmp	r2, r3
    2cde:	d105      	bne.n	2cec <xCompareFunction2+0x54>
    2ce0:	68fa      	ldr	r2, [r7, #12]
    2ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ce4:	429a      	cmp	r2, r3
    2ce6:	da01      	bge.n	2cec <xCompareFunction2+0x54>
            {
                return pdTRUE;
    2ce8:	2301      	movs	r3, #1
    2cea:	e000      	b.n	2cee <xCompareFunction2+0x56>
            }
        }
    }

    return pdFALSE;
    2cec:	2300      	movs	r3, #0
}
    2cee:	4618      	mov	r0, r3
    2cf0:	3710      	adds	r7, #16
    2cf2:	46bd      	mov	sp, r7
    2cf4:	bc90      	pop	{r4, r7}
    2cf6:	4770      	bx	lr

00002cf8 <vEventSetxTag>:

static void vEventSetxTag( portTickType xDeadline, portTickType xTimestamp, xEventHandle pxNewEvent )
{
    2cf8:	b480      	push	{r7}
    2cfa:	b087      	sub	sp, #28
    2cfc:	af00      	add	r7, sp, #0
    2cfe:	60f8      	str	r0, [r7, #12]
    2d00:	60b9      	str	r1, [r7, #8]
    2d02:	607a      	str	r2, [r7, #4]
    eveECB * pxEvent =(eveECB *) pxNewEvent;
    2d04:	687b      	ldr	r3, [r7, #4]
    2d06:	617b      	str	r3, [r7, #20]

    /* EDF scheduling algorithm */
    pxEvent->xTag.xDeadline = xDeadline ;
    2d08:	697b      	ldr	r3, [r7, #20]
    2d0a:	68fa      	ldr	r2, [r7, #12]
    2d0c:	609a      	str	r2, [r3, #8]
    pxEvent->xTag.xTimestamp = xTimestamp;
    2d0e:	697b      	ldr	r3, [r7, #20]
    2d10:	68ba      	ldr	r2, [r7, #8]
    2d12:	60da      	str	r2, [r3, #12]

    /*the microstep is not used now*/
    pxEvent->xTag.xMicroStep = 0;
    2d14:	697b      	ldr	r3, [r7, #20]
    2d16:	2200      	movs	r2, #0
    2d18:	615a      	str	r2, [r3, #20]
}
    2d1a:	371c      	adds	r7, #28
    2d1c:	46bd      	mov	sp, r7
    2d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d22:	4770      	bx	lr

00002d24 <prvEventListGenericInsert>:

/* insert event to xEventNonExecutableList in terms of comparison function 1 */
static void prvEventListGenericInsert( xListItem *pxNewListItem, portBASE_TYPE comp)
{
    2d24:	b590      	push	{r4, r7, lr}
    2d26:	b095      	sub	sp, #84	; 0x54
    2d28:	af04      	add	r7, sp, #16
    2d2a:	6078      	str	r0, [r7, #4]
    2d2c:	6039      	str	r1, [r7, #0]
    volatile xListItem *pxIterator;
    struct tag xTagOfInsertion;
    xList * pxList; 

    xTagOfInsertion = xEventGetxTag(pxNewListItem->pvOwner);
    2d2e:	687b      	ldr	r3, [r7, #4]
    2d30:	68db      	ldr	r3, [r3, #12]
    2d32:	f107 0208 	add.w	r2, r7, #8
    2d36:	4610      	mov	r0, r2
    2d38:	4619      	mov	r1, r3
    2d3a:	f7ff fe37 	bl	29ac <xEventGetxTag>

    if(comp == 1)
    2d3e:	683b      	ldr	r3, [r7, #0]
    2d40:	2b01      	cmp	r3, #1
    2d42:	d127      	bne.n	2d94 <prvEventListGenericInsert+0x70>
    {
        pxList = &xEventNonExecutableList;
    2d44:	f240 6388 	movw	r3, #1672	; 0x688
    2d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d4c:	63bb      	str	r3, [r7, #56]	; 0x38
        taskENTER_CRITICAL();
    2d4e:	f003 f85f 	bl	5e10 <vPortEnterCritical>
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd); 
    2d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2d54:	3308      	adds	r3, #8
    2d56:	63fb      	str	r3, [r7, #60]	; 0x3c
    2d58:	e002      	b.n	2d60 <prvEventListGenericInsert+0x3c>
             xCompareFunction1( xEventGetxTag( pxIterator->pxNext->pvOwner ), xTagOfInsertion ); 
             pxIterator = pxIterator->pxNext ) {}
    2d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2d5c:	685b      	ldr	r3, [r3, #4]
    2d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if(comp == 1)
    {
        pxList = &xEventNonExecutableList;
        taskENTER_CRITICAL();
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd); 
             xCompareFunction1( xEventGetxTag( pxIterator->pxNext->pvOwner ), xTagOfInsertion ); 
    2d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2d62:	685b      	ldr	r3, [r3, #4]
    2d64:	68db      	ldr	r3, [r3, #12]
    2d66:	f107 0218 	add.w	r2, r7, #24
    2d6a:	4610      	mov	r0, r2
    2d6c:	4619      	mov	r1, r3
    2d6e:	f7ff fe1d 	bl	29ac <xEventGetxTag>
    2d72:	466c      	mov	r4, sp
    2d74:	f107 0308 	add.w	r3, r7, #8
    2d78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2d7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2d7e:	f107 0318 	add.w	r3, r7, #24
    2d82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2d84:	f7ff ff58 	bl	2c38 <xCompareFunction1>
    2d88:	4603      	mov	r3, r0

    if(comp == 1)
    {
        pxList = &xEventNonExecutableList;
        taskENTER_CRITICAL();
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd); 
    2d8a:	2b00      	cmp	r3, #0
    2d8c:	d1e5      	bne.n	2d5a <prvEventListGenericInsert+0x36>
             xCompareFunction1( xEventGetxTag( pxIterator->pxNext->pvOwner ), xTagOfInsertion ); 
             pxIterator = pxIterator->pxNext ) {}
        taskEXIT_CRITICAL();
    2d8e:	f003 f855 	bl	5e3c <vPortExitCritical>
    2d92:	e026      	b.n	2de2 <prvEventListGenericInsert+0xbe>
    }
    else 
    {
        pxList = &xEventExecutableList;
    2d94:	f240 63b0 	movw	r3, #1712	; 0x6b0
    2d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d9c:	63bb      	str	r3, [r7, #56]	; 0x38
        taskENTER_CRITICAL();
    2d9e:	f003 f837 	bl	5e10 <vPortEnterCritical>
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd); 
    2da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2da4:	3308      	adds	r3, #8
    2da6:	63fb      	str	r3, [r7, #60]	; 0x3c
    2da8:	e002      	b.n	2db0 <prvEventListGenericInsert+0x8c>
             xCompareFunction2( xEventGetxTag( pxIterator->pxNext->pvOwner ), xTagOfInsertion ); 
             pxIterator = pxIterator->pxNext ) {}
    2daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2dac:	685b      	ldr	r3, [r3, #4]
    2dae:	63fb      	str	r3, [r7, #60]	; 0x3c
    else 
    {
        pxList = &xEventExecutableList;
        taskENTER_CRITICAL();
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd); 
             xCompareFunction2( xEventGetxTag( pxIterator->pxNext->pvOwner ), xTagOfInsertion ); 
    2db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2db2:	685b      	ldr	r3, [r3, #4]
    2db4:	68db      	ldr	r3, [r3, #12]
    2db6:	f107 0228 	add.w	r2, r7, #40	; 0x28
    2dba:	4610      	mov	r0, r2
    2dbc:	4619      	mov	r1, r3
    2dbe:	f7ff fdf5 	bl	29ac <xEventGetxTag>
    2dc2:	466c      	mov	r4, sp
    2dc4:	f107 0308 	add.w	r3, r7, #8
    2dc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2dca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2dce:	f107 0328 	add.w	r3, r7, #40	; 0x28
    2dd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2dd4:	f7ff ff60 	bl	2c98 <xCompareFunction2>
    2dd8:	4603      	mov	r3, r0
    }
    else 
    {
        pxList = &xEventExecutableList;
        taskENTER_CRITICAL();
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd); 
    2dda:	2b00      	cmp	r3, #0
    2ddc:	d1e5      	bne.n	2daa <prvEventListGenericInsert+0x86>
             xCompareFunction2( xEventGetxTag( pxIterator->pxNext->pvOwner ), xTagOfInsertion ); 
             pxIterator = pxIterator->pxNext ) {}
        taskEXIT_CRITICAL();
    2dde:	f003 f82d 	bl	5e3c <vPortExitCritical>
    }

    // insert the new event before a bigger one.
    pxNewListItem->pxNext = pxIterator->pxNext;
    2de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2de4:	685a      	ldr	r2, [r3, #4]
    2de6:	687b      	ldr	r3, [r7, #4]
    2de8:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2dea:	687b      	ldr	r3, [r7, #4]
    2dec:	685b      	ldr	r3, [r3, #4]
    2dee:	687a      	ldr	r2, [r7, #4]
    2df0:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
    2df2:	687b      	ldr	r3, [r7, #4]
    2df4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2df6:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2dfa:	687a      	ldr	r2, [r7, #4]
    2dfc:	605a      	str	r2, [r3, #4]

    pxNewListItem->pvContainer = ( void * ) pxList;
    2dfe:	687b      	ldr	r3, [r7, #4]
    2e00:	6bba      	ldr	r2, [r7, #56]	; 0x38
    2e02:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
    2e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2e06:	681b      	ldr	r3, [r3, #0]
    2e08:	1c5a      	adds	r2, r3, #1
    2e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2e0c:	601a      	str	r2, [r3, #0]
}
    2e0e:	3744      	adds	r7, #68	; 0x44
    2e10:	46bd      	mov	sp, r7
    2e12:	bd90      	pop	{r4, r7, pc}

00002e14 <vListIntialiseEventItem>:


static void vListIntialiseEventItem( xEventHandle pvOwner, xListItem * pxNewEventItem)
{
    2e14:	b480      	push	{r7}
    2e16:	b083      	sub	sp, #12
    2e18:	af00      	add	r7, sp, #0
    2e1a:	6078      	str	r0, [r7, #4]
    2e1c:	6039      	str	r1, [r7, #0]
    /* set the pvOwner of the EventItem as a event*/
    listSET_LIST_ITEM_OWNER( pxNewEventItem, pvOwner );
    2e1e:	683b      	ldr	r3, [r7, #0]
    2e20:	687a      	ldr	r2, [r7, #4]
    2e22:	60da      	str	r2, [r3, #12]
}
    2e24:	370c      	adds	r7, #12
    2e26:	46bd      	mov	sp, r7
    2e28:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e2c:	4770      	bx	lr
    2e2e:	bf00      	nop

00002e30 <pxEventGenericCreate>:


xEventHandle pxEventGenericCreate( portBASE_TYPE pxSource, portTickType xDeadline, portTickType xTimestamp, struct eventData pdData)
{
    2e30:	b082      	sub	sp, #8
    2e32:	b580      	push	{r7, lr}
    2e34:	b086      	sub	sp, #24
    2e36:	af00      	add	r7, sp, #0
    2e38:	60f8      	str	r0, [r7, #12]
    2e3a:	60b9      	str	r1, [r7, #8]
    2e3c:	607a      	str	r2, [r7, #4]
    2e3e:	627b      	str	r3, [r7, #36]	; 0x24
    eveECB * pxNewEvent = NULL;
    2e40:	2300      	movs	r3, #0
    2e42:	617b      	str	r3, [r7, #20]

    /* using the pxCurrentTCB, current task should not be changed */
    taskENTER_CRITICAL();
    2e44:	f002 ffe4 	bl	5e10 <vPortEnterCritical>

    pxNewEvent = (eveECB *)xEventIdleList.xListEnd.pxNext->pvOwner;
    2e48:	f240 6360 	movw	r3, #1632	; 0x660
    2e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e50:	68db      	ldr	r3, [r3, #12]
    2e52:	68db      	ldr	r3, [r3, #12]
    2e54:	617b      	str	r3, [r7, #20]
    vListRemove( (xListItem *)&pxNewEvent->xEventListItem );
    2e56:	697b      	ldr	r3, [r7, #20]
    2e58:	3320      	adds	r3, #32
    2e5a:	4618      	mov	r0, r3
    2e5c:	f001 fa26 	bl	42ac <vListRemove>

    pxNewEvent->pxSource = pxSource;
    2e60:	697b      	ldr	r3, [r7, #20]
    2e62:	68fa      	ldr	r2, [r7, #12]
    2e64:	601a      	str	r2, [r3, #0]
    vEventSetxTag( xDeadline, xTimestamp, pxNewEvent );
    2e66:	68b8      	ldr	r0, [r7, #8]
    2e68:	6879      	ldr	r1, [r7, #4]
    2e6a:	697a      	ldr	r2, [r7, #20]
    2e6c:	f7ff ff44 	bl	2cf8 <vEventSetxTag>
    ((eveECB *) pxNewEvent)->xData = pdData;
    2e70:	697b      	ldr	r3, [r7, #20]
    2e72:	3318      	adds	r3, #24
    2e74:	f107 0224 	add.w	r2, r7, #36	; 0x24
    2e78:	e892 0003 	ldmia.w	r2, {r0, r1}
    2e7c:	e883 0003 	stmia.w	r3, {r0, r1}
    vListIntialiseEventItem( pxNewEvent, (xListItem *) &pxNewEvent->xEventListItem );
    2e80:	697b      	ldr	r3, [r7, #20]
    2e82:	3320      	adds	r3, #32
    2e84:	6978      	ldr	r0, [r7, #20]
    2e86:	4619      	mov	r1, r3
    2e88:	f7ff ffc4 	bl	2e14 <vListIntialiseEventItem>

    taskEXIT_CRITICAL();
    2e8c:	f002 ffd6 	bl	5e3c <vPortExitCritical>

    return pxNewEvent;
    2e90:	697b      	ldr	r3, [r7, #20]
}
    2e92:	4618      	mov	r0, r3
    2e94:	3718      	adds	r7, #24
    2e96:	46bd      	mov	sp, r7
    2e98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    2e9c:	b002      	add	sp, #8
    2e9e:	4770      	bx	lr

00002ea0 <vEventGenericTransit>:


// An API to transfer all executable Event Items from xEventNonExecutableList to xEventExecutablePool.
// function : transit the nonexecutable event to executable event, and update the inBoolCount of every event 
void vEventGenericTransit() 
{
    2ea0:	b580      	push	{r7, lr}
    2ea2:	b088      	sub	sp, #32
    2ea4:	af00      	add	r7, sp, #0
    struct tag xTag;
    portBASE_TYPE pxDestination;
    portTickType xCurrentTime;

    // transmit the executable event from xEventNonExecutableList to xEventExecutablePool 
    while( listCURRENT_LIST_LENGTH( &xEventNonExecutableList) > 1 )
    2ea6:	e042      	b.n	2f2e <vEventGenericTransit+0x8e>
    {
        temp_pxEventListItem = (xListItem *)xEventNonExecutableList.xListEnd.pxNext;
    2ea8:	f240 6388 	movw	r3, #1672	; 0x688
    2eac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2eb0:	68db      	ldr	r3, [r3, #12]
    2eb2:	61fb      	str	r3, [r7, #28]
        xTag= xEventGetxTag( temp_pxEventListItem->pvOwner );
    2eb4:	69fb      	ldr	r3, [r7, #28]
    2eb6:	68db      	ldr	r3, [r3, #12]
    2eb8:	1d3a      	adds	r2, r7, #4
    2eba:	4610      	mov	r0, r2
    2ebc:	4619      	mov	r1, r3
    2ebe:	f7ff fd75 	bl	29ac <xEventGetxTag>
        xCurrentTime = xTaskGetTickCount();
    2ec2:	f002 fa71 	bl	53a8 <xTaskGetTickCount>
    2ec6:	61b8      	str	r0, [r7, #24]

        // the event is executable
        if( xTag.xTimestamp <= xCurrentTime )
    2ec8:	68ba      	ldr	r2, [r7, #8]
    2eca:	69bb      	ldr	r3, [r7, #24]
    2ecc:	429a      	cmp	r2, r3
    2ece:	d82d      	bhi.n	2f2c <vEventGenericTransit+0x8c>
        {
            // update the xInBoolCount of pxDestination
            pxDestination = xEventGetpxDestination( temp_pxEventListItem->pvOwner );
    2ed0:	69fb      	ldr	r3, [r7, #28]
    2ed2:	68db      	ldr	r3, [r3, #12]
    2ed4:	4618      	mov	r0, r3
    2ed6:	f7ff fd5d 	bl	2994 <xEventGetpxDestination>
    2eda:	6178      	str	r0, [r7, #20]
            xContexts[pxDestination].xInBoolCount ++ ;
    2edc:	f240 62d8 	movw	r2, #1752	; 0x6d8
    2ee0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2ee4:	6979      	ldr	r1, [r7, #20]
    2ee6:	460b      	mov	r3, r1
    2ee8:	00db      	lsls	r3, r3, #3
    2eea:	1a5b      	subs	r3, r3, r1
    2eec:	00db      	lsls	r3, r3, #3
    2eee:	4413      	add	r3, r2
    2ef0:	3334      	adds	r3, #52	; 0x34
    2ef2:	681b      	ldr	r3, [r3, #0]
    2ef4:	1c58      	adds	r0, r3, #1
    2ef6:	f240 62d8 	movw	r2, #1752	; 0x6d8
    2efa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2efe:	6979      	ldr	r1, [r7, #20]
    2f00:	460b      	mov	r3, r1
    2f02:	00db      	lsls	r3, r3, #3
    2f04:	1a5b      	subs	r3, r3, r1
    2f06:	00db      	lsls	r3, r3, #3
    2f08:	4413      	add	r3, r2
    2f0a:	3334      	adds	r3, #52	; 0x34
    2f0c:	6018      	str	r0, [r3, #0]

            taskENTER_CRITICAL();
    2f0e:	f002 ff7f 	bl	5e10 <vPortEnterCritical>
            /* remove pxListItem from xEventNonExecutableList */ 
            vListRemove(temp_pxEventListItem);
    2f12:	69f8      	ldr	r0, [r7, #28]
    2f14:	f001 f9ca 	bl	42ac <vListRemove>
            /* insert the executable event into the xEventExecutablePool*/
            vListInsertEnd(&xEventExecutablePool, temp_pxEventListItem);
    2f18:	f240 609c 	movw	r0, #1692	; 0x69c
    2f1c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2f20:	69f9      	ldr	r1, [r7, #28]
    2f22:	f001 f963 	bl	41ec <vListInsertEnd>
            taskEXIT_CRITICAL();
    2f26:	f002 ff89 	bl	5e3c <vPortExitCritical>
    2f2a:	e000      	b.n	2f2e <vEventGenericTransit+0x8e>
        }
        else
        {
          // no executable event
           break; 
    2f2c:	e006      	b.n	2f3c <vEventGenericTransit+0x9c>
    struct tag xTag;
    portBASE_TYPE pxDestination;
    portTickType xCurrentTime;

    // transmit the executable event from xEventNonExecutableList to xEventExecutablePool 
    while( listCURRENT_LIST_LENGTH( &xEventNonExecutableList) > 1 )
    2f2e:	f240 6388 	movw	r3, #1672	; 0x688
    2f32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f36:	681b      	ldr	r3, [r3, #0]
    2f38:	2b01      	cmp	r3, #1
    2f3a:	d8b5      	bhi.n	2ea8 <vEventGenericTransit+0x8>
        {
          // no executable event
           break; 
        }
    }
}
    2f3c:	3720      	adds	r7, #32
    2f3e:	46bd      	mov	sp, r7
    2f40:	bd80      	pop	{r7, pc}
    2f42:	bf00      	nop

00002f44 <vEventGenericScatter>:

void vEventGenericScatter()
{
    2f44:	b580      	push	{r7, lr}
    2f46:	b088      	sub	sp, #32
    2f48:	af02      	add	r7, sp, #8
    eveECB * pxEvent; 
    eveECB * pxCopyEvent;
    xListItem * temp_pxEventListItem;

    // event scatter
   while(listCURRENT_LIST_LENGTH( &xEventNonExecutablePool ) > 0)
    2f4a:	e074      	b.n	3036 <vEventGenericScatter+0xf2>
    {
        temp_pxEventListItem = (xListItem *) xEventNonExecutablePool.xListEnd.pxNext;    
    2f4c:	f240 6374 	movw	r3, #1652	; 0x674
    2f50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f54:	68db      	ldr	r3, [r3, #12]
    2f56:	613b      	str	r3, [r7, #16]
        pxEvent = (eveECB *) temp_pxEventListItem->pvOwner;
    2f58:	693b      	ldr	r3, [r7, #16]
    2f5a:	68db      	ldr	r3, [r3, #12]
    2f5c:	60fb      	str	r3, [r7, #12]
        pxSource = pxEvent->pxSource;
    2f5e:	68fb      	ldr	r3, [r7, #12]
    2f60:	681b      	ldr	r3, [r3, #0]
    2f62:	60bb      	str	r3, [r7, #8]
        outs = xContexts[pxSource].xNumOfOut;
    2f64:	f240 62d8 	movw	r2, #1752	; 0x6d8
    2f68:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f6c:	68b9      	ldr	r1, [r7, #8]
    2f6e:	460b      	mov	r3, r1
    2f70:	00db      	lsls	r3, r3, #3
    2f72:	1a5b      	subs	r3, r3, r1
    2f74:	00db      	lsls	r3, r3, #3
    2f76:	4413      	add	r3, r2
    2f78:	3310      	adds	r3, #16
    2f7a:	681b      	ldr	r3, [r3, #0]
    2f7c:	607b      	str	r3, [r7, #4]

        taskENTER_CRITICAL();
    2f7e:	f002 ff47 	bl	5e10 <vPortEnterCritical>
        vListRemove(temp_pxEventListItem);
    2f82:	6938      	ldr	r0, [r7, #16]
    2f84:	f001 f992 	bl	42ac <vListRemove>
        // complete the information of the origin event.
        pxEvent->pxDestination = xContexts[pxSource].xOutFlag[0];
    2f88:	f240 62d8 	movw	r2, #1752	; 0x6d8
    2f8c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f90:	68b9      	ldr	r1, [r7, #8]
    2f92:	460b      	mov	r3, r1
    2f94:	00db      	lsls	r3, r3, #3
    2f96:	1a5b      	subs	r3, r3, r1
    2f98:	00db      	lsls	r3, r3, #3
    2f9a:	4413      	add	r3, r2
    2f9c:	331c      	adds	r3, #28
    2f9e:	681a      	ldr	r2, [r3, #0]
    2fa0:	68fb      	ldr	r3, [r7, #12]
    2fa2:	605a      	str	r2, [r3, #4]
        pxEvent->xTag.xLevel = xContexts[pxEvent->pxDestination].xTaskId;
    2fa4:	68fb      	ldr	r3, [r7, #12]
    2fa6:	6859      	ldr	r1, [r3, #4]
    2fa8:	f240 62d8 	movw	r2, #1752	; 0x6d8
    2fac:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2fb0:	460b      	mov	r3, r1
    2fb2:	00db      	lsls	r3, r3, #3
    2fb4:	1a5b      	subs	r3, r3, r1
    2fb6:	00db      	lsls	r3, r3, #3
    2fb8:	4413      	add	r3, r2
    2fba:	3330      	adds	r3, #48	; 0x30
    2fbc:	681a      	ldr	r2, [r3, #0]
    2fbe:	68fb      	ldr	r3, [r7, #12]
    2fc0:	611a      	str	r2, [r3, #16]
        prvEventListGenericInsert(temp_pxEventListItem,1); 
    2fc2:	6938      	ldr	r0, [r7, #16]
    2fc4:	2101      	movs	r1, #1
    2fc6:	f7ff fead 	bl	2d24 <prvEventListGenericInsert>

        // copy one event to multiples
        for(i = 1; i < outs; ++ i)
    2fca:	2301      	movs	r3, #1
    2fcc:	617b      	str	r3, [r7, #20]
    2fce:	e02c      	b.n	302a <vEventGenericScatter+0xe6>
        {
            pxCopyEvent = (eveECB *)pxEventGenericCreate(pxSource, pxEvent->xTag.xDeadline, pxEvent->xTag.xTimestamp, pxEvent->xData);
    2fd0:	68fb      	ldr	r3, [r7, #12]
    2fd2:	6899      	ldr	r1, [r3, #8]
    2fd4:	68fb      	ldr	r3, [r7, #12]
    2fd6:	68da      	ldr	r2, [r3, #12]
    2fd8:	68fb      	ldr	r3, [r7, #12]
    2fda:	69d8      	ldr	r0, [r3, #28]
    2fdc:	9000      	str	r0, [sp, #0]
    2fde:	699b      	ldr	r3, [r3, #24]
    2fe0:	68b8      	ldr	r0, [r7, #8]
    2fe2:	f7ff ff25 	bl	2e30 <pxEventGenericCreate>
    2fe6:	6038      	str	r0, [r7, #0]
            // complete the information of the copied event.
            pxCopyEvent->xTag.xMicroStep = i;
    2fe8:	683b      	ldr	r3, [r7, #0]
    2fea:	697a      	ldr	r2, [r7, #20]
    2fec:	615a      	str	r2, [r3, #20]
            pxCopyEvent->xTag.xLevel = pxEvent->xTag.xLevel;   // copy events have all the same xLevel
    2fee:	68fb      	ldr	r3, [r7, #12]
    2ff0:	691a      	ldr	r2, [r3, #16]
    2ff2:	683b      	ldr	r3, [r7, #0]
    2ff4:	611a      	str	r2, [r3, #16]
            pxCopyEvent->pxDestination = xContexts[pxSource].xOutFlag[i];
    2ff6:	f240 62d8 	movw	r2, #1752	; 0x6d8
    2ffa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2ffe:	68b9      	ldr	r1, [r7, #8]
    3000:	460b      	mov	r3, r1
    3002:	00db      	lsls	r3, r3, #3
    3004:	1a5b      	subs	r3, r3, r1
    3006:	005b      	lsls	r3, r3, #1
    3008:	6979      	ldr	r1, [r7, #20]
    300a:	440b      	add	r3, r1
    300c:	3306      	adds	r3, #6
    300e:	009b      	lsls	r3, r3, #2
    3010:	4413      	add	r3, r2
    3012:	685a      	ldr	r2, [r3, #4]
    3014:	683b      	ldr	r3, [r7, #0]
    3016:	605a      	str	r2, [r3, #4]
            prvEventListGenericInsert( &pxCopyEvent->xEventListItem , 1); 
    3018:	683b      	ldr	r3, [r7, #0]
    301a:	3320      	adds	r3, #32
    301c:	4618      	mov	r0, r3
    301e:	2101      	movs	r1, #1
    3020:	f7ff fe80 	bl	2d24 <prvEventListGenericInsert>
        pxEvent->pxDestination = xContexts[pxSource].xOutFlag[0];
        pxEvent->xTag.xLevel = xContexts[pxEvent->pxDestination].xTaskId;
        prvEventListGenericInsert(temp_pxEventListItem,1); 

        // copy one event to multiples
        for(i = 1; i < outs; ++ i)
    3024:	697b      	ldr	r3, [r7, #20]
    3026:	3301      	adds	r3, #1
    3028:	617b      	str	r3, [r7, #20]
    302a:	697a      	ldr	r2, [r7, #20]
    302c:	687b      	ldr	r3, [r7, #4]
    302e:	429a      	cmp	r2, r3
    3030:	dbce      	blt.n	2fd0 <vEventGenericScatter+0x8c>
            pxCopyEvent->xTag.xMicroStep = i;
            pxCopyEvent->xTag.xLevel = pxEvent->xTag.xLevel;   // copy events have all the same xLevel
            pxCopyEvent->pxDestination = xContexts[pxSource].xOutFlag[i];
            prvEventListGenericInsert( &pxCopyEvent->xEventListItem , 1); 
        }
        taskEXIT_CRITICAL();
    3032:	f002 ff03 	bl	5e3c <vPortExitCritical>
    eveECB * pxEvent; 
    eveECB * pxCopyEvent;
    xListItem * temp_pxEventListItem;

    // event scatter
   while(listCURRENT_LIST_LENGTH( &xEventNonExecutablePool ) > 0)
    3036:	f240 6374 	movw	r3, #1652	; 0x674
    303a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    303e:	681b      	ldr	r3, [r3, #0]
    3040:	2b00      	cmp	r3, #0
    3042:	d183      	bne.n	2f4c <vEventGenericScatter+0x8>
            pxCopyEvent->pxDestination = xContexts[pxSource].xOutFlag[i];
            prvEventListGenericInsert( &pxCopyEvent->xEventListItem , 1); 
        }
        taskEXIT_CRITICAL();
    }
}
    3044:	3718      	adds	r7, #24
    3046:	46bd      	mov	sp, r7
    3048:	bd80      	pop	{r7, pc}
    304a:	bf00      	nop

0000304c <vEventGenericReduce>:

void vEventGenericReduce()
{
    304c:	b580      	push	{r7, lr}
    304e:	b08c      	sub	sp, #48	; 0x30
    3050:	af00      	add	r7, sp, #0
    portBASE_TYPE i, pxDestination;
    struct tag temp_tag;
    struct eventData temp_data;
    volatile xListItem * pxIterator1, *pxIterator2;
    // event reduce 
    if( listCURRENT_LIST_LENGTH(& xEventExecutablePool) > 0 )
    3052:	f240 639c 	movw	r3, #1692	; 0x69c
    3056:	f2c2 0300 	movt	r3, #8192	; 0x2000
    305a:	681b      	ldr	r3, [r3, #0]
    305c:	2b00      	cmp	r3, #0
    305e:	f000 80ad 	beq.w	31bc <vEventGenericReduce+0x170>
    {
        // find at least all the ready event and move it to ready event list
        // ready event has the smallest timestamp and period.
        // if multi ready event exists, then they all have the same timestamp
        for( pxIterator1 = ( xListItem * ) ( xEventExecutablePool.xListEnd.pxNext ); 
    3062:	f240 639c 	movw	r3, #1692	; 0x69c
    3066:	f2c2 0300 	movt	r3, #8192	; 0x2000
    306a:	68db      	ldr	r3, [r3, #12]
    306c:	62bb      	str	r3, [r7, #40]	; 0x28
    306e:	e0a0      	b.n	31b2 <vEventGenericReduce+0x166>
                pxIterator1 != (xListItem *)&xEventExecutablePool.xListEnd; ) 
        {
            reduce_pxEventListItem = (xListItem *) pxIterator1; 
    3070:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3072:	623b      	str	r3, [r7, #32]
            pxDestination = xEventGetpxDestination(reduce_pxEventListItem->pvOwner); 
    3074:	6a3b      	ldr	r3, [r7, #32]
    3076:	68db      	ldr	r3, [r3, #12]
    3078:	4618      	mov	r0, r3
    307a:	f7ff fc8b 	bl	2994 <xEventGetpxDestination>
    307e:	61f8      	str	r0, [r7, #28]

            // if the communication between servant is multiple to one,
            // then other events for the same servant need to be found
            if( xContexts[pxDestination].xInBoolCount == xContexts[pxDestination].xNumOfIn )
    3080:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3084:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3088:	69f9      	ldr	r1, [r7, #28]
    308a:	460b      	mov	r3, r1
    308c:	00db      	lsls	r3, r3, #3
    308e:	1a5b      	subs	r3, r3, r1
    3090:	00db      	lsls	r3, r3, #3
    3092:	4413      	add	r3, r2
    3094:	3334      	adds	r3, #52	; 0x34
    3096:	6818      	ldr	r0, [r3, #0]
    3098:	f240 62d8 	movw	r2, #1752	; 0x6d8
    309c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    30a0:	69f9      	ldr	r1, [r7, #28]
    30a2:	460b      	mov	r3, r1
    30a4:	00db      	lsls	r3, r3, #3
    30a6:	1a5b      	subs	r3, r3, r1
    30a8:	00db      	lsls	r3, r3, #3
    30aa:	4413      	add	r3, r2
    30ac:	330c      	adds	r3, #12
    30ae:	681b      	ldr	r3, [r3, #0]
    30b0:	4298      	cmp	r0, r3
    30b2:	d17b      	bne.n	31ac <vEventGenericReduce+0x160>
            {
                taskENTER_CRITICAL();
    30b4:	f002 feac 	bl	5e10 <vPortEnterCritical>
                if(xContexts[pxDestination].xInBoolCount > 1)
    30b8:	f240 62d8 	movw	r2, #1752	; 0x6d8
    30bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    30c0:	69f9      	ldr	r1, [r7, #28]
    30c2:	460b      	mov	r3, r1
    30c4:	00db      	lsls	r3, r3, #3
    30c6:	1a5b      	subs	r3, r3, r1
    30c8:	00db      	lsls	r3, r3, #3
    30ca:	4413      	add	r3, r2
    30cc:	3334      	adds	r3, #52	; 0x34
    30ce:	681b      	ldr	r3, [r3, #0]
    30d0:	2b01      	cmp	r3, #1
    30d2:	dd51      	ble.n	3178 <vEventGenericReduce+0x12c>
                {
                    i = 1;
    30d4:	2301      	movs	r3, #1
    30d6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    for( pxIterator2 = pxIterator1->pxNext;  pxIterator2 != (xListItem *)&xEventExecutablePool.xListEnd; ) 
    30d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    30da:	685b      	ldr	r3, [r3, #4]
    30dc:	627b      	str	r3, [r7, #36]	; 0x24
    30de:	e047      	b.n	3170 <vEventGenericReduce+0x124>
                    {
                        // find another event for the same destinate servant, copy the data to the first one
                        if( xEventGetpxDestination(pxIterator2->pvOwner) == pxDestination ) 
    30e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    30e2:	68db      	ldr	r3, [r3, #12]
    30e4:	4618      	mov	r0, r3
    30e6:	f7ff fc55 	bl	2994 <xEventGetpxDestination>
    30ea:	4602      	mov	r2, r0
    30ec:	69fb      	ldr	r3, [r7, #28]
    30ee:	429a      	cmp	r2, r3
    30f0:	d13b      	bne.n	316a <vEventGenericReduce+0x11e>
                        {
                            // collecting data into the first event
                            temp_data = xEventGetxData(pxIterator2->pvOwner); 
    30f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    30f4:	68db      	ldr	r3, [r3, #12]
    30f6:	463a      	mov	r2, r7
    30f8:	4610      	mov	r0, r2
    30fa:	4619      	mov	r1, r3
    30fc:	f7ff fc68 	bl	29d0 <xEventGetxData>
                            ((eveECB *)reduce_pxEventListItem->pvOwner)->xData.xDataArray[i++] = temp_data.xDataArray[0];
    3100:	6a3b      	ldr	r3, [r7, #32]
    3102:	68da      	ldr	r2, [r3, #12]
    3104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3106:	1c59      	adds	r1, r3, #1
    3108:	62f9      	str	r1, [r7, #44]	; 0x2c
    310a:	6839      	ldr	r1, [r7, #0]
    310c:	3306      	adds	r3, #6
    310e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                            // set the timestamp to the biggest one
                            temp_tag = xEventGetxTag(pxIterator2->pvOwner);
    3112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3114:	68db      	ldr	r3, [r3, #12]
    3116:	f107 0208 	add.w	r2, r7, #8
    311a:	4610      	mov	r0, r2
    311c:	4619      	mov	r1, r3
    311e:	f7ff fc45 	bl	29ac <xEventGetxTag>
                            if(((eveECB *)reduce_pxEventListItem->pvOwner)->xTag.xTimestamp < temp_tag.xTimestamp)
    3122:	6a3b      	ldr	r3, [r7, #32]
    3124:	68db      	ldr	r3, [r3, #12]
    3126:	68da      	ldr	r2, [r3, #12]
    3128:	68fb      	ldr	r3, [r7, #12]
    312a:	429a      	cmp	r2, r3
    312c:	d203      	bcs.n	3136 <vEventGenericReduce+0xea>
                            {
                                ((eveECB *)reduce_pxEventListItem->pvOwner)->xTag.xTimestamp = temp_tag.xTimestamp;
    312e:	6a3b      	ldr	r3, [r7, #32]
    3130:	68db      	ldr	r3, [r3, #12]
    3132:	68fa      	ldr	r2, [r7, #12]
    3134:	60da      	str	r2, [r3, #12]
                            }
                            // delete the useless event, and return it back to event idle list
                            temp_pxEventListItem = (xListItem *) pxIterator2; 
    3136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3138:	61bb      	str	r3, [r7, #24]
                            pxIterator2 = pxIterator2->pxNext;
    313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    313c:	685b      	ldr	r3, [r3, #4]
    313e:	627b      	str	r3, [r7, #36]	; 0x24
                            vEventGenericDelete(temp_pxEventListItem->pvOwner); 
    3140:	69bb      	ldr	r3, [r7, #24]
    3142:	68db      	ldr	r3, [r3, #12]
    3144:	4618      	mov	r0, r3
    3146:	f000 f9fb 	bl	3540 <vEventGenericDelete>
                            if( i == xContexts[pxDestination].xInBoolCount )
    314a:	f240 62d8 	movw	r2, #1752	; 0x6d8
    314e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3152:	69f9      	ldr	r1, [r7, #28]
    3154:	460b      	mov	r3, r1
    3156:	00db      	lsls	r3, r3, #3
    3158:	1a5b      	subs	r3, r3, r1
    315a:	00db      	lsls	r3, r3, #3
    315c:	4413      	add	r3, r2
    315e:	3334      	adds	r3, #52	; 0x34
    3160:	681a      	ldr	r2, [r3, #0]
    3162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3164:	429a      	cmp	r2, r3
    3166:	d103      	bne.n	3170 <vEventGenericReduce+0x124>
                            {
                                break;   // find all event for the same servant 
    3168:	e006      	b.n	3178 <vEventGenericReduce+0x12c>
                            }
                        }
                        else
                        {
                            pxIterator2 = pxIterator2->pxNext;
    316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    316c:	685b      	ldr	r3, [r3, #4]
    316e:	627b      	str	r3, [r7, #36]	; 0x24
            {
                taskENTER_CRITICAL();
                if(xContexts[pxDestination].xInBoolCount > 1)
                {
                    i = 1;
                    for( pxIterator2 = pxIterator1->pxNext;  pxIterator2 != (xListItem *)&xEventExecutablePool.xListEnd; ) 
    3170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3172:	4b14      	ldr	r3, [pc, #80]	; (31c4 <vEventGenericReduce+0x178>)
    3174:	429a      	cmp	r2, r3
    3176:	d1b3      	bne.n	30e0 <vEventGenericReduce+0x94>
                        {
                            pxIterator2 = pxIterator2->pxNext;
                        }
                    }
                }
                xContexts[pxDestination].xInBoolCount = 0; 
    3178:	f240 62d8 	movw	r2, #1752	; 0x6d8
    317c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3180:	69f9      	ldr	r1, [r7, #28]
    3182:	460b      	mov	r3, r1
    3184:	00db      	lsls	r3, r3, #3
    3186:	1a5b      	subs	r3, r3, r1
    3188:	00db      	lsls	r3, r3, #3
    318a:	4413      	add	r3, r2
    318c:	3334      	adds	r3, #52	; 0x34
    318e:	2200      	movs	r2, #0
    3190:	601a      	str	r2, [r3, #0]
                pxIterator1 = pxIterator1->pxNext; 
    3192:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3194:	685b      	ldr	r3, [r3, #4]
    3196:	62bb      	str	r3, [r7, #40]	; 0x28
                vListRemove(reduce_pxEventListItem);
    3198:	6a38      	ldr	r0, [r7, #32]
    319a:	f001 f887 	bl	42ac <vListRemove>
                prvEventListGenericInsert(reduce_pxEventListItem, 2);
    319e:	6a38      	ldr	r0, [r7, #32]
    31a0:	2102      	movs	r1, #2
    31a2:	f7ff fdbf 	bl	2d24 <prvEventListGenericInsert>
                taskEXIT_CRITICAL();
    31a6:	f002 fe49 	bl	5e3c <vPortExitCritical>
    31aa:	e002      	b.n	31b2 <vEventGenericReduce+0x166>
            }
            else
            {
                pxIterator1 = pxIterator1->pxNext;
    31ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    31ae:	685b      	ldr	r3, [r3, #4]
    31b0:	62bb      	str	r3, [r7, #40]	; 0x28
    if( listCURRENT_LIST_LENGTH(& xEventExecutablePool) > 0 )
    {
        // find at least all the ready event and move it to ready event list
        // ready event has the smallest timestamp and period.
        // if multi ready event exists, then they all have the same timestamp
        for( pxIterator1 = ( xListItem * ) ( xEventExecutablePool.xListEnd.pxNext ); 
    31b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    31b4:	4b03      	ldr	r3, [pc, #12]	; (31c4 <vEventGenericReduce+0x178>)
    31b6:	429a      	cmp	r2, r3
    31b8:	f47f af5a 	bne.w	3070 <vEventGenericReduce+0x24>
                pxIterator1 = pxIterator1->pxNext;
            }

        }
    }
}
    31bc:	3730      	adds	r7, #48	; 0x30
    31be:	46bd      	mov	sp, r7
    31c0:	bd80      	pop	{r7, pc}
    31c2:	bf00      	nop
    31c4:	200006a4 	.word	0x200006a4

000031c8 <pOverLap>:



static portBASE_TYPE pOverLap( xListItem * pxEventListItem)
{
    31c8:	b480      	push	{r7}
    31ca:	b087      	sub	sp, #28
    31cc:	af00      	add	r7, sp, #0
    31ce:	6078      	str	r0, [r7, #4]
    eveECB * pxEvent = (eveECB *)pxEventListItem->pvOwner;
    31d0:	687b      	ldr	r3, [r7, #4]
    31d2:	68db      	ldr	r3, [r3, #12]
    31d4:	617b      	str	r3, [r7, #20]
    portBASE_TYPE pxDestination = pxEvent->pxDestination; 
    31d6:	697b      	ldr	r3, [r7, #20]
    31d8:	685b      	ldr	r3, [r3, #4]
    31da:	613b      	str	r3, [r7, #16]
    portTickType start = pxEvent->xTag.xTimestamp;
    31dc:	697b      	ldr	r3, [r7, #20]
    31de:	68db      	ldr	r3, [r3, #12]
    31e0:	60fb      	str	r3, [r7, #12]
    portTickType end   = start + xContexts[pxDestination].xLet;
    31e2:	f240 62d8 	movw	r2, #1752	; 0x6d8
    31e6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    31ea:	6939      	ldr	r1, [r7, #16]
    31ec:	460b      	mov	r3, r1
    31ee:	00db      	lsls	r3, r3, #3
    31f0:	1a5b      	subs	r3, r3, r1
    31f2:	00db      	lsls	r3, r3, #3
    31f4:	4413      	add	r3, r2
    31f6:	3324      	adds	r3, #36	; 0x24
    31f8:	681a      	ldr	r2, [r3, #0]
    31fa:	68fb      	ldr	r3, [r7, #12]
    31fc:	4413      	add	r3, r2
    31fe:	60bb      	str	r3, [r7, #8]

    // different execution time overlaped
    if( start % GCDPeriod < INPUT || start % GCDPeriod > (GCDPeriod - OUTPUT) || 
    3200:	f240 6358 	movw	r3, #1624	; 0x658
    3204:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3208:	681a      	ldr	r2, [r3, #0]
    320a:	68fb      	ldr	r3, [r7, #12]
    320c:	fbb3 f1f2 	udiv	r1, r3, r2
    3210:	fb02 f201 	mul.w	r2, r2, r1
    3214:	1a9b      	subs	r3, r3, r2
    3216:	2b02      	cmp	r3, #2
    3218:	d932      	bls.n	3280 <pOverLap+0xb8>
    321a:	f240 6358 	movw	r3, #1624	; 0x658
    321e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3222:	681a      	ldr	r2, [r3, #0]
    3224:	68fb      	ldr	r3, [r7, #12]
    3226:	fbb3 f1f2 	udiv	r1, r3, r2
    322a:	fb02 f201 	mul.w	r2, r2, r1
    322e:	1a9a      	subs	r2, r3, r2
    3230:	f240 6358 	movw	r3, #1624	; 0x658
    3234:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3238:	681b      	ldr	r3, [r3, #0]
    323a:	3b03      	subs	r3, #3
    323c:	429a      	cmp	r2, r3
    323e:	d81f      	bhi.n	3280 <pOverLap+0xb8>
            end % GCDPeriod < INPUT || end % GCDPeriod > (GCDPeriod - OUTPUT))
    3240:	f240 6358 	movw	r3, #1624	; 0x658
    3244:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3248:	681a      	ldr	r2, [r3, #0]
    324a:	68bb      	ldr	r3, [r7, #8]
    324c:	fbb3 f1f2 	udiv	r1, r3, r2
    3250:	fb02 f201 	mul.w	r2, r2, r1
    3254:	1a9b      	subs	r3, r3, r2
    portBASE_TYPE pxDestination = pxEvent->pxDestination; 
    portTickType start = pxEvent->xTag.xTimestamp;
    portTickType end   = start + xContexts[pxDestination].xLet;

    // different execution time overlaped
    if( start % GCDPeriod < INPUT || start % GCDPeriod > (GCDPeriod - OUTPUT) || 
    3256:	2b02      	cmp	r3, #2
    3258:	d912      	bls.n	3280 <pOverLap+0xb8>
            end % GCDPeriod < INPUT || end % GCDPeriod > (GCDPeriod - OUTPUT))
    325a:	f240 6358 	movw	r3, #1624	; 0x658
    325e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3262:	681a      	ldr	r2, [r3, #0]
    3264:	68bb      	ldr	r3, [r7, #8]
    3266:	fbb3 f1f2 	udiv	r1, r3, r2
    326a:	fb02 f201 	mul.w	r2, r2, r1
    326e:	1a9a      	subs	r2, r3, r2
    3270:	f240 6358 	movw	r3, #1624	; 0x658
    3274:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3278:	681b      	ldr	r3, [r3, #0]
    327a:	3b03      	subs	r3, #3
    327c:	429a      	cmp	r2, r3
    327e:	d901      	bls.n	3284 <pOverLap+0xbc>
    {
        return 1;
    3280:	2301      	movs	r3, #1
    3282:	e000      	b.n	3286 <pOverLap+0xbe>
    }
    return 0;
    3284:	2300      	movs	r3, #0
}
    3286:	4618      	mov	r0, r3
    3288:	371c      	adds	r7, #28
    328a:	46bd      	mov	sp, r7
    328c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3290:	4770      	bx	lr
    3292:	bf00      	nop

00003294 <xSetTimestamp>:

static void xSetTimestamp( xListItem * pxEventListItem)
{
    3294:	b580      	push	{r7, lr}
    3296:	b084      	sub	sp, #16
    3298:	af00      	add	r7, sp, #0
    329a:	6078      	str	r0, [r7, #4]
    portBASE_TYPE i;
    eveECB *pxEvent;  
    
    pxEvent = (eveECB *) pxEventListItem->pvOwner;
    329c:	687b      	ldr	r3, [r7, #4]
    329e:	68db      	ldr	r3, [r3, #12]
    32a0:	60fb      	str	r3, [r7, #12]
    pxEvent->xTag.xTimestamp = xFutureModelTime;
    32a2:	f240 635c 	movw	r3, #1628	; 0x65c
    32a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32aa:	681a      	ldr	r2, [r3, #0]
    32ac:	68fb      	ldr	r3, [r7, #12]
    32ae:	60da      	str	r2, [r3, #12]

    if( pOverLap(pxEventListItem )== 0 ) // not overlaped
    32b0:	6878      	ldr	r0, [r7, #4]
    32b2:	f7ff ff89 	bl	31c8 <pOverLap>
    32b6:	4603      	mov	r3, r0
    32b8:	2b00      	cmp	r3, #0
    32ba:	d122      	bne.n	3302 <xSetTimestamp+0x6e>
    {
        xFutureModelTime += xContexts[pxEvent->pxDestination].xLet; // update future model time
    32bc:	68fb      	ldr	r3, [r7, #12]
    32be:	6859      	ldr	r1, [r3, #4]
    32c0:	f240 62d8 	movw	r2, #1752	; 0x6d8
    32c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    32c8:	460b      	mov	r3, r1
    32ca:	00db      	lsls	r3, r3, #3
    32cc:	1a5b      	subs	r3, r3, r1
    32ce:	00db      	lsls	r3, r3, #3
    32d0:	4413      	add	r3, r2
    32d2:	3324      	adds	r3, #36	; 0x24
    32d4:	681a      	ldr	r2, [r3, #0]
    32d6:	f240 635c 	movw	r3, #1628	; 0x65c
    32da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32de:	681b      	ldr	r3, [r3, #0]
    32e0:	441a      	add	r2, r3
    32e2:	f240 635c 	movw	r3, #1628	; 0x65c
    32e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32ea:	601a      	str	r2, [r3, #0]
        vListRemove( pxEventListItem); 
    32ec:	6878      	ldr	r0, [r7, #4]
    32ee:	f000 ffdd 	bl	42ac <vListRemove>
        vListInsertEnd(&xEventReadyList, pxEventListItem);
    32f2:	f240 60c4 	movw	r0, #1732	; 0x6c4
    32f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    32fa:	6879      	ldr	r1, [r7, #4]
    32fc:	f000 ff76 	bl	41ec <vListInsertEnd>
    3300:	e042      	b.n	3388 <xSetTimestamp+0xf4>
    }
    else  // overlaped
    {
        // set the future model time to start time of next LET
        xFutureModelTime = (xFutureModelTime/GCDPeriod) * GCDPeriod + GCDPeriod + INPUT;  
    3302:	f240 635c 	movw	r3, #1628	; 0x65c
    3306:	f2c2 0300 	movt	r3, #8192	; 0x2000
    330a:	681a      	ldr	r2, [r3, #0]
    330c:	f240 6358 	movw	r3, #1624	; 0x658
    3310:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3314:	681b      	ldr	r3, [r3, #0]
    3316:	fbb2 f3f3 	udiv	r3, r2, r3
    331a:	1c5a      	adds	r2, r3, #1
    331c:	f240 6358 	movw	r3, #1624	; 0x658
    3320:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3324:	681b      	ldr	r3, [r3, #0]
    3326:	fb03 f302 	mul.w	r3, r3, r2
    332a:	1cda      	adds	r2, r3, #3
    332c:	f240 635c 	movw	r3, #1628	; 0x65c
    3330:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3334:	601a      	str	r2, [r3, #0]
        pxEvent->xTag.xTimestamp = xFutureModelTime;
    3336:	f240 635c 	movw	r3, #1628	; 0x65c
    333a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    333e:	681a      	ldr	r2, [r3, #0]
    3340:	68fb      	ldr	r3, [r7, #12]
    3342:	60da      	str	r2, [r3, #12]
        xFutureModelTime += xContexts[pxEvent->pxDestination].xLet;
    3344:	68fb      	ldr	r3, [r7, #12]
    3346:	6859      	ldr	r1, [r3, #4]
    3348:	f240 62d8 	movw	r2, #1752	; 0x6d8
    334c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3350:	460b      	mov	r3, r1
    3352:	00db      	lsls	r3, r3, #3
    3354:	1a5b      	subs	r3, r3, r1
    3356:	00db      	lsls	r3, r3, #3
    3358:	4413      	add	r3, r2
    335a:	3324      	adds	r3, #36	; 0x24
    335c:	681a      	ldr	r2, [r3, #0]
    335e:	f240 635c 	movw	r3, #1628	; 0x65c
    3362:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3366:	681b      	ldr	r3, [r3, #0]
    3368:	441a      	add	r2, r3
    336a:	f240 635c 	movw	r3, #1628	; 0x65c
    336e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3372:	601a      	str	r2, [r3, #0]

        vListRemove( pxEventListItem); 
    3374:	6878      	ldr	r0, [r7, #4]
    3376:	f000 ff99 	bl	42ac <vListRemove>
        vListInsertEnd(&xEventNonExecutablePool, pxEventListItem);
    337a:	f240 6074 	movw	r0, #1652	; 0x674
    337e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3382:	6879      	ldr	r1, [r7, #4]
    3384:	f000 ff32 	bl	41ec <vListInsertEnd>
    }
}
    3388:	3710      	adds	r7, #16
    338a:	46bd      	mov	sp, r7
    338c:	bd80      	pop	{r7, pc}
    338e:	bf00      	nop

00003390 <pEqualxDeadline>:

inline static portBASE_TYPE pEqualxDeadline(struct tag xTag1, struct tag xTag2)
{
    3390:	b490      	push	{r4, r7}
    3392:	b084      	sub	sp, #16
    3394:	af00      	add	r7, sp, #0
    3396:	463c      	mov	r4, r7
    3398:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return (xTag1.xDeadline == xTag2.xDeadline);
    339c:	683a      	ldr	r2, [r7, #0]
    339e:	69bb      	ldr	r3, [r7, #24]
    33a0:	429a      	cmp	r2, r3
    33a2:	bf14      	ite	ne
    33a4:	2300      	movne	r3, #0
    33a6:	2301      	moveq	r3, #1
    33a8:	b2db      	uxtb	r3, r3
}
    33aa:	4618      	mov	r0, r3
    33ac:	3710      	adds	r7, #16
    33ae:	46bd      	mov	sp, r7
    33b0:	bc90      	pop	{r4, r7}
    33b2:	4770      	bx	lr

000033b4 <xEventGenericSerialize>:

// update the timestamp of event in xEventExecutableList in terms of xFutureModelTime
portBASE_TYPE xEventGenericSerialize()
{
    33b4:	b590      	push	{r4, r7, lr}
    33b6:	b08f      	sub	sp, #60	; 0x3c
    33b8:	af04      	add	r7, sp, #16
    xListItem * flag_pxEventListItem;
    struct tag origin_tag;
    portBASE_TYPE count = 1;
    33ba:	2301      	movs	r3, #1
    33bc:	627b      	str	r3, [r7, #36]	; 0x24

    if( listCURRENT_LIST_LENGTH( &xEventExecutableList ) > 1 )
    33be:	f240 63b0 	movw	r3, #1712	; 0x6b0
    33c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33c6:	681b      	ldr	r3, [r3, #0]
    33c8:	2b01      	cmp	r3, #1
    33ca:	d90b      	bls.n	33e4 <xEventGenericSerialize+0x30>
    {
        origin_tag = xEventGetxTag( (xEventExecutableList.xListEnd.pxNext)->pvOwner );
    33cc:	f240 63b0 	movw	r3, #1712	; 0x6b0
    33d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33d4:	68db      	ldr	r3, [r3, #12]
    33d6:	68db      	ldr	r3, [r3, #12]
    33d8:	463a      	mov	r2, r7
    33da:	4610      	mov	r0, r2
    33dc:	4619      	mov	r1, r3
    33de:	f7ff fae5 	bl	29ac <xEventGetxTag>
    }
    
    while( listCURRENT_LIST_LENGTH(&xEventExecutableList) > 1 )
    33e2:	e03d      	b.n	3460 <xEventGenericSerialize+0xac>
    33e4:	e03c      	b.n	3460 <xEventGenericSerialize+0xac>
    {
        flag_pxEventListItem = (xListItem *) xEventExecutableList.xListEnd.pxNext;
    33e6:	f240 63b0 	movw	r3, #1712	; 0x6b0
    33ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33ee:	68db      	ldr	r3, [r3, #12]
    33f0:	623b      	str	r3, [r7, #32]
        // only the timestamp of c_servant need updating
        // only remove events that have same xDeadline with the first event in xEventExecutableList to xEventReadyList

        if( xContexts[xEventGetpxDestination(flag_pxEventListItem->pvOwner)].xType == 2 )
    33f2:	6a3b      	ldr	r3, [r7, #32]
    33f4:	68db      	ldr	r3, [r3, #12]
    33f6:	4618      	mov	r0, r3
    33f8:	f7ff facc 	bl	2994 <xEventGetpxDestination>
    33fc:	4601      	mov	r1, r0
    33fe:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3402:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3406:	460b      	mov	r3, r1
    3408:	00db      	lsls	r3, r3, #3
    340a:	1a5b      	subs	r3, r3, r1
    340c:	00db      	lsls	r3, r3, #3
    340e:	4413      	add	r3, r2
    3410:	3304      	adds	r3, #4
    3412:	681b      	ldr	r3, [r3, #0]
    3414:	2b02      	cmp	r3, #2
    3416:	d119      	bne.n	344c <xEventGenericSerialize+0x98>
        {
            if( pEqualxDeadline( xEventGetxTag( flag_pxEventListItem->pvOwner ), origin_tag ))
    3418:	6a3b      	ldr	r3, [r7, #32]
    341a:	68db      	ldr	r3, [r3, #12]
    341c:	f107 0210 	add.w	r2, r7, #16
    3420:	4610      	mov	r0, r2
    3422:	4619      	mov	r1, r3
    3424:	f7ff fac2 	bl	29ac <xEventGetxTag>
    3428:	466c      	mov	r4, sp
    342a:	463b      	mov	r3, r7
    342c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    342e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    3432:	f107 0310 	add.w	r3, r7, #16
    3436:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3438:	f7ff ffaa 	bl	3390 <pEqualxDeadline>
    343c:	4603      	mov	r3, r0
    343e:	2b00      	cmp	r3, #0
    3440:	d003      	beq.n	344a <xEventGenericSerialize+0x96>
            {
                // update the timestamp of event
                // if overlaped, then remove the event to xEventNonExecutablePool
                // else, remove the event to xEvenReadyList
                xSetTimestamp( flag_pxEventListItem);
    3442:	6a38      	ldr	r0, [r7, #32]
    3444:	f7ff ff26 	bl	3294 <xSetTimestamp>
    3448:	e00a      	b.n	3460 <xEventGenericSerialize+0xac>
            }
            else
            {
                break;
    344a:	e010      	b.n	346e <xEventGenericSerialize+0xba>
            }
        }
        else
        {
            vListRemove( flag_pxEventListItem );
    344c:	6a38      	ldr	r0, [r7, #32]
    344e:	f000 ff2d 	bl	42ac <vListRemove>
            vListInsertEnd( &xEventReadyList, flag_pxEventListItem );
    3452:	f240 60c4 	movw	r0, #1732	; 0x6c4
    3456:	f2c2 0000 	movt	r0, #8192	; 0x2000
    345a:	6a39      	ldr	r1, [r7, #32]
    345c:	f000 fec6 	bl	41ec <vListInsertEnd>
    if( listCURRENT_LIST_LENGTH( &xEventExecutableList ) > 1 )
    {
        origin_tag = xEventGetxTag( (xEventExecutableList.xListEnd.pxNext)->pvOwner );
    }
    
    while( listCURRENT_LIST_LENGTH(&xEventExecutableList) > 1 )
    3460:	f240 63b0 	movw	r3, #1712	; 0x6b0
    3464:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3468:	681b      	ldr	r3, [r3, #0]
    346a:	2b01      	cmp	r3, #1
    346c:	d8bb      	bhi.n	33e6 <xEventGenericSerialize+0x32>
            vListRemove( flag_pxEventListItem );
            vListInsertEnd( &xEventReadyList, flag_pxEventListItem );
        }
    }

    if( listCURRENT_LIST_LENGTH( &xEventReadyList ) > 0 )
    346e:	f240 63c4 	movw	r3, #1732	; 0x6c4
    3472:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3476:	681b      	ldr	r3, [r3, #0]
    3478:	2b00      	cmp	r3, #0
    347a:	d00a      	beq.n	3492 <xEventGenericSerialize+0xde>
    {
        return xEventGetpxDestination((xEventReadyList.xListEnd.pxNext)->pvOwner); //  the first one repsenting the type of events
    347c:	f240 63c4 	movw	r3, #1732	; 0x6c4
    3480:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3484:	68db      	ldr	r3, [r3, #12]
    3486:	68db      	ldr	r3, [r3, #12]
    3488:	4618      	mov	r0, r3
    348a:	f7ff fa83 	bl	2994 <xEventGetpxDestination>
    348e:	4603      	mov	r3, r0
    3490:	e001      	b.n	3496 <xEventGenericSerialize+0xe2>
    }
    return -1; // no event avaliable
    3492:	f04f 33ff 	mov.w	r3, #4294967295
}
    3496:	4618      	mov	r0, r3
    3498:	372c      	adds	r7, #44	; 0x2c
    349a:	46bd      	mov	sp, r7
    349c:	bd90      	pop	{r4, r7, pc}
    349e:	bf00      	nop

000034a0 <vEventGenericSend>:

void vEventGenericSend( xEventHandle pxEvent )
{
    34a0:	b580      	push	{r7, lr}
    34a2:	b082      	sub	sp, #8
    34a4:	af00      	add	r7, sp, #0
    34a6:	6078      	str	r0, [r7, #4]
    vListInsertEnd(&xEventNonExecutablePool, (xListItem *)&((eveECB *)pxEvent)->xEventListItem);
    34a8:	687b      	ldr	r3, [r7, #4]
    34aa:	3320      	adds	r3, #32
    34ac:	f240 6074 	movw	r0, #1652	; 0x674
    34b0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    34b4:	4619      	mov	r1, r3
    34b6:	f000 fe99 	bl	41ec <vListInsertEnd>
}
    34ba:	3708      	adds	r7, #8
    34bc:	46bd      	mov	sp, r7
    34be:	bd80      	pop	{r7, pc}

000034c0 <pxEventGenericReceive>:

xEventHandle pxEventGenericReceive()
{
    34c0:	b580      	push	{r7, lr}
    34c2:	b082      	sub	sp, #8
    34c4:	af00      	add	r7, sp, #0
    // xEventReadyList must not be null, which is ensured by servant

    taskENTER_CRITICAL();
    34c6:	f002 fca3 	bl	5e10 <vPortEnterCritical>
    xListItem * pxFlag = (xListItem *)xEventReadyList.xListEnd.pxNext;
    34ca:	f240 63c4 	movw	r3, #1732	; 0x6c4
    34ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34d2:	68db      	ldr	r3, [r3, #12]
    34d4:	607b      	str	r3, [r7, #4]
    vListRemove(pxFlag);
    34d6:	6878      	ldr	r0, [r7, #4]
    34d8:	f000 fee8 	bl	42ac <vListRemove>
    vListInsertEnd(&xEventNonExecutablePool, pxFlag);  // reuse event, which will be update by servant 
    34dc:	f240 6074 	movw	r0, #1652	; 0x674
    34e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    34e4:	6879      	ldr	r1, [r7, #4]
    34e6:	f000 fe81 	bl	41ec <vListInsertEnd>
    taskEXIT_CRITICAL();
    34ea:	f002 fca7 	bl	5e3c <vPortExitCritical>

    return (xEventHandle) pxFlag->pvOwner;
    34ee:	687b      	ldr	r3, [r7, #4]
    34f0:	68db      	ldr	r3, [r3, #12]
}
    34f2:	4618      	mov	r0, r3
    34f4:	3708      	adds	r7, #8
    34f6:	46bd      	mov	sp, r7
    34f8:	bd80      	pop	{r7, pc}
    34fa:	bf00      	nop

000034fc <vEventGenericUpdate>:

void vEventGenericUpdate( xEventHandle xEvent, portBASE_TYPE pxSource, portTickType xDeadline, portTickType xTimestamp, struct eventData xData)
{
    34fc:	b480      	push	{r7}
    34fe:	b087      	sub	sp, #28
    3500:	af00      	add	r7, sp, #0
    3502:	60f8      	str	r0, [r7, #12]
    3504:	60b9      	str	r1, [r7, #8]
    3506:	607a      	str	r2, [r7, #4]
    3508:	603b      	str	r3, [r7, #0]
    eveECB * pxEvent = (eveECB *)xEvent;
    350a:	68fb      	ldr	r3, [r7, #12]
    350c:	617b      	str	r3, [r7, #20]
    pxEvent->pxSource = pxSource;
    350e:	697b      	ldr	r3, [r7, #20]
    3510:	68ba      	ldr	r2, [r7, #8]
    3512:	601a      	str	r2, [r3, #0]
    pxEvent->xTag.xDeadline = xDeadline;
    3514:	697b      	ldr	r3, [r7, #20]
    3516:	687a      	ldr	r2, [r7, #4]
    3518:	609a      	str	r2, [r3, #8]
    pxEvent->xTag.xTimestamp = xTimestamp; 
    351a:	697b      	ldr	r3, [r7, #20]
    351c:	683a      	ldr	r2, [r7, #0]
    351e:	60da      	str	r2, [r3, #12]
    pxEvent->xTag.xMicroStep = 0;
    3520:	697b      	ldr	r3, [r7, #20]
    3522:	2200      	movs	r2, #0
    3524:	615a      	str	r2, [r3, #20]
    pxEvent->xData = xData;
    3526:	697b      	ldr	r3, [r7, #20]
    3528:	3318      	adds	r3, #24
    352a:	f107 0220 	add.w	r2, r7, #32
    352e:	e892 0003 	ldmia.w	r2, {r0, r1}
    3532:	e883 0003 	stmia.w	r3, {r0, r1}
}
    3536:	371c      	adds	r7, #28
    3538:	46bd      	mov	sp, r7
    353a:	f85d 7b04 	ldr.w	r7, [sp], #4
    353e:	4770      	bx	lr

00003540 <vEventGenericDelete>:

void vEventGenericDelete( xEventHandle xEvent)
{
    3540:	b580      	push	{r7, lr}
    3542:	b084      	sub	sp, #16
    3544:	af00      	add	r7, sp, #0
    3546:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
    3548:	f002 fc62 	bl	5e10 <vPortEnterCritical>

    xListItem * pxEventItem = &((eveECB *)xEvent)->xEventListItem;
    354c:	687b      	ldr	r3, [r7, #4]
    354e:	3320      	adds	r3, #32
    3550:	60fb      	str	r3, [r7, #12]
    vListRemove (pxEventItem);
    3552:	68f8      	ldr	r0, [r7, #12]
    3554:	f000 feaa 	bl	42ac <vListRemove>
    vListInsertEnd( &xEventIdleList, pxEventItem );
    3558:	f240 6060 	movw	r0, #1632	; 0x660
    355c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3560:	68f9      	ldr	r1, [r7, #12]
    3562:	f000 fe43 	bl	41ec <vListInsertEnd>

    taskEXIT_CRITICAL();
    3566:	f002 fc69 	bl	5e3c <vPortExitCritical>
}
    356a:	3710      	adds	r7, #16
    356c:	46bd      	mov	sp, r7
    356e:	bd80      	pop	{r7, pc}

00003570 <vSemaphoreInitialise>:

extern portBASE_TYPE xActuatorOfTask[NUMBEROFTASK];

/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    3570:	b580      	push	{r7, lr}
    3572:	b082      	sub	sp, #8
    3574:	af00      	add	r7, sp, #0
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFTHREAD; ++ i )
    3576:	2300      	movs	r3, #0
    3578:	607b      	str	r3, [r7, #4]
    357a:	e033      	b.n	35e4 <vSemaphoreInitialise+0x74>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
    357c:	2001      	movs	r0, #1
    357e:	2100      	movs	r1, #0
    3580:	2203      	movs	r2, #3
    3582:	f000 ff09 	bl	4398 <xQueueGenericCreate>
    3586:	4601      	mov	r1, r0
    3588:	f241 1320 	movw	r3, #4384	; 0x1120
    358c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3590:	687a      	ldr	r2, [r7, #4]
    3592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    3596:	f241 1320 	movw	r3, #4384	; 0x1120
    359a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    359e:	687a      	ldr	r2, [r7, #4]
    35a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    35a4:	2b00      	cmp	r3, #0
    35a6:	d00c      	beq.n	35c2 <vSemaphoreInitialise+0x52>
    35a8:	f241 1320 	movw	r3, #4384	; 0x1120
    35ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35b0:	687a      	ldr	r2, [r7, #4]
    35b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    35b6:	4618      	mov	r0, r3
    35b8:	2100      	movs	r1, #0
    35ba:	2200      	movs	r2, #0
    35bc:	2300      	movs	r3, #0
    35be:	f000 ff79 	bl	44b4 <xQueueGenericSend>
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    35c2:	f241 1320 	movw	r3, #4384	; 0x1120
    35c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35ca:	687a      	ldr	r2, [r7, #4]
    35cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    35d0:	4618      	mov	r0, r3
    35d2:	2100      	movs	r1, #0
    35d4:	f04f 32ff 	mov.w	r2, #4294967295
    35d8:	2300      	movs	r3, #0
    35da:	f001 f831 	bl	4640 <xQueueGenericReceive>
/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFTHREAD; ++ i )
    35de:	687b      	ldr	r3, [r7, #4]
    35e0:	3301      	adds	r3, #1
    35e2:	607b      	str	r3, [r7, #4]
    35e4:	687b      	ldr	r3, [r7, #4]
    35e6:	2b03      	cmp	r3, #3
    35e8:	ddc8      	ble.n	357c <vSemaphoreInitialise+0xc>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    }
}
    35ea:	3708      	adds	r7, #8
    35ec:	46bd      	mov	sp, r7
    35ee:	bd80      	pop	{r7, pc}

000035f0 <vContextInit>:
/*
 * Set all the parameters of S-Servants.
 *
 * */
void vContextInit()
{
    35f0:	b480      	push	{r7}
    35f2:	b085      	sub	sp, #20
    35f4:	af00      	add	r7, sp, #0
    portBASE_TYPE i, j;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    35f6:	2300      	movs	r3, #0
    35f8:	60fb      	str	r3, [r7, #12]
    35fa:	e0a1      	b.n	3740 <vContextInit+0x150>
    {
        xContexts[i].xMyFlag = i;
    35fc:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3600:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3604:	68f9      	ldr	r1, [r7, #12]
    3606:	460b      	mov	r3, r1
    3608:	00db      	lsls	r3, r3, #3
    360a:	1a5b      	subs	r3, r3, r1
    360c:	00db      	lsls	r3, r3, #3
    360e:	4413      	add	r3, r2
    3610:	68fa      	ldr	r2, [r7, #12]
    3612:	601a      	str	r2, [r3, #0]
        xContexts[i].xType = 2;
    3614:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3618:	f2c2 0200 	movt	r2, #8192	; 0x2000
    361c:	68f9      	ldr	r1, [r7, #12]
    361e:	460b      	mov	r3, r1
    3620:	00db      	lsls	r3, r3, #3
    3622:	1a5b      	subs	r3, r3, r1
    3624:	00db      	lsls	r3, r3, #3
    3626:	4413      	add	r3, r2
    3628:	3304      	adds	r3, #4
    362a:	2202      	movs	r2, #2
    362c:	601a      	str	r2, [r3, #0]
        xContexts[i].xCount = 1; // the first period of task is used to init system
    362e:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3632:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3636:	68f9      	ldr	r1, [r7, #12]
    3638:	460b      	mov	r3, r1
    363a:	00db      	lsls	r3, r3, #3
    363c:	1a5b      	subs	r3, r3, r1
    363e:	00db      	lsls	r3, r3, #3
    3640:	4413      	add	r3, r2
    3642:	3308      	adds	r3, #8
    3644:	2201      	movs	r2, #1
    3646:	601a      	str	r2, [r3, #0]
        xContexts[i].xNumOfIn = 0;
    3648:	f240 62d8 	movw	r2, #1752	; 0x6d8
    364c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3650:	68f9      	ldr	r1, [r7, #12]
    3652:	460b      	mov	r3, r1
    3654:	00db      	lsls	r3, r3, #3
    3656:	1a5b      	subs	r3, r3, r1
    3658:	00db      	lsls	r3, r3, #3
    365a:	4413      	add	r3, r2
    365c:	330c      	adds	r3, #12
    365e:	2200      	movs	r2, #0
    3660:	601a      	str	r2, [r3, #0]
        xContexts[i].xNumOfOut = 0;
    3662:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3666:	f2c2 0200 	movt	r2, #8192	; 0x2000
    366a:	68f9      	ldr	r1, [r7, #12]
    366c:	460b      	mov	r3, r1
    366e:	00db      	lsls	r3, r3, #3
    3670:	1a5b      	subs	r3, r3, r1
    3672:	00db      	lsls	r3, r3, #3
    3674:	4413      	add	r3, r2
    3676:	3310      	adds	r3, #16
    3678:	2200      	movs	r2, #0
    367a:	601a      	str	r2, [r3, #0]
        xContexts[i].xLet = xLetOfServant[i];
    367c:	f240 03c4 	movw	r3, #196	; 0xc4
    3680:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3684:	68fa      	ldr	r2, [r7, #12]
    3686:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    368a:	f240 62d8 	movw	r2, #1752	; 0x6d8
    368e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3692:	68f9      	ldr	r1, [r7, #12]
    3694:	460b      	mov	r3, r1
    3696:	00db      	lsls	r3, r3, #3
    3698:	1a5b      	subs	r3, r3, r1
    369a:	00db      	lsls	r3, r3, #3
    369c:	4413      	add	r3, r2
    369e:	3324      	adds	r3, #36	; 0x24
    36a0:	6018      	str	r0, [r3, #0]
        xContexts[i].xFp = xServantTable[i];
    36a2:	f240 4374 	movw	r3, #1140	; 0x474
    36a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36aa:	68fa      	ldr	r2, [r7, #12]
    36ac:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    36b0:	f240 62d8 	movw	r2, #1752	; 0x6d8
    36b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    36b8:	68f9      	ldr	r1, [r7, #12]
    36ba:	460b      	mov	r3, r1
    36bc:	00db      	lsls	r3, r3, #3
    36be:	1a5b      	subs	r3, r3, r1
    36c0:	00db      	lsls	r3, r3, #3
    36c2:	4413      	add	r3, r2
    36c4:	3328      	adds	r3, #40	; 0x28
    36c6:	6018      	str	r0, [r3, #0]
        xContexts[i].xTaskId = xTaskOfServant[i];
    36c8:	f240 1380 	movw	r3, #384	; 0x180
    36cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36d0:	68fa      	ldr	r2, [r7, #12]
    36d2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    36d6:	f240 62d8 	movw	r2, #1752	; 0x6d8
    36da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    36de:	68f9      	ldr	r1, [r7, #12]
    36e0:	460b      	mov	r3, r1
    36e2:	00db      	lsls	r3, r3, #3
    36e4:	1a5b      	subs	r3, r3, r1
    36e6:	00db      	lsls	r3, r3, #3
    36e8:	4413      	add	r3, r2
    36ea:	3330      	adds	r3, #48	; 0x30
    36ec:	6018      	str	r0, [r3, #0]
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
    36ee:	f240 1380 	movw	r3, #384	; 0x180
    36f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36f6:	68fa      	ldr	r2, [r7, #12]
    36f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    36fc:	f240 0328 	movw	r3, #40	; 0x28
    3700:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3704:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    3708:	f240 62d8 	movw	r2, #1752	; 0x6d8
    370c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3710:	68f9      	ldr	r1, [r7, #12]
    3712:	460b      	mov	r3, r1
    3714:	00db      	lsls	r3, r3, #3
    3716:	1a5b      	subs	r3, r3, r1
    3718:	00db      	lsls	r3, r3, #3
    371a:	4413      	add	r3, r2
    371c:	332c      	adds	r3, #44	; 0x2c
    371e:	6018      	str	r0, [r3, #0]
        xContexts[i].xInBoolCount = 0;
    3720:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3724:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3728:	68f9      	ldr	r1, [r7, #12]
    372a:	460b      	mov	r3, r1
    372c:	00db      	lsls	r3, r3, #3
    372e:	1a5b      	subs	r3, r3, r1
    3730:	00db      	lsls	r3, r3, #3
    3732:	4413      	add	r3, r2
    3734:	3334      	adds	r3, #52	; 0x34
    3736:	2200      	movs	r2, #0
    3738:	601a      	str	r2, [r3, #0]
{
    portBASE_TYPE i, j;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    373a:	68fb      	ldr	r3, [r7, #12]
    373c:	3301      	adds	r3, #1
    373e:	60fb      	str	r3, [r7, #12]
    3740:	68fb      	ldr	r3, [r7, #12]
    3742:	2b2e      	cmp	r3, #46	; 0x2e
    3744:	f77f af5a 	ble.w	35fc <vContextInit+0xc>
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
        xContexts[i].xInBoolCount = 0;
    }

    // setup the type of servants who are initialised to 2
    for( i = 0; i < NUMBEROFTASK; ++ i )
    3748:	2300      	movs	r3, #0
    374a:	60fb      	str	r3, [r7, #12]
    374c:	e028      	b.n	37a0 <vContextInit+0x1b0>
    {
        xContexts[xSensorOfTask[i]].xType = 1;
    374e:	f240 035c 	movw	r3, #92	; 0x5c
    3752:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3756:	68fa      	ldr	r2, [r7, #12]
    3758:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    375c:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3760:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3764:	460b      	mov	r3, r1
    3766:	00db      	lsls	r3, r3, #3
    3768:	1a5b      	subs	r3, r3, r1
    376a:	00db      	lsls	r3, r3, #3
    376c:	4413      	add	r3, r2
    376e:	3304      	adds	r3, #4
    3770:	2201      	movs	r2, #1
    3772:	601a      	str	r2, [r3, #0]
        xContexts[xActuatorOfTask[i]].xType = 3;
    3774:	f240 0390 	movw	r3, #144	; 0x90
    3778:	f2c2 0300 	movt	r3, #8192	; 0x2000
    377c:	68fa      	ldr	r2, [r7, #12]
    377e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    3782:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3786:	f2c2 0200 	movt	r2, #8192	; 0x2000
    378a:	460b      	mov	r3, r1
    378c:	00db      	lsls	r3, r3, #3
    378e:	1a5b      	subs	r3, r3, r1
    3790:	00db      	lsls	r3, r3, #3
    3792:	4413      	add	r3, r2
    3794:	3304      	adds	r3, #4
    3796:	2203      	movs	r2, #3
    3798:	601a      	str	r2, [r3, #0]
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
        xContexts[i].xInBoolCount = 0;
    }

    // setup the type of servants who are initialised to 2
    for( i = 0; i < NUMBEROFTASK; ++ i )
    379a:	68fb      	ldr	r3, [r7, #12]
    379c:	3301      	adds	r3, #1
    379e:	60fb      	str	r3, [r7, #12]
    37a0:	68fb      	ldr	r3, [r7, #12]
    37a2:	2b0c      	cmp	r3, #12
    37a4:	ddd3      	ble.n	374e <vContextInit+0x15e>
        xContexts[xSensorOfTask[i]].xType = 1;
        xContexts[xActuatorOfTask[i]].xType = 3;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    37a6:	2300      	movs	r3, #0
    37a8:	60fb      	str	r3, [r7, #12]
    37aa:	e084      	b.n	38b6 <vContextInit+0x2c6>
    {
        xSource = xRelations.xRelation[i].xInFlag;
    37ac:	f240 223c 	movw	r2, #572	; 0x23c
    37b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37b4:	68f9      	ldr	r1, [r7, #12]
    37b6:	460b      	mov	r3, r1
    37b8:	005b      	lsls	r3, r3, #1
    37ba:	440b      	add	r3, r1
    37bc:	009b      	lsls	r3, r3, #2
    37be:	4413      	add	r3, r2
    37c0:	3304      	adds	r3, #4
    37c2:	681b      	ldr	r3, [r3, #0]
    37c4:	60bb      	str	r3, [r7, #8]
        xDest   = xRelations.xRelation[i].xOutFlag;
    37c6:	f240 223c 	movw	r2, #572	; 0x23c
    37ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37ce:	68f9      	ldr	r1, [r7, #12]
    37d0:	460b      	mov	r3, r1
    37d2:	005b      	lsls	r3, r3, #1
    37d4:	440b      	add	r3, r1
    37d6:	009b      	lsls	r3, r3, #2
    37d8:	4413      	add	r3, r2
    37da:	3308      	adds	r3, #8
    37dc:	681b      	ldr	r3, [r3, #0]
    37de:	607b      	str	r3, [r7, #4]

        xContexts[xSource].xOutFlag[xContexts[xSource].xNumOfOut] = xDest;
    37e0:	f240 62d8 	movw	r2, #1752	; 0x6d8
    37e4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37e8:	68b9      	ldr	r1, [r7, #8]
    37ea:	460b      	mov	r3, r1
    37ec:	00db      	lsls	r3, r3, #3
    37ee:	1a5b      	subs	r3, r3, r1
    37f0:	00db      	lsls	r3, r3, #3
    37f2:	4413      	add	r3, r2
    37f4:	3310      	adds	r3, #16
    37f6:	6818      	ldr	r0, [r3, #0]
    37f8:	f240 62d8 	movw	r2, #1752	; 0x6d8
    37fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3800:	68b9      	ldr	r1, [r7, #8]
    3802:	460b      	mov	r3, r1
    3804:	00db      	lsls	r3, r3, #3
    3806:	1a5b      	subs	r3, r3, r1
    3808:	005b      	lsls	r3, r3, #1
    380a:	4403      	add	r3, r0
    380c:	3306      	adds	r3, #6
    380e:	009b      	lsls	r3, r3, #2
    3810:	4413      	add	r3, r2
    3812:	687a      	ldr	r2, [r7, #4]
    3814:	605a      	str	r2, [r3, #4]
        xContexts[xSource].xNumOfOut ++;
    3816:	f240 62d8 	movw	r2, #1752	; 0x6d8
    381a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    381e:	68b9      	ldr	r1, [r7, #8]
    3820:	460b      	mov	r3, r1
    3822:	00db      	lsls	r3, r3, #3
    3824:	1a5b      	subs	r3, r3, r1
    3826:	00db      	lsls	r3, r3, #3
    3828:	4413      	add	r3, r2
    382a:	3310      	adds	r3, #16
    382c:	681b      	ldr	r3, [r3, #0]
    382e:	1c58      	adds	r0, r3, #1
    3830:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3834:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3838:	68b9      	ldr	r1, [r7, #8]
    383a:	460b      	mov	r3, r1
    383c:	00db      	lsls	r3, r3, #3
    383e:	1a5b      	subs	r3, r3, r1
    3840:	00db      	lsls	r3, r3, #3
    3842:	4413      	add	r3, r2
    3844:	3310      	adds	r3, #16
    3846:	6018      	str	r0, [r3, #0]

        xContexts[xDest].xInFlag[xContexts[xDest].xNumOfIn] = xSource;
    3848:	f240 62d8 	movw	r2, #1752	; 0x6d8
    384c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3850:	6879      	ldr	r1, [r7, #4]
    3852:	460b      	mov	r3, r1
    3854:	00db      	lsls	r3, r3, #3
    3856:	1a5b      	subs	r3, r3, r1
    3858:	00db      	lsls	r3, r3, #3
    385a:	4413      	add	r3, r2
    385c:	330c      	adds	r3, #12
    385e:	6818      	ldr	r0, [r3, #0]
    3860:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3864:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3868:	6879      	ldr	r1, [r7, #4]
    386a:	460b      	mov	r3, r1
    386c:	00db      	lsls	r3, r3, #3
    386e:	1a5b      	subs	r3, r3, r1
    3870:	005b      	lsls	r3, r3, #1
    3872:	4403      	add	r3, r0
    3874:	3304      	adds	r3, #4
    3876:	009b      	lsls	r3, r3, #2
    3878:	4413      	add	r3, r2
    387a:	68ba      	ldr	r2, [r7, #8]
    387c:	605a      	str	r2, [r3, #4]
        xContexts[xDest].xNumOfIn ++;
    387e:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3882:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3886:	6879      	ldr	r1, [r7, #4]
    3888:	460b      	mov	r3, r1
    388a:	00db      	lsls	r3, r3, #3
    388c:	1a5b      	subs	r3, r3, r1
    388e:	00db      	lsls	r3, r3, #3
    3890:	4413      	add	r3, r2
    3892:	330c      	adds	r3, #12
    3894:	681b      	ldr	r3, [r3, #0]
    3896:	1c58      	adds	r0, r3, #1
    3898:	f240 62d8 	movw	r2, #1752	; 0x6d8
    389c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    38a0:	6879      	ldr	r1, [r7, #4]
    38a2:	460b      	mov	r3, r1
    38a4:	00db      	lsls	r3, r3, #3
    38a6:	1a5b      	subs	r3, r3, r1
    38a8:	00db      	lsls	r3, r3, #3
    38aa:	4413      	add	r3, r2
    38ac:	330c      	adds	r3, #12
    38ae:	6018      	str	r0, [r3, #0]
        xContexts[xSensorOfTask[i]].xType = 1;
        xContexts[xActuatorOfTask[i]].xType = 3;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    38b0:	68fb      	ldr	r3, [r7, #12]
    38b2:	3301      	adds	r3, #1
    38b4:	60fb      	str	r3, [r7, #12]
    38b6:	f240 233c 	movw	r3, #572	; 0x23c
    38ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38be:	681a      	ldr	r2, [r3, #0]
    38c0:	68fb      	ldr	r3, [r7, #12]
    38c2:	429a      	cmp	r2, r3
    38c4:	f73f af72 	bgt.w	37ac <vContextInit+0x1bc>
        xContexts[xSource].xNumOfOut ++;

        xContexts[xDest].xInFlag[xContexts[xDest].xNumOfIn] = xSource;
        xContexts[xDest].xNumOfIn ++;
    }
}
    38c8:	3714      	adds	r7, #20
    38ca:	46bd      	mov	sp, r7
    38cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    38d0:	4770      	bx	lr
    38d2:	bf00      	nop

000038d4 <vSensor>:

void vSensor( void * pvParameter )
{
    38d4:	b580      	push	{r7, lr}
    38d6:	b092      	sub	sp, #72	; 0x48
    38d8:	af02      	add	r7, sp, #8
    38da:	60f8      	str	r0, [r7, #12]
    struct tag xMyTag;
    portBASE_TYPE boolFlag;

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[1], portMAX_DELAY );
    38dc:	f241 1320 	movw	r3, #4384	; 0x1120
    38e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38e4:	685b      	ldr	r3, [r3, #4]
    38e6:	4618      	mov	r0, r3
    38e8:	2100      	movs	r1, #0
    38ea:	f04f 32ff 	mov.w	r2, #4294967295
    38ee:	2300      	movs	r3, #0
    38f0:	f000 fea6 	bl	4640 <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    38f4:	e071      	b.n	39da <vSensor+0x106>
        {
            if(boolFlag == 0)
    38f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    38f8:	2b00      	cmp	r3, #0
    38fa:	d100      	bne.n	38fe <vSensor+0x2a>
                continue;
    38fc:	e06d      	b.n	39da <vSensor+0x106>
            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    38fe:	f7ff fddf 	bl	34c0 <pxEventGenericReceive>
    3902:	63b8      	str	r0, [r7, #56]	; 0x38
            xMyFlag = xEventGetpxDestination( pxEvent );
    3904:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3906:	f7ff f845 	bl	2994 <xEventGetpxDestination>
    390a:	6378      	str	r0, [r7, #52]	; 0x34
            xMyData = xEventGetxData( pxEvent );
    390c:	463b      	mov	r3, r7
    390e:	4618      	mov	r0, r3
    3910:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    3912:	f7ff f85d 	bl	29d0 <xEventGetxData>
    3916:	f107 0324 	add.w	r3, r7, #36	; 0x24
    391a:	463a      	mov	r2, r7
    391c:	e892 0003 	ldmia.w	r2, {r0, r1}
    3920:	e883 0003 	stmia.w	r3, {r0, r1}
            xMyTag = xEventGetxTag( pxEvent );
    3924:	f107 0314 	add.w	r3, r7, #20
    3928:	4618      	mov	r0, r3
    392a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    392c:	f7ff f83e 	bl	29ac <xEventGetxTag>
            xPeriod= xContexts[xMyFlag].xPeriod;
    3930:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3934:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3938:	6b79      	ldr	r1, [r7, #52]	; 0x34
    393a:	460b      	mov	r3, r1
    393c:	00db      	lsls	r3, r3, #3
    393e:	1a5b      	subs	r3, r3, r1
    3940:	00db      	lsls	r3, r3, #3
    3942:	4413      	add	r3, r2
    3944:	332c      	adds	r3, #44	; 0x2c
    3946:	681b      	ldr	r3, [r3, #0]
    3948:	633b      	str	r3, [r7, #48]	; 0x30
            xContexts[xMyFlag].xCount ++;
    394a:	f240 62d8 	movw	r2, #1752	; 0x6d8
    394e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3952:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3954:	460b      	mov	r3, r1
    3956:	00db      	lsls	r3, r3, #3
    3958:	1a5b      	subs	r3, r3, r1
    395a:	00db      	lsls	r3, r3, #3
    395c:	4413      	add	r3, r2
    395e:	3308      	adds	r3, #8
    3960:	681b      	ldr	r3, [r3, #0]
    3962:	1c58      	adds	r0, r3, #1
    3964:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3968:	f2c2 0200 	movt	r2, #8192	; 0x2000
    396c:	6b79      	ldr	r1, [r7, #52]	; 0x34
    396e:	460b      	mov	r3, r1
    3970:	00db      	lsls	r3, r3, #3
    3972:	1a5b      	subs	r3, r3, r1
    3974:	00db      	lsls	r3, r3, #3
    3976:	4413      	add	r3, r2
    3978:	3308      	adds	r3, #8
    397a:	6018      	str	r0, [r3, #0]
            xTimestamp = xMyTag.xTimestamp + INPUT;   
    397c:	69bb      	ldr	r3, [r7, #24]
    397e:	3303      	adds	r3, #3
    3980:	62fb      	str	r3, [r7, #44]	; 0x2c
            xFutureModelTime = xTimestamp;  // init the future model time to the start of LET execution duration.
    3982:	f240 635c 	movw	r3, #1628	; 0x65c
    3986:	f2c2 0300 	movt	r3, #8192	; 0x2000
    398a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    398c:	601a      	str	r2, [r3, #0]
            vPrintNumber(xMyFlag);
    398e:	6b78      	ldr	r0, [r7, #52]	; 0x34
    3990:	f013 feb6 	bl	17700 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    3994:	f001 fd08 	bl	53a8 <xTaskGetTickCount>
    3998:	4603      	mov	r3, r0
    399a:	4618      	mov	r0, r3
    399c:	f013 feb0 	bl	17700 <vPrintNumber>
        
            xContexts[xMyFlag].xFp( &xMyData );  // get the loop data and sensor data
    39a0:	f240 62d8 	movw	r2, #1752	; 0x6d8
    39a4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    39a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
    39aa:	460b      	mov	r3, r1
    39ac:	00db      	lsls	r3, r3, #3
    39ae:	1a5b      	subs	r3, r3, r1
    39b0:	00db      	lsls	r3, r3, #3
    39b2:	4413      	add	r3, r2
    39b4:	3328      	adds	r3, #40	; 0x28
    39b6:	681b      	ldr	r3, [r3, #0]
    39b8:	f107 0224 	add.w	r2, r7, #36	; 0x24
    39bc:	4610      	mov	r0, r2
    39be:	4798      	blx	r3
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData );  // reuse event
    39c0:	466b      	mov	r3, sp
    39c2:	f107 0224 	add.w	r2, r7, #36	; 0x24
    39c6:	e892 0003 	ldmia.w	r2, {r0, r1}
    39ca:	e883 0003 	stmia.w	r3, {r0, r1}
    39ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    39d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
    39d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    39d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    39d6:	f7ff fd91 	bl	34fc <vEventGenericUpdate>

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[1], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    39da:	f7fe ff95 	bl	2908 <xIsERLNull>
    39de:	63f8      	str	r0, [r7, #60]	; 0x3c
    39e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    39e2:	f1b3 3fff 	cmp.w	r3, #4294967295
    39e6:	d186      	bne.n	38f6 <vSensor+0x22>
            vPrintNumber(xTaskGetTickCount());
        
            xContexts[xMyFlag].xFp( &xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData );  // reuse event
        }
        xSemaphoreGive( xBinarySemaphore[0] );
    39e8:	f241 1320 	movw	r3, #4384	; 0x1120
    39ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39f0:	681b      	ldr	r3, [r3, #0]
    39f2:	4618      	mov	r0, r3
    39f4:	2100      	movs	r1, #0
    39f6:	2200      	movs	r2, #0
    39f8:	2300      	movs	r3, #0
    39fa:	f000 fd5b 	bl	44b4 <xQueueGenericSend>
    }
    39fe:	e76d      	b.n	38dc <vSensor+0x8>

00003a00 <vServant>:
}

void vServant( void * pvParameter )
{
    3a00:	b580      	push	{r7, lr}
    3a02:	b092      	sub	sp, #72	; 0x48
    3a04:	af02      	add	r7, sp, #8
    3a06:	60f8      	str	r0, [r7, #12]
    struct eventData xMyData;
    struct tag xMyTag;
    portBASE_TYPE boolFlag;
    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[2], portMAX_DELAY );
    3a08:	f241 1320 	movw	r3, #4384	; 0x1120
    3a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a10:	689b      	ldr	r3, [r3, #8]
    3a12:	4618      	mov	r0, r3
    3a14:	2100      	movs	r1, #0
    3a16:	f04f 32ff 	mov.w	r2, #4294967295
    3a1a:	2300      	movs	r3, #0
    3a1c:	f000 fe10 	bl	4640 <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    3a20:	e0a8      	b.n	3b74 <vServant+0x174>
        {
            if(boolFlag == 0)
    3a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3a24:	2b00      	cmp	r3, #0
    3a26:	d100      	bne.n	3a2a <vServant+0x2a>
                continue;
    3a28:	e0a4      	b.n	3b74 <vServant+0x174>
            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    3a2a:	f7ff fd49 	bl	34c0 <pxEventGenericReceive>
    3a2e:	6378      	str	r0, [r7, #52]	; 0x34
            xMyFlag = xEventGetpxDestination( pxEvent );
    3a30:	6b78      	ldr	r0, [r7, #52]	; 0x34
    3a32:	f7fe ffaf 	bl	2994 <xEventGetpxDestination>
    3a36:	6338      	str	r0, [r7, #48]	; 0x30
            xMyData = xEventGetxData( pxEvent );
    3a38:	463b      	mov	r3, r7
    3a3a:	4618      	mov	r0, r3
    3a3c:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3a3e:	f7fe ffc7 	bl	29d0 <xEventGetxData>
    3a42:	f107 0320 	add.w	r3, r7, #32
    3a46:	463a      	mov	r2, r7
    3a48:	e892 0003 	ldmia.w	r2, {r0, r1}
    3a4c:	e883 0003 	stmia.w	r3, {r0, r1}
            xMyTag = xEventGetxTag( pxEvent );
    3a50:	f107 0310 	add.w	r3, r7, #16
    3a54:	4618      	mov	r0, r3
    3a56:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3a58:	f7fe ffa8 	bl	29ac <xEventGetxTag>
            xPeriod= xContexts[xMyFlag].xPeriod;
    3a5c:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3a60:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a64:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3a66:	460b      	mov	r3, r1
    3a68:	00db      	lsls	r3, r3, #3
    3a6a:	1a5b      	subs	r3, r3, r1
    3a6c:	00db      	lsls	r3, r3, #3
    3a6e:	4413      	add	r3, r2
    3a70:	332c      	adds	r3, #44	; 0x2c
    3a72:	681b      	ldr	r3, [r3, #0]
    3a74:	62fb      	str	r3, [r7, #44]	; 0x2c
            xContexts[xMyFlag].xCount ++;
    3a76:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3a7a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3a80:	460b      	mov	r3, r1
    3a82:	00db      	lsls	r3, r3, #3
    3a84:	1a5b      	subs	r3, r3, r1
    3a86:	00db      	lsls	r3, r3, #3
    3a88:	4413      	add	r3, r2
    3a8a:	3308      	adds	r3, #8
    3a8c:	681b      	ldr	r3, [r3, #0]
    3a8e:	1c58      	adds	r0, r3, #1
    3a90:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3a94:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a98:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3a9a:	460b      	mov	r3, r1
    3a9c:	00db      	lsls	r3, r3, #3
    3a9e:	1a5b      	subs	r3, r3, r1
    3aa0:	00db      	lsls	r3, r3, #3
    3aa2:	4413      	add	r3, r2
    3aa4:	3308      	adds	r3, #8
    3aa6:	6018      	str	r0, [r3, #0]
            // set the timestamp of event in terms of destination servant
            // if destination is actuator, then set as the EndOfLET
            // else set as the sum of input event's timestamp and let
            pxDestination = xContexts[xMyFlag].xOutFlag[0];
    3aa8:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3aac:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3ab0:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3ab2:	460b      	mov	r3, r1
    3ab4:	00db      	lsls	r3, r3, #3
    3ab6:	1a5b      	subs	r3, r3, r1
    3ab8:	00db      	lsls	r3, r3, #3
    3aba:	4413      	add	r3, r2
    3abc:	331c      	adds	r3, #28
    3abe:	681b      	ldr	r3, [r3, #0]
    3ac0:	62bb      	str	r3, [r7, #40]	; 0x28
            switch(xContexts[pxDestination].xType)
    3ac2:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3ac6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3aca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3acc:	460b      	mov	r3, r1
    3ace:	00db      	lsls	r3, r3, #3
    3ad0:	1a5b      	subs	r3, r3, r1
    3ad2:	00db      	lsls	r3, r3, #3
    3ad4:	4413      	add	r3, r2
    3ad6:	3304      	adds	r3, #4
    3ad8:	681b      	ldr	r3, [r3, #0]
    3ada:	2b02      	cmp	r3, #2
    3adc:	d002      	beq.n	3ae4 <vServant+0xe4>
    3ade:	2b03      	cmp	r3, #3
    3ae0:	d010      	beq.n	3b04 <vServant+0x104>
                case 3:
                    // the output execution time start from 3ms before end of the task period
                    xTimestamp = xPeriod * xContexts[xMyFlag].xCount - OUTPUT; 
                    break;
                default:
                    break;
    3ae2:	e021      	b.n	3b28 <vServant+0x128>
            // else set as the sum of input event's timestamp and let
            pxDestination = xContexts[xMyFlag].xOutFlag[0];
            switch(xContexts[pxDestination].xType)
            {
                case 2:
                    xTimestamp = xMyTag.xTimestamp + xContexts[xMyFlag].xLet;
    3ae4:	6978      	ldr	r0, [r7, #20]
    3ae6:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3aea:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3aee:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3af0:	460b      	mov	r3, r1
    3af2:	00db      	lsls	r3, r3, #3
    3af4:	1a5b      	subs	r3, r3, r1
    3af6:	00db      	lsls	r3, r3, #3
    3af8:	4413      	add	r3, r2
    3afa:	3324      	adds	r3, #36	; 0x24
    3afc:	681b      	ldr	r3, [r3, #0]
    3afe:	4403      	add	r3, r0
    3b00:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
    3b02:	e011      	b.n	3b28 <vServant+0x128>
                case 3:
                    // the output execution time start from 3ms before end of the task period
                    xTimestamp = xPeriod * xContexts[xMyFlag].xCount - OUTPUT; 
    3b04:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3b08:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3b0e:	460b      	mov	r3, r1
    3b10:	00db      	lsls	r3, r3, #3
    3b12:	1a5b      	subs	r3, r3, r1
    3b14:	00db      	lsls	r3, r3, #3
    3b16:	4413      	add	r3, r2
    3b18:	3308      	adds	r3, #8
    3b1a:	681b      	ldr	r3, [r3, #0]
    3b1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3b1e:	fb02 f303 	mul.w	r3, r2, r3
    3b22:	3b03      	subs	r3, #3
    3b24:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
    3b26:	bf00      	nop
                default:
                    break;
                    // wrong events type
            }
            vPrintNumber(xMyFlag);
    3b28:	6b38      	ldr	r0, [r7, #48]	; 0x30
    3b2a:	f013 fde9 	bl	17700 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    3b2e:	f001 fc3b 	bl	53a8 <xTaskGetTickCount>
    3b32:	4603      	mov	r3, r0
    3b34:	4618      	mov	r0, r3
    3b36:	f013 fde3 	bl	17700 <vPrintNumber>
        
            xContexts[xMyFlag].xFp( &xMyData );  // get the loop data and sensor data
    3b3a:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3b3e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b42:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3b44:	460b      	mov	r3, r1
    3b46:	00db      	lsls	r3, r3, #3
    3b48:	1a5b      	subs	r3, r3, r1
    3b4a:	00db      	lsls	r3, r3, #3
    3b4c:	4413      	add	r3, r2
    3b4e:	3328      	adds	r3, #40	; 0x28
    3b50:	681b      	ldr	r3, [r3, #0]
    3b52:	f107 0220 	add.w	r2, r7, #32
    3b56:	4610      	mov	r0, r2
    3b58:	4798      	blx	r3
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData );
    3b5a:	466b      	mov	r3, sp
    3b5c:	f107 0220 	add.w	r2, r7, #32
    3b60:	e892 0003 	ldmia.w	r2, {r0, r1}
    3b64:	e883 0003 	stmia.w	r3, {r0, r1}
    3b68:	6b78      	ldr	r0, [r7, #52]	; 0x34
    3b6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3b6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3b70:	f7ff fcc4 	bl	34fc <vEventGenericUpdate>
    portBASE_TYPE boolFlag;
    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[2], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    3b74:	f7fe fec8 	bl	2908 <xIsERLNull>
    3b78:	63b8      	str	r0, [r7, #56]	; 0x38
    3b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
    3b80:	f47f af4f 	bne.w	3a22 <vServant+0x22>
            vPrintNumber(xTaskGetTickCount());
        
            xContexts[xMyFlag].xFp( &xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData );
        }
        xSemaphoreGive( xBinarySemaphore[0] );
    3b84:	f241 1320 	movw	r3, #4384	; 0x1120
    3b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b8c:	681b      	ldr	r3, [r3, #0]
    3b8e:	4618      	mov	r0, r3
    3b90:	2100      	movs	r1, #0
    3b92:	2200      	movs	r2, #0
    3b94:	2300      	movs	r3, #0
    3b96:	f000 fc8d 	bl	44b4 <xQueueGenericSend>
    }
    3b9a:	e735      	b.n	3a08 <vServant+0x8>

00003b9c <vActuator>:

}

void vActuator( void * pvParameter )
{
    3b9c:	b580      	push	{r7, lr}
    3b9e:	b092      	sub	sp, #72	; 0x48
    3ba0:	af02      	add	r7, sp, #8
    3ba2:	60f8      	str	r0, [r7, #12]
    struct tag xMyTag;
    portBASE_TYPE boolFlag;

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[3], portMAX_DELAY );
    3ba4:	f241 1320 	movw	r3, #4384	; 0x1120
    3ba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bac:	68db      	ldr	r3, [r3, #12]
    3bae:	4618      	mov	r0, r3
    3bb0:	2100      	movs	r1, #0
    3bb2:	f04f 32ff 	mov.w	r2, #4294967295
    3bb6:	2300      	movs	r3, #0
    3bb8:	f000 fd42 	bl	4640 <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    3bbc:	e06b      	b.n	3c96 <vActuator+0xfa>
        {
            if(boolFlag == 0)
    3bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3bc0:	2b00      	cmp	r3, #0
    3bc2:	d100      	bne.n	3bc6 <vActuator+0x2a>
                continue;
    3bc4:	e067      	b.n	3c96 <vActuator+0xfa>

            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    3bc6:	f7ff fc7b 	bl	34c0 <pxEventGenericReceive>
    3bca:	63b8      	str	r0, [r7, #56]	; 0x38
            xMyFlag = xEventGetpxDestination( pxEvent );
    3bcc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3bce:	f7fe fee1 	bl	2994 <xEventGetpxDestination>
    3bd2:	6378      	str	r0, [r7, #52]	; 0x34
            xMyData = xEventGetxData( pxEvent );
    3bd4:	463b      	mov	r3, r7
    3bd6:	4618      	mov	r0, r3
    3bd8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    3bda:	f7fe fef9 	bl	29d0 <xEventGetxData>
    3bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
    3be2:	463a      	mov	r2, r7
    3be4:	e892 0003 	ldmia.w	r2, {r0, r1}
    3be8:	e883 0003 	stmia.w	r3, {r0, r1}
            xMyTag = xEventGetxTag( pxEvent );
    3bec:	f107 0314 	add.w	r3, r7, #20
    3bf0:	4618      	mov	r0, r3
    3bf2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    3bf4:	f7fe feda 	bl	29ac <xEventGetxTag>
            xPeriod = xContexts[xMyFlag].xPeriod;
    3bf8:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3bfc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3c00:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3c02:	460b      	mov	r3, r1
    3c04:	00db      	lsls	r3, r3, #3
    3c06:	1a5b      	subs	r3, r3, r1
    3c08:	00db      	lsls	r3, r3, #3
    3c0a:	4413      	add	r3, r2
    3c0c:	332c      	adds	r3, #44	; 0x2c
    3c0e:	681b      	ldr	r3, [r3, #0]
    3c10:	633b      	str	r3, [r7, #48]	; 0x30
            xContexts[xMyFlag].xCount ++;
    3c12:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3c16:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3c1a:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3c1c:	460b      	mov	r3, r1
    3c1e:	00db      	lsls	r3, r3, #3
    3c20:	1a5b      	subs	r3, r3, r1
    3c22:	00db      	lsls	r3, r3, #3
    3c24:	4413      	add	r3, r2
    3c26:	3308      	adds	r3, #8
    3c28:	681b      	ldr	r3, [r3, #0]
    3c2a:	1c58      	adds	r0, r3, #1
    3c2c:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3c30:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3c34:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3c36:	460b      	mov	r3, r1
    3c38:	00db      	lsls	r3, r3, #3
    3c3a:	1a5b      	subs	r3, r3, r1
    3c3c:	00db      	lsls	r3, r3, #3
    3c3e:	4413      	add	r3, r2
    3c40:	3308      	adds	r3, #8
    3c42:	6018      	str	r0, [r3, #0]
            xTimestamp = xMyTag.xTimestamp + OUTPUT;  // all sensor are scheduled to execute start from 0 to 4 ms of every period
    3c44:	69bb      	ldr	r3, [r7, #24]
    3c46:	3303      	adds	r3, #3
    3c48:	62fb      	str	r3, [r7, #44]	; 0x2c
            vPrintNumber(xMyFlag);
    3c4a:	6b78      	ldr	r0, [r7, #52]	; 0x34
    3c4c:	f013 fd58 	bl	17700 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    3c50:	f001 fbaa 	bl	53a8 <xTaskGetTickCount>
    3c54:	4603      	mov	r3, r0
    3c56:	4618      	mov	r0, r3
    3c58:	f013 fd52 	bl	17700 <vPrintNumber>
        
            xContexts[xMyFlag].xFp( &xMyData );  // get the loop data and sensor data
    3c5c:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3c60:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3c64:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3c66:	460b      	mov	r3, r1
    3c68:	00db      	lsls	r3, r3, #3
    3c6a:	1a5b      	subs	r3, r3, r1
    3c6c:	00db      	lsls	r3, r3, #3
    3c6e:	4413      	add	r3, r2
    3c70:	3328      	adds	r3, #40	; 0x28
    3c72:	681b      	ldr	r3, [r3, #0]
    3c74:	f107 0224 	add.w	r2, r7, #36	; 0x24
    3c78:	4610      	mov	r0, r2
    3c7a:	4798      	blx	r3
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData ); // update the information of output event 
    3c7c:	466b      	mov	r3, sp
    3c7e:	f107 0224 	add.w	r2, r7, #36	; 0x24
    3c82:	e892 0003 	ldmia.w	r2, {r0, r1}
    3c86:	e883 0003 	stmia.w	r3, {r0, r1}
    3c8a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3c8c:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3c8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3c92:	f7ff fc33 	bl	34fc <vEventGenericUpdate>

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[3], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    3c96:	f7fe fe37 	bl	2908 <xIsERLNull>
    3c9a:	63f8      	str	r0, [r7, #60]	; 0x3c
    3c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
    3ca2:	d18c      	bne.n	3bbe <vActuator+0x22>
            vPrintNumber(xTaskGetTickCount());
        
            xContexts[xMyFlag].xFp( &xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData ); // update the information of output event 
        }
        xSemaphoreGive( xBinarySemaphore[0] );
    3ca4:	f241 1320 	movw	r3, #4384	; 0x1120
    3ca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cac:	681b      	ldr	r3, [r3, #0]
    3cae:	4618      	mov	r0, r3
    3cb0:	2100      	movs	r1, #0
    3cb2:	2200      	movs	r2, #0
    3cb4:	2300      	movs	r3, #0
    3cb6:	f000 fbfd 	bl	44b4 <xQueueGenericSend>
    }
    3cba:	e773      	b.n	3ba4 <vActuator+0x8>

00003cbc <vR_Servant>:
}


void vR_Servant( void * pvParameter)
{
    3cbc:	b580      	push	{r7, lr}
    3cbe:	b084      	sub	sp, #16
    3cc0:	af00      	add	r7, sp, #0
    3cc2:	6078      	str	r0, [r7, #4]
    portBASE_TYPE pxDestination;
    while(1)
    {
        // waiting for events created by tick hook or S-Servant
        xSemaphoreTake( xBinarySemaphore[0], portMAX_DELAY );
    3cc4:	f241 1320 	movw	r3, #4384	; 0x1120
    3cc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ccc:	681b      	ldr	r3, [r3, #0]
    3cce:	4618      	mov	r0, r3
    3cd0:	2100      	movs	r1, #0
    3cd2:	f04f 32ff 	mov.w	r2, #4294967295
    3cd6:	2300      	movs	r3, #0
    3cd8:	f000 fcb2 	bl	4640 <xQueueGenericReceive>
        //vPrintString("Actuator\n\r");

        // transit the events from events pool to nonexecutable event list
        // Copy one event to multiple when communication mode is 1 to N
        vEventScatter();
    3cdc:	f7ff f932 	bl	2f44 <vEventGenericScatter>

        // transit the events from nonexecutable event list to executable event list
        vEventTransit();
    3ce0:	f7ff f8de 	bl	2ea0 <vEventGenericTransit>
 
        // reduce multiple event for destination to one when communication mode is N to 1,
        // and transit the event from executable event pool to executable event list
        vEventReduce(); 
    3ce4:	f7ff f9b2 	bl	304c <vEventGenericReduce>

        // serialize the timestamp of simulataneous events,
        // and transit the ready events to ready list
        // return the pxDestination of the first ready event in ready list
        pxDestination = xEventSerialize(); 
    3ce8:	f7ff fb64 	bl	33b4 <xEventGenericSerialize>
    3cec:	60f8      	str	r0, [r7, #12]

        switch(xContexts[pxDestination].xType)
    3cee:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3cf2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3cf6:	68f9      	ldr	r1, [r7, #12]
    3cf8:	460b      	mov	r3, r1
    3cfa:	00db      	lsls	r3, r3, #3
    3cfc:	1a5b      	subs	r3, r3, r1
    3cfe:	00db      	lsls	r3, r3, #3
    3d00:	4413      	add	r3, r2
    3d02:	3304      	adds	r3, #4
    3d04:	681b      	ldr	r3, [r3, #0]
    3d06:	2b02      	cmp	r3, #2
    3d08:	d010      	beq.n	3d2c <vR_Servant+0x70>
    3d0a:	2b03      	cmp	r3, #3
    3d0c:	d01a      	beq.n	3d44 <vR_Servant+0x88>
    3d0e:	2b01      	cmp	r3, #1
    3d10:	d000      	beq.n	3d14 <vR_Servant+0x58>
                break;
            case 3:
                xSemaphoreGive( xBinarySemaphore[3] );
                break;
            default:
                break;
    3d12:	e023      	b.n	3d5c <vR_Servant+0xa0>
        pxDestination = xEventSerialize(); 

        switch(xContexts[pxDestination].xType)
        {
            case 1:
                xSemaphoreGive( xBinarySemaphore[1] );
    3d14:	f241 1320 	movw	r3, #4384	; 0x1120
    3d18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d1c:	685b      	ldr	r3, [r3, #4]
    3d1e:	4618      	mov	r0, r3
    3d20:	2100      	movs	r1, #0
    3d22:	2200      	movs	r2, #0
    3d24:	2300      	movs	r3, #0
    3d26:	f000 fbc5 	bl	44b4 <xQueueGenericSend>
                break;
    3d2a:	e017      	b.n	3d5c <vR_Servant+0xa0>
            case 2:
                xSemaphoreGive( xBinarySemaphore[2] );
    3d2c:	f241 1320 	movw	r3, #4384	; 0x1120
    3d30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d34:	689b      	ldr	r3, [r3, #8]
    3d36:	4618      	mov	r0, r3
    3d38:	2100      	movs	r1, #0
    3d3a:	2200      	movs	r2, #0
    3d3c:	2300      	movs	r3, #0
    3d3e:	f000 fbb9 	bl	44b4 <xQueueGenericSend>
                break;
    3d42:	e00b      	b.n	3d5c <vR_Servant+0xa0>
            case 3:
                xSemaphoreGive( xBinarySemaphore[3] );
    3d44:	f241 1320 	movw	r3, #4384	; 0x1120
    3d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d4c:	68db      	ldr	r3, [r3, #12]
    3d4e:	4618      	mov	r0, r3
    3d50:	2100      	movs	r1, #0
    3d52:	2200      	movs	r2, #0
    3d54:	2300      	movs	r3, #0
    3d56:	f000 fbad 	bl	44b4 <xQueueGenericSend>
                break;
    3d5a:	bf00      	nop
            default:
                break;
                // no event available 
        }
    }
    3d5c:	e7b2      	b.n	3cc4 <vR_Servant+0x8>
    3d5e:	bf00      	nop

00003d60 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
    3d60:	b480      	push	{r7}
    3d62:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
    3d64:	f242 032f 	movw	r3, #8239	; 0x202f
    3d68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d6c:	2200      	movs	r2, #0
    3d6e:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
    3d70:	f242 032e 	movw	r3, #8238	; 0x202e
    3d74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d78:	2201      	movs	r2, #1
    3d7a:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
    3d7c:	f242 0325 	movw	r3, #8229	; 0x2025
    3d80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d84:	2207      	movs	r2, #7
    3d86:	701a      	strb	r2, [r3, #0]
}
    3d88:	46bd      	mov	sp, r7
    3d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d8e:	4770      	bx	lr

00003d90 <PapabenchInit>:
extern void ir_init();
extern void estimator_init();
extern void fbw_init();

void PapabenchInit()
{
    3d90:	b580      	push	{r7, lr}
    3d92:	af00      	add	r7, sp, #0
    timer_init();
    3d94:	f7ff ffe4 	bl	3d60 <timer_init>
    modem_init();
    3d98:	f00d f9a6 	bl	110e8 <modem_init>
    adc_init();
    3d9c:	f00d fcf0 	bl	11780 <adc_init>
#ifdef CTL_BRD_V1_1
    adc_buf_channel(ADC_CHANNEL_BAT, &buf_bat);
#endif
    spi_init();
    3da0:	f00d fc62 	bl	11668 <spi_init>
    link_fbw_init();
    3da4:	f00d fabe 	bl	11324 <link_fbw_init>
    gps_init();
    3da8:	f00d fd9a 	bl	118e0 <gps_init>
    nav_init();
    3dac:	f011 f892 	bl	14ed4 <nav_init>
    ir_init();
    3db0:	f00e f83e 	bl	11e30 <ir_init>
    estimator_init();
    3db4:	f011 fa74 	bl	152a0 <estimator_init>
#ifdef PAPABENCH_SINGLE
    fbw_init();
#endif
}
    3db8:	bd80      	pop	{r7, pc}
    3dba:	bf00      	nop

00003dbc <s_0>:
#define SUNNYBEIKE 1
#ifdef SUNNYBEIKE

/*task0*/
void s_0(struct eventData * pxDataArray) 
{
    3dbc:	b480      	push	{r7}
    3dbe:	b083      	sub	sp, #12
    3dc0:	af00      	add	r7, sp, #0
    3dc2:	6078      	str	r0, [r7, #4]
    // do actuator
    // do sensor
}
    3dc4:	370c      	adds	r7, #12
    3dc6:	46bd      	mov	sp, r7
    3dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dcc:	4770      	bx	lr
    3dce:	bf00      	nop

00003dd0 <s_1>:
void s_1(struct eventData * pxDataArray) 
{
    3dd0:	b580      	push	{r7, lr}
    3dd2:	b082      	sub	sp, #8
    3dd4:	af00      	add	r7, sp, #0
    3dd6:	6078      	str	r0, [r7, #4]
    last_radio_from_ppm(); // ppm.h
    3dd8:	f012 fa3e 	bl	16258 <last_radio_from_ppm>
}
    3ddc:	3708      	adds	r7, #8
    3dde:	46bd      	mov	sp, r7
    3de0:	bd80      	pop	{r7, pc}
    3de2:	bf00      	nop

00003de4 <s_2>:
void s_2(struct eventData * pxDataArray) 
{
    3de4:	b480      	push	{r7}
    3de6:	b083      	sub	sp, #12
    3de8:	af00      	add	r7, sp, #0
    3dea:	6078      	str	r0, [r7, #4]
    //servo_set();  // servo.h, this function is used by multitask which in terms of multiuse of Servant. And this
                    // is not implemented now. So cancel.
}
    3dec:	370c      	adds	r7, #12
    3dee:	46bd      	mov	sp, r7
    3df0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3df4:	4770      	bx	lr
    3df6:	bf00      	nop

00003df8 <s_3>:
void s_3(struct eventData * pxDataArray) 
{
    3df8:	b480      	push	{r7}
    3dfa:	b083      	sub	sp, #12
    3dfc:	af00      	add	r7, sp, #0
    3dfe:	6078      	str	r0, [r7, #4]
}
    3e00:	370c      	adds	r7, #12
    3e02:	46bd      	mov	sp, r7
    3e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e08:	4770      	bx	lr
    3e0a:	bf00      	nop

00003e0c <s_4>:

/*task1*/
void s_4(struct eventData * pxDataArray) 
{
    3e0c:	b480      	push	{r7}
    3e0e:	b083      	sub	sp, #12
    3e10:	af00      	add	r7, sp, #0
    3e12:	6078      	str	r0, [r7, #4]
}
    3e14:	370c      	adds	r7, #12
    3e16:	46bd      	mov	sp, r7
    3e18:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e1c:	4770      	bx	lr
    3e1e:	bf00      	nop

00003e20 <s_5>:
void s_5(struct eventData * pxDataArray) 
{
    3e20:	b580      	push	{r7, lr}
    3e22:	b082      	sub	sp, #8
    3e24:	af00      	add	r7, sp, #0
    3e26:	6078      	str	r0, [r7, #4]
    to_autopilot_from_last_radio(); // main.c
    3e28:	f012 fdd0 	bl	169cc <to_autopilot_from_last_radio>
}
    3e2c:	3708      	adds	r7, #8
    3e2e:	46bd      	mov	sp, r7
    3e30:	bd80      	pop	{r7, pc}
    3e32:	bf00      	nop

00003e34 <s_6>:
void s_6(struct eventData * pxDataArray) 
{
    3e34:	b580      	push	{r7, lr}
    3e36:	b082      	sub	sp, #8
    3e38:	af00      	add	r7, sp, #0
    3e3a:	6078      	str	r0, [r7, #4]
    spi_reset(); // spi_fbw.h
    3e3c:	f012 fd04 	bl	16848 <spi_reset>
}
    3e40:	3708      	adds	r7, #8
    3e42:	46bd      	mov	sp, r7
    3e44:	bd80      	pop	{r7, pc}
    3e46:	bf00      	nop

00003e48 <s_7>:
void s_7(struct eventData * pxDataArray) 
{
    3e48:	b480      	push	{r7}
    3e4a:	b083      	sub	sp, #12
    3e4c:	af00      	add	r7, sp, #0
    3e4e:	6078      	str	r0, [r7, #4]
}
    3e50:	370c      	adds	r7, #12
    3e52:	46bd      	mov	sp, r7
    3e54:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e58:	4770      	bx	lr
    3e5a:	bf00      	nop

00003e5c <s_8>:

/*task 2*/ 
void s_8(struct eventData * pxDataArray) 
{
    3e5c:	b480      	push	{r7}
    3e5e:	b083      	sub	sp, #12
    3e60:	af00      	add	r7, sp, #0
    3e62:	6078      	str	r0, [r7, #4]
}
    3e64:	370c      	adds	r7, #12
    3e66:	46bd      	mov	sp, r7
    3e68:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e6c:	4770      	bx	lr
    3e6e:	bf00      	nop

00003e70 <s_9>:
void s_9(struct eventData * pxDataArray) 
{
    3e70:	b580      	push	{r7, lr}
    3e72:	b082      	sub	sp, #8
    3e74:	af00      	add	r7, sp, #0
    3e76:	6078      	str	r0, [r7, #4]
    check_mega128_values_task(); // main.c
    3e78:	f012 ff4c 	bl	16d14 <check_mega128_values_task>
}
    3e7c:	3708      	adds	r7, #8
    3e7e:	46bd      	mov	sp, r7
    3e80:	bd80      	pop	{r7, pc}
    3e82:	bf00      	nop

00003e84 <s_10>:
void s_10(struct eventData * pxDataArray) 
{
    3e84:	b480      	push	{r7}
    3e86:	b083      	sub	sp, #12
    3e88:	af00      	add	r7, sp, #0
    3e8a:	6078      	str	r0, [r7, #4]
}
    3e8c:	370c      	adds	r7, #12
    3e8e:	46bd      	mov	sp, r7
    3e90:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e94:	4770      	bx	lr
    3e96:	bf00      	nop

00003e98 <s_11>:

/*task 3, servant 8, 9*/ 
void s_11(struct eventData * pxDataArray) 
{
    3e98:	b480      	push	{r7}
    3e9a:	b083      	sub	sp, #12
    3e9c:	af00      	add	r7, sp, #0
    3e9e:	6078      	str	r0, [r7, #4]
}
    3ea0:	370c      	adds	r7, #12
    3ea2:	46bd      	mov	sp, r7
    3ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ea8:	4770      	bx	lr
    3eaa:	bf00      	nop

00003eac <s_12>:
void s_12(struct eventData * pxDataArray) 
{
    3eac:	b580      	push	{r7, lr}
    3eae:	b082      	sub	sp, #8
    3eb0:	af00      	add	r7, sp, #0
    3eb2:	6078      	str	r0, [r7, #4]
    servo_transmit(); //servo.h
    3eb4:	f013 f822 	bl	16efc <servo_transmit>
}
    3eb8:	3708      	adds	r7, #8
    3eba:	46bd      	mov	sp, r7
    3ebc:	bd80      	pop	{r7, pc}
    3ebe:	bf00      	nop

00003ec0 <s_13>:
void s_13(struct eventData * pxDataArray) 
{
    3ec0:	b480      	push	{r7}
    3ec2:	b083      	sub	sp, #12
    3ec4:	af00      	add	r7, sp, #0
    3ec6:	6078      	str	r0, [r7, #4]
}
    3ec8:	370c      	adds	r7, #12
    3eca:	46bd      	mov	sp, r7
    3ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ed0:	4770      	bx	lr
    3ed2:	bf00      	nop

00003ed4 <s_14>:

/*task 4, servant 10, 11*/
void s_14(struct eventData * pxDataArray) 
{
    3ed4:	b480      	push	{r7}
    3ed6:	b083      	sub	sp, #12
    3ed8:	af00      	add	r7, sp, #0
    3eda:	6078      	str	r0, [r7, #4]
}
    3edc:	370c      	adds	r7, #12
    3ede:	46bd      	mov	sp, r7
    3ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ee4:	4770      	bx	lr
    3ee6:	bf00      	nop

00003ee8 <s_15>:
void s_15(struct eventData * pxDataArray) 
{
    3ee8:	b580      	push	{r7, lr}
    3eea:	b082      	sub	sp, #8
    3eec:	af00      	add	r7, sp, #0
    3eee:	6078      	str	r0, [r7, #4]
    check_failsafe_task(); // main.c
    3ef0:	f012 feea 	bl	16cc8 <check_failsafe_task>
}
    3ef4:	3708      	adds	r7, #8
    3ef6:	46bd      	mov	sp, r7
    3ef8:	bd80      	pop	{r7, pc}
    3efa:	bf00      	nop

00003efc <s_16>:
void s_16(struct eventData * pxDataArray) 
{
    3efc:	b480      	push	{r7}
    3efe:	b083      	sub	sp, #12
    3f00:	af00      	add	r7, sp, #0
    3f02:	6078      	str	r0, [r7, #4]
}
    3f04:	370c      	adds	r7, #12
    3f06:	46bd      	mov	sp, r7
    3f08:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f0c:	4770      	bx	lr
    3f0e:	bf00      	nop

00003f10 <s_17>:

/*task 5, servant 12, 13, 14*/
void s_17(struct eventData * pxDataArray) 
{
    3f10:	b480      	push	{r7}
    3f12:	b083      	sub	sp, #12
    3f14:	af00      	add	r7, sp, #0
    3f16:	6078      	str	r0, [r7, #4]
}
    3f18:	370c      	adds	r7, #12
    3f1a:	46bd      	mov	sp, r7
    3f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f20:	4770      	bx	lr
    3f22:	bf00      	nop

00003f24 <s_18>:
void s_18(struct eventData * pxDataArray) 
{
    3f24:	b580      	push	{r7, lr}
    3f26:	b082      	sub	sp, #8
    3f28:	af00      	add	r7, sp, #0
    3f2a:	6078      	str	r0, [r7, #4]
     //inflight_calib(pdTRUE); // inflight_calib.h
     //inflight_calib(pdTRUE); // main_auto.c , we transfer this function into main.c because of bugs if not 
     radio_control_task();
    3f2c:	f009 f91e 	bl	d16c <radio_control_task>
}
    3f30:	3708      	adds	r7, #8
    3f32:	46bd      	mov	sp, r7
    3f34:	bd80      	pop	{r7, pc}
    3f36:	bf00      	nop

00003f38 <s_19>:
void s_19(struct eventData * pxDataArray) 
{
    3f38:	b580      	push	{r7, lr}
    3f3a:	b082      	sub	sp, #8
    3f3c:	af00      	add	r7, sp, #0
    3f3e:	6078      	str	r0, [r7, #4]
    ir_gain_calib(); //infrared.h
    3f40:	f00d ffce 	bl	11ee0 <ir_gain_calib>
}
    3f44:	3708      	adds	r7, #8
    3f46:	46bd      	mov	sp, r7
    3f48:	bd80      	pop	{r7, pc}
    3f4a:	bf00      	nop

00003f4c <s_20>:
void s_20(struct eventData * pxDataArray) 
{
    3f4c:	b480      	push	{r7}
    3f4e:	b083      	sub	sp, #12
    3f50:	af00      	add	r7, sp, #0
    3f52:	6078      	str	r0, [r7, #4]
}
    3f54:	370c      	adds	r7, #12
    3f56:	46bd      	mov	sp, r7
    3f58:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f5c:	4770      	bx	lr
    3f5e:	bf00      	nop

00003f60 <s_21>:

/*task 6, servant 15,16,17,18*/ 
void s_21(struct eventData * pxDataArray) 
{
    3f60:	b480      	push	{r7}
    3f62:	b083      	sub	sp, #12
    3f64:	af00      	add	r7, sp, #0
    3f66:	6078      	str	r0, [r7, #4]
}
    3f68:	370c      	adds	r7, #12
    3f6a:	46bd      	mov	sp, r7
    3f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f70:	4770      	bx	lr
    3f72:	bf00      	nop

00003f74 <s_22>:
void s_22(struct eventData * pxDataArray) 
{
    3f74:	b580      	push	{r7, lr}
    3f76:	b082      	sub	sp, #8
    3f78:	af00      	add	r7, sp, #0
    3f7a:	6078      	str	r0, [r7, #4]
    ir_update(); // infrared.h
    3f7c:	f00d ff72 	bl	11e64 <ir_update>
}
    3f80:	3708      	adds	r7, #8
    3f82:	46bd      	mov	sp, r7
    3f84:	bd80      	pop	{r7, pc}
    3f86:	bf00      	nop

00003f88 <s_23>:
void s_23(struct eventData * pxDataArray) 
{
    3f88:	b580      	push	{r7, lr}
    3f8a:	b082      	sub	sp, #8
    3f8c:	af00      	add	r7, sp, #0
    3f8e:	6078      	str	r0, [r7, #4]
    //servo_transmit();  // servo.h
    estimator_update_state_infrared(); //estimator.h
    3f90:	f011 f9f0 	bl	15374 <estimator_update_state_infrared>
}
    3f94:	3708      	adds	r7, #8
    3f96:	46bd      	mov	sp, r7
    3f98:	bd80      	pop	{r7, pc}
    3f9a:	bf00      	nop

00003f9c <s_24>:
void s_24(struct eventData * pxDataArray) 
{
    3f9c:	b580      	push	{r7, lr}
    3f9e:	b082      	sub	sp, #8
    3fa0:	af00      	add	r7, sp, #0
    3fa2:	6078      	str	r0, [r7, #4]
    roll_pitch_pid_run(); // pid.h
    3fa4:	f00d ffcc 	bl	11f40 <roll_pitch_pid_run>
}
    3fa8:	3708      	adds	r7, #8
    3faa:	46bd      	mov	sp, r7
    3fac:	bd80      	pop	{r7, pc}
    3fae:	bf00      	nop

00003fb0 <s_25>:
void s_25(struct eventData * pxDataArray) 
{
    3fb0:	b480      	push	{r7}
    3fb2:	b083      	sub	sp, #12
    3fb4:	af00      	add	r7, sp, #0
    3fb6:	6078      	str	r0, [r7, #4]
}
    3fb8:	370c      	adds	r7, #12
    3fba:	46bd      	mov	sp, r7
    3fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fc0:	4770      	bx	lr
    3fc2:	bf00      	nop

00003fc4 <s_26>:

/*task 7, servant 19, 20*/
void s_26(struct eventData * pxDataArray) 
{
    3fc4:	b480      	push	{r7}
    3fc6:	b083      	sub	sp, #12
    3fc8:	af00      	add	r7, sp, #0
    3fca:	6078      	str	r0, [r7, #4]
}
    3fcc:	370c      	adds	r7, #12
    3fce:	46bd      	mov	sp, r7
    3fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fd4:	4770      	bx	lr
    3fd6:	bf00      	nop

00003fd8 <s_27>:
void s_27(struct eventData * pxDataArray) 
{
    3fd8:	b580      	push	{r7, lr}
    3fda:	b082      	sub	sp, #8
    3fdc:	af00      	add	r7, sp, #0
    3fde:	6078      	str	r0, [r7, #4]
    link_fbw_send(); //link_fbw.h
    3fe0:	f00d f9b2 	bl	11348 <link_fbw_send>
}
    3fe4:	3708      	adds	r7, #8
    3fe6:	46bd      	mov	sp, r7
    3fe8:	bd80      	pop	{r7, pc}
    3fea:	bf00      	nop

00003fec <s_28>:
void s_28(struct eventData * pxDataArray) 
{}
    3fec:	b480      	push	{r7}
    3fee:	b083      	sub	sp, #12
    3ff0:	af00      	add	r7, sp, #0
    3ff2:	6078      	str	r0, [r7, #4]
    3ff4:	370c      	adds	r7, #12
    3ff6:	46bd      	mov	sp, r7
    3ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ffc:	4770      	bx	lr
    3ffe:	bf00      	nop

00004000 <s_29>:

/*task 8, sevrvant 21,22,23*/
void s_29(struct eventData * pxDataArray) 
{
    4000:	b480      	push	{r7}
    4002:	b083      	sub	sp, #12
    4004:	af00      	add	r7, sp, #0
    4006:	6078      	str	r0, [r7, #4]
}
    4008:	370c      	adds	r7, #12
    400a:	46bd      	mov	sp, r7
    400c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4010:	4770      	bx	lr
    4012:	bf00      	nop

00004014 <s_30>:
void s_30(struct eventData * pxDataArray) 
{
    4014:	b580      	push	{r7, lr}
    4016:	b082      	sub	sp, #8
    4018:	af00      	add	r7, sp, #0
    401a:	6078      	str	r0, [r7, #4]
    parse_gps_msg(); //gps.h
    401c:	f00d fc6c 	bl	118f8 <parse_gps_msg>
}
    4020:	3708      	adds	r7, #8
    4022:	46bd      	mov	sp, r7
    4024:	bd80      	pop	{r7, pc}
    4026:	bf00      	nop

00004028 <s_31>:
void s_31(struct eventData * pxDataArray) 
{
    4028:	b580      	push	{r7, lr}
    402a:	b082      	sub	sp, #8
    402c:	af00      	add	r7, sp, #0
    402e:	6078      	str	r0, [r7, #4]
    //use_gps_pos(); // autopilot.h  is not implemeted.
    send_gps_pos();
    4030:	f00a fe8a 	bl	ed48 <send_gps_pos>
    send_radIR();
    4034:	f00c f84e 	bl	100d4 <send_radIR>
    send_takeOff();
    4038:	f00c fe46 	bl	10cc8 <send_takeOff>
}
    403c:	3708      	adds	r7, #8
    403e:	46bd      	mov	sp, r7
    4040:	bd80      	pop	{r7, pc}
    4042:	bf00      	nop

00004044 <s_32>:
void s_32(struct eventData * pxDataArray) 
{}
    4044:	b480      	push	{r7}
    4046:	b083      	sub	sp, #12
    4048:	af00      	add	r7, sp, #0
    404a:	6078      	str	r0, [r7, #4]
    404c:	370c      	adds	r7, #12
    404e:	46bd      	mov	sp, r7
    4050:	f85d 7b04 	ldr.w	r7, [sp], #4
    4054:	4770      	bx	lr
    4056:	bf00      	nop

00004058 <s_33>:

/*task 9, servant 24, 25, 26, 27*/
void s_33(struct eventData * pxDataArray) 
{
    4058:	b480      	push	{r7}
    405a:	b083      	sub	sp, #12
    405c:	af00      	add	r7, sp, #0
    405e:	6078      	str	r0, [r7, #4]
}
    4060:	370c      	adds	r7, #12
    4062:	46bd      	mov	sp, r7
    4064:	f85d 7b04 	ldr.w	r7, [sp], #4
    4068:	4770      	bx	lr
    406a:	bf00      	nop

0000406c <s_34>:
void s_34(struct eventData * pxDataArray) 
{
    406c:	b580      	push	{r7, lr}
    406e:	b082      	sub	sp, #8
    4070:	af00      	add	r7, sp, #0
    4072:	6078      	str	r0, [r7, #4]
    nav_home(); // nav.h
    4074:	f010 ff00 	bl	14e78 <nav_home>
}
    4078:	3708      	adds	r7, #8
    407a:	46bd      	mov	sp, r7
    407c:	bd80      	pop	{r7, pc}
    407e:	bf00      	nop

00004080 <s_35>:
void s_35(struct eventData * pxDataArray) 
{
    4080:	b580      	push	{r7, lr}
    4082:	b082      	sub	sp, #8
    4084:	af00      	add	r7, sp, #0
    4086:	6078      	str	r0, [r7, #4]
    nav_update(); // nav.h
    4088:	f010 ff1c 	bl	14ec4 <nav_update>
}
    408c:	3708      	adds	r7, #8
    408e:	46bd      	mov	sp, r7
    4090:	bd80      	pop	{r7, pc}
    4092:	bf00      	nop

00004094 <s_36>:
void s_36(struct eventData * pxDataArray) 
{
    4094:	b580      	push	{r7, lr}
    4096:	b082      	sub	sp, #8
    4098:	af00      	add	r7, sp, #0
    409a:	6078      	str	r0, [r7, #4]
    course_pid_run(); // pid.h
    409c:	f00e f83c 	bl	12118 <course_pid_run>
}
    40a0:	3708      	adds	r7, #8
    40a2:	46bd      	mov	sp, r7
    40a4:	bd80      	pop	{r7, pc}
    40a6:	bf00      	nop

000040a8 <s_37>:
void s_37(struct eventData * pxDataArray) 
{}
    40a8:	b480      	push	{r7}
    40aa:	b083      	sub	sp, #12
    40ac:	af00      	add	r7, sp, #0
    40ae:	6078      	str	r0, [r7, #4]
    40b0:	370c      	adds	r7, #12
    40b2:	46bd      	mov	sp, r7
    40b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    40b8:	4770      	bx	lr
    40ba:	bf00      	nop

000040bc <s_38>:

/*task 10, servant 28, 29*/
void s_38(struct eventData * pxDataArray) 
{
    40bc:	b480      	push	{r7}
    40be:	b083      	sub	sp, #12
    40c0:	af00      	add	r7, sp, #0
    40c2:	6078      	str	r0, [r7, #4]
}
    40c4:	370c      	adds	r7, #12
    40c6:	46bd      	mov	sp, r7
    40c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    40cc:	4770      	bx	lr
    40ce:	bf00      	nop

000040d0 <s_39>:
void s_39(struct eventData * pxDataArray) 
{
    40d0:	b580      	push	{r7, lr}
    40d2:	b082      	sub	sp, #8
    40d4:	af00      	add	r7, sp, #0
    40d6:	6078      	str	r0, [r7, #4]
    altitude_pid_run(); // pid.h
    40d8:	f00e faa6 	bl	12628 <altitude_pid_run>
}
    40dc:	3708      	adds	r7, #8
    40de:	46bd      	mov	sp, r7
    40e0:	bd80      	pop	{r7, pc}
    40e2:	bf00      	nop

000040e4 <s_40>:
void s_40(struct eventData * pxDataArray) 
{}
    40e4:	b480      	push	{r7}
    40e6:	b083      	sub	sp, #12
    40e8:	af00      	add	r7, sp, #0
    40ea:	6078      	str	r0, [r7, #4]
    40ec:	370c      	adds	r7, #12
    40ee:	46bd      	mov	sp, r7
    40f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    40f4:	4770      	bx	lr
    40f6:	bf00      	nop

000040f8 <s_41>:

/*task 11, servant 30, 31*/
void s_41(struct eventData * pxDataArray) 
{
    40f8:	b480      	push	{r7}
    40fa:	b083      	sub	sp, #12
    40fc:	af00      	add	r7, sp, #0
    40fe:	6078      	str	r0, [r7, #4]
}
    4100:	370c      	adds	r7, #12
    4102:	46bd      	mov	sp, r7
    4104:	f85d 7b04 	ldr.w	r7, [sp], #4
    4108:	4770      	bx	lr
    410a:	bf00      	nop

0000410c <s_42>:
void s_42(struct eventData * pxDataArray) 
{
    410c:	b580      	push	{r7, lr}
    410e:	b082      	sub	sp, #8
    4110:	af00      	add	r7, sp, #0
    4112:	6078      	str	r0, [r7, #4]
    climb_pid_run(); // pid.h
    4114:	f00e f8b8 	bl	12288 <climb_pid_run>
}
    4118:	3708      	adds	r7, #8
    411a:	46bd      	mov	sp, r7
    411c:	bd80      	pop	{r7, pc}
    411e:	bf00      	nop

00004120 <s_43>:
void s_43(struct eventData * pxDataArray) 
{}
    4120:	b480      	push	{r7}
    4122:	b083      	sub	sp, #12
    4124:	af00      	add	r7, sp, #0
    4126:	6078      	str	r0, [r7, #4]
    4128:	370c      	adds	r7, #12
    412a:	46bd      	mov	sp, r7
    412c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4130:	4770      	bx	lr
    4132:	bf00      	nop

00004134 <s_44>:

/*task 12, servant 32, 33*/
void s_44(struct eventData * pxDataArray) 
{
    4134:	b480      	push	{r7}
    4136:	b083      	sub	sp, #12
    4138:	af00      	add	r7, sp, #0
    413a:	6078      	str	r0, [r7, #4]
}
    413c:	370c      	adds	r7, #12
    413e:	46bd      	mov	sp, r7
    4140:	f85d 7b04 	ldr.w	r7, [sp], #4
    4144:	4770      	bx	lr
    4146:	bf00      	nop

00004148 <s_45>:
void s_45(struct eventData * pxDataArray) 
{
    4148:	b580      	push	{r7, lr}
    414a:	b082      	sub	sp, #8
    414c:	af00      	add	r7, sp, #0
    414e:	6078      	str	r0, [r7, #4]
    // main.c
    send_boot();
    4150:	f003 fa84 	bl	765c <send_boot>
    send_attitude();
    4154:	f004 fa5a 	bl	860c <send_attitude>
    send_adc();
    4158:	f004 ff54 	bl	9004 <send_adc>
    send_settings();
    415c:	f005 f9e2 	bl	9524 <send_settings>
    send_desired();
    4160:	f005 fdec 	bl	9d3c <send_desired>
    send_bat();
    4164:	f006 fd22 	bl	abac <send_bat>
    send_climb();
    4168:	f007 f8de 	bl	b328 <send_climb>
    send_mode();
    416c:	f007 fe56 	bl	be1c <send_mode>
    send_debug();
    4170:	f008 f930 	bl	c3d4 <send_debug>
    send_nav_ref();
    4174:	f008 fc0c 	bl	c990 <send_nav_ref>
}
    4178:	3708      	adds	r7, #8
    417a:	46bd      	mov	sp, r7
    417c:	bd80      	pop	{r7, pc}
    417e:	bf00      	nop

00004180 <s_46>:
void s_46(struct eventData * pxDataArray) 
{}
    4180:	b480      	push	{r7}
    4182:	b083      	sub	sp, #12
    4184:	af00      	add	r7, sp, #0
    4186:	6078      	str	r0, [r7, #4]
    4188:	370c      	adds	r7, #12
    418a:	46bd      	mov	sp, r7
    418c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4190:	4770      	bx	lr
    4192:	bf00      	nop

00004194 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    4194:	b480      	push	{r7}
    4196:	b083      	sub	sp, #12
    4198:	af00      	add	r7, sp, #0
    419a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    419c:	687b      	ldr	r3, [r7, #4]
    419e:	f103 0208 	add.w	r2, r3, #8
    41a2:	687b      	ldr	r3, [r7, #4]
    41a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    41a6:	687b      	ldr	r3, [r7, #4]
    41a8:	f04f 32ff 	mov.w	r2, #4294967295
    41ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    41ae:	687b      	ldr	r3, [r7, #4]
    41b0:	f103 0208 	add.w	r2, r3, #8
    41b4:	687b      	ldr	r3, [r7, #4]
    41b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    41b8:	687b      	ldr	r3, [r7, #4]
    41ba:	f103 0208 	add.w	r2, r3, #8
    41be:	687b      	ldr	r3, [r7, #4]
    41c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    41c2:	687b      	ldr	r3, [r7, #4]
    41c4:	2200      	movs	r2, #0
    41c6:	601a      	str	r2, [r3, #0]
}
    41c8:	370c      	adds	r7, #12
    41ca:	46bd      	mov	sp, r7
    41cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    41d0:	4770      	bx	lr
    41d2:	bf00      	nop

000041d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    41d4:	b480      	push	{r7}
    41d6:	b083      	sub	sp, #12
    41d8:	af00      	add	r7, sp, #0
    41da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    41dc:	687b      	ldr	r3, [r7, #4]
    41de:	2200      	movs	r2, #0
    41e0:	611a      	str	r2, [r3, #16]
}
    41e2:	370c      	adds	r7, #12
    41e4:	46bd      	mov	sp, r7
    41e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    41ea:	4770      	bx	lr

000041ec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    41ec:	b480      	push	{r7}
    41ee:	b085      	sub	sp, #20
    41f0:	af00      	add	r7, sp, #0
    41f2:	6078      	str	r0, [r7, #4]
    41f4:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    41f6:	687b      	ldr	r3, [r7, #4]
    41f8:	685b      	ldr	r3, [r3, #4]
    41fa:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    41fc:	68fb      	ldr	r3, [r7, #12]
    41fe:	685a      	ldr	r2, [r3, #4]
    4200:	683b      	ldr	r3, [r7, #0]
    4202:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    4204:	687b      	ldr	r3, [r7, #4]
    4206:	685a      	ldr	r2, [r3, #4]
    4208:	683b      	ldr	r3, [r7, #0]
    420a:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    420c:	68fb      	ldr	r3, [r7, #12]
    420e:	685b      	ldr	r3, [r3, #4]
    4210:	683a      	ldr	r2, [r7, #0]
    4212:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    4214:	68fb      	ldr	r3, [r7, #12]
    4216:	683a      	ldr	r2, [r7, #0]
    4218:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    421a:	687b      	ldr	r3, [r7, #4]
    421c:	683a      	ldr	r2, [r7, #0]
    421e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    4220:	683b      	ldr	r3, [r7, #0]
    4222:	687a      	ldr	r2, [r7, #4]
    4224:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    4226:	687b      	ldr	r3, [r7, #4]
    4228:	681b      	ldr	r3, [r3, #0]
    422a:	1c5a      	adds	r2, r3, #1
    422c:	687b      	ldr	r3, [r7, #4]
    422e:	601a      	str	r2, [r3, #0]
}
    4230:	3714      	adds	r7, #20
    4232:	46bd      	mov	sp, r7
    4234:	f85d 7b04 	ldr.w	r7, [sp], #4
    4238:	4770      	bx	lr
    423a:	bf00      	nop

0000423c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    423c:	b480      	push	{r7}
    423e:	b085      	sub	sp, #20
    4240:	af00      	add	r7, sp, #0
    4242:	6078      	str	r0, [r7, #4]
    4244:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    4246:	683b      	ldr	r3, [r7, #0]
    4248:	681b      	ldr	r3, [r3, #0]
    424a:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    424c:	68bb      	ldr	r3, [r7, #8]
    424e:	f1b3 3fff 	cmp.w	r3, #4294967295
    4252:	d103      	bne.n	425c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    4254:	687b      	ldr	r3, [r7, #4]
    4256:	691b      	ldr	r3, [r3, #16]
    4258:	60fb      	str	r3, [r7, #12]
    425a:	e00c      	b.n	4276 <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    425c:	687b      	ldr	r3, [r7, #4]
    425e:	3308      	adds	r3, #8
    4260:	60fb      	str	r3, [r7, #12]
    4262:	e002      	b.n	426a <vListInsert+0x2e>
    4264:	68fb      	ldr	r3, [r7, #12]
    4266:	685b      	ldr	r3, [r3, #4]
    4268:	60fb      	str	r3, [r7, #12]
    426a:	68fb      	ldr	r3, [r7, #12]
    426c:	685b      	ldr	r3, [r3, #4]
    426e:	681a      	ldr	r2, [r3, #0]
    4270:	68bb      	ldr	r3, [r7, #8]
    4272:	429a      	cmp	r2, r3
    4274:	d9f6      	bls.n	4264 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    4276:	68fb      	ldr	r3, [r7, #12]
    4278:	685a      	ldr	r2, [r3, #4]
    427a:	683b      	ldr	r3, [r7, #0]
    427c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    427e:	683b      	ldr	r3, [r7, #0]
    4280:	685b      	ldr	r3, [r3, #4]
    4282:	683a      	ldr	r2, [r7, #0]
    4284:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    4286:	683b      	ldr	r3, [r7, #0]
    4288:	68fa      	ldr	r2, [r7, #12]
    428a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    428c:	68fb      	ldr	r3, [r7, #12]
    428e:	683a      	ldr	r2, [r7, #0]
    4290:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    4292:	683b      	ldr	r3, [r7, #0]
    4294:	687a      	ldr	r2, [r7, #4]
    4296:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    4298:	687b      	ldr	r3, [r7, #4]
    429a:	681b      	ldr	r3, [r3, #0]
    429c:	1c5a      	adds	r2, r3, #1
    429e:	687b      	ldr	r3, [r7, #4]
    42a0:	601a      	str	r2, [r3, #0]
}
    42a2:	3714      	adds	r7, #20
    42a4:	46bd      	mov	sp, r7
    42a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    42aa:	4770      	bx	lr

000042ac <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    42ac:	b480      	push	{r7}
    42ae:	b085      	sub	sp, #20
    42b0:	af00      	add	r7, sp, #0
    42b2:	6078      	str	r0, [r7, #4]
    xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    42b4:	687b      	ldr	r3, [r7, #4]
    42b6:	685b      	ldr	r3, [r3, #4]
    42b8:	687a      	ldr	r2, [r7, #4]
    42ba:	6892      	ldr	r2, [r2, #8]
    42bc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    42be:	687b      	ldr	r3, [r7, #4]
    42c0:	689b      	ldr	r3, [r3, #8]
    42c2:	687a      	ldr	r2, [r7, #4]
    42c4:	6852      	ldr	r2, [r2, #4]
    42c6:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    42c8:	687b      	ldr	r3, [r7, #4]
    42ca:	691b      	ldr	r3, [r3, #16]
    42cc:	60fb      	str	r3, [r7, #12]
	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    42ce:	68fb      	ldr	r3, [r7, #12]
    42d0:	685a      	ldr	r2, [r3, #4]
    42d2:	687b      	ldr	r3, [r7, #4]
    42d4:	429a      	cmp	r2, r3
    42d6:	d103      	bne.n	42e0 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    42d8:	687b      	ldr	r3, [r7, #4]
    42da:	689a      	ldr	r2, [r3, #8]
    42dc:	68fb      	ldr	r3, [r7, #12]
    42de:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    42e0:	687b      	ldr	r3, [r7, #4]
    42e2:	2200      	movs	r2, #0
    42e4:	611a      	str	r2, [r3, #16]
	(pxList->uxNumberOfItems)--;
    42e6:	68fb      	ldr	r3, [r7, #12]
    42e8:	681b      	ldr	r3, [r3, #0]
    42ea:	1e5a      	subs	r2, r3, #1
    42ec:	68fb      	ldr	r3, [r7, #12]
    42ee:	601a      	str	r2, [r3, #0]
}
    42f0:	3714      	adds	r7, #20
    42f2:	46bd      	mov	sp, r7
    42f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    42f8:	4770      	bx	lr
    42fa:	bf00      	nop

000042fc <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    42fc:	b580      	push	{r7, lr}
    42fe:	b084      	sub	sp, #16
    4300:	af00      	add	r7, sp, #0
    4302:	6078      	str	r0, [r7, #4]
    4304:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    4306:	2301      	movs	r3, #1
    4308:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    430a:	683b      	ldr	r3, [r7, #0]
    430c:	2b01      	cmp	r3, #1
    430e:	d00b      	beq.n	4328 <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4310:	687b      	ldr	r3, [r7, #4]
    4312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4314:	2b00      	cmp	r3, #0
    4316:	d001      	beq.n	431c <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    4318:	2300      	movs	r3, #0
    431a:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    431c:	687b      	ldr	r3, [r7, #4]
    431e:	691b      	ldr	r3, [r3, #16]
    4320:	2b00      	cmp	r3, #0
    4322:	d001      	beq.n	4328 <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    4324:	2300      	movs	r3, #0
    4326:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    4328:	68fb      	ldr	r3, [r7, #12]
    432a:	2b01      	cmp	r3, #1
    432c:	d12f      	bne.n	438e <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    432e:	687b      	ldr	r3, [r7, #4]
    4330:	681a      	ldr	r2, [r3, #0]
    4332:	687b      	ldr	r3, [r7, #4]
    4334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4336:	6879      	ldr	r1, [r7, #4]
    4338:	6c09      	ldr	r1, [r1, #64]	; 0x40
    433a:	fb01 f303 	mul.w	r3, r1, r3
    433e:	441a      	add	r2, r3
    4340:	687b      	ldr	r3, [r7, #4]
    4342:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    4344:	687b      	ldr	r3, [r7, #4]
    4346:	2200      	movs	r2, #0
    4348:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    434a:	687b      	ldr	r3, [r7, #4]
    434c:	681a      	ldr	r2, [r3, #0]
    434e:	687b      	ldr	r3, [r7, #4]
    4350:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    4352:	687b      	ldr	r3, [r7, #4]
    4354:	681a      	ldr	r2, [r3, #0]
    4356:	687b      	ldr	r3, [r7, #4]
    4358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    435a:	3b01      	subs	r3, #1
    435c:	6879      	ldr	r1, [r7, #4]
    435e:	6c09      	ldr	r1, [r1, #64]	; 0x40
    4360:	fb01 f303 	mul.w	r3, r1, r3
    4364:	441a      	add	r2, r3
    4366:	687b      	ldr	r3, [r7, #4]
    4368:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    436a:	687b      	ldr	r3, [r7, #4]
    436c:	f04f 32ff 	mov.w	r2, #4294967295
    4370:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    4372:	687b      	ldr	r3, [r7, #4]
    4374:	f04f 32ff 	mov.w	r2, #4294967295
    4378:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    437a:	687b      	ldr	r3, [r7, #4]
    437c:	3310      	adds	r3, #16
    437e:	4618      	mov	r0, r3
    4380:	f7ff ff08 	bl	4194 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    4384:	687b      	ldr	r3, [r7, #4]
    4386:	3324      	adds	r3, #36	; 0x24
    4388:	4618      	mov	r0, r3
    438a:	f7ff ff03 	bl	4194 <vListInitialise>
	}

	return xReturn;
    438e:	68fb      	ldr	r3, [r7, #12]
}
    4390:	4618      	mov	r0, r3
    4392:	3710      	adds	r7, #16
    4394:	46bd      	mov	sp, r7
    4396:	bd80      	pop	{r7, pc}

00004398 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    4398:	b580      	push	{r7, lr}
    439a:	b088      	sub	sp, #32
    439c:	af00      	add	r7, sp, #0
    439e:	60f8      	str	r0, [r7, #12]
    43a0:	60b9      	str	r1, [r7, #8]
    43a2:	4613      	mov	r3, r2
    43a4:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    43a6:	2300      	movs	r3, #0
    43a8:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    43aa:	68fb      	ldr	r3, [r7, #12]
    43ac:	2b00      	cmp	r3, #0
    43ae:	d026      	beq.n	43fe <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    43b0:	204c      	movs	r0, #76	; 0x4c
    43b2:	f001 fda7 	bl	5f04 <pvPortMalloc>
    43b6:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    43b8:	69bb      	ldr	r3, [r7, #24]
    43ba:	2b00      	cmp	r3, #0
    43bc:	d01f      	beq.n	43fe <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    43be:	68fb      	ldr	r3, [r7, #12]
    43c0:	68ba      	ldr	r2, [r7, #8]
    43c2:	fb02 f303 	mul.w	r3, r2, r3
    43c6:	3301      	adds	r3, #1
    43c8:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    43ca:	6978      	ldr	r0, [r7, #20]
    43cc:	f001 fd9a 	bl	5f04 <pvPortMalloc>
    43d0:	4602      	mov	r2, r0
    43d2:	69bb      	ldr	r3, [r7, #24]
    43d4:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    43d6:	69bb      	ldr	r3, [r7, #24]
    43d8:	681b      	ldr	r3, [r3, #0]
    43da:	2b00      	cmp	r3, #0
    43dc:	d00c      	beq.n	43f8 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    43de:	69bb      	ldr	r3, [r7, #24]
    43e0:	68fa      	ldr	r2, [r7, #12]
    43e2:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    43e4:	69bb      	ldr	r3, [r7, #24]
    43e6:	68ba      	ldr	r2, [r7, #8]
    43e8:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    43ea:	69b8      	ldr	r0, [r7, #24]
    43ec:	2101      	movs	r1, #1
    43ee:	f7ff ff85 	bl	42fc <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    43f2:	69bb      	ldr	r3, [r7, #24]
    43f4:	61fb      	str	r3, [r7, #28]
    43f6:	e002      	b.n	43fe <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    43f8:	69b8      	ldr	r0, [r7, #24]
    43fa:	f001 fe47 	bl	608c <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    43fe:	69fb      	ldr	r3, [r7, #28]
}
    4400:	4618      	mov	r0, r3
    4402:	3720      	adds	r7, #32
    4404:	46bd      	mov	sp, r7
    4406:	bd80      	pop	{r7, pc}

00004408 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    4408:	b580      	push	{r7, lr}
    440a:	b084      	sub	sp, #16
    440c:	af00      	add	r7, sp, #0
    440e:	4603      	mov	r3, r0
    4410:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    4412:	204c      	movs	r0, #76	; 0x4c
    4414:	f001 fd76 	bl	5f04 <pvPortMalloc>
    4418:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    441a:	68fb      	ldr	r3, [r7, #12]
    441c:	2b00      	cmp	r3, #0
    441e:	d02c      	beq.n	447a <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    4420:	68fb      	ldr	r3, [r7, #12]
    4422:	2200      	movs	r2, #0
    4424:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    4426:	68fb      	ldr	r3, [r7, #12]
    4428:	2200      	movs	r2, #0
    442a:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    442c:	68fb      	ldr	r3, [r7, #12]
    442e:	2200      	movs	r2, #0
    4430:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    4432:	68fb      	ldr	r3, [r7, #12]
    4434:	2200      	movs	r2, #0
    4436:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    4438:	68fb      	ldr	r3, [r7, #12]
    443a:	2200      	movs	r2, #0
    443c:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    443e:	68fb      	ldr	r3, [r7, #12]
    4440:	2201      	movs	r2, #1
    4442:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    4444:	68fb      	ldr	r3, [r7, #12]
    4446:	2200      	movs	r2, #0
    4448:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    444a:	68fb      	ldr	r3, [r7, #12]
    444c:	f04f 32ff 	mov.w	r2, #4294967295
    4450:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    4452:	68fb      	ldr	r3, [r7, #12]
    4454:	f04f 32ff 	mov.w	r2, #4294967295
    4458:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    445a:	68fb      	ldr	r3, [r7, #12]
    445c:	3310      	adds	r3, #16
    445e:	4618      	mov	r0, r3
    4460:	f7ff fe98 	bl	4194 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    4464:	68fb      	ldr	r3, [r7, #12]
    4466:	3324      	adds	r3, #36	; 0x24
    4468:	4618      	mov	r0, r3
    446a:	f7ff fe93 	bl	4194 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    446e:	68f8      	ldr	r0, [r7, #12]
    4470:	2100      	movs	r1, #0
    4472:	2200      	movs	r2, #0
    4474:	2300      	movs	r3, #0
    4476:	f000 f81d 	bl	44b4 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    447a:	68fb      	ldr	r3, [r7, #12]
	}
    447c:	4618      	mov	r0, r3
    447e:	3710      	adds	r7, #16
    4480:	46bd      	mov	sp, r7
    4482:	bd80      	pop	{r7, pc}

00004484 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    4484:	b580      	push	{r7, lr}
    4486:	b084      	sub	sp, #16
    4488:	af00      	add	r7, sp, #0
    448a:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    448c:	f001 fcc0 	bl	5e10 <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    4490:	687b      	ldr	r3, [r7, #4]
    4492:	681b      	ldr	r3, [r3, #0]
    4494:	2b00      	cmp	r3, #0
    4496:	d103      	bne.n	44a0 <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    4498:	687b      	ldr	r3, [r7, #4]
    449a:	685b      	ldr	r3, [r3, #4]
    449c:	60fb      	str	r3, [r7, #12]
    449e:	e001      	b.n	44a4 <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    44a0:	2300      	movs	r3, #0
    44a2:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    44a4:	f001 fcca 	bl	5e3c <vPortExitCritical>
		
		return pxReturn;
    44a8:	68fb      	ldr	r3, [r7, #12]
	}
    44aa:	4618      	mov	r0, r3
    44ac:	3710      	adds	r7, #16
    44ae:	46bd      	mov	sp, r7
    44b0:	bd80      	pop	{r7, pc}
    44b2:	bf00      	nop

000044b4 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    44b4:	b580      	push	{r7, lr}
    44b6:	b088      	sub	sp, #32
    44b8:	af00      	add	r7, sp, #0
    44ba:	60f8      	str	r0, [r7, #12]
    44bc:	60b9      	str	r1, [r7, #8]
    44be:	607a      	str	r2, [r7, #4]
    44c0:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    44c2:	2300      	movs	r3, #0
    44c4:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    44c6:	f001 fca3 	bl	5e10 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    44ca:	68fb      	ldr	r3, [r7, #12]
    44cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    44ce:	68fb      	ldr	r3, [r7, #12]
    44d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    44d2:	429a      	cmp	r2, r3
    44d4:	d216      	bcs.n	4504 <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    44d6:	68f8      	ldr	r0, [r7, #12]
    44d8:	68b9      	ldr	r1, [r7, #8]
    44da:	683a      	ldr	r2, [r7, #0]
    44dc:	f000 f9d6 	bl	488c <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    44e0:	68fb      	ldr	r3, [r7, #12]
    44e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    44e4:	2b00      	cmp	r3, #0
    44e6:	d009      	beq.n	44fc <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    44e8:	68fb      	ldr	r3, [r7, #12]
    44ea:	3324      	adds	r3, #36	; 0x24
    44ec:	4618      	mov	r0, r3
    44ee:	f001 f905 	bl	56fc <xTaskRemoveFromEventList>
    44f2:	4603      	mov	r3, r0
    44f4:	2b01      	cmp	r3, #1
    44f6:	d101      	bne.n	44fc <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    44f8:	f001 fc7c 	bl	5df4 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    44fc:	f001 fc9e 	bl	5e3c <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    4500:	2301      	movs	r3, #1
    4502:	e059      	b.n	45b8 <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    4504:	687b      	ldr	r3, [r7, #4]
    4506:	2b00      	cmp	r3, #0
    4508:	d103      	bne.n	4512 <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    450a:	f001 fc97 	bl	5e3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    450e:	2300      	movs	r3, #0
    4510:	e052      	b.n	45b8 <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    4512:	69fb      	ldr	r3, [r7, #28]
    4514:	2b00      	cmp	r3, #0
    4516:	d106      	bne.n	4526 <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    4518:	f107 0314 	add.w	r3, r7, #20
    451c:	4618      	mov	r0, r3
    451e:	f001 f945 	bl	57ac <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4522:	2301      	movs	r3, #1
    4524:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    4526:	f001 fc89 	bl	5e3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    452a:	f000 fe93 	bl	5254 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    452e:	f001 fc6f 	bl	5e10 <vPortEnterCritical>
    4532:	68fb      	ldr	r3, [r7, #12]
    4534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4536:	f1b3 3fff 	cmp.w	r3, #4294967295
    453a:	d102      	bne.n	4542 <xQueueGenericSend+0x8e>
    453c:	68fb      	ldr	r3, [r7, #12]
    453e:	2200      	movs	r2, #0
    4540:	645a      	str	r2, [r3, #68]	; 0x44
    4542:	68fb      	ldr	r3, [r7, #12]
    4544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4546:	f1b3 3fff 	cmp.w	r3, #4294967295
    454a:	d102      	bne.n	4552 <xQueueGenericSend+0x9e>
    454c:	68fb      	ldr	r3, [r7, #12]
    454e:	2200      	movs	r2, #0
    4550:	649a      	str	r2, [r3, #72]	; 0x48
    4552:	f001 fc73 	bl	5e3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4556:	f107 0214 	add.w	r2, r7, #20
    455a:	1d3b      	adds	r3, r7, #4
    455c:	4610      	mov	r0, r2
    455e:	4619      	mov	r1, r3
    4560:	f001 f93c 	bl	57dc <xTaskCheckForTimeOut>
    4564:	4603      	mov	r3, r0
    4566:	2b00      	cmp	r3, #0
    4568:	d11e      	bne.n	45a8 <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    456a:	68f8      	ldr	r0, [r7, #12]
    456c:	f000 fa86 	bl	4a7c <prvIsQueueFull>
    4570:	4603      	mov	r3, r0
    4572:	2b00      	cmp	r3, #0
    4574:	d012      	beq.n	459c <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    4576:	68fb      	ldr	r3, [r7, #12]
    4578:	f103 0210 	add.w	r2, r3, #16
    457c:	687b      	ldr	r3, [r7, #4]
    457e:	4610      	mov	r0, r2
    4580:	4619      	mov	r1, r3
    4582:	f001 f883 	bl	568c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    4586:	68f8      	ldr	r0, [r7, #12]
    4588:	f000 fa02 	bl	4990 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    458c:	f000 fe74 	bl	5278 <xTaskResumeAll>
    4590:	4603      	mov	r3, r0
    4592:	2b00      	cmp	r3, #0
    4594:	d10f      	bne.n	45b6 <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    4596:	f001 fc2d 	bl	5df4 <vPortYieldFromISR>
    459a:	e00c      	b.n	45b6 <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    459c:	68f8      	ldr	r0, [r7, #12]
    459e:	f000 f9f7 	bl	4990 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    45a2:	f000 fe69 	bl	5278 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    45a6:	e78e      	b.n	44c6 <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    45a8:	68f8      	ldr	r0, [r7, #12]
    45aa:	f000 f9f1 	bl	4990 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    45ae:	f000 fe63 	bl	5278 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    45b2:	2300      	movs	r3, #0
    45b4:	e000      	b.n	45b8 <xQueueGenericSend+0x104>
		}
	}
    45b6:	e786      	b.n	44c6 <xQueueGenericSend+0x12>
}
    45b8:	4618      	mov	r0, r3
    45ba:	3720      	adds	r7, #32
    45bc:	46bd      	mov	sp, r7
    45be:	bd80      	pop	{r7, pc}

000045c0 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    45c0:	b580      	push	{r7, lr}
    45c2:	b086      	sub	sp, #24
    45c4:	af00      	add	r7, sp, #0
    45c6:	60f8      	str	r0, [r7, #12]
    45c8:	60b9      	str	r1, [r7, #8]
    45ca:	607a      	str	r2, [r7, #4]
    45cc:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    45ce:	2300      	movs	r3, #0
    45d0:	613b      	str	r3, [r7, #16]
    45d2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    45d6:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    45da:	68fb      	ldr	r3, [r7, #12]
    45dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    45de:	68fb      	ldr	r3, [r7, #12]
    45e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    45e2:	429a      	cmp	r2, r3
    45e4:	d221      	bcs.n	462a <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    45e6:	68f8      	ldr	r0, [r7, #12]
    45e8:	68b9      	ldr	r1, [r7, #8]
    45ea:	683a      	ldr	r2, [r7, #0]
    45ec:	f000 f94e 	bl	488c <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    45f0:	68fb      	ldr	r3, [r7, #12]
    45f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    45f4:	f1b3 3fff 	cmp.w	r3, #4294967295
    45f8:	d10f      	bne.n	461a <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    45fa:	68fb      	ldr	r3, [r7, #12]
    45fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    45fe:	2b00      	cmp	r3, #0
    4600:	d010      	beq.n	4624 <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4602:	68fb      	ldr	r3, [r7, #12]
    4604:	3324      	adds	r3, #36	; 0x24
    4606:	4618      	mov	r0, r3
    4608:	f001 f878 	bl	56fc <xTaskRemoveFromEventList>
    460c:	4603      	mov	r3, r0
    460e:	2b00      	cmp	r3, #0
    4610:	d008      	beq.n	4624 <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    4612:	687b      	ldr	r3, [r7, #4]
    4614:	2201      	movs	r2, #1
    4616:	601a      	str	r2, [r3, #0]
    4618:	e004      	b.n	4624 <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    461a:	68fb      	ldr	r3, [r7, #12]
    461c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    461e:	1c5a      	adds	r2, r3, #1
    4620:	68fb      	ldr	r3, [r7, #12]
    4622:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    4624:	2301      	movs	r3, #1
    4626:	617b      	str	r3, [r7, #20]
    4628:	e001      	b.n	462e <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    462a:	2300      	movs	r3, #0
    462c:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    462e:	f04f 0000 	mov.w	r0, #0
    4632:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4636:	697b      	ldr	r3, [r7, #20]
}
    4638:	4618      	mov	r0, r3
    463a:	3718      	adds	r7, #24
    463c:	46bd      	mov	sp, r7
    463e:	bd80      	pop	{r7, pc}

00004640 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    4640:	b580      	push	{r7, lr}
    4642:	b088      	sub	sp, #32
    4644:	af00      	add	r7, sp, #0
    4646:	60f8      	str	r0, [r7, #12]
    4648:	60b9      	str	r1, [r7, #8]
    464a:	607a      	str	r2, [r7, #4]
    464c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    464e:	2300      	movs	r3, #0
    4650:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    4652:	f001 fbdd 	bl	5e10 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    4656:	68fb      	ldr	r3, [r7, #12]
    4658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    465a:	2b00      	cmp	r3, #0
    465c:	d03b      	beq.n	46d6 <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    465e:	68fb      	ldr	r3, [r7, #12]
    4660:	68db      	ldr	r3, [r3, #12]
    4662:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    4664:	68f8      	ldr	r0, [r7, #12]
    4666:	68b9      	ldr	r1, [r7, #8]
    4668:	f000 f96c 	bl	4944 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    466c:	683b      	ldr	r3, [r7, #0]
    466e:	2b00      	cmp	r3, #0
    4670:	d11c      	bne.n	46ac <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    4672:	68fb      	ldr	r3, [r7, #12]
    4674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4676:	1e5a      	subs	r2, r3, #1
    4678:	68fb      	ldr	r3, [r7, #12]
    467a:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    467c:	68fb      	ldr	r3, [r7, #12]
    467e:	681b      	ldr	r3, [r3, #0]
    4680:	2b00      	cmp	r3, #0
    4682:	d104      	bne.n	468e <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    4684:	f001 fa5c 	bl	5b40 <xTaskGetCurrentTaskHandle>
    4688:	4602      	mov	r2, r0
    468a:	68fb      	ldr	r3, [r7, #12]
    468c:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    468e:	68fb      	ldr	r3, [r7, #12]
    4690:	691b      	ldr	r3, [r3, #16]
    4692:	2b00      	cmp	r3, #0
    4694:	d01b      	beq.n	46ce <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    4696:	68fb      	ldr	r3, [r7, #12]
    4698:	3310      	adds	r3, #16
    469a:	4618      	mov	r0, r3
    469c:	f001 f82e 	bl	56fc <xTaskRemoveFromEventList>
    46a0:	4603      	mov	r3, r0
    46a2:	2b01      	cmp	r3, #1
    46a4:	d113      	bne.n	46ce <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    46a6:	f001 fba5 	bl	5df4 <vPortYieldFromISR>
    46aa:	e010      	b.n	46ce <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    46ac:	68fb      	ldr	r3, [r7, #12]
    46ae:	69ba      	ldr	r2, [r7, #24]
    46b0:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    46b2:	68fb      	ldr	r3, [r7, #12]
    46b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    46b6:	2b00      	cmp	r3, #0
    46b8:	d009      	beq.n	46ce <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    46ba:	68fb      	ldr	r3, [r7, #12]
    46bc:	3324      	adds	r3, #36	; 0x24
    46be:	4618      	mov	r0, r3
    46c0:	f001 f81c 	bl	56fc <xTaskRemoveFromEventList>
    46c4:	4603      	mov	r3, r0
    46c6:	2b00      	cmp	r3, #0
    46c8:	d001      	beq.n	46ce <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    46ca:	f001 fb93 	bl	5df4 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    46ce:	f001 fbb5 	bl	5e3c <vPortExitCritical>
				return pdPASS;
    46d2:	2301      	movs	r3, #1
    46d4:	e066      	b.n	47a4 <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    46d6:	687b      	ldr	r3, [r7, #4]
    46d8:	2b00      	cmp	r3, #0
    46da:	d103      	bne.n	46e4 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    46dc:	f001 fbae 	bl	5e3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    46e0:	2300      	movs	r3, #0
    46e2:	e05f      	b.n	47a4 <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    46e4:	69fb      	ldr	r3, [r7, #28]
    46e6:	2b00      	cmp	r3, #0
    46e8:	d106      	bne.n	46f8 <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    46ea:	f107 0310 	add.w	r3, r7, #16
    46ee:	4618      	mov	r0, r3
    46f0:	f001 f85c 	bl	57ac <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    46f4:	2301      	movs	r3, #1
    46f6:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    46f8:	f001 fba0 	bl	5e3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    46fc:	f000 fdaa 	bl	5254 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    4700:	f001 fb86 	bl	5e10 <vPortEnterCritical>
    4704:	68fb      	ldr	r3, [r7, #12]
    4706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4708:	f1b3 3fff 	cmp.w	r3, #4294967295
    470c:	d102      	bne.n	4714 <xQueueGenericReceive+0xd4>
    470e:	68fb      	ldr	r3, [r7, #12]
    4710:	2200      	movs	r2, #0
    4712:	645a      	str	r2, [r3, #68]	; 0x44
    4714:	68fb      	ldr	r3, [r7, #12]
    4716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4718:	f1b3 3fff 	cmp.w	r3, #4294967295
    471c:	d102      	bne.n	4724 <xQueueGenericReceive+0xe4>
    471e:	68fb      	ldr	r3, [r7, #12]
    4720:	2200      	movs	r2, #0
    4722:	649a      	str	r2, [r3, #72]	; 0x48
    4724:	f001 fb8a 	bl	5e3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4728:	f107 0210 	add.w	r2, r7, #16
    472c:	1d3b      	adds	r3, r7, #4
    472e:	4610      	mov	r0, r2
    4730:	4619      	mov	r1, r3
    4732:	f001 f853 	bl	57dc <xTaskCheckForTimeOut>
    4736:	4603      	mov	r3, r0
    4738:	2b00      	cmp	r3, #0
    473a:	d12b      	bne.n	4794 <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    473c:	68f8      	ldr	r0, [r7, #12]
    473e:	f000 f973 	bl	4a28 <prvIsQueueEmpty>
    4742:	4603      	mov	r3, r0
    4744:	2b00      	cmp	r3, #0
    4746:	d01f      	beq.n	4788 <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4748:	68fb      	ldr	r3, [r7, #12]
    474a:	681b      	ldr	r3, [r3, #0]
    474c:	2b00      	cmp	r3, #0
    474e:	d108      	bne.n	4762 <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    4750:	f001 fb5e 	bl	5e10 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    4754:	68fb      	ldr	r3, [r7, #12]
    4756:	685b      	ldr	r3, [r3, #4]
    4758:	4618      	mov	r0, r3
    475a:	f001 fa01 	bl	5b60 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    475e:	f001 fb6d 	bl	5e3c <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    4762:	68fb      	ldr	r3, [r7, #12]
    4764:	f103 0224 	add.w	r2, r3, #36	; 0x24
    4768:	687b      	ldr	r3, [r7, #4]
    476a:	4610      	mov	r0, r2
    476c:	4619      	mov	r1, r3
    476e:	f000 ff8d 	bl	568c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    4772:	68f8      	ldr	r0, [r7, #12]
    4774:	f000 f90c 	bl	4990 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    4778:	f000 fd7e 	bl	5278 <xTaskResumeAll>
    477c:	4603      	mov	r3, r0
    477e:	2b00      	cmp	r3, #0
    4780:	d10f      	bne.n	47a2 <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    4782:	f001 fb37 	bl	5df4 <vPortYieldFromISR>
    4786:	e00c      	b.n	47a2 <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    4788:	68f8      	ldr	r0, [r7, #12]
    478a:	f000 f901 	bl	4990 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    478e:	f000 fd73 	bl	5278 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    4792:	e75e      	b.n	4652 <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    4794:	68f8      	ldr	r0, [r7, #12]
    4796:	f000 f8fb 	bl	4990 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    479a:	f000 fd6d 	bl	5278 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    479e:	2300      	movs	r3, #0
    47a0:	e000      	b.n	47a4 <xQueueGenericReceive+0x164>
		}
	}
    47a2:	e756      	b.n	4652 <xQueueGenericReceive+0x12>
}
    47a4:	4618      	mov	r0, r3
    47a6:	3720      	adds	r7, #32
    47a8:	46bd      	mov	sp, r7
    47aa:	bd80      	pop	{r7, pc}

000047ac <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    47ac:	b580      	push	{r7, lr}
    47ae:	b086      	sub	sp, #24
    47b0:	af00      	add	r7, sp, #0
    47b2:	60f8      	str	r0, [r7, #12]
    47b4:	60b9      	str	r1, [r7, #8]
    47b6:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    47b8:	2300      	movs	r3, #0
    47ba:	613b      	str	r3, [r7, #16]
    47bc:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    47c0:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    47c4:	68fb      	ldr	r3, [r7, #12]
    47c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    47c8:	2b00      	cmp	r3, #0
    47ca:	d025      	beq.n	4818 <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    47cc:	68f8      	ldr	r0, [r7, #12]
    47ce:	68b9      	ldr	r1, [r7, #8]
    47d0:	f000 f8b8 	bl	4944 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    47d4:	68fb      	ldr	r3, [r7, #12]
    47d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    47d8:	1e5a      	subs	r2, r3, #1
    47da:	68fb      	ldr	r3, [r7, #12]
    47dc:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    47de:	68fb      	ldr	r3, [r7, #12]
    47e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    47e2:	f1b3 3fff 	cmp.w	r3, #4294967295
    47e6:	d10f      	bne.n	4808 <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    47e8:	68fb      	ldr	r3, [r7, #12]
    47ea:	691b      	ldr	r3, [r3, #16]
    47ec:	2b00      	cmp	r3, #0
    47ee:	d010      	beq.n	4812 <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    47f0:	68fb      	ldr	r3, [r7, #12]
    47f2:	3310      	adds	r3, #16
    47f4:	4618      	mov	r0, r3
    47f6:	f000 ff81 	bl	56fc <xTaskRemoveFromEventList>
    47fa:	4603      	mov	r3, r0
    47fc:	2b00      	cmp	r3, #0
    47fe:	d008      	beq.n	4812 <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    4800:	687b      	ldr	r3, [r7, #4]
    4802:	2201      	movs	r2, #1
    4804:	601a      	str	r2, [r3, #0]
    4806:	e004      	b.n	4812 <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    4808:	68fb      	ldr	r3, [r7, #12]
    480a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    480c:	1c5a      	adds	r2, r3, #1
    480e:	68fb      	ldr	r3, [r7, #12]
    4810:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    4812:	2301      	movs	r3, #1
    4814:	617b      	str	r3, [r7, #20]
    4816:	e001      	b.n	481c <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    4818:	2300      	movs	r3, #0
    481a:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    481c:	f04f 0000 	mov.w	r0, #0
    4820:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4824:	697b      	ldr	r3, [r7, #20]
}
    4826:	4618      	mov	r0, r3
    4828:	3718      	adds	r7, #24
    482a:	46bd      	mov	sp, r7
    482c:	bd80      	pop	{r7, pc}
    482e:	bf00      	nop

00004830 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    4830:	b580      	push	{r7, lr}
    4832:	b084      	sub	sp, #16
    4834:	af00      	add	r7, sp, #0
    4836:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    4838:	f001 faea 	bl	5e10 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    483c:	687b      	ldr	r3, [r7, #4]
    483e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4840:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4842:	f001 fafb 	bl	5e3c <vPortExitCritical>

	return uxReturn;
    4846:	68fb      	ldr	r3, [r7, #12]
}
    4848:	4618      	mov	r0, r3
    484a:	3710      	adds	r7, #16
    484c:	46bd      	mov	sp, r7
    484e:	bd80      	pop	{r7, pc}

00004850 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    4850:	b480      	push	{r7}
    4852:	b085      	sub	sp, #20
    4854:	af00      	add	r7, sp, #0
    4856:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    4858:	687b      	ldr	r3, [r7, #4]
    485a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    485c:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    485e:	68fb      	ldr	r3, [r7, #12]
}
    4860:	4618      	mov	r0, r3
    4862:	3714      	adds	r7, #20
    4864:	46bd      	mov	sp, r7
    4866:	f85d 7b04 	ldr.w	r7, [sp], #4
    486a:	4770      	bx	lr

0000486c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    486c:	b580      	push	{r7, lr}
    486e:	b082      	sub	sp, #8
    4870:	af00      	add	r7, sp, #0
    4872:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    4874:	687b      	ldr	r3, [r7, #4]
    4876:	681b      	ldr	r3, [r3, #0]
    4878:	4618      	mov	r0, r3
    487a:	f001 fc07 	bl	608c <vPortFree>
	vPortFree( pxQueue );
    487e:	6878      	ldr	r0, [r7, #4]
    4880:	f001 fc04 	bl	608c <vPortFree>
}
    4884:	3708      	adds	r7, #8
    4886:	46bd      	mov	sp, r7
    4888:	bd80      	pop	{r7, pc}
    488a:	bf00      	nop

0000488c <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    488c:	b580      	push	{r7, lr}
    488e:	b084      	sub	sp, #16
    4890:	af00      	add	r7, sp, #0
    4892:	60f8      	str	r0, [r7, #12]
    4894:	60b9      	str	r1, [r7, #8]
    4896:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    4898:	68fb      	ldr	r3, [r7, #12]
    489a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    489c:	2b00      	cmp	r3, #0
    489e:	d10c      	bne.n	48ba <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    48a0:	68fb      	ldr	r3, [r7, #12]
    48a2:	681b      	ldr	r3, [r3, #0]
    48a4:	2b00      	cmp	r3, #0
    48a6:	d145      	bne.n	4934 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    48a8:	68fb      	ldr	r3, [r7, #12]
    48aa:	685b      	ldr	r3, [r3, #4]
    48ac:	4618      	mov	r0, r3
    48ae:	f001 f9bb 	bl	5c28 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    48b2:	68fb      	ldr	r3, [r7, #12]
    48b4:	2200      	movs	r2, #0
    48b6:	605a      	str	r2, [r3, #4]
    48b8:	e03c      	b.n	4934 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    48ba:	687b      	ldr	r3, [r7, #4]
    48bc:	2b00      	cmp	r3, #0
    48be:	d11a      	bne.n	48f6 <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    48c0:	68fb      	ldr	r3, [r7, #12]
    48c2:	689a      	ldr	r2, [r3, #8]
    48c4:	68fb      	ldr	r3, [r7, #12]
    48c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    48c8:	4610      	mov	r0, r2
    48ca:	68b9      	ldr	r1, [r7, #8]
    48cc:	461a      	mov	r2, r3
    48ce:	f014 f849 	bl	18964 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    48d2:	68fb      	ldr	r3, [r7, #12]
    48d4:	689a      	ldr	r2, [r3, #8]
    48d6:	68fb      	ldr	r3, [r7, #12]
    48d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    48da:	441a      	add	r2, r3
    48dc:	68fb      	ldr	r3, [r7, #12]
    48de:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    48e0:	68fb      	ldr	r3, [r7, #12]
    48e2:	689a      	ldr	r2, [r3, #8]
    48e4:	68fb      	ldr	r3, [r7, #12]
    48e6:	685b      	ldr	r3, [r3, #4]
    48e8:	429a      	cmp	r2, r3
    48ea:	d323      	bcc.n	4934 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    48ec:	68fb      	ldr	r3, [r7, #12]
    48ee:	681a      	ldr	r2, [r3, #0]
    48f0:	68fb      	ldr	r3, [r7, #12]
    48f2:	609a      	str	r2, [r3, #8]
    48f4:	e01e      	b.n	4934 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    48f6:	68fb      	ldr	r3, [r7, #12]
    48f8:	68da      	ldr	r2, [r3, #12]
    48fa:	68fb      	ldr	r3, [r7, #12]
    48fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    48fe:	4610      	mov	r0, r2
    4900:	68b9      	ldr	r1, [r7, #8]
    4902:	461a      	mov	r2, r3
    4904:	f014 f82e 	bl	18964 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    4908:	68fb      	ldr	r3, [r7, #12]
    490a:	68da      	ldr	r2, [r3, #12]
    490c:	68fb      	ldr	r3, [r7, #12]
    490e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4910:	425b      	negs	r3, r3
    4912:	441a      	add	r2, r3
    4914:	68fb      	ldr	r3, [r7, #12]
    4916:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    4918:	68fb      	ldr	r3, [r7, #12]
    491a:	68da      	ldr	r2, [r3, #12]
    491c:	68fb      	ldr	r3, [r7, #12]
    491e:	681b      	ldr	r3, [r3, #0]
    4920:	429a      	cmp	r2, r3
    4922:	d207      	bcs.n	4934 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    4924:	68fb      	ldr	r3, [r7, #12]
    4926:	685a      	ldr	r2, [r3, #4]
    4928:	68fb      	ldr	r3, [r7, #12]
    492a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    492c:	425b      	negs	r3, r3
    492e:	441a      	add	r2, r3
    4930:	68fb      	ldr	r3, [r7, #12]
    4932:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    4934:	68fb      	ldr	r3, [r7, #12]
    4936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4938:	1c5a      	adds	r2, r3, #1
    493a:	68fb      	ldr	r3, [r7, #12]
    493c:	639a      	str	r2, [r3, #56]	; 0x38
}
    493e:	3710      	adds	r7, #16
    4940:	46bd      	mov	sp, r7
    4942:	bd80      	pop	{r7, pc}

00004944 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    4944:	b580      	push	{r7, lr}
    4946:	b082      	sub	sp, #8
    4948:	af00      	add	r7, sp, #0
    494a:	6078      	str	r0, [r7, #4]
    494c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    494e:	687b      	ldr	r3, [r7, #4]
    4950:	681b      	ldr	r3, [r3, #0]
    4952:	2b00      	cmp	r3, #0
    4954:	d019      	beq.n	498a <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    4956:	687b      	ldr	r3, [r7, #4]
    4958:	68da      	ldr	r2, [r3, #12]
    495a:	687b      	ldr	r3, [r7, #4]
    495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    495e:	441a      	add	r2, r3
    4960:	687b      	ldr	r3, [r7, #4]
    4962:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    4964:	687b      	ldr	r3, [r7, #4]
    4966:	68da      	ldr	r2, [r3, #12]
    4968:	687b      	ldr	r3, [r7, #4]
    496a:	685b      	ldr	r3, [r3, #4]
    496c:	429a      	cmp	r2, r3
    496e:	d303      	bcc.n	4978 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    4970:	687b      	ldr	r3, [r7, #4]
    4972:	681a      	ldr	r2, [r3, #0]
    4974:	687b      	ldr	r3, [r7, #4]
    4976:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    4978:	687b      	ldr	r3, [r7, #4]
    497a:	68da      	ldr	r2, [r3, #12]
    497c:	687b      	ldr	r3, [r7, #4]
    497e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4980:	6838      	ldr	r0, [r7, #0]
    4982:	4611      	mov	r1, r2
    4984:	461a      	mov	r2, r3
    4986:	f013 ffed 	bl	18964 <memcpy>
	}
}
    498a:	3708      	adds	r7, #8
    498c:	46bd      	mov	sp, r7
    498e:	bd80      	pop	{r7, pc}

00004990 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    4990:	b580      	push	{r7, lr}
    4992:	b082      	sub	sp, #8
    4994:	af00      	add	r7, sp, #0
    4996:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    4998:	f001 fa3a 	bl	5e10 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    499c:	e014      	b.n	49c8 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    499e:	687b      	ldr	r3, [r7, #4]
    49a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    49a2:	2b00      	cmp	r3, #0
    49a4:	d00f      	beq.n	49c6 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    49a6:	687b      	ldr	r3, [r7, #4]
    49a8:	3324      	adds	r3, #36	; 0x24
    49aa:	4618      	mov	r0, r3
    49ac:	f000 fea6 	bl	56fc <xTaskRemoveFromEventList>
    49b0:	4603      	mov	r3, r0
    49b2:	2b00      	cmp	r3, #0
    49b4:	d001      	beq.n	49ba <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    49b6:	f000 ff5d 	bl	5874 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    49ba:	687b      	ldr	r3, [r7, #4]
    49bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    49be:	1e5a      	subs	r2, r3, #1
    49c0:	687b      	ldr	r3, [r7, #4]
    49c2:	649a      	str	r2, [r3, #72]	; 0x48
    49c4:	e000      	b.n	49c8 <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    49c6:	e003      	b.n	49d0 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    49c8:	687b      	ldr	r3, [r7, #4]
    49ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    49cc:	2b00      	cmp	r3, #0
    49ce:	dce6      	bgt.n	499e <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    49d0:	687b      	ldr	r3, [r7, #4]
    49d2:	f04f 32ff 	mov.w	r2, #4294967295
    49d6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    49d8:	f001 fa30 	bl	5e3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    49dc:	f001 fa18 	bl	5e10 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    49e0:	e014      	b.n	4a0c <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    49e2:	687b      	ldr	r3, [r7, #4]
    49e4:	691b      	ldr	r3, [r3, #16]
    49e6:	2b00      	cmp	r3, #0
    49e8:	d00f      	beq.n	4a0a <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    49ea:	687b      	ldr	r3, [r7, #4]
    49ec:	3310      	adds	r3, #16
    49ee:	4618      	mov	r0, r3
    49f0:	f000 fe84 	bl	56fc <xTaskRemoveFromEventList>
    49f4:	4603      	mov	r3, r0
    49f6:	2b00      	cmp	r3, #0
    49f8:	d001      	beq.n	49fe <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    49fa:	f000 ff3b 	bl	5874 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    49fe:	687b      	ldr	r3, [r7, #4]
    4a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4a02:	1e5a      	subs	r2, r3, #1
    4a04:	687b      	ldr	r3, [r7, #4]
    4a06:	645a      	str	r2, [r3, #68]	; 0x44
    4a08:	e000      	b.n	4a0c <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    4a0a:	e003      	b.n	4a14 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    4a0c:	687b      	ldr	r3, [r7, #4]
    4a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4a10:	2b00      	cmp	r3, #0
    4a12:	dce6      	bgt.n	49e2 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    4a14:	687b      	ldr	r3, [r7, #4]
    4a16:	f04f 32ff 	mov.w	r2, #4294967295
    4a1a:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    4a1c:	f001 fa0e 	bl	5e3c <vPortExitCritical>
}
    4a20:	3708      	adds	r7, #8
    4a22:	46bd      	mov	sp, r7
    4a24:	bd80      	pop	{r7, pc}
    4a26:	bf00      	nop

00004a28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    4a28:	b580      	push	{r7, lr}
    4a2a:	b084      	sub	sp, #16
    4a2c:	af00      	add	r7, sp, #0
    4a2e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    4a30:	f001 f9ee 	bl	5e10 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4a34:	687b      	ldr	r3, [r7, #4]
    4a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4a38:	2b00      	cmp	r3, #0
    4a3a:	bf14      	ite	ne
    4a3c:	2300      	movne	r3, #0
    4a3e:	2301      	moveq	r3, #1
    4a40:	b2db      	uxtb	r3, r3
    4a42:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4a44:	f001 f9fa 	bl	5e3c <vPortExitCritical>

	return xReturn;
    4a48:	68fb      	ldr	r3, [r7, #12]
}
    4a4a:	4618      	mov	r0, r3
    4a4c:	3710      	adds	r7, #16
    4a4e:	46bd      	mov	sp, r7
    4a50:	bd80      	pop	{r7, pc}
    4a52:	bf00      	nop

00004a54 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    4a54:	b480      	push	{r7}
    4a56:	b085      	sub	sp, #20
    4a58:	af00      	add	r7, sp, #0
    4a5a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4a5c:	687b      	ldr	r3, [r7, #4]
    4a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4a60:	2b00      	cmp	r3, #0
    4a62:	bf14      	ite	ne
    4a64:	2300      	movne	r3, #0
    4a66:	2301      	moveq	r3, #1
    4a68:	b2db      	uxtb	r3, r3
    4a6a:	60fb      	str	r3, [r7, #12]

	return xReturn;
    4a6c:	68fb      	ldr	r3, [r7, #12]
}
    4a6e:	4618      	mov	r0, r3
    4a70:	3714      	adds	r7, #20
    4a72:	46bd      	mov	sp, r7
    4a74:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a78:	4770      	bx	lr
    4a7a:	bf00      	nop

00004a7c <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    4a7c:	b580      	push	{r7, lr}
    4a7e:	b084      	sub	sp, #16
    4a80:	af00      	add	r7, sp, #0
    4a82:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    4a84:	f001 f9c4 	bl	5e10 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    4a88:	687b      	ldr	r3, [r7, #4]
    4a8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4a8c:	687b      	ldr	r3, [r7, #4]
    4a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4a90:	429a      	cmp	r2, r3
    4a92:	bf14      	ite	ne
    4a94:	2300      	movne	r3, #0
    4a96:	2301      	moveq	r3, #1
    4a98:	b2db      	uxtb	r3, r3
    4a9a:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4a9c:	f001 f9ce 	bl	5e3c <vPortExitCritical>

	return xReturn;
    4aa0:	68fb      	ldr	r3, [r7, #12]
}
    4aa2:	4618      	mov	r0, r3
    4aa4:	3710      	adds	r7, #16
    4aa6:	46bd      	mov	sp, r7
    4aa8:	bd80      	pop	{r7, pc}
    4aaa:	bf00      	nop

00004aac <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    4aac:	b480      	push	{r7}
    4aae:	b085      	sub	sp, #20
    4ab0:	af00      	add	r7, sp, #0
    4ab2:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    4ab4:	687b      	ldr	r3, [r7, #4]
    4ab6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4ab8:	687b      	ldr	r3, [r7, #4]
    4aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4abc:	429a      	cmp	r2, r3
    4abe:	bf14      	ite	ne
    4ac0:	2300      	movne	r3, #0
    4ac2:	2301      	moveq	r3, #1
    4ac4:	b2db      	uxtb	r3, r3
    4ac6:	60fb      	str	r3, [r7, #12]

	return xReturn;
    4ac8:	68fb      	ldr	r3, [r7, #12]
}
    4aca:	4618      	mov	r0, r3
    4acc:	3714      	adds	r7, #20
    4ace:	46bd      	mov	sp, r7
    4ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ad4:	4770      	bx	lr
    4ad6:	bf00      	nop

00004ad8 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    4ad8:	b580      	push	{r7, lr}
    4ada:	b08a      	sub	sp, #40	; 0x28
    4adc:	af02      	add	r7, sp, #8
    4ade:	60f8      	str	r0, [r7, #12]
    4ae0:	60b9      	str	r1, [r7, #8]
    4ae2:	603b      	str	r3, [r7, #0]
    4ae4:	4613      	mov	r3, r2
    4ae6:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    4ae8:	88fb      	ldrh	r3, [r7, #6]
    4aea:	4618      	mov	r0, r3
    4aec:	6b39      	ldr	r1, [r7, #48]	; 0x30
    4aee:	f000 ffe5 	bl	5abc <prvAllocateTCBAndStack>
    4af2:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    4af4:	69bb      	ldr	r3, [r7, #24]
    4af6:	2b00      	cmp	r3, #0
    4af8:	f000 80a1 	beq.w	4c3e <xTaskGenericCreate+0x166>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    4afc:	69bb      	ldr	r3, [r7, #24]
    4afe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    4b00:	88fb      	ldrh	r3, [r7, #6]
    4b02:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4b06:	3b01      	subs	r3, #1
    4b08:	009b      	lsls	r3, r3, #2
    4b0a:	4413      	add	r3, r2
    4b0c:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    4b0e:	697b      	ldr	r3, [r7, #20]
    4b10:	f023 0307 	bic.w	r3, r3, #7
    4b14:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    4b16:	88fb      	ldrh	r3, [r7, #6]
    4b18:	9300      	str	r3, [sp, #0]
    4b1a:	69b8      	ldr	r0, [r7, #24]
    4b1c:	68b9      	ldr	r1, [r7, #8]
    4b1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4b22:	f000 febd 	bl	58a0 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    4b26:	6978      	ldr	r0, [r7, #20]
    4b28:	68f9      	ldr	r1, [r7, #12]
    4b2a:	683a      	ldr	r2, [r7, #0]
    4b2c:	f001 f8f2 	bl	5d14 <pxPortInitialiseStack>
    4b30:	4602      	mov	r2, r0
    4b32:	69bb      	ldr	r3, [r7, #24]
    4b34:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    4b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4b38:	2b00      	cmp	r3, #0
    4b3a:	d002      	beq.n	4b42 <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    4b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4b3e:	69ba      	ldr	r2, [r7, #24]
    4b40:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    4b42:	f001 f965 	bl	5e10 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    4b46:	f241 23b4 	movw	r3, #4788	; 0x12b4
    4b4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b4e:	681b      	ldr	r3, [r3, #0]
    4b50:	1c5a      	adds	r2, r3, #1
    4b52:	f241 23b4 	movw	r3, #4788	; 0x12b4
    4b56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b5a:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    4b5c:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4b60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b64:	681b      	ldr	r3, [r3, #0]
    4b66:	2b00      	cmp	r3, #0
    4b68:	d10f      	bne.n	4b8a <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    4b6a:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4b6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b72:	69ba      	ldr	r2, [r7, #24]
    4b74:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    4b76:	f241 23b4 	movw	r3, #4788	; 0x12b4
    4b7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b7e:	681b      	ldr	r3, [r3, #0]
    4b80:	2b01      	cmp	r3, #1
    4b82:	d118      	bne.n	4bb6 <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    4b84:	f000 fec2 	bl	590c <prvInitialiseTaskLists>
    4b88:	e015      	b.n	4bb6 <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    4b8a:	f241 23c4 	movw	r3, #4804	; 0x12c4
    4b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b92:	681b      	ldr	r3, [r3, #0]
    4b94:	2b00      	cmp	r3, #0
    4b96:	d10e      	bne.n	4bb6 <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    4b98:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4b9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ba0:	681b      	ldr	r3, [r3, #0]
    4ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4ba6:	429a      	cmp	r2, r3
    4ba8:	d805      	bhi.n	4bb6 <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    4baa:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4bae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bb2:	69ba      	ldr	r2, [r7, #24]
    4bb4:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    4bb6:	69bb      	ldr	r3, [r7, #24]
    4bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4bba:	f241 23bc 	movw	r3, #4796	; 0x12bc
    4bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bc2:	681b      	ldr	r3, [r3, #0]
    4bc4:	429a      	cmp	r2, r3
    4bc6:	d906      	bls.n	4bd6 <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    4bc8:	69bb      	ldr	r3, [r7, #24]
    4bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4bcc:	f241 23bc 	movw	r3, #4796	; 0x12bc
    4bd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bd4:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    4bd6:	f241 23d8 	movw	r3, #4824	; 0x12d8
    4bda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bde:	681b      	ldr	r3, [r3, #0]
    4be0:	1c5a      	adds	r2, r3, #1
    4be2:	f241 23d8 	movw	r3, #4824	; 0x12d8
    4be6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bea:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    4bec:	69bb      	ldr	r3, [r7, #24]
    4bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4bf0:	f241 23c0 	movw	r3, #4800	; 0x12c0
    4bf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bf8:	681b      	ldr	r3, [r3, #0]
    4bfa:	429a      	cmp	r2, r3
    4bfc:	d906      	bls.n	4c0c <xTaskGenericCreate+0x134>
    4bfe:	69bb      	ldr	r3, [r7, #24]
    4c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4c02:	f241 23c0 	movw	r3, #4800	; 0x12c0
    4c06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c0a:	601a      	str	r2, [r3, #0]
    4c0c:	69bb      	ldr	r3, [r7, #24]
    4c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4c10:	4613      	mov	r3, r2
    4c12:	009b      	lsls	r3, r3, #2
    4c14:	4413      	add	r3, r2
    4c16:	009b      	lsls	r3, r3, #2
    4c18:	f241 12e0 	movw	r2, #4576	; 0x11e0
    4c1c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4c20:	441a      	add	r2, r3
    4c22:	69bb      	ldr	r3, [r7, #24]
    4c24:	3304      	adds	r3, #4
    4c26:	4610      	mov	r0, r2
    4c28:	4619      	mov	r1, r3
    4c2a:	f7ff fadf 	bl	41ec <vListInsertEnd>

			xReturn = pdPASS;
    4c2e:	2301      	movs	r3, #1
    4c30:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    4c32:	69b8      	ldr	r0, [r7, #24]
    4c34:	f012 fe8c 	bl	17950 <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    4c38:	f001 f900 	bl	5e3c <vPortExitCritical>
    4c3c:	e002      	b.n	4c44 <xTaskGenericCreate+0x16c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    4c3e:	f04f 33ff 	mov.w	r3, #4294967295
    4c42:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    4c44:	69fb      	ldr	r3, [r7, #28]
    4c46:	2b01      	cmp	r3, #1
    4c48:	d111      	bne.n	4c6e <xTaskGenericCreate+0x196>
	{
		if( xSchedulerRunning != pdFALSE )
    4c4a:	f241 23c4 	movw	r3, #4804	; 0x12c4
    4c4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c52:	681b      	ldr	r3, [r3, #0]
    4c54:	2b00      	cmp	r3, #0
    4c56:	d00a      	beq.n	4c6e <xTaskGenericCreate+0x196>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    4c58:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4c5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c60:	681b      	ldr	r3, [r3, #0]
    4c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4c66:	429a      	cmp	r2, r3
    4c68:	d201      	bcs.n	4c6e <xTaskGenericCreate+0x196>
			{
				portYIELD_WITHIN_API();
    4c6a:	f001 f8c3 	bl	5df4 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    4c6e:	69fb      	ldr	r3, [r7, #28]
}
    4c70:	4618      	mov	r0, r3
    4c72:	3720      	adds	r7, #32
    4c74:	46bd      	mov	sp, r7
    4c76:	bd80      	pop	{r7, pc}

00004c78 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    4c78:	b580      	push	{r7, lr}
    4c7a:	b084      	sub	sp, #16
    4c7c:	af00      	add	r7, sp, #0
    4c7e:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4c80:	f001 f8c6 	bl	5e10 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    4c84:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4c88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c8c:	681b      	ldr	r3, [r3, #0]
    4c8e:	687a      	ldr	r2, [r7, #4]
    4c90:	429a      	cmp	r2, r3
    4c92:	d101      	bne.n	4c98 <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    4c94:	2300      	movs	r3, #0
    4c96:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    4c98:	687b      	ldr	r3, [r7, #4]
    4c9a:	2b00      	cmp	r3, #0
    4c9c:	d105      	bne.n	4caa <vTaskDelete+0x32>
    4c9e:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4ca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ca6:	681b      	ldr	r3, [r3, #0]
    4ca8:	e000      	b.n	4cac <vTaskDelete+0x34>
    4caa:	687b      	ldr	r3, [r7, #4]
    4cac:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4cae:	68fb      	ldr	r3, [r7, #12]
    4cb0:	3304      	adds	r3, #4
    4cb2:	4618      	mov	r0, r3
    4cb4:	f7ff fafa 	bl	42ac <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4cb8:	68fb      	ldr	r3, [r7, #12]
    4cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4cbc:	2b00      	cmp	r3, #0
    4cbe:	d004      	beq.n	4cca <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4cc0:	68fb      	ldr	r3, [r7, #12]
    4cc2:	3318      	adds	r3, #24
    4cc4:	4618      	mov	r0, r3
    4cc6:	f7ff faf1 	bl	42ac <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    4cca:	68fb      	ldr	r3, [r7, #12]
    4ccc:	3304      	adds	r3, #4
    4cce:	f241 2088 	movw	r0, #4744	; 0x1288
    4cd2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4cd6:	4619      	mov	r1, r3
    4cd8:	f7ff fa88 	bl	41ec <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    4cdc:	f241 239c 	movw	r3, #4764	; 0x129c
    4ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ce4:	681b      	ldr	r3, [r3, #0]
    4ce6:	1c5a      	adds	r2, r3, #1
    4ce8:	f241 239c 	movw	r3, #4764	; 0x129c
    4cec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cf0:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    4cf2:	f241 23d8 	movw	r3, #4824	; 0x12d8
    4cf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cfa:	681b      	ldr	r3, [r3, #0]
    4cfc:	1c5a      	adds	r2, r3, #1
    4cfe:	f241 23d8 	movw	r3, #4824	; 0x12d8
    4d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d06:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    4d08:	f001 f898 	bl	5e3c <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    4d0c:	f241 23c4 	movw	r3, #4804	; 0x12c4
    4d10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d14:	681b      	ldr	r3, [r3, #0]
    4d16:	2b00      	cmp	r3, #0
    4d18:	d004      	beq.n	4d24 <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    4d1a:	687b      	ldr	r3, [r7, #4]
    4d1c:	2b00      	cmp	r3, #0
    4d1e:	d101      	bne.n	4d24 <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    4d20:	f001 f868 	bl	5df4 <vPortYieldFromISR>
			}
		}
	}
    4d24:	3710      	adds	r7, #16
    4d26:	46bd      	mov	sp, r7
    4d28:	bd80      	pop	{r7, pc}
    4d2a:	bf00      	nop

00004d2c <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    4d2c:	b580      	push	{r7, lr}
    4d2e:	b086      	sub	sp, #24
    4d30:	af00      	add	r7, sp, #0
    4d32:	6078      	str	r0, [r7, #4]
    4d34:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    4d36:	2300      	movs	r3, #0
    4d38:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    4d3a:	f000 fa8b 	bl	5254 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    4d3e:	687b      	ldr	r3, [r7, #4]
    4d40:	681a      	ldr	r2, [r3, #0]
    4d42:	683b      	ldr	r3, [r7, #0]
    4d44:	4413      	add	r3, r2
    4d46:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    4d48:	687b      	ldr	r3, [r7, #4]
    4d4a:	681a      	ldr	r2, [r3, #0]
    4d4c:	f241 23b8 	movw	r3, #4792	; 0x12b8
    4d50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d54:	681b      	ldr	r3, [r3, #0]
    4d56:	429a      	cmp	r2, r3
    4d58:	d90f      	bls.n	4d7a <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    4d5a:	687b      	ldr	r3, [r7, #4]
    4d5c:	681a      	ldr	r2, [r3, #0]
    4d5e:	693b      	ldr	r3, [r7, #16]
    4d60:	429a      	cmp	r2, r3
    4d62:	d919      	bls.n	4d98 <vTaskDelayUntil+0x6c>
    4d64:	f241 23b8 	movw	r3, #4792	; 0x12b8
    4d68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d6c:	681b      	ldr	r3, [r3, #0]
    4d6e:	693a      	ldr	r2, [r7, #16]
    4d70:	429a      	cmp	r2, r3
    4d72:	d911      	bls.n	4d98 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4d74:	2301      	movs	r3, #1
    4d76:	617b      	str	r3, [r7, #20]
    4d78:	e00e      	b.n	4d98 <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    4d7a:	687b      	ldr	r3, [r7, #4]
    4d7c:	681a      	ldr	r2, [r3, #0]
    4d7e:	693b      	ldr	r3, [r7, #16]
    4d80:	429a      	cmp	r2, r3
    4d82:	d807      	bhi.n	4d94 <vTaskDelayUntil+0x68>
    4d84:	f241 23b8 	movw	r3, #4792	; 0x12b8
    4d88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d8c:	681b      	ldr	r3, [r3, #0]
    4d8e:	693a      	ldr	r2, [r7, #16]
    4d90:	429a      	cmp	r2, r3
    4d92:	d901      	bls.n	4d98 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4d94:	2301      	movs	r3, #1
    4d96:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    4d98:	687b      	ldr	r3, [r7, #4]
    4d9a:	693a      	ldr	r2, [r7, #16]
    4d9c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    4d9e:	697b      	ldr	r3, [r7, #20]
    4da0:	2b00      	cmp	r3, #0
    4da2:	d00b      	beq.n	4dbc <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4da4:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4da8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dac:	681b      	ldr	r3, [r3, #0]
    4dae:	3304      	adds	r3, #4
    4db0:	4618      	mov	r0, r3
    4db2:	f7ff fa7b 	bl	42ac <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4db6:	6938      	ldr	r0, [r7, #16]
    4db8:	f000 fe3c 	bl	5a34 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    4dbc:	f000 fa5c 	bl	5278 <xTaskResumeAll>
    4dc0:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4dc2:	68fb      	ldr	r3, [r7, #12]
    4dc4:	2b00      	cmp	r3, #0
    4dc6:	d101      	bne.n	4dcc <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    4dc8:	f001 f814 	bl	5df4 <vPortYieldFromISR>
		}
	}
    4dcc:	3718      	adds	r7, #24
    4dce:	46bd      	mov	sp, r7
    4dd0:	bd80      	pop	{r7, pc}
    4dd2:	bf00      	nop

00004dd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    4dd4:	b580      	push	{r7, lr}
    4dd6:	b084      	sub	sp, #16
    4dd8:	af00      	add	r7, sp, #0
    4dda:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4ddc:	2300      	movs	r3, #0
    4dde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    4de0:	687b      	ldr	r3, [r7, #4]
    4de2:	2b00      	cmp	r3, #0
    4de4:	d018      	beq.n	4e18 <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    4de6:	f000 fa35 	bl	5254 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    4dea:	f241 23b8 	movw	r3, #4792	; 0x12b8
    4dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4df2:	681a      	ldr	r2, [r3, #0]
    4df4:	687b      	ldr	r3, [r7, #4]
    4df6:	4413      	add	r3, r2
    4df8:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4dfa:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4dfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e02:	681b      	ldr	r3, [r3, #0]
    4e04:	3304      	adds	r3, #4
    4e06:	4618      	mov	r0, r3
    4e08:	f7ff fa50 	bl	42ac <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4e0c:	68b8      	ldr	r0, [r7, #8]
    4e0e:	f000 fe11 	bl	5a34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    4e12:	f000 fa31 	bl	5278 <xTaskResumeAll>
    4e16:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4e18:	68fb      	ldr	r3, [r7, #12]
    4e1a:	2b00      	cmp	r3, #0
    4e1c:	d101      	bne.n	4e22 <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    4e1e:	f000 ffe9 	bl	5df4 <vPortYieldFromISR>
		}
	}
    4e22:	3710      	adds	r7, #16
    4e24:	46bd      	mov	sp, r7
    4e26:	bd80      	pop	{r7, pc}

00004e28 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    4e28:	b580      	push	{r7, lr}
    4e2a:	b084      	sub	sp, #16
    4e2c:	af00      	add	r7, sp, #0
    4e2e:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    4e30:	f000 ffee 	bl	5e10 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4e34:	687b      	ldr	r3, [r7, #4]
    4e36:	2b00      	cmp	r3, #0
    4e38:	d105      	bne.n	4e46 <uxTaskPriorityGet+0x1e>
    4e3a:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4e3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e42:	681b      	ldr	r3, [r3, #0]
    4e44:	e000      	b.n	4e48 <uxTaskPriorityGet+0x20>
    4e46:	687b      	ldr	r3, [r7, #4]
    4e48:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    4e4a:	68fb      	ldr	r3, [r7, #12]
    4e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4e4e:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    4e50:	f000 fff4 	bl	5e3c <vPortExitCritical>

		return uxReturn;
    4e54:	68bb      	ldr	r3, [r7, #8]
	}
    4e56:	4618      	mov	r0, r3
    4e58:	3710      	adds	r7, #16
    4e5a:	46bd      	mov	sp, r7
    4e5c:	bd80      	pop	{r7, pc}
    4e5e:	bf00      	nop

00004e60 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    4e60:	b580      	push	{r7, lr}
    4e62:	b086      	sub	sp, #24
    4e64:	af00      	add	r7, sp, #0
    4e66:	6078      	str	r0, [r7, #4]
    4e68:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    4e6a:	2300      	movs	r3, #0
    4e6c:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    4e6e:	683b      	ldr	r3, [r7, #0]
    4e70:	2b04      	cmp	r3, #4
    4e72:	d901      	bls.n	4e78 <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    4e74:	2304      	movs	r3, #4
    4e76:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    4e78:	f000 ffca 	bl	5e10 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    4e7c:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4e80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e84:	681b      	ldr	r3, [r3, #0]
    4e86:	687a      	ldr	r2, [r7, #4]
    4e88:	429a      	cmp	r2, r3
    4e8a:	d101      	bne.n	4e90 <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    4e8c:	2300      	movs	r3, #0
    4e8e:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4e90:	687b      	ldr	r3, [r7, #4]
    4e92:	2b00      	cmp	r3, #0
    4e94:	d105      	bne.n	4ea2 <vTaskPrioritySet+0x42>
    4e96:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e9e:	681b      	ldr	r3, [r3, #0]
    4ea0:	e000      	b.n	4ea4 <vTaskPrioritySet+0x44>
    4ea2:	687b      	ldr	r3, [r7, #4]
    4ea4:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    4ea6:	693b      	ldr	r3, [r7, #16]
    4ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    4eaa:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    4eac:	68fa      	ldr	r2, [r7, #12]
    4eae:	683b      	ldr	r3, [r7, #0]
    4eb0:	429a      	cmp	r2, r3
    4eb2:	d058      	beq.n	4f66 <vTaskPrioritySet+0x106>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    4eb4:	683a      	ldr	r2, [r7, #0]
    4eb6:	68fb      	ldr	r3, [r7, #12]
    4eb8:	429a      	cmp	r2, r3
    4eba:	d905      	bls.n	4ec8 <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    4ebc:	687b      	ldr	r3, [r7, #4]
    4ebe:	2b00      	cmp	r3, #0
    4ec0:	d007      	beq.n	4ed2 <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    4ec2:	2301      	movs	r3, #1
    4ec4:	617b      	str	r3, [r7, #20]
    4ec6:	e004      	b.n	4ed2 <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    4ec8:	687b      	ldr	r3, [r7, #4]
    4eca:	2b00      	cmp	r3, #0
    4ecc:	d101      	bne.n	4ed2 <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    4ece:	2301      	movs	r3, #1
    4ed0:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    4ed2:	693b      	ldr	r3, [r7, #16]
    4ed4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    4ed6:	693b      	ldr	r3, [r7, #16]
    4ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4eda:	429a      	cmp	r2, r3
    4edc:	d102      	bne.n	4ee4 <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    4ede:	693b      	ldr	r3, [r7, #16]
    4ee0:	683a      	ldr	r2, [r7, #0]
    4ee2:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    4ee4:	693b      	ldr	r3, [r7, #16]
    4ee6:	683a      	ldr	r2, [r7, #0]
    4ee8:	64da      	str	r2, [r3, #76]	; 0x4c
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    4eea:	683b      	ldr	r3, [r7, #0]
    4eec:	f1c3 0205 	rsb	r2, r3, #5
    4ef0:	693b      	ldr	r3, [r7, #16]
    4ef2:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    4ef4:	693b      	ldr	r3, [r7, #16]
    4ef6:	6959      	ldr	r1, [r3, #20]
    4ef8:	68fa      	ldr	r2, [r7, #12]
    4efa:	4613      	mov	r3, r2
    4efc:	009b      	lsls	r3, r3, #2
    4efe:	4413      	add	r3, r2
    4f00:	009b      	lsls	r3, r3, #2
    4f02:	f241 12e0 	movw	r2, #4576	; 0x11e0
    4f06:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4f0a:	4413      	add	r3, r2
    4f0c:	4299      	cmp	r1, r3
    4f0e:	d125      	bne.n	4f5c <vTaskPrioritySet+0xfc>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    4f10:	693b      	ldr	r3, [r7, #16]
    4f12:	3304      	adds	r3, #4
    4f14:	4618      	mov	r0, r3
    4f16:	f7ff f9c9 	bl	42ac <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4f1a:	693b      	ldr	r3, [r7, #16]
    4f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4f1e:	f241 23c0 	movw	r3, #4800	; 0x12c0
    4f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f26:	681b      	ldr	r3, [r3, #0]
    4f28:	429a      	cmp	r2, r3
    4f2a:	d906      	bls.n	4f3a <vTaskPrioritySet+0xda>
    4f2c:	693b      	ldr	r3, [r7, #16]
    4f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4f30:	f241 23c0 	movw	r3, #4800	; 0x12c0
    4f34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f38:	601a      	str	r2, [r3, #0]
    4f3a:	693b      	ldr	r3, [r7, #16]
    4f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4f3e:	4613      	mov	r3, r2
    4f40:	009b      	lsls	r3, r3, #2
    4f42:	4413      	add	r3, r2
    4f44:	009b      	lsls	r3, r3, #2
    4f46:	f241 12e0 	movw	r2, #4576	; 0x11e0
    4f4a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4f4e:	441a      	add	r2, r3
    4f50:	693b      	ldr	r3, [r7, #16]
    4f52:	3304      	adds	r3, #4
    4f54:	4610      	mov	r0, r2
    4f56:	4619      	mov	r1, r3
    4f58:	f7ff f948 	bl	41ec <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    4f5c:	697b      	ldr	r3, [r7, #20]
    4f5e:	2b01      	cmp	r3, #1
    4f60:	d101      	bne.n	4f66 <vTaskPrioritySet+0x106>
				{
					portYIELD_WITHIN_API();
    4f62:	f000 ff47 	bl	5df4 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    4f66:	f000 ff69 	bl	5e3c <vPortExitCritical>
	}
    4f6a:	3718      	adds	r7, #24
    4f6c:	46bd      	mov	sp, r7
    4f6e:	bd80      	pop	{r7, pc}

00004f70 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    4f70:	b580      	push	{r7, lr}
    4f72:	b084      	sub	sp, #16
    4f74:	af00      	add	r7, sp, #0
    4f76:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4f78:	f000 ff4a 	bl	5e10 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    4f7c:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4f80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f84:	681b      	ldr	r3, [r3, #0]
    4f86:	687a      	ldr	r2, [r7, #4]
    4f88:	429a      	cmp	r2, r3
    4f8a:	d101      	bne.n	4f90 <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    4f8c:	2300      	movs	r3, #0
    4f8e:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    4f90:	687b      	ldr	r3, [r7, #4]
    4f92:	2b00      	cmp	r3, #0
    4f94:	d105      	bne.n	4fa2 <vTaskSuspend+0x32>
    4f96:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f9e:	681b      	ldr	r3, [r3, #0]
    4fa0:	e000      	b.n	4fa4 <vTaskSuspend+0x34>
    4fa2:	687b      	ldr	r3, [r7, #4]
    4fa4:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4fa6:	68fb      	ldr	r3, [r7, #12]
    4fa8:	3304      	adds	r3, #4
    4faa:	4618      	mov	r0, r3
    4fac:	f7ff f97e 	bl	42ac <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4fb0:	68fb      	ldr	r3, [r7, #12]
    4fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4fb4:	2b00      	cmp	r3, #0
    4fb6:	d004      	beq.n	4fc2 <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4fb8:	68fb      	ldr	r3, [r7, #12]
    4fba:	3318      	adds	r3, #24
    4fbc:	4618      	mov	r0, r3
    4fbe:	f7ff f975 	bl	42ac <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    4fc2:	68fb      	ldr	r3, [r7, #12]
    4fc4:	3304      	adds	r3, #4
    4fc6:	f241 20a0 	movw	r0, #4768	; 0x12a0
    4fca:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4fce:	4619      	mov	r1, r3
    4fd0:	f7ff f90c 	bl	41ec <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    4fd4:	f000 ff32 	bl	5e3c <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    4fd8:	687b      	ldr	r3, [r7, #4]
    4fda:	2b00      	cmp	r3, #0
    4fdc:	d11e      	bne.n	501c <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    4fde:	f241 23c4 	movw	r3, #4804	; 0x12c4
    4fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fe6:	681b      	ldr	r3, [r3, #0]
    4fe8:	2b00      	cmp	r3, #0
    4fea:	d002      	beq.n	4ff2 <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    4fec:	f000 ff02 	bl	5df4 <vPortYieldFromISR>
    4ff0:	e014      	b.n	501c <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    4ff2:	f241 23a0 	movw	r3, #4768	; 0x12a0
    4ff6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ffa:	681a      	ldr	r2, [r3, #0]
    4ffc:	f241 23b4 	movw	r3, #4788	; 0x12b4
    5000:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5004:	681b      	ldr	r3, [r3, #0]
    5006:	429a      	cmp	r2, r3
    5008:	d106      	bne.n	5018 <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    500a:	f241 13dc 	movw	r3, #4572	; 0x11dc
    500e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5012:	2200      	movs	r2, #0
    5014:	601a      	str	r2, [r3, #0]
    5016:	e001      	b.n	501c <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    5018:	f000 fadc 	bl	55d4 <vTaskSwitchContext>
				}
			}
		}
	}
    501c:	3710      	adds	r7, #16
    501e:	46bd      	mov	sp, r7
    5020:	bd80      	pop	{r7, pc}
    5022:	bf00      	nop

00005024 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    5024:	b480      	push	{r7}
    5026:	b085      	sub	sp, #20
    5028:	af00      	add	r7, sp, #0
    502a:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    502c:	2300      	movs	r3, #0
    502e:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    5030:	687b      	ldr	r3, [r7, #4]
    5032:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    5034:	68bb      	ldr	r3, [r7, #8]
    5036:	695a      	ldr	r2, [r3, #20]
    5038:	f241 23a0 	movw	r3, #4768	; 0x12a0
    503c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5040:	429a      	cmp	r2, r3
    5042:	d10d      	bne.n	5060 <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    5044:	68bb      	ldr	r3, [r7, #8]
    5046:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5048:	f241 2374 	movw	r3, #4724	; 0x1274
    504c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5050:	429a      	cmp	r2, r3
    5052:	d005      	beq.n	5060 <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    5054:	68bb      	ldr	r3, [r7, #8]
    5056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5058:	2b00      	cmp	r3, #0
    505a:	d101      	bne.n	5060 <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    505c:	2301      	movs	r3, #1
    505e:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    5060:	68fb      	ldr	r3, [r7, #12]
	}
    5062:	4618      	mov	r0, r3
    5064:	3714      	adds	r7, #20
    5066:	46bd      	mov	sp, r7
    5068:	f85d 7b04 	ldr.w	r7, [sp], #4
    506c:	4770      	bx	lr
    506e:	bf00      	nop

00005070 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    5070:	b580      	push	{r7, lr}
    5072:	b084      	sub	sp, #16
    5074:	af00      	add	r7, sp, #0
    5076:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    5078:	687b      	ldr	r3, [r7, #4]
    507a:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    507c:	68fb      	ldr	r3, [r7, #12]
    507e:	2b00      	cmp	r3, #0
    5080:	d043      	beq.n	510a <vTaskResume+0x9a>
    5082:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5086:	f2c2 0300 	movt	r3, #8192	; 0x2000
    508a:	681b      	ldr	r3, [r3, #0]
    508c:	68fa      	ldr	r2, [r7, #12]
    508e:	429a      	cmp	r2, r3
    5090:	d03b      	beq.n	510a <vTaskResume+0x9a>
		{
			taskENTER_CRITICAL();
    5092:	f000 febd 	bl	5e10 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    5096:	68f8      	ldr	r0, [r7, #12]
    5098:	f7ff ffc4 	bl	5024 <xTaskIsTaskSuspended>
    509c:	4603      	mov	r3, r0
    509e:	2b01      	cmp	r3, #1
    50a0:	d131      	bne.n	5106 <vTaskResume+0x96>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    50a2:	68fb      	ldr	r3, [r7, #12]
    50a4:	3304      	adds	r3, #4
    50a6:	4618      	mov	r0, r3
    50a8:	f7ff f900 	bl	42ac <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    50ac:	68fb      	ldr	r3, [r7, #12]
    50ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    50b0:	f241 23c0 	movw	r3, #4800	; 0x12c0
    50b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50b8:	681b      	ldr	r3, [r3, #0]
    50ba:	429a      	cmp	r2, r3
    50bc:	d906      	bls.n	50cc <vTaskResume+0x5c>
    50be:	68fb      	ldr	r3, [r7, #12]
    50c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    50c2:	f241 23c0 	movw	r3, #4800	; 0x12c0
    50c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50ca:	601a      	str	r2, [r3, #0]
    50cc:	68fb      	ldr	r3, [r7, #12]
    50ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    50d0:	4613      	mov	r3, r2
    50d2:	009b      	lsls	r3, r3, #2
    50d4:	4413      	add	r3, r2
    50d6:	009b      	lsls	r3, r3, #2
    50d8:	f241 12e0 	movw	r2, #4576	; 0x11e0
    50dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    50e0:	441a      	add	r2, r3
    50e2:	68fb      	ldr	r3, [r7, #12]
    50e4:	3304      	adds	r3, #4
    50e6:	4610      	mov	r0, r2
    50e8:	4619      	mov	r1, r3
    50ea:	f7ff f87f 	bl	41ec <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    50ee:	68fb      	ldr	r3, [r7, #12]
    50f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    50f2:	f241 13dc 	movw	r3, #4572	; 0x11dc
    50f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50fa:	681b      	ldr	r3, [r3, #0]
    50fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    50fe:	429a      	cmp	r2, r3
    5100:	d301      	bcc.n	5106 <vTaskResume+0x96>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    5102:	f000 fe77 	bl	5df4 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    5106:	f000 fe99 	bl	5e3c <vPortExitCritical>
		}
	}
    510a:	3710      	adds	r7, #16
    510c:	46bd      	mov	sp, r7
    510e:	bd80      	pop	{r7, pc}

00005110 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    5110:	b580      	push	{r7, lr}
    5112:	b086      	sub	sp, #24
    5114:	af00      	add	r7, sp, #0
    5116:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    5118:	2300      	movs	r3, #0
    511a:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    511c:	687b      	ldr	r3, [r7, #4]
    511e:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    5120:	2300      	movs	r3, #0
    5122:	60fb      	str	r3, [r7, #12]
    5124:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5128:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    512c:	6938      	ldr	r0, [r7, #16]
    512e:	f7ff ff79 	bl	5024 <xTaskIsTaskSuspended>
    5132:	4603      	mov	r3, r0
    5134:	2b01      	cmp	r3, #1
    5136:	d144      	bne.n	51c2 <xTaskResumeFromISR+0xb2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    5138:	f241 23c8 	movw	r3, #4808	; 0x12c8
    513c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5140:	681b      	ldr	r3, [r3, #0]
    5142:	2b00      	cmp	r3, #0
    5144:	d134      	bne.n	51b0 <xTaskResumeFromISR+0xa0>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    5146:	693b      	ldr	r3, [r7, #16]
    5148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    514a:	f241 13dc 	movw	r3, #4572	; 0x11dc
    514e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5152:	681b      	ldr	r3, [r3, #0]
    5154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5156:	429a      	cmp	r2, r3
    5158:	bf34      	ite	cc
    515a:	2300      	movcc	r3, #0
    515c:	2301      	movcs	r3, #1
    515e:	b2db      	uxtb	r3, r3
    5160:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    5162:	693b      	ldr	r3, [r7, #16]
    5164:	3304      	adds	r3, #4
    5166:	4618      	mov	r0, r3
    5168:	f7ff f8a0 	bl	42ac <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    516c:	693b      	ldr	r3, [r7, #16]
    516e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5170:	f241 23c0 	movw	r3, #4800	; 0x12c0
    5174:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5178:	681b      	ldr	r3, [r3, #0]
    517a:	429a      	cmp	r2, r3
    517c:	d906      	bls.n	518c <xTaskResumeFromISR+0x7c>
    517e:	693b      	ldr	r3, [r7, #16]
    5180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5182:	f241 23c0 	movw	r3, #4800	; 0x12c0
    5186:	f2c2 0300 	movt	r3, #8192	; 0x2000
    518a:	601a      	str	r2, [r3, #0]
    518c:	693b      	ldr	r3, [r7, #16]
    518e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5190:	4613      	mov	r3, r2
    5192:	009b      	lsls	r3, r3, #2
    5194:	4413      	add	r3, r2
    5196:	009b      	lsls	r3, r3, #2
    5198:	f241 12e0 	movw	r2, #4576	; 0x11e0
    519c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    51a0:	441a      	add	r2, r3
    51a2:	693b      	ldr	r3, [r7, #16]
    51a4:	3304      	adds	r3, #4
    51a6:	4610      	mov	r0, r2
    51a8:	4619      	mov	r1, r3
    51aa:	f7ff f81f 	bl	41ec <vListInsertEnd>
    51ae:	e008      	b.n	51c2 <xTaskResumeFromISR+0xb2>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    51b0:	693b      	ldr	r3, [r7, #16]
    51b2:	3318      	adds	r3, #24
    51b4:	f241 2074 	movw	r0, #4724	; 0x1274
    51b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    51bc:	4619      	mov	r1, r3
    51be:	f7ff f815 	bl	41ec <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    51c2:	f04f 0000 	mov.w	r0, #0
    51c6:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    51ca:	697b      	ldr	r3, [r7, #20]
	}
    51cc:	4618      	mov	r0, r3
    51ce:	3718      	adds	r7, #24
    51d0:	46bd      	mov	sp, r7
    51d2:	bd80      	pop	{r7, pc}

000051d4 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    51d4:	b580      	push	{r7, lr}
    51d6:	b086      	sub	sp, #24
    51d8:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    51da:	2300      	movs	r3, #0
    51dc:	9300      	str	r3, [sp, #0]
    51de:	2300      	movs	r3, #0
    51e0:	9301      	str	r3, [sp, #4]
    51e2:	2300      	movs	r3, #0
    51e4:	9302      	str	r3, [sp, #8]
    51e6:	2300      	movs	r3, #0
    51e8:	9303      	str	r3, [sp, #12]
    51ea:	f645 008d 	movw	r0, #22669	; 0x588d
    51ee:	f2c0 0000 	movt	r0, #0
    51f2:	f648 315c 	movw	r1, #35676	; 0x8b5c
    51f6:	f2c0 0101 	movt	r1, #1
    51fa:	2280      	movs	r2, #128	; 0x80
    51fc:	2300      	movs	r3, #0
    51fe:	f7ff fc6b 	bl	4ad8 <xTaskGenericCreate>
    5202:	6078      	str	r0, [r7, #4]
            
		}
	}
	#endif

	if( xReturn == pdPASS )
    5204:	687b      	ldr	r3, [r7, #4]
    5206:	2b01      	cmp	r3, #1
    5208:	d111      	bne.n	522e <vTaskStartScheduler+0x5a>
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */

		portDISABLE_INTERRUPTS();
    520a:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    520e:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    5212:	f241 23c4 	movw	r3, #4804	; 0x12c4
    5216:	f2c2 0300 	movt	r3, #8192	; 0x2000
    521a:	2201      	movs	r2, #1
    521c:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    521e:	f241 23b8 	movw	r3, #4792	; 0x12b8
    5222:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5226:	2200      	movs	r2, #0
    5228:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    522a:	f000 fdb5 	bl	5d98 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    522e:	3708      	adds	r7, #8
    5230:	46bd      	mov	sp, r7
    5232:	bd80      	pop	{r7, pc}

00005234 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    5234:	b580      	push	{r7, lr}
    5236:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    5238:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    523c:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    5240:	f241 23c4 	movw	r3, #4804	; 0x12c4
    5244:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5248:	2200      	movs	r2, #0
    524a:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    524c:	f000 fdcc 	bl	5de8 <vPortEndScheduler>
}
    5250:	bd80      	pop	{r7, pc}
    5252:	bf00      	nop

00005254 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    5254:	b480      	push	{r7}
    5256:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    5258:	f241 23c8 	movw	r3, #4808	; 0x12c8
    525c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5260:	681b      	ldr	r3, [r3, #0]
    5262:	1c5a      	adds	r2, r3, #1
    5264:	f241 23c8 	movw	r3, #4808	; 0x12c8
    5268:	f2c2 0300 	movt	r3, #8192	; 0x2000
    526c:	601a      	str	r2, [r3, #0]
}
    526e:	46bd      	mov	sp, r7
    5270:	f85d 7b04 	ldr.w	r7, [sp], #4
    5274:	4770      	bx	lr
    5276:	bf00      	nop

00005278 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    5278:	b590      	push	{r4, r7, lr}
    527a:	b083      	sub	sp, #12
    527c:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    527e:	2300      	movs	r3, #0
    5280:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    5282:	f000 fdc5 	bl	5e10 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    5286:	f241 23c8 	movw	r3, #4808	; 0x12c8
    528a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    528e:	681b      	ldr	r3, [r3, #0]
    5290:	1e5a      	subs	r2, r3, #1
    5292:	f241 23c8 	movw	r3, #4808	; 0x12c8
    5296:	f2c2 0300 	movt	r3, #8192	; 0x2000
    529a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    529c:	f241 23c8 	movw	r3, #4808	; 0x12c8
    52a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52a4:	681b      	ldr	r3, [r3, #0]
    52a6:	2b00      	cmp	r3, #0
    52a8:	d177      	bne.n	539a <xTaskResumeAll+0x122>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    52aa:	f241 23b4 	movw	r3, #4788	; 0x12b4
    52ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52b2:	681b      	ldr	r3, [r3, #0]
    52b4:	2b00      	cmp	r3, #0
    52b6:	d070      	beq.n	539a <xTaskResumeAll+0x122>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    52b8:	2300      	movs	r3, #0
    52ba:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    52bc:	e036      	b.n	532c <xTaskResumeAll+0xb4>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    52be:	f241 2374 	movw	r3, #4724	; 0x1274
    52c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52c6:	68db      	ldr	r3, [r3, #12]
    52c8:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    52ca:	f104 0318 	add.w	r3, r4, #24
    52ce:	4618      	mov	r0, r3
    52d0:	f7fe ffec 	bl	42ac <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    52d4:	1d23      	adds	r3, r4, #4
    52d6:	4618      	mov	r0, r3
    52d8:	f7fe ffe8 	bl	42ac <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    52dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    52de:	f241 23c0 	movw	r3, #4800	; 0x12c0
    52e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52e6:	681b      	ldr	r3, [r3, #0]
    52e8:	429a      	cmp	r2, r3
    52ea:	d905      	bls.n	52f8 <xTaskResumeAll+0x80>
    52ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    52ee:	f241 23c0 	movw	r3, #4800	; 0x12c0
    52f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52f6:	601a      	str	r2, [r3, #0]
    52f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    52fa:	4613      	mov	r3, r2
    52fc:	009b      	lsls	r3, r3, #2
    52fe:	4413      	add	r3, r2
    5300:	009b      	lsls	r3, r3, #2
    5302:	f241 12e0 	movw	r2, #4576	; 0x11e0
    5306:	f2c2 0200 	movt	r2, #8192	; 0x2000
    530a:	441a      	add	r2, r3
    530c:	1d23      	adds	r3, r4, #4
    530e:	4610      	mov	r0, r2
    5310:	4619      	mov	r1, r3
    5312:	f7fe ff6b 	bl	41ec <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    5316:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5318:	f241 13dc 	movw	r3, #4572	; 0x11dc
    531c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5320:	681b      	ldr	r3, [r3, #0]
    5322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5324:	429a      	cmp	r2, r3
    5326:	d301      	bcc.n	532c <xTaskResumeAll+0xb4>
					{
						xYieldRequired = pdTRUE;
    5328:	2301      	movs	r3, #1
    532a:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    532c:	f241 2374 	movw	r3, #4724	; 0x1274
    5330:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5334:	681b      	ldr	r3, [r3, #0]
    5336:	2b00      	cmp	r3, #0
    5338:	d1c1      	bne.n	52be <xTaskResumeAll+0x46>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    533a:	f241 23cc 	movw	r3, #4812	; 0x12cc
    533e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5342:	681b      	ldr	r3, [r3, #0]
    5344:	2b00      	cmp	r3, #0
    5346:	d014      	beq.n	5372 <xTaskResumeAll+0xfa>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    5348:	e00c      	b.n	5364 <xTaskResumeAll+0xec>
					{
						vTaskIncrementTick();
    534a:	f000 f865 	bl	5418 <vTaskIncrementTick>
						--uxMissedTicks;
    534e:	f241 23cc 	movw	r3, #4812	; 0x12cc
    5352:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5356:	681b      	ldr	r3, [r3, #0]
    5358:	1e5a      	subs	r2, r3, #1
    535a:	f241 23cc 	movw	r3, #4812	; 0x12cc
    535e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5362:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    5364:	f241 23cc 	movw	r3, #4812	; 0x12cc
    5368:	f2c2 0300 	movt	r3, #8192	; 0x2000
    536c:	681b      	ldr	r3, [r3, #0]
    536e:	2b00      	cmp	r3, #0
    5370:	d1eb      	bne.n	534a <xTaskResumeAll+0xd2>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    5372:	683b      	ldr	r3, [r7, #0]
    5374:	2b01      	cmp	r3, #1
    5376:	d006      	beq.n	5386 <xTaskResumeAll+0x10e>
    5378:	f241 23d0 	movw	r3, #4816	; 0x12d0
    537c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5380:	681b      	ldr	r3, [r3, #0]
    5382:	2b01      	cmp	r3, #1
    5384:	d109      	bne.n	539a <xTaskResumeAll+0x122>
				{
					xAlreadyYielded = pdTRUE;
    5386:	2301      	movs	r3, #1
    5388:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    538a:	f241 23d0 	movw	r3, #4816	; 0x12d0
    538e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5392:	2200      	movs	r2, #0
    5394:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    5396:	f000 fd2d 	bl	5df4 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    539a:	f000 fd4f 	bl	5e3c <vPortExitCritical>

	return xAlreadyYielded;
    539e:	687b      	ldr	r3, [r7, #4]
}
    53a0:	4618      	mov	r0, r3
    53a2:	370c      	adds	r7, #12
    53a4:	46bd      	mov	sp, r7
    53a6:	bd90      	pop	{r4, r7, pc}

000053a8 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    53a8:	b580      	push	{r7, lr}
    53aa:	b082      	sub	sp, #8
    53ac:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    53ae:	f000 fd2f 	bl	5e10 <vPortEnterCritical>
	{
		xTicks = xTickCount;
    53b2:	f241 23b8 	movw	r3, #4792	; 0x12b8
    53b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53ba:	681b      	ldr	r3, [r3, #0]
    53bc:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    53be:	f000 fd3d 	bl	5e3c <vPortExitCritical>

	return xTicks;
    53c2:	687b      	ldr	r3, [r7, #4]
}
    53c4:	4618      	mov	r0, r3
    53c6:	3708      	adds	r7, #8
    53c8:	46bd      	mov	sp, r7
    53ca:	bd80      	pop	{r7, pc}

000053cc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    53cc:	b480      	push	{r7}
    53ce:	b083      	sub	sp, #12
    53d0:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    53d2:	2300      	movs	r3, #0
    53d4:	607b      	str	r3, [r7, #4]
    53d6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    53da:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    53de:	f241 23b8 	movw	r3, #4792	; 0x12b8
    53e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53e6:	681b      	ldr	r3, [r3, #0]
    53e8:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    53ea:	f04f 0000 	mov.w	r0, #0
    53ee:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    53f2:	683b      	ldr	r3, [r7, #0]
}
    53f4:	4618      	mov	r0, r3
    53f6:	370c      	adds	r7, #12
    53f8:	46bd      	mov	sp, r7
    53fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    53fe:	4770      	bx	lr

00005400 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    5400:	b480      	push	{r7}
    5402:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    5404:	f241 23b4 	movw	r3, #4788	; 0x12b4
    5408:	f2c2 0300 	movt	r3, #8192	; 0x2000
    540c:	681b      	ldr	r3, [r3, #0]
}
    540e:	4618      	mov	r0, r3
    5410:	46bd      	mov	sp, r7
    5412:	f85d 7b04 	ldr.w	r7, [sp], #4
    5416:	4770      	bx	lr

00005418 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    5418:	b580      	push	{r7, lr}
    541a:	b084      	sub	sp, #16
    541c:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    541e:	f241 23c8 	movw	r3, #4808	; 0x12c8
    5422:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5426:	681b      	ldr	r3, [r3, #0]
    5428:	2b00      	cmp	r3, #0
    542a:	f040 80b9 	bne.w	55a0 <vTaskIncrementTick+0x188>
	{
		++xTickCount;
    542e:	f241 23b8 	movw	r3, #4792	; 0x12b8
    5432:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5436:	681b      	ldr	r3, [r3, #0]
    5438:	1c5a      	adds	r2, r3, #1
    543a:	f241 23b8 	movw	r3, #4792	; 0x12b8
    543e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5442:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    5444:	f241 23b8 	movw	r3, #4792	; 0x12b8
    5448:	f2c2 0300 	movt	r3, #8192	; 0x2000
    544c:	681b      	ldr	r3, [r3, #0]
    544e:	2b00      	cmp	r3, #0
    5450:	d13f      	bne.n	54d2 <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    5452:	f241 236c 	movw	r3, #4716	; 0x126c
    5456:	f2c2 0300 	movt	r3, #8192	; 0x2000
    545a:	681b      	ldr	r3, [r3, #0]
    545c:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    545e:	f241 2370 	movw	r3, #4720	; 0x1270
    5462:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5466:	681a      	ldr	r2, [r3, #0]
    5468:	f241 236c 	movw	r3, #4716	; 0x126c
    546c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5470:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    5472:	f241 2370 	movw	r3, #4720	; 0x1270
    5476:	f2c2 0300 	movt	r3, #8192	; 0x2000
    547a:	68fa      	ldr	r2, [r7, #12]
    547c:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    547e:	f241 23d4 	movw	r3, #4820	; 0x12d4
    5482:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5486:	681b      	ldr	r3, [r3, #0]
    5488:	1c5a      	adds	r2, r3, #1
    548a:	f241 23d4 	movw	r3, #4820	; 0x12d4
    548e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5492:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    5494:	f241 236c 	movw	r3, #4716	; 0x126c
    5498:	f2c2 0300 	movt	r3, #8192	; 0x2000
    549c:	681b      	ldr	r3, [r3, #0]
    549e:	681b      	ldr	r3, [r3, #0]
    54a0:	2b00      	cmp	r3, #0
    54a2:	d107      	bne.n	54b4 <vTaskIncrementTick+0x9c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    54a4:	f240 5330 	movw	r3, #1328	; 0x530
    54a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54ac:	f04f 32ff 	mov.w	r2, #4294967295
    54b0:	601a      	str	r2, [r3, #0]
    54b2:	e00e      	b.n	54d2 <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    54b4:	f241 236c 	movw	r3, #4716	; 0x126c
    54b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54bc:	681b      	ldr	r3, [r3, #0]
    54be:	68db      	ldr	r3, [r3, #12]
    54c0:	68db      	ldr	r3, [r3, #12]
    54c2:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    54c4:	68bb      	ldr	r3, [r7, #8]
    54c6:	685a      	ldr	r2, [r3, #4]
    54c8:	f240 5330 	movw	r3, #1328	; 0x530
    54cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54d0:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    54d2:	f241 23b8 	movw	r3, #4792	; 0x12b8
    54d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54da:	681a      	ldr	r2, [r3, #0]
    54dc:	f240 5330 	movw	r3, #1328	; 0x530
    54e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54e4:	681b      	ldr	r3, [r3, #0]
    54e6:	429a      	cmp	r2, r3
    54e8:	d359      	bcc.n	559e <vTaskIncrementTick+0x186>
    54ea:	f241 236c 	movw	r3, #4716	; 0x126c
    54ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54f2:	681b      	ldr	r3, [r3, #0]
    54f4:	681b      	ldr	r3, [r3, #0]
    54f6:	2b00      	cmp	r3, #0
    54f8:	d107      	bne.n	550a <vTaskIncrementTick+0xf2>
    54fa:	f240 5330 	movw	r3, #1328	; 0x530
    54fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5502:	f04f 32ff 	mov.w	r2, #4294967295
    5506:	601a      	str	r2, [r3, #0]
    5508:	e049      	b.n	559e <vTaskIncrementTick+0x186>
    550a:	f241 236c 	movw	r3, #4716	; 0x126c
    550e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5512:	681b      	ldr	r3, [r3, #0]
    5514:	68db      	ldr	r3, [r3, #12]
    5516:	68db      	ldr	r3, [r3, #12]
    5518:	60bb      	str	r3, [r7, #8]
    551a:	68bb      	ldr	r3, [r7, #8]
    551c:	685b      	ldr	r3, [r3, #4]
    551e:	607b      	str	r3, [r7, #4]
    5520:	f241 23b8 	movw	r3, #4792	; 0x12b8
    5524:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5528:	681a      	ldr	r2, [r3, #0]
    552a:	687b      	ldr	r3, [r7, #4]
    552c:	429a      	cmp	r2, r3
    552e:	d206      	bcs.n	553e <vTaskIncrementTick+0x126>
    5530:	f240 5330 	movw	r3, #1328	; 0x530
    5534:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5538:	687a      	ldr	r2, [r7, #4]
    553a:	601a      	str	r2, [r3, #0]
    553c:	e02f      	b.n	559e <vTaskIncrementTick+0x186>
    553e:	68bb      	ldr	r3, [r7, #8]
    5540:	3304      	adds	r3, #4
    5542:	4618      	mov	r0, r3
    5544:	f7fe feb2 	bl	42ac <vListRemove>
    5548:	68bb      	ldr	r3, [r7, #8]
    554a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    554c:	2b00      	cmp	r3, #0
    554e:	d004      	beq.n	555a <vTaskIncrementTick+0x142>
    5550:	68bb      	ldr	r3, [r7, #8]
    5552:	3318      	adds	r3, #24
    5554:	4618      	mov	r0, r3
    5556:	f7fe fea9 	bl	42ac <vListRemove>
    555a:	68bb      	ldr	r3, [r7, #8]
    555c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    555e:	f241 23c0 	movw	r3, #4800	; 0x12c0
    5562:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5566:	681b      	ldr	r3, [r3, #0]
    5568:	429a      	cmp	r2, r3
    556a:	d906      	bls.n	557a <vTaskIncrementTick+0x162>
    556c:	68bb      	ldr	r3, [r7, #8]
    556e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5570:	f241 23c0 	movw	r3, #4800	; 0x12c0
    5574:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5578:	601a      	str	r2, [r3, #0]
    557a:	68bb      	ldr	r3, [r7, #8]
    557c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    557e:	4613      	mov	r3, r2
    5580:	009b      	lsls	r3, r3, #2
    5582:	4413      	add	r3, r2
    5584:	009b      	lsls	r3, r3, #2
    5586:	f241 12e0 	movw	r2, #4576	; 0x11e0
    558a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    558e:	441a      	add	r2, r3
    5590:	68bb      	ldr	r3, [r7, #8]
    5592:	3304      	adds	r3, #4
    5594:	4610      	mov	r0, r2
    5596:	4619      	mov	r1, r3
    5598:	f7fe fe28 	bl	41ec <vListInsertEnd>
    559c:	e7a5      	b.n	54ea <vTaskIncrementTick+0xd2>
    559e:	e00c      	b.n	55ba <vTaskIncrementTick+0x1a2>
	}
	else
	{
		++uxMissedTicks;
    55a0:	f241 23cc 	movw	r3, #4812	; 0x12cc
    55a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55a8:	681b      	ldr	r3, [r3, #0]
    55aa:	1c5a      	adds	r2, r3, #1
    55ac:	f241 23cc 	movw	r3, #4812	; 0x12cc
    55b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55b4:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    55b6:	f012 f9dd 	bl	17974 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    55ba:	f241 23cc 	movw	r3, #4812	; 0x12cc
    55be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55c2:	681b      	ldr	r3, [r3, #0]
    55c4:	2b00      	cmp	r3, #0
    55c6:	d101      	bne.n	55cc <vTaskIncrementTick+0x1b4>
		{
			vApplicationTickHook();
    55c8:	f012 f9d4 	bl	17974 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    55cc:	3710      	adds	r7, #16
    55ce:	46bd      	mov	sp, r7
    55d0:	bd80      	pop	{r7, pc}
    55d2:	bf00      	nop

000055d4 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    55d4:	b580      	push	{r7, lr}
    55d6:	b082      	sub	sp, #8
    55d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    55da:	f241 23c8 	movw	r3, #4808	; 0x12c8
    55de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55e2:	681b      	ldr	r3, [r3, #0]
    55e4:	2b00      	cmp	r3, #0
    55e6:	d006      	beq.n	55f6 <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    55e8:	f241 23d0 	movw	r3, #4816	; 0x12d0
    55ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55f0:	2201      	movs	r2, #1
    55f2:	601a      	str	r2, [r3, #0]
    55f4:	e047      	b.n	5686 <vTaskSwitchContext+0xb2>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    55f6:	f012 f9b7 	bl	17968 <myTraceSwitchedOut>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    55fa:	e00a      	b.n	5612 <vTaskSwitchContext+0x3e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    55fc:	f241 23c0 	movw	r3, #4800	; 0x12c0
    5600:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5604:	681b      	ldr	r3, [r3, #0]
    5606:	1e5a      	subs	r2, r3, #1
    5608:	f241 23c0 	movw	r3, #4800	; 0x12c0
    560c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5610:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    5612:	f241 23c0 	movw	r3, #4800	; 0x12c0
    5616:	f2c2 0300 	movt	r3, #8192	; 0x2000
    561a:	6819      	ldr	r1, [r3, #0]
    561c:	f241 12e0 	movw	r2, #4576	; 0x11e0
    5620:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5624:	460b      	mov	r3, r1
    5626:	009b      	lsls	r3, r3, #2
    5628:	440b      	add	r3, r1
    562a:	009b      	lsls	r3, r3, #2
    562c:	4413      	add	r3, r2
    562e:	681b      	ldr	r3, [r3, #0]
    5630:	2b00      	cmp	r3, #0
    5632:	d0e3      	beq.n	55fc <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    5634:	f241 23c0 	movw	r3, #4800	; 0x12c0
    5638:	f2c2 0300 	movt	r3, #8192	; 0x2000
    563c:	681a      	ldr	r2, [r3, #0]
    563e:	4613      	mov	r3, r2
    5640:	009b      	lsls	r3, r3, #2
    5642:	4413      	add	r3, r2
    5644:	009b      	lsls	r3, r3, #2
    5646:	f241 12e0 	movw	r2, #4576	; 0x11e0
    564a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    564e:	4413      	add	r3, r2
    5650:	607b      	str	r3, [r7, #4]
    5652:	687b      	ldr	r3, [r7, #4]
    5654:	685b      	ldr	r3, [r3, #4]
    5656:	685a      	ldr	r2, [r3, #4]
    5658:	687b      	ldr	r3, [r7, #4]
    565a:	605a      	str	r2, [r3, #4]
    565c:	687b      	ldr	r3, [r7, #4]
    565e:	685a      	ldr	r2, [r3, #4]
    5660:	687b      	ldr	r3, [r7, #4]
    5662:	3308      	adds	r3, #8
    5664:	429a      	cmp	r2, r3
    5666:	d104      	bne.n	5672 <vTaskSwitchContext+0x9e>
    5668:	687b      	ldr	r3, [r7, #4]
    566a:	685b      	ldr	r3, [r3, #4]
    566c:	685a      	ldr	r2, [r3, #4]
    566e:	687b      	ldr	r3, [r7, #4]
    5670:	605a      	str	r2, [r3, #4]
    5672:	687b      	ldr	r3, [r7, #4]
    5674:	685b      	ldr	r3, [r3, #4]
    5676:	68da      	ldr	r2, [r3, #12]
    5678:	f241 13dc 	movw	r3, #4572	; 0x11dc
    567c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5680:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
    5682:	f012 f96b 	bl	1795c <myTraceSwitchedIn>
	}
}
    5686:	3708      	adds	r7, #8
    5688:	46bd      	mov	sp, r7
    568a:	bd80      	pop	{r7, pc}

0000568c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    568c:	b580      	push	{r7, lr}
    568e:	b084      	sub	sp, #16
    5690:	af00      	add	r7, sp, #0
    5692:	6078      	str	r0, [r7, #4]
    5694:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    5696:	f241 13dc 	movw	r3, #4572	; 0x11dc
    569a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    569e:	681b      	ldr	r3, [r3, #0]
    56a0:	3318      	adds	r3, #24
    56a2:	6878      	ldr	r0, [r7, #4]
    56a4:	4619      	mov	r1, r3
    56a6:	f7fe fdc9 	bl	423c <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    56aa:	f241 13dc 	movw	r3, #4572	; 0x11dc
    56ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56b2:	681b      	ldr	r3, [r3, #0]
    56b4:	3304      	adds	r3, #4
    56b6:	4618      	mov	r0, r3
    56b8:	f7fe fdf8 	bl	42ac <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    56bc:	683b      	ldr	r3, [r7, #0]
    56be:	f1b3 3fff 	cmp.w	r3, #4294967295
    56c2:	d10d      	bne.n	56e0 <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    56c4:	f241 13dc 	movw	r3, #4572	; 0x11dc
    56c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56cc:	681b      	ldr	r3, [r3, #0]
    56ce:	3304      	adds	r3, #4
    56d0:	f241 20a0 	movw	r0, #4768	; 0x12a0
    56d4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    56d8:	4619      	mov	r1, r3
    56da:	f7fe fd87 	bl	41ec <vListInsertEnd>
    56de:	e00a      	b.n	56f6 <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    56e0:	f241 23b8 	movw	r3, #4792	; 0x12b8
    56e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56e8:	681a      	ldr	r2, [r3, #0]
    56ea:	683b      	ldr	r3, [r7, #0]
    56ec:	4413      	add	r3, r2
    56ee:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    56f0:	68f8      	ldr	r0, [r7, #12]
    56f2:	f000 f99f 	bl	5a34 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    56f6:	3710      	adds	r7, #16
    56f8:	46bd      	mov	sp, r7
    56fa:	bd80      	pop	{r7, pc}

000056fc <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    56fc:	b580      	push	{r7, lr}
    56fe:	b084      	sub	sp, #16
    5700:	af00      	add	r7, sp, #0
    5702:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    5704:	687b      	ldr	r3, [r7, #4]
    5706:	68db      	ldr	r3, [r3, #12]
    5708:	68db      	ldr	r3, [r3, #12]
    570a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    570c:	68bb      	ldr	r3, [r7, #8]
    570e:	3318      	adds	r3, #24
    5710:	4618      	mov	r0, r3
    5712:	f7fe fdcb 	bl	42ac <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    5716:	f241 23c8 	movw	r3, #4808	; 0x12c8
    571a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    571e:	681b      	ldr	r3, [r3, #0]
    5720:	2b00      	cmp	r3, #0
    5722:	d126      	bne.n	5772 <xTaskRemoveFromEventList+0x76>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    5724:	68bb      	ldr	r3, [r7, #8]
    5726:	3304      	adds	r3, #4
    5728:	4618      	mov	r0, r3
    572a:	f7fe fdbf 	bl	42ac <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    572e:	68bb      	ldr	r3, [r7, #8]
    5730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5732:	f241 23c0 	movw	r3, #4800	; 0x12c0
    5736:	f2c2 0300 	movt	r3, #8192	; 0x2000
    573a:	681b      	ldr	r3, [r3, #0]
    573c:	429a      	cmp	r2, r3
    573e:	d906      	bls.n	574e <xTaskRemoveFromEventList+0x52>
    5740:	68bb      	ldr	r3, [r7, #8]
    5742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5744:	f241 23c0 	movw	r3, #4800	; 0x12c0
    5748:	f2c2 0300 	movt	r3, #8192	; 0x2000
    574c:	601a      	str	r2, [r3, #0]
    574e:	68bb      	ldr	r3, [r7, #8]
    5750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5752:	4613      	mov	r3, r2
    5754:	009b      	lsls	r3, r3, #2
    5756:	4413      	add	r3, r2
    5758:	009b      	lsls	r3, r3, #2
    575a:	f241 12e0 	movw	r2, #4576	; 0x11e0
    575e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5762:	441a      	add	r2, r3
    5764:	68bb      	ldr	r3, [r7, #8]
    5766:	3304      	adds	r3, #4
    5768:	4610      	mov	r0, r2
    576a:	4619      	mov	r1, r3
    576c:	f7fe fd3e 	bl	41ec <vListInsertEnd>
    5770:	e008      	b.n	5784 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    5772:	68bb      	ldr	r3, [r7, #8]
    5774:	3318      	adds	r3, #24
    5776:	f241 2074 	movw	r0, #4724	; 0x1274
    577a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    577e:	4619      	mov	r1, r3
    5780:	f7fe fd34 	bl	41ec <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    5784:	68bb      	ldr	r3, [r7, #8]
    5786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5788:	f241 13dc 	movw	r3, #4572	; 0x11dc
    578c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5790:	681b      	ldr	r3, [r3, #0]
    5792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5794:	429a      	cmp	r2, r3
    5796:	d302      	bcc.n	579e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    5798:	2301      	movs	r3, #1
    579a:	60fb      	str	r3, [r7, #12]
    579c:	e001      	b.n	57a2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
    579e:	2300      	movs	r3, #0
    57a0:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    57a2:	68fb      	ldr	r3, [r7, #12]
}
    57a4:	4618      	mov	r0, r3
    57a6:	3710      	adds	r7, #16
    57a8:	46bd      	mov	sp, r7
    57aa:	bd80      	pop	{r7, pc}

000057ac <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    57ac:	b480      	push	{r7}
    57ae:	b083      	sub	sp, #12
    57b0:	af00      	add	r7, sp, #0
    57b2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    57b4:	f241 23d4 	movw	r3, #4820	; 0x12d4
    57b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57bc:	681a      	ldr	r2, [r3, #0]
    57be:	687b      	ldr	r3, [r7, #4]
    57c0:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    57c2:	f241 23b8 	movw	r3, #4792	; 0x12b8
    57c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57ca:	681a      	ldr	r2, [r3, #0]
    57cc:	687b      	ldr	r3, [r7, #4]
    57ce:	605a      	str	r2, [r3, #4]
}
    57d0:	370c      	adds	r7, #12
    57d2:	46bd      	mov	sp, r7
    57d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    57d8:	4770      	bx	lr
    57da:	bf00      	nop

000057dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    57dc:	b580      	push	{r7, lr}
    57de:	b084      	sub	sp, #16
    57e0:	af00      	add	r7, sp, #0
    57e2:	6078      	str	r0, [r7, #4]
    57e4:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    57e6:	f000 fb13 	bl	5e10 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    57ea:	683b      	ldr	r3, [r7, #0]
    57ec:	681b      	ldr	r3, [r3, #0]
    57ee:	f1b3 3fff 	cmp.w	r3, #4294967295
    57f2:	d102      	bne.n	57fa <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    57f4:	2300      	movs	r3, #0
    57f6:	60fb      	str	r3, [r7, #12]
    57f8:	e035      	b.n	5866 <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    57fa:	687b      	ldr	r3, [r7, #4]
    57fc:	681a      	ldr	r2, [r3, #0]
    57fe:	f241 23d4 	movw	r3, #4820	; 0x12d4
    5802:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5806:	681b      	ldr	r3, [r3, #0]
    5808:	429a      	cmp	r2, r3
    580a:	d00b      	beq.n	5824 <xTaskCheckForTimeOut+0x48>
    580c:	687b      	ldr	r3, [r7, #4]
    580e:	685a      	ldr	r2, [r3, #4]
    5810:	f241 23b8 	movw	r3, #4792	; 0x12b8
    5814:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5818:	681b      	ldr	r3, [r3, #0]
    581a:	429a      	cmp	r2, r3
    581c:	d802      	bhi.n	5824 <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    581e:	2301      	movs	r3, #1
    5820:	60fb      	str	r3, [r7, #12]
    5822:	e020      	b.n	5866 <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    5824:	f241 23b8 	movw	r3, #4792	; 0x12b8
    5828:	f2c2 0300 	movt	r3, #8192	; 0x2000
    582c:	681a      	ldr	r2, [r3, #0]
    582e:	687b      	ldr	r3, [r7, #4]
    5830:	685b      	ldr	r3, [r3, #4]
    5832:	1ad2      	subs	r2, r2, r3
    5834:	683b      	ldr	r3, [r7, #0]
    5836:	681b      	ldr	r3, [r3, #0]
    5838:	429a      	cmp	r2, r3
    583a:	d212      	bcs.n	5862 <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    583c:	683b      	ldr	r3, [r7, #0]
    583e:	681a      	ldr	r2, [r3, #0]
    5840:	687b      	ldr	r3, [r7, #4]
    5842:	6859      	ldr	r1, [r3, #4]
    5844:	f241 23b8 	movw	r3, #4792	; 0x12b8
    5848:	f2c2 0300 	movt	r3, #8192	; 0x2000
    584c:	681b      	ldr	r3, [r3, #0]
    584e:	1acb      	subs	r3, r1, r3
    5850:	441a      	add	r2, r3
    5852:	683b      	ldr	r3, [r7, #0]
    5854:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    5856:	6878      	ldr	r0, [r7, #4]
    5858:	f7ff ffa8 	bl	57ac <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    585c:	2300      	movs	r3, #0
    585e:	60fb      	str	r3, [r7, #12]
    5860:	e001      	b.n	5866 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    5862:	2301      	movs	r3, #1
    5864:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    5866:	f000 fae9 	bl	5e3c <vPortExitCritical>

	return xReturn;
    586a:	68fb      	ldr	r3, [r7, #12]
}
    586c:	4618      	mov	r0, r3
    586e:	3710      	adds	r7, #16
    5870:	46bd      	mov	sp, r7
    5872:	bd80      	pop	{r7, pc}

00005874 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    5874:	b480      	push	{r7}
    5876:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    5878:	f241 23d0 	movw	r3, #4816	; 0x12d0
    587c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5880:	2201      	movs	r2, #1
    5882:	601a      	str	r2, [r3, #0]
}
    5884:	46bd      	mov	sp, r7
    5886:	f85d 7b04 	ldr.w	r7, [sp], #4
    588a:	4770      	bx	lr

0000588c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    588c:	b580      	push	{r7, lr}
    588e:	b082      	sub	sp, #8
    5890:	af00      	add	r7, sp, #0
    5892:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    5894:	f000 f886 	bl	59a4 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    5898:	f000 faac 	bl	5df4 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    589c:	e7fa      	b.n	5894 <prvIdleTask+0x8>
    589e:	bf00      	nop

000058a0 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    58a0:	b580      	push	{r7, lr}
    58a2:	b084      	sub	sp, #16
    58a4:	af00      	add	r7, sp, #0
    58a6:	60f8      	str	r0, [r7, #12]
    58a8:	60b9      	str	r1, [r7, #8]
    58aa:	607a      	str	r2, [r7, #4]
    58ac:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    58ae:	68fb      	ldr	r3, [r7, #12]
    58b0:	3334      	adds	r3, #52	; 0x34
    58b2:	4618      	mov	r0, r3
    58b4:	68b9      	ldr	r1, [r7, #8]
    58b6:	2210      	movs	r2, #16
    58b8:	f013 f8f8 	bl	18aac <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    58bc:	68fb      	ldr	r3, [r7, #12]
    58be:	2200      	movs	r2, #0
    58c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    58c4:	687b      	ldr	r3, [r7, #4]
    58c6:	2b04      	cmp	r3, #4
    58c8:	d901      	bls.n	58ce <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    58ca:	2304      	movs	r3, #4
    58cc:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    58ce:	68fb      	ldr	r3, [r7, #12]
    58d0:	687a      	ldr	r2, [r7, #4]
    58d2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    58d4:	68fb      	ldr	r3, [r7, #12]
    58d6:	687a      	ldr	r2, [r7, #4]
    58d8:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    58da:	68fb      	ldr	r3, [r7, #12]
    58dc:	3304      	adds	r3, #4
    58de:	4618      	mov	r0, r3
    58e0:	f7fe fc78 	bl	41d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    58e4:	68fb      	ldr	r3, [r7, #12]
    58e6:	3318      	adds	r3, #24
    58e8:	4618      	mov	r0, r3
    58ea:	f7fe fc73 	bl	41d4 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    58ee:	68fb      	ldr	r3, [r7, #12]
    58f0:	68fa      	ldr	r2, [r7, #12]
    58f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    58f4:	687b      	ldr	r3, [r7, #4]
    58f6:	f1c3 0205 	rsb	r2, r3, #5
    58fa:	68fb      	ldr	r3, [r7, #12]
    58fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    58fe:	68fb      	ldr	r3, [r7, #12]
    5900:	68fa      	ldr	r2, [r7, #12]
    5902:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    5904:	3710      	adds	r7, #16
    5906:	46bd      	mov	sp, r7
    5908:	bd80      	pop	{r7, pc}
    590a:	bf00      	nop

0000590c <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    590c:	b580      	push	{r7, lr}
    590e:	b082      	sub	sp, #8
    5910:	af00      	add	r7, sp, #0
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    5912:	2300      	movs	r3, #0
    5914:	607b      	str	r3, [r7, #4]
    5916:	e00f      	b.n	5938 <prvInitialiseTaskLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    5918:	687a      	ldr	r2, [r7, #4]
    591a:	4613      	mov	r3, r2
    591c:	009b      	lsls	r3, r3, #2
    591e:	4413      	add	r3, r2
    5920:	009b      	lsls	r3, r3, #2
    5922:	f241 12e0 	movw	r2, #4576	; 0x11e0
    5926:	f2c2 0200 	movt	r2, #8192	; 0x2000
    592a:	4413      	add	r3, r2
    592c:	4618      	mov	r0, r3
    592e:	f7fe fc31 	bl	4194 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    5932:	687b      	ldr	r3, [r7, #4]
    5934:	3301      	adds	r3, #1
    5936:	607b      	str	r3, [r7, #4]
    5938:	687b      	ldr	r3, [r7, #4]
    593a:	2b04      	cmp	r3, #4
    593c:	d9ec      	bls.n	5918 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    593e:	f241 2044 	movw	r0, #4676	; 0x1244
    5942:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5946:	f7fe fc25 	bl	4194 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    594a:	f241 2058 	movw	r0, #4696	; 0x1258
    594e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5952:	f7fe fc1f 	bl	4194 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    5956:	f241 2074 	movw	r0, #4724	; 0x1274
    595a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    595e:	f7fe fc19 	bl	4194 <vListInitialise>


	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    5962:	f241 2088 	movw	r0, #4744	; 0x1288
    5966:	f2c2 0000 	movt	r0, #8192	; 0x2000
    596a:	f7fe fc13 	bl	4194 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    596e:	f241 20a0 	movw	r0, #4768	; 0x12a0
    5972:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5976:	f7fe fc0d 	bl	4194 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    597a:	f241 236c 	movw	r3, #4716	; 0x126c
    597e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5982:	f241 2244 	movw	r2, #4676	; 0x1244
    5986:	f2c2 0200 	movt	r2, #8192	; 0x2000
    598a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    598c:	f241 2370 	movw	r3, #4720	; 0x1270
    5990:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5994:	f241 2258 	movw	r2, #4696	; 0x1258
    5998:	f2c2 0200 	movt	r2, #8192	; 0x2000
    599c:	601a      	str	r2, [r3, #0]
}
    599e:	3708      	adds	r7, #8
    59a0:	46bd      	mov	sp, r7
    59a2:	bd80      	pop	{r7, pc}

000059a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    59a4:	b580      	push	{r7, lr}
    59a6:	b082      	sub	sp, #8
    59a8:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    59aa:	f241 239c 	movw	r3, #4764	; 0x129c
    59ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59b2:	681b      	ldr	r3, [r3, #0]
    59b4:	2b00      	cmp	r3, #0
    59b6:	d03a      	beq.n	5a2e <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    59b8:	f7ff fc4c 	bl	5254 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    59bc:	f241 2388 	movw	r3, #4744	; 0x1288
    59c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59c4:	681b      	ldr	r3, [r3, #0]
    59c6:	2b00      	cmp	r3, #0
    59c8:	bf14      	ite	ne
    59ca:	2300      	movne	r3, #0
    59cc:	2301      	moveq	r3, #1
    59ce:	b2db      	uxtb	r3, r3
    59d0:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    59d2:	f7ff fc51 	bl	5278 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    59d6:	687b      	ldr	r3, [r7, #4]
    59d8:	2b00      	cmp	r3, #0
    59da:	d128      	bne.n	5a2e <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    59dc:	f000 fa18 	bl	5e10 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    59e0:	f241 2388 	movw	r3, #4744	; 0x1288
    59e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59e8:	68db      	ldr	r3, [r3, #12]
    59ea:	68db      	ldr	r3, [r3, #12]
    59ec:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    59ee:	683b      	ldr	r3, [r7, #0]
    59f0:	3304      	adds	r3, #4
    59f2:	4618      	mov	r0, r3
    59f4:	f7fe fc5a 	bl	42ac <vListRemove>
					--uxCurrentNumberOfTasks;
    59f8:	f241 23b4 	movw	r3, #4788	; 0x12b4
    59fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a00:	681b      	ldr	r3, [r3, #0]
    5a02:	1e5a      	subs	r2, r3, #1
    5a04:	f241 23b4 	movw	r3, #4788	; 0x12b4
    5a08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a0c:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    5a0e:	f241 239c 	movw	r3, #4764	; 0x129c
    5a12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a16:	681b      	ldr	r3, [r3, #0]
    5a18:	1e5a      	subs	r2, r3, #1
    5a1a:	f241 239c 	movw	r3, #4764	; 0x129c
    5a1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a22:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    5a24:	f000 fa0a 	bl	5e3c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    5a28:	6838      	ldr	r0, [r7, #0]
    5a2a:	f000 f879 	bl	5b20 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    5a2e:	3708      	adds	r7, #8
    5a30:	46bd      	mov	sp, r7
    5a32:	bd80      	pop	{r7, pc}

00005a34 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    5a34:	b580      	push	{r7, lr}
    5a36:	b082      	sub	sp, #8
    5a38:	af00      	add	r7, sp, #0
    5a3a:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    5a3c:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5a40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a44:	681b      	ldr	r3, [r3, #0]
    5a46:	687a      	ldr	r2, [r7, #4]
    5a48:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    5a4a:	f241 23b8 	movw	r3, #4792	; 0x12b8
    5a4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a52:	681b      	ldr	r3, [r3, #0]
    5a54:	687a      	ldr	r2, [r7, #4]
    5a56:	429a      	cmp	r2, r3
    5a58:	d20f      	bcs.n	5a7a <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5a5a:	f241 2370 	movw	r3, #4720	; 0x1270
    5a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a62:	681a      	ldr	r2, [r3, #0]
    5a64:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a6c:	681b      	ldr	r3, [r3, #0]
    5a6e:	3304      	adds	r3, #4
    5a70:	4610      	mov	r0, r2
    5a72:	4619      	mov	r1, r3
    5a74:	f7fe fbe2 	bl	423c <vListInsert>
    5a78:	e01c      	b.n	5ab4 <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5a7a:	f241 236c 	movw	r3, #4716	; 0x126c
    5a7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a82:	681a      	ldr	r2, [r3, #0]
    5a84:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5a88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a8c:	681b      	ldr	r3, [r3, #0]
    5a8e:	3304      	adds	r3, #4
    5a90:	4610      	mov	r0, r2
    5a92:	4619      	mov	r1, r3
    5a94:	f7fe fbd2 	bl	423c <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    5a98:	f240 5330 	movw	r3, #1328	; 0x530
    5a9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5aa0:	681b      	ldr	r3, [r3, #0]
    5aa2:	687a      	ldr	r2, [r7, #4]
    5aa4:	429a      	cmp	r2, r3
    5aa6:	d205      	bcs.n	5ab4 <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    5aa8:	f240 5330 	movw	r3, #1328	; 0x530
    5aac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ab0:	687a      	ldr	r2, [r7, #4]
    5ab2:	601a      	str	r2, [r3, #0]
		}
	}
}
    5ab4:	3708      	adds	r7, #8
    5ab6:	46bd      	mov	sp, r7
    5ab8:	bd80      	pop	{r7, pc}
    5aba:	bf00      	nop

00005abc <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    5abc:	b580      	push	{r7, lr}
    5abe:	b084      	sub	sp, #16
    5ac0:	af00      	add	r7, sp, #0
    5ac2:	4603      	mov	r3, r0
    5ac4:	6039      	str	r1, [r7, #0]
    5ac6:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    5ac8:	2050      	movs	r0, #80	; 0x50
    5aca:	f000 fa1b 	bl	5f04 <pvPortMalloc>
    5ace:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    5ad0:	68fb      	ldr	r3, [r7, #12]
    5ad2:	2b00      	cmp	r3, #0
    5ad4:	d01f      	beq.n	5b16 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    5ad6:	683b      	ldr	r3, [r7, #0]
    5ad8:	2b00      	cmp	r3, #0
    5ada:	d106      	bne.n	5aea <prvAllocateTCBAndStack+0x2e>
    5adc:	88fb      	ldrh	r3, [r7, #6]
    5ade:	009b      	lsls	r3, r3, #2
    5ae0:	4618      	mov	r0, r3
    5ae2:	f000 fa0f 	bl	5f04 <pvPortMalloc>
    5ae6:	4603      	mov	r3, r0
    5ae8:	e000      	b.n	5aec <prvAllocateTCBAndStack+0x30>
    5aea:	683b      	ldr	r3, [r7, #0]
    5aec:	68fa      	ldr	r2, [r7, #12]
    5aee:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    5af0:	68fb      	ldr	r3, [r7, #12]
    5af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5af4:	2b00      	cmp	r3, #0
    5af6:	d105      	bne.n	5b04 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    5af8:	68f8      	ldr	r0, [r7, #12]
    5afa:	f000 fac7 	bl	608c <vPortFree>
			pxNewTCB = NULL;
    5afe:	2300      	movs	r3, #0
    5b00:	60fb      	str	r3, [r7, #12]
    5b02:	e008      	b.n	5b16 <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    5b04:	68fb      	ldr	r3, [r7, #12]
    5b06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    5b08:	88fb      	ldrh	r3, [r7, #6]
    5b0a:	009b      	lsls	r3, r3, #2
    5b0c:	4610      	mov	r0, r2
    5b0e:	21a5      	movs	r1, #165	; 0xa5
    5b10:	461a      	mov	r2, r3
    5b12:	f012 ff7b 	bl	18a0c <memset>
		}
	}

	return pxNewTCB;
    5b16:	68fb      	ldr	r3, [r7, #12]
}
    5b18:	4618      	mov	r0, r3
    5b1a:	3710      	adds	r7, #16
    5b1c:	46bd      	mov	sp, r7
    5b1e:	bd80      	pop	{r7, pc}

00005b20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    5b20:	b580      	push	{r7, lr}
    5b22:	b082      	sub	sp, #8
    5b24:	af00      	add	r7, sp, #0
    5b26:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    5b28:	687b      	ldr	r3, [r7, #4]
    5b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5b2c:	4618      	mov	r0, r3
    5b2e:	f000 faad 	bl	608c <vPortFree>
		vPortFree( pxTCB );
    5b32:	6878      	ldr	r0, [r7, #4]
    5b34:	f000 faaa 	bl	608c <vPortFree>
	}
    5b38:	3708      	adds	r7, #8
    5b3a:	46bd      	mov	sp, r7
    5b3c:	bd80      	pop	{r7, pc}
    5b3e:	bf00      	nop

00005b40 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    5b40:	b480      	push	{r7}
    5b42:	b083      	sub	sp, #12
    5b44:	af00      	add	r7, sp, #0
        xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    5b46:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5b4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b4e:	681b      	ldr	r3, [r3, #0]
    5b50:	607b      	str	r3, [r7, #4]

		return xReturn;
    5b52:	687b      	ldr	r3, [r7, #4]
	}
    5b54:	4618      	mov	r0, r3
    5b56:	370c      	adds	r7, #12
    5b58:	46bd      	mov	sp, r7
    5b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b5e:	4770      	bx	lr

00005b60 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    5b60:	b580      	push	{r7, lr}
    5b62:	b084      	sub	sp, #16
    5b64:	af00      	add	r7, sp, #0
    5b66:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5b68:	687b      	ldr	r3, [r7, #4]
    5b6a:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    5b6c:	68fb      	ldr	r3, [r7, #12]
    5b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b70:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5b74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b78:	681b      	ldr	r3, [r3, #0]
    5b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5b7c:	429a      	cmp	r2, r3
    5b7e:	d24f      	bcs.n	5c20 <vTaskPriorityInherit+0xc0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    5b80:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5b84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b88:	681b      	ldr	r3, [r3, #0]
    5b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5b8c:	f1c3 0205 	rsb	r2, r3, #5
    5b90:	68fb      	ldr	r3, [r7, #12]
    5b92:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    5b94:	68fb      	ldr	r3, [r7, #12]
    5b96:	6959      	ldr	r1, [r3, #20]
    5b98:	68fb      	ldr	r3, [r7, #12]
    5b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b9c:	4613      	mov	r3, r2
    5b9e:	009b      	lsls	r3, r3, #2
    5ba0:	4413      	add	r3, r2
    5ba2:	009b      	lsls	r3, r3, #2
    5ba4:	f241 12e0 	movw	r2, #4576	; 0x11e0
    5ba8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5bac:	4413      	add	r3, r2
    5bae:	4299      	cmp	r1, r3
    5bb0:	d12e      	bne.n	5c10 <vTaskPriorityInherit+0xb0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    5bb2:	68fb      	ldr	r3, [r7, #12]
    5bb4:	3304      	adds	r3, #4
    5bb6:	4618      	mov	r0, r3
    5bb8:	f7fe fb78 	bl	42ac <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5bbc:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5bc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bc4:	681b      	ldr	r3, [r3, #0]
    5bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5bc8:	68fb      	ldr	r3, [r7, #12]
    5bca:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    5bcc:	68fb      	ldr	r3, [r7, #12]
    5bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5bd0:	f241 23c0 	movw	r3, #4800	; 0x12c0
    5bd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bd8:	681b      	ldr	r3, [r3, #0]
    5bda:	429a      	cmp	r2, r3
    5bdc:	d906      	bls.n	5bec <vTaskPriorityInherit+0x8c>
    5bde:	68fb      	ldr	r3, [r7, #12]
    5be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5be2:	f241 23c0 	movw	r3, #4800	; 0x12c0
    5be6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bea:	601a      	str	r2, [r3, #0]
    5bec:	68fb      	ldr	r3, [r7, #12]
    5bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5bf0:	4613      	mov	r3, r2
    5bf2:	009b      	lsls	r3, r3, #2
    5bf4:	4413      	add	r3, r2
    5bf6:	009b      	lsls	r3, r3, #2
    5bf8:	f241 12e0 	movw	r2, #4576	; 0x11e0
    5bfc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5c00:	441a      	add	r2, r3
    5c02:	68fb      	ldr	r3, [r7, #12]
    5c04:	3304      	adds	r3, #4
    5c06:	4610      	mov	r0, r2
    5c08:	4619      	mov	r1, r3
    5c0a:	f7fe faef 	bl	41ec <vListInsertEnd>
    5c0e:	e007      	b.n	5c20 <vTaskPriorityInherit+0xc0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5c10:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5c14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c18:	681b      	ldr	r3, [r3, #0]
    5c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5c1c:	68fb      	ldr	r3, [r7, #12]
    5c1e:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    5c20:	3710      	adds	r7, #16
    5c22:	46bd      	mov	sp, r7
    5c24:	bd80      	pop	{r7, pc}
    5c26:	bf00      	nop

00005c28 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    5c28:	b580      	push	{r7, lr}
    5c2a:	b084      	sub	sp, #16
    5c2c:	af00      	add	r7, sp, #0
    5c2e:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5c30:	687b      	ldr	r3, [r7, #4]
    5c32:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    5c34:	687b      	ldr	r3, [r7, #4]
    5c36:	2b00      	cmp	r3, #0
    5c38:	d035      	beq.n	5ca6 <vTaskPriorityDisinherit+0x7e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    5c3a:	68fb      	ldr	r3, [r7, #12]
    5c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5c3e:	68fb      	ldr	r3, [r7, #12]
    5c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5c42:	429a      	cmp	r2, r3
    5c44:	d02f      	beq.n	5ca6 <vTaskPriorityDisinherit+0x7e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    5c46:	68fb      	ldr	r3, [r7, #12]
    5c48:	3304      	adds	r3, #4
    5c4a:	4618      	mov	r0, r3
    5c4c:	f7fe fb2e 	bl	42ac <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    5c50:	68fb      	ldr	r3, [r7, #12]
    5c52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    5c54:	68fb      	ldr	r3, [r7, #12]
    5c56:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    5c58:	68fb      	ldr	r3, [r7, #12]
    5c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5c5c:	f1c3 0205 	rsb	r2, r3, #5
    5c60:	68fb      	ldr	r3, [r7, #12]
    5c62:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    5c64:	68fb      	ldr	r3, [r7, #12]
    5c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5c68:	f241 23c0 	movw	r3, #4800	; 0x12c0
    5c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c70:	681b      	ldr	r3, [r3, #0]
    5c72:	429a      	cmp	r2, r3
    5c74:	d906      	bls.n	5c84 <vTaskPriorityDisinherit+0x5c>
    5c76:	68fb      	ldr	r3, [r7, #12]
    5c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5c7a:	f241 23c0 	movw	r3, #4800	; 0x12c0
    5c7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c82:	601a      	str	r2, [r3, #0]
    5c84:	68fb      	ldr	r3, [r7, #12]
    5c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5c88:	4613      	mov	r3, r2
    5c8a:	009b      	lsls	r3, r3, #2
    5c8c:	4413      	add	r3, r2
    5c8e:	009b      	lsls	r3, r3, #2
    5c90:	f241 12e0 	movw	r2, #4576	; 0x11e0
    5c94:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5c98:	441a      	add	r2, r3
    5c9a:	68fb      	ldr	r3, [r7, #12]
    5c9c:	3304      	adds	r3, #4
    5c9e:	4610      	mov	r0, r2
    5ca0:	4619      	mov	r1, r3
    5ca2:	f7fe faa3 	bl	41ec <vListInsertEnd>
			}
		}
	}
    5ca6:	3710      	adds	r7, #16
    5ca8:	46bd      	mov	sp, r7
    5caa:	bd80      	pop	{r7, pc}

00005cac <xTaskGetxStartTime>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_SEFM == 1)

    portTickType xTaskGetxStartTime( xTaskHandle pxTCB )
    {
    5cac:	b480      	push	{r7}
    5cae:	b083      	sub	sp, #12
    5cb0:	af00      	add	r7, sp, #0
    5cb2:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xStartTime;
    5cb4:	687b      	ldr	r3, [r7, #4]
    5cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    }
    5cb8:	4618      	mov	r0, r3
    5cba:	370c      	adds	r7, #12
    5cbc:	46bd      	mov	sp, r7
    5cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cc2:	4770      	bx	lr

00005cc4 <xTaskGetxLet>:

    portTickType xTaskGetxLet( xTaskHandle pxTCB )
    {
    5cc4:	b480      	push	{r7}
    5cc6:	b083      	sub	sp, #12
    5cc8:	af00      	add	r7, sp, #0
    5cca:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xLet;
    5ccc:	687b      	ldr	r3, [r7, #4]
    5cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
    5cd0:	4618      	mov	r0, r3
    5cd2:	370c      	adds	r7, #12
    5cd4:	46bd      	mov	sp, r7
    5cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cda:	4770      	bx	lr

00005cdc <vTaskSetxStartTime>:

    void vTaskSetxStartTime ( xTaskHandle pxTCB, portTickType xStartTime )
    {
    5cdc:	b480      	push	{r7}
    5cde:	b083      	sub	sp, #12
    5ce0:	af00      	add	r7, sp, #0
    5ce2:	6078      	str	r0, [r7, #4]
    5ce4:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xStartTime = xStartTime; 
    5ce6:	687b      	ldr	r3, [r7, #4]
    5ce8:	683a      	ldr	r2, [r7, #0]
    5cea:	645a      	str	r2, [r3, #68]	; 0x44
    }
    5cec:	370c      	adds	r7, #12
    5cee:	46bd      	mov	sp, r7
    5cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cf4:	4770      	bx	lr
    5cf6:	bf00      	nop

00005cf8 <vTaskSetxLet>:

    void vTaskSetxLet( xTaskHandle pxTCB, portTickType xLet )
    {
    5cf8:	b480      	push	{r7}
    5cfa:	b083      	sub	sp, #12
    5cfc:	af00      	add	r7, sp, #0
    5cfe:	6078      	str	r0, [r7, #4]
    5d00:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xLet = xLet;
    5d02:	687b      	ldr	r3, [r7, #4]
    5d04:	683a      	ldr	r2, [r7, #0]
    5d06:	649a      	str	r2, [r3, #72]	; 0x48
    }
    5d08:	370c      	adds	r7, #12
    5d0a:	46bd      	mov	sp, r7
    5d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d10:	4770      	bx	lr
    5d12:	bf00      	nop

00005d14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    5d14:	b480      	push	{r7}
    5d16:	b085      	sub	sp, #20
    5d18:	af00      	add	r7, sp, #0
    5d1a:	60f8      	str	r0, [r7, #12]
    5d1c:	60b9      	str	r1, [r7, #8]
    5d1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    5d20:	68fb      	ldr	r3, [r7, #12]
    5d22:	3b04      	subs	r3, #4
    5d24:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    5d26:	68fb      	ldr	r3, [r7, #12]
    5d28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5d2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5d2e:	68fb      	ldr	r3, [r7, #12]
    5d30:	3b04      	subs	r3, #4
    5d32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    5d34:	68ba      	ldr	r2, [r7, #8]
    5d36:	68fb      	ldr	r3, [r7, #12]
    5d38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5d3a:	68fb      	ldr	r3, [r7, #12]
    5d3c:	3b04      	subs	r3, #4
    5d3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    5d40:	68fb      	ldr	r3, [r7, #12]
    5d42:	2200      	movs	r2, #0
    5d44:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    5d46:	68fb      	ldr	r3, [r7, #12]
    5d48:	3b14      	subs	r3, #20
    5d4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    5d4c:	687a      	ldr	r2, [r7, #4]
    5d4e:	68fb      	ldr	r3, [r7, #12]
    5d50:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    5d52:	68fb      	ldr	r3, [r7, #12]
    5d54:	3b20      	subs	r3, #32
    5d56:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    5d58:	68fb      	ldr	r3, [r7, #12]
}
    5d5a:	4618      	mov	r0, r3
    5d5c:	3714      	adds	r7, #20
    5d5e:	46bd      	mov	sp, r7
    5d60:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d64:	4770      	bx	lr
    5d66:	bf00      	nop

00005d68 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    5d68:	4b06      	ldr	r3, [pc, #24]	; (5d84 <pxCurrentTCBConst2>)
    5d6a:	6819      	ldr	r1, [r3, #0]
    5d6c:	6808      	ldr	r0, [r1, #0]
    5d6e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5d72:	f380 8809 	msr	PSP, r0
    5d76:	f04f 0000 	mov.w	r0, #0
    5d7a:	f380 8811 	msr	BASEPRI, r0
    5d7e:	f04e 0e0d 	orr.w	lr, lr, #13
    5d82:	4770      	bx	lr

00005d84 <pxCurrentTCBConst2>:
    5d84:	200011dc 	.word	0x200011dc

00005d88 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    5d88:	485d      	ldr	r0, [pc, #372]	; (5f00 <prvSetupTimerInterrupt+0x2c>)
    5d8a:	6800      	ldr	r0, [r0, #0]
    5d8c:	6800      	ldr	r0, [r0, #0]
    5d8e:	f380 8808 	msr	MSP, r0
    5d92:	b662      	cpsie	i
    5d94:	df00      	svc	0
    5d96:	bf00      	nop

00005d98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    5d98:	b580      	push	{r7, lr}
    5d9a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    5d9c:	f64e 5320 	movw	r3, #60704	; 0xed20
    5da0:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5da4:	f64e 5220 	movw	r2, #60704	; 0xed20
    5da8:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5dac:	6812      	ldr	r2, [r2, #0]
    5dae:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    5db2:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    5db4:	f64e 5320 	movw	r3, #60704	; 0xed20
    5db8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5dbc:	f64e 5220 	movw	r2, #60704	; 0xed20
    5dc0:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5dc4:	6812      	ldr	r2, [r2, #0]
    5dc6:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    5dca:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    5dcc:	f000 f882 	bl	5ed4 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    5dd0:	f240 5334 	movw	r3, #1332	; 0x534
    5dd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dd8:	2200      	movs	r2, #0
    5dda:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    5ddc:	f7ff ffd4 	bl	5d88 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    5de0:	2300      	movs	r3, #0
}
    5de2:	4618      	mov	r0, r3
    5de4:	bd80      	pop	{r7, pc}
    5de6:	bf00      	nop

00005de8 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    5de8:	b480      	push	{r7}
    5dea:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    5dec:	46bd      	mov	sp, r7
    5dee:	f85d 7b04 	ldr.w	r7, [sp], #4
    5df2:	4770      	bx	lr

00005df4 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    5df4:	b480      	push	{r7}
    5df6:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    5df8:	f64e 5304 	movw	r3, #60676	; 0xed04
    5dfc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5e04:	601a      	str	r2, [r3, #0]
}
    5e06:	46bd      	mov	sp, r7
    5e08:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e0c:	4770      	bx	lr
    5e0e:	bf00      	nop

00005e10 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    5e10:	b480      	push	{r7}
    5e12:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    5e14:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5e18:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    5e1c:	f240 5334 	movw	r3, #1332	; 0x534
    5e20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e24:	681b      	ldr	r3, [r3, #0]
    5e26:	1c5a      	adds	r2, r3, #1
    5e28:	f240 5334 	movw	r3, #1332	; 0x534
    5e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e30:	601a      	str	r2, [r3, #0]
}
    5e32:	46bd      	mov	sp, r7
    5e34:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e38:	4770      	bx	lr
    5e3a:	bf00      	nop

00005e3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    5e3c:	b480      	push	{r7}
    5e3e:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    5e40:	f240 5334 	movw	r3, #1332	; 0x534
    5e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e48:	681b      	ldr	r3, [r3, #0]
    5e4a:	1e5a      	subs	r2, r3, #1
    5e4c:	f240 5334 	movw	r3, #1332	; 0x534
    5e50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e54:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    5e56:	f240 5334 	movw	r3, #1332	; 0x534
    5e5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e5e:	681b      	ldr	r3, [r3, #0]
    5e60:	2b00      	cmp	r3, #0
    5e62:	d103      	bne.n	5e6c <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    5e64:	f04f 0000 	mov.w	r0, #0
    5e68:	f380 8811 	msr	BASEPRI, r0
	}
}
    5e6c:	46bd      	mov	sp, r7
    5e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e72:	4770      	bx	lr

00005e74 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    5e74:	f3ef 8009 	mrs	r0, PSP
    5e78:	4b0c      	ldr	r3, [pc, #48]	; (5eac <pxCurrentTCBConst>)
    5e7a:	681a      	ldr	r2, [r3, #0]
    5e7c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5e80:	6010      	str	r0, [r2, #0]
    5e82:	e92d 4008 	stmdb	sp!, {r3, lr}
    5e86:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5e8a:	f380 8811 	msr	BASEPRI, r0
    5e8e:	f7ff fba1 	bl	55d4 <vTaskSwitchContext>
    5e92:	f04f 0000 	mov.w	r0, #0
    5e96:	f380 8811 	msr	BASEPRI, r0
    5e9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5e9e:	6819      	ldr	r1, [r3, #0]
    5ea0:	6808      	ldr	r0, [r1, #0]
    5ea2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5ea6:	f380 8809 	msr	PSP, r0
    5eaa:	4770      	bx	lr

00005eac <pxCurrentTCBConst>:
    5eac:	200011dc 	.word	0x200011dc

00005eb0 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    5eb0:	b580      	push	{r7, lr}
    5eb2:	b082      	sub	sp, #8
    5eb4:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    5eb6:	2300      	movs	r3, #0
    5eb8:	607b      	str	r3, [r7, #4]
    5eba:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5ebe:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    5ec2:	f7ff faa9 	bl	5418 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    5ec6:	f04f 0000 	mov.w	r0, #0
    5eca:	f380 8811 	msr	BASEPRI, r0
}
    5ece:	3708      	adds	r7, #8
    5ed0:	46bd      	mov	sp, r7
    5ed2:	bd80      	pop	{r7, pc}

00005ed4 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    5ed4:	b480      	push	{r7}
    5ed6:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    5ed8:	f24e 0314 	movw	r3, #57364	; 0xe014
    5edc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5ee0:	f644 32bf 	movw	r2, #19391	; 0x4bbf
    5ee4:	f2c0 0203 	movt	r2, #3
    5ee8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    5eea:	f24e 0310 	movw	r3, #57360	; 0xe010
    5eee:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5ef2:	2207      	movs	r2, #7
    5ef4:	601a      	str	r2, [r3, #0]
}
    5ef6:	46bd      	mov	sp, r7
    5ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5efc:	4770      	bx	lr
    5efe:	0000      	.short	0x0000
    5f00:	e000ed08 	.word	0xe000ed08

00005f04 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    5f04:	b580      	push	{r7, lr}
    5f06:	b08a      	sub	sp, #40	; 0x28
    5f08:	af00      	add	r7, sp, #0
    5f0a:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    5f0c:	2300      	movs	r3, #0
    5f0e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    5f10:	f7ff f9a0 	bl	5254 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    5f14:	f24c 23f0 	movw	r3, #49904	; 0xc2f0
    5f18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f1c:	681b      	ldr	r3, [r3, #0]
    5f1e:	2b00      	cmp	r3, #0
    5f20:	d130      	bne.n	5f84 <pvPortMalloc+0x80>
		{
			prvHeapInit();
    5f22:	f24c 23e0 	movw	r3, #49888	; 0xc2e0
    5f26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f2a:	f241 22e0 	movw	r2, #4832	; 0x12e0
    5f2e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5f32:	601a      	str	r2, [r3, #0]
    5f34:	f24c 23e0 	movw	r3, #49888	; 0xc2e0
    5f38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f3c:	2200      	movs	r2, #0
    5f3e:	605a      	str	r2, [r3, #4]
    5f40:	f24c 23e8 	movw	r3, #49896	; 0xc2e8
    5f44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f48:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    5f4c:	605a      	str	r2, [r3, #4]
    5f4e:	f24c 23e8 	movw	r3, #49896	; 0xc2e8
    5f52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f56:	2200      	movs	r2, #0
    5f58:	601a      	str	r2, [r3, #0]
    5f5a:	f241 23e0 	movw	r3, #4832	; 0x12e0
    5f5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f62:	617b      	str	r3, [r7, #20]
    5f64:	697b      	ldr	r3, [r7, #20]
    5f66:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    5f6a:	605a      	str	r2, [r3, #4]
    5f6c:	697a      	ldr	r2, [r7, #20]
    5f6e:	f24c 23e8 	movw	r3, #49896	; 0xc2e8
    5f72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f76:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    5f78:	f24c 23f0 	movw	r3, #49904	; 0xc2f0
    5f7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f80:	2201      	movs	r2, #1
    5f82:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    5f84:	687b      	ldr	r3, [r7, #4]
    5f86:	2b00      	cmp	r3, #0
    5f88:	d00d      	beq.n	5fa6 <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    5f8a:	2310      	movs	r3, #16
    5f8c:	687a      	ldr	r2, [r7, #4]
    5f8e:	4413      	add	r3, r2
    5f90:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    5f92:	687b      	ldr	r3, [r7, #4]
    5f94:	f003 0307 	and.w	r3, r3, #7
    5f98:	2b00      	cmp	r3, #0
    5f9a:	d004      	beq.n	5fa6 <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    5f9c:	687b      	ldr	r3, [r7, #4]
    5f9e:	f023 0307 	bic.w	r3, r3, #7
    5fa2:	3308      	adds	r3, #8
    5fa4:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    5fa6:	687b      	ldr	r3, [r7, #4]
    5fa8:	2b00      	cmp	r3, #0
    5faa:	d068      	beq.n	607e <pvPortMalloc+0x17a>
    5fac:	687b      	ldr	r3, [r7, #4]
    5fae:	f5b3 2f96 	cmp.w	r3, #307200	; 0x4b000
    5fb2:	d264      	bcs.n	607e <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    5fb4:	f24c 23e0 	movw	r3, #49888	; 0xc2e0
    5fb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fbc:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    5fbe:	f24c 23e0 	movw	r3, #49888	; 0xc2e0
    5fc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fc6:	681b      	ldr	r3, [r3, #0]
    5fc8:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5fca:	e004      	b.n	5fd6 <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    5fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5fce:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    5fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5fd2:	681b      	ldr	r3, [r3, #0]
    5fd4:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5fd8:	685a      	ldr	r2, [r3, #4]
    5fda:	687b      	ldr	r3, [r7, #4]
    5fdc:	429a      	cmp	r2, r3
    5fde:	d203      	bcs.n	5fe8 <pvPortMalloc+0xe4>
    5fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5fe2:	681b      	ldr	r3, [r3, #0]
    5fe4:	2b00      	cmp	r3, #0
    5fe6:	d1f1      	bne.n	5fcc <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    5fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5fea:	f24c 23e8 	movw	r3, #49896	; 0xc2e8
    5fee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ff2:	429a      	cmp	r2, r3
    5ff4:	d043      	beq.n	607e <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    5ff6:	6a3b      	ldr	r3, [r7, #32]
    5ff8:	681a      	ldr	r2, [r3, #0]
    5ffa:	2310      	movs	r3, #16
    5ffc:	4413      	add	r3, r2
    5ffe:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    6000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6002:	681a      	ldr	r2, [r3, #0]
    6004:	6a3b      	ldr	r3, [r7, #32]
    6006:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    6008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    600a:	685a      	ldr	r2, [r3, #4]
    600c:	687b      	ldr	r3, [r7, #4]
    600e:	1ad2      	subs	r2, r2, r3
    6010:	2310      	movs	r3, #16
    6012:	005b      	lsls	r3, r3, #1
    6014:	429a      	cmp	r2, r3
    6016:	d925      	bls.n	6064 <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    6018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    601a:	687b      	ldr	r3, [r7, #4]
    601c:	4413      	add	r3, r2
    601e:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    6020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6022:	685a      	ldr	r2, [r3, #4]
    6024:	687b      	ldr	r3, [r7, #4]
    6026:	1ad2      	subs	r2, r2, r3
    6028:	693b      	ldr	r3, [r7, #16]
    602a:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    602e:	687a      	ldr	r2, [r7, #4]
    6030:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    6032:	693b      	ldr	r3, [r7, #16]
    6034:	685b      	ldr	r3, [r3, #4]
    6036:	60fb      	str	r3, [r7, #12]
    6038:	f24c 23e0 	movw	r3, #49888	; 0xc2e0
    603c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6040:	61bb      	str	r3, [r7, #24]
    6042:	e002      	b.n	604a <pvPortMalloc+0x146>
    6044:	69bb      	ldr	r3, [r7, #24]
    6046:	681b      	ldr	r3, [r3, #0]
    6048:	61bb      	str	r3, [r7, #24]
    604a:	69bb      	ldr	r3, [r7, #24]
    604c:	681b      	ldr	r3, [r3, #0]
    604e:	685a      	ldr	r2, [r3, #4]
    6050:	68fb      	ldr	r3, [r7, #12]
    6052:	429a      	cmp	r2, r3
    6054:	d3f6      	bcc.n	6044 <pvPortMalloc+0x140>
    6056:	69bb      	ldr	r3, [r7, #24]
    6058:	681a      	ldr	r2, [r3, #0]
    605a:	693b      	ldr	r3, [r7, #16]
    605c:	601a      	str	r2, [r3, #0]
    605e:	69bb      	ldr	r3, [r7, #24]
    6060:	693a      	ldr	r2, [r7, #16]
    6062:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    6064:	f240 5338 	movw	r3, #1336	; 0x538
    6068:	f2c2 0300 	movt	r3, #8192	; 0x2000
    606c:	681a      	ldr	r2, [r3, #0]
    606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6070:	685b      	ldr	r3, [r3, #4]
    6072:	1ad2      	subs	r2, r2, r3
    6074:	f240 5338 	movw	r3, #1336	; 0x538
    6078:	f2c2 0300 	movt	r3, #8192	; 0x2000
    607c:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    607e:	f7ff f8fb 	bl	5278 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    6082:	69fb      	ldr	r3, [r7, #28]
}
    6084:	4618      	mov	r0, r3
    6086:	3728      	adds	r7, #40	; 0x28
    6088:	46bd      	mov	sp, r7
    608a:	bd80      	pop	{r7, pc}

0000608c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    608c:	b580      	push	{r7, lr}
    608e:	b086      	sub	sp, #24
    6090:	af00      	add	r7, sp, #0
    6092:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    6094:	687b      	ldr	r3, [r7, #4]
    6096:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    6098:	687b      	ldr	r3, [r7, #4]
    609a:	2b00      	cmp	r3, #0
    609c:	d030      	beq.n	6100 <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    609e:	2310      	movs	r3, #16
    60a0:	425b      	negs	r3, r3
    60a2:	693a      	ldr	r2, [r7, #16]
    60a4:	4413      	add	r3, r2
    60a6:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    60a8:	693b      	ldr	r3, [r7, #16]
    60aa:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    60ac:	f7ff f8d2 	bl	5254 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    60b0:	68fb      	ldr	r3, [r7, #12]
    60b2:	685b      	ldr	r3, [r3, #4]
    60b4:	60bb      	str	r3, [r7, #8]
    60b6:	f24c 23e0 	movw	r3, #49888	; 0xc2e0
    60ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60be:	617b      	str	r3, [r7, #20]
    60c0:	e002      	b.n	60c8 <vPortFree+0x3c>
    60c2:	697b      	ldr	r3, [r7, #20]
    60c4:	681b      	ldr	r3, [r3, #0]
    60c6:	617b      	str	r3, [r7, #20]
    60c8:	697b      	ldr	r3, [r7, #20]
    60ca:	681b      	ldr	r3, [r3, #0]
    60cc:	685a      	ldr	r2, [r3, #4]
    60ce:	68bb      	ldr	r3, [r7, #8]
    60d0:	429a      	cmp	r2, r3
    60d2:	d3f6      	bcc.n	60c2 <vPortFree+0x36>
    60d4:	697b      	ldr	r3, [r7, #20]
    60d6:	681a      	ldr	r2, [r3, #0]
    60d8:	68fb      	ldr	r3, [r7, #12]
    60da:	601a      	str	r2, [r3, #0]
    60dc:	697b      	ldr	r3, [r7, #20]
    60de:	68fa      	ldr	r2, [r7, #12]
    60e0:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    60e2:	68fb      	ldr	r3, [r7, #12]
    60e4:	685a      	ldr	r2, [r3, #4]
    60e6:	f240 5338 	movw	r3, #1336	; 0x538
    60ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60ee:	681b      	ldr	r3, [r3, #0]
    60f0:	441a      	add	r2, r3
    60f2:	f240 5338 	movw	r3, #1336	; 0x538
    60f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60fa:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    60fc:	f7ff f8bc 	bl	5278 <xTaskResumeAll>
	}
}
    6100:	3718      	adds	r7, #24
    6102:	46bd      	mov	sp, r7
    6104:	bd80      	pop	{r7, pc}
    6106:	bf00      	nop

00006108 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    6108:	b480      	push	{r7}
    610a:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    610c:	f240 5338 	movw	r3, #1336	; 0x538
    6110:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6114:	681b      	ldr	r3, [r3, #0]
}
    6116:	4618      	mov	r0, r3
    6118:	46bd      	mov	sp, r7
    611a:	f85d 7b04 	ldr.w	r7, [sp], #4
    611e:	4770      	bx	lr

00006120 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    6120:	b480      	push	{r7}
    6122:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    6124:	46bd      	mov	sp, r7
    6126:	f85d 7b04 	ldr.w	r7, [sp], #4
    612a:	4770      	bx	lr
    612c:	0000      	movs	r0, r0
	...

00006130 <ground_calibrate>:
 * set to auto1 before MAX_DELAY_FOR_CALIBRATION secondes */
/**User must put verticaly the uav (nose bottom) and push
 * radio roll stick to get new calibration
 * If not, the default calibration is used.
 */
inline void ground_calibrate( void ) {
    6130:	b580      	push	{r7, lr}
    6132:	af00      	add	r7, sp, #0
    break;
  case CALIB_DONE:
    break;
  }
#else*/
if(calib_status == NO_CALIB)
    6134:	f24c 3312 	movw	r3, #49938	; 0xc312
    6138:	f2c2 0304 	movt	r3, #8196	; 0x2004
    613c:	781b      	ldrb	r3, [r3, #0]
    613e:	2b00      	cmp	r3, #0
    6140:	f040 815d 	bne.w	63fe <ground_calibrate+0x2ce>
{
    if (cputime < MAX_DELAY_FOR_CALIBRATION && pprz_mode == PPRZ_MODE_AUTO1 ) {
    6144:	f24c 23fa 	movw	r3, #49914	; 0xc2fa
    6148:	f2c2 0304 	movt	r3, #8196	; 0x2004
    614c:	881b      	ldrh	r3, [r3, #0]
    614e:	2b09      	cmp	r3, #9
    6150:	f201 8145 	bhi.w	73de <ground_calibrate+0x12ae>
    6154:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    6158:	f2c2 0304 	movt	r3, #8196	; 0x2004
    615c:	781b      	ldrb	r3, [r3, #0]
    615e:	2b01      	cmp	r3, #1
    6160:	f041 813d 	bne.w	73de <ground_calibrate+0x12ae>
      calib_status = WAITING_CALIB_CONTRAST;
    6164:	f24c 3312 	movw	r3, #49938	; 0xc312
    6168:	f2c2 0304 	movt	r3, #8196	; 0x2004
    616c:	2201      	movs	r2, #1
    616e:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_START();
    6170:	f24c 3319 	movw	r3, #49945	; 0xc319
    6174:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6178:	781a      	ldrb	r2, [r3, #0]
    617a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    617e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6182:	781b      	ldrb	r3, [r3, #0]
    6184:	b2db      	uxtb	r3, r3
    6186:	429a      	cmp	r2, r3
    6188:	d313      	bcc.n	61b2 <ground_calibrate+0x82>
    618a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    618e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6192:	781b      	ldrb	r3, [r3, #0]
    6194:	b2db      	uxtb	r3, r3
    6196:	461a      	mov	r2, r3
    6198:	f24c 3319 	movw	r3, #49945	; 0xc319
    619c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61a0:	781b      	ldrb	r3, [r3, #0]
    61a2:	1ad3      	subs	r3, r2, r3
    61a4:	33ff      	adds	r3, #255	; 0xff
    61a6:	2b04      	cmp	r3, #4
    61a8:	bfd4      	ite	le
    61aa:	2300      	movle	r3, #0
    61ac:	2301      	movgt	r3, #1
    61ae:	b2db      	uxtb	r3, r3
    61b0:	e011      	b.n	61d6 <ground_calibrate+0xa6>
    61b2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    61b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61ba:	781b      	ldrb	r3, [r3, #0]
    61bc:	b2db      	uxtb	r3, r3
    61be:	461a      	mov	r2, r3
    61c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    61c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61c8:	781b      	ldrb	r3, [r3, #0]
    61ca:	1ad3      	subs	r3, r2, r3
    61cc:	2b04      	cmp	r3, #4
    61ce:	bfd4      	ite	le
    61d0:	2300      	movle	r3, #0
    61d2:	2301      	movgt	r3, #1
    61d4:	b2db      	uxtb	r3, r3
    61d6:	2b00      	cmp	r3, #0
    61d8:	f000 8103 	beq.w	63e2 <ground_calibrate+0x2b2>
    61dc:	f24c 3319 	movw	r3, #49945	; 0xc319
    61e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61e4:	781b      	ldrb	r3, [r3, #0]
    61e6:	461a      	mov	r2, r3
    61e8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    61ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61f0:	2105      	movs	r1, #5
    61f2:	5499      	strb	r1, [r3, r2]
    61f4:	f24c 3319 	movw	r3, #49945	; 0xc319
    61f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61fc:	781b      	ldrb	r3, [r3, #0]
    61fe:	3301      	adds	r3, #1
    6200:	b2da      	uxtb	r2, r3
    6202:	f24c 3319 	movw	r3, #49945	; 0xc319
    6206:	f2c2 0304 	movt	r3, #8196	; 0x2004
    620a:	701a      	strb	r2, [r3, #0]
    620c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6210:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6214:	781b      	ldrb	r3, [r3, #0]
    6216:	2bff      	cmp	r3, #255	; 0xff
    6218:	d105      	bne.n	6226 <ground_calibrate+0xf6>
    621a:	f24c 3319 	movw	r3, #49945	; 0xc319
    621e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6222:	2200      	movs	r2, #0
    6224:	701a      	strb	r2, [r3, #0]
    6226:	f24c 3319 	movw	r3, #49945	; 0xc319
    622a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    622e:	781b      	ldrb	r3, [r3, #0]
    6230:	461a      	mov	r2, r3
    6232:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6236:	f2c2 0304 	movt	r3, #8196	; 0x2004
    623a:	2102      	movs	r1, #2
    623c:	5499      	strb	r1, [r3, r2]
    623e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6246:	781b      	ldrb	r3, [r3, #0]
    6248:	3301      	adds	r3, #1
    624a:	b2da      	uxtb	r2, r3
    624c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6250:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6254:	701a      	strb	r2, [r3, #0]
    6256:	f24c 3319 	movw	r3, #49945	; 0xc319
    625a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    625e:	781b      	ldrb	r3, [r3, #0]
    6260:	2bff      	cmp	r3, #255	; 0xff
    6262:	d105      	bne.n	6270 <ground_calibrate+0x140>
    6264:	f24c 3319 	movw	r3, #49945	; 0xc319
    6268:	f2c2 0304 	movt	r3, #8196	; 0x2004
    626c:	2200      	movs	r2, #0
    626e:	701a      	strb	r2, [r3, #0]
    6270:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6274:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6278:	2202      	movs	r2, #2
    627a:	701a      	strb	r2, [r3, #0]
    627c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6280:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6284:	2202      	movs	r2, #2
    6286:	701a      	strb	r2, [r3, #0]
    6288:	f24c 3319 	movw	r3, #49945	; 0xc319
    628c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6290:	781b      	ldrb	r3, [r3, #0]
    6292:	461a      	mov	r2, r3
    6294:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6298:	f2c2 0304 	movt	r3, #8196	; 0x2004
    629c:	7819      	ldrb	r1, [r3, #0]
    629e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    62a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62a6:	5499      	strb	r1, [r3, r2]
    62a8:	f24c 3319 	movw	r3, #49945	; 0xc319
    62ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62b0:	781b      	ldrb	r3, [r3, #0]
    62b2:	3301      	adds	r3, #1
    62b4:	b2da      	uxtb	r2, r3
    62b6:	f24c 3319 	movw	r3, #49945	; 0xc319
    62ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62be:	701a      	strb	r2, [r3, #0]
    62c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    62c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62c8:	781b      	ldrb	r3, [r3, #0]
    62ca:	2bff      	cmp	r3, #255	; 0xff
    62cc:	d105      	bne.n	62da <ground_calibrate+0x1aa>
    62ce:	f24c 3319 	movw	r3, #49945	; 0xc319
    62d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62d6:	2200      	movs	r2, #0
    62d8:	701a      	strb	r2, [r3, #0]
    62da:	f24c 3319 	movw	r3, #49945	; 0xc319
    62de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62e2:	781b      	ldrb	r3, [r3, #0]
    62e4:	461a      	mov	r2, r3
    62e6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    62ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62ee:	7819      	ldrb	r1, [r3, #0]
    62f0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    62f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62f8:	5499      	strb	r1, [r3, r2]
    62fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    62fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6302:	781b      	ldrb	r3, [r3, #0]
    6304:	3301      	adds	r3, #1
    6306:	b2da      	uxtb	r2, r3
    6308:	f24c 3319 	movw	r3, #49945	; 0xc319
    630c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6310:	701a      	strb	r2, [r3, #0]
    6312:	f24c 3319 	movw	r3, #49945	; 0xc319
    6316:	f2c2 0304 	movt	r3, #8196	; 0x2004
    631a:	781b      	ldrb	r3, [r3, #0]
    631c:	2bff      	cmp	r3, #255	; 0xff
    631e:	d105      	bne.n	632c <ground_calibrate+0x1fc>
    6320:	f24c 3319 	movw	r3, #49945	; 0xc319
    6324:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6328:	2200      	movs	r2, #0
    632a:	701a      	strb	r2, [r3, #0]
    632c:	f242 0339 	movw	r3, #8249	; 0x2039
    6330:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6334:	781b      	ldrb	r3, [r3, #0]
    6336:	b2db      	uxtb	r3, r3
    6338:	f003 0310 	and.w	r3, r3, #16
    633c:	2b00      	cmp	r3, #0
    633e:	f041 804e 	bne.w	73de <ground_calibrate+0x12ae>
    6342:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6346:	f2c2 0304 	movt	r3, #8196	; 0x2004
    634a:	781b      	ldrb	r3, [r3, #0]
    634c:	b2db      	uxtb	r3, r3
    634e:	461a      	mov	r2, r3
    6350:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6354:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6358:	5c9a      	ldrb	r2, [r3, r2]
    635a:	f24c 431b 	movw	r3, #50203	; 0xc41b
    635e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6362:	701a      	strb	r2, [r3, #0]
    6364:	f24c 431c 	movw	r3, #50204	; 0xc41c
    6368:	f2c2 0304 	movt	r3, #8196	; 0x2004
    636c:	2200      	movs	r2, #0
    636e:	701a      	strb	r2, [r3, #0]
    6370:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6374:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6378:	781b      	ldrb	r3, [r3, #0]
    637a:	b2db      	uxtb	r3, r3
    637c:	3301      	adds	r3, #1
    637e:	b2da      	uxtb	r2, r3
    6380:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6384:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6388:	701a      	strb	r2, [r3, #0]
    638a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    638e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6392:	781b      	ldrb	r3, [r3, #0]
    6394:	b2db      	uxtb	r3, r3
    6396:	2bff      	cmp	r3, #255	; 0xff
    6398:	d105      	bne.n	63a6 <ground_calibrate+0x276>
    639a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    639e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63a2:	2200      	movs	r2, #0
    63a4:	701a      	strb	r2, [r3, #0]
    63a6:	f242 0338 	movw	r3, #8248	; 0x2038
    63aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63ae:	f242 0238 	movw	r2, #8248	; 0x2038
    63b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    63b6:	7812      	ldrb	r2, [r2, #0]
    63b8:	b2d2      	uxtb	r2, r2
    63ba:	f042 0201 	orr.w	r2, r2, #1
    63be:	b2d2      	uxtb	r2, r2
    63c0:	701a      	strb	r2, [r3, #0]
    63c2:	f242 0339 	movw	r3, #8249	; 0x2039
    63c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63ca:	f242 0239 	movw	r2, #8249	; 0x2039
    63ce:	f2c2 0200 	movt	r2, #8192	; 0x2000
    63d2:	7812      	ldrb	r2, [r2, #0]
    63d4:	b2d2      	uxtb	r2, r2
    63d6:	f042 0210 	orr.w	r2, r2, #16
    63da:	b2d2      	uxtb	r2, r2
    63dc:	701a      	strb	r2, [r3, #0]
    63de:	f000 bffe 	b.w	73de <ground_calibrate+0x12ae>
    63e2:	f24c 3318 	movw	r3, #49944	; 0xc318
    63e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63ea:	781b      	ldrb	r3, [r3, #0]
    63ec:	3301      	adds	r3, #1
    63ee:	b2da      	uxtb	r2, r3
    63f0:	f24c 3318 	movw	r3, #49944	; 0xc318
    63f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63f8:	701a      	strb	r2, [r3, #0]
    63fa:	f000 bff0 	b.w	73de <ground_calibrate+0x12ae>
    }
}
else if (calib_status == WAITING_CALIB_CONTRAST)
    63fe:	f24c 3312 	movw	r3, #49938	; 0xc312
    6402:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6406:	781b      	ldrb	r3, [r3, #0]
    6408:	2b01      	cmp	r3, #1
    640a:	f040 87e8 	bne.w	73de <ground_calibrate+0x12ae>
{
    if (STICK_PUSHED(from_fbw.channels[RADIO_ROLL])) {
    640e:	f24c 4320 	movw	r3, #50208	; 0xc420
    6412:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6416:	885b      	ldrh	r3, [r3, #2]
    6418:	b21b      	sxth	r3, r3
    641a:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    641e:	db09      	blt.n	6434 <ground_calibrate+0x304>
    6420:	f24c 4320 	movw	r3, #50208	; 0xc420
    6424:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6428:	885b      	ldrh	r3, [r3, #2]
    642a:	b21b      	sxth	r3, r3
    642c:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    6430:	f340 87d5 	ble.w	73de <ground_calibrate+0x12ae>
      ir_gain_calib();
    6434:	f00b fd54 	bl	11ee0 <ir_gain_calib>
      estimator_rad_of_ir = ir_rad_of_ir;
    6438:	f240 5348 	movw	r3, #1352	; 0x548
    643c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6440:	681a      	ldr	r2, [r3, #0]
    6442:	f64c 130c 	movw	r3, #51468	; 0xc90c
    6446:	f2c2 0304 	movt	r3, #8196	; 0x2004
    644a:	601a      	str	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    644c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6450:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6454:	781a      	ldrb	r2, [r3, #0]
    6456:	f24c 331a 	movw	r3, #49946	; 0xc31a
    645a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    645e:	781b      	ldrb	r3, [r3, #0]
    6460:	b2db      	uxtb	r3, r3
    6462:	429a      	cmp	r2, r3
    6464:	d313      	bcc.n	648e <ground_calibrate+0x35e>
    6466:	f24c 331a 	movw	r3, #49946	; 0xc31a
    646a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    646e:	781b      	ldrb	r3, [r3, #0]
    6470:	b2db      	uxtb	r3, r3
    6472:	461a      	mov	r2, r3
    6474:	f24c 3319 	movw	r3, #49945	; 0xc319
    6478:	f2c2 0304 	movt	r3, #8196	; 0x2004
    647c:	781b      	ldrb	r3, [r3, #0]
    647e:	1ad3      	subs	r3, r2, r3
    6480:	33ff      	adds	r3, #255	; 0xff
    6482:	2b14      	cmp	r3, #20
    6484:	bfd4      	ite	le
    6486:	2300      	movle	r3, #0
    6488:	2301      	movgt	r3, #1
    648a:	b2db      	uxtb	r3, r3
    648c:	e011      	b.n	64b2 <ground_calibrate+0x382>
    648e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6496:	781b      	ldrb	r3, [r3, #0]
    6498:	b2db      	uxtb	r3, r3
    649a:	461a      	mov	r2, r3
    649c:	f24c 3319 	movw	r3, #49945	; 0xc319
    64a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64a4:	781b      	ldrb	r3, [r3, #0]
    64a6:	1ad3      	subs	r3, r2, r3
    64a8:	2b14      	cmp	r3, #20
    64aa:	bfd4      	ite	le
    64ac:	2300      	movle	r3, #0
    64ae:	2301      	movgt	r3, #1
    64b0:	b2db      	uxtb	r3, r3
    64b2:	2b00      	cmp	r3, #0
    64b4:	f000 85a6 	beq.w	7004 <ground_calibrate+0xed4>
    64b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    64bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64c0:	781b      	ldrb	r3, [r3, #0]
    64c2:	461a      	mov	r2, r3
    64c4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    64c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64cc:	2105      	movs	r1, #5
    64ce:	5499      	strb	r1, [r3, r2]
    64d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    64d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64d8:	781b      	ldrb	r3, [r3, #0]
    64da:	3301      	adds	r3, #1
    64dc:	b2da      	uxtb	r2, r3
    64de:	f24c 3319 	movw	r3, #49945	; 0xc319
    64e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64e6:	701a      	strb	r2, [r3, #0]
    64e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    64ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64f0:	781b      	ldrb	r3, [r3, #0]
    64f2:	2bff      	cmp	r3, #255	; 0xff
    64f4:	d105      	bne.n	6502 <ground_calibrate+0x3d2>
    64f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    64fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64fe:	2200      	movs	r2, #0
    6500:	701a      	strb	r2, [r3, #0]
    6502:	f24c 3319 	movw	r3, #49945	; 0xc319
    6506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    650a:	781b      	ldrb	r3, [r3, #0]
    650c:	461a      	mov	r2, r3
    650e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6512:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6516:	2105      	movs	r1, #5
    6518:	5499      	strb	r1, [r3, r2]
    651a:	f24c 3319 	movw	r3, #49945	; 0xc319
    651e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6522:	781b      	ldrb	r3, [r3, #0]
    6524:	3301      	adds	r3, #1
    6526:	b2da      	uxtb	r2, r3
    6528:	f24c 3319 	movw	r3, #49945	; 0xc319
    652c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6530:	701a      	strb	r2, [r3, #0]
    6532:	f24c 3319 	movw	r3, #49945	; 0xc319
    6536:	f2c2 0304 	movt	r3, #8196	; 0x2004
    653a:	781b      	ldrb	r3, [r3, #0]
    653c:	2bff      	cmp	r3, #255	; 0xff
    653e:	d105      	bne.n	654c <ground_calibrate+0x41c>
    6540:	f24c 3319 	movw	r3, #49945	; 0xc319
    6544:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6548:	2200      	movs	r2, #0
    654a:	701a      	strb	r2, [r3, #0]
    654c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6550:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6554:	2205      	movs	r2, #5
    6556:	701a      	strb	r2, [r3, #0]
    6558:	f24c 431e 	movw	r3, #50206	; 0xc41e
    655c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6560:	2205      	movs	r2, #5
    6562:	701a      	strb	r2, [r3, #0]
    6564:	f24c 3319 	movw	r3, #49945	; 0xc319
    6568:	f2c2 0304 	movt	r3, #8196	; 0x2004
    656c:	781b      	ldrb	r3, [r3, #0]
    656e:	461a      	mov	r2, r3
    6570:	f64c 1310 	movw	r3, #51472	; 0xc910
    6574:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6578:	7819      	ldrb	r1, [r3, #0]
    657a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    657e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6582:	5499      	strb	r1, [r3, r2]
    6584:	f64c 1310 	movw	r3, #51472	; 0xc910
    6588:	f2c2 0304 	movt	r3, #8196	; 0x2004
    658c:	781a      	ldrb	r2, [r3, #0]
    658e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6596:	781b      	ldrb	r3, [r3, #0]
    6598:	4413      	add	r3, r2
    659a:	b2da      	uxtb	r2, r3
    659c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    65a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65a4:	701a      	strb	r2, [r3, #0]
    65a6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    65aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65ae:	781a      	ldrb	r2, [r3, #0]
    65b0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    65b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65b8:	781b      	ldrb	r3, [r3, #0]
    65ba:	4413      	add	r3, r2
    65bc:	b2da      	uxtb	r2, r3
    65be:	f24c 431e 	movw	r3, #50206	; 0xc41e
    65c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65c6:	701a      	strb	r2, [r3, #0]
    65c8:	f24c 3319 	movw	r3, #49945	; 0xc319
    65cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65d0:	781b      	ldrb	r3, [r3, #0]
    65d2:	3301      	adds	r3, #1
    65d4:	b2da      	uxtb	r2, r3
    65d6:	f24c 3319 	movw	r3, #49945	; 0xc319
    65da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65de:	701a      	strb	r2, [r3, #0]
    65e0:	f24c 3319 	movw	r3, #49945	; 0xc319
    65e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65e8:	781b      	ldrb	r3, [r3, #0]
    65ea:	2bff      	cmp	r3, #255	; 0xff
    65ec:	d105      	bne.n	65fa <ground_calibrate+0x4ca>
    65ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    65f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65f6:	2200      	movs	r2, #0
    65f8:	701a      	strb	r2, [r3, #0]
    65fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    65fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6602:	781b      	ldrb	r3, [r3, #0]
    6604:	461a      	mov	r2, r3
    6606:	f64c 1310 	movw	r3, #51472	; 0xc910
    660a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    660e:	7859      	ldrb	r1, [r3, #1]
    6610:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6618:	5499      	strb	r1, [r3, r2]
    661a:	4bd2      	ldr	r3, [pc, #840]	; (6964 <ground_calibrate+0x834>)
    661c:	781a      	ldrb	r2, [r3, #0]
    661e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6622:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6626:	781b      	ldrb	r3, [r3, #0]
    6628:	4413      	add	r3, r2
    662a:	b2da      	uxtb	r2, r3
    662c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6630:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6634:	701a      	strb	r2, [r3, #0]
    6636:	f24c 431e 	movw	r3, #50206	; 0xc41e
    663a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    663e:	781a      	ldrb	r2, [r3, #0]
    6640:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6644:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6648:	781b      	ldrb	r3, [r3, #0]
    664a:	4413      	add	r3, r2
    664c:	b2da      	uxtb	r2, r3
    664e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6652:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6656:	701a      	strb	r2, [r3, #0]
    6658:	f24c 3319 	movw	r3, #49945	; 0xc319
    665c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6660:	781b      	ldrb	r3, [r3, #0]
    6662:	3301      	adds	r3, #1
    6664:	b2da      	uxtb	r2, r3
    6666:	f24c 3319 	movw	r3, #49945	; 0xc319
    666a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    666e:	701a      	strb	r2, [r3, #0]
    6670:	f24c 3319 	movw	r3, #49945	; 0xc319
    6674:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6678:	781b      	ldrb	r3, [r3, #0]
    667a:	2bff      	cmp	r3, #255	; 0xff
    667c:	d105      	bne.n	668a <ground_calibrate+0x55a>
    667e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6682:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6686:	2200      	movs	r2, #0
    6688:	701a      	strb	r2, [r3, #0]
    668a:	f24c 3319 	movw	r3, #49945	; 0xc319
    668e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6692:	781b      	ldrb	r3, [r3, #0]
    6694:	461a      	mov	r2, r3
    6696:	f64c 1310 	movw	r3, #51472	; 0xc910
    669a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    669e:	7899      	ldrb	r1, [r3, #2]
    66a0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    66a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66a8:	5499      	strb	r1, [r3, r2]
    66aa:	4baf      	ldr	r3, [pc, #700]	; (6968 <ground_calibrate+0x838>)
    66ac:	781a      	ldrb	r2, [r3, #0]
    66ae:	f24c 431d 	movw	r3, #50205	; 0xc41d
    66b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66b6:	781b      	ldrb	r3, [r3, #0]
    66b8:	4413      	add	r3, r2
    66ba:	b2da      	uxtb	r2, r3
    66bc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    66c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66c4:	701a      	strb	r2, [r3, #0]
    66c6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    66ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66ce:	781a      	ldrb	r2, [r3, #0]
    66d0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    66d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66d8:	781b      	ldrb	r3, [r3, #0]
    66da:	4413      	add	r3, r2
    66dc:	b2da      	uxtb	r2, r3
    66de:	f24c 431e 	movw	r3, #50206	; 0xc41e
    66e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66e6:	701a      	strb	r2, [r3, #0]
    66e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    66ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66f0:	781b      	ldrb	r3, [r3, #0]
    66f2:	3301      	adds	r3, #1
    66f4:	b2da      	uxtb	r2, r3
    66f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    66fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66fe:	701a      	strb	r2, [r3, #0]
    6700:	f24c 3319 	movw	r3, #49945	; 0xc319
    6704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6708:	781b      	ldrb	r3, [r3, #0]
    670a:	2bff      	cmp	r3, #255	; 0xff
    670c:	d105      	bne.n	671a <ground_calibrate+0x5ea>
    670e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6716:	2200      	movs	r2, #0
    6718:	701a      	strb	r2, [r3, #0]
    671a:	f24c 3319 	movw	r3, #49945	; 0xc319
    671e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6722:	781b      	ldrb	r3, [r3, #0]
    6724:	461a      	mov	r2, r3
    6726:	f64c 1310 	movw	r3, #51472	; 0xc910
    672a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    672e:	78d9      	ldrb	r1, [r3, #3]
    6730:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6734:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6738:	5499      	strb	r1, [r3, r2]
    673a:	4b8c      	ldr	r3, [pc, #560]	; (696c <ground_calibrate+0x83c>)
    673c:	781a      	ldrb	r2, [r3, #0]
    673e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6742:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6746:	781b      	ldrb	r3, [r3, #0]
    6748:	4413      	add	r3, r2
    674a:	b2da      	uxtb	r2, r3
    674c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6750:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6754:	701a      	strb	r2, [r3, #0]
    6756:	f24c 431e 	movw	r3, #50206	; 0xc41e
    675a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    675e:	781a      	ldrb	r2, [r3, #0]
    6760:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6764:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6768:	781b      	ldrb	r3, [r3, #0]
    676a:	4413      	add	r3, r2
    676c:	b2da      	uxtb	r2, r3
    676e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6772:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6776:	701a      	strb	r2, [r3, #0]
    6778:	f24c 3319 	movw	r3, #49945	; 0xc319
    677c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6780:	781b      	ldrb	r3, [r3, #0]
    6782:	3301      	adds	r3, #1
    6784:	b2da      	uxtb	r2, r3
    6786:	f24c 3319 	movw	r3, #49945	; 0xc319
    678a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    678e:	701a      	strb	r2, [r3, #0]
    6790:	f24c 3319 	movw	r3, #49945	; 0xc319
    6794:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6798:	781b      	ldrb	r3, [r3, #0]
    679a:	2bff      	cmp	r3, #255	; 0xff
    679c:	d105      	bne.n	67aa <ground_calibrate+0x67a>
    679e:	f24c 3319 	movw	r3, #49945	; 0xc319
    67a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67a6:	2200      	movs	r2, #0
    67a8:	701a      	strb	r2, [r3, #0]
    67aa:	f24c 3319 	movw	r3, #49945	; 0xc319
    67ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67b2:	781b      	ldrb	r3, [r3, #0]
    67b4:	461a      	mov	r2, r3
    67b6:	f64c 1314 	movw	r3, #51476	; 0xc914
    67ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67be:	7819      	ldrb	r1, [r3, #0]
    67c0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    67c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67c8:	5499      	strb	r1, [r3, r2]
    67ca:	f64c 1314 	movw	r3, #51476	; 0xc914
    67ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67d2:	781a      	ldrb	r2, [r3, #0]
    67d4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    67d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67dc:	781b      	ldrb	r3, [r3, #0]
    67de:	4413      	add	r3, r2
    67e0:	b2da      	uxtb	r2, r3
    67e2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    67e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67ea:	701a      	strb	r2, [r3, #0]
    67ec:	f24c 431e 	movw	r3, #50206	; 0xc41e
    67f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67f4:	781a      	ldrb	r2, [r3, #0]
    67f6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    67fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67fe:	781b      	ldrb	r3, [r3, #0]
    6800:	4413      	add	r3, r2
    6802:	b2da      	uxtb	r2, r3
    6804:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    680c:	701a      	strb	r2, [r3, #0]
    680e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6816:	781b      	ldrb	r3, [r3, #0]
    6818:	3301      	adds	r3, #1
    681a:	b2da      	uxtb	r2, r3
    681c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6820:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6824:	701a      	strb	r2, [r3, #0]
    6826:	f24c 3319 	movw	r3, #49945	; 0xc319
    682a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    682e:	781b      	ldrb	r3, [r3, #0]
    6830:	2bff      	cmp	r3, #255	; 0xff
    6832:	d105      	bne.n	6840 <ground_calibrate+0x710>
    6834:	f24c 3319 	movw	r3, #49945	; 0xc319
    6838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    683c:	2200      	movs	r2, #0
    683e:	701a      	strb	r2, [r3, #0]
    6840:	f24c 3319 	movw	r3, #49945	; 0xc319
    6844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6848:	781b      	ldrb	r3, [r3, #0]
    684a:	461a      	mov	r2, r3
    684c:	f64c 1314 	movw	r3, #51476	; 0xc914
    6850:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6854:	7859      	ldrb	r1, [r3, #1]
    6856:	f24c 331c 	movw	r3, #49948	; 0xc31c
    685a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    685e:	5499      	strb	r1, [r3, r2]
    6860:	4b43      	ldr	r3, [pc, #268]	; (6970 <ground_calibrate+0x840>)
    6862:	781a      	ldrb	r2, [r3, #0]
    6864:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6868:	f2c2 0304 	movt	r3, #8196	; 0x2004
    686c:	781b      	ldrb	r3, [r3, #0]
    686e:	4413      	add	r3, r2
    6870:	b2da      	uxtb	r2, r3
    6872:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6876:	f2c2 0304 	movt	r3, #8196	; 0x2004
    687a:	701a      	strb	r2, [r3, #0]
    687c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6884:	781a      	ldrb	r2, [r3, #0]
    6886:	f24c 431d 	movw	r3, #50205	; 0xc41d
    688a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    688e:	781b      	ldrb	r3, [r3, #0]
    6890:	4413      	add	r3, r2
    6892:	b2da      	uxtb	r2, r3
    6894:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6898:	f2c2 0304 	movt	r3, #8196	; 0x2004
    689c:	701a      	strb	r2, [r3, #0]
    689e:	f24c 3319 	movw	r3, #49945	; 0xc319
    68a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68a6:	781b      	ldrb	r3, [r3, #0]
    68a8:	3301      	adds	r3, #1
    68aa:	b2da      	uxtb	r2, r3
    68ac:	f24c 3319 	movw	r3, #49945	; 0xc319
    68b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68b4:	701a      	strb	r2, [r3, #0]
    68b6:	f24c 3319 	movw	r3, #49945	; 0xc319
    68ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68be:	781b      	ldrb	r3, [r3, #0]
    68c0:	2bff      	cmp	r3, #255	; 0xff
    68c2:	d105      	bne.n	68d0 <ground_calibrate+0x7a0>
    68c4:	f24c 3319 	movw	r3, #49945	; 0xc319
    68c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68cc:	2200      	movs	r2, #0
    68ce:	701a      	strb	r2, [r3, #0]
    68d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    68d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68d8:	781b      	ldrb	r3, [r3, #0]
    68da:	461a      	mov	r2, r3
    68dc:	f64c 1314 	movw	r3, #51476	; 0xc914
    68e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68e4:	7899      	ldrb	r1, [r3, #2]
    68e6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    68ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68ee:	5499      	strb	r1, [r3, r2]
    68f0:	4b20      	ldr	r3, [pc, #128]	; (6974 <ground_calibrate+0x844>)
    68f2:	781a      	ldrb	r2, [r3, #0]
    68f4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    68f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68fc:	781b      	ldrb	r3, [r3, #0]
    68fe:	4413      	add	r3, r2
    6900:	b2da      	uxtb	r2, r3
    6902:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6906:	f2c2 0304 	movt	r3, #8196	; 0x2004
    690a:	701a      	strb	r2, [r3, #0]
    690c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6910:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6914:	781a      	ldrb	r2, [r3, #0]
    6916:	f24c 431d 	movw	r3, #50205	; 0xc41d
    691a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    691e:	781b      	ldrb	r3, [r3, #0]
    6920:	4413      	add	r3, r2
    6922:	b2da      	uxtb	r2, r3
    6924:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6928:	f2c2 0304 	movt	r3, #8196	; 0x2004
    692c:	701a      	strb	r2, [r3, #0]
    692e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6932:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6936:	781b      	ldrb	r3, [r3, #0]
    6938:	3301      	adds	r3, #1
    693a:	b2da      	uxtb	r2, r3
    693c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6940:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6944:	701a      	strb	r2, [r3, #0]
    6946:	f24c 3319 	movw	r3, #49945	; 0xc319
    694a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    694e:	781b      	ldrb	r3, [r3, #0]
    6950:	2bff      	cmp	r3, #255	; 0xff
    6952:	d111      	bne.n	6978 <ground_calibrate+0x848>
    6954:	f24c 3319 	movw	r3, #49945	; 0xc319
    6958:	f2c2 0304 	movt	r3, #8196	; 0x2004
    695c:	2200      	movs	r2, #0
    695e:	701a      	strb	r2, [r3, #0]
    6960:	e00a      	b.n	6978 <ground_calibrate+0x848>
    6962:	bf00      	nop
    6964:	2004c911 	.word	0x2004c911
    6968:	2004c912 	.word	0x2004c912
    696c:	2004c913 	.word	0x2004c913
    6970:	2004c915 	.word	0x2004c915
    6974:	2004c916 	.word	0x2004c916
    6978:	f24c 3319 	movw	r3, #49945	; 0xc319
    697c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6980:	781b      	ldrb	r3, [r3, #0]
    6982:	461a      	mov	r2, r3
    6984:	f64c 1314 	movw	r3, #51476	; 0xc914
    6988:	f2c2 0304 	movt	r3, #8196	; 0x2004
    698c:	78d9      	ldrb	r1, [r3, #3]
    698e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6996:	5499      	strb	r1, [r3, r2]
    6998:	4bd3      	ldr	r3, [pc, #844]	; (6ce8 <ground_calibrate+0xbb8>)
    699a:	781a      	ldrb	r2, [r3, #0]
    699c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    69a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69a4:	781b      	ldrb	r3, [r3, #0]
    69a6:	4413      	add	r3, r2
    69a8:	b2da      	uxtb	r2, r3
    69aa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    69ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69b2:	701a      	strb	r2, [r3, #0]
    69b4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    69b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69bc:	781a      	ldrb	r2, [r3, #0]
    69be:	f24c 431d 	movw	r3, #50205	; 0xc41d
    69c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69c6:	781b      	ldrb	r3, [r3, #0]
    69c8:	4413      	add	r3, r2
    69ca:	b2da      	uxtb	r2, r3
    69cc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    69d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69d4:	701a      	strb	r2, [r3, #0]
    69d6:	f24c 3319 	movw	r3, #49945	; 0xc319
    69da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69de:	781b      	ldrb	r3, [r3, #0]
    69e0:	3301      	adds	r3, #1
    69e2:	b2da      	uxtb	r2, r3
    69e4:	f24c 3319 	movw	r3, #49945	; 0xc319
    69e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69ec:	701a      	strb	r2, [r3, #0]
    69ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    69f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69f6:	781b      	ldrb	r3, [r3, #0]
    69f8:	2bff      	cmp	r3, #255	; 0xff
    69fa:	d105      	bne.n	6a08 <ground_calibrate+0x8d8>
    69fc:	f24c 3319 	movw	r3, #49945	; 0xc319
    6a00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a04:	2200      	movs	r2, #0
    6a06:	701a      	strb	r2, [r3, #0]
    6a08:	f24c 3319 	movw	r3, #49945	; 0xc319
    6a0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a10:	781b      	ldrb	r3, [r3, #0]
    6a12:	461a      	mov	r2, r3
    6a14:	f64c 130c 	movw	r3, #51468	; 0xc90c
    6a18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a1c:	7819      	ldrb	r1, [r3, #0]
    6a1e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6a22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a26:	5499      	strb	r1, [r3, r2]
    6a28:	f64c 130c 	movw	r3, #51468	; 0xc90c
    6a2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a30:	781a      	ldrb	r2, [r3, #0]
    6a32:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6a36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a3a:	781b      	ldrb	r3, [r3, #0]
    6a3c:	4413      	add	r3, r2
    6a3e:	b2da      	uxtb	r2, r3
    6a40:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6a44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a48:	701a      	strb	r2, [r3, #0]
    6a4a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6a4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a52:	781a      	ldrb	r2, [r3, #0]
    6a54:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6a58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a5c:	781b      	ldrb	r3, [r3, #0]
    6a5e:	4413      	add	r3, r2
    6a60:	b2da      	uxtb	r2, r3
    6a62:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6a66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a6a:	701a      	strb	r2, [r3, #0]
    6a6c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6a70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a74:	781b      	ldrb	r3, [r3, #0]
    6a76:	3301      	adds	r3, #1
    6a78:	b2da      	uxtb	r2, r3
    6a7a:	f24c 3319 	movw	r3, #49945	; 0xc319
    6a7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a82:	701a      	strb	r2, [r3, #0]
    6a84:	f24c 3319 	movw	r3, #49945	; 0xc319
    6a88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a8c:	781b      	ldrb	r3, [r3, #0]
    6a8e:	2bff      	cmp	r3, #255	; 0xff
    6a90:	d105      	bne.n	6a9e <ground_calibrate+0x96e>
    6a92:	f24c 3319 	movw	r3, #49945	; 0xc319
    6a96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a9a:	2200      	movs	r2, #0
    6a9c:	701a      	strb	r2, [r3, #0]
    6a9e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6aa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aa6:	781b      	ldrb	r3, [r3, #0]
    6aa8:	461a      	mov	r2, r3
    6aaa:	f64c 130c 	movw	r3, #51468	; 0xc90c
    6aae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ab2:	7859      	ldrb	r1, [r3, #1]
    6ab4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6ab8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6abc:	5499      	strb	r1, [r3, r2]
    6abe:	4b8b      	ldr	r3, [pc, #556]	; (6cec <ground_calibrate+0xbbc>)
    6ac0:	781a      	ldrb	r2, [r3, #0]
    6ac2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6ac6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aca:	781b      	ldrb	r3, [r3, #0]
    6acc:	4413      	add	r3, r2
    6ace:	b2da      	uxtb	r2, r3
    6ad0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6ad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ad8:	701a      	strb	r2, [r3, #0]
    6ada:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6ade:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ae2:	781a      	ldrb	r2, [r3, #0]
    6ae4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6ae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aec:	781b      	ldrb	r3, [r3, #0]
    6aee:	4413      	add	r3, r2
    6af0:	b2da      	uxtb	r2, r3
    6af2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6af6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6afa:	701a      	strb	r2, [r3, #0]
    6afc:	f24c 3319 	movw	r3, #49945	; 0xc319
    6b00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b04:	781b      	ldrb	r3, [r3, #0]
    6b06:	3301      	adds	r3, #1
    6b08:	b2da      	uxtb	r2, r3
    6b0a:	f24c 3319 	movw	r3, #49945	; 0xc319
    6b0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b12:	701a      	strb	r2, [r3, #0]
    6b14:	f24c 3319 	movw	r3, #49945	; 0xc319
    6b18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b1c:	781b      	ldrb	r3, [r3, #0]
    6b1e:	2bff      	cmp	r3, #255	; 0xff
    6b20:	d105      	bne.n	6b2e <ground_calibrate+0x9fe>
    6b22:	f24c 3319 	movw	r3, #49945	; 0xc319
    6b26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b2a:	2200      	movs	r2, #0
    6b2c:	701a      	strb	r2, [r3, #0]
    6b2e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6b32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b36:	781b      	ldrb	r3, [r3, #0]
    6b38:	461a      	mov	r2, r3
    6b3a:	f64c 130c 	movw	r3, #51468	; 0xc90c
    6b3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b42:	7899      	ldrb	r1, [r3, #2]
    6b44:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6b48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b4c:	5499      	strb	r1, [r3, r2]
    6b4e:	4b68      	ldr	r3, [pc, #416]	; (6cf0 <ground_calibrate+0xbc0>)
    6b50:	781a      	ldrb	r2, [r3, #0]
    6b52:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6b56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b5a:	781b      	ldrb	r3, [r3, #0]
    6b5c:	4413      	add	r3, r2
    6b5e:	b2da      	uxtb	r2, r3
    6b60:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6b64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b68:	701a      	strb	r2, [r3, #0]
    6b6a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6b6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b72:	781a      	ldrb	r2, [r3, #0]
    6b74:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6b78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b7c:	781b      	ldrb	r3, [r3, #0]
    6b7e:	4413      	add	r3, r2
    6b80:	b2da      	uxtb	r2, r3
    6b82:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6b86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b8a:	701a      	strb	r2, [r3, #0]
    6b8c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6b90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b94:	781b      	ldrb	r3, [r3, #0]
    6b96:	3301      	adds	r3, #1
    6b98:	b2da      	uxtb	r2, r3
    6b9a:	f24c 3319 	movw	r3, #49945	; 0xc319
    6b9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ba2:	701a      	strb	r2, [r3, #0]
    6ba4:	f24c 3319 	movw	r3, #49945	; 0xc319
    6ba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bac:	781b      	ldrb	r3, [r3, #0]
    6bae:	2bff      	cmp	r3, #255	; 0xff
    6bb0:	d105      	bne.n	6bbe <ground_calibrate+0xa8e>
    6bb2:	f24c 3319 	movw	r3, #49945	; 0xc319
    6bb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bba:	2200      	movs	r2, #0
    6bbc:	701a      	strb	r2, [r3, #0]
    6bbe:	f24c 3319 	movw	r3, #49945	; 0xc319
    6bc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bc6:	781b      	ldrb	r3, [r3, #0]
    6bc8:	461a      	mov	r2, r3
    6bca:	f64c 130c 	movw	r3, #51468	; 0xc90c
    6bce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bd2:	78d9      	ldrb	r1, [r3, #3]
    6bd4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6bd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bdc:	5499      	strb	r1, [r3, r2]
    6bde:	4b45      	ldr	r3, [pc, #276]	; (6cf4 <ground_calibrate+0xbc4>)
    6be0:	781a      	ldrb	r2, [r3, #0]
    6be2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6be6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bea:	781b      	ldrb	r3, [r3, #0]
    6bec:	4413      	add	r3, r2
    6bee:	b2da      	uxtb	r2, r3
    6bf0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6bf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bf8:	701a      	strb	r2, [r3, #0]
    6bfa:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6bfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c02:	781a      	ldrb	r2, [r3, #0]
    6c04:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6c08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c0c:	781b      	ldrb	r3, [r3, #0]
    6c0e:	4413      	add	r3, r2
    6c10:	b2da      	uxtb	r2, r3
    6c12:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6c16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c1a:	701a      	strb	r2, [r3, #0]
    6c1c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6c20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c24:	781b      	ldrb	r3, [r3, #0]
    6c26:	3301      	adds	r3, #1
    6c28:	b2da      	uxtb	r2, r3
    6c2a:	f24c 3319 	movw	r3, #49945	; 0xc319
    6c2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c32:	701a      	strb	r2, [r3, #0]
    6c34:	f24c 3319 	movw	r3, #49945	; 0xc319
    6c38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c3c:	781b      	ldrb	r3, [r3, #0]
    6c3e:	2bff      	cmp	r3, #255	; 0xff
    6c40:	d105      	bne.n	6c4e <ground_calibrate+0xb1e>
    6c42:	f24c 3319 	movw	r3, #49945	; 0xc319
    6c46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c4a:	2200      	movs	r2, #0
    6c4c:	701a      	strb	r2, [r3, #0]
    6c4e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6c52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c56:	781b      	ldrb	r3, [r3, #0]
    6c58:	461a      	mov	r2, r3
    6c5a:	f240 5342 	movw	r3, #1346	; 0x542
    6c5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c62:	7819      	ldrb	r1, [r3, #0]
    6c64:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6c68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c6c:	5499      	strb	r1, [r3, r2]
    6c6e:	f240 5342 	movw	r3, #1346	; 0x542
    6c72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c76:	781a      	ldrb	r2, [r3, #0]
    6c78:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6c7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c80:	781b      	ldrb	r3, [r3, #0]
    6c82:	4413      	add	r3, r2
    6c84:	b2da      	uxtb	r2, r3
    6c86:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6c8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c8e:	701a      	strb	r2, [r3, #0]
    6c90:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6c94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c98:	781a      	ldrb	r2, [r3, #0]
    6c9a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6c9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ca2:	781b      	ldrb	r3, [r3, #0]
    6ca4:	4413      	add	r3, r2
    6ca6:	b2da      	uxtb	r2, r3
    6ca8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6cac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cb0:	701a      	strb	r2, [r3, #0]
    6cb2:	f24c 3319 	movw	r3, #49945	; 0xc319
    6cb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cba:	781b      	ldrb	r3, [r3, #0]
    6cbc:	3301      	adds	r3, #1
    6cbe:	b2da      	uxtb	r2, r3
    6cc0:	f24c 3319 	movw	r3, #49945	; 0xc319
    6cc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cc8:	701a      	strb	r2, [r3, #0]
    6cca:	f24c 3319 	movw	r3, #49945	; 0xc319
    6cce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cd2:	781b      	ldrb	r3, [r3, #0]
    6cd4:	2bff      	cmp	r3, #255	; 0xff
    6cd6:	d10f      	bne.n	6cf8 <ground_calibrate+0xbc8>
    6cd8:	f24c 3319 	movw	r3, #49945	; 0xc319
    6cdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ce0:	2200      	movs	r2, #0
    6ce2:	701a      	strb	r2, [r3, #0]
    6ce4:	e008      	b.n	6cf8 <ground_calibrate+0xbc8>
    6ce6:	bf00      	nop
    6ce8:	2004c917 	.word	0x2004c917
    6cec:	2004c90d 	.word	0x2004c90d
    6cf0:	2004c90e 	.word	0x2004c90e
    6cf4:	2004c90f 	.word	0x2004c90f
    6cf8:	f24c 3319 	movw	r3, #49945	; 0xc319
    6cfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d00:	781b      	ldrb	r3, [r3, #0]
    6d02:	461a      	mov	r2, r3
    6d04:	f240 5342 	movw	r3, #1346	; 0x542
    6d08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d0c:	7859      	ldrb	r1, [r3, #1]
    6d0e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6d12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d16:	5499      	strb	r1, [r3, r2]
    6d18:	4bd4      	ldr	r3, [pc, #848]	; (706c <ground_calibrate+0xf3c>)
    6d1a:	781a      	ldrb	r2, [r3, #0]
    6d1c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6d20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d24:	781b      	ldrb	r3, [r3, #0]
    6d26:	4413      	add	r3, r2
    6d28:	b2da      	uxtb	r2, r3
    6d2a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6d2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d32:	701a      	strb	r2, [r3, #0]
    6d34:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6d38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d3c:	781a      	ldrb	r2, [r3, #0]
    6d3e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6d42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d46:	781b      	ldrb	r3, [r3, #0]
    6d48:	4413      	add	r3, r2
    6d4a:	b2da      	uxtb	r2, r3
    6d4c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6d50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d54:	701a      	strb	r2, [r3, #0]
    6d56:	f24c 3319 	movw	r3, #49945	; 0xc319
    6d5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d5e:	781b      	ldrb	r3, [r3, #0]
    6d60:	3301      	adds	r3, #1
    6d62:	b2da      	uxtb	r2, r3
    6d64:	f24c 3319 	movw	r3, #49945	; 0xc319
    6d68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d6c:	701a      	strb	r2, [r3, #0]
    6d6e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6d72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d76:	781b      	ldrb	r3, [r3, #0]
    6d78:	2bff      	cmp	r3, #255	; 0xff
    6d7a:	d105      	bne.n	6d88 <ground_calibrate+0xc58>
    6d7c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6d80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d84:	2200      	movs	r2, #0
    6d86:	701a      	strb	r2, [r3, #0]
    6d88:	f24c 3319 	movw	r3, #49945	; 0xc319
    6d8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d90:	781b      	ldrb	r3, [r3, #0]
    6d92:	461a      	mov	r2, r3
    6d94:	f240 5344 	movw	r3, #1348	; 0x544
    6d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d9c:	7819      	ldrb	r1, [r3, #0]
    6d9e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6da2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6da6:	5499      	strb	r1, [r3, r2]
    6da8:	f240 5344 	movw	r3, #1348	; 0x544
    6dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6db0:	781a      	ldrb	r2, [r3, #0]
    6db2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6db6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dba:	781b      	ldrb	r3, [r3, #0]
    6dbc:	4413      	add	r3, r2
    6dbe:	b2da      	uxtb	r2, r3
    6dc0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6dc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dc8:	701a      	strb	r2, [r3, #0]
    6dca:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6dce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dd2:	781a      	ldrb	r2, [r3, #0]
    6dd4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6dd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ddc:	781b      	ldrb	r3, [r3, #0]
    6dde:	4413      	add	r3, r2
    6de0:	b2da      	uxtb	r2, r3
    6de2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6de6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dea:	701a      	strb	r2, [r3, #0]
    6dec:	f24c 3319 	movw	r3, #49945	; 0xc319
    6df0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6df4:	781b      	ldrb	r3, [r3, #0]
    6df6:	3301      	adds	r3, #1
    6df8:	b2da      	uxtb	r2, r3
    6dfa:	f24c 3319 	movw	r3, #49945	; 0xc319
    6dfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e02:	701a      	strb	r2, [r3, #0]
    6e04:	f24c 3319 	movw	r3, #49945	; 0xc319
    6e08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e0c:	781b      	ldrb	r3, [r3, #0]
    6e0e:	2bff      	cmp	r3, #255	; 0xff
    6e10:	d105      	bne.n	6e1e <ground_calibrate+0xcee>
    6e12:	f24c 3319 	movw	r3, #49945	; 0xc319
    6e16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e1a:	2200      	movs	r2, #0
    6e1c:	701a      	strb	r2, [r3, #0]
    6e1e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6e22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e26:	781b      	ldrb	r3, [r3, #0]
    6e28:	461a      	mov	r2, r3
    6e2a:	f240 5344 	movw	r3, #1348	; 0x544
    6e2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e32:	7859      	ldrb	r1, [r3, #1]
    6e34:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6e38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e3c:	5499      	strb	r1, [r3, r2]
    6e3e:	4b8c      	ldr	r3, [pc, #560]	; (7070 <ground_calibrate+0xf40>)
    6e40:	781a      	ldrb	r2, [r3, #0]
    6e42:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6e46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e4a:	781b      	ldrb	r3, [r3, #0]
    6e4c:	4413      	add	r3, r2
    6e4e:	b2da      	uxtb	r2, r3
    6e50:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6e54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e58:	701a      	strb	r2, [r3, #0]
    6e5a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6e5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e62:	781a      	ldrb	r2, [r3, #0]
    6e64:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6e68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e6c:	781b      	ldrb	r3, [r3, #0]
    6e6e:	4413      	add	r3, r2
    6e70:	b2da      	uxtb	r2, r3
    6e72:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6e76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e7a:	701a      	strb	r2, [r3, #0]
    6e7c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6e80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e84:	781b      	ldrb	r3, [r3, #0]
    6e86:	3301      	adds	r3, #1
    6e88:	b2da      	uxtb	r2, r3
    6e8a:	f24c 3319 	movw	r3, #49945	; 0xc319
    6e8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e92:	701a      	strb	r2, [r3, #0]
    6e94:	f24c 3319 	movw	r3, #49945	; 0xc319
    6e98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e9c:	781b      	ldrb	r3, [r3, #0]
    6e9e:	2bff      	cmp	r3, #255	; 0xff
    6ea0:	d105      	bne.n	6eae <ground_calibrate+0xd7e>
    6ea2:	f24c 3319 	movw	r3, #49945	; 0xc319
    6ea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eaa:	2200      	movs	r2, #0
    6eac:	701a      	strb	r2, [r3, #0]
    6eae:	f24c 3319 	movw	r3, #49945	; 0xc319
    6eb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eb6:	781b      	ldrb	r3, [r3, #0]
    6eb8:	461a      	mov	r2, r3
    6eba:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6ebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ec2:	7819      	ldrb	r1, [r3, #0]
    6ec4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6ec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ecc:	5499      	strb	r1, [r3, r2]
    6ece:	f24c 3319 	movw	r3, #49945	; 0xc319
    6ed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ed6:	781b      	ldrb	r3, [r3, #0]
    6ed8:	3301      	adds	r3, #1
    6eda:	b2da      	uxtb	r2, r3
    6edc:	f24c 3319 	movw	r3, #49945	; 0xc319
    6ee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ee4:	701a      	strb	r2, [r3, #0]
    6ee6:	f24c 3319 	movw	r3, #49945	; 0xc319
    6eea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eee:	781b      	ldrb	r3, [r3, #0]
    6ef0:	2bff      	cmp	r3, #255	; 0xff
    6ef2:	d105      	bne.n	6f00 <ground_calibrate+0xdd0>
    6ef4:	f24c 3319 	movw	r3, #49945	; 0xc319
    6ef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6efc:	2200      	movs	r2, #0
    6efe:	701a      	strb	r2, [r3, #0]
    6f00:	f24c 3319 	movw	r3, #49945	; 0xc319
    6f04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f08:	781b      	ldrb	r3, [r3, #0]
    6f0a:	461a      	mov	r2, r3
    6f0c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6f10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f14:	7819      	ldrb	r1, [r3, #0]
    6f16:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6f1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f1e:	5499      	strb	r1, [r3, r2]
    6f20:	f24c 3319 	movw	r3, #49945	; 0xc319
    6f24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f28:	781b      	ldrb	r3, [r3, #0]
    6f2a:	3301      	adds	r3, #1
    6f2c:	b2da      	uxtb	r2, r3
    6f2e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6f32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f36:	701a      	strb	r2, [r3, #0]
    6f38:	f24c 3319 	movw	r3, #49945	; 0xc319
    6f3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f40:	781b      	ldrb	r3, [r3, #0]
    6f42:	2bff      	cmp	r3, #255	; 0xff
    6f44:	d105      	bne.n	6f52 <ground_calibrate+0xe22>
    6f46:	f24c 3319 	movw	r3, #49945	; 0xc319
    6f4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f4e:	2200      	movs	r2, #0
    6f50:	701a      	strb	r2, [r3, #0]
    6f52:	f242 0339 	movw	r3, #8249	; 0x2039
    6f56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f5a:	781b      	ldrb	r3, [r3, #0]
    6f5c:	b2db      	uxtb	r3, r3
    6f5e:	f003 0310 	and.w	r3, r3, #16
    6f62:	2b00      	cmp	r3, #0
    6f64:	d15a      	bne.n	701c <ground_calibrate+0xeec>
    6f66:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6f6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f6e:	781b      	ldrb	r3, [r3, #0]
    6f70:	b2db      	uxtb	r3, r3
    6f72:	461a      	mov	r2, r3
    6f74:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6f78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f7c:	5c9a      	ldrb	r2, [r3, r2]
    6f7e:	f24c 431b 	movw	r3, #50203	; 0xc41b
    6f82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f86:	701a      	strb	r2, [r3, #0]
    6f88:	f24c 431c 	movw	r3, #50204	; 0xc41c
    6f8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f90:	2200      	movs	r2, #0
    6f92:	701a      	strb	r2, [r3, #0]
    6f94:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6f98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f9c:	781b      	ldrb	r3, [r3, #0]
    6f9e:	b2db      	uxtb	r3, r3
    6fa0:	3301      	adds	r3, #1
    6fa2:	b2da      	uxtb	r2, r3
    6fa4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6fa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fac:	701a      	strb	r2, [r3, #0]
    6fae:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6fb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fb6:	781b      	ldrb	r3, [r3, #0]
    6fb8:	b2db      	uxtb	r3, r3
    6fba:	2bff      	cmp	r3, #255	; 0xff
    6fbc:	d105      	bne.n	6fca <ground_calibrate+0xe9a>
    6fbe:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6fc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fc6:	2200      	movs	r2, #0
    6fc8:	701a      	strb	r2, [r3, #0]
    6fca:	f242 0338 	movw	r3, #8248	; 0x2038
    6fce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fd2:	f242 0238 	movw	r2, #8248	; 0x2038
    6fd6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6fda:	7812      	ldrb	r2, [r2, #0]
    6fdc:	b2d2      	uxtb	r2, r2
    6fde:	f042 0201 	orr.w	r2, r2, #1
    6fe2:	b2d2      	uxtb	r2, r2
    6fe4:	701a      	strb	r2, [r3, #0]
    6fe6:	f242 0339 	movw	r3, #8249	; 0x2039
    6fea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fee:	f242 0239 	movw	r2, #8249	; 0x2039
    6ff2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6ff6:	7812      	ldrb	r2, [r2, #0]
    6ff8:	b2d2      	uxtb	r2, r2
    6ffa:	f042 0210 	orr.w	r2, r2, #16
    6ffe:	b2d2      	uxtb	r2, r2
    7000:	701a      	strb	r2, [r3, #0]
    7002:	e00b      	b.n	701c <ground_calibrate+0xeec>
    7004:	f24c 3318 	movw	r3, #49944	; 0xc318
    7008:	f2c2 0304 	movt	r3, #8196	; 0x2004
    700c:	781b      	ldrb	r3, [r3, #0]
    700e:	3301      	adds	r3, #1
    7010:	b2da      	uxtb	r2, r3
    7012:	f24c 3318 	movw	r3, #49944	; 0xc318
    7016:	f2c2 0304 	movt	r3, #8196	; 0x2004
    701a:	701a      	strb	r2, [r3, #0]
      calib_status = CALIB_DONE;
    701c:	f24c 3312 	movw	r3, #49938	; 0xc312
    7020:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7024:	2202      	movs	r2, #2
    7026:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_CONTRAST(&ir_contrast);
    7028:	f24c 3319 	movw	r3, #49945	; 0xc319
    702c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7030:	781a      	ldrb	r2, [r3, #0]
    7032:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7036:	f2c2 0304 	movt	r3, #8196	; 0x2004
    703a:	781b      	ldrb	r3, [r3, #0]
    703c:	b2db      	uxtb	r3, r3
    703e:	429a      	cmp	r2, r3
    7040:	d318      	bcc.n	7074 <ground_calibrate+0xf44>
    7042:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7046:	f2c2 0304 	movt	r3, #8196	; 0x2004
    704a:	781b      	ldrb	r3, [r3, #0]
    704c:	b2db      	uxtb	r3, r3
    704e:	461a      	mov	r2, r3
    7050:	f24c 3319 	movw	r3, #49945	; 0xc319
    7054:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7058:	781b      	ldrb	r3, [r3, #0]
    705a:	1ad3      	subs	r3, r2, r3
    705c:	33ff      	adds	r3, #255	; 0xff
    705e:	2b06      	cmp	r3, #6
    7060:	bfd4      	ite	le
    7062:	2300      	movle	r3, #0
    7064:	2301      	movgt	r3, #1
    7066:	b2db      	uxtb	r3, r3
    7068:	e016      	b.n	7098 <ground_calibrate+0xf68>
    706a:	bf00      	nop
    706c:	20000543 	.word	0x20000543
    7070:	20000545 	.word	0x20000545
    7074:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7078:	f2c2 0304 	movt	r3, #8196	; 0x2004
    707c:	781b      	ldrb	r3, [r3, #0]
    707e:	b2db      	uxtb	r3, r3
    7080:	461a      	mov	r2, r3
    7082:	f24c 3319 	movw	r3, #49945	; 0xc319
    7086:	f2c2 0304 	movt	r3, #8196	; 0x2004
    708a:	781b      	ldrb	r3, [r3, #0]
    708c:	1ad3      	subs	r3, r2, r3
    708e:	2b06      	cmp	r3, #6
    7090:	bfd4      	ite	le
    7092:	2300      	movle	r3, #0
    7094:	2301      	movgt	r3, #1
    7096:	b2db      	uxtb	r3, r3
    7098:	2b00      	cmp	r3, #0
    709a:	f000 8194 	beq.w	73c6 <ground_calibrate+0x1296>
    709e:	f24c 3319 	movw	r3, #49945	; 0xc319
    70a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70a6:	781b      	ldrb	r3, [r3, #0]
    70a8:	461a      	mov	r2, r3
    70aa:	f24c 331c 	movw	r3, #49948	; 0xc31c
    70ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70b2:	2105      	movs	r1, #5
    70b4:	5499      	strb	r1, [r3, r2]
    70b6:	f24c 3319 	movw	r3, #49945	; 0xc319
    70ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70be:	781b      	ldrb	r3, [r3, #0]
    70c0:	3301      	adds	r3, #1
    70c2:	b2da      	uxtb	r2, r3
    70c4:	f24c 3319 	movw	r3, #49945	; 0xc319
    70c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70cc:	701a      	strb	r2, [r3, #0]
    70ce:	f24c 3319 	movw	r3, #49945	; 0xc319
    70d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70d6:	781b      	ldrb	r3, [r3, #0]
    70d8:	2bff      	cmp	r3, #255	; 0xff
    70da:	d105      	bne.n	70e8 <ground_calibrate+0xfb8>
    70dc:	f24c 3319 	movw	r3, #49945	; 0xc319
    70e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70e4:	2200      	movs	r2, #0
    70e6:	701a      	strb	r2, [r3, #0]
    70e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    70ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70f0:	781b      	ldrb	r3, [r3, #0]
    70f2:	461a      	mov	r2, r3
    70f4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    70f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70fc:	2103      	movs	r1, #3
    70fe:	5499      	strb	r1, [r3, r2]
    7100:	f24c 3319 	movw	r3, #49945	; 0xc319
    7104:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7108:	781b      	ldrb	r3, [r3, #0]
    710a:	3301      	adds	r3, #1
    710c:	b2da      	uxtb	r2, r3
    710e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7112:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7116:	701a      	strb	r2, [r3, #0]
    7118:	f24c 3319 	movw	r3, #49945	; 0xc319
    711c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7120:	781b      	ldrb	r3, [r3, #0]
    7122:	2bff      	cmp	r3, #255	; 0xff
    7124:	d105      	bne.n	7132 <ground_calibrate+0x1002>
    7126:	f24c 3319 	movw	r3, #49945	; 0xc319
    712a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    712e:	2200      	movs	r2, #0
    7130:	701a      	strb	r2, [r3, #0]
    7132:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7136:	f2c2 0304 	movt	r3, #8196	; 0x2004
    713a:	2203      	movs	r2, #3
    713c:	701a      	strb	r2, [r3, #0]
    713e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7142:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7146:	2203      	movs	r2, #3
    7148:	701a      	strb	r2, [r3, #0]
    714a:	f24c 3319 	movw	r3, #49945	; 0xc319
    714e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7152:	781b      	ldrb	r3, [r3, #0]
    7154:	461a      	mov	r2, r3
    7156:	f240 5340 	movw	r3, #1344	; 0x540
    715a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    715e:	7819      	ldrb	r1, [r3, #0]
    7160:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7164:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7168:	5499      	strb	r1, [r3, r2]
    716a:	f240 5340 	movw	r3, #1344	; 0x540
    716e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7172:	781a      	ldrb	r2, [r3, #0]
    7174:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    717c:	781b      	ldrb	r3, [r3, #0]
    717e:	4413      	add	r3, r2
    7180:	b2da      	uxtb	r2, r3
    7182:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    718a:	701a      	strb	r2, [r3, #0]
    718c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7190:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7194:	781a      	ldrb	r2, [r3, #0]
    7196:	f24c 431d 	movw	r3, #50205	; 0xc41d
    719a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    719e:	781b      	ldrb	r3, [r3, #0]
    71a0:	4413      	add	r3, r2
    71a2:	b2da      	uxtb	r2, r3
    71a4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    71a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71ac:	701a      	strb	r2, [r3, #0]
    71ae:	f24c 3319 	movw	r3, #49945	; 0xc319
    71b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71b6:	781b      	ldrb	r3, [r3, #0]
    71b8:	3301      	adds	r3, #1
    71ba:	b2da      	uxtb	r2, r3
    71bc:	f24c 3319 	movw	r3, #49945	; 0xc319
    71c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71c4:	701a      	strb	r2, [r3, #0]
    71c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    71ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71ce:	781b      	ldrb	r3, [r3, #0]
    71d0:	2bff      	cmp	r3, #255	; 0xff
    71d2:	d105      	bne.n	71e0 <ground_calibrate+0x10b0>
    71d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    71d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71dc:	2200      	movs	r2, #0
    71de:	701a      	strb	r2, [r3, #0]
    71e0:	f24c 3319 	movw	r3, #49945	; 0xc319
    71e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71e8:	781b      	ldrb	r3, [r3, #0]
    71ea:	461a      	mov	r2, r3
    71ec:	f240 5340 	movw	r3, #1344	; 0x540
    71f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71f4:	7859      	ldrb	r1, [r3, #1]
    71f6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    71fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71fe:	5499      	strb	r1, [r3, r2]
    7200:	4b77      	ldr	r3, [pc, #476]	; (73e0 <ground_calibrate+0x12b0>)
    7202:	781a      	ldrb	r2, [r3, #0]
    7204:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7208:	f2c2 0304 	movt	r3, #8196	; 0x2004
    720c:	781b      	ldrb	r3, [r3, #0]
    720e:	4413      	add	r3, r2
    7210:	b2da      	uxtb	r2, r3
    7212:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7216:	f2c2 0304 	movt	r3, #8196	; 0x2004
    721a:	701a      	strb	r2, [r3, #0]
    721c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7220:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7224:	781a      	ldrb	r2, [r3, #0]
    7226:	f24c 431d 	movw	r3, #50205	; 0xc41d
    722a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    722e:	781b      	ldrb	r3, [r3, #0]
    7230:	4413      	add	r3, r2
    7232:	b2da      	uxtb	r2, r3
    7234:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7238:	f2c2 0304 	movt	r3, #8196	; 0x2004
    723c:	701a      	strb	r2, [r3, #0]
    723e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7246:	781b      	ldrb	r3, [r3, #0]
    7248:	3301      	adds	r3, #1
    724a:	b2da      	uxtb	r2, r3
    724c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7250:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7254:	701a      	strb	r2, [r3, #0]
    7256:	f24c 3319 	movw	r3, #49945	; 0xc319
    725a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    725e:	781b      	ldrb	r3, [r3, #0]
    7260:	2bff      	cmp	r3, #255	; 0xff
    7262:	d105      	bne.n	7270 <ground_calibrate+0x1140>
    7264:	f24c 3319 	movw	r3, #49945	; 0xc319
    7268:	f2c2 0304 	movt	r3, #8196	; 0x2004
    726c:	2200      	movs	r2, #0
    726e:	701a      	strb	r2, [r3, #0]
    7270:	f24c 3319 	movw	r3, #49945	; 0xc319
    7274:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7278:	781b      	ldrb	r3, [r3, #0]
    727a:	461a      	mov	r2, r3
    727c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7280:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7284:	7819      	ldrb	r1, [r3, #0]
    7286:	f24c 331c 	movw	r3, #49948	; 0xc31c
    728a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    728e:	5499      	strb	r1, [r3, r2]
    7290:	f24c 3319 	movw	r3, #49945	; 0xc319
    7294:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7298:	781b      	ldrb	r3, [r3, #0]
    729a:	3301      	adds	r3, #1
    729c:	b2da      	uxtb	r2, r3
    729e:	f24c 3319 	movw	r3, #49945	; 0xc319
    72a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72a6:	701a      	strb	r2, [r3, #0]
    72a8:	f24c 3319 	movw	r3, #49945	; 0xc319
    72ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72b0:	781b      	ldrb	r3, [r3, #0]
    72b2:	2bff      	cmp	r3, #255	; 0xff
    72b4:	d105      	bne.n	72c2 <ground_calibrate+0x1192>
    72b6:	f24c 3319 	movw	r3, #49945	; 0xc319
    72ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72be:	2200      	movs	r2, #0
    72c0:	701a      	strb	r2, [r3, #0]
    72c2:	f24c 3319 	movw	r3, #49945	; 0xc319
    72c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72ca:	781b      	ldrb	r3, [r3, #0]
    72cc:	461a      	mov	r2, r3
    72ce:	f24c 431e 	movw	r3, #50206	; 0xc41e
    72d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72d6:	7819      	ldrb	r1, [r3, #0]
    72d8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    72dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72e0:	5499      	strb	r1, [r3, r2]
    72e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    72e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72ea:	781b      	ldrb	r3, [r3, #0]
    72ec:	3301      	adds	r3, #1
    72ee:	b2da      	uxtb	r2, r3
    72f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    72f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72f8:	701a      	strb	r2, [r3, #0]
    72fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    72fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7302:	781b      	ldrb	r3, [r3, #0]
    7304:	2bff      	cmp	r3, #255	; 0xff
    7306:	d105      	bne.n	7314 <ground_calibrate+0x11e4>
    7308:	f24c 3319 	movw	r3, #49945	; 0xc319
    730c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7310:	2200      	movs	r2, #0
    7312:	701a      	strb	r2, [r3, #0]
    7314:	f242 0339 	movw	r3, #8249	; 0x2039
    7318:	f2c2 0300 	movt	r3, #8192	; 0x2000
    731c:	781b      	ldrb	r3, [r3, #0]
    731e:	b2db      	uxtb	r3, r3
    7320:	f003 0310 	and.w	r3, r3, #16
    7324:	2b00      	cmp	r3, #0
    7326:	d15a      	bne.n	73de <ground_calibrate+0x12ae>
    7328:	f24c 331a 	movw	r3, #49946	; 0xc31a
    732c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7330:	781b      	ldrb	r3, [r3, #0]
    7332:	b2db      	uxtb	r3, r3
    7334:	461a      	mov	r2, r3
    7336:	f24c 331c 	movw	r3, #49948	; 0xc31c
    733a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    733e:	5c9a      	ldrb	r2, [r3, r2]
    7340:	f24c 431b 	movw	r3, #50203	; 0xc41b
    7344:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7348:	701a      	strb	r2, [r3, #0]
    734a:	f24c 431c 	movw	r3, #50204	; 0xc41c
    734e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7352:	2200      	movs	r2, #0
    7354:	701a      	strb	r2, [r3, #0]
    7356:	f24c 331a 	movw	r3, #49946	; 0xc31a
    735a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    735e:	781b      	ldrb	r3, [r3, #0]
    7360:	b2db      	uxtb	r3, r3
    7362:	3301      	adds	r3, #1
    7364:	b2da      	uxtb	r2, r3
    7366:	f24c 331a 	movw	r3, #49946	; 0xc31a
    736a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    736e:	701a      	strb	r2, [r3, #0]
    7370:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7374:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7378:	781b      	ldrb	r3, [r3, #0]
    737a:	b2db      	uxtb	r3, r3
    737c:	2bff      	cmp	r3, #255	; 0xff
    737e:	d105      	bne.n	738c <ground_calibrate+0x125c>
    7380:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7384:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7388:	2200      	movs	r2, #0
    738a:	701a      	strb	r2, [r3, #0]
    738c:	f242 0338 	movw	r3, #8248	; 0x2038
    7390:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7394:	f242 0238 	movw	r2, #8248	; 0x2038
    7398:	f2c2 0200 	movt	r2, #8192	; 0x2000
    739c:	7812      	ldrb	r2, [r2, #0]
    739e:	b2d2      	uxtb	r2, r2
    73a0:	f042 0201 	orr.w	r2, r2, #1
    73a4:	b2d2      	uxtb	r2, r2
    73a6:	701a      	strb	r2, [r3, #0]
    73a8:	f242 0339 	movw	r3, #8249	; 0x2039
    73ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73b0:	f242 0239 	movw	r2, #8249	; 0x2039
    73b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    73b8:	7812      	ldrb	r2, [r2, #0]
    73ba:	b2d2      	uxtb	r2, r2
    73bc:	f042 0210 	orr.w	r2, r2, #16
    73c0:	b2d2      	uxtb	r2, r2
    73c2:	701a      	strb	r2, [r3, #0]
    73c4:	e00b      	b.n	73de <ground_calibrate+0x12ae>
    73c6:	f24c 3318 	movw	r3, #49944	; 0xc318
    73ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73ce:	781b      	ldrb	r3, [r3, #0]
    73d0:	3301      	adds	r3, #1
    73d2:	b2da      	uxtb	r2, r3
    73d4:	f24c 3318 	movw	r3, #49944	; 0xc318
    73d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73dc:	701a      	strb	r2, [r3, #0]
    }
}
else {}

//#endif
}
    73de:	bd80      	pop	{r7, pc}
    73e0:	20000541 	.word	0x20000541

000073e4 <pprz_mode_update>:

/** \fn inline uint8_t pprz_mode_update( void )
 *  \brief Update paparazzi mode
 */
inline uint8_t pprz_mode_update( void ) {
    73e4:	b480      	push	{r7}
    73e6:	b083      	sub	sp, #12
    73e8:	af00      	add	r7, sp, #0
  /** We remain in home mode until explicit reset from the RC */
  if (pprz_mode != PPRZ_MODE_HOME || CheckEvent(rc_event_1)) {
    73ea:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    73ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73f2:	781b      	ldrb	r3, [r3, #0]
    73f4:	2b03      	cmp	r3, #3
    73f6:	d10c      	bne.n	7412 <pprz_mode_update+0x2e>
    73f8:	f24c 3300 	movw	r3, #49920	; 0xc300
    73fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7400:	781b      	ldrb	r3, [r3, #0]
    7402:	2b00      	cmp	r3, #0
    7404:	d032      	beq.n	746c <pprz_mode_update+0x88>
    7406:	f24c 3300 	movw	r3, #49920	; 0xc300
    740a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    740e:	2200      	movs	r2, #0
    7410:	701a      	strb	r2, [r3, #0]
    ModeUpdate(pprz_mode, PPRZ_MODE_OF_PULSE(from_fbw.channels[RADIO_MODE], from_fbw.status));
    7412:	f24c 4320 	movw	r3, #50208	; 0xc420
    7416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    741a:	891b      	ldrh	r3, [r3, #8]
    741c:	b21b      	sxth	r3, r3
    741e:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    7422:	dc0f      	bgt.n	7444 <pprz_mode_update+0x60>
    7424:	f24c 4320 	movw	r3, #50208	; 0xc420
    7428:	f2c2 0304 	movt	r3, #8196	; 0x2004
    742c:	891b      	ldrh	r3, [r3, #8]
    742e:	b21a      	sxth	r2, r3
    7430:	f64e 5341 	movw	r3, #60737	; 0xed41
    7434:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    7438:	429a      	cmp	r2, r3
    743a:	bfb4      	ite	lt
    743c:	2300      	movlt	r3, #0
    743e:	2301      	movge	r3, #1
    7440:	b2db      	uxtb	r3, r3
    7442:	e000      	b.n	7446 <pprz_mode_update+0x62>
    7444:	2302      	movs	r3, #2
    7446:	71fb      	strb	r3, [r7, #7]
    7448:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    744c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7450:	781b      	ldrb	r3, [r3, #0]
    7452:	79fa      	ldrb	r2, [r7, #7]
    7454:	429a      	cmp	r2, r3
    7456:	d007      	beq.n	7468 <pprz_mode_update+0x84>
    7458:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    745c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7460:	79fa      	ldrb	r2, [r7, #7]
    7462:	701a      	strb	r2, [r3, #0]
    7464:	2301      	movs	r3, #1
    7466:	e002      	b.n	746e <pprz_mode_update+0x8a>
    7468:	2300      	movs	r3, #0
    746a:	e000      	b.n	746e <pprz_mode_update+0x8a>
  } else
    return FALSE;
    746c:	2300      	movs	r3, #0
}
    746e:	4618      	mov	r0, r3
    7470:	370c      	adds	r7, #12
    7472:	46bd      	mov	sp, r7
    7474:	f85d 7b04 	ldr.w	r7, [sp], #4
    7478:	4770      	bx	lr
    747a:	bf00      	nop

0000747c <ir_estim_mode_update>:

#ifdef RADIO_LLS
/** \fn inline uint8_t ir_estim_mode_update( void )
 *  \brief update ir estimation if RADIO_LLS is true \n
 */
inline uint8_t ir_estim_mode_update( void ) {
    747c:	b480      	push	{r7}
    747e:	b083      	sub	sp, #12
    7480:	af00      	add	r7, sp, #0
  ModeUpdate(ir_estim_mode, IR_ESTIM_MODE_OF_PULSE(from_fbw.channels[RADIO_LLS]));
    7482:	f24c 4320 	movw	r3, #50208	; 0xc420
    7486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    748a:	89db      	ldrh	r3, [r3, #14]
    748c:	b21a      	sxth	r2, r3
    748e:	f640 437f 	movw	r3, #3199	; 0xc7f
    7492:	429a      	cmp	r2, r3
    7494:	bfd4      	ite	le
    7496:	2300      	movle	r3, #0
    7498:	2301      	movgt	r3, #1
    749a:	b2db      	uxtb	r3, r3
    749c:	71fb      	strb	r3, [r7, #7]
    749e:	f240 533c 	movw	r3, #1340	; 0x53c
    74a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74a6:	781b      	ldrb	r3, [r3, #0]
    74a8:	79fa      	ldrb	r2, [r7, #7]
    74aa:	429a      	cmp	r2, r3
    74ac:	d007      	beq.n	74be <ir_estim_mode_update+0x42>
    74ae:	f240 533c 	movw	r3, #1340	; 0x53c
    74b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74b6:	79fa      	ldrb	r2, [r7, #7]
    74b8:	701a      	strb	r2, [r3, #0]
    74ba:	2301      	movs	r3, #1
    74bc:	e000      	b.n	74c0 <ir_estim_mode_update+0x44>
    74be:	2300      	movs	r3, #0
}
    74c0:	4618      	mov	r0, r3
    74c2:	370c      	adds	r7, #12
    74c4:	46bd      	mov	sp, r7
    74c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    74ca:	4770      	bx	lr

000074cc <mcu1_status_update>:


/** \fn inline uint8_t mcu1_status_update( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t mcu1_status_update( void ) {
    74cc:	b480      	push	{r7}
    74ce:	b083      	sub	sp, #12
    74d0:	af00      	add	r7, sp, #0
  uint8_t new_mode = from_fbw.status;
    74d2:	f24c 4320 	movw	r3, #50208	; 0xc420
    74d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74da:	7cdb      	ldrb	r3, [r3, #19]
    74dc:	71fb      	strb	r3, [r7, #7]
  if (mcu1_status != new_mode) {
    74de:	f24c 3303 	movw	r3, #49923	; 0xc303
    74e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74e6:	781b      	ldrb	r3, [r3, #0]
    74e8:	79fa      	ldrb	r2, [r7, #7]
    74ea:	429a      	cmp	r2, r3
    74ec:	d017      	beq.n	751e <mcu1_status_update+0x52>
    bool_t changed = ((mcu1_status&MASK_FBW_CHANGED) != (new_mode&MASK_FBW_CHANGED));
    74ee:	f24c 3303 	movw	r3, #49923	; 0xc303
    74f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74f6:	781b      	ldrb	r3, [r3, #0]
    74f8:	461a      	mov	r2, r3
    74fa:	79fb      	ldrb	r3, [r7, #7]
    74fc:	4053      	eors	r3, r2
    74fe:	f003 0303 	and.w	r3, r3, #3
    7502:	2b00      	cmp	r3, #0
    7504:	bf0c      	ite	eq
    7506:	2300      	moveq	r3, #0
    7508:	2301      	movne	r3, #1
    750a:	b2db      	uxtb	r3, r3
    750c:	71bb      	strb	r3, [r7, #6]
    mcu1_status = new_mode;
    750e:	f24c 3303 	movw	r3, #49923	; 0xc303
    7512:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7516:	79fa      	ldrb	r2, [r7, #7]
    7518:	701a      	strb	r2, [r3, #0]
    return changed;
    751a:	79bb      	ldrb	r3, [r7, #6]
    751c:	e000      	b.n	7520 <mcu1_status_update+0x54>
  }
  return FALSE;
    751e:	2300      	movs	r3, #0
}
    7520:	4618      	mov	r0, r3
    7522:	370c      	adds	r7, #12
    7524:	46bd      	mov	sp, r7
    7526:	f85d 7b04 	ldr.w	r7, [sp], #4
    752a:	4770      	bx	lr

0000752c <events_update>:
 EventUpdate(_cpt, (inflight_calib_mode==IF_CALIB_MODE_NONE && from_fbw.channels[_channel]<(int)(-0.75*MAX_PPRZ)), _event)

/** \fn static inline void events_update( void )
 *  @@@@@ A FIXER @@@@@
 */
static inline void events_update( void ) {
    752c:	b480      	push	{r7}
    752e:	af00      	add	r7, sp, #0
  static uint16_t event1_cpt = 0;
  static uint16_t event2_cpt = 0;
  EventPos(event1_cpt, RADIO_GAIN1, rc_event_1);
    7530:	f64c 132c 	movw	r3, #51500	; 0xc92c
    7534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7538:	781b      	ldrb	r3, [r3, #0]
    753a:	2b00      	cmp	r3, #0
    753c:	d12a      	bne.n	7594 <events_update+0x68>
    753e:	f24c 4320 	movw	r3, #50208	; 0xc420
    7542:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7546:	895b      	ldrh	r3, [r3, #10]
    7548:	b21b      	sxth	r3, r3
    754a:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
    754e:	dd21      	ble.n	7594 <events_update+0x68>
    7550:	f24c 3314 	movw	r3, #49940	; 0xc314
    7554:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7558:	881b      	ldrh	r3, [r3, #0]
    755a:	2b13      	cmp	r3, #19
    755c:	d819      	bhi.n	7592 <events_update+0x66>
    755e:	f24c 3314 	movw	r3, #49940	; 0xc314
    7562:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7566:	881b      	ldrh	r3, [r3, #0]
    7568:	3301      	adds	r3, #1
    756a:	b29a      	uxth	r2, r3
    756c:	f24c 3314 	movw	r3, #49940	; 0xc314
    7570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7574:	801a      	strh	r2, [r3, #0]
    7576:	f24c 3314 	movw	r3, #49940	; 0xc314
    757a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    757e:	881b      	ldrh	r3, [r3, #0]
    7580:	2b14      	cmp	r3, #20
    7582:	d106      	bne.n	7592 <events_update+0x66>
    7584:	f24c 3300 	movw	r3, #49920	; 0xc300
    7588:	f2c2 0304 	movt	r3, #8196	; 0x2004
    758c:	2201      	movs	r2, #1
    758e:	701a      	strb	r2, [r3, #0]
    7590:	e00c      	b.n	75ac <events_update+0x80>
    7592:	e00b      	b.n	75ac <events_update+0x80>
    7594:	f24c 3314 	movw	r3, #49940	; 0xc314
    7598:	f2c2 0304 	movt	r3, #8196	; 0x2004
    759c:	2200      	movs	r2, #0
    759e:	801a      	strh	r2, [r3, #0]
    75a0:	f24c 3300 	movw	r3, #49920	; 0xc300
    75a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75a8:	2200      	movs	r2, #0
    75aa:	701a      	strb	r2, [r3, #0]
  EventNeg(event2_cpt, RADIO_GAIN1, rc_event_2);
    75ac:	f64c 132c 	movw	r3, #51500	; 0xc92c
    75b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75b4:	781b      	ldrb	r3, [r3, #0]
    75b6:	2b00      	cmp	r3, #0
    75b8:	d12a      	bne.n	7610 <events_update+0xe4>
    75ba:	f24c 4320 	movw	r3, #50208	; 0xc420
    75be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75c2:	895b      	ldrh	r3, [r3, #10]
    75c4:	b21b      	sxth	r3, r3
    75c6:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
    75ca:	da21      	bge.n	7610 <events_update+0xe4>
    75cc:	f24c 3316 	movw	r3, #49942	; 0xc316
    75d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75d4:	881b      	ldrh	r3, [r3, #0]
    75d6:	2b13      	cmp	r3, #19
    75d8:	d819      	bhi.n	760e <events_update+0xe2>
    75da:	f24c 3316 	movw	r3, #49942	; 0xc316
    75de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75e2:	881b      	ldrh	r3, [r3, #0]
    75e4:	3301      	adds	r3, #1
    75e6:	b29a      	uxth	r2, r3
    75e8:	f24c 3316 	movw	r3, #49942	; 0xc316
    75ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75f0:	801a      	strh	r2, [r3, #0]
    75f2:	f24c 3316 	movw	r3, #49942	; 0xc316
    75f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75fa:	881b      	ldrh	r3, [r3, #0]
    75fc:	2b14      	cmp	r3, #20
    75fe:	d106      	bne.n	760e <events_update+0xe2>
    7600:	f24c 3301 	movw	r3, #49921	; 0xc301
    7604:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7608:	2201      	movs	r2, #1
    760a:	701a      	strb	r2, [r3, #0]
    760c:	e00c      	b.n	7628 <events_update+0xfc>
    760e:	e00b      	b.n	7628 <events_update+0xfc>
    7610:	f24c 3316 	movw	r3, #49942	; 0xc316
    7614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7618:	2200      	movs	r2, #0
    761a:	801a      	strh	r2, [r3, #0]
    761c:	f24c 3301 	movw	r3, #49921	; 0xc301
    7620:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7624:	2200      	movs	r2, #0
    7626:	701a      	strb	r2, [r3, #0]
}  
    7628:	46bd      	mov	sp, r7
    762a:	f85d 7b04 	ldr.w	r7, [sp], #4
    762e:	4770      	bx	lr

00007630 <copy_from_to_fbw>:


/** \fn inline void copy_from_to_fbw ( void )
 *  \brief Send back uncontrolled channels (only rudder)
 */
inline void copy_from_to_fbw ( void ) {
    7630:	b480      	push	{r7}
    7632:	af00      	add	r7, sp, #0
  to_fbw.channels[RADIO_YAW] = from_fbw.channels[RADIO_YAW];
    7634:	f24c 4320 	movw	r3, #50208	; 0xc420
    7638:	f2c2 0304 	movt	r3, #8196	; 0x2004
    763c:	88da      	ldrh	r2, [r3, #6]
    763e:	f24c 4338 	movw	r3, #50232	; 0xc438
    7642:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7646:	80da      	strh	r2, [r3, #6]
#ifdef ANTON_T7
  to_fbw.channels[RADIO_PITCH] = from_fbw.channels[RADIO_PITCH];
#endif
  to_fbw.status = 0;
    7648:	f24c 4338 	movw	r3, #50232	; 0xc438
    764c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7650:	2200      	movs	r2, #0
    7652:	74da      	strb	r2, [r3, #19]
}
    7654:	46bd      	mov	sp, r7
    7656:	f85d 7b04 	ldr.w	r7, [sp], #4
    765a:	4770      	bx	lr

0000765c <send_boot>:
/** \fn inline void reporting_task( void )
 *  \brief Send a serie of initialisation messages followed by a stream of periodic ones\n
 * Called at 20Hz.
 */

void send_boot(void){
    765c:	b480      	push	{r7}
    765e:	af00      	add	r7, sp, #0
  /** initialisation phase during boot */
  //vPrintString("S_13 reporting_task start!\n\r");
  //add by wanbo
  if (boot) 
    7660:	f240 533d 	movw	r3, #1341	; 0x53d
    7664:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7668:	781b      	ldrb	r3, [r3, #0]
    766a:	2b00      	cmp	r3, #0
    766c:	f000 87c6 	beq.w	85fc <send_boot+0xfa0>
  {
      DOWNLINK_SEND_BOOT(&version);
    7670:	f24c 3319 	movw	r3, #49945	; 0xc319
    7674:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7678:	781a      	ldrb	r2, [r3, #0]
    767a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    767e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7682:	781b      	ldrb	r3, [r3, #0]
    7684:	b2db      	uxtb	r3, r3
    7686:	429a      	cmp	r2, r3
    7688:	d313      	bcc.n	76b2 <send_boot+0x56>
    768a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    768e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7692:	781b      	ldrb	r3, [r3, #0]
    7694:	b2db      	uxtb	r3, r3
    7696:	461a      	mov	r2, r3
    7698:	f24c 3319 	movw	r3, #49945	; 0xc319
    769c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76a0:	781b      	ldrb	r3, [r3, #0]
    76a2:	1ad3      	subs	r3, r2, r3
    76a4:	33ff      	adds	r3, #255	; 0xff
    76a6:	2b06      	cmp	r3, #6
    76a8:	bfd4      	ite	le
    76aa:	2300      	movle	r3, #0
    76ac:	2301      	movgt	r3, #1
    76ae:	b2db      	uxtb	r3, r3
    76b0:	e011      	b.n	76d6 <send_boot+0x7a>
    76b2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    76b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76ba:	781b      	ldrb	r3, [r3, #0]
    76bc:	b2db      	uxtb	r3, r3
    76be:	461a      	mov	r2, r3
    76c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    76c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76c8:	781b      	ldrb	r3, [r3, #0]
    76ca:	1ad3      	subs	r3, r2, r3
    76cc:	2b06      	cmp	r3, #6
    76ce:	bfd4      	ite	le
    76d0:	2300      	movle	r3, #0
    76d2:	2301      	movgt	r3, #1
    76d4:	b2db      	uxtb	r3, r3
    76d6:	2b00      	cmp	r3, #0
    76d8:	f000 8194 	beq.w	7a04 <send_boot+0x3a8>
    76dc:	f24c 3319 	movw	r3, #49945	; 0xc319
    76e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76e4:	781b      	ldrb	r3, [r3, #0]
    76e6:	461a      	mov	r2, r3
    76e8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    76ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76f0:	2105      	movs	r1, #5
    76f2:	5499      	strb	r1, [r3, r2]
    76f4:	f24c 3319 	movw	r3, #49945	; 0xc319
    76f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76fc:	781b      	ldrb	r3, [r3, #0]
    76fe:	3301      	adds	r3, #1
    7700:	b2da      	uxtb	r2, r3
    7702:	f24c 3319 	movw	r3, #49945	; 0xc319
    7706:	f2c2 0304 	movt	r3, #8196	; 0x2004
    770a:	701a      	strb	r2, [r3, #0]
    770c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7714:	781b      	ldrb	r3, [r3, #0]
    7716:	2bff      	cmp	r3, #255	; 0xff
    7718:	d105      	bne.n	7726 <send_boot+0xca>
    771a:	f24c 3319 	movw	r3, #49945	; 0xc319
    771e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7722:	2200      	movs	r2, #0
    7724:	701a      	strb	r2, [r3, #0]
    7726:	f24c 3319 	movw	r3, #49945	; 0xc319
    772a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    772e:	781b      	ldrb	r3, [r3, #0]
    7730:	461a      	mov	r2, r3
    7732:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7736:	f2c2 0304 	movt	r3, #8196	; 0x2004
    773a:	2101      	movs	r1, #1
    773c:	5499      	strb	r1, [r3, r2]
    773e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7742:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7746:	781b      	ldrb	r3, [r3, #0]
    7748:	3301      	adds	r3, #1
    774a:	b2da      	uxtb	r2, r3
    774c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7750:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7754:	701a      	strb	r2, [r3, #0]
    7756:	f24c 3319 	movw	r3, #49945	; 0xc319
    775a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    775e:	781b      	ldrb	r3, [r3, #0]
    7760:	2bff      	cmp	r3, #255	; 0xff
    7762:	d105      	bne.n	7770 <send_boot+0x114>
    7764:	f24c 3319 	movw	r3, #49945	; 0xc319
    7768:	f2c2 0304 	movt	r3, #8196	; 0x2004
    776c:	2200      	movs	r2, #0
    776e:	701a      	strb	r2, [r3, #0]
    7770:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7774:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7778:	2201      	movs	r2, #1
    777a:	701a      	strb	r2, [r3, #0]
    777c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7780:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7784:	2201      	movs	r2, #1
    7786:	701a      	strb	r2, [r3, #0]
    7788:	f24c 3319 	movw	r3, #49945	; 0xc319
    778c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7790:	781b      	ldrb	r3, [r3, #0]
    7792:	461a      	mov	r2, r3
    7794:	f648 336a 	movw	r3, #35690	; 0x8b6a
    7798:	f2c0 0301 	movt	r3, #1
    779c:	7819      	ldrb	r1, [r3, #0]
    779e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    77a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77a6:	5499      	strb	r1, [r3, r2]
    77a8:	f648 336a 	movw	r3, #35690	; 0x8b6a
    77ac:	f2c0 0301 	movt	r3, #1
    77b0:	781a      	ldrb	r2, [r3, #0]
    77b2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    77b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77ba:	781b      	ldrb	r3, [r3, #0]
    77bc:	4413      	add	r3, r2
    77be:	b2da      	uxtb	r2, r3
    77c0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    77c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77c8:	701a      	strb	r2, [r3, #0]
    77ca:	f24c 431e 	movw	r3, #50206	; 0xc41e
    77ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77d2:	781a      	ldrb	r2, [r3, #0]
    77d4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    77d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77dc:	781b      	ldrb	r3, [r3, #0]
    77de:	4413      	add	r3, r2
    77e0:	b2da      	uxtb	r2, r3
    77e2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    77e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77ea:	701a      	strb	r2, [r3, #0]
    77ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    77f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77f4:	781b      	ldrb	r3, [r3, #0]
    77f6:	3301      	adds	r3, #1
    77f8:	b2da      	uxtb	r2, r3
    77fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    77fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7802:	701a      	strb	r2, [r3, #0]
    7804:	f24c 3319 	movw	r3, #49945	; 0xc319
    7808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    780c:	781b      	ldrb	r3, [r3, #0]
    780e:	2bff      	cmp	r3, #255	; 0xff
    7810:	d105      	bne.n	781e <send_boot+0x1c2>
    7812:	f24c 3319 	movw	r3, #49945	; 0xc319
    7816:	f2c2 0304 	movt	r3, #8196	; 0x2004
    781a:	2200      	movs	r2, #0
    781c:	701a      	strb	r2, [r3, #0]
    781e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7822:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7826:	781b      	ldrb	r3, [r3, #0]
    7828:	461a      	mov	r2, r3
    782a:	f648 336a 	movw	r3, #35690	; 0x8b6a
    782e:	f2c0 0301 	movt	r3, #1
    7832:	7859      	ldrb	r1, [r3, #1]
    7834:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    783c:	5499      	strb	r1, [r3, r2]
    783e:	4b88      	ldr	r3, [pc, #544]	; (7a60 <send_boot+0x404>)
    7840:	781a      	ldrb	r2, [r3, #0]
    7842:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7846:	f2c2 0304 	movt	r3, #8196	; 0x2004
    784a:	781b      	ldrb	r3, [r3, #0]
    784c:	4413      	add	r3, r2
    784e:	b2da      	uxtb	r2, r3
    7850:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7854:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7858:	701a      	strb	r2, [r3, #0]
    785a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    785e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7862:	781a      	ldrb	r2, [r3, #0]
    7864:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7868:	f2c2 0304 	movt	r3, #8196	; 0x2004
    786c:	781b      	ldrb	r3, [r3, #0]
    786e:	4413      	add	r3, r2
    7870:	b2da      	uxtb	r2, r3
    7872:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7876:	f2c2 0304 	movt	r3, #8196	; 0x2004
    787a:	701a      	strb	r2, [r3, #0]
    787c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7884:	781b      	ldrb	r3, [r3, #0]
    7886:	3301      	adds	r3, #1
    7888:	b2da      	uxtb	r2, r3
    788a:	f24c 3319 	movw	r3, #49945	; 0xc319
    788e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7892:	701a      	strb	r2, [r3, #0]
    7894:	f24c 3319 	movw	r3, #49945	; 0xc319
    7898:	f2c2 0304 	movt	r3, #8196	; 0x2004
    789c:	781b      	ldrb	r3, [r3, #0]
    789e:	2bff      	cmp	r3, #255	; 0xff
    78a0:	d105      	bne.n	78ae <send_boot+0x252>
    78a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    78a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78aa:	2200      	movs	r2, #0
    78ac:	701a      	strb	r2, [r3, #0]
    78ae:	f24c 3319 	movw	r3, #49945	; 0xc319
    78b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78b6:	781b      	ldrb	r3, [r3, #0]
    78b8:	461a      	mov	r2, r3
    78ba:	f24c 431d 	movw	r3, #50205	; 0xc41d
    78be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78c2:	7819      	ldrb	r1, [r3, #0]
    78c4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    78c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78cc:	5499      	strb	r1, [r3, r2]
    78ce:	f24c 3319 	movw	r3, #49945	; 0xc319
    78d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78d6:	781b      	ldrb	r3, [r3, #0]
    78d8:	3301      	adds	r3, #1
    78da:	b2da      	uxtb	r2, r3
    78dc:	f24c 3319 	movw	r3, #49945	; 0xc319
    78e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78e4:	701a      	strb	r2, [r3, #0]
    78e6:	f24c 3319 	movw	r3, #49945	; 0xc319
    78ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78ee:	781b      	ldrb	r3, [r3, #0]
    78f0:	2bff      	cmp	r3, #255	; 0xff
    78f2:	d105      	bne.n	7900 <send_boot+0x2a4>
    78f4:	f24c 3319 	movw	r3, #49945	; 0xc319
    78f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78fc:	2200      	movs	r2, #0
    78fe:	701a      	strb	r2, [r3, #0]
    7900:	f24c 3319 	movw	r3, #49945	; 0xc319
    7904:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7908:	781b      	ldrb	r3, [r3, #0]
    790a:	461a      	mov	r2, r3
    790c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7910:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7914:	7819      	ldrb	r1, [r3, #0]
    7916:	f24c 331c 	movw	r3, #49948	; 0xc31c
    791a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    791e:	5499      	strb	r1, [r3, r2]
    7920:	f24c 3319 	movw	r3, #49945	; 0xc319
    7924:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7928:	781b      	ldrb	r3, [r3, #0]
    792a:	3301      	adds	r3, #1
    792c:	b2da      	uxtb	r2, r3
    792e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7932:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7936:	701a      	strb	r2, [r3, #0]
    7938:	f24c 3319 	movw	r3, #49945	; 0xc319
    793c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7940:	781b      	ldrb	r3, [r3, #0]
    7942:	2bff      	cmp	r3, #255	; 0xff
    7944:	d105      	bne.n	7952 <send_boot+0x2f6>
    7946:	f24c 3319 	movw	r3, #49945	; 0xc319
    794a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    794e:	2200      	movs	r2, #0
    7950:	701a      	strb	r2, [r3, #0]
    7952:	f242 0339 	movw	r3, #8249	; 0x2039
    7956:	f2c2 0300 	movt	r3, #8192	; 0x2000
    795a:	781b      	ldrb	r3, [r3, #0]
    795c:	b2db      	uxtb	r3, r3
    795e:	f003 0310 	and.w	r3, r3, #16
    7962:	2b00      	cmp	r3, #0
    7964:	d15a      	bne.n	7a1c <send_boot+0x3c0>
    7966:	f24c 331a 	movw	r3, #49946	; 0xc31a
    796a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    796e:	781b      	ldrb	r3, [r3, #0]
    7970:	b2db      	uxtb	r3, r3
    7972:	461a      	mov	r2, r3
    7974:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7978:	f2c2 0304 	movt	r3, #8196	; 0x2004
    797c:	5c9a      	ldrb	r2, [r3, r2]
    797e:	f24c 431b 	movw	r3, #50203	; 0xc41b
    7982:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7986:	701a      	strb	r2, [r3, #0]
    7988:	f24c 431c 	movw	r3, #50204	; 0xc41c
    798c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7990:	2200      	movs	r2, #0
    7992:	701a      	strb	r2, [r3, #0]
    7994:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7998:	f2c2 0304 	movt	r3, #8196	; 0x2004
    799c:	781b      	ldrb	r3, [r3, #0]
    799e:	b2db      	uxtb	r3, r3
    79a0:	3301      	adds	r3, #1
    79a2:	b2da      	uxtb	r2, r3
    79a4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    79a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79ac:	701a      	strb	r2, [r3, #0]
    79ae:	f24c 331a 	movw	r3, #49946	; 0xc31a
    79b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79b6:	781b      	ldrb	r3, [r3, #0]
    79b8:	b2db      	uxtb	r3, r3
    79ba:	2bff      	cmp	r3, #255	; 0xff
    79bc:	d105      	bne.n	79ca <send_boot+0x36e>
    79be:	f24c 331a 	movw	r3, #49946	; 0xc31a
    79c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79c6:	2200      	movs	r2, #0
    79c8:	701a      	strb	r2, [r3, #0]
    79ca:	f242 0338 	movw	r3, #8248	; 0x2038
    79ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79d2:	f242 0238 	movw	r2, #8248	; 0x2038
    79d6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    79da:	7812      	ldrb	r2, [r2, #0]
    79dc:	b2d2      	uxtb	r2, r2
    79de:	f042 0201 	orr.w	r2, r2, #1
    79e2:	b2d2      	uxtb	r2, r2
    79e4:	701a      	strb	r2, [r3, #0]
    79e6:	f242 0339 	movw	r3, #8249	; 0x2039
    79ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79ee:	f242 0239 	movw	r2, #8249	; 0x2039
    79f2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    79f6:	7812      	ldrb	r2, [r2, #0]
    79f8:	b2d2      	uxtb	r2, r2
    79fa:	f042 0210 	orr.w	r2, r2, #16
    79fe:	b2d2      	uxtb	r2, r2
    7a00:	701a      	strb	r2, [r3, #0]
    7a02:	e00b      	b.n	7a1c <send_boot+0x3c0>
    7a04:	f24c 3318 	movw	r3, #49944	; 0xc318
    7a08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a0c:	781b      	ldrb	r3, [r3, #0]
    7a0e:	3301      	adds	r3, #1
    7a10:	b2da      	uxtb	r2, r3
    7a12:	f24c 3318 	movw	r3, #49944	; 0xc318
    7a16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a1a:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    7a1c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7a20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a24:	781a      	ldrb	r2, [r3, #0]
    7a26:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7a2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a2e:	781b      	ldrb	r3, [r3, #0]
    7a30:	b2db      	uxtb	r3, r3
    7a32:	429a      	cmp	r2, r3
    7a34:	d316      	bcc.n	7a64 <send_boot+0x408>
    7a36:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7a3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a3e:	781b      	ldrb	r3, [r3, #0]
    7a40:	b2db      	uxtb	r3, r3
    7a42:	461a      	mov	r2, r3
    7a44:	f24c 3319 	movw	r3, #49945	; 0xc319
    7a48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a4c:	781b      	ldrb	r3, [r3, #0]
    7a4e:	1ad3      	subs	r3, r2, r3
    7a50:	33ff      	adds	r3, #255	; 0xff
    7a52:	2b14      	cmp	r3, #20
    7a54:	bfd4      	ite	le
    7a56:	2300      	movle	r3, #0
    7a58:	2301      	movgt	r3, #1
    7a5a:	b2db      	uxtb	r3, r3
    7a5c:	e014      	b.n	7a88 <send_boot+0x42c>
    7a5e:	bf00      	nop
    7a60:	00018b6b 	.word	0x00018b6b
    7a64:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7a68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a6c:	781b      	ldrb	r3, [r3, #0]
    7a6e:	b2db      	uxtb	r3, r3
    7a70:	461a      	mov	r2, r3
    7a72:	f24c 3319 	movw	r3, #49945	; 0xc319
    7a76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a7a:	781b      	ldrb	r3, [r3, #0]
    7a7c:	1ad3      	subs	r3, r2, r3
    7a7e:	2b14      	cmp	r3, #20
    7a80:	bfd4      	ite	le
    7a82:	2300      	movle	r3, #0
    7a84:	2301      	movgt	r3, #1
    7a86:	b2db      	uxtb	r3, r3
    7a88:	2b00      	cmp	r3, #0
    7a8a:	f000 85a5 	beq.w	85d8 <send_boot+0xf7c>
    7a8e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7a92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a96:	781b      	ldrb	r3, [r3, #0]
    7a98:	461a      	mov	r2, r3
    7a9a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7a9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aa2:	2105      	movs	r1, #5
    7aa4:	5499      	strb	r1, [r3, r2]
    7aa6:	f24c 3319 	movw	r3, #49945	; 0xc319
    7aaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aae:	781b      	ldrb	r3, [r3, #0]
    7ab0:	3301      	adds	r3, #1
    7ab2:	b2da      	uxtb	r2, r3
    7ab4:	f24c 3319 	movw	r3, #49945	; 0xc319
    7ab8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7abc:	701a      	strb	r2, [r3, #0]
    7abe:	f24c 3319 	movw	r3, #49945	; 0xc319
    7ac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ac6:	781b      	ldrb	r3, [r3, #0]
    7ac8:	2bff      	cmp	r3, #255	; 0xff
    7aca:	d105      	bne.n	7ad8 <send_boot+0x47c>
    7acc:	f24c 3319 	movw	r3, #49945	; 0xc319
    7ad0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ad4:	2200      	movs	r2, #0
    7ad6:	701a      	strb	r2, [r3, #0]
    7ad8:	f24c 3319 	movw	r3, #49945	; 0xc319
    7adc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ae0:	781b      	ldrb	r3, [r3, #0]
    7ae2:	461a      	mov	r2, r3
    7ae4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7ae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aec:	2105      	movs	r1, #5
    7aee:	5499      	strb	r1, [r3, r2]
    7af0:	f24c 3319 	movw	r3, #49945	; 0xc319
    7af4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7af8:	781b      	ldrb	r3, [r3, #0]
    7afa:	3301      	adds	r3, #1
    7afc:	b2da      	uxtb	r2, r3
    7afe:	f24c 3319 	movw	r3, #49945	; 0xc319
    7b02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b06:	701a      	strb	r2, [r3, #0]
    7b08:	f24c 3319 	movw	r3, #49945	; 0xc319
    7b0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b10:	781b      	ldrb	r3, [r3, #0]
    7b12:	2bff      	cmp	r3, #255	; 0xff
    7b14:	d105      	bne.n	7b22 <send_boot+0x4c6>
    7b16:	f24c 3319 	movw	r3, #49945	; 0xc319
    7b1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b1e:	2200      	movs	r2, #0
    7b20:	701a      	strb	r2, [r3, #0]
    7b22:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7b26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b2a:	2205      	movs	r2, #5
    7b2c:	701a      	strb	r2, [r3, #0]
    7b2e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7b32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b36:	2205      	movs	r2, #5
    7b38:	701a      	strb	r2, [r3, #0]
    7b3a:	f24c 3319 	movw	r3, #49945	; 0xc319
    7b3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b42:	781b      	ldrb	r3, [r3, #0]
    7b44:	461a      	mov	r2, r3
    7b46:	f64c 1310 	movw	r3, #51472	; 0xc910
    7b4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b4e:	7819      	ldrb	r1, [r3, #0]
    7b50:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7b54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b58:	5499      	strb	r1, [r3, r2]
    7b5a:	f64c 1310 	movw	r3, #51472	; 0xc910
    7b5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b62:	781a      	ldrb	r2, [r3, #0]
    7b64:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7b68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b6c:	781b      	ldrb	r3, [r3, #0]
    7b6e:	4413      	add	r3, r2
    7b70:	b2da      	uxtb	r2, r3
    7b72:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7b76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b7a:	701a      	strb	r2, [r3, #0]
    7b7c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7b80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b84:	781a      	ldrb	r2, [r3, #0]
    7b86:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7b8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b8e:	781b      	ldrb	r3, [r3, #0]
    7b90:	4413      	add	r3, r2
    7b92:	b2da      	uxtb	r2, r3
    7b94:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7b98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b9c:	701a      	strb	r2, [r3, #0]
    7b9e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7ba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ba6:	781b      	ldrb	r3, [r3, #0]
    7ba8:	3301      	adds	r3, #1
    7baa:	b2da      	uxtb	r2, r3
    7bac:	f24c 3319 	movw	r3, #49945	; 0xc319
    7bb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bb4:	701a      	strb	r2, [r3, #0]
    7bb6:	f24c 3319 	movw	r3, #49945	; 0xc319
    7bba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bbe:	781b      	ldrb	r3, [r3, #0]
    7bc0:	2bff      	cmp	r3, #255	; 0xff
    7bc2:	d105      	bne.n	7bd0 <send_boot+0x574>
    7bc4:	f24c 3319 	movw	r3, #49945	; 0xc319
    7bc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bcc:	2200      	movs	r2, #0
    7bce:	701a      	strb	r2, [r3, #0]
    7bd0:	f24c 3319 	movw	r3, #49945	; 0xc319
    7bd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bd8:	781b      	ldrb	r3, [r3, #0]
    7bda:	461a      	mov	r2, r3
    7bdc:	f64c 1310 	movw	r3, #51472	; 0xc910
    7be0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7be4:	7859      	ldrb	r1, [r3, #1]
    7be6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7bea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bee:	5499      	strb	r1, [r3, r2]
    7bf0:	4bd1      	ldr	r3, [pc, #836]	; (7f38 <send_boot+0x8dc>)
    7bf2:	781a      	ldrb	r2, [r3, #0]
    7bf4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7bf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bfc:	781b      	ldrb	r3, [r3, #0]
    7bfe:	4413      	add	r3, r2
    7c00:	b2da      	uxtb	r2, r3
    7c02:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7c06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c0a:	701a      	strb	r2, [r3, #0]
    7c0c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7c10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c14:	781a      	ldrb	r2, [r3, #0]
    7c16:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7c1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c1e:	781b      	ldrb	r3, [r3, #0]
    7c20:	4413      	add	r3, r2
    7c22:	b2da      	uxtb	r2, r3
    7c24:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7c28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c2c:	701a      	strb	r2, [r3, #0]
    7c2e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7c32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c36:	781b      	ldrb	r3, [r3, #0]
    7c38:	3301      	adds	r3, #1
    7c3a:	b2da      	uxtb	r2, r3
    7c3c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7c40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c44:	701a      	strb	r2, [r3, #0]
    7c46:	f24c 3319 	movw	r3, #49945	; 0xc319
    7c4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c4e:	781b      	ldrb	r3, [r3, #0]
    7c50:	2bff      	cmp	r3, #255	; 0xff
    7c52:	d105      	bne.n	7c60 <send_boot+0x604>
    7c54:	f24c 3319 	movw	r3, #49945	; 0xc319
    7c58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c5c:	2200      	movs	r2, #0
    7c5e:	701a      	strb	r2, [r3, #0]
    7c60:	f24c 3319 	movw	r3, #49945	; 0xc319
    7c64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c68:	781b      	ldrb	r3, [r3, #0]
    7c6a:	461a      	mov	r2, r3
    7c6c:	f64c 1310 	movw	r3, #51472	; 0xc910
    7c70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c74:	7899      	ldrb	r1, [r3, #2]
    7c76:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7c7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c7e:	5499      	strb	r1, [r3, r2]
    7c80:	4bae      	ldr	r3, [pc, #696]	; (7f3c <send_boot+0x8e0>)
    7c82:	781a      	ldrb	r2, [r3, #0]
    7c84:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7c88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c8c:	781b      	ldrb	r3, [r3, #0]
    7c8e:	4413      	add	r3, r2
    7c90:	b2da      	uxtb	r2, r3
    7c92:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7c96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c9a:	701a      	strb	r2, [r3, #0]
    7c9c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7ca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ca4:	781a      	ldrb	r2, [r3, #0]
    7ca6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7caa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cae:	781b      	ldrb	r3, [r3, #0]
    7cb0:	4413      	add	r3, r2
    7cb2:	b2da      	uxtb	r2, r3
    7cb4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7cb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cbc:	701a      	strb	r2, [r3, #0]
    7cbe:	f24c 3319 	movw	r3, #49945	; 0xc319
    7cc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cc6:	781b      	ldrb	r3, [r3, #0]
    7cc8:	3301      	adds	r3, #1
    7cca:	b2da      	uxtb	r2, r3
    7ccc:	f24c 3319 	movw	r3, #49945	; 0xc319
    7cd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cd4:	701a      	strb	r2, [r3, #0]
    7cd6:	f24c 3319 	movw	r3, #49945	; 0xc319
    7cda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cde:	781b      	ldrb	r3, [r3, #0]
    7ce0:	2bff      	cmp	r3, #255	; 0xff
    7ce2:	d105      	bne.n	7cf0 <send_boot+0x694>
    7ce4:	f24c 3319 	movw	r3, #49945	; 0xc319
    7ce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cec:	2200      	movs	r2, #0
    7cee:	701a      	strb	r2, [r3, #0]
    7cf0:	f24c 3319 	movw	r3, #49945	; 0xc319
    7cf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cf8:	781b      	ldrb	r3, [r3, #0]
    7cfa:	461a      	mov	r2, r3
    7cfc:	f64c 1310 	movw	r3, #51472	; 0xc910
    7d00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d04:	78d9      	ldrb	r1, [r3, #3]
    7d06:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7d0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d0e:	5499      	strb	r1, [r3, r2]
    7d10:	4b8b      	ldr	r3, [pc, #556]	; (7f40 <send_boot+0x8e4>)
    7d12:	781a      	ldrb	r2, [r3, #0]
    7d14:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7d18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d1c:	781b      	ldrb	r3, [r3, #0]
    7d1e:	4413      	add	r3, r2
    7d20:	b2da      	uxtb	r2, r3
    7d22:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7d26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d2a:	701a      	strb	r2, [r3, #0]
    7d2c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7d30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d34:	781a      	ldrb	r2, [r3, #0]
    7d36:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7d3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d3e:	781b      	ldrb	r3, [r3, #0]
    7d40:	4413      	add	r3, r2
    7d42:	b2da      	uxtb	r2, r3
    7d44:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7d48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d4c:	701a      	strb	r2, [r3, #0]
    7d4e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7d52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d56:	781b      	ldrb	r3, [r3, #0]
    7d58:	3301      	adds	r3, #1
    7d5a:	b2da      	uxtb	r2, r3
    7d5c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7d60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d64:	701a      	strb	r2, [r3, #0]
    7d66:	f24c 3319 	movw	r3, #49945	; 0xc319
    7d6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d6e:	781b      	ldrb	r3, [r3, #0]
    7d70:	2bff      	cmp	r3, #255	; 0xff
    7d72:	d105      	bne.n	7d80 <send_boot+0x724>
    7d74:	f24c 3319 	movw	r3, #49945	; 0xc319
    7d78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d7c:	2200      	movs	r2, #0
    7d7e:	701a      	strb	r2, [r3, #0]
    7d80:	f24c 3319 	movw	r3, #49945	; 0xc319
    7d84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d88:	781b      	ldrb	r3, [r3, #0]
    7d8a:	461a      	mov	r2, r3
    7d8c:	f64c 1314 	movw	r3, #51476	; 0xc914
    7d90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d94:	7819      	ldrb	r1, [r3, #0]
    7d96:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7d9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d9e:	5499      	strb	r1, [r3, r2]
    7da0:	f64c 1314 	movw	r3, #51476	; 0xc914
    7da4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7da8:	781a      	ldrb	r2, [r3, #0]
    7daa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7dae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7db2:	781b      	ldrb	r3, [r3, #0]
    7db4:	4413      	add	r3, r2
    7db6:	b2da      	uxtb	r2, r3
    7db8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7dbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dc0:	701a      	strb	r2, [r3, #0]
    7dc2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7dc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dca:	781a      	ldrb	r2, [r3, #0]
    7dcc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7dd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dd4:	781b      	ldrb	r3, [r3, #0]
    7dd6:	4413      	add	r3, r2
    7dd8:	b2da      	uxtb	r2, r3
    7dda:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7dde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7de2:	701a      	strb	r2, [r3, #0]
    7de4:	f24c 3319 	movw	r3, #49945	; 0xc319
    7de8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dec:	781b      	ldrb	r3, [r3, #0]
    7dee:	3301      	adds	r3, #1
    7df0:	b2da      	uxtb	r2, r3
    7df2:	f24c 3319 	movw	r3, #49945	; 0xc319
    7df6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dfa:	701a      	strb	r2, [r3, #0]
    7dfc:	f24c 3319 	movw	r3, #49945	; 0xc319
    7e00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e04:	781b      	ldrb	r3, [r3, #0]
    7e06:	2bff      	cmp	r3, #255	; 0xff
    7e08:	d105      	bne.n	7e16 <send_boot+0x7ba>
    7e0a:	f24c 3319 	movw	r3, #49945	; 0xc319
    7e0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e12:	2200      	movs	r2, #0
    7e14:	701a      	strb	r2, [r3, #0]
    7e16:	f24c 3319 	movw	r3, #49945	; 0xc319
    7e1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e1e:	781b      	ldrb	r3, [r3, #0]
    7e20:	461a      	mov	r2, r3
    7e22:	f64c 1314 	movw	r3, #51476	; 0xc914
    7e26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e2a:	7859      	ldrb	r1, [r3, #1]
    7e2c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7e30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e34:	5499      	strb	r1, [r3, r2]
    7e36:	4b43      	ldr	r3, [pc, #268]	; (7f44 <send_boot+0x8e8>)
    7e38:	781a      	ldrb	r2, [r3, #0]
    7e3a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7e3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e42:	781b      	ldrb	r3, [r3, #0]
    7e44:	4413      	add	r3, r2
    7e46:	b2da      	uxtb	r2, r3
    7e48:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7e4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e50:	701a      	strb	r2, [r3, #0]
    7e52:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7e56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e5a:	781a      	ldrb	r2, [r3, #0]
    7e5c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7e60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e64:	781b      	ldrb	r3, [r3, #0]
    7e66:	4413      	add	r3, r2
    7e68:	b2da      	uxtb	r2, r3
    7e6a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7e6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e72:	701a      	strb	r2, [r3, #0]
    7e74:	f24c 3319 	movw	r3, #49945	; 0xc319
    7e78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e7c:	781b      	ldrb	r3, [r3, #0]
    7e7e:	3301      	adds	r3, #1
    7e80:	b2da      	uxtb	r2, r3
    7e82:	f24c 3319 	movw	r3, #49945	; 0xc319
    7e86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e8a:	701a      	strb	r2, [r3, #0]
    7e8c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7e90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e94:	781b      	ldrb	r3, [r3, #0]
    7e96:	2bff      	cmp	r3, #255	; 0xff
    7e98:	d105      	bne.n	7ea6 <send_boot+0x84a>
    7e9a:	f24c 3319 	movw	r3, #49945	; 0xc319
    7e9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ea2:	2200      	movs	r2, #0
    7ea4:	701a      	strb	r2, [r3, #0]
    7ea6:	f24c 3319 	movw	r3, #49945	; 0xc319
    7eaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eae:	781b      	ldrb	r3, [r3, #0]
    7eb0:	461a      	mov	r2, r3
    7eb2:	f64c 1314 	movw	r3, #51476	; 0xc914
    7eb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eba:	7899      	ldrb	r1, [r3, #2]
    7ebc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7ec0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ec4:	5499      	strb	r1, [r3, r2]
    7ec6:	4b20      	ldr	r3, [pc, #128]	; (7f48 <send_boot+0x8ec>)
    7ec8:	781a      	ldrb	r2, [r3, #0]
    7eca:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7ece:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ed2:	781b      	ldrb	r3, [r3, #0]
    7ed4:	4413      	add	r3, r2
    7ed6:	b2da      	uxtb	r2, r3
    7ed8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7edc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ee0:	701a      	strb	r2, [r3, #0]
    7ee2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7ee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eea:	781a      	ldrb	r2, [r3, #0]
    7eec:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7ef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ef4:	781b      	ldrb	r3, [r3, #0]
    7ef6:	4413      	add	r3, r2
    7ef8:	b2da      	uxtb	r2, r3
    7efa:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7efe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f02:	701a      	strb	r2, [r3, #0]
    7f04:	f24c 3319 	movw	r3, #49945	; 0xc319
    7f08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f0c:	781b      	ldrb	r3, [r3, #0]
    7f0e:	3301      	adds	r3, #1
    7f10:	b2da      	uxtb	r2, r3
    7f12:	f24c 3319 	movw	r3, #49945	; 0xc319
    7f16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f1a:	701a      	strb	r2, [r3, #0]
    7f1c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7f20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f24:	781b      	ldrb	r3, [r3, #0]
    7f26:	2bff      	cmp	r3, #255	; 0xff
    7f28:	d110      	bne.n	7f4c <send_boot+0x8f0>
    7f2a:	f24c 3319 	movw	r3, #49945	; 0xc319
    7f2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f32:	2200      	movs	r2, #0
    7f34:	701a      	strb	r2, [r3, #0]
    7f36:	e009      	b.n	7f4c <send_boot+0x8f0>
    7f38:	2004c911 	.word	0x2004c911
    7f3c:	2004c912 	.word	0x2004c912
    7f40:	2004c913 	.word	0x2004c913
    7f44:	2004c915 	.word	0x2004c915
    7f48:	2004c916 	.word	0x2004c916
    7f4c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7f50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f54:	781b      	ldrb	r3, [r3, #0]
    7f56:	461a      	mov	r2, r3
    7f58:	f64c 1314 	movw	r3, #51476	; 0xc914
    7f5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f60:	78d9      	ldrb	r1, [r3, #3]
    7f62:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7f66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f6a:	5499      	strb	r1, [r3, r2]
    7f6c:	4bd3      	ldr	r3, [pc, #844]	; (82bc <send_boot+0xc60>)
    7f6e:	781a      	ldrb	r2, [r3, #0]
    7f70:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7f74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f78:	781b      	ldrb	r3, [r3, #0]
    7f7a:	4413      	add	r3, r2
    7f7c:	b2da      	uxtb	r2, r3
    7f7e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7f82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f86:	701a      	strb	r2, [r3, #0]
    7f88:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7f8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f90:	781a      	ldrb	r2, [r3, #0]
    7f92:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7f96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f9a:	781b      	ldrb	r3, [r3, #0]
    7f9c:	4413      	add	r3, r2
    7f9e:	b2da      	uxtb	r2, r3
    7fa0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7fa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fa8:	701a      	strb	r2, [r3, #0]
    7faa:	f24c 3319 	movw	r3, #49945	; 0xc319
    7fae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fb2:	781b      	ldrb	r3, [r3, #0]
    7fb4:	3301      	adds	r3, #1
    7fb6:	b2da      	uxtb	r2, r3
    7fb8:	f24c 3319 	movw	r3, #49945	; 0xc319
    7fbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fc0:	701a      	strb	r2, [r3, #0]
    7fc2:	f24c 3319 	movw	r3, #49945	; 0xc319
    7fc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fca:	781b      	ldrb	r3, [r3, #0]
    7fcc:	2bff      	cmp	r3, #255	; 0xff
    7fce:	d105      	bne.n	7fdc <send_boot+0x980>
    7fd0:	f24c 3319 	movw	r3, #49945	; 0xc319
    7fd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fd8:	2200      	movs	r2, #0
    7fda:	701a      	strb	r2, [r3, #0]
    7fdc:	f24c 3319 	movw	r3, #49945	; 0xc319
    7fe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fe4:	781b      	ldrb	r3, [r3, #0]
    7fe6:	461a      	mov	r2, r3
    7fe8:	f64c 130c 	movw	r3, #51468	; 0xc90c
    7fec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ff0:	7819      	ldrb	r1, [r3, #0]
    7ff2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7ff6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ffa:	5499      	strb	r1, [r3, r2]
    7ffc:	f64c 130c 	movw	r3, #51468	; 0xc90c
    8000:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8004:	781a      	ldrb	r2, [r3, #0]
    8006:	f24c 431d 	movw	r3, #50205	; 0xc41d
    800a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    800e:	781b      	ldrb	r3, [r3, #0]
    8010:	4413      	add	r3, r2
    8012:	b2da      	uxtb	r2, r3
    8014:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8018:	f2c2 0304 	movt	r3, #8196	; 0x2004
    801c:	701a      	strb	r2, [r3, #0]
    801e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8022:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8026:	781a      	ldrb	r2, [r3, #0]
    8028:	f24c 431d 	movw	r3, #50205	; 0xc41d
    802c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8030:	781b      	ldrb	r3, [r3, #0]
    8032:	4413      	add	r3, r2
    8034:	b2da      	uxtb	r2, r3
    8036:	f24c 431e 	movw	r3, #50206	; 0xc41e
    803a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    803e:	701a      	strb	r2, [r3, #0]
    8040:	f24c 3319 	movw	r3, #49945	; 0xc319
    8044:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8048:	781b      	ldrb	r3, [r3, #0]
    804a:	3301      	adds	r3, #1
    804c:	b2da      	uxtb	r2, r3
    804e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8052:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8056:	701a      	strb	r2, [r3, #0]
    8058:	f24c 3319 	movw	r3, #49945	; 0xc319
    805c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8060:	781b      	ldrb	r3, [r3, #0]
    8062:	2bff      	cmp	r3, #255	; 0xff
    8064:	d105      	bne.n	8072 <send_boot+0xa16>
    8066:	f24c 3319 	movw	r3, #49945	; 0xc319
    806a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    806e:	2200      	movs	r2, #0
    8070:	701a      	strb	r2, [r3, #0]
    8072:	f24c 3319 	movw	r3, #49945	; 0xc319
    8076:	f2c2 0304 	movt	r3, #8196	; 0x2004
    807a:	781b      	ldrb	r3, [r3, #0]
    807c:	461a      	mov	r2, r3
    807e:	f64c 130c 	movw	r3, #51468	; 0xc90c
    8082:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8086:	7859      	ldrb	r1, [r3, #1]
    8088:	f24c 331c 	movw	r3, #49948	; 0xc31c
    808c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8090:	5499      	strb	r1, [r3, r2]
    8092:	4b8b      	ldr	r3, [pc, #556]	; (82c0 <send_boot+0xc64>)
    8094:	781a      	ldrb	r2, [r3, #0]
    8096:	f24c 431d 	movw	r3, #50205	; 0xc41d
    809a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    809e:	781b      	ldrb	r3, [r3, #0]
    80a0:	4413      	add	r3, r2
    80a2:	b2da      	uxtb	r2, r3
    80a4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    80a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80ac:	701a      	strb	r2, [r3, #0]
    80ae:	f24c 431e 	movw	r3, #50206	; 0xc41e
    80b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80b6:	781a      	ldrb	r2, [r3, #0]
    80b8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    80bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80c0:	781b      	ldrb	r3, [r3, #0]
    80c2:	4413      	add	r3, r2
    80c4:	b2da      	uxtb	r2, r3
    80c6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    80ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80ce:	701a      	strb	r2, [r3, #0]
    80d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    80d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80d8:	781b      	ldrb	r3, [r3, #0]
    80da:	3301      	adds	r3, #1
    80dc:	b2da      	uxtb	r2, r3
    80de:	f24c 3319 	movw	r3, #49945	; 0xc319
    80e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80e6:	701a      	strb	r2, [r3, #0]
    80e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    80ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80f0:	781b      	ldrb	r3, [r3, #0]
    80f2:	2bff      	cmp	r3, #255	; 0xff
    80f4:	d105      	bne.n	8102 <send_boot+0xaa6>
    80f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    80fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80fe:	2200      	movs	r2, #0
    8100:	701a      	strb	r2, [r3, #0]
    8102:	f24c 3319 	movw	r3, #49945	; 0xc319
    8106:	f2c2 0304 	movt	r3, #8196	; 0x2004
    810a:	781b      	ldrb	r3, [r3, #0]
    810c:	461a      	mov	r2, r3
    810e:	f64c 130c 	movw	r3, #51468	; 0xc90c
    8112:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8116:	7899      	ldrb	r1, [r3, #2]
    8118:	f24c 331c 	movw	r3, #49948	; 0xc31c
    811c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8120:	5499      	strb	r1, [r3, r2]
    8122:	4b68      	ldr	r3, [pc, #416]	; (82c4 <send_boot+0xc68>)
    8124:	781a      	ldrb	r2, [r3, #0]
    8126:	f24c 431d 	movw	r3, #50205	; 0xc41d
    812a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    812e:	781b      	ldrb	r3, [r3, #0]
    8130:	4413      	add	r3, r2
    8132:	b2da      	uxtb	r2, r3
    8134:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8138:	f2c2 0304 	movt	r3, #8196	; 0x2004
    813c:	701a      	strb	r2, [r3, #0]
    813e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8142:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8146:	781a      	ldrb	r2, [r3, #0]
    8148:	f24c 431d 	movw	r3, #50205	; 0xc41d
    814c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8150:	781b      	ldrb	r3, [r3, #0]
    8152:	4413      	add	r3, r2
    8154:	b2da      	uxtb	r2, r3
    8156:	f24c 431e 	movw	r3, #50206	; 0xc41e
    815a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    815e:	701a      	strb	r2, [r3, #0]
    8160:	f24c 3319 	movw	r3, #49945	; 0xc319
    8164:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8168:	781b      	ldrb	r3, [r3, #0]
    816a:	3301      	adds	r3, #1
    816c:	b2da      	uxtb	r2, r3
    816e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8172:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8176:	701a      	strb	r2, [r3, #0]
    8178:	f24c 3319 	movw	r3, #49945	; 0xc319
    817c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8180:	781b      	ldrb	r3, [r3, #0]
    8182:	2bff      	cmp	r3, #255	; 0xff
    8184:	d105      	bne.n	8192 <send_boot+0xb36>
    8186:	f24c 3319 	movw	r3, #49945	; 0xc319
    818a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    818e:	2200      	movs	r2, #0
    8190:	701a      	strb	r2, [r3, #0]
    8192:	f24c 3319 	movw	r3, #49945	; 0xc319
    8196:	f2c2 0304 	movt	r3, #8196	; 0x2004
    819a:	781b      	ldrb	r3, [r3, #0]
    819c:	461a      	mov	r2, r3
    819e:	f64c 130c 	movw	r3, #51468	; 0xc90c
    81a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81a6:	78d9      	ldrb	r1, [r3, #3]
    81a8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    81ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81b0:	5499      	strb	r1, [r3, r2]
    81b2:	4b45      	ldr	r3, [pc, #276]	; (82c8 <send_boot+0xc6c>)
    81b4:	781a      	ldrb	r2, [r3, #0]
    81b6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    81ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81be:	781b      	ldrb	r3, [r3, #0]
    81c0:	4413      	add	r3, r2
    81c2:	b2da      	uxtb	r2, r3
    81c4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    81c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81cc:	701a      	strb	r2, [r3, #0]
    81ce:	f24c 431e 	movw	r3, #50206	; 0xc41e
    81d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81d6:	781a      	ldrb	r2, [r3, #0]
    81d8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    81dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81e0:	781b      	ldrb	r3, [r3, #0]
    81e2:	4413      	add	r3, r2
    81e4:	b2da      	uxtb	r2, r3
    81e6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    81ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81ee:	701a      	strb	r2, [r3, #0]
    81f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    81f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81f8:	781b      	ldrb	r3, [r3, #0]
    81fa:	3301      	adds	r3, #1
    81fc:	b2da      	uxtb	r2, r3
    81fe:	f24c 3319 	movw	r3, #49945	; 0xc319
    8202:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8206:	701a      	strb	r2, [r3, #0]
    8208:	f24c 3319 	movw	r3, #49945	; 0xc319
    820c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8210:	781b      	ldrb	r3, [r3, #0]
    8212:	2bff      	cmp	r3, #255	; 0xff
    8214:	d105      	bne.n	8222 <send_boot+0xbc6>
    8216:	f24c 3319 	movw	r3, #49945	; 0xc319
    821a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    821e:	2200      	movs	r2, #0
    8220:	701a      	strb	r2, [r3, #0]
    8222:	f24c 3319 	movw	r3, #49945	; 0xc319
    8226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    822a:	781b      	ldrb	r3, [r3, #0]
    822c:	461a      	mov	r2, r3
    822e:	f240 5342 	movw	r3, #1346	; 0x542
    8232:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8236:	7819      	ldrb	r1, [r3, #0]
    8238:	f24c 331c 	movw	r3, #49948	; 0xc31c
    823c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8240:	5499      	strb	r1, [r3, r2]
    8242:	f240 5342 	movw	r3, #1346	; 0x542
    8246:	f2c2 0300 	movt	r3, #8192	; 0x2000
    824a:	781a      	ldrb	r2, [r3, #0]
    824c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8250:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8254:	781b      	ldrb	r3, [r3, #0]
    8256:	4413      	add	r3, r2
    8258:	b2da      	uxtb	r2, r3
    825a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    825e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8262:	701a      	strb	r2, [r3, #0]
    8264:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8268:	f2c2 0304 	movt	r3, #8196	; 0x2004
    826c:	781a      	ldrb	r2, [r3, #0]
    826e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8272:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8276:	781b      	ldrb	r3, [r3, #0]
    8278:	4413      	add	r3, r2
    827a:	b2da      	uxtb	r2, r3
    827c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8280:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8284:	701a      	strb	r2, [r3, #0]
    8286:	f24c 3319 	movw	r3, #49945	; 0xc319
    828a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    828e:	781b      	ldrb	r3, [r3, #0]
    8290:	3301      	adds	r3, #1
    8292:	b2da      	uxtb	r2, r3
    8294:	f24c 3319 	movw	r3, #49945	; 0xc319
    8298:	f2c2 0304 	movt	r3, #8196	; 0x2004
    829c:	701a      	strb	r2, [r3, #0]
    829e:	f24c 3319 	movw	r3, #49945	; 0xc319
    82a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82a6:	781b      	ldrb	r3, [r3, #0]
    82a8:	2bff      	cmp	r3, #255	; 0xff
    82aa:	d10f      	bne.n	82cc <send_boot+0xc70>
    82ac:	f24c 3319 	movw	r3, #49945	; 0xc319
    82b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82b4:	2200      	movs	r2, #0
    82b6:	701a      	strb	r2, [r3, #0]
    82b8:	e008      	b.n	82cc <send_boot+0xc70>
    82ba:	bf00      	nop
    82bc:	2004c917 	.word	0x2004c917
    82c0:	2004c90d 	.word	0x2004c90d
    82c4:	2004c90e 	.word	0x2004c90e
    82c8:	2004c90f 	.word	0x2004c90f
    82cc:	f24c 3319 	movw	r3, #49945	; 0xc319
    82d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82d4:	781b      	ldrb	r3, [r3, #0]
    82d6:	461a      	mov	r2, r3
    82d8:	f240 5342 	movw	r3, #1346	; 0x542
    82dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82e0:	7859      	ldrb	r1, [r3, #1]
    82e2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    82e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82ea:	5499      	strb	r1, [r3, r2]
    82ec:	4bc5      	ldr	r3, [pc, #788]	; (8604 <send_boot+0xfa8>)
    82ee:	781a      	ldrb	r2, [r3, #0]
    82f0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    82f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82f8:	781b      	ldrb	r3, [r3, #0]
    82fa:	4413      	add	r3, r2
    82fc:	b2da      	uxtb	r2, r3
    82fe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8302:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8306:	701a      	strb	r2, [r3, #0]
    8308:	f24c 431e 	movw	r3, #50206	; 0xc41e
    830c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8310:	781a      	ldrb	r2, [r3, #0]
    8312:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8316:	f2c2 0304 	movt	r3, #8196	; 0x2004
    831a:	781b      	ldrb	r3, [r3, #0]
    831c:	4413      	add	r3, r2
    831e:	b2da      	uxtb	r2, r3
    8320:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8324:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8328:	701a      	strb	r2, [r3, #0]
    832a:	f24c 3319 	movw	r3, #49945	; 0xc319
    832e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8332:	781b      	ldrb	r3, [r3, #0]
    8334:	3301      	adds	r3, #1
    8336:	b2da      	uxtb	r2, r3
    8338:	f24c 3319 	movw	r3, #49945	; 0xc319
    833c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8340:	701a      	strb	r2, [r3, #0]
    8342:	f24c 3319 	movw	r3, #49945	; 0xc319
    8346:	f2c2 0304 	movt	r3, #8196	; 0x2004
    834a:	781b      	ldrb	r3, [r3, #0]
    834c:	2bff      	cmp	r3, #255	; 0xff
    834e:	d105      	bne.n	835c <send_boot+0xd00>
    8350:	f24c 3319 	movw	r3, #49945	; 0xc319
    8354:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8358:	2200      	movs	r2, #0
    835a:	701a      	strb	r2, [r3, #0]
    835c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8360:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8364:	781b      	ldrb	r3, [r3, #0]
    8366:	461a      	mov	r2, r3
    8368:	f240 5344 	movw	r3, #1348	; 0x544
    836c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8370:	7819      	ldrb	r1, [r3, #0]
    8372:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8376:	f2c2 0304 	movt	r3, #8196	; 0x2004
    837a:	5499      	strb	r1, [r3, r2]
    837c:	f240 5344 	movw	r3, #1348	; 0x544
    8380:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8384:	781a      	ldrb	r2, [r3, #0]
    8386:	f24c 431d 	movw	r3, #50205	; 0xc41d
    838a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    838e:	781b      	ldrb	r3, [r3, #0]
    8390:	4413      	add	r3, r2
    8392:	b2da      	uxtb	r2, r3
    8394:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8398:	f2c2 0304 	movt	r3, #8196	; 0x2004
    839c:	701a      	strb	r2, [r3, #0]
    839e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    83a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83a6:	781a      	ldrb	r2, [r3, #0]
    83a8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    83ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83b0:	781b      	ldrb	r3, [r3, #0]
    83b2:	4413      	add	r3, r2
    83b4:	b2da      	uxtb	r2, r3
    83b6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    83ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83be:	701a      	strb	r2, [r3, #0]
    83c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    83c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83c8:	781b      	ldrb	r3, [r3, #0]
    83ca:	3301      	adds	r3, #1
    83cc:	b2da      	uxtb	r2, r3
    83ce:	f24c 3319 	movw	r3, #49945	; 0xc319
    83d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83d6:	701a      	strb	r2, [r3, #0]
    83d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    83dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83e0:	781b      	ldrb	r3, [r3, #0]
    83e2:	2bff      	cmp	r3, #255	; 0xff
    83e4:	d105      	bne.n	83f2 <send_boot+0xd96>
    83e6:	f24c 3319 	movw	r3, #49945	; 0xc319
    83ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83ee:	2200      	movs	r2, #0
    83f0:	701a      	strb	r2, [r3, #0]
    83f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    83f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83fa:	781b      	ldrb	r3, [r3, #0]
    83fc:	461a      	mov	r2, r3
    83fe:	f240 5344 	movw	r3, #1348	; 0x544
    8402:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8406:	7859      	ldrb	r1, [r3, #1]
    8408:	f24c 331c 	movw	r3, #49948	; 0xc31c
    840c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8410:	5499      	strb	r1, [r3, r2]
    8412:	4b7d      	ldr	r3, [pc, #500]	; (8608 <send_boot+0xfac>)
    8414:	781a      	ldrb	r2, [r3, #0]
    8416:	f24c 431d 	movw	r3, #50205	; 0xc41d
    841a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    841e:	781b      	ldrb	r3, [r3, #0]
    8420:	4413      	add	r3, r2
    8422:	b2da      	uxtb	r2, r3
    8424:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8428:	f2c2 0304 	movt	r3, #8196	; 0x2004
    842c:	701a      	strb	r2, [r3, #0]
    842e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8436:	781a      	ldrb	r2, [r3, #0]
    8438:	f24c 431d 	movw	r3, #50205	; 0xc41d
    843c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8440:	781b      	ldrb	r3, [r3, #0]
    8442:	4413      	add	r3, r2
    8444:	b2da      	uxtb	r2, r3
    8446:	f24c 431e 	movw	r3, #50206	; 0xc41e
    844a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    844e:	701a      	strb	r2, [r3, #0]
    8450:	f24c 3319 	movw	r3, #49945	; 0xc319
    8454:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8458:	781b      	ldrb	r3, [r3, #0]
    845a:	3301      	adds	r3, #1
    845c:	b2da      	uxtb	r2, r3
    845e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8462:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8466:	701a      	strb	r2, [r3, #0]
    8468:	f24c 3319 	movw	r3, #49945	; 0xc319
    846c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8470:	781b      	ldrb	r3, [r3, #0]
    8472:	2bff      	cmp	r3, #255	; 0xff
    8474:	d105      	bne.n	8482 <send_boot+0xe26>
    8476:	f24c 3319 	movw	r3, #49945	; 0xc319
    847a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    847e:	2200      	movs	r2, #0
    8480:	701a      	strb	r2, [r3, #0]
    8482:	f24c 3319 	movw	r3, #49945	; 0xc319
    8486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    848a:	781b      	ldrb	r3, [r3, #0]
    848c:	461a      	mov	r2, r3
    848e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8496:	7819      	ldrb	r1, [r3, #0]
    8498:	f24c 331c 	movw	r3, #49948	; 0xc31c
    849c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84a0:	5499      	strb	r1, [r3, r2]
    84a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    84a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84aa:	781b      	ldrb	r3, [r3, #0]
    84ac:	3301      	adds	r3, #1
    84ae:	b2da      	uxtb	r2, r3
    84b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    84b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84b8:	701a      	strb	r2, [r3, #0]
    84ba:	f24c 3319 	movw	r3, #49945	; 0xc319
    84be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84c2:	781b      	ldrb	r3, [r3, #0]
    84c4:	2bff      	cmp	r3, #255	; 0xff
    84c6:	d105      	bne.n	84d4 <send_boot+0xe78>
    84c8:	f24c 3319 	movw	r3, #49945	; 0xc319
    84cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84d0:	2200      	movs	r2, #0
    84d2:	701a      	strb	r2, [r3, #0]
    84d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    84d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84dc:	781b      	ldrb	r3, [r3, #0]
    84de:	461a      	mov	r2, r3
    84e0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    84e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84e8:	7819      	ldrb	r1, [r3, #0]
    84ea:	f24c 331c 	movw	r3, #49948	; 0xc31c
    84ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84f2:	5499      	strb	r1, [r3, r2]
    84f4:	f24c 3319 	movw	r3, #49945	; 0xc319
    84f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84fc:	781b      	ldrb	r3, [r3, #0]
    84fe:	3301      	adds	r3, #1
    8500:	b2da      	uxtb	r2, r3
    8502:	f24c 3319 	movw	r3, #49945	; 0xc319
    8506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    850a:	701a      	strb	r2, [r3, #0]
    850c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8510:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8514:	781b      	ldrb	r3, [r3, #0]
    8516:	2bff      	cmp	r3, #255	; 0xff
    8518:	d105      	bne.n	8526 <send_boot+0xeca>
    851a:	f24c 3319 	movw	r3, #49945	; 0xc319
    851e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8522:	2200      	movs	r2, #0
    8524:	701a      	strb	r2, [r3, #0]
    8526:	f242 0339 	movw	r3, #8249	; 0x2039
    852a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    852e:	781b      	ldrb	r3, [r3, #0]
    8530:	b2db      	uxtb	r3, r3
    8532:	f003 0310 	and.w	r3, r3, #16
    8536:	2b00      	cmp	r3, #0
    8538:	d15a      	bne.n	85f0 <send_boot+0xf94>
    853a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    853e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8542:	781b      	ldrb	r3, [r3, #0]
    8544:	b2db      	uxtb	r3, r3
    8546:	461a      	mov	r2, r3
    8548:	f24c 331c 	movw	r3, #49948	; 0xc31c
    854c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8550:	5c9a      	ldrb	r2, [r3, r2]
    8552:	f24c 431b 	movw	r3, #50203	; 0xc41b
    8556:	f2c2 0304 	movt	r3, #8196	; 0x2004
    855a:	701a      	strb	r2, [r3, #0]
    855c:	f24c 431c 	movw	r3, #50204	; 0xc41c
    8560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8564:	2200      	movs	r2, #0
    8566:	701a      	strb	r2, [r3, #0]
    8568:	f24c 331a 	movw	r3, #49946	; 0xc31a
    856c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8570:	781b      	ldrb	r3, [r3, #0]
    8572:	b2db      	uxtb	r3, r3
    8574:	3301      	adds	r3, #1
    8576:	b2da      	uxtb	r2, r3
    8578:	f24c 331a 	movw	r3, #49946	; 0xc31a
    857c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8580:	701a      	strb	r2, [r3, #0]
    8582:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8586:	f2c2 0304 	movt	r3, #8196	; 0x2004
    858a:	781b      	ldrb	r3, [r3, #0]
    858c:	b2db      	uxtb	r3, r3
    858e:	2bff      	cmp	r3, #255	; 0xff
    8590:	d105      	bne.n	859e <send_boot+0xf42>
    8592:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8596:	f2c2 0304 	movt	r3, #8196	; 0x2004
    859a:	2200      	movs	r2, #0
    859c:	701a      	strb	r2, [r3, #0]
    859e:	f242 0338 	movw	r3, #8248	; 0x2038
    85a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85a6:	f242 0238 	movw	r2, #8248	; 0x2038
    85aa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    85ae:	7812      	ldrb	r2, [r2, #0]
    85b0:	b2d2      	uxtb	r2, r2
    85b2:	f042 0201 	orr.w	r2, r2, #1
    85b6:	b2d2      	uxtb	r2, r2
    85b8:	701a      	strb	r2, [r3, #0]
    85ba:	f242 0339 	movw	r3, #8249	; 0x2039
    85be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85c2:	f242 0239 	movw	r2, #8249	; 0x2039
    85c6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    85ca:	7812      	ldrb	r2, [r2, #0]
    85cc:	b2d2      	uxtb	r2, r2
    85ce:	f042 0210 	orr.w	r2, r2, #16
    85d2:	b2d2      	uxtb	r2, r2
    85d4:	701a      	strb	r2, [r3, #0]
    85d6:	e00b      	b.n	85f0 <send_boot+0xf94>
    85d8:	f24c 3318 	movw	r3, #49944	; 0xc318
    85dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85e0:	781b      	ldrb	r3, [r3, #0]
    85e2:	3301      	adds	r3, #1
    85e4:	b2da      	uxtb	r2, r3
    85e6:	f24c 3318 	movw	r3, #49944	; 0xc318
    85ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85ee:	701a      	strb	r2, [r3, #0]
      boot = FALSE;
    85f0:	f240 533d 	movw	r3, #1341	; 0x53d
    85f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85f8:	2200      	movs	r2, #0
    85fa:	701a      	strb	r2, [r3, #0]
  }
}
    85fc:	46bd      	mov	sp, r7
    85fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8602:	4770      	bx	lr
    8604:	20000543 	.word	0x20000543
    8608:	20000545 	.word	0x20000545

0000860c <send_attitude>:
void send_attitude(void){ //499ms
    860c:	b480      	push	{r7}
    860e:	af00      	add	r7, sp, #0
    // add by wanbo
  if(!boot)
    8610:	f240 533d 	movw	r3, #1341	; 0x53d
    8614:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8618:	781b      	ldrb	r3, [r3, #0]
    861a:	2b00      	cmp	r3, #0
    861c:	f040 84ee 	bne.w	8ffc <send_attitude+0x9f0>
  {
    count++;
    8620:	f24c 3311 	movw	r3, #49937	; 0xc311
    8624:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8628:	781b      	ldrb	r3, [r3, #0]
    862a:	3301      	adds	r3, #1
    862c:	b2da      	uxtb	r2, r3
    862e:	f24c 3311 	movw	r3, #49937	; 0xc311
    8632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8636:	701a      	strb	r2, [r3, #0]
    if (count == 250) count = 0;
    8638:	f24c 3311 	movw	r3, #49937	; 0xc311
    863c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8640:	781b      	ldrb	r3, [r3, #0]
    8642:	2bfa      	cmp	r3, #250	; 0xfa
    8644:	d105      	bne.n	8652 <send_attitude+0x46>
    8646:	f24c 3311 	movw	r3, #49937	; 0xc311
    864a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    864e:	2200      	movs	r2, #0
    8650:	701a      	strb	r2, [r3, #0]
    if (count % 5 == 0) 
    8652:	f24c 3311 	movw	r3, #49937	; 0xc311
    8656:	f2c2 0304 	movt	r3, #8196	; 0x2004
    865a:	781a      	ldrb	r2, [r3, #0]
    865c:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8660:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8664:	fba3 1302 	umull	r1, r3, r3, r2
    8668:	0899      	lsrs	r1, r3, #2
    866a:	460b      	mov	r3, r1
    866c:	009b      	lsls	r3, r3, #2
    866e:	440b      	add	r3, r1
    8670:	1ad3      	subs	r3, r2, r3
    8672:	b2db      	uxtb	r3, r3
    8674:	2b00      	cmp	r3, #0
    8676:	f040 84c1 	bne.w	8ffc <send_attitude+0x9f0>
       PERIODIC_SEND_ATTITUDE(); 
    867a:	f24c 3319 	movw	r3, #49945	; 0xc319
    867e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8682:	781a      	ldrb	r2, [r3, #0]
    8684:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8688:	f2c2 0304 	movt	r3, #8196	; 0x2004
    868c:	781b      	ldrb	r3, [r3, #0]
    868e:	b2db      	uxtb	r3, r3
    8690:	429a      	cmp	r2, r3
    8692:	d313      	bcc.n	86bc <send_attitude+0xb0>
    8694:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8698:	f2c2 0304 	movt	r3, #8196	; 0x2004
    869c:	781b      	ldrb	r3, [r3, #0]
    869e:	b2db      	uxtb	r3, r3
    86a0:	461a      	mov	r2, r3
    86a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    86a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86aa:	781b      	ldrb	r3, [r3, #0]
    86ac:	1ad3      	subs	r3, r2, r3
    86ae:	33ff      	adds	r3, #255	; 0xff
    86b0:	2b10      	cmp	r3, #16
    86b2:	bfd4      	ite	le
    86b4:	2300      	movle	r3, #0
    86b6:	2301      	movgt	r3, #1
    86b8:	b2db      	uxtb	r3, r3
    86ba:	e011      	b.n	86e0 <send_attitude+0xd4>
    86bc:	f24c 331a 	movw	r3, #49946	; 0xc31a
    86c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86c4:	781b      	ldrb	r3, [r3, #0]
    86c6:	b2db      	uxtb	r3, r3
    86c8:	461a      	mov	r2, r3
    86ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    86ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86d2:	781b      	ldrb	r3, [r3, #0]
    86d4:	1ad3      	subs	r3, r2, r3
    86d6:	2b10      	cmp	r3, #16
    86d8:	bfd4      	ite	le
    86da:	2300      	movle	r3, #0
    86dc:	2301      	movgt	r3, #1
    86de:	b2db      	uxtb	r3, r3
    86e0:	2b00      	cmp	r3, #0
    86e2:	f000 847f 	beq.w	8fe4 <send_attitude+0x9d8>
    86e6:	f24c 3319 	movw	r3, #49945	; 0xc319
    86ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86ee:	781b      	ldrb	r3, [r3, #0]
    86f0:	461a      	mov	r2, r3
    86f2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    86f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86fa:	2105      	movs	r1, #5
    86fc:	5499      	strb	r1, [r3, r2]
    86fe:	f24c 3319 	movw	r3, #49945	; 0xc319
    8702:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8706:	781b      	ldrb	r3, [r3, #0]
    8708:	3301      	adds	r3, #1
    870a:	b2da      	uxtb	r2, r3
    870c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8714:	701a      	strb	r2, [r3, #0]
    8716:	f24c 3319 	movw	r3, #49945	; 0xc319
    871a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    871e:	781b      	ldrb	r3, [r3, #0]
    8720:	2bff      	cmp	r3, #255	; 0xff
    8722:	d105      	bne.n	8730 <send_attitude+0x124>
    8724:	f24c 3319 	movw	r3, #49945	; 0xc319
    8728:	f2c2 0304 	movt	r3, #8196	; 0x2004
    872c:	2200      	movs	r2, #0
    872e:	701a      	strb	r2, [r3, #0]
    8730:	f24c 3319 	movw	r3, #49945	; 0xc319
    8734:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8738:	781b      	ldrb	r3, [r3, #0]
    873a:	461a      	mov	r2, r3
    873c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8744:	2106      	movs	r1, #6
    8746:	5499      	strb	r1, [r3, r2]
    8748:	f24c 3319 	movw	r3, #49945	; 0xc319
    874c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8750:	781b      	ldrb	r3, [r3, #0]
    8752:	3301      	adds	r3, #1
    8754:	b2da      	uxtb	r2, r3
    8756:	f24c 3319 	movw	r3, #49945	; 0xc319
    875a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    875e:	701a      	strb	r2, [r3, #0]
    8760:	f24c 3319 	movw	r3, #49945	; 0xc319
    8764:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8768:	781b      	ldrb	r3, [r3, #0]
    876a:	2bff      	cmp	r3, #255	; 0xff
    876c:	d105      	bne.n	877a <send_attitude+0x16e>
    876e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8772:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8776:	2200      	movs	r2, #0
    8778:	701a      	strb	r2, [r3, #0]
    877a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    877e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8782:	2206      	movs	r2, #6
    8784:	701a      	strb	r2, [r3, #0]
    8786:	f24c 431e 	movw	r3, #50206	; 0xc41e
    878a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    878e:	2206      	movs	r2, #6
    8790:	701a      	strb	r2, [r3, #0]
    8792:	f24c 3319 	movw	r3, #49945	; 0xc319
    8796:	f2c2 0304 	movt	r3, #8196	; 0x2004
    879a:	781b      	ldrb	r3, [r3, #0]
    879c:	461a      	mov	r2, r3
    879e:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    87a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87a6:	7819      	ldrb	r1, [r3, #0]
    87a8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    87ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87b0:	5499      	strb	r1, [r3, r2]
    87b2:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    87b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87ba:	781a      	ldrb	r2, [r3, #0]
    87bc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    87c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87c4:	781b      	ldrb	r3, [r3, #0]
    87c6:	4413      	add	r3, r2
    87c8:	b2da      	uxtb	r2, r3
    87ca:	f24c 431d 	movw	r3, #50205	; 0xc41d
    87ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87d2:	701a      	strb	r2, [r3, #0]
    87d4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    87d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87dc:	781a      	ldrb	r2, [r3, #0]
    87de:	f24c 431d 	movw	r3, #50205	; 0xc41d
    87e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87e6:	781b      	ldrb	r3, [r3, #0]
    87e8:	4413      	add	r3, r2
    87ea:	b2da      	uxtb	r2, r3
    87ec:	f24c 431e 	movw	r3, #50206	; 0xc41e
    87f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87f4:	701a      	strb	r2, [r3, #0]
    87f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    87fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87fe:	781b      	ldrb	r3, [r3, #0]
    8800:	3301      	adds	r3, #1
    8802:	b2da      	uxtb	r2, r3
    8804:	f24c 3319 	movw	r3, #49945	; 0xc319
    8808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    880c:	701a      	strb	r2, [r3, #0]
    880e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8816:	781b      	ldrb	r3, [r3, #0]
    8818:	2bff      	cmp	r3, #255	; 0xff
    881a:	d105      	bne.n	8828 <send_attitude+0x21c>
    881c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8820:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8824:	2200      	movs	r2, #0
    8826:	701a      	strb	r2, [r3, #0]
    8828:	f24c 3319 	movw	r3, #49945	; 0xc319
    882c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8830:	781b      	ldrb	r3, [r3, #0]
    8832:	461a      	mov	r2, r3
    8834:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    8838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    883c:	7859      	ldrb	r1, [r3, #1]
    883e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8842:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8846:	5499      	strb	r1, [r3, r2]
    8848:	4bd1      	ldr	r3, [pc, #836]	; (8b90 <send_attitude+0x584>)
    884a:	781a      	ldrb	r2, [r3, #0]
    884c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8850:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8854:	781b      	ldrb	r3, [r3, #0]
    8856:	4413      	add	r3, r2
    8858:	b2da      	uxtb	r2, r3
    885a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    885e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8862:	701a      	strb	r2, [r3, #0]
    8864:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8868:	f2c2 0304 	movt	r3, #8196	; 0x2004
    886c:	781a      	ldrb	r2, [r3, #0]
    886e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8876:	781b      	ldrb	r3, [r3, #0]
    8878:	4413      	add	r3, r2
    887a:	b2da      	uxtb	r2, r3
    887c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8884:	701a      	strb	r2, [r3, #0]
    8886:	f24c 3319 	movw	r3, #49945	; 0xc319
    888a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    888e:	781b      	ldrb	r3, [r3, #0]
    8890:	3301      	adds	r3, #1
    8892:	b2da      	uxtb	r2, r3
    8894:	f24c 3319 	movw	r3, #49945	; 0xc319
    8898:	f2c2 0304 	movt	r3, #8196	; 0x2004
    889c:	701a      	strb	r2, [r3, #0]
    889e:	f24c 3319 	movw	r3, #49945	; 0xc319
    88a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88a6:	781b      	ldrb	r3, [r3, #0]
    88a8:	2bff      	cmp	r3, #255	; 0xff
    88aa:	d105      	bne.n	88b8 <send_attitude+0x2ac>
    88ac:	f24c 3319 	movw	r3, #49945	; 0xc319
    88b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88b4:	2200      	movs	r2, #0
    88b6:	701a      	strb	r2, [r3, #0]
    88b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    88bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88c0:	781b      	ldrb	r3, [r3, #0]
    88c2:	461a      	mov	r2, r3
    88c4:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    88c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88cc:	7899      	ldrb	r1, [r3, #2]
    88ce:	f24c 331c 	movw	r3, #49948	; 0xc31c
    88d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88d6:	5499      	strb	r1, [r3, r2]
    88d8:	4bae      	ldr	r3, [pc, #696]	; (8b94 <send_attitude+0x588>)
    88da:	781a      	ldrb	r2, [r3, #0]
    88dc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    88e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88e4:	781b      	ldrb	r3, [r3, #0]
    88e6:	4413      	add	r3, r2
    88e8:	b2da      	uxtb	r2, r3
    88ea:	f24c 431d 	movw	r3, #50205	; 0xc41d
    88ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88f2:	701a      	strb	r2, [r3, #0]
    88f4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    88f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88fc:	781a      	ldrb	r2, [r3, #0]
    88fe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8906:	781b      	ldrb	r3, [r3, #0]
    8908:	4413      	add	r3, r2
    890a:	b2da      	uxtb	r2, r3
    890c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8910:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8914:	701a      	strb	r2, [r3, #0]
    8916:	f24c 3319 	movw	r3, #49945	; 0xc319
    891a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    891e:	781b      	ldrb	r3, [r3, #0]
    8920:	3301      	adds	r3, #1
    8922:	b2da      	uxtb	r2, r3
    8924:	f24c 3319 	movw	r3, #49945	; 0xc319
    8928:	f2c2 0304 	movt	r3, #8196	; 0x2004
    892c:	701a      	strb	r2, [r3, #0]
    892e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8932:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8936:	781b      	ldrb	r3, [r3, #0]
    8938:	2bff      	cmp	r3, #255	; 0xff
    893a:	d105      	bne.n	8948 <send_attitude+0x33c>
    893c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8940:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8944:	2200      	movs	r2, #0
    8946:	701a      	strb	r2, [r3, #0]
    8948:	f24c 3319 	movw	r3, #49945	; 0xc319
    894c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8950:	781b      	ldrb	r3, [r3, #0]
    8952:	461a      	mov	r2, r3
    8954:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    8958:	f2c2 0304 	movt	r3, #8196	; 0x2004
    895c:	78d9      	ldrb	r1, [r3, #3]
    895e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8962:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8966:	5499      	strb	r1, [r3, r2]
    8968:	4b8b      	ldr	r3, [pc, #556]	; (8b98 <send_attitude+0x58c>)
    896a:	781a      	ldrb	r2, [r3, #0]
    896c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8970:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8974:	781b      	ldrb	r3, [r3, #0]
    8976:	4413      	add	r3, r2
    8978:	b2da      	uxtb	r2, r3
    897a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    897e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8982:	701a      	strb	r2, [r3, #0]
    8984:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8988:	f2c2 0304 	movt	r3, #8196	; 0x2004
    898c:	781a      	ldrb	r2, [r3, #0]
    898e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8996:	781b      	ldrb	r3, [r3, #0]
    8998:	4413      	add	r3, r2
    899a:	b2da      	uxtb	r2, r3
    899c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    89a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89a4:	701a      	strb	r2, [r3, #0]
    89a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    89aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89ae:	781b      	ldrb	r3, [r3, #0]
    89b0:	3301      	adds	r3, #1
    89b2:	b2da      	uxtb	r2, r3
    89b4:	f24c 3319 	movw	r3, #49945	; 0xc319
    89b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89bc:	701a      	strb	r2, [r3, #0]
    89be:	f24c 3319 	movw	r3, #49945	; 0xc319
    89c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89c6:	781b      	ldrb	r3, [r3, #0]
    89c8:	2bff      	cmp	r3, #255	; 0xff
    89ca:	d105      	bne.n	89d8 <send_attitude+0x3cc>
    89cc:	f24c 3319 	movw	r3, #49945	; 0xc319
    89d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89d4:	2200      	movs	r2, #0
    89d6:	701a      	strb	r2, [r3, #0]
    89d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    89dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89e0:	781b      	ldrb	r3, [r3, #0]
    89e2:	461a      	mov	r2, r3
    89e4:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
    89e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89ec:	7819      	ldrb	r1, [r3, #0]
    89ee:	f24c 331c 	movw	r3, #49948	; 0xc31c
    89f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89f6:	5499      	strb	r1, [r3, r2]
    89f8:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
    89fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a00:	781a      	ldrb	r2, [r3, #0]
    8a02:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8a06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a0a:	781b      	ldrb	r3, [r3, #0]
    8a0c:	4413      	add	r3, r2
    8a0e:	b2da      	uxtb	r2, r3
    8a10:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8a14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a18:	701a      	strb	r2, [r3, #0]
    8a1a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8a1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a22:	781a      	ldrb	r2, [r3, #0]
    8a24:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8a28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a2c:	781b      	ldrb	r3, [r3, #0]
    8a2e:	4413      	add	r3, r2
    8a30:	b2da      	uxtb	r2, r3
    8a32:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8a36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a3a:	701a      	strb	r2, [r3, #0]
    8a3c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8a40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a44:	781b      	ldrb	r3, [r3, #0]
    8a46:	3301      	adds	r3, #1
    8a48:	b2da      	uxtb	r2, r3
    8a4a:	f24c 3319 	movw	r3, #49945	; 0xc319
    8a4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a52:	701a      	strb	r2, [r3, #0]
    8a54:	f24c 3319 	movw	r3, #49945	; 0xc319
    8a58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a5c:	781b      	ldrb	r3, [r3, #0]
    8a5e:	2bff      	cmp	r3, #255	; 0xff
    8a60:	d105      	bne.n	8a6e <send_attitude+0x462>
    8a62:	f24c 3319 	movw	r3, #49945	; 0xc319
    8a66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a6a:	2200      	movs	r2, #0
    8a6c:	701a      	strb	r2, [r3, #0]
    8a6e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8a72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a76:	781b      	ldrb	r3, [r3, #0]
    8a78:	461a      	mov	r2, r3
    8a7a:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
    8a7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a82:	7859      	ldrb	r1, [r3, #1]
    8a84:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8a88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a8c:	5499      	strb	r1, [r3, r2]
    8a8e:	4b43      	ldr	r3, [pc, #268]	; (8b9c <send_attitude+0x590>)
    8a90:	781a      	ldrb	r2, [r3, #0]
    8a92:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8a96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a9a:	781b      	ldrb	r3, [r3, #0]
    8a9c:	4413      	add	r3, r2
    8a9e:	b2da      	uxtb	r2, r3
    8aa0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8aa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aa8:	701a      	strb	r2, [r3, #0]
    8aaa:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8aae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ab2:	781a      	ldrb	r2, [r3, #0]
    8ab4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8ab8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8abc:	781b      	ldrb	r3, [r3, #0]
    8abe:	4413      	add	r3, r2
    8ac0:	b2da      	uxtb	r2, r3
    8ac2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8ac6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aca:	701a      	strb	r2, [r3, #0]
    8acc:	f24c 3319 	movw	r3, #49945	; 0xc319
    8ad0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ad4:	781b      	ldrb	r3, [r3, #0]
    8ad6:	3301      	adds	r3, #1
    8ad8:	b2da      	uxtb	r2, r3
    8ada:	f24c 3319 	movw	r3, #49945	; 0xc319
    8ade:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ae2:	701a      	strb	r2, [r3, #0]
    8ae4:	f24c 3319 	movw	r3, #49945	; 0xc319
    8ae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aec:	781b      	ldrb	r3, [r3, #0]
    8aee:	2bff      	cmp	r3, #255	; 0xff
    8af0:	d105      	bne.n	8afe <send_attitude+0x4f2>
    8af2:	f24c 3319 	movw	r3, #49945	; 0xc319
    8af6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8afa:	2200      	movs	r2, #0
    8afc:	701a      	strb	r2, [r3, #0]
    8afe:	f24c 3319 	movw	r3, #49945	; 0xc319
    8b02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b06:	781b      	ldrb	r3, [r3, #0]
    8b08:	461a      	mov	r2, r3
    8b0a:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
    8b0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b12:	7899      	ldrb	r1, [r3, #2]
    8b14:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8b18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b1c:	5499      	strb	r1, [r3, r2]
    8b1e:	4b20      	ldr	r3, [pc, #128]	; (8ba0 <send_attitude+0x594>)
    8b20:	781a      	ldrb	r2, [r3, #0]
    8b22:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8b26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b2a:	781b      	ldrb	r3, [r3, #0]
    8b2c:	4413      	add	r3, r2
    8b2e:	b2da      	uxtb	r2, r3
    8b30:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8b34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b38:	701a      	strb	r2, [r3, #0]
    8b3a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8b3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b42:	781a      	ldrb	r2, [r3, #0]
    8b44:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8b48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b4c:	781b      	ldrb	r3, [r3, #0]
    8b4e:	4413      	add	r3, r2
    8b50:	b2da      	uxtb	r2, r3
    8b52:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8b56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b5a:	701a      	strb	r2, [r3, #0]
    8b5c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8b60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b64:	781b      	ldrb	r3, [r3, #0]
    8b66:	3301      	adds	r3, #1
    8b68:	b2da      	uxtb	r2, r3
    8b6a:	f24c 3319 	movw	r3, #49945	; 0xc319
    8b6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b72:	701a      	strb	r2, [r3, #0]
    8b74:	f24c 3319 	movw	r3, #49945	; 0xc319
    8b78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b7c:	781b      	ldrb	r3, [r3, #0]
    8b7e:	2bff      	cmp	r3, #255	; 0xff
    8b80:	d110      	bne.n	8ba4 <send_attitude+0x598>
    8b82:	f24c 3319 	movw	r3, #49945	; 0xc319
    8b86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b8a:	2200      	movs	r2, #0
    8b8c:	701a      	strb	r2, [r3, #0]
    8b8e:	e009      	b.n	8ba4 <send_attitude+0x598>
    8b90:	2004c8d9 	.word	0x2004c8d9
    8b94:	2004c8da 	.word	0x2004c8da
    8b98:	2004c8db 	.word	0x2004c8db
    8b9c:	2004c8dd 	.word	0x2004c8dd
    8ba0:	2004c8de 	.word	0x2004c8de
    8ba4:	f24c 3319 	movw	r3, #49945	; 0xc319
    8ba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bac:	781b      	ldrb	r3, [r3, #0]
    8bae:	461a      	mov	r2, r3
    8bb0:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
    8bb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bb8:	78d9      	ldrb	r1, [r3, #3]
    8bba:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8bbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bc2:	5499      	strb	r1, [r3, r2]
    8bc4:	4bc2      	ldr	r3, [pc, #776]	; (8ed0 <send_attitude+0x8c4>)
    8bc6:	781a      	ldrb	r2, [r3, #0]
    8bc8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8bcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bd0:	781b      	ldrb	r3, [r3, #0]
    8bd2:	4413      	add	r3, r2
    8bd4:	b2da      	uxtb	r2, r3
    8bd6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8bda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bde:	701a      	strb	r2, [r3, #0]
    8be0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8be4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8be8:	781a      	ldrb	r2, [r3, #0]
    8bea:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8bee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bf2:	781b      	ldrb	r3, [r3, #0]
    8bf4:	4413      	add	r3, r2
    8bf6:	b2da      	uxtb	r2, r3
    8bf8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8bfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c00:	701a      	strb	r2, [r3, #0]
    8c02:	f24c 3319 	movw	r3, #49945	; 0xc319
    8c06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c0a:	781b      	ldrb	r3, [r3, #0]
    8c0c:	3301      	adds	r3, #1
    8c0e:	b2da      	uxtb	r2, r3
    8c10:	f24c 3319 	movw	r3, #49945	; 0xc319
    8c14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c18:	701a      	strb	r2, [r3, #0]
    8c1a:	f24c 3319 	movw	r3, #49945	; 0xc319
    8c1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c22:	781b      	ldrb	r3, [r3, #0]
    8c24:	2bff      	cmp	r3, #255	; 0xff
    8c26:	d105      	bne.n	8c34 <send_attitude+0x628>
    8c28:	f24c 3319 	movw	r3, #49945	; 0xc319
    8c2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c30:	2200      	movs	r2, #0
    8c32:	701a      	strb	r2, [r3, #0]
    8c34:	f24c 3319 	movw	r3, #49945	; 0xc319
    8c38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c3c:	781b      	ldrb	r3, [r3, #0]
    8c3e:	461a      	mov	r2, r3
    8c40:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
    8c44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c48:	7819      	ldrb	r1, [r3, #0]
    8c4a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8c4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c52:	5499      	strb	r1, [r3, r2]
    8c54:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
    8c58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c5c:	781a      	ldrb	r2, [r3, #0]
    8c5e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8c62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c66:	781b      	ldrb	r3, [r3, #0]
    8c68:	4413      	add	r3, r2
    8c6a:	b2da      	uxtb	r2, r3
    8c6c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8c70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c74:	701a      	strb	r2, [r3, #0]
    8c76:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8c7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c7e:	781a      	ldrb	r2, [r3, #0]
    8c80:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8c84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c88:	781b      	ldrb	r3, [r3, #0]
    8c8a:	4413      	add	r3, r2
    8c8c:	b2da      	uxtb	r2, r3
    8c8e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8c92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c96:	701a      	strb	r2, [r3, #0]
    8c98:	f24c 3319 	movw	r3, #49945	; 0xc319
    8c9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ca0:	781b      	ldrb	r3, [r3, #0]
    8ca2:	3301      	adds	r3, #1
    8ca4:	b2da      	uxtb	r2, r3
    8ca6:	f24c 3319 	movw	r3, #49945	; 0xc319
    8caa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cae:	701a      	strb	r2, [r3, #0]
    8cb0:	f24c 3319 	movw	r3, #49945	; 0xc319
    8cb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cb8:	781b      	ldrb	r3, [r3, #0]
    8cba:	2bff      	cmp	r3, #255	; 0xff
    8cbc:	d105      	bne.n	8cca <send_attitude+0x6be>
    8cbe:	f24c 3319 	movw	r3, #49945	; 0xc319
    8cc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cc6:	2200      	movs	r2, #0
    8cc8:	701a      	strb	r2, [r3, #0]
    8cca:	f24c 3319 	movw	r3, #49945	; 0xc319
    8cce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cd2:	781b      	ldrb	r3, [r3, #0]
    8cd4:	461a      	mov	r2, r3
    8cd6:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
    8cda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cde:	7859      	ldrb	r1, [r3, #1]
    8ce0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8ce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ce8:	5499      	strb	r1, [r3, r2]
    8cea:	4b7a      	ldr	r3, [pc, #488]	; (8ed4 <send_attitude+0x8c8>)
    8cec:	781a      	ldrb	r2, [r3, #0]
    8cee:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8cf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cf6:	781b      	ldrb	r3, [r3, #0]
    8cf8:	4413      	add	r3, r2
    8cfa:	b2da      	uxtb	r2, r3
    8cfc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8d00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d04:	701a      	strb	r2, [r3, #0]
    8d06:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8d0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d0e:	781a      	ldrb	r2, [r3, #0]
    8d10:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8d14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d18:	781b      	ldrb	r3, [r3, #0]
    8d1a:	4413      	add	r3, r2
    8d1c:	b2da      	uxtb	r2, r3
    8d1e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8d22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d26:	701a      	strb	r2, [r3, #0]
    8d28:	f24c 3319 	movw	r3, #49945	; 0xc319
    8d2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d30:	781b      	ldrb	r3, [r3, #0]
    8d32:	3301      	adds	r3, #1
    8d34:	b2da      	uxtb	r2, r3
    8d36:	f24c 3319 	movw	r3, #49945	; 0xc319
    8d3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d3e:	701a      	strb	r2, [r3, #0]
    8d40:	f24c 3319 	movw	r3, #49945	; 0xc319
    8d44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d48:	781b      	ldrb	r3, [r3, #0]
    8d4a:	2bff      	cmp	r3, #255	; 0xff
    8d4c:	d105      	bne.n	8d5a <send_attitude+0x74e>
    8d4e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8d52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d56:	2200      	movs	r2, #0
    8d58:	701a      	strb	r2, [r3, #0]
    8d5a:	f24c 3319 	movw	r3, #49945	; 0xc319
    8d5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d62:	781b      	ldrb	r3, [r3, #0]
    8d64:	461a      	mov	r2, r3
    8d66:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
    8d6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d6e:	7899      	ldrb	r1, [r3, #2]
    8d70:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8d74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d78:	5499      	strb	r1, [r3, r2]
    8d7a:	4b57      	ldr	r3, [pc, #348]	; (8ed8 <send_attitude+0x8cc>)
    8d7c:	781a      	ldrb	r2, [r3, #0]
    8d7e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8d82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d86:	781b      	ldrb	r3, [r3, #0]
    8d88:	4413      	add	r3, r2
    8d8a:	b2da      	uxtb	r2, r3
    8d8c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8d90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d94:	701a      	strb	r2, [r3, #0]
    8d96:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8d9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d9e:	781a      	ldrb	r2, [r3, #0]
    8da0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8da4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8da8:	781b      	ldrb	r3, [r3, #0]
    8daa:	4413      	add	r3, r2
    8dac:	b2da      	uxtb	r2, r3
    8dae:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8db2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8db6:	701a      	strb	r2, [r3, #0]
    8db8:	f24c 3319 	movw	r3, #49945	; 0xc319
    8dbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dc0:	781b      	ldrb	r3, [r3, #0]
    8dc2:	3301      	adds	r3, #1
    8dc4:	b2da      	uxtb	r2, r3
    8dc6:	f24c 3319 	movw	r3, #49945	; 0xc319
    8dca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dce:	701a      	strb	r2, [r3, #0]
    8dd0:	f24c 3319 	movw	r3, #49945	; 0xc319
    8dd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dd8:	781b      	ldrb	r3, [r3, #0]
    8dda:	2bff      	cmp	r3, #255	; 0xff
    8ddc:	d105      	bne.n	8dea <send_attitude+0x7de>
    8dde:	f24c 3319 	movw	r3, #49945	; 0xc319
    8de2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8de6:	2200      	movs	r2, #0
    8de8:	701a      	strb	r2, [r3, #0]
    8dea:	f24c 3319 	movw	r3, #49945	; 0xc319
    8dee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8df2:	781b      	ldrb	r3, [r3, #0]
    8df4:	461a      	mov	r2, r3
    8df6:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
    8dfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dfe:	78d9      	ldrb	r1, [r3, #3]
    8e00:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8e04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e08:	5499      	strb	r1, [r3, r2]
    8e0a:	4b34      	ldr	r3, [pc, #208]	; (8edc <send_attitude+0x8d0>)
    8e0c:	781a      	ldrb	r2, [r3, #0]
    8e0e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8e12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e16:	781b      	ldrb	r3, [r3, #0]
    8e18:	4413      	add	r3, r2
    8e1a:	b2da      	uxtb	r2, r3
    8e1c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8e20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e24:	701a      	strb	r2, [r3, #0]
    8e26:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8e2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e2e:	781a      	ldrb	r2, [r3, #0]
    8e30:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8e34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e38:	781b      	ldrb	r3, [r3, #0]
    8e3a:	4413      	add	r3, r2
    8e3c:	b2da      	uxtb	r2, r3
    8e3e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8e42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e46:	701a      	strb	r2, [r3, #0]
    8e48:	f24c 3319 	movw	r3, #49945	; 0xc319
    8e4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e50:	781b      	ldrb	r3, [r3, #0]
    8e52:	3301      	adds	r3, #1
    8e54:	b2da      	uxtb	r2, r3
    8e56:	f24c 3319 	movw	r3, #49945	; 0xc319
    8e5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e5e:	701a      	strb	r2, [r3, #0]
    8e60:	f24c 3319 	movw	r3, #49945	; 0xc319
    8e64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e68:	781b      	ldrb	r3, [r3, #0]
    8e6a:	2bff      	cmp	r3, #255	; 0xff
    8e6c:	d105      	bne.n	8e7a <send_attitude+0x86e>
    8e6e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8e72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e76:	2200      	movs	r2, #0
    8e78:	701a      	strb	r2, [r3, #0]
    8e7a:	f24c 3319 	movw	r3, #49945	; 0xc319
    8e7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e82:	781b      	ldrb	r3, [r3, #0]
    8e84:	461a      	mov	r2, r3
    8e86:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8e8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e8e:	7819      	ldrb	r1, [r3, #0]
    8e90:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8e94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e98:	5499      	strb	r1, [r3, r2]
    8e9a:	f24c 3319 	movw	r3, #49945	; 0xc319
    8e9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ea2:	781b      	ldrb	r3, [r3, #0]
    8ea4:	3301      	adds	r3, #1
    8ea6:	b2da      	uxtb	r2, r3
    8ea8:	f24c 3319 	movw	r3, #49945	; 0xc319
    8eac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eb0:	701a      	strb	r2, [r3, #0]
    8eb2:	f24c 3319 	movw	r3, #49945	; 0xc319
    8eb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eba:	781b      	ldrb	r3, [r3, #0]
    8ebc:	2bff      	cmp	r3, #255	; 0xff
    8ebe:	d10f      	bne.n	8ee0 <send_attitude+0x8d4>
    8ec0:	f24c 3319 	movw	r3, #49945	; 0xc319
    8ec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ec8:	2200      	movs	r2, #0
    8eca:	701a      	strb	r2, [r3, #0]
    8ecc:	e008      	b.n	8ee0 <send_attitude+0x8d4>
    8ece:	bf00      	nop
    8ed0:	2004c8df 	.word	0x2004c8df
    8ed4:	2004c8e1 	.word	0x2004c8e1
    8ed8:	2004c8e2 	.word	0x2004c8e2
    8edc:	2004c8e3 	.word	0x2004c8e3
    8ee0:	f24c 3319 	movw	r3, #49945	; 0xc319
    8ee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ee8:	781b      	ldrb	r3, [r3, #0]
    8eea:	461a      	mov	r2, r3
    8eec:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8ef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ef4:	7819      	ldrb	r1, [r3, #0]
    8ef6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8efa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8efe:	5499      	strb	r1, [r3, r2]
    8f00:	f24c 3319 	movw	r3, #49945	; 0xc319
    8f04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f08:	781b      	ldrb	r3, [r3, #0]
    8f0a:	3301      	adds	r3, #1
    8f0c:	b2da      	uxtb	r2, r3
    8f0e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8f12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f16:	701a      	strb	r2, [r3, #0]
    8f18:	f24c 3319 	movw	r3, #49945	; 0xc319
    8f1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f20:	781b      	ldrb	r3, [r3, #0]
    8f22:	2bff      	cmp	r3, #255	; 0xff
    8f24:	d105      	bne.n	8f32 <send_attitude+0x926>
    8f26:	f24c 3319 	movw	r3, #49945	; 0xc319
    8f2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f2e:	2200      	movs	r2, #0
    8f30:	701a      	strb	r2, [r3, #0]
    8f32:	f242 0339 	movw	r3, #8249	; 0x2039
    8f36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f3a:	781b      	ldrb	r3, [r3, #0]
    8f3c:	b2db      	uxtb	r3, r3
    8f3e:	f003 0310 	and.w	r3, r3, #16
    8f42:	2b00      	cmp	r3, #0
    8f44:	d15a      	bne.n	8ffc <send_attitude+0x9f0>
    8f46:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8f4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f4e:	781b      	ldrb	r3, [r3, #0]
    8f50:	b2db      	uxtb	r3, r3
    8f52:	461a      	mov	r2, r3
    8f54:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8f58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f5c:	5c9a      	ldrb	r2, [r3, r2]
    8f5e:	f24c 431b 	movw	r3, #50203	; 0xc41b
    8f62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f66:	701a      	strb	r2, [r3, #0]
    8f68:	f24c 431c 	movw	r3, #50204	; 0xc41c
    8f6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f70:	2200      	movs	r2, #0
    8f72:	701a      	strb	r2, [r3, #0]
    8f74:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8f78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f7c:	781b      	ldrb	r3, [r3, #0]
    8f7e:	b2db      	uxtb	r3, r3
    8f80:	3301      	adds	r3, #1
    8f82:	b2da      	uxtb	r2, r3
    8f84:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8f88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f8c:	701a      	strb	r2, [r3, #0]
    8f8e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8f92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f96:	781b      	ldrb	r3, [r3, #0]
    8f98:	b2db      	uxtb	r3, r3
    8f9a:	2bff      	cmp	r3, #255	; 0xff
    8f9c:	d105      	bne.n	8faa <send_attitude+0x99e>
    8f9e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8fa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fa6:	2200      	movs	r2, #0
    8fa8:	701a      	strb	r2, [r3, #0]
    8faa:	f242 0338 	movw	r3, #8248	; 0x2038
    8fae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fb2:	f242 0238 	movw	r2, #8248	; 0x2038
    8fb6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8fba:	7812      	ldrb	r2, [r2, #0]
    8fbc:	b2d2      	uxtb	r2, r2
    8fbe:	f042 0201 	orr.w	r2, r2, #1
    8fc2:	b2d2      	uxtb	r2, r2
    8fc4:	701a      	strb	r2, [r3, #0]
    8fc6:	f242 0339 	movw	r3, #8249	; 0x2039
    8fca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fce:	f242 0239 	movw	r2, #8249	; 0x2039
    8fd2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8fd6:	7812      	ldrb	r2, [r2, #0]
    8fd8:	b2d2      	uxtb	r2, r2
    8fda:	f042 0210 	orr.w	r2, r2, #16
    8fde:	b2d2      	uxtb	r2, r2
    8fe0:	701a      	strb	r2, [r3, #0]
    8fe2:	e00b      	b.n	8ffc <send_attitude+0x9f0>
    8fe4:	f24c 3318 	movw	r3, #49944	; 0xc318
    8fe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fec:	781b      	ldrb	r3, [r3, #0]
    8fee:	3301      	adds	r3, #1
    8ff0:	b2da      	uxtb	r2, r3
    8ff2:	f24c 3318 	movw	r3, #49944	; 0xc318
    8ff6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ffa:	701a      	strb	r2, [r3, #0]
  }
}
    8ffc:	46bd      	mov	sp, r7
    8ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
    9002:	4770      	bx	lr

00009004 <send_adc>:
  
void send_adc(void){  //500ms
    9004:	b480      	push	{r7}
    9006:	af00      	add	r7, sp, #0
  if(!boot)
    9008:	f240 533d 	movw	r3, #1341	; 0x53d
    900c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9010:	781b      	ldrb	r3, [r3, #0]
    9012:	2b00      	cmp	r3, #0
    9014:	f040 827d 	bne.w	9512 <send_adc+0x50e>
  { if (count % 5 == 1) PERIODIC_SEND_ADC();}
    9018:	f24c 3311 	movw	r3, #49937	; 0xc311
    901c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9020:	781a      	ldrb	r2, [r3, #0]
    9022:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    9026:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    902a:	fba3 1302 	umull	r1, r3, r3, r2
    902e:	0899      	lsrs	r1, r3, #2
    9030:	460b      	mov	r3, r1
    9032:	009b      	lsls	r3, r3, #2
    9034:	440b      	add	r3, r1
    9036:	1ad3      	subs	r3, r2, r3
    9038:	b2db      	uxtb	r3, r3
    903a:	2b01      	cmp	r3, #1
    903c:	f040 8269 	bne.w	9512 <send_adc+0x50e>
    9040:	f24c 3319 	movw	r3, #49945	; 0xc319
    9044:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9048:	781a      	ldrb	r2, [r3, #0]
    904a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    904e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9052:	781b      	ldrb	r3, [r3, #0]
    9054:	b2db      	uxtb	r3, r3
    9056:	429a      	cmp	r2, r3
    9058:	d313      	bcc.n	9082 <send_adc+0x7e>
    905a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    905e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9062:	781b      	ldrb	r3, [r3, #0]
    9064:	b2db      	uxtb	r3, r3
    9066:	461a      	mov	r2, r3
    9068:	f24c 3319 	movw	r3, #49945	; 0xc319
    906c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9070:	781b      	ldrb	r3, [r3, #0]
    9072:	1ad3      	subs	r3, r2, r3
    9074:	33ff      	adds	r3, #255	; 0xff
    9076:	2b08      	cmp	r3, #8
    9078:	bfd4      	ite	le
    907a:	2300      	movle	r3, #0
    907c:	2301      	movgt	r3, #1
    907e:	b2db      	uxtb	r3, r3
    9080:	e011      	b.n	90a6 <send_adc+0xa2>
    9082:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9086:	f2c2 0304 	movt	r3, #8196	; 0x2004
    908a:	781b      	ldrb	r3, [r3, #0]
    908c:	b2db      	uxtb	r3, r3
    908e:	461a      	mov	r2, r3
    9090:	f24c 3319 	movw	r3, #49945	; 0xc319
    9094:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9098:	781b      	ldrb	r3, [r3, #0]
    909a:	1ad3      	subs	r3, r2, r3
    909c:	2b08      	cmp	r3, #8
    909e:	bfd4      	ite	le
    90a0:	2300      	movle	r3, #0
    90a2:	2301      	movgt	r3, #1
    90a4:	b2db      	uxtb	r3, r3
    90a6:	2b00      	cmp	r3, #0
    90a8:	f000 8227 	beq.w	94fa <send_adc+0x4f6>
    90ac:	f24c 3319 	movw	r3, #49945	; 0xc319
    90b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90b4:	781b      	ldrb	r3, [r3, #0]
    90b6:	461a      	mov	r2, r3
    90b8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    90bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90c0:	2105      	movs	r1, #5
    90c2:	5499      	strb	r1, [r3, r2]
    90c4:	f24c 3319 	movw	r3, #49945	; 0xc319
    90c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90cc:	781b      	ldrb	r3, [r3, #0]
    90ce:	3301      	adds	r3, #1
    90d0:	b2da      	uxtb	r2, r3
    90d2:	f24c 3319 	movw	r3, #49945	; 0xc319
    90d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90da:	701a      	strb	r2, [r3, #0]
    90dc:	f24c 3319 	movw	r3, #49945	; 0xc319
    90e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90e4:	781b      	ldrb	r3, [r3, #0]
    90e6:	2bff      	cmp	r3, #255	; 0xff
    90e8:	d105      	bne.n	90f6 <send_adc+0xf2>
    90ea:	f24c 3319 	movw	r3, #49945	; 0xc319
    90ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90f2:	2200      	movs	r2, #0
    90f4:	701a      	strb	r2, [r3, #0]
    90f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    90fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90fe:	781b      	ldrb	r3, [r3, #0]
    9100:	461a      	mov	r2, r3
    9102:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9106:	f2c2 0304 	movt	r3, #8196	; 0x2004
    910a:	2107      	movs	r1, #7
    910c:	5499      	strb	r1, [r3, r2]
    910e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9112:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9116:	781b      	ldrb	r3, [r3, #0]
    9118:	3301      	adds	r3, #1
    911a:	b2da      	uxtb	r2, r3
    911c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9120:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9124:	701a      	strb	r2, [r3, #0]
    9126:	f24c 3319 	movw	r3, #49945	; 0xc319
    912a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    912e:	781b      	ldrb	r3, [r3, #0]
    9130:	2bff      	cmp	r3, #255	; 0xff
    9132:	d105      	bne.n	9140 <send_adc+0x13c>
    9134:	f24c 3319 	movw	r3, #49945	; 0xc319
    9138:	f2c2 0304 	movt	r3, #8196	; 0x2004
    913c:	2200      	movs	r2, #0
    913e:	701a      	strb	r2, [r3, #0]
    9140:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9144:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9148:	2207      	movs	r2, #7
    914a:	701a      	strb	r2, [r3, #0]
    914c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9150:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9154:	2207      	movs	r2, #7
    9156:	701a      	strb	r2, [r3, #0]
    9158:	f24c 3319 	movw	r3, #49945	; 0xc319
    915c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9160:	781b      	ldrb	r3, [r3, #0]
    9162:	461a      	mov	r2, r3
    9164:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
    9168:	f2c2 0304 	movt	r3, #8196	; 0x2004
    916c:	7819      	ldrb	r1, [r3, #0]
    916e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9172:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9176:	5499      	strb	r1, [r3, r2]
    9178:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
    917c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9180:	781a      	ldrb	r2, [r3, #0]
    9182:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    918a:	781b      	ldrb	r3, [r3, #0]
    918c:	4413      	add	r3, r2
    918e:	b2da      	uxtb	r2, r3
    9190:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9194:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9198:	701a      	strb	r2, [r3, #0]
    919a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    919e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91a2:	781a      	ldrb	r2, [r3, #0]
    91a4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    91a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91ac:	781b      	ldrb	r3, [r3, #0]
    91ae:	4413      	add	r3, r2
    91b0:	b2da      	uxtb	r2, r3
    91b2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    91b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91ba:	701a      	strb	r2, [r3, #0]
    91bc:	f24c 3319 	movw	r3, #49945	; 0xc319
    91c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91c4:	781b      	ldrb	r3, [r3, #0]
    91c6:	3301      	adds	r3, #1
    91c8:	b2da      	uxtb	r2, r3
    91ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    91ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91d2:	701a      	strb	r2, [r3, #0]
    91d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    91d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91dc:	781b      	ldrb	r3, [r3, #0]
    91de:	2bff      	cmp	r3, #255	; 0xff
    91e0:	d105      	bne.n	91ee <send_adc+0x1ea>
    91e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    91e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91ea:	2200      	movs	r2, #0
    91ec:	701a      	strb	r2, [r3, #0]
    91ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    91f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91f6:	781b      	ldrb	r3, [r3, #0]
    91f8:	461a      	mov	r2, r3
    91fa:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
    91fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9202:	7859      	ldrb	r1, [r3, #1]
    9204:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9208:	f2c2 0304 	movt	r3, #8196	; 0x2004
    920c:	5499      	strb	r1, [r3, r2]
    920e:	4bc3      	ldr	r3, [pc, #780]	; (951c <send_adc+0x518>)
    9210:	781a      	ldrb	r2, [r3, #0]
    9212:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9216:	f2c2 0304 	movt	r3, #8196	; 0x2004
    921a:	781b      	ldrb	r3, [r3, #0]
    921c:	4413      	add	r3, r2
    921e:	b2da      	uxtb	r2, r3
    9220:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9224:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9228:	701a      	strb	r2, [r3, #0]
    922a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    922e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9232:	781a      	ldrb	r2, [r3, #0]
    9234:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9238:	f2c2 0304 	movt	r3, #8196	; 0x2004
    923c:	781b      	ldrb	r3, [r3, #0]
    923e:	4413      	add	r3, r2
    9240:	b2da      	uxtb	r2, r3
    9242:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9246:	f2c2 0304 	movt	r3, #8196	; 0x2004
    924a:	701a      	strb	r2, [r3, #0]
    924c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9250:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9254:	781b      	ldrb	r3, [r3, #0]
    9256:	3301      	adds	r3, #1
    9258:	b2da      	uxtb	r2, r3
    925a:	f24c 3319 	movw	r3, #49945	; 0xc319
    925e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9262:	701a      	strb	r2, [r3, #0]
    9264:	f24c 3319 	movw	r3, #49945	; 0xc319
    9268:	f2c2 0304 	movt	r3, #8196	; 0x2004
    926c:	781b      	ldrb	r3, [r3, #0]
    926e:	2bff      	cmp	r3, #255	; 0xff
    9270:	d105      	bne.n	927e <send_adc+0x27a>
    9272:	f24c 3319 	movw	r3, #49945	; 0xc319
    9276:	f2c2 0304 	movt	r3, #8196	; 0x2004
    927a:	2200      	movs	r2, #0
    927c:	701a      	strb	r2, [r3, #0]
    927e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9282:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9286:	781b      	ldrb	r3, [r3, #0]
    9288:	461a      	mov	r2, r3
    928a:	f24c 53ba 	movw	r3, #50618	; 0xc5ba
    928e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9292:	7819      	ldrb	r1, [r3, #0]
    9294:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9298:	f2c2 0304 	movt	r3, #8196	; 0x2004
    929c:	5499      	strb	r1, [r3, r2]
    929e:	f24c 53ba 	movw	r3, #50618	; 0xc5ba
    92a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92a6:	781a      	ldrb	r2, [r3, #0]
    92a8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    92ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92b0:	781b      	ldrb	r3, [r3, #0]
    92b2:	4413      	add	r3, r2
    92b4:	b2da      	uxtb	r2, r3
    92b6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    92ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92be:	701a      	strb	r2, [r3, #0]
    92c0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    92c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92c8:	781a      	ldrb	r2, [r3, #0]
    92ca:	f24c 431d 	movw	r3, #50205	; 0xc41d
    92ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92d2:	781b      	ldrb	r3, [r3, #0]
    92d4:	4413      	add	r3, r2
    92d6:	b2da      	uxtb	r2, r3
    92d8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    92dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92e0:	701a      	strb	r2, [r3, #0]
    92e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    92e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92ea:	781b      	ldrb	r3, [r3, #0]
    92ec:	3301      	adds	r3, #1
    92ee:	b2da      	uxtb	r2, r3
    92f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    92f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92f8:	701a      	strb	r2, [r3, #0]
    92fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    92fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9302:	781b      	ldrb	r3, [r3, #0]
    9304:	2bff      	cmp	r3, #255	; 0xff
    9306:	d105      	bne.n	9314 <send_adc+0x310>
    9308:	f24c 3319 	movw	r3, #49945	; 0xc319
    930c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9310:	2200      	movs	r2, #0
    9312:	701a      	strb	r2, [r3, #0]
    9314:	f24c 3319 	movw	r3, #49945	; 0xc319
    9318:	f2c2 0304 	movt	r3, #8196	; 0x2004
    931c:	781b      	ldrb	r3, [r3, #0]
    931e:	461a      	mov	r2, r3
    9320:	f24c 53ba 	movw	r3, #50618	; 0xc5ba
    9324:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9328:	7859      	ldrb	r1, [r3, #1]
    932a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    932e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9332:	5499      	strb	r1, [r3, r2]
    9334:	4b7a      	ldr	r3, [pc, #488]	; (9520 <send_adc+0x51c>)
    9336:	781a      	ldrb	r2, [r3, #0]
    9338:	f24c 431d 	movw	r3, #50205	; 0xc41d
    933c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9340:	781b      	ldrb	r3, [r3, #0]
    9342:	4413      	add	r3, r2
    9344:	b2da      	uxtb	r2, r3
    9346:	f24c 431d 	movw	r3, #50205	; 0xc41d
    934a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    934e:	701a      	strb	r2, [r3, #0]
    9350:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9354:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9358:	781a      	ldrb	r2, [r3, #0]
    935a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    935e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9362:	781b      	ldrb	r3, [r3, #0]
    9364:	4413      	add	r3, r2
    9366:	b2da      	uxtb	r2, r3
    9368:	f24c 431e 	movw	r3, #50206	; 0xc41e
    936c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9370:	701a      	strb	r2, [r3, #0]
    9372:	f24c 3319 	movw	r3, #49945	; 0xc319
    9376:	f2c2 0304 	movt	r3, #8196	; 0x2004
    937a:	781b      	ldrb	r3, [r3, #0]
    937c:	3301      	adds	r3, #1
    937e:	b2da      	uxtb	r2, r3
    9380:	f24c 3319 	movw	r3, #49945	; 0xc319
    9384:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9388:	701a      	strb	r2, [r3, #0]
    938a:	f24c 3319 	movw	r3, #49945	; 0xc319
    938e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9392:	781b      	ldrb	r3, [r3, #0]
    9394:	2bff      	cmp	r3, #255	; 0xff
    9396:	d105      	bne.n	93a4 <send_adc+0x3a0>
    9398:	f24c 3319 	movw	r3, #49945	; 0xc319
    939c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93a0:	2200      	movs	r2, #0
    93a2:	701a      	strb	r2, [r3, #0]
    93a4:	f24c 3319 	movw	r3, #49945	; 0xc319
    93a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93ac:	781b      	ldrb	r3, [r3, #0]
    93ae:	461a      	mov	r2, r3
    93b0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    93b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93b8:	7819      	ldrb	r1, [r3, #0]
    93ba:	f24c 331c 	movw	r3, #49948	; 0xc31c
    93be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93c2:	5499      	strb	r1, [r3, r2]
    93c4:	f24c 3319 	movw	r3, #49945	; 0xc319
    93c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93cc:	781b      	ldrb	r3, [r3, #0]
    93ce:	3301      	adds	r3, #1
    93d0:	b2da      	uxtb	r2, r3
    93d2:	f24c 3319 	movw	r3, #49945	; 0xc319
    93d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93da:	701a      	strb	r2, [r3, #0]
    93dc:	f24c 3319 	movw	r3, #49945	; 0xc319
    93e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93e4:	781b      	ldrb	r3, [r3, #0]
    93e6:	2bff      	cmp	r3, #255	; 0xff
    93e8:	d105      	bne.n	93f6 <send_adc+0x3f2>
    93ea:	f24c 3319 	movw	r3, #49945	; 0xc319
    93ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93f2:	2200      	movs	r2, #0
    93f4:	701a      	strb	r2, [r3, #0]
    93f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    93fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93fe:	781b      	ldrb	r3, [r3, #0]
    9400:	461a      	mov	r2, r3
    9402:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9406:	f2c2 0304 	movt	r3, #8196	; 0x2004
    940a:	7819      	ldrb	r1, [r3, #0]
    940c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9410:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9414:	5499      	strb	r1, [r3, r2]
    9416:	f24c 3319 	movw	r3, #49945	; 0xc319
    941a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    941e:	781b      	ldrb	r3, [r3, #0]
    9420:	3301      	adds	r3, #1
    9422:	b2da      	uxtb	r2, r3
    9424:	f24c 3319 	movw	r3, #49945	; 0xc319
    9428:	f2c2 0304 	movt	r3, #8196	; 0x2004
    942c:	701a      	strb	r2, [r3, #0]
    942e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9436:	781b      	ldrb	r3, [r3, #0]
    9438:	2bff      	cmp	r3, #255	; 0xff
    943a:	d105      	bne.n	9448 <send_adc+0x444>
    943c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9440:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9444:	2200      	movs	r2, #0
    9446:	701a      	strb	r2, [r3, #0]
    9448:	f242 0339 	movw	r3, #8249	; 0x2039
    944c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9450:	781b      	ldrb	r3, [r3, #0]
    9452:	b2db      	uxtb	r3, r3
    9454:	f003 0310 	and.w	r3, r3, #16
    9458:	2b00      	cmp	r3, #0
    945a:	d15a      	bne.n	9512 <send_adc+0x50e>
    945c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9460:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9464:	781b      	ldrb	r3, [r3, #0]
    9466:	b2db      	uxtb	r3, r3
    9468:	461a      	mov	r2, r3
    946a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    946e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9472:	5c9a      	ldrb	r2, [r3, r2]
    9474:	f24c 431b 	movw	r3, #50203	; 0xc41b
    9478:	f2c2 0304 	movt	r3, #8196	; 0x2004
    947c:	701a      	strb	r2, [r3, #0]
    947e:	f24c 431c 	movw	r3, #50204	; 0xc41c
    9482:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9486:	2200      	movs	r2, #0
    9488:	701a      	strb	r2, [r3, #0]
    948a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    948e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9492:	781b      	ldrb	r3, [r3, #0]
    9494:	b2db      	uxtb	r3, r3
    9496:	3301      	adds	r3, #1
    9498:	b2da      	uxtb	r2, r3
    949a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    949e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94a2:	701a      	strb	r2, [r3, #0]
    94a4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    94a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94ac:	781b      	ldrb	r3, [r3, #0]
    94ae:	b2db      	uxtb	r3, r3
    94b0:	2bff      	cmp	r3, #255	; 0xff
    94b2:	d105      	bne.n	94c0 <send_adc+0x4bc>
    94b4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    94b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94bc:	2200      	movs	r2, #0
    94be:	701a      	strb	r2, [r3, #0]
    94c0:	f242 0338 	movw	r3, #8248	; 0x2038
    94c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94c8:	f242 0238 	movw	r2, #8248	; 0x2038
    94cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    94d0:	7812      	ldrb	r2, [r2, #0]
    94d2:	b2d2      	uxtb	r2, r2
    94d4:	f042 0201 	orr.w	r2, r2, #1
    94d8:	b2d2      	uxtb	r2, r2
    94da:	701a      	strb	r2, [r3, #0]
    94dc:	f242 0339 	movw	r3, #8249	; 0x2039
    94e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94e4:	f242 0239 	movw	r2, #8249	; 0x2039
    94e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    94ec:	7812      	ldrb	r2, [r2, #0]
    94ee:	b2d2      	uxtb	r2, r2
    94f0:	f042 0210 	orr.w	r2, r2, #16
    94f4:	b2d2      	uxtb	r2, r2
    94f6:	701a      	strb	r2, [r3, #0]
    94f8:	e00b      	b.n	9512 <send_adc+0x50e>
    94fa:	f24c 3318 	movw	r3, #49944	; 0xc318
    94fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9502:	781b      	ldrb	r3, [r3, #0]
    9504:	3301      	adds	r3, #1
    9506:	b2da      	uxtb	r2, r3
    9508:	f24c 3318 	movw	r3, #49944	; 0xc318
    950c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9510:	701a      	strb	r2, [r3, #0]
}
    9512:	46bd      	mov	sp, r7
    9514:	f85d 7b04 	ldr.w	r7, [sp], #4
    9518:	4770      	bx	lr
    951a:	bf00      	nop
    951c:	2004c5b9 	.word	0x2004c5b9
    9520:	2004c5bb 	.word	0x2004c5bb

00009524 <send_settings>:
void send_settings(void){ //500ms
    9524:	b480      	push	{r7}
    9526:	af00      	add	r7, sp, #0
  if(!boot)
    9528:	f240 533d 	movw	r3, #1341	; 0x53d
    952c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9530:	781b      	ldrb	r3, [r3, #0]
    9532:	2b00      	cmp	r3, #0
    9534:	f040 83fb 	bne.w	9d2e <send_settings+0x80a>
  {if (count % 5 == 2) PERIODIC_SEND_SETTINGS();}
    9538:	f24c 3311 	movw	r3, #49937	; 0xc311
    953c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9540:	781a      	ldrb	r2, [r3, #0]
    9542:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    9546:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    954a:	fba3 1302 	umull	r1, r3, r3, r2
    954e:	0899      	lsrs	r1, r3, #2
    9550:	460b      	mov	r3, r1
    9552:	009b      	lsls	r3, r3, #2
    9554:	440b      	add	r3, r1
    9556:	1ad3      	subs	r3, r2, r3
    9558:	b2db      	uxtb	r3, r3
    955a:	2b02      	cmp	r3, #2
    955c:	f040 83e7 	bne.w	9d2e <send_settings+0x80a>
    9560:	f64c 132c 	movw	r3, #51500	; 0xc92c
    9564:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9568:	781b      	ldrb	r3, [r3, #0]
    956a:	2b00      	cmp	r3, #0
    956c:	f000 83df 	beq.w	9d2e <send_settings+0x80a>
    9570:	f24c 3319 	movw	r3, #49945	; 0xc319
    9574:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9578:	781a      	ldrb	r2, [r3, #0]
    957a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    957e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9582:	781b      	ldrb	r3, [r3, #0]
    9584:	b2db      	uxtb	r3, r3
    9586:	429a      	cmp	r2, r3
    9588:	d313      	bcc.n	95b2 <send_settings+0x8e>
    958a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    958e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9592:	781b      	ldrb	r3, [r3, #0]
    9594:	b2db      	uxtb	r3, r3
    9596:	461a      	mov	r2, r3
    9598:	f24c 3319 	movw	r3, #49945	; 0xc319
    959c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95a0:	781b      	ldrb	r3, [r3, #0]
    95a2:	1ad3      	subs	r3, r2, r3
    95a4:	33ff      	adds	r3, #255	; 0xff
    95a6:	2b0d      	cmp	r3, #13
    95a8:	bfd4      	ite	le
    95aa:	2300      	movle	r3, #0
    95ac:	2301      	movgt	r3, #1
    95ae:	b2db      	uxtb	r3, r3
    95b0:	e011      	b.n	95d6 <send_settings+0xb2>
    95b2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    95b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95ba:	781b      	ldrb	r3, [r3, #0]
    95bc:	b2db      	uxtb	r3, r3
    95be:	461a      	mov	r2, r3
    95c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    95c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95c8:	781b      	ldrb	r3, [r3, #0]
    95ca:	1ad3      	subs	r3, r2, r3
    95cc:	2b0d      	cmp	r3, #13
    95ce:	bfd4      	ite	le
    95d0:	2300      	movle	r3, #0
    95d2:	2301      	movgt	r3, #1
    95d4:	b2db      	uxtb	r3, r3
    95d6:	2b00      	cmp	r3, #0
    95d8:	f000 839d 	beq.w	9d16 <send_settings+0x7f2>
    95dc:	f24c 3319 	movw	r3, #49945	; 0xc319
    95e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95e4:	781b      	ldrb	r3, [r3, #0]
    95e6:	461a      	mov	r2, r3
    95e8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    95ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95f0:	2105      	movs	r1, #5
    95f2:	5499      	strb	r1, [r3, r2]
    95f4:	f24c 3319 	movw	r3, #49945	; 0xc319
    95f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95fc:	781b      	ldrb	r3, [r3, #0]
    95fe:	3301      	adds	r3, #1
    9600:	b2da      	uxtb	r2, r3
    9602:	f24c 3319 	movw	r3, #49945	; 0xc319
    9606:	f2c2 0304 	movt	r3, #8196	; 0x2004
    960a:	701a      	strb	r2, [r3, #0]
    960c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9614:	781b      	ldrb	r3, [r3, #0]
    9616:	2bff      	cmp	r3, #255	; 0xff
    9618:	d105      	bne.n	9626 <send_settings+0x102>
    961a:	f24c 3319 	movw	r3, #49945	; 0xc319
    961e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9622:	2200      	movs	r2, #0
    9624:	701a      	strb	r2, [r3, #0]
    9626:	f24c 3319 	movw	r3, #49945	; 0xc319
    962a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    962e:	781b      	ldrb	r3, [r3, #0]
    9630:	461a      	mov	r2, r3
    9632:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9636:	f2c2 0304 	movt	r3, #8196	; 0x2004
    963a:	2111      	movs	r1, #17
    963c:	5499      	strb	r1, [r3, r2]
    963e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9642:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9646:	781b      	ldrb	r3, [r3, #0]
    9648:	3301      	adds	r3, #1
    964a:	b2da      	uxtb	r2, r3
    964c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9650:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9654:	701a      	strb	r2, [r3, #0]
    9656:	f24c 3319 	movw	r3, #49945	; 0xc319
    965a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    965e:	781b      	ldrb	r3, [r3, #0]
    9660:	2bff      	cmp	r3, #255	; 0xff
    9662:	d105      	bne.n	9670 <send_settings+0x14c>
    9664:	f24c 3319 	movw	r3, #49945	; 0xc319
    9668:	f2c2 0304 	movt	r3, #8196	; 0x2004
    966c:	2200      	movs	r2, #0
    966e:	701a      	strb	r2, [r3, #0]
    9670:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9674:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9678:	2211      	movs	r2, #17
    967a:	701a      	strb	r2, [r3, #0]
    967c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9680:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9684:	2211      	movs	r2, #17
    9686:	701a      	strb	r2, [r3, #0]
    9688:	f24c 3319 	movw	r3, #49945	; 0xc319
    968c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9690:	781b      	ldrb	r3, [r3, #0]
    9692:	461a      	mov	r2, r3
    9694:	f64c 132c 	movw	r3, #51500	; 0xc92c
    9698:	f2c2 0304 	movt	r3, #8196	; 0x2004
    969c:	7819      	ldrb	r1, [r3, #0]
    969e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    96a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96a6:	5499      	strb	r1, [r3, r2]
    96a8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    96ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96b0:	781a      	ldrb	r2, [r3, #0]
    96b2:	f64c 132c 	movw	r3, #51500	; 0xc92c
    96b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96ba:	781b      	ldrb	r3, [r3, #0]
    96bc:	4413      	add	r3, r2
    96be:	b2da      	uxtb	r2, r3
    96c0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    96c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96c8:	701a      	strb	r2, [r3, #0]
    96ca:	f24c 431e 	movw	r3, #50206	; 0xc41e
    96ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96d2:	781a      	ldrb	r2, [r3, #0]
    96d4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    96d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96dc:	781b      	ldrb	r3, [r3, #0]
    96de:	4413      	add	r3, r2
    96e0:	b2da      	uxtb	r2, r3
    96e2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    96e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96ea:	701a      	strb	r2, [r3, #0]
    96ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    96f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96f4:	781b      	ldrb	r3, [r3, #0]
    96f6:	3301      	adds	r3, #1
    96f8:	b2da      	uxtb	r2, r3
    96fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    96fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9702:	701a      	strb	r2, [r3, #0]
    9704:	f24c 3319 	movw	r3, #49945	; 0xc319
    9708:	f2c2 0304 	movt	r3, #8196	; 0x2004
    970c:	781b      	ldrb	r3, [r3, #0]
    970e:	2bff      	cmp	r3, #255	; 0xff
    9710:	d105      	bne.n	971e <send_settings+0x1fa>
    9712:	f24c 3319 	movw	r3, #49945	; 0xc319
    9716:	f2c2 0304 	movt	r3, #8196	; 0x2004
    971a:	2200      	movs	r2, #0
    971c:	701a      	strb	r2, [r3, #0]
    971e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9722:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9726:	781b      	ldrb	r3, [r3, #0]
    9728:	461a      	mov	r2, r3
    972a:	f24c 3308 	movw	r3, #49928	; 0xc308
    972e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9732:	7819      	ldrb	r1, [r3, #0]
    9734:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9738:	f2c2 0304 	movt	r3, #8196	; 0x2004
    973c:	5499      	strb	r1, [r3, r2]
    973e:	f24c 3308 	movw	r3, #49928	; 0xc308
    9742:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9746:	781a      	ldrb	r2, [r3, #0]
    9748:	f24c 431d 	movw	r3, #50205	; 0xc41d
    974c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9750:	781b      	ldrb	r3, [r3, #0]
    9752:	4413      	add	r3, r2
    9754:	b2da      	uxtb	r2, r3
    9756:	f24c 431d 	movw	r3, #50205	; 0xc41d
    975a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    975e:	701a      	strb	r2, [r3, #0]
    9760:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9764:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9768:	781a      	ldrb	r2, [r3, #0]
    976a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    976e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9772:	781b      	ldrb	r3, [r3, #0]
    9774:	4413      	add	r3, r2
    9776:	b2da      	uxtb	r2, r3
    9778:	f24c 431e 	movw	r3, #50206	; 0xc41e
    977c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9780:	701a      	strb	r2, [r3, #0]
    9782:	f24c 3319 	movw	r3, #49945	; 0xc319
    9786:	f2c2 0304 	movt	r3, #8196	; 0x2004
    978a:	781b      	ldrb	r3, [r3, #0]
    978c:	3301      	adds	r3, #1
    978e:	b2da      	uxtb	r2, r3
    9790:	f24c 3319 	movw	r3, #49945	; 0xc319
    9794:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9798:	701a      	strb	r2, [r3, #0]
    979a:	f24c 3319 	movw	r3, #49945	; 0xc319
    979e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97a2:	781b      	ldrb	r3, [r3, #0]
    97a4:	2bff      	cmp	r3, #255	; 0xff
    97a6:	d105      	bne.n	97b4 <send_settings+0x290>
    97a8:	f24c 3319 	movw	r3, #49945	; 0xc319
    97ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97b0:	2200      	movs	r2, #0
    97b2:	701a      	strb	r2, [r3, #0]
    97b4:	f24c 3319 	movw	r3, #49945	; 0xc319
    97b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97bc:	781b      	ldrb	r3, [r3, #0]
    97be:	461a      	mov	r2, r3
    97c0:	f24c 3308 	movw	r3, #49928	; 0xc308
    97c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97c8:	7859      	ldrb	r1, [r3, #1]
    97ca:	f24c 331c 	movw	r3, #49948	; 0xc31c
    97ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97d2:	5499      	strb	r1, [r3, r2]
    97d4:	4bd1      	ldr	r3, [pc, #836]	; (9b1c <send_settings+0x5f8>)
    97d6:	781a      	ldrb	r2, [r3, #0]
    97d8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    97dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97e0:	781b      	ldrb	r3, [r3, #0]
    97e2:	4413      	add	r3, r2
    97e4:	b2da      	uxtb	r2, r3
    97e6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    97ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97ee:	701a      	strb	r2, [r3, #0]
    97f0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    97f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97f8:	781a      	ldrb	r2, [r3, #0]
    97fa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    97fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9802:	781b      	ldrb	r3, [r3, #0]
    9804:	4413      	add	r3, r2
    9806:	b2da      	uxtb	r2, r3
    9808:	f24c 431e 	movw	r3, #50206	; 0xc41e
    980c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9810:	701a      	strb	r2, [r3, #0]
    9812:	f24c 3319 	movw	r3, #49945	; 0xc319
    9816:	f2c2 0304 	movt	r3, #8196	; 0x2004
    981a:	781b      	ldrb	r3, [r3, #0]
    981c:	3301      	adds	r3, #1
    981e:	b2da      	uxtb	r2, r3
    9820:	f24c 3319 	movw	r3, #49945	; 0xc319
    9824:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9828:	701a      	strb	r2, [r3, #0]
    982a:	f24c 3319 	movw	r3, #49945	; 0xc319
    982e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9832:	781b      	ldrb	r3, [r3, #0]
    9834:	2bff      	cmp	r3, #255	; 0xff
    9836:	d105      	bne.n	9844 <send_settings+0x320>
    9838:	f24c 3319 	movw	r3, #49945	; 0xc319
    983c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9840:	2200      	movs	r2, #0
    9842:	701a      	strb	r2, [r3, #0]
    9844:	f24c 3319 	movw	r3, #49945	; 0xc319
    9848:	f2c2 0304 	movt	r3, #8196	; 0x2004
    984c:	781b      	ldrb	r3, [r3, #0]
    984e:	461a      	mov	r2, r3
    9850:	f24c 3308 	movw	r3, #49928	; 0xc308
    9854:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9858:	7899      	ldrb	r1, [r3, #2]
    985a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    985e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9862:	5499      	strb	r1, [r3, r2]
    9864:	4bae      	ldr	r3, [pc, #696]	; (9b20 <send_settings+0x5fc>)
    9866:	781a      	ldrb	r2, [r3, #0]
    9868:	f24c 431d 	movw	r3, #50205	; 0xc41d
    986c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9870:	781b      	ldrb	r3, [r3, #0]
    9872:	4413      	add	r3, r2
    9874:	b2da      	uxtb	r2, r3
    9876:	f24c 431d 	movw	r3, #50205	; 0xc41d
    987a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    987e:	701a      	strb	r2, [r3, #0]
    9880:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9884:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9888:	781a      	ldrb	r2, [r3, #0]
    988a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    988e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9892:	781b      	ldrb	r3, [r3, #0]
    9894:	4413      	add	r3, r2
    9896:	b2da      	uxtb	r2, r3
    9898:	f24c 431e 	movw	r3, #50206	; 0xc41e
    989c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98a0:	701a      	strb	r2, [r3, #0]
    98a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    98a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98aa:	781b      	ldrb	r3, [r3, #0]
    98ac:	3301      	adds	r3, #1
    98ae:	b2da      	uxtb	r2, r3
    98b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    98b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98b8:	701a      	strb	r2, [r3, #0]
    98ba:	f24c 3319 	movw	r3, #49945	; 0xc319
    98be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98c2:	781b      	ldrb	r3, [r3, #0]
    98c4:	2bff      	cmp	r3, #255	; 0xff
    98c6:	d105      	bne.n	98d4 <send_settings+0x3b0>
    98c8:	f24c 3319 	movw	r3, #49945	; 0xc319
    98cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98d0:	2200      	movs	r2, #0
    98d2:	701a      	strb	r2, [r3, #0]
    98d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    98d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98dc:	781b      	ldrb	r3, [r3, #0]
    98de:	461a      	mov	r2, r3
    98e0:	f24c 3308 	movw	r3, #49928	; 0xc308
    98e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98e8:	78d9      	ldrb	r1, [r3, #3]
    98ea:	f24c 331c 	movw	r3, #49948	; 0xc31c
    98ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98f2:	5499      	strb	r1, [r3, r2]
    98f4:	4b8b      	ldr	r3, [pc, #556]	; (9b24 <send_settings+0x600>)
    98f6:	781a      	ldrb	r2, [r3, #0]
    98f8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    98fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9900:	781b      	ldrb	r3, [r3, #0]
    9902:	4413      	add	r3, r2
    9904:	b2da      	uxtb	r2, r3
    9906:	f24c 431d 	movw	r3, #50205	; 0xc41d
    990a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    990e:	701a      	strb	r2, [r3, #0]
    9910:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9914:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9918:	781a      	ldrb	r2, [r3, #0]
    991a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    991e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9922:	781b      	ldrb	r3, [r3, #0]
    9924:	4413      	add	r3, r2
    9926:	b2da      	uxtb	r2, r3
    9928:	f24c 431e 	movw	r3, #50206	; 0xc41e
    992c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9930:	701a      	strb	r2, [r3, #0]
    9932:	f24c 3319 	movw	r3, #49945	; 0xc319
    9936:	f2c2 0304 	movt	r3, #8196	; 0x2004
    993a:	781b      	ldrb	r3, [r3, #0]
    993c:	3301      	adds	r3, #1
    993e:	b2da      	uxtb	r2, r3
    9940:	f24c 3319 	movw	r3, #49945	; 0xc319
    9944:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9948:	701a      	strb	r2, [r3, #0]
    994a:	f24c 3319 	movw	r3, #49945	; 0xc319
    994e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9952:	781b      	ldrb	r3, [r3, #0]
    9954:	2bff      	cmp	r3, #255	; 0xff
    9956:	d105      	bne.n	9964 <send_settings+0x440>
    9958:	f24c 3319 	movw	r3, #49945	; 0xc319
    995c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9960:	2200      	movs	r2, #0
    9962:	701a      	strb	r2, [r3, #0]
    9964:	f24c 3319 	movw	r3, #49945	; 0xc319
    9968:	f2c2 0304 	movt	r3, #8196	; 0x2004
    996c:	781b      	ldrb	r3, [r3, #0]
    996e:	461a      	mov	r2, r3
    9970:	f24c 330c 	movw	r3, #49932	; 0xc30c
    9974:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9978:	7819      	ldrb	r1, [r3, #0]
    997a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    997e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9982:	5499      	strb	r1, [r3, r2]
    9984:	f24c 330c 	movw	r3, #49932	; 0xc30c
    9988:	f2c2 0304 	movt	r3, #8196	; 0x2004
    998c:	781a      	ldrb	r2, [r3, #0]
    998e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9996:	781b      	ldrb	r3, [r3, #0]
    9998:	4413      	add	r3, r2
    999a:	b2da      	uxtb	r2, r3
    999c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    99a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99a4:	701a      	strb	r2, [r3, #0]
    99a6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    99aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99ae:	781a      	ldrb	r2, [r3, #0]
    99b0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    99b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99b8:	781b      	ldrb	r3, [r3, #0]
    99ba:	4413      	add	r3, r2
    99bc:	b2da      	uxtb	r2, r3
    99be:	f24c 431e 	movw	r3, #50206	; 0xc41e
    99c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99c6:	701a      	strb	r2, [r3, #0]
    99c8:	f24c 3319 	movw	r3, #49945	; 0xc319
    99cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99d0:	781b      	ldrb	r3, [r3, #0]
    99d2:	3301      	adds	r3, #1
    99d4:	b2da      	uxtb	r2, r3
    99d6:	f24c 3319 	movw	r3, #49945	; 0xc319
    99da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99de:	701a      	strb	r2, [r3, #0]
    99e0:	f24c 3319 	movw	r3, #49945	; 0xc319
    99e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99e8:	781b      	ldrb	r3, [r3, #0]
    99ea:	2bff      	cmp	r3, #255	; 0xff
    99ec:	d105      	bne.n	99fa <send_settings+0x4d6>
    99ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    99f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99f6:	2200      	movs	r2, #0
    99f8:	701a      	strb	r2, [r3, #0]
    99fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    99fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a02:	781b      	ldrb	r3, [r3, #0]
    9a04:	461a      	mov	r2, r3
    9a06:	f24c 330c 	movw	r3, #49932	; 0xc30c
    9a0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a0e:	7859      	ldrb	r1, [r3, #1]
    9a10:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9a14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a18:	5499      	strb	r1, [r3, r2]
    9a1a:	4b43      	ldr	r3, [pc, #268]	; (9b28 <send_settings+0x604>)
    9a1c:	781a      	ldrb	r2, [r3, #0]
    9a1e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9a22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a26:	781b      	ldrb	r3, [r3, #0]
    9a28:	4413      	add	r3, r2
    9a2a:	b2da      	uxtb	r2, r3
    9a2c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9a30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a34:	701a      	strb	r2, [r3, #0]
    9a36:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9a3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a3e:	781a      	ldrb	r2, [r3, #0]
    9a40:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9a44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a48:	781b      	ldrb	r3, [r3, #0]
    9a4a:	4413      	add	r3, r2
    9a4c:	b2da      	uxtb	r2, r3
    9a4e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9a52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a56:	701a      	strb	r2, [r3, #0]
    9a58:	f24c 3319 	movw	r3, #49945	; 0xc319
    9a5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a60:	781b      	ldrb	r3, [r3, #0]
    9a62:	3301      	adds	r3, #1
    9a64:	b2da      	uxtb	r2, r3
    9a66:	f24c 3319 	movw	r3, #49945	; 0xc319
    9a6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a6e:	701a      	strb	r2, [r3, #0]
    9a70:	f24c 3319 	movw	r3, #49945	; 0xc319
    9a74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a78:	781b      	ldrb	r3, [r3, #0]
    9a7a:	2bff      	cmp	r3, #255	; 0xff
    9a7c:	d105      	bne.n	9a8a <send_settings+0x566>
    9a7e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9a82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a86:	2200      	movs	r2, #0
    9a88:	701a      	strb	r2, [r3, #0]
    9a8a:	f24c 3319 	movw	r3, #49945	; 0xc319
    9a8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a92:	781b      	ldrb	r3, [r3, #0]
    9a94:	461a      	mov	r2, r3
    9a96:	f24c 330c 	movw	r3, #49932	; 0xc30c
    9a9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a9e:	7899      	ldrb	r1, [r3, #2]
    9aa0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9aa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9aa8:	5499      	strb	r1, [r3, r2]
    9aaa:	4b20      	ldr	r3, [pc, #128]	; (9b2c <send_settings+0x608>)
    9aac:	781a      	ldrb	r2, [r3, #0]
    9aae:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9ab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ab6:	781b      	ldrb	r3, [r3, #0]
    9ab8:	4413      	add	r3, r2
    9aba:	b2da      	uxtb	r2, r3
    9abc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9ac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ac4:	701a      	strb	r2, [r3, #0]
    9ac6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9aca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ace:	781a      	ldrb	r2, [r3, #0]
    9ad0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9ad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ad8:	781b      	ldrb	r3, [r3, #0]
    9ada:	4413      	add	r3, r2
    9adc:	b2da      	uxtb	r2, r3
    9ade:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9ae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ae6:	701a      	strb	r2, [r3, #0]
    9ae8:	f24c 3319 	movw	r3, #49945	; 0xc319
    9aec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9af0:	781b      	ldrb	r3, [r3, #0]
    9af2:	3301      	adds	r3, #1
    9af4:	b2da      	uxtb	r2, r3
    9af6:	f24c 3319 	movw	r3, #49945	; 0xc319
    9afa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9afe:	701a      	strb	r2, [r3, #0]
    9b00:	f24c 3319 	movw	r3, #49945	; 0xc319
    9b04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b08:	781b      	ldrb	r3, [r3, #0]
    9b0a:	2bff      	cmp	r3, #255	; 0xff
    9b0c:	d110      	bne.n	9b30 <send_settings+0x60c>
    9b0e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9b12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b16:	2200      	movs	r2, #0
    9b18:	701a      	strb	r2, [r3, #0]
    9b1a:	e009      	b.n	9b30 <send_settings+0x60c>
    9b1c:	2004c309 	.word	0x2004c309
    9b20:	2004c30a 	.word	0x2004c30a
    9b24:	2004c30b 	.word	0x2004c30b
    9b28:	2004c30d 	.word	0x2004c30d
    9b2c:	2004c30e 	.word	0x2004c30e
    9b30:	f24c 3319 	movw	r3, #49945	; 0xc319
    9b34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b38:	781b      	ldrb	r3, [r3, #0]
    9b3a:	461a      	mov	r2, r3
    9b3c:	f24c 330c 	movw	r3, #49932	; 0xc30c
    9b40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b44:	78d9      	ldrb	r1, [r3, #3]
    9b46:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9b4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b4e:	5499      	strb	r1, [r3, r2]
    9b50:	4b79      	ldr	r3, [pc, #484]	; (9d38 <send_settings+0x814>)
    9b52:	781a      	ldrb	r2, [r3, #0]
    9b54:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9b58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b5c:	781b      	ldrb	r3, [r3, #0]
    9b5e:	4413      	add	r3, r2
    9b60:	b2da      	uxtb	r2, r3
    9b62:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9b66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b6a:	701a      	strb	r2, [r3, #0]
    9b6c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b74:	781a      	ldrb	r2, [r3, #0]
    9b76:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9b7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b7e:	781b      	ldrb	r3, [r3, #0]
    9b80:	4413      	add	r3, r2
    9b82:	b2da      	uxtb	r2, r3
    9b84:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9b88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b8c:	701a      	strb	r2, [r3, #0]
    9b8e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9b92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b96:	781b      	ldrb	r3, [r3, #0]
    9b98:	3301      	adds	r3, #1
    9b9a:	b2da      	uxtb	r2, r3
    9b9c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9ba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ba4:	701a      	strb	r2, [r3, #0]
    9ba6:	f24c 3319 	movw	r3, #49945	; 0xc319
    9baa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bae:	781b      	ldrb	r3, [r3, #0]
    9bb0:	2bff      	cmp	r3, #255	; 0xff
    9bb2:	d105      	bne.n	9bc0 <send_settings+0x69c>
    9bb4:	f24c 3319 	movw	r3, #49945	; 0xc319
    9bb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bbc:	2200      	movs	r2, #0
    9bbe:	701a      	strb	r2, [r3, #0]
    9bc0:	f24c 3319 	movw	r3, #49945	; 0xc319
    9bc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bc8:	781b      	ldrb	r3, [r3, #0]
    9bca:	461a      	mov	r2, r3
    9bcc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9bd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bd4:	7819      	ldrb	r1, [r3, #0]
    9bd6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9bda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bde:	5499      	strb	r1, [r3, r2]
    9be0:	f24c 3319 	movw	r3, #49945	; 0xc319
    9be4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9be8:	781b      	ldrb	r3, [r3, #0]
    9bea:	3301      	adds	r3, #1
    9bec:	b2da      	uxtb	r2, r3
    9bee:	f24c 3319 	movw	r3, #49945	; 0xc319
    9bf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bf6:	701a      	strb	r2, [r3, #0]
    9bf8:	f24c 3319 	movw	r3, #49945	; 0xc319
    9bfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c00:	781b      	ldrb	r3, [r3, #0]
    9c02:	2bff      	cmp	r3, #255	; 0xff
    9c04:	d105      	bne.n	9c12 <send_settings+0x6ee>
    9c06:	f24c 3319 	movw	r3, #49945	; 0xc319
    9c0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c0e:	2200      	movs	r2, #0
    9c10:	701a      	strb	r2, [r3, #0]
    9c12:	f24c 3319 	movw	r3, #49945	; 0xc319
    9c16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c1a:	781b      	ldrb	r3, [r3, #0]
    9c1c:	461a      	mov	r2, r3
    9c1e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9c22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c26:	7819      	ldrb	r1, [r3, #0]
    9c28:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9c2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c30:	5499      	strb	r1, [r3, r2]
    9c32:	f24c 3319 	movw	r3, #49945	; 0xc319
    9c36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c3a:	781b      	ldrb	r3, [r3, #0]
    9c3c:	3301      	adds	r3, #1
    9c3e:	b2da      	uxtb	r2, r3
    9c40:	f24c 3319 	movw	r3, #49945	; 0xc319
    9c44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c48:	701a      	strb	r2, [r3, #0]
    9c4a:	f24c 3319 	movw	r3, #49945	; 0xc319
    9c4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c52:	781b      	ldrb	r3, [r3, #0]
    9c54:	2bff      	cmp	r3, #255	; 0xff
    9c56:	d105      	bne.n	9c64 <send_settings+0x740>
    9c58:	f24c 3319 	movw	r3, #49945	; 0xc319
    9c5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c60:	2200      	movs	r2, #0
    9c62:	701a      	strb	r2, [r3, #0]
    9c64:	f242 0339 	movw	r3, #8249	; 0x2039
    9c68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c6c:	781b      	ldrb	r3, [r3, #0]
    9c6e:	b2db      	uxtb	r3, r3
    9c70:	f003 0310 	and.w	r3, r3, #16
    9c74:	2b00      	cmp	r3, #0
    9c76:	d15a      	bne.n	9d2e <send_settings+0x80a>
    9c78:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9c7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c80:	781b      	ldrb	r3, [r3, #0]
    9c82:	b2db      	uxtb	r3, r3
    9c84:	461a      	mov	r2, r3
    9c86:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9c8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c8e:	5c9a      	ldrb	r2, [r3, r2]
    9c90:	f24c 431b 	movw	r3, #50203	; 0xc41b
    9c94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c98:	701a      	strb	r2, [r3, #0]
    9c9a:	f24c 431c 	movw	r3, #50204	; 0xc41c
    9c9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ca2:	2200      	movs	r2, #0
    9ca4:	701a      	strb	r2, [r3, #0]
    9ca6:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9caa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cae:	781b      	ldrb	r3, [r3, #0]
    9cb0:	b2db      	uxtb	r3, r3
    9cb2:	3301      	adds	r3, #1
    9cb4:	b2da      	uxtb	r2, r3
    9cb6:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9cba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cbe:	701a      	strb	r2, [r3, #0]
    9cc0:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9cc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cc8:	781b      	ldrb	r3, [r3, #0]
    9cca:	b2db      	uxtb	r3, r3
    9ccc:	2bff      	cmp	r3, #255	; 0xff
    9cce:	d105      	bne.n	9cdc <send_settings+0x7b8>
    9cd0:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9cd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cd8:	2200      	movs	r2, #0
    9cda:	701a      	strb	r2, [r3, #0]
    9cdc:	f242 0338 	movw	r3, #8248	; 0x2038
    9ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ce4:	f242 0238 	movw	r2, #8248	; 0x2038
    9ce8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9cec:	7812      	ldrb	r2, [r2, #0]
    9cee:	b2d2      	uxtb	r2, r2
    9cf0:	f042 0201 	orr.w	r2, r2, #1
    9cf4:	b2d2      	uxtb	r2, r2
    9cf6:	701a      	strb	r2, [r3, #0]
    9cf8:	f242 0339 	movw	r3, #8249	; 0x2039
    9cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d00:	f242 0239 	movw	r2, #8249	; 0x2039
    9d04:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9d08:	7812      	ldrb	r2, [r2, #0]
    9d0a:	b2d2      	uxtb	r2, r2
    9d0c:	f042 0210 	orr.w	r2, r2, #16
    9d10:	b2d2      	uxtb	r2, r2
    9d12:	701a      	strb	r2, [r3, #0]
    9d14:	e00b      	b.n	9d2e <send_settings+0x80a>
    9d16:	f24c 3318 	movw	r3, #49944	; 0xc318
    9d1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d1e:	781b      	ldrb	r3, [r3, #0]
    9d20:	3301      	adds	r3, #1
    9d22:	b2da      	uxtb	r2, r3
    9d24:	f24c 3318 	movw	r3, #49944	; 0xc318
    9d28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d2c:	701a      	strb	r2, [r3, #0]
}
    9d2e:	46bd      	mov	sp, r7
    9d30:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d34:	4770      	bx	lr
    9d36:	bf00      	nop
    9d38:	2004c30f 	.word	0x2004c30f

00009d3c <send_desired>:
void send_desired(void){  //1000ms
    9d3c:	b480      	push	{r7}
    9d3e:	af00      	add	r7, sp, #0
  if(!boot)
    9d40:	f240 533d 	movw	r3, #1341	; 0x53d
    9d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d48:	781b      	ldrb	r3, [r3, #0]
    9d4a:	2b00      	cmp	r3, #0
    9d4c:	f040 8727 	bne.w	ab9e <send_desired+0xe62>
  { if (count % 10 == 3) PERIODIC_SEND_DESIRED();}
    9d50:	f24c 3311 	movw	r3, #49937	; 0xc311
    9d54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d58:	781a      	ldrb	r2, [r3, #0]
    9d5a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    9d5e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    9d62:	fba3 1302 	umull	r1, r3, r3, r2
    9d66:	08d9      	lsrs	r1, r3, #3
    9d68:	460b      	mov	r3, r1
    9d6a:	009b      	lsls	r3, r3, #2
    9d6c:	440b      	add	r3, r1
    9d6e:	005b      	lsls	r3, r3, #1
    9d70:	1ad3      	subs	r3, r2, r3
    9d72:	b2db      	uxtb	r3, r3
    9d74:	2b03      	cmp	r3, #3
    9d76:	f040 8712 	bne.w	ab9e <send_desired+0xe62>
    9d7a:	f24c 3319 	movw	r3, #49945	; 0xc319
    9d7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d82:	781a      	ldrb	r2, [r3, #0]
    9d84:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9d88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d8c:	781b      	ldrb	r3, [r3, #0]
    9d8e:	b2db      	uxtb	r3, r3
    9d90:	429a      	cmp	r2, r3
    9d92:	d313      	bcc.n	9dbc <send_desired+0x80>
    9d94:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9d98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d9c:	781b      	ldrb	r3, [r3, #0]
    9d9e:	b2db      	uxtb	r3, r3
    9da0:	461a      	mov	r2, r3
    9da2:	f24c 3319 	movw	r3, #49945	; 0xc319
    9da6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9daa:	781b      	ldrb	r3, [r3, #0]
    9dac:	1ad3      	subs	r3, r2, r3
    9dae:	33ff      	adds	r3, #255	; 0xff
    9db0:	2b18      	cmp	r3, #24
    9db2:	bfd4      	ite	le
    9db4:	2300      	movle	r3, #0
    9db6:	2301      	movgt	r3, #1
    9db8:	b2db      	uxtb	r3, r3
    9dba:	e011      	b.n	9de0 <send_desired+0xa4>
    9dbc:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9dc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dc4:	781b      	ldrb	r3, [r3, #0]
    9dc6:	b2db      	uxtb	r3, r3
    9dc8:	461a      	mov	r2, r3
    9dca:	f24c 3319 	movw	r3, #49945	; 0xc319
    9dce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dd2:	781b      	ldrb	r3, [r3, #0]
    9dd4:	1ad3      	subs	r3, r2, r3
    9dd6:	2b18      	cmp	r3, #24
    9dd8:	bfd4      	ite	le
    9dda:	2300      	movle	r3, #0
    9ddc:	2301      	movgt	r3, #1
    9dde:	b2db      	uxtb	r3, r3
    9de0:	2b00      	cmp	r3, #0
    9de2:	f000 86d0 	beq.w	ab86 <send_desired+0xe4a>
    9de6:	f24c 3319 	movw	r3, #49945	; 0xc319
    9dea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dee:	781b      	ldrb	r3, [r3, #0]
    9df0:	461a      	mov	r2, r3
    9df2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9df6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dfa:	2105      	movs	r1, #5
    9dfc:	5499      	strb	r1, [r3, r2]
    9dfe:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e06:	781b      	ldrb	r3, [r3, #0]
    9e08:	3301      	adds	r3, #1
    9e0a:	b2da      	uxtb	r2, r3
    9e0c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e14:	701a      	strb	r2, [r3, #0]
    9e16:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e1e:	781b      	ldrb	r3, [r3, #0]
    9e20:	2bff      	cmp	r3, #255	; 0xff
    9e22:	d105      	bne.n	9e30 <send_desired+0xf4>
    9e24:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e2c:	2200      	movs	r2, #0
    9e2e:	701a      	strb	r2, [r3, #0]
    9e30:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e38:	781b      	ldrb	r3, [r3, #0]
    9e3a:	461a      	mov	r2, r3
    9e3c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9e40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e44:	2112      	movs	r1, #18
    9e46:	5499      	strb	r1, [r3, r2]
    9e48:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e50:	781b      	ldrb	r3, [r3, #0]
    9e52:	3301      	adds	r3, #1
    9e54:	b2da      	uxtb	r2, r3
    9e56:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e5e:	701a      	strb	r2, [r3, #0]
    9e60:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e68:	781b      	ldrb	r3, [r3, #0]
    9e6a:	2bff      	cmp	r3, #255	; 0xff
    9e6c:	d105      	bne.n	9e7a <send_desired+0x13e>
    9e6e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e76:	2200      	movs	r2, #0
    9e78:	701a      	strb	r2, [r3, #0]
    9e7a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9e7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e82:	2212      	movs	r2, #18
    9e84:	701a      	strb	r2, [r3, #0]
    9e86:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9e8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e8e:	2212      	movs	r2, #18
    9e90:	701a      	strb	r2, [r3, #0]
    9e92:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e9a:	781b      	ldrb	r3, [r3, #0]
    9e9c:	461a      	mov	r2, r3
    9e9e:	f24c 6344 	movw	r3, #50756	; 0xc644
    9ea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ea6:	7819      	ldrb	r1, [r3, #0]
    9ea8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9eac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eb0:	5499      	strb	r1, [r3, r2]
    9eb2:	f24c 6344 	movw	r3, #50756	; 0xc644
    9eb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eba:	781a      	ldrb	r2, [r3, #0]
    9ebc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9ec0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ec4:	781b      	ldrb	r3, [r3, #0]
    9ec6:	4413      	add	r3, r2
    9ec8:	b2da      	uxtb	r2, r3
    9eca:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9ece:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ed2:	701a      	strb	r2, [r3, #0]
    9ed4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9ed8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9edc:	781a      	ldrb	r2, [r3, #0]
    9ede:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9ee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ee6:	781b      	ldrb	r3, [r3, #0]
    9ee8:	4413      	add	r3, r2
    9eea:	b2da      	uxtb	r2, r3
    9eec:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9ef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ef4:	701a      	strb	r2, [r3, #0]
    9ef6:	f24c 3319 	movw	r3, #49945	; 0xc319
    9efa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9efe:	781b      	ldrb	r3, [r3, #0]
    9f00:	3301      	adds	r3, #1
    9f02:	b2da      	uxtb	r2, r3
    9f04:	f24c 3319 	movw	r3, #49945	; 0xc319
    9f08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f0c:	701a      	strb	r2, [r3, #0]
    9f0e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9f12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f16:	781b      	ldrb	r3, [r3, #0]
    9f18:	2bff      	cmp	r3, #255	; 0xff
    9f1a:	d105      	bne.n	9f28 <send_desired+0x1ec>
    9f1c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9f20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f24:	2200      	movs	r2, #0
    9f26:	701a      	strb	r2, [r3, #0]
    9f28:	f24c 3319 	movw	r3, #49945	; 0xc319
    9f2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f30:	781b      	ldrb	r3, [r3, #0]
    9f32:	461a      	mov	r2, r3
    9f34:	f24c 6344 	movw	r3, #50756	; 0xc644
    9f38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f3c:	7859      	ldrb	r1, [r3, #1]
    9f3e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9f42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f46:	5499      	strb	r1, [r3, r2]
    9f48:	4bd1      	ldr	r3, [pc, #836]	; (a290 <send_desired+0x554>)
    9f4a:	781a      	ldrb	r2, [r3, #0]
    9f4c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9f50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f54:	781b      	ldrb	r3, [r3, #0]
    9f56:	4413      	add	r3, r2
    9f58:	b2da      	uxtb	r2, r3
    9f5a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9f5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f62:	701a      	strb	r2, [r3, #0]
    9f64:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9f68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f6c:	781a      	ldrb	r2, [r3, #0]
    9f6e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9f72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f76:	781b      	ldrb	r3, [r3, #0]
    9f78:	4413      	add	r3, r2
    9f7a:	b2da      	uxtb	r2, r3
    9f7c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9f80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f84:	701a      	strb	r2, [r3, #0]
    9f86:	f24c 3319 	movw	r3, #49945	; 0xc319
    9f8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f8e:	781b      	ldrb	r3, [r3, #0]
    9f90:	3301      	adds	r3, #1
    9f92:	b2da      	uxtb	r2, r3
    9f94:	f24c 3319 	movw	r3, #49945	; 0xc319
    9f98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f9c:	701a      	strb	r2, [r3, #0]
    9f9e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9fa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fa6:	781b      	ldrb	r3, [r3, #0]
    9fa8:	2bff      	cmp	r3, #255	; 0xff
    9faa:	d105      	bne.n	9fb8 <send_desired+0x27c>
    9fac:	f24c 3319 	movw	r3, #49945	; 0xc319
    9fb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fb4:	2200      	movs	r2, #0
    9fb6:	701a      	strb	r2, [r3, #0]
    9fb8:	f24c 3319 	movw	r3, #49945	; 0xc319
    9fbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fc0:	781b      	ldrb	r3, [r3, #0]
    9fc2:	461a      	mov	r2, r3
    9fc4:	f24c 6344 	movw	r3, #50756	; 0xc644
    9fc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fcc:	7899      	ldrb	r1, [r3, #2]
    9fce:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9fd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fd6:	5499      	strb	r1, [r3, r2]
    9fd8:	4bae      	ldr	r3, [pc, #696]	; (a294 <send_desired+0x558>)
    9fda:	781a      	ldrb	r2, [r3, #0]
    9fdc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9fe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fe4:	781b      	ldrb	r3, [r3, #0]
    9fe6:	4413      	add	r3, r2
    9fe8:	b2da      	uxtb	r2, r3
    9fea:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9fee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ff2:	701a      	strb	r2, [r3, #0]
    9ff4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9ff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ffc:	781a      	ldrb	r2, [r3, #0]
    9ffe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a002:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a006:	781b      	ldrb	r3, [r3, #0]
    a008:	4413      	add	r3, r2
    a00a:	b2da      	uxtb	r2, r3
    a00c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a014:	701a      	strb	r2, [r3, #0]
    a016:	f24c 3319 	movw	r3, #49945	; 0xc319
    a01a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a01e:	781b      	ldrb	r3, [r3, #0]
    a020:	3301      	adds	r3, #1
    a022:	b2da      	uxtb	r2, r3
    a024:	f24c 3319 	movw	r3, #49945	; 0xc319
    a028:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a02c:	701a      	strb	r2, [r3, #0]
    a02e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a032:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a036:	781b      	ldrb	r3, [r3, #0]
    a038:	2bff      	cmp	r3, #255	; 0xff
    a03a:	d105      	bne.n	a048 <send_desired+0x30c>
    a03c:	f24c 3319 	movw	r3, #49945	; 0xc319
    a040:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a044:	2200      	movs	r2, #0
    a046:	701a      	strb	r2, [r3, #0]
    a048:	f24c 3319 	movw	r3, #49945	; 0xc319
    a04c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a050:	781b      	ldrb	r3, [r3, #0]
    a052:	461a      	mov	r2, r3
    a054:	f24c 6344 	movw	r3, #50756	; 0xc644
    a058:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a05c:	78d9      	ldrb	r1, [r3, #3]
    a05e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a062:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a066:	5499      	strb	r1, [r3, r2]
    a068:	4b8b      	ldr	r3, [pc, #556]	; (a298 <send_desired+0x55c>)
    a06a:	781a      	ldrb	r2, [r3, #0]
    a06c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a070:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a074:	781b      	ldrb	r3, [r3, #0]
    a076:	4413      	add	r3, r2
    a078:	b2da      	uxtb	r2, r3
    a07a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a07e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a082:	701a      	strb	r2, [r3, #0]
    a084:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a08c:	781a      	ldrb	r2, [r3, #0]
    a08e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a096:	781b      	ldrb	r3, [r3, #0]
    a098:	4413      	add	r3, r2
    a09a:	b2da      	uxtb	r2, r3
    a09c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a0a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0a4:	701a      	strb	r2, [r3, #0]
    a0a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    a0aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0ae:	781b      	ldrb	r3, [r3, #0]
    a0b0:	3301      	adds	r3, #1
    a0b2:	b2da      	uxtb	r2, r3
    a0b4:	f24c 3319 	movw	r3, #49945	; 0xc319
    a0b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0bc:	701a      	strb	r2, [r3, #0]
    a0be:	f24c 3319 	movw	r3, #49945	; 0xc319
    a0c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0c6:	781b      	ldrb	r3, [r3, #0]
    a0c8:	2bff      	cmp	r3, #255	; 0xff
    a0ca:	d105      	bne.n	a0d8 <send_desired+0x39c>
    a0cc:	f24c 3319 	movw	r3, #49945	; 0xc319
    a0d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0d4:	2200      	movs	r2, #0
    a0d6:	701a      	strb	r2, [r3, #0]
    a0d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    a0dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0e0:	781b      	ldrb	r3, [r3, #0]
    a0e2:	461a      	mov	r2, r3
    a0e4:	f24c 6348 	movw	r3, #50760	; 0xc648
    a0e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0ec:	7819      	ldrb	r1, [r3, #0]
    a0ee:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a0f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0f6:	5499      	strb	r1, [r3, r2]
    a0f8:	f24c 6348 	movw	r3, #50760	; 0xc648
    a0fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a100:	781a      	ldrb	r2, [r3, #0]
    a102:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a106:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a10a:	781b      	ldrb	r3, [r3, #0]
    a10c:	4413      	add	r3, r2
    a10e:	b2da      	uxtb	r2, r3
    a110:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a118:	701a      	strb	r2, [r3, #0]
    a11a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a11e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a122:	781a      	ldrb	r2, [r3, #0]
    a124:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a128:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a12c:	781b      	ldrb	r3, [r3, #0]
    a12e:	4413      	add	r3, r2
    a130:	b2da      	uxtb	r2, r3
    a132:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a136:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a13a:	701a      	strb	r2, [r3, #0]
    a13c:	f24c 3319 	movw	r3, #49945	; 0xc319
    a140:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a144:	781b      	ldrb	r3, [r3, #0]
    a146:	3301      	adds	r3, #1
    a148:	b2da      	uxtb	r2, r3
    a14a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a14e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a152:	701a      	strb	r2, [r3, #0]
    a154:	f24c 3319 	movw	r3, #49945	; 0xc319
    a158:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a15c:	781b      	ldrb	r3, [r3, #0]
    a15e:	2bff      	cmp	r3, #255	; 0xff
    a160:	d105      	bne.n	a16e <send_desired+0x432>
    a162:	f24c 3319 	movw	r3, #49945	; 0xc319
    a166:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a16a:	2200      	movs	r2, #0
    a16c:	701a      	strb	r2, [r3, #0]
    a16e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a172:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a176:	781b      	ldrb	r3, [r3, #0]
    a178:	461a      	mov	r2, r3
    a17a:	f24c 6348 	movw	r3, #50760	; 0xc648
    a17e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a182:	7859      	ldrb	r1, [r3, #1]
    a184:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a188:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a18c:	5499      	strb	r1, [r3, r2]
    a18e:	4b43      	ldr	r3, [pc, #268]	; (a29c <send_desired+0x560>)
    a190:	781a      	ldrb	r2, [r3, #0]
    a192:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a196:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a19a:	781b      	ldrb	r3, [r3, #0]
    a19c:	4413      	add	r3, r2
    a19e:	b2da      	uxtb	r2, r3
    a1a0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a1a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1a8:	701a      	strb	r2, [r3, #0]
    a1aa:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a1ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1b2:	781a      	ldrb	r2, [r3, #0]
    a1b4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a1b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1bc:	781b      	ldrb	r3, [r3, #0]
    a1be:	4413      	add	r3, r2
    a1c0:	b2da      	uxtb	r2, r3
    a1c2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a1c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1ca:	701a      	strb	r2, [r3, #0]
    a1cc:	f24c 3319 	movw	r3, #49945	; 0xc319
    a1d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1d4:	781b      	ldrb	r3, [r3, #0]
    a1d6:	3301      	adds	r3, #1
    a1d8:	b2da      	uxtb	r2, r3
    a1da:	f24c 3319 	movw	r3, #49945	; 0xc319
    a1de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1e2:	701a      	strb	r2, [r3, #0]
    a1e4:	f24c 3319 	movw	r3, #49945	; 0xc319
    a1e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1ec:	781b      	ldrb	r3, [r3, #0]
    a1ee:	2bff      	cmp	r3, #255	; 0xff
    a1f0:	d105      	bne.n	a1fe <send_desired+0x4c2>
    a1f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    a1f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1fa:	2200      	movs	r2, #0
    a1fc:	701a      	strb	r2, [r3, #0]
    a1fe:	f24c 3319 	movw	r3, #49945	; 0xc319
    a202:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a206:	781b      	ldrb	r3, [r3, #0]
    a208:	461a      	mov	r2, r3
    a20a:	f24c 6348 	movw	r3, #50760	; 0xc648
    a20e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a212:	7899      	ldrb	r1, [r3, #2]
    a214:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a218:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a21c:	5499      	strb	r1, [r3, r2]
    a21e:	4b20      	ldr	r3, [pc, #128]	; (a2a0 <send_desired+0x564>)
    a220:	781a      	ldrb	r2, [r3, #0]
    a222:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a22a:	781b      	ldrb	r3, [r3, #0]
    a22c:	4413      	add	r3, r2
    a22e:	b2da      	uxtb	r2, r3
    a230:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a234:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a238:	701a      	strb	r2, [r3, #0]
    a23a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a23e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a242:	781a      	ldrb	r2, [r3, #0]
    a244:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a248:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a24c:	781b      	ldrb	r3, [r3, #0]
    a24e:	4413      	add	r3, r2
    a250:	b2da      	uxtb	r2, r3
    a252:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a256:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a25a:	701a      	strb	r2, [r3, #0]
    a25c:	f24c 3319 	movw	r3, #49945	; 0xc319
    a260:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a264:	781b      	ldrb	r3, [r3, #0]
    a266:	3301      	adds	r3, #1
    a268:	b2da      	uxtb	r2, r3
    a26a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a26e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a272:	701a      	strb	r2, [r3, #0]
    a274:	f24c 3319 	movw	r3, #49945	; 0xc319
    a278:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a27c:	781b      	ldrb	r3, [r3, #0]
    a27e:	2bff      	cmp	r3, #255	; 0xff
    a280:	d110      	bne.n	a2a4 <send_desired+0x568>
    a282:	f24c 3319 	movw	r3, #49945	; 0xc319
    a286:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a28a:	2200      	movs	r2, #0
    a28c:	701a      	strb	r2, [r3, #0]
    a28e:	e009      	b.n	a2a4 <send_desired+0x568>
    a290:	2004c645 	.word	0x2004c645
    a294:	2004c646 	.word	0x2004c646
    a298:	2004c647 	.word	0x2004c647
    a29c:	2004c649 	.word	0x2004c649
    a2a0:	2004c64a 	.word	0x2004c64a
    a2a4:	f24c 3319 	movw	r3, #49945	; 0xc319
    a2a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2ac:	781b      	ldrb	r3, [r3, #0]
    a2ae:	461a      	mov	r2, r3
    a2b0:	f24c 6348 	movw	r3, #50760	; 0xc648
    a2b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2b8:	78d9      	ldrb	r1, [r3, #3]
    a2ba:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a2be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2c2:	5499      	strb	r1, [r3, r2]
    a2c4:	4bd3      	ldr	r3, [pc, #844]	; (a614 <send_desired+0x8d8>)
    a2c6:	781a      	ldrb	r2, [r3, #0]
    a2c8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a2cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2d0:	781b      	ldrb	r3, [r3, #0]
    a2d2:	4413      	add	r3, r2
    a2d4:	b2da      	uxtb	r2, r3
    a2d6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a2da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2de:	701a      	strb	r2, [r3, #0]
    a2e0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a2e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2e8:	781a      	ldrb	r2, [r3, #0]
    a2ea:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a2ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2f2:	781b      	ldrb	r3, [r3, #0]
    a2f4:	4413      	add	r3, r2
    a2f6:	b2da      	uxtb	r2, r3
    a2f8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a2fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a300:	701a      	strb	r2, [r3, #0]
    a302:	f24c 3319 	movw	r3, #49945	; 0xc319
    a306:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a30a:	781b      	ldrb	r3, [r3, #0]
    a30c:	3301      	adds	r3, #1
    a30e:	b2da      	uxtb	r2, r3
    a310:	f24c 3319 	movw	r3, #49945	; 0xc319
    a314:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a318:	701a      	strb	r2, [r3, #0]
    a31a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a31e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a322:	781b      	ldrb	r3, [r3, #0]
    a324:	2bff      	cmp	r3, #255	; 0xff
    a326:	d105      	bne.n	a334 <send_desired+0x5f8>
    a328:	f24c 3319 	movw	r3, #49945	; 0xc319
    a32c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a330:	2200      	movs	r2, #0
    a332:	701a      	strb	r2, [r3, #0]
    a334:	f24c 3319 	movw	r3, #49945	; 0xc319
    a338:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a33c:	781b      	ldrb	r3, [r3, #0]
    a33e:	461a      	mov	r2, r3
    a340:	f24c 6390 	movw	r3, #50832	; 0xc690
    a344:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a348:	7819      	ldrb	r1, [r3, #0]
    a34a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a34e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a352:	5499      	strb	r1, [r3, r2]
    a354:	f24c 6390 	movw	r3, #50832	; 0xc690
    a358:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a35c:	781a      	ldrb	r2, [r3, #0]
    a35e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a362:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a366:	781b      	ldrb	r3, [r3, #0]
    a368:	4413      	add	r3, r2
    a36a:	b2da      	uxtb	r2, r3
    a36c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a370:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a374:	701a      	strb	r2, [r3, #0]
    a376:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a37a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a37e:	781a      	ldrb	r2, [r3, #0]
    a380:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a384:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a388:	781b      	ldrb	r3, [r3, #0]
    a38a:	4413      	add	r3, r2
    a38c:	b2da      	uxtb	r2, r3
    a38e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a392:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a396:	701a      	strb	r2, [r3, #0]
    a398:	f24c 3319 	movw	r3, #49945	; 0xc319
    a39c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3a0:	781b      	ldrb	r3, [r3, #0]
    a3a2:	3301      	adds	r3, #1
    a3a4:	b2da      	uxtb	r2, r3
    a3a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    a3aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3ae:	701a      	strb	r2, [r3, #0]
    a3b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    a3b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3b8:	781b      	ldrb	r3, [r3, #0]
    a3ba:	2bff      	cmp	r3, #255	; 0xff
    a3bc:	d105      	bne.n	a3ca <send_desired+0x68e>
    a3be:	f24c 3319 	movw	r3, #49945	; 0xc319
    a3c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3c6:	2200      	movs	r2, #0
    a3c8:	701a      	strb	r2, [r3, #0]
    a3ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    a3ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3d2:	781b      	ldrb	r3, [r3, #0]
    a3d4:	461a      	mov	r2, r3
    a3d6:	f24c 6390 	movw	r3, #50832	; 0xc690
    a3da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3de:	7859      	ldrb	r1, [r3, #1]
    a3e0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a3e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3e8:	5499      	strb	r1, [r3, r2]
    a3ea:	4b8b      	ldr	r3, [pc, #556]	; (a618 <send_desired+0x8dc>)
    a3ec:	781a      	ldrb	r2, [r3, #0]
    a3ee:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a3f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3f6:	781b      	ldrb	r3, [r3, #0]
    a3f8:	4413      	add	r3, r2
    a3fa:	b2da      	uxtb	r2, r3
    a3fc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a400:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a404:	701a      	strb	r2, [r3, #0]
    a406:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a40a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a40e:	781a      	ldrb	r2, [r3, #0]
    a410:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a414:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a418:	781b      	ldrb	r3, [r3, #0]
    a41a:	4413      	add	r3, r2
    a41c:	b2da      	uxtb	r2, r3
    a41e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a426:	701a      	strb	r2, [r3, #0]
    a428:	f24c 3319 	movw	r3, #49945	; 0xc319
    a42c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a430:	781b      	ldrb	r3, [r3, #0]
    a432:	3301      	adds	r3, #1
    a434:	b2da      	uxtb	r2, r3
    a436:	f24c 3319 	movw	r3, #49945	; 0xc319
    a43a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a43e:	701a      	strb	r2, [r3, #0]
    a440:	f24c 3319 	movw	r3, #49945	; 0xc319
    a444:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a448:	781b      	ldrb	r3, [r3, #0]
    a44a:	2bff      	cmp	r3, #255	; 0xff
    a44c:	d105      	bne.n	a45a <send_desired+0x71e>
    a44e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a452:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a456:	2200      	movs	r2, #0
    a458:	701a      	strb	r2, [r3, #0]
    a45a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a45e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a462:	781b      	ldrb	r3, [r3, #0]
    a464:	461a      	mov	r2, r3
    a466:	f24c 6390 	movw	r3, #50832	; 0xc690
    a46a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a46e:	7899      	ldrb	r1, [r3, #2]
    a470:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a474:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a478:	5499      	strb	r1, [r3, r2]
    a47a:	4b68      	ldr	r3, [pc, #416]	; (a61c <send_desired+0x8e0>)
    a47c:	781a      	ldrb	r2, [r3, #0]
    a47e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a482:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a486:	781b      	ldrb	r3, [r3, #0]
    a488:	4413      	add	r3, r2
    a48a:	b2da      	uxtb	r2, r3
    a48c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a490:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a494:	701a      	strb	r2, [r3, #0]
    a496:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a49a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a49e:	781a      	ldrb	r2, [r3, #0]
    a4a0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a4a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4a8:	781b      	ldrb	r3, [r3, #0]
    a4aa:	4413      	add	r3, r2
    a4ac:	b2da      	uxtb	r2, r3
    a4ae:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a4b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4b6:	701a      	strb	r2, [r3, #0]
    a4b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    a4bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4c0:	781b      	ldrb	r3, [r3, #0]
    a4c2:	3301      	adds	r3, #1
    a4c4:	b2da      	uxtb	r2, r3
    a4c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    a4ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4ce:	701a      	strb	r2, [r3, #0]
    a4d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    a4d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4d8:	781b      	ldrb	r3, [r3, #0]
    a4da:	2bff      	cmp	r3, #255	; 0xff
    a4dc:	d105      	bne.n	a4ea <send_desired+0x7ae>
    a4de:	f24c 3319 	movw	r3, #49945	; 0xc319
    a4e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4e6:	2200      	movs	r2, #0
    a4e8:	701a      	strb	r2, [r3, #0]
    a4ea:	f24c 3319 	movw	r3, #49945	; 0xc319
    a4ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4f2:	781b      	ldrb	r3, [r3, #0]
    a4f4:	461a      	mov	r2, r3
    a4f6:	f24c 6390 	movw	r3, #50832	; 0xc690
    a4fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4fe:	78d9      	ldrb	r1, [r3, #3]
    a500:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a504:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a508:	5499      	strb	r1, [r3, r2]
    a50a:	4b45      	ldr	r3, [pc, #276]	; (a620 <send_desired+0x8e4>)
    a50c:	781a      	ldrb	r2, [r3, #0]
    a50e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a512:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a516:	781b      	ldrb	r3, [r3, #0]
    a518:	4413      	add	r3, r2
    a51a:	b2da      	uxtb	r2, r3
    a51c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a520:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a524:	701a      	strb	r2, [r3, #0]
    a526:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a52a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a52e:	781a      	ldrb	r2, [r3, #0]
    a530:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a538:	781b      	ldrb	r3, [r3, #0]
    a53a:	4413      	add	r3, r2
    a53c:	b2da      	uxtb	r2, r3
    a53e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a542:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a546:	701a      	strb	r2, [r3, #0]
    a548:	f24c 3319 	movw	r3, #49945	; 0xc319
    a54c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a550:	781b      	ldrb	r3, [r3, #0]
    a552:	3301      	adds	r3, #1
    a554:	b2da      	uxtb	r2, r3
    a556:	f24c 3319 	movw	r3, #49945	; 0xc319
    a55a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a55e:	701a      	strb	r2, [r3, #0]
    a560:	f24c 3319 	movw	r3, #49945	; 0xc319
    a564:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a568:	781b      	ldrb	r3, [r3, #0]
    a56a:	2bff      	cmp	r3, #255	; 0xff
    a56c:	d105      	bne.n	a57a <send_desired+0x83e>
    a56e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a572:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a576:	2200      	movs	r2, #0
    a578:	701a      	strb	r2, [r3, #0]
    a57a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a57e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a582:	781b      	ldrb	r3, [r3, #0]
    a584:	461a      	mov	r2, r3
    a586:	f24c 6394 	movw	r3, #50836	; 0xc694
    a58a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a58e:	7819      	ldrb	r1, [r3, #0]
    a590:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a594:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a598:	5499      	strb	r1, [r3, r2]
    a59a:	f24c 6394 	movw	r3, #50836	; 0xc694
    a59e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5a2:	781a      	ldrb	r2, [r3, #0]
    a5a4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a5a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5ac:	781b      	ldrb	r3, [r3, #0]
    a5ae:	4413      	add	r3, r2
    a5b0:	b2da      	uxtb	r2, r3
    a5b2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a5b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5ba:	701a      	strb	r2, [r3, #0]
    a5bc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a5c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5c4:	781a      	ldrb	r2, [r3, #0]
    a5c6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a5ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5ce:	781b      	ldrb	r3, [r3, #0]
    a5d0:	4413      	add	r3, r2
    a5d2:	b2da      	uxtb	r2, r3
    a5d4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a5d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5dc:	701a      	strb	r2, [r3, #0]
    a5de:	f24c 3319 	movw	r3, #49945	; 0xc319
    a5e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5e6:	781b      	ldrb	r3, [r3, #0]
    a5e8:	3301      	adds	r3, #1
    a5ea:	b2da      	uxtb	r2, r3
    a5ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    a5f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5f4:	701a      	strb	r2, [r3, #0]
    a5f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    a5fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5fe:	781b      	ldrb	r3, [r3, #0]
    a600:	2bff      	cmp	r3, #255	; 0xff
    a602:	d10f      	bne.n	a624 <send_desired+0x8e8>
    a604:	f24c 3319 	movw	r3, #49945	; 0xc319
    a608:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a60c:	2200      	movs	r2, #0
    a60e:	701a      	strb	r2, [r3, #0]
    a610:	e008      	b.n	a624 <send_desired+0x8e8>
    a612:	bf00      	nop
    a614:	2004c64b 	.word	0x2004c64b
    a618:	2004c691 	.word	0x2004c691
    a61c:	2004c692 	.word	0x2004c692
    a620:	2004c693 	.word	0x2004c693
    a624:	f24c 3319 	movw	r3, #49945	; 0xc319
    a628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a62c:	781b      	ldrb	r3, [r3, #0]
    a62e:	461a      	mov	r2, r3
    a630:	f24c 6394 	movw	r3, #50836	; 0xc694
    a634:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a638:	7859      	ldrb	r1, [r3, #1]
    a63a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a63e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a642:	5499      	strb	r1, [r3, r2]
    a644:	4bd1      	ldr	r3, [pc, #836]	; (a98c <send_desired+0xc50>)
    a646:	781a      	ldrb	r2, [r3, #0]
    a648:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a64c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a650:	781b      	ldrb	r3, [r3, #0]
    a652:	4413      	add	r3, r2
    a654:	b2da      	uxtb	r2, r3
    a656:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a65a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a65e:	701a      	strb	r2, [r3, #0]
    a660:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a668:	781a      	ldrb	r2, [r3, #0]
    a66a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a66e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a672:	781b      	ldrb	r3, [r3, #0]
    a674:	4413      	add	r3, r2
    a676:	b2da      	uxtb	r2, r3
    a678:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a67c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a680:	701a      	strb	r2, [r3, #0]
    a682:	f24c 3319 	movw	r3, #49945	; 0xc319
    a686:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a68a:	781b      	ldrb	r3, [r3, #0]
    a68c:	3301      	adds	r3, #1
    a68e:	b2da      	uxtb	r2, r3
    a690:	f24c 3319 	movw	r3, #49945	; 0xc319
    a694:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a698:	701a      	strb	r2, [r3, #0]
    a69a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a69e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6a2:	781b      	ldrb	r3, [r3, #0]
    a6a4:	2bff      	cmp	r3, #255	; 0xff
    a6a6:	d105      	bne.n	a6b4 <send_desired+0x978>
    a6a8:	f24c 3319 	movw	r3, #49945	; 0xc319
    a6ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6b0:	2200      	movs	r2, #0
    a6b2:	701a      	strb	r2, [r3, #0]
    a6b4:	f24c 3319 	movw	r3, #49945	; 0xc319
    a6b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6bc:	781b      	ldrb	r3, [r3, #0]
    a6be:	461a      	mov	r2, r3
    a6c0:	f24c 6394 	movw	r3, #50836	; 0xc694
    a6c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6c8:	7899      	ldrb	r1, [r3, #2]
    a6ca:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a6ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6d2:	5499      	strb	r1, [r3, r2]
    a6d4:	4bae      	ldr	r3, [pc, #696]	; (a990 <send_desired+0xc54>)
    a6d6:	781a      	ldrb	r2, [r3, #0]
    a6d8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a6dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6e0:	781b      	ldrb	r3, [r3, #0]
    a6e2:	4413      	add	r3, r2
    a6e4:	b2da      	uxtb	r2, r3
    a6e6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a6ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6ee:	701a      	strb	r2, [r3, #0]
    a6f0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a6f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6f8:	781a      	ldrb	r2, [r3, #0]
    a6fa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a6fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a702:	781b      	ldrb	r3, [r3, #0]
    a704:	4413      	add	r3, r2
    a706:	b2da      	uxtb	r2, r3
    a708:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a70c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a710:	701a      	strb	r2, [r3, #0]
    a712:	f24c 3319 	movw	r3, #49945	; 0xc319
    a716:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a71a:	781b      	ldrb	r3, [r3, #0]
    a71c:	3301      	adds	r3, #1
    a71e:	b2da      	uxtb	r2, r3
    a720:	f24c 3319 	movw	r3, #49945	; 0xc319
    a724:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a728:	701a      	strb	r2, [r3, #0]
    a72a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a72e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a732:	781b      	ldrb	r3, [r3, #0]
    a734:	2bff      	cmp	r3, #255	; 0xff
    a736:	d105      	bne.n	a744 <send_desired+0xa08>
    a738:	f24c 3319 	movw	r3, #49945	; 0xc319
    a73c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a740:	2200      	movs	r2, #0
    a742:	701a      	strb	r2, [r3, #0]
    a744:	f24c 3319 	movw	r3, #49945	; 0xc319
    a748:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a74c:	781b      	ldrb	r3, [r3, #0]
    a74e:	461a      	mov	r2, r3
    a750:	f24c 6394 	movw	r3, #50836	; 0xc694
    a754:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a758:	78d9      	ldrb	r1, [r3, #3]
    a75a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a75e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a762:	5499      	strb	r1, [r3, r2]
    a764:	4b8b      	ldr	r3, [pc, #556]	; (a994 <send_desired+0xc58>)
    a766:	781a      	ldrb	r2, [r3, #0]
    a768:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a76c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a770:	781b      	ldrb	r3, [r3, #0]
    a772:	4413      	add	r3, r2
    a774:	b2da      	uxtb	r2, r3
    a776:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a77a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a77e:	701a      	strb	r2, [r3, #0]
    a780:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a784:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a788:	781a      	ldrb	r2, [r3, #0]
    a78a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a78e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a792:	781b      	ldrb	r3, [r3, #0]
    a794:	4413      	add	r3, r2
    a796:	b2da      	uxtb	r2, r3
    a798:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a79c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7a0:	701a      	strb	r2, [r3, #0]
    a7a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    a7a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7aa:	781b      	ldrb	r3, [r3, #0]
    a7ac:	3301      	adds	r3, #1
    a7ae:	b2da      	uxtb	r2, r3
    a7b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    a7b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7b8:	701a      	strb	r2, [r3, #0]
    a7ba:	f24c 3319 	movw	r3, #49945	; 0xc319
    a7be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7c2:	781b      	ldrb	r3, [r3, #0]
    a7c4:	2bff      	cmp	r3, #255	; 0xff
    a7c6:	d105      	bne.n	a7d4 <send_desired+0xa98>
    a7c8:	f24c 3319 	movw	r3, #49945	; 0xc319
    a7cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7d0:	2200      	movs	r2, #0
    a7d2:	701a      	strb	r2, [r3, #0]
    a7d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    a7d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7dc:	781b      	ldrb	r3, [r3, #0]
    a7de:	461a      	mov	r2, r3
    a7e0:	f240 5374 	movw	r3, #1396	; 0x574
    a7e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7e8:	7819      	ldrb	r1, [r3, #0]
    a7ea:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a7ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7f2:	5499      	strb	r1, [r3, r2]
    a7f4:	f240 5374 	movw	r3, #1396	; 0x574
    a7f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7fc:	781a      	ldrb	r2, [r3, #0]
    a7fe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a802:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a806:	781b      	ldrb	r3, [r3, #0]
    a808:	4413      	add	r3, r2
    a80a:	b2da      	uxtb	r2, r3
    a80c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a810:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a814:	701a      	strb	r2, [r3, #0]
    a816:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a81a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a81e:	781a      	ldrb	r2, [r3, #0]
    a820:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a824:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a828:	781b      	ldrb	r3, [r3, #0]
    a82a:	4413      	add	r3, r2
    a82c:	b2da      	uxtb	r2, r3
    a82e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a832:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a836:	701a      	strb	r2, [r3, #0]
    a838:	f24c 3319 	movw	r3, #49945	; 0xc319
    a83c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a840:	781b      	ldrb	r3, [r3, #0]
    a842:	3301      	adds	r3, #1
    a844:	b2da      	uxtb	r2, r3
    a846:	f24c 3319 	movw	r3, #49945	; 0xc319
    a84a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a84e:	701a      	strb	r2, [r3, #0]
    a850:	f24c 3319 	movw	r3, #49945	; 0xc319
    a854:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a858:	781b      	ldrb	r3, [r3, #0]
    a85a:	2bff      	cmp	r3, #255	; 0xff
    a85c:	d105      	bne.n	a86a <send_desired+0xb2e>
    a85e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a862:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a866:	2200      	movs	r2, #0
    a868:	701a      	strb	r2, [r3, #0]
    a86a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a86e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a872:	781b      	ldrb	r3, [r3, #0]
    a874:	461a      	mov	r2, r3
    a876:	f240 5374 	movw	r3, #1396	; 0x574
    a87a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a87e:	7859      	ldrb	r1, [r3, #1]
    a880:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a884:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a888:	5499      	strb	r1, [r3, r2]
    a88a:	4b43      	ldr	r3, [pc, #268]	; (a998 <send_desired+0xc5c>)
    a88c:	781a      	ldrb	r2, [r3, #0]
    a88e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a892:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a896:	781b      	ldrb	r3, [r3, #0]
    a898:	4413      	add	r3, r2
    a89a:	b2da      	uxtb	r2, r3
    a89c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a8a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8a4:	701a      	strb	r2, [r3, #0]
    a8a6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a8aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8ae:	781a      	ldrb	r2, [r3, #0]
    a8b0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a8b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8b8:	781b      	ldrb	r3, [r3, #0]
    a8ba:	4413      	add	r3, r2
    a8bc:	b2da      	uxtb	r2, r3
    a8be:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a8c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8c6:	701a      	strb	r2, [r3, #0]
    a8c8:	f24c 3319 	movw	r3, #49945	; 0xc319
    a8cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8d0:	781b      	ldrb	r3, [r3, #0]
    a8d2:	3301      	adds	r3, #1
    a8d4:	b2da      	uxtb	r2, r3
    a8d6:	f24c 3319 	movw	r3, #49945	; 0xc319
    a8da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8de:	701a      	strb	r2, [r3, #0]
    a8e0:	f24c 3319 	movw	r3, #49945	; 0xc319
    a8e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8e8:	781b      	ldrb	r3, [r3, #0]
    a8ea:	2bff      	cmp	r3, #255	; 0xff
    a8ec:	d105      	bne.n	a8fa <send_desired+0xbbe>
    a8ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    a8f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8f6:	2200      	movs	r2, #0
    a8f8:	701a      	strb	r2, [r3, #0]
    a8fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    a8fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a902:	781b      	ldrb	r3, [r3, #0]
    a904:	461a      	mov	r2, r3
    a906:	f240 5374 	movw	r3, #1396	; 0x574
    a90a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a90e:	7899      	ldrb	r1, [r3, #2]
    a910:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a914:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a918:	5499      	strb	r1, [r3, r2]
    a91a:	4b20      	ldr	r3, [pc, #128]	; (a99c <send_desired+0xc60>)
    a91c:	781a      	ldrb	r2, [r3, #0]
    a91e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a922:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a926:	781b      	ldrb	r3, [r3, #0]
    a928:	4413      	add	r3, r2
    a92a:	b2da      	uxtb	r2, r3
    a92c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a930:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a934:	701a      	strb	r2, [r3, #0]
    a936:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a93a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a93e:	781a      	ldrb	r2, [r3, #0]
    a940:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a944:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a948:	781b      	ldrb	r3, [r3, #0]
    a94a:	4413      	add	r3, r2
    a94c:	b2da      	uxtb	r2, r3
    a94e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a952:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a956:	701a      	strb	r2, [r3, #0]
    a958:	f24c 3319 	movw	r3, #49945	; 0xc319
    a95c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a960:	781b      	ldrb	r3, [r3, #0]
    a962:	3301      	adds	r3, #1
    a964:	b2da      	uxtb	r2, r3
    a966:	f24c 3319 	movw	r3, #49945	; 0xc319
    a96a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a96e:	701a      	strb	r2, [r3, #0]
    a970:	f24c 3319 	movw	r3, #49945	; 0xc319
    a974:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a978:	781b      	ldrb	r3, [r3, #0]
    a97a:	2bff      	cmp	r3, #255	; 0xff
    a97c:	d110      	bne.n	a9a0 <send_desired+0xc64>
    a97e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a982:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a986:	2200      	movs	r2, #0
    a988:	701a      	strb	r2, [r3, #0]
    a98a:	e009      	b.n	a9a0 <send_desired+0xc64>
    a98c:	2004c695 	.word	0x2004c695
    a990:	2004c696 	.word	0x2004c696
    a994:	2004c697 	.word	0x2004c697
    a998:	20000575 	.word	0x20000575
    a99c:	20000576 	.word	0x20000576
    a9a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    a9a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9a8:	781b      	ldrb	r3, [r3, #0]
    a9aa:	461a      	mov	r2, r3
    a9ac:	f240 5374 	movw	r3, #1396	; 0x574
    a9b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9b4:	78d9      	ldrb	r1, [r3, #3]
    a9b6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a9ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9be:	5499      	strb	r1, [r3, r2]
    a9c0:	4b79      	ldr	r3, [pc, #484]	; (aba8 <send_desired+0xe6c>)
    a9c2:	781a      	ldrb	r2, [r3, #0]
    a9c4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a9c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9cc:	781b      	ldrb	r3, [r3, #0]
    a9ce:	4413      	add	r3, r2
    a9d0:	b2da      	uxtb	r2, r3
    a9d2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a9d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9da:	701a      	strb	r2, [r3, #0]
    a9dc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a9e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9e4:	781a      	ldrb	r2, [r3, #0]
    a9e6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a9ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9ee:	781b      	ldrb	r3, [r3, #0]
    a9f0:	4413      	add	r3, r2
    a9f2:	b2da      	uxtb	r2, r3
    a9f4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a9f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9fc:	701a      	strb	r2, [r3, #0]
    a9fe:	f24c 3319 	movw	r3, #49945	; 0xc319
    aa02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa06:	781b      	ldrb	r3, [r3, #0]
    aa08:	3301      	adds	r3, #1
    aa0a:	b2da      	uxtb	r2, r3
    aa0c:	f24c 3319 	movw	r3, #49945	; 0xc319
    aa10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa14:	701a      	strb	r2, [r3, #0]
    aa16:	f24c 3319 	movw	r3, #49945	; 0xc319
    aa1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa1e:	781b      	ldrb	r3, [r3, #0]
    aa20:	2bff      	cmp	r3, #255	; 0xff
    aa22:	d105      	bne.n	aa30 <send_desired+0xcf4>
    aa24:	f24c 3319 	movw	r3, #49945	; 0xc319
    aa28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa2c:	2200      	movs	r2, #0
    aa2e:	701a      	strb	r2, [r3, #0]
    aa30:	f24c 3319 	movw	r3, #49945	; 0xc319
    aa34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa38:	781b      	ldrb	r3, [r3, #0]
    aa3a:	461a      	mov	r2, r3
    aa3c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    aa40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa44:	7819      	ldrb	r1, [r3, #0]
    aa46:	f24c 331c 	movw	r3, #49948	; 0xc31c
    aa4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa4e:	5499      	strb	r1, [r3, r2]
    aa50:	f24c 3319 	movw	r3, #49945	; 0xc319
    aa54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa58:	781b      	ldrb	r3, [r3, #0]
    aa5a:	3301      	adds	r3, #1
    aa5c:	b2da      	uxtb	r2, r3
    aa5e:	f24c 3319 	movw	r3, #49945	; 0xc319
    aa62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa66:	701a      	strb	r2, [r3, #0]
    aa68:	f24c 3319 	movw	r3, #49945	; 0xc319
    aa6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa70:	781b      	ldrb	r3, [r3, #0]
    aa72:	2bff      	cmp	r3, #255	; 0xff
    aa74:	d105      	bne.n	aa82 <send_desired+0xd46>
    aa76:	f24c 3319 	movw	r3, #49945	; 0xc319
    aa7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa7e:	2200      	movs	r2, #0
    aa80:	701a      	strb	r2, [r3, #0]
    aa82:	f24c 3319 	movw	r3, #49945	; 0xc319
    aa86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa8a:	781b      	ldrb	r3, [r3, #0]
    aa8c:	461a      	mov	r2, r3
    aa8e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    aa92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa96:	7819      	ldrb	r1, [r3, #0]
    aa98:	f24c 331c 	movw	r3, #49948	; 0xc31c
    aa9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaa0:	5499      	strb	r1, [r3, r2]
    aaa2:	f24c 3319 	movw	r3, #49945	; 0xc319
    aaa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaaa:	781b      	ldrb	r3, [r3, #0]
    aaac:	3301      	adds	r3, #1
    aaae:	b2da      	uxtb	r2, r3
    aab0:	f24c 3319 	movw	r3, #49945	; 0xc319
    aab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aab8:	701a      	strb	r2, [r3, #0]
    aaba:	f24c 3319 	movw	r3, #49945	; 0xc319
    aabe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aac2:	781b      	ldrb	r3, [r3, #0]
    aac4:	2bff      	cmp	r3, #255	; 0xff
    aac6:	d105      	bne.n	aad4 <send_desired+0xd98>
    aac8:	f24c 3319 	movw	r3, #49945	; 0xc319
    aacc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aad0:	2200      	movs	r2, #0
    aad2:	701a      	strb	r2, [r3, #0]
    aad4:	f242 0339 	movw	r3, #8249	; 0x2039
    aad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aadc:	781b      	ldrb	r3, [r3, #0]
    aade:	b2db      	uxtb	r3, r3
    aae0:	f003 0310 	and.w	r3, r3, #16
    aae4:	2b00      	cmp	r3, #0
    aae6:	d15a      	bne.n	ab9e <send_desired+0xe62>
    aae8:	f24c 331a 	movw	r3, #49946	; 0xc31a
    aaec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaf0:	781b      	ldrb	r3, [r3, #0]
    aaf2:	b2db      	uxtb	r3, r3
    aaf4:	461a      	mov	r2, r3
    aaf6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    aafa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aafe:	5c9a      	ldrb	r2, [r3, r2]
    ab00:	f24c 431b 	movw	r3, #50203	; 0xc41b
    ab04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab08:	701a      	strb	r2, [r3, #0]
    ab0a:	f24c 431c 	movw	r3, #50204	; 0xc41c
    ab0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab12:	2200      	movs	r2, #0
    ab14:	701a      	strb	r2, [r3, #0]
    ab16:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ab1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab1e:	781b      	ldrb	r3, [r3, #0]
    ab20:	b2db      	uxtb	r3, r3
    ab22:	3301      	adds	r3, #1
    ab24:	b2da      	uxtb	r2, r3
    ab26:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ab2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab2e:	701a      	strb	r2, [r3, #0]
    ab30:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ab34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab38:	781b      	ldrb	r3, [r3, #0]
    ab3a:	b2db      	uxtb	r3, r3
    ab3c:	2bff      	cmp	r3, #255	; 0xff
    ab3e:	d105      	bne.n	ab4c <send_desired+0xe10>
    ab40:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ab44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab48:	2200      	movs	r2, #0
    ab4a:	701a      	strb	r2, [r3, #0]
    ab4c:	f242 0338 	movw	r3, #8248	; 0x2038
    ab50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab54:	f242 0238 	movw	r2, #8248	; 0x2038
    ab58:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ab5c:	7812      	ldrb	r2, [r2, #0]
    ab5e:	b2d2      	uxtb	r2, r2
    ab60:	f042 0201 	orr.w	r2, r2, #1
    ab64:	b2d2      	uxtb	r2, r2
    ab66:	701a      	strb	r2, [r3, #0]
    ab68:	f242 0339 	movw	r3, #8249	; 0x2039
    ab6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab70:	f242 0239 	movw	r2, #8249	; 0x2039
    ab74:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ab78:	7812      	ldrb	r2, [r2, #0]
    ab7a:	b2d2      	uxtb	r2, r2
    ab7c:	f042 0210 	orr.w	r2, r2, #16
    ab80:	b2d2      	uxtb	r2, r2
    ab82:	701a      	strb	r2, [r3, #0]
    ab84:	e00b      	b.n	ab9e <send_desired+0xe62>
    ab86:	f24c 3318 	movw	r3, #49944	; 0xc318
    ab8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab8e:	781b      	ldrb	r3, [r3, #0]
    ab90:	3301      	adds	r3, #1
    ab92:	b2da      	uxtb	r2, r3
    ab94:	f24c 3318 	movw	r3, #49944	; 0xc318
    ab98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab9c:	701a      	strb	r2, [r3, #0]
}
    ab9e:	46bd      	mov	sp, r7
    aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
    aba4:	4770      	bx	lr
    aba6:	bf00      	nop
    aba8:	20000577 	.word	0x20000577

0000abac <send_bat>:
void send_bat(void){  //2000ms
    abac:	b480      	push	{r7}
    abae:	af00      	add	r7, sp, #0
  if(!boot)
    abb0:	f240 533d 	movw	r3, #1341	; 0x53d
    abb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abb8:	781b      	ldrb	r3, [r3, #0]
    abba:	2b00      	cmp	r3, #0
    abbc:	f040 83af 	bne.w	b31e <send_bat+0x772>
  { if (count % 20 == 8) PERIODIC_SEND_BAT();}
    abc0:	f24c 3311 	movw	r3, #49937	; 0xc311
    abc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abc8:	781a      	ldrb	r2, [r3, #0]
    abca:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    abce:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    abd2:	fba3 1302 	umull	r1, r3, r3, r2
    abd6:	0919      	lsrs	r1, r3, #4
    abd8:	460b      	mov	r3, r1
    abda:	009b      	lsls	r3, r3, #2
    abdc:	440b      	add	r3, r1
    abde:	009b      	lsls	r3, r3, #2
    abe0:	1ad3      	subs	r3, r2, r3
    abe2:	b2db      	uxtb	r3, r3
    abe4:	2b08      	cmp	r3, #8
    abe6:	f040 839a 	bne.w	b31e <send_bat+0x772>
    abea:	f24c 3319 	movw	r3, #49945	; 0xc319
    abee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abf2:	781a      	ldrb	r2, [r3, #0]
    abf4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    abf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abfc:	781b      	ldrb	r3, [r3, #0]
    abfe:	b2db      	uxtb	r3, r3
    ac00:	429a      	cmp	r2, r3
    ac02:	d313      	bcc.n	ac2c <send_bat+0x80>
    ac04:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ac08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac0c:	781b      	ldrb	r3, [r3, #0]
    ac0e:	b2db      	uxtb	r3, r3
    ac10:	461a      	mov	r2, r3
    ac12:	f24c 3319 	movw	r3, #49945	; 0xc319
    ac16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac1a:	781b      	ldrb	r3, [r3, #0]
    ac1c:	1ad3      	subs	r3, r2, r3
    ac1e:	33ff      	adds	r3, #255	; 0xff
    ac20:	2b0c      	cmp	r3, #12
    ac22:	bfd4      	ite	le
    ac24:	2300      	movle	r3, #0
    ac26:	2301      	movgt	r3, #1
    ac28:	b2db      	uxtb	r3, r3
    ac2a:	e011      	b.n	ac50 <send_bat+0xa4>
    ac2c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ac30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac34:	781b      	ldrb	r3, [r3, #0]
    ac36:	b2db      	uxtb	r3, r3
    ac38:	461a      	mov	r2, r3
    ac3a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ac3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac42:	781b      	ldrb	r3, [r3, #0]
    ac44:	1ad3      	subs	r3, r2, r3
    ac46:	2b0c      	cmp	r3, #12
    ac48:	bfd4      	ite	le
    ac4a:	2300      	movle	r3, #0
    ac4c:	2301      	movgt	r3, #1
    ac4e:	b2db      	uxtb	r3, r3
    ac50:	2b00      	cmp	r3, #0
    ac52:	f000 8358 	beq.w	b306 <send_bat+0x75a>
    ac56:	f24c 3319 	movw	r3, #49945	; 0xc319
    ac5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac5e:	781b      	ldrb	r3, [r3, #0]
    ac60:	461a      	mov	r2, r3
    ac62:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ac66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac6a:	2105      	movs	r1, #5
    ac6c:	5499      	strb	r1, [r3, r2]
    ac6e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ac72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac76:	781b      	ldrb	r3, [r3, #0]
    ac78:	3301      	adds	r3, #1
    ac7a:	b2da      	uxtb	r2, r3
    ac7c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ac80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac84:	701a      	strb	r2, [r3, #0]
    ac86:	f24c 3319 	movw	r3, #49945	; 0xc319
    ac8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac8e:	781b      	ldrb	r3, [r3, #0]
    ac90:	2bff      	cmp	r3, #255	; 0xff
    ac92:	d105      	bne.n	aca0 <send_bat+0xf4>
    ac94:	f24c 3319 	movw	r3, #49945	; 0xc319
    ac98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac9c:	2200      	movs	r2, #0
    ac9e:	701a      	strb	r2, [r3, #0]
    aca0:	f24c 3319 	movw	r3, #49945	; 0xc319
    aca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aca8:	781b      	ldrb	r3, [r3, #0]
    acaa:	461a      	mov	r2, r3
    acac:	f24c 331c 	movw	r3, #49948	; 0xc31c
    acb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acb4:	210c      	movs	r1, #12
    acb6:	5499      	strb	r1, [r3, r2]
    acb8:	f24c 3319 	movw	r3, #49945	; 0xc319
    acbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acc0:	781b      	ldrb	r3, [r3, #0]
    acc2:	3301      	adds	r3, #1
    acc4:	b2da      	uxtb	r2, r3
    acc6:	f24c 3319 	movw	r3, #49945	; 0xc319
    acca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acce:	701a      	strb	r2, [r3, #0]
    acd0:	f24c 3319 	movw	r3, #49945	; 0xc319
    acd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acd8:	781b      	ldrb	r3, [r3, #0]
    acda:	2bff      	cmp	r3, #255	; 0xff
    acdc:	d105      	bne.n	acea <send_bat+0x13e>
    acde:	f24c 3319 	movw	r3, #49945	; 0xc319
    ace2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ace6:	2200      	movs	r2, #0
    ace8:	701a      	strb	r2, [r3, #0]
    acea:	f24c 431d 	movw	r3, #50205	; 0xc41d
    acee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acf2:	220c      	movs	r2, #12
    acf4:	701a      	strb	r2, [r3, #0]
    acf6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    acfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acfe:	220c      	movs	r2, #12
    ad00:	701a      	strb	r2, [r3, #0]
    ad02:	f24c 3319 	movw	r3, #49945	; 0xc319
    ad06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad0a:	781b      	ldrb	r3, [r3, #0]
    ad0c:	461a      	mov	r2, r3
    ad0e:	f24c 3302 	movw	r3, #49922	; 0xc302
    ad12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad16:	7819      	ldrb	r1, [r3, #0]
    ad18:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ad1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad20:	5499      	strb	r1, [r3, r2]
    ad22:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ad26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad2a:	781a      	ldrb	r2, [r3, #0]
    ad2c:	f24c 3302 	movw	r3, #49922	; 0xc302
    ad30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad34:	781b      	ldrb	r3, [r3, #0]
    ad36:	4413      	add	r3, r2
    ad38:	b2da      	uxtb	r2, r3
    ad3a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ad3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad42:	701a      	strb	r2, [r3, #0]
    ad44:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ad48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad4c:	781a      	ldrb	r2, [r3, #0]
    ad4e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ad52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad56:	781b      	ldrb	r3, [r3, #0]
    ad58:	4413      	add	r3, r2
    ad5a:	b2da      	uxtb	r2, r3
    ad5c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ad60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad64:	701a      	strb	r2, [r3, #0]
    ad66:	f24c 3319 	movw	r3, #49945	; 0xc319
    ad6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad6e:	781b      	ldrb	r3, [r3, #0]
    ad70:	3301      	adds	r3, #1
    ad72:	b2da      	uxtb	r2, r3
    ad74:	f24c 3319 	movw	r3, #49945	; 0xc319
    ad78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad7c:	701a      	strb	r2, [r3, #0]
    ad7e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ad82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad86:	781b      	ldrb	r3, [r3, #0]
    ad88:	2bff      	cmp	r3, #255	; 0xff
    ad8a:	d105      	bne.n	ad98 <send_bat+0x1ec>
    ad8c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ad90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad94:	2200      	movs	r2, #0
    ad96:	701a      	strb	r2, [r3, #0]
    ad98:	f24c 3319 	movw	r3, #49945	; 0xc319
    ad9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ada0:	781b      	ldrb	r3, [r3, #0]
    ada2:	461a      	mov	r2, r3
    ada4:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
    ada8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adac:	7819      	ldrb	r1, [r3, #0]
    adae:	f24c 331c 	movw	r3, #49948	; 0xc31c
    adb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adb6:	5499      	strb	r1, [r3, r2]
    adb8:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
    adbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adc0:	781a      	ldrb	r2, [r3, #0]
    adc2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    adc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adca:	781b      	ldrb	r3, [r3, #0]
    adcc:	4413      	add	r3, r2
    adce:	b2da      	uxtb	r2, r3
    add0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    add4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    add8:	701a      	strb	r2, [r3, #0]
    adda:	f24c 431e 	movw	r3, #50206	; 0xc41e
    adde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ade2:	781a      	ldrb	r2, [r3, #0]
    ade4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ade8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adec:	781b      	ldrb	r3, [r3, #0]
    adee:	4413      	add	r3, r2
    adf0:	b2da      	uxtb	r2, r3
    adf2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    adf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adfa:	701a      	strb	r2, [r3, #0]
    adfc:	f24c 3319 	movw	r3, #49945	; 0xc319
    ae00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae04:	781b      	ldrb	r3, [r3, #0]
    ae06:	3301      	adds	r3, #1
    ae08:	b2da      	uxtb	r2, r3
    ae0a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ae0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae12:	701a      	strb	r2, [r3, #0]
    ae14:	f24c 3319 	movw	r3, #49945	; 0xc319
    ae18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae1c:	781b      	ldrb	r3, [r3, #0]
    ae1e:	2bff      	cmp	r3, #255	; 0xff
    ae20:	d105      	bne.n	ae2e <send_bat+0x282>
    ae22:	f24c 3319 	movw	r3, #49945	; 0xc319
    ae26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae2a:	2200      	movs	r2, #0
    ae2c:	701a      	strb	r2, [r3, #0]
    ae2e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ae32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae36:	781b      	ldrb	r3, [r3, #0]
    ae38:	461a      	mov	r2, r3
    ae3a:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
    ae3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae42:	7859      	ldrb	r1, [r3, #1]
    ae44:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ae48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae4c:	5499      	strb	r1, [r3, r2]
    ae4e:	4bd5      	ldr	r3, [pc, #852]	; (b1a4 <send_bat+0x5f8>)
    ae50:	781a      	ldrb	r2, [r3, #0]
    ae52:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ae56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae5a:	781b      	ldrb	r3, [r3, #0]
    ae5c:	4413      	add	r3, r2
    ae5e:	b2da      	uxtb	r2, r3
    ae60:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ae64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae68:	701a      	strb	r2, [r3, #0]
    ae6a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ae6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae72:	781a      	ldrb	r2, [r3, #0]
    ae74:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ae78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae7c:	781b      	ldrb	r3, [r3, #0]
    ae7e:	4413      	add	r3, r2
    ae80:	b2da      	uxtb	r2, r3
    ae82:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ae86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae8a:	701a      	strb	r2, [r3, #0]
    ae8c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ae90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae94:	781b      	ldrb	r3, [r3, #0]
    ae96:	3301      	adds	r3, #1
    ae98:	b2da      	uxtb	r2, r3
    ae9a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ae9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aea2:	701a      	strb	r2, [r3, #0]
    aea4:	f24c 3319 	movw	r3, #49945	; 0xc319
    aea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeac:	781b      	ldrb	r3, [r3, #0]
    aeae:	2bff      	cmp	r3, #255	; 0xff
    aeb0:	d105      	bne.n	aebe <send_bat+0x312>
    aeb2:	f24c 3319 	movw	r3, #49945	; 0xc319
    aeb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeba:	2200      	movs	r2, #0
    aebc:	701a      	strb	r2, [r3, #0]
    aebe:	f24c 3319 	movw	r3, #49945	; 0xc319
    aec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aec6:	781b      	ldrb	r3, [r3, #0]
    aec8:	461a      	mov	r2, r3
    aeca:	f24c 3305 	movw	r3, #49925	; 0xc305
    aece:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aed2:	7819      	ldrb	r1, [r3, #0]
    aed4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    aed8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aedc:	5499      	strb	r1, [r3, r2]
    aede:	f24c 3305 	movw	r3, #49925	; 0xc305
    aee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aee6:	781a      	ldrb	r2, [r3, #0]
    aee8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    aeec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aef0:	781b      	ldrb	r3, [r3, #0]
    aef2:	4413      	add	r3, r2
    aef4:	b2da      	uxtb	r2, r3
    aef6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    aefa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aefe:	701a      	strb	r2, [r3, #0]
    af00:	f24c 431e 	movw	r3, #50206	; 0xc41e
    af04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af08:	781a      	ldrb	r2, [r3, #0]
    af0a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    af0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af12:	781b      	ldrb	r3, [r3, #0]
    af14:	4413      	add	r3, r2
    af16:	b2da      	uxtb	r2, r3
    af18:	f24c 431e 	movw	r3, #50206	; 0xc41e
    af1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af20:	701a      	strb	r2, [r3, #0]
    af22:	f24c 3319 	movw	r3, #49945	; 0xc319
    af26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af2a:	781b      	ldrb	r3, [r3, #0]
    af2c:	3301      	adds	r3, #1
    af2e:	b2da      	uxtb	r2, r3
    af30:	f24c 3319 	movw	r3, #49945	; 0xc319
    af34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af38:	701a      	strb	r2, [r3, #0]
    af3a:	f24c 3319 	movw	r3, #49945	; 0xc319
    af3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af42:	781b      	ldrb	r3, [r3, #0]
    af44:	2bff      	cmp	r3, #255	; 0xff
    af46:	d105      	bne.n	af54 <send_bat+0x3a8>
    af48:	f24c 3319 	movw	r3, #49945	; 0xc319
    af4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af50:	2200      	movs	r2, #0
    af52:	701a      	strb	r2, [r3, #0]
    af54:	f24c 3319 	movw	r3, #49945	; 0xc319
    af58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af5c:	781b      	ldrb	r3, [r3, #0]
    af5e:	461a      	mov	r2, r3
    af60:	f24c 6386 	movw	r3, #50822	; 0xc686
    af64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af68:	7819      	ldrb	r1, [r3, #0]
    af6a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    af6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af72:	5499      	strb	r1, [r3, r2]
    af74:	f24c 6386 	movw	r3, #50822	; 0xc686
    af78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af7c:	781a      	ldrb	r2, [r3, #0]
    af7e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    af82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af86:	781b      	ldrb	r3, [r3, #0]
    af88:	4413      	add	r3, r2
    af8a:	b2da      	uxtb	r2, r3
    af8c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    af90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af94:	701a      	strb	r2, [r3, #0]
    af96:	f24c 431e 	movw	r3, #50206	; 0xc41e
    af9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af9e:	781a      	ldrb	r2, [r3, #0]
    afa0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    afa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afa8:	781b      	ldrb	r3, [r3, #0]
    afaa:	4413      	add	r3, r2
    afac:	b2da      	uxtb	r2, r3
    afae:	f24c 431e 	movw	r3, #50206	; 0xc41e
    afb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afb6:	701a      	strb	r2, [r3, #0]
    afb8:	f24c 3319 	movw	r3, #49945	; 0xc319
    afbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afc0:	781b      	ldrb	r3, [r3, #0]
    afc2:	3301      	adds	r3, #1
    afc4:	b2da      	uxtb	r2, r3
    afc6:	f24c 3319 	movw	r3, #49945	; 0xc319
    afca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afce:	701a      	strb	r2, [r3, #0]
    afd0:	f24c 3319 	movw	r3, #49945	; 0xc319
    afd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afd8:	781b      	ldrb	r3, [r3, #0]
    afda:	2bff      	cmp	r3, #255	; 0xff
    afdc:	d105      	bne.n	afea <send_bat+0x43e>
    afde:	f24c 3319 	movw	r3, #49945	; 0xc319
    afe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afe6:	2200      	movs	r2, #0
    afe8:	701a      	strb	r2, [r3, #0]
    afea:	f24c 3319 	movw	r3, #49945	; 0xc319
    afee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aff2:	781b      	ldrb	r3, [r3, #0]
    aff4:	461a      	mov	r2, r3
    aff6:	f24c 6386 	movw	r3, #50822	; 0xc686
    affa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    affe:	7859      	ldrb	r1, [r3, #1]
    b000:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b004:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b008:	5499      	strb	r1, [r3, r2]
    b00a:	4b67      	ldr	r3, [pc, #412]	; (b1a8 <send_bat+0x5fc>)
    b00c:	781a      	ldrb	r2, [r3, #0]
    b00e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b012:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b016:	781b      	ldrb	r3, [r3, #0]
    b018:	4413      	add	r3, r2
    b01a:	b2da      	uxtb	r2, r3
    b01c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b020:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b024:	701a      	strb	r2, [r3, #0]
    b026:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b02a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b02e:	781a      	ldrb	r2, [r3, #0]
    b030:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b034:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b038:	781b      	ldrb	r3, [r3, #0]
    b03a:	4413      	add	r3, r2
    b03c:	b2da      	uxtb	r2, r3
    b03e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b042:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b046:	701a      	strb	r2, [r3, #0]
    b048:	f24c 3319 	movw	r3, #49945	; 0xc319
    b04c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b050:	781b      	ldrb	r3, [r3, #0]
    b052:	3301      	adds	r3, #1
    b054:	b2da      	uxtb	r2, r3
    b056:	f24c 3319 	movw	r3, #49945	; 0xc319
    b05a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b05e:	701a      	strb	r2, [r3, #0]
    b060:	f24c 3319 	movw	r3, #49945	; 0xc319
    b064:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b068:	781b      	ldrb	r3, [r3, #0]
    b06a:	2bff      	cmp	r3, #255	; 0xff
    b06c:	d105      	bne.n	b07a <send_bat+0x4ce>
    b06e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b072:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b076:	2200      	movs	r2, #0
    b078:	701a      	strb	r2, [r3, #0]
    b07a:	f24c 3319 	movw	r3, #49945	; 0xc319
    b07e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b082:	781b      	ldrb	r3, [r3, #0]
    b084:	461a      	mov	r2, r3
    b086:	f24c 6384 	movw	r3, #50820	; 0xc684
    b08a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b08e:	7819      	ldrb	r1, [r3, #0]
    b090:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b094:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b098:	5499      	strb	r1, [r3, r2]
    b09a:	f24c 6384 	movw	r3, #50820	; 0xc684
    b09e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0a2:	781a      	ldrb	r2, [r3, #0]
    b0a4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b0a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0ac:	781b      	ldrb	r3, [r3, #0]
    b0ae:	4413      	add	r3, r2
    b0b0:	b2da      	uxtb	r2, r3
    b0b2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b0b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0ba:	701a      	strb	r2, [r3, #0]
    b0bc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b0c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0c4:	781a      	ldrb	r2, [r3, #0]
    b0c6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b0ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0ce:	781b      	ldrb	r3, [r3, #0]
    b0d0:	4413      	add	r3, r2
    b0d2:	b2da      	uxtb	r2, r3
    b0d4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b0d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0dc:	701a      	strb	r2, [r3, #0]
    b0de:	f24c 3319 	movw	r3, #49945	; 0xc319
    b0e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0e6:	781b      	ldrb	r3, [r3, #0]
    b0e8:	3301      	adds	r3, #1
    b0ea:	b2da      	uxtb	r2, r3
    b0ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    b0f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0f4:	701a      	strb	r2, [r3, #0]
    b0f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    b0fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0fe:	781b      	ldrb	r3, [r3, #0]
    b100:	2bff      	cmp	r3, #255	; 0xff
    b102:	d105      	bne.n	b110 <send_bat+0x564>
    b104:	f24c 3319 	movw	r3, #49945	; 0xc319
    b108:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b10c:	2200      	movs	r2, #0
    b10e:	701a      	strb	r2, [r3, #0]
    b110:	f24c 3319 	movw	r3, #49945	; 0xc319
    b114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b118:	781b      	ldrb	r3, [r3, #0]
    b11a:	461a      	mov	r2, r3
    b11c:	f24c 6384 	movw	r3, #50820	; 0xc684
    b120:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b124:	7859      	ldrb	r1, [r3, #1]
    b126:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b12a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b12e:	5499      	strb	r1, [r3, r2]
    b130:	4b1e      	ldr	r3, [pc, #120]	; (b1ac <send_bat+0x600>)
    b132:	781a      	ldrb	r2, [r3, #0]
    b134:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b138:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b13c:	781b      	ldrb	r3, [r3, #0]
    b13e:	4413      	add	r3, r2
    b140:	b2da      	uxtb	r2, r3
    b142:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b146:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b14a:	701a      	strb	r2, [r3, #0]
    b14c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b150:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b154:	781a      	ldrb	r2, [r3, #0]
    b156:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b15a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b15e:	781b      	ldrb	r3, [r3, #0]
    b160:	4413      	add	r3, r2
    b162:	b2da      	uxtb	r2, r3
    b164:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b168:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b16c:	701a      	strb	r2, [r3, #0]
    b16e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b172:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b176:	781b      	ldrb	r3, [r3, #0]
    b178:	3301      	adds	r3, #1
    b17a:	b2da      	uxtb	r2, r3
    b17c:	f24c 3319 	movw	r3, #49945	; 0xc319
    b180:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b184:	701a      	strb	r2, [r3, #0]
    b186:	f24c 3319 	movw	r3, #49945	; 0xc319
    b18a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b18e:	781b      	ldrb	r3, [r3, #0]
    b190:	2bff      	cmp	r3, #255	; 0xff
    b192:	d10d      	bne.n	b1b0 <send_bat+0x604>
    b194:	f24c 3319 	movw	r3, #49945	; 0xc319
    b198:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b19c:	2200      	movs	r2, #0
    b19e:	701a      	strb	r2, [r3, #0]
    b1a0:	e006      	b.n	b1b0 <send_bat+0x604>
    b1a2:	bf00      	nop
    b1a4:	2004c8fd 	.word	0x2004c8fd
    b1a8:	2004c687 	.word	0x2004c687
    b1ac:	2004c685 	.word	0x2004c685
    b1b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    b1b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1b8:	781b      	ldrb	r3, [r3, #0]
    b1ba:	461a      	mov	r2, r3
    b1bc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b1c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1c4:	7819      	ldrb	r1, [r3, #0]
    b1c6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b1ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1ce:	5499      	strb	r1, [r3, r2]
    b1d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    b1d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1d8:	781b      	ldrb	r3, [r3, #0]
    b1da:	3301      	adds	r3, #1
    b1dc:	b2da      	uxtb	r2, r3
    b1de:	f24c 3319 	movw	r3, #49945	; 0xc319
    b1e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1e6:	701a      	strb	r2, [r3, #0]
    b1e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    b1ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1f0:	781b      	ldrb	r3, [r3, #0]
    b1f2:	2bff      	cmp	r3, #255	; 0xff
    b1f4:	d105      	bne.n	b202 <send_bat+0x656>
    b1f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    b1fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1fe:	2200      	movs	r2, #0
    b200:	701a      	strb	r2, [r3, #0]
    b202:	f24c 3319 	movw	r3, #49945	; 0xc319
    b206:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b20a:	781b      	ldrb	r3, [r3, #0]
    b20c:	461a      	mov	r2, r3
    b20e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b212:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b216:	7819      	ldrb	r1, [r3, #0]
    b218:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b21c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b220:	5499      	strb	r1, [r3, r2]
    b222:	f24c 3319 	movw	r3, #49945	; 0xc319
    b226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b22a:	781b      	ldrb	r3, [r3, #0]
    b22c:	3301      	adds	r3, #1
    b22e:	b2da      	uxtb	r2, r3
    b230:	f24c 3319 	movw	r3, #49945	; 0xc319
    b234:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b238:	701a      	strb	r2, [r3, #0]
    b23a:	f24c 3319 	movw	r3, #49945	; 0xc319
    b23e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b242:	781b      	ldrb	r3, [r3, #0]
    b244:	2bff      	cmp	r3, #255	; 0xff
    b246:	d105      	bne.n	b254 <send_bat+0x6a8>
    b248:	f24c 3319 	movw	r3, #49945	; 0xc319
    b24c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b250:	2200      	movs	r2, #0
    b252:	701a      	strb	r2, [r3, #0]
    b254:	f242 0339 	movw	r3, #8249	; 0x2039
    b258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b25c:	781b      	ldrb	r3, [r3, #0]
    b25e:	b2db      	uxtb	r3, r3
    b260:	f003 0310 	and.w	r3, r3, #16
    b264:	2b00      	cmp	r3, #0
    b266:	d15a      	bne.n	b31e <send_bat+0x772>
    b268:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b26c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b270:	781b      	ldrb	r3, [r3, #0]
    b272:	b2db      	uxtb	r3, r3
    b274:	461a      	mov	r2, r3
    b276:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b27a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b27e:	5c9a      	ldrb	r2, [r3, r2]
    b280:	f24c 431b 	movw	r3, #50203	; 0xc41b
    b284:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b288:	701a      	strb	r2, [r3, #0]
    b28a:	f24c 431c 	movw	r3, #50204	; 0xc41c
    b28e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b292:	2200      	movs	r2, #0
    b294:	701a      	strb	r2, [r3, #0]
    b296:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b29a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b29e:	781b      	ldrb	r3, [r3, #0]
    b2a0:	b2db      	uxtb	r3, r3
    b2a2:	3301      	adds	r3, #1
    b2a4:	b2da      	uxtb	r2, r3
    b2a6:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b2aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2ae:	701a      	strb	r2, [r3, #0]
    b2b0:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b2b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2b8:	781b      	ldrb	r3, [r3, #0]
    b2ba:	b2db      	uxtb	r3, r3
    b2bc:	2bff      	cmp	r3, #255	; 0xff
    b2be:	d105      	bne.n	b2cc <send_bat+0x720>
    b2c0:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b2c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2c8:	2200      	movs	r2, #0
    b2ca:	701a      	strb	r2, [r3, #0]
    b2cc:	f242 0338 	movw	r3, #8248	; 0x2038
    b2d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2d4:	f242 0238 	movw	r2, #8248	; 0x2038
    b2d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b2dc:	7812      	ldrb	r2, [r2, #0]
    b2de:	b2d2      	uxtb	r2, r2
    b2e0:	f042 0201 	orr.w	r2, r2, #1
    b2e4:	b2d2      	uxtb	r2, r2
    b2e6:	701a      	strb	r2, [r3, #0]
    b2e8:	f242 0339 	movw	r3, #8249	; 0x2039
    b2ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2f0:	f242 0239 	movw	r2, #8249	; 0x2039
    b2f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b2f8:	7812      	ldrb	r2, [r2, #0]
    b2fa:	b2d2      	uxtb	r2, r2
    b2fc:	f042 0210 	orr.w	r2, r2, #16
    b300:	b2d2      	uxtb	r2, r2
    b302:	701a      	strb	r2, [r3, #0]
    b304:	e00b      	b.n	b31e <send_bat+0x772>
    b306:	f24c 3318 	movw	r3, #49944	; 0xc318
    b30a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b30e:	781b      	ldrb	r3, [r3, #0]
    b310:	3301      	adds	r3, #1
    b312:	b2da      	uxtb	r2, r3
    b314:	f24c 3318 	movw	r3, #49944	; 0xc318
    b318:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b31c:	701a      	strb	r2, [r3, #0]
}
    b31e:	46bd      	mov	sp, r7
    b320:	f85d 7b04 	ldr.w	r7, [sp], #4
    b324:	4770      	bx	lr
    b326:	bf00      	nop

0000b328 <send_climb>:
void send_climb(void){  //2000ms
    b328:	b480      	push	{r7}
    b32a:	af00      	add	r7, sp, #0
  if(!boot)
    b32c:	f240 533d 	movw	r3, #1341	; 0x53d
    b330:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b334:	781b      	ldrb	r3, [r3, #0]
    b336:	2b00      	cmp	r3, #0
    b338:	f040 8569 	bne.w	be0e <send_climb+0xae6>
  { if (count % 20 == 18) PERIODIC_SEND_CLIMB_PID();}
    b33c:	f24c 3311 	movw	r3, #49937	; 0xc311
    b340:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b344:	781a      	ldrb	r2, [r3, #0]
    b346:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    b34a:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    b34e:	fba3 1302 	umull	r1, r3, r3, r2
    b352:	0919      	lsrs	r1, r3, #4
    b354:	460b      	mov	r3, r1
    b356:	009b      	lsls	r3, r3, #2
    b358:	440b      	add	r3, r1
    b35a:	009b      	lsls	r3, r3, #2
    b35c:	1ad3      	subs	r3, r2, r3
    b35e:	b2db      	uxtb	r3, r3
    b360:	2b12      	cmp	r3, #18
    b362:	f040 8554 	bne.w	be0e <send_climb+0xae6>
    b366:	f24c 3319 	movw	r3, #49945	; 0xc319
    b36a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b36e:	781a      	ldrb	r2, [r3, #0]
    b370:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b374:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b378:	781b      	ldrb	r3, [r3, #0]
    b37a:	b2db      	uxtb	r3, r3
    b37c:	429a      	cmp	r2, r3
    b37e:	d313      	bcc.n	b3a8 <send_climb+0x80>
    b380:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b384:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b388:	781b      	ldrb	r3, [r3, #0]
    b38a:	b2db      	uxtb	r3, r3
    b38c:	461a      	mov	r2, r3
    b38e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b392:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b396:	781b      	ldrb	r3, [r3, #0]
    b398:	1ad3      	subs	r3, r2, r3
    b39a:	33ff      	adds	r3, #255	; 0xff
    b39c:	2b12      	cmp	r3, #18
    b39e:	bfd4      	ite	le
    b3a0:	2300      	movle	r3, #0
    b3a2:	2301      	movgt	r3, #1
    b3a4:	b2db      	uxtb	r3, r3
    b3a6:	e011      	b.n	b3cc <send_climb+0xa4>
    b3a8:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b3ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3b0:	781b      	ldrb	r3, [r3, #0]
    b3b2:	b2db      	uxtb	r3, r3
    b3b4:	461a      	mov	r2, r3
    b3b6:	f24c 3319 	movw	r3, #49945	; 0xc319
    b3ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3be:	781b      	ldrb	r3, [r3, #0]
    b3c0:	1ad3      	subs	r3, r2, r3
    b3c2:	2b12      	cmp	r3, #18
    b3c4:	bfd4      	ite	le
    b3c6:	2300      	movle	r3, #0
    b3c8:	2301      	movgt	r3, #1
    b3ca:	b2db      	uxtb	r3, r3
    b3cc:	2b00      	cmp	r3, #0
    b3ce:	f000 8512 	beq.w	bdf6 <send_climb+0xace>
    b3d2:	f24c 3319 	movw	r3, #49945	; 0xc319
    b3d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3da:	781b      	ldrb	r3, [r3, #0]
    b3dc:	461a      	mov	r2, r3
    b3de:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b3e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3e6:	2105      	movs	r1, #5
    b3e8:	5499      	strb	r1, [r3, r2]
    b3ea:	f24c 3319 	movw	r3, #49945	; 0xc319
    b3ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3f2:	781b      	ldrb	r3, [r3, #0]
    b3f4:	3301      	adds	r3, #1
    b3f6:	b2da      	uxtb	r2, r3
    b3f8:	f24c 3319 	movw	r3, #49945	; 0xc319
    b3fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b400:	701a      	strb	r2, [r3, #0]
    b402:	f24c 3319 	movw	r3, #49945	; 0xc319
    b406:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b40a:	781b      	ldrb	r3, [r3, #0]
    b40c:	2bff      	cmp	r3, #255	; 0xff
    b40e:	d105      	bne.n	b41c <send_climb+0xf4>
    b410:	f24c 3319 	movw	r3, #49945	; 0xc319
    b414:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b418:	2200      	movs	r2, #0
    b41a:	701a      	strb	r2, [r3, #0]
    b41c:	f24c 3319 	movw	r3, #49945	; 0xc319
    b420:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b424:	781b      	ldrb	r3, [r3, #0]
    b426:	461a      	mov	r2, r3
    b428:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b42c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b430:	210e      	movs	r1, #14
    b432:	5499      	strb	r1, [r3, r2]
    b434:	f24c 3319 	movw	r3, #49945	; 0xc319
    b438:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b43c:	781b      	ldrb	r3, [r3, #0]
    b43e:	3301      	adds	r3, #1
    b440:	b2da      	uxtb	r2, r3
    b442:	f24c 3319 	movw	r3, #49945	; 0xc319
    b446:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b44a:	701a      	strb	r2, [r3, #0]
    b44c:	f24c 3319 	movw	r3, #49945	; 0xc319
    b450:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b454:	781b      	ldrb	r3, [r3, #0]
    b456:	2bff      	cmp	r3, #255	; 0xff
    b458:	d105      	bne.n	b466 <send_climb+0x13e>
    b45a:	f24c 3319 	movw	r3, #49945	; 0xc319
    b45e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b462:	2200      	movs	r2, #0
    b464:	701a      	strb	r2, [r3, #0]
    b466:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b46a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b46e:	220e      	movs	r2, #14
    b470:	701a      	strb	r2, [r3, #0]
    b472:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b476:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b47a:	220e      	movs	r2, #14
    b47c:	701a      	strb	r2, [r3, #0]
    b47e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b482:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b486:	781b      	ldrb	r3, [r3, #0]
    b488:	461a      	mov	r2, r3
    b48a:	f24c 634c 	movw	r3, #50764	; 0xc64c
    b48e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b492:	7819      	ldrb	r1, [r3, #0]
    b494:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b498:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b49c:	5499      	strb	r1, [r3, r2]
    b49e:	f24c 634c 	movw	r3, #50764	; 0xc64c
    b4a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4a6:	781a      	ldrb	r2, [r3, #0]
    b4a8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b4ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4b0:	781b      	ldrb	r3, [r3, #0]
    b4b2:	4413      	add	r3, r2
    b4b4:	b2da      	uxtb	r2, r3
    b4b6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b4ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4be:	701a      	strb	r2, [r3, #0]
    b4c0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b4c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4c8:	781a      	ldrb	r2, [r3, #0]
    b4ca:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b4ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4d2:	781b      	ldrb	r3, [r3, #0]
    b4d4:	4413      	add	r3, r2
    b4d6:	b2da      	uxtb	r2, r3
    b4d8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b4dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4e0:	701a      	strb	r2, [r3, #0]
    b4e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    b4e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4ea:	781b      	ldrb	r3, [r3, #0]
    b4ec:	3301      	adds	r3, #1
    b4ee:	b2da      	uxtb	r2, r3
    b4f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    b4f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4f8:	701a      	strb	r2, [r3, #0]
    b4fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    b4fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b502:	781b      	ldrb	r3, [r3, #0]
    b504:	2bff      	cmp	r3, #255	; 0xff
    b506:	d105      	bne.n	b514 <send_climb+0x1ec>
    b508:	f24c 3319 	movw	r3, #49945	; 0xc319
    b50c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b510:	2200      	movs	r2, #0
    b512:	701a      	strb	r2, [r3, #0]
    b514:	f24c 3319 	movw	r3, #49945	; 0xc319
    b518:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b51c:	781b      	ldrb	r3, [r3, #0]
    b51e:	461a      	mov	r2, r3
    b520:	f24c 634c 	movw	r3, #50764	; 0xc64c
    b524:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b528:	7859      	ldrb	r1, [r3, #1]
    b52a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b52e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b532:	5499      	strb	r1, [r3, r2]
    b534:	4bd3      	ldr	r3, [pc, #844]	; (b884 <send_climb+0x55c>)
    b536:	781a      	ldrb	r2, [r3, #0]
    b538:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b53c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b540:	781b      	ldrb	r3, [r3, #0]
    b542:	4413      	add	r3, r2
    b544:	b2da      	uxtb	r2, r3
    b546:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b54a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b54e:	701a      	strb	r2, [r3, #0]
    b550:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b554:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b558:	781a      	ldrb	r2, [r3, #0]
    b55a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b55e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b562:	781b      	ldrb	r3, [r3, #0]
    b564:	4413      	add	r3, r2
    b566:	b2da      	uxtb	r2, r3
    b568:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b56c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b570:	701a      	strb	r2, [r3, #0]
    b572:	f24c 3319 	movw	r3, #49945	; 0xc319
    b576:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b57a:	781b      	ldrb	r3, [r3, #0]
    b57c:	3301      	adds	r3, #1
    b57e:	b2da      	uxtb	r2, r3
    b580:	f24c 3319 	movw	r3, #49945	; 0xc319
    b584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b588:	701a      	strb	r2, [r3, #0]
    b58a:	f24c 3319 	movw	r3, #49945	; 0xc319
    b58e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b592:	781b      	ldrb	r3, [r3, #0]
    b594:	2bff      	cmp	r3, #255	; 0xff
    b596:	d105      	bne.n	b5a4 <send_climb+0x27c>
    b598:	f24c 3319 	movw	r3, #49945	; 0xc319
    b59c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5a0:	2200      	movs	r2, #0
    b5a2:	701a      	strb	r2, [r3, #0]
    b5a4:	f24c 3319 	movw	r3, #49945	; 0xc319
    b5a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5ac:	781b      	ldrb	r3, [r3, #0]
    b5ae:	461a      	mov	r2, r3
    b5b0:	f24c 6360 	movw	r3, #50784	; 0xc660
    b5b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5b8:	7819      	ldrb	r1, [r3, #0]
    b5ba:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b5be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5c2:	5499      	strb	r1, [r3, r2]
    b5c4:	f24c 6360 	movw	r3, #50784	; 0xc660
    b5c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5cc:	781a      	ldrb	r2, [r3, #0]
    b5ce:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b5d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5d6:	781b      	ldrb	r3, [r3, #0]
    b5d8:	4413      	add	r3, r2
    b5da:	b2da      	uxtb	r2, r3
    b5dc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b5e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5e4:	701a      	strb	r2, [r3, #0]
    b5e6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b5ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5ee:	781a      	ldrb	r2, [r3, #0]
    b5f0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b5f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5f8:	781b      	ldrb	r3, [r3, #0]
    b5fa:	4413      	add	r3, r2
    b5fc:	b2da      	uxtb	r2, r3
    b5fe:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b602:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b606:	701a      	strb	r2, [r3, #0]
    b608:	f24c 3319 	movw	r3, #49945	; 0xc319
    b60c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b610:	781b      	ldrb	r3, [r3, #0]
    b612:	3301      	adds	r3, #1
    b614:	b2da      	uxtb	r2, r3
    b616:	f24c 3319 	movw	r3, #49945	; 0xc319
    b61a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b61e:	701a      	strb	r2, [r3, #0]
    b620:	f24c 3319 	movw	r3, #49945	; 0xc319
    b624:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b628:	781b      	ldrb	r3, [r3, #0]
    b62a:	2bff      	cmp	r3, #255	; 0xff
    b62c:	d105      	bne.n	b63a <send_climb+0x312>
    b62e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b636:	2200      	movs	r2, #0
    b638:	701a      	strb	r2, [r3, #0]
    b63a:	f24c 3319 	movw	r3, #49945	; 0xc319
    b63e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b642:	781b      	ldrb	r3, [r3, #0]
    b644:	461a      	mov	r2, r3
    b646:	f24c 6360 	movw	r3, #50784	; 0xc660
    b64a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b64e:	7859      	ldrb	r1, [r3, #1]
    b650:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b658:	5499      	strb	r1, [r3, r2]
    b65a:	4b8b      	ldr	r3, [pc, #556]	; (b888 <send_climb+0x560>)
    b65c:	781a      	ldrb	r2, [r3, #0]
    b65e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b662:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b666:	781b      	ldrb	r3, [r3, #0]
    b668:	4413      	add	r3, r2
    b66a:	b2da      	uxtb	r2, r3
    b66c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b670:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b674:	701a      	strb	r2, [r3, #0]
    b676:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b67a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b67e:	781a      	ldrb	r2, [r3, #0]
    b680:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b684:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b688:	781b      	ldrb	r3, [r3, #0]
    b68a:	4413      	add	r3, r2
    b68c:	b2da      	uxtb	r2, r3
    b68e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b696:	701a      	strb	r2, [r3, #0]
    b698:	f24c 3319 	movw	r3, #49945	; 0xc319
    b69c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6a0:	781b      	ldrb	r3, [r3, #0]
    b6a2:	3301      	adds	r3, #1
    b6a4:	b2da      	uxtb	r2, r3
    b6a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    b6aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6ae:	701a      	strb	r2, [r3, #0]
    b6b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    b6b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6b8:	781b      	ldrb	r3, [r3, #0]
    b6ba:	2bff      	cmp	r3, #255	; 0xff
    b6bc:	d105      	bne.n	b6ca <send_climb+0x3a2>
    b6be:	f24c 3319 	movw	r3, #49945	; 0xc319
    b6c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6c6:	2200      	movs	r2, #0
    b6c8:	701a      	strb	r2, [r3, #0]
    b6ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    b6ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6d2:	781b      	ldrb	r3, [r3, #0]
    b6d4:	461a      	mov	r2, r3
    b6d6:	f24c 6360 	movw	r3, #50784	; 0xc660
    b6da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6de:	7899      	ldrb	r1, [r3, #2]
    b6e0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b6e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6e8:	5499      	strb	r1, [r3, r2]
    b6ea:	4b68      	ldr	r3, [pc, #416]	; (b88c <send_climb+0x564>)
    b6ec:	781a      	ldrb	r2, [r3, #0]
    b6ee:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b6f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6f6:	781b      	ldrb	r3, [r3, #0]
    b6f8:	4413      	add	r3, r2
    b6fa:	b2da      	uxtb	r2, r3
    b6fc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b704:	701a      	strb	r2, [r3, #0]
    b706:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b70a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b70e:	781a      	ldrb	r2, [r3, #0]
    b710:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b714:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b718:	781b      	ldrb	r3, [r3, #0]
    b71a:	4413      	add	r3, r2
    b71c:	b2da      	uxtb	r2, r3
    b71e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b722:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b726:	701a      	strb	r2, [r3, #0]
    b728:	f24c 3319 	movw	r3, #49945	; 0xc319
    b72c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b730:	781b      	ldrb	r3, [r3, #0]
    b732:	3301      	adds	r3, #1
    b734:	b2da      	uxtb	r2, r3
    b736:	f24c 3319 	movw	r3, #49945	; 0xc319
    b73a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b73e:	701a      	strb	r2, [r3, #0]
    b740:	f24c 3319 	movw	r3, #49945	; 0xc319
    b744:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b748:	781b      	ldrb	r3, [r3, #0]
    b74a:	2bff      	cmp	r3, #255	; 0xff
    b74c:	d105      	bne.n	b75a <send_climb+0x432>
    b74e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b756:	2200      	movs	r2, #0
    b758:	701a      	strb	r2, [r3, #0]
    b75a:	f24c 3319 	movw	r3, #49945	; 0xc319
    b75e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b762:	781b      	ldrb	r3, [r3, #0]
    b764:	461a      	mov	r2, r3
    b766:	f24c 6360 	movw	r3, #50784	; 0xc660
    b76a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b76e:	78d9      	ldrb	r1, [r3, #3]
    b770:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b774:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b778:	5499      	strb	r1, [r3, r2]
    b77a:	4b45      	ldr	r3, [pc, #276]	; (b890 <send_climb+0x568>)
    b77c:	781a      	ldrb	r2, [r3, #0]
    b77e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b786:	781b      	ldrb	r3, [r3, #0]
    b788:	4413      	add	r3, r2
    b78a:	b2da      	uxtb	r2, r3
    b78c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b790:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b794:	701a      	strb	r2, [r3, #0]
    b796:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b79a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b79e:	781a      	ldrb	r2, [r3, #0]
    b7a0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b7a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7a8:	781b      	ldrb	r3, [r3, #0]
    b7aa:	4413      	add	r3, r2
    b7ac:	b2da      	uxtb	r2, r3
    b7ae:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b7b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7b6:	701a      	strb	r2, [r3, #0]
    b7b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    b7bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7c0:	781b      	ldrb	r3, [r3, #0]
    b7c2:	3301      	adds	r3, #1
    b7c4:	b2da      	uxtb	r2, r3
    b7c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    b7ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7ce:	701a      	strb	r2, [r3, #0]
    b7d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    b7d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7d8:	781b      	ldrb	r3, [r3, #0]
    b7da:	2bff      	cmp	r3, #255	; 0xff
    b7dc:	d105      	bne.n	b7ea <send_climb+0x4c2>
    b7de:	f24c 3319 	movw	r3, #49945	; 0xc319
    b7e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7e6:	2200      	movs	r2, #0
    b7e8:	701a      	strb	r2, [r3, #0]
    b7ea:	f24c 3319 	movw	r3, #49945	; 0xc319
    b7ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7f2:	781b      	ldrb	r3, [r3, #0]
    b7f4:	461a      	mov	r2, r3
    b7f6:	f24c 6368 	movw	r3, #50792	; 0xc668
    b7fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7fe:	7819      	ldrb	r1, [r3, #0]
    b800:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b804:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b808:	5499      	strb	r1, [r3, r2]
    b80a:	f24c 6368 	movw	r3, #50792	; 0xc668
    b80e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b812:	781a      	ldrb	r2, [r3, #0]
    b814:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b818:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b81c:	781b      	ldrb	r3, [r3, #0]
    b81e:	4413      	add	r3, r2
    b820:	b2da      	uxtb	r2, r3
    b822:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b826:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b82a:	701a      	strb	r2, [r3, #0]
    b82c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b834:	781a      	ldrb	r2, [r3, #0]
    b836:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b83a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b83e:	781b      	ldrb	r3, [r3, #0]
    b840:	4413      	add	r3, r2
    b842:	b2da      	uxtb	r2, r3
    b844:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b848:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b84c:	701a      	strb	r2, [r3, #0]
    b84e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b852:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b856:	781b      	ldrb	r3, [r3, #0]
    b858:	3301      	adds	r3, #1
    b85a:	b2da      	uxtb	r2, r3
    b85c:	f24c 3319 	movw	r3, #49945	; 0xc319
    b860:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b864:	701a      	strb	r2, [r3, #0]
    b866:	f24c 3319 	movw	r3, #49945	; 0xc319
    b86a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b86e:	781b      	ldrb	r3, [r3, #0]
    b870:	2bff      	cmp	r3, #255	; 0xff
    b872:	d10f      	bne.n	b894 <send_climb+0x56c>
    b874:	f24c 3319 	movw	r3, #49945	; 0xc319
    b878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b87c:	2200      	movs	r2, #0
    b87e:	701a      	strb	r2, [r3, #0]
    b880:	e008      	b.n	b894 <send_climb+0x56c>
    b882:	bf00      	nop
    b884:	2004c64d 	.word	0x2004c64d
    b888:	2004c661 	.word	0x2004c661
    b88c:	2004c662 	.word	0x2004c662
    b890:	2004c663 	.word	0x2004c663
    b894:	f24c 3319 	movw	r3, #49945	; 0xc319
    b898:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b89c:	781b      	ldrb	r3, [r3, #0]
    b89e:	461a      	mov	r2, r3
    b8a0:	f24c 6368 	movw	r3, #50792	; 0xc668
    b8a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8a8:	7859      	ldrb	r1, [r3, #1]
    b8aa:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b8ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8b2:	5499      	strb	r1, [r3, r2]
    b8b4:	4bd1      	ldr	r3, [pc, #836]	; (bbfc <send_climb+0x8d4>)
    b8b6:	781a      	ldrb	r2, [r3, #0]
    b8b8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b8bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8c0:	781b      	ldrb	r3, [r3, #0]
    b8c2:	4413      	add	r3, r2
    b8c4:	b2da      	uxtb	r2, r3
    b8c6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b8ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8ce:	701a      	strb	r2, [r3, #0]
    b8d0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b8d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8d8:	781a      	ldrb	r2, [r3, #0]
    b8da:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b8de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8e2:	781b      	ldrb	r3, [r3, #0]
    b8e4:	4413      	add	r3, r2
    b8e6:	b2da      	uxtb	r2, r3
    b8e8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b8ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8f0:	701a      	strb	r2, [r3, #0]
    b8f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    b8f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8fa:	781b      	ldrb	r3, [r3, #0]
    b8fc:	3301      	adds	r3, #1
    b8fe:	b2da      	uxtb	r2, r3
    b900:	f24c 3319 	movw	r3, #49945	; 0xc319
    b904:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b908:	701a      	strb	r2, [r3, #0]
    b90a:	f24c 3319 	movw	r3, #49945	; 0xc319
    b90e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b912:	781b      	ldrb	r3, [r3, #0]
    b914:	2bff      	cmp	r3, #255	; 0xff
    b916:	d105      	bne.n	b924 <send_climb+0x5fc>
    b918:	f24c 3319 	movw	r3, #49945	; 0xc319
    b91c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b920:	2200      	movs	r2, #0
    b922:	701a      	strb	r2, [r3, #0]
    b924:	f24c 3319 	movw	r3, #49945	; 0xc319
    b928:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b92c:	781b      	ldrb	r3, [r3, #0]
    b92e:	461a      	mov	r2, r3
    b930:	f24c 6368 	movw	r3, #50792	; 0xc668
    b934:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b938:	7899      	ldrb	r1, [r3, #2]
    b93a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b93e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b942:	5499      	strb	r1, [r3, r2]
    b944:	4bae      	ldr	r3, [pc, #696]	; (bc00 <send_climb+0x8d8>)
    b946:	781a      	ldrb	r2, [r3, #0]
    b948:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b94c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b950:	781b      	ldrb	r3, [r3, #0]
    b952:	4413      	add	r3, r2
    b954:	b2da      	uxtb	r2, r3
    b956:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b95a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b95e:	701a      	strb	r2, [r3, #0]
    b960:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b964:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b968:	781a      	ldrb	r2, [r3, #0]
    b96a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b96e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b972:	781b      	ldrb	r3, [r3, #0]
    b974:	4413      	add	r3, r2
    b976:	b2da      	uxtb	r2, r3
    b978:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b97c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b980:	701a      	strb	r2, [r3, #0]
    b982:	f24c 3319 	movw	r3, #49945	; 0xc319
    b986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b98a:	781b      	ldrb	r3, [r3, #0]
    b98c:	3301      	adds	r3, #1
    b98e:	b2da      	uxtb	r2, r3
    b990:	f24c 3319 	movw	r3, #49945	; 0xc319
    b994:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b998:	701a      	strb	r2, [r3, #0]
    b99a:	f24c 3319 	movw	r3, #49945	; 0xc319
    b99e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9a2:	781b      	ldrb	r3, [r3, #0]
    b9a4:	2bff      	cmp	r3, #255	; 0xff
    b9a6:	d105      	bne.n	b9b4 <send_climb+0x68c>
    b9a8:	f24c 3319 	movw	r3, #49945	; 0xc319
    b9ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9b0:	2200      	movs	r2, #0
    b9b2:	701a      	strb	r2, [r3, #0]
    b9b4:	f24c 3319 	movw	r3, #49945	; 0xc319
    b9b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9bc:	781b      	ldrb	r3, [r3, #0]
    b9be:	461a      	mov	r2, r3
    b9c0:	f24c 6368 	movw	r3, #50792	; 0xc668
    b9c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9c8:	78d9      	ldrb	r1, [r3, #3]
    b9ca:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b9ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9d2:	5499      	strb	r1, [r3, r2]
    b9d4:	4b8b      	ldr	r3, [pc, #556]	; (bc04 <send_climb+0x8dc>)
    b9d6:	781a      	ldrb	r2, [r3, #0]
    b9d8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b9dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9e0:	781b      	ldrb	r3, [r3, #0]
    b9e2:	4413      	add	r3, r2
    b9e4:	b2da      	uxtb	r2, r3
    b9e6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b9ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9ee:	701a      	strb	r2, [r3, #0]
    b9f0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b9f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9f8:	781a      	ldrb	r2, [r3, #0]
    b9fa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b9fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba02:	781b      	ldrb	r3, [r3, #0]
    ba04:	4413      	add	r3, r2
    ba06:	b2da      	uxtb	r2, r3
    ba08:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ba0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba10:	701a      	strb	r2, [r3, #0]
    ba12:	f24c 3319 	movw	r3, #49945	; 0xc319
    ba16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba1a:	781b      	ldrb	r3, [r3, #0]
    ba1c:	3301      	adds	r3, #1
    ba1e:	b2da      	uxtb	r2, r3
    ba20:	f24c 3319 	movw	r3, #49945	; 0xc319
    ba24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba28:	701a      	strb	r2, [r3, #0]
    ba2a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ba2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba32:	781b      	ldrb	r3, [r3, #0]
    ba34:	2bff      	cmp	r3, #255	; 0xff
    ba36:	d105      	bne.n	ba44 <send_climb+0x71c>
    ba38:	f24c 3319 	movw	r3, #49945	; 0xc319
    ba3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba40:	2200      	movs	r2, #0
    ba42:	701a      	strb	r2, [r3, #0]
    ba44:	f24c 3319 	movw	r3, #49945	; 0xc319
    ba48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba4c:	781b      	ldrb	r3, [r3, #0]
    ba4e:	461a      	mov	r2, r3
    ba50:	f648 3374 	movw	r3, #35700	; 0x8b74
    ba54:	f2c0 0301 	movt	r3, #1
    ba58:	7819      	ldrb	r1, [r3, #0]
    ba5a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ba5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba62:	5499      	strb	r1, [r3, r2]
    ba64:	f648 3374 	movw	r3, #35700	; 0x8b74
    ba68:	f2c0 0301 	movt	r3, #1
    ba6c:	781a      	ldrb	r2, [r3, #0]
    ba6e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ba72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba76:	781b      	ldrb	r3, [r3, #0]
    ba78:	4413      	add	r3, r2
    ba7a:	b2da      	uxtb	r2, r3
    ba7c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ba80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba84:	701a      	strb	r2, [r3, #0]
    ba86:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ba8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba8e:	781a      	ldrb	r2, [r3, #0]
    ba90:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ba94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba98:	781b      	ldrb	r3, [r3, #0]
    ba9a:	4413      	add	r3, r2
    ba9c:	b2da      	uxtb	r2, r3
    ba9e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    baa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baa6:	701a      	strb	r2, [r3, #0]
    baa8:	f24c 3319 	movw	r3, #49945	; 0xc319
    baac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bab0:	781b      	ldrb	r3, [r3, #0]
    bab2:	3301      	adds	r3, #1
    bab4:	b2da      	uxtb	r2, r3
    bab6:	f24c 3319 	movw	r3, #49945	; 0xc319
    baba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    babe:	701a      	strb	r2, [r3, #0]
    bac0:	f24c 3319 	movw	r3, #49945	; 0xc319
    bac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bac8:	781b      	ldrb	r3, [r3, #0]
    baca:	2bff      	cmp	r3, #255	; 0xff
    bacc:	d105      	bne.n	bada <send_climb+0x7b2>
    bace:	f24c 3319 	movw	r3, #49945	; 0xc319
    bad2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bad6:	2200      	movs	r2, #0
    bad8:	701a      	strb	r2, [r3, #0]
    bada:	f24c 3319 	movw	r3, #49945	; 0xc319
    bade:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bae2:	781b      	ldrb	r3, [r3, #0]
    bae4:	461a      	mov	r2, r3
    bae6:	f648 3374 	movw	r3, #35700	; 0x8b74
    baea:	f2c0 0301 	movt	r3, #1
    baee:	7859      	ldrb	r1, [r3, #1]
    baf0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    baf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baf8:	5499      	strb	r1, [r3, r2]
    bafa:	4b43      	ldr	r3, [pc, #268]	; (bc08 <send_climb+0x8e0>)
    bafc:	781a      	ldrb	r2, [r3, #0]
    bafe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bb02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb06:	781b      	ldrb	r3, [r3, #0]
    bb08:	4413      	add	r3, r2
    bb0a:	b2da      	uxtb	r2, r3
    bb0c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bb10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb14:	701a      	strb	r2, [r3, #0]
    bb16:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bb1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb1e:	781a      	ldrb	r2, [r3, #0]
    bb20:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bb24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb28:	781b      	ldrb	r3, [r3, #0]
    bb2a:	4413      	add	r3, r2
    bb2c:	b2da      	uxtb	r2, r3
    bb2e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bb32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb36:	701a      	strb	r2, [r3, #0]
    bb38:	f24c 3319 	movw	r3, #49945	; 0xc319
    bb3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb40:	781b      	ldrb	r3, [r3, #0]
    bb42:	3301      	adds	r3, #1
    bb44:	b2da      	uxtb	r2, r3
    bb46:	f24c 3319 	movw	r3, #49945	; 0xc319
    bb4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb4e:	701a      	strb	r2, [r3, #0]
    bb50:	f24c 3319 	movw	r3, #49945	; 0xc319
    bb54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb58:	781b      	ldrb	r3, [r3, #0]
    bb5a:	2bff      	cmp	r3, #255	; 0xff
    bb5c:	d105      	bne.n	bb6a <send_climb+0x842>
    bb5e:	f24c 3319 	movw	r3, #49945	; 0xc319
    bb62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb66:	2200      	movs	r2, #0
    bb68:	701a      	strb	r2, [r3, #0]
    bb6a:	f24c 3319 	movw	r3, #49945	; 0xc319
    bb6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb72:	781b      	ldrb	r3, [r3, #0]
    bb74:	461a      	mov	r2, r3
    bb76:	f648 3374 	movw	r3, #35700	; 0x8b74
    bb7a:	f2c0 0301 	movt	r3, #1
    bb7e:	7899      	ldrb	r1, [r3, #2]
    bb80:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bb84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb88:	5499      	strb	r1, [r3, r2]
    bb8a:	4b20      	ldr	r3, [pc, #128]	; (bc0c <send_climb+0x8e4>)
    bb8c:	781a      	ldrb	r2, [r3, #0]
    bb8e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bb92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb96:	781b      	ldrb	r3, [r3, #0]
    bb98:	4413      	add	r3, r2
    bb9a:	b2da      	uxtb	r2, r3
    bb9c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bba4:	701a      	strb	r2, [r3, #0]
    bba6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bbaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbae:	781a      	ldrb	r2, [r3, #0]
    bbb0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bbb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbb8:	781b      	ldrb	r3, [r3, #0]
    bbba:	4413      	add	r3, r2
    bbbc:	b2da      	uxtb	r2, r3
    bbbe:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bbc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbc6:	701a      	strb	r2, [r3, #0]
    bbc8:	f24c 3319 	movw	r3, #49945	; 0xc319
    bbcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbd0:	781b      	ldrb	r3, [r3, #0]
    bbd2:	3301      	adds	r3, #1
    bbd4:	b2da      	uxtb	r2, r3
    bbd6:	f24c 3319 	movw	r3, #49945	; 0xc319
    bbda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbde:	701a      	strb	r2, [r3, #0]
    bbe0:	f24c 3319 	movw	r3, #49945	; 0xc319
    bbe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbe8:	781b      	ldrb	r3, [r3, #0]
    bbea:	2bff      	cmp	r3, #255	; 0xff
    bbec:	d110      	bne.n	bc10 <send_climb+0x8e8>
    bbee:	f24c 3319 	movw	r3, #49945	; 0xc319
    bbf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbf6:	2200      	movs	r2, #0
    bbf8:	701a      	strb	r2, [r3, #0]
    bbfa:	e009      	b.n	bc10 <send_climb+0x8e8>
    bbfc:	2004c669 	.word	0x2004c669
    bc00:	2004c66a 	.word	0x2004c66a
    bc04:	2004c66b 	.word	0x2004c66b
    bc08:	00018b75 	.word	0x00018b75
    bc0c:	00018b76 	.word	0x00018b76
    bc10:	f24c 3319 	movw	r3, #49945	; 0xc319
    bc14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc18:	781b      	ldrb	r3, [r3, #0]
    bc1a:	461a      	mov	r2, r3
    bc1c:	f648 3374 	movw	r3, #35700	; 0x8b74
    bc20:	f2c0 0301 	movt	r3, #1
    bc24:	78d9      	ldrb	r1, [r3, #3]
    bc26:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bc2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc2e:	5499      	strb	r1, [r3, r2]
    bc30:	4b79      	ldr	r3, [pc, #484]	; (be18 <send_climb+0xaf0>)
    bc32:	781a      	ldrb	r2, [r3, #0]
    bc34:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bc38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc3c:	781b      	ldrb	r3, [r3, #0]
    bc3e:	4413      	add	r3, r2
    bc40:	b2da      	uxtb	r2, r3
    bc42:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bc46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc4a:	701a      	strb	r2, [r3, #0]
    bc4c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bc50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc54:	781a      	ldrb	r2, [r3, #0]
    bc56:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bc5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc5e:	781b      	ldrb	r3, [r3, #0]
    bc60:	4413      	add	r3, r2
    bc62:	b2da      	uxtb	r2, r3
    bc64:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bc68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc6c:	701a      	strb	r2, [r3, #0]
    bc6e:	f24c 3319 	movw	r3, #49945	; 0xc319
    bc72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc76:	781b      	ldrb	r3, [r3, #0]
    bc78:	3301      	adds	r3, #1
    bc7a:	b2da      	uxtb	r2, r3
    bc7c:	f24c 3319 	movw	r3, #49945	; 0xc319
    bc80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc84:	701a      	strb	r2, [r3, #0]
    bc86:	f24c 3319 	movw	r3, #49945	; 0xc319
    bc8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc8e:	781b      	ldrb	r3, [r3, #0]
    bc90:	2bff      	cmp	r3, #255	; 0xff
    bc92:	d105      	bne.n	bca0 <send_climb+0x978>
    bc94:	f24c 3319 	movw	r3, #49945	; 0xc319
    bc98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc9c:	2200      	movs	r2, #0
    bc9e:	701a      	strb	r2, [r3, #0]
    bca0:	f24c 3319 	movw	r3, #49945	; 0xc319
    bca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bca8:	781b      	ldrb	r3, [r3, #0]
    bcaa:	461a      	mov	r2, r3
    bcac:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bcb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcb4:	7819      	ldrb	r1, [r3, #0]
    bcb6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bcba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcbe:	5499      	strb	r1, [r3, r2]
    bcc0:	f24c 3319 	movw	r3, #49945	; 0xc319
    bcc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcc8:	781b      	ldrb	r3, [r3, #0]
    bcca:	3301      	adds	r3, #1
    bccc:	b2da      	uxtb	r2, r3
    bcce:	f24c 3319 	movw	r3, #49945	; 0xc319
    bcd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcd6:	701a      	strb	r2, [r3, #0]
    bcd8:	f24c 3319 	movw	r3, #49945	; 0xc319
    bcdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bce0:	781b      	ldrb	r3, [r3, #0]
    bce2:	2bff      	cmp	r3, #255	; 0xff
    bce4:	d105      	bne.n	bcf2 <send_climb+0x9ca>
    bce6:	f24c 3319 	movw	r3, #49945	; 0xc319
    bcea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcee:	2200      	movs	r2, #0
    bcf0:	701a      	strb	r2, [r3, #0]
    bcf2:	f24c 3319 	movw	r3, #49945	; 0xc319
    bcf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcfa:	781b      	ldrb	r3, [r3, #0]
    bcfc:	461a      	mov	r2, r3
    bcfe:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bd02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd06:	7819      	ldrb	r1, [r3, #0]
    bd08:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bd0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd10:	5499      	strb	r1, [r3, r2]
    bd12:	f24c 3319 	movw	r3, #49945	; 0xc319
    bd16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd1a:	781b      	ldrb	r3, [r3, #0]
    bd1c:	3301      	adds	r3, #1
    bd1e:	b2da      	uxtb	r2, r3
    bd20:	f24c 3319 	movw	r3, #49945	; 0xc319
    bd24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd28:	701a      	strb	r2, [r3, #0]
    bd2a:	f24c 3319 	movw	r3, #49945	; 0xc319
    bd2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd32:	781b      	ldrb	r3, [r3, #0]
    bd34:	2bff      	cmp	r3, #255	; 0xff
    bd36:	d105      	bne.n	bd44 <send_climb+0xa1c>
    bd38:	f24c 3319 	movw	r3, #49945	; 0xc319
    bd3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd40:	2200      	movs	r2, #0
    bd42:	701a      	strb	r2, [r3, #0]
    bd44:	f242 0339 	movw	r3, #8249	; 0x2039
    bd48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd4c:	781b      	ldrb	r3, [r3, #0]
    bd4e:	b2db      	uxtb	r3, r3
    bd50:	f003 0310 	and.w	r3, r3, #16
    bd54:	2b00      	cmp	r3, #0
    bd56:	d15a      	bne.n	be0e <send_climb+0xae6>
    bd58:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bd5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd60:	781b      	ldrb	r3, [r3, #0]
    bd62:	b2db      	uxtb	r3, r3
    bd64:	461a      	mov	r2, r3
    bd66:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bd6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd6e:	5c9a      	ldrb	r2, [r3, r2]
    bd70:	f24c 431b 	movw	r3, #50203	; 0xc41b
    bd74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd78:	701a      	strb	r2, [r3, #0]
    bd7a:	f24c 431c 	movw	r3, #50204	; 0xc41c
    bd7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd82:	2200      	movs	r2, #0
    bd84:	701a      	strb	r2, [r3, #0]
    bd86:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bd8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd8e:	781b      	ldrb	r3, [r3, #0]
    bd90:	b2db      	uxtb	r3, r3
    bd92:	3301      	adds	r3, #1
    bd94:	b2da      	uxtb	r2, r3
    bd96:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bd9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd9e:	701a      	strb	r2, [r3, #0]
    bda0:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bda4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bda8:	781b      	ldrb	r3, [r3, #0]
    bdaa:	b2db      	uxtb	r3, r3
    bdac:	2bff      	cmp	r3, #255	; 0xff
    bdae:	d105      	bne.n	bdbc <send_climb+0xa94>
    bdb0:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bdb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdb8:	2200      	movs	r2, #0
    bdba:	701a      	strb	r2, [r3, #0]
    bdbc:	f242 0338 	movw	r3, #8248	; 0x2038
    bdc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdc4:	f242 0238 	movw	r2, #8248	; 0x2038
    bdc8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bdcc:	7812      	ldrb	r2, [r2, #0]
    bdce:	b2d2      	uxtb	r2, r2
    bdd0:	f042 0201 	orr.w	r2, r2, #1
    bdd4:	b2d2      	uxtb	r2, r2
    bdd6:	701a      	strb	r2, [r3, #0]
    bdd8:	f242 0339 	movw	r3, #8249	; 0x2039
    bddc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bde0:	f242 0239 	movw	r2, #8249	; 0x2039
    bde4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bde8:	7812      	ldrb	r2, [r2, #0]
    bdea:	b2d2      	uxtb	r2, r2
    bdec:	f042 0210 	orr.w	r2, r2, #16
    bdf0:	b2d2      	uxtb	r2, r2
    bdf2:	701a      	strb	r2, [r3, #0]
    bdf4:	e00b      	b.n	be0e <send_climb+0xae6>
    bdf6:	f24c 3318 	movw	r3, #49944	; 0xc318
    bdfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdfe:	781b      	ldrb	r3, [r3, #0]
    be00:	3301      	adds	r3, #1
    be02:	b2da      	uxtb	r2, r3
    be04:	f24c 3318 	movw	r3, #49944	; 0xc318
    be08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be0c:	701a      	strb	r2, [r3, #0]
}
    be0e:	46bd      	mov	sp, r7
    be10:	f85d 7b04 	ldr.w	r7, [sp], #4
    be14:	4770      	bx	lr
    be16:	bf00      	nop
    be18:	00018b77 	.word	0x00018b77

0000be1c <send_mode>:
void send_mode(void){  //5000ms
    be1c:	b480      	push	{r7}
    be1e:	af00      	add	r7, sp, #0
  if(!boot)
    be20:	f240 533d 	movw	r3, #1341	; 0x53d
    be24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be28:	781b      	ldrb	r3, [r3, #0]
    be2a:	2b00      	cmp	r3, #0
    be2c:	f040 82ce 	bne.w	c3cc <send_mode+0x5b0>
  { if (count % 50 == 9) PERIODIC_SEND_PPRZ_MODE();}
    be30:	f24c 3311 	movw	r3, #49937	; 0xc311
    be34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be38:	781a      	ldrb	r2, [r3, #0]
    be3a:	f248 531f 	movw	r3, #34079	; 0x851f
    be3e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    be42:	fba3 1302 	umull	r1, r3, r3, r2
    be46:	091b      	lsrs	r3, r3, #4
    be48:	2132      	movs	r1, #50	; 0x32
    be4a:	fb01 f303 	mul.w	r3, r1, r3
    be4e:	1ad3      	subs	r3, r2, r3
    be50:	b2db      	uxtb	r3, r3
    be52:	2b09      	cmp	r3, #9
    be54:	f040 82ba 	bne.w	c3cc <send_mode+0x5b0>
    be58:	f24c 3319 	movw	r3, #49945	; 0xc319
    be5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be60:	781a      	ldrb	r2, [r3, #0]
    be62:	f24c 331a 	movw	r3, #49946	; 0xc31a
    be66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be6a:	781b      	ldrb	r3, [r3, #0]
    be6c:	b2db      	uxtb	r3, r3
    be6e:	429a      	cmp	r2, r3
    be70:	d313      	bcc.n	be9a <send_mode+0x7e>
    be72:	f24c 331a 	movw	r3, #49946	; 0xc31a
    be76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be7a:	781b      	ldrb	r3, [r3, #0]
    be7c:	b2db      	uxtb	r3, r3
    be7e:	461a      	mov	r2, r3
    be80:	f24c 3319 	movw	r3, #49945	; 0xc319
    be84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be88:	781b      	ldrb	r3, [r3, #0]
    be8a:	1ad3      	subs	r3, r2, r3
    be8c:	33ff      	adds	r3, #255	; 0xff
    be8e:	2b09      	cmp	r3, #9
    be90:	bfd4      	ite	le
    be92:	2300      	movle	r3, #0
    be94:	2301      	movgt	r3, #1
    be96:	b2db      	uxtb	r3, r3
    be98:	e011      	b.n	bebe <send_mode+0xa2>
    be9a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    be9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bea2:	781b      	ldrb	r3, [r3, #0]
    bea4:	b2db      	uxtb	r3, r3
    bea6:	461a      	mov	r2, r3
    bea8:	f24c 3319 	movw	r3, #49945	; 0xc319
    beac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beb0:	781b      	ldrb	r3, [r3, #0]
    beb2:	1ad3      	subs	r3, r2, r3
    beb4:	2b09      	cmp	r3, #9
    beb6:	bfd4      	ite	le
    beb8:	2300      	movle	r3, #0
    beba:	2301      	movgt	r3, #1
    bebc:	b2db      	uxtb	r3, r3
    bebe:	2b00      	cmp	r3, #0
    bec0:	f000 8278 	beq.w	c3b4 <send_mode+0x598>
    bec4:	f24c 3319 	movw	r3, #49945	; 0xc319
    bec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    becc:	781b      	ldrb	r3, [r3, #0]
    bece:	461a      	mov	r2, r3
    bed0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bed4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bed8:	2105      	movs	r1, #5
    beda:	5499      	strb	r1, [r3, r2]
    bedc:	f24c 3319 	movw	r3, #49945	; 0xc319
    bee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bee4:	781b      	ldrb	r3, [r3, #0]
    bee6:	3301      	adds	r3, #1
    bee8:	b2da      	uxtb	r2, r3
    beea:	f24c 3319 	movw	r3, #49945	; 0xc319
    beee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bef2:	701a      	strb	r2, [r3, #0]
    bef4:	f24c 3319 	movw	r3, #49945	; 0xc319
    bef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    befc:	781b      	ldrb	r3, [r3, #0]
    befe:	2bff      	cmp	r3, #255	; 0xff
    bf00:	d105      	bne.n	bf0e <send_mode+0xf2>
    bf02:	f24c 3319 	movw	r3, #49945	; 0xc319
    bf06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf0a:	2200      	movs	r2, #0
    bf0c:	701a      	strb	r2, [r3, #0]
    bf0e:	f24c 3319 	movw	r3, #49945	; 0xc319
    bf12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf16:	781b      	ldrb	r3, [r3, #0]
    bf18:	461a      	mov	r2, r3
    bf1a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bf1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf22:	210b      	movs	r1, #11
    bf24:	5499      	strb	r1, [r3, r2]
    bf26:	f24c 3319 	movw	r3, #49945	; 0xc319
    bf2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf2e:	781b      	ldrb	r3, [r3, #0]
    bf30:	3301      	adds	r3, #1
    bf32:	b2da      	uxtb	r2, r3
    bf34:	f24c 3319 	movw	r3, #49945	; 0xc319
    bf38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf3c:	701a      	strb	r2, [r3, #0]
    bf3e:	f24c 3319 	movw	r3, #49945	; 0xc319
    bf42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf46:	781b      	ldrb	r3, [r3, #0]
    bf48:	2bff      	cmp	r3, #255	; 0xff
    bf4a:	d105      	bne.n	bf58 <send_mode+0x13c>
    bf4c:	f24c 3319 	movw	r3, #49945	; 0xc319
    bf50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf54:	2200      	movs	r2, #0
    bf56:	701a      	strb	r2, [r3, #0]
    bf58:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bf5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf60:	220b      	movs	r2, #11
    bf62:	701a      	strb	r2, [r3, #0]
    bf64:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bf68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf6c:	220b      	movs	r2, #11
    bf6e:	701a      	strb	r2, [r3, #0]
    bf70:	f24c 3319 	movw	r3, #49945	; 0xc319
    bf74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf78:	781b      	ldrb	r3, [r3, #0]
    bf7a:	461a      	mov	r2, r3
    bf7c:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    bf80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf84:	7819      	ldrb	r1, [r3, #0]
    bf86:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bf8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf8e:	5499      	strb	r1, [r3, r2]
    bf90:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bf94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf98:	781a      	ldrb	r2, [r3, #0]
    bf9a:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    bf9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfa2:	781b      	ldrb	r3, [r3, #0]
    bfa4:	4413      	add	r3, r2
    bfa6:	b2da      	uxtb	r2, r3
    bfa8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bfac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfb0:	701a      	strb	r2, [r3, #0]
    bfb2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bfb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfba:	781a      	ldrb	r2, [r3, #0]
    bfbc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bfc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfc4:	781b      	ldrb	r3, [r3, #0]
    bfc6:	4413      	add	r3, r2
    bfc8:	b2da      	uxtb	r2, r3
    bfca:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bfce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfd2:	701a      	strb	r2, [r3, #0]
    bfd4:	f24c 3319 	movw	r3, #49945	; 0xc319
    bfd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfdc:	781b      	ldrb	r3, [r3, #0]
    bfde:	3301      	adds	r3, #1
    bfe0:	b2da      	uxtb	r2, r3
    bfe2:	f24c 3319 	movw	r3, #49945	; 0xc319
    bfe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfea:	701a      	strb	r2, [r3, #0]
    bfec:	f24c 3319 	movw	r3, #49945	; 0xc319
    bff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bff4:	781b      	ldrb	r3, [r3, #0]
    bff6:	2bff      	cmp	r3, #255	; 0xff
    bff8:	d105      	bne.n	c006 <send_mode+0x1ea>
    bffa:	f24c 3319 	movw	r3, #49945	; 0xc319
    bffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c002:	2200      	movs	r2, #0
    c004:	701a      	strb	r2, [r3, #0]
    c006:	f24c 3319 	movw	r3, #49945	; 0xc319
    c00a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c00e:	781b      	ldrb	r3, [r3, #0]
    c010:	461a      	mov	r2, r3
    c012:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    c016:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c01a:	7819      	ldrb	r1, [r3, #0]
    c01c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c020:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c024:	5499      	strb	r1, [r3, r2]
    c026:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c02a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c02e:	781a      	ldrb	r2, [r3, #0]
    c030:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    c034:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c038:	781b      	ldrb	r3, [r3, #0]
    c03a:	4413      	add	r3, r2
    c03c:	b2da      	uxtb	r2, r3
    c03e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c042:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c046:	701a      	strb	r2, [r3, #0]
    c048:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c04c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c050:	781a      	ldrb	r2, [r3, #0]
    c052:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c056:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c05a:	781b      	ldrb	r3, [r3, #0]
    c05c:	4413      	add	r3, r2
    c05e:	b2da      	uxtb	r2, r3
    c060:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c064:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c068:	701a      	strb	r2, [r3, #0]
    c06a:	f24c 3319 	movw	r3, #49945	; 0xc319
    c06e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c072:	781b      	ldrb	r3, [r3, #0]
    c074:	3301      	adds	r3, #1
    c076:	b2da      	uxtb	r2, r3
    c078:	f24c 3319 	movw	r3, #49945	; 0xc319
    c07c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c080:	701a      	strb	r2, [r3, #0]
    c082:	f24c 3319 	movw	r3, #49945	; 0xc319
    c086:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c08a:	781b      	ldrb	r3, [r3, #0]
    c08c:	2bff      	cmp	r3, #255	; 0xff
    c08e:	d105      	bne.n	c09c <send_mode+0x280>
    c090:	f24c 3319 	movw	r3, #49945	; 0xc319
    c094:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c098:	2200      	movs	r2, #0
    c09a:	701a      	strb	r2, [r3, #0]
    c09c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c0a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0a4:	781b      	ldrb	r3, [r3, #0]
    c0a6:	461a      	mov	r2, r3
    c0a8:	f64c 132c 	movw	r3, #51500	; 0xc92c
    c0ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0b0:	7819      	ldrb	r1, [r3, #0]
    c0b2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c0b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0ba:	5499      	strb	r1, [r3, r2]
    c0bc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c0c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0c4:	781a      	ldrb	r2, [r3, #0]
    c0c6:	f64c 132c 	movw	r3, #51500	; 0xc92c
    c0ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0ce:	781b      	ldrb	r3, [r3, #0]
    c0d0:	4413      	add	r3, r2
    c0d2:	b2da      	uxtb	r2, r3
    c0d4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c0d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0dc:	701a      	strb	r2, [r3, #0]
    c0de:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c0e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0e6:	781a      	ldrb	r2, [r3, #0]
    c0e8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c0ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0f0:	781b      	ldrb	r3, [r3, #0]
    c0f2:	4413      	add	r3, r2
    c0f4:	b2da      	uxtb	r2, r3
    c0f6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c0fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0fe:	701a      	strb	r2, [r3, #0]
    c100:	f24c 3319 	movw	r3, #49945	; 0xc319
    c104:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c108:	781b      	ldrb	r3, [r3, #0]
    c10a:	3301      	adds	r3, #1
    c10c:	b2da      	uxtb	r2, r3
    c10e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c112:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c116:	701a      	strb	r2, [r3, #0]
    c118:	f24c 3319 	movw	r3, #49945	; 0xc319
    c11c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c120:	781b      	ldrb	r3, [r3, #0]
    c122:	2bff      	cmp	r3, #255	; 0xff
    c124:	d105      	bne.n	c132 <send_mode+0x316>
    c126:	f24c 3319 	movw	r3, #49945	; 0xc319
    c12a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c12e:	2200      	movs	r2, #0
    c130:	701a      	strb	r2, [r3, #0]
    c132:	f24c 3319 	movw	r3, #49945	; 0xc319
    c136:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c13a:	781b      	ldrb	r3, [r3, #0]
    c13c:	461a      	mov	r2, r3
    c13e:	f24c 3303 	movw	r3, #49923	; 0xc303
    c142:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c146:	7819      	ldrb	r1, [r3, #0]
    c148:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c14c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c150:	5499      	strb	r1, [r3, r2]
    c152:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c156:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c15a:	781a      	ldrb	r2, [r3, #0]
    c15c:	f24c 3303 	movw	r3, #49923	; 0xc303
    c160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c164:	781b      	ldrb	r3, [r3, #0]
    c166:	4413      	add	r3, r2
    c168:	b2da      	uxtb	r2, r3
    c16a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c16e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c172:	701a      	strb	r2, [r3, #0]
    c174:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c17c:	781a      	ldrb	r2, [r3, #0]
    c17e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c182:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c186:	781b      	ldrb	r3, [r3, #0]
    c188:	4413      	add	r3, r2
    c18a:	b2da      	uxtb	r2, r3
    c18c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c190:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c194:	701a      	strb	r2, [r3, #0]
    c196:	f24c 3319 	movw	r3, #49945	; 0xc319
    c19a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c19e:	781b      	ldrb	r3, [r3, #0]
    c1a0:	3301      	adds	r3, #1
    c1a2:	b2da      	uxtb	r2, r3
    c1a4:	f24c 3319 	movw	r3, #49945	; 0xc319
    c1a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1ac:	701a      	strb	r2, [r3, #0]
    c1ae:	f24c 3319 	movw	r3, #49945	; 0xc319
    c1b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1b6:	781b      	ldrb	r3, [r3, #0]
    c1b8:	2bff      	cmp	r3, #255	; 0xff
    c1ba:	d105      	bne.n	c1c8 <send_mode+0x3ac>
    c1bc:	f24c 3319 	movw	r3, #49945	; 0xc319
    c1c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1c4:	2200      	movs	r2, #0
    c1c6:	701a      	strb	r2, [r3, #0]
    c1c8:	f24c 3319 	movw	r3, #49945	; 0xc319
    c1cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1d0:	781b      	ldrb	r3, [r3, #0]
    c1d2:	461a      	mov	r2, r3
    c1d4:	f240 533c 	movw	r3, #1340	; 0x53c
    c1d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1dc:	7819      	ldrb	r1, [r3, #0]
    c1de:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c1e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1e6:	5499      	strb	r1, [r3, r2]
    c1e8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c1ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1f0:	781a      	ldrb	r2, [r3, #0]
    c1f2:	f240 533c 	movw	r3, #1340	; 0x53c
    c1f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1fa:	781b      	ldrb	r3, [r3, #0]
    c1fc:	4413      	add	r3, r2
    c1fe:	b2da      	uxtb	r2, r3
    c200:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c208:	701a      	strb	r2, [r3, #0]
    c20a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c20e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c212:	781a      	ldrb	r2, [r3, #0]
    c214:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c218:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c21c:	781b      	ldrb	r3, [r3, #0]
    c21e:	4413      	add	r3, r2
    c220:	b2da      	uxtb	r2, r3
    c222:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c22a:	701a      	strb	r2, [r3, #0]
    c22c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c230:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c234:	781b      	ldrb	r3, [r3, #0]
    c236:	3301      	adds	r3, #1
    c238:	b2da      	uxtb	r2, r3
    c23a:	f24c 3319 	movw	r3, #49945	; 0xc319
    c23e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c242:	701a      	strb	r2, [r3, #0]
    c244:	f24c 3319 	movw	r3, #49945	; 0xc319
    c248:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c24c:	781b      	ldrb	r3, [r3, #0]
    c24e:	2bff      	cmp	r3, #255	; 0xff
    c250:	d105      	bne.n	c25e <send_mode+0x442>
    c252:	f24c 3319 	movw	r3, #49945	; 0xc319
    c256:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c25a:	2200      	movs	r2, #0
    c25c:	701a      	strb	r2, [r3, #0]
    c25e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c262:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c266:	781b      	ldrb	r3, [r3, #0]
    c268:	461a      	mov	r2, r3
    c26a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c26e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c272:	7819      	ldrb	r1, [r3, #0]
    c274:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c278:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c27c:	5499      	strb	r1, [r3, r2]
    c27e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c282:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c286:	781b      	ldrb	r3, [r3, #0]
    c288:	3301      	adds	r3, #1
    c28a:	b2da      	uxtb	r2, r3
    c28c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c290:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c294:	701a      	strb	r2, [r3, #0]
    c296:	f24c 3319 	movw	r3, #49945	; 0xc319
    c29a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c29e:	781b      	ldrb	r3, [r3, #0]
    c2a0:	2bff      	cmp	r3, #255	; 0xff
    c2a2:	d105      	bne.n	c2b0 <send_mode+0x494>
    c2a4:	f24c 3319 	movw	r3, #49945	; 0xc319
    c2a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2ac:	2200      	movs	r2, #0
    c2ae:	701a      	strb	r2, [r3, #0]
    c2b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    c2b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2b8:	781b      	ldrb	r3, [r3, #0]
    c2ba:	461a      	mov	r2, r3
    c2bc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c2c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2c4:	7819      	ldrb	r1, [r3, #0]
    c2c6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c2ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2ce:	5499      	strb	r1, [r3, r2]
    c2d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    c2d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2d8:	781b      	ldrb	r3, [r3, #0]
    c2da:	3301      	adds	r3, #1
    c2dc:	b2da      	uxtb	r2, r3
    c2de:	f24c 3319 	movw	r3, #49945	; 0xc319
    c2e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2e6:	701a      	strb	r2, [r3, #0]
    c2e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    c2ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2f0:	781b      	ldrb	r3, [r3, #0]
    c2f2:	2bff      	cmp	r3, #255	; 0xff
    c2f4:	d105      	bne.n	c302 <send_mode+0x4e6>
    c2f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    c2fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2fe:	2200      	movs	r2, #0
    c300:	701a      	strb	r2, [r3, #0]
    c302:	f242 0339 	movw	r3, #8249	; 0x2039
    c306:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c30a:	781b      	ldrb	r3, [r3, #0]
    c30c:	b2db      	uxtb	r3, r3
    c30e:	f003 0310 	and.w	r3, r3, #16
    c312:	2b00      	cmp	r3, #0
    c314:	d15a      	bne.n	c3cc <send_mode+0x5b0>
    c316:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c31a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c31e:	781b      	ldrb	r3, [r3, #0]
    c320:	b2db      	uxtb	r3, r3
    c322:	461a      	mov	r2, r3
    c324:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c328:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c32c:	5c9a      	ldrb	r2, [r3, r2]
    c32e:	f24c 431b 	movw	r3, #50203	; 0xc41b
    c332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c336:	701a      	strb	r2, [r3, #0]
    c338:	f24c 431c 	movw	r3, #50204	; 0xc41c
    c33c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c340:	2200      	movs	r2, #0
    c342:	701a      	strb	r2, [r3, #0]
    c344:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c348:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c34c:	781b      	ldrb	r3, [r3, #0]
    c34e:	b2db      	uxtb	r3, r3
    c350:	3301      	adds	r3, #1
    c352:	b2da      	uxtb	r2, r3
    c354:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c358:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c35c:	701a      	strb	r2, [r3, #0]
    c35e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c362:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c366:	781b      	ldrb	r3, [r3, #0]
    c368:	b2db      	uxtb	r3, r3
    c36a:	2bff      	cmp	r3, #255	; 0xff
    c36c:	d105      	bne.n	c37a <send_mode+0x55e>
    c36e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c376:	2200      	movs	r2, #0
    c378:	701a      	strb	r2, [r3, #0]
    c37a:	f242 0338 	movw	r3, #8248	; 0x2038
    c37e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c382:	f242 0238 	movw	r2, #8248	; 0x2038
    c386:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c38a:	7812      	ldrb	r2, [r2, #0]
    c38c:	b2d2      	uxtb	r2, r2
    c38e:	f042 0201 	orr.w	r2, r2, #1
    c392:	b2d2      	uxtb	r2, r2
    c394:	701a      	strb	r2, [r3, #0]
    c396:	f242 0339 	movw	r3, #8249	; 0x2039
    c39a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c39e:	f242 0239 	movw	r2, #8249	; 0x2039
    c3a2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c3a6:	7812      	ldrb	r2, [r2, #0]
    c3a8:	b2d2      	uxtb	r2, r2
    c3aa:	f042 0210 	orr.w	r2, r2, #16
    c3ae:	b2d2      	uxtb	r2, r2
    c3b0:	701a      	strb	r2, [r3, #0]
    c3b2:	e00b      	b.n	c3cc <send_mode+0x5b0>
    c3b4:	f24c 3318 	movw	r3, #49944	; 0xc318
    c3b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3bc:	781b      	ldrb	r3, [r3, #0]
    c3be:	3301      	adds	r3, #1
    c3c0:	b2da      	uxtb	r2, r3
    c3c2:	f24c 3318 	movw	r3, #49944	; 0xc318
    c3c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3ca:	701a      	strb	r2, [r3, #0]
}
    c3cc:	46bd      	mov	sp, r7
    c3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    c3d2:	4770      	bx	lr

0000c3d4 <send_debug>:
void send_debug(void){  //5000ms
    c3d4:	b480      	push	{r7}
    c3d6:	af00      	add	r7, sp, #0
  if(!boot)
    c3d8:	f240 533d 	movw	r3, #1341	; 0x53d
    c3dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3e0:	781b      	ldrb	r3, [r3, #0]
    c3e2:	2b00      	cmp	r3, #0
    c3e4:	f040 82cf 	bne.w	c986 <send_debug+0x5b2>
  { if (count % 50 == 29) PERIODIC_SEND_DEBUG();}
    c3e8:	f24c 3311 	movw	r3, #49937	; 0xc311
    c3ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3f0:	781a      	ldrb	r2, [r3, #0]
    c3f2:	f248 531f 	movw	r3, #34079	; 0x851f
    c3f6:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c3fa:	fba3 1302 	umull	r1, r3, r3, r2
    c3fe:	091b      	lsrs	r3, r3, #4
    c400:	2132      	movs	r1, #50	; 0x32
    c402:	fb01 f303 	mul.w	r3, r1, r3
    c406:	1ad3      	subs	r3, r2, r3
    c408:	b2db      	uxtb	r3, r3
    c40a:	2b1d      	cmp	r3, #29
    c40c:	f040 82bb 	bne.w	c986 <send_debug+0x5b2>
    c410:	f24c 3319 	movw	r3, #49945	; 0xc319
    c414:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c418:	781a      	ldrb	r2, [r3, #0]
    c41a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c41e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c422:	781b      	ldrb	r3, [r3, #0]
    c424:	b2db      	uxtb	r3, r3
    c426:	429a      	cmp	r2, r3
    c428:	d313      	bcc.n	c452 <send_debug+0x7e>
    c42a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c42e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c432:	781b      	ldrb	r3, [r3, #0]
    c434:	b2db      	uxtb	r3, r3
    c436:	461a      	mov	r2, r3
    c438:	f24c 3319 	movw	r3, #49945	; 0xc319
    c43c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c440:	781b      	ldrb	r3, [r3, #0]
    c442:	1ad3      	subs	r3, r2, r3
    c444:	33ff      	adds	r3, #255	; 0xff
    c446:	2b09      	cmp	r3, #9
    c448:	bfd4      	ite	le
    c44a:	2300      	movle	r3, #0
    c44c:	2301      	movgt	r3, #1
    c44e:	b2db      	uxtb	r3, r3
    c450:	e011      	b.n	c476 <send_debug+0xa2>
    c452:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c456:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c45a:	781b      	ldrb	r3, [r3, #0]
    c45c:	b2db      	uxtb	r3, r3
    c45e:	461a      	mov	r2, r3
    c460:	f24c 3319 	movw	r3, #49945	; 0xc319
    c464:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c468:	781b      	ldrb	r3, [r3, #0]
    c46a:	1ad3      	subs	r3, r2, r3
    c46c:	2b09      	cmp	r3, #9
    c46e:	bfd4      	ite	le
    c470:	2300      	movle	r3, #0
    c472:	2301      	movgt	r3, #1
    c474:	b2db      	uxtb	r3, r3
    c476:	2b00      	cmp	r3, #0
    c478:	f000 8279 	beq.w	c96e <send_debug+0x59a>
    c47c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c480:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c484:	781b      	ldrb	r3, [r3, #0]
    c486:	461a      	mov	r2, r3
    c488:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c48c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c490:	2105      	movs	r1, #5
    c492:	5499      	strb	r1, [r3, r2]
    c494:	f24c 3319 	movw	r3, #49945	; 0xc319
    c498:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c49c:	781b      	ldrb	r3, [r3, #0]
    c49e:	3301      	adds	r3, #1
    c4a0:	b2da      	uxtb	r2, r3
    c4a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    c4a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4aa:	701a      	strb	r2, [r3, #0]
    c4ac:	f24c 3319 	movw	r3, #49945	; 0xc319
    c4b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4b4:	781b      	ldrb	r3, [r3, #0]
    c4b6:	2bff      	cmp	r3, #255	; 0xff
    c4b8:	d105      	bne.n	c4c6 <send_debug+0xf2>
    c4ba:	f24c 3319 	movw	r3, #49945	; 0xc319
    c4be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4c2:	2200      	movs	r2, #0
    c4c4:	701a      	strb	r2, [r3, #0]
    c4c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    c4ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4ce:	781b      	ldrb	r3, [r3, #0]
    c4d0:	461a      	mov	r2, r3
    c4d2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c4d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4da:	210d      	movs	r1, #13
    c4dc:	5499      	strb	r1, [r3, r2]
    c4de:	f24c 3319 	movw	r3, #49945	; 0xc319
    c4e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4e6:	781b      	ldrb	r3, [r3, #0]
    c4e8:	3301      	adds	r3, #1
    c4ea:	b2da      	uxtb	r2, r3
    c4ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    c4f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4f4:	701a      	strb	r2, [r3, #0]
    c4f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    c4fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4fe:	781b      	ldrb	r3, [r3, #0]
    c500:	2bff      	cmp	r3, #255	; 0xff
    c502:	d105      	bne.n	c510 <send_debug+0x13c>
    c504:	f24c 3319 	movw	r3, #49945	; 0xc319
    c508:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c50c:	2200      	movs	r2, #0
    c50e:	701a      	strb	r2, [r3, #0]
    c510:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c514:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c518:	220d      	movs	r2, #13
    c51a:	701a      	strb	r2, [r3, #0]
    c51c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c520:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c524:	220d      	movs	r2, #13
    c526:	701a      	strb	r2, [r3, #0]
    c528:	f24c 3319 	movw	r3, #49945	; 0xc319
    c52c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c530:	781b      	ldrb	r3, [r3, #0]
    c532:	461a      	mov	r2, r3
    c534:	f24c 434f 	movw	r3, #50255	; 0xc44f
    c538:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c53c:	781b      	ldrb	r3, [r3, #0]
    c53e:	b2d9      	uxtb	r1, r3
    c540:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c544:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c548:	5499      	strb	r1, [r3, r2]
    c54a:	f24c 434f 	movw	r3, #50255	; 0xc44f
    c54e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c552:	781a      	ldrb	r2, [r3, #0]
    c554:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c558:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c55c:	781b      	ldrb	r3, [r3, #0]
    c55e:	4413      	add	r3, r2
    c560:	b2da      	uxtb	r2, r3
    c562:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c566:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c56a:	701a      	strb	r2, [r3, #0]
    c56c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c570:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c574:	781a      	ldrb	r2, [r3, #0]
    c576:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c57a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c57e:	781b      	ldrb	r3, [r3, #0]
    c580:	4413      	add	r3, r2
    c582:	b2da      	uxtb	r2, r3
    c584:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c588:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c58c:	701a      	strb	r2, [r3, #0]
    c58e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c596:	781b      	ldrb	r3, [r3, #0]
    c598:	3301      	adds	r3, #1
    c59a:	b2da      	uxtb	r2, r3
    c59c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c5a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5a4:	701a      	strb	r2, [r3, #0]
    c5a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    c5aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5ae:	781b      	ldrb	r3, [r3, #0]
    c5b0:	2bff      	cmp	r3, #255	; 0xff
    c5b2:	d105      	bne.n	c5c0 <send_debug+0x1ec>
    c5b4:	f24c 3319 	movw	r3, #49945	; 0xc319
    c5b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5bc:	2200      	movs	r2, #0
    c5be:	701a      	strb	r2, [r3, #0]
    c5c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    c5c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5c8:	781b      	ldrb	r3, [r3, #0]
    c5ca:	461a      	mov	r2, r3
    c5cc:	f24c 4350 	movw	r3, #50256	; 0xc450
    c5d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5d4:	7819      	ldrb	r1, [r3, #0]
    c5d6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c5da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5de:	5499      	strb	r1, [r3, r2]
    c5e0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c5e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5e8:	781a      	ldrb	r2, [r3, #0]
    c5ea:	f24c 4350 	movw	r3, #50256	; 0xc450
    c5ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5f2:	781b      	ldrb	r3, [r3, #0]
    c5f4:	4413      	add	r3, r2
    c5f6:	b2da      	uxtb	r2, r3
    c5f8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c5fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c600:	701a      	strb	r2, [r3, #0]
    c602:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c606:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c60a:	781a      	ldrb	r2, [r3, #0]
    c60c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c614:	781b      	ldrb	r3, [r3, #0]
    c616:	4413      	add	r3, r2
    c618:	b2da      	uxtb	r2, r3
    c61a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c61e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c622:	701a      	strb	r2, [r3, #0]
    c624:	f24c 3319 	movw	r3, #49945	; 0xc319
    c628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c62c:	781b      	ldrb	r3, [r3, #0]
    c62e:	3301      	adds	r3, #1
    c630:	b2da      	uxtb	r2, r3
    c632:	f24c 3319 	movw	r3, #49945	; 0xc319
    c636:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c63a:	701a      	strb	r2, [r3, #0]
    c63c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c640:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c644:	781b      	ldrb	r3, [r3, #0]
    c646:	2bff      	cmp	r3, #255	; 0xff
    c648:	d105      	bne.n	c656 <send_debug+0x282>
    c64a:	f24c 3319 	movw	r3, #49945	; 0xc319
    c64e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c652:	2200      	movs	r2, #0
    c654:	701a      	strb	r2, [r3, #0]
    c656:	f24c 3319 	movw	r3, #49945	; 0xc319
    c65a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c65e:	781b      	ldrb	r3, [r3, #0]
    c660:	461a      	mov	r2, r3
    c662:	f24c 3318 	movw	r3, #49944	; 0xc318
    c666:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c66a:	7819      	ldrb	r1, [r3, #0]
    c66c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c670:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c674:	5499      	strb	r1, [r3, r2]
    c676:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c67a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c67e:	781a      	ldrb	r2, [r3, #0]
    c680:	f24c 3318 	movw	r3, #49944	; 0xc318
    c684:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c688:	781b      	ldrb	r3, [r3, #0]
    c68a:	4413      	add	r3, r2
    c68c:	b2da      	uxtb	r2, r3
    c68e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c696:	701a      	strb	r2, [r3, #0]
    c698:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c69c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6a0:	781a      	ldrb	r2, [r3, #0]
    c6a2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c6a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6aa:	781b      	ldrb	r3, [r3, #0]
    c6ac:	4413      	add	r3, r2
    c6ae:	b2da      	uxtb	r2, r3
    c6b0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c6b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6b8:	701a      	strb	r2, [r3, #0]
    c6ba:	f24c 3319 	movw	r3, #49945	; 0xc319
    c6be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6c2:	781b      	ldrb	r3, [r3, #0]
    c6c4:	3301      	adds	r3, #1
    c6c6:	b2da      	uxtb	r2, r3
    c6c8:	f24c 3319 	movw	r3, #49945	; 0xc319
    c6cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6d0:	701a      	strb	r2, [r3, #0]
    c6d2:	f24c 3319 	movw	r3, #49945	; 0xc319
    c6d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6da:	781b      	ldrb	r3, [r3, #0]
    c6dc:	2bff      	cmp	r3, #255	; 0xff
    c6de:	d105      	bne.n	c6ec <send_debug+0x318>
    c6e0:	f24c 3319 	movw	r3, #49945	; 0xc319
    c6e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6e8:	2200      	movs	r2, #0
    c6ea:	701a      	strb	r2, [r3, #0]
    c6ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    c6f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6f4:	781b      	ldrb	r3, [r3, #0]
    c6f6:	461a      	mov	r2, r3
    c6f8:	f24c 53b7 	movw	r3, #50615	; 0xc5b7
    c6fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c700:	7819      	ldrb	r1, [r3, #0]
    c702:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c706:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c70a:	5499      	strb	r1, [r3, r2]
    c70c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c714:	781a      	ldrb	r2, [r3, #0]
    c716:	f24c 53b7 	movw	r3, #50615	; 0xc5b7
    c71a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c71e:	781b      	ldrb	r3, [r3, #0]
    c720:	4413      	add	r3, r2
    c722:	b2da      	uxtb	r2, r3
    c724:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c728:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c72c:	701a      	strb	r2, [r3, #0]
    c72e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c732:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c736:	781a      	ldrb	r2, [r3, #0]
    c738:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c73c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c740:	781b      	ldrb	r3, [r3, #0]
    c742:	4413      	add	r3, r2
    c744:	b2da      	uxtb	r2, r3
    c746:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c74a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c74e:	701a      	strb	r2, [r3, #0]
    c750:	f24c 3319 	movw	r3, #49945	; 0xc319
    c754:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c758:	781b      	ldrb	r3, [r3, #0]
    c75a:	3301      	adds	r3, #1
    c75c:	b2da      	uxtb	r2, r3
    c75e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c766:	701a      	strb	r2, [r3, #0]
    c768:	f24c 3319 	movw	r3, #49945	; 0xc319
    c76c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c770:	781b      	ldrb	r3, [r3, #0]
    c772:	2bff      	cmp	r3, #255	; 0xff
    c774:	d105      	bne.n	c782 <send_debug+0x3ae>
    c776:	f24c 3319 	movw	r3, #49945	; 0xc319
    c77a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c77e:	2200      	movs	r2, #0
    c780:	701a      	strb	r2, [r3, #0]
    c782:	f24c 3319 	movw	r3, #49945	; 0xc319
    c786:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c78a:	781b      	ldrb	r3, [r3, #0]
    c78c:	461a      	mov	r2, r3
    c78e:	f24c 3304 	movw	r3, #49924	; 0xc304
    c792:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c796:	7819      	ldrb	r1, [r3, #0]
    c798:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c79c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7a0:	5499      	strb	r1, [r3, r2]
    c7a2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c7a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7aa:	781a      	ldrb	r2, [r3, #0]
    c7ac:	f24c 3304 	movw	r3, #49924	; 0xc304
    c7b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7b4:	781b      	ldrb	r3, [r3, #0]
    c7b6:	4413      	add	r3, r2
    c7b8:	b2da      	uxtb	r2, r3
    c7ba:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c7be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7c2:	701a      	strb	r2, [r3, #0]
    c7c4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c7c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7cc:	781a      	ldrb	r2, [r3, #0]
    c7ce:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c7d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7d6:	781b      	ldrb	r3, [r3, #0]
    c7d8:	4413      	add	r3, r2
    c7da:	b2da      	uxtb	r2, r3
    c7dc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c7e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7e4:	701a      	strb	r2, [r3, #0]
    c7e6:	f24c 3319 	movw	r3, #49945	; 0xc319
    c7ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7ee:	781b      	ldrb	r3, [r3, #0]
    c7f0:	3301      	adds	r3, #1
    c7f2:	b2da      	uxtb	r2, r3
    c7f4:	f24c 3319 	movw	r3, #49945	; 0xc319
    c7f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7fc:	701a      	strb	r2, [r3, #0]
    c7fe:	f24c 3319 	movw	r3, #49945	; 0xc319
    c802:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c806:	781b      	ldrb	r3, [r3, #0]
    c808:	2bff      	cmp	r3, #255	; 0xff
    c80a:	d105      	bne.n	c818 <send_debug+0x444>
    c80c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c810:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c814:	2200      	movs	r2, #0
    c816:	701a      	strb	r2, [r3, #0]
    c818:	f24c 3319 	movw	r3, #49945	; 0xc319
    c81c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c820:	781b      	ldrb	r3, [r3, #0]
    c822:	461a      	mov	r2, r3
    c824:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c828:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c82c:	7819      	ldrb	r1, [r3, #0]
    c82e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c832:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c836:	5499      	strb	r1, [r3, r2]
    c838:	f24c 3319 	movw	r3, #49945	; 0xc319
    c83c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c840:	781b      	ldrb	r3, [r3, #0]
    c842:	3301      	adds	r3, #1
    c844:	b2da      	uxtb	r2, r3
    c846:	f24c 3319 	movw	r3, #49945	; 0xc319
    c84a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c84e:	701a      	strb	r2, [r3, #0]
    c850:	f24c 3319 	movw	r3, #49945	; 0xc319
    c854:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c858:	781b      	ldrb	r3, [r3, #0]
    c85a:	2bff      	cmp	r3, #255	; 0xff
    c85c:	d105      	bne.n	c86a <send_debug+0x496>
    c85e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c862:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c866:	2200      	movs	r2, #0
    c868:	701a      	strb	r2, [r3, #0]
    c86a:	f24c 3319 	movw	r3, #49945	; 0xc319
    c86e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c872:	781b      	ldrb	r3, [r3, #0]
    c874:	461a      	mov	r2, r3
    c876:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c87a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c87e:	7819      	ldrb	r1, [r3, #0]
    c880:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c884:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c888:	5499      	strb	r1, [r3, r2]
    c88a:	f24c 3319 	movw	r3, #49945	; 0xc319
    c88e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c892:	781b      	ldrb	r3, [r3, #0]
    c894:	3301      	adds	r3, #1
    c896:	b2da      	uxtb	r2, r3
    c898:	f24c 3319 	movw	r3, #49945	; 0xc319
    c89c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8a0:	701a      	strb	r2, [r3, #0]
    c8a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    c8a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8aa:	781b      	ldrb	r3, [r3, #0]
    c8ac:	2bff      	cmp	r3, #255	; 0xff
    c8ae:	d105      	bne.n	c8bc <send_debug+0x4e8>
    c8b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    c8b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8b8:	2200      	movs	r2, #0
    c8ba:	701a      	strb	r2, [r3, #0]
    c8bc:	f242 0339 	movw	r3, #8249	; 0x2039
    c8c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8c4:	781b      	ldrb	r3, [r3, #0]
    c8c6:	b2db      	uxtb	r3, r3
    c8c8:	f003 0310 	and.w	r3, r3, #16
    c8cc:	2b00      	cmp	r3, #0
    c8ce:	d15a      	bne.n	c986 <send_debug+0x5b2>
    c8d0:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c8d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8d8:	781b      	ldrb	r3, [r3, #0]
    c8da:	b2db      	uxtb	r3, r3
    c8dc:	461a      	mov	r2, r3
    c8de:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c8e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8e6:	5c9a      	ldrb	r2, [r3, r2]
    c8e8:	f24c 431b 	movw	r3, #50203	; 0xc41b
    c8ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8f0:	701a      	strb	r2, [r3, #0]
    c8f2:	f24c 431c 	movw	r3, #50204	; 0xc41c
    c8f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8fa:	2200      	movs	r2, #0
    c8fc:	701a      	strb	r2, [r3, #0]
    c8fe:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c906:	781b      	ldrb	r3, [r3, #0]
    c908:	b2db      	uxtb	r3, r3
    c90a:	3301      	adds	r3, #1
    c90c:	b2da      	uxtb	r2, r3
    c90e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c916:	701a      	strb	r2, [r3, #0]
    c918:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c91c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c920:	781b      	ldrb	r3, [r3, #0]
    c922:	b2db      	uxtb	r3, r3
    c924:	2bff      	cmp	r3, #255	; 0xff
    c926:	d105      	bne.n	c934 <send_debug+0x560>
    c928:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c92c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c930:	2200      	movs	r2, #0
    c932:	701a      	strb	r2, [r3, #0]
    c934:	f242 0338 	movw	r3, #8248	; 0x2038
    c938:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c93c:	f242 0238 	movw	r2, #8248	; 0x2038
    c940:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c944:	7812      	ldrb	r2, [r2, #0]
    c946:	b2d2      	uxtb	r2, r2
    c948:	f042 0201 	orr.w	r2, r2, #1
    c94c:	b2d2      	uxtb	r2, r2
    c94e:	701a      	strb	r2, [r3, #0]
    c950:	f242 0339 	movw	r3, #8249	; 0x2039
    c954:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c958:	f242 0239 	movw	r2, #8249	; 0x2039
    c95c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c960:	7812      	ldrb	r2, [r2, #0]
    c962:	b2d2      	uxtb	r2, r2
    c964:	f042 0210 	orr.w	r2, r2, #16
    c968:	b2d2      	uxtb	r2, r2
    c96a:	701a      	strb	r2, [r3, #0]
    c96c:	e00b      	b.n	c986 <send_debug+0x5b2>
    c96e:	f24c 3318 	movw	r3, #49944	; 0xc318
    c972:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c976:	781b      	ldrb	r3, [r3, #0]
    c978:	3301      	adds	r3, #1
    c97a:	b2da      	uxtb	r2, r3
    c97c:	f24c 3318 	movw	r3, #49944	; 0xc318
    c980:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c984:	701a      	strb	r2, [r3, #0]
}
    c986:	46bd      	mov	sp, r7
    c988:	f85d 7b04 	ldr.w	r7, [sp], #4
    c98c:	4770      	bx	lr
    c98e:	bf00      	nop

0000c990 <send_nav_ref>:
void send_nav_ref(void){  //10000ms
    c990:	b480      	push	{r7}
    c992:	af00      	add	r7, sp, #0
  if(!boot)
    c994:	f240 533d 	movw	r3, #1341	; 0x53d
    c998:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c99c:	781b      	ldrb	r3, [r3, #0]
    c99e:	2b00      	cmp	r3, #0
    c9a0:	f040 83a9 	bne.w	d0f6 <send_nav_ref+0x766>
  { if (count % 100 == 49) PERIODIC_SEND_NAVIGATION_REF();}
    c9a4:	f24c 3311 	movw	r3, #49937	; 0xc311
    c9a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9ac:	781a      	ldrb	r2, [r3, #0]
    c9ae:	f248 531f 	movw	r3, #34079	; 0x851f
    c9b2:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c9b6:	fba3 1302 	umull	r1, r3, r3, r2
    c9ba:	095b      	lsrs	r3, r3, #5
    c9bc:	2164      	movs	r1, #100	; 0x64
    c9be:	fb01 f303 	mul.w	r3, r1, r3
    c9c2:	1ad3      	subs	r3, r2, r3
    c9c4:	b2db      	uxtb	r3, r3
    c9c6:	2b31      	cmp	r3, #49	; 0x31
    c9c8:	f040 8395 	bne.w	d0f6 <send_nav_ref+0x766>
    c9cc:	f24c 3319 	movw	r3, #49945	; 0xc319
    c9d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9d4:	781a      	ldrb	r2, [r3, #0]
    c9d6:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c9da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9de:	781b      	ldrb	r3, [r3, #0]
    c9e0:	b2db      	uxtb	r3, r3
    c9e2:	429a      	cmp	r2, r3
    c9e4:	d313      	bcc.n	ca0e <send_nav_ref+0x7e>
    c9e6:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c9ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9ee:	781b      	ldrb	r3, [r3, #0]
    c9f0:	b2db      	uxtb	r3, r3
    c9f2:	461a      	mov	r2, r3
    c9f4:	f24c 3319 	movw	r3, #49945	; 0xc319
    c9f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9fc:	781b      	ldrb	r3, [r3, #0]
    c9fe:	1ad3      	subs	r3, r2, r3
    ca00:	33ff      	adds	r3, #255	; 0xff
    ca02:	2b0c      	cmp	r3, #12
    ca04:	bfd4      	ite	le
    ca06:	2300      	movle	r3, #0
    ca08:	2301      	movgt	r3, #1
    ca0a:	b2db      	uxtb	r3, r3
    ca0c:	e011      	b.n	ca32 <send_nav_ref+0xa2>
    ca0e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ca12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca16:	781b      	ldrb	r3, [r3, #0]
    ca18:	b2db      	uxtb	r3, r3
    ca1a:	461a      	mov	r2, r3
    ca1c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ca20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca24:	781b      	ldrb	r3, [r3, #0]
    ca26:	1ad3      	subs	r3, r2, r3
    ca28:	2b0c      	cmp	r3, #12
    ca2a:	bfd4      	ite	le
    ca2c:	2300      	movle	r3, #0
    ca2e:	2301      	movgt	r3, #1
    ca30:	b2db      	uxtb	r3, r3
    ca32:	2b00      	cmp	r3, #0
    ca34:	f000 8353 	beq.w	d0de <send_nav_ref+0x74e>
    ca38:	f24c 3319 	movw	r3, #49945	; 0xc319
    ca3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca40:	781b      	ldrb	r3, [r3, #0]
    ca42:	461a      	mov	r2, r3
    ca44:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ca48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca4c:	2105      	movs	r1, #5
    ca4e:	5499      	strb	r1, [r3, r2]
    ca50:	f24c 3319 	movw	r3, #49945	; 0xc319
    ca54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca58:	781b      	ldrb	r3, [r3, #0]
    ca5a:	3301      	adds	r3, #1
    ca5c:	b2da      	uxtb	r2, r3
    ca5e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ca62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca66:	701a      	strb	r2, [r3, #0]
    ca68:	f24c 3319 	movw	r3, #49945	; 0xc319
    ca6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca70:	781b      	ldrb	r3, [r3, #0]
    ca72:	2bff      	cmp	r3, #255	; 0xff
    ca74:	d105      	bne.n	ca82 <send_nav_ref+0xf2>
    ca76:	f24c 3319 	movw	r3, #49945	; 0xc319
    ca7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca7e:	2200      	movs	r2, #0
    ca80:	701a      	strb	r2, [r3, #0]
    ca82:	f24c 3319 	movw	r3, #49945	; 0xc319
    ca86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca8a:	781b      	ldrb	r3, [r3, #0]
    ca8c:	461a      	mov	r2, r3
    ca8e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ca92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca96:	2109      	movs	r1, #9
    ca98:	5499      	strb	r1, [r3, r2]
    ca9a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ca9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caa2:	781b      	ldrb	r3, [r3, #0]
    caa4:	3301      	adds	r3, #1
    caa6:	b2da      	uxtb	r2, r3
    caa8:	f24c 3319 	movw	r3, #49945	; 0xc319
    caac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cab0:	701a      	strb	r2, [r3, #0]
    cab2:	f24c 3319 	movw	r3, #49945	; 0xc319
    cab6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caba:	781b      	ldrb	r3, [r3, #0]
    cabc:	2bff      	cmp	r3, #255	; 0xff
    cabe:	d105      	bne.n	cacc <send_nav_ref+0x13c>
    cac0:	f24c 3319 	movw	r3, #49945	; 0xc319
    cac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cac8:	2200      	movs	r2, #0
    caca:	701a      	strb	r2, [r3, #0]
    cacc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cad0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cad4:	2209      	movs	r2, #9
    cad6:	701a      	strb	r2, [r3, #0]
    cad8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cadc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cae0:	2209      	movs	r2, #9
    cae2:	701a      	strb	r2, [r3, #0]
    cae4:	f24c 3319 	movw	r3, #49945	; 0xc319
    cae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caec:	781b      	ldrb	r3, [r3, #0]
    caee:	461a      	mov	r2, r3
    caf0:	f648 336c 	movw	r3, #35692	; 0x8b6c
    caf4:	f2c0 0301 	movt	r3, #1
    caf8:	7819      	ldrb	r1, [r3, #0]
    cafa:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cafe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb02:	5499      	strb	r1, [r3, r2]
    cb04:	f648 336c 	movw	r3, #35692	; 0x8b6c
    cb08:	f2c0 0301 	movt	r3, #1
    cb0c:	781a      	ldrb	r2, [r3, #0]
    cb0e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cb12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb16:	781b      	ldrb	r3, [r3, #0]
    cb18:	4413      	add	r3, r2
    cb1a:	b2da      	uxtb	r2, r3
    cb1c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cb20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb24:	701a      	strb	r2, [r3, #0]
    cb26:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cb2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb2e:	781a      	ldrb	r2, [r3, #0]
    cb30:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cb34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb38:	781b      	ldrb	r3, [r3, #0]
    cb3a:	4413      	add	r3, r2
    cb3c:	b2da      	uxtb	r2, r3
    cb3e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cb42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb46:	701a      	strb	r2, [r3, #0]
    cb48:	f24c 3319 	movw	r3, #49945	; 0xc319
    cb4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb50:	781b      	ldrb	r3, [r3, #0]
    cb52:	3301      	adds	r3, #1
    cb54:	b2da      	uxtb	r2, r3
    cb56:	f24c 3319 	movw	r3, #49945	; 0xc319
    cb5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb5e:	701a      	strb	r2, [r3, #0]
    cb60:	f24c 3319 	movw	r3, #49945	; 0xc319
    cb64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb68:	781b      	ldrb	r3, [r3, #0]
    cb6a:	2bff      	cmp	r3, #255	; 0xff
    cb6c:	d105      	bne.n	cb7a <send_nav_ref+0x1ea>
    cb6e:	f24c 3319 	movw	r3, #49945	; 0xc319
    cb72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb76:	2200      	movs	r2, #0
    cb78:	701a      	strb	r2, [r3, #0]
    cb7a:	f24c 3319 	movw	r3, #49945	; 0xc319
    cb7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb82:	781b      	ldrb	r3, [r3, #0]
    cb84:	461a      	mov	r2, r3
    cb86:	f648 336c 	movw	r3, #35692	; 0x8b6c
    cb8a:	f2c0 0301 	movt	r3, #1
    cb8e:	7859      	ldrb	r1, [r3, #1]
    cb90:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cb94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb98:	5499      	strb	r1, [r3, r2]
    cb9a:	4bd2      	ldr	r3, [pc, #840]	; (cee4 <send_nav_ref+0x554>)
    cb9c:	781a      	ldrb	r2, [r3, #0]
    cb9e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cba6:	781b      	ldrb	r3, [r3, #0]
    cba8:	4413      	add	r3, r2
    cbaa:	b2da      	uxtb	r2, r3
    cbac:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cbb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbb4:	701a      	strb	r2, [r3, #0]
    cbb6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cbba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbbe:	781a      	ldrb	r2, [r3, #0]
    cbc0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cbc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbc8:	781b      	ldrb	r3, [r3, #0]
    cbca:	4413      	add	r3, r2
    cbcc:	b2da      	uxtb	r2, r3
    cbce:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cbd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbd6:	701a      	strb	r2, [r3, #0]
    cbd8:	f24c 3319 	movw	r3, #49945	; 0xc319
    cbdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbe0:	781b      	ldrb	r3, [r3, #0]
    cbe2:	3301      	adds	r3, #1
    cbe4:	b2da      	uxtb	r2, r3
    cbe6:	f24c 3319 	movw	r3, #49945	; 0xc319
    cbea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbee:	701a      	strb	r2, [r3, #0]
    cbf0:	f24c 3319 	movw	r3, #49945	; 0xc319
    cbf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbf8:	781b      	ldrb	r3, [r3, #0]
    cbfa:	2bff      	cmp	r3, #255	; 0xff
    cbfc:	d105      	bne.n	cc0a <send_nav_ref+0x27a>
    cbfe:	f24c 3319 	movw	r3, #49945	; 0xc319
    cc02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc06:	2200      	movs	r2, #0
    cc08:	701a      	strb	r2, [r3, #0]
    cc0a:	f24c 3319 	movw	r3, #49945	; 0xc319
    cc0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc12:	781b      	ldrb	r3, [r3, #0]
    cc14:	461a      	mov	r2, r3
    cc16:	f648 336c 	movw	r3, #35692	; 0x8b6c
    cc1a:	f2c0 0301 	movt	r3, #1
    cc1e:	7899      	ldrb	r1, [r3, #2]
    cc20:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cc24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc28:	5499      	strb	r1, [r3, r2]
    cc2a:	4baf      	ldr	r3, [pc, #700]	; (cee8 <send_nav_ref+0x558>)
    cc2c:	781a      	ldrb	r2, [r3, #0]
    cc2e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cc32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc36:	781b      	ldrb	r3, [r3, #0]
    cc38:	4413      	add	r3, r2
    cc3a:	b2da      	uxtb	r2, r3
    cc3c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cc40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc44:	701a      	strb	r2, [r3, #0]
    cc46:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cc4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc4e:	781a      	ldrb	r2, [r3, #0]
    cc50:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cc54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc58:	781b      	ldrb	r3, [r3, #0]
    cc5a:	4413      	add	r3, r2
    cc5c:	b2da      	uxtb	r2, r3
    cc5e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cc62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc66:	701a      	strb	r2, [r3, #0]
    cc68:	f24c 3319 	movw	r3, #49945	; 0xc319
    cc6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc70:	781b      	ldrb	r3, [r3, #0]
    cc72:	3301      	adds	r3, #1
    cc74:	b2da      	uxtb	r2, r3
    cc76:	f24c 3319 	movw	r3, #49945	; 0xc319
    cc7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc7e:	701a      	strb	r2, [r3, #0]
    cc80:	f24c 3319 	movw	r3, #49945	; 0xc319
    cc84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc88:	781b      	ldrb	r3, [r3, #0]
    cc8a:	2bff      	cmp	r3, #255	; 0xff
    cc8c:	d105      	bne.n	cc9a <send_nav_ref+0x30a>
    cc8e:	f24c 3319 	movw	r3, #49945	; 0xc319
    cc92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc96:	2200      	movs	r2, #0
    cc98:	701a      	strb	r2, [r3, #0]
    cc9a:	f24c 3319 	movw	r3, #49945	; 0xc319
    cc9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cca2:	781b      	ldrb	r3, [r3, #0]
    cca4:	461a      	mov	r2, r3
    cca6:	f648 336c 	movw	r3, #35692	; 0x8b6c
    ccaa:	f2c0 0301 	movt	r3, #1
    ccae:	78d9      	ldrb	r1, [r3, #3]
    ccb0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ccb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccb8:	5499      	strb	r1, [r3, r2]
    ccba:	4b8c      	ldr	r3, [pc, #560]	; (ceec <send_nav_ref+0x55c>)
    ccbc:	781a      	ldrb	r2, [r3, #0]
    ccbe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ccc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccc6:	781b      	ldrb	r3, [r3, #0]
    ccc8:	4413      	add	r3, r2
    ccca:	b2da      	uxtb	r2, r3
    cccc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ccd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccd4:	701a      	strb	r2, [r3, #0]
    ccd6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ccda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccde:	781a      	ldrb	r2, [r3, #0]
    cce0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cce8:	781b      	ldrb	r3, [r3, #0]
    ccea:	4413      	add	r3, r2
    ccec:	b2da      	uxtb	r2, r3
    ccee:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ccf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccf6:	701a      	strb	r2, [r3, #0]
    ccf8:	f24c 3319 	movw	r3, #49945	; 0xc319
    ccfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd00:	781b      	ldrb	r3, [r3, #0]
    cd02:	3301      	adds	r3, #1
    cd04:	b2da      	uxtb	r2, r3
    cd06:	f24c 3319 	movw	r3, #49945	; 0xc319
    cd0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd0e:	701a      	strb	r2, [r3, #0]
    cd10:	f24c 3319 	movw	r3, #49945	; 0xc319
    cd14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd18:	781b      	ldrb	r3, [r3, #0]
    cd1a:	2bff      	cmp	r3, #255	; 0xff
    cd1c:	d105      	bne.n	cd2a <send_nav_ref+0x39a>
    cd1e:	f24c 3319 	movw	r3, #49945	; 0xc319
    cd22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd26:	2200      	movs	r2, #0
    cd28:	701a      	strb	r2, [r3, #0]
    cd2a:	f24c 3319 	movw	r3, #49945	; 0xc319
    cd2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd32:	781b      	ldrb	r3, [r3, #0]
    cd34:	461a      	mov	r2, r3
    cd36:	f648 3370 	movw	r3, #35696	; 0x8b70
    cd3a:	f2c0 0301 	movt	r3, #1
    cd3e:	7819      	ldrb	r1, [r3, #0]
    cd40:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cd44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd48:	5499      	strb	r1, [r3, r2]
    cd4a:	f648 3370 	movw	r3, #35696	; 0x8b70
    cd4e:	f2c0 0301 	movt	r3, #1
    cd52:	781a      	ldrb	r2, [r3, #0]
    cd54:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cd58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd5c:	781b      	ldrb	r3, [r3, #0]
    cd5e:	4413      	add	r3, r2
    cd60:	b2da      	uxtb	r2, r3
    cd62:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cd66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd6a:	701a      	strb	r2, [r3, #0]
    cd6c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cd70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd74:	781a      	ldrb	r2, [r3, #0]
    cd76:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cd7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd7e:	781b      	ldrb	r3, [r3, #0]
    cd80:	4413      	add	r3, r2
    cd82:	b2da      	uxtb	r2, r3
    cd84:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cd88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd8c:	701a      	strb	r2, [r3, #0]
    cd8e:	f24c 3319 	movw	r3, #49945	; 0xc319
    cd92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd96:	781b      	ldrb	r3, [r3, #0]
    cd98:	3301      	adds	r3, #1
    cd9a:	b2da      	uxtb	r2, r3
    cd9c:	f24c 3319 	movw	r3, #49945	; 0xc319
    cda0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cda4:	701a      	strb	r2, [r3, #0]
    cda6:	f24c 3319 	movw	r3, #49945	; 0xc319
    cdaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdae:	781b      	ldrb	r3, [r3, #0]
    cdb0:	2bff      	cmp	r3, #255	; 0xff
    cdb2:	d105      	bne.n	cdc0 <send_nav_ref+0x430>
    cdb4:	f24c 3319 	movw	r3, #49945	; 0xc319
    cdb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdbc:	2200      	movs	r2, #0
    cdbe:	701a      	strb	r2, [r3, #0]
    cdc0:	f24c 3319 	movw	r3, #49945	; 0xc319
    cdc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdc8:	781b      	ldrb	r3, [r3, #0]
    cdca:	461a      	mov	r2, r3
    cdcc:	f648 3370 	movw	r3, #35696	; 0x8b70
    cdd0:	f2c0 0301 	movt	r3, #1
    cdd4:	7859      	ldrb	r1, [r3, #1]
    cdd6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cdda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdde:	5499      	strb	r1, [r3, r2]
    cde0:	4b43      	ldr	r3, [pc, #268]	; (cef0 <send_nav_ref+0x560>)
    cde2:	781a      	ldrb	r2, [r3, #0]
    cde4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cde8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdec:	781b      	ldrb	r3, [r3, #0]
    cdee:	4413      	add	r3, r2
    cdf0:	b2da      	uxtb	r2, r3
    cdf2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cdf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdfa:	701a      	strb	r2, [r3, #0]
    cdfc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ce00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce04:	781a      	ldrb	r2, [r3, #0]
    ce06:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ce0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce0e:	781b      	ldrb	r3, [r3, #0]
    ce10:	4413      	add	r3, r2
    ce12:	b2da      	uxtb	r2, r3
    ce14:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ce18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce1c:	701a      	strb	r2, [r3, #0]
    ce1e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce26:	781b      	ldrb	r3, [r3, #0]
    ce28:	3301      	adds	r3, #1
    ce2a:	b2da      	uxtb	r2, r3
    ce2c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce34:	701a      	strb	r2, [r3, #0]
    ce36:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce3e:	781b      	ldrb	r3, [r3, #0]
    ce40:	2bff      	cmp	r3, #255	; 0xff
    ce42:	d105      	bne.n	ce50 <send_nav_ref+0x4c0>
    ce44:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce4c:	2200      	movs	r2, #0
    ce4e:	701a      	strb	r2, [r3, #0]
    ce50:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce58:	781b      	ldrb	r3, [r3, #0]
    ce5a:	461a      	mov	r2, r3
    ce5c:	f648 3370 	movw	r3, #35696	; 0x8b70
    ce60:	f2c0 0301 	movt	r3, #1
    ce64:	7899      	ldrb	r1, [r3, #2]
    ce66:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ce6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce6e:	5499      	strb	r1, [r3, r2]
    ce70:	4b20      	ldr	r3, [pc, #128]	; (cef4 <send_nav_ref+0x564>)
    ce72:	781a      	ldrb	r2, [r3, #0]
    ce74:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ce78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce7c:	781b      	ldrb	r3, [r3, #0]
    ce7e:	4413      	add	r3, r2
    ce80:	b2da      	uxtb	r2, r3
    ce82:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ce86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce8a:	701a      	strb	r2, [r3, #0]
    ce8c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ce90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce94:	781a      	ldrb	r2, [r3, #0]
    ce96:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ce9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce9e:	781b      	ldrb	r3, [r3, #0]
    cea0:	4413      	add	r3, r2
    cea2:	b2da      	uxtb	r2, r3
    cea4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ceac:	701a      	strb	r2, [r3, #0]
    ceae:	f24c 3319 	movw	r3, #49945	; 0xc319
    ceb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ceb6:	781b      	ldrb	r3, [r3, #0]
    ceb8:	3301      	adds	r3, #1
    ceba:	b2da      	uxtb	r2, r3
    cebc:	f24c 3319 	movw	r3, #49945	; 0xc319
    cec0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cec4:	701a      	strb	r2, [r3, #0]
    cec6:	f24c 3319 	movw	r3, #49945	; 0xc319
    ceca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cece:	781b      	ldrb	r3, [r3, #0]
    ced0:	2bff      	cmp	r3, #255	; 0xff
    ced2:	d111      	bne.n	cef8 <send_nav_ref+0x568>
    ced4:	f24c 3319 	movw	r3, #49945	; 0xc319
    ced8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cedc:	2200      	movs	r2, #0
    cede:	701a      	strb	r2, [r3, #0]
    cee0:	e00a      	b.n	cef8 <send_nav_ref+0x568>
    cee2:	bf00      	nop
    cee4:	00018b6d 	.word	0x00018b6d
    cee8:	00018b6e 	.word	0x00018b6e
    ceec:	00018b6f 	.word	0x00018b6f
    cef0:	00018b71 	.word	0x00018b71
    cef4:	00018b72 	.word	0x00018b72
    cef8:	f24c 3319 	movw	r3, #49945	; 0xc319
    cefc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf00:	781b      	ldrb	r3, [r3, #0]
    cf02:	461a      	mov	r2, r3
    cf04:	f648 3370 	movw	r3, #35696	; 0x8b70
    cf08:	f2c0 0301 	movt	r3, #1
    cf0c:	78d9      	ldrb	r1, [r3, #3]
    cf0e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cf12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf16:	5499      	strb	r1, [r3, r2]
    cf18:	4b79      	ldr	r3, [pc, #484]	; (d100 <send_nav_ref+0x770>)
    cf1a:	781a      	ldrb	r2, [r3, #0]
    cf1c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cf20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf24:	781b      	ldrb	r3, [r3, #0]
    cf26:	4413      	add	r3, r2
    cf28:	b2da      	uxtb	r2, r3
    cf2a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cf2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf32:	701a      	strb	r2, [r3, #0]
    cf34:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cf38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf3c:	781a      	ldrb	r2, [r3, #0]
    cf3e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cf42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf46:	781b      	ldrb	r3, [r3, #0]
    cf48:	4413      	add	r3, r2
    cf4a:	b2da      	uxtb	r2, r3
    cf4c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cf50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf54:	701a      	strb	r2, [r3, #0]
    cf56:	f24c 3319 	movw	r3, #49945	; 0xc319
    cf5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf5e:	781b      	ldrb	r3, [r3, #0]
    cf60:	3301      	adds	r3, #1
    cf62:	b2da      	uxtb	r2, r3
    cf64:	f24c 3319 	movw	r3, #49945	; 0xc319
    cf68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf6c:	701a      	strb	r2, [r3, #0]
    cf6e:	f24c 3319 	movw	r3, #49945	; 0xc319
    cf72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf76:	781b      	ldrb	r3, [r3, #0]
    cf78:	2bff      	cmp	r3, #255	; 0xff
    cf7a:	d105      	bne.n	cf88 <send_nav_ref+0x5f8>
    cf7c:	f24c 3319 	movw	r3, #49945	; 0xc319
    cf80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf84:	2200      	movs	r2, #0
    cf86:	701a      	strb	r2, [r3, #0]
    cf88:	f24c 3319 	movw	r3, #49945	; 0xc319
    cf8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf90:	781b      	ldrb	r3, [r3, #0]
    cf92:	461a      	mov	r2, r3
    cf94:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cf98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf9c:	7819      	ldrb	r1, [r3, #0]
    cf9e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cfa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfa6:	5499      	strb	r1, [r3, r2]
    cfa8:	f24c 3319 	movw	r3, #49945	; 0xc319
    cfac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfb0:	781b      	ldrb	r3, [r3, #0]
    cfb2:	3301      	adds	r3, #1
    cfb4:	b2da      	uxtb	r2, r3
    cfb6:	f24c 3319 	movw	r3, #49945	; 0xc319
    cfba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfbe:	701a      	strb	r2, [r3, #0]
    cfc0:	f24c 3319 	movw	r3, #49945	; 0xc319
    cfc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfc8:	781b      	ldrb	r3, [r3, #0]
    cfca:	2bff      	cmp	r3, #255	; 0xff
    cfcc:	d105      	bne.n	cfda <send_nav_ref+0x64a>
    cfce:	f24c 3319 	movw	r3, #49945	; 0xc319
    cfd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfd6:	2200      	movs	r2, #0
    cfd8:	701a      	strb	r2, [r3, #0]
    cfda:	f24c 3319 	movw	r3, #49945	; 0xc319
    cfde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfe2:	781b      	ldrb	r3, [r3, #0]
    cfe4:	461a      	mov	r2, r3
    cfe6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cfea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfee:	7819      	ldrb	r1, [r3, #0]
    cff0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cff4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cff8:	5499      	strb	r1, [r3, r2]
    cffa:	f24c 3319 	movw	r3, #49945	; 0xc319
    cffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d002:	781b      	ldrb	r3, [r3, #0]
    d004:	3301      	adds	r3, #1
    d006:	b2da      	uxtb	r2, r3
    d008:	f24c 3319 	movw	r3, #49945	; 0xc319
    d00c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d010:	701a      	strb	r2, [r3, #0]
    d012:	f24c 3319 	movw	r3, #49945	; 0xc319
    d016:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d01a:	781b      	ldrb	r3, [r3, #0]
    d01c:	2bff      	cmp	r3, #255	; 0xff
    d01e:	d105      	bne.n	d02c <send_nav_ref+0x69c>
    d020:	f24c 3319 	movw	r3, #49945	; 0xc319
    d024:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d028:	2200      	movs	r2, #0
    d02a:	701a      	strb	r2, [r3, #0]
    d02c:	f242 0339 	movw	r3, #8249	; 0x2039
    d030:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d034:	781b      	ldrb	r3, [r3, #0]
    d036:	b2db      	uxtb	r3, r3
    d038:	f003 0310 	and.w	r3, r3, #16
    d03c:	2b00      	cmp	r3, #0
    d03e:	d15a      	bne.n	d0f6 <send_nav_ref+0x766>
    d040:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d044:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d048:	781b      	ldrb	r3, [r3, #0]
    d04a:	b2db      	uxtb	r3, r3
    d04c:	461a      	mov	r2, r3
    d04e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d052:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d056:	5c9a      	ldrb	r2, [r3, r2]
    d058:	f24c 431b 	movw	r3, #50203	; 0xc41b
    d05c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d060:	701a      	strb	r2, [r3, #0]
    d062:	f24c 431c 	movw	r3, #50204	; 0xc41c
    d066:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d06a:	2200      	movs	r2, #0
    d06c:	701a      	strb	r2, [r3, #0]
    d06e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d072:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d076:	781b      	ldrb	r3, [r3, #0]
    d078:	b2db      	uxtb	r3, r3
    d07a:	3301      	adds	r3, #1
    d07c:	b2da      	uxtb	r2, r3
    d07e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d082:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d086:	701a      	strb	r2, [r3, #0]
    d088:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d08c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d090:	781b      	ldrb	r3, [r3, #0]
    d092:	b2db      	uxtb	r3, r3
    d094:	2bff      	cmp	r3, #255	; 0xff
    d096:	d105      	bne.n	d0a4 <send_nav_ref+0x714>
    d098:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d09c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0a0:	2200      	movs	r2, #0
    d0a2:	701a      	strb	r2, [r3, #0]
    d0a4:	f242 0338 	movw	r3, #8248	; 0x2038
    d0a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0ac:	f242 0238 	movw	r2, #8248	; 0x2038
    d0b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d0b4:	7812      	ldrb	r2, [r2, #0]
    d0b6:	b2d2      	uxtb	r2, r2
    d0b8:	f042 0201 	orr.w	r2, r2, #1
    d0bc:	b2d2      	uxtb	r2, r2
    d0be:	701a      	strb	r2, [r3, #0]
    d0c0:	f242 0339 	movw	r3, #8249	; 0x2039
    d0c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0c8:	f242 0239 	movw	r2, #8249	; 0x2039
    d0cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d0d0:	7812      	ldrb	r2, [r2, #0]
    d0d2:	b2d2      	uxtb	r2, r2
    d0d4:	f042 0210 	orr.w	r2, r2, #16
    d0d8:	b2d2      	uxtb	r2, r2
    d0da:	701a      	strb	r2, [r3, #0]
    d0dc:	e00b      	b.n	d0f6 <send_nav_ref+0x766>
    d0de:	f24c 3318 	movw	r3, #49944	; 0xc318
    d0e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0e6:	781b      	ldrb	r3, [r3, #0]
    d0e8:	3301      	adds	r3, #1
    d0ea:	b2da      	uxtb	r2, r3
    d0ec:	f24c 3318 	movw	r3, #49944	; 0xc318
    d0f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0f4:	701a      	strb	r2, [r3, #0]
  //vPrintString("S_13 reporting_task end!\n\r");
}
    d0f6:	46bd      	mov	sp, r7
    d0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    d0fc:	4770      	bx	lr
    d0fe:	bf00      	nop
    d100:	00018b73 	.word	0x00018b73

0000d104 <inflight_calib_mode_update>:

/** \fn inline uint8_t inflight_calib_mode_update ( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t inflight_calib_mode_update ( void ) {
    d104:	b480      	push	{r7}
    d106:	b083      	sub	sp, #12
    d108:	af00      	add	r7, sp, #0
  ModeUpdate(inflight_calib_mode, IF_CALIB_MODE_OF_PULSE(from_fbw.channels[RADIO_CALIB]));
    d10a:	f24c 4320 	movw	r3, #50208	; 0xc420
    d10e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d112:	8a1b      	ldrh	r3, [r3, #16]
    d114:	b21b      	sxth	r3, r3
    d116:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    d11a:	db0d      	blt.n	d138 <inflight_calib_mode_update+0x34>
    d11c:	f24c 4320 	movw	r3, #50208	; 0xc420
    d120:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d124:	8a1b      	ldrh	r3, [r3, #16]
    d126:	b21a      	sxth	r2, r3
    d128:	f640 437f 	movw	r3, #3199	; 0xc7f
    d12c:	429a      	cmp	r2, r3
    d12e:	bfd4      	ite	le
    d130:	2300      	movle	r3, #0
    d132:	2301      	movgt	r3, #1
    d134:	b2db      	uxtb	r3, r3
    d136:	e000      	b.n	d13a <inflight_calib_mode_update+0x36>
    d138:	2302      	movs	r3, #2
    d13a:	71fb      	strb	r3, [r7, #7]
    d13c:	f64c 132c 	movw	r3, #51500	; 0xc92c
    d140:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d144:	781b      	ldrb	r3, [r3, #0]
    d146:	79fa      	ldrb	r2, [r7, #7]
    d148:	429a      	cmp	r2, r3
    d14a:	d007      	beq.n	d15c <inflight_calib_mode_update+0x58>
    d14c:	f64c 132c 	movw	r3, #51500	; 0xc92c
    d150:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d154:	79fa      	ldrb	r2, [r7, #7]
    d156:	701a      	strb	r2, [r3, #0]
    d158:	2301      	movs	r3, #1
    d15a:	e000      	b.n	d15e <inflight_calib_mode_update+0x5a>
    d15c:	2300      	movs	r3, #0
}
    d15e:	4618      	mov	r0, r3
    d160:	370c      	adds	r7, #12
    d162:	46bd      	mov	sp, r7
    d164:	f85d 7b04 	ldr.w	r7, [sp], #4
    d168:	4770      	bx	lr
    d16a:	bf00      	nop

0000d16c <radio_control_task>:


/** \fn inline void radio_control_task( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
void radio_control_task( void ) {
    d16c:	b580      	push	{r7, lr}
    d16e:	b082      	sub	sp, #8
    d170:	af00      	add	r7, sp, #0
  bool_t calib_mode_changed;
	//vPrintString("S_3 radio_control_task start! \n\r"); //SunnyBeike
    //add by wanbo
    link_fbw_receive_valid = 1;
    d172:	f24c 434e 	movw	r3, #50254	; 0xc44e
    d176:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d17a:	2201      	movs	r2, #1
    d17c:	701a      	strb	r2, [r3, #0]
  if (link_fbw_receive_valid) {
    d17e:	f24c 434e 	movw	r3, #50254	; 0xc44e
    d182:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d186:	781b      	ldrb	r3, [r3, #0]
    d188:	b2db      	uxtb	r3, r3
    d18a:	2b00      	cmp	r3, #0
    d18c:	f000 83c0 	beq.w	d910 <radio_control_task+0x7a4>
    uint8_t mode_changed = FALSE;
    d190:	2300      	movs	r3, #0
    d192:	71fb      	strb	r3, [r7, #7]
    copy_from_to_fbw();
    d194:	f7fa fa4c 	bl	7630 <copy_from_to_fbw>
    if ((bit_is_set(from_fbw.status, RADIO_REALLY_LOST) && (pprz_mode == PPRZ_MODE_AUTO1 || pprz_mode == PPRZ_MODE_MANUAL)) || too_far_from_home) {
    d198:	4b3e      	ldr	r3, [pc, #248]	; (d294 <radio_control_task+0x128>)
    d19a:	781b      	ldrb	r3, [r3, #0]
    d19c:	b2db      	uxtb	r3, r3
    d19e:	f003 0302 	and.w	r3, r3, #2
    d1a2:	2b00      	cmp	r3, #0
    d1a4:	d00d      	beq.n	d1c2 <radio_control_task+0x56>
    d1a6:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d1aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1ae:	781b      	ldrb	r3, [r3, #0]
    d1b0:	2b01      	cmp	r3, #1
    d1b2:	d00d      	beq.n	d1d0 <radio_control_task+0x64>
    d1b4:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d1b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1bc:	781b      	ldrb	r3, [r3, #0]
    d1be:	2b00      	cmp	r3, #0
    d1c0:	d006      	beq.n	d1d0 <radio_control_task+0x64>
    d1c2:	f24c 63ac 	movw	r3, #50860	; 0xc6ac
    d1c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1ca:	781b      	ldrb	r3, [r3, #0]
    d1cc:	2b00      	cmp	r3, #0
    d1ce:	d007      	beq.n	d1e0 <radio_control_task+0x74>
      pprz_mode = PPRZ_MODE_HOME;
    d1d0:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d1d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1d8:	2203      	movs	r2, #3
    d1da:	701a      	strb	r2, [r3, #0]
      mode_changed = TRUE;
    d1dc:	2301      	movs	r3, #1
    d1de:	71fb      	strb	r3, [r7, #7]
    }
    // modified by wanbo
    if (bit_is_set(from_fbw.status, AVERAGED_CHANNELS_SENT)) 
    d1e0:	4b2c      	ldr	r3, [pc, #176]	; (d294 <radio_control_task+0x128>)
    d1e2:	781b      	ldrb	r3, [r3, #0]
    d1e4:	b2db      	uxtb	r3, r3
    d1e6:	f003 0304 	and.w	r3, r3, #4
    d1ea:	2b00      	cmp	r3, #0
    d1ec:	d023      	beq.n	d236 <radio_control_task+0xca>
    {
      bool_t pprz_mode_changed = pprz_mode_update();
    d1ee:	f7fa f8f9 	bl	73e4 <pprz_mode_update>
    d1f2:	4603      	mov	r3, r0
    d1f4:	71bb      	strb	r3, [r7, #6]
      mode_changed |= pprz_mode_changed;
    d1f6:	79fa      	ldrb	r2, [r7, #7]
    d1f8:	79bb      	ldrb	r3, [r7, #6]
    d1fa:	4313      	orrs	r3, r2
    d1fc:	71fb      	strb	r3, [r7, #7]
#ifdef RADIO_LLS
      mode_changed |= ir_estim_mode_update();
    d1fe:	f7fa f93d 	bl	747c <ir_estim_mode_update>
    d202:	4603      	mov	r3, r0
    d204:	461a      	mov	r2, r3
    d206:	79fb      	ldrb	r3, [r7, #7]
    d208:	4313      	orrs	r3, r2
    d20a:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef RADIO_CALIB
      calib_mode_changed = inflight_calib_mode_update();
    d20c:	f7ff ff7a 	bl	d104 <inflight_calib_mode_update>
    d210:	4603      	mov	r3, r0
    d212:	717b      	strb	r3, [r7, #5]
      inflight_calib(calib_mode_changed || pprz_mode_changed);
    d214:	797b      	ldrb	r3, [r7, #5]
    d216:	2b00      	cmp	r3, #0
    d218:	d102      	bne.n	d220 <radio_control_task+0xb4>
    d21a:	79bb      	ldrb	r3, [r7, #6]
    d21c:	2b00      	cmp	r3, #0
    d21e:	d001      	beq.n	d224 <radio_control_task+0xb8>
    d220:	2301      	movs	r3, #1
    d222:	e000      	b.n	d226 <radio_control_task+0xba>
    d224:	2300      	movs	r3, #0
    d226:	b2db      	uxtb	r3, r3
    d228:	4618      	mov	r0, r3
    d22a:	f008 fba1 	bl	15970 <inflight_calib>
      mode_changed |= calib_mode_changed;
    d22e:	79fa      	ldrb	r2, [r7, #7]
    d230:	797b      	ldrb	r3, [r7, #5]
    d232:	4313      	orrs	r3, r2
    d234:	71fb      	strb	r3, [r7, #7]
#endif
    }
    mode_changed |= mcu1_status_update();
    d236:	f7fa f949 	bl	74cc <mcu1_status_update>
    d23a:	4603      	mov	r3, r0
    d23c:	461a      	mov	r2, r3
    d23e:	79fb      	ldrb	r3, [r7, #7]
    d240:	4313      	orrs	r3, r2
    d242:	71fb      	strb	r3, [r7, #7]
    // add by wanbo
    mode_changed = 1;
    d244:	2301      	movs	r3, #1
    d246:	71fb      	strb	r3, [r7, #7]
    if ( mode_changed )
    d248:	79fb      	ldrb	r3, [r7, #7]
    d24a:	2b00      	cmp	r3, #0
    d24c:	f000 82bd 	beq.w	d7ca <radio_control_task+0x65e>
      DOWNLINK_SEND_PPRZ_MODE(&pprz_mode, &vertical_mode, &inflight_calib_mode, &mcu1_status, &ir_estim_mode);
    d250:	f24c 3319 	movw	r3, #49945	; 0xc319
    d254:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d258:	781a      	ldrb	r2, [r3, #0]
    d25a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d25e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d262:	781b      	ldrb	r3, [r3, #0]
    d264:	b2db      	uxtb	r3, r3
    d266:	429a      	cmp	r2, r3
    d268:	d316      	bcc.n	d298 <radio_control_task+0x12c>
    d26a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d26e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d272:	781b      	ldrb	r3, [r3, #0]
    d274:	b2db      	uxtb	r3, r3
    d276:	461a      	mov	r2, r3
    d278:	f24c 3319 	movw	r3, #49945	; 0xc319
    d27c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d280:	781b      	ldrb	r3, [r3, #0]
    d282:	1ad3      	subs	r3, r2, r3
    d284:	33ff      	adds	r3, #255	; 0xff
    d286:	2b09      	cmp	r3, #9
    d288:	bfd4      	ite	le
    d28a:	2300      	movle	r3, #0
    d28c:	2301      	movgt	r3, #1
    d28e:	b2db      	uxtb	r3, r3
    d290:	e014      	b.n	d2bc <radio_control_task+0x150>
    d292:	bf00      	nop
    d294:	2004c433 	.word	0x2004c433
    d298:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d29c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2a0:	781b      	ldrb	r3, [r3, #0]
    d2a2:	b2db      	uxtb	r3, r3
    d2a4:	461a      	mov	r2, r3
    d2a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    d2aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2ae:	781b      	ldrb	r3, [r3, #0]
    d2b0:	1ad3      	subs	r3, r2, r3
    d2b2:	2b09      	cmp	r3, #9
    d2b4:	bfd4      	ite	le
    d2b6:	2300      	movle	r3, #0
    d2b8:	2301      	movgt	r3, #1
    d2ba:	b2db      	uxtb	r3, r3
    d2bc:	2b00      	cmp	r3, #0
    d2be:	f000 8278 	beq.w	d7b2 <radio_control_task+0x646>
    d2c2:	f24c 3319 	movw	r3, #49945	; 0xc319
    d2c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2ca:	781b      	ldrb	r3, [r3, #0]
    d2cc:	461a      	mov	r2, r3
    d2ce:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d2d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2d6:	2105      	movs	r1, #5
    d2d8:	5499      	strb	r1, [r3, r2]
    d2da:	f24c 3319 	movw	r3, #49945	; 0xc319
    d2de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2e2:	781b      	ldrb	r3, [r3, #0]
    d2e4:	3301      	adds	r3, #1
    d2e6:	b2da      	uxtb	r2, r3
    d2e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    d2ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2f0:	701a      	strb	r2, [r3, #0]
    d2f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    d2f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2fa:	781b      	ldrb	r3, [r3, #0]
    d2fc:	2bff      	cmp	r3, #255	; 0xff
    d2fe:	d105      	bne.n	d30c <radio_control_task+0x1a0>
    d300:	f24c 3319 	movw	r3, #49945	; 0xc319
    d304:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d308:	2200      	movs	r2, #0
    d30a:	701a      	strb	r2, [r3, #0]
    d30c:	f24c 3319 	movw	r3, #49945	; 0xc319
    d310:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d314:	781b      	ldrb	r3, [r3, #0]
    d316:	461a      	mov	r2, r3
    d318:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d31c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d320:	210b      	movs	r1, #11
    d322:	5499      	strb	r1, [r3, r2]
    d324:	f24c 3319 	movw	r3, #49945	; 0xc319
    d328:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d32c:	781b      	ldrb	r3, [r3, #0]
    d32e:	3301      	adds	r3, #1
    d330:	b2da      	uxtb	r2, r3
    d332:	f24c 3319 	movw	r3, #49945	; 0xc319
    d336:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d33a:	701a      	strb	r2, [r3, #0]
    d33c:	f24c 3319 	movw	r3, #49945	; 0xc319
    d340:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d344:	781b      	ldrb	r3, [r3, #0]
    d346:	2bff      	cmp	r3, #255	; 0xff
    d348:	d105      	bne.n	d356 <radio_control_task+0x1ea>
    d34a:	f24c 3319 	movw	r3, #49945	; 0xc319
    d34e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d352:	2200      	movs	r2, #0
    d354:	701a      	strb	r2, [r3, #0]
    d356:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d35a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d35e:	220b      	movs	r2, #11
    d360:	701a      	strb	r2, [r3, #0]
    d362:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d366:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d36a:	220b      	movs	r2, #11
    d36c:	701a      	strb	r2, [r3, #0]
    d36e:	f24c 3319 	movw	r3, #49945	; 0xc319
    d372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d376:	781b      	ldrb	r3, [r3, #0]
    d378:	461a      	mov	r2, r3
    d37a:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d37e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d382:	7819      	ldrb	r1, [r3, #0]
    d384:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d388:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d38c:	5499      	strb	r1, [r3, r2]
    d38e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d392:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d396:	781a      	ldrb	r2, [r3, #0]
    d398:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d39c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3a0:	781b      	ldrb	r3, [r3, #0]
    d3a2:	4413      	add	r3, r2
    d3a4:	b2da      	uxtb	r2, r3
    d3a6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d3aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3ae:	701a      	strb	r2, [r3, #0]
    d3b0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d3b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3b8:	781a      	ldrb	r2, [r3, #0]
    d3ba:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d3be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3c2:	781b      	ldrb	r3, [r3, #0]
    d3c4:	4413      	add	r3, r2
    d3c6:	b2da      	uxtb	r2, r3
    d3c8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d3cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3d0:	701a      	strb	r2, [r3, #0]
    d3d2:	f24c 3319 	movw	r3, #49945	; 0xc319
    d3d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3da:	781b      	ldrb	r3, [r3, #0]
    d3dc:	3301      	adds	r3, #1
    d3de:	b2da      	uxtb	r2, r3
    d3e0:	f24c 3319 	movw	r3, #49945	; 0xc319
    d3e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3e8:	701a      	strb	r2, [r3, #0]
    d3ea:	f24c 3319 	movw	r3, #49945	; 0xc319
    d3ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3f2:	781b      	ldrb	r3, [r3, #0]
    d3f4:	2bff      	cmp	r3, #255	; 0xff
    d3f6:	d105      	bne.n	d404 <radio_control_task+0x298>
    d3f8:	f24c 3319 	movw	r3, #49945	; 0xc319
    d3fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d400:	2200      	movs	r2, #0
    d402:	701a      	strb	r2, [r3, #0]
    d404:	f24c 3319 	movw	r3, #49945	; 0xc319
    d408:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d40c:	781b      	ldrb	r3, [r3, #0]
    d40e:	461a      	mov	r2, r3
    d410:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    d414:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d418:	7819      	ldrb	r1, [r3, #0]
    d41a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d41e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d422:	5499      	strb	r1, [r3, r2]
    d424:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d428:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d42c:	781a      	ldrb	r2, [r3, #0]
    d42e:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    d432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d436:	781b      	ldrb	r3, [r3, #0]
    d438:	4413      	add	r3, r2
    d43a:	b2da      	uxtb	r2, r3
    d43c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d440:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d444:	701a      	strb	r2, [r3, #0]
    d446:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d44a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d44e:	781a      	ldrb	r2, [r3, #0]
    d450:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d454:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d458:	781b      	ldrb	r3, [r3, #0]
    d45a:	4413      	add	r3, r2
    d45c:	b2da      	uxtb	r2, r3
    d45e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d462:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d466:	701a      	strb	r2, [r3, #0]
    d468:	f24c 3319 	movw	r3, #49945	; 0xc319
    d46c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d470:	781b      	ldrb	r3, [r3, #0]
    d472:	3301      	adds	r3, #1
    d474:	b2da      	uxtb	r2, r3
    d476:	f24c 3319 	movw	r3, #49945	; 0xc319
    d47a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d47e:	701a      	strb	r2, [r3, #0]
    d480:	f24c 3319 	movw	r3, #49945	; 0xc319
    d484:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d488:	781b      	ldrb	r3, [r3, #0]
    d48a:	2bff      	cmp	r3, #255	; 0xff
    d48c:	d105      	bne.n	d49a <radio_control_task+0x32e>
    d48e:	f24c 3319 	movw	r3, #49945	; 0xc319
    d492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d496:	2200      	movs	r2, #0
    d498:	701a      	strb	r2, [r3, #0]
    d49a:	f24c 3319 	movw	r3, #49945	; 0xc319
    d49e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4a2:	781b      	ldrb	r3, [r3, #0]
    d4a4:	461a      	mov	r2, r3
    d4a6:	f64c 132c 	movw	r3, #51500	; 0xc92c
    d4aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4ae:	7819      	ldrb	r1, [r3, #0]
    d4b0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d4b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4b8:	5499      	strb	r1, [r3, r2]
    d4ba:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d4be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4c2:	781a      	ldrb	r2, [r3, #0]
    d4c4:	f64c 132c 	movw	r3, #51500	; 0xc92c
    d4c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4cc:	781b      	ldrb	r3, [r3, #0]
    d4ce:	4413      	add	r3, r2
    d4d0:	b2da      	uxtb	r2, r3
    d4d2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d4d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4da:	701a      	strb	r2, [r3, #0]
    d4dc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d4e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4e4:	781a      	ldrb	r2, [r3, #0]
    d4e6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d4ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4ee:	781b      	ldrb	r3, [r3, #0]
    d4f0:	4413      	add	r3, r2
    d4f2:	b2da      	uxtb	r2, r3
    d4f4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d4f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4fc:	701a      	strb	r2, [r3, #0]
    d4fe:	f24c 3319 	movw	r3, #49945	; 0xc319
    d502:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d506:	781b      	ldrb	r3, [r3, #0]
    d508:	3301      	adds	r3, #1
    d50a:	b2da      	uxtb	r2, r3
    d50c:	f24c 3319 	movw	r3, #49945	; 0xc319
    d510:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d514:	701a      	strb	r2, [r3, #0]
    d516:	f24c 3319 	movw	r3, #49945	; 0xc319
    d51a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d51e:	781b      	ldrb	r3, [r3, #0]
    d520:	2bff      	cmp	r3, #255	; 0xff
    d522:	d105      	bne.n	d530 <radio_control_task+0x3c4>
    d524:	f24c 3319 	movw	r3, #49945	; 0xc319
    d528:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d52c:	2200      	movs	r2, #0
    d52e:	701a      	strb	r2, [r3, #0]
    d530:	f24c 3319 	movw	r3, #49945	; 0xc319
    d534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d538:	781b      	ldrb	r3, [r3, #0]
    d53a:	461a      	mov	r2, r3
    d53c:	f24c 3303 	movw	r3, #49923	; 0xc303
    d540:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d544:	7819      	ldrb	r1, [r3, #0]
    d546:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d54a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d54e:	5499      	strb	r1, [r3, r2]
    d550:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d554:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d558:	781a      	ldrb	r2, [r3, #0]
    d55a:	f24c 3303 	movw	r3, #49923	; 0xc303
    d55e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d562:	781b      	ldrb	r3, [r3, #0]
    d564:	4413      	add	r3, r2
    d566:	b2da      	uxtb	r2, r3
    d568:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d56c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d570:	701a      	strb	r2, [r3, #0]
    d572:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d576:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d57a:	781a      	ldrb	r2, [r3, #0]
    d57c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d580:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d584:	781b      	ldrb	r3, [r3, #0]
    d586:	4413      	add	r3, r2
    d588:	b2da      	uxtb	r2, r3
    d58a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d58e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d592:	701a      	strb	r2, [r3, #0]
    d594:	f24c 3319 	movw	r3, #49945	; 0xc319
    d598:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d59c:	781b      	ldrb	r3, [r3, #0]
    d59e:	3301      	adds	r3, #1
    d5a0:	b2da      	uxtb	r2, r3
    d5a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    d5a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5aa:	701a      	strb	r2, [r3, #0]
    d5ac:	f24c 3319 	movw	r3, #49945	; 0xc319
    d5b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5b4:	781b      	ldrb	r3, [r3, #0]
    d5b6:	2bff      	cmp	r3, #255	; 0xff
    d5b8:	d105      	bne.n	d5c6 <radio_control_task+0x45a>
    d5ba:	f24c 3319 	movw	r3, #49945	; 0xc319
    d5be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5c2:	2200      	movs	r2, #0
    d5c4:	701a      	strb	r2, [r3, #0]
    d5c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    d5ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5ce:	781b      	ldrb	r3, [r3, #0]
    d5d0:	461a      	mov	r2, r3
    d5d2:	f240 533c 	movw	r3, #1340	; 0x53c
    d5d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5da:	7819      	ldrb	r1, [r3, #0]
    d5dc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d5e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5e4:	5499      	strb	r1, [r3, r2]
    d5e6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d5ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5ee:	781a      	ldrb	r2, [r3, #0]
    d5f0:	f240 533c 	movw	r3, #1340	; 0x53c
    d5f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5f8:	781b      	ldrb	r3, [r3, #0]
    d5fa:	4413      	add	r3, r2
    d5fc:	b2da      	uxtb	r2, r3
    d5fe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d602:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d606:	701a      	strb	r2, [r3, #0]
    d608:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d60c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d610:	781a      	ldrb	r2, [r3, #0]
    d612:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d616:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d61a:	781b      	ldrb	r3, [r3, #0]
    d61c:	4413      	add	r3, r2
    d61e:	b2da      	uxtb	r2, r3
    d620:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d624:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d628:	701a      	strb	r2, [r3, #0]
    d62a:	f24c 3319 	movw	r3, #49945	; 0xc319
    d62e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d632:	781b      	ldrb	r3, [r3, #0]
    d634:	3301      	adds	r3, #1
    d636:	b2da      	uxtb	r2, r3
    d638:	f24c 3319 	movw	r3, #49945	; 0xc319
    d63c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d640:	701a      	strb	r2, [r3, #0]
    d642:	f24c 3319 	movw	r3, #49945	; 0xc319
    d646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d64a:	781b      	ldrb	r3, [r3, #0]
    d64c:	2bff      	cmp	r3, #255	; 0xff
    d64e:	d105      	bne.n	d65c <radio_control_task+0x4f0>
    d650:	f24c 3319 	movw	r3, #49945	; 0xc319
    d654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d658:	2200      	movs	r2, #0
    d65a:	701a      	strb	r2, [r3, #0]
    d65c:	f24c 3319 	movw	r3, #49945	; 0xc319
    d660:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d664:	781b      	ldrb	r3, [r3, #0]
    d666:	461a      	mov	r2, r3
    d668:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d66c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d670:	7819      	ldrb	r1, [r3, #0]
    d672:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d676:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d67a:	5499      	strb	r1, [r3, r2]
    d67c:	f24c 3319 	movw	r3, #49945	; 0xc319
    d680:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d684:	781b      	ldrb	r3, [r3, #0]
    d686:	3301      	adds	r3, #1
    d688:	b2da      	uxtb	r2, r3
    d68a:	f24c 3319 	movw	r3, #49945	; 0xc319
    d68e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d692:	701a      	strb	r2, [r3, #0]
    d694:	f24c 3319 	movw	r3, #49945	; 0xc319
    d698:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d69c:	781b      	ldrb	r3, [r3, #0]
    d69e:	2bff      	cmp	r3, #255	; 0xff
    d6a0:	d105      	bne.n	d6ae <radio_control_task+0x542>
    d6a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    d6a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6aa:	2200      	movs	r2, #0
    d6ac:	701a      	strb	r2, [r3, #0]
    d6ae:	f24c 3319 	movw	r3, #49945	; 0xc319
    d6b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6b6:	781b      	ldrb	r3, [r3, #0]
    d6b8:	461a      	mov	r2, r3
    d6ba:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d6be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6c2:	7819      	ldrb	r1, [r3, #0]
    d6c4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d6c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6cc:	5499      	strb	r1, [r3, r2]
    d6ce:	f24c 3319 	movw	r3, #49945	; 0xc319
    d6d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6d6:	781b      	ldrb	r3, [r3, #0]
    d6d8:	3301      	adds	r3, #1
    d6da:	b2da      	uxtb	r2, r3
    d6dc:	f24c 3319 	movw	r3, #49945	; 0xc319
    d6e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6e4:	701a      	strb	r2, [r3, #0]
    d6e6:	f24c 3319 	movw	r3, #49945	; 0xc319
    d6ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6ee:	781b      	ldrb	r3, [r3, #0]
    d6f0:	2bff      	cmp	r3, #255	; 0xff
    d6f2:	d105      	bne.n	d700 <radio_control_task+0x594>
    d6f4:	f24c 3319 	movw	r3, #49945	; 0xc319
    d6f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6fc:	2200      	movs	r2, #0
    d6fe:	701a      	strb	r2, [r3, #0]
    d700:	f242 0339 	movw	r3, #8249	; 0x2039
    d704:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d708:	781b      	ldrb	r3, [r3, #0]
    d70a:	b2db      	uxtb	r3, r3
    d70c:	f003 0310 	and.w	r3, r3, #16
    d710:	2b00      	cmp	r3, #0
    d712:	d15a      	bne.n	d7ca <radio_control_task+0x65e>
    d714:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d718:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d71c:	781b      	ldrb	r3, [r3, #0]
    d71e:	b2db      	uxtb	r3, r3
    d720:	461a      	mov	r2, r3
    d722:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d726:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d72a:	5c9a      	ldrb	r2, [r3, r2]
    d72c:	f24c 431b 	movw	r3, #50203	; 0xc41b
    d730:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d734:	701a      	strb	r2, [r3, #0]
    d736:	f24c 431c 	movw	r3, #50204	; 0xc41c
    d73a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d73e:	2200      	movs	r2, #0
    d740:	701a      	strb	r2, [r3, #0]
    d742:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d746:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d74a:	781b      	ldrb	r3, [r3, #0]
    d74c:	b2db      	uxtb	r3, r3
    d74e:	3301      	adds	r3, #1
    d750:	b2da      	uxtb	r2, r3
    d752:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d756:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d75a:	701a      	strb	r2, [r3, #0]
    d75c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d760:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d764:	781b      	ldrb	r3, [r3, #0]
    d766:	b2db      	uxtb	r3, r3
    d768:	2bff      	cmp	r3, #255	; 0xff
    d76a:	d105      	bne.n	d778 <radio_control_task+0x60c>
    d76c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d770:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d774:	2200      	movs	r2, #0
    d776:	701a      	strb	r2, [r3, #0]
    d778:	f242 0338 	movw	r3, #8248	; 0x2038
    d77c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d780:	f242 0238 	movw	r2, #8248	; 0x2038
    d784:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d788:	7812      	ldrb	r2, [r2, #0]
    d78a:	b2d2      	uxtb	r2, r2
    d78c:	f042 0201 	orr.w	r2, r2, #1
    d790:	b2d2      	uxtb	r2, r2
    d792:	701a      	strb	r2, [r3, #0]
    d794:	f242 0339 	movw	r3, #8249	; 0x2039
    d798:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d79c:	f242 0239 	movw	r2, #8249	; 0x2039
    d7a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d7a4:	7812      	ldrb	r2, [r2, #0]
    d7a6:	b2d2      	uxtb	r2, r2
    d7a8:	f042 0210 	orr.w	r2, r2, #16
    d7ac:	b2d2      	uxtb	r2, r2
    d7ae:	701a      	strb	r2, [r3, #0]
    d7b0:	e00b      	b.n	d7ca <radio_control_task+0x65e>
    d7b2:	f24c 3318 	movw	r3, #49944	; 0xc318
    d7b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7ba:	781b      	ldrb	r3, [r3, #0]
    d7bc:	3301      	adds	r3, #1
    d7be:	b2da      	uxtb	r2, r3
    d7c0:	f24c 3318 	movw	r3, #49944	; 0xc318
    d7c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7c8:	701a      	strb	r2, [r3, #0]
      
    // add by wanbo
    //if (pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_roll = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_ROLL], 0., -0.6);
    d7ca:	f24c 4320 	movw	r3, #50208	; 0xc420
    d7ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7d2:	885b      	ldrh	r3, [r3, #2]
    d7d4:	b21b      	sxth	r3, r3
    d7d6:	4618      	mov	r0, r3
    d7d8:	f00a fe84 	bl	184e4 <__aeabi_i2f>
    d7dc:	4603      	mov	r3, r0
    d7de:	4618      	mov	r0, r3
    d7e0:	f04f 0100 	mov.w	r1, #0
    d7e4:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d7e8:	f00a ff84 	bl	186f4 <__aeabi_fdiv>
    d7ec:	4603      	mov	r3, r0
    d7ee:	4618      	mov	r0, r3
    d7f0:	f00a fa38 	bl	17c64 <__aeabi_f2d>
    d7f4:	4602      	mov	r2, r0
    d7f6:	460b      	mov	r3, r1
    d7f8:	4610      	mov	r0, r2
    d7fa:	4619      	mov	r1, r3
    d7fc:	a346      	add	r3, pc, #280	; (adr r3, d918 <radio_control_task+0x7ac>)
    d7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
    d802:	f00a fa83 	bl	17d0c <__aeabi_dmul>
    d806:	4602      	mov	r2, r0
    d808:	460b      	mov	r3, r1
    d80a:	4610      	mov	r0, r2
    d80c:	4619      	mov	r1, r3
    d80e:	f04f 0200 	mov.w	r2, #0
    d812:	f04f 0300 	mov.w	r3, #0
    d816:	f00a f8c7 	bl	179a8 <__adddf3>
    d81a:	4602      	mov	r2, r0
    d81c:	460b      	mov	r3, r1
    d81e:	4610      	mov	r0, r2
    d820:	4619      	mov	r1, r3
    d822:	f00a fd55 	bl	182d0 <__aeabi_d2f>
    d826:	4602      	mov	r2, r0
    d828:	f24c 6344 	movw	r3, #50756	; 0xc644
    d82c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d830:	601a      	str	r2, [r3, #0]
      desired_pitch = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_PITCH], 0., 0.5);
    d832:	f24c 4320 	movw	r3, #50208	; 0xc420
    d836:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d83a:	889b      	ldrh	r3, [r3, #4]
    d83c:	b21b      	sxth	r3, r3
    d83e:	4618      	mov	r0, r3
    d840:	f00a fe50 	bl	184e4 <__aeabi_i2f>
    d844:	4603      	mov	r3, r0
    d846:	4618      	mov	r0, r3
    d848:	f04f 0100 	mov.w	r1, #0
    d84c:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d850:	f00a ff50 	bl	186f4 <__aeabi_fdiv>
    d854:	4603      	mov	r3, r0
    d856:	4618      	mov	r0, r3
    d858:	f00a fa04 	bl	17c64 <__aeabi_f2d>
    d85c:	4602      	mov	r2, r0
    d85e:	460b      	mov	r3, r1
    d860:	4610      	mov	r0, r2
    d862:	4619      	mov	r1, r3
    d864:	f04f 0200 	mov.w	r2, #0
    d868:	f04f 0300 	mov.w	r3, #0
    d86c:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
    d870:	f00a fa4c 	bl	17d0c <__aeabi_dmul>
    d874:	4602      	mov	r2, r0
    d876:	460b      	mov	r3, r1
    d878:	4610      	mov	r0, r2
    d87a:	4619      	mov	r1, r3
    d87c:	f04f 0200 	mov.w	r2, #0
    d880:	f04f 0300 	mov.w	r3, #0
    d884:	f00a f890 	bl	179a8 <__adddf3>
    d888:	4602      	mov	r2, r0
    d88a:	460b      	mov	r3, r1
    d88c:	4610      	mov	r0, r2
    d88e:	4619      	mov	r1, r3
    d890:	f00a fd1e 	bl	182d0 <__aeabi_d2f>
    d894:	4602      	mov	r2, r0
    d896:	f24c 6348 	movw	r3, #50760	; 0xc648
    d89a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d89e:	601a      	str	r2, [r3, #0]
    } // else asynchronously set by course_pid_run()

    // add by wanbo
   // if (pprz_mode == PPRZ_MODE_MANUAL || pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_gaz = from_fbw.channels[RADIO_THROTTLE];
    d8a0:	f24c 4320 	movw	r3, #50208	; 0xc420
    d8a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8a8:	881a      	ldrh	r2, [r3, #0]
    d8aa:	f24c 634c 	movw	r3, #50764	; 0xc64c
    d8ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8b2:	801a      	strh	r2, [r3, #0]
      pitch_pgain = PITCH_PGAIN * ( 1 - 1. / 3. * from_fbw.channels[RADIO_THROTTLE] / MAX_PPRZ);
#endif /* ANTON_MAGICAL_MISTERY_GAINS */
    }
    // else asynchronously set by climb_pid_run();

    mcu1_ppm_cpt = from_fbw.ppm_cpt;
    d8b4:	f24c 4320 	movw	r3, #50208	; 0xc420
    d8b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8bc:	7c9a      	ldrb	r2, [r3, #18]
    d8be:	f24c 3304 	movw	r3, #49924	; 0xc304
    d8c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8c6:	701a      	strb	r2, [r3, #0]
    vsupply = from_fbw.vsupply;
    d8c8:	f24c 4320 	movw	r3, #50208	; 0xc420
    d8cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8d0:	7d5a      	ldrb	r2, [r3, #21]
    d8d2:	f24c 3302 	movw	r3, #49922	; 0xc302
    d8d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8da:	701a      	strb	r2, [r3, #0]

    events_update();
    d8dc:	f7f9 fe26 	bl	752c <events_update>

    // add by wanbo
    //if (!estimator_flight_time) 
    {
      ground_calibrate();
    d8e0:	f7f8 fc26 	bl	6130 <ground_calibrate>
      if (pprz_mode == PPRZ_MODE_AUTO2 && from_fbw.channels[RADIO_THROTTLE] > GAZ_THRESHOLD_TAKEOFF) {
    d8e4:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d8e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8ec:	781b      	ldrb	r3, [r3, #0]
    d8ee:	2b02      	cmp	r3, #2
    d8f0:	d10e      	bne.n	d910 <radio_control_task+0x7a4>
    d8f2:	f24c 4320 	movw	r3, #50208	; 0xc420
    d8f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8fa:	881b      	ldrh	r3, [r3, #0]
    d8fc:	b21b      	sxth	r3, r3
    d8fe:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
    d902:	dd05      	ble.n	d910 <radio_control_task+0x7a4>
	launch = TRUE;
    d904:	f24c 3310 	movw	r3, #49936	; 0xc310
    d908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d90c:	2201      	movs	r2, #1
    d90e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

	//vPrintString("S_3 radio_control_task end! \n\r"); //SunnyBeike
}
    d910:	3708      	adds	r7, #8
    d912:	46bd      	mov	sp, r7
    d914:	bd80      	pop	{r7, pc}
    d916:	bf00      	nop
    d918:	33333333 	.word	0x33333333
    d91c:	bfe33333 	.word	0xbfe33333

0000d920 <navigation_update>:

/** \fn void navigation_task( void )
 *  \brief Compute desired_course
 */
void navigation_update( void ) {
    d920:	b580      	push	{r7, lr}
    d922:	af00      	add	r7, sp, #0

  /* Default to keep compatibility with previous behaviour */
  //vPrintString("S_17 Navigation task start!\n\r");
  lateral_mode = LATERAL_MODE_COURSE;
    d924:	f24c 23fe 	movw	r3, #49918	; 0xc2fe
    d928:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d92c:	2203      	movs	r2, #3
    d92e:	701a      	strb	r2, [r3, #0]
  if (pprz_mode == PPRZ_MODE_HOME)
    d930:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d934:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d938:	781b      	ldrb	r3, [r3, #0]
    d93a:	2b03      	cmp	r3, #3
    d93c:	d102      	bne.n	d944 <navigation_update+0x24>
    nav_home();
    d93e:	f007 fa9b 	bl	14e78 <nav_home>
    d942:	e001      	b.n	d948 <navigation_update+0x28>
  else
    nav_update();
    d944:	f007 fabe 	bl	14ec4 <nav_update>
}
    d948:	bd80      	pop	{r7, pc}
    d94a:	bf00      	nop

0000d94c <send_nav_values>:

void send_nav_values(void){
    d94c:	b480      	push	{r7}
    d94e:	af00      	add	r7, sp, #0
  
  DOWNLINK_SEND_NAVIGATION(&nav_block, &nav_stage, &estimator_x, &estimator_y, &desired_course, &dist2_to_wp, &course_pgain, &dist2_to_home);
    d950:	f24c 3319 	movw	r3, #49945	; 0xc319
    d954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d958:	781a      	ldrb	r2, [r3, #0]
    d95a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d95e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d962:	781b      	ldrb	r3, [r3, #0]
    d964:	b2db      	uxtb	r3, r3
    d966:	429a      	cmp	r2, r3
    d968:	d313      	bcc.n	d992 <send_nav_values+0x46>
    d96a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d96e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d972:	781b      	ldrb	r3, [r3, #0]
    d974:	b2db      	uxtb	r3, r3
    d976:	461a      	mov	r2, r3
    d978:	f24c 3319 	movw	r3, #49945	; 0xc319
    d97c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d980:	781b      	ldrb	r3, [r3, #0]
    d982:	1ad3      	subs	r3, r2, r3
    d984:	33ff      	adds	r3, #255	; 0xff
    d986:	2b1e      	cmp	r3, #30
    d988:	bfd4      	ite	le
    d98a:	2300      	movle	r3, #0
    d98c:	2301      	movgt	r3, #1
    d98e:	b2db      	uxtb	r3, r3
    d990:	e011      	b.n	d9b6 <send_nav_values+0x6a>
    d992:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d996:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d99a:	781b      	ldrb	r3, [r3, #0]
    d99c:	b2db      	uxtb	r3, r3
    d99e:	461a      	mov	r2, r3
    d9a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    d9a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9a8:	781b      	ldrb	r3, [r3, #0]
    d9aa:	1ad3      	subs	r3, r2, r3
    d9ac:	2b1e      	cmp	r3, #30
    d9ae:	bfd4      	ite	le
    d9b0:	2300      	movle	r3, #0
    d9b2:	2301      	movgt	r3, #1
    d9b4:	b2db      	uxtb	r3, r3
    d9b6:	2b00      	cmp	r3, #0
    d9b8:	f001 8094 	beq.w	eae4 <send_nav_values+0x1198>
    d9bc:	f24c 3319 	movw	r3, #49945	; 0xc319
    d9c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9c4:	781b      	ldrb	r3, [r3, #0]
    d9c6:	461a      	mov	r2, r3
    d9c8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d9cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9d0:	2105      	movs	r1, #5
    d9d2:	5499      	strb	r1, [r3, r2]
    d9d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    d9d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9dc:	781b      	ldrb	r3, [r3, #0]
    d9de:	3301      	adds	r3, #1
    d9e0:	b2da      	uxtb	r2, r3
    d9e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    d9e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9ea:	701a      	strb	r2, [r3, #0]
    d9ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    d9f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9f4:	781b      	ldrb	r3, [r3, #0]
    d9f6:	2bff      	cmp	r3, #255	; 0xff
    d9f8:	d105      	bne.n	da06 <send_nav_values+0xba>
    d9fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    d9fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da02:	2200      	movs	r2, #0
    da04:	701a      	strb	r2, [r3, #0]
    da06:	f24c 3319 	movw	r3, #49945	; 0xc319
    da0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da0e:	781b      	ldrb	r3, [r3, #0]
    da10:	461a      	mov	r2, r3
    da12:	f24c 331c 	movw	r3, #49948	; 0xc31c
    da16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da1a:	210a      	movs	r1, #10
    da1c:	5499      	strb	r1, [r3, r2]
    da1e:	f24c 3319 	movw	r3, #49945	; 0xc319
    da22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da26:	781b      	ldrb	r3, [r3, #0]
    da28:	3301      	adds	r3, #1
    da2a:	b2da      	uxtb	r2, r3
    da2c:	f24c 3319 	movw	r3, #49945	; 0xc319
    da30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da34:	701a      	strb	r2, [r3, #0]
    da36:	f24c 3319 	movw	r3, #49945	; 0xc319
    da3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da3e:	781b      	ldrb	r3, [r3, #0]
    da40:	2bff      	cmp	r3, #255	; 0xff
    da42:	d105      	bne.n	da50 <send_nav_values+0x104>
    da44:	f24c 3319 	movw	r3, #49945	; 0xc319
    da48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da4c:	2200      	movs	r2, #0
    da4e:	701a      	strb	r2, [r3, #0]
    da50:	f24c 431d 	movw	r3, #50205	; 0xc41d
    da54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da58:	220a      	movs	r2, #10
    da5a:	701a      	strb	r2, [r3, #0]
    da5c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    da60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da64:	220a      	movs	r2, #10
    da66:	701a      	strb	r2, [r3, #0]
    da68:	f24c 3319 	movw	r3, #49945	; 0xc319
    da6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da70:	781b      	ldrb	r3, [r3, #0]
    da72:	461a      	mov	r2, r3
    da74:	f24c 6371 	movw	r3, #50801	; 0xc671
    da78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da7c:	7819      	ldrb	r1, [r3, #0]
    da7e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    da82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da86:	5499      	strb	r1, [r3, r2]
    da88:	f24c 431d 	movw	r3, #50205	; 0xc41d
    da8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da90:	781a      	ldrb	r2, [r3, #0]
    da92:	f24c 6371 	movw	r3, #50801	; 0xc671
    da96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da9a:	781b      	ldrb	r3, [r3, #0]
    da9c:	4413      	add	r3, r2
    da9e:	b2da      	uxtb	r2, r3
    daa0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    daa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daa8:	701a      	strb	r2, [r3, #0]
    daaa:	f24c 431e 	movw	r3, #50206	; 0xc41e
    daae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dab2:	781a      	ldrb	r2, [r3, #0]
    dab4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dab8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dabc:	781b      	ldrb	r3, [r3, #0]
    dabe:	4413      	add	r3, r2
    dac0:	b2da      	uxtb	r2, r3
    dac2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dac6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daca:	701a      	strb	r2, [r3, #0]
    dacc:	f24c 3319 	movw	r3, #49945	; 0xc319
    dad0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dad4:	781b      	ldrb	r3, [r3, #0]
    dad6:	3301      	adds	r3, #1
    dad8:	b2da      	uxtb	r2, r3
    dada:	f24c 3319 	movw	r3, #49945	; 0xc319
    dade:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dae2:	701a      	strb	r2, [r3, #0]
    dae4:	f24c 3319 	movw	r3, #49945	; 0xc319
    dae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daec:	781b      	ldrb	r3, [r3, #0]
    daee:	2bff      	cmp	r3, #255	; 0xff
    daf0:	d105      	bne.n	dafe <send_nav_values+0x1b2>
    daf2:	f24c 3319 	movw	r3, #49945	; 0xc319
    daf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dafa:	2200      	movs	r2, #0
    dafc:	701a      	strb	r2, [r3, #0]
    dafe:	f24c 3319 	movw	r3, #49945	; 0xc319
    db02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db06:	781b      	ldrb	r3, [r3, #0]
    db08:	461a      	mov	r2, r3
    db0a:	f24c 6370 	movw	r3, #50800	; 0xc670
    db0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db12:	7819      	ldrb	r1, [r3, #0]
    db14:	f24c 331c 	movw	r3, #49948	; 0xc31c
    db18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db1c:	5499      	strb	r1, [r3, r2]
    db1e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    db22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db26:	781a      	ldrb	r2, [r3, #0]
    db28:	f24c 6370 	movw	r3, #50800	; 0xc670
    db2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db30:	781b      	ldrb	r3, [r3, #0]
    db32:	4413      	add	r3, r2
    db34:	b2da      	uxtb	r2, r3
    db36:	f24c 431d 	movw	r3, #50205	; 0xc41d
    db3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db3e:	701a      	strb	r2, [r3, #0]
    db40:	f24c 431e 	movw	r3, #50206	; 0xc41e
    db44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db48:	781a      	ldrb	r2, [r3, #0]
    db4a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    db4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db52:	781b      	ldrb	r3, [r3, #0]
    db54:	4413      	add	r3, r2
    db56:	b2da      	uxtb	r2, r3
    db58:	f24c 431e 	movw	r3, #50206	; 0xc41e
    db5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db60:	701a      	strb	r2, [r3, #0]
    db62:	f24c 3319 	movw	r3, #49945	; 0xc319
    db66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db6a:	781b      	ldrb	r3, [r3, #0]
    db6c:	3301      	adds	r3, #1
    db6e:	b2da      	uxtb	r2, r3
    db70:	f24c 3319 	movw	r3, #49945	; 0xc319
    db74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db78:	701a      	strb	r2, [r3, #0]
    db7a:	f24c 3319 	movw	r3, #49945	; 0xc319
    db7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db82:	781b      	ldrb	r3, [r3, #0]
    db84:	2bff      	cmp	r3, #255	; 0xff
    db86:	d105      	bne.n	db94 <send_nav_values+0x248>
    db88:	f24c 3319 	movw	r3, #49945	; 0xc319
    db8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db90:	2200      	movs	r2, #0
    db92:	701a      	strb	r2, [r3, #0]
    db94:	f24c 3319 	movw	r3, #49945	; 0xc319
    db98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db9c:	781b      	ldrb	r3, [r3, #0]
    db9e:	461a      	mov	r2, r3
    dba0:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
    dba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dba8:	7819      	ldrb	r1, [r3, #0]
    dbaa:	f24c 331c 	movw	r3, #49948	; 0xc31c
    dbae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbb2:	5499      	strb	r1, [r3, r2]
    dbb4:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
    dbb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbbc:	781a      	ldrb	r2, [r3, #0]
    dbbe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dbc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbc6:	781b      	ldrb	r3, [r3, #0]
    dbc8:	4413      	add	r3, r2
    dbca:	b2da      	uxtb	r2, r3
    dbcc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dbd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbd4:	701a      	strb	r2, [r3, #0]
    dbd6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dbda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbde:	781a      	ldrb	r2, [r3, #0]
    dbe0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dbe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbe8:	781b      	ldrb	r3, [r3, #0]
    dbea:	4413      	add	r3, r2
    dbec:	b2da      	uxtb	r2, r3
    dbee:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dbf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbf6:	701a      	strb	r2, [r3, #0]
    dbf8:	f24c 3319 	movw	r3, #49945	; 0xc319
    dbfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc00:	781b      	ldrb	r3, [r3, #0]
    dc02:	3301      	adds	r3, #1
    dc04:	b2da      	uxtb	r2, r3
    dc06:	f24c 3319 	movw	r3, #49945	; 0xc319
    dc0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc0e:	701a      	strb	r2, [r3, #0]
    dc10:	f24c 3319 	movw	r3, #49945	; 0xc319
    dc14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc18:	781b      	ldrb	r3, [r3, #0]
    dc1a:	2bff      	cmp	r3, #255	; 0xff
    dc1c:	d105      	bne.n	dc2a <send_nav_values+0x2de>
    dc1e:	f24c 3319 	movw	r3, #49945	; 0xc319
    dc22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc26:	2200      	movs	r2, #0
    dc28:	701a      	strb	r2, [r3, #0]
    dc2a:	f24c 3319 	movw	r3, #49945	; 0xc319
    dc2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc32:	781b      	ldrb	r3, [r3, #0]
    dc34:	461a      	mov	r2, r3
    dc36:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
    dc3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc3e:	7859      	ldrb	r1, [r3, #1]
    dc40:	f24c 331c 	movw	r3, #49948	; 0xc31c
    dc44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc48:	5499      	strb	r1, [r3, r2]
    dc4a:	4bd2      	ldr	r3, [pc, #840]	; (df94 <send_nav_values+0x648>)
    dc4c:	781a      	ldrb	r2, [r3, #0]
    dc4e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dc52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc56:	781b      	ldrb	r3, [r3, #0]
    dc58:	4413      	add	r3, r2
    dc5a:	b2da      	uxtb	r2, r3
    dc5c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dc60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc64:	701a      	strb	r2, [r3, #0]
    dc66:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dc6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc6e:	781a      	ldrb	r2, [r3, #0]
    dc70:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dc74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc78:	781b      	ldrb	r3, [r3, #0]
    dc7a:	4413      	add	r3, r2
    dc7c:	b2da      	uxtb	r2, r3
    dc7e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dc82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc86:	701a      	strb	r2, [r3, #0]
    dc88:	f24c 3319 	movw	r3, #49945	; 0xc319
    dc8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc90:	781b      	ldrb	r3, [r3, #0]
    dc92:	3301      	adds	r3, #1
    dc94:	b2da      	uxtb	r2, r3
    dc96:	f24c 3319 	movw	r3, #49945	; 0xc319
    dc9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc9e:	701a      	strb	r2, [r3, #0]
    dca0:	f24c 3319 	movw	r3, #49945	; 0xc319
    dca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dca8:	781b      	ldrb	r3, [r3, #0]
    dcaa:	2bff      	cmp	r3, #255	; 0xff
    dcac:	d105      	bne.n	dcba <send_nav_values+0x36e>
    dcae:	f24c 3319 	movw	r3, #49945	; 0xc319
    dcb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcb6:	2200      	movs	r2, #0
    dcb8:	701a      	strb	r2, [r3, #0]
    dcba:	f24c 3319 	movw	r3, #49945	; 0xc319
    dcbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcc2:	781b      	ldrb	r3, [r3, #0]
    dcc4:	461a      	mov	r2, r3
    dcc6:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
    dcca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcce:	7899      	ldrb	r1, [r3, #2]
    dcd0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    dcd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcd8:	5499      	strb	r1, [r3, r2]
    dcda:	4baf      	ldr	r3, [pc, #700]	; (df98 <send_nav_values+0x64c>)
    dcdc:	781a      	ldrb	r2, [r3, #0]
    dcde:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dce2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dce6:	781b      	ldrb	r3, [r3, #0]
    dce8:	4413      	add	r3, r2
    dcea:	b2da      	uxtb	r2, r3
    dcec:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dcf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcf4:	701a      	strb	r2, [r3, #0]
    dcf6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dcfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcfe:	781a      	ldrb	r2, [r3, #0]
    dd00:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dd04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd08:	781b      	ldrb	r3, [r3, #0]
    dd0a:	4413      	add	r3, r2
    dd0c:	b2da      	uxtb	r2, r3
    dd0e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dd12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd16:	701a      	strb	r2, [r3, #0]
    dd18:	f24c 3319 	movw	r3, #49945	; 0xc319
    dd1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd20:	781b      	ldrb	r3, [r3, #0]
    dd22:	3301      	adds	r3, #1
    dd24:	b2da      	uxtb	r2, r3
    dd26:	f24c 3319 	movw	r3, #49945	; 0xc319
    dd2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd2e:	701a      	strb	r2, [r3, #0]
    dd30:	f24c 3319 	movw	r3, #49945	; 0xc319
    dd34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd38:	781b      	ldrb	r3, [r3, #0]
    dd3a:	2bff      	cmp	r3, #255	; 0xff
    dd3c:	d105      	bne.n	dd4a <send_nav_values+0x3fe>
    dd3e:	f24c 3319 	movw	r3, #49945	; 0xc319
    dd42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd46:	2200      	movs	r2, #0
    dd48:	701a      	strb	r2, [r3, #0]
    dd4a:	f24c 3319 	movw	r3, #49945	; 0xc319
    dd4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd52:	781b      	ldrb	r3, [r3, #0]
    dd54:	461a      	mov	r2, r3
    dd56:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
    dd5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd5e:	78d9      	ldrb	r1, [r3, #3]
    dd60:	f24c 331c 	movw	r3, #49948	; 0xc31c
    dd64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd68:	5499      	strb	r1, [r3, r2]
    dd6a:	4b8c      	ldr	r3, [pc, #560]	; (df9c <send_nav_values+0x650>)
    dd6c:	781a      	ldrb	r2, [r3, #0]
    dd6e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dd72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd76:	781b      	ldrb	r3, [r3, #0]
    dd78:	4413      	add	r3, r2
    dd7a:	b2da      	uxtb	r2, r3
    dd7c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dd80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd84:	701a      	strb	r2, [r3, #0]
    dd86:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dd8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd8e:	781a      	ldrb	r2, [r3, #0]
    dd90:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dd94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd98:	781b      	ldrb	r3, [r3, #0]
    dd9a:	4413      	add	r3, r2
    dd9c:	b2da      	uxtb	r2, r3
    dd9e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dda2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dda6:	701a      	strb	r2, [r3, #0]
    dda8:	f24c 3319 	movw	r3, #49945	; 0xc319
    ddac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddb0:	781b      	ldrb	r3, [r3, #0]
    ddb2:	3301      	adds	r3, #1
    ddb4:	b2da      	uxtb	r2, r3
    ddb6:	f24c 3319 	movw	r3, #49945	; 0xc319
    ddba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddbe:	701a      	strb	r2, [r3, #0]
    ddc0:	f24c 3319 	movw	r3, #49945	; 0xc319
    ddc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddc8:	781b      	ldrb	r3, [r3, #0]
    ddca:	2bff      	cmp	r3, #255	; 0xff
    ddcc:	d105      	bne.n	ddda <send_nav_values+0x48e>
    ddce:	f24c 3319 	movw	r3, #49945	; 0xc319
    ddd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddd6:	2200      	movs	r2, #0
    ddd8:	701a      	strb	r2, [r3, #0]
    ddda:	f24c 3319 	movw	r3, #49945	; 0xc319
    ddde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dde2:	781b      	ldrb	r3, [r3, #0]
    dde4:	461a      	mov	r2, r3
    dde6:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
    ddea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddee:	7819      	ldrb	r1, [r3, #0]
    ddf0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ddf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddf8:	5499      	strb	r1, [r3, r2]
    ddfa:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
    ddfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de02:	781a      	ldrb	r2, [r3, #0]
    de04:	f24c 431d 	movw	r3, #50205	; 0xc41d
    de08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de0c:	781b      	ldrb	r3, [r3, #0]
    de0e:	4413      	add	r3, r2
    de10:	b2da      	uxtb	r2, r3
    de12:	f24c 431d 	movw	r3, #50205	; 0xc41d
    de16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de1a:	701a      	strb	r2, [r3, #0]
    de1c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    de20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de24:	781a      	ldrb	r2, [r3, #0]
    de26:	f24c 431d 	movw	r3, #50205	; 0xc41d
    de2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de2e:	781b      	ldrb	r3, [r3, #0]
    de30:	4413      	add	r3, r2
    de32:	b2da      	uxtb	r2, r3
    de34:	f24c 431e 	movw	r3, #50206	; 0xc41e
    de38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de3c:	701a      	strb	r2, [r3, #0]
    de3e:	f24c 3319 	movw	r3, #49945	; 0xc319
    de42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de46:	781b      	ldrb	r3, [r3, #0]
    de48:	3301      	adds	r3, #1
    de4a:	b2da      	uxtb	r2, r3
    de4c:	f24c 3319 	movw	r3, #49945	; 0xc319
    de50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de54:	701a      	strb	r2, [r3, #0]
    de56:	f24c 3319 	movw	r3, #49945	; 0xc319
    de5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de5e:	781b      	ldrb	r3, [r3, #0]
    de60:	2bff      	cmp	r3, #255	; 0xff
    de62:	d105      	bne.n	de70 <send_nav_values+0x524>
    de64:	f24c 3319 	movw	r3, #49945	; 0xc319
    de68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de6c:	2200      	movs	r2, #0
    de6e:	701a      	strb	r2, [r3, #0]
    de70:	f24c 3319 	movw	r3, #49945	; 0xc319
    de74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de78:	781b      	ldrb	r3, [r3, #0]
    de7a:	461a      	mov	r2, r3
    de7c:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
    de80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de84:	7859      	ldrb	r1, [r3, #1]
    de86:	f24c 331c 	movw	r3, #49948	; 0xc31c
    de8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de8e:	5499      	strb	r1, [r3, r2]
    de90:	4b43      	ldr	r3, [pc, #268]	; (dfa0 <send_nav_values+0x654>)
    de92:	781a      	ldrb	r2, [r3, #0]
    de94:	f24c 431d 	movw	r3, #50205	; 0xc41d
    de98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de9c:	781b      	ldrb	r3, [r3, #0]
    de9e:	4413      	add	r3, r2
    dea0:	b2da      	uxtb	r2, r3
    dea2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deaa:	701a      	strb	r2, [r3, #0]
    deac:	f24c 431e 	movw	r3, #50206	; 0xc41e
    deb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deb4:	781a      	ldrb	r2, [r3, #0]
    deb6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    deba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    debe:	781b      	ldrb	r3, [r3, #0]
    dec0:	4413      	add	r3, r2
    dec2:	b2da      	uxtb	r2, r3
    dec4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    decc:	701a      	strb	r2, [r3, #0]
    dece:	f24c 3319 	movw	r3, #49945	; 0xc319
    ded2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ded6:	781b      	ldrb	r3, [r3, #0]
    ded8:	3301      	adds	r3, #1
    deda:	b2da      	uxtb	r2, r3
    dedc:	f24c 3319 	movw	r3, #49945	; 0xc319
    dee0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dee4:	701a      	strb	r2, [r3, #0]
    dee6:	f24c 3319 	movw	r3, #49945	; 0xc319
    deea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deee:	781b      	ldrb	r3, [r3, #0]
    def0:	2bff      	cmp	r3, #255	; 0xff
    def2:	d105      	bne.n	df00 <send_nav_values+0x5b4>
    def4:	f24c 3319 	movw	r3, #49945	; 0xc319
    def8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    defc:	2200      	movs	r2, #0
    defe:	701a      	strb	r2, [r3, #0]
    df00:	f24c 3319 	movw	r3, #49945	; 0xc319
    df04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df08:	781b      	ldrb	r3, [r3, #0]
    df0a:	461a      	mov	r2, r3
    df0c:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
    df10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df14:	7899      	ldrb	r1, [r3, #2]
    df16:	f24c 331c 	movw	r3, #49948	; 0xc31c
    df1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df1e:	5499      	strb	r1, [r3, r2]
    df20:	4b20      	ldr	r3, [pc, #128]	; (dfa4 <send_nav_values+0x658>)
    df22:	781a      	ldrb	r2, [r3, #0]
    df24:	f24c 431d 	movw	r3, #50205	; 0xc41d
    df28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df2c:	781b      	ldrb	r3, [r3, #0]
    df2e:	4413      	add	r3, r2
    df30:	b2da      	uxtb	r2, r3
    df32:	f24c 431d 	movw	r3, #50205	; 0xc41d
    df36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df3a:	701a      	strb	r2, [r3, #0]
    df3c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    df40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df44:	781a      	ldrb	r2, [r3, #0]
    df46:	f24c 431d 	movw	r3, #50205	; 0xc41d
    df4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df4e:	781b      	ldrb	r3, [r3, #0]
    df50:	4413      	add	r3, r2
    df52:	b2da      	uxtb	r2, r3
    df54:	f24c 431e 	movw	r3, #50206	; 0xc41e
    df58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df5c:	701a      	strb	r2, [r3, #0]
    df5e:	f24c 3319 	movw	r3, #49945	; 0xc319
    df62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df66:	781b      	ldrb	r3, [r3, #0]
    df68:	3301      	adds	r3, #1
    df6a:	b2da      	uxtb	r2, r3
    df6c:	f24c 3319 	movw	r3, #49945	; 0xc319
    df70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df74:	701a      	strb	r2, [r3, #0]
    df76:	f24c 3319 	movw	r3, #49945	; 0xc319
    df7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df7e:	781b      	ldrb	r3, [r3, #0]
    df80:	2bff      	cmp	r3, #255	; 0xff
    df82:	d111      	bne.n	dfa8 <send_nav_values+0x65c>
    df84:	f24c 3319 	movw	r3, #49945	; 0xc319
    df88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df8c:	2200      	movs	r2, #0
    df8e:	701a      	strb	r2, [r3, #0]
    df90:	e00a      	b.n	dfa8 <send_nav_values+0x65c>
    df92:	bf00      	nop
    df94:	2004c8cd 	.word	0x2004c8cd
    df98:	2004c8ce 	.word	0x2004c8ce
    df9c:	2004c8cf 	.word	0x2004c8cf
    dfa0:	2004c8d1 	.word	0x2004c8d1
    dfa4:	2004c8d2 	.word	0x2004c8d2
    dfa8:	f24c 3319 	movw	r3, #49945	; 0xc319
    dfac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfb0:	781b      	ldrb	r3, [r3, #0]
    dfb2:	461a      	mov	r2, r3
    dfb4:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
    dfb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfbc:	78d9      	ldrb	r1, [r3, #3]
    dfbe:	f24c 331c 	movw	r3, #49948	; 0xc31c
    dfc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfc6:	5499      	strb	r1, [r3, r2]
    dfc8:	4bd3      	ldr	r3, [pc, #844]	; (e318 <send_nav_values+0x9cc>)
    dfca:	781a      	ldrb	r2, [r3, #0]
    dfcc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dfd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfd4:	781b      	ldrb	r3, [r3, #0]
    dfd6:	4413      	add	r3, r2
    dfd8:	b2da      	uxtb	r2, r3
    dfda:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dfde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfe2:	701a      	strb	r2, [r3, #0]
    dfe4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dfe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfec:	781a      	ldrb	r2, [r3, #0]
    dfee:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dff6:	781b      	ldrb	r3, [r3, #0]
    dff8:	4413      	add	r3, r2
    dffa:	b2da      	uxtb	r2, r3
    dffc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e000:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e004:	701a      	strb	r2, [r3, #0]
    e006:	f24c 3319 	movw	r3, #49945	; 0xc319
    e00a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e00e:	781b      	ldrb	r3, [r3, #0]
    e010:	3301      	adds	r3, #1
    e012:	b2da      	uxtb	r2, r3
    e014:	f24c 3319 	movw	r3, #49945	; 0xc319
    e018:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e01c:	701a      	strb	r2, [r3, #0]
    e01e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e022:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e026:	781b      	ldrb	r3, [r3, #0]
    e028:	2bff      	cmp	r3, #255	; 0xff
    e02a:	d105      	bne.n	e038 <send_nav_values+0x6ec>
    e02c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e030:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e034:	2200      	movs	r2, #0
    e036:	701a      	strb	r2, [r3, #0]
    e038:	f24c 3319 	movw	r3, #49945	; 0xc319
    e03c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e040:	781b      	ldrb	r3, [r3, #0]
    e042:	461a      	mov	r2, r3
    e044:	f24c 635c 	movw	r3, #50780	; 0xc65c
    e048:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e04c:	7819      	ldrb	r1, [r3, #0]
    e04e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e052:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e056:	5499      	strb	r1, [r3, r2]
    e058:	f24c 635c 	movw	r3, #50780	; 0xc65c
    e05c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e060:	781a      	ldrb	r2, [r3, #0]
    e062:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e066:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e06a:	781b      	ldrb	r3, [r3, #0]
    e06c:	4413      	add	r3, r2
    e06e:	b2da      	uxtb	r2, r3
    e070:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e074:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e078:	701a      	strb	r2, [r3, #0]
    e07a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e07e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e082:	781a      	ldrb	r2, [r3, #0]
    e084:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e08c:	781b      	ldrb	r3, [r3, #0]
    e08e:	4413      	add	r3, r2
    e090:	b2da      	uxtb	r2, r3
    e092:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e096:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e09a:	701a      	strb	r2, [r3, #0]
    e09c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e0a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0a4:	781b      	ldrb	r3, [r3, #0]
    e0a6:	3301      	adds	r3, #1
    e0a8:	b2da      	uxtb	r2, r3
    e0aa:	f24c 3319 	movw	r3, #49945	; 0xc319
    e0ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0b2:	701a      	strb	r2, [r3, #0]
    e0b4:	f24c 3319 	movw	r3, #49945	; 0xc319
    e0b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0bc:	781b      	ldrb	r3, [r3, #0]
    e0be:	2bff      	cmp	r3, #255	; 0xff
    e0c0:	d105      	bne.n	e0ce <send_nav_values+0x782>
    e0c2:	f24c 3319 	movw	r3, #49945	; 0xc319
    e0c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0ca:	2200      	movs	r2, #0
    e0cc:	701a      	strb	r2, [r3, #0]
    e0ce:	f24c 3319 	movw	r3, #49945	; 0xc319
    e0d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0d6:	781b      	ldrb	r3, [r3, #0]
    e0d8:	461a      	mov	r2, r3
    e0da:	f24c 635c 	movw	r3, #50780	; 0xc65c
    e0de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0e2:	7859      	ldrb	r1, [r3, #1]
    e0e4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e0e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0ec:	5499      	strb	r1, [r3, r2]
    e0ee:	4b8b      	ldr	r3, [pc, #556]	; (e31c <send_nav_values+0x9d0>)
    e0f0:	781a      	ldrb	r2, [r3, #0]
    e0f2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e0f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0fa:	781b      	ldrb	r3, [r3, #0]
    e0fc:	4413      	add	r3, r2
    e0fe:	b2da      	uxtb	r2, r3
    e100:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e104:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e108:	701a      	strb	r2, [r3, #0]
    e10a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e10e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e112:	781a      	ldrb	r2, [r3, #0]
    e114:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e118:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e11c:	781b      	ldrb	r3, [r3, #0]
    e11e:	4413      	add	r3, r2
    e120:	b2da      	uxtb	r2, r3
    e122:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e126:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e12a:	701a      	strb	r2, [r3, #0]
    e12c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e130:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e134:	781b      	ldrb	r3, [r3, #0]
    e136:	3301      	adds	r3, #1
    e138:	b2da      	uxtb	r2, r3
    e13a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e13e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e142:	701a      	strb	r2, [r3, #0]
    e144:	f24c 3319 	movw	r3, #49945	; 0xc319
    e148:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e14c:	781b      	ldrb	r3, [r3, #0]
    e14e:	2bff      	cmp	r3, #255	; 0xff
    e150:	d105      	bne.n	e15e <send_nav_values+0x812>
    e152:	f24c 3319 	movw	r3, #49945	; 0xc319
    e156:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e15a:	2200      	movs	r2, #0
    e15c:	701a      	strb	r2, [r3, #0]
    e15e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e162:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e166:	781b      	ldrb	r3, [r3, #0]
    e168:	461a      	mov	r2, r3
    e16a:	f24c 635c 	movw	r3, #50780	; 0xc65c
    e16e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e172:	7899      	ldrb	r1, [r3, #2]
    e174:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e17c:	5499      	strb	r1, [r3, r2]
    e17e:	4b68      	ldr	r3, [pc, #416]	; (e320 <send_nav_values+0x9d4>)
    e180:	781a      	ldrb	r2, [r3, #0]
    e182:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e18a:	781b      	ldrb	r3, [r3, #0]
    e18c:	4413      	add	r3, r2
    e18e:	b2da      	uxtb	r2, r3
    e190:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e194:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e198:	701a      	strb	r2, [r3, #0]
    e19a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e19e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1a2:	781a      	ldrb	r2, [r3, #0]
    e1a4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e1a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1ac:	781b      	ldrb	r3, [r3, #0]
    e1ae:	4413      	add	r3, r2
    e1b0:	b2da      	uxtb	r2, r3
    e1b2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e1b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1ba:	701a      	strb	r2, [r3, #0]
    e1bc:	f24c 3319 	movw	r3, #49945	; 0xc319
    e1c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1c4:	781b      	ldrb	r3, [r3, #0]
    e1c6:	3301      	adds	r3, #1
    e1c8:	b2da      	uxtb	r2, r3
    e1ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    e1ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1d2:	701a      	strb	r2, [r3, #0]
    e1d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    e1d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1dc:	781b      	ldrb	r3, [r3, #0]
    e1de:	2bff      	cmp	r3, #255	; 0xff
    e1e0:	d105      	bne.n	e1ee <send_nav_values+0x8a2>
    e1e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    e1e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1ea:	2200      	movs	r2, #0
    e1ec:	701a      	strb	r2, [r3, #0]
    e1ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    e1f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1f6:	781b      	ldrb	r3, [r3, #0]
    e1f8:	461a      	mov	r2, r3
    e1fa:	f24c 635c 	movw	r3, #50780	; 0xc65c
    e1fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e202:	78d9      	ldrb	r1, [r3, #3]
    e204:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e208:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e20c:	5499      	strb	r1, [r3, r2]
    e20e:	4b45      	ldr	r3, [pc, #276]	; (e324 <send_nav_values+0x9d8>)
    e210:	781a      	ldrb	r2, [r3, #0]
    e212:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e216:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e21a:	781b      	ldrb	r3, [r3, #0]
    e21c:	4413      	add	r3, r2
    e21e:	b2da      	uxtb	r2, r3
    e220:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e224:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e228:	701a      	strb	r2, [r3, #0]
    e22a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e22e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e232:	781a      	ldrb	r2, [r3, #0]
    e234:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e238:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e23c:	781b      	ldrb	r3, [r3, #0]
    e23e:	4413      	add	r3, r2
    e240:	b2da      	uxtb	r2, r3
    e242:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e246:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e24a:	701a      	strb	r2, [r3, #0]
    e24c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e250:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e254:	781b      	ldrb	r3, [r3, #0]
    e256:	3301      	adds	r3, #1
    e258:	b2da      	uxtb	r2, r3
    e25a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e25e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e262:	701a      	strb	r2, [r3, #0]
    e264:	f24c 3319 	movw	r3, #49945	; 0xc319
    e268:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e26c:	781b      	ldrb	r3, [r3, #0]
    e26e:	2bff      	cmp	r3, #255	; 0xff
    e270:	d105      	bne.n	e27e <send_nav_values+0x932>
    e272:	f24c 3319 	movw	r3, #49945	; 0xc319
    e276:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e27a:	2200      	movs	r2, #0
    e27c:	701a      	strb	r2, [r3, #0]
    e27e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e282:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e286:	781b      	ldrb	r3, [r3, #0]
    e288:	461a      	mov	r2, r3
    e28a:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
    e28e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e292:	7819      	ldrb	r1, [r3, #0]
    e294:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e298:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e29c:	5499      	strb	r1, [r3, r2]
    e29e:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
    e2a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2a6:	781a      	ldrb	r2, [r3, #0]
    e2a8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e2ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2b0:	781b      	ldrb	r3, [r3, #0]
    e2b2:	4413      	add	r3, r2
    e2b4:	b2da      	uxtb	r2, r3
    e2b6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e2ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2be:	701a      	strb	r2, [r3, #0]
    e2c0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e2c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2c8:	781a      	ldrb	r2, [r3, #0]
    e2ca:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e2ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2d2:	781b      	ldrb	r3, [r3, #0]
    e2d4:	4413      	add	r3, r2
    e2d6:	b2da      	uxtb	r2, r3
    e2d8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e2dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2e0:	701a      	strb	r2, [r3, #0]
    e2e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    e2e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2ea:	781b      	ldrb	r3, [r3, #0]
    e2ec:	3301      	adds	r3, #1
    e2ee:	b2da      	uxtb	r2, r3
    e2f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    e2f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2f8:	701a      	strb	r2, [r3, #0]
    e2fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    e2fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e302:	781b      	ldrb	r3, [r3, #0]
    e304:	2bff      	cmp	r3, #255	; 0xff
    e306:	d10f      	bne.n	e328 <send_nav_values+0x9dc>
    e308:	f24c 3319 	movw	r3, #49945	; 0xc319
    e30c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e310:	2200      	movs	r2, #0
    e312:	701a      	strb	r2, [r3, #0]
    e314:	e008      	b.n	e328 <send_nav_values+0x9dc>
    e316:	bf00      	nop
    e318:	2004c8d3 	.word	0x2004c8d3
    e31c:	2004c65d 	.word	0x2004c65d
    e320:	2004c65e 	.word	0x2004c65e
    e324:	2004c65f 	.word	0x2004c65f
    e328:	f24c 3319 	movw	r3, #49945	; 0xc319
    e32c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e330:	781b      	ldrb	r3, [r3, #0]
    e332:	461a      	mov	r2, r3
    e334:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
    e338:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e33c:	7859      	ldrb	r1, [r3, #1]
    e33e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e342:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e346:	5499      	strb	r1, [r3, r2]
    e348:	4bd1      	ldr	r3, [pc, #836]	; (e690 <send_nav_values+0xd44>)
    e34a:	781a      	ldrb	r2, [r3, #0]
    e34c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e350:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e354:	781b      	ldrb	r3, [r3, #0]
    e356:	4413      	add	r3, r2
    e358:	b2da      	uxtb	r2, r3
    e35a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e35e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e362:	701a      	strb	r2, [r3, #0]
    e364:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e368:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e36c:	781a      	ldrb	r2, [r3, #0]
    e36e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e376:	781b      	ldrb	r3, [r3, #0]
    e378:	4413      	add	r3, r2
    e37a:	b2da      	uxtb	r2, r3
    e37c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e380:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e384:	701a      	strb	r2, [r3, #0]
    e386:	f24c 3319 	movw	r3, #49945	; 0xc319
    e38a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e38e:	781b      	ldrb	r3, [r3, #0]
    e390:	3301      	adds	r3, #1
    e392:	b2da      	uxtb	r2, r3
    e394:	f24c 3319 	movw	r3, #49945	; 0xc319
    e398:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e39c:	701a      	strb	r2, [r3, #0]
    e39e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e3a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3a6:	781b      	ldrb	r3, [r3, #0]
    e3a8:	2bff      	cmp	r3, #255	; 0xff
    e3aa:	d105      	bne.n	e3b8 <send_nav_values+0xa6c>
    e3ac:	f24c 3319 	movw	r3, #49945	; 0xc319
    e3b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3b4:	2200      	movs	r2, #0
    e3b6:	701a      	strb	r2, [r3, #0]
    e3b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    e3bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3c0:	781b      	ldrb	r3, [r3, #0]
    e3c2:	461a      	mov	r2, r3
    e3c4:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
    e3c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3cc:	7899      	ldrb	r1, [r3, #2]
    e3ce:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e3d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3d6:	5499      	strb	r1, [r3, r2]
    e3d8:	4bae      	ldr	r3, [pc, #696]	; (e694 <send_nav_values+0xd48>)
    e3da:	781a      	ldrb	r2, [r3, #0]
    e3dc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e3e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3e4:	781b      	ldrb	r3, [r3, #0]
    e3e6:	4413      	add	r3, r2
    e3e8:	b2da      	uxtb	r2, r3
    e3ea:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e3ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3f2:	701a      	strb	r2, [r3, #0]
    e3f4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e3f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3fc:	781a      	ldrb	r2, [r3, #0]
    e3fe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e402:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e406:	781b      	ldrb	r3, [r3, #0]
    e408:	4413      	add	r3, r2
    e40a:	b2da      	uxtb	r2, r3
    e40c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e410:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e414:	701a      	strb	r2, [r3, #0]
    e416:	f24c 3319 	movw	r3, #49945	; 0xc319
    e41a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e41e:	781b      	ldrb	r3, [r3, #0]
    e420:	3301      	adds	r3, #1
    e422:	b2da      	uxtb	r2, r3
    e424:	f24c 3319 	movw	r3, #49945	; 0xc319
    e428:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e42c:	701a      	strb	r2, [r3, #0]
    e42e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e436:	781b      	ldrb	r3, [r3, #0]
    e438:	2bff      	cmp	r3, #255	; 0xff
    e43a:	d105      	bne.n	e448 <send_nav_values+0xafc>
    e43c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e440:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e444:	2200      	movs	r2, #0
    e446:	701a      	strb	r2, [r3, #0]
    e448:	f24c 3319 	movw	r3, #49945	; 0xc319
    e44c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e450:	781b      	ldrb	r3, [r3, #0]
    e452:	461a      	mov	r2, r3
    e454:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
    e458:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e45c:	78d9      	ldrb	r1, [r3, #3]
    e45e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e462:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e466:	5499      	strb	r1, [r3, r2]
    e468:	4b8b      	ldr	r3, [pc, #556]	; (e698 <send_nav_values+0xd4c>)
    e46a:	781a      	ldrb	r2, [r3, #0]
    e46c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e470:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e474:	781b      	ldrb	r3, [r3, #0]
    e476:	4413      	add	r3, r2
    e478:	b2da      	uxtb	r2, r3
    e47a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e47e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e482:	701a      	strb	r2, [r3, #0]
    e484:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e488:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e48c:	781a      	ldrb	r2, [r3, #0]
    e48e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e496:	781b      	ldrb	r3, [r3, #0]
    e498:	4413      	add	r3, r2
    e49a:	b2da      	uxtb	r2, r3
    e49c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e4a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4a4:	701a      	strb	r2, [r3, #0]
    e4a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    e4aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4ae:	781b      	ldrb	r3, [r3, #0]
    e4b0:	3301      	adds	r3, #1
    e4b2:	b2da      	uxtb	r2, r3
    e4b4:	f24c 3319 	movw	r3, #49945	; 0xc319
    e4b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4bc:	701a      	strb	r2, [r3, #0]
    e4be:	f24c 3319 	movw	r3, #49945	; 0xc319
    e4c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4c6:	781b      	ldrb	r3, [r3, #0]
    e4c8:	2bff      	cmp	r3, #255	; 0xff
    e4ca:	d105      	bne.n	e4d8 <send_nav_values+0xb8c>
    e4cc:	f24c 3319 	movw	r3, #49945	; 0xc319
    e4d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4d4:	2200      	movs	r2, #0
    e4d6:	701a      	strb	r2, [r3, #0]
    e4d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    e4dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4e0:	781b      	ldrb	r3, [r3, #0]
    e4e2:	461a      	mov	r2, r3
    e4e4:	f240 5358 	movw	r3, #1368	; 0x558
    e4e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4ec:	7819      	ldrb	r1, [r3, #0]
    e4ee:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e4f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4f6:	5499      	strb	r1, [r3, r2]
    e4f8:	f240 5358 	movw	r3, #1368	; 0x558
    e4fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e500:	781a      	ldrb	r2, [r3, #0]
    e502:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e50a:	781b      	ldrb	r3, [r3, #0]
    e50c:	4413      	add	r3, r2
    e50e:	b2da      	uxtb	r2, r3
    e510:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e514:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e518:	701a      	strb	r2, [r3, #0]
    e51a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e51e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e522:	781a      	ldrb	r2, [r3, #0]
    e524:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e528:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e52c:	781b      	ldrb	r3, [r3, #0]
    e52e:	4413      	add	r3, r2
    e530:	b2da      	uxtb	r2, r3
    e532:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e536:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e53a:	701a      	strb	r2, [r3, #0]
    e53c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e540:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e544:	781b      	ldrb	r3, [r3, #0]
    e546:	3301      	adds	r3, #1
    e548:	b2da      	uxtb	r2, r3
    e54a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e54e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e552:	701a      	strb	r2, [r3, #0]
    e554:	f24c 3319 	movw	r3, #49945	; 0xc319
    e558:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e55c:	781b      	ldrb	r3, [r3, #0]
    e55e:	2bff      	cmp	r3, #255	; 0xff
    e560:	d105      	bne.n	e56e <send_nav_values+0xc22>
    e562:	f24c 3319 	movw	r3, #49945	; 0xc319
    e566:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e56a:	2200      	movs	r2, #0
    e56c:	701a      	strb	r2, [r3, #0]
    e56e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e572:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e576:	781b      	ldrb	r3, [r3, #0]
    e578:	461a      	mov	r2, r3
    e57a:	f240 5358 	movw	r3, #1368	; 0x558
    e57e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e582:	7859      	ldrb	r1, [r3, #1]
    e584:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e588:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e58c:	5499      	strb	r1, [r3, r2]
    e58e:	4b43      	ldr	r3, [pc, #268]	; (e69c <send_nav_values+0xd50>)
    e590:	781a      	ldrb	r2, [r3, #0]
    e592:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e596:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e59a:	781b      	ldrb	r3, [r3, #0]
    e59c:	4413      	add	r3, r2
    e59e:	b2da      	uxtb	r2, r3
    e5a0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e5a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5a8:	701a      	strb	r2, [r3, #0]
    e5aa:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e5ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5b2:	781a      	ldrb	r2, [r3, #0]
    e5b4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e5b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5bc:	781b      	ldrb	r3, [r3, #0]
    e5be:	4413      	add	r3, r2
    e5c0:	b2da      	uxtb	r2, r3
    e5c2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e5c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5ca:	701a      	strb	r2, [r3, #0]
    e5cc:	f24c 3319 	movw	r3, #49945	; 0xc319
    e5d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5d4:	781b      	ldrb	r3, [r3, #0]
    e5d6:	3301      	adds	r3, #1
    e5d8:	b2da      	uxtb	r2, r3
    e5da:	f24c 3319 	movw	r3, #49945	; 0xc319
    e5de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5e2:	701a      	strb	r2, [r3, #0]
    e5e4:	f24c 3319 	movw	r3, #49945	; 0xc319
    e5e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5ec:	781b      	ldrb	r3, [r3, #0]
    e5ee:	2bff      	cmp	r3, #255	; 0xff
    e5f0:	d105      	bne.n	e5fe <send_nav_values+0xcb2>
    e5f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    e5f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5fa:	2200      	movs	r2, #0
    e5fc:	701a      	strb	r2, [r3, #0]
    e5fe:	f24c 3319 	movw	r3, #49945	; 0xc319
    e602:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e606:	781b      	ldrb	r3, [r3, #0]
    e608:	461a      	mov	r2, r3
    e60a:	f240 5358 	movw	r3, #1368	; 0x558
    e60e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e612:	7899      	ldrb	r1, [r3, #2]
    e614:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e618:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e61c:	5499      	strb	r1, [r3, r2]
    e61e:	4b20      	ldr	r3, [pc, #128]	; (e6a0 <send_nav_values+0xd54>)
    e620:	781a      	ldrb	r2, [r3, #0]
    e622:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e626:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e62a:	781b      	ldrb	r3, [r3, #0]
    e62c:	4413      	add	r3, r2
    e62e:	b2da      	uxtb	r2, r3
    e630:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e634:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e638:	701a      	strb	r2, [r3, #0]
    e63a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e63e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e642:	781a      	ldrb	r2, [r3, #0]
    e644:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e648:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e64c:	781b      	ldrb	r3, [r3, #0]
    e64e:	4413      	add	r3, r2
    e650:	b2da      	uxtb	r2, r3
    e652:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e656:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e65a:	701a      	strb	r2, [r3, #0]
    e65c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e660:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e664:	781b      	ldrb	r3, [r3, #0]
    e666:	3301      	adds	r3, #1
    e668:	b2da      	uxtb	r2, r3
    e66a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e66e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e672:	701a      	strb	r2, [r3, #0]
    e674:	f24c 3319 	movw	r3, #49945	; 0xc319
    e678:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e67c:	781b      	ldrb	r3, [r3, #0]
    e67e:	2bff      	cmp	r3, #255	; 0xff
    e680:	d110      	bne.n	e6a4 <send_nav_values+0xd58>
    e682:	f24c 3319 	movw	r3, #49945	; 0xc319
    e686:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e68a:	2200      	movs	r2, #0
    e68c:	701a      	strb	r2, [r3, #0]
    e68e:	e009      	b.n	e6a4 <send_nav_values+0xd58>
    e690:	2004c6a5 	.word	0x2004c6a5
    e694:	2004c6a6 	.word	0x2004c6a6
    e698:	2004c6a7 	.word	0x2004c6a7
    e69c:	20000559 	.word	0x20000559
    e6a0:	2000055a 	.word	0x2000055a
    e6a4:	f24c 3319 	movw	r3, #49945	; 0xc319
    e6a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6ac:	781b      	ldrb	r3, [r3, #0]
    e6ae:	461a      	mov	r2, r3
    e6b0:	f240 5358 	movw	r3, #1368	; 0x558
    e6b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6b8:	78d9      	ldrb	r1, [r3, #3]
    e6ba:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e6be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6c2:	5499      	strb	r1, [r3, r2]
    e6c4:	4bc2      	ldr	r3, [pc, #776]	; (e9d0 <send_nav_values+0x1084>)
    e6c6:	781a      	ldrb	r2, [r3, #0]
    e6c8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e6cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6d0:	781b      	ldrb	r3, [r3, #0]
    e6d2:	4413      	add	r3, r2
    e6d4:	b2da      	uxtb	r2, r3
    e6d6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e6da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6de:	701a      	strb	r2, [r3, #0]
    e6e0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e6e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6e8:	781a      	ldrb	r2, [r3, #0]
    e6ea:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e6ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6f2:	781b      	ldrb	r3, [r3, #0]
    e6f4:	4413      	add	r3, r2
    e6f6:	b2da      	uxtb	r2, r3
    e6f8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e6fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e700:	701a      	strb	r2, [r3, #0]
    e702:	f24c 3319 	movw	r3, #49945	; 0xc319
    e706:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e70a:	781b      	ldrb	r3, [r3, #0]
    e70c:	3301      	adds	r3, #1
    e70e:	b2da      	uxtb	r2, r3
    e710:	f24c 3319 	movw	r3, #49945	; 0xc319
    e714:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e718:	701a      	strb	r2, [r3, #0]
    e71a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e71e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e722:	781b      	ldrb	r3, [r3, #0]
    e724:	2bff      	cmp	r3, #255	; 0xff
    e726:	d105      	bne.n	e734 <send_nav_values+0xde8>
    e728:	f24c 3319 	movw	r3, #49945	; 0xc319
    e72c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e730:	2200      	movs	r2, #0
    e732:	701a      	strb	r2, [r3, #0]
    e734:	f24c 3319 	movw	r3, #49945	; 0xc319
    e738:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e73c:	781b      	ldrb	r3, [r3, #0]
    e73e:	461a      	mov	r2, r3
    e740:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
    e744:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e748:	7819      	ldrb	r1, [r3, #0]
    e74a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e74e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e752:	5499      	strb	r1, [r3, r2]
    e754:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
    e758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e75c:	781a      	ldrb	r2, [r3, #0]
    e75e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e766:	781b      	ldrb	r3, [r3, #0]
    e768:	4413      	add	r3, r2
    e76a:	b2da      	uxtb	r2, r3
    e76c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e770:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e774:	701a      	strb	r2, [r3, #0]
    e776:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e77a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e77e:	781a      	ldrb	r2, [r3, #0]
    e780:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e784:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e788:	781b      	ldrb	r3, [r3, #0]
    e78a:	4413      	add	r3, r2
    e78c:	b2da      	uxtb	r2, r3
    e78e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e792:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e796:	701a      	strb	r2, [r3, #0]
    e798:	f24c 3319 	movw	r3, #49945	; 0xc319
    e79c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7a0:	781b      	ldrb	r3, [r3, #0]
    e7a2:	3301      	adds	r3, #1
    e7a4:	b2da      	uxtb	r2, r3
    e7a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    e7aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7ae:	701a      	strb	r2, [r3, #0]
    e7b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    e7b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7b8:	781b      	ldrb	r3, [r3, #0]
    e7ba:	2bff      	cmp	r3, #255	; 0xff
    e7bc:	d105      	bne.n	e7ca <send_nav_values+0xe7e>
    e7be:	f24c 3319 	movw	r3, #49945	; 0xc319
    e7c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7c6:	2200      	movs	r2, #0
    e7c8:	701a      	strb	r2, [r3, #0]
    e7ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    e7ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7d2:	781b      	ldrb	r3, [r3, #0]
    e7d4:	461a      	mov	r2, r3
    e7d6:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
    e7da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7de:	7859      	ldrb	r1, [r3, #1]
    e7e0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e7e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7e8:	5499      	strb	r1, [r3, r2]
    e7ea:	4b7a      	ldr	r3, [pc, #488]	; (e9d4 <send_nav_values+0x1088>)
    e7ec:	781a      	ldrb	r2, [r3, #0]
    e7ee:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e7f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7f6:	781b      	ldrb	r3, [r3, #0]
    e7f8:	4413      	add	r3, r2
    e7fa:	b2da      	uxtb	r2, r3
    e7fc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e800:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e804:	701a      	strb	r2, [r3, #0]
    e806:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e80a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e80e:	781a      	ldrb	r2, [r3, #0]
    e810:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e814:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e818:	781b      	ldrb	r3, [r3, #0]
    e81a:	4413      	add	r3, r2
    e81c:	b2da      	uxtb	r2, r3
    e81e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e822:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e826:	701a      	strb	r2, [r3, #0]
    e828:	f24c 3319 	movw	r3, #49945	; 0xc319
    e82c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e830:	781b      	ldrb	r3, [r3, #0]
    e832:	3301      	adds	r3, #1
    e834:	b2da      	uxtb	r2, r3
    e836:	f24c 3319 	movw	r3, #49945	; 0xc319
    e83a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e83e:	701a      	strb	r2, [r3, #0]
    e840:	f24c 3319 	movw	r3, #49945	; 0xc319
    e844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e848:	781b      	ldrb	r3, [r3, #0]
    e84a:	2bff      	cmp	r3, #255	; 0xff
    e84c:	d105      	bne.n	e85a <send_nav_values+0xf0e>
    e84e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e852:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e856:	2200      	movs	r2, #0
    e858:	701a      	strb	r2, [r3, #0]
    e85a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e85e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e862:	781b      	ldrb	r3, [r3, #0]
    e864:	461a      	mov	r2, r3
    e866:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
    e86a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e86e:	7899      	ldrb	r1, [r3, #2]
    e870:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e874:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e878:	5499      	strb	r1, [r3, r2]
    e87a:	4b57      	ldr	r3, [pc, #348]	; (e9d8 <send_nav_values+0x108c>)
    e87c:	781a      	ldrb	r2, [r3, #0]
    e87e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e882:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e886:	781b      	ldrb	r3, [r3, #0]
    e888:	4413      	add	r3, r2
    e88a:	b2da      	uxtb	r2, r3
    e88c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e890:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e894:	701a      	strb	r2, [r3, #0]
    e896:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e89a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e89e:	781a      	ldrb	r2, [r3, #0]
    e8a0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e8a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8a8:	781b      	ldrb	r3, [r3, #0]
    e8aa:	4413      	add	r3, r2
    e8ac:	b2da      	uxtb	r2, r3
    e8ae:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e8b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8b6:	701a      	strb	r2, [r3, #0]
    e8b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    e8bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8c0:	781b      	ldrb	r3, [r3, #0]
    e8c2:	3301      	adds	r3, #1
    e8c4:	b2da      	uxtb	r2, r3
    e8c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    e8ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8ce:	701a      	strb	r2, [r3, #0]
    e8d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    e8d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8d8:	781b      	ldrb	r3, [r3, #0]
    e8da:	2bff      	cmp	r3, #255	; 0xff
    e8dc:	d105      	bne.n	e8ea <send_nav_values+0xf9e>
    e8de:	f24c 3319 	movw	r3, #49945	; 0xc319
    e8e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8e6:	2200      	movs	r2, #0
    e8e8:	701a      	strb	r2, [r3, #0]
    e8ea:	f24c 3319 	movw	r3, #49945	; 0xc319
    e8ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8f2:	781b      	ldrb	r3, [r3, #0]
    e8f4:	461a      	mov	r2, r3
    e8f6:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
    e8fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8fe:	78d9      	ldrb	r1, [r3, #3]
    e900:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e904:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e908:	5499      	strb	r1, [r3, r2]
    e90a:	4b34      	ldr	r3, [pc, #208]	; (e9dc <send_nav_values+0x1090>)
    e90c:	781a      	ldrb	r2, [r3, #0]
    e90e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e916:	781b      	ldrb	r3, [r3, #0]
    e918:	4413      	add	r3, r2
    e91a:	b2da      	uxtb	r2, r3
    e91c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e924:	701a      	strb	r2, [r3, #0]
    e926:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e92a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e92e:	781a      	ldrb	r2, [r3, #0]
    e930:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e934:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e938:	781b      	ldrb	r3, [r3, #0]
    e93a:	4413      	add	r3, r2
    e93c:	b2da      	uxtb	r2, r3
    e93e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e942:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e946:	701a      	strb	r2, [r3, #0]
    e948:	f24c 3319 	movw	r3, #49945	; 0xc319
    e94c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e950:	781b      	ldrb	r3, [r3, #0]
    e952:	3301      	adds	r3, #1
    e954:	b2da      	uxtb	r2, r3
    e956:	f24c 3319 	movw	r3, #49945	; 0xc319
    e95a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e95e:	701a      	strb	r2, [r3, #0]
    e960:	f24c 3319 	movw	r3, #49945	; 0xc319
    e964:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e968:	781b      	ldrb	r3, [r3, #0]
    e96a:	2bff      	cmp	r3, #255	; 0xff
    e96c:	d105      	bne.n	e97a <send_nav_values+0x102e>
    e96e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e972:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e976:	2200      	movs	r2, #0
    e978:	701a      	strb	r2, [r3, #0]
    e97a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e97e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e982:	781b      	ldrb	r3, [r3, #0]
    e984:	461a      	mov	r2, r3
    e986:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e98a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e98e:	7819      	ldrb	r1, [r3, #0]
    e990:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e994:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e998:	5499      	strb	r1, [r3, r2]
    e99a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e99e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9a2:	781b      	ldrb	r3, [r3, #0]
    e9a4:	3301      	adds	r3, #1
    e9a6:	b2da      	uxtb	r2, r3
    e9a8:	f24c 3319 	movw	r3, #49945	; 0xc319
    e9ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9b0:	701a      	strb	r2, [r3, #0]
    e9b2:	f24c 3319 	movw	r3, #49945	; 0xc319
    e9b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9ba:	781b      	ldrb	r3, [r3, #0]
    e9bc:	2bff      	cmp	r3, #255	; 0xff
    e9be:	d10f      	bne.n	e9e0 <send_nav_values+0x1094>
    e9c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    e9c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9c8:	2200      	movs	r2, #0
    e9ca:	701a      	strb	r2, [r3, #0]
    e9cc:	e008      	b.n	e9e0 <send_nav_values+0x1094>
    e9ce:	bf00      	nop
    e9d0:	2000055b 	.word	0x2000055b
    e9d4:	2004c6a9 	.word	0x2004c6a9
    e9d8:	2004c6aa 	.word	0x2004c6aa
    e9dc:	2004c6ab 	.word	0x2004c6ab
    e9e0:	f24c 3319 	movw	r3, #49945	; 0xc319
    e9e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9e8:	781b      	ldrb	r3, [r3, #0]
    e9ea:	461a      	mov	r2, r3
    e9ec:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e9f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9f4:	7819      	ldrb	r1, [r3, #0]
    e9f6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e9fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9fe:	5499      	strb	r1, [r3, r2]
    ea00:	f24c 3319 	movw	r3, #49945	; 0xc319
    ea04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea08:	781b      	ldrb	r3, [r3, #0]
    ea0a:	3301      	adds	r3, #1
    ea0c:	b2da      	uxtb	r2, r3
    ea0e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ea12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea16:	701a      	strb	r2, [r3, #0]
    ea18:	f24c 3319 	movw	r3, #49945	; 0xc319
    ea1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea20:	781b      	ldrb	r3, [r3, #0]
    ea22:	2bff      	cmp	r3, #255	; 0xff
    ea24:	d105      	bne.n	ea32 <send_nav_values+0x10e6>
    ea26:	f24c 3319 	movw	r3, #49945	; 0xc319
    ea2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea2e:	2200      	movs	r2, #0
    ea30:	701a      	strb	r2, [r3, #0]
    ea32:	f242 0339 	movw	r3, #8249	; 0x2039
    ea36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea3a:	781b      	ldrb	r3, [r3, #0]
    ea3c:	b2db      	uxtb	r3, r3
    ea3e:	f003 0310 	and.w	r3, r3, #16
    ea42:	2b00      	cmp	r3, #0
    ea44:	d15a      	bne.n	eafc <send_nav_values+0x11b0>
    ea46:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ea4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea4e:	781b      	ldrb	r3, [r3, #0]
    ea50:	b2db      	uxtb	r3, r3
    ea52:	461a      	mov	r2, r3
    ea54:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ea58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea5c:	5c9a      	ldrb	r2, [r3, r2]
    ea5e:	f24c 431b 	movw	r3, #50203	; 0xc41b
    ea62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea66:	701a      	strb	r2, [r3, #0]
    ea68:	f24c 431c 	movw	r3, #50204	; 0xc41c
    ea6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea70:	2200      	movs	r2, #0
    ea72:	701a      	strb	r2, [r3, #0]
    ea74:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ea78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea7c:	781b      	ldrb	r3, [r3, #0]
    ea7e:	b2db      	uxtb	r3, r3
    ea80:	3301      	adds	r3, #1
    ea82:	b2da      	uxtb	r2, r3
    ea84:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ea88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea8c:	701a      	strb	r2, [r3, #0]
    ea8e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ea92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea96:	781b      	ldrb	r3, [r3, #0]
    ea98:	b2db      	uxtb	r3, r3
    ea9a:	2bff      	cmp	r3, #255	; 0xff
    ea9c:	d105      	bne.n	eaaa <send_nav_values+0x115e>
    ea9e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    eaa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eaa6:	2200      	movs	r2, #0
    eaa8:	701a      	strb	r2, [r3, #0]
    eaaa:	f242 0338 	movw	r3, #8248	; 0x2038
    eaae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eab2:	f242 0238 	movw	r2, #8248	; 0x2038
    eab6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    eaba:	7812      	ldrb	r2, [r2, #0]
    eabc:	b2d2      	uxtb	r2, r2
    eabe:	f042 0201 	orr.w	r2, r2, #1
    eac2:	b2d2      	uxtb	r2, r2
    eac4:	701a      	strb	r2, [r3, #0]
    eac6:	f242 0339 	movw	r3, #8249	; 0x2039
    eaca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eace:	f242 0239 	movw	r2, #8249	; 0x2039
    ead2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ead6:	7812      	ldrb	r2, [r2, #0]
    ead8:	b2d2      	uxtb	r2, r2
    eada:	f042 0210 	orr.w	r2, r2, #16
    eade:	b2d2      	uxtb	r2, r2
    eae0:	701a      	strb	r2, [r3, #0]
    eae2:	e00b      	b.n	eafc <send_nav_values+0x11b0>
    eae4:	f24c 3318 	movw	r3, #49944	; 0xc318
    eae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eaec:	781b      	ldrb	r3, [r3, #0]
    eaee:	3301      	adds	r3, #1
    eaf0:	b2da      	uxtb	r2, r3
    eaf2:	f24c 3318 	movw	r3, #49944	; 0xc318
    eaf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eafa:	701a      	strb	r2, [r3, #0]
}
    eafc:	46bd      	mov	sp, r7
    eafe:	f85d 7b04 	ldr.w	r7, [sp], #4
    eb02:	4770      	bx	lr

0000eb04 <course_run>:

void course_run(void){
    eb04:	b580      	push	{r7, lr}
    eb06:	af00      	add	r7, sp, #0
  
  if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    eb08:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    eb0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb10:	781b      	ldrb	r3, [r3, #0]
    eb12:	2b02      	cmp	r3, #2
    eb14:	d006      	beq.n	eb24 <course_run+0x20>
    eb16:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    eb1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb1e:	781b      	ldrb	r3, [r3, #0]
    eb20:	2b03      	cmp	r3, #3
    eb22:	d112      	bne.n	eb4a <course_run+0x46>
  {
    if (lateral_mode >= LATERAL_MODE_COURSE)
    eb24:	f24c 23fe 	movw	r3, #49918	; 0xc2fe
    eb28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb2c:	781b      	ldrb	r3, [r3, #0]
    eb2e:	2b02      	cmp	r3, #2
    eb30:	d901      	bls.n	eb36 <course_run+0x32>
      course_pid_run(); /* aka compute nav_desired_roll */
    eb32:	f003 faf1 	bl	12118 <course_pid_run>
    desired_roll = nav_desired_roll;
    eb36:	f24c 63a0 	movw	r3, #50848	; 0xc6a0
    eb3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb3e:	681a      	ldr	r2, [r3, #0]
    eb40:	f24c 6344 	movw	r3, #50756	; 0xc644
    eb44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb48:	601a      	str	r2, [r3, #0]
  }  
  //vPrintString("S_17 Navigation task end!\n\r");
}
    eb4a:	bd80      	pop	{r7, pc}

0000eb4c <altitude_control_task>:

void altitude_control_task(void)
{
    eb4c:	b580      	push	{r7, lr}
    eb4e:	af00      	add	r7, sp, #0
	//vPrintString("S_18 navigation_task start! \n\r"); //SunnyBeike
	if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) {
    eb50:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    eb54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb58:	781b      	ldrb	r3, [r3, #0]
    eb5a:	2b02      	cmp	r3, #2
    eb5c:	d006      	beq.n	eb6c <altitude_control_task+0x20>
    eb5e:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    eb62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb66:	781b      	ldrb	r3, [r3, #0]
    eb68:	2b03      	cmp	r3, #3
    eb6a:	d108      	bne.n	eb7e <altitude_control_task+0x32>
		if (vertical_mode == VERTICAL_MODE_AUTO_ALT)
    eb6c:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    eb70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb74:	781b      	ldrb	r3, [r3, #0]
    eb76:	2b03      	cmp	r3, #3
    eb78:	d101      	bne.n	eb7e <altitude_control_task+0x32>
      			altitude_pid_run();
    eb7a:	f003 fd55 	bl	12628 <altitude_pid_run>
	}
	//vPrintString("S_18 navigation_task end! \n\r"); //SunnyBeike
}
    eb7e:	bd80      	pop	{r7, pc}

0000eb80 <climb_control_task>:
void climb_control_task(void)
{
    eb80:	b580      	push	{r7, lr}
    eb82:	af00      	add	r7, sp, #0
	//vPrintString("S_19 navigation_task start! \n\r"); //SunnyBeike
   if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    eb84:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    eb88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb8c:	781b      	ldrb	r3, [r3, #0]
    eb8e:	2b02      	cmp	r3, #2
    eb90:	d006      	beq.n	eba0 <climb_control_task+0x20>
    eb92:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    eb96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb9a:	781b      	ldrb	r3, [r3, #0]
    eb9c:	2b03      	cmp	r3, #3
    eb9e:	d135      	bne.n	ec0c <climb_control_task+0x8c>
   {
	if (vertical_mode >= VERTICAL_MODE_AUTO_CLIMB)
    eba0:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    eba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eba8:	781b      	ldrb	r3, [r3, #0]
    ebaa:	2b01      	cmp	r3, #1
    ebac:	d901      	bls.n	ebb2 <climb_control_task+0x32>
        	climb_pid_run();
    ebae:	f003 fb6b 	bl	12288 <climb_pid_run>
   	if (vertical_mode == VERTICAL_MODE_AUTO_GAZ)
    ebb2:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    ebb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebba:	781b      	ldrb	r3, [r3, #0]
    ebbc:	2b01      	cmp	r3, #1
    ebbe:	d10a      	bne.n	ebd6 <climb_control_task+0x56>
   		 desired_gaz = nav_desired_gaz;
    ebc0:	f24c 6398 	movw	r3, #50840	; 0xc698
    ebc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebc8:	881b      	ldrh	r3, [r3, #0]
    ebca:	b29a      	uxth	r2, r3
    ebcc:	f24c 634c 	movw	r3, #50764	; 0xc64c
    ebd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebd4:	801a      	strh	r2, [r3, #0]
   	if (low_battery || (!estimator_flight_time && !launch))
    ebd6:	f24c 3305 	movw	r3, #49925	; 0xc305
    ebda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebde:	781b      	ldrb	r3, [r3, #0]
    ebe0:	2b00      	cmp	r3, #0
    ebe2:	d10d      	bne.n	ec00 <climb_control_task+0x80>
    ebe4:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
    ebe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebec:	881b      	ldrh	r3, [r3, #0]
    ebee:	2b00      	cmp	r3, #0
    ebf0:	d10c      	bne.n	ec0c <climb_control_task+0x8c>
    ebf2:	f24c 3310 	movw	r3, #49936	; 0xc310
    ebf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebfa:	781b      	ldrb	r3, [r3, #0]
    ebfc:	2b00      	cmp	r3, #0
    ebfe:	d105      	bne.n	ec0c <climb_control_task+0x8c>
   		 desired_gaz = 0.;
    ec00:	f24c 634c 	movw	r3, #50764	; 0xc64c
    ec04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec08:	2200      	movs	r2, #0
    ec0a:	801a      	strh	r2, [r3, #0]
  }  
	//vPrintString("S_19 navigation_task end! \n\r"); //SunnyBeike
}
    ec0c:	bd80      	pop	{r7, pc}
    ec0e:	bf00      	nop

0000ec10 <stabilisation_task>:
//#endif
}
*/

void stabilisation_task(void)
{
    ec10:	b580      	push	{r7, lr}
    ec12:	af00      	add	r7, sp, #0
	//vPrintString("S_6 stabilisation_task start! \n\r"); //SunnyBeike
    ir_update();
    ec14:	f003 f926 	bl	11e64 <ir_update>
    estimator_update_state_infrared();
    ec18:	f006 fbac 	bl	15374 <estimator_update_state_infrared>
    roll_pitch_pid_run(); // Set  desired_aileron & desired_elevator
    ec1c:	f003 f990 	bl	11f40 <roll_pitch_pid_run>
    to_fbw.channels[RADIO_THROTTLE] = desired_gaz; // desired_gaz is set upon GPS message reception
    ec20:	f24c 634c 	movw	r3, #50764	; 0xc64c
    ec24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec28:	881a      	ldrh	r2, [r3, #0]
    ec2a:	f24c 4338 	movw	r3, #50232	; 0xc438
    ec2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec32:	801a      	strh	r2, [r3, #0]
    to_fbw.channels[RADIO_ROLL] = desired_aileron;
    ec34:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ec38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec3c:	881a      	ldrh	r2, [r3, #0]
    ec3e:	f24c 4338 	movw	r3, #50232	; 0xc438
    ec42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec46:	805a      	strh	r2, [r3, #2]
#ifndef ANTON_T7
    to_fbw.channels[RADIO_PITCH] = desired_elevator;
    ec48:	f24c 6350 	movw	r3, #50768	; 0xc650
    ec4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec50:	881a      	ldrh	r2, [r3, #0]
    ec52:	f24c 4338 	movw	r3, #50232	; 0xc438
    ec56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec5a:	809a      	strh	r2, [r3, #4]
#endif
    
    // Code for camera stabilization, FIXME put that elsewhere
    to_fbw.channels[RADIO_GAIN1] = TRIM_PPRZ(MAX_PPRZ/0.75*(-estimator_phi));
    ec5c:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    ec60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec64:	681b      	ldr	r3, [r3, #0]
    ec66:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    ec6a:	4618      	mov	r0, r3
    ec6c:	f008 fffa 	bl	17c64 <__aeabi_f2d>
    ec70:	4602      	mov	r2, r0
    ec72:	460b      	mov	r3, r1
    ec74:	4610      	mov	r0, r2
    ec76:	4619      	mov	r1, r3
    ec78:	f04f 0200 	mov.w	r2, #0
    ec7c:	f04f 0300 	mov.w	r3, #0
    ec80:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    ec84:	f009 f842 	bl	17d0c <__aeabi_dmul>
    ec88:	4602      	mov	r2, r0
    ec8a:	460b      	mov	r3, r1
    ec8c:	4610      	mov	r0, r2
    ec8e:	4619      	mov	r1, r3
    ec90:	f04f 0200 	mov.w	r2, #0
    ec94:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    ec98:	f2cc 03c2 	movt	r3, #49346	; 0xc0c2
    ec9c:	f009 faa8 	bl	181f0 <__aeabi_dcmplt>
    eca0:	4603      	mov	r3, r0
    eca2:	2b00      	cmp	r3, #0
    eca4:	d002      	beq.n	ecac <stabilisation_task+0x9c>
    eca6:	f64d 2280 	movw	r2, #55936	; 0xda80
    ecaa:	e046      	b.n	ed3a <stabilisation_task+0x12a>
    ecac:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    ecb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecb4:	681b      	ldr	r3, [r3, #0]
    ecb6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    ecba:	4618      	mov	r0, r3
    ecbc:	f008 ffd2 	bl	17c64 <__aeabi_f2d>
    ecc0:	4602      	mov	r2, r0
    ecc2:	460b      	mov	r3, r1
    ecc4:	4610      	mov	r0, r2
    ecc6:	4619      	mov	r1, r3
    ecc8:	f04f 0200 	mov.w	r2, #0
    eccc:	f04f 0300 	mov.w	r3, #0
    ecd0:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    ecd4:	f009 f81a 	bl	17d0c <__aeabi_dmul>
    ecd8:	4602      	mov	r2, r0
    ecda:	460b      	mov	r3, r1
    ecdc:	4610      	mov	r0, r2
    ecde:	4619      	mov	r1, r3
    ece0:	f04f 0200 	mov.w	r2, #0
    ece4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    ece8:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
    ecec:	f009 fa9e 	bl	1822c <__aeabi_dcmpgt>
    ecf0:	4603      	mov	r3, r0
    ecf2:	2b00      	cmp	r3, #0
    ecf4:	d002      	beq.n	ecfc <stabilisation_task+0xec>
    ecf6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    ecfa:	e01d      	b.n	ed38 <stabilisation_task+0x128>
    ecfc:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    ed00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed04:	681b      	ldr	r3, [r3, #0]
    ed06:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    ed0a:	4618      	mov	r0, r3
    ed0c:	f008 ffaa 	bl	17c64 <__aeabi_f2d>
    ed10:	4602      	mov	r2, r0
    ed12:	460b      	mov	r3, r1
    ed14:	4610      	mov	r0, r2
    ed16:	4619      	mov	r1, r3
    ed18:	f04f 0200 	mov.w	r2, #0
    ed1c:	f04f 0300 	mov.w	r3, #0
    ed20:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    ed24:	f008 fff2 	bl	17d0c <__aeabi_dmul>
    ed28:	4602      	mov	r2, r0
    ed2a:	460b      	mov	r3, r1
    ed2c:	4610      	mov	r0, r2
    ed2e:	4619      	mov	r1, r3
    ed30:	f009 fa86 	bl	18240 <__aeabi_d2iz>
    ed34:	4603      	mov	r3, r0
    ed36:	b29b      	uxth	r3, r3
    ed38:	b29a      	uxth	r2, r3
    ed3a:	f24c 4338 	movw	r3, #50232	; 0xc438
    ed3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed42:	815a      	strh	r2, [r3, #10]
	//vPrintString("S_6 stabilisation_task end! \n\r"); //SunnyBeike
}
    ed44:	bd80      	pop	{r7, pc}
    ed46:	bf00      	nop

0000ed48 <send_gps_pos>:
 * If \a estimator_flight_time is null and \a estimator_hspeed_mod is greater
 * than \a MIN_SPEED_FOR_TAKEOFF, set the \a estimator_flight_time to 1 and \a
 * launch to true (which is not set in non auto launch. Then call
 * \a DOWNLINK_SEND_TAKEOFF
 */
void send_gps_pos( void ) {
    ed48:	b580      	push	{r7, lr}
    ed4a:	af00      	add	r7, sp, #0
  gps_msg_received = FALSE;
    ed4c:	f24c 43ad 	movw	r3, #50349	; 0xc4ad
    ed50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed54:	2200      	movs	r2, #0
    ed56:	701a      	strb	r2, [r3, #0]
  if (gps_pos_available){
    ed58:	f24c 43ae 	movw	r3, #50350	; 0xc4ae
    ed5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed60:	781b      	ldrb	r3, [r3, #0]
    ed62:	2b00      	cmp	r3, #0
    ed64:	f001 81af 	beq.w	100c6 <send_gps_pos+0x137e>
     DOWNLINK_SEND_GPS(&gps_mode, &gps_utm_east, &gps_utm_north, &gps_fcourse, &gps_falt, &gps_fspeed,&gps_fclimb, &gps_ftow);
    ed68:	f24c 3319 	movw	r3, #49945	; 0xc319
    ed6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed70:	781a      	ldrb	r2, [r3, #0]
    ed72:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ed76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed7a:	781b      	ldrb	r3, [r3, #0]
    ed7c:	b2db      	uxtb	r3, r3
    ed7e:	429a      	cmp	r2, r3
    ed80:	d313      	bcc.n	edaa <send_gps_pos+0x62>
    ed82:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ed86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed8a:	781b      	ldrb	r3, [r3, #0]
    ed8c:	b2db      	uxtb	r3, r3
    ed8e:	461a      	mov	r2, r3
    ed90:	f24c 3319 	movw	r3, #49945	; 0xc319
    ed94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed98:	781b      	ldrb	r3, [r3, #0]
    ed9a:	1ad3      	subs	r3, r2, r3
    ed9c:	33ff      	adds	r3, #255	; 0xff
    ed9e:	2b21      	cmp	r3, #33	; 0x21
    eda0:	bfd4      	ite	le
    eda2:	2300      	movle	r3, #0
    eda4:	2301      	movgt	r3, #1
    eda6:	b2db      	uxtb	r3, r3
    eda8:	e011      	b.n	edce <send_gps_pos+0x86>
    edaa:	f24c 331a 	movw	r3, #49946	; 0xc31a
    edae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edb2:	781b      	ldrb	r3, [r3, #0]
    edb4:	b2db      	uxtb	r3, r3
    edb6:	461a      	mov	r2, r3
    edb8:	f24c 3319 	movw	r3, #49945	; 0xc319
    edbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edc0:	781b      	ldrb	r3, [r3, #0]
    edc2:	1ad3      	subs	r3, r2, r3
    edc4:	2b21      	cmp	r3, #33	; 0x21
    edc6:	bfd4      	ite	le
    edc8:	2300      	movle	r3, #0
    edca:	2301      	movgt	r3, #1
    edcc:	b2db      	uxtb	r3, r3
    edce:	2b00      	cmp	r3, #0
    edd0:	f001 816b 	beq.w	100aa <send_gps_pos+0x1362>
    edd4:	f24c 3319 	movw	r3, #49945	; 0xc319
    edd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eddc:	781b      	ldrb	r3, [r3, #0]
    edde:	461a      	mov	r2, r3
    ede0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ede4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ede8:	2105      	movs	r1, #5
    edea:	5499      	strb	r1, [r3, r2]
    edec:	f24c 3319 	movw	r3, #49945	; 0xc319
    edf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edf4:	781b      	ldrb	r3, [r3, #0]
    edf6:	3301      	adds	r3, #1
    edf8:	b2da      	uxtb	r2, r3
    edfa:	f24c 3319 	movw	r3, #49945	; 0xc319
    edfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee02:	701a      	strb	r2, [r3, #0]
    ee04:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee0c:	781b      	ldrb	r3, [r3, #0]
    ee0e:	2bff      	cmp	r3, #255	; 0xff
    ee10:	d105      	bne.n	ee1e <send_gps_pos+0xd6>
    ee12:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee1a:	2200      	movs	r2, #0
    ee1c:	701a      	strb	r2, [r3, #0]
    ee1e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee26:	781b      	ldrb	r3, [r3, #0]
    ee28:	461a      	mov	r2, r3
    ee2a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ee2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee32:	2108      	movs	r1, #8
    ee34:	5499      	strb	r1, [r3, r2]
    ee36:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee3e:	781b      	ldrb	r3, [r3, #0]
    ee40:	3301      	adds	r3, #1
    ee42:	b2da      	uxtb	r2, r3
    ee44:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee4c:	701a      	strb	r2, [r3, #0]
    ee4e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee56:	781b      	ldrb	r3, [r3, #0]
    ee58:	2bff      	cmp	r3, #255	; 0xff
    ee5a:	d105      	bne.n	ee68 <send_gps_pos+0x120>
    ee5c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee64:	2200      	movs	r2, #0
    ee66:	701a      	strb	r2, [r3, #0]
    ee68:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ee6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee70:	2208      	movs	r2, #8
    ee72:	701a      	strb	r2, [r3, #0]
    ee74:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ee78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee7c:	2208      	movs	r2, #8
    ee7e:	701a      	strb	r2, [r3, #0]
    ee80:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee88:	781b      	ldrb	r3, [r3, #0]
    ee8a:	461a      	mov	r2, r3
    ee8c:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
    ee90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee94:	7819      	ldrb	r1, [r3, #0]
    ee96:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ee9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee9e:	5499      	strb	r1, [r3, r2]
    eea0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    eea4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eea8:	781a      	ldrb	r2, [r3, #0]
    eeaa:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
    eeae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeb2:	781b      	ldrb	r3, [r3, #0]
    eeb4:	4413      	add	r3, r2
    eeb6:	b2da      	uxtb	r2, r3
    eeb8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    eebc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eec0:	701a      	strb	r2, [r3, #0]
    eec2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    eec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeca:	781a      	ldrb	r2, [r3, #0]
    eecc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    eed0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eed4:	781b      	ldrb	r3, [r3, #0]
    eed6:	4413      	add	r3, r2
    eed8:	b2da      	uxtb	r2, r3
    eeda:	f24c 431e 	movw	r3, #50206	; 0xc41e
    eede:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eee2:	701a      	strb	r2, [r3, #0]
    eee4:	f24c 3319 	movw	r3, #49945	; 0xc319
    eee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeec:	781b      	ldrb	r3, [r3, #0]
    eeee:	3301      	adds	r3, #1
    eef0:	b2da      	uxtb	r2, r3
    eef2:	f24c 3319 	movw	r3, #49945	; 0xc319
    eef6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eefa:	701a      	strb	r2, [r3, #0]
    eefc:	f24c 3319 	movw	r3, #49945	; 0xc319
    ef00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef04:	781b      	ldrb	r3, [r3, #0]
    ef06:	2bff      	cmp	r3, #255	; 0xff
    ef08:	d105      	bne.n	ef16 <send_gps_pos+0x1ce>
    ef0a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ef0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef12:	2200      	movs	r2, #0
    ef14:	701a      	strb	r2, [r3, #0]
    ef16:	f24c 3319 	movw	r3, #49945	; 0xc319
    ef1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef1e:	781b      	ldrb	r3, [r3, #0]
    ef20:	461a      	mov	r2, r3
    ef22:	f24c 439c 	movw	r3, #50332	; 0xc49c
    ef26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef2a:	7819      	ldrb	r1, [r3, #0]
    ef2c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ef30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef34:	5499      	strb	r1, [r3, r2]
    ef36:	f24c 439c 	movw	r3, #50332	; 0xc49c
    ef3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef3e:	781a      	ldrb	r2, [r3, #0]
    ef40:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ef44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef48:	781b      	ldrb	r3, [r3, #0]
    ef4a:	4413      	add	r3, r2
    ef4c:	b2da      	uxtb	r2, r3
    ef4e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ef52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef56:	701a      	strb	r2, [r3, #0]
    ef58:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ef5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef60:	781a      	ldrb	r2, [r3, #0]
    ef62:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ef66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef6a:	781b      	ldrb	r3, [r3, #0]
    ef6c:	4413      	add	r3, r2
    ef6e:	b2da      	uxtb	r2, r3
    ef70:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ef74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef78:	701a      	strb	r2, [r3, #0]
    ef7a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ef7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef82:	781b      	ldrb	r3, [r3, #0]
    ef84:	3301      	adds	r3, #1
    ef86:	b2da      	uxtb	r2, r3
    ef88:	f24c 3319 	movw	r3, #49945	; 0xc319
    ef8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef90:	701a      	strb	r2, [r3, #0]
    ef92:	f24c 3319 	movw	r3, #49945	; 0xc319
    ef96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef9a:	781b      	ldrb	r3, [r3, #0]
    ef9c:	2bff      	cmp	r3, #255	; 0xff
    ef9e:	d105      	bne.n	efac <send_gps_pos+0x264>
    efa0:	f24c 3319 	movw	r3, #49945	; 0xc319
    efa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efa8:	2200      	movs	r2, #0
    efaa:	701a      	strb	r2, [r3, #0]
    efac:	f24c 3319 	movw	r3, #49945	; 0xc319
    efb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efb4:	781b      	ldrb	r3, [r3, #0]
    efb6:	461a      	mov	r2, r3
    efb8:	f24c 439c 	movw	r3, #50332	; 0xc49c
    efbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efc0:	7859      	ldrb	r1, [r3, #1]
    efc2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    efc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efca:	5499      	strb	r1, [r3, r2]
    efcc:	4bd1      	ldr	r3, [pc, #836]	; (f314 <send_gps_pos+0x5cc>)
    efce:	781a      	ldrb	r2, [r3, #0]
    efd0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    efd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efd8:	781b      	ldrb	r3, [r3, #0]
    efda:	4413      	add	r3, r2
    efdc:	b2da      	uxtb	r2, r3
    efde:	f24c 431d 	movw	r3, #50205	; 0xc41d
    efe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efe6:	701a      	strb	r2, [r3, #0]
    efe8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    efec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eff0:	781a      	ldrb	r2, [r3, #0]
    eff2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    eff6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    effa:	781b      	ldrb	r3, [r3, #0]
    effc:	4413      	add	r3, r2
    effe:	b2da      	uxtb	r2, r3
    f000:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f004:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f008:	701a      	strb	r2, [r3, #0]
    f00a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f00e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f012:	781b      	ldrb	r3, [r3, #0]
    f014:	3301      	adds	r3, #1
    f016:	b2da      	uxtb	r2, r3
    f018:	f24c 3319 	movw	r3, #49945	; 0xc319
    f01c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f020:	701a      	strb	r2, [r3, #0]
    f022:	f24c 3319 	movw	r3, #49945	; 0xc319
    f026:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f02a:	781b      	ldrb	r3, [r3, #0]
    f02c:	2bff      	cmp	r3, #255	; 0xff
    f02e:	d105      	bne.n	f03c <send_gps_pos+0x2f4>
    f030:	f24c 3319 	movw	r3, #49945	; 0xc319
    f034:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f038:	2200      	movs	r2, #0
    f03a:	701a      	strb	r2, [r3, #0]
    f03c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f040:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f044:	781b      	ldrb	r3, [r3, #0]
    f046:	461a      	mov	r2, r3
    f048:	f24c 439c 	movw	r3, #50332	; 0xc49c
    f04c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f050:	7899      	ldrb	r1, [r3, #2]
    f052:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f056:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f05a:	5499      	strb	r1, [r3, r2]
    f05c:	4bae      	ldr	r3, [pc, #696]	; (f318 <send_gps_pos+0x5d0>)
    f05e:	781a      	ldrb	r2, [r3, #0]
    f060:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f064:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f068:	781b      	ldrb	r3, [r3, #0]
    f06a:	4413      	add	r3, r2
    f06c:	b2da      	uxtb	r2, r3
    f06e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f072:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f076:	701a      	strb	r2, [r3, #0]
    f078:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f07c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f080:	781a      	ldrb	r2, [r3, #0]
    f082:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f086:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f08a:	781b      	ldrb	r3, [r3, #0]
    f08c:	4413      	add	r3, r2
    f08e:	b2da      	uxtb	r2, r3
    f090:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f094:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f098:	701a      	strb	r2, [r3, #0]
    f09a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f09e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0a2:	781b      	ldrb	r3, [r3, #0]
    f0a4:	3301      	adds	r3, #1
    f0a6:	b2da      	uxtb	r2, r3
    f0a8:	f24c 3319 	movw	r3, #49945	; 0xc319
    f0ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0b0:	701a      	strb	r2, [r3, #0]
    f0b2:	f24c 3319 	movw	r3, #49945	; 0xc319
    f0b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0ba:	781b      	ldrb	r3, [r3, #0]
    f0bc:	2bff      	cmp	r3, #255	; 0xff
    f0be:	d105      	bne.n	f0cc <send_gps_pos+0x384>
    f0c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    f0c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0c8:	2200      	movs	r2, #0
    f0ca:	701a      	strb	r2, [r3, #0]
    f0cc:	f24c 3319 	movw	r3, #49945	; 0xc319
    f0d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0d4:	781b      	ldrb	r3, [r3, #0]
    f0d6:	461a      	mov	r2, r3
    f0d8:	f24c 439c 	movw	r3, #50332	; 0xc49c
    f0dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0e0:	78d9      	ldrb	r1, [r3, #3]
    f0e2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f0e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0ea:	5499      	strb	r1, [r3, r2]
    f0ec:	4b8b      	ldr	r3, [pc, #556]	; (f31c <send_gps_pos+0x5d4>)
    f0ee:	781a      	ldrb	r2, [r3, #0]
    f0f0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f0f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0f8:	781b      	ldrb	r3, [r3, #0]
    f0fa:	4413      	add	r3, r2
    f0fc:	b2da      	uxtb	r2, r3
    f0fe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f102:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f106:	701a      	strb	r2, [r3, #0]
    f108:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f10c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f110:	781a      	ldrb	r2, [r3, #0]
    f112:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f116:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f11a:	781b      	ldrb	r3, [r3, #0]
    f11c:	4413      	add	r3, r2
    f11e:	b2da      	uxtb	r2, r3
    f120:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f124:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f128:	701a      	strb	r2, [r3, #0]
    f12a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f12e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f132:	781b      	ldrb	r3, [r3, #0]
    f134:	3301      	adds	r3, #1
    f136:	b2da      	uxtb	r2, r3
    f138:	f24c 3319 	movw	r3, #49945	; 0xc319
    f13c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f140:	701a      	strb	r2, [r3, #0]
    f142:	f24c 3319 	movw	r3, #49945	; 0xc319
    f146:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f14a:	781b      	ldrb	r3, [r3, #0]
    f14c:	2bff      	cmp	r3, #255	; 0xff
    f14e:	d105      	bne.n	f15c <send_gps_pos+0x414>
    f150:	f24c 3319 	movw	r3, #49945	; 0xc319
    f154:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f158:	2200      	movs	r2, #0
    f15a:	701a      	strb	r2, [r3, #0]
    f15c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f164:	781b      	ldrb	r3, [r3, #0]
    f166:	461a      	mov	r2, r3
    f168:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
    f16c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f170:	7819      	ldrb	r1, [r3, #0]
    f172:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f176:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f17a:	5499      	strb	r1, [r3, r2]
    f17c:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
    f180:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f184:	781a      	ldrb	r2, [r3, #0]
    f186:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f18a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f18e:	781b      	ldrb	r3, [r3, #0]
    f190:	4413      	add	r3, r2
    f192:	b2da      	uxtb	r2, r3
    f194:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f198:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f19c:	701a      	strb	r2, [r3, #0]
    f19e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f1a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1a6:	781a      	ldrb	r2, [r3, #0]
    f1a8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f1ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1b0:	781b      	ldrb	r3, [r3, #0]
    f1b2:	4413      	add	r3, r2
    f1b4:	b2da      	uxtb	r2, r3
    f1b6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f1ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1be:	701a      	strb	r2, [r3, #0]
    f1c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    f1c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1c8:	781b      	ldrb	r3, [r3, #0]
    f1ca:	3301      	adds	r3, #1
    f1cc:	b2da      	uxtb	r2, r3
    f1ce:	f24c 3319 	movw	r3, #49945	; 0xc319
    f1d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1d6:	701a      	strb	r2, [r3, #0]
    f1d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    f1dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1e0:	781b      	ldrb	r3, [r3, #0]
    f1e2:	2bff      	cmp	r3, #255	; 0xff
    f1e4:	d105      	bne.n	f1f2 <send_gps_pos+0x4aa>
    f1e6:	f24c 3319 	movw	r3, #49945	; 0xc319
    f1ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1ee:	2200      	movs	r2, #0
    f1f0:	701a      	strb	r2, [r3, #0]
    f1f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    f1f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1fa:	781b      	ldrb	r3, [r3, #0]
    f1fc:	461a      	mov	r2, r3
    f1fe:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
    f202:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f206:	7859      	ldrb	r1, [r3, #1]
    f208:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f20c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f210:	5499      	strb	r1, [r3, r2]
    f212:	4b43      	ldr	r3, [pc, #268]	; (f320 <send_gps_pos+0x5d8>)
    f214:	781a      	ldrb	r2, [r3, #0]
    f216:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f21a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f21e:	781b      	ldrb	r3, [r3, #0]
    f220:	4413      	add	r3, r2
    f222:	b2da      	uxtb	r2, r3
    f224:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f228:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f22c:	701a      	strb	r2, [r3, #0]
    f22e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f232:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f236:	781a      	ldrb	r2, [r3, #0]
    f238:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f23c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f240:	781b      	ldrb	r3, [r3, #0]
    f242:	4413      	add	r3, r2
    f244:	b2da      	uxtb	r2, r3
    f246:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f24a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f24e:	701a      	strb	r2, [r3, #0]
    f250:	f24c 3319 	movw	r3, #49945	; 0xc319
    f254:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f258:	781b      	ldrb	r3, [r3, #0]
    f25a:	3301      	adds	r3, #1
    f25c:	b2da      	uxtb	r2, r3
    f25e:	f24c 3319 	movw	r3, #49945	; 0xc319
    f262:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f266:	701a      	strb	r2, [r3, #0]
    f268:	f24c 3319 	movw	r3, #49945	; 0xc319
    f26c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f270:	781b      	ldrb	r3, [r3, #0]
    f272:	2bff      	cmp	r3, #255	; 0xff
    f274:	d105      	bne.n	f282 <send_gps_pos+0x53a>
    f276:	f24c 3319 	movw	r3, #49945	; 0xc319
    f27a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f27e:	2200      	movs	r2, #0
    f280:	701a      	strb	r2, [r3, #0]
    f282:	f24c 3319 	movw	r3, #49945	; 0xc319
    f286:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f28a:	781b      	ldrb	r3, [r3, #0]
    f28c:	461a      	mov	r2, r3
    f28e:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
    f292:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f296:	7899      	ldrb	r1, [r3, #2]
    f298:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f29c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2a0:	5499      	strb	r1, [r3, r2]
    f2a2:	4b20      	ldr	r3, [pc, #128]	; (f324 <send_gps_pos+0x5dc>)
    f2a4:	781a      	ldrb	r2, [r3, #0]
    f2a6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f2aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2ae:	781b      	ldrb	r3, [r3, #0]
    f2b0:	4413      	add	r3, r2
    f2b2:	b2da      	uxtb	r2, r3
    f2b4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f2b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2bc:	701a      	strb	r2, [r3, #0]
    f2be:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f2c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2c6:	781a      	ldrb	r2, [r3, #0]
    f2c8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f2cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2d0:	781b      	ldrb	r3, [r3, #0]
    f2d2:	4413      	add	r3, r2
    f2d4:	b2da      	uxtb	r2, r3
    f2d6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f2da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2de:	701a      	strb	r2, [r3, #0]
    f2e0:	f24c 3319 	movw	r3, #49945	; 0xc319
    f2e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2e8:	781b      	ldrb	r3, [r3, #0]
    f2ea:	3301      	adds	r3, #1
    f2ec:	b2da      	uxtb	r2, r3
    f2ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    f2f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2f6:	701a      	strb	r2, [r3, #0]
    f2f8:	f24c 3319 	movw	r3, #49945	; 0xc319
    f2fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f300:	781b      	ldrb	r3, [r3, #0]
    f302:	2bff      	cmp	r3, #255	; 0xff
    f304:	d110      	bne.n	f328 <send_gps_pos+0x5e0>
    f306:	f24c 3319 	movw	r3, #49945	; 0xc319
    f30a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f30e:	2200      	movs	r2, #0
    f310:	701a      	strb	r2, [r3, #0]
    f312:	e009      	b.n	f328 <send_gps_pos+0x5e0>
    f314:	2004c49d 	.word	0x2004c49d
    f318:	2004c49e 	.word	0x2004c49e
    f31c:	2004c49f 	.word	0x2004c49f
    f320:	2004c4a1 	.word	0x2004c4a1
    f324:	2004c4a2 	.word	0x2004c4a2
    f328:	f24c 3319 	movw	r3, #49945	; 0xc319
    f32c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f330:	781b      	ldrb	r3, [r3, #0]
    f332:	461a      	mov	r2, r3
    f334:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
    f338:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f33c:	78d9      	ldrb	r1, [r3, #3]
    f33e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f342:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f346:	5499      	strb	r1, [r3, r2]
    f348:	4bd3      	ldr	r3, [pc, #844]	; (f698 <send_gps_pos+0x950>)
    f34a:	781a      	ldrb	r2, [r3, #0]
    f34c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f350:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f354:	781b      	ldrb	r3, [r3, #0]
    f356:	4413      	add	r3, r2
    f358:	b2da      	uxtb	r2, r3
    f35a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f35e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f362:	701a      	strb	r2, [r3, #0]
    f364:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f368:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f36c:	781a      	ldrb	r2, [r3, #0]
    f36e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f376:	781b      	ldrb	r3, [r3, #0]
    f378:	4413      	add	r3, r2
    f37a:	b2da      	uxtb	r2, r3
    f37c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f380:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f384:	701a      	strb	r2, [r3, #0]
    f386:	f24c 3319 	movw	r3, #49945	; 0xc319
    f38a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f38e:	781b      	ldrb	r3, [r3, #0]
    f390:	3301      	adds	r3, #1
    f392:	b2da      	uxtb	r2, r3
    f394:	f24c 3319 	movw	r3, #49945	; 0xc319
    f398:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f39c:	701a      	strb	r2, [r3, #0]
    f39e:	f24c 3319 	movw	r3, #49945	; 0xc319
    f3a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3a6:	781b      	ldrb	r3, [r3, #0]
    f3a8:	2bff      	cmp	r3, #255	; 0xff
    f3aa:	d105      	bne.n	f3b8 <send_gps_pos+0x670>
    f3ac:	f24c 3319 	movw	r3, #49945	; 0xc319
    f3b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3b4:	2200      	movs	r2, #0
    f3b6:	701a      	strb	r2, [r3, #0]
    f3b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    f3bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3c0:	781b      	ldrb	r3, [r3, #0]
    f3c2:	461a      	mov	r2, r3
    f3c4:	f24c 4398 	movw	r3, #50328	; 0xc498
    f3c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3cc:	7819      	ldrb	r1, [r3, #0]
    f3ce:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f3d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3d6:	5499      	strb	r1, [r3, r2]
    f3d8:	f24c 4398 	movw	r3, #50328	; 0xc498
    f3dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3e0:	781a      	ldrb	r2, [r3, #0]
    f3e2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f3e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3ea:	781b      	ldrb	r3, [r3, #0]
    f3ec:	4413      	add	r3, r2
    f3ee:	b2da      	uxtb	r2, r3
    f3f0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f3f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3f8:	701a      	strb	r2, [r3, #0]
    f3fa:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f3fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f402:	781a      	ldrb	r2, [r3, #0]
    f404:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f408:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f40c:	781b      	ldrb	r3, [r3, #0]
    f40e:	4413      	add	r3, r2
    f410:	b2da      	uxtb	r2, r3
    f412:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f41a:	701a      	strb	r2, [r3, #0]
    f41c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f420:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f424:	781b      	ldrb	r3, [r3, #0]
    f426:	3301      	adds	r3, #1
    f428:	b2da      	uxtb	r2, r3
    f42a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f42e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f432:	701a      	strb	r2, [r3, #0]
    f434:	f24c 3319 	movw	r3, #49945	; 0xc319
    f438:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f43c:	781b      	ldrb	r3, [r3, #0]
    f43e:	2bff      	cmp	r3, #255	; 0xff
    f440:	d105      	bne.n	f44e <send_gps_pos+0x706>
    f442:	f24c 3319 	movw	r3, #49945	; 0xc319
    f446:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f44a:	2200      	movs	r2, #0
    f44c:	701a      	strb	r2, [r3, #0]
    f44e:	f24c 3319 	movw	r3, #49945	; 0xc319
    f452:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f456:	781b      	ldrb	r3, [r3, #0]
    f458:	461a      	mov	r2, r3
    f45a:	f24c 4398 	movw	r3, #50328	; 0xc498
    f45e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f462:	7859      	ldrb	r1, [r3, #1]
    f464:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f468:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f46c:	5499      	strb	r1, [r3, r2]
    f46e:	4b8b      	ldr	r3, [pc, #556]	; (f69c <send_gps_pos+0x954>)
    f470:	781a      	ldrb	r2, [r3, #0]
    f472:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f476:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f47a:	781b      	ldrb	r3, [r3, #0]
    f47c:	4413      	add	r3, r2
    f47e:	b2da      	uxtb	r2, r3
    f480:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f484:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f488:	701a      	strb	r2, [r3, #0]
    f48a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f48e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f492:	781a      	ldrb	r2, [r3, #0]
    f494:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f498:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f49c:	781b      	ldrb	r3, [r3, #0]
    f49e:	4413      	add	r3, r2
    f4a0:	b2da      	uxtb	r2, r3
    f4a2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f4a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4aa:	701a      	strb	r2, [r3, #0]
    f4ac:	f24c 3319 	movw	r3, #49945	; 0xc319
    f4b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4b4:	781b      	ldrb	r3, [r3, #0]
    f4b6:	3301      	adds	r3, #1
    f4b8:	b2da      	uxtb	r2, r3
    f4ba:	f24c 3319 	movw	r3, #49945	; 0xc319
    f4be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4c2:	701a      	strb	r2, [r3, #0]
    f4c4:	f24c 3319 	movw	r3, #49945	; 0xc319
    f4c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4cc:	781b      	ldrb	r3, [r3, #0]
    f4ce:	2bff      	cmp	r3, #255	; 0xff
    f4d0:	d105      	bne.n	f4de <send_gps_pos+0x796>
    f4d2:	f24c 3319 	movw	r3, #49945	; 0xc319
    f4d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4da:	2200      	movs	r2, #0
    f4dc:	701a      	strb	r2, [r3, #0]
    f4de:	f24c 3319 	movw	r3, #49945	; 0xc319
    f4e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4e6:	781b      	ldrb	r3, [r3, #0]
    f4e8:	461a      	mov	r2, r3
    f4ea:	f24c 4398 	movw	r3, #50328	; 0xc498
    f4ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4f2:	7899      	ldrb	r1, [r3, #2]
    f4f4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f4f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4fc:	5499      	strb	r1, [r3, r2]
    f4fe:	4b68      	ldr	r3, [pc, #416]	; (f6a0 <send_gps_pos+0x958>)
    f500:	781a      	ldrb	r2, [r3, #0]
    f502:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f50a:	781b      	ldrb	r3, [r3, #0]
    f50c:	4413      	add	r3, r2
    f50e:	b2da      	uxtb	r2, r3
    f510:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f514:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f518:	701a      	strb	r2, [r3, #0]
    f51a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f51e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f522:	781a      	ldrb	r2, [r3, #0]
    f524:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f528:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f52c:	781b      	ldrb	r3, [r3, #0]
    f52e:	4413      	add	r3, r2
    f530:	b2da      	uxtb	r2, r3
    f532:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f536:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f53a:	701a      	strb	r2, [r3, #0]
    f53c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f540:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f544:	781b      	ldrb	r3, [r3, #0]
    f546:	3301      	adds	r3, #1
    f548:	b2da      	uxtb	r2, r3
    f54a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f54e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f552:	701a      	strb	r2, [r3, #0]
    f554:	f24c 3319 	movw	r3, #49945	; 0xc319
    f558:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f55c:	781b      	ldrb	r3, [r3, #0]
    f55e:	2bff      	cmp	r3, #255	; 0xff
    f560:	d105      	bne.n	f56e <send_gps_pos+0x826>
    f562:	f24c 3319 	movw	r3, #49945	; 0xc319
    f566:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f56a:	2200      	movs	r2, #0
    f56c:	701a      	strb	r2, [r3, #0]
    f56e:	f24c 3319 	movw	r3, #49945	; 0xc319
    f572:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f576:	781b      	ldrb	r3, [r3, #0]
    f578:	461a      	mov	r2, r3
    f57a:	f24c 4398 	movw	r3, #50328	; 0xc498
    f57e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f582:	78d9      	ldrb	r1, [r3, #3]
    f584:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f588:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f58c:	5499      	strb	r1, [r3, r2]
    f58e:	4b45      	ldr	r3, [pc, #276]	; (f6a4 <send_gps_pos+0x95c>)
    f590:	781a      	ldrb	r2, [r3, #0]
    f592:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f596:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f59a:	781b      	ldrb	r3, [r3, #0]
    f59c:	4413      	add	r3, r2
    f59e:	b2da      	uxtb	r2, r3
    f5a0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f5a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5a8:	701a      	strb	r2, [r3, #0]
    f5aa:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f5ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5b2:	781a      	ldrb	r2, [r3, #0]
    f5b4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f5b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5bc:	781b      	ldrb	r3, [r3, #0]
    f5be:	4413      	add	r3, r2
    f5c0:	b2da      	uxtb	r2, r3
    f5c2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f5c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5ca:	701a      	strb	r2, [r3, #0]
    f5cc:	f24c 3319 	movw	r3, #49945	; 0xc319
    f5d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5d4:	781b      	ldrb	r3, [r3, #0]
    f5d6:	3301      	adds	r3, #1
    f5d8:	b2da      	uxtb	r2, r3
    f5da:	f24c 3319 	movw	r3, #49945	; 0xc319
    f5de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5e2:	701a      	strb	r2, [r3, #0]
    f5e4:	f24c 3319 	movw	r3, #49945	; 0xc319
    f5e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5ec:	781b      	ldrb	r3, [r3, #0]
    f5ee:	2bff      	cmp	r3, #255	; 0xff
    f5f0:	d105      	bne.n	f5fe <send_gps_pos+0x8b6>
    f5f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    f5f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5fa:	2200      	movs	r2, #0
    f5fc:	701a      	strb	r2, [r3, #0]
    f5fe:	f24c 3319 	movw	r3, #49945	; 0xc319
    f602:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f606:	781b      	ldrb	r3, [r3, #0]
    f608:	461a      	mov	r2, r3
    f60a:	f24c 438c 	movw	r3, #50316	; 0xc48c
    f60e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f612:	7819      	ldrb	r1, [r3, #0]
    f614:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f618:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f61c:	5499      	strb	r1, [r3, r2]
    f61e:	f24c 438c 	movw	r3, #50316	; 0xc48c
    f622:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f626:	781a      	ldrb	r2, [r3, #0]
    f628:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f62c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f630:	781b      	ldrb	r3, [r3, #0]
    f632:	4413      	add	r3, r2
    f634:	b2da      	uxtb	r2, r3
    f636:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f63a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f63e:	701a      	strb	r2, [r3, #0]
    f640:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f644:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f648:	781a      	ldrb	r2, [r3, #0]
    f64a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f64e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f652:	781b      	ldrb	r3, [r3, #0]
    f654:	4413      	add	r3, r2
    f656:	b2da      	uxtb	r2, r3
    f658:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f65c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f660:	701a      	strb	r2, [r3, #0]
    f662:	f24c 3319 	movw	r3, #49945	; 0xc319
    f666:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f66a:	781b      	ldrb	r3, [r3, #0]
    f66c:	3301      	adds	r3, #1
    f66e:	b2da      	uxtb	r2, r3
    f670:	f24c 3319 	movw	r3, #49945	; 0xc319
    f674:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f678:	701a      	strb	r2, [r3, #0]
    f67a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f67e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f682:	781b      	ldrb	r3, [r3, #0]
    f684:	2bff      	cmp	r3, #255	; 0xff
    f686:	d10f      	bne.n	f6a8 <send_gps_pos+0x960>
    f688:	f24c 3319 	movw	r3, #49945	; 0xc319
    f68c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f690:	2200      	movs	r2, #0
    f692:	701a      	strb	r2, [r3, #0]
    f694:	e008      	b.n	f6a8 <send_gps_pos+0x960>
    f696:	bf00      	nop
    f698:	2004c4a3 	.word	0x2004c4a3
    f69c:	2004c499 	.word	0x2004c499
    f6a0:	2004c49a 	.word	0x2004c49a
    f6a4:	2004c49b 	.word	0x2004c49b
    f6a8:	f24c 3319 	movw	r3, #49945	; 0xc319
    f6ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6b0:	781b      	ldrb	r3, [r3, #0]
    f6b2:	461a      	mov	r2, r3
    f6b4:	f24c 438c 	movw	r3, #50316	; 0xc48c
    f6b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6bc:	7859      	ldrb	r1, [r3, #1]
    f6be:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f6c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6c6:	5499      	strb	r1, [r3, r2]
    f6c8:	4bd1      	ldr	r3, [pc, #836]	; (fa10 <send_gps_pos+0xcc8>)
    f6ca:	781a      	ldrb	r2, [r3, #0]
    f6cc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f6d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6d4:	781b      	ldrb	r3, [r3, #0]
    f6d6:	4413      	add	r3, r2
    f6d8:	b2da      	uxtb	r2, r3
    f6da:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f6de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6e2:	701a      	strb	r2, [r3, #0]
    f6e4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f6e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6ec:	781a      	ldrb	r2, [r3, #0]
    f6ee:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f6f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6f6:	781b      	ldrb	r3, [r3, #0]
    f6f8:	4413      	add	r3, r2
    f6fa:	b2da      	uxtb	r2, r3
    f6fc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f704:	701a      	strb	r2, [r3, #0]
    f706:	f24c 3319 	movw	r3, #49945	; 0xc319
    f70a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f70e:	781b      	ldrb	r3, [r3, #0]
    f710:	3301      	adds	r3, #1
    f712:	b2da      	uxtb	r2, r3
    f714:	f24c 3319 	movw	r3, #49945	; 0xc319
    f718:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f71c:	701a      	strb	r2, [r3, #0]
    f71e:	f24c 3319 	movw	r3, #49945	; 0xc319
    f722:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f726:	781b      	ldrb	r3, [r3, #0]
    f728:	2bff      	cmp	r3, #255	; 0xff
    f72a:	d105      	bne.n	f738 <send_gps_pos+0x9f0>
    f72c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f730:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f734:	2200      	movs	r2, #0
    f736:	701a      	strb	r2, [r3, #0]
    f738:	f24c 3319 	movw	r3, #49945	; 0xc319
    f73c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f740:	781b      	ldrb	r3, [r3, #0]
    f742:	461a      	mov	r2, r3
    f744:	f24c 438c 	movw	r3, #50316	; 0xc48c
    f748:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f74c:	7899      	ldrb	r1, [r3, #2]
    f74e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f756:	5499      	strb	r1, [r3, r2]
    f758:	4bae      	ldr	r3, [pc, #696]	; (fa14 <send_gps_pos+0xccc>)
    f75a:	781a      	ldrb	r2, [r3, #0]
    f75c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f760:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f764:	781b      	ldrb	r3, [r3, #0]
    f766:	4413      	add	r3, r2
    f768:	b2da      	uxtb	r2, r3
    f76a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f76e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f772:	701a      	strb	r2, [r3, #0]
    f774:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f778:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f77c:	781a      	ldrb	r2, [r3, #0]
    f77e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f786:	781b      	ldrb	r3, [r3, #0]
    f788:	4413      	add	r3, r2
    f78a:	b2da      	uxtb	r2, r3
    f78c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f790:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f794:	701a      	strb	r2, [r3, #0]
    f796:	f24c 3319 	movw	r3, #49945	; 0xc319
    f79a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f79e:	781b      	ldrb	r3, [r3, #0]
    f7a0:	3301      	adds	r3, #1
    f7a2:	b2da      	uxtb	r2, r3
    f7a4:	f24c 3319 	movw	r3, #49945	; 0xc319
    f7a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7ac:	701a      	strb	r2, [r3, #0]
    f7ae:	f24c 3319 	movw	r3, #49945	; 0xc319
    f7b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7b6:	781b      	ldrb	r3, [r3, #0]
    f7b8:	2bff      	cmp	r3, #255	; 0xff
    f7ba:	d105      	bne.n	f7c8 <send_gps_pos+0xa80>
    f7bc:	f24c 3319 	movw	r3, #49945	; 0xc319
    f7c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7c4:	2200      	movs	r2, #0
    f7c6:	701a      	strb	r2, [r3, #0]
    f7c8:	f24c 3319 	movw	r3, #49945	; 0xc319
    f7cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7d0:	781b      	ldrb	r3, [r3, #0]
    f7d2:	461a      	mov	r2, r3
    f7d4:	f24c 438c 	movw	r3, #50316	; 0xc48c
    f7d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7dc:	78d9      	ldrb	r1, [r3, #3]
    f7de:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f7e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7e6:	5499      	strb	r1, [r3, r2]
    f7e8:	4b8b      	ldr	r3, [pc, #556]	; (fa18 <send_gps_pos+0xcd0>)
    f7ea:	781a      	ldrb	r2, [r3, #0]
    f7ec:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f7f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7f4:	781b      	ldrb	r3, [r3, #0]
    f7f6:	4413      	add	r3, r2
    f7f8:	b2da      	uxtb	r2, r3
    f7fa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f7fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f802:	701a      	strb	r2, [r3, #0]
    f804:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f80c:	781a      	ldrb	r2, [r3, #0]
    f80e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f816:	781b      	ldrb	r3, [r3, #0]
    f818:	4413      	add	r3, r2
    f81a:	b2da      	uxtb	r2, r3
    f81c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f820:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f824:	701a      	strb	r2, [r3, #0]
    f826:	f24c 3319 	movw	r3, #49945	; 0xc319
    f82a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f82e:	781b      	ldrb	r3, [r3, #0]
    f830:	3301      	adds	r3, #1
    f832:	b2da      	uxtb	r2, r3
    f834:	f24c 3319 	movw	r3, #49945	; 0xc319
    f838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f83c:	701a      	strb	r2, [r3, #0]
    f83e:	f24c 3319 	movw	r3, #49945	; 0xc319
    f842:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f846:	781b      	ldrb	r3, [r3, #0]
    f848:	2bff      	cmp	r3, #255	; 0xff
    f84a:	d105      	bne.n	f858 <send_gps_pos+0xb10>
    f84c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f850:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f854:	2200      	movs	r2, #0
    f856:	701a      	strb	r2, [r3, #0]
    f858:	f24c 3319 	movw	r3, #49945	; 0xc319
    f85c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f860:	781b      	ldrb	r3, [r3, #0]
    f862:	461a      	mov	r2, r3
    f864:	f24c 4390 	movw	r3, #50320	; 0xc490
    f868:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f86c:	7819      	ldrb	r1, [r3, #0]
    f86e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f876:	5499      	strb	r1, [r3, r2]
    f878:	f24c 4390 	movw	r3, #50320	; 0xc490
    f87c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f880:	781a      	ldrb	r2, [r3, #0]
    f882:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f886:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f88a:	781b      	ldrb	r3, [r3, #0]
    f88c:	4413      	add	r3, r2
    f88e:	b2da      	uxtb	r2, r3
    f890:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f894:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f898:	701a      	strb	r2, [r3, #0]
    f89a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f89e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8a2:	781a      	ldrb	r2, [r3, #0]
    f8a4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f8a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8ac:	781b      	ldrb	r3, [r3, #0]
    f8ae:	4413      	add	r3, r2
    f8b0:	b2da      	uxtb	r2, r3
    f8b2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f8b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8ba:	701a      	strb	r2, [r3, #0]
    f8bc:	f24c 3319 	movw	r3, #49945	; 0xc319
    f8c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8c4:	781b      	ldrb	r3, [r3, #0]
    f8c6:	3301      	adds	r3, #1
    f8c8:	b2da      	uxtb	r2, r3
    f8ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    f8ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8d2:	701a      	strb	r2, [r3, #0]
    f8d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    f8d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8dc:	781b      	ldrb	r3, [r3, #0]
    f8de:	2bff      	cmp	r3, #255	; 0xff
    f8e0:	d105      	bne.n	f8ee <send_gps_pos+0xba6>
    f8e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    f8e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8ea:	2200      	movs	r2, #0
    f8ec:	701a      	strb	r2, [r3, #0]
    f8ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    f8f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8f6:	781b      	ldrb	r3, [r3, #0]
    f8f8:	461a      	mov	r2, r3
    f8fa:	f24c 4390 	movw	r3, #50320	; 0xc490
    f8fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f902:	7859      	ldrb	r1, [r3, #1]
    f904:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f90c:	5499      	strb	r1, [r3, r2]
    f90e:	4b43      	ldr	r3, [pc, #268]	; (fa1c <send_gps_pos+0xcd4>)
    f910:	781a      	ldrb	r2, [r3, #0]
    f912:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f916:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f91a:	781b      	ldrb	r3, [r3, #0]
    f91c:	4413      	add	r3, r2
    f91e:	b2da      	uxtb	r2, r3
    f920:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f924:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f928:	701a      	strb	r2, [r3, #0]
    f92a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f92e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f932:	781a      	ldrb	r2, [r3, #0]
    f934:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f93c:	781b      	ldrb	r3, [r3, #0]
    f93e:	4413      	add	r3, r2
    f940:	b2da      	uxtb	r2, r3
    f942:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f946:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f94a:	701a      	strb	r2, [r3, #0]
    f94c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f950:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f954:	781b      	ldrb	r3, [r3, #0]
    f956:	3301      	adds	r3, #1
    f958:	b2da      	uxtb	r2, r3
    f95a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f95e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f962:	701a      	strb	r2, [r3, #0]
    f964:	f24c 3319 	movw	r3, #49945	; 0xc319
    f968:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f96c:	781b      	ldrb	r3, [r3, #0]
    f96e:	2bff      	cmp	r3, #255	; 0xff
    f970:	d105      	bne.n	f97e <send_gps_pos+0xc36>
    f972:	f24c 3319 	movw	r3, #49945	; 0xc319
    f976:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f97a:	2200      	movs	r2, #0
    f97c:	701a      	strb	r2, [r3, #0]
    f97e:	f24c 3319 	movw	r3, #49945	; 0xc319
    f982:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f986:	781b      	ldrb	r3, [r3, #0]
    f988:	461a      	mov	r2, r3
    f98a:	f24c 4390 	movw	r3, #50320	; 0xc490
    f98e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f992:	7899      	ldrb	r1, [r3, #2]
    f994:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f998:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f99c:	5499      	strb	r1, [r3, r2]
    f99e:	4b20      	ldr	r3, [pc, #128]	; (fa20 <send_gps_pos+0xcd8>)
    f9a0:	781a      	ldrb	r2, [r3, #0]
    f9a2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f9a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9aa:	781b      	ldrb	r3, [r3, #0]
    f9ac:	4413      	add	r3, r2
    f9ae:	b2da      	uxtb	r2, r3
    f9b0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f9b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9b8:	701a      	strb	r2, [r3, #0]
    f9ba:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f9be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9c2:	781a      	ldrb	r2, [r3, #0]
    f9c4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f9c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9cc:	781b      	ldrb	r3, [r3, #0]
    f9ce:	4413      	add	r3, r2
    f9d0:	b2da      	uxtb	r2, r3
    f9d2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f9d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9da:	701a      	strb	r2, [r3, #0]
    f9dc:	f24c 3319 	movw	r3, #49945	; 0xc319
    f9e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9e4:	781b      	ldrb	r3, [r3, #0]
    f9e6:	3301      	adds	r3, #1
    f9e8:	b2da      	uxtb	r2, r3
    f9ea:	f24c 3319 	movw	r3, #49945	; 0xc319
    f9ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9f2:	701a      	strb	r2, [r3, #0]
    f9f4:	f24c 3319 	movw	r3, #49945	; 0xc319
    f9f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9fc:	781b      	ldrb	r3, [r3, #0]
    f9fe:	2bff      	cmp	r3, #255	; 0xff
    fa00:	d110      	bne.n	fa24 <send_gps_pos+0xcdc>
    fa02:	f24c 3319 	movw	r3, #49945	; 0xc319
    fa06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa0a:	2200      	movs	r2, #0
    fa0c:	701a      	strb	r2, [r3, #0]
    fa0e:	e009      	b.n	fa24 <send_gps_pos+0xcdc>
    fa10:	2004c48d 	.word	0x2004c48d
    fa14:	2004c48e 	.word	0x2004c48e
    fa18:	2004c48f 	.word	0x2004c48f
    fa1c:	2004c491 	.word	0x2004c491
    fa20:	2004c492 	.word	0x2004c492
    fa24:	f24c 3319 	movw	r3, #49945	; 0xc319
    fa28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa2c:	781b      	ldrb	r3, [r3, #0]
    fa2e:	461a      	mov	r2, r3
    fa30:	f24c 4390 	movw	r3, #50320	; 0xc490
    fa34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa38:	78d9      	ldrb	r1, [r3, #3]
    fa3a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fa3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa42:	5499      	strb	r1, [r3, r2]
    fa44:	4bd3      	ldr	r3, [pc, #844]	; (fd94 <send_gps_pos+0x104c>)
    fa46:	781a      	ldrb	r2, [r3, #0]
    fa48:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fa4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa50:	781b      	ldrb	r3, [r3, #0]
    fa52:	4413      	add	r3, r2
    fa54:	b2da      	uxtb	r2, r3
    fa56:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fa5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa5e:	701a      	strb	r2, [r3, #0]
    fa60:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fa64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa68:	781a      	ldrb	r2, [r3, #0]
    fa6a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fa6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa72:	781b      	ldrb	r3, [r3, #0]
    fa74:	4413      	add	r3, r2
    fa76:	b2da      	uxtb	r2, r3
    fa78:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fa7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa80:	701a      	strb	r2, [r3, #0]
    fa82:	f24c 3319 	movw	r3, #49945	; 0xc319
    fa86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa8a:	781b      	ldrb	r3, [r3, #0]
    fa8c:	3301      	adds	r3, #1
    fa8e:	b2da      	uxtb	r2, r3
    fa90:	f24c 3319 	movw	r3, #49945	; 0xc319
    fa94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa98:	701a      	strb	r2, [r3, #0]
    fa9a:	f24c 3319 	movw	r3, #49945	; 0xc319
    fa9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faa2:	781b      	ldrb	r3, [r3, #0]
    faa4:	2bff      	cmp	r3, #255	; 0xff
    faa6:	d105      	bne.n	fab4 <send_gps_pos+0xd6c>
    faa8:	f24c 3319 	movw	r3, #49945	; 0xc319
    faac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fab0:	2200      	movs	r2, #0
    fab2:	701a      	strb	r2, [r3, #0]
    fab4:	f24c 3319 	movw	r3, #49945	; 0xc319
    fab8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fabc:	781b      	ldrb	r3, [r3, #0]
    fabe:	461a      	mov	r2, r3
    fac0:	f24c 4394 	movw	r3, #50324	; 0xc494
    fac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fac8:	7819      	ldrb	r1, [r3, #0]
    faca:	f24c 331c 	movw	r3, #49948	; 0xc31c
    face:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fad2:	5499      	strb	r1, [r3, r2]
    fad4:	f24c 4394 	movw	r3, #50324	; 0xc494
    fad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fadc:	781a      	ldrb	r2, [r3, #0]
    fade:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fae6:	781b      	ldrb	r3, [r3, #0]
    fae8:	4413      	add	r3, r2
    faea:	b2da      	uxtb	r2, r3
    faec:	f24c 431d 	movw	r3, #50205	; 0xc41d
    faf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faf4:	701a      	strb	r2, [r3, #0]
    faf6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fafa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fafe:	781a      	ldrb	r2, [r3, #0]
    fb00:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fb04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb08:	781b      	ldrb	r3, [r3, #0]
    fb0a:	4413      	add	r3, r2
    fb0c:	b2da      	uxtb	r2, r3
    fb0e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fb12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb16:	701a      	strb	r2, [r3, #0]
    fb18:	f24c 3319 	movw	r3, #49945	; 0xc319
    fb1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb20:	781b      	ldrb	r3, [r3, #0]
    fb22:	3301      	adds	r3, #1
    fb24:	b2da      	uxtb	r2, r3
    fb26:	f24c 3319 	movw	r3, #49945	; 0xc319
    fb2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb2e:	701a      	strb	r2, [r3, #0]
    fb30:	f24c 3319 	movw	r3, #49945	; 0xc319
    fb34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb38:	781b      	ldrb	r3, [r3, #0]
    fb3a:	2bff      	cmp	r3, #255	; 0xff
    fb3c:	d105      	bne.n	fb4a <send_gps_pos+0xe02>
    fb3e:	f24c 3319 	movw	r3, #49945	; 0xc319
    fb42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb46:	2200      	movs	r2, #0
    fb48:	701a      	strb	r2, [r3, #0]
    fb4a:	f24c 3319 	movw	r3, #49945	; 0xc319
    fb4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb52:	781b      	ldrb	r3, [r3, #0]
    fb54:	461a      	mov	r2, r3
    fb56:	f24c 4394 	movw	r3, #50324	; 0xc494
    fb5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb5e:	7859      	ldrb	r1, [r3, #1]
    fb60:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fb64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb68:	5499      	strb	r1, [r3, r2]
    fb6a:	4b8b      	ldr	r3, [pc, #556]	; (fd98 <send_gps_pos+0x1050>)
    fb6c:	781a      	ldrb	r2, [r3, #0]
    fb6e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fb72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb76:	781b      	ldrb	r3, [r3, #0]
    fb78:	4413      	add	r3, r2
    fb7a:	b2da      	uxtb	r2, r3
    fb7c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fb80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb84:	701a      	strb	r2, [r3, #0]
    fb86:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fb8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb8e:	781a      	ldrb	r2, [r3, #0]
    fb90:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fb94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb98:	781b      	ldrb	r3, [r3, #0]
    fb9a:	4413      	add	r3, r2
    fb9c:	b2da      	uxtb	r2, r3
    fb9e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fba6:	701a      	strb	r2, [r3, #0]
    fba8:	f24c 3319 	movw	r3, #49945	; 0xc319
    fbac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbb0:	781b      	ldrb	r3, [r3, #0]
    fbb2:	3301      	adds	r3, #1
    fbb4:	b2da      	uxtb	r2, r3
    fbb6:	f24c 3319 	movw	r3, #49945	; 0xc319
    fbba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbbe:	701a      	strb	r2, [r3, #0]
    fbc0:	f24c 3319 	movw	r3, #49945	; 0xc319
    fbc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbc8:	781b      	ldrb	r3, [r3, #0]
    fbca:	2bff      	cmp	r3, #255	; 0xff
    fbcc:	d105      	bne.n	fbda <send_gps_pos+0xe92>
    fbce:	f24c 3319 	movw	r3, #49945	; 0xc319
    fbd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbd6:	2200      	movs	r2, #0
    fbd8:	701a      	strb	r2, [r3, #0]
    fbda:	f24c 3319 	movw	r3, #49945	; 0xc319
    fbde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbe2:	781b      	ldrb	r3, [r3, #0]
    fbe4:	461a      	mov	r2, r3
    fbe6:	f24c 4394 	movw	r3, #50324	; 0xc494
    fbea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbee:	7899      	ldrb	r1, [r3, #2]
    fbf0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fbf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbf8:	5499      	strb	r1, [r3, r2]
    fbfa:	4b68      	ldr	r3, [pc, #416]	; (fd9c <send_gps_pos+0x1054>)
    fbfc:	781a      	ldrb	r2, [r3, #0]
    fbfe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fc02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc06:	781b      	ldrb	r3, [r3, #0]
    fc08:	4413      	add	r3, r2
    fc0a:	b2da      	uxtb	r2, r3
    fc0c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fc10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc14:	701a      	strb	r2, [r3, #0]
    fc16:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fc1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc1e:	781a      	ldrb	r2, [r3, #0]
    fc20:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fc24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc28:	781b      	ldrb	r3, [r3, #0]
    fc2a:	4413      	add	r3, r2
    fc2c:	b2da      	uxtb	r2, r3
    fc2e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fc32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc36:	701a      	strb	r2, [r3, #0]
    fc38:	f24c 3319 	movw	r3, #49945	; 0xc319
    fc3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc40:	781b      	ldrb	r3, [r3, #0]
    fc42:	3301      	adds	r3, #1
    fc44:	b2da      	uxtb	r2, r3
    fc46:	f24c 3319 	movw	r3, #49945	; 0xc319
    fc4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc4e:	701a      	strb	r2, [r3, #0]
    fc50:	f24c 3319 	movw	r3, #49945	; 0xc319
    fc54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc58:	781b      	ldrb	r3, [r3, #0]
    fc5a:	2bff      	cmp	r3, #255	; 0xff
    fc5c:	d105      	bne.n	fc6a <send_gps_pos+0xf22>
    fc5e:	f24c 3319 	movw	r3, #49945	; 0xc319
    fc62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc66:	2200      	movs	r2, #0
    fc68:	701a      	strb	r2, [r3, #0]
    fc6a:	f24c 3319 	movw	r3, #49945	; 0xc319
    fc6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc72:	781b      	ldrb	r3, [r3, #0]
    fc74:	461a      	mov	r2, r3
    fc76:	f24c 4394 	movw	r3, #50324	; 0xc494
    fc7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc7e:	78d9      	ldrb	r1, [r3, #3]
    fc80:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fc84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc88:	5499      	strb	r1, [r3, r2]
    fc8a:	4b45      	ldr	r3, [pc, #276]	; (fda0 <send_gps_pos+0x1058>)
    fc8c:	781a      	ldrb	r2, [r3, #0]
    fc8e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fc92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc96:	781b      	ldrb	r3, [r3, #0]
    fc98:	4413      	add	r3, r2
    fc9a:	b2da      	uxtb	r2, r3
    fc9c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fca4:	701a      	strb	r2, [r3, #0]
    fca6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fcaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcae:	781a      	ldrb	r2, [r3, #0]
    fcb0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fcb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcb8:	781b      	ldrb	r3, [r3, #0]
    fcba:	4413      	add	r3, r2
    fcbc:	b2da      	uxtb	r2, r3
    fcbe:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fcc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcc6:	701a      	strb	r2, [r3, #0]
    fcc8:	f24c 3319 	movw	r3, #49945	; 0xc319
    fccc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcd0:	781b      	ldrb	r3, [r3, #0]
    fcd2:	3301      	adds	r3, #1
    fcd4:	b2da      	uxtb	r2, r3
    fcd6:	f24c 3319 	movw	r3, #49945	; 0xc319
    fcda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcde:	701a      	strb	r2, [r3, #0]
    fce0:	f24c 3319 	movw	r3, #49945	; 0xc319
    fce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fce8:	781b      	ldrb	r3, [r3, #0]
    fcea:	2bff      	cmp	r3, #255	; 0xff
    fcec:	d105      	bne.n	fcfa <send_gps_pos+0xfb2>
    fcee:	f24c 3319 	movw	r3, #49945	; 0xc319
    fcf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcf6:	2200      	movs	r2, #0
    fcf8:	701a      	strb	r2, [r3, #0]
    fcfa:	f24c 3319 	movw	r3, #49945	; 0xc319
    fcfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd02:	781b      	ldrb	r3, [r3, #0]
    fd04:	461a      	mov	r2, r3
    fd06:	f24c 4388 	movw	r3, #50312	; 0xc488
    fd0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd0e:	7819      	ldrb	r1, [r3, #0]
    fd10:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fd14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd18:	5499      	strb	r1, [r3, r2]
    fd1a:	f24c 4388 	movw	r3, #50312	; 0xc488
    fd1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd22:	781a      	ldrb	r2, [r3, #0]
    fd24:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fd28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd2c:	781b      	ldrb	r3, [r3, #0]
    fd2e:	4413      	add	r3, r2
    fd30:	b2da      	uxtb	r2, r3
    fd32:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fd36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd3a:	701a      	strb	r2, [r3, #0]
    fd3c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fd40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd44:	781a      	ldrb	r2, [r3, #0]
    fd46:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fd4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd4e:	781b      	ldrb	r3, [r3, #0]
    fd50:	4413      	add	r3, r2
    fd52:	b2da      	uxtb	r2, r3
    fd54:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fd58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd5c:	701a      	strb	r2, [r3, #0]
    fd5e:	f24c 3319 	movw	r3, #49945	; 0xc319
    fd62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd66:	781b      	ldrb	r3, [r3, #0]
    fd68:	3301      	adds	r3, #1
    fd6a:	b2da      	uxtb	r2, r3
    fd6c:	f24c 3319 	movw	r3, #49945	; 0xc319
    fd70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd74:	701a      	strb	r2, [r3, #0]
    fd76:	f24c 3319 	movw	r3, #49945	; 0xc319
    fd7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd7e:	781b      	ldrb	r3, [r3, #0]
    fd80:	2bff      	cmp	r3, #255	; 0xff
    fd82:	d10f      	bne.n	fda4 <send_gps_pos+0x105c>
    fd84:	f24c 3319 	movw	r3, #49945	; 0xc319
    fd88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd8c:	2200      	movs	r2, #0
    fd8e:	701a      	strb	r2, [r3, #0]
    fd90:	e008      	b.n	fda4 <send_gps_pos+0x105c>
    fd92:	bf00      	nop
    fd94:	2004c493 	.word	0x2004c493
    fd98:	2004c495 	.word	0x2004c495
    fd9c:	2004c496 	.word	0x2004c496
    fda0:	2004c497 	.word	0x2004c497
    fda4:	f24c 3319 	movw	r3, #49945	; 0xc319
    fda8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdac:	781b      	ldrb	r3, [r3, #0]
    fdae:	461a      	mov	r2, r3
    fdb0:	f24c 4388 	movw	r3, #50312	; 0xc488
    fdb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdb8:	7859      	ldrb	r1, [r3, #1]
    fdba:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fdbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdc2:	5499      	strb	r1, [r3, r2]
    fdc4:	4bc0      	ldr	r3, [pc, #768]	; (100c8 <send_gps_pos+0x1380>)
    fdc6:	781a      	ldrb	r2, [r3, #0]
    fdc8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fdcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdd0:	781b      	ldrb	r3, [r3, #0]
    fdd2:	4413      	add	r3, r2
    fdd4:	b2da      	uxtb	r2, r3
    fdd6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fdda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdde:	701a      	strb	r2, [r3, #0]
    fde0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fde4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fde8:	781a      	ldrb	r2, [r3, #0]
    fdea:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fdee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdf2:	781b      	ldrb	r3, [r3, #0]
    fdf4:	4413      	add	r3, r2
    fdf6:	b2da      	uxtb	r2, r3
    fdf8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fdfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe00:	701a      	strb	r2, [r3, #0]
    fe02:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe0a:	781b      	ldrb	r3, [r3, #0]
    fe0c:	3301      	adds	r3, #1
    fe0e:	b2da      	uxtb	r2, r3
    fe10:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe18:	701a      	strb	r2, [r3, #0]
    fe1a:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe22:	781b      	ldrb	r3, [r3, #0]
    fe24:	2bff      	cmp	r3, #255	; 0xff
    fe26:	d105      	bne.n	fe34 <send_gps_pos+0x10ec>
    fe28:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe30:	2200      	movs	r2, #0
    fe32:	701a      	strb	r2, [r3, #0]
    fe34:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe3c:	781b      	ldrb	r3, [r3, #0]
    fe3e:	461a      	mov	r2, r3
    fe40:	f24c 4388 	movw	r3, #50312	; 0xc488
    fe44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe48:	7899      	ldrb	r1, [r3, #2]
    fe4a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fe4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe52:	5499      	strb	r1, [r3, r2]
    fe54:	4b9d      	ldr	r3, [pc, #628]	; (100cc <send_gps_pos+0x1384>)
    fe56:	781a      	ldrb	r2, [r3, #0]
    fe58:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fe5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe60:	781b      	ldrb	r3, [r3, #0]
    fe62:	4413      	add	r3, r2
    fe64:	b2da      	uxtb	r2, r3
    fe66:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fe6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe6e:	701a      	strb	r2, [r3, #0]
    fe70:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fe74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe78:	781a      	ldrb	r2, [r3, #0]
    fe7a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fe7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe82:	781b      	ldrb	r3, [r3, #0]
    fe84:	4413      	add	r3, r2
    fe86:	b2da      	uxtb	r2, r3
    fe88:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fe8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe90:	701a      	strb	r2, [r3, #0]
    fe92:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe9a:	781b      	ldrb	r3, [r3, #0]
    fe9c:	3301      	adds	r3, #1
    fe9e:	b2da      	uxtb	r2, r3
    fea0:	f24c 3319 	movw	r3, #49945	; 0xc319
    fea4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fea8:	701a      	strb	r2, [r3, #0]
    feaa:	f24c 3319 	movw	r3, #49945	; 0xc319
    feae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feb2:	781b      	ldrb	r3, [r3, #0]
    feb4:	2bff      	cmp	r3, #255	; 0xff
    feb6:	d105      	bne.n	fec4 <send_gps_pos+0x117c>
    feb8:	f24c 3319 	movw	r3, #49945	; 0xc319
    febc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fec0:	2200      	movs	r2, #0
    fec2:	701a      	strb	r2, [r3, #0]
    fec4:	f24c 3319 	movw	r3, #49945	; 0xc319
    fec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fecc:	781b      	ldrb	r3, [r3, #0]
    fece:	461a      	mov	r2, r3
    fed0:	f24c 4388 	movw	r3, #50312	; 0xc488
    fed4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fed8:	78d9      	ldrb	r1, [r3, #3]
    feda:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fede:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fee2:	5499      	strb	r1, [r3, r2]
    fee4:	4b7a      	ldr	r3, [pc, #488]	; (100d0 <send_gps_pos+0x1388>)
    fee6:	781a      	ldrb	r2, [r3, #0]
    fee8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    feec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fef0:	781b      	ldrb	r3, [r3, #0]
    fef2:	4413      	add	r3, r2
    fef4:	b2da      	uxtb	r2, r3
    fef6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fefa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fefe:	701a      	strb	r2, [r3, #0]
    ff00:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ff04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff08:	781a      	ldrb	r2, [r3, #0]
    ff0a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ff0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff12:	781b      	ldrb	r3, [r3, #0]
    ff14:	4413      	add	r3, r2
    ff16:	b2da      	uxtb	r2, r3
    ff18:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ff1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff20:	701a      	strb	r2, [r3, #0]
    ff22:	f24c 3319 	movw	r3, #49945	; 0xc319
    ff26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff2a:	781b      	ldrb	r3, [r3, #0]
    ff2c:	3301      	adds	r3, #1
    ff2e:	b2da      	uxtb	r2, r3
    ff30:	f24c 3319 	movw	r3, #49945	; 0xc319
    ff34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff38:	701a      	strb	r2, [r3, #0]
    ff3a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ff3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff42:	781b      	ldrb	r3, [r3, #0]
    ff44:	2bff      	cmp	r3, #255	; 0xff
    ff46:	d105      	bne.n	ff54 <send_gps_pos+0x120c>
    ff48:	f24c 3319 	movw	r3, #49945	; 0xc319
    ff4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff50:	2200      	movs	r2, #0
    ff52:	701a      	strb	r2, [r3, #0]
    ff54:	f24c 3319 	movw	r3, #49945	; 0xc319
    ff58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff5c:	781b      	ldrb	r3, [r3, #0]
    ff5e:	461a      	mov	r2, r3
    ff60:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ff64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff68:	7819      	ldrb	r1, [r3, #0]
    ff6a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ff6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff72:	5499      	strb	r1, [r3, r2]
    ff74:	f24c 3319 	movw	r3, #49945	; 0xc319
    ff78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff7c:	781b      	ldrb	r3, [r3, #0]
    ff7e:	3301      	adds	r3, #1
    ff80:	b2da      	uxtb	r2, r3
    ff82:	f24c 3319 	movw	r3, #49945	; 0xc319
    ff86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff8a:	701a      	strb	r2, [r3, #0]
    ff8c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ff90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff94:	781b      	ldrb	r3, [r3, #0]
    ff96:	2bff      	cmp	r3, #255	; 0xff
    ff98:	d105      	bne.n	ffa6 <send_gps_pos+0x125e>
    ff9a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ff9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffa2:	2200      	movs	r2, #0
    ffa4:	701a      	strb	r2, [r3, #0]
    ffa6:	f24c 3319 	movw	r3, #49945	; 0xc319
    ffaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffae:	781b      	ldrb	r3, [r3, #0]
    ffb0:	461a      	mov	r2, r3
    ffb2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ffb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffba:	7819      	ldrb	r1, [r3, #0]
    ffbc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ffc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffc4:	5499      	strb	r1, [r3, r2]
    ffc6:	f24c 3319 	movw	r3, #49945	; 0xc319
    ffca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffce:	781b      	ldrb	r3, [r3, #0]
    ffd0:	3301      	adds	r3, #1
    ffd2:	b2da      	uxtb	r2, r3
    ffd4:	f24c 3319 	movw	r3, #49945	; 0xc319
    ffd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffdc:	701a      	strb	r2, [r3, #0]
    ffde:	f24c 3319 	movw	r3, #49945	; 0xc319
    ffe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffe6:	781b      	ldrb	r3, [r3, #0]
    ffe8:	2bff      	cmp	r3, #255	; 0xff
    ffea:	d105      	bne.n	fff8 <send_gps_pos+0x12b0>
    ffec:	f24c 3319 	movw	r3, #49945	; 0xc319
    fff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fff4:	2200      	movs	r2, #0
    fff6:	701a      	strb	r2, [r3, #0]
    fff8:	f242 0339 	movw	r3, #8249	; 0x2039
    fffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10000:	781b      	ldrb	r3, [r3, #0]
   10002:	b2db      	uxtb	r3, r3
   10004:	f003 0310 	and.w	r3, r3, #16
   10008:	2b00      	cmp	r3, #0
   1000a:	d15a      	bne.n	100c2 <send_gps_pos+0x137a>
   1000c:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10010:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10014:	781b      	ldrb	r3, [r3, #0]
   10016:	b2db      	uxtb	r3, r3
   10018:	461a      	mov	r2, r3
   1001a:	f24c 331c 	movw	r3, #49948	; 0xc31c
   1001e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10022:	5c9a      	ldrb	r2, [r3, r2]
   10024:	f24c 431b 	movw	r3, #50203	; 0xc41b
   10028:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1002c:	701a      	strb	r2, [r3, #0]
   1002e:	f24c 431c 	movw	r3, #50204	; 0xc41c
   10032:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10036:	2200      	movs	r2, #0
   10038:	701a      	strb	r2, [r3, #0]
   1003a:	f24c 331a 	movw	r3, #49946	; 0xc31a
   1003e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10042:	781b      	ldrb	r3, [r3, #0]
   10044:	b2db      	uxtb	r3, r3
   10046:	3301      	adds	r3, #1
   10048:	b2da      	uxtb	r2, r3
   1004a:	f24c 331a 	movw	r3, #49946	; 0xc31a
   1004e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10052:	701a      	strb	r2, [r3, #0]
   10054:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10058:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1005c:	781b      	ldrb	r3, [r3, #0]
   1005e:	b2db      	uxtb	r3, r3
   10060:	2bff      	cmp	r3, #255	; 0xff
   10062:	d105      	bne.n	10070 <send_gps_pos+0x1328>
   10064:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10068:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1006c:	2200      	movs	r2, #0
   1006e:	701a      	strb	r2, [r3, #0]
   10070:	f242 0338 	movw	r3, #8248	; 0x2038
   10074:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10078:	f242 0238 	movw	r2, #8248	; 0x2038
   1007c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10080:	7812      	ldrb	r2, [r2, #0]
   10082:	b2d2      	uxtb	r2, r2
   10084:	f042 0201 	orr.w	r2, r2, #1
   10088:	b2d2      	uxtb	r2, r2
   1008a:	701a      	strb	r2, [r3, #0]
   1008c:	f242 0339 	movw	r3, #8249	; 0x2039
   10090:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10094:	f242 0239 	movw	r2, #8249	; 0x2039
   10098:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1009c:	7812      	ldrb	r2, [r2, #0]
   1009e:	b2d2      	uxtb	r2, r2
   100a0:	f042 0210 	orr.w	r2, r2, #16
   100a4:	b2d2      	uxtb	r2, r2
   100a6:	701a      	strb	r2, [r3, #0]
   100a8:	e00b      	b.n	100c2 <send_gps_pos+0x137a>
   100aa:	f24c 3318 	movw	r3, #49944	; 0xc318
   100ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100b2:	781b      	ldrb	r3, [r3, #0]
   100b4:	3301      	adds	r3, #1
   100b6:	b2da      	uxtb	r2, r3
   100b8:	f24c 3318 	movw	r3, #49944	; 0xc318
   100bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100c0:	701a      	strb	r2, [r3, #0]
     estimator_update_state_gps();
   100c2:	f005 fbfd 	bl	158c0 <estimator_update_state_gps>
  }
}
   100c6:	bd80      	pop	{r7, pc}
   100c8:	2004c489 	.word	0x2004c489
   100cc:	2004c48a 	.word	0x2004c48a
   100d0:	2004c48b 	.word	0x2004c48b

000100d4 <send_radIR>:

void send_radIR(void){
   100d4:	b480      	push	{r7}
   100d6:	af00      	add	r7, sp, #0
  if (gps_pos_available)
   100d8:	f24c 43ae 	movw	r3, #50350	; 0xc4ae
   100dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100e0:	781b      	ldrb	r3, [r3, #0]
   100e2:	2b00      	cmp	r3, #0
   100e4:	f000 85e8 	beq.w	10cb8 <send_radIR+0xbe4>
     DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
   100e8:	f24c 3319 	movw	r3, #49945	; 0xc319
   100ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100f0:	781a      	ldrb	r2, [r3, #0]
   100f2:	f24c 331a 	movw	r3, #49946	; 0xc31a
   100f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100fa:	781b      	ldrb	r3, [r3, #0]
   100fc:	b2db      	uxtb	r3, r3
   100fe:	429a      	cmp	r2, r3
   10100:	d313      	bcc.n	1012a <send_radIR+0x56>
   10102:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10106:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1010a:	781b      	ldrb	r3, [r3, #0]
   1010c:	b2db      	uxtb	r3, r3
   1010e:	461a      	mov	r2, r3
   10110:	f24c 3319 	movw	r3, #49945	; 0xc319
   10114:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10118:	781b      	ldrb	r3, [r3, #0]
   1011a:	1ad3      	subs	r3, r2, r3
   1011c:	33ff      	adds	r3, #255	; 0xff
   1011e:	2b14      	cmp	r3, #20
   10120:	bfd4      	ite	le
   10122:	2300      	movle	r3, #0
   10124:	2301      	movgt	r3, #1
   10126:	b2db      	uxtb	r3, r3
   10128:	e011      	b.n	1014e <send_radIR+0x7a>
   1012a:	f24c 331a 	movw	r3, #49946	; 0xc31a
   1012e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10132:	781b      	ldrb	r3, [r3, #0]
   10134:	b2db      	uxtb	r3, r3
   10136:	461a      	mov	r2, r3
   10138:	f24c 3319 	movw	r3, #49945	; 0xc319
   1013c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10140:	781b      	ldrb	r3, [r3, #0]
   10142:	1ad3      	subs	r3, r2, r3
   10144:	2b14      	cmp	r3, #20
   10146:	bfd4      	ite	le
   10148:	2300      	movle	r3, #0
   1014a:	2301      	movgt	r3, #1
   1014c:	b2db      	uxtb	r3, r3
   1014e:	2b00      	cmp	r3, #0
   10150:	f000 85a6 	beq.w	10ca0 <send_radIR+0xbcc>
   10154:	f24c 3319 	movw	r3, #49945	; 0xc319
   10158:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1015c:	781b      	ldrb	r3, [r3, #0]
   1015e:	461a      	mov	r2, r3
   10160:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10164:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10168:	2105      	movs	r1, #5
   1016a:	5499      	strb	r1, [r3, r2]
   1016c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10170:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10174:	781b      	ldrb	r3, [r3, #0]
   10176:	3301      	adds	r3, #1
   10178:	b2da      	uxtb	r2, r3
   1017a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1017e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10182:	701a      	strb	r2, [r3, #0]
   10184:	f24c 3319 	movw	r3, #49945	; 0xc319
   10188:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1018c:	781b      	ldrb	r3, [r3, #0]
   1018e:	2bff      	cmp	r3, #255	; 0xff
   10190:	d105      	bne.n	1019e <send_radIR+0xca>
   10192:	f24c 3319 	movw	r3, #49945	; 0xc319
   10196:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1019a:	2200      	movs	r2, #0
   1019c:	701a      	strb	r2, [r3, #0]
   1019e:	f24c 3319 	movw	r3, #49945	; 0xc319
   101a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101a6:	781b      	ldrb	r3, [r3, #0]
   101a8:	461a      	mov	r2, r3
   101aa:	f24c 331c 	movw	r3, #49948	; 0xc31c
   101ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101b2:	2105      	movs	r1, #5
   101b4:	5499      	strb	r1, [r3, r2]
   101b6:	f24c 3319 	movw	r3, #49945	; 0xc319
   101ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101be:	781b      	ldrb	r3, [r3, #0]
   101c0:	3301      	adds	r3, #1
   101c2:	b2da      	uxtb	r2, r3
   101c4:	f24c 3319 	movw	r3, #49945	; 0xc319
   101c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101cc:	701a      	strb	r2, [r3, #0]
   101ce:	f24c 3319 	movw	r3, #49945	; 0xc319
   101d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101d6:	781b      	ldrb	r3, [r3, #0]
   101d8:	2bff      	cmp	r3, #255	; 0xff
   101da:	d105      	bne.n	101e8 <send_radIR+0x114>
   101dc:	f24c 3319 	movw	r3, #49945	; 0xc319
   101e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101e4:	2200      	movs	r2, #0
   101e6:	701a      	strb	r2, [r3, #0]
   101e8:	f24c 431d 	movw	r3, #50205	; 0xc41d
   101ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101f0:	2205      	movs	r2, #5
   101f2:	701a      	strb	r2, [r3, #0]
   101f4:	f24c 431e 	movw	r3, #50206	; 0xc41e
   101f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101fc:	2205      	movs	r2, #5
   101fe:	701a      	strb	r2, [r3, #0]
   10200:	f24c 3319 	movw	r3, #49945	; 0xc319
   10204:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10208:	781b      	ldrb	r3, [r3, #0]
   1020a:	461a      	mov	r2, r3
   1020c:	f64c 1310 	movw	r3, #51472	; 0xc910
   10210:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10214:	7819      	ldrb	r1, [r3, #0]
   10216:	f24c 331c 	movw	r3, #49948	; 0xc31c
   1021a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1021e:	5499      	strb	r1, [r3, r2]
   10220:	f64c 1310 	movw	r3, #51472	; 0xc910
   10224:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10228:	781a      	ldrb	r2, [r3, #0]
   1022a:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1022e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10232:	781b      	ldrb	r3, [r3, #0]
   10234:	4413      	add	r3, r2
   10236:	b2da      	uxtb	r2, r3
   10238:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1023c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10240:	701a      	strb	r2, [r3, #0]
   10242:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10246:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1024a:	781a      	ldrb	r2, [r3, #0]
   1024c:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10250:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10254:	781b      	ldrb	r3, [r3, #0]
   10256:	4413      	add	r3, r2
   10258:	b2da      	uxtb	r2, r3
   1025a:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1025e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10262:	701a      	strb	r2, [r3, #0]
   10264:	f24c 3319 	movw	r3, #49945	; 0xc319
   10268:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1026c:	781b      	ldrb	r3, [r3, #0]
   1026e:	3301      	adds	r3, #1
   10270:	b2da      	uxtb	r2, r3
   10272:	f24c 3319 	movw	r3, #49945	; 0xc319
   10276:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1027a:	701a      	strb	r2, [r3, #0]
   1027c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10280:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10284:	781b      	ldrb	r3, [r3, #0]
   10286:	2bff      	cmp	r3, #255	; 0xff
   10288:	d105      	bne.n	10296 <send_radIR+0x1c2>
   1028a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1028e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10292:	2200      	movs	r2, #0
   10294:	701a      	strb	r2, [r3, #0]
   10296:	f24c 3319 	movw	r3, #49945	; 0xc319
   1029a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1029e:	781b      	ldrb	r3, [r3, #0]
   102a0:	461a      	mov	r2, r3
   102a2:	f64c 1310 	movw	r3, #51472	; 0xc910
   102a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102aa:	7859      	ldrb	r1, [r3, #1]
   102ac:	f24c 331c 	movw	r3, #49948	; 0xc31c
   102b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102b4:	5499      	strb	r1, [r3, r2]
   102b6:	4bd2      	ldr	r3, [pc, #840]	; (10600 <send_radIR+0x52c>)
   102b8:	781a      	ldrb	r2, [r3, #0]
   102ba:	f24c 431d 	movw	r3, #50205	; 0xc41d
   102be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102c2:	781b      	ldrb	r3, [r3, #0]
   102c4:	4413      	add	r3, r2
   102c6:	b2da      	uxtb	r2, r3
   102c8:	f24c 431d 	movw	r3, #50205	; 0xc41d
   102cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102d0:	701a      	strb	r2, [r3, #0]
   102d2:	f24c 431e 	movw	r3, #50206	; 0xc41e
   102d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102da:	781a      	ldrb	r2, [r3, #0]
   102dc:	f24c 431d 	movw	r3, #50205	; 0xc41d
   102e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102e4:	781b      	ldrb	r3, [r3, #0]
   102e6:	4413      	add	r3, r2
   102e8:	b2da      	uxtb	r2, r3
   102ea:	f24c 431e 	movw	r3, #50206	; 0xc41e
   102ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102f2:	701a      	strb	r2, [r3, #0]
   102f4:	f24c 3319 	movw	r3, #49945	; 0xc319
   102f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102fc:	781b      	ldrb	r3, [r3, #0]
   102fe:	3301      	adds	r3, #1
   10300:	b2da      	uxtb	r2, r3
   10302:	f24c 3319 	movw	r3, #49945	; 0xc319
   10306:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1030a:	701a      	strb	r2, [r3, #0]
   1030c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10310:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10314:	781b      	ldrb	r3, [r3, #0]
   10316:	2bff      	cmp	r3, #255	; 0xff
   10318:	d105      	bne.n	10326 <send_radIR+0x252>
   1031a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1031e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10322:	2200      	movs	r2, #0
   10324:	701a      	strb	r2, [r3, #0]
   10326:	f24c 3319 	movw	r3, #49945	; 0xc319
   1032a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1032e:	781b      	ldrb	r3, [r3, #0]
   10330:	461a      	mov	r2, r3
   10332:	f64c 1310 	movw	r3, #51472	; 0xc910
   10336:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1033a:	7899      	ldrb	r1, [r3, #2]
   1033c:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10340:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10344:	5499      	strb	r1, [r3, r2]
   10346:	4baf      	ldr	r3, [pc, #700]	; (10604 <send_radIR+0x530>)
   10348:	781a      	ldrb	r2, [r3, #0]
   1034a:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1034e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10352:	781b      	ldrb	r3, [r3, #0]
   10354:	4413      	add	r3, r2
   10356:	b2da      	uxtb	r2, r3
   10358:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1035c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10360:	701a      	strb	r2, [r3, #0]
   10362:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10366:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1036a:	781a      	ldrb	r2, [r3, #0]
   1036c:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10370:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10374:	781b      	ldrb	r3, [r3, #0]
   10376:	4413      	add	r3, r2
   10378:	b2da      	uxtb	r2, r3
   1037a:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1037e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10382:	701a      	strb	r2, [r3, #0]
   10384:	f24c 3319 	movw	r3, #49945	; 0xc319
   10388:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1038c:	781b      	ldrb	r3, [r3, #0]
   1038e:	3301      	adds	r3, #1
   10390:	b2da      	uxtb	r2, r3
   10392:	f24c 3319 	movw	r3, #49945	; 0xc319
   10396:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1039a:	701a      	strb	r2, [r3, #0]
   1039c:	f24c 3319 	movw	r3, #49945	; 0xc319
   103a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103a4:	781b      	ldrb	r3, [r3, #0]
   103a6:	2bff      	cmp	r3, #255	; 0xff
   103a8:	d105      	bne.n	103b6 <send_radIR+0x2e2>
   103aa:	f24c 3319 	movw	r3, #49945	; 0xc319
   103ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103b2:	2200      	movs	r2, #0
   103b4:	701a      	strb	r2, [r3, #0]
   103b6:	f24c 3319 	movw	r3, #49945	; 0xc319
   103ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103be:	781b      	ldrb	r3, [r3, #0]
   103c0:	461a      	mov	r2, r3
   103c2:	f64c 1310 	movw	r3, #51472	; 0xc910
   103c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103ca:	78d9      	ldrb	r1, [r3, #3]
   103cc:	f24c 331c 	movw	r3, #49948	; 0xc31c
   103d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103d4:	5499      	strb	r1, [r3, r2]
   103d6:	4b8c      	ldr	r3, [pc, #560]	; (10608 <send_radIR+0x534>)
   103d8:	781a      	ldrb	r2, [r3, #0]
   103da:	f24c 431d 	movw	r3, #50205	; 0xc41d
   103de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103e2:	781b      	ldrb	r3, [r3, #0]
   103e4:	4413      	add	r3, r2
   103e6:	b2da      	uxtb	r2, r3
   103e8:	f24c 431d 	movw	r3, #50205	; 0xc41d
   103ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103f0:	701a      	strb	r2, [r3, #0]
   103f2:	f24c 431e 	movw	r3, #50206	; 0xc41e
   103f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103fa:	781a      	ldrb	r2, [r3, #0]
   103fc:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10400:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10404:	781b      	ldrb	r3, [r3, #0]
   10406:	4413      	add	r3, r2
   10408:	b2da      	uxtb	r2, r3
   1040a:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1040e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10412:	701a      	strb	r2, [r3, #0]
   10414:	f24c 3319 	movw	r3, #49945	; 0xc319
   10418:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1041c:	781b      	ldrb	r3, [r3, #0]
   1041e:	3301      	adds	r3, #1
   10420:	b2da      	uxtb	r2, r3
   10422:	f24c 3319 	movw	r3, #49945	; 0xc319
   10426:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1042a:	701a      	strb	r2, [r3, #0]
   1042c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10430:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10434:	781b      	ldrb	r3, [r3, #0]
   10436:	2bff      	cmp	r3, #255	; 0xff
   10438:	d105      	bne.n	10446 <send_radIR+0x372>
   1043a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1043e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10442:	2200      	movs	r2, #0
   10444:	701a      	strb	r2, [r3, #0]
   10446:	f24c 3319 	movw	r3, #49945	; 0xc319
   1044a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1044e:	781b      	ldrb	r3, [r3, #0]
   10450:	461a      	mov	r2, r3
   10452:	f64c 1314 	movw	r3, #51476	; 0xc914
   10456:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1045a:	7819      	ldrb	r1, [r3, #0]
   1045c:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10460:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10464:	5499      	strb	r1, [r3, r2]
   10466:	f64c 1314 	movw	r3, #51476	; 0xc914
   1046a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1046e:	781a      	ldrb	r2, [r3, #0]
   10470:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10474:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10478:	781b      	ldrb	r3, [r3, #0]
   1047a:	4413      	add	r3, r2
   1047c:	b2da      	uxtb	r2, r3
   1047e:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10482:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10486:	701a      	strb	r2, [r3, #0]
   10488:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1048c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10490:	781a      	ldrb	r2, [r3, #0]
   10492:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10496:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1049a:	781b      	ldrb	r3, [r3, #0]
   1049c:	4413      	add	r3, r2
   1049e:	b2da      	uxtb	r2, r3
   104a0:	f24c 431e 	movw	r3, #50206	; 0xc41e
   104a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104a8:	701a      	strb	r2, [r3, #0]
   104aa:	f24c 3319 	movw	r3, #49945	; 0xc319
   104ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104b2:	781b      	ldrb	r3, [r3, #0]
   104b4:	3301      	adds	r3, #1
   104b6:	b2da      	uxtb	r2, r3
   104b8:	f24c 3319 	movw	r3, #49945	; 0xc319
   104bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104c0:	701a      	strb	r2, [r3, #0]
   104c2:	f24c 3319 	movw	r3, #49945	; 0xc319
   104c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104ca:	781b      	ldrb	r3, [r3, #0]
   104cc:	2bff      	cmp	r3, #255	; 0xff
   104ce:	d105      	bne.n	104dc <send_radIR+0x408>
   104d0:	f24c 3319 	movw	r3, #49945	; 0xc319
   104d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104d8:	2200      	movs	r2, #0
   104da:	701a      	strb	r2, [r3, #0]
   104dc:	f24c 3319 	movw	r3, #49945	; 0xc319
   104e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104e4:	781b      	ldrb	r3, [r3, #0]
   104e6:	461a      	mov	r2, r3
   104e8:	f64c 1314 	movw	r3, #51476	; 0xc914
   104ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104f0:	7859      	ldrb	r1, [r3, #1]
   104f2:	f24c 331c 	movw	r3, #49948	; 0xc31c
   104f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104fa:	5499      	strb	r1, [r3, r2]
   104fc:	4b43      	ldr	r3, [pc, #268]	; (1060c <send_radIR+0x538>)
   104fe:	781a      	ldrb	r2, [r3, #0]
   10500:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10504:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10508:	781b      	ldrb	r3, [r3, #0]
   1050a:	4413      	add	r3, r2
   1050c:	b2da      	uxtb	r2, r3
   1050e:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10512:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10516:	701a      	strb	r2, [r3, #0]
   10518:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1051c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10520:	781a      	ldrb	r2, [r3, #0]
   10522:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10526:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1052a:	781b      	ldrb	r3, [r3, #0]
   1052c:	4413      	add	r3, r2
   1052e:	b2da      	uxtb	r2, r3
   10530:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10534:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10538:	701a      	strb	r2, [r3, #0]
   1053a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1053e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10542:	781b      	ldrb	r3, [r3, #0]
   10544:	3301      	adds	r3, #1
   10546:	b2da      	uxtb	r2, r3
   10548:	f24c 3319 	movw	r3, #49945	; 0xc319
   1054c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10550:	701a      	strb	r2, [r3, #0]
   10552:	f24c 3319 	movw	r3, #49945	; 0xc319
   10556:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1055a:	781b      	ldrb	r3, [r3, #0]
   1055c:	2bff      	cmp	r3, #255	; 0xff
   1055e:	d105      	bne.n	1056c <send_radIR+0x498>
   10560:	f24c 3319 	movw	r3, #49945	; 0xc319
   10564:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10568:	2200      	movs	r2, #0
   1056a:	701a      	strb	r2, [r3, #0]
   1056c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10570:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10574:	781b      	ldrb	r3, [r3, #0]
   10576:	461a      	mov	r2, r3
   10578:	f64c 1314 	movw	r3, #51476	; 0xc914
   1057c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10580:	7899      	ldrb	r1, [r3, #2]
   10582:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10586:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1058a:	5499      	strb	r1, [r3, r2]
   1058c:	4b20      	ldr	r3, [pc, #128]	; (10610 <send_radIR+0x53c>)
   1058e:	781a      	ldrb	r2, [r3, #0]
   10590:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10594:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10598:	781b      	ldrb	r3, [r3, #0]
   1059a:	4413      	add	r3, r2
   1059c:	b2da      	uxtb	r2, r3
   1059e:	f24c 431d 	movw	r3, #50205	; 0xc41d
   105a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105a6:	701a      	strb	r2, [r3, #0]
   105a8:	f24c 431e 	movw	r3, #50206	; 0xc41e
   105ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105b0:	781a      	ldrb	r2, [r3, #0]
   105b2:	f24c 431d 	movw	r3, #50205	; 0xc41d
   105b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105ba:	781b      	ldrb	r3, [r3, #0]
   105bc:	4413      	add	r3, r2
   105be:	b2da      	uxtb	r2, r3
   105c0:	f24c 431e 	movw	r3, #50206	; 0xc41e
   105c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105c8:	701a      	strb	r2, [r3, #0]
   105ca:	f24c 3319 	movw	r3, #49945	; 0xc319
   105ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105d2:	781b      	ldrb	r3, [r3, #0]
   105d4:	3301      	adds	r3, #1
   105d6:	b2da      	uxtb	r2, r3
   105d8:	f24c 3319 	movw	r3, #49945	; 0xc319
   105dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105e0:	701a      	strb	r2, [r3, #0]
   105e2:	f24c 3319 	movw	r3, #49945	; 0xc319
   105e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105ea:	781b      	ldrb	r3, [r3, #0]
   105ec:	2bff      	cmp	r3, #255	; 0xff
   105ee:	d111      	bne.n	10614 <send_radIR+0x540>
   105f0:	f24c 3319 	movw	r3, #49945	; 0xc319
   105f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105f8:	2200      	movs	r2, #0
   105fa:	701a      	strb	r2, [r3, #0]
   105fc:	e00a      	b.n	10614 <send_radIR+0x540>
   105fe:	bf00      	nop
   10600:	2004c911 	.word	0x2004c911
   10604:	2004c912 	.word	0x2004c912
   10608:	2004c913 	.word	0x2004c913
   1060c:	2004c915 	.word	0x2004c915
   10610:	2004c916 	.word	0x2004c916
   10614:	f24c 3319 	movw	r3, #49945	; 0xc319
   10618:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1061c:	781b      	ldrb	r3, [r3, #0]
   1061e:	461a      	mov	r2, r3
   10620:	f64c 1314 	movw	r3, #51476	; 0xc914
   10624:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10628:	78d9      	ldrb	r1, [r3, #3]
   1062a:	f24c 331c 	movw	r3, #49948	; 0xc31c
   1062e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10632:	5499      	strb	r1, [r3, r2]
   10634:	4bd3      	ldr	r3, [pc, #844]	; (10984 <send_radIR+0x8b0>)
   10636:	781a      	ldrb	r2, [r3, #0]
   10638:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1063c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10640:	781b      	ldrb	r3, [r3, #0]
   10642:	4413      	add	r3, r2
   10644:	b2da      	uxtb	r2, r3
   10646:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1064a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1064e:	701a      	strb	r2, [r3, #0]
   10650:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10654:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10658:	781a      	ldrb	r2, [r3, #0]
   1065a:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1065e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10662:	781b      	ldrb	r3, [r3, #0]
   10664:	4413      	add	r3, r2
   10666:	b2da      	uxtb	r2, r3
   10668:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1066c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10670:	701a      	strb	r2, [r3, #0]
   10672:	f24c 3319 	movw	r3, #49945	; 0xc319
   10676:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1067a:	781b      	ldrb	r3, [r3, #0]
   1067c:	3301      	adds	r3, #1
   1067e:	b2da      	uxtb	r2, r3
   10680:	f24c 3319 	movw	r3, #49945	; 0xc319
   10684:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10688:	701a      	strb	r2, [r3, #0]
   1068a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1068e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10692:	781b      	ldrb	r3, [r3, #0]
   10694:	2bff      	cmp	r3, #255	; 0xff
   10696:	d105      	bne.n	106a4 <send_radIR+0x5d0>
   10698:	f24c 3319 	movw	r3, #49945	; 0xc319
   1069c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106a0:	2200      	movs	r2, #0
   106a2:	701a      	strb	r2, [r3, #0]
   106a4:	f24c 3319 	movw	r3, #49945	; 0xc319
   106a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106ac:	781b      	ldrb	r3, [r3, #0]
   106ae:	461a      	mov	r2, r3
   106b0:	f64c 130c 	movw	r3, #51468	; 0xc90c
   106b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106b8:	7819      	ldrb	r1, [r3, #0]
   106ba:	f24c 331c 	movw	r3, #49948	; 0xc31c
   106be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106c2:	5499      	strb	r1, [r3, r2]
   106c4:	f64c 130c 	movw	r3, #51468	; 0xc90c
   106c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106cc:	781a      	ldrb	r2, [r3, #0]
   106ce:	f24c 431d 	movw	r3, #50205	; 0xc41d
   106d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106d6:	781b      	ldrb	r3, [r3, #0]
   106d8:	4413      	add	r3, r2
   106da:	b2da      	uxtb	r2, r3
   106dc:	f24c 431d 	movw	r3, #50205	; 0xc41d
   106e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106e4:	701a      	strb	r2, [r3, #0]
   106e6:	f24c 431e 	movw	r3, #50206	; 0xc41e
   106ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106ee:	781a      	ldrb	r2, [r3, #0]
   106f0:	f24c 431d 	movw	r3, #50205	; 0xc41d
   106f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106f8:	781b      	ldrb	r3, [r3, #0]
   106fa:	4413      	add	r3, r2
   106fc:	b2da      	uxtb	r2, r3
   106fe:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10702:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10706:	701a      	strb	r2, [r3, #0]
   10708:	f24c 3319 	movw	r3, #49945	; 0xc319
   1070c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10710:	781b      	ldrb	r3, [r3, #0]
   10712:	3301      	adds	r3, #1
   10714:	b2da      	uxtb	r2, r3
   10716:	f24c 3319 	movw	r3, #49945	; 0xc319
   1071a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1071e:	701a      	strb	r2, [r3, #0]
   10720:	f24c 3319 	movw	r3, #49945	; 0xc319
   10724:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10728:	781b      	ldrb	r3, [r3, #0]
   1072a:	2bff      	cmp	r3, #255	; 0xff
   1072c:	d105      	bne.n	1073a <send_radIR+0x666>
   1072e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10732:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10736:	2200      	movs	r2, #0
   10738:	701a      	strb	r2, [r3, #0]
   1073a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1073e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10742:	781b      	ldrb	r3, [r3, #0]
   10744:	461a      	mov	r2, r3
   10746:	f64c 130c 	movw	r3, #51468	; 0xc90c
   1074a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1074e:	7859      	ldrb	r1, [r3, #1]
   10750:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10754:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10758:	5499      	strb	r1, [r3, r2]
   1075a:	4b8b      	ldr	r3, [pc, #556]	; (10988 <send_radIR+0x8b4>)
   1075c:	781a      	ldrb	r2, [r3, #0]
   1075e:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10762:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10766:	781b      	ldrb	r3, [r3, #0]
   10768:	4413      	add	r3, r2
   1076a:	b2da      	uxtb	r2, r3
   1076c:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10770:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10774:	701a      	strb	r2, [r3, #0]
   10776:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1077a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1077e:	781a      	ldrb	r2, [r3, #0]
   10780:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10784:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10788:	781b      	ldrb	r3, [r3, #0]
   1078a:	4413      	add	r3, r2
   1078c:	b2da      	uxtb	r2, r3
   1078e:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10792:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10796:	701a      	strb	r2, [r3, #0]
   10798:	f24c 3319 	movw	r3, #49945	; 0xc319
   1079c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107a0:	781b      	ldrb	r3, [r3, #0]
   107a2:	3301      	adds	r3, #1
   107a4:	b2da      	uxtb	r2, r3
   107a6:	f24c 3319 	movw	r3, #49945	; 0xc319
   107aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107ae:	701a      	strb	r2, [r3, #0]
   107b0:	f24c 3319 	movw	r3, #49945	; 0xc319
   107b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107b8:	781b      	ldrb	r3, [r3, #0]
   107ba:	2bff      	cmp	r3, #255	; 0xff
   107bc:	d105      	bne.n	107ca <send_radIR+0x6f6>
   107be:	f24c 3319 	movw	r3, #49945	; 0xc319
   107c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107c6:	2200      	movs	r2, #0
   107c8:	701a      	strb	r2, [r3, #0]
   107ca:	f24c 3319 	movw	r3, #49945	; 0xc319
   107ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107d2:	781b      	ldrb	r3, [r3, #0]
   107d4:	461a      	mov	r2, r3
   107d6:	f64c 130c 	movw	r3, #51468	; 0xc90c
   107da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107de:	7899      	ldrb	r1, [r3, #2]
   107e0:	f24c 331c 	movw	r3, #49948	; 0xc31c
   107e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107e8:	5499      	strb	r1, [r3, r2]
   107ea:	4b68      	ldr	r3, [pc, #416]	; (1098c <send_radIR+0x8b8>)
   107ec:	781a      	ldrb	r2, [r3, #0]
   107ee:	f24c 431d 	movw	r3, #50205	; 0xc41d
   107f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107f6:	781b      	ldrb	r3, [r3, #0]
   107f8:	4413      	add	r3, r2
   107fa:	b2da      	uxtb	r2, r3
   107fc:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10800:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10804:	701a      	strb	r2, [r3, #0]
   10806:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1080a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1080e:	781a      	ldrb	r2, [r3, #0]
   10810:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10814:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10818:	781b      	ldrb	r3, [r3, #0]
   1081a:	4413      	add	r3, r2
   1081c:	b2da      	uxtb	r2, r3
   1081e:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10822:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10826:	701a      	strb	r2, [r3, #0]
   10828:	f24c 3319 	movw	r3, #49945	; 0xc319
   1082c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10830:	781b      	ldrb	r3, [r3, #0]
   10832:	3301      	adds	r3, #1
   10834:	b2da      	uxtb	r2, r3
   10836:	f24c 3319 	movw	r3, #49945	; 0xc319
   1083a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1083e:	701a      	strb	r2, [r3, #0]
   10840:	f24c 3319 	movw	r3, #49945	; 0xc319
   10844:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10848:	781b      	ldrb	r3, [r3, #0]
   1084a:	2bff      	cmp	r3, #255	; 0xff
   1084c:	d105      	bne.n	1085a <send_radIR+0x786>
   1084e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10852:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10856:	2200      	movs	r2, #0
   10858:	701a      	strb	r2, [r3, #0]
   1085a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1085e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10862:	781b      	ldrb	r3, [r3, #0]
   10864:	461a      	mov	r2, r3
   10866:	f64c 130c 	movw	r3, #51468	; 0xc90c
   1086a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1086e:	78d9      	ldrb	r1, [r3, #3]
   10870:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10874:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10878:	5499      	strb	r1, [r3, r2]
   1087a:	4b45      	ldr	r3, [pc, #276]	; (10990 <send_radIR+0x8bc>)
   1087c:	781a      	ldrb	r2, [r3, #0]
   1087e:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10882:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10886:	781b      	ldrb	r3, [r3, #0]
   10888:	4413      	add	r3, r2
   1088a:	b2da      	uxtb	r2, r3
   1088c:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10890:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10894:	701a      	strb	r2, [r3, #0]
   10896:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1089a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1089e:	781a      	ldrb	r2, [r3, #0]
   108a0:	f24c 431d 	movw	r3, #50205	; 0xc41d
   108a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108a8:	781b      	ldrb	r3, [r3, #0]
   108aa:	4413      	add	r3, r2
   108ac:	b2da      	uxtb	r2, r3
   108ae:	f24c 431e 	movw	r3, #50206	; 0xc41e
   108b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108b6:	701a      	strb	r2, [r3, #0]
   108b8:	f24c 3319 	movw	r3, #49945	; 0xc319
   108bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108c0:	781b      	ldrb	r3, [r3, #0]
   108c2:	3301      	adds	r3, #1
   108c4:	b2da      	uxtb	r2, r3
   108c6:	f24c 3319 	movw	r3, #49945	; 0xc319
   108ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108ce:	701a      	strb	r2, [r3, #0]
   108d0:	f24c 3319 	movw	r3, #49945	; 0xc319
   108d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108d8:	781b      	ldrb	r3, [r3, #0]
   108da:	2bff      	cmp	r3, #255	; 0xff
   108dc:	d105      	bne.n	108ea <send_radIR+0x816>
   108de:	f24c 3319 	movw	r3, #49945	; 0xc319
   108e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108e6:	2200      	movs	r2, #0
   108e8:	701a      	strb	r2, [r3, #0]
   108ea:	f24c 3319 	movw	r3, #49945	; 0xc319
   108ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108f2:	781b      	ldrb	r3, [r3, #0]
   108f4:	461a      	mov	r2, r3
   108f6:	f240 5342 	movw	r3, #1346	; 0x542
   108fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108fe:	7819      	ldrb	r1, [r3, #0]
   10900:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10904:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10908:	5499      	strb	r1, [r3, r2]
   1090a:	f240 5342 	movw	r3, #1346	; 0x542
   1090e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10912:	781a      	ldrb	r2, [r3, #0]
   10914:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10918:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1091c:	781b      	ldrb	r3, [r3, #0]
   1091e:	4413      	add	r3, r2
   10920:	b2da      	uxtb	r2, r3
   10922:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10926:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1092a:	701a      	strb	r2, [r3, #0]
   1092c:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10930:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10934:	781a      	ldrb	r2, [r3, #0]
   10936:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1093a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1093e:	781b      	ldrb	r3, [r3, #0]
   10940:	4413      	add	r3, r2
   10942:	b2da      	uxtb	r2, r3
   10944:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10948:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1094c:	701a      	strb	r2, [r3, #0]
   1094e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10952:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10956:	781b      	ldrb	r3, [r3, #0]
   10958:	3301      	adds	r3, #1
   1095a:	b2da      	uxtb	r2, r3
   1095c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10960:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10964:	701a      	strb	r2, [r3, #0]
   10966:	f24c 3319 	movw	r3, #49945	; 0xc319
   1096a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1096e:	781b      	ldrb	r3, [r3, #0]
   10970:	2bff      	cmp	r3, #255	; 0xff
   10972:	d10f      	bne.n	10994 <send_radIR+0x8c0>
   10974:	f24c 3319 	movw	r3, #49945	; 0xc319
   10978:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1097c:	2200      	movs	r2, #0
   1097e:	701a      	strb	r2, [r3, #0]
   10980:	e008      	b.n	10994 <send_radIR+0x8c0>
   10982:	bf00      	nop
   10984:	2004c917 	.word	0x2004c917
   10988:	2004c90d 	.word	0x2004c90d
   1098c:	2004c90e 	.word	0x2004c90e
   10990:	2004c90f 	.word	0x2004c90f
   10994:	f24c 3319 	movw	r3, #49945	; 0xc319
   10998:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1099c:	781b      	ldrb	r3, [r3, #0]
   1099e:	461a      	mov	r2, r3
   109a0:	f240 5342 	movw	r3, #1346	; 0x542
   109a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109a8:	7859      	ldrb	r1, [r3, #1]
   109aa:	f24c 331c 	movw	r3, #49948	; 0xc31c
   109ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109b2:	5499      	strb	r1, [r3, r2]
   109b4:	4bc2      	ldr	r3, [pc, #776]	; (10cc0 <send_radIR+0xbec>)
   109b6:	781a      	ldrb	r2, [r3, #0]
   109b8:	f24c 431d 	movw	r3, #50205	; 0xc41d
   109bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109c0:	781b      	ldrb	r3, [r3, #0]
   109c2:	4413      	add	r3, r2
   109c4:	b2da      	uxtb	r2, r3
   109c6:	f24c 431d 	movw	r3, #50205	; 0xc41d
   109ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109ce:	701a      	strb	r2, [r3, #0]
   109d0:	f24c 431e 	movw	r3, #50206	; 0xc41e
   109d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109d8:	781a      	ldrb	r2, [r3, #0]
   109da:	f24c 431d 	movw	r3, #50205	; 0xc41d
   109de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109e2:	781b      	ldrb	r3, [r3, #0]
   109e4:	4413      	add	r3, r2
   109e6:	b2da      	uxtb	r2, r3
   109e8:	f24c 431e 	movw	r3, #50206	; 0xc41e
   109ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109f0:	701a      	strb	r2, [r3, #0]
   109f2:	f24c 3319 	movw	r3, #49945	; 0xc319
   109f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109fa:	781b      	ldrb	r3, [r3, #0]
   109fc:	3301      	adds	r3, #1
   109fe:	b2da      	uxtb	r2, r3
   10a00:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a08:	701a      	strb	r2, [r3, #0]
   10a0a:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a12:	781b      	ldrb	r3, [r3, #0]
   10a14:	2bff      	cmp	r3, #255	; 0xff
   10a16:	d105      	bne.n	10a24 <send_radIR+0x950>
   10a18:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a20:	2200      	movs	r2, #0
   10a22:	701a      	strb	r2, [r3, #0]
   10a24:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a2c:	781b      	ldrb	r3, [r3, #0]
   10a2e:	461a      	mov	r2, r3
   10a30:	f240 5344 	movw	r3, #1348	; 0x544
   10a34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a38:	7819      	ldrb	r1, [r3, #0]
   10a3a:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10a3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a42:	5499      	strb	r1, [r3, r2]
   10a44:	f240 5344 	movw	r3, #1348	; 0x544
   10a48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a4c:	781a      	ldrb	r2, [r3, #0]
   10a4e:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10a52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a56:	781b      	ldrb	r3, [r3, #0]
   10a58:	4413      	add	r3, r2
   10a5a:	b2da      	uxtb	r2, r3
   10a5c:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10a60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a64:	701a      	strb	r2, [r3, #0]
   10a66:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10a6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a6e:	781a      	ldrb	r2, [r3, #0]
   10a70:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10a74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a78:	781b      	ldrb	r3, [r3, #0]
   10a7a:	4413      	add	r3, r2
   10a7c:	b2da      	uxtb	r2, r3
   10a7e:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10a82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a86:	701a      	strb	r2, [r3, #0]
   10a88:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a90:	781b      	ldrb	r3, [r3, #0]
   10a92:	3301      	adds	r3, #1
   10a94:	b2da      	uxtb	r2, r3
   10a96:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a9e:	701a      	strb	r2, [r3, #0]
   10aa0:	f24c 3319 	movw	r3, #49945	; 0xc319
   10aa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10aa8:	781b      	ldrb	r3, [r3, #0]
   10aaa:	2bff      	cmp	r3, #255	; 0xff
   10aac:	d105      	bne.n	10aba <send_radIR+0x9e6>
   10aae:	f24c 3319 	movw	r3, #49945	; 0xc319
   10ab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ab6:	2200      	movs	r2, #0
   10ab8:	701a      	strb	r2, [r3, #0]
   10aba:	f24c 3319 	movw	r3, #49945	; 0xc319
   10abe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ac2:	781b      	ldrb	r3, [r3, #0]
   10ac4:	461a      	mov	r2, r3
   10ac6:	f240 5344 	movw	r3, #1348	; 0x544
   10aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ace:	7859      	ldrb	r1, [r3, #1]
   10ad0:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10ad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ad8:	5499      	strb	r1, [r3, r2]
   10ada:	4b7a      	ldr	r3, [pc, #488]	; (10cc4 <send_radIR+0xbf0>)
   10adc:	781a      	ldrb	r2, [r3, #0]
   10ade:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10ae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ae6:	781b      	ldrb	r3, [r3, #0]
   10ae8:	4413      	add	r3, r2
   10aea:	b2da      	uxtb	r2, r3
   10aec:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10af0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10af4:	701a      	strb	r2, [r3, #0]
   10af6:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10afa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10afe:	781a      	ldrb	r2, [r3, #0]
   10b00:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10b04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b08:	781b      	ldrb	r3, [r3, #0]
   10b0a:	4413      	add	r3, r2
   10b0c:	b2da      	uxtb	r2, r3
   10b0e:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10b12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b16:	701a      	strb	r2, [r3, #0]
   10b18:	f24c 3319 	movw	r3, #49945	; 0xc319
   10b1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b20:	781b      	ldrb	r3, [r3, #0]
   10b22:	3301      	adds	r3, #1
   10b24:	b2da      	uxtb	r2, r3
   10b26:	f24c 3319 	movw	r3, #49945	; 0xc319
   10b2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b2e:	701a      	strb	r2, [r3, #0]
   10b30:	f24c 3319 	movw	r3, #49945	; 0xc319
   10b34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b38:	781b      	ldrb	r3, [r3, #0]
   10b3a:	2bff      	cmp	r3, #255	; 0xff
   10b3c:	d105      	bne.n	10b4a <send_radIR+0xa76>
   10b3e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10b42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b46:	2200      	movs	r2, #0
   10b48:	701a      	strb	r2, [r3, #0]
   10b4a:	f24c 3319 	movw	r3, #49945	; 0xc319
   10b4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b52:	781b      	ldrb	r3, [r3, #0]
   10b54:	461a      	mov	r2, r3
   10b56:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10b5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b5e:	7819      	ldrb	r1, [r3, #0]
   10b60:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10b64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b68:	5499      	strb	r1, [r3, r2]
   10b6a:	f24c 3319 	movw	r3, #49945	; 0xc319
   10b6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b72:	781b      	ldrb	r3, [r3, #0]
   10b74:	3301      	adds	r3, #1
   10b76:	b2da      	uxtb	r2, r3
   10b78:	f24c 3319 	movw	r3, #49945	; 0xc319
   10b7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b80:	701a      	strb	r2, [r3, #0]
   10b82:	f24c 3319 	movw	r3, #49945	; 0xc319
   10b86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b8a:	781b      	ldrb	r3, [r3, #0]
   10b8c:	2bff      	cmp	r3, #255	; 0xff
   10b8e:	d105      	bne.n	10b9c <send_radIR+0xac8>
   10b90:	f24c 3319 	movw	r3, #49945	; 0xc319
   10b94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b98:	2200      	movs	r2, #0
   10b9a:	701a      	strb	r2, [r3, #0]
   10b9c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10ba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ba4:	781b      	ldrb	r3, [r3, #0]
   10ba6:	461a      	mov	r2, r3
   10ba8:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10bac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bb0:	7819      	ldrb	r1, [r3, #0]
   10bb2:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10bb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bba:	5499      	strb	r1, [r3, r2]
   10bbc:	f24c 3319 	movw	r3, #49945	; 0xc319
   10bc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bc4:	781b      	ldrb	r3, [r3, #0]
   10bc6:	3301      	adds	r3, #1
   10bc8:	b2da      	uxtb	r2, r3
   10bca:	f24c 3319 	movw	r3, #49945	; 0xc319
   10bce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bd2:	701a      	strb	r2, [r3, #0]
   10bd4:	f24c 3319 	movw	r3, #49945	; 0xc319
   10bd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bdc:	781b      	ldrb	r3, [r3, #0]
   10bde:	2bff      	cmp	r3, #255	; 0xff
   10be0:	d105      	bne.n	10bee <send_radIR+0xb1a>
   10be2:	f24c 3319 	movw	r3, #49945	; 0xc319
   10be6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bea:	2200      	movs	r2, #0
   10bec:	701a      	strb	r2, [r3, #0]
   10bee:	f242 0339 	movw	r3, #8249	; 0x2039
   10bf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bf6:	781b      	ldrb	r3, [r3, #0]
   10bf8:	b2db      	uxtb	r3, r3
   10bfa:	f003 0310 	and.w	r3, r3, #16
   10bfe:	2b00      	cmp	r3, #0
   10c00:	d15a      	bne.n	10cb8 <send_radIR+0xbe4>
   10c02:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10c06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c0a:	781b      	ldrb	r3, [r3, #0]
   10c0c:	b2db      	uxtb	r3, r3
   10c0e:	461a      	mov	r2, r3
   10c10:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10c14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c18:	5c9a      	ldrb	r2, [r3, r2]
   10c1a:	f24c 431b 	movw	r3, #50203	; 0xc41b
   10c1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c22:	701a      	strb	r2, [r3, #0]
   10c24:	f24c 431c 	movw	r3, #50204	; 0xc41c
   10c28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c2c:	2200      	movs	r2, #0
   10c2e:	701a      	strb	r2, [r3, #0]
   10c30:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10c34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c38:	781b      	ldrb	r3, [r3, #0]
   10c3a:	b2db      	uxtb	r3, r3
   10c3c:	3301      	adds	r3, #1
   10c3e:	b2da      	uxtb	r2, r3
   10c40:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10c44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c48:	701a      	strb	r2, [r3, #0]
   10c4a:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10c4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c52:	781b      	ldrb	r3, [r3, #0]
   10c54:	b2db      	uxtb	r3, r3
   10c56:	2bff      	cmp	r3, #255	; 0xff
   10c58:	d105      	bne.n	10c66 <send_radIR+0xb92>
   10c5a:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10c5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c62:	2200      	movs	r2, #0
   10c64:	701a      	strb	r2, [r3, #0]
   10c66:	f242 0338 	movw	r3, #8248	; 0x2038
   10c6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c6e:	f242 0238 	movw	r2, #8248	; 0x2038
   10c72:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10c76:	7812      	ldrb	r2, [r2, #0]
   10c78:	b2d2      	uxtb	r2, r2
   10c7a:	f042 0201 	orr.w	r2, r2, #1
   10c7e:	b2d2      	uxtb	r2, r2
   10c80:	701a      	strb	r2, [r3, #0]
   10c82:	f242 0339 	movw	r3, #8249	; 0x2039
   10c86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c8a:	f242 0239 	movw	r2, #8249	; 0x2039
   10c8e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10c92:	7812      	ldrb	r2, [r2, #0]
   10c94:	b2d2      	uxtb	r2, r2
   10c96:	f042 0210 	orr.w	r2, r2, #16
   10c9a:	b2d2      	uxtb	r2, r2
   10c9c:	701a      	strb	r2, [r3, #0]
   10c9e:	e00b      	b.n	10cb8 <send_radIR+0xbe4>
   10ca0:	f24c 3318 	movw	r3, #49944	; 0xc318
   10ca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ca8:	781b      	ldrb	r3, [r3, #0]
   10caa:	3301      	adds	r3, #1
   10cac:	b2da      	uxtb	r2, r3
   10cae:	f24c 3318 	movw	r3, #49944	; 0xc318
   10cb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cb6:	701a      	strb	r2, [r3, #0]
}
   10cb8:	46bd      	mov	sp, r7
   10cba:	f85d 7b04 	ldr.w	r7, [sp], #4
   10cbe:	4770      	bx	lr
   10cc0:	20000543 	.word	0x20000543
   10cc4:	20000545 	.word	0x20000545

00010cc8 <send_takeOff>:

void send_takeOff(void){
   10cc8:	b580      	push	{r7, lr}
   10cca:	af00      	add	r7, sp, #0
  if (gps_pos_available){
   10ccc:	f24c 43ae 	movw	r3, #50350	; 0xc4ae
   10cd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cd4:	781b      	ldrb	r3, [r3, #0]
   10cd6:	2b00      	cmp	r3, #0
   10cd8:	f000 8200 	beq.w	110dc <send_takeOff+0x414>
     if (!estimator_flight_time && (estimator_hspeed_mod > MIN_SPEED_FOR_TAKEOFF)) {
   10cdc:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   10ce0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ce4:	881b      	ldrh	r3, [r3, #0]
   10ce6:	2b00      	cmp	r3, #0
   10ce8:	f040 81f2 	bne.w	110d0 <send_takeOff+0x408>
   10cec:	f64c 1304 	movw	r3, #51460	; 0xc904
   10cf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cf4:	681b      	ldr	r3, [r3, #0]
   10cf6:	4618      	mov	r0, r3
   10cf8:	f04f 0100 	mov.w	r1, #0
   10cfc:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   10d00:	f007 fe00 	bl	18904 <__aeabi_fcmpgt>
   10d04:	4603      	mov	r3, r0
   10d06:	2b00      	cmp	r3, #0
   10d08:	f000 81e2 	beq.w	110d0 <send_takeOff+0x408>
        estimator_flight_time = 1;
   10d0c:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   10d10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d14:	2201      	movs	r2, #1
   10d16:	801a      	strh	r2, [r3, #0]
        launch = TRUE; /* Not set in non auto launch */
   10d18:	f24c 3310 	movw	r3, #49936	; 0xc310
   10d1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d20:	2201      	movs	r2, #1
   10d22:	701a      	strb	r2, [r3, #0]
        DOWNLINK_SEND_TAKEOFF(&cputime);
   10d24:	f24c 3319 	movw	r3, #49945	; 0xc319
   10d28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d2c:	781a      	ldrb	r2, [r3, #0]
   10d2e:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10d32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d36:	781b      	ldrb	r3, [r3, #0]
   10d38:	b2db      	uxtb	r3, r3
   10d3a:	429a      	cmp	r2, r3
   10d3c:	d313      	bcc.n	10d66 <send_takeOff+0x9e>
   10d3e:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10d42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d46:	781b      	ldrb	r3, [r3, #0]
   10d48:	b2db      	uxtb	r3, r3
   10d4a:	461a      	mov	r2, r3
   10d4c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10d50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d54:	781b      	ldrb	r3, [r3, #0]
   10d56:	1ad3      	subs	r3, r2, r3
   10d58:	33ff      	adds	r3, #255	; 0xff
   10d5a:	2b06      	cmp	r3, #6
   10d5c:	bfd4      	ite	le
   10d5e:	2300      	movle	r3, #0
   10d60:	2301      	movgt	r3, #1
   10d62:	b2db      	uxtb	r3, r3
   10d64:	e011      	b.n	10d8a <send_takeOff+0xc2>
   10d66:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10d6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d6e:	781b      	ldrb	r3, [r3, #0]
   10d70:	b2db      	uxtb	r3, r3
   10d72:	461a      	mov	r2, r3
   10d74:	f24c 3319 	movw	r3, #49945	; 0xc319
   10d78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d7c:	781b      	ldrb	r3, [r3, #0]
   10d7e:	1ad3      	subs	r3, r2, r3
   10d80:	2b06      	cmp	r3, #6
   10d82:	bfd4      	ite	le
   10d84:	2300      	movle	r3, #0
   10d86:	2301      	movgt	r3, #1
   10d88:	b2db      	uxtb	r3, r3
   10d8a:	2b00      	cmp	r3, #0
   10d8c:	f000 8194 	beq.w	110b8 <send_takeOff+0x3f0>
   10d90:	f24c 3319 	movw	r3, #49945	; 0xc319
   10d94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d98:	781b      	ldrb	r3, [r3, #0]
   10d9a:	461a      	mov	r2, r3
   10d9c:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10da0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10da4:	2105      	movs	r1, #5
   10da6:	5499      	strb	r1, [r3, r2]
   10da8:	f24c 3319 	movw	r3, #49945	; 0xc319
   10dac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10db0:	781b      	ldrb	r3, [r3, #0]
   10db2:	3301      	adds	r3, #1
   10db4:	b2da      	uxtb	r2, r3
   10db6:	f24c 3319 	movw	r3, #49945	; 0xc319
   10dba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dbe:	701a      	strb	r2, [r3, #0]
   10dc0:	f24c 3319 	movw	r3, #49945	; 0xc319
   10dc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dc8:	781b      	ldrb	r3, [r3, #0]
   10dca:	2bff      	cmp	r3, #255	; 0xff
   10dcc:	d105      	bne.n	10dda <send_takeOff+0x112>
   10dce:	f24c 3319 	movw	r3, #49945	; 0xc319
   10dd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dd6:	2200      	movs	r2, #0
   10dd8:	701a      	strb	r2, [r3, #0]
   10dda:	f24c 3319 	movw	r3, #49945	; 0xc319
   10dde:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10de2:	781b      	ldrb	r3, [r3, #0]
   10de4:	461a      	mov	r2, r3
   10de6:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10dea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dee:	2104      	movs	r1, #4
   10df0:	5499      	strb	r1, [r3, r2]
   10df2:	f24c 3319 	movw	r3, #49945	; 0xc319
   10df6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dfa:	781b      	ldrb	r3, [r3, #0]
   10dfc:	3301      	adds	r3, #1
   10dfe:	b2da      	uxtb	r2, r3
   10e00:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e08:	701a      	strb	r2, [r3, #0]
   10e0a:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e12:	781b      	ldrb	r3, [r3, #0]
   10e14:	2bff      	cmp	r3, #255	; 0xff
   10e16:	d105      	bne.n	10e24 <send_takeOff+0x15c>
   10e18:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e20:	2200      	movs	r2, #0
   10e22:	701a      	strb	r2, [r3, #0]
   10e24:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10e28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e2c:	2204      	movs	r2, #4
   10e2e:	701a      	strb	r2, [r3, #0]
   10e30:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10e34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e38:	2204      	movs	r2, #4
   10e3a:	701a      	strb	r2, [r3, #0]
   10e3c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e44:	781b      	ldrb	r3, [r3, #0]
   10e46:	461a      	mov	r2, r3
   10e48:	f24c 23fa 	movw	r3, #49914	; 0xc2fa
   10e4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e50:	7819      	ldrb	r1, [r3, #0]
   10e52:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10e56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e5a:	5499      	strb	r1, [r3, r2]
   10e5c:	f24c 23fa 	movw	r3, #49914	; 0xc2fa
   10e60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e64:	781a      	ldrb	r2, [r3, #0]
   10e66:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10e6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e6e:	781b      	ldrb	r3, [r3, #0]
   10e70:	4413      	add	r3, r2
   10e72:	b2da      	uxtb	r2, r3
   10e74:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10e78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e7c:	701a      	strb	r2, [r3, #0]
   10e7e:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10e82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e86:	781a      	ldrb	r2, [r3, #0]
   10e88:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10e8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e90:	781b      	ldrb	r3, [r3, #0]
   10e92:	4413      	add	r3, r2
   10e94:	b2da      	uxtb	r2, r3
   10e96:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10e9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e9e:	701a      	strb	r2, [r3, #0]
   10ea0:	f24c 3319 	movw	r3, #49945	; 0xc319
   10ea4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ea8:	781b      	ldrb	r3, [r3, #0]
   10eaa:	3301      	adds	r3, #1
   10eac:	b2da      	uxtb	r2, r3
   10eae:	f24c 3319 	movw	r3, #49945	; 0xc319
   10eb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10eb6:	701a      	strb	r2, [r3, #0]
   10eb8:	f24c 3319 	movw	r3, #49945	; 0xc319
   10ebc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ec0:	781b      	ldrb	r3, [r3, #0]
   10ec2:	2bff      	cmp	r3, #255	; 0xff
   10ec4:	d105      	bne.n	10ed2 <send_takeOff+0x20a>
   10ec6:	f24c 3319 	movw	r3, #49945	; 0xc319
   10eca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ece:	2200      	movs	r2, #0
   10ed0:	701a      	strb	r2, [r3, #0]
   10ed2:	f24c 3319 	movw	r3, #49945	; 0xc319
   10ed6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10eda:	781b      	ldrb	r3, [r3, #0]
   10edc:	461a      	mov	r2, r3
   10ede:	f24c 23fa 	movw	r3, #49914	; 0xc2fa
   10ee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ee6:	7859      	ldrb	r1, [r3, #1]
   10ee8:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10eec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ef0:	5499      	strb	r1, [r3, r2]
   10ef2:	4b7b      	ldr	r3, [pc, #492]	; (110e0 <send_takeOff+0x418>)
   10ef4:	781a      	ldrb	r2, [r3, #0]
   10ef6:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10efa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10efe:	781b      	ldrb	r3, [r3, #0]
   10f00:	4413      	add	r3, r2
   10f02:	b2da      	uxtb	r2, r3
   10f04:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10f08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f0c:	701a      	strb	r2, [r3, #0]
   10f0e:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10f12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f16:	781a      	ldrb	r2, [r3, #0]
   10f18:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10f1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f20:	781b      	ldrb	r3, [r3, #0]
   10f22:	4413      	add	r3, r2
   10f24:	b2da      	uxtb	r2, r3
   10f26:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10f2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f2e:	701a      	strb	r2, [r3, #0]
   10f30:	f24c 3319 	movw	r3, #49945	; 0xc319
   10f34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f38:	781b      	ldrb	r3, [r3, #0]
   10f3a:	3301      	adds	r3, #1
   10f3c:	b2da      	uxtb	r2, r3
   10f3e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10f42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f46:	701a      	strb	r2, [r3, #0]
   10f48:	f24c 3319 	movw	r3, #49945	; 0xc319
   10f4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f50:	781b      	ldrb	r3, [r3, #0]
   10f52:	2bff      	cmp	r3, #255	; 0xff
   10f54:	d105      	bne.n	10f62 <send_takeOff+0x29a>
   10f56:	f24c 3319 	movw	r3, #49945	; 0xc319
   10f5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f5e:	2200      	movs	r2, #0
   10f60:	701a      	strb	r2, [r3, #0]
   10f62:	f24c 3319 	movw	r3, #49945	; 0xc319
   10f66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f6a:	781b      	ldrb	r3, [r3, #0]
   10f6c:	461a      	mov	r2, r3
   10f6e:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10f72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f76:	7819      	ldrb	r1, [r3, #0]
   10f78:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10f7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f80:	5499      	strb	r1, [r3, r2]
   10f82:	f24c 3319 	movw	r3, #49945	; 0xc319
   10f86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f8a:	781b      	ldrb	r3, [r3, #0]
   10f8c:	3301      	adds	r3, #1
   10f8e:	b2da      	uxtb	r2, r3
   10f90:	f24c 3319 	movw	r3, #49945	; 0xc319
   10f94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f98:	701a      	strb	r2, [r3, #0]
   10f9a:	f24c 3319 	movw	r3, #49945	; 0xc319
   10f9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fa2:	781b      	ldrb	r3, [r3, #0]
   10fa4:	2bff      	cmp	r3, #255	; 0xff
   10fa6:	d105      	bne.n	10fb4 <send_takeOff+0x2ec>
   10fa8:	f24c 3319 	movw	r3, #49945	; 0xc319
   10fac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fb0:	2200      	movs	r2, #0
   10fb2:	701a      	strb	r2, [r3, #0]
   10fb4:	f24c 3319 	movw	r3, #49945	; 0xc319
   10fb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fbc:	781b      	ldrb	r3, [r3, #0]
   10fbe:	461a      	mov	r2, r3
   10fc0:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10fc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fc8:	7819      	ldrb	r1, [r3, #0]
   10fca:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10fce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fd2:	5499      	strb	r1, [r3, r2]
   10fd4:	f24c 3319 	movw	r3, #49945	; 0xc319
   10fd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fdc:	781b      	ldrb	r3, [r3, #0]
   10fde:	3301      	adds	r3, #1
   10fe0:	b2da      	uxtb	r2, r3
   10fe2:	f24c 3319 	movw	r3, #49945	; 0xc319
   10fe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fea:	701a      	strb	r2, [r3, #0]
   10fec:	f24c 3319 	movw	r3, #49945	; 0xc319
   10ff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ff4:	781b      	ldrb	r3, [r3, #0]
   10ff6:	2bff      	cmp	r3, #255	; 0xff
   10ff8:	d105      	bne.n	11006 <send_takeOff+0x33e>
   10ffa:	f24c 3319 	movw	r3, #49945	; 0xc319
   10ffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11002:	2200      	movs	r2, #0
   11004:	701a      	strb	r2, [r3, #0]
   11006:	f242 0339 	movw	r3, #8249	; 0x2039
   1100a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1100e:	781b      	ldrb	r3, [r3, #0]
   11010:	b2db      	uxtb	r3, r3
   11012:	f003 0310 	and.w	r3, r3, #16
   11016:	2b00      	cmp	r3, #0
   11018:	d15a      	bne.n	110d0 <send_takeOff+0x408>
   1101a:	f24c 331a 	movw	r3, #49946	; 0xc31a
   1101e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11022:	781b      	ldrb	r3, [r3, #0]
   11024:	b2db      	uxtb	r3, r3
   11026:	461a      	mov	r2, r3
   11028:	f24c 331c 	movw	r3, #49948	; 0xc31c
   1102c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11030:	5c9a      	ldrb	r2, [r3, r2]
   11032:	f24c 431b 	movw	r3, #50203	; 0xc41b
   11036:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1103a:	701a      	strb	r2, [r3, #0]
   1103c:	f24c 431c 	movw	r3, #50204	; 0xc41c
   11040:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11044:	2200      	movs	r2, #0
   11046:	701a      	strb	r2, [r3, #0]
   11048:	f24c 331a 	movw	r3, #49946	; 0xc31a
   1104c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11050:	781b      	ldrb	r3, [r3, #0]
   11052:	b2db      	uxtb	r3, r3
   11054:	3301      	adds	r3, #1
   11056:	b2da      	uxtb	r2, r3
   11058:	f24c 331a 	movw	r3, #49946	; 0xc31a
   1105c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11060:	701a      	strb	r2, [r3, #0]
   11062:	f24c 331a 	movw	r3, #49946	; 0xc31a
   11066:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1106a:	781b      	ldrb	r3, [r3, #0]
   1106c:	b2db      	uxtb	r3, r3
   1106e:	2bff      	cmp	r3, #255	; 0xff
   11070:	d105      	bne.n	1107e <send_takeOff+0x3b6>
   11072:	f24c 331a 	movw	r3, #49946	; 0xc31a
   11076:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1107a:	2200      	movs	r2, #0
   1107c:	701a      	strb	r2, [r3, #0]
   1107e:	f242 0338 	movw	r3, #8248	; 0x2038
   11082:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11086:	f242 0238 	movw	r2, #8248	; 0x2038
   1108a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1108e:	7812      	ldrb	r2, [r2, #0]
   11090:	b2d2      	uxtb	r2, r2
   11092:	f042 0201 	orr.w	r2, r2, #1
   11096:	b2d2      	uxtb	r2, r2
   11098:	701a      	strb	r2, [r3, #0]
   1109a:	f242 0339 	movw	r3, #8249	; 0x2039
   1109e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110a2:	f242 0239 	movw	r2, #8249	; 0x2039
   110a6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110aa:	7812      	ldrb	r2, [r2, #0]
   110ac:	b2d2      	uxtb	r2, r2
   110ae:	f042 0210 	orr.w	r2, r2, #16
   110b2:	b2d2      	uxtb	r2, r2
   110b4:	701a      	strb	r2, [r3, #0]
   110b6:	e00b      	b.n	110d0 <send_takeOff+0x408>
   110b8:	f24c 3318 	movw	r3, #49944	; 0xc318
   110bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110c0:	781b      	ldrb	r3, [r3, #0]
   110c2:	3301      	adds	r3, #1
   110c4:	b2da      	uxtb	r2, r3
   110c6:	f24c 3318 	movw	r3, #49944	; 0xc318
   110ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110ce:	701a      	strb	r2, [r3, #0]
     }
     gps_pos_available = FALSE; 
   110d0:	f24c 43ae 	movw	r3, #50350	; 0xc4ae
   110d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110d8:	2200      	movs	r2, #0
   110da:	701a      	strb	r2, [r3, #0]
  }
  //vPrintString("S_16 receive_gps_data_task end!\n\r");
}
   110dc:	bd80      	pop	{r7, pc}
   110de:	bf00      	nop
   110e0:	2004c2fb 	.word	0x2004c2fb
   110e4:	f3af 8000 	nop.w

000110e8 <modem_init>:
uint8_t    tx_byte;
uint8_t    tx_byte_idx;

uint8_t ck_a, ck_b;

void modem_init( void ) {
   110e8:	b480      	push	{r7}
   110ea:	af00      	add	r7, sp, #0
  /* 
     on >= V1.2 boards, 4MHz modem clock is generated
     by one PWM module.
  */
#if defined CTL_BRD_V1_2 || defined CTL_BRD_V1_2_1
  MODEM_OSC_DDR |= _BV(MODEM_OSC);
   110ec:	f242 0317 	movw	r3, #8215	; 0x2017
   110f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110f4:	f242 0217 	movw	r2, #8215	; 0x2017
   110f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110fc:	7812      	ldrb	r2, [r2, #0]
   110fe:	b2d2      	uxtb	r2, r2
   11100:	f042 0210 	orr.w	r2, r2, #16
   11104:	b2d2      	uxtb	r2, r2
   11106:	701a      	strb	r2, [r3, #0]
  OCR0 = 1; /* 4MhZ */
   11108:	f242 0331 	movw	r3, #8241	; 0x2031
   1110c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11110:	2201      	movs	r2, #1
   11112:	701a      	strb	r2, [r3, #0]
  TCCR0 = _BV(WGM01) | _BV(COM00) | _BV(CS00);
   11114:	f242 0333 	movw	r3, #8243	; 0x2033
   11118:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1111c:	2219      	movs	r2, #25
   1111e:	701a      	strb	r2, [r3, #0]
#endif

  /* setup TX_EN and TX_DATA pin as output */
  MODEM_TX_DDR |= _BV(MODEM_TX_EN) | _BV(MODEM_TX_DATA);
   11120:	f242 0311 	movw	r3, #8209	; 0x2011
   11124:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11128:	f242 0211 	movw	r2, #8209	; 0x2011
   1112c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11130:	7812      	ldrb	r2, [r2, #0]
   11132:	b2d2      	uxtb	r2, r2
   11134:	f062 023f 	orn	r2, r2, #63	; 0x3f
   11138:	b2d2      	uxtb	r2, r2
   1113a:	701a      	strb	r2, [r3, #0]
  /* data idles hight */
  sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   1113c:	f242 0312 	movw	r3, #8210	; 0x2012
   11140:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11144:	f242 0212 	movw	r2, #8210	; 0x2012
   11148:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1114c:	7812      	ldrb	r2, [r2, #0]
   1114e:	b2d2      	uxtb	r2, r2
   11150:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11154:	b2d2      	uxtb	r2, r2
   11156:	701a      	strb	r2, [r3, #0]
  /* enable transmitter */
  cbi(MODEM_TX_PORT, MODEM_TX_EN);
   11158:	f242 0312 	movw	r3, #8210	; 0x2012
   1115c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11160:	f242 0212 	movw	r2, #8210	; 0x2012
   11164:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11168:	7812      	ldrb	r2, [r2, #0]
   1116a:	b2d2      	uxtb	r2, r2
   1116c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11170:	b2d2      	uxtb	r2, r2
   11172:	701a      	strb	r2, [r3, #0]
  /* set interrupt on failing edge of clock */
  MODEM_CLK_INT_REG |=  MODEM_CLK_INT_CFG;
   11174:	f242 033a 	movw	r3, #8250	; 0x203a
   11178:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1117c:	f242 023a 	movw	r2, #8250	; 0x203a
   11180:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11184:	7812      	ldrb	r2, [r2, #0]
   11186:	b2d2      	uxtb	r2, r2
   11188:	f042 0202 	orr.w	r2, r2, #2
   1118c:	b2d2      	uxtb	r2, r2
   1118e:	701a      	strb	r2, [r3, #0]
}
   11190:	46bd      	mov	sp, r7
   11192:	f85d 7b04 	ldr.w	r7, [sp], #4
   11196:	4770      	bx	lr

00011198 <__vector_5>:

SIGNAL( MODEM_CLK_INT_SIG ) {
   11198:	b480      	push	{r7}
   1119a:	af00      	add	r7, sp, #0
  /*  start bit         */
  if (tx_byte_idx == 0)
   1119c:	f24c 431c 	movw	r3, #50204	; 0xc41c
   111a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111a4:	781b      	ldrb	r3, [r3, #0]
   111a6:	2b00      	cmp	r3, #0
   111a8:	d10e      	bne.n	111c8 <__vector_5+0x30>
    cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   111aa:	f242 0312 	movw	r3, #8210	; 0x2012
   111ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111b2:	f242 0212 	movw	r2, #8210	; 0x2012
   111b6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   111ba:	7812      	ldrb	r2, [r2, #0]
   111bc:	b2d2      	uxtb	r2, r2
   111be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   111c2:	b2d2      	uxtb	r2, r2
   111c4:	701a      	strb	r2, [r3, #0]
   111c6:	e047      	b.n	11258 <__vector_5+0xc0>
  /* 8 data bits        */ 
  else if (tx_byte_idx < 9) {
   111c8:	f24c 431c 	movw	r3, #50204	; 0xc41c
   111cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111d0:	781b      	ldrb	r3, [r3, #0]
   111d2:	2b08      	cmp	r3, #8
   111d4:	d832      	bhi.n	1123c <__vector_5+0xa4>
    if (tx_byte & 0x01)
   111d6:	f24c 431b 	movw	r3, #50203	; 0xc41b
   111da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111de:	781b      	ldrb	r3, [r3, #0]
   111e0:	f003 0301 	and.w	r3, r3, #1
   111e4:	2b00      	cmp	r3, #0
   111e6:	d00e      	beq.n	11206 <__vector_5+0x6e>
      sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   111e8:	f242 0312 	movw	r3, #8210	; 0x2012
   111ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111f0:	f242 0212 	movw	r2, #8210	; 0x2012
   111f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   111f8:	7812      	ldrb	r2, [r2, #0]
   111fa:	b2d2      	uxtb	r2, r2
   111fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11200:	b2d2      	uxtb	r2, r2
   11202:	701a      	strb	r2, [r3, #0]
   11204:	e00d      	b.n	11222 <__vector_5+0x8a>
    else
      cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   11206:	f242 0312 	movw	r3, #8210	; 0x2012
   1120a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1120e:	f242 0212 	movw	r2, #8210	; 0x2012
   11212:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11216:	7812      	ldrb	r2, [r2, #0]
   11218:	b2d2      	uxtb	r2, r2
   1121a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1121e:	b2d2      	uxtb	r2, r2
   11220:	701a      	strb	r2, [r3, #0]
    tx_byte >>= 1;
   11222:	f24c 431b 	movw	r3, #50203	; 0xc41b
   11226:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1122a:	781b      	ldrb	r3, [r3, #0]
   1122c:	085b      	lsrs	r3, r3, #1
   1122e:	b2da      	uxtb	r2, r3
   11230:	f24c 431b 	movw	r3, #50203	; 0xc41b
   11234:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11238:	701a      	strb	r2, [r3, #0]
   1123a:	e00d      	b.n	11258 <__vector_5+0xc0>
  }
  /* stop_bit           */
  else {
    sbi(MODEM_TX_PORT, MODEM_TX_DATA); 
   1123c:	f242 0312 	movw	r3, #8210	; 0x2012
   11240:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11244:	f242 0212 	movw	r2, #8210	; 0x2012
   11248:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1124c:	7812      	ldrb	r2, [r2, #0]
   1124e:	b2d2      	uxtb	r2, r2
   11250:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11254:	b2d2      	uxtb	r2, r2
   11256:	701a      	strb	r2, [r3, #0]
  }
  tx_byte_idx++;
   11258:	f24c 431c 	movw	r3, #50204	; 0xc41c
   1125c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11260:	781b      	ldrb	r3, [r3, #0]
   11262:	3301      	adds	r3, #1
   11264:	b2da      	uxtb	r2, r3
   11266:	f24c 431c 	movw	r3, #50204	; 0xc41c
   1126a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1126e:	701a      	strb	r2, [r3, #0]
  /* next byte          */
  if (tx_byte_idx >= 10) {
   11270:	f24c 431c 	movw	r3, #50204	; 0xc41c
   11274:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11278:	781b      	ldrb	r3, [r3, #0]
   1127a:	2b09      	cmp	r3, #9
   1127c:	d94d      	bls.n	1131a <__vector_5+0x182>
    /*  if we have nothing left to transmit */
    if( tx_head == tx_tail ) {
   1127e:	f24c 3319 	movw	r3, #49945	; 0xc319
   11282:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11286:	781a      	ldrb	r2, [r3, #0]
   11288:	f24c 331a 	movw	r3, #49946	; 0xc31a
   1128c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11290:	781b      	ldrb	r3, [r3, #0]
   11292:	b2db      	uxtb	r3, r3
   11294:	429a      	cmp	r2, r3
   11296:	d10e      	bne.n	112b6 <__vector_5+0x11e>
      /* disable clock interrupt            */
      cbi( EIMSK, MODEM_CLK_INT );
   11298:	f242 0339 	movw	r3, #8249	; 0x2039
   1129c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112a0:	f242 0239 	movw	r2, #8249	; 0x2039
   112a4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   112a8:	7812      	ldrb	r2, [r2, #0]
   112aa:	b2d2      	uxtb	r2, r2
   112ac:	f022 0210 	bic.w	r2, r2, #16
   112b0:	b2d2      	uxtb	r2, r2
   112b2:	701a      	strb	r2, [r3, #0]
   112b4:	e031      	b.n	1131a <__vector_5+0x182>
    } else {
      /* else load next byte                  */
      MODEM_LOAD_NEXT_BYTE();  
   112b6:	f24c 331a 	movw	r3, #49946	; 0xc31a
   112ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112be:	781b      	ldrb	r3, [r3, #0]
   112c0:	b2db      	uxtb	r3, r3
   112c2:	461a      	mov	r2, r3
   112c4:	f24c 331c 	movw	r3, #49948	; 0xc31c
   112c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112cc:	5c9a      	ldrb	r2, [r3, r2]
   112ce:	f24c 431b 	movw	r3, #50203	; 0xc41b
   112d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112d6:	701a      	strb	r2, [r3, #0]
   112d8:	f24c 431c 	movw	r3, #50204	; 0xc41c
   112dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112e0:	2200      	movs	r2, #0
   112e2:	701a      	strb	r2, [r3, #0]
   112e4:	f24c 331a 	movw	r3, #49946	; 0xc31a
   112e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112ec:	781b      	ldrb	r3, [r3, #0]
   112ee:	b2db      	uxtb	r3, r3
   112f0:	3301      	adds	r3, #1
   112f2:	b2da      	uxtb	r2, r3
   112f4:	f24c 331a 	movw	r3, #49946	; 0xc31a
   112f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112fc:	701a      	strb	r2, [r3, #0]
   112fe:	f24c 331a 	movw	r3, #49946	; 0xc31a
   11302:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11306:	781b      	ldrb	r3, [r3, #0]
   11308:	b2db      	uxtb	r3, r3
   1130a:	2bff      	cmp	r3, #255	; 0xff
   1130c:	d105      	bne.n	1131a <__vector_5+0x182>
   1130e:	f24c 331a 	movw	r3, #49946	; 0xc31a
   11312:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11316:	2200      	movs	r2, #0
   11318:	701a      	strb	r2, [r3, #0]
    }
  }
}
   1131a:	46bd      	mov	sp, r7
   1131c:	f85d 7b04 	ldr.w	r7, [sp], #4
   11320:	4770      	bx	lr
   11322:	bf00      	nop

00011324 <link_fbw_init>:
uint8_t link_fbw_fbw_nb_err;

static uint8_t idx_buf;
static uint8_t xor_in, xor_out;

void link_fbw_init(void) {
   11324:	b480      	push	{r7}
   11326:	af00      	add	r7, sp, #0
  link_fbw_nb_err;
   11328:	f24c 434f 	movw	r3, #50255	; 0xc44f
   1132c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11330:	781b      	ldrb	r3, [r3, #0]
  link_fbw_receive_complete = FALSE;  
   11332:	f240 533e 	movw	r3, #1342	; 0x53e
   11336:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1133a:	2200      	movs	r2, #0
   1133c:	701a      	strb	r2, [r3, #0]
}
   1133e:	46bd      	mov	sp, r7
   11340:	f85d 7b04 	ldr.w	r7, [sp], #4
   11344:	4770      	bx	lr
   11346:	bf00      	nop

00011348 <link_fbw_send>:

void link_fbw_send(void) {
   11348:	b480      	push	{r7}
   1134a:	b083      	sub	sp, #12
   1134c:	af00      	add	r7, sp, #0
    //vPrintString("S_7 link_fbw_send start! \n\r"); //SunnyBeike

    if (spi_cur_slave != SPI_NONE) 
   1134e:	f24c 4354 	movw	r3, #50260	; 0xc454
   11352:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11356:	781b      	ldrb	r3, [r3, #0]
   11358:	b2db      	uxtb	r3, r3
   1135a:	2b00      	cmp	r3, #0
   1135c:	d00c      	beq.n	11378 <link_fbw_send+0x30>
    {
        spi_nb_ovrn++;
   1135e:	f24c 4355 	movw	r3, #50261	; 0xc455
   11362:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11366:	781b      	ldrb	r3, [r3, #0]
   11368:	3301      	adds	r3, #1
   1136a:	b2da      	uxtb	r2, r3
   1136c:	f24c 4355 	movw	r3, #50261	; 0xc455
   11370:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11374:	701a      	strb	r2, [r3, #0]
        //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
        return;
   11376:	e064      	b.n	11442 <link_fbw_send+0xfa>
    }

    /* Enable SPI, Master, set clock rate fck/16 */ 
    SPI_START(_BV(SPE) | _BV(MSTR) | _BV(SPR0)); // | _BV(SPR1);
   11378:	f242 030d 	movw	r3, #8205	; 0x200d
   1137c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11380:	2251      	movs	r2, #81	; 0x51
   11382:	701a      	strb	r2, [r3, #0]
   11384:	f242 030e 	movw	r3, #8206	; 0x200e
   11388:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1138c:	781b      	ldrb	r3, [r3, #0]
   1138e:	b2db      	uxtb	r3, r3
   11390:	b2db      	uxtb	r3, r3
   11392:	b25b      	sxtb	r3, r3
   11394:	2b00      	cmp	r3, #0
   11396:	da05      	bge.n	113a4 <link_fbw_send+0x5c>
   11398:	f242 030f 	movw	r3, #8207	; 0x200f
   1139c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113a0:	781b      	ldrb	r3, [r3, #0]
   113a2:	71fb      	strb	r3, [r7, #7]
   113a4:	f242 030d 	movw	r3, #8205	; 0x200d
   113a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113ac:	f242 020d 	movw	r2, #8205	; 0x200d
   113b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   113b4:	7812      	ldrb	r2, [r2, #0]
   113b6:	b2d2      	uxtb	r2, r2
   113b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
   113bc:	b2d2      	uxtb	r2, r2
   113be:	701a      	strb	r2, [r3, #0]
    SPI_SELECT_SLAVE0();
   113c0:	f24c 4354 	movw	r3, #50260	; 0xc454
   113c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113c8:	2201      	movs	r2, #1
   113ca:	701a      	strb	r2, [r3, #0]
   113cc:	f242 0318 	movw	r3, #8216	; 0x2018
   113d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113d4:	f242 0218 	movw	r2, #8216	; 0x2018
   113d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   113dc:	7812      	ldrb	r2, [r2, #0]
   113de:	b2d2      	uxtb	r2, r2
   113e0:	f022 0201 	bic.w	r2, r2, #1
   113e4:	b2d2      	uxtb	r2, r2
   113e6:	701a      	strb	r2, [r3, #0]

    idx_buf = 0;
   113e8:	f24c 4351 	movw	r3, #50257	; 0xc451
   113ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113f0:	2200      	movs	r2, #0
   113f2:	701a      	strb	r2, [r3, #0]
    xor_in = 0;
   113f4:	f24c 4352 	movw	r3, #50258	; 0xc452
   113f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113fc:	2200      	movs	r2, #0
   113fe:	701a      	strb	r2, [r3, #0]
    xor_out = ((uint8_t*)&to_fbw)[idx_buf];
   11400:	f24c 4351 	movw	r3, #50257	; 0xc451
   11404:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11408:	781b      	ldrb	r3, [r3, #0]
   1140a:	461a      	mov	r2, r3
   1140c:	f24c 4338 	movw	r3, #50232	; 0xc438
   11410:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11414:	4413      	add	r3, r2
   11416:	781a      	ldrb	r2, [r3, #0]
   11418:	f24c 4353 	movw	r3, #50259	; 0xc453
   1141c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11420:	701a      	strb	r2, [r3, #0]
    SPDR = xor_out;
   11422:	f242 030f 	movw	r3, #8207	; 0x200f
   11426:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1142a:	f24c 4253 	movw	r2, #50259	; 0xc453
   1142e:	f2c2 0204 	movt	r2, #8196	; 0x2004
   11432:	7812      	ldrb	r2, [r2, #0]
   11434:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_valid = FALSE;
   11436:	f24c 434e 	movw	r3, #50254	; 0xc44e
   1143a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1143e:	2200      	movs	r2, #0
   11440:	701a      	strb	r2, [r3, #0]
    // Other bytes will follow SIG_SPI interrupts
    //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
}
   11442:	370c      	adds	r7, #12
   11444:	46bd      	mov	sp, r7
   11446:	f85d 7b04 	ldr.w	r7, [sp], #4
   1144a:	4770      	bx	lr

0001144c <link_fbw_on_spi_it>:

void link_fbw_on_spi_it( void ) {
   1144c:	b480      	push	{r7}
   1144e:	af00      	add	r7, sp, #0
  /* setup OCR1A to pop in 200 clock cycles */
  /* this leaves time for the slave (fbw)   */
  /* to process the byte we've sent and to  */
  /* prepare a new one to be sent           */
  OCR1A = TCNT1 + 200;
   11450:	f242 032a 	movw	r3, #8234	; 0x202a
   11454:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11458:	f242 022c 	movw	r2, #8236	; 0x202c
   1145c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11460:	8812      	ldrh	r2, [r2, #0]
   11462:	b292      	uxth	r2, r2
   11464:	32c8      	adds	r2, #200	; 0xc8
   11466:	b292      	uxth	r2, r2
   11468:	801a      	strh	r2, [r3, #0]
  /* clear interrupt flag  */
  sbi(TIFR, OCF1A);
   1146a:	f242 0336 	movw	r3, #8246	; 0x2036
   1146e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11472:	f242 0236 	movw	r2, #8246	; 0x2036
   11476:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1147a:	7812      	ldrb	r2, [r2, #0]
   1147c:	b2d2      	uxtb	r2, r2
   1147e:	f042 0210 	orr.w	r2, r2, #16
   11482:	b2d2      	uxtb	r2, r2
   11484:	701a      	strb	r2, [r3, #0]
  /* enable OC1A interrupt */
  sbi(TIMSK, OCIE1A);
   11486:	f242 0337 	movw	r3, #8247	; 0x2037
   1148a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1148e:	f242 0237 	movw	r2, #8247	; 0x2037
   11492:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11496:	7812      	ldrb	r2, [r2, #0]
   11498:	b2d2      	uxtb	r2, r2
   1149a:	f042 0210 	orr.w	r2, r2, #16
   1149e:	b2d2      	uxtb	r2, r2
   114a0:	701a      	strb	r2, [r3, #0]
}
   114a2:	46bd      	mov	sp, r7
   114a4:	f85d 7b04 	ldr.w	r7, [sp], #4
   114a8:	4770      	bx	lr
   114aa:	bf00      	nop

000114ac <__vector_12>:


/* send the next byte */
SIGNAL(SIG_OUTPUT_COMPARE1A) {
   114ac:	b480      	push	{r7}
   114ae:	b083      	sub	sp, #12
   114b0:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* disable OC1A interrupt */
  cbi(TIMSK, OCIE1A); 
   114b2:	f242 0337 	movw	r3, #8247	; 0x2037
   114b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114ba:	f242 0237 	movw	r2, #8247	; 0x2037
   114be:	f2c2 0200 	movt	r2, #8192	; 0x2000
   114c2:	7812      	ldrb	r2, [r2, #0]
   114c4:	b2d2      	uxtb	r2, r2
   114c6:	f022 0210 	bic.w	r2, r2, #16
   114ca:	b2d2      	uxtb	r2, r2
   114cc:	701a      	strb	r2, [r3, #0]

  idx_buf++;
   114ce:	f24c 4351 	movw	r3, #50257	; 0xc451
   114d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114d6:	781b      	ldrb	r3, [r3, #0]
   114d8:	3301      	adds	r3, #1
   114da:	b2da      	uxtb	r2, r3
   114dc:	f24c 4351 	movw	r3, #50257	; 0xc451
   114e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114e4:	701a      	strb	r2, [r3, #0]

  /* we have sent/received a complete frame */
  if (idx_buf == FRAME_LENGTH) {
   114e6:	f24c 4351 	movw	r3, #50257	; 0xc451
   114ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114ee:	781b      	ldrb	r3, [r3, #0]
   114f0:	2b17      	cmp	r3, #23
   114f2:	d162      	bne.n	115ba <__vector_12+0x10e>
    /* read checksum from receive register  */
    tmp = SPDR;
   114f4:	f242 030f 	movw	r3, #8207	; 0x200f
   114f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114fc:	781b      	ldrb	r3, [r3, #0]
   114fe:	71fb      	strb	r3, [r7, #7]
    /* notify valid frame                   */
    if (tmp == xor_in) {
   11500:	f24c 4352 	movw	r3, #50258	; 0xc452
   11504:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11508:	781b      	ldrb	r3, [r3, #0]
   1150a:	79fa      	ldrb	r2, [r7, #7]
   1150c:	429a      	cmp	r2, r3
   1150e:	d110      	bne.n	11532 <__vector_12+0x86>
      link_fbw_receive_valid = TRUE;
   11510:	f24c 434e 	movw	r3, #50254	; 0xc44e
   11514:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11518:	2201      	movs	r2, #1
   1151a:	701a      	strb	r2, [r3, #0]
      link_fbw_fbw_nb_err = from_fbw.nb_err;
   1151c:	f24c 4320 	movw	r3, #50208	; 0xc420
   11520:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11524:	7d1a      	ldrb	r2, [r3, #20]
   11526:	f24c 4350 	movw	r3, #50256	; 0xc450
   1152a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1152e:	701a      	strb	r2, [r3, #0]
   11530:	e00c      	b.n	1154c <__vector_12+0xa0>
    }
    else
      link_fbw_nb_err++;
   11532:	f24c 434f 	movw	r3, #50255	; 0xc44f
   11536:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1153a:	781b      	ldrb	r3, [r3, #0]
   1153c:	b2db      	uxtb	r3, r3
   1153e:	3301      	adds	r3, #1
   11540:	b2da      	uxtb	r2, r3
   11542:	f24c 434f 	movw	r3, #50255	; 0xc44f
   11546:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1154a:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_complete = TRUE;
   1154c:	f240 533e 	movw	r3, #1342	; 0x53e
   11550:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11554:	2201      	movs	r2, #1
   11556:	701a      	strb	r2, [r3, #0]
    /* unselect slave0                      */
    SPI_UNSELECT_SLAVE0();
   11558:	f24c 4354 	movw	r3, #50260	; 0xc454
   1155c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11560:	2200      	movs	r2, #0
   11562:	701a      	strb	r2, [r3, #0]
   11564:	f242 0318 	movw	r3, #8216	; 0x2018
   11568:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1156c:	f242 0218 	movw	r2, #8216	; 0x2018
   11570:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11574:	7812      	ldrb	r2, [r2, #0]
   11576:	b2d2      	uxtb	r2, r2
   11578:	f042 0201 	orr.w	r2, r2, #1
   1157c:	b2d2      	uxtb	r2, r2
   1157e:	701a      	strb	r2, [r3, #0]
    SPI_STOP();
   11580:	f242 030d 	movw	r3, #8205	; 0x200d
   11584:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11588:	f242 020d 	movw	r2, #8205	; 0x200d
   1158c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11590:	7812      	ldrb	r2, [r2, #0]
   11592:	b2d2      	uxtb	r2, r2
   11594:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11598:	b2d2      	uxtb	r2, r2
   1159a:	701a      	strb	r2, [r3, #0]
   1159c:	f242 030d 	movw	r3, #8205	; 0x200d
   115a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115a4:	f242 020d 	movw	r2, #8205	; 0x200d
   115a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   115ac:	7812      	ldrb	r2, [r2, #0]
   115ae:	b2d2      	uxtb	r2, r2
   115b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   115b4:	b2d2      	uxtb	r2, r2
   115b6:	701a      	strb	r2, [r3, #0]
    return;
   115b8:	e051      	b.n	1165e <__vector_12+0x1b2>
  }

  /* we are sending/receiving payload       */
  if (idx_buf < FRAME_LENGTH - 1) {
   115ba:	f24c 4351 	movw	r3, #50257	; 0xc451
   115be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115c2:	781b      	ldrb	r3, [r3, #0]
   115c4:	2b15      	cmp	r3, #21
   115c6:	d820      	bhi.n	1160a <__vector_12+0x15e>
    /* place new payload byte in send register */
    tmp = ((uint8_t*)&to_fbw)[idx_buf];
   115c8:	f24c 4351 	movw	r3, #50257	; 0xc451
   115cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115d0:	781b      	ldrb	r3, [r3, #0]
   115d2:	461a      	mov	r2, r3
   115d4:	f24c 4338 	movw	r3, #50232	; 0xc438
   115d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115dc:	4413      	add	r3, r2
   115de:	781b      	ldrb	r3, [r3, #0]
   115e0:	71fb      	strb	r3, [r7, #7]
    SPI_SEND(tmp);
   115e2:	f242 030f 	movw	r3, #8207	; 0x200f
   115e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115ea:	79fa      	ldrb	r2, [r7, #7]
   115ec:	701a      	strb	r2, [r3, #0]
    xor_out ^= tmp;
   115ee:	f24c 4353 	movw	r3, #50259	; 0xc453
   115f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115f6:	781a      	ldrb	r2, [r3, #0]
   115f8:	79fb      	ldrb	r3, [r7, #7]
   115fa:	4053      	eors	r3, r2
   115fc:	b2da      	uxtb	r2, r3
   115fe:	f24c 4353 	movw	r3, #50259	; 0xc453
   11602:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11606:	701a      	strb	r2, [r3, #0]
   11608:	e009      	b.n	1161e <__vector_12+0x172>
  } 
  /* we are done sending the payload */
  else { // idx_buf == FRAME_LENGTH - 1
    /* place checksum in send register */
    SPI_SEND(xor_out);
   1160a:	f242 030f 	movw	r3, #8207	; 0x200f
   1160e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11612:	f24c 4253 	movw	r2, #50259	; 0xc453
   11616:	f2c2 0204 	movt	r2, #8196	; 0x2004
   1161a:	7812      	ldrb	r2, [r2, #0]
   1161c:	701a      	strb	r2, [r3, #0]
  }
  
  /* read the byte from receive register */
  tmp = SPDR;
   1161e:	f242 030f 	movw	r3, #8207	; 0x200f
   11622:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11626:	781b      	ldrb	r3, [r3, #0]
   11628:	71fb      	strb	r3, [r7, #7]
  ((uint8_t*)&from_fbw)[idx_buf-1] = tmp;
   1162a:	f24c 4351 	movw	r3, #50257	; 0xc451
   1162e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11632:	781b      	ldrb	r3, [r3, #0]
   11634:	1e5a      	subs	r2, r3, #1
   11636:	f24c 4320 	movw	r3, #50208	; 0xc420
   1163a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1163e:	4413      	add	r3, r2
   11640:	79fa      	ldrb	r2, [r7, #7]
   11642:	701a      	strb	r2, [r3, #0]
  xor_in ^= tmp;
   11644:	f24c 4352 	movw	r3, #50258	; 0xc452
   11648:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1164c:	781a      	ldrb	r2, [r3, #0]
   1164e:	79fb      	ldrb	r3, [r7, #7]
   11650:	4053      	eors	r3, r2
   11652:	b2da      	uxtb	r2, r3
   11654:	f24c 4352 	movw	r3, #50258	; 0xc452
   11658:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1165c:	701a      	strb	r2, [r3, #0]
}
   1165e:	370c      	adds	r7, #12
   11660:	46bd      	mov	sp, r7
   11662:	f85d 7b04 	ldr.w	r7, [sp], #4
   11666:	4770      	bx	lr

00011668 <spi_init>:
#include "ad7714.h"

volatile uint8_t spi_cur_slave;
uint8_t spi_nb_ovrn;

void spi_init( void) {
   11668:	b480      	push	{r7}
   1166a:	af00      	add	r7, sp, #0
  /* Set MOSI and SCK output, all others input */ 
  SPI_DDR |= _BV(SPI_MOSI_PIN)| _BV(SPI_SCK_PIN); 
   1166c:	f242 0317 	movw	r3, #8215	; 0x2017
   11670:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11674:	f242 0217 	movw	r2, #8215	; 0x2017
   11678:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1167c:	7812      	ldrb	r2, [r2, #0]
   1167e:	b2d2      	uxtb	r2, r2
   11680:	f042 0206 	orr.w	r2, r2, #6
   11684:	b2d2      	uxtb	r2, r2
   11686:	701a      	strb	r2, [r3, #0]

  /* enable pull up for miso */
  //  SPI_PORT |= _BV(SPI_MISO_PIN);

  /* Set SS0 output */
  sbi( SPI_SS0_DDR, SPI_SS0_PIN);
   11688:	f242 0317 	movw	r3, #8215	; 0x2017
   1168c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11690:	f242 0217 	movw	r2, #8215	; 0x2017
   11694:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11698:	7812      	ldrb	r2, [r2, #0]
   1169a:	b2d2      	uxtb	r2, r2
   1169c:	f042 0201 	orr.w	r2, r2, #1
   116a0:	b2d2      	uxtb	r2, r2
   116a2:	701a      	strb	r2, [r3, #0]
  /* SS0 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE0();
   116a4:	f24c 4354 	movw	r3, #50260	; 0xc454
   116a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116ac:	2200      	movs	r2, #0
   116ae:	701a      	strb	r2, [r3, #0]
   116b0:	f242 0318 	movw	r3, #8216	; 0x2018
   116b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116b8:	f242 0218 	movw	r2, #8216	; 0x2018
   116bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   116c0:	7812      	ldrb	r2, [r2, #0]
   116c2:	b2d2      	uxtb	r2, r2
   116c4:	f042 0201 	orr.w	r2, r2, #1
   116c8:	b2d2      	uxtb	r2, r2
   116ca:	701a      	strb	r2, [r3, #0]

  /* Set SS1 output */
  sbi( SPI_SS1_DDR, SPI_SS1_PIN);
   116cc:	f242 0302 	movw	r3, #8194	; 0x2002
   116d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116d4:	f242 0202 	movw	r2, #8194	; 0x2002
   116d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   116dc:	7812      	ldrb	r2, [r2, #0]
   116de:	b2d2      	uxtb	r2, r2
   116e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
   116e4:	b2d2      	uxtb	r2, r2
   116e6:	701a      	strb	r2, [r3, #0]
  /* SS1 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE1();
   116e8:	f24c 4354 	movw	r3, #50260	; 0xc454
   116ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116f0:	2200      	movs	r2, #0
   116f2:	701a      	strb	r2, [r3, #0]
   116f4:	f242 0303 	movw	r3, #8195	; 0x2003
   116f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116fc:	f242 0203 	movw	r2, #8195	; 0x2003
   11700:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11704:	7812      	ldrb	r2, [r2, #0]
   11706:	b2d2      	uxtb	r2, r2
   11708:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1170c:	b2d2      	uxtb	r2, r2
   1170e:	701a      	strb	r2, [r3, #0]
  
  spi_cur_slave = SPI_NONE;
   11710:	f24c 4354 	movw	r3, #50260	; 0xc454
   11714:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11718:	2200      	movs	r2, #0
   1171a:	701a      	strb	r2, [r3, #0]
}
   1171c:	46bd      	mov	sp, r7
   1171e:	f85d 7b04 	ldr.w	r7, [sp], #4
   11722:	4770      	bx	lr

00011724 <__vector_17>:


SIGNAL(SIG_SPI) {
   11724:	b580      	push	{r7, lr}
   11726:	af00      	add	r7, sp, #0
  if (spi_cur_slave == SPI_SLAVE0)
   11728:	f24c 4354 	movw	r3, #50260	; 0xc454
   1172c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11730:	781b      	ldrb	r3, [r3, #0]
   11732:	b2db      	uxtb	r3, r3
   11734:	2b01      	cmp	r3, #1
   11736:	d102      	bne.n	1173e <__vector_17+0x1a>
    link_fbw_on_spi_it();
   11738:	f7ff fe88 	bl	1144c <link_fbw_on_spi_it>
   1173c:	e00b      	b.n	11756 <__vector_17+0x32>
  else
    fatal_error_nb++;
   1173e:	f24c 23f8 	movw	r3, #49912	; 0xc2f8
   11742:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11746:	781b      	ldrb	r3, [r3, #0]
   11748:	3301      	adds	r3, #1
   1174a:	b2da      	uxtb	r2, r3
   1174c:	f24c 23f8 	movw	r3, #49912	; 0xc2f8
   11750:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11754:	701a      	strb	r2, [r3, #0]
}
   11756:	bd80      	pop	{r7, pc}

00011758 <adc_buf_channel>:

uint16_t		adc_samples[ NB_ADC ];

static struct adc_buf* buffers[NB_ADC];

void adc_buf_channel(uint8_t adc_channel, struct adc_buf* s) {
   11758:	b480      	push	{r7}
   1175a:	b083      	sub	sp, #12
   1175c:	af00      	add	r7, sp, #0
   1175e:	4603      	mov	r3, r0
   11760:	6039      	str	r1, [r7, #0]
   11762:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   11764:	79fa      	ldrb	r2, [r7, #7]
   11766:	f24c 4368 	movw	r3, #50280	; 0xc468
   1176a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1176e:	6839      	ldr	r1, [r7, #0]
   11770:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   11774:	370c      	adds	r7, #12
   11776:	46bd      	mov	sp, r7
   11778:	f85d 7b04 	ldr.w	r7, [sp], #4
   1177c:	4770      	bx	lr
   1177e:	bf00      	nop

00011780 <adc_init>:

void 
adc_init( void )
{
   11780:	b480      	push	{r7}
   11782:	b083      	sub	sp, #12
   11784:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   11786:	f242 0362 	movw	r3, #8290	; 0x2062
   1178a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1178e:	2200      	movs	r2, #0
   11790:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   11792:	f242 0361 	movw	r3, #8289	; 0x2061
   11796:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1179a:	2200      	movs	r2, #0
   1179c:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref, which is tied to Vcc */
  ADMUX		= ANALOG_VREF;
   1179e:	f242 0307 	movw	r3, #8199	; 0x2007
   117a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117a6:	2240      	movs	r2, #64	; 0x40
   117a8:	701a      	strb	r2, [r3, #0]

  /* Turn off the analog comparator */
  sbi( ACSR, ACD );
   117aa:	f242 0308 	movw	r3, #8200	; 0x2008
   117ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117b2:	f242 0208 	movw	r2, #8200	; 0x2008
   117b6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   117ba:	7812      	ldrb	r2, [r2, #0]
   117bc:	b2d2      	uxtb	r2, r2
   117be:	f062 027f 	orn	r2, r2, #127	; 0x7f
   117c2:	b2d2      	uxtb	r2, r2
   117c4:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSR		= 0
   117c6:	f242 0306 	movw	r3, #8198	; 0x2006
   117ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117ce:	22cf      	movs	r2, #207	; 0xcf
   117d0:	701a      	strb	r2, [r3, #0]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   117d2:	2300      	movs	r3, #0
   117d4:	71fb      	strb	r3, [r7, #7]
   117d6:	e00a      	b.n	117ee <adc_init+0x6e>
    buffers[i] = (struct adc_buf*)0;
   117d8:	79fa      	ldrb	r2, [r7, #7]
   117da:	f24c 4368 	movw	r3, #50280	; 0xc468
   117de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117e2:	2100      	movs	r1, #0
   117e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   117e8:	79fb      	ldrb	r3, [r7, #7]
   117ea:	3301      	adds	r3, #1
   117ec:	71fb      	strb	r3, [r7, #7]
   117ee:	79fb      	ldrb	r3, [r7, #7]
   117f0:	2b07      	cmp	r3, #7
   117f2:	d9f1      	bls.n	117d8 <adc_init+0x58>
    buffers[i] = (struct adc_buf*)0;
}
   117f4:	370c      	adds	r7, #12
   117f6:	46bd      	mov	sp, r7
   117f8:	f85d 7b04 	ldr.w	r7, [sp], #4
   117fc:	4770      	bx	lr
   117fe:	bf00      	nop

00011800 <__vector_21>:
 *  8.913kHz on mega128@16MHz 1kHz/channel ??
*/


SIGNAL( SIG_ADC )
{
   11800:	b480      	push	{r7}
   11802:	b085      	sub	sp, #20
   11804:	af00      	add	r7, sp, #0
  uint8_t adc_input	= ADMUX & 0x7;
   11806:	f242 0307 	movw	r3, #8199	; 0x2007
   1180a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1180e:	781b      	ldrb	r3, [r3, #0]
   11810:	b2db      	uxtb	r3, r3
   11812:	f003 0307 	and.w	r3, r3, #7
   11816:	73fb      	strb	r3, [r7, #15]
  struct adc_buf* buf = buffers[adc_input];
   11818:	7bfa      	ldrb	r2, [r7, #15]
   1181a:	f24c 4368 	movw	r3, #50280	; 0xc468
   1181e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11826:	60bb      	str	r3, [r7, #8]
  uint16_t adc_value = ADCW;
   11828:	f242 0304 	movw	r3, #8196	; 0x2004
   1182c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11830:	881b      	ldrh	r3, [r3, #0]
   11832:	80fb      	strh	r3, [r7, #6]
  /* Store result */
  adc_samples[ adc_input ] = adc_value;
   11834:	7bfa      	ldrb	r2, [r7, #15]
   11836:	f24c 4358 	movw	r3, #50264	; 0xc458
   1183a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1183e:	88f9      	ldrh	r1, [r7, #6]
   11840:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  if (buf) {
   11844:	68bb      	ldr	r3, [r7, #8]
   11846:	2b00      	cmp	r3, #0
   11848:	d025      	beq.n	11896 <__vector_21+0x96>
    uint8_t new_head = buf->head + 1;
   1184a:	68bb      	ldr	r3, [r7, #8]
   1184c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   11850:	3301      	adds	r3, #1
   11852:	73bb      	strb	r3, [r7, #14]
    if (new_head >= AV_NB_SAMPLE) new_head = 0;
   11854:	7bbb      	ldrb	r3, [r7, #14]
   11856:	2b1f      	cmp	r3, #31
   11858:	d901      	bls.n	1185e <__vector_21+0x5e>
   1185a:	2300      	movs	r3, #0
   1185c:	73bb      	strb	r3, [r7, #14]
    buf->sum -= buf->values[new_head];
   1185e:	68bb      	ldr	r3, [r7, #8]
   11860:	881a      	ldrh	r2, [r3, #0]
   11862:	7bbb      	ldrb	r3, [r7, #14]
   11864:	68b9      	ldr	r1, [r7, #8]
   11866:	005b      	lsls	r3, r3, #1
   11868:	440b      	add	r3, r1
   1186a:	885b      	ldrh	r3, [r3, #2]
   1186c:	1ad3      	subs	r3, r2, r3
   1186e:	b29a      	uxth	r2, r3
   11870:	68bb      	ldr	r3, [r7, #8]
   11872:	801a      	strh	r2, [r3, #0]
    buf->values[new_head] = adc_value;
   11874:	7bbb      	ldrb	r3, [r7, #14]
   11876:	68ba      	ldr	r2, [r7, #8]
   11878:	005b      	lsls	r3, r3, #1
   1187a:	4413      	add	r3, r2
   1187c:	88fa      	ldrh	r2, [r7, #6]
   1187e:	805a      	strh	r2, [r3, #2]
    buf->sum += adc_value;
   11880:	68bb      	ldr	r3, [r7, #8]
   11882:	881a      	ldrh	r2, [r3, #0]
   11884:	88fb      	ldrh	r3, [r7, #6]
   11886:	4413      	add	r3, r2
   11888:	b29a      	uxth	r2, r3
   1188a:	68bb      	ldr	r3, [r7, #8]
   1188c:	801a      	strh	r2, [r3, #0]
    buf->head = new_head;   
   1188e:	68bb      	ldr	r3, [r7, #8]
   11890:	7bba      	ldrb	r2, [r7, #14]
   11892:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Find the next input */
  adc_input++;
   11896:	7bfb      	ldrb	r3, [r7, #15]
   11898:	3301      	adds	r3, #1
   1189a:	73fb      	strb	r3, [r7, #15]
  if( adc_input >= 8 )
   1189c:	7bfb      	ldrb	r3, [r7, #15]
   1189e:	2b07      	cmp	r3, #7
   118a0:	d901      	bls.n	118a6 <__vector_21+0xa6>
    adc_input = 0;
   118a2:	2300      	movs	r3, #0
   118a4:	73fb      	strb	r3, [r7, #15]
  /* Select it */
  ADMUX = adc_input | ANALOG_VREF;
   118a6:	f242 0307 	movw	r3, #8199	; 0x2007
   118aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118ae:	7bfa      	ldrb	r2, [r7, #15]
   118b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   118b4:	b2d2      	uxtb	r2, r2
   118b6:	701a      	strb	r2, [r3, #0]
  /* Restart the conversion */
  sbi( ADCSR, ADSC );
   118b8:	f242 0306 	movw	r3, #8198	; 0x2006
   118bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118c0:	f242 0206 	movw	r2, #8198	; 0x2006
   118c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   118c8:	7812      	ldrb	r2, [r2, #0]
   118ca:	b2d2      	uxtb	r2, r2
   118cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   118d0:	b2d2      	uxtb	r2, r2
   118d2:	701a      	strb	r2, [r3, #0]
  
}
   118d4:	3714      	adds	r7, #20
   118d6:	46bd      	mov	sp, r7
   118d8:	f85d 7b04 	ldr.w	r7, [sp], #4
   118dc:	4770      	bx	lr
   118de:	bf00      	nop

000118e0 <gps_init>:
static uint8_t  ubx_status;
static uint16_t ubx_len;
static uint8_t  ubx_msg_idx;
static uint8_t ck_a, ck_b, ubx_id, ubx_class;

void gps_init( void ) {
   118e0:	b580      	push	{r7, lr}
   118e2:	af00      	add	r7, sp, #0
#ifdef SIMUL
  uart0_init();
  simul_ir_roll = ir_roll_neutral;
  simul_ir_pitch = ir_pitch_neutral;
#else
  uart1_init();
   118e4:	f003 fca8 	bl	15238 <uart1_init>
#endif
  ubx_status = UNINIT;
   118e8:	f24c 53af 	movw	r3, #50607	; 0xc5af
   118ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118f0:	2200      	movs	r2, #0
   118f2:	701a      	strb	r2, [r3, #0]
}
   118f4:	bd80      	pop	{r7, pc}
   118f6:	bf00      	nop

000118f8 <parse_gps_msg>:

void parse_gps_msg( void ) {
   118f8:	b580      	push	{r7, lr}
   118fa:	af00      	add	r7, sp, #0
    ubx_class = 1;
    ubx_id = (ubx_id + 1)%0x40;
    */
    //end

  if (ubx_class == UBX_NAV_ID) {
   118fc:	f24c 53b6 	movw	r3, #50614	; 0xc5b6
   11900:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11904:	781b      	ldrb	r3, [r3, #0]
   11906:	2b01      	cmp	r3, #1
   11908:	f040 80f9 	bne.w	11afe <parse_gps_msg+0x206>
    if (ubx_id == UBX_NAV_POSUTM_ID) {
   1190c:	f24c 53b5 	movw	r3, #50613	; 0xc5b5
   11910:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11914:	781b      	ldrb	r3, [r3, #0]
   11916:	2b08      	cmp	r3, #8
   11918:	d128      	bne.n	1196c <parse_gps_msg+0x74>
      gps_utm_east = UBX_NAV_POSUTM_EAST(ubx_msg_buf);
   1191a:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   1191e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11922:	685a      	ldr	r2, [r3, #4]
   11924:	f24c 439c 	movw	r3, #50332	; 0xc49c
   11928:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1192c:	601a      	str	r2, [r3, #0]
      gps_utm_north = UBX_NAV_POSUTM_NORTH(ubx_msg_buf);
   1192e:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   11932:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11936:	689a      	ldr	r2, [r3, #8]
   11938:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   1193c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11940:	601a      	str	r2, [r3, #0]
      gps_falt = (float)UBX_NAV_POSUTM_ALT(ubx_msg_buf) / 100.;
   11942:	4b73      	ldr	r3, [pc, #460]	; (11b10 <parse_gps_msg+0x218>)
   11944:	681b      	ldr	r3, [r3, #0]
   11946:	4618      	mov	r0, r3
   11948:	f006 fdcc 	bl	184e4 <__aeabi_i2f>
   1194c:	4603      	mov	r3, r0
   1194e:	4618      	mov	r0, r3
   11950:	f04f 0100 	mov.w	r1, #0
   11954:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   11958:	f006 fecc 	bl	186f4 <__aeabi_fdiv>
   1195c:	4603      	mov	r3, r0
   1195e:	461a      	mov	r2, r3
   11960:	f24c 438c 	movw	r3, #50316	; 0xc48c
   11964:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11968:	601a      	str	r2, [r3, #0]
   1196a:	e0c8      	b.n	11afe <parse_gps_msg+0x206>
        gps_utm_east = gps_utm_east + 0.5;
        gps_utm_north = gps_utm_north + 0.4;
        gps_falt = gps_falt + 0.6;
        */
        // end
    } else if (ubx_id == UBX_NAV_STATUS_ID) {
   1196c:	f24c 53b5 	movw	r3, #50613	; 0xc5b5
   11970:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11974:	781b      	ldrb	r3, [r3, #0]
   11976:	2b03      	cmp	r3, #3
   11978:	d10a      	bne.n	11990 <parse_gps_msg+0x98>
      gps_mode = UBX_NAV_STATUS_GPSfix(ubx_msg_buf);
   1197a:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   1197e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11982:	791a      	ldrb	r2, [r3, #4]
   11984:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   11988:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1198c:	701a      	strb	r2, [r3, #0]
   1198e:	e0b6      	b.n	11afe <parse_gps_msg+0x206>
    } else if (ubx_id == UBX_NAV_VELNED_ID) {
   11990:	f24c 53b5 	movw	r3, #50613	; 0xc5b5
   11994:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11998:	781b      	ldrb	r3, [r3, #0]
   1199a:	2b12      	cmp	r3, #18
   1199c:	f040 80af 	bne.w	11afe <parse_gps_msg+0x206>
      gps_fspeed = ((float)UBX_NAV_VELNED_GSpeed(ubx_msg_buf)) / 1e2; 
   119a0:	4b5c      	ldr	r3, [pc, #368]	; (11b14 <parse_gps_msg+0x21c>)
   119a2:	681b      	ldr	r3, [r3, #0]
   119a4:	4618      	mov	r0, r3
   119a6:	f006 fd99 	bl	184dc <__aeabi_ui2f>
   119aa:	4603      	mov	r3, r0
   119ac:	4618      	mov	r0, r3
   119ae:	f04f 0100 	mov.w	r1, #0
   119b2:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   119b6:	f006 fe9d 	bl	186f4 <__aeabi_fdiv>
   119ba:	4603      	mov	r3, r0
   119bc:	461a      	mov	r2, r3
   119be:	f24c 4390 	movw	r3, #50320	; 0xc490
   119c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119c6:	601a      	str	r2, [r3, #0]
      gps_fclimb = ((float)UBX_NAV_VELNED_VEL_D(ubx_msg_buf)) / -1e2;
   119c8:	4b51      	ldr	r3, [pc, #324]	; (11b10 <parse_gps_msg+0x218>)
   119ca:	681b      	ldr	r3, [r3, #0]
   119cc:	4618      	mov	r0, r3
   119ce:	f006 fd89 	bl	184e4 <__aeabi_i2f>
   119d2:	4603      	mov	r3, r0
   119d4:	4618      	mov	r0, r3
   119d6:	f04f 0100 	mov.w	r1, #0
   119da:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   119de:	f006 fe89 	bl	186f4 <__aeabi_fdiv>
   119e2:	4603      	mov	r3, r0
   119e4:	461a      	mov	r2, r3
   119e6:	f24c 4394 	movw	r3, #50324	; 0xc494
   119ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119ee:	601a      	str	r2, [r3, #0]
      gps_fcourse = RadianOfDeg(((float)UBX_NAV_VELNED_Heading(ubx_msg_buf)) / 1e5);
   119f0:	4b49      	ldr	r3, [pc, #292]	; (11b18 <parse_gps_msg+0x220>)
   119f2:	681b      	ldr	r3, [r3, #0]
   119f4:	4618      	mov	r0, r3
   119f6:	f006 fd75 	bl	184e4 <__aeabi_i2f>
   119fa:	4603      	mov	r3, r0
   119fc:	4618      	mov	r0, r3
   119fe:	f006 f931 	bl	17c64 <__aeabi_f2d>
   11a02:	4602      	mov	r2, r0
   11a04:	460b      	mov	r3, r1
   11a06:	4610      	mov	r0, r2
   11a08:	4619      	mov	r1, r3
   11a0a:	a33d      	add	r3, pc, #244	; (adr r3, 11b00 <parse_gps_msg+0x208>)
   11a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   11a10:	f006 faa6 	bl	17f60 <__aeabi_ddiv>
   11a14:	4602      	mov	r2, r0
   11a16:	460b      	mov	r3, r1
   11a18:	4610      	mov	r0, r2
   11a1a:	4619      	mov	r1, r3
   11a1c:	f04f 0200 	mov.w	r2, #0
   11a20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   11a24:	f2c4 0366 	movt	r3, #16486	; 0x4066
   11a28:	f006 fa9a 	bl	17f60 <__aeabi_ddiv>
   11a2c:	4602      	mov	r2, r0
   11a2e:	460b      	mov	r3, r1
   11a30:	4610      	mov	r0, r2
   11a32:	4619      	mov	r1, r3
   11a34:	a334      	add	r3, pc, #208	; (adr r3, 11b08 <parse_gps_msg+0x210>)
   11a36:	e9d3 2300 	ldrd	r2, r3, [r3]
   11a3a:	f006 f967 	bl	17d0c <__aeabi_dmul>
   11a3e:	4602      	mov	r2, r0
   11a40:	460b      	mov	r3, r1
   11a42:	4610      	mov	r0, r2
   11a44:	4619      	mov	r1, r3
   11a46:	f006 fc43 	bl	182d0 <__aeabi_d2f>
   11a4a:	4602      	mov	r2, r0
   11a4c:	f24c 4398 	movw	r3, #50328	; 0xc498
   11a50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a54:	601a      	str	r2, [r3, #0]
      gps_ftow = ((float)UBX_NAV_VELNED_ITOW(ubx_msg_buf)) / 1e3;
   11a56:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   11a5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a5e:	681b      	ldr	r3, [r3, #0]
   11a60:	4618      	mov	r0, r3
   11a62:	f006 fd3b 	bl	184dc <__aeabi_ui2f>
   11a66:	4603      	mov	r3, r0
   11a68:	4618      	mov	r0, r3
   11a6a:	f04f 0100 	mov.w	r1, #0
   11a6e:	f2c4 417a 	movt	r1, #17530	; 0x447a
   11a72:	f006 fe3f 	bl	186f4 <__aeabi_fdiv>
   11a76:	4603      	mov	r3, r0
   11a78:	461a      	mov	r2, r3
   11a7a:	f24c 4388 	movw	r3, #50312	; 0xc488
   11a7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a82:	601a      	str	r2, [r3, #0]
        gps_fcourse = gps_fcourse + 0.2;
        gps_ftow = gps_ftow + 0.1;
        */
        // end
      
      gps_east = gps_utm_east / 100 - NAV_UTM_EAST0;
   11a84:	f24c 439c 	movw	r3, #50332	; 0xc49c
   11a88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a8c:	681a      	ldr	r2, [r3, #0]
   11a8e:	f248 531f 	movw	r3, #34079	; 0x851f
   11a92:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   11a96:	fb83 1302 	smull	r1, r3, r3, r2
   11a9a:	1159      	asrs	r1, r3, #5
   11a9c:	17d3      	asrs	r3, r2, #31
   11a9e:	1acb      	subs	r3, r1, r3
   11aa0:	f5a3 2313 	sub.w	r3, r3, #602112	; 0x93000
   11aa4:	f6a3 535a 	subw	r3, r3, #3418	; 0xd5a
   11aa8:	4618      	mov	r0, r3
   11aaa:	f006 fd1b 	bl	184e4 <__aeabi_i2f>
   11aae:	4602      	mov	r2, r0
   11ab0:	f24c 43a4 	movw	r3, #50340	; 0xc4a4
   11ab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ab8:	601a      	str	r2, [r3, #0]
      gps_north = gps_utm_north / 100 - NAV_UTM_NORTH0;
   11aba:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   11abe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ac2:	681a      	ldr	r2, [r3, #0]
   11ac4:	f248 531f 	movw	r3, #34079	; 0x851f
   11ac8:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   11acc:	fb83 1302 	smull	r1, r3, r3, r2
   11ad0:	1159      	asrs	r1, r3, #5
   11ad2:	17d3      	asrs	r3, r2, #31
   11ad4:	1aca      	subs	r2, r1, r3
   11ad6:	f648 231a 	movw	r3, #35354	; 0x8a1a
   11ada:	f6cf 73a7 	movt	r3, #65447	; 0xffa7
   11ade:	4413      	add	r3, r2
   11ae0:	4618      	mov	r0, r3
   11ae2:	f006 fcff 	bl	184e4 <__aeabi_i2f>
   11ae6:	4602      	mov	r2, r0
   11ae8:	f24c 43a8 	movw	r3, #50344	; 0xc4a8
   11aec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11af0:	601a      	str	r2, [r3, #0]
      
      
      gps_pos_available = TRUE; /* The 3 UBX messages are sent in one rafale */
   11af2:	f24c 43ae 	movw	r3, #50350	; 0xc4ae
   11af6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11afa:	2201      	movs	r2, #1
   11afc:	701a      	strb	r2, [r3, #0]
      simul_ir_roll = UBX_USR_IRSIM_ROLL(ubx_msg_buf);
      simul_ir_pitch = UBX_USR_IRSIM_PITCH(ubx_msg_buf);
    }
  }
#endif
}
   11afe:	bd80      	pop	{r7, pc}
   11b00:	00000000 	.word	0x00000000
   11b04:	40f86a00 	.word	0x40f86a00
   11b08:	5a7ed197 	.word	0x5a7ed197
   11b0c:	400921fb 	.word	0x400921fb
   11b10:	2004c4bc 	.word	0x2004c4bc
   11b14:	2004c4c4 	.word	0x2004c4c4
   11b18:	2004c4c8 	.word	0x2004c4c8

00011b1c <parse_ubx>:


uint8_t gps_nb_ovrn;


static void parse_ubx( uint8_t c ) {
   11b1c:	b480      	push	{r7}
   11b1e:	b083      	sub	sp, #12
   11b20:	af00      	add	r7, sp, #0
   11b22:	4603      	mov	r3, r0
   11b24:	71fb      	strb	r3, [r7, #7]
   if (ubx_status < GOT_PAYLOAD) {
   11b26:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11b2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b2e:	781b      	ldrb	r3, [r3, #0]
   11b30:	2b06      	cmp	r3, #6
   11b32:	d81d      	bhi.n	11b70 <parse_ubx+0x54>
    ck_a += c;
   11b34:	f24c 53b3 	movw	r3, #50611	; 0xc5b3
   11b38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b3c:	781a      	ldrb	r2, [r3, #0]
   11b3e:	79fb      	ldrb	r3, [r7, #7]
   11b40:	4413      	add	r3, r2
   11b42:	b2da      	uxtb	r2, r3
   11b44:	f24c 53b3 	movw	r3, #50611	; 0xc5b3
   11b48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b4c:	701a      	strb	r2, [r3, #0]
    ck_b += ck_a;
   11b4e:	f24c 53b4 	movw	r3, #50612	; 0xc5b4
   11b52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b56:	781a      	ldrb	r2, [r3, #0]
   11b58:	f24c 53b3 	movw	r3, #50611	; 0xc5b3
   11b5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b60:	781b      	ldrb	r3, [r3, #0]
   11b62:	4413      	add	r3, r2
   11b64:	b2da      	uxtb	r2, r3
   11b66:	f24c 53b4 	movw	r3, #50612	; 0xc5b4
   11b6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b6e:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
    break;
  }
#else */
  if (ubx_status == UNINIT)
   11b70:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11b74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b78:	781b      	ldrb	r3, [r3, #0]
   11b7a:	2b00      	cmp	r3, #0
   11b7c:	d110      	bne.n	11ba0 <parse_ubx+0x84>
  {
    if (c == UBX_SYNC1)
   11b7e:	79fb      	ldrb	r3, [r7, #7]
   11b80:	2bb5      	cmp	r3, #181	; 0xb5
   11b82:	f040 8135 	bne.w	11df0 <parse_ubx+0x2d4>
      ubx_status++;
   11b86:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11b8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b8e:	781b      	ldrb	r3, [r3, #0]
   11b90:	3301      	adds	r3, #1
   11b92:	b2da      	uxtb	r2, r3
   11b94:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11b98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b9c:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   11b9e:	e12f      	b.n	11e00 <parse_ubx+0x2e4>
  if (ubx_status == UNINIT)
  {
    if (c == UBX_SYNC1)
      ubx_status++;
  }
  else if (ubx_status == GOT_SYNC1)
   11ba0:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11ba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ba8:	781b      	ldrb	r3, [r3, #0]
   11baa:	2b01      	cmp	r3, #1
   11bac:	d11c      	bne.n	11be8 <parse_ubx+0xcc>
  {
    if (c != UBX_SYNC2)
   11bae:	79fb      	ldrb	r3, [r7, #7]
   11bb0:	2b62      	cmp	r3, #98	; 0x62
   11bb2:	d000      	beq.n	11bb6 <parse_ubx+0x9a>
      goto error;
   11bb4:	e11d      	b.n	11df2 <parse_ubx+0x2d6>
    ck_a = 0;
   11bb6:	f24c 53b3 	movw	r3, #50611	; 0xc5b3
   11bba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bbe:	2200      	movs	r2, #0
   11bc0:	701a      	strb	r2, [r3, #0]
    ck_b = 0;
   11bc2:	f24c 53b4 	movw	r3, #50612	; 0xc5b4
   11bc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bca:	2200      	movs	r2, #0
   11bcc:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11bce:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11bd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bd6:	781b      	ldrb	r3, [r3, #0]
   11bd8:	3301      	adds	r3, #1
   11bda:	b2da      	uxtb	r2, r3
   11bdc:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11be0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11be4:	701a      	strb	r2, [r3, #0]
   11be6:	e103      	b.n	11df0 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_SYNC2)
   11be8:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11bec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bf0:	781b      	ldrb	r3, [r3, #0]
   11bf2:	2b02      	cmp	r3, #2
   11bf4:	d127      	bne.n	11c46 <parse_ubx+0x12a>
  {
    if (gps_msg_received) {
   11bf6:	f24c 43ad 	movw	r3, #50349	; 0xc4ad
   11bfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bfe:	781b      	ldrb	r3, [r3, #0]
   11c00:	b2db      	uxtb	r3, r3
   11c02:	2b00      	cmp	r3, #0
   11c04:	d00c      	beq.n	11c20 <parse_ubx+0x104>
      /* Previous message has not yet been parsed: discard this one */
      gps_nb_ovrn++;
   11c06:	f24c 53b7 	movw	r3, #50615	; 0xc5b7
   11c0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c0e:	781b      	ldrb	r3, [r3, #0]
   11c10:	3301      	adds	r3, #1
   11c12:	b2da      	uxtb	r2, r3
   11c14:	f24c 53b7 	movw	r3, #50615	; 0xc5b7
   11c18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c1c:	701a      	strb	r2, [r3, #0]
      goto error;
   11c1e:	e0e8      	b.n	11df2 <parse_ubx+0x2d6>
    }
    ubx_class = c;
   11c20:	f24c 53b6 	movw	r3, #50614	; 0xc5b6
   11c24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c28:	79fa      	ldrb	r2, [r7, #7]
   11c2a:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11c2c:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11c30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c34:	781b      	ldrb	r3, [r3, #0]
   11c36:	3301      	adds	r3, #1
   11c38:	b2da      	uxtb	r2, r3
   11c3a:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11c3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c42:	701a      	strb	r2, [r3, #0]
   11c44:	e0d4      	b.n	11df0 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CLASS)
   11c46:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11c4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c4e:	781b      	ldrb	r3, [r3, #0]
   11c50:	2b03      	cmp	r3, #3
   11c52:	d112      	bne.n	11c7a <parse_ubx+0x15e>
  {
    ubx_id = c;
   11c54:	f24c 53b5 	movw	r3, #50613	; 0xc5b5
   11c58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c5c:	79fa      	ldrb	r2, [r7, #7]
   11c5e:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11c60:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11c64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c68:	781b      	ldrb	r3, [r3, #0]
   11c6a:	3301      	adds	r3, #1
   11c6c:	b2da      	uxtb	r2, r3
   11c6e:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11c72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c76:	701a      	strb	r2, [r3, #0]
   11c78:	e0ba      	b.n	11df0 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_ID)
   11c7a:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11c7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c82:	781b      	ldrb	r3, [r3, #0]
   11c84:	2b04      	cmp	r3, #4
   11c86:	d113      	bne.n	11cb0 <parse_ubx+0x194>
  {
    ubx_len = c;
   11c88:	79fb      	ldrb	r3, [r7, #7]
   11c8a:	b29a      	uxth	r2, r3
   11c8c:	f24c 53b0 	movw	r3, #50608	; 0xc5b0
   11c90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c94:	801a      	strh	r2, [r3, #0]
    ubx_status++;
   11c96:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11c9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c9e:	781b      	ldrb	r3, [r3, #0]
   11ca0:	3301      	adds	r3, #1
   11ca2:	b2da      	uxtb	r2, r3
   11ca4:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11ca8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cac:	701a      	strb	r2, [r3, #0]
   11cae:	e09f      	b.n	11df0 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN1)
   11cb0:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11cb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cb8:	781b      	ldrb	r3, [r3, #0]
   11cba:	2b05      	cmp	r3, #5
   11cbc:	d12b      	bne.n	11d16 <parse_ubx+0x1fa>
  {
    ubx_len |= (c<<8);
   11cbe:	79fb      	ldrb	r3, [r7, #7]
   11cc0:	021b      	lsls	r3, r3, #8
   11cc2:	b29a      	uxth	r2, r3
   11cc4:	f24c 53b0 	movw	r3, #50608	; 0xc5b0
   11cc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ccc:	881b      	ldrh	r3, [r3, #0]
   11cce:	b29b      	uxth	r3, r3
   11cd0:	4313      	orrs	r3, r2
   11cd2:	b29b      	uxth	r3, r3
   11cd4:	b29a      	uxth	r2, r3
   11cd6:	f24c 53b0 	movw	r3, #50608	; 0xc5b0
   11cda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cde:	801a      	strh	r2, [r3, #0]
    if (ubx_len > UBX_MAX_PAYLOAD)
   11ce0:	f24c 53b0 	movw	r3, #50608	; 0xc5b0
   11ce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ce8:	881b      	ldrh	r3, [r3, #0]
   11cea:	2bff      	cmp	r3, #255	; 0xff
   11cec:	d900      	bls.n	11cf0 <parse_ubx+0x1d4>
      goto error;
   11cee:	e080      	b.n	11df2 <parse_ubx+0x2d6>
    ubx_msg_idx = 0;
   11cf0:	f24c 53b2 	movw	r3, #50610	; 0xc5b2
   11cf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cf8:	2200      	movs	r2, #0
   11cfa:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11cfc:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11d00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d04:	781b      	ldrb	r3, [r3, #0]
   11d06:	3301      	adds	r3, #1
   11d08:	b2da      	uxtb	r2, r3
   11d0a:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11d0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d12:	701a      	strb	r2, [r3, #0]
   11d14:	e06c      	b.n	11df0 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN2)
   11d16:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11d1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d1e:	781b      	ldrb	r3, [r3, #0]
   11d20:	2b06      	cmp	r3, #6
   11d22:	d131      	bne.n	11d88 <parse_ubx+0x26c>
  {
    ubx_msg_buf[ubx_msg_idx] = c;
   11d24:	f24c 53b2 	movw	r3, #50610	; 0xc5b2
   11d28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d2c:	781b      	ldrb	r3, [r3, #0]
   11d2e:	461a      	mov	r2, r3
   11d30:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   11d34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d38:	79f9      	ldrb	r1, [r7, #7]
   11d3a:	5499      	strb	r1, [r3, r2]
    ubx_msg_idx++;
   11d3c:	f24c 53b2 	movw	r3, #50610	; 0xc5b2
   11d40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d44:	781b      	ldrb	r3, [r3, #0]
   11d46:	3301      	adds	r3, #1
   11d48:	b2da      	uxtb	r2, r3
   11d4a:	f24c 53b2 	movw	r3, #50610	; 0xc5b2
   11d4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d52:	701a      	strb	r2, [r3, #0]
    if (ubx_msg_idx >= ubx_len) {
   11d54:	f24c 53b2 	movw	r3, #50610	; 0xc5b2
   11d58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d5c:	781b      	ldrb	r3, [r3, #0]
   11d5e:	461a      	mov	r2, r3
   11d60:	f24c 53b0 	movw	r3, #50608	; 0xc5b0
   11d64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d68:	881b      	ldrh	r3, [r3, #0]
   11d6a:	429a      	cmp	r2, r3
   11d6c:	d340      	bcc.n	11df0 <parse_ubx+0x2d4>
      ubx_status++;
   11d6e:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11d72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d76:	781b      	ldrb	r3, [r3, #0]
   11d78:	3301      	adds	r3, #1
   11d7a:	b2da      	uxtb	r2, r3
   11d7c:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11d80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d84:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   11d86:	e03b      	b.n	11e00 <parse_ubx+0x2e4>
    ubx_msg_idx++;
    if (ubx_msg_idx >= ubx_len) {
      ubx_status++;
    }
  }
  else if (ubx_status == GOT_PAYLOAD)
   11d88:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11d8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d90:	781b      	ldrb	r3, [r3, #0]
   11d92:	2b07      	cmp	r3, #7
   11d94:	d115      	bne.n	11dc2 <parse_ubx+0x2a6>
  {
    if (c != ck_a)
   11d96:	f24c 53b3 	movw	r3, #50611	; 0xc5b3
   11d9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d9e:	781b      	ldrb	r3, [r3, #0]
   11da0:	79fa      	ldrb	r2, [r7, #7]
   11da2:	429a      	cmp	r2, r3
   11da4:	d000      	beq.n	11da8 <parse_ubx+0x28c>
      goto error;
   11da6:	e024      	b.n	11df2 <parse_ubx+0x2d6>
    ubx_status++;
   11da8:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11dac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11db0:	781b      	ldrb	r3, [r3, #0]
   11db2:	3301      	adds	r3, #1
   11db4:	b2da      	uxtb	r2, r3
   11db6:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11dba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11dbe:	701a      	strb	r2, [r3, #0]
   11dc0:	e016      	b.n	11df0 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CHECKSUM1)
   11dc2:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11dc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11dca:	781b      	ldrb	r3, [r3, #0]
   11dcc:	2b08      	cmp	r3, #8
   11dce:	d10f      	bne.n	11df0 <parse_ubx+0x2d4>
  {
    if (c != ck_b)
   11dd0:	f24c 53b4 	movw	r3, #50612	; 0xc5b4
   11dd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11dd8:	781b      	ldrb	r3, [r3, #0]
   11dda:	79fa      	ldrb	r2, [r7, #7]
   11ddc:	429a      	cmp	r2, r3
   11dde:	d000      	beq.n	11de2 <parse_ubx+0x2c6>
      goto error;
   11de0:	e007      	b.n	11df2 <parse_ubx+0x2d6>
    gps_msg_received = TRUE;
   11de2:	f24c 43ad 	movw	r3, #50349	; 0xc4ad
   11de6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11dea:	2201      	movs	r2, #1
   11dec:	701a      	strb	r2, [r3, #0]
    goto restart;
   11dee:	e000      	b.n	11df2 <parse_ubx+0x2d6>
  }
  else {}
//#endif
  return;
   11df0:	e006      	b.n	11e00 <parse_ubx+0x2e4>
 error:  
 restart:
  ubx_status = UNINIT;
   11df2:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11df6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11dfa:	2200      	movs	r2, #0
   11dfc:	701a      	strb	r2, [r3, #0]
  return;
   11dfe:	bf00      	nop
}
   11e00:	370c      	adds	r7, #12
   11e02:	46bd      	mov	sp, r7
   11e04:	f85d 7b04 	ldr.w	r7, [sp], #4
   11e08:	4770      	bx	lr
   11e0a:	bf00      	nop

00011e0c <__vector_30>:

#ifdef SIMUL
ReceiveUart0(parse_ubx);
#else
ReceiveUart1(parse_ubx);
   11e0c:	b580      	push	{r7, lr}
   11e0e:	b082      	sub	sp, #8
   11e10:	af00      	add	r7, sp, #0
   11e12:	f242 039c 	movw	r3, #8348	; 0x209c
   11e16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e1a:	781b      	ldrb	r3, [r3, #0]
   11e1c:	71fb      	strb	r3, [r7, #7]
   11e1e:	79fb      	ldrb	r3, [r7, #7]
   11e20:	4618      	mov	r0, r3
   11e22:	f7ff fe7b 	bl	11b1c <parse_ubx>
   11e26:	3708      	adds	r7, #8
   11e28:	46bd      	mov	sp, r7
   11e2a:	bd80      	pop	{r7, pc}
   11e2c:	f3af 8000 	nop.w

00011e30 <ir_init>:
float ir_rad_of_ir = IR_RAD_OF_IR_CONTRAST / IR_DEFAULT_CONTRAST;

static struct adc_buf buf_ir1;
static struct adc_buf buf_ir2;

void ir_init(void) {
   11e30:	b580      	push	{r7, lr}
   11e32:	af00      	add	r7, sp, #0
  RadOfIrFromConstrast(IR_DEFAULT_CONTRAST);
   11e34:	f240 5348 	movw	r3, #1352	; 0x548
   11e38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e3c:	f24c 228f 	movw	r2, #49807	; 0xc28f
   11e40:	f6c3 3275 	movt	r2, #15221	; 0x3b75
   11e44:	601a      	str	r2, [r3, #0]
  adc_buf_channel(ADC_CHANNEL_IR1, &buf_ir1);
   11e46:	2001      	movs	r0, #1
   11e48:	f24c 51bc 	movw	r1, #50620	; 0xc5bc
   11e4c:	f2c2 0104 	movt	r1, #8196	; 0x2004
   11e50:	f7ff fc82 	bl	11758 <adc_buf_channel>
  adc_buf_channel(ADC_CHANNEL_IR2, &buf_ir2);
   11e54:	2002      	movs	r0, #2
   11e56:	f24c 6100 	movw	r1, #50688	; 0xc600
   11e5a:	f2c2 0104 	movt	r1, #8196	; 0x2004
   11e5e:	f7ff fc7b 	bl	11758 <adc_buf_channel>
}
   11e62:	bd80      	pop	{r7, pc}

00011e64 <ir_update>:
int16_t x1 = 1;
int16_t x2 = 2;
*/
// end

void ir_update(void) {
   11e64:	b480      	push	{r7}
   11e66:	b083      	sub	sp, #12
   11e68:	af00      	add	r7, sp, #0
#ifndef SIMUL
  int16_t x1_mean = buf_ir1.sum/AV_NB_SAMPLE;
   11e6a:	f24c 53bc 	movw	r3, #50620	; 0xc5bc
   11e6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e72:	881b      	ldrh	r3, [r3, #0]
   11e74:	095b      	lsrs	r3, r3, #5
   11e76:	b29b      	uxth	r3, r3
   11e78:	80fb      	strh	r3, [r7, #6]
  int16_t x2_mean = buf_ir2.sum/AV_NB_SAMPLE;
   11e7a:	f24c 6300 	movw	r3, #50688	; 0xc600
   11e7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e82:	881b      	ldrh	r3, [r3, #0]
   11e84:	095b      	lsrs	r3, r3, #5
   11e86:	b29b      	uxth	r3, r3
   11e88:	80bb      	strh	r3, [r7, #4]
    if( x1 < -900 ) x1 = x2 % x1;
    x2_mean = x2 ++;
    if( x2 > 110 ) x2 = x1 % x2;
    */
    // end
  ir_roll = IR_RollOfIrs(x1_mean, x2_mean) - ir_roll_neutral;
   11e8a:	88fb      	ldrh	r3, [r7, #6]
   11e8c:	425b      	negs	r3, r3
   11e8e:	b29a      	uxth	r2, r3
   11e90:	88bb      	ldrh	r3, [r7, #4]
   11e92:	1ad3      	subs	r3, r2, r3
   11e94:	b29a      	uxth	r2, r3
   11e96:	f240 5342 	movw	r3, #1346	; 0x542
   11e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e9e:	881b      	ldrh	r3, [r3, #0]
   11ea0:	b29b      	uxth	r3, r3
   11ea2:	1ad3      	subs	r3, r2, r3
   11ea4:	b29b      	uxth	r3, r3
   11ea6:	b29a      	uxth	r2, r3
   11ea8:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
   11eac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11eb0:	801a      	strh	r2, [r3, #0]
  ir_pitch = IR_PitchOfIrs(x1_mean, x2_mean) - ir_pitch_neutral;
   11eb2:	88ba      	ldrh	r2, [r7, #4]
   11eb4:	88fb      	ldrh	r3, [r7, #6]
   11eb6:	1ad3      	subs	r3, r2, r3
   11eb8:	b29a      	uxth	r2, r3
   11eba:	f240 5344 	movw	r3, #1348	; 0x544
   11ebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ec2:	881b      	ldrh	r3, [r3, #0]
   11ec4:	b29b      	uxth	r3, r3
   11ec6:	1ad3      	subs	r3, r2, r3
   11ec8:	b29b      	uxth	r3, r3
   11eca:	b29a      	uxth	r2, r3
   11ecc:	f24c 53ba 	movw	r3, #50618	; 0xc5ba
   11ed0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ed4:	801a      	strh	r2, [r3, #0]
#else
  extern volatile int16_t simul_ir_roll, simul_ir_pitch;
  ir_roll = simul_ir_roll -  ir_roll_neutral; 
  ir_pitch = simul_ir_pitch - ir_pitch_neutral;  
#endif
}
   11ed6:	370c      	adds	r7, #12
   11ed8:	46bd      	mov	sp, r7
   11eda:	f85d 7b04 	ldr.w	r7, [sp], #4
   11ede:	4770      	bx	lr

00011ee0 <ir_gain_calib>:

/* 
   Contrast measurement
*/

void ir_gain_calib(void) {      // Plane nose down
   11ee0:	b580      	push	{r7, lr}
   11ee2:	af00      	add	r7, sp, #0
  /* plane nose down -> negativ value */
  ir_contrast = - ir_pitch;
   11ee4:	f24c 53ba 	movw	r3, #50618	; 0xc5ba
   11ee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11eec:	881b      	ldrh	r3, [r3, #0]
   11eee:	b29b      	uxth	r3, r3
   11ef0:	425b      	negs	r3, r3
   11ef2:	b29b      	uxth	r3, r3
   11ef4:	b29a      	uxth	r2, r3
   11ef6:	f240 5340 	movw	r3, #1344	; 0x540
   11efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11efe:	801a      	strh	r2, [r3, #0]
  RadOfIrFromConstrast(ir_contrast);
   11f00:	f240 5340 	movw	r3, #1344	; 0x540
   11f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f08:	881b      	ldrh	r3, [r3, #0]
   11f0a:	b21b      	sxth	r3, r3
   11f0c:	4618      	mov	r0, r3
   11f0e:	f005 fe97 	bl	17c40 <__aeabi_i2d>
   11f12:	4602      	mov	r2, r0
   11f14:	460b      	mov	r3, r1
   11f16:	f04f 0000 	mov.w	r0, #0
   11f1a:	f04f 0100 	mov.w	r1, #0
   11f1e:	f6c3 71e8 	movt	r1, #16360	; 0x3fe8
   11f22:	f006 f81d 	bl	17f60 <__aeabi_ddiv>
   11f26:	4602      	mov	r2, r0
   11f28:	460b      	mov	r3, r1
   11f2a:	4610      	mov	r0, r2
   11f2c:	4619      	mov	r1, r3
   11f2e:	f006 f9cf 	bl	182d0 <__aeabi_d2f>
   11f32:	4602      	mov	r2, r0
   11f34:	f240 5348 	movw	r3, #1352	; 0x548
   11f38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f3c:	601a      	str	r2, [r3, #0]
}
   11f3e:	bd80      	pop	{r7, pc}

00011f40 <roll_pitch_pid_run>:
float pitch_of_vz_pgain = CLIMB_PITCH_OF_VZ_PGAIN;
float pitch_of_vz = 0.;


/** \brief Computes ::desired_aileron and ::desired_elevator from attitude estimation and expected attitude. */
void roll_pitch_pid_run( void ) {
   11f40:	b590      	push	{r4, r7, lr}
   11f42:	b083      	sub	sp, #12
   11f44:	af00      	add	r7, sp, #0
  float err =  estimator_phi - desired_roll;
   11f46:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   11f4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f4e:	681a      	ldr	r2, [r3, #0]
   11f50:	f24c 6344 	movw	r3, #50756	; 0xc644
   11f54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f58:	681b      	ldr	r3, [r3, #0]
   11f5a:	4610      	mov	r0, r2
   11f5c:	4619      	mov	r1, r3
   11f5e:	f006 fa0b 	bl	18378 <__aeabi_fsub>
   11f62:	4603      	mov	r3, r0
   11f64:	607b      	str	r3, [r7, #4]
  desired_aileron = TRIM_PPRZ(roll_pgain * err);
   11f66:	f240 534c 	movw	r3, #1356	; 0x54c
   11f6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f6e:	681b      	ldr	r3, [r3, #0]
   11f70:	4618      	mov	r0, r3
   11f72:	6879      	ldr	r1, [r7, #4]
   11f74:	f006 fb0a 	bl	1858c <__aeabi_fmul>
   11f78:	4603      	mov	r3, r0
   11f7a:	4618      	mov	r0, r3
   11f7c:	f04f 0100 	mov.w	r1, #0
   11f80:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11f84:	f006 fca0 	bl	188c8 <__aeabi_fcmplt>
   11f88:	4603      	mov	r3, r0
   11f8a:	2b00      	cmp	r3, #0
   11f8c:	d002      	beq.n	11f94 <roll_pitch_pid_run+0x54>
   11f8e:	f64d 2280 	movw	r2, #55936	; 0xda80
   11f92:	e026      	b.n	11fe2 <roll_pitch_pid_run+0xa2>
   11f94:	f240 534c 	movw	r3, #1356	; 0x54c
   11f98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f9c:	681b      	ldr	r3, [r3, #0]
   11f9e:	4618      	mov	r0, r3
   11fa0:	6879      	ldr	r1, [r7, #4]
   11fa2:	f006 faf3 	bl	1858c <__aeabi_fmul>
   11fa6:	4603      	mov	r3, r0
   11fa8:	4618      	mov	r0, r3
   11faa:	f04f 0100 	mov.w	r1, #0
   11fae:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11fb2:	f006 fca7 	bl	18904 <__aeabi_fcmpgt>
   11fb6:	4603      	mov	r3, r0
   11fb8:	2b00      	cmp	r3, #0
   11fba:	d002      	beq.n	11fc2 <roll_pitch_pid_run+0x82>
   11fbc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11fc0:	e00e      	b.n	11fe0 <roll_pitch_pid_run+0xa0>
   11fc2:	f240 534c 	movw	r3, #1356	; 0x54c
   11fc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fca:	681b      	ldr	r3, [r3, #0]
   11fcc:	4618      	mov	r0, r3
   11fce:	6879      	ldr	r1, [r7, #4]
   11fd0:	f006 fadc 	bl	1858c <__aeabi_fmul>
   11fd4:	4603      	mov	r3, r0
   11fd6:	4618      	mov	r0, r3
   11fd8:	f006 fc9e 	bl	18918 <__aeabi_f2iz>
   11fdc:	4603      	mov	r3, r0
   11fde:	b29b      	uxth	r3, r3
   11fe0:	b29a      	uxth	r2, r3
   11fe2:	f24c 634e 	movw	r3, #50766	; 0xc64e
   11fe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11fea:	801a      	strh	r2, [r3, #0]
  if (pitch_of_roll <0.)
   11fec:	f24c 6354 	movw	r3, #50772	; 0xc654
   11ff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ff4:	681b      	ldr	r3, [r3, #0]
   11ff6:	4618      	mov	r0, r3
   11ff8:	f04f 0100 	mov.w	r1, #0
   11ffc:	f006 fc64 	bl	188c8 <__aeabi_fcmplt>
   12000:	4603      	mov	r3, r0
   12002:	2b00      	cmp	r3, #0
   12004:	d006      	beq.n	12014 <roll_pitch_pid_run+0xd4>
    pitch_of_roll = 0.;
   12006:	f24c 6354 	movw	r3, #50772	; 0xc654
   1200a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1200e:	f04f 0200 	mov.w	r2, #0
   12012:	601a      	str	r2, [r3, #0]
  err = -(estimator_theta - desired_pitch - pitch_of_roll * fabs(estimator_phi));
   12014:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   12018:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1201c:	681a      	ldr	r2, [r3, #0]
   1201e:	f24c 6348 	movw	r3, #50760	; 0xc648
   12022:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12026:	681b      	ldr	r3, [r3, #0]
   12028:	4610      	mov	r0, r2
   1202a:	4619      	mov	r1, r3
   1202c:	f006 f9a4 	bl	18378 <__aeabi_fsub>
   12030:	4603      	mov	r3, r0
   12032:	461c      	mov	r4, r3
   12034:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   12038:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1203c:	681b      	ldr	r3, [r3, #0]
   1203e:	4618      	mov	r0, r3
   12040:	f04f 0100 	mov.w	r1, #0
   12044:	f006 fc40 	bl	188c8 <__aeabi_fcmplt>
   12048:	4603      	mov	r3, r0
   1204a:	2b00      	cmp	r3, #0
   1204c:	d007      	beq.n	1205e <roll_pitch_pid_run+0x11e>
   1204e:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   12052:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12056:	681b      	ldr	r3, [r3, #0]
   12058:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   1205c:	e004      	b.n	12068 <roll_pitch_pid_run+0x128>
   1205e:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   12062:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12066:	681a      	ldr	r2, [r3, #0]
   12068:	f24c 6354 	movw	r3, #50772	; 0xc654
   1206c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12070:	681b      	ldr	r3, [r3, #0]
   12072:	4610      	mov	r0, r2
   12074:	4619      	mov	r1, r3
   12076:	f006 fa89 	bl	1858c <__aeabi_fmul>
   1207a:	4603      	mov	r3, r0
   1207c:	4620      	mov	r0, r4
   1207e:	4619      	mov	r1, r3
   12080:	f006 f97a 	bl	18378 <__aeabi_fsub>
   12084:	4603      	mov	r3, r0
   12086:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   1208a:	607b      	str	r3, [r7, #4]
  desired_elevator = TRIM_PPRZ(pitch_pgain * err);
   1208c:	f240 5350 	movw	r3, #1360	; 0x550
   12090:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12094:	681b      	ldr	r3, [r3, #0]
   12096:	4618      	mov	r0, r3
   12098:	6879      	ldr	r1, [r7, #4]
   1209a:	f006 fa77 	bl	1858c <__aeabi_fmul>
   1209e:	4603      	mov	r3, r0
   120a0:	4618      	mov	r0, r3
   120a2:	f04f 0100 	mov.w	r1, #0
   120a6:	f2cc 6116 	movt	r1, #50710	; 0xc616
   120aa:	f006 fc0d 	bl	188c8 <__aeabi_fcmplt>
   120ae:	4603      	mov	r3, r0
   120b0:	2b00      	cmp	r3, #0
   120b2:	d002      	beq.n	120ba <roll_pitch_pid_run+0x17a>
   120b4:	f64d 2280 	movw	r2, #55936	; 0xda80
   120b8:	e026      	b.n	12108 <roll_pitch_pid_run+0x1c8>
   120ba:	f240 5350 	movw	r3, #1360	; 0x550
   120be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120c2:	681b      	ldr	r3, [r3, #0]
   120c4:	4618      	mov	r0, r3
   120c6:	6879      	ldr	r1, [r7, #4]
   120c8:	f006 fa60 	bl	1858c <__aeabi_fmul>
   120cc:	4603      	mov	r3, r0
   120ce:	4618      	mov	r0, r3
   120d0:	f04f 0100 	mov.w	r1, #0
   120d4:	f2c4 6116 	movt	r1, #17942	; 0x4616
   120d8:	f006 fc14 	bl	18904 <__aeabi_fcmpgt>
   120dc:	4603      	mov	r3, r0
   120de:	2b00      	cmp	r3, #0
   120e0:	d002      	beq.n	120e8 <roll_pitch_pid_run+0x1a8>
   120e2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   120e6:	e00e      	b.n	12106 <roll_pitch_pid_run+0x1c6>
   120e8:	f240 5350 	movw	r3, #1360	; 0x550
   120ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120f0:	681b      	ldr	r3, [r3, #0]
   120f2:	4618      	mov	r0, r3
   120f4:	6879      	ldr	r1, [r7, #4]
   120f6:	f006 fa49 	bl	1858c <__aeabi_fmul>
   120fa:	4603      	mov	r3, r0
   120fc:	4618      	mov	r0, r3
   120fe:	f006 fc0b 	bl	18918 <__aeabi_f2iz>
   12102:	4603      	mov	r3, r0
   12104:	b29b      	uxth	r3, r3
   12106:	b29a      	uxth	r2, r3
   12108:	f24c 6350 	movw	r3, #50768	; 0xc650
   1210c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12110:	801a      	strh	r2, [r3, #0]
}
   12112:	370c      	adds	r7, #12
   12114:	46bd      	mov	sp, r7
   12116:	bd90      	pop	{r4, r7, pc}

00012118 <course_pid_run>:

float course_pgain = COURSE_PGAIN;
float desired_course = 0.;
float max_roll = MAX_ROLL;

void course_pid_run( void ) {
   12118:	b580      	push	{r7, lr}
   1211a:	b082      	sub	sp, #8
   1211c:	af00      	add	r7, sp, #0
  float err = estimator_hspeed_dir - desired_course;
   1211e:	f64c 1308 	movw	r3, #51464	; 0xc908
   12122:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12126:	681a      	ldr	r2, [r3, #0]
   12128:	f24c 635c 	movw	r3, #50780	; 0xc65c
   1212c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12130:	681b      	ldr	r3, [r3, #0]
   12132:	4610      	mov	r0, r2
   12134:	4619      	mov	r1, r3
   12136:	f006 f91f 	bl	18378 <__aeabi_fsub>
   1213a:	4603      	mov	r3, r0
   1213c:	607b      	str	r3, [r7, #4]
  NORM_RAD_ANGLE(err);
   1213e:	e013      	b.n	12168 <course_pid_run+0x50>
   12140:	6878      	ldr	r0, [r7, #4]
   12142:	f005 fd8f 	bl	17c64 <__aeabi_f2d>
   12146:	4602      	mov	r2, r0
   12148:	460b      	mov	r3, r1
   1214a:	4610      	mov	r0, r2
   1214c:	4619      	mov	r1, r3
   1214e:	a348      	add	r3, pc, #288	; (adr r3, 12270 <course_pid_run+0x158>)
   12150:	e9d3 2300 	ldrd	r2, r3, [r3]
   12154:	f005 fc26 	bl	179a4 <__aeabi_dsub>
   12158:	4602      	mov	r2, r0
   1215a:	460b      	mov	r3, r1
   1215c:	4610      	mov	r0, r2
   1215e:	4619      	mov	r1, r3
   12160:	f006 f8b6 	bl	182d0 <__aeabi_d2f>
   12164:	4603      	mov	r3, r0
   12166:	607b      	str	r3, [r7, #4]
   12168:	6878      	ldr	r0, [r7, #4]
   1216a:	f005 fd7b 	bl	17c64 <__aeabi_f2d>
   1216e:	4602      	mov	r2, r0
   12170:	460b      	mov	r3, r1
   12172:	4610      	mov	r0, r2
   12174:	4619      	mov	r1, r3
   12176:	a340      	add	r3, pc, #256	; (adr r3, 12278 <course_pid_run+0x160>)
   12178:	e9d3 2300 	ldrd	r2, r3, [r3]
   1217c:	f006 f856 	bl	1822c <__aeabi_dcmpgt>
   12180:	4603      	mov	r3, r0
   12182:	2b00      	cmp	r3, #0
   12184:	d1dc      	bne.n	12140 <course_pid_run+0x28>
   12186:	e013      	b.n	121b0 <course_pid_run+0x98>
   12188:	6878      	ldr	r0, [r7, #4]
   1218a:	f005 fd6b 	bl	17c64 <__aeabi_f2d>
   1218e:	4602      	mov	r2, r0
   12190:	460b      	mov	r3, r1
   12192:	4610      	mov	r0, r2
   12194:	4619      	mov	r1, r3
   12196:	a336      	add	r3, pc, #216	; (adr r3, 12270 <course_pid_run+0x158>)
   12198:	e9d3 2300 	ldrd	r2, r3, [r3]
   1219c:	f005 fc04 	bl	179a8 <__adddf3>
   121a0:	4602      	mov	r2, r0
   121a2:	460b      	mov	r3, r1
   121a4:	4610      	mov	r0, r2
   121a6:	4619      	mov	r1, r3
   121a8:	f006 f892 	bl	182d0 <__aeabi_d2f>
   121ac:	4603      	mov	r3, r0
   121ae:	607b      	str	r3, [r7, #4]
   121b0:	6878      	ldr	r0, [r7, #4]
   121b2:	f005 fd57 	bl	17c64 <__aeabi_f2d>
   121b6:	4602      	mov	r2, r0
   121b8:	460b      	mov	r3, r1
   121ba:	4610      	mov	r0, r2
   121bc:	4619      	mov	r1, r3
   121be:	a330      	add	r3, pc, #192	; (adr r3, 12280 <course_pid_run+0x168>)
   121c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   121c4:	f006 f814 	bl	181f0 <__aeabi_dcmplt>
   121c8:	4603      	mov	r3, r0
   121ca:	2b00      	cmp	r3, #0
   121cc:	d1dc      	bne.n	12188 <course_pid_run+0x70>
  nav_desired_roll = course_pgain * err; //  * fspeed / AIR_SPEED;
   121ce:	f240 5358 	movw	r3, #1368	; 0x558
   121d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121d6:	681b      	ldr	r3, [r3, #0]
   121d8:	4618      	mov	r0, r3
   121da:	6879      	ldr	r1, [r7, #4]
   121dc:	f006 f9d6 	bl	1858c <__aeabi_fmul>
   121e0:	4603      	mov	r3, r0
   121e2:	461a      	mov	r2, r3
   121e4:	f24c 63a0 	movw	r3, #50848	; 0xc6a0
   121e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121ec:	601a      	str	r2, [r3, #0]
  if (nav_desired_roll > max_roll)
   121ee:	f24c 63a0 	movw	r3, #50848	; 0xc6a0
   121f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121f6:	681a      	ldr	r2, [r3, #0]
   121f8:	f240 535c 	movw	r3, #1372	; 0x55c
   121fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12200:	681b      	ldr	r3, [r3, #0]
   12202:	4610      	mov	r0, r2
   12204:	4619      	mov	r1, r3
   12206:	f006 fb7d 	bl	18904 <__aeabi_fcmpgt>
   1220a:	4603      	mov	r3, r0
   1220c:	2b00      	cmp	r3, #0
   1220e:	d00a      	beq.n	12226 <course_pid_run+0x10e>
    nav_desired_roll = max_roll;
   12210:	f240 535c 	movw	r3, #1372	; 0x55c
   12214:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12218:	681a      	ldr	r2, [r3, #0]
   1221a:	f24c 63a0 	movw	r3, #50848	; 0xc6a0
   1221e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12222:	601a      	str	r2, [r3, #0]
   12224:	e01e      	b.n	12264 <course_pid_run+0x14c>
  else if (nav_desired_roll < -max_roll)
   12226:	f240 535c 	movw	r3, #1372	; 0x55c
   1222a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1222e:	681b      	ldr	r3, [r3, #0]
   12230:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   12234:	f24c 63a0 	movw	r3, #50848	; 0xc6a0
   12238:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1223c:	681b      	ldr	r3, [r3, #0]
   1223e:	4610      	mov	r0, r2
   12240:	4619      	mov	r1, r3
   12242:	f006 fb5f 	bl	18904 <__aeabi_fcmpgt>
   12246:	4603      	mov	r3, r0
   12248:	2b00      	cmp	r3, #0
   1224a:	d00b      	beq.n	12264 <course_pid_run+0x14c>
    nav_desired_roll = -max_roll;
   1224c:	f240 535c 	movw	r3, #1372	; 0x55c
   12250:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12254:	681b      	ldr	r3, [r3, #0]
   12256:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   1225a:	f24c 63a0 	movw	r3, #50848	; 0xc6a0
   1225e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12262:	601a      	str	r2, [r3, #0]
}
   12264:	3708      	adds	r7, #8
   12266:	46bd      	mov	sp, r7
   12268:	bd80      	pop	{r7, pc}
   1226a:	bf00      	nop
   1226c:	f3af 8000 	nop.w
   12270:	54442d18 	.word	0x54442d18
   12274:	401921fb 	.word	0x401921fb
   12278:	54442d18 	.word	0x54442d18
   1227c:	400921fb 	.word	0x400921fb
   12280:	54442d18 	.word	0x54442d18
   12284:	c00921fb 	.word	0xc00921fb

00012288 <climb_pid_run>:

#define MAX_CLIMB_SUM_ERR 100
#define MAX_PITCH_CLIMB_SUM_ERR 100

/** \brief Computes desired_gaz and desired_pitch from desired_climb */
void climb_pid_run ( void ) {
   12288:	b5b0      	push	{r4, r5, r7, lr}
   1228a:	b082      	sub	sp, #8
   1228c:	af00      	add	r7, sp, #0
  float err  = estimator_z_dot - desired_climb;
   1228e:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   12292:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12296:	681a      	ldr	r2, [r3, #0]
   12298:	f24c 6360 	movw	r3, #50784	; 0xc660
   1229c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122a0:	681b      	ldr	r3, [r3, #0]
   122a2:	4610      	mov	r0, r2
   122a4:	4619      	mov	r1, r3
   122a6:	f006 f867 	bl	18378 <__aeabi_fsub>
   122aa:	4603      	mov	r3, r0
   122ac:	607b      	str	r3, [r7, #4]
  float fgaz;
  if (auto_pitch) { /* gaz constant */
   122ae:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   122b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122b6:	781b      	ldrb	r3, [r3, #0]
   122b8:	2b00      	cmp	r3, #0
   122ba:	f000 80a8 	beq.w	1240e <climb_pid_run+0x186>
    desired_gaz = nav_desired_gaz;
   122be:	f24c 6398 	movw	r3, #50840	; 0xc698
   122c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122c6:	881b      	ldrh	r3, [r3, #0]
   122c8:	b29a      	uxth	r2, r3
   122ca:	f24c 634c 	movw	r3, #50764	; 0xc64c
   122ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122d2:	801a      	strh	r2, [r3, #0]
    desired_pitch = climb_pitch_pgain * (err + climb_pitch_igain * climb_pitch_sum_err);
   122d4:	f240 5364 	movw	r3, #1380	; 0x564
   122d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122dc:	681a      	ldr	r2, [r3, #0]
   122de:	f24c 636c 	movw	r3, #50796	; 0xc66c
   122e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122e6:	681b      	ldr	r3, [r3, #0]
   122e8:	4610      	mov	r0, r2
   122ea:	4619      	mov	r1, r3
   122ec:	f006 f94e 	bl	1858c <__aeabi_fmul>
   122f0:	4603      	mov	r3, r0
   122f2:	4618      	mov	r0, r3
   122f4:	6879      	ldr	r1, [r7, #4]
   122f6:	f006 f841 	bl	1837c <__addsf3>
   122fa:	4603      	mov	r3, r0
   122fc:	461a      	mov	r2, r3
   122fe:	f240 5360 	movw	r3, #1376	; 0x560
   12302:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12306:	681b      	ldr	r3, [r3, #0]
   12308:	4610      	mov	r0, r2
   1230a:	4619      	mov	r1, r3
   1230c:	f006 f93e 	bl	1858c <__aeabi_fmul>
   12310:	4603      	mov	r3, r0
   12312:	461a      	mov	r2, r3
   12314:	f24c 6348 	movw	r3, #50760	; 0xc648
   12318:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1231c:	601a      	str	r2, [r3, #0]
    if (desired_pitch > max_pitch)
   1231e:	f24c 6348 	movw	r3, #50760	; 0xc648
   12322:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12326:	681a      	ldr	r2, [r3, #0]
   12328:	f240 5368 	movw	r3, #1384	; 0x568
   1232c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12330:	681b      	ldr	r3, [r3, #0]
   12332:	4610      	mov	r0, r2
   12334:	4619      	mov	r1, r3
   12336:	f006 fae5 	bl	18904 <__aeabi_fcmpgt>
   1233a:	4603      	mov	r3, r0
   1233c:	2b00      	cmp	r3, #0
   1233e:	d009      	beq.n	12354 <climb_pid_run+0xcc>
      desired_pitch = max_pitch;
   12340:	f240 5368 	movw	r3, #1384	; 0x568
   12344:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12348:	681a      	ldr	r2, [r3, #0]
   1234a:	f24c 6348 	movw	r3, #50760	; 0xc648
   1234e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12352:	601a      	str	r2, [r3, #0]
    if (desired_pitch < min_pitch)
   12354:	f24c 6348 	movw	r3, #50760	; 0xc648
   12358:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1235c:	681a      	ldr	r2, [r3, #0]
   1235e:	f240 536c 	movw	r3, #1388	; 0x56c
   12362:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12366:	681b      	ldr	r3, [r3, #0]
   12368:	4610      	mov	r0, r2
   1236a:	4619      	mov	r1, r3
   1236c:	f006 faac 	bl	188c8 <__aeabi_fcmplt>
   12370:	4603      	mov	r3, r0
   12372:	2b00      	cmp	r3, #0
   12374:	d009      	beq.n	1238a <climb_pid_run+0x102>
      desired_pitch = min_pitch;
   12376:	f240 536c 	movw	r3, #1388	; 0x56c
   1237a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1237e:	681a      	ldr	r2, [r3, #0]
   12380:	f24c 6348 	movw	r3, #50760	; 0xc648
   12384:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12388:	601a      	str	r2, [r3, #0]
    climb_pitch_sum_err += err;
   1238a:	f24c 636c 	movw	r3, #50796	; 0xc66c
   1238e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12392:	681b      	ldr	r3, [r3, #0]
   12394:	4618      	mov	r0, r3
   12396:	6879      	ldr	r1, [r7, #4]
   12398:	f005 fff0 	bl	1837c <__addsf3>
   1239c:	4603      	mov	r3, r0
   1239e:	461a      	mov	r2, r3
   123a0:	f24c 636c 	movw	r3, #50796	; 0xc66c
   123a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123a8:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err > MAX_PITCH_CLIMB_SUM_ERR)
   123aa:	f24c 636c 	movw	r3, #50796	; 0xc66c
   123ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123b2:	681b      	ldr	r3, [r3, #0]
   123b4:	4618      	mov	r0, r3
   123b6:	f04f 0100 	mov.w	r1, #0
   123ba:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   123be:	f006 faa1 	bl	18904 <__aeabi_fcmpgt>
   123c2:	4603      	mov	r3, r0
   123c4:	2b00      	cmp	r3, #0
   123c6:	d008      	beq.n	123da <climb_pid_run+0x152>
      climb_pitch_sum_err = MAX_PITCH_CLIMB_SUM_ERR;
   123c8:	f24c 636c 	movw	r3, #50796	; 0xc66c
   123cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123d0:	f04f 0200 	mov.w	r2, #0
   123d4:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   123d8:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err < - MAX_PITCH_CLIMB_SUM_ERR)
   123da:	f24c 636c 	movw	r3, #50796	; 0xc66c
   123de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123e2:	681b      	ldr	r3, [r3, #0]
   123e4:	4618      	mov	r0, r3
   123e6:	f04f 0100 	mov.w	r1, #0
   123ea:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   123ee:	f006 fa6b 	bl	188c8 <__aeabi_fcmplt>
   123f2:	4603      	mov	r3, r0
   123f4:	2b00      	cmp	r3, #0
   123f6:	d100      	bne.n	123fa <climb_pid_run+0x172>
   123f8:	e109      	b.n	1260e <climb_pid_run+0x386>
      climb_pitch_sum_err = - MAX_PITCH_CLIMB_SUM_ERR; 
   123fa:	f24c 636c 	movw	r3, #50796	; 0xc66c
   123fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12402:	f04f 0200 	mov.w	r2, #0
   12406:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   1240a:	601a      	str	r2, [r3, #0]
   1240c:	e0ff      	b.n	1260e <climb_pid_run+0x386>
  } else { /* pitch almost constant */
    /* pitch offset for climb */
    pitch_of_vz = (desired_climb > 0) ? desired_climb * pitch_of_vz_pgain : 0.;
   1240e:	f24c 6360 	movw	r3, #50784	; 0xc660
   12412:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12416:	681b      	ldr	r3, [r3, #0]
   12418:	4618      	mov	r0, r3
   1241a:	f04f 0100 	mov.w	r1, #0
   1241e:	f006 fa71 	bl	18904 <__aeabi_fcmpgt>
   12422:	4603      	mov	r3, r0
   12424:	2b00      	cmp	r3, #0
   12426:	d010      	beq.n	1244a <climb_pid_run+0x1c2>
   12428:	f24c 6360 	movw	r3, #50784	; 0xc660
   1242c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12430:	681a      	ldr	r2, [r3, #0]
   12432:	f240 5354 	movw	r3, #1364	; 0x554
   12436:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1243a:	681b      	ldr	r3, [r3, #0]
   1243c:	4610      	mov	r0, r2
   1243e:	4619      	mov	r1, r3
   12440:	f006 f8a4 	bl	1858c <__aeabi_fmul>
   12444:	4603      	mov	r3, r0
   12446:	461a      	mov	r2, r3
   12448:	e001      	b.n	1244e <climb_pid_run+0x1c6>
   1244a:	f04f 0200 	mov.w	r2, #0
   1244e:	f24c 6358 	movw	r3, #50776	; 0xc658
   12452:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12456:	601a      	str	r2, [r3, #0]
    fgaz = climb_pgain * (err + climb_igain * climb_sum_err) + CLIMB_LEVEL_GAZ + CLIMB_GAZ_OF_CLIMB*desired_climb;
   12458:	f64c 42cd 	movw	r2, #52429	; 0xcccd
   1245c:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
   12460:	f24c 6368 	movw	r3, #50792	; 0xc668
   12464:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12468:	681b      	ldr	r3, [r3, #0]
   1246a:	4610      	mov	r0, r2
   1246c:	4619      	mov	r1, r3
   1246e:	f006 f88d 	bl	1858c <__aeabi_fmul>
   12472:	4603      	mov	r3, r0
   12474:	4618      	mov	r0, r3
   12476:	6879      	ldr	r1, [r7, #4]
   12478:	f005 ff80 	bl	1837c <__addsf3>
   1247c:	4603      	mov	r3, r0
   1247e:	461a      	mov	r2, r3
   12480:	f24c 238f 	movw	r3, #49807	; 0xc28f
   12484:	f6cb 43f5 	movt	r3, #48373	; 0xbcf5
   12488:	4610      	mov	r0, r2
   1248a:	4619      	mov	r1, r3
   1248c:	f006 f87e 	bl	1858c <__aeabi_fmul>
   12490:	4603      	mov	r3, r0
   12492:	4618      	mov	r0, r3
   12494:	f005 fbe6 	bl	17c64 <__aeabi_f2d>
   12498:	4602      	mov	r2, r0
   1249a:	460b      	mov	r3, r1
   1249c:	4610      	mov	r0, r2
   1249e:	4619      	mov	r1, r3
   124a0:	a35d      	add	r3, pc, #372	; (adr r3, 12618 <climb_pid_run+0x390>)
   124a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   124a6:	f005 fa7f 	bl	179a8 <__adddf3>
   124aa:	4602      	mov	r2, r0
   124ac:	460b      	mov	r3, r1
   124ae:	4614      	mov	r4, r2
   124b0:	461d      	mov	r5, r3
   124b2:	f24c 6360 	movw	r3, #50784	; 0xc660
   124b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124ba:	681b      	ldr	r3, [r3, #0]
   124bc:	4618      	mov	r0, r3
   124be:	f005 fbd1 	bl	17c64 <__aeabi_f2d>
   124c2:	4602      	mov	r2, r0
   124c4:	460b      	mov	r3, r1
   124c6:	4610      	mov	r0, r2
   124c8:	4619      	mov	r1, r3
   124ca:	a355      	add	r3, pc, #340	; (adr r3, 12620 <climb_pid_run+0x398>)
   124cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   124d0:	f005 fc1c 	bl	17d0c <__aeabi_dmul>
   124d4:	4602      	mov	r2, r0
   124d6:	460b      	mov	r3, r1
   124d8:	4620      	mov	r0, r4
   124da:	4629      	mov	r1, r5
   124dc:	f005 fa64 	bl	179a8 <__adddf3>
   124e0:	4602      	mov	r2, r0
   124e2:	460b      	mov	r3, r1
   124e4:	4610      	mov	r0, r2
   124e6:	4619      	mov	r1, r3
   124e8:	f005 fef2 	bl	182d0 <__aeabi_d2f>
   124ec:	4603      	mov	r3, r0
   124ee:	603b      	str	r3, [r7, #0]
    climb_sum_err += err;
   124f0:	f24c 6368 	movw	r3, #50792	; 0xc668
   124f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124f8:	681b      	ldr	r3, [r3, #0]
   124fa:	4618      	mov	r0, r3
   124fc:	6879      	ldr	r1, [r7, #4]
   124fe:	f005 ff3d 	bl	1837c <__addsf3>
   12502:	4603      	mov	r3, r0
   12504:	461a      	mov	r2, r3
   12506:	f24c 6368 	movw	r3, #50792	; 0xc668
   1250a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1250e:	601a      	str	r2, [r3, #0]
    if (climb_sum_err > MAX_CLIMB_SUM_ERR) climb_sum_err = MAX_CLIMB_SUM_ERR;
   12510:	f24c 6368 	movw	r3, #50792	; 0xc668
   12514:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12518:	681b      	ldr	r3, [r3, #0]
   1251a:	4618      	mov	r0, r3
   1251c:	f04f 0100 	mov.w	r1, #0
   12520:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   12524:	f006 f9ee 	bl	18904 <__aeabi_fcmpgt>
   12528:	4603      	mov	r3, r0
   1252a:	2b00      	cmp	r3, #0
   1252c:	d008      	beq.n	12540 <climb_pid_run+0x2b8>
   1252e:	f24c 6368 	movw	r3, #50792	; 0xc668
   12532:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12536:	f04f 0200 	mov.w	r2, #0
   1253a:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   1253e:	601a      	str	r2, [r3, #0]
    if (climb_sum_err < - MAX_CLIMB_SUM_ERR) climb_sum_err = - MAX_CLIMB_SUM_ERR;
   12540:	f24c 6368 	movw	r3, #50792	; 0xc668
   12544:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12548:	681b      	ldr	r3, [r3, #0]
   1254a:	4618      	mov	r0, r3
   1254c:	f04f 0100 	mov.w	r1, #0
   12550:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   12554:	f006 f9b8 	bl	188c8 <__aeabi_fcmplt>
   12558:	4603      	mov	r3, r0
   1255a:	2b00      	cmp	r3, #0
   1255c:	d008      	beq.n	12570 <climb_pid_run+0x2e8>
   1255e:	f24c 6368 	movw	r3, #50792	; 0xc668
   12562:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12566:	f04f 0200 	mov.w	r2, #0
   1256a:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   1256e:	601a      	str	r2, [r3, #0]
    desired_gaz = TRIM_UPPRZ(fgaz * MAX_PPRZ);
   12570:	6838      	ldr	r0, [r7, #0]
   12572:	f04f 0100 	mov.w	r1, #0
   12576:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1257a:	f006 f807 	bl	1858c <__aeabi_fmul>
   1257e:	4603      	mov	r3, r0
   12580:	4618      	mov	r0, r3
   12582:	f04f 0100 	mov.w	r1, #0
   12586:	f006 f99f 	bl	188c8 <__aeabi_fcmplt>
   1258a:	4603      	mov	r3, r0
   1258c:	2b00      	cmp	r3, #0
   1258e:	d001      	beq.n	12594 <climb_pid_run+0x30c>
   12590:	2200      	movs	r2, #0
   12592:	e022      	b.n	125da <climb_pid_run+0x352>
   12594:	6838      	ldr	r0, [r7, #0]
   12596:	f04f 0100 	mov.w	r1, #0
   1259a:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1259e:	f005 fff5 	bl	1858c <__aeabi_fmul>
   125a2:	4603      	mov	r3, r0
   125a4:	4618      	mov	r0, r3
   125a6:	f04f 0100 	mov.w	r1, #0
   125aa:	f2c4 6116 	movt	r1, #17942	; 0x4616
   125ae:	f006 f9a9 	bl	18904 <__aeabi_fcmpgt>
   125b2:	4603      	mov	r3, r0
   125b4:	2b00      	cmp	r3, #0
   125b6:	d002      	beq.n	125be <climb_pid_run+0x336>
   125b8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   125bc:	e00c      	b.n	125d8 <climb_pid_run+0x350>
   125be:	6838      	ldr	r0, [r7, #0]
   125c0:	f04f 0100 	mov.w	r1, #0
   125c4:	f2c4 6116 	movt	r1, #17942	; 0x4616
   125c8:	f005 ffe0 	bl	1858c <__aeabi_fmul>
   125cc:	4603      	mov	r3, r0
   125ce:	4618      	mov	r0, r3
   125d0:	f006 f9a2 	bl	18918 <__aeabi_f2iz>
   125d4:	4603      	mov	r3, r0
   125d6:	b29b      	uxth	r3, r3
   125d8:	b29a      	uxth	r2, r3
   125da:	f24c 634c 	movw	r3, #50764	; 0xc64c
   125de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125e2:	801a      	strh	r2, [r3, #0]
    desired_pitch = nav_pitch + pitch_of_vz;
   125e4:	f24c 639c 	movw	r3, #50844	; 0xc69c
   125e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125ec:	681a      	ldr	r2, [r3, #0]
   125ee:	f24c 6358 	movw	r3, #50776	; 0xc658
   125f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125f6:	681b      	ldr	r3, [r3, #0]
   125f8:	4610      	mov	r0, r2
   125fa:	4619      	mov	r1, r3
   125fc:	f005 febe 	bl	1837c <__addsf3>
   12600:	4603      	mov	r3, r0
   12602:	461a      	mov	r2, r3
   12604:	f24c 6348 	movw	r3, #50760	; 0xc648
   12608:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1260c:	601a      	str	r2, [r3, #0]
  }
}
   1260e:	3708      	adds	r7, #8
   12610:	46bd      	mov	sp, r7
   12612:	bdb0      	pop	{r4, r5, r7, pc}
   12614:	f3af 8000 	nop.w
   12618:	3d70a3d7 	.word	0x3d70a3d7
   1261c:	3fd3d70a 	.word	0x3fd3d70a
   12620:	9999999a 	.word	0x9999999a
   12624:	3fc99999 	.word	0x3fc99999

00012628 <altitude_pid_run>:

float altitude_pgain = ALTITUDE_PGAIN;


void altitude_pid_run(void) {
   12628:	b580      	push	{r7, lr}
   1262a:	b082      	sub	sp, #8
   1262c:	af00      	add	r7, sp, #0
  float err = estimator_z - desired_altitude;
   1262e:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   12632:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12636:	681a      	ldr	r2, [r3, #0]
   12638:	f240 5374 	movw	r3, #1396	; 0x574
   1263c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12640:	681b      	ldr	r3, [r3, #0]
   12642:	4610      	mov	r0, r2
   12644:	4619      	mov	r1, r3
   12646:	f005 fe97 	bl	18378 <__aeabi_fsub>
   1264a:	4603      	mov	r3, r0
   1264c:	607b      	str	r3, [r7, #4]
  desired_climb = pre_climb + altitude_pgain * err;
   1264e:	f240 5370 	movw	r3, #1392	; 0x570
   12652:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12656:	681b      	ldr	r3, [r3, #0]
   12658:	4618      	mov	r0, r3
   1265a:	6879      	ldr	r1, [r7, #4]
   1265c:	f005 ff96 	bl	1858c <__aeabi_fmul>
   12660:	4603      	mov	r3, r0
   12662:	461a      	mov	r2, r3
   12664:	f24c 6364 	movw	r3, #50788	; 0xc664
   12668:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1266c:	681b      	ldr	r3, [r3, #0]
   1266e:	4610      	mov	r0, r2
   12670:	4619      	mov	r1, r3
   12672:	f005 fe83 	bl	1837c <__addsf3>
   12676:	4603      	mov	r3, r0
   12678:	461a      	mov	r2, r3
   1267a:	f24c 6360 	movw	r3, #50784	; 0xc660
   1267e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12682:	601a      	str	r2, [r3, #0]
  if (desired_climb < -CLIMB_MAX) desired_climb = -CLIMB_MAX;
   12684:	f24c 6360 	movw	r3, #50784	; 0xc660
   12688:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1268c:	681b      	ldr	r3, [r3, #0]
   1268e:	4618      	mov	r0, r3
   12690:	f04f 0100 	mov.w	r1, #0
   12694:	f6cb 7180 	movt	r1, #49024	; 0xbf80
   12698:	f006 f916 	bl	188c8 <__aeabi_fcmplt>
   1269c:	4603      	mov	r3, r0
   1269e:	2b00      	cmp	r3, #0
   126a0:	d008      	beq.n	126b4 <altitude_pid_run+0x8c>
   126a2:	f24c 6360 	movw	r3, #50784	; 0xc660
   126a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126aa:	f04f 0200 	mov.w	r2, #0
   126ae:	f6cb 7280 	movt	r2, #49024	; 0xbf80
   126b2:	601a      	str	r2, [r3, #0]
  if (desired_climb > CLIMB_MAX) desired_climb = CLIMB_MAX;
   126b4:	f24c 6360 	movw	r3, #50784	; 0xc660
   126b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126bc:	681b      	ldr	r3, [r3, #0]
   126be:	4618      	mov	r0, r3
   126c0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   126c4:	f006 f91e 	bl	18904 <__aeabi_fcmpgt>
   126c8:	4603      	mov	r3, r0
   126ca:	2b00      	cmp	r3, #0
   126cc:	d006      	beq.n	126dc <altitude_pid_run+0xb4>
   126ce:	f24c 6360 	movw	r3, #50784	; 0xc660
   126d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126d6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   126da:	601a      	str	r2, [r3, #0]
}
   126dc:	3708      	adds	r7, #8
   126de:	46bd      	mov	sp, r7
   126e0:	bd80      	pop	{r7, pc}
   126e2:	bf00      	nop
   126e4:	f3af 8000 	nop.w

000126e8 <auto_nav>:
#define GROUND_ALT 125.
#define SECURITY_ALT 150.
#define MAX_DIST_FROM_HOME 500.
#ifdef NAV_C

static inline void auto_nav(void) {
   126e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   126ea:	b08b      	sub	sp, #44	; 0x2c
   126ec:	af00      	add	r7, sp, #0
        NextBlock()
    }

}
#else*/
if(nav_block == 0)
   126ee:	f24c 6371 	movw	r3, #50801	; 0xc671
   126f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126f6:	781b      	ldrb	r3, [r3, #0]
   126f8:	2b00      	cmp	r3, #0
   126fa:	f040 8169 	bne.w	129d0 <auto_nav+0x2e8>
{ // init
    
    if (nav_stage == 0) 
   126fe:	f24c 6370 	movw	r3, #50800	; 0xc670
   12702:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12706:	781b      	ldrb	r3, [r3, #0]
   12708:	2b00      	cmp	r3, #0
   1270a:	d13c      	bne.n	12786 <auto_nav+0x9e>
    {
	Label(while_1)
	nav_stage=0;
   1270c:	f24c 6370 	movw	r3, #50800	; 0xc670
   12710:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12714:	2200      	movs	r2, #0
   12716:	701a      	strb	r2, [r3, #0]
	if (! (!(estimator_flight_time))) Goto(endwhile_2) 
   12718:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   1271c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12720:	881b      	ldrh	r3, [r3, #0]
   12722:	2b00      	cmp	r3, #0
   12724:	d000      	beq.n	12728 <auto_nav+0x40>
   12726:	e03d      	b.n	127a4 <auto_nav+0xbc>
	else NextStage(); 
   12728:	f24c 6370 	movw	r3, #50800	; 0xc670
   1272c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12730:	781b      	ldrb	r3, [r3, #0]
   12732:	3301      	adds	r3, #1
   12734:	b2da      	uxtb	r2, r3
   12736:	f24c 6370 	movw	r3, #50800	; 0xc670
   1273a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1273e:	701a      	strb	r2, [r3, #0]
   12740:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12744:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12748:	681a      	ldr	r2, [r3, #0]
   1274a:	f24c 6374 	movw	r3, #50804	; 0xc674
   1274e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12752:	601a      	str	r2, [r3, #0]
   12754:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12758:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1275c:	681a      	ldr	r2, [r3, #0]
   1275e:	f24c 6378 	movw	r3, #50808	; 0xc678
   12762:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12766:	601a      	str	r2, [r3, #0]
   12768:	f24c 6384 	movw	r3, #50820	; 0xc684
   1276c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12770:	2200      	movs	r2, #0
   12772:	801a      	strh	r2, [r3, #0]
   12774:	f24c 6388 	movw	r3, #50824	; 0xc688
   12778:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1277c:	f04f 0200 	mov.w	r2, #0
   12780:	601a      	str	r2, [r3, #0]
   12782:	f002 b883 	b.w	1488c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   12786:	f24c 6370 	movw	r3, #50800	; 0xc670
   1278a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1278e:	781b      	ldrb	r3, [r3, #0]
   12790:	2b01      	cmp	r3, #1
   12792:	d100      	bne.n	12796 <auto_nav+0xae>
    {   Goto(while_1)}
   12794:	e7ba      	b.n	1270c <auto_nav+0x24>
    else if (nav_stage == 2)
   12796:	f24c 6370 	movw	r3, #50800	; 0xc670
   1279a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1279e:	781b      	ldrb	r3, [r3, #0]
   127a0:	2b02      	cmp	r3, #2
   127a2:	d162      	bne.n	1286a <auto_nav+0x182>
    {
	Label(endwhile_2)
	nav_stage = 2;
   127a4:	f24c 6370 	movw	r3, #50800	; 0xc670
   127a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127ac:	2202      	movs	r2, #2
   127ae:	701a      	strb	r2, [r3, #0]
        if ((estimator_flight_time>8)) NextStage() else {
   127b0:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   127b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127b8:	881b      	ldrh	r3, [r3, #0]
   127ba:	2b08      	cmp	r3, #8
   127bc:	d92e      	bls.n	1281c <auto_nav+0x134>
   127be:	f24c 6370 	movw	r3, #50800	; 0xc670
   127c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127c6:	781b      	ldrb	r3, [r3, #0]
   127c8:	3301      	adds	r3, #1
   127ca:	b2da      	uxtb	r2, r3
   127cc:	f24c 6370 	movw	r3, #50800	; 0xc670
   127d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127d4:	701a      	strb	r2, [r3, #0]
   127d6:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   127da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127de:	681a      	ldr	r2, [r3, #0]
   127e0:	f24c 6374 	movw	r3, #50804	; 0xc674
   127e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127e8:	601a      	str	r2, [r3, #0]
   127ea:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   127ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127f2:	681a      	ldr	r2, [r3, #0]
   127f4:	f24c 6378 	movw	r3, #50808	; 0xc678
   127f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127fc:	601a      	str	r2, [r3, #0]
   127fe:	f24c 6384 	movw	r3, #50820	; 0xc684
   12802:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12806:	2200      	movs	r2, #0
   12808:	801a      	strh	r2, [r3, #0]
   1280a:	f24c 6388 	movw	r3, #50824	; 0xc688
   1280e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12812:	f04f 0200 	mov.w	r2, #0
   12816:	601a      	str	r2, [r3, #0]
   12818:	f002 b838 	b.w	1488c <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   1281c:	f24c 635c 	movw	r3, #50780	; 0xc65c
   12820:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12824:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   12828:	f2c4 0296 	movt	r2, #16534	; 0x4096
   1282c:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   1282e:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   12832:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12836:	2200      	movs	r2, #0
   12838:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.150000;
   1283a:	f24c 639c 	movw	r3, #50844	; 0xc69c
   1283e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12842:	f649 129a 	movw	r2, #39322	; 0x999a
   12846:	f6c3 6219 	movt	r2, #15897	; 0x3e19
   1284a:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_GAZ;
   1284c:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   12850:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12854:	2201      	movs	r2, #1
   12856:	701a      	strb	r2, [r3, #0]
          nav_desired_gaz = TRIM_UPPRZ(0.800000*MAX_PPRZ);
   12858:	f24c 6398 	movw	r3, #50840	; 0xc698
   1285c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12860:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
   12864:	801a      	strh	r2, [r3, #0]
        }
        return;
   12866:	f002 b811 	b.w	1488c <auto_nav+0x21a4>
     }
     else if (nav_stage == 3)
   1286a:	f24c 6370 	movw	r3, #50800	; 0xc670
   1286e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12872:	781b      	ldrb	r3, [r3, #0]
   12874:	2b03      	cmp	r3, #3
   12876:	d168      	bne.n	1294a <auto_nav+0x262>
     {
	nav_stage = 3;	
   12878:	f24c 6370 	movw	r3, #50800	; 0xc670
   1287c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12880:	2203      	movs	r2, #3
   12882:	701a      	strb	r2, [r3, #0]
        if ((estimator_z>SECURITY_ALT)) NextStage() else {
   12884:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   12888:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1288c:	681b      	ldr	r3, [r3, #0]
   1288e:	4618      	mov	r0, r3
   12890:	f04f 0100 	mov.w	r1, #0
   12894:	f2c4 3116 	movt	r1, #17174	; 0x4316
   12898:	f006 f834 	bl	18904 <__aeabi_fcmpgt>
   1289c:	4603      	mov	r3, r0
   1289e:	2b00      	cmp	r3, #0
   128a0:	d02e      	beq.n	12900 <auto_nav+0x218>
   128a2:	f24c 6370 	movw	r3, #50800	; 0xc670
   128a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128aa:	781b      	ldrb	r3, [r3, #0]
   128ac:	3301      	adds	r3, #1
   128ae:	b2da      	uxtb	r2, r3
   128b0:	f24c 6370 	movw	r3, #50800	; 0xc670
   128b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128b8:	701a      	strb	r2, [r3, #0]
   128ba:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   128be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128c2:	681a      	ldr	r2, [r3, #0]
   128c4:	f24c 6374 	movw	r3, #50804	; 0xc674
   128c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128cc:	601a      	str	r2, [r3, #0]
   128ce:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   128d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128d6:	681a      	ldr	r2, [r3, #0]
   128d8:	f24c 6378 	movw	r3, #50808	; 0xc678
   128dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128e0:	601a      	str	r2, [r3, #0]
   128e2:	f24c 6384 	movw	r3, #50820	; 0xc684
   128e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128ea:	2200      	movs	r2, #0
   128ec:	801a      	strh	r2, [r3, #0]
   128ee:	f24c 6388 	movw	r3, #50824	; 0xc688
   128f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128f6:	f04f 0200 	mov.w	r2, #0
   128fa:	601a      	str	r2, [r3, #0]
   128fc:	f001 bfc6 	b.w	1488c <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   12900:	f24c 635c 	movw	r3, #50780	; 0xc65c
   12904:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12908:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   1290c:	f2c4 0296 	movt	r2, #16534	; 0x4096
   12910:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   12912:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   12916:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1291a:	2200      	movs	r2, #0
   1291c:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   1291e:	f24c 639c 	movw	r3, #50844	; 0xc69c
   12922:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12926:	f04f 0200 	mov.w	r2, #0
   1292a:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_CLIMB;
   1292c:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   12930:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12934:	2202      	movs	r2, #2
   12936:	701a      	strb	r2, [r3, #0]
          desired_climb = 8.000000;
   12938:	f24c 6360 	movw	r3, #50784	; 0xc660
   1293c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12940:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12944:	601a      	str	r2, [r3, #0]
        }
        return;
   12946:	f001 bfa1 	b.w	1488c <auto_nav+0x21a4>
     }
     else if (nav_stage == 4)
   1294a:	f24c 6370 	movw	r3, #50800	; 0xc670
   1294e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12952:	781b      	ldrb	r3, [r3, #0]
   12954:	2b04      	cmp	r3, #4
   12956:	f041 8799 	bne.w	1488c <auto_nav+0x21a4>
        NextBlock()
   1295a:	f24c 6371 	movw	r3, #50801	; 0xc671
   1295e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12962:	781b      	ldrb	r3, [r3, #0]
   12964:	3301      	adds	r3, #1
   12966:	b2da      	uxtb	r2, r3
   12968:	f24c 6371 	movw	r3, #50801	; 0xc671
   1296c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12970:	701a      	strb	r2, [r3, #0]
   12972:	f24c 6370 	movw	r3, #50800	; 0xc670
   12976:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1297a:	2200      	movs	r2, #0
   1297c:	701a      	strb	r2, [r3, #0]
   1297e:	f24c 6386 	movw	r3, #50822	; 0xc686
   12982:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12986:	2200      	movs	r2, #0
   12988:	801a      	strh	r2, [r3, #0]
   1298a:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1298e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12992:	681a      	ldr	r2, [r3, #0]
   12994:	f24c 6374 	movw	r3, #50804	; 0xc674
   12998:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1299c:	601a      	str	r2, [r3, #0]
   1299e:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   129a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129a6:	681a      	ldr	r2, [r3, #0]
   129a8:	f24c 6378 	movw	r3, #50808	; 0xc678
   129ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129b0:	601a      	str	r2, [r3, #0]
   129b2:	f24c 6384 	movw	r3, #50820	; 0xc684
   129b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129ba:	2200      	movs	r2, #0
   129bc:	801a      	strh	r2, [r3, #0]
   129be:	f24c 6388 	movw	r3, #50824	; 0xc688
   129c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129c6:	f04f 0200 	mov.w	r2, #0
   129ca:	601a      	str	r2, [r3, #0]
   129cc:	f001 bf5e 	b.w	1488c <auto_nav+0x21a4>
     else { }
}
else if (nav_block == 1) // two
   129d0:	f24c 6371 	movw	r3, #50801	; 0xc671
   129d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129d8:	781b      	ldrb	r3, [r3, #0]
   129da:	2b01      	cmp	r3, #1
   129dc:	f040 81bc 	bne.w	12d58 <auto_nav+0x670>
{
    nav_block = 1;
   129e0:	f24c 6371 	movw	r3, #50801	; 0xc671
   129e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129e8:	2201      	movs	r2, #1
   129ea:	701a      	strb	r2, [r3, #0]
    if RcEvent1() 
   129ec:	f24c 3300 	movw	r3, #49920	; 0xc300
   129f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129f4:	781b      	ldrb	r3, [r3, #0]
   129f6:	2b00      	cmp	r3, #0
   129f8:	d007      	beq.n	12a0a <auto_nav+0x322>
   129fa:	f24c 3300 	movw	r3, #49920	; 0xc300
   129fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a02:	2200      	movs	r2, #0
   12a04:	701a      	strb	r2, [r3, #0]
   12a06:	2301      	movs	r3, #1
   12a08:	e000      	b.n	12a0c <auto_nav+0x324>
   12a0a:	2300      	movs	r3, #0
   12a0c:	2b00      	cmp	r3, #0
   12a0e:	d034      	beq.n	12a7a <auto_nav+0x392>
	{ GotoBlock(2) }
   12a10:	f24c 6371 	movw	r3, #50801	; 0xc671
   12a14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a18:	2202      	movs	r2, #2
   12a1a:	701a      	strb	r2, [r3, #0]
   12a1c:	f24c 6370 	movw	r3, #50800	; 0xc670
   12a20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a24:	2200      	movs	r2, #0
   12a26:	701a      	strb	r2, [r3, #0]
   12a28:	f24c 6386 	movw	r3, #50822	; 0xc686
   12a2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a30:	2200      	movs	r2, #0
   12a32:	801a      	strh	r2, [r3, #0]
   12a34:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12a38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a3c:	681a      	ldr	r2, [r3, #0]
   12a3e:	f24c 6374 	movw	r3, #50804	; 0xc674
   12a42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a46:	601a      	str	r2, [r3, #0]
   12a48:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12a4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a50:	681a      	ldr	r2, [r3, #0]
   12a52:	f24c 6378 	movw	r3, #50808	; 0xc678
   12a56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a5a:	601a      	str	r2, [r3, #0]
   12a5c:	f24c 6384 	movw	r3, #50820	; 0xc684
   12a60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a64:	2200      	movs	r2, #0
   12a66:	801a      	strh	r2, [r3, #0]
   12a68:	f24c 6388 	movw	r3, #50824	; 0xc688
   12a6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a70:	f04f 0200 	mov.w	r2, #0
   12a74:	601a      	str	r2, [r3, #0]
   12a76:	f001 bf09 	b.w	1488c <auto_nav+0x21a4>
    if(nav_stage == 0)
   12a7a:	f24c 6370 	movw	r3, #50800	; 0xc670
   12a7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a82:	781b      	ldrb	r3, [r3, #0]
   12a84:	2b00      	cmp	r3, #0
   12a86:	d12e      	bne.n	12ae6 <auto_nav+0x3fe>
    {
       Label(while_3)
       if (! (TRUE)) Goto(endwhile_4) else NextStage();
   12a88:	f24c 6370 	movw	r3, #50800	; 0xc670
   12a8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a90:	781b      	ldrb	r3, [r3, #0]
   12a92:	3301      	adds	r3, #1
   12a94:	b2da      	uxtb	r2, r3
   12a96:	f24c 6370 	movw	r3, #50800	; 0xc670
   12a9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a9e:	701a      	strb	r2, [r3, #0]
   12aa0:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12aa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12aa8:	681a      	ldr	r2, [r3, #0]
   12aaa:	f24c 6374 	movw	r3, #50804	; 0xc674
   12aae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ab2:	601a      	str	r2, [r3, #0]
   12ab4:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12ab8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12abc:	681a      	ldr	r2, [r3, #0]
   12abe:	f24c 6378 	movw	r3, #50808	; 0xc678
   12ac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ac6:	601a      	str	r2, [r3, #0]
   12ac8:	f24c 6384 	movw	r3, #50820	; 0xc684
   12acc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ad0:	2200      	movs	r2, #0
   12ad2:	801a      	strh	r2, [r3, #0]
   12ad4:	f24c 6388 	movw	r3, #50824	; 0xc688
   12ad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12adc:	f04f 0200 	mov.w	r2, #0
   12ae0:	601a      	str	r2, [r3, #0]
   12ae2:	f001 bed3 	b.w	1488c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   12ae6:	f24c 6370 	movw	r3, #50800	; 0xc670
   12aea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12aee:	781b      	ldrb	r3, [r3, #0]
   12af0:	2b01      	cmp	r3, #1
   12af2:	d169      	bne.n	12bc8 <auto_nav+0x4e0>
    {
	  nav_stage = 1;
   12af4:	f24c 6370 	movw	r3, #50800	; 0xc670
   12af8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12afc:	2201      	movs	r2, #1
   12afe:	701a      	strb	r2, [r3, #0]
          if (approaching(1)) NextStageFrom(1) else {
   12b00:	2001      	movs	r0, #1
   12b02:	f001 fed1 	bl	148a8 <approaching>
   12b06:	4603      	mov	r3, r0
   12b08:	2b00      	cmp	r3, #0
   12b0a:	d034      	beq.n	12b76 <auto_nav+0x48e>
   12b0c:	f24c 637c 	movw	r3, #50812	; 0xc67c
   12b10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b14:	2201      	movs	r2, #1
   12b16:	701a      	strb	r2, [r3, #0]
   12b18:	f24c 6370 	movw	r3, #50800	; 0xc670
   12b1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b20:	781b      	ldrb	r3, [r3, #0]
   12b22:	3301      	adds	r3, #1
   12b24:	b2da      	uxtb	r2, r3
   12b26:	f24c 6370 	movw	r3, #50800	; 0xc670
   12b2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b2e:	701a      	strb	r2, [r3, #0]
   12b30:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12b34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b38:	681a      	ldr	r2, [r3, #0]
   12b3a:	f24c 6374 	movw	r3, #50804	; 0xc674
   12b3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b42:	601a      	str	r2, [r3, #0]
   12b44:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12b48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b4c:	681a      	ldr	r2, [r3, #0]
   12b4e:	f24c 6378 	movw	r3, #50808	; 0xc678
   12b52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b56:	601a      	str	r2, [r3, #0]
   12b58:	f24c 6384 	movw	r3, #50820	; 0xc684
   12b5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b60:	2200      	movs	r2, #0
   12b62:	801a      	strh	r2, [r3, #0]
   12b64:	f24c 6388 	movw	r3, #50824	; 0xc688
   12b68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b6c:	f04f 0200 	mov.w	r2, #0
   12b70:	601a      	str	r2, [r3, #0]
   12b72:	f001 be8b 	b.w	1488c <auto_nav+0x21a4>
            fly_to(1);
   12b76:	2001      	movs	r0, #1
   12b78:	f001 ffca 	bl	14b10 <fly_to>
            auto_pitch = FALSE;
   12b7c:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   12b80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b84:	2200      	movs	r2, #0
   12b86:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12b88:	f24c 639c 	movw	r3, #50844	; 0xc69c
   12b8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b90:	f04f 0200 	mov.w	r2, #0
   12b94:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12b96:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   12b9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b9e:	2203      	movs	r2, #3
   12ba0:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12ba2:	f240 5378 	movw	r3, #1400	; 0x578
   12ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12baa:	695a      	ldr	r2, [r3, #20]
   12bac:	f240 5374 	movw	r3, #1396	; 0x574
   12bb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bb4:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12bb6:	f24c 6364 	movw	r3, #50788	; 0xc664
   12bba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bbe:	f04f 0200 	mov.w	r2, #0
   12bc2:	601a      	str	r2, [r3, #0]
          }
          return;
   12bc4:	f001 be62 	b.w	1488c <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12bc8:	f24c 6370 	movw	r3, #50800	; 0xc670
   12bcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bd0:	781b      	ldrb	r3, [r3, #0]
   12bd2:	2b02      	cmp	r3, #2
   12bd4:	d169      	bne.n	12caa <auto_nav+0x5c2>
     {
	  nav_stage = 2;
   12bd6:	f24c 6370 	movw	r3, #50800	; 0xc670
   12bda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bde:	2202      	movs	r2, #2
   12be0:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   12be2:	2004      	movs	r0, #4
   12be4:	f001 fe60 	bl	148a8 <approaching>
   12be8:	4603      	mov	r3, r0
   12bea:	2b00      	cmp	r3, #0
   12bec:	d034      	beq.n	12c58 <auto_nav+0x570>
   12bee:	f24c 637c 	movw	r3, #50812	; 0xc67c
   12bf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bf6:	2204      	movs	r2, #4
   12bf8:	701a      	strb	r2, [r3, #0]
   12bfa:	f24c 6370 	movw	r3, #50800	; 0xc670
   12bfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c02:	781b      	ldrb	r3, [r3, #0]
   12c04:	3301      	adds	r3, #1
   12c06:	b2da      	uxtb	r2, r3
   12c08:	f24c 6370 	movw	r3, #50800	; 0xc670
   12c0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c10:	701a      	strb	r2, [r3, #0]
   12c12:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12c16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c1a:	681a      	ldr	r2, [r3, #0]
   12c1c:	f24c 6374 	movw	r3, #50804	; 0xc674
   12c20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c24:	601a      	str	r2, [r3, #0]
   12c26:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12c2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c2e:	681a      	ldr	r2, [r3, #0]
   12c30:	f24c 6378 	movw	r3, #50808	; 0xc678
   12c34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c38:	601a      	str	r2, [r3, #0]
   12c3a:	f24c 6384 	movw	r3, #50820	; 0xc684
   12c3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c42:	2200      	movs	r2, #0
   12c44:	801a      	strh	r2, [r3, #0]
   12c46:	f24c 6388 	movw	r3, #50824	; 0xc688
   12c4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c4e:	f04f 0200 	mov.w	r2, #0
   12c52:	601a      	str	r2, [r3, #0]
   12c54:	f001 be1a 	b.w	1488c <auto_nav+0x21a4>
            fly_to(4);
   12c58:	2004      	movs	r0, #4
   12c5a:	f001 ff59 	bl	14b10 <fly_to>
            auto_pitch = FALSE;
   12c5e:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   12c62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c66:	2200      	movs	r2, #0
   12c68:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12c6a:	f24c 639c 	movw	r3, #50844	; 0xc69c
   12c6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c72:	f04f 0200 	mov.w	r2, #0
   12c76:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12c78:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   12c7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c80:	2203      	movs	r2, #3
   12c82:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   12c84:	f240 5378 	movw	r3, #1400	; 0x578
   12c88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   12c8e:	f240 5374 	movw	r3, #1396	; 0x574
   12c92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c96:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12c98:	f24c 6364 	movw	r3, #50788	; 0xc664
   12c9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ca0:	f04f 0200 	mov.w	r2, #0
   12ca4:	601a      	str	r2, [r3, #0]
          }
          return;
   12ca6:	f001 bdf1 	b.w	1488c <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12caa:	f24c 6370 	movw	r3, #50800	; 0xc670
   12cae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cb2:	781b      	ldrb	r3, [r3, #0]
   12cb4:	2b03      	cmp	r3, #3
   12cb6:	d106      	bne.n	12cc6 <auto_nav+0x5de>
      {
	  nav_stage = 3;
   12cb8:	f24c 6370 	movw	r3, #50800	; 0xc670
   12cbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cc0:	2203      	movs	r2, #3
   12cc2:	701a      	strb	r2, [r3, #0]
          Goto(while_3)
   12cc4:	e6e0      	b.n	12a88 <auto_nav+0x3a0>
      }
      else if (nav_stage == 4)
   12cc6:	f24c 6370 	movw	r3, #50800	; 0xc670
   12cca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cce:	781b      	ldrb	r3, [r3, #0]
   12cd0:	2b04      	cmp	r3, #4
   12cd2:	f041 85db 	bne.w	1488c <auto_nav+0x21a4>
      {
        Label(endwhile_4)
	nav_stage = 4;
   12cd6:	f24c 6370 	movw	r3, #50800	; 0xc670
   12cda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cde:	2204      	movs	r2, #4
   12ce0:	701a      	strb	r2, [r3, #0]
        NextBlock()
   12ce2:	f24c 6371 	movw	r3, #50801	; 0xc671
   12ce6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cea:	781b      	ldrb	r3, [r3, #0]
   12cec:	3301      	adds	r3, #1
   12cee:	b2da      	uxtb	r2, r3
   12cf0:	f24c 6371 	movw	r3, #50801	; 0xc671
   12cf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cf8:	701a      	strb	r2, [r3, #0]
   12cfa:	f24c 6370 	movw	r3, #50800	; 0xc670
   12cfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d02:	2200      	movs	r2, #0
   12d04:	701a      	strb	r2, [r3, #0]
   12d06:	f24c 6386 	movw	r3, #50822	; 0xc686
   12d0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d0e:	2200      	movs	r2, #0
   12d10:	801a      	strh	r2, [r3, #0]
   12d12:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12d16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d1a:	681a      	ldr	r2, [r3, #0]
   12d1c:	f24c 6374 	movw	r3, #50804	; 0xc674
   12d20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d24:	601a      	str	r2, [r3, #0]
   12d26:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12d2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d2e:	681a      	ldr	r2, [r3, #0]
   12d30:	f24c 6378 	movw	r3, #50808	; 0xc678
   12d34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d38:	601a      	str	r2, [r3, #0]
   12d3a:	f24c 6384 	movw	r3, #50820	; 0xc684
   12d3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d42:	2200      	movs	r2, #0
   12d44:	801a      	strh	r2, [r3, #0]
   12d46:	f24c 6388 	movw	r3, #50824	; 0xc688
   12d4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d4e:	f04f 0200 	mov.w	r2, #0
   12d52:	601a      	str	r2, [r3, #0]
   12d54:	f001 bd9a 	b.w	1488c <auto_nav+0x21a4>
      }
      else { }
}
else if (nav_block == 2) // height
   12d58:	f24c 6371 	movw	r3, #50801	; 0xc671
   12d5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d60:	781b      	ldrb	r3, [r3, #0]
   12d62:	2b02      	cmp	r3, #2
   12d64:	f040 8392 	bne.w	1348c <auto_nav+0xda4>
{
	nav_block = 2;
   12d68:	f24c 6371 	movw	r3, #50801	; 0xc671
   12d6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d70:	2202      	movs	r2, #2
   12d72:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(3) }
   12d74:	f24c 3300 	movw	r3, #49920	; 0xc300
   12d78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d7c:	781b      	ldrb	r3, [r3, #0]
   12d7e:	2b00      	cmp	r3, #0
   12d80:	d007      	beq.n	12d92 <auto_nav+0x6aa>
   12d82:	f24c 3300 	movw	r3, #49920	; 0xc300
   12d86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d8a:	2200      	movs	r2, #0
   12d8c:	701a      	strb	r2, [r3, #0]
   12d8e:	2301      	movs	r3, #1
   12d90:	e000      	b.n	12d94 <auto_nav+0x6ac>
   12d92:	2300      	movs	r3, #0
   12d94:	2b00      	cmp	r3, #0
   12d96:	d034      	beq.n	12e02 <auto_nav+0x71a>
   12d98:	f24c 6371 	movw	r3, #50801	; 0xc671
   12d9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12da0:	2203      	movs	r2, #3
   12da2:	701a      	strb	r2, [r3, #0]
   12da4:	f24c 6370 	movw	r3, #50800	; 0xc670
   12da8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dac:	2200      	movs	r2, #0
   12dae:	701a      	strb	r2, [r3, #0]
   12db0:	f24c 6386 	movw	r3, #50822	; 0xc686
   12db4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12db8:	2200      	movs	r2, #0
   12dba:	801a      	strh	r2, [r3, #0]
   12dbc:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12dc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dc4:	681a      	ldr	r2, [r3, #0]
   12dc6:	f24c 6374 	movw	r3, #50804	; 0xc674
   12dca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dce:	601a      	str	r2, [r3, #0]
   12dd0:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12dd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dd8:	681a      	ldr	r2, [r3, #0]
   12dda:	f24c 6378 	movw	r3, #50808	; 0xc678
   12dde:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12de2:	601a      	str	r2, [r3, #0]
   12de4:	f24c 6384 	movw	r3, #50820	; 0xc684
   12de8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dec:	2200      	movs	r2, #0
   12dee:	801a      	strh	r2, [r3, #0]
   12df0:	f24c 6388 	movw	r3, #50824	; 0xc688
   12df4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12df8:	f04f 0200 	mov.w	r2, #0
   12dfc:	601a      	str	r2, [r3, #0]
   12dfe:	f001 bd45 	b.w	1488c <auto_nav+0x21a4>
    
    if(nav_stage == 0)
   12e02:	f24c 6370 	movw	r3, #50800	; 0xc670
   12e06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e0a:	781b      	ldrb	r3, [r3, #0]
   12e0c:	2b00      	cmp	r3, #0
   12e0e:	d134      	bne.n	12e7a <auto_nav+0x792>
    {
       Label(while_5)
       nav_stage = 0;
   12e10:	f24c 6370 	movw	r3, #50800	; 0xc670
   12e14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e18:	2200      	movs	r2, #0
   12e1a:	701a      	strb	r2, [r3, #0]
       if (! (TRUE)) Goto(endwhile_6) else NextStage();
   12e1c:	f24c 6370 	movw	r3, #50800	; 0xc670
   12e20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e24:	781b      	ldrb	r3, [r3, #0]
   12e26:	3301      	adds	r3, #1
   12e28:	b2da      	uxtb	r2, r3
   12e2a:	f24c 6370 	movw	r3, #50800	; 0xc670
   12e2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e32:	701a      	strb	r2, [r3, #0]
   12e34:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12e38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e3c:	681a      	ldr	r2, [r3, #0]
   12e3e:	f24c 6374 	movw	r3, #50804	; 0xc674
   12e42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e46:	601a      	str	r2, [r3, #0]
   12e48:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12e4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e50:	681a      	ldr	r2, [r3, #0]
   12e52:	f24c 6378 	movw	r3, #50808	; 0xc678
   12e56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e5a:	601a      	str	r2, [r3, #0]
   12e5c:	f24c 6384 	movw	r3, #50820	; 0xc684
   12e60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e64:	2200      	movs	r2, #0
   12e66:	801a      	strh	r2, [r3, #0]
   12e68:	f24c 6388 	movw	r3, #50824	; 0xc688
   12e6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e70:	f04f 0200 	mov.w	r2, #0
   12e74:	601a      	str	r2, [r3, #0]
   12e76:	f001 bd09 	b.w	1488c <auto_nav+0x21a4>
    }
    else if(nav_stage == 1)
   12e7a:	f24c 6370 	movw	r3, #50800	; 0xc670
   12e7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e82:	781b      	ldrb	r3, [r3, #0]
   12e84:	2b01      	cmp	r3, #1
   12e86:	d169      	bne.n	12f5c <auto_nav+0x874>
    {
         nav_stage =1;
   12e88:	f24c 6370 	movw	r3, #50800	; 0xc670
   12e8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e90:	2201      	movs	r2, #1
   12e92:	701a      	strb	r2, [r3, #0]
          if (approaching(6)) NextStageFrom(6) else {
   12e94:	2006      	movs	r0, #6
   12e96:	f001 fd07 	bl	148a8 <approaching>
   12e9a:	4603      	mov	r3, r0
   12e9c:	2b00      	cmp	r3, #0
   12e9e:	d034      	beq.n	12f0a <auto_nav+0x822>
   12ea0:	f24c 637c 	movw	r3, #50812	; 0xc67c
   12ea4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ea8:	2206      	movs	r2, #6
   12eaa:	701a      	strb	r2, [r3, #0]
   12eac:	f24c 6370 	movw	r3, #50800	; 0xc670
   12eb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12eb4:	781b      	ldrb	r3, [r3, #0]
   12eb6:	3301      	adds	r3, #1
   12eb8:	b2da      	uxtb	r2, r3
   12eba:	f24c 6370 	movw	r3, #50800	; 0xc670
   12ebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ec2:	701a      	strb	r2, [r3, #0]
   12ec4:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12ec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ecc:	681a      	ldr	r2, [r3, #0]
   12ece:	f24c 6374 	movw	r3, #50804	; 0xc674
   12ed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ed6:	601a      	str	r2, [r3, #0]
   12ed8:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12edc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ee0:	681a      	ldr	r2, [r3, #0]
   12ee2:	f24c 6378 	movw	r3, #50808	; 0xc678
   12ee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12eea:	601a      	str	r2, [r3, #0]
   12eec:	f24c 6384 	movw	r3, #50820	; 0xc684
   12ef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ef4:	2200      	movs	r2, #0
   12ef6:	801a      	strh	r2, [r3, #0]
   12ef8:	f24c 6388 	movw	r3, #50824	; 0xc688
   12efc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f00:	f04f 0200 	mov.w	r2, #0
   12f04:	601a      	str	r2, [r3, #0]
   12f06:	f001 bcc1 	b.w	1488c <auto_nav+0x21a4>
            fly_to(6);
   12f0a:	2006      	movs	r0, #6
   12f0c:	f001 fe00 	bl	14b10 <fly_to>
            auto_pitch = FALSE;
   12f10:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   12f14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f18:	2200      	movs	r2, #0
   12f1a:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12f1c:	f24c 639c 	movw	r3, #50844	; 0xc69c
   12f20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f24:	f04f 0200 	mov.w	r2, #0
   12f28:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12f2a:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   12f2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f32:	2203      	movs	r2, #3
   12f34:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[6].a;
   12f36:	f240 5378 	movw	r3, #1400	; 0x578
   12f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   12f40:	f240 5374 	movw	r3, #1396	; 0x574
   12f44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f48:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12f4a:	f24c 6364 	movw	r3, #50788	; 0xc664
   12f4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f52:	f04f 0200 	mov.w	r2, #0
   12f56:	601a      	str	r2, [r3, #0]
          }
          return;
   12f58:	f001 bc98 	b.w	1488c <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12f5c:	f24c 6370 	movw	r3, #50800	; 0xc670
   12f60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f64:	781b      	ldrb	r3, [r3, #0]
   12f66:	2b02      	cmp	r3, #2
   12f68:	d169      	bne.n	1303e <auto_nav+0x956>
     {
         nav_stage =2; 
   12f6a:	f24c 6370 	movw	r3, #50800	; 0xc670
   12f6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f72:	2202      	movs	r2, #2
   12f74:	701a      	strb	r2, [r3, #0]
         if (approaching(1)) NextStageFrom(1) else {
   12f76:	2001      	movs	r0, #1
   12f78:	f001 fc96 	bl	148a8 <approaching>
   12f7c:	4603      	mov	r3, r0
   12f7e:	2b00      	cmp	r3, #0
   12f80:	d034      	beq.n	12fec <auto_nav+0x904>
   12f82:	f24c 637c 	movw	r3, #50812	; 0xc67c
   12f86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f8a:	2201      	movs	r2, #1
   12f8c:	701a      	strb	r2, [r3, #0]
   12f8e:	f24c 6370 	movw	r3, #50800	; 0xc670
   12f92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f96:	781b      	ldrb	r3, [r3, #0]
   12f98:	3301      	adds	r3, #1
   12f9a:	b2da      	uxtb	r2, r3
   12f9c:	f24c 6370 	movw	r3, #50800	; 0xc670
   12fa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fa4:	701a      	strb	r2, [r3, #0]
   12fa6:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12faa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fae:	681a      	ldr	r2, [r3, #0]
   12fb0:	f24c 6374 	movw	r3, #50804	; 0xc674
   12fb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fb8:	601a      	str	r2, [r3, #0]
   12fba:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12fbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fc2:	681a      	ldr	r2, [r3, #0]
   12fc4:	f24c 6378 	movw	r3, #50808	; 0xc678
   12fc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fcc:	601a      	str	r2, [r3, #0]
   12fce:	f24c 6384 	movw	r3, #50820	; 0xc684
   12fd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fd6:	2200      	movs	r2, #0
   12fd8:	801a      	strh	r2, [r3, #0]
   12fda:	f24c 6388 	movw	r3, #50824	; 0xc688
   12fde:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fe2:	f04f 0200 	mov.w	r2, #0
   12fe6:	601a      	str	r2, [r3, #0]
   12fe8:	f001 bc50 	b.w	1488c <auto_nav+0x21a4>
            fly_to(1);
   12fec:	2001      	movs	r0, #1
   12fee:	f001 fd8f 	bl	14b10 <fly_to>
            auto_pitch = FALSE;
   12ff2:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   12ff6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ffa:	2200      	movs	r2, #0
   12ffc:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12ffe:	f24c 639c 	movw	r3, #50844	; 0xc69c
   13002:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13006:	f04f 0200 	mov.w	r2, #0
   1300a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1300c:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   13010:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13014:	2203      	movs	r2, #3
   13016:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   13018:	f240 5378 	movw	r3, #1400	; 0x578
   1301c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13020:	695a      	ldr	r2, [r3, #20]
   13022:	f240 5374 	movw	r3, #1396	; 0x574
   13026:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1302a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1302c:	f24c 6364 	movw	r3, #50788	; 0xc664
   13030:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13034:	f04f 0200 	mov.w	r2, #0
   13038:	601a      	str	r2, [r3, #0]
          }
          return;
   1303a:	f001 bc27 	b.w	1488c <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   1303e:	f24c 6370 	movw	r3, #50800	; 0xc670
   13042:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13046:	781b      	ldrb	r3, [r3, #0]
   13048:	2b03      	cmp	r3, #3
   1304a:	d16f      	bne.n	1312c <auto_nav+0xa44>
      {
	   nav_stage = 3;         
   1304c:	f24c 6370 	movw	r3, #50800	; 0xc670
   13050:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13054:	2203      	movs	r2, #3
   13056:	701a      	strb	r2, [r3, #0]
           if (approaching(2)) NextStageFrom(2) else {
   13058:	2002      	movs	r0, #2
   1305a:	f001 fc25 	bl	148a8 <approaching>
   1305e:	4603      	mov	r3, r0
   13060:	2b00      	cmp	r3, #0
   13062:	d034      	beq.n	130ce <auto_nav+0x9e6>
   13064:	f24c 637c 	movw	r3, #50812	; 0xc67c
   13068:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1306c:	2202      	movs	r2, #2
   1306e:	701a      	strb	r2, [r3, #0]
   13070:	f24c 6370 	movw	r3, #50800	; 0xc670
   13074:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13078:	781b      	ldrb	r3, [r3, #0]
   1307a:	3301      	adds	r3, #1
   1307c:	b2da      	uxtb	r2, r3
   1307e:	f24c 6370 	movw	r3, #50800	; 0xc670
   13082:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13086:	701a      	strb	r2, [r3, #0]
   13088:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1308c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13090:	681a      	ldr	r2, [r3, #0]
   13092:	f24c 6374 	movw	r3, #50804	; 0xc674
   13096:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1309a:	601a      	str	r2, [r3, #0]
   1309c:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   130a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130a4:	681a      	ldr	r2, [r3, #0]
   130a6:	f24c 6378 	movw	r3, #50808	; 0xc678
   130aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130ae:	601a      	str	r2, [r3, #0]
   130b0:	f24c 6384 	movw	r3, #50820	; 0xc684
   130b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130b8:	2200      	movs	r2, #0
   130ba:	801a      	strh	r2, [r3, #0]
   130bc:	f24c 6388 	movw	r3, #50824	; 0xc688
   130c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130c4:	f04f 0200 	mov.w	r2, #0
   130c8:	601a      	str	r2, [r3, #0]
   130ca:	f001 bbdf 	b.w	1488c <auto_nav+0x21a4>
            route_to(last_wp, 2);
   130ce:	f24c 637c 	movw	r3, #50812	; 0xc67c
   130d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130d6:	781b      	ldrb	r3, [r3, #0]
   130d8:	4618      	mov	r0, r3
   130da:	2102      	movs	r1, #2
   130dc:	f001 fd3a 	bl	14b54 <route_to>
            auto_pitch = FALSE;
   130e0:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   130e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130e8:	2200      	movs	r2, #0
   130ea:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   130ec:	f24c 639c 	movw	r3, #50844	; 0xc69c
   130f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130f4:	f04f 0200 	mov.w	r2, #0
   130f8:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   130fa:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   130fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13102:	2203      	movs	r2, #3
   13104:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[2].a;
   13106:	f240 5378 	movw	r3, #1400	; 0x578
   1310a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1310e:	6a1a      	ldr	r2, [r3, #32]
   13110:	f240 5374 	movw	r3, #1396	; 0x574
   13114:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13118:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1311a:	f24c 6364 	movw	r3, #50788	; 0xc664
   1311e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13122:	f04f 0200 	mov.w	r2, #0
   13126:	601a      	str	r2, [r3, #0]
          }
          return;
   13128:	f001 bbb0 	b.w	1488c <auto_nav+0x21a4>
       }
       else if (nav_stage == 4)
   1312c:	f24c 6370 	movw	r3, #50800	; 0xc670
   13130:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13134:	781b      	ldrb	r3, [r3, #0]
   13136:	2b04      	cmp	r3, #4
   13138:	d169      	bne.n	1320e <auto_nav+0xb26>
       {
          nav_stage = 4;
   1313a:	f24c 6370 	movw	r3, #50800	; 0xc670
   1313e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13142:	2204      	movs	r2, #4
   13144:	701a      	strb	r2, [r3, #0]
          if (approaching(3)) NextStageFrom(3) else {
   13146:	2003      	movs	r0, #3
   13148:	f001 fbae 	bl	148a8 <approaching>
   1314c:	4603      	mov	r3, r0
   1314e:	2b00      	cmp	r3, #0
   13150:	d034      	beq.n	131bc <auto_nav+0xad4>
   13152:	f24c 637c 	movw	r3, #50812	; 0xc67c
   13156:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1315a:	2203      	movs	r2, #3
   1315c:	701a      	strb	r2, [r3, #0]
   1315e:	f24c 6370 	movw	r3, #50800	; 0xc670
   13162:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13166:	781b      	ldrb	r3, [r3, #0]
   13168:	3301      	adds	r3, #1
   1316a:	b2da      	uxtb	r2, r3
   1316c:	f24c 6370 	movw	r3, #50800	; 0xc670
   13170:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13174:	701a      	strb	r2, [r3, #0]
   13176:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1317a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1317e:	681a      	ldr	r2, [r3, #0]
   13180:	f24c 6374 	movw	r3, #50804	; 0xc674
   13184:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13188:	601a      	str	r2, [r3, #0]
   1318a:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   1318e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13192:	681a      	ldr	r2, [r3, #0]
   13194:	f24c 6378 	movw	r3, #50808	; 0xc678
   13198:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1319c:	601a      	str	r2, [r3, #0]
   1319e:	f24c 6384 	movw	r3, #50820	; 0xc684
   131a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131a6:	2200      	movs	r2, #0
   131a8:	801a      	strh	r2, [r3, #0]
   131aa:	f24c 6388 	movw	r3, #50824	; 0xc688
   131ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131b2:	f04f 0200 	mov.w	r2, #0
   131b6:	601a      	str	r2, [r3, #0]
   131b8:	f001 bb68 	b.w	1488c <auto_nav+0x21a4>
            fly_to(3);
   131bc:	2003      	movs	r0, #3
   131be:	f001 fca7 	bl	14b10 <fly_to>
            auto_pitch = FALSE;
   131c2:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   131c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131ca:	2200      	movs	r2, #0
   131cc:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   131ce:	f24c 639c 	movw	r3, #50844	; 0xc69c
   131d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131d6:	f04f 0200 	mov.w	r2, #0
   131da:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   131dc:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   131e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131e4:	2203      	movs	r2, #3
   131e6:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[3].a;
   131e8:	f240 5378 	movw	r3, #1400	; 0x578
   131ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   131f2:	f240 5374 	movw	r3, #1396	; 0x574
   131f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131fa:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   131fc:	f24c 6364 	movw	r3, #50788	; 0xc664
   13200:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13204:	f04f 0200 	mov.w	r2, #0
   13208:	601a      	str	r2, [r3, #0]
          }
          return;
   1320a:	f001 bb3f 	b.w	1488c <auto_nav+0x21a4>
       }
       else if (nav_stage == 5)
   1320e:	f24c 6370 	movw	r3, #50800	; 0xc670
   13212:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13216:	781b      	ldrb	r3, [r3, #0]
   13218:	2b05      	cmp	r3, #5
   1321a:	d169      	bne.n	132f0 <auto_nav+0xc08>
       {
          nav_stage =5;
   1321c:	f24c 6370 	movw	r3, #50800	; 0xc670
   13220:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13224:	2205      	movs	r2, #5
   13226:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   13228:	2004      	movs	r0, #4
   1322a:	f001 fb3d 	bl	148a8 <approaching>
   1322e:	4603      	mov	r3, r0
   13230:	2b00      	cmp	r3, #0
   13232:	d034      	beq.n	1329e <auto_nav+0xbb6>
   13234:	f24c 637c 	movw	r3, #50812	; 0xc67c
   13238:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1323c:	2204      	movs	r2, #4
   1323e:	701a      	strb	r2, [r3, #0]
   13240:	f24c 6370 	movw	r3, #50800	; 0xc670
   13244:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13248:	781b      	ldrb	r3, [r3, #0]
   1324a:	3301      	adds	r3, #1
   1324c:	b2da      	uxtb	r2, r3
   1324e:	f24c 6370 	movw	r3, #50800	; 0xc670
   13252:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13256:	701a      	strb	r2, [r3, #0]
   13258:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1325c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13260:	681a      	ldr	r2, [r3, #0]
   13262:	f24c 6374 	movw	r3, #50804	; 0xc674
   13266:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1326a:	601a      	str	r2, [r3, #0]
   1326c:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13270:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13274:	681a      	ldr	r2, [r3, #0]
   13276:	f24c 6378 	movw	r3, #50808	; 0xc678
   1327a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1327e:	601a      	str	r2, [r3, #0]
   13280:	f24c 6384 	movw	r3, #50820	; 0xc684
   13284:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13288:	2200      	movs	r2, #0
   1328a:	801a      	strh	r2, [r3, #0]
   1328c:	f24c 6388 	movw	r3, #50824	; 0xc688
   13290:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13294:	f04f 0200 	mov.w	r2, #0
   13298:	601a      	str	r2, [r3, #0]
   1329a:	f001 baf7 	b.w	1488c <auto_nav+0x21a4>
            fly_to(4);
   1329e:	2004      	movs	r0, #4
   132a0:	f001 fc36 	bl	14b10 <fly_to>
            auto_pitch = FALSE;
   132a4:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   132a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132ac:	2200      	movs	r2, #0
   132ae:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   132b0:	f24c 639c 	movw	r3, #50844	; 0xc69c
   132b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132b8:	f04f 0200 	mov.w	r2, #0
   132bc:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   132be:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   132c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132c6:	2203      	movs	r2, #3
   132c8:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   132ca:	f240 5378 	movw	r3, #1400	; 0x578
   132ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   132d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   132d4:	f240 5374 	movw	r3, #1396	; 0x574
   132d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   132dc:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   132de:	f24c 6364 	movw	r3, #50788	; 0xc664
   132e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132e6:	f04f 0200 	mov.w	r2, #0
   132ea:	601a      	str	r2, [r3, #0]
          }
          return;
   132ec:	f001 bace 	b.w	1488c <auto_nav+0x21a4>
       }
       else if (nav_stage == 6)
   132f0:	f24c 6370 	movw	r3, #50800	; 0xc670
   132f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132f8:	781b      	ldrb	r3, [r3, #0]
   132fa:	2b06      	cmp	r3, #6
   132fc:	d16f      	bne.n	133de <auto_nav+0xcf6>
       {
          nav_stage =6;
   132fe:	f24c 6370 	movw	r3, #50800	; 0xc670
   13302:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13306:	2206      	movs	r2, #6
   13308:	701a      	strb	r2, [r3, #0]
          if (approaching(5)) NextStageFrom(5) else {
   1330a:	2005      	movs	r0, #5
   1330c:	f001 facc 	bl	148a8 <approaching>
   13310:	4603      	mov	r3, r0
   13312:	2b00      	cmp	r3, #0
   13314:	d034      	beq.n	13380 <auto_nav+0xc98>
   13316:	f24c 637c 	movw	r3, #50812	; 0xc67c
   1331a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1331e:	2205      	movs	r2, #5
   13320:	701a      	strb	r2, [r3, #0]
   13322:	f24c 6370 	movw	r3, #50800	; 0xc670
   13326:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1332a:	781b      	ldrb	r3, [r3, #0]
   1332c:	3301      	adds	r3, #1
   1332e:	b2da      	uxtb	r2, r3
   13330:	f24c 6370 	movw	r3, #50800	; 0xc670
   13334:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13338:	701a      	strb	r2, [r3, #0]
   1333a:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1333e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13342:	681a      	ldr	r2, [r3, #0]
   13344:	f24c 6374 	movw	r3, #50804	; 0xc674
   13348:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1334c:	601a      	str	r2, [r3, #0]
   1334e:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13352:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13356:	681a      	ldr	r2, [r3, #0]
   13358:	f24c 6378 	movw	r3, #50808	; 0xc678
   1335c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13360:	601a      	str	r2, [r3, #0]
   13362:	f24c 6384 	movw	r3, #50820	; 0xc684
   13366:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1336a:	2200      	movs	r2, #0
   1336c:	801a      	strh	r2, [r3, #0]
   1336e:	f24c 6388 	movw	r3, #50824	; 0xc688
   13372:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13376:	f04f 0200 	mov.w	r2, #0
   1337a:	601a      	str	r2, [r3, #0]
   1337c:	f001 ba86 	b.w	1488c <auto_nav+0x21a4>
            route_to(last_wp, 5);
   13380:	f24c 637c 	movw	r3, #50812	; 0xc67c
   13384:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13388:	781b      	ldrb	r3, [r3, #0]
   1338a:	4618      	mov	r0, r3
   1338c:	2105      	movs	r1, #5
   1338e:	f001 fbe1 	bl	14b54 <route_to>
            auto_pitch = FALSE;
   13392:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   13396:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1339a:	2200      	movs	r2, #0
   1339c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   1339e:	f24c 639c 	movw	r3, #50844	; 0xc69c
   133a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133a6:	f04f 0200 	mov.w	r2, #0
   133aa:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   133ac:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   133b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133b4:	2203      	movs	r2, #3
   133b6:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[5].a;
   133b8:	f240 5378 	movw	r3, #1400	; 0x578
   133bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   133c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   133c2:	f240 5374 	movw	r3, #1396	; 0x574
   133c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   133ca:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   133cc:	f24c 6364 	movw	r3, #50788	; 0xc664
   133d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133d4:	f04f 0200 	mov.w	r2, #0
   133d8:	601a      	str	r2, [r3, #0]
          }
          return;
   133da:	f001 ba57 	b.w	1488c <auto_nav+0x21a4>
       }
       else if (nav_stage == 7)
   133de:	f24c 6370 	movw	r3, #50800	; 0xc670
   133e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133e6:	781b      	ldrb	r3, [r3, #0]
   133e8:	2b07      	cmp	r3, #7
   133ea:	d106      	bne.n	133fa <auto_nav+0xd12>
       {
	   nav_stage =7;
   133ec:	f24c 6370 	movw	r3, #50800	; 0xc670
   133f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133f4:	2207      	movs	r2, #7
   133f6:	701a      	strb	r2, [r3, #0]
	   Goto(while_5)
   133f8:	e50a      	b.n	12e10 <auto_nav+0x728>
	}
       
       else if (nav_stage == 8){
   133fa:	f24c 6370 	movw	r3, #50800	; 0xc670
   133fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13402:	781b      	ldrb	r3, [r3, #0]
   13404:	2b08      	cmp	r3, #8
   13406:	f041 8241 	bne.w	1488c <auto_nav+0x21a4>
	  Label(endwhile_6)
	  nav_stage =8;
   1340a:	f24c 6370 	movw	r3, #50800	; 0xc670
   1340e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13412:	2208      	movs	r2, #8
   13414:	701a      	strb	r2, [r3, #0]
          NextBlock();
   13416:	f24c 6371 	movw	r3, #50801	; 0xc671
   1341a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1341e:	781b      	ldrb	r3, [r3, #0]
   13420:	3301      	adds	r3, #1
   13422:	b2da      	uxtb	r2, r3
   13424:	f24c 6371 	movw	r3, #50801	; 0xc671
   13428:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1342c:	701a      	strb	r2, [r3, #0]
   1342e:	f24c 6370 	movw	r3, #50800	; 0xc670
   13432:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13436:	2200      	movs	r2, #0
   13438:	701a      	strb	r2, [r3, #0]
   1343a:	f24c 6386 	movw	r3, #50822	; 0xc686
   1343e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13442:	2200      	movs	r2, #0
   13444:	801a      	strh	r2, [r3, #0]
   13446:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1344a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1344e:	681a      	ldr	r2, [r3, #0]
   13450:	f24c 6374 	movw	r3, #50804	; 0xc674
   13454:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13458:	601a      	str	r2, [r3, #0]
   1345a:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   1345e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13462:	681a      	ldr	r2, [r3, #0]
   13464:	f24c 6378 	movw	r3, #50808	; 0xc678
   13468:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1346c:	601a      	str	r2, [r3, #0]
   1346e:	f24c 6384 	movw	r3, #50820	; 0xc684
   13472:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13476:	2200      	movs	r2, #0
   13478:	801a      	strh	r2, [r3, #0]
   1347a:	f24c 6388 	movw	r3, #50824	; 0xc688
   1347e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13482:	f04f 0200 	mov.w	r2, #0
   13486:	601a      	str	r2, [r3, #0]
   13488:	f001 ba00 	b.w	1488c <auto_nav+0x21a4>
       }
       else { }
}
else if (nav_block == 3) // xyz
   1348c:	f24c 6371 	movw	r3, #50801	; 0xc671
   13490:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13494:	781b      	ldrb	r3, [r3, #0]
   13496:	2b03      	cmp	r3, #3
   13498:	f040 8388 	bne.w	13bac <auto_nav+0x14c4>
{
    nav_block = 3;
   1349c:	f24c 6371 	movw	r3, #50801	; 0xc671
   134a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134a4:	2203      	movs	r2, #3
   134a6:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(4) }
   134a8:	f24c 3300 	movw	r3, #49920	; 0xc300
   134ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134b0:	781b      	ldrb	r3, [r3, #0]
   134b2:	2b00      	cmp	r3, #0
   134b4:	d007      	beq.n	134c6 <auto_nav+0xdde>
   134b6:	f24c 3300 	movw	r3, #49920	; 0xc300
   134ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134be:	2200      	movs	r2, #0
   134c0:	701a      	strb	r2, [r3, #0]
   134c2:	2301      	movs	r3, #1
   134c4:	e000      	b.n	134c8 <auto_nav+0xde0>
   134c6:	2300      	movs	r3, #0
   134c8:	2b00      	cmp	r3, #0
   134ca:	d034      	beq.n	13536 <auto_nav+0xe4e>
   134cc:	f24c 6371 	movw	r3, #50801	; 0xc671
   134d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134d4:	2204      	movs	r2, #4
   134d6:	701a      	strb	r2, [r3, #0]
   134d8:	f24c 6370 	movw	r3, #50800	; 0xc670
   134dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134e0:	2200      	movs	r2, #0
   134e2:	701a      	strb	r2, [r3, #0]
   134e4:	f24c 6386 	movw	r3, #50822	; 0xc686
   134e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134ec:	2200      	movs	r2, #0
   134ee:	801a      	strh	r2, [r3, #0]
   134f0:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   134f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134f8:	681a      	ldr	r2, [r3, #0]
   134fa:	f24c 6374 	movw	r3, #50804	; 0xc674
   134fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13502:	601a      	str	r2, [r3, #0]
   13504:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13508:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1350c:	681a      	ldr	r2, [r3, #0]
   1350e:	f24c 6378 	movw	r3, #50808	; 0xc678
   13512:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13516:	601a      	str	r2, [r3, #0]
   13518:	f24c 6384 	movw	r3, #50820	; 0xc684
   1351c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13520:	2200      	movs	r2, #0
   13522:	801a      	strh	r2, [r3, #0]
   13524:	f24c 6388 	movw	r3, #50824	; 0xc688
   13528:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1352c:	f04f 0200 	mov.w	r2, #0
   13530:	601a      	str	r2, [r3, #0]
   13532:	f001 b9ab 	b.w	1488c <auto_nav+0x21a4>
    if(nav_stage == 0)
   13536:	f24c 6370 	movw	r3, #50800	; 0xc670
   1353a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1353e:	781b      	ldrb	r3, [r3, #0]
   13540:	2b00      	cmp	r3, #0
   13542:	f040 82ea 	bne.w	13b1a <auto_nav+0x1432>
    {
        nav_stage = 0;
   13546:	f24c 6370 	movw	r3, #50800	; 0xc670
   1354a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1354e:	2200      	movs	r2, #0
   13550:	701a      	strb	r2, [r3, #0]
        Goto3D(50)
   13552:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
   13556:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1355a:	781b      	ldrb	r3, [r3, #0]
   1355c:	2b02      	cmp	r3, #2
   1355e:	f040 81a5 	bne.w	138ac <auto_nav+0x11c4>
   13562:	f24c 4320 	movw	r3, #50208	; 0xc420
   13566:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1356a:	88db      	ldrh	r3, [r3, #6]
   1356c:	84fb      	strh	r3, [r7, #38]	; 0x26
   1356e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   13572:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   13576:	dc04      	bgt.n	13582 <auto_nav+0xe9a>
   13578:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   1357c:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   13580:	da7e      	bge.n	13680 <auto_nav+0xf98>
   13582:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   13586:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1358a:	681b      	ldr	r3, [r3, #0]
   1358c:	4618      	mov	r0, r3
   1358e:	f004 fb69 	bl	17c64 <__aeabi_f2d>
   13592:	4604      	mov	r4, r0
   13594:	460d      	mov	r5, r1
   13596:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   1359a:	4618      	mov	r0, r3
   1359c:	f004 ffa2 	bl	184e4 <__aeabi_i2f>
   135a0:	4603      	mov	r3, r0
   135a2:	4618      	mov	r0, r3
   135a4:	f04f 0100 	mov.w	r1, #0
   135a8:	f2c4 6116 	movt	r1, #17942	; 0x4616
   135ac:	f005 f8a2 	bl	186f4 <__aeabi_fdiv>
   135b0:	4603      	mov	r3, r0
   135b2:	4618      	mov	r0, r3
   135b4:	f004 fb56 	bl	17c64 <__aeabi_f2d>
   135b8:	4602      	mov	r2, r0
   135ba:	460b      	mov	r3, r1
   135bc:	4610      	mov	r0, r2
   135be:	4619      	mov	r1, r3
   135c0:	f04f 0200 	mov.w	r2, #0
   135c4:	f04f 0300 	mov.w	r3, #0
   135c8:	f2cc 0334 	movt	r3, #49204	; 0xc034
   135cc:	f004 fb9e 	bl	17d0c <__aeabi_dmul>
   135d0:	4602      	mov	r2, r0
   135d2:	460b      	mov	r3, r1
   135d4:	4610      	mov	r0, r2
   135d6:	4619      	mov	r1, r3
   135d8:	f04f 0200 	mov.w	r2, #0
   135dc:	f04f 0300 	mov.w	r3, #0
   135e0:	f004 f9e2 	bl	179a8 <__adddf3>
   135e4:	4602      	mov	r2, r0
   135e6:	460b      	mov	r3, r1
   135e8:	4620      	mov	r0, r4
   135ea:	4629      	mov	r1, r5
   135ec:	f004 f9dc 	bl	179a8 <__adddf3>
   135f0:	4602      	mov	r2, r0
   135f2:	460b      	mov	r3, r1
   135f4:	4610      	mov	r0, r2
   135f6:	4619      	mov	r1, r3
   135f8:	f004 fe6a 	bl	182d0 <__aeabi_d2f>
   135fc:	4602      	mov	r2, r0
   135fe:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   13602:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13606:	601a      	str	r2, [r3, #0]
   13608:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   1360c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13610:	681b      	ldr	r3, [r3, #0]
   13612:	4618      	mov	r0, r3
   13614:	f04f 0100 	mov.w	r1, #0
   13618:	f2c4 317a 	movt	r1, #17274	; 0x437a
   1361c:	f005 f95e 	bl	188dc <__aeabi_fcmple>
   13620:	4603      	mov	r3, r0
   13622:	2b00      	cmp	r3, #0
   13624:	d005      	beq.n	13632 <auto_nav+0xf4a>
   13626:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   1362a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1362e:	681a      	ldr	r2, [r3, #0]
   13630:	e003      	b.n	1363a <auto_nav+0xf52>
   13632:	f04f 0200 	mov.w	r2, #0
   13636:	f2c4 327a 	movt	r2, #17274	; 0x437a
   1363a:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   1363e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13642:	601a      	str	r2, [r3, #0]
   13644:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   13648:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1364c:	681b      	ldr	r3, [r3, #0]
   1364e:	4618      	mov	r0, r3
   13650:	f04f 0100 	mov.w	r1, #0
   13654:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   13658:	f005 f94a 	bl	188f0 <__aeabi_fcmpge>
   1365c:	4603      	mov	r3, r0
   1365e:	2b00      	cmp	r3, #0
   13660:	d005      	beq.n	1366e <auto_nav+0xf86>
   13662:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   13666:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1366a:	681a      	ldr	r2, [r3, #0]
   1366c:	e003      	b.n	13676 <auto_nav+0xf8e>
   1366e:	f04f 0200 	mov.w	r2, #0
   13672:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   13676:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   1367a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1367e:	601a      	str	r2, [r3, #0]
   13680:	f24c 4320 	movw	r3, #50208	; 0xc420
   13684:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13688:	889b      	ldrh	r3, [r3, #4]
   1368a:	84bb      	strh	r3, [r7, #36]	; 0x24
   1368c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   13690:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   13694:	dc04      	bgt.n	136a0 <auto_nav+0xfb8>
   13696:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   1369a:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   1369e:	da7e      	bge.n	1379e <auto_nav+0x10b6>
   136a0:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   136a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   136a8:	681b      	ldr	r3, [r3, #0]
   136aa:	4618      	mov	r0, r3
   136ac:	f004 fada 	bl	17c64 <__aeabi_f2d>
   136b0:	4604      	mov	r4, r0
   136b2:	460d      	mov	r5, r1
   136b4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   136b8:	4618      	mov	r0, r3
   136ba:	f004 ff13 	bl	184e4 <__aeabi_i2f>
   136be:	4603      	mov	r3, r0
   136c0:	4618      	mov	r0, r3
   136c2:	f04f 0100 	mov.w	r1, #0
   136c6:	f2c4 6116 	movt	r1, #17942	; 0x4616
   136ca:	f005 f813 	bl	186f4 <__aeabi_fdiv>
   136ce:	4603      	mov	r3, r0
   136d0:	4618      	mov	r0, r3
   136d2:	f004 fac7 	bl	17c64 <__aeabi_f2d>
   136d6:	4602      	mov	r2, r0
   136d8:	460b      	mov	r3, r1
   136da:	4610      	mov	r0, r2
   136dc:	4619      	mov	r1, r3
   136de:	f04f 0200 	mov.w	r2, #0
   136e2:	f04f 0300 	mov.w	r3, #0
   136e6:	f2cc 0334 	movt	r3, #49204	; 0xc034
   136ea:	f004 fb0f 	bl	17d0c <__aeabi_dmul>
   136ee:	4602      	mov	r2, r0
   136f0:	460b      	mov	r3, r1
   136f2:	4610      	mov	r0, r2
   136f4:	4619      	mov	r1, r3
   136f6:	f04f 0200 	mov.w	r2, #0
   136fa:	f04f 0300 	mov.w	r3, #0
   136fe:	f004 f953 	bl	179a8 <__adddf3>
   13702:	4602      	mov	r2, r0
   13704:	460b      	mov	r3, r1
   13706:	4620      	mov	r0, r4
   13708:	4629      	mov	r1, r5
   1370a:	f004 f94d 	bl	179a8 <__adddf3>
   1370e:	4602      	mov	r2, r0
   13710:	460b      	mov	r3, r1
   13712:	4610      	mov	r0, r2
   13714:	4619      	mov	r1, r3
   13716:	f004 fddb 	bl	182d0 <__aeabi_d2f>
   1371a:	4602      	mov	r2, r0
   1371c:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   13720:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13724:	601a      	str	r2, [r3, #0]
   13726:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   1372a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1372e:	681b      	ldr	r3, [r3, #0]
   13730:	4618      	mov	r0, r3
   13732:	f04f 0100 	mov.w	r1, #0
   13736:	f2c4 317a 	movt	r1, #17274	; 0x437a
   1373a:	f005 f8cf 	bl	188dc <__aeabi_fcmple>
   1373e:	4603      	mov	r3, r0
   13740:	2b00      	cmp	r3, #0
   13742:	d005      	beq.n	13750 <auto_nav+0x1068>
   13744:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   13748:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1374c:	681a      	ldr	r2, [r3, #0]
   1374e:	e003      	b.n	13758 <auto_nav+0x1070>
   13750:	f04f 0200 	mov.w	r2, #0
   13754:	f2c4 327a 	movt	r2, #17274	; 0x437a
   13758:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   1375c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13760:	601a      	str	r2, [r3, #0]
   13762:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   13766:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1376a:	681b      	ldr	r3, [r3, #0]
   1376c:	4618      	mov	r0, r3
   1376e:	f04f 0100 	mov.w	r1, #0
   13772:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   13776:	f005 f8bb 	bl	188f0 <__aeabi_fcmpge>
   1377a:	4603      	mov	r3, r0
   1377c:	2b00      	cmp	r3, #0
   1377e:	d005      	beq.n	1378c <auto_nav+0x10a4>
   13780:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   13784:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13788:	681a      	ldr	r2, [r3, #0]
   1378a:	e003      	b.n	13794 <auto_nav+0x10ac>
   1378c:	f04f 0200 	mov.w	r2, #0
   13790:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   13794:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   13798:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1379c:	601a      	str	r2, [r3, #0]
   1379e:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   137a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   137a6:	2203      	movs	r2, #3
   137a8:	701a      	strb	r2, [r3, #0]
   137aa:	f24c 4320 	movw	r3, #50208	; 0xc420
   137ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   137b2:	885b      	ldrh	r3, [r3, #2]
   137b4:	847b      	strh	r3, [r7, #34]	; 0x22
   137b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   137ba:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   137be:	dc04      	bgt.n	137ca <auto_nav+0x10e2>
   137c0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   137c4:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   137c8:	da70      	bge.n	138ac <auto_nav+0x11c4>
   137ca:	f240 5374 	movw	r3, #1396	; 0x574
   137ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137d2:	681b      	ldr	r3, [r3, #0]
   137d4:	4618      	mov	r0, r3
   137d6:	f004 fa45 	bl	17c64 <__aeabi_f2d>
   137da:	4604      	mov	r4, r0
   137dc:	460d      	mov	r5, r1
   137de:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   137e2:	4618      	mov	r0, r3
   137e4:	f004 fe7e 	bl	184e4 <__aeabi_i2f>
   137e8:	4603      	mov	r3, r0
   137ea:	4618      	mov	r0, r3
   137ec:	f04f 0100 	mov.w	r1, #0
   137f0:	f2c4 6116 	movt	r1, #17942	; 0x4616
   137f4:	f004 ff7e 	bl	186f4 <__aeabi_fdiv>
   137f8:	4603      	mov	r3, r0
   137fa:	4618      	mov	r0, r3
   137fc:	f004 fa32 	bl	17c64 <__aeabi_f2d>
   13800:	4602      	mov	r2, r0
   13802:	460b      	mov	r3, r1
   13804:	f04f 0000 	mov.w	r0, #0
   13808:	f04f 0100 	mov.w	r1, #0
   1380c:	f004 f8ca 	bl	179a4 <__aeabi_dsub>
   13810:	4602      	mov	r2, r0
   13812:	460b      	mov	r3, r1
   13814:	4620      	mov	r0, r4
   13816:	4629      	mov	r1, r5
   13818:	f004 f8c6 	bl	179a8 <__adddf3>
   1381c:	4602      	mov	r2, r0
   1381e:	460b      	mov	r3, r1
   13820:	4610      	mov	r0, r2
   13822:	4619      	mov	r1, r3
   13824:	f004 fd54 	bl	182d0 <__aeabi_d2f>
   13828:	4602      	mov	r2, r0
   1382a:	f240 5374 	movw	r3, #1396	; 0x574
   1382e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13832:	601a      	str	r2, [r3, #0]
   13834:	f240 5374 	movw	r3, #1396	; 0x574
   13838:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1383c:	681b      	ldr	r3, [r3, #0]
   1383e:	4618      	mov	r0, r3
   13840:	f04f 0100 	mov.w	r1, #0
   13844:	f2c4 312f 	movt	r1, #17199	; 0x432f
   13848:	f005 f852 	bl	188f0 <__aeabi_fcmpge>
   1384c:	4603      	mov	r3, r0
   1384e:	2b00      	cmp	r3, #0
   13850:	d005      	beq.n	1385e <auto_nav+0x1176>
   13852:	f240 5374 	movw	r3, #1396	; 0x574
   13856:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1385a:	681a      	ldr	r2, [r3, #0]
   1385c:	e003      	b.n	13866 <auto_nav+0x117e>
   1385e:	f04f 0200 	mov.w	r2, #0
   13862:	f2c4 322f 	movt	r2, #17199	; 0x432f
   13866:	f240 5374 	movw	r3, #1396	; 0x574
   1386a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1386e:	601a      	str	r2, [r3, #0]
   13870:	f240 5374 	movw	r3, #1396	; 0x574
   13874:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13878:	681b      	ldr	r3, [r3, #0]
   1387a:	4618      	mov	r0, r3
   1387c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   13880:	f2c4 3189 	movt	r1, #17289	; 0x4389
   13884:	f005 f82a 	bl	188dc <__aeabi_fcmple>
   13888:	4603      	mov	r3, r0
   1388a:	2b00      	cmp	r3, #0
   1388c:	d005      	beq.n	1389a <auto_nav+0x11b2>
   1388e:	f240 5374 	movw	r3, #1396	; 0x574
   13892:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13896:	681a      	ldr	r2, [r3, #0]
   13898:	e003      	b.n	138a2 <auto_nav+0x11ba>
   1389a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1389e:	f2c4 3289 	movt	r2, #17289	; 0x4389
   138a2:	f240 5374 	movw	r3, #1396	; 0x574
   138a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138aa:	601a      	str	r2, [r3, #0]
   138ac:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   138b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138b4:	681a      	ldr	r2, [r3, #0]
   138b6:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   138ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138be:	681b      	ldr	r3, [r3, #0]
   138c0:	4610      	mov	r0, r2
   138c2:	4619      	mov	r1, r3
   138c4:	f004 fd58 	bl	18378 <__aeabi_fsub>
   138c8:	4603      	mov	r3, r0
   138ca:	4618      	mov	r0, r3
   138cc:	f004 f9ca 	bl	17c64 <__aeabi_f2d>
   138d0:	4604      	mov	r4, r0
   138d2:	460d      	mov	r5, r1
   138d4:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   138d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138dc:	681a      	ldr	r2, [r3, #0]
   138de:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   138e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138e6:	681b      	ldr	r3, [r3, #0]
   138e8:	4610      	mov	r0, r2
   138ea:	4619      	mov	r1, r3
   138ec:	f004 fd44 	bl	18378 <__aeabi_fsub>
   138f0:	4603      	mov	r3, r0
   138f2:	4618      	mov	r0, r3
   138f4:	f004 f9b6 	bl	17c64 <__aeabi_f2d>
   138f8:	4602      	mov	r2, r0
   138fa:	460b      	mov	r3, r1
   138fc:	4620      	mov	r0, r4
   138fe:	4629      	mov	r1, r5
   13900:	f002 fa12 	bl	15d28 <pp_atan2>
   13904:	4602      	mov	r2, r0
   13906:	460b      	mov	r3, r1
   13908:	4610      	mov	r0, r2
   1390a:	4619      	mov	r1, r3
   1390c:	f004 fce0 	bl	182d0 <__aeabi_d2f>
   13910:	4603      	mov	r3, r0
   13912:	61fb      	str	r3, [r7, #28]
   13914:	69f8      	ldr	r0, [r7, #28]
   13916:	f004 f9a5 	bl	17c64 <__aeabi_f2d>
   1391a:	4604      	mov	r4, r0
   1391c:	460d      	mov	r5, r1
   1391e:	f64c 1304 	movw	r3, #51460	; 0xc904
   13922:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13926:	681b      	ldr	r3, [r3, #0]
   13928:	4618      	mov	r0, r3
   1392a:	f04f 0100 	mov.w	r1, #0
   1392e:	f2cc 2148 	movt	r1, #49736	; 0xc248
   13932:	f004 fe2b 	bl	1858c <__aeabi_fmul>
   13936:	4603      	mov	r3, r0
   13938:	4618      	mov	r0, r3
   1393a:	f004 f993 	bl	17c64 <__aeabi_f2d>
   1393e:	4602      	mov	r2, r0
   13940:	460b      	mov	r3, r1
   13942:	f04f 0000 	mov.w	r0, #0
   13946:	f04f 0100 	mov.w	r1, #0
   1394a:	f2c4 0114 	movt	r1, #16404	; 0x4014
   1394e:	f004 fb07 	bl	17f60 <__aeabi_ddiv>
   13952:	4602      	mov	r2, r0
   13954:	460b      	mov	r3, r1
   13956:	4620      	mov	r0, r4
   13958:	4629      	mov	r1, r5
   1395a:	f004 f825 	bl	179a8 <__adddf3>
   1395e:	4602      	mov	r2, r0
   13960:	460b      	mov	r3, r1
   13962:	4610      	mov	r0, r2
   13964:	4619      	mov	r1, r3
   13966:	f004 fcb3 	bl	182d0 <__aeabi_d2f>
   1396a:	4603      	mov	r3, r0
   1396c:	61bb      	str	r3, [r7, #24]
   1396e:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   13972:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13976:	681b      	ldr	r3, [r3, #0]
   13978:	4618      	mov	r0, r3
   1397a:	f004 f973 	bl	17c64 <__aeabi_f2d>
   1397e:	4604      	mov	r4, r0
   13980:	460d      	mov	r5, r1
   13982:	69b8      	ldr	r0, [r7, #24]
   13984:	f004 f96e 	bl	17c64 <__aeabi_f2d>
   13988:	4602      	mov	r2, r0
   1398a:	460b      	mov	r3, r1
   1398c:	4610      	mov	r0, r2
   1398e:	4619      	mov	r1, r3
   13990:	a3b1      	add	r3, pc, #708	; (adr r3, 13c58 <auto_nav+0x1570>)
   13992:	e9d3 2300 	ldrd	r2, r3, [r3]
   13996:	f004 f807 	bl	179a8 <__adddf3>
   1399a:	4602      	mov	r2, r0
   1399c:	460b      	mov	r3, r1
   1399e:	4610      	mov	r0, r2
   139a0:	4619      	mov	r1, r3
   139a2:	f002 fa81 	bl	15ea8 <pp_sin>
   139a6:	4602      	mov	r2, r0
   139a8:	460b      	mov	r3, r1
   139aa:	4610      	mov	r0, r2
   139ac:	4619      	mov	r1, r3
   139ae:	f04f 0200 	mov.w	r2, #0
   139b2:	f04f 0300 	mov.w	r3, #0
   139b6:	f2c4 0349 	movt	r3, #16457	; 0x4049
   139ba:	f004 f9a7 	bl	17d0c <__aeabi_dmul>
   139be:	4602      	mov	r2, r0
   139c0:	460b      	mov	r3, r1
   139c2:	4620      	mov	r0, r4
   139c4:	4629      	mov	r1, r5
   139c6:	f003 ffef 	bl	179a8 <__adddf3>
   139ca:	4602      	mov	r2, r0
   139cc:	460b      	mov	r3, r1
   139ce:	4610      	mov	r0, r2
   139d0:	4619      	mov	r1, r3
   139d2:	f004 fc7d 	bl	182d0 <__aeabi_d2f>
   139d6:	4606      	mov	r6, r0
   139d8:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   139dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139e0:	681b      	ldr	r3, [r3, #0]
   139e2:	4618      	mov	r0, r3
   139e4:	f004 f93e 	bl	17c64 <__aeabi_f2d>
   139e8:	4604      	mov	r4, r0
   139ea:	460d      	mov	r5, r1
   139ec:	69b8      	ldr	r0, [r7, #24]
   139ee:	f004 f939 	bl	17c64 <__aeabi_f2d>
   139f2:	4602      	mov	r2, r0
   139f4:	460b      	mov	r3, r1
   139f6:	4610      	mov	r0, r2
   139f8:	4619      	mov	r1, r3
   139fa:	f002 fa55 	bl	15ea8 <pp_sin>
   139fe:	4602      	mov	r2, r0
   13a00:	460b      	mov	r3, r1
   13a02:	4610      	mov	r0, r2
   13a04:	4619      	mov	r1, r3
   13a06:	f04f 0200 	mov.w	r2, #0
   13a0a:	f04f 0300 	mov.w	r3, #0
   13a0e:	f2c4 0349 	movt	r3, #16457	; 0x4049
   13a12:	f004 f97b 	bl	17d0c <__aeabi_dmul>
   13a16:	4602      	mov	r2, r0
   13a18:	460b      	mov	r3, r1
   13a1a:	4620      	mov	r0, r4
   13a1c:	4629      	mov	r1, r5
   13a1e:	f003 ffc3 	bl	179a8 <__adddf3>
   13a22:	4602      	mov	r2, r0
   13a24:	460b      	mov	r3, r1
   13a26:	4610      	mov	r0, r2
   13a28:	4619      	mov	r1, r3
   13a2a:	f004 fc51 	bl	182d0 <__aeabi_d2f>
   13a2e:	4603      	mov	r3, r0
   13a30:	4630      	mov	r0, r6
   13a32:	4619      	mov	r1, r3
   13a34:	f001 f81c 	bl	14a70 <fly_to_xy>
   13a38:	69b8      	ldr	r0, [r7, #24]
   13a3a:	f004 f913 	bl	17c64 <__aeabi_f2d>
   13a3e:	4602      	mov	r2, r0
   13a40:	460b      	mov	r3, r1
   13a42:	a185      	add	r1, pc, #532	; (adr r1, 13c58 <auto_nav+0x1570>)
   13a44:	e9d1 0100 	ldrd	r0, r1, [r1]
   13a48:	f003 ffac 	bl	179a4 <__aeabi_dsub>
   13a4c:	4602      	mov	r2, r0
   13a4e:	460b      	mov	r3, r1
   13a50:	4610      	mov	r0, r2
   13a52:	4619      	mov	r1, r3
   13a54:	a382      	add	r3, pc, #520	; (adr r3, 13c60 <auto_nav+0x1578>)
   13a56:	e9d3 2300 	ldrd	r2, r3, [r3]
   13a5a:	f004 fa81 	bl	17f60 <__aeabi_ddiv>
   13a5e:	4602      	mov	r2, r0
   13a60:	460b      	mov	r3, r1
   13a62:	4610      	mov	r0, r2
   13a64:	4619      	mov	r1, r3
   13a66:	f04f 0200 	mov.w	r2, #0
   13a6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13a6e:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13a72:	f004 f94b 	bl	17d0c <__aeabi_dmul>
   13a76:	4602      	mov	r2, r0
   13a78:	460b      	mov	r3, r1
   13a7a:	4610      	mov	r0, r2
   13a7c:	4619      	mov	r1, r3
   13a7e:	f004 fc27 	bl	182d0 <__aeabi_d2f>
   13a82:	4602      	mov	r2, r0
   13a84:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13a88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a8c:	601a      	str	r2, [r3, #0]
   13a8e:	e012      	b.n	13ab6 <auto_nav+0x13ce>
   13a90:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13a94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a98:	681b      	ldr	r3, [r3, #0]
   13a9a:	4618      	mov	r0, r3
   13a9c:	f04f 0100 	mov.w	r1, #0
   13aa0:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13aa4:	f004 fc6a 	bl	1837c <__addsf3>
   13aa8:	4603      	mov	r3, r0
   13aaa:	461a      	mov	r2, r3
   13aac:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13ab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ab4:	601a      	str	r2, [r3, #0]
   13ab6:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13aba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13abe:	681b      	ldr	r3, [r3, #0]
   13ac0:	4618      	mov	r0, r3
   13ac2:	f04f 0100 	mov.w	r1, #0
   13ac6:	f004 feff 	bl	188c8 <__aeabi_fcmplt>
   13aca:	4603      	mov	r3, r0
   13acc:	2b00      	cmp	r3, #0
   13ace:	d1df      	bne.n	13a90 <auto_nav+0x13a8>
   13ad0:	e012      	b.n	13af8 <auto_nav+0x1410>
   13ad2:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13ad6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ada:	681b      	ldr	r3, [r3, #0]
   13adc:	4618      	mov	r0, r3
   13ade:	f04f 0100 	mov.w	r1, #0
   13ae2:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13ae6:	f004 fc47 	bl	18378 <__aeabi_fsub>
   13aea:	4603      	mov	r3, r0
   13aec:	461a      	mov	r2, r3
   13aee:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13af2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13af6:	601a      	str	r2, [r3, #0]
   13af8:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13afc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b00:	681b      	ldr	r3, [r3, #0]
   13b02:	4618      	mov	r0, r3
   13b04:	f04f 0100 	mov.w	r1, #0
   13b08:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13b0c:	f004 fef0 	bl	188f0 <__aeabi_fcmpge>
   13b10:	4603      	mov	r3, r0
   13b12:	2b00      	cmp	r3, #0
   13b14:	d1dd      	bne.n	13ad2 <auto_nav+0x13ea>
        return;
   13b16:	f000 beb9 	b.w	1488c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   13b1a:	f24c 6370 	movw	r3, #50800	; 0xc670
   13b1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b22:	781b      	ldrb	r3, [r3, #0]
   13b24:	2b01      	cmp	r3, #1
   13b26:	f040 86b1 	bne.w	1488c <auto_nav+0x21a4>
    {
        nav_stage = 1;
   13b2a:	f24c 6370 	movw	r3, #50800	; 0xc670
   13b2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b32:	2201      	movs	r2, #1
   13b34:	701a      	strb	r2, [r3, #0]
        NextBlock()
   13b36:	f24c 6371 	movw	r3, #50801	; 0xc671
   13b3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b3e:	781b      	ldrb	r3, [r3, #0]
   13b40:	3301      	adds	r3, #1
   13b42:	b2da      	uxtb	r2, r3
   13b44:	f24c 6371 	movw	r3, #50801	; 0xc671
   13b48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b4c:	701a      	strb	r2, [r3, #0]
   13b4e:	f24c 6370 	movw	r3, #50800	; 0xc670
   13b52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b56:	2200      	movs	r2, #0
   13b58:	701a      	strb	r2, [r3, #0]
   13b5a:	f24c 6386 	movw	r3, #50822	; 0xc686
   13b5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b62:	2200      	movs	r2, #0
   13b64:	801a      	strh	r2, [r3, #0]
   13b66:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13b6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b6e:	681a      	ldr	r2, [r3, #0]
   13b70:	f24c 6374 	movw	r3, #50804	; 0xc674
   13b74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b78:	601a      	str	r2, [r3, #0]
   13b7a:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13b7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b82:	681a      	ldr	r2, [r3, #0]
   13b84:	f24c 6378 	movw	r3, #50808	; 0xc678
   13b88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b8c:	601a      	str	r2, [r3, #0]
   13b8e:	f24c 6384 	movw	r3, #50820	; 0xc684
   13b92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b96:	2200      	movs	r2, #0
   13b98:	801a      	strh	r2, [r3, #0]
   13b9a:	f24c 6388 	movw	r3, #50824	; 0xc688
   13b9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ba2:	f04f 0200 	mov.w	r2, #0
   13ba6:	601a      	str	r2, [r3, #0]
   13ba8:	f000 be70 	b.w	1488c <auto_nav+0x21a4>
    }
    else { }
}
else if (nav_block == 4)
   13bac:	f24c 6371 	movw	r3, #50801	; 0xc671
   13bb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bb4:	781b      	ldrb	r3, [r3, #0]
   13bb6:	2b04      	cmp	r3, #4
   13bb8:	f040 8202 	bne.w	13fc0 <auto_nav+0x18d8>
{
    nav_block = 4;
   13bbc:	f24c 6371 	movw	r3, #50801	; 0xc671
   13bc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bc4:	2204      	movs	r2, #4
   13bc6:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(5) }
   13bc8:	f24c 3300 	movw	r3, #49920	; 0xc300
   13bcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bd0:	781b      	ldrb	r3, [r3, #0]
   13bd2:	2b00      	cmp	r3, #0
   13bd4:	d007      	beq.n	13be6 <auto_nav+0x14fe>
   13bd6:	f24c 3300 	movw	r3, #49920	; 0xc300
   13bda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bde:	2200      	movs	r2, #0
   13be0:	701a      	strb	r2, [r3, #0]
   13be2:	2301      	movs	r3, #1
   13be4:	e000      	b.n	13be8 <auto_nav+0x1500>
   13be6:	2300      	movs	r3, #0
   13be8:	2b00      	cmp	r3, #0
   13bea:	d03d      	beq.n	13c68 <auto_nav+0x1580>
   13bec:	f24c 6371 	movw	r3, #50801	; 0xc671
   13bf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bf4:	2205      	movs	r2, #5
   13bf6:	701a      	strb	r2, [r3, #0]
   13bf8:	f24c 6370 	movw	r3, #50800	; 0xc670
   13bfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c00:	2200      	movs	r2, #0
   13c02:	701a      	strb	r2, [r3, #0]
   13c04:	f24c 6386 	movw	r3, #50822	; 0xc686
   13c08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c0c:	2200      	movs	r2, #0
   13c0e:	801a      	strh	r2, [r3, #0]
   13c10:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13c14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c18:	681a      	ldr	r2, [r3, #0]
   13c1a:	f24c 6374 	movw	r3, #50804	; 0xc674
   13c1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c22:	601a      	str	r2, [r3, #0]
   13c24:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13c28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c2c:	681a      	ldr	r2, [r3, #0]
   13c2e:	f24c 6378 	movw	r3, #50808	; 0xc678
   13c32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c36:	601a      	str	r2, [r3, #0]
   13c38:	f24c 6384 	movw	r3, #50820	; 0xc684
   13c3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c40:	2200      	movs	r2, #0
   13c42:	801a      	strh	r2, [r3, #0]
   13c44:	f24c 6388 	movw	r3, #50824	; 0xc688
   13c48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c4c:	f04f 0200 	mov.w	r2, #0
   13c50:	601a      	str	r2, [r3, #0]
   13c52:	f000 be1b 	b.w	1488c <auto_nav+0x21a4>
   13c56:	bf00      	nop
   13c58:	54442d18 	.word	0x54442d18
   13c5c:	3ff921fb 	.word	0x3ff921fb
   13c60:	54442d18 	.word	0x54442d18
   13c64:	400921fb 	.word	0x400921fb
    if(nav_stage == 0)
   13c68:	f24c 6370 	movw	r3, #50800	; 0xc670
   13c6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c70:	781b      	ldrb	r3, [r3, #0]
   13c72:	2b00      	cmp	r3, #0
   13c74:	f040 815b 	bne.w	13f2e <auto_nav+0x1846>
    {
        nav_stage = 0;
   13c78:	f24c 6370 	movw	r3, #50800	; 0xc670
   13c7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c80:	2200      	movs	r2, #0
   13c82:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   13c84:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   13c88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c8c:	2200      	movs	r2, #0
   13c8e:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13c90:	f24c 639c 	movw	r3, #50844	; 0xc69c
   13c94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c98:	f04f 0200 	mov.w	r2, #0
   13c9c:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13c9e:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   13ca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ca6:	2203      	movs	r2, #3
   13ca8:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[0].a;
   13caa:	f240 5378 	movw	r3, #1400	; 0x578
   13cae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13cb2:	689a      	ldr	r2, [r3, #8]
   13cb4:	f240 5374 	movw	r3, #1396	; 0x574
   13cb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13cbc:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   13cbe:	f24c 6364 	movw	r3, #50788	; 0xc664
   13cc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13cc6:	f04f 0200 	mov.w	r2, #0
   13cca:	601a      	str	r2, [r3, #0]
        Circle(0, 150);
   13ccc:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13cd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13cd4:	681a      	ldr	r2, [r3, #0]
   13cd6:	f240 5378 	movw	r3, #1400	; 0x578
   13cda:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13cde:	685b      	ldr	r3, [r3, #4]
   13ce0:	4610      	mov	r0, r2
   13ce2:	4619      	mov	r1, r3
   13ce4:	f004 fb48 	bl	18378 <__aeabi_fsub>
   13ce8:	4603      	mov	r3, r0
   13cea:	4618      	mov	r0, r3
   13cec:	f003 ffba 	bl	17c64 <__aeabi_f2d>
   13cf0:	4604      	mov	r4, r0
   13cf2:	460d      	mov	r5, r1
   13cf4:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13cf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13cfc:	681a      	ldr	r2, [r3, #0]
   13cfe:	f240 5378 	movw	r3, #1400	; 0x578
   13d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d06:	681b      	ldr	r3, [r3, #0]
   13d08:	4610      	mov	r0, r2
   13d0a:	4619      	mov	r1, r3
   13d0c:	f004 fb34 	bl	18378 <__aeabi_fsub>
   13d10:	4603      	mov	r3, r0
   13d12:	4618      	mov	r0, r3
   13d14:	f003 ffa6 	bl	17c64 <__aeabi_f2d>
   13d18:	4602      	mov	r2, r0
   13d1a:	460b      	mov	r3, r1
   13d1c:	4620      	mov	r0, r4
   13d1e:	4629      	mov	r1, r5
   13d20:	f002 f802 	bl	15d28 <pp_atan2>
   13d24:	4602      	mov	r2, r0
   13d26:	460b      	mov	r3, r1
   13d28:	4610      	mov	r0, r2
   13d2a:	4619      	mov	r1, r3
   13d2c:	f004 fad0 	bl	182d0 <__aeabi_d2f>
   13d30:	4603      	mov	r3, r0
   13d32:	617b      	str	r3, [r7, #20]
   13d34:	6978      	ldr	r0, [r7, #20]
   13d36:	f003 ff95 	bl	17c64 <__aeabi_f2d>
   13d3a:	4604      	mov	r4, r0
   13d3c:	460d      	mov	r5, r1
   13d3e:	f64c 1304 	movw	r3, #51460	; 0xc904
   13d42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d46:	681b      	ldr	r3, [r3, #0]
   13d48:	4618      	mov	r0, r3
   13d4a:	f04f 0100 	mov.w	r1, #0
   13d4e:	f2cc 3116 	movt	r1, #49942	; 0xc316
   13d52:	f004 fc1b 	bl	1858c <__aeabi_fmul>
   13d56:	4603      	mov	r3, r0
   13d58:	4618      	mov	r0, r3
   13d5a:	f003 ff83 	bl	17c64 <__aeabi_f2d>
   13d5e:	4602      	mov	r2, r0
   13d60:	460b      	mov	r3, r1
   13d62:	f04f 0000 	mov.w	r0, #0
   13d66:	f04f 0100 	mov.w	r1, #0
   13d6a:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13d6e:	f004 f8f7 	bl	17f60 <__aeabi_ddiv>
   13d72:	4602      	mov	r2, r0
   13d74:	460b      	mov	r3, r1
   13d76:	4620      	mov	r0, r4
   13d78:	4629      	mov	r1, r5
   13d7a:	f003 fe15 	bl	179a8 <__adddf3>
   13d7e:	4602      	mov	r2, r0
   13d80:	460b      	mov	r3, r1
   13d82:	4610      	mov	r0, r2
   13d84:	4619      	mov	r1, r3
   13d86:	f004 faa3 	bl	182d0 <__aeabi_d2f>
   13d8a:	4603      	mov	r3, r0
   13d8c:	613b      	str	r3, [r7, #16]
   13d8e:	f240 5378 	movw	r3, #1400	; 0x578
   13d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d96:	681b      	ldr	r3, [r3, #0]
   13d98:	4618      	mov	r0, r3
   13d9a:	f003 ff63 	bl	17c64 <__aeabi_f2d>
   13d9e:	4604      	mov	r4, r0
   13da0:	460d      	mov	r5, r1
   13da2:	6938      	ldr	r0, [r7, #16]
   13da4:	f003 ff5e 	bl	17c64 <__aeabi_f2d>
   13da8:	4602      	mov	r2, r0
   13daa:	460b      	mov	r3, r1
   13dac:	4610      	mov	r0, r2
   13dae:	4619      	mov	r1, r3
   13db0:	a3af      	add	r3, pc, #700	; (adr r3, 14070 <auto_nav+0x1988>)
   13db2:	e9d3 2300 	ldrd	r2, r3, [r3]
   13db6:	f003 fdf7 	bl	179a8 <__adddf3>
   13dba:	4602      	mov	r2, r0
   13dbc:	460b      	mov	r3, r1
   13dbe:	4610      	mov	r0, r2
   13dc0:	4619      	mov	r1, r3
   13dc2:	f002 f871 	bl	15ea8 <pp_sin>
   13dc6:	4602      	mov	r2, r0
   13dc8:	460b      	mov	r3, r1
   13dca:	4610      	mov	r0, r2
   13dcc:	4619      	mov	r1, r3
   13dce:	a3aa      	add	r3, pc, #680	; (adr r3, 14078 <auto_nav+0x1990>)
   13dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
   13dd4:	f003 ff9a 	bl	17d0c <__aeabi_dmul>
   13dd8:	4602      	mov	r2, r0
   13dda:	460b      	mov	r3, r1
   13ddc:	4620      	mov	r0, r4
   13dde:	4629      	mov	r1, r5
   13de0:	f003 fde2 	bl	179a8 <__adddf3>
   13de4:	4602      	mov	r2, r0
   13de6:	460b      	mov	r3, r1
   13de8:	4610      	mov	r0, r2
   13dea:	4619      	mov	r1, r3
   13dec:	f004 fa70 	bl	182d0 <__aeabi_d2f>
   13df0:	4606      	mov	r6, r0
   13df2:	f240 5378 	movw	r3, #1400	; 0x578
   13df6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13dfa:	685b      	ldr	r3, [r3, #4]
   13dfc:	4618      	mov	r0, r3
   13dfe:	f003 ff31 	bl	17c64 <__aeabi_f2d>
   13e02:	4604      	mov	r4, r0
   13e04:	460d      	mov	r5, r1
   13e06:	6938      	ldr	r0, [r7, #16]
   13e08:	f003 ff2c 	bl	17c64 <__aeabi_f2d>
   13e0c:	4602      	mov	r2, r0
   13e0e:	460b      	mov	r3, r1
   13e10:	4610      	mov	r0, r2
   13e12:	4619      	mov	r1, r3
   13e14:	f002 f848 	bl	15ea8 <pp_sin>
   13e18:	4602      	mov	r2, r0
   13e1a:	460b      	mov	r3, r1
   13e1c:	4610      	mov	r0, r2
   13e1e:	4619      	mov	r1, r3
   13e20:	a395      	add	r3, pc, #596	; (adr r3, 14078 <auto_nav+0x1990>)
   13e22:	e9d3 2300 	ldrd	r2, r3, [r3]
   13e26:	f003 ff71 	bl	17d0c <__aeabi_dmul>
   13e2a:	4602      	mov	r2, r0
   13e2c:	460b      	mov	r3, r1
   13e2e:	4620      	mov	r0, r4
   13e30:	4629      	mov	r1, r5
   13e32:	f003 fdb9 	bl	179a8 <__adddf3>
   13e36:	4602      	mov	r2, r0
   13e38:	460b      	mov	r3, r1
   13e3a:	4610      	mov	r0, r2
   13e3c:	4619      	mov	r1, r3
   13e3e:	f004 fa47 	bl	182d0 <__aeabi_d2f>
   13e42:	4603      	mov	r3, r0
   13e44:	4630      	mov	r0, r6
   13e46:	4619      	mov	r1, r3
   13e48:	f000 fe12 	bl	14a70 <fly_to_xy>
   13e4c:	6938      	ldr	r0, [r7, #16]
   13e4e:	f003 ff09 	bl	17c64 <__aeabi_f2d>
   13e52:	4602      	mov	r2, r0
   13e54:	460b      	mov	r3, r1
   13e56:	a186      	add	r1, pc, #536	; (adr r1, 14070 <auto_nav+0x1988>)
   13e58:	e9d1 0100 	ldrd	r0, r1, [r1]
   13e5c:	f003 fda2 	bl	179a4 <__aeabi_dsub>
   13e60:	4602      	mov	r2, r0
   13e62:	460b      	mov	r3, r1
   13e64:	4610      	mov	r0, r2
   13e66:	4619      	mov	r1, r3
   13e68:	a385      	add	r3, pc, #532	; (adr r3, 14080 <auto_nav+0x1998>)
   13e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   13e6e:	f004 f877 	bl	17f60 <__aeabi_ddiv>
   13e72:	4602      	mov	r2, r0
   13e74:	460b      	mov	r3, r1
   13e76:	4610      	mov	r0, r2
   13e78:	4619      	mov	r1, r3
   13e7a:	f04f 0200 	mov.w	r2, #0
   13e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13e82:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13e86:	f003 ff41 	bl	17d0c <__aeabi_dmul>
   13e8a:	4602      	mov	r2, r0
   13e8c:	460b      	mov	r3, r1
   13e8e:	4610      	mov	r0, r2
   13e90:	4619      	mov	r1, r3
   13e92:	f004 fa1d 	bl	182d0 <__aeabi_d2f>
   13e96:	4602      	mov	r2, r0
   13e98:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13e9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ea0:	601a      	str	r2, [r3, #0]
   13ea2:	e012      	b.n	13eca <auto_nav+0x17e2>
   13ea4:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13ea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13eac:	681b      	ldr	r3, [r3, #0]
   13eae:	4618      	mov	r0, r3
   13eb0:	f04f 0100 	mov.w	r1, #0
   13eb4:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13eb8:	f004 fa60 	bl	1837c <__addsf3>
   13ebc:	4603      	mov	r3, r0
   13ebe:	461a      	mov	r2, r3
   13ec0:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13ec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ec8:	601a      	str	r2, [r3, #0]
   13eca:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13ece:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ed2:	681b      	ldr	r3, [r3, #0]
   13ed4:	4618      	mov	r0, r3
   13ed6:	f04f 0100 	mov.w	r1, #0
   13eda:	f004 fcf5 	bl	188c8 <__aeabi_fcmplt>
   13ede:	4603      	mov	r3, r0
   13ee0:	2b00      	cmp	r3, #0
   13ee2:	d1df      	bne.n	13ea4 <auto_nav+0x17bc>
   13ee4:	e012      	b.n	13f0c <auto_nav+0x1824>
   13ee6:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13eea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13eee:	681b      	ldr	r3, [r3, #0]
   13ef0:	4618      	mov	r0, r3
   13ef2:	f04f 0100 	mov.w	r1, #0
   13ef6:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13efa:	f004 fa3d 	bl	18378 <__aeabi_fsub>
   13efe:	4603      	mov	r3, r0
   13f00:	461a      	mov	r2, r3
   13f02:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13f06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f0a:	601a      	str	r2, [r3, #0]
   13f0c:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13f10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f14:	681b      	ldr	r3, [r3, #0]
   13f16:	4618      	mov	r0, r3
   13f18:	f04f 0100 	mov.w	r1, #0
   13f1c:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13f20:	f004 fce6 	bl	188f0 <__aeabi_fcmpge>
   13f24:	4603      	mov	r3, r0
   13f26:	2b00      	cmp	r3, #0
   13f28:	d1dd      	bne.n	13ee6 <auto_nav+0x17fe>
        return;
   13f2a:	f000 bcaf 	b.w	1488c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   13f2e:	f24c 6370 	movw	r3, #50800	; 0xc670
   13f32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f36:	781b      	ldrb	r3, [r3, #0]
   13f38:	2b01      	cmp	r3, #1
   13f3a:	f040 84a7 	bne.w	1488c <auto_nav+0x21a4>
    {
        nav_stage =1;
   13f3e:	f24c 6370 	movw	r3, #50800	; 0xc670
   13f42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f46:	2201      	movs	r2, #1
   13f48:	701a      	strb	r2, [r3, #0]
        NextBlock()
   13f4a:	f24c 6371 	movw	r3, #50801	; 0xc671
   13f4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f52:	781b      	ldrb	r3, [r3, #0]
   13f54:	3301      	adds	r3, #1
   13f56:	b2da      	uxtb	r2, r3
   13f58:	f24c 6371 	movw	r3, #50801	; 0xc671
   13f5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f60:	701a      	strb	r2, [r3, #0]
   13f62:	f24c 6370 	movw	r3, #50800	; 0xc670
   13f66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f6a:	2200      	movs	r2, #0
   13f6c:	701a      	strb	r2, [r3, #0]
   13f6e:	f24c 6386 	movw	r3, #50822	; 0xc686
   13f72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f76:	2200      	movs	r2, #0
   13f78:	801a      	strh	r2, [r3, #0]
   13f7a:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13f7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f82:	681a      	ldr	r2, [r3, #0]
   13f84:	f24c 6374 	movw	r3, #50804	; 0xc674
   13f88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f8c:	601a      	str	r2, [r3, #0]
   13f8e:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13f92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f96:	681a      	ldr	r2, [r3, #0]
   13f98:	f24c 6378 	movw	r3, #50808	; 0xc678
   13f9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fa0:	601a      	str	r2, [r3, #0]
   13fa2:	f24c 6384 	movw	r3, #50820	; 0xc684
   13fa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13faa:	2200      	movs	r2, #0
   13fac:	801a      	strh	r2, [r3, #0]
   13fae:	f24c 6388 	movw	r3, #50824	; 0xc688
   13fb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fb6:	f04f 0200 	mov.w	r2, #0
   13fba:	601a      	str	r2, [r3, #0]
   13fbc:	f000 bc66 	b.w	1488c <auto_nav+0x21a4>
    }
    else {}
}
else if (nav_block == 5)
   13fc0:	f24c 6371 	movw	r3, #50801	; 0xc671
   13fc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fc8:	781b      	ldrb	r3, [r3, #0]
   13fca:	2b05      	cmp	r3, #5
   13fcc:	f040 845e 	bne.w	1488c <auto_nav+0x21a4>
{
    nav_block = 5;
   13fd0:	f24c 6371 	movw	r3, #50801	; 0xc671
   13fd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fd8:	2205      	movs	r2, #5
   13fda:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(1) }
   13fdc:	f24c 3300 	movw	r3, #49920	; 0xc300
   13fe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fe4:	781b      	ldrb	r3, [r3, #0]
   13fe6:	2b00      	cmp	r3, #0
   13fe8:	d007      	beq.n	13ffa <auto_nav+0x1912>
   13fea:	f24c 3300 	movw	r3, #49920	; 0xc300
   13fee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ff2:	2200      	movs	r2, #0
   13ff4:	701a      	strb	r2, [r3, #0]
   13ff6:	2301      	movs	r3, #1
   13ff8:	e000      	b.n	13ffc <auto_nav+0x1914>
   13ffa:	2300      	movs	r3, #0
   13ffc:	2b00      	cmp	r3, #0
   13ffe:	d043      	beq.n	14088 <auto_nav+0x19a0>
   14000:	f24c 6371 	movw	r3, #50801	; 0xc671
   14004:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14008:	2201      	movs	r2, #1
   1400a:	701a      	strb	r2, [r3, #0]
   1400c:	f24c 6370 	movw	r3, #50800	; 0xc670
   14010:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14014:	2200      	movs	r2, #0
   14016:	701a      	strb	r2, [r3, #0]
   14018:	f24c 6386 	movw	r3, #50822	; 0xc686
   1401c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14020:	2200      	movs	r2, #0
   14022:	801a      	strh	r2, [r3, #0]
   14024:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14028:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1402c:	681a      	ldr	r2, [r3, #0]
   1402e:	f24c 6374 	movw	r3, #50804	; 0xc674
   14032:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14036:	601a      	str	r2, [r3, #0]
   14038:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   1403c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14040:	681a      	ldr	r2, [r3, #0]
   14042:	f24c 6378 	movw	r3, #50808	; 0xc678
   14046:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1404a:	601a      	str	r2, [r3, #0]
   1404c:	f24c 6384 	movw	r3, #50820	; 0xc684
   14050:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14054:	2200      	movs	r2, #0
   14056:	801a      	strh	r2, [r3, #0]
   14058:	f24c 6388 	movw	r3, #50824	; 0xc688
   1405c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14060:	f04f 0200 	mov.w	r2, #0
   14064:	601a      	str	r2, [r3, #0]
   14066:	f000 bc11 	b.w	1488c <auto_nav+0x21a4>
   1406a:	bf00      	nop
   1406c:	f3af 8000 	nop.w
   14070:	54442d18 	.word	0x54442d18
   14074:	3ff921fb 	.word	0x3ff921fb
   14078:	00000000 	.word	0x00000000
   1407c:	4062c000 	.word	0x4062c000
   14080:	54442d18 	.word	0x54442d18
   14084:	400921fb 	.word	0x400921fb
    if(nav_stage == 0) {
   14088:	f24c 6370 	movw	r3, #50800	; 0xc670
   1408c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14090:	781b      	ldrb	r3, [r3, #0]
   14092:	2b00      	cmp	r3, #0
   14094:	d133      	bne.n	140fe <auto_nav+0x1a16>
       Label(while_7) 
       nav_stage = 0;
   14096:	f24c 6370 	movw	r3, #50800	; 0xc670
   1409a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1409e:	2200      	movs	r2, #0
   140a0:	701a      	strb	r2, [r3, #0]
      if (! (TRUE)) Goto(endwhile_8) else NextStage();}
   140a2:	f24c 6370 	movw	r3, #50800	; 0xc670
   140a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140aa:	781b      	ldrb	r3, [r3, #0]
   140ac:	3301      	adds	r3, #1
   140ae:	b2da      	uxtb	r2, r3
   140b0:	f24c 6370 	movw	r3, #50800	; 0xc670
   140b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140b8:	701a      	strb	r2, [r3, #0]
   140ba:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   140be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140c2:	681a      	ldr	r2, [r3, #0]
   140c4:	f24c 6374 	movw	r3, #50804	; 0xc674
   140c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140cc:	601a      	str	r2, [r3, #0]
   140ce:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   140d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140d6:	681a      	ldr	r2, [r3, #0]
   140d8:	f24c 6378 	movw	r3, #50808	; 0xc678
   140dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140e0:	601a      	str	r2, [r3, #0]
   140e2:	f24c 6384 	movw	r3, #50820	; 0xc684
   140e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140ea:	2200      	movs	r2, #0
   140ec:	801a      	strh	r2, [r3, #0]
   140ee:	f24c 6388 	movw	r3, #50824	; 0xc688
   140f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140f6:	f04f 0200 	mov.w	r2, #0
   140fa:	601a      	str	r2, [r3, #0]
   140fc:	e3c6      	b.n	1488c <auto_nav+0x21a4>
     
    else if (nav_stage == 1)
   140fe:	f24c 6370 	movw	r3, #50800	; 0xc670
   14102:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14106:	781b      	ldrb	r3, [r3, #0]
   14108:	2b01      	cmp	r3, #1
   1410a:	f040 81b5 	bne.w	14478 <auto_nav+0x1d90>
    {
        nav_stage =1;
   1410e:	f24c 6370 	movw	r3, #50800	; 0xc670
   14112:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14116:	2201      	movs	r2, #1
   14118:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   1411a:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   1411e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14122:	2200      	movs	r2, #0
   14124:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   14126:	f24c 639c 	movw	r3, #50844	; 0xc69c
   1412a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1412e:	f04f 0200 	mov.w	r2, #0
   14132:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   14134:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   14138:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1413c:	2203      	movs	r2, #3
   1413e:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[1].a;
   14140:	f240 5378 	movw	r3, #1400	; 0x578
   14144:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14148:	695a      	ldr	r2, [r3, #20]
   1414a:	f240 5374 	movw	r3, #1396	; 0x574
   1414e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14152:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   14154:	f24c 6364 	movw	r3, #50788	; 0xc664
   14158:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1415c:	f04f 0200 	mov.w	r2, #0
   14160:	601a      	str	r2, [r3, #0]
        Circle(1, 100);
   14162:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   14166:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1416a:	681a      	ldr	r2, [r3, #0]
   1416c:	f240 5378 	movw	r3, #1400	; 0x578
   14170:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14174:	691b      	ldr	r3, [r3, #16]
   14176:	4610      	mov	r0, r2
   14178:	4619      	mov	r1, r3
   1417a:	f004 f8fd 	bl	18378 <__aeabi_fsub>
   1417e:	4603      	mov	r3, r0
   14180:	4618      	mov	r0, r3
   14182:	f003 fd6f 	bl	17c64 <__aeabi_f2d>
   14186:	4604      	mov	r4, r0
   14188:	460d      	mov	r5, r1
   1418a:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1418e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14192:	681a      	ldr	r2, [r3, #0]
   14194:	f240 5378 	movw	r3, #1400	; 0x578
   14198:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1419c:	68db      	ldr	r3, [r3, #12]
   1419e:	4610      	mov	r0, r2
   141a0:	4619      	mov	r1, r3
   141a2:	f004 f8e9 	bl	18378 <__aeabi_fsub>
   141a6:	4603      	mov	r3, r0
   141a8:	4618      	mov	r0, r3
   141aa:	f003 fd5b 	bl	17c64 <__aeabi_f2d>
   141ae:	4602      	mov	r2, r0
   141b0:	460b      	mov	r3, r1
   141b2:	4620      	mov	r0, r4
   141b4:	4629      	mov	r1, r5
   141b6:	f001 fdb7 	bl	15d28 <pp_atan2>
   141ba:	4602      	mov	r2, r0
   141bc:	460b      	mov	r3, r1
   141be:	4610      	mov	r0, r2
   141c0:	4619      	mov	r1, r3
   141c2:	f004 f885 	bl	182d0 <__aeabi_d2f>
   141c6:	4603      	mov	r3, r0
   141c8:	60fb      	str	r3, [r7, #12]
   141ca:	68f8      	ldr	r0, [r7, #12]
   141cc:	f003 fd4a 	bl	17c64 <__aeabi_f2d>
   141d0:	4604      	mov	r4, r0
   141d2:	460d      	mov	r5, r1
   141d4:	f64c 1304 	movw	r3, #51460	; 0xc904
   141d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   141dc:	681b      	ldr	r3, [r3, #0]
   141de:	4618      	mov	r0, r3
   141e0:	f04f 0100 	mov.w	r1, #0
   141e4:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   141e8:	f004 f9d0 	bl	1858c <__aeabi_fmul>
   141ec:	4603      	mov	r3, r0
   141ee:	4618      	mov	r0, r3
   141f0:	f003 fd38 	bl	17c64 <__aeabi_f2d>
   141f4:	4602      	mov	r2, r0
   141f6:	460b      	mov	r3, r1
   141f8:	f04f 0000 	mov.w	r0, #0
   141fc:	f04f 0100 	mov.w	r1, #0
   14200:	f2c4 0114 	movt	r1, #16404	; 0x4014
   14204:	f003 feac 	bl	17f60 <__aeabi_ddiv>
   14208:	4602      	mov	r2, r0
   1420a:	460b      	mov	r3, r1
   1420c:	4620      	mov	r0, r4
   1420e:	4629      	mov	r1, r5
   14210:	f003 fbca 	bl	179a8 <__adddf3>
   14214:	4602      	mov	r2, r0
   14216:	460b      	mov	r3, r1
   14218:	4610      	mov	r0, r2
   1421a:	4619      	mov	r1, r3
   1421c:	f004 f858 	bl	182d0 <__aeabi_d2f>
   14220:	4603      	mov	r3, r0
   14222:	60bb      	str	r3, [r7, #8]
   14224:	f240 5378 	movw	r3, #1400	; 0x578
   14228:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1422c:	68db      	ldr	r3, [r3, #12]
   1422e:	4618      	mov	r0, r3
   14230:	f003 fd18 	bl	17c64 <__aeabi_f2d>
   14234:	4604      	mov	r4, r0
   14236:	460d      	mov	r5, r1
   14238:	68b8      	ldr	r0, [r7, #8]
   1423a:	f003 fd13 	bl	17c64 <__aeabi_f2d>
   1423e:	4602      	mov	r2, r0
   14240:	460b      	mov	r3, r1
   14242:	4610      	mov	r0, r2
   14244:	4619      	mov	r1, r3
   14246:	a388      	add	r3, pc, #544	; (adr r3, 14468 <auto_nav+0x1d80>)
   14248:	e9d3 2300 	ldrd	r2, r3, [r3]
   1424c:	f003 fbac 	bl	179a8 <__adddf3>
   14250:	4602      	mov	r2, r0
   14252:	460b      	mov	r3, r1
   14254:	4610      	mov	r0, r2
   14256:	4619      	mov	r1, r3
   14258:	f001 fe26 	bl	15ea8 <pp_sin>
   1425c:	4602      	mov	r2, r0
   1425e:	460b      	mov	r3, r1
   14260:	4610      	mov	r0, r2
   14262:	4619      	mov	r1, r3
   14264:	f04f 0200 	mov.w	r2, #0
   14268:	f04f 0300 	mov.w	r3, #0
   1426c:	f2c4 0359 	movt	r3, #16473	; 0x4059
   14270:	f003 fd4c 	bl	17d0c <__aeabi_dmul>
   14274:	4602      	mov	r2, r0
   14276:	460b      	mov	r3, r1
   14278:	4620      	mov	r0, r4
   1427a:	4629      	mov	r1, r5
   1427c:	f003 fb94 	bl	179a8 <__adddf3>
   14280:	4602      	mov	r2, r0
   14282:	460b      	mov	r3, r1
   14284:	4610      	mov	r0, r2
   14286:	4619      	mov	r1, r3
   14288:	f004 f822 	bl	182d0 <__aeabi_d2f>
   1428c:	4606      	mov	r6, r0
   1428e:	f240 5378 	movw	r3, #1400	; 0x578
   14292:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14296:	691b      	ldr	r3, [r3, #16]
   14298:	4618      	mov	r0, r3
   1429a:	f003 fce3 	bl	17c64 <__aeabi_f2d>
   1429e:	4604      	mov	r4, r0
   142a0:	460d      	mov	r5, r1
   142a2:	68b8      	ldr	r0, [r7, #8]
   142a4:	f003 fcde 	bl	17c64 <__aeabi_f2d>
   142a8:	4602      	mov	r2, r0
   142aa:	460b      	mov	r3, r1
   142ac:	4610      	mov	r0, r2
   142ae:	4619      	mov	r1, r3
   142b0:	f001 fdfa 	bl	15ea8 <pp_sin>
   142b4:	4602      	mov	r2, r0
   142b6:	460b      	mov	r3, r1
   142b8:	4610      	mov	r0, r2
   142ba:	4619      	mov	r1, r3
   142bc:	f04f 0200 	mov.w	r2, #0
   142c0:	f04f 0300 	mov.w	r3, #0
   142c4:	f2c4 0359 	movt	r3, #16473	; 0x4059
   142c8:	f003 fd20 	bl	17d0c <__aeabi_dmul>
   142cc:	4602      	mov	r2, r0
   142ce:	460b      	mov	r3, r1
   142d0:	4620      	mov	r0, r4
   142d2:	4629      	mov	r1, r5
   142d4:	f003 fb68 	bl	179a8 <__adddf3>
   142d8:	4602      	mov	r2, r0
   142da:	460b      	mov	r3, r1
   142dc:	4610      	mov	r0, r2
   142de:	4619      	mov	r1, r3
   142e0:	f003 fff6 	bl	182d0 <__aeabi_d2f>
   142e4:	4603      	mov	r3, r0
   142e6:	4630      	mov	r0, r6
   142e8:	4619      	mov	r1, r3
   142ea:	f000 fbc1 	bl	14a70 <fly_to_xy>
   142ee:	68b8      	ldr	r0, [r7, #8]
   142f0:	f003 fcb8 	bl	17c64 <__aeabi_f2d>
   142f4:	4602      	mov	r2, r0
   142f6:	460b      	mov	r3, r1
   142f8:	a15b      	add	r1, pc, #364	; (adr r1, 14468 <auto_nav+0x1d80>)
   142fa:	e9d1 0100 	ldrd	r0, r1, [r1]
   142fe:	f003 fb51 	bl	179a4 <__aeabi_dsub>
   14302:	4602      	mov	r2, r0
   14304:	460b      	mov	r3, r1
   14306:	4610      	mov	r0, r2
   14308:	4619      	mov	r1, r3
   1430a:	a359      	add	r3, pc, #356	; (adr r3, 14470 <auto_nav+0x1d88>)
   1430c:	e9d3 2300 	ldrd	r2, r3, [r3]
   14310:	f003 fe26 	bl	17f60 <__aeabi_ddiv>
   14314:	4602      	mov	r2, r0
   14316:	460b      	mov	r3, r1
   14318:	4610      	mov	r0, r2
   1431a:	4619      	mov	r1, r3
   1431c:	f04f 0200 	mov.w	r2, #0
   14320:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   14324:	f2c4 0366 	movt	r3, #16486	; 0x4066
   14328:	f003 fcf0 	bl	17d0c <__aeabi_dmul>
   1432c:	4602      	mov	r2, r0
   1432e:	460b      	mov	r3, r1
   14330:	4610      	mov	r0, r2
   14332:	4619      	mov	r1, r3
   14334:	f003 ffcc 	bl	182d0 <__aeabi_d2f>
   14338:	4602      	mov	r2, r0
   1433a:	f24c 638c 	movw	r3, #50828	; 0xc68c
   1433e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14342:	601a      	str	r2, [r3, #0]
   14344:	e012      	b.n	1436c <auto_nav+0x1c84>
   14346:	f24c 638c 	movw	r3, #50828	; 0xc68c
   1434a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1434e:	681b      	ldr	r3, [r3, #0]
   14350:	4618      	mov	r0, r3
   14352:	f04f 0100 	mov.w	r1, #0
   14356:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1435a:	f004 f80f 	bl	1837c <__addsf3>
   1435e:	4603      	mov	r3, r0
   14360:	461a      	mov	r2, r3
   14362:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14366:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1436a:	601a      	str	r2, [r3, #0]
   1436c:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14370:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14374:	681b      	ldr	r3, [r3, #0]
   14376:	4618      	mov	r0, r3
   14378:	f04f 0100 	mov.w	r1, #0
   1437c:	f004 faa4 	bl	188c8 <__aeabi_fcmplt>
   14380:	4603      	mov	r3, r0
   14382:	2b00      	cmp	r3, #0
   14384:	d1df      	bne.n	14346 <auto_nav+0x1c5e>
   14386:	e012      	b.n	143ae <auto_nav+0x1cc6>
   14388:	f24c 638c 	movw	r3, #50828	; 0xc68c
   1438c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14390:	681b      	ldr	r3, [r3, #0]
   14392:	4618      	mov	r0, r3
   14394:	f04f 0100 	mov.w	r1, #0
   14398:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1439c:	f003 ffec 	bl	18378 <__aeabi_fsub>
   143a0:	4603      	mov	r3, r0
   143a2:	461a      	mov	r2, r3
   143a4:	f24c 638c 	movw	r3, #50828	; 0xc68c
   143a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143ac:	601a      	str	r2, [r3, #0]
   143ae:	f24c 638c 	movw	r3, #50828	; 0xc68c
   143b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143b6:	681b      	ldr	r3, [r3, #0]
   143b8:	4618      	mov	r0, r3
   143ba:	f04f 0100 	mov.w	r1, #0
   143be:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   143c2:	f004 fa95 	bl	188f0 <__aeabi_fcmpge>
   143c6:	4603      	mov	r3, r0
   143c8:	2b00      	cmp	r3, #0
   143ca:	d1dd      	bne.n	14388 <auto_nav+0x1ca0>
        if (Qdr(0)) NextStage();
   143cc:	f24c 638c 	movw	r3, #50828	; 0xc68c
   143d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143d4:	681b      	ldr	r3, [r3, #0]
   143d6:	4618      	mov	r0, r3
   143d8:	f04f 0100 	mov.w	r1, #0
   143dc:	f004 fa92 	bl	18904 <__aeabi_fcmpgt>
   143e0:	4603      	mov	r3, r0
   143e2:	2b00      	cmp	r3, #0
   143e4:	d100      	bne.n	143e8 <auto_nav+0x1d00>
        return;
   143e6:	e251      	b.n	1488c <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   143e8:	f24c 638c 	movw	r3, #50828	; 0xc68c
   143ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143f0:	681b      	ldr	r3, [r3, #0]
   143f2:	4618      	mov	r0, r3
   143f4:	f04f 0100 	mov.w	r1, #0
   143f8:	f2c4 1120 	movt	r1, #16672	; 0x4120
   143fc:	f004 fa64 	bl	188c8 <__aeabi_fcmplt>
   14400:	4603      	mov	r3, r0
   14402:	2b00      	cmp	r3, #0
   14404:	d100      	bne.n	14408 <auto_nav+0x1d20>
        return;
   14406:	e241      	b.n	1488c <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   14408:	f24c 6370 	movw	r3, #50800	; 0xc670
   1440c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14410:	781b      	ldrb	r3, [r3, #0]
   14412:	3301      	adds	r3, #1
   14414:	b2da      	uxtb	r2, r3
   14416:	f24c 6370 	movw	r3, #50800	; 0xc670
   1441a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1441e:	701a      	strb	r2, [r3, #0]
   14420:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14424:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14428:	681a      	ldr	r2, [r3, #0]
   1442a:	f24c 6374 	movw	r3, #50804	; 0xc674
   1442e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14432:	601a      	str	r2, [r3, #0]
   14434:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   14438:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1443c:	681a      	ldr	r2, [r3, #0]
   1443e:	f24c 6378 	movw	r3, #50808	; 0xc678
   14442:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14446:	601a      	str	r2, [r3, #0]
   14448:	f24c 6384 	movw	r3, #50820	; 0xc684
   1444c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14450:	2200      	movs	r2, #0
   14452:	801a      	strh	r2, [r3, #0]
   14454:	f24c 6388 	movw	r3, #50824	; 0xc688
   14458:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1445c:	f04f 0200 	mov.w	r2, #0
   14460:	601a      	str	r2, [r3, #0]
   14462:	e213      	b.n	1488c <auto_nav+0x21a4>
   14464:	f3af 8000 	nop.w
   14468:	54442d18 	.word	0x54442d18
   1446c:	3ff921fb 	.word	0x3ff921fb
   14470:	54442d18 	.word	0x54442d18
   14474:	400921fb 	.word	0x400921fb
        return;
    }
    else if (nav_stage == 2)
   14478:	f24c 6370 	movw	r3, #50800	; 0xc670
   1447c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14480:	781b      	ldrb	r3, [r3, #0]
   14482:	2b02      	cmp	r3, #2
   14484:	f040 81ad 	bne.w	147e2 <auto_nav+0x20fa>
    {
         nav_stage = 2;
   14488:	f24c 6370 	movw	r3, #50800	; 0xc670
   1448c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14490:	2202      	movs	r2, #2
   14492:	701a      	strb	r2, [r3, #0]
          auto_pitch = FALSE;
   14494:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   14498:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1449c:	2200      	movs	r2, #0
   1449e:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   144a0:	f24c 639c 	movw	r3, #50844	; 0xc69c
   144a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   144a8:	f04f 0200 	mov.w	r2, #0
   144ac:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
   144ae:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   144b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   144b6:	2203      	movs	r2, #3
   144b8:	701a      	strb	r2, [r3, #0]
          desired_altitude = waypoints[4].a;
   144ba:	f240 5378 	movw	r3, #1400	; 0x578
   144be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   144c4:	f240 5374 	movw	r3, #1396	; 0x574
   144c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144cc:	601a      	str	r2, [r3, #0]
          pre_climb = 0.;
   144ce:	f24c 6364 	movw	r3, #50788	; 0xc664
   144d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   144d6:	f04f 0200 	mov.w	r2, #0
   144da:	601a      	str	r2, [r3, #0]
          Circle(4, 100);
   144dc:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   144e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   144e4:	681a      	ldr	r2, [r3, #0]
   144e6:	f240 5378 	movw	r3, #1400	; 0x578
   144ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   144f0:	4610      	mov	r0, r2
   144f2:	4619      	mov	r1, r3
   144f4:	f003 ff40 	bl	18378 <__aeabi_fsub>
   144f8:	4603      	mov	r3, r0
   144fa:	4618      	mov	r0, r3
   144fc:	f003 fbb2 	bl	17c64 <__aeabi_f2d>
   14500:	4604      	mov	r4, r0
   14502:	460d      	mov	r5, r1
   14504:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14508:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1450c:	681a      	ldr	r2, [r3, #0]
   1450e:	f240 5378 	movw	r3, #1400	; 0x578
   14512:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14518:	4610      	mov	r0, r2
   1451a:	4619      	mov	r1, r3
   1451c:	f003 ff2c 	bl	18378 <__aeabi_fsub>
   14520:	4603      	mov	r3, r0
   14522:	4618      	mov	r0, r3
   14524:	f003 fb9e 	bl	17c64 <__aeabi_f2d>
   14528:	4602      	mov	r2, r0
   1452a:	460b      	mov	r3, r1
   1452c:	4620      	mov	r0, r4
   1452e:	4629      	mov	r1, r5
   14530:	f001 fbfa 	bl	15d28 <pp_atan2>
   14534:	4602      	mov	r2, r0
   14536:	460b      	mov	r3, r1
   14538:	4610      	mov	r0, r2
   1453a:	4619      	mov	r1, r3
   1453c:	f003 fec8 	bl	182d0 <__aeabi_d2f>
   14540:	4603      	mov	r3, r0
   14542:	607b      	str	r3, [r7, #4]
   14544:	6878      	ldr	r0, [r7, #4]
   14546:	f003 fb8d 	bl	17c64 <__aeabi_f2d>
   1454a:	4604      	mov	r4, r0
   1454c:	460d      	mov	r5, r1
   1454e:	f64c 1304 	movw	r3, #51460	; 0xc904
   14552:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14556:	681b      	ldr	r3, [r3, #0]
   14558:	4618      	mov	r0, r3
   1455a:	f04f 0100 	mov.w	r1, #0
   1455e:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   14562:	f004 f813 	bl	1858c <__aeabi_fmul>
   14566:	4603      	mov	r3, r0
   14568:	4618      	mov	r0, r3
   1456a:	f003 fb7b 	bl	17c64 <__aeabi_f2d>
   1456e:	4602      	mov	r2, r0
   14570:	460b      	mov	r3, r1
   14572:	f04f 0000 	mov.w	r0, #0
   14576:	f04f 0100 	mov.w	r1, #0
   1457a:	f2c4 0114 	movt	r1, #16404	; 0x4014
   1457e:	f003 fcef 	bl	17f60 <__aeabi_ddiv>
   14582:	4602      	mov	r2, r0
   14584:	460b      	mov	r3, r1
   14586:	4620      	mov	r0, r4
   14588:	4629      	mov	r1, r5
   1458a:	f003 fa0d 	bl	179a8 <__adddf3>
   1458e:	4602      	mov	r2, r0
   14590:	460b      	mov	r3, r1
   14592:	4610      	mov	r0, r2
   14594:	4619      	mov	r1, r3
   14596:	f003 fe9b 	bl	182d0 <__aeabi_d2f>
   1459a:	4603      	mov	r3, r0
   1459c:	603b      	str	r3, [r7, #0]
   1459e:	f240 5378 	movw	r3, #1400	; 0x578
   145a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   145a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   145a8:	4618      	mov	r0, r3
   145aa:	f003 fb5b 	bl	17c64 <__aeabi_f2d>
   145ae:	4604      	mov	r4, r0
   145b0:	460d      	mov	r5, r1
   145b2:	6838      	ldr	r0, [r7, #0]
   145b4:	f003 fb56 	bl	17c64 <__aeabi_f2d>
   145b8:	4602      	mov	r2, r0
   145ba:	460b      	mov	r3, r1
   145bc:	4610      	mov	r0, r2
   145be:	4619      	mov	r1, r3
   145c0:	a3b5      	add	r3, pc, #724	; (adr r3, 14898 <auto_nav+0x21b0>)
   145c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   145c6:	f003 f9ef 	bl	179a8 <__adddf3>
   145ca:	4602      	mov	r2, r0
   145cc:	460b      	mov	r3, r1
   145ce:	4610      	mov	r0, r2
   145d0:	4619      	mov	r1, r3
   145d2:	f001 fc69 	bl	15ea8 <pp_sin>
   145d6:	4602      	mov	r2, r0
   145d8:	460b      	mov	r3, r1
   145da:	4610      	mov	r0, r2
   145dc:	4619      	mov	r1, r3
   145de:	f04f 0200 	mov.w	r2, #0
   145e2:	f04f 0300 	mov.w	r3, #0
   145e6:	f2c4 0359 	movt	r3, #16473	; 0x4059
   145ea:	f003 fb8f 	bl	17d0c <__aeabi_dmul>
   145ee:	4602      	mov	r2, r0
   145f0:	460b      	mov	r3, r1
   145f2:	4620      	mov	r0, r4
   145f4:	4629      	mov	r1, r5
   145f6:	f003 f9d7 	bl	179a8 <__adddf3>
   145fa:	4602      	mov	r2, r0
   145fc:	460b      	mov	r3, r1
   145fe:	4610      	mov	r0, r2
   14600:	4619      	mov	r1, r3
   14602:	f003 fe65 	bl	182d0 <__aeabi_d2f>
   14606:	4606      	mov	r6, r0
   14608:	f240 5378 	movw	r3, #1400	; 0x578
   1460c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   14612:	4618      	mov	r0, r3
   14614:	f003 fb26 	bl	17c64 <__aeabi_f2d>
   14618:	4604      	mov	r4, r0
   1461a:	460d      	mov	r5, r1
   1461c:	6838      	ldr	r0, [r7, #0]
   1461e:	f003 fb21 	bl	17c64 <__aeabi_f2d>
   14622:	4602      	mov	r2, r0
   14624:	460b      	mov	r3, r1
   14626:	4610      	mov	r0, r2
   14628:	4619      	mov	r1, r3
   1462a:	f001 fc3d 	bl	15ea8 <pp_sin>
   1462e:	4602      	mov	r2, r0
   14630:	460b      	mov	r3, r1
   14632:	4610      	mov	r0, r2
   14634:	4619      	mov	r1, r3
   14636:	f04f 0200 	mov.w	r2, #0
   1463a:	f04f 0300 	mov.w	r3, #0
   1463e:	f2c4 0359 	movt	r3, #16473	; 0x4059
   14642:	f003 fb63 	bl	17d0c <__aeabi_dmul>
   14646:	4602      	mov	r2, r0
   14648:	460b      	mov	r3, r1
   1464a:	4620      	mov	r0, r4
   1464c:	4629      	mov	r1, r5
   1464e:	f003 f9ab 	bl	179a8 <__adddf3>
   14652:	4602      	mov	r2, r0
   14654:	460b      	mov	r3, r1
   14656:	4610      	mov	r0, r2
   14658:	4619      	mov	r1, r3
   1465a:	f003 fe39 	bl	182d0 <__aeabi_d2f>
   1465e:	4603      	mov	r3, r0
   14660:	4630      	mov	r0, r6
   14662:	4619      	mov	r1, r3
   14664:	f000 fa04 	bl	14a70 <fly_to_xy>
   14668:	6838      	ldr	r0, [r7, #0]
   1466a:	f003 fafb 	bl	17c64 <__aeabi_f2d>
   1466e:	4602      	mov	r2, r0
   14670:	460b      	mov	r3, r1
   14672:	a189      	add	r1, pc, #548	; (adr r1, 14898 <auto_nav+0x21b0>)
   14674:	e9d1 0100 	ldrd	r0, r1, [r1]
   14678:	f003 f994 	bl	179a4 <__aeabi_dsub>
   1467c:	4602      	mov	r2, r0
   1467e:	460b      	mov	r3, r1
   14680:	4610      	mov	r0, r2
   14682:	4619      	mov	r1, r3
   14684:	a386      	add	r3, pc, #536	; (adr r3, 148a0 <auto_nav+0x21b8>)
   14686:	e9d3 2300 	ldrd	r2, r3, [r3]
   1468a:	f003 fc69 	bl	17f60 <__aeabi_ddiv>
   1468e:	4602      	mov	r2, r0
   14690:	460b      	mov	r3, r1
   14692:	4610      	mov	r0, r2
   14694:	4619      	mov	r1, r3
   14696:	f04f 0200 	mov.w	r2, #0
   1469a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1469e:	f2c4 0366 	movt	r3, #16486	; 0x4066
   146a2:	f003 fb33 	bl	17d0c <__aeabi_dmul>
   146a6:	4602      	mov	r2, r0
   146a8:	460b      	mov	r3, r1
   146aa:	4610      	mov	r0, r2
   146ac:	4619      	mov	r1, r3
   146ae:	f003 fe0f 	bl	182d0 <__aeabi_d2f>
   146b2:	4602      	mov	r2, r0
   146b4:	f24c 638c 	movw	r3, #50828	; 0xc68c
   146b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146bc:	601a      	str	r2, [r3, #0]
   146be:	e012      	b.n	146e6 <auto_nav+0x1ffe>
   146c0:	f24c 638c 	movw	r3, #50828	; 0xc68c
   146c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146c8:	681b      	ldr	r3, [r3, #0]
   146ca:	4618      	mov	r0, r3
   146cc:	f04f 0100 	mov.w	r1, #0
   146d0:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   146d4:	f003 fe52 	bl	1837c <__addsf3>
   146d8:	4603      	mov	r3, r0
   146da:	461a      	mov	r2, r3
   146dc:	f24c 638c 	movw	r3, #50828	; 0xc68c
   146e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146e4:	601a      	str	r2, [r3, #0]
   146e6:	f24c 638c 	movw	r3, #50828	; 0xc68c
   146ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146ee:	681b      	ldr	r3, [r3, #0]
   146f0:	4618      	mov	r0, r3
   146f2:	f04f 0100 	mov.w	r1, #0
   146f6:	f004 f8e7 	bl	188c8 <__aeabi_fcmplt>
   146fa:	4603      	mov	r3, r0
   146fc:	2b00      	cmp	r3, #0
   146fe:	d1df      	bne.n	146c0 <auto_nav+0x1fd8>
   14700:	e012      	b.n	14728 <auto_nav+0x2040>
   14702:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14706:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1470a:	681b      	ldr	r3, [r3, #0]
   1470c:	4618      	mov	r0, r3
   1470e:	f04f 0100 	mov.w	r1, #0
   14712:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14716:	f003 fe2f 	bl	18378 <__aeabi_fsub>
   1471a:	4603      	mov	r3, r0
   1471c:	461a      	mov	r2, r3
   1471e:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14722:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14726:	601a      	str	r2, [r3, #0]
   14728:	f24c 638c 	movw	r3, #50828	; 0xc68c
   1472c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14730:	681b      	ldr	r3, [r3, #0]
   14732:	4618      	mov	r0, r3
   14734:	f04f 0100 	mov.w	r1, #0
   14738:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1473c:	f004 f8d8 	bl	188f0 <__aeabi_fcmpge>
   14740:	4603      	mov	r3, r0
   14742:	2b00      	cmp	r3, #0
   14744:	d1dd      	bne.n	14702 <auto_nav+0x201a>
          if (Qdr(180)) NextStage();
   14746:	f24c 638c 	movw	r3, #50828	; 0xc68c
   1474a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1474e:	681b      	ldr	r3, [r3, #0]
   14750:	4618      	mov	r0, r3
   14752:	f04f 0100 	mov.w	r1, #0
   14756:	f2c4 3134 	movt	r1, #17204	; 0x4334
   1475a:	f004 f8d3 	bl	18904 <__aeabi_fcmpgt>
   1475e:	4603      	mov	r3, r0
   14760:	2b00      	cmp	r3, #0
   14762:	d100      	bne.n	14766 <auto_nav+0x207e>
          return;
   14764:	e092      	b.n	1488c <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   14766:	f24c 638c 	movw	r3, #50828	; 0xc68c
   1476a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1476e:	681b      	ldr	r3, [r3, #0]
   14770:	4618      	mov	r0, r3
   14772:	f04f 0100 	mov.w	r1, #0
   14776:	f2c4 313e 	movt	r1, #17214	; 0x433e
   1477a:	f004 f8a5 	bl	188c8 <__aeabi_fcmplt>
   1477e:	4603      	mov	r3, r0
   14780:	2b00      	cmp	r3, #0
   14782:	d100      	bne.n	14786 <auto_nav+0x209e>
          return;
   14784:	e082      	b.n	1488c <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   14786:	f24c 6370 	movw	r3, #50800	; 0xc670
   1478a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1478e:	781b      	ldrb	r3, [r3, #0]
   14790:	3301      	adds	r3, #1
   14792:	b2da      	uxtb	r2, r3
   14794:	f24c 6370 	movw	r3, #50800	; 0xc670
   14798:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1479c:	701a      	strb	r2, [r3, #0]
   1479e:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   147a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147a6:	681a      	ldr	r2, [r3, #0]
   147a8:	f24c 6374 	movw	r3, #50804	; 0xc674
   147ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147b0:	601a      	str	r2, [r3, #0]
   147b2:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   147b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147ba:	681a      	ldr	r2, [r3, #0]
   147bc:	f24c 6378 	movw	r3, #50808	; 0xc678
   147c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147c4:	601a      	str	r2, [r3, #0]
   147c6:	f24c 6384 	movw	r3, #50820	; 0xc684
   147ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147ce:	2200      	movs	r2, #0
   147d0:	801a      	strh	r2, [r3, #0]
   147d2:	f24c 6388 	movw	r3, #50824	; 0xc688
   147d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147da:	f04f 0200 	mov.w	r2, #0
   147de:	601a      	str	r2, [r3, #0]
   147e0:	e054      	b.n	1488c <auto_nav+0x21a4>
          return;
    }
    else if (nav_stage == 3) 
   147e2:	f24c 6370 	movw	r3, #50800	; 0xc670
   147e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147ea:	781b      	ldrb	r3, [r3, #0]
   147ec:	2b03      	cmp	r3, #3
   147ee:	d106      	bne.n	147fe <auto_nav+0x2116>
    {
	  nav_stage = 3;
   147f0:	f24c 6370 	movw	r3, #50800	; 0xc670
   147f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147f8:	2203      	movs	r2, #3
   147fa:	701a      	strb	r2, [r3, #0]
          Goto(while_7)
   147fc:	e44b      	b.n	14096 <auto_nav+0x19ae>
    }
    else if (nav_stage == 4)
   147fe:	f24c 6370 	movw	r3, #50800	; 0xc670
   14802:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14806:	781b      	ldrb	r3, [r3, #0]
   14808:	2b04      	cmp	r3, #4
   1480a:	d13f      	bne.n	1488c <auto_nav+0x21a4>
    {
	Label(endwhile_8)
	nav_stage = 4;
   1480c:	f24c 6370 	movw	r3, #50800	; 0xc670
   14810:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14814:	2204      	movs	r2, #4
   14816:	701a      	strb	r2, [r3, #0]
        NextBlock()
   14818:	f24c 6371 	movw	r3, #50801	; 0xc671
   1481c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14820:	781b      	ldrb	r3, [r3, #0]
   14822:	3301      	adds	r3, #1
   14824:	b2da      	uxtb	r2, r3
   14826:	f24c 6371 	movw	r3, #50801	; 0xc671
   1482a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1482e:	701a      	strb	r2, [r3, #0]
   14830:	f24c 6370 	movw	r3, #50800	; 0xc670
   14834:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14838:	2200      	movs	r2, #0
   1483a:	701a      	strb	r2, [r3, #0]
   1483c:	f24c 6386 	movw	r3, #50822	; 0xc686
   14840:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14844:	2200      	movs	r2, #0
   14846:	801a      	strh	r2, [r3, #0]
   14848:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1484c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14850:	681a      	ldr	r2, [r3, #0]
   14852:	f24c 6374 	movw	r3, #50804	; 0xc674
   14856:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1485a:	601a      	str	r2, [r3, #0]
   1485c:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   14860:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14864:	681a      	ldr	r2, [r3, #0]
   14866:	f24c 6378 	movw	r3, #50808	; 0xc678
   1486a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1486e:	601a      	str	r2, [r3, #0]
   14870:	f24c 6384 	movw	r3, #50820	; 0xc684
   14874:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14878:	2200      	movs	r2, #0
   1487a:	801a      	strh	r2, [r3, #0]
   1487c:	f24c 6388 	movw	r3, #50824	; 0xc688
   14880:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14884:	f04f 0200 	mov.w	r2, #0
   14888:	601a      	str	r2, [r3, #0]
   1488a:	bf00      	nop
    else { }
}
else { }

//#endif
}
   1488c:	372c      	adds	r7, #44	; 0x2c
   1488e:	46bd      	mov	sp, r7
   14890:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14892:	bf00      	nop
   14894:	f3af 8000 	nop.w
   14898:	54442d18 	.word	0x54442d18
   1489c:	3ff921fb 	.word	0x3ff921fb
   148a0:	54442d18 	.word	0x54442d18
   148a4:	400921fb 	.word	0x400921fb

000148a8 <approaching>:
const uint8_t nb_waypoint = NB_WAYPOINT;

struct point waypoints[NB_WAYPOINT+1] = WAYPOINTS;

static float carrot;
static bool_t approaching(uint8_t wp) {
   148a8:	b590      	push	{r4, r7, lr}
   148aa:	b087      	sub	sp, #28
   148ac:	af00      	add	r7, sp, #0
   148ae:	4603      	mov	r3, r0
   148b0:	71fb      	strb	r3, [r7, #7]
  float pw_x = waypoints[wp].x - estimator_x;
   148b2:	79f9      	ldrb	r1, [r7, #7]
   148b4:	f240 5278 	movw	r2, #1400	; 0x578
   148b8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   148bc:	460b      	mov	r3, r1
   148be:	005b      	lsls	r3, r3, #1
   148c0:	440b      	add	r3, r1
   148c2:	009b      	lsls	r3, r3, #2
   148c4:	4413      	add	r3, r2
   148c6:	681a      	ldr	r2, [r3, #0]
   148c8:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   148cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148d0:	681b      	ldr	r3, [r3, #0]
   148d2:	4610      	mov	r0, r2
   148d4:	4619      	mov	r1, r3
   148d6:	f003 fd4f 	bl	18378 <__aeabi_fsub>
   148da:	4603      	mov	r3, r0
   148dc:	617b      	str	r3, [r7, #20]
  float pw_y = waypoints[wp].y - estimator_y;
   148de:	79f9      	ldrb	r1, [r7, #7]
   148e0:	f240 5278 	movw	r2, #1400	; 0x578
   148e4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   148e8:	460b      	mov	r3, r1
   148ea:	005b      	lsls	r3, r3, #1
   148ec:	440b      	add	r3, r1
   148ee:	009b      	lsls	r3, r3, #2
   148f0:	4413      	add	r3, r2
   148f2:	3304      	adds	r3, #4
   148f4:	681a      	ldr	r2, [r3, #0]
   148f6:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   148fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148fe:	681b      	ldr	r3, [r3, #0]
   14900:	4610      	mov	r0, r2
   14902:	4619      	mov	r1, r3
   14904:	f003 fd38 	bl	18378 <__aeabi_fsub>
   14908:	4603      	mov	r3, r0
   1490a:	613b      	str	r3, [r7, #16]
  float scal_prod;//changes for PowerPc Fev-06

  dist2_to_wp = pw_x*pw_x + pw_y *pw_y;
   1490c:	6978      	ldr	r0, [r7, #20]
   1490e:	6979      	ldr	r1, [r7, #20]
   14910:	f003 fe3c 	bl	1858c <__aeabi_fmul>
   14914:	4603      	mov	r3, r0
   14916:	461c      	mov	r4, r3
   14918:	6938      	ldr	r0, [r7, #16]
   1491a:	6939      	ldr	r1, [r7, #16]
   1491c:	f003 fe36 	bl	1858c <__aeabi_fmul>
   14920:	4603      	mov	r3, r0
   14922:	4620      	mov	r0, r4
   14924:	4619      	mov	r1, r3
   14926:	f003 fd29 	bl	1837c <__addsf3>
   1492a:	4603      	mov	r3, r0
   1492c:	461a      	mov	r2, r3
   1492e:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
   14932:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14936:	601a      	str	r2, [r3, #0]
  carrot = CARROT * estimator_hspeed_mod;
   14938:	f64c 1304 	movw	r3, #51460	; 0xc904
   1493c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14940:	681b      	ldr	r3, [r3, #0]
   14942:	4618      	mov	r0, r3
   14944:	f04f 0100 	mov.w	r1, #0
   14948:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   1494c:	f003 fe1e 	bl	1858c <__aeabi_fmul>
   14950:	4603      	mov	r3, r0
   14952:	461a      	mov	r2, r3
   14954:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   14958:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1495c:	601a      	str	r2, [r3, #0]
  carrot = (carrot < 40 ? 40 : carrot);
   1495e:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   14962:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14966:	681b      	ldr	r3, [r3, #0]
   14968:	4618      	mov	r0, r3
   1496a:	f04f 0100 	mov.w	r1, #0
   1496e:	f2c4 2120 	movt	r1, #16928	; 0x4220
   14972:	f003 ffa9 	bl	188c8 <__aeabi_fcmplt>
   14976:	4603      	mov	r3, r0
   14978:	2b00      	cmp	r3, #0
   1497a:	d004      	beq.n	14986 <approaching+0xde>
   1497c:	f04f 0200 	mov.w	r2, #0
   14980:	f2c4 2220 	movt	r2, #16928	; 0x4220
   14984:	e004      	b.n	14990 <approaching+0xe8>
   14986:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   1498a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1498e:	681a      	ldr	r2, [r3, #0]
   14990:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   14994:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14998:	601a      	str	r2, [r3, #0]
  if (dist2_to_wp < carrot*carrot)
   1499a:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   1499e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   149a2:	681a      	ldr	r2, [r3, #0]
   149a4:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   149a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   149ac:	681b      	ldr	r3, [r3, #0]
   149ae:	4610      	mov	r0, r2
   149b0:	4619      	mov	r1, r3
   149b2:	f003 fdeb 	bl	1858c <__aeabi_fmul>
   149b6:	4603      	mov	r3, r0
   149b8:	461a      	mov	r2, r3
   149ba:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
   149be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   149c2:	681b      	ldr	r3, [r3, #0]
   149c4:	4610      	mov	r0, r2
   149c6:	4619      	mov	r1, r3
   149c8:	f003 ff9c 	bl	18904 <__aeabi_fcmpgt>
   149cc:	4603      	mov	r3, r0
   149ce:	2b00      	cmp	r3, #0
   149d0:	d001      	beq.n	149d6 <approaching+0x12e>
    return TRUE;
   149d2:	2301      	movs	r3, #1
   149d4:	e048      	b.n	14a68 <approaching+0x1c0>

  scal_prod = (waypoints[wp].x - last_x) * pw_x + (waypoints[wp].y - last_y) * pw_y;
   149d6:	79f9      	ldrb	r1, [r7, #7]
   149d8:	f240 5278 	movw	r2, #1400	; 0x578
   149dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   149e0:	460b      	mov	r3, r1
   149e2:	005b      	lsls	r3, r3, #1
   149e4:	440b      	add	r3, r1
   149e6:	009b      	lsls	r3, r3, #2
   149e8:	4413      	add	r3, r2
   149ea:	681a      	ldr	r2, [r3, #0]
   149ec:	f24c 6374 	movw	r3, #50804	; 0xc674
   149f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   149f4:	681b      	ldr	r3, [r3, #0]
   149f6:	4610      	mov	r0, r2
   149f8:	4619      	mov	r1, r3
   149fa:	f003 fcbd 	bl	18378 <__aeabi_fsub>
   149fe:	4603      	mov	r3, r0
   14a00:	4618      	mov	r0, r3
   14a02:	6979      	ldr	r1, [r7, #20]
   14a04:	f003 fdc2 	bl	1858c <__aeabi_fmul>
   14a08:	4603      	mov	r3, r0
   14a0a:	461c      	mov	r4, r3
   14a0c:	79f9      	ldrb	r1, [r7, #7]
   14a0e:	f240 5278 	movw	r2, #1400	; 0x578
   14a12:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a16:	460b      	mov	r3, r1
   14a18:	005b      	lsls	r3, r3, #1
   14a1a:	440b      	add	r3, r1
   14a1c:	009b      	lsls	r3, r3, #2
   14a1e:	4413      	add	r3, r2
   14a20:	3304      	adds	r3, #4
   14a22:	681a      	ldr	r2, [r3, #0]
   14a24:	f24c 6378 	movw	r3, #50808	; 0xc678
   14a28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a2c:	681b      	ldr	r3, [r3, #0]
   14a2e:	4610      	mov	r0, r2
   14a30:	4619      	mov	r1, r3
   14a32:	f003 fca1 	bl	18378 <__aeabi_fsub>
   14a36:	4603      	mov	r3, r0
   14a38:	4618      	mov	r0, r3
   14a3a:	6939      	ldr	r1, [r7, #16]
   14a3c:	f003 fda6 	bl	1858c <__aeabi_fmul>
   14a40:	4603      	mov	r3, r0
   14a42:	4620      	mov	r0, r4
   14a44:	4619      	mov	r1, r3
   14a46:	f003 fc99 	bl	1837c <__addsf3>
   14a4a:	4603      	mov	r3, r0
   14a4c:	60fb      	str	r3, [r7, #12]
  
  return (scal_prod < 0);
   14a4e:	2301      	movs	r3, #1
   14a50:	461c      	mov	r4, r3
   14a52:	68f8      	ldr	r0, [r7, #12]
   14a54:	f04f 0100 	mov.w	r1, #0
   14a58:	f003 ff36 	bl	188c8 <__aeabi_fcmplt>
   14a5c:	4603      	mov	r3, r0
   14a5e:	2b00      	cmp	r3, #0
   14a60:	d101      	bne.n	14a66 <approaching+0x1be>
   14a62:	2300      	movs	r3, #0
   14a64:	461c      	mov	r4, r3
   14a66:	b2e3      	uxtb	r3, r4
}
   14a68:	4618      	mov	r0, r3
   14a6a:	371c      	adds	r7, #28
   14a6c:	46bd      	mov	sp, r7
   14a6e:	bd90      	pop	{r4, r7, pc}

00014a70 <fly_to_xy>:

static inline void fly_to_xy(float x, float y) 
{ 
   14a70:	b5b0      	push	{r4, r5, r7, lr}
   14a72:	b082      	sub	sp, #8
   14a74:	af00      	add	r7, sp, #0
   14a76:	6078      	str	r0, [r7, #4]
   14a78:	6039      	str	r1, [r7, #0]
  desired_x = x;
   14a7a:	f24c 6390 	movw	r3, #50832	; 0xc690
   14a7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a82:	687a      	ldr	r2, [r7, #4]
   14a84:	601a      	str	r2, [r3, #0]
  desired_y = y;
   14a86:	f24c 6394 	movw	r3, #50836	; 0xc694
   14a8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a8e:	683a      	ldr	r2, [r7, #0]
   14a90:	601a      	str	r2, [r3, #0]
  desired_course = M_PI/2.-atan2(y - estimator_y, x - estimator_x);
   14a92:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   14a96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a9a:	681b      	ldr	r3, [r3, #0]
   14a9c:	6838      	ldr	r0, [r7, #0]
   14a9e:	4619      	mov	r1, r3
   14aa0:	f003 fc6a 	bl	18378 <__aeabi_fsub>
   14aa4:	4603      	mov	r3, r0
   14aa6:	4618      	mov	r0, r3
   14aa8:	f003 f8dc 	bl	17c64 <__aeabi_f2d>
   14aac:	4604      	mov	r4, r0
   14aae:	460d      	mov	r5, r1
   14ab0:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14ab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ab8:	681b      	ldr	r3, [r3, #0]
   14aba:	6878      	ldr	r0, [r7, #4]
   14abc:	4619      	mov	r1, r3
   14abe:	f003 fc5b 	bl	18378 <__aeabi_fsub>
   14ac2:	4603      	mov	r3, r0
   14ac4:	4618      	mov	r0, r3
   14ac6:	f003 f8cd 	bl	17c64 <__aeabi_f2d>
   14aca:	4602      	mov	r2, r0
   14acc:	460b      	mov	r3, r1
   14ace:	4620      	mov	r0, r4
   14ad0:	4629      	mov	r1, r5
   14ad2:	f001 f929 	bl	15d28 <pp_atan2>
   14ad6:	4602      	mov	r2, r0
   14ad8:	460b      	mov	r3, r1
   14ada:	a10b      	add	r1, pc, #44	; (adr r1, 14b08 <fly_to_xy+0x98>)
   14adc:	e9d1 0100 	ldrd	r0, r1, [r1]
   14ae0:	f002 ff60 	bl	179a4 <__aeabi_dsub>
   14ae4:	4602      	mov	r2, r0
   14ae6:	460b      	mov	r3, r1
   14ae8:	4610      	mov	r0, r2
   14aea:	4619      	mov	r1, r3
   14aec:	f003 fbf0 	bl	182d0 <__aeabi_d2f>
   14af0:	4602      	mov	r2, r0
   14af2:	f24c 635c 	movw	r3, #50780	; 0xc65c
   14af6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14afa:	601a      	str	r2, [r3, #0]
}
   14afc:	3708      	adds	r7, #8
   14afe:	46bd      	mov	sp, r7
   14b00:	bdb0      	pop	{r4, r5, r7, pc}
   14b02:	bf00      	nop
   14b04:	f3af 8000 	nop.w
   14b08:	54442d18 	.word	0x54442d18
   14b0c:	3ff921fb 	.word	0x3ff921fb

00014b10 <fly_to>:

static void fly_to(uint8_t wp) { 
   14b10:	b580      	push	{r7, lr}
   14b12:	b082      	sub	sp, #8
   14b14:	af00      	add	r7, sp, #0
   14b16:	4603      	mov	r3, r0
   14b18:	71fb      	strb	r3, [r7, #7]
  fly_to_xy(waypoints[wp].x, waypoints[wp].y);
   14b1a:	79f9      	ldrb	r1, [r7, #7]
   14b1c:	f240 5278 	movw	r2, #1400	; 0x578
   14b20:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14b24:	460b      	mov	r3, r1
   14b26:	005b      	lsls	r3, r3, #1
   14b28:	440b      	add	r3, r1
   14b2a:	009b      	lsls	r3, r3, #2
   14b2c:	4413      	add	r3, r2
   14b2e:	6818      	ldr	r0, [r3, #0]
   14b30:	79f9      	ldrb	r1, [r7, #7]
   14b32:	f240 5278 	movw	r2, #1400	; 0x578
   14b36:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14b3a:	460b      	mov	r3, r1
   14b3c:	005b      	lsls	r3, r3, #1
   14b3e:	440b      	add	r3, r1
   14b40:	009b      	lsls	r3, r3, #2
   14b42:	4413      	add	r3, r2
   14b44:	3304      	adds	r3, #4
   14b46:	681b      	ldr	r3, [r3, #0]
   14b48:	4619      	mov	r1, r3
   14b4a:	f7ff ff91 	bl	14a70 <fly_to_xy>
}
   14b4e:	3708      	adds	r7, #8
   14b50:	46bd      	mov	sp, r7
   14b52:	bd80      	pop	{r7, pc}

00014b54 <route_to>:

static float alpha, leg;
static void route_to(uint8_t _last_wp, uint8_t wp) 
{
   14b54:	b5b0      	push	{r4, r5, r7, lr}
   14b56:	b088      	sub	sp, #32
   14b58:	af00      	add	r7, sp, #0
   14b5a:	4602      	mov	r2, r0
   14b5c:	460b      	mov	r3, r1
   14b5e:	71fa      	strb	r2, [r7, #7]
   14b60:	71bb      	strb	r3, [r7, #6]
  float last_wp_x = waypoints[_last_wp].x;
   14b62:	79f9      	ldrb	r1, [r7, #7]
   14b64:	f240 5278 	movw	r2, #1400	; 0x578
   14b68:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14b6c:	460b      	mov	r3, r1
   14b6e:	005b      	lsls	r3, r3, #1
   14b70:	440b      	add	r3, r1
   14b72:	009b      	lsls	r3, r3, #2
   14b74:	4413      	add	r3, r2
   14b76:	681b      	ldr	r3, [r3, #0]
   14b78:	61fb      	str	r3, [r7, #28]
  float last_wp_y = waypoints[_last_wp].y;
   14b7a:	79f9      	ldrb	r1, [r7, #7]
   14b7c:	f240 5278 	movw	r2, #1400	; 0x578
   14b80:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14b84:	460b      	mov	r3, r1
   14b86:	005b      	lsls	r3, r3, #1
   14b88:	440b      	add	r3, r1
   14b8a:	009b      	lsls	r3, r3, #2
   14b8c:	4413      	add	r3, r2
   14b8e:	3304      	adds	r3, #4
   14b90:	681b      	ldr	r3, [r3, #0]
   14b92:	61bb      	str	r3, [r7, #24]
  float leg_x = waypoints[wp].x - last_wp_x;
   14b94:	79b9      	ldrb	r1, [r7, #6]
   14b96:	f240 5278 	movw	r2, #1400	; 0x578
   14b9a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14b9e:	460b      	mov	r3, r1
   14ba0:	005b      	lsls	r3, r3, #1
   14ba2:	440b      	add	r3, r1
   14ba4:	009b      	lsls	r3, r3, #2
   14ba6:	4413      	add	r3, r2
   14ba8:	681b      	ldr	r3, [r3, #0]
   14baa:	4618      	mov	r0, r3
   14bac:	69f9      	ldr	r1, [r7, #28]
   14bae:	f003 fbe3 	bl	18378 <__aeabi_fsub>
   14bb2:	4603      	mov	r3, r0
   14bb4:	617b      	str	r3, [r7, #20]
  float leg_y = waypoints[wp].y - last_wp_y;
   14bb6:	79b9      	ldrb	r1, [r7, #6]
   14bb8:	f240 5278 	movw	r2, #1400	; 0x578
   14bbc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14bc0:	460b      	mov	r3, r1
   14bc2:	005b      	lsls	r3, r3, #1
   14bc4:	440b      	add	r3, r1
   14bc6:	009b      	lsls	r3, r3, #2
   14bc8:	4413      	add	r3, r2
   14bca:	3304      	adds	r3, #4
   14bcc:	681b      	ldr	r3, [r3, #0]
   14bce:	4618      	mov	r0, r3
   14bd0:	69b9      	ldr	r1, [r7, #24]
   14bd2:	f003 fbd1 	bl	18378 <__aeabi_fsub>
   14bd6:	4603      	mov	r3, r0
   14bd8:	613b      	str	r3, [r7, #16]
  float leg2 = leg_x * leg_x + leg_y * leg_y;
   14bda:	6978      	ldr	r0, [r7, #20]
   14bdc:	6979      	ldr	r1, [r7, #20]
   14bde:	f003 fcd5 	bl	1858c <__aeabi_fmul>
   14be2:	4603      	mov	r3, r0
   14be4:	461c      	mov	r4, r3
   14be6:	6938      	ldr	r0, [r7, #16]
   14be8:	6939      	ldr	r1, [r7, #16]
   14bea:	f003 fccf 	bl	1858c <__aeabi_fmul>
   14bee:	4603      	mov	r3, r0
   14bf0:	4620      	mov	r0, r4
   14bf2:	4619      	mov	r1, r3
   14bf4:	f003 fbc2 	bl	1837c <__addsf3>
   14bf8:	4603      	mov	r3, r0
   14bfa:	60fb      	str	r3, [r7, #12]
  alpha = ((estimator_x - last_wp_x) * leg_x + (estimator_y - last_wp_y) * leg_y) / leg2;
   14bfc:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14c00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c04:	681b      	ldr	r3, [r3, #0]
   14c06:	4618      	mov	r0, r3
   14c08:	69f9      	ldr	r1, [r7, #28]
   14c0a:	f003 fbb5 	bl	18378 <__aeabi_fsub>
   14c0e:	4603      	mov	r3, r0
   14c10:	4618      	mov	r0, r3
   14c12:	6979      	ldr	r1, [r7, #20]
   14c14:	f003 fcba 	bl	1858c <__aeabi_fmul>
   14c18:	4603      	mov	r3, r0
   14c1a:	461c      	mov	r4, r3
   14c1c:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   14c20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c24:	681b      	ldr	r3, [r3, #0]
   14c26:	4618      	mov	r0, r3
   14c28:	69b9      	ldr	r1, [r7, #24]
   14c2a:	f003 fba5 	bl	18378 <__aeabi_fsub>
   14c2e:	4603      	mov	r3, r0
   14c30:	4618      	mov	r0, r3
   14c32:	6939      	ldr	r1, [r7, #16]
   14c34:	f003 fcaa 	bl	1858c <__aeabi_fmul>
   14c38:	4603      	mov	r3, r0
   14c3a:	4620      	mov	r0, r4
   14c3c:	4619      	mov	r1, r3
   14c3e:	f003 fb9d 	bl	1837c <__addsf3>
   14c42:	4603      	mov	r3, r0
   14c44:	4618      	mov	r0, r3
   14c46:	68f9      	ldr	r1, [r7, #12]
   14c48:	f003 fd54 	bl	186f4 <__aeabi_fdiv>
   14c4c:	4603      	mov	r3, r0
   14c4e:	461a      	mov	r2, r3
   14c50:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14c54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c58:	601a      	str	r2, [r3, #0]
  alpha = Max(alpha, 0.);
   14c5a:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14c5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c62:	681b      	ldr	r3, [r3, #0]
   14c64:	4618      	mov	r0, r3
   14c66:	f04f 0100 	mov.w	r1, #0
   14c6a:	f003 fe41 	bl	188f0 <__aeabi_fcmpge>
   14c6e:	4603      	mov	r3, r0
   14c70:	2b00      	cmp	r3, #0
   14c72:	d005      	beq.n	14c80 <route_to+0x12c>
   14c74:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14c78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c7c:	681a      	ldr	r2, [r3, #0]
   14c7e:	e001      	b.n	14c84 <route_to+0x130>
   14c80:	f04f 0200 	mov.w	r2, #0
   14c84:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14c88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c8c:	601a      	str	r2, [r3, #0]
  leg = sqrt(leg2);
   14c8e:	68f8      	ldr	r0, [r7, #12]
   14c90:	f002 ffe8 	bl	17c64 <__aeabi_f2d>
   14c94:	4602      	mov	r2, r0
   14c96:	460b      	mov	r3, r1
   14c98:	4610      	mov	r0, r2
   14c9a:	4619      	mov	r1, r3
   14c9c:	f001 f9f4 	bl	16088 <pp_sqrt>
   14ca0:	4602      	mov	r2, r0
   14ca2:	460b      	mov	r3, r1
   14ca4:	4610      	mov	r0, r2
   14ca6:	4619      	mov	r1, r3
   14ca8:	f003 fb12 	bl	182d0 <__aeabi_d2f>
   14cac:	4602      	mov	r2, r0
   14cae:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   14cb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cb6:	601a      	str	r2, [r3, #0]
  alpha += Max(carrot / leg, 0.); /* carrot computed in approaching() */
   14cb8:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14cbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cc0:	681b      	ldr	r3, [r3, #0]
   14cc2:	4618      	mov	r0, r3
   14cc4:	f002 ffce 	bl	17c64 <__aeabi_f2d>
   14cc8:	4604      	mov	r4, r0
   14cca:	460d      	mov	r5, r1
   14ccc:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   14cd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cd4:	681a      	ldr	r2, [r3, #0]
   14cd6:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   14cda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cde:	681b      	ldr	r3, [r3, #0]
   14ce0:	4610      	mov	r0, r2
   14ce2:	4619      	mov	r1, r3
   14ce4:	f003 fd06 	bl	186f4 <__aeabi_fdiv>
   14ce8:	4603      	mov	r3, r0
   14cea:	4618      	mov	r0, r3
   14cec:	f04f 0100 	mov.w	r1, #0
   14cf0:	f003 fdfe 	bl	188f0 <__aeabi_fcmpge>
   14cf4:	4603      	mov	r3, r0
   14cf6:	2b00      	cmp	r3, #0
   14cf8:	d014      	beq.n	14d24 <route_to+0x1d0>
   14cfa:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   14cfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d02:	681a      	ldr	r2, [r3, #0]
   14d04:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   14d08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d0c:	681b      	ldr	r3, [r3, #0]
   14d0e:	4610      	mov	r0, r2
   14d10:	4619      	mov	r1, r3
   14d12:	f003 fcef 	bl	186f4 <__aeabi_fdiv>
   14d16:	4603      	mov	r3, r0
   14d18:	4618      	mov	r0, r3
   14d1a:	f002 ffa3 	bl	17c64 <__aeabi_f2d>
   14d1e:	4602      	mov	r2, r0
   14d20:	460b      	mov	r3, r1
   14d22:	e003      	b.n	14d2c <route_to+0x1d8>
   14d24:	f04f 0200 	mov.w	r2, #0
   14d28:	f04f 0300 	mov.w	r3, #0
   14d2c:	4620      	mov	r0, r4
   14d2e:	4629      	mov	r1, r5
   14d30:	f002 fe3a 	bl	179a8 <__adddf3>
   14d34:	4602      	mov	r2, r0
   14d36:	460b      	mov	r3, r1
   14d38:	4610      	mov	r0, r2
   14d3a:	4619      	mov	r1, r3
   14d3c:	f003 fac8 	bl	182d0 <__aeabi_d2f>
   14d40:	4602      	mov	r2, r0
   14d42:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14d46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d4a:	601a      	str	r2, [r3, #0]
  alpha = Min(1., alpha);
   14d4c:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14d50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d54:	681b      	ldr	r3, [r3, #0]
   14d56:	4618      	mov	r0, r3
   14d58:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   14d5c:	f003 fdc8 	bl	188f0 <__aeabi_fcmpge>
   14d60:	4603      	mov	r3, r0
   14d62:	2b00      	cmp	r3, #0
   14d64:	d002      	beq.n	14d6c <route_to+0x218>
   14d66:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   14d6a:	e004      	b.n	14d76 <route_to+0x222>
   14d6c:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14d70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d74:	681a      	ldr	r2, [r3, #0]
   14d76:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14d7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d7e:	601a      	str	r2, [r3, #0]
  fly_to_xy(last_wp_x + alpha*leg_x, last_wp_y + alpha*leg_y);
   14d80:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14d84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d88:	681b      	ldr	r3, [r3, #0]
   14d8a:	4618      	mov	r0, r3
   14d8c:	6979      	ldr	r1, [r7, #20]
   14d8e:	f003 fbfd 	bl	1858c <__aeabi_fmul>
   14d92:	4603      	mov	r3, r0
   14d94:	4618      	mov	r0, r3
   14d96:	69f9      	ldr	r1, [r7, #28]
   14d98:	f003 faf0 	bl	1837c <__addsf3>
   14d9c:	4603      	mov	r3, r0
   14d9e:	461c      	mov	r4, r3
   14da0:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14da4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14da8:	681b      	ldr	r3, [r3, #0]
   14daa:	4618      	mov	r0, r3
   14dac:	6939      	ldr	r1, [r7, #16]
   14dae:	f003 fbed 	bl	1858c <__aeabi_fmul>
   14db2:	4603      	mov	r3, r0
   14db4:	4618      	mov	r0, r3
   14db6:	69b9      	ldr	r1, [r7, #24]
   14db8:	f003 fae0 	bl	1837c <__addsf3>
   14dbc:	4603      	mov	r3, r0
   14dbe:	4620      	mov	r0, r4
   14dc0:	4619      	mov	r1, r3
   14dc2:	f7ff fe55 	bl	14a70 <fly_to_xy>
}
   14dc6:	3720      	adds	r7, #32
   14dc8:	46bd      	mov	sp, r7
   14dca:	bdb0      	pop	{r4, r5, r7, pc}

00014dcc <compute_dist2_to_home>:
  float last_alt = waypoints[_last_wp].a;
  desired_altitude = last_alt + alpha * (waypoints[wp].a - last_alt);
  pre_climb = NOMINAL_AIRSPEED * (waypoints[wp].a - last_alt) / leg;
}*/

static inline void compute_dist2_to_home(void) {
   14dcc:	b590      	push	{r4, r7, lr}
   14dce:	b083      	sub	sp, #12
   14dd0:	af00      	add	r7, sp, #0
  float ph_x = waypoints[WP_HOME].x - estimator_x;
   14dd2:	f240 5378 	movw	r3, #1400	; 0x578
   14dd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dda:	681a      	ldr	r2, [r3, #0]
   14ddc:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14de0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14de4:	681b      	ldr	r3, [r3, #0]
   14de6:	4610      	mov	r0, r2
   14de8:	4619      	mov	r1, r3
   14dea:	f003 fac5 	bl	18378 <__aeabi_fsub>
   14dee:	4603      	mov	r3, r0
   14df0:	607b      	str	r3, [r7, #4]
  float ph_y = waypoints[WP_HOME].y - estimator_y;
   14df2:	f240 5378 	movw	r3, #1400	; 0x578
   14df6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dfa:	685a      	ldr	r2, [r3, #4]
   14dfc:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   14e00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e04:	681b      	ldr	r3, [r3, #0]
   14e06:	4610      	mov	r0, r2
   14e08:	4619      	mov	r1, r3
   14e0a:	f003 fab5 	bl	18378 <__aeabi_fsub>
   14e0e:	4603      	mov	r3, r0
   14e10:	603b      	str	r3, [r7, #0]
  dist2_to_home = ph_x*ph_x + ph_y *ph_y;
   14e12:	6878      	ldr	r0, [r7, #4]
   14e14:	6879      	ldr	r1, [r7, #4]
   14e16:	f003 fbb9 	bl	1858c <__aeabi_fmul>
   14e1a:	4603      	mov	r3, r0
   14e1c:	461c      	mov	r4, r3
   14e1e:	6838      	ldr	r0, [r7, #0]
   14e20:	6839      	ldr	r1, [r7, #0]
   14e22:	f003 fbb3 	bl	1858c <__aeabi_fmul>
   14e26:	4603      	mov	r3, r0
   14e28:	4620      	mov	r0, r4
   14e2a:	4619      	mov	r1, r3
   14e2c:	f003 faa6 	bl	1837c <__addsf3>
   14e30:	4603      	mov	r3, r0
   14e32:	461a      	mov	r2, r3
   14e34:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
   14e38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e3c:	601a      	str	r2, [r3, #0]
  too_far_from_home = dist2_to_home > (MAX_DIST_FROM_HOME*MAX_DIST_FROM_HOME);
   14e3e:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
   14e42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e46:	681b      	ldr	r3, [r3, #0]
   14e48:	2201      	movs	r2, #1
   14e4a:	4614      	mov	r4, r2
   14e4c:	4618      	mov	r0, r3
   14e4e:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   14e52:	f6c4 0174 	movt	r1, #18548	; 0x4874
   14e56:	f003 fd55 	bl	18904 <__aeabi_fcmpgt>
   14e5a:	4603      	mov	r3, r0
   14e5c:	2b00      	cmp	r3, #0
   14e5e:	d101      	bne.n	14e64 <compute_dist2_to_home+0x98>
   14e60:	2300      	movs	r3, #0
   14e62:	461c      	mov	r4, r3
   14e64:	b2e3      	uxtb	r3, r4
   14e66:	461a      	mov	r2, r3
   14e68:	f24c 63ac 	movw	r3, #50860	; 0xc6ac
   14e6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e70:	701a      	strb	r2, [r3, #0]
}
   14e72:	370c      	adds	r7, #12
   14e74:	46bd      	mov	sp, r7
   14e76:	bd90      	pop	{r4, r7, pc}

00014e78 <nav_home>:

void nav_home(void) {
   14e78:	b580      	push	{r7, lr}
   14e7a:	af00      	add	r7, sp, #0
  //Circle(WP_HOME, 50); /* FIXME: radius should be defined elsewhere */
  nav_pitch = 0.; /* Nominal speed */ 
   14e7c:	f24c 639c 	movw	r3, #50844	; 0xc69c
   14e80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e84:	f04f 0200 	mov.w	r2, #0
   14e88:	601a      	str	r2, [r3, #0]
  vertical_mode = VERTICAL_MODE_AUTO_ALT;
   14e8a:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   14e8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e92:	2203      	movs	r2, #3
   14e94:	701a      	strb	r2, [r3, #0]
  desired_altitude = GROUND_ALT+50;
   14e96:	f240 5374 	movw	r3, #1396	; 0x574
   14e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e9e:	f04f 0200 	mov.w	r2, #0
   14ea2:	f2c4 322f 	movt	r2, #17199	; 0x432f
   14ea6:	601a      	str	r2, [r3, #0]
  compute_dist2_to_home();
   14ea8:	f7ff ff90 	bl	14dcc <compute_dist2_to_home>
  dist2_to_wp = dist2_to_home;
   14eac:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
   14eb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14eb4:	681a      	ldr	r2, [r3, #0]
   14eb6:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
   14eba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ebe:	601a      	str	r2, [r3, #0]
}
   14ec0:	bd80      	pop	{r7, pc}
   14ec2:	bf00      	nop

00014ec4 <nav_update>:

void nav_update(void) {
   14ec4:	b580      	push	{r7, lr}
   14ec6:	af00      	add	r7, sp, #0
  compute_dist2_to_home();
   14ec8:	f7ff ff80 	bl	14dcc <compute_dist2_to_home>

  auto_nav();
   14ecc:	f7fd fc0c 	bl	126e8 <auto_nav>
}
   14ed0:	bd80      	pop	{r7, pc}
   14ed2:	bf00      	nop

00014ed4 <nav_init>:


void nav_init(void) {
   14ed4:	b480      	push	{r7}
   14ed6:	af00      	add	r7, sp, #0
  nav_block = 0;
   14ed8:	f24c 6371 	movw	r3, #50801	; 0xc671
   14edc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ee0:	2200      	movs	r2, #0
   14ee2:	701a      	strb	r2, [r3, #0]
  nav_stage = 0;
   14ee4:	f24c 6370 	movw	r3, #50800	; 0xc670
   14ee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14eec:	2200      	movs	r2, #0
   14eee:	701a      	strb	r2, [r3, #0]
}
   14ef0:	46bd      	mov	sp, r7
   14ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
   14ef6:	4770      	bx	lr

00014ef8 <uart0_transmit>:

static uint8_t           tx_head1; /* next free in buf */
static volatile uint8_t  tx_tail1; /* next char to send */
static uint8_t           tx_buf1[ TX_BUF_SIZE ];

void uart0_transmit( unsigned char data ) {
   14ef8:	b480      	push	{r7}
   14efa:	b083      	sub	sp, #12
   14efc:	af00      	add	r7, sp, #0
   14efe:	4603      	mov	r3, r0
   14f00:	71fb      	strb	r3, [r7, #7]
  if (UCSR0B & _BV(TXCIE)) {
   14f02:	f242 030a 	movw	r3, #8202	; 0x200a
   14f06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f0a:	781b      	ldrb	r3, [r3, #0]
   14f0c:	b2db      	uxtb	r3, r3
   14f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14f12:	2b00      	cmp	r3, #0
   14f14:	d028      	beq.n	14f68 <uart0_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail0 == tx_head0 + 1) { /* BUF_SIZE = 256 */
   14f16:	f24c 63c5 	movw	r3, #50885	; 0xc6c5
   14f1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f1e:	781b      	ldrb	r3, [r3, #0]
   14f20:	b2db      	uxtb	r3, r3
   14f22:	461a      	mov	r2, r3
   14f24:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   14f28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f2c:	781b      	ldrb	r3, [r3, #0]
   14f2e:	3301      	adds	r3, #1
   14f30:	429a      	cmp	r2, r3
   14f32:	d100      	bne.n	14f36 <uart0_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14f34:	e02c      	b.n	14f90 <uart0_transmit+0x98>
    }
    tx_buf0[tx_head0] = data;
   14f36:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   14f3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f3e:	781b      	ldrb	r3, [r3, #0]
   14f40:	461a      	mov	r2, r3
   14f42:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
   14f46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f4a:	79f9      	ldrb	r1, [r7, #7]
   14f4c:	5499      	strb	r1, [r3, r2]
    tx_head0++; /* BUF_SIZE = 256 */
   14f4e:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   14f52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f56:	781b      	ldrb	r3, [r3, #0]
   14f58:	3301      	adds	r3, #1
   14f5a:	b2da      	uxtb	r2, r3
   14f5c:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   14f60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f64:	701a      	strb	r2, [r3, #0]
   14f66:	e013      	b.n	14f90 <uart0_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR0 = data;
   14f68:	f242 030c 	movw	r3, #8204	; 0x200c
   14f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f70:	79fa      	ldrb	r2, [r7, #7]
   14f72:	701a      	strb	r2, [r3, #0]
    sbi(UCSR0B, TXCIE);
   14f74:	f242 030a 	movw	r3, #8202	; 0x200a
   14f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f7c:	f242 020a 	movw	r2, #8202	; 0x200a
   14f80:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14f84:	7812      	ldrb	r2, [r2, #0]
   14f86:	b2d2      	uxtb	r2, r2
   14f88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14f8c:	b2d2      	uxtb	r2, r2
   14f8e:	701a      	strb	r2, [r3, #0]
  }
}
   14f90:	370c      	adds	r7, #12
   14f92:	46bd      	mov	sp, r7
   14f94:	f85d 7b04 	ldr.w	r7, [sp], #4
   14f98:	4770      	bx	lr
   14f9a:	bf00      	nop

00014f9c <uart1_transmit>:

void uart1_transmit( unsigned char data ) {
   14f9c:	b480      	push	{r7}
   14f9e:	b083      	sub	sp, #12
   14fa0:	af00      	add	r7, sp, #0
   14fa2:	4603      	mov	r3, r0
   14fa4:	71fb      	strb	r3, [r7, #7]
  if (UCSR1B & _BV(TXCIE)) {
   14fa6:	f242 039a 	movw	r3, #8346	; 0x209a
   14faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fae:	781b      	ldrb	r3, [r3, #0]
   14fb0:	b2db      	uxtb	r3, r3
   14fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14fb6:	2b00      	cmp	r3, #0
   14fb8:	d028      	beq.n	1500c <uart1_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail1 == tx_head1 + 1) { /* BUF_SIZE = 256 */
   14fba:	f24c 73c9 	movw	r3, #51145	; 0xc7c9
   14fbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14fc2:	781b      	ldrb	r3, [r3, #0]
   14fc4:	b2db      	uxtb	r3, r3
   14fc6:	461a      	mov	r2, r3
   14fc8:	f24c 73c8 	movw	r3, #51144	; 0xc7c8
   14fcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14fd0:	781b      	ldrb	r3, [r3, #0]
   14fd2:	3301      	adds	r3, #1
   14fd4:	429a      	cmp	r2, r3
   14fd6:	d100      	bne.n	14fda <uart1_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14fd8:	e02c      	b.n	15034 <uart1_transmit+0x98>
    }
    tx_buf1[tx_head1] = data;
   14fda:	f24c 73c8 	movw	r3, #51144	; 0xc7c8
   14fde:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14fe2:	781b      	ldrb	r3, [r3, #0]
   14fe4:	461a      	mov	r2, r3
   14fe6:	f24c 73cc 	movw	r3, #51148	; 0xc7cc
   14fea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14fee:	79f9      	ldrb	r1, [r7, #7]
   14ff0:	5499      	strb	r1, [r3, r2]
    tx_head1++; /* BUF_SIZE = 256 */
   14ff2:	f24c 73c8 	movw	r3, #51144	; 0xc7c8
   14ff6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ffa:	781b      	ldrb	r3, [r3, #0]
   14ffc:	3301      	adds	r3, #1
   14ffe:	b2da      	uxtb	r2, r3
   15000:	f24c 73c8 	movw	r3, #51144	; 0xc7c8
   15004:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15008:	701a      	strb	r2, [r3, #0]
   1500a:	e013      	b.n	15034 <uart1_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR1 = data;
   1500c:	f242 039c 	movw	r3, #8348	; 0x209c
   15010:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15014:	79fa      	ldrb	r2, [r7, #7]
   15016:	701a      	strb	r2, [r3, #0]
    sbi(UCSR1B, TXCIE);
   15018:	f242 039a 	movw	r3, #8346	; 0x209a
   1501c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15020:	f242 029a 	movw	r2, #8346	; 0x209a
   15024:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15028:	7812      	ldrb	r2, [r2, #0]
   1502a:	b2d2      	uxtb	r2, r2
   1502c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   15030:	b2d2      	uxtb	r2, r2
   15032:	701a      	strb	r2, [r3, #0]
  }
}
   15034:	370c      	adds	r7, #12
   15036:	46bd      	mov	sp, r7
   15038:	f85d 7b04 	ldr.w	r7, [sp], #4
   1503c:	4770      	bx	lr
   1503e:	bf00      	nop

00015040 <uart0_print_string>:


void uart0_print_string(const uint8_t* s) {
   15040:	b580      	push	{r7, lr}
   15042:	b084      	sub	sp, #16
   15044:	af00      	add	r7, sp, #0
   15046:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   15048:	2300      	movs	r3, #0
   1504a:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   1504c:	e009      	b.n	15062 <uart0_print_string+0x22>
    uart0_transmit(s[i]);
   1504e:	7bfb      	ldrb	r3, [r7, #15]
   15050:	687a      	ldr	r2, [r7, #4]
   15052:	4413      	add	r3, r2
   15054:	781b      	ldrb	r3, [r3, #0]
   15056:	4618      	mov	r0, r3
   15058:	f7ff ff4e 	bl	14ef8 <uart0_transmit>
    i++;
   1505c:	7bfb      	ldrb	r3, [r7, #15]
   1505e:	3301      	adds	r3, #1
   15060:	73fb      	strb	r3, [r7, #15]
}


void uart0_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   15062:	7bfb      	ldrb	r3, [r7, #15]
   15064:	687a      	ldr	r2, [r7, #4]
   15066:	4413      	add	r3, r2
   15068:	781b      	ldrb	r3, [r3, #0]
   1506a:	2b00      	cmp	r3, #0
   1506c:	d1ef      	bne.n	1504e <uart0_print_string+0xe>
    uart0_transmit(s[i]);
    i++;
  }
}
   1506e:	3710      	adds	r7, #16
   15070:	46bd      	mov	sp, r7
   15072:	bd80      	pop	{r7, pc}

00015074 <uart0_print_hex>:

void uart0_print_hex(const uint8_t c) {
   15074:	b590      	push	{r4, r7, lr}
   15076:	b089      	sub	sp, #36	; 0x24
   15078:	af00      	add	r7, sp, #0
   1507a:	4603      	mov	r3, r0
   1507c:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   1507e:	f648 338c 	movw	r3, #35724	; 0x8b8c
   15082:	f2c0 0301 	movt	r3, #1
   15086:	f107 040c 	add.w	r4, r7, #12
   1508a:	6818      	ldr	r0, [r3, #0]
   1508c:	6859      	ldr	r1, [r3, #4]
   1508e:	689a      	ldr	r2, [r3, #8]
   15090:	68db      	ldr	r3, [r3, #12]
   15092:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   15094:	79fb      	ldrb	r3, [r7, #7]
   15096:	091b      	lsrs	r3, r3, #4
   15098:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   1509a:	79fb      	ldrb	r3, [r7, #7]
   1509c:	f003 030f 	and.w	r3, r3, #15
   150a0:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
    high = 15;
   150a2:	230f      	movs	r3, #15
   150a4:	77fb      	strb	r3, [r7, #31]
    low = 15;
   150a6:	230f      	movs	r3, #15
   150a8:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */
    uart0_transmit(hex[high]);
   150aa:	7ffb      	ldrb	r3, [r7, #31]
   150ac:	f107 0220 	add.w	r2, r7, #32
   150b0:	4413      	add	r3, r2
   150b2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   150b6:	4618      	mov	r0, r3
   150b8:	f7ff ff1e 	bl	14ef8 <uart0_transmit>
  uart0_transmit(hex[low]);
   150bc:	7fbb      	ldrb	r3, [r7, #30]
   150be:	f107 0220 	add.w	r2, r7, #32
   150c2:	4413      	add	r3, r2
   150c4:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   150c8:	4618      	mov	r0, r3
   150ca:	f7ff ff15 	bl	14ef8 <uart0_transmit>
}
   150ce:	3724      	adds	r7, #36	; 0x24
   150d0:	46bd      	mov	sp, r7
   150d2:	bd90      	pop	{r4, r7, pc}

000150d4 <__vector_20>:


SIGNAL(SIG_UART0_TRANS) {
   150d4:	b480      	push	{r7}
   150d6:	af00      	add	r7, sp, #0
  if (tx_head0 == tx_tail0) {
   150d8:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   150dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   150e0:	781a      	ldrb	r2, [r3, #0]
   150e2:	f24c 63c5 	movw	r3, #50885	; 0xc6c5
   150e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   150ea:	781b      	ldrb	r3, [r3, #0]
   150ec:	b2db      	uxtb	r3, r3
   150ee:	429a      	cmp	r2, r3
   150f0:	d10e      	bne.n	15110 <__vector_20+0x3c>
    /* Nothing more to send */
    cbi(UCSR0B, TXCIE); /* disable interrupt */
   150f2:	f242 030a 	movw	r3, #8202	; 0x200a
   150f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150fa:	f242 020a 	movw	r2, #8202	; 0x200a
   150fe:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15102:	7812      	ldrb	r2, [r2, #0]
   15104:	b2d2      	uxtb	r2, r2
   15106:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1510a:	b2d2      	uxtb	r2, r2
   1510c:	701a      	strb	r2, [r3, #0]
   1510e:	e01d      	b.n	1514c <__vector_20+0x78>
  } else {
    UDR0 = tx_buf0[tx_tail0];
   15110:	f242 030c 	movw	r3, #8204	; 0x200c
   15114:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15118:	f24c 62c5 	movw	r2, #50885	; 0xc6c5
   1511c:	f2c2 0204 	movt	r2, #8196	; 0x2004
   15120:	7812      	ldrb	r2, [r2, #0]
   15122:	b2d2      	uxtb	r2, r2
   15124:	4611      	mov	r1, r2
   15126:	f24c 62c8 	movw	r2, #50888	; 0xc6c8
   1512a:	f2c2 0204 	movt	r2, #8196	; 0x2004
   1512e:	5c52      	ldrb	r2, [r2, r1]
   15130:	701a      	strb	r2, [r3, #0]
    tx_tail0++; /* warning tx_buf_len is 256 */
   15132:	f24c 63c5 	movw	r3, #50885	; 0xc6c5
   15136:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1513a:	781b      	ldrb	r3, [r3, #0]
   1513c:	b2db      	uxtb	r3, r3
   1513e:	3301      	adds	r3, #1
   15140:	b2da      	uxtb	r2, r3
   15142:	f24c 63c5 	movw	r3, #50885	; 0xc6c5
   15146:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1514a:	701a      	strb	r2, [r3, #0]
  }
}
   1514c:	46bd      	mov	sp, r7
   1514e:	f85d 7b04 	ldr.w	r7, [sp], #4
   15152:	4770      	bx	lr

00015154 <__vector_32>:

SIGNAL(SIG_UART1_TRANS) {
   15154:	b480      	push	{r7}
   15156:	af00      	add	r7, sp, #0
  if (tx_head1 == tx_tail1) {
   15158:	f24c 73c8 	movw	r3, #51144	; 0xc7c8
   1515c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15160:	781a      	ldrb	r2, [r3, #0]
   15162:	f24c 73c9 	movw	r3, #51145	; 0xc7c9
   15166:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1516a:	781b      	ldrb	r3, [r3, #0]
   1516c:	b2db      	uxtb	r3, r3
   1516e:	429a      	cmp	r2, r3
   15170:	d10e      	bne.n	15190 <__vector_32+0x3c>
    /* Nothing more to send */
    cbi(UCSR1B, TXCIE); /* disable interrupt */
   15172:	f242 039a 	movw	r3, #8346	; 0x209a
   15176:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1517a:	f242 029a 	movw	r2, #8346	; 0x209a
   1517e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15182:	7812      	ldrb	r2, [r2, #0]
   15184:	b2d2      	uxtb	r2, r2
   15186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1518a:	b2d2      	uxtb	r2, r2
   1518c:	701a      	strb	r2, [r3, #0]
   1518e:	e01d      	b.n	151cc <__vector_32+0x78>
  } else {
    UDR1 = tx_buf1[tx_tail1];
   15190:	f242 039c 	movw	r3, #8348	; 0x209c
   15194:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15198:	f24c 72c9 	movw	r2, #51145	; 0xc7c9
   1519c:	f2c2 0204 	movt	r2, #8196	; 0x2004
   151a0:	7812      	ldrb	r2, [r2, #0]
   151a2:	b2d2      	uxtb	r2, r2
   151a4:	4611      	mov	r1, r2
   151a6:	f24c 72cc 	movw	r2, #51148	; 0xc7cc
   151aa:	f2c2 0204 	movt	r2, #8196	; 0x2004
   151ae:	5c52      	ldrb	r2, [r2, r1]
   151b0:	701a      	strb	r2, [r3, #0]
    tx_tail1++; /* warning tx_buf_len is 256 */
   151b2:	f24c 73c9 	movw	r3, #51145	; 0xc7c9
   151b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151ba:	781b      	ldrb	r3, [r3, #0]
   151bc:	b2db      	uxtb	r3, r3
   151be:	3301      	adds	r3, #1
   151c0:	b2da      	uxtb	r2, r3
   151c2:	f24c 73c9 	movw	r3, #51145	; 0xc7c9
   151c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151ca:	701a      	strb	r2, [r3, #0]
  }
}
   151cc:	46bd      	mov	sp, r7
   151ce:	f85d 7b04 	ldr.w	r7, [sp], #4
   151d2:	4770      	bx	lr

000151d4 <uart0_init>:

void uart0_init( void ) {
   151d4:	b480      	push	{r7}
   151d6:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR0H = 0; 
   151d8:	f242 0390 	movw	r3, #8336	; 0x2090
   151dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151e0:	2200      	movs	r2, #0
   151e2:	701a      	strb	r2, [r3, #0]
  UBRR0L = 25; // 38.4
   151e4:	f242 0309 	movw	r3, #8201	; 0x2009
   151e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151ec:	2219      	movs	r2, #25
   151ee:	701a      	strb	r2, [r3, #0]
  // UBRR0L = 103; //9600
  /* single speed */ 
  UCSR0A = 0; 
   151f0:	f242 030b 	movw	r3, #8203	; 0x200b
   151f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151f8:	2200      	movs	r2, #0
   151fa:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR0B = _BV(RXEN) | _BV(TXEN);
   151fc:	f242 030a 	movw	r3, #8202	; 0x200a
   15200:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15204:	2218      	movs	r2, #24
   15206:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR0C = _BV(UCSZ1) | _BV(UCSZ0);
   15208:	f242 0395 	movw	r3, #8341	; 0x2095
   1520c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15210:	2206      	movs	r2, #6
   15212:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR0B, RXCIE ); 
   15214:	f242 030a 	movw	r3, #8202	; 0x200a
   15218:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1521c:	f242 020a 	movw	r2, #8202	; 0x200a
   15220:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15224:	7812      	ldrb	r2, [r2, #0]
   15226:	b2d2      	uxtb	r2, r2
   15228:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1522c:	b2d2      	uxtb	r2, r2
   1522e:	701a      	strb	r2, [r3, #0]
}
   15230:	46bd      	mov	sp, r7
   15232:	f85d 7b04 	ldr.w	r7, [sp], #4
   15236:	4770      	bx	lr

00015238 <uart1_init>:

void uart1_init( void ) {
   15238:	b480      	push	{r7}
   1523a:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR1H = 0; 
   1523c:	f242 0398 	movw	r3, #8344	; 0x2098
   15240:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15244:	2200      	movs	r2, #0
   15246:	701a      	strb	r2, [r3, #0]
  UBRR1L = 25; // 38.4
   15248:	f242 0399 	movw	r3, #8345	; 0x2099
   1524c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15250:	2219      	movs	r2, #25
   15252:	701a      	strb	r2, [r3, #0]
  // UBRR1L = 103; //9600


  /* single speed */ 
  UCSR1A = 0; 
   15254:	f242 039b 	movw	r3, #8347	; 0x209b
   15258:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1525c:	2200      	movs	r2, #0
   1525e:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR1B = _BV(RXEN) | _BV(TXEN);
   15260:	f242 039a 	movw	r3, #8346	; 0x209a
   15264:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15268:	2218      	movs	r2, #24
   1526a:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR1C = _BV(UCSZ1) | _BV(UCSZ0);
   1526c:	f242 039d 	movw	r3, #8349	; 0x209d
   15270:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15274:	2206      	movs	r2, #6
   15276:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR1B, RXCIE ); 
   15278:	f242 039a 	movw	r3, #8346	; 0x209a
   1527c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15280:	f242 029a 	movw	r2, #8346	; 0x209a
   15284:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15288:	7812      	ldrb	r2, [r2, #0]
   1528a:	b2d2      	uxtb	r2, r2
   1528c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   15290:	b2d2      	uxtb	r2, r2
   15292:	701a      	strb	r2, [r3, #0]
}
   15294:	46bd      	mov	sp, r7
   15296:	f85d 7b04 	ldr.w	r7, [sp], #4
   1529a:	4770      	bx	lr
   1529c:	0000      	movs	r0, r0
	...

000152a0 <estimator_init>:
  estimator_theta_dot = theta_dot; \
}

inline void estimator_update_lls( void );

void estimator_init( void ) {
   152a0:	b480      	push	{r7}
   152a2:	af00      	add	r7, sp, #0

  EstimatorSetPos (0., 0., 0.);
   152a4:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   152a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152ac:	f04f 0200 	mov.w	r2, #0
   152b0:	601a      	str	r2, [r3, #0]
   152b2:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   152b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152ba:	f04f 0200 	mov.w	r2, #0
   152be:	601a      	str	r2, [r3, #0]
   152c0:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   152c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152c8:	f04f 0200 	mov.w	r2, #0
   152cc:	601a      	str	r2, [r3, #0]

  EstimatorSetAtt (0., 0., 0);
   152ce:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   152d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152d6:	f04f 0200 	mov.w	r2, #0
   152da:	601a      	str	r2, [r3, #0]
   152dc:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
   152e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152e4:	f04f 0200 	mov.w	r2, #0
   152e8:	601a      	str	r2, [r3, #0]
   152ea:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   152ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152f2:	f04f 0200 	mov.w	r2, #0
   152f6:	601a      	str	r2, [r3, #0]

  EstimatorSetSpeedPol ( 0., 0., 0.);
   152f8:	f64c 1304 	movw	r3, #51460	; 0xc904
   152fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15300:	f04f 0200 	mov.w	r2, #0
   15304:	601a      	str	r2, [r3, #0]
   15306:	f64c 1308 	movw	r3, #51464	; 0xc908
   1530a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1530e:	f04f 0200 	mov.w	r2, #0
   15312:	601a      	str	r2, [r3, #0]
   15314:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   15318:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1531c:	f04f 0200 	mov.w	r2, #0
   15320:	601a      	str	r2, [r3, #0]

  EstimatorSetRotSpeed (0., 0., 0.);
   15322:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   15326:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1532a:	f04f 0200 	mov.w	r2, #0
   1532e:	601a      	str	r2, [r3, #0]
   15330:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   15334:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15338:	f04f 0200 	mov.w	r2, #0
   1533c:	601a      	str	r2, [r3, #0]
   1533e:	f64c 03f8 	movw	r3, #51448	; 0xc8f8
   15342:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15346:	f04f 0200 	mov.w	r2, #0
   1534a:	601a      	str	r2, [r3, #0]

  estimator_flight_time = 0;
   1534c:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   15350:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15354:	2200      	movs	r2, #0
   15356:	801a      	strh	r2, [r3, #0]

  estimator_rad_of_ir = ir_rad_of_ir;
   15358:	f240 5348 	movw	r3, #1352	; 0x548
   1535c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15360:	681a      	ldr	r2, [r3, #0]
   15362:	f64c 130c 	movw	r3, #51468	; 0xc90c
   15366:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1536a:	601a      	str	r2, [r3, #0]
}
   1536c:	46bd      	mov	sp, r7
   1536e:	f85d 7b04 	ldr.w	r7, [sp], #4
   15372:	4770      	bx	lr

00015374 <estimator_update_state_infrared>:

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
   15374:	b580      	push	{r7, lr}
   15376:	b082      	sub	sp, #8
   15378:	af00      	add	r7, sp, #0
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   1537a:	f240 533c 	movw	r3, #1340	; 0x53c
   1537e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15382:	781b      	ldrb	r3, [r3, #0]
    estimator_rad_of_ir : ir_rad_of_ir;
   15384:	2b01      	cmp	r3, #1
   15386:	d105      	bne.n	15394 <estimator_update_state_infrared+0x20>
   15388:	f64c 130c 	movw	r3, #51468	; 0xc90c
   1538c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15390:	681b      	ldr	r3, [r3, #0]
   15392:	e004      	b.n	1539e <estimator_update_state_infrared+0x2a>
   15394:	f240 5348 	movw	r3, #1352	; 0x548
   15398:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1539c:	681b      	ldr	r3, [r3, #0]
}

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   1539e:	607b      	str	r3, [r7, #4]
    estimator_rad_of_ir : ir_rad_of_ir;
  estimator_phi  = rad_of_ir * ir_roll;
   153a0:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
   153a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   153a8:	881b      	ldrh	r3, [r3, #0]
   153aa:	b21b      	sxth	r3, r3
   153ac:	4618      	mov	r0, r3
   153ae:	f003 f899 	bl	184e4 <__aeabi_i2f>
   153b2:	4603      	mov	r3, r0
   153b4:	4618      	mov	r0, r3
   153b6:	6879      	ldr	r1, [r7, #4]
   153b8:	f003 f8e8 	bl	1858c <__aeabi_fmul>
   153bc:	4603      	mov	r3, r0
   153be:	461a      	mov	r2, r3
   153c0:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   153c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   153c8:	601a      	str	r2, [r3, #0]

  estimator_theta = rad_of_ir * ir_pitch;
   153ca:	f24c 53ba 	movw	r3, #50618	; 0xc5ba
   153ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   153d2:	881b      	ldrh	r3, [r3, #0]
   153d4:	b21b      	sxth	r3, r3
   153d6:	4618      	mov	r0, r3
   153d8:	f003 f884 	bl	184e4 <__aeabi_i2f>
   153dc:	4603      	mov	r3, r0
   153de:	4618      	mov	r0, r3
   153e0:	6879      	ldr	r1, [r7, #4]
   153e2:	f003 f8d3 	bl	1858c <__aeabi_fmul>
   153e6:	4603      	mov	r3, r0
   153e8:	461a      	mov	r2, r3
   153ea:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   153ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   153f2:	601a      	str	r2, [r3, #0]
}
   153f4:	3708      	adds	r7, #8
   153f6:	46bd      	mov	sp, r7
   153f8:	bd80      	pop	{r7, pc}
   153fa:	bf00      	nop

000153fc <estimator_update_ir_estim>:
#define RHO 0.999 /* The higher, the slower the estimation is changing */

#define g 9.81


void estimator_update_ir_estim( void ) {
   153fc:	b5b0      	push	{r4, r5, r7, lr}
   153fe:	b084      	sub	sp, #16
   15400:	af00      	add	r7, sp, #0
  static bool_t initialized = FALSE;
  static float sum_xy, sum_xx;
  float absphi;
  float init_ir2;

  if (initialized) 
   15402:	f64c 1318 	movw	r3, #51480	; 0xc918
   15406:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1540a:	781b      	ldrb	r3, [r3, #0]
   1540c:	2b00      	cmp	r3, #0
   1540e:	f000 81e8 	beq.w	157e2 <estimator_update_ir_estim+0x3e6>
  {
    float dt = gps_ftow - last_t;
   15412:	f24c 4388 	movw	r3, #50312	; 0xc488
   15416:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1541a:	681a      	ldr	r2, [r3, #0]
   1541c:	f64c 131c 	movw	r3, #51484	; 0xc91c
   15420:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15424:	681b      	ldr	r3, [r3, #0]
   15426:	4610      	mov	r0, r2
   15428:	4619      	mov	r1, r3
   1542a:	f002 ffa5 	bl	18378 <__aeabi_fsub>
   1542e:	4603      	mov	r3, r0
   15430:	60bb      	str	r3, [r7, #8]
    if (dt > 0.1) { // Against division by zero
   15432:	68b8      	ldr	r0, [r7, #8]
   15434:	f002 fc16 	bl	17c64 <__aeabi_f2d>
   15438:	4602      	mov	r2, r0
   1543a:	460b      	mov	r3, r1
   1543c:	4610      	mov	r0, r2
   1543e:	4619      	mov	r1, r3
   15440:	a385      	add	r3, pc, #532	; (adr r3, 15658 <estimator_update_ir_estim+0x25c>)
   15442:	e9d3 2300 	ldrd	r2, r3, [r3]
   15446:	f002 fef1 	bl	1822c <__aeabi_dcmpgt>
   1544a:	4603      	mov	r3, r0
   1544c:	2b00      	cmp	r3, #0
   1544e:	d100      	bne.n	15452 <estimator_update_ir_estim+0x56>
   15450:	e219      	b.n	15886 <estimator_update_ir_estim+0x48a>
      float phi = (estimator_hspeed_dir - last_hspeed_dir); 
   15452:	f64c 1308 	movw	r3, #51464	; 0xc908
   15456:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1545a:	681a      	ldr	r2, [r3, #0]
   1545c:	f64c 1320 	movw	r3, #51488	; 0xc920
   15460:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15464:	681b      	ldr	r3, [r3, #0]
   15466:	4610      	mov	r0, r2
   15468:	4619      	mov	r1, r3
   1546a:	f002 ff85 	bl	18378 <__aeabi_fsub>
   1546e:	4603      	mov	r3, r0
   15470:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   15472:	e013      	b.n	1549c <estimator_update_ir_estim+0xa0>
   15474:	68f8      	ldr	r0, [r7, #12]
   15476:	f002 fbf5 	bl	17c64 <__aeabi_f2d>
   1547a:	4602      	mov	r2, r0
   1547c:	460b      	mov	r3, r1
   1547e:	4610      	mov	r0, r2
   15480:	4619      	mov	r1, r3
   15482:	a377      	add	r3, pc, #476	; (adr r3, 15660 <estimator_update_ir_estim+0x264>)
   15484:	e9d3 2300 	ldrd	r2, r3, [r3]
   15488:	f002 fa8c 	bl	179a4 <__aeabi_dsub>
   1548c:	4602      	mov	r2, r0
   1548e:	460b      	mov	r3, r1
   15490:	4610      	mov	r0, r2
   15492:	4619      	mov	r1, r3
   15494:	f002 ff1c 	bl	182d0 <__aeabi_d2f>
   15498:	4603      	mov	r3, r0
   1549a:	60fb      	str	r3, [r7, #12]
   1549c:	68f8      	ldr	r0, [r7, #12]
   1549e:	f002 fbe1 	bl	17c64 <__aeabi_f2d>
   154a2:	4602      	mov	r2, r0
   154a4:	460b      	mov	r3, r1
   154a6:	4610      	mov	r0, r2
   154a8:	4619      	mov	r1, r3
   154aa:	a36f      	add	r3, pc, #444	; (adr r3, 15668 <estimator_update_ir_estim+0x26c>)
   154ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   154b0:	f002 febc 	bl	1822c <__aeabi_dcmpgt>
   154b4:	4603      	mov	r3, r0
   154b6:	2b00      	cmp	r3, #0
   154b8:	d1dc      	bne.n	15474 <estimator_update_ir_estim+0x78>
   154ba:	e013      	b.n	154e4 <estimator_update_ir_estim+0xe8>
   154bc:	68f8      	ldr	r0, [r7, #12]
   154be:	f002 fbd1 	bl	17c64 <__aeabi_f2d>
   154c2:	4602      	mov	r2, r0
   154c4:	460b      	mov	r3, r1
   154c6:	4610      	mov	r0, r2
   154c8:	4619      	mov	r1, r3
   154ca:	a365      	add	r3, pc, #404	; (adr r3, 15660 <estimator_update_ir_estim+0x264>)
   154cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   154d0:	f002 fa6a 	bl	179a8 <__adddf3>
   154d4:	4602      	mov	r2, r0
   154d6:	460b      	mov	r3, r1
   154d8:	4610      	mov	r0, r2
   154da:	4619      	mov	r1, r3
   154dc:	f002 fef8 	bl	182d0 <__aeabi_d2f>
   154e0:	4603      	mov	r3, r0
   154e2:	60fb      	str	r3, [r7, #12]
   154e4:	68f8      	ldr	r0, [r7, #12]
   154e6:	f002 fbbd 	bl	17c64 <__aeabi_f2d>
   154ea:	4602      	mov	r2, r0
   154ec:	460b      	mov	r3, r1
   154ee:	4610      	mov	r0, r2
   154f0:	4619      	mov	r1, r3
   154f2:	a35f      	add	r3, pc, #380	; (adr r3, 15670 <estimator_update_ir_estim+0x274>)
   154f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   154f8:	f002 fe7a 	bl	181f0 <__aeabi_dcmplt>
   154fc:	4603      	mov	r3, r0
   154fe:	2b00      	cmp	r3, #0
   15500:	d1dc      	bne.n	154bc <estimator_update_ir_estim+0xc0>
      phi = phi/dt*NOMINAL_AIRSPEED/g; /* tan linearized */
   15502:	68f8      	ldr	r0, [r7, #12]
   15504:	68b9      	ldr	r1, [r7, #8]
   15506:	f003 f8f5 	bl	186f4 <__aeabi_fdiv>
   1550a:	4603      	mov	r3, r0
   1550c:	4618      	mov	r0, r3
   1550e:	f002 fba9 	bl	17c64 <__aeabi_f2d>
   15512:	4602      	mov	r2, r0
   15514:	460b      	mov	r3, r1
   15516:	4610      	mov	r0, r2
   15518:	4619      	mov	r1, r3
   1551a:	f04f 0200 	mov.w	r2, #0
   1551e:	f04f 0300 	mov.w	r3, #0
   15522:	f2c4 0324 	movt	r3, #16420	; 0x4024
   15526:	f002 fbf1 	bl	17d0c <__aeabi_dmul>
   1552a:	4602      	mov	r2, r0
   1552c:	460b      	mov	r3, r1
   1552e:	4610      	mov	r0, r2
   15530:	4619      	mov	r1, r3
   15532:	a351      	add	r3, pc, #324	; (adr r3, 15678 <estimator_update_ir_estim+0x27c>)
   15534:	e9d3 2300 	ldrd	r2, r3, [r3]
   15538:	f002 fd12 	bl	17f60 <__aeabi_ddiv>
   1553c:	4602      	mov	r2, r0
   1553e:	460b      	mov	r3, r1
   15540:	4610      	mov	r0, r2
   15542:	4619      	mov	r1, r3
   15544:	f002 fec4 	bl	182d0 <__aeabi_d2f>
   15548:	4603      	mov	r3, r0
   1554a:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   1554c:	e013      	b.n	15576 <estimator_update_ir_estim+0x17a>
   1554e:	68f8      	ldr	r0, [r7, #12]
   15550:	f002 fb88 	bl	17c64 <__aeabi_f2d>
   15554:	4602      	mov	r2, r0
   15556:	460b      	mov	r3, r1
   15558:	4610      	mov	r0, r2
   1555a:	4619      	mov	r1, r3
   1555c:	a340      	add	r3, pc, #256	; (adr r3, 15660 <estimator_update_ir_estim+0x264>)
   1555e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15562:	f002 fa1f 	bl	179a4 <__aeabi_dsub>
   15566:	4602      	mov	r2, r0
   15568:	460b      	mov	r3, r1
   1556a:	4610      	mov	r0, r2
   1556c:	4619      	mov	r1, r3
   1556e:	f002 feaf 	bl	182d0 <__aeabi_d2f>
   15572:	4603      	mov	r3, r0
   15574:	60fb      	str	r3, [r7, #12]
   15576:	68f8      	ldr	r0, [r7, #12]
   15578:	f002 fb74 	bl	17c64 <__aeabi_f2d>
   1557c:	4602      	mov	r2, r0
   1557e:	460b      	mov	r3, r1
   15580:	4610      	mov	r0, r2
   15582:	4619      	mov	r1, r3
   15584:	a338      	add	r3, pc, #224	; (adr r3, 15668 <estimator_update_ir_estim+0x26c>)
   15586:	e9d3 2300 	ldrd	r2, r3, [r3]
   1558a:	f002 fe4f 	bl	1822c <__aeabi_dcmpgt>
   1558e:	4603      	mov	r3, r0
   15590:	2b00      	cmp	r3, #0
   15592:	d1dc      	bne.n	1554e <estimator_update_ir_estim+0x152>
   15594:	e013      	b.n	155be <estimator_update_ir_estim+0x1c2>
   15596:	68f8      	ldr	r0, [r7, #12]
   15598:	f002 fb64 	bl	17c64 <__aeabi_f2d>
   1559c:	4602      	mov	r2, r0
   1559e:	460b      	mov	r3, r1
   155a0:	4610      	mov	r0, r2
   155a2:	4619      	mov	r1, r3
   155a4:	a32e      	add	r3, pc, #184	; (adr r3, 15660 <estimator_update_ir_estim+0x264>)
   155a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   155aa:	f002 f9fd 	bl	179a8 <__adddf3>
   155ae:	4602      	mov	r2, r0
   155b0:	460b      	mov	r3, r1
   155b2:	4610      	mov	r0, r2
   155b4:	4619      	mov	r1, r3
   155b6:	f002 fe8b 	bl	182d0 <__aeabi_d2f>
   155ba:	4603      	mov	r3, r0
   155bc:	60fb      	str	r3, [r7, #12]
   155be:	68f8      	ldr	r0, [r7, #12]
   155c0:	f002 fb50 	bl	17c64 <__aeabi_f2d>
   155c4:	4602      	mov	r2, r0
   155c6:	460b      	mov	r3, r1
   155c8:	4610      	mov	r0, r2
   155ca:	4619      	mov	r1, r3
   155cc:	a328      	add	r3, pc, #160	; (adr r3, 15670 <estimator_update_ir_estim+0x274>)
   155ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   155d2:	f002 fe0d 	bl	181f0 <__aeabi_dcmplt>
   155d6:	4603      	mov	r3, r0
   155d8:	2b00      	cmp	r3, #0
   155da:	d1dc      	bne.n	15596 <estimator_update_ir_estim+0x19a>
      estimator_ir = (float)ir_roll;
   155dc:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
   155e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155e4:	881b      	ldrh	r3, [r3, #0]
   155e6:	b21b      	sxth	r3, r3
   155e8:	4618      	mov	r0, r3
   155ea:	f002 ff7b 	bl	184e4 <__aeabi_i2f>
   155ee:	4602      	mov	r2, r0
   155f0:	f64c 1310 	movw	r3, #51472	; 0xc910
   155f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155f8:	601a      	str	r2, [r3, #0]
      estimator_rad = phi;
   155fa:	f64c 1314 	movw	r3, #51476	; 0xc914
   155fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15602:	68fa      	ldr	r2, [r7, #12]
   15604:	601a      	str	r2, [r3, #0]
      absphi = fabs(phi);
   15606:	68f8      	ldr	r0, [r7, #12]
   15608:	f04f 0100 	mov.w	r1, #0
   1560c:	f003 f95c 	bl	188c8 <__aeabi_fcmplt>
   15610:	4603      	mov	r3, r0
   15612:	2b00      	cmp	r3, #0
   15614:	d003      	beq.n	1561e <estimator_update_ir_estim+0x222>
   15616:	68fb      	ldr	r3, [r7, #12]
   15618:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   1561c:	e000      	b.n	15620 <estimator_update_ir_estim+0x224>
   1561e:	68fb      	ldr	r3, [r7, #12]
   15620:	607b      	str	r3, [r7, #4]
      if (absphi < 1.0 && absphi > 0.05 && (- ir_contrast/2 < ir_roll && ir_roll < ir_contrast/2)) {
   15622:	6878      	ldr	r0, [r7, #4]
   15624:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   15628:	f003 f94e 	bl	188c8 <__aeabi_fcmplt>
   1562c:	4603      	mov	r3, r0
   1562e:	2b00      	cmp	r3, #0
   15630:	d100      	bne.n	15634 <estimator_update_ir_estim+0x238>
   15632:	e128      	b.n	15886 <estimator_update_ir_estim+0x48a>
   15634:	6878      	ldr	r0, [r7, #4]
   15636:	f002 fb15 	bl	17c64 <__aeabi_f2d>
   1563a:	4602      	mov	r2, r0
   1563c:	460b      	mov	r3, r1
   1563e:	4610      	mov	r0, r2
   15640:	4619      	mov	r1, r3
   15642:	a30f      	add	r3, pc, #60	; (adr r3, 15680 <estimator_update_ir_estim+0x284>)
   15644:	e9d3 2300 	ldrd	r2, r3, [r3]
   15648:	f002 fdf0 	bl	1822c <__aeabi_dcmpgt>
   1564c:	4603      	mov	r3, r0
   1564e:	2b00      	cmp	r3, #0
   15650:	d11a      	bne.n	15688 <estimator_update_ir_estim+0x28c>
   15652:	e118      	b.n	15886 <estimator_update_ir_estim+0x48a>
   15654:	f3af 8000 	nop.w
   15658:	9999999a 	.word	0x9999999a
   1565c:	3fb99999 	.word	0x3fb99999
   15660:	54442d18 	.word	0x54442d18
   15664:	401921fb 	.word	0x401921fb
   15668:	54442d18 	.word	0x54442d18
   1566c:	400921fb 	.word	0x400921fb
   15670:	54442d18 	.word	0x54442d18
   15674:	c00921fb 	.word	0xc00921fb
   15678:	51eb851f 	.word	0x51eb851f
   1567c:	40239eb8 	.word	0x40239eb8
   15680:	9999999a 	.word	0x9999999a
   15684:	3fa99999 	.word	0x3fa99999
   15688:	f240 5340 	movw	r3, #1344	; 0x540
   1568c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15690:	881b      	ldrh	r3, [r3, #0]
   15692:	b21b      	sxth	r3, r3
   15694:	425b      	negs	r3, r3
   15696:	0fda      	lsrs	r2, r3, #31
   15698:	4413      	add	r3, r2
   1569a:	105b      	asrs	r3, r3, #1
   1569c:	461a      	mov	r2, r3
   1569e:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
   156a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156a6:	881b      	ldrh	r3, [r3, #0]
   156a8:	b21b      	sxth	r3, r3
   156aa:	429a      	cmp	r2, r3
   156ac:	f280 8098 	bge.w	157e0 <estimator_update_ir_estim+0x3e4>
   156b0:	f240 5340 	movw	r3, #1344	; 0x540
   156b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156b8:	881b      	ldrh	r3, [r3, #0]
   156ba:	b21b      	sxth	r3, r3
   156bc:	0fda      	lsrs	r2, r3, #31
   156be:	4413      	add	r3, r2
   156c0:	105b      	asrs	r3, r3, #1
   156c2:	b29a      	uxth	r2, r3
   156c4:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
   156c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156cc:	881b      	ldrh	r3, [r3, #0]
   156ce:	b212      	sxth	r2, r2
   156d0:	b21b      	sxth	r3, r3
   156d2:	429a      	cmp	r2, r3
   156d4:	f340 8084 	ble.w	157e0 <estimator_update_ir_estim+0x3e4>
	sum_xy = estimator_rad * estimator_ir + RHO * sum_xy;
   156d8:	f64c 1314 	movw	r3, #51476	; 0xc914
   156dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156e0:	681a      	ldr	r2, [r3, #0]
   156e2:	f64c 1310 	movw	r3, #51472	; 0xc910
   156e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156ea:	681b      	ldr	r3, [r3, #0]
   156ec:	4610      	mov	r0, r2
   156ee:	4619      	mov	r1, r3
   156f0:	f002 ff4c 	bl	1858c <__aeabi_fmul>
   156f4:	4603      	mov	r3, r0
   156f6:	4618      	mov	r0, r3
   156f8:	f002 fab4 	bl	17c64 <__aeabi_f2d>
   156fc:	4604      	mov	r4, r0
   156fe:	460d      	mov	r5, r1
   15700:	f64c 1324 	movw	r3, #51492	; 0xc924
   15704:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15708:	681b      	ldr	r3, [r3, #0]
   1570a:	4618      	mov	r0, r3
   1570c:	f002 faaa 	bl	17c64 <__aeabi_f2d>
   15710:	4602      	mov	r2, r0
   15712:	460b      	mov	r3, r1
   15714:	4610      	mov	r0, r2
   15716:	4619      	mov	r1, r3
   15718:	a367      	add	r3, pc, #412	; (adr r3, 158b8 <estimator_update_ir_estim+0x4bc>)
   1571a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1571e:	f002 faf5 	bl	17d0c <__aeabi_dmul>
   15722:	4602      	mov	r2, r0
   15724:	460b      	mov	r3, r1
   15726:	4620      	mov	r0, r4
   15728:	4629      	mov	r1, r5
   1572a:	f002 f93d 	bl	179a8 <__adddf3>
   1572e:	4602      	mov	r2, r0
   15730:	460b      	mov	r3, r1
   15732:	4610      	mov	r0, r2
   15734:	4619      	mov	r1, r3
   15736:	f002 fdcb 	bl	182d0 <__aeabi_d2f>
   1573a:	4602      	mov	r2, r0
   1573c:	f64c 1324 	movw	r3, #51492	; 0xc924
   15740:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15744:	601a      	str	r2, [r3, #0]
	sum_xx = estimator_ir * estimator_ir + RHO * sum_xx;
   15746:	f64c 1310 	movw	r3, #51472	; 0xc910
   1574a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1574e:	681a      	ldr	r2, [r3, #0]
   15750:	f64c 1310 	movw	r3, #51472	; 0xc910
   15754:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15758:	681b      	ldr	r3, [r3, #0]
   1575a:	4610      	mov	r0, r2
   1575c:	4619      	mov	r1, r3
   1575e:	f002 ff15 	bl	1858c <__aeabi_fmul>
   15762:	4603      	mov	r3, r0
   15764:	4618      	mov	r0, r3
   15766:	f002 fa7d 	bl	17c64 <__aeabi_f2d>
   1576a:	4604      	mov	r4, r0
   1576c:	460d      	mov	r5, r1
   1576e:	f64c 1328 	movw	r3, #51496	; 0xc928
   15772:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15776:	681b      	ldr	r3, [r3, #0]
   15778:	4618      	mov	r0, r3
   1577a:	f002 fa73 	bl	17c64 <__aeabi_f2d>
   1577e:	4602      	mov	r2, r0
   15780:	460b      	mov	r3, r1
   15782:	4610      	mov	r0, r2
   15784:	4619      	mov	r1, r3
   15786:	a34c      	add	r3, pc, #304	; (adr r3, 158b8 <estimator_update_ir_estim+0x4bc>)
   15788:	e9d3 2300 	ldrd	r2, r3, [r3]
   1578c:	f002 fabe 	bl	17d0c <__aeabi_dmul>
   15790:	4602      	mov	r2, r0
   15792:	460b      	mov	r3, r1
   15794:	4620      	mov	r0, r4
   15796:	4629      	mov	r1, r5
   15798:	f002 f906 	bl	179a8 <__adddf3>
   1579c:	4602      	mov	r2, r0
   1579e:	460b      	mov	r3, r1
   157a0:	4610      	mov	r0, r2
   157a2:	4619      	mov	r1, r3
   157a4:	f002 fd94 	bl	182d0 <__aeabi_d2f>
   157a8:	4602      	mov	r2, r0
   157aa:	f64c 1328 	movw	r3, #51496	; 0xc928
   157ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157b2:	601a      	str	r2, [r3, #0]
	else if (result > IR_RAD_OF_IR_MAX_VALUE)
	  estimator_rad_of_ir = IR_RAD_OF_IR_MAX_VALUE;
	else
	  estimator_rad_of_ir = result;
#else
	  estimator_rad_of_ir = sum_xy / sum_xx;
   157b4:	f64c 1324 	movw	r3, #51492	; 0xc924
   157b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157bc:	681a      	ldr	r2, [r3, #0]
   157be:	f64c 1328 	movw	r3, #51496	; 0xc928
   157c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157c6:	681b      	ldr	r3, [r3, #0]
   157c8:	4610      	mov	r0, r2
   157ca:	4619      	mov	r1, r3
   157cc:	f002 ff92 	bl	186f4 <__aeabi_fdiv>
   157d0:	4603      	mov	r3, r0
   157d2:	461a      	mov	r2, r3
   157d4:	f64c 130c 	movw	r3, #51468	; 0xc90c
   157d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157dc:	601a      	str	r2, [r3, #0]
   157de:	e052      	b.n	15886 <estimator_update_ir_estim+0x48a>
   157e0:	e051      	b.n	15886 <estimator_update_ir_estim+0x48a>
#endif
      }
    } 
  } else {
    initialized = TRUE;
   157e2:	f64c 1318 	movw	r3, #51480	; 0xc918
   157e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157ea:	2201      	movs	r2, #1
   157ec:	701a      	strb	r2, [r3, #0]
    init_ir2 = ir_contrast;
   157ee:	f240 5340 	movw	r3, #1344	; 0x540
   157f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157f6:	881b      	ldrh	r3, [r3, #0]
   157f8:	b21b      	sxth	r3, r3
   157fa:	4618      	mov	r0, r3
   157fc:	f002 fe72 	bl	184e4 <__aeabi_i2f>
   15800:	4603      	mov	r3, r0
   15802:	603b      	str	r3, [r7, #0]
    init_ir2 = init_ir2*init_ir2;
   15804:	6838      	ldr	r0, [r7, #0]
   15806:	6839      	ldr	r1, [r7, #0]
   15808:	f002 fec0 	bl	1858c <__aeabi_fmul>
   1580c:	4603      	mov	r3, r0
   1580e:	603b      	str	r3, [r7, #0]
    sum_xy = INIT_WEIGHT * estimator_rad_of_ir * init_ir2;
   15810:	f64c 130c 	movw	r3, #51468	; 0xc90c
   15814:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15818:	681b      	ldr	r3, [r3, #0]
   1581a:	4618      	mov	r0, r3
   1581c:	f002 fa22 	bl	17c64 <__aeabi_f2d>
   15820:	4602      	mov	r2, r0
   15822:	460b      	mov	r3, r1
   15824:	4610      	mov	r0, r2
   15826:	4619      	mov	r1, r3
   15828:	f04f 0200 	mov.w	r2, #0
   1582c:	f04f 0300 	mov.w	r3, #0
   15830:	f2c4 0359 	movt	r3, #16473	; 0x4059
   15834:	f002 fa6a 	bl	17d0c <__aeabi_dmul>
   15838:	4602      	mov	r2, r0
   1583a:	460b      	mov	r3, r1
   1583c:	4614      	mov	r4, r2
   1583e:	461d      	mov	r5, r3
   15840:	6838      	ldr	r0, [r7, #0]
   15842:	f002 fa0f 	bl	17c64 <__aeabi_f2d>
   15846:	4602      	mov	r2, r0
   15848:	460b      	mov	r3, r1
   1584a:	4620      	mov	r0, r4
   1584c:	4629      	mov	r1, r5
   1584e:	f002 fa5d 	bl	17d0c <__aeabi_dmul>
   15852:	4602      	mov	r2, r0
   15854:	460b      	mov	r3, r1
   15856:	4610      	mov	r0, r2
   15858:	4619      	mov	r1, r3
   1585a:	f002 fd39 	bl	182d0 <__aeabi_d2f>
   1585e:	4602      	mov	r2, r0
   15860:	f64c 1324 	movw	r3, #51492	; 0xc924
   15864:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15868:	601a      	str	r2, [r3, #0]
    sum_xx = INIT_WEIGHT * init_ir2;
   1586a:	6838      	ldr	r0, [r7, #0]
   1586c:	f04f 0100 	mov.w	r1, #0
   15870:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   15874:	f002 fe8a 	bl	1858c <__aeabi_fmul>
   15878:	4603      	mov	r3, r0
   1587a:	461a      	mov	r2, r3
   1587c:	f64c 1328 	movw	r3, #51496	; 0xc928
   15880:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15884:	601a      	str	r2, [r3, #0]
  }

  last_hspeed_dir = estimator_hspeed_dir;
   15886:	f64c 1308 	movw	r3, #51464	; 0xc908
   1588a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1588e:	681a      	ldr	r2, [r3, #0]
   15890:	f64c 1320 	movw	r3, #51488	; 0xc920
   15894:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15898:	601a      	str	r2, [r3, #0]
  last_t = gps_ftow;
   1589a:	f24c 4388 	movw	r3, #50312	; 0xc488
   1589e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158a2:	681a      	ldr	r2, [r3, #0]
   158a4:	f64c 131c 	movw	r3, #51484	; 0xc91c
   158a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158ac:	601a      	str	r2, [r3, #0]
}
   158ae:	3710      	adds	r7, #16
   158b0:	46bd      	mov	sp, r7
   158b2:	bdb0      	pop	{r4, r5, r7, pc}
   158b4:	f3af 8000 	nop.w
   158b8:	d916872b 	.word	0xd916872b
   158bc:	3feff7ce 	.word	0x3feff7ce

000158c0 <estimator_update_state_gps>:


void estimator_update_state_gps( void ) {
   158c0:	b580      	push	{r7, lr}
   158c2:	af00      	add	r7, sp, #0
  if (GPS_FIX_VALID(gps_mode)) {
   158c4:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   158c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158cc:	781b      	ldrb	r3, [r3, #0]
   158ce:	f003 0320 	and.w	r3, r3, #32
   158d2:	2b00      	cmp	r3, #0
   158d4:	d044      	beq.n	15960 <estimator_update_state_gps+0xa0>
    EstimatorSetPos(gps_east, gps_north, gps_falt);
   158d6:	f24c 43a4 	movw	r3, #50340	; 0xc4a4
   158da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158de:	681a      	ldr	r2, [r3, #0]
   158e0:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   158e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158e8:	601a      	str	r2, [r3, #0]
   158ea:	f24c 43a8 	movw	r3, #50344	; 0xc4a8
   158ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158f2:	681a      	ldr	r2, [r3, #0]
   158f4:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   158f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158fc:	601a      	str	r2, [r3, #0]
   158fe:	f24c 438c 	movw	r3, #50316	; 0xc48c
   15902:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15906:	681a      	ldr	r2, [r3, #0]
   15908:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   1590c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15910:	601a      	str	r2, [r3, #0]
    EstimatorSetSpeedPol(gps_fspeed, gps_fcourse, gps_fclimb);
   15912:	f24c 4390 	movw	r3, #50320	; 0xc490
   15916:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1591a:	681a      	ldr	r2, [r3, #0]
   1591c:	f64c 1304 	movw	r3, #51460	; 0xc904
   15920:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15924:	601a      	str	r2, [r3, #0]
   15926:	f24c 4398 	movw	r3, #50328	; 0xc498
   1592a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1592e:	681a      	ldr	r2, [r3, #0]
   15930:	f64c 1308 	movw	r3, #51464	; 0xc908
   15934:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15938:	601a      	str	r2, [r3, #0]
   1593a:	f24c 4394 	movw	r3, #50324	; 0xc494
   1593e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15942:	681a      	ldr	r2, [r3, #0]
   15944:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   15948:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1594c:	601a      	str	r2, [r3, #0]
    
    if (estimator_flight_time)
   1594e:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   15952:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15956:	881b      	ldrh	r3, [r3, #0]
   15958:	2b00      	cmp	r3, #0
   1595a:	d001      	beq.n	15960 <estimator_update_state_gps+0xa0>
      estimator_update_ir_estim();
   1595c:	f7ff fd4e 	bl	153fc <estimator_update_ir_estim>
  }
}
   15960:	bd80      	pop	{r7, pc}
   15962:	bf00      	nop

00015964 <estimator_propagate_state>:

void estimator_propagate_state( void ) {
   15964:	b480      	push	{r7}
   15966:	af00      	add	r7, sp, #0
  
}
   15968:	46bd      	mov	sp, r7
   1596a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1596e:	4770      	bx	lr

00015970 <inflight_calib>:
/* Please DO NOT EDIT */

#ifndef INFLIGHT_CALIB_H
#define INFLIGHT_CALIB_H 

void inflight_calib(bool_t mode_changed) {
   15970:	b5b0      	push	{r4, r5, r7, lr}
   15972:	b082      	sub	sp, #8
   15974:	af00      	add	r7, sp, #0
   15976:	4603      	mov	r3, r0
   15978:	71fb      	strb	r3, [r7, #7]
  if (pprz_mode == PPRZ_MODE_AUTO1) {
   1597a:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
   1597e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15982:	781b      	ldrb	r3, [r3, #0]
   15984:	2b01      	cmp	r3, #1
   15986:	f040 80e0 	bne.w	15b4a <inflight_calib+0x1da>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   1598a:	f64c 132c 	movw	r3, #51500	; 0xc92c
   1598e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15992:	781b      	ldrb	r3, [r3, #0]
   15994:	2b02      	cmp	r3, #2
   15996:	d168      	bne.n	15a6a <inflight_calib+0xfa>
      static int16_t ir_pitch_neutral_init;
      if (mode_changed) {
   15998:	79fb      	ldrb	r3, [r7, #7]
   1599a:	2b00      	cmp	r3, #0
   1599c:	d013      	beq.n	159c6 <inflight_calib+0x56>
        ir_pitch_neutral_init = ir_pitch_neutral;
   1599e:	f240 5344 	movw	r3, #1348	; 0x544
   159a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159a6:	881a      	ldrh	r2, [r3, #0]
   159a8:	f64c 1332 	movw	r3, #51506	; 0xc932
   159ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159b0:	801a      	strh	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   159b2:	f24c 4320 	movw	r3, #50208	; 0xc420
   159b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159ba:	895a      	ldrh	r2, [r3, #10]
   159bc:	f64c 132e 	movw	r3, #51502	; 0xc92e
   159c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159c4:	801a      	strh	r2, [r3, #0]
      }
      ir_pitch_neutral = ParamValInt16(ir_pitch_neutral_init, 60.000000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   159c6:	f24c 4320 	movw	r3, #50208	; 0xc420
   159ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159ce:	895b      	ldrh	r3, [r3, #10]
   159d0:	b21a      	sxth	r2, r3
   159d2:	f64c 132e 	movw	r3, #51502	; 0xc92e
   159d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159da:	881b      	ldrh	r3, [r3, #0]
   159dc:	b21b      	sxth	r3, r3
   159de:	1ad3      	subs	r3, r2, r3
   159e0:	4618      	mov	r0, r3
   159e2:	f002 fd7f 	bl	184e4 <__aeabi_i2f>
   159e6:	4603      	mov	r3, r0
   159e8:	4618      	mov	r0, r3
   159ea:	f002 f93b 	bl	17c64 <__aeabi_f2d>
   159ee:	4602      	mov	r2, r0
   159f0:	460b      	mov	r3, r1
   159f2:	4610      	mov	r0, r2
   159f4:	4619      	mov	r1, r3
   159f6:	f04f 0200 	mov.w	r2, #0
   159fa:	f04f 0300 	mov.w	r3, #0
   159fe:	f2c4 034e 	movt	r3, #16462	; 0x404e
   15a02:	f002 f983 	bl	17d0c <__aeabi_dmul>
   15a06:	4602      	mov	r2, r0
   15a08:	460b      	mov	r3, r1
   15a0a:	4610      	mov	r0, r2
   15a0c:	4619      	mov	r1, r3
   15a0e:	f04f 0200 	mov.w	r2, #0
   15a12:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15a16:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15a1a:	f002 faa1 	bl	17f60 <__aeabi_ddiv>
   15a1e:	4602      	mov	r2, r0
   15a20:	460b      	mov	r3, r1
   15a22:	4610      	mov	r0, r2
   15a24:	4619      	mov	r1, r3
   15a26:	f002 fc0b 	bl	18240 <__aeabi_d2iz>
   15a2a:	4603      	mov	r3, r0
   15a2c:	b29b      	uxth	r3, r3
   15a2e:	b29a      	uxth	r2, r3
   15a30:	f64c 1332 	movw	r3, #51506	; 0xc932
   15a34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a38:	881b      	ldrh	r3, [r3, #0]
   15a3a:	b29b      	uxth	r3, r3
   15a3c:	4413      	add	r3, r2
   15a3e:	b29b      	uxth	r3, r3
   15a40:	b29a      	uxth	r2, r3
   15a42:	f240 5344 	movw	r3, #1348	; 0x544
   15a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a4a:	801a      	strh	r2, [r3, #0]
      slider_1_val = (float)ir_pitch_neutral;
   15a4c:	f240 5344 	movw	r3, #1348	; 0x544
   15a50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a54:	881b      	ldrh	r3, [r3, #0]
   15a56:	b21b      	sxth	r3, r3
   15a58:	4618      	mov	r0, r3
   15a5a:	f002 fd43 	bl	184e4 <__aeabi_i2f>
   15a5e:	4602      	mov	r2, r0
   15a60:	f24c 3308 	movw	r3, #49928	; 0xc308
   15a64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a68:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15a6a:	f64c 132c 	movw	r3, #51500	; 0xc92c
   15a6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a72:	781b      	ldrb	r3, [r3, #0]
   15a74:	2b02      	cmp	r3, #2
   15a76:	d168      	bne.n	15b4a <inflight_calib+0x1da>
      static int16_t ir_roll_neutral_init;
      if (mode_changed) {
   15a78:	79fb      	ldrb	r3, [r7, #7]
   15a7a:	2b00      	cmp	r3, #0
   15a7c:	d013      	beq.n	15aa6 <inflight_calib+0x136>
        ir_roll_neutral_init = ir_roll_neutral;
   15a7e:	f240 5342 	movw	r3, #1346	; 0x542
   15a82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a86:	881a      	ldrh	r2, [r3, #0]
   15a88:	f64c 1334 	movw	r3, #51508	; 0xc934
   15a8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a90:	801a      	strh	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   15a92:	f24c 4320 	movw	r3, #50208	; 0xc420
   15a96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a9a:	899a      	ldrh	r2, [r3, #12]
   15a9c:	f64c 1330 	movw	r3, #51504	; 0xc930
   15aa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15aa4:	801a      	strh	r2, [r3, #0]
      }
      ir_roll_neutral = ParamValInt16(ir_roll_neutral_init, -60.000000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   15aa6:	f24c 4320 	movw	r3, #50208	; 0xc420
   15aaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15aae:	899b      	ldrh	r3, [r3, #12]
   15ab0:	b21a      	sxth	r2, r3
   15ab2:	f64c 1330 	movw	r3, #51504	; 0xc930
   15ab6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15aba:	881b      	ldrh	r3, [r3, #0]
   15abc:	b21b      	sxth	r3, r3
   15abe:	1ad3      	subs	r3, r2, r3
   15ac0:	4618      	mov	r0, r3
   15ac2:	f002 fd0f 	bl	184e4 <__aeabi_i2f>
   15ac6:	4603      	mov	r3, r0
   15ac8:	4618      	mov	r0, r3
   15aca:	f002 f8cb 	bl	17c64 <__aeabi_f2d>
   15ace:	4602      	mov	r2, r0
   15ad0:	460b      	mov	r3, r1
   15ad2:	4610      	mov	r0, r2
   15ad4:	4619      	mov	r1, r3
   15ad6:	f04f 0200 	mov.w	r2, #0
   15ada:	f04f 0300 	mov.w	r3, #0
   15ade:	f2cc 034e 	movt	r3, #49230	; 0xc04e
   15ae2:	f002 f913 	bl	17d0c <__aeabi_dmul>
   15ae6:	4602      	mov	r2, r0
   15ae8:	460b      	mov	r3, r1
   15aea:	4610      	mov	r0, r2
   15aec:	4619      	mov	r1, r3
   15aee:	f04f 0200 	mov.w	r2, #0
   15af2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15af6:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15afa:	f002 fa31 	bl	17f60 <__aeabi_ddiv>
   15afe:	4602      	mov	r2, r0
   15b00:	460b      	mov	r3, r1
   15b02:	4610      	mov	r0, r2
   15b04:	4619      	mov	r1, r3
   15b06:	f002 fb9b 	bl	18240 <__aeabi_d2iz>
   15b0a:	4603      	mov	r3, r0
   15b0c:	b29b      	uxth	r3, r3
   15b0e:	b29a      	uxth	r2, r3
   15b10:	f64c 1334 	movw	r3, #51508	; 0xc934
   15b14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b18:	881b      	ldrh	r3, [r3, #0]
   15b1a:	b29b      	uxth	r3, r3
   15b1c:	4413      	add	r3, r2
   15b1e:	b29b      	uxth	r3, r3
   15b20:	b29a      	uxth	r2, r3
   15b22:	f240 5342 	movw	r3, #1346	; 0x542
   15b26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b2a:	801a      	strh	r2, [r3, #0]
      slider_2_val = (float)ir_roll_neutral;
   15b2c:	f240 5342 	movw	r3, #1346	; 0x542
   15b30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b34:	881b      	ldrh	r3, [r3, #0]
   15b36:	b21b      	sxth	r3, r3
   15b38:	4618      	mov	r0, r3
   15b3a:	f002 fcd3 	bl	184e4 <__aeabi_i2f>
   15b3e:	4602      	mov	r2, r0
   15b40:	f24c 330c 	movw	r3, #49932	; 0xc30c
   15b44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b48:	601a      	str	r2, [r3, #0]
    }
  }
  if (pprz_mode == PPRZ_MODE_AUTO2) {
   15b4a:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
   15b4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b52:	781b      	ldrb	r3, [r3, #0]
   15b54:	2b02      	cmp	r3, #2
   15b56:	f040 80da 	bne.w	15d0e <inflight_calib+0x39e>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15b5a:	f64c 132c 	movw	r3, #51500	; 0xc92c
   15b5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b62:	781b      	ldrb	r3, [r3, #0]
   15b64:	2b02      	cmp	r3, #2
   15b66:	d165      	bne.n	15c34 <inflight_calib+0x2c4>
      static float course_pgain_init;
      if (mode_changed) {
   15b68:	79fb      	ldrb	r3, [r7, #7]
   15b6a:	2b00      	cmp	r3, #0
   15b6c:	d013      	beq.n	15b96 <inflight_calib+0x226>
        course_pgain_init = course_pgain;
   15b6e:	f240 5358 	movw	r3, #1368	; 0x558
   15b72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b76:	681a      	ldr	r2, [r3, #0]
   15b78:	f64c 1338 	movw	r3, #51512	; 0xc938
   15b7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b80:	601a      	str	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   15b82:	f24c 4320 	movw	r3, #50208	; 0xc420
   15b86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b8a:	895a      	ldrh	r2, [r3, #10]
   15b8c:	f64c 132e 	movw	r3, #51502	; 0xc92e
   15b90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b94:	801a      	strh	r2, [r3, #0]
      }
      course_pgain = ParamValFloat(course_pgain_init, 0.100000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   15b96:	f64c 1338 	movw	r3, #51512	; 0xc938
   15b9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b9e:	681b      	ldr	r3, [r3, #0]
   15ba0:	4618      	mov	r0, r3
   15ba2:	f002 f85f 	bl	17c64 <__aeabi_f2d>
   15ba6:	4604      	mov	r4, r0
   15ba8:	460d      	mov	r5, r1
   15baa:	f24c 4320 	movw	r3, #50208	; 0xc420
   15bae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15bb2:	895b      	ldrh	r3, [r3, #10]
   15bb4:	b21a      	sxth	r2, r3
   15bb6:	f64c 132e 	movw	r3, #51502	; 0xc92e
   15bba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15bbe:	881b      	ldrh	r3, [r3, #0]
   15bc0:	b21b      	sxth	r3, r3
   15bc2:	1ad3      	subs	r3, r2, r3
   15bc4:	4618      	mov	r0, r3
   15bc6:	f002 fc8d 	bl	184e4 <__aeabi_i2f>
   15bca:	4603      	mov	r3, r0
   15bcc:	4618      	mov	r0, r3
   15bce:	f002 f849 	bl	17c64 <__aeabi_f2d>
   15bd2:	4602      	mov	r2, r0
   15bd4:	460b      	mov	r3, r1
   15bd6:	4610      	mov	r0, r2
   15bd8:	4619      	mov	r1, r3
   15bda:	a34f      	add	r3, pc, #316	; (adr r3, 15d18 <inflight_calib+0x3a8>)
   15bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
   15be0:	f002 f894 	bl	17d0c <__aeabi_dmul>
   15be4:	4602      	mov	r2, r0
   15be6:	460b      	mov	r3, r1
   15be8:	4610      	mov	r0, r2
   15bea:	4619      	mov	r1, r3
   15bec:	f04f 0200 	mov.w	r2, #0
   15bf0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15bf4:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15bf8:	f002 f9b2 	bl	17f60 <__aeabi_ddiv>
   15bfc:	4602      	mov	r2, r0
   15bfe:	460b      	mov	r3, r1
   15c00:	4620      	mov	r0, r4
   15c02:	4629      	mov	r1, r5
   15c04:	f001 fed0 	bl	179a8 <__adddf3>
   15c08:	4602      	mov	r2, r0
   15c0a:	460b      	mov	r3, r1
   15c0c:	4610      	mov	r0, r2
   15c0e:	4619      	mov	r1, r3
   15c10:	f002 fb5e 	bl	182d0 <__aeabi_d2f>
   15c14:	4602      	mov	r2, r0
   15c16:	f240 5358 	movw	r3, #1368	; 0x558
   15c1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c1e:	601a      	str	r2, [r3, #0]
      slider_1_val = (float)course_pgain;
   15c20:	f240 5358 	movw	r3, #1368	; 0x558
   15c24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c28:	681a      	ldr	r2, [r3, #0]
   15c2a:	f24c 3308 	movw	r3, #49928	; 0xc308
   15c2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15c32:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15c34:	f64c 132c 	movw	r3, #51500	; 0xc92c
   15c38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15c3c:	781b      	ldrb	r3, [r3, #0]
   15c3e:	2b02      	cmp	r3, #2
   15c40:	d165      	bne.n	15d0e <inflight_calib+0x39e>
      static float max_roll_init;
      if (mode_changed) {
   15c42:	79fb      	ldrb	r3, [r7, #7]
   15c44:	2b00      	cmp	r3, #0
   15c46:	d013      	beq.n	15c70 <inflight_calib+0x300>
        max_roll_init = max_roll;
   15c48:	f240 535c 	movw	r3, #1372	; 0x55c
   15c4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c50:	681a      	ldr	r2, [r3, #0]
   15c52:	f64c 133c 	movw	r3, #51516	; 0xc93c
   15c56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15c5a:	601a      	str	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   15c5c:	f24c 4320 	movw	r3, #50208	; 0xc420
   15c60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15c64:	899a      	ldrh	r2, [r3, #12]
   15c66:	f64c 1330 	movw	r3, #51504	; 0xc930
   15c6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15c6e:	801a      	strh	r2, [r3, #0]
      }
      max_roll = ParamValFloat(max_roll_init, -0.200000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   15c70:	f64c 133c 	movw	r3, #51516	; 0xc93c
   15c74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15c78:	681b      	ldr	r3, [r3, #0]
   15c7a:	4618      	mov	r0, r3
   15c7c:	f001 fff2 	bl	17c64 <__aeabi_f2d>
   15c80:	4604      	mov	r4, r0
   15c82:	460d      	mov	r5, r1
   15c84:	f24c 4320 	movw	r3, #50208	; 0xc420
   15c88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15c8c:	899b      	ldrh	r3, [r3, #12]
   15c8e:	b21a      	sxth	r2, r3
   15c90:	f64c 1330 	movw	r3, #51504	; 0xc930
   15c94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15c98:	881b      	ldrh	r3, [r3, #0]
   15c9a:	b21b      	sxth	r3, r3
   15c9c:	1ad3      	subs	r3, r2, r3
   15c9e:	4618      	mov	r0, r3
   15ca0:	f002 fc20 	bl	184e4 <__aeabi_i2f>
   15ca4:	4603      	mov	r3, r0
   15ca6:	4618      	mov	r0, r3
   15ca8:	f001 ffdc 	bl	17c64 <__aeabi_f2d>
   15cac:	4602      	mov	r2, r0
   15cae:	460b      	mov	r3, r1
   15cb0:	4610      	mov	r0, r2
   15cb2:	4619      	mov	r1, r3
   15cb4:	a31a      	add	r3, pc, #104	; (adr r3, 15d20 <inflight_calib+0x3b0>)
   15cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
   15cba:	f002 f827 	bl	17d0c <__aeabi_dmul>
   15cbe:	4602      	mov	r2, r0
   15cc0:	460b      	mov	r3, r1
   15cc2:	4610      	mov	r0, r2
   15cc4:	4619      	mov	r1, r3
   15cc6:	f04f 0200 	mov.w	r2, #0
   15cca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15cce:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15cd2:	f002 f945 	bl	17f60 <__aeabi_ddiv>
   15cd6:	4602      	mov	r2, r0
   15cd8:	460b      	mov	r3, r1
   15cda:	4620      	mov	r0, r4
   15cdc:	4629      	mov	r1, r5
   15cde:	f001 fe63 	bl	179a8 <__adddf3>
   15ce2:	4602      	mov	r2, r0
   15ce4:	460b      	mov	r3, r1
   15ce6:	4610      	mov	r0, r2
   15ce8:	4619      	mov	r1, r3
   15cea:	f002 faf1 	bl	182d0 <__aeabi_d2f>
   15cee:	4602      	mov	r2, r0
   15cf0:	f240 535c 	movw	r3, #1372	; 0x55c
   15cf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15cf8:	601a      	str	r2, [r3, #0]
      slider_2_val = (float)max_roll;
   15cfa:	f240 535c 	movw	r3, #1372	; 0x55c
   15cfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d02:	681a      	ldr	r2, [r3, #0]
   15d04:	f24c 330c 	movw	r3, #49932	; 0xc30c
   15d08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15d0c:	601a      	str	r2, [r3, #0]
    }
  }
}
   15d0e:	3708      	adds	r7, #8
   15d10:	46bd      	mov	sp, r7
   15d12:	bdb0      	pop	{r4, r5, r7, pc}
   15d14:	f3af 8000 	nop.w
   15d18:	9999999a 	.word	0x9999999a
   15d1c:	3fb99999 	.word	0x3fb99999
   15d20:	9999999a 	.word	0x9999999a
   15d24:	bfc99999 	.word	0xbfc99999

00015d28 <pp_atan2>:
 *
 */
#include <math.h>

double pp_atan2(double x, double y)
{
   15d28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   15d2c:	b08e      	sub	sp, #56	; 0x38
   15d2e:	af00      	add	r7, sp, #0
   15d30:	e9c7 0102 	strd	r0, r1, [r7, #8]
   15d34:	e9c7 2300 	strd	r2, r3, [r7]
	double coeff_1 = M_PI/4;
   15d38:	a357      	add	r3, pc, #348	; (adr r3, 15e98 <pp_atan2+0x170>)
   15d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d3e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double coeff_2 = 3*coeff_1;
   15d42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d46:	f04f 0200 	mov.w	r2, #0
   15d4a:	f04f 0300 	mov.w	r3, #0
   15d4e:	f2c4 0308 	movt	r3, #16392	; 0x4008
   15d52:	f001 ffdb 	bl	17d0c <__aeabi_dmul>
   15d56:	4602      	mov	r2, r0
   15d58:	460b      	mov	r3, r1
   15d5a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double abs_y = fabs(y)+1e-10;
   15d5e:	e9d7 0100 	ldrd	r0, r1, [r7]
   15d62:	f04f 0200 	mov.w	r2, #0
   15d66:	f04f 0300 	mov.w	r3, #0
   15d6a:	f002 fa41 	bl	181f0 <__aeabi_dcmplt>
   15d6e:	4603      	mov	r3, r0
   15d70:	2b00      	cmp	r3, #0
   15d72:	d009      	beq.n	15d88 <pp_atan2+0x60>
   15d74:	a14a      	add	r1, pc, #296	; (adr r1, 15ea0 <pp_atan2+0x178>)
   15d76:	e9d1 0100 	ldrd	r0, r1, [r1]
   15d7a:	e9d7 2300 	ldrd	r2, r3, [r7]
   15d7e:	f001 fe11 	bl	179a4 <__aeabi_dsub>
   15d82:	4602      	mov	r2, r0
   15d84:	460b      	mov	r3, r1
   15d86:	e008      	b.n	15d9a <pp_atan2+0x72>
   15d88:	e9d7 0100 	ldrd	r0, r1, [r7]
   15d8c:	a344      	add	r3, pc, #272	; (adr r3, 15ea0 <pp_atan2+0x178>)
   15d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d92:	f001 fe09 	bl	179a8 <__adddf3>
   15d96:	4602      	mov	r2, r0
   15d98:	460b      	mov	r3, r1
   15d9a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angle, r;
	if(x>0)
   15d9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15da2:	f04f 0200 	mov.w	r2, #0
   15da6:	f04f 0300 	mov.w	r3, #0
   15daa:	f002 fa3f 	bl	1822c <__aeabi_dcmpgt>
   15dae:	4603      	mov	r3, r0
   15db0:	2b00      	cmp	r3, #0
   15db2:	d02a      	beq.n	15e0a <pp_atan2+0xe2>
	{
		r = (x - abs_y)/(x + abs_y);
   15db4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15db8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15dbc:	f001 fdf2 	bl	179a4 <__aeabi_dsub>
   15dc0:	4602      	mov	r2, r0
   15dc2:	460b      	mov	r3, r1
   15dc4:	4690      	mov	r8, r2
   15dc6:	4699      	mov	r9, r3
   15dc8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15dcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15dd0:	f001 fdea 	bl	179a8 <__adddf3>
   15dd4:	4602      	mov	r2, r0
   15dd6:	460b      	mov	r3, r1
   15dd8:	4640      	mov	r0, r8
   15dda:	4649      	mov	r1, r9
   15ddc:	f002 f8c0 	bl	17f60 <__aeabi_ddiv>
   15de0:	4602      	mov	r2, r0
   15de2:	460b      	mov	r3, r1
   15de4:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_1 - coeff_1*r;
   15de8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15dec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15df0:	f001 ff8c 	bl	17d0c <__aeabi_dmul>
   15df4:	4602      	mov	r2, r0
   15df6:	460b      	mov	r3, r1
   15df8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15dfc:	f001 fdd2 	bl	179a4 <__aeabi_dsub>
   15e00:	4602      	mov	r2, r0
   15e02:	460b      	mov	r3, r1
   15e04:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   15e08:	e029      	b.n	15e5e <pp_atan2+0x136>
	}
	else
	{
		r = (x + abs_y)/(abs_y - x);
   15e0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15e0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15e12:	f001 fdc9 	bl	179a8 <__adddf3>
   15e16:	4602      	mov	r2, r0
   15e18:	460b      	mov	r3, r1
   15e1a:	4690      	mov	r8, r2
   15e1c:	4699      	mov	r9, r3
   15e1e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15e22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   15e26:	f001 fdbd 	bl	179a4 <__aeabi_dsub>
   15e2a:	4602      	mov	r2, r0
   15e2c:	460b      	mov	r3, r1
   15e2e:	4640      	mov	r0, r8
   15e30:	4649      	mov	r1, r9
   15e32:	f002 f895 	bl	17f60 <__aeabi_ddiv>
   15e36:	4602      	mov	r2, r0
   15e38:	460b      	mov	r3, r1
   15e3a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_2 - coeff_1*r;
   15e3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15e42:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15e46:	f001 ff61 	bl	17d0c <__aeabi_dmul>
   15e4a:	4602      	mov	r2, r0
   15e4c:	460b      	mov	r3, r1
   15e4e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   15e52:	f001 fda7 	bl	179a4 <__aeabi_dsub>
   15e56:	4602      	mov	r2, r0
   15e58:	460b      	mov	r3, r1
   15e5a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}
	if(y<0)
   15e5e:	e9d7 0100 	ldrd	r0, r1, [r7]
   15e62:	f04f 0200 	mov.w	r2, #0
   15e66:	f04f 0300 	mov.w	r3, #0
   15e6a:	f002 f9c1 	bl	181f0 <__aeabi_dcmplt>
   15e6e:	4603      	mov	r3, r0
   15e70:	2b00      	cmp	r3, #0
   15e72:	d004      	beq.n	15e7e <pp_atan2+0x156>
		return (-angle);
   15e74:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   15e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15e78:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15e7c:	e001      	b.n	15e82 <pp_atan2+0x15a>
	else
		return angle;
   15e7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
   15e82:	4622      	mov	r2, r4
   15e84:	462b      	mov	r3, r5
}
   15e86:	4610      	mov	r0, r2
   15e88:	4619      	mov	r1, r3
   15e8a:	3738      	adds	r7, #56	; 0x38
   15e8c:	46bd      	mov	sp, r7
   15e8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   15e92:	bf00      	nop
   15e94:	f3af 8000 	nop.w
   15e98:	54442d18 	.word	0x54442d18
   15e9c:	3fe921fb 	.word	0x3fe921fb
   15ea0:	d9d7bdbb 	.word	0xd9d7bdbb
   15ea4:	3ddb7cdf 	.word	0x3ddb7cdf

00015ea8 <pp_sin>:
 * Range: -pi/2 <= x <= pi/2
 * Precision: +/- .000,000,005
 */
 
double pp_sin(double x)
{
   15ea8:	b5b0      	push	{r4, r5, r7, lr}
   15eaa:	b08c      	sub	sp, #48	; 0x30
   15eac:	af00      	add	r7, sp, #0
   15eae:	e9c7 0100 	strd	r0, r1, [r7]
	double xi, y, q, q2;
	int sign;

	xi = x; sign = 1;
   15eb2:	e9d7 2300 	ldrd	r2, r3, [r7]
   15eb6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15eba:	2301      	movs	r3, #1
   15ebc:	627b      	str	r3, [r7, #36]	; 0x24
	while (xi < -1.57079632679489661923) xi += 6.28318530717958647692;
   15ebe:	e00a      	b.n	15ed6 <pp_sin+0x2e>
   15ec0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15ec4:	a35a      	add	r3, pc, #360	; (adr r3, 16030 <pp_sin+0x188>)
   15ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
   15eca:	f001 fd6d 	bl	179a8 <__adddf3>
   15ece:	4602      	mov	r2, r0
   15ed0:	460b      	mov	r3, r1
   15ed2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15ed6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15eda:	a357      	add	r3, pc, #348	; (adr r3, 16038 <pp_sin+0x190>)
   15edc:	e9d3 2300 	ldrd	r2, r3, [r3]
   15ee0:	f002 f986 	bl	181f0 <__aeabi_dcmplt>
   15ee4:	4603      	mov	r3, r0
   15ee6:	2b00      	cmp	r3, #0
   15ee8:	d1ea      	bne.n	15ec0 <pp_sin+0x18>
	while (xi > 4.71238898038468985769) xi -= 6.28318530717958647692;
   15eea:	e00a      	b.n	15f02 <pp_sin+0x5a>
   15eec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15ef0:	a34f      	add	r3, pc, #316	; (adr r3, 16030 <pp_sin+0x188>)
   15ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
   15ef6:	f001 fd55 	bl	179a4 <__aeabi_dsub>
   15efa:	4602      	mov	r2, r0
   15efc:	460b      	mov	r3, r1
   15efe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15f02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15f06:	a34e      	add	r3, pc, #312	; (adr r3, 16040 <pp_sin+0x198>)
   15f08:	e9d3 2300 	ldrd	r2, r3, [r3]
   15f0c:	f002 f98e 	bl	1822c <__aeabi_dcmpgt>
   15f10:	4603      	mov	r3, r0
   15f12:	2b00      	cmp	r3, #0
   15f14:	d1ea      	bne.n	15eec <pp_sin+0x44>
	if (xi > 1.57079632679489661923) {
   15f16:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15f1a:	a34b      	add	r3, pc, #300	; (adr r3, 16048 <pp_sin+0x1a0>)
   15f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15f20:	f002 f984 	bl	1822c <__aeabi_dcmpgt>
   15f24:	4603      	mov	r3, r0
   15f26:	2b00      	cmp	r3, #0
   15f28:	d00d      	beq.n	15f46 <pp_sin+0x9e>
		xi -= 3.141592653589793238462643;
   15f2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15f2e:	a348      	add	r3, pc, #288	; (adr r3, 16050 <pp_sin+0x1a8>)
   15f30:	e9d3 2300 	ldrd	r2, r3, [r3]
   15f34:	f001 fd36 	bl	179a4 <__aeabi_dsub>
   15f38:	4602      	mov	r2, r0
   15f3a:	460b      	mov	r3, r1
   15f3c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		sign = -1;
   15f40:	f04f 33ff 	mov.w	r3, #4294967295
   15f44:	627b      	str	r3, [r7, #36]	; 0x24
	}
	q = xi / 1.57079632679; q2 = q * q;
   15f46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15f4a:	a343      	add	r3, pc, #268	; (adr r3, 16058 <pp_sin+0x1b0>)
   15f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15f50:	f002 f806 	bl	17f60 <__aeabi_ddiv>
   15f54:	4602      	mov	r2, r0
   15f56:	460b      	mov	r3, r1
   15f58:	e9c7 2306 	strd	r2, r3, [r7, #24]
   15f5c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15f60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15f64:	f001 fed2 	bl	17d0c <__aeabi_dmul>
   15f68:	4602      	mov	r2, r0
   15f6a:	460b      	mov	r3, r1
   15f6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	y = ((((.00015148419  * q2
   15f70:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   15f74:	a33a      	add	r3, pc, #232	; (adr r3, 16060 <pp_sin+0x1b8>)
   15f76:	e9d3 2300 	ldrd	r2, r3, [r3]
   15f7a:	f001 fec7 	bl	17d0c <__aeabi_dmul>
   15f7e:	4602      	mov	r2, r0
   15f80:	460b      	mov	r3, r1
	      - .00467376557) * q2
   15f82:	4610      	mov	r0, r2
   15f84:	4619      	mov	r1, r3
   15f86:	a338      	add	r3, pc, #224	; (adr r3, 16068 <pp_sin+0x1c0>)
   15f88:	e9d3 2300 	ldrd	r2, r3, [r3]
   15f8c:	f001 fd0a 	bl	179a4 <__aeabi_dsub>
   15f90:	4602      	mov	r2, r0
   15f92:	460b      	mov	r3, r1
   15f94:	4610      	mov	r0, r2
   15f96:	4619      	mov	r1, r3
   15f98:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15f9c:	f001 feb6 	bl	17d0c <__aeabi_dmul>
   15fa0:	4602      	mov	r2, r0
   15fa2:	460b      	mov	r3, r1
	      + .07968967928) * q2
   15fa4:	4610      	mov	r0, r2
   15fa6:	4619      	mov	r1, r3
   15fa8:	a331      	add	r3, pc, #196	; (adr r3, 16070 <pp_sin+0x1c8>)
   15faa:	e9d3 2300 	ldrd	r2, r3, [r3]
   15fae:	f001 fcfb 	bl	179a8 <__adddf3>
   15fb2:	4602      	mov	r2, r0
   15fb4:	460b      	mov	r3, r1
   15fb6:	4610      	mov	r0, r2
   15fb8:	4619      	mov	r1, r3
   15fba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15fbe:	f001 fea5 	bl	17d0c <__aeabi_dmul>
   15fc2:	4602      	mov	r2, r0
   15fc4:	460b      	mov	r3, r1
	      - .64596371106) * q2
   15fc6:	4610      	mov	r0, r2
   15fc8:	4619      	mov	r1, r3
   15fca:	a32b      	add	r3, pc, #172	; (adr r3, 16078 <pp_sin+0x1d0>)
   15fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
   15fd0:	f001 fce8 	bl	179a4 <__aeabi_dsub>
   15fd4:	4602      	mov	r2, r0
   15fd6:	460b      	mov	r3, r1
   15fd8:	4610      	mov	r0, r2
   15fda:	4619      	mov	r1, r3
   15fdc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15fe0:	f001 fe94 	bl	17d0c <__aeabi_dmul>
   15fe4:	4602      	mov	r2, r0
   15fe6:	460b      	mov	r3, r1
	      +1.57079631847) * q;
   15fe8:	4610      	mov	r0, r2
   15fea:	4619      	mov	r1, r3
   15fec:	a324      	add	r3, pc, #144	; (adr r3, 16080 <pp_sin+0x1d8>)
   15fee:	e9d3 2300 	ldrd	r2, r3, [r3]
   15ff2:	f001 fcd9 	bl	179a8 <__adddf3>
   15ff6:	4602      	mov	r2, r0
   15ff8:	460b      	mov	r3, r1
	if (xi > 1.57079632679489661923) {
		xi -= 3.141592653589793238462643;
		sign = -1;
	}
	q = xi / 1.57079632679; q2 = q * q;
	y = ((((.00015148419  * q2
   15ffa:	4610      	mov	r0, r2
   15ffc:	4619      	mov	r1, r3
   15ffe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   16002:	f001 fe83 	bl	17d0c <__aeabi_dmul>
   16006:	4602      	mov	r2, r0
   16008:	460b      	mov	r3, r1
   1600a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	      - .00467376557) * q2
	      + .07968967928) * q2
	      - .64596371106) * q2
	      +1.57079631847) * q;
	return(sign < 0? -y : y);
   1600e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16010:	2b00      	cmp	r3, #0
   16012:	da04      	bge.n	1601e <pp_sin+0x176>
   16014:	68bc      	ldr	r4, [r7, #8]
   16016:	68fb      	ldr	r3, [r7, #12]
   16018:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   1601c:	e001      	b.n	16022 <pp_sin+0x17a>
   1601e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
   16022:	4622      	mov	r2, r4
   16024:	462b      	mov	r3, r5
}
   16026:	4610      	mov	r0, r2
   16028:	4619      	mov	r1, r3
   1602a:	3730      	adds	r7, #48	; 0x30
   1602c:	46bd      	mov	sp, r7
   1602e:	bdb0      	pop	{r4, r5, r7, pc}
   16030:	54442d18 	.word	0x54442d18
   16034:	401921fb 	.word	0x401921fb
   16038:	54442d18 	.word	0x54442d18
   1603c:	bff921fb 	.word	0xbff921fb
   16040:	7f3321d2 	.word	0x7f3321d2
   16044:	4012d97c 	.word	0x4012d97c
   16048:	54442d18 	.word	0x54442d18
   1604c:	3ff921fb 	.word	0x3ff921fb
   16050:	54442d18 	.word	0x54442d18
   16054:	400921fb 	.word	0x400921fb
   16058:	5443d6f4 	.word	0x5443d6f4
   1605c:	3ff921fb 	.word	0x3ff921fb
   16060:	48a890af 	.word	0x48a890af
   16064:	3f23daf7 	.word	0x3f23daf7
   16068:	645b6d0e 	.word	0x645b6d0e
   1606c:	3f7324cc 	.word	0x3f7324cc
   16070:	f65619a5 	.word	0xf65619a5
   16074:	3fb4668a 	.word	0x3fb4668a
   16078:	16acf9cd 	.word	0x16acf9cd
   1607c:	3fe4abbc 	.word	0x3fe4abbc
   16080:	520817f7 	.word	0x520817f7
   16084:	3ff921fb 	.word	0x3ff921fb

00016088 <pp_sqrt>:

#define SQRT_PRECISION 5
double pp_sqrt(double n)
{
   16088:	b480      	push	{r7}
   1608a:	b083      	sub	sp, #12
   1608c:	af00      	add	r7, sp, #0
   1608e:	e9c7 0100 	strd	r0, r1, [r7]
	/* perform the computation */
	for(i = 0; i < SQRT_PRECISION; i++)
		x = (x + n / x) / 2;
	return x;
#endif
}
   16092:	4610      	mov	r0, r2
   16094:	4619      	mov	r1, r3
   16096:	370c      	adds	r7, #12
   16098:	46bd      	mov	sp, r7
   1609a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1609e:	4770      	bx	lr

000160a0 <fbw_adc_buf_channel>:

uint16_t fbw_adc_samples[ FBW_NB_ADC ];

static struct fbw_adc_buf* buffers[FBW_NB_ADC];

void fbw_adc_buf_channel(uint8_t adc_channel, struct fbw_adc_buf* s) {
   160a0:	b480      	push	{r7}
   160a2:	b083      	sub	sp, #12
   160a4:	af00      	add	r7, sp, #0
   160a6:	4603      	mov	r3, r0
   160a8:	6039      	str	r1, [r7, #0]
   160aa:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   160ac:	79fa      	ldrb	r2, [r7, #7]
   160ae:	f64c 1350 	movw	r3, #51536	; 0xc950
   160b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160b6:	6839      	ldr	r1, [r7, #0]
   160b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   160bc:	370c      	adds	r7, #12
   160be:	46bd      	mov	sp, r7
   160c0:	f85d 7b04 	ldr.w	r7, [sp], #4
   160c4:	4770      	bx	lr
   160c6:	bf00      	nop

000160c8 <fbw_adc_init>:

void 
fbw_adc_init( void )
{
   160c8:	b480      	push	{r7}
   160ca:	b083      	sub	sp, #12
   160cc:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   160ce:	f242 0315 	movw	r3, #8213	; 0x2015
   160d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160d6:	2200      	movs	r2, #0
   160d8:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   160da:	f242 0314 	movw	r3, #8212	; 0x2014
   160de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160e2:	2200      	movs	r2, #0
   160e4:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref */
  ADMUX		= ANALOG_VREF;
   160e6:	f242 0307 	movw	r3, #8199	; 0x2007
   160ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160ee:	22c0      	movs	r2, #192	; 0xc0
   160f0:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSRA = 0
   160f2:	f242 0306 	movw	r3, #8198	; 0x2006
   160f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160fa:	22cf      	movs	r2, #207	; 0xcf
   160fc:	701a      	strb	r2, [r3, #0]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   160fe:	2300      	movs	r3, #0
   16100:	71fb      	strb	r3, [r7, #7]
   16102:	e00a      	b.n	1611a <fbw_adc_init+0x52>
    buffers[i] = (struct fbw_adc_buf*)0;
   16104:	79fa      	ldrb	r2, [r7, #7]
   16106:	f64c 1350 	movw	r3, #51536	; 0xc950
   1610a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1610e:	2100      	movs	r1, #0
   16110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   16114:	79fb      	ldrb	r3, [r7, #7]
   16116:	3301      	adds	r3, #1
   16118:	71fb      	strb	r3, [r7, #7]
   1611a:	79fb      	ldrb	r3, [r7, #7]
   1611c:	2b07      	cmp	r3, #7
   1611e:	d9f1      	bls.n	16104 <fbw_adc_init+0x3c>
    buffers[i] = (struct fbw_adc_buf*)0;
}
   16120:	370c      	adds	r7, #12
   16122:	46bd      	mov	sp, r7
   16124:	f85d 7b04 	ldr.w	r7, [sp], #4
   16128:	4770      	bx	lr
   1612a:	bf00      	nop

0001612c <__vector_34>:
#ifdef PAPABENCH_SINGLE
	SIGNAL(SIG_SPM_READY)
#else
	SIGNAL( SIG_INPUT_CAPTURE1 )
#endif
{
   1612c:	b480      	push	{r7}
   1612e:	b083      	sub	sp, #12
   16130:	af00      	add	r7, sp, #0
  uint16_t		this;
  uint16_t		width;
  static uint8_t		state;
  static uint8_t		sync_start;

  this		= ICR1;
   16132:	f242 0326 	movw	r3, #8230	; 0x2026
   16136:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1613a:	881b      	ldrh	r3, [r3, #0]
   1613c:	80fb      	strh	r3, [r7, #6]
  width		= this - last;
   1613e:	f64c 13ac 	movw	r3, #51628	; 0xc9ac
   16142:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16146:	881b      	ldrh	r3, [r3, #0]
   16148:	88fa      	ldrh	r2, [r7, #6]
   1614a:	1ad3      	subs	r3, r2, r3
   1614c:	80bb      	strh	r3, [r7, #4]
  last		= this;
   1614e:	f64c 13ac 	movw	r3, #51628	; 0xc9ac
   16152:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16156:	88fa      	ldrh	r2, [r7, #6]
   16158:	801a      	strh	r2, [r3, #0]
  
  if( state == 0 ) {
   1615a:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   1615e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16162:	781b      	ldrb	r3, [r3, #0]
   16164:	2b00      	cmp	r3, #0
   16166:	d11e      	bne.n	161a6 <__vector_34+0x7a>
    uint8_t	end = TCNT2;
   16168:	f242 0324 	movw	r3, #8228	; 0x2024
   1616c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16170:	781b      	ldrb	r3, [r3, #0]
   16172:	70fb      	strb	r3, [r7, #3]
    uint8_t diff = (end - sync_start);
   16174:	f64c 13af 	movw	r3, #51631	; 0xc9af
   16178:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1617c:	781b      	ldrb	r3, [r3, #0]
   1617e:	78fa      	ldrb	r2, [r7, #3]
   16180:	1ad3      	subs	r3, r2, r3
   16182:	70bb      	strb	r3, [r7, #2]
    sync_start = end;
   16184:	f64c 13af 	movw	r3, #51631	; 0xc9af
   16188:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1618c:	78fa      	ldrb	r2, [r7, #3]
   1618e:	701a      	strb	r2, [r3, #0]

    /* The frame period of the mc3030 seems to be 25ms. 
     * One pulse lasts from 1.05ms to 2.150ms.
     * Sync pulse is at least 7ms : (7000*CLOCK)/1024 = 109
     */
    if( diff > (uint8_t)(((uint32_t)(7000ul*CLOCK))/1024ul) ) {
   16190:	78bb      	ldrb	r3, [r7, #2]
   16192:	2b6d      	cmp	r3, #109	; 0x6d
   16194:	d906      	bls.n	161a4 <__vector_34+0x78>
      state = 1;
   16196:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   1619a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1619e:	2201      	movs	r2, #1
   161a0:	701a      	strb	r2, [r3, #0]
   161a2:	e053      	b.n	1624c <__vector_34+0x120>
   161a4:	e052      	b.n	1624c <__vector_34+0x120>
    }
  } 
  else {
    /* Read a data pulses */
    if( width < 700ul*CLOCK || width > 2300ul*CLOCK)
   161a6:	88bb      	ldrh	r3, [r7, #4]
   161a8:	f5b3 5f2f 	cmp.w	r3, #11200	; 0x2bc0
   161ac:	d304      	bcc.n	161b8 <__vector_34+0x8c>
   161ae:	88ba      	ldrh	r2, [r7, #4]
   161b0:	f648 73c0 	movw	r3, #36800	; 0x8fc0
   161b4:	429a      	cmp	r2, r3
   161b6:	d911      	bls.n	161dc <__vector_34+0xb0>
      RestartPpmCycle();
   161b8:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   161bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161c0:	2200      	movs	r2, #0
   161c2:	701a      	strb	r2, [r3, #0]
   161c4:	f242 0324 	movw	r3, #8228	; 0x2024
   161c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161cc:	781b      	ldrb	r3, [r3, #0]
   161ce:	b2da      	uxtb	r2, r3
   161d0:	f64c 13af 	movw	r3, #51631	; 0xc9af
   161d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161d8:	701a      	strb	r2, [r3, #0]
   161da:	e038      	b.n	1624e <__vector_34+0x122>
    ppm_pulses[state - 1] = width;
   161dc:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   161e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161e4:	781b      	ldrb	r3, [r3, #0]
   161e6:	1e5a      	subs	r2, r3, #1
   161e8:	f64c 1370 	movw	r3, #51568	; 0xc970
   161ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161f0:	88b9      	ldrh	r1, [r7, #4]
   161f2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (state >= PPM_NB_PULSES) {
   161f6:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   161fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161fe:	781b      	ldrb	r3, [r3, #0]
   16200:	2b08      	cmp	r3, #8
   16202:	d917      	bls.n	16234 <__vector_34+0x108>
      ppm_valid	= 1;
   16204:	f64c 13ab 	movw	r3, #51627	; 0xc9ab
   16208:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1620c:	2201      	movs	r2, #1
   1620e:	701a      	strb	r2, [r3, #0]
      RestartPpmCycle();
   16210:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   16214:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16218:	2200      	movs	r2, #0
   1621a:	701a      	strb	r2, [r3, #0]
   1621c:	f242 0324 	movw	r3, #8228	; 0x2024
   16220:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16224:	781b      	ldrb	r3, [r3, #0]
   16226:	b2da      	uxtb	r2, r3
   16228:	f64c 13af 	movw	r3, #51631	; 0xc9af
   1622c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16230:	701a      	strb	r2, [r3, #0]
   16232:	e00c      	b.n	1624e <__vector_34+0x122>
    } else 
      state++;
   16234:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   16238:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1623c:	781b      	ldrb	r3, [r3, #0]
   1623e:	3301      	adds	r3, #1
   16240:	b2da      	uxtb	r2, r3
   16242:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   16246:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1624a:	701a      	strb	r2, [r3, #0]
  }
  return;
   1624c:	bf00      	nop
}
   1624e:	370c      	adds	r7, #12
   16250:	46bd      	mov	sp, r7
   16252:	f85d 7b04 	ldr.w	r7, [sp], #4
   16256:	4770      	bx	lr

00016258 <last_radio_from_ppm>:

/* Copy from the ppm receiving buffer to the buffer sent to mcu0 */
void last_radio_from_ppm() {
   16258:	b590      	push	{r4, r7, lr}
   1625a:	b083      	sub	sp, #12
   1625c:	af00      	add	r7, sp, #0
  LastRadioFromPpm()
   1625e:	f64c 1370 	movw	r3, #51568	; 0xc970
   16262:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16266:	881b      	ldrh	r3, [r3, #0]
   16268:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   1626c:	b29b      	uxth	r3, r3
   1626e:	80fb      	strh	r3, [r7, #6]
   16270:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16274:	4618      	mov	r0, r3
   16276:	f002 f935 	bl	184e4 <__aeabi_i2f>
   1627a:	4603      	mov	r3, r0
   1627c:	4618      	mov	r0, r3
   1627e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   16282:	f002 f983 	bl	1858c <__aeabi_fmul>
   16286:	4603      	mov	r3, r0
   16288:	4618      	mov	r0, r3
   1628a:	f002 fb45 	bl	18918 <__aeabi_f2iz>
   1628e:	4603      	mov	r3, r0
   16290:	b29a      	uxth	r2, r3
   16292:	f64c 1384 	movw	r3, #51588	; 0xc984
   16296:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1629a:	801a      	strh	r2, [r3, #0]
   1629c:	f64c 1384 	movw	r3, #51588	; 0xc984
   162a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162a4:	881b      	ldrh	r3, [r3, #0]
   162a6:	b21b      	sxth	r3, r3
   162a8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   162ac:	dd07      	ble.n	162be <last_radio_from_ppm+0x66>
   162ae:	f64c 1384 	movw	r3, #51588	; 0xc984
   162b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162b6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   162ba:	801a      	strh	r2, [r3, #0]
   162bc:	e00d      	b.n	162da <last_radio_from_ppm+0x82>
   162be:	f64c 1384 	movw	r3, #51588	; 0xc984
   162c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162c6:	881b      	ldrh	r3, [r3, #0]
   162c8:	b21b      	sxth	r3, r3
   162ca:	2b00      	cmp	r3, #0
   162cc:	da05      	bge.n	162da <last_radio_from_ppm+0x82>
   162ce:	f64c 1384 	movw	r3, #51588	; 0xc984
   162d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162d6:	2200      	movs	r2, #0
   162d8:	801a      	strh	r2, [r3, #0]
   162da:	f64c 1370 	movw	r3, #51568	; 0xc970
   162de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162e2:	885b      	ldrh	r3, [r3, #2]
   162e4:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   162e8:	b29b      	uxth	r3, r3
   162ea:	80fb      	strh	r3, [r7, #6]
   162ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   162f0:	4618      	mov	r0, r3
   162f2:	f002 f8f7 	bl	184e4 <__aeabi_i2f>
   162f6:	4603      	mov	r3, r0
   162f8:	4618      	mov	r0, r3
   162fa:	f002 fb0d 	bl	18918 <__aeabi_f2iz>
   162fe:	4603      	mov	r3, r0
   16300:	b29a      	uxth	r2, r3
   16302:	f64c 1384 	movw	r3, #51588	; 0xc984
   16306:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1630a:	805a      	strh	r2, [r3, #2]
   1630c:	f64c 1384 	movw	r3, #51588	; 0xc984
   16310:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16314:	885b      	ldrh	r3, [r3, #2]
   16316:	b21b      	sxth	r3, r3
   16318:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1631c:	dd07      	ble.n	1632e <last_radio_from_ppm+0xd6>
   1631e:	f64c 1384 	movw	r3, #51588	; 0xc984
   16322:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16326:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1632a:	805a      	strh	r2, [r3, #2]
   1632c:	e00f      	b.n	1634e <last_radio_from_ppm+0xf6>
   1632e:	f64c 1384 	movw	r3, #51588	; 0xc984
   16332:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16336:	885b      	ldrh	r3, [r3, #2]
   16338:	b21b      	sxth	r3, r3
   1633a:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1633e:	da06      	bge.n	1634e <last_radio_from_ppm+0xf6>
   16340:	f64c 1384 	movw	r3, #51588	; 0xc984
   16344:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16348:	f64d 2280 	movw	r2, #55936	; 0xda80
   1634c:	805a      	strh	r2, [r3, #2]
   1634e:	f64c 1370 	movw	r3, #51568	; 0xc970
   16352:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16356:	889b      	ldrh	r3, [r3, #4]
   16358:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1635c:	b29b      	uxth	r3, r3
   1635e:	80fb      	strh	r3, [r7, #6]
   16360:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16364:	4618      	mov	r0, r3
   16366:	f002 f8bd 	bl	184e4 <__aeabi_i2f>
   1636a:	4603      	mov	r3, r0
   1636c:	4618      	mov	r0, r3
   1636e:	f002 fad3 	bl	18918 <__aeabi_f2iz>
   16372:	4603      	mov	r3, r0
   16374:	b29a      	uxth	r2, r3
   16376:	f64c 1384 	movw	r3, #51588	; 0xc984
   1637a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1637e:	809a      	strh	r2, [r3, #4]
   16380:	f64c 1384 	movw	r3, #51588	; 0xc984
   16384:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16388:	889b      	ldrh	r3, [r3, #4]
   1638a:	b21b      	sxth	r3, r3
   1638c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16390:	dd07      	ble.n	163a2 <last_radio_from_ppm+0x14a>
   16392:	f64c 1384 	movw	r3, #51588	; 0xc984
   16396:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1639a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1639e:	809a      	strh	r2, [r3, #4]
   163a0:	e00f      	b.n	163c2 <last_radio_from_ppm+0x16a>
   163a2:	f64c 1384 	movw	r3, #51588	; 0xc984
   163a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163aa:	889b      	ldrh	r3, [r3, #4]
   163ac:	b21b      	sxth	r3, r3
   163ae:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   163b2:	da06      	bge.n	163c2 <last_radio_from_ppm+0x16a>
   163b4:	f64c 1384 	movw	r3, #51588	; 0xc984
   163b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163bc:	f64d 2280 	movw	r2, #55936	; 0xda80
   163c0:	809a      	strh	r2, [r3, #4]
   163c2:	f64c 1370 	movw	r3, #51568	; 0xc970
   163c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163ca:	88db      	ldrh	r3, [r3, #6]
   163cc:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   163d0:	b29b      	uxth	r3, r3
   163d2:	80fb      	strh	r3, [r7, #6]
   163d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   163d8:	4618      	mov	r0, r3
   163da:	f002 f883 	bl	184e4 <__aeabi_i2f>
   163de:	4603      	mov	r3, r0
   163e0:	4618      	mov	r0, r3
   163e2:	f002 fa99 	bl	18918 <__aeabi_f2iz>
   163e6:	4603      	mov	r3, r0
   163e8:	b29a      	uxth	r2, r3
   163ea:	f64c 1384 	movw	r3, #51588	; 0xc984
   163ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163f2:	80da      	strh	r2, [r3, #6]
   163f4:	f64c 1384 	movw	r3, #51588	; 0xc984
   163f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163fc:	88db      	ldrh	r3, [r3, #6]
   163fe:	b21b      	sxth	r3, r3
   16400:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16404:	dd07      	ble.n	16416 <last_radio_from_ppm+0x1be>
   16406:	f64c 1384 	movw	r3, #51588	; 0xc984
   1640a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1640e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16412:	80da      	strh	r2, [r3, #6]
   16414:	e00f      	b.n	16436 <last_radio_from_ppm+0x1de>
   16416:	f64c 1384 	movw	r3, #51588	; 0xc984
   1641a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1641e:	88db      	ldrh	r3, [r3, #6]
   16420:	b21b      	sxth	r3, r3
   16422:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16426:	da06      	bge.n	16436 <last_radio_from_ppm+0x1de>
   16428:	f64c 1384 	movw	r3, #51588	; 0xc984
   1642c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16430:	f64d 2280 	movw	r2, #55936	; 0xda80
   16434:	80da      	strh	r2, [r3, #6]
   16436:	f64c 1370 	movw	r3, #51568	; 0xc970
   1643a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1643e:	891b      	ldrh	r3, [r3, #8]
   16440:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16444:	b29b      	uxth	r3, r3
   16446:	80fb      	strh	r3, [r7, #6]
   16448:	f64c 1398 	movw	r3, #51608	; 0xc998
   1644c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16450:	891b      	ldrh	r3, [r3, #8]
   16452:	b21b      	sxth	r3, r3
   16454:	4618      	mov	r0, r3
   16456:	f002 f845 	bl	184e4 <__aeabi_i2f>
   1645a:	4604      	mov	r4, r0
   1645c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16460:	4618      	mov	r0, r3
   16462:	f002 f83f 	bl	184e4 <__aeabi_i2f>
   16466:	4603      	mov	r3, r0
   16468:	4618      	mov	r0, r3
   1646a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1646e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16472:	f002 f88b 	bl	1858c <__aeabi_fmul>
   16476:	4603      	mov	r3, r0
   16478:	4620      	mov	r0, r4
   1647a:	4619      	mov	r1, r3
   1647c:	f001 ff7e 	bl	1837c <__addsf3>
   16480:	4603      	mov	r3, r0
   16482:	4618      	mov	r0, r3
   16484:	f002 fa48 	bl	18918 <__aeabi_f2iz>
   16488:	4603      	mov	r3, r0
   1648a:	b29a      	uxth	r2, r3
   1648c:	f64c 1398 	movw	r3, #51608	; 0xc998
   16490:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16494:	811a      	strh	r2, [r3, #8]
   16496:	f64c 1370 	movw	r3, #51568	; 0xc970
   1649a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1649e:	895b      	ldrh	r3, [r3, #10]
   164a0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   164a4:	b29b      	uxth	r3, r3
   164a6:	80fb      	strh	r3, [r7, #6]
   164a8:	f64c 1398 	movw	r3, #51608	; 0xc998
   164ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164b0:	895b      	ldrh	r3, [r3, #10]
   164b2:	b21b      	sxth	r3, r3
   164b4:	4618      	mov	r0, r3
   164b6:	f002 f815 	bl	184e4 <__aeabi_i2f>
   164ba:	4604      	mov	r4, r0
   164bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   164c0:	4618      	mov	r0, r3
   164c2:	f002 f80f 	bl	184e4 <__aeabi_i2f>
   164c6:	4603      	mov	r3, r0
   164c8:	4618      	mov	r0, r3
   164ca:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   164ce:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   164d2:	f002 f85b 	bl	1858c <__aeabi_fmul>
   164d6:	4603      	mov	r3, r0
   164d8:	4620      	mov	r0, r4
   164da:	4619      	mov	r1, r3
   164dc:	f001 ff4e 	bl	1837c <__addsf3>
   164e0:	4603      	mov	r3, r0
   164e2:	4618      	mov	r0, r3
   164e4:	f002 fa18 	bl	18918 <__aeabi_f2iz>
   164e8:	4603      	mov	r3, r0
   164ea:	b29a      	uxth	r2, r3
   164ec:	f64c 1398 	movw	r3, #51608	; 0xc998
   164f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164f4:	815a      	strh	r2, [r3, #10]
   164f6:	f64c 1370 	movw	r3, #51568	; 0xc970
   164fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164fe:	899b      	ldrh	r3, [r3, #12]
   16500:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16504:	b29b      	uxth	r3, r3
   16506:	80fb      	strh	r3, [r7, #6]
   16508:	f64c 1398 	movw	r3, #51608	; 0xc998
   1650c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16510:	899b      	ldrh	r3, [r3, #12]
   16512:	b21b      	sxth	r3, r3
   16514:	4618      	mov	r0, r3
   16516:	f001 ffe5 	bl	184e4 <__aeabi_i2f>
   1651a:	4604      	mov	r4, r0
   1651c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16520:	4618      	mov	r0, r3
   16522:	f001 ffdf 	bl	184e4 <__aeabi_i2f>
   16526:	4603      	mov	r3, r0
   16528:	4618      	mov	r0, r3
   1652a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1652e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16532:	f002 f82b 	bl	1858c <__aeabi_fmul>
   16536:	4603      	mov	r3, r0
   16538:	4620      	mov	r0, r4
   1653a:	4619      	mov	r1, r3
   1653c:	f001 ff1e 	bl	1837c <__addsf3>
   16540:	4603      	mov	r3, r0
   16542:	4618      	mov	r0, r3
   16544:	f002 f9e8 	bl	18918 <__aeabi_f2iz>
   16548:	4603      	mov	r3, r0
   1654a:	b29a      	uxth	r2, r3
   1654c:	f64c 1398 	movw	r3, #51608	; 0xc998
   16550:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16554:	819a      	strh	r2, [r3, #12]
   16556:	f64c 1370 	movw	r3, #51568	; 0xc970
   1655a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1655e:	89db      	ldrh	r3, [r3, #14]
   16560:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16564:	b29b      	uxth	r3, r3
   16566:	80fb      	strh	r3, [r7, #6]
   16568:	f64c 1398 	movw	r3, #51608	; 0xc998
   1656c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16570:	89db      	ldrh	r3, [r3, #14]
   16572:	b21b      	sxth	r3, r3
   16574:	4618      	mov	r0, r3
   16576:	f001 ffb5 	bl	184e4 <__aeabi_i2f>
   1657a:	4604      	mov	r4, r0
   1657c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16580:	4618      	mov	r0, r3
   16582:	f001 ffaf 	bl	184e4 <__aeabi_i2f>
   16586:	4603      	mov	r3, r0
   16588:	4618      	mov	r0, r3
   1658a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1658e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16592:	f001 fffb 	bl	1858c <__aeabi_fmul>
   16596:	4603      	mov	r3, r0
   16598:	4620      	mov	r0, r4
   1659a:	4619      	mov	r1, r3
   1659c:	f001 feee 	bl	1837c <__addsf3>
   165a0:	4603      	mov	r3, r0
   165a2:	4618      	mov	r0, r3
   165a4:	f002 f9b8 	bl	18918 <__aeabi_f2iz>
   165a8:	4603      	mov	r3, r0
   165aa:	b29a      	uxth	r2, r3
   165ac:	f64c 1398 	movw	r3, #51608	; 0xc998
   165b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165b4:	81da      	strh	r2, [r3, #14]
   165b6:	f64c 1370 	movw	r3, #51568	; 0xc970
   165ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165be:	8a1b      	ldrh	r3, [r3, #16]
   165c0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   165c4:	b29b      	uxth	r3, r3
   165c6:	80fb      	strh	r3, [r7, #6]
   165c8:	f64c 1398 	movw	r3, #51608	; 0xc998
   165cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165d0:	8a1b      	ldrh	r3, [r3, #16]
   165d2:	b21b      	sxth	r3, r3
   165d4:	4618      	mov	r0, r3
   165d6:	f001 ff85 	bl	184e4 <__aeabi_i2f>
   165da:	4604      	mov	r4, r0
   165dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   165e0:	4618      	mov	r0, r3
   165e2:	f001 ff7f 	bl	184e4 <__aeabi_i2f>
   165e6:	4603      	mov	r3, r0
   165e8:	4618      	mov	r0, r3
   165ea:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   165ee:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   165f2:	f001 ffcb 	bl	1858c <__aeabi_fmul>
   165f6:	4603      	mov	r3, r0
   165f8:	4620      	mov	r0, r4
   165fa:	4619      	mov	r1, r3
   165fc:	f001 febe 	bl	1837c <__addsf3>
   16600:	4603      	mov	r3, r0
   16602:	4618      	mov	r0, r3
   16604:	f002 f988 	bl	18918 <__aeabi_f2iz>
   16608:	4603      	mov	r3, r0
   1660a:	b29a      	uxth	r2, r3
   1660c:	f64c 1398 	movw	r3, #51608	; 0xc998
   16610:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16614:	821a      	strh	r2, [r3, #16]
   16616:	f64c 13b0 	movw	r3, #51632	; 0xc9b0
   1661a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1661e:	781b      	ldrb	r3, [r3, #0]
   16620:	3301      	adds	r3, #1
   16622:	b2da      	uxtb	r2, r3
   16624:	f64c 13b0 	movw	r3, #51632	; 0xc9b0
   16628:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1662c:	701a      	strb	r2, [r3, #0]
   1662e:	f64c 13b0 	movw	r3, #51632	; 0xc9b0
   16632:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16636:	781b      	ldrb	r3, [r3, #0]
   16638:	2b0a      	cmp	r3, #10
   1663a:	f040 8101 	bne.w	16840 <last_radio_from_ppm+0x5e8>
   1663e:	f64c 13b0 	movw	r3, #51632	; 0xc9b0
   16642:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16646:	2200      	movs	r2, #0
   16648:	701a      	strb	r2, [r3, #0]
   1664a:	f64c 1398 	movw	r3, #51608	; 0xc998
   1664e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16652:	891a      	ldrh	r2, [r3, #8]
   16654:	f64c 1384 	movw	r3, #51588	; 0xc984
   16658:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1665c:	811a      	strh	r2, [r3, #8]
   1665e:	f64c 1398 	movw	r3, #51608	; 0xc998
   16662:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16666:	2200      	movs	r2, #0
   16668:	811a      	strh	r2, [r3, #8]
   1666a:	f64c 1384 	movw	r3, #51588	; 0xc984
   1666e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16672:	891b      	ldrh	r3, [r3, #8]
   16674:	b21b      	sxth	r3, r3
   16676:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1667a:	dd07      	ble.n	1668c <last_radio_from_ppm+0x434>
   1667c:	f64c 1384 	movw	r3, #51588	; 0xc984
   16680:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16684:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16688:	811a      	strh	r2, [r3, #8]
   1668a:	e00f      	b.n	166ac <last_radio_from_ppm+0x454>
   1668c:	f64c 1384 	movw	r3, #51588	; 0xc984
   16690:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16694:	891b      	ldrh	r3, [r3, #8]
   16696:	b21b      	sxth	r3, r3
   16698:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1669c:	da06      	bge.n	166ac <last_radio_from_ppm+0x454>
   1669e:	f64c 1384 	movw	r3, #51588	; 0xc984
   166a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166a6:	f64d 2280 	movw	r2, #55936	; 0xda80
   166aa:	811a      	strh	r2, [r3, #8]
   166ac:	f64c 1398 	movw	r3, #51608	; 0xc998
   166b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166b4:	895a      	ldrh	r2, [r3, #10]
   166b6:	f64c 1384 	movw	r3, #51588	; 0xc984
   166ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166be:	815a      	strh	r2, [r3, #10]
   166c0:	f64c 1398 	movw	r3, #51608	; 0xc998
   166c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166c8:	2200      	movs	r2, #0
   166ca:	815a      	strh	r2, [r3, #10]
   166cc:	f64c 1384 	movw	r3, #51588	; 0xc984
   166d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166d4:	895b      	ldrh	r3, [r3, #10]
   166d6:	b21b      	sxth	r3, r3
   166d8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   166dc:	dd07      	ble.n	166ee <last_radio_from_ppm+0x496>
   166de:	f64c 1384 	movw	r3, #51588	; 0xc984
   166e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166e6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   166ea:	815a      	strh	r2, [r3, #10]
   166ec:	e00f      	b.n	1670e <last_radio_from_ppm+0x4b6>
   166ee:	f64c 1384 	movw	r3, #51588	; 0xc984
   166f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166f6:	895b      	ldrh	r3, [r3, #10]
   166f8:	b21b      	sxth	r3, r3
   166fa:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   166fe:	da06      	bge.n	1670e <last_radio_from_ppm+0x4b6>
   16700:	f64c 1384 	movw	r3, #51588	; 0xc984
   16704:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16708:	f64d 2280 	movw	r2, #55936	; 0xda80
   1670c:	815a      	strh	r2, [r3, #10]
   1670e:	f64c 1398 	movw	r3, #51608	; 0xc998
   16712:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16716:	899a      	ldrh	r2, [r3, #12]
   16718:	f64c 1384 	movw	r3, #51588	; 0xc984
   1671c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16720:	819a      	strh	r2, [r3, #12]
   16722:	f64c 1398 	movw	r3, #51608	; 0xc998
   16726:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1672a:	2200      	movs	r2, #0
   1672c:	819a      	strh	r2, [r3, #12]
   1672e:	f64c 1384 	movw	r3, #51588	; 0xc984
   16732:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16736:	899b      	ldrh	r3, [r3, #12]
   16738:	b21b      	sxth	r3, r3
   1673a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1673e:	dd07      	ble.n	16750 <last_radio_from_ppm+0x4f8>
   16740:	f64c 1384 	movw	r3, #51588	; 0xc984
   16744:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16748:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1674c:	819a      	strh	r2, [r3, #12]
   1674e:	e00f      	b.n	16770 <last_radio_from_ppm+0x518>
   16750:	f64c 1384 	movw	r3, #51588	; 0xc984
   16754:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16758:	899b      	ldrh	r3, [r3, #12]
   1675a:	b21b      	sxth	r3, r3
   1675c:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16760:	da06      	bge.n	16770 <last_radio_from_ppm+0x518>
   16762:	f64c 1384 	movw	r3, #51588	; 0xc984
   16766:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1676a:	f64d 2280 	movw	r2, #55936	; 0xda80
   1676e:	819a      	strh	r2, [r3, #12]
   16770:	f64c 1398 	movw	r3, #51608	; 0xc998
   16774:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16778:	89da      	ldrh	r2, [r3, #14]
   1677a:	f64c 1384 	movw	r3, #51588	; 0xc984
   1677e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16782:	81da      	strh	r2, [r3, #14]
   16784:	f64c 1398 	movw	r3, #51608	; 0xc998
   16788:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1678c:	2200      	movs	r2, #0
   1678e:	81da      	strh	r2, [r3, #14]
   16790:	f64c 1384 	movw	r3, #51588	; 0xc984
   16794:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16798:	89db      	ldrh	r3, [r3, #14]
   1679a:	b21b      	sxth	r3, r3
   1679c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   167a0:	dd07      	ble.n	167b2 <last_radio_from_ppm+0x55a>
   167a2:	f64c 1384 	movw	r3, #51588	; 0xc984
   167a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167aa:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   167ae:	81da      	strh	r2, [r3, #14]
   167b0:	e00f      	b.n	167d2 <last_radio_from_ppm+0x57a>
   167b2:	f64c 1384 	movw	r3, #51588	; 0xc984
   167b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167ba:	89db      	ldrh	r3, [r3, #14]
   167bc:	b21b      	sxth	r3, r3
   167be:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   167c2:	da06      	bge.n	167d2 <last_radio_from_ppm+0x57a>
   167c4:	f64c 1384 	movw	r3, #51588	; 0xc984
   167c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167cc:	f64d 2280 	movw	r2, #55936	; 0xda80
   167d0:	81da      	strh	r2, [r3, #14]
   167d2:	f64c 1398 	movw	r3, #51608	; 0xc998
   167d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167da:	8a1a      	ldrh	r2, [r3, #16]
   167dc:	f64c 1384 	movw	r3, #51588	; 0xc984
   167e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167e4:	821a      	strh	r2, [r3, #16]
   167e6:	f64c 1398 	movw	r3, #51608	; 0xc998
   167ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167ee:	2200      	movs	r2, #0
   167f0:	821a      	strh	r2, [r3, #16]
   167f2:	f64c 1384 	movw	r3, #51588	; 0xc984
   167f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167fa:	8a1b      	ldrh	r3, [r3, #16]
   167fc:	b21b      	sxth	r3, r3
   167fe:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16802:	dd07      	ble.n	16814 <last_radio_from_ppm+0x5bc>
   16804:	f64c 1384 	movw	r3, #51588	; 0xc984
   16808:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1680c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16810:	821a      	strh	r2, [r3, #16]
   16812:	e00f      	b.n	16834 <last_radio_from_ppm+0x5dc>
   16814:	f64c 1384 	movw	r3, #51588	; 0xc984
   16818:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1681c:	8a1b      	ldrh	r3, [r3, #16]
   1681e:	b21b      	sxth	r3, r3
   16820:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16824:	da06      	bge.n	16834 <last_radio_from_ppm+0x5dc>
   16826:	f64c 1384 	movw	r3, #51588	; 0xc984
   1682a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1682e:	f64d 2280 	movw	r2, #55936	; 0xda80
   16832:	821a      	strh	r2, [r3, #16]
   16834:	f64c 13aa 	movw	r3, #51626	; 0xc9aa
   16838:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1683c:	2201      	movs	r2, #1
   1683e:	701a      	strb	r2, [r3, #0]
}
   16840:	370c      	adds	r7, #12
   16842:	46bd      	mov	sp, r7
   16844:	bd90      	pop	{r4, r7, pc}
   16846:	bf00      	nop

00016848 <spi_reset>:
volatile bool_t spi_was_interrupted = FALSE;

static volatile uint8_t idx_buf = 0;
static volatile uint8_t xor_in, xor_out;

void spi_reset(void) {
   16848:	b480      	push	{r7}
   1684a:	af00      	add	r7, sp, #0
  idx_buf = 0;
   1684c:	f64c 13e4 	movw	r3, #51684	; 0xc9e4
   16850:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16854:	2200      	movs	r2, #0
   16856:	701a      	strb	r2, [r3, #0]
  xor_in = 0;
   16858:	f64c 13e5 	movw	r3, #51685	; 0xc9e5
   1685c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16860:	2200      	movs	r2, #0
   16862:	701a      	strb	r2, [r3, #0]
  xor_out = ((uint8_t*)&to_mega128)[idx_buf];
   16864:	f64c 13e4 	movw	r3, #51684	; 0xc9e4
   16868:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1686c:	781b      	ldrb	r3, [r3, #0]
   1686e:	b2db      	uxtb	r3, r3
   16870:	461a      	mov	r2, r3
   16872:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   16876:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1687a:	4413      	add	r3, r2
   1687c:	781a      	ldrb	r2, [r3, #0]
   1687e:	f64c 13e6 	movw	r3, #51686	; 0xc9e6
   16882:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16886:	701a      	strb	r2, [r3, #0]
  SPDR = xor_out;
   16888:	f242 030f 	movw	r3, #8207	; 0x200f
   1688c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16890:	f64c 12e6 	movw	r2, #51686	; 0xc9e6
   16894:	f2c2 0204 	movt	r2, #8196	; 0x2004
   16898:	7812      	ldrb	r2, [r2, #0]
   1689a:	b2d2      	uxtb	r2, r2
   1689c:	701a      	strb	r2, [r3, #0]
  mega128_receive_valid = FALSE;
   1689e:	f64c 13e2 	movw	r3, #51682	; 0xc9e2
   168a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168a6:	2200      	movs	r2, #0
   168a8:	701a      	strb	r2, [r3, #0]
}
   168aa:	46bd      	mov	sp, r7
   168ac:	f85d 7b04 	ldr.w	r7, [sp], #4
   168b0:	4770      	bx	lr
   168b2:	bf00      	nop

000168b4 <fbw_spi_init>:

void fbw_spi_init(void) {
   168b4:	b480      	push	{r7}
   168b6:	af00      	add	r7, sp, #0
  to_mega128.status = 0;
   168b8:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   168bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168c0:	2200      	movs	r2, #0
   168c2:	74da      	strb	r2, [r3, #19]
  to_mega128.nb_err = 0;
   168c4:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   168c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168cc:	2200      	movs	r2, #0
   168ce:	751a      	strb	r2, [r3, #20]

  /* set it pin output */
  //  IT_DDR |= _BV(IT_PIN);

  /* set MISO pin output */
  SPI_DDR |= _BV(SPI_MISO_PIN);
   168d0:	f242 0317 	movw	r3, #8215	; 0x2017
   168d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168d8:	f242 0217 	movw	r2, #8215	; 0x2017
   168dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   168e0:	7812      	ldrb	r2, [r2, #0]
   168e2:	b2d2      	uxtb	r2, r2
   168e4:	f042 0210 	orr.w	r2, r2, #16
   168e8:	b2d2      	uxtb	r2, r2
   168ea:	701a      	strb	r2, [r3, #0]
  /* enable SPI, slave, MSB first, sck idle low */
  SPCR = _BV(SPE);
   168ec:	f242 030d 	movw	r3, #8205	; 0x200d
   168f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168f4:	2240      	movs	r2, #64	; 0x40
   168f6:	701a      	strb	r2, [r3, #0]
  /* enable interrupt */
  SPCR |= _BV(SPIE);
   168f8:	f242 030d 	movw	r3, #8205	; 0x200d
   168fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16900:	f242 020d 	movw	r2, #8205	; 0x200d
   16904:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16908:	7812      	ldrb	r2, [r2, #0]
   1690a:	b2d2      	uxtb	r2, r2
   1690c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16910:	b2d2      	uxtb	r2, r2
   16912:	701a      	strb	r2, [r3, #0]
}
   16914:	46bd      	mov	sp, r7
   16916:	f85d 7b04 	ldr.w	r7, [sp], #4
   1691a:	4770      	bx	lr
   1691c:	0000      	movs	r0, r0
	...

00016920 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
   16920:	b480      	push	{r7}
   16922:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
   16924:	f242 032f 	movw	r3, #8239	; 0x202f
   16928:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1692c:	2200      	movs	r2, #0
   1692e:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
   16930:	f242 032e 	movw	r3, #8238	; 0x202e
   16934:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16938:	2201      	movs	r2, #1
   1693a:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
   1693c:	f242 0325 	movw	r3, #8229	; 0x2025
   16940:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16944:	2207      	movs	r2, #7
   16946:	701a      	strb	r2, [r3, #0]
}
   16948:	46bd      	mov	sp, r7
   1694a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1694e:	4770      	bx	lr

00016950 <ppm_init>:
 *
 * JR might be rising edge clocked; set that as an option
 */
static inline void
ppm_init( void )
{
   16950:	b480      	push	{r7}
   16952:	af00      	add	r7, sp, #0
#if   PPM_RX_TYPE == RXFUTABA
  cbi( TCCR1B, ICES1 );
   16954:	f242 032e 	movw	r3, #8238	; 0x202e
   16958:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1695c:	f242 022e 	movw	r2, #8238	; 0x202e
   16960:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16964:	7812      	ldrb	r2, [r2, #0]
   16966:	b2d2      	uxtb	r2, r2
   16968:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1696c:	b2d2      	uxtb	r2, r2
   1696e:	701a      	strb	r2, [r3, #0]
#else
#	error "ppm.h: Unknown receiver type in PPM_RX_TYPE"
#endif

  /* No noise cancelation */
  sbi( TCCR1B, ICNC1 );
   16970:	f242 032e 	movw	r3, #8238	; 0x202e
   16974:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16978:	f242 022e 	movw	r2, #8238	; 0x202e
   1697c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16980:	7812      	ldrb	r2, [r2, #0]
   16982:	b2d2      	uxtb	r2, r2
   16984:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16988:	b2d2      	uxtb	r2, r2
   1698a:	701a      	strb	r2, [r3, #0]
  
  /* Set ICP to input, no internal pull up */
  cbi( PPM_DDR, PPM_PIN);
   1698c:	f242 0317 	movw	r3, #8215	; 0x2017
   16990:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16994:	f242 0217 	movw	r2, #8215	; 0x2017
   16998:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1699c:	7812      	ldrb	r2, [r2, #0]
   1699e:	b2d2      	uxtb	r2, r2
   169a0:	f022 0201 	bic.w	r2, r2, #1
   169a4:	b2d2      	uxtb	r2, r2
   169a6:	701a      	strb	r2, [r3, #0]
  
  /* Enable interrupt on input capture */
  sbi( TIMSK, TICIE1 );
   169a8:	f242 0337 	movw	r3, #8247	; 0x2037
   169ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   169b0:	f242 0237 	movw	r2, #8247	; 0x2037
   169b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   169b8:	7812      	ldrb	r2, [r2, #0]
   169ba:	b2d2      	uxtb	r2, r2
   169bc:	f042 0220 	orr.w	r2, r2, #32
   169c0:	b2d2      	uxtb	r2, r2
   169c2:	701a      	strb	r2, [r3, #0]
}
   169c4:	46bd      	mov	sp, r7
   169c6:	f85d 7b04 	ldr.w	r7, [sp], #4
   169ca:	4770      	bx	lr

000169cc <to_autopilot_from_last_radio>:
/*   uart_transmit('\n'); */
/* } */


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
   169cc:	b580      	push	{r7, lr}
   169ce:	b082      	sub	sp, #8
   169d0:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   169d2:	2300      	movs	r3, #0
   169d4:	71fb      	strb	r3, [r7, #7]
   169d6:	e010      	b.n	169fa <to_autopilot_from_last_radio+0x2e>
     to_mega128.channels[i] = last_radio[i];
   169d8:	79fa      	ldrb	r2, [r7, #7]
   169da:	79f9      	ldrb	r1, [r7, #7]
   169dc:	f64c 1384 	movw	r3, #51588	; 0xc984
   169e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169e4:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   169e8:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   169ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169f0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   169f4:	79fb      	ldrb	r3, [r7, #7]
   169f6:	3301      	adds	r3, #1
   169f8:	71fb      	strb	r3, [r7, #7]
   169fa:	79fb      	ldrb	r3, [r7, #7]
   169fc:	2b08      	cmp	r3, #8
   169fe:	d9eb      	bls.n	169d8 <to_autopilot_from_last_radio+0xc>
     to_mega128.channels[i] = last_radio[i];
  to_mega128.status = (radio_ok ? _BV(STATUS_RADIO_OK) : 0);
   16a00:	f64c 2374 	movw	r3, #51828	; 0xca74
   16a04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a08:	781b      	ldrb	r3, [r3, #0]
   16a0a:	2b00      	cmp	r3, #0
   16a0c:	bf0c      	ite	eq
   16a0e:	2300      	moveq	r3, #0
   16a10:	2301      	movne	r3, #1
   16a12:	b2db      	uxtb	r3, r3
   16a14:	461a      	mov	r2, r3
   16a16:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   16a1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a1e:	74da      	strb	r2, [r3, #19]
  to_mega128.status |= (radio_really_lost ? _BV(RADIO_REALLY_LOST) : 0);
   16a20:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   16a24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a28:	7cdb      	ldrb	r3, [r3, #19]
   16a2a:	b2da      	uxtb	r2, r3
   16a2c:	f64c 2376 	movw	r3, #51830	; 0xca76
   16a30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a34:	781b      	ldrb	r3, [r3, #0]
   16a36:	2b00      	cmp	r3, #0
   16a38:	d001      	beq.n	16a3e <to_autopilot_from_last_radio+0x72>
   16a3a:	2302      	movs	r3, #2
   16a3c:	e000      	b.n	16a40 <to_autopilot_from_last_radio+0x74>
   16a3e:	2300      	movs	r3, #0
   16a40:	4313      	orrs	r3, r2
   16a42:	b2db      	uxtb	r3, r3
   16a44:	b2da      	uxtb	r2, r3
   16a46:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   16a4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a4e:	74da      	strb	r2, [r3, #19]
  if (last_radio_contains_avg_channels) {
   16a50:	f64c 13aa 	movw	r3, #51626	; 0xc9aa
   16a54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a58:	781b      	ldrb	r3, [r3, #0]
   16a5a:	2b00      	cmp	r3, #0
   16a5c:	d012      	beq.n	16a84 <to_autopilot_from_last_radio+0xb8>
    to_mega128.status |= _BV(AVERAGED_CHANNELS_SENT);
   16a5e:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   16a62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a66:	7cdb      	ldrb	r3, [r3, #19]
   16a68:	f043 0304 	orr.w	r3, r3, #4
   16a6c:	b2da      	uxtb	r2, r3
   16a6e:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   16a72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a76:	74da      	strb	r2, [r3, #19]
    last_radio_contains_avg_channels = FALSE;
   16a78:	f64c 13aa 	movw	r3, #51626	; 0xc9aa
   16a7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a80:	2200      	movs	r2, #0
   16a82:	701a      	strb	r2, [r3, #0]
  }
  to_mega128.ppm_cpt = last_ppm_cpt;
   16a84:	f64c 2378 	movw	r3, #51832	; 0xca78
   16a88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a8c:	781a      	ldrb	r2, [r3, #0]
   16a8e:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   16a92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a96:	749a      	strb	r2, [r3, #18]
#ifndef CTL_BRD_V1_1
  to_mega128.vsupply = VoltageOfAdc(vsupply_adc_buf.sum/AV_NB_SAMPLE) * 10;
   16a98:	f64c 13e8 	movw	r3, #51688	; 0xc9e8
   16a9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16aa0:	881b      	ldrh	r3, [r3, #0]
   16aa2:	4618      	mov	r0, r3
   16aa4:	f001 f8cc 	bl	17c40 <__aeabi_i2d>
   16aa8:	4602      	mov	r2, r0
   16aaa:	460b      	mov	r3, r1
   16aac:	4610      	mov	r0, r2
   16aae:	4619      	mov	r1, r3
   16ab0:	a31b      	add	r3, pc, #108	; (adr r3, 16b20 <to_autopilot_from_last_radio+0x154>)
   16ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
   16ab6:	f001 f929 	bl	17d0c <__aeabi_dmul>
   16aba:	4602      	mov	r2, r0
   16abc:	460b      	mov	r3, r1
   16abe:	4610      	mov	r0, r2
   16ac0:	4619      	mov	r1, r3
   16ac2:	f04f 0200 	mov.w	r2, #0
   16ac6:	f04f 0300 	mov.w	r3, #0
   16aca:	f2c4 0340 	movt	r3, #16448	; 0x4040
   16ace:	f001 fa47 	bl	17f60 <__aeabi_ddiv>
   16ad2:	4602      	mov	r2, r0
   16ad4:	460b      	mov	r3, r1
   16ad6:	4610      	mov	r0, r2
   16ad8:	4619      	mov	r1, r3
   16ada:	a313      	add	r3, pc, #76	; (adr r3, 16b28 <to_autopilot_from_last_radio+0x15c>)
   16adc:	e9d3 2300 	ldrd	r2, r3, [r3]
   16ae0:	f000 ff62 	bl	179a8 <__adddf3>
   16ae4:	4602      	mov	r2, r0
   16ae6:	460b      	mov	r3, r1
   16ae8:	4610      	mov	r0, r2
   16aea:	4619      	mov	r1, r3
   16aec:	f04f 0200 	mov.w	r2, #0
   16af0:	f04f 0300 	mov.w	r3, #0
   16af4:	f2c4 0324 	movt	r3, #16420	; 0x4024
   16af8:	f001 f908 	bl	17d0c <__aeabi_dmul>
   16afc:	4602      	mov	r2, r0
   16afe:	460b      	mov	r3, r1
   16b00:	4610      	mov	r0, r2
   16b02:	4619      	mov	r1, r3
   16b04:	f001 fbc4 	bl	18290 <__aeabi_d2uiz>
   16b08:	4603      	mov	r3, r0
   16b0a:	b2da      	uxtb	r2, r3
   16b0c:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   16b10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b14:	755a      	strb	r2, [r3, #21]
#else
  to_mega128.vsupply = 0;
#endif
}
   16b16:	3708      	adds	r7, #8
   16b18:	46bd      	mov	sp, r7
   16b1a:	bd80      	pop	{r7, pc}
   16b1c:	f3af 8000 	nop.w
   16b20:	1eb851ec 	.word	0x1eb851ec
   16b24:	3f91eb85 	.word	0x3f91eb85
   16b28:	020c49ba 	.word	0x020c49ba
   16b2c:	3fb6872b 	.word	0x3fb6872b

00016b30 <send_data_to_autopilot_task>:

void send_data_to_autopilot_task(void)
{
   16b30:	b580      	push	{r7, lr}
   16b32:	af00      	add	r7, sp, #0
	//vPrintString("S_2 send_data_to_autopilot_task start! \n\r"); //SunnyBeike

    // modified by wanbo
   if ( !SpiIsSelected() && spi_was_interrupted ) 
   16b34:	f242 0316 	movw	r3, #8214	; 0x2016
   16b38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b3c:	781b      	ldrb	r3, [r3, #0]
   16b3e:	b2db      	uxtb	r3, r3
   16b40:	f003 0304 	and.w	r3, r3, #4
   16b44:	2b00      	cmp	r3, #0
   16b46:	d011      	beq.n	16b6c <send_data_to_autopilot_task+0x3c>
   16b48:	f64c 13e3 	movw	r3, #51683	; 0xc9e3
   16b4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b50:	781b      	ldrb	r3, [r3, #0]
   16b52:	b2db      	uxtb	r3, r3
   16b54:	2b00      	cmp	r3, #0
   16b56:	d009      	beq.n	16b6c <send_data_to_autopilot_task+0x3c>
   {
      spi_was_interrupted = FALSE;
   16b58:	f64c 13e3 	movw	r3, #51683	; 0xc9e3
   16b5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b60:	2200      	movs	r2, #0
   16b62:	701a      	strb	r2, [r3, #0]
      to_autopilot_from_last_radio();
   16b64:	f7ff ff32 	bl	169cc <to_autopilot_from_last_radio>
      spi_reset();
   16b68:	f7ff fe6e 	bl	16848 <spi_reset>
   }
	//vPrintString("S_2 send_data_to_autopilot_task end! \n\r"); //SunnyBeike

}
   16b6c:	bd80      	pop	{r7, pc}
   16b6e:	bf00      	nop

00016b70 <fbw_init>:
	static uint8_t _1Hz;
	static uint8_t _20Hz;
#endif
*/

void fbw_init(void) {
   16b70:	b580      	push	{r7, lr}
   16b72:	af00      	add	r7, sp, #0
  uart_init_tx();
   16b74:	f000 fb68 	bl	17248 <uart_init_tx>
  uart_print_string("FBW Booting $Id: main.c,v 1.3 2008/10/22 19:41:19 casse Exp $\n\r");
   16b78:	f648 30b0 	movw	r0, #35760	; 0x8bb0
   16b7c:	f2c0 0001 	movt	r0, #1
   16b80:	f000 fc40 	bl	17404 <uart_print_string>

#ifndef CTL_BRD_V1_1
  fbw_adc_init();
   16b84:	f7ff faa0 	bl	160c8 <fbw_adc_init>
  fbw_adc_buf_channel(3, &vsupply_adc_buf);
   16b88:	2003      	movs	r0, #3
   16b8a:	f64c 11e8 	movw	r1, #51688	; 0xc9e8
   16b8e:	f2c2 0104 	movt	r1, #8196	; 0x2004
   16b92:	f7ff fa85 	bl	160a0 <fbw_adc_buf_channel>
  fbw_adc_buf_channel(6, &vservos_adc_buf);
   16b96:	2006      	movs	r0, #6
   16b98:	f64c 212c 	movw	r1, #51756	; 0xca2c
   16b9c:	f2c2 0104 	movt	r1, #8196	; 0x2004
   16ba0:	f7ff fa7e 	bl	160a0 <fbw_adc_buf_channel>
#endif
  timer_init();
   16ba4:	f7ff febc 	bl	16920 <timer_init>
  servo_init();
   16ba8:	f000 f8fa 	bl	16da0 <servo_init>
  ppm_init();
   16bac:	f7ff fed0 	bl	16950 <ppm_init>
  fbw_spi_init();
   16bb0:	f7ff fe80 	bl	168b4 <fbw_spi_init>
  //sei(); //FN
}
   16bb4:	bd80      	pop	{r7, pc}
   16bb6:	bf00      	nop

00016bb8 <test_ppm_task>:
  return 0;
}
#endif
*/
void test_ppm_task(void)
{
   16bb8:	b580      	push	{r7, lr}
   16bba:	af00      	add	r7, sp, #0
	//vPrintString("S_1 test_ppm_task start! \n\r"); //SunnyBeike
    // modified by wanbo
    if( ppm_valid ) 
   16bbc:	f64c 13ab 	movw	r3, #51627	; 0xc9ab
   16bc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bc4:	781b      	ldrb	r3, [r3, #0]
   16bc6:	b2db      	uxtb	r3, r3
   16bc8:	2b00      	cmp	r3, #0
   16bca:	d04c      	beq.n	16c66 <test_ppm_task+0xae>
    {
      ppm_valid = FALSE;
   16bcc:	f64c 13ab 	movw	r3, #51627	; 0xc9ab
   16bd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bd4:	2200      	movs	r2, #0
   16bd6:	701a      	strb	r2, [r3, #0]
      ppm_cpt++;
   16bd8:	f64c 2377 	movw	r3, #51831	; 0xca77
   16bdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16be0:	781b      	ldrb	r3, [r3, #0]
   16be2:	3301      	adds	r3, #1
   16be4:	b2da      	uxtb	r2, r3
   16be6:	f64c 2377 	movw	r3, #51831	; 0xca77
   16bea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bee:	701a      	strb	r2, [r3, #0]
      radio_ok = TRUE;
   16bf0:	f64c 2374 	movw	r3, #51828	; 0xca74
   16bf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bf8:	2201      	movs	r2, #1
   16bfa:	701a      	strb	r2, [r3, #0]
      radio_really_lost = FALSE;
   16bfc:	f64c 2376 	movw	r3, #51830	; 0xca76
   16c00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c04:	2200      	movs	r2, #0
   16c06:	701a      	strb	r2, [r3, #0]
      time_since_last_ppm = 0;
   16c08:	f64c 2372 	movw	r3, #51826	; 0xca72
   16c0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c10:	2200      	movs	r2, #0
   16c12:	801a      	strh	r2, [r3, #0]
      last_radio_from_ppm();
   16c14:	f7ff fb20 	bl	16258 <last_radio_from_ppm>
      if (last_radio_contains_avg_channels) 
   16c18:	f64c 13aa 	movw	r3, #51626	; 0xc9aa
   16c1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c20:	781b      	ldrb	r3, [r3, #0]
   16c22:	2b00      	cmp	r3, #0
   16c24:	d011      	beq.n	16c4a <test_ppm_task+0x92>
      {
	mode = MODE_OF_PPRZ(last_radio[RADIO_MODE]);
   16c26:	f64c 1384 	movw	r3, #51588	; 0xc984
   16c2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c2e:	891b      	ldrh	r3, [r3, #8]
   16c30:	b21b      	sxth	r3, r3
   16c32:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
   16c36:	bfb4      	ite	lt
   16c38:	2300      	movlt	r3, #0
   16c3a:	2301      	movge	r3, #1
   16c3c:	b2db      	uxtb	r3, r3
   16c3e:	461a      	mov	r2, r3
   16c40:	f64c 2370 	movw	r3, #51824	; 0xca70
   16c44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c48:	701a      	strb	r2, [r3, #0]
      }
      if (mode == MODE_MANUAL) 
   16c4a:	f64c 2370 	movw	r3, #51824	; 0xca70
   16c4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c52:	781b      	ldrb	r3, [r3, #0]
   16c54:	2b00      	cmp	r3, #0
   16c56:	d11a      	bne.n	16c8e <test_ppm_task+0xd6>
      {
	servo_set(last_radio);
   16c58:	f64c 1084 	movw	r0, #51588	; 0xc984
   16c5c:	f2c2 0004 	movt	r0, #8196	; 0x2004
   16c60:	f000 f97c 	bl	16f5c <servo_set>
   16c64:	e013      	b.n	16c8e <test_ppm_task+0xd6>
      }
    } 
    else if (mode == MODE_MANUAL && radio_really_lost) 
   16c66:	f64c 2370 	movw	r3, #51824	; 0xca70
   16c6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c6e:	781b      	ldrb	r3, [r3, #0]
   16c70:	2b00      	cmp	r3, #0
   16c72:	d10c      	bne.n	16c8e <test_ppm_task+0xd6>
   16c74:	f64c 2376 	movw	r3, #51830	; 0xca76
   16c78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c7c:	781b      	ldrb	r3, [r3, #0]
   16c7e:	2b00      	cmp	r3, #0
   16c80:	d005      	beq.n	16c8e <test_ppm_task+0xd6>
    {
      mode = MODE_AUTO;
   16c82:	f64c 2370 	movw	r3, #51824	; 0xca70
   16c86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c8a:	2201      	movs	r2, #1
   16c8c:	701a      	strb	r2, [r3, #0]
    }
    if (time_since_last_ppm >= STALLED_TIME) 
   16c8e:	f64c 2372 	movw	r3, #51826	; 0xca72
   16c92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c96:	881b      	ldrh	r3, [r3, #0]
   16c98:	2b1d      	cmp	r3, #29
   16c9a:	d905      	bls.n	16ca8 <test_ppm_task+0xf0>
    {
      radio_ok = FALSE;
   16c9c:	f64c 2374 	movw	r3, #51828	; 0xca74
   16ca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ca4:	2200      	movs	r2, #0
   16ca6:	701a      	strb	r2, [r3, #0]
    }
    if (time_since_last_ppm >= REALLY_STALLED_TIME) 
   16ca8:	f64c 2372 	movw	r3, #51826	; 0xca72
   16cac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16cb0:	881b      	ldrh	r3, [r3, #0]
   16cb2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   16cb6:	d305      	bcc.n	16cc4 <test_ppm_task+0x10c>
    {
      radio_really_lost = TRUE;
   16cb8:	f64c 2376 	movw	r3, #51830	; 0xca76
   16cbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16cc0:	2201      	movs	r2, #1
   16cc2:	701a      	strb	r2, [r3, #0]
    }
	//vPrintString("S_1 test_ppm_task end! \n\r"); //SunnyBeike

}
   16cc4:	bd80      	pop	{r7, pc}
   16cc6:	bf00      	nop

00016cc8 <check_failsafe_task>:
void check_failsafe_task(void)
{
   16cc8:	b580      	push	{r7, lr}
   16cca:	af00      	add	r7, sp, #0
	//vPrintString("S_9 check_failsafe_task start! \n\r"); //SunnyBeike
    //modified by wanbo
    if ((mode == MODE_MANUAL && !radio_ok) || (mode == MODE_AUTO && !mega128_ok)) 
   16ccc:	f64c 2370 	movw	r3, #51824	; 0xca70
   16cd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16cd4:	781b      	ldrb	r3, [r3, #0]
   16cd6:	2b00      	cmp	r3, #0
   16cd8:	d106      	bne.n	16ce8 <check_failsafe_task+0x20>
   16cda:	f64c 2374 	movw	r3, #51828	; 0xca74
   16cde:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ce2:	781b      	ldrb	r3, [r3, #0]
   16ce4:	2b00      	cmp	r3, #0
   16ce6:	d00d      	beq.n	16d04 <check_failsafe_task+0x3c>
   16ce8:	f64c 2370 	movw	r3, #51824	; 0xca70
   16cec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16cf0:	781b      	ldrb	r3, [r3, #0]
   16cf2:	2b01      	cmp	r3, #1
   16cf4:	d10c      	bne.n	16d10 <check_failsafe_task+0x48>
   16cf6:	f64c 2375 	movw	r3, #51829	; 0xca75
   16cfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16cfe:	781b      	ldrb	r3, [r3, #0]
   16d00:	2b00      	cmp	r3, #0
   16d02:	d105      	bne.n	16d10 <check_failsafe_task+0x48>
    {
      servo_set(failsafe);
   16d04:	f648 309c 	movw	r0, #35740	; 0x8b9c
   16d08:	f2c0 0001 	movt	r0, #1
   16d0c:	f000 f926 	bl	16f5c <servo_set>
    }
	//vPrintString("S_9 check_failsafe_task end! \n\r"); //SunnyBeike
}
   16d10:	bd80      	pop	{r7, pc}
   16d12:	bf00      	nop

00016d14 <check_mega128_values_task>:
void check_mega128_values_task(void)
{
   16d14:	b580      	push	{r7, lr}
   16d16:	af00      	add	r7, sp, #0
	//vPrintString("S_8 check_mega128_values_task start! \n\r"); //SunnyBeike
// modified by wanbo
     if ( !SpiIsSelected() && spi_was_interrupted ) 
   16d18:	f242 0316 	movw	r3, #8214	; 0x2016
   16d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d20:	781b      	ldrb	r3, [r3, #0]
   16d22:	b2db      	uxtb	r3, r3
   16d24:	f003 0304 	and.w	r3, r3, #4
   16d28:	2b00      	cmp	r3, #0
   16d2a:	d028      	beq.n	16d7e <check_mega128_values_task+0x6a>
   16d2c:	f64c 13e3 	movw	r3, #51683	; 0xc9e3
   16d30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d34:	781b      	ldrb	r3, [r3, #0]
   16d36:	b2db      	uxtb	r3, r3
   16d38:	2b00      	cmp	r3, #0
   16d3a:	d020      	beq.n	16d7e <check_mega128_values_task+0x6a>
     {
         if (mega128_receive_valid)
   16d3c:	f64c 13e2 	movw	r3, #51682	; 0xc9e2
   16d40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d44:	781b      	ldrb	r3, [r3, #0]
   16d46:	b2db      	uxtb	r3, r3
   16d48:	2b00      	cmp	r3, #0
   16d4a:	d018      	beq.n	16d7e <check_mega128_values_task+0x6a>
         { 
             time_since_last_mega128 = 0;
   16d4c:	f64c 2371 	movw	r3, #51825	; 0xca71
   16d50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d54:	2200      	movs	r2, #0
   16d56:	701a      	strb	r2, [r3, #0]
             mega128_ok = TRUE;
   16d58:	f64c 2375 	movw	r3, #51829	; 0xca75
   16d5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d60:	2201      	movs	r2, #1
   16d62:	701a      	strb	r2, [r3, #0]
             if (mode == MODE_AUTO)
   16d64:	f64c 2370 	movw	r3, #51824	; 0xca70
   16d68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d6c:	781b      	ldrb	r3, [r3, #0]
   16d6e:	2b01      	cmp	r3, #1
   16d70:	d105      	bne.n	16d7e <check_mega128_values_task+0x6a>
                 servo_set(from_mega128.channels);
   16d72:	f64c 10b4 	movw	r0, #51636	; 0xc9b4
   16d76:	f2c2 0004 	movt	r0, #8196	; 0x2004
   16d7a:	f000 f8ef 	bl	16f5c <servo_set>
         }
     }
     if (time_since_last_mega128 == STALLED_TIME) 
   16d7e:	f64c 2371 	movw	r3, #51825	; 0xca71
   16d82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d86:	781b      	ldrb	r3, [r3, #0]
   16d88:	2b1e      	cmp	r3, #30
   16d8a:	d105      	bne.n	16d98 <check_mega128_values_task+0x84>
     {
         mega128_ok = FALSE;
   16d8c:	f64c 2375 	movw	r3, #51829	; 0xca75
   16d90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d94:	2200      	movs	r2, #0
   16d96:	701a      	strb	r2, [r3, #0]
     }
	//vPrintString("S_8 check_mega128_values_task end! \n\r"); //SunnyBeike
}
   16d98:	bd80      	pop	{r7, pc}
   16d9a:	bf00      	nop
   16d9c:	f3af 8000 	nop.w

00016da0 <servo_init>:
 *
 * Ideally, you can use two decade counters to drive 20 servos.
 */
void
servo_init( void )
{
   16da0:	b480      	push	{r7}
   16da2:	b083      	sub	sp, #12
   16da4:	af00      	add	r7, sp, #0
  uint8_t			i;

  /* Configure the reset and clock lines */
  _4017_RESET_DDR |= _BV(_4017_RESET_PIN);
   16da6:	f242 0311 	movw	r3, #8209	; 0x2011
   16daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16dae:	f242 0211 	movw	r2, #8209	; 0x2011
   16db2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16db6:	7812      	ldrb	r2, [r2, #0]
   16db8:	b2d2      	uxtb	r2, r2
   16dba:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16dbe:	b2d2      	uxtb	r2, r2
   16dc0:	701a      	strb	r2, [r3, #0]
  _4017_CLOCK_DDR |= _BV(_4017_CLOCK_PIN);
   16dc2:	f242 0317 	movw	r3, #8215	; 0x2017
   16dc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16dca:	f242 0217 	movw	r2, #8215	; 0x2017
   16dce:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16dd2:	7812      	ldrb	r2, [r2, #0]
   16dd4:	b2d2      	uxtb	r2, r2
   16dd6:	f042 0202 	orr.w	r2, r2, #2
   16dda:	b2d2      	uxtb	r2, r2
   16ddc:	701a      	strb	r2, [r3, #0]

  /* Reset the decade counter */
  sbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16dde:	f242 0312 	movw	r3, #8210	; 0x2012
   16de2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16de6:	f242 0212 	movw	r2, #8210	; 0x2012
   16dea:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16dee:	7812      	ldrb	r2, [r2, #0]
   16df0:	b2d2      	uxtb	r2, r2
   16df2:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16df6:	b2d2      	uxtb	r2, r2
   16df8:	701a      	strb	r2, [r3, #0]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );
   16dfa:	f242 0318 	movw	r3, #8216	; 0x2018
   16dfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e02:	f242 0218 	movw	r2, #8216	; 0x2018
   16e06:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16e0a:	7812      	ldrb	r2, [r2, #0]
   16e0c:	b2d2      	uxtb	r2, r2
   16e0e:	f022 0202 	bic.w	r2, r2, #2
   16e12:	b2d2      	uxtb	r2, r2
   16e14:	701a      	strb	r2, [r3, #0]

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   16e16:	2300      	movs	r3, #0
   16e18:	71fb      	strb	r3, [r7, #7]
   16e1a:	e00b      	b.n	16e34 <servo_init+0x94>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
   16e1c:	79fa      	ldrb	r2, [r7, #7]
   16e1e:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16e22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16e26:	f645 51c0 	movw	r1, #24000	; 0x5dc0
   16e2a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   16e2e:	79fb      	ldrb	r3, [r7, #7]
   16e30:	3301      	adds	r3, #1
   16e32:	71fb      	strb	r3, [r7, #7]
   16e34:	79fb      	ldrb	r3, [r7, #7]
   16e36:	2b09      	cmp	r3, #9
   16e38:	d9f0      	bls.n	16e1c <servo_init+0x7c>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
	
  /* Set servos to go off some long time from now */
  SERVO_OCR	= 32768ul;
   16e3a:	f242 032a 	movw	r3, #8234	; 0x202a
   16e3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e42:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   16e46:	801a      	strh	r2, [r3, #0]

  /*
   * Configure output compare to toggle the output bits.
   */
  TCCR1A |=  _BV(SERVO_COM0 );
   16e48:	f242 032f 	movw	r3, #8239	; 0x202f
   16e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e50:	f242 022f 	movw	r2, #8239	; 0x202f
   16e54:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16e58:	7812      	ldrb	r2, [r2, #0]
   16e5a:	b2d2      	uxtb	r2, r2
   16e5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16e60:	b2d2      	uxtb	r2, r2
   16e62:	701a      	strb	r2, [r3, #0]
	
  /* Clear the interrupt flags in case they are set */
  TIFR = _BV(SERVO_FLAG);
   16e64:	f242 0336 	movw	r3, #8246	; 0x2036
   16e68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e6c:	2210      	movs	r2, #16
   16e6e:	701a      	strb	r2, [r3, #0]

  /* Unassert the decade counter reset to start it running */
  cbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16e70:	f242 0312 	movw	r3, #8210	; 0x2012
   16e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e78:	f242 0212 	movw	r2, #8210	; 0x2012
   16e7c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16e80:	7812      	ldrb	r2, [r2, #0]
   16e82:	b2d2      	uxtb	r2, r2
   16e84:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   16e88:	b2d2      	uxtb	r2, r2
   16e8a:	701a      	strb	r2, [r3, #0]

  /* Enable our output compare interrupts */
  TIMSK |= _BV(SERVO_ENABLE );
   16e8c:	f242 0337 	movw	r3, #8247	; 0x2037
   16e90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e94:	f242 0237 	movw	r2, #8247	; 0x2037
   16e98:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16e9c:	7812      	ldrb	r2, [r2, #0]
   16e9e:	b2d2      	uxtb	r2, r2
   16ea0:	f042 0210 	orr.w	r2, r2, #16
   16ea4:	b2d2      	uxtb	r2, r2
   16ea6:	701a      	strb	r2, [r3, #0]
}
   16ea8:	370c      	adds	r7, #12
   16eaa:	46bd      	mov	sp, r7
   16eac:	f85d 7b04 	ldr.w	r7, [sp], #4
   16eb0:	4770      	bx	lr
   16eb2:	bf00      	nop

00016eb4 <servo_set_one>:

  servo++;
}
#endif

void servo_set_one(uint8_t servo, uint16_t value_us) {
   16eb4:	b480      	push	{r7}
   16eb6:	b083      	sub	sp, #12
   16eb8:	af00      	add	r7, sp, #0
   16eba:	4602      	mov	r2, r0
   16ebc:	460b      	mov	r3, r1
   16ebe:	71fa      	strb	r2, [r7, #7]
   16ec0:	80bb      	strh	r3, [r7, #4]
  servo_widths[servo] = ChopServo(CLOCK*value_us);
   16ec2:	79f9      	ldrb	r1, [r7, #7]
   16ec4:	88bb      	ldrh	r3, [r7, #4]
   16ec6:	011b      	lsls	r3, r3, #4
   16ec8:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16ecc:	d308      	bcc.n	16ee0 <servo_set_one+0x2c>
   16ece:	88bb      	ldrh	r3, [r7, #4]
   16ed0:	011b      	lsls	r3, r3, #4
   16ed2:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16ed6:	bf28      	it	cs
   16ed8:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16edc:	b29a      	uxth	r2, r3
   16ede:	e001      	b.n	16ee4 <servo_set_one+0x30>
   16ee0:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16ee4:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16ee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16eec:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
   16ef0:	370c      	adds	r7, #12
   16ef2:	46bd      	mov	sp, r7
   16ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
   16ef8:	4770      	bx	lr
   16efa:	bf00      	nop

00016efc <servo_transmit>:

void 
servo_transmit(void) {
   16efc:	b580      	push	{r7, lr}
   16efe:	b082      	sub	sp, #8
   16f00:	af00      	add	r7, sp, #0
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);
   16f02:	2000      	movs	r0, #0
   16f04:	f000 f9e6 	bl	172d4 <uart_transmit>
   16f08:	2000      	movs	r0, #0
   16f0a:	f000 f9e3 	bl	172d4 <uart_transmit>

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16f0e:	2300      	movs	r3, #0
   16f10:	71fb      	strb	r3, [r7, #7]
   16f12:	e01a      	b.n	16f4a <servo_transmit+0x4e>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
   16f14:	79fa      	ldrb	r2, [r7, #7]
   16f16:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16f1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16f1e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16f22:	0a1b      	lsrs	r3, r3, #8
   16f24:	b29b      	uxth	r3, r3
   16f26:	b2db      	uxtb	r3, r3
   16f28:	4618      	mov	r0, r3
   16f2a:	f000 f9d3 	bl	172d4 <uart_transmit>
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
   16f2e:	79fa      	ldrb	r2, [r7, #7]
   16f30:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16f34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16f38:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16f3c:	b2db      	uxtb	r3, r3
   16f3e:	4618      	mov	r0, r3
   16f40:	f000 f9c8 	bl	172d4 <uart_transmit>
servo_transmit(void) {
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16f44:	79fb      	ldrb	r3, [r7, #7]
   16f46:	3301      	adds	r3, #1
   16f48:	71fb      	strb	r3, [r7, #7]
   16f4a:	79fb      	ldrb	r3, [r7, #7]
   16f4c:	2b09      	cmp	r3, #9
   16f4e:	d9e1      	bls.n	16f14 <servo_transmit+0x18>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
  }
  uart_transmit((uint8_t)'\n');
   16f50:	200a      	movs	r0, #10
   16f52:	f000 f9bf 	bl	172d4 <uart_transmit>
	//vPrintString("S_10 servo_transmit end! \n\r"); //SunnyBeike
}
   16f56:	3708      	adds	r7, #8
   16f58:	46bd      	mov	sp, r7
   16f5a:	bd80      	pop	{r7, pc}

00016f5c <servo_set>:
 *
 * defines how servos react to radio control or autopilot channels
 *
 */

void servo_set(const pprz_t values[]) {
   16f5c:	b5b0      	push	{r4, r5, r7, lr}
   16f5e:	b084      	sub	sp, #16
   16f60:	af00      	add	r7, sp, #0
   16f62:	6078      	str	r0, [r7, #4]
  ServoSet(values); /*Generated from airframe.xml */
   16f64:	687b      	ldr	r3, [r7, #4]
   16f66:	330a      	adds	r3, #10
   16f68:	881b      	ldrh	r3, [r3, #0]
   16f6a:	b21b      	sxth	r3, r3
   16f6c:	005b      	lsls	r3, r3, #1
   16f6e:	4618      	mov	r0, r3
   16f70:	f000 fe66 	bl	17c40 <__aeabi_i2d>
   16f74:	4602      	mov	r2, r0
   16f76:	460b      	mov	r3, r1
   16f78:	4610      	mov	r0, r2
   16f7a:	4619      	mov	r1, r3
   16f7c:	a3a6      	add	r3, pc, #664	; (adr r3, 17218 <servo_set+0x2bc>)
   16f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   16f82:	f000 fec3 	bl	17d0c <__aeabi_dmul>
   16f86:	4602      	mov	r2, r0
   16f88:	460b      	mov	r3, r1
   16f8a:	4610      	mov	r0, r2
   16f8c:	4619      	mov	r1, r3
   16f8e:	f001 f957 	bl	18240 <__aeabi_d2iz>
   16f92:	4603      	mov	r3, r0
   16f94:	b29b      	uxth	r3, r3
   16f96:	b29b      	uxth	r3, r3
   16f98:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16f9c:	81fb      	strh	r3, [r7, #14]
   16f9e:	89fb      	ldrh	r3, [r7, #14]
   16fa0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16fa4:	d307      	bcc.n	16fb6 <servo_set+0x5a>
   16fa6:	89fb      	ldrh	r3, [r7, #14]
   16fa8:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16fac:	bf28      	it	cs
   16fae:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16fb2:	b29a      	uxth	r2, r3
   16fb4:	e001      	b.n	16fba <servo_set+0x5e>
   16fb6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16fba:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16fbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16fc2:	80da      	strh	r2, [r3, #6]
   16fc4:	687b      	ldr	r3, [r7, #4]
   16fc6:	881b      	ldrh	r3, [r3, #0]
   16fc8:	b21b      	sxth	r3, r3
   16fca:	005b      	lsls	r3, r3, #1
   16fcc:	4618      	mov	r0, r3
   16fce:	f000 fe37 	bl	17c40 <__aeabi_i2d>
   16fd2:	4602      	mov	r2, r0
   16fd4:	460b      	mov	r3, r1
   16fd6:	4610      	mov	r0, r2
   16fd8:	4619      	mov	r1, r3
   16fda:	a38f      	add	r3, pc, #572	; (adr r3, 17218 <servo_set+0x2bc>)
   16fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
   16fe0:	f000 fe94 	bl	17d0c <__aeabi_dmul>
   16fe4:	4602      	mov	r2, r0
   16fe6:	460b      	mov	r3, r1
   16fe8:	4610      	mov	r0, r2
   16fea:	4619      	mov	r1, r3
   16fec:	f001 f928 	bl	18240 <__aeabi_d2iz>
   16ff0:	4603      	mov	r3, r0
   16ff2:	b29b      	uxth	r3, r3
   16ff4:	b29b      	uxth	r3, r3
   16ff6:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16ffa:	81fb      	strh	r3, [r7, #14]
   16ffc:	89fb      	ldrh	r3, [r7, #14]
   16ffe:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   17002:	d307      	bcc.n	17014 <servo_set+0xb8>
   17004:	89fb      	ldrh	r3, [r7, #14]
   17006:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   1700a:	bf28      	it	cs
   1700c:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   17010:	b29a      	uxth	r2, r3
   17012:	e001      	b.n	17018 <servo_set+0xbc>
   17014:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   17018:	f64c 237c 	movw	r3, #51836	; 0xca7c
   1701c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17020:	825a      	strh	r2, [r3, #18]
   17022:	687b      	ldr	r3, [r7, #4]
   17024:	3304      	adds	r3, #4
   17026:	881b      	ldrh	r3, [r3, #0]
   17028:	b21b      	sxth	r3, r3
   1702a:	4618      	mov	r0, r3
   1702c:	f000 fe08 	bl	17c40 <__aeabi_i2d>
   17030:	4602      	mov	r2, r0
   17032:	460b      	mov	r3, r1
   17034:	4610      	mov	r0, r2
   17036:	4619      	mov	r1, r3
   17038:	a379      	add	r3, pc, #484	; (adr r3, 17220 <servo_set+0x2c4>)
   1703a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1703e:	f000 fe65 	bl	17d0c <__aeabi_dmul>
   17042:	4602      	mov	r2, r0
   17044:	460b      	mov	r3, r1
   17046:	4610      	mov	r0, r2
   17048:	4619      	mov	r1, r3
   1704a:	f001 f8f9 	bl	18240 <__aeabi_d2iz>
   1704e:	4603      	mov	r3, r0
   17050:	b29b      	uxth	r3, r3
   17052:	b29b      	uxth	r3, r3
   17054:	f503 43bf 	add.w	r3, r3, #24448	; 0x5f80
   17058:	3320      	adds	r3, #32
   1705a:	81fb      	strh	r3, [r7, #14]
   1705c:	89fb      	ldrh	r3, [r7, #14]
   1705e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   17062:	d307      	bcc.n	17074 <servo_set+0x118>
   17064:	89fb      	ldrh	r3, [r7, #14]
   17066:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   1706a:	bf28      	it	cs
   1706c:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   17070:	b29a      	uxth	r2, r3
   17072:	e001      	b.n	17078 <servo_set+0x11c>
   17074:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   17078:	f64c 237c 	movw	r3, #51836	; 0xca7c
   1707c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17080:	819a      	strh	r2, [r3, #12]
   17082:	687b      	ldr	r3, [r7, #4]
   17084:	885b      	ldrh	r3, [r3, #2]
   17086:	81bb      	strh	r3, [r7, #12]
   17088:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   1708c:	2b00      	cmp	r3, #0
   1708e:	dd06      	ble.n	1709e <servo_set+0x142>
   17090:	f04f 0400 	mov.w	r4, #0
   17094:	f04f 0500 	mov.w	r5, #0
   17098:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   1709c:	e002      	b.n	170a4 <servo_set+0x148>
   1709e:	a562      	add	r5, pc, #392	; (adr r5, 17228 <servo_set+0x2cc>)
   170a0:	e9d5 4500 	ldrd	r4, r5, [r5]
   170a4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   170a8:	4618      	mov	r0, r3
   170aa:	f000 fdc9 	bl	17c40 <__aeabi_i2d>
   170ae:	4602      	mov	r2, r0
   170b0:	460b      	mov	r3, r1
   170b2:	4620      	mov	r0, r4
   170b4:	4629      	mov	r1, r5
   170b6:	f000 fe29 	bl	17d0c <__aeabi_dmul>
   170ba:	4602      	mov	r2, r0
   170bc:	460b      	mov	r3, r1
   170be:	4610      	mov	r0, r2
   170c0:	4619      	mov	r1, r3
   170c2:	a35b      	add	r3, pc, #364	; (adr r3, 17230 <servo_set+0x2d4>)
   170c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   170c8:	f000 fe20 	bl	17d0c <__aeabi_dmul>
   170cc:	4602      	mov	r2, r0
   170ce:	460b      	mov	r3, r1
   170d0:	4610      	mov	r0, r2
   170d2:	4619      	mov	r1, r3
   170d4:	f001 f8b4 	bl	18240 <__aeabi_d2iz>
   170d8:	4603      	mov	r3, r0
   170da:	b29b      	uxth	r3, r3
   170dc:	b29b      	uxth	r3, r3
   170de:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
   170e2:	81fb      	strh	r3, [r7, #14]
   170e4:	89fb      	ldrh	r3, [r7, #14]
   170e6:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   170ea:	d307      	bcc.n	170fc <servo_set+0x1a0>
   170ec:	89fb      	ldrh	r3, [r7, #14]
   170ee:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   170f2:	bf28      	it	cs
   170f4:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   170f8:	b29a      	uxth	r2, r3
   170fa:	e001      	b.n	17100 <servo_set+0x1a4>
   170fc:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   17100:	f64c 237c 	movw	r3, #51836	; 0xca7c
   17104:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17108:	801a      	strh	r2, [r3, #0]
   1710a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   1710e:	2b00      	cmp	r3, #0
   17110:	dd03      	ble.n	1711a <servo_set+0x1be>
   17112:	a545      	add	r5, pc, #276	; (adr r5, 17228 <servo_set+0x2cc>)
   17114:	e9d5 4500 	ldrd	r4, r5, [r5]
   17118:	e005      	b.n	17126 <servo_set+0x1ca>
   1711a:	f04f 0400 	mov.w	r4, #0
   1711e:	f04f 0500 	mov.w	r5, #0
   17122:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   17126:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   1712a:	4618      	mov	r0, r3
   1712c:	f000 fd88 	bl	17c40 <__aeabi_i2d>
   17130:	4602      	mov	r2, r0
   17132:	460b      	mov	r3, r1
   17134:	4620      	mov	r0, r4
   17136:	4629      	mov	r1, r5
   17138:	f000 fde8 	bl	17d0c <__aeabi_dmul>
   1713c:	4602      	mov	r2, r0
   1713e:	460b      	mov	r3, r1
   17140:	4610      	mov	r0, r2
   17142:	4619      	mov	r1, r3
   17144:	a33c      	add	r3, pc, #240	; (adr r3, 17238 <servo_set+0x2dc>)
   17146:	e9d3 2300 	ldrd	r2, r3, [r3]
   1714a:	f000 fddf 	bl	17d0c <__aeabi_dmul>
   1714e:	4602      	mov	r2, r0
   17150:	460b      	mov	r3, r1
   17152:	4610      	mov	r0, r2
   17154:	4619      	mov	r1, r3
   17156:	f001 f873 	bl	18240 <__aeabi_d2iz>
   1715a:	4603      	mov	r3, r0
   1715c:	b29b      	uxth	r3, r3
   1715e:	b29b      	uxth	r3, r3
   17160:	f503 43ce 	add.w	r3, r3, #26368	; 0x6700
   17164:	3320      	adds	r3, #32
   17166:	81fb      	strh	r3, [r7, #14]
   17168:	89fb      	ldrh	r3, [r7, #14]
   1716a:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   1716e:	d307      	bcc.n	17180 <servo_set+0x224>
   17170:	89fb      	ldrh	r3, [r7, #14]
   17172:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   17176:	bf28      	it	cs
   17178:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   1717c:	b29a      	uxth	r2, r3
   1717e:	e001      	b.n	17184 <servo_set+0x228>
   17180:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   17184:	f64c 237c 	movw	r3, #51836	; 0xca7c
   17188:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1718c:	809a      	strh	r2, [r3, #4]
   1718e:	687b      	ldr	r3, [r7, #4]
   17190:	3306      	adds	r3, #6
   17192:	881b      	ldrh	r3, [r3, #0]
   17194:	b21b      	sxth	r3, r3
   17196:	4618      	mov	r0, r3
   17198:	f000 fd52 	bl	17c40 <__aeabi_i2d>
   1719c:	4604      	mov	r4, r0
   1719e:	460d      	mov	r5, r1
   171a0:	687b      	ldr	r3, [r7, #4]
   171a2:	3302      	adds	r3, #2
   171a4:	881b      	ldrh	r3, [r3, #0]
   171a6:	b21b      	sxth	r3, r3
   171a8:	4618      	mov	r0, r3
   171aa:	f000 fd49 	bl	17c40 <__aeabi_i2d>
   171ae:	4602      	mov	r2, r0
   171b0:	460b      	mov	r3, r1
   171b2:	4620      	mov	r0, r4
   171b4:	4629      	mov	r1, r5
   171b6:	f000 fbf7 	bl	179a8 <__adddf3>
   171ba:	4602      	mov	r2, r0
   171bc:	460b      	mov	r3, r1
   171be:	4610      	mov	r0, r2
   171c0:	4619      	mov	r1, r3
   171c2:	a31f      	add	r3, pc, #124	; (adr r3, 17240 <servo_set+0x2e4>)
   171c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   171c8:	f000 fda0 	bl	17d0c <__aeabi_dmul>
   171cc:	4602      	mov	r2, r0
   171ce:	460b      	mov	r3, r1
   171d0:	4610      	mov	r0, r2
   171d2:	4619      	mov	r1, r3
   171d4:	f001 f834 	bl	18240 <__aeabi_d2iz>
   171d8:	4603      	mov	r3, r0
   171da:	b29b      	uxth	r3, r3
   171dc:	b29b      	uxth	r3, r3
   171de:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
   171e2:	3320      	adds	r3, #32
   171e4:	81fb      	strh	r3, [r7, #14]
   171e6:	89fb      	ldrh	r3, [r7, #14]
   171e8:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   171ec:	d307      	bcc.n	171fe <servo_set+0x2a2>
   171ee:	89fb      	ldrh	r3, [r7, #14]
   171f0:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   171f4:	bf28      	it	cs
   171f6:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   171fa:	b29a      	uxth	r2, r3
   171fc:	e001      	b.n	17202 <servo_set+0x2a6>
   171fe:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   17202:	f64c 237c 	movw	r3, #51836	; 0xca7c
   17206:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1720a:	81da      	strh	r2, [r3, #14]
}
   1720c:	3710      	adds	r7, #16
   1720e:	46bd      	mov	sp, r7
   17210:	bdb0      	pop	{r4, r5, r7, pc}
   17212:	bf00      	nop
   17214:	f3af 8000 	nop.w
   17218:	aaaa9ef0 	.word	0xaaaa9ef0
   1721c:	3feaaaaa 	.word	0x3feaaaaa
   17220:	fc96473e 	.word	0xfc96473e
   17224:	3fdfc962 	.word	0x3fdfc962
   17228:	51eb851f 	.word	0x51eb851f
   1722c:	3fe51eb8 	.word	0x3fe51eb8
   17230:	9999999a 	.word	0x9999999a
   17234:	bfe19999 	.word	0xbfe19999
   17238:	aaaa9ef0 	.word	0xaaaa9ef0
   1723c:	bfe0aaaa 	.word	0xbfe0aaaa
   17240:	eeeed77a 	.word	0xeeeed77a
   17244:	bfdeeeee 	.word	0xbfdeeeee

00017248 <uart_init_tx>:
 * UART Baud rate generation settings:
 *
 * With 16.0 MHz clock,UBRR=25  => 38400 baud
 *
 */
void uart_init_tx( void ) {
   17248:	b480      	push	{r7}
   1724a:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRRH = 0; 
   1724c:	f242 0320 	movw	r3, #8224	; 0x2020
   17250:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17254:	2200      	movs	r2, #0
   17256:	701a      	strb	r2, [r3, #0]
  UBRRL = 25; 
   17258:	f242 0309 	movw	r3, #8201	; 0x2009
   1725c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17260:	2219      	movs	r2, #25
   17262:	701a      	strb	r2, [r3, #0]
  /* single speed */ 
  UCSRA = 0; 
   17264:	f242 030b 	movw	r3, #8203	; 0x200b
   17268:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1726c:	2200      	movs	r2, #0
   1726e:	701a      	strb	r2, [r3, #0]
  /* Enable transmitter */ 
  UCSRB = _BV(TXEN); 
   17270:	f242 030a 	movw	r3, #8202	; 0x200a
   17274:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17278:	2208      	movs	r2, #8
   1727a:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0); 
   1727c:	f242 0320 	movw	r3, #8224	; 0x2020
   17280:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17284:	2286      	movs	r2, #134	; 0x86
   17286:	701a      	strb	r2, [r3, #0]
}
   17288:	46bd      	mov	sp, r7
   1728a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1728e:	4770      	bx	lr

00017290 <uart_init_rx>:

void uart_init_rx() {
   17290:	b480      	push	{r7}
   17292:	af00      	add	r7, sp, #0
  /* Enable receiver               */ 
  UCSRB |= _BV(RXEN); 
   17294:	f242 030a 	movw	r3, #8202	; 0x200a
   17298:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1729c:	f242 020a 	movw	r2, #8202	; 0x200a
   172a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   172a4:	7812      	ldrb	r2, [r2, #0]
   172a6:	b2d2      	uxtb	r2, r2
   172a8:	f042 0210 	orr.w	r2, r2, #16
   172ac:	b2d2      	uxtb	r2, r2
   172ae:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi( UCSRB, RXCIE ); 
   172b0:	f242 030a 	movw	r3, #8202	; 0x200a
   172b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   172b8:	f242 020a 	movw	r2, #8202	; 0x200a
   172bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   172c0:	7812      	ldrb	r2, [r2, #0]
   172c2:	b2d2      	uxtb	r2, r2
   172c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
   172c8:	b2d2      	uxtb	r2, r2
   172ca:	701a      	strb	r2, [r3, #0]
}
   172cc:	46bd      	mov	sp, r7
   172ce:	f85d 7b04 	ldr.w	r7, [sp], #4
   172d2:	4770      	bx	lr

000172d4 <uart_transmit>:

void uart_transmit( unsigned char data ) {
   172d4:	b480      	push	{r7}
   172d6:	b083      	sub	sp, #12
   172d8:	af00      	add	r7, sp, #0
   172da:	4603      	mov	r3, r0
   172dc:	71fb      	strb	r3, [r7, #7]
  if (UCSRB & _BV(TXCIE)) {
   172de:	f242 030a 	movw	r3, #8202	; 0x200a
   172e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   172e6:	781b      	ldrb	r3, [r3, #0]
   172e8:	b2db      	uxtb	r3, r3
   172ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
   172ee:	2b00      	cmp	r3, #0
   172f0:	d028      	beq.n	17344 <uart_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail == tx_head + 1) { /* BUF_SIZE = 256 */
   172f2:	f64c 2391 	movw	r3, #51857	; 0xca91
   172f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   172fa:	781b      	ldrb	r3, [r3, #0]
   172fc:	b2db      	uxtb	r3, r3
   172fe:	461a      	mov	r2, r3
   17300:	f64c 2390 	movw	r3, #51856	; 0xca90
   17304:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17308:	781b      	ldrb	r3, [r3, #0]
   1730a:	3301      	adds	r3, #1
   1730c:	429a      	cmp	r2, r3
   1730e:	d100      	bne.n	17312 <uart_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   17310:	e02c      	b.n	1736c <uart_transmit+0x98>
    }
    tx_buf[tx_head] = data;
   17312:	f64c 2390 	movw	r3, #51856	; 0xca90
   17316:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1731a:	781b      	ldrb	r3, [r3, #0]
   1731c:	461a      	mov	r2, r3
   1731e:	f64c 2394 	movw	r3, #51860	; 0xca94
   17322:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17326:	79f9      	ldrb	r1, [r7, #7]
   17328:	5499      	strb	r1, [r3, r2]
    tx_head++; /* BUF_SIZE = 256 */
   1732a:	f64c 2390 	movw	r3, #51856	; 0xca90
   1732e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17332:	781b      	ldrb	r3, [r3, #0]
   17334:	3301      	adds	r3, #1
   17336:	b2da      	uxtb	r2, r3
   17338:	f64c 2390 	movw	r3, #51856	; 0xca90
   1733c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17340:	701a      	strb	r2, [r3, #0]
   17342:	e013      	b.n	1736c <uart_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR = data;
   17344:	f242 030c 	movw	r3, #8204	; 0x200c
   17348:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1734c:	79fa      	ldrb	r2, [r7, #7]
   1734e:	701a      	strb	r2, [r3, #0]
    sbi(UCSRB, TXCIE);
   17350:	f242 030a 	movw	r3, #8202	; 0x200a
   17354:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17358:	f242 020a 	movw	r2, #8202	; 0x200a
   1735c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   17360:	7812      	ldrb	r2, [r2, #0]
   17362:	b2d2      	uxtb	r2, r2
   17364:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   17368:	b2d2      	uxtb	r2, r2
   1736a:	701a      	strb	r2, [r3, #0]
  }
}
   1736c:	370c      	adds	r7, #12
   1736e:	46bd      	mov	sp, r7
   17370:	f85d 7b04 	ldr.w	r7, [sp], #4
   17374:	4770      	bx	lr
   17376:	bf00      	nop

00017378 <uart_print_hex>:

void uart_print_hex ( uint8_t c ) {
   17378:	b590      	push	{r4, r7, lr}
   1737a:	b089      	sub	sp, #36	; 0x24
   1737c:	af00      	add	r7, sp, #0
   1737e:	4603      	mov	r3, r0
   17380:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   17382:	f648 33f0 	movw	r3, #35824	; 0x8bf0
   17386:	f2c0 0301 	movt	r3, #1
   1738a:	f107 040c 	add.w	r4, r7, #12
   1738e:	6818      	ldr	r0, [r3, #0]
   17390:	6859      	ldr	r1, [r3, #4]
   17392:	689a      	ldr	r2, [r3, #8]
   17394:	68db      	ldr	r3, [r3, #12]
   17396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   17398:	79fb      	ldrb	r3, [r7, #7]
   1739a:	091b      	lsrs	r3, r3, #4
   1739c:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   1739e:	79fb      	ldrb	r3, [r7, #7]
   173a0:	f003 030f 	and.w	r3, r3, #15
   173a4:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
        high = 15;
   173a6:	230f      	movs	r3, #15
   173a8:	77fb      	strb	r3, [r7, #31]
        low = 15;
   173aa:	230f      	movs	r3, #15
   173ac:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */

    uart_transmit(hex[high]);
   173ae:	7ffb      	ldrb	r3, [r7, #31]
   173b0:	f107 0220 	add.w	r2, r7, #32
   173b4:	4413      	add	r3, r2
   173b6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   173ba:	4618      	mov	r0, r3
   173bc:	f7ff ff8a 	bl	172d4 <uart_transmit>
  uart_transmit(hex[low]);
   173c0:	7fbb      	ldrb	r3, [r7, #30]
   173c2:	f107 0220 	add.w	r2, r7, #32
   173c6:	4413      	add	r3, r2
   173c8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   173cc:	4618      	mov	r0, r3
   173ce:	f7ff ff81 	bl	172d4 <uart_transmit>
} 
   173d2:	3724      	adds	r7, #36	; 0x24
   173d4:	46bd      	mov	sp, r7
   173d6:	bd90      	pop	{r4, r7, pc}

000173d8 <uart_print_hex16>:

void uart_print_hex16 ( uint16_t c ) {
   173d8:	b580      	push	{r7, lr}
   173da:	b084      	sub	sp, #16
   173dc:	af00      	add	r7, sp, #0
   173de:	4603      	mov	r3, r0
   173e0:	80fb      	strh	r3, [r7, #6]
  uint8_t high = (uint8_t)(c>>8);
   173e2:	88fb      	ldrh	r3, [r7, #6]
   173e4:	0a1b      	lsrs	r3, r3, #8
   173e6:	b29b      	uxth	r3, r3
   173e8:	73fb      	strb	r3, [r7, #15]
  uint8_t low  = (uint8_t)(c);
   173ea:	88fb      	ldrh	r3, [r7, #6]
   173ec:	73bb      	strb	r3, [r7, #14]
  uart_print_hex(high);
   173ee:	7bfb      	ldrb	r3, [r7, #15]
   173f0:	4618      	mov	r0, r3
   173f2:	f7ff ffc1 	bl	17378 <uart_print_hex>
  uart_print_hex(low);
   173f6:	7bbb      	ldrb	r3, [r7, #14]
   173f8:	4618      	mov	r0, r3
   173fa:	f7ff ffbd 	bl	17378 <uart_print_hex>
}
   173fe:	3710      	adds	r7, #16
   17400:	46bd      	mov	sp, r7
   17402:	bd80      	pop	{r7, pc}

00017404 <uart_print_string>:

void uart_print_string(const uint8_t* s) {
   17404:	b580      	push	{r7, lr}
   17406:	b084      	sub	sp, #16
   17408:	af00      	add	r7, sp, #0
   1740a:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   1740c:	2300      	movs	r3, #0
   1740e:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   17410:	e009      	b.n	17426 <uart_print_string+0x22>
    uart_transmit(s[i]);
   17412:	7bfb      	ldrb	r3, [r7, #15]
   17414:	687a      	ldr	r2, [r7, #4]
   17416:	4413      	add	r3, r2
   17418:	781b      	ldrb	r3, [r3, #0]
   1741a:	4618      	mov	r0, r3
   1741c:	f7ff ff5a 	bl	172d4 <uart_transmit>
    i++;
   17420:	7bfb      	ldrb	r3, [r7, #15]
   17422:	3301      	adds	r3, #1
   17424:	73fb      	strb	r3, [r7, #15]
  uart_print_hex(low);
}

void uart_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   17426:	7bfb      	ldrb	r3, [r7, #15]
   17428:	687a      	ldr	r2, [r7, #4]
   1742a:	4413      	add	r3, r2
   1742c:	781b      	ldrb	r3, [r3, #0]
   1742e:	2b00      	cmp	r3, #0
   17430:	d1ef      	bne.n	17412 <uart_print_string+0xe>
    uart_transmit(s[i]);
    i++;
  }
}
   17432:	3710      	adds	r7, #16
   17434:	46bd      	mov	sp, r7
   17436:	bd80      	pop	{r7, pc}

00017438 <SIG_UART_TRANS>:

SIGNAL(SIG_UART_TRANS) {
   17438:	b480      	push	{r7}
   1743a:	af00      	add	r7, sp, #0
  if (tx_head == tx_tail) {
   1743c:	f64c 2390 	movw	r3, #51856	; 0xca90
   17440:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17444:	781a      	ldrb	r2, [r3, #0]
   17446:	f64c 2391 	movw	r3, #51857	; 0xca91
   1744a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1744e:	781b      	ldrb	r3, [r3, #0]
   17450:	b2db      	uxtb	r3, r3
   17452:	429a      	cmp	r2, r3
   17454:	d10e      	bne.n	17474 <SIG_UART_TRANS+0x3c>
    /* Nothing more to send */
    cbi(UCSRB, TXCIE); /* disable interrupt */
   17456:	f242 030a 	movw	r3, #8202	; 0x200a
   1745a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1745e:	f242 020a 	movw	r2, #8202	; 0x200a
   17462:	f2c2 0200 	movt	r2, #8192	; 0x2000
   17466:	7812      	ldrb	r2, [r2, #0]
   17468:	b2d2      	uxtb	r2, r2
   1746a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1746e:	b2d2      	uxtb	r2, r2
   17470:	701a      	strb	r2, [r3, #0]
   17472:	e01d      	b.n	174b0 <SIG_UART_TRANS+0x78>
  } else {
    UDR = tx_buf[tx_tail];
   17474:	f242 030c 	movw	r3, #8204	; 0x200c
   17478:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1747c:	f64c 2291 	movw	r2, #51857	; 0xca91
   17480:	f2c2 0204 	movt	r2, #8196	; 0x2004
   17484:	7812      	ldrb	r2, [r2, #0]
   17486:	b2d2      	uxtb	r2, r2
   17488:	4611      	mov	r1, r2
   1748a:	f64c 2294 	movw	r2, #51860	; 0xca94
   1748e:	f2c2 0204 	movt	r2, #8196	; 0x2004
   17492:	5c52      	ldrb	r2, [r2, r1]
   17494:	701a      	strb	r2, [r3, #0]
    tx_tail++; /* warning tx_buf_len is 256 */
   17496:	f64c 2391 	movw	r3, #51857	; 0xca91
   1749a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1749e:	781b      	ldrb	r3, [r3, #0]
   174a0:	b2db      	uxtb	r3, r3
   174a2:	3301      	adds	r3, #1
   174a4:	b2da      	uxtb	r2, r3
   174a6:	f64c 2391 	movw	r3, #51857	; 0xca91
   174aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   174ae:	701a      	strb	r2, [r3, #0]
  }
}
   174b0:	46bd      	mov	sp, r7
   174b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   174b6:	4770      	bx	lr

000174b8 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
   174b8:	b580      	push	{r7, lr}
   174ba:	b082      	sub	sp, #8
   174bc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   174be:	2010      	movs	r0, #16
   174c0:	2101      	movs	r1, #1
   174c2:	f7e9 fc7d 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
   174c6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   174ca:	f2c4 0001 	movt	r0, #16385	; 0x4001
   174ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   174d2:	2201      	movs	r2, #1
   174d4:	f7e9 ff84 	bl	13e0 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
   174d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   174dc:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   174de:	2310      	movs	r3, #16
   174e0:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   174e2:	2303      	movs	r3, #3
   174e4:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   174e6:	1d3b      	adds	r3, r7, #4
   174e8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   174ec:	f2c4 0001 	movt	r0, #16385	; 0x4001
   174f0:	4619      	mov	r1, r3
   174f2:	f7e9 fe39 	bl	1168 <GPIO_Init>
}
   174f6:	3708      	adds	r7, #8
   174f8:	46bd      	mov	sp, r7
   174fa:	bd80      	pop	{r7, pc}

000174fc <init_button>:

void init_button(void)
{
   174fc:	b580      	push	{r7, lr}
   174fe:	b082      	sub	sp, #8
   17500:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   17502:	2004      	movs	r0, #4
   17504:	2101      	movs	r1, #1
   17506:	f7e9 fc5b 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
   1750a:	2301      	movs	r3, #1
   1750c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   1750e:	2304      	movs	r3, #4
   17510:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   17512:	2303      	movs	r3, #3
   17514:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   17516:	1d3b      	adds	r3, r7, #4
   17518:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1751c:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17520:	4619      	mov	r1, r3
   17522:	f7e9 fe21 	bl	1168 <GPIO_Init>
}
   17526:	3708      	adds	r7, #8
   17528:	46bd      	mov	sp, r7
   1752a:	bd80      	pop	{r7, pc}

0001752c <enable_button_interrupts>:

void enable_button_interrupts(void)
{
   1752c:	b580      	push	{r7, lr}
   1752e:	b084      	sub	sp, #16
   17530:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   17532:	2001      	movs	r0, #1
   17534:	2101      	movs	r1, #1
   17536:	f7e9 fc43 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
   1753a:	2000      	movs	r0, #0
   1753c:	2100      	movs	r1, #0
   1753e:	f7ea f847 	bl	15d0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
   17542:	2301      	movs	r3, #1
   17544:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   17546:	2300      	movs	r3, #0
   17548:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
   1754a:	2308      	movs	r3, #8
   1754c:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   1754e:	2301      	movs	r3, #1
   17550:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
   17552:	f107 0308 	add.w	r3, r7, #8
   17556:	4618      	mov	r0, r3
   17558:	f7ea fd40 	bl	1fdc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
   1755c:	2306      	movs	r3, #6
   1755e:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   17560:	230f      	movs	r3, #15
   17562:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
   17564:	230f      	movs	r3, #15
   17566:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   17568:	2301      	movs	r3, #1
   1756a:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   1756c:	1d3b      	adds	r3, r7, #4
   1756e:	4618      	mov	r0, r3
   17570:	f7ea fe6e 	bl	2250 <NVIC_Init>
}
   17574:	3710      	adds	r7, #16
   17576:	46bd      	mov	sp, r7
   17578:	bd80      	pop	{r7, pc}
   1757a:	bf00      	nop

0001757c <init_rs232>:

void init_rs232(void)
{
   1757c:	b580      	push	{r7, lr}
   1757e:	b086      	sub	sp, #24
   17580:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
   17582:	2005      	movs	r0, #5
   17584:	2101      	movs	r1, #1
   17586:	f7e9 fc1b 	bl	dc0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   1758a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   1758e:	2101      	movs	r1, #1
   17590:	f7e9 fc3e 	bl	e10 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   17594:	2308      	movs	r3, #8
   17596:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   17598:	2304      	movs	r3, #4
   1759a:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   1759c:	1d3b      	adds	r3, r7, #4
   1759e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   175a2:	f2c4 0001 	movt	r0, #16385	; 0x4001
   175a6:	4619      	mov	r1, r3
   175a8:	f7e9 fdde 	bl	1168 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   175ac:	2304      	movs	r3, #4
   175ae:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   175b0:	2303      	movs	r3, #3
   175b2:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   175b4:	2318      	movs	r3, #24
   175b6:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   175b8:	1d3b      	adds	r3, r7, #4
   175ba:	f44f 6000 	mov.w	r0, #2048	; 0x800
   175be:	f2c4 0001 	movt	r0, #16385	; 0x4001
   175c2:	4619      	mov	r1, r3
   175c4:	f7e9 fdd0 	bl	1168 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
   175c8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   175cc:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   175ce:	2300      	movs	r3, #0
   175d0:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
   175d2:	2300      	movs	r3, #0
   175d4:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
   175d6:	2300      	movs	r3, #0
   175d8:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   175da:	2300      	movs	r3, #0
   175dc:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   175de:	230c      	movs	r3, #12
   175e0:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
   175e2:	f107 0308 	add.w	r3, r7, #8
   175e6:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   175ea:	f2c4 0000 	movt	r0, #16384	; 0x4000
   175ee:	4619      	mov	r1, r3
   175f0:	f7ea f8a2 	bl	1738 <USART_Init>
    USART_Cmd(USART2, ENABLE);
   175f4:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   175f8:	f2c4 0000 	movt	r0, #16384	; 0x4000
   175fc:	2101      	movs	r1, #1
   175fe:	f7ea f9b9 	bl	1974 <USART_Cmd>
}
   17602:	3718      	adds	r7, #24
   17604:	46bd      	mov	sp, r7
   17606:	bd80      	pop	{r7, pc}

00017608 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
   17608:	b580      	push	{r7, lr}
   1760a:	b082      	sub	sp, #8
   1760c:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
   1760e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17612:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17616:	f240 7127 	movw	r1, #1831	; 0x727
   1761a:	2200      	movs	r2, #0
   1761c:	f7ea f9ca 	bl	19b4 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   17620:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17624:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17628:	f240 5125 	movw	r1, #1317	; 0x525
   1762c:	2201      	movs	r2, #1
   1762e:	f7ea f9c1 	bl	19b4 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   17632:	2326      	movs	r3, #38	; 0x26
   17634:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   17636:	2300      	movs	r3, #0
   17638:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   1763a:	2301      	movs	r3, #1
   1763c:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   1763e:	1d3b      	adds	r3, r7, #4
   17640:	4618      	mov	r0, r3
   17642:	f7ea fe05 	bl	2250 <NVIC_Init>
}
   17646:	3708      	adds	r7, #8
   17648:	46bd      	mov	sp, r7
   1764a:	bd80      	pop	{r7, pc}

0001764c <enable_rs232>:

void enable_rs232(void)
{
   1764c:	b580      	push	{r7, lr}
   1764e:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
   17650:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17654:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17658:	2101      	movs	r1, #1
   1765a:	f7ea f98b 	bl	1974 <USART_Cmd>
}
   1765e:	bd80      	pop	{r7, pc}

00017660 <send_byte>:

void send_byte(uint8_t b)
{
   17660:	b580      	push	{r7, lr}
   17662:	b082      	sub	sp, #8
   17664:	af00      	add	r7, sp, #0
   17666:	4603      	mov	r3, r0
   17668:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
   1766a:	bf00      	nop
   1766c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17670:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17674:	2180      	movs	r1, #128	; 0x80
   17676:	f7ea fbe9 	bl	1e4c <USART_GetFlagStatus>
   1767a:	4603      	mov	r3, r0
   1767c:	2b00      	cmp	r3, #0
   1767e:	d0f5      	beq.n	1766c <send_byte+0xc>
    
    GPIOC->ODR ^= 0x00001000;
   17680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   17684:	f2c4 0301 	movt	r3, #16385	; 0x4001
   17688:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1768c:	f2c4 0201 	movt	r2, #16385	; 0x4001
   17690:	68d2      	ldr	r2, [r2, #12]
   17692:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
   17696:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
   17698:	79fb      	ldrb	r3, [r7, #7]
   1769a:	b29b      	uxth	r3, r3
   1769c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   176a0:	f2c4 0000 	movt	r0, #16384	; 0x4000
   176a4:	4619      	mov	r1, r3
   176a6:	f7ea fa85 	bl	1bb4 <USART_SendData>
}
   176aa:	3708      	adds	r7, #8
   176ac:	46bd      	mov	sp, r7
   176ae:	bd80      	pop	{r7, pc}

000176b0 <send_num>:
/**
 *  can print a num which is smaller than 10
 */

void send_num(uint8_t b)
{
   176b0:	b580      	push	{r7, lr}
   176b2:	b082      	sub	sp, #8
   176b4:	af00      	add	r7, sp, #0
   176b6:	4603      	mov	r3, r0
   176b8:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
   176ba:	79fb      	ldrb	r3, [r7, #7]
   176bc:	3330      	adds	r3, #48	; 0x30
   176be:	b2db      	uxtb	r3, r3
   176c0:	4618      	mov	r0, r3
   176c2:	f7ff ffcd 	bl	17660 <send_byte>
}
   176c6:	3708      	adds	r7, #8
   176c8:	46bd      	mov	sp, r7
   176ca:	bd80      	pop	{r7, pc}

000176cc <vPrintString>:
 * print a string
 *
 * */

void vPrintString( const char * string)
{
   176cc:	b580      	push	{r7, lr}
   176ce:	b084      	sub	sp, #16
   176d0:	af00      	add	r7, sp, #0
   176d2:	6078      	str	r0, [r7, #4]
    int i = 0;
   176d4:	2300      	movs	r3, #0
   176d6:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
   176d8:	e009      	b.n	176ee <vPrintString+0x22>
    {
        send_byte(string[i]);
   176da:	68fb      	ldr	r3, [r7, #12]
   176dc:	687a      	ldr	r2, [r7, #4]
   176de:	4413      	add	r3, r2
   176e0:	781b      	ldrb	r3, [r3, #0]
   176e2:	4618      	mov	r0, r3
   176e4:	f7ff ffbc 	bl	17660 <send_byte>
        i++;
   176e8:	68fb      	ldr	r3, [r7, #12]
   176ea:	3301      	adds	r3, #1
   176ec:	60fb      	str	r3, [r7, #12]
 * */

void vPrintString( const char * string)
{
    int i = 0;
    while(string[i] != '\0')
   176ee:	68fb      	ldr	r3, [r7, #12]
   176f0:	687a      	ldr	r2, [r7, #4]
   176f2:	4413      	add	r3, r2
   176f4:	781b      	ldrb	r3, [r3, #0]
   176f6:	2b00      	cmp	r3, #0
   176f8:	d1ef      	bne.n	176da <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
   176fa:	3710      	adds	r7, #16
   176fc:	46bd      	mov	sp, r7
   176fe:	bd80      	pop	{r7, pc}

00017700 <vPrintNumber>:
/*
 * print a number which is less than 10
 *
 * */
void vPrintNumber( const long c_num)
{
   17700:	b580      	push	{r7, lr}
   17702:	b08a      	sub	sp, #40	; 0x28
   17704:	af00      	add	r7, sp, #0
   17706:	6078      	str	r0, [r7, #4]
    char time[15], tmp;
    unsigned int i, count = 0;
   17708:	2300      	movs	r3, #0
   1770a:	623b      	str	r3, [r7, #32]
    long num = c_num;
   1770c:	687b      	ldr	r3, [r7, #4]
   1770e:	61fb      	str	r3, [r7, #28]

    if(num == 0)
   17710:	69fb      	ldr	r3, [r7, #28]
   17712:	2b00      	cmp	r3, #0
   17714:	d106      	bne.n	17724 <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
   17716:	f648 4000 	movw	r0, #35840	; 0x8c00
   1771a:	f2c0 0001 	movt	r0, #1
   1771e:	f7ff ffd5 	bl	176cc <vPrintString>
   17722:	e062      	b.n	177ea <vPrintNumber+0xea>
    }
    else
    {
        // transform long into char * 
        while( num  )
   17724:	e024      	b.n	17770 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
   17726:	69f9      	ldr	r1, [r7, #28]
   17728:	f246 6367 	movw	r3, #26215	; 0x6667
   1772c:	f2c6 6366 	movt	r3, #26214	; 0x6666
   17730:	fb83 2301 	smull	r2, r3, r3, r1
   17734:	109a      	asrs	r2, r3, #2
   17736:	17cb      	asrs	r3, r1, #31
   17738:	1ad2      	subs	r2, r2, r3
   1773a:	4613      	mov	r3, r2
   1773c:	009b      	lsls	r3, r3, #2
   1773e:	4413      	add	r3, r2
   17740:	005b      	lsls	r3, r3, #1
   17742:	1aca      	subs	r2, r1, r3
   17744:	b2d3      	uxtb	r3, r2
   17746:	3330      	adds	r3, #48	; 0x30
   17748:	b2da      	uxtb	r2, r3
   1774a:	f107 010c 	add.w	r1, r7, #12
   1774e:	6a3b      	ldr	r3, [r7, #32]
   17750:	440b      	add	r3, r1
   17752:	701a      	strb	r2, [r3, #0]
            count ++;
   17754:	6a3b      	ldr	r3, [r7, #32]
   17756:	3301      	adds	r3, #1
   17758:	623b      	str	r3, [r7, #32]
            num /= 10;
   1775a:	69fa      	ldr	r2, [r7, #28]
   1775c:	f246 6367 	movw	r3, #26215	; 0x6667
   17760:	f2c6 6366 	movt	r3, #26214	; 0x6666
   17764:	fb83 1302 	smull	r1, r3, r3, r2
   17768:	1099      	asrs	r1, r3, #2
   1776a:	17d3      	asrs	r3, r2, #31
   1776c:	1acb      	subs	r3, r1, r3
   1776e:	61fb      	str	r3, [r7, #28]
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num  )
   17770:	69fb      	ldr	r3, [r7, #28]
   17772:	2b00      	cmp	r3, #0
   17774:	d1d7      	bne.n	17726 <vPrintNumber+0x26>
            time[count] = num%10 +'0';
            count ++;
            num /= 10;

        }
        time[count] = '\0';
   17776:	f107 020c 	add.w	r2, r7, #12
   1777a:	6a3b      	ldr	r3, [r7, #32]
   1777c:	4413      	add	r3, r2
   1777e:	2200      	movs	r2, #0
   17780:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i )
   17782:	2300      	movs	r3, #0
   17784:	627b      	str	r3, [r7, #36]	; 0x24
   17786:	e020      	b.n	177ca <vPrintNumber+0xca>
        {
            tmp = time[i];
   17788:	f107 020c 	add.w	r2, r7, #12
   1778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1778e:	4413      	add	r3, r2
   17790:	781b      	ldrb	r3, [r3, #0]
   17792:	76fb      	strb	r3, [r7, #27]
            time[i] = time[count-1-i];
   17794:	6a3a      	ldr	r2, [r7, #32]
   17796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17798:	1ad3      	subs	r3, r2, r3
   1779a:	3b01      	subs	r3, #1
   1779c:	f107 0228 	add.w	r2, r7, #40	; 0x28
   177a0:	4413      	add	r3, r2
   177a2:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
   177a6:	f107 010c 	add.w	r1, r7, #12
   177aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   177ac:	440b      	add	r3, r1
   177ae:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
   177b0:	6a3a      	ldr	r2, [r7, #32]
   177b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   177b4:	1ad3      	subs	r3, r2, r3
   177b6:	3b01      	subs	r3, #1
   177b8:	f107 0128 	add.w	r1, r7, #40	; 0x28
   177bc:	440b      	add	r3, r1
   177be:	7efa      	ldrb	r2, [r7, #27]
   177c0:	f803 2c1c 	strb.w	r2, [r3, #-28]

        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i )
   177c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   177c6:	3301      	adds	r3, #1
   177c8:	627b      	str	r3, [r7, #36]	; 0x24
   177ca:	6a3b      	ldr	r3, [r7, #32]
   177cc:	085a      	lsrs	r2, r3, #1
   177ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   177d0:	429a      	cmp	r2, r3
   177d2:	d8d9      	bhi.n	17788 <vPrintNumber+0x88>
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;

        }
        vPrintString(time);
   177d4:	f107 030c 	add.w	r3, r7, #12
   177d8:	4618      	mov	r0, r3
   177da:	f7ff ff77 	bl	176cc <vPrintString>
        vPrintString("\n\r");
   177de:	f648 4004 	movw	r0, #35844	; 0x8c04
   177e2:	f2c0 0001 	movt	r0, #1
   177e6:	f7ff ff71 	bl	176cc <vPrintString>
    }
}
   177ea:	3728      	adds	r7, #40	; 0x28
   177ec:	46bd      	mov	sp, r7
   177ee:	bd80      	pop	{r7, pc}

000177f0 <vStartTask>:
extern portBASE_TYPE xSensorOfTask[NUMBEROFTASK];
extern portBASE_TYPE xActuatorOfTask[NUMBEROFTASK];

// init program to start all task when system init
void vStartTask()
{
   177f0:	b580      	push	{r7, lr}
   177f2:	b086      	sub	sp, #24
   177f4:	af02      	add	r7, sp, #8
    portBASE_TYPE i;
    xEventHandle pxEvent;
    struct eventData null_data;
    for( i = 0; i < NUMBEROFTASK; ++i )
   177f6:	2300      	movs	r3, #0
   177f8:	60fb      	str	r3, [r7, #12]
   177fa:	e020      	b.n	1783e <vStartTask+0x4e>
    {
        pxEvent = pxEventCreate(xActuatorOfTask[i], xPeriodOfTask[i], xPeriodOfTask[i], null_data);
   177fc:	f240 0390 	movw	r3, #144	; 0x90
   17800:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17804:	68fa      	ldr	r2, [r7, #12]
   17806:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1780a:	f240 0328 	movw	r3, #40	; 0x28
   1780e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17812:	68fa      	ldr	r2, [r7, #12]
   17814:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   17818:	f240 0328 	movw	r3, #40	; 0x28
   1781c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17820:	68fa      	ldr	r2, [r7, #12]
   17822:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   17826:	687b      	ldr	r3, [r7, #4]
   17828:	9300      	str	r3, [sp, #0]
   1782a:	683b      	ldr	r3, [r7, #0]
   1782c:	f7eb fb00 	bl	2e30 <pxEventGenericCreate>
   17830:	60b8      	str	r0, [r7, #8]
        vEventSend( pxEvent );   
   17832:	68b8      	ldr	r0, [r7, #8]
   17834:	f7eb fe34 	bl	34a0 <vEventGenericSend>
void vStartTask()
{
    portBASE_TYPE i;
    xEventHandle pxEvent;
    struct eventData null_data;
    for( i = 0; i < NUMBEROFTASK; ++i )
   17838:	68fb      	ldr	r3, [r7, #12]
   1783a:	3301      	adds	r3, #1
   1783c:	60fb      	str	r3, [r7, #12]
   1783e:	68fb      	ldr	r3, [r7, #12]
   17840:	2b0c      	cmp	r3, #12
   17842:	dddb      	ble.n	177fc <vStartTask+0xc>
    {
        pxEvent = pxEventCreate(xActuatorOfTask[i], xPeriodOfTask[i], xPeriodOfTask[i], null_data);
        vEventSend( pxEvent );   
    }
}
   17844:	3710      	adds	r7, #16
   17846:	46bd      	mov	sp, r7
   17848:	bd80      	pop	{r7, pc}
   1784a:	bf00      	nop

0001784c <main>:

#define SERVANT_STACK_SIZE 128 
int main(void)
{
   1784c:	b580      	push	{r7, lr}
   1784e:	b086      	sub	sp, #24
   17850:	af04      	add	r7, sp, #16
    init_led();
   17852:	f7ff fe31 	bl	174b8 <init_led>
    init_rs232();
   17856:	f7ff fe91 	bl	1757c <init_rs232>
    enable_rs232_interrupts();
   1785a:	f7ff fed5 	bl	17608 <enable_rs232_interrupts>
    enable_rs232();
   1785e:	f7ff fef5 	bl	1764c <enable_rs232>
    vSemaphoreInitialise();
   17862:	f7eb fe85 	bl	3570 <vSemaphoreInitialise>
    vContextInit();
   17866:	f7eb fec3 	bl	35f0 <vContextInit>
    vInitialiseEventLists();  
   1786a:	f7eb f909 	bl	2a80 <vInitialiseEventLists>
    vStartTask();
   1786e:	f7ff ffbf 	bl	177f0 <vStartTask>
    PapabenchInit();
   17872:	f7ec fa8d 	bl	3d90 <PapabenchInit>
    portBASE_TYPE i,j;
    portBASE_TYPE flag = 0;
   17876:	2300      	movs	r3, #0
   17878:	607b      	str	r3, [r7, #4]

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 1, &xTaskOfHandle[0]);
   1787a:	2301      	movs	r3, #1
   1787c:	9300      	str	r3, [sp, #0]
   1787e:	f64c 3394 	movw	r3, #52116	; 0xcb94
   17882:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17886:	9301      	str	r3, [sp, #4]
   17888:	2300      	movs	r3, #0
   1788a:	9302      	str	r3, [sp, #8]
   1788c:	2300      	movs	r3, #0
   1788e:	9303      	str	r3, [sp, #12]
   17890:	f643 40bd 	movw	r0, #15549	; 0x3cbd
   17894:	f2c0 0000 	movt	r0, #0
   17898:	f648 4108 	movw	r1, #35848	; 0x8c08
   1789c:	f2c0 0101 	movt	r1, #1
   178a0:	2280      	movs	r2, #128	; 0x80
   178a2:	2300      	movs	r3, #0
   178a4:	f7ed f918 	bl	4ad8 <xTaskGenericCreate>
    xTaskCreate( vSensor, "I-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 4, &xTaskOfHandle[1]);
   178a8:	2304      	movs	r3, #4
   178aa:	9300      	str	r3, [sp, #0]
   178ac:	4b25      	ldr	r3, [pc, #148]	; (17944 <main+0xf8>)
   178ae:	9301      	str	r3, [sp, #4]
   178b0:	2300      	movs	r3, #0
   178b2:	9302      	str	r3, [sp, #8]
   178b4:	2300      	movs	r3, #0
   178b6:	9303      	str	r3, [sp, #12]
   178b8:	f643 00d5 	movw	r0, #14549	; 0x38d5
   178bc:	f2c0 0000 	movt	r0, #0
   178c0:	f648 4114 	movw	r1, #35860	; 0x8c14
   178c4:	f2c0 0101 	movt	r1, #1
   178c8:	2280      	movs	r2, #128	; 0x80
   178ca:	2300      	movs	r3, #0
   178cc:	f7ed f904 	bl	4ad8 <xTaskGenericCreate>
    xTaskCreate( vServant, "C-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 2, &xTaskOfHandle[2]);
   178d0:	2302      	movs	r3, #2
   178d2:	9300      	str	r3, [sp, #0]
   178d4:	4b1c      	ldr	r3, [pc, #112]	; (17948 <main+0xfc>)
   178d6:	9301      	str	r3, [sp, #4]
   178d8:	2300      	movs	r3, #0
   178da:	9302      	str	r3, [sp, #8]
   178dc:	2300      	movs	r3, #0
   178de:	9303      	str	r3, [sp, #12]
   178e0:	f643 2001 	movw	r0, #14849	; 0x3a01
   178e4:	f2c0 0000 	movt	r0, #0
   178e8:	f648 4120 	movw	r1, #35872	; 0x8c20
   178ec:	f2c0 0101 	movt	r1, #1
   178f0:	2280      	movs	r2, #128	; 0x80
   178f2:	2300      	movs	r3, #0
   178f4:	f7ed f8f0 	bl	4ad8 <xTaskGenericCreate>
    xTaskCreate( vActuator, "O-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 3, &xTaskOfHandle[3]);
   178f8:	2303      	movs	r3, #3
   178fa:	9300      	str	r3, [sp, #0]
   178fc:	4b13      	ldr	r3, [pc, #76]	; (1794c <main+0x100>)
   178fe:	9301      	str	r3, [sp, #4]
   17900:	2300      	movs	r3, #0
   17902:	9302      	str	r3, [sp, #8]
   17904:	2300      	movs	r3, #0
   17906:	9303      	str	r3, [sp, #12]
   17908:	f643 309d 	movw	r0, #15261	; 0x3b9d
   1790c:	f2c0 0000 	movt	r0, #0
   17910:	f648 412c 	movw	r1, #35884	; 0x8c2c
   17914:	f2c0 0101 	movt	r1, #1
   17918:	2280      	movs	r2, #128	; 0x80
   1791a:	2300      	movs	r3, #0
   1791c:	f7ed f8dc 	bl	4ad8 <xTaskGenericCreate>

    xSemaphoreGive(xBinarySemaphore[0]);
   17920:	f241 1320 	movw	r3, #4384	; 0x1120
   17924:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17928:	681b      	ldr	r3, [r3, #0]
   1792a:	4618      	mov	r0, r3
   1792c:	2100      	movs	r1, #0
   1792e:	2200      	movs	r2, #0
   17930:	2300      	movs	r3, #0
   17932:	f7ec fdbf 	bl	44b4 <xQueueGenericSend>
    vTaskStartScheduler();
   17936:	f7ed fc4d 	bl	51d4 <vTaskStartScheduler>

    return 0;
   1793a:	2300      	movs	r3, #0
}
   1793c:	4618      	mov	r0, r3
   1793e:	3708      	adds	r7, #8
   17940:	46bd      	mov	sp, r7
   17942:	bd80      	pop	{r7, pc}
   17944:	2004cb98 	.word	0x2004cb98
   17948:	2004cb9c 	.word	0x2004cb9c
   1794c:	2004cba0 	.word	0x2004cba0

00017950 <myTraceCreate>:

void myTraceCreate      (){
   17950:	b480      	push	{r7}
   17952:	af00      	add	r7, sp, #0
}
   17954:	46bd      	mov	sp, r7
   17956:	f85d 7b04 	ldr.w	r7, [sp], #4
   1795a:	4770      	bx	lr

0001795c <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
   1795c:	b480      	push	{r7}
   1795e:	af00      	add	r7, sp, #0
}
   17960:	46bd      	mov	sp, r7
   17962:	f85d 7b04 	ldr.w	r7, [sp], #4
   17966:	4770      	bx	lr

00017968 <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
   17968:	b480      	push	{r7}
   1796a:	af00      	add	r7, sp, #0
}
   1796c:	46bd      	mov	sp, r7
   1796e:	f85d 7b04 	ldr.w	r7, [sp], #4
   17972:	4770      	bx	lr

00017974 <vApplicationTickHook>:
 /*
 * if there is any task need to be triggered at this time,
 * tick hook function would send semaphore to them.
 * */
void vApplicationTickHook( void )
{
   17974:	b580      	push	{r7, lr}
   17976:	af00      	add	r7, sp, #0
    if(xIsExecutableEventArrive())
   17978:	f7eb f936 	bl	2be8 <xIsExecutableEventArrive>
   1797c:	4603      	mov	r3, r0
   1797e:	2b00      	cmp	r3, #0
   17980:	d00a      	beq.n	17998 <vApplicationTickHook+0x24>
       xSemaphoreGive( xBinarySemaphore[0] ); 
   17982:	f241 1320 	movw	r3, #4384	; 0x1120
   17986:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1798a:	681b      	ldr	r3, [r3, #0]
   1798c:	4618      	mov	r0, r3
   1798e:	2100      	movs	r1, #0
   17990:	2200      	movs	r2, #0
   17992:	2300      	movs	r3, #0
   17994:	f7ec fd8e 	bl	44b4 <xQueueGenericSend>
}
   17998:	bd80      	pop	{r7, pc}
   1799a:	bf00      	nop

0001799c <__aeabi_drsub>:
   1799c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   179a0:	e002      	b.n	179a8 <__adddf3>
   179a2:	bf00      	nop

000179a4 <__aeabi_dsub>:
   179a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000179a8 <__adddf3>:
   179a8:	b530      	push	{r4, r5, lr}
   179aa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   179ae:	ea4f 0543 	mov.w	r5, r3, lsl #1
   179b2:	ea94 0f05 	teq	r4, r5
   179b6:	bf08      	it	eq
   179b8:	ea90 0f02 	teqeq	r0, r2
   179bc:	bf1f      	itttt	ne
   179be:	ea54 0c00 	orrsne.w	ip, r4, r0
   179c2:	ea55 0c02 	orrsne.w	ip, r5, r2
   179c6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   179ca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   179ce:	f000 80e2 	beq.w	17b96 <__adddf3+0x1ee>
   179d2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   179d6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   179da:	bfb8      	it	lt
   179dc:	426d      	neglt	r5, r5
   179de:	dd0c      	ble.n	179fa <__adddf3+0x52>
   179e0:	442c      	add	r4, r5
   179e2:	ea80 0202 	eor.w	r2, r0, r2
   179e6:	ea81 0303 	eor.w	r3, r1, r3
   179ea:	ea82 0000 	eor.w	r0, r2, r0
   179ee:	ea83 0101 	eor.w	r1, r3, r1
   179f2:	ea80 0202 	eor.w	r2, r0, r2
   179f6:	ea81 0303 	eor.w	r3, r1, r3
   179fa:	2d36      	cmp	r5, #54	; 0x36
   179fc:	bf88      	it	hi
   179fe:	bd30      	pophi	{r4, r5, pc}
   17a00:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   17a04:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17a08:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   17a0c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   17a10:	d002      	beq.n	17a18 <__adddf3+0x70>
   17a12:	4240      	negs	r0, r0
   17a14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17a18:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   17a1c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   17a20:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   17a24:	d002      	beq.n	17a2c <__adddf3+0x84>
   17a26:	4252      	negs	r2, r2
   17a28:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   17a2c:	ea94 0f05 	teq	r4, r5
   17a30:	f000 80a7 	beq.w	17b82 <__adddf3+0x1da>
   17a34:	f1a4 0401 	sub.w	r4, r4, #1
   17a38:	f1d5 0e20 	rsbs	lr, r5, #32
   17a3c:	db0d      	blt.n	17a5a <__adddf3+0xb2>
   17a3e:	fa02 fc0e 	lsl.w	ip, r2, lr
   17a42:	fa22 f205 	lsr.w	r2, r2, r5
   17a46:	1880      	adds	r0, r0, r2
   17a48:	f141 0100 	adc.w	r1, r1, #0
   17a4c:	fa03 f20e 	lsl.w	r2, r3, lr
   17a50:	1880      	adds	r0, r0, r2
   17a52:	fa43 f305 	asr.w	r3, r3, r5
   17a56:	4159      	adcs	r1, r3
   17a58:	e00e      	b.n	17a78 <__adddf3+0xd0>
   17a5a:	f1a5 0520 	sub.w	r5, r5, #32
   17a5e:	f10e 0e20 	add.w	lr, lr, #32
   17a62:	2a01      	cmp	r2, #1
   17a64:	fa03 fc0e 	lsl.w	ip, r3, lr
   17a68:	bf28      	it	cs
   17a6a:	f04c 0c02 	orrcs.w	ip, ip, #2
   17a6e:	fa43 f305 	asr.w	r3, r3, r5
   17a72:	18c0      	adds	r0, r0, r3
   17a74:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   17a78:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17a7c:	d507      	bpl.n	17a8e <__adddf3+0xe6>
   17a7e:	f04f 0e00 	mov.w	lr, #0
   17a82:	f1dc 0c00 	rsbs	ip, ip, #0
   17a86:	eb7e 0000 	sbcs.w	r0, lr, r0
   17a8a:	eb6e 0101 	sbc.w	r1, lr, r1
   17a8e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   17a92:	d31b      	bcc.n	17acc <__adddf3+0x124>
   17a94:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   17a98:	d30c      	bcc.n	17ab4 <__adddf3+0x10c>
   17a9a:	0849      	lsrs	r1, r1, #1
   17a9c:	ea5f 0030 	movs.w	r0, r0, rrx
   17aa0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   17aa4:	f104 0401 	add.w	r4, r4, #1
   17aa8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   17aac:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   17ab0:	f080 809a 	bcs.w	17be8 <__adddf3+0x240>
   17ab4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   17ab8:	bf08      	it	eq
   17aba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   17abe:	f150 0000 	adcs.w	r0, r0, #0
   17ac2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17ac6:	ea41 0105 	orr.w	r1, r1, r5
   17aca:	bd30      	pop	{r4, r5, pc}
   17acc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   17ad0:	4140      	adcs	r0, r0
   17ad2:	eb41 0101 	adc.w	r1, r1, r1
   17ad6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17ada:	f1a4 0401 	sub.w	r4, r4, #1
   17ade:	d1e9      	bne.n	17ab4 <__adddf3+0x10c>
   17ae0:	f091 0f00 	teq	r1, #0
   17ae4:	bf04      	itt	eq
   17ae6:	4601      	moveq	r1, r0
   17ae8:	2000      	moveq	r0, #0
   17aea:	fab1 f381 	clz	r3, r1
   17aee:	bf08      	it	eq
   17af0:	3320      	addeq	r3, #32
   17af2:	f1a3 030b 	sub.w	r3, r3, #11
   17af6:	f1b3 0220 	subs.w	r2, r3, #32
   17afa:	da0c      	bge.n	17b16 <__adddf3+0x16e>
   17afc:	320c      	adds	r2, #12
   17afe:	dd08      	ble.n	17b12 <__adddf3+0x16a>
   17b00:	f102 0c14 	add.w	ip, r2, #20
   17b04:	f1c2 020c 	rsb	r2, r2, #12
   17b08:	fa01 f00c 	lsl.w	r0, r1, ip
   17b0c:	fa21 f102 	lsr.w	r1, r1, r2
   17b10:	e00c      	b.n	17b2c <__adddf3+0x184>
   17b12:	f102 0214 	add.w	r2, r2, #20
   17b16:	bfd8      	it	le
   17b18:	f1c2 0c20 	rsble	ip, r2, #32
   17b1c:	fa01 f102 	lsl.w	r1, r1, r2
   17b20:	fa20 fc0c 	lsr.w	ip, r0, ip
   17b24:	bfdc      	itt	le
   17b26:	ea41 010c 	orrle.w	r1, r1, ip
   17b2a:	4090      	lslle	r0, r2
   17b2c:	1ae4      	subs	r4, r4, r3
   17b2e:	bfa2      	ittt	ge
   17b30:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   17b34:	4329      	orrge	r1, r5
   17b36:	bd30      	popge	{r4, r5, pc}
   17b38:	ea6f 0404 	mvn.w	r4, r4
   17b3c:	3c1f      	subs	r4, #31
   17b3e:	da1c      	bge.n	17b7a <__adddf3+0x1d2>
   17b40:	340c      	adds	r4, #12
   17b42:	dc0e      	bgt.n	17b62 <__adddf3+0x1ba>
   17b44:	f104 0414 	add.w	r4, r4, #20
   17b48:	f1c4 0220 	rsb	r2, r4, #32
   17b4c:	fa20 f004 	lsr.w	r0, r0, r4
   17b50:	fa01 f302 	lsl.w	r3, r1, r2
   17b54:	ea40 0003 	orr.w	r0, r0, r3
   17b58:	fa21 f304 	lsr.w	r3, r1, r4
   17b5c:	ea45 0103 	orr.w	r1, r5, r3
   17b60:	bd30      	pop	{r4, r5, pc}
   17b62:	f1c4 040c 	rsb	r4, r4, #12
   17b66:	f1c4 0220 	rsb	r2, r4, #32
   17b6a:	fa20 f002 	lsr.w	r0, r0, r2
   17b6e:	fa01 f304 	lsl.w	r3, r1, r4
   17b72:	ea40 0003 	orr.w	r0, r0, r3
   17b76:	4629      	mov	r1, r5
   17b78:	bd30      	pop	{r4, r5, pc}
   17b7a:	fa21 f004 	lsr.w	r0, r1, r4
   17b7e:	4629      	mov	r1, r5
   17b80:	bd30      	pop	{r4, r5, pc}
   17b82:	f094 0f00 	teq	r4, #0
   17b86:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   17b8a:	bf06      	itte	eq
   17b8c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   17b90:	3401      	addeq	r4, #1
   17b92:	3d01      	subne	r5, #1
   17b94:	e74e      	b.n	17a34 <__adddf3+0x8c>
   17b96:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   17b9a:	bf18      	it	ne
   17b9c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   17ba0:	d029      	beq.n	17bf6 <__adddf3+0x24e>
   17ba2:	ea94 0f05 	teq	r4, r5
   17ba6:	bf08      	it	eq
   17ba8:	ea90 0f02 	teqeq	r0, r2
   17bac:	d005      	beq.n	17bba <__adddf3+0x212>
   17bae:	ea54 0c00 	orrs.w	ip, r4, r0
   17bb2:	bf04      	itt	eq
   17bb4:	4619      	moveq	r1, r3
   17bb6:	4610      	moveq	r0, r2
   17bb8:	bd30      	pop	{r4, r5, pc}
   17bba:	ea91 0f03 	teq	r1, r3
   17bbe:	bf1e      	ittt	ne
   17bc0:	2100      	movne	r1, #0
   17bc2:	2000      	movne	r0, #0
   17bc4:	bd30      	popne	{r4, r5, pc}
   17bc6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   17bca:	d105      	bne.n	17bd8 <__adddf3+0x230>
   17bcc:	0040      	lsls	r0, r0, #1
   17bce:	4149      	adcs	r1, r1
   17bd0:	bf28      	it	cs
   17bd2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   17bd6:	bd30      	pop	{r4, r5, pc}
   17bd8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   17bdc:	bf3c      	itt	cc
   17bde:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   17be2:	bd30      	popcc	{r4, r5, pc}
   17be4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17be8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   17bec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17bf0:	f04f 0000 	mov.w	r0, #0
   17bf4:	bd30      	pop	{r4, r5, pc}
   17bf6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   17bfa:	bf1a      	itte	ne
   17bfc:	4619      	movne	r1, r3
   17bfe:	4610      	movne	r0, r2
   17c00:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   17c04:	bf1c      	itt	ne
   17c06:	460b      	movne	r3, r1
   17c08:	4602      	movne	r2, r0
   17c0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   17c0e:	bf06      	itte	eq
   17c10:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   17c14:	ea91 0f03 	teqeq	r1, r3
   17c18:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   17c1c:	bd30      	pop	{r4, r5, pc}
   17c1e:	bf00      	nop

00017c20 <__aeabi_ui2d>:
   17c20:	f090 0f00 	teq	r0, #0
   17c24:	bf04      	itt	eq
   17c26:	2100      	moveq	r1, #0
   17c28:	4770      	bxeq	lr
   17c2a:	b530      	push	{r4, r5, lr}
   17c2c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17c30:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17c34:	f04f 0500 	mov.w	r5, #0
   17c38:	f04f 0100 	mov.w	r1, #0
   17c3c:	e750      	b.n	17ae0 <__adddf3+0x138>
   17c3e:	bf00      	nop

00017c40 <__aeabi_i2d>:
   17c40:	f090 0f00 	teq	r0, #0
   17c44:	bf04      	itt	eq
   17c46:	2100      	moveq	r1, #0
   17c48:	4770      	bxeq	lr
   17c4a:	b530      	push	{r4, r5, lr}
   17c4c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17c50:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17c54:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   17c58:	bf48      	it	mi
   17c5a:	4240      	negmi	r0, r0
   17c5c:	f04f 0100 	mov.w	r1, #0
   17c60:	e73e      	b.n	17ae0 <__adddf3+0x138>
   17c62:	bf00      	nop

00017c64 <__aeabi_f2d>:
   17c64:	0042      	lsls	r2, r0, #1
   17c66:	ea4f 01e2 	mov.w	r1, r2, asr #3
   17c6a:	ea4f 0131 	mov.w	r1, r1, rrx
   17c6e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   17c72:	bf1f      	itttt	ne
   17c74:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   17c78:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17c7c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   17c80:	4770      	bxne	lr
   17c82:	f092 0f00 	teq	r2, #0
   17c86:	bf14      	ite	ne
   17c88:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17c8c:	4770      	bxeq	lr
   17c8e:	b530      	push	{r4, r5, lr}
   17c90:	f44f 7460 	mov.w	r4, #896	; 0x380
   17c94:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17c98:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17c9c:	e720      	b.n	17ae0 <__adddf3+0x138>
   17c9e:	bf00      	nop

00017ca0 <__aeabi_ul2d>:
   17ca0:	ea50 0201 	orrs.w	r2, r0, r1
   17ca4:	bf08      	it	eq
   17ca6:	4770      	bxeq	lr
   17ca8:	b530      	push	{r4, r5, lr}
   17caa:	f04f 0500 	mov.w	r5, #0
   17cae:	e00a      	b.n	17cc6 <__aeabi_l2d+0x16>

00017cb0 <__aeabi_l2d>:
   17cb0:	ea50 0201 	orrs.w	r2, r0, r1
   17cb4:	bf08      	it	eq
   17cb6:	4770      	bxeq	lr
   17cb8:	b530      	push	{r4, r5, lr}
   17cba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   17cbe:	d502      	bpl.n	17cc6 <__aeabi_l2d+0x16>
   17cc0:	4240      	negs	r0, r0
   17cc2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17cc6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17cca:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17cce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   17cd2:	f43f aedc 	beq.w	17a8e <__adddf3+0xe6>
   17cd6:	f04f 0203 	mov.w	r2, #3
   17cda:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17cde:	bf18      	it	ne
   17ce0:	3203      	addne	r2, #3
   17ce2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17ce6:	bf18      	it	ne
   17ce8:	3203      	addne	r2, #3
   17cea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   17cee:	f1c2 0320 	rsb	r3, r2, #32
   17cf2:	fa00 fc03 	lsl.w	ip, r0, r3
   17cf6:	fa20 f002 	lsr.w	r0, r0, r2
   17cfa:	fa01 fe03 	lsl.w	lr, r1, r3
   17cfe:	ea40 000e 	orr.w	r0, r0, lr
   17d02:	fa21 f102 	lsr.w	r1, r1, r2
   17d06:	4414      	add	r4, r2
   17d08:	e6c1      	b.n	17a8e <__adddf3+0xe6>
   17d0a:	bf00      	nop

00017d0c <__aeabi_dmul>:
   17d0c:	b570      	push	{r4, r5, r6, lr}
   17d0e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17d12:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17d16:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17d1a:	bf1d      	ittte	ne
   17d1c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17d20:	ea94 0f0c 	teqne	r4, ip
   17d24:	ea95 0f0c 	teqne	r5, ip
   17d28:	f000 f8de 	bleq	17ee8 <__aeabi_dmul+0x1dc>
   17d2c:	442c      	add	r4, r5
   17d2e:	ea81 0603 	eor.w	r6, r1, r3
   17d32:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   17d36:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   17d3a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   17d3e:	bf18      	it	ne
   17d40:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   17d44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17d48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   17d4c:	d038      	beq.n	17dc0 <__aeabi_dmul+0xb4>
   17d4e:	fba0 ce02 	umull	ip, lr, r0, r2
   17d52:	f04f 0500 	mov.w	r5, #0
   17d56:	fbe1 e502 	umlal	lr, r5, r1, r2
   17d5a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   17d5e:	fbe0 e503 	umlal	lr, r5, r0, r3
   17d62:	f04f 0600 	mov.w	r6, #0
   17d66:	fbe1 5603 	umlal	r5, r6, r1, r3
   17d6a:	f09c 0f00 	teq	ip, #0
   17d6e:	bf18      	it	ne
   17d70:	f04e 0e01 	orrne.w	lr, lr, #1
   17d74:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   17d78:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   17d7c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   17d80:	d204      	bcs.n	17d8c <__aeabi_dmul+0x80>
   17d82:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   17d86:	416d      	adcs	r5, r5
   17d88:	eb46 0606 	adc.w	r6, r6, r6
   17d8c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   17d90:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   17d94:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   17d98:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   17d9c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   17da0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17da4:	bf88      	it	hi
   17da6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17daa:	d81e      	bhi.n	17dea <__aeabi_dmul+0xde>
   17dac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   17db0:	bf08      	it	eq
   17db2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   17db6:	f150 0000 	adcs.w	r0, r0, #0
   17dba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17dbe:	bd70      	pop	{r4, r5, r6, pc}
   17dc0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   17dc4:	ea46 0101 	orr.w	r1, r6, r1
   17dc8:	ea40 0002 	orr.w	r0, r0, r2
   17dcc:	ea81 0103 	eor.w	r1, r1, r3
   17dd0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   17dd4:	bfc2      	ittt	gt
   17dd6:	ebd4 050c 	rsbsgt	r5, r4, ip
   17dda:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17dde:	bd70      	popgt	{r4, r5, r6, pc}
   17de0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17de4:	f04f 0e00 	mov.w	lr, #0
   17de8:	3c01      	subs	r4, #1
   17dea:	f300 80ab 	bgt.w	17f44 <__aeabi_dmul+0x238>
   17dee:	f114 0f36 	cmn.w	r4, #54	; 0x36
   17df2:	bfde      	ittt	le
   17df4:	2000      	movle	r0, #0
   17df6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   17dfa:	bd70      	pople	{r4, r5, r6, pc}
   17dfc:	f1c4 0400 	rsb	r4, r4, #0
   17e00:	3c20      	subs	r4, #32
   17e02:	da35      	bge.n	17e70 <__aeabi_dmul+0x164>
   17e04:	340c      	adds	r4, #12
   17e06:	dc1b      	bgt.n	17e40 <__aeabi_dmul+0x134>
   17e08:	f104 0414 	add.w	r4, r4, #20
   17e0c:	f1c4 0520 	rsb	r5, r4, #32
   17e10:	fa00 f305 	lsl.w	r3, r0, r5
   17e14:	fa20 f004 	lsr.w	r0, r0, r4
   17e18:	fa01 f205 	lsl.w	r2, r1, r5
   17e1c:	ea40 0002 	orr.w	r0, r0, r2
   17e20:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   17e24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17e28:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17e2c:	fa21 f604 	lsr.w	r6, r1, r4
   17e30:	eb42 0106 	adc.w	r1, r2, r6
   17e34:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17e38:	bf08      	it	eq
   17e3a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17e3e:	bd70      	pop	{r4, r5, r6, pc}
   17e40:	f1c4 040c 	rsb	r4, r4, #12
   17e44:	f1c4 0520 	rsb	r5, r4, #32
   17e48:	fa00 f304 	lsl.w	r3, r0, r4
   17e4c:	fa20 f005 	lsr.w	r0, r0, r5
   17e50:	fa01 f204 	lsl.w	r2, r1, r4
   17e54:	ea40 0002 	orr.w	r0, r0, r2
   17e58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17e5c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17e60:	f141 0100 	adc.w	r1, r1, #0
   17e64:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17e68:	bf08      	it	eq
   17e6a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17e6e:	bd70      	pop	{r4, r5, r6, pc}
   17e70:	f1c4 0520 	rsb	r5, r4, #32
   17e74:	fa00 f205 	lsl.w	r2, r0, r5
   17e78:	ea4e 0e02 	orr.w	lr, lr, r2
   17e7c:	fa20 f304 	lsr.w	r3, r0, r4
   17e80:	fa01 f205 	lsl.w	r2, r1, r5
   17e84:	ea43 0302 	orr.w	r3, r3, r2
   17e88:	fa21 f004 	lsr.w	r0, r1, r4
   17e8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17e90:	fa21 f204 	lsr.w	r2, r1, r4
   17e94:	ea20 0002 	bic.w	r0, r0, r2
   17e98:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   17e9c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17ea0:	bf08      	it	eq
   17ea2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17ea6:	bd70      	pop	{r4, r5, r6, pc}
   17ea8:	f094 0f00 	teq	r4, #0
   17eac:	d10f      	bne.n	17ece <__aeabi_dmul+0x1c2>
   17eae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   17eb2:	0040      	lsls	r0, r0, #1
   17eb4:	eb41 0101 	adc.w	r1, r1, r1
   17eb8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17ebc:	bf08      	it	eq
   17ebe:	3c01      	subeq	r4, #1
   17ec0:	d0f7      	beq.n	17eb2 <__aeabi_dmul+0x1a6>
   17ec2:	ea41 0106 	orr.w	r1, r1, r6
   17ec6:	f095 0f00 	teq	r5, #0
   17eca:	bf18      	it	ne
   17ecc:	4770      	bxne	lr
   17ece:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   17ed2:	0052      	lsls	r2, r2, #1
   17ed4:	eb43 0303 	adc.w	r3, r3, r3
   17ed8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   17edc:	bf08      	it	eq
   17ede:	3d01      	subeq	r5, #1
   17ee0:	d0f7      	beq.n	17ed2 <__aeabi_dmul+0x1c6>
   17ee2:	ea43 0306 	orr.w	r3, r3, r6
   17ee6:	4770      	bx	lr
   17ee8:	ea94 0f0c 	teq	r4, ip
   17eec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17ef0:	bf18      	it	ne
   17ef2:	ea95 0f0c 	teqne	r5, ip
   17ef6:	d00c      	beq.n	17f12 <__aeabi_dmul+0x206>
   17ef8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17efc:	bf18      	it	ne
   17efe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17f02:	d1d1      	bne.n	17ea8 <__aeabi_dmul+0x19c>
   17f04:	ea81 0103 	eor.w	r1, r1, r3
   17f08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17f0c:	f04f 0000 	mov.w	r0, #0
   17f10:	bd70      	pop	{r4, r5, r6, pc}
   17f12:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17f16:	bf06      	itte	eq
   17f18:	4610      	moveq	r0, r2
   17f1a:	4619      	moveq	r1, r3
   17f1c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17f20:	d019      	beq.n	17f56 <__aeabi_dmul+0x24a>
   17f22:	ea94 0f0c 	teq	r4, ip
   17f26:	d102      	bne.n	17f2e <__aeabi_dmul+0x222>
   17f28:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   17f2c:	d113      	bne.n	17f56 <__aeabi_dmul+0x24a>
   17f2e:	ea95 0f0c 	teq	r5, ip
   17f32:	d105      	bne.n	17f40 <__aeabi_dmul+0x234>
   17f34:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   17f38:	bf1c      	itt	ne
   17f3a:	4610      	movne	r0, r2
   17f3c:	4619      	movne	r1, r3
   17f3e:	d10a      	bne.n	17f56 <__aeabi_dmul+0x24a>
   17f40:	ea81 0103 	eor.w	r1, r1, r3
   17f44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17f48:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17f4c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17f50:	f04f 0000 	mov.w	r0, #0
   17f54:	bd70      	pop	{r4, r5, r6, pc}
   17f56:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17f5a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   17f5e:	bd70      	pop	{r4, r5, r6, pc}

00017f60 <__aeabi_ddiv>:
   17f60:	b570      	push	{r4, r5, r6, lr}
   17f62:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17f66:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17f6a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17f6e:	bf1d      	ittte	ne
   17f70:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17f74:	ea94 0f0c 	teqne	r4, ip
   17f78:	ea95 0f0c 	teqne	r5, ip
   17f7c:	f000 f8a7 	bleq	180ce <__aeabi_ddiv+0x16e>
   17f80:	eba4 0405 	sub.w	r4, r4, r5
   17f84:	ea81 0e03 	eor.w	lr, r1, r3
   17f88:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17f8c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17f90:	f000 8088 	beq.w	180a4 <__aeabi_ddiv+0x144>
   17f94:	ea4f 3303 	mov.w	r3, r3, lsl #12
   17f98:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   17f9c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   17fa0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   17fa4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   17fa8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   17fac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   17fb0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   17fb4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   17fb8:	429d      	cmp	r5, r3
   17fba:	bf08      	it	eq
   17fbc:	4296      	cmpeq	r6, r2
   17fbe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   17fc2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   17fc6:	d202      	bcs.n	17fce <__aeabi_ddiv+0x6e>
   17fc8:	085b      	lsrs	r3, r3, #1
   17fca:	ea4f 0232 	mov.w	r2, r2, rrx
   17fce:	1ab6      	subs	r6, r6, r2
   17fd0:	eb65 0503 	sbc.w	r5, r5, r3
   17fd4:	085b      	lsrs	r3, r3, #1
   17fd6:	ea4f 0232 	mov.w	r2, r2, rrx
   17fda:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   17fde:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   17fe2:	ebb6 0e02 	subs.w	lr, r6, r2
   17fe6:	eb75 0e03 	sbcs.w	lr, r5, r3
   17fea:	bf22      	ittt	cs
   17fec:	1ab6      	subcs	r6, r6, r2
   17fee:	4675      	movcs	r5, lr
   17ff0:	ea40 000c 	orrcs.w	r0, r0, ip
   17ff4:	085b      	lsrs	r3, r3, #1
   17ff6:	ea4f 0232 	mov.w	r2, r2, rrx
   17ffa:	ebb6 0e02 	subs.w	lr, r6, r2
   17ffe:	eb75 0e03 	sbcs.w	lr, r5, r3
   18002:	bf22      	ittt	cs
   18004:	1ab6      	subcs	r6, r6, r2
   18006:	4675      	movcs	r5, lr
   18008:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1800c:	085b      	lsrs	r3, r3, #1
   1800e:	ea4f 0232 	mov.w	r2, r2, rrx
   18012:	ebb6 0e02 	subs.w	lr, r6, r2
   18016:	eb75 0e03 	sbcs.w	lr, r5, r3
   1801a:	bf22      	ittt	cs
   1801c:	1ab6      	subcs	r6, r6, r2
   1801e:	4675      	movcs	r5, lr
   18020:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   18024:	085b      	lsrs	r3, r3, #1
   18026:	ea4f 0232 	mov.w	r2, r2, rrx
   1802a:	ebb6 0e02 	subs.w	lr, r6, r2
   1802e:	eb75 0e03 	sbcs.w	lr, r5, r3
   18032:	bf22      	ittt	cs
   18034:	1ab6      	subcs	r6, r6, r2
   18036:	4675      	movcs	r5, lr
   18038:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1803c:	ea55 0e06 	orrs.w	lr, r5, r6
   18040:	d018      	beq.n	18074 <__aeabi_ddiv+0x114>
   18042:	ea4f 1505 	mov.w	r5, r5, lsl #4
   18046:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1804a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1804e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   18052:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   18056:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1805a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1805e:	d1c0      	bne.n	17fe2 <__aeabi_ddiv+0x82>
   18060:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18064:	d10b      	bne.n	1807e <__aeabi_ddiv+0x11e>
   18066:	ea41 0100 	orr.w	r1, r1, r0
   1806a:	f04f 0000 	mov.w	r0, #0
   1806e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   18072:	e7b6      	b.n	17fe2 <__aeabi_ddiv+0x82>
   18074:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18078:	bf04      	itt	eq
   1807a:	4301      	orreq	r1, r0
   1807c:	2000      	moveq	r0, #0
   1807e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   18082:	bf88      	it	hi
   18084:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   18088:	f63f aeaf 	bhi.w	17dea <__aeabi_dmul+0xde>
   1808c:	ebb5 0c03 	subs.w	ip, r5, r3
   18090:	bf04      	itt	eq
   18092:	ebb6 0c02 	subseq.w	ip, r6, r2
   18096:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1809a:	f150 0000 	adcs.w	r0, r0, #0
   1809e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   180a2:	bd70      	pop	{r4, r5, r6, pc}
   180a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   180a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   180ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   180b0:	bfc2      	ittt	gt
   180b2:	ebd4 050c 	rsbsgt	r5, r4, ip
   180b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   180ba:	bd70      	popgt	{r4, r5, r6, pc}
   180bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   180c0:	f04f 0e00 	mov.w	lr, #0
   180c4:	3c01      	subs	r4, #1
   180c6:	e690      	b.n	17dea <__aeabi_dmul+0xde>
   180c8:	ea45 0e06 	orr.w	lr, r5, r6
   180cc:	e68d      	b.n	17dea <__aeabi_dmul+0xde>
   180ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   180d2:	ea94 0f0c 	teq	r4, ip
   180d6:	bf08      	it	eq
   180d8:	ea95 0f0c 	teqeq	r5, ip
   180dc:	f43f af3b 	beq.w	17f56 <__aeabi_dmul+0x24a>
   180e0:	ea94 0f0c 	teq	r4, ip
   180e4:	d10a      	bne.n	180fc <__aeabi_ddiv+0x19c>
   180e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   180ea:	f47f af34 	bne.w	17f56 <__aeabi_dmul+0x24a>
   180ee:	ea95 0f0c 	teq	r5, ip
   180f2:	f47f af25 	bne.w	17f40 <__aeabi_dmul+0x234>
   180f6:	4610      	mov	r0, r2
   180f8:	4619      	mov	r1, r3
   180fa:	e72c      	b.n	17f56 <__aeabi_dmul+0x24a>
   180fc:	ea95 0f0c 	teq	r5, ip
   18100:	d106      	bne.n	18110 <__aeabi_ddiv+0x1b0>
   18102:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   18106:	f43f aefd 	beq.w	17f04 <__aeabi_dmul+0x1f8>
   1810a:	4610      	mov	r0, r2
   1810c:	4619      	mov	r1, r3
   1810e:	e722      	b.n	17f56 <__aeabi_dmul+0x24a>
   18110:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18114:	bf18      	it	ne
   18116:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1811a:	f47f aec5 	bne.w	17ea8 <__aeabi_dmul+0x19c>
   1811e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   18122:	f47f af0d 	bne.w	17f40 <__aeabi_dmul+0x234>
   18126:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1812a:	f47f aeeb 	bne.w	17f04 <__aeabi_dmul+0x1f8>
   1812e:	e712      	b.n	17f56 <__aeabi_dmul+0x24a>

00018130 <__gedf2>:
   18130:	f04f 3cff 	mov.w	ip, #4294967295
   18134:	e006      	b.n	18144 <__cmpdf2+0x4>
   18136:	bf00      	nop

00018138 <__ledf2>:
   18138:	f04f 0c01 	mov.w	ip, #1
   1813c:	e002      	b.n	18144 <__cmpdf2+0x4>
   1813e:	bf00      	nop

00018140 <__cmpdf2>:
   18140:	f04f 0c01 	mov.w	ip, #1
   18144:	f84d cd04 	str.w	ip, [sp, #-4]!
   18148:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1814c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18150:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   18154:	bf18      	it	ne
   18156:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1815a:	d01b      	beq.n	18194 <__cmpdf2+0x54>
   1815c:	b001      	add	sp, #4
   1815e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   18162:	bf0c      	ite	eq
   18164:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   18168:	ea91 0f03 	teqne	r1, r3
   1816c:	bf02      	ittt	eq
   1816e:	ea90 0f02 	teqeq	r0, r2
   18172:	2000      	moveq	r0, #0
   18174:	4770      	bxeq	lr
   18176:	f110 0f00 	cmn.w	r0, #0
   1817a:	ea91 0f03 	teq	r1, r3
   1817e:	bf58      	it	pl
   18180:	4299      	cmppl	r1, r3
   18182:	bf08      	it	eq
   18184:	4290      	cmpeq	r0, r2
   18186:	bf2c      	ite	cs
   18188:	17d8      	asrcs	r0, r3, #31
   1818a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1818e:	f040 0001 	orr.w	r0, r0, #1
   18192:	4770      	bx	lr
   18194:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   18198:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1819c:	d102      	bne.n	181a4 <__cmpdf2+0x64>
   1819e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   181a2:	d107      	bne.n	181b4 <__cmpdf2+0x74>
   181a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   181a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   181ac:	d1d6      	bne.n	1815c <__cmpdf2+0x1c>
   181ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   181b2:	d0d3      	beq.n	1815c <__cmpdf2+0x1c>
   181b4:	f85d 0b04 	ldr.w	r0, [sp], #4
   181b8:	4770      	bx	lr
   181ba:	bf00      	nop

000181bc <__aeabi_cdrcmple>:
   181bc:	4684      	mov	ip, r0
   181be:	4610      	mov	r0, r2
   181c0:	4662      	mov	r2, ip
   181c2:	468c      	mov	ip, r1
   181c4:	4619      	mov	r1, r3
   181c6:	4663      	mov	r3, ip
   181c8:	e000      	b.n	181cc <__aeabi_cdcmpeq>
   181ca:	bf00      	nop

000181cc <__aeabi_cdcmpeq>:
   181cc:	b501      	push	{r0, lr}
   181ce:	f7ff ffb7 	bl	18140 <__cmpdf2>
   181d2:	2800      	cmp	r0, #0
   181d4:	bf48      	it	mi
   181d6:	f110 0f00 	cmnmi.w	r0, #0
   181da:	bd01      	pop	{r0, pc}

000181dc <__aeabi_dcmpeq>:
   181dc:	f84d ed08 	str.w	lr, [sp, #-8]!
   181e0:	f7ff fff4 	bl	181cc <__aeabi_cdcmpeq>
   181e4:	bf0c      	ite	eq
   181e6:	2001      	moveq	r0, #1
   181e8:	2000      	movne	r0, #0
   181ea:	f85d fb08 	ldr.w	pc, [sp], #8
   181ee:	bf00      	nop

000181f0 <__aeabi_dcmplt>:
   181f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   181f4:	f7ff ffea 	bl	181cc <__aeabi_cdcmpeq>
   181f8:	bf34      	ite	cc
   181fa:	2001      	movcc	r0, #1
   181fc:	2000      	movcs	r0, #0
   181fe:	f85d fb08 	ldr.w	pc, [sp], #8
   18202:	bf00      	nop

00018204 <__aeabi_dcmple>:
   18204:	f84d ed08 	str.w	lr, [sp, #-8]!
   18208:	f7ff ffe0 	bl	181cc <__aeabi_cdcmpeq>
   1820c:	bf94      	ite	ls
   1820e:	2001      	movls	r0, #1
   18210:	2000      	movhi	r0, #0
   18212:	f85d fb08 	ldr.w	pc, [sp], #8
   18216:	bf00      	nop

00018218 <__aeabi_dcmpge>:
   18218:	f84d ed08 	str.w	lr, [sp, #-8]!
   1821c:	f7ff ffce 	bl	181bc <__aeabi_cdrcmple>
   18220:	bf94      	ite	ls
   18222:	2001      	movls	r0, #1
   18224:	2000      	movhi	r0, #0
   18226:	f85d fb08 	ldr.w	pc, [sp], #8
   1822a:	bf00      	nop

0001822c <__aeabi_dcmpgt>:
   1822c:	f84d ed08 	str.w	lr, [sp, #-8]!
   18230:	f7ff ffc4 	bl	181bc <__aeabi_cdrcmple>
   18234:	bf34      	ite	cc
   18236:	2001      	movcc	r0, #1
   18238:	2000      	movcs	r0, #0
   1823a:	f85d fb08 	ldr.w	pc, [sp], #8
   1823e:	bf00      	nop

00018240 <__aeabi_d2iz>:
   18240:	ea4f 0241 	mov.w	r2, r1, lsl #1
   18244:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   18248:	d215      	bcs.n	18276 <__aeabi_d2iz+0x36>
   1824a:	d511      	bpl.n	18270 <__aeabi_d2iz+0x30>
   1824c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   18250:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   18254:	d912      	bls.n	1827c <__aeabi_d2iz+0x3c>
   18256:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1825a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1825e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   18262:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18266:	fa23 f002 	lsr.w	r0, r3, r2
   1826a:	bf18      	it	ne
   1826c:	4240      	negne	r0, r0
   1826e:	4770      	bx	lr
   18270:	f04f 0000 	mov.w	r0, #0
   18274:	4770      	bx	lr
   18276:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1827a:	d105      	bne.n	18288 <__aeabi_d2iz+0x48>
   1827c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   18280:	bf08      	it	eq
   18282:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   18286:	4770      	bx	lr
   18288:	f04f 0000 	mov.w	r0, #0
   1828c:	4770      	bx	lr
   1828e:	bf00      	nop

00018290 <__aeabi_d2uiz>:
   18290:	004a      	lsls	r2, r1, #1
   18292:	d211      	bcs.n	182b8 <__aeabi_d2uiz+0x28>
   18294:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   18298:	d211      	bcs.n	182be <__aeabi_d2uiz+0x2e>
   1829a:	d50d      	bpl.n	182b8 <__aeabi_d2uiz+0x28>
   1829c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   182a0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   182a4:	d40e      	bmi.n	182c4 <__aeabi_d2uiz+0x34>
   182a6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   182aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   182ae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   182b2:	fa23 f002 	lsr.w	r0, r3, r2
   182b6:	4770      	bx	lr
   182b8:	f04f 0000 	mov.w	r0, #0
   182bc:	4770      	bx	lr
   182be:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   182c2:	d102      	bne.n	182ca <__aeabi_d2uiz+0x3a>
   182c4:	f04f 30ff 	mov.w	r0, #4294967295
   182c8:	4770      	bx	lr
   182ca:	f04f 0000 	mov.w	r0, #0
   182ce:	4770      	bx	lr

000182d0 <__aeabi_d2f>:
   182d0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   182d4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   182d8:	bf24      	itt	cs
   182da:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   182de:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   182e2:	d90d      	bls.n	18300 <__aeabi_d2f+0x30>
   182e4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   182e8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   182ec:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   182f0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   182f4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   182f8:	bf08      	it	eq
   182fa:	f020 0001 	biceq.w	r0, r0, #1
   182fe:	4770      	bx	lr
   18300:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   18304:	d121      	bne.n	1834a <__aeabi_d2f+0x7a>
   18306:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1830a:	bfbc      	itt	lt
   1830c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   18310:	4770      	bxlt	lr
   18312:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18316:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1831a:	f1c2 0218 	rsb	r2, r2, #24
   1831e:	f1c2 0c20 	rsb	ip, r2, #32
   18322:	fa10 f30c 	lsls.w	r3, r0, ip
   18326:	fa20 f002 	lsr.w	r0, r0, r2
   1832a:	bf18      	it	ne
   1832c:	f040 0001 	orrne.w	r0, r0, #1
   18330:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   18334:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   18338:	fa03 fc0c 	lsl.w	ip, r3, ip
   1833c:	ea40 000c 	orr.w	r0, r0, ip
   18340:	fa23 f302 	lsr.w	r3, r3, r2
   18344:	ea4f 0343 	mov.w	r3, r3, lsl #1
   18348:	e7cc      	b.n	182e4 <__aeabi_d2f+0x14>
   1834a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1834e:	d107      	bne.n	18360 <__aeabi_d2f+0x90>
   18350:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   18354:	bf1e      	ittt	ne
   18356:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1835a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   1835e:	4770      	bxne	lr
   18360:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   18364:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18368:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1836c:	4770      	bx	lr
   1836e:	bf00      	nop

00018370 <__aeabi_frsub>:
   18370:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   18374:	e002      	b.n	1837c <__addsf3>
   18376:	bf00      	nop

00018378 <__aeabi_fsub>:
   18378:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0001837c <__addsf3>:
   1837c:	0042      	lsls	r2, r0, #1
   1837e:	bf1f      	itttt	ne
   18380:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   18384:	ea92 0f03 	teqne	r2, r3
   18388:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   1838c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18390:	d06a      	beq.n	18468 <__addsf3+0xec>
   18392:	ea4f 6212 	mov.w	r2, r2, lsr #24
   18396:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1839a:	bfc1      	itttt	gt
   1839c:	18d2      	addgt	r2, r2, r3
   1839e:	4041      	eorgt	r1, r0
   183a0:	4048      	eorgt	r0, r1
   183a2:	4041      	eorgt	r1, r0
   183a4:	bfb8      	it	lt
   183a6:	425b      	neglt	r3, r3
   183a8:	2b19      	cmp	r3, #25
   183aa:	bf88      	it	hi
   183ac:	4770      	bxhi	lr
   183ae:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   183b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   183b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   183ba:	bf18      	it	ne
   183bc:	4240      	negne	r0, r0
   183be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   183c2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   183c6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   183ca:	bf18      	it	ne
   183cc:	4249      	negne	r1, r1
   183ce:	ea92 0f03 	teq	r2, r3
   183d2:	d03f      	beq.n	18454 <__addsf3+0xd8>
   183d4:	f1a2 0201 	sub.w	r2, r2, #1
   183d8:	fa41 fc03 	asr.w	ip, r1, r3
   183dc:	eb10 000c 	adds.w	r0, r0, ip
   183e0:	f1c3 0320 	rsb	r3, r3, #32
   183e4:	fa01 f103 	lsl.w	r1, r1, r3
   183e8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   183ec:	d502      	bpl.n	183f4 <__addsf3+0x78>
   183ee:	4249      	negs	r1, r1
   183f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   183f4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   183f8:	d313      	bcc.n	18422 <__addsf3+0xa6>
   183fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   183fe:	d306      	bcc.n	1840e <__addsf3+0x92>
   18400:	0840      	lsrs	r0, r0, #1
   18402:	ea4f 0131 	mov.w	r1, r1, rrx
   18406:	f102 0201 	add.w	r2, r2, #1
   1840a:	2afe      	cmp	r2, #254	; 0xfe
   1840c:	d251      	bcs.n	184b2 <__addsf3+0x136>
   1840e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   18412:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18416:	bf08      	it	eq
   18418:	f020 0001 	biceq.w	r0, r0, #1
   1841c:	ea40 0003 	orr.w	r0, r0, r3
   18420:	4770      	bx	lr
   18422:	0049      	lsls	r1, r1, #1
   18424:	eb40 0000 	adc.w	r0, r0, r0
   18428:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   1842c:	f1a2 0201 	sub.w	r2, r2, #1
   18430:	d1ed      	bne.n	1840e <__addsf3+0x92>
   18432:	fab0 fc80 	clz	ip, r0
   18436:	f1ac 0c08 	sub.w	ip, ip, #8
   1843a:	ebb2 020c 	subs.w	r2, r2, ip
   1843e:	fa00 f00c 	lsl.w	r0, r0, ip
   18442:	bfaa      	itet	ge
   18444:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   18448:	4252      	neglt	r2, r2
   1844a:	4318      	orrge	r0, r3
   1844c:	bfbc      	itt	lt
   1844e:	40d0      	lsrlt	r0, r2
   18450:	4318      	orrlt	r0, r3
   18452:	4770      	bx	lr
   18454:	f092 0f00 	teq	r2, #0
   18458:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   1845c:	bf06      	itte	eq
   1845e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   18462:	3201      	addeq	r2, #1
   18464:	3b01      	subne	r3, #1
   18466:	e7b5      	b.n	183d4 <__addsf3+0x58>
   18468:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1846c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18470:	bf18      	it	ne
   18472:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18476:	d021      	beq.n	184bc <__addsf3+0x140>
   18478:	ea92 0f03 	teq	r2, r3
   1847c:	d004      	beq.n	18488 <__addsf3+0x10c>
   1847e:	f092 0f00 	teq	r2, #0
   18482:	bf08      	it	eq
   18484:	4608      	moveq	r0, r1
   18486:	4770      	bx	lr
   18488:	ea90 0f01 	teq	r0, r1
   1848c:	bf1c      	itt	ne
   1848e:	2000      	movne	r0, #0
   18490:	4770      	bxne	lr
   18492:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   18496:	d104      	bne.n	184a2 <__addsf3+0x126>
   18498:	0040      	lsls	r0, r0, #1
   1849a:	bf28      	it	cs
   1849c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   184a0:	4770      	bx	lr
   184a2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   184a6:	bf3c      	itt	cc
   184a8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   184ac:	4770      	bxcc	lr
   184ae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   184b2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   184b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   184ba:	4770      	bx	lr
   184bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
   184c0:	bf16      	itet	ne
   184c2:	4608      	movne	r0, r1
   184c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   184c8:	4601      	movne	r1, r0
   184ca:	0242      	lsls	r2, r0, #9
   184cc:	bf06      	itte	eq
   184ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   184d2:	ea90 0f01 	teqeq	r0, r1
   184d6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   184da:	4770      	bx	lr

000184dc <__aeabi_ui2f>:
   184dc:	f04f 0300 	mov.w	r3, #0
   184e0:	e004      	b.n	184ec <__aeabi_i2f+0x8>
   184e2:	bf00      	nop

000184e4 <__aeabi_i2f>:
   184e4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   184e8:	bf48      	it	mi
   184ea:	4240      	negmi	r0, r0
   184ec:	ea5f 0c00 	movs.w	ip, r0
   184f0:	bf08      	it	eq
   184f2:	4770      	bxeq	lr
   184f4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   184f8:	4601      	mov	r1, r0
   184fa:	f04f 0000 	mov.w	r0, #0
   184fe:	e01c      	b.n	1853a <__aeabi_l2f+0x2a>

00018500 <__aeabi_ul2f>:
   18500:	ea50 0201 	orrs.w	r2, r0, r1
   18504:	bf08      	it	eq
   18506:	4770      	bxeq	lr
   18508:	f04f 0300 	mov.w	r3, #0
   1850c:	e00a      	b.n	18524 <__aeabi_l2f+0x14>
   1850e:	bf00      	nop

00018510 <__aeabi_l2f>:
   18510:	ea50 0201 	orrs.w	r2, r0, r1
   18514:	bf08      	it	eq
   18516:	4770      	bxeq	lr
   18518:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   1851c:	d502      	bpl.n	18524 <__aeabi_l2f+0x14>
   1851e:	4240      	negs	r0, r0
   18520:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18524:	ea5f 0c01 	movs.w	ip, r1
   18528:	bf02      	ittt	eq
   1852a:	4684      	moveq	ip, r0
   1852c:	4601      	moveq	r1, r0
   1852e:	2000      	moveq	r0, #0
   18530:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   18534:	bf08      	it	eq
   18536:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1853a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1853e:	fabc f28c 	clz	r2, ip
   18542:	3a08      	subs	r2, #8
   18544:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   18548:	db10      	blt.n	1856c <__aeabi_l2f+0x5c>
   1854a:	fa01 fc02 	lsl.w	ip, r1, r2
   1854e:	4463      	add	r3, ip
   18550:	fa00 fc02 	lsl.w	ip, r0, r2
   18554:	f1c2 0220 	rsb	r2, r2, #32
   18558:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1855c:	fa20 f202 	lsr.w	r2, r0, r2
   18560:	eb43 0002 	adc.w	r0, r3, r2
   18564:	bf08      	it	eq
   18566:	f020 0001 	biceq.w	r0, r0, #1
   1856a:	4770      	bx	lr
   1856c:	f102 0220 	add.w	r2, r2, #32
   18570:	fa01 fc02 	lsl.w	ip, r1, r2
   18574:	f1c2 0220 	rsb	r2, r2, #32
   18578:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   1857c:	fa21 f202 	lsr.w	r2, r1, r2
   18580:	eb43 0002 	adc.w	r0, r3, r2
   18584:	bf08      	it	eq
   18586:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1858a:	4770      	bx	lr

0001858c <__aeabi_fmul>:
   1858c:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18590:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   18594:	bf1e      	ittt	ne
   18596:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1859a:	ea92 0f0c 	teqne	r2, ip
   1859e:	ea93 0f0c 	teqne	r3, ip
   185a2:	d06f      	beq.n	18684 <__aeabi_fmul+0xf8>
   185a4:	441a      	add	r2, r3
   185a6:	ea80 0c01 	eor.w	ip, r0, r1
   185aa:	0240      	lsls	r0, r0, #9
   185ac:	bf18      	it	ne
   185ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   185b2:	d01e      	beq.n	185f2 <__aeabi_fmul+0x66>
   185b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   185b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   185bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   185c0:	fba0 3101 	umull	r3, r1, r0, r1
   185c4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   185c8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   185cc:	bf3e      	ittt	cc
   185ce:	0049      	lslcc	r1, r1, #1
   185d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   185d4:	005b      	lslcc	r3, r3, #1
   185d6:	ea40 0001 	orr.w	r0, r0, r1
   185da:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   185de:	2afd      	cmp	r2, #253	; 0xfd
   185e0:	d81d      	bhi.n	1861e <__aeabi_fmul+0x92>
   185e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   185e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   185ea:	bf08      	it	eq
   185ec:	f020 0001 	biceq.w	r0, r0, #1
   185f0:	4770      	bx	lr
   185f2:	f090 0f00 	teq	r0, #0
   185f6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   185fa:	bf08      	it	eq
   185fc:	0249      	lsleq	r1, r1, #9
   185fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   18602:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   18606:	3a7f      	subs	r2, #127	; 0x7f
   18608:	bfc2      	ittt	gt
   1860a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1860e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   18612:	4770      	bxgt	lr
   18614:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18618:	f04f 0300 	mov.w	r3, #0
   1861c:	3a01      	subs	r2, #1
   1861e:	dc5d      	bgt.n	186dc <__aeabi_fmul+0x150>
   18620:	f112 0f19 	cmn.w	r2, #25
   18624:	bfdc      	itt	le
   18626:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   1862a:	4770      	bxle	lr
   1862c:	f1c2 0200 	rsb	r2, r2, #0
   18630:	0041      	lsls	r1, r0, #1
   18632:	fa21 f102 	lsr.w	r1, r1, r2
   18636:	f1c2 0220 	rsb	r2, r2, #32
   1863a:	fa00 fc02 	lsl.w	ip, r0, r2
   1863e:	ea5f 0031 	movs.w	r0, r1, rrx
   18642:	f140 0000 	adc.w	r0, r0, #0
   18646:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   1864a:	bf08      	it	eq
   1864c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   18650:	4770      	bx	lr
   18652:	f092 0f00 	teq	r2, #0
   18656:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1865a:	bf02      	ittt	eq
   1865c:	0040      	lsleq	r0, r0, #1
   1865e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   18662:	3a01      	subeq	r2, #1
   18664:	d0f9      	beq.n	1865a <__aeabi_fmul+0xce>
   18666:	ea40 000c 	orr.w	r0, r0, ip
   1866a:	f093 0f00 	teq	r3, #0
   1866e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18672:	bf02      	ittt	eq
   18674:	0049      	lsleq	r1, r1, #1
   18676:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1867a:	3b01      	subeq	r3, #1
   1867c:	d0f9      	beq.n	18672 <__aeabi_fmul+0xe6>
   1867e:	ea41 010c 	orr.w	r1, r1, ip
   18682:	e78f      	b.n	185a4 <__aeabi_fmul+0x18>
   18684:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   18688:	ea92 0f0c 	teq	r2, ip
   1868c:	bf18      	it	ne
   1868e:	ea93 0f0c 	teqne	r3, ip
   18692:	d00a      	beq.n	186aa <__aeabi_fmul+0x11e>
   18694:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   18698:	bf18      	it	ne
   1869a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1869e:	d1d8      	bne.n	18652 <__aeabi_fmul+0xc6>
   186a0:	ea80 0001 	eor.w	r0, r0, r1
   186a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   186a8:	4770      	bx	lr
   186aa:	f090 0f00 	teq	r0, #0
   186ae:	bf17      	itett	ne
   186b0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   186b4:	4608      	moveq	r0, r1
   186b6:	f091 0f00 	teqne	r1, #0
   186ba:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   186be:	d014      	beq.n	186ea <__aeabi_fmul+0x15e>
   186c0:	ea92 0f0c 	teq	r2, ip
   186c4:	d101      	bne.n	186ca <__aeabi_fmul+0x13e>
   186c6:	0242      	lsls	r2, r0, #9
   186c8:	d10f      	bne.n	186ea <__aeabi_fmul+0x15e>
   186ca:	ea93 0f0c 	teq	r3, ip
   186ce:	d103      	bne.n	186d8 <__aeabi_fmul+0x14c>
   186d0:	024b      	lsls	r3, r1, #9
   186d2:	bf18      	it	ne
   186d4:	4608      	movne	r0, r1
   186d6:	d108      	bne.n	186ea <__aeabi_fmul+0x15e>
   186d8:	ea80 0001 	eor.w	r0, r0, r1
   186dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   186e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   186e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   186e8:	4770      	bx	lr
   186ea:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   186ee:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   186f2:	4770      	bx	lr

000186f4 <__aeabi_fdiv>:
   186f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
   186f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   186fc:	bf1e      	ittt	ne
   186fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   18702:	ea92 0f0c 	teqne	r2, ip
   18706:	ea93 0f0c 	teqne	r3, ip
   1870a:	d069      	beq.n	187e0 <__aeabi_fdiv+0xec>
   1870c:	eba2 0203 	sub.w	r2, r2, r3
   18710:	ea80 0c01 	eor.w	ip, r0, r1
   18714:	0249      	lsls	r1, r1, #9
   18716:	ea4f 2040 	mov.w	r0, r0, lsl #9
   1871a:	d037      	beq.n	1878c <__aeabi_fdiv+0x98>
   1871c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18720:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   18724:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   18728:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1872c:	428b      	cmp	r3, r1
   1872e:	bf38      	it	cc
   18730:	005b      	lslcc	r3, r3, #1
   18732:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   18736:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   1873a:	428b      	cmp	r3, r1
   1873c:	bf24      	itt	cs
   1873e:	1a5b      	subcs	r3, r3, r1
   18740:	ea40 000c 	orrcs.w	r0, r0, ip
   18744:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   18748:	bf24      	itt	cs
   1874a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   1874e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   18752:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   18756:	bf24      	itt	cs
   18758:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   1875c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   18760:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   18764:	bf24      	itt	cs
   18766:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   1876a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1876e:	011b      	lsls	r3, r3, #4
   18770:	bf18      	it	ne
   18772:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   18776:	d1e0      	bne.n	1873a <__aeabi_fdiv+0x46>
   18778:	2afd      	cmp	r2, #253	; 0xfd
   1877a:	f63f af50 	bhi.w	1861e <__aeabi_fmul+0x92>
   1877e:	428b      	cmp	r3, r1
   18780:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18784:	bf08      	it	eq
   18786:	f020 0001 	biceq.w	r0, r0, #1
   1878a:	4770      	bx	lr
   1878c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   18790:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   18794:	327f      	adds	r2, #127	; 0x7f
   18796:	bfc2      	ittt	gt
   18798:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1879c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   187a0:	4770      	bxgt	lr
   187a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   187a6:	f04f 0300 	mov.w	r3, #0
   187aa:	3a01      	subs	r2, #1
   187ac:	e737      	b.n	1861e <__aeabi_fmul+0x92>
   187ae:	f092 0f00 	teq	r2, #0
   187b2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   187b6:	bf02      	ittt	eq
   187b8:	0040      	lsleq	r0, r0, #1
   187ba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   187be:	3a01      	subeq	r2, #1
   187c0:	d0f9      	beq.n	187b6 <__aeabi_fdiv+0xc2>
   187c2:	ea40 000c 	orr.w	r0, r0, ip
   187c6:	f093 0f00 	teq	r3, #0
   187ca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   187ce:	bf02      	ittt	eq
   187d0:	0049      	lsleq	r1, r1, #1
   187d2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   187d6:	3b01      	subeq	r3, #1
   187d8:	d0f9      	beq.n	187ce <__aeabi_fdiv+0xda>
   187da:	ea41 010c 	orr.w	r1, r1, ip
   187de:	e795      	b.n	1870c <__aeabi_fdiv+0x18>
   187e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   187e4:	ea92 0f0c 	teq	r2, ip
   187e8:	d108      	bne.n	187fc <__aeabi_fdiv+0x108>
   187ea:	0242      	lsls	r2, r0, #9
   187ec:	f47f af7d 	bne.w	186ea <__aeabi_fmul+0x15e>
   187f0:	ea93 0f0c 	teq	r3, ip
   187f4:	f47f af70 	bne.w	186d8 <__aeabi_fmul+0x14c>
   187f8:	4608      	mov	r0, r1
   187fa:	e776      	b.n	186ea <__aeabi_fmul+0x15e>
   187fc:	ea93 0f0c 	teq	r3, ip
   18800:	d104      	bne.n	1880c <__aeabi_fdiv+0x118>
   18802:	024b      	lsls	r3, r1, #9
   18804:	f43f af4c 	beq.w	186a0 <__aeabi_fmul+0x114>
   18808:	4608      	mov	r0, r1
   1880a:	e76e      	b.n	186ea <__aeabi_fmul+0x15e>
   1880c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   18810:	bf18      	it	ne
   18812:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   18816:	d1ca      	bne.n	187ae <__aeabi_fdiv+0xba>
   18818:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   1881c:	f47f af5c 	bne.w	186d8 <__aeabi_fmul+0x14c>
   18820:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   18824:	f47f af3c 	bne.w	186a0 <__aeabi_fmul+0x114>
   18828:	e75f      	b.n	186ea <__aeabi_fmul+0x15e>
   1882a:	bf00      	nop

0001882c <__gesf2>:
   1882c:	f04f 3cff 	mov.w	ip, #4294967295
   18830:	e006      	b.n	18840 <__cmpsf2+0x4>
   18832:	bf00      	nop

00018834 <__lesf2>:
   18834:	f04f 0c01 	mov.w	ip, #1
   18838:	e002      	b.n	18840 <__cmpsf2+0x4>
   1883a:	bf00      	nop

0001883c <__cmpsf2>:
   1883c:	f04f 0c01 	mov.w	ip, #1
   18840:	f84d cd04 	str.w	ip, [sp, #-4]!
   18844:	ea4f 0240 	mov.w	r2, r0, lsl #1
   18848:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1884c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18850:	bf18      	it	ne
   18852:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18856:	d011      	beq.n	1887c <__cmpsf2+0x40>
   18858:	b001      	add	sp, #4
   1885a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   1885e:	bf18      	it	ne
   18860:	ea90 0f01 	teqne	r0, r1
   18864:	bf58      	it	pl
   18866:	ebb2 0003 	subspl.w	r0, r2, r3
   1886a:	bf88      	it	hi
   1886c:	17c8      	asrhi	r0, r1, #31
   1886e:	bf38      	it	cc
   18870:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   18874:	bf18      	it	ne
   18876:	f040 0001 	orrne.w	r0, r0, #1
   1887a:	4770      	bx	lr
   1887c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18880:	d102      	bne.n	18888 <__cmpsf2+0x4c>
   18882:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   18886:	d105      	bne.n	18894 <__cmpsf2+0x58>
   18888:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   1888c:	d1e4      	bne.n	18858 <__cmpsf2+0x1c>
   1888e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   18892:	d0e1      	beq.n	18858 <__cmpsf2+0x1c>
   18894:	f85d 0b04 	ldr.w	r0, [sp], #4
   18898:	4770      	bx	lr
   1889a:	bf00      	nop

0001889c <__aeabi_cfrcmple>:
   1889c:	4684      	mov	ip, r0
   1889e:	4608      	mov	r0, r1
   188a0:	4661      	mov	r1, ip
   188a2:	e7ff      	b.n	188a4 <__aeabi_cfcmpeq>

000188a4 <__aeabi_cfcmpeq>:
   188a4:	b50f      	push	{r0, r1, r2, r3, lr}
   188a6:	f7ff ffc9 	bl	1883c <__cmpsf2>
   188aa:	2800      	cmp	r0, #0
   188ac:	bf48      	it	mi
   188ae:	f110 0f00 	cmnmi.w	r0, #0
   188b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

000188b4 <__aeabi_fcmpeq>:
   188b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   188b8:	f7ff fff4 	bl	188a4 <__aeabi_cfcmpeq>
   188bc:	bf0c      	ite	eq
   188be:	2001      	moveq	r0, #1
   188c0:	2000      	movne	r0, #0
   188c2:	f85d fb08 	ldr.w	pc, [sp], #8
   188c6:	bf00      	nop

000188c8 <__aeabi_fcmplt>:
   188c8:	f84d ed08 	str.w	lr, [sp, #-8]!
   188cc:	f7ff ffea 	bl	188a4 <__aeabi_cfcmpeq>
   188d0:	bf34      	ite	cc
   188d2:	2001      	movcc	r0, #1
   188d4:	2000      	movcs	r0, #0
   188d6:	f85d fb08 	ldr.w	pc, [sp], #8
   188da:	bf00      	nop

000188dc <__aeabi_fcmple>:
   188dc:	f84d ed08 	str.w	lr, [sp, #-8]!
   188e0:	f7ff ffe0 	bl	188a4 <__aeabi_cfcmpeq>
   188e4:	bf94      	ite	ls
   188e6:	2001      	movls	r0, #1
   188e8:	2000      	movhi	r0, #0
   188ea:	f85d fb08 	ldr.w	pc, [sp], #8
   188ee:	bf00      	nop

000188f0 <__aeabi_fcmpge>:
   188f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   188f4:	f7ff ffd2 	bl	1889c <__aeabi_cfrcmple>
   188f8:	bf94      	ite	ls
   188fa:	2001      	movls	r0, #1
   188fc:	2000      	movhi	r0, #0
   188fe:	f85d fb08 	ldr.w	pc, [sp], #8
   18902:	bf00      	nop

00018904 <__aeabi_fcmpgt>:
   18904:	f84d ed08 	str.w	lr, [sp, #-8]!
   18908:	f7ff ffc8 	bl	1889c <__aeabi_cfrcmple>
   1890c:	bf34      	ite	cc
   1890e:	2001      	movcc	r0, #1
   18910:	2000      	movcs	r0, #0
   18912:	f85d fb08 	ldr.w	pc, [sp], #8
   18916:	bf00      	nop

00018918 <__aeabi_f2iz>:
   18918:	ea4f 0240 	mov.w	r2, r0, lsl #1
   1891c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   18920:	d30f      	bcc.n	18942 <__aeabi_f2iz+0x2a>
   18922:	f04f 039e 	mov.w	r3, #158	; 0x9e
   18926:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   1892a:	d90d      	bls.n	18948 <__aeabi_f2iz+0x30>
   1892c:	ea4f 2300 	mov.w	r3, r0, lsl #8
   18930:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   18934:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   18938:	fa23 f002 	lsr.w	r0, r3, r2
   1893c:	bf18      	it	ne
   1893e:	4240      	negne	r0, r0
   18940:	4770      	bx	lr
   18942:	f04f 0000 	mov.w	r0, #0
   18946:	4770      	bx	lr
   18948:	f112 0f61 	cmn.w	r2, #97	; 0x61
   1894c:	d101      	bne.n	18952 <__aeabi_f2iz+0x3a>
   1894e:	0242      	lsls	r2, r0, #9
   18950:	d105      	bne.n	1895e <__aeabi_f2iz+0x46>
   18952:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   18956:	bf08      	it	eq
   18958:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1895c:	4770      	bx	lr
   1895e:	f04f 0000 	mov.w	r0, #0
   18962:	4770      	bx	lr

00018964 <memcpy>:
   18964:	2a0f      	cmp	r2, #15
   18966:	b4f0      	push	{r4, r5, r6, r7}
   18968:	d945      	bls.n	189f6 <memcpy+0x92>
   1896a:	ea40 0301 	orr.w	r3, r0, r1
   1896e:	079b      	lsls	r3, r3, #30
   18970:	d145      	bne.n	189fe <memcpy+0x9a>
   18972:	f1a2 0710 	sub.w	r7, r2, #16
   18976:	460c      	mov	r4, r1
   18978:	4603      	mov	r3, r0
   1897a:	093f      	lsrs	r7, r7, #4
   1897c:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   18980:	3610      	adds	r6, #16
   18982:	6825      	ldr	r5, [r4, #0]
   18984:	3310      	adds	r3, #16
   18986:	3410      	adds	r4, #16
   18988:	f843 5c10 	str.w	r5, [r3, #-16]
   1898c:	f854 5c0c 	ldr.w	r5, [r4, #-12]
   18990:	f843 5c0c 	str.w	r5, [r3, #-12]
   18994:	f854 5c08 	ldr.w	r5, [r4, #-8]
   18998:	f843 5c08 	str.w	r5, [r3, #-8]
   1899c:	f854 5c04 	ldr.w	r5, [r4, #-4]
   189a0:	f843 5c04 	str.w	r5, [r3, #-4]
   189a4:	42b3      	cmp	r3, r6
   189a6:	d1ec      	bne.n	18982 <memcpy+0x1e>
   189a8:	1c7b      	adds	r3, r7, #1
   189aa:	f002 0c0f 	and.w	ip, r2, #15
   189ae:	f1bc 0f03 	cmp.w	ip, #3
   189b2:	ea4f 1303 	mov.w	r3, r3, lsl #4
   189b6:	4419      	add	r1, r3
   189b8:	4403      	add	r3, r0
   189ba:	d922      	bls.n	18a02 <memcpy+0x9e>
   189bc:	460e      	mov	r6, r1
   189be:	461d      	mov	r5, r3
   189c0:	4664      	mov	r4, ip
   189c2:	f856 7b04 	ldr.w	r7, [r6], #4
   189c6:	3c04      	subs	r4, #4
   189c8:	2c03      	cmp	r4, #3
   189ca:	f845 7b04 	str.w	r7, [r5], #4
   189ce:	d8f8      	bhi.n	189c2 <memcpy+0x5e>
   189d0:	f1ac 0404 	sub.w	r4, ip, #4
   189d4:	f002 0203 	and.w	r2, r2, #3
   189d8:	f024 0403 	bic.w	r4, r4, #3
   189dc:	3404      	adds	r4, #4
   189de:	4423      	add	r3, r4
   189e0:	4421      	add	r1, r4
   189e2:	b132      	cbz	r2, 189f2 <memcpy+0x8e>
   189e4:	440a      	add	r2, r1
   189e6:	f811 4b01 	ldrb.w	r4, [r1], #1
   189ea:	4291      	cmp	r1, r2
   189ec:	f803 4b01 	strb.w	r4, [r3], #1
   189f0:	d1f9      	bne.n	189e6 <memcpy+0x82>
   189f2:	bcf0      	pop	{r4, r5, r6, r7}
   189f4:	4770      	bx	lr
   189f6:	4603      	mov	r3, r0
   189f8:	2a00      	cmp	r2, #0
   189fa:	d1f3      	bne.n	189e4 <memcpy+0x80>
   189fc:	e7f9      	b.n	189f2 <memcpy+0x8e>
   189fe:	4603      	mov	r3, r0
   18a00:	e7f0      	b.n	189e4 <memcpy+0x80>
   18a02:	4662      	mov	r2, ip
   18a04:	2a00      	cmp	r2, #0
   18a06:	d1ed      	bne.n	189e4 <memcpy+0x80>
   18a08:	e7f3      	b.n	189f2 <memcpy+0x8e>
   18a0a:	bf00      	nop

00018a0c <memset>:
   18a0c:	0783      	lsls	r3, r0, #30
   18a0e:	b4f0      	push	{r4, r5, r6, r7}
   18a10:	d048      	beq.n	18aa4 <memset+0x98>
   18a12:	1e54      	subs	r4, r2, #1
   18a14:	2a00      	cmp	r2, #0
   18a16:	d043      	beq.n	18aa0 <memset+0x94>
   18a18:	b2cd      	uxtb	r5, r1
   18a1a:	4603      	mov	r3, r0
   18a1c:	e002      	b.n	18a24 <memset+0x18>
   18a1e:	2c00      	cmp	r4, #0
   18a20:	d03e      	beq.n	18aa0 <memset+0x94>
   18a22:	4614      	mov	r4, r2
   18a24:	f803 5b01 	strb.w	r5, [r3], #1
   18a28:	f013 0f03 	tst.w	r3, #3
   18a2c:	f104 32ff 	add.w	r2, r4, #4294967295
   18a30:	d1f5      	bne.n	18a1e <memset+0x12>
   18a32:	2c03      	cmp	r4, #3
   18a34:	d92d      	bls.n	18a92 <memset+0x86>
   18a36:	b2cd      	uxtb	r5, r1
   18a38:	2c0f      	cmp	r4, #15
   18a3a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   18a3e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   18a42:	d918      	bls.n	18a76 <memset+0x6a>
   18a44:	f1a4 0710 	sub.w	r7, r4, #16
   18a48:	f103 0610 	add.w	r6, r3, #16
   18a4c:	461a      	mov	r2, r3
   18a4e:	093f      	lsrs	r7, r7, #4
   18a50:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   18a54:	6015      	str	r5, [r2, #0]
   18a56:	3210      	adds	r2, #16
   18a58:	f842 5c0c 	str.w	r5, [r2, #-12]
   18a5c:	f842 5c08 	str.w	r5, [r2, #-8]
   18a60:	f842 5c04 	str.w	r5, [r2, #-4]
   18a64:	42b2      	cmp	r2, r6
   18a66:	d1f5      	bne.n	18a54 <memset+0x48>
   18a68:	f004 040f 	and.w	r4, r4, #15
   18a6c:	3701      	adds	r7, #1
   18a6e:	2c03      	cmp	r4, #3
   18a70:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   18a74:	d90d      	bls.n	18a92 <memset+0x86>
   18a76:	461e      	mov	r6, r3
   18a78:	4622      	mov	r2, r4
   18a7a:	3a04      	subs	r2, #4
   18a7c:	f846 5b04 	str.w	r5, [r6], #4
   18a80:	2a03      	cmp	r2, #3
   18a82:	d8fa      	bhi.n	18a7a <memset+0x6e>
   18a84:	1f22      	subs	r2, r4, #4
   18a86:	f004 0403 	and.w	r4, r4, #3
   18a8a:	f022 0203 	bic.w	r2, r2, #3
   18a8e:	3204      	adds	r2, #4
   18a90:	4413      	add	r3, r2
   18a92:	b12c      	cbz	r4, 18aa0 <memset+0x94>
   18a94:	b2c9      	uxtb	r1, r1
   18a96:	441c      	add	r4, r3
   18a98:	f803 1b01 	strb.w	r1, [r3], #1
   18a9c:	42a3      	cmp	r3, r4
   18a9e:	d1fb      	bne.n	18a98 <memset+0x8c>
   18aa0:	bcf0      	pop	{r4, r5, r6, r7}
   18aa2:	4770      	bx	lr
   18aa4:	4614      	mov	r4, r2
   18aa6:	4603      	mov	r3, r0
   18aa8:	e7c3      	b.n	18a32 <memset+0x26>
   18aaa:	bf00      	nop

00018aac <strncpy>:
   18aac:	ea40 0301 	orr.w	r3, r0, r1
   18ab0:	079b      	lsls	r3, r3, #30
   18ab2:	b470      	push	{r4, r5, r6}
   18ab4:	d12b      	bne.n	18b0e <strncpy+0x62>
   18ab6:	2a03      	cmp	r2, #3
   18ab8:	bf84      	itt	hi
   18aba:	460b      	movhi	r3, r1
   18abc:	4605      	movhi	r5, r0
   18abe:	d926      	bls.n	18b0e <strncpy+0x62>
   18ac0:	4619      	mov	r1, r3
   18ac2:	f853 4b04 	ldr.w	r4, [r3], #4
   18ac6:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
   18aca:	ea26 0604 	bic.w	r6, r6, r4
   18ace:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   18ad2:	d105      	bne.n	18ae0 <strncpy+0x34>
   18ad4:	3a04      	subs	r2, #4
   18ad6:	f845 4b04 	str.w	r4, [r5], #4
   18ada:	2a03      	cmp	r2, #3
   18adc:	4619      	mov	r1, r3
   18ade:	d8ef      	bhi.n	18ac0 <strncpy+0x14>
   18ae0:	b19a      	cbz	r2, 18b0a <strncpy+0x5e>
   18ae2:	780c      	ldrb	r4, [r1, #0]
   18ae4:	3a01      	subs	r2, #1
   18ae6:	1c6b      	adds	r3, r5, #1
   18ae8:	702c      	strb	r4, [r5, #0]
   18aea:	b13c      	cbz	r4, 18afc <strncpy+0x50>
   18aec:	b16a      	cbz	r2, 18b0a <strncpy+0x5e>
   18aee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   18af2:	3a01      	subs	r2, #1
   18af4:	f803 4b01 	strb.w	r4, [r3], #1
   18af8:	2c00      	cmp	r4, #0
   18afa:	d1f7      	bne.n	18aec <strncpy+0x40>
   18afc:	b12a      	cbz	r2, 18b0a <strncpy+0x5e>
   18afe:	441a      	add	r2, r3
   18b00:	2100      	movs	r1, #0
   18b02:	f803 1b01 	strb.w	r1, [r3], #1
   18b06:	4293      	cmp	r3, r2
   18b08:	d1fb      	bne.n	18b02 <strncpy+0x56>
   18b0a:	bc70      	pop	{r4, r5, r6}
   18b0c:	4770      	bx	lr
   18b0e:	4605      	mov	r5, r0
   18b10:	e7e6      	b.n	18ae0 <strncpy+0x34>
   18b12:	bf00      	nop

00018b14 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
   18b14:	2100      	movs	r1, #0
  b	LoopCopyDataInit
   18b16:	e003      	b.n	18b20 <LoopCopyDataInit>

00018b18 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
   18b18:	4b0a      	ldr	r3, [pc, #40]	; (18b44 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
   18b1a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
   18b1c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
   18b1e:	3104      	adds	r1, #4

00018b20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   18b20:	4809      	ldr	r0, [pc, #36]	; (18b48 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
   18b22:	4b0a      	ldr	r3, [pc, #40]	; (18b4c <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
   18b24:	1842      	adds	r2, r0, r1
	cmp	r2, r3
   18b26:	429a      	cmp	r2, r3
	bcc	CopyDataInit
   18b28:	d3f6      	bcc.n	18b18 <CopyDataInit>
	ldr	r2, =_sbss
   18b2a:	4a09      	ldr	r2, [pc, #36]	; (18b50 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
   18b2c:	e002      	b.n	18b34 <LoopFillZerobss>

00018b2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
   18b2e:	2300      	movs	r3, #0
	str	r3, [r2], #4
   18b30:	f842 3b04 	str.w	r3, [r2], #4

00018b34 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
   18b34:	4b07      	ldr	r3, [pc, #28]	; (18b54 <LoopFillZerobss+0x20>)
	cmp	r2, r3
   18b36:	429a      	cmp	r2, r3
	bcc	FillZerobss
   18b38:	d3f9      	bcc.n	18b2e <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
   18b3a:	f7e7 fbff 	bl	33c <SystemInit>
/* Call the application's entry point.*/
	bl	main
   18b3e:	f7fe fe85 	bl	1784c <main>
	bx	lr    
   18b42:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
   18b44:	00018c38 	.word	0x00018c38
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   18b48:	20000000 	.word	0x20000000
	ldr	r3, =_edata
   18b4c:	200005d8 	.word	0x200005d8
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
   18b50:	200005d8 	.word	0x200005d8
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
   18b54:	2004cba4 	.word	0x2004cba4

00018b58 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
   18b58:	e7fe      	b.n	18b58 <ADC1_2_IRQHandler>
   18b5a:	0000      	movs	r0, r0
   18b5c:	454c4449 	.word	0x454c4449
   18b60:	00000000 	.word	0x00000000

00018b64 <ulKernelPriority>:
   18b64:	0000007f                                ....

00018b68 <heapSTRUCT_SIZE>:
   18b68:	00010010                                         ..

00018b6a <version>:
   18b6a:	3d5a0001                                         ..

00018b6c <utm_east0>:
   18b6c:	00093d5a                                Z=..

00018b70 <utm_north0>:
   18b70:	005875e6                                .uX.

00018b74 <climb_pgain>:
   18b74:	bcf5c28f                                ....

00018b78 <climb_igain>:
   18b78:	3dcccccd                                ...=

00018b7c <level_gaz>:
   18b7c:	3e9eb852                                R..>

00018b80 <nav_east0>:
   18b80:	00093d5a                                Z=..

00018b84 <nav_north0>:
   18b84:	005875e6                                .uX.

00018b88 <nb_waypoint>:
   18b88:	00000007 33323130 37363534 42413938     ....0123456789AB
   18b98:	46454443                                CDEF

00018b9c <failsafe>:
	...
   18bb0:	20574246 746f6f42 20676e69 3a644924     FBW Booting $Id:
   18bc0:	69616d20 2c632e6e 2e312076 30322033      main.c,v 1.3 20
   18bd0:	312f3830 32322f30 3a393120 313a3134     08/10/22 19:41:1
   18be0:	61632039 20657373 20707845 000d0a24     9 casse Exp $...
   18bf0:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   18c00:	000d0a30 00000d0a 65532d52 6e617672     0.......R-Servan
   18c10:	00000074 65532d49 6e617672 00000074     t...I-Servant...
   18c20:	65532d43 6e617672 00000074 65532d4f     C-Servant...O-Se
   18c30:	6e617672 00000074                       rvant...
